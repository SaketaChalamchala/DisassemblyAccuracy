.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : 00C3B41DE2D853E7ED7425058149777D
.rdata:00000000 ; Input CRC32 : 15273A72
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\7zUpdate.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00000000 _rdata          segment para public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 $SG75624        db ' lzma 7z ace arc arj bz bz2 deb lzo lzx gz pak rpm sit tgz tbz tb'
.rdata:00000000                                         ; DATA XREF: .data:_g_Extso
.rdata:00000000                 db 'z2 tgz cab ha lha lzh rar zoo zip jar ear war msi 3gp avi mov mpe'
.rdata:00000000                 db 'g mpg mpe wmv aac ape fla flac la mp3 m4a mp4 ofr ogg pac ra rm r'
.rdata:00000000                 db 'ka shn swa tta wv wma wav swf  chm hxi hxs gif jpeg jpg jp2 png t'
.rdata:00000000                 db 'iff  bmp ico psd psp awg ps eps cgm dxf svg vrml wmf emf ai md ca'
.rdata:00000000                 db 'd dwg pps key sxi max 3ds iso bin nrg mdf img pdi tar cpio xpi vf'
.rdata:00000000                 db 'd vhd vud vmc vsv vmdk dsk nvram vmem vmsd vmsn vmss vmtm inl inc'
.rdata:00000000                 db ' idl acf asa h hpp hxx c cpp cxx rc java cs pas bas vb cls ctl fr'
.rdata:00000000                 db 'm dlg def f77 f f90 f95 asm sql manifest dep  mak clw csproj vcpr'
.rdata:00000000                 db 'oj sln dsp dsw  class  bat cmd xml xsd xsl xslt hxk hxc htm html '
.rdata:00000000                 db 'xhtml xht mht mhtml htw asp aspx css cgi jsp shtml awk sed hta js'
.rdata:00000000                 db ' php php3 php4 php5 phptml pl pm py pyo rb sh tcl vbs text txt te'
.rdata:00000000                 db 'x ans asc srt reg ini doc docx mcw dot rtf hlp xls xlr xlt xlw pp'
.rdata:00000000                 db 't pdf sxc sxd sxi sxg sxw stc sti stw stm odt ott odg otg odp otp'
.rdata:00000000                 db ' ods ots odf abw afp cwk lwp wpd wps wpt wrf wri abf afm bdf fon '
.rdata:00000000                 db 'mgf otf pcf pfa snf ttf dbf mdb nsf ntf wdb db fdb gdb exe dll oc'
.rdata:00000000                 db 'x vbx sfx sys tlb awx com obj lib out o so  pdb pch idb ncb opt',0
.rdata:00000450 $SG75856        db 'dll',0              ; DATA XREF: .data:_g_ExeExtso
.rdata:00000454 $SG75857        db 'exe',0              ; DATA XREF: .data:00000470o
.rdata:00000458 $SG75858        db 'ocx',0              ; DATA XREF: .data:00000474o
.rdata:0000045C $SG75859        db 'sfx',0              ; DATA XREF: .data:00000478o
.rdata:00000460 $SG75860        db 'sys',0              ; DATA XREF: .data:0000047Co
.rdata:00000464 ; char _SG75951[]
.rdata:00000464 $SG75951        db 'wav',0              ; DATA XREF: NArchive::N7z::CAnalysis::GetFilterGroup(uint,NArchive::N7z::CUpdateItem const &,NArchive::N7z::CFilterMode &):loc_5B2o
.rdata:00000464 _rdata          ends
.rdata:00000464
.data:00000468 ; ===========================================================================
.data:00000468
.data:00000468 ; Segment type: Pure data
.data:00000468 ; Segment permissions: Read/Write
.data:00000468 _data           segment dword public 'DATA' use32
.data:00000468                 assume cs:_data
.data:00000468                 ;org 468h
.data:00000468 _g_Exts         dd offset $SG75624      ; DATA XREF: NArchive::N7z::GetExtIndex(char const *)+21r
.data:00000468                                         ; " lzma 7z ace arc arj bz bz2 deb lzo lzx"...
.data:0000046C ; char *g_ExeExts
.data:0000046C _g_ExeExts      dd offset $SG75856      ; DATA XREF: NArchive::N7z::IsExeExt(wchar_t const *)+26r
.data:0000046C                                         ; "dll"
.data:00000470                 dd offset $SG75857      ; "exe"
.data:00000474                 dd offset $SG75858      ; "ocx"
.data:00000478                 dd offset $SG75859      ; "sfx"
.data:0000047C                 dd offset $SG75860      ; "sys"
.data:0000047C _data           ends
.data:0000047C
.text:00000480 ; ===========================================================================
.text:00000480
.text:00000480 ; Segment type: Pure code
.text:00000480 ; Segment permissions: Read/Execute
.text:00000480 _text           segment para public 'CODE' use32
.text:00000480                 assume cs:_text
.text:00000480                 ;org 480h
.text:00000480                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000480
.text:00000480 ; =============== S U B R O U T I N E =======================================
.text:00000480
.text:00000480 ; Attributes: bp-based frame
.text:00000480
.text:00000480 ; __int32 __thiscall NArchive::N7z::CAnalysis::GetFilterGroup(NArchive::N7z::CAnalysis *this, unsigned int, const struct NArchive::N7z::CUpdateItem *, struct NArchive::N7z::CFilterMode *)
.text:00000480                 public ?GetFilterGroup@CAnalysis@N7z@NArchive@@QAEJIABUCUpdateItem@23@AAUCFilterMode@23@@Z
.text:00000480 ?GetFilterGroup@CAnalysis@N7z@NArchive@@QAEJIABUCUpdateItem@23@AAUCFilterMode@23@@Z proc near
.text:00000480                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+A60p
.text:00000480
.text:00000480 var_64          = dword ptr -64h
.text:00000480 var_60          = dword ptr -60h
.text:00000480 var_5C          = dword ptr -5Ch
.text:00000480 var_58          = dword ptr -58h
.text:00000480 var_54          = dword ptr -54h
.text:00000480 var_4C          = dword ptr -4Ch
.text:00000480 var_44          = dword ptr -44h
.text:00000480 var_3C          = byte ptr -3Ch
.text:00000480 var_34          = dword ptr -34h
.text:00000480 var_30          = dword ptr -30h
.text:00000480 var_2A          = byte ptr -2Ah
.text:00000480 var_29          = byte ptr -29h
.text:00000480 var_28          = dword ptr -28h
.text:00000480 var_24          = dword ptr -24h
.text:00000480 var_1C          = dword ptr -1Ch
.text:00000480 var_18          = dword ptr -18h
.text:00000480 var_10          = dword ptr -10h
.text:00000480 var_C           = dword ptr -0Ch
.text:00000480 var_4           = dword ptr -4
.text:00000480 arg_0           = dword ptr  8
.text:00000480 arg_4           = dword ptr  0Ch
.text:00000480 arg_8           = dword ptr  10h
.text:00000480
.text:00000480                 push    ebp
.text:00000481                 mov     ebp, esp
.text:00000483                 push    0FFFFFFFFh
.text:00000485                 push    offset __ehhandler$?GetFilterGroup@CAnalysis@N7z@NArchive@@QAEJIABUCUpdateItem@23@AAUCFilterMode@23@@Z
.text:0000048A                 mov     eax, large fs:0
.text:00000490                 push    eax
.text:00000491                 sub     esp, 58h
.text:00000494                 push    esi
.text:00000495                 push    edi
.text:00000496                 push    ecx
.text:00000497                 lea     edi, [ebp+var_64]
.text:0000049A                 mov     ecx, 16h
.text:0000049F                 mov     eax, 0CCCCCCCCh
.text:000004A4                 rep stosd
.text:000004A6                 pop     ecx
.text:000004A7                 mov     eax, dword ptr ds:___security_cookie
.text:000004AC                 xor     eax, ebp
.text:000004AE                 push    eax
.text:000004AF                 lea     eax, [ebp+var_C]
.text:000004B2                 mov     large fs:0, eax
.text:000004B8                 mov     [ebp+var_10], ecx
.text:000004BB                 mov     eax, [ebp+arg_8]
.text:000004BE                 mov     dword ptr [eax], 0
.text:000004C4                 mov     ecx, [ebp+arg_8]
.text:000004C7                 mov     dword ptr [ecx+4], 0
.text:000004CE                 mov     edx, [ebp+arg_8]
.text:000004D1                 mov     eax, [edx]
.text:000004D3                 mov     ecx, [edx+4]
.text:000004D6                 mov     [ebp+var_1C], eax
.text:000004D9                 mov     [ebp+var_18], ecx
.text:000004DC                 mov     ecx, [ebp+arg_4]
.text:000004DF                 add     ecx, 28h ; '('  ; this
.text:000004E2                 call    ?ReverseFind_PathSepar@UString@@QBEHXZ ; UString::ReverseFind_PathSepar(void)
.text:000004E7                 mov     [ebp+var_24], eax
.text:000004EA                 mov     ecx, [ebp+arg_4]
.text:000004ED                 add     ecx, 28h ; '('  ; this
.text:000004F0                 call    ?ReverseFind_Dot@UString@@QBEHXZ ; UString::ReverseFind_Dot(void)
.text:000004F5                 mov     [ebp+var_28], eax
.text:000004F8                 mov     edx, [ebp+var_10]
.text:000004FB                 mov     al, [edx+0Eh]
.text:000004FE                 mov     [ebp+var_29], al
.text:00000501                 mov     [ebp+var_2A], 0
.text:00000505                 movzx   ecx, [ebp+var_29]
.text:00000509                 test    ecx, ecx
.text:0000050B                 jz      short loc_520
.text:0000050D                 mov     ecx, [ebp+var_10]
.text:00000510                 call    ??7?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBE_NXZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator!(void)
.text:00000515                 movzx   edx, al
.text:00000518                 test    edx, edx
.text:0000051A                 jz      loc_5D0
.text:00000520
.text:00000520 loc_520:                                ; CODE XREF: NArchive::N7z::CAnalysis::GetFilterGroup(uint,NArchive::N7z::CUpdateItem const &,NArchive::N7z::CFilterMode &)+8Bj
.text:00000520                 mov     eax, [ebp+var_28]
.text:00000523                 cmp     eax, [ebp+var_24]
.text:00000526                 jle     short loc_53F
.text:00000528                 mov     ecx, [ebp+var_28]
.text:0000052B                 add     ecx, 1
.text:0000052E                 push    ecx             ; unsigned int
.text:0000052F                 mov     ecx, [ebp+arg_4]
.text:00000532                 add     ecx, 28h ; '('  ; this
.text:00000535                 call    ?Ptr@UString@@QBEPB_WI@Z ; UString::Ptr(uint)
.text:0000053A                 mov     [ebp+var_30], eax
.text:0000053D                 jmp     short loc_54F
.text:0000053F ; ---------------------------------------------------------------------------
.text:0000053F
.text:0000053F loc_53F:                                ; CODE XREF: NArchive::N7z::CAnalysis::GetFilterGroup(uint,NArchive::N7z::CUpdateItem const &,NArchive::N7z::CFilterMode &)+A6j
.text:0000053F                 push    0               ; unsigned int
.text:00000541                 mov     ecx, [ebp+arg_4]
.text:00000544                 add     ecx, 28h ; '('  ; this
.text:00000547                 call    ?RightPtr@UString@@QBEPB_WI@Z ; UString::RightPtr(uint)
.text:0000054C                 mov     [ebp+var_30], eax
.text:0000054F
.text:0000054F loc_54F:                                ; CODE XREF: NArchive::N7z::CAnalysis::GetFilterGroup(uint,NArchive::N7z::CUpdateItem const &,NArchive::N7z::CFilterMode &)+BDj
.text:0000054F                 mov     edx, [ebp+arg_4]
.text:00000552                 mov     eax, [edx+34h]
.text:00000555                 and     eax, 8000h
.text:0000055A                 jz      short loc_58F
.text:0000055C                 mov     ecx, [ebp+arg_4]
.text:0000055F                 mov     edx, [ecx+34h]
.text:00000562                 shr     edx, 10h
.text:00000565                 mov     [ebp+var_34], edx
.text:00000568                 mov     eax, [ebp+var_34]
.text:0000056B                 and     eax, 49h
.text:0000056E                 jz      short loc_58F
.text:00000570                 mov     ecx, [ebp+arg_4]
.text:00000573                 mov     [ebp+var_58], ecx
.text:00000576                 mov     edx, [ebp+var_58]
.text:00000579                 cmp     dword ptr [edx+24h], 0
.text:0000057D                 ja      short loc_58B
.text:0000057F                 mov     eax, [ebp+var_58]
.text:00000582                 cmp     dword ptr [eax+20h], 800h
.text:00000589                 jb      short loc_58F
.text:0000058B
.text:0000058B loc_58B:                                ; CODE XREF: NArchive::N7z::CAnalysis::GetFilterGroup(uint,NArchive::N7z::CUpdateItem const &,NArchive::N7z::CFilterMode &)+FDj
.text:0000058B                 mov     [ebp+var_29], 1
.text:0000058F
.text:0000058F loc_58F:                                ; CODE XREF: NArchive::N7z::CAnalysis::GetFilterGroup(uint,NArchive::N7z::CUpdateItem const &,NArchive::N7z::CFilterMode &)+DAj
.text:0000058F                                         ; NArchive::N7z::CAnalysis::GetFilterGroup(uint,NArchive::N7z::CUpdateItem const &,NArchive::N7z::CFilterMode &)+EEj ...
.text:0000058F                 mov     ecx, [ebp+var_30]
.text:00000592                 push    ecx             ; wchar_t *
.text:00000593                 call    ?IsExeExt@N7z@NArchive@@YG_NPB_W@Z ; NArchive::N7z::IsExeExt(wchar_t const *)
.text:00000598                 movzx   edx, al
.text:0000059B                 test    edx, edx
.text:0000059D                 jz      short loc_5B2
.text:0000059F                 mov     [ebp+var_29], 1
.text:000005A3                 mov     [ebp+var_2A], 1
.text:000005A7                 mov     eax, [ebp+var_10]
.text:000005AA                 mov     cl, [eax+0Dh]
.text:000005AD                 mov     [ebp+var_29], cl
.text:000005B0                 jmp     short loc_5D0
.text:000005B2 ; ---------------------------------------------------------------------------
.text:000005B2
.text:000005B2 loc_5B2:                                ; CODE XREF: NArchive::N7z::CAnalysis::GetFilterGroup(uint,NArchive::N7z::CUpdateItem const &,NArchive::N7z::CFilterMode &)+11Dj
.text:000005B2                 push    offset $SG75951 ; "wav"
.text:000005B7                 mov     edx, [ebp+var_30]
.text:000005BA                 push    edx             ; wchar_t *
.text:000005BB                 call    ?StringsAreEqualNoCase_Ascii@@YG_NPB_WPBD@Z ; StringsAreEqualNoCase_Ascii(wchar_t const *,char const *)
.text:000005C0                 movzx   eax, al
.text:000005C3                 test    eax, eax
.text:000005C5                 jz      short loc_5D0
.text:000005C7                 mov     ecx, [ebp+var_10]
.text:000005CA                 mov     dl, [ecx+0Ch]
.text:000005CD                 mov     [ebp+var_29], dl
.text:000005D0
.text:000005D0 loc_5D0:                                ; CODE XREF: NArchive::N7z::CAnalysis::GetFilterGroup(uint,NArchive::N7z::CUpdateItem const &,NArchive::N7z::CFilterMode &)+9Aj
.text:000005D0                                         ; NArchive::N7z::CAnalysis::GetFilterGroup(uint,NArchive::N7z::CUpdateItem const &,NArchive::N7z::CFilterMode &)+130j ...
.text:000005D0                 movzx   eax, [ebp+var_29]
.text:000005D4                 test    eax, eax
.text:000005D6                 jz      loc_72E
.text:000005DC                 mov     ecx, [ebp+var_10]
.text:000005DF                 call    ??B?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator IArchiveUpdateCallbackFile *(void)
.text:000005E4                 test    eax, eax
.text:000005E6                 jz      loc_72E
.text:000005EC                 mov     ecx, [ebp+var_10]
.text:000005EF                 add     ecx, 4
.text:000005F2                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:000005F7                 cmp     eax, 4000h
.text:000005FC                 jz      short loc_60E
.text:000005FE                 push    4000h
.text:00000603                 mov     ecx, [ebp+var_10]
.text:00000606                 add     ecx, 4
.text:00000609                 call    ?Alloc@?$CBuffer@E@@QAEXI@Z ; CBuffer<uchar>::Alloc(uint)
.text:0000060E
.text:0000060E loc_60E:                                ; CODE XREF: NArchive::N7z::CAnalysis::GetFilterGroup(uint,NArchive::N7z::CUpdateItem const &,NArchive::N7z::CFilterMode &)+17Cj
.text:0000060E                 lea     ecx, [ebp+var_3C]
.text:00000611                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(void)
.text:00000616                 mov     [ebp+var_4], 0
.text:0000061D                 mov     ecx, [ebp+var_10]
.text:00000620                 call    ??C?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator->(void)
.text:00000625                 mov     [ebp+var_5C], eax
.text:00000628                 mov     esi, esp
.text:0000062A                 push    2
.text:0000062C                 lea     ecx, [ebp+var_3C]
.text:0000062F                 call    ??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator&(void)
.text:00000634                 push    eax
.text:00000635                 mov     ecx, [ebp+arg_0]
.text:00000638                 push    ecx
.text:00000639                 mov     edx, [ebp+var_5C]
.text:0000063C                 push    edx
.text:0000063D                 mov     eax, [ebp+var_5C]
.text:00000640                 mov     ecx, [eax]
.text:00000642                 mov     edx, [ecx+0Ch]
.text:00000645                 call    edx
.text:00000647                 cmp     esi, esp
.text:00000649                 call    __RTC_CheckEsp
.text:0000064E                 mov     [ebp+var_44], eax
.text:00000651                 cmp     [ebp+var_44], 0
.text:00000655                 jnz     loc_71D
.text:0000065B                 lea     ecx, [ebp+var_3C]
.text:0000065E                 call    ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *(void)
.text:00000663                 test    eax, eax
.text:00000665                 jz      loc_71D
.text:0000066B                 mov     [ebp+var_4C], 4000h
.text:00000672                 lea     eax, [ebp+var_4C]
.text:00000675                 push    eax             ; unsigned int *
.text:00000676                 mov     ecx, [ebp+var_10]
.text:00000679                 add     ecx, 4
.text:0000067C                 call    ??B?$CBuffer@E@@QAEPAEXZ ; CBuffer<uchar>::operator uchar *(void)
.text:00000681                 push    eax             ; void *
.text:00000682                 lea     ecx, [ebp+var_3C]
.text:00000685                 call    ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *(void)
.text:0000068A                 push    eax             ; struct ISequentialInStream *
.text:0000068B                 call    ?ReadStream@@YGJPAUISequentialInStream@@PAXPAI@Z ; ReadStream(ISequentialInStream *,void *,uint *)
.text:00000690                 mov     [ebp+var_44], eax
.text:00000693                 lea     ecx, [ebp+var_3C]
.text:00000696                 call    ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ ; CMyComPtr<ISequentialInStream>::Release(void)
.text:0000069B                 cmp     [ebp+var_44], 0
.text:0000069F                 jnz     short loc_71D
.text:000006A1                 lea     ecx, [ebp+var_1C]
.text:000006A4                 push    ecx
.text:000006A5                 mov     edx, [ebp+var_4C]
.text:000006A8                 push    edx
.text:000006A9                 mov     ecx, [ebp+var_10]
.text:000006AC                 add     ecx, 4
.text:000006AF                 call    ??B?$CBuffer@E@@QAEPAEXZ ; CBuffer<uchar>::operator uchar *(void)
.text:000006B4                 push    eax
.text:000006B5                 call    ?ParseFile@N7z@NArchive@@YGHPBEIPAUCFilterMode@12@@Z ; NArchive::N7z::ParseFile(uchar const *,uint,NArchive::N7z::CFilterMode *)
.text:000006BA                 mov     [ebp+var_54], eax
.text:000006BD                 cmp     [ebp+var_54], 0
.text:000006C1                 jz      short loc_709
.text:000006C3                 cmp     [ebp+var_18], 0
.text:000006C7                 jnz     short loc_709
.text:000006C9                 lea     ecx, [ebp+var_1C] ; this
.text:000006CC                 call    ?SetDelta@CFilterMode@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CFilterMode::SetDelta(void)
.text:000006D1                 cmp     [ebp+var_18], 0
.text:000006D5                 jz      short loc_709
.text:000006D7                 cmp     [ebp+var_1C], 3
.text:000006DB                 jz      short loc_709
.text:000006DD                 mov     eax, [ebp+var_18]
.text:000006E0                 xor     ecx, ecx
.text:000006E2                 mov     edx, [ebp+arg_4]
.text:000006E5                 push    ecx
.text:000006E6                 push    eax
.text:000006E7                 mov     eax, [edx+24h]
.text:000006EA                 push    eax
.text:000006EB                 mov     ecx, [edx+20h]
.text:000006EE                 push    ecx
.text:000006EF                 call    __aullrem
.text:000006F4                 mov     [ebp+var_64], eax
.text:000006F7                 mov     [ebp+var_60], edx
.text:000006FA                 mov     edx, [ebp+var_64]
.text:000006FD                 or      edx, [ebp+var_60]
.text:00000700                 jz      short loc_709
.text:00000702                 mov     [ebp+var_54], 0
.text:00000709
.text:00000709 loc_709:                                ; CODE XREF: NArchive::N7z::CAnalysis::GetFilterGroup(uint,NArchive::N7z::CUpdateItem const &,NArchive::N7z::CFilterMode &)+241j
.text:00000709                                         ; NArchive::N7z::CAnalysis::GetFilterGroup(uint,NArchive::N7z::CUpdateItem const &,NArchive::N7z::CFilterMode &)+247j ...
.text:00000709                 cmp     [ebp+var_54], 0
.text:0000070D                 jnz     short loc_71D
.text:0000070F                 mov     [ebp+var_1C], 0
.text:00000716                 mov     [ebp+var_18], 0
.text:0000071D
.text:0000071D loc_71D:                                ; CODE XREF: NArchive::N7z::CAnalysis::GetFilterGroup(uint,NArchive::N7z::CUpdateItem const &,NArchive::N7z::CFilterMode &)+1D5j
.text:0000071D                                         ; NArchive::N7z::CAnalysis::GetFilterGroup(uint,NArchive::N7z::CUpdateItem const &,NArchive::N7z::CFilterMode &)+1E5j ...
.text:0000071D                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000724                 lea     ecx, [ebp+var_3C]
.text:00000727                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:0000072C                 jmp     short loc_75C
.text:0000072E ; ---------------------------------------------------------------------------
.text:0000072E
.text:0000072E loc_72E:                                ; CODE XREF: NArchive::N7z::CAnalysis::GetFilterGroup(uint,NArchive::N7z::CUpdateItem const &,NArchive::N7z::CFilterMode &)+156j
.text:0000072E                                         ; NArchive::N7z::CAnalysis::GetFilterGroup(uint,NArchive::N7z::CUpdateItem const &,NArchive::N7z::CFilterMode &)+166j
.text:0000072E                 movzx   eax, [ebp+var_29]
.text:00000732                 test    eax, eax
.text:00000734                 jz      short loc_745
.text:00000736                 mov     ecx, [ebp+var_10]
.text:00000739                 call    ??7?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBE_NXZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator!(void)
.text:0000073E                 movzx   ecx, al
.text:00000741                 test    ecx, ecx
.text:00000743                 jnz     short loc_74D
.text:00000745
.text:00000745 loc_745:                                ; CODE XREF: NArchive::N7z::CAnalysis::GetFilterGroup(uint,NArchive::N7z::CUpdateItem const &,NArchive::N7z::CFilterMode &)+2B4j
.text:00000745                 movzx   edx, [ebp+var_2A]
.text:00000749                 test    edx, edx
.text:0000074B                 jz      short loc_75C
.text:0000074D
.text:0000074D loc_74D:                                ; CODE XREF: NArchive::N7z::CAnalysis::GetFilterGroup(uint,NArchive::N7z::CUpdateItem const &,NArchive::N7z::CFilterMode &)+2C3j
.text:0000074D                 movzx   eax, [ebp+var_2A]
.text:00000751                 test    eax, eax
.text:00000753                 jz      short loc_75C
.text:00000755                 mov     [ebp+var_1C], 3030103h
.text:0000075C
.text:0000075C loc_75C:                                ; CODE XREF: NArchive::N7z::CAnalysis::GetFilterGroup(uint,NArchive::N7z::CUpdateItem const &,NArchive::N7z::CFilterMode &)+2ACj
.text:0000075C                                         ; NArchive::N7z::CAnalysis::GetFilterGroup(uint,NArchive::N7z::CUpdateItem const &,NArchive::N7z::CFilterMode &)+2CBj ...
.text:0000075C                 mov     ecx, [ebp+arg_8]
.text:0000075F                 mov     edx, [ebp+var_1C]
.text:00000762                 mov     [ecx], edx
.text:00000764                 mov     eax, [ebp+var_18]
.text:00000767                 mov     [ecx+4], eax
.text:0000076A                 xor     eax, eax
.text:0000076C                 push    edx
.text:0000076D                 mov     ecx, ebp
.text:0000076F                 push    eax
.text:00000770                 lea     edx, $LN32
.text:00000776                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000077B                 pop     eax
.text:0000077C                 pop     edx
.text:0000077D                 mov     ecx, [ebp+var_C]
.text:00000780                 mov     large fs:0, ecx
.text:00000787                 pop     ecx
.text:00000788                 pop     edi
.text:00000789                 pop     esi
.text:0000078A                 add     esp, 64h
.text:0000078D                 cmp     ebp, esp
.text:0000078F                 call    __RTC_CheckEsp
.text:00000794                 mov     esp, ebp
.text:00000796                 pop     ebp
.text:00000797                 retn    0Ch
.text:00000797 ?GetFilterGroup@CAnalysis@N7z@NArchive@@QAEJIABUCUpdateItem@23@AAUCFilterMode@23@@Z endp
.text:00000797
.text:00000797 ; ---------------------------------------------------------------------------
.text:0000079A                 align 4
.text:0000079C $LN32           dd 3                    ; DATA XREF: NArchive::N7z::CAnalysis::GetFilterGroup(uint,NArchive::N7z::CUpdateItem const &,NArchive::N7z::CFilterMode &)+2F0o
.text:000007A0                 dd offset $LN31
.text:000007A4 $LN31           dd 0FFFFFFE4h, 8        ; DATA XREF: .text:000007A0o
.text:000007AC                 dd offset $LN27         ; "filterModeTemp"
.text:000007B0                 dd 0FFFFFFC4h, 4
.text:000007B8                 dd offset $LN28         ; "stream"
.text:000007BC                 dd 0FFFFFFB4h, 4
.text:000007C4                 dd offset $LN29         ; "size"
.text:000007C8 $LN29           db 'size',0             ; DATA XREF: .text:000007C4o
.text:000007CD $LN28           db 'stream',0           ; DATA XREF: .text:000007B8o
.text:000007D4 $LN27           db 'filterModeTemp',0   ; DATA XREF: .text:000007ACo
.text:000007E3                 align 10h
.text:000007F0
.text:000007F0 ; =============== S U B R O U T I N E =======================================
.text:000007F0
.text:000007F0 ; Attributes: bp-based frame
.text:000007F0
.text:000007F0 ; int __stdcall NArchive::N7z::ParseFile(unsigned char const *, unsigned int, struct NArchive::N7z::CFilterMode *)
.text:000007F0 ?ParseFile@N7z@NArchive@@YGHPBEIPAUCFilterMode@12@@Z proc near
.text:000007F0                                         ; CODE XREF: NArchive::N7z::CAnalysis::GetFilterGroup(uint,NArchive::N7z::CUpdateItem const &,NArchive::N7z::CFilterMode &)+235p
.text:000007F0
.text:000007F0 arg_0           = dword ptr  8
.text:000007F0 arg_4           = dword ptr  0Ch
.text:000007F0 arg_8           = dword ptr  10h
.text:000007F0
.text:000007F0                 push    ebp
.text:000007F1                 mov     ebp, esp
.text:000007F3                 mov     eax, [ebp+arg_8]
.text:000007F6                 mov     dword ptr [eax], 0
.text:000007FC                 mov     ecx, [ebp+arg_8]
.text:000007FF                 mov     dword ptr [ecx+4], 0
.text:00000806                 mov     edx, [ebp+arg_8]
.text:00000809                 push    edx
.text:0000080A                 mov     eax, [ebp+arg_4]
.text:0000080D                 push    eax
.text:0000080E                 mov     ecx, [ebp+arg_0]
.text:00000811                 push    ecx
.text:00000812                 call    ?Parse_EXE@N7z@NArchive@@YGHPBEIPAUCFilterMode@12@@Z ; NArchive::N7z::Parse_EXE(uchar const *,uint,NArchive::N7z::CFilterMode *)
.text:00000817                 test    eax, eax
.text:00000819                 jz      short loc_822
.text:0000081B                 mov     eax, 1
.text:00000820                 jmp     short loc_86B
.text:00000822 ; ---------------------------------------------------------------------------
.text:00000822
.text:00000822 loc_822:                                ; CODE XREF: NArchive::N7z::ParseFile(uchar const *,uint,NArchive::N7z::CFilterMode *)+29j
.text:00000822                 mov     edx, [ebp+arg_8]
.text:00000825                 push    edx
.text:00000826                 mov     eax, [ebp+arg_4]
.text:00000829                 push    eax
.text:0000082A                 mov     ecx, [ebp+arg_0]
.text:0000082D                 push    ecx
.text:0000082E                 call    ?Parse_ELF@N7z@NArchive@@YGHPBEIPAUCFilterMode@12@@Z ; NArchive::N7z::Parse_ELF(uchar const *,uint,NArchive::N7z::CFilterMode *)
.text:00000833                 test    eax, eax
.text:00000835                 jz      short loc_83E
.text:00000837                 mov     eax, 1
.text:0000083C                 jmp     short loc_86B
.text:0000083E ; ---------------------------------------------------------------------------
.text:0000083E
.text:0000083E loc_83E:                                ; CODE XREF: NArchive::N7z::ParseFile(uchar const *,uint,NArchive::N7z::CFilterMode *)+45j
.text:0000083E                 mov     edx, [ebp+arg_8]
.text:00000841                 push    edx
.text:00000842                 mov     eax, [ebp+arg_4]
.text:00000845                 push    eax
.text:00000846                 mov     ecx, [ebp+arg_0]
.text:00000849                 push    ecx
.text:0000084A                 call    ?Parse_MACH@N7z@NArchive@@YGIPBEIPAUCFilterMode@12@@Z ; NArchive::N7z::Parse_MACH(uchar const *,uint,NArchive::N7z::CFilterMode *)
.text:0000084F                 test    eax, eax
.text:00000851                 jz      short loc_85A
.text:00000853                 mov     eax, 1
.text:00000858                 jmp     short loc_86B
.text:0000085A ; ---------------------------------------------------------------------------
.text:0000085A
.text:0000085A loc_85A:                                ; CODE XREF: NArchive::N7z::ParseFile(uchar const *,uint,NArchive::N7z::CFilterMode *)+61j
.text:0000085A                 mov     edx, [ebp+arg_8]
.text:0000085D                 push    edx
.text:0000085E                 mov     eax, [ebp+arg_4]
.text:00000861                 push    eax
.text:00000862                 mov     ecx, [ebp+arg_0]
.text:00000865                 push    ecx
.text:00000866                 call    ?Parse_WAV@N7z@NArchive@@YGHPBEIPAUCFilterMode@12@@Z ; NArchive::N7z::Parse_WAV(uchar const *,uint,NArchive::N7z::CFilterMode *)
.text:0000086B
.text:0000086B loc_86B:                                ; CODE XREF: NArchive::N7z::ParseFile(uchar const *,uint,NArchive::N7z::CFilterMode *)+30j
.text:0000086B                                         ; NArchive::N7z::ParseFile(uchar const *,uint,NArchive::N7z::CFilterMode *)+4Cj ...
.text:0000086B                 cmp     ebp, esp
.text:0000086D                 call    __RTC_CheckEsp
.text:00000872                 pop     ebp
.text:00000873                 retn    0Ch
.text:00000873 ?ParseFile@N7z@NArchive@@YGHPBEIPAUCFilterMode@12@@Z endp
.text:00000873
.text:00000873 ; ---------------------------------------------------------------------------
.text:00000876                 align 10h
.text:00000880
.text:00000880 ; =============== S U B R O U T I N E =======================================
.text:00000880
.text:00000880 ; Attributes: bp-based frame
.text:00000880
.text:00000880 ; int __stdcall NArchive::N7z::Parse_EXE(unsigned char const *, unsigned int, struct NArchive::N7z::CFilterMode *)
.text:00000880 ?Parse_EXE@N7z@NArchive@@YGHPBEIPAUCFilterMode@12@@Z proc near
.text:00000880                                         ; CODE XREF: NArchive::N7z::ParseFile(uchar const *,uint,NArchive::N7z::CFilterMode *)+22p
.text:00000880
.text:00000880 var_18          = dword ptr -18h
.text:00000880 var_14          = dword ptr -14h
.text:00000880 var_10          = dword ptr -10h
.text:00000880 var_C           = dword ptr -0Ch
.text:00000880 var_8           = dword ptr -8
.text:00000880 var_4           = dword ptr -4
.text:00000880 arg_0           = dword ptr  8
.text:00000880 arg_4           = dword ptr  0Ch
.text:00000880 arg_8           = dword ptr  10h
.text:00000880
.text:00000880                 push    ebp
.text:00000881                 mov     ebp, esp
.text:00000883                 sub     esp, 18h
.text:00000886                 mov     eax, 0CCCCCCCCh
.text:0000088B                 mov     [ebp+var_18], eax
.text:0000088E                 mov     [ebp+var_14], eax
.text:00000891                 mov     [ebp+var_10], eax
.text:00000894                 mov     [ebp+var_C], eax
.text:00000897                 mov     [ebp+var_8], eax
.text:0000089A                 mov     [ebp+var_4], eax
.text:0000089D                 cmp     [ebp+arg_4], 200h
.text:000008A4                 jb      short loc_8B4
.text:000008A6                 mov     eax, [ebp+arg_0]
.text:000008A9                 movzx   ecx, word ptr [eax]
.text:000008AC                 cmp     ecx, 5A4Dh
.text:000008B2                 jz      short loc_8BB
.text:000008B4
.text:000008B4 loc_8B4:                                ; CODE XREF: NArchive::N7z::Parse_EXE(uchar const *,uint,NArchive::N7z::CFilterMode *)+24j
.text:000008B4                 xor     eax, eax
.text:000008B6                 jmp     loc_9D2
.text:000008BB ; ---------------------------------------------------------------------------
.text:000008BB
.text:000008BB loc_8BB:                                ; CODE XREF: NArchive::N7z::Parse_EXE(uchar const *,uint,NArchive::N7z::CFilterMode *)+32j
.text:000008BB                 mov     edx, [ebp+arg_0]
.text:000008BE                 mov     eax, [edx+3Ch]
.text:000008C1                 mov     [ebp+var_8], eax
.text:000008C4                 cmp     [ebp+var_8], 1000h
.text:000008CB                 jnb     short loc_8E3
.text:000008CD                 mov     ecx, [ebp+var_8]
.text:000008D0                 add     ecx, 200h
.text:000008D6                 cmp     ecx, [ebp+arg_4]
.text:000008D9                 ja      short loc_8E3
.text:000008DB                 mov     edx, [ebp+var_8]
.text:000008DE                 and     edx, 7
.text:000008E1                 jz      short loc_8EA
.text:000008E3
.text:000008E3 loc_8E3:                                ; CODE XREF: NArchive::N7z::Parse_EXE(uchar const *,uint,NArchive::N7z::CFilterMode *)+4Bj
.text:000008E3                                         ; NArchive::N7z::Parse_EXE(uchar const *,uint,NArchive::N7z::CFilterMode *)+59j
.text:000008E3                 xor     eax, eax
.text:000008E5                 jmp     loc_9D2
.text:000008EA ; ---------------------------------------------------------------------------
.text:000008EA
.text:000008EA loc_8EA:                                ; CODE XREF: NArchive::N7z::Parse_EXE(uchar const *,uint,NArchive::N7z::CFilterMode *)+61j
.text:000008EA                 mov     eax, [ebp+arg_0]
.text:000008ED                 add     eax, [ebp+var_8]
.text:000008F0                 mov     [ebp+var_4], eax
.text:000008F3                 mov     ecx, [ebp+var_4]
.text:000008F6                 cmp     dword ptr [ecx], 4550h
.text:000008FC                 jz      short loc_905
.text:000008FE                 xor     eax, eax
.text:00000900                 jmp     loc_9D2
.text:00000905 ; ---------------------------------------------------------------------------
.text:00000905
.text:00000905 loc_905:                                ; CODE XREF: NArchive::N7z::Parse_EXE(uchar const *,uint,NArchive::N7z::CFilterMode *)+7Cj
.text:00000905                 mov     edx, [ebp+var_4]
.text:00000908                 add     edx, 4
.text:0000090B                 mov     [ebp+var_4], edx
.text:0000090E                 mov     eax, [ebp+var_4]
.text:00000911                 movzx   ecx, word ptr [eax]
.text:00000914                 mov     [ebp+var_14], ecx
.text:00000917                 cmp     [ebp+var_14], 1C4h
.text:0000091E                 jg      short loc_946
.text:00000920                 cmp     [ebp+var_14], 1C4h
.text:00000927                 jz      short loc_96C
.text:00000929                 cmp     [ebp+var_14], 14Ch
.text:00000930                 jz      short loc_95A
.text:00000932                 cmp     [ebp+var_14], 1C0h
.text:00000939                 jz      short loc_963
.text:0000093B                 cmp     [ebp+var_14], 1C2h
.text:00000942                 jz      short loc_963
.text:00000944                 jmp     short loc_97E
.text:00000946 ; ---------------------------------------------------------------------------
.text:00000946
.text:00000946 loc_946:                                ; CODE XREF: NArchive::N7z::Parse_EXE(uchar const *,uint,NArchive::N7z::CFilterMode *)+9Ej
.text:00000946                 cmp     [ebp+var_14], 200h
.text:0000094D                 jz      short loc_975
.text:0000094F                 cmp     [ebp+var_14], 8664h
.text:00000956                 jz      short loc_95A
.text:00000958                 jmp     short loc_97E
.text:0000095A ; ---------------------------------------------------------------------------
.text:0000095A
.text:0000095A loc_95A:                                ; CODE XREF: NArchive::N7z::Parse_EXE(uchar const *,uint,NArchive::N7z::CFilterMode *)+B0j
.text:0000095A                                         ; NArchive::N7z::Parse_EXE(uchar const *,uint,NArchive::N7z::CFilterMode *)+D6j
.text:0000095A                 mov     [ebp+var_10], 3030103h
.text:00000961                 jmp     short loc_982
.text:00000963 ; ---------------------------------------------------------------------------
.text:00000963
.text:00000963 loc_963:                                ; CODE XREF: NArchive::N7z::Parse_EXE(uchar const *,uint,NArchive::N7z::CFilterMode *)+B9j
.text:00000963                                         ; NArchive::N7z::Parse_EXE(uchar const *,uint,NArchive::N7z::CFilterMode *)+C2j
.text:00000963                 mov     [ebp+var_10], 3030501h
.text:0000096A                 jmp     short loc_982
.text:0000096C ; ---------------------------------------------------------------------------
.text:0000096C
.text:0000096C loc_96C:                                ; CODE XREF: NArchive::N7z::Parse_EXE(uchar const *,uint,NArchive::N7z::CFilterMode *)+A7j
.text:0000096C                 mov     [ebp+var_10], 3030701h
.text:00000973                 jmp     short loc_982
.text:00000975 ; ---------------------------------------------------------------------------
.text:00000975
.text:00000975 loc_975:                                ; CODE XREF: NArchive::N7z::Parse_EXE(uchar const *,uint,NArchive::N7z::CFilterMode *)+CDj
.text:00000975                 mov     [ebp+var_10], 3030401h
.text:0000097C                 jmp     short loc_982
.text:0000097E ; ---------------------------------------------------------------------------
.text:0000097E
.text:0000097E loc_97E:                                ; CODE XREF: NArchive::N7z::Parse_EXE(uchar const *,uint,NArchive::N7z::CFilterMode *)+C4j
.text:0000097E                                         ; NArchive::N7z::Parse_EXE(uchar const *,uint,NArchive::N7z::CFilterMode *)+D8j
.text:0000097E                 xor     eax, eax
.text:00000980                 jmp     short loc_9D2
.text:00000982 ; ---------------------------------------------------------------------------
.text:00000982
.text:00000982 loc_982:                                ; CODE XREF: NArchive::N7z::Parse_EXE(uchar const *,uint,NArchive::N7z::CFilterMode *)+E1j
.text:00000982                                         ; NArchive::N7z::Parse_EXE(uchar const *,uint,NArchive::N7z::CFilterMode *)+EAj ...
.text:00000982                 mov     edx, [ebp+var_4]
.text:00000985                 movzx   eax, word ptr [edx+10h]
.text:00000989                 mov     [ebp+var_C], eax
.text:0000098C                 cmp     [ebp+var_C], 400h
.text:00000993                 jbe     short loc_999
.text:00000995                 xor     eax, eax
.text:00000997                 jmp     short loc_9D2
.text:00000999 ; ---------------------------------------------------------------------------
.text:00000999
.text:00000999 loc_999:                                ; CODE XREF: NArchive::N7z::Parse_EXE(uchar const *,uint,NArchive::N7z::CFilterMode *)+113j
.text:00000999                 mov     ecx, [ebp+var_4]
.text:0000099C                 add     ecx, 14h
.text:0000099F                 mov     [ebp+var_4], ecx
.text:000009A2                 mov     edx, [ebp+var_4]
.text:000009A5                 movzx   eax, word ptr [edx]
.text:000009A8                 mov     [ebp+var_18], eax
.text:000009AB                 cmp     [ebp+var_18], 10Bh
.text:000009B2                 jz      short loc_9BF
.text:000009B4                 cmp     [ebp+var_18], 20Bh
.text:000009BB                 jz      short loc_9BF
.text:000009BD                 jmp     short loc_9C1
.text:000009BF ; ---------------------------------------------------------------------------
.text:000009BF
.text:000009BF loc_9BF:                                ; CODE XREF: NArchive::N7z::Parse_EXE(uchar const *,uint,NArchive::N7z::CFilterMode *)+132j
.text:000009BF                                         ; NArchive::N7z::Parse_EXE(uchar const *,uint,NArchive::N7z::CFilterMode *)+13Bj
.text:000009BF                 jmp     short loc_9C5
.text:000009C1 ; ---------------------------------------------------------------------------
.text:000009C1
.text:000009C1 loc_9C1:                                ; CODE XREF: NArchive::N7z::Parse_EXE(uchar const *,uint,NArchive::N7z::CFilterMode *)+13Dj
.text:000009C1                 xor     eax, eax
.text:000009C3                 jmp     short loc_9D2
.text:000009C5 ; ---------------------------------------------------------------------------
.text:000009C5
.text:000009C5 loc_9C5:                                ; CODE XREF: NArchive::N7z::Parse_EXE(uchar const *,uint,NArchive::N7z::CFilterMode *):loc_9BFj
.text:000009C5                 mov     ecx, [ebp+arg_8]
.text:000009C8                 mov     edx, [ebp+var_10]
.text:000009CB                 mov     [ecx], edx
.text:000009CD                 mov     eax, 1
.text:000009D2
.text:000009D2 loc_9D2:                                ; CODE XREF: NArchive::N7z::Parse_EXE(uchar const *,uint,NArchive::N7z::CFilterMode *)+36j
.text:000009D2                                         ; NArchive::N7z::Parse_EXE(uchar const *,uint,NArchive::N7z::CFilterMode *)+65j ...
.text:000009D2                 mov     esp, ebp
.text:000009D4                 pop     ebp
.text:000009D5                 retn    0Ch
.text:000009D5 ?Parse_EXE@N7z@NArchive@@YGHPBEIPAUCFilterMode@12@@Z endp
.text:000009D5
.text:000009D5 ; ---------------------------------------------------------------------------
.text:000009D8                 align 10h
.text:000009E0
.text:000009E0 ; =============== S U B R O U T I N E =======================================
.text:000009E0
.text:000009E0 ; Attributes: bp-based frame
.text:000009E0
.text:000009E0 ; int __stdcall NArchive::N7z::Parse_ELF(unsigned char const *, unsigned int, struct NArchive::N7z::CFilterMode *)
.text:000009E0 ?Parse_ELF@N7z@NArchive@@YGHPBEIPAUCFilterMode@12@@Z proc near
.text:000009E0                                         ; CODE XREF: NArchive::N7z::ParseFile(uchar const *,uint,NArchive::N7z::CFilterMode *)+3Ep
.text:000009E0
.text:000009E0 var_14          = dword ptr -14h
.text:000009E0 var_10          = dword ptr -10h
.text:000009E0 var_C           = dword ptr -0Ch
.text:000009E0 var_8           = dword ptr -8
.text:000009E0 var_4           = dword ptr -4
.text:000009E0 arg_0           = dword ptr  8
.text:000009E0 arg_4           = dword ptr  0Ch
.text:000009E0 arg_8           = dword ptr  10h
.text:000009E0
.text:000009E0                 push    ebp
.text:000009E1                 mov     ebp, esp
.text:000009E3                 sub     esp, 14h
.text:000009E6                 mov     eax, 0CCCCCCCCh
.text:000009EB                 mov     [ebp+var_14], eax
.text:000009EE                 mov     [ebp+var_10], eax
.text:000009F1                 mov     [ebp+var_C], eax
.text:000009F4                 mov     [ebp+var_8], eax
.text:000009F7                 mov     [ebp+var_4], eax
.text:000009FA                 cmp     [ebp+arg_4], 200h
.text:00000A01                 jb      short loc_A0F
.text:00000A03                 mov     eax, [ebp+arg_0]
.text:00000A06                 movzx   ecx, byte ptr [eax+6]
.text:00000A0A                 cmp     ecx, 1
.text:00000A0D                 jz      short loc_A16
.text:00000A0F
.text:00000A0F loc_A0F:                                ; CODE XREF: NArchive::N7z::Parse_ELF(uchar const *,uint,NArchive::N7z::CFilterMode *)+21j
.text:00000A0F                 xor     eax, eax
.text:00000A11                 jmp     loc_AF6
.text:00000A16 ; ---------------------------------------------------------------------------
.text:00000A16
.text:00000A16 loc_A16:                                ; CODE XREF: NArchive::N7z::Parse_ELF(uchar const *,uint,NArchive::N7z::CFilterMode *)+2Dj
.text:00000A16                 mov     edx, [ebp+arg_0]
.text:00000A19                 cmp     dword ptr [edx], 464C457Fh
.text:00000A1F                 jz      short loc_A28
.text:00000A21                 xor     eax, eax
.text:00000A23                 jmp     loc_AF6
.text:00000A28 ; ---------------------------------------------------------------------------
.text:00000A28
.text:00000A28 loc_A28:                                ; CODE XREF: NArchive::N7z::Parse_ELF(uchar const *,uint,NArchive::N7z::CFilterMode *)+3Fj
.text:00000A28                 mov     eax, [ebp+arg_0]
.text:00000A2B                 mov     cl, [eax+4]
.text:00000A2E                 mov     byte ptr [ebp+var_C], cl
.text:00000A31                 cmp     byte ptr [ebp+var_C], 1
.text:00000A35                 jz      short loc_A3F
.text:00000A37                 cmp     byte ptr [ebp+var_C], 2
.text:00000A3B                 jz      short loc_A41
.text:00000A3D                 jmp     short loc_A43
.text:00000A3F ; ---------------------------------------------------------------------------
.text:00000A3F
.text:00000A3F loc_A3F:                                ; CODE XREF: NArchive::N7z::Parse_ELF(uchar const *,uint,NArchive::N7z::CFilterMode *)+55j
.text:00000A3F                 jmp     short loc_A4A
.text:00000A41 ; ---------------------------------------------------------------------------
.text:00000A41
.text:00000A41 loc_A41:                                ; CODE XREF: NArchive::N7z::Parse_ELF(uchar const *,uint,NArchive::N7z::CFilterMode *)+5Bj
.text:00000A41                 jmp     short loc_A4A
.text:00000A43 ; ---------------------------------------------------------------------------
.text:00000A43
.text:00000A43 loc_A43:                                ; CODE XREF: NArchive::N7z::Parse_ELF(uchar const *,uint,NArchive::N7z::CFilterMode *)+5Dj
.text:00000A43                 xor     eax, eax
.text:00000A45                 jmp     loc_AF6
.text:00000A4A ; ---------------------------------------------------------------------------
.text:00000A4A
.text:00000A4A loc_A4A:                                ; CODE XREF: NArchive::N7z::Parse_ELF(uchar const *,uint,NArchive::N7z::CFilterMode *):loc_A3Fj
.text:00000A4A                                         ; NArchive::N7z::Parse_ELF(uchar const *,uint,NArchive::N7z::CFilterMode *):loc_A41j
.text:00000A4A                 mov     edx, [ebp+arg_0]
.text:00000A4D                 mov     al, [edx+5]
.text:00000A50                 mov     byte ptr [ebp+var_10], al
.text:00000A53                 cmp     byte ptr [ebp+var_10], 1
.text:00000A57                 jz      short loc_A61
.text:00000A59                 cmp     byte ptr [ebp+var_10], 2
.text:00000A5D                 jz      short loc_A6A
.text:00000A5F                 jmp     short loc_A73
.text:00000A61 ; ---------------------------------------------------------------------------
.text:00000A61
.text:00000A61 loc_A61:                                ; CODE XREF: NArchive::N7z::Parse_ELF(uchar const *,uint,NArchive::N7z::CFilterMode *)+77j
.text:00000A61                 mov     [ebp+var_4], 0
.text:00000A68                 jmp     short loc_A77
.text:00000A6A ; ---------------------------------------------------------------------------
.text:00000A6A
.text:00000A6A loc_A6A:                                ; CODE XREF: NArchive::N7z::Parse_ELF(uchar const *,uint,NArchive::N7z::CFilterMode *)+7Dj
.text:00000A6A                 mov     [ebp+var_4], 1
.text:00000A71                 jmp     short loc_A77
.text:00000A73 ; ---------------------------------------------------------------------------
.text:00000A73
.text:00000A73 loc_A73:                                ; CODE XREF: NArchive::N7z::Parse_ELF(uchar const *,uint,NArchive::N7z::CFilterMode *)+7Fj
.text:00000A73                 xor     eax, eax
.text:00000A75                 jmp     short loc_AF6
.text:00000A77 ; ---------------------------------------------------------------------------
.text:00000A77
.text:00000A77 loc_A77:                                ; CODE XREF: NArchive::N7z::Parse_ELF(uchar const *,uint,NArchive::N7z::CFilterMode *)+88j
.text:00000A77                                         ; NArchive::N7z::Parse_ELF(uchar const *,uint,NArchive::N7z::CFilterMode *)+91j
.text:00000A77                 mov     ecx, [ebp+var_4]
.text:00000A7A                 push    ecx
.text:00000A7B                 mov     edx, [ebp+arg_0]
.text:00000A7E                 add     edx, 12h
.text:00000A81                 push    edx
.text:00000A82                 call    ?Get16@N7z@NArchive@@YGGPBEH@Z ; NArchive::N7z::Get16(uchar const *,int)
.text:00000A87                 movzx   eax, ax
.text:00000A8A                 mov     [ebp+var_14], eax
.text:00000A8D                 mov     ecx, [ebp+var_14]
.text:00000A90                 sub     ecx, 2
.text:00000A93                 mov     [ebp+var_14], ecx
.text:00000A96                 cmp     [ebp+var_14], 3Ch ; '<' ; switch 61 cases
.text:00000A9A                 ja      short $LN1      ; jumptable 00000AA6 default case
.text:00000A9C                 mov     edx, [ebp+var_14]
.text:00000A9F                 movzx   eax, ds:$LN25[edx]
.text:00000AA6                 jmp     ds:$LN26[eax*4] ; switch jump
.text:00000AAD ; ---------------------------------------------------------------------------
.text:00000AAD
.text:00000AAD $LN7:                                   ; CODE XREF: NArchive::N7z::Parse_ELF(uchar const *,uint,NArchive::N7z::CFilterMode *)+C6j
.text:00000AAD                                         ; DATA XREF: .text:$LN26o
.text:00000AAD                 mov     [ebp+var_8], 3030103h ; jumptable 00000AA6 cases 1,4,60
.text:00000AB4                 jmp     short loc_AE9
.text:00000AB6 ; ---------------------------------------------------------------------------
.text:00000AB6
.text:00000AB6 $LN6:                                   ; CODE XREF: NArchive::N7z::Parse_ELF(uchar const *,uint,NArchive::N7z::CFilterMode *)+C6j
.text:00000AB6                                         ; DATA XREF: .text:$LN26o
.text:00000AB6                 mov     [ebp+var_8], 3030805h ; jumptable 00000AA6 cases 0,16,41
.text:00000ABD                 jmp     short loc_AE9
.text:00000ABF ; ---------------------------------------------------------------------------
.text:00000ABF
.text:00000ABF $LN5:                                   ; CODE XREF: NArchive::N7z::Parse_ELF(uchar const *,uint,NArchive::N7z::CFilterMode *)+C6j
.text:00000ABF                                         ; DATA XREF: .text:$LN26o
.text:00000ABF                 cmp     [ebp+var_4], 0  ; jumptable 00000AA6 cases 18,19
.text:00000AC3                 jnz     short loc_AC9
.text:00000AC5                 xor     eax, eax
.text:00000AC7                 jmp     short loc_AF6
.text:00000AC9 ; ---------------------------------------------------------------------------
.text:00000AC9
.text:00000AC9 loc_AC9:                                ; CODE XREF: NArchive::N7z::Parse_ELF(uchar const *,uint,NArchive::N7z::CFilterMode *)+E3j
.text:00000AC9                 mov     [ebp+var_8], 3030205h
.text:00000AD0                 jmp     short loc_AE9
.text:00000AD2 ; ---------------------------------------------------------------------------
.text:00000AD2
.text:00000AD2 $LN3:                                   ; CODE XREF: NArchive::N7z::Parse_ELF(uchar const *,uint,NArchive::N7z::CFilterMode *)+C6j
.text:00000AD2                                         ; DATA XREF: .text:$LN26o
.text:00000AD2                 cmp     [ebp+var_4], 0  ; jumptable 00000AA6 case 38
.text:00000AD6                 jz      short loc_ADC
.text:00000AD8                 xor     eax, eax
.text:00000ADA                 jmp     short loc_AF6
.text:00000ADC ; ---------------------------------------------------------------------------
.text:00000ADC
.text:00000ADC loc_ADC:                                ; CODE XREF: NArchive::N7z::Parse_ELF(uchar const *,uint,NArchive::N7z::CFilterMode *)+F6j
.text:00000ADC                 mov     [ebp+var_8], 3030501h
.text:00000AE3                 jmp     short loc_AE9
.text:00000AE5 ; ---------------------------------------------------------------------------
.text:00000AE5
.text:00000AE5 $LN1:                                   ; CODE XREF: NArchive::N7z::Parse_ELF(uchar const *,uint,NArchive::N7z::CFilterMode *)+BAj
.text:00000AE5                                         ; NArchive::N7z::Parse_ELF(uchar const *,uint,NArchive::N7z::CFilterMode *)+C6j
.text:00000AE5                                         ; DATA XREF: ...
.text:00000AE5                 xor     eax, eax        ; jumptable 00000AA6 default case
.text:00000AE7                 jmp     short loc_AF6
.text:00000AE9 ; ---------------------------------------------------------------------------
.text:00000AE9
.text:00000AE9 loc_AE9:                                ; CODE XREF: NArchive::N7z::Parse_ELF(uchar const *,uint,NArchive::N7z::CFilterMode *)+D4j
.text:00000AE9                                         ; NArchive::N7z::Parse_ELF(uchar const *,uint,NArchive::N7z::CFilterMode *)+DDj ...
.text:00000AE9                 mov     ecx, [ebp+arg_8]
.text:00000AEC                 mov     edx, [ebp+var_8]
.text:00000AEF                 mov     [ecx], edx
.text:00000AF1                 mov     eax, 1
.text:00000AF6
.text:00000AF6 loc_AF6:                                ; CODE XREF: NArchive::N7z::Parse_ELF(uchar const *,uint,NArchive::N7z::CFilterMode *)+31j
.text:00000AF6                                         ; NArchive::N7z::Parse_ELF(uchar const *,uint,NArchive::N7z::CFilterMode *)+43j ...
.text:00000AF6                 add     esp, 14h
.text:00000AF9                 cmp     ebp, esp
.text:00000AFB                 call    __RTC_CheckEsp
.text:00000B00                 mov     esp, ebp
.text:00000B02                 pop     ebp
.text:00000B03                 retn    0Ch
.text:00000B03 ?Parse_ELF@N7z@NArchive@@YGHPBEIPAUCFilterMode@12@@Z endp
.text:00000B03
.text:00000B03 ; ---------------------------------------------------------------------------
.text:00000B06                 align 4
.text:00000B08 $LN26           dd offset $LN6, offset $LN7, offset $LN5, offset $LN3
.text:00000B08                                         ; DATA XREF: NArchive::N7z::Parse_ELF(uchar const *,uint,NArchive::N7z::CFilterMode *)+C6r
.text:00000B08                 dd offset $LN1          ; jump table for switch statement
.text:00000B1C $LN25           db      0,     1,     4,     4
.text:00000B1C                                         ; DATA XREF: NArchive::N7z::Parse_ELF(uchar const *,uint,NArchive::N7z::CFilterMode *)+BFr
.text:00000B1C                 db      1,     4,     4,     4 ; indirect table for switch statement
.text:00000B1C                 db      4,     4,     4,     4
.text:00000B1C                 db      4,     4,     4,     4
.text:00000B1C                 db      0,     4,     2,     2
.text:00000B1C                 db      4,     4,     4,     4
.text:00000B1C                 db      4,     4,     4,     4
.text:00000B1C                 db      4,     4,     4,     4
.text:00000B1C                 db      4,     4,     4,     4
.text:00000B1C                 db      4,     4,     3,     4
.text:00000B1C                 db      4,     0,     4,     4
.text:00000B1C                 db      4,     4,     4,     4
.text:00000B1C                 db      4,     4,     4,     4
.text:00000B1C                 db      4,     4,     4,     4
.text:00000B1C                 db      4,     4,     4,     4
.text:00000B1C                 db      1
.text:00000B59                 align 10h
.text:00000B60
.text:00000B60 ; =============== S U B R O U T I N E =======================================
.text:00000B60
.text:00000B60 ; Attributes: bp-based frame
.text:00000B60
.text:00000B60 ; unsigned short __stdcall NArchive::N7z::Get16(unsigned char const *, int)
.text:00000B60 ?Get16@N7z@NArchive@@YGGPBEH@Z proc near
.text:00000B60                                         ; CODE XREF: NArchive::N7z::Parse_ELF(uchar const *,uint,NArchive::N7z::CFilterMode *)+A2p
.text:00000B60
.text:00000B60 arg_0           = dword ptr  8
.text:00000B60 arg_4           = dword ptr  0Ch
.text:00000B60
.text:00000B60                 push    ebp
.text:00000B61                 mov     ebp, esp
.text:00000B63                 cmp     [ebp+arg_4], 0
.text:00000B67                 jz      short loc_B7D
.text:00000B69                 mov     eax, [ebp+arg_0]
.text:00000B6C                 movzx   eax, byte ptr [eax]
.text:00000B6F                 shl     eax, 8
.text:00000B72                 mov     ecx, [ebp+arg_0]
.text:00000B75                 movzx   edx, byte ptr [ecx+1]
.text:00000B79                 or      eax, edx
.text:00000B7B                 jmp     short loc_B83
.text:00000B7D ; ---------------------------------------------------------------------------
.text:00000B7D
.text:00000B7D loc_B7D:                                ; CODE XREF: NArchive::N7z::Get16(uchar const *,int)+7j
.text:00000B7D                 mov     eax, [ebp+arg_0]
.text:00000B80                 mov     ax, [eax]
.text:00000B83
.text:00000B83 loc_B83:                                ; CODE XREF: NArchive::N7z::Get16(uchar const *,int)+1Bj
.text:00000B83                 pop     ebp
.text:00000B84                 retn    8
.text:00000B84 ?Get16@N7z@NArchive@@YGGPBEH@Z endp
.text:00000B84
.text:00000B84 ; ---------------------------------------------------------------------------
.text:00000B87                 align 10h
.text:00000B90
.text:00000B90 ; =============== S U B R O U T I N E =======================================
.text:00000B90
.text:00000B90 ; Attributes: bp-based frame
.text:00000B90
.text:00000B90 ; unsigned int __stdcall NArchive::N7z::Parse_MACH(unsigned char const *, unsigned int, struct NArchive::N7z::CFilterMode *)
.text:00000B90 ?Parse_MACH@N7z@NArchive@@YGIPBEIPAUCFilterMode@12@@Z proc near
.text:00000B90                                         ; CODE XREF: NArchive::N7z::ParseFile(uchar const *,uint,NArchive::N7z::CFilterMode *)+5Ap
.text:00000B90
.text:00000B90 var_18          = dword ptr -18h
.text:00000B90 var_14          = dword ptr -14h
.text:00000B90 var_10          = dword ptr -10h
.text:00000B90 var_C           = dword ptr -0Ch
.text:00000B90 var_8           = dword ptr -8
.text:00000B90 var_4           = dword ptr -4
.text:00000B90 arg_0           = dword ptr  8
.text:00000B90 arg_4           = dword ptr  0Ch
.text:00000B90 arg_8           = dword ptr  10h
.text:00000B90
.text:00000B90                 push    ebp
.text:00000B91                 mov     ebp, esp
.text:00000B93                 sub     esp, 18h
.text:00000B96                 mov     eax, 0CCCCCCCCh
.text:00000B9B                 mov     [ebp+var_18], eax
.text:00000B9E                 mov     [ebp+var_14], eax
.text:00000BA1                 mov     [ebp+var_10], eax
.text:00000BA4                 mov     [ebp+var_C], eax
.text:00000BA7                 mov     [ebp+var_8], eax
.text:00000BAA                 mov     [ebp+var_4], eax
.text:00000BAD                 cmp     [ebp+arg_4], 200h
.text:00000BB4                 jnb     short loc_BBD
.text:00000BB6                 xor     eax, eax
.text:00000BB8                 jmp     loc_CF7
.text:00000BBD ; ---------------------------------------------------------------------------
.text:00000BBD
.text:00000BBD loc_BBD:                                ; CODE XREF: NArchive::N7z::Parse_MACH(uchar const *,uint,NArchive::N7z::CFilterMode *)+24j
.text:00000BBD                 mov     eax, [ebp+arg_0]
.text:00000BC0                 mov     ecx, [eax]
.text:00000BC2                 mov     [ebp+var_14], ecx
.text:00000BC5                 cmp     [ebp+var_14], 0FEEDFACEh
.text:00000BCC                 ja      short loc_BEB
.text:00000BCE                 cmp     [ebp+var_14], 0FEEDFACEh
.text:00000BD5                 jz      short loc_C08
.text:00000BD7                 cmp     [ebp+var_14], 0CEFAEDFEh
.text:00000BDE                 jz      short loc_BF6
.text:00000BE0                 cmp     [ebp+var_14], 0CFFAEDFEh
.text:00000BE7                 jz      short loc_BFF
.text:00000BE9                 jmp     short loc_C1A
.text:00000BEB ; ---------------------------------------------------------------------------
.text:00000BEB
.text:00000BEB loc_BEB:                                ; CODE XREF: NArchive::N7z::Parse_MACH(uchar const *,uint,NArchive::N7z::CFilterMode *)+3Cj
.text:00000BEB                 cmp     [ebp+var_14], 0FEEDFACFh
.text:00000BF2                 jz      short loc_C11
.text:00000BF4                 jmp     short loc_C1A
.text:00000BF6 ; ---------------------------------------------------------------------------
.text:00000BF6
.text:00000BF6 loc_BF6:                                ; CODE XREF: NArchive::N7z::Parse_MACH(uchar const *,uint,NArchive::N7z::CFilterMode *)+4Ej
.text:00000BF6                 mov     [ebp+var_10], 1
.text:00000BFD                 jmp     short loc_C21
.text:00000BFF ; ---------------------------------------------------------------------------
.text:00000BFF
.text:00000BFF loc_BFF:                                ; CODE XREF: NArchive::N7z::Parse_MACH(uchar const *,uint,NArchive::N7z::CFilterMode *)+57j
.text:00000BFF                 mov     [ebp+var_10], 1
.text:00000C06                 jmp     short loc_C21
.text:00000C08 ; ---------------------------------------------------------------------------
.text:00000C08
.text:00000C08 loc_C08:                                ; CODE XREF: NArchive::N7z::Parse_MACH(uchar const *,uint,NArchive::N7z::CFilterMode *)+45j
.text:00000C08                 mov     [ebp+var_10], 0
.text:00000C0F                 jmp     short loc_C21
.text:00000C11 ; ---------------------------------------------------------------------------
.text:00000C11
.text:00000C11 loc_C11:                                ; CODE XREF: NArchive::N7z::Parse_MACH(uchar const *,uint,NArchive::N7z::CFilterMode *)+62j
.text:00000C11                 mov     [ebp+var_10], 0
.text:00000C18                 jmp     short loc_C21
.text:00000C1A ; ---------------------------------------------------------------------------
.text:00000C1A
.text:00000C1A loc_C1A:                                ; CODE XREF: NArchive::N7z::Parse_MACH(uchar const *,uint,NArchive::N7z::CFilterMode *)+59j
.text:00000C1A                                         ; NArchive::N7z::Parse_MACH(uchar const *,uint,NArchive::N7z::CFilterMode *)+64j
.text:00000C1A                 xor     eax, eax
.text:00000C1C                 jmp     loc_CF7
.text:00000C21 ; ---------------------------------------------------------------------------
.text:00000C21
.text:00000C21 loc_C21:                                ; CODE XREF: NArchive::N7z::Parse_MACH(uchar const *,uint,NArchive::N7z::CFilterMode *)+6Dj
.text:00000C21                                         ; NArchive::N7z::Parse_MACH(uchar const *,uint,NArchive::N7z::CFilterMode *)+76j ...
.text:00000C21                 mov     edx, [ebp+var_10]
.text:00000C24                 push    edx
.text:00000C25                 mov     eax, [ebp+arg_0]
.text:00000C28                 add     eax, 4
.text:00000C2B                 push    eax
.text:00000C2C                 call    ?Get32@N7z@NArchive@@YGIPBEH@Z ; NArchive::N7z::Get32(uchar const *,int)
.text:00000C31                 mov     [ebp+var_18], eax
.text:00000C34                 cmp     [ebp+var_18], 12h
.text:00000C38                 ja      short loc_C54
.text:00000C3A                 cmp     [ebp+var_18], 12h
.text:00000C3E                 jz      short loc_C97
.text:00000C40                 cmp     [ebp+var_18], 7
.text:00000C44                 jz      short loc_C68
.text:00000C46                 cmp     [ebp+var_18], 0Ch
.text:00000C4A                 jz      short loc_C71
.text:00000C4C                 cmp     [ebp+var_18], 0Eh
.text:00000C50                 jz      short loc_C84
.text:00000C52                 jmp     short loc_CAA
.text:00000C54 ; ---------------------------------------------------------------------------
.text:00000C54
.text:00000C54 loc_C54:                                ; CODE XREF: NArchive::N7z::Parse_MACH(uchar const *,uint,NArchive::N7z::CFilterMode *)+A8j
.text:00000C54                 cmp     [ebp+var_18], 1000007h
.text:00000C5B                 jz      short loc_C68
.text:00000C5D                 cmp     [ebp+var_18], 1000012h
.text:00000C64                 jz      short loc_C97
.text:00000C66                 jmp     short loc_CAA
.text:00000C68 ; ---------------------------------------------------------------------------
.text:00000C68
.text:00000C68 loc_C68:                                ; CODE XREF: NArchive::N7z::Parse_MACH(uchar const *,uint,NArchive::N7z::CFilterMode *)+B4j
.text:00000C68                                         ; NArchive::N7z::Parse_MACH(uchar const *,uint,NArchive::N7z::CFilterMode *)+CBj
.text:00000C68                 mov     [ebp+var_4], 3030103h
.text:00000C6F                 jmp     short loc_CAE
.text:00000C71 ; ---------------------------------------------------------------------------
.text:00000C71
.text:00000C71 loc_C71:                                ; CODE XREF: NArchive::N7z::Parse_MACH(uchar const *,uint,NArchive::N7z::CFilterMode *)+BAj
.text:00000C71                 cmp     [ebp+var_10], 0
.text:00000C75                 jz      short loc_C7B
.text:00000C77                 xor     eax, eax
.text:00000C79                 jmp     short loc_CF7
.text:00000C7B ; ---------------------------------------------------------------------------
.text:00000C7B
.text:00000C7B loc_C7B:                                ; CODE XREF: NArchive::N7z::Parse_MACH(uchar const *,uint,NArchive::N7z::CFilterMode *)+E5j
.text:00000C7B                 mov     [ebp+var_4], 3030501h
.text:00000C82                 jmp     short loc_CAE
.text:00000C84 ; ---------------------------------------------------------------------------
.text:00000C84
.text:00000C84 loc_C84:                                ; CODE XREF: NArchive::N7z::Parse_MACH(uchar const *,uint,NArchive::N7z::CFilterMode *)+C0j
.text:00000C84                 cmp     [ebp+var_10], 0
.text:00000C88                 jnz     short loc_C8E
.text:00000C8A                 xor     eax, eax
.text:00000C8C                 jmp     short loc_CF7
.text:00000C8E ; ---------------------------------------------------------------------------
.text:00000C8E
.text:00000C8E loc_C8E:                                ; CODE XREF: NArchive::N7z::Parse_MACH(uchar const *,uint,NArchive::N7z::CFilterMode *)+F8j
.text:00000C8E                 mov     [ebp+var_4], 3030805h
.text:00000C95                 jmp     short loc_CAE
.text:00000C97 ; ---------------------------------------------------------------------------
.text:00000C97
.text:00000C97 loc_C97:                                ; CODE XREF: NArchive::N7z::Parse_MACH(uchar const *,uint,NArchive::N7z::CFilterMode *)+AEj
.text:00000C97                                         ; NArchive::N7z::Parse_MACH(uchar const *,uint,NArchive::N7z::CFilterMode *)+D4j
.text:00000C97                 cmp     [ebp+var_10], 0
.text:00000C9B                 jnz     short loc_CA1
.text:00000C9D                 xor     eax, eax
.text:00000C9F                 jmp     short loc_CF7
.text:00000CA1 ; ---------------------------------------------------------------------------
.text:00000CA1
.text:00000CA1 loc_CA1:                                ; CODE XREF: NArchive::N7z::Parse_MACH(uchar const *,uint,NArchive::N7z::CFilterMode *)+10Bj
.text:00000CA1                 mov     [ebp+var_4], 3030205h
.text:00000CA8                 jmp     short loc_CAE
.text:00000CAA ; ---------------------------------------------------------------------------
.text:00000CAA
.text:00000CAA loc_CAA:                                ; CODE XREF: NArchive::N7z::Parse_MACH(uchar const *,uint,NArchive::N7z::CFilterMode *)+C2j
.text:00000CAA                                         ; NArchive::N7z::Parse_MACH(uchar const *,uint,NArchive::N7z::CFilterMode *)+D6j
.text:00000CAA                 xor     eax, eax
.text:00000CAC                 jmp     short loc_CF7
.text:00000CAE ; ---------------------------------------------------------------------------
.text:00000CAE
.text:00000CAE loc_CAE:                                ; CODE XREF: NArchive::N7z::Parse_MACH(uchar const *,uint,NArchive::N7z::CFilterMode *)+DFj
.text:00000CAE                                         ; NArchive::N7z::Parse_MACH(uchar const *,uint,NArchive::N7z::CFilterMode *)+F2j ...
.text:00000CAE                 mov     ecx, [ebp+var_10]
.text:00000CB1                 push    ecx
.text:00000CB2                 mov     edx, [ebp+arg_0]
.text:00000CB5                 add     edx, 10h
.text:00000CB8                 push    edx
.text:00000CB9                 call    ?Get32@N7z@NArchive@@YGIPBEH@Z ; NArchive::N7z::Get32(uchar const *,int)
.text:00000CBE                 mov     [ebp+var_8], eax
.text:00000CC1                 mov     eax, [ebp+var_10]
.text:00000CC4                 push    eax
.text:00000CC5                 mov     ecx, [ebp+arg_0]
.text:00000CC8                 add     ecx, 14h
.text:00000CCB                 push    ecx
.text:00000CCC                 call    ?Get32@N7z@NArchive@@YGIPBEH@Z ; NArchive::N7z::Get32(uchar const *,int)
.text:00000CD1                 mov     [ebp+var_C], eax
.text:00000CD4                 cmp     [ebp+var_C], 1000000h
.text:00000CDB                 ja      short loc_CE6
.text:00000CDD                 cmp     [ebp+var_8], 40000h
.text:00000CE4                 jbe     short loc_CEA
.text:00000CE6
.text:00000CE6 loc_CE6:                                ; CODE XREF: NArchive::N7z::Parse_MACH(uchar const *,uint,NArchive::N7z::CFilterMode *)+14Bj
.text:00000CE6                 xor     eax, eax
.text:00000CE8                 jmp     short loc_CF7
.text:00000CEA ; ---------------------------------------------------------------------------
.text:00000CEA
.text:00000CEA loc_CEA:                                ; CODE XREF: NArchive::N7z::Parse_MACH(uchar const *,uint,NArchive::N7z::CFilterMode *)+154j
.text:00000CEA                 mov     edx, [ebp+arg_8]
.text:00000CED                 mov     eax, [ebp+var_4]
.text:00000CF0                 mov     [edx], eax
.text:00000CF2                 mov     eax, 1
.text:00000CF7
.text:00000CF7 loc_CF7:                                ; CODE XREF: NArchive::N7z::Parse_MACH(uchar const *,uint,NArchive::N7z::CFilterMode *)+28j
.text:00000CF7                                         ; NArchive::N7z::Parse_MACH(uchar const *,uint,NArchive::N7z::CFilterMode *)+8Cj ...
.text:00000CF7                 add     esp, 18h
.text:00000CFA                 cmp     ebp, esp
.text:00000CFC                 call    __RTC_CheckEsp
.text:00000D01                 mov     esp, ebp
.text:00000D03                 pop     ebp
.text:00000D04                 retn    0Ch
.text:00000D04 ?Parse_MACH@N7z@NArchive@@YGIPBEIPAUCFilterMode@12@@Z endp
.text:00000D04
.text:00000D04 ; ---------------------------------------------------------------------------
.text:00000D07                 align 10h
.text:00000D10
.text:00000D10 ; =============== S U B R O U T I N E =======================================
.text:00000D10
.text:00000D10 ; Attributes: bp-based frame
.text:00000D10
.text:00000D10 ; unsigned int __stdcall NArchive::N7z::Get32(unsigned char const *, int)
.text:00000D10 ?Get32@N7z@NArchive@@YGIPBEH@Z proc near
.text:00000D10                                         ; CODE XREF: NArchive::N7z::Parse_MACH(uchar const *,uint,NArchive::N7z::CFilterMode *)+9Cp
.text:00000D10                                         ; NArchive::N7z::Parse_MACH(uchar const *,uint,NArchive::N7z::CFilterMode *)+129p ...
.text:00000D10
.text:00000D10 arg_0           = dword ptr  8
.text:00000D10 arg_4           = dword ptr  0Ch
.text:00000D10
.text:00000D10                 push    ebp
.text:00000D11                 mov     ebp, esp
.text:00000D13                 cmp     [ebp+arg_4], 0
.text:00000D17                 jz      short loc_D22
.text:00000D19                 mov     eax, [ebp+arg_0]
.text:00000D1C                 mov     eax, [eax]
.text:00000D1E                 bswap   eax
.text:00000D20                 jmp     short loc_D27
.text:00000D22 ; ---------------------------------------------------------------------------
.text:00000D22
.text:00000D22 loc_D22:                                ; CODE XREF: NArchive::N7z::Get32(uchar const *,int)+7j
.text:00000D22                 mov     ecx, [ebp+arg_0]
.text:00000D25                 mov     eax, [ecx]
.text:00000D27
.text:00000D27 loc_D27:                                ; CODE XREF: NArchive::N7z::Get32(uchar const *,int)+10j
.text:00000D27                 pop     ebp
.text:00000D28                 retn    8
.text:00000D28 ?Get32@N7z@NArchive@@YGIPBEH@Z endp
.text:00000D28
.text:00000D28 ; ---------------------------------------------------------------------------
.text:00000D2B                 align 10h
.text:00000D30
.text:00000D30 ; =============== S U B R O U T I N E =======================================
.text:00000D30
.text:00000D30 ; Attributes: bp-based frame
.text:00000D30
.text:00000D30 ; int __stdcall NArchive::N7z::Parse_WAV(unsigned char const *, unsigned int, struct NArchive::N7z::CFilterMode *)
.text:00000D30 ?Parse_WAV@N7z@NArchive@@YGHPBEIPAUCFilterMode@12@@Z proc near
.text:00000D30                                         ; CODE XREF: NArchive::N7z::ParseFile(uchar const *,uint,NArchive::N7z::CFilterMode *)+76p
.text:00000D30
.text:00000D30 var_1C          = dword ptr -1Ch
.text:00000D30 var_18          = dword ptr -18h
.text:00000D30 var_14          = dword ptr -14h
.text:00000D30 var_10          = dword ptr -10h
.text:00000D30 var_C           = dword ptr -0Ch
.text:00000D30 var_8           = dword ptr -8
.text:00000D30 var_4           = dword ptr -4
.text:00000D30 arg_0           = dword ptr  8
.text:00000D30 arg_4           = dword ptr  0Ch
.text:00000D30 arg_8           = dword ptr  10h
.text:00000D30
.text:00000D30                 push    ebp
.text:00000D31                 mov     ebp, esp
.text:00000D33                 sub     esp, 1Ch
.text:00000D36                 mov     eax, 0CCCCCCCCh
.text:00000D3B                 mov     [ebp+var_1C], eax
.text:00000D3E                 mov     [ebp+var_18], eax
.text:00000D41                 mov     [ebp+var_14], eax
.text:00000D44                 mov     [ebp+var_10], eax
.text:00000D47                 mov     [ebp+var_C], eax
.text:00000D4A                 mov     [ebp+var_8], eax
.text:00000D4D                 mov     [ebp+var_4], eax
.text:00000D50                 cmp     [ebp+arg_4], 2Ch ; ','
.text:00000D54                 jnb     short loc_D5D
.text:00000D56                 xor     eax, eax
.text:00000D58                 jmp     loc_E89
.text:00000D5D ; ---------------------------------------------------------------------------
.text:00000D5D
.text:00000D5D loc_D5D:                                ; CODE XREF: NArchive::N7z::Parse_WAV(uchar const *,uint,NArchive::N7z::CFilterMode *)+24j
.text:00000D5D                 mov     eax, [ebp+arg_0]
.text:00000D60                 cmp     dword ptr [eax], 46464952h
.text:00000D66                 jnz     short loc_D80
.text:00000D68                 mov     ecx, [ebp+arg_0]
.text:00000D6B                 cmp     dword ptr [ecx+8], 45564157h
.text:00000D72                 jnz     short loc_D80
.text:00000D74                 mov     edx, [ebp+arg_0]
.text:00000D77                 cmp     dword ptr [edx+0Ch], 20746D66h
.text:00000D7E                 jz      short loc_D87
.text:00000D80
.text:00000D80 loc_D80:                                ; CODE XREF: NArchive::N7z::Parse_WAV(uchar const *,uint,NArchive::N7z::CFilterMode *)+36j
.text:00000D80                                         ; NArchive::N7z::Parse_WAV(uchar const *,uint,NArchive::N7z::CFilterMode *)+42j
.text:00000D80                 xor     eax, eax
.text:00000D82                 jmp     loc_E89
.text:00000D87 ; ---------------------------------------------------------------------------
.text:00000D87
.text:00000D87 loc_D87:                                ; CODE XREF: NArchive::N7z::Parse_WAV(uchar const *,uint,NArchive::N7z::CFilterMode *)+4Ej
.text:00000D87                 mov     eax, [ebp+arg_0]
.text:00000D8A                 mov     ecx, [eax+10h]
.text:00000D8D                 mov     [ebp+var_4], ecx
.text:00000D90                 cmp     [ebp+var_4], 10h
.text:00000D94                 jb      short loc_DA8
.text:00000D96                 cmp     [ebp+var_4], 12h
.text:00000D9A                 ja      short loc_DA8
.text:00000D9C                 mov     edx, [ebp+arg_0]
.text:00000D9F                 movzx   eax, word ptr [edx+14h]
.text:00000DA3                 cmp     eax, 1
.text:00000DA6                 jz      short loc_DAF
.text:00000DA8
.text:00000DA8 loc_DA8:                                ; CODE XREF: NArchive::N7z::Parse_WAV(uchar const *,uint,NArchive::N7z::CFilterMode *)+64j
.text:00000DA8                                         ; NArchive::N7z::Parse_WAV(uchar const *,uint,NArchive::N7z::CFilterMode *)+6Aj
.text:00000DA8                 xor     eax, eax
.text:00000DAA                 jmp     loc_E89
.text:00000DAF ; ---------------------------------------------------------------------------
.text:00000DAF
.text:00000DAF loc_DAF:                                ; CODE XREF: NArchive::N7z::Parse_WAV(uchar const *,uint,NArchive::N7z::CFilterMode *)+76j
.text:00000DAF                 mov     ecx, [ebp+arg_0]
.text:00000DB2                 movzx   edx, word ptr [ecx+16h]
.text:00000DB6                 mov     [ebp+var_C], edx
.text:00000DB9                 mov     eax, [ebp+arg_0]
.text:00000DBC                 movzx   ecx, word ptr [eax+22h]
.text:00000DC0                 mov     [ebp+var_10], ecx
.text:00000DC3                 mov     edx, [ebp+var_10]
.text:00000DC6                 and     edx, 7
.text:00000DC9                 jnz     short loc_DDD
.text:00000DCB                 cmp     [ebp+var_10], 100h
.text:00000DD2                 jnb     short loc_DDD
.text:00000DD4                 cmp     [ebp+var_C], 100h
.text:00000DDB                 jb      short loc_DE4
.text:00000DDD
.text:00000DDD loc_DDD:                                ; CODE XREF: NArchive::N7z::Parse_WAV(uchar const *,uint,NArchive::N7z::CFilterMode *)+99j
.text:00000DDD                                         ; NArchive::N7z::Parse_WAV(uchar const *,uint,NArchive::N7z::CFilterMode *)+A2j
.text:00000DDD                 xor     eax, eax
.text:00000DDF                 jmp     loc_E89
.text:00000DE4 ; ---------------------------------------------------------------------------
.text:00000DE4
.text:00000DE4 loc_DE4:                                ; CODE XREF: NArchive::N7z::Parse_WAV(uchar const *,uint,NArchive::N7z::CFilterMode *)+ABj
.text:00000DE4                 mov     eax, [ebp+var_4]
.text:00000DE7                 add     eax, 14h
.text:00000DEA                 mov     [ebp+var_8], eax
.text:00000DED                 mov     [ebp+var_14], 0Ah
.text:00000DF4                 mov     [ebp+var_18], 0
.text:00000DFB                 jmp     short loc_E06
.text:00000DFD ; ---------------------------------------------------------------------------
.text:00000DFD
.text:00000DFD loc_DFD:                                ; CODE XREF: NArchive::N7z::Parse_WAV(uchar const *,uint,NArchive::N7z::CFilterMode *)+152j
.text:00000DFD                 mov     ecx, [ebp+var_18]
.text:00000E00                 add     ecx, 1
.text:00000E03                 mov     [ebp+var_18], ecx
.text:00000E06
.text:00000E06 loc_E06:                                ; CODE XREF: NArchive::N7z::Parse_WAV(uchar const *,uint,NArchive::N7z::CFilterMode *)+CBj
.text:00000E06                 cmp     [ebp+var_18], 0Ah
.text:00000E0A                 jge     short loc_E87
.text:00000E0C                 mov     edx, [ebp+var_8]
.text:00000E0F                 add     edx, 8
.text:00000E12                 cmp     edx, [ebp+arg_4]
.text:00000E15                 jbe     short loc_E1B
.text:00000E17                 xor     eax, eax
.text:00000E19                 jmp     short loc_E89
.text:00000E1B ; ---------------------------------------------------------------------------
.text:00000E1B
.text:00000E1B loc_E1B:                                ; CODE XREF: NArchive::N7z::Parse_WAV(uchar const *,uint,NArchive::N7z::CFilterMode *)+E5j
.text:00000E1B                 mov     eax, [ebp+arg_0]
.text:00000E1E                 add     eax, [ebp+var_8]
.text:00000E21                 mov     ecx, [eax+4]
.text:00000E24                 mov     [ebp+var_4], ecx
.text:00000E27                 mov     edx, [ebp+arg_0]
.text:00000E2A                 add     edx, [ebp+var_8]
.text:00000E2D                 cmp     dword ptr [edx], 61746164h
.text:00000E33                 jnz     short loc_E68
.text:00000E35                 mov     eax, [ebp+var_10]
.text:00000E38                 shr     eax, 3
.text:00000E3B                 imul    eax, [ebp+var_C]
.text:00000E3F                 mov     [ebp+var_1C], eax
.text:00000E42                 cmp     [ebp+var_1C], 100h
.text:00000E49                 jb      short loc_E4F
.text:00000E4B                 xor     eax, eax
.text:00000E4D                 jmp     short loc_E89
.text:00000E4F ; ---------------------------------------------------------------------------
.text:00000E4F
.text:00000E4F loc_E4F:                                ; CODE XREF: NArchive::N7z::Parse_WAV(uchar const *,uint,NArchive::N7z::CFilterMode *)+119j
.text:00000E4F                 mov     ecx, [ebp+arg_8]
.text:00000E52                 mov     dword ptr [ecx], 3
.text:00000E58                 mov     edx, [ebp+arg_8]
.text:00000E5B                 mov     eax, [ebp+var_1C]
.text:00000E5E                 mov     [edx+4], eax
.text:00000E61                 mov     eax, 1
.text:00000E66                 jmp     short loc_E89
.text:00000E68 ; ---------------------------------------------------------------------------
.text:00000E68
.text:00000E68 loc_E68:                                ; CODE XREF: NArchive::N7z::Parse_WAV(uchar const *,uint,NArchive::N7z::CFilterMode *)+103j
.text:00000E68                 cmp     [ebp+var_4], 10000h
.text:00000E6F                 jbe     short loc_E75
.text:00000E71                 xor     eax, eax
.text:00000E73                 jmp     short loc_E89
.text:00000E75 ; ---------------------------------------------------------------------------
.text:00000E75
.text:00000E75 loc_E75:                                ; CODE XREF: NArchive::N7z::Parse_WAV(uchar const *,uint,NArchive::N7z::CFilterMode *)+13Fj
.text:00000E75                 mov     ecx, [ebp+var_4]
.text:00000E78                 mov     edx, [ebp+var_8]
.text:00000E7B                 lea     eax, [edx+ecx+8]
.text:00000E7F                 mov     [ebp+var_8], eax
.text:00000E82                 jmp     loc_DFD
.text:00000E87 ; ---------------------------------------------------------------------------
.text:00000E87
.text:00000E87 loc_E87:                                ; CODE XREF: NArchive::N7z::Parse_WAV(uchar const *,uint,NArchive::N7z::CFilterMode *)+DAj
.text:00000E87                 xor     eax, eax
.text:00000E89
.text:00000E89 loc_E89:                                ; CODE XREF: NArchive::N7z::Parse_WAV(uchar const *,uint,NArchive::N7z::CFilterMode *)+28j
.text:00000E89                                         ; NArchive::N7z::Parse_WAV(uchar const *,uint,NArchive::N7z::CFilterMode *)+52j ...
.text:00000E89                 mov     esp, ebp
.text:00000E8B                 pop     ebp
.text:00000E8C                 retn    0Ch
.text:00000E8C ?Parse_WAV@N7z@NArchive@@YGHPBEIPAUCFilterMode@12@@Z endp
.text:00000E8C
.text:00000E8C ; ---------------------------------------------------------------------------
.text:00000E8F                 align 10h
.text:00000E90
.text:00000E90 ; =============== S U B R O U T I N E =======================================
.text:00000E90
.text:00000E90 ; Attributes: bp-based frame
.text:00000E90
.text:00000E90 ; int __stdcall NArchive::N7z::IsExeExt(wchar_t *)
.text:00000E90 ?IsExeExt@N7z@NArchive@@YG_NPB_W@Z proc near
.text:00000E90                                         ; CODE XREF: NArchive::N7z::CAnalysis::GetFilterGroup(uint,NArchive::N7z::CUpdateItem const &,NArchive::N7z::CFilterMode &)+113p
.text:00000E90
.text:00000E90 var_4           = dword ptr -4
.text:00000E90 arg_0           = dword ptr  8
.text:00000E90
.text:00000E90                 push    ebp
.text:00000E91                 mov     ebp, esp
.text:00000E93                 push    ecx
.text:00000E94                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000E9B                 mov     [ebp+var_4], 0
.text:00000EA2                 jmp     short loc_EAD
.text:00000EA4 ; ---------------------------------------------------------------------------
.text:00000EA4
.text:00000EA4 loc_EA4:                                ; CODE XREF: NArchive::N7z::IsExeExt(wchar_t const *):loc_ED2j
.text:00000EA4                 mov     eax, [ebp+var_4]
.text:00000EA7                 add     eax, 1
.text:00000EAA                 mov     [ebp+var_4], eax
.text:00000EAD
.text:00000EAD loc_EAD:                                ; CODE XREF: NArchive::N7z::IsExeExt(wchar_t const *)+12j
.text:00000EAD                 cmp     [ebp+var_4], 5
.text:00000EB1                 jnb     short loc_ED4
.text:00000EB3                 mov     ecx, [ebp+var_4]
.text:00000EB6                 mov     edx, ds:_g_ExeExts[ecx*4]
.text:00000EBD                 push    edx             ; char *
.text:00000EBE                 mov     eax, [ebp+arg_0]
.text:00000EC1                 push    eax             ; wchar_t *
.text:00000EC2                 call    ?StringsAreEqualNoCase_Ascii@@YG_NPB_WPBD@Z ; StringsAreEqualNoCase_Ascii(wchar_t const *,char const *)
.text:00000EC7                 movzx   ecx, al
.text:00000ECA                 test    ecx, ecx
.text:00000ECC                 jz      short loc_ED2
.text:00000ECE                 mov     al, 1
.text:00000ED0                 jmp     short loc_ED6
.text:00000ED2 ; ---------------------------------------------------------------------------
.text:00000ED2
.text:00000ED2 loc_ED2:                                ; CODE XREF: NArchive::N7z::IsExeExt(wchar_t const *)+3Cj
.text:00000ED2                 jmp     short loc_EA4
.text:00000ED4 ; ---------------------------------------------------------------------------
.text:00000ED4
.text:00000ED4 loc_ED4:                                ; CODE XREF: NArchive::N7z::IsExeExt(wchar_t const *)+21j
.text:00000ED4                 xor     al, al
.text:00000ED6
.text:00000ED6 loc_ED6:                                ; CODE XREF: NArchive::N7z::IsExeExt(wchar_t const *)+40j
.text:00000ED6                 add     esp, 4
.text:00000ED9                 cmp     ebp, esp
.text:00000EDB                 call    __RTC_CheckEsp
.text:00000EE0                 mov     esp, ebp
.text:00000EE2                 pop     ebp
.text:00000EE3                 retn    4
.text:00000EE3 ?IsExeExt@N7z@NArchive@@YG_NPB_W@Z endp
.text:00000EE3
.text:00000EE3 ; ---------------------------------------------------------------------------
.text:00000EE6                 align 10h
.text:00000EF0
.text:00000EF0 ; =============== S U B R O U T I N E =======================================
.text:00000EF0
.text:00000EF0 ; Attributes: bp-based frame
.text:00000EF0
.text:00000EF0 ; __int32 __stdcall NArchive::N7z::CRepackInStreamWithSizes::Read(NArchive::N7z::CRepackInStreamWithSizes *this, void *, unsigned int, unsigned int *)
.text:00000EF0                 public ?Read@CRepackInStreamWithSizes@N7z@NArchive@@UAGJPAXIPAI@Z
.text:00000EF0 ?Read@CRepackInStreamWithSizes@N7z@NArchive@@UAGJPAXIPAI@Z proc near
.text:00000EF0                                         ; DATA XREF: .rdata:0000A8DCo
.text:00000EF0
.text:00000EF0 var_4           = dword ptr -4
.text:00000EF0 this            = dword ptr  8
.text:00000EF0 arg_4           = dword ptr  0Ch
.text:00000EF0 arg_8           = dword ptr  10h
.text:00000EF0 arg_C           = dword ptr  14h
.text:00000EF0
.text:00000EF0                 push    ebp
.text:00000EF1                 mov     ebp, esp
.text:00000EF3                 push    ecx
.text:00000EF4                 push    esi
.text:00000EF5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000EFC                 mov     ecx, [ebp+this]
.text:00000EFF                 add     ecx, 0Ch
.text:00000F02                 call    ??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator->(void)
.text:00000F07                 mov     [ebp+var_4], eax
.text:00000F0A                 mov     esi, esp
.text:00000F0C                 mov     eax, [ebp+arg_C]
.text:00000F0F                 push    eax
.text:00000F10                 mov     ecx, [ebp+arg_8]
.text:00000F13                 push    ecx
.text:00000F14                 mov     edx, [ebp+arg_4]
.text:00000F17                 push    edx
.text:00000F18                 mov     eax, [ebp+var_4]
.text:00000F1B                 push    eax
.text:00000F1C                 mov     ecx, [ebp+var_4]
.text:00000F1F                 mov     edx, [ecx]
.text:00000F21                 mov     eax, [edx+0Ch]
.text:00000F24                 call    eax
.text:00000F26                 cmp     esi, esp
.text:00000F28                 call    __RTC_CheckEsp
.text:00000F2D                 pop     esi
.text:00000F2E                 add     esp, 4
.text:00000F31                 cmp     ebp, esp
.text:00000F33                 call    __RTC_CheckEsp
.text:00000F38                 mov     esp, ebp
.text:00000F3A                 pop     ebp
.text:00000F3B                 retn    10h
.text:00000F3B ?Read@CRepackInStreamWithSizes@N7z@NArchive@@UAGJPAXIPAI@Z endp
.text:00000F3B
.text:00000F3B ; ---------------------------------------------------------------------------
.text:00000F3E                 align 10h
.text:00000F40
.text:00000F40 ; =============== S U B R O U T I N E =======================================
.text:00000F40
.text:00000F40 ; Attributes: bp-based frame
.text:00000F40
.text:00000F40 ; __int32 __stdcall NArchive::N7z::CRepackInStreamWithSizes::GetSubStreamSize(NArchive::N7z::CRepackInStreamWithSizes *this, unsigned __int64, unsigned __int64 *)
.text:00000F40                 public ?GetSubStreamSize@CRepackInStreamWithSizes@N7z@NArchive@@UAGJ_KPA_K@Z
.text:00000F40 ?GetSubStreamSize@CRepackInStreamWithSizes@N7z@NArchive@@UAGJ_KPA_K@Z proc near
.text:00000F40                                         ; DATA XREF: .rdata:0000A8C8o
.text:00000F40
.text:00000F40 var_10          = dword ptr -10h
.text:00000F40 var_C           = dword ptr -0Ch
.text:00000F40 var_8           = dword ptr -8
.text:00000F40 var_4           = dword ptr -4
.text:00000F40 this            = dword ptr  8
.text:00000F40 arg_4           = qword ptr  0Ch
.text:00000F40 arg_C           = dword ptr  14h
.text:00000F40
.text:00000F40                 push    ebp
.text:00000F41                 mov     ebp, esp
.text:00000F43                 sub     esp, 10h
.text:00000F46                 mov     eax, 0CCCCCCCCh
.text:00000F4B                 mov     [ebp+var_10], eax
.text:00000F4E                 mov     [ebp+var_C], eax
.text:00000F51                 mov     [ebp+var_8], eax
.text:00000F54                 mov     [ebp+var_4], eax
.text:00000F57                 mov     eax, [ebp+arg_C]
.text:00000F5A                 mov     dword ptr [eax], 0
.text:00000F60                 mov     dword ptr [eax+4], 0
.text:00000F67                 mov     ecx, [ebp+this]
.text:00000F6A                 mov     ecx, [ecx+0Ch]
.text:00000F6D                 call    ?Size@?$CRecordVector@_N@@QBEIXZ ; CRecordVector<bool>::Size(void)
.text:00000F72                 xor     edx, edx
.text:00000F74                 mov     [ebp+var_10], eax
.text:00000F77                 mov     [ebp+var_C], edx
.text:00000F7A                 mov     eax, dword ptr [ebp+arg_4+4]
.text:00000F7D                 cmp     eax, [ebp+var_C]
.text:00000F80                 jb      short loc_F93
.text:00000F82                 ja      short loc_F8C
.text:00000F84                 mov     ecx, dword ptr [ebp+arg_4]
.text:00000F87                 cmp     ecx, [ebp+var_10]
.text:00000F8A                 jb      short loc_F93
.text:00000F8C
.text:00000F8C loc_F8C:                                ; CODE XREF: NArchive::N7z::CRepackInStreamWithSizes::GetSubStreamSize(unsigned __int64,unsigned __int64 *)+42j
.text:00000F8C                 mov     eax, 1
.text:00000F91                 jmp     short loc_FE7
.text:00000F93 ; ---------------------------------------------------------------------------
.text:00000F93
.text:00000F93 loc_F93:                                ; CODE XREF: NArchive::N7z::CRepackInStreamWithSizes::GetSubStreamSize(unsigned __int64,unsigned __int64 *)+40j
.text:00000F93                                         ; NArchive::N7z::CRepackInStreamWithSizes::GetSubStreamSize(unsigned __int64,unsigned __int64 *)+4Aj
.text:00000F93                 mov     edx, dword ptr [ebp+arg_4]
.text:00000F96                 mov     [ebp+var_4], edx
.text:00000F99                 mov     eax, [ebp+var_4]
.text:00000F9C                 push    eax
.text:00000F9D                 mov     ecx, [ebp+this]
.text:00000FA0                 mov     ecx, [ecx+0Ch]
.text:00000FA3                 call    ??A?$CRecordVector@_N@@QBEAB_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:00000FA8                 movzx   edx, byte ptr [eax]
.text:00000FAB                 test    edx, edx
.text:00000FAD                 jz      short loc_FE5
.text:00000FAF                 mov     eax, [ebp+this]
.text:00000FB2                 mov     ecx, [eax+10h]
.text:00000FB5                 add     ecx, [ebp+var_4]
.text:00000FB8                 push    ecx
.text:00000FB9                 mov     edx, [ebp+this]
.text:00000FBC                 mov     ecx, [edx+14h]
.text:00000FBF                 add     ecx, 58h ; 'X'
.text:00000FC2                 call    ??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFileItem>::operator[](uint)
.text:00000FC7                 mov     [ebp+var_8], eax
.text:00000FCA                 mov     eax, [ebp+var_8]
.text:00000FCD                 movzx   ecx, byte ptr [eax+10h]
.text:00000FD1                 test    ecx, ecx
.text:00000FD3                 jz      short loc_FE5
.text:00000FD5                 mov     edx, [ebp+arg_C]
.text:00000FD8                 mov     eax, [ebp+var_8]
.text:00000FDB                 mov     ecx, [eax]
.text:00000FDD                 mov     [edx], ecx
.text:00000FDF                 mov     eax, [eax+4]
.text:00000FE2                 mov     [edx+4], eax
.text:00000FE5
.text:00000FE5 loc_FE5:                                ; CODE XREF: NArchive::N7z::CRepackInStreamWithSizes::GetSubStreamSize(unsigned __int64,unsigned __int64 *)+6Dj
.text:00000FE5                                         ; NArchive::N7z::CRepackInStreamWithSizes::GetSubStreamSize(unsigned __int64,unsigned __int64 *)+93j
.text:00000FE5                 xor     eax, eax
.text:00000FE7
.text:00000FE7 loc_FE7:                                ; CODE XREF: NArchive::N7z::CRepackInStreamWithSizes::GetSubStreamSize(unsigned __int64,unsigned __int64 *)+51j
.text:00000FE7                 add     esp, 10h
.text:00000FEA                 cmp     ebp, esp
.text:00000FEC                 call    __RTC_CheckEsp
.text:00000FF1                 mov     esp, ebp
.text:00000FF3                 pop     ebp
.text:00000FF4                 retn    10h
.text:00000FF4 ?GetSubStreamSize@CRepackInStreamWithSizes@N7z@NArchive@@UAGJ_KPA_K@Z endp
.text:00000FF4
.text:00000FF4 ; ---------------------------------------------------------------------------
.text:00000FF7                 align 10h
.text:00001000
.text:00001000 ; =============== S U B R O U T I N E =======================================
.text:00001000
.text:00001000 ; Attributes: bp-based frame
.text:00001000
.text:00001000 ; public: long __thiscall NArchive::N7z::CRepackStreamBase::Init(unsigned int, class CRecordVector<bool> const *)
.text:00001000                 public ?Init@CRepackStreamBase@N7z@NArchive@@QAEJIPBV?$CRecordVector@_N@@@Z
.text:00001000 ?Init@CRepackStreamBase@N7z@NArchive@@QAEJIPBV?$CRecordVector@_N@@@Z proc near
.text:00001000                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+2097p
.text:00001000
.text:00001000 var_4           = dword ptr -4
.text:00001000 arg_0           = dword ptr  8
.text:00001000 arg_4           = dword ptr  0Ch
.text:00001000
.text:00001000                 push    ebp
.text:00001001                 mov     ebp, esp
.text:00001003                 push    ecx
.text:00001004                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000100B                 mov     [ebp+var_4], ecx
.text:0000100E                 mov     eax, [ebp+var_4]
.text:00001011                 mov     ecx, [ebp+arg_0]
.text:00001014                 mov     [eax+14h], ecx
.text:00001017                 mov     edx, [ebp+var_4]
.text:0000101A                 mov     eax, [ebp+arg_4]
.text:0000101D                 mov     [edx+10h], eax
.text:00001020                 mov     ecx, [ebp+var_4]
.text:00001023                 mov     dword ptr [ecx+18h], 0
.text:0000102A                 mov     edx, [ebp+var_4]
.text:0000102D                 mov     byte ptr [edx+1], 0
.text:00001031                 mov     ecx, [ebp+var_4] ; this
.text:00001034                 call    ?ProcessEmptyFiles@CRepackStreamBase@N7z@NArchive@@IAEJXZ ; NArchive::N7z::CRepackStreamBase::ProcessEmptyFiles(void)
.text:00001039                 add     esp, 4
.text:0000103C                 cmp     ebp, esp
.text:0000103E                 call    __RTC_CheckEsp
.text:00001043                 mov     esp, ebp
.text:00001045                 pop     ebp
.text:00001046                 retn    8
.text:00001046 ?Init@CRepackStreamBase@N7z@NArchive@@QAEJIPBV?$CRecordVector@_N@@@Z endp
.text:00001046
.text:00001046 ; ---------------------------------------------------------------------------
.text:00001049                 align 10h
.text:00001050
.text:00001050 ; =============== S U B R O U T I N E =======================================
.text:00001050
.text:00001050 ; Attributes: bp-based frame
.text:00001050
.text:00001050 ; __int32 __thiscall NArchive::N7z::CRepackStreamBase::OpenFile(NArchive::N7z::CRepackStreamBase *__hidden this)
.text:00001050                 public ?OpenFile@CRepackStreamBase@N7z@NArchive@@IAEJXZ
.text:00001050 ?OpenFile@CRepackStreamBase@N7z@NArchive@@IAEJXZ proc near
.text:00001050                                         ; CODE XREF: NArchive::N7z::CRepackStreamBase::ProcessEmptyFiles(void)+5Bp
.text:00001050                                         ; NArchive::N7z::CFolderOutStream2::Write(void const *,uint,uint *)+1C8p ...
.text:00001050
.text:00001050 var_18          = dword ptr -18h
.text:00001050 var_14          = dword ptr -14h
.text:00001050 var_10          = dword ptr -10h
.text:00001050 var_C           = dword ptr -0Ch
.text:00001050 var_8           = dword ptr -8
.text:00001050 var_4           = dword ptr -4
.text:00001050
.text:00001050                 push    ebp
.text:00001051                 mov     ebp, esp
.text:00001053                 sub     esp, 18h
.text:00001056                 push    esi
.text:00001057                 mov     eax, 0CCCCCCCCh
.text:0000105C                 mov     [ebp+var_18], eax
.text:0000105F                 mov     [ebp+var_14], eax
.text:00001062                 mov     [ebp+var_10], eax
.text:00001065                 mov     [ebp+var_C], eax
.text:00001068                 mov     [ebp+var_8], eax
.text:0000106B                 mov     [ebp+var_4], eax
.text:0000106E                 mov     [ebp+var_4], ecx
.text:00001071                 mov     eax, [ebp+var_4]
.text:00001074                 mov     ecx, [eax+14h]
.text:00001077                 mov     edx, [ebp+var_4]
.text:0000107A                 add     ecx, [edx+18h]
.text:0000107D                 mov     [ebp+var_8], ecx
.text:00001080                 mov     eax, [ebp+var_8]
.text:00001083                 push    eax
.text:00001084                 mov     ecx, [ebp+var_4]
.text:00001087                 mov     ecx, [ecx+1Ch]
.text:0000108A                 add     ecx, 58h ; 'X'
.text:0000108D                 call    ??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFileItem>::operator[](uint)
.text:00001092                 mov     [ebp+var_C], eax
.text:00001095                 mov     edx, [ebp+var_4]
.text:00001098                 mov     eax, [edx+18h]
.text:0000109B                 push    eax
.text:0000109C                 mov     ecx, [ebp+var_4]
.text:0000109F                 mov     ecx, [ecx+10h]
.text:000010A2                 call    ??A?$CRecordVector@_N@@QBEAB_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:000010A7                 mov     edx, [ebp+var_4]
.text:000010AA                 mov     al, [eax]
.text:000010AC                 mov     [edx], al
.text:000010AE                 mov     ecx, [ebp+var_4]
.text:000010B1                 add     ecx, 20h ; ' '
.text:000010B4                 call    ??B?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator IArchiveUpdateCallbackFile *(void)
.text:000010B9                 test    eax, eax
.text:000010BB                 jz      short loc_1104
.text:000010BD                 mov     ecx, [ebp+var_4]
.text:000010C0                 add     ecx, 20h ; ' '
.text:000010C3                 call    ??C?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator->(void)
.text:000010C8                 mov     [ebp+var_14], eax
.text:000010CB                 mov     ecx, [ebp+var_4]
.text:000010CE                 movzx   edx, byte ptr [ecx]
.text:000010D1                 neg     edx
.text:000010D3                 sbb     edx, edx
.text:000010D5                 add     edx, 5
.text:000010D8                 mov     esi, esp
.text:000010DA                 push    edx
.text:000010DB                 mov     eax, [ebp+var_8]
.text:000010DE                 push    eax
.text:000010DF                 push    1
.text:000010E1                 mov     ecx, [ebp+var_14]
.text:000010E4                 push    ecx
.text:000010E5                 mov     edx, [ebp+var_14]
.text:000010E8                 mov     eax, [edx]
.text:000010EA                 mov     ecx, [eax+10h]
.text:000010ED                 call    ecx
.text:000010EF                 cmp     esi, esp
.text:000010F1                 call    __RTC_CheckEsp
.text:000010F6                 mov     [ebp+var_10], eax
.text:000010F9                 cmp     [ebp+var_10], 0
.text:000010FD                 jz      short loc_1104
.text:000010FF                 mov     eax, [ebp+var_10]
.text:00001102                 jmp     short loc_1157
.text:00001104 ; ---------------------------------------------------------------------------
.text:00001104
.text:00001104 loc_1104:                               ; CODE XREF: NArchive::N7z::CRepackStreamBase::OpenFile(void)+6Bj
.text:00001104                                         ; NArchive::N7z::CRepackStreamBase::OpenFile(void)+ADj
.text:00001104                 mov     edx, [ebp+var_4]
.text:00001107                 mov     dword ptr [edx+4], 0FFFFFFFFh
.text:0000110E                 mov     eax, [ebp+var_C]
.text:00001111                 movzx   ecx, byte ptr [eax+12h]
.text:00001115                 test    ecx, ecx
.text:00001117                 jz      short loc_112D
.text:00001119                 mov     edx, [ebp+var_C]
.text:0000111C                 movzx   eax, byte ptr [edx+11h]
.text:00001120                 test    eax, eax
.text:00001122                 jnz     short loc_112D
.text:00001124                 mov     [ebp+var_18], 1
.text:0000112B                 jmp     short loc_1134
.text:0000112D ; ---------------------------------------------------------------------------
.text:0000112D
.text:0000112D loc_112D:                               ; CODE XREF: NArchive::N7z::CRepackStreamBase::OpenFile(void)+C7j
.text:0000112D                                         ; NArchive::N7z::CRepackStreamBase::OpenFile(void)+D2j
.text:0000112D                 mov     [ebp+var_18], 0
.text:00001134
.text:00001134 loc_1134:                               ; CODE XREF: NArchive::N7z::CRepackStreamBase::OpenFile(void)+DBj
.text:00001134                 mov     ecx, [ebp+var_4]
.text:00001137                 mov     dl, byte ptr [ebp+var_18]
.text:0000113A                 mov     [ecx+2], dl
.text:0000113D                 mov     eax, [ebp+var_4]
.text:00001140                 mov     byte ptr [eax+1], 1
.text:00001144                 mov     ecx, [ebp+var_4]
.text:00001147                 mov     edx, [ebp+var_C]
.text:0000114A                 mov     eax, [edx]
.text:0000114C                 mov     [ecx+8], eax
.text:0000114F                 mov     edx, [edx+4]
.text:00001152                 mov     [ecx+0Ch], edx
.text:00001155                 xor     eax, eax
.text:00001157
.text:00001157 loc_1157:                               ; CODE XREF: NArchive::N7z::CRepackStreamBase::OpenFile(void)+B2j
.text:00001157                 pop     esi
.text:00001158                 add     esp, 18h
.text:0000115B                 cmp     ebp, esp
.text:0000115D                 call    __RTC_CheckEsp
.text:00001162                 mov     esp, ebp
.text:00001164                 pop     ebp
.text:00001165                 retn
.text:00001165 ?OpenFile@CRepackStreamBase@N7z@NArchive@@IAEJXZ endp
.text:00001165
.text:00001165 ; ---------------------------------------------------------------------------
.text:00001166                 align 10h
.text:00001170
.text:00001170 ; =============== S U B R O U T I N E =======================================
.text:00001170
.text:00001170 ; Attributes: bp-based frame
.text:00001170
.text:00001170 ; __int32 __thiscall NArchive::N7z::CRepackStreamBase::CloseFile(NArchive::N7z::CRepackStreamBase *__hidden this)
.text:00001170                 public ?CloseFile@CRepackStreamBase@N7z@NArchive@@IAEJXZ
.text:00001170 ?CloseFile@CRepackStreamBase@N7z@NArchive@@IAEJXZ proc near
.text:00001170                                         ; CODE XREF: NArchive::N7z::CRepackStreamBase::ProcessEmptyFiles(void)+71p
.text:00001170                                         ; NArchive::N7z::CFolderOutStream2::Write(void const *,uint,uint *)+142p ...
.text:00001170
.text:00001170 var_14          = dword ptr -14h
.text:00001170 var_10          = dword ptr -10h
.text:00001170 var_C           = dword ptr -0Ch
.text:00001170 var_8           = dword ptr -8
.text:00001170 var_4           = dword ptr -4
.text:00001170
.text:00001170                 push    ebp
.text:00001171                 mov     ebp, esp
.text:00001173                 sub     esp, 14h
.text:00001176                 push    esi
.text:00001177                 mov     eax, 0CCCCCCCCh
.text:0000117C                 mov     [ebp+var_14], eax
.text:0000117F                 mov     [ebp+var_10], eax
.text:00001182                 mov     [ebp+var_C], eax
.text:00001185                 mov     [ebp+var_8], eax
.text:00001188                 mov     [ebp+var_4], eax
.text:0000118B                 mov     [ebp+var_4], ecx
.text:0000118E                 mov     eax, [ebp+var_4]
.text:00001191                 mov     ecx, [eax+14h]
.text:00001194                 mov     edx, [ebp+var_4]
.text:00001197                 add     ecx, [edx+18h]
.text:0000119A                 mov     [ebp+var_8], ecx
.text:0000119D                 mov     eax, [ebp+var_8]
.text:000011A0                 push    eax
.text:000011A1                 mov     ecx, [ebp+var_4]
.text:000011A4                 mov     ecx, [ecx+1Ch]
.text:000011A7                 add     ecx, 58h ; 'X'
.text:000011AA                 call    ??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFileItem>::operator[](uint)
.text:000011AF                 mov     [ebp+var_C], eax
.text:000011B2                 mov     edx, [ebp+var_4]
.text:000011B5                 mov     byte ptr [edx+1], 0
.text:000011B9                 mov     eax, [ebp+var_4]
.text:000011BC                 mov     ecx, [eax+18h]
.text:000011BF                 add     ecx, 1
.text:000011C2                 mov     edx, [ebp+var_4]
.text:000011C5                 mov     [edx+18h], ecx
.text:000011C8                 mov     eax, [ebp+var_4]
.text:000011CB                 movzx   ecx, byte ptr [eax+2]
.text:000011CF                 test    ecx, ecx
.text:000011D1                 jz      short loc_11E4
.text:000011D3                 mov     edx, [ebp+var_4]
.text:000011D6                 mov     eax, [edx+4]
.text:000011D9                 xor     eax, 0FFFFFFFFh
.text:000011DC                 mov     ecx, [ebp+var_C]
.text:000011DF                 cmp     [ecx+0Ch], eax
.text:000011E2                 jnz     short loc_11E8
.text:000011E4
.text:000011E4 loc_11E4:                               ; CODE XREF: NArchive::N7z::CRepackStreamBase::CloseFile(void)+61j
.text:000011E4                 xor     eax, eax
.text:000011E6                 jmp     short loc_1237
.text:000011E8 ; ---------------------------------------------------------------------------
.text:000011E8
.text:000011E8 loc_11E8:                               ; CODE XREF: NArchive::N7z::CRepackStreamBase::CloseFile(void)+72j
.text:000011E8                 mov     ecx, [ebp+var_4]
.text:000011EB                 add     ecx, 24h ; '$'
.text:000011EE                 call    ??B?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QBEPAUIArchiveExtractCallbackMessage@@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::operator IArchiveExtractCallbackMessage *(void)
.text:000011F3                 test    eax, eax
.text:000011F5                 jz      short loc_1232
.text:000011F7                 mov     ecx, [ebp+var_4]
.text:000011FA                 add     ecx, 24h ; '$'
.text:000011FD                 call    ??C?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QBEPAUIArchiveExtractCallbackMessage@@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::operator->(void)
.text:00001202                 mov     [ebp+var_14], eax
.text:00001205                 mov     esi, esp
.text:00001207                 push    3
.text:00001209                 mov     edx, [ebp+var_8]
.text:0000120C                 push    edx
.text:0000120D                 push    1
.text:0000120F                 mov     eax, [ebp+var_14]
.text:00001212                 push    eax
.text:00001213                 mov     ecx, [ebp+var_14]
.text:00001216                 mov     edx, [ecx]
.text:00001218                 mov     eax, [edx+14h]
.text:0000121B                 call    eax
.text:0000121D                 cmp     esi, esp
.text:0000121F                 call    __RTC_CheckEsp
.text:00001224                 mov     [ebp+var_10], eax
.text:00001227                 cmp     [ebp+var_10], 0
.text:0000122B                 jz      short loc_1232
.text:0000122D                 mov     eax, [ebp+var_10]
.text:00001230                 jmp     short loc_1237
.text:00001232 ; ---------------------------------------------------------------------------
.text:00001232
.text:00001232 loc_1232:                               ; CODE XREF: NArchive::N7z::CRepackStreamBase::CloseFile(void)+85j
.text:00001232                                         ; NArchive::N7z::CRepackStreamBase::CloseFile(void)+BBj
.text:00001232                 mov     eax, 20000002h
.text:00001237
.text:00001237 loc_1237:                               ; CODE XREF: NArchive::N7z::CRepackStreamBase::CloseFile(void)+76j
.text:00001237                                         ; NArchive::N7z::CRepackStreamBase::CloseFile(void)+C0j
.text:00001237                 pop     esi
.text:00001238                 add     esp, 14h
.text:0000123B                 cmp     ebp, esp
.text:0000123D                 call    __RTC_CheckEsp
.text:00001242                 mov     esp, ebp
.text:00001244                 pop     ebp
.text:00001245                 retn
.text:00001245 ?CloseFile@CRepackStreamBase@N7z@NArchive@@IAEJXZ endp
.text:00001245
.text:00001245 ; ---------------------------------------------------------------------------
.text:00001246                 align 10h
.text:00001250
.text:00001250 ; =============== S U B R O U T I N E =======================================
.text:00001250
.text:00001250 ; Attributes: bp-based frame
.text:00001250
.text:00001250 ; __int32 __thiscall NArchive::N7z::CRepackStreamBase::ProcessEmptyFiles(NArchive::N7z::CRepackStreamBase *__hidden this)
.text:00001250                 public ?ProcessEmptyFiles@CRepackStreamBase@N7z@NArchive@@IAEJXZ
.text:00001250 ?ProcessEmptyFiles@CRepackStreamBase@N7z@NArchive@@IAEJXZ proc near
.text:00001250                                         ; CODE XREF: NArchive::N7z::CRepackStreamBase::Init(uint,CRecordVector<bool> const *)+34p
.text:00001250                                         ; NArchive::N7z::CFolderOutStream2::Write(void const *,uint,uint *)+15Ep ...
.text:00001250
.text:00001250 var_10          = dword ptr -10h
.text:00001250 var_C           = dword ptr -0Ch
.text:00001250 var_8           = dword ptr -8
.text:00001250 var_4           = dword ptr -4
.text:00001250
.text:00001250                 push    ebp
.text:00001251                 mov     ebp, esp
.text:00001253                 sub     esp, 10h
.text:00001256                 mov     eax, 0CCCCCCCCh
.text:0000125B                 mov     [ebp+var_10], eax
.text:0000125E                 mov     [ebp+var_C], eax
.text:00001261                 mov     [ebp+var_8], eax
.text:00001264                 mov     [ebp+var_4], eax
.text:00001267                 mov     [ebp+var_4], ecx
.text:0000126A
.text:0000126A loc_126A:                               ; CODE XREF: NArchive::N7z::CRepackStreamBase::ProcessEmptyFiles(void):loc_12D4j
.text:0000126A                 mov     eax, [ebp+var_4]
.text:0000126D                 mov     ecx, [eax+10h]
.text:00001270                 call    ?Size@?$CRecordVector@_N@@QBEIXZ ; CRecordVector<bool>::Size(void)
.text:00001275                 mov     ecx, [ebp+var_4]
.text:00001278                 cmp     [ecx+18h], eax
.text:0000127B                 jnb     short loc_12D6
.text:0000127D                 mov     edx, [ebp+var_4]
.text:00001280                 mov     eax, [edx+14h]
.text:00001283                 mov     ecx, [ebp+var_4]
.text:00001286                 add     eax, [ecx+18h]
.text:00001289                 push    eax
.text:0000128A                 mov     edx, [ebp+var_4]
.text:0000128D                 mov     ecx, [edx+1Ch]
.text:00001290                 add     ecx, 58h ; 'X'
.text:00001293                 call    ??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFileItem>::operator[](uint)
.text:00001298                 mov     [ebp+var_10], eax
.text:0000129B                 mov     eax, [ebp+var_10]
.text:0000129E                 mov     ecx, [ebp+var_10]
.text:000012A1                 mov     edx, [eax]
.text:000012A3                 or      edx, [ecx+4]
.text:000012A6                 jnz     short loc_12D6
.text:000012A8                 mov     ecx, [ebp+var_4] ; this
.text:000012AB                 call    ?OpenFile@CRepackStreamBase@N7z@NArchive@@IAEJXZ ; NArchive::N7z::CRepackStreamBase::OpenFile(void)
.text:000012B0                 mov     [ebp+var_8], eax
.text:000012B3                 cmp     [ebp+var_8], 0
.text:000012B7                 jz      short loc_12BE
.text:000012B9                 mov     eax, [ebp+var_8]
.text:000012BC                 jmp     short loc_12D8
.text:000012BE ; ---------------------------------------------------------------------------
.text:000012BE
.text:000012BE loc_12BE:                               ; CODE XREF: NArchive::N7z::CRepackStreamBase::ProcessEmptyFiles(void)+67j
.text:000012BE                 mov     ecx, [ebp+var_4] ; this
.text:000012C1                 call    ?CloseFile@CRepackStreamBase@N7z@NArchive@@IAEJXZ ; NArchive::N7z::CRepackStreamBase::CloseFile(void)
.text:000012C6                 mov     [ebp+var_C], eax
.text:000012C9                 cmp     [ebp+var_C], 0
.text:000012CD                 jz      short loc_12D4
.text:000012CF                 mov     eax, [ebp+var_C]
.text:000012D2                 jmp     short loc_12D8
.text:000012D4 ; ---------------------------------------------------------------------------
.text:000012D4
.text:000012D4 loc_12D4:                               ; CODE XREF: NArchive::N7z::CRepackStreamBase::ProcessEmptyFiles(void)+7Dj
.text:000012D4                 jmp     short loc_126A
.text:000012D6 ; ---------------------------------------------------------------------------
.text:000012D6
.text:000012D6 loc_12D6:                               ; CODE XREF: NArchive::N7z::CRepackStreamBase::ProcessEmptyFiles(void)+2Bj
.text:000012D6                                         ; NArchive::N7z::CRepackStreamBase::ProcessEmptyFiles(void)+56j
.text:000012D6                 xor     eax, eax
.text:000012D8
.text:000012D8 loc_12D8:                               ; CODE XREF: NArchive::N7z::CRepackStreamBase::ProcessEmptyFiles(void)+6Cj
.text:000012D8                                         ; NArchive::N7z::CRepackStreamBase::ProcessEmptyFiles(void)+82j
.text:000012D8                 add     esp, 10h
.text:000012DB                 cmp     ebp, esp
.text:000012DD                 call    __RTC_CheckEsp
.text:000012E2                 mov     esp, ebp
.text:000012E4                 pop     ebp
.text:000012E5                 retn
.text:000012E5 ?ProcessEmptyFiles@CRepackStreamBase@N7z@NArchive@@IAEJXZ endp
.text:000012E5
.text:000012E5 ; ---------------------------------------------------------------------------
.text:000012E6                 align 10h
.text:000012F0
.text:000012F0 ; =============== S U B R O U T I N E =======================================
.text:000012F0
.text:000012F0 ; Attributes: bp-based frame
.text:000012F0
.text:000012F0 ; __int32 __stdcall NArchive::N7z::CFolderOutStream2::Write(NArchive::N7z::CFolderOutStream2 *this, const void *, unsigned int, unsigned int *)
.text:000012F0                 public ?Write@CFolderOutStream2@N7z@NArchive@@UAGJPBXIPAI@Z
.text:000012F0 ?Write@CFolderOutStream2@N7z@NArchive@@UAGJPBXIPAI@Z proc near
.text:000012F0                                         ; DATA XREF: .rdata:00009A14o
.text:000012F0
.text:000012F0 var_3C          = dword ptr -3Ch
.text:000012F0 var_38          = dword ptr -38h
.text:000012F0 var_34          = dword ptr -34h
.text:000012F0 var_30          = dword ptr -30h
.text:000012F0 var_2C          = dword ptr -2Ch
.text:000012F0 var_28          = dword ptr -28h
.text:000012F0 var_24          = dword ptr -24h
.text:000012F0 var_20          = dword ptr -20h
.text:000012F0 var_1C          = dword ptr -1Ch
.text:000012F0 var_18          = dword ptr -18h
.text:000012F0 var_14          = dword ptr -14h
.text:000012F0 var_10          = dword ptr -10h
.text:000012F0 var_8           = dword ptr -8
.text:000012F0 this            = dword ptr  8
.text:000012F0 arg_4           = dword ptr  0Ch
.text:000012F0 arg_8           = dword ptr  10h
.text:000012F0 arg_C           = dword ptr  14h
.text:000012F0
.text:000012F0                 push    ebp
.text:000012F1                 mov     ebp, esp
.text:000012F3                 sub     esp, 3Ch
.text:000012F6                 push    esi
.text:000012F7                 push    edi
.text:000012F8                 lea     edi, [ebp+var_3C]
.text:000012FB                 mov     ecx, 0Fh
.text:00001300                 mov     eax, 0CCCCCCCCh
.text:00001305                 rep stosd
.text:00001307                 cmp     [ebp+arg_C], 0
.text:0000130B                 jz      short loc_1316
.text:0000130D                 mov     eax, [ebp+arg_C]
.text:00001310                 mov     dword ptr [eax], 0
.text:00001316
.text:00001316 loc_1316:                               ; CODE XREF: NArchive::N7z::CFolderOutStream2::Write(void const *,uint,uint *)+1Bj
.text:00001316                                         ; NArchive::N7z::CFolderOutStream2::Write(void const *,uint,uint *):loc_147Aj ...
.text:00001316                 cmp     [ebp+arg_8], 0
.text:0000131A                 jz      loc_14D0
.text:00001320                 mov     ecx, [ebp+this]
.text:00001323                 movzx   edx, byte ptr [ecx+9]
.text:00001327                 test    edx, edx
.text:00001329                 jz      loc_147F
.text:0000132F                 mov     eax, [ebp+arg_8]
.text:00001332                 xor     ecx, ecx
.text:00001334                 mov     edx, [ebp+this]
.text:00001337                 mov     [ebp+var_2C], eax
.text:0000133A                 mov     [ebp+var_28], ecx
.text:0000133D                 mov     [ebp+var_30], edx
.text:00001340                 mov     eax, [ebp+var_30]
.text:00001343                 mov     ecx, [ebp+var_28]
.text:00001346                 cmp     ecx, [eax+14h]
.text:00001349                 ja      short loc_1360
.text:0000134B                 jb      short loc_1358
.text:0000134D                 mov     edx, [ebp+var_30]
.text:00001350                 mov     eax, [ebp+var_2C]
.text:00001353                 cmp     eax, [edx+10h]
.text:00001356                 jnb     short loc_1360
.text:00001358
.text:00001358 loc_1358:                               ; CODE XREF: NArchive::N7z::CFolderOutStream2::Write(void const *,uint,uint *)+5Bj
.text:00001358                 mov     ecx, [ebp+arg_8]
.text:0000135B                 mov     [ebp+var_34], ecx
.text:0000135E                 jmp     short loc_1369
.text:00001360 ; ---------------------------------------------------------------------------
.text:00001360
.text:00001360 loc_1360:                               ; CODE XREF: NArchive::N7z::CFolderOutStream2::Write(void const *,uint,uint *)+59j
.text:00001360                                         ; NArchive::N7z::CFolderOutStream2::Write(void const *,uint,uint *)+66j
.text:00001360                 mov     edx, [ebp+this]
.text:00001363                 mov     eax, [edx+10h]
.text:00001366                 mov     [ebp+var_34], eax
.text:00001369
.text:00001369 loc_1369:                               ; CODE XREF: NArchive::N7z::CFolderOutStream2::Write(void const *,uint,uint *)+6Ej
.text:00001369                 mov     ecx, [ebp+var_34]
.text:0000136C                 mov     [ebp+var_8], ecx
.text:0000136F                 mov     [ebp+var_10], 0
.text:00001376                 mov     edx, [ebp+this]
.text:00001379                 movzx   eax, byte ptr [edx+8]
.text:0000137D                 test    eax, eax
.text:0000137F                 jz      short loc_13B5
.text:00001381                 mov     ecx, [ebp+this]
.text:00001384                 add     ecx, 34h ; '4'
.text:00001387                 call    ??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator->(void)
.text:0000138C                 mov     [ebp+var_38], eax
.text:0000138F                 mov     esi, esp
.text:00001391                 lea     ecx, [ebp+var_8]
.text:00001394                 push    ecx
.text:00001395                 mov     edx, [ebp+var_8]
.text:00001398                 push    edx
.text:00001399                 mov     eax, [ebp+arg_4]
.text:0000139C                 push    eax
.text:0000139D                 mov     ecx, [ebp+var_38]
.text:000013A0                 push    ecx
.text:000013A1                 mov     edx, [ebp+var_38]
.text:000013A4                 mov     eax, [edx]
.text:000013A6                 mov     ecx, [eax+0Ch]
.text:000013A9                 call    ecx
.text:000013AB                 cmp     esi, esp
.text:000013AD                 call    __RTC_CheckEsp
.text:000013B2                 mov     [ebp+var_10], eax
.text:000013B5
.text:000013B5 loc_13B5:                               ; CODE XREF: NArchive::N7z::CFolderOutStream2::Write(void const *,uint,uint *)+8Fj
.text:000013B5                 mov     edx, [ebp+this]
.text:000013B8                 movzx   eax, byte ptr [edx+0Ah]
.text:000013BC                 test    eax, eax
.text:000013BE                 jz      short loc_13D8
.text:000013C0                 mov     ecx, [ebp+var_8]
.text:000013C3                 push    ecx
.text:000013C4                 mov     edx, [ebp+arg_4]
.text:000013C7                 mov     eax, [ebp+this]
.text:000013CA                 mov     ecx, [eax+0Ch]
.text:000013CD                 call    @CrcUpdate@12   ; CrcUpdate(x,x,x)
.text:000013D2                 mov     ecx, [ebp+this]
.text:000013D5                 mov     [ecx+0Ch], eax
.text:000013D8
.text:000013D8 loc_13D8:                               ; CODE XREF: NArchive::N7z::CFolderOutStream2::Write(void const *,uint,uint *)+CEj
.text:000013D8                 cmp     [ebp+arg_C], 0
.text:000013DC                 jz      short loc_13EB
.text:000013DE                 mov     edx, [ebp+arg_C]
.text:000013E1                 mov     eax, [edx]
.text:000013E3                 add     eax, [ebp+var_8]
.text:000013E6                 mov     ecx, [ebp+arg_C]
.text:000013E9                 mov     [ecx], eax
.text:000013EB
.text:000013EB loc_13EB:                               ; CODE XREF: NArchive::N7z::CFolderOutStream2::Write(void const *,uint,uint *)+ECj
.text:000013EB                 mov     edx, [ebp+arg_4]
.text:000013EE                 add     edx, [ebp+var_8]
.text:000013F1                 mov     [ebp+arg_4], edx
.text:000013F4                 mov     eax, [ebp+arg_8]
.text:000013F7                 sub     eax, [ebp+var_8]
.text:000013FA                 mov     [ebp+arg_8], eax
.text:000013FD                 mov     ecx, [ebp+var_8]
.text:00001400                 xor     edx, edx
.text:00001402                 mov     eax, [ebp+this]
.text:00001405                 mov     esi, [eax+10h]
.text:00001408                 sub     esi, ecx
.text:0000140A                 mov     ecx, [eax+14h]
.text:0000140D                 sbb     ecx, edx
.text:0000140F                 mov     edx, [ebp+this]
.text:00001412                 mov     [edx+10h], esi
.text:00001415                 mov     [edx+14h], ecx
.text:00001418                 mov     eax, [ebp+this]
.text:0000141B                 mov     [ebp+var_3C], eax
.text:0000141E                 mov     ecx, [ebp+var_3C]
.text:00001421                 mov     edx, [ebp+var_3C]
.text:00001424                 mov     eax, [ecx+10h]
.text:00001427                 or      eax, [edx+14h]
.text:0000142A                 jnz     short loc_1461
.text:0000142C                 mov     ecx, [ebp+this]
.text:0000142F                 add     ecx, 8          ; this
.text:00001432                 call    ?CloseFile@CRepackStreamBase@N7z@NArchive@@IAEJXZ ; NArchive::N7z::CRepackStreamBase::CloseFile(void)
.text:00001437                 mov     [ebp+var_14], eax
.text:0000143A                 cmp     [ebp+var_14], 0
.text:0000143E                 jz      short loc_1448
.text:00001440                 mov     eax, [ebp+var_14]
.text:00001443                 jmp     loc_14D2
.text:00001448 ; ---------------------------------------------------------------------------
.text:00001448
.text:00001448 loc_1448:                               ; CODE XREF: NArchive::N7z::CFolderOutStream2::Write(void const *,uint,uint *)+14Ej
.text:00001448                 mov     ecx, [ebp+this]
.text:0000144B                 add     ecx, 8          ; this
.text:0000144E                 call    ?ProcessEmptyFiles@CRepackStreamBase@N7z@NArchive@@IAEJXZ ; NArchive::N7z::CRepackStreamBase::ProcessEmptyFiles(void)
.text:00001453                 mov     [ebp+var_18], eax
.text:00001456                 cmp     [ebp+var_18], 0
.text:0000145A                 jz      short loc_1461
.text:0000145C                 mov     eax, [ebp+var_18]
.text:0000145F                 jmp     short loc_14D2
.text:00001461 ; ---------------------------------------------------------------------------
.text:00001461
.text:00001461 loc_1461:                               ; CODE XREF: NArchive::N7z::CFolderOutStream2::Write(void const *,uint,uint *)+13Aj
.text:00001461                                         ; NArchive::N7z::CFolderOutStream2::Write(void const *,uint,uint *)+16Aj
.text:00001461                 mov     ecx, [ebp+var_10]
.text:00001464                 mov     [ebp+var_1C], ecx
.text:00001467                 cmp     [ebp+var_1C], 0
.text:0000146B                 jz      short loc_1472
.text:0000146D                 mov     eax, [ebp+var_1C]
.text:00001470                 jmp     short loc_14D2
.text:00001472 ; ---------------------------------------------------------------------------
.text:00001472
.text:00001472 loc_1472:                               ; CODE XREF: NArchive::N7z::CFolderOutStream2::Write(void const *,uint,uint *)+17Bj
.text:00001472                 cmp     [ebp+var_8], 0
.text:00001476                 jnz     short loc_147A
.text:00001478                 jmp     short loc_14D0
.text:0000147A ; ---------------------------------------------------------------------------
.text:0000147A
.text:0000147A loc_147A:                               ; CODE XREF: NArchive::N7z::CFolderOutStream2::Write(void const *,uint,uint *)+186j
.text:0000147A                 jmp     loc_1316
.text:0000147F ; ---------------------------------------------------------------------------
.text:0000147F
.text:0000147F loc_147F:                               ; CODE XREF: NArchive::N7z::CFolderOutStream2::Write(void const *,uint,uint *)+39j
.text:0000147F                 mov     ecx, [ebp+this]
.text:00001482                 add     ecx, 8          ; this
.text:00001485                 call    ?ProcessEmptyFiles@CRepackStreamBase@N7z@NArchive@@IAEJXZ ; NArchive::N7z::CRepackStreamBase::ProcessEmptyFiles(void)
.text:0000148A                 mov     [ebp+var_20], eax
.text:0000148D                 cmp     [ebp+var_20], 0
.text:00001491                 jz      short loc_1498
.text:00001493                 mov     eax, [ebp+var_20]
.text:00001496                 jmp     short loc_14D2
.text:00001498 ; ---------------------------------------------------------------------------
.text:00001498
.text:00001498 loc_1498:                               ; CODE XREF: NArchive::N7z::CFolderOutStream2::Write(void const *,uint,uint *)+1A1j
.text:00001498                 mov     edx, [ebp+this]
.text:0000149B                 mov     ecx, [edx+18h]
.text:0000149E                 call    ?Size@?$CRecordVector@_N@@QBEIXZ ; CRecordVector<bool>::Size(void)
.text:000014A3                 mov     ecx, [ebp+this]
.text:000014A6                 cmp     [ecx+20h], eax
.text:000014A9                 jnz     short loc_14B2
.text:000014AB                 mov     eax, 80004005h
.text:000014B0                 jmp     short loc_14D2
.text:000014B2 ; ---------------------------------------------------------------------------
.text:000014B2
.text:000014B2 loc_14B2:                               ; CODE XREF: NArchive::N7z::CFolderOutStream2::Write(void const *,uint,uint *)+1B9j
.text:000014B2                 mov     ecx, [ebp+this]
.text:000014B5                 add     ecx, 8          ; this
.text:000014B8                 call    ?OpenFile@CRepackStreamBase@N7z@NArchive@@IAEJXZ ; NArchive::N7z::CRepackStreamBase::OpenFile(void)
.text:000014BD                 mov     [ebp+var_24], eax
.text:000014C0                 cmp     [ebp+var_24], 0
.text:000014C4                 jz      short loc_14CB
.text:000014C6                 mov     eax, [ebp+var_24]
.text:000014C9                 jmp     short loc_14D2
.text:000014CB ; ---------------------------------------------------------------------------
.text:000014CB
.text:000014CB loc_14CB:                               ; CODE XREF: NArchive::N7z::CFolderOutStream2::Write(void const *,uint,uint *)+1D4j
.text:000014CB                 jmp     loc_1316
.text:000014D0 ; ---------------------------------------------------------------------------
.text:000014D0
.text:000014D0 loc_14D0:                               ; CODE XREF: NArchive::N7z::CFolderOutStream2::Write(void const *,uint,uint *)+2Aj
.text:000014D0                                         ; NArchive::N7z::CFolderOutStream2::Write(void const *,uint,uint *)+188j
.text:000014D0                 xor     eax, eax
.text:000014D2
.text:000014D2 loc_14D2:                               ; CODE XREF: NArchive::N7z::CFolderOutStream2::Write(void const *,uint,uint *)+153j
.text:000014D2                                         ; NArchive::N7z::CFolderOutStream2::Write(void const *,uint,uint *)+16Fj ...
.text:000014D2                 push    edx
.text:000014D3                 mov     ecx, ebp
.text:000014D5                 push    eax
.text:000014D6                 lea     edx, $LN24
.text:000014DC                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000014E1                 pop     eax
.text:000014E2                 pop     edx
.text:000014E3                 pop     edi
.text:000014E4                 pop     esi
.text:000014E5                 add     esp, 3Ch
.text:000014E8                 cmp     ebp, esp
.text:000014EA                 call    __RTC_CheckEsp
.text:000014EF                 mov     esp, ebp
.text:000014F1                 pop     ebp
.text:000014F2                 retn    10h
.text:000014F2 ?Write@CFolderOutStream2@N7z@NArchive@@UAGJPBXIPAI@Z endp
.text:000014F2
.text:000014F2 ; ---------------------------------------------------------------------------
.text:000014F5                 align 4
.text:000014F8 $LN24           dd 1                    ; DATA XREF: NArchive::N7z::CFolderOutStream2::Write(void const *,uint,uint *)+1E6o
.text:000014FC                 dd offset $LN23
.text:00001500 $LN23           dd 0FFFFFFF8h, 4        ; DATA XREF: .text:000014FCo
.text:00001508                 dd offset $LN22
.text:0000150C $LN22           dd 727563h              ; DATA XREF: .text:00001508o
.text:00001510
.text:00001510 ; =============== S U B R O U T I N E =======================================
.text:00001510
.text:00001510 ; Attributes: bp-based frame
.text:00001510
.text:00001510 ; __int32 __stdcall NArchive::N7z::CFolderInStream2::Read(NArchive::N7z::CFolderInStream2 *this, void *, unsigned int, unsigned int *)
.text:00001510                 public ?Read@CFolderInStream2@N7z@NArchive@@UAGJPAXIPAI@Z
.text:00001510 ?Read@CFolderInStream2@N7z@NArchive@@UAGJPAXIPAI@Z proc near
.text:00001510                                         ; DATA XREF: .rdata:00008C34o
.text:00001510
.text:00001510 var_40          = dword ptr -40h
.text:00001510 var_3C          = dword ptr -3Ch
.text:00001510 var_38          = dword ptr -38h
.text:00001510 var_34          = dword ptr -34h
.text:00001510 var_30          = dword ptr -30h
.text:00001510 var_2C          = dword ptr -2Ch
.text:00001510 var_28          = dword ptr -28h
.text:00001510 var_24          = dword ptr -24h
.text:00001510 var_20          = dword ptr -20h
.text:00001510 var_1C          = dword ptr -1Ch
.text:00001510 var_18          = dword ptr -18h
.text:00001510 var_14          = dword ptr -14h
.text:00001510 var_10          = dword ptr -10h
.text:00001510 var_8           = dword ptr -8
.text:00001510 this            = dword ptr  8
.text:00001510 arg_4           = dword ptr  0Ch
.text:00001510 arg_8           = dword ptr  10h
.text:00001510 arg_C           = dword ptr  14h
.text:00001510
.text:00001510                 push    ebp
.text:00001511                 mov     ebp, esp
.text:00001513                 sub     esp, 40h
.text:00001516                 push    esi
.text:00001517                 push    edi
.text:00001518                 lea     edi, [ebp+var_40]
.text:0000151B                 mov     ecx, 10h
.text:00001520                 mov     eax, 0CCCCCCCCh
.text:00001525                 rep stosd
.text:00001527                 cmp     [ebp+arg_C], 0
.text:0000152B                 jz      short loc_1536
.text:0000152D                 mov     eax, [ebp+arg_C]
.text:00001530                 mov     dword ptr [eax], 0
.text:00001536
.text:00001536 loc_1536:                               ; CODE XREF: NArchive::N7z::CFolderInStream2::Read(void *,uint,uint *)+1Bj
.text:00001536                                         ; NArchive::N7z::CFolderInStream2::Read(void *,uint,uint *):loc_16C8j ...
.text:00001536                 cmp     [ebp+arg_8], 0
.text:0000153A                 jz      loc_171B
.text:00001540                 mov     ecx, [ebp+this]
.text:00001543                 movzx   edx, byte ptr [ecx+9]
.text:00001547                 test    edx, edx
.text:00001549                 jz      loc_16CD
.text:0000154F                 mov     eax, [ebp+arg_8]
.text:00001552                 xor     ecx, ecx
.text:00001554                 mov     edx, [ebp+this]
.text:00001557                 mov     [ebp+var_30], eax
.text:0000155A                 mov     [ebp+var_2C], ecx
.text:0000155D                 mov     [ebp+var_34], edx
.text:00001560                 mov     eax, [ebp+var_34]
.text:00001563                 mov     ecx, [ebp+var_2C]
.text:00001566                 cmp     ecx, [eax+14h]
.text:00001569                 ja      short loc_1580
.text:0000156B                 jb      short loc_1578
.text:0000156D                 mov     edx, [ebp+var_34]
.text:00001570                 mov     eax, [ebp+var_30]
.text:00001573                 cmp     eax, [edx+10h]
.text:00001576                 jnb     short loc_1580
.text:00001578
.text:00001578 loc_1578:                               ; CODE XREF: NArchive::N7z::CFolderInStream2::Read(void *,uint,uint *)+5Bj
.text:00001578                 mov     ecx, [ebp+arg_8]
.text:0000157B                 mov     [ebp+var_38], ecx
.text:0000157E                 jmp     short loc_1589
.text:00001580 ; ---------------------------------------------------------------------------
.text:00001580
.text:00001580 loc_1580:                               ; CODE XREF: NArchive::N7z::CFolderInStream2::Read(void *,uint,uint *)+59j
.text:00001580                                         ; NArchive::N7z::CFolderInStream2::Read(void *,uint,uint *)+66j
.text:00001580                 mov     edx, [ebp+this]
.text:00001583                 mov     eax, [edx+10h]
.text:00001586                 mov     [ebp+var_38], eax
.text:00001589
.text:00001589 loc_1589:                               ; CODE XREF: NArchive::N7z::CFolderInStream2::Read(void *,uint,uint *)+6Ej
.text:00001589                 mov     ecx, [ebp+var_38]
.text:0000158C                 mov     [ebp+var_8], ecx
.text:0000158F                 mov     edx, [ebp+this]
.text:00001592                 movzx   eax, byte ptr [edx+8]
.text:00001596                 test    eax, eax
.text:00001598                 jz      short loc_15A2
.text:0000159A                 mov     ecx, [ebp+arg_4]
.text:0000159D                 mov     [ebp+var_10], ecx
.text:000015A0                 jmp     short loc_15BB
.text:000015A2 ; ---------------------------------------------------------------------------
.text:000015A2
.text:000015A2 loc_15A2:                               ; CODE XREF: NArchive::N7z::CFolderInStream2::Read(void *,uint,uint *)+88j
.text:000015A2                 mov     edx, [ebp+this]
.text:000015A5                 mov     eax, [edx+34h]
.text:000015A8                 mov     [ebp+var_10], eax
.text:000015AB                 cmp     [ebp+var_8], 10000h
.text:000015B2                 jbe     short loc_15BB
.text:000015B4                 mov     [ebp+var_8], 10000h
.text:000015BB
.text:000015BB loc_15BB:                               ; CODE XREF: NArchive::N7z::CFolderInStream2::Read(void *,uint,uint *)+90j
.text:000015BB                                         ; NArchive::N7z::CFolderInStream2::Read(void *,uint,uint *)+A2j
.text:000015BB                 mov     ecx, [ebp+this]
.text:000015BE                 add     ecx, 38h ; '8'
.text:000015C1                 call    ??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator->(void)
.text:000015C6                 mov     [ebp+var_3C], eax
.text:000015C9                 mov     esi, esp
.text:000015CB                 lea     ecx, [ebp+var_8]
.text:000015CE                 push    ecx
.text:000015CF                 mov     edx, [ebp+var_8]
.text:000015D2                 push    edx
.text:000015D3                 mov     eax, [ebp+var_10]
.text:000015D6                 push    eax
.text:000015D7                 mov     ecx, [ebp+var_3C]
.text:000015DA                 push    ecx
.text:000015DB                 mov     edx, [ebp+var_3C]
.text:000015DE                 mov     eax, [edx]
.text:000015E0                 mov     ecx, [eax+0Ch]
.text:000015E3                 call    ecx
.text:000015E5                 cmp     esi, esp
.text:000015E7                 call    __RTC_CheckEsp
.text:000015EC                 mov     [ebp+var_14], eax
.text:000015EF                 mov     edx, [ebp+var_8]
.text:000015F2                 push    edx
.text:000015F3                 mov     edx, [ebp+var_10]
.text:000015F6                 mov     eax, [ebp+this]
.text:000015F9                 mov     ecx, [eax+0Ch]
.text:000015FC                 call    @CrcUpdate@12   ; CrcUpdate(x,x,x)
.text:00001601                 mov     ecx, [ebp+this]
.text:00001604                 mov     [ecx+0Ch], eax
.text:00001607                 mov     edx, [ebp+var_8]
.text:0000160A                 xor     eax, eax
.text:0000160C                 mov     ecx, [ebp+this]
.text:0000160F                 mov     esi, [ecx+10h]
.text:00001612                 sub     esi, edx
.text:00001614                 mov     edx, [ecx+14h]
.text:00001617                 sbb     edx, eax
.text:00001619                 mov     eax, [ebp+this]
.text:0000161C                 mov     [eax+10h], esi
.text:0000161F                 mov     [eax+14h], edx
.text:00001622                 mov     ecx, [ebp+this]
.text:00001625                 movzx   edx, byte ptr [ecx+8]
.text:00001629                 test    edx, edx
.text:0000162B                 jz      short loc_1652
.text:0000162D                 mov     eax, [ebp+arg_4]
.text:00001630                 add     eax, [ebp+var_8]
.text:00001633                 mov     [ebp+arg_4], eax
.text:00001636                 mov     ecx, [ebp+arg_8]
.text:00001639                 sub     ecx, [ebp+var_8]
.text:0000163C                 mov     [ebp+arg_8], ecx
.text:0000163F                 cmp     [ebp+arg_C], 0
.text:00001643                 jz      short loc_1652
.text:00001645                 mov     edx, [ebp+arg_C]
.text:00001648                 mov     eax, [edx]
.text:0000164A                 add     eax, [ebp+var_8]
.text:0000164D                 mov     ecx, [ebp+arg_C]
.text:00001650                 mov     [ecx], eax
.text:00001652
.text:00001652 loc_1652:                               ; CODE XREF: NArchive::N7z::CFolderInStream2::Read(void *,uint,uint *)+11Bj
.text:00001652                                         ; NArchive::N7z::CFolderInStream2::Read(void *,uint,uint *)+133j
.text:00001652                 cmp     [ebp+var_14], 0
.text:00001656                 jz      short loc_1661
.text:00001658                 mov     edx, [ebp+this]
.text:0000165B                 mov     eax, [ebp+var_14]
.text:0000165E                 mov     [edx+3Ch], eax
.text:00001661
.text:00001661 loc_1661:                               ; CODE XREF: NArchive::N7z::CFolderInStream2::Read(void *,uint,uint *)+146j
.text:00001661                 mov     ecx, [ebp+this]
.text:00001664                 mov     [ebp+var_40], ecx
.text:00001667                 mov     edx, [ebp+var_40]
.text:0000166A                 mov     eax, [ebp+var_40]
.text:0000166D                 mov     ecx, [edx+10h]
.text:00001670                 or      ecx, [eax+14h]
.text:00001673                 jnz     short loc_16AA
.text:00001675                 mov     ecx, [ebp+this]
.text:00001678                 add     ecx, 8          ; this
.text:0000167B                 call    ?CloseFile@CRepackStreamBase@N7z@NArchive@@IAEJXZ ; NArchive::N7z::CRepackStreamBase::CloseFile(void)
.text:00001680                 mov     [ebp+var_18], eax
.text:00001683                 cmp     [ebp+var_18], 0
.text:00001687                 jz      short loc_1691
.text:00001689                 mov     eax, [ebp+var_18]
.text:0000168C                 jmp     loc_171D
.text:00001691 ; ---------------------------------------------------------------------------
.text:00001691
.text:00001691 loc_1691:                               ; CODE XREF: NArchive::N7z::CFolderInStream2::Read(void *,uint,uint *)+177j
.text:00001691                 mov     ecx, [ebp+this]
.text:00001694                 add     ecx, 8          ; this
.text:00001697                 call    ?ProcessEmptyFiles@CRepackStreamBase@N7z@NArchive@@IAEJXZ ; NArchive::N7z::CRepackStreamBase::ProcessEmptyFiles(void)
.text:0000169C                 mov     [ebp+var_1C], eax
.text:0000169F                 cmp     [ebp+var_1C], 0
.text:000016A3                 jz      short loc_16AA
.text:000016A5                 mov     eax, [ebp+var_1C]
.text:000016A8                 jmp     short loc_171D
.text:000016AA ; ---------------------------------------------------------------------------
.text:000016AA
.text:000016AA loc_16AA:                               ; CODE XREF: NArchive::N7z::CFolderInStream2::Read(void *,uint,uint *)+163j
.text:000016AA                                         ; NArchive::N7z::CFolderInStream2::Read(void *,uint,uint *)+193j
.text:000016AA                 mov     edx, [ebp+var_14]
.text:000016AD                 mov     [ebp+var_20], edx
.text:000016B0                 cmp     [ebp+var_20], 0
.text:000016B4                 jz      short loc_16BB
.text:000016B6                 mov     eax, [ebp+var_20]
.text:000016B9                 jmp     short loc_171D
.text:000016BB ; ---------------------------------------------------------------------------
.text:000016BB
.text:000016BB loc_16BB:                               ; CODE XREF: NArchive::N7z::CFolderInStream2::Read(void *,uint,uint *)+1A4j
.text:000016BB                 cmp     [ebp+var_8], 0
.text:000016BF                 jnz     short loc_16C8
.text:000016C1                 mov     eax, 80004005h
.text:000016C6                 jmp     short loc_171D
.text:000016C8 ; ---------------------------------------------------------------------------
.text:000016C8
.text:000016C8 loc_16C8:                               ; CODE XREF: NArchive::N7z::CFolderInStream2::Read(void *,uint,uint *)+1AFj
.text:000016C8                 jmp     loc_1536
.text:000016CD ; ---------------------------------------------------------------------------
.text:000016CD
.text:000016CD loc_16CD:                               ; CODE XREF: NArchive::N7z::CFolderInStream2::Read(void *,uint,uint *)+39j
.text:000016CD                 mov     ecx, [ebp+this]
.text:000016D0                 add     ecx, 8          ; this
.text:000016D3                 call    ?ProcessEmptyFiles@CRepackStreamBase@N7z@NArchive@@IAEJXZ ; NArchive::N7z::CRepackStreamBase::ProcessEmptyFiles(void)
.text:000016D8                 mov     [ebp+var_24], eax
.text:000016DB                 cmp     [ebp+var_24], 0
.text:000016DF                 jz      short loc_16E6
.text:000016E1                 mov     eax, [ebp+var_24]
.text:000016E4                 jmp     short loc_171D
.text:000016E6 ; ---------------------------------------------------------------------------
.text:000016E6
.text:000016E6 loc_16E6:                               ; CODE XREF: NArchive::N7z::CFolderInStream2::Read(void *,uint,uint *)+1CFj
.text:000016E6                 mov     eax, [ebp+this]
.text:000016E9                 mov     ecx, [eax+18h]
.text:000016EC                 call    ?Size@?$CRecordVector@_N@@QBEIXZ ; CRecordVector<bool>::Size(void)
.text:000016F1                 mov     ecx, [ebp+this]
.text:000016F4                 cmp     [ecx+20h], eax
.text:000016F7                 jnz     short loc_16FD
.text:000016F9                 xor     eax, eax
.text:000016FB                 jmp     short loc_171D
.text:000016FD ; ---------------------------------------------------------------------------
.text:000016FD
.text:000016FD loc_16FD:                               ; CODE XREF: NArchive::N7z::CFolderInStream2::Read(void *,uint,uint *)+1E7j
.text:000016FD                 mov     ecx, [ebp+this]
.text:00001700                 add     ecx, 8          ; this
.text:00001703                 call    ?OpenFile@CRepackStreamBase@N7z@NArchive@@IAEJXZ ; NArchive::N7z::CRepackStreamBase::OpenFile(void)
.text:00001708                 mov     [ebp+var_28], eax
.text:0000170B                 cmp     [ebp+var_28], 0
.text:0000170F                 jz      short loc_1716
.text:00001711                 mov     eax, [ebp+var_28]
.text:00001714                 jmp     short loc_171D
.text:00001716 ; ---------------------------------------------------------------------------
.text:00001716
.text:00001716 loc_1716:                               ; CODE XREF: NArchive::N7z::CFolderInStream2::Read(void *,uint,uint *)+1FFj
.text:00001716                 jmp     loc_1536
.text:0000171B ; ---------------------------------------------------------------------------
.text:0000171B
.text:0000171B loc_171B:                               ; CODE XREF: NArchive::N7z::CFolderInStream2::Read(void *,uint,uint *)+2Aj
.text:0000171B                 xor     eax, eax
.text:0000171D
.text:0000171D loc_171D:                               ; CODE XREF: NArchive::N7z::CFolderInStream2::Read(void *,uint,uint *)+17Cj
.text:0000171D                                         ; NArchive::N7z::CFolderInStream2::Read(void *,uint,uint *)+198j ...
.text:0000171D                 push    edx
.text:0000171E                 mov     ecx, ebp
.text:00001720                 push    eax
.text:00001721                 lea     edx, $LN27_0
.text:00001727                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000172C                 pop     eax
.text:0000172D                 pop     edx
.text:0000172E                 pop     edi
.text:0000172F                 pop     esi
.text:00001730                 add     esp, 40h
.text:00001733                 cmp     ebp, esp
.text:00001735                 call    __RTC_CheckEsp
.text:0000173A                 mov     esp, ebp
.text:0000173C                 pop     ebp
.text:0000173D                 retn    10h
.text:0000173D ?Read@CFolderInStream2@N7z@NArchive@@UAGJPAXIPAI@Z endp
.text:0000173D
.text:0000173D ; ---------------------------------------------------------------------------
.text:00001740 $LN27_0         dd 1                    ; DATA XREF: NArchive::N7z::CFolderInStream2::Read(void *,uint,uint *)+211o
.text:00001744                 dd offset $LN26_0
.text:00001748 $LN26_0         dd 0FFFFFFF8h, 4        ; DATA XREF: .text:00001744o
.text:00001750                 dd offset $LN25_0
.text:00001754 $LN25_0         dd 727563h, 2 dup(0CCCCCCCCh) ; DATA XREF: .text:00001750o
.text:00001760
.text:00001760 ; =============== S U B R O U T I N E =======================================
.text:00001760
.text:00001760 ; Attributes: bp-based frame
.text:00001760
.text:00001760 ; void __thiscall NArchive::N7z::CThreadDecoder::Execute(NArchive::N7z::CThreadDecoder *__hidden this)
.text:00001760                 public ?Execute@CThreadDecoder@N7z@NArchive@@UAEXXZ
.text:00001760 ?Execute@CThreadDecoder@N7z@NArchive@@UAEXXZ proc near
.text:00001760                                         ; DATA XREF: .rdata:const NArchive::N7z::CThreadDecoder::`vftable'o
.text:00001760
.text:00001760 var_54          = dword ptr -54h
.text:00001760 var_50          = dword ptr -50h
.text:00001760 var_4C          = dword ptr -4Ch
.text:00001760 var_48          = dword ptr -48h
.text:00001760 var_44          = dword ptr -44h
.text:00001760 var_3C          = byte ptr -3Ch
.text:00001760 var_25          = byte ptr -25h
.text:00001760 var_19          = byte ptr -19h
.text:00001760 var_14          = dword ptr -14h
.text:00001760 var_10          = dword ptr -10h
.text:00001760 var_C           = dword ptr -0Ch
.text:00001760 var_4           = dword ptr -4
.text:00001760
.text:00001760 ; FUNCTION CHUNK AT .text:00001882 SIZE 00000045 BYTES
.text:00001760
.text:00001760                 push    ebp
.text:00001761                 mov     ebp, esp
.text:00001763                 push    0FFFFFFFFh
.text:00001765                 push    offset __ehhandler$?Execute@CThreadDecoder@N7z@NArchive@@UAEXXZ
.text:0000176A                 mov     eax, large fs:0
.text:00001770                 push    eax
.text:00001771                 push    ecx
.text:00001772                 sub     esp, 44h
.text:00001775                 push    ebx
.text:00001776                 push    esi
.text:00001777                 push    edi
.text:00001778                 push    ecx
.text:00001779                 lea     edi, [ebp+var_54]
.text:0000177C                 mov     ecx, 11h
.text:00001781                 mov     eax, 0CCCCCCCCh
.text:00001786                 rep stosd
.text:00001788                 pop     ecx
.text:00001789                 mov     eax, dword ptr ds:___security_cookie
.text:0000178E                 xor     eax, ebp
.text:00001790                 push    eax
.text:00001791                 lea     eax, [ebp+var_C]
.text:00001794                 mov     large fs:0, eax
.text:0000179A                 mov     [ebp+var_10], esp
.text:0000179D                 mov     [ebp+var_14], ecx
.text:000017A0                 mov     [ebp+var_4], 0
.text:000017A7                 mov     [ebp+var_19], 0
.text:000017AB                 mov     [ebp+var_25], 0
.text:000017AF                 lea     ecx, [ebp+var_3C]
.text:000017B2                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:000017B7                 mov     [ebp+var_44], eax
.text:000017BA                 mov     byte ptr [ebp+var_4], 1
.text:000017BE                 mov     ecx, [ebp+var_14]
.text:000017C1                 add     ecx, 98h ; 'ÿ'
.text:000017C7                 call    ??B?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ ; CMyComPtr<ICryptoGetTextPassword>::operator ICryptoGetTextPassword *(void)
.text:000017CC                 mov     [ebp+var_48], eax
.text:000017CF                 mov     ecx, [ebp+var_14]
.text:000017D2                 add     ecx, 84h ; 'ä'
.text:000017D8                 call    ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *(void)
.text:000017DD                 mov     [ebp+var_4C], eax
.text:000017E0                 mov     ecx, [ebp+var_14]
.text:000017E3                 add     ecx, 7Ch ; '|'
.text:000017E6                 call    ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *(void)
.text:000017EB                 mov     [ebp+var_50], eax
.text:000017EE                 mov     eax, [ebp+var_14]
.text:000017F1                 mov     ecx, [eax+0A0h]
.text:000017F7                 push    ecx             ; unsigned int
.text:000017F8                 mov     edx, [ebp+var_14]
.text:000017FB                 movzx   eax, byte ptr [edx+9Ch]
.text:00001802                 push    eax             ; bool
.text:00001803                 lea     ecx, [ebp+var_3C]
.text:00001806                 push    ecx             ; struct UString *
.text:00001807                 lea     edx, [ebp+var_25]
.text:0000180A                 push    edx             ; bool *
.text:0000180B                 lea     eax, [ebp+var_19]
.text:0000180E                 push    eax             ; bool *
.text:0000180F                 mov     ecx, [ebp+var_48]
.text:00001812                 push    ecx             ; struct ICryptoGetTextPassword *
.text:00001813                 push    0               ; struct ISequentialInStream **
.text:00001815                 push    0               ; struct ICompressProgressInfo *
.text:00001817                 mov     edx, [ebp+var_4C]
.text:0000181A                 push    edx             ; struct ISequentialOutStream *
.text:0000181B                 push    0               ; unsigned __int64 *
.text:0000181D                 mov     eax, [ebp+var_14]
.text:00001820                 mov     ecx, [eax+94h]
.text:00001826                 push    ecx             ; unsigned int
.text:00001827                 mov     edx, [ebp+var_14]
.text:0000182A                 mov     eax, [edx+90h]
.text:00001830                 push    eax             ; struct NArchive::N7z::CFolders *
.text:00001831                 mov     ecx, [ebp+var_14]
.text:00001834                 mov     edx, [ecx+8Ch]
.text:0000183A                 push    edx
.text:0000183B                 mov     eax, [ecx+88h]
.text:00001841                 push    eax             ; unsigned __int64
.text:00001842                 mov     ecx, [ebp+var_50]
.text:00001845                 push    ecx             ; struct IInStream *
.text:00001846                 mov     ecx, [ebp+var_14]
.text:00001849                 add     ecx, 14h        ; this
.text:0000184C                 call    ?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z ; NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)
.text:00001851                 mov     [ebp+var_54], eax
.text:00001854                 mov     edx, [ebp+var_14]
.text:00001857                 mov     eax, [ebp+var_54]
.text:0000185A                 mov     [edx+78h], eax
.text:0000185D                 mov     byte ptr [ebp+var_4], 0
.text:00001861                 lea     ecx, [ebp+var_3C] ; this
.text:00001864                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001869                 jmp     short loc_1882
.text:00001869 ?Execute@CThreadDecoder@N7z@NArchive@@UAEXXZ endp
.text:00001869
.text:0000186B
.text:0000186B ; =============== S U B R O U T I N E =======================================
.text:0000186B
.text:0000186B
.text:0000186B __catch$?Execute@CThreadDecoder@N7z@NArchive@@UAEXXZ$0 proc near
.text:0000186B                                         ; DATA XREF: .xdata$x:0000707Co
.text:0000186B                 mov     ecx, [ebp-14h]
.text:0000186E                 mov     dword ptr [ecx+78h], 80004005h
.text:00001875                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:0000187C                 mov     eax, offset __tryend$?Execute@CThreadDecoder@N7z@NArchive@@UAEXXZ$1
.text:00001881                 retn
.text:00001881 __catch$?Execute@CThreadDecoder@N7z@NArchive@@UAEXXZ$0 endp
.text:00001881
.text:00001882 ; ---------------------------------------------------------------------------
.text:00001882 ; START OF FUNCTION CHUNK FOR ?Execute@CThreadDecoder@N7z@NArchive@@UAEXXZ
.text:00001882
.text:00001882 loc_1882:                               ; CODE XREF: NArchive::N7z::CThreadDecoder::Execute(void)+109j
.text:00001882                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001889
.text:00001889 __tryend$?Execute@CThreadDecoder@N7z@NArchive@@UAEXXZ$1:
.text:00001889                                         ; DATA XREF: __catch$?Execute@CThreadDecoder@N7z@NArchive@@UAEXXZ$0+11o
.text:00001889                 mov     edx, [ebp+var_14]
.text:0000188C                 mov     ecx, [edx+80h]
.text:00001892                 add     ecx, 34h ; '4'
.text:00001895                 call    ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release(void)
.text:0000189A                 push    edx
.text:0000189B                 mov     ecx, ebp
.text:0000189D                 push    eax
.text:0000189E                 lea     edx, $LN15
.text:000018A4                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000018A9                 pop     eax
.text:000018AA                 pop     edx
.text:000018AB                 mov     ecx, [ebp+var_C]
.text:000018AE                 mov     large fs:0, ecx
.text:000018B5                 pop     ecx
.text:000018B6                 pop     edi
.text:000018B7                 pop     esi
.text:000018B8                 pop     ebx
.text:000018B9                 add     esp, 54h
.text:000018BC                 cmp     ebp, esp
.text:000018BE                 call    __RTC_CheckEsp
.text:000018C3                 mov     esp, ebp
.text:000018C5                 pop     ebp
.text:000018C6                 retn
.text:000018C6 ; END OF FUNCTION CHUNK FOR ?Execute@CThreadDecoder@N7z@NArchive@@UAEXXZ
.text:000018C6 ; ---------------------------------------------------------------------------
.text:000018C7                 align 4
.text:000018C8 $LN15           dd 3                    ; DATA XREF: NArchive::N7z::CThreadDecoder::Execute(void)+13Eo
.text:000018CC                 dd offset $LN14
.text:000018D0 $LN14           dd 0FFFFFFE7h, 1        ; DATA XREF: .text:000018CCo
.text:000018D8                 dd offset $LN10         ; "isEncrypted"
.text:000018DC                 dd 0FFFFFFDBh, 1
.text:000018E4                 dd offset $LN11         ; "passwordIsDefined"
.text:000018E8                 dd 0FFFFFFC4h, 0Ch
.text:000018F0                 dd offset $LN12         ; "password"
.text:000018F4 $LN12           db 'password',0         ; DATA XREF: .text:000018F0o
.text:000018FD $LN11           db 'passwordIsDefined',0 ; DATA XREF: .text:000018E4o
.text:0000190F $LN10           db 'isEncrypted',0      ; DATA XREF: .text:000018D8o
.text:0000191B                 align 10h
.text:00001920
.text:00001920 ; =============== S U B R O U T I N E =======================================
.text:00001920
.text:00001920 ; Attributes: bp-based frame
.text:00001920
.text:00001920 ; __int32 __stdcall NArchive::N7z::CCryptoGetTextPassword::CryptoGetTextPassword(NArchive::N7z::CCryptoGetTextPassword *this, wchar_t **)
.text:00001920                 public ?CryptoGetTextPassword@CCryptoGetTextPassword@N7z@NArchive@@UAGJPAPA_W@Z
.text:00001920 ?CryptoGetTextPassword@CCryptoGetTextPassword@N7z@NArchive@@UAGJPAPA_W@Z proc near
.text:00001920                                         ; DATA XREF: .rdata:0000A410o
.text:00001920
.text:00001920 this            = dword ptr  8
.text:00001920 arg_4           = dword ptr  0Ch
.text:00001920
.text:00001920                 push    ebp
.text:00001921                 mov     ebp, esp
.text:00001923                 mov     eax, [ebp+arg_4]
.text:00001926                 push    eax             ; wchar_t **
.text:00001927                 mov     ecx, [ebp+this]
.text:0000192A                 add     ecx, 8
.text:0000192D                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00001932                 push    eax             ; psz
.text:00001933                 call    ?StringToBstr@@YGJPB_WPAPA_W@Z ; StringToBstr(wchar_t const *,wchar_t * *)
.text:00001938                 cmp     ebp, esp
.text:0000193A                 call    __RTC_CheckEsp
.text:0000193F                 pop     ebp
.text:00001940                 retn    8
.text:00001940 ?CryptoGetTextPassword@CCryptoGetTextPassword@N7z@NArchive@@UAGJPAPA_W@Z endp
.text:00001940
.text:00001940 ; ---------------------------------------------------------------------------
.text:00001943                 align 10h
.text:00001950
.text:00001950 ; =============== S U B R O U T I N E =======================================
.text:00001950
.text:00001950 ; Attributes: bp-based frame
.text:00001950
.text:00001950 ; int __stdcall NArchive::N7z::Update(struct IInStream *, struct NArchive::N7z::CFolders *, int, NArchive::N7z::COutArchive *, NArchive::N7z::CArchiveDatabaseOut *, struct ISequentialOutStream *, struct IArchiveUpdateCallback *, int, int)
.text:00001950                 public ?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z
.text:00001950 ?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z proc near
.text:00001950
.text:00001950 var_7CC         = dword ptr -7CCh
.text:00001950 var_7C8         = dword ptr -7C8h
.text:00001950 var_7C4         = dword ptr -7C4h
.text:00001950 var_7C0         = dword ptr -7C0h
.text:00001950 var_7BC         = dword ptr -7BCh
.text:00001950 var_7B8         = dword ptr -7B8h
.text:00001950 var_7B4         = dword ptr -7B4h
.text:00001950 var_7B0         = dword ptr -7B0h
.text:00001950 var_7AC         = dword ptr -7ACh
.text:00001950 var_7A8         = dword ptr -7A8h
.text:00001950 var_7A4         = dword ptr -7A4h
.text:00001950 var_7A0         = dword ptr -7A0h
.text:00001950 var_79C         = dword ptr -79Ch
.text:00001950 var_798         = dword ptr -798h
.text:00001950 var_794         = dword ptr -794h
.text:00001950 var_790         = dword ptr -790h
.text:00001950 var_789         = byte ptr -789h
.text:00001950 var_788         = dword ptr -788h
.text:00001950 var_784         = dword ptr -784h
.text:00001950 var_780         = dword ptr -780h
.text:00001950 var_77C         = dword ptr -77Ch
.text:00001950 var_778         = dword ptr -778h
.text:00001950 var_774         = dword ptr -774h
.text:00001950 var_770         = dword ptr -770h
.text:00001950 var_76C         = dword ptr -76Ch
.text:00001950 var_768         = dword ptr -768h
.text:00001950 var_764         = dword ptr -764h
.text:00001950 var_760         = dword ptr -760h
.text:00001950 var_75C         = dword ptr -75Ch
.text:00001950 var_758         = dword ptr -758h
.text:00001950 var_754         = dword ptr -754h
.text:00001950 var_750         = dword ptr -750h
.text:00001950 var_74C         = byte ptr -74Ch
.text:00001950 var_738         = dword ptr -738h
.text:00001950 var_734         = dword ptr -734h
.text:00001950 var_730         = dword ptr -730h
.text:00001950 var_72C         = dword ptr -72Ch
.text:00001950 var_728         = dword ptr -728h
.text:00001950 var_724         = dword ptr -724h
.text:00001950 var_720         = dword ptr -720h
.text:00001950 var_71C         = dword ptr -71Ch
.text:00001950 var_718         = dword ptr -718h
.text:00001950 var_714         = dword ptr -714h
.text:00001950 var_710         = dword ptr -710h
.text:00001950 var_70C         = dword ptr -70Ch
.text:00001950 var_708         = dword ptr -708h
.text:00001950 var_704         = dword ptr -704h
.text:00001950 var_700         = dword ptr -700h
.text:00001950 var_6FC         = dword ptr -6FCh
.text:00001950 var_6F8         = dword ptr -6F8h
.text:00001950 var_6F4         = dword ptr -6F4h
.text:00001950 var_6F0         = dword ptr -6F0h
.text:00001950 var_6EC         = dword ptr -6ECh
.text:00001950 var_6E8         = dword ptr -6E8h
.text:00001950 var_6E4         = dword ptr -6E4h
.text:00001950 var_6E0         = dword ptr -6E0h
.text:00001950 var_6DC         = dword ptr -6DCh
.text:00001950 var_6D8         = dword ptr -6D8h
.text:00001950 var_6D4         = dword ptr -6D4h
.text:00001950 var_6D0         = dword ptr -6D0h
.text:00001950 var_6CC         = dword ptr -6CCh
.text:00001950 var_6C8         = dword ptr -6C8h
.text:00001950 var_6C4         = dword ptr -6C4h
.text:00001950 var_6C0         = dword ptr -6C0h
.text:00001950 var_6BC         = dword ptr -6BCh
.text:00001950 var_6B8         = dword ptr -6B8h
.text:00001950 var_6B4         = dword ptr -6B4h
.text:00001950 var_6B0         = dword ptr -6B0h
.text:00001950 var_6AC         = dword ptr -6ACh
.text:00001950 var_6A8         = dword ptr -6A8h
.text:00001950 var_6A4         = dword ptr -6A4h
.text:00001950 var_69C         = byte ptr -69Ch
.text:00001950 var_688         = qword ptr -688h
.text:00001950 var_664         = byte ptr -664h
.text:00001950 var_658         = dword ptr -658h
.text:00001950 var_654         = dword ptr -654h
.text:00001950 var_64C         = dword ptr -64Ch
.text:00001950 var_648         = byte ptr -648h
.text:00001950 var_647         = byte ptr -647h
.text:00001950 var_646         = byte ptr -646h
.text:00001950 var_63C         = dword ptr -63Ch
.text:00001950 var_638         = dword ptr -638h
.text:00001950 var_634         = dword ptr -634h
.text:00001950 var_630         = dword ptr -630h
.text:00001950 var_62C         = dword ptr -62Ch
.text:00001950 var_628         = dword ptr -628h
.text:00001950 var_620         = dword ptr -620h
.text:00001950 var_61C         = dword ptr -61Ch
.text:00001950 var_614         = dword ptr -614h
.text:00001950 var_60C         = byte ptr -60Ch
.text:00001950 var_604         = dword ptr -604h
.text:00001950 var_600         = dword ptr -600h
.text:00001950 var_5FC         = dword ptr -5FCh
.text:00001950 var_5F8         = dword ptr -5F8h
.text:00001950 var_5F4         = dword ptr -5F4h
.text:00001950 var_5F0         = dword ptr -5F0h
.text:00001950 var_5EC         = dword ptr -5ECh
.text:00001950 var_5E8         = dword ptr -5E8h
.text:00001950 var_5E4         = dword ptr -5E4h
.text:00001950 var_5E0         = dword ptr -5E0h
.text:00001950 var_5DC         = dword ptr -5DCh
.text:00001950 var_5D4         = byte ptr -5D4h
.text:00001950 var_5C5         = byte ptr -5C5h
.text:00001950 var_5BD         = byte ptr -5BDh
.text:00001950 var_5B8         = byte ptr -5B8h
.text:00001950 var_5A8         = dword ptr -5A8h
.text:00001950 var_5A0         = dword ptr -5A0h
.text:00001950 var_59C         = dword ptr -59Ch
.text:00001950 var_598         = dword ptr -598h
.text:00001950 var_594         = dword ptr -594h
.text:00001950 var_590         = dword ptr -590h
.text:00001950 var_58C         = dword ptr -58Ch
.text:00001950 var_584         = dword ptr -584h
.text:00001950 var_580         = dword ptr -580h
.text:00001950 var_578         = byte ptr -578h
.text:00001950 var_564         = qword ptr -564h
.text:00001950 var_534         = dword ptr -534h
.text:00001950 var_530         = dword ptr -530h
.text:00001950 var_52C         = dword ptr -52Ch
.text:00001950 var_528         = dword ptr -528h
.text:00001950 var_524         = dword ptr -524h
.text:00001950 var_520         = dword ptr -520h
.text:00001950 var_518         = dword ptr -518h
.text:00001950 var_514         = dword ptr -514h
.text:00001950 var_510         = dword ptr -510h
.text:00001950 var_50C         = dword ptr -50Ch
.text:00001950 var_508         = dword ptr -508h
.text:00001950 var_504         = dword ptr -504h
.text:00001950 var_500         = dword ptr -500h
.text:00001950 var_4FC         = dword ptr -4FCh
.text:00001950 var_4F8         = dword ptr -4F8h
.text:00001950 var_4F4         = dword ptr -4F4h
.text:00001950 var_4F0         = dword ptr -4F0h
.text:00001950 var_4EC         = dword ptr -4ECh
.text:00001950 var_4E8         = dword ptr -4E8h
.text:00001950 var_4E4         = dword ptr -4E4h
.text:00001950 var_4DC         = byte ptr -4DCh
.text:00001950 var_4D0         = byte ptr -4D0h
.text:00001950 var_4B9         = byte ptr -4B9h
.text:00001950 var_4AD         = byte ptr -4ADh
.text:00001950 var_4A4         = byte ptr -4A4h
.text:00001950 var_498         = byte ptr -498h
.text:00001950 var_490         = dword ptr -490h
.text:00001950 var_48C         = dword ptr -48Ch
.text:00001950 var_488         = dword ptr -488h
.text:00001950 var_480         = byte ptr -480h
.text:00001950 var_474         = dword ptr -474h
.text:00001950 var_470         = dword ptr -470h
.text:00001950 var_468         = dword ptr -468h
.text:00001950 var_464         = dword ptr -464h
.text:00001950 var_460         = dword ptr -460h
.text:00001950 var_459         = byte ptr -459h
.text:00001950 var_458         = dword ptr -458h
.text:00001950 var_454         = dword ptr -454h
.text:00001950 var_450         = dword ptr -450h
.text:00001950 var_44C         = dword ptr -44Ch
.text:00001950 var_448         = dword ptr -448h
.text:00001950 var_440         = byte ptr -440h
.text:00001950 var_430         = dword ptr -430h
.text:00001950 var_42C         = dword ptr -42Ch
.text:00001950 var_428         = dword ptr -428h
.text:00001950 var_424         = dword ptr -424h
.text:00001950 var_420         = dword ptr -420h
.text:00001950 var_41C         = dword ptr -41Ch
.text:00001950 var_418         = qword ptr -418h
.text:00001950 var_410         = dword ptr -410h
.text:00001950 var_40C         = dword ptr -40Ch
.text:00001950 var_408         = dword ptr -408h
.text:00001950 var_404         = dword ptr -404h
.text:00001950 var_400         = dword ptr -400h
.text:00001950 var_3FC         = dword ptr -3FCh
.text:00001950 var_3F8         = dword ptr -3F8h
.text:00001950 var_3F4         = dword ptr -3F4h
.text:00001950 var_3F0         = dword ptr -3F0h
.text:00001950 var_3E8         = byte ptr -3E8h
.text:00001950 var_330         = dword ptr -330h
.text:00001950 var_32C         = dword ptr -32Ch
.text:00001950 var_324         = byte ptr -324h
.text:00001950 var_303         = byte ptr -303h
.text:00001950 var_300         = byte ptr -300h
.text:00001950 var_2F0         = dword ptr -2F0h
.text:00001950 var_2EC         = dword ptr -2ECh
.text:00001950 var_2E8         = dword ptr -2E8h
.text:00001950 var_2E0         = byte ptr -2E0h
.text:00001950 var_2CC         = qword ptr -2CCh
.text:00001950 var_29C         = dword ptr -29Ch
.text:00001950 var_280         = dword ptr -280h
.text:00001950 var_27C         = dword ptr -27Ch
.text:00001950 var_274         = byte ptr -274h
.text:00001950 var_264         = dword ptr -264h
.text:00001950 var_260         = dword ptr -260h
.text:00001950 var_25C         = dword ptr -25Ch
.text:00001950 var_254         = byte ptr -254h
.text:00001950 var_248         = byte ptr -248h
.text:00001950 var_240         = dword ptr -240h
.text:00001950 var_23C         = dword ptr -23Ch
.text:00001950 var_238         = dword ptr -238h
.text:00001950 var_230         = byte ptr -230h
.text:00001950 var_228         = byte ptr -228h
.text:00001950 var_21C         = dword ptr -21Ch
.text:00001950 var_218         = dword ptr -218h
.text:00001950 var_211         = byte ptr -211h
.text:00001950 var_20C         = byte ptr -20Ch
.text:00001950 var_200         = byte ptr -200h
.text:00001950 var_1FF         = byte ptr -1FFh
.text:00001950 var_1FE         = byte ptr -1FEh
.text:00001950 var_1F8         = dword ptr -1F8h
.text:00001950 var_1F0         = byte ptr -1F0h
.text:00001950 var_1DC         = byte ptr -1DCh
.text:00001950 var_178         = dword ptr -178h
.text:00001950 var_174         = byte ptr -174h
.text:00001950 var_170         = dword ptr -170h
.text:00001950 var_168         = dword ptr -168h
.text:00001950 var_164         = dword ptr -164h
.text:00001950 var_160         = dword ptr -160h
.text:00001950 var_15C         = dword ptr -15Ch
.text:00001950 var_158         = byte ptr -158h
.text:00001950 var_144         = dword ptr -144h
.text:00001950 var_13C         = byte ptr -13Ch
.text:00001950 var_124         = dword ptr -124h
.text:00001950 var_120         = dword ptr -120h
.text:00001950 var_114         = byte ptr -114h
.text:00001950 var_10C         = dword ptr -10Ch
.text:00001950 var_108         = dword ptr -108h
.text:00001950 var_104         = dword ptr -104h
.text:00001950 var_100         = dword ptr -100h
.text:00001950 var_F8          = dword ptr -0F8h
.text:00001950 var_F4          = dword ptr -0F4h
.text:00001950 var_EC          = dword ptr -0ECh
.text:00001950 var_E5          = byte ptr -0E5h
.text:00001950 var_E0          = byte ptr -0E0h
.text:00001950 var_BC          = dword ptr -0BCh
.text:00001950 var_B8          = dword ptr -0B8h
.text:00001950 var_B0          = dword ptr -0B0h
.text:00001950 var_AC          = dword ptr -0ACh
.text:00001950 var_A8          = dword ptr -0A8h
.text:00001950 var_A4          = dword ptr -0A4h
.text:00001950 var_A0          = dword ptr -0A0h
.text:00001950 var_9C          = dword ptr -9Ch
.text:00001950 var_98          = dword ptr -98h
.text:00001950 var_94          = dword ptr -94h
.text:00001950 var_90          = dword ptr -90h
.text:00001950 var_8C          = dword ptr -8Ch
.text:00001950 var_85          = byte ptr -85h
.text:00001950 var_80          = byte ptr -80h
.text:00001950 var_6C          = dword ptr -6Ch
.text:00001950 var_59          = byte ptr -59h
.text:00001950 var_58          = dword ptr -58h
.text:00001950 var_54          = dword ptr -54h
.text:00001950 var_50          = dword ptr -50h
.text:00001950 var_4C          = dword ptr -4Ch
.text:00001950 var_44          = byte ptr -44h
.text:00001950 var_3C          = dword ptr -3Ch
.text:00001950 var_38          = qword ptr -38h
.text:00001950 var_2C          = byte ptr -2Ch
.text:00001950 var_20          = byte ptr -20h
.text:00001950 var_18          = dword ptr -18h
.text:00001950 var_14          = dword ptr -14h
.text:00001950 var_10          = dword ptr -10h
.text:00001950 var_C           = dword ptr -0Ch
.text:00001950 var_4           = dword ptr -4
.text:00001950 arg_0           = dword ptr  8
.text:00001950 arg_4           = dword ptr  0Ch
.text:00001950 arg_8           = dword ptr  10h
.text:00001950 arg_C           = dword ptr  14h
.text:00001950 arg_10          = dword ptr  18h
.text:00001950 arg_14          = dword ptr  1Ch
.text:00001950 arg_18          = dword ptr  20h
.text:00001950 arg_1C          = dword ptr  24h
.text:00001950 arg_20          = dword ptr  28h
.text:00001950
.text:00001950                 push    ebp
.text:00001951                 mov     ebp, esp
.text:00001953                 push    0FFFFFFFFh
.text:00001955                 push    offset __ehhandler$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z
.text:0000195A                 mov     eax, large fs:0
.text:00001960                 push    eax
.text:00001961                 sub     esp, 7C0h
.text:00001967                 push    esi
.text:00001968                 push    edi
.text:00001969                 lea     edi, [ebp+var_7CC]
.text:0000196F                 mov     ecx, 1F0h
.text:00001974                 mov     eax, 0CCCCCCCCh
.text:00001979                 rep stosd
.text:0000197B                 mov     eax, dword ptr ds:___security_cookie
.text:00001980                 xor     eax, ebp
.text:00001982                 mov     [ebp+var_10], eax
.text:00001985                 push    eax
.text:00001986                 lea     eax, [ebp+var_C]
.text:00001989                 mov     large fs:0, eax
.text:0000198F                 mov     eax, [ebp+arg_1C]
.text:00001992                 mov     ecx, [eax+18h]
.text:00001995                 mov     [ebp+var_18], ecx
.text:00001998                 mov     edx, [eax+1Ch]
.text:0000199B                 mov     [ebp+var_14], edx
.text:0000199E                 mov     eax, [ebp+var_18]
.text:000019A1                 or      eax, [ebp+var_14]
.text:000019A4                 jnz     short loc_19B4
.text:000019A6                 mov     [ebp+var_18], 1
.text:000019AD                 mov     [ebp+var_14], 0
.text:000019B4
.text:000019B4 loc_19B4:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+54j
.text:000019B4                 lea     ecx, [ebp+var_20]
.text:000019B7                 call    ??0?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:000019BC                 mov     [ebp+var_4], 0
.text:000019C3                 lea     ecx, [ebp+var_20]
.text:000019C6                 call    ??I?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator&(void)
.text:000019CB                 mov     esi, esp
.text:000019CD                 push    eax
.text:000019CE                 push    offset _IID_IArchiveUpdateCallbackFile
.text:000019D3                 mov     ecx, [ebp+arg_18]
.text:000019D6                 mov     edx, [ecx]
.text:000019D8                 mov     eax, [ebp+arg_18]
.text:000019DB                 push    eax
.text:000019DC                 mov     ecx, [edx]
.text:000019DE                 call    ecx
.text:000019E0                 cmp     esi, esp
.text:000019E2                 call    __RTC_CheckEsp
.text:000019E7                 lea     ecx, [ebp+var_2C]
.text:000019EA                 call    ??0?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::CMyComPtr<IArchiveExtractCallbackMessage>(void)
.text:000019EF                 mov     byte ptr [ebp+var_4], 1
.text:000019F3                 lea     ecx, [ebp+var_2C]
.text:000019F6                 call    ??I?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAEPAPAUIArchiveExtractCallbackMessage@@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::operator&(void)
.text:000019FB                 mov     esi, esp
.text:000019FD                 push    eax
.text:000019FE                 push    offset _IID_IArchiveExtractCallbackMessage
.text:00001A03                 mov     edx, [ebp+arg_18]
.text:00001A06                 mov     eax, [edx]
.text:00001A08                 mov     ecx, [ebp+arg_18]
.text:00001A0B                 push    ecx
.text:00001A0C                 mov     edx, [eax]
.text:00001A0E                 call    edx
.text:00001A10                 cmp     esi, esp
.text:00001A12                 call    __RTC_CheckEsp
.text:00001A17                 cmp     [ebp+arg_4], 0
.text:00001A1B                 jz      short loc_1A3A
.text:00001A1D                 mov     eax, [ebp+arg_4]
.text:00001A20                 mov     ecx, [eax+0E8h]
.text:00001A26                 mov     [ebp+var_77C], ecx
.text:00001A2C                 mov     edx, [eax+0ECh]
.text:00001A32                 mov     [ebp+var_778], edx
.text:00001A38                 jmp     short loc_1A4E
.text:00001A3A ; ---------------------------------------------------------------------------
.text:00001A3A
.text:00001A3A loc_1A3A:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+CBj
.text:00001A3A                 mov     [ebp+var_77C], 0
.text:00001A44                 mov     [ebp+var_778], 0
.text:00001A4E
.text:00001A4E loc_1A4E:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+E8j
.text:00001A4E                 mov     eax, [ebp+var_77C]
.text:00001A54                 mov     dword ptr [ebp+var_38], eax
.text:00001A57                 mov     ecx, [ebp+var_778]
.text:00001A5D                 mov     dword ptr [ebp+var_38+4], ecx
.text:00001A60                 cmp     dword ptr [ebp+var_38+4], 0
.text:00001A64                 ja      short loc_1A6C
.text:00001A66                 cmp     dword ptr [ebp+var_38], 0
.text:00001A6A                 jbe     short loc_1ACA
.text:00001A6C
.text:00001A6C loc_1A6C:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+114j
.text:00001A6C                 mov     edx, [ebp+arg_1C]
.text:00001A6F                 movzx   eax, byte ptr [edx+29h]
.text:00001A73                 test    eax, eax
.text:00001A75                 jnz     short loc_1ACA
.text:00001A77                 push    0               ; int
.text:00001A79                 mov     ecx, dword ptr [ebp+var_38+4]
.text:00001A7C                 push    ecx
.text:00001A7D                 mov     edx, dword ptr [ebp+var_38]
.text:00001A80                 push    edx             ; unsigned __int64
.text:00001A81                 push    0               ; int
.text:00001A83                 push    0               ; int
.text:00001A85                 mov     eax, [ebp+arg_14]
.text:00001A88                 push    eax             ; int
.text:00001A89                 mov     ecx, [ebp+arg_0]
.text:00001A8C                 push    ecx             ; struct ISequentialInStream *
.text:00001A8D                 call    ?WriteRange@N7z@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@_K2PAUICompressProgressInfo@@@Z ; NArchive::N7z::WriteRange(IInStream *,ISequentialOutStream *,unsigned __int64,unsigned __int64,ICompressProgressInfo *)
.text:00001A92                 mov     [ebp+var_3C], eax
.text:00001A95                 cmp     [ebp+var_3C], 0
.text:00001A99                 jz      short loc_1ACA
.text:00001A9B                 mov     edx, [ebp+var_3C]
.text:00001A9E                 mov     [ebp+var_6B0], edx
.text:00001AA4                 mov     byte ptr [ebp+var_4], 0
.text:00001AA8                 lea     ecx, [ebp+var_2C]
.text:00001AAB                 call    ??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>(void)
.text:00001AB0                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001AB7                 lea     ecx, [ebp+var_20]
.text:00001ABA                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:00001ABF                 mov     eax, [ebp+var_6B0]
.text:00001AC5                 jmp     loc_57C7
.text:00001ACA ; ---------------------------------------------------------------------------
.text:00001ACA
.text:00001ACA loc_1ACA:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+11Aj
.text:00001ACA                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+125j ...
.text:00001ACA                 lea     ecx, [ebp+var_44]
.text:00001ACD                 call    ??0?$CObjArray@H@@QAE@XZ ; CObjArray<int>::CObjArray<int>(void)
.text:00001AD2                 mov     byte ptr [ebp+var_4], 2
.text:00001AD6                 mov     [ebp+var_50], 0
.text:00001ADD                 mov     [ebp+var_4C], 0
.text:00001AE4                 mov     [ebp+var_58], 0
.text:00001AEB                 mov     [ebp+var_54], 0
.text:00001AF2                 mov     [ebp+var_59], 0
.text:00001AF6                 lea     ecx, [ebp+var_6C]
.text:00001AF9                 call    ??0?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::CRecordVector<NArchive::N7z::CFilterMode2>(void)
.text:00001AFE                 mov     byte ptr [ebp+var_4], 3
.text:00001B02                 lea     ecx, [ebp+var_80]
.text:00001B05                 call    ??0?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::CObjectVector<NArchive::N7z::CSolidGroup>(void)
.text:00001B0A                 mov     byte ptr [ebp+var_4], 4
.text:00001B0E                 mov     [ebp+var_85], 0
.text:00001B15                 cmp     [ebp+arg_4], 0
.text:00001B19                 jz      loc_1E78
.text:00001B1F                 mov     ecx, [ebp+arg_4]
.text:00001B22                 add     ecx, 58h ; 'X'
.text:00001B25                 call    ?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CFileItem>::Size(void)
.text:00001B2A                 push    eax
.text:00001B2B                 lea     ecx, [ebp+var_44]
.text:00001B2E                 call    ?Alloc@?$CObjArray@H@@QAEXI@Z ; CObjArray<int>::Alloc(uint)
.text:00001B33                 mov     [ebp+var_8C], 0
.text:00001B3D                 jmp     short loc_1B4E
.text:00001B3F ; ---------------------------------------------------------------------------
.text:00001B3F
.text:00001B3F loc_1B3F:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+226j
.text:00001B3F                 mov     eax, [ebp+var_8C]
.text:00001B45                 add     eax, 1
.text:00001B48                 mov     [ebp+var_8C], eax
.text:00001B4E
.text:00001B4E loc_1B4E:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1EDj
.text:00001B4E                 mov     ecx, [ebp+arg_4]
.text:00001B51                 add     ecx, 58h ; 'X'
.text:00001B54                 call    ?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CFileItem>::Size(void)
.text:00001B59                 cmp     [ebp+var_8C], eax
.text:00001B5F                 jnb     short loc_1B78
.text:00001B61                 lea     ecx, [ebp+var_44]
.text:00001B64                 call    ??B?$CObjArray@H@@QAEPAHXZ ; CObjArray<int>::operator int *(void)
.text:00001B69                 mov     ecx, [ebp+var_8C]
.text:00001B6F                 mov     dword ptr [eax+ecx*4], 0FFFFFFFFh
.text:00001B76                 jmp     short loc_1B3F
.text:00001B78 ; ---------------------------------------------------------------------------
.text:00001B78
.text:00001B78 loc_1B78:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+20Fj
.text:00001B78                 mov     [ebp+var_8C], 0
.text:00001B82                 jmp     short loc_1B93
.text:00001B84 ; ---------------------------------------------------------------------------
.text:00001B84
.text:00001B84 loc_1B84:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *):loc_1BDAj
.text:00001B84                 mov     edx, [ebp+var_8C]
.text:00001B8A                 add     edx, 1
.text:00001B8D                 mov     [ebp+var_8C], edx
.text:00001B93
.text:00001B93 loc_1B93:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+232j
.text:00001B93                 mov     ecx, [ebp+arg_8]
.text:00001B96                 call    ?Size@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::N7z::CUpdateItem>::Size(void)
.text:00001B9B                 cmp     [ebp+var_8C], eax
.text:00001BA1                 jnb     short loc_1BDC
.text:00001BA3                 mov     eax, [ebp+var_8C]
.text:00001BA9                 push    eax
.text:00001BAA                 mov     ecx, [ebp+arg_8]
.text:00001BAD                 call    ??A?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QBEABUCUpdateItem@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CUpdateItem>::operator[](uint)
.text:00001BB2                 mov     ecx, [eax]
.text:00001BB4                 mov     [ebp+var_90], ecx
.text:00001BBA                 cmp     [ebp+var_90], 0FFFFFFFFh
.text:00001BC1                 jz      short loc_1BDA
.text:00001BC3                 lea     ecx, [ebp+var_44]
.text:00001BC6                 call    ??B?$CObjArray@H@@QAEPAHXZ ; CObjArray<int>::operator int *(void)
.text:00001BCB                 mov     edx, [ebp+var_90]
.text:00001BD1                 mov     ecx, [ebp+var_8C]
.text:00001BD7                 mov     [eax+edx*4], ecx
.text:00001BDA
.text:00001BDA loc_1BDA:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+271j
.text:00001BDA                 jmp     short loc_1B84
.text:00001BDC ; ---------------------------------------------------------------------------
.text:00001BDC
.text:00001BDC loc_1BDC:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+251j
.text:00001BDC                 mov     [ebp+var_8C], 0
.text:00001BE6                 jmp     short loc_1BF7
.text:00001BE8 ; ---------------------------------------------------------------------------
.text:00001BE8
.text:00001BE8 loc_1BE8:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+3E7j
.text:00001BE8                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+523j
.text:00001BE8                 mov     edx, [ebp+var_8C]
.text:00001BEE                 add     edx, 1
.text:00001BF1                 mov     [ebp+var_8C], edx
.text:00001BF7
.text:00001BF7 loc_1BF7:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+296j
.text:00001BF7                 mov     eax, [ebp+arg_4]
.text:00001BFA                 mov     ecx, [ebp+var_8C]
.text:00001C00                 cmp     ecx, [eax+4]
.text:00001C03                 jnb     loc_1E78
.text:00001C09                 mov     [ebp+var_94], 0
.text:00001C13                 mov     [ebp+var_98], 0
.text:00001C1D                 mov     ecx, [ebp+arg_4]
.text:00001C20                 add     ecx, 24h ; '$'
.text:00001C23                 call    ??B?$CObjArray@I@@QBEPBIXZ ; CObjArray<uint>::operator uint const *(void)
.text:00001C28                 mov     edx, [ebp+var_8C]
.text:00001C2E                 mov     eax, [eax+edx*4]
.text:00001C31                 mov     [ebp+var_9C], eax
.text:00001C37                 mov     [ebp+var_A4], 0
.text:00001C41                 mov     [ebp+var_A0], 0
.text:00001C4B                 mov     ecx, [ebp+arg_4]
.text:00001C4E                 add     ecx, 118h
.text:00001C54                 call    ??B?$CObjArray@I@@QBEPBIXZ ; CObjArray<uint>::operator uint const *(void)
.text:00001C59                 mov     ecx, [ebp+var_8C]
.text:00001C5F                 mov     edx, [eax+ecx*4]
.text:00001C62                 mov     [ebp+var_A8], edx
.text:00001C68                 jmp     short loc_1C79
.text:00001C6A ; ---------------------------------------------------------------------------
.text:00001C6A
.text:00001C6A loc_1C6A:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *):loc_1D29j
.text:00001C6A                 mov     eax, [ebp+var_A8]
.text:00001C70                 add     eax, 1
.text:00001C73                 mov     [ebp+var_A8], eax
.text:00001C79
.text:00001C79 loc_1C79:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+318j
.text:00001C79                 mov     ecx, [ebp+var_94]
.text:00001C7F                 cmp     ecx, [ebp+var_9C]
.text:00001C85                 jnb     loc_1D2E
.text:00001C8B                 mov     edx, [ebp+var_A8]
.text:00001C91                 push    edx
.text:00001C92                 mov     ecx, [ebp+arg_4]
.text:00001C95                 add     ecx, 58h ; 'X'
.text:00001C98                 call    ??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFileItem>::operator[](uint)
.text:00001C9D                 mov     [ebp+var_AC], eax
.text:00001CA3                 mov     eax, [ebp+var_AC]
.text:00001CA9                 movzx   ecx, byte ptr [eax+10h]
.text:00001CAD                 test    ecx, ecx
.text:00001CAF                 jz      short loc_1D29
.text:00001CB1                 mov     edx, [ebp+var_94]
.text:00001CB7                 add     edx, 1
.text:00001CBA                 mov     [ebp+var_94], edx
.text:00001CC0                 lea     ecx, [ebp+var_44]
.text:00001CC3                 call    ??B?$CObjArray@H@@QAEPAHXZ ; CObjArray<int>::operator int *(void)
.text:00001CC8                 mov     ecx, [ebp+var_A8]
.text:00001CCE                 mov     edx, [eax+ecx*4]
.text:00001CD1                 mov     [ebp+var_B0], edx
.text:00001CD7                 cmp     [ebp+var_B0], 0
.text:00001CDE                 jl      short loc_1D29
.text:00001CE0                 mov     eax, [ebp+var_B0]
.text:00001CE6                 push    eax
.text:00001CE7                 mov     ecx, [ebp+arg_8]
.text:00001CEA                 call    ??A?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QBEABUCUpdateItem@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CUpdateItem>::operator[](uint)
.text:00001CEF                 movzx   ecx, byte ptr [eax+38h]
.text:00001CF3                 test    ecx, ecx
.text:00001CF5                 jnz     short loc_1D29
.text:00001CF7                 mov     edx, [ebp+var_98]
.text:00001CFD                 add     edx, 1
.text:00001D00                 mov     [ebp+var_98], edx
.text:00001D06                 mov     eax, [ebp+var_AC]
.text:00001D0C                 mov     ecx, [ebp+var_A4]
.text:00001D12                 add     ecx, [eax]
.text:00001D14                 mov     edx, [ebp+var_A0]
.text:00001D1A                 adc     edx, [eax+4]
.text:00001D1D                 mov     [ebp+var_A4], ecx
.text:00001D23                 mov     [ebp+var_A0], edx
.text:00001D29
.text:00001D29 loc_1D29:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+35Fj
.text:00001D29                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+38Ej ...
.text:00001D29                 jmp     loc_1C6A
.text:00001D2E ; ---------------------------------------------------------------------------
.text:00001D2E
.text:00001D2E loc_1D2E:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+335j
.text:00001D2E                 cmp     [ebp+var_98], 0
.text:00001D35                 jnz     short loc_1D3C
.text:00001D37                 jmp     loc_1BE8
.text:00001D3C ; ---------------------------------------------------------------------------
.text:00001D3C
.text:00001D3C loc_1D3C:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+3E5j
.text:00001D3C                 mov     eax, [ebp+var_8C]
.text:00001D42                 mov     [ebp+var_BC], eax
.text:00001D48                 mov     ecx, [ebp+var_98]
.text:00001D4E                 mov     [ebp+var_B8], ecx
.text:00001D54                 lea     ecx, [ebp+var_E0] ; this
.text:00001D5A                 call    ??0CFolderEx@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFolderEx::CFolderEx(void)
.text:00001D5F                 mov     byte ptr [ebp+var_4], 5
.text:00001D63                 lea     edx, [ebp+var_E0]
.text:00001D69                 push    edx             ; struct NArchive::N7z::CFolderEx *
.text:00001D6A                 mov     eax, [ebp+var_8C]
.text:00001D70                 push    eax             ; unsigned int
.text:00001D71                 mov     ecx, [ebp+arg_4] ; this
.text:00001D74                 call    ?ParseFolderEx@CFolders@N7z@NArchive@@QBEXIAAUCFolderEx@23@@Z ; NArchive::N7z::CFolders::ParseFolderEx(uint,NArchive::N7z::CFolderEx &)
.text:00001D79                 lea     ecx, [ebp+var_E0] ; this
.text:00001D7F                 call    ?IsEncrypted@CFolder@N7z@NArchive@@QBE_NXZ ; NArchive::N7z::CFolder::IsEncrypted(void)
.text:00001D84                 mov     [ebp+var_E5], al
.text:00001D8A                 lea     ecx, [ebp+var_E0]
.text:00001D90                 push    ecx             ; NArchive::N7z::CFolder *
.text:00001D91                 lea     edx, [ebp+var_6C]
.text:00001D94                 push    edx             ; int
.text:00001D95                 call    ?Get_FilterGroup_for_Folder@N7z@NArchive@@YGIAAV?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@ABUCFolderEx@12@@Z ; NArchive::N7z::Get_FilterGroup_for_Folder(CRecordVector<NArchive::N7z::CFilterMode2> &,NArchive::N7z::CFolderEx const &)
.text:00001D9A                 mov     [ebp+var_EC], eax
.text:00001DA0
.text:00001DA0 loc_1DA0:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+468j
.text:00001DA0                 lea     ecx, [ebp+var_80]
.text:00001DA3                 call    ?Size@?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::N7z::CSolidGroup>::Size(void)
.text:00001DA8                 cmp     [ebp+var_EC], eax
.text:00001DAE                 jb      short loc_1DBA
.text:00001DB0                 lea     ecx, [ebp+var_80]
.text:00001DB3                 call    ?AddNew@?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAEAAUCSolidGroup@N7z@NArchive@@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::AddNew(void)
.text:00001DB8                 jmp     short loc_1DA0
.text:00001DBA ; ---------------------------------------------------------------------------
.text:00001DBA
.text:00001DBA loc_1DBA:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+45Ej
.text:00001DBA                 mov     eax, [ebp+var_B8]
.text:00001DC0                 push    eax
.text:00001DC1                 mov     ecx, [ebp+var_BC]
.text:00001DC7                 push    ecx
.text:00001DC8                 mov     edx, [ebp+var_EC]
.text:00001DCE                 push    edx
.text:00001DCF                 lea     ecx, [ebp+var_80]
.text:00001DD2                 call    ??A?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAEAAUCSolidGroup@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CSolidGroup>::operator[](uint)
.text:00001DD7                 add     eax, 0Ch
.text:00001DDA                 mov     ecx, eax
.text:00001DDC                 call    ?Add@?$CRecordVector@UCFolderRepack@N7z@NArchive@@@@QAEIUCFolderRepack@N7z@NArchive@@@Z ; CRecordVector<NArchive::N7z::CFolderRepack>::Add(NArchive::N7z::CFolderRepack)
.text:00001DE1                 mov     eax, [ebp+var_98]
.text:00001DE7                 cmp     eax, [ebp+var_9C]
.text:00001DED                 jnz     short loc_1E0C
.text:00001DEF                 mov     ecx, [ebp+var_8C]
.text:00001DF5                 push    ecx             ; unsigned int
.text:00001DF6                 mov     ecx, [ebp+arg_4] ; this
.text:00001DF9                 call    ?GetFolderFullPackSize@CDbEx@N7z@NArchive@@QBE_KI@Z ; NArchive::N7z::CDbEx::GetFolderFullPackSize(uint)
.text:00001DFE                 add     eax, [ebp+var_50]
.text:00001E01                 adc     edx, [ebp+var_4C]
.text:00001E04                 mov     [ebp+var_50], eax
.text:00001E07                 mov     [ebp+var_4C], edx
.text:00001E0A                 jmp     short loc_1E64
.text:00001E0C ; ---------------------------------------------------------------------------
.text:00001E0C
.text:00001E0C loc_1E0C:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+49Dj
.text:00001E0C                 mov     [ebp+var_85], 1
.text:00001E13                 mov     edx, [ebp+var_50]
.text:00001E16                 add     edx, [ebp+var_A4]
.text:00001E1C                 mov     eax, [ebp+var_4C]
.text:00001E1F                 adc     eax, [ebp+var_A0]
.text:00001E25                 mov     [ebp+var_50], edx
.text:00001E28                 mov     [ebp+var_4C], eax
.text:00001E2B                 mov     ecx, [ebp+var_54]
.text:00001E2E                 cmp     ecx, [ebp+var_A0]
.text:00001E34                 ja      short loc_1E55
.text:00001E36                 jb      short loc_1E43
.text:00001E38                 mov     edx, [ebp+var_58]
.text:00001E3B                 cmp     edx, [ebp+var_A4]
.text:00001E41                 jnb     short loc_1E55
.text:00001E43
.text:00001E43 loc_1E43:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+4E6j
.text:00001E43                 mov     eax, [ebp+var_A4]
.text:00001E49                 mov     [ebp+var_58], eax
.text:00001E4C                 mov     ecx, [ebp+var_A0]
.text:00001E52                 mov     [ebp+var_54], ecx
.text:00001E55
.text:00001E55 loc_1E55:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+4E4j
.text:00001E55                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+4F1j
.text:00001E55                 movzx   edx, [ebp+var_E5]
.text:00001E5C                 test    edx, edx
.text:00001E5E                 jz      short loc_1E64
.text:00001E60                 mov     [ebp+var_59], 1
.text:00001E64
.text:00001E64 loc_1E64:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+4BAj
.text:00001E64                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+50Ej
.text:00001E64                 mov     byte ptr [ebp+var_4], 4
.text:00001E68                 lea     ecx, [ebp+var_E0] ; this
.text:00001E6E                 call    ??1CFolderEx@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFolderEx::~CFolderEx(void)
.text:00001E73                 jmp     loc_1BE8
.text:00001E78 ; ---------------------------------------------------------------------------
.text:00001E78
.text:00001E78 loc_1E78:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1C9j
.text:00001E78                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+2B3j
.text:00001E78                 mov     [ebp+var_F8], 0
.text:00001E82                 mov     [ebp+var_F4], 0
.text:00001E8C                 mov     [ebp+var_100], 0
.text:00001E96                 jmp     short loc_1EA7
.text:00001E98 ; ---------------------------------------------------------------------------
.text:00001E98
.text:00001E98 loc_1E98:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *):loc_1F74j
.text:00001E98                 mov     eax, [ebp+var_100]
.text:00001E9E                 add     eax, 1
.text:00001EA1                 mov     [ebp+var_100], eax
.text:00001EA7
.text:00001EA7 loc_1EA7:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+546j
.text:00001EA7                 mov     ecx, [ebp+arg_8]
.text:00001EAA                 call    ?Size@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::N7z::CUpdateItem>::Size(void)
.text:00001EAF                 cmp     [ebp+var_100], eax
.text:00001EB5                 jnb     loc_1F79
.text:00001EBB                 mov     ecx, [ebp+var_100]
.text:00001EC1                 push    ecx
.text:00001EC2                 mov     ecx, [ebp+arg_8]
.text:00001EC5                 call    ??A?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QBEABUCUpdateItem@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CUpdateItem>::operator[](uint)
.text:00001ECA                 mov     [ebp+var_104], eax
.text:00001ED0                 mov     edx, [ebp+var_104]
.text:00001ED6                 movzx   eax, byte ptr [edx+38h]
.text:00001EDA                 test    eax, eax
.text:00001EDC                 jz      loc_1F74
.text:00001EE2                 mov     ecx, [ebp+var_104]
.text:00001EE8                 mov     edx, [ebp+var_50]
.text:00001EEB                 add     edx, [ecx+20h]
.text:00001EEE                 mov     eax, [ebp+var_4C]
.text:00001EF1                 adc     eax, [ecx+24h]
.text:00001EF4                 mov     [ebp+var_50], edx
.text:00001EF7                 mov     [ebp+var_4C], eax
.text:00001EFA                 cmp     [ebp+var_18], 1
.text:00001EFE                 jnz     short loc_1F06
.text:00001F00                 cmp     [ebp+var_14], 0
.text:00001F04                 jz      short loc_1F2C
.text:00001F06
.text:00001F06 loc_1F06:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+5AEj
.text:00001F06                 mov     ecx, [ebp+var_104]
.text:00001F0C                 mov     edx, [ebp+var_F8]
.text:00001F12                 add     edx, [ecx+20h]
.text:00001F15                 mov     eax, [ebp+var_F4]
.text:00001F1B                 adc     eax, [ecx+24h]
.text:00001F1E                 mov     [ebp+var_F8], edx
.text:00001F24                 mov     [ebp+var_F4], eax
.text:00001F2A                 jmp     short loc_1F74
.text:00001F2C ; ---------------------------------------------------------------------------
.text:00001F2C
.text:00001F2C loc_1F2C:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+5B4j
.text:00001F2C                 mov     ecx, [ebp+var_104]
.text:00001F32                 mov     [ebp+var_780], ecx
.text:00001F38                 mov     edx, [ebp+var_780]
.text:00001F3E                 mov     eax, [ebp+var_F4]
.text:00001F44                 cmp     eax, [edx+24h]
.text:00001F47                 ja      short loc_1F74
.text:00001F49                 jb      short loc_1F5C
.text:00001F4B                 mov     ecx, [ebp+var_780]
.text:00001F51                 mov     edx, [ebp+var_F8]
.text:00001F57                 cmp     edx, [ecx+20h]
.text:00001F5A                 jnb     short loc_1F74
.text:00001F5C
.text:00001F5C loc_1F5C:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+5F9j
.text:00001F5C                 mov     eax, [ebp+var_104]
.text:00001F62                 mov     ecx, [eax+20h]
.text:00001F65                 mov     [ebp+var_F8], ecx
.text:00001F6B                 mov     edx, [eax+24h]
.text:00001F6E                 mov     [ebp+var_F4], edx
.text:00001F74
.text:00001F74 loc_1F74:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+58Cj
.text:00001F74                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+5DAj ...
.text:00001F74                 jmp     loc_1E98
.text:00001F79 ; ---------------------------------------------------------------------------
.text:00001F79
.text:00001F79 loc_1F79:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+565j
.text:00001F79                 mov     eax, [ebp+var_F4]
.text:00001F7F                 cmp     eax, [ebp+var_54]
.text:00001F82                 ja      short loc_1FA3
.text:00001F84                 jb      short loc_1F91
.text:00001F86                 mov     ecx, [ebp+var_F8]
.text:00001F8C                 cmp     ecx, [ebp+var_58]
.text:00001F8F                 jnb     short loc_1FA3
.text:00001F91
.text:00001F91 loc_1F91:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+634j
.text:00001F91                 mov     edx, [ebp+var_58]
.text:00001F94                 mov     [ebp+var_F8], edx
.text:00001F9A                 mov     eax, [ebp+var_54]
.text:00001F9D                 mov     [ebp+var_F4], eax
.text:00001FA3
.text:00001FA3 loc_1FA3:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+632j
.text:00001FA3                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+63Fj
.text:00001FA3                 mov     esi, esp
.text:00001FA5                 mov     ecx, [ebp+var_4C]
.text:00001FA8                 push    ecx
.text:00001FA9                 mov     edx, [ebp+var_50]
.text:00001FAC                 push    edx
.text:00001FAD                 mov     eax, [ebp+arg_18]
.text:00001FB0                 mov     ecx, [eax]
.text:00001FB2                 mov     edx, [ebp+arg_18]
.text:00001FB5                 push    edx
.text:00001FB6                 mov     eax, [ecx+0Ch]
.text:00001FB9                 call    eax
.text:00001FBB                 cmp     esi, esp
.text:00001FBD                 call    __RTC_CheckEsp
.text:00001FC2                 mov     [ebp+var_108], eax
.text:00001FC8                 cmp     [ebp+var_108], 0
.text:00001FCF                 jz      short loc_2027
.text:00001FD1                 mov     ecx, [ebp+var_108]
.text:00001FD7                 mov     [ebp+var_6B4], ecx
.text:00001FDD                 mov     byte ptr [ebp+var_4], 3
.text:00001FE1                 lea     ecx, [ebp+var_80]
.text:00001FE4                 call    ??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>(void)
.text:00001FE9                 mov     byte ptr [ebp+var_4], 2
.text:00001FED                 lea     ecx, [ebp+var_6C]
.text:00001FF0                 call    ??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>(void)
.text:00001FF5                 mov     byte ptr [ebp+var_4], 1
.text:00001FF9                 lea     ecx, [ebp+var_44]
.text:00001FFC                 call    ??1?$CObjArray@H@@QAE@XZ ; CObjArray<int>::~CObjArray<int>(void)
.text:00002001                 mov     byte ptr [ebp+var_4], 0
.text:00002005                 lea     ecx, [ebp+var_2C]
.text:00002008                 call    ??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>(void)
.text:0000200D                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002014                 lea     ecx, [ebp+var_20]
.text:00002017                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:0000201C                 mov     eax, [ebp+var_6B4]
.text:00002022                 jmp     loc_57C7
.text:00002027 ; ---------------------------------------------------------------------------
.text:00002027
.text:00002027 loc_2027:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+67Fj
.text:00002027                 push    38h ; '8'       ; unsigned int
.text:00002029                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000202E                 add     esp, 4
.text:00002031                 mov     [ebp+var_6BC], eax
.text:00002037                 mov     byte ptr [ebp+var_4], 6
.text:0000203B                 cmp     [ebp+var_6BC], 0
.text:00002042                 jz      short loc_2057
.text:00002044                 mov     ecx, [ebp+var_6BC]
.text:0000204A                 call    ??0CLocalProgress@@QAE@XZ ; CLocalProgress::CLocalProgress(void)
.text:0000204F                 mov     [ebp+var_784], eax
.text:00002055                 jmp     short loc_2061
.text:00002057 ; ---------------------------------------------------------------------------
.text:00002057
.text:00002057 loc_2057:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+6F2j
.text:00002057                 mov     [ebp+var_784], 0
.text:00002061
.text:00002061 loc_2061:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+705j
.text:00002061                 mov     edx, [ebp+var_784]
.text:00002067                 mov     [ebp+var_6B8], edx
.text:0000206D                 mov     byte ptr [ebp+var_4], 4
.text:00002071                 mov     eax, [ebp+var_6B8]
.text:00002077                 mov     [ebp+var_10C], eax
.text:0000207D                 mov     ecx, [ebp+var_10C]
.text:00002083                 push    ecx
.text:00002084                 lea     ecx, [ebp+var_114]
.text:0000208A                 call    ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>(ICompressProgressInfo *)
.text:0000208F                 mov     byte ptr [ebp+var_4], 7
.text:00002093                 push    1               ; bool
.text:00002095                 mov     edx, [ebp+arg_18]
.text:00002098                 push    edx             ; struct IProgress *
.text:00002099                 mov     ecx, [ebp+var_10C] ; this
.text:0000209F                 call    ?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z ; CLocalProgress::Init(IProgress *,bool)
.text:000020A4                 lea     ecx, [ebp+var_13C]
.text:000020AA                 call    ??0CStreamBinder@@QAE@XZ ; CStreamBinder::CStreamBinder(void)
.text:000020AF                 mov     byte ptr [ebp+var_4], 8
.text:000020B3                 mov     eax, [ebp+arg_1C]
.text:000020B6                 movzx   ecx, byte ptr [eax+2Ah]
.text:000020BA                 test    ecx, ecx
.text:000020BC                 jz      loc_2150
.text:000020C2                 lea     ecx, [ebp+var_13C] ; this
.text:000020C8                 call    ?CreateEvents@CStreamBinder@@QAEIXZ ; CStreamBinder::CreateEvents(void)
.text:000020CD                 mov     [ebp+var_144], eax
.text:000020D3                 cmp     [ebp+var_144], 0
.text:000020DA                 jz      short loc_2150
.text:000020DC                 mov     edx, [ebp+var_144]
.text:000020E2                 mov     [ebp+var_6C0], edx
.text:000020E8                 mov     byte ptr [ebp+var_4], 7
.text:000020EC                 lea     ecx, [ebp+var_13C] ; this
.text:000020F2                 call    ??1CStreamBinder@@QAE@XZ ; CStreamBinder::~CStreamBinder(void)
.text:000020F7                 mov     byte ptr [ebp+var_4], 4
.text:000020FB                 lea     ecx, [ebp+var_114]
.text:00002101                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00002106                 mov     byte ptr [ebp+var_4], 3
.text:0000210A                 lea     ecx, [ebp+var_80]
.text:0000210D                 call    ??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>(void)
.text:00002112                 mov     byte ptr [ebp+var_4], 2
.text:00002116                 lea     ecx, [ebp+var_6C]
.text:00002119                 call    ??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>(void)
.text:0000211E                 mov     byte ptr [ebp+var_4], 1
.text:00002122                 lea     ecx, [ebp+var_44]
.text:00002125                 call    ??1?$CObjArray@H@@QAE@XZ ; CObjArray<int>::~CObjArray<int>(void)
.text:0000212A                 mov     byte ptr [ebp+var_4], 0
.text:0000212E                 lea     ecx, [ebp+var_2C]
.text:00002131                 call    ??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>(void)
.text:00002136                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000213D                 lea     ecx, [ebp+var_20]
.text:00002140                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:00002145                 mov     eax, [ebp+var_6C0]
.text:0000214B                 jmp     loc_57C7
.text:00002150 ; ---------------------------------------------------------------------------
.text:00002150
.text:00002150 loc_2150:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+76Cj
.text:00002150                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+78Aj
.text:00002150                 mov     eax, [ebp+arg_1C]
.text:00002153                 movzx   ecx, byte ptr [eax+2Ah]
.text:00002157                 push    ecx             ; bool
.text:00002158                 lea     ecx, [ebp+var_1F0] ; this
.text:0000215E                 call    ??0CThreadDecoder@N7z@NArchive@@QAE@_N@Z ; NArchive::N7z::CThreadDecoder::CThreadDecoder(bool)
.text:00002163                 mov     byte ptr [ebp+var_4], 9
.text:00002167                 mov     edx, [ebp+arg_1C]
.text:0000216A                 movzx   eax, byte ptr [edx+2Ah]
.text:0000216E                 test    eax, eax
.text:00002170                 jz      loc_2226
.text:00002176                 movzx   ecx, [ebp+var_85]
.text:0000217D                 test    ecx, ecx
.text:0000217F                 jz      loc_2226
.text:00002185                 lea     ecx, [ebp+var_1F0] ; this
.text:0000218B                 call    ?Create@CVirtThread@@QAEIXZ ; CVirtThread::Create(void)
.text:00002190                 mov     [ebp+var_1F8], eax
.text:00002196                 cmp     [ebp+var_1F8], 0
.text:0000219D                 jz      loc_2226
.text:000021A3                 mov     edx, [ebp+var_1F8]
.text:000021A9                 mov     [ebp+var_6C4], edx
.text:000021AF                 mov     byte ptr [ebp+var_4], 8
.text:000021B3                 lea     ecx, [ebp+var_1F0] ; this
.text:000021B9                 call    ??1CThreadDecoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CThreadDecoder::~CThreadDecoder(void)
.text:000021BE                 mov     byte ptr [ebp+var_4], 7
.text:000021C2                 lea     ecx, [ebp+var_13C] ; this
.text:000021C8                 call    ??1CStreamBinder@@QAE@XZ ; CStreamBinder::~CStreamBinder(void)
.text:000021CD                 mov     byte ptr [ebp+var_4], 4
.text:000021D1                 lea     ecx, [ebp+var_114]
.text:000021D7                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:000021DC                 mov     byte ptr [ebp+var_4], 3
.text:000021E0                 lea     ecx, [ebp+var_80]
.text:000021E3                 call    ??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>(void)
.text:000021E8                 mov     byte ptr [ebp+var_4], 2
.text:000021EC                 lea     ecx, [ebp+var_6C]
.text:000021EF                 call    ??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>(void)
.text:000021F4                 mov     byte ptr [ebp+var_4], 1
.text:000021F8                 lea     ecx, [ebp+var_44]
.text:000021FB                 call    ??1?$CObjArray@H@@QAE@XZ ; CObjArray<int>::~CObjArray<int>(void)
.text:00002200                 mov     byte ptr [ebp+var_4], 0
.text:00002204                 lea     ecx, [ebp+var_2C]
.text:00002207                 call    ??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>(void)
.text:0000220C                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002213                 lea     ecx, [ebp+var_20]
.text:00002216                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:0000221B                 mov     eax, [ebp+var_6C4]
.text:00002221                 jmp     loc_57C7
.text:00002226 ; ---------------------------------------------------------------------------
.text:00002226
.text:00002226 loc_2226:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+820j
.text:00002226                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+82Fj ...
.text:00002226                 lea     ecx, [ebp+var_20C] ; this
.text:0000222C                 call    ??0CAnalysis@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CAnalysis::CAnalysis(void)
.text:00002231                 mov     byte ptr [ebp+var_4], 0Ah
.text:00002235                 mov     eax, [ebp+arg_1C]
.text:00002238                 cmp     dword ptr [eax+0Ch], 0
.text:0000223C                 jnz     short loc_2255
.text:0000223E                 mov     [ebp+var_200], 0
.text:00002245                 mov     [ebp+var_1FF], 0
.text:0000224C                 mov     [ebp+var_1FE], 0
.text:00002253                 jmp     short loc_2294
.text:00002255 ; ---------------------------------------------------------------------------
.text:00002255
.text:00002255 loc_2255:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+8ECj
.text:00002255                 lea     ecx, [ebp+var_20]
.text:00002258                 push    ecx
.text:00002259                 lea     ecx, [ebp+var_20C]
.text:0000225F                 call    ??4?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAUIArchiveUpdateCallbackFile@@ABV0@@Z ; CMyComPtr<IArchiveUpdateCallbackFile>::operator=(CMyComPtr<IArchiveUpdateCallbackFile> const &)
.text:00002264                 mov     edx, [ebp+arg_1C]
.text:00002267                 cmp     dword ptr [edx+0Ch], 0
.text:0000226B                 jle     short loc_2294
.text:0000226D                 mov     [ebp+var_200], 1
.text:00002274                 mov     eax, [ebp+arg_1C]
.text:00002277                 cmp     dword ptr [eax+0Ch], 7
.text:0000227B                 jl      short loc_2294
.text:0000227D                 mov     [ebp+var_1FF], 1
.text:00002284                 mov     ecx, [ebp+arg_1C]
.text:00002287                 cmp     dword ptr [ecx+0Ch], 9
.text:0000228B                 jl      short loc_2294
.text:0000228D                 mov     [ebp+var_1FE], 1
.text:00002294
.text:00002294 loc_2294:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+903j
.text:00002294                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+91Bj ...
.text:00002294                 mov     edx, [ebp+arg_1C]
.text:00002297                 mov     al, [edx+8]
.text:0000229A                 mov     [ebp+var_211], al
.text:000022A0                 mov     ecx, [ebp+arg_1C]
.text:000022A3                 mov     edx, [ecx]
.text:000022A5                 mov     [ebp+var_218], edx
.text:000022AB                 movzx   eax, [ebp+var_211]
.text:000022B2                 test    eax, eax
.text:000022B4                 jz      short loc_2315
.text:000022B6                 mov     [ebp+var_100], 0
.text:000022C0                 jmp     short loc_22D1
.text:000022C2 ; ---------------------------------------------------------------------------
.text:000022C2
.text:000022C2 loc_22C2:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *):loc_2313j
.text:000022C2                 mov     ecx, [ebp+var_100]
.text:000022C8                 add     ecx, 1
.text:000022CB                 mov     [ebp+var_100], ecx
.text:000022D1
.text:000022D1 loc_22D1:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+970j
.text:000022D1                 mov     ecx, [ebp+var_218]
.text:000022D7                 call    ?Size@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::N7z::CMethodFull>::Size(void)
.text:000022DC                 cmp     [ebp+var_100], eax
.text:000022E2                 jnb     short loc_2315
.text:000022E4                 mov     edx, [ebp+var_100]
.text:000022EA                 push    edx
.text:000022EB                 mov     ecx, [ebp+var_218]
.text:000022F1                 call    ??A?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBEABUCMethodFull@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CMethodFull>::operator[](uint)
.text:000022F6                 mov     ecx, [eax+14h]
.text:000022F9                 push    ecx
.text:000022FA                 mov     edx, [eax+10h]
.text:000022FD                 push    edx
.text:000022FE                 call    ?IsFilterMethod@N7z@NArchive@@YG_N_K@Z ; NArchive::N7z::IsFilterMethod(unsigned __int64)
.text:00002303                 movzx   eax, al
.text:00002306                 test    eax, eax
.text:00002308                 jz      short loc_2313
.text:0000230A                 mov     [ebp+var_211], 0
.text:00002311                 jmp     short loc_2315
.text:00002313 ; ---------------------------------------------------------------------------
.text:00002313
.text:00002313 loc_2313:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+9B8j
.text:00002313                 jmp     short loc_22C2
.text:00002315 ; ---------------------------------------------------------------------------
.text:00002315
.text:00002315 loc_2315:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+964j
.text:00002315                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+992j ...
.text:00002315                 mov     [ebp+var_100], 0
.text:0000231F                 jmp     short loc_2330
.text:00002321 ; ---------------------------------------------------------------------------
.text:00002321
.text:00002321 loc_2321:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *):loc_2379j
.text:00002321                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+B66j
.text:00002321                 mov     ecx, [ebp+var_100]
.text:00002327                 add     ecx, 1
.text:0000232A                 mov     [ebp+var_100], ecx
.text:00002330
.text:00002330 loc_2330:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+9CFj
.text:00002330                 mov     ecx, [ebp+arg_8]
.text:00002333                 call    ?Size@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::N7z::CUpdateItem>::Size(void)
.text:00002338                 cmp     [ebp+var_100], eax
.text:0000233E                 jnb     loc_24BB
.text:00002344                 mov     edx, [ebp+var_100]
.text:0000234A                 push    edx
.text:0000234B                 mov     ecx, [ebp+arg_8]
.text:0000234E                 call    ??A?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QBEABUCUpdateItem@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CUpdateItem>::operator[](uint)
.text:00002353                 mov     [ebp+var_21C], eax
.text:00002359                 mov     eax, [ebp+var_21C]
.text:0000235F                 movzx   ecx, byte ptr [eax+38h]
.text:00002363                 test    ecx, ecx
.text:00002365                 jz      short loc_2379
.text:00002367                 mov     ecx, [ebp+var_21C] ; this
.text:0000236D                 call    ?HasStream@CUpdateItem@N7z@NArchive@@QBE_NXZ ; NArchive::N7z::CUpdateItem::HasStream(void)
.text:00002372                 movzx   edx, al
.text:00002375                 test    edx, edx
.text:00002377                 jnz     short loc_237B
.text:00002379
.text:00002379 loc_2379:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+A15j
.text:00002379                 jmp     short loc_2321
.text:0000237B ; ---------------------------------------------------------------------------
.text:0000237B
.text:0000237B loc_237B:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+A27j
.text:0000237B                 lea     ecx, [ebp+var_230] ; this
.text:00002381                 call    ??0CFilterMode2@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFilterMode2::CFilterMode2(void)
.text:00002386                 movzx   eax, [ebp+var_211]
.text:0000238D                 test    eax, eax
.text:0000238F                 jz      loc_245A
.text:00002395                 lea     ecx, [ebp+var_230]
.text:0000239B                 push    ecx             ; struct NArchive::N7z::CFilterMode *
.text:0000239C                 mov     edx, [ebp+var_21C]
.text:000023A2                 push    edx             ; struct NArchive::N7z::CUpdateItem *
.text:000023A3                 mov     eax, [ebp+var_100]
.text:000023A9                 push    eax             ; unsigned int
.text:000023AA                 lea     ecx, [ebp+var_20C] ; this
.text:000023B0                 call    ?GetFilterGroup@CAnalysis@N7z@NArchive@@QAEJIABUCUpdateItem@23@AAUCFilterMode@23@@Z ; NArchive::N7z::CAnalysis::GetFilterGroup(uint,NArchive::N7z::CUpdateItem const &,NArchive::N7z::CFilterMode &)
.text:000023B5                 mov     [ebp+var_238], eax
.text:000023BB                 cmp     [ebp+var_238], 0
.text:000023C2                 jz      loc_245A
.text:000023C8                 mov     ecx, [ebp+var_238]
.text:000023CE                 mov     [ebp+var_6C8], ecx
.text:000023D4                 mov     byte ptr [ebp+var_4], 9
.text:000023D8                 lea     ecx, [ebp+var_20C] ; this
.text:000023DE                 call    ??1CAnalysis@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CAnalysis::~CAnalysis(void)
.text:000023E3                 mov     byte ptr [ebp+var_4], 8
.text:000023E7                 lea     ecx, [ebp+var_1F0] ; this
.text:000023ED                 call    ??1CThreadDecoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CThreadDecoder::~CThreadDecoder(void)
.text:000023F2                 mov     byte ptr [ebp+var_4], 7
.text:000023F6                 lea     ecx, [ebp+var_13C] ; this
.text:000023FC                 call    ??1CStreamBinder@@QAE@XZ ; CStreamBinder::~CStreamBinder(void)
.text:00002401                 mov     byte ptr [ebp+var_4], 4
.text:00002405                 lea     ecx, [ebp+var_114]
.text:0000240B                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00002410                 mov     byte ptr [ebp+var_4], 3
.text:00002414                 lea     ecx, [ebp+var_80]
.text:00002417                 call    ??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>(void)
.text:0000241C                 mov     byte ptr [ebp+var_4], 2
.text:00002420                 lea     ecx, [ebp+var_6C]
.text:00002423                 call    ??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>(void)
.text:00002428                 mov     byte ptr [ebp+var_4], 1
.text:0000242C                 lea     ecx, [ebp+var_44]
.text:0000242F                 call    ??1?$CObjArray@H@@QAE@XZ ; CObjArray<int>::~CObjArray<int>(void)
.text:00002434                 mov     byte ptr [ebp+var_4], 0
.text:00002438                 lea     ecx, [ebp+var_2C]
.text:0000243B                 call    ??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>(void)
.text:00002440                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002447                 lea     ecx, [ebp+var_20]
.text:0000244A                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:0000244F                 mov     eax, [ebp+var_6C8]
.text:00002455                 jmp     loc_57C7
.text:0000245A ; ---------------------------------------------------------------------------
.text:0000245A
.text:0000245A loc_245A:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+A3Fj
.text:0000245A                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+A72j
.text:0000245A                 mov     edx, [ebp+var_218]
.text:00002460                 mov     al, [edx+21h]
.text:00002463                 mov     [ebp+var_228], al
.text:00002469                 lea     ecx, [ebp+var_230]
.text:0000246F                 push    ecx
.text:00002470                 lea     edx, [ebp+var_6C]
.text:00002473                 push    edx
.text:00002474                 call    ?GetGroup@N7z@NArchive@@YGIAAV?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@ABUCFilterMode2@12@@Z ; NArchive::N7z::GetGroup(CRecordVector<NArchive::N7z::CFilterMode2> &,NArchive::N7z::CFilterMode2 const &)
.text:00002479                 mov     [ebp+var_23C], eax
.text:0000247F
.text:0000247F loc_247F:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+B47j
.text:0000247F                 lea     ecx, [ebp+var_80]
.text:00002482                 call    ?Size@?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::N7z::CSolidGroup>::Size(void)
.text:00002487                 cmp     [ebp+var_23C], eax
.text:0000248D                 jb      short loc_2499
.text:0000248F                 lea     ecx, [ebp+var_80]
.text:00002492                 call    ?AddNew@?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAEAAUCSolidGroup@N7z@NArchive@@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::AddNew(void)
.text:00002497                 jmp     short loc_247F
.text:00002499 ; ---------------------------------------------------------------------------
.text:00002499
.text:00002499 loc_2499:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+B3Dj
.text:00002499                 mov     eax, [ebp+var_100]
.text:0000249F                 push    eax
.text:000024A0                 mov     ecx, [ebp+var_23C]
.text:000024A6                 push    ecx
.text:000024A7                 lea     ecx, [ebp+var_80]
.text:000024AA                 call    ??A?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAEAAUCSolidGroup@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CSolidGroup>::operator[](uint)
.text:000024AF                 mov     ecx, eax
.text:000024B1                 call    ?Add@?$CRecordVector@I@@QAEII@Z ; CRecordVector<uint>::Add(uint)
.text:000024B6                 jmp     loc_2321
.text:000024BB ; ---------------------------------------------------------------------------
.text:000024BB
.text:000024BB loc_24BB:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+9EEj
.text:000024BB                 mov     byte ptr [ebp+var_4], 9
.text:000024BF                 lea     ecx, [ebp+var_20C] ; this
.text:000024C5                 call    ??1CAnalysis@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CAnalysis::~CAnalysis(void)
.text:000024CA                 mov     [ebp+var_240], 0
.text:000024D4                 lea     ecx, [ebp+var_248]
.text:000024DA                 call    ??0?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::CMyComPtr<ICryptoGetTextPassword>(void)
.text:000024DF                 mov     byte ptr [ebp+var_4], 0Bh
.text:000024E3                 movzx   edx, [ebp+var_59]
.text:000024E7                 test    edx, edx
.text:000024E9                 jz      loc_274A
.text:000024EF                 push    14h             ; unsigned int
.text:000024F1                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000024F6                 add     esp, 4
.text:000024F9                 mov     [ebp+var_6D0], eax
.text:000024FF                 mov     byte ptr [ebp+var_4], 0Ch
.text:00002503                 cmp     [ebp+var_6D0], 0
.text:0000250A                 jz      short loc_251F
.text:0000250C                 mov     ecx, [ebp+var_6D0] ; this
.text:00002512                 call    ??0CCryptoGetTextPassword@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCryptoGetTextPassword::CCryptoGetTextPassword(void)
.text:00002517                 mov     [ebp+var_788], eax
.text:0000251D                 jmp     short loc_2529
.text:0000251F ; ---------------------------------------------------------------------------
.text:0000251F
.text:0000251F loc_251F:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+BBAj
.text:0000251F                 mov     [ebp+var_788], 0
.text:00002529
.text:00002529 loc_2529:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+BCDj
.text:00002529                 mov     eax, [ebp+var_788]
.text:0000252F                 mov     [ebp+var_6CC], eax
.text:00002535                 mov     byte ptr [ebp+var_4], 0Bh
.text:00002539                 mov     ecx, [ebp+var_6CC]
.text:0000253F                 mov     [ebp+var_240], ecx
.text:00002545                 mov     edx, [ebp+var_240]
.text:0000254B                 push    edx
.text:0000254C                 lea     ecx, [ebp+var_248]
.text:00002552                 call    ??4?$CMyComPtr@UICryptoGetTextPassword@@@@QAEPAUICryptoGetTextPassword@@PAU1@@Z ; CMyComPtr<ICryptoGetTextPassword>::operator=(ICryptoGetTextPassword *)
.text:00002557                 mov     eax, [ebp+var_240]
.text:0000255D                 push    eax
.text:0000255E                 lea     ecx, [ebp+var_158]
.text:00002564                 call    ??4?$CMyComPtr@UICryptoGetTextPassword@@@@QAEPAUICryptoGetTextPassword@@PAU1@@Z ; CMyComPtr<ICryptoGetTextPassword>::operator=(ICryptoGetTextPassword *)
.text:00002569                 mov     ecx, [ebp+arg_1C]
.text:0000256C                 mov     edx, [ecx]
.text:0000256E                 movzx   eax, byte ptr [edx+21h]
.text:00002572                 test    eax, eax
.text:00002574                 jz      short loc_2592
.text:00002576                 mov     ecx, [ebp+arg_1C]
.text:00002579                 mov     edx, [ecx]
.text:0000257B                 add     edx, 24h ; '$'
.text:0000257E                 push    edx
.text:0000257F                 mov     ecx, [ebp+var_240]
.text:00002585                 add     ecx, 8
.text:00002588                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:0000258D                 jmp     loc_274A
.text:00002592 ; ---------------------------------------------------------------------------
.text:00002592
.text:00002592 loc_2592:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+C24j
.text:00002592                 cmp     [ebp+arg_20], 0
.text:00002596                 jnz     loc_262C
.text:0000259C                 mov     [ebp+var_6D4], 80004001h
.text:000025A6                 mov     byte ptr [ebp+var_4], 9
.text:000025AA                 lea     ecx, [ebp+var_248]
.text:000025B0                 call    ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)
.text:000025B5                 mov     byte ptr [ebp+var_4], 8
.text:000025B9                 lea     ecx, [ebp+var_1F0] ; this
.text:000025BF                 call    ??1CThreadDecoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CThreadDecoder::~CThreadDecoder(void)
.text:000025C4                 mov     byte ptr [ebp+var_4], 7
.text:000025C8                 lea     ecx, [ebp+var_13C] ; this
.text:000025CE                 call    ??1CStreamBinder@@QAE@XZ ; CStreamBinder::~CStreamBinder(void)
.text:000025D3                 mov     byte ptr [ebp+var_4], 4
.text:000025D7                 lea     ecx, [ebp+var_114]
.text:000025DD                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:000025E2                 mov     byte ptr [ebp+var_4], 3
.text:000025E6                 lea     ecx, [ebp+var_80]
.text:000025E9                 call    ??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>(void)
.text:000025EE                 mov     byte ptr [ebp+var_4], 2
.text:000025F2                 lea     ecx, [ebp+var_6C]
.text:000025F5                 call    ??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>(void)
.text:000025FA                 mov     byte ptr [ebp+var_4], 1
.text:000025FE                 lea     ecx, [ebp+var_44]
.text:00002601                 call    ??1?$CObjArray@H@@QAE@XZ ; CObjArray<int>::~CObjArray<int>(void)
.text:00002606                 mov     byte ptr [ebp+var_4], 0
.text:0000260A                 lea     ecx, [ebp+var_2C]
.text:0000260D                 call    ??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>(void)
.text:00002612                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002619                 lea     ecx, [ebp+var_20]
.text:0000261C                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:00002621                 mov     eax, [ebp+var_6D4]
.text:00002627                 jmp     loc_57C7
.text:0000262C ; ---------------------------------------------------------------------------
.text:0000262C
.text:0000262C loc_262C:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+C46j
.text:0000262C                 lea     ecx, [ebp+var_254] ; this
.text:00002632                 call    ??0CMyComBSTR@@QAE@XZ ; CMyComBSTR::CMyComBSTR(void)
.text:00002637                 mov     byte ptr [ebp+var_4], 0Dh
.text:0000263B                 lea     ecx, [ebp+var_254]
.text:00002641                 call    ??ICMyComBSTR@@QAEPAPA_WXZ ; CMyComBSTR::operator&(void)
.text:00002646                 mov     esi, esp
.text:00002648                 push    eax
.text:00002649                 mov     eax, [ebp+arg_20]
.text:0000264C                 mov     ecx, [eax]
.text:0000264E                 mov     edx, [ebp+arg_20]
.text:00002651                 push    edx
.text:00002652                 mov     eax, [ecx+0Ch]
.text:00002655                 call    eax
.text:00002657                 cmp     esi, esp
.text:00002659                 call    __RTC_CheckEsp
.text:0000265E                 mov     [ebp+var_25C], eax
.text:00002664                 cmp     [ebp+var_25C], 0
.text:0000266B                 jz      loc_2712
.text:00002671                 mov     ecx, [ebp+var_25C]
.text:00002677                 mov     [ebp+var_6D8], ecx
.text:0000267D                 mov     byte ptr [ebp+var_4], 0Bh
.text:00002681                 lea     ecx, [ebp+var_254] ; this
.text:00002687                 call    ??1CMyComBSTR@@QAE@XZ ; CMyComBSTR::~CMyComBSTR(void)
.text:0000268C                 mov     byte ptr [ebp+var_4], 9
.text:00002690                 lea     ecx, [ebp+var_248]
.text:00002696                 call    ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)
.text:0000269B                 mov     byte ptr [ebp+var_4], 8
.text:0000269F                 lea     ecx, [ebp+var_1F0] ; this
.text:000026A5                 call    ??1CThreadDecoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CThreadDecoder::~CThreadDecoder(void)
.text:000026AA                 mov     byte ptr [ebp+var_4], 7
.text:000026AE                 lea     ecx, [ebp+var_13C] ; this
.text:000026B4                 call    ??1CStreamBinder@@QAE@XZ ; CStreamBinder::~CStreamBinder(void)
.text:000026B9                 mov     byte ptr [ebp+var_4], 4
.text:000026BD                 lea     ecx, [ebp+var_114]
.text:000026C3                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:000026C8                 mov     byte ptr [ebp+var_4], 3
.text:000026CC                 lea     ecx, [ebp+var_80]
.text:000026CF                 call    ??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>(void)
.text:000026D4                 mov     byte ptr [ebp+var_4], 2
.text:000026D8                 lea     ecx, [ebp+var_6C]
.text:000026DB                 call    ??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>(void)
.text:000026E0                 mov     byte ptr [ebp+var_4], 1
.text:000026E4                 lea     ecx, [ebp+var_44]
.text:000026E7                 call    ??1?$CObjArray@H@@QAE@XZ ; CObjArray<int>::~CObjArray<int>(void)
.text:000026EC                 mov     byte ptr [ebp+var_4], 0
.text:000026F0                 lea     ecx, [ebp+var_2C]
.text:000026F3                 call    ??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>(void)
.text:000026F8                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000026FF                 lea     ecx, [ebp+var_20]
.text:00002702                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:00002707                 mov     eax, [ebp+var_6D8]
.text:0000270D                 jmp     loc_57C7
.text:00002712 ; ---------------------------------------------------------------------------
.text:00002712
.text:00002712 loc_2712:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+D1Bj
.text:00002712                 lea     ecx, [ebp+var_254]
.text:00002718                 call    ??BCMyComBSTR@@QBEPB_WXZ ; CMyComBSTR::operator wchar_t const *(void)
.text:0000271D                 test    eax, eax
.text:0000271F                 jz      short loc_273B
.text:00002721                 lea     ecx, [ebp+var_254]
.text:00002727                 call    ??BCMyComBSTR@@QBEPB_WXZ ; CMyComBSTR::operator wchar_t const *(void)
.text:0000272C                 push    eax
.text:0000272D                 mov     ecx, [ebp+var_240]
.text:00002733                 add     ecx, 8
.text:00002736                 call    ??4UString@@QAEAAV0@PB_W@Z ; UString::operator=(wchar_t const *)
.text:0000273B
.text:0000273B loc_273B:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+DCFj
.text:0000273B                 mov     byte ptr [ebp+var_4], 0Bh
.text:0000273F                 lea     ecx, [ebp+var_254] ; this
.text:00002745                 call    ??1CMyComBSTR@@QAE@XZ ; CMyComBSTR::~CMyComBSTR(void)
.text:0000274A
.text:0000274A loc_274A:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+B99j
.text:0000274A                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+C3Dj
.text:0000274A                 push    0               ; bool
.text:0000274C                 mov     edx, [ebp+arg_14]
.text:0000274F                 push    edx             ; struct ISequentialOutStream *
.text:00002750                 mov     ecx, [ebp+arg_C] ; this
.text:00002753                 call    ?Create@COutArchive@N7z@NArchive@@QAEJPAUISequentialOutStream@@_N@Z ; NArchive::N7z::COutArchive::Create(ISequentialOutStream *,bool)
.text:00002758                 mov     [ebp+var_260], eax
.text:0000275E                 cmp     [ebp+var_260], 0
.text:00002765                 jz      loc_27FD
.text:0000276B                 mov     eax, [ebp+var_260]
.text:00002771                 mov     [ebp+var_6DC], eax
.text:00002777                 mov     byte ptr [ebp+var_4], 9
.text:0000277B                 lea     ecx, [ebp+var_248]
.text:00002781                 call    ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)
.text:00002786                 mov     byte ptr [ebp+var_4], 8
.text:0000278A                 lea     ecx, [ebp+var_1F0] ; this
.text:00002790                 call    ??1CThreadDecoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CThreadDecoder::~CThreadDecoder(void)
.text:00002795                 mov     byte ptr [ebp+var_4], 7
.text:00002799                 lea     ecx, [ebp+var_13C] ; this
.text:0000279F                 call    ??1CStreamBinder@@QAE@XZ ; CStreamBinder::~CStreamBinder(void)
.text:000027A4                 mov     byte ptr [ebp+var_4], 4
.text:000027A8                 lea     ecx, [ebp+var_114]
.text:000027AE                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:000027B3                 mov     byte ptr [ebp+var_4], 3
.text:000027B7                 lea     ecx, [ebp+var_80]
.text:000027BA                 call    ??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>(void)
.text:000027BF                 mov     byte ptr [ebp+var_4], 2
.text:000027C3                 lea     ecx, [ebp+var_6C]
.text:000027C6                 call    ??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>(void)
.text:000027CB                 mov     byte ptr [ebp+var_4], 1
.text:000027CF                 lea     ecx, [ebp+var_44]
.text:000027D2                 call    ??1?$CObjArray@H@@QAE@XZ ; CObjArray<int>::~CObjArray<int>(void)
.text:000027D7                 mov     byte ptr [ebp+var_4], 0
.text:000027DB                 lea     ecx, [ebp+var_2C]
.text:000027DE                 call    ??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>(void)
.text:000027E3                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000027EA                 lea     ecx, [ebp+var_20]
.text:000027ED                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:000027F2                 mov     eax, [ebp+var_6DC]
.text:000027F8                 jmp     loc_57C7
.text:000027FD ; ---------------------------------------------------------------------------
.text:000027FD
.text:000027FD loc_27FD:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+E15j
.text:000027FD                 mov     ecx, [ebp+arg_C] ; this
.text:00002800                 call    ?SkipPrefixArchiveHeader@COutArchive@N7z@NArchive@@QAEJXZ ; NArchive::N7z::COutArchive::SkipPrefixArchiveHeader(void)
.text:00002805                 mov     [ebp+var_264], eax
.text:0000280B                 cmp     [ebp+var_264], 0
.text:00002812                 jz      loc_28AA
.text:00002818                 mov     ecx, [ebp+var_264]
.text:0000281E                 mov     [ebp+var_6E0], ecx
.text:00002824                 mov     byte ptr [ebp+var_4], 9
.text:00002828                 lea     ecx, [ebp+var_248]
.text:0000282E                 call    ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)
.text:00002833                 mov     byte ptr [ebp+var_4], 8
.text:00002837                 lea     ecx, [ebp+var_1F0] ; this
.text:0000283D                 call    ??1CThreadDecoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CThreadDecoder::~CThreadDecoder(void)
.text:00002842                 mov     byte ptr [ebp+var_4], 7
.text:00002846                 lea     ecx, [ebp+var_13C] ; this
.text:0000284C                 call    ??1CStreamBinder@@QAE@XZ ; CStreamBinder::~CStreamBinder(void)
.text:00002851                 mov     byte ptr [ebp+var_4], 4
.text:00002855                 lea     ecx, [ebp+var_114]
.text:0000285B                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00002860                 mov     byte ptr [ebp+var_4], 3
.text:00002864                 lea     ecx, [ebp+var_80]
.text:00002867                 call    ??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>(void)
.text:0000286C                 mov     byte ptr [ebp+var_4], 2
.text:00002870                 lea     ecx, [ebp+var_6C]
.text:00002873                 call    ??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>(void)
.text:00002878                 mov     byte ptr [ebp+var_4], 1
.text:0000287C                 lea     ecx, [ebp+var_44]
.text:0000287F                 call    ??1?$CObjArray@H@@QAE@XZ ; CObjArray<int>::~CObjArray<int>(void)
.text:00002884                 mov     byte ptr [ebp+var_4], 0
.text:00002888                 lea     ecx, [ebp+var_2C]
.text:0000288B                 call    ??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>(void)
.text:00002890                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002897                 lea     ecx, [ebp+var_20]
.text:0000289A                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:0000289F                 mov     eax, [ebp+var_6E0]
.text:000028A5                 jmp     loc_57C7
.text:000028AA ; ---------------------------------------------------------------------------
.text:000028AA
.text:000028AA loc_28AA:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+EC2j
.text:000028AA                 lea     ecx, [ebp+var_274]
.text:000028B0                 call    ??0?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::CRecordVector<uint>(void)
.text:000028B5                 mov     byte ptr [ebp+var_4], 0Eh
.text:000028B9                 mov     [ebp+var_100], 0
.text:000028C3                 jmp     short loc_28D4
.text:000028C5 ; ---------------------------------------------------------------------------
.text:000028C5
.text:000028C5 loc_28C5:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+FC9j
.text:000028C5                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+FF4j ...
.text:000028C5                 mov     edx, [ebp+var_100]
.text:000028CB                 add     edx, 1
.text:000028CE                 mov     [ebp+var_100], edx
.text:000028D4
.text:000028D4 loc_28D4:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+F73j
.text:000028D4                 mov     ecx, [ebp+arg_8]
.text:000028D7                 call    ?Size@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::N7z::CUpdateItem>::Size(void)
.text:000028DC                 cmp     [ebp+var_100], eax
.text:000028E2                 jnb     short loc_2960
.text:000028E4                 mov     eax, [ebp+var_100]
.text:000028EA                 push    eax
.text:000028EB                 mov     ecx, [ebp+arg_8]
.text:000028EE                 call    ??A?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QBEABUCUpdateItem@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CUpdateItem>::operator[](uint)
.text:000028F3                 mov     [ebp+var_27C], eax
.text:000028F9                 mov     ecx, [ebp+var_27C]
.text:000028FF                 movzx   edx, byte ptr [ecx+38h]
.text:00002903                 test    edx, edx
.text:00002905                 jz      short loc_291D
.text:00002907                 mov     ecx, [ebp+var_27C] ; this
.text:0000290D                 call    ?HasStream@CUpdateItem@N7z@NArchive@@QBE_NXZ ; NArchive::N7z::CUpdateItem::HasStream(void)
.text:00002912                 movzx   eax, al
.text:00002915                 test    eax, eax
.text:00002917                 jz      short loc_291B
.text:00002919                 jmp     short loc_28C5
.text:0000291B ; ---------------------------------------------------------------------------
.text:0000291B
.text:0000291B loc_291B:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+FC7j
.text:0000291B                 jmp     short loc_2949
.text:0000291D ; ---------------------------------------------------------------------------
.text:0000291D
.text:0000291D loc_291D:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+FB5j
.text:0000291D                 mov     ecx, [ebp+var_27C]
.text:00002923                 cmp     dword ptr [ecx], 0FFFFFFFFh
.text:00002926                 jz      short loc_2949
.text:00002928                 mov     edx, [ebp+var_27C]
.text:0000292E                 mov     eax, [edx]
.text:00002930                 push    eax
.text:00002931                 mov     ecx, [ebp+arg_4]
.text:00002934                 add     ecx, 58h ; 'X'
.text:00002937                 call    ??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFileItem>::operator[](uint)
.text:0000293C                 movzx   ecx, byte ptr [eax+10h]
.text:00002940                 test    ecx, ecx
.text:00002942                 jz      short loc_2949
.text:00002944                 jmp     loc_28C5
.text:00002949 ; ---------------------------------------------------------------------------
.text:00002949
.text:00002949 loc_2949:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *):loc_291Bj
.text:00002949                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+FD6j ...
.text:00002949                 mov     edx, [ebp+var_100]
.text:0000294F                 push    edx
.text:00002950                 lea     ecx, [ebp+var_274]
.text:00002956                 call    ?Add@?$CRecordVector@I@@QAEII@Z ; CRecordVector<uint>::Add(uint)
.text:0000295B                 jmp     loc_28C5
.text:00002960 ; ---------------------------------------------------------------------------
.text:00002960
.text:00002960 loc_2960:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+F92j
.text:00002960                 mov     eax, [ebp+arg_8]
.text:00002963                 push    eax
.text:00002964                 push    offset ?CompareEmptyItems@N7z@NArchive@@YGHPBI0PAX@Z ; NArchive::N7z::CompareEmptyItems(uint const *,uint const *,void *)
.text:00002969                 lea     ecx, [ebp+var_274]
.text:0000296F                 call    ?Sort@?$CRecordVector@I@@QAEXP6GHPBI0PAX@Z1@Z ; CRecordVector<uint>::Sort(int (*)(uint const *,uint const *,void *),void *)
.text:00002974                 mov     [ebp+var_100], 0
.text:0000297E                 jmp     short loc_298F
.text:00002980 ; ---------------------------------------------------------------------------
.text:00002980
.text:00002980 loc_2980:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1136j
.text:00002980                 mov     ecx, [ebp+var_100]
.text:00002986                 add     ecx, 1
.text:00002989                 mov     [ebp+var_100], ecx
.text:0000298F
.text:0000298F loc_298F:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+102Ej
.text:0000298F                 lea     ecx, [ebp+var_274]
.text:00002995                 call    ?Size@?$CRecordVector@I@@QBEIXZ ; CRecordVector<uint>::Size(void)
.text:0000299A                 cmp     [ebp+var_100], eax
.text:000029A0                 jnb     loc_2A8B
.text:000029A6                 mov     edx, [ebp+var_100]
.text:000029AC                 push    edx
.text:000029AD                 lea     ecx, [ebp+var_274]
.text:000029B3                 call    ??A?$CRecordVector@I@@QAEAAII@Z ; CRecordVector<uint>::operator[](uint)
.text:000029B8                 mov     eax, [eax]
.text:000029BA                 push    eax
.text:000029BB                 mov     ecx, [ebp+arg_8]
.text:000029BE                 call    ??A?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QBEABUCUpdateItem@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CUpdateItem>::operator[](uint)
.text:000029C3                 mov     [ebp+var_280], eax
.text:000029C9                 lea     ecx, [ebp+var_29C] ; this
.text:000029CF                 call    ??0CFileItem@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFileItem::CFileItem(void)
.text:000029D4                 lea     ecx, [ebp+var_2E0]
.text:000029DA                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:000029DF                 mov     byte ptr [ebp+var_4], 0Fh
.text:000029E3                 mov     ecx, [ebp+var_280]
.text:000029E9                 movzx   edx, byte ptr [ecx+39h]
.text:000029ED                 test    edx, edx
.text:000029EF                 jz      short loc_2A22
.text:000029F1                 lea     eax, [ebp+var_2CC]
.text:000029F7                 push    eax             ; int
.text:000029F8                 lea     ecx, [ebp+var_29C]
.text:000029FE                 push    ecx             ; NArchive::N7z::CFileItem *
.text:000029FF                 mov     edx, [ebp+var_280]
.text:00002A05                 push    edx             ; NArchive::N7z::CUpdateItem *
.text:00002A06                 call    ?FromUpdateItemToFileItem@N7z@NArchive@@YGXABUCUpdateItem@12@AAUCFileItem@12@AAUCFileItem2@12@@Z ; NArchive::N7z::FromUpdateItemToFileItem(NArchive::N7z::CUpdateItem const &,NArchive::N7z::CFileItem &,NArchive::N7z::CFileItem2 &)
.text:00002A0B                 mov     eax, [ebp+var_280]
.text:00002A11                 add     eax, 28h ; '('
.text:00002A14                 push    eax
.text:00002A15                 lea     ecx, [ebp+var_2E0]
.text:00002A1B                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:00002A20                 jmp     short loc_2A5A
.text:00002A22 ; ---------------------------------------------------------------------------
.text:00002A22
.text:00002A22 loc_2A22:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+109Fj
.text:00002A22                 lea     ecx, [ebp+var_2CC]
.text:00002A28                 push    ecx             ; unsigned __int64 *
.text:00002A29                 lea     edx, [ebp+var_29C]
.text:00002A2F                 push    edx             ; int
.text:00002A30                 mov     eax, [ebp+var_280]
.text:00002A36                 mov     ecx, [eax]
.text:00002A38                 push    ecx             ; unsigned int
.text:00002A39                 mov     edx, [ebp+arg_4]
.text:00002A3C                 push    edx             ; NArchive::N7z::CDatabase *
.text:00002A3D                 call    ?GetFile@N7z@NArchive@@YGXABUCDatabase@12@IAAUCFileItem@12@AAUCFileItem2@12@@Z ; NArchive::N7z::GetFile(NArchive::N7z::CDatabase const &,uint,NArchive::N7z::CFileItem &,NArchive::N7z::CFileItem2 &)
.text:00002A42                 lea     eax, [ebp+var_2E0]
.text:00002A48                 push    eax             ; struct UString *
.text:00002A49                 mov     ecx, [ebp+var_280]
.text:00002A4F                 mov     edx, [ecx]
.text:00002A51                 push    edx             ; unsigned int
.text:00002A52                 mov     ecx, [ebp+arg_4] ; this
.text:00002A55                 call    ?GetPath@CDatabase@N7z@NArchive@@QBEXIAAVUString@@@Z ; NArchive::N7z::CDatabase::GetPath(uint,UString &)
.text:00002A5A
.text:00002A5A loc_2A5A:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+10D0j
.text:00002A5A                 lea     eax, [ebp+var_2E0]
.text:00002A60                 push    eax             ; struct UString *
.text:00002A61                 lea     ecx, [ebp+var_2CC]
.text:00002A67                 push    ecx             ; struct NArchive::N7z::CFileItem2 *
.text:00002A68                 lea     edx, [ebp+var_29C]
.text:00002A6E                 push    edx             ; struct NArchive::N7z::CFileItem *
.text:00002A6F                 mov     ecx, [ebp+arg_10] ; this
.text:00002A72                 call    ?AddFile@CArchiveDatabaseOut@N7z@NArchive@@QAEXABUCFileItem@23@ABUCFileItem2@23@ABVUString@@@Z ; NArchive::N7z::CArchiveDatabaseOut::AddFile(NArchive::N7z::CFileItem const &,NArchive::N7z::CFileItem2 const &,UString const &)
.text:00002A77                 mov     byte ptr [ebp+var_4], 0Eh
.text:00002A7B                 lea     ecx, [ebp+var_2E0] ; this
.text:00002A81                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00002A86                 jmp     loc_2980
.text:00002A8B ; ---------------------------------------------------------------------------
.text:00002A8B
.text:00002A8B loc_2A8B:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1050j
.text:00002A8B                 mov     byte ptr [ebp+var_4], 0Bh
.text:00002A8F                 lea     ecx, [ebp+var_274]
.text:00002A95                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00002A9A                 mov     eax, [ebp+var_10C]
.text:00002AA0                 mov     dword ptr [eax+18h], 0
.text:00002AA7                 mov     dword ptr [eax+1Ch], 0
.text:00002AAE                 mov     [ebp+var_2E8], 0
.text:00002AB8                 jmp     short loc_2AC9
.text:00002ABA ; ---------------------------------------------------------------------------
.text:00002ABA
.text:00002ABA loc_2ABA:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+11A1j
.text:00002ABA                 mov     ecx, [ebp+var_2E8]
.text:00002AC0                 add     ecx, 1
.text:00002AC3                 mov     [ebp+var_2E8], ecx
.text:00002AC9
.text:00002AC9 loc_2AC9:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1168j
.text:00002AC9                 lea     ecx, [ebp+var_6C]
.text:00002ACC                 call    ?Size@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CFilterMode2>::Size(void)
.text:00002AD1                 cmp     [ebp+var_2E8], eax
.text:00002AD7                 jnb     short loc_2AF3
.text:00002AD9                 mov     edx, [ebp+var_2E8]
.text:00002ADF                 push    edx
.text:00002AE0                 lea     ecx, [ebp+var_6C]
.text:00002AE3                 call    ??A?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAEAAUCFilterMode2@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFilterMode2>::operator[](uint)
.text:00002AE8                 mov     ecx, [ebp+var_2E8]
.text:00002AEE                 mov     [eax+0Ch], ecx
.text:00002AF1                 jmp     short loc_2ABA
.text:00002AF3 ; ---------------------------------------------------------------------------
.text:00002AF3
.text:00002AF3 loc_2AF3:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1187j
.text:00002AF3                 lea     ecx, [ebp+var_6C]
.text:00002AF6                 call    ?Sort2@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAEXXZ ; CRecordVector<NArchive::N7z::CFilterMode2>::Sort2(void)
.text:00002AFB                 mov     [ebp+var_2EC], 0
.text:00002B05                 jmp     short loc_2B16
.text:00002B07 ; ---------------------------------------------------------------------------
.text:00002B07
.text:00002B07 loc_2B07:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+2FAAj
.text:00002B07                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+3C49j
.text:00002B07                 mov     edx, [ebp+var_2EC]
.text:00002B0D                 add     edx, 1
.text:00002B10                 mov     [ebp+var_2EC], edx
.text:00002B16
.text:00002B16 loc_2B16:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+11B5j
.text:00002B16                 lea     ecx, [ebp+var_6C]
.text:00002B19                 call    ?Size@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CFilterMode2>::Size(void)
.text:00002B1E                 cmp     [ebp+var_2EC], eax
.text:00002B24                 jnb     loc_559E
.text:00002B2A                 mov     eax, [ebp+var_2EC]
.text:00002B30                 push    eax
.text:00002B31                 lea     ecx, [ebp+var_6C]
.text:00002B34                 call    ??A?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAEAAUCFilterMode2@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFilterMode2>::operator[](uint)
.text:00002B39                 mov     [ebp+var_2F0], eax
.text:00002B3F                 mov     ecx, [ebp+arg_1C]
.text:00002B42                 mov     edx, [ecx]
.text:00002B44                 push    edx             ; struct NArchive::N7z::CCompressionMethodMode *
.text:00002B45                 lea     ecx, [ebp+var_324] ; this
.text:00002B4B                 call    ??0CCompressionMethodMode@N7z@NArchive@@QAE@ABU012@@Z ; NArchive::N7z::CCompressionMethodMode::CCompressionMethodMode(NArchive::N7z::CCompressionMethodMode const &)
.text:00002B50                 mov     byte ptr [ebp+var_4], 10h
.text:00002B54                 mov     eax, [ebp+arg_1C]
.text:00002B57                 movzx   ecx, byte ptr [eax+9]
.text:00002B5B                 test    ecx, ecx
.text:00002B5D                 jz      short loc_2B73
.text:00002B5F                 mov     edx, [ebp+arg_1C]
.text:00002B62                 movzx   eax, byte ptr [edx+2Ah]
.text:00002B66                 test    eax, eax
.text:00002B68                 jz      short loc_2B73
.text:00002B6A                 mov     [ebp+var_789], 1
.text:00002B71                 jmp     short loc_2B7A
.text:00002B73 ; ---------------------------------------------------------------------------
.text:00002B73
.text:00002B73 loc_2B73:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+120Dj
.text:00002B73                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1218j
.text:00002B73                 mov     [ebp+var_789], 0
.text:00002B7A
.text:00002B7A loc_2B7A:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1221j
.text:00002B7A                 movzx   ecx, [ebp+var_789]
.text:00002B81                 push    ecx             ; char
.text:00002B82                 mov     edx, [ebp+var_2F0]
.text:00002B88                 push    edx             ; int
.text:00002B89                 lea     eax, [ebp+var_324]
.text:00002B8F                 push    eax             ; NArchive::N7z::CCompressionMethodMode *
.text:00002B90                 call    ?MakeExeMethod@N7z@NArchive@@YGJAAUCCompressionMethodMode@12@ABUCFilterMode@12@_N@Z ; NArchive::N7z::MakeExeMethod(NArchive::N7z::CCompressionMethodMode &,NArchive::N7z::CFilterMode const &,bool)
.text:00002B95                 mov     [ebp+var_32C], eax
.text:00002B9B                 mov     ecx, [ebp+var_32C]
.text:00002BA1                 mov     [ebp+var_330], ecx
.text:00002BA7                 cmp     [ebp+var_330], 0
.text:00002BAE                 jz      loc_2C55
.text:00002BB4                 mov     edx, [ebp+var_330]
.text:00002BBA                 mov     [ebp+var_6E4], edx
.text:00002BC0                 mov     byte ptr [ebp+var_4], 0Bh
.text:00002BC4                 lea     ecx, [ebp+var_324] ; this
.text:00002BCA                 call    ??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:00002BCF                 mov     byte ptr [ebp+var_4], 9
.text:00002BD3                 lea     ecx, [ebp+var_248]
.text:00002BD9                 call    ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)
.text:00002BDE                 mov     byte ptr [ebp+var_4], 8
.text:00002BE2                 lea     ecx, [ebp+var_1F0] ; this
.text:00002BE8                 call    ??1CThreadDecoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CThreadDecoder::~CThreadDecoder(void)
.text:00002BED                 mov     byte ptr [ebp+var_4], 7
.text:00002BF1                 lea     ecx, [ebp+var_13C] ; this
.text:00002BF7                 call    ??1CStreamBinder@@QAE@XZ ; CStreamBinder::~CStreamBinder(void)
.text:00002BFC                 mov     byte ptr [ebp+var_4], 4
.text:00002C00                 lea     ecx, [ebp+var_114]
.text:00002C06                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00002C0B                 mov     byte ptr [ebp+var_4], 3
.text:00002C0F                 lea     ecx, [ebp+var_80]
.text:00002C12                 call    ??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>(void)
.text:00002C17                 mov     byte ptr [ebp+var_4], 2
.text:00002C1B                 lea     ecx, [ebp+var_6C]
.text:00002C1E                 call    ??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>(void)
.text:00002C23                 mov     byte ptr [ebp+var_4], 1
.text:00002C27                 lea     ecx, [ebp+var_44]
.text:00002C2A                 call    ??1?$CObjArray@H@@QAE@XZ ; CObjArray<int>::~CObjArray<int>(void)
.text:00002C2F                 mov     byte ptr [ebp+var_4], 0
.text:00002C33                 lea     ecx, [ebp+var_2C]
.text:00002C36                 call    ??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>(void)
.text:00002C3B                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002C42                 lea     ecx, [ebp+var_20]
.text:00002C45                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:00002C4A                 mov     eax, [ebp+var_6E4]
.text:00002C50                 jmp     loc_57C7
.text:00002C55 ; ---------------------------------------------------------------------------
.text:00002C55
.text:00002C55 loc_2C55:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+125Ej
.text:00002C55                 mov     eax, [ebp+var_2F0]
.text:00002C5B                 movzx   ecx, byte ptr [eax+8]
.text:00002C5F                 test    ecx, ecx
.text:00002C61                 jz      short loc_2C95
.text:00002C63                 movzx   edx, [ebp+var_303]
.text:00002C6A                 test    edx, edx
.text:00002C6C                 jnz     short loc_2C93
.text:00002C6E                 cmp     [ebp+var_240], 0
.text:00002C75                 jz      short loc_2C8C
.text:00002C77                 mov     eax, [ebp+var_240]
.text:00002C7D                 add     eax, 8
.text:00002C80                 push    eax
.text:00002C81                 lea     ecx, [ebp+var_300]
.text:00002C87                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:00002C8C
.text:00002C8C loc_2C8C:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1325j
.text:00002C8C                 mov     [ebp+var_303], 1
.text:00002C93
.text:00002C93 loc_2C93:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+131Cj
.text:00002C93                 jmp     short loc_2CA7
.text:00002C95 ; ---------------------------------------------------------------------------
.text:00002C95
.text:00002C95 loc_2C95:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1311j
.text:00002C95                 mov     [ebp+var_303], 0
.text:00002C9C                 lea     ecx, [ebp+var_300] ; this
.text:00002CA2                 call    ?Empty@UString@@QAEXXZ ; UString::Empty(void)
.text:00002CA7
.text:00002CA7 loc_2CA7:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *):loc_2C93j
.text:00002CA7                 lea     ecx, [ebp+var_324]
.text:00002CAD                 push    ecx             ; struct NArchive::N7z::CCompressionMethodMode *
.text:00002CAE                 lea     ecx, [ebp+var_3E8] ; this
.text:00002CB4                 call    ??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z ; NArchive::N7z::CEncoder::CEncoder(NArchive::N7z::CCompressionMethodMode const &)
.text:00002CB9                 mov     byte ptr [ebp+var_4], 11h
.text:00002CBD                 mov     edx, [ebp+var_2F0]
.text:00002CC3                 mov     eax, [edx+0Ch]
.text:00002CC6                 push    eax
.text:00002CC7                 lea     ecx, [ebp+var_80]
.text:00002CCA                 call    ??A?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAEAAUCSolidGroup@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CSolidGroup>::operator[](uint)
.text:00002CCF                 mov     [ebp+var_3F0], eax
.text:00002CD5                 mov     [ebp+var_3F4], 0
.text:00002CDF                 jmp     short loc_2CF0
.text:00002CE1 ; ---------------------------------------------------------------------------
.text:00002CE1
.text:00002CE1 loc_2CE1:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *):loc_48BDj
.text:00002CE1                 mov     ecx, [ebp+var_3F4]
.text:00002CE7                 add     ecx, 1
.text:00002CEA                 mov     [ebp+var_3F4], ecx
.text:00002CF0
.text:00002CF0 loc_2CF0:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+138Fj
.text:00002CF0                 mov     ecx, [ebp+var_3F0]
.text:00002CF6                 add     ecx, 0Ch
.text:00002CF9                 call    ?Size@?$CRecordVector@UCFolderRepack@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CFolderRepack>::Size(void)
.text:00002CFE                 cmp     [ebp+var_3F4], eax
.text:00002D04                 jnb     loc_48C2
.text:00002D0A                 mov     edx, [ebp+var_3F4]
.text:00002D10                 push    edx
.text:00002D11                 mov     ecx, [ebp+var_3F0]
.text:00002D17                 add     ecx, 0Ch
.text:00002D1A                 call    ??A?$CRecordVector@UCFolderRepack@N7z@NArchive@@@@QBEABUCFolderRepack@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFolderRepack>::operator[](uint)
.text:00002D1F                 mov     [ebp+var_3F8], eax
.text:00002D25                 mov     eax, [ebp+var_3F8]
.text:00002D2B                 mov     ecx, [eax]
.text:00002D2D                 mov     [ebp+var_3FC], ecx
.text:00002D33                 mov     ecx, [ebp+arg_4]
.text:00002D36                 add     ecx, 24h ; '$'
.text:00002D39                 call    ??B?$CObjArray@I@@QBEPBIXZ ; CObjArray<uint>::operator uint const *(void)
.text:00002D3E                 mov     edx, [ebp+var_3FC]
.text:00002D44                 mov     eax, [eax+edx*4]
.text:00002D47                 mov     [ebp+var_400], eax
.text:00002D4D                 mov     ecx, [ebp+var_3F8]
.text:00002D53                 mov     edx, [ecx+4]
.text:00002D56                 cmp     edx, [ebp+var_400]
.text:00002D5C                 jnz     loc_323A
.text:00002D62                 lea     ecx, [ebp+var_20]
.text:00002D65                 call    ??B?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator IArchiveUpdateCallbackFile *(void)
.text:00002D6A                 test    eax, eax
.text:00002D6C                 jz      loc_2FE0
.text:00002D72                 lea     ecx, [ebp+var_20]
.text:00002D75                 call    ??C?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator->(void)
.text:00002D7A                 mov     [ebp+var_790], eax
.text:00002D80                 mov     esi, esp
.text:00002D82                 push    3
.text:00002D84                 mov     eax, [ebp+var_3FC]
.text:00002D8A                 push    eax
.text:00002D8B                 push    2
.text:00002D8D                 mov     ecx, [ebp+var_790]
.text:00002D93                 push    ecx
.text:00002D94                 mov     edx, [ebp+var_790]
.text:00002D9A                 mov     eax, [edx]
.text:00002D9C                 mov     ecx, [eax+10h]
.text:00002D9F                 call    ecx
.text:00002DA1                 cmp     esi, esp
.text:00002DA3                 call    __RTC_CheckEsp
.text:00002DA8                 mov     [ebp+var_404], eax
.text:00002DAE                 cmp     [ebp+var_404], 0
.text:00002DB5                 jz      loc_2E6B
.text:00002DBB                 mov     edx, [ebp+var_404]
.text:00002DC1                 mov     [ebp+var_6E8], edx
.text:00002DC7                 mov     byte ptr [ebp+var_4], 10h
.text:00002DCB                 lea     ecx, [ebp+var_3E8] ; this
.text:00002DD1                 call    ??1CEncoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CEncoder::~CEncoder(void)
.text:00002DD6                 mov     byte ptr [ebp+var_4], 0Bh
.text:00002DDA                 lea     ecx, [ebp+var_324] ; this
.text:00002DE0                 call    ??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:00002DE5                 mov     byte ptr [ebp+var_4], 9
.text:00002DE9                 lea     ecx, [ebp+var_248]
.text:00002DEF                 call    ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)
.text:00002DF4                 mov     byte ptr [ebp+var_4], 8
.text:00002DF8                 lea     ecx, [ebp+var_1F0] ; this
.text:00002DFE                 call    ??1CThreadDecoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CThreadDecoder::~CThreadDecoder(void)
.text:00002E03                 mov     byte ptr [ebp+var_4], 7
.text:00002E07                 lea     ecx, [ebp+var_13C] ; this
.text:00002E0D                 call    ??1CStreamBinder@@QAE@XZ ; CStreamBinder::~CStreamBinder(void)
.text:00002E12                 mov     byte ptr [ebp+var_4], 4
.text:00002E16                 lea     ecx, [ebp+var_114]
.text:00002E1C                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00002E21                 mov     byte ptr [ebp+var_4], 3
.text:00002E25                 lea     ecx, [ebp+var_80]
.text:00002E28                 call    ??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>(void)
.text:00002E2D                 mov     byte ptr [ebp+var_4], 2
.text:00002E31                 lea     ecx, [ebp+var_6C]
.text:00002E34                 call    ??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>(void)
.text:00002E39                 mov     byte ptr [ebp+var_4], 1
.text:00002E3D                 lea     ecx, [ebp+var_44]
.text:00002E40                 call    ??1?$CObjArray@H@@QAE@XZ ; CObjArray<int>::~CObjArray<int>(void)
.text:00002E45                 mov     byte ptr [ebp+var_4], 0
.text:00002E49                 lea     ecx, [ebp+var_2C]
.text:00002E4C                 call    ??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>(void)
.text:00002E51                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002E58                 lea     ecx, [ebp+var_20]
.text:00002E5B                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:00002E60                 mov     eax, [ebp+var_6E8]
.text:00002E66                 jmp     loc_57C7
.text:00002E6B ; ---------------------------------------------------------------------------
.text:00002E6B
.text:00002E6B loc_2E6B:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1465j
.text:00002E6B                 mov     [ebp+var_408], 0
.text:00002E75                 mov     ecx, [ebp+arg_4]
.text:00002E78                 add     ecx, 118h
.text:00002E7E                 call    ??B?$CObjArray@I@@QBEPBIXZ ; CObjArray<uint>::operator uint const *(void)
.text:00002E83                 mov     ecx, [ebp+var_3FC]
.text:00002E89                 mov     edx, [eax+ecx*4]
.text:00002E8C                 mov     [ebp+var_40C], edx
.text:00002E92                 jmp     short loc_2EA3
.text:00002E94 ; ---------------------------------------------------------------------------
.text:00002E94
.text:00002E94 loc_2E94:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *):loc_2FDBj
.text:00002E94                 mov     eax, [ebp+var_40C]
.text:00002E9A                 add     eax, 1
.text:00002E9D                 mov     [ebp+var_40C], eax
.text:00002EA3
.text:00002EA3 loc_2EA3:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1542j
.text:00002EA3                 mov     ecx, [ebp+var_408]
.text:00002EA9                 cmp     ecx, [ebp+var_400]
.text:00002EAF                 jnb     loc_2FE0
.text:00002EB5                 mov     edx, [ebp+var_40C]
.text:00002EBB                 push    edx
.text:00002EBC                 mov     ecx, [ebp+arg_4]
.text:00002EBF                 add     ecx, 58h ; 'X'
.text:00002EC2                 call    ??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFileItem>::operator[](uint)
.text:00002EC7                 movzx   eax, byte ptr [eax+10h]
.text:00002ECB                 test    eax, eax
.text:00002ECD                 jz      loc_2FDB
.text:00002ED3                 mov     ecx, [ebp+var_408]
.text:00002ED9                 add     ecx, 1
.text:00002EDC                 mov     [ebp+var_408], ecx
.text:00002EE2                 lea     ecx, [ebp+var_20]
.text:00002EE5                 call    ??C?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator->(void)
.text:00002EEA                 mov     [ebp+var_794], eax
.text:00002EF0                 mov     esi, esp
.text:00002EF2                 push    3
.text:00002EF4                 mov     edx, [ebp+var_40C]
.text:00002EFA                 push    edx
.text:00002EFB                 push    1
.text:00002EFD                 mov     eax, [ebp+var_794]
.text:00002F03                 push    eax
.text:00002F04                 mov     ecx, [ebp+var_794]
.text:00002F0A                 mov     edx, [ecx]
.text:00002F0C                 mov     eax, [edx+10h]
.text:00002F0F                 call    eax
.text:00002F11                 cmp     esi, esp
.text:00002F13                 call    __RTC_CheckEsp
.text:00002F18                 mov     [ebp+var_410], eax
.text:00002F1E                 cmp     [ebp+var_410], 0
.text:00002F25                 jz      loc_2FDB
.text:00002F2B                 mov     ecx, [ebp+var_410]
.text:00002F31                 mov     [ebp+var_6EC], ecx
.text:00002F37                 mov     byte ptr [ebp+var_4], 10h
.text:00002F3B                 lea     ecx, [ebp+var_3E8] ; this
.text:00002F41                 call    ??1CEncoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CEncoder::~CEncoder(void)
.text:00002F46                 mov     byte ptr [ebp+var_4], 0Bh
.text:00002F4A                 lea     ecx, [ebp+var_324] ; this
.text:00002F50                 call    ??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:00002F55                 mov     byte ptr [ebp+var_4], 9
.text:00002F59                 lea     ecx, [ebp+var_248]
.text:00002F5F                 call    ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)
.text:00002F64                 mov     byte ptr [ebp+var_4], 8
.text:00002F68                 lea     ecx, [ebp+var_1F0] ; this
.text:00002F6E                 call    ??1CThreadDecoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CThreadDecoder::~CThreadDecoder(void)
.text:00002F73                 mov     byte ptr [ebp+var_4], 7
.text:00002F77                 lea     ecx, [ebp+var_13C] ; this
.text:00002F7D                 call    ??1CStreamBinder@@QAE@XZ ; CStreamBinder::~CStreamBinder(void)
.text:00002F82                 mov     byte ptr [ebp+var_4], 4
.text:00002F86                 lea     ecx, [ebp+var_114]
.text:00002F8C                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00002F91                 mov     byte ptr [ebp+var_4], 3
.text:00002F95                 lea     ecx, [ebp+var_80]
.text:00002F98                 call    ??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>(void)
.text:00002F9D                 mov     byte ptr [ebp+var_4], 2
.text:00002FA1                 lea     ecx, [ebp+var_6C]
.text:00002FA4                 call    ??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>(void)
.text:00002FA9                 mov     byte ptr [ebp+var_4], 1
.text:00002FAD                 lea     ecx, [ebp+var_44]
.text:00002FB0                 call    ??1?$CObjArray@H@@QAE@XZ ; CObjArray<int>::~CObjArray<int>(void)
.text:00002FB5                 mov     byte ptr [ebp+var_4], 0
.text:00002FB9                 lea     ecx, [ebp+var_2C]
.text:00002FBC                 call    ??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>(void)
.text:00002FC1                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002FC8                 lea     ecx, [ebp+var_20]
.text:00002FCB                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:00002FD0                 mov     eax, [ebp+var_6EC]
.text:00002FD6                 jmp     loc_57C7
.text:00002FDB ; ---------------------------------------------------------------------------
.text:00002FDB
.text:00002FDB loc_2FDB:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+157Dj
.text:00002FDB                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+15D5j
.text:00002FDB                 jmp     loc_2E94
.text:00002FE0 ; ---------------------------------------------------------------------------
.text:00002FE0
.text:00002FE0 loc_2FE0:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+141Cj
.text:00002FE0                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+155Fj
.text:00002FE0                 mov     edx, [ebp+var_3FC]
.text:00002FE6                 push    edx             ; unsigned int
.text:00002FE7                 mov     ecx, [ebp+arg_4] ; this
.text:00002FEA                 call    ?GetFolderFullPackSize@CDbEx@N7z@NArchive@@QBE_KI@Z ; NArchive::N7z::CDbEx::GetFolderFullPackSize(uint)
.text:00002FEF                 mov     dword ptr [ebp+var_418], eax
.text:00002FF5                 mov     dword ptr [ebp+var_418+4], edx
.text:00002FFB                 lea     ecx, [ebp+var_114]
.text:00003001                 call    ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *(void)
.text:00003006                 push    eax             ; int
.text:00003007                 mov     eax, dword ptr [ebp+var_418+4]
.text:0000300D                 push    eax
.text:0000300E                 mov     ecx, dword ptr [ebp+var_418]
.text:00003014                 push    ecx             ; unsigned __int64
.text:00003015                 push    0               ; unsigned int
.text:00003017                 mov     edx, [ebp+var_3FC]
.text:0000301D                 push    edx             ; unsigned int
.text:0000301E                 mov     ecx, [ebp+arg_4] ; this
.text:00003021                 call    ?GetFolderStreamPos@CDbEx@N7z@NArchive@@QBE_KII@Z ; NArchive::N7z::CDbEx::GetFolderStreamPos(uint,uint)
.text:00003026                 push    edx             ; int
.text:00003027                 push    eax             ; int
.text:00003028                 mov     ecx, [ebp+arg_C]
.text:0000302B                 add     ecx, 54h ; 'T'
.text:0000302E                 call    ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *(void)
.text:00003033                 push    eax             ; int
.text:00003034                 mov     eax, [ebp+arg_0]
.text:00003037                 push    eax             ; struct ISequentialInStream *
.text:00003038                 call    ?WriteRange@N7z@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@_K2PAUICompressProgressInfo@@@Z ; NArchive::N7z::WriteRange(IInStream *,ISequentialOutStream *,unsigned __int64,unsigned __int64,ICompressProgressInfo *)
.text:0000303D                 mov     [ebp+var_41C], eax
.text:00003043                 cmp     [ebp+var_41C], 0
.text:0000304A                 jz      loc_3100
.text:00003050                 mov     ecx, [ebp+var_41C]
.text:00003056                 mov     [ebp+var_6F0], ecx
.text:0000305C                 mov     byte ptr [ebp+var_4], 10h
.text:00003060                 lea     ecx, [ebp+var_3E8] ; this
.text:00003066                 call    ??1CEncoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CEncoder::~CEncoder(void)
.text:0000306B                 mov     byte ptr [ebp+var_4], 0Bh
.text:0000306F                 lea     ecx, [ebp+var_324] ; this
.text:00003075                 call    ??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:0000307A                 mov     byte ptr [ebp+var_4], 9
.text:0000307E                 lea     ecx, [ebp+var_248]
.text:00003084                 call    ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)
.text:00003089                 mov     byte ptr [ebp+var_4], 8
.text:0000308D                 lea     ecx, [ebp+var_1F0] ; this
.text:00003093                 call    ??1CThreadDecoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CThreadDecoder::~CThreadDecoder(void)
.text:00003098                 mov     byte ptr [ebp+var_4], 7
.text:0000309C                 lea     ecx, [ebp+var_13C] ; this
.text:000030A2                 call    ??1CStreamBinder@@QAE@XZ ; CStreamBinder::~CStreamBinder(void)
.text:000030A7                 mov     byte ptr [ebp+var_4], 4
.text:000030AB                 lea     ecx, [ebp+var_114]
.text:000030B1                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:000030B6                 mov     byte ptr [ebp+var_4], 3
.text:000030BA                 lea     ecx, [ebp+var_80]
.text:000030BD                 call    ??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>(void)
.text:000030C2                 mov     byte ptr [ebp+var_4], 2
.text:000030C6                 lea     ecx, [ebp+var_6C]
.text:000030C9                 call    ??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>(void)
.text:000030CE                 mov     byte ptr [ebp+var_4], 1
.text:000030D2                 lea     ecx, [ebp+var_44]
.text:000030D5                 call    ??1?$CObjArray@H@@QAE@XZ ; CObjArray<int>::~CObjArray<int>(void)
.text:000030DA                 mov     byte ptr [ebp+var_4], 0
.text:000030DE                 lea     ecx, [ebp+var_2C]
.text:000030E1                 call    ??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>(void)
.text:000030E6                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000030ED                 lea     ecx, [ebp+var_20]
.text:000030F0                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:000030F5                 mov     eax, [ebp+var_6F0]
.text:000030FB                 jmp     loc_57C7
.text:00003100 ; ---------------------------------------------------------------------------
.text:00003100
.text:00003100 loc_3100:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+16FAj
.text:00003100                 mov     edx, [ebp+var_10C]
.text:00003106                 mov     eax, [edx+18h]
.text:00003109                 add     eax, dword ptr [ebp+var_418]
.text:0000310F                 mov     ecx, [edx+1Ch]
.text:00003112                 adc     ecx, dword ptr [ebp+var_418+4]
.text:00003118                 mov     edx, [ebp+var_10C]
.text:0000311E                 mov     [edx+18h], eax
.text:00003121                 mov     [edx+1Ch], ecx
.text:00003124                 mov     ecx, [ebp+arg_10]
.text:00003127                 add     ecx, 54h ; 'T'
.text:0000312A                 call    ?AddNew@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEAAUCFolder@N7z@NArchive@@XZ ; CObjectVector<NArchive::N7z::CFolder>::AddNew(void)
.text:0000312F                 mov     [ebp+var_420], eax
.text:00003135                 mov     eax, [ebp+var_420]
.text:0000313B                 push    eax             ; struct NArchive::N7z::CFolder *
.text:0000313C                 mov     ecx, [ebp+var_3FC]
.text:00003142                 push    ecx             ; unsigned int
.text:00003143                 mov     ecx, [ebp+arg_4] ; this
.text:00003146                 call    ?ParseFolderInfo@CFolders@N7z@NArchive@@QBEXIAAUCFolder@23@@Z ; NArchive::N7z::CFolders::ParseFolderInfo(uint,NArchive::N7z::CFolder &)
.text:0000314B                 mov     ecx, [ebp+arg_4]
.text:0000314E                 add     ecx, 30h ; '0'
.text:00003151                 call    ??B?$CObjArray@I@@QBEPBIXZ ; CObjArray<uint>::operator uint const *(void)
.text:00003156                 mov     edx, [ebp+var_3FC]
.text:0000315C                 mov     eax, [eax+edx*4]
.text:0000315F                 mov     [ebp+var_424], eax
.text:00003165                 mov     [ebp+var_428], 0
.text:0000316F                 jmp     short loc_3180
.text:00003171 ; ---------------------------------------------------------------------------
.text:00003171
.text:00003171 loc_3171:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1868j
.text:00003171                 mov     ecx, [ebp+var_428]
.text:00003177                 add     ecx, 1
.text:0000317A                 mov     [ebp+var_428], ecx
.text:00003180
.text:00003180 loc_3180:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+181Fj
.text:00003180                 mov     ecx, [ebp+var_420]
.text:00003186                 add     ecx, 10h
.text:00003189                 call    ?Size@?$CObjArray2@I@@QBEIXZ ; CObjArray2<uint>::Size(void)
.text:0000318E                 cmp     [ebp+var_428], eax
.text:00003194                 jnb     short loc_31BA
.text:00003196                 mov     edx, [ebp+var_424]
.text:0000319C                 add     edx, [ebp+var_428]
.text:000031A2                 push    edx             ; unsigned int
.text:000031A3                 mov     ecx, [ebp+arg_4] ; this
.text:000031A6                 call    ?GetStreamPackSize@CFolders@N7z@NArchive@@QBE_KI@Z ; NArchive::N7z::CFolders::GetStreamPackSize(uint)
.text:000031AB                 push    edx
.text:000031AC                 push    eax
.text:000031AD                 mov     ecx, [ebp+arg_10]
.text:000031B0                 add     ecx, 30h ; '0'
.text:000031B3                 call    ?Add@?$CRecordVector@_K@@QAEI_K@Z ; CRecordVector<unsigned __int64>::Add(unsigned __int64)
.text:000031B8                 jmp     short loc_3171
.text:000031BA ; ---------------------------------------------------------------------------
.text:000031BA
.text:000031BA loc_31BA:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1844j
.text:000031BA                 mov     ecx, [ebp+arg_4]
.text:000031BD                 add     ecx, 2Ch ; ','
.text:000031C0                 call    ??B?$CObjArray@I@@QBEPBIXZ ; CObjArray<uint>::operator uint const *(void)
.text:000031C5                 mov     ecx, [ebp+var_3FC]
.text:000031CB                 mov     edx, [eax+ecx*4]
.text:000031CE                 mov     [ebp+var_42C], edx
.text:000031D4                 mov     ecx, [ebp+arg_4]
.text:000031D7                 add     ecx, 2Ch ; ','
.text:000031DA                 call    ??B?$CObjArray@I@@QBEPBIXZ ; CObjArray<uint>::operator uint const *(void)
.text:000031DF                 mov     ecx, [ebp+var_3FC]
.text:000031E5                 mov     edx, [eax+ecx*4+4]
.text:000031E9                 mov     [ebp+var_430], edx
.text:000031EF                 jmp     short loc_3200
.text:000031F1 ; ---------------------------------------------------------------------------
.text:000031F1
.text:000031F1 loc_31F1:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+18E3j
.text:000031F1                 mov     eax, [ebp+var_42C]
.text:000031F7                 add     eax, 1
.text:000031FA                 mov     [ebp+var_42C], eax
.text:00003200
.text:00003200 loc_3200:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+189Fj
.text:00003200                 mov     ecx, [ebp+var_42C]
.text:00003206                 cmp     ecx, [ebp+var_430]
.text:0000320C                 jnb     short loc_3235
.text:0000320E                 mov     ecx, [ebp+arg_4]
.text:00003211                 add     ecx, 28h ; '('
.text:00003214                 call    ??B?$CObjArray@_K@@QBEPB_KXZ ; CObjArray<unsigned __int64>::operator unsigned __int64 const *(void)
.text:00003219                 mov     edx, [ebp+var_42C]
.text:0000321F                 mov     ecx, [eax+edx*8+4]
.text:00003223                 push    ecx
.text:00003224                 mov     edx, [eax+edx*8]
.text:00003227                 push    edx
.text:00003228                 mov     ecx, [ebp+arg_10]
.text:0000322B                 add     ecx, 24h ; '$'
.text:0000322E                 call    ?Add@?$CRecordVector@_K@@QAEI_K@Z ; CRecordVector<unsigned __int64>::Add(unsigned __int64)
.text:00003233                 jmp     short loc_31F1
.text:00003235 ; ---------------------------------------------------------------------------
.text:00003235
.text:00003235 loc_3235:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+18BCj
.text:00003235                 jmp     loc_4696
.text:0000323A ; ---------------------------------------------------------------------------
.text:0000323A
.text:0000323A loc_323A:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+140Cj
.text:0000323A                 lea     ecx, [ebp+var_440]
.text:00003240                 call    ??0?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::CRecordVector<bool>(void)
.text:00003245                 mov     byte ptr [ebp+var_4], 12h
.text:00003249                 mov     [ebp+var_448], 0
.text:00003253                 lea     ecx, [ebp+var_20]
.text:00003256                 call    ??B?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator IArchiveUpdateCallbackFile *(void)
.text:0000325B                 test    eax, eax
.text:0000325D                 jz      loc_336B
.text:00003263                 lea     ecx, [ebp+var_20]
.text:00003266                 call    ??C?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator->(void)
.text:0000326B                 mov     [ebp+var_798], eax
.text:00003271                 mov     esi, esp
.text:00003273                 push    4
.text:00003275                 mov     eax, [ebp+var_3FC]
.text:0000327B                 push    eax
.text:0000327C                 push    2
.text:0000327E                 mov     ecx, [ebp+var_798]
.text:00003284                 push    ecx
.text:00003285                 mov     edx, [ebp+var_798]
.text:0000328B                 mov     eax, [edx]
.text:0000328D                 mov     ecx, [eax+10h]
.text:00003290                 call    ecx
.text:00003292                 cmp     esi, esp
.text:00003294                 call    __RTC_CheckEsp
.text:00003299                 mov     [ebp+var_44C], eax
.text:0000329F                 cmp     [ebp+var_44C], 0
.text:000032A6                 jz      loc_336B
.text:000032AC                 mov     edx, [ebp+var_44C]
.text:000032B2                 mov     [ebp+var_6F4], edx
.text:000032B8                 mov     byte ptr [ebp+var_4], 11h
.text:000032BC                 lea     ecx, [ebp+var_440]
.text:000032C2                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:000032C7                 mov     byte ptr [ebp+var_4], 10h
.text:000032CB                 lea     ecx, [ebp+var_3E8] ; this
.text:000032D1                 call    ??1CEncoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CEncoder::~CEncoder(void)
.text:000032D6                 mov     byte ptr [ebp+var_4], 0Bh
.text:000032DA                 lea     ecx, [ebp+var_324] ; this
.text:000032E0                 call    ??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:000032E5                 mov     byte ptr [ebp+var_4], 9
.text:000032E9                 lea     ecx, [ebp+var_248]
.text:000032EF                 call    ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)
.text:000032F4                 mov     byte ptr [ebp+var_4], 8
.text:000032F8                 lea     ecx, [ebp+var_1F0] ; this
.text:000032FE                 call    ??1CThreadDecoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CThreadDecoder::~CThreadDecoder(void)
.text:00003303                 mov     byte ptr [ebp+var_4], 7
.text:00003307                 lea     ecx, [ebp+var_13C] ; this
.text:0000330D                 call    ??1CStreamBinder@@QAE@XZ ; CStreamBinder::~CStreamBinder(void)
.text:00003312                 mov     byte ptr [ebp+var_4], 4
.text:00003316                 lea     ecx, [ebp+var_114]
.text:0000331C                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00003321                 mov     byte ptr [ebp+var_4], 3
.text:00003325                 lea     ecx, [ebp+var_80]
.text:00003328                 call    ??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>(void)
.text:0000332D                 mov     byte ptr [ebp+var_4], 2
.text:00003331                 lea     ecx, [ebp+var_6C]
.text:00003334                 call    ??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>(void)
.text:00003339                 mov     byte ptr [ebp+var_4], 1
.text:0000333D                 lea     ecx, [ebp+var_44]
.text:00003340                 call    ??1?$CObjArray@H@@QAE@XZ ; CObjArray<int>::~CObjArray<int>(void)
.text:00003345                 mov     byte ptr [ebp+var_4], 0
.text:00003349                 lea     ecx, [ebp+var_2C]
.text:0000334C                 call    ??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>(void)
.text:00003351                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003358                 lea     ecx, [ebp+var_20]
.text:0000335B                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:00003360                 mov     eax, [ebp+var_6F4]
.text:00003366                 jmp     loc_57C7
.text:0000336B ; ---------------------------------------------------------------------------
.text:0000336B
.text:0000336B loc_336B:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+190Dj
.text:0000336B                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1956j
.text:0000336B                 mov     [ebp+var_454], 0
.text:00003375                 mov     [ebp+var_450], 0
.text:0000337F                 mov     ecx, [ebp+arg_4]
.text:00003382                 add     ecx, 118h
.text:00003388                 call    ??B?$CObjArray@I@@QBEPBIXZ ; CObjArray<uint>::operator uint const *(void)
.text:0000338D                 mov     ecx, [ebp+var_3FC]
.text:00003393                 mov     edx, [eax+ecx*4]
.text:00003396                 mov     [ebp+var_458], edx
.text:0000339C                 jmp     short loc_33AD
.text:0000339E ; ---------------------------------------------------------------------------
.text:0000339E
.text:0000339E loc_339E:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *):loc_347Aj
.text:0000339E                 mov     eax, [ebp+var_458]
.text:000033A4                 add     eax, 1
.text:000033A7                 mov     [ebp+var_458], eax
.text:000033AD
.text:000033AD loc_33AD:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1A4Cj
.text:000033AD                 mov     ecx, [ebp+var_448]
.text:000033B3                 cmp     ecx, [ebp+var_400]
.text:000033B9                 jnb     loc_347F
.text:000033BF                 mov     [ebp+var_459], 0
.text:000033C6                 mov     edx, [ebp+var_458]
.text:000033CC                 push    edx
.text:000033CD                 mov     ecx, [ebp+arg_4]
.text:000033D0                 add     ecx, 58h ; 'X'
.text:000033D3                 call    ??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFileItem>::operator[](uint)
.text:000033D8                 mov     [ebp+var_460], eax
.text:000033DE                 mov     eax, [ebp+var_460]
.text:000033E4                 movzx   ecx, byte ptr [eax+10h]
.text:000033E8                 test    ecx, ecx
.text:000033EA                 jz      short loc_3439
.text:000033EC                 mov     edx, [ebp+var_448]
.text:000033F2                 add     edx, 1
.text:000033F5                 mov     [ebp+var_448], edx
.text:000033FB                 lea     ecx, [ebp+var_44]
.text:000033FE                 call    ??B?$CObjArray@H@@QAEPAHXZ ; CObjArray<int>::operator int *(void)
.text:00003403                 mov     ecx, [ebp+var_458]
.text:00003409                 mov     edx, [eax+ecx*4]
.text:0000340C                 mov     [ebp+var_464], edx
.text:00003412                 cmp     [ebp+var_464], 0
.text:00003419                 jl      short loc_3439
.text:0000341B                 mov     eax, [ebp+var_464]
.text:00003421                 push    eax
.text:00003422                 mov     ecx, [ebp+arg_8]
.text:00003425                 call    ??A?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QBEABUCUpdateItem@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CUpdateItem>::operator[](uint)
.text:0000342A                 movzx   ecx, byte ptr [eax+38h]
.text:0000342E                 test    ecx, ecx
.text:00003430                 jnz     short loc_3439
.text:00003432                 mov     [ebp+var_459], 1
.text:00003439
.text:00003439 loc_3439:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1A9Aj
.text:00003439                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1AC9j ...
.text:00003439                 movzx   edx, [ebp+var_459]
.text:00003440                 push    edx
.text:00003441                 lea     ecx, [ebp+var_440]
.text:00003447                 call    ?Add@?$CRecordVector@_N@@QAEI_N@Z ; CRecordVector<bool>::Add(bool)
.text:0000344C                 movzx   eax, [ebp+var_459]
.text:00003453                 test    eax, eax
.text:00003455                 jz      short loc_347A
.text:00003457                 mov     ecx, [ebp+var_460]
.text:0000345D                 mov     edx, [ebp+var_454]
.text:00003463                 add     edx, [ecx]
.text:00003465                 mov     eax, [ebp+var_450]
.text:0000346B                 adc     eax, [ecx+4]
.text:0000346E                 mov     [ebp+var_454], edx
.text:00003474                 mov     [ebp+var_450], eax
.text:0000347A
.text:0000347A loc_347A:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1B05j
.text:0000347A                 jmp     loc_339E
.text:0000347F ; ---------------------------------------------------------------------------
.text:0000347F
.text:0000347F loc_347F:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1A69j
.text:0000347F                 mov     ecx, [ebp+arg_10]
.text:00003482                 add     ecx, 30h ; '0'
.text:00003485                 call    ?Size@?$CRecordVector@_K@@QBEIXZ ; CRecordVector<unsigned __int64>::Size(void)
.text:0000348A                 mov     [ebp+var_468], eax
.text:00003490                 lea     ecx, [ebp+var_480]
.text:00003496                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(void)
.text:0000349B                 mov     byte ptr [ebp+var_4], 13h
.text:0000349F                 mov     [ebp+var_48C], 0
.text:000034A9                 push    1Ch             ; unsigned int
.text:000034AB                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000034B0                 add     esp, 4
.text:000034B3                 mov     [ebp+var_6FC], eax
.text:000034B9                 mov     byte ptr [ebp+var_4], 14h
.text:000034BD                 cmp     [ebp+var_6FC], 0
.text:000034C4                 jz      short loc_34D9
.text:000034C6                 mov     ecx, [ebp+var_6FC] ; this
.text:000034CC                 call    ??0CRepackInStreamWithSizes@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CRepackInStreamWithSizes::CRepackInStreamWithSizes(void)
.text:000034D1                 mov     [ebp+var_79C], eax
.text:000034D7                 jmp     short loc_34E3
.text:000034D9 ; ---------------------------------------------------------------------------
.text:000034D9
.text:000034D9 loc_34D9:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1B74j
.text:000034D9                 mov     [ebp+var_79C], 0
.text:000034E3
.text:000034E3 loc_34E3:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1B87j
.text:000034E3                 mov     ecx, [ebp+var_79C]
.text:000034E9                 mov     [ebp+var_6F8], ecx
.text:000034EF                 mov     byte ptr [ebp+var_4], 13h
.text:000034F3                 mov     edx, [ebp+var_6F8]
.text:000034F9                 mov     [ebp+var_490], edx
.text:000034FF                 mov     eax, [ebp+var_490]
.text:00003505                 push    eax
.text:00003506                 lea     ecx, [ebp+var_498]
.text:0000350C                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(ISequentialInStream *)
.text:00003511                 mov     byte ptr [ebp+var_4], 15h
.text:00003515                 mov     ecx, [ebp+arg_1C]
.text:00003518                 movzx   edx, byte ptr [ecx+2Ah]
.text:0000351C                 test    edx, edx
.text:0000351E                 jz      loc_35F9
.text:00003524                 cmp     [ebp+var_170], 0
.text:0000352B                 jz      short loc_353E
.text:0000352D                 mov     eax, [ebp+var_170]
.text:00003533                 add     eax, 8
.text:00003536                 mov     [ebp+var_7A0], eax
.text:0000353C                 jmp     short loc_3548
.text:0000353E ; ---------------------------------------------------------------------------
.text:0000353E
.text:0000353E loc_353E:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1BDBj
.text:0000353E                 mov     [ebp+var_7A0], 0
.text:00003548
.text:00003548 loc_3548:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1BECj
.text:00003548                 mov     ecx, [ebp+var_7A0]
.text:0000354E                 mov     [ebp+var_488], ecx
.text:00003554                 lea     ecx, [ebp+var_4A4]
.text:0000355A                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(void)
.text:0000355F                 mov     byte ptr [ebp+var_4], 16h
.text:00003563                 lea     ecx, [ebp+var_4A4]
.text:00003569                 call    ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator&(void)
.text:0000356E                 push    eax             ; struct ISequentialOutStream **
.text:0000356F                 lea     ecx, [ebp+var_480]
.text:00003575                 call    ??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator&(void)
.text:0000357A                 push    eax             ; struct ISequentialInStream **
.text:0000357B                 lea     ecx, [ebp+var_13C] ; this
.text:00003581                 call    ?CreateStreams@CStreamBinder@@QAEXPAPAUISequentialInStream@@PAPAUISequentialOutStream@@@Z ; CStreamBinder::CreateStreams(ISequentialInStream * *,ISequentialOutStream * *)
.text:00003586                 lea     ecx, [ebp+var_13C] ; this
.text:0000358C                 call    ?ReInit@CStreamBinder@@QAEXXZ ; CStreamBinder::ReInit(void)
.text:00003591                 lea     edx, [ebp+var_4A4]
.text:00003597                 push    edx
.text:00003598                 mov     ecx, [ebp+var_170]
.text:0000359E                 add     ecx, 34h ; '4'
.text:000035A1                 call    ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@ABV0@@Z ; CMyComPtr<ISequentialOutStream>::operator=(CMyComPtr<ISequentialOutStream> const &)
.text:000035A6                 mov     eax, [ebp+arg_0]
.text:000035A9                 push    eax
.text:000035AA                 lea     ecx, [ebp+var_174]
.text:000035B0                 call    ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ; CMyComPtr<IInStream>::operator=(IInStream *)
.text:000035B5                 mov     ecx, [ebp+arg_4]
.text:000035B8                 mov     edx, [ecx+0F8h]
.text:000035BE                 mov     [ebp+var_168], edx
.text:000035C4                 mov     eax, [ecx+0FCh]
.text:000035CA                 mov     [ebp+var_164], eax
.text:000035D0                 mov     ecx, [ebp+arg_4]
.text:000035D3                 mov     [ebp+var_160], ecx
.text:000035D9                 mov     edx, [ebp+var_3FC]
.text:000035DF                 mov     [ebp+var_15C], edx
.text:000035E5                 mov     byte ptr [ebp+var_4], 15h
.text:000035E9                 lea     ecx, [ebp+var_4A4]
.text:000035EF                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:000035F4                 jmp     loc_3986
.text:000035F9 ; ---------------------------------------------------------------------------
.text:000035F9
.text:000035F9 loc_35F9:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1BCEj
.text:000035F9                 push    40h ; '@'       ; unsigned int
.text:000035FB                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00003600                 add     esp, 4
.text:00003603                 mov     [ebp+var_704], eax
.text:00003609                 mov     byte ptr [ebp+var_4], 17h
.text:0000360D                 cmp     [ebp+var_704], 0
.text:00003614                 jz      short loc_3629
.text:00003616                 mov     ecx, [ebp+var_704] ; this
.text:0000361C                 call    ??0CFolderInStream2@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFolderInStream2::CFolderInStream2(void)
.text:00003621                 mov     [ebp+var_7A4], eax
.text:00003627                 jmp     short loc_3633
.text:00003629 ; ---------------------------------------------------------------------------
.text:00003629
.text:00003629 loc_3629:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1CC4j
.text:00003629                 mov     [ebp+var_7A4], 0
.text:00003633
.text:00003633 loc_3633:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1CD7j
.text:00003633                 mov     eax, [ebp+var_7A4]
.text:00003639                 mov     [ebp+var_700], eax
.text:0000363F                 mov     byte ptr [ebp+var_4], 15h
.text:00003643                 mov     ecx, [ebp+var_700]
.text:00003649                 mov     [ebp+var_48C], ecx
.text:0000364F                 mov     ecx, [ebp+var_48C] ; this
.text:00003655                 call    ?Init@CFolderInStream2@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CFolderInStream2::Init(void)
.text:0000365A                 mov     edx, [ebp+var_48C]
.text:00003660                 push    edx
.text:00003661                 lea     ecx, [ebp+var_480]
.text:00003667                 call    ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)
.text:0000366C                 cmp     [ebp+var_48C], 0
.text:00003673                 jz      short loc_3686
.text:00003675                 mov     eax, [ebp+var_48C]
.text:0000367B                 add     eax, 8
.text:0000367E                 mov     [ebp+var_7A8], eax
.text:00003684                 jmp     short loc_3690
.text:00003686 ; ---------------------------------------------------------------------------
.text:00003686
.text:00003686 loc_3686:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1D23j
.text:00003686                 mov     [ebp+var_7A8], 0
.text:00003690
.text:00003690 loc_3690:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1D34j
.text:00003690                 mov     ecx, [ebp+var_7A8]
.text:00003696                 mov     [ebp+var_488], ecx
.text:0000369C                 mov     [ebp+var_4AD], 0
.text:000036A3                 mov     [ebp+var_4B9], 0
.text:000036AA                 lea     ecx, [ebp+var_4D0]
.text:000036B0                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:000036B5                 mov     byte ptr [ebp+var_4], 18h
.text:000036B9                 lea     ecx, [ebp+var_4DC]
.text:000036BF                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(void)
.text:000036C4                 mov     byte ptr [ebp+var_4], 19h
.text:000036C8                 push    1               ; unsigned int
.text:000036CA                 push    0               ; bool
.text:000036CC                 lea     edx, [ebp+var_4D0]
.text:000036D2                 push    edx             ; struct UString *
.text:000036D3                 lea     eax, [ebp+var_4B9]
.text:000036D9                 push    eax             ; bool *
.text:000036DA                 lea     ecx, [ebp+var_4AD]
.text:000036E0                 push    ecx             ; bool *
.text:000036E1                 lea     ecx, [ebp+var_248]
.text:000036E7                 call    ??B?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ ; CMyComPtr<ICryptoGetTextPassword>::operator ICryptoGetTextPassword *(void)
.text:000036EC                 push    eax             ; struct ICryptoGetTextPassword *
.text:000036ED                 lea     ecx, [ebp+var_4DC]
.text:000036F3                 call    ??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator&(void)
.text:000036F8                 push    eax             ; struct ISequentialInStream **
.text:000036F9                 push    0               ; struct ICompressProgressInfo *
.text:000036FB                 push    0               ; struct ISequentialOutStream *
.text:000036FD                 push    0               ; unsigned __int64 *
.text:000036FF                 mov     edx, [ebp+var_3FC]
.text:00003705                 push    edx             ; unsigned int
.text:00003706                 mov     eax, [ebp+arg_4]
.text:00003709                 push    eax             ; struct NArchive::N7z::CFolders *
.text:0000370A                 mov     ecx, [ebp+arg_4]
.text:0000370D                 mov     edx, [ecx+0FCh]
.text:00003713                 push    edx
.text:00003714                 mov     eax, [ecx+0F8h]
.text:0000371A                 push    eax             ; unsigned __int64
.text:0000371B                 mov     ecx, [ebp+arg_0]
.text:0000371E                 push    ecx             ; struct IInStream *
.text:0000371F                 lea     ecx, [ebp+var_1DC] ; this
.text:00003725                 call    ?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z ; NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)
.text:0000372A                 mov     [ebp+var_4E4], eax
.text:00003730                 mov     edx, [ebp+var_4E4]
.text:00003736                 mov     [ebp+var_4E8], edx
.text:0000373C                 cmp     [ebp+var_4E8], 0
.text:00003743                 jz      loc_3844
.text:00003749                 mov     eax, [ebp+var_4E8]
.text:0000374F                 mov     [ebp+var_708], eax
.text:00003755                 mov     byte ptr [ebp+var_4], 18h
.text:00003759                 lea     ecx, [ebp+var_4DC]
.text:0000375F                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00003764                 mov     byte ptr [ebp+var_4], 15h
.text:00003768                 lea     ecx, [ebp+var_4D0] ; this
.text:0000376E                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00003773                 mov     byte ptr [ebp+var_4], 13h
.text:00003777                 lea     ecx, [ebp+var_498]
.text:0000377D                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00003782                 mov     byte ptr [ebp+var_4], 12h
.text:00003786                 lea     ecx, [ebp+var_480]
.text:0000378C                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00003791                 mov     byte ptr [ebp+var_4], 11h
.text:00003795                 lea     ecx, [ebp+var_440]
.text:0000379B                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:000037A0                 mov     byte ptr [ebp+var_4], 10h
.text:000037A4                 lea     ecx, [ebp+var_3E8] ; this
.text:000037AA                 call    ??1CEncoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CEncoder::~CEncoder(void)
.text:000037AF                 mov     byte ptr [ebp+var_4], 0Bh
.text:000037B3                 lea     ecx, [ebp+var_324] ; this
.text:000037B9                 call    ??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:000037BE                 mov     byte ptr [ebp+var_4], 9
.text:000037C2                 lea     ecx, [ebp+var_248]
.text:000037C8                 call    ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)
.text:000037CD                 mov     byte ptr [ebp+var_4], 8
.text:000037D1                 lea     ecx, [ebp+var_1F0] ; this
.text:000037D7                 call    ??1CThreadDecoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CThreadDecoder::~CThreadDecoder(void)
.text:000037DC                 mov     byte ptr [ebp+var_4], 7
.text:000037E0                 lea     ecx, [ebp+var_13C] ; this
.text:000037E6                 call    ??1CStreamBinder@@QAE@XZ ; CStreamBinder::~CStreamBinder(void)
.text:000037EB                 mov     byte ptr [ebp+var_4], 4
.text:000037EF                 lea     ecx, [ebp+var_114]
.text:000037F5                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:000037FA                 mov     byte ptr [ebp+var_4], 3
.text:000037FE                 lea     ecx, [ebp+var_80]
.text:00003801                 call    ??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>(void)
.text:00003806                 mov     byte ptr [ebp+var_4], 2
.text:0000380A                 lea     ecx, [ebp+var_6C]
.text:0000380D                 call    ??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>(void)
.text:00003812                 mov     byte ptr [ebp+var_4], 1
.text:00003816                 lea     ecx, [ebp+var_44]
.text:00003819                 call    ??1?$CObjArray@H@@QAE@XZ ; CObjArray<int>::~CObjArray<int>(void)
.text:0000381E                 mov     byte ptr [ebp+var_4], 0
.text:00003822                 lea     ecx, [ebp+var_2C]
.text:00003825                 call    ??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>(void)
.text:0000382A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003831                 lea     ecx, [ebp+var_20]
.text:00003834                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:00003839                 mov     eax, [ebp+var_708]
.text:0000383F                 jmp     loc_57C7
.text:00003844 ; ---------------------------------------------------------------------------
.text:00003844
.text:00003844 loc_3844:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1DF3j
.text:00003844                 lea     ecx, [ebp+var_4DC]
.text:0000384A                 call    ??7?$CMyComPtr@UISequentialInStream@@@@QBE_NXZ ; CMyComPtr<ISequentialInStream>::operator!(void)
.text:0000384F                 movzx   ecx, al
.text:00003852                 test    ecx, ecx
.text:00003854                 jz      loc_3953
.text:0000385A                 mov     [ebp+var_70C], 80004005h
.text:00003864                 mov     byte ptr [ebp+var_4], 18h
.text:00003868                 lea     ecx, [ebp+var_4DC]
.text:0000386E                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00003873                 mov     byte ptr [ebp+var_4], 15h
.text:00003877                 lea     ecx, [ebp+var_4D0] ; this
.text:0000387D                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00003882                 mov     byte ptr [ebp+var_4], 13h
.text:00003886                 lea     ecx, [ebp+var_498]
.text:0000388C                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00003891                 mov     byte ptr [ebp+var_4], 12h
.text:00003895                 lea     ecx, [ebp+var_480]
.text:0000389B                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:000038A0                 mov     byte ptr [ebp+var_4], 11h
.text:000038A4                 lea     ecx, [ebp+var_440]
.text:000038AA                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:000038AF                 mov     byte ptr [ebp+var_4], 10h
.text:000038B3                 lea     ecx, [ebp+var_3E8] ; this
.text:000038B9                 call    ??1CEncoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CEncoder::~CEncoder(void)
.text:000038BE                 mov     byte ptr [ebp+var_4], 0Bh
.text:000038C2                 lea     ecx, [ebp+var_324] ; this
.text:000038C8                 call    ??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:000038CD                 mov     byte ptr [ebp+var_4], 9
.text:000038D1                 lea     ecx, [ebp+var_248]
.text:000038D7                 call    ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)
.text:000038DC                 mov     byte ptr [ebp+var_4], 8
.text:000038E0                 lea     ecx, [ebp+var_1F0] ; this
.text:000038E6                 call    ??1CThreadDecoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CThreadDecoder::~CThreadDecoder(void)
.text:000038EB                 mov     byte ptr [ebp+var_4], 7
.text:000038EF                 lea     ecx, [ebp+var_13C] ; this
.text:000038F5                 call    ??1CStreamBinder@@QAE@XZ ; CStreamBinder::~CStreamBinder(void)
.text:000038FA                 mov     byte ptr [ebp+var_4], 4
.text:000038FE                 lea     ecx, [ebp+var_114]
.text:00003904                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00003909                 mov     byte ptr [ebp+var_4], 3
.text:0000390D                 lea     ecx, [ebp+var_80]
.text:00003910                 call    ??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>(void)
.text:00003915                 mov     byte ptr [ebp+var_4], 2
.text:00003919                 lea     ecx, [ebp+var_6C]
.text:0000391C                 call    ??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>(void)
.text:00003921                 mov     byte ptr [ebp+var_4], 1
.text:00003925                 lea     ecx, [ebp+var_44]
.text:00003928                 call    ??1?$CObjArray@H@@QAE@XZ ; CObjArray<int>::~CObjArray<int>(void)
.text:0000392D                 mov     byte ptr [ebp+var_4], 0
.text:00003931                 lea     ecx, [ebp+var_2C]
.text:00003934                 call    ??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>(void)
.text:00003939                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003940                 lea     ecx, [ebp+var_20]
.text:00003943                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:00003948                 mov     eax, [ebp+var_70C]
.text:0000394E                 jmp     loc_57C7
.text:00003953 ; ---------------------------------------------------------------------------
.text:00003953
.text:00003953 loc_3953:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1F04j
.text:00003953                 lea     edx, [ebp+var_4DC]
.text:00003959                 push    edx
.text:0000395A                 mov     ecx, [ebp+var_48C]
.text:00003960                 add     ecx, 38h ; '8'
.text:00003963                 call    ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@ABV0@@Z ; CMyComPtr<ISequentialInStream>::operator=(CMyComPtr<ISequentialInStream> const &)
.text:00003968                 mov     byte ptr [ebp+var_4], 18h
.text:0000396C                 lea     ecx, [ebp+var_4DC]
.text:00003972                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00003977                 mov     byte ptr [ebp+var_4], 15h
.text:0000397B                 lea     ecx, [ebp+var_4D0] ; this
.text:00003981                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00003986
.text:00003986 loc_3986:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1CA4j
.text:00003986                 mov     eax, [ebp+var_488]
.text:0000398C                 mov     ecx, [ebp+arg_4]
.text:0000398F                 mov     [eax+1Ch], ecx
.text:00003992                 lea     edx, [ebp+var_20]
.text:00003995                 push    edx
.text:00003996                 mov     ecx, [ebp+var_488]
.text:0000399C                 add     ecx, 20h ; ' '
.text:0000399F                 call    ??4?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAUIArchiveUpdateCallbackFile@@ABV0@@Z ; CMyComPtr<IArchiveUpdateCallbackFile>::operator=(CMyComPtr<IArchiveUpdateCallbackFile> const &)
.text:000039A4                 lea     eax, [ebp+var_2C]
.text:000039A7                 push    eax
.text:000039A8                 mov     ecx, [ebp+var_488]
.text:000039AE                 add     ecx, 24h ; '$'
.text:000039B1                 call    ??4?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAEPAUIArchiveExtractCallbackMessage@@ABV0@@Z ; CMyComPtr<IArchiveExtractCallbackMessage>::operator=(CMyComPtr<IArchiveExtractCallbackMessage> const &)
.text:000039B6                 mov     ecx, [ebp+arg_4]
.text:000039B9                 add     ecx, 118h
.text:000039BF                 call    ??B?$CObjArray@I@@QBEPBIXZ ; CObjArray<uint>::operator uint const *(void)
.text:000039C4                 mov     ecx, [ebp+var_3FC]
.text:000039CA                 mov     edx, [eax+ecx*4]
.text:000039CD                 mov     [ebp+var_4EC], edx
.text:000039D3                 lea     eax, [ebp+var_440]
.text:000039D9                 push    eax
.text:000039DA                 mov     ecx, [ebp+var_4EC]
.text:000039E0                 push    ecx
.text:000039E1                 mov     ecx, [ebp+var_488]
.text:000039E7                 call    ?Init@CRepackStreamBase@N7z@NArchive@@QAEJIPBV?$CRecordVector@_N@@@Z ; NArchive::N7z::CRepackStreamBase::Init(uint,CRecordVector<bool> const *)
.text:000039EC                 mov     [ebp+var_4F0], eax
.text:000039F2                 cmp     [ebp+var_4F0], 0
.text:000039F9                 jz      loc_3ADC
.text:000039FF                 mov     edx, [ebp+var_4F0]
.text:00003A05                 mov     [ebp+var_710], edx
.text:00003A0B                 mov     byte ptr [ebp+var_4], 13h
.text:00003A0F                 lea     ecx, [ebp+var_498]
.text:00003A15                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00003A1A                 mov     byte ptr [ebp+var_4], 12h
.text:00003A1E                 lea     ecx, [ebp+var_480]
.text:00003A24                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00003A29                 mov     byte ptr [ebp+var_4], 11h
.text:00003A2D                 lea     ecx, [ebp+var_440]
.text:00003A33                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:00003A38                 mov     byte ptr [ebp+var_4], 10h
.text:00003A3C                 lea     ecx, [ebp+var_3E8] ; this
.text:00003A42                 call    ??1CEncoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CEncoder::~CEncoder(void)
.text:00003A47                 mov     byte ptr [ebp+var_4], 0Bh
.text:00003A4B                 lea     ecx, [ebp+var_324] ; this
.text:00003A51                 call    ??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:00003A56                 mov     byte ptr [ebp+var_4], 9
.text:00003A5A                 lea     ecx, [ebp+var_248]
.text:00003A60                 call    ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)
.text:00003A65                 mov     byte ptr [ebp+var_4], 8
.text:00003A69                 lea     ecx, [ebp+var_1F0] ; this
.text:00003A6F                 call    ??1CThreadDecoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CThreadDecoder::~CThreadDecoder(void)
.text:00003A74                 mov     byte ptr [ebp+var_4], 7
.text:00003A78                 lea     ecx, [ebp+var_13C] ; this
.text:00003A7E                 call    ??1CStreamBinder@@QAE@XZ ; CStreamBinder::~CStreamBinder(void)
.text:00003A83                 mov     byte ptr [ebp+var_4], 4
.text:00003A87                 lea     ecx, [ebp+var_114]
.text:00003A8D                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00003A92                 mov     byte ptr [ebp+var_4], 3
.text:00003A96                 lea     ecx, [ebp+var_80]
.text:00003A99                 call    ??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>(void)
.text:00003A9E                 mov     byte ptr [ebp+var_4], 2
.text:00003AA2                 lea     ecx, [ebp+var_6C]
.text:00003AA5                 call    ??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>(void)
.text:00003AAA                 mov     byte ptr [ebp+var_4], 1
.text:00003AAE                 lea     ecx, [ebp+var_44]
.text:00003AB1                 call    ??1?$CObjArray@H@@QAE@XZ ; CObjArray<int>::~CObjArray<int>(void)
.text:00003AB6                 mov     byte ptr [ebp+var_4], 0
.text:00003ABA                 lea     ecx, [ebp+var_2C]
.text:00003ABD                 call    ??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>(void)
.text:00003AC2                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003AC9                 lea     ecx, [ebp+var_20]
.text:00003ACC                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:00003AD1                 mov     eax, [ebp+var_710]
.text:00003AD7                 jmp     loc_57C7
.text:00003ADC ; ---------------------------------------------------------------------------
.text:00003ADC
.text:00003ADC loc_3ADC:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+20A9j
.text:00003ADC                 mov     eax, [ebp+var_490]
.text:00003AE2                 mov     ecx, [ebp+arg_4]
.text:00003AE5                 mov     [eax+18h], ecx
.text:00003AE8                 lea     edx, [ebp+var_440]
.text:00003AEE                 push    edx
.text:00003AEF                 mov     eax, [ebp+var_4EC]
.text:00003AF5                 push    eax
.text:00003AF6                 lea     ecx, [ebp+var_480]
.text:00003AFC                 call    ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *(void)
.text:00003B01                 push    eax
.text:00003B02                 mov     ecx, [ebp+var_490]
.text:00003B08                 call    ?Init@CRepackInStreamWithSizes@N7z@NArchive@@QAEXPAUISequentialInStream@@IPBV?$CRecordVector@_N@@@Z ; NArchive::N7z::CRepackInStreamWithSizes::Init(ISequentialInStream *,uint,CRecordVector<bool> const *)
.text:00003B0D                 mov     ecx, [ebp+arg_1C]
.text:00003B10                 movzx   edx, byte ptr [ecx+2Ah]
.text:00003B14                 test    edx, edx
.text:00003B16                 jz      short loc_3B23
.text:00003B18                 lea     ecx, [ebp+var_1F0] ; this
.text:00003B1E                 call    ?Start@CVirtThread@@QAEXXZ ; CVirtThread::Start(void)
.text:00003B23
.text:00003B23 loc_3B23:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+21C6j
.text:00003B23                 lea     ecx, [ebp+var_114]
.text:00003B29                 call    ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *(void)
.text:00003B2E                 push    eax
.text:00003B2F                 mov     eax, [ebp+arg_10]
.text:00003B32                 add     eax, 30h ; '0'
.text:00003B35                 push    eax
.text:00003B36                 mov     ecx, [ebp+arg_C]
.text:00003B39                 add     ecx, 54h ; 'T'
.text:00003B3C                 call    ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *(void)
.text:00003B41                 push    eax
.text:00003B42                 lea     ecx, [ebp+var_474]
.text:00003B48                 push    ecx
.text:00003B49                 mov     edx, [ebp+arg_10]
.text:00003B4C                 add     edx, 24h ; '$'
.text:00003B4F                 push    edx
.text:00003B50                 mov     ecx, [ebp+arg_10]
.text:00003B53                 add     ecx, 54h ; 'T'
.text:00003B56                 call    ?AddNew@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEAAUCFolder@N7z@NArchive@@XZ ; CObjectVector<NArchive::N7z::CFolder>::AddNew(void)
.text:00003B5B                 push    eax
.text:00003B5C                 lea     eax, [ebp+var_F8]
.text:00003B62                 push    eax
.text:00003B63                 lea     ecx, [ebp+var_498]
.text:00003B69                 call    ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *(void)
.text:00003B6E                 push    eax
.text:00003B6F                 lea     ecx, [ebp+var_3E8]
.text:00003B75                 call    ?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z ; NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)
.text:00003B7A                 mov     [ebp+var_4F4], eax
.text:00003B80                 cmp     [ebp+var_4F4], 20000002h
.text:00003B8A                 jnz     loc_3C6B
.text:00003B90                 mov     [ebp+var_714], 80004005h
.text:00003B9A                 mov     byte ptr [ebp+var_4], 13h
.text:00003B9E                 lea     ecx, [ebp+var_498]
.text:00003BA4                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00003BA9                 mov     byte ptr [ebp+var_4], 12h
.text:00003BAD                 lea     ecx, [ebp+var_480]
.text:00003BB3                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00003BB8                 mov     byte ptr [ebp+var_4], 11h
.text:00003BBC                 lea     ecx, [ebp+var_440]
.text:00003BC2                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:00003BC7                 mov     byte ptr [ebp+var_4], 10h
.text:00003BCB                 lea     ecx, [ebp+var_3E8] ; this
.text:00003BD1                 call    ??1CEncoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CEncoder::~CEncoder(void)
.text:00003BD6                 mov     byte ptr [ebp+var_4], 0Bh
.text:00003BDA                 lea     ecx, [ebp+var_324] ; this
.text:00003BE0                 call    ??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:00003BE5                 mov     byte ptr [ebp+var_4], 9
.text:00003BE9                 lea     ecx, [ebp+var_248]
.text:00003BEF                 call    ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)
.text:00003BF4                 mov     byte ptr [ebp+var_4], 8
.text:00003BF8                 lea     ecx, [ebp+var_1F0] ; this
.text:00003BFE                 call    ??1CThreadDecoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CThreadDecoder::~CThreadDecoder(void)
.text:00003C03                 mov     byte ptr [ebp+var_4], 7
.text:00003C07                 lea     ecx, [ebp+var_13C] ; this
.text:00003C0D                 call    ??1CStreamBinder@@QAE@XZ ; CStreamBinder::~CStreamBinder(void)
.text:00003C12                 mov     byte ptr [ebp+var_4], 4
.text:00003C16                 lea     ecx, [ebp+var_114]
.text:00003C1C                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00003C21                 mov     byte ptr [ebp+var_4], 3
.text:00003C25                 lea     ecx, [ebp+var_80]
.text:00003C28                 call    ??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>(void)
.text:00003C2D                 mov     byte ptr [ebp+var_4], 2
.text:00003C31                 lea     ecx, [ebp+var_6C]
.text:00003C34                 call    ??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>(void)
.text:00003C39                 mov     byte ptr [ebp+var_4], 1
.text:00003C3D                 lea     ecx, [ebp+var_44]
.text:00003C40                 call    ??1?$CObjArray@H@@QAE@XZ ; CObjArray<int>::~CObjArray<int>(void)
.text:00003C45                 mov     byte ptr [ebp+var_4], 0
.text:00003C49                 lea     ecx, [ebp+var_2C]
.text:00003C4C                 call    ??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>(void)
.text:00003C51                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003C58                 lea     ecx, [ebp+var_20]
.text:00003C5B                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:00003C60                 mov     eax, [ebp+var_714]
.text:00003C66                 jmp     loc_57C7
.text:00003C6B ; ---------------------------------------------------------------------------
.text:00003C6B
.text:00003C6B loc_3C6B:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+223Aj
.text:00003C6B                 mov     ecx, [ebp+arg_1C]
.text:00003C6E                 movzx   edx, byte ptr [ecx+2Ah]
.text:00003C72                 test    edx, edx
.text:00003C74                 jz      loc_3FEA
.text:00003C7A                 lea     ecx, [ebp+var_1F0] ; this
.text:00003C80                 call    ?WaitExecuteFinish@CVirtThread@@QAEXXZ ; CVirtThread::WaitExecuteFinish(void)
.text:00003C85                 mov     eax, [ebp+var_178]
.text:00003C8B                 mov     [ebp+var_4F8], eax
.text:00003C91                 cmp     [ebp+var_4F8], 1
.text:00003C98                 jnz     loc_3EC0
.text:00003C9E                 lea     ecx, [ebp+var_2C]
.text:00003CA1                 call    ??B?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QBEPAUIArchiveExtractCallbackMessage@@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::operator IArchiveExtractCallbackMessage *(void)
.text:00003CA6                 test    eax, eax
.text:00003CA8                 jz      loc_3DE5
.text:00003CAE                 lea     ecx, [ebp+var_2C]
.text:00003CB1                 call    ??C?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QBEPAUIArchiveExtractCallbackMessage@@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::operator->(void)
.text:00003CB6                 mov     [ebp+var_7AC], eax
.text:00003CBC                 mov     esi, esp
.text:00003CBE                 push    2
.text:00003CC0                 mov     ecx, [ebp+arg_4]
.text:00003CC3                 add     ecx, 118h
.text:00003CC9                 call    ??B?$CObjArray@I@@QBEPBIXZ ; CObjArray<uint>::operator uint const *(void)
.text:00003CCE                 mov     ecx, [ebp+var_3FC]
.text:00003CD4                 mov     edx, [eax+ecx*4]
.text:00003CD7                 push    edx
.text:00003CD8                 push    1
.text:00003CDA                 mov     eax, [ebp+var_7AC]
.text:00003CE0                 push    eax
.text:00003CE1                 mov     ecx, [ebp+var_7AC]
.text:00003CE7                 mov     edx, [ecx]
.text:00003CE9                 mov     eax, [edx+14h]
.text:00003CEC                 call    eax
.text:00003CEE                 cmp     esi, esp
.text:00003CF0                 call    __RTC_CheckEsp
.text:00003CF5                 mov     [ebp+var_4FC], eax
.text:00003CFB                 cmp     [ebp+var_4FC], 0
.text:00003D02                 jz      loc_3DE5
.text:00003D08                 mov     ecx, [ebp+var_4FC]
.text:00003D0E                 mov     [ebp+var_718], ecx
.text:00003D14                 mov     byte ptr [ebp+var_4], 13h
.text:00003D18                 lea     ecx, [ebp+var_498]
.text:00003D1E                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00003D23                 mov     byte ptr [ebp+var_4], 12h
.text:00003D27                 lea     ecx, [ebp+var_480]
.text:00003D2D                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00003D32                 mov     byte ptr [ebp+var_4], 11h
.text:00003D36                 lea     ecx, [ebp+var_440]
.text:00003D3C                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:00003D41                 mov     byte ptr [ebp+var_4], 10h
.text:00003D45                 lea     ecx, [ebp+var_3E8] ; this
.text:00003D4B                 call    ??1CEncoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CEncoder::~CEncoder(void)
.text:00003D50                 mov     byte ptr [ebp+var_4], 0Bh
.text:00003D54                 lea     ecx, [ebp+var_324] ; this
.text:00003D5A                 call    ??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:00003D5F                 mov     byte ptr [ebp+var_4], 9
.text:00003D63                 lea     ecx, [ebp+var_248]
.text:00003D69                 call    ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)
.text:00003D6E                 mov     byte ptr [ebp+var_4], 8
.text:00003D72                 lea     ecx, [ebp+var_1F0] ; this
.text:00003D78                 call    ??1CThreadDecoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CThreadDecoder::~CThreadDecoder(void)
.text:00003D7D                 mov     byte ptr [ebp+var_4], 7
.text:00003D81                 lea     ecx, [ebp+var_13C] ; this
.text:00003D87                 call    ??1CStreamBinder@@QAE@XZ ; CStreamBinder::~CStreamBinder(void)
.text:00003D8C                 mov     byte ptr [ebp+var_4], 4
.text:00003D90                 lea     ecx, [ebp+var_114]
.text:00003D96                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00003D9B                 mov     byte ptr [ebp+var_4], 3
.text:00003D9F                 lea     ecx, [ebp+var_80]
.text:00003DA2                 call    ??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>(void)
.text:00003DA7                 mov     byte ptr [ebp+var_4], 2
.text:00003DAB                 lea     ecx, [ebp+var_6C]
.text:00003DAE                 call    ??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>(void)
.text:00003DB3                 mov     byte ptr [ebp+var_4], 1
.text:00003DB7                 lea     ecx, [ebp+var_44]
.text:00003DBA                 call    ??1?$CObjArray@H@@QAE@XZ ; CObjArray<int>::~CObjArray<int>(void)
.text:00003DBF                 mov     byte ptr [ebp+var_4], 0
.text:00003DC3                 lea     ecx, [ebp+var_2C]
.text:00003DC6                 call    ??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>(void)
.text:00003DCB                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003DD2                 lea     ecx, [ebp+var_20]
.text:00003DD5                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:00003DDA                 mov     eax, [ebp+var_718]
.text:00003DE0                 jmp     loc_57C7
.text:00003DE5 ; ---------------------------------------------------------------------------
.text:00003DE5
.text:00003DE5 loc_3DE5:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+2358j
.text:00003DE5                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+23B2j
.text:00003DE5                 mov     [ebp+var_71C], 80004005h
.text:00003DEF                 mov     byte ptr [ebp+var_4], 13h
.text:00003DF3                 lea     ecx, [ebp+var_498]
.text:00003DF9                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00003DFE                 mov     byte ptr [ebp+var_4], 12h
.text:00003E02                 lea     ecx, [ebp+var_480]
.text:00003E08                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00003E0D                 mov     byte ptr [ebp+var_4], 11h
.text:00003E11                 lea     ecx, [ebp+var_440]
.text:00003E17                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:00003E1C                 mov     byte ptr [ebp+var_4], 10h
.text:00003E20                 lea     ecx, [ebp+var_3E8] ; this
.text:00003E26                 call    ??1CEncoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CEncoder::~CEncoder(void)
.text:00003E2B                 mov     byte ptr [ebp+var_4], 0Bh
.text:00003E2F                 lea     ecx, [ebp+var_324] ; this
.text:00003E35                 call    ??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:00003E3A                 mov     byte ptr [ebp+var_4], 9
.text:00003E3E                 lea     ecx, [ebp+var_248]
.text:00003E44                 call    ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)
.text:00003E49                 mov     byte ptr [ebp+var_4], 8
.text:00003E4D                 lea     ecx, [ebp+var_1F0] ; this
.text:00003E53                 call    ??1CThreadDecoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CThreadDecoder::~CThreadDecoder(void)
.text:00003E58                 mov     byte ptr [ebp+var_4], 7
.text:00003E5C                 lea     ecx, [ebp+var_13C] ; this
.text:00003E62                 call    ??1CStreamBinder@@QAE@XZ ; CStreamBinder::~CStreamBinder(void)
.text:00003E67                 mov     byte ptr [ebp+var_4], 4
.text:00003E6B                 lea     ecx, [ebp+var_114]
.text:00003E71                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00003E76                 mov     byte ptr [ebp+var_4], 3
.text:00003E7A                 lea     ecx, [ebp+var_80]
.text:00003E7D                 call    ??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>(void)
.text:00003E82                 mov     byte ptr [ebp+var_4], 2
.text:00003E86                 lea     ecx, [ebp+var_6C]
.text:00003E89                 call    ??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>(void)
.text:00003E8E                 mov     byte ptr [ebp+var_4], 1
.text:00003E92                 lea     ecx, [ebp+var_44]
.text:00003E95                 call    ??1?$CObjArray@H@@QAE@XZ ; CObjArray<int>::~CObjArray<int>(void)
.text:00003E9A                 mov     byte ptr [ebp+var_4], 0
.text:00003E9E                 lea     ecx, [ebp+var_2C]
.text:00003EA1                 call    ??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>(void)
.text:00003EA6                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003EAD                 lea     ecx, [ebp+var_20]
.text:00003EB0                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:00003EB5                 mov     eax, [ebp+var_71C]
.text:00003EBB                 jmp     loc_57C7
.text:00003EC0 ; ---------------------------------------------------------------------------
.text:00003EC0
.text:00003EC0 loc_3EC0:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+2348j
.text:00003EC0                 mov     edx, [ebp+var_4F8]
.text:00003EC6                 mov     [ebp+var_500], edx
.text:00003ECC                 cmp     [ebp+var_500], 0
.text:00003ED3                 jz      loc_3FB6
.text:00003ED9                 mov     eax, [ebp+var_500]
.text:00003EDF                 mov     [ebp+var_720], eax
.text:00003EE5                 mov     byte ptr [ebp+var_4], 13h
.text:00003EE9                 lea     ecx, [ebp+var_498]
.text:00003EEF                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00003EF4                 mov     byte ptr [ebp+var_4], 12h
.text:00003EF8                 lea     ecx, [ebp+var_480]
.text:00003EFE                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00003F03                 mov     byte ptr [ebp+var_4], 11h
.text:00003F07                 lea     ecx, [ebp+var_440]
.text:00003F0D                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:00003F12                 mov     byte ptr [ebp+var_4], 10h
.text:00003F16                 lea     ecx, [ebp+var_3E8] ; this
.text:00003F1C                 call    ??1CEncoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CEncoder::~CEncoder(void)
.text:00003F21                 mov     byte ptr [ebp+var_4], 0Bh
.text:00003F25                 lea     ecx, [ebp+var_324] ; this
.text:00003F2B                 call    ??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:00003F30                 mov     byte ptr [ebp+var_4], 9
.text:00003F34                 lea     ecx, [ebp+var_248]
.text:00003F3A                 call    ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)
.text:00003F3F                 mov     byte ptr [ebp+var_4], 8
.text:00003F43                 lea     ecx, [ebp+var_1F0] ; this
.text:00003F49                 call    ??1CThreadDecoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CThreadDecoder::~CThreadDecoder(void)
.text:00003F4E                 mov     byte ptr [ebp+var_4], 7
.text:00003F52                 lea     ecx, [ebp+var_13C] ; this
.text:00003F58                 call    ??1CStreamBinder@@QAE@XZ ; CStreamBinder::~CStreamBinder(void)
.text:00003F5D                 mov     byte ptr [ebp+var_4], 4
.text:00003F61                 lea     ecx, [ebp+var_114]
.text:00003F67                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00003F6C                 mov     byte ptr [ebp+var_4], 3
.text:00003F70                 lea     ecx, [ebp+var_80]
.text:00003F73                 call    ??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>(void)
.text:00003F78                 mov     byte ptr [ebp+var_4], 2
.text:00003F7C                 lea     ecx, [ebp+var_6C]
.text:00003F7F                 call    ??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>(void)
.text:00003F84                 mov     byte ptr [ebp+var_4], 1
.text:00003F88                 lea     ecx, [ebp+var_44]
.text:00003F8B                 call    ??1?$CObjArray@H@@QAE@XZ ; CObjArray<int>::~CObjArray<int>(void)
.text:00003F90                 mov     byte ptr [ebp+var_4], 0
.text:00003F94                 lea     ecx, [ebp+var_2C]
.text:00003F97                 call    ??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>(void)
.text:00003F9C                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003FA3                 lea     ecx, [ebp+var_20]
.text:00003FA6                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:00003FAB                 mov     eax, [ebp+var_720]
.text:00003FB1                 jmp     loc_57C7
.text:00003FB6 ; ---------------------------------------------------------------------------
.text:00003FB6
.text:00003FB6 loc_3FB6:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+2583j
.text:00003FB6                 cmp     [ebp+var_4F4], 0
.text:00003FBD                 jnz     short loc_3FE5
.text:00003FBF                 mov     ecx, [ebp+var_124]
.text:00003FC5                 cmp     ecx, [ebp+var_454]
.text:00003FCB                 jnz     short loc_3FDB
.text:00003FCD                 mov     edx, [ebp+var_120]
.text:00003FD3                 cmp     edx, [ebp+var_450]
.text:00003FD9                 jz      short loc_3FE5
.text:00003FDB
.text:00003FDB loc_3FDB:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+267Bj
.text:00003FDB                 mov     [ebp+var_4F4], 80004005h
.text:00003FE5
.text:00003FE5 loc_3FE5:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+266Dj
.text:00003FE5                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+2689j
.text:00003FE5                 jmp     loc_4304
.text:00003FEA ; ---------------------------------------------------------------------------
.text:00003FEA
.text:00003FEA loc_3FEA:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+2324j
.text:00003FEA                 mov     eax, [ebp+var_48C]
.text:00003FF0                 cmp     dword ptr [eax+3Ch], 1
.text:00003FF4                 jnz     loc_420B
.text:00003FFA                 lea     ecx, [ebp+var_2C]
.text:00003FFD                 call    ??B?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QBEPAUIArchiveExtractCallbackMessage@@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::operator IArchiveExtractCallbackMessage *(void)
.text:00004002                 test    eax, eax
.text:00004004                 jz      loc_4130
.text:0000400A                 lea     ecx, [ebp+var_2C]
.text:0000400D                 call    ??C?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QBEPAUIArchiveExtractCallbackMessage@@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::operator->(void)
.text:00004012                 mov     [ebp+var_7B0], eax
.text:00004018                 mov     esi, esp
.text:0000401A                 push    2
.text:0000401C                 mov     ecx, [ebp+var_3FC]
.text:00004022                 push    ecx
.text:00004023                 push    2
.text:00004025                 mov     edx, [ebp+var_7B0]
.text:0000402B                 push    edx
.text:0000402C                 mov     eax, [ebp+var_7B0]
.text:00004032                 mov     ecx, [eax]
.text:00004034                 mov     edx, [ecx+14h]
.text:00004037                 call    edx
.text:00004039                 cmp     esi, esp
.text:0000403B                 call    __RTC_CheckEsp
.text:00004040                 mov     [ebp+var_504], eax
.text:00004046                 cmp     [ebp+var_504], 0
.text:0000404D                 jz      loc_4130
.text:00004053                 mov     eax, [ebp+var_504]
.text:00004059                 mov     [ebp+var_724], eax
.text:0000405F                 mov     byte ptr [ebp+var_4], 13h
.text:00004063                 lea     ecx, [ebp+var_498]
.text:00004069                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:0000406E                 mov     byte ptr [ebp+var_4], 12h
.text:00004072                 lea     ecx, [ebp+var_480]
.text:00004078                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:0000407D                 mov     byte ptr [ebp+var_4], 11h
.text:00004081                 lea     ecx, [ebp+var_440]
.text:00004087                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:0000408C                 mov     byte ptr [ebp+var_4], 10h
.text:00004090                 lea     ecx, [ebp+var_3E8] ; this
.text:00004096                 call    ??1CEncoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CEncoder::~CEncoder(void)
.text:0000409B                 mov     byte ptr [ebp+var_4], 0Bh
.text:0000409F                 lea     ecx, [ebp+var_324] ; this
.text:000040A5                 call    ??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:000040AA                 mov     byte ptr [ebp+var_4], 9
.text:000040AE                 lea     ecx, [ebp+var_248]
.text:000040B4                 call    ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)
.text:000040B9                 mov     byte ptr [ebp+var_4], 8
.text:000040BD                 lea     ecx, [ebp+var_1F0] ; this
.text:000040C3                 call    ??1CThreadDecoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CThreadDecoder::~CThreadDecoder(void)
.text:000040C8                 mov     byte ptr [ebp+var_4], 7
.text:000040CC                 lea     ecx, [ebp+var_13C] ; this
.text:000040D2                 call    ??1CStreamBinder@@QAE@XZ ; CStreamBinder::~CStreamBinder(void)
.text:000040D7                 mov     byte ptr [ebp+var_4], 4
.text:000040DB                 lea     ecx, [ebp+var_114]
.text:000040E1                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:000040E6                 mov     byte ptr [ebp+var_4], 3
.text:000040EA                 lea     ecx, [ebp+var_80]
.text:000040ED                 call    ??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>(void)
.text:000040F2                 mov     byte ptr [ebp+var_4], 2
.text:000040F6                 lea     ecx, [ebp+var_6C]
.text:000040F9                 call    ??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>(void)
.text:000040FE                 mov     byte ptr [ebp+var_4], 1
.text:00004102                 lea     ecx, [ebp+var_44]
.text:00004105                 call    ??1?$CObjArray@H@@QAE@XZ ; CObjArray<int>::~CObjArray<int>(void)
.text:0000410A                 mov     byte ptr [ebp+var_4], 0
.text:0000410E                 lea     ecx, [ebp+var_2C]
.text:00004111                 call    ??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>(void)
.text:00004116                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000411D                 lea     ecx, [ebp+var_20]
.text:00004120                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:00004125                 mov     eax, [ebp+var_724]
.text:0000412B                 jmp     loc_57C7
.text:00004130 ; ---------------------------------------------------------------------------
.text:00004130
.text:00004130 loc_4130:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+26B4j
.text:00004130                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+26FDj
.text:00004130                 mov     [ebp+var_728], 80004005h
.text:0000413A                 mov     byte ptr [ebp+var_4], 13h
.text:0000413E                 lea     ecx, [ebp+var_498]
.text:00004144                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00004149                 mov     byte ptr [ebp+var_4], 12h
.text:0000414D                 lea     ecx, [ebp+var_480]
.text:00004153                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00004158                 mov     byte ptr [ebp+var_4], 11h
.text:0000415C                 lea     ecx, [ebp+var_440]
.text:00004162                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:00004167                 mov     byte ptr [ebp+var_4], 10h
.text:0000416B                 lea     ecx, [ebp+var_3E8] ; this
.text:00004171                 call    ??1CEncoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CEncoder::~CEncoder(void)
.text:00004176                 mov     byte ptr [ebp+var_4], 0Bh
.text:0000417A                 lea     ecx, [ebp+var_324] ; this
.text:00004180                 call    ??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:00004185                 mov     byte ptr [ebp+var_4], 9
.text:00004189                 lea     ecx, [ebp+var_248]
.text:0000418F                 call    ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)
.text:00004194                 mov     byte ptr [ebp+var_4], 8
.text:00004198                 lea     ecx, [ebp+var_1F0] ; this
.text:0000419E                 call    ??1CThreadDecoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CThreadDecoder::~CThreadDecoder(void)
.text:000041A3                 mov     byte ptr [ebp+var_4], 7
.text:000041A7                 lea     ecx, [ebp+var_13C] ; this
.text:000041AD                 call    ??1CStreamBinder@@QAE@XZ ; CStreamBinder::~CStreamBinder(void)
.text:000041B2                 mov     byte ptr [ebp+var_4], 4
.text:000041B6                 lea     ecx, [ebp+var_114]
.text:000041BC                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:000041C1                 mov     byte ptr [ebp+var_4], 3
.text:000041C5                 lea     ecx, [ebp+var_80]
.text:000041C8                 call    ??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>(void)
.text:000041CD                 mov     byte ptr [ebp+var_4], 2
.text:000041D1                 lea     ecx, [ebp+var_6C]
.text:000041D4                 call    ??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>(void)
.text:000041D9                 mov     byte ptr [ebp+var_4], 1
.text:000041DD                 lea     ecx, [ebp+var_44]
.text:000041E0                 call    ??1?$CObjArray@H@@QAE@XZ ; CObjArray<int>::~CObjArray<int>(void)
.text:000041E5                 mov     byte ptr [ebp+var_4], 0
.text:000041E9                 lea     ecx, [ebp+var_2C]
.text:000041EC                 call    ??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>(void)
.text:000041F1                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000041F8                 lea     ecx, [ebp+var_20]
.text:000041FB                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:00004200                 mov     eax, [ebp+var_728]
.text:00004206                 jmp     loc_57C7
.text:0000420B ; ---------------------------------------------------------------------------
.text:0000420B
.text:0000420B loc_420B:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+26A4j
.text:0000420B                 mov     ecx, [ebp+var_48C]
.text:00004211                 mov     edx, [ecx+3Ch]
.text:00004214                 mov     [ebp+var_508], edx
.text:0000421A                 cmp     [ebp+var_508], 0
.text:00004221                 jz      loc_4304
.text:00004227                 mov     eax, [ebp+var_508]
.text:0000422D                 mov     [ebp+var_72C], eax
.text:00004233                 mov     byte ptr [ebp+var_4], 13h
.text:00004237                 lea     ecx, [ebp+var_498]
.text:0000423D                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00004242                 mov     byte ptr [ebp+var_4], 12h
.text:00004246                 lea     ecx, [ebp+var_480]
.text:0000424C                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00004251                 mov     byte ptr [ebp+var_4], 11h
.text:00004255                 lea     ecx, [ebp+var_440]
.text:0000425B                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:00004260                 mov     byte ptr [ebp+var_4], 10h
.text:00004264                 lea     ecx, [ebp+var_3E8] ; this
.text:0000426A                 call    ??1CEncoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CEncoder::~CEncoder(void)
.text:0000426F                 mov     byte ptr [ebp+var_4], 0Bh
.text:00004273                 lea     ecx, [ebp+var_324] ; this
.text:00004279                 call    ??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:0000427E                 mov     byte ptr [ebp+var_4], 9
.text:00004282                 lea     ecx, [ebp+var_248]
.text:00004288                 call    ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)
.text:0000428D                 mov     byte ptr [ebp+var_4], 8
.text:00004291                 lea     ecx, [ebp+var_1F0] ; this
.text:00004297                 call    ??1CThreadDecoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CThreadDecoder::~CThreadDecoder(void)
.text:0000429C                 mov     byte ptr [ebp+var_4], 7
.text:000042A0                 lea     ecx, [ebp+var_13C] ; this
.text:000042A6                 call    ??1CStreamBinder@@QAE@XZ ; CStreamBinder::~CStreamBinder(void)
.text:000042AB                 mov     byte ptr [ebp+var_4], 4
.text:000042AF                 lea     ecx, [ebp+var_114]
.text:000042B5                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:000042BA                 mov     byte ptr [ebp+var_4], 3
.text:000042BE                 lea     ecx, [ebp+var_80]
.text:000042C1                 call    ??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>(void)
.text:000042C6                 mov     byte ptr [ebp+var_4], 2
.text:000042CA                 lea     ecx, [ebp+var_6C]
.text:000042CD                 call    ??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>(void)
.text:000042D2                 mov     byte ptr [ebp+var_4], 1
.text:000042D6                 lea     ecx, [ebp+var_44]
.text:000042D9                 call    ??1?$CObjArray@H@@QAE@XZ ; CObjArray<int>::~CObjArray<int>(void)
.text:000042DE                 mov     byte ptr [ebp+var_4], 0
.text:000042E2                 lea     ecx, [ebp+var_2C]
.text:000042E5                 call    ??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>(void)
.text:000042EA                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000042F1                 lea     ecx, [ebp+var_20]
.text:000042F4                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:000042F9                 mov     eax, [ebp+var_72C]
.text:000042FF                 jmp     loc_57C7
.text:00004304 ; ---------------------------------------------------------------------------
.text:00004304
.text:00004304 loc_4304:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *):loc_3FE5j
.text:00004304                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+28D1j
.text:00004304                 mov     ecx, [ebp+var_4F4]
.text:0000430A                 mov     [ebp+var_50C], ecx
.text:00004310                 cmp     [ebp+var_50C], 0
.text:00004317                 jz      loc_43FA
.text:0000431D                 mov     edx, [ebp+var_50C]
.text:00004323                 mov     [ebp+var_730], edx
.text:00004329                 mov     byte ptr [ebp+var_4], 13h
.text:0000432D                 lea     ecx, [ebp+var_498]
.text:00004333                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00004338                 mov     byte ptr [ebp+var_4], 12h
.text:0000433C                 lea     ecx, [ebp+var_480]
.text:00004342                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00004347                 mov     byte ptr [ebp+var_4], 11h
.text:0000434B                 lea     ecx, [ebp+var_440]
.text:00004351                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:00004356                 mov     byte ptr [ebp+var_4], 10h
.text:0000435A                 lea     ecx, [ebp+var_3E8] ; this
.text:00004360                 call    ??1CEncoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CEncoder::~CEncoder(void)
.text:00004365                 mov     byte ptr [ebp+var_4], 0Bh
.text:00004369                 lea     ecx, [ebp+var_324] ; this
.text:0000436F                 call    ??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:00004374                 mov     byte ptr [ebp+var_4], 9
.text:00004378                 lea     ecx, [ebp+var_248]
.text:0000437E                 call    ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)
.text:00004383                 mov     byte ptr [ebp+var_4], 8
.text:00004387                 lea     ecx, [ebp+var_1F0] ; this
.text:0000438D                 call    ??1CThreadDecoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CThreadDecoder::~CThreadDecoder(void)
.text:00004392                 mov     byte ptr [ebp+var_4], 7
.text:00004396                 lea     ecx, [ebp+var_13C] ; this
.text:0000439C                 call    ??1CStreamBinder@@QAE@XZ ; CStreamBinder::~CStreamBinder(void)
.text:000043A1                 mov     byte ptr [ebp+var_4], 4
.text:000043A5                 lea     ecx, [ebp+var_114]
.text:000043AB                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:000043B0                 mov     byte ptr [ebp+var_4], 3
.text:000043B4                 lea     ecx, [ebp+var_80]
.text:000043B7                 call    ??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>(void)
.text:000043BC                 mov     byte ptr [ebp+var_4], 2
.text:000043C0                 lea     ecx, [ebp+var_6C]
.text:000043C3                 call    ??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>(void)
.text:000043C8                 mov     byte ptr [ebp+var_4], 1
.text:000043CC                 lea     ecx, [ebp+var_44]
.text:000043CF                 call    ??1?$CObjArray@H@@QAE@XZ ; CObjArray<int>::~CObjArray<int>(void)
.text:000043D4                 mov     byte ptr [ebp+var_4], 0
.text:000043D8                 lea     ecx, [ebp+var_2C]
.text:000043DB                 call    ??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>(void)
.text:000043E0                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000043E7                 lea     ecx, [ebp+var_20]
.text:000043EA                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:000043EF                 mov     eax, [ebp+var_730]
.text:000043F5                 jmp     loc_57C7
.text:000043FA ; ---------------------------------------------------------------------------
.text:000043FA
.text:000043FA loc_43FA:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+29C7j
.text:000043FA                 mov     ecx, [ebp+var_488] ; this
.text:00004400                 call    ?CheckFinishedState@CRepackStreamBase@N7z@NArchive@@QBEJXZ ; NArchive::N7z::CRepackStreamBase::CheckFinishedState(void)
.text:00004405                 mov     [ebp+var_510], eax
.text:0000440B                 cmp     [ebp+var_510], 0
.text:00004412                 jz      loc_44F5
.text:00004418                 mov     eax, [ebp+var_510]
.text:0000441E                 mov     [ebp+var_734], eax
.text:00004424                 mov     byte ptr [ebp+var_4], 13h
.text:00004428                 lea     ecx, [ebp+var_498]
.text:0000442E                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00004433                 mov     byte ptr [ebp+var_4], 12h
.text:00004437                 lea     ecx, [ebp+var_480]
.text:0000443D                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00004442                 mov     byte ptr [ebp+var_4], 11h
.text:00004446                 lea     ecx, [ebp+var_440]
.text:0000444C                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:00004451                 mov     byte ptr [ebp+var_4], 10h
.text:00004455                 lea     ecx, [ebp+var_3E8] ; this
.text:0000445B                 call    ??1CEncoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CEncoder::~CEncoder(void)
.text:00004460                 mov     byte ptr [ebp+var_4], 0Bh
.text:00004464                 lea     ecx, [ebp+var_324] ; this
.text:0000446A                 call    ??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:0000446F                 mov     byte ptr [ebp+var_4], 9
.text:00004473                 lea     ecx, [ebp+var_248]
.text:00004479                 call    ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)
.text:0000447E                 mov     byte ptr [ebp+var_4], 8
.text:00004482                 lea     ecx, [ebp+var_1F0] ; this
.text:00004488                 call    ??1CThreadDecoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CThreadDecoder::~CThreadDecoder(void)
.text:0000448D                 mov     byte ptr [ebp+var_4], 7
.text:00004491                 lea     ecx, [ebp+var_13C] ; this
.text:00004497                 call    ??1CStreamBinder@@QAE@XZ ; CStreamBinder::~CStreamBinder(void)
.text:0000449C                 mov     byte ptr [ebp+var_4], 4
.text:000044A0                 lea     ecx, [ebp+var_114]
.text:000044A6                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:000044AB                 mov     byte ptr [ebp+var_4], 3
.text:000044AF                 lea     ecx, [ebp+var_80]
.text:000044B2                 call    ??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>(void)
.text:000044B7                 mov     byte ptr [ebp+var_4], 2
.text:000044BB                 lea     ecx, [ebp+var_6C]
.text:000044BE                 call    ??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>(void)
.text:000044C3                 mov     byte ptr [ebp+var_4], 1
.text:000044C7                 lea     ecx, [ebp+var_44]
.text:000044CA                 call    ??1?$CObjArray@H@@QAE@XZ ; CObjArray<int>::~CObjArray<int>(void)
.text:000044CF                 mov     byte ptr [ebp+var_4], 0
.text:000044D3                 lea     ecx, [ebp+var_2C]
.text:000044D6                 call    ??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>(void)
.text:000044DB                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000044E2                 lea     ecx, [ebp+var_20]
.text:000044E5                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:000044EA                 mov     eax, [ebp+var_734]
.text:000044F0                 jmp     loc_57C7
.text:000044F5 ; ---------------------------------------------------------------------------
.text:000044F5
.text:000044F5 loc_44F5:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+2AC2j
.text:000044F5                 mov     ecx, [ebp+var_474]
.text:000044FB                 cmp     ecx, [ebp+var_454]
.text:00004501                 jnz     short loc_4515
.text:00004503                 mov     edx, [ebp+var_470]
.text:00004509                 cmp     edx, [ebp+var_450]
.text:0000450F                 jz      loc_45F0
.text:00004515
.text:00004515 loc_4515:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+2BB1j
.text:00004515                 mov     [ebp+var_738], 80004005h
.text:0000451F                 mov     byte ptr [ebp+var_4], 13h
.text:00004523                 lea     ecx, [ebp+var_498]
.text:00004529                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:0000452E                 mov     byte ptr [ebp+var_4], 12h
.text:00004532                 lea     ecx, [ebp+var_480]
.text:00004538                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:0000453D                 mov     byte ptr [ebp+var_4], 11h
.text:00004541                 lea     ecx, [ebp+var_440]
.text:00004547                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:0000454C                 mov     byte ptr [ebp+var_4], 10h
.text:00004550                 lea     ecx, [ebp+var_3E8] ; this
.text:00004556                 call    ??1CEncoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CEncoder::~CEncoder(void)
.text:0000455B                 mov     byte ptr [ebp+var_4], 0Bh
.text:0000455F                 lea     ecx, [ebp+var_324] ; this
.text:00004565                 call    ??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:0000456A                 mov     byte ptr [ebp+var_4], 9
.text:0000456E                 lea     ecx, [ebp+var_248]
.text:00004574                 call    ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)
.text:00004579                 mov     byte ptr [ebp+var_4], 8
.text:0000457D                 lea     ecx, [ebp+var_1F0] ; this
.text:00004583                 call    ??1CThreadDecoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CThreadDecoder::~CThreadDecoder(void)
.text:00004588                 mov     byte ptr [ebp+var_4], 7
.text:0000458C                 lea     ecx, [ebp+var_13C] ; this
.text:00004592                 call    ??1CStreamBinder@@QAE@XZ ; CStreamBinder::~CStreamBinder(void)
.text:00004597                 mov     byte ptr [ebp+var_4], 4
.text:0000459B                 lea     ecx, [ebp+var_114]
.text:000045A1                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:000045A6                 mov     byte ptr [ebp+var_4], 3
.text:000045AA                 lea     ecx, [ebp+var_80]
.text:000045AD                 call    ??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>(void)
.text:000045B2                 mov     byte ptr [ebp+var_4], 2
.text:000045B6                 lea     ecx, [ebp+var_6C]
.text:000045B9                 call    ??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>(void)
.text:000045BE                 mov     byte ptr [ebp+var_4], 1
.text:000045C2                 lea     ecx, [ebp+var_44]
.text:000045C5                 call    ??1?$CObjArray@H@@QAE@XZ ; CObjArray<int>::~CObjArray<int>(void)
.text:000045CA                 mov     byte ptr [ebp+var_4], 0
.text:000045CE                 lea     ecx, [ebp+var_2C]
.text:000045D1                 call    ??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>(void)
.text:000045D6                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000045DD                 lea     ecx, [ebp+var_20]
.text:000045E0                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:000045E5                 mov     eax, [ebp+var_738]
.text:000045EB                 jmp     loc_57C7
.text:000045F0 ; ---------------------------------------------------------------------------
.text:000045F0
.text:000045F0 loc_45F0:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+2BBFj
.text:000045F0                 mov     byte ptr [ebp+var_4], 13h
.text:000045F4                 lea     ecx, [ebp+var_498]
.text:000045FA                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:000045FF                 mov     byte ptr [ebp+var_4], 12h
.text:00004603                 lea     ecx, [ebp+var_480]
.text:00004609                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:0000460E                 jmp     short loc_461F
.text:00004610 ; ---------------------------------------------------------------------------
.text:00004610
.text:00004610 loc_4610:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+2D11j
.text:00004610                 mov     eax, [ebp+var_468]
.text:00004616                 add     eax, 1
.text:00004619                 mov     [ebp+var_468], eax
.text:0000461F
.text:0000461F loc_461F:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+2CBEj
.text:0000461F                 mov     ecx, [ebp+arg_10]
.text:00004622                 add     ecx, 30h ; '0'
.text:00004625                 call    ?Size@?$CRecordVector@_K@@QBEIXZ ; CRecordVector<unsigned __int64>::Size(void)
.text:0000462A                 cmp     [ebp+var_468], eax
.text:00004630                 jnb     short loc_4663
.text:00004632                 mov     ecx, [ebp+var_468]
.text:00004638                 push    ecx
.text:00004639                 mov     ecx, [ebp+arg_10]
.text:0000463C                 add     ecx, 30h ; '0'
.text:0000463F                 call    ??A?$CRecordVector@_K@@QAEAA_KI@Z ; CRecordVector<unsigned __int64>::operator[](uint)
.text:00004644                 mov     edx, [ebp+var_10C]
.text:0000464A                 mov     ecx, [edx+28h]
.text:0000464D                 add     ecx, [eax]
.text:0000464F                 mov     edx, [edx+2Ch]
.text:00004652                 adc     edx, [eax+4]
.text:00004655                 mov     eax, [ebp+var_10C]
.text:0000465B                 mov     [eax+28h], ecx
.text:0000465E                 mov     [eax+2Ch], edx
.text:00004661                 jmp     short loc_4610
.text:00004663 ; ---------------------------------------------------------------------------
.text:00004663
.text:00004663 loc_4663:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+2CE0j
.text:00004663                 mov     ecx, [ebp+var_10C]
.text:00004669                 mov     edx, [ecx+20h]
.text:0000466C                 add     edx, [ebp+var_474]
.text:00004672                 mov     eax, [ecx+24h]
.text:00004675                 adc     eax, [ebp+var_470]
.text:0000467B                 mov     ecx, [ebp+var_10C]
.text:00004681                 mov     [ecx+20h], edx
.text:00004684                 mov     [ecx+24h], eax
.text:00004687                 mov     byte ptr [ebp+var_4], 11h
.text:0000468B                 lea     ecx, [ebp+var_440]
.text:00004691                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:00004696
.text:00004696 loc_4696:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *):loc_3235j
.text:00004696                 mov     edx, [ebp+var_3F8]
.text:0000469C                 mov     eax, [edx+4]
.text:0000469F                 push    eax
.text:000046A0                 mov     ecx, [ebp+arg_10]
.text:000046A3                 add     ecx, 18h
.text:000046A6                 call    ?Add@?$CRecordVector@I@@QAEII@Z ; CRecordVector<uint>::Add(uint)
.text:000046AB                 mov     [ebp+var_514], 0
.text:000046B5                 mov     ecx, [ebp+arg_4]
.text:000046B8                 add     ecx, 118h
.text:000046BE                 call    ??B?$CObjArray@I@@QBEPBIXZ ; CObjArray<uint>::operator uint const *(void)
.text:000046C3                 mov     ecx, [ebp+var_3FC]
.text:000046C9                 mov     edx, [eax+ecx*4]
.text:000046CC                 mov     [ebp+var_518], edx
.text:000046D2                 jmp     short loc_46E3
.text:000046D4 ; ---------------------------------------------------------------------------
.text:000046D4
.text:000046D4 loc_46D4:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+2E67j
.text:000046D4                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+2F68j
.text:000046D4                 mov     eax, [ebp+var_518]
.text:000046DA                 add     eax, 1
.text:000046DD                 mov     [ebp+var_518], eax
.text:000046E3
.text:000046E3 loc_46E3:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+2D82j
.text:000046E3                 mov     ecx, [ebp+var_514]
.text:000046E9                 cmp     ecx, [ebp+var_400]
.text:000046EF                 jnb     loc_48BD
.text:000046F5                 lea     ecx, [ebp+var_534] ; this
.text:000046FB                 call    ??0CFileItem@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFileItem::CFileItem(void)
.text:00004700                 lea     edx, [ebp+var_564]
.text:00004706                 push    edx             ; unsigned __int64 *
.text:00004707                 lea     eax, [ebp+var_534]
.text:0000470D                 push    eax             ; int
.text:0000470E                 mov     ecx, [ebp+var_518]
.text:00004714                 push    ecx             ; unsigned int
.text:00004715                 mov     edx, [ebp+arg_4]
.text:00004718                 push    edx             ; NArchive::N7z::CDatabase *
.text:00004719                 call    ?GetFile@N7z@NArchive@@YGXABUCDatabase@12@IAAUCFileItem@12@AAUCFileItem2@12@@Z ; NArchive::N7z::GetFile(NArchive::N7z::CDatabase const &,uint,NArchive::N7z::CFileItem &,NArchive::N7z::CFileItem2 &)
.text:0000471E                 lea     ecx, [ebp+var_578]
.text:00004724                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00004729                 mov     byte ptr [ebp+var_4], 1Ah
.text:0000472D                 lea     eax, [ebp+var_578]
.text:00004733                 push    eax             ; struct UString *
.text:00004734                 mov     ecx, [ebp+var_518]
.text:0000473A                 push    ecx             ; unsigned int
.text:0000473B                 mov     ecx, [ebp+arg_4] ; this
.text:0000473E                 call    ?GetPath@CDatabase@N7z@NArchive@@QBEXIAAVUString@@@Z ; NArchive::N7z::CDatabase::GetPath(uint,UString &)
.text:00004743                 movzx   edx, byte ptr [ebp+var_524]
.text:0000474A                 test    edx, edx
.text:0000474C                 jz      loc_48A9
.text:00004752                 mov     eax, [ebp+var_514]
.text:00004758                 add     eax, 1
.text:0000475B                 mov     [ebp+var_514], eax
.text:00004761                 lea     ecx, [ebp+var_44]
.text:00004764                 call    ??B?$CObjArray@H@@QAEPAHXZ ; CObjArray<int>::operator int *(void)
.text:00004769                 mov     ecx, [ebp+var_518]
.text:0000476F                 mov     edx, [eax+ecx*4]
.text:00004772                 mov     [ebp+var_580], edx
.text:00004778                 cmp     [ebp+var_580], 0
.text:0000477F                 jl      loc_48A9
.text:00004785                 mov     eax, [ebp+var_580]
.text:0000478B                 push    eax
.text:0000478C                 mov     ecx, [ebp+arg_8]
.text:0000478F                 call    ??A?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QBEABUCUpdateItem@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CUpdateItem>::operator[](uint)
.text:00004794                 mov     [ebp+var_584], eax
.text:0000479A                 mov     ecx, [ebp+var_584]
.text:000047A0                 movzx   edx, byte ptr [ecx+38h]
.text:000047A4                 test    edx, edx
.text:000047A6                 jz      short loc_47BC
.text:000047A8                 mov     byte ptr [ebp+var_4], 11h
.text:000047AC                 lea     ecx, [ebp+var_578] ; this
.text:000047B2                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000047B7                 jmp     loc_46D4
.text:000047BC ; ---------------------------------------------------------------------------
.text:000047BC
.text:000047BC loc_47BC:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+2E56j
.text:000047BC                 mov     eax, [ebp+var_584]
.text:000047C2                 movzx   ecx, byte ptr [eax+39h]
.text:000047C6                 test    ecx, ecx
.text:000047C8                 jz      loc_488C
.text:000047CE                 lea     ecx, [ebp+var_5A0] ; this
.text:000047D4                 call    ??0CFileItem@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFileItem::CFileItem(void)
.text:000047D9                 lea     edx, [ebp+var_564]
.text:000047DF                 push    edx             ; int
.text:000047E0                 lea     eax, [ebp+var_5A0]
.text:000047E6                 push    eax             ; NArchive::N7z::CFileItem *
.text:000047E7                 mov     ecx, [ebp+var_584]
.text:000047ED                 push    ecx             ; NArchive::N7z::CUpdateItem *
.text:000047EE                 call    ?FromUpdateItemToFileItem@N7z@NArchive@@YGXABUCUpdateItem@12@AAUCFileItem@12@AAUCFileItem2@12@@Z ; NArchive::N7z::FromUpdateItemToFileItem(NArchive::N7z::CUpdateItem const &,NArchive::N7z::CFileItem &,NArchive::N7z::CFileItem2 &)
.text:000047F3                 mov     edx, [ebp+var_534]
.text:000047F9                 mov     [ebp+var_5A0], edx
.text:000047FF                 mov     eax, [ebp+var_530]
.text:00004805                 mov     [ebp+var_59C], eax
.text:0000480B                 mov     ecx, [ebp+var_528]
.text:00004811                 mov     [ebp+var_594], ecx
.text:00004817                 mov     dl, byte ptr [ebp+var_524+2]
.text:0000481D                 mov     byte ptr [ebp+var_590+2], dl
.text:00004823                 mov     al, byte ptr [ebp+var_524]
.text:00004829                 mov     byte ptr [ebp+var_590], al
.text:0000482F                 mov     ecx, [ebp+var_5A0]
.text:00004835                 mov     [ebp+var_534], ecx
.text:0000483B                 mov     edx, [ebp+var_59C]
.text:00004841                 mov     [ebp+var_530], edx
.text:00004847                 mov     eax, [ebp+var_598]
.text:0000484D                 mov     [ebp+var_52C], eax
.text:00004853                 mov     ecx, [ebp+var_594]
.text:00004859                 mov     [ebp+var_528], ecx
.text:0000485F                 mov     edx, [ebp+var_590]
.text:00004865                 mov     [ebp+var_524], edx
.text:0000486B                 mov     eax, [ebp+var_58C]
.text:00004871                 mov     [ebp+var_520], eax
.text:00004877                 mov     ecx, [ebp+var_584]
.text:0000487D                 add     ecx, 28h ; '('
.text:00004880                 push    ecx
.text:00004881                 lea     ecx, [ebp+var_578]
.text:00004887                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:0000488C
.text:0000488C loc_488C:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+2E78j
.text:0000488C                 lea     edx, [ebp+var_578]
.text:00004892                 push    edx             ; struct UString *
.text:00004893                 lea     eax, [ebp+var_564]
.text:00004899                 push    eax             ; struct NArchive::N7z::CFileItem2 *
.text:0000489A                 lea     ecx, [ebp+var_534]
.text:000048A0                 push    ecx             ; struct NArchive::N7z::CFileItem *
.text:000048A1                 mov     ecx, [ebp+arg_10] ; this
.text:000048A4                 call    ?AddFile@CArchiveDatabaseOut@N7z@NArchive@@QAEXABUCFileItem@23@ABUCFileItem2@23@ABVUString@@@Z ; NArchive::N7z::CArchiveDatabaseOut::AddFile(NArchive::N7z::CFileItem const &,NArchive::N7z::CFileItem2 const &,UString const &)
.text:000048A9
.text:000048A9 loc_48A9:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+2DFCj
.text:000048A9                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+2E2Fj
.text:000048A9                 mov     byte ptr [ebp+var_4], 11h
.text:000048AD                 lea     ecx, [ebp+var_578] ; this
.text:000048B3                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000048B8                 jmp     loc_46D4
.text:000048BD ; ---------------------------------------------------------------------------
.text:000048BD
.text:000048BD loc_48BD:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+2D9Fj
.text:000048BD                 jmp     loc_2CE1
.text:000048C2 ; ---------------------------------------------------------------------------
.text:000048C2
.text:000048C2 loc_48C2:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+13B4j
.text:000048C2                 mov     ecx, [ebp+var_3F0]
.text:000048C8                 call    ?Size@?$CRecordVector@I@@QBEIXZ ; CRecordVector<uint>::Size(void)
.text:000048CD                 mov     [ebp+var_5A8], eax
.text:000048D3                 cmp     [ebp+var_5A8], 0
.text:000048DA                 jnz     short loc_48FF
.text:000048DC                 mov     byte ptr [ebp+var_4], 10h
.text:000048E0                 lea     ecx, [ebp+var_3E8] ; this
.text:000048E6                 call    ??1CEncoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CEncoder::~CEncoder(void)
.text:000048EB                 mov     byte ptr [ebp+var_4], 0Bh
.text:000048EF                 lea     ecx, [ebp+var_324] ; this
.text:000048F5                 call    ??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:000048FA                 jmp     loc_2B07
.text:000048FF ; ---------------------------------------------------------------------------
.text:000048FF
.text:000048FF loc_48FF:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+2F8Aj
.text:000048FF                 lea     ecx, [ebp+var_5B8]
.text:00004905                 call    ??0?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CRefItem>::CRecordVector<NArchive::N7z::CRefItem>(void)
.text:0000490A                 mov     byte ptr [ebp+var_4], 1Bh
.text:0000490E                 mov     edx, [ebp+var_5A8]
.text:00004914                 push    edx
.text:00004915                 lea     ecx, [ebp+var_5B8]
.text:0000491B                 call    ?ClearAndSetSize@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEXI@Z ; CRecordVector<NArchive::N7z::CRefItem>::ClearAndSetSize(uint)
.text:00004920                 cmp     [ebp+var_14], 0
.text:00004924                 ja      short loc_492C
.text:00004926                 cmp     [ebp+var_18], 1
.text:0000492A                 jbe     short loc_4938
.text:0000492C
.text:0000492C loc_492C:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+2FD4j
.text:0000492C                 mov     [ebp+var_7B4], 1
.text:00004936                 jmp     short loc_4942
.text:00004938 ; ---------------------------------------------------------------------------
.text:00004938
.text:00004938 loc_4938:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+2FDAj
.text:00004938                 mov     [ebp+var_7B4], 0
.text:00004942
.text:00004942 loc_4942:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+2FE6j
.text:00004942                 mov     al, byte ptr [ebp+var_7B4]
.text:00004948                 mov     [ebp+var_5BD], al
.text:0000494E                 mov     [ebp+var_100], 0
.text:00004958                 jmp     short loc_4969
.text:0000495A ; ---------------------------------------------------------------------------
.text:0000495A
.text:0000495A loc_495A:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+309Dj
.text:0000495A                 mov     ecx, [ebp+var_100]
.text:00004960                 add     ecx, 1
.text:00004963                 mov     [ebp+var_100], ecx
.text:00004969
.text:00004969 loc_4969:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+3008j
.text:00004969                 mov     edx, [ebp+var_100]
.text:0000496F                 cmp     edx, [ebp+var_5A8]
.text:00004975                 jnb     short loc_49F2
.text:00004977                 movzx   eax, [ebp+var_5BD]
.text:0000497E                 push    eax             ; bool
.text:0000497F                 mov     ecx, [ebp+var_100]
.text:00004985                 push    ecx
.text:00004986                 mov     ecx, [ebp+var_3F0]
.text:0000498C                 call    ??A?$CRecordVector@I@@QBEABII@Z ; CRecordVector<uint>::operator[](uint)
.text:00004991                 mov     edx, [eax]
.text:00004993                 push    edx
.text:00004994                 mov     ecx, [ebp+arg_8]
.text:00004997                 call    ??A?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QBEABUCUpdateItem@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CUpdateItem>::operator[](uint)
.text:0000499C                 push    eax             ; struct NArchive::N7z::CUpdateItem *
.text:0000499D                 mov     eax, [ebp+var_100]
.text:000049A3                 push    eax
.text:000049A4                 mov     ecx, [ebp+var_3F0]
.text:000049AA                 call    ??A?$CRecordVector@I@@QBEABII@Z ; CRecordVector<uint>::operator[](uint)
.text:000049AF                 mov     ecx, [eax]
.text:000049B1                 push    ecx             ; unsigned int
.text:000049B2                 lea     ecx, [ebp+var_74C] ; this
.text:000049B8                 call    ??0CRefItem@N7z@NArchive@@QAE@IABUCUpdateItem@12@_N@Z ; NArchive::N7z::CRefItem::CRefItem(uint,NArchive::N7z::CUpdateItem const &,bool)
.text:000049BD                 mov     esi, eax
.text:000049BF                 mov     edx, [ebp+var_100]
.text:000049C5                 push    edx
.text:000049C6                 lea     ecx, [ebp+var_5B8]
.text:000049CC                 call    ??A?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEAAUCRefItem@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CRefItem>::operator[](uint)
.text:000049D1                 mov     ecx, [esi]
.text:000049D3                 mov     [eax], ecx
.text:000049D5                 mov     edx, [esi+4]
.text:000049D8                 mov     [eax+4], edx
.text:000049DB                 mov     ecx, [esi+8]
.text:000049DE                 mov     [eax+8], ecx
.text:000049E1                 mov     edx, [esi+0Ch]
.text:000049E4                 mov     [eax+0Ch], edx
.text:000049E7                 mov     ecx, [esi+10h]
.text:000049EA                 mov     [eax+10h], ecx
.text:000049ED                 jmp     loc_495A
.text:000049F2 ; ---------------------------------------------------------------------------
.text:000049F2
.text:000049F2 loc_49F2:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+3025j
.text:000049F2                 mov     dl, [ebp+var_5BD]
.text:000049F8                 mov     [ebp+var_5C5], dl
.text:000049FE                 lea     eax, [ebp+var_5C5]
.text:00004A04                 push    eax
.text:00004A05                 push    offset ?CompareUpdateItems@N7z@NArchive@@YGHPBUCRefItem@12@0PAX@Z ; NArchive::N7z::CompareUpdateItems(NArchive::N7z::CRefItem const *,NArchive::N7z::CRefItem const *,void *)
.text:00004A0A                 lea     ecx, [ebp+var_5B8]
.text:00004A10                 call    ?Sort@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEXP6GHPBUCRefItem@N7z@NArchive@@0PAX@Z1@Z ; CRecordVector<NArchive::N7z::CRefItem>::Sort(int (*)(NArchive::N7z::CRefItem const *,NArchive::N7z::CRefItem const *,void *),void *)
.text:00004A15                 mov     ecx, [ebp+var_5A8]
.text:00004A1B                 push    ecx
.text:00004A1C                 lea     ecx, [ebp+var_5D4]
.text:00004A22                 call    ??0?$CObjArray@I@@QAE@I@Z ; CObjArray<uint>::CObjArray<uint>(uint)
.text:00004A27                 mov     byte ptr [ebp+var_4], 1Ch
.text:00004A2B                 mov     [ebp+var_100], 0
.text:00004A35                 jmp     short loc_4A46
.text:00004A37 ; ---------------------------------------------------------------------------
.text:00004A37
.text:00004A37 loc_4A37:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+3139j
.text:00004A37                 mov     edx, [ebp+var_100]
.text:00004A3D                 add     edx, 1
.text:00004A40                 mov     [ebp+var_100], edx
.text:00004A46
.text:00004A46 loc_4A46:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+30E5j
.text:00004A46                 mov     eax, [ebp+var_100]
.text:00004A4C                 cmp     eax, [ebp+var_5A8]
.text:00004A52                 jnb     short loc_4A8B
.text:00004A54                 mov     ecx, [ebp+var_100]
.text:00004A5A                 push    ecx
.text:00004A5B                 lea     ecx, [ebp+var_5B8]
.text:00004A61                 call    ??A?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEAAUCRefItem@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CRefItem>::operator[](uint)
.text:00004A66                 mov     edx, [eax+4]
.text:00004A69                 mov     [ebp+var_5DC], edx
.text:00004A6F                 lea     ecx, [ebp+var_5D4]
.text:00004A75                 call    ??B?$CObjArray@I@@QAEPAIXZ ; CObjArray<uint>::operator uint *(void)
.text:00004A7A                 mov     ecx, [ebp+var_100]
.text:00004A80                 mov     edx, [ebp+var_5DC]
.text:00004A86                 mov     [eax+ecx*4], edx
.text:00004A89                 jmp     short loc_4A37
.text:00004A8B ; ---------------------------------------------------------------------------
.text:00004A8B
.text:00004A8B loc_4A8B:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+3102j
.text:00004A8B                 mov     [ebp+var_100], 0
.text:00004A95
.text:00004A95 loc_4A95:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+3C08j
.text:00004A95                 mov     eax, [ebp+var_100]
.text:00004A9B                 cmp     eax, [ebp+var_5A8]
.text:00004AA1                 jnb     loc_555D
.text:00004AA7                 mov     [ebp+var_5E4], 0
.text:00004AB1                 mov     [ebp+var_5E0], 0
.text:00004ABB                 mov     [ebp+var_5EC], 0
.text:00004AC5                 mov     [ebp+var_5E8], 0
.text:00004ACF                 jmp     short loc_4AE0
.text:00004AD1 ; ---------------------------------------------------------------------------
.text:00004AD1
.text:00004AD1 loc_4AD1:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *):loc_4C63j
.text:00004AD1                 mov     ecx, [ebp+var_5E8]
.text:00004AD7                 add     ecx, 1
.text:00004ADA                 mov     [ebp+var_5E8], ecx
.text:00004AE0
.text:00004AE0 loc_4AE0:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+317Fj
.text:00004AE0                 mov     edx, [ebp+var_100]
.text:00004AE6                 add     edx, [ebp+var_5E8]
.text:00004AEC                 cmp     edx, [ebp+var_5A8]
.text:00004AF2                 jnb     loc_4C68
.text:00004AF8                 mov     eax, [ebp+var_5E8]
.text:00004AFE                 xor     ecx, ecx
.text:00004B00                 mov     [ebp+var_7BC], eax
.text:00004B06                 mov     [ebp+var_7B8], ecx
.text:00004B0C                 mov     edx, [ebp+var_7B8]
.text:00004B12                 cmp     edx, [ebp+var_14]
.text:00004B15                 ja      loc_4C68
.text:00004B1B                 jb      short loc_4B2C
.text:00004B1D                 mov     eax, [ebp+var_7BC]
.text:00004B23                 cmp     eax, [ebp+var_18]
.text:00004B26                 jnb     loc_4C68
.text:00004B2C
.text:00004B2C loc_4B2C:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+31CBj
.text:00004B2C                 lea     ecx, [ebp+var_5D4]
.text:00004B32                 call    ??B?$CObjArray@I@@QAEPAIXZ ; CObjArray<uint>::operator uint *(void)
.text:00004B37                 mov     ecx, [ebp+var_100]
.text:00004B3D                 add     ecx, [ebp+var_5E8]
.text:00004B43                 mov     edx, [eax+ecx*4]
.text:00004B46                 push    edx
.text:00004B47                 mov     ecx, [ebp+arg_8]
.text:00004B4A                 call    ??A?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QBEABUCUpdateItem@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CUpdateItem>::operator[](uint)
.text:00004B4F                 mov     [ebp+var_5F0], eax
.text:00004B55                 mov     eax, [ebp+var_5F0]
.text:00004B5B                 mov     ecx, [ebp+var_5E4]
.text:00004B61                 add     ecx, [eax+20h]
.text:00004B64                 mov     edx, [ebp+var_5E0]
.text:00004B6A                 adc     edx, [eax+24h]
.text:00004B6D                 mov     [ebp+var_5E4], ecx
.text:00004B73                 mov     [ebp+var_5E0], edx
.text:00004B79                 mov     eax, [ebp+arg_1C]
.text:00004B7C                 mov     [ebp+var_7C0], eax
.text:00004B82                 mov     ecx, [ebp+var_7C0]
.text:00004B88                 mov     edx, [ebp+var_5E0]
.text:00004B8E                 cmp     edx, [ecx+24h]
.text:00004B91                 jb      short loc_4BAB
.text:00004B93                 ja      short loc_4BA6
.text:00004B95                 mov     eax, [ebp+var_7C0]
.text:00004B9B                 mov     ecx, [ebp+var_5E4]
.text:00004BA1                 cmp     ecx, [eax+20h]
.text:00004BA4                 jbe     short loc_4BAB
.text:00004BA6
.text:00004BA6 loc_4BA6:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+3243j
.text:00004BA6                 jmp     loc_4C68
.text:00004BAB ; ---------------------------------------------------------------------------
.text:00004BAB
.text:00004BAB loc_4BAB:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+3241j
.text:00004BAB                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+3254j
.text:00004BAB                 mov     edx, [ebp+arg_1C]
.text:00004BAE                 movzx   eax, byte ptr [edx+28h]
.text:00004BB2                 test    eax, eax
.text:00004BB4                 jz      loc_4C63
.text:00004BBA                 mov     ecx, [ebp+var_5F0]
.text:00004BC0                 add     ecx, 28h ; '('  ; this
.text:00004BC3                 call    ?ReverseFind_PathSepar@UString@@QBEHXZ ; UString::ReverseFind_PathSepar(void)
.text:00004BC8                 mov     [ebp+var_5F4], eax
.text:00004BCE                 mov     ecx, [ebp+var_5F0]
.text:00004BD4                 add     ecx, 28h ; '('  ; this
.text:00004BD7                 call    ?ReverseFind_Dot@UString@@QBEHXZ ; UString::ReverseFind_Dot(void)
.text:00004BDC                 mov     [ebp+var_5F8], eax
.text:00004BE2                 mov     ecx, [ebp+var_5F8]
.text:00004BE8                 cmp     ecx, [ebp+var_5F4]
.text:00004BEE                 jg      short loc_4C06
.text:00004BF0                 mov     ecx, [ebp+var_5F0]
.text:00004BF6                 add     ecx, 28h ; '('  ; this
.text:00004BF9                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:00004BFE                 mov     [ebp+var_7C4], eax
.text:00004C04                 jmp     short loc_4C15
.text:00004C06 ; ---------------------------------------------------------------------------
.text:00004C06
.text:00004C06 loc_4C06:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+329Ej
.text:00004C06                 mov     edx, [ebp+var_5F8]
.text:00004C0C                 add     edx, 1
.text:00004C0F                 mov     [ebp+var_7C4], edx
.text:00004C15
.text:00004C15 loc_4C15:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+32B4j
.text:00004C15                 mov     eax, [ebp+var_7C4]
.text:00004C1B                 push    eax             ; unsigned int
.text:00004C1C                 mov     ecx, [ebp+var_5F0]
.text:00004C22                 add     ecx, 28h ; '('  ; this
.text:00004C25                 call    ?Ptr@UString@@QBEPB_WI@Z ; UString::Ptr(uint)
.text:00004C2A                 mov     [ebp+var_5FC], eax
.text:00004C30                 cmp     [ebp+var_5E8], 0
.text:00004C37                 jnz     short loc_4C47
.text:00004C39                 mov     ecx, [ebp+var_5FC]
.text:00004C3F                 mov     [ebp+var_5EC], ecx
.text:00004C45                 jmp     short loc_4C63
.text:00004C47 ; ---------------------------------------------------------------------------
.text:00004C47
.text:00004C47 loc_4C47:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+32E7j
.text:00004C47                 mov     edx, [ebp+var_5EC]
.text:00004C4D                 push    edx             ; wchar_t *
.text:00004C4E                 mov     eax, [ebp+var_5FC]
.text:00004C54                 push    eax             ; wchar_t *
.text:00004C55                 call    ?StringsAreEqualNoCase@@YG_NPB_W0@Z ; StringsAreEqualNoCase(wchar_t const *,wchar_t const *)
.text:00004C5A                 movzx   ecx, al
.text:00004C5D                 test    ecx, ecx
.text:00004C5F                 jnz     short loc_4C63
.text:00004C61                 jmp     short loc_4C68
.text:00004C63 ; ---------------------------------------------------------------------------
.text:00004C63
.text:00004C63 loc_4C63:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+3264j
.text:00004C63                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+32F5j ...
.text:00004C63                 jmp     loc_4AD1
.text:00004C68 ; ---------------------------------------------------------------------------
.text:00004C68
.text:00004C68 loc_4C68:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+31A2j
.text:00004C68                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+31C5j ...
.text:00004C68                 cmp     [ebp+var_5E8], 1
.text:00004C6F                 jnb     short loc_4C7B
.text:00004C71                 mov     [ebp+var_5E8], 1
.text:00004C7B
.text:00004C7B loc_4C7B:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+331Fj
.text:00004C7B                 mov     ecx, [ebp+var_10C] ; this
.text:00004C81                 call    ?SetCur@CLocalProgress@@QAEJXZ ; CLocalProgress::SetCur(void)
.text:00004C86                 mov     [ebp+var_600], eax
.text:00004C8C                 cmp     [ebp+var_600], 0
.text:00004C93                 jz      loc_4D67
.text:00004C99                 mov     edx, [ebp+var_600]
.text:00004C9F                 mov     [ebp+var_750], edx
.text:00004CA5                 mov     byte ptr [ebp+var_4], 1Bh
.text:00004CA9                 lea     ecx, [ebp+var_5D4]
.text:00004CAF                 call    ??1?$CObjArray@I@@QAE@XZ ; CObjArray<uint>::~CObjArray<uint>(void)
.text:00004CB4                 mov     byte ptr [ebp+var_4], 11h
.text:00004CB8                 lea     ecx, [ebp+var_5B8]
.text:00004CBE                 call    ??1?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CRefItem>::~CRecordVector<NArchive::N7z::CRefItem>(void)
.text:00004CC3                 mov     byte ptr [ebp+var_4], 10h
.text:00004CC7                 lea     ecx, [ebp+var_3E8] ; this
.text:00004CCD                 call    ??1CEncoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CEncoder::~CEncoder(void)
.text:00004CD2                 mov     byte ptr [ebp+var_4], 0Bh
.text:00004CD6                 lea     ecx, [ebp+var_324] ; this
.text:00004CDC                 call    ??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:00004CE1                 mov     byte ptr [ebp+var_4], 9
.text:00004CE5                 lea     ecx, [ebp+var_248]
.text:00004CEB                 call    ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)
.text:00004CF0                 mov     byte ptr [ebp+var_4], 8
.text:00004CF4                 lea     ecx, [ebp+var_1F0] ; this
.text:00004CFA                 call    ??1CThreadDecoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CThreadDecoder::~CThreadDecoder(void)
.text:00004CFF                 mov     byte ptr [ebp+var_4], 7
.text:00004D03                 lea     ecx, [ebp+var_13C] ; this
.text:00004D09                 call    ??1CStreamBinder@@QAE@XZ ; CStreamBinder::~CStreamBinder(void)
.text:00004D0E                 mov     byte ptr [ebp+var_4], 4
.text:00004D12                 lea     ecx, [ebp+var_114]
.text:00004D18                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00004D1D                 mov     byte ptr [ebp+var_4], 3
.text:00004D21                 lea     ecx, [ebp+var_80]
.text:00004D24                 call    ??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>(void)
.text:00004D29                 mov     byte ptr [ebp+var_4], 2
.text:00004D2D                 lea     ecx, [ebp+var_6C]
.text:00004D30                 call    ??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>(void)
.text:00004D35                 mov     byte ptr [ebp+var_4], 1
.text:00004D39                 lea     ecx, [ebp+var_44]
.text:00004D3C                 call    ??1?$CObjArray@H@@QAE@XZ ; CObjArray<int>::~CObjArray<int>(void)
.text:00004D41                 mov     byte ptr [ebp+var_4], 0
.text:00004D45                 lea     ecx, [ebp+var_2C]
.text:00004D48                 call    ??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>(void)
.text:00004D4D                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004D54                 lea     ecx, [ebp+var_20]
.text:00004D57                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:00004D5C                 mov     eax, [ebp+var_750]
.text:00004D62                 jmp     loc_57C7
.text:00004D67 ; ---------------------------------------------------------------------------
.text:00004D67
.text:00004D67 loc_4D67:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+3343j
.text:00004D67                 push    60h ; '`'       ; unsigned int
.text:00004D69                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00004D6E                 add     esp, 4
.text:00004D71                 mov     [ebp+var_758], eax
.text:00004D77                 mov     byte ptr [ebp+var_4], 1Dh
.text:00004D7B                 cmp     [ebp+var_758], 0
.text:00004D82                 jz      short loc_4D97
.text:00004D84                 mov     ecx, [ebp+var_758] ; this
.text:00004D8A                 call    ??0CFolderInStream@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFolderInStream::CFolderInStream(void)
.text:00004D8F                 mov     [ebp+var_7C8], eax
.text:00004D95                 jmp     short loc_4DA1
.text:00004D97 ; ---------------------------------------------------------------------------
.text:00004D97
.text:00004D97 loc_4D97:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+3432j
.text:00004D97                 mov     [ebp+var_7C8], 0
.text:00004DA1
.text:00004DA1 loc_4DA1:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+3445j
.text:00004DA1                 mov     eax, [ebp+var_7C8]
.text:00004DA7                 mov     [ebp+var_754], eax
.text:00004DAD                 mov     byte ptr [ebp+var_4], 1Ch
.text:00004DB1                 mov     ecx, [ebp+var_754]
.text:00004DB7                 mov     [ebp+var_604], ecx
.text:00004DBD                 mov     edx, [ebp+var_604]
.text:00004DC3                 push    edx
.text:00004DC4                 lea     ecx, [ebp+var_60C]
.text:00004DCA                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(ISequentialInStream *)
.text:00004DCF                 mov     byte ptr [ebp+var_4], 1Eh
.text:00004DD3                 mov     eax, [ebp+var_5E8]
.text:00004DD9                 push    eax             ; unsigned int
.text:00004DDA                 lea     ecx, [ebp+var_5D4]
.text:00004DE0                 call    ??B?$CObjArray@I@@QAEPAIXZ ; CObjArray<uint>::operator uint *(void)
.text:00004DE5                 mov     ecx, [ebp+var_100]
.text:00004DEB                 lea     edx, [eax+ecx*4]
.text:00004DEE                 push    edx             ; unsigned int *
.text:00004DEF                 mov     eax, [ebp+arg_18]
.text:00004DF2                 push    eax             ; struct IArchiveUpdateCallback *
.text:00004DF3                 mov     ecx, [ebp+var_604] ; this
.text:00004DF9                 call    ?Init@CFolderInStream@N7z@NArchive@@QAEXPAUIArchiveUpdateCallback@@PBII@Z ; NArchive::N7z::CFolderInStream::Init(IArchiveUpdateCallback *,uint const *,uint)
.text:00004DFE                 mov     ecx, [ebp+arg_10]
.text:00004E01                 add     ecx, 30h ; '0'
.text:00004E04                 call    ?Size@?$CRecordVector@_K@@QBEIXZ ; CRecordVector<unsigned __int64>::Size(void)
.text:00004E09                 mov     [ebp+var_614], eax
.text:00004E0F                 lea     ecx, [ebp+var_114]
.text:00004E15                 call    ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *(void)
.text:00004E1A                 push    eax
.text:00004E1B                 mov     ecx, [ebp+arg_10]
.text:00004E1E                 add     ecx, 30h ; '0'
.text:00004E21                 push    ecx
.text:00004E22                 mov     ecx, [ebp+arg_C]
.text:00004E25                 add     ecx, 54h ; 'T'
.text:00004E28                 call    ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *(void)
.text:00004E2D                 push    eax
.text:00004E2E                 lea     edx, [ebp+var_620]
.text:00004E34                 push    edx
.text:00004E35                 mov     eax, [ebp+arg_10]
.text:00004E38                 add     eax, 24h ; '$'
.text:00004E3B                 push    eax
.text:00004E3C                 mov     ecx, [ebp+arg_10]
.text:00004E3F                 add     ecx, 54h ; 'T'
.text:00004E42                 call    ?AddNew@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEAAUCFolder@N7z@NArchive@@XZ ; CObjectVector<NArchive::N7z::CFolder>::AddNew(void)
.text:00004E47                 push    eax
.text:00004E48                 lea     ecx, [ebp+var_F8]
.text:00004E4E                 push    ecx
.text:00004E4F                 lea     ecx, [ebp+var_60C]
.text:00004E55                 call    ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *(void)
.text:00004E5A                 push    eax
.text:00004E5B                 lea     ecx, [ebp+var_3E8]
.text:00004E61                 call    ?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z ; NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)
.text:00004E66                 mov     [ebp+var_628], eax
.text:00004E6C                 cmp     [ebp+var_628], 0
.text:00004E73                 jz      loc_4F56
.text:00004E79                 mov     edx, [ebp+var_628]
.text:00004E7F                 mov     [ebp+var_75C], edx
.text:00004E85                 mov     byte ptr [ebp+var_4], 1Ch
.text:00004E89                 lea     ecx, [ebp+var_60C]
.text:00004E8F                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00004E94                 mov     byte ptr [ebp+var_4], 1Bh
.text:00004E98                 lea     ecx, [ebp+var_5D4]
.text:00004E9E                 call    ??1?$CObjArray@I@@QAE@XZ ; CObjArray<uint>::~CObjArray<uint>(void)
.text:00004EA3                 mov     byte ptr [ebp+var_4], 11h
.text:00004EA7                 lea     ecx, [ebp+var_5B8]
.text:00004EAD                 call    ??1?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CRefItem>::~CRecordVector<NArchive::N7z::CRefItem>(void)
.text:00004EB2                 mov     byte ptr [ebp+var_4], 10h
.text:00004EB6                 lea     ecx, [ebp+var_3E8] ; this
.text:00004EBC                 call    ??1CEncoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CEncoder::~CEncoder(void)
.text:00004EC1                 mov     byte ptr [ebp+var_4], 0Bh
.text:00004EC5                 lea     ecx, [ebp+var_324] ; this
.text:00004ECB                 call    ??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:00004ED0                 mov     byte ptr [ebp+var_4], 9
.text:00004ED4                 lea     ecx, [ebp+var_248]
.text:00004EDA                 call    ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)
.text:00004EDF                 mov     byte ptr [ebp+var_4], 8
.text:00004EE3                 lea     ecx, [ebp+var_1F0] ; this
.text:00004EE9                 call    ??1CThreadDecoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CThreadDecoder::~CThreadDecoder(void)
.text:00004EEE                 mov     byte ptr [ebp+var_4], 7
.text:00004EF2                 lea     ecx, [ebp+var_13C] ; this
.text:00004EF8                 call    ??1CStreamBinder@@QAE@XZ ; CStreamBinder::~CStreamBinder(void)
.text:00004EFD                 mov     byte ptr [ebp+var_4], 4
.text:00004F01                 lea     ecx, [ebp+var_114]
.text:00004F07                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00004F0C                 mov     byte ptr [ebp+var_4], 3
.text:00004F10                 lea     ecx, [ebp+var_80]
.text:00004F13                 call    ??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>(void)
.text:00004F18                 mov     byte ptr [ebp+var_4], 2
.text:00004F1C                 lea     ecx, [ebp+var_6C]
.text:00004F1F                 call    ??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>(void)
.text:00004F24                 mov     byte ptr [ebp+var_4], 1
.text:00004F28                 lea     ecx, [ebp+var_44]
.text:00004F2B                 call    ??1?$CObjArray@H@@QAE@XZ ; CObjArray<int>::~CObjArray<int>(void)
.text:00004F30                 mov     byte ptr [ebp+var_4], 0
.text:00004F34                 lea     ecx, [ebp+var_2C]
.text:00004F37                 call    ??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>(void)
.text:00004F3C                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004F43                 lea     ecx, [ebp+var_20]
.text:00004F46                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:00004F4B                 mov     eax, [ebp+var_75C]
.text:00004F51                 jmp     loc_57C7
.text:00004F56 ; ---------------------------------------------------------------------------
.text:00004F56
.text:00004F56 loc_4F56:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+3523j
.text:00004F56                 mov     ecx, [ebp+var_604] ; this
.text:00004F5C                 call    ?WasFinished@CFolderInStream@N7z@NArchive@@QBE_NXZ ; NArchive::N7z::CFolderInStream::WasFinished(void)
.text:00004F61                 movzx   eax, al
.text:00004F64                 test    eax, eax
.text:00004F66                 jnz     loc_5047
.text:00004F6C                 mov     [ebp+var_760], 80004005h
.text:00004F76                 mov     byte ptr [ebp+var_4], 1Ch
.text:00004F7A                 lea     ecx, [ebp+var_60C]
.text:00004F80                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00004F85                 mov     byte ptr [ebp+var_4], 1Bh
.text:00004F89                 lea     ecx, [ebp+var_5D4]
.text:00004F8F                 call    ??1?$CObjArray@I@@QAE@XZ ; CObjArray<uint>::~CObjArray<uint>(void)
.text:00004F94                 mov     byte ptr [ebp+var_4], 11h
.text:00004F98                 lea     ecx, [ebp+var_5B8]
.text:00004F9E                 call    ??1?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CRefItem>::~CRecordVector<NArchive::N7z::CRefItem>(void)
.text:00004FA3                 mov     byte ptr [ebp+var_4], 10h
.text:00004FA7                 lea     ecx, [ebp+var_3E8] ; this
.text:00004FAD                 call    ??1CEncoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CEncoder::~CEncoder(void)
.text:00004FB2                 mov     byte ptr [ebp+var_4], 0Bh
.text:00004FB6                 lea     ecx, [ebp+var_324] ; this
.text:00004FBC                 call    ??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:00004FC1                 mov     byte ptr [ebp+var_4], 9
.text:00004FC5                 lea     ecx, [ebp+var_248]
.text:00004FCB                 call    ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)
.text:00004FD0                 mov     byte ptr [ebp+var_4], 8
.text:00004FD4                 lea     ecx, [ebp+var_1F0] ; this
.text:00004FDA                 call    ??1CThreadDecoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CThreadDecoder::~CThreadDecoder(void)
.text:00004FDF                 mov     byte ptr [ebp+var_4], 7
.text:00004FE3                 lea     ecx, [ebp+var_13C] ; this
.text:00004FE9                 call    ??1CStreamBinder@@QAE@XZ ; CStreamBinder::~CStreamBinder(void)
.text:00004FEE                 mov     byte ptr [ebp+var_4], 4
.text:00004FF2                 lea     ecx, [ebp+var_114]
.text:00004FF8                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00004FFD                 mov     byte ptr [ebp+var_4], 3
.text:00005001                 lea     ecx, [ebp+var_80]
.text:00005004                 call    ??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>(void)
.text:00005009                 mov     byte ptr [ebp+var_4], 2
.text:0000500D                 lea     ecx, [ebp+var_6C]
.text:00005010                 call    ??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>(void)
.text:00005015                 mov     byte ptr [ebp+var_4], 1
.text:00005019                 lea     ecx, [ebp+var_44]
.text:0000501C                 call    ??1?$CObjArray@H@@QAE@XZ ; CObjArray<int>::~CObjArray<int>(void)
.text:00005021                 mov     byte ptr [ebp+var_4], 0
.text:00005025                 lea     ecx, [ebp+var_2C]
.text:00005028                 call    ??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>(void)
.text:0000502D                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00005034                 lea     ecx, [ebp+var_20]
.text:00005037                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:0000503C                 mov     eax, [ebp+var_760]
.text:00005042                 jmp     loc_57C7
.text:00005047 ; ---------------------------------------------------------------------------
.text:00005047
.text:00005047 loc_5047:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+3616j
.text:00005047                 jmp     short loc_5058
.text:00005049 ; ---------------------------------------------------------------------------
.text:00005049
.text:00005049 loc_5049:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+374Aj
.text:00005049                 mov     ecx, [ebp+var_614]
.text:0000504F                 add     ecx, 1
.text:00005052                 mov     [ebp+var_614], ecx
.text:00005058
.text:00005058 loc_5058:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *):loc_5047j
.text:00005058                 mov     ecx, [ebp+arg_10]
.text:0000505B                 add     ecx, 30h ; '0'
.text:0000505E                 call    ?Size@?$CRecordVector@_K@@QBEIXZ ; CRecordVector<unsigned __int64>::Size(void)
.text:00005063                 cmp     [ebp+var_614], eax
.text:00005069                 jnb     short loc_509C
.text:0000506B                 mov     edx, [ebp+var_614]
.text:00005071                 push    edx
.text:00005072                 mov     ecx, [ebp+arg_10]
.text:00005075                 add     ecx, 30h ; '0'
.text:00005078                 call    ??A?$CRecordVector@_K@@QAEAA_KI@Z ; CRecordVector<unsigned __int64>::operator[](uint)
.text:0000507D                 mov     ecx, [ebp+var_10C]
.text:00005083                 mov     edx, [ecx+28h]
.text:00005086                 add     edx, [eax]
.text:00005088                 mov     ecx, [ecx+2Ch]
.text:0000508B                 adc     ecx, [eax+4]
.text:0000508E                 mov     eax, [ebp+var_10C]
.text:00005094                 mov     [eax+28h], edx
.text:00005097                 mov     [eax+2Ch], ecx
.text:0000509A                 jmp     short loc_5049
.text:0000509C ; ---------------------------------------------------------------------------
.text:0000509C
.text:0000509C loc_509C:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+3719j
.text:0000509C                 mov     ecx, [ebp+var_10C]
.text:000050A2                 mov     edx, [ecx+20h]
.text:000050A5                 add     edx, [ebp+var_620]
.text:000050AB                 mov     eax, [ecx+24h]
.text:000050AE                 adc     eax, [ebp+var_61C]
.text:000050B4                 mov     ecx, [ebp+var_10C]
.text:000050BA                 mov     [ecx+20h], edx
.text:000050BD                 mov     [ecx+24h], eax
.text:000050C0                 mov     [ebp+var_62C], 0
.text:000050CA                 mov     [ebp+var_634], 0
.text:000050D4                 mov     [ebp+var_630], 0
.text:000050DE                 mov     [ebp+var_638], 0
.text:000050E8                 jmp     short loc_50F9
.text:000050EA ; ---------------------------------------------------------------------------
.text:000050EA
.text:000050EA loc_50EA:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+39C8j
.text:000050EA                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+3A77j
.text:000050EA                 mov     edx, [ebp+var_638]
.text:000050F0                 add     edx, 1
.text:000050F3                 mov     [ebp+var_638], edx
.text:000050F9
.text:000050F9 loc_50F9:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+3798j
.text:000050F9                 mov     eax, [ebp+var_638]
.text:000050FF                 cmp     eax, [ebp+var_5E8]
.text:00005105                 jnb     loc_53CC
.text:0000510B                 lea     ecx, [ebp+var_5D4]
.text:00005111                 call    ??B?$CObjArray@I@@QAEPAIXZ ; CObjArray<uint>::operator uint *(void)
.text:00005116                 mov     ecx, [ebp+var_100]
.text:0000511C                 add     ecx, [ebp+var_638]
.text:00005122                 mov     edx, [eax+ecx*4]
.text:00005125                 push    edx
.text:00005126                 mov     ecx, [ebp+arg_8]
.text:00005129                 call    ??A?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QBEABUCUpdateItem@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CUpdateItem>::operator[](uint)
.text:0000512E                 mov     [ebp+var_63C], eax
.text:00005134                 lea     ecx, [ebp+var_658] ; this
.text:0000513A                 call    ??0CFileItem@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFileItem::CFileItem(void)
.text:0000513F                 lea     ecx, [ebp+var_69C]
.text:00005145                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:0000514A                 mov     byte ptr [ebp+var_4], 1Fh
.text:0000514E                 mov     eax, [ebp+var_63C]
.text:00005154                 movzx   ecx, byte ptr [eax+39h]
.text:00005158                 test    ecx, ecx
.text:0000515A                 jz      short loc_518D
.text:0000515C                 lea     edx, [ebp+var_688]
.text:00005162                 push    edx             ; int
.text:00005163                 lea     eax, [ebp+var_658]
.text:00005169                 push    eax             ; NArchive::N7z::CFileItem *
.text:0000516A                 mov     ecx, [ebp+var_63C]
.text:00005170                 push    ecx             ; NArchive::N7z::CUpdateItem *
.text:00005171                 call    ?FromUpdateItemToFileItem@N7z@NArchive@@YGXABUCUpdateItem@12@AAUCFileItem@12@AAUCFileItem2@12@@Z ; NArchive::N7z::FromUpdateItemToFileItem(NArchive::N7z::CUpdateItem const &,NArchive::N7z::CFileItem &,NArchive::N7z::CFileItem2 &)
.text:00005176                 mov     edx, [ebp+var_63C]
.text:0000517C                 add     edx, 28h ; '('
.text:0000517F                 push    edx
.text:00005180                 lea     ecx, [ebp+var_69C]
.text:00005186                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:0000518B                 jmp     short loc_51C5
.text:0000518D ; ---------------------------------------------------------------------------
.text:0000518D
.text:0000518D loc_518D:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+380Aj
.text:0000518D                 lea     eax, [ebp+var_688]
.text:00005193                 push    eax             ; unsigned __int64 *
.text:00005194                 lea     ecx, [ebp+var_658]
.text:0000519A                 push    ecx             ; int
.text:0000519B                 mov     edx, [ebp+var_63C]
.text:000051A1                 mov     eax, [edx]
.text:000051A3                 push    eax             ; unsigned int
.text:000051A4                 mov     ecx, [ebp+arg_4]
.text:000051A7                 push    ecx             ; NArchive::N7z::CDatabase *
.text:000051A8                 call    ?GetFile@N7z@NArchive@@YGXABUCDatabase@12@IAAUCFileItem@12@AAUCFileItem2@12@@Z ; NArchive::N7z::GetFile(NArchive::N7z::CDatabase const &,uint,NArchive::N7z::CFileItem &,NArchive::N7z::CFileItem2 &)
.text:000051AD                 lea     edx, [ebp+var_69C]
.text:000051B3                 push    edx             ; struct UString *
.text:000051B4                 mov     eax, [ebp+var_63C]
.text:000051BA                 mov     ecx, [eax]
.text:000051BC                 push    ecx             ; unsigned int
.text:000051BD                 mov     ecx, [ebp+arg_4] ; this
.text:000051C0                 call    ?GetPath@CDatabase@N7z@NArchive@@QBEXIAAVUString@@@Z ; NArchive::N7z::CDatabase::GetPath(uint,UString &)
.text:000051C5
.text:000051C5 loc_51C5:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+383Bj
.text:000051C5                 movzx   edx, [ebp+var_664]
.text:000051CC                 test    edx, edx
.text:000051CE                 jnz     short loc_51DF
.text:000051D0                 movzx   eax, [ebp+var_647]
.text:000051D7                 test    eax, eax
.text:000051D9                 jz      loc_52C9
.text:000051DF
.text:000051DF loc_51DF:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+387Ej
.text:000051DF                 mov     [ebp+var_764], 80004005h
.text:000051E9                 mov     byte ptr [ebp+var_4], 1Eh
.text:000051ED                 lea     ecx, [ebp+var_69C] ; this
.text:000051F3                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000051F8                 mov     byte ptr [ebp+var_4], 1Ch
.text:000051FC                 lea     ecx, [ebp+var_60C]
.text:00005202                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00005207                 mov     byte ptr [ebp+var_4], 1Bh
.text:0000520B                 lea     ecx, [ebp+var_5D4]
.text:00005211                 call    ??1?$CObjArray@I@@QAE@XZ ; CObjArray<uint>::~CObjArray<uint>(void)
.text:00005216                 mov     byte ptr [ebp+var_4], 11h
.text:0000521A                 lea     ecx, [ebp+var_5B8]
.text:00005220                 call    ??1?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CRefItem>::~CRecordVector<NArchive::N7z::CRefItem>(void)
.text:00005225                 mov     byte ptr [ebp+var_4], 10h
.text:00005229                 lea     ecx, [ebp+var_3E8] ; this
.text:0000522F                 call    ??1CEncoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CEncoder::~CEncoder(void)
.text:00005234                 mov     byte ptr [ebp+var_4], 0Bh
.text:00005238                 lea     ecx, [ebp+var_324] ; this
.text:0000523E                 call    ??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:00005243                 mov     byte ptr [ebp+var_4], 9
.text:00005247                 lea     ecx, [ebp+var_248]
.text:0000524D                 call    ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)
.text:00005252                 mov     byte ptr [ebp+var_4], 8
.text:00005256                 lea     ecx, [ebp+var_1F0] ; this
.text:0000525C                 call    ??1CThreadDecoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CThreadDecoder::~CThreadDecoder(void)
.text:00005261                 mov     byte ptr [ebp+var_4], 7
.text:00005265                 lea     ecx, [ebp+var_13C] ; this
.text:0000526B                 call    ??1CStreamBinder@@QAE@XZ ; CStreamBinder::~CStreamBinder(void)
.text:00005270                 mov     byte ptr [ebp+var_4], 4
.text:00005274                 lea     ecx, [ebp+var_114]
.text:0000527A                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:0000527F                 mov     byte ptr [ebp+var_4], 3
.text:00005283                 lea     ecx, [ebp+var_80]
.text:00005286                 call    ??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>(void)
.text:0000528B                 mov     byte ptr [ebp+var_4], 2
.text:0000528F                 lea     ecx, [ebp+var_6C]
.text:00005292                 call    ??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>(void)
.text:00005297                 mov     byte ptr [ebp+var_4], 1
.text:0000529B                 lea     ecx, [ebp+var_44]
.text:0000529E                 call    ??1?$CObjArray@H@@QAE@XZ ; CObjArray<int>::~CObjArray<int>(void)
.text:000052A3                 mov     byte ptr [ebp+var_4], 0
.text:000052A7                 lea     ecx, [ebp+var_2C]
.text:000052AA                 call    ??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>(void)
.text:000052AF                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000052B6                 lea     ecx, [ebp+var_20]
.text:000052B9                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:000052BE                 mov     eax, [ebp+var_764]
.text:000052C4                 jmp     loc_57C7
.text:000052C9 ; ---------------------------------------------------------------------------
.text:000052C9
.text:000052C9 loc_52C9:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+3889j
.text:000052C9                 mov     ecx, [ebp+var_638]
.text:000052CF                 push    ecx
.text:000052D0                 mov     ecx, [ebp+var_604]
.text:000052D6                 add     ecx, 38h ; '8'
.text:000052D9                 call    ??A?$CRecordVector@_N@@QAEAA_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:000052DE                 movzx   edx, byte ptr [eax]
.text:000052E1                 test    edx, edx
.text:000052E3                 jnz     short loc_531D
.text:000052E5                 mov     eax, [ebp+var_63C]
.text:000052EB                 mov     ecx, [ebp+var_634]
.text:000052F1                 add     ecx, [eax+20h]
.text:000052F4                 mov     edx, [ebp+var_630]
.text:000052FA                 adc     edx, [eax+24h]
.text:000052FD                 mov     [ebp+var_634], ecx
.text:00005303                 mov     [ebp+var_630], edx
.text:00005309                 mov     byte ptr [ebp+var_4], 1Eh
.text:0000530D                 lea     ecx, [ebp+var_69C] ; this
.text:00005313                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00005318                 jmp     loc_50EA
.text:0000531D ; ---------------------------------------------------------------------------
.text:0000531D
.text:0000531D loc_531D:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+3993j
.text:0000531D                 mov     eax, [ebp+var_638]
.text:00005323                 push    eax
.text:00005324                 mov     ecx, [ebp+var_604]
.text:0000532A                 add     ecx, 44h ; 'D'
.text:0000532D                 call    ??A?$CRecordVector@I@@QAEAAII@Z ; CRecordVector<uint>::operator[](uint)
.text:00005332                 mov     ecx, [eax]
.text:00005334                 mov     [ebp+var_64C], ecx
.text:0000533A                 mov     edx, [ebp+var_638]
.text:00005340                 push    edx
.text:00005341                 mov     ecx, [ebp+var_604]
.text:00005347                 add     ecx, 50h ; 'P'
.text:0000534A                 call    ??A?$CRecordVector@_K@@QAEAA_KI@Z ; CRecordVector<unsigned __int64>::operator[](uint)
.text:0000534F                 mov     ecx, [eax]
.text:00005351                 mov     [ebp+var_658], ecx
.text:00005357                 mov     edx, [eax+4]
.text:0000535A                 mov     [ebp+var_654], edx
.text:00005360                 mov     eax, [ebp+var_658]
.text:00005366                 or      eax, [ebp+var_654]
.text:0000536C                 jz      short loc_538D
.text:0000536E                 mov     [ebp+var_646], 1
.text:00005375                 mov     [ebp+var_648], 1
.text:0000537C                 mov     ecx, [ebp+var_62C]
.text:00005382                 add     ecx, 1
.text:00005385                 mov     [ebp+var_62C], ecx
.text:0000538B                 jmp     short loc_539B
.text:0000538D ; ---------------------------------------------------------------------------
.text:0000538D
.text:0000538D loc_538D:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+3A1Cj
.text:0000538D                 mov     [ebp+var_646], 0
.text:00005394                 mov     [ebp+var_648], 0
.text:0000539B
.text:0000539B loc_539B:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+3A3Bj
.text:0000539B                 lea     edx, [ebp+var_69C]
.text:000053A1                 push    edx             ; struct UString *
.text:000053A2                 lea     eax, [ebp+var_688]
.text:000053A8                 push    eax             ; struct NArchive::N7z::CFileItem2 *
.text:000053A9                 lea     ecx, [ebp+var_658]
.text:000053AF                 push    ecx             ; struct NArchive::N7z::CFileItem *
.text:000053B0                 mov     ecx, [ebp+arg_10] ; this
.text:000053B3                 call    ?AddFile@CArchiveDatabaseOut@N7z@NArchive@@QAEXABUCFileItem@23@ABUCFileItem2@23@ABVUString@@@Z ; NArchive::N7z::CArchiveDatabaseOut::AddFile(NArchive::N7z::CFileItem const &,NArchive::N7z::CFileItem2 const &,UString const &)
.text:000053B8                 mov     byte ptr [ebp+var_4], 1Eh
.text:000053BC                 lea     ecx, [ebp+var_69C] ; this
.text:000053C2                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000053C7                 jmp     loc_50EA
.text:000053CC ; ---------------------------------------------------------------------------
.text:000053CC
.text:000053CC loc_53CC:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+37B5j
.text:000053CC                 mov     edx, [ebp+var_62C]
.text:000053D2                 push    edx
.text:000053D3                 mov     ecx, [ebp+arg_10]
.text:000053D6                 add     ecx, 18h
.text:000053D9                 call    ?Add@?$CRecordVector@I@@QAEII@Z ; CRecordVector<uint>::Add(uint)
.text:000053DE                 mov     eax, [ebp+var_100]
.text:000053E4                 add     eax, [ebp+var_5E8]
.text:000053EA                 mov     [ebp+var_100], eax
.text:000053F0                 mov     ecx, [ebp+var_634]
.text:000053F6                 or      ecx, [ebp+var_630]
.text:000053FC                 jz      loc_5549
.text:00005402                 mov     edx, [ebp+var_4C]
.text:00005405                 cmp     edx, [ebp+var_630]
.text:0000540B                 jb      loc_5549
.text:00005411                 ja      short loc_5422
.text:00005413                 mov     eax, [ebp+var_50]
.text:00005416                 cmp     eax, [ebp+var_634]
.text:0000541C                 jb      loc_5549
.text:00005422
.text:00005422 loc_5422:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+3AC1j
.text:00005422                 mov     ecx, [ebp+var_50]
.text:00005425                 sub     ecx, [ebp+var_634]
.text:0000542B                 mov     edx, [ebp+var_4C]
.text:0000542E                 sbb     edx, [ebp+var_630]
.text:00005434                 mov     [ebp+var_50], ecx
.text:00005437                 mov     [ebp+var_4C], edx
.text:0000543A                 mov     esi, esp
.text:0000543C                 mov     eax, [ebp+var_4C]
.text:0000543F                 push    eax
.text:00005440                 mov     ecx, [ebp+var_50]
.text:00005443                 push    ecx
.text:00005444                 mov     edx, [ebp+arg_18]
.text:00005447                 mov     eax, [edx]
.text:00005449                 mov     ecx, [ebp+arg_18]
.text:0000544C                 push    ecx
.text:0000544D                 mov     edx, [eax+0Ch]
.text:00005450                 call    edx
.text:00005452                 cmp     esi, esp
.text:00005454                 call    __RTC_CheckEsp
.text:00005459                 mov     [ebp+var_6A4], eax
.text:0000545F                 cmp     [ebp+var_6A4], 0
.text:00005466                 jz      loc_5549
.text:0000546C                 mov     eax, [ebp+var_6A4]
.text:00005472                 mov     [ebp+var_768], eax
.text:00005478                 mov     byte ptr [ebp+var_4], 1Ch
.text:0000547C                 lea     ecx, [ebp+var_60C]
.text:00005482                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00005487                 mov     byte ptr [ebp+var_4], 1Bh
.text:0000548B                 lea     ecx, [ebp+var_5D4]
.text:00005491                 call    ??1?$CObjArray@I@@QAE@XZ ; CObjArray<uint>::~CObjArray<uint>(void)
.text:00005496                 mov     byte ptr [ebp+var_4], 11h
.text:0000549A                 lea     ecx, [ebp+var_5B8]
.text:000054A0                 call    ??1?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CRefItem>::~CRecordVector<NArchive::N7z::CRefItem>(void)
.text:000054A5                 mov     byte ptr [ebp+var_4], 10h
.text:000054A9                 lea     ecx, [ebp+var_3E8] ; this
.text:000054AF                 call    ??1CEncoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CEncoder::~CEncoder(void)
.text:000054B4                 mov     byte ptr [ebp+var_4], 0Bh
.text:000054B8                 lea     ecx, [ebp+var_324] ; this
.text:000054BE                 call    ??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:000054C3                 mov     byte ptr [ebp+var_4], 9
.text:000054C7                 lea     ecx, [ebp+var_248]
.text:000054CD                 call    ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)
.text:000054D2                 mov     byte ptr [ebp+var_4], 8
.text:000054D6                 lea     ecx, [ebp+var_1F0] ; this
.text:000054DC                 call    ??1CThreadDecoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CThreadDecoder::~CThreadDecoder(void)
.text:000054E1                 mov     byte ptr [ebp+var_4], 7
.text:000054E5                 lea     ecx, [ebp+var_13C] ; this
.text:000054EB                 call    ??1CStreamBinder@@QAE@XZ ; CStreamBinder::~CStreamBinder(void)
.text:000054F0                 mov     byte ptr [ebp+var_4], 4
.text:000054F4                 lea     ecx, [ebp+var_114]
.text:000054FA                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:000054FF                 mov     byte ptr [ebp+var_4], 3
.text:00005503                 lea     ecx, [ebp+var_80]
.text:00005506                 call    ??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>(void)
.text:0000550B                 mov     byte ptr [ebp+var_4], 2
.text:0000550F                 lea     ecx, [ebp+var_6C]
.text:00005512                 call    ??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>(void)
.text:00005517                 mov     byte ptr [ebp+var_4], 1
.text:0000551B                 lea     ecx, [ebp+var_44]
.text:0000551E                 call    ??1?$CObjArray@H@@QAE@XZ ; CObjArray<int>::~CObjArray<int>(void)
.text:00005523                 mov     byte ptr [ebp+var_4], 0
.text:00005527                 lea     ecx, [ebp+var_2C]
.text:0000552A                 call    ??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>(void)
.text:0000552F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00005536                 lea     ecx, [ebp+var_20]
.text:00005539                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:0000553E                 mov     eax, [ebp+var_768]
.text:00005544                 jmp     loc_57C7
.text:00005549 ; ---------------------------------------------------------------------------
.text:00005549
.text:00005549 loc_5549:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+3AACj
.text:00005549                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+3ABBj ...
.text:00005549                 mov     byte ptr [ebp+var_4], 1Ch
.text:0000554D                 lea     ecx, [ebp+var_60C]
.text:00005553                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00005558                 jmp     loc_4A95
.text:0000555D ; ---------------------------------------------------------------------------
.text:0000555D
.text:0000555D loc_555D:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+3151j
.text:0000555D                 mov     byte ptr [ebp+var_4], 1Bh
.text:00005561                 lea     ecx, [ebp+var_5D4]
.text:00005567                 call    ??1?$CObjArray@I@@QAE@XZ ; CObjArray<uint>::~CObjArray<uint>(void)
.text:0000556C                 mov     byte ptr [ebp+var_4], 11h
.text:00005570                 lea     ecx, [ebp+var_5B8]
.text:00005576                 call    ??1?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CRefItem>::~CRecordVector<NArchive::N7z::CRefItem>(void)
.text:0000557B                 mov     byte ptr [ebp+var_4], 10h
.text:0000557F                 lea     ecx, [ebp+var_3E8] ; this
.text:00005585                 call    ??1CEncoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CEncoder::~CEncoder(void)
.text:0000558A                 mov     byte ptr [ebp+var_4], 0Bh
.text:0000558E                 lea     ecx, [ebp+var_324] ; this
.text:00005594                 call    ??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:00005599                 jmp     loc_2B07
.text:0000559E ; ---------------------------------------------------------------------------
.text:0000559E
.text:0000559E loc_559E:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+11D4j
.text:0000559E                 mov     ecx, [ebp+var_10C] ; this
.text:000055A4                 call    ?SetCur@CLocalProgress@@QAEJXZ ; CLocalProgress::SetCur(void)
.text:000055A9                 mov     [ebp+var_6A8], eax
.text:000055AF                 cmp     [ebp+var_6A8], 0
.text:000055B6                 jz      loc_564E
.text:000055BC                 mov     ecx, [ebp+var_6A8]
.text:000055C2                 mov     [ebp+var_76C], ecx
.text:000055C8                 mov     byte ptr [ebp+var_4], 9
.text:000055CC                 lea     ecx, [ebp+var_248]
.text:000055D2                 call    ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)
.text:000055D7                 mov     byte ptr [ebp+var_4], 8
.text:000055DB                 lea     ecx, [ebp+var_1F0] ; this
.text:000055E1                 call    ??1CThreadDecoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CThreadDecoder::~CThreadDecoder(void)
.text:000055E6                 mov     byte ptr [ebp+var_4], 7
.text:000055EA                 lea     ecx, [ebp+var_13C] ; this
.text:000055F0                 call    ??1CStreamBinder@@QAE@XZ ; CStreamBinder::~CStreamBinder(void)
.text:000055F5                 mov     byte ptr [ebp+var_4], 4
.text:000055F9                 lea     ecx, [ebp+var_114]
.text:000055FF                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00005604                 mov     byte ptr [ebp+var_4], 3
.text:00005608                 lea     ecx, [ebp+var_80]
.text:0000560B                 call    ??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>(void)
.text:00005610                 mov     byte ptr [ebp+var_4], 2
.text:00005614                 lea     ecx, [ebp+var_6C]
.text:00005617                 call    ??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>(void)
.text:0000561C                 mov     byte ptr [ebp+var_4], 1
.text:00005620                 lea     ecx, [ebp+var_44]
.text:00005623                 call    ??1?$CObjArray@H@@QAE@XZ ; CObjArray<int>::~CObjArray<int>(void)
.text:00005628                 mov     byte ptr [ebp+var_4], 0
.text:0000562C                 lea     ecx, [ebp+var_2C]
.text:0000562F                 call    ??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>(void)
.text:00005634                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000563B                 lea     ecx, [ebp+var_20]
.text:0000563E                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:00005643                 mov     eax, [ebp+var_76C]
.text:00005649                 jmp     loc_57C7
.text:0000564E ; ---------------------------------------------------------------------------
.text:0000564E
.text:0000564E loc_564E:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+3C66j
.text:0000564E                 mov     ecx, [ebp+arg_10] ; this
.text:00005651                 call    ?ReserveDown@CArchiveDatabaseOut@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CArchiveDatabaseOut::ReserveDown(void)
.text:00005656                 lea     ecx, [ebp+var_20]
.text:00005659                 call    ??B?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator IArchiveUpdateCallbackFile *(void)
.text:0000565E                 test    eax, eax
.text:00005660                 jz      loc_573C
.text:00005666                 lea     ecx, [ebp+var_20]
.text:00005669                 call    ??C?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator->(void)
.text:0000566E                 mov     [ebp+var_7CC], eax
.text:00005674                 mov     esi, esp
.text:00005676                 push    7
.text:00005678                 push    0FFFFFFFFh
.text:0000567A                 push    0
.text:0000567C                 mov     edx, [ebp+var_7CC]
.text:00005682                 push    edx
.text:00005683                 mov     eax, [ebp+var_7CC]
.text:00005689                 mov     ecx, [eax]
.text:0000568B                 mov     edx, [ecx+10h]
.text:0000568E                 call    edx
.text:00005690                 cmp     esi, esp
.text:00005692                 call    __RTC_CheckEsp
.text:00005697                 mov     [ebp+var_6AC], eax
.text:0000569D                 cmp     [ebp+var_6AC], 0
.text:000056A4                 jz      loc_573C
.text:000056AA                 mov     eax, [ebp+var_6AC]
.text:000056B0                 mov     [ebp+var_770], eax
.text:000056B6                 mov     byte ptr [ebp+var_4], 9
.text:000056BA                 lea     ecx, [ebp+var_248]
.text:000056C0                 call    ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)
.text:000056C5                 mov     byte ptr [ebp+var_4], 8
.text:000056C9                 lea     ecx, [ebp+var_1F0] ; this
.text:000056CF                 call    ??1CThreadDecoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CThreadDecoder::~CThreadDecoder(void)
.text:000056D4                 mov     byte ptr [ebp+var_4], 7
.text:000056D8                 lea     ecx, [ebp+var_13C] ; this
.text:000056DE                 call    ??1CStreamBinder@@QAE@XZ ; CStreamBinder::~CStreamBinder(void)
.text:000056E3                 mov     byte ptr [ebp+var_4], 4
.text:000056E7                 lea     ecx, [ebp+var_114]
.text:000056ED                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:000056F2                 mov     byte ptr [ebp+var_4], 3
.text:000056F6                 lea     ecx, [ebp+var_80]
.text:000056F9                 call    ??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>(void)
.text:000056FE                 mov     byte ptr [ebp+var_4], 2
.text:00005702                 lea     ecx, [ebp+var_6C]
.text:00005705                 call    ??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>(void)
.text:0000570A                 mov     byte ptr [ebp+var_4], 1
.text:0000570E                 lea     ecx, [ebp+var_44]
.text:00005711                 call    ??1?$CObjArray@H@@QAE@XZ ; CObjArray<int>::~CObjArray<int>(void)
.text:00005716                 mov     byte ptr [ebp+var_4], 0
.text:0000571A                 lea     ecx, [ebp+var_2C]
.text:0000571D                 call    ??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>(void)
.text:00005722                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00005729                 lea     ecx, [ebp+var_20]
.text:0000572C                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:00005731                 mov     eax, [ebp+var_770]
.text:00005737                 jmp     loc_57C7
.text:0000573C ; ---------------------------------------------------------------------------
.text:0000573C
.text:0000573C loc_573C:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+3D10j
.text:0000573C                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+3D54j
.text:0000573C                 mov     [ebp+var_774], 0
.text:00005746                 mov     byte ptr [ebp+var_4], 9
.text:0000574A                 lea     ecx, [ebp+var_248]
.text:00005750                 call    ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)
.text:00005755                 mov     byte ptr [ebp+var_4], 8
.text:00005759                 lea     ecx, [ebp+var_1F0] ; this
.text:0000575F                 call    ??1CThreadDecoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CThreadDecoder::~CThreadDecoder(void)
.text:00005764                 mov     byte ptr [ebp+var_4], 7
.text:00005768                 lea     ecx, [ebp+var_13C] ; this
.text:0000576E                 call    ??1CStreamBinder@@QAE@XZ ; CStreamBinder::~CStreamBinder(void)
.text:00005773                 mov     byte ptr [ebp+var_4], 4
.text:00005777                 lea     ecx, [ebp+var_114]
.text:0000577D                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00005782                 mov     byte ptr [ebp+var_4], 3
.text:00005786                 lea     ecx, [ebp+var_80]
.text:00005789                 call    ??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>(void)
.text:0000578E                 mov     byte ptr [ebp+var_4], 2
.text:00005792                 lea     ecx, [ebp+var_6C]
.text:00005795                 call    ??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>(void)
.text:0000579A                 mov     byte ptr [ebp+var_4], 1
.text:0000579E                 lea     ecx, [ebp+var_44]
.text:000057A1                 call    ??1?$CObjArray@H@@QAE@XZ ; CObjArray<int>::~CObjArray<int>(void)
.text:000057A6                 mov     byte ptr [ebp+var_4], 0
.text:000057AA                 lea     ecx, [ebp+var_2C]
.text:000057AD                 call    ??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>(void)
.text:000057B2                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000057B9                 lea     ecx, [ebp+var_20]
.text:000057BC                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:000057C1                 mov     eax, [ebp+var_774]
.text:000057C7
.text:000057C7 loc_57C7:                               ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+175j
.text:000057C7                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+6D2j ...
.text:000057C7                 push    edx
.text:000057C8                 mov     ecx, ebp
.text:000057CA                 push    eax
.text:000057CB                 lea     edx, $LN299
.text:000057D1                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000057D6                 pop     eax
.text:000057D7                 pop     edx
.text:000057D8                 mov     ecx, [ebp+var_C]
.text:000057DB                 mov     large fs:0, ecx
.text:000057E2                 pop     ecx
.text:000057E3                 pop     edi
.text:000057E4                 pop     esi
.text:000057E5                 mov     ecx, [ebp+var_10]
.text:000057E8                 xor     ecx, ebp
.text:000057EA                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000057EF                 add     esp, 7CCh
.text:000057F5                 cmp     ebp, esp
.text:000057F7                 call    __RTC_CheckEsp
.text:000057FC                 mov     esp, ebp
.text:000057FE                 pop     ebp
.text:000057FF                 retn    24h
.text:000057FF ?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z endp
.text:000057FF
.text:000057FF ; ---------------------------------------------------------------------------
.text:00005802                 align 4
.text:00005804 $LN299          dd offset $SG75624+2Ah  ; DATA XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+3E7Bo
.text:00005804                                         ; " pak rpm sit tgz tbz tbz2 tgz cab ha lh"...
.text:00005808                 dd offset $LN298
.text:0000580C $LN298          dd 0FFFFFFE0h, 4        ; DATA XREF: .text:00005808o
.text:00005814                 dd offset $LN255        ; "opCallback"
.text:00005818                 dd 0FFFFFFD4h, 4
.text:00005820                 dd offset $LN256        ; "extractCallback"
.text:00005824                 dd 0FFFFFFBCh, 4
.text:0000582C                 dd offset $LN257        ; "fileIndexToUpdateIndexMap"
.text:00005830                 dd 0FFFFFF94h, 0Ch
.text:00005838                 dd offset $LN258        ; "filters"
.text:0000583C                 dd 0FFFFFF80h, 0Ch
.text:00005844                 dd offset $LN259        ; "groups"
.text:00005848                 dd 0FFFFFF44h, 8
.text:00005850                 dd offset $LN260        ; "rep"
.text:00005854                 dd 0FFFFFF20h, 1Ch
.text:0000585C                 dd offset $LN261        ; "f"
.text:00005860                 db 8, 0FFh
.text:00005862                 dw 0FFFFh
.text:00005864                 dd 8
.text:00005868                 dd offset $LN262        ; "inSizeForReduce"
.text:0000586C                 dd 0FFFFFEECh, 4
.text:00005874                 dd offset $LN263        ; "progress"
.text:00005878                 dd 0FFFFFEC4h, 20h
.text:00005880                 dd offset $LN264        ; "sb"
.text:00005884                 dd 0FFFFFE10h, 0A8h
.text:0000588C                 dd offset $LN265        ; "threadDecoder"
.text:00005890                 dd 0FFFFFDF4h, 10h
.text:00005898                 dd offset $LN266        ; "analysis"
.text:0000589C                 dd 0FFFFFDD0h, 10h
.text:000058A4                 dd offset $LN267        ; "fm"
.text:000058A8                 dd 0FFFFFDB8h, 4
.text:000058B0                 dd offset $LN268        ; "getTextPassword"
.text:000058B4                 dd 0FFFFFDACh, 4
.text:000058BC                 dd offset $LN269        ; "password"
.text:000058C0                 dd 0FFFFFD8Ch, 0Ch
.text:000058C8                 dd offset $LN270        ; "emptyRefs"
.text:000058CC                 dd 0FFFFFD64h, 18h
.text:000058D4                 dd offset $LN271        ; "file"
.text:000058D8                 dd 0FFFFFD34h, 28h
.text:000058E0                 dd offset $LN272        ; "file2"
.text:000058E4                 dd 0FFFFFD20h, 0Ch
.text:000058EC                 dd offset $LN273        ; "name"
.text:000058F0                 dd 0FFFFFCDCh, 30h
.text:000058F8                 dd offset $LN274        ; "method"
.text:000058FC                 dd 0FFFFFC18h, 0B4h
.text:00005904                 dd offset $LN275        ; "encoder"
.text:00005908                 dd 0FFFFFBC0h, 0Ch
.text:00005910                 dd offset $LN276        ; "extractStatuses"
.text:00005914                 dd 0FFFFFB8Ch, 8
.text:0000591C                 dd offset $LN277        ; "curUnpackSize"
.text:00005920                 dd 0FFFFFB80h, 4
.text:00005928                 dd offset $LN278        ; "sbInStream"
.text:0000592C                 dd 0FFFFFB68h, 4
.text:00005934                 dd offset $LN279        ; "inStreamSizeCount"
.text:00005938                 dd 0FFFFFB5Ch, 4
.text:00005940                 dd offset $LN280        ; "sbOutStream"
.text:00005944                 dd 0FFFFFB53h, 1
.text:0000594C                 dd offset $LN281        ; "isEncrypted"
.text:00005950                 dd 0FFFFFB47h, 1
.text:00005958                 dd offset $LN282        ; "passwordIsDefined"
.text:0000595C                 dd 0FFFFFB30h, 0Ch
.text:00005964                 dd offset $LN283        ; "password"
.text:00005968                 dd 0FFFFFB24h, 4
.text:00005970                 dd offset $LN284        ; "decodedStream"
.text:00005974                 db 0CCh
.text:00005975                 db 0FAh, 2 dup(0FFh)
.text:00005978                 dd 18h
.text:0000597C                 dd offset $LN285        ; "file"
.text:00005980                 dd 0FFFFFA9Ch, 28h
.text:00005988                 dd offset $LN286        ; "file2"
.text:0000598C                 dd 0FFFFFA88h, 0Ch
.text:00005994                 dd offset $LN287        ; "name"
.text:00005998                 dd 0FFFFFA60h, 18h
.text:000059A0                 dd offset $LN288        ; "uf"
.text:000059A4                 dd 0FFFFFA48h, 0Ch
.text:000059AC                 dd offset $LN289        ; "refItems"
.text:000059B0                 dd 0FFFFFA3Bh, 1
.text:000059B8                 dd offset $LN290        ; "sortParam"
.text:000059BC                 dd 0FFFFFA2Ch, 4
.text:000059C4                 dd offset $LN291        ; "indices"
.text:000059C8                 dd 0FFFFF9F4h, 4
.text:000059D0                 db  28h ; ( OFF32 SEGDEF [_text,5A28]
.text:000059D1                 db  5Ah ; Z
.text:000059D2                 db    0
.text:000059D3                 db    0
.text:000059D4                 dd 0FFFFF9E0h, 8
.text:000059DC                 dd offset $LN293        ; "curFolderUnpackSize"
.text:000059E0                 dd 0FFFFF9A8h, 18h
.text:000059E8                 db  0Fh ;  OFF32 SEGDEF [_text,5A0F]
.text:000059E9                 db  5Ah ; Z
.text:000059EA                 db    0
.text:000059EB                 db    0
.text:000059EC                 dd 0FFFFF978h, 28h
.text:000059F4                 dd offset $LN295        ; "file2"
.text:000059F8                 dd 0FFFFF964h, 0Ch
.text:00005A00                 dd offset $LN296        ; "name"
.text:00005A04 $LN296          db 'name',0             ; DATA XREF: .text:00005A00o
.text:00005A09 $LN295          db 'file2',0            ; DATA XREF: .text:000059F4o
.text:00005A0F $LN294          db 'file',0
.text:00005A14 $LN293          db 'curFolderUnpackSize',0 ; DATA XREF: .text:000059DCo
.text:00005A28 $LN292          db 'solidInStream',0
.text:00005A36 $LN291          db 'indices',0          ; DATA XREF: .text:000059C4o
.text:00005A3E $LN290          db 'sortParam',0        ; DATA XREF: .text:000059B8o
.text:00005A48 $LN289          db 'refItems',0         ; DATA XREF: .text:000059ACo
.text:00005A51 $LN288          db 'uf',0               ; DATA XREF: .text:000059A0o
.text:00005A54 $LN287          db 'name',0             ; DATA XREF: .text:00005994o
.text:00005A59 $LN286          db 'file2',0            ; DATA XREF: .text:00005988o
.text:00005A5F $LN285          db 'file',0             ; DATA XREF: .text:0000597Co
.text:00005A64 $LN284          db 'decodedStream',0    ; DATA XREF: .text:00005970o
.text:00005A72 $LN283          db 'password',0         ; DATA XREF: .text:00005964o
.text:00005A7B $LN282          db 'passwordIsDefined',0 ; DATA XREF: .text:00005958o
.text:00005A8D $LN281          db 'isEncrypted',0      ; DATA XREF: .text:0000594Co
.text:00005A99 $LN280          db 'sbOutStream',0      ; DATA XREF: .text:00005940o
.text:00005AA5 $LN279          db 'inStreamSizeCount',0 ; DATA XREF: .text:00005934o
.text:00005AB7 $LN278          db 'sbInStream',0       ; DATA XREF: .text:00005928o
.text:00005AC2 $LN277          db 'curUnpackSize',0    ; DATA XREF: .text:0000591Co
.text:00005AD0 $LN276          db 'extractStatuses',0  ; DATA XREF: .text:00005910o
.text:00005AE0 $LN275          db 'encoder',0          ; DATA XREF: .text:00005904o
.text:00005AE8 $LN274          db 'method',0           ; DATA XREF: .text:000058F8o
.text:00005AEF $LN273          db 'name',0             ; DATA XREF: .text:000058ECo
.text:00005AF4 $LN272          db 'file2',0            ; DATA XREF: .text:000058E0o
.text:00005AFA $LN271          db 'file',0             ; DATA XREF: .text:000058D4o
.text:00005AFF $LN270          db 'emptyRefs',0        ; DATA XREF: .text:000058C8o
.text:00005B09 $LN269          db 'password',0         ; DATA XREF: .text:000058BCo
.text:00005B12 $LN268          db 'getTextPassword',0  ; DATA XREF: .text:000058B0o
.text:00005B22 $LN267          db 'fm',0               ; DATA XREF: .text:000058A4o
.text:00005B25 $LN266          db 'analysis',0         ; DATA XREF: .text:00005898o
.text:00005B2E $LN265          db 'threadDecoder',0    ; DATA XREF: .text:0000588Co
.text:00005B3C $LN264          db 'sb',0               ; DATA XREF: .text:00005880o
.text:00005B3F $LN263          db 'progress',0         ; DATA XREF: .text:00005874o
.text:00005B48 $LN262          db 'inSizeForReduce',0  ; DATA XREF: .text:00005868o
.text:00005B58 $LN261          db 'f',0                ; DATA XREF: .text:0000585Co
.text:00005B5A $LN260          db 'rep',0              ; DATA XREF: .text:00005850o
.text:00005B5E $LN259          db 'groups',0           ; DATA XREF: .text:00005844o
.text:00005B65 $LN258          db 'filters',0          ; DATA XREF: .text:00005838o
.text:00005B6D $LN257          db 'fileIndexToUpdateIndexMap',0 ; DATA XREF: .text:0000582Co
.text:00005B87 $LN256          db 'extractCallback',0  ; DATA XREF: .text:00005820o
.text:00005B97 $LN255          db 'opCallback',0       ; DATA XREF: .text:00005814o
.text:00005BA2                 align 10h
.text:00005BB0
.text:00005BB0 ; =============== S U B R O U T I N E =======================================
.text:00005BB0
.text:00005BB0 ; Attributes: bp-based frame
.text:00005BB0
.text:00005BB0 ; bool __stdcall NArchive::N7z::IsFilterMethod(unsigned __int64)
.text:00005BB0 ?IsFilterMethod@N7z@NArchive@@YG_N_K@Z proc near
.text:00005BB0                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+9AEp
.text:00005BB0
.text:00005BB0 var_4           = dword ptr -4
.text:00005BB0 arg_0           = dword ptr  8
.text:00005BB0 arg_4           = dword ptr  0Ch
.text:00005BB0
.text:00005BB0                 push    ebp
.text:00005BB1                 mov     ebp, esp
.text:00005BB3                 push    ecx
.text:00005BB4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005BBB                 cmp     [ebp+arg_4], 0
.text:00005BBF                 ja      short loc_5BC7
.text:00005BC1                 cmp     [ebp+arg_0], 0FFFFFFFFh
.text:00005BC5                 jbe     short loc_5BCE
.text:00005BC7
.text:00005BC7 loc_5BC7:                               ; CODE XREF: NArchive::N7z::IsFilterMethod(unsigned __int64)+Fj
.text:00005BC7                 xor     al, al
.text:00005BC9                 jmp     loc_5C54
.text:00005BCE ; ---------------------------------------------------------------------------
.text:00005BCE
.text:00005BCE loc_5BCE:                               ; CODE XREF: NArchive::N7z::IsFilterMethod(unsigned __int64)+15j
.text:00005BCE                 mov     eax, [ebp+arg_0]
.text:00005BD1                 mov     [ebp+var_4], eax
.text:00005BD4                 cmp     [ebp+var_4], 3030205h
.text:00005BDB                 ja      short loc_5C1D
.text:00005BDD                 cmp     [ebp+var_4], 3030205h
.text:00005BE4                 jz      short loc_5C4E
.text:00005BE6                 cmp     [ebp+var_4], 20304h
.text:00005BED                 ja      short loc_5C09
.text:00005BEF                 cmp     [ebp+var_4], 20304h
.text:00005BF6                 jz      short loc_5C4E
.text:00005BF8                 cmp     [ebp+var_4], 3
.text:00005BFC                 jz      short loc_5C4E
.text:00005BFE                 cmp     [ebp+var_4], 20302h
.text:00005C05                 jz      short loc_5C4E
.text:00005C07                 jmp     short loc_5C52
.text:00005C09 ; ---------------------------------------------------------------------------
.text:00005C09
.text:00005C09 loc_5C09:                               ; CODE XREF: NArchive::N7z::IsFilterMethod(unsigned __int64)+3Dj
.text:00005C09                 cmp     [ebp+var_4], 3030103h
.text:00005C10                 jz      short loc_5C4E
.text:00005C12                 cmp     [ebp+var_4], 303011Bh
.text:00005C19                 jz      short loc_5C4E
.text:00005C1B                 jmp     short loc_5C52
.text:00005C1D ; ---------------------------------------------------------------------------
.text:00005C1D
.text:00005C1D loc_5C1D:                               ; CODE XREF: NArchive::N7z::IsFilterMethod(unsigned __int64)+2Bj
.text:00005C1D                 cmp     [ebp+var_4], 3030701h
.text:00005C24                 ja      short loc_5C43
.text:00005C26                 cmp     [ebp+var_4], 3030701h
.text:00005C2D                 jz      short loc_5C4E
.text:00005C2F                 cmp     [ebp+var_4], 3030401h
.text:00005C36                 jz      short loc_5C4E
.text:00005C38                 cmp     [ebp+var_4], 3030501h
.text:00005C3F                 jz      short loc_5C4E
.text:00005C41                 jmp     short loc_5C52
.text:00005C43 ; ---------------------------------------------------------------------------
.text:00005C43
.text:00005C43 loc_5C43:                               ; CODE XREF: NArchive::N7z::IsFilterMethod(unsigned __int64)+74j
.text:00005C43                 cmp     [ebp+var_4], 3030805h
.text:00005C4A                 jz      short loc_5C4E
.text:00005C4C                 jmp     short loc_5C52
.text:00005C4E ; ---------------------------------------------------------------------------
.text:00005C4E
.text:00005C4E loc_5C4E:                               ; CODE XREF: NArchive::N7z::IsFilterMethod(unsigned __int64)+34j
.text:00005C4E                                         ; NArchive::N7z::IsFilterMethod(unsigned __int64)+46j ...
.text:00005C4E                 mov     al, 1
.text:00005C50                 jmp     short loc_5C54
.text:00005C52 ; ---------------------------------------------------------------------------
.text:00005C52
.text:00005C52 loc_5C52:                               ; CODE XREF: NArchive::N7z::IsFilterMethod(unsigned __int64)+57j
.text:00005C52                                         ; NArchive::N7z::IsFilterMethod(unsigned __int64)+6Bj ...
.text:00005C52                 xor     al, al
.text:00005C54
.text:00005C54 loc_5C54:                               ; CODE XREF: NArchive::N7z::IsFilterMethod(unsigned __int64)+19j
.text:00005C54                                         ; NArchive::N7z::IsFilterMethod(unsigned __int64)+A0j
.text:00005C54                 mov     esp, ebp
.text:00005C56                 pop     ebp
.text:00005C57                 retn    8
.text:00005C57 ?IsFilterMethod@N7z@NArchive@@YG_N_K@Z endp
.text:00005C57
.text:00005C57 ; ---------------------------------------------------------------------------
.text:00005C5A                 align 10h
.text:00005C60
.text:00005C60 ; =============== S U B R O U T I N E =======================================
.text:00005C60
.text:00005C60 ; Attributes: bp-based frame
.text:00005C60
.text:00005C60 ; unsigned int __stdcall NArchive::N7z::GetGroup(class CRecordVector<struct NArchive::N7z::CFilterMode2> &, struct NArchive::N7z::CFilterMode2 const &)
.text:00005C60 ?GetGroup@N7z@NArchive@@YGIAAV?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@ABUCFilterMode2@12@@Z proc near
.text:00005C60                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+B24p
.text:00005C60                                         ; NArchive::N7z::Get_FilterGroup_for_Folder(CRecordVector<NArchive::N7z::CFilterMode2> &,NArchive::N7z::CFolderEx const &)+DCp
.text:00005C60
.text:00005C60 var_8           = dword ptr -8
.text:00005C60 var_4           = dword ptr -4
.text:00005C60 arg_0           = dword ptr  8
.text:00005C60 arg_4           = dword ptr  0Ch
.text:00005C60
.text:00005C60                 push    ebp
.text:00005C61                 mov     ebp, esp
.text:00005C63                 sub     esp, 8
.text:00005C66                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005C6D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005C74                 mov     [ebp+var_4], 0
.text:00005C7B                 jmp     short loc_5C86
.text:00005C7D ; ---------------------------------------------------------------------------
.text:00005C7D
.text:00005C7D loc_5C7D:                               ; CODE XREF: NArchive::N7z::GetGroup(CRecordVector<NArchive::N7z::CFilterMode2> &,NArchive::N7z::CFilterMode2 const &):loc_5CBAj
.text:00005C7D                 mov     eax, [ebp+var_4]
.text:00005C80                 add     eax, 1
.text:00005C83                 mov     [ebp+var_4], eax
.text:00005C86
.text:00005C86 loc_5C86:                               ; CODE XREF: NArchive::N7z::GetGroup(CRecordVector<NArchive::N7z::CFilterMode2> &,NArchive::N7z::CFilterMode2 const &)+1Bj
.text:00005C86                 mov     ecx, [ebp+arg_0]
.text:00005C89                 call    ?Size@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CFilterMode2>::Size(void)
.text:00005C8E                 cmp     [ebp+var_4], eax
.text:00005C91                 jnb     short loc_5CBC
.text:00005C93                 mov     ecx, [ebp+var_4]
.text:00005C96                 push    ecx
.text:00005C97                 mov     ecx, [ebp+arg_0]
.text:00005C9A                 call    ??A?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAEAAUCFilterMode2@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFilterMode2>::operator[](uint)
.text:00005C9F                 mov     [ebp+var_8], eax
.text:00005CA2                 mov     edx, [ebp+var_8]
.text:00005CA5                 push    edx
.text:00005CA6                 mov     ecx, [ebp+arg_4]
.text:00005CA9                 call    ??8CFilterMode2@N7z@NArchive@@QBE_NABU012@@Z ; NArchive::N7z::CFilterMode2::operator==(NArchive::N7z::CFilterMode2 const &)
.text:00005CAE                 movzx   eax, al
.text:00005CB1                 test    eax, eax
.text:00005CB3                 jz      short loc_5CBA
.text:00005CB5                 mov     eax, [ebp+var_4]
.text:00005CB8                 jmp     short loc_5CE2
.text:00005CBA ; ---------------------------------------------------------------------------
.text:00005CBA
.text:00005CBA loc_5CBA:                               ; CODE XREF: NArchive::N7z::GetGroup(CRecordVector<NArchive::N7z::CFilterMode2> &,NArchive::N7z::CFilterMode2 const &)+53j
.text:00005CBA                 jmp     short loc_5C7D
.text:00005CBC ; ---------------------------------------------------------------------------
.text:00005CBC
.text:00005CBC loc_5CBC:                               ; CODE XREF: NArchive::N7z::GetGroup(CRecordVector<NArchive::N7z::CFilterMode2> &,NArchive::N7z::CFilterMode2 const &)+31j
.text:00005CBC                 mov     ecx, [ebp+arg_4]
.text:00005CBF                 sub     esp, 10h
.text:00005CC2                 mov     edx, esp
.text:00005CC4                 mov     eax, [ecx]
.text:00005CC6                 mov     [edx], eax
.text:00005CC8                 mov     eax, [ecx+4]
.text:00005CCB                 mov     [edx+4], eax
.text:00005CCE                 mov     eax, [ecx+8]
.text:00005CD1                 mov     [edx+8], eax
.text:00005CD4                 mov     ecx, [ecx+0Ch]
.text:00005CD7                 mov     [edx+0Ch], ecx
.text:00005CDA                 mov     ecx, [ebp+arg_0]
.text:00005CDD                 call    ?Add@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAEIUCFilterMode2@N7z@NArchive@@@Z ; CRecordVector<NArchive::N7z::CFilterMode2>::Add(NArchive::N7z::CFilterMode2)
.text:00005CE2
.text:00005CE2 loc_5CE2:                               ; CODE XREF: NArchive::N7z::GetGroup(CRecordVector<NArchive::N7z::CFilterMode2> &,NArchive::N7z::CFilterMode2 const &)+58j
.text:00005CE2                 add     esp, 8
.text:00005CE5                 cmp     ebp, esp
.text:00005CE7                 call    __RTC_CheckEsp
.text:00005CEC                 mov     esp, ebp
.text:00005CEE                 pop     ebp
.text:00005CEF                 retn    8
.text:00005CEF ?GetGroup@N7z@NArchive@@YGIAAV?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@ABUCFilterMode2@12@@Z endp
.text:00005CEF
.text:00005CEF ; ---------------------------------------------------------------------------
.text:00005CF2                 align 10h
.text:00005D00
.text:00005D00 ; =============== S U B R O U T I N E =======================================
.text:00005D00
.text:00005D00 ; Attributes: bp-based frame
.text:00005D00
.text:00005D00 ; int __stdcall NArchive::N7z::Get_FilterGroup_for_Folder(int, NArchive::N7z::CFolder *)
.text:00005D00 ?Get_FilterGroup_for_Folder@N7z@NArchive@@YGIAAV?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@ABUCFolderEx@12@@Z proc near
.text:00005D00                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+445p
.text:00005D00
.text:00005D00 var_20          = dword ptr -20h
.text:00005D00 var_1C          = dword ptr -1Ch
.text:00005D00 var_18          = dword ptr -18h
.text:00005D00 var_14          = dword ptr -14h
.text:00005D00 var_10          = dword ptr -10h
.text:00005D00 var_C           = dword ptr -0Ch
.text:00005D00 var_8           = dword ptr -8
.text:00005D00 var_4           = dword ptr -4
.text:00005D00 arg_0           = dword ptr  8
.text:00005D00 arg_4           = dword ptr  0Ch
.text:00005D00
.text:00005D00                 push    ebp
.text:00005D01                 mov     ebp, esp
.text:00005D03                 sub     esp, 20h
.text:00005D06                 mov     eax, 0CCCCCCCCh
.text:00005D0B                 mov     [ebp+var_20], eax
.text:00005D0E                 mov     [ebp+var_1C], eax
.text:00005D11                 mov     [ebp+var_18], eax
.text:00005D14                 mov     [ebp+var_14], eax
.text:00005D17                 mov     [ebp+var_10], eax
.text:00005D1A                 mov     [ebp+var_C], eax
.text:00005D1D                 mov     [ebp+var_8], eax
.text:00005D20                 mov     [ebp+var_4], eax
.text:00005D23                 lea     ecx, [ebp+var_14] ; this
.text:00005D26                 call    ??0CFilterMode2@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFilterMode2::CFilterMode2(void)
.text:00005D2B                 mov     [ebp+var_14], 0
.text:00005D32                 mov     [ebp+var_10], 0
.text:00005D39                 mov     ecx, [ebp+arg_4] ; this
.text:00005D3C                 call    ?IsEncrypted@CFolder@N7z@NArchive@@QBE_NXZ ; NArchive::N7z::CFolder::IsEncrypted(void)
.text:00005D41                 mov     byte ptr [ebp+var_C], al
.text:00005D44                 mov     ecx, [ebp+arg_4]
.text:00005D47                 call    ??B?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEPBUCCoderInfo@N7z@NArchive@@XZ ; CObjArray2<NArchive::N7z::CCoderInfo>::operator NArchive::N7z::CCoderInfo const *(void)
.text:00005D4C                 mov     ecx, [ebp+arg_4]
.text:00005D4F                 mov     edx, [ecx+18h]
.text:00005D52                 imul    edx, 18h
.text:00005D55                 add     eax, edx
.text:00005D57                 mov     [ebp+var_1C], eax
.text:00005D5A                 mov     eax, [ebp+var_1C]
.text:00005D5D                 mov     [ebp+var_20], eax
.text:00005D60                 mov     ecx, [ebp+var_20]
.text:00005D63                 cmp     dword ptr [ecx], 3
.text:00005D66                 jnz     short loc_5D9E
.text:00005D68                 mov     edx, [ebp+var_20]
.text:00005D6B                 cmp     dword ptr [edx+4], 0
.text:00005D6F                 jnz     short loc_5D9E
.text:00005D71                 mov     ecx, [ebp+var_1C]
.text:00005D74                 add     ecx, 8
.text:00005D77                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:00005D7C                 cmp     eax, 1
.text:00005D7F                 jnz     short loc_5D9C
.text:00005D81                 mov     ecx, [ebp+var_1C]
.text:00005D84                 add     ecx, 8
.text:00005D87                 call    ??B?$CBuffer@E@@QBEPBEXZ ; CBuffer<uchar>::operator uchar const *(void)
.text:00005D8C                 movzx   eax, byte ptr [eax]
.text:00005D8F                 add     eax, 1
.text:00005D92                 mov     [ebp+var_10], eax
.text:00005D95                 mov     [ebp+var_14], 3
.text:00005D9C
.text:00005D9C loc_5D9C:                               ; CODE XREF: NArchive::N7z::Get_FilterGroup_for_Folder(CRecordVector<NArchive::N7z::CFilterMode2> &,NArchive::N7z::CFolderEx const &)+7Fj
.text:00005D9C                 jmp     short loc_5DD4
.text:00005D9E ; ---------------------------------------------------------------------------
.text:00005D9E
.text:00005D9E loc_5D9E:                               ; CODE XREF: NArchive::N7z::Get_FilterGroup_for_Folder(CRecordVector<NArchive::N7z::CFilterMode2> &,NArchive::N7z::CFolderEx const &)+66j
.text:00005D9E                                         ; NArchive::N7z::Get_FilterGroup_for_Folder(CRecordVector<NArchive::N7z::CFilterMode2> &,NArchive::N7z::CFolderEx const &)+6Fj
.text:00005D9E                 mov     ecx, [ebp+var_1C]
.text:00005DA1                 mov     edx, [ecx+4]
.text:00005DA4                 push    edx
.text:00005DA5                 mov     eax, [ecx]
.text:00005DA7                 push    eax
.text:00005DA8                 call    ?IsExeFilter@N7z@NArchive@@YG_N_K@Z ; NArchive::N7z::IsExeFilter(unsigned __int64)
.text:00005DAD                 movzx   ecx, al
.text:00005DB0                 test    ecx, ecx
.text:00005DB2                 jz      short loc_5DD4
.text:00005DB4                 mov     edx, [ebp+var_1C]
.text:00005DB7                 mov     eax, [edx]
.text:00005DB9                 mov     [ebp+var_14], eax
.text:00005DBC                 cmp     [ebp+var_14], 303011Bh
.text:00005DC3                 jnz     short loc_5DCC
.text:00005DC5                 mov     [ebp+var_14], 3030103h
.text:00005DCC
.text:00005DCC loc_5DCC:                               ; CODE XREF: NArchive::N7z::Get_FilterGroup_for_Folder(CRecordVector<NArchive::N7z::CFilterMode2> &,NArchive::N7z::CFolderEx const &)+C3j
.text:00005DCC                 lea     ecx, [ebp+var_14] ; this
.text:00005DCF                 call    ?SetDelta@CFilterMode@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CFilterMode::SetDelta(void)
.text:00005DD4
.text:00005DD4 loc_5DD4:                               ; CODE XREF: NArchive::N7z::Get_FilterGroup_for_Folder(CRecordVector<NArchive::N7z::CFilterMode2> &,NArchive::N7z::CFolderEx const &):loc_5D9Cj
.text:00005DD4                                         ; NArchive::N7z::Get_FilterGroup_for_Folder(CRecordVector<NArchive::N7z::CFilterMode2> &,NArchive::N7z::CFolderEx const &)+B2j
.text:00005DD4                 lea     ecx, [ebp+var_14]
.text:00005DD7                 push    ecx
.text:00005DD8                 mov     edx, [ebp+arg_0]
.text:00005DDB                 push    edx
.text:00005DDC                 call    ?GetGroup@N7z@NArchive@@YGIAAV?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@ABUCFilterMode2@12@@Z ; NArchive::N7z::GetGroup(CRecordVector<NArchive::N7z::CFilterMode2> &,NArchive::N7z::CFilterMode2 const &)
.text:00005DE1                 push    edx
.text:00005DE2                 mov     ecx, ebp
.text:00005DE4                 push    eax
.text:00005DE5                 lea     edx, $LN10_0
.text:00005DEB                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00005DF0                 pop     eax
.text:00005DF1                 pop     edx
.text:00005DF2                 add     esp, 20h
.text:00005DF5                 cmp     ebp, esp
.text:00005DF7                 call    __RTC_CheckEsp
.text:00005DFC                 mov     esp, ebp
.text:00005DFE                 pop     ebp
.text:00005DFF                 retn    8
.text:00005DFF ?Get_FilterGroup_for_Folder@N7z@NArchive@@YGIAAV?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@ABUCFolderEx@12@@Z endp
.text:00005DFF
.text:00005DFF ; ---------------------------------------------------------------------------
.text:00005E02                 align 4
.text:00005E04 $LN10_0         dd 1                    ; DATA XREF: NArchive::N7z::Get_FilterGroup_for_Folder(CRecordVector<NArchive::N7z::CFilterMode2> &,NArchive::N7z::CFolderEx const &)+E5o
.text:00005E08                 dd offset $LN9
.text:00005E0C $LN9            dd 0FFFFFFECh, 10h      ; DATA XREF: .text:00005E08o
.text:00005E14                 dd offset $LN8
.text:00005E18 $LN8            dd 0CCCC006Dh, 0CCCCCCCCh ; DATA XREF: .text:00005E14o
.text:00005E20
.text:00005E20 ; =============== S U B R O U T I N E =======================================
.text:00005E20
.text:00005E20 ; Attributes: bp-based frame
.text:00005E20
.text:00005E20 ; bool __stdcall NArchive::N7z::IsExeFilter(unsigned __int64)
.text:00005E20 ?IsExeFilter@N7z@NArchive@@YG_N_K@Z proc near
.text:00005E20                                         ; CODE XREF: NArchive::N7z::Get_FilterGroup_for_Folder(CRecordVector<NArchive::N7z::CFilterMode2> &,NArchive::N7z::CFolderEx const &)+A8p
.text:00005E20
.text:00005E20 var_10          = dword ptr -10h
.text:00005E20 var_C           = dword ptr -0Ch
.text:00005E20 var_8           = dword ptr -8
.text:00005E20 var_4           = dword ptr -4
.text:00005E20 arg_0           = dword ptr  8
.text:00005E20 arg_4           = dword ptr  0Ch
.text:00005E20
.text:00005E20                 push    ebp
.text:00005E21                 mov     ebp, esp
.text:00005E23                 sub     esp, 10h
.text:00005E26                 mov     eax, 0CCCCCCCCh
.text:00005E2B                 mov     [ebp+var_10], eax
.text:00005E2E                 mov     [ebp+var_C], eax
.text:00005E31                 mov     [ebp+var_8], eax
.text:00005E34                 mov     [ebp+var_4], eax
.text:00005E37                 mov     eax, [ebp+arg_0]
.text:00005E3A                 mov     [ebp+var_8], eax
.text:00005E3D                 mov     ecx, [ebp+arg_4]
.text:00005E40                 mov     [ebp+var_4], ecx
.text:00005E43                 cmp     [ebp+var_4], 0
.text:00005E47                 ja      short loc_5EAA
.text:00005E49                 jb      short loc_5E54
.text:00005E4B                 cmp     [ebp+var_8], 3030805h
.text:00005E52                 ja      short loc_5EAA
.text:00005E54
.text:00005E54 loc_5E54:                               ; CODE XREF: NArchive::N7z::IsExeFilter(unsigned __int64)+29j
.text:00005E54                 mov     edx, [ebp+var_8]
.text:00005E57                 mov     [ebp+var_10], edx
.text:00005E5A                 cmp     [ebp+var_10], 3030401h
.text:00005E61                 ja      short loc_5E89
.text:00005E63                 cmp     [ebp+var_10], 3030401h
.text:00005E6A                 jz      short loc_5EA6
.text:00005E6C                 cmp     [ebp+var_10], 3030103h
.text:00005E73                 jz      short loc_5EA6
.text:00005E75                 cmp     [ebp+var_10], 303011Bh
.text:00005E7C                 jz      short loc_5EA6
.text:00005E7E                 cmp     [ebp+var_10], 3030205h
.text:00005E85                 jz      short loc_5EA6
.text:00005E87                 jmp     short loc_5EAA
.text:00005E89 ; ---------------------------------------------------------------------------
.text:00005E89
.text:00005E89 loc_5E89:                               ; CODE XREF: NArchive::N7z::IsExeFilter(unsigned __int64)+41j
.text:00005E89                 cmp     [ebp+var_10], 3030501h
.text:00005E90                 jz      short loc_5EA6
.text:00005E92                 cmp     [ebp+var_10], 3030701h
.text:00005E99                 jz      short loc_5EA6
.text:00005E9B                 cmp     [ebp+var_10], 3030805h
.text:00005EA2                 jz      short loc_5EA6
.text:00005EA4                 jmp     short loc_5EAA
.text:00005EA6 ; ---------------------------------------------------------------------------
.text:00005EA6
.text:00005EA6 loc_5EA6:                               ; CODE XREF: NArchive::N7z::IsExeFilter(unsigned __int64)+4Aj
.text:00005EA6                                         ; NArchive::N7z::IsExeFilter(unsigned __int64)+53j ...
.text:00005EA6                 mov     al, 1
.text:00005EA8                 jmp     short loc_5EAC
.text:00005EAA ; ---------------------------------------------------------------------------
.text:00005EAA
.text:00005EAA loc_5EAA:                               ; CODE XREF: NArchive::N7z::IsExeFilter(unsigned __int64)+27j
.text:00005EAA                                         ; NArchive::N7z::IsExeFilter(unsigned __int64)+32j ...
.text:00005EAA                 xor     al, al
.text:00005EAC
.text:00005EAC loc_5EAC:                               ; CODE XREF: NArchive::N7z::IsExeFilter(unsigned __int64)+88j
.text:00005EAC                 mov     esp, ebp
.text:00005EAE                 pop     ebp
.text:00005EAF                 retn    8
.text:00005EAF ?IsExeFilter@N7z@NArchive@@YG_N_K@Z endp
.text:00005EAF
.text:00005EAF ; ---------------------------------------------------------------------------
.text:00005EB2                 align 10h
.text:00005EC0
.text:00005EC0 ; =============== S U B R O U T I N E =======================================
.text:00005EC0
.text:00005EC0 ; Attributes: bp-based frame
.text:00005EC0
.text:00005EC0 ; int __stdcall NArchive::N7z::WriteRange(struct ISequentialInStream *, int, int, int, unsigned __int64, int)
.text:00005EC0 ?WriteRange@N7z@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@_K2PAUICompressProgressInfo@@@Z proc near
.text:00005EC0                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+13Dp
.text:00005EC0                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+16E8p
.text:00005EC0
.text:00005EC0 var_60          = dword ptr -60h
.text:00005EC0 var_5C          = dword ptr -5Ch
.text:00005EC0 var_58          = dword ptr -58h
.text:00005EC0 var_54          = dword ptr -54h
.text:00005EC0 var_50          = dword ptr -50h
.text:00005EC0 var_4C          = dword ptr -4Ch
.text:00005EC0 var_48          = dword ptr -48h
.text:00005EC0 var_44          = dword ptr -44h
.text:00005EC0 var_40          = dword ptr -40h
.text:00005EC0 var_3C          = dword ptr -3Ch
.text:00005EC0 var_38          = dword ptr -38h
.text:00005EC0 var_34          = dword ptr -34h
.text:00005EC0 var_2C          = byte ptr -2Ch
.text:00005EC0 var_24          = dword ptr -24h
.text:00005EC0 var_1C          = byte ptr -1Ch
.text:00005EC0 var_14          = dword ptr -14h
.text:00005EC0 var_10          = dword ptr -10h
.text:00005EC0 var_C           = dword ptr -0Ch
.text:00005EC0 var_4           = dword ptr -4
.text:00005EC0 arg_0           = dword ptr  8
.text:00005EC0 arg_4           = dword ptr  0Ch
.text:00005EC0 arg_8           = dword ptr  10h
.text:00005EC0 arg_C           = dword ptr  14h
.text:00005EC0 arg_10          = qword ptr  18h
.text:00005EC0 arg_18          = dword ptr  20h
.text:00005EC0
.text:00005EC0                 push    ebp
.text:00005EC1                 mov     ebp, esp
.text:00005EC3                 push    0FFFFFFFFh
.text:00005EC5                 push    offset __ehhandler$?WriteRange@N7z@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@_K2PAUICompressProgressInfo@@@Z
.text:00005ECA                 mov     eax, large fs:0
.text:00005ED0                 push    eax
.text:00005ED1                 sub     esp, 54h
.text:00005ED4                 push    esi
.text:00005ED5                 push    edi
.text:00005ED6                 lea     edi, [ebp+var_60]
.text:00005ED9                 mov     ecx, 15h
.text:00005EDE                 mov     eax, 0CCCCCCCCh
.text:00005EE3                 rep stosd
.text:00005EE5                 mov     eax, dword ptr ds:___security_cookie
.text:00005EEA                 xor     eax, ebp
.text:00005EEC                 push    eax
.text:00005EED                 lea     eax, [ebp+var_C]
.text:00005EF0                 mov     large fs:0, eax
.text:00005EF6                 mov     esi, esp
.text:00005EF8                 push    0
.text:00005EFA                 push    0
.text:00005EFC                 mov     eax, [ebp+arg_C]
.text:00005EFF                 push    eax
.text:00005F00                 mov     ecx, [ebp+arg_8]
.text:00005F03                 push    ecx
.text:00005F04                 mov     edx, [ebp+arg_0]
.text:00005F07                 mov     eax, [edx]
.text:00005F09                 mov     ecx, [ebp+arg_0]
.text:00005F0C                 push    ecx
.text:00005F0D                 mov     edx, [eax+10h]
.text:00005F10                 call    edx
.text:00005F12                 cmp     esi, esp
.text:00005F14                 call    __RTC_CheckEsp
.text:00005F19                 mov     [ebp+var_10], eax
.text:00005F1C                 cmp     [ebp+var_10], 0
.text:00005F20                 jz      short loc_5F2A
.text:00005F22                 mov     eax, [ebp+var_10]
.text:00005F25                 jmp     loc_609B
.text:00005F2A ; ---------------------------------------------------------------------------
.text:00005F2A
.text:00005F2A loc_5F2A:                               ; CODE XREF: NArchive::N7z::WriteRange(IInStream *,ISequentialOutStream *,unsigned __int64,unsigned __int64,ICompressProgressInfo *)+60j
.text:00005F2A                 push    28h ; '('       ; unsigned int
.text:00005F2C                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00005F31                 add     esp, 4
.text:00005F34                 mov     [ebp+var_3C], eax
.text:00005F37                 mov     [ebp+var_4], 0
.text:00005F3E                 cmp     [ebp+var_3C], 0
.text:00005F42                 jz      short loc_5F51
.text:00005F44                 mov     ecx, [ebp+var_3C]
.text:00005F47                 call    ??0CLimitedSequentialInStream@@QAE@XZ ; CLimitedSequentialInStream::CLimitedSequentialInStream(void)
.text:00005F4C                 mov     [ebp+var_50], eax
.text:00005F4F                 jmp     short loc_5F58
.text:00005F51 ; ---------------------------------------------------------------------------
.text:00005F51
.text:00005F51 loc_5F51:                               ; CODE XREF: NArchive::N7z::WriteRange(IInStream *,ISequentialOutStream *,unsigned __int64,unsigned __int64,ICompressProgressInfo *)+82j
.text:00005F51                 mov     [ebp+var_50], 0
.text:00005F58
.text:00005F58 loc_5F58:                               ; CODE XREF: NArchive::N7z::WriteRange(IInStream *,ISequentialOutStream *,unsigned __int64,unsigned __int64,ICompressProgressInfo *)+8Fj
.text:00005F58                 mov     eax, [ebp+var_50]
.text:00005F5B                 mov     [ebp+var_38], eax
.text:00005F5E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00005F65                 mov     ecx, [ebp+var_38]
.text:00005F68                 mov     [ebp+var_14], ecx
.text:00005F6B                 mov     edx, [ebp+var_14]
.text:00005F6E                 push    edx
.text:00005F6F                 lea     ecx, [ebp+var_1C]
.text:00005F72                 call    ??0?$CMyComPtr@VCLimitedSequentialInStream@@@@QAE@PAVCLimitedSequentialInStream@@@Z ; CMyComPtr<CLimitedSequentialInStream>::CMyComPtr<CLimitedSequentialInStream>(CLimitedSequentialInStream *)
.text:00005F77                 mov     [ebp+var_4], 1
.text:00005F7E                 mov     eax, [ebp+arg_0]
.text:00005F81                 push    eax             ; struct ISequentialInStream *
.text:00005F82                 mov     ecx, [ebp+var_14] ; this
.text:00005F85                 call    ?SetStream@CLimitedSequentialInStream@@QAEXPAUISequentialInStream@@@Z ; CLimitedSequentialInStream::SetStream(ISequentialInStream *)
.text:00005F8A                 mov     ecx, dword ptr [ebp+arg_10+4]
.text:00005F8D                 push    ecx
.text:00005F8E                 mov     edx, dword ptr [ebp+arg_10]
.text:00005F91                 push    edx             ; unsigned __int64
.text:00005F92                 mov     ecx, [ebp+var_14] ; this
.text:00005F95                 call    ?Init@CLimitedSequentialInStream@@QAEX_K@Z ; CLimitedSequentialInStream::Init(unsigned __int64)
.text:00005F9A                 push    28h ; '('       ; unsigned int
.text:00005F9C                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00005FA1                 add     esp, 4
.text:00005FA4                 mov     [ebp+var_44], eax
.text:00005FA7                 mov     byte ptr [ebp+var_4], 2
.text:00005FAB                 cmp     [ebp+var_44], 0
.text:00005FAF                 jz      short loc_5FBE
.text:00005FB1                 mov     ecx, [ebp+var_44] ; this
.text:00005FB4                 call    ??0CCopyCoder@NCompress@@QAE@XZ ; NCompress::CCopyCoder::CCopyCoder(void)
.text:00005FB9                 mov     [ebp+var_54], eax
.text:00005FBC                 jmp     short loc_5FC5
.text:00005FBE ; ---------------------------------------------------------------------------
.text:00005FBE
.text:00005FBE loc_5FBE:                               ; CODE XREF: NArchive::N7z::WriteRange(IInStream *,ISequentialOutStream *,unsigned __int64,unsigned __int64,ICompressProgressInfo *)+EFj
.text:00005FBE                 mov     [ebp+var_54], 0
.text:00005FC5
.text:00005FC5 loc_5FC5:                               ; CODE XREF: NArchive::N7z::WriteRange(IInStream *,ISequentialOutStream *,unsigned __int64,unsigned __int64,ICompressProgressInfo *)+FCj
.text:00005FC5                 mov     eax, [ebp+var_54]
.text:00005FC8                 mov     [ebp+var_40], eax
.text:00005FCB                 mov     byte ptr [ebp+var_4], 1
.text:00005FCF                 mov     ecx, [ebp+var_40]
.text:00005FD2                 mov     [ebp+var_24], ecx
.text:00005FD5                 mov     edx, [ebp+var_24]
.text:00005FD8                 push    edx
.text:00005FD9                 lea     ecx, [ebp+var_2C]
.text:00005FDC                 call    ??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>(ICompressCoder *)
.text:00005FE1                 mov     byte ptr [ebp+var_4], 3
.text:00005FE5                 lea     ecx, [ebp+var_2C]
.text:00005FE8                 call    ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator->(void)
.text:00005FED                 mov     [ebp+var_58], eax
.text:00005FF0                 mov     esi, esp
.text:00005FF2                 mov     eax, [ebp+arg_18]
.text:00005FF5                 push    eax
.text:00005FF6                 push    0
.text:00005FF8                 push    0
.text:00005FFA                 mov     ecx, [ebp+arg_4]
.text:00005FFD                 push    ecx
.text:00005FFE                 lea     ecx, [ebp+var_1C]
.text:00006001                 call    ??B?$CMyComPtr@VCLimitedSequentialInStream@@@@QBEPAVCLimitedSequentialInStream@@XZ ; CMyComPtr<CLimitedSequentialInStream>::operator CLimitedSequentialInStream *(void)
.text:00006006                 push    eax
.text:00006007                 mov     edx, [ebp+var_58]
.text:0000600A                 push    edx
.text:0000600B                 mov     eax, [ebp+var_58]
.text:0000600E                 mov     ecx, [eax]
.text:00006010                 mov     edx, [ecx+0Ch]
.text:00006013                 call    edx
.text:00006015                 cmp     esi, esp
.text:00006017                 call    __RTC_CheckEsp
.text:0000601C                 mov     [ebp+var_34], eax
.text:0000601F                 cmp     [ebp+var_34], 0
.text:00006023                 jz      short loc_604B
.text:00006025                 mov     eax, [ebp+var_34]
.text:00006028                 mov     [ebp+var_48], eax
.text:0000602B                 mov     byte ptr [ebp+var_4], 1
.text:0000602F                 lea     ecx, [ebp+var_2C]
.text:00006032                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00006037                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000603E                 lea     ecx, [ebp+var_1C]
.text:00006041                 call    ??1?$CMyComPtr@VCLimitedSequentialInStream@@@@QAE@XZ ; CMyComPtr<CLimitedSequentialInStream>::~CMyComPtr<CLimitedSequentialInStream>(void)
.text:00006046                 mov     eax, [ebp+var_48]
.text:00006049                 jmp     short loc_609B
.text:0000604B ; ---------------------------------------------------------------------------
.text:0000604B
.text:0000604B loc_604B:                               ; CODE XREF: NArchive::N7z::WriteRange(IInStream *,ISequentialOutStream *,unsigned __int64,unsigned __int64,ICompressProgressInfo *)+163j
.text:0000604B                 mov     ecx, [ebp+var_24]
.text:0000604E                 mov     [ebp+var_5C], ecx
.text:00006051                 mov     edx, [ebp+var_5C]
.text:00006054                 mov     eax, [edx+20h]
.text:00006057                 cmp     eax, dword ptr [ebp+arg_10]
.text:0000605A                 jnz     short loc_6070
.text:0000605C                 mov     ecx, [ebp+var_5C]
.text:0000605F                 mov     edx, [ecx+24h]
.text:00006062                 cmp     edx, dword ptr [ebp+arg_10+4]
.text:00006065                 jnz     short loc_6070
.text:00006067                 mov     [ebp+var_60], 0
.text:0000606E                 jmp     short loc_6077
.text:00006070 ; ---------------------------------------------------------------------------
.text:00006070
.text:00006070 loc_6070:                               ; CODE XREF: NArchive::N7z::WriteRange(IInStream *,ISequentialOutStream *,unsigned __int64,unsigned __int64,ICompressProgressInfo *)+19Aj
.text:00006070                                         ; NArchive::N7z::WriteRange(IInStream *,ISequentialOutStream *,unsigned __int64,unsigned __int64,ICompressProgressInfo *)+1A5j
.text:00006070                 mov     [ebp+var_60], 80004005h
.text:00006077
.text:00006077 loc_6077:                               ; CODE XREF: NArchive::N7z::WriteRange(IInStream *,ISequentialOutStream *,unsigned __int64,unsigned __int64,ICompressProgressInfo *)+1AEj
.text:00006077                 mov     eax, [ebp+var_60]
.text:0000607A                 mov     [ebp+var_4C], eax
.text:0000607D                 mov     byte ptr [ebp+var_4], 1
.text:00006081                 lea     ecx, [ebp+var_2C]
.text:00006084                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00006089                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00006090                 lea     ecx, [ebp+var_1C]
.text:00006093                 call    ??1?$CMyComPtr@VCLimitedSequentialInStream@@@@QAE@XZ ; CMyComPtr<CLimitedSequentialInStream>::~CMyComPtr<CLimitedSequentialInStream>(void)
.text:00006098                 mov     eax, [ebp+var_4C]
.text:0000609B
.text:0000609B loc_609B:                               ; CODE XREF: NArchive::N7z::WriteRange(IInStream *,ISequentialOutStream *,unsigned __int64,unsigned __int64,ICompressProgressInfo *)+65j
.text:0000609B                                         ; NArchive::N7z::WriteRange(IInStream *,ISequentialOutStream *,unsigned __int64,unsigned __int64,ICompressProgressInfo *)+189j
.text:0000609B                 push    edx
.text:0000609C                 mov     ecx, ebp
.text:0000609E                 push    eax
.text:0000609F                 lea     edx, $LN19
.text:000060A5                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000060AA                 pop     eax
.text:000060AB                 pop     edx
.text:000060AC                 mov     ecx, [ebp+var_C]
.text:000060AF                 mov     large fs:0, ecx
.text:000060B6                 pop     ecx
.text:000060B7                 pop     edi
.text:000060B8                 pop     esi
.text:000060B9                 add     esp, 60h
.text:000060BC                 cmp     ebp, esp
.text:000060BE                 call    __RTC_CheckEsp
.text:000060C3                 mov     esp, ebp
.text:000060C5                 pop     ebp
.text:000060C6                 retn    1Ch
.text:000060C6 ?WriteRange@N7z@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@_K2PAUICompressProgressInfo@@@Z endp
.text:000060C6
.text:000060C6 ; ---------------------------------------------------------------------------
.text:000060C9                 align 4
.text:000060CC $LN19           dd 2                    ; DATA XREF: NArchive::N7z::WriteRange(IInStream *,ISequentialOutStream *,unsigned __int64,unsigned __int64,ICompressProgressInfo *)+1DFo
.text:000060D0                 dd offset $LN18
.text:000060D4 $LN18           dd 0FFFFFFE4h, 4        ; DATA XREF: .text:000060D0o
.text:000060DC                 dd offset $LN15_0       ; "inStreamLimited"
.text:000060E0                 dd 0FFFFFFD4h, 4
.text:000060E8                 dd offset $LN16         ; "copyCoder"
.text:000060EC $LN16           db 'copyCoder',0        ; DATA XREF: .text:000060E8o
.text:000060F6 $LN15_0         db 'inStreamLimited',0  ; DATA XREF: .text:000060DCo
.text:00006106                 align 10h
.text:00006110
.text:00006110 ; =============== S U B R O U T I N E =======================================
.text:00006110
.text:00006110 ; Attributes: bp-based frame
.text:00006110
.text:00006110 ; int __stdcall NArchive::N7z::CompareEmptyItems(unsigned int const *, unsigned int const *, void *)
.text:00006110 ?CompareEmptyItems@N7z@NArchive@@YGHPBI0PAX@Z proc near
.text:00006110                                         ; DATA XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1014o
.text:00006110
.text:00006110 var_14          = dword ptr -14h
.text:00006110 var_10          = dword ptr -10h
.text:00006110 var_C           = dword ptr -0Ch
.text:00006110 var_8           = dword ptr -8
.text:00006110 var_4           = dword ptr -4
.text:00006110 arg_0           = dword ptr  8
.text:00006110 arg_4           = dword ptr  0Ch
.text:00006110 arg_8           = dword ptr  10h
.text:00006110
.text:00006110                 push    ebp
.text:00006111                 mov     ebp, esp
.text:00006113                 sub     esp, 14h
.text:00006116                 mov     eax, 0CCCCCCCCh
.text:0000611B                 mov     [ebp+var_14], eax
.text:0000611E                 mov     [ebp+var_10], eax
.text:00006121                 mov     [ebp+var_C], eax
.text:00006124                 mov     [ebp+var_8], eax
.text:00006127                 mov     [ebp+var_4], eax
.text:0000612A                 mov     eax, [ebp+arg_8]
.text:0000612D                 mov     [ebp+var_4], eax
.text:00006130                 mov     ecx, [ebp+arg_0]
.text:00006133                 mov     edx, [ecx]
.text:00006135                 push    edx
.text:00006136                 mov     ecx, [ebp+var_4]
.text:00006139                 call    ??A?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QBEABUCUpdateItem@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CUpdateItem>::operator[](uint)
.text:0000613E                 mov     [ebp+var_8], eax
.text:00006141                 mov     eax, [ebp+arg_4]
.text:00006144                 mov     ecx, [eax]
.text:00006146                 push    ecx
.text:00006147                 mov     ecx, [ebp+var_4]
.text:0000614A                 call    ??A?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QBEABUCUpdateItem@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CUpdateItem>::operator[](uint)
.text:0000614F                 mov     [ebp+var_C], eax
.text:00006152                 mov     edx, [ebp+var_8]
.text:00006155                 movzx   eax, byte ptr [edx+3Ah]
.text:00006159                 mov     ecx, [ebp+var_C]
.text:0000615C                 movzx   edx, byte ptr [ecx+3Ah]
.text:00006160                 cmp     eax, edx
.text:00006162                 jz      short loc_617A
.text:00006164                 mov     eax, [ebp+var_8]
.text:00006167                 movzx   eax, byte ptr [eax+3Ah]
.text:0000616B                 neg     eax
.text:0000616D                 sbb     eax, eax
.text:0000616F                 and     eax, 2
.text:00006172                 add     eax, 0FFFFFFFFh
.text:00006175                 jmp     loc_6206
.text:0000617A ; ---------------------------------------------------------------------------
.text:0000617A
.text:0000617A loc_617A:                               ; CODE XREF: NArchive::N7z::CompareEmptyItems(uint const *,uint const *,void *)+52j
.text:0000617A                 mov     ecx, [ebp+var_8]
.text:0000617D                 movzx   edx, byte ptr [ecx+3Bh]
.text:00006181                 mov     eax, [ebp+var_C]
.text:00006184                 movzx   ecx, byte ptr [eax+3Bh]
.text:00006188                 cmp     edx, ecx
.text:0000618A                 jz      short loc_61BD
.text:0000618C                 mov     edx, [ebp+var_8]
.text:0000618F                 movzx   eax, byte ptr [edx+3Bh]
.text:00006193                 test    eax, eax
.text:00006195                 jz      short loc_61AA
.text:00006197                 mov     ecx, [ebp+var_8]
.text:0000619A                 movzx   eax, byte ptr [ecx+3Ah]
.text:0000619E                 neg     eax
.text:000061A0                 sbb     eax, eax
.text:000061A2                 and     eax, 2
.text:000061A5                 add     eax, 0FFFFFFFFh
.text:000061A8                 jmp     short loc_6206
.text:000061AA ; ---------------------------------------------------------------------------
.text:000061AA
.text:000061AA loc_61AA:                               ; CODE XREF: NArchive::N7z::CompareEmptyItems(uint const *,uint const *,void *)+85j
.text:000061AA                 mov     edx, [ebp+var_C]
.text:000061AD                 movzx   eax, byte ptr [edx+3Ah]
.text:000061B1                 neg     eax
.text:000061B3                 sbb     eax, eax
.text:000061B5                 and     eax, 0FFFFFFFEh
.text:000061B8                 add     eax, 1
.text:000061BB                 jmp     short loc_6206
.text:000061BD ; ---------------------------------------------------------------------------
.text:000061BD
.text:000061BD loc_61BD:                               ; CODE XREF: NArchive::N7z::CompareEmptyItems(uint const *,uint const *,void *)+7Aj
.text:000061BD                 mov     ecx, [ebp+var_C]
.text:000061C0                 add     ecx, 28h ; '('
.text:000061C3                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:000061C8                 push    eax             ; wchar_t *
.text:000061C9                 mov     ecx, [ebp+var_8]
.text:000061CC                 add     ecx, 28h ; '('
.text:000061CF                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:000061D4                 push    eax             ; wchar_t *
.text:000061D5                 call    ?CompareFileNames@@YGHPB_W0@Z ; CompareFileNames(wchar_t const *,wchar_t const *)
.text:000061DA                 mov     [ebp+var_10], eax
.text:000061DD                 mov     eax, [ebp+var_8]
.text:000061E0                 movzx   ecx, byte ptr [eax+3Bh]
.text:000061E4                 test    ecx, ecx
.text:000061E6                 jz      short loc_61FD
.text:000061E8                 mov     edx, [ebp+var_8]
.text:000061EB                 movzx   eax, byte ptr [edx+3Ah]
.text:000061EF                 test    eax, eax
.text:000061F1                 jz      short loc_61FD
.text:000061F3                 mov     ecx, [ebp+var_10]
.text:000061F6                 neg     ecx
.text:000061F8                 mov     [ebp+var_14], ecx
.text:000061FB                 jmp     short loc_6203
.text:000061FD ; ---------------------------------------------------------------------------
.text:000061FD
.text:000061FD loc_61FD:                               ; CODE XREF: NArchive::N7z::CompareEmptyItems(uint const *,uint const *,void *)+D6j
.text:000061FD                                         ; NArchive::N7z::CompareEmptyItems(uint const *,uint const *,void *)+E1j
.text:000061FD                 mov     edx, [ebp+var_10]
.text:00006200                 mov     [ebp+var_14], edx
.text:00006203
.text:00006203 loc_6203:                               ; CODE XREF: NArchive::N7z::CompareEmptyItems(uint const *,uint const *,void *)+EBj
.text:00006203                 mov     eax, [ebp+var_14]
.text:00006206
.text:00006206 loc_6206:                               ; CODE XREF: NArchive::N7z::CompareEmptyItems(uint const *,uint const *,void *)+65j
.text:00006206                                         ; NArchive::N7z::CompareEmptyItems(uint const *,uint const *,void *)+98j ...
.text:00006206                 add     esp, 14h
.text:00006209                 cmp     ebp, esp
.text:0000620B                 call    __RTC_CheckEsp
.text:00006210                 mov     esp, ebp
.text:00006212                 pop     ebp
.text:00006213                 retn    0Ch
.text:00006213 ?CompareEmptyItems@N7z@NArchive@@YGHPBI0PAX@Z endp
.text:00006213
.text:00006213 ; ---------------------------------------------------------------------------
.text:00006216                 align 10h
.text:00006220
.text:00006220 ; =============== S U B R O U T I N E =======================================
.text:00006220
.text:00006220 ; Attributes: bp-based frame
.text:00006220
.text:00006220 ; unsigned int __stdcall NArchive::N7z::GetExtIndex(char const *)
.text:00006220 ?GetExtIndex@N7z@NArchive@@YGIPBD@Z proc near
.text:00006220                                         ; CODE XREF: NArchive::N7z::CRefItem::CRefItem(uint,NArchive::N7z::CUpdateItem const &,bool)+135p
.text:00006220
.text:00006220 var_14          = dword ptr -14h
.text:00006220 var_10          = dword ptr -10h
.text:00006220 var_C           = dword ptr -0Ch
.text:00006220 var_8           = dword ptr -8
.text:00006220 var_4           = dword ptr -4
.text:00006220 arg_0           = dword ptr  8
.text:00006220
.text:00006220                 push    ebp
.text:00006221                 mov     ebp, esp
.text:00006223                 sub     esp, 14h
.text:00006226                 mov     eax, 0CCCCCCCCh
.text:0000622B                 mov     [ebp+var_14], eax
.text:0000622E                 mov     [ebp+var_10], eax
.text:00006231                 mov     [ebp+var_C], eax
.text:00006234                 mov     [ebp+var_8], eax
.text:00006237                 mov     [ebp+var_4], eax
.text:0000623A                 mov     [ebp+var_4], 1
.text:00006241                 mov     eax, ds:_g_Exts
.text:00006246                 mov     [ebp+var_8], eax
.text:00006249
.text:00006249 loc_6249:                               ; CODE XREF: NArchive::N7z::GetExtIndex(char const *)+53j
.text:00006249                                         ; NArchive::N7z::GetExtIndex(char const *):loc_6303j
.text:00006249                 mov     ecx, [ebp+var_8]
.text:0000624C                 mov     dl, [ecx]
.text:0000624E                 mov     byte ptr [ebp+var_C+3], dl
.text:00006251                 mov     eax, [ebp+var_8]
.text:00006254                 add     eax, 1
.text:00006257                 mov     [ebp+var_8], eax
.text:0000625A                 movsx   ecx, byte ptr [ebp+var_C+3]
.text:0000625E                 test    ecx, ecx
.text:00006260                 jnz     short loc_626A
.text:00006262                 mov     eax, [ebp+var_4]
.text:00006265                 jmp     loc_6308
.text:0000626A ; ---------------------------------------------------------------------------
.text:0000626A
.text:0000626A loc_626A:                               ; CODE XREF: NArchive::N7z::GetExtIndex(char const *)+40j
.text:0000626A                 movsx   edx, byte ptr [ebp+var_C+3]
.text:0000626E                 cmp     edx, 20h ; ' '
.text:00006271                 jnz     short loc_6275
.text:00006273                 jmp     short loc_6249
.text:00006275 ; ---------------------------------------------------------------------------
.text:00006275
.text:00006275 loc_6275:                               ; CODE XREF: NArchive::N7z::GetExtIndex(char const *)+51j
.text:00006275                 mov     [ebp+var_10], 0
.text:0000627C
.text:0000627C loc_627C:                               ; CODE XREF: NArchive::N7z::GetExtIndex(char const *)+ADj
.text:0000627C                 mov     eax, [ebp+arg_0]
.text:0000627F                 add     eax, [ebp+var_10]
.text:00006282                 mov     cl, [eax]
.text:00006284                 mov     byte ptr [ebp+var_14+3], cl
.text:00006287                 mov     edx, [ebp+var_10]
.text:0000628A                 add     edx, 1
.text:0000628D                 mov     [ebp+var_10], edx
.text:00006290                 movsx   eax, byte ptr [ebp+var_14+3]
.text:00006294                 test    eax, eax
.text:00006296                 jnz     short loc_62AE
.text:00006298                 movsx   ecx, byte ptr [ebp+var_C+3]
.text:0000629C                 test    ecx, ecx
.text:0000629E                 jz      short loc_62A9
.text:000062A0                 movsx   edx, byte ptr [ebp+var_C+3]
.text:000062A4                 cmp     edx, 20h ; ' '
.text:000062A7                 jnz     short loc_62AE
.text:000062A9
.text:000062A9 loc_62A9:                               ; CODE XREF: NArchive::N7z::GetExtIndex(char const *)+7Ej
.text:000062A9                 mov     eax, [ebp+var_4]
.text:000062AC                 jmp     short loc_6308
.text:000062AE ; ---------------------------------------------------------------------------
.text:000062AE
.text:000062AE loc_62AE:                               ; CODE XREF: NArchive::N7z::GetExtIndex(char const *)+76j
.text:000062AE                                         ; NArchive::N7z::GetExtIndex(char const *)+87j
.text:000062AE                 movsx   eax, byte ptr [ebp+var_C+3]
.text:000062B2                 movsx   ecx, byte ptr [ebp+var_14+3]
.text:000062B6                 cmp     eax, ecx
.text:000062B8                 jz      short loc_62BC
.text:000062BA                 jmp     short loc_62CF
.text:000062BC ; ---------------------------------------------------------------------------
.text:000062BC
.text:000062BC loc_62BC:                               ; CODE XREF: NArchive::N7z::GetExtIndex(char const *)+98j
.text:000062BC                 mov     edx, [ebp+var_8]
.text:000062BF                 mov     al, [edx]
.text:000062C1                 mov     byte ptr [ebp+var_C+3], al
.text:000062C4                 mov     ecx, [ebp+var_8]
.text:000062C7                 add     ecx, 1
.text:000062CA                 mov     [ebp+var_8], ecx
.text:000062CD                 jmp     short loc_627C
.text:000062CF ; ---------------------------------------------------------------------------
.text:000062CF
.text:000062CF loc_62CF:                               ; CODE XREF: NArchive::N7z::GetExtIndex(char const *)+9Aj
.text:000062CF                 mov     edx, [ebp+var_4]
.text:000062D2                 add     edx, 1
.text:000062D5                 mov     [ebp+var_4], edx
.text:000062D8
.text:000062D8 loc_62D8:                               ; CODE XREF: NArchive::N7z::GetExtIndex(char const *)+E1j
.text:000062D8                 movsx   eax, byte ptr [ebp+var_C+3]
.text:000062DC                 test    eax, eax
.text:000062DE                 jnz     short loc_62E5
.text:000062E0                 mov     eax, [ebp+var_4]
.text:000062E3                 jmp     short loc_6308
.text:000062E5 ; ---------------------------------------------------------------------------
.text:000062E5
.text:000062E5 loc_62E5:                               ; CODE XREF: NArchive::N7z::GetExtIndex(char const *)+BEj
.text:000062E5                 movsx   ecx, byte ptr [ebp+var_C+3]
.text:000062E9                 cmp     ecx, 20h ; ' '
.text:000062EC                 jnz     short loc_62F0
.text:000062EE                 jmp     short loc_6303
.text:000062F0 ; ---------------------------------------------------------------------------
.text:000062F0
.text:000062F0 loc_62F0:                               ; CODE XREF: NArchive::N7z::GetExtIndex(char const *)+CCj
.text:000062F0                 mov     edx, [ebp+var_8]
.text:000062F3                 mov     al, [edx]
.text:000062F5                 mov     byte ptr [ebp+var_C+3], al
.text:000062F8                 mov     ecx, [ebp+var_8]
.text:000062FB                 add     ecx, 1
.text:000062FE                 mov     [ebp+var_8], ecx
.text:00006301                 jmp     short loc_62D8
.text:00006303 ; ---------------------------------------------------------------------------
.text:00006303
.text:00006303 loc_6303:                               ; CODE XREF: NArchive::N7z::GetExtIndex(char const *)+CEj
.text:00006303                 jmp     loc_6249
.text:00006308 ; ---------------------------------------------------------------------------
.text:00006308
.text:00006308 loc_6308:                               ; CODE XREF: NArchive::N7z::GetExtIndex(char const *)+45j
.text:00006308                                         ; NArchive::N7z::GetExtIndex(char const *)+8Cj ...
.text:00006308                 mov     esp, ebp
.text:0000630A                 pop     ebp
.text:0000630B                 retn    4
.text:0000630B ?GetExtIndex@N7z@NArchive@@YGIPBD@Z endp
.text:0000630B
.text:0000630B ; ---------------------------------------------------------------------------
.text:0000630E                 align 10h
.text:00006310
.text:00006310 ; =============== S U B R O U T I N E =======================================
.text:00006310
.text:00006310 ; Attributes: bp-based frame
.text:00006310
.text:00006310 ; int __stdcall NArchive::N7z::CompareUpdateItems(struct NArchive::N7z::CRefItem const *, struct NArchive::N7z::CRefItem const *, void *)
.text:00006310 ?CompareUpdateItems@N7z@NArchive@@YGHPBUCRefItem@12@0PAX@Z proc near
.text:00006310                                         ; DATA XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+30B5o
.text:00006310
.text:00006310 var_3C          = dword ptr -3Ch
.text:00006310 var_38          = dword ptr -38h
.text:00006310 var_34          = dword ptr -34h
.text:00006310 var_30          = dword ptr -30h
.text:00006310 var_2C          = dword ptr -2Ch
.text:00006310 var_28          = dword ptr -28h
.text:00006310 var_24          = dword ptr -24h
.text:00006310 var_20          = dword ptr -20h
.text:00006310 var_19          = byte ptr -19h
.text:00006310 var_18          = dword ptr -18h
.text:00006310 var_14          = dword ptr -14h
.text:00006310 var_10          = dword ptr -10h
.text:00006310 var_C           = dword ptr -0Ch
.text:00006310 var_8           = dword ptr -8
.text:00006310 var_4           = dword ptr -4
.text:00006310 arg_0           = dword ptr  8
.text:00006310 arg_4           = dword ptr  0Ch
.text:00006310 arg_8           = dword ptr  10h
.text:00006310
.text:00006310                 push    ebp
.text:00006311                 mov     ebp, esp
.text:00006313                 sub     esp, 3Ch
.text:00006316                 push    edi
.text:00006317                 lea     edi, [ebp+var_3C]
.text:0000631A                 mov     ecx, 0Fh
.text:0000631F                 mov     eax, 0CCCCCCCCh
.text:00006324                 rep stosd
.text:00006326                 mov     eax, [ebp+arg_0]
.text:00006329                 mov     [ebp+var_4], eax
.text:0000632C                 mov     ecx, [ebp+arg_4]
.text:0000632F                 mov     [ebp+var_8], ecx
.text:00006332                 mov     edx, [ebp+var_4]
.text:00006335                 mov     eax, [edx]
.text:00006337                 mov     [ebp+var_C], eax
.text:0000633A                 mov     ecx, [ebp+var_8]
.text:0000633D                 mov     edx, [ecx]
.text:0000633F                 mov     [ebp+var_10], edx
.text:00006342                 mov     eax, [ebp+var_C]
.text:00006345                 movzx   ecx, byte ptr [eax+3Bh]
.text:00006349                 mov     edx, [ebp+var_10]
.text:0000634C                 movzx   eax, byte ptr [edx+3Bh]
.text:00006350                 cmp     ecx, eax
.text:00006352                 jz      short loc_636A
.text:00006354                 mov     ecx, [ebp+var_C]
.text:00006357                 movzx   eax, byte ptr [ecx+3Bh]
.text:0000635B                 neg     eax
.text:0000635D                 sbb     eax, eax
.text:0000635F                 and     eax, 2
.text:00006362                 add     eax, 0FFFFFFFFh
.text:00006365                 jmp     loc_659B
.text:0000636A ; ---------------------------------------------------------------------------
.text:0000636A
.text:0000636A loc_636A:                               ; CODE XREF: NArchive::N7z::CompareUpdateItems(NArchive::N7z::CRefItem const *,NArchive::N7z::CRefItem const *,void *)+42j
.text:0000636A                 mov     edx, [ebp+var_C]
.text:0000636D                 movzx   eax, byte ptr [edx+3Bh]
.text:00006371                 test    eax, eax
.text:00006373                 jz      short loc_63C7
.text:00006375                 mov     ecx, [ebp+var_C]
.text:00006378                 movzx   edx, byte ptr [ecx+3Ah]
.text:0000637C                 mov     eax, [ebp+var_10]
.text:0000637F                 movzx   ecx, byte ptr [eax+3Ah]
.text:00006383                 cmp     edx, ecx
.text:00006385                 jz      short loc_639D
.text:00006387                 mov     edx, [ebp+var_C]
.text:0000638A                 movzx   eax, byte ptr [edx+3Ah]
.text:0000638E                 neg     eax
.text:00006390                 sbb     eax, eax
.text:00006392                 and     eax, 2
.text:00006395                 add     eax, 0FFFFFFFFh
.text:00006398                 jmp     loc_659B
.text:0000639D ; ---------------------------------------------------------------------------
.text:0000639D
.text:0000639D loc_639D:                               ; CODE XREF: NArchive::N7z::CompareUpdateItems(NArchive::N7z::CRefItem const *,NArchive::N7z::CRefItem const *,void *)+75j
.text:0000639D                 mov     ecx, [ebp+var_10]
.text:000063A0                 add     ecx, 28h ; '('
.text:000063A3                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:000063A8                 push    eax             ; wchar_t *
.text:000063A9                 mov     ecx, [ebp+var_C]
.text:000063AC                 add     ecx, 28h ; '('
.text:000063AF                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:000063B4                 push    eax             ; wchar_t *
.text:000063B5                 call    ?CompareFileNames@@YGHPB_W0@Z ; CompareFileNames(wchar_t const *,wchar_t const *)
.text:000063BA                 mov     [ebp+var_14], eax
.text:000063BD                 mov     eax, [ebp+var_14]
.text:000063C0                 neg     eax
.text:000063C2                 jmp     loc_659B
.text:000063C7 ; ---------------------------------------------------------------------------
.text:000063C7
.text:000063C7 loc_63C7:                               ; CODE XREF: NArchive::N7z::CompareUpdateItems(NArchive::N7z::CRefItem const *,NArchive::N7z::CRefItem const *,void *)+63j
.text:000063C7                 mov     eax, [ebp+arg_8]
.text:000063CA                 mov     [ebp+var_18], eax
.text:000063CD                 mov     ecx, [ebp+var_18]
.text:000063D0                 mov     dl, [ecx]
.text:000063D2                 mov     [ebp+var_19], dl
.text:000063D5                 movzx   eax, [ebp+var_19]
.text:000063D9                 test    eax, eax
.text:000063DB                 jz      loc_6526
.text:000063E1                 mov     ecx, [ebp+var_8]
.text:000063E4                 mov     edx, [ecx+10h]
.text:000063E7                 push    edx
.text:000063E8                 mov     eax, [ebp+var_4]
.text:000063EB                 mov     ecx, [eax+10h]
.text:000063EE                 push    ecx
.text:000063EF                 call    ??$MyCompare@I@@YGHII@Z ; MyCompare<uint>(uint,uint)
.text:000063F4                 mov     [ebp+var_20], eax
.text:000063F7                 cmp     [ebp+var_20], 0
.text:000063FB                 jz      short loc_6405
.text:000063FD                 mov     eax, [ebp+var_20]
.text:00006400                 jmp     loc_659B
.text:00006405 ; ---------------------------------------------------------------------------
.text:00006405
.text:00006405 loc_6405:                               ; CODE XREF: NArchive::N7z::CompareUpdateItems(NArchive::N7z::CRefItem const *,NArchive::N7z::CRefItem const *,void *)+EBj
.text:00006405                 mov     edx, [ebp+var_8]
.text:00006408                 mov     eax, [edx+8]
.text:0000640B                 push    eax             ; unsigned int
.text:0000640C                 mov     ecx, [ebp+var_10]
.text:0000640F                 add     ecx, 28h ; '('  ; this
.text:00006412                 call    ?Ptr@UString@@QBEPB_WI@Z ; UString::Ptr(uint)
.text:00006417                 push    eax             ; wchar_t *
.text:00006418                 mov     ecx, [ebp+var_4]
.text:0000641B                 mov     edx, [ecx+8]
.text:0000641E                 push    edx             ; unsigned int
.text:0000641F                 mov     ecx, [ebp+var_C]
.text:00006422                 add     ecx, 28h ; '('  ; this
.text:00006425                 call    ?Ptr@UString@@QBEPB_WI@Z ; UString::Ptr(uint)
.text:0000642A                 push    eax             ; wchar_t *
.text:0000642B                 call    ?CompareFileNames@@YGHPB_W0@Z ; CompareFileNames(wchar_t const *,wchar_t const *)
.text:00006430                 mov     [ebp+var_24], eax
.text:00006433                 cmp     [ebp+var_24], 0
.text:00006437                 jz      short loc_6441
.text:00006439                 mov     eax, [ebp+var_24]
.text:0000643C                 jmp     loc_659B
.text:00006441 ; ---------------------------------------------------------------------------
.text:00006441
.text:00006441 loc_6441:                               ; CODE XREF: NArchive::N7z::CompareUpdateItems(NArchive::N7z::CRefItem const *,NArchive::N7z::CRefItem const *,void *)+127j
.text:00006441                 mov     eax, [ebp+var_8]
.text:00006444                 mov     ecx, [eax+0Ch]
.text:00006447                 push    ecx             ; unsigned int
.text:00006448                 mov     ecx, [ebp+var_10]
.text:0000644B                 add     ecx, 28h ; '('  ; this
.text:0000644E                 call    ?Ptr@UString@@QBEPB_WI@Z ; UString::Ptr(uint)
.text:00006453                 push    eax             ; wchar_t *
.text:00006454                 mov     edx, [ebp+var_4]
.text:00006457                 mov     eax, [edx+0Ch]
.text:0000645A                 push    eax             ; unsigned int
.text:0000645B                 mov     ecx, [ebp+var_C]
.text:0000645E                 add     ecx, 28h ; '('  ; this
.text:00006461                 call    ?Ptr@UString@@QBEPB_WI@Z ; UString::Ptr(uint)
.text:00006466                 push    eax             ; wchar_t *
.text:00006467                 call    ?CompareFileNames@@YGHPB_W0@Z ; CompareFileNames(wchar_t const *,wchar_t const *)
.text:0000646C                 mov     [ebp+var_28], eax
.text:0000646F                 cmp     [ebp+var_28], 0
.text:00006473                 jz      short loc_647D
.text:00006475                 mov     eax, [ebp+var_28]
.text:00006478                 jmp     loc_659B
.text:0000647D ; ---------------------------------------------------------------------------
.text:0000647D
.text:0000647D loc_647D:                               ; CODE XREF: NArchive::N7z::CompareUpdateItems(NArchive::N7z::CRefItem const *,NArchive::N7z::CRefItem const *,void *)+163j
.text:0000647D                 mov     ecx, [ebp+var_C]
.text:00006480                 movzx   edx, byte ptr [ecx+3Fh]
.text:00006484                 test    edx, edx
.text:00006486                 jnz     short loc_649D
.text:00006488                 mov     eax, [ebp+var_10]
.text:0000648B                 movzx   ecx, byte ptr [eax+3Fh]
.text:0000648F                 test    ecx, ecx
.text:00006491                 jz      short loc_649D
.text:00006493                 mov     eax, 1
.text:00006498                 jmp     loc_659B
.text:0000649D ; ---------------------------------------------------------------------------
.text:0000649D
.text:0000649D loc_649D:                               ; CODE XREF: NArchive::N7z::CompareUpdateItems(NArchive::N7z::CRefItem const *,NArchive::N7z::CRefItem const *,void *)+176j
.text:0000649D                                         ; NArchive::N7z::CompareUpdateItems(NArchive::N7z::CRefItem const *,NArchive::N7z::CRefItem const *,void *)+181j
.text:0000649D                 mov     edx, [ebp+var_C]
.text:000064A0                 movzx   eax, byte ptr [edx+3Fh]
.text:000064A4                 test    eax, eax
.text:000064A6                 jz      short loc_64BB
.text:000064A8                 mov     ecx, [ebp+var_10]
.text:000064AB                 movzx   edx, byte ptr [ecx+3Fh]
.text:000064AF                 test    edx, edx
.text:000064B1                 jnz     short loc_64BB
.text:000064B3                 or      eax, 0FFFFFFFFh
.text:000064B6                 jmp     loc_659B
.text:000064BB ; ---------------------------------------------------------------------------
.text:000064BB
.text:000064BB loc_64BB:                               ; CODE XREF: NArchive::N7z::CompareUpdateItems(NArchive::N7z::CRefItem const *,NArchive::N7z::CRefItem const *,void *)+196j
.text:000064BB                                         ; NArchive::N7z::CompareUpdateItems(NArchive::N7z::CRefItem const *,NArchive::N7z::CRefItem const *,void *)+1A1j
.text:000064BB                 mov     eax, [ebp+var_C]
.text:000064BE                 movzx   ecx, byte ptr [eax+3Fh]
.text:000064C2                 test    ecx, ecx
.text:000064C4                 jz      short loc_64FD
.text:000064C6                 mov     edx, [ebp+var_10]
.text:000064C9                 movzx   eax, byte ptr [edx+3Fh]
.text:000064CD                 test    eax, eax
.text:000064CF                 jz      short loc_64FD
.text:000064D1                 mov     ecx, [ebp+var_10]
.text:000064D4                 mov     edx, [ecx+1Ch]
.text:000064D7                 push    edx
.text:000064D8                 mov     eax, [ecx+18h]
.text:000064DB                 push    eax
.text:000064DC                 mov     ecx, [ebp+var_C]
.text:000064DF                 mov     edx, [ecx+1Ch]
.text:000064E2                 push    edx
.text:000064E3                 mov     eax, [ecx+18h]
.text:000064E6                 push    eax
.text:000064E7                 call    ??$MyCompare@_K@@YGH_K0@Z ; MyCompare<unsigned __int64>(unsigned __int64,unsigned __int64)
.text:000064EC                 mov     [ebp+var_2C], eax
.text:000064EF                 cmp     [ebp+var_2C], 0
.text:000064F3                 jz      short loc_64FD
.text:000064F5                 mov     eax, [ebp+var_2C]
.text:000064F8                 jmp     loc_659B
.text:000064FD ; ---------------------------------------------------------------------------
.text:000064FD
.text:000064FD loc_64FD:                               ; CODE XREF: NArchive::N7z::CompareUpdateItems(NArchive::N7z::CRefItem const *,NArchive::N7z::CRefItem const *,void *)+1B4j
.text:000064FD                                         ; NArchive::N7z::CompareUpdateItems(NArchive::N7z::CRefItem const *,NArchive::N7z::CRefItem const *,void *)+1BFj ...
.text:000064FD                 mov     ecx, [ebp+var_10]
.text:00006500                 mov     edx, [ecx+24h]
.text:00006503                 push    edx
.text:00006504                 mov     eax, [ecx+20h]
.text:00006507                 push    eax
.text:00006508                 mov     ecx, [ebp+var_C]
.text:0000650B                 mov     edx, [ecx+24h]
.text:0000650E                 push    edx
.text:0000650F                 mov     eax, [ecx+20h]
.text:00006512                 push    eax
.text:00006513                 call    ??$MyCompare@_K@@YGH_K0@Z ; MyCompare<unsigned __int64>(unsigned __int64,unsigned __int64)
.text:00006518                 mov     [ebp+var_30], eax
.text:0000651B                 cmp     [ebp+var_30], 0
.text:0000651F                 jz      short loc_6526
.text:00006521                 mov     eax, [ebp+var_30]
.text:00006524                 jmp     short loc_659B
.text:00006526 ; ---------------------------------------------------------------------------
.text:00006526
.text:00006526 loc_6526:                               ; CODE XREF: NArchive::N7z::CompareUpdateItems(NArchive::N7z::CRefItem const *,NArchive::N7z::CRefItem const *,void *)+CBj
.text:00006526                                         ; NArchive::N7z::CompareUpdateItems(NArchive::N7z::CRefItem const *,NArchive::N7z::CRefItem const *,void *)+20Fj
.text:00006526                 mov     ecx, [ebp+var_10]
.text:00006529                 add     ecx, 28h ; '('
.text:0000652C                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00006531                 push    eax             ; wchar_t *
.text:00006532                 mov     ecx, [ebp+var_C]
.text:00006535                 add     ecx, 28h ; '('
.text:00006538                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:0000653D                 push    eax             ; wchar_t *
.text:0000653E                 call    ?CompareFileNames@@YGHPB_W0@Z ; CompareFileNames(wchar_t const *,wchar_t const *)
.text:00006543                 mov     [ebp+var_34], eax
.text:00006546                 cmp     [ebp+var_34], 0
.text:0000654A                 jz      short loc_6551
.text:0000654C                 mov     eax, [ebp+var_34]
.text:0000654F                 jmp     short loc_659B
.text:00006551 ; ---------------------------------------------------------------------------
.text:00006551
.text:00006551 loc_6551:                               ; CODE XREF: NArchive::N7z::CompareUpdateItems(NArchive::N7z::CRefItem const *,NArchive::N7z::CRefItem const *,void *)+23Aj
.text:00006551                 mov     ecx, [ebp+var_8]
.text:00006554                 mov     edx, [ecx]
.text:00006556                 mov     eax, [edx+4]
.text:00006559                 push    eax
.text:0000655A                 mov     ecx, [ebp+var_4]
.text:0000655D                 mov     edx, [ecx]
.text:0000655F                 mov     eax, [edx+4]
.text:00006562                 push    eax
.text:00006563                 call    ??$MyCompare@H@@YGHHH@Z ; MyCompare<int>(int,int)
.text:00006568                 mov     [ebp+var_38], eax
.text:0000656B                 cmp     [ebp+var_38], 0
.text:0000656F                 jz      short loc_6576
.text:00006571                 mov     eax, [ebp+var_38]
.text:00006574                 jmp     short loc_659B
.text:00006576 ; ---------------------------------------------------------------------------
.text:00006576
.text:00006576 loc_6576:                               ; CODE XREF: NArchive::N7z::CompareUpdateItems(NArchive::N7z::CRefItem const *,NArchive::N7z::CRefItem const *,void *)+25Fj
.text:00006576                 mov     ecx, [ebp+var_8]
.text:00006579                 mov     edx, [ecx]
.text:0000657B                 mov     eax, [edx]
.text:0000657D                 push    eax
.text:0000657E                 mov     ecx, [ebp+var_4]
.text:00006581                 mov     edx, [ecx]
.text:00006583                 mov     eax, [edx]
.text:00006585                 push    eax
.text:00006586                 call    ??$MyCompare@H@@YGHHH@Z ; MyCompare<int>(int,int)
.text:0000658B                 mov     [ebp+var_3C], eax
.text:0000658E                 cmp     [ebp+var_3C], 0
.text:00006592                 jz      short loc_6599
.text:00006594                 mov     eax, [ebp+var_3C]
.text:00006597                 jmp     short loc_659B
.text:00006599 ; ---------------------------------------------------------------------------
.text:00006599
.text:00006599 loc_6599:                               ; CODE XREF: NArchive::N7z::CompareUpdateItems(NArchive::N7z::CRefItem const *,NArchive::N7z::CRefItem const *,void *)+282j
.text:00006599                 xor     eax, eax
.text:0000659B
.text:0000659B loc_659B:                               ; CODE XREF: NArchive::N7z::CompareUpdateItems(NArchive::N7z::CRefItem const *,NArchive::N7z::CRefItem const *,void *)+55j
.text:0000659B                                         ; NArchive::N7z::CompareUpdateItems(NArchive::N7z::CRefItem const *,NArchive::N7z::CRefItem const *,void *)+88j ...
.text:0000659B                 pop     edi
.text:0000659C                 add     esp, 3Ch
.text:0000659F                 cmp     ebp, esp
.text:000065A1                 call    __RTC_CheckEsp
.text:000065A6                 mov     esp, ebp
.text:000065A8                 pop     ebp
.text:000065A9                 retn    0Ch
.text:000065A9 ?CompareUpdateItems@N7z@NArchive@@YGHPBUCRefItem@12@0PAX@Z endp
.text:000065A9
.text:000065A9 ; ---------------------------------------------------------------------------
.text:000065AC                 align 10h
.text:000065B0
.text:000065B0 ; =============== S U B R O U T I N E =======================================
.text:000065B0
.text:000065B0 ; Attributes: bp-based frame
.text:000065B0
.text:000065B0 ; int __stdcall NArchive::N7z::MakeExeMethod(NArchive::N7z::CCompressionMethodMode *, int, char)
.text:000065B0 ?MakeExeMethod@N7z@NArchive@@YGJAAUCCompressionMethodMode@12@ABUCFilterMode@12@_N@Z proc near
.text:000065B0                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1240p
.text:000065B0
.text:000065B0 var_34          = dword ptr -34h
.text:000065B0 var_30          = dword ptr -30h
.text:000065B0 var_2C          = dword ptr -2Ch
.text:000065B0 var_28          = dword ptr -28h
.text:000065B0 var_24          = dword ptr -24h
.text:000065B0 var_20          = dword ptr -20h
.text:000065B0 var_1C          = dword ptr -1Ch
.text:000065B0 var_18          = dword ptr -18h
.text:000065B0 var_14          = dword ptr -14h
.text:000065B0 var_10          = dword ptr -10h
.text:000065B0 var_C           = dword ptr -0Ch
.text:000065B0 var_8           = dword ptr -8
.text:000065B0 var_4           = dword ptr -4
.text:000065B0 arg_0           = dword ptr  8
.text:000065B0 arg_4           = dword ptr  0Ch
.text:000065B0 arg_8           = byte ptr  10h
.text:000065B0
.text:000065B0                 push    ebp
.text:000065B1                 mov     ebp, esp
.text:000065B3                 sub     esp, 34h
.text:000065B6                 push    edi
.text:000065B7                 lea     edi, [ebp+var_34]
.text:000065BA                 mov     ecx, 0Dh
.text:000065BF                 mov     eax, 0CCCCCCCCh
.text:000065C4                 rep stosd
.text:000065C6                 mov     eax, [ebp+arg_0]
.text:000065C9                 movzx   ecx, byte ptr [eax+19h]
.text:000065CD                 test    ecx, ecx
.text:000065CF                 jz      short loc_6631
.text:000065D1                 push    0
.text:000065D3                 mov     ecx, [ebp+arg_0]
.text:000065D6                 call    ??A?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CMethodFull>::operator[](uint)
.text:000065DB                 mov     [ebp+var_4], eax
.text:000065DE                 mov     edx, [ebp+var_4]
.text:000065E1                 mov     eax, [edx+10h]
.text:000065E4                 mov     [ebp+var_C], eax
.text:000065E7                 mov     ecx, [edx+14h]
.text:000065EA                 mov     [ebp+var_8], ecx
.text:000065ED                 cmp     [ebp+var_C], 303011Bh
.text:000065F4                 jnz     short loc_660A
.text:000065F6                 cmp     [ebp+var_8], 0
.text:000065FA                 jnz     short loc_660A
.text:000065FC                 mov     edx, [ebp+arg_0]
.text:000065FF                 push    edx             ; NArchive::N7z::CCompressionMethodMode *
.text:00006600                 call    ?AddBcj2Methods@N7z@NArchive@@YGJAAUCCompressionMethodMode@12@@Z ; NArchive::N7z::AddBcj2Methods(NArchive::N7z::CCompressionMethodMode &)
.text:00006605                 jmp     loc_6881
.text:0000660A ; ---------------------------------------------------------------------------
.text:0000660A
.text:0000660A loc_660A:                               ; CODE XREF: NArchive::N7z::MakeExeMethod(NArchive::N7z::CCompressionMethodMode &,NArchive::N7z::CFilterMode const &,bool)+44j
.text:0000660A                                         ; NArchive::N7z::MakeExeMethod(NArchive::N7z::CCompressionMethodMode &,NArchive::N7z::CFilterMode const &,bool)+4Aj
.text:0000660A                 mov     ecx, [ebp+var_4] ; this
.text:0000660D                 call    ?IsSimpleCoder@CMethodFull@N7z@NArchive@@QBE_NXZ ; NArchive::N7z::CMethodFull::IsSimpleCoder(void)
.text:00006612                 movzx   eax, al
.text:00006615                 test    eax, eax
.text:00006617                 jnz     short loc_6623
.text:00006619                 mov     eax, 80004001h
.text:0000661E                 jmp     loc_6881
.text:00006623 ; ---------------------------------------------------------------------------
.text:00006623
.text:00006623 loc_6623:                               ; CODE XREF: NArchive::N7z::MakeExeMethod(NArchive::N7z::CCompressionMethodMode &,NArchive::N7z::CFilterMode const &,bool)+67j
.text:00006623                 mov     ecx, [ebp+arg_0]
.text:00006626                 push    ecx             ; NArchive::N7z::CCompressionMethodMode *
.text:00006627                 call    ?AddFilterBond@N7z@NArchive@@YGJAAUCCompressionMethodMode@12@@Z ; NArchive::N7z::AddFilterBond(NArchive::N7z::CCompressionMethodMode &)
.text:0000662C                 jmp     loc_6881
.text:00006631 ; ---------------------------------------------------------------------------
.text:00006631
.text:00006631 loc_6631:                               ; CODE XREF: NArchive::N7z::MakeExeMethod(NArchive::N7z::CCompressionMethodMode &,NArchive::N7z::CFilterMode const &,bool)+1Fj
.text:00006631                 mov     edx, [ebp+arg_4]
.text:00006634                 cmp     dword ptr [edx], 0
.text:00006637                 jnz     short loc_6640
.text:00006639                 xor     eax, eax
.text:0000663B                 jmp     loc_6881
.text:00006640 ; ---------------------------------------------------------------------------
.text:00006640
.text:00006640 loc_6640:                               ; CODE XREF: NArchive::N7z::MakeExeMethod(NArchive::N7z::CCompressionMethodMode &,NArchive::N7z::CFilterMode const &,bool)+87j
.text:00006640                 push    0
.text:00006642                 mov     ecx, [ebp+arg_0]
.text:00006645                 call    ?InsertNew@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CMethodFull>::InsertNew(uint)
.text:0000664A                 mov     [ebp+var_10], eax
.text:0000664D                 mov     [ebp+var_14], 0
.text:00006654                 jmp     short loc_665F
.text:00006656 ; ---------------------------------------------------------------------------
.text:00006656
.text:00006656 loc_6656:                               ; CODE XREF: NArchive::N7z::MakeExeMethod(NArchive::N7z::CCompressionMethodMode &,NArchive::N7z::CFilterMode const &,bool)+EDj
.text:00006656                 mov     eax, [ebp+var_14]
.text:00006659                 add     eax, 1
.text:0000665C                 mov     [ebp+var_14], eax
.text:0000665F
.text:0000665F loc_665F:                               ; CODE XREF: NArchive::N7z::MakeExeMethod(NArchive::N7z::CCompressionMethodMode &,NArchive::N7z::CFilterMode const &,bool)+A4j
.text:0000665F                 mov     ecx, [ebp+arg_0]
.text:00006662                 add     ecx, 0Ch
.text:00006665                 call    ?Size@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CBond2>::Size(void)
.text:0000666A                 cmp     [ebp+var_14], eax
.text:0000666D                 jnb     short loc_669F
.text:0000666F                 mov     ecx, [ebp+var_14]
.text:00006672                 push    ecx
.text:00006673                 mov     ecx, [ebp+arg_0]
.text:00006676                 add     ecx, 0Ch
.text:00006679                 call    ??A?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEAAUCBond2@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CBond2>::operator[](uint)
.text:0000667E                 mov     [ebp+var_18], eax
.text:00006681                 mov     edx, [ebp+var_18]
.text:00006684                 mov     eax, [edx+8]
.text:00006687                 add     eax, 1
.text:0000668A                 mov     ecx, [ebp+var_18]
.text:0000668D                 mov     [ecx+8], eax
.text:00006690                 mov     edx, [ebp+var_18]
.text:00006693                 mov     eax, [edx]
.text:00006695                 add     eax, 1
.text:00006698                 mov     ecx, [ebp+var_18]
.text:0000669B                 mov     [ecx], eax
.text:0000669D                 jmp     short loc_6656
.text:0000669F ; ---------------------------------------------------------------------------
.text:0000669F
.text:0000669F loc_669F:                               ; CODE XREF: NArchive::N7z::MakeExeMethod(NArchive::N7z::CCompressionMethodMode &,NArchive::N7z::CFilterMode const &,bool)+BDj
.text:0000669F                 movzx   edx, [ebp+arg_8]
.text:000066A3                 test    edx, edx
.text:000066A5                 jz      short loc_66DF
.text:000066A7                 mov     eax, [ebp+arg_4]
.text:000066AA                 mov     ecx, [eax]
.text:000066AC                 xor     edx, edx
.text:000066AE                 push    edx
.text:000066AF                 push    ecx
.text:000066B0                 call    ?Is86Filter@N7z@NArchive@@YG_N_K@Z ; NArchive::N7z::Is86Filter(unsigned __int64)
.text:000066B5                 movzx   eax, al
.text:000066B8                 test    eax, eax
.text:000066BA                 jz      short loc_66DF
.text:000066BC                 mov     ecx, [ebp+var_10]
.text:000066BF                 push    ecx
.text:000066C0                 push    4
.text:000066C2                 push    0
.text:000066C4                 push    303011Bh
.text:000066C9                 call    ?GetMethodFull@N7z@NArchive@@YGX_KIAAUCMethodFull@12@@Z ; NArchive::N7z::GetMethodFull(unsigned __int64,uint,NArchive::N7z::CMethodFull &)
.text:000066CE                 mov     edx, [ebp+arg_0]
.text:000066D1                 push    edx             ; NArchive::N7z::CCompressionMethodMode *
.text:000066D2                 call    ?AddBcj2Methods@N7z@NArchive@@YGJAAUCCompressionMethodMode@12@@Z ; NArchive::N7z::AddBcj2Methods(NArchive::N7z::CCompressionMethodMode &)
.text:000066D7                 mov     [ebp+var_1C], eax
.text:000066DA                 jmp     loc_687E
.text:000066DF ; ---------------------------------------------------------------------------
.text:000066DF
.text:000066DF loc_66DF:                               ; CODE XREF: NArchive::N7z::MakeExeMethod(NArchive::N7z::CCompressionMethodMode &,NArchive::N7z::CFilterMode const &,bool)+F5j
.text:000066DF                                         ; NArchive::N7z::MakeExeMethod(NArchive::N7z::CCompressionMethodMode &,NArchive::N7z::CFilterMode const &,bool)+10Aj
.text:000066DF                 mov     eax, [ebp+var_10]
.text:000066E2                 push    eax
.text:000066E3                 push    1
.text:000066E5                 mov     ecx, [ebp+arg_4]
.text:000066E8                 mov     edx, [ecx]
.text:000066EA                 xor     eax, eax
.text:000066EC                 push    eax
.text:000066ED                 push    edx
.text:000066EE                 call    ?GetMethodFull@N7z@NArchive@@YGX_KIAAUCMethodFull@12@@Z ; NArchive::N7z::GetMethodFull(unsigned __int64,uint,NArchive::N7z::CMethodFull &)
.text:000066F3                 mov     ecx, [ebp+arg_4]
.text:000066F6                 cmp     dword ptr [ecx], 3
.text:000066F9                 jnz     short loc_670C
.text:000066FB                 mov     edx, [ebp+arg_4]
.text:000066FE                 mov     eax, [edx+4]
.text:00006701                 push    eax             ; unsigned int
.text:00006702                 push    0               ; unsigned __int32
.text:00006704                 mov     ecx, [ebp+var_10] ; this
.text:00006707                 call    ?AddProp32@CProps@@QAEXKI@Z ; CProps::AddProp32(ulong,uint)
.text:0000670C
.text:0000670C loc_670C:                               ; CODE XREF: NArchive::N7z::MakeExeMethod(NArchive::N7z::CCompressionMethodMode &,NArchive::N7z::CFilterMode const &,bool)+149j
.text:0000670C                 mov     ecx, [ebp+arg_0]
.text:0000670F                 push    ecx             ; NArchive::N7z::CCompressionMethodMode *
.text:00006710                 call    ?AddFilterBond@N7z@NArchive@@YGJAAUCCompressionMethodMode@12@@Z ; NArchive::N7z::AddFilterBond(NArchive::N7z::CCompressionMethodMode &)
.text:00006715                 mov     [ebp+var_1C], eax
.text:00006718                 mov     [ebp+var_20], 0FFFFFFFFh
.text:0000671F                 mov     edx, [ebp+arg_4]
.text:00006722                 cmp     dword ptr [edx], 3
.text:00006725                 jz      short loc_6730
.text:00006727                 mov     eax, [ebp+arg_4]
.text:0000672A                 cmp     dword ptr [eax+4], 0
.text:0000672E                 jz      short loc_6788
.text:00006730
.text:00006730 loc_6730:                               ; CODE XREF: NArchive::N7z::MakeExeMethod(NArchive::N7z::CCompressionMethodMode &,NArchive::N7z::CFilterMode const &,bool)+175j
.text:00006730                 mov     ecx, [ebp+arg_4]
.text:00006733                 cmp     dword ptr [ecx+4], 1
.text:00006737                 jnz     short loc_6742
.text:00006739                 mov     [ebp+var_20], 0
.text:00006740                 jmp     short loc_6788
.text:00006742 ; ---------------------------------------------------------------------------
.text:00006742
.text:00006742 loc_6742:                               ; CODE XREF: NArchive::N7z::MakeExeMethod(NArchive::N7z::CCompressionMethodMode &,NArchive::N7z::CFilterMode const &,bool)+187j
.text:00006742                 mov     edx, [ebp+arg_4]
.text:00006745                 cmp     dword ptr [edx+4], 2
.text:00006749                 jnz     short loc_6754
.text:0000674B                 mov     [ebp+var_20], 1
.text:00006752                 jmp     short loc_6788
.text:00006754 ; ---------------------------------------------------------------------------
.text:00006754
.text:00006754 loc_6754:                               ; CODE XREF: NArchive::N7z::MakeExeMethod(NArchive::N7z::CCompressionMethodMode &,NArchive::N7z::CFilterMode const &,bool)+199j
.text:00006754                 mov     eax, [ebp+arg_4]
.text:00006757                 cmp     dword ptr [eax+4], 4
.text:0000675B                 jnz     short loc_6766
.text:0000675D                 mov     [ebp+var_20], 2
.text:00006764                 jmp     short loc_6788
.text:00006766 ; ---------------------------------------------------------------------------
.text:00006766
.text:00006766 loc_6766:                               ; CODE XREF: NArchive::N7z::MakeExeMethod(NArchive::N7z::CCompressionMethodMode &,NArchive::N7z::CFilterMode const &,bool)+1ABj
.text:00006766                 mov     ecx, [ebp+arg_4]
.text:00006769                 cmp     dword ptr [ecx+4], 8
.text:0000676D                 jnz     short loc_6778
.text:0000676F                 mov     [ebp+var_20], 3
.text:00006776                 jmp     short loc_6788
.text:00006778 ; ---------------------------------------------------------------------------
.text:00006778
.text:00006778 loc_6778:                               ; CODE XREF: NArchive::N7z::MakeExeMethod(NArchive::N7z::CCompressionMethodMode &,NArchive::N7z::CFilterMode const &,bool)+1BDj
.text:00006778                 mov     edx, [ebp+arg_4]
.text:0000677B                 cmp     dword ptr [edx+4], 10h
.text:0000677F                 jnz     short loc_6788
.text:00006781                 mov     [ebp+var_20], 4
.text:00006788
.text:00006788 loc_6788:                               ; CODE XREF: NArchive::N7z::MakeExeMethod(NArchive::N7z::CCompressionMethodMode &,NArchive::N7z::CFilterMode const &,bool)+17Ej
.text:00006788                                         ; NArchive::N7z::MakeExeMethod(NArchive::N7z::CCompressionMethodMode &,NArchive::N7z::CFilterMode const &,bool)+190j ...
.text:00006788                 cmp     [ebp+var_1C], 0
.text:0000678C                 jnz     loc_687E
.text:00006792                 cmp     [ebp+var_20], 0
.text:00006796                 jl      loc_687E
.text:0000679C                 mov     [ebp+var_24], 1
.text:000067A3                 mov     ecx, [ebp+arg_0]
.text:000067A6                 add     ecx, 0Ch
.text:000067A9                 call    ?IsEmpty@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBE_NXZ ; CRecordVector<NArchive::N7z::CBond2>::IsEmpty(void)
.text:000067AE                 movzx   eax, al
.text:000067B1                 test    eax, eax
.text:000067B3                 jnz     short loc_67C6
.text:000067B5                 mov     ecx, [ebp+arg_0]
.text:000067B8                 add     ecx, 0Ch
.text:000067BB                 call    ?Back@?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEAAUCBond2@N7z@NArchive@@XZ ; CRecordVector<NArchive::N7z::CBond2>::Back(void)
.text:000067C0                 mov     ecx, [eax+8]
.text:000067C3                 mov     [ebp+var_24], ecx
.text:000067C6
.text:000067C6 loc_67C6:                               ; CODE XREF: NArchive::N7z::MakeExeMethod(NArchive::N7z::CCompressionMethodMode &,NArchive::N7z::CFilterMode const &,bool)+203j
.text:000067C6                 mov     ecx, [ebp+arg_0]
.text:000067C9                 call    ?Size@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::N7z::CMethodFull>::Size(void)
.text:000067CE                 cmp     [ebp+var_24], eax
.text:000067D1                 jnb     loc_687E
.text:000067D7                 mov     edx, [ebp+var_24]
.text:000067DA                 push    edx
.text:000067DB                 mov     ecx, [ebp+arg_0]
.text:000067DE                 call    ??A?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CMethodFull>::operator[](uint)
.text:000067E3                 mov     [ebp+var_28], eax
.text:000067E6                 mov     eax, [ebp+var_28]
.text:000067E9                 mov     [ebp+var_30], eax
.text:000067EC                 mov     ecx, [ebp+var_30]
.text:000067EF                 cmp     dword ptr [ecx+10h], 30101h
.text:000067F6                 jnz     short loc_6801
.text:000067F8                 mov     edx, [ebp+var_30]
.text:000067FB                 cmp     dword ptr [edx+14h], 0
.text:000067FF                 jz      short loc_6819
.text:00006801
.text:00006801 loc_6801:                               ; CODE XREF: NArchive::N7z::MakeExeMethod(NArchive::N7z::CCompressionMethodMode &,NArchive::N7z::CFilterMode const &,bool)+246j
.text:00006801                 mov     eax, [ebp+var_28]
.text:00006804                 mov     [ebp+var_34], eax
.text:00006807                 mov     ecx, [ebp+var_34]
.text:0000680A                 cmp     dword ptr [ecx+10h], 21h ; '!'
.text:0000680E                 jnz     short loc_687E
.text:00006810                 mov     edx, [ebp+var_34]
.text:00006813                 cmp     dword ptr [edx+14h], 0
.text:00006817                 jnz     short loc_687E
.text:00006819
.text:00006819 loc_6819:                               ; CODE XREF: NArchive::N7z::MakeExeMethod(NArchive::N7z::CCompressionMethodMode &,NArchive::N7z::CFilterMode const &,bool)+24Fj
.text:00006819                 mov     ecx, [ebp+var_28] ; this
.text:0000681C                 call    ?Are_Lzma_Model_Props_Defined@CMethodProps@@QBE_NXZ ; CMethodProps::Are_Lzma_Model_Props_Defined(void)
.text:00006821                 movzx   eax, al
.text:00006824                 test    eax, eax
.text:00006826                 jnz     short loc_687E
.text:00006828                 cmp     [ebp+var_20], 0
.text:0000682C                 jz      short loc_687E
.text:0000682E                 cmp     [ebp+var_20], 2
.text:00006832                 jg      short loc_683C
.text:00006834                 mov     ecx, [ebp+arg_4]
.text:00006837                 cmp     dword ptr [ecx], 3
.text:0000683A                 jnz     short loc_684A
.text:0000683C
.text:0000683C loc_683C:                               ; CODE XREF: NArchive::N7z::MakeExeMethod(NArchive::N7z::CCompressionMethodMode &,NArchive::N7z::CFilterMode const &,bool)+282j
.text:0000683C                 mov     edx, [ebp+var_20]
.text:0000683F                 push    edx             ; unsigned int
.text:00006840                 push    5               ; unsigned __int32
.text:00006842                 mov     ecx, [ebp+var_28] ; this
.text:00006845                 call    ?AddProp32@CProps@@QAEXKI@Z ; CProps::AddProp32(ulong,uint)
.text:0000684A
.text:0000684A loc_684A:                               ; CODE XREF: NArchive::N7z::MakeExeMethod(NArchive::N7z::CCompressionMethodMode &,NArchive::N7z::CFilterMode const &,bool)+28Aj
.text:0000684A                 mov     [ebp+var_2C], 0
.text:00006851                 cmp     [ebp+var_20], 3
.text:00006855                 jge     short loc_6862
.text:00006857                 mov     eax, 3
.text:0000685C                 sub     eax, [ebp+var_20]
.text:0000685F                 mov     [ebp+var_2C], eax
.text:00006862
.text:00006862 loc_6862:                               ; CODE XREF: NArchive::N7z::MakeExeMethod(NArchive::N7z::CCompressionMethodMode &,NArchive::N7z::CFilterMode const &,bool)+2A5j
.text:00006862                 mov     ecx, [ebp+var_2C]
.text:00006865                 push    ecx             ; unsigned int
.text:00006866                 push    6               ; unsigned __int32
.text:00006868                 mov     ecx, [ebp+var_28] ; this
.text:0000686B                 call    ?AddProp32@CProps@@QAEXKI@Z ; CProps::AddProp32(ulong,uint)
.text:00006870                 mov     edx, [ebp+var_20]
.text:00006873                 push    edx             ; unsigned int
.text:00006874                 push    7               ; unsigned __int32
.text:00006876                 mov     ecx, [ebp+var_28] ; this
.text:00006879                 call    ?AddProp32@CProps@@QAEXKI@Z ; CProps::AddProp32(ulong,uint)
.text:0000687E
.text:0000687E loc_687E:                               ; CODE XREF: NArchive::N7z::MakeExeMethod(NArchive::N7z::CCompressionMethodMode &,NArchive::N7z::CFilterMode const &,bool)+12Aj
.text:0000687E                                         ; NArchive::N7z::MakeExeMethod(NArchive::N7z::CCompressionMethodMode &,NArchive::N7z::CFilterMode const &,bool)+1DCj ...
.text:0000687E                 mov     eax, [ebp+var_1C]
.text:00006881
.text:00006881 loc_6881:                               ; CODE XREF: NArchive::N7z::MakeExeMethod(NArchive::N7z::CCompressionMethodMode &,NArchive::N7z::CFilterMode const &,bool)+55j
.text:00006881                                         ; NArchive::N7z::MakeExeMethod(NArchive::N7z::CCompressionMethodMode &,NArchive::N7z::CFilterMode const &,bool)+6Ej ...
.text:00006881                 pop     edi
.text:00006882                 add     esp, 34h
.text:00006885                 cmp     ebp, esp
.text:00006887                 call    __RTC_CheckEsp
.text:0000688C                 mov     esp, ebp
.text:0000688E                 pop     ebp
.text:0000688F                 retn    0Ch
.text:0000688F ?MakeExeMethod@N7z@NArchive@@YGJAAUCCompressionMethodMode@12@ABUCFilterMode@12@_N@Z endp
.text:0000688F
.text:0000688F ; ---------------------------------------------------------------------------
.text:00006892                 align 10h
.text:000068A0
.text:000068A0 ; =============== S U B R O U T I N E =======================================
.text:000068A0
.text:000068A0 ; Attributes: bp-based frame
.text:000068A0
.text:000068A0 ; bool __stdcall NArchive::N7z::Is86Filter(unsigned __int64)
.text:000068A0 ?Is86Filter@N7z@NArchive@@YG_N_K@Z proc near
.text:000068A0                                         ; CODE XREF: NArchive::N7z::MakeExeMethod(NArchive::N7z::CCompressionMethodMode &,NArchive::N7z::CFilterMode const &,bool)+100p
.text:000068A0
.text:000068A0 var_4           = dword ptr -4
.text:000068A0 arg_0           = dword ptr  8
.text:000068A0 arg_4           = dword ptr  0Ch
.text:000068A0
.text:000068A0                 push    ebp
.text:000068A1                 mov     ebp, esp
.text:000068A3                 push    ecx
.text:000068A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000068AB                 cmp     [ebp+arg_0], 3030103h
.text:000068B2                 jnz     short loc_68BA
.text:000068B4                 cmp     [ebp+arg_4], 0
.text:000068B8                 jz      short loc_68D2
.text:000068BA
.text:000068BA loc_68BA:                               ; CODE XREF: NArchive::N7z::Is86Filter(unsigned __int64)+12j
.text:000068BA                 cmp     [ebp+arg_0], 303011Bh
.text:000068C1                 jnz     short loc_68C9
.text:000068C3                 cmp     [ebp+arg_4], 0
.text:000068C7                 jz      short loc_68D2
.text:000068C9
.text:000068C9 loc_68C9:                               ; CODE XREF: NArchive::N7z::Is86Filter(unsigned __int64)+21j
.text:000068C9                 mov     [ebp+var_4], 0
.text:000068D0                 jmp     short loc_68D9
.text:000068D2 ; ---------------------------------------------------------------------------
.text:000068D2
.text:000068D2 loc_68D2:                               ; CODE XREF: NArchive::N7z::Is86Filter(unsigned __int64)+18j
.text:000068D2                                         ; NArchive::N7z::Is86Filter(unsigned __int64)+27j
.text:000068D2                 mov     [ebp+var_4], 1
.text:000068D9
.text:000068D9 loc_68D9:                               ; CODE XREF: NArchive::N7z::Is86Filter(unsigned __int64)+30j
.text:000068D9                 mov     al, byte ptr [ebp+var_4]
.text:000068DC                 mov     esp, ebp
.text:000068DE                 pop     ebp
.text:000068DF                 retn    8
.text:000068DF ?Is86Filter@N7z@NArchive@@YG_N_K@Z endp
.text:000068DF
.text:000068DF ; ---------------------------------------------------------------------------
.text:000068E2                 align 10h
.text:000068F0
.text:000068F0 ; =============== S U B R O U T I N E =======================================
.text:000068F0
.text:000068F0 ; Attributes: bp-based frame
.text:000068F0
.text:000068F0 ; void __stdcall NArchive::N7z::GetMethodFull(unsigned __int64, unsigned int, struct NArchive::N7z::CMethodFull &)
.text:000068F0 ?GetMethodFull@N7z@NArchive@@YGX_KIAAUCMethodFull@12@@Z proc near
.text:000068F0                                         ; CODE XREF: NArchive::N7z::MakeExeMethod(NArchive::N7z::CCompressionMethodMode &,NArchive::N7z::CFilterMode const &,bool)+119p
.text:000068F0                                         ; NArchive::N7z::MakeExeMethod(NArchive::N7z::CCompressionMethodMode &,NArchive::N7z::CFilterMode const &,bool)+13Ep ...
.text:000068F0
.text:000068F0 arg_0           = dword ptr  8
.text:000068F0 arg_4           = dword ptr  0Ch
.text:000068F0 arg_8           = dword ptr  10h
.text:000068F0 arg_C           = dword ptr  14h
.text:000068F0
.text:000068F0                 push    ebp
.text:000068F1                 mov     ebp, esp
.text:000068F3                 mov     eax, [ebp+arg_C]
.text:000068F6                 mov     ecx, [ebp+arg_0]
.text:000068F9                 mov     [eax+10h], ecx
.text:000068FC                 mov     edx, [ebp+arg_4]
.text:000068FF                 mov     [eax+14h], edx
.text:00006902                 mov     eax, [ebp+arg_C]
.text:00006905                 mov     ecx, [ebp+arg_8]
.text:00006908                 mov     [eax+18h], ecx
.text:0000690B                 pop     ebp
.text:0000690C                 retn    10h
.text:0000690C ?GetMethodFull@N7z@NArchive@@YGX_KIAAUCMethodFull@12@@Z endp
.text:0000690C
.text:0000690C ; ---------------------------------------------------------------------------
.text:0000690F                 align 10h
.text:00006910
.text:00006910 ; =============== S U B R O U T I N E =======================================
.text:00006910
.text:00006910 ; Attributes: bp-based frame
.text:00006910
.text:00006910 ; int __stdcall NArchive::N7z::AddFilterBond(NArchive::N7z::CCompressionMethodMode *)
.text:00006910 ?AddFilterBond@N7z@NArchive@@YGJAAUCCompressionMethodMode@12@@Z proc near
.text:00006910                                         ; CODE XREF: NArchive::N7z::MakeExeMethod(NArchive::N7z::CCompressionMethodMode &,NArchive::N7z::CFilterMode const &,bool)+77p
.text:00006910                                         ; NArchive::N7z::MakeExeMethod(NArchive::N7z::CCompressionMethodMode &,NArchive::N7z::CFilterMode const &,bool)+160p
.text:00006910
.text:00006910 arg_0           = dword ptr  8
.text:00006910
.text:00006910                 push    ebp
.text:00006911                 mov     ebp, esp
.text:00006913                 mov     ecx, [ebp+arg_0]
.text:00006916                 add     ecx, 0Ch
.text:00006919                 call    ?IsEmpty@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBE_NXZ ; CRecordVector<NArchive::N7z::CBond2>::IsEmpty(void)
.text:0000691E                 movzx   eax, al
.text:00006921                 test    eax, eax
.text:00006923                 jnz     short loc_6930
.text:00006925                 mov     ecx, [ebp+arg_0]
.text:00006928                 push    ecx             ; NArchive::N7z::CCompressionMethodMode *
.text:00006929                 call    ?AddBondForFilter@N7z@NArchive@@YGJAAUCCompressionMethodMode@12@@Z ; NArchive::N7z::AddBondForFilter(NArchive::N7z::CCompressionMethodMode &)
.text:0000692E                 jmp     short loc_6932
.text:00006930 ; ---------------------------------------------------------------------------
.text:00006930
.text:00006930 loc_6930:                               ; CODE XREF: NArchive::N7z::AddFilterBond(NArchive::N7z::CCompressionMethodMode &)+13j
.text:00006930                 xor     eax, eax
.text:00006932
.text:00006932 loc_6932:                               ; CODE XREF: NArchive::N7z::AddFilterBond(NArchive::N7z::CCompressionMethodMode &)+1Ej
.text:00006932                 cmp     ebp, esp
.text:00006934                 call    __RTC_CheckEsp
.text:00006939                 pop     ebp
.text:0000693A                 retn    4
.text:0000693A ?AddFilterBond@N7z@NArchive@@YGJAAUCCompressionMethodMode@12@@Z endp
.text:0000693A
.text:0000693A ; ---------------------------------------------------------------------------
.text:0000693D                 align 10h
.text:00006940
.text:00006940 ; =============== S U B R O U T I N E =======================================
.text:00006940
.text:00006940 ; Attributes: bp-based frame
.text:00006940
.text:00006940 ; int __stdcall NArchive::N7z::AddBondForFilter(NArchive::N7z::CCompressionMethodMode *)
.text:00006940 ?AddBondForFilter@N7z@NArchive@@YGJAAUCCompressionMethodMode@12@@Z proc near
.text:00006940                                         ; CODE XREF: NArchive::N7z::AddFilterBond(NArchive::N7z::CCompressionMethodMode &)+19p
.text:00006940                                         ; NArchive::N7z::AddBcj2Methods(NArchive::N7z::CCompressionMethodMode &)+132p
.text:00006940
.text:00006940 var_1C          = dword ptr -1Ch
.text:00006940 var_18          = dword ptr -18h
.text:00006940 var_14          = dword ptr -14h
.text:00006940 var_10          = dword ptr -10h
.text:00006940 var_C           = dword ptr -0Ch
.text:00006940 var_8           = dword ptr -8
.text:00006940 var_4           = dword ptr -4
.text:00006940 arg_0           = dword ptr  8
.text:00006940
.text:00006940                 push    ebp
.text:00006941                 mov     ebp, esp
.text:00006943                 sub     esp, 1Ch
.text:00006946                 mov     eax, 0CCCCCCCCh
.text:0000694B                 mov     [ebp+var_1C], eax
.text:0000694E                 mov     [ebp+var_18], eax
.text:00006951                 mov     [ebp+var_14], eax
.text:00006954                 mov     [ebp+var_10], eax
.text:00006957                 mov     [ebp+var_C], eax
.text:0000695A                 mov     [ebp+var_8], eax
.text:0000695D                 mov     [ebp+var_4], eax
.text:00006960                 mov     eax, dword ptr ds:___security_cookie
.text:00006965                 xor     eax, ebp
.text:00006967                 mov     [ebp+var_4], eax
.text:0000696A                 mov     [ebp+var_8], 1
.text:00006971                 jmp     short loc_697C
.text:00006973 ; ---------------------------------------------------------------------------
.text:00006973
.text:00006973 loc_6973:                               ; CODE XREF: NArchive::N7z::AddBondForFilter(NArchive::N7z::CCompressionMethodMode &):loc_69D5j
.text:00006973                 mov     eax, [ebp+var_8]
.text:00006976                 add     eax, 1
.text:00006979                 mov     [ebp+var_8], eax
.text:0000697C
.text:0000697C loc_697C:                               ; CODE XREF: NArchive::N7z::AddBondForFilter(NArchive::N7z::CCompressionMethodMode &)+31j
.text:0000697C                 mov     ecx, [ebp+arg_0]
.text:0000697F                 call    ?Size@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::N7z::CMethodFull>::Size(void)
.text:00006984                 cmp     [ebp+var_8], eax
.text:00006987                 jnb     short loc_69D7
.text:00006989                 mov     ecx, [ebp+var_8]
.text:0000698C                 push    ecx             ; unsigned int
.text:0000698D                 mov     ecx, [ebp+arg_0] ; this
.text:00006990                 call    ?IsThereBond_to_Coder@CCompressionMethodMode@N7z@NArchive@@QBE_NI@Z ; NArchive::N7z::CCompressionMethodMode::IsThereBond_to_Coder(uint)
.text:00006995                 movzx   edx, al
.text:00006998                 test    edx, edx
.text:0000699A                 jnz     short loc_69D5
.text:0000699C                 mov     [ebp+var_18], 0
.text:000069A3                 mov     [ebp+var_14], 0
.text:000069AA                 mov     eax, [ebp+var_8]
.text:000069AD                 mov     [ebp+var_10], eax
.text:000069B0                 sub     esp, 0Ch
.text:000069B3                 mov     ecx, esp
.text:000069B5                 mov     edx, [ebp+var_18]
.text:000069B8                 mov     [ecx], edx
.text:000069BA                 mov     eax, [ebp+var_14]
.text:000069BD                 mov     [ecx+4], eax
.text:000069C0                 mov     edx, [ebp+var_10]
.text:000069C3                 mov     [ecx+8], edx
.text:000069C6                 mov     ecx, [ebp+arg_0]
.text:000069C9                 add     ecx, 0Ch
.text:000069CC                 call    ?Add@?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEIUCBond2@N7z@NArchive@@@Z ; CRecordVector<NArchive::N7z::CBond2>::Add(NArchive::N7z::CBond2)
.text:000069D1                 xor     eax, eax
.text:000069D3                 jmp     short loc_69DC
.text:000069D5 ; ---------------------------------------------------------------------------
.text:000069D5
.text:000069D5 loc_69D5:                               ; CODE XREF: NArchive::N7z::AddBondForFilter(NArchive::N7z::CCompressionMethodMode &)+5Aj
.text:000069D5                 jmp     short loc_6973
.text:000069D7 ; ---------------------------------------------------------------------------
.text:000069D7
.text:000069D7 loc_69D7:                               ; CODE XREF: NArchive::N7z::AddBondForFilter(NArchive::N7z::CCompressionMethodMode &)+47j
.text:000069D7                 mov     eax, 80070057h
.text:000069DC
.text:000069DC loc_69DC:                               ; CODE XREF: NArchive::N7z::AddBondForFilter(NArchive::N7z::CCompressionMethodMode &)+93j
.text:000069DC                 push    edx
.text:000069DD                 mov     ecx, ebp
.text:000069DF                 push    eax
.text:000069E0                 lea     edx, $LN9_0
.text:000069E6                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000069EB                 pop     eax
.text:000069EC                 pop     edx
.text:000069ED                 mov     ecx, [ebp+var_4]
.text:000069F0                 xor     ecx, ebp
.text:000069F2                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000069F7                 add     esp, 1Ch
.text:000069FA                 cmp     ebp, esp
.text:000069FC                 call    __RTC_CheckEsp
.text:00006A01                 mov     esp, ebp
.text:00006A03                 pop     ebp
.text:00006A04                 retn    4
.text:00006A04 ?AddBondForFilter@N7z@NArchive@@YGJAAUCCompressionMethodMode@12@@Z endp
.text:00006A04
.text:00006A04 ; ---------------------------------------------------------------------------
.text:00006A07                 align 4
.text:00006A08 $LN9_0          dd 1                    ; DATA XREF: NArchive::N7z::AddBondForFilter(NArchive::N7z::CCompressionMethodMode &)+A0o
.text:00006A0C                 dd offset $LN8_0
.text:00006A10 $LN8_0          dd 0FFFFFFE8h, 0Ch      ; DATA XREF: .text:00006A0Co
.text:00006A18                 dd offset $LN7_0        ; "bond"
.text:00006A1C $LN7_0          db 'bond',0             ; DATA XREF: .text:00006A18o
.text:00006A21                 align 10h
.text:00006A30
.text:00006A30 ; =============== S U B R O U T I N E =======================================
.text:00006A30
.text:00006A30 ; Attributes: bp-based frame
.text:00006A30
.text:00006A30 ; int __stdcall NArchive::N7z::AddBcj2Methods(NArchive::N7z::CCompressionMethodMode *)
.text:00006A30 ?AddBcj2Methods@N7z@NArchive@@YGJAAUCCompressionMethodMode@12@@Z proc near
.text:00006A30                                         ; CODE XREF: NArchive::N7z::MakeExeMethod(NArchive::N7z::CCompressionMethodMode &,NArchive::N7z::CFilterMode const &,bool)+50p
.text:00006A30                                         ; NArchive::N7z::MakeExeMethod(NArchive::N7z::CCompressionMethodMode &,NArchive::N7z::CFilterMode const &,bool)+122p
.text:00006A30
.text:00006A30 var_74          = dword ptr -74h
.text:00006A30 var_70          = dword ptr -70h
.text:00006A30 var_68          = dword ptr -68h
.text:00006A30 var_64          = dword ptr -64h
.text:00006A30 var_60          = dword ptr -60h
.text:00006A30 var_58          = dword ptr -58h
.text:00006A30 var_50          = dword ptr -50h
.text:00006A30 var_4C          = dword ptr -4Ch
.text:00006A30 var_48          = dword ptr -48h
.text:00006A30 var_40          = dword ptr -40h
.text:00006A30 var_3C          = dword ptr -3Ch
.text:00006A30 var_34          = byte ptr -34h
.text:00006A30 var_10          = dword ptr -10h
.text:00006A30 var_C           = dword ptr -0Ch
.text:00006A30 var_4           = dword ptr -4
.text:00006A30 arg_0           = dword ptr  8
.text:00006A30
.text:00006A30                 push    ebp
.text:00006A31                 mov     ebp, esp
.text:00006A33                 push    0FFFFFFFFh
.text:00006A35                 push    offset __ehhandler$?AddBcj2Methods@N7z@NArchive@@YGJAAUCCompressionMethodMode@12@@Z
.text:00006A3A                 mov     eax, large fs:0
.text:00006A40                 push    eax
.text:00006A41                 sub     esp, 68h
.text:00006A44                 push    esi
.text:00006A45                 push    edi
.text:00006A46                 lea     edi, [ebp+var_74]
.text:00006A49                 mov     ecx, 1Ah
.text:00006A4E                 mov     eax, 0CCCCCCCCh
.text:00006A53                 rep stosd
.text:00006A55                 mov     eax, dword ptr ds:___security_cookie
.text:00006A5A                 xor     eax, ebp
.text:00006A5C                 mov     [ebp+var_10], eax
.text:00006A5F                 push    eax
.text:00006A60                 lea     eax, [ebp+var_C]
.text:00006A63                 mov     large fs:0, eax
.text:00006A69                 lea     ecx, [ebp+var_34] ; this
.text:00006A6C                 call    ??0CMethodFull@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CMethodFull::CMethodFull(void)
.text:00006A71                 mov     [ebp+var_4], 0
.text:00006A78                 lea     eax, [ebp+var_34]
.text:00006A7B                 push    eax
.text:00006A7C                 push    1
.text:00006A7E                 push    0
.text:00006A80                 push    30101h
.text:00006A85                 call    ?GetMethodFull@N7z@NArchive@@YGX_KIAAUCMethodFull@12@@Z ; NArchive::N7z::GetMethodFull(unsigned __int64,uint,NArchive::N7z::CMethodFull &)
.text:00006A8A                 push    100000h         ; unsigned int
.text:00006A8F                 push    1               ; unsigned __int32
.text:00006A91                 lea     ecx, [ebp+var_34] ; this
.text:00006A94                 call    ?AddProp32@CProps@@QAEXKI@Z ; CProps::AddProp32(ulong,uint)
.text:00006A99                 push    80h ; 'Ç'       ; unsigned int
.text:00006A9E                 push    8               ; unsigned __int32
.text:00006AA0                 lea     ecx, [ebp+var_34] ; this
.text:00006AA3                 call    ?AddProp32@CProps@@QAEXKI@Z ; CProps::AddProp32(ulong,uint)
.text:00006AA8                 push    1               ; unsigned int
.text:00006AAA                 push    0Dh             ; unsigned __int32
.text:00006AAC                 lea     ecx, [ebp+var_34] ; this
.text:00006AAF                 call    ?AddProp32@CProps@@QAEXKI@Z ; CProps::AddProp32(ulong,uint)
.text:00006AB4                 push    2               ; unsigned int
.text:00006AB6                 push    7               ; unsigned __int32
.text:00006AB8                 lea     ecx, [ebp+var_34] ; this
.text:00006ABB                 call    ?AddProp32@CProps@@QAEXKI@Z ; CProps::AddProp32(ulong,uint)
.text:00006AC0                 push    0               ; unsigned int
.text:00006AC2                 push    6               ; unsigned __int32
.text:00006AC4                 lea     ecx, [ebp+var_34] ; this
.text:00006AC7                 call    ?AddProp32@CProps@@QAEXKI@Z ; CProps::AddProp32(ulong,uint)
.text:00006ACC                 mov     ecx, [ebp+arg_0]
.text:00006ACF                 call    ?Size@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::N7z::CMethodFull>::Size(void)
.text:00006AD4                 mov     [ebp+var_3C], eax
.text:00006AD7                 mov     ecx, [ebp+arg_0]
.text:00006ADA                 add     ecx, 0Ch
.text:00006ADD                 call    ?IsEmpty@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBE_NXZ ; CRecordVector<NArchive::N7z::CBond2>::IsEmpty(void)
.text:00006AE2                 movzx   ecx, al
.text:00006AE5                 test    ecx, ecx
.text:00006AE7                 jz      short loc_6B46
.text:00006AE9                 mov     [ebp+var_40], 1
.text:00006AF0                 jmp     short loc_6AFB
.text:00006AF2 ; ---------------------------------------------------------------------------
.text:00006AF2
.text:00006AF2 loc_6AF2:                               ; CODE XREF: NArchive::N7z::AddBcj2Methods(NArchive::N7z::CCompressionMethodMode &)+114j
.text:00006AF2                 mov     edx, [ebp+var_40]
.text:00006AF5                 add     edx, 1
.text:00006AF8                 mov     [ebp+var_40], edx
.text:00006AFB
.text:00006AFB loc_6AFB:                               ; CODE XREF: NArchive::N7z::AddBcj2Methods(NArchive::N7z::CCompressionMethodMode &)+C0j
.text:00006AFB                 mov     esi, [ebp+var_40]
.text:00006AFE                 add     esi, 1
.text:00006B01                 mov     ecx, [ebp+arg_0]
.text:00006B04                 call    ?Size@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::N7z::CMethodFull>::Size(void)
.text:00006B09                 cmp     esi, eax
.text:00006B0B                 jnb     short loc_6B46
.text:00006B0D                 mov     eax, [ebp+var_40]
.text:00006B10                 mov     [ebp+var_50], eax
.text:00006B13                 mov     [ebp+var_4C], 0
.text:00006B1A                 mov     ecx, [ebp+var_40]
.text:00006B1D                 add     ecx, 1
.text:00006B20                 mov     [ebp+var_48], ecx
.text:00006B23                 sub     esp, 0Ch
.text:00006B26                 mov     edx, esp
.text:00006B28                 mov     eax, [ebp+var_50]
.text:00006B2B                 mov     [edx], eax
.text:00006B2D                 mov     ecx, [ebp+var_4C]
.text:00006B30                 mov     [edx+4], ecx
.text:00006B33                 mov     eax, [ebp+var_48]
.text:00006B36                 mov     [edx+8], eax
.text:00006B39                 mov     ecx, [ebp+arg_0]
.text:00006B3C                 add     ecx, 0Ch
.text:00006B3F                 call    ?Add@?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEIUCBond2@N7z@NArchive@@@Z ; CRecordVector<NArchive::N7z::CBond2>::Add(NArchive::N7z::CBond2)
.text:00006B44                 jmp     short loc_6AF2
.text:00006B46 ; ---------------------------------------------------------------------------
.text:00006B46
.text:00006B46 loc_6B46:                               ; CODE XREF: NArchive::N7z::AddBcj2Methods(NArchive::N7z::CCompressionMethodMode &)+B7j
.text:00006B46                                         ; NArchive::N7z::AddBcj2Methods(NArchive::N7z::CCompressionMethodMode &)+DBj
.text:00006B46                 lea     ecx, [ebp+var_34]
.text:00006B49                 push    ecx             ; struct NArchive::N7z::CMethodFull *
.text:00006B4A                 mov     ecx, [ebp+arg_0]
.text:00006B4D                 call    ?Add@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEIABUCMethodFull@N7z@NArchive@@@Z ; CObjectVector<NArchive::N7z::CMethodFull>::Add(NArchive::N7z::CMethodFull const &)
.text:00006B52                 lea     edx, [ebp+var_34]
.text:00006B55                 push    edx             ; struct NArchive::N7z::CMethodFull *
.text:00006B56                 mov     ecx, [ebp+arg_0]
.text:00006B59                 call    ?Add@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEIABUCMethodFull@N7z@NArchive@@@Z ; CObjectVector<NArchive::N7z::CMethodFull>::Add(NArchive::N7z::CMethodFull const &)
.text:00006B5E                 mov     eax, [ebp+arg_0]
.text:00006B61                 push    eax             ; NArchive::N7z::CCompressionMethodMode *
.text:00006B62                 call    ?AddBondForFilter@N7z@NArchive@@YGJAAUCCompressionMethodMode@12@@Z ; NArchive::N7z::AddBondForFilter(NArchive::N7z::CCompressionMethodMode &)
.text:00006B67                 mov     [ebp+var_58], eax
.text:00006B6A                 cmp     [ebp+var_58], 0
.text:00006B6E                 jz      short loc_6B8A
.text:00006B70                 mov     ecx, [ebp+var_58]
.text:00006B73                 mov     [ebp+var_70], ecx
.text:00006B76                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00006B7D                 lea     ecx, [ebp+var_34] ; this
.text:00006B80                 call    ??1CMethodFull@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CMethodFull::~CMethodFull(void)
.text:00006B85                 mov     eax, [ebp+var_70]
.text:00006B88                 jmp     short loc_6C09
.text:00006B8A ; ---------------------------------------------------------------------------
.text:00006B8A
.text:00006B8A loc_6B8A:                               ; CODE XREF: NArchive::N7z::AddBcj2Methods(NArchive::N7z::CCompressionMethodMode &)+13Ej
.text:00006B8A                 mov     [ebp+var_68], 0
.text:00006B91                 mov     edx, [ebp+var_3C]
.text:00006B94                 mov     [ebp+var_60], edx
.text:00006B97                 mov     [ebp+var_64], 1
.text:00006B9E                 sub     esp, 0Ch
.text:00006BA1                 mov     eax, esp
.text:00006BA3                 mov     ecx, [ebp+var_68]
.text:00006BA6                 mov     [eax], ecx
.text:00006BA8                 mov     edx, [ebp+var_64]
.text:00006BAB                 mov     [eax+4], edx
.text:00006BAE                 mov     ecx, [ebp+var_60]
.text:00006BB1                 mov     [eax+8], ecx
.text:00006BB4                 mov     ecx, [ebp+arg_0]
.text:00006BB7                 add     ecx, 0Ch
.text:00006BBA                 call    ?Add@?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEIUCBond2@N7z@NArchive@@@Z ; CRecordVector<NArchive::N7z::CBond2>::Add(NArchive::N7z::CBond2)
.text:00006BBF                 mov     edx, [ebp+var_3C]
.text:00006BC2                 add     edx, 1
.text:00006BC5                 mov     [ebp+var_60], edx
.text:00006BC8                 mov     [ebp+var_64], 2
.text:00006BCF                 sub     esp, 0Ch
.text:00006BD2                 mov     eax, esp
.text:00006BD4                 mov     ecx, [ebp+var_68]
.text:00006BD7                 mov     [eax], ecx
.text:00006BD9                 mov     edx, [ebp+var_64]
.text:00006BDC                 mov     [eax+4], edx
.text:00006BDF                 mov     ecx, [ebp+var_60]
.text:00006BE2                 mov     [eax+8], ecx
.text:00006BE5                 mov     ecx, [ebp+arg_0]
.text:00006BE8                 add     ecx, 0Ch
.text:00006BEB                 call    ?Add@?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEIUCBond2@N7z@NArchive@@@Z ; CRecordVector<NArchive::N7z::CBond2>::Add(NArchive::N7z::CBond2)
.text:00006BF0                 mov     [ebp+var_74], 0
.text:00006BF7                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00006BFE                 lea     ecx, [ebp+var_34] ; this
.text:00006C01                 call    ??1CMethodFull@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CMethodFull::~CMethodFull(void)
.text:00006C06                 mov     eax, [ebp+var_74]
.text:00006C09
.text:00006C09 loc_6C09:                               ; CODE XREF: NArchive::N7z::AddBcj2Methods(NArchive::N7z::CCompressionMethodMode &)+158j
.text:00006C09                 push    edx
.text:00006C0A                 mov     ecx, ebp
.text:00006C0C                 push    eax
.text:00006C0D                 lea     edx, $LN14_0
.text:00006C13                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00006C18                 pop     eax
.text:00006C19                 pop     edx
.text:00006C1A                 mov     ecx, [ebp+var_C]
.text:00006C1D                 mov     large fs:0, ecx
.text:00006C24                 pop     ecx
.text:00006C25                 pop     edi
.text:00006C26                 pop     esi
.text:00006C27                 mov     ecx, [ebp+var_10]
.text:00006C2A                 xor     ecx, ebp
.text:00006C2C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00006C31                 add     esp, 74h
.text:00006C34                 cmp     ebp, esp
.text:00006C36                 call    __RTC_CheckEsp
.text:00006C3B                 mov     esp, ebp
.text:00006C3D                 pop     ebp
.text:00006C3E                 retn    4
.text:00006C3E ?AddBcj2Methods@N7z@NArchive@@YGJAAUCCompressionMethodMode@12@@Z endp
.text:00006C3E
.text:00006C3E ; ---------------------------------------------------------------------------
.text:00006C41                 align 4
.text:00006C44 $LN14_0         dd 3                    ; DATA XREF: NArchive::N7z::AddBcj2Methods(NArchive::N7z::CCompressionMethodMode &)+1DDo
.text:00006C48                 dd offset $LN13_0
.text:00006C4C $LN13_0         db 0CCh                 ; DATA XREF: .text:00006C48o
.text:00006C4D                 db 3 dup(0FFh)
.text:00006C50                 dd offset $SG75624+20h  ; "lzo lzx gz pak rpm sit tgz tbz tbz2 tgz"...
.text:00006C54                 dd offset $LN9_1        ; "m"
.text:00006C58                 dd 0FFFFFFB0h, 0Ch
.text:00006C60                 dd offset $LN10_1       ; "bond"
.text:00006C64                 dd 0FFFFFF98h, 0Ch
.text:00006C6C                 dd offset $LN11_0       ; "bond"
.text:00006C70 $LN11_0         db 'bond',0             ; DATA XREF: .text:00006C6Co
.text:00006C75 $LN10_1         db 'bond',0             ; DATA XREF: .text:00006C60o
.text:00006C7A $LN9_1          db 'm',0                ; DATA XREF: .text:00006C54o
.text:00006C7C                 align 10h
.text:00006C80
.text:00006C80 ; =============== S U B R O U T I N E =======================================
.text:00006C80
.text:00006C80 ; Attributes: bp-based frame
.text:00006C80
.text:00006C80 ; int __stdcall NArchive::N7z::FromUpdateItemToFileItem(NArchive::N7z::CUpdateItem *, NArchive::N7z::CFileItem *, int)
.text:00006C80 ?FromUpdateItemToFileItem@N7z@NArchive@@YGXABUCUpdateItem@12@AAUCFileItem@12@AAUCFileItem2@12@@Z proc near
.text:00006C80                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+10B6p
.text:00006C80                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+2E9Ep ...
.text:00006C80
.text:00006C80 arg_0           = dword ptr  8
.text:00006C80 arg_4           = dword ptr  0Ch
.text:00006C80 arg_8           = dword ptr  10h
.text:00006C80
.text:00006C80                 push    ebp
.text:00006C81                 mov     ebp, esp
.text:00006C83                 mov     eax, [ebp+arg_0]
.text:00006C86                 movzx   ecx, byte ptr [eax+3Ch]
.text:00006C8A                 test    ecx, ecx
.text:00006C8C                 jz      short loc_6C9D
.text:00006C8E                 mov     edx, [ebp+arg_0]
.text:00006C91                 mov     eax, [edx+34h]
.text:00006C94                 push    eax             ; unsigned int
.text:00006C95                 mov     ecx, [ebp+arg_4] ; this
.text:00006C98                 call    ?SetAttrib@CFileItem@N7z@NArchive@@QAEXI@Z ; NArchive::N7z::CFileItem::SetAttrib(uint)
.text:00006C9D
.text:00006C9D loc_6C9D:                               ; CODE XREF: NArchive::N7z::FromUpdateItemToFileItem(NArchive::N7z::CUpdateItem const &,NArchive::N7z::CFileItem &,NArchive::N7z::CFileItem2 &)+Cj
.text:00006C9D                 mov     ecx, [ebp+arg_8]
.text:00006CA0                 mov     edx, [ebp+arg_0]
.text:00006CA3                 mov     eax, [edx+8]
.text:00006CA6                 mov     [ecx], eax
.text:00006CA8                 mov     edx, [edx+0Ch]
.text:00006CAB                 mov     [ecx+4], edx
.text:00006CAE                 mov     eax, [ebp+arg_8]
.text:00006CB1                 mov     ecx, [ebp+arg_0]
.text:00006CB4                 mov     dl, [ecx+3Dh]
.text:00006CB7                 mov     [eax+20h], dl
.text:00006CBA                 mov     eax, [ebp+arg_8]
.text:00006CBD                 mov     ecx, [ebp+arg_0]
.text:00006CC0                 mov     edx, [ecx+10h]
.text:00006CC3                 mov     [eax+8], edx
.text:00006CC6                 mov     ecx, [ecx+14h]
.text:00006CC9                 mov     [eax+0Ch], ecx
.text:00006CCC                 mov     edx, [ebp+arg_8]
.text:00006CCF                 mov     eax, [ebp+arg_0]
.text:00006CD2                 mov     cl, [eax+3Eh]
.text:00006CD5                 mov     [edx+21h], cl
.text:00006CD8                 mov     edx, [ebp+arg_8]
.text:00006CDB                 mov     eax, [ebp+arg_0]
.text:00006CDE                 mov     ecx, [eax+18h]
.text:00006CE1                 mov     [edx+10h], ecx
.text:00006CE4                 mov     eax, [eax+1Ch]
.text:00006CE7                 mov     [edx+14h], eax
.text:00006CEA                 mov     ecx, [ebp+arg_8]
.text:00006CED                 mov     edx, [ebp+arg_0]
.text:00006CF0                 mov     al, [edx+3Fh]
.text:00006CF3                 mov     [ecx+22h], al
.text:00006CF6                 mov     ecx, [ebp+arg_8]
.text:00006CF9                 mov     edx, [ebp+arg_0]
.text:00006CFC                 mov     al, [edx+3Ah]
.text:00006CFF                 mov     [ecx+24h], al
.text:00006D02                 mov     ecx, [ebp+arg_8]
.text:00006D05                 mov     byte ptr [ecx+23h], 0
.text:00006D09                 mov     edx, [ebp+arg_4]
.text:00006D0C                 mov     eax, [ebp+arg_0]
.text:00006D0F                 mov     ecx, [eax+20h]
.text:00006D12                 mov     [edx], ecx
.text:00006D14                 mov     eax, [eax+24h]
.text:00006D17                 mov     [edx+4], eax
.text:00006D1A                 mov     ecx, [ebp+arg_4]
.text:00006D1D                 mov     edx, [ebp+arg_0]
.text:00006D20                 mov     al, [edx+3Bh]
.text:00006D23                 mov     [ecx+11h], al
.text:00006D26                 mov     ecx, [ebp+arg_0] ; this
.text:00006D29                 call    ?HasStream@CUpdateItem@N7z@NArchive@@QBE_NXZ ; NArchive::N7z::CUpdateItem::HasStream(void)
.text:00006D2E                 mov     ecx, [ebp+arg_4]
.text:00006D31                 mov     [ecx+10h], al
.text:00006D34                 cmp     ebp, esp
.text:00006D36                 call    __RTC_CheckEsp
.text:00006D3B                 pop     ebp
.text:00006D3C                 retn    0Ch
.text:00006D3C ?FromUpdateItemToFileItem@N7z@NArchive@@YGXABUCUpdateItem@12@AAUCFileItem@12@AAUCFileItem2@12@@Z endp
.text:00006D3C
.text:00006D3C ; ---------------------------------------------------------------------------
.text:00006D3F                 align 10h
.text:00006D40
.text:00006D40 ; =============== S U B R O U T I N E =======================================
.text:00006D40
.text:00006D40 ; Attributes: bp-based frame
.text:00006D40
.text:00006D40 ; int __stdcall NArchive::N7z::GetFile(NArchive::N7z::CDatabase *, unsigned int, int, unsigned __int64 *)
.text:00006D40 ?GetFile@N7z@NArchive@@YGXABUCDatabase@12@IAAUCFileItem@12@AAUCFileItem2@12@@Z proc near
.text:00006D40                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+10EDp
.text:00006D40                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+2DC9p ...
.text:00006D40
.text:00006D40 arg_0           = dword ptr  8
.text:00006D40 arg_4           = dword ptr  0Ch
.text:00006D40 arg_8           = dword ptr  10h
.text:00006D40 arg_C           = dword ptr  14h
.text:00006D40
.text:00006D40                 push    ebp
.text:00006D41                 mov     ebp, esp
.text:00006D43                 mov     eax, [ebp+arg_4]
.text:00006D46                 push    eax
.text:00006D47                 mov     ecx, [ebp+arg_0]
.text:00006D4A                 add     ecx, 58h ; 'X'
.text:00006D4D                 call    ??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFileItem>::operator[](uint)
.text:00006D52                 mov     ecx, [ebp+arg_8]
.text:00006D55                 mov     edx, [eax]
.text:00006D57                 mov     [ecx], edx
.text:00006D59                 mov     edx, [eax+4]
.text:00006D5C                 mov     [ecx+4], edx
.text:00006D5F                 mov     edx, [eax+8]
.text:00006D62                 mov     [ecx+8], edx
.text:00006D65                 mov     edx, [eax+0Ch]
.text:00006D68                 mov     [ecx+0Ch], edx
.text:00006D6B                 mov     edx, [eax+10h]
.text:00006D6E                 mov     [ecx+10h], edx
.text:00006D71                 mov     eax, [eax+14h]
.text:00006D74                 mov     [ecx+14h], eax
.text:00006D77                 mov     ecx, [ebp+arg_C]
.text:00006D7A                 push    ecx             ; unsigned __int64 *
.text:00006D7B                 mov     edx, [ebp+arg_4]
.text:00006D7E                 push    edx             ; unsigned int
.text:00006D7F                 mov     ecx, [ebp+arg_0]
.text:00006D82                 add     ecx, 64h ; 'd'  ; this
.text:00006D85                 call    ?GetItem@CUInt64DefVector@N7z@NArchive@@QBE_NIAA_K@Z ; NArchive::N7z::CUInt64DefVector::GetItem(uint,unsigned __int64 &)
.text:00006D8A                 mov     ecx, [ebp+arg_C]
.text:00006D8D                 mov     [ecx+20h], al
.text:00006D90                 mov     edx, [ebp+arg_C]
.text:00006D93                 add     edx, 8
.text:00006D96                 push    edx             ; unsigned __int64 *
.text:00006D97                 mov     eax, [ebp+arg_4]
.text:00006D9A                 push    eax             ; unsigned int
.text:00006D9B                 mov     ecx, [ebp+arg_0]
.text:00006D9E                 add     ecx, 7Ch ; '|'  ; this
.text:00006DA1                 call    ?GetItem@CUInt64DefVector@N7z@NArchive@@QBE_NIAA_K@Z ; NArchive::N7z::CUInt64DefVector::GetItem(uint,unsigned __int64 &)
.text:00006DA6                 mov     ecx, [ebp+arg_C]
.text:00006DA9                 mov     [ecx+21h], al
.text:00006DAC                 mov     edx, [ebp+arg_C]
.text:00006DAF                 add     edx, 10h
.text:00006DB2                 push    edx             ; unsigned __int64 *
.text:00006DB3                 mov     eax, [ebp+arg_4]
.text:00006DB6                 push    eax             ; unsigned int
.text:00006DB7                 mov     ecx, [ebp+arg_0]
.text:00006DBA                 add     ecx, 94h ; 'ö'  ; this
.text:00006DC0                 call    ?GetItem@CUInt64DefVector@N7z@NArchive@@QBE_NIAA_K@Z ; NArchive::N7z::CUInt64DefVector::GetItem(uint,unsigned __int64 &)
.text:00006DC5                 mov     ecx, [ebp+arg_C]
.text:00006DC8                 mov     [ecx+22h], al
.text:00006DCB                 mov     edx, [ebp+arg_C]
.text:00006DCE                 add     edx, 18h
.text:00006DD1                 push    edx             ; unsigned __int64 *
.text:00006DD2                 mov     eax, [ebp+arg_4]
.text:00006DD5                 push    eax             ; unsigned int
.text:00006DD6                 mov     ecx, [ebp+arg_0]
.text:00006DD9                 add     ecx, 0ACh ; '¼' ; this
.text:00006DDF                 call    ?GetItem@CUInt64DefVector@N7z@NArchive@@QBE_NIAA_K@Z ; NArchive::N7z::CUInt64DefVector::GetItem(uint,unsigned __int64 &)
.text:00006DE4                 mov     ecx, [ebp+arg_C]
.text:00006DE7                 mov     [ecx+23h], al
.text:00006DEA                 mov     edx, [ebp+arg_4]
.text:00006DED                 push    edx             ; unsigned int
.text:00006DEE                 mov     ecx, [ebp+arg_0] ; this
.text:00006DF1                 call    ?IsItemAnti@CDatabase@N7z@NArchive@@QBE_NI@Z ; NArchive::N7z::CDatabase::IsItemAnti(uint)
.text:00006DF6                 mov     ecx, [ebp+arg_C]
.text:00006DF9                 mov     [ecx+24h], al
.text:00006DFC                 cmp     ebp, esp
.text:00006DFE                 call    __RTC_CheckEsp
.text:00006E03                 pop     ebp
.text:00006E04                 retn    10h
.text:00006E04 ?GetFile@N7z@NArchive@@YGXABUCDatabase@12@IAAUCFileItem@12@AAUCFileItem2@12@@Z endp
.text:00006E04
.text:00006E04 ; ---------------------------------------------------------------------------
.text:00006E07                 align 4
.text:00006E07 _text           ends
.text:00006E07
.text$x:00006E08 ; ===========================================================================
.text$x:00006E08
.text$x:00006E08 ; Segment type: Pure code
.text$x:00006E08 ; Segment permissions: Read/Execute
.text$x:00006E08 _text$x         segment para public 'CODE' use32
.text$x:00006E08                 assume cs:_text$x
.text$x:00006E08                 ;org 6E08h
.text$x:00006E08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006E08
.text$x:00006E08 ; =============== S U B R O U T I N E =======================================
.text$x:00006E08
.text$x:00006E08
.text$x:00006E08 __unwindfunclet$?GetFilterGroup@CAnalysis@N7z@NArchive@@QAEJIABUCUpdateItem@23@AAUCFilterMode@23@@Z$0 proc near
.text$x:00006E08                                         ; DATA XREF: .xdata$x:00007048o
.text$x:00006E08                 lea     ecx, [ebp-3Ch]
.text$x:00006E0B                 jmp     ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text$x:00006E0B __unwindfunclet$?GetFilterGroup@CAnalysis@N7z@NArchive@@QAEJIABUCUpdateItem@23@AAUCFilterMode@23@@Z$0 endp
.text$x:00006E0B
.text$x:00006E10
.text$x:00006E10 ; =============== S U B R O U T I N E =======================================
.text$x:00006E10
.text$x:00006E10
.text$x:00006E10 __ehhandler$?GetFilterGroup@CAnalysis@N7z@NArchive@@QAEJIABUCUpdateItem@23@AAUCFilterMode@23@@Z proc near
.text$x:00006E10                                         ; DATA XREF: NArchive::N7z::CAnalysis::GetFilterGroup(uint,NArchive::N7z::CUpdateItem const &,NArchive::N7z::CFilterMode &)+5o
.text$x:00006E10
.text$x:00006E10 arg_4           = dword ptr  8
.text$x:00006E10
.text$x:00006E10                 mov     edx, [esp+arg_4]
.text$x:00006E14                 lea     eax, [edx+0Ch]
.text$x:00006E17                 mov     ecx, [edx-64h]
.text$x:00006E1A                 xor     ecx, eax
.text$x:00006E1C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006E21                 mov     eax, offset __ehfuncinfo$?GetFilterGroup@CAnalysis@N7z@NArchive@@QAEJIABUCUpdateItem@23@AAUCFilterMode@23@@Z
.text$x:00006E26                 jmp     ___CxxFrameHandler3
.text$x:00006E26 __ehhandler$?GetFilterGroup@CAnalysis@N7z@NArchive@@QAEJIABUCUpdateItem@23@AAUCFilterMode@23@@Z endp
.text$x:00006E26
.text$x:00006E2B
.text$x:00006E2B ; =============== S U B R O U T I N E =======================================
.text$x:00006E2B
.text$x:00006E2B
.text$x:00006E2B __unwindfunclet$?Execute@CThreadDecoder@N7z@NArchive@@UAEXXZ$2 proc near
.text$x:00006E2B                                         ; DATA XREF: .xdata$x:000070A0o
.text$x:00006E2B                 lea     ecx, [ebp-3Ch]  ; this
.text$x:00006E2E                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00006E2E __unwindfunclet$?Execute@CThreadDecoder@N7z@NArchive@@UAEXXZ$2 endp
.text$x:00006E2E
.text$x:00006E33
.text$x:00006E33 ; =============== S U B R O U T I N E =======================================
.text$x:00006E33
.text$x:00006E33
.text$x:00006E33 __ehhandler$?Execute@CThreadDecoder@N7z@NArchive@@UAEXXZ proc near
.text$x:00006E33                                         ; DATA XREF: NArchive::N7z::CThreadDecoder::Execute(void)+5o
.text$x:00006E33
.text$x:00006E33 arg_4           = dword ptr  8
.text$x:00006E33
.text$x:00006E33                 mov     edx, [esp+arg_4]
.text$x:00006E37                 lea     eax, [edx+0Ch]
.text$x:00006E3A                 mov     ecx, [edx-58h]
.text$x:00006E3D                 xor     ecx, eax
.text$x:00006E3F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006E44                 mov     eax, offset __ehfuncinfo$?Execute@CThreadDecoder@N7z@NArchive@@UAEXXZ
.text$x:00006E49                 jmp     ___CxxFrameHandler3
.text$x:00006E49 __ehhandler$?Execute@CThreadDecoder@N7z@NArchive@@UAEXXZ endp
.text$x:00006E49
.text$x:00006E4E
.text$x:00006E4E ; =============== S U B R O U T I N E =======================================
.text$x:00006E4E
.text$x:00006E4E
.text$x:00006E4E __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$0 proc near
.text$x:00006E4E                                         ; DATA XREF: .xdata$x:000070F8o
.text$x:00006E4E                 lea     ecx, [ebp-20h]
.text$x:00006E51                 jmp     ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text$x:00006E51 __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$0 endp
.text$x:00006E51
.text$x:00006E56
.text$x:00006E56 ; =============== S U B R O U T I N E =======================================
.text$x:00006E56
.text$x:00006E56
.text$x:00006E56 __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$1 proc near
.text$x:00006E56                                         ; DATA XREF: .xdata$x:00007100o
.text$x:00006E56                 lea     ecx, [ebp-2Ch]
.text$x:00006E59                 jmp     ??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>(void)
.text$x:00006E59 __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$1 endp
.text$x:00006E59
.text$x:00006E5E
.text$x:00006E5E ; =============== S U B R O U T I N E =======================================
.text$x:00006E5E
.text$x:00006E5E
.text$x:00006E5E __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$2 proc near
.text$x:00006E5E                                         ; DATA XREF: .xdata$x:00007108o
.text$x:00006E5E                 lea     ecx, [ebp-44h]
.text$x:00006E61                 jmp     ??1?$CObjArray@H@@QAE@XZ ; CObjArray<int>::~CObjArray<int>(void)
.text$x:00006E61 __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$2 endp
.text$x:00006E61
.text$x:00006E66
.text$x:00006E66 ; =============== S U B R O U T I N E =======================================
.text$x:00006E66
.text$x:00006E66
.text$x:00006E66 __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$3 proc near
.text$x:00006E66                                         ; DATA XREF: .xdata$x:00007110o
.text$x:00006E66                 lea     ecx, [ebp-6Ch]
.text$x:00006E69                 jmp     ??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>(void)
.text$x:00006E69 __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$3 endp
.text$x:00006E69
.text$x:00006E6E
.text$x:00006E6E ; =============== S U B R O U T I N E =======================================
.text$x:00006E6E
.text$x:00006E6E
.text$x:00006E6E __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$4 proc near
.text$x:00006E6E                                         ; DATA XREF: .xdata$x:00007118o
.text$x:00006E6E                 lea     ecx, [ebp-80h]
.text$x:00006E71                 jmp     ??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>(void)
.text$x:00006E71 __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$4 endp
.text$x:00006E71
.text$x:00006E76
.text$x:00006E76 ; =============== S U B R O U T I N E =======================================
.text$x:00006E76
.text$x:00006E76
.text$x:00006E76 __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$5 proc near
.text$x:00006E76                                         ; DATA XREF: .xdata$x:00007120o
.text$x:00006E76                 lea     ecx, [ebp-0E0h] ; this
.text$x:00006E7C                 jmp     ??1CFolderEx@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFolderEx::~CFolderEx(void)
.text$x:00006E7C __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$5 endp
.text$x:00006E7C
.text$x:00006E81
.text$x:00006E81 ; =============== S U B R O U T I N E =======================================
.text$x:00006E81
.text$x:00006E81
.text$x:00006E81 __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$6 proc near
.text$x:00006E81                                         ; DATA XREF: .xdata$x:00007128o
.text$x:00006E81                 mov     eax, [ebp-6BCh]
.text$x:00006E87                 push    eax             ; void *
.text$x:00006E88                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00006E8D                 pop     ecx
.text$x:00006E8E                 retn
.text$x:00006E8E __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$6 endp
.text$x:00006E8E
.text$x:00006E8F
.text$x:00006E8F ; =============== S U B R O U T I N E =======================================
.text$x:00006E8F
.text$x:00006E8F
.text$x:00006E8F __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$7 proc near
.text$x:00006E8F                                         ; DATA XREF: .xdata$x:00007130o
.text$x:00006E8F                 lea     ecx, [ebp-114h]
.text$x:00006E95                 jmp     ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text$x:00006E95 __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$7 endp
.text$x:00006E95
.text$x:00006E9A
.text$x:00006E9A ; =============== S U B R O U T I N E =======================================
.text$x:00006E9A
.text$x:00006E9A
.text$x:00006E9A __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$8 proc near
.text$x:00006E9A                                         ; DATA XREF: .xdata$x:00007138o
.text$x:00006E9A                 lea     ecx, [ebp-13Ch] ; this
.text$x:00006EA0                 jmp     ??1CStreamBinder@@QAE@XZ ; CStreamBinder::~CStreamBinder(void)
.text$x:00006EA0 __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$8 endp
.text$x:00006EA0
.text$x:00006EA5
.text$x:00006EA5 ; =============== S U B R O U T I N E =======================================
.text$x:00006EA5
.text$x:00006EA5
.text$x:00006EA5 __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$9 proc near
.text$x:00006EA5                                         ; DATA XREF: .xdata$x:00007140o
.text$x:00006EA5                 lea     ecx, [ebp-1F0h] ; this
.text$x:00006EAB                 jmp     ??1CThreadDecoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CThreadDecoder::~CThreadDecoder(void)
.text$x:00006EAB __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$9 endp
.text$x:00006EAB
.text$x:00006EB0
.text$x:00006EB0 ; =============== S U B R O U T I N E =======================================
.text$x:00006EB0
.text$x:00006EB0
.text$x:00006EB0 __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$10 proc near
.text$x:00006EB0                                         ; DATA XREF: .xdata$x:00007148o
.text$x:00006EB0                 lea     ecx, [ebp-20Ch] ; this
.text$x:00006EB6                 jmp     ??1CAnalysis@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CAnalysis::~CAnalysis(void)
.text$x:00006EB6 __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$10 endp
.text$x:00006EB6
.text$x:00006EBB
.text$x:00006EBB ; =============== S U B R O U T I N E =======================================
.text$x:00006EBB
.text$x:00006EBB
.text$x:00006EBB __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$11 proc near
.text$x:00006EBB                                         ; DATA XREF: .xdata$x:00007150o
.text$x:00006EBB                 lea     ecx, [ebp-248h]
.text$x:00006EC1                 jmp     ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)
.text$x:00006EC1 __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$11 endp
.text$x:00006EC1
.text$x:00006EC6
.text$x:00006EC6 ; =============== S U B R O U T I N E =======================================
.text$x:00006EC6
.text$x:00006EC6
.text$x:00006EC6 __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$12 proc near
.text$x:00006EC6                                         ; DATA XREF: .xdata$x:00007158o
.text$x:00006EC6                 mov     eax, [ebp-6D0h]
.text$x:00006ECC                 push    eax             ; void *
.text$x:00006ECD                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00006ED2                 pop     ecx
.text$x:00006ED3                 retn
.text$x:00006ED3 __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$12 endp
.text$x:00006ED3
.text$x:00006ED4
.text$x:00006ED4 ; =============== S U B R O U T I N E =======================================
.text$x:00006ED4
.text$x:00006ED4
.text$x:00006ED4 __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$13 proc near
.text$x:00006ED4                                         ; DATA XREF: .xdata$x:00007160o
.text$x:00006ED4                 lea     ecx, [ebp-254h] ; this
.text$x:00006EDA                 jmp     ??1CMyComBSTR@@QAE@XZ ; CMyComBSTR::~CMyComBSTR(void)
.text$x:00006EDA __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$13 endp
.text$x:00006EDA
.text$x:00006EDF
.text$x:00006EDF ; =============== S U B R O U T I N E =======================================
.text$x:00006EDF
.text$x:00006EDF
.text$x:00006EDF __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$14 proc near
.text$x:00006EDF                                         ; DATA XREF: .xdata$x:00007168o
.text$x:00006EDF                 lea     ecx, [ebp-274h]
.text$x:00006EE5                 jmp     ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text$x:00006EE5 __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$14 endp
.text$x:00006EE5
.text$x:00006EEA
.text$x:00006EEA ; =============== S U B R O U T I N E =======================================
.text$x:00006EEA
.text$x:00006EEA
.text$x:00006EEA __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$15 proc near
.text$x:00006EEA                                         ; DATA XREF: .xdata$x:00007170o
.text$x:00006EEA                 lea     ecx, [ebp-2E0h] ; this
.text$x:00006EF0                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00006EF0 __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$15 endp
.text$x:00006EF0
.text$x:00006EF5
.text$x:00006EF5 ; =============== S U B R O U T I N E =======================================
.text$x:00006EF5
.text$x:00006EF5
.text$x:00006EF5 __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$16 proc near
.text$x:00006EF5                                         ; DATA XREF: .xdata$x:00007178o
.text$x:00006EF5                 lea     ecx, [ebp-324h] ; this
.text$x:00006EFB                 jmp     ??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(void)
.text$x:00006EFB __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$16 endp
.text$x:00006EFB
.text$x:00006F00
.text$x:00006F00 ; =============== S U B R O U T I N E =======================================
.text$x:00006F00
.text$x:00006F00
.text$x:00006F00 __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$17 proc near
.text$x:00006F00                                         ; DATA XREF: .xdata$x:00007180o
.text$x:00006F00                 lea     ecx, [ebp-3E8h] ; this
.text$x:00006F06                 jmp     ??1CEncoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CEncoder::~CEncoder(void)
.text$x:00006F06 __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$17 endp
.text$x:00006F06
.text$x:00006F0B
.text$x:00006F0B ; =============== S U B R O U T I N E =======================================
.text$x:00006F0B
.text$x:00006F0B
.text$x:00006F0B __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$18 proc near
.text$x:00006F0B                                         ; DATA XREF: .xdata$x:00007188o
.text$x:00006F0B                 lea     ecx, [ebp-440h]
.text$x:00006F11                 jmp     ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text$x:00006F11 __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$18 endp
.text$x:00006F11
.text$x:00006F16
.text$x:00006F16 ; =============== S U B R O U T I N E =======================================
.text$x:00006F16
.text$x:00006F16
.text$x:00006F16 __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$19 proc near
.text$x:00006F16                                         ; DATA XREF: .xdata$x:00007190o
.text$x:00006F16                 lea     ecx, [ebp-480h]
.text$x:00006F1C                 jmp     ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text$x:00006F1C __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$19 endp
.text$x:00006F1C
.text$x:00006F21
.text$x:00006F21 ; =============== S U B R O U T I N E =======================================
.text$x:00006F21
.text$x:00006F21
.text$x:00006F21 __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$20 proc near
.text$x:00006F21                                         ; DATA XREF: .xdata$x:00007198o
.text$x:00006F21                 mov     eax, [ebp-6FCh]
.text$x:00006F27                 push    eax             ; void *
.text$x:00006F28                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00006F2D                 pop     ecx
.text$x:00006F2E                 retn
.text$x:00006F2E __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$20 endp
.text$x:00006F2E
.text$x:00006F2F
.text$x:00006F2F ; =============== S U B R O U T I N E =======================================
.text$x:00006F2F
.text$x:00006F2F
.text$x:00006F2F __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$21 proc near
.text$x:00006F2F                                         ; DATA XREF: .xdata$x:000071A0o
.text$x:00006F2F                 lea     ecx, [ebp-498h]
.text$x:00006F35                 jmp     ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text$x:00006F35 __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$21 endp
.text$x:00006F35
.text$x:00006F3A
.text$x:00006F3A ; =============== S U B R O U T I N E =======================================
.text$x:00006F3A
.text$x:00006F3A
.text$x:00006F3A __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$22 proc near
.text$x:00006F3A                                         ; DATA XREF: .xdata$x:000071A8o
.text$x:00006F3A                 lea     ecx, [ebp-4A4h]
.text$x:00006F40                 jmp     ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text$x:00006F40 __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$22 endp
.text$x:00006F40
.text$x:00006F45
.text$x:00006F45 ; =============== S U B R O U T I N E =======================================
.text$x:00006F45
.text$x:00006F45
.text$x:00006F45 __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$23 proc near
.text$x:00006F45                                         ; DATA XREF: .xdata$x:000071B0o
.text$x:00006F45                 mov     eax, [ebp-704h]
.text$x:00006F4B                 push    eax             ; void *
.text$x:00006F4C                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00006F51                 pop     ecx
.text$x:00006F52                 retn
.text$x:00006F52 __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$23 endp
.text$x:00006F52
.text$x:00006F53
.text$x:00006F53 ; =============== S U B R O U T I N E =======================================
.text$x:00006F53
.text$x:00006F53
.text$x:00006F53 __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$24 proc near
.text$x:00006F53                                         ; DATA XREF: .xdata$x:000071B8o
.text$x:00006F53                 lea     ecx, [ebp-4D0h] ; this
.text$x:00006F59                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00006F59 __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$24 endp
.text$x:00006F59
.text$x:00006F5E
.text$x:00006F5E ; =============== S U B R O U T I N E =======================================
.text$x:00006F5E
.text$x:00006F5E
.text$x:00006F5E __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$25 proc near
.text$x:00006F5E                                         ; DATA XREF: .xdata$x:000071C0o
.text$x:00006F5E                 lea     ecx, [ebp-4DCh]
.text$x:00006F64                 jmp     ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text$x:00006F64 __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$25 endp
.text$x:00006F64
.text$x:00006F69
.text$x:00006F69 ; =============== S U B R O U T I N E =======================================
.text$x:00006F69
.text$x:00006F69
.text$x:00006F69 __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$26 proc near
.text$x:00006F69                                         ; DATA XREF: .xdata$x:000071C8o
.text$x:00006F69                 lea     ecx, [ebp-578h] ; this
.text$x:00006F6F                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00006F6F __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$26 endp
.text$x:00006F6F
.text$x:00006F74
.text$x:00006F74 ; =============== S U B R O U T I N E =======================================
.text$x:00006F74
.text$x:00006F74
.text$x:00006F74 __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$27 proc near
.text$x:00006F74                                         ; DATA XREF: .xdata$x:000071D0o
.text$x:00006F74                 lea     ecx, [ebp-5B8h]
.text$x:00006F7A                 jmp     ??1?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CRefItem>::~CRecordVector<NArchive::N7z::CRefItem>(void)
.text$x:00006F7A __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$27 endp
.text$x:00006F7A
.text$x:00006F7F
.text$x:00006F7F ; =============== S U B R O U T I N E =======================================
.text$x:00006F7F
.text$x:00006F7F
.text$x:00006F7F __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$28 proc near
.text$x:00006F7F                                         ; DATA XREF: .xdata$x:000071D8o
.text$x:00006F7F                 lea     ecx, [ebp-5D4h]
.text$x:00006F85                 jmp     ??1?$CObjArray@I@@QAE@XZ ; CObjArray<uint>::~CObjArray<uint>(void)
.text$x:00006F85 __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$28 endp
.text$x:00006F85
.text$x:00006F8A
.text$x:00006F8A ; =============== S U B R O U T I N E =======================================
.text$x:00006F8A
.text$x:00006F8A
.text$x:00006F8A __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$29 proc near
.text$x:00006F8A                                         ; DATA XREF: .xdata$x:000071E0o
.text$x:00006F8A                 mov     eax, [ebp-758h]
.text$x:00006F90                 push    eax             ; void *
.text$x:00006F91                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00006F96                 pop     ecx
.text$x:00006F97                 retn
.text$x:00006F97 __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$29 endp
.text$x:00006F97
.text$x:00006F98
.text$x:00006F98 ; =============== S U B R O U T I N E =======================================
.text$x:00006F98
.text$x:00006F98
.text$x:00006F98 __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$30 proc near
.text$x:00006F98                                         ; DATA XREF: .xdata$x:000071E8o
.text$x:00006F98                 lea     ecx, [ebp-60Ch]
.text$x:00006F9E                 jmp     ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text$x:00006F9E __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$30 endp
.text$x:00006F9E
.text$x:00006FA3
.text$x:00006FA3 ; =============== S U B R O U T I N E =======================================
.text$x:00006FA3
.text$x:00006FA3
.text$x:00006FA3 __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$31 proc near
.text$x:00006FA3                                         ; DATA XREF: .xdata$x:000071F0o
.text$x:00006FA3                 lea     ecx, [ebp-69Ch] ; this
.text$x:00006FA9                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00006FA9 __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$31 endp
.text$x:00006FA9
.text$x:00006FAE
.text$x:00006FAE ; =============== S U B R O U T I N E =======================================
.text$x:00006FAE
.text$x:00006FAE
.text$x:00006FAE __ehhandler$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z proc near
.text$x:00006FAE                                         ; DATA XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+5o
.text$x:00006FAE
.text$x:00006FAE arg_4           = dword ptr  8
.text$x:00006FAE
.text$x:00006FAE                 mov     edx, [esp+arg_4]
.text$x:00006FB2                 lea     eax, [edx+0Ch]
.text$x:00006FB5                 mov     ecx, [edx-7CCh]
.text$x:00006FBB                 xor     ecx, eax
.text$x:00006FBD                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006FC2                 mov     ecx, [edx-4]
.text$x:00006FC5                 xor     ecx, eax
.text$x:00006FC7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006FCC                 mov     eax, offset __ehfuncinfo$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z
.text$x:00006FD1                 jmp     ___CxxFrameHandler3
.text$x:00006FD1 __ehhandler$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z endp
.text$x:00006FD1
.text$x:00006FD6
.text$x:00006FD6 ; =============== S U B R O U T I N E =======================================
.text$x:00006FD6
.text$x:00006FD6
.text$x:00006FD6 __unwindfunclet$?WriteRange@N7z@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@_K2PAUICompressProgressInfo@@@Z$0 proc near
.text$x:00006FD6                                         ; DATA XREF: .xdata$x:000071F8o
.text$x:00006FD6                 mov     eax, [ebp-3Ch]
.text$x:00006FD9                 push    eax             ; void *
.text$x:00006FDA                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00006FDF                 pop     ecx
.text$x:00006FE0                 retn
.text$x:00006FE0 __unwindfunclet$?WriteRange@N7z@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@_K2PAUICompressProgressInfo@@@Z$0 endp
.text$x:00006FE0
.text$x:00006FE1
.text$x:00006FE1 ; =============== S U B R O U T I N E =======================================
.text$x:00006FE1
.text$x:00006FE1
.text$x:00006FE1 __unwindfunclet$?WriteRange@N7z@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@_K2PAUICompressProgressInfo@@@Z$1 proc near
.text$x:00006FE1                                         ; DATA XREF: .xdata$x:00007200o
.text$x:00006FE1                 lea     ecx, [ebp-1Ch]
.text$x:00006FE4                 jmp     ??1?$CMyComPtr@VCLimitedSequentialInStream@@@@QAE@XZ ; CMyComPtr<CLimitedSequentialInStream>::~CMyComPtr<CLimitedSequentialInStream>(void)
.text$x:00006FE4 __unwindfunclet$?WriteRange@N7z@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@_K2PAUICompressProgressInfo@@@Z$1 endp
.text$x:00006FE4
.text$x:00006FE9
.text$x:00006FE9 ; =============== S U B R O U T I N E =======================================
.text$x:00006FE9
.text$x:00006FE9
.text$x:00006FE9 __unwindfunclet$?WriteRange@N7z@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@_K2PAUICompressProgressInfo@@@Z$2 proc near
.text$x:00006FE9                                         ; DATA XREF: .xdata$x:00007208o
.text$x:00006FE9                 mov     eax, [ebp-44h]
.text$x:00006FEC                 push    eax             ; void *
.text$x:00006FED                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00006FF2                 pop     ecx
.text$x:00006FF3                 retn
.text$x:00006FF3 __unwindfunclet$?WriteRange@N7z@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@_K2PAUICompressProgressInfo@@@Z$2 endp
.text$x:00006FF3
.text$x:00006FF4
.text$x:00006FF4 ; =============== S U B R O U T I N E =======================================
.text$x:00006FF4
.text$x:00006FF4
.text$x:00006FF4 __unwindfunclet$?WriteRange@N7z@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@_K2PAUICompressProgressInfo@@@Z$3 proc near
.text$x:00006FF4                                         ; DATA XREF: .xdata$x:00007210o
.text$x:00006FF4                 lea     ecx, [ebp-2Ch]
.text$x:00006FF7                 jmp     ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text$x:00006FF7 __unwindfunclet$?WriteRange@N7z@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@_K2PAUICompressProgressInfo@@@Z$3 endp
.text$x:00006FF7
.text$x:00006FFC
.text$x:00006FFC ; =============== S U B R O U T I N E =======================================
.text$x:00006FFC
.text$x:00006FFC
.text$x:00006FFC __ehhandler$?WriteRange@N7z@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@_K2PAUICompressProgressInfo@@@Z proc near
.text$x:00006FFC                                         ; DATA XREF: NArchive::N7z::WriteRange(IInStream *,ISequentialOutStream *,unsigned __int64,unsigned __int64,ICompressProgressInfo *)+5o
.text$x:00006FFC
.text$x:00006FFC arg_4           = dword ptr  8
.text$x:00006FFC
.text$x:00006FFC                 mov     edx, [esp+arg_4]
.text$x:00007000                 lea     eax, [edx+0Ch]
.text$x:00007003                 mov     ecx, [edx-60h]
.text$x:00007006                 xor     ecx, eax
.text$x:00007008                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000700D                 mov     eax, offset __ehfuncinfo$?WriteRange@N7z@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@_K2PAUICompressProgressInfo@@@Z
.text$x:00007012                 jmp     ___CxxFrameHandler3
.text$x:00007012 __ehhandler$?WriteRange@N7z@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@_K2PAUICompressProgressInfo@@@Z endp
.text$x:00007012
.text$x:00007017
.text$x:00007017 ; =============== S U B R O U T I N E =======================================
.text$x:00007017
.text$x:00007017
.text$x:00007017 __unwindfunclet$?AddBcj2Methods@N7z@NArchive@@YGJAAUCCompressionMethodMode@12@@Z$0 proc near
.text$x:00007017                                         ; DATA XREF: .xdata$x:0000723Co
.text$x:00007017                 lea     ecx, [ebp-34h]  ; this
.text$x:0000701A                 jmp     ??1CMethodFull@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CMethodFull::~CMethodFull(void)
.text$x:0000701A __unwindfunclet$?AddBcj2Methods@N7z@NArchive@@YGJAAUCCompressionMethodMode@12@@Z$0 endp
.text$x:0000701A
.text$x:0000701F
.text$x:0000701F ; =============== S U B R O U T I N E =======================================
.text$x:0000701F
.text$x:0000701F
.text$x:0000701F __ehhandler$?AddBcj2Methods@N7z@NArchive@@YGJAAUCCompressionMethodMode@12@@Z proc near
.text$x:0000701F                                         ; DATA XREF: NArchive::N7z::AddBcj2Methods(NArchive::N7z::CCompressionMethodMode &)+5o
.text$x:0000701F
.text$x:0000701F arg_4           = dword ptr  8
.text$x:0000701F
.text$x:0000701F                 mov     edx, [esp+arg_4]
.text$x:00007023                 lea     eax, [edx+0Ch]
.text$x:00007026                 mov     ecx, [edx-74h]
.text$x:00007029                 xor     ecx, eax
.text$x:0000702B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007030                 mov     ecx, [edx-4]
.text$x:00007033                 xor     ecx, eax
.text$x:00007035                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000703A                 mov     eax, offset __ehfuncinfo$?AddBcj2Methods@N7z@NArchive@@YGJAAUCCompressionMethodMode@12@@Z
.text$x:0000703F                 jmp     ___CxxFrameHandler3
.text$x:0000703F __ehhandler$?AddBcj2Methods@N7z@NArchive@@YGJAAUCCompressionMethodMode@12@@Z endp
.text$x:0000703F
.text$x:0000703F _text$x         ends
.text$x:0000703F
.xdata$x:00007044 ; ===========================================================================
.xdata$x:00007044
.xdata$x:00007044 ; Segment type: Pure data
.xdata$x:00007044 ; Segment permissions: Read
.xdata$x:00007044 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007044                 assume cs:_xdata$x
.xdata$x:00007044                 ;org 7044h
.xdata$x:00007044 __unwindtable$?GetFilterGroup@CAnalysis@N7z@NArchive@@QAEJIABUCUpdateItem@23@AAUCFilterMode@23@@Z db 0FFh
.xdata$x:00007044                                         ; DATA XREF: .xdata$x:00007054o
.xdata$x:00007045                 db 0FFh
.xdata$x:00007046                 db 0FFh
.xdata$x:00007047                 db 0FFh
.xdata$x:00007048                 dd offset __unwindfunclet$?GetFilterGroup@CAnalysis@N7z@NArchive@@QAEJIABUCUpdateItem@23@AAUCFilterMode@23@@Z$0
.xdata$x:0000704C __ehfuncinfo$?GetFilterGroup@CAnalysis@N7z@NArchive@@QAEJIABUCUpdateItem@23@AAUCFilterMode@23@@Z db  22h ; "
.xdata$x:0000704C                                         ; DATA XREF: __ehhandler$?GetFilterGroup@CAnalysis@N7z@NArchive@@QAEJIABUCUpdateItem@23@AAUCFilterMode@23@@Z+11o
.xdata$x:0000704D                 db    5
.xdata$x:0000704E                 db  93h ; ô
.xdata$x:0000704F                 db  19h
.xdata$x:00007050                 db    1
.xdata$x:00007051                 db    0
.xdata$x:00007052                 db    0
.xdata$x:00007053                 db    0
.xdata$x:00007054                 dd offset __unwindtable$?GetFilterGroup@CAnalysis@N7z@NArchive@@QAEJIABUCUpdateItem@23@AAUCFilterMode@23@@Z
.xdata$x:00007058                 db    0
.xdata$x:00007059                 db    0
.xdata$x:0000705A                 db    0
.xdata$x:0000705B                 db    0
.xdata$x:0000705C                 db    0
.xdata$x:0000705D                 db    0
.xdata$x:0000705E                 db    0
.xdata$x:0000705F                 db    0
.xdata$x:00007060                 db    0
.xdata$x:00007061                 db    0
.xdata$x:00007062                 db    0
.xdata$x:00007063                 db    0
.xdata$x:00007064                 db    0
.xdata$x:00007065                 db    0
.xdata$x:00007066                 db    0
.xdata$x:00007067                 db    0
.xdata$x:00007068                 db    0
.xdata$x:00007069                 db    0
.xdata$x:0000706A                 db    0
.xdata$x:0000706B                 db    0
.xdata$x:0000706C                 db    1
.xdata$x:0000706D                 db    0
.xdata$x:0000706E                 db    0
.xdata$x:0000706F                 db    0
.xdata$x:00007070 __catchsym$?Execute@CThreadDecoder@N7z@NArchive@@UAEXXZ$3 dd offset $SG75624+40h
.xdata$x:00007070                                         ; DATA XREF: .xdata$x:00007090o
.xdata$x:00007070                                         ; "bz2 tgz cab ha lha lzh rar zoo zip jar "...
.xdata$x:00007074                 db    0
.xdata$x:00007075                 db    0
.xdata$x:00007076                 db    0
.xdata$x:00007077                 db    0
.xdata$x:00007078                 db    0
.xdata$x:00007079                 db    0
.xdata$x:0000707A                 db    0
.xdata$x:0000707B                 db    0
.xdata$x:0000707C                 dd offset __catch$?Execute@CThreadDecoder@N7z@NArchive@@UAEXXZ$0
.xdata$x:00007080 __tryblocktable$?Execute@CThreadDecoder@N7z@NArchive@@UAEXXZ db    0
.xdata$x:00007080                                         ; DATA XREF: .xdata$x:000070BCo
.xdata$x:00007081                 db    0
.xdata$x:00007082                 db    0
.xdata$x:00007083                 db    0
.xdata$x:00007084                 db    1
.xdata$x:00007085                 db    0
.xdata$x:00007086                 db    0
.xdata$x:00007087                 db    0
.xdata$x:00007088                 db    2
.xdata$x:00007089                 db    0
.xdata$x:0000708A                 db    0
.xdata$x:0000708B                 db    0
.xdata$x:0000708C                 db    1
.xdata$x:0000708D                 db    0
.xdata$x:0000708E                 db    0
.xdata$x:0000708F                 db    0
.xdata$x:00007090                 dd offset __catchsym$?Execute@CThreadDecoder@N7z@NArchive@@UAEXXZ$3
.xdata$x:00007094 __unwindtable$?Execute@CThreadDecoder@N7z@NArchive@@UAEXXZ db 0FFh
.xdata$x:00007094                                         ; DATA XREF: .xdata$x:000070B4o
.xdata$x:00007095                 db 0FFh
.xdata$x:00007096                 db 0FFh
.xdata$x:00007097                 db 0FFh
.xdata$x:00007098                 db    0
.xdata$x:00007099                 db    0
.xdata$x:0000709A                 db    0
.xdata$x:0000709B                 db    0
.xdata$x:0000709C                 db    0
.xdata$x:0000709D                 db    0
.xdata$x:0000709E                 db    0
.xdata$x:0000709F                 db    0
.xdata$x:000070A0                 dd offset __unwindfunclet$?Execute@CThreadDecoder@N7z@NArchive@@UAEXXZ$2
.xdata$x:000070A4                 db 0FFh
.xdata$x:000070A5                 db 0FFh
.xdata$x:000070A6                 db 0FFh
.xdata$x:000070A7                 db 0FFh
.xdata$x:000070A8                 db    0
.xdata$x:000070A9                 db    0
.xdata$x:000070AA                 db    0
.xdata$x:000070AB                 db    0
.xdata$x:000070AC __ehfuncinfo$?Execute@CThreadDecoder@N7z@NArchive@@UAEXXZ db  22h ; "
.xdata$x:000070AC                                         ; DATA XREF: __ehhandler$?Execute@CThreadDecoder@N7z@NArchive@@UAEXXZ+11o
.xdata$x:000070AD                 db    5
.xdata$x:000070AE                 db  93h ; ô
.xdata$x:000070AF                 db  19h
.xdata$x:000070B0                 db    3
.xdata$x:000070B1                 db    0
.xdata$x:000070B2                 db    0
.xdata$x:000070B3                 db    0
.xdata$x:000070B4                 dd offset __unwindtable$?Execute@CThreadDecoder@N7z@NArchive@@UAEXXZ
.xdata$x:000070B8                 db    1
.xdata$x:000070B9                 db    0
.xdata$x:000070BA                 db    0
.xdata$x:000070BB                 db    0
.xdata$x:000070BC                 dd offset __tryblocktable$?Execute@CThreadDecoder@N7z@NArchive@@UAEXXZ
.xdata$x:000070C0                 db    0
.xdata$x:000070C1                 db    0
.xdata$x:000070C2                 db    0
.xdata$x:000070C3                 db    0
.xdata$x:000070C4                 db    0
.xdata$x:000070C5                 db    0
.xdata$x:000070C6                 db    0
.xdata$x:000070C7                 db    0
.xdata$x:000070C8                 db    0
.xdata$x:000070C9                 db    0
.xdata$x:000070CA                 db    0
.xdata$x:000070CB                 db    0
.xdata$x:000070CC                 db    1
.xdata$x:000070CD                 db    0
.xdata$x:000070CE                 db    0
.xdata$x:000070CF                 db    0
.xdata$x:000070D0 __ehfuncinfo$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z db  22h ; "
.xdata$x:000070D0                                         ; DATA XREF: __ehhandler$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z+1Eo
.xdata$x:000070D1                 db    5
.xdata$x:000070D2                 db  93h ; ô
.xdata$x:000070D3                 db  19h
.xdata$x:000070D4                 db  20h
.xdata$x:000070D5                 db    0
.xdata$x:000070D6                 db    0
.xdata$x:000070D7                 db    0
.xdata$x:000070D8                 dd offset __unwindtable$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z
.xdata$x:000070DC                 db    0
.xdata$x:000070DD                 db    0
.xdata$x:000070DE                 db    0
.xdata$x:000070DF                 db    0
.xdata$x:000070E0                 db    0
.xdata$x:000070E1                 db    0
.xdata$x:000070E2                 db    0
.xdata$x:000070E3                 db    0
.xdata$x:000070E4                 db    0
.xdata$x:000070E5                 db    0
.xdata$x:000070E6                 db    0
.xdata$x:000070E7                 db    0
.xdata$x:000070E8                 db    0
.xdata$x:000070E9                 db    0
.xdata$x:000070EA                 db    0
.xdata$x:000070EB                 db    0
.xdata$x:000070EC                 db    0
.xdata$x:000070ED                 db    0
.xdata$x:000070EE                 db    0
.xdata$x:000070EF                 db    0
.xdata$x:000070F0                 db    1
.xdata$x:000070F1                 db    0
.xdata$x:000070F2                 db    0
.xdata$x:000070F3                 db    0
.xdata$x:000070F4 __unwindtable$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z db 0FFh
.xdata$x:000070F4                                         ; DATA XREF: .xdata$x:000070D8o
.xdata$x:000070F5                 db 0FFh
.xdata$x:000070F6                 db 0FFh
.xdata$x:000070F7                 db 0FFh
.xdata$x:000070F8                 dd offset __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$0
.xdata$x:000070FC                 align 10h
.xdata$x:00007100                 dd offset __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$1
.xdata$x:00007104                 db    1
.xdata$x:00007105                 db    0
.xdata$x:00007106                 db    0
.xdata$x:00007107                 db    0
.xdata$x:00007108                 dd offset __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$2
.xdata$x:0000710C                 db    2
.xdata$x:0000710D                 db    0
.xdata$x:0000710E                 db    0
.xdata$x:0000710F                 db    0
.xdata$x:00007110                 dd offset __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$3
.xdata$x:00007114                 db    3
.xdata$x:00007115                 db    0
.xdata$x:00007116                 db    0
.xdata$x:00007117                 db    0
.xdata$x:00007118                 dd offset __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$4
.xdata$x:0000711C                 db    4
.xdata$x:0000711D                 db    0
.xdata$x:0000711E                 db    0
.xdata$x:0000711F                 db    0
.xdata$x:00007120                 dd offset __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$5
.xdata$x:00007124                 db    4
.xdata$x:00007125                 db    0
.xdata$x:00007126                 db    0
.xdata$x:00007127                 db    0
.xdata$x:00007128                 dd offset __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$6
.xdata$x:0000712C                 db    4
.xdata$x:0000712D                 db    0
.xdata$x:0000712E                 db    0
.xdata$x:0000712F                 db    0
.xdata$x:00007130                 dd offset __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$7
.xdata$x:00007134                 db    7
.xdata$x:00007135                 db    0
.xdata$x:00007136                 db    0
.xdata$x:00007137                 db    0
.xdata$x:00007138                 dd offset __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$8
.xdata$x:0000713C                 db    8
.xdata$x:0000713D                 db    0
.xdata$x:0000713E                 db    0
.xdata$x:0000713F                 db    0
.xdata$x:00007140                 dd offset __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$9
.xdata$x:00007144                 db    9
.xdata$x:00007145                 db    0
.xdata$x:00007146                 db    0
.xdata$x:00007147                 db    0
.xdata$x:00007148                 dd offset __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$10
.xdata$x:0000714C                 db    9
.xdata$x:0000714D                 db    0
.xdata$x:0000714E                 db    0
.xdata$x:0000714F                 db    0
.xdata$x:00007150                 dd offset __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$11
.xdata$x:00007154                 db  0Bh
.xdata$x:00007155                 db    0
.xdata$x:00007156                 db    0
.xdata$x:00007157                 db    0
.xdata$x:00007158                 dd offset __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$12
.xdata$x:0000715C                 db  0Bh
.xdata$x:0000715D                 db    0
.xdata$x:0000715E                 db    0
.xdata$x:0000715F                 db    0
.xdata$x:00007160                 dd offset __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$13
.xdata$x:00007164                 db  0Bh
.xdata$x:00007165                 db    0
.xdata$x:00007166                 db    0
.xdata$x:00007167                 db    0
.xdata$x:00007168                 dd offset __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$14
.xdata$x:0000716C                 db  0Eh
.xdata$x:0000716D                 db    0
.xdata$x:0000716E                 db    0
.xdata$x:0000716F                 db    0
.xdata$x:00007170                 dd offset __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$15
.xdata$x:00007174                 db  0Bh
.xdata$x:00007175                 db    0
.xdata$x:00007176                 db    0
.xdata$x:00007177                 db    0
.xdata$x:00007178                 dd offset __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$16
.xdata$x:0000717C                 db  10h
.xdata$x:0000717D                 db    0
.xdata$x:0000717E                 db    0
.xdata$x:0000717F                 db    0
.xdata$x:00007180                 dd offset __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$17
.xdata$x:00007184                 db  11h
.xdata$x:00007185                 db    0
.xdata$x:00007186                 db    0
.xdata$x:00007187                 db    0
.xdata$x:00007188                 dd offset __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$18
.xdata$x:0000718C                 db  12h
.xdata$x:0000718D                 db    0
.xdata$x:0000718E                 db    0
.xdata$x:0000718F                 db    0
.xdata$x:00007190                 dd offset __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$19
.xdata$x:00007194                 db  13h
.xdata$x:00007195                 db    0
.xdata$x:00007196                 db    0
.xdata$x:00007197                 db    0
.xdata$x:00007198                 dd offset __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$20
.xdata$x:0000719C                 db  13h
.xdata$x:0000719D                 db    0
.xdata$x:0000719E                 db    0
.xdata$x:0000719F                 db    0
.xdata$x:000071A0                 dd offset __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$21
.xdata$x:000071A4                 db  15h
.xdata$x:000071A5                 db    0
.xdata$x:000071A6                 db    0
.xdata$x:000071A7                 db    0
.xdata$x:000071A8                 dd offset __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$22
.xdata$x:000071AC                 db  15h
.xdata$x:000071AD                 db    0
.xdata$x:000071AE                 db    0
.xdata$x:000071AF                 db    0
.xdata$x:000071B0                 dd offset __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$23
.xdata$x:000071B4                 db  15h
.xdata$x:000071B5                 db    0
.xdata$x:000071B6                 db    0
.xdata$x:000071B7                 db    0
.xdata$x:000071B8                 dd offset __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$24
.xdata$x:000071BC                 db  18h
.xdata$x:000071BD                 db    0
.xdata$x:000071BE                 db    0
.xdata$x:000071BF                 db    0
.xdata$x:000071C0                 dd offset __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$25
.xdata$x:000071C4                 db  11h
.xdata$x:000071C5                 db    0
.xdata$x:000071C6                 db    0
.xdata$x:000071C7                 db    0
.xdata$x:000071C8                 dd offset __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$26
.xdata$x:000071CC                 db  11h
.xdata$x:000071CD                 db    0
.xdata$x:000071CE                 db    0
.xdata$x:000071CF                 db    0
.xdata$x:000071D0                 dd offset __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$27
.xdata$x:000071D4                 db  1Bh
.xdata$x:000071D5                 db    0
.xdata$x:000071D6                 db    0
.xdata$x:000071D7                 db    0
.xdata$x:000071D8                 dd offset __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$28
.xdata$x:000071DC                 db  1Ch
.xdata$x:000071DD                 db    0
.xdata$x:000071DE                 db    0
.xdata$x:000071DF                 db    0
.xdata$x:000071E0                 dd offset __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$29
.xdata$x:000071E4                 db  1Ch
.xdata$x:000071E5                 db    0
.xdata$x:000071E6                 db    0
.xdata$x:000071E7                 db    0
.xdata$x:000071E8                 dd offset __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$30
.xdata$x:000071EC                 db  1Eh
.xdata$x:000071ED                 db    0
.xdata$x:000071EE                 db    0
.xdata$x:000071EF                 db    0
.xdata$x:000071F0                 dd offset __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$31
.xdata$x:000071F4 __unwindtable$?WriteRange@N7z@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@_K2PAUICompressProgressInfo@@@Z db 0FFh
.xdata$x:000071F4                                         ; DATA XREF: .xdata$x:0000721Co
.xdata$x:000071F5                 db 0FFh
.xdata$x:000071F6                 db 0FFh
.xdata$x:000071F7                 db 0FFh
.xdata$x:000071F8                 dd offset __unwindfunclet$?WriteRange@N7z@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@_K2PAUICompressProgressInfo@@@Z$0
.xdata$x:000071FC                 db 0FFh
.xdata$x:000071FD                 db 0FFh
.xdata$x:000071FE                 db 0FFh
.xdata$x:000071FF                 db 0FFh
.xdata$x:00007200                 dd offset __unwindfunclet$?WriteRange@N7z@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@_K2PAUICompressProgressInfo@@@Z$1
.xdata$x:00007204                 db    1
.xdata$x:00007205                 db    0
.xdata$x:00007206                 db    0
.xdata$x:00007207                 db    0
.xdata$x:00007208                 dd offset __unwindfunclet$?WriteRange@N7z@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@_K2PAUICompressProgressInfo@@@Z$2
.xdata$x:0000720C                 db    1
.xdata$x:0000720D                 db    0
.xdata$x:0000720E                 db    0
.xdata$x:0000720F                 db    0
.xdata$x:00007210                 dd offset __unwindfunclet$?WriteRange@N7z@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@_K2PAUICompressProgressInfo@@@Z$3
.xdata$x:00007214 __ehfuncinfo$?WriteRange@N7z@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@_K2PAUICompressProgressInfo@@@Z db  22h ; "
.xdata$x:00007214                                         ; DATA XREF: __ehhandler$?WriteRange@N7z@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@_K2PAUICompressProgressInfo@@@Z+11o
.xdata$x:00007215                 db    5
.xdata$x:00007216                 db  93h ; ô
.xdata$x:00007217                 db  19h
.xdata$x:00007218                 db    4
.xdata$x:00007219                 db    0
.xdata$x:0000721A                 db    0
.xdata$x:0000721B                 db    0
.xdata$x:0000721C                 dd offset __unwindtable$?WriteRange@N7z@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@_K2PAUICompressProgressInfo@@@Z
.xdata$x:00007220                 db    0
.xdata$x:00007221                 db    0
.xdata$x:00007222                 db    0
.xdata$x:00007223                 db    0
.xdata$x:00007224                 db    0
.xdata$x:00007225                 db    0
.xdata$x:00007226                 db    0
.xdata$x:00007227                 db    0
.xdata$x:00007228                 db    0
.xdata$x:00007229                 db    0
.xdata$x:0000722A                 db    0
.xdata$x:0000722B                 db    0
.xdata$x:0000722C                 db    0
.xdata$x:0000722D                 db    0
.xdata$x:0000722E                 db    0
.xdata$x:0000722F                 db    0
.xdata$x:00007230                 db    0
.xdata$x:00007231                 db    0
.xdata$x:00007232                 db    0
.xdata$x:00007233                 db    0
.xdata$x:00007234                 db    1
.xdata$x:00007235                 db    0
.xdata$x:00007236                 db    0
.xdata$x:00007237                 db    0
.xdata$x:00007238 __unwindtable$?AddBcj2Methods@N7z@NArchive@@YGJAAUCCompressionMethodMode@12@@Z db 0FFh
.xdata$x:00007238                                         ; DATA XREF: .xdata$x:00007248o
.xdata$x:00007239                 db 0FFh
.xdata$x:0000723A                 db 0FFh
.xdata$x:0000723B                 db 0FFh
.xdata$x:0000723C                 dd offset __unwindfunclet$?AddBcj2Methods@N7z@NArchive@@YGJAAUCCompressionMethodMode@12@@Z$0
.xdata$x:00007240 __ehfuncinfo$?AddBcj2Methods@N7z@NArchive@@YGJAAUCCompressionMethodMode@12@@Z db  22h ; "
.xdata$x:00007240                                         ; DATA XREF: __ehhandler$?AddBcj2Methods@N7z@NArchive@@YGJAAUCCompressionMethodMode@12@@Z+1Bo
.xdata$x:00007241                 db    5
.xdata$x:00007242                 db  93h ; ô
.xdata$x:00007243                 db  19h
.xdata$x:00007244                 db    1
.xdata$x:00007245                 db    0
.xdata$x:00007246                 db    0
.xdata$x:00007247                 db    0
.xdata$x:00007248                 dd offset __unwindtable$?AddBcj2Methods@N7z@NArchive@@YGJAAUCCompressionMethodMode@12@@Z
.xdata$x:0000724C                 align 20h
.xdata$x:00007260                 db    1
.xdata$x:00007261                 db    0
.xdata$x:00007262                 db    0
.xdata$x:00007263                 db    0
.xdata$x:00007263 _xdata$x        ends
.xdata$x:00007263
.rtc$TMZ:00007264 ; ===========================================================================
.rtc$TMZ:00007264
.rtc$TMZ:00007264 ; Segment type: Pure data
.rtc$TMZ:00007264 ; Segment permissions: Read
.rtc$TMZ:00007264 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00007264                 assume cs:_rtc$TMZ
.rtc$TMZ:00007264                 ;org 7264h
.rtc$TMZ:00007264 ; COMDAT (pick any)
.rtc$TMZ:00007264 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00007264 _rtc$TMZ        ends
.rtc$TMZ:00007264
.rtc$IMZ:00007268 ; ===========================================================================
.rtc$IMZ:00007268
.rtc$IMZ:00007268 ; Segment type: Pure data
.rtc$IMZ:00007268 ; Segment permissions: Read
.rtc$IMZ:00007268 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00007268                 assume cs:_rtc$IMZ
.rtc$IMZ:00007268                 ;org 7268h
.rtc$IMZ:00007268 ; COMDAT (pick any)
.rtc$IMZ:00007268 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00007268 _rtc$IMZ        ends
.rtc$IMZ:00007268
.text:0000726C ; ===========================================================================
.text:0000726C
.text:0000726C ; Segment type: Pure code
.text:0000726C ; Segment permissions: Read/Execute
.text:0000726C _text           segment para public 'CODE' use32
.text:0000726C                 assume cs:_text
.text:0000726C                 ;org 726Ch
.text:0000726C ; COMDAT (pick any)
.text:0000726C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000726C
.text:0000726C ; =============== S U B R O U T I N E =======================================
.text:0000726C
.text:0000726C ; Attributes: bp-based frame
.text:0000726C
.text:0000726C ; const wchar_t *__thiscall UString::Ptr(UString *this, unsigned int)
.text:0000726C                 public ?Ptr@UString@@QBEPB_WI@Z
.text:0000726C ?Ptr@UString@@QBEPB_WI@Z proc near      ; CODE XREF: NArchive::N7z::CAnalysis::GetFilterGroup(uint,NArchive::N7z::CUpdateItem const &,NArchive::N7z::CFilterMode &)+B5p
.text:0000726C                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+32D5p ...
.text:0000726C
.text:0000726C var_4           = dword ptr -4
.text:0000726C arg_0           = dword ptr  8
.text:0000726C
.text:0000726C                 push    ebp
.text:0000726D                 mov     ebp, esp
.text:0000726F                 push    ecx
.text:00007270                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007277                 mov     [ebp+var_4], ecx
.text:0000727A                 mov     eax, [ebp+var_4]
.text:0000727D                 mov     ecx, [eax]
.text:0000727F                 mov     edx, [ebp+arg_0]
.text:00007282                 lea     eax, [ecx+edx*2]
.text:00007285                 mov     esp, ebp
.text:00007287                 pop     ebp
.text:00007288                 retn    4
.text:00007288 ?Ptr@UString@@QBEPB_WI@Z endp
.text:00007288
.text:00007288 ; ---------------------------------------------------------------------------
.text:0000728B                 align 4
.text:0000728B _text           ends
.text:0000728B
.text:0000728C ; ===========================================================================
.text:0000728C
.text:0000728C ; Segment type: Pure code
.text:0000728C ; Segment permissions: Read/Execute
.text:0000728C _text           segment para public 'CODE' use32
.text:0000728C                 assume cs:_text
.text:0000728C                 ;org 728Ch
.text:0000728C ; COMDAT (pick any)
.text:0000728C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000728C
.text:0000728C ; =============== S U B R O U T I N E =======================================
.text:0000728C
.text:0000728C ; Attributes: bp-based frame
.text:0000728C
.text:0000728C ; const wchar_t *__thiscall UString::RightPtr(UString *this, unsigned int)
.text:0000728C                 public ?RightPtr@UString@@QBEPB_WI@Z
.text:0000728C ?RightPtr@UString@@QBEPB_WI@Z proc near ; CODE XREF: NArchive::N7z::CAnalysis::GetFilterGroup(uint,NArchive::N7z::CUpdateItem const &,NArchive::N7z::CFilterMode &)+C7p
.text:0000728C
.text:0000728C var_4           = dword ptr -4
.text:0000728C arg_0           = dword ptr  8
.text:0000728C
.text:0000728C                 push    ebp
.text:0000728D                 mov     ebp, esp
.text:0000728F                 push    ecx
.text:00007290                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007297                 mov     [ebp+var_4], ecx
.text:0000729A                 mov     eax, [ebp+var_4]
.text:0000729D                 mov     ecx, [eax+4]
.text:000072A0                 mov     edx, [ebp+var_4]
.text:000072A3                 mov     eax, [edx]
.text:000072A5                 lea     eax, [eax+ecx*2]
.text:000072A8                 mov     ecx, [ebp+arg_0]
.text:000072AB                 shl     ecx, 1
.text:000072AD                 sub     eax, ecx
.text:000072AF                 mov     esp, ebp
.text:000072B1                 pop     ebp
.text:000072B2                 retn    4
.text:000072B2 ?RightPtr@UString@@QBEPB_WI@Z endp
.text:000072B2
.text:000072B2 ; ---------------------------------------------------------------------------
.text:000072B5                 align 4
.text:000072B5 _text           ends
.text:000072B5
.text:000072B8 ; ===========================================================================
.text:000072B8
.text:000072B8 ; Segment type: Pure code
.text:000072B8 ; Segment permissions: Read/Execute
.text:000072B8 _text           segment para public 'CODE' use32
.text:000072B8                 assume cs:_text
.text:000072B8                 ;org 72B8h
.text:000072B8 ; COMDAT (pick any)
.text:000072B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000072B8
.text:000072B8 ; =============== S U B R O U T I N E =======================================
.text:000072B8
.text:000072B8 ; Attributes: bp-based frame
.text:000072B8
.text:000072B8 ; int __thiscall UString::ReverseFind_Dot(UString *__hidden this)
.text:000072B8                 public ?ReverseFind_Dot@UString@@QBEHXZ
.text:000072B8 ?ReverseFind_Dot@UString@@QBEHXZ proc near
.text:000072B8                                         ; CODE XREF: NArchive::N7z::CAnalysis::GetFilterGroup(uint,NArchive::N7z::CUpdateItem const &,NArchive::N7z::CFilterMode &)+70p
.text:000072B8                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+3287p ...
.text:000072B8
.text:000072B8 var_4           = dword ptr -4
.text:000072B8
.text:000072B8                 push    ebp
.text:000072B9                 mov     ebp, esp
.text:000072BB                 push    ecx
.text:000072BC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000072C3                 mov     [ebp+var_4], ecx
.text:000072C6                 push    2Eh ; '.'       ; wchar_t
.text:000072C8                 mov     ecx, [ebp+var_4] ; this
.text:000072CB                 call    ?ReverseFind@UString@@QBEH_W@Z ; UString::ReverseFind(wchar_t)
.text:000072D0                 add     esp, 4
.text:000072D3                 cmp     ebp, esp
.text:000072D5                 call    __RTC_CheckEsp
.text:000072DA                 mov     esp, ebp
.text:000072DC                 pop     ebp
.text:000072DD                 retn
.text:000072DD ?ReverseFind_Dot@UString@@QBEHXZ endp
.text:000072DD
.text:000072DD ; ---------------------------------------------------------------------------
.text:000072DE                 align 10h
.text:000072DE _text           ends
.text:000072DE
.text:000072E0 ; ===========================================================================
.text:000072E0
.text:000072E0 ; Segment type: Pure code
.text:000072E0 ; Segment permissions: Read/Execute
.text:000072E0 _text           segment para public 'CODE' use32
.text:000072E0                 assume cs:_text
.text:000072E0                 ;org 72E0h
.text:000072E0 ; COMDAT (pick any)
.text:000072E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000072E0
.text:000072E0 ; =============== S U B R O U T I N E =======================================
.text:000072E0
.text:000072E0 ; Attributes: bp-based frame
.text:000072E0
.text:000072E0 ; void __thiscall NArchive::N7z::CFilterMode::SetDelta(NArchive::N7z::CFilterMode *__hidden this)
.text:000072E0                 public ?SetDelta@CFilterMode@N7z@NArchive@@QAEXXZ
.text:000072E0 ?SetDelta@CFilterMode@N7z@NArchive@@QAEXXZ proc near
.text:000072E0                                         ; CODE XREF: NArchive::N7z::CAnalysis::GetFilterGroup(uint,NArchive::N7z::CUpdateItem const &,NArchive::N7z::CFilterMode &)+24Cp
.text:000072E0                                         ; NArchive::N7z::Get_FilterGroup_for_Folder(CRecordVector<NArchive::N7z::CFilterMode2> &,NArchive::N7z::CFolderEx const &)+CFp
.text:000072E0
.text:000072E0 var_4           = dword ptr -4
.text:000072E0
.text:000072E0                 push    ebp
.text:000072E1                 mov     ebp, esp
.text:000072E3                 push    ecx
.text:000072E4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000072EB                 mov     [ebp+var_4], ecx
.text:000072EE                 mov     eax, [ebp+var_4]
.text:000072F1                 cmp     dword ptr [eax], 3030401h
.text:000072F7                 jnz     short loc_7305
.text:000072F9                 mov     ecx, [ebp+var_4]
.text:000072FC                 mov     dword ptr [ecx+4], 10h
.text:00007303                 jmp     short loc_7353
.text:00007305 ; ---------------------------------------------------------------------------
.text:00007305
.text:00007305 loc_7305:                               ; CODE XREF: NArchive::N7z::CFilterMode::SetDelta(void)+17j
.text:00007305                 mov     edx, [ebp+var_4]
.text:00007308                 cmp     dword ptr [edx], 3030501h
.text:0000730E                 jz      short loc_7326
.text:00007310                 mov     eax, [ebp+var_4]
.text:00007313                 cmp     dword ptr [eax], 3030205h
.text:00007319                 jz      short loc_7326
.text:0000731B                 mov     ecx, [ebp+var_4]
.text:0000731E                 cmp     dword ptr [ecx], 3030205h
.text:00007324                 jnz     short loc_7332
.text:00007326
.text:00007326 loc_7326:                               ; CODE XREF: NArchive::N7z::CFilterMode::SetDelta(void)+2Ej
.text:00007326                                         ; NArchive::N7z::CFilterMode::SetDelta(void)+39j
.text:00007326                 mov     edx, [ebp+var_4]
.text:00007329                 mov     dword ptr [edx+4], 4
.text:00007330                 jmp     short loc_7353
.text:00007332 ; ---------------------------------------------------------------------------
.text:00007332
.text:00007332 loc_7332:                               ; CODE XREF: NArchive::N7z::CFilterMode::SetDelta(void)+44j
.text:00007332                 mov     eax, [ebp+var_4]
.text:00007335                 cmp     dword ptr [eax], 3030701h
.text:0000733B                 jnz     short loc_7349
.text:0000733D                 mov     ecx, [ebp+var_4]
.text:00007340                 mov     dword ptr [ecx+4], 2
.text:00007347                 jmp     short loc_7353
.text:00007349 ; ---------------------------------------------------------------------------
.text:00007349
.text:00007349 loc_7349:                               ; CODE XREF: NArchive::N7z::CFilterMode::SetDelta(void)+5Bj
.text:00007349                 mov     edx, [ebp+var_4]
.text:0000734C                 mov     dword ptr [edx+4], 0
.text:00007353
.text:00007353 loc_7353:                               ; CODE XREF: NArchive::N7z::CFilterMode::SetDelta(void)+23j
.text:00007353                                         ; NArchive::N7z::CFilterMode::SetDelta(void)+50j ...
.text:00007353                 mov     esp, ebp
.text:00007355                 pop     ebp
.text:00007356                 retn
.text:00007356 ?SetDelta@CFilterMode@N7z@NArchive@@QAEXXZ endp
.text:00007356
.text:00007356 ; ---------------------------------------------------------------------------
.text:00007357                 align 4
.text:00007357 _text           ends
.text:00007357
.text:00007358 ; ===========================================================================
.text:00007358
.text:00007358 ; Segment type: Pure code
.text:00007358 ; Segment permissions: Read/Execute
.text:00007358 _text           segment para public 'CODE' use32
.text:00007358                 assume cs:_text
.text:00007358                 ;org 7358h
.text:00007358 ; COMDAT (pick any)
.text:00007358                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007358
.text:00007358 ; =============== S U B R O U T I N E =======================================
.text:00007358
.text:00007358 ; Attributes: bp-based frame
.text:00007358
.text:00007358 ; _DWORD __thiscall UString::~UString(UString *__hidden this)
.text:00007358                 public ??1UString@@QAE@XZ
.text:00007358 ??1UString@@QAE@XZ proc near            ; CODE XREF: NArchive::N7z::CThreadDecoder::Execute(void)+104p
.text:00007358                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1131p ...
.text:00007358
.text:00007358 var_8           = dword ptr -8
.text:00007358 var_4           = dword ptr -4
.text:00007358
.text:00007358                 push    ebp
.text:00007359                 mov     ebp, esp
.text:0000735B                 sub     esp, 8
.text:0000735E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00007365                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000736C                 mov     [ebp+var_4], ecx
.text:0000736F                 mov     eax, [ebp+var_4]
.text:00007372                 mov     ecx, [eax]
.text:00007374                 mov     [ebp+var_8], ecx
.text:00007377                 mov     edx, [ebp+var_8]
.text:0000737A                 push    edx             ; void *
.text:0000737B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00007380                 add     esp, 4
.text:00007383                 add     esp, 8
.text:00007386                 cmp     ebp, esp
.text:00007388                 call    __RTC_CheckEsp
.text:0000738D                 mov     esp, ebp
.text:0000738F                 pop     ebp
.text:00007390                 retn
.text:00007390 ??1UString@@QAE@XZ endp
.text:00007390
.text:00007390 ; ---------------------------------------------------------------------------
.text:00007391                 align 4
.text:00007391 _text           ends
.text:00007391
.text:00007394 ; ===========================================================================
.text:00007394
.text:00007394 ; Segment type: Pure code
.text:00007394 ; Segment permissions: Read/Execute
.text:00007394 _text           segment para public 'CODE' use32
.text:00007394                 assume cs:_text
.text:00007394                 ;org 7394h
.text:00007394 ; COMDAT (pick any)
.text:00007394                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007394
.text:00007394 ; =============== S U B R O U T I N E =======================================
.text:00007394
.text:00007394 ; Attributes: bp-based frame
.text:00007394
.text:00007394 ; public: __thiscall UString::operator wchar_t const *(void)const
.text:00007394                 public ??BUString@@QBEPB_WXZ
.text:00007394 ??BUString@@QBEPB_WXZ proc near         ; CODE XREF: NArchive::N7z::CCryptoGetTextPassword::CryptoGetTextPassword(wchar_t * *)+Dp
.text:00007394                                         ; NArchive::N7z::CompareEmptyItems(uint const *,uint const *,void *)+B3p ...
.text:00007394
.text:00007394 var_4           = dword ptr -4
.text:00007394
.text:00007394                 push    ebp
.text:00007395                 mov     ebp, esp
.text:00007397                 push    ecx
.text:00007398                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000739F                 mov     [ebp+var_4], ecx
.text:000073A2                 mov     eax, [ebp+var_4]
.text:000073A5                 mov     eax, [eax]
.text:000073A7                 mov     esp, ebp
.text:000073A9                 pop     ebp
.text:000073AA                 retn
.text:000073AA ??BUString@@QBEPB_WXZ endp
.text:000073AA
.text:000073AA ; ---------------------------------------------------------------------------
.text:000073AB                 align 4
.text:000073AB _text           ends
.text:000073AB
.text:000073AC ; ===========================================================================
.text:000073AC
.text:000073AC ; Segment type: Pure code
.text:000073AC ; Segment permissions: Read/Execute
.text:000073AC _text           segment para public 'CODE' use32
.text:000073AC                 assume cs:_text
.text:000073AC                 ;org 73ACh
.text:000073AC ; COMDAT (pick any)
.text:000073AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000073AC
.text:000073AC ; =============== S U B R O U T I N E =======================================
.text:000073AC
.text:000073AC ; Attributes: bp-based frame
.text:000073AC
.text:000073AC ; __int32 __stdcall StringToBstr(const wchar_t *psz, wchar_t **)
.text:000073AC                 public ?StringToBstr@@YGJPB_WPAPA_W@Z
.text:000073AC ?StringToBstr@@YGJPB_WPAPA_W@Z proc near
.text:000073AC                                         ; CODE XREF: NArchive::N7z::CCryptoGetTextPassword::CryptoGetTextPassword(wchar_t * *)+13p
.text:000073AC
.text:000073AC psz             = dword ptr  8
.text:000073AC arg_4           = dword ptr  0Ch
.text:000073AC
.text:000073AC                 push    ebp
.text:000073AD                 mov     ebp, esp
.text:000073AF                 push    esi
.text:000073B0                 mov     esi, esp
.text:000073B2                 mov     eax, [ebp+psz]
.text:000073B5                 push    eax             ; psz
.text:000073B6                 call    dword ptr ds:__imp__SysAllocString@4 ; SysAllocString(x)
.text:000073BC                 cmp     esi, esp
.text:000073BE                 call    __RTC_CheckEsp
.text:000073C3                 mov     ecx, [ebp+arg_4]
.text:000073C6                 mov     [ecx], eax
.text:000073C8                 mov     edx, [ebp+arg_4]
.text:000073CB                 mov     eax, [edx]
.text:000073CD                 neg     eax
.text:000073CF                 sbb     eax, eax
.text:000073D1                 and     eax, 7FF8FFF2h
.text:000073D6                 add     eax, 8007000Eh
.text:000073DB                 pop     esi
.text:000073DC                 cmp     ebp, esp
.text:000073DE                 call    __RTC_CheckEsp
.text:000073E3                 pop     ebp
.text:000073E4                 retn    8
.text:000073E4 ?StringToBstr@@YGJPB_WPAPA_W@Z endp
.text:000073E4
.text:000073E4 ; ---------------------------------------------------------------------------
.text:000073E7                 align 4
.text:000073E7 _text           ends
.text:000073E7
.text:000073E8 ; ===========================================================================
.text:000073E8
.text:000073E8 ; Segment type: Pure code
.text:000073E8 ; Segment permissions: Read/Execute
.text:000073E8 _text           segment para public 'CODE' use32
.text:000073E8                 assume cs:_text
.text:000073E8                 ;org 73E8h
.text:000073E8 ; COMDAT (pick any)
.text:000073E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000073E8
.text:000073E8 ; =============== S U B R O U T I N E =======================================
.text:000073E8
.text:000073E8 ; Attributes: bp-based frame
.text:000073E8
.text:000073E8 ; unsigned int __thiscall UString::Len(UString *__hidden this)
.text:000073E8                 public ?Len@UString@@QBEIXZ
.text:000073E8 ?Len@UString@@QBEIXZ proc near          ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+32A9p
.text:000073E8                                         ; NArchive::N7z::CRefItem::CRefItem(uint,NArchive::N7z::CUpdateItem const &,bool)+ABp ...
.text:000073E8
.text:000073E8 var_4           = dword ptr -4
.text:000073E8
.text:000073E8                 push    ebp
.text:000073E9                 mov     ebp, esp
.text:000073EB                 push    ecx
.text:000073EC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000073F3                 mov     [ebp+var_4], ecx
.text:000073F6                 mov     eax, [ebp+var_4]
.text:000073F9                 mov     eax, [eax+4]
.text:000073FC                 mov     esp, ebp
.text:000073FE                 pop     ebp
.text:000073FF                 retn
.text:000073FF ?Len@UString@@QBEIXZ endp
.text:000073FF
.text:000073FF _text           ends
.text:000073FF
.text:00007400 ; ===========================================================================
.text:00007400
.text:00007400 ; Segment type: Pure code
.text:00007400 ; Segment permissions: Read/Execute
.text:00007400 _text           segment para public 'CODE' use32
.text:00007400                 assume cs:_text
.text:00007400                 ;org 7400h
.text:00007400 ; COMDAT (pick any)
.text:00007400                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007400
.text:00007400 ; =============== S U B R O U T I N E =======================================
.text:00007400
.text:00007400 ; Attributes: bp-based frame
.text:00007400
.text:00007400 ; void __thiscall UString::Empty(UString *__hidden this)
.text:00007400                 public ?Empty@UString@@QAEXXZ
.text:00007400 ?Empty@UString@@QAEXXZ proc near        ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1352p
.text:00007400
.text:00007400 var_4           = dword ptr -4
.text:00007400
.text:00007400                 push    ebp
.text:00007401                 mov     ebp, esp
.text:00007403                 push    ecx
.text:00007404                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000740B                 mov     [ebp+var_4], ecx
.text:0000740E                 mov     eax, [ebp+var_4]
.text:00007411                 mov     dword ptr [eax+4], 0
.text:00007418                 mov     ecx, [ebp+var_4]
.text:0000741B                 mov     edx, [ecx]
.text:0000741D                 xor     eax, eax
.text:0000741F                 mov     [edx], ax
.text:00007422                 mov     esp, ebp
.text:00007424                 pop     ebp
.text:00007425                 retn
.text:00007425 ?Empty@UString@@QAEXXZ endp
.text:00007425
.text:00007425 ; ---------------------------------------------------------------------------
.text:00007426                 align 4
.text:00007426 _text           ends
.text:00007426
.text:00007428 ; ===========================================================================
.text:00007428
.text:00007428 ; Segment type: Pure code
.text:00007428 ; Segment permissions: Read/Execute
.text:00007428 _text           segment para public 'CODE' use32
.text:00007428                 assume cs:_text
.text:00007428                 ;org 7428h
.text:00007428 ; COMDAT (pick any)
.text:00007428                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007428
.text:00007428 ; =============== S U B R O U T I N E =======================================
.text:00007428
.text:00007428 ; Attributes: bp-based frame
.text:00007428
.text:00007428 ; _DWORD __thiscall CMyComBSTR::CMyComBSTR(CMyComBSTR *__hidden this)
.text:00007428                 public ??0CMyComBSTR@@QAE@XZ
.text:00007428 ??0CMyComBSTR@@QAE@XZ proc near         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+CE2p
.text:00007428
.text:00007428 var_4           = dword ptr -4
.text:00007428
.text:00007428                 push    ebp
.text:00007429                 mov     ebp, esp
.text:0000742B                 push    ecx
.text:0000742C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007433                 mov     [ebp+var_4], ecx
.text:00007436                 mov     eax, [ebp+var_4]
.text:00007439                 mov     dword ptr [eax], 0
.text:0000743F                 mov     eax, [ebp+var_4]
.text:00007442                 mov     esp, ebp
.text:00007444                 pop     ebp
.text:00007445                 retn
.text:00007445 ??0CMyComBSTR@@QAE@XZ endp
.text:00007445
.text:00007445 ; ---------------------------------------------------------------------------
.text:00007446                 align 4
.text:00007446 _text           ends
.text:00007446
.text:00007448 ; ===========================================================================
.text:00007448
.text:00007448 ; Segment type: Pure code
.text:00007448 ; Segment permissions: Read/Execute
.text:00007448 _text           segment para public 'CODE' use32
.text:00007448                 assume cs:_text
.text:00007448                 ;org 7448h
.text:00007448 ; COMDAT (pick any)
.text:00007448                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007448
.text:00007448 ; =============== S U B R O U T I N E =======================================
.text:00007448
.text:00007448 ; Attributes: bp-based frame
.text:00007448
.text:00007448 ; _DWORD __thiscall CMyComBSTR::~CMyComBSTR(CMyComBSTR *__hidden this)
.text:00007448                 public ??1CMyComBSTR@@QAE@XZ
.text:00007448 ??1CMyComBSTR@@QAE@XZ proc near         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+D37p
.text:00007448                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+DF5p ...
.text:00007448
.text:00007448 var_4           = dword ptr -4
.text:00007448
.text:00007448                 push    ebp
.text:00007449                 mov     ebp, esp
.text:0000744B                 push    ecx
.text:0000744C                 push    esi
.text:0000744D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007454                 mov     [ebp+var_4], ecx
.text:00007457                 mov     esi, esp
.text:00007459                 mov     eax, [ebp+var_4]
.text:0000745C                 mov     ecx, [eax]
.text:0000745E                 push    ecx             ; bstrString
.text:0000745F                 call    dword ptr ds:__imp__SysFreeString@4 ; SysFreeString(x)
.text:00007465                 cmp     esi, esp
.text:00007467                 call    __RTC_CheckEsp
.text:0000746C                 pop     esi
.text:0000746D                 add     esp, 4
.text:00007470                 cmp     ebp, esp
.text:00007472                 call    __RTC_CheckEsp
.text:00007477                 mov     esp, ebp
.text:00007479                 pop     ebp
.text:0000747A                 retn
.text:0000747A ??1CMyComBSTR@@QAE@XZ endp
.text:0000747A
.text:0000747A ; ---------------------------------------------------------------------------
.text:0000747B                 align 4
.text:0000747B _text           ends
.text:0000747B
.text:0000747C ; ===========================================================================
.text:0000747C
.text:0000747C ; Segment type: Pure code
.text:0000747C ; Segment permissions: Read/Execute
.text:0000747C _text           segment para public 'CODE' use32
.text:0000747C                 assume cs:_text
.text:0000747C                 ;org 747Ch
.text:0000747C ; COMDAT (pick any)
.text:0000747C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000747C
.text:0000747C ; =============== S U B R O U T I N E =======================================
.text:0000747C
.text:0000747C ; Attributes: bp-based frame
.text:0000747C
.text:0000747C ; public: wchar_t * * __thiscall CMyComBSTR::operator&(void)
.text:0000747C                 public ??ICMyComBSTR@@QAEPAPA_WXZ
.text:0000747C ??ICMyComBSTR@@QAEPAPA_WXZ proc near    ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+CF1p
.text:0000747C
.text:0000747C var_4           = dword ptr -4
.text:0000747C
.text:0000747C                 push    ebp
.text:0000747D                 mov     ebp, esp
.text:0000747F                 push    ecx
.text:00007480                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007487                 mov     [ebp+var_4], ecx
.text:0000748A                 mov     eax, [ebp+var_4]
.text:0000748D                 mov     esp, ebp
.text:0000748F                 pop     ebp
.text:00007490                 retn
.text:00007490 ??ICMyComBSTR@@QAEPAPA_WXZ endp
.text:00007490
.text:00007490 ; ---------------------------------------------------------------------------
.text:00007491                 align 4
.text:00007491 _text           ends
.text:00007491
.text:00007494 ; ===========================================================================
.text:00007494
.text:00007494 ; Segment type: Pure code
.text:00007494 ; Segment permissions: Read/Execute
.text:00007494 _text           segment para public 'CODE' use32
.text:00007494                 assume cs:_text
.text:00007494                 ;org 7494h
.text:00007494 ; COMDAT (pick any)
.text:00007494                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007494
.text:00007494 ; =============== S U B R O U T I N E =======================================
.text:00007494
.text:00007494 ; Attributes: bp-based frame
.text:00007494
.text:00007494 ; public: __thiscall CMyComBSTR::operator wchar_t const *(void)const
.text:00007494                 public ??BCMyComBSTR@@QBEPB_WXZ
.text:00007494 ??BCMyComBSTR@@QBEPB_WXZ proc near      ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+DC8p
.text:00007494                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+DD7p
.text:00007494
.text:00007494 var_4           = dword ptr -4
.text:00007494
.text:00007494                 push    ebp
.text:00007495                 mov     ebp, esp
.text:00007497                 push    ecx
.text:00007498                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000749F                 mov     [ebp+var_4], ecx
.text:000074A2                 mov     eax, [ebp+var_4]
.text:000074A5                 mov     eax, [eax]
.text:000074A7                 mov     esp, ebp
.text:000074A9                 pop     ebp
.text:000074AA                 retn
.text:000074AA ??BCMyComBSTR@@QBEPB_WXZ endp
.text:000074AA
.text:000074AA ; ---------------------------------------------------------------------------
.text:000074AB                 align 4
.text:000074AB _text           ends
.text:000074AB
.text:000074AC ; ===========================================================================
.text:000074AC
.text:000074AC ; Segment type: Pure code
.text:000074AC ; Segment permissions: Read/Execute
.text:000074AC _text           segment para public 'CODE' use32
.text:000074AC                 assume cs:_text
.text:000074AC                 ;org 74ACh
.text:000074AC ; COMDAT (pick any)
.text:000074AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000074AC
.text:000074AC ; =============== S U B R O U T I N E =======================================
.text:000074AC
.text:000074AC ; Attributes: bp-based frame
.text:000074AC
.text:000074AC ; void __thiscall CVirtThread::WaitExecuteFinish(CVirtThread *__hidden this)
.text:000074AC                 public ?WaitExecuteFinish@CVirtThread@@QAEXXZ
.text:000074AC ?WaitExecuteFinish@CVirtThread@@QAEXXZ proc near
.text:000074AC                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+2330p
.text:000074AC
.text:000074AC var_4           = dword ptr -4
.text:000074AC
.text:000074AC                 push    ebp
.text:000074AD                 mov     ebp, esp
.text:000074AF                 push    ecx
.text:000074B0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000074B7                 mov     [ebp+var_4], ecx
.text:000074BA                 mov     ecx, [ebp+var_4]
.text:000074BD                 add     ecx, 8          ; this
.text:000074C0                 call    ?Lock@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Lock(void)
.text:000074C5                 add     esp, 4
.text:000074C8                 cmp     ebp, esp
.text:000074CA                 call    __RTC_CheckEsp
.text:000074CF                 mov     esp, ebp
.text:000074D1                 pop     ebp
.text:000074D2                 retn
.text:000074D2 ?WaitExecuteFinish@CVirtThread@@QAEXXZ endp
.text:000074D2
.text:000074D2 ; ---------------------------------------------------------------------------
.text:000074D3                 align 4
.text:000074D3 _text           ends
.text:000074D3
.text:000074D4 ; ===========================================================================
.text:000074D4
.text:000074D4 ; Segment type: Pure code
.text:000074D4 ; Segment permissions: Read/Execute
.text:000074D4 _text           segment para public 'CODE' use32
.text:000074D4                 assume cs:_text
.text:000074D4                 ;org 74D4h
.text:000074D4 ; COMDAT (pick any)
.text:000074D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000074D4
.text:000074D4 ; =============== S U B R O U T I N E =======================================
.text:000074D4
.text:000074D4 ; Attributes: bp-based frame
.text:000074D4
.text:000074D4 ; unsigned int __thiscall NWindows::NSynchronization::CBaseEvent::Lock(NWindows::NSynchronization::CBaseEvent *__hidden this)
.text:000074D4                 public ?Lock@CBaseEvent@NSynchronization@NWindows@@QAEIXZ
.text:000074D4 ?Lock@CBaseEvent@NSynchronization@NWindows@@QAEIXZ proc near
.text:000074D4                                         ; CODE XREF: CVirtThread::WaitExecuteFinish(void)+14p
.text:000074D4
.text:000074D4 var_4           = dword ptr -4
.text:000074D4
.text:000074D4                 push    ebp
.text:000074D5                 mov     ebp, esp
.text:000074D7                 push    ecx
.text:000074D8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000074DF                 mov     [ebp+var_4], ecx
.text:000074E2                 mov     eax, [ebp+var_4]
.text:000074E5                 mov     ecx, [eax]
.text:000074E7                 push    ecx
.text:000074E8                 call    _Handle_WaitObject@4 ; Handle_WaitObject(x)
.text:000074ED                 add     esp, 4
.text:000074F0                 cmp     ebp, esp
.text:000074F2                 call    __RTC_CheckEsp
.text:000074F7                 mov     esp, ebp
.text:000074F9                 pop     ebp
.text:000074FA                 retn
.text:000074FA ?Lock@CBaseEvent@NSynchronization@NWindows@@QAEIXZ endp
.text:000074FA
.text:000074FA ; ---------------------------------------------------------------------------
.text:000074FB                 align 4
.text:000074FB _text           ends
.text:000074FB
.text:000074FC ; ===========================================================================
.text:000074FC
.text:000074FC ; Segment type: Pure code
.text:000074FC ; Segment permissions: Read/Execute
.text:000074FC _text           segment para public 'CODE' use32
.text:000074FC                 assume cs:_text
.text:000074FC                 ;org 74FCh
.text:000074FC ; COMDAT (pick any)
.text:000074FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000074FC
.text:000074FC ; =============== S U B R O U T I N E =======================================
.text:000074FC
.text:000074FC ; Attributes: bp-based frame
.text:000074FC
.text:000074FC ; bool __thiscall NArchive::N7z::CFolder::IsEncrypted(NArchive::N7z::CFolder *__hidden this)
.text:000074FC                 public ?IsEncrypted@CFolder@N7z@NArchive@@QBE_NXZ
.text:000074FC ?IsEncrypted@CFolder@N7z@NArchive@@QBE_NXZ proc near
.text:000074FC                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+42Fp
.text:000074FC                                         ; NArchive::N7z::Get_FilterGroup_for_Folder(CRecordVector<NArchive::N7z::CFilterMode2> &,NArchive::N7z::CFolderEx const &)+3Cp
.text:000074FC
.text:000074FC var_10          = dword ptr -10h
.text:000074FC var_C           = dword ptr -0Ch
.text:000074FC var_8           = dword ptr -8
.text:000074FC var_4           = dword ptr -4
.text:000074FC
.text:000074FC                 push    ebp
.text:000074FD                 mov     ebp, esp
.text:000074FF                 sub     esp, 10h
.text:00007502                 mov     eax, 0CCCCCCCCh
.text:00007507                 mov     [ebp+var_10], eax
.text:0000750A                 mov     [ebp+var_C], eax
.text:0000750D                 mov     [ebp+var_8], eax
.text:00007510                 mov     [ebp+var_4], eax
.text:00007513                 mov     [ebp+var_4], ecx
.text:00007516                 mov     [ebp+var_8], 0
.text:0000751D                 jmp     short loc_7528
.text:0000751F ; ---------------------------------------------------------------------------
.text:0000751F
.text:0000751F loc_751F:                               ; CODE XREF: NArchive::N7z::CFolder::IsEncrypted(void):loc_7569j
.text:0000751F                 mov     eax, [ebp+var_8]
.text:00007522                 add     eax, 1
.text:00007525                 mov     [ebp+var_8], eax
.text:00007528
.text:00007528 loc_7528:                               ; CODE XREF: NArchive::N7z::CFolder::IsEncrypted(void)+21j
.text:00007528                 mov     ecx, [ebp+var_4]
.text:0000752B                 call    ?Size@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEIXZ ; CObjArray2<NArchive::N7z::CCoderInfo>::Size(void)
.text:00007530                 cmp     [ebp+var_8], eax
.text:00007533                 jnb     short loc_756B
.text:00007535                 mov     ecx, [ebp+var_4]
.text:00007538                 call    ??B?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEPBUCCoderInfo@N7z@NArchive@@XZ ; CObjArray2<NArchive::N7z::CCoderInfo>::operator NArchive::N7z::CCoderInfo const *(void)
.text:0000753D                 mov     ecx, [ebp+var_8]
.text:00007540                 imul    ecx, 18h
.text:00007543                 mov     [ebp+var_C], eax
.text:00007546                 mov     [ebp+var_10], ecx
.text:00007549                 mov     edx, [ebp+var_10]
.text:0000754C                 mov     eax, [ebp+var_C]
.text:0000754F                 cmp     dword ptr [eax+edx], 6F10701h
.text:00007556                 jnz     short loc_7569
.text:00007558                 mov     ecx, [ebp+var_10]
.text:0000755B                 mov     edx, [ebp+var_C]
.text:0000755E                 cmp     dword ptr [edx+ecx+4], 0
.text:00007563                 jnz     short loc_7569
.text:00007565                 mov     al, 1
.text:00007567                 jmp     short loc_756D
.text:00007569 ; ---------------------------------------------------------------------------
.text:00007569
.text:00007569 loc_7569:                               ; CODE XREF: NArchive::N7z::CFolder::IsEncrypted(void)+5Aj
.text:00007569                                         ; NArchive::N7z::CFolder::IsEncrypted(void)+67j
.text:00007569                 jmp     short loc_751F
.text:0000756B ; ---------------------------------------------------------------------------
.text:0000756B
.text:0000756B loc_756B:                               ; CODE XREF: NArchive::N7z::CFolder::IsEncrypted(void)+37j
.text:0000756B                 xor     al, al
.text:0000756D
.text:0000756D loc_756D:                               ; CODE XREF: NArchive::N7z::CFolder::IsEncrypted(void)+6Bj
.text:0000756D                 add     esp, 10h
.text:00007570                 cmp     ebp, esp
.text:00007572                 call    __RTC_CheckEsp
.text:00007577                 mov     esp, ebp
.text:00007579                 pop     ebp
.text:0000757A                 retn
.text:0000757A ?IsEncrypted@CFolder@N7z@NArchive@@QBE_NXZ endp
.text:0000757A
.text:0000757A ; ---------------------------------------------------------------------------
.text:0000757B                 align 4
.text:0000757B _text           ends
.text:0000757B
.text:0000757C ; ===========================================================================
.text:0000757C
.text:0000757C ; Segment type: Pure code
.text:0000757C ; Segment permissions: Read/Execute
.text:0000757C _text           segment para public 'CODE' use32
.text:0000757C                 assume cs:_text
.text:0000757C                 ;org 757Ch
.text:0000757C ; COMDAT (pick any)
.text:0000757C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000757C
.text:0000757C ; =============== S U B R O U T I N E =======================================
.text:0000757C
.text:0000757C ; Attributes: bp-based frame
.text:0000757C
.text:0000757C ; _DWORD __thiscall NArchive::N7z::CFileItem::CFileItem(NArchive::N7z::CFileItem *__hidden this)
.text:0000757C                 public ??0CFileItem@N7z@NArchive@@QAE@XZ
.text:0000757C ??0CFileItem@N7z@NArchive@@QAE@XZ proc near
.text:0000757C                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+107Fp
.text:0000757C                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+2DABp ...
.text:0000757C
.text:0000757C var_4           = dword ptr -4
.text:0000757C
.text:0000757C                 push    ebp
.text:0000757D                 mov     ebp, esp
.text:0000757F                 push    ecx
.text:00007580                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007587                 mov     [ebp+var_4], ecx
.text:0000758A                 mov     eax, [ebp+var_4]
.text:0000758D                 mov     byte ptr [eax+10h], 1
.text:00007591                 mov     ecx, [ebp+var_4]
.text:00007594                 mov     byte ptr [ecx+11h], 0
.text:00007598                 mov     edx, [ebp+var_4]
.text:0000759B                 mov     byte ptr [edx+12h], 0
.text:0000759F                 mov     eax, [ebp+var_4]
.text:000075A2                 mov     byte ptr [eax+13h], 0
.text:000075A6                 mov     eax, [ebp+var_4]
.text:000075A9                 mov     esp, ebp
.text:000075AB                 pop     ebp
.text:000075AC                 retn
.text:000075AC ??0CFileItem@N7z@NArchive@@QAE@XZ endp
.text:000075AC
.text:000075AC ; ---------------------------------------------------------------------------
.text:000075AD                 align 10h
.text:000075AD _text           ends
.text:000075AD
.text:000075B0 ; ===========================================================================
.text:000075B0
.text:000075B0 ; Segment type: Pure code
.text:000075B0 ; Segment permissions: Read/Execute
.text:000075B0 _text           segment para public 'CODE' use32
.text:000075B0                 assume cs:_text
.text:000075B0                 ;org 75B0h
.text:000075B0 ; COMDAT (pick any)
.text:000075B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000075B0
.text:000075B0 ; =============== S U B R O U T I N E =======================================
.text:000075B0
.text:000075B0 ; Attributes: bp-based frame
.text:000075B0
.text:000075B0 ; void __thiscall NArchive::N7z::CFolders::ParseFolderEx(NArchive::N7z::CFolders *this, unsigned int, struct NArchive::N7z::CFolderEx *)
.text:000075B0                 public ?ParseFolderEx@CFolders@N7z@NArchive@@QBEXIAAUCFolderEx@23@@Z
.text:000075B0 ?ParseFolderEx@CFolders@N7z@NArchive@@QBEXIAAUCFolderEx@23@@Z proc near
.text:000075B0                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+424p
.text:000075B0
.text:000075B0 var_4           = dword ptr -4
.text:000075B0 arg_0           = dword ptr  8
.text:000075B0 arg_4           = dword ptr  0Ch
.text:000075B0
.text:000075B0                 push    ebp
.text:000075B1                 mov     ebp, esp
.text:000075B3                 push    ecx
.text:000075B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000075BB                 mov     [ebp+var_4], ecx
.text:000075BE                 mov     eax, [ebp+arg_4]
.text:000075C1                 push    eax             ; struct NArchive::N7z::CFolder *
.text:000075C2                 mov     ecx, [ebp+arg_0]
.text:000075C5                 push    ecx             ; unsigned int
.text:000075C6                 mov     ecx, [ebp+var_4] ; this
.text:000075C9                 call    ?ParseFolderInfo@CFolders@N7z@NArchive@@QBEXIAAUCFolder@23@@Z ; NArchive::N7z::CFolders::ParseFolderInfo(uint,NArchive::N7z::CFolder &)
.text:000075CE                 mov     ecx, [ebp+var_4]
.text:000075D1                 add     ecx, 34h ; '4'
.text:000075D4                 call    ??B?$CObjArray@E@@QBEPBEXZ ; CObjArray<uchar>::operator uchar const *(void)
.text:000075D9                 mov     edx, [ebp+arg_0]
.text:000075DC                 movzx   eax, byte ptr [eax+edx]
.text:000075E0                 mov     ecx, [ebp+arg_4]
.text:000075E3                 mov     [ecx+18h], eax
.text:000075E6                 add     esp, 4
.text:000075E9                 cmp     ebp, esp
.text:000075EB                 call    __RTC_CheckEsp
.text:000075F0                 mov     esp, ebp
.text:000075F2                 pop     ebp
.text:000075F3                 retn    8
.text:000075F3 ?ParseFolderEx@CFolders@N7z@NArchive@@QBEXIAAUCFolderEx@23@@Z endp
.text:000075F3
.text:000075F3 ; ---------------------------------------------------------------------------
.text:000075F6                 align 4
.text:000075F6 _text           ends
.text:000075F6
.text:000075F8 ; ===========================================================================
.text:000075F8
.text:000075F8 ; Segment type: Pure code
.text:000075F8 ; Segment permissions: Read/Execute
.text:000075F8 _text           segment para public 'CODE' use32
.text:000075F8                 assume cs:_text
.text:000075F8                 ;org 75F8h
.text:000075F8 ; COMDAT (pick any)
.text:000075F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000075F8
.text:000075F8 ; =============== S U B R O U T I N E =======================================
.text:000075F8
.text:000075F8 ; Attributes: bp-based frame
.text:000075F8
.text:000075F8 ; unsigned __int64 __thiscall NArchive::N7z::CFolders::GetStreamPackSize(NArchive::N7z::CFolders *this, unsigned int)
.text:000075F8                 public ?GetStreamPackSize@CFolders@N7z@NArchive@@QBE_KI@Z
.text:000075F8 ?GetStreamPackSize@CFolders@N7z@NArchive@@QBE_KI@Z proc near
.text:000075F8                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1856p
.text:000075F8
.text:000075F8 var_4           = dword ptr -4
.text:000075F8 arg_0           = dword ptr  8
.text:000075F8
.text:000075F8                 push    ebp
.text:000075F9                 mov     ebp, esp
.text:000075FB                 push    ecx
.text:000075FC                 push    esi
.text:000075FD                 push    edi
.text:000075FE                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007605                 mov     [ebp+var_4], ecx
.text:00007608                 mov     ecx, [ebp+var_4]
.text:0000760B                 add     ecx, 8
.text:0000760E                 call    ??B?$CObjArray@_K@@QBEPB_KXZ ; CObjArray<unsigned __int64>::operator unsigned __int64 const *(void)
.text:00007613                 mov     esi, eax
.text:00007615                 mov     ecx, [ebp+var_4]
.text:00007618                 add     ecx, 8
.text:0000761B                 call    ??B?$CObjArray@_K@@QBEPB_KXZ ; CObjArray<unsigned __int64>::operator unsigned __int64 const *(void)
.text:00007620                 mov     ecx, [ebp+arg_0]
.text:00007623                 mov     edx, [ebp+arg_0]
.text:00007626                 mov     edi, [esi+ecx*8+8]
.text:0000762A                 sub     edi, [eax+edx*8]
.text:0000762D                 mov     ecx, [esi+ecx*8+0Ch]
.text:00007631                 sbb     ecx, [eax+edx*8+4]
.text:00007635                 mov     eax, edi
.text:00007637                 mov     edx, ecx
.text:00007639                 pop     edi
.text:0000763A                 pop     esi
.text:0000763B                 add     esp, 4
.text:0000763E                 cmp     ebp, esp
.text:00007640                 call    __RTC_CheckEsp
.text:00007645                 mov     esp, ebp
.text:00007647                 pop     ebp
.text:00007648                 retn    4
.text:00007648 ?GetStreamPackSize@CFolders@N7z@NArchive@@QBE_KI@Z endp
.text:00007648
.text:00007648 ; ---------------------------------------------------------------------------
.text:0000764B                 align 4
.text:0000764B _text           ends
.text:0000764B
.text:0000764C ; ===========================================================================
.text:0000764C
.text:0000764C ; Segment type: Pure code
.text:0000764C ; Segment permissions: Read/Execute
.text:0000764C _text           segment para public 'CODE' use32
.text:0000764C                 assume cs:_text
.text:0000764C                 ;org 764Ch
.text:0000764C ; COMDAT (pick any)
.text:0000764C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000764C
.text:0000764C ; =============== S U B R O U T I N E =======================================
.text:0000764C
.text:0000764C ; Attributes: bp-based frame
.text:0000764C
.text:0000764C ; unsigned __int64 __thiscall NArchive::N7z::CDbEx::GetFolderStreamPos(NArchive::N7z::CDbEx *this, unsigned int, unsigned int)
.text:0000764C                 public ?GetFolderStreamPos@CDbEx@N7z@NArchive@@QBE_KII@Z
.text:0000764C ?GetFolderStreamPos@CDbEx@N7z@NArchive@@QBE_KII@Z proc near
.text:0000764C                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+16D1p
.text:0000764C
.text:0000764C var_4           = dword ptr -4
.text:0000764C arg_0           = dword ptr  8
.text:0000764C arg_4           = dword ptr  0Ch
.text:0000764C
.text:0000764C                 push    ebp
.text:0000764D                 mov     ebp, esp
.text:0000764F                 push    ecx
.text:00007650                 push    esi
.text:00007651                 push    edi
.text:00007652                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007659                 mov     [ebp+var_4], ecx
.text:0000765C                 mov     ecx, [ebp+var_4]
.text:0000765F                 add     ecx, 8
.text:00007662                 call    ??B?$CObjArray@_K@@QBEPB_KXZ ; CObjArray<unsigned __int64>::operator unsigned __int64 const *(void)
.text:00007667                 mov     esi, eax
.text:00007669                 mov     ecx, [ebp+var_4]
.text:0000766C                 add     ecx, 30h ; '0'
.text:0000766F                 call    ??B?$CObjArray@I@@QBEPBIXZ ; CObjArray<uint>::operator uint const *(void)
.text:00007674                 mov     ecx, [ebp+arg_0]
.text:00007677                 mov     edx, [eax+ecx*4]
.text:0000767A                 add     edx, [ebp+arg_4]
.text:0000767D                 mov     eax, [ebp+var_4]
.text:00007680                 mov     ecx, [eax+0F8h]
.text:00007686                 add     ecx, [esi+edx*8]
.text:00007689                 mov     edi, [eax+0FCh]
.text:0000768F                 adc     edi, [esi+edx*8+4]
.text:00007693                 mov     eax, ecx
.text:00007695                 mov     edx, edi
.text:00007697                 pop     edi
.text:00007698                 pop     esi
.text:00007699                 add     esp, 4
.text:0000769C                 cmp     ebp, esp
.text:0000769E                 call    __RTC_CheckEsp
.text:000076A3                 mov     esp, ebp
.text:000076A5                 pop     ebp
.text:000076A6                 retn    8
.text:000076A6 ?GetFolderStreamPos@CDbEx@N7z@NArchive@@QBE_KII@Z endp
.text:000076A6
.text:000076A6 ; ---------------------------------------------------------------------------
.text:000076A9                 align 4
.text:000076A9 _text           ends
.text:000076A9
.text:000076AC ; ===========================================================================
.text:000076AC
.text:000076AC ; Segment type: Pure code
.text:000076AC ; Segment permissions: Read/Execute
.text:000076AC _text           segment para public 'CODE' use32
.text:000076AC                 assume cs:_text
.text:000076AC                 ;org 76ACh
.text:000076AC ; COMDAT (pick any)
.text:000076AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000076AC
.text:000076AC ; =============== S U B R O U T I N E =======================================
.text:000076AC
.text:000076AC ; Attributes: bp-based frame
.text:000076AC
.text:000076AC ; unsigned __int64 __thiscall NArchive::N7z::CDbEx::GetFolderFullPackSize(NArchive::N7z::CDbEx *this, unsigned int)
.text:000076AC                 public ?GetFolderFullPackSize@CDbEx@N7z@NArchive@@QBE_KI@Z
.text:000076AC ?GetFolderFullPackSize@CDbEx@N7z@NArchive@@QBE_KI@Z proc near
.text:000076AC                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+4A9p
.text:000076AC                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+169Ap
.text:000076AC
.text:000076AC var_4           = dword ptr -4
.text:000076AC arg_0           = dword ptr  8
.text:000076AC
.text:000076AC                 push    ebp
.text:000076AD                 mov     ebp, esp
.text:000076AF                 push    ecx
.text:000076B0                 push    ebx
.text:000076B1                 push    esi
.text:000076B2                 push    edi
.text:000076B3                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000076BA                 mov     [ebp+var_4], ecx
.text:000076BD                 mov     ecx, [ebp+var_4]
.text:000076C0                 add     ecx, 8
.text:000076C3                 call    ??B?$CObjArray@_K@@QBEPB_KXZ ; CObjArray<unsigned __int64>::operator unsigned __int64 const *(void)
.text:000076C8                 mov     esi, eax
.text:000076CA                 mov     ecx, [ebp+var_4]
.text:000076CD                 add     ecx, 30h ; '0'
.text:000076D0                 call    ??B?$CObjArray@I@@QBEPBIXZ ; CObjArray<uint>::operator uint const *(void)
.text:000076D5                 mov     ecx, [ebp+arg_0]
.text:000076D8                 mov     edi, [eax+ecx*4+4]
.text:000076DC                 mov     ecx, [ebp+var_4]
.text:000076DF                 add     ecx, 8
.text:000076E2                 call    ??B?$CObjArray@_K@@QBEPB_KXZ ; CObjArray<unsigned __int64>::operator unsigned __int64 const *(void)
.text:000076E7                 mov     ebx, eax
.text:000076E9                 mov     ecx, [ebp+var_4]
.text:000076EC                 add     ecx, 30h ; '0'
.text:000076EF                 call    ??B?$CObjArray@I@@QBEPBIXZ ; CObjArray<uint>::operator uint const *(void)
.text:000076F4                 mov     edx, [ebp+arg_0]
.text:000076F7                 mov     eax, [eax+edx*4]
.text:000076FA                 mov     ecx, [esi+edi*8]
.text:000076FD                 sub     ecx, [ebx+eax*8]
.text:00007700                 mov     edx, [esi+edi*8+4]
.text:00007704                 sbb     edx, [ebx+eax*8+4]
.text:00007708                 mov     eax, ecx
.text:0000770A                 pop     edi
.text:0000770B                 pop     esi
.text:0000770C                 pop     ebx
.text:0000770D                 add     esp, 4
.text:00007710                 cmp     ebp, esp
.text:00007712                 call    __RTC_CheckEsp
.text:00007717                 mov     esp, ebp
.text:00007719                 pop     ebp
.text:0000771A                 retn    4
.text:0000771A ?GetFolderFullPackSize@CDbEx@N7z@NArchive@@QBE_KI@Z endp
.text:0000771A
.text:0000771A ; ---------------------------------------------------------------------------
.text:0000771D                 align 10h
.text:0000771D _text           ends
.text:0000771D
.text:00007720 ; ===========================================================================
.text:00007720
.text:00007720 ; Segment type: Pure code
.text:00007720 ; Segment permissions: Read/Execute
.text:00007720 _text           segment para public 'CODE' use32
.text:00007720                 assume cs:_text
.text:00007720                 ;org 7720h
.text:00007720 ; COMDAT (pick any)
.text:00007720                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007720
.text:00007720 ; =============== S U B R O U T I N E =======================================
.text:00007720
.text:00007720 ; Attributes: bp-based frame
.text:00007720
.text:00007720 ; bool __thiscall NArchive::N7z::CFolderInStream::WasFinished(NArchive::N7z::CFolderInStream *__hidden this)
.text:00007720                 public ?WasFinished@CFolderInStream@N7z@NArchive@@QBE_NXZ
.text:00007720 ?WasFinished@CFolderInStream@N7z@NArchive@@QBE_NXZ proc near
.text:00007720                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+360Cp
.text:00007720
.text:00007720 var_4           = dword ptr -4
.text:00007720
.text:00007720                 push    ebp
.text:00007721                 mov     ebp, esp
.text:00007723                 push    ecx
.text:00007724                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000772B                 mov     [ebp+var_4], ecx
.text:0000772E                 mov     eax, [ebp+var_4]
.text:00007731                 mov     ecx, [ebp+var_4]
.text:00007734                 mov     edx, [eax+30h]
.text:00007737                 xor     eax, eax
.text:00007739                 cmp     edx, [ecx+2Ch]
.text:0000773C                 setz    al
.text:0000773F                 mov     esp, ebp
.text:00007741                 pop     ebp
.text:00007742                 retn
.text:00007742 ?WasFinished@CFolderInStream@N7z@NArchive@@QBE_NXZ endp
.text:00007742
.text:00007742 ; ---------------------------------------------------------------------------
.text:00007743                 align 4
.text:00007743 _text           ends
.text:00007743
.text:00007744 ; ===========================================================================
.text:00007744
.text:00007744 ; Segment type: Pure code
.text:00007744 ; Segment permissions: Read/Execute
.text:00007744 _text           segment para public 'CODE' use32
.text:00007744                 assume cs:_text
.text:00007744                 ;org 7744h
.text:00007744 ; COMDAT (pick any)
.text:00007744                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007744
.text:00007744 ; =============== S U B R O U T I N E =======================================
.text:00007744
.text:00007744 ; Attributes: bp-based frame
.text:00007744
.text:00007744 ; void __thiscall NArchive::N7z::CArchiveDatabaseOut::ReserveDown(NArchive::N7z::CArchiveDatabaseOut *__hidden this)
.text:00007744                 public ?ReserveDown@CArchiveDatabaseOut@N7z@NArchive@@QAEXXZ
.text:00007744 ?ReserveDown@CArchiveDatabaseOut@N7z@NArchive@@QAEXXZ proc near
.text:00007744                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+3D01p
.text:00007744
.text:00007744 var_4           = dword ptr -4
.text:00007744
.text:00007744                 push    ebp
.text:00007745                 mov     ebp, esp
.text:00007747                 push    ecx
.text:00007748                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000774F                 mov     [ebp+var_4], ecx
.text:00007752                 mov     ecx, [ebp+var_4] ; this
.text:00007755                 call    ?OutFoldersReserveDown@COutFolders@N7z@NArchive@@QAEXXZ ; NArchive::N7z::COutFolders::OutFoldersReserveDown(void)
.text:0000775A                 mov     ecx, [ebp+var_4]
.text:0000775D                 add     ecx, 30h ; '0'
.text:00007760                 call    ?ReserveDown@?$CRecordVector@_K@@QAEXXZ ; CRecordVector<unsigned __int64>::ReserveDown(void)
.text:00007765                 mov     ecx, [ebp+var_4]
.text:00007768                 add     ecx, 3Ch ; '<'  ; this
.text:0000776B                 call    ?ReserveDown@CUInt32DefVector@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CUInt32DefVector::ReserveDown(void)
.text:00007770                 mov     ecx, [ebp+var_4]
.text:00007773                 add     ecx, 54h ; 'T'
.text:00007776                 call    ?ReserveDown@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEXXZ ; CObjectVector<NArchive::N7z::CFolder>::ReserveDown(void)
.text:0000777B                 mov     ecx, [ebp+var_4]
.text:0000777E                 add     ecx, 60h ; '`'
.text:00007781                 call    ?ReserveDown@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXXZ ; CRecordVector<NArchive::N7z::CFileItem>::ReserveDown(void)
.text:00007786                 mov     ecx, [ebp+var_4]
.text:00007789                 add     ecx, 6Ch ; 'l'
.text:0000778C                 call    ?ReserveDown@?$CObjectVector@VUString@@@@QAEXXZ ; CObjectVector<UString>::ReserveDown(void)
.text:00007791                 mov     ecx, [ebp+var_4]
.text:00007794                 add     ecx, 78h ; 'x'  ; this
.text:00007797                 call    ?ReserveDown@CUInt64DefVector@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CUInt64DefVector::ReserveDown(void)
.text:0000779C                 mov     ecx, [ebp+var_4]
.text:0000779F                 add     ecx, 90h ; 'É'  ; this
.text:000077A5                 call    ?ReserveDown@CUInt64DefVector@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CUInt64DefVector::ReserveDown(void)
.text:000077AA                 mov     ecx, [ebp+var_4]
.text:000077AD                 add     ecx, 0A8h ; '¿' ; this
.text:000077B3                 call    ?ReserveDown@CUInt64DefVector@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CUInt64DefVector::ReserveDown(void)
.text:000077B8                 mov     ecx, [ebp+var_4]
.text:000077BB                 add     ecx, 0C0h ; '+' ; this
.text:000077C1                 call    ?ReserveDown@CUInt64DefVector@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CUInt64DefVector::ReserveDown(void)
.text:000077C6                 mov     ecx, [ebp+var_4]
.text:000077C9                 add     ecx, 0D8h ; '+'
.text:000077CF                 call    ?ReserveDown@?$CRecordVector@_N@@QAEXXZ ; CRecordVector<bool>::ReserveDown(void)
.text:000077D4                 add     esp, 4
.text:000077D7                 cmp     ebp, esp
.text:000077D9                 call    __RTC_CheckEsp
.text:000077DE                 mov     esp, ebp
.text:000077E0                 pop     ebp
.text:000077E1                 retn
.text:000077E1 ?ReserveDown@CArchiveDatabaseOut@N7z@NArchive@@QAEXXZ endp
.text:000077E1
.text:000077E1 ; ---------------------------------------------------------------------------
.text:000077E2                 align 4
.text:000077E2 _text           ends
.text:000077E2
.text:000077E4 ; ===========================================================================
.text:000077E4
.text:000077E4 ; Segment type: Pure code
.text:000077E4 ; Segment permissions: Read/Execute
.text:000077E4 _text           segment para public 'CODE' use32
.text:000077E4                 assume cs:_text
.text:000077E4                 ;org 77E4h
.text:000077E4 ; COMDAT (pick any)
.text:000077E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000077E4
.text:000077E4 ; =============== S U B R O U T I N E =======================================
.text:000077E4
.text:000077E4 ; Attributes: bp-based frame
.text:000077E4
.text:000077E4 ; void __thiscall NArchive::N7z::CUInt32DefVector::ReserveDown(NArchive::N7z::CUInt32DefVector *__hidden this)
.text:000077E4                 public ?ReserveDown@CUInt32DefVector@N7z@NArchive@@QAEXXZ
.text:000077E4 ?ReserveDown@CUInt32DefVector@N7z@NArchive@@QAEXXZ proc near
.text:000077E4                                         ; CODE XREF: NArchive::N7z::CArchiveDatabaseOut::ReserveDown(void)+27p
.text:000077E4                                         ; NArchive::N7z::COutFolders::OutFoldersReserveDown(void)+11p
.text:000077E4
.text:000077E4 var_4           = dword ptr -4
.text:000077E4
.text:000077E4                 push    ebp
.text:000077E5                 mov     ebp, esp
.text:000077E7                 push    ecx
.text:000077E8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000077EF                 mov     [ebp+var_4], ecx
.text:000077F2                 mov     ecx, [ebp+var_4]
.text:000077F5                 call    ?ReserveDown@?$CRecordVector@_N@@QAEXXZ ; CRecordVector<bool>::ReserveDown(void)
.text:000077FA                 mov     ecx, [ebp+var_4]
.text:000077FD                 add     ecx, 0Ch
.text:00007800                 call    ?ReserveDown@?$CRecordVector@I@@QAEXXZ ; CRecordVector<uint>::ReserveDown(void)
.text:00007805                 add     esp, 4
.text:00007808                 cmp     ebp, esp
.text:0000780A                 call    __RTC_CheckEsp
.text:0000780F                 mov     esp, ebp
.text:00007811                 pop     ebp
.text:00007812                 retn
.text:00007812 ?ReserveDown@CUInt32DefVector@N7z@NArchive@@QAEXXZ endp
.text:00007812
.text:00007812 ; ---------------------------------------------------------------------------
.text:00007813                 align 4
.text:00007813 _text           ends
.text:00007813
.text:00007814 ; ===========================================================================
.text:00007814
.text:00007814 ; Segment type: Pure code
.text:00007814 ; Segment permissions: Read/Execute
.text:00007814 _text           segment para public 'CODE' use32
.text:00007814                 assume cs:_text
.text:00007814                 ;org 7814h
.text:00007814 ; COMDAT (pick any)
.text:00007814                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007814
.text:00007814 ; =============== S U B R O U T I N E =======================================
.text:00007814
.text:00007814 ; Attributes: bp-based frame
.text:00007814
.text:00007814 ; void __thiscall NArchive::N7z::CUInt64DefVector::ReserveDown(NArchive::N7z::CUInt64DefVector *__hidden this)
.text:00007814                 public ?ReserveDown@CUInt64DefVector@N7z@NArchive@@QAEXXZ
.text:00007814 ?ReserveDown@CUInt64DefVector@N7z@NArchive@@QAEXXZ proc near
.text:00007814                                         ; CODE XREF: NArchive::N7z::CArchiveDatabaseOut::ReserveDown(void)+53p
.text:00007814                                         ; NArchive::N7z::CArchiveDatabaseOut::ReserveDown(void)+61p ...
.text:00007814
.text:00007814 var_4           = dword ptr -4
.text:00007814
.text:00007814                 push    ebp
.text:00007815                 mov     ebp, esp
.text:00007817                 push    ecx
.text:00007818                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000781F                 mov     [ebp+var_4], ecx
.text:00007822                 mov     ecx, [ebp+var_4]
.text:00007825                 call    ?ReserveDown@?$CRecordVector@_N@@QAEXXZ ; CRecordVector<bool>::ReserveDown(void)
.text:0000782A                 mov     ecx, [ebp+var_4]
.text:0000782D                 add     ecx, 0Ch
.text:00007830                 call    ?ReserveDown@?$CRecordVector@_K@@QAEXXZ ; CRecordVector<unsigned __int64>::ReserveDown(void)
.text:00007835                 add     esp, 4
.text:00007838                 cmp     ebp, esp
.text:0000783A                 call    __RTC_CheckEsp
.text:0000783F                 mov     esp, ebp
.text:00007841                 pop     ebp
.text:00007842                 retn
.text:00007842 ?ReserveDown@CUInt64DefVector@N7z@NArchive@@QAEXXZ endp
.text:00007842
.text:00007842 ; ---------------------------------------------------------------------------
.text:00007843                 align 4
.text:00007843 _text           ends
.text:00007843
.text:00007844 ; ===========================================================================
.text:00007844
.text:00007844 ; Segment type: Pure code
.text:00007844 ; Segment permissions: Read/Execute
.text:00007844 _text           segment para public 'CODE' use32
.text:00007844                 assume cs:_text
.text:00007844                 ;org 7844h
.text:00007844 ; COMDAT (pick any)
.text:00007844                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007844
.text:00007844 ; =============== S U B R O U T I N E =======================================
.text:00007844
.text:00007844 ; Attributes: bp-based frame
.text:00007844
.text:00007844 ; void __thiscall NArchive::N7z::COutFolders::OutFoldersReserveDown(NArchive::N7z::COutFolders *__hidden this)
.text:00007844                 public ?OutFoldersReserveDown@COutFolders@N7z@NArchive@@QAEXXZ
.text:00007844 ?OutFoldersReserveDown@COutFolders@N7z@NArchive@@QAEXXZ proc near
.text:00007844                                         ; CODE XREF: NArchive::N7z::CArchiveDatabaseOut::ReserveDown(void)+11p
.text:00007844
.text:00007844 var_4           = dword ptr -4
.text:00007844
.text:00007844                 push    ebp
.text:00007845                 mov     ebp, esp
.text:00007847                 push    ecx
.text:00007848                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000784F                 mov     [ebp+var_4], ecx
.text:00007852                 mov     ecx, [ebp+var_4] ; this
.text:00007855                 call    ?ReserveDown@CUInt32DefVector@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CUInt32DefVector::ReserveDown(void)
.text:0000785A                 mov     ecx, [ebp+var_4]
.text:0000785D                 add     ecx, 18h
.text:00007860                 call    ?ReserveDown@?$CRecordVector@I@@QAEXXZ ; CRecordVector<uint>::ReserveDown(void)
.text:00007865                 mov     ecx, [ebp+var_4]
.text:00007868                 add     ecx, 24h ; '$'
.text:0000786B                 call    ?ReserveDown@?$CRecordVector@_K@@QAEXXZ ; CRecordVector<unsigned __int64>::ReserveDown(void)
.text:00007870                 add     esp, 4
.text:00007873                 cmp     ebp, esp
.text:00007875                 call    __RTC_CheckEsp
.text:0000787A                 mov     esp, ebp
.text:0000787C                 pop     ebp
.text:0000787D                 retn
.text:0000787D ?OutFoldersReserveDown@COutFolders@N7z@NArchive@@QAEXXZ endp
.text:0000787D
.text:0000787D ; ---------------------------------------------------------------------------
.text:0000787E                 align 10h
.text:0000787E _text           ends
.text:0000787E
.text:00007880 ; ===========================================================================
.text:00007880
.text:00007880 ; Segment type: Pure code
.text:00007880 ; Segment permissions: Read/Execute
.text:00007880 _text           segment para public 'CODE' use32
.text:00007880                 assume cs:_text
.text:00007880                 ;org 7880h
.text:00007880 ; COMDAT (pick any)
.text:00007880                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007880
.text:00007880 ; =============== S U B R O U T I N E =======================================
.text:00007880
.text:00007880 ; Attributes: bp-based frame
.text:00007880
.text:00007880 ; bool __thiscall NArchive::N7z::CUpdateItem::HasStream(NArchive::N7z::CUpdateItem *__hidden this)
.text:00007880                 public ?HasStream@CUpdateItem@N7z@NArchive@@QBE_NXZ
.text:00007880 ?HasStream@CUpdateItem@N7z@NArchive@@QBE_NXZ proc near
.text:00007880                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+A1Dp
.text:00007880                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+FBDp ...
.text:00007880
.text:00007880 var_C           = dword ptr -0Ch
.text:00007880 var_8           = dword ptr -8
.text:00007880 var_4           = dword ptr -4
.text:00007880
.text:00007880                 push    ebp
.text:00007881                 mov     ebp, esp
.text:00007883                 sub     esp, 0Ch
.text:00007886                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000788D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00007894                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000789B                 mov     [ebp+var_4], ecx
.text:0000789E                 mov     eax, [ebp+var_4]
.text:000078A1                 movzx   ecx, byte ptr [eax+3Bh]
.text:000078A5                 test    ecx, ecx
.text:000078A7                 jnz     short loc_78D1
.text:000078A9                 mov     edx, [ebp+var_4]
.text:000078AC                 movzx   eax, byte ptr [edx+3Ah]
.text:000078B0                 test    eax, eax
.text:000078B2                 jnz     short loc_78D1
.text:000078B4                 mov     ecx, [ebp+var_4]
.text:000078B7                 mov     [ebp+var_8], ecx
.text:000078BA                 mov     edx, [ebp+var_8]
.text:000078BD                 mov     eax, [ebp+var_8]
.text:000078C0                 mov     ecx, [edx+20h]
.text:000078C3                 or      ecx, [eax+24h]
.text:000078C6                 jz      short loc_78D1
.text:000078C8                 mov     [ebp+var_C], 1
.text:000078CF                 jmp     short loc_78D8
.text:000078D1 ; ---------------------------------------------------------------------------
.text:000078D1
.text:000078D1 loc_78D1:                               ; CODE XREF: NArchive::N7z::CUpdateItem::HasStream(void)+27j
.text:000078D1                                         ; NArchive::N7z::CUpdateItem::HasStream(void)+32j ...
.text:000078D1                 mov     [ebp+var_C], 0
.text:000078D8
.text:000078D8 loc_78D8:                               ; CODE XREF: NArchive::N7z::CUpdateItem::HasStream(void)+4Fj
.text:000078D8                 mov     al, byte ptr [ebp+var_C]
.text:000078DB                 mov     esp, ebp
.text:000078DD                 pop     ebp
.text:000078DE                 retn
.text:000078DE ?HasStream@CUpdateItem@N7z@NArchive@@QBE_NXZ endp
.text:000078DE
.text:000078DE ; ---------------------------------------------------------------------------
.text:000078DF                 align 10h
.text:000078DF _text           ends
.text:000078DF
.text:000078E0 ; ===========================================================================
.text:000078E0
.text:000078E0 ; Segment type: Pure code
.text:000078E0 ; Segment permissions: Read/Execute
.text:000078E0 _text           segment para public 'CODE' use32
.text:000078E0                 assume cs:_text
.text:000078E0                 ;org 78E0h
.text:000078E0 ; COMDAT (pick any)
.text:000078E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000078E0
.text:000078E0 ; =============== S U B R O U T I N E =======================================
.text:000078E0
.text:000078E0 ; Attributes: bp-based frame
.text:000078E0
.text:000078E0 ; _DWORD __thiscall NArchive::N7z::CFilterMode2::CFilterMode2(NArchive::N7z::CFilterMode2 *__hidden this)
.text:000078E0                 public ??0CFilterMode2@N7z@NArchive@@QAE@XZ
.text:000078E0 ??0CFilterMode2@N7z@NArchive@@QAE@XZ proc near
.text:000078E0                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+A31p
.text:000078E0                                         ; NArchive::N7z::Get_FilterGroup_for_Folder(CRecordVector<NArchive::N7z::CFilterMode2> &,NArchive::N7z::CFolderEx const &)+26p
.text:000078E0                                         ; DATA XREF: ...
.text:000078E0
.text:000078E0 var_4           = dword ptr -4
.text:000078E0
.text:000078E0                 push    ebp
.text:000078E1                 mov     ebp, esp
.text:000078E3                 push    ecx
.text:000078E4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000078EB                 mov     [ebp+var_4], ecx
.text:000078EE                 mov     ecx, [ebp+var_4] ; this
.text:000078F1                 call    ??0CFilterMode@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFilterMode::CFilterMode(void)
.text:000078F6                 mov     eax, [ebp+var_4]
.text:000078F9                 mov     byte ptr [eax+8], 0
.text:000078FD                 mov     eax, [ebp+var_4]
.text:00007900                 add     esp, 4
.text:00007903                 cmp     ebp, esp
.text:00007905                 call    __RTC_CheckEsp
.text:0000790A                 mov     esp, ebp
.text:0000790C                 pop     ebp
.text:0000790D                 retn
.text:0000790D ??0CFilterMode2@N7z@NArchive@@QAE@XZ endp
.text:0000790D
.text:0000790D ; ---------------------------------------------------------------------------
.text:0000790E                 align 10h
.text:0000790E _text           ends
.text:0000790E
.text:00007910 ; ===========================================================================
.text:00007910
.text:00007910 ; Segment type: Pure code
.text:00007910 ; Segment permissions: Read/Execute
.text:00007910 _text           segment para public 'CODE' use32
.text:00007910                 assume cs:_text
.text:00007910                 ;org 7910h
.text:00007910 ; COMDAT (pick any)
.text:00007910                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007910
.text:00007910 ; =============== S U B R O U T I N E =======================================
.text:00007910
.text:00007910 ; Attributes: bp-based frame
.text:00007910
.text:00007910 ; _DWORD __thiscall NArchive::N7z::CFilterMode::CFilterMode(NArchive::N7z::CFilterMode *__hidden this)
.text:00007910                 public ??0CFilterMode@N7z@NArchive@@QAE@XZ
.text:00007910 ??0CFilterMode@N7z@NArchive@@QAE@XZ proc near
.text:00007910                                         ; CODE XREF: NArchive::N7z::CFilterMode2::CFilterMode2(void)+11p
.text:00007910
.text:00007910 var_4           = dword ptr -4
.text:00007910
.text:00007910                 push    ebp
.text:00007911                 mov     ebp, esp
.text:00007913                 push    ecx
.text:00007914                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000791B                 mov     [ebp+var_4], ecx
.text:0000791E                 mov     eax, [ebp+var_4]
.text:00007921                 mov     dword ptr [eax], 0
.text:00007927                 mov     ecx, [ebp+var_4]
.text:0000792A                 mov     dword ptr [ecx+4], 0
.text:00007931                 mov     eax, [ebp+var_4]
.text:00007934                 mov     esp, ebp
.text:00007936                 pop     ebp
.text:00007937                 retn
.text:00007937 ??0CFilterMode@N7z@NArchive@@QAE@XZ endp
.text:00007937
.text:00007937 _text           ends
.text:00007937
.text:00007938 ; ===========================================================================
.text:00007938
.text:00007938 ; Segment type: Pure code
.text:00007938 ; Segment permissions: Read/Execute
.text:00007938 _text           segment para public 'CODE' use32
.text:00007938                 assume cs:_text
.text:00007938                 ;org 7938h
.text:00007938 ; COMDAT (pick any)
.text:00007938                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007938
.text:00007938 ; =============== S U B R O U T I N E =======================================
.text:00007938
.text:00007938 ; Attributes: bp-based frame
.text:00007938
.text:00007938 ; public: bool __thiscall NArchive::N7z::CFilterMode2::operator==(struct NArchive::N7z::CFilterMode2 const &)const
.text:00007938                 public ??8CFilterMode2@N7z@NArchive@@QBE_NABU012@@Z
.text:00007938 ??8CFilterMode2@N7z@NArchive@@QBE_NABU012@@Z proc near
.text:00007938                                         ; CODE XREF: NArchive::N7z::GetGroup(CRecordVector<NArchive::N7z::CFilterMode2> &,NArchive::N7z::CFilterMode2 const &)+49p
.text:00007938
.text:00007938 var_8           = dword ptr -8
.text:00007938 var_4           = dword ptr -4
.text:00007938 arg_0           = dword ptr  8
.text:00007938
.text:00007938                 push    ebp
.text:00007939                 mov     ebp, esp
.text:0000793B                 sub     esp, 8
.text:0000793E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00007945                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000794C                 mov     [ebp+var_4], ecx
.text:0000794F                 mov     eax, [ebp+var_4]
.text:00007952                 mov     ecx, [ebp+arg_0]
.text:00007955                 mov     edx, [eax]
.text:00007957                 cmp     edx, [ecx]
.text:00007959                 jnz     short loc_7984
.text:0000795B                 mov     eax, [ebp+var_4]
.text:0000795E                 mov     ecx, [ebp+arg_0]
.text:00007961                 mov     edx, [eax+4]
.text:00007964                 cmp     edx, [ecx+4]
.text:00007967                 jnz     short loc_7984
.text:00007969                 mov     eax, [ebp+var_4]
.text:0000796C                 movzx   ecx, byte ptr [eax+8]
.text:00007970                 mov     edx, [ebp+arg_0]
.text:00007973                 movzx   eax, byte ptr [edx+8]
.text:00007977                 cmp     ecx, eax
.text:00007979                 jnz     short loc_7984
.text:0000797B                 mov     [ebp+var_8], 1
.text:00007982                 jmp     short loc_798B
.text:00007984 ; ---------------------------------------------------------------------------
.text:00007984
.text:00007984 loc_7984:                               ; CODE XREF: NArchive::N7z::CFilterMode2::operator==(NArchive::N7z::CFilterMode2 const &)+21j
.text:00007984                                         ; NArchive::N7z::CFilterMode2::operator==(NArchive::N7z::CFilterMode2 const &)+2Fj ...
.text:00007984                 mov     [ebp+var_8], 0
.text:0000798B
.text:0000798B loc_798B:                               ; CODE XREF: NArchive::N7z::CFilterMode2::operator==(NArchive::N7z::CFilterMode2 const &)+4Aj
.text:0000798B                 mov     al, byte ptr [ebp+var_8]
.text:0000798E                 mov     esp, ebp
.text:00007990                 pop     ebp
.text:00007991                 retn    4
.text:00007991 ??8CFilterMode2@N7z@NArchive@@QBE_NABU012@@Z endp
.text:00007991
.text:00007991 _text           ends
.text:00007991
.text:00007994 ; ===========================================================================
.text:00007994
.text:00007994 ; Segment type: Pure code
.text:00007994 ; Segment permissions: Read/Execute
.text:00007994 _text           segment para public 'CODE' use32
.text:00007994                 assume cs:_text
.text:00007994                 ;org 7994h
.text:00007994 ; COMDAT (pick any)
.text:00007994                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007994
.text:00007994 ; =============== S U B R O U T I N E =======================================
.text:00007994
.text:00007994 ; Attributes: bp-based frame
.text:00007994
.text:00007994 ; void __thiscall CLimitedSequentialInStream::SetStream(CLimitedSequentialInStream *this, struct ISequentialInStream *)
.text:00007994                 public ?SetStream@CLimitedSequentialInStream@@QAEXPAUISequentialInStream@@@Z
.text:00007994 ?SetStream@CLimitedSequentialInStream@@QAEXPAUISequentialInStream@@@Z proc near
.text:00007994                                         ; CODE XREF: NArchive::N7z::WriteRange(IInStream *,ISequentialOutStream *,unsigned __int64,unsigned __int64,ICompressProgressInfo *)+C5p
.text:00007994
.text:00007994 var_4           = dword ptr -4
.text:00007994 arg_0           = dword ptr  8
.text:00007994
.text:00007994                 push    ebp
.text:00007995                 mov     ebp, esp
.text:00007997                 push    ecx
.text:00007998                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000799F                 mov     [ebp+var_4], ecx
.text:000079A2                 mov     eax, [ebp+arg_0]
.text:000079A5                 push    eax
.text:000079A6                 mov     ecx, [ebp+var_4]
.text:000079A9                 add     ecx, 8
.text:000079AC                 call    ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)
.text:000079B1                 add     esp, 4
.text:000079B4                 cmp     ebp, esp
.text:000079B6                 call    __RTC_CheckEsp
.text:000079BB                 mov     esp, ebp
.text:000079BD                 pop     ebp
.text:000079BE                 retn    4
.text:000079BE ?SetStream@CLimitedSequentialInStream@@QAEXPAUISequentialInStream@@@Z endp
.text:000079BE
.text:000079BE ; ---------------------------------------------------------------------------
.text:000079C1                 align 4
.text:000079C1 _text           ends
.text:000079C1
.text:000079C4 ; ===========================================================================
.text:000079C4
.text:000079C4 ; Segment type: Pure code
.text:000079C4 ; Segment permissions: Read/Execute
.text:000079C4 _text           segment para public 'CODE' use32
.text:000079C4                 assume cs:_text
.text:000079C4                 ;org 79C4h
.text:000079C4 ; COMDAT (pick any)
.text:000079C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000079C4
.text:000079C4 ; =============== S U B R O U T I N E =======================================
.text:000079C4
.text:000079C4 ; Attributes: bp-based frame
.text:000079C4
.text:000079C4 ; void __thiscall CLimitedSequentialInStream::Init(CLimitedSequentialInStream *this, unsigned __int64)
.text:000079C4                 public ?Init@CLimitedSequentialInStream@@QAEX_K@Z
.text:000079C4 ?Init@CLimitedSequentialInStream@@QAEX_K@Z proc near
.text:000079C4                                         ; CODE XREF: NArchive::N7z::WriteRange(IInStream *,ISequentialOutStream *,unsigned __int64,unsigned __int64,ICompressProgressInfo *)+D5p
.text:000079C4
.text:000079C4 var_4           = dword ptr -4
.text:000079C4 arg_0           = qword ptr  8
.text:000079C4
.text:000079C4                 push    ebp
.text:000079C5                 mov     ebp, esp
.text:000079C7                 push    ecx
.text:000079C8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000079CF                 mov     [ebp+var_4], ecx
.text:000079D2                 mov     eax, [ebp+var_4]
.text:000079D5                 mov     ecx, dword ptr [ebp+arg_0]
.text:000079D8                 mov     [eax+10h], ecx
.text:000079DB                 mov     edx, dword ptr [ebp+arg_0+4]
.text:000079DE                 mov     [eax+14h], edx
.text:000079E1                 mov     eax, [ebp+var_4]
.text:000079E4                 mov     dword ptr [eax+18h], 0
.text:000079EB                 mov     dword ptr [eax+1Ch], 0
.text:000079F2                 mov     ecx, [ebp+var_4]
.text:000079F5                 mov     byte ptr [ecx+20h], 0
.text:000079F9                 mov     esp, ebp
.text:000079FB                 pop     ebp
.text:000079FC                 retn    8
.text:000079FC ?Init@CLimitedSequentialInStream@@QAEX_K@Z endp
.text:000079FC
.text:000079FC ; ---------------------------------------------------------------------------
.text:000079FF                 align 10h
.text:000079FF _text           ends
.text:000079FF
.text:00007A00 ; ===========================================================================
.text:00007A00
.text:00007A00 ; Segment type: Pure code
.text:00007A00 ; Segment permissions: Read/Execute
.text:00007A00 _text           segment para public 'CODE' use32
.text:00007A00                 assume cs:_text
.text:00007A00                 ;org 7A00h
.text:00007A00 ; COMDAT (pick any)
.text:00007A00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007A00
.text:00007A00 ; =============== S U B R O U T I N E =======================================
.text:00007A00
.text:00007A00 ; Attributes: bp-based frame
.text:00007A00
.text:00007A00 ; _DWORD __thiscall NCompress::CCopyCoder::CCopyCoder(NCompress::CCopyCoder *__hidden this)
.text:00007A00                 public ??0CCopyCoder@NCompress@@QAE@XZ
.text:00007A00 ??0CCopyCoder@NCompress@@QAE@XZ proc near
.text:00007A00                                         ; CODE XREF: NArchive::N7z::WriteRange(IInStream *,ISequentialOutStream *,unsigned __int64,unsigned __int64,ICompressProgressInfo *)+F4p
.text:00007A00
.text:00007A00 var_4           = dword ptr -4
.text:00007A00
.text:00007A00                 push    ebp
.text:00007A01                 mov     ebp, esp
.text:00007A03                 push    ecx
.text:00007A04                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007A0B                 mov     [ebp+var_4], ecx
.text:00007A0E                 mov     ecx, [ebp+var_4] ; this
.text:00007A11                 call    ??0ICompressCoder@@QAE@XZ ; ICompressCoder::ICompressCoder(void)
.text:00007A16                 mov     ecx, [ebp+var_4]
.text:00007A19                 add     ecx, 4          ; this
.text:00007A1C                 call    ??0ICompressSetInStream@@QAE@XZ ; ICompressSetInStream::ICompressSetInStream(void)
.text:00007A21                 mov     ecx, [ebp+var_4]
.text:00007A24                 add     ecx, 8          ; this
.text:00007A27                 call    ??0ISequentialInStream@@QAE@XZ ; ISequentialInStream::ISequentialInStream(void)
.text:00007A2C                 mov     ecx, [ebp+var_4]
.text:00007A2F                 add     ecx, 0Ch        ; this
.text:00007A32                 call    ??0ICompressGetInStreamProcessedSize@@QAE@XZ ; ICompressGetInStreamProcessedSize::ICompressGetInStreamProcessedSize(void)
.text:00007A37                 mov     ecx, [ebp+var_4]
.text:00007A3A                 add     ecx, 10h        ; this
.text:00007A3D                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00007A42                 mov     eax, [ebp+var_4]
.text:00007A45                 mov     dword ptr [eax], offset ??_7CCopyCoder@NCompress@@6BICompressCoder@@@ ; const NCompress::CCopyCoder::`vftable'{for `ICompressCoder'}
.text:00007A4B                 mov     ecx, [ebp+var_4]
.text:00007A4E                 mov     dword ptr [ecx+4], offset ??_7CCopyCoder@NCompress@@6BICompressSetInStream@@@ ; const NCompress::CCopyCoder::`vftable'{for `ICompressSetInStream'}
.text:00007A55                 mov     edx, [ebp+var_4]
.text:00007A58                 mov     dword ptr [edx+8], offset ??_7CCopyCoder@NCompress@@6BISequentialInStream@@@ ; const NCompress::CCopyCoder::`vftable'{for `ISequentialInStream'}
.text:00007A5F                 mov     eax, [ebp+var_4]
.text:00007A62                 mov     dword ptr [eax+0Ch], offset ??_7CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ ; const NCompress::CCopyCoder::`vftable'{for `ICompressGetInStreamProcessedSize'}
.text:00007A69                 mov     ecx, [ebp+var_4]
.text:00007A6C                 mov     dword ptr [ecx+14h], 0
.text:00007A73                 mov     ecx, [ebp+var_4]
.text:00007A76                 add     ecx, 18h
.text:00007A79                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(void)
.text:00007A7E                 mov     edx, [ebp+var_4]
.text:00007A81                 mov     dword ptr [edx+20h], 0
.text:00007A88                 mov     dword ptr [edx+24h], 0
.text:00007A8F                 mov     eax, [ebp+var_4]
.text:00007A92                 add     esp, 4
.text:00007A95                 cmp     ebp, esp
.text:00007A97                 call    __RTC_CheckEsp
.text:00007A9C                 mov     esp, ebp
.text:00007A9E                 pop     ebp
.text:00007A9F                 retn
.text:00007A9F ??0CCopyCoder@NCompress@@QAE@XZ endp
.text:00007A9F
.text:00007A9F _text           ends
.text:00007A9F
.rdata:00007AA0 ; ===========================================================================
.rdata:00007AA0
.rdata:00007AA0 ; Segment type: Pure data
.rdata:00007AA0 ; Segment permissions: Read
.rdata:00007AA0 _rdata          segment dword public 'DATA' use32
.rdata:00007AA0                 assume cs:_rdata
.rdata:00007AA0                 ;org 7AA0h
.rdata:00007AA0 ; COMDAT (pick largest)
.rdata:00007AA0                 dd offset ??_R4CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ICompressGetInStreamProcessedSize'}
.rdata:00007AA4                 public ??_7CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@
.rdata:00007AA4 ; const NCompress::CCopyCoder::`vftable'{for `ICompressGetInStreamProcessedSize'}
.rdata:00007AA4 ??_7CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ dd offset ?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z
.rdata:00007AA4                                         ; DATA XREF: NCompress::CCopyCoder::CCopyCoder(void)+62o
.rdata:00007AA4                                         ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{12}' (_GUID const &,void * *)
.rdata:00007AA8                 dd offset ?AddRef@CCopyCoder@NCompress@@WM@AGKXZ ; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{12}' (void)
.rdata:00007AAC                 dd offset ?Release@CCopyCoder@NCompress@@WM@AGKXZ ; [thunk]:NCompress::CCopyCoder::Release`adjustor{12}' (void)
.rdata:00007AB0                 dd offset ?GetInStreamProcessedSize@CCopyCoder@NCompress@@UAGJPA_K@Z ; NCompress::CCopyCoder::GetInStreamProcessedSize(unsigned __int64 *)
.rdata:00007AB0 _rdata          ends
.rdata:00007AB0
.rdata:00007AB4 ; ===========================================================================
.rdata:00007AB4
.rdata:00007AB4 ; Segment type: Pure data
.rdata:00007AB4 ; Segment permissions: Read
.rdata:00007AB4 _rdata          segment dword public 'DATA' use32
.rdata:00007AB4                 assume cs:_rdata
.rdata:00007AB4                 ;org 7AB4h
.rdata:00007AB4 ; COMDAT (pick largest)
.rdata:00007AB4                 dd offset ??_R4CCopyCoder@NCompress@@6BISequentialInStream@@@ ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ISequentialInStream'}
.rdata:00007AB8                 public ??_7CCopyCoder@NCompress@@6BISequentialInStream@@@
.rdata:00007AB8 ; const NCompress::CCopyCoder::`vftable'{for `ISequentialInStream'}
.rdata:00007AB8 ??_7CCopyCoder@NCompress@@6BISequentialInStream@@@ dd offset ?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z
.rdata:00007AB8                                         ; DATA XREF: NCompress::CCopyCoder::CCopyCoder(void)+58o
.rdata:00007AB8                                         ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)
.rdata:00007ABC                 dd offset ?AddRef@CCopyCoder@NCompress@@W7AGKXZ ; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{8}' (void)
.rdata:00007AC0                 dd offset ?Release@CCopyCoder@NCompress@@W7AGKXZ ; [thunk]:NCompress::CCopyCoder::Release`adjustor{8}' (void)
.rdata:00007AC4                 dd offset ?Read@CCopyCoder@NCompress@@UAGJPAXIPAI@Z ; NCompress::CCopyCoder::Read(void *,uint,uint *)
.rdata:00007AC4 _rdata          ends
.rdata:00007AC4
.rdata:00007AC8 ; ===========================================================================
.rdata:00007AC8
.rdata:00007AC8 ; Segment type: Pure data
.rdata:00007AC8 ; Segment permissions: Read
.rdata:00007AC8 _rdata          segment dword public 'DATA' use32
.rdata:00007AC8                 assume cs:_rdata
.rdata:00007AC8                 ;org 7AC8h
.rdata:00007AC8 ; COMDAT (pick largest)
.rdata:00007AC8                 dd offset ??_R4CCopyCoder@NCompress@@6BICompressSetInStream@@@ ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ICompressSetInStream'}
.rdata:00007ACC                 public ??_7CCopyCoder@NCompress@@6BICompressSetInStream@@@
.rdata:00007ACC ; const NCompress::CCopyCoder::`vftable'{for `ICompressSetInStream'}
.rdata:00007ACC ??_7CCopyCoder@NCompress@@6BICompressSetInStream@@@ dd offset ?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.rdata:00007ACC                                         ; DATA XREF: NCompress::CCopyCoder::CCopyCoder(void)+4Eo
.rdata:00007ACC                                         ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:00007AD0                 dd offset ?AddRef@CCopyCoder@NCompress@@W3AGKXZ ; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{4}' (void)
.rdata:00007AD4                 dd offset ?Release@CCopyCoder@NCompress@@W3AGKXZ ; [thunk]:NCompress::CCopyCoder::Release`adjustor{4}' (void)
.rdata:00007AD8                 dd offset ?SetInStream@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@@Z ; NCompress::CCopyCoder::SetInStream(ISequentialInStream *)
.rdata:00007ADC                 dd offset ?ReleaseInStream@CCopyCoder@NCompress@@UAGJXZ ; NCompress::CCopyCoder::ReleaseInStream(void)
.rdata:00007ADC _rdata          ends
.rdata:00007ADC
.rdata:00007AE0 ; ===========================================================================
.rdata:00007AE0
.rdata:00007AE0 ; Segment type: Pure data
.rdata:00007AE0 ; Segment permissions: Read
.rdata:00007AE0 _rdata          segment dword public 'DATA' use32
.rdata:00007AE0                 assume cs:_rdata
.rdata:00007AE0                 ;org 7AE0h
.rdata:00007AE0 ; COMDAT (pick largest)
.rdata:00007AE0                 dd offset ??_R4CCopyCoder@NCompress@@6BICompressCoder@@@ ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata:00007AE4                 public ??_7CCopyCoder@NCompress@@6BICompressCoder@@@
.rdata:00007AE4 ; const NCompress::CCopyCoder::`vftable'{for `ICompressCoder'}
.rdata:00007AE4 ??_7CCopyCoder@NCompress@@6BICompressCoder@@@ dd offset ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z
.rdata:00007AE4                                         ; DATA XREF: NCompress::CCopyCoder::CCopyCoder(void)+45o
.rdata:00007AE4                                         ; NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)
.rdata:00007AE8                 dd offset ?AddRef@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::AddRef(void)
.rdata:00007AEC                 dd offset ?Release@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::Release(void)
.rdata:00007AF0                 dd offset ?Code@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ; NCompress::CCopyCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)
.rdata:00007AF0 _rdata          ends
.rdata:00007AF0
.rdata$r:00007AF4 ; ===========================================================================
.rdata$r:00007AF4
.rdata$r:00007AF4 ; Segment type: Pure data
.rdata$r:00007AF4 ; Segment permissions: Read
.rdata$r:00007AF4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007AF4                 assume cs:_rdata$r
.rdata$r:00007AF4                 ;org 7AF4h
.rdata$r:00007AF4 ; COMDAT (pick any)
.rdata$r:00007AF4                 public ??_R4CCopyCoder@NCompress@@6BICompressCoder@@@
.rdata$r:00007AF4 ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata$r:00007AF4 ??_R4CCopyCoder@NCompress@@6BICompressCoder@@@ db    0
.rdata$r:00007AF4                                         ; DATA XREF: .rdata:00007AE0o
.rdata$r:00007AF5                 db    0
.rdata$r:00007AF6                 db    0
.rdata$r:00007AF7                 db    0
.rdata$r:00007AF8                 db    0
.rdata$r:00007AF9                 db    0
.rdata$r:00007AFA                 db    0
.rdata$r:00007AFB                 db    0
.rdata$r:00007AFC                 db    0
.rdata$r:00007AFD                 db    0
.rdata$r:00007AFE                 db    0
.rdata$r:00007AFF                 db    0
.rdata$r:00007B00                 dd offset ??_R0?AVCCopyCoder@NCompress@@@8 ; NCompress::CCopyCoder `RTTI Type Descriptor'
.rdata$r:00007B04                 dd offset ??_R3CCopyCoder@NCompress@@8 ; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007B04 _rdata$r        ends
.rdata$r:00007B04
.data:00007B08 ; ===========================================================================
.data:00007B08
.data:00007B08 ; Segment type: Pure data
.data:00007B08 ; Segment permissions: Read/Write
.data:00007B08 _data           segment dword public 'DATA' use32
.data:00007B08                 assume cs:_data
.data:00007B08                 ;org 7B08h
.data:00007B08 ; COMDAT (pick any)
.data:00007B08                 public ??_R0?AVCCopyCoder@NCompress@@@8
.data:00007B08 ; class NCompress::CCopyCoder `RTTI Type Descriptor'
.data:00007B08 ??_R0?AVCCopyCoder@NCompress@@@8 dd offset ??_7type_info@@6B@
.data:00007B08                                         ; DATA XREF: .rdata$r:00007B00o
.data:00007B08                                         ; .rdata$r:NCompress::CCopyCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00007B08                                         ; const type_info::`vftable'
.data:00007B0C                 align 10h
.data:00007B10 a_?avccopycoder db '.?AVCCopyCoder@NCompress@@',0
.data:00007B2B                 align 4
.data:00007B2B _data           ends
.data:00007B2B
.rdata$r:00007B2C ; ===========================================================================
.rdata$r:00007B2C
.rdata$r:00007B2C ; Segment type: Pure data
.rdata$r:00007B2C ; Segment permissions: Read
.rdata$r:00007B2C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007B2C                 assume cs:_rdata$r
.rdata$r:00007B2C                 ;org 7B2Ch
.rdata$r:00007B2C ; COMDAT (pick any)
.rdata$r:00007B2C                 public ??_R3CCopyCoder@NCompress@@8
.rdata$r:00007B2C ; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007B2C ??_R3CCopyCoder@NCompress@@8 db    0    ; DATA XREF: .rdata$r:00007B04o
.rdata$r:00007B2C                                         ; .rdata$r:00007B80o ...
.rdata$r:00007B2D                 db    0
.rdata$r:00007B2E                 db    0
.rdata$r:00007B2F                 db    0
.rdata$r:00007B30                 db    5
.rdata$r:00007B31                 db    0
.rdata$r:00007B32                 db    0
.rdata$r:00007B33                 db    0
.rdata$r:00007B34                 db  0Ah
.rdata$r:00007B35                 db    0
.rdata$r:00007B36                 db    0
.rdata$r:00007B37                 db    0
.rdata$r:00007B38                 dd offset ??_R2CCopyCoder@NCompress@@8 ; NCompress::CCopyCoder::`RTTI Base Class Array'
.rdata$r:00007B38 _rdata$r        ends
.rdata$r:00007B38
.rdata$r:00007B3C ; ===========================================================================
.rdata$r:00007B3C
.rdata$r:00007B3C ; Segment type: Pure data
.rdata$r:00007B3C ; Segment permissions: Read
.rdata$r:00007B3C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007B3C                 assume cs:_rdata$r
.rdata$r:00007B3C                 ;org 7B3Ch
.rdata$r:00007B3C ; COMDAT (pick any)
.rdata$r:00007B3C                 public ??_R2CCopyCoder@NCompress@@8
.rdata$r:00007B3C ; NCompress::CCopyCoder::`RTTI Base Class Array'
.rdata$r:00007B3C ??_R2CCopyCoder@NCompress@@8 dd offset ??_R1A@?0A@EA@CCopyCoder@NCompress@@8
.rdata$r:00007B3C                                         ; DATA XREF: .rdata$r:00007B38o
.rdata$r:00007B3C                                         ; NCompress::CCopyCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00007B40                 dd offset ??_R1A@?0A@EA@ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00007B44                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:00007B48                 dd offset ??_R13?0A@EA@ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00007B4C                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:00007B50                 dd offset ??_R17?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:00007B54                 dd offset ??_R17?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
.rdata$r:00007B58                 dd offset ??_R1M@?0A@EA@ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (12,-1,0,64)'
.rdata$r:00007B5C                 dd offset ??_R1M@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (12,-1,0,66)'
.rdata$r:00007B60                 dd offset ??_R1BA@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (16,-1,0,64)'
.rdata$r:00007B64                 db    0
.rdata$r:00007B65                 align 4
.rdata$r:00007B65 _rdata$r        ends
.rdata$r:00007B65
.rdata$r:00007B68 ; ===========================================================================
.rdata$r:00007B68
.rdata$r:00007B68 ; Segment type: Pure data
.rdata$r:00007B68 ; Segment permissions: Read
.rdata$r:00007B68 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007B68                 assume cs:_rdata$r
.rdata$r:00007B68                 ;org 7B68h
.rdata$r:00007B68 ; COMDAT (pick any)
.rdata$r:00007B68                 public ??_R1A@?0A@EA@CCopyCoder@NCompress@@8
.rdata$r:00007B68 ; NCompress::CCopyCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00007B68 ??_R1A@?0A@EA@CCopyCoder@NCompress@@8 dd offset ??_R0?AVCCopyCoder@NCompress@@@8
.rdata$r:00007B68                                         ; DATA XREF: .rdata$r:NCompress::CCopyCoder::`RTTI Base Class Array'o
.rdata$r:00007B68                                         ; NCompress::CCopyCoder `RTTI Type Descriptor'
.rdata$r:00007B6C                 db    9
.rdata$r:00007B6D                 db    0
.rdata$r:00007B6E                 db    0
.rdata$r:00007B6F                 db    0
.rdata$r:00007B70                 db    0
.rdata$r:00007B71                 db    0
.rdata$r:00007B72                 db    0
.rdata$r:00007B73                 db    0
.rdata$r:00007B74                 db 0FFh
.rdata$r:00007B75                 db 0FFh
.rdata$r:00007B76                 db 0FFh
.rdata$r:00007B77                 db 0FFh
.rdata$r:00007B78                 db    0
.rdata$r:00007B79                 db    0
.rdata$r:00007B7A                 db    0
.rdata$r:00007B7B                 db    0
.rdata$r:00007B7C                 db  40h ; @
.rdata$r:00007B7D                 db    0
.rdata$r:00007B7E                 db    0
.rdata$r:00007B7F                 db    0
.rdata$r:00007B80                 dd offset ??_R3CCopyCoder@NCompress@@8 ; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007B80 _rdata$r        ends
.rdata$r:00007B80
.rdata$r:00007B84 ; ===========================================================================
.rdata$r:00007B84
.rdata$r:00007B84 ; Segment type: Pure data
.rdata$r:00007B84 ; Segment permissions: Read
.rdata$r:00007B84 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007B84                 assume cs:_rdata$r
.rdata$r:00007B84                 ;org 7B84h
.rdata$r:00007B84 ; COMDAT (pick any)
.rdata$r:00007B84                 public ??_R1A@?0A@EA@ICompressCoder@@8
.rdata$r:00007B84 ; ICompressCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00007B84 ??_R1A@?0A@EA@ICompressCoder@@8 dd offset ??_R0?AUICompressCoder@@@8
.rdata$r:00007B84                                         ; DATA XREF: .rdata$r:00007B40o
.rdata$r:00007B84                                         ; .rdata$r:ICompressCoder::`RTTI Base Class Array'o
.rdata$r:00007B84                                         ; ICompressCoder `RTTI Type Descriptor'
.rdata$r:00007B88                 db    1
.rdata$r:00007B89                 db    0
.rdata$r:00007B8A                 db    0
.rdata$r:00007B8B                 db    0
.rdata$r:00007B8C                 db    0
.rdata$r:00007B8D                 db    0
.rdata$r:00007B8E                 db    0
.rdata$r:00007B8F                 db    0
.rdata$r:00007B90                 db 0FFh
.rdata$r:00007B91                 db 0FFh
.rdata$r:00007B92                 db 0FFh
.rdata$r:00007B93                 db 0FFh
.rdata$r:00007B94                 db    0
.rdata$r:00007B95                 db    0
.rdata$r:00007B96                 db    0
.rdata$r:00007B97                 db    0
.rdata$r:00007B98                 db  40h ; @
.rdata$r:00007B99                 db    0
.rdata$r:00007B9A                 db    0
.rdata$r:00007B9B                 db    0
.rdata$r:00007B9C                 dd offset ??_R3ICompressCoder@@8 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007B9C _rdata$r        ends
.rdata$r:00007B9C
.data:00007BA0 ; ===========================================================================
.data:00007BA0
.data:00007BA0 ; Segment type: Pure data
.data:00007BA0 ; Segment permissions: Read/Write
.data:00007BA0 _data           segment dword public 'DATA' use32
.data:00007BA0                 assume cs:_data
.data:00007BA0                 ;org 7BA0h
.data:00007BA0 ; COMDAT (pick any)
.data:00007BA0                 public ??_R0?AUICompressCoder@@@8
.data:00007BA0 ; struct ICompressCoder `RTTI Type Descriptor'
.data:00007BA0 ??_R0?AUICompressCoder@@@8 dd offset ??_7type_info@@6B@
.data:00007BA0                                         ; DATA XREF: .rdata$r:ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00007BA0                                         ; .rdata$r:00008130o
.data:00007BA0                                         ; const type_info::`vftable'
.data:00007BA4                 align 8
.data:00007BA8 a_?auicompressc db '.?AUICompressCoder@@',0
.data:00007BBD                 align 10h
.data:00007BBD _data           ends
.data:00007BBD
.rdata$r:00007BC0 ; ===========================================================================
.rdata$r:00007BC0
.rdata$r:00007BC0 ; Segment type: Pure data
.rdata$r:00007BC0 ; Segment permissions: Read
.rdata$r:00007BC0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007BC0                 assume cs:_rdata$r
.rdata$r:00007BC0                 ;org 7BC0h
.rdata$r:00007BC0 ; COMDAT (pick any)
.rdata$r:00007BC0                 public ??_R3ICompressCoder@@8
.rdata$r:00007BC0 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007BC0 ??_R3ICompressCoder@@8 db    0          ; DATA XREF: .rdata$r:00007B9Co
.rdata$r:00007BC0                                         ; .rdata$r:00008134o
.rdata$r:00007BC1                 db    0
.rdata$r:00007BC2                 db    0
.rdata$r:00007BC3                 db    0
.rdata$r:00007BC4                 db    0
.rdata$r:00007BC5                 db    0
.rdata$r:00007BC6                 db    0
.rdata$r:00007BC7                 db    0
.rdata$r:00007BC8                 db    2
.rdata$r:00007BC9                 db    0
.rdata$r:00007BCA                 db    0
.rdata$r:00007BCB                 db    0
.rdata$r:00007BCC                 dd offset ??_R2ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Array'
.rdata$r:00007BCC _rdata$r        ends
.rdata$r:00007BCC
.rdata$r:00007BD0 ; ===========================================================================
.rdata$r:00007BD0
.rdata$r:00007BD0 ; Segment type: Pure data
.rdata$r:00007BD0 ; Segment permissions: Read
.rdata$r:00007BD0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007BD0                 assume cs:_rdata$r
.rdata$r:00007BD0                 ;org 7BD0h
.rdata$r:00007BD0 ; COMDAT (pick any)
.rdata$r:00007BD0                 public ??_R2ICompressCoder@@8
.rdata$r:00007BD0 ; ICompressCoder::`RTTI Base Class Array'
.rdata$r:00007BD0 ??_R2ICompressCoder@@8 dd offset ??_R1A@?0A@EA@ICompressCoder@@8
.rdata$r:00007BD0                                         ; DATA XREF: .rdata$r:00007BCCo
.rdata$r:00007BD0                                         ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00007BD4                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00007BD8                 db    0
.rdata$r:00007BD9                 align 4
.rdata$r:00007BD9 _rdata$r        ends
.rdata$r:00007BD9
.rdata$r:00007BDC ; ===========================================================================
.rdata$r:00007BDC
.rdata$r:00007BDC ; Segment type: Pure data
.rdata$r:00007BDC ; Segment permissions: Read
.rdata$r:00007BDC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007BDC                 assume cs:_rdata$r
.rdata$r:00007BDC                 ;org 7BDCh
.rdata$r:00007BDC ; COMDAT (pick any)
.rdata$r:00007BDC                 public ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00007BDC ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00007BDC ??_R1A@?0A@EA@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00007BDC                                         ; DATA XREF: .rdata$r:00007BD4o
.rdata$r:00007BDC                                         ; .rdata$r:IUnknown::`RTTI Base Class Array'o ...
.rdata$r:00007BDC                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00007BE0                 db    0
.rdata$r:00007BE1                 db    0
.rdata$r:00007BE2                 db    0
.rdata$r:00007BE3                 db    0
.rdata$r:00007BE4                 db    0
.rdata$r:00007BE5                 db    0
.rdata$r:00007BE6                 db    0
.rdata$r:00007BE7                 db    0
.rdata$r:00007BE8                 db 0FFh
.rdata$r:00007BE9                 db 0FFh
.rdata$r:00007BEA                 db 0FFh
.rdata$r:00007BEB                 db 0FFh
.rdata$r:00007BEC                 db    0
.rdata$r:00007BED                 db    0
.rdata$r:00007BEE                 db    0
.rdata$r:00007BEF                 db    0
.rdata$r:00007BF0                 db  40h ; @
.rdata$r:00007BF1                 db    0
.rdata$r:00007BF2                 db    0
.rdata$r:00007BF3                 db    0
.rdata$r:00007BF4                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007BF4 _rdata$r        ends
.rdata$r:00007BF4
.data:00007BF8 ; ===========================================================================
.data:00007BF8
.data:00007BF8 ; Segment type: Pure data
.data:00007BF8 ; Segment permissions: Read/Write
.data:00007BF8 _data           segment dword public 'DATA' use32
.data:00007BF8                 assume cs:_data
.data:00007BF8                 ;org 7BF8h
.data:00007BF8 ; COMDAT (pick any)
.data:00007BF8                 public ??_R0?AUIUnknown@@@8
.data:00007BF8 ; struct IUnknown `RTTI Type Descriptor'
.data:00007BF8 ??_R0?AUIUnknown@@@8 dd offset ??_7type_info@@6B@
.data:00007BF8                                         ; DATA XREF: .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00007BF8                                         ; .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'o ...
.data:00007BF8                                         ; const type_info::`vftable'
.data:00007BFC                 align 10h
.data:00007C00 a_?auiunknown@@ db '.?AUIUnknown@@',0
.data:00007C0F                 align 10h
.data:00007C0F _data           ends
.data:00007C0F
.rdata$r:00007C10 ; ===========================================================================
.rdata$r:00007C10
.rdata$r:00007C10 ; Segment type: Pure data
.rdata$r:00007C10 ; Segment permissions: Read
.rdata$r:00007C10 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007C10                 assume cs:_rdata$r
.rdata$r:00007C10                 ;org 7C10h
.rdata$r:00007C10 ; COMDAT (pick any)
.rdata$r:00007C10                 public ??_R3IUnknown@@8
.rdata$r:00007C10 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007C10 ??_R3IUnknown@@8 db    0                ; DATA XREF: .rdata$r:00007BF4o
.rdata$r:00007C10                                         ; .rdata$r:00007C40o ...
.rdata$r:00007C11                 db    0
.rdata$r:00007C12                 db    0
.rdata$r:00007C13                 db    0
.rdata$r:00007C14                 db    0
.rdata$r:00007C15                 db    0
.rdata$r:00007C16                 db    0
.rdata$r:00007C17                 db    0
.rdata$r:00007C18                 db    1
.rdata$r:00007C19                 db    0
.rdata$r:00007C1A                 db    0
.rdata$r:00007C1B                 db    0
.rdata$r:00007C1C                 dd offset ??_R2IUnknown@@8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00007C1C _rdata$r        ends
.rdata$r:00007C1C
.rdata$r:00007C20 ; ===========================================================================
.rdata$r:00007C20
.rdata$r:00007C20 ; Segment type: Pure data
.rdata$r:00007C20 ; Segment permissions: Read
.rdata$r:00007C20 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007C20                 assume cs:_rdata$r
.rdata$r:00007C20                 ;org 7C20h
.rdata$r:00007C20 ; COMDAT (pick any)
.rdata$r:00007C20                 public ??_R2IUnknown@@8
.rdata$r:00007C20 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00007C20 ??_R2IUnknown@@8 dd offset ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00007C20                                         ; DATA XREF: .rdata$r:00007C1Co
.rdata$r:00007C20                                         ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00007C24                 db    0
.rdata$r:00007C25                 align 4
.rdata$r:00007C25 _rdata$r        ends
.rdata$r:00007C25
.rdata$r:00007C28 ; ===========================================================================
.rdata$r:00007C28
.rdata$r:00007C28 ; Segment type: Pure data
.rdata$r:00007C28 ; Segment permissions: Read
.rdata$r:00007C28 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007C28                 assume cs:_rdata$r
.rdata$r:00007C28                 ;org 7C28h
.rdata$r:00007C28 ; COMDAT (pick any)
.rdata$r:00007C28                 public ??_R1A@?0A@EC@IUnknown@@8
.rdata$r:00007C28 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 66)'
.rdata$r:00007C28 ??_R1A@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00007C28                                         ; DATA XREF: .rdata$r:00007B44o
.rdata$r:00007C28                                         ; .rdata$r:0000A940o ...
.rdata$r:00007C28                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00007C2C                 db    0
.rdata$r:00007C2D                 db    0
.rdata$r:00007C2E                 db    0
.rdata$r:00007C2F                 db    0
.rdata$r:00007C30                 db    0
.rdata$r:00007C31                 db    0
.rdata$r:00007C32                 db    0
.rdata$r:00007C33                 db    0
.rdata$r:00007C34                 db 0FFh
.rdata$r:00007C35                 db 0FFh
.rdata$r:00007C36                 db 0FFh
.rdata$r:00007C37                 db 0FFh
.rdata$r:00007C38                 db    0
.rdata$r:00007C39                 db    0
.rdata$r:00007C3A                 db    0
.rdata$r:00007C3B                 db    0
.rdata$r:00007C3C                 db  42h ; B
.rdata$r:00007C3D                 db    0
.rdata$r:00007C3E                 db    0
.rdata$r:00007C3F                 db    0
.rdata$r:00007C40                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007C40 _rdata$r        ends
.rdata$r:00007C40
.rdata$r:00007C44 ; ===========================================================================
.rdata$r:00007C44
.rdata$r:00007C44 ; Segment type: Pure data
.rdata$r:00007C44 ; Segment permissions: Read
.rdata$r:00007C44 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007C44                 assume cs:_rdata$r
.rdata$r:00007C44                 ;org 7C44h
.rdata$r:00007C44 ; COMDAT (pick any)
.rdata$r:00007C44                 public ??_R13?0A@EA@ICompressSetInStream@@8
.rdata$r:00007C44 ; ICompressSetInStream::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:00007C44 ??_R13?0A@EA@ICompressSetInStream@@8 dd offset ??_R0?AUICompressSetInStream@@@8
.rdata$r:00007C44                                         ; DATA XREF: .rdata$r:00007B48o
.rdata$r:00007C44                                         ; ICompressSetInStream `RTTI Type Descriptor'
.rdata$r:00007C48                 db    1
.rdata$r:00007C49                 db    0
.rdata$r:00007C4A                 db    0
.rdata$r:00007C4B                 db    0
.rdata$r:00007C4C                 db    4
.rdata$r:00007C4D                 db    0
.rdata$r:00007C4E                 db    0
.rdata$r:00007C4F                 db    0
.rdata$r:00007C50                 db 0FFh
.rdata$r:00007C51                 db 0FFh
.rdata$r:00007C52                 db 0FFh
.rdata$r:00007C53                 db 0FFh
.rdata$r:00007C54                 db    0
.rdata$r:00007C55                 db    0
.rdata$r:00007C56                 db    0
.rdata$r:00007C57                 db    0
.rdata$r:00007C58                 db  40h ; @
.rdata$r:00007C59                 db    0
.rdata$r:00007C5A                 db    0
.rdata$r:00007C5B                 db    0
.rdata$r:00007C5C                 dd offset ??_R3ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007C5C _rdata$r        ends
.rdata$r:00007C5C
.data:00007C60 ; ===========================================================================
.data:00007C60
.data:00007C60 ; Segment type: Pure data
.data:00007C60 ; Segment permissions: Read/Write
.data:00007C60 _data           segment dword public 'DATA' use32
.data:00007C60                 assume cs:_data
.data:00007C60                 ;org 7C60h
.data:00007C60 ; COMDAT (pick any)
.data:00007C60                 public ??_R0?AUICompressSetInStream@@@8
.data:00007C60 ; struct ICompressSetInStream `RTTI Type Descriptor'
.data:00007C60 ??_R0?AUICompressSetInStream@@@8 dd offset ??_7type_info@@6B@
.data:00007C60                                         ; DATA XREF: .rdata$r:ICompressSetInStream::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:00007C60                                         ; .rdata$r:ICompressSetInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00007C60                                         ; const type_info::`vftable'
.data:00007C64                 align 8
.data:00007C68 a_?auicompresss db '.?AUICompressSetInStream@@',0
.data:00007C83                 align 4
.data:00007C83 _data           ends
.data:00007C83
.rdata$r:00007C84 ; ===========================================================================
.rdata$r:00007C84
.rdata$r:00007C84 ; Segment type: Pure data
.rdata$r:00007C84 ; Segment permissions: Read
.rdata$r:00007C84 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007C84                 assume cs:_rdata$r
.rdata$r:00007C84                 ;org 7C84h
.rdata$r:00007C84 ; COMDAT (pick any)
.rdata$r:00007C84                 public ??_R3ICompressSetInStream@@8
.rdata$r:00007C84 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007C84 ??_R3ICompressSetInStream@@8 db    0    ; DATA XREF: .rdata$r:00007C5Co
.rdata$r:00007C84                                         ; .rdata$r:00007CB8o ...
.rdata$r:00007C85                 db    0
.rdata$r:00007C86                 db    0
.rdata$r:00007C87                 db    0
.rdata$r:00007C88                 db    0
.rdata$r:00007C89                 db    0
.rdata$r:00007C8A                 db    0
.rdata$r:00007C8B                 db    0
.rdata$r:00007C8C                 db    2
.rdata$r:00007C8D                 db    0
.rdata$r:00007C8E                 db    0
.rdata$r:00007C8F                 db    0
.rdata$r:00007C90                 dd offset ??_R2ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Base Class Array'
.rdata$r:00007C90 _rdata$r        ends
.rdata$r:00007C90
.rdata$r:00007C94 ; ===========================================================================
.rdata$r:00007C94
.rdata$r:00007C94 ; Segment type: Pure data
.rdata$r:00007C94 ; Segment permissions: Read
.rdata$r:00007C94 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007C94                 assume cs:_rdata$r
.rdata$r:00007C94                 ;org 7C94h
.rdata$r:00007C94 ; COMDAT (pick any)
.rdata$r:00007C94                 public ??_R2ICompressSetInStream@@8
.rdata$r:00007C94 ; ICompressSetInStream::`RTTI Base Class Array'
.rdata$r:00007C94 ??_R2ICompressSetInStream@@8 dd offset ??_R1A@?0A@EA@ICompressSetInStream@@8
.rdata$r:00007C94                                         ; DATA XREF: .rdata$r:00007C90o
.rdata$r:00007C94                                         ; ICompressSetInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00007C98                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00007C9C                 db    0
.rdata$r:00007C9D                 align 10h
.rdata$r:00007C9D _rdata$r        ends
.rdata$r:00007C9D
.rdata$r:00007CA0 ; ===========================================================================
.rdata$r:00007CA0
.rdata$r:00007CA0 ; Segment type: Pure data
.rdata$r:00007CA0 ; Segment permissions: Read
.rdata$r:00007CA0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007CA0                 assume cs:_rdata$r
.rdata$r:00007CA0                 ;org 7CA0h
.rdata$r:00007CA0 ; COMDAT (pick any)
.rdata$r:00007CA0                 public ??_R1A@?0A@EA@ICompressSetInStream@@8
.rdata$r:00007CA0 ; ICompressSetInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00007CA0 ??_R1A@?0A@EA@ICompressSetInStream@@8 dd offset ??_R0?AUICompressSetInStream@@@8
.rdata$r:00007CA0                                         ; DATA XREF: .rdata$r:ICompressSetInStream::`RTTI Base Class Array'o
.rdata$r:00007CA0                                         ; ICompressSetInStream `RTTI Type Descriptor'
.rdata$r:00007CA4                 db    1
.rdata$r:00007CA5                 db    0
.rdata$r:00007CA6                 db    0
.rdata$r:00007CA7                 db    0
.rdata$r:00007CA8                 db    0
.rdata$r:00007CA9                 db    0
.rdata$r:00007CAA                 db    0
.rdata$r:00007CAB                 db    0
.rdata$r:00007CAC                 db 0FFh
.rdata$r:00007CAD                 db 0FFh
.rdata$r:00007CAE                 db 0FFh
.rdata$r:00007CAF                 db 0FFh
.rdata$r:00007CB0                 db    0
.rdata$r:00007CB1                 db    0
.rdata$r:00007CB2                 db    0
.rdata$r:00007CB3                 db    0
.rdata$r:00007CB4                 db  40h ; @
.rdata$r:00007CB5                 db    0
.rdata$r:00007CB6                 db    0
.rdata$r:00007CB7                 db    0
.rdata$r:00007CB8                 dd offset ??_R3ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007CB8 _rdata$r        ends
.rdata$r:00007CB8
.rdata$r:00007CBC ; ===========================================================================
.rdata$r:00007CBC
.rdata$r:00007CBC ; Segment type: Pure data
.rdata$r:00007CBC ; Segment permissions: Read
.rdata$r:00007CBC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007CBC                 assume cs:_rdata$r
.rdata$r:00007CBC                 ;org 7CBCh
.rdata$r:00007CBC ; COMDAT (pick any)
.rdata$r:00007CBC                 public ??_R13?0A@EC@IUnknown@@8
.rdata$r:00007CBC ; IUnknown::`RTTI Base Class Descriptor at (4, -1, 0, 66)'
.rdata$r:00007CBC ??_R13?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00007CBC                                         ; DATA XREF: .rdata$r:00007B4Co
.rdata$r:00007CBC                                         ; .rdata$r:0000A948o ...
.rdata$r:00007CBC                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00007CC0                 db    0
.rdata$r:00007CC1                 db    0
.rdata$r:00007CC2                 db    0
.rdata$r:00007CC3                 db    0
.rdata$r:00007CC4                 db    4
.rdata$r:00007CC5                 db    0
.rdata$r:00007CC6                 db    0
.rdata$r:00007CC7                 db    0
.rdata$r:00007CC8                 db 0FFh
.rdata$r:00007CC9                 db 0FFh
.rdata$r:00007CCA                 db 0FFh
.rdata$r:00007CCB                 db 0FFh
.rdata$r:00007CCC                 db    0
.rdata$r:00007CCD                 db    0
.rdata$r:00007CCE                 db    0
.rdata$r:00007CCF                 db    0
.rdata$r:00007CD0                 db  42h ; B
.rdata$r:00007CD1                 db    0
.rdata$r:00007CD2                 db    0
.rdata$r:00007CD3                 db    0
.rdata$r:00007CD4                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007CD4 _rdata$r        ends
.rdata$r:00007CD4
.rdata$r:00007CD8 ; ===========================================================================
.rdata$r:00007CD8
.rdata$r:00007CD8 ; Segment type: Pure data
.rdata$r:00007CD8 ; Segment permissions: Read
.rdata$r:00007CD8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007CD8                 assume cs:_rdata$r
.rdata$r:00007CD8                 ;org 7CD8h
.rdata$r:00007CD8 ; COMDAT (pick any)
.rdata$r:00007CD8                 public ??_R17?0A@EA@ISequentialInStream@@8
.rdata$r:00007CD8 ; ISequentialInStream::`RTTI Base Class Descriptor at (8, -1, 0, 64)'
.rdata$r:00007CD8 ??_R17?0A@EA@ISequentialInStream@@8 dd offset ??_R0?AUISequentialInStream@@@8
.rdata$r:00007CD8                                         ; DATA XREF: .rdata$r:00007B50o
.rdata$r:00007CD8                                         ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:00007CDC                 db    1
.rdata$r:00007CDD                 db    0
.rdata$r:00007CDE                 db    0
.rdata$r:00007CDF                 db    0
.rdata$r:00007CE0                 db    8
.rdata$r:00007CE1                 db    0
.rdata$r:00007CE2                 db    0
.rdata$r:00007CE3                 db    0
.rdata$r:00007CE4                 db 0FFh
.rdata$r:00007CE5                 db 0FFh
.rdata$r:00007CE6                 db 0FFh
.rdata$r:00007CE7                 db 0FFh
.rdata$r:00007CE8                 db    0
.rdata$r:00007CE9                 db    0
.rdata$r:00007CEA                 db    0
.rdata$r:00007CEB                 db    0
.rdata$r:00007CEC                 db  40h ; @
.rdata$r:00007CED                 db    0
.rdata$r:00007CEE                 db    0
.rdata$r:00007CEF                 db    0
.rdata$r:00007CF0                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007CF0 _rdata$r        ends
.rdata$r:00007CF0
.data:00007CF4 ; ===========================================================================
.data:00007CF4
.data:00007CF4 ; Segment type: Pure data
.data:00007CF4 ; Segment permissions: Read/Write
.data:00007CF4 _data           segment dword public 'DATA' use32
.data:00007CF4                 assume cs:_data
.data:00007CF4                 ;org 7CF4h
.data:00007CF4 ; COMDAT (pick any)
.data:00007CF4                 public ??_R0?AUISequentialInStream@@@8
.data:00007CF4 ; struct ISequentialInStream `RTTI Type Descriptor'
.data:00007CF4 ??_R0?AUISequentialInStream@@@8 dd offset ??_7type_info@@6B@
.data:00007CF4                                         ; DATA XREF: .rdata$r:ISequentialInStream::`RTTI Base Class Descriptor at (8,-1,0,64)'o
.data:00007CF4                                         ; .rdata$r:ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00007CF4                                         ; const type_info::`vftable'
.data:00007CF8                 db    0
.data:00007CF9                 db    0
.data:00007CFA                 db    0
.data:00007CFB                 db    0
.data:00007CFC                 db  2Eh ; .
.data:00007CFD                 db  3Fh ; ?
.data:00007CFE                 db  41h ; A
.data:00007CFF                 db  55h ; U
.data:00007D00                 db  49h ; I
.data:00007D01                 db  53h ; S
.data:00007D02                 db  65h ; e
.data:00007D03                 db  71h ; q
.data:00007D04                 db  75h ; u
.data:00007D05                 db  65h ; e
.data:00007D06                 db  6Eh ; n
.data:00007D07                 db  74h ; t
.data:00007D08                 db  69h ; i
.data:00007D09                 db  61h ; a
.data:00007D0A                 db  6Ch ; l
.data:00007D0B                 db  49h ; I
.data:00007D0C                 db  6Eh ; n
.data:00007D0D                 db  53h ; S
.data:00007D0E                 db  74h ; t
.data:00007D0F                 db  72h ; r
.data:00007D10                 db  65h ; e
.data:00007D11                 db  61h ; a
.data:00007D12                 db  6Dh ; m
.data:00007D13                 db  40h ; @
.data:00007D14                 db  40h ; @
.data:00007D15                 db    0
.data:00007D16                 align 4
.data:00007D16 _data           ends
.data:00007D16
.rdata$r:00007D18 ; ===========================================================================
.rdata$r:00007D18
.rdata$r:00007D18 ; Segment type: Pure data
.rdata$r:00007D18 ; Segment permissions: Read
.rdata$r:00007D18 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007D18                 assume cs:_rdata$r
.rdata$r:00007D18                 ;org 7D18h
.rdata$r:00007D18 ; COMDAT (pick any)
.rdata$r:00007D18                 public ??_R3ISequentialInStream@@8
.rdata$r:00007D18 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007D18 ??_R3ISequentialInStream@@8 db    0     ; DATA XREF: .rdata$r:00007CF0o
.rdata$r:00007D18                                         ; .rdata$r:00007D4Co ...
.rdata$r:00007D19                 db    0
.rdata$r:00007D1A                 db    0
.rdata$r:00007D1B                 db    0
.rdata$r:00007D1C                 db    0
.rdata$r:00007D1D                 db    0
.rdata$r:00007D1E                 db    0
.rdata$r:00007D1F                 db    0
.rdata$r:00007D20                 db    2
.rdata$r:00007D21                 db    0
.rdata$r:00007D22                 db    0
.rdata$r:00007D23                 db    0
.rdata$r:00007D24                 dd offset ??_R2ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Array'
.rdata$r:00007D24 _rdata$r        ends
.rdata$r:00007D24
.rdata$r:00007D28 ; ===========================================================================
.rdata$r:00007D28
.rdata$r:00007D28 ; Segment type: Pure data
.rdata$r:00007D28 ; Segment permissions: Read
.rdata$r:00007D28 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007D28                 assume cs:_rdata$r
.rdata$r:00007D28                 ;org 7D28h
.rdata$r:00007D28 ; COMDAT (pick any)
.rdata$r:00007D28                 public ??_R2ISequentialInStream@@8
.rdata$r:00007D28 ; ISequentialInStream::`RTTI Base Class Array'
.rdata$r:00007D28 ??_R2ISequentialInStream@@8 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8
.rdata$r:00007D28                                         ; DATA XREF: .rdata$r:00007D24o
.rdata$r:00007D28                                         ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00007D2C                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00007D30                 db    0
.rdata$r:00007D31                 align 4
.rdata$r:00007D31 _rdata$r        ends
.rdata$r:00007D31
.rdata$r:00007D34 ; ===========================================================================
.rdata$r:00007D34
.rdata$r:00007D34 ; Segment type: Pure data
.rdata$r:00007D34 ; Segment permissions: Read
.rdata$r:00007D34 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007D34                 assume cs:_rdata$r
.rdata$r:00007D34                 ;org 7D34h
.rdata$r:00007D34 ; COMDAT (pick any)
.rdata$r:00007D34                 public ??_R1A@?0A@EA@ISequentialInStream@@8
.rdata$r:00007D34 ; ISequentialInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00007D34 ??_R1A@?0A@EA@ISequentialInStream@@8 dd offset ??_R0?AUISequentialInStream@@@8
.rdata$r:00007D34                                         ; DATA XREF: .rdata$r:ISequentialInStream::`RTTI Base Class Array'o
.rdata$r:00007D34                                         ; .rdata$r:0000834Co ...
.rdata$r:00007D34                                         ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:00007D38                 db    1
.rdata$r:00007D39                 db    0
.rdata$r:00007D3A                 db    0
.rdata$r:00007D3B                 db    0
.rdata$r:00007D3C                 db    0
.rdata$r:00007D3D                 db    0
.rdata$r:00007D3E                 db    0
.rdata$r:00007D3F                 db    0
.rdata$r:00007D40                 db 0FFh
.rdata$r:00007D41                 db 0FFh
.rdata$r:00007D42                 db 0FFh
.rdata$r:00007D43                 db 0FFh
.rdata$r:00007D44                 db    0
.rdata$r:00007D45                 db    0
.rdata$r:00007D46                 db    0
.rdata$r:00007D47                 db    0
.rdata$r:00007D48                 db  40h ; @
.rdata$r:00007D49                 db    0
.rdata$r:00007D4A                 db    0
.rdata$r:00007D4B                 db    0
.rdata$r:00007D4C                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007D4C _rdata$r        ends
.rdata$r:00007D4C
.rdata$r:00007D50 ; ===========================================================================
.rdata$r:00007D50
.rdata$r:00007D50 ; Segment type: Pure data
.rdata$r:00007D50 ; Segment permissions: Read
.rdata$r:00007D50 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007D50                 assume cs:_rdata$r
.rdata$r:00007D50                 ;org 7D50h
.rdata$r:00007D50 ; COMDAT (pick any)
.rdata$r:00007D50                 public ??_R17?0A@EC@IUnknown@@8
.rdata$r:00007D50 ; IUnknown::`RTTI Base Class Descriptor at (8, -1, 0, 66)'
.rdata$r:00007D50 ??_R17?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00007D50                                         ; DATA XREF: .rdata$r:00007B54o
.rdata$r:00007D50                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00007D54                 align 8
.rdata$r:00007D58                 db    8
.rdata$r:00007D59                 db    0
.rdata$r:00007D5A                 db    0
.rdata$r:00007D5B                 db    0
.rdata$r:00007D5C                 db 0FFh
.rdata$r:00007D5D                 db 0FFh
.rdata$r:00007D5E                 db 0FFh
.rdata$r:00007D5F                 db 0FFh
.rdata$r:00007D60                 db    0
.rdata$r:00007D61                 db    0
.rdata$r:00007D62                 db    0
.rdata$r:00007D63                 db    0
.rdata$r:00007D64                 db  42h ; B
.rdata$r:00007D65                 db    0
.rdata$r:00007D66                 db    0
.rdata$r:00007D67                 db    0
.rdata$r:00007D68                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007D68 _rdata$r        ends
.rdata$r:00007D68
.rdata$r:00007D6C ; ===========================================================================
.rdata$r:00007D6C
.rdata$r:00007D6C ; Segment type: Pure data
.rdata$r:00007D6C ; Segment permissions: Read
.rdata$r:00007D6C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007D6C                 assume cs:_rdata$r
.rdata$r:00007D6C                 ;org 7D6Ch
.rdata$r:00007D6C ; COMDAT (pick any)
.rdata$r:00007D6C                 public ??_R1M@?0A@EA@ICompressGetInStreamProcessedSize@@8
.rdata$r:00007D6C ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (12, -1, 0, 64)'
.rdata$r:00007D6C ??_R1M@?0A@EA@ICompressGetInStreamProcessedSize@@8 dd offset ??_R0?AUICompressGetInStreamProcessedSize@@@8
.rdata$r:00007D6C                                         ; DATA XREF: .rdata$r:00007B58o
.rdata$r:00007D6C                                         ; ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
.rdata$r:00007D70                 db    1
.rdata$r:00007D71                 db    0
.rdata$r:00007D72                 db    0
.rdata$r:00007D73                 db    0
.rdata$r:00007D74                 db  0Ch
.rdata$r:00007D75                 db    0
.rdata$r:00007D76                 db    0
.rdata$r:00007D77                 db    0
.rdata$r:00007D78                 db 0FFh
.rdata$r:00007D79                 db 0FFh
.rdata$r:00007D7A                 db 0FFh
.rdata$r:00007D7B                 db 0FFh
.rdata$r:00007D7C                 db    0
.rdata$r:00007D7D                 db    0
.rdata$r:00007D7E                 db    0
.rdata$r:00007D7F                 db    0
.rdata$r:00007D80                 db  40h ; @
.rdata$r:00007D81                 db    0
.rdata$r:00007D82                 db    0
.rdata$r:00007D83                 db    0
.rdata$r:00007D84                 dd offset ??_R3ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007D84 _rdata$r        ends
.rdata$r:00007D84
.data:00007D88 ; ===========================================================================
.data:00007D88
.data:00007D88 ; Segment type: Pure data
.data:00007D88 ; Segment permissions: Read/Write
.data:00007D88 _data           segment dword public 'DATA' use32
.data:00007D88                 assume cs:_data
.data:00007D88                 ;org 7D88h
.data:00007D88 ; COMDAT (pick any)
.data:00007D88                 public ??_R0?AUICompressGetInStreamProcessedSize@@@8
.data:00007D88 ; struct ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
.data:00007D88 ??_R0?AUICompressGetInStreamProcessedSize@@@8 dd offset ??_7type_info@@6B@
.data:00007D88                                         ; DATA XREF: .rdata$r:ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (12,-1,0,64)'o
.data:00007D88                                         ; .rdata$r:ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00007D88                                         ; const type_info::`vftable'
.data:00007D8C                 align 10h
.data:00007D90 a_?auicompressg db '.?AUICompressGetInStreamProcessedSize@@',0
.data:00007D90 _data           ends
.data:00007D90
.rdata$r:00007DB8 ; ===========================================================================
.rdata$r:00007DB8
.rdata$r:00007DB8 ; Segment type: Pure data
.rdata$r:00007DB8 ; Segment permissions: Read
.rdata$r:00007DB8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007DB8                 assume cs:_rdata$r
.rdata$r:00007DB8                 ;org 7DB8h
.rdata$r:00007DB8 ; COMDAT (pick any)
.rdata$r:00007DB8                 public ??_R3ICompressGetInStreamProcessedSize@@8
.rdata$r:00007DB8 ; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007DB8 ??_R3ICompressGetInStreamProcessedSize@@8 db    0
.rdata$r:00007DB8                                         ; DATA XREF: .rdata$r:00007D84o
.rdata$r:00007DB8                                         ; .rdata$r:00007DECo ...
.rdata$r:00007DB9                 db    0
.rdata$r:00007DBA                 db    0
.rdata$r:00007DBB                 db    0
.rdata$r:00007DBC                 db    0
.rdata$r:00007DBD                 db    0
.rdata$r:00007DBE                 db    0
.rdata$r:00007DBF                 db    0
.rdata$r:00007DC0                 db    2
.rdata$r:00007DC1                 db    0
.rdata$r:00007DC2                 db    0
.rdata$r:00007DC3                 db    0
.rdata$r:00007DC4                 dd offset ??_R2ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Array'
.rdata$r:00007DC4 _rdata$r        ends
.rdata$r:00007DC4
.rdata$r:00007DC8 ; ===========================================================================
.rdata$r:00007DC8
.rdata$r:00007DC8 ; Segment type: Pure data
.rdata$r:00007DC8 ; Segment permissions: Read
.rdata$r:00007DC8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007DC8                 assume cs:_rdata$r
.rdata$r:00007DC8                 ;org 7DC8h
.rdata$r:00007DC8 ; COMDAT (pick any)
.rdata$r:00007DC8                 public ??_R2ICompressGetInStreamProcessedSize@@8
.rdata$r:00007DC8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Array'
.rdata$r:00007DC8 ??_R2ICompressGetInStreamProcessedSize@@8 dd offset ??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8
.rdata$r:00007DC8                                         ; DATA XREF: .rdata$r:00007DC4o
.rdata$r:00007DC8                                         ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00007DCC                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00007DD0                 db    0
.rdata$r:00007DD1                 align 4
.rdata$r:00007DD1 _rdata$r        ends
.rdata$r:00007DD1
.rdata$r:00007DD4 ; ===========================================================================
.rdata$r:00007DD4
.rdata$r:00007DD4 ; Segment type: Pure data
.rdata$r:00007DD4 ; Segment permissions: Read
.rdata$r:00007DD4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007DD4                 assume cs:_rdata$r
.rdata$r:00007DD4                 ;org 7DD4h
.rdata$r:00007DD4 ; COMDAT (pick any)
.rdata$r:00007DD4                 public ??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8
.rdata$r:00007DD4 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00007DD4 ??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8 dd offset ??_R0?AUICompressGetInStreamProcessedSize@@@8
.rdata$r:00007DD4                                         ; DATA XREF: .rdata$r:ICompressGetInStreamProcessedSize::`RTTI Base Class Array'o
.rdata$r:00007DD4                                         ; ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
.rdata$r:00007DD8                 db    1
.rdata$r:00007DD9                 db    0
.rdata$r:00007DDA                 db    0
.rdata$r:00007DDB                 db    0
.rdata$r:00007DDC                 db    0
.rdata$r:00007DDD                 db    0
.rdata$r:00007DDE                 db    0
.rdata$r:00007DDF                 db    0
.rdata$r:00007DE0                 db 0FFh
.rdata$r:00007DE1                 db 0FFh
.rdata$r:00007DE2                 db 0FFh
.rdata$r:00007DE3                 db 0FFh
.rdata$r:00007DE4                 db    0
.rdata$r:00007DE5                 db    0
.rdata$r:00007DE6                 db    0
.rdata$r:00007DE7                 db    0
.rdata$r:00007DE8                 db  40h ; @
.rdata$r:00007DE9                 db    0
.rdata$r:00007DEA                 db    0
.rdata$r:00007DEB                 db    0
.rdata$r:00007DEC                 dd offset ??_R3ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007DEC _rdata$r        ends
.rdata$r:00007DEC
.rdata$r:00007DF0 ; ===========================================================================
.rdata$r:00007DF0
.rdata$r:00007DF0 ; Segment type: Pure data
.rdata$r:00007DF0 ; Segment permissions: Read
.rdata$r:00007DF0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007DF0                 assume cs:_rdata$r
.rdata$r:00007DF0                 ;org 7DF0h
.rdata$r:00007DF0 ; COMDAT (pick any)
.rdata$r:00007DF0                 public ??_R1M@?0A@EC@IUnknown@@8
.rdata$r:00007DF0 ; IUnknown::`RTTI Base Class Descriptor at (12, -1, 0, 66)'
.rdata$r:00007DF0 ??_R1M@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00007DF0                                         ; DATA XREF: .rdata$r:00007B5Co
.rdata$r:00007DF0                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00007DF4                 align 8
.rdata$r:00007DF8                 db  0Ch
.rdata$r:00007DF9                 db    0
.rdata$r:00007DFA                 db    0
.rdata$r:00007DFB                 db    0
.rdata$r:00007DFC                 db 0FFh
.rdata$r:00007DFD                 db 0FFh
.rdata$r:00007DFE                 db 0FFh
.rdata$r:00007DFF                 db 0FFh
.rdata$r:00007E00                 db    0
.rdata$r:00007E01                 db    0
.rdata$r:00007E02                 db    0
.rdata$r:00007E03                 db    0
.rdata$r:00007E04                 db  42h ; B
.rdata$r:00007E05                 db    0
.rdata$r:00007E06                 db    0
.rdata$r:00007E07                 db    0
.rdata$r:00007E08                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007E08 _rdata$r        ends
.rdata$r:00007E08
.rdata$r:00007E0C ; ===========================================================================
.rdata$r:00007E0C
.rdata$r:00007E0C ; Segment type: Pure data
.rdata$r:00007E0C ; Segment permissions: Read
.rdata$r:00007E0C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007E0C                 assume cs:_rdata$r
.rdata$r:00007E0C                 ;org 7E0Ch
.rdata$r:00007E0C ; COMDAT (pick any)
.rdata$r:00007E0C                 public ??_R1BA@?0A@EA@CMyUnknownImp@@8
.rdata$r:00007E0C ; CMyUnknownImp::`RTTI Base Class Descriptor at (16, -1, 0, 64)'
.rdata$r:00007E0C ??_R1BA@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00007E0C                                         ; DATA XREF: .rdata$r:00007B60o
.rdata$r:00007E0C                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00007E10                 db    0
.rdata$r:00007E11                 db    0
.rdata$r:00007E12                 db    0
.rdata$r:00007E13                 db    0
.rdata$r:00007E14                 db  10h
.rdata$r:00007E15                 db    0
.rdata$r:00007E16                 db    0
.rdata$r:00007E17                 db    0
.rdata$r:00007E18                 db 0FFh
.rdata$r:00007E19                 db 0FFh
.rdata$r:00007E1A                 db 0FFh
.rdata$r:00007E1B                 db 0FFh
.rdata$r:00007E1C                 db    0
.rdata$r:00007E1D                 db    0
.rdata$r:00007E1E                 db    0
.rdata$r:00007E1F                 db    0
.rdata$r:00007E20                 db  40h ; @
.rdata$r:00007E21                 db    0
.rdata$r:00007E22                 db    0
.rdata$r:00007E23                 db    0
.rdata$r:00007E24                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007E24 _rdata$r        ends
.rdata$r:00007E24
.data:00007E28 ; ===========================================================================
.data:00007E28
.data:00007E28 ; Segment type: Pure data
.data:00007E28 ; Segment permissions: Read/Write
.data:00007E28 _data           segment dword public 'DATA' use32
.data:00007E28                 assume cs:_data
.data:00007E28                 ;org 7E28h
.data:00007E28 ; COMDAT (pick any)
.data:00007E28                 public ??_R0?AVCMyUnknownImp@@@8
.data:00007E28 ; class CMyUnknownImp `RTTI Type Descriptor'
.data:00007E28 ??_R0?AVCMyUnknownImp@@@8 dd offset ??_7type_info@@6B@
.data:00007E28                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (16,-1,0,64)'o
.data:00007E28                                         ; .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00007E28                                         ; const type_info::`vftable'
.data:00007E2C                 align 10h
.data:00007E30 a_?avcmyunknown db '.?AVCMyUnknownImp@@',0
.data:00007E30 _data           ends
.data:00007E30
.rdata$r:00007E44 ; ===========================================================================
.rdata$r:00007E44
.rdata$r:00007E44 ; Segment type: Pure data
.rdata$r:00007E44 ; Segment permissions: Read
.rdata$r:00007E44 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007E44                 assume cs:_rdata$r
.rdata$r:00007E44                 ;org 7E44h
.rdata$r:00007E44 ; COMDAT (pick any)
.rdata$r:00007E44                 public ??_R3CMyUnknownImp@@8
.rdata$r:00007E44 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007E44 ??_R3CMyUnknownImp@@8 db    0           ; DATA XREF: .rdata$r:00007E24o
.rdata$r:00007E44                                         ; .rdata$r:00007E74o ...
.rdata$r:00007E45                 db    0
.rdata$r:00007E46                 db    0
.rdata$r:00007E47                 db    0
.rdata$r:00007E48                 db    0
.rdata$r:00007E49                 db    0
.rdata$r:00007E4A                 db    0
.rdata$r:00007E4B                 db    0
.rdata$r:00007E4C                 db    1
.rdata$r:00007E4D                 db    0
.rdata$r:00007E4E                 db    0
.rdata$r:00007E4F                 db    0
.rdata$r:00007E50                 dd offset ??_R2CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00007E50 _rdata$r        ends
.rdata$r:00007E50
.rdata$r:00007E54 ; ===========================================================================
.rdata$r:00007E54
.rdata$r:00007E54 ; Segment type: Pure data
.rdata$r:00007E54 ; Segment permissions: Read
.rdata$r:00007E54 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007E54                 assume cs:_rdata$r
.rdata$r:00007E54                 ;org 7E54h
.rdata$r:00007E54 ; COMDAT (pick any)
.rdata$r:00007E54                 public ??_R2CMyUnknownImp@@8
.rdata$r:00007E54 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00007E54 ??_R2CMyUnknownImp@@8 dd offset ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00007E54                                         ; DATA XREF: .rdata$r:00007E50o
.rdata$r:00007E54                                         ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00007E58                 db    0
.rdata$r:00007E59                 align 4
.rdata$r:00007E59 _rdata$r        ends
.rdata$r:00007E59
.rdata$r:00007E5C ; ===========================================================================
.rdata$r:00007E5C
.rdata$r:00007E5C ; Segment type: Pure data
.rdata$r:00007E5C ; Segment permissions: Read
.rdata$r:00007E5C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007E5C                 assume cs:_rdata$r
.rdata$r:00007E5C                 ;org 7E5Ch
.rdata$r:00007E5C ; COMDAT (pick any)
.rdata$r:00007E5C                 public ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00007E5C ; CMyUnknownImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00007E5C ??_R1A@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00007E5C                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Array'o
.rdata$r:00007E5C                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00007E60                 db    0
.rdata$r:00007E61                 db    0
.rdata$r:00007E62                 db    0
.rdata$r:00007E63                 db    0
.rdata$r:00007E64                 db    0
.rdata$r:00007E65                 db    0
.rdata$r:00007E66                 db    0
.rdata$r:00007E67                 db    0
.rdata$r:00007E68                 db 0FFh
.rdata$r:00007E69                 db 0FFh
.rdata$r:00007E6A                 db 0FFh
.rdata$r:00007E6B                 db 0FFh
.rdata$r:00007E6C                 db    0
.rdata$r:00007E6D                 db    0
.rdata$r:00007E6E                 db    0
.rdata$r:00007E6F                 db    0
.rdata$r:00007E70                 db  40h ; @
.rdata$r:00007E71                 db    0
.rdata$r:00007E72                 db    0
.rdata$r:00007E73                 db    0
.rdata$r:00007E74                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007E74 _rdata$r        ends
.rdata$r:00007E74
.rdata$r:00007E78 ; ===========================================================================
.rdata$r:00007E78
.rdata$r:00007E78 ; Segment type: Pure data
.rdata$r:00007E78 ; Segment permissions: Read
.rdata$r:00007E78 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007E78                 assume cs:_rdata$r
.rdata$r:00007E78                 ;org 7E78h
.rdata$r:00007E78 ; COMDAT (pick any)
.rdata$r:00007E78                 public ??_R4CCopyCoder@NCompress@@6BICompressSetInStream@@@
.rdata$r:00007E78 ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ICompressSetInStream'}
.rdata$r:00007E78 ??_R4CCopyCoder@NCompress@@6BICompressSetInStream@@@ db    0
.rdata$r:00007E78                                         ; DATA XREF: .rdata:00007AC8o
.rdata$r:00007E79                 db    0
.rdata$r:00007E7A                 db    0
.rdata$r:00007E7B                 db    0
.rdata$r:00007E7C                 db    4
.rdata$r:00007E7D                 db    0
.rdata$r:00007E7E                 db    0
.rdata$r:00007E7F                 db    0
.rdata$r:00007E80                 db    0
.rdata$r:00007E81                 db    0
.rdata$r:00007E82                 db    0
.rdata$r:00007E83                 db    0
.rdata$r:00007E84                 dd offset ??_R0?AVCCopyCoder@NCompress@@@8 ; NCompress::CCopyCoder `RTTI Type Descriptor'
.rdata$r:00007E88                 dd offset ??_R3CCopyCoder@NCompress@@8 ; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007E88 _rdata$r        ends
.rdata$r:00007E88
.rdata$r:00007E8C ; ===========================================================================
.rdata$r:00007E8C
.rdata$r:00007E8C ; Segment type: Pure data
.rdata$r:00007E8C ; Segment permissions: Read
.rdata$r:00007E8C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007E8C                 assume cs:_rdata$r
.rdata$r:00007E8C                 ;org 7E8Ch
.rdata$r:00007E8C ; COMDAT (pick any)
.rdata$r:00007E8C                 public ??_R4CCopyCoder@NCompress@@6BISequentialInStream@@@
.rdata$r:00007E8C ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ISequentialInStream'}
.rdata$r:00007E8C ??_R4CCopyCoder@NCompress@@6BISequentialInStream@@@ db    0
.rdata$r:00007E8C                                         ; DATA XREF: .rdata:00007AB4o
.rdata$r:00007E8D                 db    0
.rdata$r:00007E8E                 db    0
.rdata$r:00007E8F                 db    0
.rdata$r:00007E90                 db    8
.rdata$r:00007E91                 db    0
.rdata$r:00007E92                 db    0
.rdata$r:00007E93                 db    0
.rdata$r:00007E94                 db    0
.rdata$r:00007E95                 db    0
.rdata$r:00007E96                 db    0
.rdata$r:00007E97                 db    0
.rdata$r:00007E98                 dd offset ??_R0?AVCCopyCoder@NCompress@@@8 ; NCompress::CCopyCoder `RTTI Type Descriptor'
.rdata$r:00007E9C                 dd offset ??_R3CCopyCoder@NCompress@@8 ; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007E9C _rdata$r        ends
.rdata$r:00007E9C
.rdata$r:00007EA0 ; ===========================================================================
.rdata$r:00007EA0
.rdata$r:00007EA0 ; Segment type: Pure data
.rdata$r:00007EA0 ; Segment permissions: Read
.rdata$r:00007EA0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007EA0                 assume cs:_rdata$r
.rdata$r:00007EA0                 ;org 7EA0h
.rdata$r:00007EA0 ; COMDAT (pick any)
.rdata$r:00007EA0                 public ??_R4CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@
.rdata$r:00007EA0 ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ICompressGetInStreamProcessedSize'}
.rdata$r:00007EA0 ??_R4CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ db    0
.rdata$r:00007EA0                                         ; DATA XREF: .rdata:00007AA0o
.rdata$r:00007EA1                 db    0
.rdata$r:00007EA2                 db    0
.rdata$r:00007EA3                 db    0
.rdata$r:00007EA4                 db  0Ch
.rdata$r:00007EA5                 db    0
.rdata$r:00007EA6                 db    0
.rdata$r:00007EA7                 db    0
.rdata$r:00007EA8                 db    0
.rdata$r:00007EA9                 db    0
.rdata$r:00007EAA                 db    0
.rdata$r:00007EAB                 db    0
.rdata$r:00007EAC                 dd offset ??_R0?AVCCopyCoder@NCompress@@@8 ; NCompress::CCopyCoder `RTTI Type Descriptor'
.rdata$r:00007EB0                 dd offset ??_R3CCopyCoder@NCompress@@8 ; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007EB0 _rdata$r        ends
.rdata$r:00007EB0
.text:00007EB4 ; ===========================================================================
.text:00007EB4
.text:00007EB4 ; Segment type: Pure code
.text:00007EB4 ; Segment permissions: Read/Execute
.text:00007EB4 _text           segment para public 'CODE' use32
.text:00007EB4                 assume cs:_text
.text:00007EB4                 ;org 7EB4h
.text:00007EB4 ; COMDAT (pick any)
.text:00007EB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007EB4
.text:00007EB4 ; =============== S U B R O U T I N E =======================================
.text:00007EB4
.text:00007EB4 ; Attributes: bp-based frame
.text:00007EB4
.text:00007EB4 ; _DWORD __thiscall CMyUnknownImp::CMyUnknownImp(CMyUnknownImp *__hidden this)
.text:00007EB4                 public ??0CMyUnknownImp@@QAE@XZ
.text:00007EB4 ??0CMyUnknownImp@@QAE@XZ proc near      ; CODE XREF: NCompress::CCopyCoder::CCopyCoder(void)+3Dp
.text:00007EB4                                         ; CLimitedSequentialInStream::CLimitedSequentialInStream(void)+1Cp ...
.text:00007EB4
.text:00007EB4 var_4           = dword ptr -4
.text:00007EB4
.text:00007EB4                 push    ebp
.text:00007EB5                 mov     ebp, esp
.text:00007EB7                 push    ecx
.text:00007EB8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007EBF                 mov     [ebp+var_4], ecx
.text:00007EC2                 mov     eax, [ebp+var_4]
.text:00007EC5                 mov     dword ptr [eax], 0
.text:00007ECB                 mov     eax, [ebp+var_4]
.text:00007ECE                 mov     esp, ebp
.text:00007ED0                 pop     ebp
.text:00007ED1                 retn
.text:00007ED1 ??0CMyUnknownImp@@QAE@XZ endp
.text:00007ED1
.text:00007ED1 ; ---------------------------------------------------------------------------
.text:00007ED2                 align 4
.text:00007ED2 _text           ends
.text:00007ED2
.text:00007ED4 ; ===========================================================================
.text:00007ED4
.text:00007ED4 ; Segment type: Pure code
.text:00007ED4 ; Segment permissions: Read/Execute
.text:00007ED4 _text           segment para public 'CODE' use32
.text:00007ED4                 assume cs:_text
.text:00007ED4                 ;org 7ED4h
.text:00007ED4 ; COMDAT (pick any)
.text:00007ED4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007ED4
.text:00007ED4 ; =============== S U B R O U T I N E =======================================
.text:00007ED4
.text:00007ED4 ; Attributes: bp-based frame
.text:00007ED4
.text:00007ED4 ; __int32 __stdcall NCompress::CCopyCoder::QueryInterface(NCompress::CCopyCoder *this, const struct _GUID *Buf1, void **)
.text:00007ED4                 public ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z
.text:00007ED4 ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00007ED4                                         ; CODE XREF: [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j
.text:00007ED4                                         ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)+5j ...
.text:00007ED4
.text:00007ED4 var_C           = dword ptr -0Ch
.text:00007ED4 var_8           = dword ptr -8
.text:00007ED4 var_4           = dword ptr -4
.text:00007ED4 this            = dword ptr  8
.text:00007ED4 Buf1            = dword ptr  0Ch
.text:00007ED4 arg_8           = dword ptr  10h
.text:00007ED4
.text:00007ED4                 push    ebp
.text:00007ED5                 mov     ebp, esp
.text:00007ED7                 sub     esp, 0Ch
.text:00007EDA                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00007EE1                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00007EE8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007EEF                 mov     eax, [ebp+arg_8]
.text:00007EF2                 mov     dword ptr [eax], 0
.text:00007EF8                 push    offset _IID_IUnknown ; Buf2
.text:00007EFD                 mov     ecx, [ebp+Buf1]
.text:00007F00                 push    ecx             ; Buf1
.text:00007F01                 call    ___@8           ; __(x,x)
.text:00007F06                 test    eax, eax
.text:00007F08                 jz      short loc_7F17
.text:00007F0A                 mov     edx, [ebp+arg_8]
.text:00007F0D                 mov     eax, [ebp+this]
.text:00007F10                 mov     [edx], eax
.text:00007F12                 jmp     loc_7FD9
.text:00007F17 ; ---------------------------------------------------------------------------
.text:00007F17
.text:00007F17 loc_7F17:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+34j
.text:00007F17                 push    offset _IID_ICompressCoder ; Buf2
.text:00007F1C                 mov     ecx, [ebp+Buf1]
.text:00007F1F                 push    ecx             ; Buf1
.text:00007F20                 call    ___@8           ; __(x,x)
.text:00007F25                 test    eax, eax
.text:00007F27                 jz      short loc_7F36
.text:00007F29                 mov     edx, [ebp+arg_8]
.text:00007F2C                 mov     eax, [ebp+this]
.text:00007F2F                 mov     [edx], eax
.text:00007F31                 jmp     loc_7FD9
.text:00007F36 ; ---------------------------------------------------------------------------
.text:00007F36
.text:00007F36 loc_7F36:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+53j
.text:00007F36                 push    offset _IID_ICompressSetInStream ; Buf2
.text:00007F3B                 mov     ecx, [ebp+Buf1]
.text:00007F3E                 push    ecx             ; Buf1
.text:00007F3F                 call    ___@8           ; __(x,x)
.text:00007F44                 test    eax, eax
.text:00007F46                 jz      short loc_7F6A
.text:00007F48                 cmp     [ebp+this], 0
.text:00007F4C                 jz      short loc_7F59
.text:00007F4E                 mov     edx, [ebp+this]
.text:00007F51                 add     edx, 4
.text:00007F54                 mov     [ebp+var_4], edx
.text:00007F57                 jmp     short loc_7F60
.text:00007F59 ; ---------------------------------------------------------------------------
.text:00007F59
.text:00007F59 loc_7F59:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+78j
.text:00007F59                 mov     [ebp+var_4], 0
.text:00007F60
.text:00007F60 loc_7F60:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+83j
.text:00007F60                 mov     eax, [ebp+arg_8]
.text:00007F63                 mov     ecx, [ebp+var_4]
.text:00007F66                 mov     [eax], ecx
.text:00007F68                 jmp     short loc_7FD9
.text:00007F6A ; ---------------------------------------------------------------------------
.text:00007F6A
.text:00007F6A loc_7F6A:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+72j
.text:00007F6A                 push    offset _IID_ISequentialInStream ; Buf2
.text:00007F6F                 mov     edx, [ebp+Buf1]
.text:00007F72                 push    edx             ; Buf1
.text:00007F73                 call    ___@8           ; __(x,x)
.text:00007F78                 test    eax, eax
.text:00007F7A                 jz      short loc_7F9E
.text:00007F7C                 cmp     [ebp+this], 0
.text:00007F80                 jz      short loc_7F8D
.text:00007F82                 mov     eax, [ebp+this]
.text:00007F85                 add     eax, 8
.text:00007F88                 mov     [ebp+var_8], eax
.text:00007F8B                 jmp     short loc_7F94
.text:00007F8D ; ---------------------------------------------------------------------------
.text:00007F8D
.text:00007F8D loc_7F8D:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+ACj
.text:00007F8D                 mov     [ebp+var_8], 0
.text:00007F94
.text:00007F94 loc_7F94:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+B7j
.text:00007F94                 mov     ecx, [ebp+arg_8]
.text:00007F97                 mov     edx, [ebp+var_8]
.text:00007F9A                 mov     [ecx], edx
.text:00007F9C                 jmp     short loc_7FD9
.text:00007F9E ; ---------------------------------------------------------------------------
.text:00007F9E
.text:00007F9E loc_7F9E:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+A6j
.text:00007F9E                 push    offset _IID_ICompressGetInStreamProcessedSize ; Buf2
.text:00007FA3                 mov     eax, [ebp+Buf1]
.text:00007FA6                 push    eax             ; Buf1
.text:00007FA7                 call    ___@8           ; __(x,x)
.text:00007FAC                 test    eax, eax
.text:00007FAE                 jz      short loc_7FD2
.text:00007FB0                 cmp     [ebp+this], 0
.text:00007FB4                 jz      short loc_7FC1
.text:00007FB6                 mov     ecx, [ebp+this]
.text:00007FB9                 add     ecx, 0Ch
.text:00007FBC                 mov     [ebp+var_C], ecx
.text:00007FBF                 jmp     short loc_7FC8
.text:00007FC1 ; ---------------------------------------------------------------------------
.text:00007FC1
.text:00007FC1 loc_7FC1:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+E0j
.text:00007FC1                 mov     [ebp+var_C], 0
.text:00007FC8
.text:00007FC8 loc_7FC8:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+EBj
.text:00007FC8                 mov     edx, [ebp+arg_8]
.text:00007FCB                 mov     eax, [ebp+var_C]
.text:00007FCE                 mov     [edx], eax
.text:00007FD0                 jmp     short loc_7FD9
.text:00007FD2 ; ---------------------------------------------------------------------------
.text:00007FD2
.text:00007FD2 loc_7FD2:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+DAj
.text:00007FD2                 mov     eax, 80004002h
.text:00007FD7                 jmp     short loc_7FEA
.text:00007FD9 ; ---------------------------------------------------------------------------
.text:00007FD9
.text:00007FD9 loc_7FD9:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+3Ej
.text:00007FD9                                         ; NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+5Dj ...
.text:00007FD9                 mov     ecx, [ebp+this]
.text:00007FDC                 mov     edx, [ecx+10h]
.text:00007FDF                 add     edx, 1
.text:00007FE2                 mov     eax, [ebp+this]
.text:00007FE5                 mov     [eax+10h], edx
.text:00007FE8                 xor     eax, eax
.text:00007FEA
.text:00007FEA loc_7FEA:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+103j
.text:00007FEA                 add     esp, 0Ch
.text:00007FED                 cmp     ebp, esp
.text:00007FEF                 call    __RTC_CheckEsp
.text:00007FF4                 mov     esp, ebp
.text:00007FF6                 pop     ebp
.text:00007FF7                 retn    0Ch
.text:00007FF7 ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z endp
.text:00007FF7
.text:00007FF7 ; ---------------------------------------------------------------------------
.text:00007FFA                 align 4
.text:00007FFA _text           ends
.text:00007FFA
.text:00007FFC ; ===========================================================================
.text:00007FFC
.text:00007FFC ; Segment type: Pure code
.text:00007FFC ; Segment permissions: Read/Execute
.text:00007FFC _text           segment para public 'CODE' use32
.text:00007FFC                 assume cs:_text
.text:00007FFC                 ;org 7FFCh
.text:00007FFC ; COMDAT (pick any)
.text:00007FFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007FFC
.text:00007FFC ; =============== S U B R O U T I N E =======================================
.text:00007FFC
.text:00007FFC ; Attributes: bp-based frame
.text:00007FFC
.text:00007FFC ; int __stdcall __(void *Buf1, void *Buf2)
.text:00007FFC                 public ___@8
.text:00007FFC ___@8           proc near               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+2Dp
.text:00007FFC                                         ; NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+4Cp ...
.text:00007FFC
.text:00007FFC Buf1            = dword ptr  8
.text:00007FFC Buf2            = dword ptr  0Ch
.text:00007FFC
.text:00007FFC                 push    ebp
.text:00007FFD                 mov     ebp, esp
.text:00007FFF                 mov     eax, [ebp+Buf2]
.text:00008002                 push    eax             ; Buf2
.text:00008003                 mov     ecx, [ebp+Buf1]
.text:00008006                 push    ecx             ; Buf1
.text:00008007                 call    _IsEqualGUID@8  ; IsEqualGUID(x,x)
.text:0000800C                 cmp     ebp, esp
.text:0000800E                 call    __RTC_CheckEsp
.text:00008013                 pop     ebp
.text:00008014                 retn    8
.text:00008014 ___@8           endp
.text:00008014
.text:00008014 ; ---------------------------------------------------------------------------
.text:00008017                 align 4
.text:00008017 _text           ends
.text:00008017
.text:00008018 ; ===========================================================================
.text:00008018
.text:00008018 ; Segment type: Pure code
.text:00008018 ; Segment permissions: Read/Execute
.text:00008018 _text           segment para public 'CODE' use32
.text:00008018                 assume cs:_text
.text:00008018                 ;org 8018h
.text:00008018 ; COMDAT (pick any)
.text:00008018                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008018
.text:00008018 ; =============== S U B R O U T I N E =======================================
.text:00008018
.text:00008018 ; Attributes: bp-based frame
.text:00008018
.text:00008018 ; int __stdcall IsEqualGUID(void *Buf1, void *Buf2)
.text:00008018                 public _IsEqualGUID@8
.text:00008018 _IsEqualGUID@8  proc near               ; CODE XREF: __(x,x)+Bp
.text:00008018
.text:00008018 Buf1            = dword ptr  8
.text:00008018 Buf2            = dword ptr  0Ch
.text:00008018
.text:00008018                 push    ebp
.text:00008019                 mov     ebp, esp
.text:0000801B                 push    10h             ; Size
.text:0000801D                 mov     eax, [ebp+Buf2]
.text:00008020                 push    eax             ; Buf2
.text:00008021                 mov     ecx, [ebp+Buf1]
.text:00008024                 push    ecx             ; Buf1
.text:00008025                 call    _memcmp
.text:0000802A                 add     esp, 0Ch
.text:0000802D                 neg     eax
.text:0000802F                 sbb     eax, eax
.text:00008031                 add     eax, 1
.text:00008034                 cmp     ebp, esp
.text:00008036                 call    __RTC_CheckEsp
.text:0000803B                 pop     ebp
.text:0000803C                 retn    8
.text:0000803C _IsEqualGUID@8  endp
.text:0000803C
.text:0000803C ; ---------------------------------------------------------------------------
.text:0000803F                 align 10h
.text:0000803F _text           ends
.text:0000803F
.text:00008040 ; ===========================================================================
.text:00008040
.text:00008040 ; Segment type: Pure code
.text:00008040 ; Segment permissions: Read/Execute
.text:00008040 _text           segment para public 'CODE' use32
.text:00008040                 assume cs:_text
.text:00008040                 ;org 8040h
.text:00008040 ; COMDAT (pick any)
.text:00008040                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008040
.text:00008040 ; =============== S U B R O U T I N E =======================================
.text:00008040
.text:00008040 ; Attributes: bp-based frame
.text:00008040
.text:00008040 ; unsigned __int32 __stdcall NCompress::CCopyCoder::AddRef(NCompress::CCopyCoder *this)
.text:00008040                 public ?AddRef@CCopyCoder@NCompress@@UAGKXZ
.text:00008040 ?AddRef@CCopyCoder@NCompress@@UAGKXZ proc near
.text:00008040                                         ; CODE XREF: [thunk]:NCompress::CCopyCoder::AddRef`adjustor{4}' (void)+5j
.text:00008040                                         ; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{8}' (void)+5j ...
.text:00008040
.text:00008040 var_4           = dword ptr -4
.text:00008040 this            = dword ptr  8
.text:00008040
.text:00008040                 push    ebp
.text:00008041                 mov     ebp, esp
.text:00008043                 push    ecx
.text:00008044                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000804B                 mov     eax, [ebp+this]
.text:0000804E                 mov     ecx, [eax+10h]
.text:00008051                 add     ecx, 1
.text:00008054                 mov     [ebp+var_4], ecx
.text:00008057                 mov     edx, [ebp+this]
.text:0000805A                 mov     eax, [ebp+var_4]
.text:0000805D                 mov     [edx+10h], eax
.text:00008060                 mov     eax, [ebp+var_4]
.text:00008063                 mov     esp, ebp
.text:00008065                 pop     ebp
.text:00008066                 retn    4
.text:00008066 ?AddRef@CCopyCoder@NCompress@@UAGKXZ endp
.text:00008066
.text:00008066 ; ---------------------------------------------------------------------------
.text:00008069                 align 4
.text:00008069 _text           ends
.text:00008069
.text:0000806C ; ===========================================================================
.text:0000806C
.text:0000806C ; Segment type: Pure code
.text:0000806C ; Segment permissions: Read/Execute
.text:0000806C _text           segment para public 'CODE' use32
.text:0000806C                 assume cs:_text
.text:0000806C                 ;org 806Ch
.text:0000806C ; COMDAT (pick any)
.text:0000806C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000806C
.text:0000806C ; =============== S U B R O U T I N E =======================================
.text:0000806C
.text:0000806C ; Attributes: bp-based frame
.text:0000806C
.text:0000806C ; unsigned __int32 __stdcall NCompress::CCopyCoder::Release(NCompress::CCopyCoder *this)
.text:0000806C                 public ?Release@CCopyCoder@NCompress@@UAGKXZ
.text:0000806C ?Release@CCopyCoder@NCompress@@UAGKXZ proc near
.text:0000806C                                         ; CODE XREF: [thunk]:NCompress::CCopyCoder::Release`adjustor{4}' (void)+5j
.text:0000806C                                         ; [thunk]:NCompress::CCopyCoder::Release`adjustor{8}' (void)+5j ...
.text:0000806C
.text:0000806C var_10          = dword ptr -10h
.text:0000806C var_C           = dword ptr -0Ch
.text:0000806C var_8           = dword ptr -8
.text:0000806C var_4           = dword ptr -4
.text:0000806C this            = dword ptr  8
.text:0000806C
.text:0000806C                 push    ebp
.text:0000806D                 mov     ebp, esp
.text:0000806F                 sub     esp, 10h
.text:00008072                 mov     eax, 0CCCCCCCCh
.text:00008077                 mov     [ebp+var_10], eax
.text:0000807A                 mov     [ebp+var_C], eax
.text:0000807D                 mov     [ebp+var_8], eax
.text:00008080                 mov     [ebp+var_4], eax
.text:00008083                 mov     eax, [ebp+this]
.text:00008086                 mov     ecx, [eax+10h]
.text:00008089                 sub     ecx, 1
.text:0000808C                 mov     [ebp+var_C], ecx
.text:0000808F                 mov     edx, [ebp+this]
.text:00008092                 mov     eax, [ebp+var_C]
.text:00008095                 mov     [edx+10h], eax
.text:00008098                 cmp     [ebp+var_C], 0
.text:0000809C                 jz      short loc_80A6
.text:0000809E                 mov     ecx, [ebp+this]
.text:000080A1                 mov     eax, [ecx+10h]
.text:000080A4                 jmp     short loc_80D0
.text:000080A6 ; ---------------------------------------------------------------------------
.text:000080A6
.text:000080A6 loc_80A6:                               ; CODE XREF: NCompress::CCopyCoder::Release(void)+30j
.text:000080A6                 mov     edx, [ebp+this]
.text:000080A9                 mov     [ebp+var_8], edx
.text:000080AC                 mov     eax, [ebp+var_8]
.text:000080AF                 mov     [ebp+var_4], eax
.text:000080B2                 cmp     [ebp+var_4], 0
.text:000080B6                 jz      short loc_80C7
.text:000080B8                 push    1
.text:000080BA                 mov     ecx, [ebp+var_4]
.text:000080BD                 call    ??_GCCopyCoder@NCompress@@QAEPAXI@Z ; NCompress::CCopyCoder::`scalar deleting destructor'(uint)
.text:000080C2                 mov     [ebp+var_10], eax
.text:000080C5                 jmp     short loc_80CE
.text:000080C7 ; ---------------------------------------------------------------------------
.text:000080C7
.text:000080C7 loc_80C7:                               ; CODE XREF: NCompress::CCopyCoder::Release(void)+4Aj
.text:000080C7                 mov     [ebp+var_10], 0
.text:000080CE
.text:000080CE loc_80CE:                               ; CODE XREF: NCompress::CCopyCoder::Release(void)+59j
.text:000080CE                 xor     eax, eax
.text:000080D0
.text:000080D0 loc_80D0:                               ; CODE XREF: NCompress::CCopyCoder::Release(void)+38j
.text:000080D0                 add     esp, 10h
.text:000080D3                 cmp     ebp, esp
.text:000080D5                 call    __RTC_CheckEsp
.text:000080DA                 mov     esp, ebp
.text:000080DC                 pop     ebp
.text:000080DD                 retn    4
.text:000080DD ?Release@CCopyCoder@NCompress@@UAGKXZ endp
.text:000080DD
.text:000080DD _text           ends
.text:000080DD
.text:000080E0 ; ===========================================================================
.text:000080E0
.text:000080E0 ; Segment type: Pure code
.text:000080E0 ; Segment permissions: Read/Execute
.text:000080E0 _text           segment para public 'CODE' use32
.text:000080E0                 assume cs:_text
.text:000080E0                 ;org 80E0h
.text:000080E0 ; COMDAT (pick any)
.text:000080E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000080E0
.text:000080E0 ; =============== S U B R O U T I N E =======================================
.text:000080E0
.text:000080E0 ; Attributes: bp-based frame
.text:000080E0
.text:000080E0 ; _DWORD __thiscall ICompressCoder::ICompressCoder(ICompressCoder *__hidden this)
.text:000080E0                 public ??0ICompressCoder@@QAE@XZ
.text:000080E0 ??0ICompressCoder@@QAE@XZ proc near     ; CODE XREF: NCompress::CCopyCoder::CCopyCoder(void)+11p
.text:000080E0
.text:000080E0 var_4           = dword ptr -4
.text:000080E0
.text:000080E0                 push    ebp
.text:000080E1                 mov     ebp, esp
.text:000080E3                 push    ecx
.text:000080E4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000080EB                 mov     [ebp+var_4], ecx
.text:000080EE                 mov     ecx, [ebp+var_4]
.text:000080F1                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:000080F6                 mov     eax, [ebp+var_4]
.text:000080F9                 mov     dword ptr [eax], offset ??_7ICompressCoder@@6B@ ; const ICompressCoder::`vftable'
.text:000080FF                 mov     eax, [ebp+var_4]
.text:00008102                 add     esp, 4
.text:00008105                 cmp     ebp, esp
.text:00008107                 call    __RTC_CheckEsp
.text:0000810C                 mov     esp, ebp
.text:0000810E                 pop     ebp
.text:0000810F                 retn
.text:0000810F ??0ICompressCoder@@QAE@XZ endp
.text:0000810F
.text:0000810F _text           ends
.text:0000810F
.rdata:00008110 ; ===========================================================================
.rdata:00008110
.rdata:00008110 ; Segment type: Pure data
.rdata:00008110 ; Segment permissions: Read
.rdata:00008110 _rdata          segment dword public 'DATA' use32
.rdata:00008110                 assume cs:_rdata
.rdata:00008110                 ;org 8110h
.rdata:00008110 ; COMDAT (pick largest)
.rdata:00008110                 dd offset ??_R4ICompressCoder@@6B@ ; const ICompressCoder::`RTTI Complete Object Locator'
.rdata:00008114                 public ??_7ICompressCoder@@6B@
.rdata:00008114 ; const ICompressCoder::`vftable'
.rdata:00008114 ??_7ICompressCoder@@6B@ dd offset __purecall
.rdata:00008114                                         ; DATA XREF: ICompressCoder::ICompressCoder(void)+19o
.rdata:00008118                 dd offset __purecall
.rdata:0000811C                 dd offset __purecall
.rdata:00008120                 dd offset __purecall
.rdata:00008120 _rdata          ends
.rdata:00008120
.rdata$r:00008124 ; ===========================================================================
.rdata$r:00008124
.rdata$r:00008124 ; Segment type: Pure data
.rdata$r:00008124 ; Segment permissions: Read
.rdata$r:00008124 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008124                 assume cs:_rdata$r
.rdata$r:00008124                 ;org 8124h
.rdata$r:00008124 ; COMDAT (pick any)
.rdata$r:00008124                 public ??_R4ICompressCoder@@6B@
.rdata$r:00008124 ; const ICompressCoder::`RTTI Complete Object Locator'
.rdata$r:00008124 ??_R4ICompressCoder@@6B@ db    0        ; DATA XREF: .rdata:00008110o
.rdata$r:00008125                 db    0
.rdata$r:00008126                 db    0
.rdata$r:00008127                 db    0
.rdata$r:00008128                 db    0
.rdata$r:00008129                 db    0
.rdata$r:0000812A                 db    0
.rdata$r:0000812B                 db    0
.rdata$r:0000812C                 db    0
.rdata$r:0000812D                 db    0
.rdata$r:0000812E                 db    0
.rdata$r:0000812F                 db    0
.rdata$r:00008130                 dd offset ??_R0?AUICompressCoder@@@8 ; ICompressCoder `RTTI Type Descriptor'
.rdata$r:00008134                 dd offset ??_R3ICompressCoder@@8 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00008134 _rdata$r        ends
.rdata$r:00008134
.text:00008138 ; ===========================================================================
.text:00008138
.text:00008138 ; Segment type: Pure code
.text:00008138 ; Segment permissions: Read/Execute
.text:00008138 _text           segment para public 'CODE' use32
.text:00008138                 assume cs:_text
.text:00008138                 ;org 8138h
.text:00008138 ; COMDAT (pick any)
.text:00008138                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008138
.text:00008138 ; =============== S U B R O U T I N E =======================================
.text:00008138
.text:00008138 ; Attributes: bp-based frame
.text:00008138
.text:00008138 ; _DWORD __thiscall ICompressSetInStream::ICompressSetInStream(ICompressSetInStream *__hidden this)
.text:00008138                 public ??0ICompressSetInStream@@QAE@XZ
.text:00008138 ??0ICompressSetInStream@@QAE@XZ proc near
.text:00008138                                         ; CODE XREF: NCompress::CCopyCoder::CCopyCoder(void)+1Cp
.text:00008138
.text:00008138 var_4           = dword ptr -4
.text:00008138
.text:00008138                 push    ebp
.text:00008139                 mov     ebp, esp
.text:0000813B                 push    ecx
.text:0000813C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008143                 mov     [ebp+var_4], ecx
.text:00008146                 mov     ecx, [ebp+var_4]
.text:00008149                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:0000814E                 mov     eax, [ebp+var_4]
.text:00008151                 mov     dword ptr [eax], offset ??_7ICompressSetInStream@@6B@ ; const ICompressSetInStream::`vftable'
.text:00008157                 mov     eax, [ebp+var_4]
.text:0000815A                 add     esp, 4
.text:0000815D                 cmp     ebp, esp
.text:0000815F                 call    __RTC_CheckEsp
.text:00008164                 mov     esp, ebp
.text:00008166                 pop     ebp
.text:00008167                 retn
.text:00008167 ??0ICompressSetInStream@@QAE@XZ endp
.text:00008167
.text:00008167 _text           ends
.text:00008167
.rdata:00008168 ; ===========================================================================
.rdata:00008168
.rdata:00008168 ; Segment type: Pure data
.rdata:00008168 ; Segment permissions: Read
.rdata:00008168 _rdata          segment dword public 'DATA' use32
.rdata:00008168                 assume cs:_rdata
.rdata:00008168                 ;org 8168h
.rdata:00008168 ; COMDAT (pick largest)
.rdata:00008168                 dd offset ??_R4ICompressSetInStream@@6B@ ; const ICompressSetInStream::`RTTI Complete Object Locator'
.rdata:0000816C                 public ??_7ICompressSetInStream@@6B@
.rdata:0000816C ; const ICompressSetInStream::`vftable'
.rdata:0000816C ??_7ICompressSetInStream@@6B@ dd offset __purecall
.rdata:0000816C                                         ; DATA XREF: ICompressSetInStream::ICompressSetInStream(void)+19o
.rdata:00008170                 dd offset __purecall
.rdata:00008174                 dd offset __purecall
.rdata:00008178                 dd offset __purecall
.rdata:0000817C                 dd offset __purecall
.rdata:0000817C _rdata          ends
.rdata:0000817C
.rdata$r:00008180 ; ===========================================================================
.rdata$r:00008180
.rdata$r:00008180 ; Segment type: Pure data
.rdata$r:00008180 ; Segment permissions: Read
.rdata$r:00008180 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008180                 assume cs:_rdata$r
.rdata$r:00008180                 ;org 8180h
.rdata$r:00008180 ; COMDAT (pick any)
.rdata$r:00008180                 public ??_R4ICompressSetInStream@@6B@
.rdata$r:00008180 ; const ICompressSetInStream::`RTTI Complete Object Locator'
.rdata$r:00008180 ??_R4ICompressSetInStream@@6B@ db    0  ; DATA XREF: .rdata:00008168o
.rdata$r:00008181                 db    0
.rdata$r:00008182                 db    0
.rdata$r:00008183                 db    0
.rdata$r:00008184                 db    0
.rdata$r:00008185                 db    0
.rdata$r:00008186                 db    0
.rdata$r:00008187                 db    0
.rdata$r:00008188                 db    0
.rdata$r:00008189                 db    0
.rdata$r:0000818A                 db    0
.rdata$r:0000818B                 db    0
.rdata$r:0000818C                 dd offset ??_R0?AUICompressSetInStream@@@8 ; ICompressSetInStream `RTTI Type Descriptor'
.rdata$r:00008190                 dd offset ??_R3ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00008190 _rdata$r        ends
.rdata$r:00008190
.text:00008194 ; ===========================================================================
.text:00008194
.text:00008194 ; Segment type: Pure code
.text:00008194 ; Segment permissions: Read/Execute
.text:00008194 _text           segment para public 'CODE' use32
.text:00008194                 assume cs:_text
.text:00008194                 ;org 8194h
.text:00008194 ; COMDAT (pick any)
.text:00008194                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008194
.text:00008194 ; =============== S U B R O U T I N E =======================================
.text:00008194
.text:00008194 ; Attributes: bp-based frame
.text:00008194
.text:00008194 ; _DWORD __thiscall ISequentialInStream::ISequentialInStream(ISequentialInStream *__hidden this)
.text:00008194                 public ??0ISequentialInStream@@QAE@XZ
.text:00008194 ??0ISequentialInStream@@QAE@XZ proc near
.text:00008194                                         ; CODE XREF: NCompress::CCopyCoder::CCopyCoder(void)+27p
.text:00008194                                         ; CLimitedSequentialInStream::CLimitedSequentialInStream(void)+11p ...
.text:00008194
.text:00008194 var_4           = dword ptr -4
.text:00008194
.text:00008194                 push    ebp
.text:00008195                 mov     ebp, esp
.text:00008197                 push    ecx
.text:00008198                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000819F                 mov     [ebp+var_4], ecx
.text:000081A2                 mov     ecx, [ebp+var_4]
.text:000081A5                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:000081AA                 mov     eax, [ebp+var_4]
.text:000081AD                 mov     dword ptr [eax], offset ??_7ISequentialInStream@@6B@ ; const ISequentialInStream::`vftable'
.text:000081B3                 mov     eax, [ebp+var_4]
.text:000081B6                 add     esp, 4
.text:000081B9                 cmp     ebp, esp
.text:000081BB                 call    __RTC_CheckEsp
.text:000081C0                 mov     esp, ebp
.text:000081C2                 pop     ebp
.text:000081C3                 retn
.text:000081C3 ??0ISequentialInStream@@QAE@XZ endp
.text:000081C3
.text:000081C3 _text           ends
.text:000081C3
.rdata:000081C4 ; ===========================================================================
.rdata:000081C4
.rdata:000081C4 ; Segment type: Pure data
.rdata:000081C4 ; Segment permissions: Read
.rdata:000081C4 _rdata          segment dword public 'DATA' use32
.rdata:000081C4                 assume cs:_rdata
.rdata:000081C4                 ;org 81C4h
.rdata:000081C4 ; COMDAT (pick largest)
.rdata:000081C4                 dd offset ??_R4ISequentialInStream@@6B@ ; const ISequentialInStream::`RTTI Complete Object Locator'
.rdata:000081C8                 public ??_7ISequentialInStream@@6B@
.rdata:000081C8 ; const ISequentialInStream::`vftable'
.rdata:000081C8 ??_7ISequentialInStream@@6B@ dd offset __purecall
.rdata:000081C8                                         ; DATA XREF: ISequentialInStream::ISequentialInStream(void)+19o
.rdata:000081CC                 dd offset __purecall
.rdata:000081D0                 dd offset __purecall
.rdata:000081D4                 dd offset __purecall
.rdata:000081D4 _rdata          ends
.rdata:000081D4
.rdata$r:000081D8 ; ===========================================================================
.rdata$r:000081D8
.rdata$r:000081D8 ; Segment type: Pure data
.rdata$r:000081D8 ; Segment permissions: Read
.rdata$r:000081D8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000081D8                 assume cs:_rdata$r
.rdata$r:000081D8                 ;org 81D8h
.rdata$r:000081D8 ; COMDAT (pick any)
.rdata$r:000081D8                 public ??_R4ISequentialInStream@@6B@
.rdata$r:000081D8 ; const ISequentialInStream::`RTTI Complete Object Locator'
.rdata$r:000081D8 ??_R4ISequentialInStream@@6B@ db    0   ; DATA XREF: .rdata:000081C4o
.rdata$r:000081D9                 db    0
.rdata$r:000081DA                 db    0
.rdata$r:000081DB                 db    0
.rdata$r:000081DC                 db    0
.rdata$r:000081DD                 db    0
.rdata$r:000081DE                 db    0
.rdata$r:000081DF                 db    0
.rdata$r:000081E0                 db    0
.rdata$r:000081E1                 db    0
.rdata$r:000081E2                 db    0
.rdata$r:000081E3                 db    0
.rdata$r:000081E4                 dd offset ??_R0?AUISequentialInStream@@@8 ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:000081E8                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000081E8 _rdata$r        ends
.rdata$r:000081E8
.text:000081EC ; ===========================================================================
.text:000081EC
.text:000081EC ; Segment type: Pure code
.text:000081EC ; Segment permissions: Read/Execute
.text:000081EC _text           segment para public 'CODE' use32
.text:000081EC                 assume cs:_text
.text:000081EC                 ;org 81ECh
.text:000081EC ; COMDAT (pick any)
.text:000081EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000081EC
.text:000081EC ; =============== S U B R O U T I N E =======================================
.text:000081EC
.text:000081EC ; Attributes: bp-based frame
.text:000081EC
.text:000081EC ; _DWORD __thiscall ICompressGetInStreamProcessedSize::ICompressGetInStreamProcessedSize(ICompressGetInStreamProcessedSize *__hidden this)
.text:000081EC                 public ??0ICompressGetInStreamProcessedSize@@QAE@XZ
.text:000081EC ??0ICompressGetInStreamProcessedSize@@QAE@XZ proc near
.text:000081EC                                         ; CODE XREF: NCompress::CCopyCoder::CCopyCoder(void)+32p
.text:000081EC
.text:000081EC var_4           = dword ptr -4
.text:000081EC
.text:000081EC                 push    ebp
.text:000081ED                 mov     ebp, esp
.text:000081EF                 push    ecx
.text:000081F0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000081F7                 mov     [ebp+var_4], ecx
.text:000081FA                 mov     ecx, [ebp+var_4]
.text:000081FD                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00008202                 mov     eax, [ebp+var_4]
.text:00008205                 mov     dword ptr [eax], offset ??_7ICompressGetInStreamProcessedSize@@6B@ ; const ICompressGetInStreamProcessedSize::`vftable'
.text:0000820B                 mov     eax, [ebp+var_4]
.text:0000820E                 add     esp, 4
.text:00008211                 cmp     ebp, esp
.text:00008213                 call    __RTC_CheckEsp
.text:00008218                 mov     esp, ebp
.text:0000821A                 pop     ebp
.text:0000821B                 retn
.text:0000821B ??0ICompressGetInStreamProcessedSize@@QAE@XZ endp
.text:0000821B
.text:0000821B _text           ends
.text:0000821B
.rdata:0000821C ; ===========================================================================
.rdata:0000821C
.rdata:0000821C ; Segment type: Pure data
.rdata:0000821C ; Segment permissions: Read
.rdata:0000821C _rdata          segment dword public 'DATA' use32
.rdata:0000821C                 assume cs:_rdata
.rdata:0000821C                 ;org 821Ch
.rdata:0000821C ; COMDAT (pick largest)
.rdata:0000821C                 dd offset ??_R4ICompressGetInStreamProcessedSize@@6B@ ; const ICompressGetInStreamProcessedSize::`RTTI Complete Object Locator'
.rdata:00008220                 public ??_7ICompressGetInStreamProcessedSize@@6B@
.rdata:00008220 ; const ICompressGetInStreamProcessedSize::`vftable'
.rdata:00008220 ??_7ICompressGetInStreamProcessedSize@@6B@ dd offset __purecall
.rdata:00008220                                         ; DATA XREF: ICompressGetInStreamProcessedSize::ICompressGetInStreamProcessedSize(void)+19o
.rdata:00008224                 dd offset __purecall
.rdata:00008228                 dd offset __purecall
.rdata:0000822C                 dd offset __purecall
.rdata:0000822C _rdata          ends
.rdata:0000822C
.rdata$r:00008230 ; ===========================================================================
.rdata$r:00008230
.rdata$r:00008230 ; Segment type: Pure data
.rdata$r:00008230 ; Segment permissions: Read
.rdata$r:00008230 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008230                 assume cs:_rdata$r
.rdata$r:00008230                 ;org 8230h
.rdata$r:00008230 ; COMDAT (pick any)
.rdata$r:00008230                 public ??_R4ICompressGetInStreamProcessedSize@@6B@
.rdata$r:00008230 ; const ICompressGetInStreamProcessedSize::`RTTI Complete Object Locator'
.rdata$r:00008230 ??_R4ICompressGetInStreamProcessedSize@@6B@ db    0
.rdata$r:00008230                                         ; DATA XREF: .rdata:0000821Co
.rdata$r:00008231                 db    0
.rdata$r:00008232                 db    0
.rdata$r:00008233                 db    0
.rdata$r:00008234                 db    0
.rdata$r:00008235                 db    0
.rdata$r:00008236                 db    0
.rdata$r:00008237                 db    0
.rdata$r:00008238                 db    0
.rdata$r:00008239                 db    0
.rdata$r:0000823A                 db    0
.rdata$r:0000823B                 db    0
.rdata$r:0000823C                 dd offset ??_R0?AUICompressGetInStreamProcessedSize@@@8 ; ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
.rdata$r:00008240                 dd offset ??_R3ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00008240 _rdata$r        ends
.rdata$r:00008240
.text:00008244 ; ===========================================================================
.text:00008244
.text:00008244 ; Segment type: Pure code
.text:00008244 ; Segment permissions: Read/Execute
.text:00008244 _text           segment para public 'CODE' use32
.text:00008244                 assume cs:_text
.text:00008244                 ;org 8244h
.text:00008244 ; COMDAT (pick any)
.text:00008244                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008244
.text:00008244 ; =============== S U B R O U T I N E =======================================
.text:00008244
.text:00008244 ; Attributes: bp-based frame
.text:00008244
.text:00008244 ; public: void * __thiscall NCompress::CCopyCoder::`scalar deleting destructor'(unsigned int)
.text:00008244                 public ??_GCCopyCoder@NCompress@@QAEPAXI@Z
.text:00008244 ??_GCCopyCoder@NCompress@@QAEPAXI@Z proc near
.text:00008244                                         ; CODE XREF: NCompress::CCopyCoder::Release(void)+51p
.text:00008244
.text:00008244 var_4           = dword ptr -4
.text:00008244 arg_0           = dword ptr  8
.text:00008244
.text:00008244                 push    ebp
.text:00008245                 mov     ebp, esp
.text:00008247                 push    ecx
.text:00008248                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000824F                 mov     [ebp+var_4], ecx
.text:00008252                 mov     ecx, [ebp+var_4] ; this
.text:00008255                 call    ??1CCopyCoder@NCompress@@QAE@XZ ; NCompress::CCopyCoder::~CCopyCoder(void)
.text:0000825A                 mov     eax, [ebp+arg_0]
.text:0000825D                 and     eax, 1
.text:00008260                 jz      short loc_826E
.text:00008262                 mov     ecx, [ebp+var_4]
.text:00008265                 push    ecx             ; void *
.text:00008266                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000826B                 add     esp, 4
.text:0000826E
.text:0000826E loc_826E:                               ; CODE XREF: NCompress::CCopyCoder::`scalar deleting destructor'(uint)+1Cj
.text:0000826E                 mov     eax, [ebp+var_4]
.text:00008271                 add     esp, 4
.text:00008274                 cmp     ebp, esp
.text:00008276                 call    __RTC_CheckEsp
.text:0000827B                 mov     esp, ebp
.text:0000827D                 pop     ebp
.text:0000827E                 retn    4
.text:0000827E ??_GCCopyCoder@NCompress@@QAEPAXI@Z endp
.text:0000827E
.text:0000827E ; ---------------------------------------------------------------------------
.text:00008281                 align 4
.text:00008281 _text           ends
.text:00008281
.text:00008284 ; ===========================================================================
.text:00008284
.text:00008284 ; Segment type: Pure code
.text:00008284 ; Segment permissions: Read/Execute
.text:00008284 _text           segment para public 'CODE' use32
.text:00008284                 assume cs:_text
.text:00008284                 ;org 8284h
.text:00008284 ; COMDAT (pick any)
.text:00008284                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008284
.text:00008284 ; =============== S U B R O U T I N E =======================================
.text:00008284
.text:00008284 ; Attributes: bp-based frame
.text:00008284
.text:00008284 ; public: __thiscall IUnknown::IUnknown(void)
.text:00008284                 public ??0IUnknown@@QAE@XZ
.text:00008284 ??0IUnknown@@QAE@XZ proc near           ; CODE XREF: ICompressCoder::ICompressCoder(void)+11p
.text:00008284                                         ; ICompressSetInStream::ICompressSetInStream(void)+11p ...
.text:00008284
.text:00008284 var_4           = dword ptr -4
.text:00008284
.text:00008284                 push    ebp
.text:00008285                 mov     ebp, esp
.text:00008287                 push    ecx
.text:00008288                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000828F                 mov     [ebp+var_4], ecx
.text:00008292                 mov     eax, [ebp+var_4]
.text:00008295                 mov     esp, ebp
.text:00008297                 pop     ebp
.text:00008298                 retn
.text:00008298 ??0IUnknown@@QAE@XZ endp
.text:00008298
.text:00008298 ; ---------------------------------------------------------------------------
.text:00008299                 align 4
.text:00008299 _text           ends
.text:00008299
.text:0000829C ; ===========================================================================
.text:0000829C
.text:0000829C ; Segment type: Pure code
.text:0000829C ; Segment permissions: Read/Execute
.text:0000829C _text           segment para public 'CODE' use32
.text:0000829C                 assume cs:_text
.text:0000829C                 ;org 829Ch
.text:0000829C ; COMDAT (pick any)
.text:0000829C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000829C
.text:0000829C ; =============== S U B R O U T I N E =======================================
.text:0000829C
.text:0000829C ; Attributes: bp-based frame
.text:0000829C
.text:0000829C ; public: __thiscall CLimitedSequentialInStream::CLimitedSequentialInStream(void)
.text:0000829C                 public ??0CLimitedSequentialInStream@@QAE@XZ
.text:0000829C ??0CLimitedSequentialInStream@@QAE@XZ proc near
.text:0000829C                                         ; CODE XREF: NArchive::N7z::WriteRange(IInStream *,ISequentialOutStream *,unsigned __int64,unsigned __int64,ICompressProgressInfo *)+87p
.text:0000829C
.text:0000829C var_4           = dword ptr -4
.text:0000829C
.text:0000829C                 push    ebp
.text:0000829D                 mov     ebp, esp
.text:0000829F                 push    ecx
.text:000082A0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000082A7                 mov     [ebp+var_4], ecx
.text:000082AA                 mov     ecx, [ebp+var_4] ; this
.text:000082AD                 call    ??0ISequentialInStream@@QAE@XZ ; ISequentialInStream::ISequentialInStream(void)
.text:000082B2                 mov     ecx, [ebp+var_4]
.text:000082B5                 add     ecx, 4          ; this
.text:000082B8                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:000082BD                 mov     eax, [ebp+var_4]
.text:000082C0                 mov     dword ptr [eax], offset ??_7CLimitedSequentialInStream@@6B@ ; const CLimitedSequentialInStream::`vftable'
.text:000082C6                 mov     ecx, [ebp+var_4]
.text:000082C9                 add     ecx, 8
.text:000082CC                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(void)
.text:000082D1                 mov     eax, [ebp+var_4]
.text:000082D4                 add     esp, 4
.text:000082D7                 cmp     ebp, esp
.text:000082D9                 call    __RTC_CheckEsp
.text:000082DE                 mov     esp, ebp
.text:000082E0                 pop     ebp
.text:000082E1                 retn
.text:000082E1 ??0CLimitedSequentialInStream@@QAE@XZ endp
.text:000082E1
.text:000082E1 ; ---------------------------------------------------------------------------
.text:000082E2                 align 4
.text:000082E2 _text           ends
.text:000082E2
.rdata:000082E4 ; ===========================================================================
.rdata:000082E4
.rdata:000082E4 ; Segment type: Pure data
.rdata:000082E4 ; Segment permissions: Read
.rdata:000082E4 _rdata          segment dword public 'DATA' use32
.rdata:000082E4                 assume cs:_rdata
.rdata:000082E4                 ;org 82E4h
.rdata:000082E4 ; COMDAT (pick largest)
.rdata:000082E4                 dd offset ??_R4CLimitedSequentialInStream@@6B@ ; const CLimitedSequentialInStream::`RTTI Complete Object Locator'
.rdata:000082E8                 public ??_7CLimitedSequentialInStream@@6B@
.rdata:000082E8 ; const CLimitedSequentialInStream::`vftable'
.rdata:000082E8 ??_7CLimitedSequentialInStream@@6B@ dd offset ?QueryInterface@CLimitedSequentialInStream@@UAGJABU_GUID@@PAPAX@Z
.rdata:000082E8                                         ; DATA XREF: CLimitedSequentialInStream::CLimitedSequentialInStream(void)+24o
.rdata:000082E8                                         ; CLimitedSequentialInStream::QueryInterface(_GUID const &,void * *)
.rdata:000082EC                 dd offset ?AddRef@CLimitedSequentialInStream@@UAGKXZ ; CLimitedSequentialInStream::AddRef(void)
.rdata:000082F0                 dd offset ?Release@CLimitedSequentialInStream@@UAGKXZ ; CLimitedSequentialInStream::Release(void)
.rdata:000082F4                 dd offset ?Read@CLimitedSequentialInStream@@UAGJPAXIPAI@Z ; CLimitedSequentialInStream::Read(void *,uint,uint *)
.rdata:000082F4 _rdata          ends
.rdata:000082F4
.rdata$r:000082F8 ; ===========================================================================
.rdata$r:000082F8
.rdata$r:000082F8 ; Segment type: Pure data
.rdata$r:000082F8 ; Segment permissions: Read
.rdata$r:000082F8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000082F8                 assume cs:_rdata$r
.rdata$r:000082F8                 ;org 82F8h
.rdata$r:000082F8 ; COMDAT (pick any)
.rdata$r:000082F8                 public ??_R4CLimitedSequentialInStream@@6B@
.rdata$r:000082F8 ; const CLimitedSequentialInStream::`RTTI Complete Object Locator'
.rdata$r:000082F8 ??_R4CLimitedSequentialInStream@@6B@ db    0 ; DATA XREF: .rdata:000082E4o
.rdata$r:000082F9                 db    0
.rdata$r:000082FA                 db    0
.rdata$r:000082FB                 db    0
.rdata$r:000082FC                 db    0
.rdata$r:000082FD                 db    0
.rdata$r:000082FE                 db    0
.rdata$r:000082FF                 db    0
.rdata$r:00008300                 db    0
.rdata$r:00008301                 db    0
.rdata$r:00008302                 db    0
.rdata$r:00008303                 db    0
.rdata$r:00008304                 dd offset ??_R0?AVCLimitedSequentialInStream@@@8 ; CLimitedSequentialInStream `RTTI Type Descriptor'
.rdata$r:00008308                 dd offset ??_R3CLimitedSequentialInStream@@8 ; CLimitedSequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00008308 _rdata$r        ends
.rdata$r:00008308
.data:0000830C ; ===========================================================================
.data:0000830C
.data:0000830C ; Segment type: Pure data
.data:0000830C ; Segment permissions: Read/Write
.data:0000830C _data           segment dword public 'DATA' use32
.data:0000830C                 assume cs:_data
.data:0000830C                 ;org 830Ch
.data:0000830C ; COMDAT (pick any)
.data:0000830C                 public ??_R0?AVCLimitedSequentialInStream@@@8
.data:0000830C ; class CLimitedSequentialInStream `RTTI Type Descriptor'
.data:0000830C ??_R0?AVCLimitedSequentialInStream@@@8 dd offset ??_7type_info@@6B@
.data:0000830C                                         ; DATA XREF: .rdata$r:00008304o
.data:0000830C                                         ; .rdata$r:CLimitedSequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:0000830C                                         ; const type_info::`vftable'
.data:00008310                 db    0
.data:00008311                 db    0
.data:00008312                 db    0
.data:00008313                 db    0
.data:00008314                 db  2Eh ; .
.data:00008315                 db  3Fh ; ?
.data:00008316                 db  41h ; A
.data:00008317                 db  56h ; V
.data:00008318                 db  43h ; C
.data:00008319                 db  4Ch ; L
.data:0000831A                 db  69h ; i
.data:0000831B                 db  6Dh ; m
.data:0000831C                 db  69h ; i
.data:0000831D                 db  74h ; t
.data:0000831E                 db  65h ; e
.data:0000831F                 db  64h ; d
.data:00008320                 db  53h ; S
.data:00008321                 db  65h ; e
.data:00008322                 db  71h ; q
.data:00008323                 db  75h ; u
.data:00008324                 db  65h ; e
.data:00008325                 db  6Eh ; n
.data:00008326                 db  74h ; t
.data:00008327                 db  69h ; i
.data:00008328                 db  61h ; a
.data:00008329                 db  6Ch ; l
.data:0000832A                 db  49h ; I
.data:0000832B                 db  6Eh ; n
.data:0000832C                 db  53h ; S
.data:0000832D                 db  74h ; t
.data:0000832E                 db  72h ; r
.data:0000832F                 db  65h ; e
.data:00008330                 db  61h ; a
.data:00008331                 db  6Dh ; m
.data:00008332                 db  40h ; @
.data:00008333                 db  40h ; @
.data:00008334                 db    0
.data:00008335                 align 4
.data:00008335 _data           ends
.data:00008335
.rdata$r:00008338 ; ===========================================================================
.rdata$r:00008338
.rdata$r:00008338 ; Segment type: Pure data
.rdata$r:00008338 ; Segment permissions: Read
.rdata$r:00008338 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008338                 assume cs:_rdata$r
.rdata$r:00008338                 ;org 8338h
.rdata$r:00008338 ; COMDAT (pick any)
.rdata$r:00008338                 public ??_R3CLimitedSequentialInStream@@8
.rdata$r:00008338 ; CLimitedSequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00008338 ??_R3CLimitedSequentialInStream@@8 db    0 ; DATA XREF: .rdata$r:00008308o
.rdata$r:00008338                                         ; .rdata$r:00008374o
.rdata$r:00008339                 db    0
.rdata$r:0000833A                 db    0
.rdata$r:0000833B                 db    0
.rdata$r:0000833C                 db    1
.rdata$r:0000833D                 db    0
.rdata$r:0000833E                 db    0
.rdata$r:0000833F                 db    0
.rdata$r:00008340                 db    4
.rdata$r:00008341                 db    0
.rdata$r:00008342                 db    0
.rdata$r:00008343                 db    0
.rdata$r:00008344                 dd offset ??_R2CLimitedSequentialInStream@@8 ; CLimitedSequentialInStream::`RTTI Base Class Array'
.rdata$r:00008344 _rdata$r        ends
.rdata$r:00008344
.rdata$r:00008348 ; ===========================================================================
.rdata$r:00008348
.rdata$r:00008348 ; Segment type: Pure data
.rdata$r:00008348 ; Segment permissions: Read
.rdata$r:00008348 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008348                 assume cs:_rdata$r
.rdata$r:00008348                 ;org 8348h
.rdata$r:00008348 ; COMDAT (pick any)
.rdata$r:00008348                 public ??_R2CLimitedSequentialInStream@@8
.rdata$r:00008348 ; CLimitedSequentialInStream::`RTTI Base Class Array'
.rdata$r:00008348 ??_R2CLimitedSequentialInStream@@8 dd offset ??_R1A@?0A@EA@CLimitedSequentialInStream@@8
.rdata$r:00008348                                         ; DATA XREF: .rdata$r:00008344o
.rdata$r:00008348                                         ; CLimitedSequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000834C                 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00008350                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00008354                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00008358                 db    0
.rdata$r:00008359                 align 4
.rdata$r:00008359 _rdata$r        ends
.rdata$r:00008359
.rdata$r:0000835C ; ===========================================================================
.rdata$r:0000835C
.rdata$r:0000835C ; Segment type: Pure data
.rdata$r:0000835C ; Segment permissions: Read
.rdata$r:0000835C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000835C                 assume cs:_rdata$r
.rdata$r:0000835C                 ;org 835Ch
.rdata$r:0000835C ; COMDAT (pick any)
.rdata$r:0000835C                 public ??_R1A@?0A@EA@CLimitedSequentialInStream@@8
.rdata$r:0000835C ; CLimitedSequentialInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000835C ??_R1A@?0A@EA@CLimitedSequentialInStream@@8 dd offset ??_R0?AVCLimitedSequentialInStream@@@8
.rdata$r:0000835C                                         ; DATA XREF: .rdata$r:CLimitedSequentialInStream::`RTTI Base Class Array'o
.rdata$r:0000835C                                         ; CLimitedSequentialInStream `RTTI Type Descriptor'
.rdata$r:00008360                 db    3
.rdata$r:00008361                 db    0
.rdata$r:00008362                 db    0
.rdata$r:00008363                 db    0
.rdata$r:00008364                 db    0
.rdata$r:00008365                 db    0
.rdata$r:00008366                 db    0
.rdata$r:00008367                 db    0
.rdata$r:00008368                 db 0FFh
.rdata$r:00008369                 db 0FFh
.rdata$r:0000836A                 db 0FFh
.rdata$r:0000836B                 db 0FFh
.rdata$r:0000836C                 db    0
.rdata$r:0000836D                 db    0
.rdata$r:0000836E                 db    0
.rdata$r:0000836F                 db    0
.rdata$r:00008370                 db  40h ; @
.rdata$r:00008371                 db    0
.rdata$r:00008372                 db    0
.rdata$r:00008373                 db    0
.rdata$r:00008374                 dd offset ??_R3CLimitedSequentialInStream@@8 ; CLimitedSequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00008374 _rdata$r        ends
.rdata$r:00008374
.rdata$r:00008378 ; ===========================================================================
.rdata$r:00008378
.rdata$r:00008378 ; Segment type: Pure data
.rdata$r:00008378 ; Segment permissions: Read
.rdata$r:00008378 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008378                 assume cs:_rdata$r
.rdata$r:00008378                 ;org 8378h
.rdata$r:00008378 ; COMDAT (pick any)
.rdata$r:00008378                 public ??_R13?0A@EA@CMyUnknownImp@@8
.rdata$r:00008378 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:00008378 ??_R13?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00008378                                         ; DATA XREF: .rdata$r:00008354o
.rdata$r:00008378                                         ; .rdata$r:0000A478o
.rdata$r:00008378                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:0000837C                 align 10h
.rdata$r:00008380                 db    4
.rdata$r:00008381                 db    0
.rdata$r:00008382                 db    0
.rdata$r:00008383                 db    0
.rdata$r:00008384                 db 0FFh
.rdata$r:00008385                 db 0FFh
.rdata$r:00008386                 db 0FFh
.rdata$r:00008387                 db 0FFh
.rdata$r:00008388                 db    0
.rdata$r:00008389                 db    0
.rdata$r:0000838A                 db    0
.rdata$r:0000838B                 db    0
.rdata$r:0000838C                 db  40h ; @
.rdata$r:0000838D                 db    0
.rdata$r:0000838E                 db    0
.rdata$r:0000838F                 db    0
.rdata$r:00008390                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00008390 _rdata$r        ends
.rdata$r:00008390
.text:00008394 ; ===========================================================================
.text:00008394
.text:00008394 ; Segment type: Pure code
.text:00008394 ; Segment permissions: Read/Execute
.text:00008394 _text           segment para public 'CODE' use32
.text:00008394                 assume cs:_text
.text:00008394                 ;org 8394h
.text:00008394 ; COMDAT (pick any)
.text:00008394                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008394
.text:00008394 ; =============== S U B R O U T I N E =======================================
.text:00008394
.text:00008394 ; Attributes: bp-based frame
.text:00008394
.text:00008394 ; __int32 __stdcall CLimitedSequentialInStream::QueryInterface(CLimitedSequentialInStream *this, const struct _GUID *Buf1, void **)
.text:00008394                 public ?QueryInterface@CLimitedSequentialInStream@@UAGJABU_GUID@@PAPAX@Z
.text:00008394 ?QueryInterface@CLimitedSequentialInStream@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00008394                                         ; DATA XREF: .rdata:const CLimitedSequentialInStream::`vftable'o
.text:00008394
.text:00008394 this            = dword ptr  8
.text:00008394 Buf1            = dword ptr  0Ch
.text:00008394 arg_8           = dword ptr  10h
.text:00008394
.text:00008394                 push    ebp
.text:00008395                 mov     ebp, esp
.text:00008397                 mov     eax, [ebp+arg_8]
.text:0000839A                 mov     dword ptr [eax], 0
.text:000083A0                 push    offset _IID_IUnknown ; Buf2
.text:000083A5                 mov     ecx, [ebp+Buf1]
.text:000083A8                 push    ecx             ; Buf1
.text:000083A9                 call    ___@8           ; __(x,x)
.text:000083AE                 test    eax, eax
.text:000083B0                 jz      short loc_83BC
.text:000083B2                 mov     edx, [ebp+arg_8]
.text:000083B5                 mov     eax, [ebp+this]
.text:000083B8                 mov     [edx], eax
.text:000083BA                 jmp     short loc_83DF
.text:000083BC ; ---------------------------------------------------------------------------
.text:000083BC
.text:000083BC loc_83BC:                               ; CODE XREF: CLimitedSequentialInStream::QueryInterface(_GUID const &,void * *)+1Cj
.text:000083BC                 push    offset _IID_ISequentialInStream ; Buf2
.text:000083C1                 mov     ecx, [ebp+Buf1]
.text:000083C4                 push    ecx             ; Buf1
.text:000083C5                 call    ___@8           ; __(x,x)
.text:000083CA                 test    eax, eax
.text:000083CC                 jz      short loc_83D8
.text:000083CE                 mov     edx, [ebp+arg_8]
.text:000083D1                 mov     eax, [ebp+this]
.text:000083D4                 mov     [edx], eax
.text:000083D6                 jmp     short loc_83DF
.text:000083D8 ; ---------------------------------------------------------------------------
.text:000083D8
.text:000083D8 loc_83D8:                               ; CODE XREF: CLimitedSequentialInStream::QueryInterface(_GUID const &,void * *)+38j
.text:000083D8                 mov     eax, 80004002h
.text:000083DD                 jmp     short loc_83F0
.text:000083DF ; ---------------------------------------------------------------------------
.text:000083DF
.text:000083DF loc_83DF:                               ; CODE XREF: CLimitedSequentialInStream::QueryInterface(_GUID const &,void * *)+26j
.text:000083DF                                         ; CLimitedSequentialInStream::QueryInterface(_GUID const &,void * *)+42j
.text:000083DF                 mov     ecx, [ebp+this]
.text:000083E2                 mov     edx, [ecx+4]
.text:000083E5                 add     edx, 1
.text:000083E8                 mov     eax, [ebp+this]
.text:000083EB                 mov     [eax+4], edx
.text:000083EE                 xor     eax, eax
.text:000083F0
.text:000083F0 loc_83F0:                               ; CODE XREF: CLimitedSequentialInStream::QueryInterface(_GUID const &,void * *)+49j
.text:000083F0                 cmp     ebp, esp
.text:000083F2                 call    __RTC_CheckEsp
.text:000083F7                 pop     ebp
.text:000083F8                 retn    0Ch
.text:000083F8 ?QueryInterface@CLimitedSequentialInStream@@UAGJABU_GUID@@PAPAX@Z endp
.text:000083F8
.text:000083F8 ; ---------------------------------------------------------------------------
.text:000083FB                 align 4
.text:000083FB _text           ends
.text:000083FB
.text:000083FC ; ===========================================================================
.text:000083FC
.text:000083FC ; Segment type: Pure code
.text:000083FC ; Segment permissions: Read/Execute
.text:000083FC _text           segment para public 'CODE' use32
.text:000083FC                 assume cs:_text
.text:000083FC                 ;org 83FCh
.text:000083FC ; COMDAT (pick any)
.text:000083FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000083FC
.text:000083FC ; =============== S U B R O U T I N E =======================================
.text:000083FC
.text:000083FC ; Attributes: bp-based frame
.text:000083FC
.text:000083FC ; unsigned __int32 __stdcall CLimitedSequentialInStream::AddRef(CLimitedSequentialInStream *this)
.text:000083FC                 public ?AddRef@CLimitedSequentialInStream@@UAGKXZ
.text:000083FC ?AddRef@CLimitedSequentialInStream@@UAGKXZ proc near
.text:000083FC                                         ; DATA XREF: .rdata:000082ECo
.text:000083FC
.text:000083FC var_4           = dword ptr -4
.text:000083FC this            = dword ptr  8
.text:000083FC
.text:000083FC                 push    ebp
.text:000083FD                 mov     ebp, esp
.text:000083FF                 push    ecx
.text:00008400                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008407                 mov     eax, [ebp+this]
.text:0000840A                 mov     ecx, [eax+4]
.text:0000840D                 add     ecx, 1
.text:00008410                 mov     [ebp+var_4], ecx
.text:00008413                 mov     edx, [ebp+this]
.text:00008416                 mov     eax, [ebp+var_4]
.text:00008419                 mov     [edx+4], eax
.text:0000841C                 mov     eax, [ebp+var_4]
.text:0000841F                 mov     esp, ebp
.text:00008421                 pop     ebp
.text:00008422                 retn    4
.text:00008422 ?AddRef@CLimitedSequentialInStream@@UAGKXZ endp
.text:00008422
.text:00008422 ; ---------------------------------------------------------------------------
.text:00008425                 align 4
.text:00008425 _text           ends
.text:00008425
.text:00008428 ; ===========================================================================
.text:00008428
.text:00008428 ; Segment type: Pure code
.text:00008428 ; Segment permissions: Read/Execute
.text:00008428 _text           segment para public 'CODE' use32
.text:00008428                 assume cs:_text
.text:00008428                 ;org 8428h
.text:00008428 ; COMDAT (pick any)
.text:00008428                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008428
.text:00008428 ; =============== S U B R O U T I N E =======================================
.text:00008428
.text:00008428 ; Attributes: bp-based frame
.text:00008428
.text:00008428 ; unsigned __int32 __stdcall CLimitedSequentialInStream::Release(CLimitedSequentialInStream *this)
.text:00008428                 public ?Release@CLimitedSequentialInStream@@UAGKXZ
.text:00008428 ?Release@CLimitedSequentialInStream@@UAGKXZ proc near
.text:00008428                                         ; DATA XREF: .rdata:000082F0o
.text:00008428
.text:00008428 var_10          = dword ptr -10h
.text:00008428 var_C           = dword ptr -0Ch
.text:00008428 var_8           = dword ptr -8
.text:00008428 var_4           = dword ptr -4
.text:00008428 this            = dword ptr  8
.text:00008428
.text:00008428                 push    ebp
.text:00008429                 mov     ebp, esp
.text:0000842B                 sub     esp, 10h
.text:0000842E                 mov     eax, 0CCCCCCCCh
.text:00008433                 mov     [ebp+var_10], eax
.text:00008436                 mov     [ebp+var_C], eax
.text:00008439                 mov     [ebp+var_8], eax
.text:0000843C                 mov     [ebp+var_4], eax
.text:0000843F                 mov     eax, [ebp+this]
.text:00008442                 mov     ecx, [eax+4]
.text:00008445                 sub     ecx, 1
.text:00008448                 mov     [ebp+var_C], ecx
.text:0000844B                 mov     edx, [ebp+this]
.text:0000844E                 mov     eax, [ebp+var_C]
.text:00008451                 mov     [edx+4], eax
.text:00008454                 cmp     [ebp+var_C], 0
.text:00008458                 jz      short loc_8462
.text:0000845A                 mov     ecx, [ebp+this]
.text:0000845D                 mov     eax, [ecx+4]
.text:00008460                 jmp     short loc_848C
.text:00008462 ; ---------------------------------------------------------------------------
.text:00008462
.text:00008462 loc_8462:                               ; CODE XREF: CLimitedSequentialInStream::Release(void)+30j
.text:00008462                 mov     edx, [ebp+this]
.text:00008465                 mov     [ebp+var_8], edx
.text:00008468                 mov     eax, [ebp+var_8]
.text:0000846B                 mov     [ebp+var_4], eax
.text:0000846E                 cmp     [ebp+var_4], 0
.text:00008472                 jz      short loc_8483
.text:00008474                 push    1
.text:00008476                 mov     ecx, [ebp+var_4]
.text:00008479                 call    ??_GCLimitedSequentialInStream@@QAEPAXI@Z ; CLimitedSequentialInStream::`scalar deleting destructor'(uint)
.text:0000847E                 mov     [ebp+var_10], eax
.text:00008481                 jmp     short loc_848A
.text:00008483 ; ---------------------------------------------------------------------------
.text:00008483
.text:00008483 loc_8483:                               ; CODE XREF: CLimitedSequentialInStream::Release(void)+4Aj
.text:00008483                 mov     [ebp+var_10], 0
.text:0000848A
.text:0000848A loc_848A:                               ; CODE XREF: CLimitedSequentialInStream::Release(void)+59j
.text:0000848A                 xor     eax, eax
.text:0000848C
.text:0000848C loc_848C:                               ; CODE XREF: CLimitedSequentialInStream::Release(void)+38j
.text:0000848C                 add     esp, 10h
.text:0000848F                 cmp     ebp, esp
.text:00008491                 call    __RTC_CheckEsp
.text:00008496                 mov     esp, ebp
.text:00008498                 pop     ebp
.text:00008499                 retn    4
.text:00008499 ?Release@CLimitedSequentialInStream@@UAGKXZ endp
.text:00008499
.text:00008499 _text           ends
.text:00008499
.text:0000849C ; ===========================================================================
.text:0000849C
.text:0000849C ; Segment type: Pure code
.text:0000849C ; Segment permissions: Read/Execute
.text:0000849C _text           segment para public 'CODE' use32
.text:0000849C                 assume cs:_text
.text:0000849C                 ;org 849Ch
.text:0000849C ; COMDAT (pick any)
.text:0000849C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000849C
.text:0000849C ; =============== S U B R O U T I N E =======================================
.text:0000849C
.text:0000849C ; Attributes: bp-based frame
.text:0000849C
.text:0000849C ; public: void * __thiscall CLimitedSequentialInStream::`scalar deleting destructor'(unsigned int)
.text:0000849C                 public ??_GCLimitedSequentialInStream@@QAEPAXI@Z
.text:0000849C ??_GCLimitedSequentialInStream@@QAEPAXI@Z proc near
.text:0000849C                                         ; CODE XREF: CLimitedSequentialInStream::Release(void)+51p
.text:0000849C
.text:0000849C var_4           = dword ptr -4
.text:0000849C arg_0           = dword ptr  8
.text:0000849C
.text:0000849C                 push    ebp
.text:0000849D                 mov     ebp, esp
.text:0000849F                 push    ecx
.text:000084A0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000084A7                 mov     [ebp+var_4], ecx
.text:000084AA                 mov     ecx, [ebp+var_4] ; this
.text:000084AD                 call    ??1CLimitedSequentialInStream@@QAE@XZ ; CLimitedSequentialInStream::~CLimitedSequentialInStream(void)
.text:000084B2                 mov     eax, [ebp+arg_0]
.text:000084B5                 and     eax, 1
.text:000084B8                 jz      short loc_84C6
.text:000084BA                 mov     ecx, [ebp+var_4]
.text:000084BD                 push    ecx             ; void *
.text:000084BE                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000084C3                 add     esp, 4
.text:000084C6
.text:000084C6 loc_84C6:                               ; CODE XREF: CLimitedSequentialInStream::`scalar deleting destructor'(uint)+1Cj
.text:000084C6                 mov     eax, [ebp+var_4]
.text:000084C9                 add     esp, 4
.text:000084CC                 cmp     ebp, esp
.text:000084CE                 call    __RTC_CheckEsp
.text:000084D3                 mov     esp, ebp
.text:000084D5                 pop     ebp
.text:000084D6                 retn    4
.text:000084D6 ??_GCLimitedSequentialInStream@@QAEPAXI@Z endp
.text:000084D6
.text:000084D6 ; ---------------------------------------------------------------------------
.text:000084D9                 align 4
.text:000084D9 _text           ends
.text:000084D9
.text:000084DC ; ===========================================================================
.text:000084DC
.text:000084DC ; Segment type: Pure code
.text:000084DC ; Segment permissions: Read/Execute
.text:000084DC _text           segment para public 'CODE' use32
.text:000084DC                 assume cs:_text
.text:000084DC                 ;org 84DCh
.text:000084DC ; COMDAT (pick any)
.text:000084DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000084DC
.text:000084DC ; =============== S U B R O U T I N E =======================================
.text:000084DC
.text:000084DC ; Attributes: bp-based frame
.text:000084DC
.text:000084DC ; _DWORD __thiscall CLimitedSequentialInStream::~CLimitedSequentialInStream(CLimitedSequentialInStream *__hidden this)
.text:000084DC                 public ??1CLimitedSequentialInStream@@QAE@XZ
.text:000084DC ??1CLimitedSequentialInStream@@QAE@XZ proc near
.text:000084DC                                         ; CODE XREF: CLimitedSequentialInStream::`scalar deleting destructor'(uint)+11p
.text:000084DC
.text:000084DC var_4           = dword ptr -4
.text:000084DC
.text:000084DC                 push    ebp
.text:000084DD                 mov     ebp, esp
.text:000084DF                 push    ecx
.text:000084E0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000084E7                 mov     [ebp+var_4], ecx
.text:000084EA                 mov     ecx, [ebp+var_4]
.text:000084ED                 add     ecx, 8
.text:000084F0                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:000084F5                 add     esp, 4
.text:000084F8                 cmp     ebp, esp
.text:000084FA                 call    __RTC_CheckEsp
.text:000084FF                 mov     esp, ebp
.text:00008501                 pop     ebp
.text:00008502                 retn
.text:00008502 ??1CLimitedSequentialInStream@@QAE@XZ endp
.text:00008502
.text:00008502 ; ---------------------------------------------------------------------------
.text:00008503                 align 4
.text:00008503 _text           ends
.text:00008503
.text:00008504 ; ===========================================================================
.text:00008504
.text:00008504 ; Segment type: Pure code
.text:00008504 ; Segment permissions: Read/Execute
.text:00008504 _text           segment para public 'CODE' use32
.text:00008504                 assume cs:_text
.text:00008504                 ;org 8504h
.text:00008504 ; COMDAT (pick any)
.text:00008504                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008504
.text:00008504 ; =============== S U B R O U T I N E =======================================
.text:00008504
.text:00008504 ; Attributes: bp-based frame
.text:00008504
.text:00008504 ; _DWORD __thiscall NArchive::N7z::CRefItem::CRefItem(NArchive::N7z::CRefItem *this, unsigned int, const struct NArchive::N7z::CUpdateItem *, bool)
.text:00008504                 public ??0CRefItem@N7z@NArchive@@QAE@IABUCUpdateItem@12@_N@Z
.text:00008504 ??0CRefItem@N7z@NArchive@@QAE@IABUCUpdateItem@12@_N@Z proc near
.text:00008504                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+3068p
.text:00008504
.text:00008504 var_34          = word ptr -34h
.text:00008504 var_30          = dword ptr -30h
.text:00008504 var_28          = byte ptr -28h
.text:00008504 var_18          = dword ptr -18h
.text:00008504 var_14          = dword ptr -14h
.text:00008504 var_10          = dword ptr -10h
.text:00008504 var_C           = dword ptr -0Ch
.text:00008504 var_4           = dword ptr -4
.text:00008504 arg_0           = dword ptr  8
.text:00008504 arg_4           = dword ptr  0Ch
.text:00008504 arg_8           = byte ptr  10h
.text:00008504
.text:00008504                 push    ebp
.text:00008505                 mov     ebp, esp
.text:00008507                 push    0FFFFFFFFh
.text:00008509                 push    offset __ehhandler$??0CRefItem@N7z@NArchive@@QAE@IABUCUpdateItem@12@_N@Z
.text:0000850E                 mov     eax, large fs:0
.text:00008514                 push    eax
.text:00008515                 sub     esp, 28h
.text:00008518                 push    edi
.text:00008519                 push    ecx
.text:0000851A                 lea     edi, [ebp+var_34]
.text:0000851D                 mov     ecx, 0Ah
.text:00008522                 mov     eax, 0CCCCCCCCh
.text:00008527                 rep stosd
.text:00008529                 pop     ecx
.text:0000852A                 mov     eax, dword ptr ds:___security_cookie
.text:0000852F                 xor     eax, ebp
.text:00008531                 push    eax
.text:00008532                 lea     eax, [ebp+var_C]
.text:00008535                 mov     large fs:0, eax
.text:0000853B                 mov     [ebp+var_10], ecx
.text:0000853E                 mov     eax, [ebp+var_10]
.text:00008541                 mov     ecx, [ebp+arg_4]
.text:00008544                 mov     [eax], ecx
.text:00008546                 mov     edx, [ebp+var_10]
.text:00008549                 mov     eax, [ebp+arg_0]
.text:0000854C                 mov     [edx+4], eax
.text:0000854F                 mov     ecx, [ebp+var_10]
.text:00008552                 mov     dword ptr [ecx+8], 0
.text:00008559                 mov     edx, [ebp+var_10]
.text:0000855C                 mov     dword ptr [edx+0Ch], 0
.text:00008563                 mov     eax, [ebp+var_10]
.text:00008566                 mov     dword ptr [eax+10h], 0
.text:0000856D                 movzx   ecx, [ebp+arg_8]
.text:00008571                 test    ecx, ecx
.text:00008573                 jz      loc_866D
.text:00008579                 mov     ecx, [ebp+arg_4]
.text:0000857C                 add     ecx, 28h ; '('  ; this
.text:0000857F                 call    ?ReverseFind_PathSepar@UString@@QBEHXZ ; UString::ReverseFind_PathSepar(void)
.text:00008584                 mov     [ebp+var_14], eax
.text:00008587                 mov     edx, [ebp+var_14]
.text:0000858A                 add     edx, 1
.text:0000858D                 mov     eax, [ebp+var_10]
.text:00008590                 mov     [eax+0Ch], edx
.text:00008593                 mov     ecx, [ebp+arg_4]
.text:00008596                 add     ecx, 28h ; '('  ; this
.text:00008599                 call    ?ReverseFind_Dot@UString@@QBEHXZ ; UString::ReverseFind_Dot(void)
.text:0000859E                 mov     [ebp+var_18], eax
.text:000085A1                 mov     ecx, [ebp+var_18]
.text:000085A4                 cmp     ecx, [ebp+var_14]
.text:000085A7                 jg      short loc_85BF
.text:000085A9                 mov     ecx, [ebp+arg_4]
.text:000085AC                 add     ecx, 28h ; '('  ; this
.text:000085AF                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:000085B4                 mov     edx, [ebp+var_10]
.text:000085B7                 mov     [edx+8], eax
.text:000085BA                 jmp     loc_866D
.text:000085BF ; ---------------------------------------------------------------------------
.text:000085BF
.text:000085BF loc_85BF:                               ; CODE XREF: NArchive::N7z::CRefItem::CRefItem(uint,NArchive::N7z::CUpdateItem const &,bool)+A3j
.text:000085BF                 mov     eax, [ebp+var_18]
.text:000085C2                 add     eax, 1
.text:000085C5                 mov     ecx, [ebp+var_10]
.text:000085C8                 mov     [ecx+8], eax
.text:000085CB                 mov     ecx, [ebp+arg_4]
.text:000085CE                 add     ecx, 28h ; '('  ; this
.text:000085D1                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:000085D6                 mov     edx, [ebp+var_10]
.text:000085D9                 cmp     [edx+8], eax
.text:000085DC                 jz      loc_866D
.text:000085E2                 lea     ecx, [ebp+var_28] ; this
.text:000085E5                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:000085EA                 mov     [ebp+var_4], 0
.text:000085F1                 mov     eax, [ebp+var_10]
.text:000085F4                 mov     ecx, [eax+8]
.text:000085F7                 mov     [ebp+var_30], ecx
.text:000085FA                 jmp     short loc_8605
.text:000085FC ; ---------------------------------------------------------------------------
.text:000085FC
.text:000085FC loc_85FC:                               ; CODE XREF: NArchive::N7z::CRefItem::CRefItem(uint,NArchive::N7z::CUpdateItem const &,bool)+158j
.text:000085FC                 mov     edx, [ebp+var_30]
.text:000085FF                 add     edx, 1
.text:00008602                 mov     [ebp+var_30], edx
.text:00008605
.text:00008605 loc_8605:                               ; CODE XREF: NArchive::N7z::CRefItem::CRefItem(uint,NArchive::N7z::CUpdateItem const &,bool)+F6j
.text:00008605                 mov     ecx, [ebp+arg_4]
.text:00008608                 add     ecx, 28h ; '('
.text:0000860B                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00008610                 mov     ecx, [ebp+var_30]
.text:00008613                 mov     dx, [eax+ecx*2]
.text:00008617                 mov     [ebp+var_34], dx
.text:0000861B                 movzx   eax, [ebp+var_34]
.text:0000861F                 cmp     eax, 80h ; 'Ç'
.text:00008624                 jl      short loc_8628
.text:00008626                 jmp     short loc_865E
.text:00008628 ; ---------------------------------------------------------------------------
.text:00008628
.text:00008628 loc_8628:                               ; CODE XREF: NArchive::N7z::CRefItem::CRefItem(uint,NArchive::N7z::CUpdateItem const &,bool)+120j
.text:00008628                 movzx   ecx, [ebp+var_34]
.text:0000862C                 test    ecx, ecx
.text:0000862E                 jnz     short loc_8646
.text:00008630                 lea     ecx, [ebp+var_28]
.text:00008633                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:00008638                 push    eax
.text:00008639                 call    ?GetExtIndex@N7z@NArchive@@YGIPBD@Z ; NArchive::N7z::GetExtIndex(char const *)
.text:0000863E                 mov     edx, [ebp+var_10]
.text:00008641                 mov     [edx+10h], eax
.text:00008644                 jmp     short loc_865E
.text:00008646 ; ---------------------------------------------------------------------------
.text:00008646
.text:00008646 loc_8646:                               ; CODE XREF: NArchive::N7z::CRefItem::CRefItem(uint,NArchive::N7z::CUpdateItem const &,bool)+12Aj
.text:00008646                 movzx   eax, byte ptr [ebp+var_34]
.text:0000864A                 push    eax             ; char
.text:0000864B                 call    ?MyCharLower_Ascii@@YGDD@Z ; MyCharLower_Ascii(char)
.text:00008650                 movzx   ecx, al
.text:00008653                 push    ecx
.text:00008654                 lea     ecx, [ebp+var_28]
.text:00008657                 call    ??YAString@@QAEAAV0@D@Z ; AString::operator+=(char)
.text:0000865C                 jmp     short loc_85FC
.text:0000865E ; ---------------------------------------------------------------------------
.text:0000865E
.text:0000865E loc_865E:                               ; CODE XREF: NArchive::N7z::CRefItem::CRefItem(uint,NArchive::N7z::CUpdateItem const &,bool)+122j
.text:0000865E                                         ; NArchive::N7z::CRefItem::CRefItem(uint,NArchive::N7z::CUpdateItem const &,bool)+140j
.text:0000865E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00008665                 lea     ecx, [ebp+var_28] ; this
.text:00008668                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:0000866D
.text:0000866D loc_866D:                               ; CODE XREF: NArchive::N7z::CRefItem::CRefItem(uint,NArchive::N7z::CUpdateItem const &,bool)+6Fj
.text:0000866D                                         ; NArchive::N7z::CRefItem::CRefItem(uint,NArchive::N7z::CUpdateItem const &,bool)+B6j ...
.text:0000866D                 mov     eax, [ebp+var_10]
.text:00008670                 push    edx
.text:00008671                 mov     ecx, ebp
.text:00008673                 push    eax
.text:00008674                 lea     edx, $LN16_0
.text:0000867A                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000867F                 pop     eax
.text:00008680                 pop     edx
.text:00008681                 mov     ecx, [ebp+var_C]
.text:00008684                 mov     large fs:0, ecx
.text:0000868B                 pop     ecx
.text:0000868C                 pop     edi
.text:0000868D                 add     esp, 34h
.text:00008690                 cmp     ebp, esp
.text:00008692                 call    __RTC_CheckEsp
.text:00008697                 mov     esp, ebp
.text:00008699                 pop     ebp
.text:0000869A                 retn    0Ch
.text:0000869A ??0CRefItem@N7z@NArchive@@QAE@IABUCUpdateItem@12@_N@Z endp
.text:0000869A
.text:0000869A ; ---------------------------------------------------------------------------
.text:0000869D                 align 10h
.text:000086A0 $LN16_0         dd 1                    ; DATA XREF: NArchive::N7z::CRefItem::CRefItem(uint,NArchive::N7z::CUpdateItem const &,bool)+170o
.text:000086A4                 dd offset $LN15_1
.text:000086A8 $LN15_1         dd 0FFFFFFD8h, 0Ch      ; DATA XREF: .text:000086A4o
.text:000086B0                 dd offset $LN13
.text:000086B4 $LN13           db 73h, 0               ; DATA XREF: .text:000086B0o
.text:000086B6                 align 4
.text:000086B6 _text           ends
.text:000086B6
.text$x:000086B8 ; ===========================================================================
.text$x:000086B8
.text$x:000086B8 ; Segment type: Pure code
.text$x:000086B8 ; Segment permissions: Read/Execute
.text$x:000086B8 _text$x         segment para public 'CODE' use32
.text$x:000086B8                 assume cs:_text$x
.text$x:000086B8                 ;org 86B8h
.text$x:000086B8 ; COMDAT (pick associative to section at 8504)
.text$x:000086B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000086B8
.text$x:000086B8 ; =============== S U B R O U T I N E =======================================
.text$x:000086B8
.text$x:000086B8
.text$x:000086B8 __unwindfunclet$??0CRefItem@N7z@NArchive@@QAE@IABUCUpdateItem@12@_N@Z$0 proc near
.text$x:000086B8                                         ; DATA XREF: .xdata$x:000086E0o
.text$x:000086B8                 lea     ecx, [ebp-28h]  ; this
.text$x:000086BB                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:000086BB __unwindfunclet$??0CRefItem@N7z@NArchive@@QAE@IABUCUpdateItem@12@_N@Z$0 endp
.text$x:000086BB
.text$x:000086C0
.text$x:000086C0 ; =============== S U B R O U T I N E =======================================
.text$x:000086C0
.text$x:000086C0
.text$x:000086C0 __ehhandler$??0CRefItem@N7z@NArchive@@QAE@IABUCUpdateItem@12@_N@Z proc near
.text$x:000086C0                                         ; DATA XREF: NArchive::N7z::CRefItem::CRefItem(uint,NArchive::N7z::CUpdateItem const &,bool)+5o
.text$x:000086C0
.text$x:000086C0 arg_4           = dword ptr  8
.text$x:000086C0
.text$x:000086C0                 mov     edx, [esp+arg_4]
.text$x:000086C4                 lea     eax, [edx+0Ch]
.text$x:000086C7                 mov     ecx, [edx-30h]
.text$x:000086CA                 xor     ecx, eax
.text$x:000086CC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000086D1                 mov     eax, offset __ehfuncinfo$??0CRefItem@N7z@NArchive@@QAE@IABUCUpdateItem@12@_N@Z
.text$x:000086D6                 jmp     ___CxxFrameHandler3
.text$x:000086D6 __ehhandler$??0CRefItem@N7z@NArchive@@QAE@IABUCUpdateItem@12@_N@Z endp
.text$x:000086D6
.text$x:000086D6 ; ---------------------------------------------------------------------------
.text$x:000086DB                 align 4
.text$x:000086DB _text$x         ends
.text$x:000086DB
.xdata$x:000086DC ; ===========================================================================
.xdata$x:000086DC
.xdata$x:000086DC ; Segment type: Pure data
.xdata$x:000086DC ; Segment permissions: Read
.xdata$x:000086DC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000086DC                 assume cs:_xdata$x
.xdata$x:000086DC                 ;org 86DCh
.xdata$x:000086DC ; COMDAT (pick associative to section at 8504)
.xdata$x:000086DC __unwindtable$??0CRefItem@N7z@NArchive@@QAE@IABUCUpdateItem@12@_N@Z db 0FFh
.xdata$x:000086DC                                         ; DATA XREF: .xdata$x:000086ECo
.xdata$x:000086DD                 db 0FFh
.xdata$x:000086DE                 db 0FFh
.xdata$x:000086DF                 db 0FFh
.xdata$x:000086E0                 dd offset __unwindfunclet$??0CRefItem@N7z@NArchive@@QAE@IABUCUpdateItem@12@_N@Z$0
.xdata$x:000086E4 __ehfuncinfo$??0CRefItem@N7z@NArchive@@QAE@IABUCUpdateItem@12@_N@Z db  22h ; "
.xdata$x:000086E4                                         ; DATA XREF: __ehhandler$??0CRefItem@N7z@NArchive@@QAE@IABUCUpdateItem@12@_N@Z+11o
.xdata$x:000086E5                 db    5
.xdata$x:000086E6                 db  93h ; ô
.xdata$x:000086E7                 db  19h
.xdata$x:000086E8                 db    1
.xdata$x:000086E9                 db    0
.xdata$x:000086EA                 db    0
.xdata$x:000086EB                 db    0
.xdata$x:000086EC                 dd offset __unwindtable$??0CRefItem@N7z@NArchive@@QAE@IABUCUpdateItem@12@_N@Z
.xdata$x:000086F0                 db    0
.xdata$x:000086F1                 db    0
.xdata$x:000086F2                 db    0
.xdata$x:000086F3                 db    0
.xdata$x:000086F4                 db    0
.xdata$x:000086F5                 db    0
.xdata$x:000086F6                 db    0
.xdata$x:000086F7                 db    0
.xdata$x:000086F8                 db    0
.xdata$x:000086F9                 db    0
.xdata$x:000086FA                 db    0
.xdata$x:000086FB                 db    0
.xdata$x:000086FC                 db    0
.xdata$x:000086FD                 db    0
.xdata$x:000086FE                 db    0
.xdata$x:000086FF                 db    0
.xdata$x:00008700                 db    0
.xdata$x:00008701                 db    0
.xdata$x:00008702                 db    0
.xdata$x:00008703                 db    0
.xdata$x:00008704                 db    1
.xdata$x:00008705                 db    0
.xdata$x:00008706                 db    0
.xdata$x:00008707                 db    0
.xdata$x:00008707 _xdata$x        ends
.xdata$x:00008707
.text:00008708 ; ===========================================================================
.text:00008708
.text:00008708 ; Segment type: Pure code
.text:00008708 ; Segment permissions: Read/Execute
.text:00008708 _text           segment para public 'CODE' use32
.text:00008708                 assume cs:_text
.text:00008708                 ;org 8708h
.text:00008708 ; COMDAT (pick any)
.text:00008708                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008708
.text:00008708 ; =============== S U B R O U T I N E =======================================
.text:00008708
.text:00008708 ; Attributes: bp-based frame
.text:00008708
.text:00008708 ; char __stdcall MyCharLower_Ascii(char)
.text:00008708                 public ?MyCharLower_Ascii@@YGDD@Z
.text:00008708 ?MyCharLower_Ascii@@YGDD@Z proc near    ; CODE XREF: NArchive::N7z::CRefItem::CRefItem(uint,NArchive::N7z::CUpdateItem const &,bool)+147p
.text:00008708
.text:00008708 arg_0           = byte ptr  8
.text:00008708
.text:00008708                 push    ebp
.text:00008709                 mov     ebp, esp
.text:0000870B                 movsx   eax, [ebp+arg_0]
.text:0000870F                 cmp     eax, 41h ; 'A'
.text:00008712                 jl      short loc_8726
.text:00008714                 movsx   ecx, [ebp+arg_0]
.text:00008718                 cmp     ecx, 5Ah ; 'Z'
.text:0000871B                 jg      short loc_8726
.text:0000871D                 movzx   eax, [ebp+arg_0]
.text:00008721                 add     eax, 20h ; ' '
.text:00008724                 jmp     short loc_8729
.text:00008726 ; ---------------------------------------------------------------------------
.text:00008726
.text:00008726 loc_8726:                               ; CODE XREF: MyCharLower_Ascii(char)+Aj
.text:00008726                                         ; MyCharLower_Ascii(char)+13j
.text:00008726                 mov     al, [ebp+arg_0]
.text:00008729
.text:00008729 loc_8729:                               ; CODE XREF: MyCharLower_Ascii(char)+1Cj
.text:00008729                 pop     ebp
.text:0000872A                 retn    4
.text:0000872A ?MyCharLower_Ascii@@YGDD@Z endp
.text:0000872A
.text:0000872A ; ---------------------------------------------------------------------------
.text:0000872D                 align 10h
.text:0000872D _text           ends
.text:0000872D
.text:00008730 ; ===========================================================================
.text:00008730
.text:00008730 ; Segment type: Pure code
.text:00008730 ; Segment permissions: Read/Execute
.text:00008730 _text           segment para public 'CODE' use32
.text:00008730                 assume cs:_text
.text:00008730                 ;org 8730h
.text:00008730 ; COMDAT (pick any)
.text:00008730                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008730
.text:00008730 ; =============== S U B R O U T I N E =======================================
.text:00008730
.text:00008730 ; Attributes: bp-based frame
.text:00008730
.text:00008730 ; _DWORD __thiscall AString::~AString(AString *__hidden this)
.text:00008730                 public ??1AString@@QAE@XZ
.text:00008730 ??1AString@@QAE@XZ proc near            ; CODE XREF: NArchive::N7z::CRefItem::CRefItem(uint,NArchive::N7z::CUpdateItem const &,bool)+164p
.text:00008730                                         ; __unwindfunclet$??0CRefItem@N7z@NArchive@@QAE@IABUCUpdateItem@12@_N@Z$0+3j
.text:00008730
.text:00008730 var_8           = dword ptr -8
.text:00008730 var_4           = dword ptr -4
.text:00008730
.text:00008730                 push    ebp
.text:00008731                 mov     ebp, esp
.text:00008733                 sub     esp, 8
.text:00008736                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000873D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008744                 mov     [ebp+var_4], ecx
.text:00008747                 mov     eax, [ebp+var_4]
.text:0000874A                 mov     ecx, [eax]
.text:0000874C                 mov     [ebp+var_8], ecx
.text:0000874F                 mov     edx, [ebp+var_8]
.text:00008752                 push    edx             ; void *
.text:00008753                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00008758                 add     esp, 4
.text:0000875B                 add     esp, 8
.text:0000875E                 cmp     ebp, esp
.text:00008760                 call    __RTC_CheckEsp
.text:00008765                 mov     esp, ebp
.text:00008767                 pop     ebp
.text:00008768                 retn
.text:00008768 ??1AString@@QAE@XZ endp
.text:00008768
.text:00008768 ; ---------------------------------------------------------------------------
.text:00008769                 align 4
.text:00008769 _text           ends
.text:00008769
.text:0000876C ; ===========================================================================
.text:0000876C
.text:0000876C ; Segment type: Pure code
.text:0000876C ; Segment permissions: Read/Execute
.text:0000876C _text           segment para public 'CODE' use32
.text:0000876C                 assume cs:_text
.text:0000876C                 ;org 876Ch
.text:0000876C ; COMDAT (pick any)
.text:0000876C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000876C
.text:0000876C ; =============== S U B R O U T I N E =======================================
.text:0000876C
.text:0000876C ; Attributes: bp-based frame
.text:0000876C
.text:0000876C ; public: __thiscall AString::operator char const *(void)const
.text:0000876C                 public ??BAString@@QBEPBDXZ
.text:0000876C ??BAString@@QBEPBDXZ proc near          ; CODE XREF: NArchive::N7z::CRefItem::CRefItem(uint,NArchive::N7z::CUpdateItem const &,bool)+12Fp
.text:0000876C
.text:0000876C var_4           = dword ptr -4
.text:0000876C
.text:0000876C                 push    ebp
.text:0000876D                 mov     ebp, esp
.text:0000876F                 push    ecx
.text:00008770                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008777                 mov     [ebp+var_4], ecx
.text:0000877A                 mov     eax, [ebp+var_4]
.text:0000877D                 mov     eax, [eax]
.text:0000877F                 mov     esp, ebp
.text:00008781                 pop     ebp
.text:00008782                 retn
.text:00008782 ??BAString@@QBEPBDXZ endp
.text:00008782
.text:00008782 ; ---------------------------------------------------------------------------
.text:00008783                 align 4
.text:00008783 _text           ends
.text:00008783
.text:00008784 ; ===========================================================================
.text:00008784
.text:00008784 ; Segment type: Pure code
.text:00008784 ; Segment permissions: Read/Execute
.text:00008784 _text           segment para public 'CODE' use32
.text:00008784                 assume cs:_text
.text:00008784                 ;org 8784h
.text:00008784 ; COMDAT (pick any)
.text:00008784                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008784
.text:00008784 ; =============== S U B R O U T I N E =======================================
.text:00008784
.text:00008784 ; Attributes: bp-based frame
.text:00008784
.text:00008784 ; public: class AString & __thiscall AString::operator+=(char)
.text:00008784                 public ??YAString@@QAEAAV0@D@Z
.text:00008784 ??YAString@@QAEAAV0@D@Z proc near       ; CODE XREF: NArchive::N7z::CRefItem::CRefItem(uint,NArchive::N7z::CUpdateItem const &,bool)+153p
.text:00008784
.text:00008784 var_C           = dword ptr -0Ch
.text:00008784 var_8           = dword ptr -8
.text:00008784 var_4           = dword ptr -4
.text:00008784 arg_0           = byte ptr  8
.text:00008784
.text:00008784                 push    ebp
.text:00008785                 mov     ebp, esp
.text:00008787                 sub     esp, 0Ch
.text:0000878A                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00008791                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00008798                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000879F                 mov     [ebp+var_4], ecx
.text:000087A2                 mov     eax, [ebp+var_4]
.text:000087A5                 mov     ecx, [ebp+var_4]
.text:000087A8                 mov     edx, [eax+8]
.text:000087AB                 cmp     edx, [ecx+4]
.text:000087AE                 jnz     short loc_87B8
.text:000087B0                 mov     ecx, [ebp+var_4] ; this
.text:000087B3                 call    ?Grow_1@AString@@AAEXXZ ; AString::Grow_1(void)
.text:000087B8
.text:000087B8 loc_87B8:                               ; CODE XREF: AString::operator+=(char)+2Aj
.text:000087B8                 mov     eax, [ebp+var_4]
.text:000087BB                 mov     ecx, [eax+4]
.text:000087BE                 mov     [ebp+var_8], ecx
.text:000087C1                 mov     edx, [ebp+var_4]
.text:000087C4                 mov     eax, [edx]
.text:000087C6                 mov     [ebp+var_C], eax
.text:000087C9                 mov     ecx, [ebp+var_C]
.text:000087CC                 add     ecx, [ebp+var_8]
.text:000087CF                 mov     dl, [ebp+arg_0]
.text:000087D2                 mov     [ecx], dl
.text:000087D4                 mov     eax, [ebp+var_8]
.text:000087D7                 add     eax, 1
.text:000087DA                 mov     [ebp+var_8], eax
.text:000087DD                 mov     ecx, [ebp+var_C]
.text:000087E0                 add     ecx, [ebp+var_8]
.text:000087E3                 mov     byte ptr [ecx], 0
.text:000087E6                 mov     edx, [ebp+var_4]
.text:000087E9                 mov     eax, [ebp+var_8]
.text:000087EC                 mov     [edx+4], eax
.text:000087EF                 mov     eax, [ebp+var_4]
.text:000087F2                 add     esp, 0Ch
.text:000087F5                 cmp     ebp, esp
.text:000087F7                 call    __RTC_CheckEsp
.text:000087FC                 mov     esp, ebp
.text:000087FE                 pop     ebp
.text:000087FF                 retn    4
.text:000087FF ??YAString@@QAEAAV0@D@Z endp
.text:000087FF
.text:000087FF ; ---------------------------------------------------------------------------
.text:00008802                 align 4
.text:00008802 _text           ends
.text:00008802
.text:00008804 ; ===========================================================================
.text:00008804
.text:00008804 ; Segment type: Pure code
.text:00008804 ; Segment permissions: Read/Execute
.text:00008804 _text           segment para public 'CODE' use32
.text:00008804                 assume cs:_text
.text:00008804                 ;org 8804h
.text:00008804 ; COMDAT (pick any)
.text:00008804                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008804
.text:00008804 ; =============== S U B R O U T I N E =======================================
.text:00008804
.text:00008804 ; Attributes: bp-based frame
.text:00008804
.text:00008804 ; _DWORD __thiscall NArchive::N7z::CAnalysis::CAnalysis(NArchive::N7z::CAnalysis *__hidden this)
.text:00008804                 public ??0CAnalysis@N7z@NArchive@@QAE@XZ
.text:00008804 ??0CAnalysis@N7z@NArchive@@QAE@XZ proc near
.text:00008804                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+8DCp
.text:00008804
.text:00008804 var_10          = dword ptr -10h
.text:00008804 var_C           = dword ptr -0Ch
.text:00008804 var_4           = dword ptr -4
.text:00008804
.text:00008804                 push    ebp
.text:00008805                 mov     ebp, esp
.text:00008807                 push    0FFFFFFFFh
.text:00008809                 push    offset __ehhandler$??0CAnalysis@N7z@NArchive@@QAE@XZ
.text:0000880E                 mov     eax, large fs:0
.text:00008814                 push    eax
.text:00008815                 push    ecx
.text:00008816                 mov     [ebp+var_10], 0CCCCCCCCh
.text:0000881D                 mov     eax, dword ptr ds:___security_cookie
.text:00008822                 xor     eax, ebp
.text:00008824                 push    eax
.text:00008825                 lea     eax, [ebp+var_C]
.text:00008828                 mov     large fs:0, eax
.text:0000882E                 mov     [ebp+var_10], ecx
.text:00008831                 mov     ecx, [ebp+var_10]
.text:00008834                 call    ??0?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:00008839                 mov     [ebp+var_4], 0
.text:00008840                 mov     ecx, [ebp+var_10]
.text:00008843                 add     ecx, 4
.text:00008846                 call    ??0?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::CBuffer<uchar>(void)
.text:0000884B                 mov     eax, [ebp+var_10]
.text:0000884E                 mov     byte ptr [eax+0Ch], 1
.text:00008852                 mov     ecx, [ebp+var_10]
.text:00008855                 mov     byte ptr [ecx+0Dh], 0
.text:00008859                 mov     edx, [ebp+var_10]
.text:0000885C                 mov     byte ptr [edx+0Eh], 0
.text:00008860                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00008867                 mov     eax, [ebp+var_10]
.text:0000886A                 mov     ecx, [ebp+var_C]
.text:0000886D                 mov     large fs:0, ecx
.text:00008874                 pop     ecx
.text:00008875                 add     esp, 10h
.text:00008878                 cmp     ebp, esp
.text:0000887A                 call    __RTC_CheckEsp
.text:0000887F                 mov     esp, ebp
.text:00008881                 pop     ebp
.text:00008882                 retn
.text:00008882 ??0CAnalysis@N7z@NArchive@@QAE@XZ endp
.text:00008882
.text:00008882 ; ---------------------------------------------------------------------------
.text:00008883                 align 4
.text:00008883 _text           ends
.text:00008883
.text$x:00008884 ; ===========================================================================
.text$x:00008884
.text$x:00008884 ; Segment type: Pure code
.text$x:00008884 ; Segment permissions: Read/Execute
.text$x:00008884 _text$x         segment para public 'CODE' use32
.text$x:00008884                 assume cs:_text$x
.text$x:00008884                 ;org 8884h
.text$x:00008884 ; COMDAT (pick associative to section at 8804)
.text$x:00008884                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008884
.text$x:00008884 ; =============== S U B R O U T I N E =======================================
.text$x:00008884
.text$x:00008884
.text$x:00008884 __unwindfunclet$??0CAnalysis@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:00008884                                         ; DATA XREF: .xdata$x:000088ACo
.text$x:00008884                 mov     ecx, [ebp-10h]
.text$x:00008887                 jmp     ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text$x:00008887 __unwindfunclet$??0CAnalysis@N7z@NArchive@@QAE@XZ$0 endp
.text$x:00008887
.text$x:0000888C
.text$x:0000888C ; =============== S U B R O U T I N E =======================================
.text$x:0000888C
.text$x:0000888C
.text$x:0000888C __ehhandler$??0CAnalysis@N7z@NArchive@@QAE@XZ proc near
.text$x:0000888C                                         ; DATA XREF: NArchive::N7z::CAnalysis::CAnalysis(void)+5o
.text$x:0000888C
.text$x:0000888C arg_4           = dword ptr  8
.text$x:0000888C
.text$x:0000888C                 mov     edx, [esp+arg_4]
.text$x:00008890                 lea     eax, [edx+0Ch]
.text$x:00008893                 mov     ecx, [edx-8]
.text$x:00008896                 xor     ecx, eax
.text$x:00008898                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000889D                 mov     eax, offset __ehfuncinfo$??0CAnalysis@N7z@NArchive@@QAE@XZ
.text$x:000088A2                 jmp     ___CxxFrameHandler3
.text$x:000088A2 __ehhandler$??0CAnalysis@N7z@NArchive@@QAE@XZ endp
.text$x:000088A2
.text$x:000088A2 ; ---------------------------------------------------------------------------
.text$x:000088A7                 align 4
.text$x:000088A7 _text$x         ends
.text$x:000088A7
.xdata$x:000088A8 ; ===========================================================================
.xdata$x:000088A8
.xdata$x:000088A8 ; Segment type: Pure data
.xdata$x:000088A8 ; Segment permissions: Read
.xdata$x:000088A8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000088A8                 assume cs:_xdata$x
.xdata$x:000088A8                 ;org 88A8h
.xdata$x:000088A8 ; COMDAT (pick associative to section at 8804)
.xdata$x:000088A8 __unwindtable$??0CAnalysis@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:000088A8                                         ; DATA XREF: .xdata$x:000088B8o
.xdata$x:000088A9                 db 0FFh
.xdata$x:000088AA                 db 0FFh
.xdata$x:000088AB                 db 0FFh
.xdata$x:000088AC                 dd offset __unwindfunclet$??0CAnalysis@N7z@NArchive@@QAE@XZ$0
.xdata$x:000088B0 __ehfuncinfo$??0CAnalysis@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:000088B0                                         ; DATA XREF: __ehhandler$??0CAnalysis@N7z@NArchive@@QAE@XZ+11o
.xdata$x:000088B1                 db    5
.xdata$x:000088B2                 db  93h ; ô
.xdata$x:000088B3                 db  19h
.xdata$x:000088B4                 db    1
.xdata$x:000088B5                 db    0
.xdata$x:000088B6                 db    0
.xdata$x:000088B7                 db    0
.xdata$x:000088B8                 dd offset __unwindtable$??0CAnalysis@N7z@NArchive@@QAE@XZ
.xdata$x:000088BC                 db    0
.xdata$x:000088BD                 db    0
.xdata$x:000088BE                 db    0
.xdata$x:000088BF                 db    0
.xdata$x:000088C0                 db    0
.xdata$x:000088C1                 db    0
.xdata$x:000088C2                 db    0
.xdata$x:000088C3                 db    0
.xdata$x:000088C4                 db    0
.xdata$x:000088C5                 db    0
.xdata$x:000088C6                 db    0
.xdata$x:000088C7                 db    0
.xdata$x:000088C8                 db    0
.xdata$x:000088C9                 db    0
.xdata$x:000088CA                 db    0
.xdata$x:000088CB                 db    0
.xdata$x:000088CC                 db    0
.xdata$x:000088CD                 db    0
.xdata$x:000088CE                 db    0
.xdata$x:000088CF                 db    0
.xdata$x:000088D0                 db    1
.xdata$x:000088D1                 db    0
.xdata$x:000088D2                 db    0
.xdata$x:000088D3                 db    0
.xdata$x:000088D3 _xdata$x        ends
.xdata$x:000088D3
.text:000088D4 ; ===========================================================================
.text:000088D4
.text:000088D4 ; Segment type: Pure code
.text:000088D4 ; Segment permissions: Read/Execute
.text:000088D4 _text           segment para public 'CODE' use32
.text:000088D4                 assume cs:_text
.text:000088D4                 ;org 88D4h
.text:000088D4 ; COMDAT (pick any)
.text:000088D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000088D4
.text:000088D4 ; =============== S U B R O U T I N E =======================================
.text:000088D4
.text:000088D4 ; Attributes: bp-based frame
.text:000088D4
.text:000088D4 ; bool __thiscall CMethodProps::Are_Lzma_Model_Props_Defined(CMethodProps *__hidden this)
.text:000088D4                 public ?Are_Lzma_Model_Props_Defined@CMethodProps@@QBE_NXZ
.text:000088D4 ?Are_Lzma_Model_Props_Defined@CMethodProps@@QBE_NXZ proc near
.text:000088D4                                         ; CODE XREF: NArchive::N7z::MakeExeMethod(NArchive::N7z::CCompressionMethodMode &,NArchive::N7z::CFilterMode const &,bool)+26Cp
.text:000088D4
.text:000088D4 var_4           = dword ptr -4
.text:000088D4
.text:000088D4                 push    ebp
.text:000088D5                 mov     ebp, esp
.text:000088D7                 push    ecx
.text:000088D8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000088DF                 mov     [ebp+var_4], ecx
.text:000088E2                 push    5               ; unsigned __int32
.text:000088E4                 mov     ecx, [ebp+var_4] ; this
.text:000088E7                 call    ?FindProp@CMethodProps@@QBEHK@Z ; CMethodProps::FindProp(ulong)
.text:000088EC                 test    eax, eax
.text:000088EE                 jl      short loc_88F4
.text:000088F0                 mov     al, 1
.text:000088F2                 jmp     short loc_891A
.text:000088F4 ; ---------------------------------------------------------------------------
.text:000088F4
.text:000088F4 loc_88F4:                               ; CODE XREF: CMethodProps::Are_Lzma_Model_Props_Defined(void)+1Aj
.text:000088F4                 push    6               ; unsigned __int32
.text:000088F6                 mov     ecx, [ebp+var_4] ; this
.text:000088F9                 call    ?FindProp@CMethodProps@@QBEHK@Z ; CMethodProps::FindProp(ulong)
.text:000088FE                 test    eax, eax
.text:00008900                 jl      short loc_8906
.text:00008902                 mov     al, 1
.text:00008904                 jmp     short loc_891A
.text:00008906 ; ---------------------------------------------------------------------------
.text:00008906
.text:00008906 loc_8906:                               ; CODE XREF: CMethodProps::Are_Lzma_Model_Props_Defined(void)+2Cj
.text:00008906                 push    7               ; unsigned __int32
.text:00008908                 mov     ecx, [ebp+var_4] ; this
.text:0000890B                 call    ?FindProp@CMethodProps@@QBEHK@Z ; CMethodProps::FindProp(ulong)
.text:00008910                 test    eax, eax
.text:00008912                 jl      short loc_8918
.text:00008914                 mov     al, 1
.text:00008916                 jmp     short loc_891A
.text:00008918 ; ---------------------------------------------------------------------------
.text:00008918
.text:00008918 loc_8918:                               ; CODE XREF: CMethodProps::Are_Lzma_Model_Props_Defined(void)+3Ej
.text:00008918                 xor     al, al
.text:0000891A
.text:0000891A loc_891A:                               ; CODE XREF: CMethodProps::Are_Lzma_Model_Props_Defined(void)+1Ej
.text:0000891A                                         ; CMethodProps::Are_Lzma_Model_Props_Defined(void)+30j ...
.text:0000891A                 add     esp, 4
.text:0000891D                 cmp     ebp, esp
.text:0000891F                 call    __RTC_CheckEsp
.text:00008924                 mov     esp, ebp
.text:00008926                 pop     ebp
.text:00008927                 retn
.text:00008927 ?Are_Lzma_Model_Props_Defined@CMethodProps@@QBE_NXZ endp
.text:00008927
.text:00008927 _text           ends
.text:00008927
.text:00008928 ; ===========================================================================
.text:00008928
.text:00008928 ; Segment type: Pure code
.text:00008928 ; Segment permissions: Read/Execute
.text:00008928 _text           segment para public 'CODE' use32
.text:00008928                 assume cs:_text
.text:00008928                 ;org 8928h
.text:00008928 ; COMDAT (pick any)
.text:00008928                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008928
.text:00008928 ; =============== S U B R O U T I N E =======================================
.text:00008928
.text:00008928 ; Attributes: bp-based frame
.text:00008928
.text:00008928 ; bool __thiscall NArchive::N7z::CMethodFull::IsSimpleCoder(NArchive::N7z::CMethodFull *__hidden this)
.text:00008928                 public ?IsSimpleCoder@CMethodFull@N7z@NArchive@@QBE_NXZ
.text:00008928 ?IsSimpleCoder@CMethodFull@N7z@NArchive@@QBE_NXZ proc near
.text:00008928                                         ; CODE XREF: NArchive::N7z::MakeExeMethod(NArchive::N7z::CCompressionMethodMode &,NArchive::N7z::CFilterMode const &,bool)+5Dp
.text:00008928
.text:00008928 var_4           = dword ptr -4
.text:00008928
.text:00008928                 push    ebp
.text:00008929                 mov     ebp, esp
.text:0000892B                 push    ecx
.text:0000892C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008933                 mov     [ebp+var_4], ecx
.text:00008936                 mov     eax, [ebp+var_4]
.text:00008939                 xor     ecx, ecx
.text:0000893B                 cmp     dword ptr [eax+18h], 1
.text:0000893F                 setz    cl
.text:00008942                 mov     al, cl
.text:00008944                 mov     esp, ebp
.text:00008946                 pop     ebp
.text:00008947                 retn
.text:00008947 ?IsSimpleCoder@CMethodFull@N7z@NArchive@@QBE_NXZ endp
.text:00008947
.text:00008947 _text           ends
.text:00008947
.text:00008948 ; ===========================================================================
.text:00008948
.text:00008948 ; Segment type: Pure code
.text:00008948 ; Segment permissions: Read/Execute
.text:00008948 _text           segment para public 'CODE' use32
.text:00008948                 assume cs:_text
.text:00008948                 ;org 8948h
.text:00008948 ; COMDAT (pick any)
.text:00008948                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008948
.text:00008948 ; =============== S U B R O U T I N E =======================================
.text:00008948
.text:00008948 ; Attributes: bp-based frame
.text:00008948
.text:00008948 ; bool __thiscall NArchive::N7z::CCompressionMethodMode::IsThereBond_to_Coder(NArchive::N7z::CCompressionMethodMode *this, unsigned int)
.text:00008948                 public ?IsThereBond_to_Coder@CCompressionMethodMode@N7z@NArchive@@QBE_NI@Z
.text:00008948 ?IsThereBond_to_Coder@CCompressionMethodMode@N7z@NArchive@@QBE_NI@Z proc near
.text:00008948                                         ; CODE XREF: NArchive::N7z::AddBondForFilter(NArchive::N7z::CCompressionMethodMode &)+50p
.text:00008948
.text:00008948 var_8           = dword ptr -8
.text:00008948 var_4           = dword ptr -4
.text:00008948 arg_0           = dword ptr  8
.text:00008948
.text:00008948                 push    ebp
.text:00008949                 mov     ebp, esp
.text:0000894B                 sub     esp, 8
.text:0000894E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00008955                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000895C                 mov     [ebp+var_4], ecx
.text:0000895F                 mov     [ebp+var_8], 0
.text:00008966                 jmp     short loc_8971
.text:00008968 ; ---------------------------------------------------------------------------
.text:00008968
.text:00008968 loc_8968:                               ; CODE XREF: NArchive::N7z::CCompressionMethodMode::IsThereBond_to_Coder(uint):loc_899Cj
.text:00008968                 mov     eax, [ebp+var_8]
.text:0000896B                 add     eax, 1
.text:0000896E                 mov     [ebp+var_8], eax
.text:00008971
.text:00008971 loc_8971:                               ; CODE XREF: NArchive::N7z::CCompressionMethodMode::IsThereBond_to_Coder(uint)+1Ej
.text:00008971                 mov     ecx, [ebp+var_4]
.text:00008974                 add     ecx, 0Ch
.text:00008977                 call    ?Size@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CBond2>::Size(void)
.text:0000897C                 cmp     [ebp+var_8], eax
.text:0000897F                 jnb     short loc_899E
.text:00008981                 mov     ecx, [ebp+var_8]
.text:00008984                 push    ecx
.text:00008985                 mov     ecx, [ebp+var_4]
.text:00008988                 add     ecx, 0Ch
.text:0000898B                 call    ??A?$CRecordVector@UCBond2@N7z@NArchive@@@@QBEABUCBond2@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CBond2>::operator[](uint)
.text:00008990                 mov     edx, [eax+8]
.text:00008993                 cmp     edx, [ebp+arg_0]
.text:00008996                 jnz     short loc_899C
.text:00008998                 mov     al, 1
.text:0000899A                 jmp     short loc_89A0
.text:0000899C ; ---------------------------------------------------------------------------
.text:0000899C
.text:0000899C loc_899C:                               ; CODE XREF: NArchive::N7z::CCompressionMethodMode::IsThereBond_to_Coder(uint)+4Ej
.text:0000899C                 jmp     short loc_8968
.text:0000899E ; ---------------------------------------------------------------------------
.text:0000899E
.text:0000899E loc_899E:                               ; CODE XREF: NArchive::N7z::CCompressionMethodMode::IsThereBond_to_Coder(uint)+37j
.text:0000899E                 xor     al, al
.text:000089A0
.text:000089A0 loc_89A0:                               ; CODE XREF: NArchive::N7z::CCompressionMethodMode::IsThereBond_to_Coder(uint)+52j
.text:000089A0                 add     esp, 8
.text:000089A3                 cmp     ebp, esp
.text:000089A5                 call    __RTC_CheckEsp
.text:000089AA                 mov     esp, ebp
.text:000089AC                 pop     ebp
.text:000089AD                 retn    4
.text:000089AD ?IsThereBond_to_Coder@CCompressionMethodMode@N7z@NArchive@@QBE_NI@Z endp
.text:000089AD
.text:000089AD _text           ends
.text:000089AD
.text:000089B0 ; ===========================================================================
.text:000089B0
.text:000089B0 ; Segment type: Pure code
.text:000089B0 ; Segment permissions: Read/Execute
.text:000089B0 _text           segment para public 'CODE' use32
.text:000089B0                 assume cs:_text
.text:000089B0                 ;org 89B0h
.text:000089B0 ; COMDAT (pick any)
.text:000089B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000089B0
.text:000089B0 ; =============== S U B R O U T I N E =======================================
.text:000089B0
.text:000089B0 ; Attributes: bp-based frame
.text:000089B0
.text:000089B0 ; _DWORD __thiscall NArchive::N7z::CMethodFull::CMethodFull(NArchive::N7z::CMethodFull *__hidden this)
.text:000089B0                 public ??0CMethodFull@N7z@NArchive@@QAE@XZ
.text:000089B0 ??0CMethodFull@N7z@NArchive@@QAE@XZ proc near
.text:000089B0                                         ; CODE XREF: NArchive::N7z::AddBcj2Methods(NArchive::N7z::CCompressionMethodMode &)+3Cp
.text:000089B0                                         ; CObjectVector<NArchive::N7z::CMethodFull>::InsertNew(uint)+59p
.text:000089B0
.text:000089B0 var_4           = dword ptr -4
.text:000089B0
.text:000089B0                 push    ebp
.text:000089B1                 mov     ebp, esp
.text:000089B3                 push    ecx
.text:000089B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000089BB                 mov     [ebp+var_4], ecx
.text:000089BE                 mov     ecx, [ebp+var_4]
.text:000089C1                 call    ??0CMethodProps@@QAE@XZ ; CMethodProps::CMethodProps(void)
.text:000089C6                 mov     eax, [ebp+var_4]
.text:000089C9                 add     esp, 4
.text:000089CC                 cmp     ebp, esp
.text:000089CE                 call    __RTC_CheckEsp
.text:000089D3                 mov     esp, ebp
.text:000089D5                 pop     ebp
.text:000089D6                 retn
.text:000089D6 ??0CMethodFull@N7z@NArchive@@QAE@XZ endp
.text:000089D6
.text:000089D6 ; ---------------------------------------------------------------------------
.text:000089D7                 align 4
.text:000089D7 _text           ends
.text:000089D7
.text:000089D8 ; ===========================================================================
.text:000089D8
.text:000089D8 ; Segment type: Pure code
.text:000089D8 ; Segment permissions: Read/Execute
.text:000089D8 _text           segment para public 'CODE' use32
.text:000089D8                 assume cs:_text
.text:000089D8                 ;org 89D8h
.text:000089D8 ; COMDAT (pick any)
.text:000089D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000089D8
.text:000089D8 ; =============== S U B R O U T I N E =======================================
.text:000089D8
.text:000089D8 ; Attributes: bp-based frame
.text:000089D8
.text:000089D8 ; public: __thiscall CMethodProps::CMethodProps(void)
.text:000089D8                 public ??0CMethodProps@@QAE@XZ
.text:000089D8 ??0CMethodProps@@QAE@XZ proc near       ; CODE XREF: NArchive::N7z::CMethodFull::CMethodFull(void)+11p
.text:000089D8
.text:000089D8 var_4           = dword ptr -4
.text:000089D8
.text:000089D8                 push    ebp
.text:000089D9                 mov     ebp, esp
.text:000089DB                 push    ecx
.text:000089DC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000089E3                 mov     [ebp+var_4], ecx
.text:000089E6                 mov     ecx, [ebp+var_4]
.text:000089E9                 call    ??0CProps@@QAE@XZ ; CProps::CProps(void)
.text:000089EE                 mov     eax, [ebp+var_4]
.text:000089F1                 add     esp, 4
.text:000089F4                 cmp     ebp, esp
.text:000089F6                 call    __RTC_CheckEsp
.text:000089FB                 mov     esp, ebp
.text:000089FD                 pop     ebp
.text:000089FE                 retn
.text:000089FE ??0CMethodProps@@QAE@XZ endp
.text:000089FE
.text:000089FE ; ---------------------------------------------------------------------------
.text:000089FF                 align 10h
.text:000089FF _text           ends
.text:000089FF
.text:00008A00 ; ===========================================================================
.text:00008A00
.text:00008A00 ; Segment type: Pure code
.text:00008A00 ; Segment permissions: Read/Execute
.text:00008A00 _text           segment para public 'CODE' use32
.text:00008A00                 assume cs:_text
.text:00008A00                 ;org 8A00h
.text:00008A00 ; COMDAT (pick any)
.text:00008A00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008A00
.text:00008A00 ; =============== S U B R O U T I N E =======================================
.text:00008A00
.text:00008A00 ; Attributes: bp-based frame
.text:00008A00
.text:00008A00 ; public: __thiscall CProps::CProps(void)
.text:00008A00                 public ??0CProps@@QAE@XZ
.text:00008A00 ??0CProps@@QAE@XZ proc near             ; CODE XREF: CMethodProps::CMethodProps(void)+11p
.text:00008A00
.text:00008A00 var_4           = dword ptr -4
.text:00008A00
.text:00008A00                 push    ebp
.text:00008A01                 mov     ebp, esp
.text:00008A03                 push    ecx
.text:00008A04                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008A0B                 mov     [ebp+var_4], ecx
.text:00008A0E                 mov     ecx, [ebp+var_4]
.text:00008A11                 call    ??0?$CObjectVector@UCProp@@@@QAE@XZ ; CObjectVector<CProp>::CObjectVector<CProp>(void)
.text:00008A16                 mov     eax, [ebp+var_4]
.text:00008A19                 add     esp, 4
.text:00008A1C                 cmp     ebp, esp
.text:00008A1E                 call    __RTC_CheckEsp
.text:00008A23                 mov     esp, ebp
.text:00008A25                 pop     ebp
.text:00008A26                 retn
.text:00008A26 ??0CProps@@QAE@XZ endp
.text:00008A26
.text:00008A26 ; ---------------------------------------------------------------------------
.text:00008A27                 align 4
.text:00008A27 _text           ends
.text:00008A27
.text:00008A28 ; ===========================================================================
.text:00008A28
.text:00008A28 ; Segment type: Pure code
.text:00008A28 ; Segment permissions: Read/Execute
.text:00008A28 _text           segment para public 'CODE' use32
.text:00008A28                 assume cs:_text
.text:00008A28                 ;org 8A28h
.text:00008A28 ; COMDAT (pick any)
.text:00008A28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008A28
.text:00008A28 ; =============== S U B R O U T I N E =======================================
.text:00008A28
.text:00008A28 ; Attributes: bp-based frame
.text:00008A28
.text:00008A28 ; _DWORD __thiscall NArchive::N7z::CMethodFull::~CMethodFull(NArchive::N7z::CMethodFull *__hidden this)
.text:00008A28                 public ??1CMethodFull@N7z@NArchive@@QAE@XZ
.text:00008A28 ??1CMethodFull@N7z@NArchive@@QAE@XZ proc near
.text:00008A28                                         ; CODE XREF: NArchive::N7z::AddBcj2Methods(NArchive::N7z::CCompressionMethodMode &)+150p
.text:00008A28                                         ; NArchive::N7z::AddBcj2Methods(NArchive::N7z::CCompressionMethodMode &)+1D1p ...
.text:00008A28
.text:00008A28 var_4           = dword ptr -4
.text:00008A28
.text:00008A28                 push    ebp
.text:00008A29                 mov     ebp, esp
.text:00008A2B                 push    ecx
.text:00008A2C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008A33                 mov     [ebp+var_4], ecx
.text:00008A36                 mov     ecx, [ebp+var_4] ; this
.text:00008A39                 call    ??1CMethodProps@@QAE@XZ ; CMethodProps::~CMethodProps(void)
.text:00008A3E                 add     esp, 4
.text:00008A41                 cmp     ebp, esp
.text:00008A43                 call    __RTC_CheckEsp
.text:00008A48                 mov     esp, ebp
.text:00008A4A                 pop     ebp
.text:00008A4B                 retn
.text:00008A4B ??1CMethodFull@N7z@NArchive@@QAE@XZ endp
.text:00008A4B
.text:00008A4B _text           ends
.text:00008A4B
.text:00008A4C ; ===========================================================================
.text:00008A4C
.text:00008A4C ; Segment type: Pure code
.text:00008A4C ; Segment permissions: Read/Execute
.text:00008A4C _text           segment para public 'CODE' use32
.text:00008A4C                 assume cs:_text
.text:00008A4C                 ;org 8A4Ch
.text:00008A4C ; COMDAT (pick any)
.text:00008A4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008A4C
.text:00008A4C ; =============== S U B R O U T I N E =======================================
.text:00008A4C
.text:00008A4C ; Attributes: bp-based frame
.text:00008A4C
.text:00008A4C ; _DWORD __thiscall CMethodProps::~CMethodProps(CMethodProps *__hidden this)
.text:00008A4C                 public ??1CMethodProps@@QAE@XZ
.text:00008A4C ??1CMethodProps@@QAE@XZ proc near       ; CODE XREF: NArchive::N7z::CMethodFull::~CMethodFull(void)+11p
.text:00008A4C
.text:00008A4C var_4           = dword ptr -4
.text:00008A4C
.text:00008A4C                 push    ebp
.text:00008A4D                 mov     ebp, esp
.text:00008A4F                 push    ecx
.text:00008A50                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008A57                 mov     [ebp+var_4], ecx
.text:00008A5A                 mov     ecx, [ebp+var_4] ; this
.text:00008A5D                 call    ??1CProps@@QAE@XZ ; CProps::~CProps(void)
.text:00008A62                 add     esp, 4
.text:00008A65                 cmp     ebp, esp
.text:00008A67                 call    __RTC_CheckEsp
.text:00008A6C                 mov     esp, ebp
.text:00008A6E                 pop     ebp
.text:00008A6F                 retn
.text:00008A6F ??1CMethodProps@@QAE@XZ endp
.text:00008A6F
.text:00008A6F _text           ends
.text:00008A6F
.text:00008A70 ; ===========================================================================
.text:00008A70
.text:00008A70 ; Segment type: Pure code
.text:00008A70 ; Segment permissions: Read/Execute
.text:00008A70 _text           segment para public 'CODE' use32
.text:00008A70                 assume cs:_text
.text:00008A70                 ;org 8A70h
.text:00008A70 ; COMDAT (pick any)
.text:00008A70                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008A70
.text:00008A70 ; =============== S U B R O U T I N E =======================================
.text:00008A70
.text:00008A70 ; Attributes: bp-based frame
.text:00008A70
.text:00008A70 ; _DWORD __thiscall CProps::~CProps(CProps *__hidden this)
.text:00008A70                 public ??1CProps@@QAE@XZ
.text:00008A70 ??1CProps@@QAE@XZ proc near             ; CODE XREF: CMethodProps::~CMethodProps(void)+11p
.text:00008A70
.text:00008A70 var_4           = dword ptr -4
.text:00008A70
.text:00008A70                 push    ebp
.text:00008A71                 mov     ebp, esp
.text:00008A73                 push    ecx
.text:00008A74                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008A7B                 mov     [ebp+var_4], ecx
.text:00008A7E                 mov     ecx, [ebp+var_4]
.text:00008A81                 call    ??1?$CObjectVector@UCProp@@@@QAE@XZ ; CObjectVector<CProp>::~CObjectVector<CProp>(void)
.text:00008A86                 add     esp, 4
.text:00008A89                 cmp     ebp, esp
.text:00008A8B                 call    __RTC_CheckEsp
.text:00008A90                 mov     esp, ebp
.text:00008A92                 pop     ebp
.text:00008A93                 retn
.text:00008A93 ??1CProps@@QAE@XZ endp
.text:00008A93
.text:00008A93 _text           ends
.text:00008A93
.text:00008A94 ; ===========================================================================
.text:00008A94
.text:00008A94 ; Segment type: Pure code
.text:00008A94 ; Segment permissions: Read/Execute
.text:00008A94 _text           segment para public 'CODE' use32
.text:00008A94                 assume cs:_text
.text:00008A94                 ;org 8A94h
.text:00008A94 ; COMDAT (pick any)
.text:00008A94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008A94
.text:00008A94 ; =============== S U B R O U T I N E =======================================
.text:00008A94
.text:00008A94 ; Attributes: bp-based frame
.text:00008A94
.text:00008A94 ; void __thiscall NArchive::N7z::CFileItem::SetAttrib(NArchive::N7z::CFileItem *this, unsigned int)
.text:00008A94                 public ?SetAttrib@CFileItem@N7z@NArchive@@QAEXI@Z
.text:00008A94 ?SetAttrib@CFileItem@N7z@NArchive@@QAEXI@Z proc near
.text:00008A94                                         ; CODE XREF: NArchive::N7z::FromUpdateItemToFileItem(NArchive::N7z::CUpdateItem const &,NArchive::N7z::CFileItem &,NArchive::N7z::CFileItem2 &)+18p
.text:00008A94
.text:00008A94 var_4           = dword ptr -4
.text:00008A94 arg_0           = dword ptr  8
.text:00008A94
.text:00008A94                 push    ebp
.text:00008A95                 mov     ebp, esp
.text:00008A97                 push    ecx
.text:00008A98                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008A9F                 mov     [ebp+var_4], ecx
.text:00008AA2                 mov     eax, [ebp+var_4]
.text:00008AA5                 mov     byte ptr [eax+13h], 1
.text:00008AA9                 mov     ecx, [ebp+var_4]
.text:00008AAC                 mov     edx, [ebp+arg_0]
.text:00008AAF                 mov     [ecx+8], edx
.text:00008AB2                 mov     esp, ebp
.text:00008AB4                 pop     ebp
.text:00008AB5                 retn    4
.text:00008AB5 ?SetAttrib@CFileItem@N7z@NArchive@@QAEXI@Z endp
.text:00008AB5
.text:00008AB5 _text           ends
.text:00008AB5
.text:00008AB8 ; ===========================================================================
.text:00008AB8
.text:00008AB8 ; Segment type: Pure code
.text:00008AB8 ; Segment permissions: Read/Execute
.text:00008AB8 _text           segment para public 'CODE' use32
.text:00008AB8                 assume cs:_text
.text:00008AB8                 ;org 8AB8h
.text:00008AB8 ; COMDAT (pick any)
.text:00008AB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008AB8
.text:00008AB8 ; =============== S U B R O U T I N E =======================================
.text:00008AB8
.text:00008AB8 ; Attributes: bp-based frame
.text:00008AB8
.text:00008AB8 ; public: void __thiscall NArchive::N7z::CRepackInStreamWithSizes::Init(struct ISequentialInStream *, unsigned int, class CRecordVector<bool> const *)
.text:00008AB8                 public ?Init@CRepackInStreamWithSizes@N7z@NArchive@@QAEXPAUISequentialInStream@@IPBV?$CRecordVector@_N@@@Z
.text:00008AB8 ?Init@CRepackInStreamWithSizes@N7z@NArchive@@QAEXPAUISequentialInStream@@IPBV?$CRecordVector@_N@@@Z proc near
.text:00008AB8                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+21B8p
.text:00008AB8
.text:00008AB8 var_4           = dword ptr -4
.text:00008AB8 arg_0           = dword ptr  8
.text:00008AB8 arg_4           = dword ptr  0Ch
.text:00008AB8 arg_8           = dword ptr  10h
.text:00008AB8
.text:00008AB8                 push    ebp
.text:00008AB9                 mov     ebp, esp
.text:00008ABB                 push    ecx
.text:00008ABC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008AC3                 mov     [ebp+var_4], ecx
.text:00008AC6                 mov     eax, [ebp+var_4]
.text:00008AC9                 mov     ecx, [ebp+arg_4]
.text:00008ACC                 mov     [eax+14h], ecx
.text:00008ACF                 mov     edx, [ebp+var_4]
.text:00008AD2                 mov     eax, [ebp+arg_8]
.text:00008AD5                 mov     [edx+10h], eax
.text:00008AD8                 mov     ecx, [ebp+arg_0]
.text:00008ADB                 push    ecx
.text:00008ADC                 mov     ecx, [ebp+var_4]
.text:00008ADF                 add     ecx, 0Ch
.text:00008AE2                 call    ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)
.text:00008AE7                 add     esp, 4
.text:00008AEA                 cmp     ebp, esp
.text:00008AEC                 call    __RTC_CheckEsp
.text:00008AF1                 mov     esp, ebp
.text:00008AF3                 pop     ebp
.text:00008AF4                 retn    0Ch
.text:00008AF4 ?Init@CRepackInStreamWithSizes@N7z@NArchive@@QAEXPAUISequentialInStream@@IPBV?$CRecordVector@_N@@@Z endp
.text:00008AF4
.text:00008AF4 ; ---------------------------------------------------------------------------
.text:00008AF7                 align 4
.text:00008AF7 _text           ends
.text:00008AF7
.text:00008AF8 ; ===========================================================================
.text:00008AF8
.text:00008AF8 ; Segment type: Pure code
.text:00008AF8 ; Segment permissions: Read/Execute
.text:00008AF8 _text           segment para public 'CODE' use32
.text:00008AF8                 assume cs:_text
.text:00008AF8                 ;org 8AF8h
.text:00008AF8 ; COMDAT (pick any)
.text:00008AF8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008AF8
.text:00008AF8 ; =============== S U B R O U T I N E =======================================
.text:00008AF8
.text:00008AF8 ; Attributes: bp-based frame
.text:00008AF8
.text:00008AF8 ; __int32 __thiscall NArchive::N7z::CRepackStreamBase::CheckFinishedState(NArchive::N7z::CRepackStreamBase *__hidden this)
.text:00008AF8                 public ?CheckFinishedState@CRepackStreamBase@N7z@NArchive@@QBEJXZ
.text:00008AF8 ?CheckFinishedState@CRepackStreamBase@N7z@NArchive@@QBEJXZ proc near
.text:00008AF8                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+2AB0p
.text:00008AF8
.text:00008AF8 var_4           = dword ptr -4
.text:00008AF8
.text:00008AF8                 push    ebp
.text:00008AF9                 mov     ebp, esp
.text:00008AFB                 push    ecx
.text:00008AFC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008B03                 mov     [ebp+var_4], ecx
.text:00008B06                 mov     eax, [ebp+var_4]
.text:00008B09                 mov     ecx, [eax+10h]
.text:00008B0C                 call    ?Size@?$CRecordVector@_N@@QBEIXZ ; CRecordVector<bool>::Size(void)
.text:00008B11                 mov     ecx, [ebp+var_4]
.text:00008B14                 mov     edx, [ecx+18h]
.text:00008B17                 sub     edx, eax
.text:00008B19                 neg     edx
.text:00008B1B                 sbb     edx, edx
.text:00008B1D                 and     edx, 80004005h
.text:00008B23                 mov     eax, edx
.text:00008B25                 add     esp, 4
.text:00008B28                 cmp     ebp, esp
.text:00008B2A                 call    __RTC_CheckEsp
.text:00008B2F                 mov     esp, ebp
.text:00008B31                 pop     ebp
.text:00008B32                 retn
.text:00008B32 ?CheckFinishedState@CRepackStreamBase@N7z@NArchive@@QBEJXZ endp
.text:00008B32
.text:00008B32 ; ---------------------------------------------------------------------------
.text:00008B33                 align 4
.text:00008B33 _text           ends
.text:00008B33
.text:00008B34 ; ===========================================================================
.text:00008B34
.text:00008B34 ; Segment type: Pure code
.text:00008B34 ; Segment permissions: Read/Execute
.text:00008B34 _text           segment para public 'CODE' use32
.text:00008B34                 assume cs:_text
.text:00008B34                 ;org 8B34h
.text:00008B34 ; COMDAT (pick any)
.text:00008B34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008B34
.text:00008B34 ; =============== S U B R O U T I N E =======================================
.text:00008B34
.text:00008B34 ; Attributes: bp-based frame
.text:00008B34
.text:00008B34 ; _DWORD __thiscall NArchive::N7z::CFolderInStream2::CFolderInStream2(NArchive::N7z::CFolderInStream2 *__hidden this)
.text:00008B34                 public ??0CFolderInStream2@N7z@NArchive@@QAE@XZ
.text:00008B34 ??0CFolderInStream2@N7z@NArchive@@QAE@XZ proc near
.text:00008B34                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1CCCp
.text:00008B34
.text:00008B34 var_14          = dword ptr -14h
.text:00008B34 var_10          = dword ptr -10h
.text:00008B34 var_C           = dword ptr -0Ch
.text:00008B34 var_4           = dword ptr -4
.text:00008B34
.text:00008B34                 push    ebp
.text:00008B35                 mov     ebp, esp
.text:00008B37                 push    0FFFFFFFFh
.text:00008B39                 push    offset __ehhandler$??0CFolderInStream2@N7z@NArchive@@QAE@XZ
.text:00008B3E                 mov     eax, large fs:0
.text:00008B44                 push    eax
.text:00008B45                 sub     esp, 8
.text:00008B48                 mov     [ebp+var_14], 0CCCCCCCCh
.text:00008B4F                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00008B56                 mov     eax, dword ptr ds:___security_cookie
.text:00008B5B                 xor     eax, ebp
.text:00008B5D                 push    eax
.text:00008B5E                 lea     eax, [ebp+var_C]
.text:00008B61                 mov     large fs:0, eax
.text:00008B67                 mov     [ebp+var_10], ecx
.text:00008B6A                 mov     ecx, [ebp+var_10]
.text:00008B6D                 add     ecx, 8          ; this
.text:00008B70                 call    ??0CRepackStreamBase@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CRepackStreamBase::CRepackStreamBase(void)
.text:00008B75                 mov     [ebp+var_4], 0
.text:00008B7C                 mov     ecx, [ebp+var_10] ; this
.text:00008B7F                 call    ??0ISequentialInStream@@QAE@XZ ; ISequentialInStream::ISequentialInStream(void)
.text:00008B84                 mov     ecx, [ebp+var_10]
.text:00008B87                 add     ecx, 30h ; '0'  ; this
.text:00008B8A                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00008B8F                 mov     eax, [ebp+var_10]
.text:00008B92                 mov     dword ptr [eax], offset ??_7CFolderInStream2@N7z@NArchive@@6B@ ; const NArchive::N7z::CFolderInStream2::`vftable'
.text:00008B98                 mov     ecx, [ebp+var_10]
.text:00008B9B                 add     ecx, 38h ; '8'
.text:00008B9E                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(void)
.text:00008BA3                 mov     byte ptr [ebp+var_4], 1
.text:00008BA7                 mov     ecx, [ebp+var_10]
.text:00008BAA                 mov     dword ptr [ecx+3Ch], 0
.text:00008BB1                 push    10000h          ; unsigned int
.text:00008BB6                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00008BBB                 add     esp, 4
.text:00008BBE                 mov     [ebp+var_14], eax
.text:00008BC1                 mov     edx, [ebp+var_10]
.text:00008BC4                 mov     eax, [ebp+var_14]
.text:00008BC7                 mov     [edx+34h], eax
.text:00008BCA                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00008BD1                 mov     eax, [ebp+var_10]
.text:00008BD4                 mov     ecx, [ebp+var_C]
.text:00008BD7                 mov     large fs:0, ecx
.text:00008BDE                 pop     ecx
.text:00008BDF                 add     esp, 14h
.text:00008BE2                 cmp     ebp, esp
.text:00008BE4                 call    __RTC_CheckEsp
.text:00008BE9                 mov     esp, ebp
.text:00008BEB                 pop     ebp
.text:00008BEC                 retn
.text:00008BEC ??0CFolderInStream2@N7z@NArchive@@QAE@XZ endp
.text:00008BEC
.text:00008BEC ; ---------------------------------------------------------------------------
.text:00008BED                 align 10h
.text:00008BED _text           ends
.text:00008BED
.text$x:00008BF0 ; ===========================================================================
.text$x:00008BF0
.text$x:00008BF0 ; Segment type: Pure code
.text$x:00008BF0 ; Segment permissions: Read/Execute
.text$x:00008BF0 _text$x         segment para public 'CODE' use32
.text$x:00008BF0                 assume cs:_text$x
.text$x:00008BF0                 ;org 8BF0h
.text$x:00008BF0 ; COMDAT (pick associative to section at 8B34)
.text$x:00008BF0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008BF0
.text$x:00008BF0 ; =============== S U B R O U T I N E =======================================
.text$x:00008BF0
.text$x:00008BF0
.text$x:00008BF0 __unwindfunclet$??0CFolderInStream2@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:00008BF0                                         ; DATA XREF: .xdata$x:00008C3Co
.text$x:00008BF0                 mov     ecx, [ebp-10h]
.text$x:00008BF3                 add     ecx, 8          ; this
.text$x:00008BF6                 jmp     ??1CRepackStreamBase@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CRepackStreamBase::~CRepackStreamBase(void)
.text$x:00008BF6 __unwindfunclet$??0CFolderInStream2@N7z@NArchive@@QAE@XZ$0 endp
.text$x:00008BF6
.text$x:00008BFB
.text$x:00008BFB ; =============== S U B R O U T I N E =======================================
.text$x:00008BFB
.text$x:00008BFB
.text$x:00008BFB __unwindfunclet$??0CFolderInStream2@N7z@NArchive@@QAE@XZ$1 proc near
.text$x:00008BFB                                         ; DATA XREF: .xdata$x:00008C44o
.text$x:00008BFB                 mov     ecx, [ebp-10h]
.text$x:00008BFE                 add     ecx, 38h ; '8'
.text$x:00008C01                 jmp     ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text$x:00008C01 __unwindfunclet$??0CFolderInStream2@N7z@NArchive@@QAE@XZ$1 endp
.text$x:00008C01
.text$x:00008C06
.text$x:00008C06 ; =============== S U B R O U T I N E =======================================
.text$x:00008C06
.text$x:00008C06
.text$x:00008C06 __ehhandler$??0CFolderInStream2@N7z@NArchive@@QAE@XZ proc near
.text$x:00008C06                                         ; DATA XREF: NArchive::N7z::CFolderInStream2::CFolderInStream2(void)+5o
.text$x:00008C06
.text$x:00008C06 arg_4           = dword ptr  8
.text$x:00008C06
.text$x:00008C06                 mov     edx, [esp+arg_4]
.text$x:00008C0A                 lea     eax, [edx+0Ch]
.text$x:00008C0D                 mov     ecx, [edx-0Ch]
.text$x:00008C10                 xor     ecx, eax
.text$x:00008C12                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008C17                 mov     eax, offset __ehfuncinfo$??0CFolderInStream2@N7z@NArchive@@QAE@XZ
.text$x:00008C1C                 jmp     ___CxxFrameHandler3
.text$x:00008C1C __ehhandler$??0CFolderInStream2@N7z@NArchive@@QAE@XZ endp
.text$x:00008C1C
.text$x:00008C1C ; ---------------------------------------------------------------------------
.text$x:00008C21                 align 4
.text$x:00008C21 _text$x         ends
.text$x:00008C21
.rdata:00008C24 ; ===========================================================================
.rdata:00008C24
.rdata:00008C24 ; Segment type: Pure data
.rdata:00008C24 ; Segment permissions: Read
.rdata:00008C24 _rdata          segment dword public 'DATA' use32
.rdata:00008C24                 assume cs:_rdata
.rdata:00008C24                 ;org 8C24h
.rdata:00008C24 ; COMDAT (pick largest)
.rdata:00008C24                 dd offset ??_R4CFolderInStream2@N7z@NArchive@@6B@ ; const NArchive::N7z::CFolderInStream2::`RTTI Complete Object Locator'
.rdata:00008C28                 public ??_7CFolderInStream2@N7z@NArchive@@6B@
.rdata:00008C28 ; const NArchive::N7z::CFolderInStream2::`vftable'
.rdata:00008C28 ??_7CFolderInStream2@N7z@NArchive@@6B@ dd offset ?QueryInterface@CFolderInStream2@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z
.rdata:00008C28                                         ; DATA XREF: NArchive::N7z::CFolderInStream2::CFolderInStream2(void)+5Eo
.rdata:00008C28                                         ; NArchive::N7z::CFolderInStream2::~CFolderInStream2(void)+39o
.rdata:00008C28                                         ; NArchive::N7z::CFolderInStream2::QueryInterface(_GUID const &,void * *)
.rdata:00008C2C                 dd offset ?AddRef@CFolderInStream2@N7z@NArchive@@UAGKXZ ; NArchive::N7z::CFolderInStream2::AddRef(void)
.rdata:00008C30                 dd offset ?Release@CFolderInStream2@N7z@NArchive@@UAGKXZ ; NArchive::N7z::CFolderInStream2::Release(void)
.rdata:00008C34                 dd offset ?Read@CFolderInStream2@N7z@NArchive@@UAGJPAXIPAI@Z ; NArchive::N7z::CFolderInStream2::Read(void *,uint,uint *)
.rdata:00008C34 _rdata          ends
.rdata:00008C34
.xdata$x:00008C38 ; ===========================================================================
.xdata$x:00008C38
.xdata$x:00008C38 ; Segment type: Pure data
.xdata$x:00008C38 ; Segment permissions: Read
.xdata$x:00008C38 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008C38                 assume cs:_xdata$x
.xdata$x:00008C38                 ;org 8C38h
.xdata$x:00008C38 ; COMDAT (pick associative to section at 8B34)
.xdata$x:00008C38 __unwindtable$??0CFolderInStream2@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:00008C38                                         ; DATA XREF: .xdata$x:00008C50o
.xdata$x:00008C39                 db 0FFh
.xdata$x:00008C3A                 db 0FFh
.xdata$x:00008C3B                 db 0FFh
.xdata$x:00008C3C                 dd offset __unwindfunclet$??0CFolderInStream2@N7z@NArchive@@QAE@XZ$0
.xdata$x:00008C40                 db    0
.xdata$x:00008C41                 db    0
.xdata$x:00008C42                 db    0
.xdata$x:00008C43                 db    0
.xdata$x:00008C44                 dd offset __unwindfunclet$??0CFolderInStream2@N7z@NArchive@@QAE@XZ$1
.xdata$x:00008C48 __ehfuncinfo$??0CFolderInStream2@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00008C48                                         ; DATA XREF: __ehhandler$??0CFolderInStream2@N7z@NArchive@@QAE@XZ+11o
.xdata$x:00008C49                 db    5
.xdata$x:00008C4A                 db  93h ; ô
.xdata$x:00008C4B                 db  19h
.xdata$x:00008C4C                 db    2
.xdata$x:00008C4D                 db    0
.xdata$x:00008C4E                 db    0
.xdata$x:00008C4F                 db    0
.xdata$x:00008C50                 dd offset __unwindtable$??0CFolderInStream2@N7z@NArchive@@QAE@XZ
.xdata$x:00008C54                 db    0
.xdata$x:00008C55                 db    0
.xdata$x:00008C56                 db    0
.xdata$x:00008C57                 db    0
.xdata$x:00008C58                 db    0
.xdata$x:00008C59                 db    0
.xdata$x:00008C5A                 db    0
.xdata$x:00008C5B                 db    0
.xdata$x:00008C5C                 db    0
.xdata$x:00008C5D                 db    0
.xdata$x:00008C5E                 db    0
.xdata$x:00008C5F                 db    0
.xdata$x:00008C60                 db    0
.xdata$x:00008C61                 db    0
.xdata$x:00008C62                 db    0
.xdata$x:00008C63                 db    0
.xdata$x:00008C64                 db    0
.xdata$x:00008C65                 db    0
.xdata$x:00008C66                 db    0
.xdata$x:00008C67                 db    0
.xdata$x:00008C68                 db    1
.xdata$x:00008C69                 db    0
.xdata$x:00008C6A                 db    0
.xdata$x:00008C6B                 db    0
.xdata$x:00008C6B _xdata$x        ends
.xdata$x:00008C6B
.rdata$r:00008C6C ; ===========================================================================
.rdata$r:00008C6C
.rdata$r:00008C6C ; Segment type: Pure data
.rdata$r:00008C6C ; Segment permissions: Read
.rdata$r:00008C6C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008C6C                 assume cs:_rdata$r
.rdata$r:00008C6C                 ;org 8C6Ch
.rdata$r:00008C6C ; COMDAT (pick any)
.rdata$r:00008C6C                 public ??_R4CFolderInStream2@N7z@NArchive@@6B@
.rdata$r:00008C6C ; const NArchive::N7z::CFolderInStream2::`RTTI Complete Object Locator'
.rdata$r:00008C6C ??_R4CFolderInStream2@N7z@NArchive@@6B@ db    0
.rdata$r:00008C6C                                         ; DATA XREF: .rdata:00008C24o
.rdata$r:00008C6D                 db    0
.rdata$r:00008C6E                 db    0
.rdata$r:00008C6F                 db    0
.rdata$r:00008C70                 db    0
.rdata$r:00008C71                 db    0
.rdata$r:00008C72                 db    0
.rdata$r:00008C73                 db    0
.rdata$r:00008C74                 db    0
.rdata$r:00008C75                 db    0
.rdata$r:00008C76                 db    0
.rdata$r:00008C77                 db    0
.rdata$r:00008C78                 dd offset ??_R0?AVCFolderInStream2@N7z@NArchive@@@8 ; NArchive::N7z::CFolderInStream2 `RTTI Type Descriptor'
.rdata$r:00008C7C                 dd offset ??_R3CFolderInStream2@N7z@NArchive@@8 ; NArchive::N7z::CFolderInStream2::`RTTI Class Hierarchy Descriptor'
.rdata$r:00008C7C _rdata$r        ends
.rdata$r:00008C7C
.data:00008C80 ; ===========================================================================
.data:00008C80
.data:00008C80 ; Segment type: Pure data
.data:00008C80 ; Segment permissions: Read/Write
.data:00008C80 _data           segment dword public 'DATA' use32
.data:00008C80                 assume cs:_data
.data:00008C80                 ;org 8C80h
.data:00008C80 ; COMDAT (pick any)
.data:00008C80                 public ??_R0?AVCFolderInStream2@N7z@NArchive@@@8
.data:00008C80 ; class NArchive::N7z::CFolderInStream2 `RTTI Type Descriptor'
.data:00008C80 ??_R0?AVCFolderInStream2@N7z@NArchive@@@8 dd offset ??_7type_info@@6B@
.data:00008C80                                         ; DATA XREF: .rdata$r:00008C78o
.data:00008C80                                         ; .rdata$r:NArchive::N7z::CFolderInStream2::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00008C80                                         ; const type_info::`vftable'
.data:00008C84                 align 8
.data:00008C88 a_?avcfolderins db '.?AVCFolderInStream2@N7z@NArchive@@',0
.data:00008C88 _data           ends
.data:00008C88
.rdata$r:00008CAC ; ===========================================================================
.rdata$r:00008CAC
.rdata$r:00008CAC ; Segment type: Pure data
.rdata$r:00008CAC ; Segment permissions: Read
.rdata$r:00008CAC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008CAC                 assume cs:_rdata$r
.rdata$r:00008CAC                 ;org 8CACh
.rdata$r:00008CAC ; COMDAT (pick any)
.rdata$r:00008CAC                 public ??_R3CFolderInStream2@N7z@NArchive@@8
.rdata$r:00008CAC ; NArchive::N7z::CFolderInStream2::`RTTI Class Hierarchy Descriptor'
.rdata$r:00008CAC ??_R3CFolderInStream2@N7z@NArchive@@8 db    0
.rdata$r:00008CAC                                         ; DATA XREF: .rdata$r:00008C7Co
.rdata$r:00008CAC                                         ; .rdata$r:00008CECo
.rdata$r:00008CAD                 db    0
.rdata$r:00008CAE                 db    0
.rdata$r:00008CAF                 db    0
.rdata$r:00008CB0                 db    1
.rdata$r:00008CB1                 db    0
.rdata$r:00008CB2                 db    0
.rdata$r:00008CB3                 db    0
.rdata$r:00008CB4                 db    5
.rdata$r:00008CB5                 db    0
.rdata$r:00008CB6                 db    0
.rdata$r:00008CB7                 db    0
.rdata$r:00008CB8                 dd offset ??_R2CFolderInStream2@N7z@NArchive@@8 ; NArchive::N7z::CFolderInStream2::`RTTI Base Class Array'
.rdata$r:00008CB8 _rdata$r        ends
.rdata$r:00008CB8
.rdata$r:00008CBC ; ===========================================================================
.rdata$r:00008CBC
.rdata$r:00008CBC ; Segment type: Pure data
.rdata$r:00008CBC ; Segment permissions: Read
.rdata$r:00008CBC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008CBC                 assume cs:_rdata$r
.rdata$r:00008CBC                 ;org 8CBCh
.rdata$r:00008CBC ; COMDAT (pick any)
.rdata$r:00008CBC                 public ??_R2CFolderInStream2@N7z@NArchive@@8
.rdata$r:00008CBC ; NArchive::N7z::CFolderInStream2::`RTTI Base Class Array'
.rdata$r:00008CBC ??_R2CFolderInStream2@N7z@NArchive@@8 dd offset ??_R1A@?0A@EA@CFolderInStream2@N7z@NArchive@@8
.rdata$r:00008CBC                                         ; DATA XREF: .rdata$r:00008CB8o
.rdata$r:00008CBC                                         ; NArchive::N7z::CFolderInStream2::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00008CC0                 dd offset ??_R17?0A@EA@CRepackStreamBase@N7z@NArchive@@8 ; NArchive::N7z::CRepackStreamBase::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:00008CC4                 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00008CC8                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00008CCC                 dd offset ??_R1DA@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (48,-1,0,64)'
.rdata$r:00008CD0                 db    0
.rdata$r:00008CD1                 align 4
.rdata$r:00008CD1 _rdata$r        ends
.rdata$r:00008CD1
.rdata$r:00008CD4 ; ===========================================================================
.rdata$r:00008CD4
.rdata$r:00008CD4 ; Segment type: Pure data
.rdata$r:00008CD4 ; Segment permissions: Read
.rdata$r:00008CD4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008CD4                 assume cs:_rdata$r
.rdata$r:00008CD4                 ;org 8CD4h
.rdata$r:00008CD4 ; COMDAT (pick any)
.rdata$r:00008CD4                 public ??_R1A@?0A@EA@CFolderInStream2@N7z@NArchive@@8
.rdata$r:00008CD4 ; NArchive::N7z::CFolderInStream2::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00008CD4 ??_R1A@?0A@EA@CFolderInStream2@N7z@NArchive@@8 dd offset ??_R0?AVCFolderInStream2@N7z@NArchive@@@8
.rdata$r:00008CD4                                         ; DATA XREF: .rdata$r:NArchive::N7z::CFolderInStream2::`RTTI Base Class Array'o
.rdata$r:00008CD4                                         ; NArchive::N7z::CFolderInStream2 `RTTI Type Descriptor'
.rdata$r:00008CD8                 db    4
.rdata$r:00008CD9                 db    0
.rdata$r:00008CDA                 db    0
.rdata$r:00008CDB                 db    0
.rdata$r:00008CDC                 db    0
.rdata$r:00008CDD                 db    0
.rdata$r:00008CDE                 db    0
.rdata$r:00008CDF                 db    0
.rdata$r:00008CE0                 db 0FFh
.rdata$r:00008CE1                 db 0FFh
.rdata$r:00008CE2                 db 0FFh
.rdata$r:00008CE3                 db 0FFh
.rdata$r:00008CE4                 db    0
.rdata$r:00008CE5                 db    0
.rdata$r:00008CE6                 db    0
.rdata$r:00008CE7                 db    0
.rdata$r:00008CE8                 db  40h ; @
.rdata$r:00008CE9                 db    0
.rdata$r:00008CEA                 db    0
.rdata$r:00008CEB                 db    0
.rdata$r:00008CEC                 dd offset ??_R3CFolderInStream2@N7z@NArchive@@8 ; NArchive::N7z::CFolderInStream2::`RTTI Class Hierarchy Descriptor'
.rdata$r:00008CEC _rdata$r        ends
.rdata$r:00008CEC
.rdata$r:00008CF0 ; ===========================================================================
.rdata$r:00008CF0
.rdata$r:00008CF0 ; Segment type: Pure data
.rdata$r:00008CF0 ; Segment permissions: Read
.rdata$r:00008CF0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008CF0                 assume cs:_rdata$r
.rdata$r:00008CF0                 ;org 8CF0h
.rdata$r:00008CF0 ; COMDAT (pick any)
.rdata$r:00008CF0                 public ??_R17?0A@EA@CRepackStreamBase@N7z@NArchive@@8
.rdata$r:00008CF0 ; NArchive::N7z::CRepackStreamBase::`RTTI Base Class Descriptor at (8, -1, 0, 64)'
.rdata$r:00008CF0 ??_R17?0A@EA@CRepackStreamBase@N7z@NArchive@@8 dd offset ??_R0?AVCRepackStreamBase@N7z@NArchive@@@8
.rdata$r:00008CF0                                         ; DATA XREF: .rdata$r:00008CC0o
.rdata$r:00008CF0                                         ; .rdata$r:00009A9Co
.rdata$r:00008CF0                                         ; NArchive::N7z::CRepackStreamBase `RTTI Type Descriptor'
.rdata$r:00008CF4                 align 8
.rdata$r:00008CF8                 db    8
.rdata$r:00008CF9                 db    0
.rdata$r:00008CFA                 db    0
.rdata$r:00008CFB                 db    0
.rdata$r:00008CFC                 db 0FFh
.rdata$r:00008CFD                 db 0FFh
.rdata$r:00008CFE                 db 0FFh
.rdata$r:00008CFF                 db 0FFh
.rdata$r:00008D00                 db    0
.rdata$r:00008D01                 db    0
.rdata$r:00008D02                 db    0
.rdata$r:00008D03                 db    0
.rdata$r:00008D04                 db  40h ; @
.rdata$r:00008D05                 db    0
.rdata$r:00008D06                 db    0
.rdata$r:00008D07                 db    0
.rdata$r:00008D08                 dd offset ??_R3CRepackStreamBase@N7z@NArchive@@8 ; NArchive::N7z::CRepackStreamBase::`RTTI Class Hierarchy Descriptor'
.rdata$r:00008D08 _rdata$r        ends
.rdata$r:00008D08
.data:00008D0C ; ===========================================================================
.data:00008D0C
.data:00008D0C ; Segment type: Pure data
.data:00008D0C ; Segment permissions: Read/Write
.data:00008D0C _data           segment dword public 'DATA' use32
.data:00008D0C                 assume cs:_data
.data:00008D0C                 ;org 8D0Ch
.data:00008D0C ; COMDAT (pick any)
.data:00008D0C                 public ??_R0?AVCRepackStreamBase@N7z@NArchive@@@8
.data:00008D0C ; class NArchive::N7z::CRepackStreamBase `RTTI Type Descriptor'
.data:00008D0C ??_R0?AVCRepackStreamBase@N7z@NArchive@@@8 dd offset ??_7type_info@@6B@
.data:00008D0C                                         ; DATA XREF: .rdata$r:NArchive::N7z::CRepackStreamBase::`RTTI Base Class Descriptor at (8,-1,0,64)'o
.data:00008D0C                                         ; .rdata$r:NArchive::N7z::CRepackStreamBase::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00008D0C                                         ; const type_info::`vftable'
.data:00008D10                 db    0
.data:00008D11                 db    0
.data:00008D12                 db    0
.data:00008D13                 db    0
.data:00008D14                 db  2Eh ; .
.data:00008D15                 db  3Fh ; ?
.data:00008D16                 db  41h ; A
.data:00008D17                 db  56h ; V
.data:00008D18                 db  43h ; C
.data:00008D19                 db  52h ; R
.data:00008D1A                 db  65h ; e
.data:00008D1B                 db  70h ; p
.data:00008D1C                 db  61h ; a
.data:00008D1D                 db  63h ; c
.data:00008D1E                 db  6Bh ; k
.data:00008D1F                 db  53h ; S
.data:00008D20                 db  74h ; t
.data:00008D21                 db  72h ; r
.data:00008D22                 db  65h ; e
.data:00008D23                 db  61h ; a
.data:00008D24                 db  6Dh ; m
.data:00008D25                 db  42h ; B
.data:00008D26                 db  61h ; a
.data:00008D27                 db  73h ; s
.data:00008D28                 db  65h ; e
.data:00008D29                 db  40h ; @
.data:00008D2A                 db  4Eh ; N
.data:00008D2B                 db  37h ; 7
.data:00008D2C                 db  7Ah ; z
.data:00008D2D                 db  40h ; @
.data:00008D2E                 db  4Eh ; N
.data:00008D2F                 db  41h ; A
.data:00008D30                 db  72h ; r
.data:00008D31                 db  63h ; c
.data:00008D32                 db  68h ; h
.data:00008D33                 db  69h ; i
.data:00008D34                 db  76h ; v
.data:00008D35                 db  65h ; e
.data:00008D36                 db  40h ; @
.data:00008D37                 db  40h ; @
.data:00008D38                 db    0
.data:00008D39                 align 4
.data:00008D39 _data           ends
.data:00008D39
.rdata$r:00008D3C ; ===========================================================================
.rdata$r:00008D3C
.rdata$r:00008D3C ; Segment type: Pure data
.rdata$r:00008D3C ; Segment permissions: Read
.rdata$r:00008D3C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008D3C                 assume cs:_rdata$r
.rdata$r:00008D3C                 ;org 8D3Ch
.rdata$r:00008D3C ; COMDAT (pick any)
.rdata$r:00008D3C                 public ??_R3CRepackStreamBase@N7z@NArchive@@8
.rdata$r:00008D3C ; NArchive::N7z::CRepackStreamBase::`RTTI Class Hierarchy Descriptor'
.rdata$r:00008D3C ??_R3CRepackStreamBase@N7z@NArchive@@8 db    0
.rdata$r:00008D3C                                         ; DATA XREF: .rdata$r:00008D08o
.rdata$r:00008D3C                                         ; .rdata$r:00008D6Co
.rdata$r:00008D3D                 db    0
.rdata$r:00008D3E                 db    0
.rdata$r:00008D3F                 db    0
.rdata$r:00008D40                 db    0
.rdata$r:00008D41                 db    0
.rdata$r:00008D42                 db    0
.rdata$r:00008D43                 db    0
.rdata$r:00008D44                 db    1
.rdata$r:00008D45                 db    0
.rdata$r:00008D46                 db    0
.rdata$r:00008D47                 db    0
.rdata$r:00008D48                 dd offset ??_R2CRepackStreamBase@N7z@NArchive@@8 ; NArchive::N7z::CRepackStreamBase::`RTTI Base Class Array'
.rdata$r:00008D48 _rdata$r        ends
.rdata$r:00008D48
.rdata$r:00008D4C ; ===========================================================================
.rdata$r:00008D4C
.rdata$r:00008D4C ; Segment type: Pure data
.rdata$r:00008D4C ; Segment permissions: Read
.rdata$r:00008D4C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008D4C                 assume cs:_rdata$r
.rdata$r:00008D4C                 ;org 8D4Ch
.rdata$r:00008D4C ; COMDAT (pick any)
.rdata$r:00008D4C                 public ??_R2CRepackStreamBase@N7z@NArchive@@8
.rdata$r:00008D4C ; NArchive::N7z::CRepackStreamBase::`RTTI Base Class Array'
.rdata$r:00008D4C ??_R2CRepackStreamBase@N7z@NArchive@@8 dd offset ??_R1A@?0A@EA@CRepackStreamBase@N7z@NArchive@@8
.rdata$r:00008D4C                                         ; DATA XREF: .rdata$r:00008D48o
.rdata$r:00008D4C                                         ; NArchive::N7z::CRepackStreamBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00008D50                 db    0
.rdata$r:00008D51                 align 4
.rdata$r:00008D51 _rdata$r        ends
.rdata$r:00008D51
.rdata$r:00008D54 ; ===========================================================================
.rdata$r:00008D54
.rdata$r:00008D54 ; Segment type: Pure data
.rdata$r:00008D54 ; Segment permissions: Read
.rdata$r:00008D54 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008D54                 assume cs:_rdata$r
.rdata$r:00008D54                 ;org 8D54h
.rdata$r:00008D54 ; COMDAT (pick any)
.rdata$r:00008D54                 public ??_R1A@?0A@EA@CRepackStreamBase@N7z@NArchive@@8
.rdata$r:00008D54 ; NArchive::N7z::CRepackStreamBase::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00008D54 ??_R1A@?0A@EA@CRepackStreamBase@N7z@NArchive@@8 dd offset ??_R0?AVCRepackStreamBase@N7z@NArchive@@@8
.rdata$r:00008D54                                         ; DATA XREF: .rdata$r:NArchive::N7z::CRepackStreamBase::`RTTI Base Class Array'o
.rdata$r:00008D54                                         ; NArchive::N7z::CRepackStreamBase `RTTI Type Descriptor'
.rdata$r:00008D58                 align 10h
.rdata$r:00008D60                 db 0FFh
.rdata$r:00008D61                 db 0FFh
.rdata$r:00008D62                 db 0FFh
.rdata$r:00008D63                 db 0FFh
.rdata$r:00008D64                 db    0
.rdata$r:00008D65                 db    0
.rdata$r:00008D66                 db    0
.rdata$r:00008D67                 db    0
.rdata$r:00008D68                 db  40h ; @
.rdata$r:00008D69                 db    0
.rdata$r:00008D6A                 db    0
.rdata$r:00008D6B                 db    0
.rdata$r:00008D6C                 dd offset ??_R3CRepackStreamBase@N7z@NArchive@@8 ; NArchive::N7z::CRepackStreamBase::`RTTI Class Hierarchy Descriptor'
.rdata$r:00008D6C _rdata$r        ends
.rdata$r:00008D6C
.rdata$r:00008D70 ; ===========================================================================
.rdata$r:00008D70
.rdata$r:00008D70 ; Segment type: Pure data
.rdata$r:00008D70 ; Segment permissions: Read
.rdata$r:00008D70 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008D70                 assume cs:_rdata$r
.rdata$r:00008D70                 ;org 8D70h
.rdata$r:00008D70 ; COMDAT (pick any)
.rdata$r:00008D70                 public ??_R1DA@?0A@EA@CMyUnknownImp@@8
.rdata$r:00008D70 ; CMyUnknownImp::`RTTI Base Class Descriptor at (48, -1, 0, 64)'
.rdata$r:00008D70 ??_R1DA@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00008D70                                         ; DATA XREF: .rdata$r:00008CCCo
.rdata$r:00008D70                                         ; .rdata$r:00009AA8o
.rdata$r:00008D70                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00008D74                 align 8
.rdata$r:00008D78                 dd offset $SG75624+30h  ; "pm sit tgz tbz tbz2 tgz cab ha lha lzh "...
.rdata$r:00008D7C                 db 0FFh
.rdata$r:00008D7D                 db 0FFh
.rdata$r:00008D7E                 db 0FFh
.rdata$r:00008D7F                 db 0FFh
.rdata$r:00008D80                 db    0
.rdata$r:00008D81                 db    0
.rdata$r:00008D82                 db    0
.rdata$r:00008D83                 db    0
.rdata$r:00008D84                 db  40h ; @
.rdata$r:00008D85                 db    0
.rdata$r:00008D86                 db    0
.rdata$r:00008D87                 db    0
.rdata$r:00008D88                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00008D88 _rdata$r        ends
.rdata$r:00008D88
.text:00008D8C ; ===========================================================================
.text:00008D8C
.text:00008D8C ; Segment type: Pure code
.text:00008D8C ; Segment permissions: Read/Execute
.text:00008D8C _text           segment para public 'CODE' use32
.text:00008D8C                 assume cs:_text
.text:00008D8C                 ;org 8D8Ch
.text:00008D8C ; COMDAT (pick any)
.text:00008D8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008D8C
.text:00008D8C ; =============== S U B R O U T I N E =======================================
.text:00008D8C
.text:00008D8C ; Attributes: bp-based frame
.text:00008D8C
.text:00008D8C ; _DWORD __thiscall NArchive::N7z::CRepackStreamBase::~CRepackStreamBase(NArchive::N7z::CRepackStreamBase *__hidden this)
.text:00008D8C                 public ??1CRepackStreamBase@N7z@NArchive@@QAE@XZ
.text:00008D8C ??1CRepackStreamBase@N7z@NArchive@@QAE@XZ proc near
.text:00008D8C                                         ; CODE XREF: __unwindfunclet$??0CFolderInStream2@N7z@NArchive@@QAE@XZ$0+6j
.text:00008D8C                                         ; NArchive::N7z::CFolderInStream2::~CFolderInStream2(void)+73p ...
.text:00008D8C
.text:00008D8C var_10          = dword ptr -10h
.text:00008D8C var_C           = dword ptr -0Ch
.text:00008D8C var_4           = dword ptr -4
.text:00008D8C
.text:00008D8C                 push    ebp
.text:00008D8D                 mov     ebp, esp
.text:00008D8F                 push    0FFFFFFFFh
.text:00008D91                 push    offset __ehhandler$??1CRepackStreamBase@N7z@NArchive@@QAE@XZ
.text:00008D96                 mov     eax, large fs:0
.text:00008D9C                 push    eax
.text:00008D9D                 push    ecx
.text:00008D9E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00008DA5                 mov     eax, dword ptr ds:___security_cookie
.text:00008DAA                 xor     eax, ebp
.text:00008DAC                 push    eax
.text:00008DAD                 lea     eax, [ebp+var_C]
.text:00008DB0                 mov     large fs:0, eax
.text:00008DB6                 mov     [ebp+var_10], ecx
.text:00008DB9                 mov     [ebp+var_4], 0
.text:00008DC0                 mov     ecx, [ebp+var_10]
.text:00008DC3                 add     ecx, 24h ; '$'
.text:00008DC6                 call    ??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>(void)
.text:00008DCB                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00008DD2                 mov     ecx, [ebp+var_10]
.text:00008DD5                 add     ecx, 20h ; ' '
.text:00008DD8                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:00008DDD                 mov     ecx, [ebp+var_C]
.text:00008DE0                 mov     large fs:0, ecx
.text:00008DE7                 pop     ecx
.text:00008DE8                 add     esp, 10h
.text:00008DEB                 cmp     ebp, esp
.text:00008DED                 call    __RTC_CheckEsp
.text:00008DF2                 mov     esp, ebp
.text:00008DF4                 pop     ebp
.text:00008DF5                 retn
.text:00008DF5 ??1CRepackStreamBase@N7z@NArchive@@QAE@XZ endp
.text:00008DF5
.text:00008DF5 ; ---------------------------------------------------------------------------
.text:00008DF6                 align 4
.text:00008DF6 _text           ends
.text:00008DF6
.text$x:00008DF8 ; ===========================================================================
.text$x:00008DF8
.text$x:00008DF8 ; Segment type: Pure code
.text$x:00008DF8 ; Segment permissions: Read/Execute
.text$x:00008DF8 _text$x         segment para public 'CODE' use32
.text$x:00008DF8                 assume cs:_text$x
.text$x:00008DF8                 ;org 8DF8h
.text$x:00008DF8 ; COMDAT (pick associative to section at 8D8C)
.text$x:00008DF8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008DF8
.text$x:00008DF8 ; =============== S U B R O U T I N E =======================================
.text$x:00008DF8
.text$x:00008DF8
.text$x:00008DF8 __unwindfunclet$??1CRepackStreamBase@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:00008DF8                                         ; DATA XREF: .xdata$x:00008E24o
.text$x:00008DF8                 mov     ecx, [ebp-10h]
.text$x:00008DFB                 add     ecx, 20h ; ' '
.text$x:00008DFE                 jmp     ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text$x:00008DFE __unwindfunclet$??1CRepackStreamBase@N7z@NArchive@@QAE@XZ$0 endp
.text$x:00008DFE
.text$x:00008E03
.text$x:00008E03 ; =============== S U B R O U T I N E =======================================
.text$x:00008E03
.text$x:00008E03
.text$x:00008E03 __ehhandler$??1CRepackStreamBase@N7z@NArchive@@QAE@XZ proc near
.text$x:00008E03                                         ; DATA XREF: NArchive::N7z::CRepackStreamBase::~CRepackStreamBase(void)+5o
.text$x:00008E03
.text$x:00008E03 arg_4           = dword ptr  8
.text$x:00008E03
.text$x:00008E03                 mov     edx, [esp+arg_4]
.text$x:00008E07                 lea     eax, [edx+0Ch]
.text$x:00008E0A                 mov     ecx, [edx-8]
.text$x:00008E0D                 xor     ecx, eax
.text$x:00008E0F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008E14                 mov     eax, offset __ehfuncinfo$??1CRepackStreamBase@N7z@NArchive@@QAE@XZ
.text$x:00008E19                 jmp     ___CxxFrameHandler3
.text$x:00008E19 __ehhandler$??1CRepackStreamBase@N7z@NArchive@@QAE@XZ endp
.text$x:00008E19
.text$x:00008E19 ; ---------------------------------------------------------------------------
.text$x:00008E1E                 align 10h
.text$x:00008E1E _text$x         ends
.text$x:00008E1E
.xdata$x:00008E20 ; ===========================================================================
.xdata$x:00008E20
.xdata$x:00008E20 ; Segment type: Pure data
.xdata$x:00008E20 ; Segment permissions: Read
.xdata$x:00008E20 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008E20                 assume cs:_xdata$x
.xdata$x:00008E20                 ;org 8E20h
.xdata$x:00008E20 ; COMDAT (pick associative to section at 8D8C)
.xdata$x:00008E20 __unwindtable$??1CRepackStreamBase@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:00008E20                                         ; DATA XREF: .xdata$x:00008E30o
.xdata$x:00008E21                 db 0FFh
.xdata$x:00008E22                 db 0FFh
.xdata$x:00008E23                 db 0FFh
.xdata$x:00008E24                 dd offset __unwindfunclet$??1CRepackStreamBase@N7z@NArchive@@QAE@XZ$0
.xdata$x:00008E28 __ehfuncinfo$??1CRepackStreamBase@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00008E28                                         ; DATA XREF: __ehhandler$??1CRepackStreamBase@N7z@NArchive@@QAE@XZ+11o
.xdata$x:00008E29                 db    5
.xdata$x:00008E2A                 db  93h ; ô
.xdata$x:00008E2B                 db  19h
.xdata$x:00008E2C                 db    1
.xdata$x:00008E2D                 db    0
.xdata$x:00008E2E                 db    0
.xdata$x:00008E2F                 db    0
.xdata$x:00008E30                 dd offset __unwindtable$??1CRepackStreamBase@N7z@NArchive@@QAE@XZ
.xdata$x:00008E34                 db    0
.xdata$x:00008E35                 db    0
.xdata$x:00008E36                 db    0
.xdata$x:00008E37                 db    0
.xdata$x:00008E38                 db    0
.xdata$x:00008E39                 db    0
.xdata$x:00008E3A                 db    0
.xdata$x:00008E3B                 db    0
.xdata$x:00008E3C                 db    0
.xdata$x:00008E3D                 db    0
.xdata$x:00008E3E                 db    0
.xdata$x:00008E3F                 db    0
.xdata$x:00008E40                 db    0
.xdata$x:00008E41                 db    0
.xdata$x:00008E42                 db    0
.xdata$x:00008E43                 db    0
.xdata$x:00008E44                 db    0
.xdata$x:00008E45                 db    0
.xdata$x:00008E46                 db    0
.xdata$x:00008E47                 db    0
.xdata$x:00008E48                 db    1
.xdata$x:00008E49                 db    0
.xdata$x:00008E4A                 db    0
.xdata$x:00008E4B                 db    0
.xdata$x:00008E4B _xdata$x        ends
.xdata$x:00008E4B
.text:00008E4C ; ===========================================================================
.text:00008E4C
.text:00008E4C ; Segment type: Pure code
.text:00008E4C ; Segment permissions: Read/Execute
.text:00008E4C _text           segment para public 'CODE' use32
.text:00008E4C                 assume cs:_text
.text:00008E4C                 ;org 8E4Ch
.text:00008E4C ; COMDAT (pick any)
.text:00008E4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008E4C
.text:00008E4C ; =============== S U B R O U T I N E =======================================
.text:00008E4C
.text:00008E4C ; Attributes: bp-based frame
.text:00008E4C
.text:00008E4C ; __int32 __stdcall NArchive::N7z::CFolderInStream2::QueryInterface(NArchive::N7z::CFolderInStream2 *this, const struct _GUID *Buf1, void **)
.text:00008E4C                 public ?QueryInterface@CFolderInStream2@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z
.text:00008E4C ?QueryInterface@CFolderInStream2@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00008E4C                                         ; DATA XREF: .rdata:const NArchive::N7z::CFolderInStream2::`vftable'o
.text:00008E4C
.text:00008E4C this            = dword ptr  8
.text:00008E4C Buf1            = dword ptr  0Ch
.text:00008E4C arg_8           = dword ptr  10h
.text:00008E4C
.text:00008E4C                 push    ebp
.text:00008E4D                 mov     ebp, esp
.text:00008E4F                 mov     eax, [ebp+arg_8]
.text:00008E52                 mov     dword ptr [eax], 0
.text:00008E58                 push    offset _IID_IUnknown ; Buf2
.text:00008E5D                 mov     ecx, [ebp+Buf1]
.text:00008E60                 push    ecx             ; Buf1
.text:00008E61                 call    ___@8           ; __(x,x)
.text:00008E66                 test    eax, eax
.text:00008E68                 jz      short loc_8E74
.text:00008E6A                 mov     edx, [ebp+arg_8]
.text:00008E6D                 mov     eax, [ebp+this]
.text:00008E70                 mov     [edx], eax
.text:00008E72                 jmp     short loc_8E7B
.text:00008E74 ; ---------------------------------------------------------------------------
.text:00008E74
.text:00008E74 loc_8E74:                               ; CODE XREF: NArchive::N7z::CFolderInStream2::QueryInterface(_GUID const &,void * *)+1Cj
.text:00008E74                 mov     eax, 80004002h
.text:00008E79                 jmp     short loc_8E8C
.text:00008E7B ; ---------------------------------------------------------------------------
.text:00008E7B
.text:00008E7B loc_8E7B:                               ; CODE XREF: NArchive::N7z::CFolderInStream2::QueryInterface(_GUID const &,void * *)+26j
.text:00008E7B                 mov     ecx, [ebp+this]
.text:00008E7E                 mov     edx, [ecx+30h]
.text:00008E81                 add     edx, 1
.text:00008E84                 mov     eax, [ebp+this]
.text:00008E87                 mov     [eax+30h], edx
.text:00008E8A                 xor     eax, eax
.text:00008E8C
.text:00008E8C loc_8E8C:                               ; CODE XREF: NArchive::N7z::CFolderInStream2::QueryInterface(_GUID const &,void * *)+2Dj
.text:00008E8C                 cmp     ebp, esp
.text:00008E8E                 call    __RTC_CheckEsp
.text:00008E93                 pop     ebp
.text:00008E94                 retn    0Ch
.text:00008E94 ?QueryInterface@CFolderInStream2@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z endp
.text:00008E94
.text:00008E94 ; ---------------------------------------------------------------------------
.text:00008E97                 align 4
.text:00008E97 _text           ends
.text:00008E97
.text:00008E98 ; ===========================================================================
.text:00008E98
.text:00008E98 ; Segment type: Pure code
.text:00008E98 ; Segment permissions: Read/Execute
.text:00008E98 _text           segment para public 'CODE' use32
.text:00008E98                 assume cs:_text
.text:00008E98                 ;org 8E98h
.text:00008E98 ; COMDAT (pick any)
.text:00008E98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008E98
.text:00008E98 ; =============== S U B R O U T I N E =======================================
.text:00008E98
.text:00008E98 ; Attributes: bp-based frame
.text:00008E98
.text:00008E98 ; unsigned __int32 __stdcall NArchive::N7z::CFolderInStream2::AddRef(NArchive::N7z::CFolderInStream2 *this)
.text:00008E98                 public ?AddRef@CFolderInStream2@N7z@NArchive@@UAGKXZ
.text:00008E98 ?AddRef@CFolderInStream2@N7z@NArchive@@UAGKXZ proc near
.text:00008E98                                         ; DATA XREF: .rdata:00008C2Co
.text:00008E98
.text:00008E98 var_4           = dword ptr -4
.text:00008E98 this            = dword ptr  8
.text:00008E98
.text:00008E98                 push    ebp
.text:00008E99                 mov     ebp, esp
.text:00008E9B                 push    ecx
.text:00008E9C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008EA3                 mov     eax, [ebp+this]
.text:00008EA6                 mov     ecx, [eax+30h]
.text:00008EA9                 add     ecx, 1
.text:00008EAC                 mov     [ebp+var_4], ecx
.text:00008EAF                 mov     edx, [ebp+this]
.text:00008EB2                 mov     eax, [ebp+var_4]
.text:00008EB5                 mov     [edx+30h], eax
.text:00008EB8                 mov     eax, [ebp+var_4]
.text:00008EBB                 mov     esp, ebp
.text:00008EBD                 pop     ebp
.text:00008EBE                 retn    4
.text:00008EBE ?AddRef@CFolderInStream2@N7z@NArchive@@UAGKXZ endp
.text:00008EBE
.text:00008EBE ; ---------------------------------------------------------------------------
.text:00008EC1                 align 4
.text:00008EC1 _text           ends
.text:00008EC1
.text:00008EC4 ; ===========================================================================
.text:00008EC4
.text:00008EC4 ; Segment type: Pure code
.text:00008EC4 ; Segment permissions: Read/Execute
.text:00008EC4 _text           segment para public 'CODE' use32
.text:00008EC4                 assume cs:_text
.text:00008EC4                 ;org 8EC4h
.text:00008EC4 ; COMDAT (pick any)
.text:00008EC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008EC4
.text:00008EC4 ; =============== S U B R O U T I N E =======================================
.text:00008EC4
.text:00008EC4 ; Attributes: bp-based frame
.text:00008EC4
.text:00008EC4 ; unsigned __int32 __stdcall NArchive::N7z::CFolderInStream2::Release(NArchive::N7z::CFolderInStream2 *this)
.text:00008EC4                 public ?Release@CFolderInStream2@N7z@NArchive@@UAGKXZ
.text:00008EC4 ?Release@CFolderInStream2@N7z@NArchive@@UAGKXZ proc near
.text:00008EC4                                         ; DATA XREF: .rdata:00008C30o
.text:00008EC4
.text:00008EC4 var_10          = dword ptr -10h
.text:00008EC4 var_C           = dword ptr -0Ch
.text:00008EC4 var_8           = dword ptr -8
.text:00008EC4 var_4           = dword ptr -4
.text:00008EC4 this            = dword ptr  8
.text:00008EC4
.text:00008EC4                 push    ebp
.text:00008EC5                 mov     ebp, esp
.text:00008EC7                 sub     esp, 10h
.text:00008ECA                 mov     eax, 0CCCCCCCCh
.text:00008ECF                 mov     [ebp+var_10], eax
.text:00008ED2                 mov     [ebp+var_C], eax
.text:00008ED5                 mov     [ebp+var_8], eax
.text:00008ED8                 mov     [ebp+var_4], eax
.text:00008EDB                 mov     eax, [ebp+this]
.text:00008EDE                 mov     ecx, [eax+30h]
.text:00008EE1                 sub     ecx, 1
.text:00008EE4                 mov     [ebp+var_C], ecx
.text:00008EE7                 mov     edx, [ebp+this]
.text:00008EEA                 mov     eax, [ebp+var_C]
.text:00008EED                 mov     [edx+30h], eax
.text:00008EF0                 cmp     [ebp+var_C], 0
.text:00008EF4                 jz      short loc_8EFE
.text:00008EF6                 mov     ecx, [ebp+this]
.text:00008EF9                 mov     eax, [ecx+30h]
.text:00008EFC                 jmp     short loc_8F28
.text:00008EFE ; ---------------------------------------------------------------------------
.text:00008EFE
.text:00008EFE loc_8EFE:                               ; CODE XREF: NArchive::N7z::CFolderInStream2::Release(void)+30j
.text:00008EFE                 mov     edx, [ebp+this]
.text:00008F01                 mov     [ebp+var_8], edx
.text:00008F04                 mov     eax, [ebp+var_8]
.text:00008F07                 mov     [ebp+var_4], eax
.text:00008F0A                 cmp     [ebp+var_4], 0
.text:00008F0E                 jz      short loc_8F1F
.text:00008F10                 push    1
.text:00008F12                 mov     ecx, [ebp+var_4]
.text:00008F15                 call    ??_GCFolderInStream2@N7z@NArchive@@QAEPAXI@Z ; NArchive::N7z::CFolderInStream2::`scalar deleting destructor'(uint)
.text:00008F1A                 mov     [ebp+var_10], eax
.text:00008F1D                 jmp     short loc_8F26
.text:00008F1F ; ---------------------------------------------------------------------------
.text:00008F1F
.text:00008F1F loc_8F1F:                               ; CODE XREF: NArchive::N7z::CFolderInStream2::Release(void)+4Aj
.text:00008F1F                 mov     [ebp+var_10], 0
.text:00008F26
.text:00008F26 loc_8F26:                               ; CODE XREF: NArchive::N7z::CFolderInStream2::Release(void)+59j
.text:00008F26                 xor     eax, eax
.text:00008F28
.text:00008F28 loc_8F28:                               ; CODE XREF: NArchive::N7z::CFolderInStream2::Release(void)+38j
.text:00008F28                 add     esp, 10h
.text:00008F2B                 cmp     ebp, esp
.text:00008F2D                 call    __RTC_CheckEsp
.text:00008F32                 mov     esp, ebp
.text:00008F34                 pop     ebp
.text:00008F35                 retn    4
.text:00008F35 ?Release@CFolderInStream2@N7z@NArchive@@UAGKXZ endp
.text:00008F35
.text:00008F35 _text           ends
.text:00008F35
.text:00008F38 ; ===========================================================================
.text:00008F38
.text:00008F38 ; Segment type: Pure code
.text:00008F38 ; Segment permissions: Read/Execute
.text:00008F38 _text           segment para public 'CODE' use32
.text:00008F38                 assume cs:_text
.text:00008F38                 ;org 8F38h
.text:00008F38 ; COMDAT (pick any)
.text:00008F38                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008F38
.text:00008F38 ; =============== S U B R O U T I N E =======================================
.text:00008F38
.text:00008F38 ; Attributes: bp-based frame
.text:00008F38
.text:00008F38 ; void __thiscall NArchive::N7z::CFolderInStream2::Init(NArchive::N7z::CFolderInStream2 *__hidden this)
.text:00008F38                 public ?Init@CFolderInStream2@N7z@NArchive@@QAEXXZ
.text:00008F38 ?Init@CFolderInStream2@N7z@NArchive@@QAEXXZ proc near
.text:00008F38                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1D05p
.text:00008F38
.text:00008F38 var_4           = dword ptr -4
.text:00008F38
.text:00008F38                 push    ebp
.text:00008F39                 mov     ebp, esp
.text:00008F3B                 push    ecx
.text:00008F3C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008F43                 mov     [ebp+var_4], ecx
.text:00008F46                 mov     eax, [ebp+var_4]
.text:00008F49                 mov     dword ptr [eax+3Ch], 0
.text:00008F50                 mov     esp, ebp
.text:00008F52                 pop     ebp
.text:00008F53                 retn
.text:00008F53 ?Init@CFolderInStream2@N7z@NArchive@@QAEXXZ endp
.text:00008F53
.text:00008F53 _text           ends
.text:00008F53
.text:00008F54 ; ===========================================================================
.text:00008F54
.text:00008F54 ; Segment type: Pure code
.text:00008F54 ; Segment permissions: Read/Execute
.text:00008F54 _text           segment para public 'CODE' use32
.text:00008F54                 assume cs:_text
.text:00008F54                 ;org 8F54h
.text:00008F54 ; COMDAT (pick any)
.text:00008F54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008F54
.text:00008F54 ; =============== S U B R O U T I N E =======================================
.text:00008F54
.text:00008F54 ; Attributes: bp-based frame
.text:00008F54
.text:00008F54 ; public: void * __thiscall NArchive::N7z::CFolderInStream2::`scalar deleting destructor'(unsigned int)
.text:00008F54                 public ??_GCFolderInStream2@N7z@NArchive@@QAEPAXI@Z
.text:00008F54 ??_GCFolderInStream2@N7z@NArchive@@QAEPAXI@Z proc near
.text:00008F54                                         ; CODE XREF: NArchive::N7z::CFolderInStream2::Release(void)+51p
.text:00008F54
.text:00008F54 var_4           = dword ptr -4
.text:00008F54 arg_0           = dword ptr  8
.text:00008F54
.text:00008F54                 push    ebp
.text:00008F55                 mov     ebp, esp
.text:00008F57                 push    ecx
.text:00008F58                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008F5F                 mov     [ebp+var_4], ecx
.text:00008F62                 mov     ecx, [ebp+var_4] ; this
.text:00008F65                 call    ??1CFolderInStream2@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFolderInStream2::~CFolderInStream2(void)
.text:00008F6A                 mov     eax, [ebp+arg_0]
.text:00008F6D                 and     eax, 1
.text:00008F70                 jz      short loc_8F7E
.text:00008F72                 mov     ecx, [ebp+var_4]
.text:00008F75                 push    ecx             ; void *
.text:00008F76                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00008F7B                 add     esp, 4
.text:00008F7E
.text:00008F7E loc_8F7E:                               ; CODE XREF: NArchive::N7z::CFolderInStream2::`scalar deleting destructor'(uint)+1Cj
.text:00008F7E                 mov     eax, [ebp+var_4]
.text:00008F81                 add     esp, 4
.text:00008F84                 cmp     ebp, esp
.text:00008F86                 call    __RTC_CheckEsp
.text:00008F8B                 mov     esp, ebp
.text:00008F8D                 pop     ebp
.text:00008F8E                 retn    4
.text:00008F8E ??_GCFolderInStream2@N7z@NArchive@@QAEPAXI@Z endp
.text:00008F8E
.text:00008F8E ; ---------------------------------------------------------------------------
.text:00008F91                 align 4
.text:00008F91 _text           ends
.text:00008F91
.text:00008F94 ; ===========================================================================
.text:00008F94
.text:00008F94 ; Segment type: Pure code
.text:00008F94 ; Segment permissions: Read/Execute
.text:00008F94 _text           segment para public 'CODE' use32
.text:00008F94                 assume cs:_text
.text:00008F94                 ;org 8F94h
.text:00008F94 ; COMDAT (pick any)
.text:00008F94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008F94
.text:00008F94 ; =============== S U B R O U T I N E =======================================
.text:00008F94
.text:00008F94 ; Attributes: bp-based frame
.text:00008F94
.text:00008F94 ; _DWORD __thiscall NArchive::N7z::CFolderInStream2::~CFolderInStream2(NArchive::N7z::CFolderInStream2 *__hidden this)
.text:00008F94                 public ??1CFolderInStream2@N7z@NArchive@@QAE@XZ
.text:00008F94 ??1CFolderInStream2@N7z@NArchive@@QAE@XZ proc near
.text:00008F94                                         ; CODE XREF: NArchive::N7z::CFolderInStream2::`scalar deleting destructor'(uint)+11p
.text:00008F94
.text:00008F94 var_14          = dword ptr -14h
.text:00008F94 var_10          = dword ptr -10h
.text:00008F94 var_C           = dword ptr -0Ch
.text:00008F94 var_4           = dword ptr -4
.text:00008F94
.text:00008F94                 push    ebp
.text:00008F95                 mov     ebp, esp
.text:00008F97                 push    0FFFFFFFFh
.text:00008F99                 push    offset __ehhandler$??1CFolderInStream2@N7z@NArchive@@QAE@XZ
.text:00008F9E                 mov     eax, large fs:0
.text:00008FA4                 push    eax
.text:00008FA5                 sub     esp, 8
.text:00008FA8                 mov     [ebp+var_14], 0CCCCCCCCh
.text:00008FAF                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00008FB6                 mov     eax, dword ptr ds:___security_cookie
.text:00008FBB                 xor     eax, ebp
.text:00008FBD                 push    eax
.text:00008FBE                 lea     eax, [ebp+var_C]
.text:00008FC1                 mov     large fs:0, eax
.text:00008FC7                 mov     [ebp+var_10], ecx
.text:00008FCA                 mov     eax, [ebp+var_10]
.text:00008FCD                 mov     dword ptr [eax], offset ??_7CFolderInStream2@N7z@NArchive@@6B@ ; const NArchive::N7z::CFolderInStream2::`vftable'
.text:00008FD3                 mov     [ebp+var_4], 0
.text:00008FDA                 mov     ecx, [ebp+var_10]
.text:00008FDD                 mov     edx, [ecx+34h]
.text:00008FE0                 mov     [ebp+var_14], edx
.text:00008FE3                 mov     eax, [ebp+var_14]
.text:00008FE6                 push    eax             ; void *
.text:00008FE7                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00008FEC                 add     esp, 4
.text:00008FEF                 mov     ecx, [ebp+var_10]
.text:00008FF2                 add     ecx, 38h ; '8'
.text:00008FF5                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00008FFA                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00009001                 mov     ecx, [ebp+var_10]
.text:00009004                 add     ecx, 8          ; this
.text:00009007                 call    ??1CRepackStreamBase@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CRepackStreamBase::~CRepackStreamBase(void)
.text:0000900C                 mov     ecx, [ebp+var_C]
.text:0000900F                 mov     large fs:0, ecx
.text:00009016                 pop     ecx
.text:00009017                 add     esp, 14h
.text:0000901A                 cmp     ebp, esp
.text:0000901C                 call    __RTC_CheckEsp
.text:00009021                 mov     esp, ebp
.text:00009023                 pop     ebp
.text:00009024                 retn
.text:00009024 ??1CFolderInStream2@N7z@NArchive@@QAE@XZ endp
.text:00009024
.text:00009024 ; ---------------------------------------------------------------------------
.text:00009025                 align 4
.text:00009025 _text           ends
.text:00009025
.text$x:00009028 ; ===========================================================================
.text$x:00009028
.text$x:00009028 ; Segment type: Pure code
.text$x:00009028 ; Segment permissions: Read/Execute
.text$x:00009028 _text$x         segment para public 'CODE' use32
.text$x:00009028                 assume cs:_text$x
.text$x:00009028                 ;org 9028h
.text$x:00009028 ; COMDAT (pick associative to section at 8F94)
.text$x:00009028                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00009028
.text$x:00009028 ; =============== S U B R O U T I N E =======================================
.text$x:00009028
.text$x:00009028
.text$x:00009028 __unwindfunclet$??1CFolderInStream2@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:00009028                                         ; DATA XREF: .xdata$x:00009054o
.text$x:00009028                 mov     ecx, [ebp-10h]
.text$x:0000902B                 add     ecx, 8          ; this
.text$x:0000902E                 jmp     ??1CRepackStreamBase@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CRepackStreamBase::~CRepackStreamBase(void)
.text$x:0000902E __unwindfunclet$??1CFolderInStream2@N7z@NArchive@@QAE@XZ$0 endp
.text$x:0000902E
.text$x:00009033
.text$x:00009033 ; =============== S U B R O U T I N E =======================================
.text$x:00009033
.text$x:00009033
.text$x:00009033 __ehhandler$??1CFolderInStream2@N7z@NArchive@@QAE@XZ proc near
.text$x:00009033                                         ; DATA XREF: NArchive::N7z::CFolderInStream2::~CFolderInStream2(void)+5o
.text$x:00009033
.text$x:00009033 arg_4           = dword ptr  8
.text$x:00009033
.text$x:00009033                 mov     edx, [esp+arg_4]
.text$x:00009037                 lea     eax, [edx+0Ch]
.text$x:0000903A                 mov     ecx, [edx-0Ch]
.text$x:0000903D                 xor     ecx, eax
.text$x:0000903F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00009044                 mov     eax, offset __ehfuncinfo$??1CFolderInStream2@N7z@NArchive@@QAE@XZ
.text$x:00009049                 jmp     ___CxxFrameHandler3
.text$x:00009049 __ehhandler$??1CFolderInStream2@N7z@NArchive@@QAE@XZ endp
.text$x:00009049
.text$x:00009049 ; ---------------------------------------------------------------------------
.text$x:0000904E                 align 10h
.text$x:0000904E _text$x         ends
.text$x:0000904E
.xdata$x:00009050 ; ===========================================================================
.xdata$x:00009050
.xdata$x:00009050 ; Segment type: Pure data
.xdata$x:00009050 ; Segment permissions: Read
.xdata$x:00009050 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009050                 assume cs:_xdata$x
.xdata$x:00009050                 ;org 9050h
.xdata$x:00009050 ; COMDAT (pick associative to section at 8F94)
.xdata$x:00009050 __unwindtable$??1CFolderInStream2@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:00009050                                         ; DATA XREF: .xdata$x:00009060o
.xdata$x:00009051                 db 0FFh
.xdata$x:00009052                 db 0FFh
.xdata$x:00009053                 db 0FFh
.xdata$x:00009054                 dd offset __unwindfunclet$??1CFolderInStream2@N7z@NArchive@@QAE@XZ$0
.xdata$x:00009058 __ehfuncinfo$??1CFolderInStream2@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00009058                                         ; DATA XREF: __ehhandler$??1CFolderInStream2@N7z@NArchive@@QAE@XZ+11o
.xdata$x:00009059                 db    5
.xdata$x:0000905A                 db  93h ; ô
.xdata$x:0000905B                 db  19h
.xdata$x:0000905C                 db    1
.xdata$x:0000905D                 db    0
.xdata$x:0000905E                 db    0
.xdata$x:0000905F                 db    0
.xdata$x:00009060                 dd offset __unwindtable$??1CFolderInStream2@N7z@NArchive@@QAE@XZ
.xdata$x:00009064                 db    0
.xdata$x:00009065                 db    0
.xdata$x:00009066                 db    0
.xdata$x:00009067                 db    0
.xdata$x:00009068                 db    0
.xdata$x:00009069                 db    0
.xdata$x:0000906A                 db    0
.xdata$x:0000906B                 db    0
.xdata$x:0000906C                 db    0
.xdata$x:0000906D                 db    0
.xdata$x:0000906E                 db    0
.xdata$x:0000906F                 db    0
.xdata$x:00009070                 db    0
.xdata$x:00009071                 db    0
.xdata$x:00009072                 db    0
.xdata$x:00009073                 db    0
.xdata$x:00009074                 db    0
.xdata$x:00009075                 db    0
.xdata$x:00009076                 db    0
.xdata$x:00009077                 db    0
.xdata$x:00009078                 db    1
.xdata$x:00009079                 db    0
.xdata$x:0000907A                 db    0
.xdata$x:0000907B                 db    0
.xdata$x:0000907B _xdata$x        ends
.xdata$x:0000907B
.text:0000907C ; ===========================================================================
.text:0000907C
.text:0000907C ; Segment type: Pure code
.text:0000907C ; Segment permissions: Read/Execute
.text:0000907C _text           segment para public 'CODE' use32
.text:0000907C                 assume cs:_text
.text:0000907C                 ;org 907Ch
.text:0000907C ; COMDAT (pick any)
.text:0000907C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000907C
.text:0000907C ; =============== S U B R O U T I N E =======================================
.text:0000907C
.text:0000907C ; Attributes: bp-based frame
.text:0000907C
.text:0000907C ; _DWORD __thiscall NArchive::N7z::CRepackStreamBase::CRepackStreamBase(NArchive::N7z::CRepackStreamBase *__hidden this)
.text:0000907C                 public ??0CRepackStreamBase@N7z@NArchive@@QAE@XZ
.text:0000907C ??0CRepackStreamBase@N7z@NArchive@@QAE@XZ proc near
.text:0000907C                                         ; CODE XREF: NArchive::N7z::CFolderInStream2::CFolderInStream2(void)+3Cp
.text:0000907C                                         ; NArchive::N7z::CFolderOutStream2::CFolderOutStream2(void)+33p
.text:0000907C
.text:0000907C var_10          = dword ptr -10h
.text:0000907C var_C           = dword ptr -0Ch
.text:0000907C var_4           = dword ptr -4
.text:0000907C
.text:0000907C                 push    ebp
.text:0000907D                 mov     ebp, esp
.text:0000907F                 push    0FFFFFFFFh
.text:00009081                 push    offset __ehhandler$??0CRepackStreamBase@N7z@NArchive@@QAE@XZ
.text:00009086                 mov     eax, large fs:0
.text:0000908C                 push    eax
.text:0000908D                 push    ecx
.text:0000908E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00009095                 mov     eax, dword ptr ds:___security_cookie
.text:0000909A                 xor     eax, ebp
.text:0000909C                 push    eax
.text:0000909D                 lea     eax, [ebp+var_C]
.text:000090A0                 mov     large fs:0, eax
.text:000090A6                 mov     [ebp+var_10], ecx
.text:000090A9                 mov     ecx, [ebp+var_10]
.text:000090AC                 add     ecx, 20h ; ' '
.text:000090AF                 call    ??0?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:000090B4                 mov     [ebp+var_4], 0
.text:000090BB                 mov     ecx, [ebp+var_10]
.text:000090BE                 add     ecx, 24h ; '$'
.text:000090C1                 call    ??0?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::CMyComPtr<IArchiveExtractCallbackMessage>(void)
.text:000090C6                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000090CD                 mov     eax, [ebp+var_10]
.text:000090D0                 mov     ecx, [ebp+var_C]
.text:000090D3                 mov     large fs:0, ecx
.text:000090DA                 pop     ecx
.text:000090DB                 add     esp, 10h
.text:000090DE                 cmp     ebp, esp
.text:000090E0                 call    __RTC_CheckEsp
.text:000090E5                 mov     esp, ebp
.text:000090E7                 pop     ebp
.text:000090E8                 retn
.text:000090E8 ??0CRepackStreamBase@N7z@NArchive@@QAE@XZ endp
.text:000090E8
.text:000090E8 ; ---------------------------------------------------------------------------
.text:000090E9                 align 4
.text:000090E9 _text           ends
.text:000090E9
.text$x:000090EC ; ===========================================================================
.text$x:000090EC
.text$x:000090EC ; Segment type: Pure code
.text$x:000090EC ; Segment permissions: Read/Execute
.text$x:000090EC _text$x         segment para public 'CODE' use32
.text$x:000090EC                 assume cs:_text$x
.text$x:000090EC                 ;org 90ECh
.text$x:000090EC ; COMDAT (pick associative to section at 907C)
.text$x:000090EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000090EC
.text$x:000090EC ; =============== S U B R O U T I N E =======================================
.text$x:000090EC
.text$x:000090EC
.text$x:000090EC __unwindfunclet$??0CRepackStreamBase@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:000090EC                                         ; DATA XREF: .xdata$x:00009118o
.text$x:000090EC                 mov     ecx, [ebp-10h]
.text$x:000090EF                 add     ecx, 20h ; ' '
.text$x:000090F2                 jmp     ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text$x:000090F2 __unwindfunclet$??0CRepackStreamBase@N7z@NArchive@@QAE@XZ$0 endp
.text$x:000090F2
.text$x:000090F7
.text$x:000090F7 ; =============== S U B R O U T I N E =======================================
.text$x:000090F7
.text$x:000090F7
.text$x:000090F7 __ehhandler$??0CRepackStreamBase@N7z@NArchive@@QAE@XZ proc near
.text$x:000090F7                                         ; DATA XREF: NArchive::N7z::CRepackStreamBase::CRepackStreamBase(void)+5o
.text$x:000090F7
.text$x:000090F7 arg_4           = dword ptr  8
.text$x:000090F7
.text$x:000090F7                 mov     edx, [esp+arg_4]
.text$x:000090FB                 lea     eax, [edx+0Ch]
.text$x:000090FE                 mov     ecx, [edx-8]
.text$x:00009101                 xor     ecx, eax
.text$x:00009103                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00009108                 mov     eax, offset __ehfuncinfo$??0CRepackStreamBase@N7z@NArchive@@QAE@XZ
.text$x:0000910D                 jmp     ___CxxFrameHandler3
.text$x:0000910D __ehhandler$??0CRepackStreamBase@N7z@NArchive@@QAE@XZ endp
.text$x:0000910D
.text$x:0000910D ; ---------------------------------------------------------------------------
.text$x:00009112                 align 4
.text$x:00009112 _text$x         ends
.text$x:00009112
.xdata$x:00009114 ; ===========================================================================
.xdata$x:00009114
.xdata$x:00009114 ; Segment type: Pure data
.xdata$x:00009114 ; Segment permissions: Read
.xdata$x:00009114 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009114                 assume cs:_xdata$x
.xdata$x:00009114                 ;org 9114h
.xdata$x:00009114 ; COMDAT (pick associative to section at 907C)
.xdata$x:00009114 __unwindtable$??0CRepackStreamBase@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:00009114                                         ; DATA XREF: .xdata$x:00009124o
.xdata$x:00009115                 db 0FFh
.xdata$x:00009116                 db 0FFh
.xdata$x:00009117                 db 0FFh
.xdata$x:00009118                 dd offset __unwindfunclet$??0CRepackStreamBase@N7z@NArchive@@QAE@XZ$0
.xdata$x:0000911C __ehfuncinfo$??0CRepackStreamBase@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:0000911C                                         ; DATA XREF: __ehhandler$??0CRepackStreamBase@N7z@NArchive@@QAE@XZ+11o
.xdata$x:0000911D                 db    5
.xdata$x:0000911E                 db  93h ; ô
.xdata$x:0000911F                 db  19h
.xdata$x:00009120                 db    1
.xdata$x:00009121                 db    0
.xdata$x:00009122                 db    0
.xdata$x:00009123                 db    0
.xdata$x:00009124                 dd offset __unwindtable$??0CRepackStreamBase@N7z@NArchive@@QAE@XZ
.xdata$x:00009128                 db    0
.xdata$x:00009129                 db    0
.xdata$x:0000912A                 db    0
.xdata$x:0000912B                 db    0
.xdata$x:0000912C                 db    0
.xdata$x:0000912D                 db    0
.xdata$x:0000912E                 db    0
.xdata$x:0000912F                 db    0
.xdata$x:00009130                 db    0
.xdata$x:00009131                 db    0
.xdata$x:00009132                 db    0
.xdata$x:00009133                 db    0
.xdata$x:00009134                 db    0
.xdata$x:00009135                 db    0
.xdata$x:00009136                 db    0
.xdata$x:00009137                 db    0
.xdata$x:00009138                 db    0
.xdata$x:00009139                 db    0
.xdata$x:0000913A                 db    0
.xdata$x:0000913B                 db    0
.xdata$x:0000913C                 db    1
.xdata$x:0000913D                 db    0
.xdata$x:0000913E                 db    0
.xdata$x:0000913F                 db    0
.xdata$x:0000913F _xdata$x        ends
.xdata$x:0000913F
.text:00009140 ; ===========================================================================
.text:00009140
.text:00009140 ; Segment type: Pure code
.text:00009140 ; Segment permissions: Read/Execute
.text:00009140 _text           segment para public 'CODE' use32
.text:00009140                 assume cs:_text
.text:00009140                 ;org 9140h
.text:00009140 ; COMDAT (pick any)
.text:00009140                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009140
.text:00009140 ; =============== S U B R O U T I N E =======================================
.text:00009140
.text:00009140 ; Attributes: bp-based frame
.text:00009140
.text:00009140 ; _DWORD __thiscall NArchive::N7z::CThreadDecoder::CThreadDecoder(NArchive::N7z::CThreadDecoder *this, bool)
.text:00009140                 public ??0CThreadDecoder@N7z@NArchive@@QAE@_N@Z
.text:00009140 ??0CThreadDecoder@N7z@NArchive@@QAE@_N@Z proc near
.text:00009140                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+80Ep
.text:00009140
.text:00009140 var_1C          = dword ptr -1Ch
.text:00009140 var_18          = dword ptr -18h
.text:00009140 var_14          = dword ptr -14h
.text:00009140 var_10          = dword ptr -10h
.text:00009140 var_C           = dword ptr -0Ch
.text:00009140 var_4           = dword ptr -4
.text:00009140 arg_0           = byte ptr  8
.text:00009140
.text:00009140                 push    ebp
.text:00009141                 mov     ebp, esp
.text:00009143                 push    0FFFFFFFFh
.text:00009145                 push    offset __ehhandler$??0CThreadDecoder@N7z@NArchive@@QAE@_N@Z
.text:0000914A                 mov     eax, large fs:0
.text:00009150                 push    eax
.text:00009151                 sub     esp, 10h
.text:00009154                 mov     eax, 0CCCCCCCCh
.text:00009159                 mov     [ebp+var_1C], eax
.text:0000915C                 mov     [ebp+var_18], eax
.text:0000915F                 mov     [ebp+var_14], eax
.text:00009162                 mov     [ebp+var_10], eax
.text:00009165                 mov     eax, dword ptr ds:___security_cookie
.text:0000916A                 xor     eax, ebp
.text:0000916C                 push    eax
.text:0000916D                 lea     eax, [ebp+var_C]
.text:00009170                 mov     large fs:0, eax
.text:00009176                 mov     [ebp+var_10], ecx
.text:00009179                 mov     ecx, [ebp+var_10]
.text:0000917C                 call    ??0CVirtThread@@QAE@XZ ; CVirtThread::CVirtThread(void)
.text:00009181                 mov     [ebp+var_4], 0
.text:00009188                 mov     eax, [ebp+var_10]
.text:0000918B                 mov     dword ptr [eax], offset ??_7CThreadDecoder@N7z@NArchive@@6B@ ; const NArchive::N7z::CThreadDecoder::`vftable'
.text:00009191                 movzx   ecx, [ebp+arg_0]
.text:00009195                 push    ecx             ; bool
.text:00009196                 mov     ecx, [ebp+var_10]
.text:00009199                 add     ecx, 14h        ; this
.text:0000919C                 call    ??0CDecoder@N7z@NArchive@@QAE@_N@Z ; NArchive::N7z::CDecoder::CDecoder(bool)
.text:000091A1                 mov     byte ptr [ebp+var_4], 1
.text:000091A5                 mov     ecx, [ebp+var_10]
.text:000091A8                 add     ecx, 7Ch ; '|'
.text:000091AB                 call    ??0?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::CMyComPtr<IInStream>(void)
.text:000091B0                 mov     byte ptr [ebp+var_4], 2
.text:000091B4                 mov     ecx, [ebp+var_10]
.text:000091B7                 add     ecx, 84h ; 'ä'
.text:000091BD                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(void)
.text:000091C2                 mov     byte ptr [ebp+var_4], 3
.text:000091C6                 mov     ecx, [ebp+var_10]
.text:000091C9                 add     ecx, 98h ; 'ÿ'
.text:000091CF                 call    ??0?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::CMyComPtr<ICryptoGetTextPassword>(void)
.text:000091D4                 mov     byte ptr [ebp+var_4], 4
.text:000091D8                 movzx   edx, [ebp+arg_0]
.text:000091DC                 test    edx, edx
.text:000091DE                 jz      short loc_925A
.text:000091E0                 mov     eax, [ebp+var_10]
.text:000091E3                 mov     byte ptr [eax+9Ch], 0
.text:000091EA                 mov     ecx, [ebp+var_10]
.text:000091ED                 mov     dword ptr [ecx+0A0h], 1
.text:000091F7                 push    38h ; '8'       ; unsigned int
.text:000091F9                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000091FE                 add     esp, 4
.text:00009201                 mov     [ebp+var_18], eax
.text:00009204                 mov     byte ptr [ebp+var_4], 5
.text:00009208                 cmp     [ebp+var_18], 0
.text:0000920C                 jz      short loc_921B
.text:0000920E                 mov     ecx, [ebp+var_18] ; this
.text:00009211                 call    ??0CFolderOutStream2@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFolderOutStream2::CFolderOutStream2(void)
.text:00009216                 mov     [ebp+var_1C], eax
.text:00009219                 jmp     short loc_9222
.text:0000921B ; ---------------------------------------------------------------------------
.text:0000921B
.text:0000921B loc_921B:                               ; CODE XREF: NArchive::N7z::CThreadDecoder::CThreadDecoder(bool)+CCj
.text:0000921B                 mov     [ebp+var_1C], 0
.text:00009222
.text:00009222 loc_9222:                               ; CODE XREF: NArchive::N7z::CThreadDecoder::CThreadDecoder(bool)+D9j
.text:00009222                 mov     edx, [ebp+var_1C]
.text:00009225                 mov     [ebp+var_14], edx
.text:00009228                 mov     byte ptr [ebp+var_4], 4
.text:0000922C                 mov     eax, [ebp+var_10]
.text:0000922F                 mov     ecx, [ebp+var_14]
.text:00009232                 mov     [eax+80h], ecx
.text:00009238                 mov     edx, [ebp+var_10]
.text:0000923B                 mov     eax, [edx+80h]
.text:00009241                 push    eax
.text:00009242                 mov     ecx, [ebp+var_10]
.text:00009245                 add     ecx, 84h ; 'ä'
.text:0000924B                 call    ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=(ISequentialOutStream *)
.text:00009250                 mov     ecx, [ebp+var_10]
.text:00009253                 mov     dword ptr [ecx+78h], 80004005h
.text:0000925A
.text:0000925A loc_925A:                               ; CODE XREF: NArchive::N7z::CThreadDecoder::CThreadDecoder(bool)+9Ej
.text:0000925A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00009261                 mov     eax, [ebp+var_10]
.text:00009264                 mov     ecx, [ebp+var_C]
.text:00009267                 mov     large fs:0, ecx
.text:0000926E                 pop     ecx
.text:0000926F                 add     esp, 1Ch
.text:00009272                 cmp     ebp, esp
.text:00009274                 call    __RTC_CheckEsp
.text:00009279                 mov     esp, ebp
.text:0000927B                 pop     ebp
.text:0000927C                 retn    4
.text:0000927C ??0CThreadDecoder@N7z@NArchive@@QAE@_N@Z endp
.text:0000927C
.text:0000927C ; ---------------------------------------------------------------------------
.text:0000927F                 align 10h
.text:0000927F _text           ends
.text:0000927F
.text$x:00009280 ; ===========================================================================
.text$x:00009280
.text$x:00009280 ; Segment type: Pure code
.text$x:00009280 ; Segment permissions: Read/Execute
.text$x:00009280 _text$x         segment para public 'CODE' use32
.text$x:00009280                 assume cs:_text$x
.text$x:00009280                 ;org 9280h
.text$x:00009280 ; COMDAT (pick associative to section at 9140)
.text$x:00009280                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00009280
.text$x:00009280 ; =============== S U B R O U T I N E =======================================
.text$x:00009280
.text$x:00009280
.text$x:00009280 __unwindfunclet$??0CThreadDecoder@N7z@NArchive@@QAE@_N@Z$0 proc near
.text$x:00009280                                         ; DATA XREF: .xdata$x:00009310o
.text$x:00009280                 mov     ecx, [ebp-10h]  ; this
.text$x:00009283                 jmp     ??1CVirtThread@@QAE@XZ ; CVirtThread::~CVirtThread(void)
.text$x:00009283 __unwindfunclet$??0CThreadDecoder@N7z@NArchive@@QAE@_N@Z$0 endp
.text$x:00009283
.text$x:00009288
.text$x:00009288 ; =============== S U B R O U T I N E =======================================
.text$x:00009288
.text$x:00009288
.text$x:00009288 __unwindfunclet$??0CThreadDecoder@N7z@NArchive@@QAE@_N@Z$1 proc near
.text$x:00009288                                         ; DATA XREF: .xdata$x:00009318o
.text$x:00009288                 mov     ecx, [ebp-10h]
.text$x:0000928B                 add     ecx, 14h        ; this
.text$x:0000928E                 jmp     ??1CDecoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CDecoder::~CDecoder(void)
.text$x:0000928E __unwindfunclet$??0CThreadDecoder@N7z@NArchive@@QAE@_N@Z$1 endp
.text$x:0000928E
.text$x:00009293
.text$x:00009293 ; =============== S U B R O U T I N E =======================================
.text$x:00009293
.text$x:00009293
.text$x:00009293 __unwindfunclet$??0CThreadDecoder@N7z@NArchive@@QAE@_N@Z$2 proc near
.text$x:00009293                                         ; DATA XREF: .xdata$x:00009320o
.text$x:00009293                 mov     ecx, [ebp-10h]
.text$x:00009296                 add     ecx, 7Ch ; '|'
.text$x:00009299                 jmp     ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text$x:00009299 __unwindfunclet$??0CThreadDecoder@N7z@NArchive@@QAE@_N@Z$2 endp
.text$x:00009299
.text$x:0000929E
.text$x:0000929E ; =============== S U B R O U T I N E =======================================
.text$x:0000929E
.text$x:0000929E
.text$x:0000929E __unwindfunclet$??0CThreadDecoder@N7z@NArchive@@QAE@_N@Z$3 proc near
.text$x:0000929E                                         ; DATA XREF: .xdata$x:00009328o
.text$x:0000929E                 mov     ecx, [ebp-10h]
.text$x:000092A1                 add     ecx, 84h ; 'ä'
.text$x:000092A7                 jmp     ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text$x:000092A7 __unwindfunclet$??0CThreadDecoder@N7z@NArchive@@QAE@_N@Z$3 endp
.text$x:000092A7
.text$x:000092AC
.text$x:000092AC ; =============== S U B R O U T I N E =======================================
.text$x:000092AC
.text$x:000092AC
.text$x:000092AC __unwindfunclet$??0CThreadDecoder@N7z@NArchive@@QAE@_N@Z$4 proc near
.text$x:000092AC                                         ; DATA XREF: .xdata$x:00009330o
.text$x:000092AC                 mov     ecx, [ebp-10h]
.text$x:000092AF                 add     ecx, 98h ; 'ÿ'
.text$x:000092B5                 jmp     ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)
.text$x:000092B5 __unwindfunclet$??0CThreadDecoder@N7z@NArchive@@QAE@_N@Z$4 endp
.text$x:000092B5
.text$x:000092BA
.text$x:000092BA ; =============== S U B R O U T I N E =======================================
.text$x:000092BA
.text$x:000092BA
.text$x:000092BA __unwindfunclet$??0CThreadDecoder@N7z@NArchive@@QAE@_N@Z$5 proc near
.text$x:000092BA                                         ; DATA XREF: .xdata$x:00009338o
.text$x:000092BA                 mov     eax, [ebp-18h]
.text$x:000092BD                 push    eax             ; void *
.text$x:000092BE                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000092C3                 pop     ecx
.text$x:000092C4                 retn
.text$x:000092C4 __unwindfunclet$??0CThreadDecoder@N7z@NArchive@@QAE@_N@Z$5 endp
.text$x:000092C4
.text$x:000092C5
.text$x:000092C5 ; =============== S U B R O U T I N E =======================================
.text$x:000092C5
.text$x:000092C5
.text$x:000092C5 __ehhandler$??0CThreadDecoder@N7z@NArchive@@QAE@_N@Z proc near
.text$x:000092C5                                         ; DATA XREF: NArchive::N7z::CThreadDecoder::CThreadDecoder(bool)+5o
.text$x:000092C5
.text$x:000092C5 arg_4           = dword ptr  8
.text$x:000092C5
.text$x:000092C5                 mov     edx, [esp+arg_4]
.text$x:000092C9                 lea     eax, [edx+0Ch]
.text$x:000092CC                 mov     ecx, [edx-14h]
.text$x:000092CF                 xor     ecx, eax
.text$x:000092D1                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000092D6                 mov     eax, offset __ehfuncinfo$??0CThreadDecoder@N7z@NArchive@@QAE@_N@Z
.text$x:000092DB                 jmp     ___CxxFrameHandler3
.text$x:000092DB __ehhandler$??0CThreadDecoder@N7z@NArchive@@QAE@_N@Z endp
.text$x:000092DB
.text$x:000092DB _text$x         ends
.text$x:000092DB
.rdata:000092E0 ; ===========================================================================
.rdata:000092E0
.rdata:000092E0 ; Segment type: Pure data
.rdata:000092E0 ; Segment permissions: Read
.rdata:000092E0 _rdata          segment dword public 'DATA' use32
.rdata:000092E0                 assume cs:_rdata
.rdata:000092E0                 ;org 92E0h
.rdata:000092E0 ; COMDAT (pick largest)
.rdata:000092E0                 dd offset ??_R4CThreadDecoder@N7z@NArchive@@6B@ ; const NArchive::N7z::CThreadDecoder::`RTTI Complete Object Locator'
.rdata:000092E4                 public ??_7CThreadDecoder@N7z@NArchive@@6B@
.rdata:000092E4 ; const NArchive::N7z::CThreadDecoder::`vftable'
.rdata:000092E4 ??_7CThreadDecoder@N7z@NArchive@@6B@ dd offset ?Execute@CThreadDecoder@N7z@NArchive@@UAEXXZ
.rdata:000092E4                                         ; DATA XREF: NArchive::N7z::CThreadDecoder::CThreadDecoder(bool)+4Bo
.rdata:000092E4                                         ; NArchive::N7z::CThreadDecoder::~CThreadDecoder(void)+30o
.rdata:000092E4 _rdata          ends                    ; NArchive::N7z::CThreadDecoder::Execute(void)
.rdata:000092E4
.xdata$x:000092E8 ; ===========================================================================
.xdata$x:000092E8
.xdata$x:000092E8 ; Segment type: Pure data
.xdata$x:000092E8 ; Segment permissions: Read
.xdata$x:000092E8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000092E8                 assume cs:_xdata$x
.xdata$x:000092E8                 ;org 92E8h
.xdata$x:000092E8 ; COMDAT (pick associative to section at 9140)
.xdata$x:000092E8 __ehfuncinfo$??0CThreadDecoder@N7z@NArchive@@QAE@_N@Z db  22h ; "
.xdata$x:000092E8                                         ; DATA XREF: __ehhandler$??0CThreadDecoder@N7z@NArchive@@QAE@_N@Z+11o
.xdata$x:000092E9                 db    5
.xdata$x:000092EA                 db  93h ; ô
.xdata$x:000092EB                 db  19h
.xdata$x:000092EC                 db    6
.xdata$x:000092ED                 db    0
.xdata$x:000092EE                 db    0
.xdata$x:000092EF                 db    0
.xdata$x:000092F0                 dd offset __unwindtable$??0CThreadDecoder@N7z@NArchive@@QAE@_N@Z
.xdata$x:000092F4                 db    0
.xdata$x:000092F5                 db    0
.xdata$x:000092F6                 db    0
.xdata$x:000092F7                 db    0
.xdata$x:000092F8                 db    0
.xdata$x:000092F9                 db    0
.xdata$x:000092FA                 db    0
.xdata$x:000092FB                 db    0
.xdata$x:000092FC                 db    0
.xdata$x:000092FD                 db    0
.xdata$x:000092FE                 db    0
.xdata$x:000092FF                 db    0
.xdata$x:00009300                 db    0
.xdata$x:00009301                 db    0
.xdata$x:00009302                 db    0
.xdata$x:00009303                 db    0
.xdata$x:00009304                 db    0
.xdata$x:00009305                 db    0
.xdata$x:00009306                 db    0
.xdata$x:00009307                 db    0
.xdata$x:00009308                 db    1
.xdata$x:00009309                 db    0
.xdata$x:0000930A                 db    0
.xdata$x:0000930B                 db    0
.xdata$x:0000930C __unwindtable$??0CThreadDecoder@N7z@NArchive@@QAE@_N@Z db 0FFh
.xdata$x:0000930C                                         ; DATA XREF: .xdata$x:000092F0o
.xdata$x:0000930D                 db 0FFh
.xdata$x:0000930E                 db 0FFh
.xdata$x:0000930F                 db 0FFh
.xdata$x:00009310                 dd offset __unwindfunclet$??0CThreadDecoder@N7z@NArchive@@QAE@_N@Z$0
.xdata$x:00009314                 align 8
.xdata$x:00009318                 dd offset __unwindfunclet$??0CThreadDecoder@N7z@NArchive@@QAE@_N@Z$1
.xdata$x:0000931C                 db    1
.xdata$x:0000931D                 db    0
.xdata$x:0000931E                 db    0
.xdata$x:0000931F                 db    0
.xdata$x:00009320                 dd offset __unwindfunclet$??0CThreadDecoder@N7z@NArchive@@QAE@_N@Z$2
.xdata$x:00009324                 db    2
.xdata$x:00009325                 db    0
.xdata$x:00009326                 db    0
.xdata$x:00009327                 db    0
.xdata$x:00009328                 dd offset __unwindfunclet$??0CThreadDecoder@N7z@NArchive@@QAE@_N@Z$3
.xdata$x:0000932C                 db    3
.xdata$x:0000932D                 db    0
.xdata$x:0000932E                 db    0
.xdata$x:0000932F                 db    0
.xdata$x:00009330                 dd offset __unwindfunclet$??0CThreadDecoder@N7z@NArchive@@QAE@_N@Z$4
.xdata$x:00009334                 db    4
.xdata$x:00009335                 db    0
.xdata$x:00009336                 db    0
.xdata$x:00009337                 db    0
.xdata$x:00009338                 dd offset __unwindfunclet$??0CThreadDecoder@N7z@NArchive@@QAE@_N@Z$5
.xdata$x:00009338 _xdata$x        ends
.xdata$x:00009338
.rdata$r:0000933C ; ===========================================================================
.rdata$r:0000933C
.rdata$r:0000933C ; Segment type: Pure data
.rdata$r:0000933C ; Segment permissions: Read
.rdata$r:0000933C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000933C                 assume cs:_rdata$r
.rdata$r:0000933C                 ;org 933Ch
.rdata$r:0000933C ; COMDAT (pick any)
.rdata$r:0000933C                 public ??_R4CThreadDecoder@N7z@NArchive@@6B@
.rdata$r:0000933C ; const NArchive::N7z::CThreadDecoder::`RTTI Complete Object Locator'
.rdata$r:0000933C ??_R4CThreadDecoder@N7z@NArchive@@6B@ db    0
.rdata$r:0000933C                                         ; DATA XREF: .rdata:000092E0o
.rdata$r:0000933D                 db    0
.rdata$r:0000933E                 db    0
.rdata$r:0000933F                 db    0
.rdata$r:00009340                 db    0
.rdata$r:00009341                 db    0
.rdata$r:00009342                 db    0
.rdata$r:00009343                 db    0
.rdata$r:00009344                 db    0
.rdata$r:00009345                 db    0
.rdata$r:00009346                 db    0
.rdata$r:00009347                 db    0
.rdata$r:00009348                 dd offset ??_R0?AVCThreadDecoder@N7z@NArchive@@@8 ; NArchive::N7z::CThreadDecoder `RTTI Type Descriptor'
.rdata$r:0000934C                 dd offset ??_R3CThreadDecoder@N7z@NArchive@@8 ; NArchive::N7z::CThreadDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000934C _rdata$r        ends
.rdata$r:0000934C
.data:00009350 ; ===========================================================================
.data:00009350
.data:00009350 ; Segment type: Pure data
.data:00009350 ; Segment permissions: Read/Write
.data:00009350 _data           segment dword public 'DATA' use32
.data:00009350                 assume cs:_data
.data:00009350                 ;org 9350h
.data:00009350 ; COMDAT (pick any)
.data:00009350                 public ??_R0?AVCThreadDecoder@N7z@NArchive@@@8
.data:00009350 ; class NArchive::N7z::CThreadDecoder `RTTI Type Descriptor'
.data:00009350 ??_R0?AVCThreadDecoder@N7z@NArchive@@@8 dd offset ??_7type_info@@6B@
.data:00009350                                         ; DATA XREF: .rdata$r:00009348o
.data:00009350                                         ; .rdata$r:NArchive::N7z::CThreadDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00009350                                         ; const type_info::`vftable'
.data:00009354                 align 8
.data:00009358 a_?avcthreaddec db '.?AVCThreadDecoder@N7z@NArchive@@',0
.data:0000937A                 align 4
.data:0000937A _data           ends
.data:0000937A
.rdata$r:0000937C ; ===========================================================================
.rdata$r:0000937C
.rdata$r:0000937C ; Segment type: Pure data
.rdata$r:0000937C ; Segment permissions: Read
.rdata$r:0000937C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000937C                 assume cs:_rdata$r
.rdata$r:0000937C                 ;org 937Ch
.rdata$r:0000937C ; COMDAT (pick any)
.rdata$r:0000937C                 public ??_R3CThreadDecoder@N7z@NArchive@@8
.rdata$r:0000937C ; NArchive::N7z::CThreadDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000937C ??_R3CThreadDecoder@N7z@NArchive@@8 db    0
.rdata$r:0000937C                                         ; DATA XREF: .rdata$r:0000934Co
.rdata$r:0000937C                                         ; .rdata$r:000093B0o
.rdata$r:0000937D                 db    0
.rdata$r:0000937E                 db    0
.rdata$r:0000937F                 db    0
.rdata$r:00009380                 db    0
.rdata$r:00009381                 db    0
.rdata$r:00009382                 db    0
.rdata$r:00009383                 db    0
.rdata$r:00009384                 db    2
.rdata$r:00009385                 db    0
.rdata$r:00009386                 db    0
.rdata$r:00009387                 db    0
.rdata$r:00009388                 dd offset ??_R2CThreadDecoder@N7z@NArchive@@8 ; NArchive::N7z::CThreadDecoder::`RTTI Base Class Array'
.rdata$r:00009388 _rdata$r        ends
.rdata$r:00009388
.rdata$r:0000938C ; ===========================================================================
.rdata$r:0000938C
.rdata$r:0000938C ; Segment type: Pure data
.rdata$r:0000938C ; Segment permissions: Read
.rdata$r:0000938C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000938C                 assume cs:_rdata$r
.rdata$r:0000938C                 ;org 938Ch
.rdata$r:0000938C ; COMDAT (pick any)
.rdata$r:0000938C                 public ??_R2CThreadDecoder@N7z@NArchive@@8
.rdata$r:0000938C ; NArchive::N7z::CThreadDecoder::`RTTI Base Class Array'
.rdata$r:0000938C ??_R2CThreadDecoder@N7z@NArchive@@8 dd offset ??_R1A@?0A@EA@CThreadDecoder@N7z@NArchive@@8
.rdata$r:0000938C                                         ; DATA XREF: .rdata$r:00009388o
.rdata$r:0000938C                                         ; NArchive::N7z::CThreadDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00009390                 dd offset ??_R1A@?0A@EA@CVirtThread@@8 ; CVirtThread::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00009394                 db    0
.rdata$r:00009395                 align 4
.rdata$r:00009395 _rdata$r        ends
.rdata$r:00009395
.rdata$r:00009398 ; ===========================================================================
.rdata$r:00009398
.rdata$r:00009398 ; Segment type: Pure data
.rdata$r:00009398 ; Segment permissions: Read
.rdata$r:00009398 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00009398                 assume cs:_rdata$r
.rdata$r:00009398                 ;org 9398h
.rdata$r:00009398 ; COMDAT (pick any)
.rdata$r:00009398                 public ??_R1A@?0A@EA@CThreadDecoder@N7z@NArchive@@8
.rdata$r:00009398 ; NArchive::N7z::CThreadDecoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00009398 ??_R1A@?0A@EA@CThreadDecoder@N7z@NArchive@@8 dd offset ??_R0?AVCThreadDecoder@N7z@NArchive@@@8
.rdata$r:00009398                                         ; DATA XREF: .rdata$r:NArchive::N7z::CThreadDecoder::`RTTI Base Class Array'o
.rdata$r:00009398                                         ; NArchive::N7z::CThreadDecoder `RTTI Type Descriptor'
.rdata$r:0000939C                 db    1
.rdata$r:0000939D                 db    0
.rdata$r:0000939E                 db    0
.rdata$r:0000939F                 db    0
.rdata$r:000093A0                 db    0
.rdata$r:000093A1                 db    0
.rdata$r:000093A2                 db    0
.rdata$r:000093A3                 db    0
.rdata$r:000093A4                 db 0FFh
.rdata$r:000093A5                 db 0FFh
.rdata$r:000093A6                 db 0FFh
.rdata$r:000093A7                 db 0FFh
.rdata$r:000093A8                 db    0
.rdata$r:000093A9                 db    0
.rdata$r:000093AA                 db    0
.rdata$r:000093AB                 db    0
.rdata$r:000093AC                 db  40h ; @
.rdata$r:000093AD                 db    0
.rdata$r:000093AE                 db    0
.rdata$r:000093AF                 db    0
.rdata$r:000093B0                 dd offset ??_R3CThreadDecoder@N7z@NArchive@@8 ; NArchive::N7z::CThreadDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000093B0 _rdata$r        ends
.rdata$r:000093B0
.rdata$r:000093B4 ; ===========================================================================
.rdata$r:000093B4
.rdata$r:000093B4 ; Segment type: Pure data
.rdata$r:000093B4 ; Segment permissions: Read
.rdata$r:000093B4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000093B4                 assume cs:_rdata$r
.rdata$r:000093B4                 ;org 93B4h
.rdata$r:000093B4 ; COMDAT (pick any)
.rdata$r:000093B4                 public ??_R1A@?0A@EA@CVirtThread@@8
.rdata$r:000093B4 ; CVirtThread::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000093B4 ??_R1A@?0A@EA@CVirtThread@@8 dd offset ??_R0?AUCVirtThread@@@8
.rdata$r:000093B4                                         ; DATA XREF: .rdata$r:00009390o
.rdata$r:000093B4                                         ; .rdata$r:CVirtThread::`RTTI Base Class Array'o
.rdata$r:000093B4                                         ; CVirtThread `RTTI Type Descriptor'
.rdata$r:000093B8                 align 10h
.rdata$r:000093C0                 db 0FFh
.rdata$r:000093C1                 db 0FFh
.rdata$r:000093C2                 db 0FFh
.rdata$r:000093C3                 db 0FFh
.rdata$r:000093C4                 db    0
.rdata$r:000093C5                 db    0
.rdata$r:000093C6                 db    0
.rdata$r:000093C7                 db    0
.rdata$r:000093C8                 db  40h ; @
.rdata$r:000093C9                 db    0
.rdata$r:000093CA                 db    0
.rdata$r:000093CB                 db    0
.rdata$r:000093CC                 dd offset ??_R3CVirtThread@@8 ; CVirtThread::`RTTI Class Hierarchy Descriptor'
.rdata$r:000093CC _rdata$r        ends
.rdata$r:000093CC
.data:000093D0 ; ===========================================================================
.data:000093D0
.data:000093D0 ; Segment type: Pure data
.data:000093D0 ; Segment permissions: Read/Write
.data:000093D0 _data           segment dword public 'DATA' use32
.data:000093D0                 assume cs:_data
.data:000093D0                 ;org 93D0h
.data:000093D0 ; COMDAT (pick any)
.data:000093D0                 public ??_R0?AUCVirtThread@@@8
.data:000093D0 ; struct CVirtThread `RTTI Type Descriptor'
.data:000093D0 ??_R0?AUCVirtThread@@@8 dd offset ??_7type_info@@6B@
.data:000093D0                                         ; DATA XREF: .rdata$r:CVirtThread::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000093D0                                         ; .rdata$r:00009520o
.data:000093D0                                         ; const type_info::`vftable'
.data:000093D4                 align 8
.data:000093D8 a_?aucvirtthrea db '.?AUCVirtThread@@',0
.data:000093EA                 align 4
.data:000093EA _data           ends
.data:000093EA
.rdata$r:000093EC ; ===========================================================================
.rdata$r:000093EC
.rdata$r:000093EC ; Segment type: Pure data
.rdata$r:000093EC ; Segment permissions: Read
.rdata$r:000093EC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000093EC                 assume cs:_rdata$r
.rdata$r:000093EC                 ;org 93ECh
.rdata$r:000093EC ; COMDAT (pick any)
.rdata$r:000093EC                 public ??_R3CVirtThread@@8
.rdata$r:000093EC ; CVirtThread::`RTTI Class Hierarchy Descriptor'
.rdata$r:000093EC ??_R3CVirtThread@@8 db    0             ; DATA XREF: .rdata$r:000093CCo
.rdata$r:000093EC                                         ; .rdata$r:00009524o
.rdata$r:000093ED                 db    0
.rdata$r:000093EE                 db    0
.rdata$r:000093EF                 db    0
.rdata$r:000093F0                 db    0
.rdata$r:000093F1                 db    0
.rdata$r:000093F2                 db    0
.rdata$r:000093F3                 db    0
.rdata$r:000093F4                 db    1
.rdata$r:000093F5                 db    0
.rdata$r:000093F6                 db    0
.rdata$r:000093F7                 db    0
.rdata$r:000093F8                 dd offset ??_R2CVirtThread@@8 ; CVirtThread::`RTTI Base Class Array'
.rdata$r:000093F8 _rdata$r        ends
.rdata$r:000093F8
.rdata$r:000093FC ; ===========================================================================
.rdata$r:000093FC
.rdata$r:000093FC ; Segment type: Pure data
.rdata$r:000093FC ; Segment permissions: Read
.rdata$r:000093FC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000093FC                 assume cs:_rdata$r
.rdata$r:000093FC                 ;org 93FCh
.rdata$r:000093FC ; COMDAT (pick any)
.rdata$r:000093FC                 public ??_R2CVirtThread@@8
.rdata$r:000093FC ; CVirtThread::`RTTI Base Class Array'
.rdata$r:000093FC ??_R2CVirtThread@@8 dd offset ??_R1A@?0A@EA@CVirtThread@@8
.rdata$r:000093FC                                         ; DATA XREF: .rdata$r:000093F8o
.rdata$r:000093FC                                         ; CVirtThread::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00009400                 db    0
.rdata$r:00009401                 align 4
.rdata$r:00009401 _rdata$r        ends
.rdata$r:00009401
.text:00009404 ; ===========================================================================
.text:00009404
.text:00009404 ; Segment type: Pure code
.text:00009404 ; Segment permissions: Read/Execute
.text:00009404 _text           segment para public 'CODE' use32
.text:00009404                 assume cs:_text
.text:00009404                 ;org 9404h
.text:00009404 ; COMDAT (pick any)
.text:00009404                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009404
.text:00009404 ; =============== S U B R O U T I N E =======================================
.text:00009404
.text:00009404 ; Attributes: bp-based frame
.text:00009404
.text:00009404 ; _DWORD __thiscall CVirtThread::~CVirtThread(CVirtThread *__hidden this)
.text:00009404                 public ??1CVirtThread@@QAE@XZ
.text:00009404 ??1CVirtThread@@QAE@XZ proc near        ; CODE XREF: __unwindfunclet$??0CThreadDecoder@N7z@NArchive@@QAE@_N@Z$0+3j
.text:00009404                                         ; NArchive::N7z::CThreadDecoder::~CThreadDecoder(void)+91p ...
.text:00009404
.text:00009404 var_10          = dword ptr -10h
.text:00009404 var_C           = dword ptr -0Ch
.text:00009404 var_4           = dword ptr -4
.text:00009404
.text:00009404                 push    ebp
.text:00009405                 mov     ebp, esp
.text:00009407                 push    0FFFFFFFFh
.text:00009409                 push    offset __ehhandler$??1CVirtThread@@QAE@XZ
.text:0000940E                 mov     eax, large fs:0
.text:00009414                 push    eax
.text:00009415                 push    ecx
.text:00009416                 mov     [ebp+var_10], 0CCCCCCCCh
.text:0000941D                 mov     eax, dword ptr ds:___security_cookie
.text:00009422                 xor     eax, ebp
.text:00009424                 push    eax
.text:00009425                 lea     eax, [ebp+var_C]
.text:00009428                 mov     large fs:0, eax
.text:0000942E                 mov     [ebp+var_10], ecx
.text:00009431                 mov     eax, [ebp+var_10]
.text:00009434                 mov     dword ptr [eax], offset ??_7CVirtThread@@6B@ ; const CVirtThread::`vftable'
.text:0000943A                 mov     [ebp+var_4], 2
.text:00009441                 mov     ecx, [ebp+var_10] ; this
.text:00009444                 call    ?WaitThreadFinish@CVirtThread@@QAEXXZ ; CVirtThread::WaitThreadFinish(void)
.text:00009449                 mov     byte ptr [ebp+var_4], 1
.text:0000944D                 mov     ecx, [ebp+var_10]
.text:00009450                 add     ecx, 0Ch        ; this
.text:00009453                 call    ??1CThread@NWindows@@QAE@XZ ; NWindows::CThread::~CThread(void)
.text:00009458                 mov     byte ptr [ebp+var_4], 0
.text:0000945C                 mov     ecx, [ebp+var_10]
.text:0000945F                 add     ecx, 8          ; this
.text:00009462                 call    ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)
.text:00009467                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000946E                 mov     ecx, [ebp+var_10]
.text:00009471                 add     ecx, 4          ; this
.text:00009474                 call    ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)
.text:00009479                 mov     ecx, [ebp+var_C]
.text:0000947C                 mov     large fs:0, ecx
.text:00009483                 pop     ecx
.text:00009484                 add     esp, 10h
.text:00009487                 cmp     ebp, esp
.text:00009489                 call    __RTC_CheckEsp
.text:0000948E                 mov     esp, ebp
.text:00009490                 pop     ebp
.text:00009491                 retn
.text:00009491 ??1CVirtThread@@QAE@XZ endp
.text:00009491
.text:00009491 ; ---------------------------------------------------------------------------
.text:00009492                 align 4
.text:00009492 _text           ends
.text:00009492
.text$x:00009494 ; ===========================================================================
.text$x:00009494
.text$x:00009494 ; Segment type: Pure code
.text$x:00009494 ; Segment permissions: Read/Execute
.text$x:00009494 _text$x         segment para public 'CODE' use32
.text$x:00009494                 assume cs:_text$x
.text$x:00009494                 ;org 9494h
.text$x:00009494 ; COMDAT (pick associative to section at 9404)
.text$x:00009494                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00009494
.text$x:00009494 ; =============== S U B R O U T I N E =======================================
.text$x:00009494
.text$x:00009494
.text$x:00009494 __unwindfunclet$??1CVirtThread@@QAE@XZ$0 proc near
.text$x:00009494                                         ; DATA XREF: .xdata$x:000094DCo
.text$x:00009494                 mov     ecx, [ebp-10h]
.text$x:00009497                 add     ecx, 4          ; this
.text$x:0000949A                 jmp     ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)
.text$x:0000949A __unwindfunclet$??1CVirtThread@@QAE@XZ$0 endp
.text$x:0000949A
.text$x:0000949F
.text$x:0000949F ; =============== S U B R O U T I N E =======================================
.text$x:0000949F
.text$x:0000949F
.text$x:0000949F __unwindfunclet$??1CVirtThread@@QAE@XZ$1 proc near
.text$x:0000949F                                         ; DATA XREF: .xdata$x:000094E4o
.text$x:0000949F                 mov     ecx, [ebp-10h]
.text$x:000094A2                 add     ecx, 8          ; this
.text$x:000094A5                 jmp     ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)
.text$x:000094A5 __unwindfunclet$??1CVirtThread@@QAE@XZ$1 endp
.text$x:000094A5
.text$x:000094AA
.text$x:000094AA ; =============== S U B R O U T I N E =======================================
.text$x:000094AA
.text$x:000094AA
.text$x:000094AA __unwindfunclet$??1CVirtThread@@QAE@XZ$2 proc near
.text$x:000094AA                                         ; DATA XREF: .xdata$x:000094ECo
.text$x:000094AA                 mov     ecx, [ebp-10h]
.text$x:000094AD                 add     ecx, 0Ch        ; this
.text$x:000094B0                 jmp     ??1CThread@NWindows@@QAE@XZ ; NWindows::CThread::~CThread(void)
.text$x:000094B0 __unwindfunclet$??1CVirtThread@@QAE@XZ$2 endp
.text$x:000094B0
.text$x:000094B5
.text$x:000094B5 ; =============== S U B R O U T I N E =======================================
.text$x:000094B5
.text$x:000094B5
.text$x:000094B5 __ehhandler$??1CVirtThread@@QAE@XZ proc near
.text$x:000094B5                                         ; DATA XREF: CVirtThread::~CVirtThread(void)+5o
.text$x:000094B5
.text$x:000094B5 arg_4           = dword ptr  8
.text$x:000094B5
.text$x:000094B5                 mov     edx, [esp+arg_4]
.text$x:000094B9                 lea     eax, [edx+0Ch]
.text$x:000094BC                 mov     ecx, [edx-8]
.text$x:000094BF                 xor     ecx, eax
.text$x:000094C1                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000094C6                 mov     eax, offset __ehfuncinfo$??1CVirtThread@@QAE@XZ
.text$x:000094CB                 jmp     ___CxxFrameHandler3
.text$x:000094CB __ehhandler$??1CVirtThread@@QAE@XZ endp
.text$x:000094CB
.text$x:000094CB _text$x         ends
.text$x:000094CB
.rdata:000094D0 ; ===========================================================================
.rdata:000094D0
.rdata:000094D0 ; Segment type: Pure data
.rdata:000094D0 ; Segment permissions: Read
.rdata:000094D0 _rdata          segment dword public 'DATA' use32
.rdata:000094D0                 assume cs:_rdata
.rdata:000094D0                 ;org 94D0h
.rdata:000094D0 ; COMDAT (pick largest)
.rdata:000094D0                 dd offset ??_R4CVirtThread@@6B@ ; const CVirtThread::`RTTI Complete Object Locator'
.rdata:000094D4                 public ??_7CVirtThread@@6B@
.rdata:000094D4 ; const CVirtThread::`vftable'
.rdata:000094D4 ??_7CVirtThread@@6B@ dd offset __purecall
.rdata:000094D4                                         ; DATA XREF: CVirtThread::~CVirtThread(void)+30o
.rdata:000094D4                                         ; CVirtThread::CVirtThread(void)+30o
.rdata:000094D4 _rdata          ends
.rdata:000094D4
.xdata$x:000094D8 ; ===========================================================================
.xdata$x:000094D8
.xdata$x:000094D8 ; Segment type: Pure data
.xdata$x:000094D8 ; Segment permissions: Read
.xdata$x:000094D8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000094D8                 assume cs:_xdata$x
.xdata$x:000094D8                 ;org 94D8h
.xdata$x:000094D8 ; COMDAT (pick associative to section at 9404)
.xdata$x:000094D8 __unwindtable$??1CVirtThread@@QAE@XZ db 0FFh
.xdata$x:000094D8                                         ; DATA XREF: .xdata$x:000094F8o
.xdata$x:000094D9                 db 0FFh
.xdata$x:000094DA                 db 0FFh
.xdata$x:000094DB                 db 0FFh
.xdata$x:000094DC                 dd offset __unwindfunclet$??1CVirtThread@@QAE@XZ$0
.xdata$x:000094E0                 db    0
.xdata$x:000094E1                 db    0
.xdata$x:000094E2                 db    0
.xdata$x:000094E3                 db    0
.xdata$x:000094E4                 dd offset __unwindfunclet$??1CVirtThread@@QAE@XZ$1
.xdata$x:000094E8                 db    1
.xdata$x:000094E9                 db    0
.xdata$x:000094EA                 db    0
.xdata$x:000094EB                 db    0
.xdata$x:000094EC                 dd offset __unwindfunclet$??1CVirtThread@@QAE@XZ$2
.xdata$x:000094F0 __ehfuncinfo$??1CVirtThread@@QAE@XZ db  22h ; "
.xdata$x:000094F0                                         ; DATA XREF: __ehhandler$??1CVirtThread@@QAE@XZ+11o
.xdata$x:000094F1                 db    5
.xdata$x:000094F2                 db  93h ; ô
.xdata$x:000094F3                 db  19h
.xdata$x:000094F4                 db    3
.xdata$x:000094F5                 db    0
.xdata$x:000094F6                 db    0
.xdata$x:000094F7                 db    0
.xdata$x:000094F8                 dd offset __unwindtable$??1CVirtThread@@QAE@XZ
.xdata$x:000094FC                 db    0
.xdata$x:000094FD                 db    0
.xdata$x:000094FE                 db    0
.xdata$x:000094FF                 db    0
.xdata$x:00009500                 db    0
.xdata$x:00009501                 db    0
.xdata$x:00009502                 db    0
.xdata$x:00009503                 db    0
.xdata$x:00009504                 db    0
.xdata$x:00009505                 db    0
.xdata$x:00009506                 db    0
.xdata$x:00009507                 db    0
.xdata$x:00009508                 db    0
.xdata$x:00009509                 db    0
.xdata$x:0000950A                 db    0
.xdata$x:0000950B                 db    0
.xdata$x:0000950C                 db    0
.xdata$x:0000950D                 db    0
.xdata$x:0000950E                 db    0
.xdata$x:0000950F                 db    0
.xdata$x:00009510                 db    1
.xdata$x:00009511                 db    0
.xdata$x:00009512                 db    0
.xdata$x:00009513                 db    0
.xdata$x:00009513 _xdata$x        ends
.xdata$x:00009513
.rdata$r:00009514 ; ===========================================================================
.rdata$r:00009514
.rdata$r:00009514 ; Segment type: Pure data
.rdata$r:00009514 ; Segment permissions: Read
.rdata$r:00009514 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00009514                 assume cs:_rdata$r
.rdata$r:00009514                 ;org 9514h
.rdata$r:00009514 ; COMDAT (pick any)
.rdata$r:00009514                 public ??_R4CVirtThread@@6B@
.rdata$r:00009514 ; const CVirtThread::`RTTI Complete Object Locator'
.rdata$r:00009514 ??_R4CVirtThread@@6B@ db    0           ; DATA XREF: .rdata:000094D0o
.rdata$r:00009515                 db    0
.rdata$r:00009516                 db    0
.rdata$r:00009517                 db    0
.rdata$r:00009518                 db    0
.rdata$r:00009519                 db    0
.rdata$r:0000951A                 db    0
.rdata$r:0000951B                 db    0
.rdata$r:0000951C                 db    0
.rdata$r:0000951D                 db    0
.rdata$r:0000951E                 db    0
.rdata$r:0000951F                 db    0
.rdata$r:00009520                 dd offset ??_R0?AUCVirtThread@@@8 ; CVirtThread `RTTI Type Descriptor'
.rdata$r:00009524                 dd offset ??_R3CVirtThread@@8 ; CVirtThread::`RTTI Class Hierarchy Descriptor'
.rdata$r:00009524 _rdata$r        ends
.rdata$r:00009524
.text:00009528 ; ===========================================================================
.text:00009528
.text:00009528 ; Segment type: Pure code
.text:00009528 ; Segment permissions: Read/Execute
.text:00009528 _text           segment para public 'CODE' use32
.text:00009528                 assume cs:_text
.text:00009528                 ;org 9528h
.text:00009528 ; COMDAT (pick any)
.text:00009528                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009528
.text:00009528 ; =============== S U B R O U T I N E =======================================
.text:00009528
.text:00009528 ; Attributes: bp-based frame
.text:00009528
.text:00009528 ; _DWORD __thiscall NWindows::CThread::~CThread(NWindows::CThread *__hidden this)
.text:00009528                 public ??1CThread@NWindows@@QAE@XZ
.text:00009528 ??1CThread@NWindows@@QAE@XZ proc near   ; CODE XREF: CVirtThread::~CVirtThread(void)+4Fp
.text:00009528                                         ; __unwindfunclet$??1CVirtThread@@QAE@XZ$2+6j
.text:00009528
.text:00009528 var_4           = dword ptr -4
.text:00009528
.text:00009528                 push    ebp
.text:00009529                 mov     ebp, esp
.text:0000952B                 push    ecx
.text:0000952C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009533                 mov     [ebp+var_4], ecx
.text:00009536                 mov     ecx, [ebp+var_4] ; this
.text:00009539                 call    ?Close@CThread@NWindows@@QAEIXZ ; NWindows::CThread::Close(void)
.text:0000953E                 add     esp, 4
.text:00009541                 cmp     ebp, esp
.text:00009543                 call    __RTC_CheckEsp
.text:00009548                 mov     esp, ebp
.text:0000954A                 pop     ebp
.text:0000954B                 retn
.text:0000954B ??1CThread@NWindows@@QAE@XZ endp
.text:0000954B
.text:0000954B _text           ends
.text:0000954B
.text:0000954C ; ===========================================================================
.text:0000954C
.text:0000954C ; Segment type: Pure code
.text:0000954C ; Segment permissions: Read/Execute
.text:0000954C _text           segment para public 'CODE' use32
.text:0000954C                 assume cs:_text
.text:0000954C                 ;org 954Ch
.text:0000954C ; COMDAT (pick any)
.text:0000954C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000954C
.text:0000954C ; =============== S U B R O U T I N E =======================================
.text:0000954C
.text:0000954C ; Attributes: bp-based frame
.text:0000954C
.text:0000954C ; unsigned int __thiscall NWindows::CThread::Close(NWindows::CThread *__hidden this)
.text:0000954C                 public ?Close@CThread@NWindows@@QAEIXZ
.text:0000954C ?Close@CThread@NWindows@@QAEIXZ proc near
.text:0000954C                                         ; CODE XREF: NWindows::CThread::~CThread(void)+11p
.text:0000954C
.text:0000954C var_4           = dword ptr -4
.text:0000954C
.text:0000954C                 push    ebp
.text:0000954D                 mov     ebp, esp
.text:0000954F                 push    ecx
.text:00009550                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009557                 mov     [ebp+var_4], ecx
.text:0000955A                 mov     eax, [ebp+var_4]
.text:0000955D                 push    eax
.text:0000955E                 call    _HandlePtr_Close@4 ; HandlePtr_Close(x)
.text:00009563                 add     esp, 4
.text:00009566                 cmp     ebp, esp
.text:00009568                 call    __RTC_CheckEsp
.text:0000956D                 mov     esp, ebp
.text:0000956F                 pop     ebp
.text:00009570                 retn
.text:00009570 ?Close@CThread@NWindows@@QAEIXZ endp
.text:00009570
.text:00009570 ; ---------------------------------------------------------------------------
.text:00009571                 align 4
.text:00009571 _text           ends
.text:00009571
.text:00009574 ; ===========================================================================
.text:00009574
.text:00009574 ; Segment type: Pure code
.text:00009574 ; Segment permissions: Read/Execute
.text:00009574 _text           segment para public 'CODE' use32
.text:00009574                 assume cs:_text
.text:00009574                 ;org 9574h
.text:00009574 ; COMDAT (pick any)
.text:00009574                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009574
.text:00009574 ; =============== S U B R O U T I N E =======================================
.text:00009574
.text:00009574 ; Attributes: bp-based frame
.text:00009574
.text:00009574 ; _DWORD __thiscall NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(NWindows::NSynchronization::CAutoResetEvent *__hidden this)
.text:00009574                 public ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
.text:00009574 ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ proc near
.text:00009574                                         ; CODE XREF: CVirtThread::~CVirtThread(void)+5Ep
.text:00009574                                         ; CVirtThread::~CVirtThread(void)+70p ...
.text:00009574
.text:00009574 var_4           = dword ptr -4
.text:00009574
.text:00009574                 push    ebp
.text:00009575                 mov     ebp, esp
.text:00009577                 push    ecx
.text:00009578                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000957F                 mov     [ebp+var_4], ecx
.text:00009582                 mov     ecx, [ebp+var_4] ; this
.text:00009585                 call    ??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CBaseEvent::~CBaseEvent(void)
.text:0000958A                 add     esp, 4
.text:0000958D                 cmp     ebp, esp
.text:0000958F                 call    __RTC_CheckEsp
.text:00009594                 mov     esp, ebp
.text:00009596                 pop     ebp
.text:00009597                 retn
.text:00009597 ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ endp
.text:00009597
.text:00009597 _text           ends
.text:00009597
.text:00009598 ; ===========================================================================
.text:00009598
.text:00009598 ; Segment type: Pure code
.text:00009598 ; Segment permissions: Read/Execute
.text:00009598 _text           segment para public 'CODE' use32
.text:00009598                 assume cs:_text
.text:00009598                 ;org 9598h
.text:00009598 ; COMDAT (pick any)
.text:00009598                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009598
.text:00009598 ; =============== S U B R O U T I N E =======================================
.text:00009598
.text:00009598 ; Attributes: bp-based frame
.text:00009598
.text:00009598 ; _DWORD __thiscall NWindows::NSynchronization::CBaseEvent::~CBaseEvent(NWindows::NSynchronization::CBaseEvent *__hidden this)
.text:00009598                 public ??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ
.text:00009598 ??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ proc near
.text:00009598                                         ; CODE XREF: NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)+11p
.text:00009598                                         ; NWindows::NSynchronization::CManualResetEvent::~CManualResetEvent(void)+11p
.text:00009598
.text:00009598 var_4           = dword ptr -4
.text:00009598
.text:00009598                 push    ebp
.text:00009599                 mov     ebp, esp
.text:0000959B                 push    ecx
.text:0000959C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000095A3                 mov     [ebp+var_4], ecx
.text:000095A6                 mov     ecx, [ebp+var_4] ; this
.text:000095A9                 call    ?Close@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Close(void)
.text:000095AE                 add     esp, 4
.text:000095B1                 cmp     ebp, esp
.text:000095B3                 call    __RTC_CheckEsp
.text:000095B8                 mov     esp, ebp
.text:000095BA                 pop     ebp
.text:000095BB                 retn
.text:000095BB ??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ endp
.text:000095BB
.text:000095BB _text           ends
.text:000095BB
.text:000095BC ; ===========================================================================
.text:000095BC
.text:000095BC ; Segment type: Pure code
.text:000095BC ; Segment permissions: Read/Execute
.text:000095BC _text           segment para public 'CODE' use32
.text:000095BC                 assume cs:_text
.text:000095BC                 ;org 95BCh
.text:000095BC ; COMDAT (pick any)
.text:000095BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000095BC
.text:000095BC ; =============== S U B R O U T I N E =======================================
.text:000095BC
.text:000095BC ; Attributes: bp-based frame
.text:000095BC
.text:000095BC ; unsigned int __thiscall NWindows::NSynchronization::CBaseEvent::Close(NWindows::NSynchronization::CBaseEvent *__hidden this)
.text:000095BC                 public ?Close@CBaseEvent@NSynchronization@NWindows@@QAEIXZ
.text:000095BC ?Close@CBaseEvent@NSynchronization@NWindows@@QAEIXZ proc near
.text:000095BC                                         ; CODE XREF: NWindows::NSynchronization::CBaseEvent::~CBaseEvent(void)+11p
.text:000095BC
.text:000095BC var_4           = dword ptr -4
.text:000095BC
.text:000095BC                 push    ebp
.text:000095BD                 mov     ebp, esp
.text:000095BF                 push    ecx
.text:000095C0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000095C7                 mov     [ebp+var_4], ecx
.text:000095CA                 mov     eax, [ebp+var_4]
.text:000095CD                 push    eax
.text:000095CE                 call    _HandlePtr_Close@4 ; HandlePtr_Close(x)
.text:000095D3                 add     esp, 4
.text:000095D6                 cmp     ebp, esp
.text:000095D8                 call    __RTC_CheckEsp
.text:000095DD                 mov     esp, ebp
.text:000095DF                 pop     ebp
.text:000095E0                 retn
.text:000095E0 ?Close@CBaseEvent@NSynchronization@NWindows@@QAEIXZ endp
.text:000095E0
.text:000095E0 ; ---------------------------------------------------------------------------
.text:000095E1                 align 4
.text:000095E1 _text           ends
.text:000095E1
.text:000095E4 ; ===========================================================================
.text:000095E4
.text:000095E4 ; Segment type: Pure code
.text:000095E4 ; Segment permissions: Read/Execute
.text:000095E4 _text           segment para public 'CODE' use32
.text:000095E4                 assume cs:_text
.text:000095E4                 ;org 95E4h
.text:000095E4 ; COMDAT (pick any)
.text:000095E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000095E4
.text:000095E4 ; =============== S U B R O U T I N E =======================================
.text:000095E4
.text:000095E4 ; Attributes: bp-based frame
.text:000095E4
.text:000095E4 ; public: __thiscall CVirtThread::CVirtThread(void)
.text:000095E4                 public ??0CVirtThread@@QAE@XZ
.text:000095E4 ??0CVirtThread@@QAE@XZ proc near        ; CODE XREF: NArchive::N7z::CThreadDecoder::CThreadDecoder(bool)+3Cp
.text:000095E4
.text:000095E4 var_10          = dword ptr -10h
.text:000095E4 var_C           = dword ptr -0Ch
.text:000095E4 var_4           = dword ptr -4
.text:000095E4
.text:000095E4                 push    ebp
.text:000095E5                 mov     ebp, esp
.text:000095E7                 push    0FFFFFFFFh
.text:000095E9                 push    offset __ehhandler$??0CVirtThread@@QAE@XZ
.text:000095EE                 mov     eax, large fs:0
.text:000095F4                 push    eax
.text:000095F5                 push    ecx
.text:000095F6                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000095FD                 mov     eax, dword ptr ds:___security_cookie
.text:00009602                 xor     eax, ebp
.text:00009604                 push    eax
.text:00009605                 lea     eax, [ebp+var_C]
.text:00009608                 mov     large fs:0, eax
.text:0000960E                 mov     [ebp+var_10], ecx
.text:00009611                 mov     eax, [ebp+var_10]
.text:00009614                 mov     dword ptr [eax], offset ??_7CVirtThread@@6B@ ; const CVirtThread::`vftable'
.text:0000961A                 mov     ecx, [ebp+var_10]
.text:0000961D                 add     ecx, 4          ; this
.text:00009620                 call    ??0CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::CAutoResetEvent(void)
.text:00009625                 mov     [ebp+var_4], 0
.text:0000962C                 mov     ecx, [ebp+var_10]
.text:0000962F                 add     ecx, 8          ; this
.text:00009632                 call    ??0CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::CAutoResetEvent(void)
.text:00009637                 mov     byte ptr [ebp+var_4], 1
.text:0000963B                 mov     ecx, [ebp+var_10]
.text:0000963E                 add     ecx, 0Ch        ; this
.text:00009641                 call    ??0CThread@NWindows@@QAE@XZ ; NWindows::CThread::CThread(void)
.text:00009646                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000964D                 mov     eax, [ebp+var_10]
.text:00009650                 mov     ecx, [ebp+var_C]
.text:00009653                 mov     large fs:0, ecx
.text:0000965A                 pop     ecx
.text:0000965B                 add     esp, 10h
.text:0000965E                 cmp     ebp, esp
.text:00009660                 call    __RTC_CheckEsp
.text:00009665                 mov     esp, ebp
.text:00009667                 pop     ebp
.text:00009668                 retn
.text:00009668 ??0CVirtThread@@QAE@XZ endp
.text:00009668
.text:00009668 ; ---------------------------------------------------------------------------
.text:00009669                 align 4
.text:00009669 _text           ends
.text:00009669
.text$x:0000966C ; ===========================================================================
.text$x:0000966C
.text$x:0000966C ; Segment type: Pure code
.text$x:0000966C ; Segment permissions: Read/Execute
.text$x:0000966C _text$x         segment para public 'CODE' use32
.text$x:0000966C                 assume cs:_text$x
.text$x:0000966C                 ;org 966Ch
.text$x:0000966C ; COMDAT (pick associative to section at 95E4)
.text$x:0000966C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000966C
.text$x:0000966C ; =============== S U B R O U T I N E =======================================
.text$x:0000966C
.text$x:0000966C
.text$x:0000966C __unwindfunclet$??0CVirtThread@@QAE@XZ$0 proc near
.text$x:0000966C                                         ; DATA XREF: .xdata$x:000096A4o
.text$x:0000966C                 mov     ecx, [ebp-10h]
.text$x:0000966F                 add     ecx, 4          ; this
.text$x:00009672                 jmp     ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)
.text$x:00009672 __unwindfunclet$??0CVirtThread@@QAE@XZ$0 endp
.text$x:00009672
.text$x:00009677
.text$x:00009677 ; =============== S U B R O U T I N E =======================================
.text$x:00009677
.text$x:00009677
.text$x:00009677 __unwindfunclet$??0CVirtThread@@QAE@XZ$1 proc near
.text$x:00009677                                         ; DATA XREF: .xdata$x:000096ACo
.text$x:00009677                 mov     ecx, [ebp-10h]
.text$x:0000967A                 add     ecx, 8          ; this
.text$x:0000967D                 jmp     ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)
.text$x:0000967D __unwindfunclet$??0CVirtThread@@QAE@XZ$1 endp
.text$x:0000967D
.text$x:00009682
.text$x:00009682 ; =============== S U B R O U T I N E =======================================
.text$x:00009682
.text$x:00009682
.text$x:00009682 __ehhandler$??0CVirtThread@@QAE@XZ proc near
.text$x:00009682                                         ; DATA XREF: CVirtThread::CVirtThread(void)+5o
.text$x:00009682
.text$x:00009682 arg_4           = dword ptr  8
.text$x:00009682
.text$x:00009682                 mov     edx, [esp+arg_4]
.text$x:00009686                 lea     eax, [edx+0Ch]
.text$x:00009689                 mov     ecx, [edx-8]
.text$x:0000968C                 xor     ecx, eax
.text$x:0000968E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00009693                 mov     eax, offset __ehfuncinfo$??0CVirtThread@@QAE@XZ
.text$x:00009698                 jmp     ___CxxFrameHandler3
.text$x:00009698 __ehhandler$??0CVirtThread@@QAE@XZ endp
.text$x:00009698
.text$x:00009698 ; ---------------------------------------------------------------------------
.text$x:0000969D                 align 10h
.text$x:0000969D _text$x         ends
.text$x:0000969D
.xdata$x:000096A0 ; ===========================================================================
.xdata$x:000096A0
.xdata$x:000096A0 ; Segment type: Pure data
.xdata$x:000096A0 ; Segment permissions: Read
.xdata$x:000096A0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000096A0                 assume cs:_xdata$x
.xdata$x:000096A0                 ;org 96A0h
.xdata$x:000096A0 ; COMDAT (pick associative to section at 95E4)
.xdata$x:000096A0 __unwindtable$??0CVirtThread@@QAE@XZ db 0FFh
.xdata$x:000096A0                                         ; DATA XREF: .xdata$x:000096B8o
.xdata$x:000096A1                 db 0FFh
.xdata$x:000096A2                 db 0FFh
.xdata$x:000096A3                 db 0FFh
.xdata$x:000096A4                 dd offset __unwindfunclet$??0CVirtThread@@QAE@XZ$0
.xdata$x:000096A8                 db    0
.xdata$x:000096A9                 db    0
.xdata$x:000096AA                 db    0
.xdata$x:000096AB                 db    0
.xdata$x:000096AC                 dd offset __unwindfunclet$??0CVirtThread@@QAE@XZ$1
.xdata$x:000096B0 __ehfuncinfo$??0CVirtThread@@QAE@XZ db  22h ; "
.xdata$x:000096B0                                         ; DATA XREF: __ehhandler$??0CVirtThread@@QAE@XZ+11o
.xdata$x:000096B1                 db    5
.xdata$x:000096B2                 db  93h ; ô
.xdata$x:000096B3                 db  19h
.xdata$x:000096B4                 db    2
.xdata$x:000096B5                 db    0
.xdata$x:000096B6                 db    0
.xdata$x:000096B7                 db    0
.xdata$x:000096B8                 dd offset __unwindtable$??0CVirtThread@@QAE@XZ
.xdata$x:000096BC                 db    0
.xdata$x:000096BD                 db    0
.xdata$x:000096BE                 db    0
.xdata$x:000096BF                 db    0
.xdata$x:000096C0                 db    0
.xdata$x:000096C1                 db    0
.xdata$x:000096C2                 db    0
.xdata$x:000096C3                 db    0
.xdata$x:000096C4                 db    0
.xdata$x:000096C5                 db    0
.xdata$x:000096C6                 db    0
.xdata$x:000096C7                 db    0
.xdata$x:000096C8                 db    0
.xdata$x:000096C9                 db    0
.xdata$x:000096CA                 db    0
.xdata$x:000096CB                 db    0
.xdata$x:000096CC                 db    0
.xdata$x:000096CD                 db    0
.xdata$x:000096CE                 db    0
.xdata$x:000096CF                 db    0
.xdata$x:000096D0                 db    1
.xdata$x:000096D1                 db    0
.xdata$x:000096D2                 db    0
.xdata$x:000096D3                 db    0
.xdata$x:000096D3 _xdata$x        ends
.xdata$x:000096D3
.text:000096D4 ; ===========================================================================
.text:000096D4
.text:000096D4 ; Segment type: Pure code
.text:000096D4 ; Segment permissions: Read/Execute
.text:000096D4 _text           segment para public 'CODE' use32
.text:000096D4                 assume cs:_text
.text:000096D4                 ;org 96D4h
.text:000096D4 ; COMDAT (pick any)
.text:000096D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000096D4
.text:000096D4 ; =============== S U B R O U T I N E =======================================
.text:000096D4
.text:000096D4 ; Attributes: bp-based frame
.text:000096D4
.text:000096D4 ; _DWORD __thiscall NWindows::CThread::CThread(NWindows::CThread *__hidden this)
.text:000096D4                 public ??0CThread@NWindows@@QAE@XZ
.text:000096D4 ??0CThread@NWindows@@QAE@XZ proc near   ; CODE XREF: CVirtThread::CVirtThread(void)+5Dp
.text:000096D4
.text:000096D4 var_4           = dword ptr -4
.text:000096D4
.text:000096D4                 push    ebp
.text:000096D5                 mov     ebp, esp
.text:000096D7                 push    ecx
.text:000096D8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000096DF                 mov     [ebp+var_4], ecx
.text:000096E2                 mov     eax, [ebp+var_4]
.text:000096E5                 mov     dword ptr [eax], 0
.text:000096EB                 mov     eax, [ebp+var_4]
.text:000096EE                 mov     esp, ebp
.text:000096F0                 pop     ebp
.text:000096F1                 retn
.text:000096F1 ??0CThread@NWindows@@QAE@XZ endp
.text:000096F1
.text:000096F1 ; ---------------------------------------------------------------------------
.text:000096F2                 align 4
.text:000096F2 _text           ends
.text:000096F2
.text:000096F4 ; ===========================================================================
.text:000096F4
.text:000096F4 ; Segment type: Pure code
.text:000096F4 ; Segment permissions: Read/Execute
.text:000096F4 _text           segment para public 'CODE' use32
.text:000096F4                 assume cs:_text
.text:000096F4                 ;org 96F4h
.text:000096F4 ; COMDAT (pick any)
.text:000096F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000096F4
.text:000096F4 ; =============== S U B R O U T I N E =======================================
.text:000096F4
.text:000096F4 ; Attributes: bp-based frame
.text:000096F4
.text:000096F4 ; _DWORD __thiscall NWindows::NSynchronization::CAutoResetEvent::CAutoResetEvent(NWindows::NSynchronization::CAutoResetEvent *__hidden this)
.text:000096F4                 public ??0CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
.text:000096F4 ??0CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ proc near
.text:000096F4                                         ; CODE XREF: CVirtThread::CVirtThread(void)+3Cp
.text:000096F4                                         ; CVirtThread::CVirtThread(void)+4Ep ...
.text:000096F4
.text:000096F4 var_4           = dword ptr -4
.text:000096F4
.text:000096F4                 push    ebp
.text:000096F5                 mov     ebp, esp
.text:000096F7                 push    ecx
.text:000096F8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000096FF                 mov     [ebp+var_4], ecx
.text:00009702                 mov     ecx, [ebp+var_4] ; this
.text:00009705                 call    ??0CBaseEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CBaseEvent::CBaseEvent(void)
.text:0000970A                 mov     eax, [ebp+var_4]
.text:0000970D                 add     esp, 4
.text:00009710                 cmp     ebp, esp
.text:00009712                 call    __RTC_CheckEsp
.text:00009717                 mov     esp, ebp
.text:00009719                 pop     ebp
.text:0000971A                 retn
.text:0000971A ??0CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ endp
.text:0000971A
.text:0000971A ; ---------------------------------------------------------------------------
.text:0000971B                 align 4
.text:0000971B _text           ends
.text:0000971B
.text:0000971C ; ===========================================================================
.text:0000971C
.text:0000971C ; Segment type: Pure code
.text:0000971C ; Segment permissions: Read/Execute
.text:0000971C _text           segment para public 'CODE' use32
.text:0000971C                 assume cs:_text
.text:0000971C                 ;org 971Ch
.text:0000971C ; COMDAT (pick any)
.text:0000971C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000971C
.text:0000971C ; =============== S U B R O U T I N E =======================================
.text:0000971C
.text:0000971C ; Attributes: bp-based frame
.text:0000971C
.text:0000971C ; _DWORD __thiscall NWindows::NSynchronization::CBaseEvent::CBaseEvent(NWindows::NSynchronization::CBaseEvent *__hidden this)
.text:0000971C                 public ??0CBaseEvent@NSynchronization@NWindows@@QAE@XZ
.text:0000971C ??0CBaseEvent@NSynchronization@NWindows@@QAE@XZ proc near
.text:0000971C                                         ; CODE XREF: NWindows::NSynchronization::CAutoResetEvent::CAutoResetEvent(void)+11p
.text:0000971C                                         ; NWindows::NSynchronization::CManualResetEvent::CManualResetEvent(void)+11p
.text:0000971C
.text:0000971C var_4           = dword ptr -4
.text:0000971C
.text:0000971C                 push    ebp
.text:0000971D                 mov     ebp, esp
.text:0000971F                 push    ecx
.text:00009720                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009727                 mov     [ebp+var_4], ecx
.text:0000972A                 mov     eax, [ebp+var_4]
.text:0000972D                 mov     dword ptr [eax], 0
.text:00009733                 mov     eax, [ebp+var_4]
.text:00009736                 mov     esp, ebp
.text:00009738                 pop     ebp
.text:00009739                 retn
.text:00009739 ??0CBaseEvent@NSynchronization@NWindows@@QAE@XZ endp
.text:00009739
.text:00009739 ; ---------------------------------------------------------------------------
.text:0000973A                 align 4
.text:0000973A _text           ends
.text:0000973A
.text:0000973C ; ===========================================================================
.text:0000973C
.text:0000973C ; Segment type: Pure code
.text:0000973C ; Segment permissions: Read/Execute
.text:0000973C _text           segment para public 'CODE' use32
.text:0000973C                 assume cs:_text
.text:0000973C                 ;org 973Ch
.text:0000973C ; COMDAT (pick any)
.text:0000973C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000973C
.text:0000973C ; =============== S U B R O U T I N E =======================================
.text:0000973C
.text:0000973C ; Attributes: bp-based frame
.text:0000973C
.text:0000973C ; _DWORD __thiscall NArchive::N7z::CThreadDecoder::~CThreadDecoder(NArchive::N7z::CThreadDecoder *__hidden this)
.text:0000973C                 public ??1CThreadDecoder@N7z@NArchive@@QAE@XZ
.text:0000973C ??1CThreadDecoder@N7z@NArchive@@QAE@XZ proc near
.text:0000973C                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+869p
.text:0000973C                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+A9Dp ...
.text:0000973C
.text:0000973C var_10          = dword ptr -10h
.text:0000973C var_C           = dword ptr -0Ch
.text:0000973C var_4           = dword ptr -4
.text:0000973C
.text:0000973C                 push    ebp
.text:0000973D                 mov     ebp, esp
.text:0000973F                 push    0FFFFFFFFh
.text:00009741                 push    offset __ehhandler$??1CThreadDecoder@N7z@NArchive@@QAE@XZ
.text:00009746                 mov     eax, large fs:0
.text:0000974C                 push    eax
.text:0000974D                 push    ecx
.text:0000974E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00009755                 mov     eax, dword ptr ds:___security_cookie
.text:0000975A                 xor     eax, ebp
.text:0000975C                 push    eax
.text:0000975D                 lea     eax, [ebp+var_C]
.text:00009760                 mov     large fs:0, eax
.text:00009766                 mov     [ebp+var_10], ecx
.text:00009769                 mov     eax, [ebp+var_10]
.text:0000976C                 mov     dword ptr [eax], offset ??_7CThreadDecoder@N7z@NArchive@@6B@ ; const NArchive::N7z::CThreadDecoder::`vftable'
.text:00009772                 mov     [ebp+var_4], 4
.text:00009779                 mov     ecx, [ebp+var_10] ; this
.text:0000977C                 call    ?WaitThreadFinish@CVirtThread@@QAEXXZ ; CVirtThread::WaitThreadFinish(void)
.text:00009781                 mov     byte ptr [ebp+var_4], 3
.text:00009785                 mov     ecx, [ebp+var_10]
.text:00009788                 add     ecx, 98h ; 'ÿ'
.text:0000978E                 call    ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)
.text:00009793                 mov     byte ptr [ebp+var_4], 2
.text:00009797                 mov     ecx, [ebp+var_10]
.text:0000979A                 add     ecx, 84h ; 'ä'
.text:000097A0                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:000097A5                 mov     byte ptr [ebp+var_4], 1
.text:000097A9                 mov     ecx, [ebp+var_10]
.text:000097AC                 add     ecx, 7Ch ; '|'
.text:000097AF                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:000097B4                 mov     byte ptr [ebp+var_4], 0
.text:000097B8                 mov     ecx, [ebp+var_10]
.text:000097BB                 add     ecx, 14h        ; this
.text:000097BE                 call    ??1CDecoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CDecoder::~CDecoder(void)
.text:000097C3                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000097CA                 mov     ecx, [ebp+var_10] ; this
.text:000097CD                 call    ??1CVirtThread@@QAE@XZ ; CVirtThread::~CVirtThread(void)
.text:000097D2                 mov     ecx, [ebp+var_C]
.text:000097D5                 mov     large fs:0, ecx
.text:000097DC                 pop     ecx
.text:000097DD                 add     esp, 10h
.text:000097E0                 cmp     ebp, esp
.text:000097E2                 call    __RTC_CheckEsp
.text:000097E7                 mov     esp, ebp
.text:000097E9                 pop     ebp
.text:000097EA                 retn
.text:000097EA ??1CThreadDecoder@N7z@NArchive@@QAE@XZ endp
.text:000097EA
.text:000097EA ; ---------------------------------------------------------------------------
.text:000097EB                 align 4
.text:000097EB _text           ends
.text:000097EB
.text$x:000097EC ; ===========================================================================
.text$x:000097EC
.text$x:000097EC ; Segment type: Pure code
.text$x:000097EC ; Segment permissions: Read/Execute
.text$x:000097EC _text$x         segment para public 'CODE' use32
.text$x:000097EC                 assume cs:_text$x
.text$x:000097EC                 ;org 97ECh
.text$x:000097EC ; COMDAT (pick associative to section at 973C)
.text$x:000097EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000097EC
.text$x:000097EC ; =============== S U B R O U T I N E =======================================
.text$x:000097EC
.text$x:000097EC
.text$x:000097EC __unwindfunclet$??1CThreadDecoder@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:000097EC                                         ; DATA XREF: .xdata$x:0000986Co
.text$x:000097EC                 mov     ecx, [ebp-10h]  ; this
.text$x:000097EF                 jmp     ??1CVirtThread@@QAE@XZ ; CVirtThread::~CVirtThread(void)
.text$x:000097EF __unwindfunclet$??1CThreadDecoder@N7z@NArchive@@QAE@XZ$0 endp
.text$x:000097EF
.text$x:000097F4
.text$x:000097F4 ; =============== S U B R O U T I N E =======================================
.text$x:000097F4
.text$x:000097F4
.text$x:000097F4 __unwindfunclet$??1CThreadDecoder@N7z@NArchive@@QAE@XZ$1 proc near
.text$x:000097F4                                         ; DATA XREF: .xdata$x:00009874o
.text$x:000097F4                 mov     ecx, [ebp-10h]
.text$x:000097F7                 add     ecx, 14h        ; this
.text$x:000097FA                 jmp     ??1CDecoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CDecoder::~CDecoder(void)
.text$x:000097FA __unwindfunclet$??1CThreadDecoder@N7z@NArchive@@QAE@XZ$1 endp
.text$x:000097FA
.text$x:000097FF
.text$x:000097FF ; =============== S U B R O U T I N E =======================================
.text$x:000097FF
.text$x:000097FF
.text$x:000097FF __unwindfunclet$??1CThreadDecoder@N7z@NArchive@@QAE@XZ$2 proc near
.text$x:000097FF                                         ; DATA XREF: .xdata$x:0000987Co
.text$x:000097FF                 mov     ecx, [ebp-10h]
.text$x:00009802                 add     ecx, 7Ch ; '|'
.text$x:00009805                 jmp     ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text$x:00009805 __unwindfunclet$??1CThreadDecoder@N7z@NArchive@@QAE@XZ$2 endp
.text$x:00009805
.text$x:0000980A
.text$x:0000980A ; =============== S U B R O U T I N E =======================================
.text$x:0000980A
.text$x:0000980A
.text$x:0000980A __unwindfunclet$??1CThreadDecoder@N7z@NArchive@@QAE@XZ$3 proc near
.text$x:0000980A                                         ; DATA XREF: .xdata$x:00009884o
.text$x:0000980A                 mov     ecx, [ebp-10h]
.text$x:0000980D                 add     ecx, 84h ; 'ä'
.text$x:00009813                 jmp     ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text$x:00009813 __unwindfunclet$??1CThreadDecoder@N7z@NArchive@@QAE@XZ$3 endp
.text$x:00009813
.text$x:00009818
.text$x:00009818 ; =============== S U B R O U T I N E =======================================
.text$x:00009818
.text$x:00009818
.text$x:00009818 __unwindfunclet$??1CThreadDecoder@N7z@NArchive@@QAE@XZ$4 proc near
.text$x:00009818                                         ; DATA XREF: .xdata$x:0000988Co
.text$x:00009818                 mov     ecx, [ebp-10h]
.text$x:0000981B                 add     ecx, 98h ; 'ÿ'
.text$x:00009821                 jmp     ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)
.text$x:00009821 __unwindfunclet$??1CThreadDecoder@N7z@NArchive@@QAE@XZ$4 endp
.text$x:00009821
.text$x:00009826
.text$x:00009826 ; =============== S U B R O U T I N E =======================================
.text$x:00009826
.text$x:00009826
.text$x:00009826 __ehhandler$??1CThreadDecoder@N7z@NArchive@@QAE@XZ proc near
.text$x:00009826                                         ; DATA XREF: NArchive::N7z::CThreadDecoder::~CThreadDecoder(void)+5o
.text$x:00009826
.text$x:00009826 arg_4           = dword ptr  8
.text$x:00009826
.text$x:00009826                 mov     edx, [esp+arg_4]
.text$x:0000982A                 lea     eax, [edx+0Ch]
.text$x:0000982D                 mov     ecx, [edx-8]
.text$x:00009830                 xor     ecx, eax
.text$x:00009832                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00009837                 mov     eax, offset __ehfuncinfo$??1CThreadDecoder@N7z@NArchive@@QAE@XZ
.text$x:0000983C                 jmp     ___CxxFrameHandler3
.text$x:0000983C __ehhandler$??1CThreadDecoder@N7z@NArchive@@QAE@XZ endp
.text$x:0000983C
.text$x:0000983C ; ---------------------------------------------------------------------------
.text$x:00009841                 align 4
.text$x:00009841 _text$x         ends
.text$x:00009841
.xdata$x:00009844 ; ===========================================================================
.xdata$x:00009844
.xdata$x:00009844 ; Segment type: Pure data
.xdata$x:00009844 ; Segment permissions: Read
.xdata$x:00009844 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009844                 assume cs:_xdata$x
.xdata$x:00009844                 ;org 9844h
.xdata$x:00009844 ; COMDAT (pick associative to section at 973C)
.xdata$x:00009844 __ehfuncinfo$??1CThreadDecoder@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00009844                                         ; DATA XREF: __ehhandler$??1CThreadDecoder@N7z@NArchive@@QAE@XZ+11o
.xdata$x:00009845                 db    5
.xdata$x:00009846                 db  93h ; ô
.xdata$x:00009847                 db  19h
.xdata$x:00009848                 db    5
.xdata$x:00009849                 db    0
.xdata$x:0000984A                 db    0
.xdata$x:0000984B                 db    0
.xdata$x:0000984C                 dd offset __unwindtable$??1CThreadDecoder@N7z@NArchive@@QAE@XZ
.xdata$x:00009850                 db    0
.xdata$x:00009851                 db    0
.xdata$x:00009852                 db    0
.xdata$x:00009853                 db    0
.xdata$x:00009854                 db    0
.xdata$x:00009855                 db    0
.xdata$x:00009856                 db    0
.xdata$x:00009857                 db    0
.xdata$x:00009858                 db    0
.xdata$x:00009859                 db    0
.xdata$x:0000985A                 db    0
.xdata$x:0000985B                 db    0
.xdata$x:0000985C                 db    0
.xdata$x:0000985D                 db    0
.xdata$x:0000985E                 db    0
.xdata$x:0000985F                 db    0
.xdata$x:00009860                 db    0
.xdata$x:00009861                 db    0
.xdata$x:00009862                 db    0
.xdata$x:00009863                 db    0
.xdata$x:00009864                 db    1
.xdata$x:00009865                 db    0
.xdata$x:00009866                 db    0
.xdata$x:00009867                 db    0
.xdata$x:00009868 __unwindtable$??1CThreadDecoder@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:00009868                                         ; DATA XREF: .xdata$x:0000984Co
.xdata$x:00009869                 db 0FFh
.xdata$x:0000986A                 db 0FFh
.xdata$x:0000986B                 db 0FFh
.xdata$x:0000986C                 dd offset __unwindfunclet$??1CThreadDecoder@N7z@NArchive@@QAE@XZ$0
.xdata$x:00009870                 db    0
.xdata$x:00009871                 db    0
.xdata$x:00009872                 db    0
.xdata$x:00009873                 db    0
.xdata$x:00009874                 dd offset __unwindfunclet$??1CThreadDecoder@N7z@NArchive@@QAE@XZ$1
.xdata$x:00009878                 db    1
.xdata$x:00009879                 db    0
.xdata$x:0000987A                 db    0
.xdata$x:0000987B                 db    0
.xdata$x:0000987C                 dd offset __unwindfunclet$??1CThreadDecoder@N7z@NArchive@@QAE@XZ$2
.xdata$x:00009880                 db    2
.xdata$x:00009881                 db    0
.xdata$x:00009882                 db    0
.xdata$x:00009883                 db    0
.xdata$x:00009884                 dd offset __unwindfunclet$??1CThreadDecoder@N7z@NArchive@@QAE@XZ$3
.xdata$x:00009888                 db    3
.xdata$x:00009889                 db    0
.xdata$x:0000988A                 db    0
.xdata$x:0000988B                 db    0
.xdata$x:0000988C                 dd offset __unwindfunclet$??1CThreadDecoder@N7z@NArchive@@QAE@XZ$4
.xdata$x:0000988C _xdata$x        ends
.xdata$x:0000988C
.text:00009890 ; ===========================================================================
.text:00009890
.text:00009890 ; Segment type: Pure code
.text:00009890 ; Segment permissions: Read/Execute
.text:00009890 _text           segment para public 'CODE' use32
.text:00009890                 assume cs:_text
.text:00009890                 ;org 9890h
.text:00009890 ; COMDAT (pick any)
.text:00009890                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009890
.text:00009890 ; =============== S U B R O U T I N E =======================================
.text:00009890
.text:00009890 ; Attributes: bp-based frame
.text:00009890
.text:00009890 ; _DWORD __thiscall NArchive::N7z::CDecoder::~CDecoder(NArchive::N7z::CDecoder *__hidden this)
.text:00009890                 public ??1CDecoder@N7z@NArchive@@QAE@XZ
.text:00009890 ??1CDecoder@N7z@NArchive@@QAE@XZ proc near
.text:00009890                                         ; CODE XREF: __unwindfunclet$??0CThreadDecoder@N7z@NArchive@@QAE@_N@Z$1+6j
.text:00009890                                         ; NArchive::N7z::CThreadDecoder::~CThreadDecoder(void)+82p ...
.text:00009890
.text:00009890 var_10          = dword ptr -10h
.text:00009890 var_C           = dword ptr -0Ch
.text:00009890 var_4           = dword ptr -4
.text:00009890
.text:00009890                 push    ebp
.text:00009891                 mov     ebp, esp
.text:00009893                 push    0FFFFFFFFh
.text:00009895                 push    offset __ehhandler$??1CDecoder@N7z@NArchive@@QAE@XZ
.text:0000989A                 mov     eax, large fs:0
.text:000098A0                 push    eax
.text:000098A1                 push    ecx
.text:000098A2                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000098A9                 mov     eax, dword ptr ds:___security_cookie
.text:000098AE                 xor     eax, ebp
.text:000098B0                 push    eax
.text:000098B1                 lea     eax, [ebp+var_C]
.text:000098B4                 mov     large fs:0, eax
.text:000098BA                 mov     [ebp+var_10], ecx
.text:000098BD                 mov     [ebp+var_4], 0
.text:000098C4                 mov     ecx, [ebp+var_10]
.text:000098C7                 add     ecx, 60h ; '`'
.text:000098CA                 call    ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ ; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>(void)
.text:000098CF                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000098D6                 mov     ecx, [ebp+var_10]
.text:000098D9                 add     ecx, 4          ; this
.text:000098DC                 call    ??1CBindInfoEx@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CBindInfoEx::~CBindInfoEx(void)
.text:000098E1                 mov     ecx, [ebp+var_C]
.text:000098E4                 mov     large fs:0, ecx
.text:000098EB                 pop     ecx
.text:000098EC                 add     esp, 10h
.text:000098EF                 cmp     ebp, esp
.text:000098F1                 call    __RTC_CheckEsp
.text:000098F6                 mov     esp, ebp
.text:000098F8                 pop     ebp
.text:000098F9                 retn
.text:000098F9 ??1CDecoder@N7z@NArchive@@QAE@XZ endp
.text:000098F9
.text:000098F9 ; ---------------------------------------------------------------------------
.text:000098FA                 align 4
.text:000098FA _text           ends
.text:000098FA
.text$x:000098FC ; ===========================================================================
.text$x:000098FC
.text$x:000098FC ; Segment type: Pure code
.text$x:000098FC ; Segment permissions: Read/Execute
.text$x:000098FC _text$x         segment para public 'CODE' use32
.text$x:000098FC                 assume cs:_text$x
.text$x:000098FC                 ;org 98FCh
.text$x:000098FC ; COMDAT (pick associative to section at 9890)
.text$x:000098FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000098FC
.text$x:000098FC ; =============== S U B R O U T I N E =======================================
.text$x:000098FC
.text$x:000098FC
.text$x:000098FC __unwindfunclet$??1CDecoder@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:000098FC                                         ; DATA XREF: .xdata$x:00009928o
.text$x:000098FC                 mov     ecx, [ebp-10h]
.text$x:000098FF                 add     ecx, 4          ; this
.text$x:00009902                 jmp     ??1CBindInfoEx@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CBindInfoEx::~CBindInfoEx(void)
.text$x:00009902 __unwindfunclet$??1CDecoder@N7z@NArchive@@QAE@XZ$0 endp
.text$x:00009902
.text$x:00009907
.text$x:00009907 ; =============== S U B R O U T I N E =======================================
.text$x:00009907
.text$x:00009907
.text$x:00009907 __ehhandler$??1CDecoder@N7z@NArchive@@QAE@XZ proc near
.text$x:00009907                                         ; DATA XREF: NArchive::N7z::CDecoder::~CDecoder(void)+5o
.text$x:00009907
.text$x:00009907 arg_4           = dword ptr  8
.text$x:00009907
.text$x:00009907                 mov     edx, [esp+arg_4]
.text$x:0000990B                 lea     eax, [edx+0Ch]
.text$x:0000990E                 mov     ecx, [edx-8]
.text$x:00009911                 xor     ecx, eax
.text$x:00009913                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00009918                 mov     eax, offset __ehfuncinfo$??1CDecoder@N7z@NArchive@@QAE@XZ
.text$x:0000991D                 jmp     ___CxxFrameHandler3
.text$x:0000991D __ehhandler$??1CDecoder@N7z@NArchive@@QAE@XZ endp
.text$x:0000991D
.text$x:0000991D ; ---------------------------------------------------------------------------
.text$x:00009922                 align 4
.text$x:00009922 _text$x         ends
.text$x:00009922
.xdata$x:00009924 ; ===========================================================================
.xdata$x:00009924
.xdata$x:00009924 ; Segment type: Pure data
.xdata$x:00009924 ; Segment permissions: Read
.xdata$x:00009924 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009924                 assume cs:_xdata$x
.xdata$x:00009924                 ;org 9924h
.xdata$x:00009924 ; COMDAT (pick associative to section at 9890)
.xdata$x:00009924 __unwindtable$??1CDecoder@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:00009924                                         ; DATA XREF: .xdata$x:00009934o
.xdata$x:00009925                 db 0FFh
.xdata$x:00009926                 db 0FFh
.xdata$x:00009927                 db 0FFh
.xdata$x:00009928                 dd offset __unwindfunclet$??1CDecoder@N7z@NArchive@@QAE@XZ$0
.xdata$x:0000992C __ehfuncinfo$??1CDecoder@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:0000992C                                         ; DATA XREF: __ehhandler$??1CDecoder@N7z@NArchive@@QAE@XZ+11o
.xdata$x:0000992D                 db    5
.xdata$x:0000992E                 db  93h ; ô
.xdata$x:0000992F                 db  19h
.xdata$x:00009930                 db    1
.xdata$x:00009931                 db    0
.xdata$x:00009932                 db    0
.xdata$x:00009933                 db    0
.xdata$x:00009934                 dd offset __unwindtable$??1CDecoder@N7z@NArchive@@QAE@XZ
.xdata$x:00009938                 db    0
.xdata$x:00009939                 db    0
.xdata$x:0000993A                 db    0
.xdata$x:0000993B                 db    0
.xdata$x:0000993C                 db    0
.xdata$x:0000993D                 db    0
.xdata$x:0000993E                 db    0
.xdata$x:0000993F                 db    0
.xdata$x:00009940                 db    0
.xdata$x:00009941                 db    0
.xdata$x:00009942                 db    0
.xdata$x:00009943                 db    0
.xdata$x:00009944                 db    0
.xdata$x:00009945                 db    0
.xdata$x:00009946                 db    0
.xdata$x:00009947                 db    0
.xdata$x:00009948                 db    0
.xdata$x:00009949                 db    0
.xdata$x:0000994A                 db    0
.xdata$x:0000994B                 db    0
.xdata$x:0000994C                 db    1
.xdata$x:0000994D                 db    0
.xdata$x:0000994E                 db    0
.xdata$x:0000994F                 db    0
.xdata$x:0000994F _xdata$x        ends
.xdata$x:0000994F
.text:00009950 ; ===========================================================================
.text:00009950
.text:00009950 ; Segment type: Pure code
.text:00009950 ; Segment permissions: Read/Execute
.text:00009950 _text           segment para public 'CODE' use32
.text:00009950                 assume cs:_text
.text:00009950                 ;org 9950h
.text:00009950 ; COMDAT (pick any)
.text:00009950                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009950
.text:00009950 ; =============== S U B R O U T I N E =======================================
.text:00009950
.text:00009950 ; Attributes: bp-based frame
.text:00009950
.text:00009950 ; _DWORD __thiscall NArchive::N7z::CFolderOutStream2::CFolderOutStream2(NArchive::N7z::CFolderOutStream2 *__hidden this)
.text:00009950                 public ??0CFolderOutStream2@N7z@NArchive@@QAE@XZ
.text:00009950 ??0CFolderOutStream2@N7z@NArchive@@QAE@XZ proc near
.text:00009950                                         ; CODE XREF: NArchive::N7z::CThreadDecoder::CThreadDecoder(bool)+D1p
.text:00009950
.text:00009950 var_10          = dword ptr -10h
.text:00009950 var_C           = dword ptr -0Ch
.text:00009950 var_4           = dword ptr -4
.text:00009950
.text:00009950                 push    ebp
.text:00009951                 mov     ebp, esp
.text:00009953                 push    0FFFFFFFFh
.text:00009955                 push    offset __ehhandler$??0CFolderOutStream2@N7z@NArchive@@QAE@XZ
.text:0000995A                 mov     eax, large fs:0
.text:00009960                 push    eax
.text:00009961                 push    ecx
.text:00009962                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00009969                 mov     eax, dword ptr ds:___security_cookie
.text:0000996E                 xor     eax, ebp
.text:00009970                 push    eax
.text:00009971                 lea     eax, [ebp+var_C]
.text:00009974                 mov     large fs:0, eax
.text:0000997A                 mov     [ebp+var_10], ecx
.text:0000997D                 mov     ecx, [ebp+var_10]
.text:00009980                 add     ecx, 8          ; this
.text:00009983                 call    ??0CRepackStreamBase@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CRepackStreamBase::CRepackStreamBase(void)
.text:00009988                 mov     [ebp+var_4], 0
.text:0000998F                 mov     ecx, [ebp+var_10] ; this
.text:00009992                 call    ??0ISequentialOutStream@@QAE@XZ ; ISequentialOutStream::ISequentialOutStream(void)
.text:00009997                 mov     ecx, [ebp+var_10]
.text:0000999A                 add     ecx, 30h ; '0'  ; this
.text:0000999D                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:000099A2                 mov     eax, [ebp+var_10]
.text:000099A5                 mov     dword ptr [eax], offset ??_7CFolderOutStream2@N7z@NArchive@@6B@ ; const NArchive::N7z::CFolderOutStream2::`vftable'
.text:000099AB                 mov     ecx, [ebp+var_10]
.text:000099AE                 add     ecx, 34h ; '4'
.text:000099B1                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(void)
.text:000099B6                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000099BD                 mov     eax, [ebp+var_10]
.text:000099C0                 mov     ecx, [ebp+var_C]
.text:000099C3                 mov     large fs:0, ecx
.text:000099CA                 pop     ecx
.text:000099CB                 add     esp, 10h
.text:000099CE                 cmp     ebp, esp
.text:000099D0                 call    __RTC_CheckEsp
.text:000099D5                 mov     esp, ebp
.text:000099D7                 pop     ebp
.text:000099D8                 retn
.text:000099D8 ??0CFolderOutStream2@N7z@NArchive@@QAE@XZ endp
.text:000099D8
.text:000099D8 ; ---------------------------------------------------------------------------
.text:000099D9                 align 4
.text:000099D9 _text           ends
.text:000099D9
.text$x:000099DC ; ===========================================================================
.text$x:000099DC
.text$x:000099DC ; Segment type: Pure code
.text$x:000099DC ; Segment permissions: Read/Execute
.text$x:000099DC _text$x         segment para public 'CODE' use32
.text$x:000099DC                 assume cs:_text$x
.text$x:000099DC                 ;org 99DCh
.text$x:000099DC ; COMDAT (pick associative to section at 9950)
.text$x:000099DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000099DC
.text$x:000099DC ; =============== S U B R O U T I N E =======================================
.text$x:000099DC
.text$x:000099DC
.text$x:000099DC __unwindfunclet$??0CFolderOutStream2@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:000099DC                                         ; DATA XREF: .xdata$x:00009A1Co
.text$x:000099DC                 mov     ecx, [ebp-10h]
.text$x:000099DF                 add     ecx, 8          ; this
.text$x:000099E2                 jmp     ??1CRepackStreamBase@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CRepackStreamBase::~CRepackStreamBase(void)
.text$x:000099E2 __unwindfunclet$??0CFolderOutStream2@N7z@NArchive@@QAE@XZ$0 endp
.text$x:000099E2
.text$x:000099E7
.text$x:000099E7 ; =============== S U B R O U T I N E =======================================
.text$x:000099E7
.text$x:000099E7
.text$x:000099E7 __ehhandler$??0CFolderOutStream2@N7z@NArchive@@QAE@XZ proc near
.text$x:000099E7                                         ; DATA XREF: NArchive::N7z::CFolderOutStream2::CFolderOutStream2(void)+5o
.text$x:000099E7
.text$x:000099E7 arg_4           = dword ptr  8
.text$x:000099E7
.text$x:000099E7                 mov     edx, [esp+arg_4]
.text$x:000099EB                 lea     eax, [edx+0Ch]
.text$x:000099EE                 mov     ecx, [edx-8]
.text$x:000099F1                 xor     ecx, eax
.text$x:000099F3                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000099F8                 mov     eax, offset __ehfuncinfo$??0CFolderOutStream2@N7z@NArchive@@QAE@XZ
.text$x:000099FD                 jmp     ___CxxFrameHandler3
.text$x:000099FD __ehhandler$??0CFolderOutStream2@N7z@NArchive@@QAE@XZ endp
.text$x:000099FD
.text$x:000099FD ; ---------------------------------------------------------------------------
.text$x:00009A02                 align 4
.text$x:00009A02 _text$x         ends
.text$x:00009A02
.rdata:00009A04 ; ===========================================================================
.rdata:00009A04
.rdata:00009A04 ; Segment type: Pure data
.rdata:00009A04 ; Segment permissions: Read
.rdata:00009A04 _rdata          segment dword public 'DATA' use32
.rdata:00009A04                 assume cs:_rdata
.rdata:00009A04                 ;org 9A04h
.rdata:00009A04 ; COMDAT (pick largest)
.rdata:00009A04                 dd offset ??_R4CFolderOutStream2@N7z@NArchive@@6B@ ; const NArchive::N7z::CFolderOutStream2::`RTTI Complete Object Locator'
.rdata:00009A08                 public ??_7CFolderOutStream2@N7z@NArchive@@6B@
.rdata:00009A08 ; const NArchive::N7z::CFolderOutStream2::`vftable'
.rdata:00009A08 ??_7CFolderOutStream2@N7z@NArchive@@6B@ dd offset ?QueryInterface@CFolderOutStream2@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z
.rdata:00009A08                                         ; DATA XREF: NArchive::N7z::CFolderOutStream2::CFolderOutStream2(void)+55o
.rdata:00009A08                                         ; NArchive::N7z::CFolderOutStream2::QueryInterface(_GUID const &,void * *)
.rdata:00009A0C                 dd offset ?AddRef@CFolderOutStream2@N7z@NArchive@@UAGKXZ ; NArchive::N7z::CFolderOutStream2::AddRef(void)
.rdata:00009A10                 dd offset ?Release@CFolderOutStream2@N7z@NArchive@@UAGKXZ ; NArchive::N7z::CFolderOutStream2::Release(void)
.rdata:00009A14                 dd offset ?Write@CFolderOutStream2@N7z@NArchive@@UAGJPBXIPAI@Z ; NArchive::N7z::CFolderOutStream2::Write(void const *,uint,uint *)
.rdata:00009A14 _rdata          ends
.rdata:00009A14
.xdata$x:00009A18 ; ===========================================================================
.xdata$x:00009A18
.xdata$x:00009A18 ; Segment type: Pure data
.xdata$x:00009A18 ; Segment permissions: Read
.xdata$x:00009A18 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009A18                 assume cs:_xdata$x
.xdata$x:00009A18                 ;org 9A18h
.xdata$x:00009A18 ; COMDAT (pick associative to section at 9950)
.xdata$x:00009A18 __unwindtable$??0CFolderOutStream2@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:00009A18                                         ; DATA XREF: .xdata$x:00009A28o
.xdata$x:00009A19                 db 0FFh
.xdata$x:00009A1A                 db 0FFh
.xdata$x:00009A1B                 db 0FFh
.xdata$x:00009A1C                 dd offset __unwindfunclet$??0CFolderOutStream2@N7z@NArchive@@QAE@XZ$0
.xdata$x:00009A20 __ehfuncinfo$??0CFolderOutStream2@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00009A20                                         ; DATA XREF: __ehhandler$??0CFolderOutStream2@N7z@NArchive@@QAE@XZ+11o
.xdata$x:00009A21                 db    5
.xdata$x:00009A22                 db  93h ; ô
.xdata$x:00009A23                 db  19h
.xdata$x:00009A24                 db    1
.xdata$x:00009A25                 db    0
.xdata$x:00009A26                 db    0
.xdata$x:00009A27                 db    0
.xdata$x:00009A28                 dd offset __unwindtable$??0CFolderOutStream2@N7z@NArchive@@QAE@XZ
.xdata$x:00009A2C                 align 20h
.xdata$x:00009A40                 db    1
.xdata$x:00009A41                 db    0
.xdata$x:00009A42                 db    0
.xdata$x:00009A43                 db    0
.xdata$x:00009A43 _xdata$x        ends
.xdata$x:00009A43
.rdata$r:00009A44 ; ===========================================================================
.rdata$r:00009A44
.rdata$r:00009A44 ; Segment type: Pure data
.rdata$r:00009A44 ; Segment permissions: Read
.rdata$r:00009A44 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00009A44                 assume cs:_rdata$r
.rdata$r:00009A44                 ;org 9A44h
.rdata$r:00009A44 ; COMDAT (pick any)
.rdata$r:00009A44                 public ??_R4CFolderOutStream2@N7z@NArchive@@6B@
.rdata$r:00009A44 ; const NArchive::N7z::CFolderOutStream2::`RTTI Complete Object Locator'
.rdata$r:00009A44 ??_R4CFolderOutStream2@N7z@NArchive@@6B@ db    0
.rdata$r:00009A44                                         ; DATA XREF: .rdata:00009A04o
.rdata$r:00009A45                 db    0
.rdata$r:00009A46                 db    0
.rdata$r:00009A47                 db    0
.rdata$r:00009A48                 db    0
.rdata$r:00009A49                 db    0
.rdata$r:00009A4A                 db    0
.rdata$r:00009A4B                 db    0
.rdata$r:00009A4C                 db    0
.rdata$r:00009A4D                 db    0
.rdata$r:00009A4E                 db    0
.rdata$r:00009A4F                 db    0
.rdata$r:00009A50                 dd offset ??_R0?AVCFolderOutStream2@N7z@NArchive@@@8 ; NArchive::N7z::CFolderOutStream2 `RTTI Type Descriptor'
.rdata$r:00009A54                 dd offset ??_R3CFolderOutStream2@N7z@NArchive@@8 ; NArchive::N7z::CFolderOutStream2::`RTTI Class Hierarchy Descriptor'
.rdata$r:00009A54 _rdata$r        ends
.rdata$r:00009A54
.data:00009A58 ; ===========================================================================
.data:00009A58
.data:00009A58 ; Segment type: Pure data
.data:00009A58 ; Segment permissions: Read/Write
.data:00009A58 _data           segment dword public 'DATA' use32
.data:00009A58                 assume cs:_data
.data:00009A58                 ;org 9A58h
.data:00009A58 ; COMDAT (pick any)
.data:00009A58                 public ??_R0?AVCFolderOutStream2@N7z@NArchive@@@8
.data:00009A58 ; class NArchive::N7z::CFolderOutStream2 `RTTI Type Descriptor'
.data:00009A58 ??_R0?AVCFolderOutStream2@N7z@NArchive@@@8 dd offset ??_7type_info@@6B@
.data:00009A58                                         ; DATA XREF: .rdata$r:00009A50o
.data:00009A58                                         ; .rdata$r:NArchive::N7z::CFolderOutStream2::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00009A58                                         ; const type_info::`vftable'
.data:00009A5C                 align 10h
.data:00009A60 a_?avcfolderout db '.?AVCFolderOutStream2@N7z@NArchive@@',0
.data:00009A85                 align 4
.data:00009A85 _data           ends
.data:00009A85
.rdata$r:00009A88 ; ===========================================================================
.rdata$r:00009A88
.rdata$r:00009A88 ; Segment type: Pure data
.rdata$r:00009A88 ; Segment permissions: Read
.rdata$r:00009A88 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00009A88                 assume cs:_rdata$r
.rdata$r:00009A88                 ;org 9A88h
.rdata$r:00009A88 ; COMDAT (pick any)
.rdata$r:00009A88                 public ??_R3CFolderOutStream2@N7z@NArchive@@8
.rdata$r:00009A88 ; NArchive::N7z::CFolderOutStream2::`RTTI Class Hierarchy Descriptor'
.rdata$r:00009A88 ??_R3CFolderOutStream2@N7z@NArchive@@8 db    0
.rdata$r:00009A88                                         ; DATA XREF: .rdata$r:00009A54o
.rdata$r:00009A88                                         ; .rdata$r:00009AC8o
.rdata$r:00009A89                 db    0
.rdata$r:00009A8A                 db    0
.rdata$r:00009A8B                 db    0
.rdata$r:00009A8C                 db    1
.rdata$r:00009A8D                 db    0
.rdata$r:00009A8E                 db    0
.rdata$r:00009A8F                 db    0
.rdata$r:00009A90                 db    5
.rdata$r:00009A91                 db    0
.rdata$r:00009A92                 db    0
.rdata$r:00009A93                 db    0
.rdata$r:00009A94                 dd offset ??_R2CFolderOutStream2@N7z@NArchive@@8 ; NArchive::N7z::CFolderOutStream2::`RTTI Base Class Array'
.rdata$r:00009A94 _rdata$r        ends
.rdata$r:00009A94
.rdata$r:00009A98 ; ===========================================================================
.rdata$r:00009A98
.rdata$r:00009A98 ; Segment type: Pure data
.rdata$r:00009A98 ; Segment permissions: Read
.rdata$r:00009A98 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00009A98                 assume cs:_rdata$r
.rdata$r:00009A98                 ;org 9A98h
.rdata$r:00009A98 ; COMDAT (pick any)
.rdata$r:00009A98                 public ??_R2CFolderOutStream2@N7z@NArchive@@8
.rdata$r:00009A98 ; NArchive::N7z::CFolderOutStream2::`RTTI Base Class Array'
.rdata$r:00009A98 ??_R2CFolderOutStream2@N7z@NArchive@@8 dd offset ??_R1A@?0A@EA@CFolderOutStream2@N7z@NArchive@@8
.rdata$r:00009A98                                         ; DATA XREF: .rdata$r:00009A94o
.rdata$r:00009A98                                         ; NArchive::N7z::CFolderOutStream2::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00009A9C                 dd offset ??_R17?0A@EA@CRepackStreamBase@N7z@NArchive@@8 ; NArchive::N7z::CRepackStreamBase::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:00009AA0                 dd offset ??_R1A@?0A@EA@ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00009AA4                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00009AA8                 dd offset ??_R1DA@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (48,-1,0,64)'
.rdata$r:00009AAC                 db    0
.rdata$r:00009AAD                 align 10h
.rdata$r:00009AAD _rdata$r        ends
.rdata$r:00009AAD
.rdata$r:00009AB0 ; ===========================================================================
.rdata$r:00009AB0
.rdata$r:00009AB0 ; Segment type: Pure data
.rdata$r:00009AB0 ; Segment permissions: Read
.rdata$r:00009AB0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00009AB0                 assume cs:_rdata$r
.rdata$r:00009AB0                 ;org 9AB0h
.rdata$r:00009AB0 ; COMDAT (pick any)
.rdata$r:00009AB0                 public ??_R1A@?0A@EA@CFolderOutStream2@N7z@NArchive@@8
.rdata$r:00009AB0 ; NArchive::N7z::CFolderOutStream2::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00009AB0 ??_R1A@?0A@EA@CFolderOutStream2@N7z@NArchive@@8 dd offset ??_R0?AVCFolderOutStream2@N7z@NArchive@@@8
.rdata$r:00009AB0                                         ; DATA XREF: .rdata$r:NArchive::N7z::CFolderOutStream2::`RTTI Base Class Array'o
.rdata$r:00009AB0                                         ; NArchive::N7z::CFolderOutStream2 `RTTI Type Descriptor'
.rdata$r:00009AB4                 db    4
.rdata$r:00009AB5                 db    0
.rdata$r:00009AB6                 db    0
.rdata$r:00009AB7                 db    0
.rdata$r:00009AB8                 db    0
.rdata$r:00009AB9                 db    0
.rdata$r:00009ABA                 db    0
.rdata$r:00009ABB                 db    0
.rdata$r:00009ABC                 db 0FFh
.rdata$r:00009ABD                 db 0FFh
.rdata$r:00009ABE                 db 0FFh
.rdata$r:00009ABF                 db 0FFh
.rdata$r:00009AC0                 db    0
.rdata$r:00009AC1                 db    0
.rdata$r:00009AC2                 db    0
.rdata$r:00009AC3                 db    0
.rdata$r:00009AC4                 db  40h ; @
.rdata$r:00009AC5                 db    0
.rdata$r:00009AC6                 db    0
.rdata$r:00009AC7                 db    0
.rdata$r:00009AC8                 dd offset ??_R3CFolderOutStream2@N7z@NArchive@@8 ; NArchive::N7z::CFolderOutStream2::`RTTI Class Hierarchy Descriptor'
.rdata$r:00009AC8 _rdata$r        ends
.rdata$r:00009AC8
.rdata$r:00009ACC ; ===========================================================================
.rdata$r:00009ACC
.rdata$r:00009ACC ; Segment type: Pure data
.rdata$r:00009ACC ; Segment permissions: Read
.rdata$r:00009ACC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00009ACC                 assume cs:_rdata$r
.rdata$r:00009ACC                 ;org 9ACCh
.rdata$r:00009ACC ; COMDAT (pick any)
.rdata$r:00009ACC                 public ??_R1A@?0A@EA@ISequentialOutStream@@8
.rdata$r:00009ACC ; ISequentialOutStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00009ACC ??_R1A@?0A@EA@ISequentialOutStream@@8 dd offset ??_R0?AUISequentialOutStream@@@8
.rdata$r:00009ACC                                         ; DATA XREF: .rdata$r:00009AA0o
.rdata$r:00009ACC                                         ; .rdata$r:ISequentialOutStream::`RTTI Base Class Array'o
.rdata$r:00009ACC                                         ; ISequentialOutStream `RTTI Type Descriptor'
.rdata$r:00009AD0                 db    1
.rdata$r:00009AD1                 db    0
.rdata$r:00009AD2                 db    0
.rdata$r:00009AD3                 db    0
.rdata$r:00009AD4                 db    0
.rdata$r:00009AD5                 db    0
.rdata$r:00009AD6                 db    0
.rdata$r:00009AD7                 db    0
.rdata$r:00009AD8                 db 0FFh
.rdata$r:00009AD9                 db 0FFh
.rdata$r:00009ADA                 db 0FFh
.rdata$r:00009ADB                 db 0FFh
.rdata$r:00009ADC                 db    0
.rdata$r:00009ADD                 db    0
.rdata$r:00009ADE                 db    0
.rdata$r:00009ADF                 db    0
.rdata$r:00009AE0                 db  40h ; @
.rdata$r:00009AE1                 db    0
.rdata$r:00009AE2                 db    0
.rdata$r:00009AE3                 db    0
.rdata$r:00009AE4                 dd offset ??_R3ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00009AE4 _rdata$r        ends
.rdata$r:00009AE4
.data:00009AE8 ; ===========================================================================
.data:00009AE8
.data:00009AE8 ; Segment type: Pure data
.data:00009AE8 ; Segment permissions: Read/Write
.data:00009AE8 _data           segment dword public 'DATA' use32
.data:00009AE8                 assume cs:_data
.data:00009AE8                 ;org 9AE8h
.data:00009AE8 ; COMDAT (pick any)
.data:00009AE8                 public ??_R0?AUISequentialOutStream@@@8
.data:00009AE8 ; struct ISequentialOutStream `RTTI Type Descriptor'
.data:00009AE8 ??_R0?AUISequentialOutStream@@@8 dd offset ??_7type_info@@6B@
.data:00009AE8                                         ; DATA XREF: .rdata$r:ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00009AE8                                         ; .rdata$r:00009F38o
.data:00009AE8                                         ; const type_info::`vftable'
.data:00009AEC                 align 10h
.data:00009AF0 a_?auisequentia db '.?AUISequentialOutStream@@',0
.data:00009B0B                 align 4
.data:00009B0B _data           ends
.data:00009B0B
.rdata$r:00009B0C ; ===========================================================================
.rdata$r:00009B0C
.rdata$r:00009B0C ; Segment type: Pure data
.rdata$r:00009B0C ; Segment permissions: Read
.rdata$r:00009B0C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00009B0C                 assume cs:_rdata$r
.rdata$r:00009B0C                 ;org 9B0Ch
.rdata$r:00009B0C ; COMDAT (pick any)
.rdata$r:00009B0C                 public ??_R3ISequentialOutStream@@8
.rdata$r:00009B0C ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00009B0C ??_R3ISequentialOutStream@@8 db    0    ; DATA XREF: .rdata$r:00009AE4o
.rdata$r:00009B0C                                         ; .rdata$r:00009F3Co
.rdata$r:00009B0D                 db    0
.rdata$r:00009B0E                 db    0
.rdata$r:00009B0F                 db    0
.rdata$r:00009B10                 db    0
.rdata$r:00009B11                 db    0
.rdata$r:00009B12                 db    0
.rdata$r:00009B13                 db    0
.rdata$r:00009B14                 db    2
.rdata$r:00009B15                 db    0
.rdata$r:00009B16                 db    0
.rdata$r:00009B17                 db    0
.rdata$r:00009B18                 dd offset ??_R2ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Array'
.rdata$r:00009B18 _rdata$r        ends
.rdata$r:00009B18
.rdata$r:00009B1C ; ===========================================================================
.rdata$r:00009B1C
.rdata$r:00009B1C ; Segment type: Pure data
.rdata$r:00009B1C ; Segment permissions: Read
.rdata$r:00009B1C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00009B1C                 assume cs:_rdata$r
.rdata$r:00009B1C                 ;org 9B1Ch
.rdata$r:00009B1C ; COMDAT (pick any)
.rdata$r:00009B1C                 public ??_R2ISequentialOutStream@@8
.rdata$r:00009B1C ; ISequentialOutStream::`RTTI Base Class Array'
.rdata$r:00009B1C ??_R2ISequentialOutStream@@8 dd offset ??_R1A@?0A@EA@ISequentialOutStream@@8
.rdata$r:00009B1C                                         ; DATA XREF: .rdata$r:00009B18o
.rdata$r:00009B1C                                         ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00009B20                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00009B24                 db    0
.rdata$r:00009B25                 align 4
.rdata$r:00009B25 _rdata$r        ends
.rdata$r:00009B25
.text:00009B28 ; ===========================================================================
.text:00009B28
.text:00009B28 ; Segment type: Pure code
.text:00009B28 ; Segment permissions: Read/Execute
.text:00009B28 _text           segment para public 'CODE' use32
.text:00009B28                 assume cs:_text
.text:00009B28                 ;org 9B28h
.text:00009B28 ; COMDAT (pick any)
.text:00009B28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009B28
.text:00009B28 ; =============== S U B R O U T I N E =======================================
.text:00009B28
.text:00009B28 ; Attributes: bp-based frame
.text:00009B28
.text:00009B28 ; __int32 __stdcall NArchive::N7z::CFolderOutStream2::QueryInterface(NArchive::N7z::CFolderOutStream2 *this, const struct _GUID *Buf1, void **)
.text:00009B28                 public ?QueryInterface@CFolderOutStream2@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z
.text:00009B28 ?QueryInterface@CFolderOutStream2@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00009B28                                         ; DATA XREF: .rdata:const NArchive::N7z::CFolderOutStream2::`vftable'o
.text:00009B28
.text:00009B28 this            = dword ptr  8
.text:00009B28 Buf1            = dword ptr  0Ch
.text:00009B28 arg_8           = dword ptr  10h
.text:00009B28
.text:00009B28                 push    ebp
.text:00009B29                 mov     ebp, esp
.text:00009B2B                 mov     eax, [ebp+arg_8]
.text:00009B2E                 mov     dword ptr [eax], 0
.text:00009B34                 push    offset _IID_IUnknown ; Buf2
.text:00009B39                 mov     ecx, [ebp+Buf1]
.text:00009B3C                 push    ecx             ; Buf1
.text:00009B3D                 call    ___@8           ; __(x,x)
.text:00009B42                 test    eax, eax
.text:00009B44                 jz      short loc_9B50
.text:00009B46                 mov     edx, [ebp+arg_8]
.text:00009B49                 mov     eax, [ebp+this]
.text:00009B4C                 mov     [edx], eax
.text:00009B4E                 jmp     short loc_9B57
.text:00009B50 ; ---------------------------------------------------------------------------
.text:00009B50
.text:00009B50 loc_9B50:                               ; CODE XREF: NArchive::N7z::CFolderOutStream2::QueryInterface(_GUID const &,void * *)+1Cj
.text:00009B50                 mov     eax, 80004002h
.text:00009B55                 jmp     short loc_9B68
.text:00009B57 ; ---------------------------------------------------------------------------
.text:00009B57
.text:00009B57 loc_9B57:                               ; CODE XREF: NArchive::N7z::CFolderOutStream2::QueryInterface(_GUID const &,void * *)+26j
.text:00009B57                 mov     ecx, [ebp+this]
.text:00009B5A                 mov     edx, [ecx+30h]
.text:00009B5D                 add     edx, 1
.text:00009B60                 mov     eax, [ebp+this]
.text:00009B63                 mov     [eax+30h], edx
.text:00009B66                 xor     eax, eax
.text:00009B68
.text:00009B68 loc_9B68:                               ; CODE XREF: NArchive::N7z::CFolderOutStream2::QueryInterface(_GUID const &,void * *)+2Dj
.text:00009B68                 cmp     ebp, esp
.text:00009B6A                 call    __RTC_CheckEsp
.text:00009B6F                 pop     ebp
.text:00009B70                 retn    0Ch
.text:00009B70 ?QueryInterface@CFolderOutStream2@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z endp
.text:00009B70
.text:00009B70 ; ---------------------------------------------------------------------------
.text:00009B73                 align 4
.text:00009B73 _text           ends
.text:00009B73
.text:00009B74 ; ===========================================================================
.text:00009B74
.text:00009B74 ; Segment type: Pure code
.text:00009B74 ; Segment permissions: Read/Execute
.text:00009B74 _text           segment para public 'CODE' use32
.text:00009B74                 assume cs:_text
.text:00009B74                 ;org 9B74h
.text:00009B74 ; COMDAT (pick any)
.text:00009B74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009B74
.text:00009B74 ; =============== S U B R O U T I N E =======================================
.text:00009B74
.text:00009B74 ; Attributes: bp-based frame
.text:00009B74
.text:00009B74 ; unsigned __int32 __stdcall NArchive::N7z::CFolderOutStream2::AddRef(NArchive::N7z::CFolderOutStream2 *this)
.text:00009B74                 public ?AddRef@CFolderOutStream2@N7z@NArchive@@UAGKXZ
.text:00009B74 ?AddRef@CFolderOutStream2@N7z@NArchive@@UAGKXZ proc near
.text:00009B74                                         ; DATA XREF: .rdata:00009A0Co
.text:00009B74
.text:00009B74 var_4           = dword ptr -4
.text:00009B74 this            = dword ptr  8
.text:00009B74
.text:00009B74                 push    ebp
.text:00009B75                 mov     ebp, esp
.text:00009B77                 push    ecx
.text:00009B78                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009B7F                 mov     eax, [ebp+this]
.text:00009B82                 mov     ecx, [eax+30h]
.text:00009B85                 add     ecx, 1
.text:00009B88                 mov     [ebp+var_4], ecx
.text:00009B8B                 mov     edx, [ebp+this]
.text:00009B8E                 mov     eax, [ebp+var_4]
.text:00009B91                 mov     [edx+30h], eax
.text:00009B94                 mov     eax, [ebp+var_4]
.text:00009B97                 mov     esp, ebp
.text:00009B99                 pop     ebp
.text:00009B9A                 retn    4
.text:00009B9A ?AddRef@CFolderOutStream2@N7z@NArchive@@UAGKXZ endp
.text:00009B9A
.text:00009B9A ; ---------------------------------------------------------------------------
.text:00009B9D                 align 10h
.text:00009B9D _text           ends
.text:00009B9D
.text:00009BA0 ; ===========================================================================
.text:00009BA0
.text:00009BA0 ; Segment type: Pure code
.text:00009BA0 ; Segment permissions: Read/Execute
.text:00009BA0 _text           segment para public 'CODE' use32
.text:00009BA0                 assume cs:_text
.text:00009BA0                 ;org 9BA0h
.text:00009BA0 ; COMDAT (pick any)
.text:00009BA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009BA0
.text:00009BA0 ; =============== S U B R O U T I N E =======================================
.text:00009BA0
.text:00009BA0 ; Attributes: bp-based frame
.text:00009BA0
.text:00009BA0 ; unsigned __int32 __stdcall NArchive::N7z::CFolderOutStream2::Release(NArchive::N7z::CFolderOutStream2 *this)
.text:00009BA0                 public ?Release@CFolderOutStream2@N7z@NArchive@@UAGKXZ
.text:00009BA0 ?Release@CFolderOutStream2@N7z@NArchive@@UAGKXZ proc near
.text:00009BA0                                         ; DATA XREF: .rdata:00009A10o
.text:00009BA0
.text:00009BA0 var_10          = dword ptr -10h
.text:00009BA0 var_C           = dword ptr -0Ch
.text:00009BA0 var_8           = dword ptr -8
.text:00009BA0 var_4           = dword ptr -4
.text:00009BA0 this            = dword ptr  8
.text:00009BA0
.text:00009BA0                 push    ebp
.text:00009BA1                 mov     ebp, esp
.text:00009BA3                 sub     esp, 10h
.text:00009BA6                 mov     eax, 0CCCCCCCCh
.text:00009BAB                 mov     [ebp+var_10], eax
.text:00009BAE                 mov     [ebp+var_C], eax
.text:00009BB1                 mov     [ebp+var_8], eax
.text:00009BB4                 mov     [ebp+var_4], eax
.text:00009BB7                 mov     eax, [ebp+this]
.text:00009BBA                 mov     ecx, [eax+30h]
.text:00009BBD                 sub     ecx, 1
.text:00009BC0                 mov     [ebp+var_C], ecx
.text:00009BC3                 mov     edx, [ebp+this]
.text:00009BC6                 mov     eax, [ebp+var_C]
.text:00009BC9                 mov     [edx+30h], eax
.text:00009BCC                 cmp     [ebp+var_C], 0
.text:00009BD0                 jz      short loc_9BDA
.text:00009BD2                 mov     ecx, [ebp+this]
.text:00009BD5                 mov     eax, [ecx+30h]
.text:00009BD8                 jmp     short loc_9C04
.text:00009BDA ; ---------------------------------------------------------------------------
.text:00009BDA
.text:00009BDA loc_9BDA:                               ; CODE XREF: NArchive::N7z::CFolderOutStream2::Release(void)+30j
.text:00009BDA                 mov     edx, [ebp+this]
.text:00009BDD                 mov     [ebp+var_8], edx
.text:00009BE0                 mov     eax, [ebp+var_8]
.text:00009BE3                 mov     [ebp+var_4], eax
.text:00009BE6                 cmp     [ebp+var_4], 0
.text:00009BEA                 jz      short loc_9BFB
.text:00009BEC                 push    1
.text:00009BEE                 mov     ecx, [ebp+var_4]
.text:00009BF1                 call    ??_GCFolderOutStream2@N7z@NArchive@@QAEPAXI@Z ; NArchive::N7z::CFolderOutStream2::`scalar deleting destructor'(uint)
.text:00009BF6                 mov     [ebp+var_10], eax
.text:00009BF9                 jmp     short loc_9C02
.text:00009BFB ; ---------------------------------------------------------------------------
.text:00009BFB
.text:00009BFB loc_9BFB:                               ; CODE XREF: NArchive::N7z::CFolderOutStream2::Release(void)+4Aj
.text:00009BFB                 mov     [ebp+var_10], 0
.text:00009C02
.text:00009C02 loc_9C02:                               ; CODE XREF: NArchive::N7z::CFolderOutStream2::Release(void)+59j
.text:00009C02                 xor     eax, eax
.text:00009C04
.text:00009C04 loc_9C04:                               ; CODE XREF: NArchive::N7z::CFolderOutStream2::Release(void)+38j
.text:00009C04                 add     esp, 10h
.text:00009C07                 cmp     ebp, esp
.text:00009C09                 call    __RTC_CheckEsp
.text:00009C0E                 mov     esp, ebp
.text:00009C10                 pop     ebp
.text:00009C11                 retn    4
.text:00009C11 ?Release@CFolderOutStream2@N7z@NArchive@@UAGKXZ endp
.text:00009C11
.text:00009C11 _text           ends
.text:00009C11
.text:00009C14 ; ===========================================================================
.text:00009C14
.text:00009C14 ; Segment type: Pure code
.text:00009C14 ; Segment permissions: Read/Execute
.text:00009C14 _text           segment para public 'CODE' use32
.text:00009C14                 assume cs:_text
.text:00009C14                 ;org 9C14h
.text:00009C14 ; COMDAT (pick any)
.text:00009C14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009C14
.text:00009C14 ; =============== S U B R O U T I N E =======================================
.text:00009C14
.text:00009C14 ; Attributes: bp-based frame
.text:00009C14
.text:00009C14 ; public: void * __thiscall NArchive::N7z::CFolderOutStream2::`scalar deleting destructor'(unsigned int)
.text:00009C14                 public ??_GCFolderOutStream2@N7z@NArchive@@QAEPAXI@Z
.text:00009C14 ??_GCFolderOutStream2@N7z@NArchive@@QAEPAXI@Z proc near
.text:00009C14                                         ; CODE XREF: NArchive::N7z::CFolderOutStream2::Release(void)+51p
.text:00009C14
.text:00009C14 var_4           = dword ptr -4
.text:00009C14 arg_0           = dword ptr  8
.text:00009C14
.text:00009C14                 push    ebp
.text:00009C15                 mov     ebp, esp
.text:00009C17                 push    ecx
.text:00009C18                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009C1F                 mov     [ebp+var_4], ecx
.text:00009C22                 mov     ecx, [ebp+var_4] ; this
.text:00009C25                 call    ??1CFolderOutStream2@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFolderOutStream2::~CFolderOutStream2(void)
.text:00009C2A                 mov     eax, [ebp+arg_0]
.text:00009C2D                 and     eax, 1
.text:00009C30                 jz      short loc_9C3E
.text:00009C32                 mov     ecx, [ebp+var_4]
.text:00009C35                 push    ecx             ; void *
.text:00009C36                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00009C3B                 add     esp, 4
.text:00009C3E
.text:00009C3E loc_9C3E:                               ; CODE XREF: NArchive::N7z::CFolderOutStream2::`scalar deleting destructor'(uint)+1Cj
.text:00009C3E                 mov     eax, [ebp+var_4]
.text:00009C41                 add     esp, 4
.text:00009C44                 cmp     ebp, esp
.text:00009C46                 call    __RTC_CheckEsp
.text:00009C4B                 mov     esp, ebp
.text:00009C4D                 pop     ebp
.text:00009C4E                 retn    4
.text:00009C4E ??_GCFolderOutStream2@N7z@NArchive@@QAEPAXI@Z endp
.text:00009C4E
.text:00009C4E ; ---------------------------------------------------------------------------
.text:00009C51                 align 4
.text:00009C51 _text           ends
.text:00009C51
.text:00009C54 ; ===========================================================================
.text:00009C54
.text:00009C54 ; Segment type: Pure code
.text:00009C54 ; Segment permissions: Read/Execute
.text:00009C54 _text           segment para public 'CODE' use32
.text:00009C54                 assume cs:_text
.text:00009C54                 ;org 9C54h
.text:00009C54 ; COMDAT (pick any)
.text:00009C54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009C54
.text:00009C54 ; =============== S U B R O U T I N E =======================================
.text:00009C54
.text:00009C54 ; Attributes: bp-based frame
.text:00009C54
.text:00009C54 ; _DWORD __thiscall NArchive::N7z::CFolderOutStream2::~CFolderOutStream2(NArchive::N7z::CFolderOutStream2 *__hidden this)
.text:00009C54                 public ??1CFolderOutStream2@N7z@NArchive@@QAE@XZ
.text:00009C54 ??1CFolderOutStream2@N7z@NArchive@@QAE@XZ proc near
.text:00009C54                                         ; CODE XREF: NArchive::N7z::CFolderOutStream2::`scalar deleting destructor'(uint)+11p
.text:00009C54
.text:00009C54 var_10          = dword ptr -10h
.text:00009C54 var_C           = dword ptr -0Ch
.text:00009C54 var_4           = dword ptr -4
.text:00009C54
.text:00009C54                 push    ebp
.text:00009C55                 mov     ebp, esp
.text:00009C57                 push    0FFFFFFFFh
.text:00009C59                 push    offset __ehhandler$??1CFolderOutStream2@N7z@NArchive@@QAE@XZ
.text:00009C5E                 mov     eax, large fs:0
.text:00009C64                 push    eax
.text:00009C65                 push    ecx
.text:00009C66                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00009C6D                 mov     eax, dword ptr ds:___security_cookie
.text:00009C72                 xor     eax, ebp
.text:00009C74                 push    eax
.text:00009C75                 lea     eax, [ebp+var_C]
.text:00009C78                 mov     large fs:0, eax
.text:00009C7E                 mov     [ebp+var_10], ecx
.text:00009C81                 mov     [ebp+var_4], 0
.text:00009C88                 mov     ecx, [ebp+var_10]
.text:00009C8B                 add     ecx, 34h ; '4'
.text:00009C8E                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00009C93                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00009C9A                 mov     ecx, [ebp+var_10]
.text:00009C9D                 add     ecx, 8          ; this
.text:00009CA0                 call    ??1CRepackStreamBase@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CRepackStreamBase::~CRepackStreamBase(void)
.text:00009CA5                 mov     ecx, [ebp+var_C]
.text:00009CA8                 mov     large fs:0, ecx
.text:00009CAF                 pop     ecx
.text:00009CB0                 add     esp, 10h
.text:00009CB3                 cmp     ebp, esp
.text:00009CB5                 call    __RTC_CheckEsp
.text:00009CBA                 mov     esp, ebp
.text:00009CBC                 pop     ebp
.text:00009CBD                 retn
.text:00009CBD ??1CFolderOutStream2@N7z@NArchive@@QAE@XZ endp
.text:00009CBD
.text:00009CBD ; ---------------------------------------------------------------------------
.text:00009CBE                 align 10h
.text:00009CBE _text           ends
.text:00009CBE
.text$x:00009CC0 ; ===========================================================================
.text$x:00009CC0
.text$x:00009CC0 ; Segment type: Pure code
.text$x:00009CC0 ; Segment permissions: Read/Execute
.text$x:00009CC0 _text$x         segment para public 'CODE' use32
.text$x:00009CC0                 assume cs:_text$x
.text$x:00009CC0                 ;org 9CC0h
.text$x:00009CC0 ; COMDAT (pick associative to section at 9C54)
.text$x:00009CC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00009CC0
.text$x:00009CC0 ; =============== S U B R O U T I N E =======================================
.text$x:00009CC0
.text$x:00009CC0
.text$x:00009CC0 __unwindfunclet$??1CFolderOutStream2@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:00009CC0                                         ; DATA XREF: .xdata$x:00009CECo
.text$x:00009CC0                 mov     ecx, [ebp-10h]
.text$x:00009CC3                 add     ecx, 8          ; this
.text$x:00009CC6                 jmp     ??1CRepackStreamBase@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CRepackStreamBase::~CRepackStreamBase(void)
.text$x:00009CC6 __unwindfunclet$??1CFolderOutStream2@N7z@NArchive@@QAE@XZ$0 endp
.text$x:00009CC6
.text$x:00009CCB
.text$x:00009CCB ; =============== S U B R O U T I N E =======================================
.text$x:00009CCB
.text$x:00009CCB
.text$x:00009CCB __ehhandler$??1CFolderOutStream2@N7z@NArchive@@QAE@XZ proc near
.text$x:00009CCB                                         ; DATA XREF: NArchive::N7z::CFolderOutStream2::~CFolderOutStream2(void)+5o
.text$x:00009CCB
.text$x:00009CCB arg_4           = dword ptr  8
.text$x:00009CCB
.text$x:00009CCB                 mov     edx, [esp+arg_4]
.text$x:00009CCF                 lea     eax, [edx+0Ch]
.text$x:00009CD2                 mov     ecx, [edx-8]
.text$x:00009CD5                 xor     ecx, eax
.text$x:00009CD7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00009CDC                 mov     eax, offset __ehfuncinfo$??1CFolderOutStream2@N7z@NArchive@@QAE@XZ
.text$x:00009CE1                 jmp     ___CxxFrameHandler3
.text$x:00009CE1 __ehhandler$??1CFolderOutStream2@N7z@NArchive@@QAE@XZ endp
.text$x:00009CE1
.text$x:00009CE1 ; ---------------------------------------------------------------------------
.text$x:00009CE6                 align 4
.text$x:00009CE6 _text$x         ends
.text$x:00009CE6
.xdata$x:00009CE8 ; ===========================================================================
.xdata$x:00009CE8
.xdata$x:00009CE8 ; Segment type: Pure data
.xdata$x:00009CE8 ; Segment permissions: Read
.xdata$x:00009CE8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009CE8                 assume cs:_xdata$x
.xdata$x:00009CE8                 ;org 9CE8h
.xdata$x:00009CE8 ; COMDAT (pick associative to section at 9C54)
.xdata$x:00009CE8 __unwindtable$??1CFolderOutStream2@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:00009CE8                                         ; DATA XREF: .xdata$x:00009CF8o
.xdata$x:00009CE9                 db 0FFh
.xdata$x:00009CEA                 db 0FFh
.xdata$x:00009CEB                 db 0FFh
.xdata$x:00009CEC                 dd offset __unwindfunclet$??1CFolderOutStream2@N7z@NArchive@@QAE@XZ$0
.xdata$x:00009CF0 __ehfuncinfo$??1CFolderOutStream2@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00009CF0                                         ; DATA XREF: __ehhandler$??1CFolderOutStream2@N7z@NArchive@@QAE@XZ+11o
.xdata$x:00009CF1                 db    5
.xdata$x:00009CF2                 db  93h ; ô
.xdata$x:00009CF3                 db  19h
.xdata$x:00009CF4                 db    1
.xdata$x:00009CF5                 db    0
.xdata$x:00009CF6                 db    0
.xdata$x:00009CF7                 db    0
.xdata$x:00009CF8                 dd offset __unwindtable$??1CFolderOutStream2@N7z@NArchive@@QAE@XZ
.xdata$x:00009CFC                 db    0
.xdata$x:00009CFD                 db    0
.xdata$x:00009CFE                 db    0
.xdata$x:00009CFF                 db    0
.xdata$x:00009D00                 db    0
.xdata$x:00009D01                 db    0
.xdata$x:00009D02                 db    0
.xdata$x:00009D03                 db    0
.xdata$x:00009D04                 db    0
.xdata$x:00009D05                 db    0
.xdata$x:00009D06                 db    0
.xdata$x:00009D07                 db    0
.xdata$x:00009D08                 db    0
.xdata$x:00009D09                 db    0
.xdata$x:00009D0A                 db    0
.xdata$x:00009D0B                 db    0
.xdata$x:00009D0C                 db    0
.xdata$x:00009D0D                 db    0
.xdata$x:00009D0E                 db    0
.xdata$x:00009D0F                 db    0
.xdata$x:00009D10                 db    1
.xdata$x:00009D11                 db    0
.xdata$x:00009D12                 db    0
.xdata$x:00009D13                 db    0
.xdata$x:00009D13 _xdata$x        ends
.xdata$x:00009D13
.text:00009D14 ; ===========================================================================
.text:00009D14
.text:00009D14 ; Segment type: Pure code
.text:00009D14 ; Segment permissions: Read/Execute
.text:00009D14 _text           segment para public 'CODE' use32
.text:00009D14                 assume cs:_text
.text:00009D14                 ;org 9D14h
.text:00009D14 ; COMDAT (pick any)
.text:00009D14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009D14
.text:00009D14 ; =============== S U B R O U T I N E =======================================
.text:00009D14
.text:00009D14 ; Attributes: bp-based frame
.text:00009D14
.text:00009D14 ; _DWORD __thiscall NArchive::N7z::CBindInfoEx::~CBindInfoEx(NArchive::N7z::CBindInfoEx *__hidden this)
.text:00009D14                 public ??1CBindInfoEx@N7z@NArchive@@QAE@XZ
.text:00009D14 ??1CBindInfoEx@N7z@NArchive@@QAE@XZ proc near
.text:00009D14                                         ; CODE XREF: NArchive::N7z::CDecoder::~CDecoder(void)+4Cp
.text:00009D14                                         ; __unwindfunclet$??1CDecoder@N7z@NArchive@@QAE@XZ$0+6j
.text:00009D14
.text:00009D14 var_10          = dword ptr -10h
.text:00009D14 var_C           = dword ptr -0Ch
.text:00009D14 var_4           = dword ptr -4
.text:00009D14
.text:00009D14                 push    ebp
.text:00009D15                 mov     ebp, esp
.text:00009D17                 push    0FFFFFFFFh
.text:00009D19                 push    offset __ehhandler$??1CBindInfoEx@N7z@NArchive@@QAE@XZ
.text:00009D1E                 mov     eax, large fs:0
.text:00009D24                 push    eax
.text:00009D25                 push    ecx
.text:00009D26                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00009D2D                 mov     eax, dword ptr ds:___security_cookie
.text:00009D32                 xor     eax, ebp
.text:00009D34                 push    eax
.text:00009D35                 lea     eax, [ebp+var_C]
.text:00009D38                 mov     large fs:0, eax
.text:00009D3E                 mov     [ebp+var_10], ecx
.text:00009D41                 mov     [ebp+var_4], 0
.text:00009D48                 mov     ecx, [ebp+var_10]
.text:00009D4B                 add     ecx, 40h ; '@'
.text:00009D4E                 call    ??1?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text:00009D53                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00009D5A                 mov     ecx, [ebp+var_10] ; this
.text:00009D5D                 call    ??1CBindInfo@NCoderMixer2@@QAE@XZ ; NCoderMixer2::CBindInfo::~CBindInfo(void)
.text:00009D62                 mov     ecx, [ebp+var_C]
.text:00009D65                 mov     large fs:0, ecx
.text:00009D6C                 pop     ecx
.text:00009D6D                 add     esp, 10h
.text:00009D70                 cmp     ebp, esp
.text:00009D72                 call    __RTC_CheckEsp
.text:00009D77                 mov     esp, ebp
.text:00009D79                 pop     ebp
.text:00009D7A                 retn
.text:00009D7A ??1CBindInfoEx@N7z@NArchive@@QAE@XZ endp
.text:00009D7A
.text:00009D7A ; ---------------------------------------------------------------------------
.text:00009D7B                 align 4
.text:00009D7B _text           ends
.text:00009D7B
.text$x:00009D7C ; ===========================================================================
.text$x:00009D7C
.text$x:00009D7C ; Segment type: Pure code
.text$x:00009D7C ; Segment permissions: Read/Execute
.text$x:00009D7C _text$x         segment para public 'CODE' use32
.text$x:00009D7C                 assume cs:_text$x
.text$x:00009D7C                 ;org 9D7Ch
.text$x:00009D7C ; COMDAT (pick associative to section at 9D14)
.text$x:00009D7C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00009D7C
.text$x:00009D7C ; =============== S U B R O U T I N E =======================================
.text$x:00009D7C
.text$x:00009D7C
.text$x:00009D7C __unwindfunclet$??1CBindInfoEx@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:00009D7C                                         ; DATA XREF: .xdata$x:00009DA4o
.text$x:00009D7C                 mov     ecx, [ebp-10h]  ; this
.text$x:00009D7F                 jmp     ??1CBindInfo@NCoderMixer2@@QAE@XZ ; NCoderMixer2::CBindInfo::~CBindInfo(void)
.text$x:00009D7F __unwindfunclet$??1CBindInfoEx@N7z@NArchive@@QAE@XZ$0 endp
.text$x:00009D7F
.text$x:00009D84
.text$x:00009D84 ; =============== S U B R O U T I N E =======================================
.text$x:00009D84
.text$x:00009D84
.text$x:00009D84 __ehhandler$??1CBindInfoEx@N7z@NArchive@@QAE@XZ proc near
.text$x:00009D84                                         ; DATA XREF: NArchive::N7z::CBindInfoEx::~CBindInfoEx(void)+5o
.text$x:00009D84
.text$x:00009D84 arg_4           = dword ptr  8
.text$x:00009D84
.text$x:00009D84                 mov     edx, [esp+arg_4]
.text$x:00009D88                 lea     eax, [edx+0Ch]
.text$x:00009D8B                 mov     ecx, [edx-8]
.text$x:00009D8E                 xor     ecx, eax
.text$x:00009D90                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00009D95                 mov     eax, offset __ehfuncinfo$??1CBindInfoEx@N7z@NArchive@@QAE@XZ
.text$x:00009D9A                 jmp     ___CxxFrameHandler3
.text$x:00009D9A __ehhandler$??1CBindInfoEx@N7z@NArchive@@QAE@XZ endp
.text$x:00009D9A
.text$x:00009D9A ; ---------------------------------------------------------------------------
.text$x:00009D9F                 align 10h
.text$x:00009D9F _text$x         ends
.text$x:00009D9F
.xdata$x:00009DA0 ; ===========================================================================
.xdata$x:00009DA0
.xdata$x:00009DA0 ; Segment type: Pure data
.xdata$x:00009DA0 ; Segment permissions: Read
.xdata$x:00009DA0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009DA0                 assume cs:_xdata$x
.xdata$x:00009DA0                 ;org 9DA0h
.xdata$x:00009DA0 ; COMDAT (pick associative to section at 9D14)
.xdata$x:00009DA0 __unwindtable$??1CBindInfoEx@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:00009DA0                                         ; DATA XREF: .xdata$x:00009DB0o
.xdata$x:00009DA1                 db 0FFh
.xdata$x:00009DA2                 db 0FFh
.xdata$x:00009DA3                 db 0FFh
.xdata$x:00009DA4                 dd offset __unwindfunclet$??1CBindInfoEx@N7z@NArchive@@QAE@XZ$0
.xdata$x:00009DA8 __ehfuncinfo$??1CBindInfoEx@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00009DA8                                         ; DATA XREF: __ehhandler$??1CBindInfoEx@N7z@NArchive@@QAE@XZ+11o
.xdata$x:00009DA9                 db    5
.xdata$x:00009DAA                 db  93h ; ô
.xdata$x:00009DAB                 db  19h
.xdata$x:00009DAC                 db    1
.xdata$x:00009DAD                 db    0
.xdata$x:00009DAE                 db    0
.xdata$x:00009DAF                 db    0
.xdata$x:00009DB0                 dd offset __unwindtable$??1CBindInfoEx@N7z@NArchive@@QAE@XZ
.xdata$x:00009DB4                 db    0
.xdata$x:00009DB5                 db    0
.xdata$x:00009DB6                 db    0
.xdata$x:00009DB7                 db    0
.xdata$x:00009DB8                 db    0
.xdata$x:00009DB9                 db    0
.xdata$x:00009DBA                 db    0
.xdata$x:00009DBB                 db    0
.xdata$x:00009DBC                 db    0
.xdata$x:00009DBD                 db    0
.xdata$x:00009DBE                 db    0
.xdata$x:00009DBF                 db    0
.xdata$x:00009DC0                 db    0
.xdata$x:00009DC1                 db    0
.xdata$x:00009DC2                 db    0
.xdata$x:00009DC3                 db    0
.xdata$x:00009DC4                 db    0
.xdata$x:00009DC5                 db    0
.xdata$x:00009DC6                 db    0
.xdata$x:00009DC7                 db    0
.xdata$x:00009DC8                 db    1
.xdata$x:00009DC9                 db    0
.xdata$x:00009DCA                 db    0
.xdata$x:00009DCB                 db    0
.xdata$x:00009DCB _xdata$x        ends
.xdata$x:00009DCB
.text:00009DCC ; ===========================================================================
.text:00009DCC
.text:00009DCC ; Segment type: Pure code
.text:00009DCC ; Segment permissions: Read/Execute
.text:00009DCC _text           segment para public 'CODE' use32
.text:00009DCC                 assume cs:_text
.text:00009DCC                 ;org 9DCCh
.text:00009DCC ; COMDAT (pick any)
.text:00009DCC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009DCC
.text:00009DCC ; =============== S U B R O U T I N E =======================================
.text:00009DCC
.text:00009DCC ; Attributes: bp-based frame
.text:00009DCC
.text:00009DCC ; _DWORD __thiscall NCoderMixer2::CBindInfo::~CBindInfo(NCoderMixer2::CBindInfo *__hidden this)
.text:00009DCC                 public ??1CBindInfo@NCoderMixer2@@QAE@XZ
.text:00009DCC ??1CBindInfo@NCoderMixer2@@QAE@XZ proc near
.text:00009DCC                                         ; CODE XREF: NArchive::N7z::CBindInfoEx::~CBindInfoEx(void)+49p
.text:00009DCC                                         ; __unwindfunclet$??1CBindInfoEx@N7z@NArchive@@QAE@XZ$0+3j
.text:00009DCC
.text:00009DCC var_10          = dword ptr -10h
.text:00009DCC var_C           = dword ptr -0Ch
.text:00009DCC var_4           = dword ptr -4
.text:00009DCC
.text:00009DCC                 push    ebp
.text:00009DCD                 mov     ebp, esp
.text:00009DCF                 push    0FFFFFFFFh
.text:00009DD1                 push    offset __ehhandler$??1CBindInfo@NCoderMixer2@@QAE@XZ
.text:00009DD6                 mov     eax, large fs:0
.text:00009DDC                 push    eax
.text:00009DDD                 push    ecx
.text:00009DDE                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00009DE5                 mov     eax, dword ptr ds:___security_cookie
.text:00009DEA                 xor     eax, ebp
.text:00009DEC                 push    eax
.text:00009DED                 lea     eax, [ebp+var_C]
.text:00009DF0                 mov     large fs:0, eax
.text:00009DF6                 mov     [ebp+var_10], ecx
.text:00009DF9                 mov     [ebp+var_4], 3
.text:00009E00                 mov     ecx, [ebp+var_10]
.text:00009E03                 add     ecx, 34h ; '4'
.text:00009E06                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00009E0B                 mov     byte ptr [ebp+var_4], 2
.text:00009E0F                 mov     ecx, [ebp+var_10]
.text:00009E12                 add     ecx, 28h ; '('
.text:00009E15                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00009E1A                 mov     byte ptr [ebp+var_4], 1
.text:00009E1E                 mov     ecx, [ebp+var_10]
.text:00009E21                 add     ecx, 18h
.text:00009E24                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00009E29                 mov     byte ptr [ebp+var_4], 0
.text:00009E2D                 mov     ecx, [ebp+var_10]
.text:00009E30                 add     ecx, 0Ch
.text:00009E33                 call    ??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CBond>::~CRecordVector<NCoderMixer2::CBond>(void)
.text:00009E38                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00009E3F                 mov     ecx, [ebp+var_10]
.text:00009E42                 call    ??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::~CRecordVector<NCoderMixer2::CCoderStreamsInfo>(void)
.text:00009E47                 mov     ecx, [ebp+var_C]
.text:00009E4A                 mov     large fs:0, ecx
.text:00009E51                 pop     ecx
.text:00009E52                 add     esp, 10h
.text:00009E55                 cmp     ebp, esp
.text:00009E57                 call    __RTC_CheckEsp
.text:00009E5C                 mov     esp, ebp
.text:00009E5E                 pop     ebp
.text:00009E5F                 retn
.text:00009E5F ??1CBindInfo@NCoderMixer2@@QAE@XZ endp
.text:00009E5F
.text:00009E5F _text           ends
.text:00009E5F
.text$x:00009E60 ; ===========================================================================
.text$x:00009E60
.text$x:00009E60 ; Segment type: Pure code
.text$x:00009E60 ; Segment permissions: Read/Execute
.text$x:00009E60 _text$x         segment para public 'CODE' use32
.text$x:00009E60                 assume cs:_text$x
.text$x:00009E60                 ;org 9E60h
.text$x:00009E60 ; COMDAT (pick associative to section at 9DCC)
.text$x:00009E60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00009E60
.text$x:00009E60 ; =============== S U B R O U T I N E =======================================
.text$x:00009E60
.text$x:00009E60
.text$x:00009E60 __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$0 proc near
.text$x:00009E60                                         ; DATA XREF: .xdata$x:00009EA8o
.text$x:00009E60                 mov     ecx, [ebp-10h]
.text$x:00009E63                 jmp     ??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::~CRecordVector<NCoderMixer2::CCoderStreamsInfo>(void)
.text$x:00009E63 __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$0 endp
.text$x:00009E63
.text$x:00009E68
.text$x:00009E68 ; =============== S U B R O U T I N E =======================================
.text$x:00009E68
.text$x:00009E68
.text$x:00009E68 __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$1 proc near
.text$x:00009E68                                         ; DATA XREF: .xdata$x:00009EB0o
.text$x:00009E68                 mov     ecx, [ebp-10h]
.text$x:00009E6B                 add     ecx, 0Ch
.text$x:00009E6E                 jmp     ??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CBond>::~CRecordVector<NCoderMixer2::CBond>(void)
.text$x:00009E6E __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$1 endp
.text$x:00009E6E
.text$x:00009E73
.text$x:00009E73 ; =============== S U B R O U T I N E =======================================
.text$x:00009E73
.text$x:00009E73
.text$x:00009E73 __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$2 proc near
.text$x:00009E73                                         ; DATA XREF: .xdata$x:00009EB8o
.text$x:00009E73                 mov     ecx, [ebp-10h]
.text$x:00009E76                 add     ecx, 18h
.text$x:00009E79                 jmp     ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text$x:00009E79 __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$2 endp
.text$x:00009E79
.text$x:00009E7E
.text$x:00009E7E ; =============== S U B R O U T I N E =======================================
.text$x:00009E7E
.text$x:00009E7E
.text$x:00009E7E __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$3 proc near
.text$x:00009E7E                                         ; DATA XREF: .xdata$x:00009EC0o
.text$x:00009E7E                 mov     ecx, [ebp-10h]
.text$x:00009E81                 add     ecx, 28h ; '('
.text$x:00009E84                 jmp     ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text$x:00009E84 __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$3 endp
.text$x:00009E84
.text$x:00009E89
.text$x:00009E89 ; =============== S U B R O U T I N E =======================================
.text$x:00009E89
.text$x:00009E89
.text$x:00009E89 __ehhandler$??1CBindInfo@NCoderMixer2@@QAE@XZ proc near
.text$x:00009E89                                         ; DATA XREF: NCoderMixer2::CBindInfo::~CBindInfo(void)+5o
.text$x:00009E89
.text$x:00009E89 arg_4           = dword ptr  8
.text$x:00009E89
.text$x:00009E89                 mov     edx, [esp+arg_4]
.text$x:00009E8D                 lea     eax, [edx+0Ch]
.text$x:00009E90                 mov     ecx, [edx-8]
.text$x:00009E93                 xor     ecx, eax
.text$x:00009E95                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00009E9A                 mov     eax, offset __ehfuncinfo$??1CBindInfo@NCoderMixer2@@QAE@XZ
.text$x:00009E9F                 jmp     ___CxxFrameHandler3
.text$x:00009E9F __ehhandler$??1CBindInfo@NCoderMixer2@@QAE@XZ endp
.text$x:00009E9F
.text$x:00009E9F _text$x         ends
.text$x:00009E9F
.xdata$x:00009EA4 ; ===========================================================================
.xdata$x:00009EA4
.xdata$x:00009EA4 ; Segment type: Pure data
.xdata$x:00009EA4 ; Segment permissions: Read
.xdata$x:00009EA4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009EA4                 assume cs:_xdata$x
.xdata$x:00009EA4                 ;org 9EA4h
.xdata$x:00009EA4 ; COMDAT (pick associative to section at 9DCC)
.xdata$x:00009EA4 __unwindtable$??1CBindInfo@NCoderMixer2@@QAE@XZ db 0FFh
.xdata$x:00009EA4                                         ; DATA XREF: .xdata$x:00009ECCo
.xdata$x:00009EA5                 db 0FFh
.xdata$x:00009EA6                 db 0FFh
.xdata$x:00009EA7                 db 0FFh
.xdata$x:00009EA8                 dd offset __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$0
.xdata$x:00009EAC                 align 10h
.xdata$x:00009EB0                 dd offset __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$1
.xdata$x:00009EB4                 db    1
.xdata$x:00009EB5                 db    0
.xdata$x:00009EB6                 db    0
.xdata$x:00009EB7                 db    0
.xdata$x:00009EB8                 dd offset __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$2
.xdata$x:00009EBC                 db    2
.xdata$x:00009EBD                 db    0
.xdata$x:00009EBE                 db    0
.xdata$x:00009EBF                 db    0
.xdata$x:00009EC0                 dd offset __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$3
.xdata$x:00009EC4 __ehfuncinfo$??1CBindInfo@NCoderMixer2@@QAE@XZ db  22h ; "
.xdata$x:00009EC4                                         ; DATA XREF: __ehhandler$??1CBindInfo@NCoderMixer2@@QAE@XZ+11o
.xdata$x:00009EC5                 db    5
.xdata$x:00009EC6                 db  93h ; ô
.xdata$x:00009EC7                 db  19h
.xdata$x:00009EC8                 db    4
.xdata$x:00009EC9                 db    0
.xdata$x:00009ECA                 db    0
.xdata$x:00009ECB                 db    0
.xdata$x:00009ECC                 dd offset __unwindtable$??1CBindInfo@NCoderMixer2@@QAE@XZ
.xdata$x:00009ED0                 db    0
.xdata$x:00009ED1                 db    0
.xdata$x:00009ED2                 db    0
.xdata$x:00009ED3                 db    0
.xdata$x:00009ED4                 db    0
.xdata$x:00009ED5                 db    0
.xdata$x:00009ED6                 db    0
.xdata$x:00009ED7                 db    0
.xdata$x:00009ED8                 db    0
.xdata$x:00009ED9                 db    0
.xdata$x:00009EDA                 db    0
.xdata$x:00009EDB                 db    0
.xdata$x:00009EDC                 db    0
.xdata$x:00009EDD                 db    0
.xdata$x:00009EDE                 db    0
.xdata$x:00009EDF                 db    0
.xdata$x:00009EE0                 db    0
.xdata$x:00009EE1                 db    0
.xdata$x:00009EE2                 db    0
.xdata$x:00009EE3                 db    0
.xdata$x:00009EE4                 db    1
.xdata$x:00009EE5                 db    0
.xdata$x:00009EE6                 db    0
.xdata$x:00009EE7                 db    0
.xdata$x:00009EE7 _xdata$x        ends
.xdata$x:00009EE7
.text:00009EE8 ; ===========================================================================
.text:00009EE8
.text:00009EE8 ; Segment type: Pure code
.text:00009EE8 ; Segment permissions: Read/Execute
.text:00009EE8 _text           segment para public 'CODE' use32
.text:00009EE8                 assume cs:_text
.text:00009EE8                 ;org 9EE8h
.text:00009EE8 ; COMDAT (pick any)
.text:00009EE8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009EE8
.text:00009EE8 ; =============== S U B R O U T I N E =======================================
.text:00009EE8
.text:00009EE8 ; Attributes: bp-based frame
.text:00009EE8
.text:00009EE8 ; _DWORD __thiscall ISequentialOutStream::ISequentialOutStream(ISequentialOutStream *__hidden this)
.text:00009EE8                 public ??0ISequentialOutStream@@QAE@XZ
.text:00009EE8 ??0ISequentialOutStream@@QAE@XZ proc near
.text:00009EE8                                         ; CODE XREF: NArchive::N7z::CFolderOutStream2::CFolderOutStream2(void)+42p
.text:00009EE8
.text:00009EE8 var_4           = dword ptr -4
.text:00009EE8
.text:00009EE8                 push    ebp
.text:00009EE9                 mov     ebp, esp
.text:00009EEB                 push    ecx
.text:00009EEC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009EF3                 mov     [ebp+var_4], ecx
.text:00009EF6                 mov     ecx, [ebp+var_4]
.text:00009EF9                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00009EFE                 mov     eax, [ebp+var_4]
.text:00009F01                 mov     dword ptr [eax], offset ??_7ISequentialOutStream@@6B@ ; const ISequentialOutStream::`vftable'
.text:00009F07                 mov     eax, [ebp+var_4]
.text:00009F0A                 add     esp, 4
.text:00009F0D                 cmp     ebp, esp
.text:00009F0F                 call    __RTC_CheckEsp
.text:00009F14                 mov     esp, ebp
.text:00009F16                 pop     ebp
.text:00009F17                 retn
.text:00009F17 ??0ISequentialOutStream@@QAE@XZ endp
.text:00009F17
.text:00009F17 _text           ends
.text:00009F17
.rdata:00009F18 ; ===========================================================================
.rdata:00009F18
.rdata:00009F18 ; Segment type: Pure data
.rdata:00009F18 ; Segment permissions: Read
.rdata:00009F18 _rdata          segment dword public 'DATA' use32
.rdata:00009F18                 assume cs:_rdata
.rdata:00009F18                 ;org 9F18h
.rdata:00009F18 ; COMDAT (pick largest)
.rdata:00009F18                 dd offset ??_R4ISequentialOutStream@@6B@ ; const ISequentialOutStream::`RTTI Complete Object Locator'
.rdata:00009F1C                 public ??_7ISequentialOutStream@@6B@
.rdata:00009F1C ; const ISequentialOutStream::`vftable'
.rdata:00009F1C ??_7ISequentialOutStream@@6B@ dd offset __purecall
.rdata:00009F1C                                         ; DATA XREF: ISequentialOutStream::ISequentialOutStream(void)+19o
.rdata:00009F20                 dd offset __purecall
.rdata:00009F24                 dd offset __purecall
.rdata:00009F28                 dd offset __purecall
.rdata:00009F28 _rdata          ends
.rdata:00009F28
.rdata$r:00009F2C ; ===========================================================================
.rdata$r:00009F2C
.rdata$r:00009F2C ; Segment type: Pure data
.rdata$r:00009F2C ; Segment permissions: Read
.rdata$r:00009F2C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00009F2C                 assume cs:_rdata$r
.rdata$r:00009F2C                 ;org 9F2Ch
.rdata$r:00009F2C ; COMDAT (pick any)
.rdata$r:00009F2C                 public ??_R4ISequentialOutStream@@6B@
.rdata$r:00009F2C ; const ISequentialOutStream::`RTTI Complete Object Locator'
.rdata$r:00009F2C ??_R4ISequentialOutStream@@6B@ db    0  ; DATA XREF: .rdata:00009F18o
.rdata$r:00009F2D                 db    0
.rdata$r:00009F2E                 db    0
.rdata$r:00009F2F                 db    0
.rdata$r:00009F30                 db    0
.rdata$r:00009F31                 db    0
.rdata$r:00009F32                 db    0
.rdata$r:00009F33                 db    0
.rdata$r:00009F34                 db    0
.rdata$r:00009F35                 db    0
.rdata$r:00009F36                 db    0
.rdata$r:00009F37                 db    0
.rdata$r:00009F38                 dd offset ??_R0?AUISequentialOutStream@@@8 ; ISequentialOutStream `RTTI Type Descriptor'
.rdata$r:00009F3C                 dd offset ??_R3ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00009F3C _rdata$r        ends
.rdata$r:00009F3C
.text:00009F40 ; ===========================================================================
.text:00009F40
.text:00009F40 ; Segment type: Pure code
.text:00009F40 ; Segment permissions: Read/Execute
.text:00009F40 _text           segment para public 'CODE' use32
.text:00009F40                 assume cs:_text
.text:00009F40                 ;org 9F40h
.text:00009F40 ; COMDAT (pick any)
.text:00009F40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009F40
.text:00009F40 ; =============== S U B R O U T I N E =======================================
.text:00009F40
.text:00009F40 ; Attributes: bp-based frame
.text:00009F40
.text:00009F40 ; bool __thiscall NArchive::N7z::CUInt64DefVector::GetItem(NArchive::N7z::CUInt64DefVector *this, unsigned int, unsigned __int64 *)
.text:00009F40                 public ?GetItem@CUInt64DefVector@N7z@NArchive@@QBE_NIAA_K@Z
.text:00009F40 ?GetItem@CUInt64DefVector@N7z@NArchive@@QBE_NIAA_K@Z proc near
.text:00009F40                                         ; CODE XREF: NArchive::N7z::GetFile(NArchive::N7z::CDatabase const &,uint,NArchive::N7z::CFileItem &,NArchive::N7z::CFileItem2 &)+45p
.text:00009F40                                         ; NArchive::N7z::GetFile(NArchive::N7z::CDatabase const &,uint,NArchive::N7z::CFileItem &,NArchive::N7z::CFileItem2 &)+61p ...
.text:00009F40
.text:00009F40 var_4           = dword ptr -4
.text:00009F40 arg_0           = dword ptr  8
.text:00009F40 arg_4           = dword ptr  0Ch
.text:00009F40
.text:00009F40                 push    ebp
.text:00009F41                 mov     ebp, esp
.text:00009F43                 push    ecx
.text:00009F44                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009F4B                 mov     [ebp+var_4], ecx
.text:00009F4E                 mov     ecx, [ebp+var_4]
.text:00009F51                 call    ?Size@?$CRecordVector@_N@@QBEIXZ ; CRecordVector<bool>::Size(void)
.text:00009F56                 cmp     [ebp+arg_0], eax
.text:00009F59                 jnb     short loc_9F8E
.text:00009F5B                 mov     eax, [ebp+arg_0]
.text:00009F5E                 push    eax
.text:00009F5F                 mov     ecx, [ebp+var_4]
.text:00009F62                 call    ??A?$CRecordVector@_N@@QBEAB_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:00009F67                 movzx   ecx, byte ptr [eax]
.text:00009F6A                 test    ecx, ecx
.text:00009F6C                 jz      short loc_9F8E
.text:00009F6E                 mov     edx, [ebp+arg_0]
.text:00009F71                 push    edx
.text:00009F72                 mov     ecx, [ebp+var_4]
.text:00009F75                 add     ecx, 0Ch
.text:00009F78                 call    ??A?$CRecordVector@_K@@QBEAB_KI@Z ; CRecordVector<unsigned __int64>::operator[](uint)
.text:00009F7D                 mov     ecx, [ebp+arg_4]
.text:00009F80                 mov     edx, [eax]
.text:00009F82                 mov     [ecx], edx
.text:00009F84                 mov     eax, [eax+4]
.text:00009F87                 mov     [ecx+4], eax
.text:00009F8A                 mov     al, 1
.text:00009F8C                 jmp     short loc_9FA0
.text:00009F8E ; ---------------------------------------------------------------------------
.text:00009F8E
.text:00009F8E loc_9F8E:                               ; CODE XREF: NArchive::N7z::CUInt64DefVector::GetItem(uint,unsigned __int64 &)+19j
.text:00009F8E                                         ; NArchive::N7z::CUInt64DefVector::GetItem(uint,unsigned __int64 &)+2Cj
.text:00009F8E                 mov     ecx, [ebp+arg_4]
.text:00009F91                 mov     dword ptr [ecx], 0
.text:00009F97                 mov     dword ptr [ecx+4], 0
.text:00009F9E                 xor     al, al
.text:00009FA0
.text:00009FA0 loc_9FA0:                               ; CODE XREF: NArchive::N7z::CUInt64DefVector::GetItem(uint,unsigned __int64 &)+4Cj
.text:00009FA0                 add     esp, 4
.text:00009FA3                 cmp     ebp, esp
.text:00009FA5                 call    __RTC_CheckEsp
.text:00009FAA                 mov     esp, ebp
.text:00009FAC                 pop     ebp
.text:00009FAD                 retn    8
.text:00009FAD ?GetItem@CUInt64DefVector@N7z@NArchive@@QBE_NIAA_K@Z endp
.text:00009FAD
.text:00009FAD _text           ends
.text:00009FAD
.text:00009FB0 ; ===========================================================================
.text:00009FB0
.text:00009FB0 ; Segment type: Pure code
.text:00009FB0 ; Segment permissions: Read/Execute
.text:00009FB0 _text           segment para public 'CODE' use32
.text:00009FB0                 assume cs:_text
.text:00009FB0                 ;org 9FB0h
.text:00009FB0 ; COMDAT (pick any)
.text:00009FB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009FB0
.text:00009FB0 ; =============== S U B R O U T I N E =======================================
.text:00009FB0
.text:00009FB0 ; Attributes: bp-based frame
.text:00009FB0
.text:00009FB0 ; bool __thiscall NArchive::N7z::CDatabase::IsItemAnti(NArchive::N7z::CDatabase *this, unsigned int)
.text:00009FB0                 public ?IsItemAnti@CDatabase@N7z@NArchive@@QBE_NI@Z
.text:00009FB0 ?IsItemAnti@CDatabase@N7z@NArchive@@QBE_NI@Z proc near
.text:00009FB0                                         ; CODE XREF: NArchive::N7z::GetFile(NArchive::N7z::CDatabase const &,uint,NArchive::N7z::CFileItem &,NArchive::N7z::CFileItem2 &)+B1p
.text:00009FB0
.text:00009FB0 var_8           = dword ptr -8
.text:00009FB0 var_4           = dword ptr -4
.text:00009FB0 arg_0           = dword ptr  8
.text:00009FB0
.text:00009FB0                 push    ebp
.text:00009FB1                 mov     ebp, esp
.text:00009FB3                 sub     esp, 8
.text:00009FB6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00009FBD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009FC4                 mov     [ebp+var_4], ecx
.text:00009FC7                 mov     ecx, [ebp+var_4]
.text:00009FCA                 add     ecx, 0C4h ; '-'
.text:00009FD0                 call    ?Size@?$CRecordVector@_N@@QBEIXZ ; CRecordVector<bool>::Size(void)
.text:00009FD5                 cmp     [ebp+arg_0], eax
.text:00009FD8                 jnb     short loc_9FFC
.text:00009FDA                 mov     eax, [ebp+arg_0]
.text:00009FDD                 push    eax
.text:00009FDE                 mov     ecx, [ebp+var_4]
.text:00009FE1                 add     ecx, 0C4h ; '-'
.text:00009FE7                 call    ??A?$CRecordVector@_N@@QBEAB_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:00009FEC                 movzx   ecx, byte ptr [eax]
.text:00009FEF                 test    ecx, ecx
.text:00009FF1                 jz      short loc_9FFC
.text:00009FF3                 mov     [ebp+var_8], 1
.text:00009FFA                 jmp     short loc_A003
.text:00009FFC ; ---------------------------------------------------------------------------
.text:00009FFC
.text:00009FFC loc_9FFC:                               ; CODE XREF: NArchive::N7z::CDatabase::IsItemAnti(uint)+28j
.text:00009FFC                                         ; NArchive::N7z::CDatabase::IsItemAnti(uint)+41j
.text:00009FFC                 mov     [ebp+var_8], 0
.text:0000A003
.text:0000A003 loc_A003:                               ; CODE XREF: NArchive::N7z::CDatabase::IsItemAnti(uint)+4Aj
.text:0000A003                 mov     al, byte ptr [ebp+var_8]
.text:0000A006                 add     esp, 8
.text:0000A009                 cmp     ebp, esp
.text:0000A00B                 call    __RTC_CheckEsp
.text:0000A010                 mov     esp, ebp
.text:0000A012                 pop     ebp
.text:0000A013                 retn    4
.text:0000A013 ?IsItemAnti@CDatabase@N7z@NArchive@@QBE_NI@Z endp
.text:0000A013
.text:0000A013 ; ---------------------------------------------------------------------------
.text:0000A016                 align 4
.text:0000A016 _text           ends
.text:0000A016
.text:0000A018 ; ===========================================================================
.text:0000A018
.text:0000A018 ; Segment type: Pure code
.text:0000A018 ; Segment permissions: Read/Execute
.text:0000A018 _text           segment para public 'CODE' use32
.text:0000A018                 assume cs:_text
.text:0000A018                 ;org 0A018h
.text:0000A018 ; COMDAT (pick any)
.text:0000A018                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A018
.text:0000A018 ; =============== S U B R O U T I N E =======================================
.text:0000A018
.text:0000A018 ; Attributes: bp-based frame
.text:0000A018
.text:0000A018 ; _DWORD __thiscall NArchive::N7z::CFolderEx::CFolderEx(NArchive::N7z::CFolderEx *__hidden this)
.text:0000A018                 public ??0CFolderEx@N7z@NArchive@@QAE@XZ
.text:0000A018 ??0CFolderEx@N7z@NArchive@@QAE@XZ proc near
.text:0000A018                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+40Ap
.text:0000A018
.text:0000A018 var_4           = dword ptr -4
.text:0000A018
.text:0000A018                 push    ebp
.text:0000A019                 mov     ebp, esp
.text:0000A01B                 push    ecx
.text:0000A01C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000A023                 mov     [ebp+var_4], ecx
.text:0000A026                 mov     ecx, [ebp+var_4] ; this
.text:0000A029                 call    ??0CFolder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFolder::CFolder(void)
.text:0000A02E                 mov     eax, [ebp+var_4]
.text:0000A031                 add     esp, 4
.text:0000A034                 cmp     ebp, esp
.text:0000A036                 call    __RTC_CheckEsp
.text:0000A03B                 mov     esp, ebp
.text:0000A03D                 pop     ebp
.text:0000A03E                 retn
.text:0000A03E ??0CFolderEx@N7z@NArchive@@QAE@XZ endp
.text:0000A03E
.text:0000A03E ; ---------------------------------------------------------------------------
.text:0000A03F                 align 10h
.text:0000A03F _text           ends
.text:0000A03F
.text:0000A040 ; ===========================================================================
.text:0000A040
.text:0000A040 ; Segment type: Pure code
.text:0000A040 ; Segment permissions: Read/Execute
.text:0000A040 _text           segment para public 'CODE' use32
.text:0000A040                 assume cs:_text
.text:0000A040                 ;org 0A040h
.text:0000A040 ; COMDAT (pick any)
.text:0000A040                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A040
.text:0000A040 ; =============== S U B R O U T I N E =======================================
.text:0000A040
.text:0000A040 ; Attributes: bp-based frame
.text:0000A040
.text:0000A040 ; _DWORD __thiscall NArchive::N7z::CFolder::CFolder(NArchive::N7z::CFolder *__hidden this)
.text:0000A040                 public ??0CFolder@N7z@NArchive@@QAE@XZ
.text:0000A040 ??0CFolder@N7z@NArchive@@QAE@XZ proc near
.text:0000A040                                         ; CODE XREF: NArchive::N7z::CFolderEx::CFolderEx(void)+11p
.text:0000A040                                         ; CObjectVector<NArchive::N7z::CFolder>::AddNew(void)+59p
.text:0000A040
.text:0000A040 var_10          = dword ptr -10h
.text:0000A040 var_C           = dword ptr -0Ch
.text:0000A040 var_4           = dword ptr -4
.text:0000A040
.text:0000A040                 push    ebp
.text:0000A041                 mov     ebp, esp
.text:0000A043                 push    0FFFFFFFFh
.text:0000A045                 push    offset __ehhandler$??0CFolder@N7z@NArchive@@QAE@XZ
.text:0000A04A                 mov     eax, large fs:0
.text:0000A050                 push    eax
.text:0000A051                 push    ecx
.text:0000A052                 mov     [ebp+var_10], 0CCCCCCCCh
.text:0000A059                 mov     eax, dword ptr ds:___security_cookie
.text:0000A05E                 xor     eax, ebp
.text:0000A060                 push    eax
.text:0000A061                 lea     eax, [ebp+var_C]
.text:0000A064                 mov     large fs:0, eax
.text:0000A06A                 mov     [ebp+var_10], ecx
.text:0000A06D                 mov     ecx, [ebp+var_10]
.text:0000A070                 call    ??0?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CCoderInfo>::CObjArray2<NArchive::N7z::CCoderInfo>(void)
.text:0000A075                 mov     [ebp+var_4], 0
.text:0000A07C                 mov     ecx, [ebp+var_10]
.text:0000A07F                 add     ecx, 8
.text:0000A082                 call    ??0?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CBond>::CObjArray2<NArchive::N7z::CBond>(void)
.text:0000A087                 mov     byte ptr [ebp+var_4], 1
.text:0000A08B                 mov     ecx, [ebp+var_10]
.text:0000A08E                 add     ecx, 10h
.text:0000A091                 call    ??0?$CObjArray2@I@@QAE@XZ ; CObjArray2<uint>::CObjArray2<uint>(void)
.text:0000A096                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000A09D                 mov     eax, [ebp+var_10]
.text:0000A0A0                 mov     ecx, [ebp+var_C]
.text:0000A0A3                 mov     large fs:0, ecx
.text:0000A0AA                 pop     ecx
.text:0000A0AB                 add     esp, 10h
.text:0000A0AE                 cmp     ebp, esp
.text:0000A0B0                 call    __RTC_CheckEsp
.text:0000A0B5                 mov     esp, ebp
.text:0000A0B7                 pop     ebp
.text:0000A0B8                 retn
.text:0000A0B8 ??0CFolder@N7z@NArchive@@QAE@XZ endp
.text:0000A0B8
.text:0000A0B8 ; ---------------------------------------------------------------------------
.text:0000A0B9                 align 4
.text:0000A0B9 _text           ends
.text:0000A0B9
.text$x:0000A0BC ; ===========================================================================
.text$x:0000A0BC
.text$x:0000A0BC ; Segment type: Pure code
.text$x:0000A0BC ; Segment permissions: Read/Execute
.text$x:0000A0BC _text$x         segment para public 'CODE' use32
.text$x:0000A0BC                 assume cs:_text$x
.text$x:0000A0BC                 ;org 0A0BCh
.text$x:0000A0BC ; COMDAT (pick associative to section at A040)
.text$x:0000A0BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000A0BC
.text$x:0000A0BC ; =============== S U B R O U T I N E =======================================
.text$x:0000A0BC
.text$x:0000A0BC
.text$x:0000A0BC __unwindfunclet$??0CFolder@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:0000A0BC                                         ; DATA XREF: .xdata$x:0000A0F0o
.text$x:0000A0BC                 mov     ecx, [ebp-10h]
.text$x:0000A0BF                 jmp     ??1?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CCoderInfo>::~CObjArray2<NArchive::N7z::CCoderInfo>(void)
.text$x:0000A0BF __unwindfunclet$??0CFolder@N7z@NArchive@@QAE@XZ$0 endp
.text$x:0000A0BF
.text$x:0000A0C4
.text$x:0000A0C4 ; =============== S U B R O U T I N E =======================================
.text$x:0000A0C4
.text$x:0000A0C4
.text$x:0000A0C4 __unwindfunclet$??0CFolder@N7z@NArchive@@QAE@XZ$1 proc near
.text$x:0000A0C4                                         ; DATA XREF: .xdata$x:0000A0F8o
.text$x:0000A0C4                 mov     ecx, [ebp-10h]
.text$x:0000A0C7                 add     ecx, 8
.text$x:0000A0CA                 jmp     ??1?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CBond>::~CObjArray2<NArchive::N7z::CBond>(void)
.text$x:0000A0CA __unwindfunclet$??0CFolder@N7z@NArchive@@QAE@XZ$1 endp
.text$x:0000A0CA
.text$x:0000A0CF
.text$x:0000A0CF ; =============== S U B R O U T I N E =======================================
.text$x:0000A0CF
.text$x:0000A0CF
.text$x:0000A0CF __ehhandler$??0CFolder@N7z@NArchive@@QAE@XZ proc near
.text$x:0000A0CF                                         ; DATA XREF: NArchive::N7z::CFolder::CFolder(void)+5o
.text$x:0000A0CF
.text$x:0000A0CF arg_4           = dword ptr  8
.text$x:0000A0CF
.text$x:0000A0CF                 mov     edx, [esp+arg_4]
.text$x:0000A0D3                 lea     eax, [edx+0Ch]
.text$x:0000A0D6                 mov     ecx, [edx-8]
.text$x:0000A0D9                 xor     ecx, eax
.text$x:0000A0DB                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000A0E0                 mov     eax, offset __ehfuncinfo$??0CFolder@N7z@NArchive@@QAE@XZ
.text$x:0000A0E5                 jmp     ___CxxFrameHandler3
.text$x:0000A0E5 __ehhandler$??0CFolder@N7z@NArchive@@QAE@XZ endp
.text$x:0000A0E5
.text$x:0000A0E5 ; ---------------------------------------------------------------------------
.text$x:0000A0EA                 align 4
.text$x:0000A0EA _text$x         ends
.text$x:0000A0EA
.xdata$x:0000A0EC ; ===========================================================================
.xdata$x:0000A0EC
.xdata$x:0000A0EC ; Segment type: Pure data
.xdata$x:0000A0EC ; Segment permissions: Read
.xdata$x:0000A0EC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A0EC                 assume cs:_xdata$x
.xdata$x:0000A0EC                 ;org 0A0ECh
.xdata$x:0000A0EC ; COMDAT (pick associative to section at A040)
.xdata$x:0000A0EC __unwindtable$??0CFolder@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:0000A0EC                                         ; DATA XREF: .xdata$x:0000A104o
.xdata$x:0000A0ED                 db 0FFh
.xdata$x:0000A0EE                 db 0FFh
.xdata$x:0000A0EF                 db 0FFh
.xdata$x:0000A0F0                 dd offset __unwindfunclet$??0CFolder@N7z@NArchive@@QAE@XZ$0
.xdata$x:0000A0F4                 align 8
.xdata$x:0000A0F8                 dd offset __unwindfunclet$??0CFolder@N7z@NArchive@@QAE@XZ$1
.xdata$x:0000A0FC __ehfuncinfo$??0CFolder@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:0000A0FC                                         ; DATA XREF: __ehhandler$??0CFolder@N7z@NArchive@@QAE@XZ+11o
.xdata$x:0000A0FD                 db    5
.xdata$x:0000A0FE                 db  93h ; ô
.xdata$x:0000A0FF                 db  19h
.xdata$x:0000A100                 db    2
.xdata$x:0000A101                 db    0
.xdata$x:0000A102                 db    0
.xdata$x:0000A103                 db    0
.xdata$x:0000A104                 dd offset __unwindtable$??0CFolder@N7z@NArchive@@QAE@XZ
.xdata$x:0000A108                 db    0
.xdata$x:0000A109                 db    0
.xdata$x:0000A10A                 db    0
.xdata$x:0000A10B                 db    0
.xdata$x:0000A10C                 db    0
.xdata$x:0000A10D                 db    0
.xdata$x:0000A10E                 db    0
.xdata$x:0000A10F                 db    0
.xdata$x:0000A110                 db    0
.xdata$x:0000A111                 db    0
.xdata$x:0000A112                 db    0
.xdata$x:0000A113                 db    0
.xdata$x:0000A114                 db    0
.xdata$x:0000A115                 db    0
.xdata$x:0000A116                 db    0
.xdata$x:0000A117                 db    0
.xdata$x:0000A118                 db    0
.xdata$x:0000A119                 db    0
.xdata$x:0000A11A                 db    0
.xdata$x:0000A11B                 db    0
.xdata$x:0000A11C                 db    1
.xdata$x:0000A11D                 db    0
.xdata$x:0000A11E                 db    0
.xdata$x:0000A11F                 db    0
.xdata$x:0000A11F _xdata$x        ends
.xdata$x:0000A11F
.text:0000A120 ; ===========================================================================
.text:0000A120
.text:0000A120 ; Segment type: Pure code
.text:0000A120 ; Segment permissions: Read/Execute
.text:0000A120 _text           segment para public 'CODE' use32
.text:0000A120                 assume cs:_text
.text:0000A120                 ;org 0A120h
.text:0000A120 ; COMDAT (pick any)
.text:0000A120                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A120
.text:0000A120 ; =============== S U B R O U T I N E =======================================
.text:0000A120
.text:0000A120 ; Attributes: bp-based frame
.text:0000A120
.text:0000A120 ; _DWORD __thiscall NArchive::N7z::CFolderEx::~CFolderEx(NArchive::N7z::CFolderEx *__hidden this)
.text:0000A120                 public ??1CFolderEx@N7z@NArchive@@QAE@XZ
.text:0000A120 ??1CFolderEx@N7z@NArchive@@QAE@XZ proc near
.text:0000A120                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+51Ep
.text:0000A120                                         ; __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$5+6j
.text:0000A120
.text:0000A120 var_4           = dword ptr -4
.text:0000A120
.text:0000A120                 push    ebp
.text:0000A121                 mov     ebp, esp
.text:0000A123                 push    ecx
.text:0000A124                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000A12B                 mov     [ebp+var_4], ecx
.text:0000A12E                 mov     ecx, [ebp+var_4] ; this
.text:0000A131                 call    ??1CFolder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFolder::~CFolder(void)
.text:0000A136                 add     esp, 4
.text:0000A139                 cmp     ebp, esp
.text:0000A13B                 call    __RTC_CheckEsp
.text:0000A140                 mov     esp, ebp
.text:0000A142                 pop     ebp
.text:0000A143                 retn
.text:0000A143 ??1CFolderEx@N7z@NArchive@@QAE@XZ endp
.text:0000A143
.text:0000A143 _text           ends
.text:0000A143
.text:0000A144 ; ===========================================================================
.text:0000A144
.text:0000A144 ; Segment type: Pure code
.text:0000A144 ; Segment permissions: Read/Execute
.text:0000A144 _text           segment para public 'CODE' use32
.text:0000A144                 assume cs:_text
.text:0000A144                 ;org 0A144h
.text:0000A144 ; COMDAT (pick any)
.text:0000A144                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A144
.text:0000A144 ; =============== S U B R O U T I N E =======================================
.text:0000A144
.text:0000A144 ; Attributes: bp-based frame
.text:0000A144
.text:0000A144 ; public: __thiscall CStreamBinder::CStreamBinder(void)
.text:0000A144                 public ??0CStreamBinder@@QAE@XZ
.text:0000A144 ??0CStreamBinder@@QAE@XZ proc near      ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+75Ap
.text:0000A144
.text:0000A144 var_10          = dword ptr -10h
.text:0000A144 var_C           = dword ptr -0Ch
.text:0000A144 var_4           = dword ptr -4
.text:0000A144
.text:0000A144                 push    ebp
.text:0000A145                 mov     ebp, esp
.text:0000A147                 push    0FFFFFFFFh
.text:0000A149                 push    offset __ehhandler$??0CStreamBinder@@QAE@XZ
.text:0000A14E                 mov     eax, large fs:0
.text:0000A154                 push    eax
.text:0000A155                 push    ecx
.text:0000A156                 mov     [ebp+var_10], 0CCCCCCCCh
.text:0000A15D                 mov     eax, dword ptr ds:___security_cookie
.text:0000A162                 xor     eax, ebp
.text:0000A164                 push    eax
.text:0000A165                 lea     eax, [ebp+var_C]
.text:0000A168                 mov     large fs:0, eax
.text:0000A16E                 mov     [ebp+var_10], ecx
.text:0000A171                 mov     ecx, [ebp+var_10] ; this
.text:0000A174                 call    ??0CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::CAutoResetEvent(void)
.text:0000A179                 mov     [ebp+var_4], 0
.text:0000A180                 mov     ecx, [ebp+var_10]
.text:0000A183                 add     ecx, 4          ; this
.text:0000A186                 call    ??0CManualResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CManualResetEvent::CManualResetEvent(void)
.text:0000A18B                 mov     byte ptr [ebp+var_4], 1
.text:0000A18F                 mov     ecx, [ebp+var_10]
.text:0000A192                 add     ecx, 8          ; this
.text:0000A195                 call    ??0CManualResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CManualResetEvent::CManualResetEvent(void)
.text:0000A19A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000A1A1                 mov     eax, [ebp+var_10]
.text:0000A1A4                 mov     ecx, [ebp+var_C]
.text:0000A1A7                 mov     large fs:0, ecx
.text:0000A1AE                 pop     ecx
.text:0000A1AF                 add     esp, 10h
.text:0000A1B2                 cmp     ebp, esp
.text:0000A1B4                 call    __RTC_CheckEsp
.text:0000A1B9                 mov     esp, ebp
.text:0000A1BB                 pop     ebp
.text:0000A1BC                 retn
.text:0000A1BC ??0CStreamBinder@@QAE@XZ endp
.text:0000A1BC
.text:0000A1BC ; ---------------------------------------------------------------------------
.text:0000A1BD                 align 10h
.text:0000A1BD _text           ends
.text:0000A1BD
.text$x:0000A1C0 ; ===========================================================================
.text$x:0000A1C0
.text$x:0000A1C0 ; Segment type: Pure code
.text$x:0000A1C0 ; Segment permissions: Read/Execute
.text$x:0000A1C0 _text$x         segment para public 'CODE' use32
.text$x:0000A1C0                 assume cs:_text$x
.text$x:0000A1C0                 ;org 0A1C0h
.text$x:0000A1C0 ; COMDAT (pick associative to section at A144)
.text$x:0000A1C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000A1C0
.text$x:0000A1C0 ; =============== S U B R O U T I N E =======================================
.text$x:0000A1C0
.text$x:0000A1C0
.text$x:0000A1C0 __unwindfunclet$??0CStreamBinder@@QAE@XZ$0 proc near
.text$x:0000A1C0                                         ; DATA XREF: .xdata$x:0000A1F4o
.text$x:0000A1C0                 mov     ecx, [ebp-10h]  ; this
.text$x:0000A1C3                 jmp     ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)
.text$x:0000A1C3 __unwindfunclet$??0CStreamBinder@@QAE@XZ$0 endp
.text$x:0000A1C3
.text$x:0000A1C8
.text$x:0000A1C8 ; =============== S U B R O U T I N E =======================================
.text$x:0000A1C8
.text$x:0000A1C8
.text$x:0000A1C8 __unwindfunclet$??0CStreamBinder@@QAE@XZ$1 proc near
.text$x:0000A1C8                                         ; DATA XREF: .xdata$x:0000A1FCo
.text$x:0000A1C8                 mov     ecx, [ebp-10h]
.text$x:0000A1CB                 add     ecx, 4          ; this
.text$x:0000A1CE                 jmp     ??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CManualResetEvent::~CManualResetEvent(void)
.text$x:0000A1CE __unwindfunclet$??0CStreamBinder@@QAE@XZ$1 endp
.text$x:0000A1CE
.text$x:0000A1D3
.text$x:0000A1D3 ; =============== S U B R O U T I N E =======================================
.text$x:0000A1D3
.text$x:0000A1D3
.text$x:0000A1D3 __ehhandler$??0CStreamBinder@@QAE@XZ proc near
.text$x:0000A1D3                                         ; DATA XREF: CStreamBinder::CStreamBinder(void)+5o
.text$x:0000A1D3
.text$x:0000A1D3 arg_4           = dword ptr  8
.text$x:0000A1D3
.text$x:0000A1D3                 mov     edx, [esp+arg_4]
.text$x:0000A1D7                 lea     eax, [edx+0Ch]
.text$x:0000A1DA                 mov     ecx, [edx-8]
.text$x:0000A1DD                 xor     ecx, eax
.text$x:0000A1DF                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000A1E4                 mov     eax, offset __ehfuncinfo$??0CStreamBinder@@QAE@XZ
.text$x:0000A1E9                 jmp     ___CxxFrameHandler3
.text$x:0000A1E9 __ehhandler$??0CStreamBinder@@QAE@XZ endp
.text$x:0000A1E9
.text$x:0000A1E9 ; ---------------------------------------------------------------------------
.text$x:0000A1EE                 align 10h
.text$x:0000A1EE _text$x         ends
.text$x:0000A1EE
.xdata$x:0000A1F0 ; ===========================================================================
.xdata$x:0000A1F0
.xdata$x:0000A1F0 ; Segment type: Pure data
.xdata$x:0000A1F0 ; Segment permissions: Read
.xdata$x:0000A1F0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A1F0                 assume cs:_xdata$x
.xdata$x:0000A1F0                 ;org 0A1F0h
.xdata$x:0000A1F0 ; COMDAT (pick associative to section at A144)
.xdata$x:0000A1F0 __unwindtable$??0CStreamBinder@@QAE@XZ db 0FFh
.xdata$x:0000A1F0                                         ; DATA XREF: .xdata$x:0000A208o
.xdata$x:0000A1F1                 db 0FFh
.xdata$x:0000A1F2                 db 0FFh
.xdata$x:0000A1F3                 db 0FFh
.xdata$x:0000A1F4                 dd offset __unwindfunclet$??0CStreamBinder@@QAE@XZ$0
.xdata$x:0000A1F8                 db    0
.xdata$x:0000A1F9                 db    0
.xdata$x:0000A1FA                 db    0
.xdata$x:0000A1FB                 db    0
.xdata$x:0000A1FC                 dd offset __unwindfunclet$??0CStreamBinder@@QAE@XZ$1
.xdata$x:0000A200 __ehfuncinfo$??0CStreamBinder@@QAE@XZ db  22h ; "
.xdata$x:0000A200                                         ; DATA XREF: __ehhandler$??0CStreamBinder@@QAE@XZ+11o
.xdata$x:0000A201                 db    5
.xdata$x:0000A202                 db  93h ; ô
.xdata$x:0000A203                 db  19h
.xdata$x:0000A204                 db    2
.xdata$x:0000A205                 db    0
.xdata$x:0000A206                 db    0
.xdata$x:0000A207                 db    0
.xdata$x:0000A208                 dd offset __unwindtable$??0CStreamBinder@@QAE@XZ
.xdata$x:0000A20C                 align 20h
.xdata$x:0000A220                 db    1
.xdata$x:0000A221                 db    0
.xdata$x:0000A222                 db    0
.xdata$x:0000A223                 db    0
.xdata$x:0000A223 _xdata$x        ends
.xdata$x:0000A223
.text:0000A224 ; ===========================================================================
.text:0000A224
.text:0000A224 ; Segment type: Pure code
.text:0000A224 ; Segment permissions: Read/Execute
.text:0000A224 _text           segment para public 'CODE' use32
.text:0000A224                 assume cs:_text
.text:0000A224                 ;org 0A224h
.text:0000A224 ; COMDAT (pick any)
.text:0000A224                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A224
.text:0000A224 ; =============== S U B R O U T I N E =======================================
.text:0000A224
.text:0000A224 ; Attributes: bp-based frame
.text:0000A224
.text:0000A224 ; _DWORD __thiscall CStreamBinder::~CStreamBinder(CStreamBinder *__hidden this)
.text:0000A224                 public ??1CStreamBinder@@QAE@XZ
.text:0000A224 ??1CStreamBinder@@QAE@XZ proc near      ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+7A2p
.text:0000A224                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+878p ...
.text:0000A224
.text:0000A224 var_10          = dword ptr -10h
.text:0000A224 var_C           = dword ptr -0Ch
.text:0000A224 var_4           = dword ptr -4
.text:0000A224
.text:0000A224                 push    ebp
.text:0000A225                 mov     ebp, esp
.text:0000A227                 push    0FFFFFFFFh
.text:0000A229                 push    offset __ehhandler$??1CStreamBinder@@QAE@XZ
.text:0000A22E                 mov     eax, large fs:0
.text:0000A234                 push    eax
.text:0000A235                 push    ecx
.text:0000A236                 mov     [ebp+var_10], 0CCCCCCCCh
.text:0000A23D                 mov     eax, dword ptr ds:___security_cookie
.text:0000A242                 xor     eax, ebp
.text:0000A244                 push    eax
.text:0000A245                 lea     eax, [ebp+var_C]
.text:0000A248                 mov     large fs:0, eax
.text:0000A24E                 mov     [ebp+var_10], ecx
.text:0000A251                 mov     [ebp+var_4], 1
.text:0000A258                 mov     ecx, [ebp+var_10]
.text:0000A25B                 add     ecx, 8          ; this
.text:0000A25E                 call    ??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CManualResetEvent::~CManualResetEvent(void)
.text:0000A263                 mov     byte ptr [ebp+var_4], 0
.text:0000A267                 mov     ecx, [ebp+var_10]
.text:0000A26A                 add     ecx, 4          ; this
.text:0000A26D                 call    ??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CManualResetEvent::~CManualResetEvent(void)
.text:0000A272                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000A279                 mov     ecx, [ebp+var_10] ; this
.text:0000A27C                 call    ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)
.text:0000A281                 mov     ecx, [ebp+var_C]
.text:0000A284                 mov     large fs:0, ecx
.text:0000A28B                 pop     ecx
.text:0000A28C                 add     esp, 10h
.text:0000A28F                 cmp     ebp, esp
.text:0000A291                 call    __RTC_CheckEsp
.text:0000A296                 mov     esp, ebp
.text:0000A298                 pop     ebp
.text:0000A299                 retn
.text:0000A299 ??1CStreamBinder@@QAE@XZ endp
.text:0000A299
.text:0000A299 ; ---------------------------------------------------------------------------
.text:0000A29A                 align 4
.text:0000A29A _text           ends
.text:0000A29A
.text$x:0000A29C ; ===========================================================================
.text$x:0000A29C
.text$x:0000A29C ; Segment type: Pure code
.text$x:0000A29C ; Segment permissions: Read/Execute
.text$x:0000A29C _text$x         segment para public 'CODE' use32
.text$x:0000A29C                 assume cs:_text$x
.text$x:0000A29C                 ;org 0A29Ch
.text$x:0000A29C ; COMDAT (pick associative to section at A224)
.text$x:0000A29C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000A29C
.text$x:0000A29C ; =============== S U B R O U T I N E =======================================
.text$x:0000A29C
.text$x:0000A29C
.text$x:0000A29C __unwindfunclet$??1CStreamBinder@@QAE@XZ$0 proc near
.text$x:0000A29C                                         ; DATA XREF: .xdata$x:0000A2D0o
.text$x:0000A29C                 mov     ecx, [ebp-10h]  ; this
.text$x:0000A29F                 jmp     ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)
.text$x:0000A29F __unwindfunclet$??1CStreamBinder@@QAE@XZ$0 endp
.text$x:0000A29F
.text$x:0000A2A4
.text$x:0000A2A4 ; =============== S U B R O U T I N E =======================================
.text$x:0000A2A4
.text$x:0000A2A4
.text$x:0000A2A4 __unwindfunclet$??1CStreamBinder@@QAE@XZ$1 proc near
.text$x:0000A2A4                                         ; DATA XREF: .xdata$x:0000A2D8o
.text$x:0000A2A4                 mov     ecx, [ebp-10h]
.text$x:0000A2A7                 add     ecx, 4          ; this
.text$x:0000A2AA                 jmp     ??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CManualResetEvent::~CManualResetEvent(void)
.text$x:0000A2AA __unwindfunclet$??1CStreamBinder@@QAE@XZ$1 endp
.text$x:0000A2AA
.text$x:0000A2AF
.text$x:0000A2AF ; =============== S U B R O U T I N E =======================================
.text$x:0000A2AF
.text$x:0000A2AF
.text$x:0000A2AF __ehhandler$??1CStreamBinder@@QAE@XZ proc near
.text$x:0000A2AF                                         ; DATA XREF: CStreamBinder::~CStreamBinder(void)+5o
.text$x:0000A2AF
.text$x:0000A2AF arg_4           = dword ptr  8
.text$x:0000A2AF
.text$x:0000A2AF                 mov     edx, [esp+arg_4]
.text$x:0000A2B3                 lea     eax, [edx+0Ch]
.text$x:0000A2B6                 mov     ecx, [edx-8]
.text$x:0000A2B9                 xor     ecx, eax
.text$x:0000A2BB                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000A2C0                 mov     eax, offset __ehfuncinfo$??1CStreamBinder@@QAE@XZ
.text$x:0000A2C5                 jmp     ___CxxFrameHandler3
.text$x:0000A2C5 __ehhandler$??1CStreamBinder@@QAE@XZ endp
.text$x:0000A2C5
.text$x:0000A2C5 ; ---------------------------------------------------------------------------
.text$x:0000A2CA                 align 4
.text$x:0000A2CA _text$x         ends
.text$x:0000A2CA
.xdata$x:0000A2CC ; ===========================================================================
.xdata$x:0000A2CC
.xdata$x:0000A2CC ; Segment type: Pure data
.xdata$x:0000A2CC ; Segment permissions: Read
.xdata$x:0000A2CC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A2CC                 assume cs:_xdata$x
.xdata$x:0000A2CC                 ;org 0A2CCh
.xdata$x:0000A2CC ; COMDAT (pick associative to section at A224)
.xdata$x:0000A2CC __unwindtable$??1CStreamBinder@@QAE@XZ db 0FFh
.xdata$x:0000A2CC                                         ; DATA XREF: .xdata$x:0000A2E4o
.xdata$x:0000A2CD                 db 0FFh
.xdata$x:0000A2CE                 db 0FFh
.xdata$x:0000A2CF                 db 0FFh
.xdata$x:0000A2D0                 dd offset __unwindfunclet$??1CStreamBinder@@QAE@XZ$0
.xdata$x:0000A2D4                 align 8
.xdata$x:0000A2D8                 dd offset __unwindfunclet$??1CStreamBinder@@QAE@XZ$1
.xdata$x:0000A2DC __ehfuncinfo$??1CStreamBinder@@QAE@XZ db  22h ; "
.xdata$x:0000A2DC                                         ; DATA XREF: __ehhandler$??1CStreamBinder@@QAE@XZ+11o
.xdata$x:0000A2DD                 db    5
.xdata$x:0000A2DE                 db  93h ; ô
.xdata$x:0000A2DF                 db  19h
.xdata$x:0000A2E0                 db    2
.xdata$x:0000A2E1                 db    0
.xdata$x:0000A2E2                 db    0
.xdata$x:0000A2E3                 db    0
.xdata$x:0000A2E4                 dd offset __unwindtable$??1CStreamBinder@@QAE@XZ
.xdata$x:0000A2E8                 db    0
.xdata$x:0000A2E9                 db    0
.xdata$x:0000A2EA                 db    0
.xdata$x:0000A2EB                 db    0
.xdata$x:0000A2EC                 db    0
.xdata$x:0000A2ED                 db    0
.xdata$x:0000A2EE                 db    0
.xdata$x:0000A2EF                 db    0
.xdata$x:0000A2F0                 db    0
.xdata$x:0000A2F1                 db    0
.xdata$x:0000A2F2                 db    0
.xdata$x:0000A2F3                 db    0
.xdata$x:0000A2F4                 db    0
.xdata$x:0000A2F5                 db    0
.xdata$x:0000A2F6                 db    0
.xdata$x:0000A2F7                 db    0
.xdata$x:0000A2F8                 db    0
.xdata$x:0000A2F9                 db    0
.xdata$x:0000A2FA                 db    0
.xdata$x:0000A2FB                 db    0
.xdata$x:0000A2FC                 db    1
.xdata$x:0000A2FD                 db    0
.xdata$x:0000A2FE                 db    0
.xdata$x:0000A2FF                 db    0
.xdata$x:0000A2FF _xdata$x        ends
.xdata$x:0000A2FF
.text:0000A300 ; ===========================================================================
.text:0000A300
.text:0000A300 ; Segment type: Pure code
.text:0000A300 ; Segment permissions: Read/Execute
.text:0000A300 _text           segment para public 'CODE' use32
.text:0000A300                 assume cs:_text
.text:0000A300                 ;org 0A300h
.text:0000A300 ; COMDAT (pick any)
.text:0000A300                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A300
.text:0000A300 ; =============== S U B R O U T I N E =======================================
.text:0000A300
.text:0000A300 ; Attributes: bp-based frame
.text:0000A300
.text:0000A300 ; _DWORD __thiscall NArchive::N7z::CAnalysis::~CAnalysis(NArchive::N7z::CAnalysis *__hidden this)
.text:0000A300                 public ??1CAnalysis@N7z@NArchive@@QAE@XZ
.text:0000A300 ??1CAnalysis@N7z@NArchive@@QAE@XZ proc near
.text:0000A300                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+A8Ep
.text:0000A300                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+B75p ...
.text:0000A300
.text:0000A300 var_10          = dword ptr -10h
.text:0000A300 var_C           = dword ptr -0Ch
.text:0000A300 var_4           = dword ptr -4
.text:0000A300
.text:0000A300                 push    ebp
.text:0000A301                 mov     ebp, esp
.text:0000A303                 push    0FFFFFFFFh
.text:0000A305                 push    offset __ehhandler$??1CAnalysis@N7z@NArchive@@QAE@XZ
.text:0000A30A                 mov     eax, large fs:0
.text:0000A310                 push    eax
.text:0000A311                 push    ecx
.text:0000A312                 mov     [ebp+var_10], 0CCCCCCCCh
.text:0000A319                 mov     eax, dword ptr ds:___security_cookie
.text:0000A31E                 xor     eax, ebp
.text:0000A320                 push    eax
.text:0000A321                 lea     eax, [ebp+var_C]
.text:0000A324                 mov     large fs:0, eax
.text:0000A32A                 mov     [ebp+var_10], ecx
.text:0000A32D                 mov     [ebp+var_4], 0
.text:0000A334                 mov     ecx, [ebp+var_10]
.text:0000A337                 add     ecx, 4
.text:0000A33A                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:0000A33F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000A346                 mov     ecx, [ebp+var_10]
.text:0000A349                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:0000A34E                 mov     ecx, [ebp+var_C]
.text:0000A351                 mov     large fs:0, ecx
.text:0000A358                 pop     ecx
.text:0000A359                 add     esp, 10h
.text:0000A35C                 cmp     ebp, esp
.text:0000A35E                 call    __RTC_CheckEsp
.text:0000A363                 mov     esp, ebp
.text:0000A365                 pop     ebp
.text:0000A366                 retn
.text:0000A366 ??1CAnalysis@N7z@NArchive@@QAE@XZ endp
.text:0000A366
.text:0000A366 ; ---------------------------------------------------------------------------
.text:0000A367                 align 4
.text:0000A367 _text           ends
.text:0000A367
.text$x:0000A368 ; ===========================================================================
.text$x:0000A368
.text$x:0000A368 ; Segment type: Pure code
.text$x:0000A368 ; Segment permissions: Read/Execute
.text$x:0000A368 _text$x         segment para public 'CODE' use32
.text$x:0000A368                 assume cs:_text$x
.text$x:0000A368                 ;org 0A368h
.text$x:0000A368 ; COMDAT (pick associative to section at A300)
.text$x:0000A368                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000A368
.text$x:0000A368 ; =============== S U B R O U T I N E =======================================
.text$x:0000A368
.text$x:0000A368
.text$x:0000A368 __unwindfunclet$??1CAnalysis@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:0000A368                                         ; DATA XREF: .xdata$x:0000A390o
.text$x:0000A368                 mov     ecx, [ebp-10h]
.text$x:0000A36B                 jmp     ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text$x:0000A36B __unwindfunclet$??1CAnalysis@N7z@NArchive@@QAE@XZ$0 endp
.text$x:0000A36B
.text$x:0000A370
.text$x:0000A370 ; =============== S U B R O U T I N E =======================================
.text$x:0000A370
.text$x:0000A370
.text$x:0000A370 __ehhandler$??1CAnalysis@N7z@NArchive@@QAE@XZ proc near
.text$x:0000A370                                         ; DATA XREF: NArchive::N7z::CAnalysis::~CAnalysis(void)+5o
.text$x:0000A370
.text$x:0000A370 arg_4           = dword ptr  8
.text$x:0000A370
.text$x:0000A370                 mov     edx, [esp+arg_4]
.text$x:0000A374                 lea     eax, [edx+0Ch]
.text$x:0000A377                 mov     ecx, [edx-8]
.text$x:0000A37A                 xor     ecx, eax
.text$x:0000A37C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000A381                 mov     eax, offset __ehfuncinfo$??1CAnalysis@N7z@NArchive@@QAE@XZ
.text$x:0000A386                 jmp     ___CxxFrameHandler3
.text$x:0000A386 __ehhandler$??1CAnalysis@N7z@NArchive@@QAE@XZ endp
.text$x:0000A386
.text$x:0000A386 ; ---------------------------------------------------------------------------
.text$x:0000A38B                 align 4
.text$x:0000A38B _text$x         ends
.text$x:0000A38B
.xdata$x:0000A38C ; ===========================================================================
.xdata$x:0000A38C
.xdata$x:0000A38C ; Segment type: Pure data
.xdata$x:0000A38C ; Segment permissions: Read
.xdata$x:0000A38C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A38C                 assume cs:_xdata$x
.xdata$x:0000A38C                 ;org 0A38Ch
.xdata$x:0000A38C ; COMDAT (pick associative to section at A300)
.xdata$x:0000A38C __unwindtable$??1CAnalysis@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:0000A38C                                         ; DATA XREF: .xdata$x:0000A39Co
.xdata$x:0000A38D                 db 0FFh
.xdata$x:0000A38E                 db 0FFh
.xdata$x:0000A38F                 db 0FFh
.xdata$x:0000A390                 dd offset __unwindfunclet$??1CAnalysis@N7z@NArchive@@QAE@XZ$0
.xdata$x:0000A394 __ehfuncinfo$??1CAnalysis@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:0000A394                                         ; DATA XREF: __ehhandler$??1CAnalysis@N7z@NArchive@@QAE@XZ+11o
.xdata$x:0000A395                 db    5
.xdata$x:0000A396                 db  93h ; ô
.xdata$x:0000A397                 db  19h
.xdata$x:0000A398                 db    1
.xdata$x:0000A399                 db    0
.xdata$x:0000A39A                 db    0
.xdata$x:0000A39B                 db    0
.xdata$x:0000A39C                 dd offset __unwindtable$??1CAnalysis@N7z@NArchive@@QAE@XZ
.xdata$x:0000A3A0                 db    0
.xdata$x:0000A3A1                 db    0
.xdata$x:0000A3A2                 db    0
.xdata$x:0000A3A3                 db    0
.xdata$x:0000A3A4                 db    0
.xdata$x:0000A3A5                 db    0
.xdata$x:0000A3A6                 db    0
.xdata$x:0000A3A7                 db    0
.xdata$x:0000A3A8                 db    0
.xdata$x:0000A3A9                 db    0
.xdata$x:0000A3AA                 db    0
.xdata$x:0000A3AB                 db    0
.xdata$x:0000A3AC                 db    0
.xdata$x:0000A3AD                 db    0
.xdata$x:0000A3AE                 db    0
.xdata$x:0000A3AF                 db    0
.xdata$x:0000A3B0                 db    0
.xdata$x:0000A3B1                 db    0
.xdata$x:0000A3B2                 db    0
.xdata$x:0000A3B3                 db    0
.xdata$x:0000A3B4                 db    1
.xdata$x:0000A3B5                 db    0
.xdata$x:0000A3B6                 db    0
.xdata$x:0000A3B7                 db    0
.xdata$x:0000A3B7 _xdata$x        ends
.xdata$x:0000A3B7
.text:0000A3B8 ; ===========================================================================
.text:0000A3B8
.text:0000A3B8 ; Segment type: Pure code
.text:0000A3B8 ; Segment permissions: Read/Execute
.text:0000A3B8 _text           segment para public 'CODE' use32
.text:0000A3B8                 assume cs:_text
.text:0000A3B8                 ;org 0A3B8h
.text:0000A3B8 ; COMDAT (pick any)
.text:0000A3B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A3B8
.text:0000A3B8 ; =============== S U B R O U T I N E =======================================
.text:0000A3B8
.text:0000A3B8 ; Attributes: bp-based frame
.text:0000A3B8
.text:0000A3B8 ; _DWORD __thiscall NArchive::N7z::CCryptoGetTextPassword::CCryptoGetTextPassword(NArchive::N7z::CCryptoGetTextPassword *__hidden this)
.text:0000A3B8                 public ??0CCryptoGetTextPassword@N7z@NArchive@@QAE@XZ
.text:0000A3B8 ??0CCryptoGetTextPassword@N7z@NArchive@@QAE@XZ proc near
.text:0000A3B8                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+BC2p
.text:0000A3B8
.text:0000A3B8 var_4           = dword ptr -4
.text:0000A3B8
.text:0000A3B8                 push    ebp
.text:0000A3B9                 mov     ebp, esp
.text:0000A3BB                 push    ecx
.text:0000A3BC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000A3C3                 mov     [ebp+var_4], ecx
.text:0000A3C6                 mov     ecx, [ebp+var_4] ; this
.text:0000A3C9                 call    ??0ICryptoGetTextPassword@@QAE@XZ ; ICryptoGetTextPassword::ICryptoGetTextPassword(void)
.text:0000A3CE                 mov     ecx, [ebp+var_4]
.text:0000A3D1                 add     ecx, 4          ; this
.text:0000A3D4                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:0000A3D9                 mov     eax, [ebp+var_4]
.text:0000A3DC                 mov     dword ptr [eax], offset ??_7CCryptoGetTextPassword@N7z@NArchive@@6B@ ; const NArchive::N7z::CCryptoGetTextPassword::`vftable'
.text:0000A3E2                 mov     ecx, [ebp+var_4]
.text:0000A3E5                 add     ecx, 8
.text:0000A3E8                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:0000A3ED                 mov     eax, [ebp+var_4]
.text:0000A3F0                 add     esp, 4
.text:0000A3F3                 cmp     ebp, esp
.text:0000A3F5                 call    __RTC_CheckEsp
.text:0000A3FA                 mov     esp, ebp
.text:0000A3FC                 pop     ebp
.text:0000A3FD                 retn
.text:0000A3FD ??0CCryptoGetTextPassword@N7z@NArchive@@QAE@XZ endp
.text:0000A3FD
.text:0000A3FD ; ---------------------------------------------------------------------------
.text:0000A3FE                 align 10h
.text:0000A3FE _text           ends
.text:0000A3FE
.rdata:0000A400 ; ===========================================================================
.rdata:0000A400
.rdata:0000A400 ; Segment type: Pure data
.rdata:0000A400 ; Segment permissions: Read
.rdata:0000A400 _rdata          segment dword public 'DATA' use32
.rdata:0000A400                 assume cs:_rdata
.rdata:0000A400                 ;org 0A400h
.rdata:0000A400 ; COMDAT (pick largest)
.rdata:0000A400                 dd offset ??_R4CCryptoGetTextPassword@N7z@NArchive@@6B@ ; const NArchive::N7z::CCryptoGetTextPassword::`RTTI Complete Object Locator'
.rdata:0000A404                 public ??_7CCryptoGetTextPassword@N7z@NArchive@@6B@
.rdata:0000A404 ; const NArchive::N7z::CCryptoGetTextPassword::`vftable'
.rdata:0000A404 ??_7CCryptoGetTextPassword@N7z@NArchive@@6B@ dd offset ?QueryInterface@CCryptoGetTextPassword@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z
.rdata:0000A404                                         ; DATA XREF: NArchive::N7z::CCryptoGetTextPassword::CCryptoGetTextPassword(void)+24o
.rdata:0000A404                                         ; NArchive::N7z::CCryptoGetTextPassword::QueryInterface(_GUID const &,void * *)
.rdata:0000A408                 dd offset ?AddRef@CCryptoGetTextPassword@N7z@NArchive@@UAGKXZ ; NArchive::N7z::CCryptoGetTextPassword::AddRef(void)
.rdata:0000A40C                 dd offset ?Release@CCryptoGetTextPassword@N7z@NArchive@@UAGKXZ ; NArchive::N7z::CCryptoGetTextPassword::Release(void)
.rdata:0000A410                 dd offset ?CryptoGetTextPassword@CCryptoGetTextPassword@N7z@NArchive@@UAGJPAPA_W@Z ; NArchive::N7z::CCryptoGetTextPassword::CryptoGetTextPassword(wchar_t * *)
.rdata:0000A410 _rdata          ends
.rdata:0000A410
.rdata$r:0000A414 ; ===========================================================================
.rdata$r:0000A414
.rdata$r:0000A414 ; Segment type: Pure data
.rdata$r:0000A414 ; Segment permissions: Read
.rdata$r:0000A414 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000A414                 assume cs:_rdata$r
.rdata$r:0000A414                 ;org 0A414h
.rdata$r:0000A414 ; COMDAT (pick any)
.rdata$r:0000A414                 public ??_R4CCryptoGetTextPassword@N7z@NArchive@@6B@
.rdata$r:0000A414 ; const NArchive::N7z::CCryptoGetTextPassword::`RTTI Complete Object Locator'
.rdata$r:0000A414 ??_R4CCryptoGetTextPassword@N7z@NArchive@@6B@ db    0
.rdata$r:0000A414                                         ; DATA XREF: .rdata:0000A400o
.rdata$r:0000A415                 db    0
.rdata$r:0000A416                 db    0
.rdata$r:0000A417                 db    0
.rdata$r:0000A418                 db    0
.rdata$r:0000A419                 db    0
.rdata$r:0000A41A                 db    0
.rdata$r:0000A41B                 db    0
.rdata$r:0000A41C                 db    0
.rdata$r:0000A41D                 db    0
.rdata$r:0000A41E                 db    0
.rdata$r:0000A41F                 db    0
.rdata$r:0000A420                 dd offset ??_R0?AVCCryptoGetTextPassword@N7z@NArchive@@@8 ; NArchive::N7z::CCryptoGetTextPassword `RTTI Type Descriptor'
.rdata$r:0000A424                 dd offset ??_R3CCryptoGetTextPassword@N7z@NArchive@@8 ; NArchive::N7z::CCryptoGetTextPassword::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000A424 _rdata$r        ends
.rdata$r:0000A424
.data:0000A428 ; ===========================================================================
.data:0000A428
.data:0000A428 ; Segment type: Pure data
.data:0000A428 ; Segment permissions: Read/Write
.data:0000A428 _data           segment dword public 'DATA' use32
.data:0000A428                 assume cs:_data
.data:0000A428                 ;org 0A428h
.data:0000A428 ; COMDAT (pick any)
.data:0000A428                 public ??_R0?AVCCryptoGetTextPassword@N7z@NArchive@@@8
.data:0000A428 ; class NArchive::N7z::CCryptoGetTextPassword `RTTI Type Descriptor'
.data:0000A428 ??_R0?AVCCryptoGetTextPassword@N7z@NArchive@@@8 dd offset ??_7type_info@@6B@
.data:0000A428                                         ; DATA XREF: .rdata$r:0000A420o
.data:0000A428                                         ; .rdata$r:NArchive::N7z::CCryptoGetTextPassword::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:0000A428                                         ; const type_info::`vftable'
.data:0000A42C                 align 10h
.data:0000A430 a_?avccryptoget db '.?AVCCryptoGetTextPassword@N7z@NArchive@@',0
.data:0000A45A                 align 4
.data:0000A45A _data           ends
.data:0000A45A
.rdata$r:0000A45C ; ===========================================================================
.rdata$r:0000A45C
.rdata$r:0000A45C ; Segment type: Pure data
.rdata$r:0000A45C ; Segment permissions: Read
.rdata$r:0000A45C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000A45C                 assume cs:_rdata$r
.rdata$r:0000A45C                 ;org 0A45Ch
.rdata$r:0000A45C ; COMDAT (pick any)
.rdata$r:0000A45C                 public ??_R3CCryptoGetTextPassword@N7z@NArchive@@8
.rdata$r:0000A45C ; NArchive::N7z::CCryptoGetTextPassword::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000A45C ??_R3CCryptoGetTextPassword@N7z@NArchive@@8 db    0
.rdata$r:0000A45C                                         ; DATA XREF: .rdata$r:0000A424o
.rdata$r:0000A45C                                         ; .rdata$r:0000A498o
.rdata$r:0000A45D                 db    0
.rdata$r:0000A45E                 db    0
.rdata$r:0000A45F                 db    0
.rdata$r:0000A460                 db    1
.rdata$r:0000A461                 db    0
.rdata$r:0000A462                 db    0
.rdata$r:0000A463                 db    0
.rdata$r:0000A464                 db    4
.rdata$r:0000A465                 db    0
.rdata$r:0000A466                 db    0
.rdata$r:0000A467                 db    0
.rdata$r:0000A468                 dd offset ??_R2CCryptoGetTextPassword@N7z@NArchive@@8 ; NArchive::N7z::CCryptoGetTextPassword::`RTTI Base Class Array'
.rdata$r:0000A468 _rdata$r        ends
.rdata$r:0000A468
.rdata$r:0000A46C ; ===========================================================================
.rdata$r:0000A46C
.rdata$r:0000A46C ; Segment type: Pure data
.rdata$r:0000A46C ; Segment permissions: Read
.rdata$r:0000A46C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000A46C                 assume cs:_rdata$r
.rdata$r:0000A46C                 ;org 0A46Ch
.rdata$r:0000A46C ; COMDAT (pick any)
.rdata$r:0000A46C                 public ??_R2CCryptoGetTextPassword@N7z@NArchive@@8
.rdata$r:0000A46C ; NArchive::N7z::CCryptoGetTextPassword::`RTTI Base Class Array'
.rdata$r:0000A46C ??_R2CCryptoGetTextPassword@N7z@NArchive@@8 dd offset ??_R1A@?0A@EA@CCryptoGetTextPassword@N7z@NArchive@@8
.rdata$r:0000A46C                                         ; DATA XREF: .rdata$r:0000A468o
.rdata$r:0000A46C                                         ; NArchive::N7z::CCryptoGetTextPassword::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000A470                 dd offset ??_R1A@?0A@EA@ICryptoGetTextPassword@@8 ; ICryptoGetTextPassword::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000A474                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000A478                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:0000A47C                 db    0
.rdata$r:0000A47D                 align 10h
.rdata$r:0000A47D _rdata$r        ends
.rdata$r:0000A47D
.rdata$r:0000A480 ; ===========================================================================
.rdata$r:0000A480
.rdata$r:0000A480 ; Segment type: Pure data
.rdata$r:0000A480 ; Segment permissions: Read
.rdata$r:0000A480 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000A480                 assume cs:_rdata$r
.rdata$r:0000A480                 ;org 0A480h
.rdata$r:0000A480 ; COMDAT (pick any)
.rdata$r:0000A480                 public ??_R1A@?0A@EA@CCryptoGetTextPassword@N7z@NArchive@@8
.rdata$r:0000A480 ; NArchive::N7z::CCryptoGetTextPassword::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000A480 ??_R1A@?0A@EA@CCryptoGetTextPassword@N7z@NArchive@@8 dd offset ??_R0?AVCCryptoGetTextPassword@N7z@NArchive@@@8
.rdata$r:0000A480                                         ; DATA XREF: .rdata$r:NArchive::N7z::CCryptoGetTextPassword::`RTTI Base Class Array'o
.rdata$r:0000A480                                         ; NArchive::N7z::CCryptoGetTextPassword `RTTI Type Descriptor'
.rdata$r:0000A484                 db    3
.rdata$r:0000A485                 db    0
.rdata$r:0000A486                 db    0
.rdata$r:0000A487                 db    0
.rdata$r:0000A488                 db    0
.rdata$r:0000A489                 db    0
.rdata$r:0000A48A                 db    0
.rdata$r:0000A48B                 db    0
.rdata$r:0000A48C                 db 0FFh
.rdata$r:0000A48D                 db 0FFh
.rdata$r:0000A48E                 db 0FFh
.rdata$r:0000A48F                 db 0FFh
.rdata$r:0000A490                 db    0
.rdata$r:0000A491                 db    0
.rdata$r:0000A492                 db    0
.rdata$r:0000A493                 db    0
.rdata$r:0000A494                 db  40h ; @
.rdata$r:0000A495                 db    0
.rdata$r:0000A496                 db    0
.rdata$r:0000A497                 db    0
.rdata$r:0000A498                 dd offset ??_R3CCryptoGetTextPassword@N7z@NArchive@@8 ; NArchive::N7z::CCryptoGetTextPassword::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000A498 _rdata$r        ends
.rdata$r:0000A498
.rdata$r:0000A49C ; ===========================================================================
.rdata$r:0000A49C
.rdata$r:0000A49C ; Segment type: Pure data
.rdata$r:0000A49C ; Segment permissions: Read
.rdata$r:0000A49C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000A49C                 assume cs:_rdata$r
.rdata$r:0000A49C                 ;org 0A49Ch
.rdata$r:0000A49C ; COMDAT (pick any)
.rdata$r:0000A49C                 public ??_R1A@?0A@EA@ICryptoGetTextPassword@@8
.rdata$r:0000A49C ; ICryptoGetTextPassword::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000A49C ??_R1A@?0A@EA@ICryptoGetTextPassword@@8 dd offset ??_R0?AUICryptoGetTextPassword@@@8
.rdata$r:0000A49C                                         ; DATA XREF: .rdata$r:0000A470o
.rdata$r:0000A49C                                         ; .rdata$r:ICryptoGetTextPassword::`RTTI Base Class Array'o
.rdata$r:0000A49C                                         ; ICryptoGetTextPassword `RTTI Type Descriptor'
.rdata$r:0000A4A0                 db    1
.rdata$r:0000A4A1                 db    0
.rdata$r:0000A4A2                 db    0
.rdata$r:0000A4A3                 db    0
.rdata$r:0000A4A4                 db    0
.rdata$r:0000A4A5                 db    0
.rdata$r:0000A4A6                 db    0
.rdata$r:0000A4A7                 db    0
.rdata$r:0000A4A8                 db 0FFh
.rdata$r:0000A4A9                 db 0FFh
.rdata$r:0000A4AA                 db 0FFh
.rdata$r:0000A4AB                 db 0FFh
.rdata$r:0000A4AC                 db    0
.rdata$r:0000A4AD                 db    0
.rdata$r:0000A4AE                 db    0
.rdata$r:0000A4AF                 db    0
.rdata$r:0000A4B0                 db  40h ; @
.rdata$r:0000A4B1                 db    0
.rdata$r:0000A4B2                 db    0
.rdata$r:0000A4B3                 db    0
.rdata$r:0000A4B4                 dd offset ??_R3ICryptoGetTextPassword@@8 ; ICryptoGetTextPassword::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000A4B4 _rdata$r        ends
.rdata$r:0000A4B4
.data:0000A4B8 ; ===========================================================================
.data:0000A4B8
.data:0000A4B8 ; Segment type: Pure data
.data:0000A4B8 ; Segment permissions: Read/Write
.data:0000A4B8 _data           segment dword public 'DATA' use32
.data:0000A4B8                 assume cs:_data
.data:0000A4B8                 ;org 0A4B8h
.data:0000A4B8 ; COMDAT (pick any)
.data:0000A4B8                 public ??_R0?AUICryptoGetTextPassword@@@8
.data:0000A4B8 ; struct ICryptoGetTextPassword `RTTI Type Descriptor'
.data:0000A4B8 ??_R0?AUICryptoGetTextPassword@@@8 dd offset ??_7type_info@@6B@
.data:0000A4B8                                         ; DATA XREF: .rdata$r:ICryptoGetTextPassword::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:0000A4B8                                         ; .rdata$r:0000B20Co
.data:0000A4B8                                         ; const type_info::`vftable'
.data:0000A4BC                 align 10h
.data:0000A4C0 a_?auicryptoget db '.?AUICryptoGetTextPassword@@',0
.data:0000A4DD                 align 10h
.data:0000A4DD _data           ends
.data:0000A4DD
.rdata$r:0000A4E0 ; ===========================================================================
.rdata$r:0000A4E0
.rdata$r:0000A4E0 ; Segment type: Pure data
.rdata$r:0000A4E0 ; Segment permissions: Read
.rdata$r:0000A4E0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000A4E0                 assume cs:_rdata$r
.rdata$r:0000A4E0                 ;org 0A4E0h
.rdata$r:0000A4E0 ; COMDAT (pick any)
.rdata$r:0000A4E0                 public ??_R3ICryptoGetTextPassword@@8
.rdata$r:0000A4E0 ; ICryptoGetTextPassword::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000A4E0 ??_R3ICryptoGetTextPassword@@8 db    0  ; DATA XREF: .rdata$r:0000A4B4o
.rdata$r:0000A4E0                                         ; .rdata$r:0000B210o
.rdata$r:0000A4E1                 db    0
.rdata$r:0000A4E2                 db    0
.rdata$r:0000A4E3                 db    0
.rdata$r:0000A4E4                 db    0
.rdata$r:0000A4E5                 db    0
.rdata$r:0000A4E6                 db    0
.rdata$r:0000A4E7                 db    0
.rdata$r:0000A4E8                 db    2
.rdata$r:0000A4E9                 db    0
.rdata$r:0000A4EA                 db    0
.rdata$r:0000A4EB                 db    0
.rdata$r:0000A4EC                 dd offset ??_R2ICryptoGetTextPassword@@8 ; ICryptoGetTextPassword::`RTTI Base Class Array'
.rdata$r:0000A4EC _rdata$r        ends
.rdata$r:0000A4EC
.rdata$r:0000A4F0 ; ===========================================================================
.rdata$r:0000A4F0
.rdata$r:0000A4F0 ; Segment type: Pure data
.rdata$r:0000A4F0 ; Segment permissions: Read
.rdata$r:0000A4F0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000A4F0                 assume cs:_rdata$r
.rdata$r:0000A4F0                 ;org 0A4F0h
.rdata$r:0000A4F0 ; COMDAT (pick any)
.rdata$r:0000A4F0                 public ??_R2ICryptoGetTextPassword@@8
.rdata$r:0000A4F0 ; ICryptoGetTextPassword::`RTTI Base Class Array'
.rdata$r:0000A4F0 ??_R2ICryptoGetTextPassword@@8 dd offset ??_R1A@?0A@EA@ICryptoGetTextPassword@@8
.rdata$r:0000A4F0                                         ; DATA XREF: .rdata$r:0000A4ECo
.rdata$r:0000A4F0                                         ; ICryptoGetTextPassword::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000A4F4                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000A4F8                 db    0
.rdata$r:0000A4F9                 align 4
.rdata$r:0000A4F9 _rdata$r        ends
.rdata$r:0000A4F9
.text:0000A4FC ; ===========================================================================
.text:0000A4FC
.text:0000A4FC ; Segment type: Pure code
.text:0000A4FC ; Segment permissions: Read/Execute
.text:0000A4FC _text           segment para public 'CODE' use32
.text:0000A4FC                 assume cs:_text
.text:0000A4FC                 ;org 0A4FCh
.text:0000A4FC ; COMDAT (pick any)
.text:0000A4FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A4FC
.text:0000A4FC ; =============== S U B R O U T I N E =======================================
.text:0000A4FC
.text:0000A4FC ; Attributes: bp-based frame
.text:0000A4FC
.text:0000A4FC ; __int32 __stdcall NArchive::N7z::CCryptoGetTextPassword::QueryInterface(NArchive::N7z::CCryptoGetTextPassword *this, const struct _GUID *Buf1, void **)
.text:0000A4FC                 public ?QueryInterface@CCryptoGetTextPassword@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z
.text:0000A4FC ?QueryInterface@CCryptoGetTextPassword@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z proc near
.text:0000A4FC                                         ; DATA XREF: .rdata:const NArchive::N7z::CCryptoGetTextPassword::`vftable'o
.text:0000A4FC
.text:0000A4FC this            = dword ptr  8
.text:0000A4FC Buf1            = dword ptr  0Ch
.text:0000A4FC arg_8           = dword ptr  10h
.text:0000A4FC
.text:0000A4FC                 push    ebp
.text:0000A4FD                 mov     ebp, esp
.text:0000A4FF                 mov     eax, [ebp+arg_8]
.text:0000A502                 mov     dword ptr [eax], 0
.text:0000A508                 push    offset _IID_IUnknown ; Buf2
.text:0000A50D                 mov     ecx, [ebp+Buf1]
.text:0000A510                 push    ecx             ; Buf1
.text:0000A511                 call    ___@8           ; __(x,x)
.text:0000A516                 test    eax, eax
.text:0000A518                 jz      short loc_A524
.text:0000A51A                 mov     edx, [ebp+arg_8]
.text:0000A51D                 mov     eax, [ebp+this]
.text:0000A520                 mov     [edx], eax
.text:0000A522                 jmp     short loc_A52B
.text:0000A524 ; ---------------------------------------------------------------------------
.text:0000A524
.text:0000A524 loc_A524:                               ; CODE XREF: NArchive::N7z::CCryptoGetTextPassword::QueryInterface(_GUID const &,void * *)+1Cj
.text:0000A524                 mov     eax, 80004002h
.text:0000A529                 jmp     short loc_A53C
.text:0000A52B ; ---------------------------------------------------------------------------
.text:0000A52B
.text:0000A52B loc_A52B:                               ; CODE XREF: NArchive::N7z::CCryptoGetTextPassword::QueryInterface(_GUID const &,void * *)+26j
.text:0000A52B                 mov     ecx, [ebp+this]
.text:0000A52E                 mov     edx, [ecx+4]
.text:0000A531                 add     edx, 1
.text:0000A534                 mov     eax, [ebp+this]
.text:0000A537                 mov     [eax+4], edx
.text:0000A53A                 xor     eax, eax
.text:0000A53C
.text:0000A53C loc_A53C:                               ; CODE XREF: NArchive::N7z::CCryptoGetTextPassword::QueryInterface(_GUID const &,void * *)+2Dj
.text:0000A53C                 cmp     ebp, esp
.text:0000A53E                 call    __RTC_CheckEsp
.text:0000A543                 pop     ebp
.text:0000A544                 retn    0Ch
.text:0000A544 ?QueryInterface@CCryptoGetTextPassword@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z endp
.text:0000A544
.text:0000A544 ; ---------------------------------------------------------------------------
.text:0000A547                 align 4
.text:0000A547 _text           ends
.text:0000A547
.text:0000A548 ; ===========================================================================
.text:0000A548
.text:0000A548 ; Segment type: Pure code
.text:0000A548 ; Segment permissions: Read/Execute
.text:0000A548 _text           segment para public 'CODE' use32
.text:0000A548                 assume cs:_text
.text:0000A548                 ;org 0A548h
.text:0000A548 ; COMDAT (pick any)
.text:0000A548                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A548
.text:0000A548 ; =============== S U B R O U T I N E =======================================
.text:0000A548
.text:0000A548 ; Attributes: bp-based frame
.text:0000A548
.text:0000A548 ; unsigned __int32 __stdcall NArchive::N7z::CCryptoGetTextPassword::AddRef(NArchive::N7z::CCryptoGetTextPassword *this)
.text:0000A548                 public ?AddRef@CCryptoGetTextPassword@N7z@NArchive@@UAGKXZ
.text:0000A548 ?AddRef@CCryptoGetTextPassword@N7z@NArchive@@UAGKXZ proc near
.text:0000A548                                         ; DATA XREF: .rdata:0000A408o
.text:0000A548
.text:0000A548 var_4           = dword ptr -4
.text:0000A548 this            = dword ptr  8
.text:0000A548
.text:0000A548                 push    ebp
.text:0000A549                 mov     ebp, esp
.text:0000A54B                 push    ecx
.text:0000A54C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000A553                 mov     eax, [ebp+this]
.text:0000A556                 mov     ecx, [eax+4]
.text:0000A559                 add     ecx, 1
.text:0000A55C                 mov     [ebp+var_4], ecx
.text:0000A55F                 mov     edx, [ebp+this]
.text:0000A562                 mov     eax, [ebp+var_4]
.text:0000A565                 mov     [edx+4], eax
.text:0000A568                 mov     eax, [ebp+var_4]
.text:0000A56B                 mov     esp, ebp
.text:0000A56D                 pop     ebp
.text:0000A56E                 retn    4
.text:0000A56E ?AddRef@CCryptoGetTextPassword@N7z@NArchive@@UAGKXZ endp
.text:0000A56E
.text:0000A56E ; ---------------------------------------------------------------------------
.text:0000A571                 align 4
.text:0000A571 _text           ends
.text:0000A571
.text:0000A574 ; ===========================================================================
.text:0000A574
.text:0000A574 ; Segment type: Pure code
.text:0000A574 ; Segment permissions: Read/Execute
.text:0000A574 _text           segment para public 'CODE' use32
.text:0000A574                 assume cs:_text
.text:0000A574                 ;org 0A574h
.text:0000A574 ; COMDAT (pick any)
.text:0000A574                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A574
.text:0000A574 ; =============== S U B R O U T I N E =======================================
.text:0000A574
.text:0000A574 ; Attributes: bp-based frame
.text:0000A574
.text:0000A574 ; unsigned __int32 __stdcall NArchive::N7z::CCryptoGetTextPassword::Release(NArchive::N7z::CCryptoGetTextPassword *this)
.text:0000A574                 public ?Release@CCryptoGetTextPassword@N7z@NArchive@@UAGKXZ
.text:0000A574 ?Release@CCryptoGetTextPassword@N7z@NArchive@@UAGKXZ proc near
.text:0000A574                                         ; DATA XREF: .rdata:0000A40Co
.text:0000A574
.text:0000A574 var_10          = dword ptr -10h
.text:0000A574 var_C           = dword ptr -0Ch
.text:0000A574 var_8           = dword ptr -8
.text:0000A574 var_4           = dword ptr -4
.text:0000A574 this            = dword ptr  8
.text:0000A574
.text:0000A574                 push    ebp
.text:0000A575                 mov     ebp, esp
.text:0000A577                 sub     esp, 10h
.text:0000A57A                 mov     eax, 0CCCCCCCCh
.text:0000A57F                 mov     [ebp+var_10], eax
.text:0000A582                 mov     [ebp+var_C], eax
.text:0000A585                 mov     [ebp+var_8], eax
.text:0000A588                 mov     [ebp+var_4], eax
.text:0000A58B                 mov     eax, [ebp+this]
.text:0000A58E                 mov     ecx, [eax+4]
.text:0000A591                 sub     ecx, 1
.text:0000A594                 mov     [ebp+var_C], ecx
.text:0000A597                 mov     edx, [ebp+this]
.text:0000A59A                 mov     eax, [ebp+var_C]
.text:0000A59D                 mov     [edx+4], eax
.text:0000A5A0                 cmp     [ebp+var_C], 0
.text:0000A5A4                 jz      short loc_A5AE
.text:0000A5A6                 mov     ecx, [ebp+this]
.text:0000A5A9                 mov     eax, [ecx+4]
.text:0000A5AC                 jmp     short loc_A5D8
.text:0000A5AE ; ---------------------------------------------------------------------------
.text:0000A5AE
.text:0000A5AE loc_A5AE:                               ; CODE XREF: NArchive::N7z::CCryptoGetTextPassword::Release(void)+30j
.text:0000A5AE                 mov     edx, [ebp+this]
.text:0000A5B1                 mov     [ebp+var_8], edx
.text:0000A5B4                 mov     eax, [ebp+var_8]
.text:0000A5B7                 mov     [ebp+var_4], eax
.text:0000A5BA                 cmp     [ebp+var_4], 0
.text:0000A5BE                 jz      short loc_A5CF
.text:0000A5C0                 push    1
.text:0000A5C2                 mov     ecx, [ebp+var_4]
.text:0000A5C5                 call    ??_GCCryptoGetTextPassword@N7z@NArchive@@QAEPAXI@Z ; NArchive::N7z::CCryptoGetTextPassword::`scalar deleting destructor'(uint)
.text:0000A5CA                 mov     [ebp+var_10], eax
.text:0000A5CD                 jmp     short loc_A5D6
.text:0000A5CF ; ---------------------------------------------------------------------------
.text:0000A5CF
.text:0000A5CF loc_A5CF:                               ; CODE XREF: NArchive::N7z::CCryptoGetTextPassword::Release(void)+4Aj
.text:0000A5CF                 mov     [ebp+var_10], 0
.text:0000A5D6
.text:0000A5D6 loc_A5D6:                               ; CODE XREF: NArchive::N7z::CCryptoGetTextPassword::Release(void)+59j
.text:0000A5D6                 xor     eax, eax
.text:0000A5D8
.text:0000A5D8 loc_A5D8:                               ; CODE XREF: NArchive::N7z::CCryptoGetTextPassword::Release(void)+38j
.text:0000A5D8                 add     esp, 10h
.text:0000A5DB                 cmp     ebp, esp
.text:0000A5DD                 call    __RTC_CheckEsp
.text:0000A5E2                 mov     esp, ebp
.text:0000A5E4                 pop     ebp
.text:0000A5E5                 retn    4
.text:0000A5E5 ?Release@CCryptoGetTextPassword@N7z@NArchive@@UAGKXZ endp
.text:0000A5E5
.text:0000A5E5 _text           ends
.text:0000A5E5
.text:0000A5E8 ; ===========================================================================
.text:0000A5E8
.text:0000A5E8 ; Segment type: Pure code
.text:0000A5E8 ; Segment permissions: Read/Execute
.text:0000A5E8 _text           segment para public 'CODE' use32
.text:0000A5E8                 assume cs:_text
.text:0000A5E8                 ;org 0A5E8h
.text:0000A5E8 ; COMDAT (pick any)
.text:0000A5E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A5E8
.text:0000A5E8 ; =============== S U B R O U T I N E =======================================
.text:0000A5E8
.text:0000A5E8 ; Attributes: bp-based frame
.text:0000A5E8
.text:0000A5E8 ; public: void * __thiscall NArchive::N7z::CCryptoGetTextPassword::`scalar deleting destructor'(unsigned int)
.text:0000A5E8                 public ??_GCCryptoGetTextPassword@N7z@NArchive@@QAEPAXI@Z
.text:0000A5E8 ??_GCCryptoGetTextPassword@N7z@NArchive@@QAEPAXI@Z proc near
.text:0000A5E8                                         ; CODE XREF: NArchive::N7z::CCryptoGetTextPassword::Release(void)+51p
.text:0000A5E8
.text:0000A5E8 var_4           = dword ptr -4
.text:0000A5E8 arg_0           = dword ptr  8
.text:0000A5E8
.text:0000A5E8                 push    ebp
.text:0000A5E9                 mov     ebp, esp
.text:0000A5EB                 push    ecx
.text:0000A5EC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000A5F3                 mov     [ebp+var_4], ecx
.text:0000A5F6                 mov     ecx, [ebp+var_4] ; this
.text:0000A5F9                 call    ??1CCryptoGetTextPassword@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCryptoGetTextPassword::~CCryptoGetTextPassword(void)
.text:0000A5FE                 mov     eax, [ebp+arg_0]
.text:0000A601                 and     eax, 1
.text:0000A604                 jz      short loc_A612
.text:0000A606                 mov     ecx, [ebp+var_4]
.text:0000A609                 push    ecx             ; void *
.text:0000A60A                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000A60F                 add     esp, 4
.text:0000A612
.text:0000A612 loc_A612:                               ; CODE XREF: NArchive::N7z::CCryptoGetTextPassword::`scalar deleting destructor'(uint)+1Cj
.text:0000A612                 mov     eax, [ebp+var_4]
.text:0000A615                 add     esp, 4
.text:0000A618                 cmp     ebp, esp
.text:0000A61A                 call    __RTC_CheckEsp
.text:0000A61F                 mov     esp, ebp
.text:0000A621                 pop     ebp
.text:0000A622                 retn    4
.text:0000A622 ??_GCCryptoGetTextPassword@N7z@NArchive@@QAEPAXI@Z endp
.text:0000A622
.text:0000A622 ; ---------------------------------------------------------------------------
.text:0000A625                 align 4
.text:0000A625 _text           ends
.text:0000A625
.text:0000A628 ; ===========================================================================
.text:0000A628
.text:0000A628 ; Segment type: Pure code
.text:0000A628 ; Segment permissions: Read/Execute
.text:0000A628 _text           segment para public 'CODE' use32
.text:0000A628                 assume cs:_text
.text:0000A628                 ;org 0A628h
.text:0000A628 ; COMDAT (pick any)
.text:0000A628                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A628
.text:0000A628 ; =============== S U B R O U T I N E =======================================
.text:0000A628
.text:0000A628 ; Attributes: bp-based frame
.text:0000A628
.text:0000A628 ; _DWORD __thiscall NArchive::N7z::CCryptoGetTextPassword::~CCryptoGetTextPassword(NArchive::N7z::CCryptoGetTextPassword *__hidden this)
.text:0000A628                 public ??1CCryptoGetTextPassword@N7z@NArchive@@QAE@XZ
.text:0000A628 ??1CCryptoGetTextPassword@N7z@NArchive@@QAE@XZ proc near
.text:0000A628                                         ; CODE XREF: NArchive::N7z::CCryptoGetTextPassword::`scalar deleting destructor'(uint)+11p
.text:0000A628
.text:0000A628 var_4           = dword ptr -4
.text:0000A628
.text:0000A628                 push    ebp
.text:0000A629                 mov     ebp, esp
.text:0000A62B                 push    ecx
.text:0000A62C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000A633                 mov     [ebp+var_4], ecx
.text:0000A636                 mov     ecx, [ebp+var_4]
.text:0000A639                 add     ecx, 8          ; this
.text:0000A63C                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000A641                 add     esp, 4
.text:0000A644                 cmp     ebp, esp
.text:0000A646                 call    __RTC_CheckEsp
.text:0000A64B                 mov     esp, ebp
.text:0000A64D                 pop     ebp
.text:0000A64E                 retn
.text:0000A64E ??1CCryptoGetTextPassword@N7z@NArchive@@QAE@XZ endp
.text:0000A64E
.text:0000A64E ; ---------------------------------------------------------------------------
.text:0000A64F                 align 10h
.text:0000A64F _text           ends
.text:0000A64F
.text:0000A650 ; ===========================================================================
.text:0000A650
.text:0000A650 ; Segment type: Pure code
.text:0000A650 ; Segment permissions: Read/Execute
.text:0000A650 _text           segment para public 'CODE' use32
.text:0000A650                 assume cs:_text
.text:0000A650                 ;org 0A650h
.text:0000A650 ; COMDAT (pick any)
.text:0000A650                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A650
.text:0000A650 ; =============== S U B R O U T I N E =======================================
.text:0000A650
.text:0000A650 ; Attributes: bp-based frame
.text:0000A650
.text:0000A650 ; _DWORD __thiscall NArchive::N7z::CCompressionMethodMode::CCompressionMethodMode(NArchive::N7z::CCompressionMethodMode *this, const struct NArchive::N7z::CCompressionMethodMode *)
.text:0000A650                 public ??0CCompressionMethodMode@N7z@NArchive@@QAE@ABU012@@Z
.text:0000A650 ??0CCompressionMethodMode@N7z@NArchive@@QAE@ABU012@@Z proc near
.text:0000A650                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+11FBp
.text:0000A650
.text:0000A650 var_10          = dword ptr -10h
.text:0000A650 var_C           = dword ptr -0Ch
.text:0000A650 var_4           = dword ptr -4
.text:0000A650 arg_0           = dword ptr  8
.text:0000A650
.text:0000A650                 push    ebp
.text:0000A651                 mov     ebp, esp
.text:0000A653                 push    0FFFFFFFFh
.text:0000A655                 push    offset __ehhandler$??0CCompressionMethodMode@N7z@NArchive@@QAE@ABU012@@Z
.text:0000A65A                 mov     eax, large fs:0
.text:0000A660                 push    eax
.text:0000A661                 push    ecx
.text:0000A662                 mov     [ebp+var_10], 0CCCCCCCCh
.text:0000A669                 mov     eax, dword ptr ds:___security_cookie
.text:0000A66E                 xor     eax, ebp
.text:0000A670                 push    eax
.text:0000A671                 lea     eax, [ebp+var_C]
.text:0000A674                 mov     large fs:0, eax
.text:0000A67A                 mov     [ebp+var_10], ecx
.text:0000A67D                 mov     eax, [ebp+arg_0]
.text:0000A680                 push    eax
.text:0000A681                 mov     ecx, [ebp+var_10]
.text:0000A684                 call    ??0?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@ABV0@@Z ; CObjectVector<NArchive::N7z::CMethodFull>::CObjectVector<NArchive::N7z::CMethodFull>(CObjectVector<NArchive::N7z::CMethodFull> const &)
.text:0000A689                 mov     [ebp+var_4], 0
.text:0000A690                 mov     ecx, [ebp+arg_0]
.text:0000A693                 add     ecx, 0Ch
.text:0000A696                 push    ecx
.text:0000A697                 mov     ecx, [ebp+var_10]
.text:0000A69A                 add     ecx, 0Ch
.text:0000A69D                 call    ??0?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@ABV0@@Z ; CRecordVector<NArchive::N7z::CBond2>::CRecordVector<NArchive::N7z::CBond2>(CRecordVector<NArchive::N7z::CBond2> const &)
.text:0000A6A2                 mov     byte ptr [ebp+var_4], 1
.text:0000A6A6                 mov     edx, [ebp+var_10]
.text:0000A6A9                 mov     eax, [ebp+arg_0]
.text:0000A6AC                 mov     cl, [eax+18h]
.text:0000A6AF                 mov     [edx+18h], cl
.text:0000A6B2                 mov     edx, [ebp+var_10]
.text:0000A6B5                 mov     eax, [ebp+arg_0]
.text:0000A6B8                 mov     cl, [eax+19h]
.text:0000A6BB                 mov     [edx+19h], cl
.text:0000A6BE                 mov     edx, [ebp+var_10]
.text:0000A6C1                 mov     eax, [ebp+arg_0]
.text:0000A6C4                 mov     ecx, [eax+1Ch]
.text:0000A6C7                 mov     [edx+1Ch], ecx
.text:0000A6CA                 mov     edx, [ebp+var_10]
.text:0000A6CD                 mov     eax, [ebp+arg_0]
.text:0000A6D0                 mov     cl, [eax+20h]
.text:0000A6D3                 mov     [edx+20h], cl
.text:0000A6D6                 mov     edx, [ebp+var_10]
.text:0000A6D9                 mov     eax, [ebp+arg_0]
.text:0000A6DC                 mov     cl, [eax+21h]
.text:0000A6DF                 mov     [edx+21h], cl
.text:0000A6E2                 mov     edx, [ebp+arg_0]
.text:0000A6E5                 add     edx, 24h ; '$'
.text:0000A6E8                 push    edx
.text:0000A6E9                 mov     ecx, [ebp+var_10]
.text:0000A6EC                 add     ecx, 24h ; '$'
.text:0000A6EF                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:0000A6F4                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000A6FB                 mov     eax, [ebp+var_10]
.text:0000A6FE                 mov     ecx, [ebp+var_C]
.text:0000A701                 mov     large fs:0, ecx
.text:0000A708                 pop     ecx
.text:0000A709                 add     esp, 10h
.text:0000A70C                 cmp     ebp, esp
.text:0000A70E                 call    __RTC_CheckEsp
.text:0000A713                 mov     esp, ebp
.text:0000A715                 pop     ebp
.text:0000A716                 retn    4
.text:0000A716 ??0CCompressionMethodMode@N7z@NArchive@@QAE@ABU012@@Z endp
.text:0000A716
.text:0000A716 ; ---------------------------------------------------------------------------
.text:0000A719                 align 4
.text:0000A719 _text           ends
.text:0000A719
.text$x:0000A71C ; ===========================================================================
.text$x:0000A71C
.text$x:0000A71C ; Segment type: Pure code
.text$x:0000A71C ; Segment permissions: Read/Execute
.text$x:0000A71C _text$x         segment para public 'CODE' use32
.text$x:0000A71C                 assume cs:_text$x
.text$x:0000A71C                 ;org 0A71Ch
.text$x:0000A71C ; COMDAT (pick associative to section at A650)
.text$x:0000A71C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000A71C
.text$x:0000A71C ; =============== S U B R O U T I N E =======================================
.text$x:0000A71C
.text$x:0000A71C
.text$x:0000A71C __unwindfunclet$??0CCompressionMethodMode@N7z@NArchive@@QAE@ABU012@@Z$0 proc near
.text$x:0000A71C                                         ; DATA XREF: .xdata$x:0000A750o
.text$x:0000A71C                 mov     ecx, [ebp-10h]
.text$x:0000A71F                 jmp     ??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>(void)
.text$x:0000A71F __unwindfunclet$??0CCompressionMethodMode@N7z@NArchive@@QAE@ABU012@@Z$0 endp
.text$x:0000A71F
.text$x:0000A724
.text$x:0000A724 ; =============== S U B R O U T I N E =======================================
.text$x:0000A724
.text$x:0000A724
.text$x:0000A724 __unwindfunclet$??0CCompressionMethodMode@N7z@NArchive@@QAE@ABU012@@Z$1 proc near
.text$x:0000A724                                         ; DATA XREF: .xdata$x:0000A758o
.text$x:0000A724                 mov     ecx, [ebp-10h]
.text$x:0000A727                 add     ecx, 0Ch
.text$x:0000A72A                 jmp     ??1?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CBond2>::~CRecordVector<NArchive::N7z::CBond2>(void)
.text$x:0000A72A __unwindfunclet$??0CCompressionMethodMode@N7z@NArchive@@QAE@ABU012@@Z$1 endp
.text$x:0000A72A
.text$x:0000A72F
.text$x:0000A72F ; =============== S U B R O U T I N E =======================================
.text$x:0000A72F
.text$x:0000A72F
.text$x:0000A72F __ehhandler$??0CCompressionMethodMode@N7z@NArchive@@QAE@ABU012@@Z proc near
.text$x:0000A72F                                         ; DATA XREF: NArchive::N7z::CCompressionMethodMode::CCompressionMethodMode(NArchive::N7z::CCompressionMethodMode const &)+5o
.text$x:0000A72F
.text$x:0000A72F arg_4           = dword ptr  8
.text$x:0000A72F
.text$x:0000A72F                 mov     edx, [esp+arg_4]
.text$x:0000A733                 lea     eax, [edx+0Ch]
.text$x:0000A736                 mov     ecx, [edx-8]
.text$x:0000A739                 xor     ecx, eax
.text$x:0000A73B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000A740                 mov     eax, offset __ehfuncinfo$??0CCompressionMethodMode@N7z@NArchive@@QAE@ABU012@@Z
.text$x:0000A745                 jmp     ___CxxFrameHandler3
.text$x:0000A745 __ehhandler$??0CCompressionMethodMode@N7z@NArchive@@QAE@ABU012@@Z endp
.text$x:0000A745
.text$x:0000A745 ; ---------------------------------------------------------------------------
.text$x:0000A74A                 align 4
.text$x:0000A74A _text$x         ends
.text$x:0000A74A
.xdata$x:0000A74C ; ===========================================================================
.xdata$x:0000A74C
.xdata$x:0000A74C ; Segment type: Pure data
.xdata$x:0000A74C ; Segment permissions: Read
.xdata$x:0000A74C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A74C                 assume cs:_xdata$x
.xdata$x:0000A74C                 ;org 0A74Ch
.xdata$x:0000A74C ; COMDAT (pick associative to section at A650)
.xdata$x:0000A74C __unwindtable$??0CCompressionMethodMode@N7z@NArchive@@QAE@ABU012@@Z db 0FFh
.xdata$x:0000A74C                                         ; DATA XREF: .xdata$x:0000A764o
.xdata$x:0000A74D                 db 0FFh
.xdata$x:0000A74E                 db 0FFh
.xdata$x:0000A74F                 db 0FFh
.xdata$x:0000A750                 dd offset __unwindfunclet$??0CCompressionMethodMode@N7z@NArchive@@QAE@ABU012@@Z$0
.xdata$x:0000A754                 align 8
.xdata$x:0000A758                 dd offset __unwindfunclet$??0CCompressionMethodMode@N7z@NArchive@@QAE@ABU012@@Z$1
.xdata$x:0000A75C __ehfuncinfo$??0CCompressionMethodMode@N7z@NArchive@@QAE@ABU012@@Z db  22h ; "
.xdata$x:0000A75C                                         ; DATA XREF: __ehhandler$??0CCompressionMethodMode@N7z@NArchive@@QAE@ABU012@@Z+11o
.xdata$x:0000A75D                 db    5
.xdata$x:0000A75E                 db  93h ; ô
.xdata$x:0000A75F                 db  19h
.xdata$x:0000A760                 db    2
.xdata$x:0000A761                 db    0
.xdata$x:0000A762                 db    0
.xdata$x:0000A763                 db    0
.xdata$x:0000A764                 dd offset __unwindtable$??0CCompressionMethodMode@N7z@NArchive@@QAE@ABU012@@Z
.xdata$x:0000A768                 db    0
.xdata$x:0000A769                 db    0
.xdata$x:0000A76A                 db    0
.xdata$x:0000A76B                 db    0
.xdata$x:0000A76C                 db    0
.xdata$x:0000A76D                 db    0
.xdata$x:0000A76E                 db    0
.xdata$x:0000A76F                 db    0
.xdata$x:0000A770                 db    0
.xdata$x:0000A771                 db    0
.xdata$x:0000A772                 db    0
.xdata$x:0000A773                 db    0
.xdata$x:0000A774                 db    0
.xdata$x:0000A775                 db    0
.xdata$x:0000A776                 db    0
.xdata$x:0000A777                 db    0
.xdata$x:0000A778                 db    0
.xdata$x:0000A779                 db    0
.xdata$x:0000A77A                 db    0
.xdata$x:0000A77B                 db    0
.xdata$x:0000A77C                 db    1
.xdata$x:0000A77D                 db    0
.xdata$x:0000A77E                 db    0
.xdata$x:0000A77F                 db    0
.xdata$x:0000A77F _xdata$x        ends
.xdata$x:0000A77F
.text:0000A780 ; ===========================================================================
.text:0000A780
.text:0000A780 ; Segment type: Pure code
.text:0000A780 ; Segment permissions: Read/Execute
.text:0000A780 _text           segment para public 'CODE' use32
.text:0000A780                 assume cs:_text
.text:0000A780                 ;org 0A780h
.text:0000A780 ; COMDAT (pick any)
.text:0000A780                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A780
.text:0000A780 ; =============== S U B R O U T I N E =======================================
.text:0000A780
.text:0000A780 ; Attributes: bp-based frame
.text:0000A780
.text:0000A780 ; _DWORD __thiscall NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(NArchive::N7z::CCompressionMethodMode *__hidden this)
.text:0000A780                 public ??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
.text:0000A780 ??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ proc near
.text:0000A780                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+127Ap
.text:0000A780                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1490p ...
.text:0000A780
.text:0000A780 var_10          = dword ptr -10h
.text:0000A780 var_C           = dword ptr -0Ch
.text:0000A780 var_4           = dword ptr -4
.text:0000A780
.text:0000A780                 push    ebp
.text:0000A781                 mov     ebp, esp
.text:0000A783                 push    0FFFFFFFFh
.text:0000A785                 push    offset __ehhandler$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
.text:0000A78A                 mov     eax, large fs:0
.text:0000A790                 push    eax
.text:0000A791                 push    ecx
.text:0000A792                 mov     [ebp+var_10], 0CCCCCCCCh
.text:0000A799                 mov     eax, dword ptr ds:___security_cookie
.text:0000A79E                 xor     eax, ebp
.text:0000A7A0                 push    eax
.text:0000A7A1                 lea     eax, [ebp+var_C]
.text:0000A7A4                 mov     large fs:0, eax
.text:0000A7AA                 mov     [ebp+var_10], ecx
.text:0000A7AD                 mov     [ebp+var_4], 1
.text:0000A7B4                 mov     ecx, [ebp+var_10]
.text:0000A7B7                 add     ecx, 24h ; '$'  ; this
.text:0000A7BA                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000A7BF                 mov     byte ptr [ebp+var_4], 0
.text:0000A7C3                 mov     ecx, [ebp+var_10]
.text:0000A7C6                 add     ecx, 0Ch
.text:0000A7C9                 call    ??1?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CBond2>::~CRecordVector<NArchive::N7z::CBond2>(void)
.text:0000A7CE                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000A7D5                 mov     ecx, [ebp+var_10]
.text:0000A7D8                 call    ??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>(void)
.text:0000A7DD                 mov     ecx, [ebp+var_C]
.text:0000A7E0                 mov     large fs:0, ecx
.text:0000A7E7                 pop     ecx
.text:0000A7E8                 add     esp, 10h
.text:0000A7EB                 cmp     ebp, esp
.text:0000A7ED                 call    __RTC_CheckEsp
.text:0000A7F2                 mov     esp, ebp
.text:0000A7F4                 pop     ebp
.text:0000A7F5                 retn
.text:0000A7F5 ??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ endp
.text:0000A7F5
.text:0000A7F5 ; ---------------------------------------------------------------------------
.text:0000A7F6                 align 4
.text:0000A7F6 _text           ends
.text:0000A7F6
.text$x:0000A7F8 ; ===========================================================================
.text$x:0000A7F8
.text$x:0000A7F8 ; Segment type: Pure code
.text$x:0000A7F8 ; Segment permissions: Read/Execute
.text$x:0000A7F8 _text$x         segment para public 'CODE' use32
.text$x:0000A7F8                 assume cs:_text$x
.text$x:0000A7F8                 ;org 0A7F8h
.text$x:0000A7F8 ; COMDAT (pick associative to section at A780)
.text$x:0000A7F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000A7F8
.text$x:0000A7F8 ; =============== S U B R O U T I N E =======================================
.text$x:0000A7F8
.text$x:0000A7F8
.text$x:0000A7F8 __unwindfunclet$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:0000A7F8                                         ; DATA XREF: .xdata$x:0000A82Co
.text$x:0000A7F8                 mov     ecx, [ebp-10h]
.text$x:0000A7FB                 jmp     ??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>(void)
.text$x:0000A7FB __unwindfunclet$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ$0 endp
.text$x:0000A7FB
.text$x:0000A800
.text$x:0000A800 ; =============== S U B R O U T I N E =======================================
.text$x:0000A800
.text$x:0000A800
.text$x:0000A800 __unwindfunclet$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ$1 proc near
.text$x:0000A800                                         ; DATA XREF: .xdata$x:0000A834o
.text$x:0000A800                 mov     ecx, [ebp-10h]
.text$x:0000A803                 add     ecx, 0Ch
.text$x:0000A806                 jmp     ??1?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CBond2>::~CRecordVector<NArchive::N7z::CBond2>(void)
.text$x:0000A806 __unwindfunclet$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ$1 endp
.text$x:0000A806
.text$x:0000A80B
.text$x:0000A80B ; =============== S U B R O U T I N E =======================================
.text$x:0000A80B
.text$x:0000A80B
.text$x:0000A80B __ehhandler$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ proc near
.text$x:0000A80B                                         ; DATA XREF: NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(void)+5o
.text$x:0000A80B
.text$x:0000A80B arg_4           = dword ptr  8
.text$x:0000A80B
.text$x:0000A80B                 mov     edx, [esp+arg_4]
.text$x:0000A80F                 lea     eax, [edx+0Ch]
.text$x:0000A812                 mov     ecx, [edx-8]
.text$x:0000A815                 xor     ecx, eax
.text$x:0000A817                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000A81C                 mov     eax, offset __ehfuncinfo$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
.text$x:0000A821                 jmp     ___CxxFrameHandler3
.text$x:0000A821 __ehhandler$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ endp
.text$x:0000A821
.text$x:0000A821 ; ---------------------------------------------------------------------------
.text$x:0000A826                 align 4
.text$x:0000A826 _text$x         ends
.text$x:0000A826
.xdata$x:0000A828 ; ===========================================================================
.xdata$x:0000A828
.xdata$x:0000A828 ; Segment type: Pure data
.xdata$x:0000A828 ; Segment permissions: Read
.xdata$x:0000A828 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A828                 assume cs:_xdata$x
.xdata$x:0000A828                 ;org 0A828h
.xdata$x:0000A828 ; COMDAT (pick associative to section at A780)
.xdata$x:0000A828 __unwindtable$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:0000A828                                         ; DATA XREF: .xdata$x:0000A840o
.xdata$x:0000A829                 db 0FFh
.xdata$x:0000A82A                 db 0FFh
.xdata$x:0000A82B                 db 0FFh
.xdata$x:0000A82C                 dd offset __unwindfunclet$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ$0
.xdata$x:0000A830                 db    0
.xdata$x:0000A831                 db    0
.xdata$x:0000A832                 db    0
.xdata$x:0000A833                 db    0
.xdata$x:0000A834                 dd offset __unwindfunclet$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ$1
.xdata$x:0000A838 __ehfuncinfo$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:0000A838                                         ; DATA XREF: __ehhandler$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ+11o
.xdata$x:0000A839                 db    5
.xdata$x:0000A83A                 db  93h ; ô
.xdata$x:0000A83B                 db  19h
.xdata$x:0000A83C                 db    2
.xdata$x:0000A83D                 db    0
.xdata$x:0000A83E                 db    0
.xdata$x:0000A83F                 db    0
.xdata$x:0000A840                 dd offset __unwindtable$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
.xdata$x:0000A844                 db    0
.xdata$x:0000A845                 db    0
.xdata$x:0000A846                 db    0
.xdata$x:0000A847                 db    0
.xdata$x:0000A848                 db    0
.xdata$x:0000A849                 db    0
.xdata$x:0000A84A                 db    0
.xdata$x:0000A84B                 db    0
.xdata$x:0000A84C                 db    0
.xdata$x:0000A84D                 db    0
.xdata$x:0000A84E                 db    0
.xdata$x:0000A84F                 db    0
.xdata$x:0000A850                 db    0
.xdata$x:0000A851                 db    0
.xdata$x:0000A852                 db    0
.xdata$x:0000A853                 db    0
.xdata$x:0000A854                 db    0
.xdata$x:0000A855                 db    0
.xdata$x:0000A856                 db    0
.xdata$x:0000A857                 db    0
.xdata$x:0000A858                 db    1
.xdata$x:0000A859                 db    0
.xdata$x:0000A85A                 db    0
.xdata$x:0000A85B                 db    0
.xdata$x:0000A85B _xdata$x        ends
.xdata$x:0000A85B
.text:0000A85C ; ===========================================================================
.text:0000A85C
.text:0000A85C ; Segment type: Pure code
.text:0000A85C ; Segment permissions: Read/Execute
.text:0000A85C _text           segment para public 'CODE' use32
.text:0000A85C                 assume cs:_text
.text:0000A85C                 ;org 0A85Ch
.text:0000A85C ; COMDAT (pick any)
.text:0000A85C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A85C
.text:0000A85C ; =============== S U B R O U T I N E =======================================
.text:0000A85C
.text:0000A85C ; Attributes: bp-based frame
.text:0000A85C
.text:0000A85C ; _DWORD __thiscall NArchive::N7z::CRepackInStreamWithSizes::CRepackInStreamWithSizes(NArchive::N7z::CRepackInStreamWithSizes *__hidden this)
.text:0000A85C                 public ??0CRepackInStreamWithSizes@N7z@NArchive@@QAE@XZ
.text:0000A85C ??0CRepackInStreamWithSizes@N7z@NArchive@@QAE@XZ proc near
.text:0000A85C                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1B7Cp
.text:0000A85C
.text:0000A85C var_4           = dword ptr -4
.text:0000A85C
.text:0000A85C                 push    ebp
.text:0000A85D                 mov     ebp, esp
.text:0000A85F                 push    ecx
.text:0000A860                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000A867                 mov     [ebp+var_4], ecx
.text:0000A86A                 mov     ecx, [ebp+var_4] ; this
.text:0000A86D                 call    ??0ISequentialInStream@@QAE@XZ ; ISequentialInStream::ISequentialInStream(void)
.text:0000A872                 mov     ecx, [ebp+var_4]
.text:0000A875                 add     ecx, 4          ; this
.text:0000A878                 call    ??0ICompressGetSubStreamSize@@QAE@XZ ; ICompressGetSubStreamSize::ICompressGetSubStreamSize(void)
.text:0000A87D                 mov     ecx, [ebp+var_4]
.text:0000A880                 add     ecx, 8          ; this
.text:0000A883                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:0000A888                 mov     eax, [ebp+var_4]
.text:0000A88B                 mov     dword ptr [eax], offset ??_7CRepackInStreamWithSizes@N7z@NArchive@@6BISequentialInStream@@@ ; const NArchive::N7z::CRepackInStreamWithSizes::`vftable'{for `ISequentialInStream'}
.text:0000A891                 mov     ecx, [ebp+var_4]
.text:0000A894                 mov     dword ptr [ecx+4], offset ??_7CRepackInStreamWithSizes@N7z@NArchive@@6BICompressGetSubStreamSize@@@ ; const NArchive::N7z::CRepackInStreamWithSizes::`vftable'{for `ICompressGetSubStreamSize'}
.text:0000A89B                 mov     ecx, [ebp+var_4]
.text:0000A89E                 add     ecx, 0Ch
.text:0000A8A1                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(void)
.text:0000A8A6                 mov     eax, [ebp+var_4]
.text:0000A8A9                 add     esp, 4
.text:0000A8AC                 cmp     ebp, esp
.text:0000A8AE                 call    __RTC_CheckEsp
.text:0000A8B3                 mov     esp, ebp
.text:0000A8B5                 pop     ebp
.text:0000A8B6                 retn
.text:0000A8B6 ??0CRepackInStreamWithSizes@N7z@NArchive@@QAE@XZ endp
.text:0000A8B6
.text:0000A8B6 ; ---------------------------------------------------------------------------
.text:0000A8B7                 align 4
.text:0000A8B7 _text           ends
.text:0000A8B7
.rdata:0000A8B8 ; ===========================================================================
.rdata:0000A8B8
.rdata:0000A8B8 ; Segment type: Pure data
.rdata:0000A8B8 ; Segment permissions: Read
.rdata:0000A8B8 _rdata          segment dword public 'DATA' use32
.rdata:0000A8B8                 assume cs:_rdata
.rdata:0000A8B8                 ;org 0A8B8h
.rdata:0000A8B8 ; COMDAT (pick largest)
.rdata:0000A8B8                 dd offset ??_R4CRepackInStreamWithSizes@N7z@NArchive@@6BICompressGetSubStreamSize@@@ ; const NArchive::N7z::CRepackInStreamWithSizes::`RTTI Complete Object Locator'{for `ICompressGetSubStreamSize'}
.rdata:0000A8BC                 public ??_7CRepackInStreamWithSizes@N7z@NArchive@@6BICompressGetSubStreamSize@@@
.rdata:0000A8BC ; const NArchive::N7z::CRepackInStreamWithSizes::`vftable'{for `ICompressGetSubStreamSize'}
.rdata:0000A8BC ??_7CRepackInStreamWithSizes@N7z@NArchive@@6BICompressGetSubStreamSize@@@ dd offset ?QueryInterface@CRepackInStreamWithSizes@N7z@NArchive@@W3AGJABU_GUID@@PAPAX@Z
.rdata:0000A8BC                                         ; DATA XREF: NArchive::N7z::CRepackInStreamWithSizes::CRepackInStreamWithSizes(void)+38o
.rdata:0000A8BC                                         ; [thunk]:NArchive::N7z::CRepackInStreamWithSizes::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:0000A8C0                 dd offset ?AddRef@CRepackInStreamWithSizes@N7z@NArchive@@W3AGKXZ ; [thunk]:NArchive::N7z::CRepackInStreamWithSizes::AddRef`adjustor{4}' (void)
.rdata:0000A8C4                 dd offset ?Release@CRepackInStreamWithSizes@N7z@NArchive@@W3AGKXZ ; [thunk]:NArchive::N7z::CRepackInStreamWithSizes::Release`adjustor{4}' (void)
.rdata:0000A8C8                 dd offset ?GetSubStreamSize@CRepackInStreamWithSizes@N7z@NArchive@@UAGJ_KPA_K@Z ; NArchive::N7z::CRepackInStreamWithSizes::GetSubStreamSize(unsigned __int64,unsigned __int64 *)
.rdata:0000A8C8 _rdata          ends
.rdata:0000A8C8
.rdata:0000A8CC ; ===========================================================================
.rdata:0000A8CC
.rdata:0000A8CC ; Segment type: Pure data
.rdata:0000A8CC ; Segment permissions: Read
.rdata:0000A8CC _rdata          segment dword public 'DATA' use32
.rdata:0000A8CC                 assume cs:_rdata
.rdata:0000A8CC                 ;org 0A8CCh
.rdata:0000A8CC ; COMDAT (pick largest)
.rdata:0000A8CC                 dd offset ??_R4CRepackInStreamWithSizes@N7z@NArchive@@6BISequentialInStream@@@ ; const NArchive::N7z::CRepackInStreamWithSizes::`RTTI Complete Object Locator'{for `ISequentialInStream'}
.rdata:0000A8D0                 public ??_7CRepackInStreamWithSizes@N7z@NArchive@@6BISequentialInStream@@@
.rdata:0000A8D0 ; const NArchive::N7z::CRepackInStreamWithSizes::`vftable'{for `ISequentialInStream'}
.rdata:0000A8D0 ??_7CRepackInStreamWithSizes@N7z@NArchive@@6BISequentialInStream@@@ dd offset ?QueryInterface@CRepackInStreamWithSizes@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z
.rdata:0000A8D0                                         ; DATA XREF: NArchive::N7z::CRepackInStreamWithSizes::CRepackInStreamWithSizes(void)+2Fo
.rdata:0000A8D0                                         ; NArchive::N7z::CRepackInStreamWithSizes::QueryInterface(_GUID const &,void * *)
.rdata:0000A8D4                 dd offset ?AddRef@CRepackInStreamWithSizes@N7z@NArchive@@UAGKXZ ; NArchive::N7z::CRepackInStreamWithSizes::AddRef(void)
.rdata:0000A8D8                 dd offset ?Release@CRepackInStreamWithSizes@N7z@NArchive@@UAGKXZ ; NArchive::N7z::CRepackInStreamWithSizes::Release(void)
.rdata:0000A8DC                 dd offset ?Read@CRepackInStreamWithSizes@N7z@NArchive@@UAGJPAXIPAI@Z ; NArchive::N7z::CRepackInStreamWithSizes::Read(void *,uint,uint *)
.rdata:0000A8DC _rdata          ends
.rdata:0000A8DC
.rdata$r:0000A8E0 ; ===========================================================================
.rdata$r:0000A8E0
.rdata$r:0000A8E0 ; Segment type: Pure data
.rdata$r:0000A8E0 ; Segment permissions: Read
.rdata$r:0000A8E0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000A8E0                 assume cs:_rdata$r
.rdata$r:0000A8E0                 ;org 0A8E0h
.rdata$r:0000A8E0 ; COMDAT (pick any)
.rdata$r:0000A8E0                 public ??_R4CRepackInStreamWithSizes@N7z@NArchive@@6BISequentialInStream@@@
.rdata$r:0000A8E0 ; const NArchive::N7z::CRepackInStreamWithSizes::`RTTI Complete Object Locator'{for `ISequentialInStream'}
.rdata$r:0000A8E0 ??_R4CRepackInStreamWithSizes@N7z@NArchive@@6BISequentialInStream@@@ db    0
.rdata$r:0000A8E0                                         ; DATA XREF: .rdata:0000A8CCo
.rdata$r:0000A8E1                 db    0
.rdata$r:0000A8E2                 db    0
.rdata$r:0000A8E3                 db    0
.rdata$r:0000A8E4                 db    0
.rdata$r:0000A8E5                 db    0
.rdata$r:0000A8E6                 db    0
.rdata$r:0000A8E7                 db    0
.rdata$r:0000A8E8                 db    0
.rdata$r:0000A8E9                 db    0
.rdata$r:0000A8EA                 db    0
.rdata$r:0000A8EB                 db    0
.rdata$r:0000A8EC                 dd offset ??_R0?AVCRepackInStreamWithSizes@N7z@NArchive@@@8 ; NArchive::N7z::CRepackInStreamWithSizes `RTTI Type Descriptor'
.rdata$r:0000A8F0                 dd offset ??_R3CRepackInStreamWithSizes@N7z@NArchive@@8 ; NArchive::N7z::CRepackInStreamWithSizes::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000A8F0 _rdata$r        ends
.rdata$r:0000A8F0
.data:0000A8F4 ; ===========================================================================
.data:0000A8F4
.data:0000A8F4 ; Segment type: Pure data
.data:0000A8F4 ; Segment permissions: Read/Write
.data:0000A8F4 _data           segment dword public 'DATA' use32
.data:0000A8F4                 assume cs:_data
.data:0000A8F4                 ;org 0A8F4h
.data:0000A8F4 ; COMDAT (pick any)
.data:0000A8F4                 public ??_R0?AVCRepackInStreamWithSizes@N7z@NArchive@@@8
.data:0000A8F4 ; class NArchive::N7z::CRepackInStreamWithSizes `RTTI Type Descriptor'
.data:0000A8F4 ??_R0?AVCRepackInStreamWithSizes@N7z@NArchive@@@8 dd offset ??_7type_info@@6B@
.data:0000A8F4                                         ; DATA XREF: .rdata$r:0000A8ECo
.data:0000A8F4                                         ; .rdata$r:NArchive::N7z::CRepackInStreamWithSizes::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:0000A8F4                                         ; const type_info::`vftable'
.data:0000A8F8                 db    0
.data:0000A8F9                 db    0
.data:0000A8FA                 db    0
.data:0000A8FB                 db    0
.data:0000A8FC                 db  2Eh ; .
.data:0000A8FD                 db  3Fh ; ?
.data:0000A8FE                 db  41h ; A
.data:0000A8FF                 db  56h ; V
.data:0000A900                 db  43h ; C
.data:0000A901                 db  52h ; R
.data:0000A902                 db  65h ; e
.data:0000A903                 db  70h ; p
.data:0000A904                 db  61h ; a
.data:0000A905                 db  63h ; c
.data:0000A906                 db  6Bh ; k
.data:0000A907                 db  49h ; I
.data:0000A908                 db  6Eh ; n
.data:0000A909                 db  53h ; S
.data:0000A90A                 db  74h ; t
.data:0000A90B                 db  72h ; r
.data:0000A90C                 db  65h ; e
.data:0000A90D                 db  61h ; a
.data:0000A90E                 db  6Dh ; m
.data:0000A90F                 db  57h ; W
.data:0000A910                 db  69h ; i
.data:0000A911                 db  74h ; t
.data:0000A912                 db  68h ; h
.data:0000A913                 db  53h ; S
.data:0000A914                 db  69h ; i
.data:0000A915                 db  7Ah ; z
.data:0000A916                 db  65h ; e
.data:0000A917                 db  73h ; s
.data:0000A918                 db  40h ; @
.data:0000A919                 db  4Eh ; N
.data:0000A91A                 db  37h ; 7
.data:0000A91B                 db  7Ah ; z
.data:0000A91C                 db  40h ; @
.data:0000A91D                 db  4Eh ; N
.data:0000A91E                 db  41h ; A
.data:0000A91F                 db  72h ; r
.data:0000A920                 db  63h ; c
.data:0000A921                 db  68h ; h
.data:0000A922                 db  69h ; i
.data:0000A923                 db  76h ; v
.data:0000A924                 db  65h ; e
.data:0000A925                 db  40h ; @
.data:0000A926                 db  40h ; @
.data:0000A927                 db    0
.data:0000A927 _data           ends
.data:0000A927
.rdata$r:0000A928 ; ===========================================================================
.rdata$r:0000A928
.rdata$r:0000A928 ; Segment type: Pure data
.rdata$r:0000A928 ; Segment permissions: Read
.rdata$r:0000A928 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000A928                 assume cs:_rdata$r
.rdata$r:0000A928                 ;org 0A928h
.rdata$r:0000A928 ; COMDAT (pick any)
.rdata$r:0000A928                 public ??_R3CRepackInStreamWithSizes@N7z@NArchive@@8
.rdata$r:0000A928 ; NArchive::N7z::CRepackInStreamWithSizes::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000A928 ??_R3CRepackInStreamWithSizes@N7z@NArchive@@8 db    0
.rdata$r:0000A928                                         ; DATA XREF: .rdata$r:0000A8F0o
.rdata$r:0000A928                                         ; .rdata$r:0000A96Co ...
.rdata$r:0000A929                 db    0
.rdata$r:0000A92A                 db    0
.rdata$r:0000A92B                 db    0
.rdata$r:0000A92C                 db    1
.rdata$r:0000A92D                 db    0
.rdata$r:0000A92E                 db    0
.rdata$r:0000A92F                 db    0
.rdata$r:0000A930                 db    6
.rdata$r:0000A931                 db    0
.rdata$r:0000A932                 db    0
.rdata$r:0000A933                 db    0
.rdata$r:0000A934                 dd offset ??_R2CRepackInStreamWithSizes@N7z@NArchive@@8 ; NArchive::N7z::CRepackInStreamWithSizes::`RTTI Base Class Array'
.rdata$r:0000A934 _rdata$r        ends
.rdata$r:0000A934
.rdata$r:0000A938 ; ===========================================================================
.rdata$r:0000A938
.rdata$r:0000A938 ; Segment type: Pure data
.rdata$r:0000A938 ; Segment permissions: Read
.rdata$r:0000A938 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000A938                 assume cs:_rdata$r
.rdata$r:0000A938                 ;org 0A938h
.rdata$r:0000A938 ; COMDAT (pick any)
.rdata$r:0000A938                 public ??_R2CRepackInStreamWithSizes@N7z@NArchive@@8
.rdata$r:0000A938 ; NArchive::N7z::CRepackInStreamWithSizes::`RTTI Base Class Array'
.rdata$r:0000A938 ??_R2CRepackInStreamWithSizes@N7z@NArchive@@8 dd offset ??_R1A@?0A@EA@CRepackInStreamWithSizes@N7z@NArchive@@8
.rdata$r:0000A938                                         ; DATA XREF: .rdata$r:0000A934o
.rdata$r:0000A938                                         ; NArchive::N7z::CRepackInStreamWithSizes::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000A93C                 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000A940                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:0000A944                 dd offset ??_R13?0A@EA@ICompressGetSubStreamSize@@8 ; ICompressGetSubStreamSize::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:0000A948                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:0000A94C                 dd offset ??_R17?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:0000A950                 db    0
.rdata$r:0000A951                 align 4
.rdata$r:0000A951 _rdata$r        ends
.rdata$r:0000A951
.rdata$r:0000A954 ; ===========================================================================
.rdata$r:0000A954
.rdata$r:0000A954 ; Segment type: Pure data
.rdata$r:0000A954 ; Segment permissions: Read
.rdata$r:0000A954 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000A954                 assume cs:_rdata$r
.rdata$r:0000A954                 ;org 0A954h
.rdata$r:0000A954 ; COMDAT (pick any)
.rdata$r:0000A954                 public ??_R1A@?0A@EA@CRepackInStreamWithSizes@N7z@NArchive@@8
.rdata$r:0000A954 ; NArchive::N7z::CRepackInStreamWithSizes::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000A954 ??_R1A@?0A@EA@CRepackInStreamWithSizes@N7z@NArchive@@8 dd offset ??_R0?AVCRepackInStreamWithSizes@N7z@NArchive@@@8
.rdata$r:0000A954                                         ; DATA XREF: .rdata$r:NArchive::N7z::CRepackInStreamWithSizes::`RTTI Base Class Array'o
.rdata$r:0000A954                                         ; NArchive::N7z::CRepackInStreamWithSizes `RTTI Type Descriptor'
.rdata$r:0000A958                 db    5
.rdata$r:0000A959                 db    0
.rdata$r:0000A95A                 db    0
.rdata$r:0000A95B                 db    0
.rdata$r:0000A95C                 db    0
.rdata$r:0000A95D                 db    0
.rdata$r:0000A95E                 db    0
.rdata$r:0000A95F                 db    0
.rdata$r:0000A960                 db 0FFh
.rdata$r:0000A961                 db 0FFh
.rdata$r:0000A962                 db 0FFh
.rdata$r:0000A963                 db 0FFh
.rdata$r:0000A964                 db    0
.rdata$r:0000A965                 db    0
.rdata$r:0000A966                 db    0
.rdata$r:0000A967                 db    0
.rdata$r:0000A968                 db  40h ; @
.rdata$r:0000A969                 db    0
.rdata$r:0000A96A                 db    0
.rdata$r:0000A96B                 db    0
.rdata$r:0000A96C                 dd offset ??_R3CRepackInStreamWithSizes@N7z@NArchive@@8 ; NArchive::N7z::CRepackInStreamWithSizes::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000A96C _rdata$r        ends
.rdata$r:0000A96C
.rdata$r:0000A970 ; ===========================================================================
.rdata$r:0000A970
.rdata$r:0000A970 ; Segment type: Pure data
.rdata$r:0000A970 ; Segment permissions: Read
.rdata$r:0000A970 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000A970                 assume cs:_rdata$r
.rdata$r:0000A970                 ;org 0A970h
.rdata$r:0000A970 ; COMDAT (pick any)
.rdata$r:0000A970                 public ??_R13?0A@EA@ICompressGetSubStreamSize@@8
.rdata$r:0000A970 ; ICompressGetSubStreamSize::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:0000A970 ??_R13?0A@EA@ICompressGetSubStreamSize@@8 dd offset ??_R0?AUICompressGetSubStreamSize@@@8
.rdata$r:0000A970                                         ; DATA XREF: .rdata$r:0000A944o
.rdata$r:0000A970                                         ; .rdata$r:0000ADA8o
.rdata$r:0000A970                                         ; ICompressGetSubStreamSize `RTTI Type Descriptor'
.rdata$r:0000A974                 db    1
.rdata$r:0000A975                 db    0
.rdata$r:0000A976                 db    0
.rdata$r:0000A977                 db    0
.rdata$r:0000A978                 db    4
.rdata$r:0000A979                 db    0
.rdata$r:0000A97A                 db    0
.rdata$r:0000A97B                 db    0
.rdata$r:0000A97C                 db 0FFh
.rdata$r:0000A97D                 db 0FFh
.rdata$r:0000A97E                 db 0FFh
.rdata$r:0000A97F                 db 0FFh
.rdata$r:0000A980                 db    0
.rdata$r:0000A981                 db    0
.rdata$r:0000A982                 db    0
.rdata$r:0000A983                 db    0
.rdata$r:0000A984                 db  40h ; @
.rdata$r:0000A985                 db    0
.rdata$r:0000A986                 db    0
.rdata$r:0000A987                 db    0
.rdata$r:0000A988                 dd offset ??_R3ICompressGetSubStreamSize@@8 ; ICompressGetSubStreamSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000A988 _rdata$r        ends
.rdata$r:0000A988
.data:0000A98C ; ===========================================================================
.data:0000A98C
.data:0000A98C ; Segment type: Pure data
.data:0000A98C ; Segment permissions: Read/Write
.data:0000A98C _data           segment dword public 'DATA' use32
.data:0000A98C                 assume cs:_data
.data:0000A98C                 ;org 0A98Ch
.data:0000A98C ; COMDAT (pick any)
.data:0000A98C                 public ??_R0?AUICompressGetSubStreamSize@@@8
.data:0000A98C ; struct ICompressGetSubStreamSize `RTTI Type Descriptor'
.data:0000A98C ??_R0?AUICompressGetSubStreamSize@@@8 dd offset ??_7type_info@@6B@
.data:0000A98C                                         ; DATA XREF: .rdata$r:ICompressGetSubStreamSize::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:0000A98C                                         ; .rdata$r:ICompressGetSubStreamSize::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:0000A98C                                         ; const type_info::`vftable'
.data:0000A990                 db    0
.data:0000A991                 db    0
.data:0000A992                 db    0
.data:0000A993                 db    0
.data:0000A994                 db  2Eh ; .
.data:0000A995                 db  3Fh ; ?
.data:0000A996                 db  41h ; A
.data:0000A997                 db  55h ; U
.data:0000A998                 db  49h ; I
.data:0000A999                 db  43h ; C
.data:0000A99A                 db  6Fh ; o
.data:0000A99B                 db  6Dh ; m
.data:0000A99C                 db  70h ; p
.data:0000A99D                 db  72h ; r
.data:0000A99E                 db  65h ; e
.data:0000A99F                 db  73h ; s
.data:0000A9A0                 db  73h ; s
.data:0000A9A1                 db  47h ; G
.data:0000A9A2                 db  65h ; e
.data:0000A9A3                 db  74h ; t
.data:0000A9A4                 db  53h ; S
.data:0000A9A5                 db  75h ; u
.data:0000A9A6                 db  62h ; b
.data:0000A9A7                 db  53h ; S
.data:0000A9A8                 db  74h ; t
.data:0000A9A9                 db  72h ; r
.data:0000A9AA                 db  65h ; e
.data:0000A9AB                 db  61h ; a
.data:0000A9AC                 db  6Dh ; m
.data:0000A9AD                 db  53h ; S
.data:0000A9AE                 db  69h ; i
.data:0000A9AF                 db  7Ah ; z
.data:0000A9B0                 db  65h ; e
.data:0000A9B1                 db  40h ; @
.data:0000A9B2                 db  40h ; @
.data:0000A9B3                 db    0
.data:0000A9B3 _data           ends
.data:0000A9B3
.rdata$r:0000A9B4 ; ===========================================================================
.rdata$r:0000A9B4
.rdata$r:0000A9B4 ; Segment type: Pure data
.rdata$r:0000A9B4 ; Segment permissions: Read
.rdata$r:0000A9B4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000A9B4                 assume cs:_rdata$r
.rdata$r:0000A9B4                 ;org 0A9B4h
.rdata$r:0000A9B4 ; COMDAT (pick any)
.rdata$r:0000A9B4                 public ??_R3ICompressGetSubStreamSize@@8
.rdata$r:0000A9B4 ; ICompressGetSubStreamSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000A9B4 ??_R3ICompressGetSubStreamSize@@8 db    0 ; DATA XREF: .rdata$r:0000A988o
.rdata$r:0000A9B4                                         ; .rdata$r:0000A9E8o ...
.rdata$r:0000A9B5                 db    0
.rdata$r:0000A9B6                 db    0
.rdata$r:0000A9B7                 db    0
.rdata$r:0000A9B8                 db    0
.rdata$r:0000A9B9                 db    0
.rdata$r:0000A9BA                 db    0
.rdata$r:0000A9BB                 db    0
.rdata$r:0000A9BC                 db    2
.rdata$r:0000A9BD                 db    0
.rdata$r:0000A9BE                 db    0
.rdata$r:0000A9BF                 db    0
.rdata$r:0000A9C0                 dd offset ??_R2ICompressGetSubStreamSize@@8 ; ICompressGetSubStreamSize::`RTTI Base Class Array'
.rdata$r:0000A9C0 _rdata$r        ends
.rdata$r:0000A9C0
.rdata$r:0000A9C4 ; ===========================================================================
.rdata$r:0000A9C4
.rdata$r:0000A9C4 ; Segment type: Pure data
.rdata$r:0000A9C4 ; Segment permissions: Read
.rdata$r:0000A9C4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000A9C4                 assume cs:_rdata$r
.rdata$r:0000A9C4                 ;org 0A9C4h
.rdata$r:0000A9C4 ; COMDAT (pick any)
.rdata$r:0000A9C4                 public ??_R2ICompressGetSubStreamSize@@8
.rdata$r:0000A9C4 ; ICompressGetSubStreamSize::`RTTI Base Class Array'
.rdata$r:0000A9C4 ??_R2ICompressGetSubStreamSize@@8 dd offset ??_R1A@?0A@EA@ICompressGetSubStreamSize@@8
.rdata$r:0000A9C4                                         ; DATA XREF: .rdata$r:0000A9C0o
.rdata$r:0000A9C4                                         ; ICompressGetSubStreamSize::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000A9C8                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000A9CC                 db    0
.rdata$r:0000A9CD                 align 10h
.rdata$r:0000A9CD _rdata$r        ends
.rdata$r:0000A9CD
.rdata$r:0000A9D0 ; ===========================================================================
.rdata$r:0000A9D0
.rdata$r:0000A9D0 ; Segment type: Pure data
.rdata$r:0000A9D0 ; Segment permissions: Read
.rdata$r:0000A9D0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000A9D0                 assume cs:_rdata$r
.rdata$r:0000A9D0                 ;org 0A9D0h
.rdata$r:0000A9D0 ; COMDAT (pick any)
.rdata$r:0000A9D0                 public ??_R1A@?0A@EA@ICompressGetSubStreamSize@@8
.rdata$r:0000A9D0 ; ICompressGetSubStreamSize::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000A9D0 ??_R1A@?0A@EA@ICompressGetSubStreamSize@@8 dd offset ??_R0?AUICompressGetSubStreamSize@@@8
.rdata$r:0000A9D0                                         ; DATA XREF: .rdata$r:ICompressGetSubStreamSize::`RTTI Base Class Array'o
.rdata$r:0000A9D0                                         ; ICompressGetSubStreamSize `RTTI Type Descriptor'
.rdata$r:0000A9D4                 db    1
.rdata$r:0000A9D5                 db    0
.rdata$r:0000A9D6                 db    0
.rdata$r:0000A9D7                 db    0
.rdata$r:0000A9D8                 db    0
.rdata$r:0000A9D9                 db    0
.rdata$r:0000A9DA                 db    0
.rdata$r:0000A9DB                 db    0
.rdata$r:0000A9DC                 db 0FFh
.rdata$r:0000A9DD                 db 0FFh
.rdata$r:0000A9DE                 db 0FFh
.rdata$r:0000A9DF                 db 0FFh
.rdata$r:0000A9E0                 db    0
.rdata$r:0000A9E1                 db    0
.rdata$r:0000A9E2                 db    0
.rdata$r:0000A9E3                 db    0
.rdata$r:0000A9E4                 db  40h ; @
.rdata$r:0000A9E5                 db    0
.rdata$r:0000A9E6                 db    0
.rdata$r:0000A9E7                 db    0
.rdata$r:0000A9E8                 dd offset ??_R3ICompressGetSubStreamSize@@8 ; ICompressGetSubStreamSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000A9E8 _rdata$r        ends
.rdata$r:0000A9E8
.rdata$r:0000A9EC ; ===========================================================================
.rdata$r:0000A9EC
.rdata$r:0000A9EC ; Segment type: Pure data
.rdata$r:0000A9EC ; Segment permissions: Read
.rdata$r:0000A9EC _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000A9EC                 assume cs:_rdata$r
.rdata$r:0000A9EC                 ;org 0A9ECh
.rdata$r:0000A9EC ; COMDAT (pick any)
.rdata$r:0000A9EC                 public ??_R17?0A@EA@CMyUnknownImp@@8
.rdata$r:0000A9EC ; CMyUnknownImp::`RTTI Base Class Descriptor at (8, -1, 0, 64)'
.rdata$r:0000A9EC ??_R17?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:0000A9EC                                         ; DATA XREF: .rdata$r:0000A94Co
.rdata$r:0000A9EC                                         ; .rdata$r:0000ADB0o
.rdata$r:0000A9EC                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:0000A9F0                 db    0
.rdata$r:0000A9F1                 db    0
.rdata$r:0000A9F2                 db    0
.rdata$r:0000A9F3                 db    0
.rdata$r:0000A9F4                 db    8
.rdata$r:0000A9F5                 db    0
.rdata$r:0000A9F6                 db    0
.rdata$r:0000A9F7                 db    0
.rdata$r:0000A9F8                 db 0FFh
.rdata$r:0000A9F9                 db 0FFh
.rdata$r:0000A9FA                 db 0FFh
.rdata$r:0000A9FB                 db 0FFh
.rdata$r:0000A9FC                 db    0
.rdata$r:0000A9FD                 db    0
.rdata$r:0000A9FE                 db    0
.rdata$r:0000A9FF                 db    0
.rdata$r:0000AA00                 db  40h ; @
.rdata$r:0000AA01                 db    0
.rdata$r:0000AA02                 db    0
.rdata$r:0000AA03                 db    0
.rdata$r:0000AA04                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000AA04 _rdata$r        ends
.rdata$r:0000AA04
.rdata$r:0000AA08 ; ===========================================================================
.rdata$r:0000AA08
.rdata$r:0000AA08 ; Segment type: Pure data
.rdata$r:0000AA08 ; Segment permissions: Read
.rdata$r:0000AA08 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000AA08                 assume cs:_rdata$r
.rdata$r:0000AA08                 ;org 0AA08h
.rdata$r:0000AA08 ; COMDAT (pick any)
.rdata$r:0000AA08                 public ??_R4CRepackInStreamWithSizes@N7z@NArchive@@6BICompressGetSubStreamSize@@@
.rdata$r:0000AA08 ; const NArchive::N7z::CRepackInStreamWithSizes::`RTTI Complete Object Locator'{for `ICompressGetSubStreamSize'}
.rdata$r:0000AA08 ??_R4CRepackInStreamWithSizes@N7z@NArchive@@6BICompressGetSubStreamSize@@@ db    0
.rdata$r:0000AA08                                         ; DATA XREF: .rdata:0000A8B8o
.rdata$r:0000AA09                 db    0
.rdata$r:0000AA0A                 db    0
.rdata$r:0000AA0B                 db    0
.rdata$r:0000AA0C                 db    4
.rdata$r:0000AA0D                 db    0
.rdata$r:0000AA0E                 db    0
.rdata$r:0000AA0F                 db    0
.rdata$r:0000AA10                 db    0
.rdata$r:0000AA11                 db    0
.rdata$r:0000AA12                 db    0
.rdata$r:0000AA13                 db    0
.rdata$r:0000AA14                 dd offset ??_R0?AVCRepackInStreamWithSizes@N7z@NArchive@@@8 ; NArchive::N7z::CRepackInStreamWithSizes `RTTI Type Descriptor'
.rdata$r:0000AA18                 dd offset ??_R3CRepackInStreamWithSizes@N7z@NArchive@@8 ; NArchive::N7z::CRepackInStreamWithSizes::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000AA18 _rdata$r        ends
.rdata$r:0000AA18
.text:0000AA1C ; ===========================================================================
.text:0000AA1C
.text:0000AA1C ; Segment type: Pure code
.text:0000AA1C ; Segment permissions: Read/Execute
.text:0000AA1C _text           segment para public 'CODE' use32
.text:0000AA1C                 assume cs:_text
.text:0000AA1C                 ;org 0AA1Ch
.text:0000AA1C ; COMDAT (pick any)
.text:0000AA1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000AA1C
.text:0000AA1C ; =============== S U B R O U T I N E =======================================
.text:0000AA1C
.text:0000AA1C ; Attributes: bp-based frame
.text:0000AA1C
.text:0000AA1C ; __int32 __stdcall NArchive::N7z::CRepackInStreamWithSizes::QueryInterface(NArchive::N7z::CRepackInStreamWithSizes *this, const struct _GUID *Buf1, void **)
.text:0000AA1C                 public ?QueryInterface@CRepackInStreamWithSizes@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z
.text:0000AA1C ?QueryInterface@CRepackInStreamWithSizes@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z proc near
.text:0000AA1C                                         ; CODE XREF: [thunk]:NArchive::N7z::CRepackInStreamWithSizes::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j
.text:0000AA1C                                         ; DATA XREF: .rdata:const NArchive::N7z::CRepackInStreamWithSizes::`vftable'{for `ISequentialInStream'}o
.text:0000AA1C
.text:0000AA1C var_4           = dword ptr -4
.text:0000AA1C this            = dword ptr  8
.text:0000AA1C Buf1            = dword ptr  0Ch
.text:0000AA1C arg_8           = dword ptr  10h
.text:0000AA1C
.text:0000AA1C                 push    ebp
.text:0000AA1D                 mov     ebp, esp
.text:0000AA1F                 push    ecx
.text:0000AA20                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000AA27                 mov     eax, [ebp+arg_8]
.text:0000AA2A                 mov     dword ptr [eax], 0
.text:0000AA30                 push    offset _IID_IUnknown ; Buf2
.text:0000AA35                 mov     ecx, [ebp+Buf1]
.text:0000AA38                 push    ecx             ; Buf1
.text:0000AA39                 call    ___@8           ; __(x,x)
.text:0000AA3E                 test    eax, eax
.text:0000AA40                 jz      short loc_AA4C
.text:0000AA42                 mov     edx, [ebp+arg_8]
.text:0000AA45                 mov     eax, [ebp+this]
.text:0000AA48                 mov     [edx], eax
.text:0000AA4A                 jmp     short loc_AAA3
.text:0000AA4C ; ---------------------------------------------------------------------------
.text:0000AA4C
.text:0000AA4C loc_AA4C:                               ; CODE XREF: NArchive::N7z::CRepackInStreamWithSizes::QueryInterface(_GUID const &,void * *)+24j
.text:0000AA4C                 push    offset _IID_ISequentialInStream ; Buf2
.text:0000AA51                 mov     ecx, [ebp+Buf1]
.text:0000AA54                 push    ecx             ; Buf1
.text:0000AA55                 call    ___@8           ; __(x,x)
.text:0000AA5A                 test    eax, eax
.text:0000AA5C                 jz      short loc_AA68
.text:0000AA5E                 mov     edx, [ebp+arg_8]
.text:0000AA61                 mov     eax, [ebp+this]
.text:0000AA64                 mov     [edx], eax
.text:0000AA66                 jmp     short loc_AAA3
.text:0000AA68 ; ---------------------------------------------------------------------------
.text:0000AA68
.text:0000AA68 loc_AA68:                               ; CODE XREF: NArchive::N7z::CRepackInStreamWithSizes::QueryInterface(_GUID const &,void * *)+40j
.text:0000AA68                 push    offset _IID_ICompressGetSubStreamSize ; Buf2
.text:0000AA6D                 mov     ecx, [ebp+Buf1]
.text:0000AA70                 push    ecx             ; Buf1
.text:0000AA71                 call    ___@8           ; __(x,x)
.text:0000AA76                 test    eax, eax
.text:0000AA78                 jz      short loc_AA9C
.text:0000AA7A                 cmp     [ebp+this], 0
.text:0000AA7E                 jz      short loc_AA8B
.text:0000AA80                 mov     edx, [ebp+this]
.text:0000AA83                 add     edx, 4
.text:0000AA86                 mov     [ebp+var_4], edx
.text:0000AA89                 jmp     short loc_AA92
.text:0000AA8B ; ---------------------------------------------------------------------------
.text:0000AA8B
.text:0000AA8B loc_AA8B:                               ; CODE XREF: NArchive::N7z::CRepackInStreamWithSizes::QueryInterface(_GUID const &,void * *)+62j
.text:0000AA8B                 mov     [ebp+var_4], 0
.text:0000AA92
.text:0000AA92 loc_AA92:                               ; CODE XREF: NArchive::N7z::CRepackInStreamWithSizes::QueryInterface(_GUID const &,void * *)+6Dj
.text:0000AA92                 mov     eax, [ebp+arg_8]
.text:0000AA95                 mov     ecx, [ebp+var_4]
.text:0000AA98                 mov     [eax], ecx
.text:0000AA9A                 jmp     short loc_AAA3
.text:0000AA9C ; ---------------------------------------------------------------------------
.text:0000AA9C
.text:0000AA9C loc_AA9C:                               ; CODE XREF: NArchive::N7z::CRepackInStreamWithSizes::QueryInterface(_GUID const &,void * *)+5Cj
.text:0000AA9C                 mov     eax, 80004002h
.text:0000AAA1                 jmp     short loc_AAB4
.text:0000AAA3 ; ---------------------------------------------------------------------------
.text:0000AAA3
.text:0000AAA3 loc_AAA3:                               ; CODE XREF: NArchive::N7z::CRepackInStreamWithSizes::QueryInterface(_GUID const &,void * *)+2Ej
.text:0000AAA3                                         ; NArchive::N7z::CRepackInStreamWithSizes::QueryInterface(_GUID const &,void * *)+4Aj ...
.text:0000AAA3                 mov     edx, [ebp+this]
.text:0000AAA6                 mov     eax, [edx+8]
.text:0000AAA9                 add     eax, 1
.text:0000AAAC                 mov     ecx, [ebp+this]
.text:0000AAAF                 mov     [ecx+8], eax
.text:0000AAB2                 xor     eax, eax
.text:0000AAB4
.text:0000AAB4 loc_AAB4:                               ; CODE XREF: NArchive::N7z::CRepackInStreamWithSizes::QueryInterface(_GUID const &,void * *)+85j
.text:0000AAB4                 add     esp, 4
.text:0000AAB7                 cmp     ebp, esp
.text:0000AAB9                 call    __RTC_CheckEsp
.text:0000AABE                 mov     esp, ebp
.text:0000AAC0                 pop     ebp
.text:0000AAC1                 retn    0Ch
.text:0000AAC1 ?QueryInterface@CRepackInStreamWithSizes@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z endp
.text:0000AAC1
.text:0000AAC1 _text           ends
.text:0000AAC1
.text:0000AAC4 ; ===========================================================================
.text:0000AAC4
.text:0000AAC4 ; Segment type: Pure code
.text:0000AAC4 ; Segment permissions: Read/Execute
.text:0000AAC4 _text           segment para public 'CODE' use32
.text:0000AAC4                 assume cs:_text
.text:0000AAC4                 ;org 0AAC4h
.text:0000AAC4 ; COMDAT (pick any)
.text:0000AAC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000AAC4
.text:0000AAC4 ; =============== S U B R O U T I N E =======================================
.text:0000AAC4
.text:0000AAC4 ; Attributes: bp-based frame
.text:0000AAC4
.text:0000AAC4 ; unsigned __int32 __stdcall NArchive::N7z::CRepackInStreamWithSizes::AddRef(NArchive::N7z::CRepackInStreamWithSizes *this)
.text:0000AAC4                 public ?AddRef@CRepackInStreamWithSizes@N7z@NArchive@@UAGKXZ
.text:0000AAC4 ?AddRef@CRepackInStreamWithSizes@N7z@NArchive@@UAGKXZ proc near
.text:0000AAC4                                         ; CODE XREF: [thunk]:NArchive::N7z::CRepackInStreamWithSizes::AddRef`adjustor{4}' (void)+5j
.text:0000AAC4                                         ; DATA XREF: .rdata:0000A8D4o
.text:0000AAC4
.text:0000AAC4 var_4           = dword ptr -4
.text:0000AAC4 this            = dword ptr  8
.text:0000AAC4
.text:0000AAC4                 push    ebp
.text:0000AAC5                 mov     ebp, esp
.text:0000AAC7                 push    ecx
.text:0000AAC8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000AACF                 mov     eax, [ebp+this]
.text:0000AAD2                 mov     ecx, [eax+8]
.text:0000AAD5                 add     ecx, 1
.text:0000AAD8                 mov     [ebp+var_4], ecx
.text:0000AADB                 mov     edx, [ebp+this]
.text:0000AADE                 mov     eax, [ebp+var_4]
.text:0000AAE1                 mov     [edx+8], eax
.text:0000AAE4                 mov     eax, [ebp+var_4]
.text:0000AAE7                 mov     esp, ebp
.text:0000AAE9                 pop     ebp
.text:0000AAEA                 retn    4
.text:0000AAEA ?AddRef@CRepackInStreamWithSizes@N7z@NArchive@@UAGKXZ endp
.text:0000AAEA
.text:0000AAEA ; ---------------------------------------------------------------------------
.text:0000AAED                 align 10h
.text:0000AAED _text           ends
.text:0000AAED
.text:0000AAF0 ; ===========================================================================
.text:0000AAF0
.text:0000AAF0 ; Segment type: Pure code
.text:0000AAF0 ; Segment permissions: Read/Execute
.text:0000AAF0 _text           segment para public 'CODE' use32
.text:0000AAF0                 assume cs:_text
.text:0000AAF0                 ;org 0AAF0h
.text:0000AAF0 ; COMDAT (pick any)
.text:0000AAF0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000AAF0
.text:0000AAF0 ; =============== S U B R O U T I N E =======================================
.text:0000AAF0
.text:0000AAF0 ; Attributes: bp-based frame
.text:0000AAF0
.text:0000AAF0 ; unsigned __int32 __stdcall NArchive::N7z::CRepackInStreamWithSizes::Release(NArchive::N7z::CRepackInStreamWithSizes *this)
.text:0000AAF0                 public ?Release@CRepackInStreamWithSizes@N7z@NArchive@@UAGKXZ
.text:0000AAF0 ?Release@CRepackInStreamWithSizes@N7z@NArchive@@UAGKXZ proc near
.text:0000AAF0                                         ; CODE XREF: [thunk]:NArchive::N7z::CRepackInStreamWithSizes::Release`adjustor{4}' (void)+5j
.text:0000AAF0                                         ; DATA XREF: .rdata:0000A8D8o
.text:0000AAF0
.text:0000AAF0 var_10          = dword ptr -10h
.text:0000AAF0 var_C           = dword ptr -0Ch
.text:0000AAF0 var_8           = dword ptr -8
.text:0000AAF0 var_4           = dword ptr -4
.text:0000AAF0 this            = dword ptr  8
.text:0000AAF0
.text:0000AAF0                 push    ebp
.text:0000AAF1                 mov     ebp, esp
.text:0000AAF3                 sub     esp, 10h
.text:0000AAF6                 mov     eax, 0CCCCCCCCh
.text:0000AAFB                 mov     [ebp+var_10], eax
.text:0000AAFE                 mov     [ebp+var_C], eax
.text:0000AB01                 mov     [ebp+var_8], eax
.text:0000AB04                 mov     [ebp+var_4], eax
.text:0000AB07                 mov     eax, [ebp+this]
.text:0000AB0A                 mov     ecx, [eax+8]
.text:0000AB0D                 sub     ecx, 1
.text:0000AB10                 mov     [ebp+var_C], ecx
.text:0000AB13                 mov     edx, [ebp+this]
.text:0000AB16                 mov     eax, [ebp+var_C]
.text:0000AB19                 mov     [edx+8], eax
.text:0000AB1C                 cmp     [ebp+var_C], 0
.text:0000AB20                 jz      short loc_AB2A
.text:0000AB22                 mov     ecx, [ebp+this]
.text:0000AB25                 mov     eax, [ecx+8]
.text:0000AB28                 jmp     short loc_AB54
.text:0000AB2A ; ---------------------------------------------------------------------------
.text:0000AB2A
.text:0000AB2A loc_AB2A:                               ; CODE XREF: NArchive::N7z::CRepackInStreamWithSizes::Release(void)+30j
.text:0000AB2A                 mov     edx, [ebp+this]
.text:0000AB2D                 mov     [ebp+var_8], edx
.text:0000AB30                 mov     eax, [ebp+var_8]
.text:0000AB33                 mov     [ebp+var_4], eax
.text:0000AB36                 cmp     [ebp+var_4], 0
.text:0000AB3A                 jz      short loc_AB4B
.text:0000AB3C                 push    1
.text:0000AB3E                 mov     ecx, [ebp+var_4]
.text:0000AB41                 call    ??_GCRepackInStreamWithSizes@N7z@NArchive@@QAEPAXI@Z ; NArchive::N7z::CRepackInStreamWithSizes::`scalar deleting destructor'(uint)
.text:0000AB46                 mov     [ebp+var_10], eax
.text:0000AB49                 jmp     short loc_AB52
.text:0000AB4B ; ---------------------------------------------------------------------------
.text:0000AB4B
.text:0000AB4B loc_AB4B:                               ; CODE XREF: NArchive::N7z::CRepackInStreamWithSizes::Release(void)+4Aj
.text:0000AB4B                 mov     [ebp+var_10], 0
.text:0000AB52
.text:0000AB52 loc_AB52:                               ; CODE XREF: NArchive::N7z::CRepackInStreamWithSizes::Release(void)+59j
.text:0000AB52                 xor     eax, eax
.text:0000AB54
.text:0000AB54 loc_AB54:                               ; CODE XREF: NArchive::N7z::CRepackInStreamWithSizes::Release(void)+38j
.text:0000AB54                 add     esp, 10h
.text:0000AB57                 cmp     ebp, esp
.text:0000AB59                 call    __RTC_CheckEsp
.text:0000AB5E                 mov     esp, ebp
.text:0000AB60                 pop     ebp
.text:0000AB61                 retn    4
.text:0000AB61 ?Release@CRepackInStreamWithSizes@N7z@NArchive@@UAGKXZ endp
.text:0000AB61
.text:0000AB61 _text           ends
.text:0000AB61
.text:0000AB64 ; ===========================================================================
.text:0000AB64
.text:0000AB64 ; Segment type: Pure code
.text:0000AB64 ; Segment permissions: Read/Execute
.text:0000AB64 _text           segment para public 'CODE' use32
.text:0000AB64                 assume cs:_text
.text:0000AB64                 ;org 0AB64h
.text:0000AB64 ; COMDAT (pick any)
.text:0000AB64                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000AB64
.text:0000AB64 ; =============== S U B R O U T I N E =======================================
.text:0000AB64
.text:0000AB64 ; Attributes: bp-based frame
.text:0000AB64
.text:0000AB64 ; public: void * __thiscall NArchive::N7z::CRepackInStreamWithSizes::`scalar deleting destructor'(unsigned int)
.text:0000AB64                 public ??_GCRepackInStreamWithSizes@N7z@NArchive@@QAEPAXI@Z
.text:0000AB64 ??_GCRepackInStreamWithSizes@N7z@NArchive@@QAEPAXI@Z proc near
.text:0000AB64                                         ; CODE XREF: NArchive::N7z::CRepackInStreamWithSizes::Release(void)+51p
.text:0000AB64
.text:0000AB64 var_4           = dword ptr -4
.text:0000AB64 arg_0           = dword ptr  8
.text:0000AB64
.text:0000AB64                 push    ebp
.text:0000AB65                 mov     ebp, esp
.text:0000AB67                 push    ecx
.text:0000AB68                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000AB6F                 mov     [ebp+var_4], ecx
.text:0000AB72                 mov     ecx, [ebp+var_4] ; this
.text:0000AB75                 call    ??1CRepackInStreamWithSizes@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CRepackInStreamWithSizes::~CRepackInStreamWithSizes(void)
.text:0000AB7A                 mov     eax, [ebp+arg_0]
.text:0000AB7D                 and     eax, 1
.text:0000AB80                 jz      short loc_AB8E
.text:0000AB82                 mov     ecx, [ebp+var_4]
.text:0000AB85                 push    ecx             ; void *
.text:0000AB86                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000AB8B                 add     esp, 4
.text:0000AB8E
.text:0000AB8E loc_AB8E:                               ; CODE XREF: NArchive::N7z::CRepackInStreamWithSizes::`scalar deleting destructor'(uint)+1Cj
.text:0000AB8E                 mov     eax, [ebp+var_4]
.text:0000AB91                 add     esp, 4
.text:0000AB94                 cmp     ebp, esp
.text:0000AB96                 call    __RTC_CheckEsp
.text:0000AB9B                 mov     esp, ebp
.text:0000AB9D                 pop     ebp
.text:0000AB9E                 retn    4
.text:0000AB9E ??_GCRepackInStreamWithSizes@N7z@NArchive@@QAEPAXI@Z endp
.text:0000AB9E
.text:0000AB9E ; ---------------------------------------------------------------------------
.text:0000ABA1                 align 4
.text:0000ABA1 _text           ends
.text:0000ABA1
.text:0000ABA4 ; ===========================================================================
.text:0000ABA4
.text:0000ABA4 ; Segment type: Pure code
.text:0000ABA4 ; Segment permissions: Read/Execute
.text:0000ABA4 _text           segment para public 'CODE' use32
.text:0000ABA4                 assume cs:_text
.text:0000ABA4                 ;org 0ABA4h
.text:0000ABA4 ; COMDAT (pick any)
.text:0000ABA4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000ABA4
.text:0000ABA4 ; =============== S U B R O U T I N E =======================================
.text:0000ABA4
.text:0000ABA4 ; Attributes: bp-based frame
.text:0000ABA4
.text:0000ABA4 ; _DWORD __thiscall NArchive::N7z::CRepackInStreamWithSizes::~CRepackInStreamWithSizes(NArchive::N7z::CRepackInStreamWithSizes *__hidden this)
.text:0000ABA4                 public ??1CRepackInStreamWithSizes@N7z@NArchive@@QAE@XZ
.text:0000ABA4 ??1CRepackInStreamWithSizes@N7z@NArchive@@QAE@XZ proc near
.text:0000ABA4                                         ; CODE XREF: NArchive::N7z::CRepackInStreamWithSizes::`scalar deleting destructor'(uint)+11p
.text:0000ABA4
.text:0000ABA4 var_4           = dword ptr -4
.text:0000ABA4
.text:0000ABA4                 push    ebp
.text:0000ABA5                 mov     ebp, esp
.text:0000ABA7                 push    ecx
.text:0000ABA8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000ABAF                 mov     [ebp+var_4], ecx
.text:0000ABB2                 mov     ecx, [ebp+var_4]
.text:0000ABB5                 add     ecx, 0Ch
.text:0000ABB8                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:0000ABBD                 add     esp, 4
.text:0000ABC0                 cmp     ebp, esp
.text:0000ABC2                 call    __RTC_CheckEsp
.text:0000ABC7                 mov     esp, ebp
.text:0000ABC9                 pop     ebp
.text:0000ABCA                 retn
.text:0000ABCA ??1CRepackInStreamWithSizes@N7z@NArchive@@QAE@XZ endp
.text:0000ABCA
.text:0000ABCA ; ---------------------------------------------------------------------------
.text:0000ABCB                 align 4
.text:0000ABCB _text           ends
.text:0000ABCB
.text:0000ABCC ; ===========================================================================
.text:0000ABCC
.text:0000ABCC ; Segment type: Pure code
.text:0000ABCC ; Segment permissions: Read/Execute
.text:0000ABCC _text           segment para public 'CODE' use32
.text:0000ABCC                 assume cs:_text
.text:0000ABCC                 ;org 0ABCCh
.text:0000ABCC ; COMDAT (pick any)
.text:0000ABCC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000ABCC
.text:0000ABCC ; =============== S U B R O U T I N E =======================================
.text:0000ABCC
.text:0000ABCC ; Attributes: bp-based frame
.text:0000ABCC
.text:0000ABCC ; _DWORD __thiscall NArchive::N7z::CFolderInStream::CFolderInStream(NArchive::N7z::CFolderInStream *__hidden this)
.text:0000ABCC                 public ??0CFolderInStream@N7z@NArchive@@QAE@XZ
.text:0000ABCC ??0CFolderInStream@N7z@NArchive@@QAE@XZ proc near
.text:0000ABCC                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+343Ap
.text:0000ABCC
.text:0000ABCC var_10          = dword ptr -10h
.text:0000ABCC var_C           = dword ptr -0Ch
.text:0000ABCC var_4           = dword ptr -4
.text:0000ABCC
.text:0000ABCC                 push    ebp
.text:0000ABCD                 mov     ebp, esp
.text:0000ABCF                 push    0FFFFFFFFh
.text:0000ABD1                 push    offset __ehhandler$??0CFolderInStream@N7z@NArchive@@QAE@XZ
.text:0000ABD6                 mov     eax, large fs:0
.text:0000ABDC                 push    eax
.text:0000ABDD                 push    ecx
.text:0000ABDE                 mov     [ebp+var_10], 0CCCCCCCCh
.text:0000ABE5                 mov     eax, dword ptr ds:___security_cookie
.text:0000ABEA                 xor     eax, ebp
.text:0000ABEC                 push    eax
.text:0000ABED                 lea     eax, [ebp+var_C]
.text:0000ABF0                 mov     large fs:0, eax
.text:0000ABF6                 mov     [ebp+var_10], ecx
.text:0000ABF9                 mov     ecx, [ebp+var_10] ; this
.text:0000ABFC                 call    ??0ISequentialInStream@@QAE@XZ ; ISequentialInStream::ISequentialInStream(void)
.text:0000AC01                 mov     ecx, [ebp+var_10]
.text:0000AC04                 add     ecx, 4          ; this
.text:0000AC07                 call    ??0ICompressGetSubStreamSize@@QAE@XZ ; ICompressGetSubStreamSize::ICompressGetSubStreamSize(void)
.text:0000AC0C                 mov     ecx, [ebp+var_10]
.text:0000AC0F                 add     ecx, 8          ; this
.text:0000AC12                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:0000AC17                 mov     eax, [ebp+var_10]
.text:0000AC1A                 mov     dword ptr [eax], offset ??_7CFolderInStream@N7z@NArchive@@6BISequentialInStream@@@ ; const NArchive::N7z::CFolderInStream::`vftable'{for `ISequentialInStream'}
.text:0000AC20                 mov     ecx, [ebp+var_10]
.text:0000AC23                 mov     dword ptr [ecx+4], offset ??_7CFolderInStream@N7z@NArchive@@6BICompressGetSubStreamSize@@@ ; const NArchive::N7z::CFolderInStream::`vftable'{for `ICompressGetSubStreamSize'}
.text:0000AC2A                 mov     ecx, [ebp+var_10]
.text:0000AC2D                 add     ecx, 0Ch
.text:0000AC30                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(void)
.text:0000AC35                 mov     [ebp+var_4], 0
.text:0000AC3C                 mov     ecx, [ebp+var_10]
.text:0000AC3F                 add     ecx, 34h ; '4'
.text:0000AC42                 call    ??0?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallback>::CMyComPtr<IArchiveUpdateCallback>(void)
.text:0000AC47                 mov     byte ptr [ebp+var_4], 1
.text:0000AC4B                 mov     ecx, [ebp+var_10]
.text:0000AC4E                 add     ecx, 38h ; '8'
.text:0000AC51                 call    ??0?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::CRecordVector<bool>(void)
.text:0000AC56                 mov     byte ptr [ebp+var_4], 2
.text:0000AC5A                 mov     ecx, [ebp+var_10]
.text:0000AC5D                 add     ecx, 44h ; 'D'
.text:0000AC60                 call    ??0?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::CRecordVector<uint>(void)
.text:0000AC65                 mov     byte ptr [ebp+var_4], 3
.text:0000AC69                 mov     ecx, [ebp+var_10]
.text:0000AC6C                 add     ecx, 50h ; 'P'
.text:0000AC6F                 call    ??0?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>(void)
.text:0000AC74                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000AC7B                 mov     eax, [ebp+var_10]
.text:0000AC7E                 mov     ecx, [ebp+var_C]
.text:0000AC81                 mov     large fs:0, ecx
.text:0000AC88                 pop     ecx
.text:0000AC89                 add     esp, 10h
.text:0000AC8C                 cmp     ebp, esp
.text:0000AC8E                 call    __RTC_CheckEsp
.text:0000AC93                 mov     esp, ebp
.text:0000AC95                 pop     ebp
.text:0000AC96                 retn
.text:0000AC96 ??0CFolderInStream@N7z@NArchive@@QAE@XZ endp
.text:0000AC96
.text:0000AC96 ; ---------------------------------------------------------------------------
.text:0000AC97                 align 4
.text:0000AC97 _text           ends
.text:0000AC97
.text$x:0000AC98 ; ===========================================================================
.text$x:0000AC98
.text$x:0000AC98 ; Segment type: Pure code
.text$x:0000AC98 ; Segment permissions: Read/Execute
.text$x:0000AC98 _text$x         segment para public 'CODE' use32
.text$x:0000AC98                 assume cs:_text$x
.text$x:0000AC98                 ;org 0AC98h
.text$x:0000AC98 ; COMDAT (pick associative to section at ABCC)
.text$x:0000AC98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000AC98
.text$x:0000AC98 ; =============== S U B R O U T I N E =======================================
.text$x:0000AC98
.text$x:0000AC98
.text$x:0000AC98 __unwindfunclet$??0CFolderInStream@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:0000AC98                                         ; DATA XREF: .xdata$x:0000AD0Co
.text$x:0000AC98                 mov     ecx, [ebp-10h]
.text$x:0000AC9B                 add     ecx, 0Ch
.text$x:0000AC9E                 jmp     ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text$x:0000AC9E __unwindfunclet$??0CFolderInStream@N7z@NArchive@@QAE@XZ$0 endp
.text$x:0000AC9E
.text$x:0000ACA3
.text$x:0000ACA3 ; =============== S U B R O U T I N E =======================================
.text$x:0000ACA3
.text$x:0000ACA3
.text$x:0000ACA3 __unwindfunclet$??0CFolderInStream@N7z@NArchive@@QAE@XZ$1 proc near
.text$x:0000ACA3                                         ; DATA XREF: .xdata$x:0000AD14o
.text$x:0000ACA3                 mov     ecx, [ebp-10h]
.text$x:0000ACA6                 add     ecx, 34h ; '4'
.text$x:0000ACA9                 jmp     ??1?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallback>::~CMyComPtr<IArchiveUpdateCallback>(void)
.text$x:0000ACA9 __unwindfunclet$??0CFolderInStream@N7z@NArchive@@QAE@XZ$1 endp
.text$x:0000ACA9
.text$x:0000ACAE
.text$x:0000ACAE ; =============== S U B R O U T I N E =======================================
.text$x:0000ACAE
.text$x:0000ACAE
.text$x:0000ACAE __unwindfunclet$??0CFolderInStream@N7z@NArchive@@QAE@XZ$2 proc near
.text$x:0000ACAE                                         ; DATA XREF: .xdata$x:0000AD1Co
.text$x:0000ACAE                 mov     ecx, [ebp-10h]
.text$x:0000ACB1                 add     ecx, 38h ; '8'
.text$x:0000ACB4                 jmp     ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text$x:0000ACB4 __unwindfunclet$??0CFolderInStream@N7z@NArchive@@QAE@XZ$2 endp
.text$x:0000ACB4
.text$x:0000ACB9
.text$x:0000ACB9 ; =============== S U B R O U T I N E =======================================
.text$x:0000ACB9
.text$x:0000ACB9
.text$x:0000ACB9 __unwindfunclet$??0CFolderInStream@N7z@NArchive@@QAE@XZ$3 proc near
.text$x:0000ACB9                                         ; DATA XREF: .xdata$x:0000AD24o
.text$x:0000ACB9                 mov     ecx, [ebp-10h]
.text$x:0000ACBC                 add     ecx, 44h ; 'D'
.text$x:0000ACBF                 jmp     ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text$x:0000ACBF __unwindfunclet$??0CFolderInStream@N7z@NArchive@@QAE@XZ$3 endp
.text$x:0000ACBF
.text$x:0000ACC4
.text$x:0000ACC4 ; =============== S U B R O U T I N E =======================================
.text$x:0000ACC4
.text$x:0000ACC4
.text$x:0000ACC4 __ehhandler$??0CFolderInStream@N7z@NArchive@@QAE@XZ proc near
.text$x:0000ACC4                                         ; DATA XREF: NArchive::N7z::CFolderInStream::CFolderInStream(void)+5o
.text$x:0000ACC4
.text$x:0000ACC4 arg_4           = dword ptr  8
.text$x:0000ACC4
.text$x:0000ACC4                 mov     edx, [esp+arg_4]
.text$x:0000ACC8                 lea     eax, [edx+0Ch]
.text$x:0000ACCB                 mov     ecx, [edx-8]
.text$x:0000ACCE                 xor     ecx, eax
.text$x:0000ACD0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000ACD5                 mov     eax, offset __ehfuncinfo$??0CFolderInStream@N7z@NArchive@@QAE@XZ
.text$x:0000ACDA                 jmp     ___CxxFrameHandler3
.text$x:0000ACDA __ehhandler$??0CFolderInStream@N7z@NArchive@@QAE@XZ endp
.text$x:0000ACDA
.text$x:0000ACDA ; ---------------------------------------------------------------------------
.text$x:0000ACDF                 align 10h
.text$x:0000ACDF _text$x         ends
.text$x:0000ACDF
.rdata:0000ACE0 ; ===========================================================================
.rdata:0000ACE0
.rdata:0000ACE0 ; Segment type: Pure data
.rdata:0000ACE0 ; Segment permissions: Read
.rdata:0000ACE0 _rdata          segment dword public 'DATA' use32
.rdata:0000ACE0                 assume cs:_rdata
.rdata:0000ACE0                 ;org 0ACE0h
.rdata:0000ACE0 ; COMDAT (pick largest)
.rdata:0000ACE0                 dd offset ??_R4CFolderInStream@N7z@NArchive@@6BICompressGetSubStreamSize@@@ ; const NArchive::N7z::CFolderInStream::`RTTI Complete Object Locator'{for `ICompressGetSubStreamSize'}
.rdata:0000ACE4                 public ??_7CFolderInStream@N7z@NArchive@@6BICompressGetSubStreamSize@@@
.rdata:0000ACE4 ; const NArchive::N7z::CFolderInStream::`vftable'{for `ICompressGetSubStreamSize'}
.rdata:0000ACE4 ??_7CFolderInStream@N7z@NArchive@@6BICompressGetSubStreamSize@@@ dd offset ?QueryInterface@CFolderInStream@N7z@NArchive@@W3AGJABU_GUID@@PAPAX@Z
.rdata:0000ACE4                                         ; DATA XREF: NArchive::N7z::CFolderInStream::CFolderInStream(void)+57o
.rdata:0000ACE4                                         ; [thunk]:NArchive::N7z::CFolderInStream::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:0000ACE8                 dd offset ?AddRef@CFolderInStream@N7z@NArchive@@W3AGKXZ ; [thunk]:NArchive::N7z::CFolderInStream::AddRef`adjustor{4}' (void)
.rdata:0000ACEC                 dd offset ?Release@CFolderInStream@N7z@NArchive@@W3AGKXZ ; [thunk]:NArchive::N7z::CFolderInStream::Release`adjustor{4}' (void)
.rdata:0000ACF0                 dd offset ?GetSubStreamSize@CFolderInStream@N7z@NArchive@@UAGJ_KPA_K@Z ; NArchive::N7z::CFolderInStream::GetSubStreamSize(unsigned __int64,unsigned __int64 *)
.rdata:0000ACF0 _rdata          ends
.rdata:0000ACF0
.rdata:0000ACF4 ; ===========================================================================
.rdata:0000ACF4
.rdata:0000ACF4 ; Segment type: Pure data
.rdata:0000ACF4 ; Segment permissions: Read
.rdata:0000ACF4 _rdata          segment dword public 'DATA' use32
.rdata:0000ACF4                 assume cs:_rdata
.rdata:0000ACF4                 ;org 0ACF4h
.rdata:0000ACF4 ; COMDAT (pick largest)
.rdata:0000ACF4                 dd offset ??_R4CFolderInStream@N7z@NArchive@@6BISequentialInStream@@@ ; const NArchive::N7z::CFolderInStream::`RTTI Complete Object Locator'{for `ISequentialInStream'}
.rdata:0000ACF8                 public ??_7CFolderInStream@N7z@NArchive@@6BISequentialInStream@@@
.rdata:0000ACF8 ; const NArchive::N7z::CFolderInStream::`vftable'{for `ISequentialInStream'}
.rdata:0000ACF8 ??_7CFolderInStream@N7z@NArchive@@6BISequentialInStream@@@ dd offset ?QueryInterface@CFolderInStream@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z
.rdata:0000ACF8                                         ; DATA XREF: NArchive::N7z::CFolderInStream::CFolderInStream(void)+4Eo
.rdata:0000ACF8                                         ; NArchive::N7z::CFolderInStream::QueryInterface(_GUID const &,void * *)
.rdata:0000ACFC                 dd offset ?AddRef@CFolderInStream@N7z@NArchive@@UAGKXZ ; NArchive::N7z::CFolderInStream::AddRef(void)
.rdata:0000AD00                 dd offset ?Release@CFolderInStream@N7z@NArchive@@UAGKXZ ; NArchive::N7z::CFolderInStream::Release(void)
.rdata:0000AD04                 dd offset ?Read@CFolderInStream@N7z@NArchive@@UAGJPAXIPAI@Z ; NArchive::N7z::CFolderInStream::Read(void *,uint,uint *)
.rdata:0000AD04 _rdata          ends
.rdata:0000AD04
.xdata$x:0000AD08 ; ===========================================================================
.xdata$x:0000AD08
.xdata$x:0000AD08 ; Segment type: Pure data
.xdata$x:0000AD08 ; Segment permissions: Read
.xdata$x:0000AD08 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000AD08                 assume cs:_xdata$x
.xdata$x:0000AD08                 ;org 0AD08h
.xdata$x:0000AD08 ; COMDAT (pick associative to section at ABCC)
.xdata$x:0000AD08 __unwindtable$??0CFolderInStream@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:0000AD08                                         ; DATA XREF: .xdata$x:0000AD30o
.xdata$x:0000AD09                 db 0FFh
.xdata$x:0000AD0A                 db 0FFh
.xdata$x:0000AD0B                 db 0FFh
.xdata$x:0000AD0C                 dd offset __unwindfunclet$??0CFolderInStream@N7z@NArchive@@QAE@XZ$0
.xdata$x:0000AD10                 db    0
.xdata$x:0000AD11                 db    0
.xdata$x:0000AD12                 db    0
.xdata$x:0000AD13                 db    0
.xdata$x:0000AD14                 dd offset __unwindfunclet$??0CFolderInStream@N7z@NArchive@@QAE@XZ$1
.xdata$x:0000AD18                 db    1
.xdata$x:0000AD19                 db    0
.xdata$x:0000AD1A                 db    0
.xdata$x:0000AD1B                 db    0
.xdata$x:0000AD1C                 dd offset __unwindfunclet$??0CFolderInStream@N7z@NArchive@@QAE@XZ$2
.xdata$x:0000AD20                 db    2
.xdata$x:0000AD21                 db    0
.xdata$x:0000AD22                 db    0
.xdata$x:0000AD23                 db    0
.xdata$x:0000AD24                 dd offset __unwindfunclet$??0CFolderInStream@N7z@NArchive@@QAE@XZ$3
.xdata$x:0000AD28 __ehfuncinfo$??0CFolderInStream@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:0000AD28                                         ; DATA XREF: __ehhandler$??0CFolderInStream@N7z@NArchive@@QAE@XZ+11o
.xdata$x:0000AD29                 db    5
.xdata$x:0000AD2A                 db  93h ; ô
.xdata$x:0000AD2B                 db  19h
.xdata$x:0000AD2C                 db    4
.xdata$x:0000AD2D                 db    0
.xdata$x:0000AD2E                 db    0
.xdata$x:0000AD2F                 db    0
.xdata$x:0000AD30                 dd offset __unwindtable$??0CFolderInStream@N7z@NArchive@@QAE@XZ
.xdata$x:0000AD34                 db    0
.xdata$x:0000AD35                 db    0
.xdata$x:0000AD36                 db    0
.xdata$x:0000AD37                 db    0
.xdata$x:0000AD38                 db    0
.xdata$x:0000AD39                 db    0
.xdata$x:0000AD3A                 db    0
.xdata$x:0000AD3B                 db    0
.xdata$x:0000AD3C                 db    0
.xdata$x:0000AD3D                 db    0
.xdata$x:0000AD3E                 db    0
.xdata$x:0000AD3F                 db    0
.xdata$x:0000AD40                 db    0
.xdata$x:0000AD41                 db    0
.xdata$x:0000AD42                 db    0
.xdata$x:0000AD43                 db    0
.xdata$x:0000AD44                 db    0
.xdata$x:0000AD45                 db    0
.xdata$x:0000AD46                 db    0
.xdata$x:0000AD47                 db    0
.xdata$x:0000AD48                 db    1
.xdata$x:0000AD49                 db    0
.xdata$x:0000AD4A                 db    0
.xdata$x:0000AD4B                 db    0
.xdata$x:0000AD4B _xdata$x        ends
.xdata$x:0000AD4B
.rdata$r:0000AD4C ; ===========================================================================
.rdata$r:0000AD4C
.rdata$r:0000AD4C ; Segment type: Pure data
.rdata$r:0000AD4C ; Segment permissions: Read
.rdata$r:0000AD4C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000AD4C                 assume cs:_rdata$r
.rdata$r:0000AD4C                 ;org 0AD4Ch
.rdata$r:0000AD4C ; COMDAT (pick any)
.rdata$r:0000AD4C                 public ??_R4CFolderInStream@N7z@NArchive@@6BISequentialInStream@@@
.rdata$r:0000AD4C ; const NArchive::N7z::CFolderInStream::`RTTI Complete Object Locator'{for `ISequentialInStream'}
.rdata$r:0000AD4C ??_R4CFolderInStream@N7z@NArchive@@6BISequentialInStream@@@ db    0
.rdata$r:0000AD4C                                         ; DATA XREF: .rdata:0000ACF4o
.rdata$r:0000AD4D                 db    0
.rdata$r:0000AD4E                 db    0
.rdata$r:0000AD4F                 db    0
.rdata$r:0000AD50                 db    0
.rdata$r:0000AD51                 db    0
.rdata$r:0000AD52                 db    0
.rdata$r:0000AD53                 db    0
.rdata$r:0000AD54                 db    0
.rdata$r:0000AD55                 db    0
.rdata$r:0000AD56                 db    0
.rdata$r:0000AD57                 db    0
.rdata$r:0000AD58                 dd offset ??_R0?AVCFolderInStream@N7z@NArchive@@@8 ; NArchive::N7z::CFolderInStream `RTTI Type Descriptor'
.rdata$r:0000AD5C                 dd offset ??_R3CFolderInStream@N7z@NArchive@@8 ; NArchive::N7z::CFolderInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000AD5C _rdata$r        ends
.rdata$r:0000AD5C
.data:0000AD60 ; ===========================================================================
.data:0000AD60
.data:0000AD60 ; Segment type: Pure data
.data:0000AD60 ; Segment permissions: Read/Write
.data:0000AD60 _data           segment dword public 'DATA' use32
.data:0000AD60                 assume cs:_data
.data:0000AD60                 ;org 0AD60h
.data:0000AD60 ; COMDAT (pick any)
.data:0000AD60                 public ??_R0?AVCFolderInStream@N7z@NArchive@@@8
.data:0000AD60 ; class NArchive::N7z::CFolderInStream `RTTI Type Descriptor'
.data:0000AD60 ??_R0?AVCFolderInStream@N7z@NArchive@@@8 dd offset ??_7type_info@@6B@
.data:0000AD60                                         ; DATA XREF: .rdata$r:0000AD58o
.data:0000AD60                                         ; .rdata$r:NArchive::N7z::CFolderInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:0000AD60                                         ; const type_info::`vftable'
.data:0000AD64                 align 8
.data:0000AD68 a_?avcfolderi_0 db '.?AVCFolderInStream@N7z@NArchive@@',0
.data:0000AD8B                 align 4
.data:0000AD8B _data           ends
.data:0000AD8B
.rdata$r:0000AD8C ; ===========================================================================
.rdata$r:0000AD8C
.rdata$r:0000AD8C ; Segment type: Pure data
.rdata$r:0000AD8C ; Segment permissions: Read
.rdata$r:0000AD8C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000AD8C                 assume cs:_rdata$r
.rdata$r:0000AD8C                 ;org 0AD8Ch
.rdata$r:0000AD8C ; COMDAT (pick any)
.rdata$r:0000AD8C                 public ??_R3CFolderInStream@N7z@NArchive@@8
.rdata$r:0000AD8C ; NArchive::N7z::CFolderInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000AD8C ??_R3CFolderInStream@N7z@NArchive@@8 db    0
.rdata$r:0000AD8C                                         ; DATA XREF: .rdata$r:0000AD5Co
.rdata$r:0000AD8C                                         ; .rdata$r:0000ADD0o ...
.rdata$r:0000AD8D                 db    0
.rdata$r:0000AD8E                 db    0
.rdata$r:0000AD8F                 db    0
.rdata$r:0000AD90                 db    1
.rdata$r:0000AD91                 db    0
.rdata$r:0000AD92                 db    0
.rdata$r:0000AD93                 db    0
.rdata$r:0000AD94                 db    6
.rdata$r:0000AD95                 db    0
.rdata$r:0000AD96                 db    0
.rdata$r:0000AD97                 db    0
.rdata$r:0000AD98                 dd offset ??_R2CFolderInStream@N7z@NArchive@@8 ; NArchive::N7z::CFolderInStream::`RTTI Base Class Array'
.rdata$r:0000AD98 _rdata$r        ends
.rdata$r:0000AD98
.rdata$r:0000AD9C ; ===========================================================================
.rdata$r:0000AD9C
.rdata$r:0000AD9C ; Segment type: Pure data
.rdata$r:0000AD9C ; Segment permissions: Read
.rdata$r:0000AD9C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000AD9C                 assume cs:_rdata$r
.rdata$r:0000AD9C                 ;org 0AD9Ch
.rdata$r:0000AD9C ; COMDAT (pick any)
.rdata$r:0000AD9C                 public ??_R2CFolderInStream@N7z@NArchive@@8
.rdata$r:0000AD9C ; NArchive::N7z::CFolderInStream::`RTTI Base Class Array'
.rdata$r:0000AD9C ??_R2CFolderInStream@N7z@NArchive@@8 dd offset ??_R1A@?0A@EA@CFolderInStream@N7z@NArchive@@8
.rdata$r:0000AD9C                                         ; DATA XREF: .rdata$r:0000AD98o
.rdata$r:0000AD9C                                         ; NArchive::N7z::CFolderInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000ADA0                 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000ADA4                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:0000ADA8                 dd offset ??_R13?0A@EA@ICompressGetSubStreamSize@@8 ; ICompressGetSubStreamSize::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:0000ADAC                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:0000ADB0                 dd offset ??_R17?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:0000ADB4                 db    0
.rdata$r:0000ADB5                 align 4
.rdata$r:0000ADB5 _rdata$r        ends
.rdata$r:0000ADB5
.rdata$r:0000ADB8 ; ===========================================================================
.rdata$r:0000ADB8
.rdata$r:0000ADB8 ; Segment type: Pure data
.rdata$r:0000ADB8 ; Segment permissions: Read
.rdata$r:0000ADB8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000ADB8                 assume cs:_rdata$r
.rdata$r:0000ADB8                 ;org 0ADB8h
.rdata$r:0000ADB8 ; COMDAT (pick any)
.rdata$r:0000ADB8                 public ??_R1A@?0A@EA@CFolderInStream@N7z@NArchive@@8
.rdata$r:0000ADB8 ; NArchive::N7z::CFolderInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000ADB8 ??_R1A@?0A@EA@CFolderInStream@N7z@NArchive@@8 dd offset ??_R0?AVCFolderInStream@N7z@NArchive@@@8
.rdata$r:0000ADB8                                         ; DATA XREF: .rdata$r:NArchive::N7z::CFolderInStream::`RTTI Base Class Array'o
.rdata$r:0000ADB8                                         ; NArchive::N7z::CFolderInStream `RTTI Type Descriptor'
.rdata$r:0000ADBC                 db    5
.rdata$r:0000ADBD                 db    0
.rdata$r:0000ADBE                 db    0
.rdata$r:0000ADBF                 db    0
.rdata$r:0000ADC0                 db    0
.rdata$r:0000ADC1                 db    0
.rdata$r:0000ADC2                 db    0
.rdata$r:0000ADC3                 db    0
.rdata$r:0000ADC4                 db 0FFh
.rdata$r:0000ADC5                 db 0FFh
.rdata$r:0000ADC6                 db 0FFh
.rdata$r:0000ADC7                 db 0FFh
.rdata$r:0000ADC8                 db    0
.rdata$r:0000ADC9                 db    0
.rdata$r:0000ADCA                 db    0
.rdata$r:0000ADCB                 db    0
.rdata$r:0000ADCC                 db  40h ; @
.rdata$r:0000ADCD                 db    0
.rdata$r:0000ADCE                 db    0
.rdata$r:0000ADCF                 db    0
.rdata$r:0000ADD0                 dd offset ??_R3CFolderInStream@N7z@NArchive@@8 ; NArchive::N7z::CFolderInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000ADD0 _rdata$r        ends
.rdata$r:0000ADD0
.rdata$r:0000ADD4 ; ===========================================================================
.rdata$r:0000ADD4
.rdata$r:0000ADD4 ; Segment type: Pure data
.rdata$r:0000ADD4 ; Segment permissions: Read
.rdata$r:0000ADD4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000ADD4                 assume cs:_rdata$r
.rdata$r:0000ADD4                 ;org 0ADD4h
.rdata$r:0000ADD4 ; COMDAT (pick any)
.rdata$r:0000ADD4                 public ??_R4CFolderInStream@N7z@NArchive@@6BICompressGetSubStreamSize@@@
.rdata$r:0000ADD4 ; const NArchive::N7z::CFolderInStream::`RTTI Complete Object Locator'{for `ICompressGetSubStreamSize'}
.rdata$r:0000ADD4 ??_R4CFolderInStream@N7z@NArchive@@6BICompressGetSubStreamSize@@@ db    0
.rdata$r:0000ADD4                                         ; DATA XREF: .rdata:0000ACE0o
.rdata$r:0000ADD5                 db    0
.rdata$r:0000ADD6                 db    0
.rdata$r:0000ADD7                 db    0
.rdata$r:0000ADD8                 db    4
.rdata$r:0000ADD9                 db    0
.rdata$r:0000ADDA                 db    0
.rdata$r:0000ADDB                 db    0
.rdata$r:0000ADDC                 db    0
.rdata$r:0000ADDD                 db    0
.rdata$r:0000ADDE                 db    0
.rdata$r:0000ADDF                 db    0
.rdata$r:0000ADE0                 dd offset ??_R0?AVCFolderInStream@N7z@NArchive@@@8 ; NArchive::N7z::CFolderInStream `RTTI Type Descriptor'
.rdata$r:0000ADE4                 dd offset ??_R3CFolderInStream@N7z@NArchive@@8 ; NArchive::N7z::CFolderInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000ADE4 _rdata$r        ends
.rdata$r:0000ADE4
.text:0000ADE8 ; ===========================================================================
.text:0000ADE8
.text:0000ADE8 ; Segment type: Pure code
.text:0000ADE8 ; Segment permissions: Read/Execute
.text:0000ADE8 _text           segment para public 'CODE' use32
.text:0000ADE8                 assume cs:_text
.text:0000ADE8                 ;org 0ADE8h
.text:0000ADE8 ; COMDAT (pick any)
.text:0000ADE8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000ADE8
.text:0000ADE8 ; =============== S U B R O U T I N E =======================================
.text:0000ADE8
.text:0000ADE8 ; Attributes: bp-based frame
.text:0000ADE8
.text:0000ADE8 ; __int32 __stdcall NArchive::N7z::CFolderInStream::QueryInterface(NArchive::N7z::CFolderInStream *this, const struct _GUID *Buf1, void **)
.text:0000ADE8                 public ?QueryInterface@CFolderInStream@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z
.text:0000ADE8 ?QueryInterface@CFolderInStream@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z proc near
.text:0000ADE8                                         ; CODE XREF: [thunk]:NArchive::N7z::CFolderInStream::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j
.text:0000ADE8                                         ; DATA XREF: .rdata:const NArchive::N7z::CFolderInStream::`vftable'{for `ISequentialInStream'}o
.text:0000ADE8
.text:0000ADE8 var_4           = dword ptr -4
.text:0000ADE8 this            = dword ptr  8
.text:0000ADE8 Buf1            = dword ptr  0Ch
.text:0000ADE8 arg_8           = dword ptr  10h
.text:0000ADE8
.text:0000ADE8                 push    ebp
.text:0000ADE9                 mov     ebp, esp
.text:0000ADEB                 push    ecx
.text:0000ADEC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000ADF3                 mov     eax, [ebp+arg_8]
.text:0000ADF6                 mov     dword ptr [eax], 0
.text:0000ADFC                 push    offset _IID_IUnknown ; Buf2
.text:0000AE01                 mov     ecx, [ebp+Buf1]
.text:0000AE04                 push    ecx             ; Buf1
.text:0000AE05                 call    ___@8           ; __(x,x)
.text:0000AE0A                 test    eax, eax
.text:0000AE0C                 jz      short loc_AE18
.text:0000AE0E                 mov     edx, [ebp+arg_8]
.text:0000AE11                 mov     eax, [ebp+this]
.text:0000AE14                 mov     [edx], eax
.text:0000AE16                 jmp     short loc_AE6F
.text:0000AE18 ; ---------------------------------------------------------------------------
.text:0000AE18
.text:0000AE18 loc_AE18:                               ; CODE XREF: NArchive::N7z::CFolderInStream::QueryInterface(_GUID const &,void * *)+24j
.text:0000AE18                 push    offset _IID_ISequentialInStream ; Buf2
.text:0000AE1D                 mov     ecx, [ebp+Buf1]
.text:0000AE20                 push    ecx             ; Buf1
.text:0000AE21                 call    ___@8           ; __(x,x)
.text:0000AE26                 test    eax, eax
.text:0000AE28                 jz      short loc_AE34
.text:0000AE2A                 mov     edx, [ebp+arg_8]
.text:0000AE2D                 mov     eax, [ebp+this]
.text:0000AE30                 mov     [edx], eax
.text:0000AE32                 jmp     short loc_AE6F
.text:0000AE34 ; ---------------------------------------------------------------------------
.text:0000AE34
.text:0000AE34 loc_AE34:                               ; CODE XREF: NArchive::N7z::CFolderInStream::QueryInterface(_GUID const &,void * *)+40j
.text:0000AE34                 push    offset _IID_ICompressGetSubStreamSize ; Buf2
.text:0000AE39                 mov     ecx, [ebp+Buf1]
.text:0000AE3C                 push    ecx             ; Buf1
.text:0000AE3D                 call    ___@8           ; __(x,x)
.text:0000AE42                 test    eax, eax
.text:0000AE44                 jz      short loc_AE68
.text:0000AE46                 cmp     [ebp+this], 0
.text:0000AE4A                 jz      short loc_AE57
.text:0000AE4C                 mov     edx, [ebp+this]
.text:0000AE4F                 add     edx, 4
.text:0000AE52                 mov     [ebp+var_4], edx
.text:0000AE55                 jmp     short loc_AE5E
.text:0000AE57 ; ---------------------------------------------------------------------------
.text:0000AE57
.text:0000AE57 loc_AE57:                               ; CODE XREF: NArchive::N7z::CFolderInStream::QueryInterface(_GUID const &,void * *)+62j
.text:0000AE57                 mov     [ebp+var_4], 0
.text:0000AE5E
.text:0000AE5E loc_AE5E:                               ; CODE XREF: NArchive::N7z::CFolderInStream::QueryInterface(_GUID const &,void * *)+6Dj
.text:0000AE5E                 mov     eax, [ebp+arg_8]
.text:0000AE61                 mov     ecx, [ebp+var_4]
.text:0000AE64                 mov     [eax], ecx
.text:0000AE66                 jmp     short loc_AE6F
.text:0000AE68 ; ---------------------------------------------------------------------------
.text:0000AE68
.text:0000AE68 loc_AE68:                               ; CODE XREF: NArchive::N7z::CFolderInStream::QueryInterface(_GUID const &,void * *)+5Cj
.text:0000AE68                 mov     eax, 80004002h
.text:0000AE6D                 jmp     short loc_AE80
.text:0000AE6F ; ---------------------------------------------------------------------------
.text:0000AE6F
.text:0000AE6F loc_AE6F:                               ; CODE XREF: NArchive::N7z::CFolderInStream::QueryInterface(_GUID const &,void * *)+2Ej
.text:0000AE6F                                         ; NArchive::N7z::CFolderInStream::QueryInterface(_GUID const &,void * *)+4Aj ...
.text:0000AE6F                 mov     edx, [ebp+this]
.text:0000AE72                 mov     eax, [edx+8]
.text:0000AE75                 add     eax, 1
.text:0000AE78                 mov     ecx, [ebp+this]
.text:0000AE7B                 mov     [ecx+8], eax
.text:0000AE7E                 xor     eax, eax
.text:0000AE80
.text:0000AE80 loc_AE80:                               ; CODE XREF: NArchive::N7z::CFolderInStream::QueryInterface(_GUID const &,void * *)+85j
.text:0000AE80                 add     esp, 4
.text:0000AE83                 cmp     ebp, esp
.text:0000AE85                 call    __RTC_CheckEsp
.text:0000AE8A                 mov     esp, ebp
.text:0000AE8C                 pop     ebp
.text:0000AE8D                 retn    0Ch
.text:0000AE8D ?QueryInterface@CFolderInStream@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z endp
.text:0000AE8D
.text:0000AE8D _text           ends
.text:0000AE8D
.text:0000AE90 ; ===========================================================================
.text:0000AE90
.text:0000AE90 ; Segment type: Pure code
.text:0000AE90 ; Segment permissions: Read/Execute
.text:0000AE90 _text           segment para public 'CODE' use32
.text:0000AE90                 assume cs:_text
.text:0000AE90                 ;org 0AE90h
.text:0000AE90 ; COMDAT (pick any)
.text:0000AE90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000AE90
.text:0000AE90 ; =============== S U B R O U T I N E =======================================
.text:0000AE90
.text:0000AE90 ; Attributes: bp-based frame
.text:0000AE90
.text:0000AE90 ; unsigned __int32 __stdcall NArchive::N7z::CFolderInStream::AddRef(NArchive::N7z::CFolderInStream *this)
.text:0000AE90                 public ?AddRef@CFolderInStream@N7z@NArchive@@UAGKXZ
.text:0000AE90 ?AddRef@CFolderInStream@N7z@NArchive@@UAGKXZ proc near
.text:0000AE90                                         ; CODE XREF: [thunk]:NArchive::N7z::CFolderInStream::AddRef`adjustor{4}' (void)+5j
.text:0000AE90                                         ; DATA XREF: .rdata:0000ACFCo
.text:0000AE90
.text:0000AE90 var_4           = dword ptr -4
.text:0000AE90 this            = dword ptr  8
.text:0000AE90
.text:0000AE90                 push    ebp
.text:0000AE91                 mov     ebp, esp
.text:0000AE93                 push    ecx
.text:0000AE94                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000AE9B                 mov     eax, [ebp+this]
.text:0000AE9E                 mov     ecx, [eax+8]
.text:0000AEA1                 add     ecx, 1
.text:0000AEA4                 mov     [ebp+var_4], ecx
.text:0000AEA7                 mov     edx, [ebp+this]
.text:0000AEAA                 mov     eax, [ebp+var_4]
.text:0000AEAD                 mov     [edx+8], eax
.text:0000AEB0                 mov     eax, [ebp+var_4]
.text:0000AEB3                 mov     esp, ebp
.text:0000AEB5                 pop     ebp
.text:0000AEB6                 retn    4
.text:0000AEB6 ?AddRef@CFolderInStream@N7z@NArchive@@UAGKXZ endp
.text:0000AEB6
.text:0000AEB6 ; ---------------------------------------------------------------------------
.text:0000AEB9                 align 4
.text:0000AEB9 _text           ends
.text:0000AEB9
.text:0000AEBC ; ===========================================================================
.text:0000AEBC
.text:0000AEBC ; Segment type: Pure code
.text:0000AEBC ; Segment permissions: Read/Execute
.text:0000AEBC _text           segment para public 'CODE' use32
.text:0000AEBC                 assume cs:_text
.text:0000AEBC                 ;org 0AEBCh
.text:0000AEBC ; COMDAT (pick any)
.text:0000AEBC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000AEBC
.text:0000AEBC ; =============== S U B R O U T I N E =======================================
.text:0000AEBC
.text:0000AEBC ; Attributes: bp-based frame
.text:0000AEBC
.text:0000AEBC ; unsigned __int32 __stdcall NArchive::N7z::CFolderInStream::Release(NArchive::N7z::CFolderInStream *this)
.text:0000AEBC                 public ?Release@CFolderInStream@N7z@NArchive@@UAGKXZ
.text:0000AEBC ?Release@CFolderInStream@N7z@NArchive@@UAGKXZ proc near
.text:0000AEBC                                         ; CODE XREF: [thunk]:NArchive::N7z::CFolderInStream::Release`adjustor{4}' (void)+5j
.text:0000AEBC                                         ; DATA XREF: .rdata:0000AD00o
.text:0000AEBC
.text:0000AEBC var_10          = dword ptr -10h
.text:0000AEBC var_C           = dword ptr -0Ch
.text:0000AEBC var_8           = dword ptr -8
.text:0000AEBC var_4           = dword ptr -4
.text:0000AEBC this            = dword ptr  8
.text:0000AEBC
.text:0000AEBC                 push    ebp
.text:0000AEBD                 mov     ebp, esp
.text:0000AEBF                 sub     esp, 10h
.text:0000AEC2                 mov     eax, 0CCCCCCCCh
.text:0000AEC7                 mov     [ebp+var_10], eax
.text:0000AECA                 mov     [ebp+var_C], eax
.text:0000AECD                 mov     [ebp+var_8], eax
.text:0000AED0                 mov     [ebp+var_4], eax
.text:0000AED3                 mov     eax, [ebp+this]
.text:0000AED6                 mov     ecx, [eax+8]
.text:0000AED9                 sub     ecx, 1
.text:0000AEDC                 mov     [ebp+var_C], ecx
.text:0000AEDF                 mov     edx, [ebp+this]
.text:0000AEE2                 mov     eax, [ebp+var_C]
.text:0000AEE5                 mov     [edx+8], eax
.text:0000AEE8                 cmp     [ebp+var_C], 0
.text:0000AEEC                 jz      short loc_AEF6
.text:0000AEEE                 mov     ecx, [ebp+this]
.text:0000AEF1                 mov     eax, [ecx+8]
.text:0000AEF4                 jmp     short loc_AF20
.text:0000AEF6 ; ---------------------------------------------------------------------------
.text:0000AEF6
.text:0000AEF6 loc_AEF6:                               ; CODE XREF: NArchive::N7z::CFolderInStream::Release(void)+30j
.text:0000AEF6                 mov     edx, [ebp+this]
.text:0000AEF9                 mov     [ebp+var_8], edx
.text:0000AEFC                 mov     eax, [ebp+var_8]
.text:0000AEFF                 mov     [ebp+var_4], eax
.text:0000AF02                 cmp     [ebp+var_4], 0
.text:0000AF06                 jz      short loc_AF17
.text:0000AF08                 push    1
.text:0000AF0A                 mov     ecx, [ebp+var_4]
.text:0000AF0D                 call    ??_GCFolderInStream@N7z@NArchive@@QAEPAXI@Z ; NArchive::N7z::CFolderInStream::`scalar deleting destructor'(uint)
.text:0000AF12                 mov     [ebp+var_10], eax
.text:0000AF15                 jmp     short loc_AF1E
.text:0000AF17 ; ---------------------------------------------------------------------------
.text:0000AF17
.text:0000AF17 loc_AF17:                               ; CODE XREF: NArchive::N7z::CFolderInStream::Release(void)+4Aj
.text:0000AF17                 mov     [ebp+var_10], 0
.text:0000AF1E
.text:0000AF1E loc_AF1E:                               ; CODE XREF: NArchive::N7z::CFolderInStream::Release(void)+59j
.text:0000AF1E                 xor     eax, eax
.text:0000AF20
.text:0000AF20 loc_AF20:                               ; CODE XREF: NArchive::N7z::CFolderInStream::Release(void)+38j
.text:0000AF20                 add     esp, 10h
.text:0000AF23                 cmp     ebp, esp
.text:0000AF25                 call    __RTC_CheckEsp
.text:0000AF2A                 mov     esp, ebp
.text:0000AF2C                 pop     ebp
.text:0000AF2D                 retn    4
.text:0000AF2D ?Release@CFolderInStream@N7z@NArchive@@UAGKXZ endp
.text:0000AF2D
.text:0000AF2D _text           ends
.text:0000AF2D
.text:0000AF30 ; ===========================================================================
.text:0000AF30
.text:0000AF30 ; Segment type: Pure code
.text:0000AF30 ; Segment permissions: Read/Execute
.text:0000AF30 _text           segment para public 'CODE' use32
.text:0000AF30                 assume cs:_text
.text:0000AF30                 ;org 0AF30h
.text:0000AF30 ; COMDAT (pick any)
.text:0000AF30                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000AF30
.text:0000AF30 ; =============== S U B R O U T I N E =======================================
.text:0000AF30
.text:0000AF30 ; Attributes: bp-based frame
.text:0000AF30
.text:0000AF30 ; public: void * __thiscall NArchive::N7z::CFolderInStream::`scalar deleting destructor'(unsigned int)
.text:0000AF30                 public ??_GCFolderInStream@N7z@NArchive@@QAEPAXI@Z
.text:0000AF30 ??_GCFolderInStream@N7z@NArchive@@QAEPAXI@Z proc near
.text:0000AF30                                         ; CODE XREF: NArchive::N7z::CFolderInStream::Release(void)+51p
.text:0000AF30
.text:0000AF30 var_4           = dword ptr -4
.text:0000AF30 arg_0           = dword ptr  8
.text:0000AF30
.text:0000AF30                 push    ebp
.text:0000AF31                 mov     ebp, esp
.text:0000AF33                 push    ecx
.text:0000AF34                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000AF3B                 mov     [ebp+var_4], ecx
.text:0000AF3E                 mov     ecx, [ebp+var_4] ; this
.text:0000AF41                 call    ??1CFolderInStream@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFolderInStream::~CFolderInStream(void)
.text:0000AF46                 mov     eax, [ebp+arg_0]
.text:0000AF49                 and     eax, 1
.text:0000AF4C                 jz      short loc_AF5A
.text:0000AF4E                 mov     ecx, [ebp+var_4]
.text:0000AF51                 push    ecx             ; void *
.text:0000AF52                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000AF57                 add     esp, 4
.text:0000AF5A
.text:0000AF5A loc_AF5A:                               ; CODE XREF: NArchive::N7z::CFolderInStream::`scalar deleting destructor'(uint)+1Cj
.text:0000AF5A                 mov     eax, [ebp+var_4]
.text:0000AF5D                 add     esp, 4
.text:0000AF60                 cmp     ebp, esp
.text:0000AF62                 call    __RTC_CheckEsp
.text:0000AF67                 mov     esp, ebp
.text:0000AF69                 pop     ebp
.text:0000AF6A                 retn    4
.text:0000AF6A ??_GCFolderInStream@N7z@NArchive@@QAEPAXI@Z endp
.text:0000AF6A
.text:0000AF6A ; ---------------------------------------------------------------------------
.text:0000AF6D                 align 10h
.text:0000AF6D _text           ends
.text:0000AF6D
.text:0000AF70 ; ===========================================================================
.text:0000AF70
.text:0000AF70 ; Segment type: Pure code
.text:0000AF70 ; Segment permissions: Read/Execute
.text:0000AF70 _text           segment para public 'CODE' use32
.text:0000AF70                 assume cs:_text
.text:0000AF70                 ;org 0AF70h
.text:0000AF70 ; COMDAT (pick any)
.text:0000AF70                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000AF70
.text:0000AF70 ; =============== S U B R O U T I N E =======================================
.text:0000AF70
.text:0000AF70 ; Attributes: bp-based frame
.text:0000AF70
.text:0000AF70 ; _DWORD __thiscall NArchive::N7z::CFolderInStream::~CFolderInStream(NArchive::N7z::CFolderInStream *__hidden this)
.text:0000AF70                 public ??1CFolderInStream@N7z@NArchive@@QAE@XZ
.text:0000AF70 ??1CFolderInStream@N7z@NArchive@@QAE@XZ proc near
.text:0000AF70                                         ; CODE XREF: NArchive::N7z::CFolderInStream::`scalar deleting destructor'(uint)+11p
.text:0000AF70
.text:0000AF70 var_10          = dword ptr -10h
.text:0000AF70 var_C           = dword ptr -0Ch
.text:0000AF70 var_4           = dword ptr -4
.text:0000AF70
.text:0000AF70                 push    ebp
.text:0000AF71                 mov     ebp, esp
.text:0000AF73                 push    0FFFFFFFFh
.text:0000AF75                 push    offset __ehhandler$??1CFolderInStream@N7z@NArchive@@QAE@XZ
.text:0000AF7A                 mov     eax, large fs:0
.text:0000AF80                 push    eax
.text:0000AF81                 push    ecx
.text:0000AF82                 mov     [ebp+var_10], 0CCCCCCCCh
.text:0000AF89                 mov     eax, dword ptr ds:___security_cookie
.text:0000AF8E                 xor     eax, ebp
.text:0000AF90                 push    eax
.text:0000AF91                 lea     eax, [ebp+var_C]
.text:0000AF94                 mov     large fs:0, eax
.text:0000AF9A                 mov     [ebp+var_10], ecx
.text:0000AF9D                 mov     [ebp+var_4], 3
.text:0000AFA4                 mov     ecx, [ebp+var_10]
.text:0000AFA7                 add     ecx, 50h ; 'P'
.text:0000AFAA                 call    ??1?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text:0000AFAF                 mov     byte ptr [ebp+var_4], 2
.text:0000AFB3                 mov     ecx, [ebp+var_10]
.text:0000AFB6                 add     ecx, 44h ; 'D'
.text:0000AFB9                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:0000AFBE                 mov     byte ptr [ebp+var_4], 1
.text:0000AFC2                 mov     ecx, [ebp+var_10]
.text:0000AFC5                 add     ecx, 38h ; '8'
.text:0000AFC8                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:0000AFCD                 mov     byte ptr [ebp+var_4], 0
.text:0000AFD1                 mov     ecx, [ebp+var_10]
.text:0000AFD4                 add     ecx, 34h ; '4'
.text:0000AFD7                 call    ??1?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallback>::~CMyComPtr<IArchiveUpdateCallback>(void)
.text:0000AFDC                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000AFE3                 mov     ecx, [ebp+var_10]
.text:0000AFE6                 add     ecx, 0Ch
.text:0000AFE9                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:0000AFEE                 mov     ecx, [ebp+var_C]
.text:0000AFF1                 mov     large fs:0, ecx
.text:0000AFF8                 pop     ecx
.text:0000AFF9                 add     esp, 10h
.text:0000AFFC                 cmp     ebp, esp
.text:0000AFFE                 call    __RTC_CheckEsp
.text:0000B003                 mov     esp, ebp
.text:0000B005                 pop     ebp
.text:0000B006                 retn
.text:0000B006 ??1CFolderInStream@N7z@NArchive@@QAE@XZ endp
.text:0000B006
.text:0000B006 ; ---------------------------------------------------------------------------
.text:0000B007                 align 4
.text:0000B007 _text           ends
.text:0000B007
.text$x:0000B008 ; ===========================================================================
.text$x:0000B008
.text$x:0000B008 ; Segment type: Pure code
.text$x:0000B008 ; Segment permissions: Read/Execute
.text$x:0000B008 _text$x         segment para public 'CODE' use32
.text$x:0000B008                 assume cs:_text$x
.text$x:0000B008                 ;org 0B008h
.text$x:0000B008 ; COMDAT (pick associative to section at AF70)
.text$x:0000B008                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000B008
.text$x:0000B008 ; =============== S U B R O U T I N E =======================================
.text$x:0000B008
.text$x:0000B008
.text$x:0000B008 __unwindfunclet$??1CFolderInStream@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:0000B008                                         ; DATA XREF: .xdata$x:0000B054o
.text$x:0000B008                 mov     ecx, [ebp-10h]
.text$x:0000B00B                 add     ecx, 0Ch
.text$x:0000B00E                 jmp     ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text$x:0000B00E __unwindfunclet$??1CFolderInStream@N7z@NArchive@@QAE@XZ$0 endp
.text$x:0000B00E
.text$x:0000B013
.text$x:0000B013 ; =============== S U B R O U T I N E =======================================
.text$x:0000B013
.text$x:0000B013
.text$x:0000B013 __unwindfunclet$??1CFolderInStream@N7z@NArchive@@QAE@XZ$1 proc near
.text$x:0000B013                                         ; DATA XREF: .xdata$x:0000B05Co
.text$x:0000B013                 mov     ecx, [ebp-10h]
.text$x:0000B016                 add     ecx, 34h ; '4'
.text$x:0000B019                 jmp     ??1?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallback>::~CMyComPtr<IArchiveUpdateCallback>(void)
.text$x:0000B019 __unwindfunclet$??1CFolderInStream@N7z@NArchive@@QAE@XZ$1 endp
.text$x:0000B019
.text$x:0000B01E
.text$x:0000B01E ; =============== S U B R O U T I N E =======================================
.text$x:0000B01E
.text$x:0000B01E
.text$x:0000B01E __unwindfunclet$??1CFolderInStream@N7z@NArchive@@QAE@XZ$2 proc near
.text$x:0000B01E                                         ; DATA XREF: .xdata$x:0000B064o
.text$x:0000B01E                 mov     ecx, [ebp-10h]
.text$x:0000B021                 add     ecx, 38h ; '8'
.text$x:0000B024                 jmp     ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text$x:0000B024 __unwindfunclet$??1CFolderInStream@N7z@NArchive@@QAE@XZ$2 endp
.text$x:0000B024
.text$x:0000B029
.text$x:0000B029 ; =============== S U B R O U T I N E =======================================
.text$x:0000B029
.text$x:0000B029
.text$x:0000B029 __unwindfunclet$??1CFolderInStream@N7z@NArchive@@QAE@XZ$3 proc near
.text$x:0000B029                                         ; DATA XREF: .xdata$x:0000B06Co
.text$x:0000B029                 mov     ecx, [ebp-10h]
.text$x:0000B02C                 add     ecx, 44h ; 'D'
.text$x:0000B02F                 jmp     ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text$x:0000B02F __unwindfunclet$??1CFolderInStream@N7z@NArchive@@QAE@XZ$3 endp
.text$x:0000B02F
.text$x:0000B034
.text$x:0000B034 ; =============== S U B R O U T I N E =======================================
.text$x:0000B034
.text$x:0000B034
.text$x:0000B034 __ehhandler$??1CFolderInStream@N7z@NArchive@@QAE@XZ proc near
.text$x:0000B034                                         ; DATA XREF: NArchive::N7z::CFolderInStream::~CFolderInStream(void)+5o
.text$x:0000B034
.text$x:0000B034 arg_4           = dword ptr  8
.text$x:0000B034
.text$x:0000B034                 mov     edx, [esp+arg_4]
.text$x:0000B038                 lea     eax, [edx+0Ch]
.text$x:0000B03B                 mov     ecx, [edx-8]
.text$x:0000B03E                 xor     ecx, eax
.text$x:0000B040                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000B045                 mov     eax, offset __ehfuncinfo$??1CFolderInStream@N7z@NArchive@@QAE@XZ
.text$x:0000B04A                 jmp     ___CxxFrameHandler3
.text$x:0000B04A __ehhandler$??1CFolderInStream@N7z@NArchive@@QAE@XZ endp
.text$x:0000B04A
.text$x:0000B04A ; ---------------------------------------------------------------------------
.text$x:0000B04F                 align 10h
.text$x:0000B04F _text$x         ends
.text$x:0000B04F
.xdata$x:0000B050 ; ===========================================================================
.xdata$x:0000B050
.xdata$x:0000B050 ; Segment type: Pure data
.xdata$x:0000B050 ; Segment permissions: Read
.xdata$x:0000B050 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B050                 assume cs:_xdata$x
.xdata$x:0000B050                 ;org 0B050h
.xdata$x:0000B050 ; COMDAT (pick associative to section at AF70)
.xdata$x:0000B050 __unwindtable$??1CFolderInStream@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:0000B050                                         ; DATA XREF: .xdata$x:0000B078o
.xdata$x:0000B051                 db 0FFh
.xdata$x:0000B052                 db 0FFh
.xdata$x:0000B053                 db 0FFh
.xdata$x:0000B054                 dd offset __unwindfunclet$??1CFolderInStream@N7z@NArchive@@QAE@XZ$0
.xdata$x:0000B058                 db    0
.xdata$x:0000B059                 db    0
.xdata$x:0000B05A                 db    0
.xdata$x:0000B05B                 db    0
.xdata$x:0000B05C                 dd offset __unwindfunclet$??1CFolderInStream@N7z@NArchive@@QAE@XZ$1
.xdata$x:0000B060                 db    1
.xdata$x:0000B061                 db    0
.xdata$x:0000B062                 db    0
.xdata$x:0000B063                 db    0
.xdata$x:0000B064                 dd offset __unwindfunclet$??1CFolderInStream@N7z@NArchive@@QAE@XZ$2
.xdata$x:0000B068                 db    2
.xdata$x:0000B069                 db    0
.xdata$x:0000B06A                 db    0
.xdata$x:0000B06B                 db    0
.xdata$x:0000B06C                 dd offset __unwindfunclet$??1CFolderInStream@N7z@NArchive@@QAE@XZ$3
.xdata$x:0000B070 __ehfuncinfo$??1CFolderInStream@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:0000B070                                         ; DATA XREF: __ehhandler$??1CFolderInStream@N7z@NArchive@@QAE@XZ+11o
.xdata$x:0000B071                 db    5
.xdata$x:0000B072                 db  93h ; ô
.xdata$x:0000B073                 db  19h
.xdata$x:0000B074                 db    4
.xdata$x:0000B075                 db    0
.xdata$x:0000B076                 db    0
.xdata$x:0000B077                 db    0
.xdata$x:0000B078                 dd offset __unwindtable$??1CFolderInStream@N7z@NArchive@@QAE@XZ
.xdata$x:0000B07C                 db    0
.xdata$x:0000B07D                 db    0
.xdata$x:0000B07E                 db    0
.xdata$x:0000B07F                 db    0
.xdata$x:0000B080                 db    0
.xdata$x:0000B081                 db    0
.xdata$x:0000B082                 db    0
.xdata$x:0000B083                 db    0
.xdata$x:0000B084                 db    0
.xdata$x:0000B085                 db    0
.xdata$x:0000B086                 db    0
.xdata$x:0000B087                 db    0
.xdata$x:0000B088                 db    0
.xdata$x:0000B089                 db    0
.xdata$x:0000B08A                 db    0
.xdata$x:0000B08B                 db    0
.xdata$x:0000B08C                 db    0
.xdata$x:0000B08D                 db    0
.xdata$x:0000B08E                 db    0
.xdata$x:0000B08F                 db    0
.xdata$x:0000B090                 db    1
.xdata$x:0000B091                 db    0
.xdata$x:0000B092                 db    0
.xdata$x:0000B093                 db    0
.xdata$x:0000B093 _xdata$x        ends
.xdata$x:0000B093
.text:0000B094 ; ===========================================================================
.text:0000B094
.text:0000B094 ; Segment type: Pure code
.text:0000B094 ; Segment permissions: Read/Execute
.text:0000B094 _text           segment para public 'CODE' use32
.text:0000B094                 assume cs:_text
.text:0000B094                 ;org 0B094h
.text:0000B094 ; COMDAT (pick any)
.text:0000B094                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000B094
.text:0000B094 ; =============== S U B R O U T I N E =======================================
.text:0000B094
.text:0000B094 ; Attributes: bp-based frame
.text:0000B094
.text:0000B094 ; _DWORD __thiscall NArchive::N7z::CFolder::~CFolder(NArchive::N7z::CFolder *__hidden this)
.text:0000B094                 public ??1CFolder@N7z@NArchive@@QAE@XZ
.text:0000B094 ??1CFolder@N7z@NArchive@@QAE@XZ proc near
.text:0000B094                                         ; CODE XREF: NArchive::N7z::CFolderEx::~CFolderEx(void)+11p
.text:0000B094
.text:0000B094 var_10          = dword ptr -10h
.text:0000B094 var_C           = dword ptr -0Ch
.text:0000B094 var_4           = dword ptr -4
.text:0000B094
.text:0000B094                 push    ebp
.text:0000B095                 mov     ebp, esp
.text:0000B097                 push    0FFFFFFFFh
.text:0000B099                 push    offset __ehhandler$??1CFolder@N7z@NArchive@@QAE@XZ
.text:0000B09E                 mov     eax, large fs:0
.text:0000B0A4                 push    eax
.text:0000B0A5                 push    ecx
.text:0000B0A6                 mov     [ebp+var_10], 0CCCCCCCCh
.text:0000B0AD                 mov     eax, dword ptr ds:___security_cookie
.text:0000B0B2                 xor     eax, ebp
.text:0000B0B4                 push    eax
.text:0000B0B5                 lea     eax, [ebp+var_C]
.text:0000B0B8                 mov     large fs:0, eax
.text:0000B0BE                 mov     [ebp+var_10], ecx
.text:0000B0C1                 mov     [ebp+var_4], 1
.text:0000B0C8                 mov     ecx, [ebp+var_10]
.text:0000B0CB                 add     ecx, 10h
.text:0000B0CE                 call    ??1?$CObjArray2@I@@QAE@XZ ; CObjArray2<uint>::~CObjArray2<uint>(void)
.text:0000B0D3                 mov     byte ptr [ebp+var_4], 0
.text:0000B0D7                 mov     ecx, [ebp+var_10]
.text:0000B0DA                 add     ecx, 8
.text:0000B0DD                 call    ??1?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CBond>::~CObjArray2<NArchive::N7z::CBond>(void)
.text:0000B0E2                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000B0E9                 mov     ecx, [ebp+var_10]
.text:0000B0EC                 call    ??1?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CCoderInfo>::~CObjArray2<NArchive::N7z::CCoderInfo>(void)
.text:0000B0F1                 mov     ecx, [ebp+var_C]
.text:0000B0F4                 mov     large fs:0, ecx
.text:0000B0FB                 pop     ecx
.text:0000B0FC                 add     esp, 10h
.text:0000B0FF                 cmp     ebp, esp
.text:0000B101                 call    __RTC_CheckEsp
.text:0000B106                 mov     esp, ebp
.text:0000B108                 pop     ebp
.text:0000B109                 retn
.text:0000B109 ??1CFolder@N7z@NArchive@@QAE@XZ endp
.text:0000B109
.text:0000B109 ; ---------------------------------------------------------------------------
.text:0000B10A                 align 4
.text:0000B10A _text           ends
.text:0000B10A
.text$x:0000B10C ; ===========================================================================
.text$x:0000B10C
.text$x:0000B10C ; Segment type: Pure code
.text$x:0000B10C ; Segment permissions: Read/Execute
.text$x:0000B10C _text$x         segment para public 'CODE' use32
.text$x:0000B10C                 assume cs:_text$x
.text$x:0000B10C                 ;org 0B10Ch
.text$x:0000B10C ; COMDAT (pick associative to section at B094)
.text$x:0000B10C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000B10C
.text$x:0000B10C ; =============== S U B R O U T I N E =======================================
.text$x:0000B10C
.text$x:0000B10C
.text$x:0000B10C __unwindfunclet$??1CFolder@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:0000B10C                                         ; DATA XREF: .xdata$x:0000B140o
.text$x:0000B10C                 mov     ecx, [ebp-10h]
.text$x:0000B10F                 jmp     ??1?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CCoderInfo>::~CObjArray2<NArchive::N7z::CCoderInfo>(void)
.text$x:0000B10F __unwindfunclet$??1CFolder@N7z@NArchive@@QAE@XZ$0 endp
.text$x:0000B10F
.text$x:0000B114
.text$x:0000B114 ; =============== S U B R O U T I N E =======================================
.text$x:0000B114
.text$x:0000B114
.text$x:0000B114 __unwindfunclet$??1CFolder@N7z@NArchive@@QAE@XZ$1 proc near
.text$x:0000B114                                         ; DATA XREF: .xdata$x:0000B148o
.text$x:0000B114                 mov     ecx, [ebp-10h]
.text$x:0000B117                 add     ecx, 8
.text$x:0000B11A                 jmp     ??1?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CBond>::~CObjArray2<NArchive::N7z::CBond>(void)
.text$x:0000B11A __unwindfunclet$??1CFolder@N7z@NArchive@@QAE@XZ$1 endp
.text$x:0000B11A
.text$x:0000B11F
.text$x:0000B11F ; =============== S U B R O U T I N E =======================================
.text$x:0000B11F
.text$x:0000B11F
.text$x:0000B11F __ehhandler$??1CFolder@N7z@NArchive@@QAE@XZ proc near
.text$x:0000B11F                                         ; DATA XREF: NArchive::N7z::CFolder::~CFolder(void)+5o
.text$x:0000B11F
.text$x:0000B11F arg_4           = dword ptr  8
.text$x:0000B11F
.text$x:0000B11F                 mov     edx, [esp+arg_4]
.text$x:0000B123                 lea     eax, [edx+0Ch]
.text$x:0000B126                 mov     ecx, [edx-8]
.text$x:0000B129                 xor     ecx, eax
.text$x:0000B12B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000B130                 mov     eax, offset __ehfuncinfo$??1CFolder@N7z@NArchive@@QAE@XZ
.text$x:0000B135                 jmp     ___CxxFrameHandler3
.text$x:0000B135 __ehhandler$??1CFolder@N7z@NArchive@@QAE@XZ endp
.text$x:0000B135
.text$x:0000B135 ; ---------------------------------------------------------------------------
.text$x:0000B13A                 align 4
.text$x:0000B13A _text$x         ends
.text$x:0000B13A
.xdata$x:0000B13C ; ===========================================================================
.xdata$x:0000B13C
.xdata$x:0000B13C ; Segment type: Pure data
.xdata$x:0000B13C ; Segment permissions: Read
.xdata$x:0000B13C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B13C                 assume cs:_xdata$x
.xdata$x:0000B13C                 ;org 0B13Ch
.xdata$x:0000B13C ; COMDAT (pick associative to section at B094)
.xdata$x:0000B13C __unwindtable$??1CFolder@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:0000B13C                                         ; DATA XREF: .xdata$x:0000B154o
.xdata$x:0000B13D                 db 0FFh
.xdata$x:0000B13E                 db 0FFh
.xdata$x:0000B13F                 db 0FFh
.xdata$x:0000B140                 dd offset __unwindfunclet$??1CFolder@N7z@NArchive@@QAE@XZ$0
.xdata$x:0000B144                 align 8
.xdata$x:0000B148                 dd offset __unwindfunclet$??1CFolder@N7z@NArchive@@QAE@XZ$1
.xdata$x:0000B14C __ehfuncinfo$??1CFolder@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:0000B14C                                         ; DATA XREF: __ehhandler$??1CFolder@N7z@NArchive@@QAE@XZ+11o
.xdata$x:0000B14D                 db    5
.xdata$x:0000B14E                 db  93h ; ô
.xdata$x:0000B14F                 db  19h
.xdata$x:0000B150                 db    2
.xdata$x:0000B151                 db    0
.xdata$x:0000B152                 db    0
.xdata$x:0000B153                 db    0
.xdata$x:0000B154                 dd offset __unwindtable$??1CFolder@N7z@NArchive@@QAE@XZ
.xdata$x:0000B158                 db    0
.xdata$x:0000B159                 db    0
.xdata$x:0000B15A                 db    0
.xdata$x:0000B15B                 db    0
.xdata$x:0000B15C                 db    0
.xdata$x:0000B15D                 db    0
.xdata$x:0000B15E                 db    0
.xdata$x:0000B15F                 db    0
.xdata$x:0000B160                 db    0
.xdata$x:0000B161                 db    0
.xdata$x:0000B162                 db    0
.xdata$x:0000B163                 db    0
.xdata$x:0000B164                 db    0
.xdata$x:0000B165                 db    0
.xdata$x:0000B166                 db    0
.xdata$x:0000B167                 db    0
.xdata$x:0000B168                 db    0
.xdata$x:0000B169                 db    0
.xdata$x:0000B16A                 db    0
.xdata$x:0000B16B                 db    0
.xdata$x:0000B16C                 db    1
.xdata$x:0000B16D                 db    0
.xdata$x:0000B16E                 db    0
.xdata$x:0000B16F                 db    0
.xdata$x:0000B16F _xdata$x        ends
.xdata$x:0000B16F
.text:0000B170 ; ===========================================================================
.text:0000B170
.text:0000B170 ; Segment type: Pure code
.text:0000B170 ; Segment permissions: Read/Execute
.text:0000B170 _text           segment para public 'CODE' use32
.text:0000B170                 assume cs:_text
.text:0000B170                 ;org 0B170h
.text:0000B170 ; COMDAT (pick any)
.text:0000B170                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000B170
.text:0000B170 ; =============== S U B R O U T I N E =======================================
.text:0000B170
.text:0000B170 ; Attributes: bp-based frame
.text:0000B170
.text:0000B170 ; _DWORD __thiscall NWindows::NSynchronization::CManualResetEvent::CManualResetEvent(NWindows::NSynchronization::CManualResetEvent *__hidden this)
.text:0000B170                 public ??0CManualResetEvent@NSynchronization@NWindows@@QAE@XZ
.text:0000B170 ??0CManualResetEvent@NSynchronization@NWindows@@QAE@XZ proc near
.text:0000B170                                         ; CODE XREF: CStreamBinder::CStreamBinder(void)+42p
.text:0000B170                                         ; CStreamBinder::CStreamBinder(void)+51p
.text:0000B170
.text:0000B170 var_4           = dword ptr -4
.text:0000B170
.text:0000B170                 push    ebp
.text:0000B171                 mov     ebp, esp
.text:0000B173                 push    ecx
.text:0000B174                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B17B                 mov     [ebp+var_4], ecx
.text:0000B17E                 mov     ecx, [ebp+var_4] ; this
.text:0000B181                 call    ??0CBaseEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CBaseEvent::CBaseEvent(void)
.text:0000B186                 mov     eax, [ebp+var_4]
.text:0000B189                 add     esp, 4
.text:0000B18C                 cmp     ebp, esp
.text:0000B18E                 call    __RTC_CheckEsp
.text:0000B193                 mov     esp, ebp
.text:0000B195                 pop     ebp
.text:0000B196                 retn
.text:0000B196 ??0CManualResetEvent@NSynchronization@NWindows@@QAE@XZ endp
.text:0000B196
.text:0000B196 ; ---------------------------------------------------------------------------
.text:0000B197                 align 4
.text:0000B197 _text           ends
.text:0000B197
.text:0000B198 ; ===========================================================================
.text:0000B198
.text:0000B198 ; Segment type: Pure code
.text:0000B198 ; Segment permissions: Read/Execute
.text:0000B198 _text           segment para public 'CODE' use32
.text:0000B198                 assume cs:_text
.text:0000B198                 ;org 0B198h
.text:0000B198 ; COMDAT (pick any)
.text:0000B198                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000B198
.text:0000B198 ; =============== S U B R O U T I N E =======================================
.text:0000B198
.text:0000B198 ; Attributes: bp-based frame
.text:0000B198
.text:0000B198 ; _DWORD __thiscall NWindows::NSynchronization::CManualResetEvent::~CManualResetEvent(NWindows::NSynchronization::CManualResetEvent *__hidden this)
.text:0000B198                 public ??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ
.text:0000B198 ??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ proc near
.text:0000B198                                         ; CODE XREF: __unwindfunclet$??0CStreamBinder@@QAE@XZ$1+6j
.text:0000B198                                         ; CStreamBinder::~CStreamBinder(void)+3Ap ...
.text:0000B198
.text:0000B198 var_4           = dword ptr -4
.text:0000B198
.text:0000B198                 push    ebp
.text:0000B199                 mov     ebp, esp
.text:0000B19B                 push    ecx
.text:0000B19C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B1A3                 mov     [ebp+var_4], ecx
.text:0000B1A6                 mov     ecx, [ebp+var_4] ; this
.text:0000B1A9                 call    ??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CBaseEvent::~CBaseEvent(void)
.text:0000B1AE                 add     esp, 4
.text:0000B1B1                 cmp     ebp, esp
.text:0000B1B3                 call    __RTC_CheckEsp
.text:0000B1B8                 mov     esp, ebp
.text:0000B1BA                 pop     ebp
.text:0000B1BB                 retn
.text:0000B1BB ??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ endp
.text:0000B1BB
.text:0000B1BB _text           ends
.text:0000B1BB
.text:0000B1BC ; ===========================================================================
.text:0000B1BC
.text:0000B1BC ; Segment type: Pure code
.text:0000B1BC ; Segment permissions: Read/Execute
.text:0000B1BC _text           segment para public 'CODE' use32
.text:0000B1BC                 assume cs:_text
.text:0000B1BC                 ;org 0B1BCh
.text:0000B1BC ; COMDAT (pick any)
.text:0000B1BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000B1BC
.text:0000B1BC ; =============== S U B R O U T I N E =======================================
.text:0000B1BC
.text:0000B1BC ; Attributes: bp-based frame
.text:0000B1BC
.text:0000B1BC ; _DWORD __thiscall ICryptoGetTextPassword::ICryptoGetTextPassword(ICryptoGetTextPassword *__hidden this)
.text:0000B1BC                 public ??0ICryptoGetTextPassword@@QAE@XZ
.text:0000B1BC ??0ICryptoGetTextPassword@@QAE@XZ proc near
.text:0000B1BC                                         ; CODE XREF: NArchive::N7z::CCryptoGetTextPassword::CCryptoGetTextPassword(void)+11p
.text:0000B1BC
.text:0000B1BC var_4           = dword ptr -4
.text:0000B1BC
.text:0000B1BC                 push    ebp
.text:0000B1BD                 mov     ebp, esp
.text:0000B1BF                 push    ecx
.text:0000B1C0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B1C7                 mov     [ebp+var_4], ecx
.text:0000B1CA                 mov     ecx, [ebp+var_4]
.text:0000B1CD                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:0000B1D2                 mov     eax, [ebp+var_4]
.text:0000B1D5                 mov     dword ptr [eax], offset ??_7ICryptoGetTextPassword@@6B@ ; const ICryptoGetTextPassword::`vftable'
.text:0000B1DB                 mov     eax, [ebp+var_4]
.text:0000B1DE                 add     esp, 4
.text:0000B1E1                 cmp     ebp, esp
.text:0000B1E3                 call    __RTC_CheckEsp
.text:0000B1E8                 mov     esp, ebp
.text:0000B1EA                 pop     ebp
.text:0000B1EB                 retn
.text:0000B1EB ??0ICryptoGetTextPassword@@QAE@XZ endp
.text:0000B1EB
.text:0000B1EB _text           ends
.text:0000B1EB
.rdata:0000B1EC ; ===========================================================================
.rdata:0000B1EC
.rdata:0000B1EC ; Segment type: Pure data
.rdata:0000B1EC ; Segment permissions: Read
.rdata:0000B1EC _rdata          segment dword public 'DATA' use32
.rdata:0000B1EC                 assume cs:_rdata
.rdata:0000B1EC                 ;org 0B1ECh
.rdata:0000B1EC ; COMDAT (pick largest)
.rdata:0000B1EC                 dd offset ??_R4ICryptoGetTextPassword@@6B@ ; const ICryptoGetTextPassword::`RTTI Complete Object Locator'
.rdata:0000B1F0                 public ??_7ICryptoGetTextPassword@@6B@
.rdata:0000B1F0 ; const ICryptoGetTextPassword::`vftable'
.rdata:0000B1F0 ??_7ICryptoGetTextPassword@@6B@ dd offset __purecall
.rdata:0000B1F0                                         ; DATA XREF: ICryptoGetTextPassword::ICryptoGetTextPassword(void)+19o
.rdata:0000B1F4                 dd offset __purecall
.rdata:0000B1F8                 dd offset __purecall
.rdata:0000B1FC                 dd offset __purecall
.rdata:0000B1FC _rdata          ends
.rdata:0000B1FC
.rdata$r:0000B200 ; ===========================================================================
.rdata$r:0000B200
.rdata$r:0000B200 ; Segment type: Pure data
.rdata$r:0000B200 ; Segment permissions: Read
.rdata$r:0000B200 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000B200                 assume cs:_rdata$r
.rdata$r:0000B200                 ;org 0B200h
.rdata$r:0000B200 ; COMDAT (pick any)
.rdata$r:0000B200                 public ??_R4ICryptoGetTextPassword@@6B@
.rdata$r:0000B200 ; const ICryptoGetTextPassword::`RTTI Complete Object Locator'
.rdata$r:0000B200 ??_R4ICryptoGetTextPassword@@6B@ db    0 ; DATA XREF: .rdata:0000B1ECo
.rdata$r:0000B201                 db    0
.rdata$r:0000B202                 db    0
.rdata$r:0000B203                 db    0
.rdata$r:0000B204                 db    0
.rdata$r:0000B205                 db    0
.rdata$r:0000B206                 db    0
.rdata$r:0000B207                 db    0
.rdata$r:0000B208                 db    0
.rdata$r:0000B209                 db    0
.rdata$r:0000B20A                 db    0
.rdata$r:0000B20B                 db    0
.rdata$r:0000B20C                 dd offset ??_R0?AUICryptoGetTextPassword@@@8 ; ICryptoGetTextPassword `RTTI Type Descriptor'
.rdata$r:0000B210                 dd offset ??_R3ICryptoGetTextPassword@@8 ; ICryptoGetTextPassword::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000B210 _rdata$r        ends
.rdata$r:0000B210
.text:0000B214 ; ===========================================================================
.text:0000B214
.text:0000B214 ; Segment type: Pure code
.text:0000B214 ; Segment permissions: Read/Execute
.text:0000B214 _text           segment para public 'CODE' use32
.text:0000B214                 assume cs:_text
.text:0000B214                 ;org 0B214h
.text:0000B214 ; COMDAT (pick any)
.text:0000B214                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000B214
.text:0000B214 ; =============== S U B R O U T I N E =======================================
.text:0000B214
.text:0000B214 ; Attributes: bp-based frame
.text:0000B214
.text:0000B214 ; _DWORD __thiscall ICompressGetSubStreamSize::ICompressGetSubStreamSize(ICompressGetSubStreamSize *__hidden this)
.text:0000B214                 public ??0ICompressGetSubStreamSize@@QAE@XZ
.text:0000B214 ??0ICompressGetSubStreamSize@@QAE@XZ proc near
.text:0000B214                                         ; CODE XREF: NArchive::N7z::CRepackInStreamWithSizes::CRepackInStreamWithSizes(void)+1Cp
.text:0000B214                                         ; NArchive::N7z::CFolderInStream::CFolderInStream(void)+3Bp
.text:0000B214
.text:0000B214 var_4           = dword ptr -4
.text:0000B214
.text:0000B214                 push    ebp
.text:0000B215                 mov     ebp, esp
.text:0000B217                 push    ecx
.text:0000B218                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B21F                 mov     [ebp+var_4], ecx
.text:0000B222                 mov     ecx, [ebp+var_4]
.text:0000B225                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:0000B22A                 mov     eax, [ebp+var_4]
.text:0000B22D                 mov     dword ptr [eax], offset ??_7ICompressGetSubStreamSize@@6B@ ; const ICompressGetSubStreamSize::`vftable'
.text:0000B233                 mov     eax, [ebp+var_4]
.text:0000B236                 add     esp, 4
.text:0000B239                 cmp     ebp, esp
.text:0000B23B                 call    __RTC_CheckEsp
.text:0000B240                 mov     esp, ebp
.text:0000B242                 pop     ebp
.text:0000B243                 retn
.text:0000B243 ??0ICompressGetSubStreamSize@@QAE@XZ endp
.text:0000B243
.text:0000B243 _text           ends
.text:0000B243
.rdata:0000B244 ; ===========================================================================
.rdata:0000B244
.rdata:0000B244 ; Segment type: Pure data
.rdata:0000B244 ; Segment permissions: Read
.rdata:0000B244 _rdata          segment dword public 'DATA' use32
.rdata:0000B244                 assume cs:_rdata
.rdata:0000B244                 ;org 0B244h
.rdata:0000B244 ; COMDAT (pick largest)
.rdata:0000B244                 dd offset ??_R4ICompressGetSubStreamSize@@6B@ ; const ICompressGetSubStreamSize::`RTTI Complete Object Locator'
.rdata:0000B248                 public ??_7ICompressGetSubStreamSize@@6B@
.rdata:0000B248 ; const ICompressGetSubStreamSize::`vftable'
.rdata:0000B248 ??_7ICompressGetSubStreamSize@@6B@ dd offset __purecall
.rdata:0000B248                                         ; DATA XREF: ICompressGetSubStreamSize::ICompressGetSubStreamSize(void)+19o
.rdata:0000B24C                 dd offset __purecall
.rdata:0000B250                 dd offset __purecall
.rdata:0000B254                 dd offset __purecall
.rdata:0000B254 _rdata          ends
.rdata:0000B254
.rdata$r:0000B258 ; ===========================================================================
.rdata$r:0000B258
.rdata$r:0000B258 ; Segment type: Pure data
.rdata$r:0000B258 ; Segment permissions: Read
.rdata$r:0000B258 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000B258                 assume cs:_rdata$r
.rdata$r:0000B258                 ;org 0B258h
.rdata$r:0000B258 ; COMDAT (pick any)
.rdata$r:0000B258                 public ??_R4ICompressGetSubStreamSize@@6B@
.rdata$r:0000B258 ; const ICompressGetSubStreamSize::`RTTI Complete Object Locator'
.rdata$r:0000B258 ??_R4ICompressGetSubStreamSize@@6B@ db    0 ; DATA XREF: .rdata:0000B244o
.rdata$r:0000B259                 db    0
.rdata$r:0000B25A                 db    0
.rdata$r:0000B25B                 db    0
.rdata$r:0000B25C                 db    0
.rdata$r:0000B25D                 db    0
.rdata$r:0000B25E                 db    0
.rdata$r:0000B25F                 db    0
.rdata$r:0000B260                 db    0
.rdata$r:0000B261                 db    0
.rdata$r:0000B262                 db    0
.rdata$r:0000B263                 db    0
.rdata$r:0000B264                 dd offset ??_R0?AUICompressGetSubStreamSize@@@8 ; ICompressGetSubStreamSize `RTTI Type Descriptor'
.rdata$r:0000B268                 dd offset ??_R3ICompressGetSubStreamSize@@8 ; ICompressGetSubStreamSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000B268 _rdata$r        ends
.rdata$r:0000B268
.text:0000B26C ; ===========================================================================
.text:0000B26C
.text:0000B26C ; Segment type: Pure code
.text:0000B26C ; Segment permissions: Read/Execute
.text:0000B26C _text           segment para public 'CODE' use32
.text:0000B26C                 assume cs:_text
.text:0000B26C                 ;org 0B26Ch
.text:0000B26C ; COMDAT (pick any)
.text:0000B26C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000B26C
.text:0000B26C ; =============== S U B R O U T I N E =======================================
.text:0000B26C
.text:0000B26C ; Attributes: bp-based frame
.text:0000B26C
.text:0000B26C ; public: void __thiscall CObjectVector<class UString>::ReserveDown(void)
.text:0000B26C                 public ?ReserveDown@?$CObjectVector@VUString@@@@QAEXXZ
.text:0000B26C ?ReserveDown@?$CObjectVector@VUString@@@@QAEXXZ proc near
.text:0000B26C                                         ; CODE XREF: NArchive::N7z::CArchiveDatabaseOut::ReserveDown(void)+48p
.text:0000B26C
.text:0000B26C var_4           = dword ptr -4
.text:0000B26C
.text:0000B26C                 push    ebp
.text:0000B26D                 mov     ebp, esp
.text:0000B26F                 push    ecx
.text:0000B270                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B277                 mov     [ebp+var_4], ecx
.text:0000B27A                 mov     ecx, [ebp+var_4]
.text:0000B27D                 call    ?ReserveDown@?$CRecordVector@PAX@@QAEXXZ ; CRecordVector<void *>::ReserveDown(void)
.text:0000B282                 add     esp, 4
.text:0000B285                 cmp     ebp, esp
.text:0000B287                 call    __RTC_CheckEsp
.text:0000B28C                 mov     esp, ebp
.text:0000B28E                 pop     ebp
.text:0000B28F                 retn
.text:0000B28F ?ReserveDown@?$CObjectVector@VUString@@@@QAEXXZ endp
.text:0000B28F
.text:0000B28F _text           ends
.text:0000B28F
.text:0000B290 ; ===========================================================================
.text:0000B290
.text:0000B290 ; Segment type: Pure code
.text:0000B290 ; Segment permissions: Read/Execute
.text:0000B290 _text           segment para public 'CODE' use32
.text:0000B290                 assume cs:_text
.text:0000B290                 ;org 0B290h
.text:0000B290 ; COMDAT (pick any)
.text:0000B290                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000B290
.text:0000B290 ; =============== S U B R O U T I N E =======================================
.text:0000B290
.text:0000B290 ; Attributes: bp-based frame
.text:0000B290
.text:0000B290 ; public: __thiscall CMyComPtr<struct ICompressCoder>::CMyComPtr<struct ICompressCoder>(struct ICompressCoder *)
.text:0000B290                 public ??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z
.text:0000B290 ??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z proc near
.text:0000B290                                         ; CODE XREF: NArchive::N7z::WriteRange(IInStream *,ISequentialOutStream *,unsigned __int64,unsigned __int64,ICompressProgressInfo *)+11Cp
.text:0000B290
.text:0000B290 var_4           = dword ptr -4
.text:0000B290 arg_0           = dword ptr  8
.text:0000B290
.text:0000B290                 push    ebp
.text:0000B291                 mov     ebp, esp
.text:0000B293                 push    ecx
.text:0000B294                 push    esi
.text:0000B295                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B29C                 mov     [ebp+var_4], ecx
.text:0000B29F                 mov     eax, [ebp+var_4]
.text:0000B2A2                 mov     ecx, [ebp+arg_0]
.text:0000B2A5                 mov     [eax], ecx
.text:0000B2A7                 cmp     [ebp+arg_0], 0
.text:0000B2AB                 jz      short loc_B2C4
.text:0000B2AD                 mov     edx, [ebp+arg_0]
.text:0000B2B0                 mov     eax, [edx]
.text:0000B2B2                 mov     esi, esp
.text:0000B2B4                 mov     ecx, [ebp+arg_0]
.text:0000B2B7                 push    ecx
.text:0000B2B8                 mov     edx, [eax+4]
.text:0000B2BB                 call    edx
.text:0000B2BD                 cmp     esi, esp
.text:0000B2BF                 call    __RTC_CheckEsp
.text:0000B2C4
.text:0000B2C4 loc_B2C4:                               ; CODE XREF: CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>(ICompressCoder *)+1Bj
.text:0000B2C4                 mov     eax, [ebp+var_4]
.text:0000B2C7                 pop     esi
.text:0000B2C8                 add     esp, 4
.text:0000B2CB                 cmp     ebp, esp
.text:0000B2CD                 call    __RTC_CheckEsp
.text:0000B2D2                 mov     esp, ebp
.text:0000B2D4                 pop     ebp
.text:0000B2D5                 retn    4
.text:0000B2D5 ??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z endp
.text:0000B2D5
.text:0000B2D5 _text           ends
.text:0000B2D5
.text:0000B2D8 ; ===========================================================================
.text:0000B2D8
.text:0000B2D8 ; Segment type: Pure code
.text:0000B2D8 ; Segment permissions: Read/Execute
.text:0000B2D8 _text           segment para public 'CODE' use32
.text:0000B2D8                 assume cs:_text
.text:0000B2D8                 ;org 0B2D8h
.text:0000B2D8 ; COMDAT (pick any)
.text:0000B2D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000B2D8
.text:0000B2D8 ; =============== S U B R O U T I N E =======================================
.text:0000B2D8
.text:0000B2D8 ; Attributes: bp-based frame
.text:0000B2D8
.text:0000B2D8 ; public: __thiscall CMyComPtr<struct ICompressCoder>::~CMyComPtr<struct ICompressCoder>(void)
.text:0000B2D8                 public ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ
.text:0000B2D8 ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ proc near
.text:0000B2D8                                         ; CODE XREF: NArchive::N7z::WriteRange(IInStream *,ISequentialOutStream *,unsigned __int64,unsigned __int64,ICompressProgressInfo *)+172p
.text:0000B2D8                                         ; NArchive::N7z::WriteRange(IInStream *,ISequentialOutStream *,unsigned __int64,unsigned __int64,ICompressProgressInfo *)+1C4p ...
.text:0000B2D8
.text:0000B2D8 var_4           = dword ptr -4
.text:0000B2D8
.text:0000B2D8                 push    ebp
.text:0000B2D9                 mov     ebp, esp
.text:0000B2DB                 push    ecx
.text:0000B2DC                 push    esi
.text:0000B2DD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B2E4                 mov     [ebp+var_4], ecx
.text:0000B2E7                 mov     eax, [ebp+var_4]
.text:0000B2EA                 cmp     dword ptr [eax], 0
.text:0000B2ED                 jz      short loc_B30A
.text:0000B2EF                 mov     ecx, [ebp+var_4]
.text:0000B2F2                 mov     edx, [ecx]
.text:0000B2F4                 mov     eax, [ebp+var_4]
.text:0000B2F7                 mov     ecx, [eax]
.text:0000B2F9                 mov     edx, [edx]
.text:0000B2FB                 mov     esi, esp
.text:0000B2FD                 push    ecx
.text:0000B2FE                 mov     eax, [edx+8]
.text:0000B301                 call    eax
.text:0000B303                 cmp     esi, esp
.text:0000B305                 call    __RTC_CheckEsp
.text:0000B30A
.text:0000B30A loc_B30A:                               ; CODE XREF: CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)+15j
.text:0000B30A                 pop     esi
.text:0000B30B                 add     esp, 4
.text:0000B30E                 cmp     ebp, esp
.text:0000B310                 call    __RTC_CheckEsp
.text:0000B315                 mov     esp, ebp
.text:0000B317                 pop     ebp
.text:0000B318                 retn
.text:0000B318 ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ endp
.text:0000B318
.text:0000B318 ; ---------------------------------------------------------------------------
.text:0000B319                 align 4
.text:0000B319 _text           ends
.text:0000B319
.text:0000B31C ; ===========================================================================
.text:0000B31C
.text:0000B31C ; Segment type: Pure code
.text:0000B31C ; Segment permissions: Read/Execute
.text:0000B31C _text           segment para public 'CODE' use32
.text:0000B31C                 assume cs:_text
.text:0000B31C                 ;org 0B31Ch
.text:0000B31C ; COMDAT (pick any)
.text:0000B31C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000B31C
.text:0000B31C ; =============== S U B R O U T I N E =======================================
.text:0000B31C
.text:0000B31C ; Attributes: bp-based frame
.text:0000B31C
.text:0000B31C ; public: struct ICompressCoder * __thiscall CMyComPtr<struct ICompressCoder>::operator->(void)const
.text:0000B31C                 public ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ
.text:0000B31C ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ proc near
.text:0000B31C                                         ; CODE XREF: NArchive::N7z::WriteRange(IInStream *,ISequentialOutStream *,unsigned __int64,unsigned __int64,ICompressProgressInfo *)+128p
.text:0000B31C
.text:0000B31C var_4           = dword ptr -4
.text:0000B31C
.text:0000B31C                 push    ebp
.text:0000B31D                 mov     ebp, esp
.text:0000B31F                 push    ecx
.text:0000B320                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B327                 mov     [ebp+var_4], ecx
.text:0000B32A                 mov     eax, [ebp+var_4]
.text:0000B32D                 mov     eax, [eax]
.text:0000B32F                 mov     esp, ebp
.text:0000B331                 pop     ebp
.text:0000B332                 retn
.text:0000B332 ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ endp
.text:0000B332
.text:0000B332 ; ---------------------------------------------------------------------------
.text:0000B333                 align 4
.text:0000B333 _text           ends
.text:0000B333
.text:0000B334 ; ===========================================================================
.text:0000B334
.text:0000B334 ; Segment type: Pure code
.text:0000B334 ; Segment permissions: Read/Execute
.text:0000B334 _text           segment para public 'CODE' use32
.text:0000B334                 assume cs:_text
.text:0000B334                 ;org 0B334h
.text:0000B334 ; COMDAT (pick any)
.text:0000B334                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000B334
.text:0000B334 ; =============== S U B R O U T I N E =======================================
.text:0000B334
.text:0000B334 ; Attributes: bp-based frame
.text:0000B334
.text:0000B334 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::CMyComPtr<struct ISequentialInStream>(void)
.text:0000B334                 public ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
.text:0000B334 ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ proc near
.text:0000B334                                         ; CODE XREF: NArchive::N7z::CAnalysis::GetFilterGroup(uint,NArchive::N7z::CUpdateItem const &,NArchive::N7z::CFilterMode &)+191p
.text:0000B334                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1B46p ...
.text:0000B334
.text:0000B334 var_4           = dword ptr -4
.text:0000B334
.text:0000B334                 push    ebp
.text:0000B335                 mov     ebp, esp
.text:0000B337                 push    ecx
.text:0000B338                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B33F                 mov     [ebp+var_4], ecx
.text:0000B342                 mov     eax, [ebp+var_4]
.text:0000B345                 mov     dword ptr [eax], 0
.text:0000B34B                 mov     eax, [ebp+var_4]
.text:0000B34E                 mov     esp, ebp
.text:0000B350                 pop     ebp
.text:0000B351                 retn
.text:0000B351 ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ endp
.text:0000B351
.text:0000B351 ; ---------------------------------------------------------------------------
.text:0000B352                 align 4
.text:0000B352 _text           ends
.text:0000B352
.text:0000B354 ; ===========================================================================
.text:0000B354
.text:0000B354 ; Segment type: Pure code
.text:0000B354 ; Segment permissions: Read/Execute
.text:0000B354 _text           segment para public 'CODE' use32
.text:0000B354                 assume cs:_text
.text:0000B354                 ;org 0B354h
.text:0000B354 ; COMDAT (pick any)
.text:0000B354                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000B354
.text:0000B354 ; =============== S U B R O U T I N E =======================================
.text:0000B354
.text:0000B354 ; Attributes: bp-based frame
.text:0000B354
.text:0000B354 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::CMyComPtr<struct ISequentialInStream>(struct ISequentialInStream *)
.text:0000B354                 public ??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z
.text:0000B354 ??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z proc near
.text:0000B354                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1BBCp
.text:0000B354                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+347Ap
.text:0000B354
.text:0000B354 var_4           = dword ptr -4
.text:0000B354 arg_0           = dword ptr  8
.text:0000B354
.text:0000B354                 push    ebp
.text:0000B355                 mov     ebp, esp
.text:0000B357                 push    ecx
.text:0000B358                 push    esi
.text:0000B359                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B360                 mov     [ebp+var_4], ecx
.text:0000B363                 mov     eax, [ebp+var_4]
.text:0000B366                 mov     ecx, [ebp+arg_0]
.text:0000B369                 mov     [eax], ecx
.text:0000B36B                 cmp     [ebp+arg_0], 0
.text:0000B36F                 jz      short loc_B388
.text:0000B371                 mov     edx, [ebp+arg_0]
.text:0000B374                 mov     eax, [edx]
.text:0000B376                 mov     esi, esp
.text:0000B378                 mov     ecx, [ebp+arg_0]
.text:0000B37B                 push    ecx
.text:0000B37C                 mov     edx, [eax+4]
.text:0000B37F                 call    edx
.text:0000B381                 cmp     esi, esp
.text:0000B383                 call    __RTC_CheckEsp
.text:0000B388
.text:0000B388 loc_B388:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(ISequentialInStream *)+1Bj
.text:0000B388                 mov     eax, [ebp+var_4]
.text:0000B38B                 pop     esi
.text:0000B38C                 add     esp, 4
.text:0000B38F                 cmp     ebp, esp
.text:0000B391                 call    __RTC_CheckEsp
.text:0000B396                 mov     esp, ebp
.text:0000B398                 pop     ebp
.text:0000B399                 retn    4
.text:0000B399 ??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z endp
.text:0000B399
.text:0000B399 _text           ends
.text:0000B399
.text:0000B39C ; ===========================================================================
.text:0000B39C
.text:0000B39C ; Segment type: Pure code
.text:0000B39C ; Segment permissions: Read/Execute
.text:0000B39C _text           segment para public 'CODE' use32
.text:0000B39C                 assume cs:_text
.text:0000B39C                 ;org 0B39Ch
.text:0000B39C ; COMDAT (pick any)
.text:0000B39C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000B39C
.text:0000B39C ; =============== S U B R O U T I N E =======================================
.text:0000B39C
.text:0000B39C ; Attributes: bp-based frame
.text:0000B39C
.text:0000B39C ; public: __thiscall CMyComPtr<struct ISequentialInStream>::~CMyComPtr<struct ISequentialInStream>(void)
.text:0000B39C                 public ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
.text:0000B39C ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ proc near
.text:0000B39C                                         ; CODE XREF: NArchive::N7z::CAnalysis::GetFilterGroup(uint,NArchive::N7z::CUpdateItem const &,NArchive::N7z::CFilterMode &)+2A7p
.text:0000B39C                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1E0Fp ...
.text:0000B39C
.text:0000B39C var_4           = dword ptr -4
.text:0000B39C
.text:0000B39C                 push    ebp
.text:0000B39D                 mov     ebp, esp
.text:0000B39F                 push    ecx
.text:0000B3A0                 push    esi
.text:0000B3A1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B3A8                 mov     [ebp+var_4], ecx
.text:0000B3AB                 mov     eax, [ebp+var_4]
.text:0000B3AE                 cmp     dword ptr [eax], 0
.text:0000B3B1                 jz      short loc_B3CE
.text:0000B3B3                 mov     ecx, [ebp+var_4]
.text:0000B3B6                 mov     edx, [ecx]
.text:0000B3B8                 mov     eax, [ebp+var_4]
.text:0000B3BB                 mov     ecx, [eax]
.text:0000B3BD                 mov     edx, [edx]
.text:0000B3BF                 mov     esi, esp
.text:0000B3C1                 push    ecx
.text:0000B3C2                 mov     eax, [edx+8]
.text:0000B3C5                 call    eax
.text:0000B3C7                 cmp     esi, esp
.text:0000B3C9                 call    __RTC_CheckEsp
.text:0000B3CE
.text:0000B3CE loc_B3CE:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)+15j
.text:0000B3CE                 pop     esi
.text:0000B3CF                 add     esp, 4
.text:0000B3D2                 cmp     ebp, esp
.text:0000B3D4                 call    __RTC_CheckEsp
.text:0000B3D9                 mov     esp, ebp
.text:0000B3DB                 pop     ebp
.text:0000B3DC                 retn
.text:0000B3DC ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ endp
.text:0000B3DC
.text:0000B3DC ; ---------------------------------------------------------------------------
.text:0000B3DD                 align 10h
.text:0000B3DD _text           ends
.text:0000B3DD
.text:0000B3E0 ; ===========================================================================
.text:0000B3E0
.text:0000B3E0 ; Segment type: Pure code
.text:0000B3E0 ; Segment permissions: Read/Execute
.text:0000B3E0 _text           segment para public 'CODE' use32
.text:0000B3E0                 assume cs:_text
.text:0000B3E0                 ;org 0B3E0h
.text:0000B3E0 ; COMDAT (pick any)
.text:0000B3E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000B3E0
.text:0000B3E0 ; =============== S U B R O U T I N E =======================================
.text:0000B3E0
.text:0000B3E0 ; Attributes: bp-based frame
.text:0000B3E0
.text:0000B3E0 ; public: void __thiscall CMyComPtr<struct ISequentialInStream>::Release(void)
.text:0000B3E0                 public ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ
.text:0000B3E0 ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ proc near
.text:0000B3E0                                         ; CODE XREF: NArchive::N7z::CAnalysis::GetFilterGroup(uint,NArchive::N7z::CUpdateItem const &,NArchive::N7z::CFilterMode &)+216p
.text:0000B3E0
.text:0000B3E0 var_4           = dword ptr -4
.text:0000B3E0
.text:0000B3E0                 push    ebp
.text:0000B3E1                 mov     ebp, esp
.text:0000B3E3                 push    ecx
.text:0000B3E4                 push    esi
.text:0000B3E5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B3EC                 mov     [ebp+var_4], ecx
.text:0000B3EF                 mov     eax, [ebp+var_4]
.text:0000B3F2                 cmp     dword ptr [eax], 0
.text:0000B3F5                 jz      short loc_B41B
.text:0000B3F7                 mov     ecx, [ebp+var_4]
.text:0000B3FA                 mov     edx, [ecx]
.text:0000B3FC                 mov     eax, [ebp+var_4]
.text:0000B3FF                 mov     ecx, [eax]
.text:0000B401                 mov     edx, [edx]
.text:0000B403                 mov     esi, esp
.text:0000B405                 push    ecx
.text:0000B406                 mov     eax, [edx+8]
.text:0000B409                 call    eax
.text:0000B40B                 cmp     esi, esp
.text:0000B40D                 call    __RTC_CheckEsp
.text:0000B412                 mov     ecx, [ebp+var_4]
.text:0000B415                 mov     dword ptr [ecx], 0
.text:0000B41B
.text:0000B41B loc_B41B:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::Release(void)+15j
.text:0000B41B                 pop     esi
.text:0000B41C                 add     esp, 4
.text:0000B41F                 cmp     ebp, esp
.text:0000B421                 call    __RTC_CheckEsp
.text:0000B426                 mov     esp, ebp
.text:0000B428                 pop     ebp
.text:0000B429                 retn
.text:0000B429 ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ endp
.text:0000B429
.text:0000B429 ; ---------------------------------------------------------------------------
.text:0000B42A                 align 4
.text:0000B42A _text           ends
.text:0000B42A
.text:0000B42C ; ===========================================================================
.text:0000B42C
.text:0000B42C ; Segment type: Pure code
.text:0000B42C ; Segment permissions: Read/Execute
.text:0000B42C _text           segment para public 'CODE' use32
.text:0000B42C                 assume cs:_text
.text:0000B42C                 ;org 0B42Ch
.text:0000B42C ; COMDAT (pick any)
.text:0000B42C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000B42C
.text:0000B42C ; =============== S U B R O U T I N E =======================================
.text:0000B42C
.text:0000B42C ; Attributes: bp-based frame
.text:0000B42C
.text:0000B42C ; public: __thiscall CMyComPtr<struct ISequentialInStream>::operator struct ISequentialInStream *(void)const
.text:0000B42C                 public ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ
.text:0000B42C ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ proc near
.text:0000B42C                                         ; CODE XREF: NArchive::N7z::CAnalysis::GetFilterGroup(uint,NArchive::N7z::CUpdateItem const &,NArchive::N7z::CFilterMode &)+1DEp
.text:0000B42C                                         ; NArchive::N7z::CAnalysis::GetFilterGroup(uint,NArchive::N7z::CUpdateItem const &,NArchive::N7z::CFilterMode &)+205p ...
.text:0000B42C
.text:0000B42C var_4           = dword ptr -4
.text:0000B42C
.text:0000B42C                 push    ebp
.text:0000B42D                 mov     ebp, esp
.text:0000B42F                 push    ecx
.text:0000B430                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B437                 mov     [ebp+var_4], ecx
.text:0000B43A                 mov     eax, [ebp+var_4]
.text:0000B43D                 mov     eax, [eax]
.text:0000B43F                 mov     esp, ebp
.text:0000B441                 pop     ebp
.text:0000B442                 retn
.text:0000B442 ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ endp
.text:0000B442
.text:0000B442 ; ---------------------------------------------------------------------------
.text:0000B443                 align 4
.text:0000B443 _text           ends
.text:0000B443
.text:0000B444 ; ===========================================================================
.text:0000B444
.text:0000B444 ; Segment type: Pure code
.text:0000B444 ; Segment permissions: Read/Execute
.text:0000B444 _text           segment para public 'CODE' use32
.text:0000B444                 assume cs:_text
.text:0000B444                 ;org 0B444h
.text:0000B444 ; COMDAT (pick any)
.text:0000B444                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000B444
.text:0000B444 ; =============== S U B R O U T I N E =======================================
.text:0000B444
.text:0000B444 ; Attributes: bp-based frame
.text:0000B444
.text:0000B444 ; public: struct ISequentialInStream * * __thiscall CMyComPtr<struct ISequentialInStream>::operator&(void)
.text:0000B444                 public ??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ
.text:0000B444 ??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ proc near
.text:0000B444                                         ; CODE XREF: NArchive::N7z::CAnalysis::GetFilterGroup(uint,NArchive::N7z::CUpdateItem const &,NArchive::N7z::CFilterMode &)+1AFp
.text:0000B444                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1C25p ...
.text:0000B444
.text:0000B444 var_4           = dword ptr -4
.text:0000B444
.text:0000B444                 push    ebp
.text:0000B445                 mov     ebp, esp
.text:0000B447                 push    ecx
.text:0000B448                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B44F                 mov     [ebp+var_4], ecx
.text:0000B452                 mov     eax, [ebp+var_4]
.text:0000B455                 mov     esp, ebp
.text:0000B457                 pop     ebp
.text:0000B458                 retn
.text:0000B458 ??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ endp
.text:0000B458
.text:0000B458 ; ---------------------------------------------------------------------------
.text:0000B459                 align 4
.text:0000B459 _text           ends
.text:0000B459
.text:0000B45C ; ===========================================================================
.text:0000B45C
.text:0000B45C ; Segment type: Pure code
.text:0000B45C ; Segment permissions: Read/Execute
.text:0000B45C _text           segment para public 'CODE' use32
.text:0000B45C                 assume cs:_text
.text:0000B45C                 ;org 0B45Ch
.text:0000B45C ; COMDAT (pick any)
.text:0000B45C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000B45C
.text:0000B45C ; =============== S U B R O U T I N E =======================================
.text:0000B45C
.text:0000B45C ; Attributes: bp-based frame
.text:0000B45C
.text:0000B45C ; public: struct ISequentialInStream * __thiscall CMyComPtr<struct ISequentialInStream>::operator->(void)const
.text:0000B45C                 public ??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ
.text:0000B45C ??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ proc near
.text:0000B45C                                         ; CODE XREF: NArchive::N7z::CRepackInStreamWithSizes::Read(void *,uint,uint *)+12p
.text:0000B45C                                         ; NArchive::N7z::CFolderInStream2::Read(void *,uint,uint *)+B1p
.text:0000B45C
.text:0000B45C var_4           = dword ptr -4
.text:0000B45C
.text:0000B45C                 push    ebp
.text:0000B45D                 mov     ebp, esp
.text:0000B45F                 push    ecx
.text:0000B460                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B467                 mov     [ebp+var_4], ecx
.text:0000B46A                 mov     eax, [ebp+var_4]
.text:0000B46D                 mov     eax, [eax]
.text:0000B46F                 mov     esp, ebp
.text:0000B471                 pop     ebp
.text:0000B472                 retn
.text:0000B472 ??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ endp
.text:0000B472
.text:0000B472 ; ---------------------------------------------------------------------------
.text:0000B473                 align 4
.text:0000B473 _text           ends
.text:0000B473
.text:0000B474 ; ===========================================================================
.text:0000B474
.text:0000B474 ; Segment type: Pure code
.text:0000B474 ; Segment permissions: Read/Execute
.text:0000B474 _text           segment para public 'CODE' use32
.text:0000B474                 assume cs:_text
.text:0000B474                 ;org 0B474h
.text:0000B474 ; COMDAT (pick any)
.text:0000B474                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000B474
.text:0000B474 ; =============== S U B R O U T I N E =======================================
.text:0000B474
.text:0000B474 ; Attributes: bp-based frame
.text:0000B474
.text:0000B474 ; public: struct ISequentialInStream * __thiscall CMyComPtr<struct ISequentialInStream>::operator=(struct ISequentialInStream *)
.text:0000B474                 public ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z
.text:0000B474 ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z proc near
.text:0000B474                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1D17p
.text:0000B474                                         ; CLimitedSequentialInStream::SetStream(ISequentialInStream *)+18p ...
.text:0000B474
.text:0000B474 var_4           = dword ptr -4
.text:0000B474 arg_0           = dword ptr  8
.text:0000B474
.text:0000B474                 push    ebp
.text:0000B475                 mov     ebp, esp
.text:0000B477                 push    ecx
.text:0000B478                 push    esi
.text:0000B479                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B480                 mov     [ebp+var_4], ecx
.text:0000B483                 cmp     [ebp+arg_0], 0
.text:0000B487                 jz      short loc_B4A0
.text:0000B489                 mov     eax, [ebp+arg_0]
.text:0000B48C                 mov     ecx, [eax]
.text:0000B48E                 mov     esi, esp
.text:0000B490                 mov     edx, [ebp+arg_0]
.text:0000B493                 push    edx
.text:0000B494                 mov     eax, [ecx+4]
.text:0000B497                 call    eax
.text:0000B499                 cmp     esi, esp
.text:0000B49B                 call    __RTC_CheckEsp
.text:0000B4A0
.text:0000B4A0 loc_B4A0:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)+13j
.text:0000B4A0                 mov     ecx, [ebp+var_4]
.text:0000B4A3                 cmp     dword ptr [ecx], 0
.text:0000B4A6                 jz      short loc_B4C3
.text:0000B4A8                 mov     edx, [ebp+var_4]
.text:0000B4AB                 mov     eax, [edx]
.text:0000B4AD                 mov     ecx, [ebp+var_4]
.text:0000B4B0                 mov     edx, [ecx]
.text:0000B4B2                 mov     eax, [eax]
.text:0000B4B4                 mov     esi, esp
.text:0000B4B6                 push    edx
.text:0000B4B7                 mov     ecx, [eax+8]
.text:0000B4BA                 call    ecx
.text:0000B4BC                 cmp     esi, esp
.text:0000B4BE                 call    __RTC_CheckEsp
.text:0000B4C3
.text:0000B4C3 loc_B4C3:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)+32j
.text:0000B4C3                 mov     edx, [ebp+var_4]
.text:0000B4C6                 mov     eax, [ebp+arg_0]
.text:0000B4C9                 mov     [edx], eax
.text:0000B4CB                 mov     eax, [ebp+arg_0]
.text:0000B4CE                 pop     esi
.text:0000B4CF                 add     esp, 4
.text:0000B4D2                 cmp     ebp, esp
.text:0000B4D4                 call    __RTC_CheckEsp
.text:0000B4D9                 mov     esp, ebp
.text:0000B4DB                 pop     ebp
.text:0000B4DC                 retn    4
.text:0000B4DC ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z endp
.text:0000B4DC
.text:0000B4DC ; ---------------------------------------------------------------------------
.text:0000B4DF                 align 10h
.text:0000B4DF _text           ends
.text:0000B4DF
.text:0000B4E0 ; ===========================================================================
.text:0000B4E0
.text:0000B4E0 ; Segment type: Pure code
.text:0000B4E0 ; Segment permissions: Read/Execute
.text:0000B4E0 _text           segment para public 'CODE' use32
.text:0000B4E0                 assume cs:_text
.text:0000B4E0                 ;org 0B4E0h
.text:0000B4E0 ; COMDAT (pick any)
.text:0000B4E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000B4E0
.text:0000B4E0 ; =============== S U B R O U T I N E =======================================
.text:0000B4E0
.text:0000B4E0 ; Attributes: bp-based frame
.text:0000B4E0
.text:0000B4E0 ; public: struct ISequentialInStream * __thiscall CMyComPtr<struct ISequentialInStream>::operator=(class CMyComPtr<struct ISequentialInStream> const &)
.text:0000B4E0                 public ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@ABV0@@Z
.text:0000B4E0 ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@ABV0@@Z proc near
.text:0000B4E0                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+2013p
.text:0000B4E0
.text:0000B4E0 var_4           = dword ptr -4
.text:0000B4E0 arg_0           = dword ptr  8
.text:0000B4E0
.text:0000B4E0                 push    ebp
.text:0000B4E1                 mov     ebp, esp
.text:0000B4E3                 push    ecx
.text:0000B4E4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B4EB                 mov     [ebp+var_4], ecx
.text:0000B4EE                 mov     eax, [ebp+arg_0]
.text:0000B4F1                 mov     ecx, [eax]
.text:0000B4F3                 push    ecx
.text:0000B4F4                 mov     ecx, [ebp+var_4]
.text:0000B4F7                 call    ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)
.text:0000B4FC                 add     esp, 4
.text:0000B4FF                 cmp     ebp, esp
.text:0000B501                 call    __RTC_CheckEsp
.text:0000B506                 mov     esp, ebp
.text:0000B508                 pop     ebp
.text:0000B509                 retn    4
.text:0000B509 ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@ABV0@@Z endp
.text:0000B509
.text:0000B509 _text           ends
.text:0000B509
.text:0000B50C ; ===========================================================================
.text:0000B50C
.text:0000B50C ; Segment type: Pure code
.text:0000B50C ; Segment permissions: Read/Execute
.text:0000B50C _text           segment para public 'CODE' use32
.text:0000B50C                 assume cs:_text
.text:0000B50C                 ;org 0B50Ch
.text:0000B50C ; COMDAT (pick any)
.text:0000B50C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000B50C
.text:0000B50C ; =============== S U B R O U T I N E =======================================
.text:0000B50C
.text:0000B50C ; Attributes: bp-based frame
.text:0000B50C
.text:0000B50C ; public: bool __thiscall CMyComPtr<struct ISequentialInStream>::operator!(void)const
.text:0000B50C                 public ??7?$CMyComPtr@UISequentialInStream@@@@QBE_NXZ
.text:0000B50C ??7?$CMyComPtr@UISequentialInStream@@@@QBE_NXZ proc near
.text:0000B50C                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1EFAp
.text:0000B50C
.text:0000B50C var_4           = dword ptr -4
.text:0000B50C
.text:0000B50C                 push    ebp
.text:0000B50D                 mov     ebp, esp
.text:0000B50F                 push    ecx
.text:0000B510                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B517                 mov     [ebp+var_4], ecx
.text:0000B51A                 mov     eax, [ebp+var_4]
.text:0000B51D                 xor     ecx, ecx
.text:0000B51F                 cmp     dword ptr [eax], 0
.text:0000B522                 setz    cl
.text:0000B525                 mov     al, cl
.text:0000B527                 mov     esp, ebp
.text:0000B529                 pop     ebp
.text:0000B52A                 retn
.text:0000B52A ??7?$CMyComPtr@UISequentialInStream@@@@QBE_NXZ endp
.text:0000B52A
.text:0000B52A ; ---------------------------------------------------------------------------
.text:0000B52B                 align 4
.text:0000B52B _text           ends
.text:0000B52B
.text:0000B52C ; ===========================================================================
.text:0000B52C
.text:0000B52C ; Segment type: Pure code
.text:0000B52C ; Segment permissions: Read/Execute
.text:0000B52C _text           segment para public 'CODE' use32
.text:0000B52C                 assume cs:_text
.text:0000B52C                 ;org 0B52Ch
.text:0000B52C ; COMDAT (pick any)
.text:0000B52C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000B52C
.text:0000B52C ; =============== S U B R O U T I N E =======================================
.text:0000B52C
.text:0000B52C ; Attributes: bp-based frame
.text:0000B52C
.text:0000B52C ; public: __thiscall CMyComPtr<struct IInStream>::CMyComPtr<struct IInStream>(void)
.text:0000B52C                 public ??0?$CMyComPtr@UIInStream@@@@QAE@XZ
.text:0000B52C ??0?$CMyComPtr@UIInStream@@@@QAE@XZ proc near
.text:0000B52C                                         ; CODE XREF: NArchive::N7z::CThreadDecoder::CThreadDecoder(bool)+6Bp
.text:0000B52C
.text:0000B52C var_4           = dword ptr -4
.text:0000B52C
.text:0000B52C                 push    ebp
.text:0000B52D                 mov     ebp, esp
.text:0000B52F                 push    ecx
.text:0000B530                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B537                 mov     [ebp+var_4], ecx
.text:0000B53A                 mov     eax, [ebp+var_4]
.text:0000B53D                 mov     dword ptr [eax], 0
.text:0000B543                 mov     eax, [ebp+var_4]
.text:0000B546                 mov     esp, ebp
.text:0000B548                 pop     ebp
.text:0000B549                 retn
.text:0000B549 ??0?$CMyComPtr@UIInStream@@@@QAE@XZ endp
.text:0000B549
.text:0000B549 ; ---------------------------------------------------------------------------
.text:0000B54A                 align 4
.text:0000B54A _text           ends
.text:0000B54A
.text:0000B54C ; ===========================================================================
.text:0000B54C
.text:0000B54C ; Segment type: Pure code
.text:0000B54C ; Segment permissions: Read/Execute
.text:0000B54C _text           segment para public 'CODE' use32
.text:0000B54C                 assume cs:_text
.text:0000B54C                 ;org 0B54Ch
.text:0000B54C ; COMDAT (pick any)
.text:0000B54C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000B54C
.text:0000B54C ; =============== S U B R O U T I N E =======================================
.text:0000B54C
.text:0000B54C ; Attributes: bp-based frame
.text:0000B54C
.text:0000B54C ; public: __thiscall CMyComPtr<struct IInStream>::~CMyComPtr<struct IInStream>(void)
.text:0000B54C                 public ??1?$CMyComPtr@UIInStream@@@@QAE@XZ
.text:0000B54C ??1?$CMyComPtr@UIInStream@@@@QAE@XZ proc near
.text:0000B54C                                         ; CODE XREF: __unwindfunclet$??0CThreadDecoder@N7z@NArchive@@QAE@_N@Z$2+6j
.text:0000B54C                                         ; NArchive::N7z::CThreadDecoder::~CThreadDecoder(void)+73p ...
.text:0000B54C
.text:0000B54C var_4           = dword ptr -4
.text:0000B54C
.text:0000B54C                 push    ebp
.text:0000B54D                 mov     ebp, esp
.text:0000B54F                 push    ecx
.text:0000B550                 push    esi
.text:0000B551                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B558                 mov     [ebp+var_4], ecx
.text:0000B55B                 mov     eax, [ebp+var_4]
.text:0000B55E                 cmp     dword ptr [eax], 0
.text:0000B561                 jz      short loc_B57E
.text:0000B563                 mov     ecx, [ebp+var_4]
.text:0000B566                 mov     edx, [ecx]
.text:0000B568                 mov     eax, [ebp+var_4]
.text:0000B56B                 mov     ecx, [eax]
.text:0000B56D                 mov     edx, [edx]
.text:0000B56F                 mov     esi, esp
.text:0000B571                 push    ecx
.text:0000B572                 mov     eax, [edx+8]
.text:0000B575                 call    eax
.text:0000B577                 cmp     esi, esp
.text:0000B579                 call    __RTC_CheckEsp
.text:0000B57E
.text:0000B57E loc_B57E:                               ; CODE XREF: CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)+15j
.text:0000B57E                 pop     esi
.text:0000B57F                 add     esp, 4
.text:0000B582                 cmp     ebp, esp
.text:0000B584                 call    __RTC_CheckEsp
.text:0000B589                 mov     esp, ebp
.text:0000B58B                 pop     ebp
.text:0000B58C                 retn
.text:0000B58C ??1?$CMyComPtr@UIInStream@@@@QAE@XZ endp
.text:0000B58C
.text:0000B58C ; ---------------------------------------------------------------------------
.text:0000B58D                 align 10h
.text:0000B58D _text           ends
.text:0000B58D
.text:0000B590 ; ===========================================================================
.text:0000B590
.text:0000B590 ; Segment type: Pure code
.text:0000B590 ; Segment permissions: Read/Execute
.text:0000B590 _text           segment para public 'CODE' use32
.text:0000B590                 assume cs:_text
.text:0000B590                 ;org 0B590h
.text:0000B590 ; COMDAT (pick any)
.text:0000B590                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000B590
.text:0000B590 ; =============== S U B R O U T I N E =======================================
.text:0000B590
.text:0000B590 ; Attributes: bp-based frame
.text:0000B590
.text:0000B590 ; public: __thiscall CMyComPtr<struct IInStream>::operator struct IInStream *(void)const
.text:0000B590                 public ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
.text:0000B590 ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ proc near
.text:0000B590                                         ; CODE XREF: NArchive::N7z::CThreadDecoder::Execute(void)+86p
.text:0000B590
.text:0000B590 var_4           = dword ptr -4
.text:0000B590
.text:0000B590                 push    ebp
.text:0000B591                 mov     ebp, esp
.text:0000B593                 push    ecx
.text:0000B594                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B59B                 mov     [ebp+var_4], ecx
.text:0000B59E                 mov     eax, [ebp+var_4]
.text:0000B5A1                 mov     eax, [eax]
.text:0000B5A3                 mov     esp, ebp
.text:0000B5A5                 pop     ebp
.text:0000B5A6                 retn
.text:0000B5A6 ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ endp
.text:0000B5A6
.text:0000B5A6 ; ---------------------------------------------------------------------------
.text:0000B5A7                 align 4
.text:0000B5A7 _text           ends
.text:0000B5A7
.text:0000B5A8 ; ===========================================================================
.text:0000B5A8
.text:0000B5A8 ; Segment type: Pure code
.text:0000B5A8 ; Segment permissions: Read/Execute
.text:0000B5A8 _text           segment para public 'CODE' use32
.text:0000B5A8                 assume cs:_text
.text:0000B5A8                 ;org 0B5A8h
.text:0000B5A8 ; COMDAT (pick any)
.text:0000B5A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000B5A8
.text:0000B5A8 ; =============== S U B R O U T I N E =======================================
.text:0000B5A8
.text:0000B5A8 ; Attributes: bp-based frame
.text:0000B5A8
.text:0000B5A8 ; public: struct IInStream * __thiscall CMyComPtr<struct IInStream>::operator=(struct IInStream *)
.text:0000B5A8                 public ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z
.text:0000B5A8 ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z proc near
.text:0000B5A8                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1C60p
.text:0000B5A8
.text:0000B5A8 var_4           = dword ptr -4
.text:0000B5A8 arg_0           = dword ptr  8
.text:0000B5A8
.text:0000B5A8                 push    ebp
.text:0000B5A9                 mov     ebp, esp
.text:0000B5AB                 push    ecx
.text:0000B5AC                 push    esi
.text:0000B5AD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B5B4                 mov     [ebp+var_4], ecx
.text:0000B5B7                 cmp     [ebp+arg_0], 0
.text:0000B5BB                 jz      short loc_B5D4
.text:0000B5BD                 mov     eax, [ebp+arg_0]
.text:0000B5C0                 mov     ecx, [eax]
.text:0000B5C2                 mov     esi, esp
.text:0000B5C4                 mov     edx, [ebp+arg_0]
.text:0000B5C7                 push    edx
.text:0000B5C8                 mov     eax, [ecx+4]
.text:0000B5CB                 call    eax
.text:0000B5CD                 cmp     esi, esp
.text:0000B5CF                 call    __RTC_CheckEsp
.text:0000B5D4
.text:0000B5D4 loc_B5D4:                               ; CODE XREF: CMyComPtr<IInStream>::operator=(IInStream *)+13j
.text:0000B5D4                 mov     ecx, [ebp+var_4]
.text:0000B5D7                 cmp     dword ptr [ecx], 0
.text:0000B5DA                 jz      short loc_B5F7
.text:0000B5DC                 mov     edx, [ebp+var_4]
.text:0000B5DF                 mov     eax, [edx]
.text:0000B5E1                 mov     ecx, [ebp+var_4]
.text:0000B5E4                 mov     edx, [ecx]
.text:0000B5E6                 mov     eax, [eax]
.text:0000B5E8                 mov     esi, esp
.text:0000B5EA                 push    edx
.text:0000B5EB                 mov     ecx, [eax+8]
.text:0000B5EE                 call    ecx
.text:0000B5F0                 cmp     esi, esp
.text:0000B5F2                 call    __RTC_CheckEsp
.text:0000B5F7
.text:0000B5F7 loc_B5F7:                               ; CODE XREF: CMyComPtr<IInStream>::operator=(IInStream *)+32j
.text:0000B5F7                 mov     edx, [ebp+var_4]
.text:0000B5FA                 mov     eax, [ebp+arg_0]
.text:0000B5FD                 mov     [edx], eax
.text:0000B5FF                 mov     eax, [ebp+arg_0]
.text:0000B602                 pop     esi
.text:0000B603                 add     esp, 4
.text:0000B606                 cmp     ebp, esp
.text:0000B608                 call    __RTC_CheckEsp
.text:0000B60D                 mov     esp, ebp
.text:0000B60F                 pop     ebp
.text:0000B610                 retn    4
.text:0000B610 ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z endp
.text:0000B610
.text:0000B610 ; ---------------------------------------------------------------------------
.text:0000B613                 align 4
.text:0000B613 _text           ends
.text:0000B613
.text:0000B614 ; ===========================================================================
.text:0000B614
.text:0000B614 ; Segment type: Pure code
.text:0000B614 ; Segment permissions: Read/Execute
.text:0000B614 _text           segment para public 'CODE' use32
.text:0000B614                 assume cs:_text
.text:0000B614                 ;org 0B614h
.text:0000B614 ; COMDAT (pick any)
.text:0000B614                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000B614
.text:0000B614 ; =============== S U B R O U T I N E =======================================
.text:0000B614
.text:0000B614 ; Attributes: bp-based frame
.text:0000B614
.text:0000B614 ; public: __thiscall CRecordVector<unsigned int>::CRecordVector<unsigned int>(void)
.text:0000B614                 public ??0?$CRecordVector@I@@QAE@XZ
.text:0000B614 ??0?$CRecordVector@I@@QAE@XZ proc near  ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+F60p
.text:0000B614                                         ; NArchive::N7z::CFolderInStream::CFolderInStream(void)+94p ...
.text:0000B614
.text:0000B614 var_4           = dword ptr -4
.text:0000B614
.text:0000B614                 push    ebp
.text:0000B615                 mov     ebp, esp
.text:0000B617                 push    ecx
.text:0000B618                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B61F                 mov     [ebp+var_4], ecx
.text:0000B622                 mov     eax, [ebp+var_4]
.text:0000B625                 mov     dword ptr [eax], 0
.text:0000B62B                 mov     ecx, [ebp+var_4]
.text:0000B62E                 mov     dword ptr [ecx+4], 0
.text:0000B635                 mov     edx, [ebp+var_4]
.text:0000B638                 mov     dword ptr [edx+8], 0
.text:0000B63F                 mov     eax, [ebp+var_4]
.text:0000B642                 mov     esp, ebp
.text:0000B644                 pop     ebp
.text:0000B645                 retn
.text:0000B645 ??0?$CRecordVector@I@@QAE@XZ endp
.text:0000B645
.text:0000B645 ; ---------------------------------------------------------------------------
.text:0000B646                 align 4
.text:0000B646 _text           ends
.text:0000B646
.text:0000B648 ; ===========================================================================
.text:0000B648
.text:0000B648 ; Segment type: Pure code
.text:0000B648 ; Segment permissions: Read/Execute
.text:0000B648 _text           segment para public 'CODE' use32
.text:0000B648                 assume cs:_text
.text:0000B648                 ;org 0B648h
.text:0000B648 ; COMDAT (pick any)
.text:0000B648                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000B648
.text:0000B648 ; =============== S U B R O U T I N E =======================================
.text:0000B648
.text:0000B648 ; Attributes: bp-based frame
.text:0000B648
.text:0000B648 ; public: unsigned int __thiscall CRecordVector<unsigned int>::Size(void)const
.text:0000B648                 public ?Size@?$CRecordVector@I@@QBEIXZ
.text:0000B648 ?Size@?$CRecordVector@I@@QBEIXZ proc near
.text:0000B648                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1045p
.text:0000B648                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+2F78p
.text:0000B648
.text:0000B648 var_4           = dword ptr -4
.text:0000B648
.text:0000B648                 push    ebp
.text:0000B649                 mov     ebp, esp
.text:0000B64B                 push    ecx
.text:0000B64C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B653                 mov     [ebp+var_4], ecx
.text:0000B656                 mov     eax, [ebp+var_4]
.text:0000B659                 mov     eax, [eax+4]
.text:0000B65C                 mov     esp, ebp
.text:0000B65E                 pop     ebp
.text:0000B65F                 retn
.text:0000B65F ?Size@?$CRecordVector@I@@QBEIXZ endp
.text:0000B65F
.text:0000B65F _text           ends
.text:0000B65F
.text:0000B660 ; ===========================================================================
.text:0000B660
.text:0000B660 ; Segment type: Pure code
.text:0000B660 ; Segment permissions: Read/Execute
.text:0000B660 _text           segment para public 'CODE' use32
.text:0000B660                 assume cs:_text
.text:0000B660                 ;org 0B660h
.text:0000B660 ; COMDAT (pick any)
.text:0000B660                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000B660
.text:0000B660 ; =============== S U B R O U T I N E =======================================
.text:0000B660
.text:0000B660 ; Attributes: bp-based frame
.text:0000B660
.text:0000B660 ; public: void __thiscall CRecordVector<unsigned int>::ReserveDown(void)
.text:0000B660                 public ?ReserveDown@?$CRecordVector@I@@QAEXXZ
.text:0000B660 ?ReserveDown@?$CRecordVector@I@@QAEXXZ proc near
.text:0000B660                                         ; CODE XREF: NArchive::N7z::CUInt32DefVector::ReserveDown(void)+1Cp
.text:0000B660                                         ; NArchive::N7z::COutFolders::OutFoldersReserveDown(void)+1Cp
.text:0000B660
.text:0000B660 var_10          = dword ptr -10h
.text:0000B660 var_C           = dword ptr -0Ch
.text:0000B660 Dst             = dword ptr -8
.text:0000B660 var_4           = dword ptr -4
.text:0000B660
.text:0000B660                 push    ebp
.text:0000B661                 mov     ebp, esp
.text:0000B663                 sub     esp, 10h
.text:0000B666                 mov     eax, 0CCCCCCCCh
.text:0000B66B                 mov     [ebp+var_10], eax
.text:0000B66E                 mov     [ebp+var_C], eax
.text:0000B671                 mov     [ebp+Dst], eax
.text:0000B674                 mov     [ebp+var_4], eax
.text:0000B677                 mov     [ebp+var_4], ecx
.text:0000B67A                 mov     eax, [ebp+var_4]
.text:0000B67D                 mov     ecx, [ebp+var_4]
.text:0000B680                 mov     edx, [eax+4]
.text:0000B683                 cmp     edx, [ecx+8]
.text:0000B686                 jnz     short loc_B68A
.text:0000B688                 jmp     short loc_B706
.text:0000B68A ; ---------------------------------------------------------------------------
.text:0000B68A
.text:0000B68A loc_B68A:                               ; CODE XREF: CRecordVector<uint>::ReserveDown(void)+26j
.text:0000B68A                 mov     [ebp+Dst], 0
.text:0000B691                 mov     eax, [ebp+var_4]
.text:0000B694                 cmp     dword ptr [eax+4], 0
.text:0000B698                 jz      short loc_B6DE
.text:0000B69A                 xor     ecx, ecx
.text:0000B69C                 mov     edx, [ebp+var_4]
.text:0000B69F                 mov     eax, [edx+4]
.text:0000B6A2                 mov     edx, 4
.text:0000B6A7                 mul     edx
.text:0000B6A9                 seto    cl
.text:0000B6AC                 neg     ecx
.text:0000B6AE                 or      ecx, eax
.text:0000B6B0                 push    ecx             ; unsigned int
.text:0000B6B1                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000B6B6                 add     esp, 4
.text:0000B6B9                 mov     [ebp+var_C], eax
.text:0000B6BC                 mov     eax, [ebp+var_C]
.text:0000B6BF                 mov     [ebp+Dst], eax
.text:0000B6C2                 mov     ecx, [ebp+var_4]
.text:0000B6C5                 mov     edx, [ecx+4]
.text:0000B6C8                 shl     edx, 2
.text:0000B6CB                 push    edx             ; Size
.text:0000B6CC                 mov     eax, [ebp+var_4]
.text:0000B6CF                 mov     ecx, [eax]
.text:0000B6D1                 push    ecx             ; Src
.text:0000B6D2                 mov     edx, [ebp+Dst]
.text:0000B6D5                 push    edx             ; Dst
.text:0000B6D6                 call    _memcpy
.text:0000B6DB                 add     esp, 0Ch
.text:0000B6DE
.text:0000B6DE loc_B6DE:                               ; CODE XREF: CRecordVector<uint>::ReserveDown(void)+38j
.text:0000B6DE                 mov     eax, [ebp+var_4]
.text:0000B6E1                 mov     ecx, [eax]
.text:0000B6E3                 mov     [ebp+var_10], ecx
.text:0000B6E6                 mov     edx, [ebp+var_10]
.text:0000B6E9                 push    edx             ; void *
.text:0000B6EA                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000B6EF                 add     esp, 4
.text:0000B6F2                 mov     eax, [ebp+var_4]
.text:0000B6F5                 mov     ecx, [ebp+Dst]
.text:0000B6F8                 mov     [eax], ecx
.text:0000B6FA                 mov     edx, [ebp+var_4]
.text:0000B6FD                 mov     eax, [ebp+var_4]
.text:0000B700                 mov     ecx, [eax+4]
.text:0000B703                 mov     [edx+8], ecx
.text:0000B706
.text:0000B706 loc_B706:                               ; CODE XREF: CRecordVector<uint>::ReserveDown(void)+28j
.text:0000B706                 add     esp, 10h
.text:0000B709                 cmp     ebp, esp
.text:0000B70B                 call    __RTC_CheckEsp
.text:0000B710                 mov     esp, ebp
.text:0000B712                 pop     ebp
.text:0000B713                 retn
.text:0000B713 ?ReserveDown@?$CRecordVector@I@@QAEXXZ endp
.text:0000B713
.text:0000B713 _text           ends
.text:0000B713
.text:0000B714 ; ===========================================================================
.text:0000B714
.text:0000B714 ; Segment type: Pure code
.text:0000B714 ; Segment permissions: Read/Execute
.text:0000B714 _text           segment para public 'CODE' use32
.text:0000B714                 assume cs:_text
.text:0000B714                 ;org 0B714h
.text:0000B714 ; COMDAT (pick any)
.text:0000B714                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000B714
.text:0000B714 ; =============== S U B R O U T I N E =======================================
.text:0000B714
.text:0000B714 ; Attributes: bp-based frame
.text:0000B714
.text:0000B714 ; public: __thiscall CRecordVector<unsigned int>::~CRecordVector<unsigned int>(void)
.text:0000B714                 public ??1?$CRecordVector@I@@QAE@XZ
.text:0000B714 ??1?$CRecordVector@I@@QAE@XZ proc near  ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1145p
.text:0000B714                                         ; __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$14+6j ...
.text:0000B714
.text:0000B714 var_8           = dword ptr -8
.text:0000B714 var_4           = dword ptr -4
.text:0000B714
.text:0000B714                 push    ebp
.text:0000B715                 mov     ebp, esp
.text:0000B717                 sub     esp, 8
.text:0000B71A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000B721                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B728                 mov     [ebp+var_4], ecx
.text:0000B72B                 mov     eax, [ebp+var_4]
.text:0000B72E                 mov     ecx, [eax]
.text:0000B730                 mov     [ebp+var_8], ecx
.text:0000B733                 mov     edx, [ebp+var_8]
.text:0000B736                 push    edx             ; void *
.text:0000B737                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000B73C                 add     esp, 4
.text:0000B73F                 add     esp, 8
.text:0000B742                 cmp     ebp, esp
.text:0000B744                 call    __RTC_CheckEsp
.text:0000B749                 mov     esp, ebp
.text:0000B74B                 pop     ebp
.text:0000B74C                 retn
.text:0000B74C ??1?$CRecordVector@I@@QAE@XZ endp
.text:0000B74C
.text:0000B74C ; ---------------------------------------------------------------------------
.text:0000B74D                 align 10h
.text:0000B74D _text           ends
.text:0000B74D
.text:0000B750 ; ===========================================================================
.text:0000B750
.text:0000B750 ; Segment type: Pure code
.text:0000B750 ; Segment permissions: Read/Execute
.text:0000B750 _text           segment para public 'CODE' use32
.text:0000B750                 assume cs:_text
.text:0000B750                 ;org 0B750h
.text:0000B750 ; COMDAT (pick any)
.text:0000B750                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000B750
.text:0000B750 ; =============== S U B R O U T I N E =======================================
.text:0000B750
.text:0000B750 ; Attributes: bp-based frame
.text:0000B750
.text:0000B750 ; public: unsigned int __thiscall CRecordVector<unsigned int>::Add(unsigned int)
.text:0000B750                 public ?Add@?$CRecordVector@I@@QAEII@Z
.text:0000B750 ?Add@?$CRecordVector@I@@QAEII@Z proc near
.text:0000B750                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+B61p
.text:0000B750                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1006p ...
.text:0000B750
.text:0000B750 var_8           = dword ptr -8
.text:0000B750 var_4           = dword ptr -4
.text:0000B750 arg_0           = dword ptr  8
.text:0000B750
.text:0000B750                 push    ebp
.text:0000B751                 mov     ebp, esp
.text:0000B753                 sub     esp, 8
.text:0000B756                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000B75D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B764                 mov     [ebp+var_4], ecx
.text:0000B767                 mov     ecx, [ebp+var_4]
.text:0000B76A                 call    ?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ ; CRecordVector<uint>::ReserveOnePosition(void)
.text:0000B76F                 mov     eax, [ebp+var_4]
.text:0000B772                 mov     ecx, [eax+4]
.text:0000B775                 mov     edx, [ebp+var_4]
.text:0000B778                 mov     eax, [edx]
.text:0000B77A                 mov     edx, [ebp+arg_0]
.text:0000B77D                 mov     [eax+ecx*4], edx
.text:0000B780                 mov     eax, [ebp+var_4]
.text:0000B783                 mov     ecx, [eax+4]
.text:0000B786                 mov     [ebp+var_8], ecx
.text:0000B789                 mov     edx, [ebp+var_4]
.text:0000B78C                 mov     eax, [edx+4]
.text:0000B78F                 add     eax, 1
.text:0000B792                 mov     ecx, [ebp+var_4]
.text:0000B795                 mov     [ecx+4], eax
.text:0000B798                 mov     eax, [ebp+var_8]
.text:0000B79B                 add     esp, 8
.text:0000B79E                 cmp     ebp, esp
.text:0000B7A0                 call    __RTC_CheckEsp
.text:0000B7A5                 mov     esp, ebp
.text:0000B7A7                 pop     ebp
.text:0000B7A8                 retn    4
.text:0000B7A8 ?Add@?$CRecordVector@I@@QAEII@Z endp
.text:0000B7A8
.text:0000B7A8 ; ---------------------------------------------------------------------------
.text:0000B7AB                 align 4
.text:0000B7AB _text           ends
.text:0000B7AB
.text:0000B7AC ; ===========================================================================
.text:0000B7AC
.text:0000B7AC ; Segment type: Pure code
.text:0000B7AC ; Segment permissions: Read/Execute
.text:0000B7AC _text           segment para public 'CODE' use32
.text:0000B7AC                 assume cs:_text
.text:0000B7AC                 ;org 0B7ACh
.text:0000B7AC ; COMDAT (pick any)
.text:0000B7AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000B7AC
.text:0000B7AC ; =============== S U B R O U T I N E =======================================
.text:0000B7AC
.text:0000B7AC ; Attributes: bp-based frame
.text:0000B7AC
.text:0000B7AC ; public: unsigned int const & __thiscall CRecordVector<unsigned int>::operator[](unsigned int)const
.text:0000B7AC                 public ??A?$CRecordVector@I@@QBEABII@Z
.text:0000B7AC ??A?$CRecordVector@I@@QBEABII@Z proc near
.text:0000B7AC                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+303Cp
.text:0000B7AC                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+305Ap
.text:0000B7AC
.text:0000B7AC var_4           = dword ptr -4
.text:0000B7AC arg_0           = dword ptr  8
.text:0000B7AC
.text:0000B7AC                 push    ebp
.text:0000B7AD                 mov     ebp, esp
.text:0000B7AF                 push    ecx
.text:0000B7B0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B7B7                 mov     [ebp+var_4], ecx
.text:0000B7BA                 mov     eax, [ebp+var_4]
.text:0000B7BD                 mov     ecx, [eax]
.text:0000B7BF                 mov     edx, [ebp+arg_0]
.text:0000B7C2                 lea     eax, [ecx+edx*4]
.text:0000B7C5                 mov     esp, ebp
.text:0000B7C7                 pop     ebp
.text:0000B7C8                 retn    4
.text:0000B7C8 ??A?$CRecordVector@I@@QBEABII@Z endp
.text:0000B7C8
.text:0000B7C8 ; ---------------------------------------------------------------------------
.text:0000B7CB                 align 4
.text:0000B7CB _text           ends
.text:0000B7CB
.text:0000B7CC ; ===========================================================================
.text:0000B7CC
.text:0000B7CC ; Segment type: Pure code
.text:0000B7CC ; Segment permissions: Read/Execute
.text:0000B7CC _text           segment para public 'CODE' use32
.text:0000B7CC                 assume cs:_text
.text:0000B7CC                 ;org 0B7CCh
.text:0000B7CC ; COMDAT (pick any)
.text:0000B7CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000B7CC
.text:0000B7CC ; =============== S U B R O U T I N E =======================================
.text:0000B7CC
.text:0000B7CC ; Attributes: bp-based frame
.text:0000B7CC
.text:0000B7CC ; public: unsigned int & __thiscall CRecordVector<unsigned int>::operator[](unsigned int)
.text:0000B7CC                 public ??A?$CRecordVector@I@@QAEAAII@Z
.text:0000B7CC ??A?$CRecordVector@I@@QAEAAII@Z proc near
.text:0000B7CC                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1063p
.text:0000B7CC                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+39DDp
.text:0000B7CC
.text:0000B7CC var_4           = dword ptr -4
.text:0000B7CC arg_0           = dword ptr  8
.text:0000B7CC
.text:0000B7CC                 push    ebp
.text:0000B7CD                 mov     ebp, esp
.text:0000B7CF                 push    ecx
.text:0000B7D0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B7D7                 mov     [ebp+var_4], ecx
.text:0000B7DA                 mov     eax, [ebp+var_4]
.text:0000B7DD                 mov     ecx, [eax]
.text:0000B7DF                 mov     edx, [ebp+arg_0]
.text:0000B7E2                 lea     eax, [ecx+edx*4]
.text:0000B7E5                 mov     esp, ebp
.text:0000B7E7                 pop     ebp
.text:0000B7E8                 retn    4
.text:0000B7E8 ??A?$CRecordVector@I@@QAEAAII@Z endp
.text:0000B7E8
.text:0000B7E8 ; ---------------------------------------------------------------------------
.text:0000B7EB                 align 4
.text:0000B7EB _text           ends
.text:0000B7EB
.text:0000B7EC ; ===========================================================================
.text:0000B7EC
.text:0000B7EC ; Segment type: Pure code
.text:0000B7EC ; Segment permissions: Read/Execute
.text:0000B7EC _text           segment para public 'CODE' use32
.text:0000B7EC                 assume cs:_text
.text:0000B7EC                 ;org 0B7ECh
.text:0000B7EC ; COMDAT (pick any)
.text:0000B7EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000B7EC
.text:0000B7EC ; =============== S U B R O U T I N E =======================================
.text:0000B7EC
.text:0000B7EC ; Attributes: bp-based frame
.text:0000B7EC
.text:0000B7EC ; public: void __thiscall CRecordVector<unsigned int>::Sort(int (__stdcall *)(unsigned int const *, unsigned int const *, void *), void *)
.text:0000B7EC                 public ?Sort@?$CRecordVector@I@@QAEXP6GHPBI0PAX@Z1@Z
.text:0000B7EC ?Sort@?$CRecordVector@I@@QAEXP6GHPBI0PAX@Z1@Z proc near
.text:0000B7EC                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+101Fp
.text:0000B7EC
.text:0000B7EC var_14          = dword ptr -14h
.text:0000B7EC var_10          = dword ptr -10h
.text:0000B7EC var_C           = dword ptr -0Ch
.text:0000B7EC var_8           = dword ptr -8
.text:0000B7EC var_4           = dword ptr -4
.text:0000B7EC arg_0           = dword ptr  8
.text:0000B7EC arg_4           = dword ptr  0Ch
.text:0000B7EC
.text:0000B7EC                 push    ebp
.text:0000B7ED                 mov     ebp, esp
.text:0000B7EF                 sub     esp, 14h
.text:0000B7F2                 mov     eax, 0CCCCCCCCh
.text:0000B7F7                 mov     [ebp+var_14], eax
.text:0000B7FA                 mov     [ebp+var_10], eax
.text:0000B7FD                 mov     [ebp+var_C], eax
.text:0000B800                 mov     [ebp+var_8], eax
.text:0000B803                 mov     [ebp+var_4], eax
.text:0000B806                 mov     [ebp+var_4], ecx
.text:0000B809                 mov     eax, [ebp+var_4]
.text:0000B80C                 mov     ecx, [eax+4]
.text:0000B80F                 mov     [ebp+var_8], ecx
.text:0000B812                 cmp     [ebp+var_8], 1
.text:0000B816                 ja      short loc_B81D
.text:0000B818                 jmp     loc_B8A1
.text:0000B81D ; ---------------------------------------------------------------------------
.text:0000B81D
.text:0000B81D loc_B81D:                               ; CODE XREF: CRecordVector<uint>::Sort(int (*)(uint const *,uint const *,void *),void *)+2Aj
.text:0000B81D                 mov     ecx, [ebp+var_4]
.text:0000B820                 call    ?Front@?$CRecordVector@I@@QAEAAIXZ ; CRecordVector<uint>::Front(void)
.text:0000B825                 sub     eax, 4
.text:0000B828                 mov     [ebp+var_C], eax
.text:0000B82B                 mov     edx, [ebp+var_8]
.text:0000B82E                 shr     edx, 1
.text:0000B830                 mov     [ebp+var_10], edx
.text:0000B833
.text:0000B833 loc_B833:                               ; CODE XREF: CRecordVector<uint>::Sort(int (*)(uint const *,uint const *,void *),void *)+69j
.text:0000B833                 mov     eax, [ebp+arg_4]
.text:0000B836                 push    eax
.text:0000B837                 mov     ecx, [ebp+arg_0]
.text:0000B83A                 push    ecx
.text:0000B83B                 mov     edx, [ebp+var_8]
.text:0000B83E                 push    edx
.text:0000B83F                 mov     eax, [ebp+var_10]
.text:0000B842                 push    eax
.text:0000B843                 mov     ecx, [ebp+var_C]
.text:0000B846                 push    ecx
.text:0000B847                 call    ?SortRefDown@?$CRecordVector@I@@SGXPAIIIP6GHPBI1PAX@Z2@Z ; CRecordVector<uint>::SortRefDown(uint *,uint,uint,int (*)(uint const *,uint const *,void *),void *)
.text:0000B84C                 mov     edx, [ebp+var_10]
.text:0000B84F                 sub     edx, 1
.text:0000B852                 mov     [ebp+var_10], edx
.text:0000B855                 jnz     short loc_B833
.text:0000B857
.text:0000B857 loc_B857:                               ; CODE XREF: CRecordVector<uint>::Sort(int (*)(uint const *,uint const *,void *),void *)+B3j
.text:0000B857                 mov     eax, [ebp+var_8]
.text:0000B85A                 mov     ecx, [ebp+var_C]
.text:0000B85D                 mov     edx, [ecx+eax*4]
.text:0000B860                 mov     [ebp+var_14], edx
.text:0000B863                 mov     eax, [ebp+var_8]
.text:0000B866                 mov     ecx, [ebp+var_C]
.text:0000B869                 mov     edx, [ebp+var_C]
.text:0000B86C                 mov     edx, [edx+4]
.text:0000B86F                 mov     [ecx+eax*4], edx
.text:0000B872                 mov     eax, [ebp+var_8]
.text:0000B875                 sub     eax, 1
.text:0000B878                 mov     [ebp+var_8], eax
.text:0000B87B                 mov     ecx, [ebp+var_C]
.text:0000B87E                 mov     edx, [ebp+var_14]
.text:0000B881                 mov     [ecx+4], edx
.text:0000B884                 mov     eax, [ebp+arg_4]
.text:0000B887                 push    eax
.text:0000B888                 mov     ecx, [ebp+arg_0]
.text:0000B88B                 push    ecx
.text:0000B88C                 mov     edx, [ebp+var_8]
.text:0000B88F                 push    edx
.text:0000B890                 push    1
.text:0000B892                 mov     eax, [ebp+var_C]
.text:0000B895                 push    eax
.text:0000B896                 call    ?SortRefDown@?$CRecordVector@I@@SGXPAIIIP6GHPBI1PAX@Z2@Z ; CRecordVector<uint>::SortRefDown(uint *,uint,uint,int (*)(uint const *,uint const *,void *),void *)
.text:0000B89B                 cmp     [ebp+var_8], 1
.text:0000B89F                 ja      short loc_B857
.text:0000B8A1
.text:0000B8A1 loc_B8A1:                               ; CODE XREF: CRecordVector<uint>::Sort(int (*)(uint const *,uint const *,void *),void *)+2Cj
.text:0000B8A1                 add     esp, 14h
.text:0000B8A4                 cmp     ebp, esp
.text:0000B8A6                 call    __RTC_CheckEsp
.text:0000B8AB                 mov     esp, ebp
.text:0000B8AD                 pop     ebp
.text:0000B8AE                 retn    8
.text:0000B8AE ?Sort@?$CRecordVector@I@@QAEXP6GHPBI0PAX@Z1@Z endp
.text:0000B8AE
.text:0000B8AE ; ---------------------------------------------------------------------------
.text:0000B8B1                 align 4
.text:0000B8B1 _text           ends
.text:0000B8B1
.text:0000B8B4 ; ===========================================================================
.text:0000B8B4
.text:0000B8B4 ; Segment type: Pure code
.text:0000B8B4 ; Segment permissions: Read/Execute
.text:0000B8B4 _text           segment para public 'CODE' use32
.text:0000B8B4                 assume cs:_text
.text:0000B8B4                 ;org 0B8B4h
.text:0000B8B4 ; COMDAT (pick any)
.text:0000B8B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000B8B4
.text:0000B8B4 ; =============== S U B R O U T I N E =======================================
.text:0000B8B4
.text:0000B8B4 ; Attributes: bp-based frame
.text:0000B8B4
.text:0000B8B4 ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::CMyComPtr<struct ISequentialOutStream>(void)
.text:0000B8B4                 public ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
.text:0000B8B4 ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ proc near
.text:0000B8B4                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1C0Ap
.text:0000B8B4                                         ; NArchive::N7z::CThreadDecoder::CThreadDecoder(bool)+7Dp ...
.text:0000B8B4
.text:0000B8B4 var_4           = dword ptr -4
.text:0000B8B4
.text:0000B8B4                 push    ebp
.text:0000B8B5                 mov     ebp, esp
.text:0000B8B7                 push    ecx
.text:0000B8B8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B8BF                 mov     [ebp+var_4], ecx
.text:0000B8C2                 mov     eax, [ebp+var_4]
.text:0000B8C5                 mov     dword ptr [eax], 0
.text:0000B8CB                 mov     eax, [ebp+var_4]
.text:0000B8CE                 mov     esp, ebp
.text:0000B8D0                 pop     ebp
.text:0000B8D1                 retn
.text:0000B8D1 ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ endp
.text:0000B8D1
.text:0000B8D1 ; ---------------------------------------------------------------------------
.text:0000B8D2                 align 4
.text:0000B8D2 _text           ends
.text:0000B8D2
.text:0000B8D4 ; ===========================================================================
.text:0000B8D4
.text:0000B8D4 ; Segment type: Pure code
.text:0000B8D4 ; Segment permissions: Read/Execute
.text:0000B8D4 _text           segment para public 'CODE' use32
.text:0000B8D4                 assume cs:_text
.text:0000B8D4                 ;org 0B8D4h
.text:0000B8D4 ; COMDAT (pick any)
.text:0000B8D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000B8D4
.text:0000B8D4 ; =============== S U B R O U T I N E =======================================
.text:0000B8D4
.text:0000B8D4 ; Attributes: bp-based frame
.text:0000B8D4
.text:0000B8D4 ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::~CMyComPtr<struct ISequentialOutStream>(void)
.text:0000B8D4                 public ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
.text:0000B8D4 ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ proc near
.text:0000B8D4                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1C9Fp
.text:0000B8D4                                         ; __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$22+6j ...
.text:0000B8D4
.text:0000B8D4 var_4           = dword ptr -4
.text:0000B8D4
.text:0000B8D4                 push    ebp
.text:0000B8D5                 mov     ebp, esp
.text:0000B8D7                 push    ecx
.text:0000B8D8                 push    esi
.text:0000B8D9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B8E0                 mov     [ebp+var_4], ecx
.text:0000B8E3                 mov     eax, [ebp+var_4]
.text:0000B8E6                 cmp     dword ptr [eax], 0
.text:0000B8E9                 jz      short loc_B906
.text:0000B8EB                 mov     ecx, [ebp+var_4]
.text:0000B8EE                 mov     edx, [ecx]
.text:0000B8F0                 mov     eax, [ebp+var_4]
.text:0000B8F3                 mov     ecx, [eax]
.text:0000B8F5                 mov     edx, [edx]
.text:0000B8F7                 mov     esi, esp
.text:0000B8F9                 push    ecx
.text:0000B8FA                 mov     eax, [edx+8]
.text:0000B8FD                 call    eax
.text:0000B8FF                 cmp     esi, esp
.text:0000B901                 call    __RTC_CheckEsp
.text:0000B906
.text:0000B906 loc_B906:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)+15j
.text:0000B906                 pop     esi
.text:0000B907                 add     esp, 4
.text:0000B90A                 cmp     ebp, esp
.text:0000B90C                 call    __RTC_CheckEsp
.text:0000B911                 mov     esp, ebp
.text:0000B913                 pop     ebp
.text:0000B914                 retn
.text:0000B914 ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ endp
.text:0000B914
.text:0000B914 ; ---------------------------------------------------------------------------
.text:0000B915                 align 4
.text:0000B915 _text           ends
.text:0000B915
.text:0000B918 ; ===========================================================================
.text:0000B918
.text:0000B918 ; Segment type: Pure code
.text:0000B918 ; Segment permissions: Read/Execute
.text:0000B918 _text           segment para public 'CODE' use32
.text:0000B918                 assume cs:_text
.text:0000B918                 ;org 0B918h
.text:0000B918 ; COMDAT (pick any)
.text:0000B918                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000B918
.text:0000B918 ; =============== S U B R O U T I N E =======================================
.text:0000B918
.text:0000B918 ; Attributes: bp-based frame
.text:0000B918
.text:0000B918 ; public: void __thiscall CMyComPtr<struct ISequentialOutStream>::Release(void)
.text:0000B918                 public ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ
.text:0000B918 ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ proc near
.text:0000B918                                         ; CODE XREF: NArchive::N7z::CThreadDecoder::Execute(void)+135p
.text:0000B918
.text:0000B918 var_4           = dword ptr -4
.text:0000B918
.text:0000B918                 push    ebp
.text:0000B919                 mov     ebp, esp
.text:0000B91B                 push    ecx
.text:0000B91C                 push    esi
.text:0000B91D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B924                 mov     [ebp+var_4], ecx
.text:0000B927                 mov     eax, [ebp+var_4]
.text:0000B92A                 cmp     dword ptr [eax], 0
.text:0000B92D                 jz      short loc_B953
.text:0000B92F                 mov     ecx, [ebp+var_4]
.text:0000B932                 mov     edx, [ecx]
.text:0000B934                 mov     eax, [ebp+var_4]
.text:0000B937                 mov     ecx, [eax]
.text:0000B939                 mov     edx, [edx]
.text:0000B93B                 mov     esi, esp
.text:0000B93D                 push    ecx
.text:0000B93E                 mov     eax, [edx+8]
.text:0000B941                 call    eax
.text:0000B943                 cmp     esi, esp
.text:0000B945                 call    __RTC_CheckEsp
.text:0000B94A                 mov     ecx, [ebp+var_4]
.text:0000B94D                 mov     dword ptr [ecx], 0
.text:0000B953
.text:0000B953 loc_B953:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::Release(void)+15j
.text:0000B953                 pop     esi
.text:0000B954                 add     esp, 4
.text:0000B957                 cmp     ebp, esp
.text:0000B959                 call    __RTC_CheckEsp
.text:0000B95E                 mov     esp, ebp
.text:0000B960                 pop     ebp
.text:0000B961                 retn
.text:0000B961 ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ endp
.text:0000B961
.text:0000B961 ; ---------------------------------------------------------------------------
.text:0000B962                 align 4
.text:0000B962 _text           ends
.text:0000B962
.text:0000B964 ; ===========================================================================
.text:0000B964
.text:0000B964 ; Segment type: Pure code
.text:0000B964 ; Segment permissions: Read/Execute
.text:0000B964 _text           segment para public 'CODE' use32
.text:0000B964                 assume cs:_text
.text:0000B964                 ;org 0B964h
.text:0000B964 ; COMDAT (pick any)
.text:0000B964                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000B964
.text:0000B964 ; =============== S U B R O U T I N E =======================================
.text:0000B964
.text:0000B964 ; Attributes: bp-based frame
.text:0000B964
.text:0000B964 ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::operator struct ISequentialOutStream *(void)const
.text:0000B964                 public ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ
.text:0000B964 ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ proc near
.text:0000B964                                         ; CODE XREF: NArchive::N7z::CThreadDecoder::Execute(void)+78p
.text:0000B964                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+16DEp ...
.text:0000B964
.text:0000B964 var_4           = dword ptr -4
.text:0000B964
.text:0000B964                 push    ebp
.text:0000B965                 mov     ebp, esp
.text:0000B967                 push    ecx
.text:0000B968                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B96F                 mov     [ebp+var_4], ecx
.text:0000B972                 mov     eax, [ebp+var_4]
.text:0000B975                 mov     eax, [eax]
.text:0000B977                 mov     esp, ebp
.text:0000B979                 pop     ebp
.text:0000B97A                 retn
.text:0000B97A ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ endp
.text:0000B97A
.text:0000B97A ; ---------------------------------------------------------------------------
.text:0000B97B                 align 4
.text:0000B97B _text           ends
.text:0000B97B
.text:0000B97C ; ===========================================================================
.text:0000B97C
.text:0000B97C ; Segment type: Pure code
.text:0000B97C ; Segment permissions: Read/Execute
.text:0000B97C _text           segment para public 'CODE' use32
.text:0000B97C                 assume cs:_text
.text:0000B97C                 ;org 0B97Ch
.text:0000B97C ; COMDAT (pick any)
.text:0000B97C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000B97C
.text:0000B97C ; =============== S U B R O U T I N E =======================================
.text:0000B97C
.text:0000B97C ; Attributes: bp-based frame
.text:0000B97C
.text:0000B97C ; public: struct ISequentialOutStream * * __thiscall CMyComPtr<struct ISequentialOutStream>::operator&(void)
.text:0000B97C                 public ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ
.text:0000B97C ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ proc near
.text:0000B97C                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1C19p
.text:0000B97C
.text:0000B97C var_4           = dword ptr -4
.text:0000B97C
.text:0000B97C                 push    ebp
.text:0000B97D                 mov     ebp, esp
.text:0000B97F                 push    ecx
.text:0000B980                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B987                 mov     [ebp+var_4], ecx
.text:0000B98A                 mov     eax, [ebp+var_4]
.text:0000B98D                 mov     esp, ebp
.text:0000B98F                 pop     ebp
.text:0000B990                 retn
.text:0000B990 ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ endp
.text:0000B990
.text:0000B990 ; ---------------------------------------------------------------------------
.text:0000B991                 align 4
.text:0000B991 _text           ends
.text:0000B991
.text:0000B994 ; ===========================================================================
.text:0000B994
.text:0000B994 ; Segment type: Pure code
.text:0000B994 ; Segment permissions: Read/Execute
.text:0000B994 _text           segment para public 'CODE' use32
.text:0000B994                 assume cs:_text
.text:0000B994                 ;org 0B994h
.text:0000B994 ; COMDAT (pick any)
.text:0000B994                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000B994
.text:0000B994 ; =============== S U B R O U T I N E =======================================
.text:0000B994
.text:0000B994 ; Attributes: bp-based frame
.text:0000B994
.text:0000B994 ; public: struct ISequentialOutStream * __thiscall CMyComPtr<struct ISequentialOutStream>::operator->(void)const
.text:0000B994                 public ??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ
.text:0000B994 ??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ proc near
.text:0000B994                                         ; CODE XREF: NArchive::N7z::CFolderOutStream2::Write(void const *,uint,uint *)+97p
.text:0000B994
.text:0000B994 var_4           = dword ptr -4
.text:0000B994
.text:0000B994                 push    ebp
.text:0000B995                 mov     ebp, esp
.text:0000B997                 push    ecx
.text:0000B998                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B99F                 mov     [ebp+var_4], ecx
.text:0000B9A2                 mov     eax, [ebp+var_4]
.text:0000B9A5                 mov     eax, [eax]
.text:0000B9A7                 mov     esp, ebp
.text:0000B9A9                 pop     ebp
.text:0000B9AA                 retn
.text:0000B9AA ??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ endp
.text:0000B9AA
.text:0000B9AA ; ---------------------------------------------------------------------------
.text:0000B9AB                 align 4
.text:0000B9AB _text           ends
.text:0000B9AB
.text:0000B9AC ; ===========================================================================
.text:0000B9AC
.text:0000B9AC ; Segment type: Pure code
.text:0000B9AC ; Segment permissions: Read/Execute
.text:0000B9AC _text           segment para public 'CODE' use32
.text:0000B9AC                 assume cs:_text
.text:0000B9AC                 ;org 0B9ACh
.text:0000B9AC ; COMDAT (pick any)
.text:0000B9AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000B9AC
.text:0000B9AC ; =============== S U B R O U T I N E =======================================
.text:0000B9AC
.text:0000B9AC ; Attributes: bp-based frame
.text:0000B9AC
.text:0000B9AC ; public: struct ISequentialOutStream * __thiscall CMyComPtr<struct ISequentialOutStream>::operator=(struct ISequentialOutStream *)
.text:0000B9AC                 public ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z
.text:0000B9AC ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z proc near
.text:0000B9AC                                         ; CODE XREF: NArchive::N7z::CThreadDecoder::CThreadDecoder(bool)+10Bp
.text:0000B9AC                                         ; CMyComPtr<ISequentialOutStream>::operator=(CMyComPtr<ISequentialOutStream> const &)+17p
.text:0000B9AC
.text:0000B9AC var_4           = dword ptr -4
.text:0000B9AC arg_0           = dword ptr  8
.text:0000B9AC
.text:0000B9AC                 push    ebp
.text:0000B9AD                 mov     ebp, esp
.text:0000B9AF                 push    ecx
.text:0000B9B0                 push    esi
.text:0000B9B1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B9B8                 mov     [ebp+var_4], ecx
.text:0000B9BB                 cmp     [ebp+arg_0], 0
.text:0000B9BF                 jz      short loc_B9D8
.text:0000B9C1                 mov     eax, [ebp+arg_0]
.text:0000B9C4                 mov     ecx, [eax]
.text:0000B9C6                 mov     esi, esp
.text:0000B9C8                 mov     edx, [ebp+arg_0]
.text:0000B9CB                 push    edx
.text:0000B9CC                 mov     eax, [ecx+4]
.text:0000B9CF                 call    eax
.text:0000B9D1                 cmp     esi, esp
.text:0000B9D3                 call    __RTC_CheckEsp
.text:0000B9D8
.text:0000B9D8 loc_B9D8:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::operator=(ISequentialOutStream *)+13j
.text:0000B9D8                 mov     ecx, [ebp+var_4]
.text:0000B9DB                 cmp     dword ptr [ecx], 0
.text:0000B9DE                 jz      short loc_B9FB
.text:0000B9E0                 mov     edx, [ebp+var_4]
.text:0000B9E3                 mov     eax, [edx]
.text:0000B9E5                 mov     ecx, [ebp+var_4]
.text:0000B9E8                 mov     edx, [ecx]
.text:0000B9EA                 mov     eax, [eax]
.text:0000B9EC                 mov     esi, esp
.text:0000B9EE                 push    edx
.text:0000B9EF                 mov     ecx, [eax+8]
.text:0000B9F2                 call    ecx
.text:0000B9F4                 cmp     esi, esp
.text:0000B9F6                 call    __RTC_CheckEsp
.text:0000B9FB
.text:0000B9FB loc_B9FB:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::operator=(ISequentialOutStream *)+32j
.text:0000B9FB                 mov     edx, [ebp+var_4]
.text:0000B9FE                 mov     eax, [ebp+arg_0]
.text:0000BA01                 mov     [edx], eax
.text:0000BA03                 mov     eax, [ebp+arg_0]
.text:0000BA06                 pop     esi
.text:0000BA07                 add     esp, 4
.text:0000BA0A                 cmp     ebp, esp
.text:0000BA0C                 call    __RTC_CheckEsp
.text:0000BA11                 mov     esp, ebp
.text:0000BA13                 pop     ebp
.text:0000BA14                 retn    4
.text:0000BA14 ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z endp
.text:0000BA14
.text:0000BA14 ; ---------------------------------------------------------------------------
.text:0000BA17                 align 4
.text:0000BA17 _text           ends
.text:0000BA17
.text:0000BA18 ; ===========================================================================
.text:0000BA18
.text:0000BA18 ; Segment type: Pure code
.text:0000BA18 ; Segment permissions: Read/Execute
.text:0000BA18 _text           segment para public 'CODE' use32
.text:0000BA18                 assume cs:_text
.text:0000BA18                 ;org 0BA18h
.text:0000BA18 ; COMDAT (pick any)
.text:0000BA18                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000BA18
.text:0000BA18 ; =============== S U B R O U T I N E =======================================
.text:0000BA18
.text:0000BA18 ; Attributes: bp-based frame
.text:0000BA18
.text:0000BA18 ; public: struct ISequentialOutStream * __thiscall CMyComPtr<struct ISequentialOutStream>::operator=(class CMyComPtr<struct ISequentialOutStream> const &)
.text:0000BA18                 public ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@ABV0@@Z
.text:0000BA18 ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@ABV0@@Z proc near
.text:0000BA18                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1C51p
.text:0000BA18
.text:0000BA18 var_4           = dword ptr -4
.text:0000BA18 arg_0           = dword ptr  8
.text:0000BA18
.text:0000BA18                 push    ebp
.text:0000BA19                 mov     ebp, esp
.text:0000BA1B                 push    ecx
.text:0000BA1C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000BA23                 mov     [ebp+var_4], ecx
.text:0000BA26                 mov     eax, [ebp+arg_0]
.text:0000BA29                 mov     ecx, [eax]
.text:0000BA2B                 push    ecx
.text:0000BA2C                 mov     ecx, [ebp+var_4]
.text:0000BA2F                 call    ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=(ISequentialOutStream *)
.text:0000BA34                 add     esp, 4
.text:0000BA37                 cmp     ebp, esp
.text:0000BA39                 call    __RTC_CheckEsp
.text:0000BA3E                 mov     esp, ebp
.text:0000BA40                 pop     ebp
.text:0000BA41                 retn    4
.text:0000BA41 ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@ABV0@@Z endp
.text:0000BA41
.text:0000BA41 _text           ends
.text:0000BA41
.text:0000BA44 ; ===========================================================================
.text:0000BA44
.text:0000BA44 ; Segment type: Pure code
.text:0000BA44 ; Segment permissions: Read/Execute
.text:0000BA44 _text           segment para public 'CODE' use32
.text:0000BA44                 assume cs:_text
.text:0000BA44                 ;org 0BA44h
.text:0000BA44 ; COMDAT (pick any)
.text:0000BA44                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000BA44
.text:0000BA44 ; =============== S U B R O U T I N E =======================================
.text:0000BA44
.text:0000BA44 ; Attributes: bp-based frame
.text:0000BA44
.text:0000BA44 ; public: __thiscall CBuffer<unsigned char>::CBuffer<unsigned char>(void)
.text:0000BA44                 public ??0?$CBuffer@E@@QAE@XZ
.text:0000BA44 ??0?$CBuffer@E@@QAE@XZ proc near        ; CODE XREF: NArchive::N7z::CAnalysis::CAnalysis(void)+42p
.text:0000BA44
.text:0000BA44 var_4           = dword ptr -4
.text:0000BA44
.text:0000BA44                 push    ebp
.text:0000BA45                 mov     ebp, esp
.text:0000BA47                 push    ecx
.text:0000BA48                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000BA4F                 mov     [ebp+var_4], ecx
.text:0000BA52                 mov     eax, [ebp+var_4]
.text:0000BA55                 mov     dword ptr [eax], 0
.text:0000BA5B                 mov     ecx, [ebp+var_4]
.text:0000BA5E                 mov     dword ptr [ecx+4], 0
.text:0000BA65                 mov     eax, [ebp+var_4]
.text:0000BA68                 mov     esp, ebp
.text:0000BA6A                 pop     ebp
.text:0000BA6B                 retn
.text:0000BA6B ??0?$CBuffer@E@@QAE@XZ endp
.text:0000BA6B
.text:0000BA6B _text           ends
.text:0000BA6B
.text:0000BA6C ; ===========================================================================
.text:0000BA6C
.text:0000BA6C ; Segment type: Pure code
.text:0000BA6C ; Segment permissions: Read/Execute
.text:0000BA6C _text           segment para public 'CODE' use32
.text:0000BA6C                 assume cs:_text
.text:0000BA6C                 ;org 0BA6Ch
.text:0000BA6C ; COMDAT (pick any)
.text:0000BA6C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000BA6C
.text:0000BA6C ; =============== S U B R O U T I N E =======================================
.text:0000BA6C
.text:0000BA6C ; Attributes: bp-based frame
.text:0000BA6C
.text:0000BA6C ; public: __thiscall CBuffer<unsigned char>::~CBuffer<unsigned char>(void)
.text:0000BA6C                 public ??1?$CBuffer@E@@QAE@XZ
.text:0000BA6C ??1?$CBuffer@E@@QAE@XZ proc near        ; CODE XREF: NArchive::N7z::CAnalysis::~CAnalysis(void)+3Ap
.text:0000BA6C                                         ; NArchive::N7z::CCoderInfo::~CCoderInfo(void)+14p
.text:0000BA6C
.text:0000BA6C var_8           = dword ptr -8
.text:0000BA6C var_4           = dword ptr -4
.text:0000BA6C
.text:0000BA6C                 push    ebp
.text:0000BA6D                 mov     ebp, esp
.text:0000BA6F                 sub     esp, 8
.text:0000BA72                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000BA79                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000BA80                 mov     [ebp+var_4], ecx
.text:0000BA83                 mov     eax, [ebp+var_4]
.text:0000BA86                 mov     ecx, [eax]
.text:0000BA88                 mov     [ebp+var_8], ecx
.text:0000BA8B                 mov     edx, [ebp+var_8]
.text:0000BA8E                 push    edx             ; void *
.text:0000BA8F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000BA94                 add     esp, 4
.text:0000BA97                 add     esp, 8
.text:0000BA9A                 cmp     ebp, esp
.text:0000BA9C                 call    __RTC_CheckEsp
.text:0000BAA1                 mov     esp, ebp
.text:0000BAA3                 pop     ebp
.text:0000BAA4                 retn
.text:0000BAA4 ??1?$CBuffer@E@@QAE@XZ endp
.text:0000BAA4
.text:0000BAA4 ; ---------------------------------------------------------------------------
.text:0000BAA5                 align 4
.text:0000BAA5 _text           ends
.text:0000BAA5
.text:0000BAA8 ; ===========================================================================
.text:0000BAA8
.text:0000BAA8 ; Segment type: Pure code
.text:0000BAA8 ; Segment permissions: Read/Execute
.text:0000BAA8 _text           segment para public 'CODE' use32
.text:0000BAA8                 assume cs:_text
.text:0000BAA8                 ;org 0BAA8h
.text:0000BAA8 ; COMDAT (pick any)
.text:0000BAA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000BAA8
.text:0000BAA8 ; =============== S U B R O U T I N E =======================================
.text:0000BAA8
.text:0000BAA8 ; Attributes: bp-based frame
.text:0000BAA8
.text:0000BAA8 ; public: __thiscall CBuffer<unsigned char>::operator unsigned char *(void)
.text:0000BAA8                 public ??B?$CBuffer@E@@QAEPAEXZ
.text:0000BAA8 ??B?$CBuffer@E@@QAEPAEXZ proc near      ; CODE XREF: NArchive::N7z::CAnalysis::GetFilterGroup(uint,NArchive::N7z::CUpdateItem const &,NArchive::N7z::CFilterMode &)+1FCp
.text:0000BAA8                                         ; NArchive::N7z::CAnalysis::GetFilterGroup(uint,NArchive::N7z::CUpdateItem const &,NArchive::N7z::CFilterMode &)+22Fp
.text:0000BAA8
.text:0000BAA8 var_4           = dword ptr -4
.text:0000BAA8
.text:0000BAA8                 push    ebp
.text:0000BAA9                 mov     ebp, esp
.text:0000BAAB                 push    ecx
.text:0000BAAC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000BAB3                 mov     [ebp+var_4], ecx
.text:0000BAB6                 mov     eax, [ebp+var_4]
.text:0000BAB9                 mov     eax, [eax]
.text:0000BABB                 mov     esp, ebp
.text:0000BABD                 pop     ebp
.text:0000BABE                 retn
.text:0000BABE ??B?$CBuffer@E@@QAEPAEXZ endp
.text:0000BABE
.text:0000BABE ; ---------------------------------------------------------------------------
.text:0000BABF                 align 10h
.text:0000BABF _text           ends
.text:0000BABF
.text:0000BAC0 ; ===========================================================================
.text:0000BAC0
.text:0000BAC0 ; Segment type: Pure code
.text:0000BAC0 ; Segment permissions: Read/Execute
.text:0000BAC0 _text           segment para public 'CODE' use32
.text:0000BAC0                 assume cs:_text
.text:0000BAC0                 ;org 0BAC0h
.text:0000BAC0 ; COMDAT (pick any)
.text:0000BAC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000BAC0
.text:0000BAC0 ; =============== S U B R O U T I N E =======================================
.text:0000BAC0
.text:0000BAC0 ; Attributes: bp-based frame
.text:0000BAC0
.text:0000BAC0 ; public: __thiscall CBuffer<unsigned char>::operator unsigned char const *(void)const
.text:0000BAC0                 public ??B?$CBuffer@E@@QBEPBEXZ
.text:0000BAC0 ??B?$CBuffer@E@@QBEPBEXZ proc near      ; CODE XREF: NArchive::N7z::Get_FilterGroup_for_Folder(CRecordVector<NArchive::N7z::CFilterMode2> &,NArchive::N7z::CFolderEx const &)+87p
.text:0000BAC0
.text:0000BAC0 var_4           = dword ptr -4
.text:0000BAC0
.text:0000BAC0                 push    ebp
.text:0000BAC1                 mov     ebp, esp
.text:0000BAC3                 push    ecx
.text:0000BAC4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000BACB                 mov     [ebp+var_4], ecx
.text:0000BACE                 mov     eax, [ebp+var_4]
.text:0000BAD1                 mov     eax, [eax]
.text:0000BAD3                 mov     esp, ebp
.text:0000BAD5                 pop     ebp
.text:0000BAD6                 retn
.text:0000BAD6 ??B?$CBuffer@E@@QBEPBEXZ endp
.text:0000BAD6
.text:0000BAD6 ; ---------------------------------------------------------------------------
.text:0000BAD7                 align 4
.text:0000BAD7 _text           ends
.text:0000BAD7
.text:0000BAD8 ; ===========================================================================
.text:0000BAD8
.text:0000BAD8 ; Segment type: Pure code
.text:0000BAD8 ; Segment permissions: Read/Execute
.text:0000BAD8 _text           segment para public 'CODE' use32
.text:0000BAD8                 assume cs:_text
.text:0000BAD8                 ;org 0BAD8h
.text:0000BAD8 ; COMDAT (pick any)
.text:0000BAD8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000BAD8
.text:0000BAD8 ; =============== S U B R O U T I N E =======================================
.text:0000BAD8
.text:0000BAD8 ; Attributes: bp-based frame
.text:0000BAD8
.text:0000BAD8 ; public: unsigned int __thiscall CBuffer<unsigned char>::Size(void)const
.text:0000BAD8                 public ?Size@?$CBuffer@E@@QBEIXZ
.text:0000BAD8 ?Size@?$CBuffer@E@@QBEIXZ proc near     ; CODE XREF: NArchive::N7z::CAnalysis::GetFilterGroup(uint,NArchive::N7z::CUpdateItem const &,NArchive::N7z::CFilterMode &)+172p
.text:0000BAD8                                         ; NArchive::N7z::Get_FilterGroup_for_Folder(CRecordVector<NArchive::N7z::CFilterMode2> &,NArchive::N7z::CFolderEx const &)+77p
.text:0000BAD8
.text:0000BAD8 var_4           = dword ptr -4
.text:0000BAD8
.text:0000BAD8                 push    ebp
.text:0000BAD9                 mov     ebp, esp
.text:0000BADB                 push    ecx
.text:0000BADC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000BAE3                 mov     [ebp+var_4], ecx
.text:0000BAE6                 mov     eax, [ebp+var_4]
.text:0000BAE9                 mov     eax, [eax+4]
.text:0000BAEC                 mov     esp, ebp
.text:0000BAEE                 pop     ebp
.text:0000BAEF                 retn
.text:0000BAEF ?Size@?$CBuffer@E@@QBEIXZ endp
.text:0000BAEF
.text:0000BAEF _text           ends
.text:0000BAEF
.text:0000BAF0 ; ===========================================================================
.text:0000BAF0
.text:0000BAF0 ; Segment type: Pure code
.text:0000BAF0 ; Segment permissions: Read/Execute
.text:0000BAF0 _text           segment para public 'CODE' use32
.text:0000BAF0                 assume cs:_text
.text:0000BAF0                 ;org 0BAF0h
.text:0000BAF0 ; COMDAT (pick any)
.text:0000BAF0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000BAF0
.text:0000BAF0 ; =============== S U B R O U T I N E =======================================
.text:0000BAF0
.text:0000BAF0 ; Attributes: bp-based frame
.text:0000BAF0
.text:0000BAF0 ; public: void __thiscall CBuffer<unsigned char>::Alloc(unsigned int)
.text:0000BAF0                 public ?Alloc@?$CBuffer@E@@QAEXI@Z
.text:0000BAF0 ?Alloc@?$CBuffer@E@@QAEXI@Z proc near   ; CODE XREF: NArchive::N7z::CAnalysis::GetFilterGroup(uint,NArchive::N7z::CUpdateItem const &,NArchive::N7z::CFilterMode &)+189p
.text:0000BAF0
.text:0000BAF0 var_8           = dword ptr -8
.text:0000BAF0 var_4           = dword ptr -4
.text:0000BAF0 arg_0           = dword ptr  8
.text:0000BAF0
.text:0000BAF0                 push    ebp
.text:0000BAF1                 mov     ebp, esp
.text:0000BAF3                 sub     esp, 8
.text:0000BAF6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000BAFD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000BB04                 mov     [ebp+var_4], ecx
.text:0000BB07                 mov     eax, [ebp+var_4]
.text:0000BB0A                 mov     ecx, [ebp+arg_0]
.text:0000BB0D                 cmp     ecx, [eax+4]
.text:0000BB10                 jz      short loc_BB40
.text:0000BB12                 mov     ecx, [ebp+var_4]
.text:0000BB15                 call    ?Free@?$CBuffer@E@@QAEXXZ ; CBuffer<uchar>::Free(void)
.text:0000BB1A                 cmp     [ebp+arg_0], 0
.text:0000BB1E                 jz      short loc_BB40
.text:0000BB20                 mov     edx, [ebp+arg_0]
.text:0000BB23                 push    edx             ; unsigned int
.text:0000BB24                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000BB29                 add     esp, 4
.text:0000BB2C                 mov     [ebp+var_8], eax
.text:0000BB2F                 mov     eax, [ebp+var_4]
.text:0000BB32                 mov     ecx, [ebp+var_8]
.text:0000BB35                 mov     [eax], ecx
.text:0000BB37                 mov     edx, [ebp+var_4]
.text:0000BB3A                 mov     eax, [ebp+arg_0]
.text:0000BB3D                 mov     [edx+4], eax
.text:0000BB40
.text:0000BB40 loc_BB40:                               ; CODE XREF: CBuffer<uchar>::Alloc(uint)+20j
.text:0000BB40                                         ; CBuffer<uchar>::Alloc(uint)+2Ej
.text:0000BB40                 add     esp, 8
.text:0000BB43                 cmp     ebp, esp
.text:0000BB45                 call    __RTC_CheckEsp
.text:0000BB4A                 mov     esp, ebp
.text:0000BB4C                 pop     ebp
.text:0000BB4D                 retn    4
.text:0000BB4D ?Alloc@?$CBuffer@E@@QAEXI@Z endp
.text:0000BB4D
.text:0000BB4D _text           ends
.text:0000BB4D
.text:0000BB50 ; ===========================================================================
.text:0000BB50
.text:0000BB50 ; Segment type: Pure code
.text:0000BB50 ; Segment permissions: Read/Execute
.text:0000BB50 _text           segment para public 'CODE' use32
.text:0000BB50                 assume cs:_text
.text:0000BB50                 ;org 0BB50h
.text:0000BB50 ; COMDAT (pick any)
.text:0000BB50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000BB50
.text:0000BB50 ; =============== S U B R O U T I N E =======================================
.text:0000BB50
.text:0000BB50 ; Attributes: bp-based frame
.text:0000BB50
.text:0000BB50 ; public: void __thiscall CBuffer<unsigned char>::Free(void)
.text:0000BB50                 public ?Free@?$CBuffer@E@@QAEXXZ
.text:0000BB50 ?Free@?$CBuffer@E@@QAEXXZ proc near     ; CODE XREF: CBuffer<uchar>::Alloc(uint)+25p
.text:0000BB50
.text:0000BB50 var_8           = dword ptr -8
.text:0000BB50 var_4           = dword ptr -4
.text:0000BB50
.text:0000BB50                 push    ebp
.text:0000BB51                 mov     ebp, esp
.text:0000BB53                 sub     esp, 8
.text:0000BB56                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000BB5D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000BB64                 mov     [ebp+var_4], ecx
.text:0000BB67                 mov     eax, [ebp+var_4]
.text:0000BB6A                 cmp     dword ptr [eax], 0
.text:0000BB6D                 jz      short loc_BB8C
.text:0000BB6F                 mov     ecx, [ebp+var_4]
.text:0000BB72                 mov     edx, [ecx]
.text:0000BB74                 mov     [ebp+var_8], edx
.text:0000BB77                 mov     eax, [ebp+var_8]
.text:0000BB7A                 push    eax             ; void *
.text:0000BB7B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000BB80                 add     esp, 4
.text:0000BB83                 mov     ecx, [ebp+var_4]
.text:0000BB86                 mov     dword ptr [ecx], 0
.text:0000BB8C
.text:0000BB8C loc_BB8C:                               ; CODE XREF: CBuffer<uchar>::Free(void)+1Dj
.text:0000BB8C                 mov     edx, [ebp+var_4]
.text:0000BB8F                 mov     dword ptr [edx+4], 0
.text:0000BB96                 add     esp, 8
.text:0000BB99                 cmp     ebp, esp
.text:0000BB9B                 call    __RTC_CheckEsp
.text:0000BBA0                 mov     esp, ebp
.text:0000BBA2                 pop     ebp
.text:0000BBA3                 retn
.text:0000BBA3 ?Free@?$CBuffer@E@@QAEXXZ endp
.text:0000BBA3
.text:0000BBA3 _text           ends
.text:0000BBA3
.text:0000BBA4 ; ===========================================================================
.text:0000BBA4
.text:0000BBA4 ; Segment type: Pure code
.text:0000BBA4 ; Segment permissions: Read/Execute
.text:0000BBA4 _text           segment para public 'CODE' use32
.text:0000BBA4                 assume cs:_text
.text:0000BBA4                 ;org 0BBA4h
.text:0000BBA4 ; COMDAT (pick any)
.text:0000BBA4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000BBA4
.text:0000BBA4 ; =============== S U B R O U T I N E =======================================
.text:0000BBA4
.text:0000BBA4 ; Attributes: bp-based frame
.text:0000BBA4
.text:0000BBA4 ; public: __thiscall CMyComPtr<struct ICompressProgressInfo>::CMyComPtr<struct ICompressProgressInfo>(struct ICompressProgressInfo *)
.text:0000BBA4                 public ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z
.text:0000BBA4 ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z proc near
.text:0000BBA4                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+73Ap
.text:0000BBA4
.text:0000BBA4 var_4           = dword ptr -4
.text:0000BBA4 arg_0           = dword ptr  8
.text:0000BBA4
.text:0000BBA4                 push    ebp
.text:0000BBA5                 mov     ebp, esp
.text:0000BBA7                 push    ecx
.text:0000BBA8                 push    esi
.text:0000BBA9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000BBB0                 mov     [ebp+var_4], ecx
.text:0000BBB3                 mov     eax, [ebp+var_4]
.text:0000BBB6                 mov     ecx, [ebp+arg_0]
.text:0000BBB9                 mov     [eax], ecx
.text:0000BBBB                 cmp     [ebp+arg_0], 0
.text:0000BBBF                 jz      short loc_BBD8
.text:0000BBC1                 mov     edx, [ebp+arg_0]
.text:0000BBC4                 mov     eax, [edx]
.text:0000BBC6                 mov     esi, esp
.text:0000BBC8                 mov     ecx, [ebp+arg_0]
.text:0000BBCB                 push    ecx
.text:0000BBCC                 mov     edx, [eax+4]
.text:0000BBCF                 call    edx
.text:0000BBD1                 cmp     esi, esp
.text:0000BBD3                 call    __RTC_CheckEsp
.text:0000BBD8
.text:0000BBD8 loc_BBD8:                               ; CODE XREF: CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>(ICompressProgressInfo *)+1Bj
.text:0000BBD8                 mov     eax, [ebp+var_4]
.text:0000BBDB                 pop     esi
.text:0000BBDC                 add     esp, 4
.text:0000BBDF                 cmp     ebp, esp
.text:0000BBE1                 call    __RTC_CheckEsp
.text:0000BBE6                 mov     esp, ebp
.text:0000BBE8                 pop     ebp
.text:0000BBE9                 retn    4
.text:0000BBE9 ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z endp
.text:0000BBE9
.text:0000BBE9 _text           ends
.text:0000BBE9
.text:0000BBEC ; ===========================================================================
.text:0000BBEC
.text:0000BBEC ; Segment type: Pure code
.text:0000BBEC ; Segment permissions: Read/Execute
.text:0000BBEC _text           segment para public 'CODE' use32
.text:0000BBEC                 assume cs:_text
.text:0000BBEC                 ;org 0BBECh
.text:0000BBEC ; COMDAT (pick any)
.text:0000BBEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000BBEC
.text:0000BBEC ; =============== S U B R O U T I N E =======================================
.text:0000BBEC
.text:0000BBEC ; Attributes: bp-based frame
.text:0000BBEC
.text:0000BBEC ; public: __thiscall CMyComPtr<struct ICompressProgressInfo>::~CMyComPtr<struct ICompressProgressInfo>(void)
.text:0000BBEC                 public ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ
.text:0000BBEC ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ proc near
.text:0000BBEC                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+7B1p
.text:0000BBEC                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+887p ...
.text:0000BBEC
.text:0000BBEC var_4           = dword ptr -4
.text:0000BBEC
.text:0000BBEC                 push    ebp
.text:0000BBED                 mov     ebp, esp
.text:0000BBEF                 push    ecx
.text:0000BBF0                 push    esi
.text:0000BBF1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000BBF8                 mov     [ebp+var_4], ecx
.text:0000BBFB                 mov     eax, [ebp+var_4]
.text:0000BBFE                 cmp     dword ptr [eax], 0
.text:0000BC01                 jz      short loc_BC1E
.text:0000BC03                 mov     ecx, [ebp+var_4]
.text:0000BC06                 mov     edx, [ecx]
.text:0000BC08                 mov     eax, [ebp+var_4]
.text:0000BC0B                 mov     ecx, [eax]
.text:0000BC0D                 mov     edx, [edx]
.text:0000BC0F                 mov     esi, esp
.text:0000BC11                 push    ecx
.text:0000BC12                 mov     eax, [edx+8]
.text:0000BC15                 call    eax
.text:0000BC17                 cmp     esi, esp
.text:0000BC19                 call    __RTC_CheckEsp
.text:0000BC1E
.text:0000BC1E loc_BC1E:                               ; CODE XREF: CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)+15j
.text:0000BC1E                 pop     esi
.text:0000BC1F                 add     esp, 4
.text:0000BC22                 cmp     ebp, esp
.text:0000BC24                 call    __RTC_CheckEsp
.text:0000BC29                 mov     esp, ebp
.text:0000BC2B                 pop     ebp
.text:0000BC2C                 retn
.text:0000BC2C ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ endp
.text:0000BC2C
.text:0000BC2C ; ---------------------------------------------------------------------------
.text:0000BC2D                 align 10h
.text:0000BC2D _text           ends
.text:0000BC2D
.text:0000BC30 ; ===========================================================================
.text:0000BC30
.text:0000BC30 ; Segment type: Pure code
.text:0000BC30 ; Segment permissions: Read/Execute
.text:0000BC30 _text           segment para public 'CODE' use32
.text:0000BC30                 assume cs:_text
.text:0000BC30                 ;org 0BC30h
.text:0000BC30 ; COMDAT (pick any)
.text:0000BC30                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000BC30
.text:0000BC30 ; =============== S U B R O U T I N E =======================================
.text:0000BC30
.text:0000BC30 ; Attributes: bp-based frame
.text:0000BC30
.text:0000BC30 ; public: __thiscall CMyComPtr<struct ICompressProgressInfo>::operator struct ICompressProgressInfo *(void)const
.text:0000BC30                 public ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ
.text:0000BC30 ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ proc near
.text:0000BC30                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+16B1p
.text:0000BC30                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+21D9p ...
.text:0000BC30
.text:0000BC30 var_4           = dword ptr -4
.text:0000BC30
.text:0000BC30                 push    ebp
.text:0000BC31                 mov     ebp, esp
.text:0000BC33                 push    ecx
.text:0000BC34                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000BC3B                 mov     [ebp+var_4], ecx
.text:0000BC3E                 mov     eax, [ebp+var_4]
.text:0000BC41                 mov     eax, [eax]
.text:0000BC43                 mov     esp, ebp
.text:0000BC45                 pop     ebp
.text:0000BC46                 retn
.text:0000BC46 ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ endp
.text:0000BC46
.text:0000BC46 ; ---------------------------------------------------------------------------
.text:0000BC47                 align 4
.text:0000BC47 _text           ends
.text:0000BC47
.text:0000BC48 ; ===========================================================================
.text:0000BC48
.text:0000BC48 ; Segment type: Pure code
.text:0000BC48 ; Segment permissions: Read/Execute
.text:0000BC48 _text           segment para public 'CODE' use32
.text:0000BC48                 assume cs:_text
.text:0000BC48                 ;org 0BC48h
.text:0000BC48 ; COMDAT (pick any)
.text:0000BC48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000BC48
.text:0000BC48 ; =============== S U B R O U T I N E =======================================
.text:0000BC48
.text:0000BC48 ; Attributes: bp-based frame
.text:0000BC48
.text:0000BC48 ; public: __thiscall CRecordVector<struct NCoderMixer2::CCoderStreamsInfo>::~CRecordVector<struct NCoderMixer2::CCoderStreamsInfo>(void)
.text:0000BC48                 public ??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ
.text:0000BC48 ??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ proc near
.text:0000BC48                                         ; CODE XREF: NCoderMixer2::CBindInfo::~CBindInfo(void)+76p
.text:0000BC48                                         ; __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$0+3j
.text:0000BC48
.text:0000BC48 var_8           = dword ptr -8
.text:0000BC48 var_4           = dword ptr -4
.text:0000BC48
.text:0000BC48                 push    ebp
.text:0000BC49                 mov     ebp, esp
.text:0000BC4B                 sub     esp, 8
.text:0000BC4E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000BC55                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000BC5C                 mov     [ebp+var_4], ecx
.text:0000BC5F                 mov     eax, [ebp+var_4]
.text:0000BC62                 mov     ecx, [eax]
.text:0000BC64                 mov     [ebp+var_8], ecx
.text:0000BC67                 mov     edx, [ebp+var_8]
.text:0000BC6A                 push    edx             ; void *
.text:0000BC6B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000BC70                 add     esp, 4
.text:0000BC73                 add     esp, 8
.text:0000BC76                 cmp     ebp, esp
.text:0000BC78                 call    __RTC_CheckEsp
.text:0000BC7D                 mov     esp, ebp
.text:0000BC7F                 pop     ebp
.text:0000BC80                 retn
.text:0000BC80 ??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ endp
.text:0000BC80
.text:0000BC80 ; ---------------------------------------------------------------------------
.text:0000BC81                 align 4
.text:0000BC81 _text           ends
.text:0000BC81
.text:0000BC84 ; ===========================================================================
.text:0000BC84
.text:0000BC84 ; Segment type: Pure code
.text:0000BC84 ; Segment permissions: Read/Execute
.text:0000BC84 _text           segment para public 'CODE' use32
.text:0000BC84                 assume cs:_text
.text:0000BC84                 ;org 0BC84h
.text:0000BC84 ; COMDAT (pick any)
.text:0000BC84                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000BC84
.text:0000BC84 ; =============== S U B R O U T I N E =======================================
.text:0000BC84
.text:0000BC84 ; Attributes: bp-based frame
.text:0000BC84
.text:0000BC84 ; public: __thiscall CRecordVector<struct NCoderMixer2::CBond>::~CRecordVector<struct NCoderMixer2::CBond>(void)
.text:0000BC84                 public ??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ
.text:0000BC84 ??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ proc near
.text:0000BC84                                         ; CODE XREF: NCoderMixer2::CBindInfo::~CBindInfo(void)+67p
.text:0000BC84                                         ; __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$1+6j
.text:0000BC84
.text:0000BC84 var_8           = dword ptr -8
.text:0000BC84 var_4           = dword ptr -4
.text:0000BC84
.text:0000BC84                 push    ebp
.text:0000BC85                 mov     ebp, esp
.text:0000BC87                 sub     esp, 8
.text:0000BC8A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000BC91                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000BC98                 mov     [ebp+var_4], ecx
.text:0000BC9B                 mov     eax, [ebp+var_4]
.text:0000BC9E                 mov     ecx, [eax]
.text:0000BCA0                 mov     [ebp+var_8], ecx
.text:0000BCA3                 mov     edx, [ebp+var_8]
.text:0000BCA6                 push    edx             ; void *
.text:0000BCA7                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000BCAC                 add     esp, 4
.text:0000BCAF                 add     esp, 8
.text:0000BCB2                 cmp     ebp, esp
.text:0000BCB4                 call    __RTC_CheckEsp
.text:0000BCB9                 mov     esp, ebp
.text:0000BCBB                 pop     ebp
.text:0000BCBC                 retn
.text:0000BCBC ??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ endp
.text:0000BCBC
.text:0000BCBC ; ---------------------------------------------------------------------------
.text:0000BCBD                 align 10h
.text:0000BCBD _text           ends
.text:0000BCBD
.text:0000BCC0 ; ===========================================================================
.text:0000BCC0
.text:0000BCC0 ; Segment type: Pure code
.text:0000BCC0 ; Segment permissions: Read/Execute
.text:0000BCC0 _text           segment para public 'CODE' use32
.text:0000BCC0                 assume cs:_text
.text:0000BCC0                 ;org 0BCC0h
.text:0000BCC0 ; COMDAT (pick any)
.text:0000BCC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000BCC0
.text:0000BCC0 ; =============== S U B R O U T I N E =======================================
.text:0000BCC0
.text:0000BCC0 ; Attributes: bp-based frame
.text:0000BCC0
.text:0000BCC0 ; public: __thiscall CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>(void)
.text:0000BCC0                 public ??0?$CRecordVector@_K@@QAE@XZ
.text:0000BCC0 ??0?$CRecordVector@_K@@QAE@XZ proc near ; CODE XREF: NArchive::N7z::CFolderInStream::CFolderInStream(void)+A3p
.text:0000BCC0
.text:0000BCC0 var_4           = dword ptr -4
.text:0000BCC0
.text:0000BCC0                 push    ebp
.text:0000BCC1                 mov     ebp, esp
.text:0000BCC3                 push    ecx
.text:0000BCC4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000BCCB                 mov     [ebp+var_4], ecx
.text:0000BCCE                 mov     eax, [ebp+var_4]
.text:0000BCD1                 mov     dword ptr [eax], 0
.text:0000BCD7                 mov     ecx, [ebp+var_4]
.text:0000BCDA                 mov     dword ptr [ecx+4], 0
.text:0000BCE1                 mov     edx, [ebp+var_4]
.text:0000BCE4                 mov     dword ptr [edx+8], 0
.text:0000BCEB                 mov     eax, [ebp+var_4]
.text:0000BCEE                 mov     esp, ebp
.text:0000BCF0                 pop     ebp
.text:0000BCF1                 retn
.text:0000BCF1 ??0?$CRecordVector@_K@@QAE@XZ endp
.text:0000BCF1
.text:0000BCF1 ; ---------------------------------------------------------------------------
.text:0000BCF2                 align 4
.text:0000BCF2 _text           ends
.text:0000BCF2
.text:0000BCF4 ; ===========================================================================
.text:0000BCF4
.text:0000BCF4 ; Segment type: Pure code
.text:0000BCF4 ; Segment permissions: Read/Execute
.text:0000BCF4 _text           segment para public 'CODE' use32
.text:0000BCF4                 assume cs:_text
.text:0000BCF4                 ;org 0BCF4h
.text:0000BCF4 ; COMDAT (pick any)
.text:0000BCF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000BCF4
.text:0000BCF4 ; =============== S U B R O U T I N E =======================================
.text:0000BCF4
.text:0000BCF4 ; Attributes: bp-based frame
.text:0000BCF4
.text:0000BCF4 ; public: unsigned int __thiscall CRecordVector<unsigned __int64>::Size(void)const
.text:0000BCF4                 public ?Size@?$CRecordVector@_K@@QBEIXZ
.text:0000BCF4 ?Size@?$CRecordVector@_K@@QBEIXZ proc near
.text:0000BCF4                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1B35p
.text:0000BCF4                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+2CD5p ...
.text:0000BCF4
.text:0000BCF4 var_4           = dword ptr -4
.text:0000BCF4
.text:0000BCF4                 push    ebp
.text:0000BCF5                 mov     ebp, esp
.text:0000BCF7                 push    ecx
.text:0000BCF8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000BCFF                 mov     [ebp+var_4], ecx
.text:0000BD02                 mov     eax, [ebp+var_4]
.text:0000BD05                 mov     eax, [eax+4]
.text:0000BD08                 mov     esp, ebp
.text:0000BD0A                 pop     ebp
.text:0000BD0B                 retn
.text:0000BD0B ?Size@?$CRecordVector@_K@@QBEIXZ endp
.text:0000BD0B
.text:0000BD0B _text           ends
.text:0000BD0B
.text:0000BD0C ; ===========================================================================
.text:0000BD0C
.text:0000BD0C ; Segment type: Pure code
.text:0000BD0C ; Segment permissions: Read/Execute
.text:0000BD0C _text           segment para public 'CODE' use32
.text:0000BD0C                 assume cs:_text
.text:0000BD0C                 ;org 0BD0Ch
.text:0000BD0C ; COMDAT (pick any)
.text:0000BD0C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000BD0C
.text:0000BD0C ; =============== S U B R O U T I N E =======================================
.text:0000BD0C
.text:0000BD0C ; Attributes: bp-based frame
.text:0000BD0C
.text:0000BD0C ; public: void __thiscall CRecordVector<unsigned __int64>::ReserveDown(void)
.text:0000BD0C                 public ?ReserveDown@?$CRecordVector@_K@@QAEXXZ
.text:0000BD0C ?ReserveDown@?$CRecordVector@_K@@QAEXXZ proc near
.text:0000BD0C                                         ; CODE XREF: NArchive::N7z::CArchiveDatabaseOut::ReserveDown(void)+1Cp
.text:0000BD0C                                         ; NArchive::N7z::CUInt64DefVector::ReserveDown(void)+1Cp ...
.text:0000BD0C
.text:0000BD0C var_10          = dword ptr -10h
.text:0000BD0C var_C           = dword ptr -0Ch
.text:0000BD0C Dst             = dword ptr -8
.text:0000BD0C var_4           = dword ptr -4
.text:0000BD0C
.text:0000BD0C                 push    ebp
.text:0000BD0D                 mov     ebp, esp
.text:0000BD0F                 sub     esp, 10h
.text:0000BD12                 mov     eax, 0CCCCCCCCh
.text:0000BD17                 mov     [ebp+var_10], eax
.text:0000BD1A                 mov     [ebp+var_C], eax
.text:0000BD1D                 mov     [ebp+Dst], eax
.text:0000BD20                 mov     [ebp+var_4], eax
.text:0000BD23                 mov     [ebp+var_4], ecx
.text:0000BD26                 mov     eax, [ebp+var_4]
.text:0000BD29                 mov     ecx, [ebp+var_4]
.text:0000BD2C                 mov     edx, [eax+4]
.text:0000BD2F                 cmp     edx, [ecx+8]
.text:0000BD32                 jnz     short loc_BD36
.text:0000BD34                 jmp     short loc_BDB2
.text:0000BD36 ; ---------------------------------------------------------------------------
.text:0000BD36
.text:0000BD36 loc_BD36:                               ; CODE XREF: CRecordVector<unsigned __int64>::ReserveDown(void)+26j
.text:0000BD36                 mov     [ebp+Dst], 0
.text:0000BD3D                 mov     eax, [ebp+var_4]
.text:0000BD40                 cmp     dword ptr [eax+4], 0
.text:0000BD44                 jz      short loc_BD8A
.text:0000BD46                 xor     ecx, ecx
.text:0000BD48                 mov     edx, [ebp+var_4]
.text:0000BD4B                 mov     eax, [edx+4]
.text:0000BD4E                 mov     edx, 8
.text:0000BD53                 mul     edx
.text:0000BD55                 seto    cl
.text:0000BD58                 neg     ecx
.text:0000BD5A                 or      ecx, eax
.text:0000BD5C                 push    ecx             ; unsigned int
.text:0000BD5D                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000BD62                 add     esp, 4
.text:0000BD65                 mov     [ebp+var_C], eax
.text:0000BD68                 mov     eax, [ebp+var_C]
.text:0000BD6B                 mov     [ebp+Dst], eax
.text:0000BD6E                 mov     ecx, [ebp+var_4]
.text:0000BD71                 mov     edx, [ecx+4]
.text:0000BD74                 shl     edx, 3
.text:0000BD77                 push    edx             ; Size
.text:0000BD78                 mov     eax, [ebp+var_4]
.text:0000BD7B                 mov     ecx, [eax]
.text:0000BD7D                 push    ecx             ; Src
.text:0000BD7E                 mov     edx, [ebp+Dst]
.text:0000BD81                 push    edx             ; Dst
.text:0000BD82                 call    _memcpy
.text:0000BD87                 add     esp, 0Ch
.text:0000BD8A
.text:0000BD8A loc_BD8A:                               ; CODE XREF: CRecordVector<unsigned __int64>::ReserveDown(void)+38j
.text:0000BD8A                 mov     eax, [ebp+var_4]
.text:0000BD8D                 mov     ecx, [eax]
.text:0000BD8F                 mov     [ebp+var_10], ecx
.text:0000BD92                 mov     edx, [ebp+var_10]
.text:0000BD95                 push    edx             ; void *
.text:0000BD96                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000BD9B                 add     esp, 4
.text:0000BD9E                 mov     eax, [ebp+var_4]
.text:0000BDA1                 mov     ecx, [ebp+Dst]
.text:0000BDA4                 mov     [eax], ecx
.text:0000BDA6                 mov     edx, [ebp+var_4]
.text:0000BDA9                 mov     eax, [ebp+var_4]
.text:0000BDAC                 mov     ecx, [eax+4]
.text:0000BDAF                 mov     [edx+8], ecx
.text:0000BDB2
.text:0000BDB2 loc_BDB2:                               ; CODE XREF: CRecordVector<unsigned __int64>::ReserveDown(void)+28j
.text:0000BDB2                 add     esp, 10h
.text:0000BDB5                 cmp     ebp, esp
.text:0000BDB7                 call    __RTC_CheckEsp
.text:0000BDBC                 mov     esp, ebp
.text:0000BDBE                 pop     ebp
.text:0000BDBF                 retn
.text:0000BDBF ?ReserveDown@?$CRecordVector@_K@@QAEXXZ endp
.text:0000BDBF
.text:0000BDBF _text           ends
.text:0000BDBF
.text:0000BDC0 ; ===========================================================================
.text:0000BDC0
.text:0000BDC0 ; Segment type: Pure code
.text:0000BDC0 ; Segment permissions: Read/Execute
.text:0000BDC0 _text           segment para public 'CODE' use32
.text:0000BDC0                 assume cs:_text
.text:0000BDC0                 ;org 0BDC0h
.text:0000BDC0 ; COMDAT (pick any)
.text:0000BDC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000BDC0
.text:0000BDC0 ; =============== S U B R O U T I N E =======================================
.text:0000BDC0
.text:0000BDC0 ; Attributes: bp-based frame
.text:0000BDC0
.text:0000BDC0 ; public: __thiscall CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text:0000BDC0                 public ??1?$CRecordVector@_K@@QAE@XZ
.text:0000BDC0 ??1?$CRecordVector@_K@@QAE@XZ proc near ; CODE XREF: NArchive::N7z::CBindInfoEx::~CBindInfoEx(void)+3Ap
.text:0000BDC0                                         ; NArchive::N7z::CFolderInStream::~CFolderInStream(void)+3Ap
.text:0000BDC0
.text:0000BDC0 var_8           = dword ptr -8
.text:0000BDC0 var_4           = dword ptr -4
.text:0000BDC0
.text:0000BDC0                 push    ebp
.text:0000BDC1                 mov     ebp, esp
.text:0000BDC3                 sub     esp, 8
.text:0000BDC6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000BDCD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000BDD4                 mov     [ebp+var_4], ecx
.text:0000BDD7                 mov     eax, [ebp+var_4]
.text:0000BDDA                 mov     ecx, [eax]
.text:0000BDDC                 mov     [ebp+var_8], ecx
.text:0000BDDF                 mov     edx, [ebp+var_8]
.text:0000BDE2                 push    edx             ; void *
.text:0000BDE3                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000BDE8                 add     esp, 4
.text:0000BDEB                 add     esp, 8
.text:0000BDEE                 cmp     ebp, esp
.text:0000BDF0                 call    __RTC_CheckEsp
.text:0000BDF5                 mov     esp, ebp
.text:0000BDF7                 pop     ebp
.text:0000BDF8                 retn
.text:0000BDF8 ??1?$CRecordVector@_K@@QAE@XZ endp
.text:0000BDF8
.text:0000BDF8 ; ---------------------------------------------------------------------------
.text:0000BDF9                 align 4
.text:0000BDF9 _text           ends
.text:0000BDF9
.text:0000BDFC ; ===========================================================================
.text:0000BDFC
.text:0000BDFC ; Segment type: Pure code
.text:0000BDFC ; Segment permissions: Read/Execute
.text:0000BDFC _text           segment para public 'CODE' use32
.text:0000BDFC                 assume cs:_text
.text:0000BDFC                 ;org 0BDFCh
.text:0000BDFC ; COMDAT (pick any)
.text:0000BDFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000BDFC
.text:0000BDFC ; =============== S U B R O U T I N E =======================================
.text:0000BDFC
.text:0000BDFC ; Attributes: bp-based frame
.text:0000BDFC
.text:0000BDFC ; public: unsigned int __thiscall CRecordVector<unsigned __int64>::Add(unsigned __int64)
.text:0000BDFC                 public ?Add@?$CRecordVector@_K@@QAEI_K@Z
.text:0000BDFC ?Add@?$CRecordVector@_K@@QAEI_K@Z proc near
.text:0000BDFC                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1863p
.text:0000BDFC                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+18DEp
.text:0000BDFC
.text:0000BDFC var_8           = dword ptr -8
.text:0000BDFC var_4           = dword ptr -4
.text:0000BDFC arg_0           = dword ptr  8
.text:0000BDFC arg_4           = dword ptr  0Ch
.text:0000BDFC
.text:0000BDFC                 push    ebp
.text:0000BDFD                 mov     ebp, esp
.text:0000BDFF                 sub     esp, 8
.text:0000BE02                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000BE09                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000BE10                 mov     [ebp+var_4], ecx
.text:0000BE13                 mov     ecx, [ebp+var_4]
.text:0000BE16                 call    ?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ ; CRecordVector<unsigned __int64>::ReserveOnePosition(void)
.text:0000BE1B                 mov     eax, [ebp+var_4]
.text:0000BE1E                 mov     ecx, [eax+4]
.text:0000BE21                 mov     edx, [ebp+var_4]
.text:0000BE24                 mov     eax, [edx]
.text:0000BE26                 mov     edx, [ebp+arg_0]
.text:0000BE29                 mov     [eax+ecx*8], edx
.text:0000BE2C                 mov     edx, [ebp+arg_4]
.text:0000BE2F                 mov     [eax+ecx*8+4], edx
.text:0000BE33                 mov     eax, [ebp+var_4]
.text:0000BE36                 mov     ecx, [eax+4]
.text:0000BE39                 mov     [ebp+var_8], ecx
.text:0000BE3C                 mov     edx, [ebp+var_4]
.text:0000BE3F                 mov     eax, [edx+4]
.text:0000BE42                 add     eax, 1
.text:0000BE45                 mov     ecx, [ebp+var_4]
.text:0000BE48                 mov     [ecx+4], eax
.text:0000BE4B                 mov     eax, [ebp+var_8]
.text:0000BE4E                 add     esp, 8
.text:0000BE51                 cmp     ebp, esp
.text:0000BE53                 call    __RTC_CheckEsp
.text:0000BE58                 mov     esp, ebp
.text:0000BE5A                 pop     ebp
.text:0000BE5B                 retn    8
.text:0000BE5B ?Add@?$CRecordVector@_K@@QAEI_K@Z endp
.text:0000BE5B
.text:0000BE5B ; ---------------------------------------------------------------------------
.text:0000BE5E                 align 10h
.text:0000BE5E _text           ends
.text:0000BE5E
.text:0000BE60 ; ===========================================================================
.text:0000BE60
.text:0000BE60 ; Segment type: Pure code
.text:0000BE60 ; Segment permissions: Read/Execute
.text:0000BE60 _text           segment para public 'CODE' use32
.text:0000BE60                 assume cs:_text
.text:0000BE60                 ;org 0BE60h
.text:0000BE60 ; COMDAT (pick any)
.text:0000BE60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000BE60
.text:0000BE60 ; =============== S U B R O U T I N E =======================================
.text:0000BE60
.text:0000BE60 ; Attributes: bp-based frame
.text:0000BE60
.text:0000BE60 ; public: unsigned __int64 const & __thiscall CRecordVector<unsigned __int64>::operator[](unsigned int)const
.text:0000BE60                 public ??A?$CRecordVector@_K@@QBEAB_KI@Z
.text:0000BE60 ??A?$CRecordVector@_K@@QBEAB_KI@Z proc near
.text:0000BE60                                         ; CODE XREF: NArchive::N7z::CUInt64DefVector::GetItem(uint,unsigned __int64 &)+38p
.text:0000BE60
.text:0000BE60 var_4           = dword ptr -4
.text:0000BE60 arg_0           = dword ptr  8
.text:0000BE60
.text:0000BE60                 push    ebp
.text:0000BE61                 mov     ebp, esp
.text:0000BE63                 push    ecx
.text:0000BE64                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000BE6B                 mov     [ebp+var_4], ecx
.text:0000BE6E                 mov     eax, [ebp+var_4]
.text:0000BE71                 mov     ecx, [eax]
.text:0000BE73                 mov     edx, [ebp+arg_0]
.text:0000BE76                 lea     eax, [ecx+edx*8]
.text:0000BE79                 mov     esp, ebp
.text:0000BE7B                 pop     ebp
.text:0000BE7C                 retn    4
.text:0000BE7C ??A?$CRecordVector@_K@@QBEAB_KI@Z endp
.text:0000BE7C
.text:0000BE7C ; ---------------------------------------------------------------------------
.text:0000BE7F                 align 10h
.text:0000BE7F _text           ends
.text:0000BE7F
.text:0000BE80 ; ===========================================================================
.text:0000BE80
.text:0000BE80 ; Segment type: Pure code
.text:0000BE80 ; Segment permissions: Read/Execute
.text:0000BE80 _text           segment para public 'CODE' use32
.text:0000BE80                 assume cs:_text
.text:0000BE80                 ;org 0BE80h
.text:0000BE80 ; COMDAT (pick any)
.text:0000BE80                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000BE80
.text:0000BE80 ; =============== S U B R O U T I N E =======================================
.text:0000BE80
.text:0000BE80 ; Attributes: bp-based frame
.text:0000BE80
.text:0000BE80 ; public: unsigned __int64 & __thiscall CRecordVector<unsigned __int64>::operator[](unsigned int)
.text:0000BE80                 public ??A?$CRecordVector@_K@@QAEAA_KI@Z
.text:0000BE80 ??A?$CRecordVector@_K@@QAEAA_KI@Z proc near
.text:0000BE80                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+2CEFp
.text:0000BE80                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+3728p ...
.text:0000BE80
.text:0000BE80 var_4           = dword ptr -4
.text:0000BE80 arg_0           = dword ptr  8
.text:0000BE80
.text:0000BE80                 push    ebp
.text:0000BE81                 mov     ebp, esp
.text:0000BE83                 push    ecx
.text:0000BE84                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000BE8B                 mov     [ebp+var_4], ecx
.text:0000BE8E                 mov     eax, [ebp+var_4]
.text:0000BE91                 mov     ecx, [eax]
.text:0000BE93                 mov     edx, [ebp+arg_0]
.text:0000BE96                 lea     eax, [ecx+edx*8]
.text:0000BE99                 mov     esp, ebp
.text:0000BE9B                 pop     ebp
.text:0000BE9C                 retn    4
.text:0000BE9C ??A?$CRecordVector@_K@@QAEAA_KI@Z endp
.text:0000BE9C
.text:0000BE9C ; ---------------------------------------------------------------------------
.text:0000BE9F                 align 10h
.text:0000BE9F _text           ends
.text:0000BE9F
.text:0000BEA0 ; ===========================================================================
.text:0000BEA0
.text:0000BEA0 ; Segment type: Pure code
.text:0000BEA0 ; Segment permissions: Read/Execute
.text:0000BEA0 _text           segment para public 'CODE' use32
.text:0000BEA0                 assume cs:_text
.text:0000BEA0                 ;org 0BEA0h
.text:0000BEA0 ; COMDAT (pick any)
.text:0000BEA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000BEA0
.text:0000BEA0 ; =============== S U B R O U T I N E =======================================
.text:0000BEA0
.text:0000BEA0 ; Attributes: bp-based frame
.text:0000BEA0
.text:0000BEA0 ; public: __thiscall CRecordVector<bool>::CRecordVector<bool>(void)
.text:0000BEA0                 public ??0?$CRecordVector@_N@@QAE@XZ
.text:0000BEA0 ??0?$CRecordVector@_N@@QAE@XZ proc near ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+18F0p
.text:0000BEA0                                         ; NArchive::N7z::CFolderInStream::CFolderInStream(void)+85p
.text:0000BEA0
.text:0000BEA0 var_4           = dword ptr -4
.text:0000BEA0
.text:0000BEA0                 push    ebp
.text:0000BEA1                 mov     ebp, esp
.text:0000BEA3                 push    ecx
.text:0000BEA4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000BEAB                 mov     [ebp+var_4], ecx
.text:0000BEAE                 mov     eax, [ebp+var_4]
.text:0000BEB1                 mov     dword ptr [eax], 0
.text:0000BEB7                 mov     ecx, [ebp+var_4]
.text:0000BEBA                 mov     dword ptr [ecx+4], 0
.text:0000BEC1                 mov     edx, [ebp+var_4]
.text:0000BEC4                 mov     dword ptr [edx+8], 0
.text:0000BECB                 mov     eax, [ebp+var_4]
.text:0000BECE                 mov     esp, ebp
.text:0000BED0                 pop     ebp
.text:0000BED1                 retn
.text:0000BED1 ??0?$CRecordVector@_N@@QAE@XZ endp
.text:0000BED1
.text:0000BED1 ; ---------------------------------------------------------------------------
.text:0000BED2                 align 4
.text:0000BED2 _text           ends
.text:0000BED2
.text:0000BED4 ; ===========================================================================
.text:0000BED4
.text:0000BED4 ; Segment type: Pure code
.text:0000BED4 ; Segment permissions: Read/Execute
.text:0000BED4 _text           segment para public 'CODE' use32
.text:0000BED4                 assume cs:_text
.text:0000BED4                 ;org 0BED4h
.text:0000BED4 ; COMDAT (pick any)
.text:0000BED4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000BED4
.text:0000BED4 ; =============== S U B R O U T I N E =======================================
.text:0000BED4
.text:0000BED4 ; Attributes: bp-based frame
.text:0000BED4
.text:0000BED4 ; public: unsigned int __thiscall CRecordVector<bool>::Size(void)const
.text:0000BED4                 public ?Size@?$CRecordVector@_N@@QBEIXZ
.text:0000BED4 ?Size@?$CRecordVector@_N@@QBEIXZ proc near
.text:0000BED4                                         ; CODE XREF: NArchive::N7z::CRepackInStreamWithSizes::GetSubStreamSize(unsigned __int64,unsigned __int64 *)+2Dp
.text:0000BED4                                         ; NArchive::N7z::CRepackStreamBase::ProcessEmptyFiles(void)+20p ...
.text:0000BED4
.text:0000BED4 var_4           = dword ptr -4
.text:0000BED4
.text:0000BED4                 push    ebp
.text:0000BED5                 mov     ebp, esp
.text:0000BED7                 push    ecx
.text:0000BED8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000BEDF                 mov     [ebp+var_4], ecx
.text:0000BEE2                 mov     eax, [ebp+var_4]
.text:0000BEE5                 mov     eax, [eax+4]
.text:0000BEE8                 mov     esp, ebp
.text:0000BEEA                 pop     ebp
.text:0000BEEB                 retn
.text:0000BEEB ?Size@?$CRecordVector@_N@@QBEIXZ endp
.text:0000BEEB
.text:0000BEEB _text           ends
.text:0000BEEB
.text:0000BEEC ; ===========================================================================
.text:0000BEEC
.text:0000BEEC ; Segment type: Pure code
.text:0000BEEC ; Segment permissions: Read/Execute
.text:0000BEEC _text           segment para public 'CODE' use32
.text:0000BEEC                 assume cs:_text
.text:0000BEEC                 ;org 0BEECh
.text:0000BEEC ; COMDAT (pick any)
.text:0000BEEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000BEEC
.text:0000BEEC ; =============== S U B R O U T I N E =======================================
.text:0000BEEC
.text:0000BEEC ; Attributes: bp-based frame
.text:0000BEEC
.text:0000BEEC ; public: void __thiscall CRecordVector<bool>::ReserveDown(void)
.text:0000BEEC                 public ?ReserveDown@?$CRecordVector@_N@@QAEXXZ
.text:0000BEEC ?ReserveDown@?$CRecordVector@_N@@QAEXXZ proc near
.text:0000BEEC                                         ; CODE XREF: NArchive::N7z::CArchiveDatabaseOut::ReserveDown(void)+8Bp
.text:0000BEEC                                         ; NArchive::N7z::CUInt32DefVector::ReserveDown(void)+11p ...
.text:0000BEEC
.text:0000BEEC var_10          = dword ptr -10h
.text:0000BEEC var_C           = dword ptr -0Ch
.text:0000BEEC Dst             = dword ptr -8
.text:0000BEEC var_4           = dword ptr -4
.text:0000BEEC
.text:0000BEEC                 push    ebp
.text:0000BEED                 mov     ebp, esp
.text:0000BEEF                 sub     esp, 10h
.text:0000BEF2                 mov     eax, 0CCCCCCCCh
.text:0000BEF7                 mov     [ebp+var_10], eax
.text:0000BEFA                 mov     [ebp+var_C], eax
.text:0000BEFD                 mov     [ebp+Dst], eax
.text:0000BF00                 mov     [ebp+var_4], eax
.text:0000BF03                 mov     [ebp+var_4], ecx
.text:0000BF06                 mov     eax, [ebp+var_4]
.text:0000BF09                 mov     ecx, [ebp+var_4]
.text:0000BF0C                 mov     edx, [eax+4]
.text:0000BF0F                 cmp     edx, [ecx+8]
.text:0000BF12                 jnz     short loc_BF16
.text:0000BF14                 jmp     short loc_BF7F
.text:0000BF16 ; ---------------------------------------------------------------------------
.text:0000BF16
.text:0000BF16 loc_BF16:                               ; CODE XREF: CRecordVector<bool>::ReserveDown(void)+26j
.text:0000BF16                 mov     [ebp+Dst], 0
.text:0000BF1D                 mov     eax, [ebp+var_4]
.text:0000BF20                 cmp     dword ptr [eax+4], 0
.text:0000BF24                 jz      short loc_BF57
.text:0000BF26                 mov     ecx, [ebp+var_4]
.text:0000BF29                 mov     edx, [ecx+4]
.text:0000BF2C                 push    edx             ; unsigned int
.text:0000BF2D                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000BF32                 add     esp, 4
.text:0000BF35                 mov     [ebp+var_C], eax
.text:0000BF38                 mov     eax, [ebp+var_C]
.text:0000BF3B                 mov     [ebp+Dst], eax
.text:0000BF3E                 mov     ecx, [ebp+var_4]
.text:0000BF41                 mov     edx, [ecx+4]
.text:0000BF44                 push    edx             ; Size
.text:0000BF45                 mov     eax, [ebp+var_4]
.text:0000BF48                 mov     ecx, [eax]
.text:0000BF4A                 push    ecx             ; Src
.text:0000BF4B                 mov     edx, [ebp+Dst]
.text:0000BF4E                 push    edx             ; Dst
.text:0000BF4F                 call    _memcpy
.text:0000BF54                 add     esp, 0Ch
.text:0000BF57
.text:0000BF57 loc_BF57:                               ; CODE XREF: CRecordVector<bool>::ReserveDown(void)+38j
.text:0000BF57                 mov     eax, [ebp+var_4]
.text:0000BF5A                 mov     ecx, [eax]
.text:0000BF5C                 mov     [ebp+var_10], ecx
.text:0000BF5F                 mov     edx, [ebp+var_10]
.text:0000BF62                 push    edx             ; void *
.text:0000BF63                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000BF68                 add     esp, 4
.text:0000BF6B                 mov     eax, [ebp+var_4]
.text:0000BF6E                 mov     ecx, [ebp+Dst]
.text:0000BF71                 mov     [eax], ecx
.text:0000BF73                 mov     edx, [ebp+var_4]
.text:0000BF76                 mov     eax, [ebp+var_4]
.text:0000BF79                 mov     ecx, [eax+4]
.text:0000BF7C                 mov     [edx+8], ecx
.text:0000BF7F
.text:0000BF7F loc_BF7F:                               ; CODE XREF: CRecordVector<bool>::ReserveDown(void)+28j
.text:0000BF7F                 add     esp, 10h
.text:0000BF82                 cmp     ebp, esp
.text:0000BF84                 call    __RTC_CheckEsp
.text:0000BF89                 mov     esp, ebp
.text:0000BF8B                 pop     ebp
.text:0000BF8C                 retn
.text:0000BF8C ?ReserveDown@?$CRecordVector@_N@@QAEXXZ endp
.text:0000BF8C
.text:0000BF8C ; ---------------------------------------------------------------------------
.text:0000BF8D                 align 10h
.text:0000BF8D _text           ends
.text:0000BF8D
.text:0000BF90 ; ===========================================================================
.text:0000BF90
.text:0000BF90 ; Segment type: Pure code
.text:0000BF90 ; Segment permissions: Read/Execute
.text:0000BF90 _text           segment para public 'CODE' use32
.text:0000BF90                 assume cs:_text
.text:0000BF90                 ;org 0BF90h
.text:0000BF90 ; COMDAT (pick any)
.text:0000BF90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000BF90
.text:0000BF90 ; =============== S U B R O U T I N E =======================================
.text:0000BF90
.text:0000BF90 ; Attributes: bp-based frame
.text:0000BF90
.text:0000BF90 ; public: __thiscall CRecordVector<bool>::~CRecordVector<bool>(void)
.text:0000BF90                 public ??1?$CRecordVector@_N@@QAE@XZ
.text:0000BF90 ??1?$CRecordVector@_N@@QAE@XZ proc near ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1972p
.text:0000BF90                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1E4Bp ...
.text:0000BF90
.text:0000BF90 var_8           = dword ptr -8
.text:0000BF90 var_4           = dword ptr -4
.text:0000BF90
.text:0000BF90                 push    ebp
.text:0000BF91                 mov     ebp, esp
.text:0000BF93                 sub     esp, 8
.text:0000BF96                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000BF9D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000BFA4                 mov     [ebp+var_4], ecx
.text:0000BFA7                 mov     eax, [ebp+var_4]
.text:0000BFAA                 mov     ecx, [eax]
.text:0000BFAC                 mov     [ebp+var_8], ecx
.text:0000BFAF                 mov     edx, [ebp+var_8]
.text:0000BFB2                 push    edx             ; void *
.text:0000BFB3                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000BFB8                 add     esp, 4
.text:0000BFBB                 add     esp, 8
.text:0000BFBE                 cmp     ebp, esp
.text:0000BFC0                 call    __RTC_CheckEsp
.text:0000BFC5                 mov     esp, ebp
.text:0000BFC7                 pop     ebp
.text:0000BFC8                 retn
.text:0000BFC8 ??1?$CRecordVector@_N@@QAE@XZ endp
.text:0000BFC8
.text:0000BFC8 ; ---------------------------------------------------------------------------
.text:0000BFC9                 align 4
.text:0000BFC9 _text           ends
.text:0000BFC9
.text:0000BFCC ; ===========================================================================
.text:0000BFCC
.text:0000BFCC ; Segment type: Pure code
.text:0000BFCC ; Segment permissions: Read/Execute
.text:0000BFCC _text           segment para public 'CODE' use32
.text:0000BFCC                 assume cs:_text
.text:0000BFCC                 ;org 0BFCCh
.text:0000BFCC ; COMDAT (pick any)
.text:0000BFCC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000BFCC
.text:0000BFCC ; =============== S U B R O U T I N E =======================================
.text:0000BFCC
.text:0000BFCC ; Attributes: bp-based frame
.text:0000BFCC
.text:0000BFCC ; public: unsigned int __thiscall CRecordVector<bool>::Add(bool)
.text:0000BFCC                 public ?Add@?$CRecordVector@_N@@QAEI_N@Z
.text:0000BFCC ?Add@?$CRecordVector@_N@@QAEI_N@Z proc near
.text:0000BFCC                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1AF7p
.text:0000BFCC
.text:0000BFCC var_8           = dword ptr -8
.text:0000BFCC var_4           = dword ptr -4
.text:0000BFCC arg_0           = byte ptr  8
.text:0000BFCC
.text:0000BFCC                 push    ebp
.text:0000BFCD                 mov     ebp, esp
.text:0000BFCF                 sub     esp, 8
.text:0000BFD2                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000BFD9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000BFE0                 mov     [ebp+var_4], ecx
.text:0000BFE3                 mov     ecx, [ebp+var_4]
.text:0000BFE6                 call    ?ReserveOnePosition@?$CRecordVector@_N@@AAEXXZ ; CRecordVector<bool>::ReserveOnePosition(void)
.text:0000BFEB                 mov     eax, [ebp+var_4]
.text:0000BFEE                 mov     ecx, [eax]
.text:0000BFF0                 mov     edx, [ebp+var_4]
.text:0000BFF3                 mov     eax, [edx+4]
.text:0000BFF6                 mov     dl, [ebp+arg_0]
.text:0000BFF9                 mov     [ecx+eax], dl
.text:0000BFFC                 mov     eax, [ebp+var_4]
.text:0000BFFF                 mov     ecx, [eax+4]
.text:0000C002                 mov     [ebp+var_8], ecx
.text:0000C005                 mov     edx, [ebp+var_4]
.text:0000C008                 mov     eax, [edx+4]
.text:0000C00B                 add     eax, 1
.text:0000C00E                 mov     ecx, [ebp+var_4]
.text:0000C011                 mov     [ecx+4], eax
.text:0000C014                 mov     eax, [ebp+var_8]
.text:0000C017                 add     esp, 8
.text:0000C01A                 cmp     ebp, esp
.text:0000C01C                 call    __RTC_CheckEsp
.text:0000C021                 mov     esp, ebp
.text:0000C023                 pop     ebp
.text:0000C024                 retn    4
.text:0000C024 ?Add@?$CRecordVector@_N@@QAEI_N@Z endp
.text:0000C024
.text:0000C024 ; ---------------------------------------------------------------------------
.text:0000C027                 align 4
.text:0000C027 _text           ends
.text:0000C027
.text:0000C028 ; ===========================================================================
.text:0000C028
.text:0000C028 ; Segment type: Pure code
.text:0000C028 ; Segment permissions: Read/Execute
.text:0000C028 _text           segment para public 'CODE' use32
.text:0000C028                 assume cs:_text
.text:0000C028                 ;org 0C028h
.text:0000C028 ; COMDAT (pick any)
.text:0000C028                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000C028
.text:0000C028 ; =============== S U B R O U T I N E =======================================
.text:0000C028
.text:0000C028 ; Attributes: bp-based frame
.text:0000C028
.text:0000C028 ; public: bool const & __thiscall CRecordVector<bool>::operator[](unsigned int)const
.text:0000C028                 public ??A?$CRecordVector@_N@@QBEAB_NI@Z
.text:0000C028 ??A?$CRecordVector@_N@@QBEAB_NI@Z proc near
.text:0000C028                                         ; CODE XREF: NArchive::N7z::CRepackInStreamWithSizes::GetSubStreamSize(unsigned __int64,unsigned __int64 *)+63p
.text:0000C028                                         ; NArchive::N7z::CRepackStreamBase::OpenFile(void)+52p ...
.text:0000C028
.text:0000C028 var_4           = dword ptr -4
.text:0000C028 arg_0           = dword ptr  8
.text:0000C028
.text:0000C028                 push    ebp
.text:0000C029                 mov     ebp, esp
.text:0000C02B                 push    ecx
.text:0000C02C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000C033                 mov     [ebp+var_4], ecx
.text:0000C036                 mov     eax, [ebp+var_4]
.text:0000C039                 mov     eax, [eax]
.text:0000C03B                 add     eax, [ebp+arg_0]
.text:0000C03E                 mov     esp, ebp
.text:0000C040                 pop     ebp
.text:0000C041                 retn    4
.text:0000C041 ??A?$CRecordVector@_N@@QBEAB_NI@Z endp
.text:0000C041
.text:0000C041 _text           ends
.text:0000C041
.text:0000C044 ; ===========================================================================
.text:0000C044
.text:0000C044 ; Segment type: Pure code
.text:0000C044 ; Segment permissions: Read/Execute
.text:0000C044 _text           segment para public 'CODE' use32
.text:0000C044                 assume cs:_text
.text:0000C044                 ;org 0C044h
.text:0000C044 ; COMDAT (pick any)
.text:0000C044                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000C044
.text:0000C044 ; =============== S U B R O U T I N E =======================================
.text:0000C044
.text:0000C044 ; Attributes: bp-based frame
.text:0000C044
.text:0000C044 ; public: bool & __thiscall CRecordVector<bool>::operator[](unsigned int)
.text:0000C044                 public ??A?$CRecordVector@_N@@QAEAA_NI@Z
.text:0000C044 ??A?$CRecordVector@_N@@QAEAA_NI@Z proc near
.text:0000C044                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+3989p
.text:0000C044
.text:0000C044 var_4           = dword ptr -4
.text:0000C044 arg_0           = dword ptr  8
.text:0000C044
.text:0000C044                 push    ebp
.text:0000C045                 mov     ebp, esp
.text:0000C047                 push    ecx
.text:0000C048                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000C04F                 mov     [ebp+var_4], ecx
.text:0000C052                 mov     eax, [ebp+var_4]
.text:0000C055                 mov     eax, [eax]
.text:0000C057                 add     eax, [ebp+arg_0]
.text:0000C05A                 mov     esp, ebp
.text:0000C05C                 pop     ebp
.text:0000C05D                 retn    4
.text:0000C05D ??A?$CRecordVector@_N@@QAEAA_NI@Z endp
.text:0000C05D
.text:0000C05D _text           ends
.text:0000C05D
.text:0000C060 ; ===========================================================================
.text:0000C060
.text:0000C060 ; Segment type: Pure code
.text:0000C060 ; Segment permissions: Read/Execute
.text:0000C060 _text           segment para public 'CODE' use32
.text:0000C060                 assume cs:_text
.text:0000C060                 ;org 0C060h
.text:0000C060 ; COMDAT (pick any)
.text:0000C060                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000C060
.text:0000C060 ; =============== S U B R O U T I N E =======================================
.text:0000C060
.text:0000C060 ; Attributes: bp-based frame
.text:0000C060
.text:0000C060 ; public: __thiscall CMyComPtr<struct IUnknown>::~CMyComPtr<struct IUnknown>(void)
.text:0000C060                 public ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ
.text:0000C060 ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ proc near
.text:0000C060                                         ; CODE XREF: NArchive::N7z::CDecoder::~CDecoder(void)+3Ap
.text:0000C060
.text:0000C060 var_4           = dword ptr -4
.text:0000C060
.text:0000C060                 push    ebp
.text:0000C061                 mov     ebp, esp
.text:0000C063                 push    ecx
.text:0000C064                 push    esi
.text:0000C065                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000C06C                 mov     [ebp+var_4], ecx
.text:0000C06F                 mov     eax, [ebp+var_4]
.text:0000C072                 cmp     dword ptr [eax], 0
.text:0000C075                 jz      short loc_C092
.text:0000C077                 mov     ecx, [ebp+var_4]
.text:0000C07A                 mov     edx, [ecx]
.text:0000C07C                 mov     eax, [ebp+var_4]
.text:0000C07F                 mov     ecx, [eax]
.text:0000C081                 mov     edx, [edx]
.text:0000C083                 mov     esi, esp
.text:0000C085                 push    ecx
.text:0000C086                 mov     eax, [edx+8]
.text:0000C089                 call    eax
.text:0000C08B                 cmp     esi, esp
.text:0000C08D                 call    __RTC_CheckEsp
.text:0000C092
.text:0000C092 loc_C092:                               ; CODE XREF: CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>(void)+15j
.text:0000C092                 pop     esi
.text:0000C093                 add     esp, 4
.text:0000C096                 cmp     ebp, esp
.text:0000C098                 call    __RTC_CheckEsp
.text:0000C09D                 mov     esp, ebp
.text:0000C09F                 pop     ebp
.text:0000C0A0                 retn
.text:0000C0A0 ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ endp
.text:0000C0A0
.text:0000C0A0 ; ---------------------------------------------------------------------------
.text:0000C0A1                 align 4
.text:0000C0A1 _text           ends
.text:0000C0A1
.text:0000C0A4 ; ===========================================================================
.text:0000C0A4
.text:0000C0A4 ; Segment type: Pure code
.text:0000C0A4 ; Segment permissions: Read/Execute
.text:0000C0A4 _text           segment para public 'CODE' use32
.text:0000C0A4                 assume cs:_text
.text:0000C0A4                 ;org 0C0A4h
.text:0000C0A4 ; COMDAT (pick any)
.text:0000C0A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000C0A4
.text:0000C0A4 ; =============== S U B R O U T I N E =======================================
.text:0000C0A4
.text:0000C0A4 ; Attributes: bp-based frame
.text:0000C0A4
.text:0000C0A4 ; public: __thiscall CObjArray2<struct NArchive::N7z::CCoderInfo>::CObjArray2<struct NArchive::N7z::CCoderInfo>(void)
.text:0000C0A4                 public ??0?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ
.text:0000C0A4 ??0?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ proc near
.text:0000C0A4                                         ; CODE XREF: NArchive::N7z::CFolder::CFolder(void)+30p
.text:0000C0A4
.text:0000C0A4 var_4           = dword ptr -4
.text:0000C0A4
.text:0000C0A4                 push    ebp
.text:0000C0A5                 mov     ebp, esp
.text:0000C0A7                 push    ecx
.text:0000C0A8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000C0AF                 mov     [ebp+var_4], ecx
.text:0000C0B2                 mov     eax, [ebp+var_4]
.text:0000C0B5                 mov     dword ptr [eax], 0
.text:0000C0BB                 mov     ecx, [ebp+var_4]
.text:0000C0BE                 mov     dword ptr [ecx+4], 0
.text:0000C0C5                 mov     eax, [ebp+var_4]
.text:0000C0C8                 mov     esp, ebp
.text:0000C0CA                 pop     ebp
.text:0000C0CB                 retn
.text:0000C0CB ??0?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ endp
.text:0000C0CB
.text:0000C0CB _text           ends
.text:0000C0CB
.text:0000C0CC ; ===========================================================================
.text:0000C0CC
.text:0000C0CC ; Segment type: Pure code
.text:0000C0CC ; Segment permissions: Read/Execute
.text:0000C0CC _text           segment para public 'CODE' use32
.text:0000C0CC                 assume cs:_text
.text:0000C0CC                 ;org 0C0CCh
.text:0000C0CC ; COMDAT (pick any)
.text:0000C0CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000C0CC
.text:0000C0CC ; =============== S U B R O U T I N E =======================================
.text:0000C0CC
.text:0000C0CC ; Attributes: bp-based frame
.text:0000C0CC
.text:0000C0CC ; public: __thiscall CObjArray2<struct NArchive::N7z::CCoderInfo>::~CObjArray2<struct NArchive::N7z::CCoderInfo>(void)
.text:0000C0CC                 public ??1?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ
.text:0000C0CC ??1?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ proc near
.text:0000C0CC                                         ; CODE XREF: __unwindfunclet$??0CFolder@N7z@NArchive@@QAE@XZ$0+3j
.text:0000C0CC                                         ; NArchive::N7z::CFolder::~CFolder(void)+58p ...
.text:0000C0CC
.text:0000C0CC var_10          = dword ptr -10h
.text:0000C0CC var_C           = dword ptr -0Ch
.text:0000C0CC var_8           = dword ptr -8
.text:0000C0CC var_4           = dword ptr -4
.text:0000C0CC
.text:0000C0CC                 push    ebp
.text:0000C0CD                 mov     ebp, esp
.text:0000C0CF                 sub     esp, 10h
.text:0000C0D2                 mov     eax, 0CCCCCCCCh
.text:0000C0D7                 mov     [ebp+var_10], eax
.text:0000C0DA                 mov     [ebp+var_C], eax
.text:0000C0DD                 mov     [ebp+var_8], eax
.text:0000C0E0                 mov     [ebp+var_4], eax
.text:0000C0E3                 mov     [ebp+var_4], ecx
.text:0000C0E6                 mov     eax, [ebp+var_4]
.text:0000C0E9                 mov     ecx, [eax]
.text:0000C0EB                 mov     [ebp+var_C], ecx
.text:0000C0EE                 mov     edx, [ebp+var_C]
.text:0000C0F1                 mov     [ebp+var_8], edx
.text:0000C0F4                 cmp     [ebp+var_8], 0
.text:0000C0F8                 jz      short loc_C109
.text:0000C0FA                 push    3
.text:0000C0FC                 mov     ecx, [ebp+var_8]
.text:0000C0FF                 call    ??_ECCoderInfo@N7z@NArchive@@QAEPAXI@Z ; NArchive::N7z::CCoderInfo::`vector deleting destructor'(uint)
.text:0000C104                 mov     [ebp+var_10], eax
.text:0000C107                 jmp     short loc_C110
.text:0000C109 ; ---------------------------------------------------------------------------
.text:0000C109
.text:0000C109 loc_C109:                               ; CODE XREF: CObjArray2<NArchive::N7z::CCoderInfo>::~CObjArray2<NArchive::N7z::CCoderInfo>(void)+2Cj
.text:0000C109                 mov     [ebp+var_10], 0
.text:0000C110
.text:0000C110 loc_C110:                               ; CODE XREF: CObjArray2<NArchive::N7z::CCoderInfo>::~CObjArray2<NArchive::N7z::CCoderInfo>(void)+3Bj
.text:0000C110                 add     esp, 10h
.text:0000C113                 cmp     ebp, esp
.text:0000C115                 call    __RTC_CheckEsp
.text:0000C11A                 mov     esp, ebp
.text:0000C11C                 pop     ebp
.text:0000C11D                 retn
.text:0000C11D ??1?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ endp
.text:0000C11D
.text:0000C11D ; ---------------------------------------------------------------------------
.text:0000C11E                 align 10h
.text:0000C11E _text           ends
.text:0000C11E
.text:0000C120 ; ===========================================================================
.text:0000C120
.text:0000C120 ; Segment type: Pure code
.text:0000C120 ; Segment permissions: Read/Execute
.text:0000C120 _text           segment para public 'CODE' use32
.text:0000C120                 assume cs:_text
.text:0000C120                 ;org 0C120h
.text:0000C120 ; COMDAT (pick any)
.text:0000C120                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000C120
.text:0000C120 ; =============== S U B R O U T I N E =======================================
.text:0000C120
.text:0000C120 ; Attributes: bp-based frame
.text:0000C120
.text:0000C120 ; public: __thiscall CObjArray2<struct NArchive::N7z::CCoderInfo>::operator struct NArchive::N7z::CCoderInfo const *(void)const
.text:0000C120                 public ??B?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEPBUCCoderInfo@N7z@NArchive@@XZ
.text:0000C120 ??B?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEPBUCCoderInfo@N7z@NArchive@@XZ proc near
.text:0000C120                                         ; CODE XREF: NArchive::N7z::Get_FilterGroup_for_Folder(CRecordVector<NArchive::N7z::CFilterMode2> &,NArchive::N7z::CFolderEx const &)+47p
.text:0000C120                                         ; NArchive::N7z::CFolder::IsEncrypted(void)+3Cp
.text:0000C120
.text:0000C120 var_4           = dword ptr -4
.text:0000C120
.text:0000C120                 push    ebp
.text:0000C121                 mov     ebp, esp
.text:0000C123                 push    ecx
.text:0000C124                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000C12B                 mov     [ebp+var_4], ecx
.text:0000C12E                 mov     eax, [ebp+var_4]
.text:0000C131                 mov     eax, [eax]
.text:0000C133                 mov     esp, ebp
.text:0000C135                 pop     ebp
.text:0000C136                 retn
.text:0000C136 ??B?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEPBUCCoderInfo@N7z@NArchive@@XZ endp
.text:0000C136
.text:0000C136 ; ---------------------------------------------------------------------------
.text:0000C137                 align 4
.text:0000C137 _text           ends
.text:0000C137
.text:0000C138 ; ===========================================================================
.text:0000C138
.text:0000C138 ; Segment type: Pure code
.text:0000C138 ; Segment permissions: Read/Execute
.text:0000C138 _text           segment para public 'CODE' use32
.text:0000C138                 assume cs:_text
.text:0000C138                 ;org 0C138h
.text:0000C138 ; COMDAT (pick any)
.text:0000C138                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000C138
.text:0000C138 ; =============== S U B R O U T I N E =======================================
.text:0000C138
.text:0000C138 ; Attributes: bp-based frame
.text:0000C138
.text:0000C138 ; public: unsigned int __thiscall CObjArray2<struct NArchive::N7z::CCoderInfo>::Size(void)const
.text:0000C138                 public ?Size@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEIXZ
.text:0000C138 ?Size@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEIXZ proc near
.text:0000C138                                         ; CODE XREF: NArchive::N7z::CFolder::IsEncrypted(void)+2Fp
.text:0000C138
.text:0000C138 var_4           = dword ptr -4
.text:0000C138
.text:0000C138                 push    ebp
.text:0000C139                 mov     ebp, esp
.text:0000C13B                 push    ecx
.text:0000C13C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000C143                 mov     [ebp+var_4], ecx
.text:0000C146                 mov     eax, [ebp+var_4]
.text:0000C149                 mov     eax, [eax+4]
.text:0000C14C                 mov     esp, ebp
.text:0000C14E                 pop     ebp
.text:0000C14F                 retn
.text:0000C14F ?Size@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEIXZ endp
.text:0000C14F
.text:0000C14F _text           ends
.text:0000C14F
.text:0000C150 ; ===========================================================================
.text:0000C150
.text:0000C150 ; Segment type: Pure code
.text:0000C150 ; Segment permissions: Read/Execute
.text:0000C150 _text           segment para public 'CODE' use32
.text:0000C150                 assume cs:_text
.text:0000C150                 ;org 0C150h
.text:0000C150 ; COMDAT (pick any)
.text:0000C150                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000C150
.text:0000C150 ; =============== S U B R O U T I N E =======================================
.text:0000C150
.text:0000C150 ; Attributes: bp-based frame
.text:0000C150
.text:0000C150 ; public: __thiscall CObjArray2<struct NArchive::N7z::CBond>::CObjArray2<struct NArchive::N7z::CBond>(void)
.text:0000C150                 public ??0?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ
.text:0000C150 ??0?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ proc near
.text:0000C150                                         ; CODE XREF: NArchive::N7z::CFolder::CFolder(void)+42p
.text:0000C150
.text:0000C150 var_4           = dword ptr -4
.text:0000C150
.text:0000C150                 push    ebp
.text:0000C151                 mov     ebp, esp
.text:0000C153                 push    ecx
.text:0000C154                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000C15B                 mov     [ebp+var_4], ecx
.text:0000C15E                 mov     eax, [ebp+var_4]
.text:0000C161                 mov     dword ptr [eax], 0
.text:0000C167                 mov     ecx, [ebp+var_4]
.text:0000C16A                 mov     dword ptr [ecx+4], 0
.text:0000C171                 mov     eax, [ebp+var_4]
.text:0000C174                 mov     esp, ebp
.text:0000C176                 pop     ebp
.text:0000C177                 retn
.text:0000C177 ??0?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ endp
.text:0000C177
.text:0000C177 _text           ends
.text:0000C177
.text:0000C178 ; ===========================================================================
.text:0000C178
.text:0000C178 ; Segment type: Pure code
.text:0000C178 ; Segment permissions: Read/Execute
.text:0000C178 _text           segment para public 'CODE' use32
.text:0000C178                 assume cs:_text
.text:0000C178                 ;org 0C178h
.text:0000C178 ; COMDAT (pick any)
.text:0000C178                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000C178
.text:0000C178 ; =============== S U B R O U T I N E =======================================
.text:0000C178
.text:0000C178 ; Attributes: bp-based frame
.text:0000C178
.text:0000C178 ; public: __thiscall CObjArray2<struct NArchive::N7z::CBond>::~CObjArray2<struct NArchive::N7z::CBond>(void)
.text:0000C178                 public ??1?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ
.text:0000C178 ??1?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ proc near
.text:0000C178                                         ; CODE XREF: __unwindfunclet$??0CFolder@N7z@NArchive@@QAE@XZ$1+6j
.text:0000C178                                         ; NArchive::N7z::CFolder::~CFolder(void)+49p ...
.text:0000C178
.text:0000C178 var_8           = dword ptr -8
.text:0000C178 var_4           = dword ptr -4
.text:0000C178
.text:0000C178                 push    ebp
.text:0000C179                 mov     ebp, esp
.text:0000C17B                 sub     esp, 8
.text:0000C17E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000C185                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000C18C                 mov     [ebp+var_4], ecx
.text:0000C18F                 mov     eax, [ebp+var_4]
.text:0000C192                 mov     ecx, [eax]
.text:0000C194                 mov     [ebp+var_8], ecx
.text:0000C197                 mov     edx, [ebp+var_8]
.text:0000C19A                 push    edx             ; void *
.text:0000C19B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000C1A0                 add     esp, 4
.text:0000C1A3                 add     esp, 8
.text:0000C1A6                 cmp     ebp, esp
.text:0000C1A8                 call    __RTC_CheckEsp
.text:0000C1AD                 mov     esp, ebp
.text:0000C1AF                 pop     ebp
.text:0000C1B0                 retn
.text:0000C1B0 ??1?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ endp
.text:0000C1B0
.text:0000C1B0 ; ---------------------------------------------------------------------------
.text:0000C1B1                 align 4
.text:0000C1B1 _text           ends
.text:0000C1B1
.text:0000C1B4 ; ===========================================================================
.text:0000C1B4
.text:0000C1B4 ; Segment type: Pure code
.text:0000C1B4 ; Segment permissions: Read/Execute
.text:0000C1B4 _text           segment para public 'CODE' use32
.text:0000C1B4                 assume cs:_text
.text:0000C1B4                 ;org 0C1B4h
.text:0000C1B4 ; COMDAT (pick any)
.text:0000C1B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000C1B4
.text:0000C1B4 ; =============== S U B R O U T I N E =======================================
.text:0000C1B4
.text:0000C1B4 ; Attributes: bp-based frame
.text:0000C1B4
.text:0000C1B4 ; public: __thiscall CObjArray2<unsigned int>::CObjArray2<unsigned int>(void)
.text:0000C1B4                 public ??0?$CObjArray2@I@@QAE@XZ
.text:0000C1B4 ??0?$CObjArray2@I@@QAE@XZ proc near     ; CODE XREF: NArchive::N7z::CFolder::CFolder(void)+51p
.text:0000C1B4
.text:0000C1B4 var_4           = dword ptr -4
.text:0000C1B4
.text:0000C1B4                 push    ebp
.text:0000C1B5                 mov     ebp, esp
.text:0000C1B7                 push    ecx
.text:0000C1B8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000C1BF                 mov     [ebp+var_4], ecx
.text:0000C1C2                 mov     eax, [ebp+var_4]
.text:0000C1C5                 mov     dword ptr [eax], 0
.text:0000C1CB                 mov     ecx, [ebp+var_4]
.text:0000C1CE                 mov     dword ptr [ecx+4], 0
.text:0000C1D5                 mov     eax, [ebp+var_4]
.text:0000C1D8                 mov     esp, ebp
.text:0000C1DA                 pop     ebp
.text:0000C1DB                 retn
.text:0000C1DB ??0?$CObjArray2@I@@QAE@XZ endp
.text:0000C1DB
.text:0000C1DB _text           ends
.text:0000C1DB
.text:0000C1DC ; ===========================================================================
.text:0000C1DC
.text:0000C1DC ; Segment type: Pure code
.text:0000C1DC ; Segment permissions: Read/Execute
.text:0000C1DC _text           segment para public 'CODE' use32
.text:0000C1DC                 assume cs:_text
.text:0000C1DC                 ;org 0C1DCh
.text:0000C1DC ; COMDAT (pick any)
.text:0000C1DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000C1DC
.text:0000C1DC ; =============== S U B R O U T I N E =======================================
.text:0000C1DC
.text:0000C1DC ; Attributes: bp-based frame
.text:0000C1DC
.text:0000C1DC ; public: __thiscall CObjArray2<unsigned int>::~CObjArray2<unsigned int>(void)
.text:0000C1DC                 public ??1?$CObjArray2@I@@QAE@XZ
.text:0000C1DC ??1?$CObjArray2@I@@QAE@XZ proc near     ; CODE XREF: NArchive::N7z::CFolder::~CFolder(void)+3Ap
.text:0000C1DC
.text:0000C1DC var_8           = dword ptr -8
.text:0000C1DC var_4           = dword ptr -4
.text:0000C1DC
.text:0000C1DC                 push    ebp
.text:0000C1DD                 mov     ebp, esp
.text:0000C1DF                 sub     esp, 8
.text:0000C1E2                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000C1E9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000C1F0                 mov     [ebp+var_4], ecx
.text:0000C1F3                 mov     eax, [ebp+var_4]
.text:0000C1F6                 mov     ecx, [eax]
.text:0000C1F8                 mov     [ebp+var_8], ecx
.text:0000C1FB                 mov     edx, [ebp+var_8]
.text:0000C1FE                 push    edx             ; void *
.text:0000C1FF                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000C204                 add     esp, 4
.text:0000C207                 add     esp, 8
.text:0000C20A                 cmp     ebp, esp
.text:0000C20C                 call    __RTC_CheckEsp
.text:0000C211                 mov     esp, ebp
.text:0000C213                 pop     ebp
.text:0000C214                 retn
.text:0000C214 ??1?$CObjArray2@I@@QAE@XZ endp
.text:0000C214
.text:0000C214 ; ---------------------------------------------------------------------------
.text:0000C215                 align 4
.text:0000C215 _text           ends
.text:0000C215
.text:0000C218 ; ===========================================================================
.text:0000C218
.text:0000C218 ; Segment type: Pure code
.text:0000C218 ; Segment permissions: Read/Execute
.text:0000C218 _text           segment para public 'CODE' use32
.text:0000C218                 assume cs:_text
.text:0000C218                 ;org 0C218h
.text:0000C218 ; COMDAT (pick any)
.text:0000C218                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000C218
.text:0000C218 ; =============== S U B R O U T I N E =======================================
.text:0000C218
.text:0000C218 ; Attributes: bp-based frame
.text:0000C218
.text:0000C218 ; public: unsigned int __thiscall CObjArray2<unsigned int>::Size(void)const
.text:0000C218                 public ?Size@?$CObjArray2@I@@QBEIXZ
.text:0000C218 ?Size@?$CObjArray2@I@@QBEIXZ proc near  ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1839p
.text:0000C218
.text:0000C218 var_4           = dword ptr -4
.text:0000C218
.text:0000C218                 push    ebp
.text:0000C219                 mov     ebp, esp
.text:0000C21B                 push    ecx
.text:0000C21C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000C223                 mov     [ebp+var_4], ecx
.text:0000C226                 mov     eax, [ebp+var_4]
.text:0000C229                 mov     eax, [eax+4]
.text:0000C22C                 mov     esp, ebp
.text:0000C22E                 pop     ebp
.text:0000C22F                 retn
.text:0000C22F ?Size@?$CObjArray2@I@@QBEIXZ endp
.text:0000C22F
.text:0000C22F _text           ends
.text:0000C22F
.text:0000C230 ; ===========================================================================
.text:0000C230
.text:0000C230 ; Segment type: Pure code
.text:0000C230 ; Segment permissions: Read/Execute
.text:0000C230 _text           segment para public 'CODE' use32
.text:0000C230                 assume cs:_text
.text:0000C230                 ;org 0C230h
.text:0000C230 ; COMDAT (pick any)
.text:0000C230                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000C230
.text:0000C230 ; =============== S U B R O U T I N E =======================================
.text:0000C230
.text:0000C230 ; Attributes: bp-based frame
.text:0000C230
.text:0000C230 ; public: __thiscall CObjArray<unsigned __int64>::operator unsigned __int64 const *(void)const
.text:0000C230                 public ??B?$CObjArray@_K@@QBEPB_KXZ
.text:0000C230 ??B?$CObjArray@_K@@QBEPB_KXZ proc near  ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+18C4p
.text:0000C230                                         ; NArchive::N7z::CFolders::GetStreamPackSize(uint)+16p ...
.text:0000C230
.text:0000C230 var_4           = dword ptr -4
.text:0000C230
.text:0000C230                 push    ebp
.text:0000C231                 mov     ebp, esp
.text:0000C233                 push    ecx
.text:0000C234                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000C23B                 mov     [ebp+var_4], ecx
.text:0000C23E                 mov     eax, [ebp+var_4]
.text:0000C241                 mov     eax, [eax]
.text:0000C243                 mov     esp, ebp
.text:0000C245                 pop     ebp
.text:0000C246                 retn
.text:0000C246 ??B?$CObjArray@_K@@QBEPB_KXZ endp
.text:0000C246
.text:0000C246 ; ---------------------------------------------------------------------------
.text:0000C247                 align 4
.text:0000C247 _text           ends
.text:0000C247
.text:0000C248 ; ===========================================================================
.text:0000C248
.text:0000C248 ; Segment type: Pure code
.text:0000C248 ; Segment permissions: Read/Execute
.text:0000C248 _text           segment para public 'CODE' use32
.text:0000C248                 assume cs:_text
.text:0000C248                 ;org 0C248h
.text:0000C248 ; COMDAT (pick any)
.text:0000C248                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000C248
.text:0000C248 ; =============== S U B R O U T I N E =======================================
.text:0000C248
.text:0000C248 ; Attributes: bp-based frame
.text:0000C248
.text:0000C248 ; public: __thiscall CObjArray<unsigned int>::CObjArray<unsigned int>(unsigned int)
.text:0000C248                 public ??0?$CObjArray@I@@QAE@I@Z
.text:0000C248 ??0?$CObjArray@I@@QAE@I@Z proc near     ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+30D2p
.text:0000C248
.text:0000C248 var_8           = dword ptr -8
.text:0000C248 var_4           = dword ptr -4
.text:0000C248 arg_0           = dword ptr  8
.text:0000C248
.text:0000C248                 push    ebp
.text:0000C249                 mov     ebp, esp
.text:0000C24B                 sub     esp, 8
.text:0000C24E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000C255                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000C25C                 mov     [ebp+var_4], ecx
.text:0000C25F                 mov     eax, [ebp+var_4]
.text:0000C262                 mov     dword ptr [eax], 0
.text:0000C268                 cmp     [ebp+arg_0], 0
.text:0000C26C                 jz      short loc_C295
.text:0000C26E                 xor     ecx, ecx
.text:0000C270                 mov     eax, [ebp+arg_0]
.text:0000C273                 mov     edx, 4
.text:0000C278                 mul     edx
.text:0000C27A                 seto    cl
.text:0000C27D                 neg     ecx
.text:0000C27F                 or      ecx, eax
.text:0000C281                 push    ecx             ; unsigned int
.text:0000C282                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000C287                 add     esp, 4
.text:0000C28A                 mov     [ebp+var_8], eax
.text:0000C28D                 mov     eax, [ebp+var_4]
.text:0000C290                 mov     ecx, [ebp+var_8]
.text:0000C293                 mov     [eax], ecx
.text:0000C295
.text:0000C295 loc_C295:                               ; CODE XREF: CObjArray<uint>::CObjArray<uint>(uint)+24j
.text:0000C295                 mov     eax, [ebp+var_4]
.text:0000C298                 add     esp, 8
.text:0000C29B                 cmp     ebp, esp
.text:0000C29D                 call    __RTC_CheckEsp
.text:0000C2A2                 mov     esp, ebp
.text:0000C2A4                 pop     ebp
.text:0000C2A5                 retn    4
.text:0000C2A5 ??0?$CObjArray@I@@QAE@I@Z endp
.text:0000C2A5
.text:0000C2A5 _text           ends
.text:0000C2A5
.text:0000C2A8 ; ===========================================================================
.text:0000C2A8
.text:0000C2A8 ; Segment type: Pure code
.text:0000C2A8 ; Segment permissions: Read/Execute
.text:0000C2A8 _text           segment para public 'CODE' use32
.text:0000C2A8                 assume cs:_text
.text:0000C2A8                 ;org 0C2A8h
.text:0000C2A8 ; COMDAT (pick any)
.text:0000C2A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000C2A8
.text:0000C2A8 ; =============== S U B R O U T I N E =======================================
.text:0000C2A8
.text:0000C2A8 ; Attributes: bp-based frame
.text:0000C2A8
.text:0000C2A8 ; public: __thiscall CObjArray<unsigned int>::~CObjArray<unsigned int>(void)
.text:0000C2A8                 public ??1?$CObjArray@I@@QAE@XZ
.text:0000C2A8 ??1?$CObjArray@I@@QAE@XZ proc near      ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+335Fp
.text:0000C2A8                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+354Ep ...
.text:0000C2A8
.text:0000C2A8 var_8           = dword ptr -8
.text:0000C2A8 var_4           = dword ptr -4
.text:0000C2A8
.text:0000C2A8                 push    ebp
.text:0000C2A9                 mov     ebp, esp
.text:0000C2AB                 sub     esp, 8
.text:0000C2AE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000C2B5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000C2BC                 mov     [ebp+var_4], ecx
.text:0000C2BF                 mov     eax, [ebp+var_4]
.text:0000C2C2                 mov     ecx, [eax]
.text:0000C2C4                 mov     [ebp+var_8], ecx
.text:0000C2C7                 mov     edx, [ebp+var_8]
.text:0000C2CA                 push    edx             ; void *
.text:0000C2CB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000C2D0                 add     esp, 4
.text:0000C2D3                 add     esp, 8
.text:0000C2D6                 cmp     ebp, esp
.text:0000C2D8                 call    __RTC_CheckEsp
.text:0000C2DD                 mov     esp, ebp
.text:0000C2DF                 pop     ebp
.text:0000C2E0                 retn
.text:0000C2E0 ??1?$CObjArray@I@@QAE@XZ endp
.text:0000C2E0
.text:0000C2E0 ; ---------------------------------------------------------------------------
.text:0000C2E1                 align 4
.text:0000C2E1 _text           ends
.text:0000C2E1
.text:0000C2E4 ; ===========================================================================
.text:0000C2E4
.text:0000C2E4 ; Segment type: Pure code
.text:0000C2E4 ; Segment permissions: Read/Execute
.text:0000C2E4 _text           segment para public 'CODE' use32
.text:0000C2E4                 assume cs:_text
.text:0000C2E4                 ;org 0C2E4h
.text:0000C2E4 ; COMDAT (pick any)
.text:0000C2E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000C2E4
.text:0000C2E4 ; =============== S U B R O U T I N E =======================================
.text:0000C2E4
.text:0000C2E4 ; Attributes: bp-based frame
.text:0000C2E4
.text:0000C2E4 ; public: __thiscall CObjArray<unsigned int>::operator unsigned int *(void)
.text:0000C2E4                 public ??B?$CObjArray@I@@QAEPAIXZ
.text:0000C2E4 ??B?$CObjArray@I@@QAEPAIXZ proc near    ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+3125p
.text:0000C2E4                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+31E2p ...
.text:0000C2E4
.text:0000C2E4 var_4           = dword ptr -4
.text:0000C2E4
.text:0000C2E4                 push    ebp
.text:0000C2E5                 mov     ebp, esp
.text:0000C2E7                 push    ecx
.text:0000C2E8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000C2EF                 mov     [ebp+var_4], ecx
.text:0000C2F2                 mov     eax, [ebp+var_4]
.text:0000C2F5                 mov     eax, [eax]
.text:0000C2F7                 mov     esp, ebp
.text:0000C2F9                 pop     ebp
.text:0000C2FA                 retn
.text:0000C2FA ??B?$CObjArray@I@@QAEPAIXZ endp
.text:0000C2FA
.text:0000C2FA ; ---------------------------------------------------------------------------
.text:0000C2FB                 align 4
.text:0000C2FB _text           ends
.text:0000C2FB
.text:0000C2FC ; ===========================================================================
.text:0000C2FC
.text:0000C2FC ; Segment type: Pure code
.text:0000C2FC ; Segment permissions: Read/Execute
.text:0000C2FC _text           segment para public 'CODE' use32
.text:0000C2FC                 assume cs:_text
.text:0000C2FC                 ;org 0C2FCh
.text:0000C2FC ; COMDAT (pick any)
.text:0000C2FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000C2FC
.text:0000C2FC ; =============== S U B R O U T I N E =======================================
.text:0000C2FC
.text:0000C2FC ; Attributes: bp-based frame
.text:0000C2FC
.text:0000C2FC ; public: __thiscall CObjArray<unsigned int>::operator unsigned int const *(void)const
.text:0000C2FC                 public ??B?$CObjArray@I@@QBEPBIXZ
.text:0000C2FC ??B?$CObjArray@I@@QBEPBIXZ proc near    ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+2D3p
.text:0000C2FC                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+304p ...
.text:0000C2FC
.text:0000C2FC var_4           = dword ptr -4
.text:0000C2FC
.text:0000C2FC                 push    ebp
.text:0000C2FD                 mov     ebp, esp
.text:0000C2FF                 push    ecx
.text:0000C300                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000C307                 mov     [ebp+var_4], ecx
.text:0000C30A                 mov     eax, [ebp+var_4]
.text:0000C30D                 mov     eax, [eax]
.text:0000C30F                 mov     esp, ebp
.text:0000C311                 pop     ebp
.text:0000C312                 retn
.text:0000C312 ??B?$CObjArray@I@@QBEPBIXZ endp
.text:0000C312
.text:0000C312 ; ---------------------------------------------------------------------------
.text:0000C313                 align 4
.text:0000C313 _text           ends
.text:0000C313
.text:0000C314 ; ===========================================================================
.text:0000C314
.text:0000C314 ; Segment type: Pure code
.text:0000C314 ; Segment permissions: Read/Execute
.text:0000C314 _text           segment para public 'CODE' use32
.text:0000C314                 assume cs:_text
.text:0000C314                 ;org 0C314h
.text:0000C314 ; COMDAT (pick any)
.text:0000C314                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000C314
.text:0000C314 ; =============== S U B R O U T I N E =======================================
.text:0000C314
.text:0000C314 ; Attributes: bp-based frame
.text:0000C314
.text:0000C314 ; public: __thiscall CObjArray<unsigned char>::operator unsigned char const *(void)const
.text:0000C314                 public ??B?$CObjArray@E@@QBEPBEXZ
.text:0000C314 ??B?$CObjArray@E@@QBEPBEXZ proc near    ; CODE XREF: NArchive::N7z::CFolders::ParseFolderEx(uint,NArchive::N7z::CFolderEx &)+24p
.text:0000C314
.text:0000C314 var_4           = dword ptr -4
.text:0000C314
.text:0000C314                 push    ebp
.text:0000C315                 mov     ebp, esp
.text:0000C317                 push    ecx
.text:0000C318                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000C31F                 mov     [ebp+var_4], ecx
.text:0000C322                 mov     eax, [ebp+var_4]
.text:0000C325                 mov     eax, [eax]
.text:0000C327                 mov     esp, ebp
.text:0000C329                 pop     ebp
.text:0000C32A                 retn
.text:0000C32A ??B?$CObjArray@E@@QBEPBEXZ endp
.text:0000C32A
.text:0000C32A ; ---------------------------------------------------------------------------
.text:0000C32B                 align 4
.text:0000C32B _text           ends
.text:0000C32B
.text:0000C32C ; ===========================================================================
.text:0000C32C
.text:0000C32C ; Segment type: Pure code
.text:0000C32C ; Segment permissions: Read/Execute
.text:0000C32C _text           segment para public 'CODE' use32
.text:0000C32C                 assume cs:_text
.text:0000C32C                 ;org 0C32Ch
.text:0000C32C ; COMDAT (pick any)
.text:0000C32C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000C32C
.text:0000C32C ; =============== S U B R O U T I N E =======================================
.text:0000C32C
.text:0000C32C ; Attributes: bp-based frame
.text:0000C32C
.text:0000C32C ; public: unsigned int __thiscall CRecordVector<struct NArchive::N7z::CFileItem>::Size(void)const
.text:0000C32C                 public ?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ
.text:0000C32C ?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ proc near
.text:0000C32C                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1D5p
.text:0000C32C                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+204p
.text:0000C32C
.text:0000C32C var_4           = dword ptr -4
.text:0000C32C
.text:0000C32C                 push    ebp
.text:0000C32D                 mov     ebp, esp
.text:0000C32F                 push    ecx
.text:0000C330                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000C337                 mov     [ebp+var_4], ecx
.text:0000C33A                 mov     eax, [ebp+var_4]
.text:0000C33D                 mov     eax, [eax+4]
.text:0000C340                 mov     esp, ebp
.text:0000C342                 pop     ebp
.text:0000C343                 retn
.text:0000C343 ?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ endp
.text:0000C343
.text:0000C343 _text           ends
.text:0000C343
.text:0000C344 ; ===========================================================================
.text:0000C344
.text:0000C344 ; Segment type: Pure code
.text:0000C344 ; Segment permissions: Read/Execute
.text:0000C344 _text           segment para public 'CODE' use32
.text:0000C344                 assume cs:_text
.text:0000C344                 ;org 0C344h
.text:0000C344 ; COMDAT (pick any)
.text:0000C344                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000C344
.text:0000C344 ; =============== S U B R O U T I N E =======================================
.text:0000C344
.text:0000C344 ; Attributes: bp-based frame
.text:0000C344
.text:0000C344 ; public: void __thiscall CRecordVector<struct NArchive::N7z::CFileItem>::ReserveDown(void)
.text:0000C344                 public ?ReserveDown@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXXZ
.text:0000C344 ?ReserveDown@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXXZ proc near
.text:0000C344                                         ; CODE XREF: NArchive::N7z::CArchiveDatabaseOut::ReserveDown(void)+3Dp
.text:0000C344
.text:0000C344 var_28          = dword ptr -28h
.text:0000C344 var_24          = dword ptr -24h
.text:0000C344 var_20          = dword ptr -20h
.text:0000C344 var_1C          = dword ptr -1Ch
.text:0000C344 var_18          = dword ptr -18h
.text:0000C344 Dst             = dword ptr -14h
.text:0000C344 var_10          = dword ptr -10h
.text:0000C344 var_C           = dword ptr -0Ch
.text:0000C344 var_4           = dword ptr -4
.text:0000C344
.text:0000C344                 push    ebp
.text:0000C345                 mov     ebp, esp
.text:0000C347                 push    0FFFFFFFFh
.text:0000C349                 push    offset __ehhandler$?ReserveDown@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXXZ
.text:0000C34E                 mov     eax, large fs:0
.text:0000C354                 push    eax
.text:0000C355                 sub     esp, 1Ch
.text:0000C358                 mov     eax, 0CCCCCCCCh
.text:0000C35D                 mov     [ebp+var_28], eax
.text:0000C360                 mov     [ebp+var_24], eax
.text:0000C363                 mov     [ebp+var_20], eax
.text:0000C366                 mov     [ebp+var_1C], eax
.text:0000C369                 mov     [ebp+var_18], eax
.text:0000C36C                 mov     [ebp+Dst], eax
.text:0000C36F                 mov     [ebp+var_10], eax
.text:0000C372                 mov     eax, dword ptr ds:___security_cookie
.text:0000C377                 xor     eax, ebp
.text:0000C379                 push    eax
.text:0000C37A                 lea     eax, [ebp+var_C]
.text:0000C37D                 mov     large fs:0, eax
.text:0000C383                 mov     [ebp+var_10], ecx
.text:0000C386                 mov     eax, [ebp+var_10]
.text:0000C389                 mov     ecx, [ebp+var_10]
.text:0000C38C                 mov     edx, [eax+4]
.text:0000C38F                 cmp     edx, [ecx+8]
.text:0000C392                 jnz     short loc_C399
.text:0000C394                 jmp     loc_C45C
.text:0000C399 ; ---------------------------------------------------------------------------
.text:0000C399
.text:0000C399 loc_C399:                               ; CODE XREF: CRecordVector<NArchive::N7z::CFileItem>::ReserveDown(void)+4Ej
.text:0000C399                 mov     [ebp+Dst], 0
.text:0000C3A0                 mov     eax, [ebp+var_10]
.text:0000C3A3                 cmp     dword ptr [eax+4], 0
.text:0000C3A7                 jz      loc_C434
.text:0000C3AD                 mov     ecx, [ebp+var_10]
.text:0000C3B0                 mov     edx, [ecx+4]
.text:0000C3B3                 mov     [ebp+var_18], edx
.text:0000C3B6                 xor     ecx, ecx
.text:0000C3B8                 mov     eax, [ebp+var_18]
.text:0000C3BB                 mov     edx, 18h
.text:0000C3C0                 mul     edx
.text:0000C3C2                 seto    cl
.text:0000C3C5                 neg     ecx
.text:0000C3C7                 or      ecx, eax
.text:0000C3C9                 push    ecx             ; unsigned int
.text:0000C3CA                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000C3CF                 add     esp, 4
.text:0000C3D2                 mov     [ebp+var_20], eax
.text:0000C3D5                 mov     [ebp+var_4], 0
.text:0000C3DC                 cmp     [ebp+var_20], 0
.text:0000C3E0                 jz      short loc_C3FE
.text:0000C3E2                 push    offset ??0CFileItem@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFileItem::CFileItem(void)
.text:0000C3E7                 mov     eax, [ebp+var_18]
.text:0000C3EA                 push    eax
.text:0000C3EB                 push    18h
.text:0000C3ED                 mov     ecx, [ebp+var_20]
.text:0000C3F0                 push    ecx
.text:0000C3F1                 call    ??_H@YGXPAXIHP6EPAX0@Z@Z ; `vector constructor iterator'(void *,uint,int,void * (*)(void *))
.text:0000C3F6                 mov     edx, [ebp+var_20]
.text:0000C3F9                 mov     [ebp+var_28], edx
.text:0000C3FC                 jmp     short loc_C405
.text:0000C3FE ; ---------------------------------------------------------------------------
.text:0000C3FE
.text:0000C3FE loc_C3FE:                               ; CODE XREF: CRecordVector<NArchive::N7z::CFileItem>::ReserveDown(void)+9Cj
.text:0000C3FE                 mov     [ebp+var_28], 0
.text:0000C405
.text:0000C405 loc_C405:                               ; CODE XREF: CRecordVector<NArchive::N7z::CFileItem>::ReserveDown(void)+B8j
.text:0000C405                 mov     eax, [ebp+var_28]
.text:0000C408                 mov     [ebp+var_1C], eax
.text:0000C40B                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000C412                 mov     ecx, [ebp+var_1C]
.text:0000C415                 mov     [ebp+Dst], ecx
.text:0000C418                 mov     edx, [ebp+var_10]
.text:0000C41B                 mov     eax, [edx+4]
.text:0000C41E                 imul    eax, 18h
.text:0000C421                 push    eax             ; Size
.text:0000C422                 mov     ecx, [ebp+var_10]
.text:0000C425                 mov     edx, [ecx]
.text:0000C427                 push    edx             ; Src
.text:0000C428                 mov     eax, [ebp+Dst]
.text:0000C42B                 push    eax             ; Dst
.text:0000C42C                 call    _memcpy
.text:0000C431                 add     esp, 0Ch
.text:0000C434
.text:0000C434 loc_C434:                               ; CODE XREF: CRecordVector<NArchive::N7z::CFileItem>::ReserveDown(void)+63j
.text:0000C434                 mov     ecx, [ebp+var_10]
.text:0000C437                 mov     edx, [ecx]
.text:0000C439                 mov     [ebp+var_24], edx
.text:0000C43C                 mov     eax, [ebp+var_24]
.text:0000C43F                 push    eax             ; void *
.text:0000C440                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000C445                 add     esp, 4
.text:0000C448                 mov     ecx, [ebp+var_10]
.text:0000C44B                 mov     edx, [ebp+Dst]
.text:0000C44E                 mov     [ecx], edx
.text:0000C450                 mov     eax, [ebp+var_10]
.text:0000C453                 mov     ecx, [ebp+var_10]
.text:0000C456                 mov     edx, [ecx+4]
.text:0000C459                 mov     [eax+8], edx
.text:0000C45C
.text:0000C45C loc_C45C:                               ; CODE XREF: CRecordVector<NArchive::N7z::CFileItem>::ReserveDown(void)+50j
.text:0000C45C                 mov     ecx, [ebp+var_C]
.text:0000C45F                 mov     large fs:0, ecx
.text:0000C466                 pop     ecx
.text:0000C467                 add     esp, 28h
.text:0000C46A                 cmp     ebp, esp
.text:0000C46C                 call    __RTC_CheckEsp
.text:0000C471                 mov     esp, ebp
.text:0000C473                 pop     ebp
.text:0000C474                 retn
.text:0000C474 ?ReserveDown@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXXZ endp
.text:0000C474
.text:0000C474 ; ---------------------------------------------------------------------------
.text:0000C475                 align 4
.text:0000C475 _text           ends
.text:0000C475
.text$x:0000C478 ; ===========================================================================
.text$x:0000C478
.text$x:0000C478 ; Segment type: Pure code
.text$x:0000C478 ; Segment permissions: Read/Execute
.text$x:0000C478 _text$x         segment para public 'CODE' use32
.text$x:0000C478                 assume cs:_text$x
.text$x:0000C478                 ;org 0C478h
.text$x:0000C478 ; COMDAT (pick associative to section at C344)
.text$x:0000C478                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000C478
.text$x:0000C478 ; =============== S U B R O U T I N E =======================================
.text$x:0000C478
.text$x:0000C478
.text$x:0000C478 __unwindfunclet$?ReserveDown@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXXZ$0 proc near
.text$x:0000C478                                         ; DATA XREF: .xdata$x:0000C4A4o
.text$x:0000C478                 mov     eax, [ebp-20h]
.text$x:0000C47B                 push    eax             ; void *
.text$x:0000C47C                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000C481                 pop     ecx
.text$x:0000C482                 retn
.text$x:0000C482 __unwindfunclet$?ReserveDown@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXXZ$0 endp
.text$x:0000C482
.text$x:0000C483
.text$x:0000C483 ; =============== S U B R O U T I N E =======================================
.text$x:0000C483
.text$x:0000C483
.text$x:0000C483 __ehhandler$?ReserveDown@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXXZ proc near
.text$x:0000C483                                         ; DATA XREF: CRecordVector<NArchive::N7z::CFileItem>::ReserveDown(void)+5o
.text$x:0000C483
.text$x:0000C483 arg_4           = dword ptr  8
.text$x:0000C483
.text$x:0000C483                 mov     edx, [esp+arg_4]
.text$x:0000C487                 lea     eax, [edx+0Ch]
.text$x:0000C48A                 mov     ecx, [edx-20h]
.text$x:0000C48D                 xor     ecx, eax
.text$x:0000C48F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000C494                 mov     eax, offset __ehfuncinfo$?ReserveDown@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXXZ
.text$x:0000C499                 jmp     ___CxxFrameHandler3
.text$x:0000C499 __ehhandler$?ReserveDown@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXXZ endp
.text$x:0000C499
.text$x:0000C499 ; ---------------------------------------------------------------------------
.text$x:0000C49E                 align 10h
.text$x:0000C49E _text$x         ends
.text$x:0000C49E
.xdata$x:0000C4A0 ; ===========================================================================
.xdata$x:0000C4A0
.xdata$x:0000C4A0 ; Segment type: Pure data
.xdata$x:0000C4A0 ; Segment permissions: Read
.xdata$x:0000C4A0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C4A0                 assume cs:_xdata$x
.xdata$x:0000C4A0                 ;org 0C4A0h
.xdata$x:0000C4A0 ; COMDAT (pick associative to section at C344)
.xdata$x:0000C4A0 __unwindtable$?ReserveDown@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXXZ db 0FFh
.xdata$x:0000C4A0                                         ; DATA XREF: .xdata$x:0000C4B0o
.xdata$x:0000C4A1                 db 0FFh
.xdata$x:0000C4A2                 db 0FFh
.xdata$x:0000C4A3                 db 0FFh
.xdata$x:0000C4A4                 dd offset __unwindfunclet$?ReserveDown@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXXZ$0
.xdata$x:0000C4A8 __ehfuncinfo$?ReserveDown@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXXZ db  22h ; "
.xdata$x:0000C4A8                                         ; DATA XREF: __ehhandler$?ReserveDown@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXXZ+11o
.xdata$x:0000C4A9                 db    5
.xdata$x:0000C4AA                 db  93h ; ô
.xdata$x:0000C4AB                 db  19h
.xdata$x:0000C4AC                 db    1
.xdata$x:0000C4AD                 db    0
.xdata$x:0000C4AE                 db    0
.xdata$x:0000C4AF                 db    0
.xdata$x:0000C4B0                 dd offset __unwindtable$?ReserveDown@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXXZ
.xdata$x:0000C4B4                 db    0
.xdata$x:0000C4B5                 db    0
.xdata$x:0000C4B6                 db    0
.xdata$x:0000C4B7                 db    0
.xdata$x:0000C4B8                 db    0
.xdata$x:0000C4B9                 db    0
.xdata$x:0000C4BA                 db    0
.xdata$x:0000C4BB                 db    0
.xdata$x:0000C4BC                 db    0
.xdata$x:0000C4BD                 db    0
.xdata$x:0000C4BE                 db    0
.xdata$x:0000C4BF                 db    0
.xdata$x:0000C4C0                 db    0
.xdata$x:0000C4C1                 db    0
.xdata$x:0000C4C2                 db    0
.xdata$x:0000C4C3                 db    0
.xdata$x:0000C4C4                 db    0
.xdata$x:0000C4C5                 db    0
.xdata$x:0000C4C6                 db    0
.xdata$x:0000C4C7                 db    0
.xdata$x:0000C4C8                 db    1
.xdata$x:0000C4C9                 db    0
.xdata$x:0000C4CA                 db    0
.xdata$x:0000C4CB                 db    0
.xdata$x:0000C4CB _xdata$x        ends
.xdata$x:0000C4CB
.text:0000C4CC ; ===========================================================================
.text:0000C4CC
.text:0000C4CC ; Segment type: Pure code
.text:0000C4CC ; Segment permissions: Read/Execute
.text:0000C4CC _text           segment para public 'CODE' use32
.text:0000C4CC                 assume cs:_text
.text:0000C4CC                 ;org 0C4CCh
.text:0000C4CC ; COMDAT (pick any)
.text:0000C4CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000C4CC
.text:0000C4CC ; =============== S U B R O U T I N E =======================================
.text:0000C4CC
.text:0000C4CC ; Attributes: bp-based frame
.text:0000C4CC
.text:0000C4CC ; public: struct NArchive::N7z::CFileItem const & __thiscall CRecordVector<struct NArchive::N7z::CFileItem>::operator[](unsigned int)const
.text:0000C4CC                 public ??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z
.text:0000C4CC ??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z proc near
.text:0000C4CC                                         ; CODE XREF: NArchive::N7z::CRepackInStreamWithSizes::GetSubStreamSize(unsigned __int64,unsigned __int64 *)+82p
.text:0000C4CC                                         ; NArchive::N7z::CRepackStreamBase::OpenFile(void)+3Dp ...
.text:0000C4CC
.text:0000C4CC var_4           = dword ptr -4
.text:0000C4CC arg_0           = dword ptr  8
.text:0000C4CC
.text:0000C4CC                 push    ebp
.text:0000C4CD                 mov     ebp, esp
.text:0000C4CF                 push    ecx
.text:0000C4D0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000C4D7                 mov     [ebp+var_4], ecx
.text:0000C4DA                 mov     eax, [ebp+arg_0]
.text:0000C4DD                 imul    eax, 18h
.text:0000C4E0                 mov     ecx, [ebp+var_4]
.text:0000C4E3                 add     eax, [ecx]
.text:0000C4E5                 mov     esp, ebp
.text:0000C4E7                 pop     ebp
.text:0000C4E8                 retn    4
.text:0000C4E8 ??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z endp
.text:0000C4E8
.text:0000C4E8 ; ---------------------------------------------------------------------------
.text:0000C4EB                 align 4
.text:0000C4EB _text           ends
.text:0000C4EB
.text:0000C4EC ; ===========================================================================
.text:0000C4EC
.text:0000C4EC ; Segment type: Pure code
.text:0000C4EC ; Segment permissions: Read/Execute
.text:0000C4EC _text           segment para public 'CODE' use32
.text:0000C4EC                 assume cs:_text
.text:0000C4EC                 ;org 0C4ECh
.text:0000C4EC ; COMDAT (pick any)
.text:0000C4EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000C4EC
.text:0000C4EC ; =============== S U B R O U T I N E =======================================
.text:0000C4EC
.text:0000C4EC ; Attributes: bp-based frame
.text:0000C4EC
.text:0000C4EC ; public: __thiscall CObjectVector<struct CProp>::CObjectVector<struct CProp>(void)
.text:0000C4EC                 public ??0?$CObjectVector@UCProp@@@@QAE@XZ
.text:0000C4EC ??0?$CObjectVector@UCProp@@@@QAE@XZ proc near
.text:0000C4EC                                         ; CODE XREF: CProps::CProps(void)+11p
.text:0000C4EC
.text:0000C4EC var_4           = dword ptr -4
.text:0000C4EC
.text:0000C4EC                 push    ebp
.text:0000C4ED                 mov     ebp, esp
.text:0000C4EF                 push    ecx
.text:0000C4F0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000C4F7                 mov     [ebp+var_4], ecx
.text:0000C4FA                 mov     ecx, [ebp+var_4]
.text:0000C4FD                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:0000C502                 mov     eax, [ebp+var_4]
.text:0000C505                 add     esp, 4
.text:0000C508                 cmp     ebp, esp
.text:0000C50A                 call    __RTC_CheckEsp
.text:0000C50F                 mov     esp, ebp
.text:0000C511                 pop     ebp
.text:0000C512                 retn
.text:0000C512 ??0?$CObjectVector@UCProp@@@@QAE@XZ endp
.text:0000C512
.text:0000C512 ; ---------------------------------------------------------------------------
.text:0000C513                 align 4
.text:0000C513 _text           ends
.text:0000C513
.text:0000C514 ; ===========================================================================
.text:0000C514
.text:0000C514 ; Segment type: Pure code
.text:0000C514 ; Segment permissions: Read/Execute
.text:0000C514 _text           segment para public 'CODE' use32
.text:0000C514                 assume cs:_text
.text:0000C514                 ;org 0C514h
.text:0000C514 ; COMDAT (pick any)
.text:0000C514                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000C514
.text:0000C514 ; =============== S U B R O U T I N E =======================================
.text:0000C514
.text:0000C514 ; Attributes: bp-based frame
.text:0000C514
.text:0000C514 ; public: __thiscall CObjectVector<struct CProp>::~CObjectVector<struct CProp>(void)
.text:0000C514                 public ??1?$CObjectVector@UCProp@@@@QAE@XZ
.text:0000C514 ??1?$CObjectVector@UCProp@@@@QAE@XZ proc near
.text:0000C514                                         ; CODE XREF: CProps::~CProps(void)+11p
.text:0000C514
.text:0000C514 var_20          = dword ptr -20h
.text:0000C514 var_1C          = dword ptr -1Ch
.text:0000C514 var_18          = dword ptr -18h
.text:0000C514 var_14          = dword ptr -14h
.text:0000C514 var_10          = dword ptr -10h
.text:0000C514 var_C           = dword ptr -0Ch
.text:0000C514 var_4           = dword ptr -4
.text:0000C514
.text:0000C514                 push    ebp
.text:0000C515                 mov     ebp, esp
.text:0000C517                 push    0FFFFFFFFh
.text:0000C519                 push    offset __ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ
.text:0000C51E                 mov     eax, large fs:0
.text:0000C524                 push    eax
.text:0000C525                 sub     esp, 14h
.text:0000C528                 mov     eax, 0CCCCCCCCh
.text:0000C52D                 mov     [ebp+var_20], eax
.text:0000C530                 mov     [ebp+var_1C], eax
.text:0000C533                 mov     [ebp+var_18], eax
.text:0000C536                 mov     [ebp+var_14], eax
.text:0000C539                 mov     [ebp+var_10], eax
.text:0000C53C                 mov     eax, dword ptr ds:___security_cookie
.text:0000C541                 xor     eax, ebp
.text:0000C543                 push    eax
.text:0000C544                 lea     eax, [ebp+var_C]
.text:0000C547                 mov     large fs:0, eax
.text:0000C54D                 mov     [ebp+var_10], ecx
.text:0000C550                 mov     [ebp+var_4], 0
.text:0000C557                 mov     ecx, [ebp+var_10]
.text:0000C55A                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:0000C55F                 mov     [ebp+var_14], eax
.text:0000C562
.text:0000C562 loc_C562:                               ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void):loc_C5A4j
.text:0000C562                 cmp     [ebp+var_14], 0
.text:0000C566                 jz      short loc_C5A6
.text:0000C568                 mov     eax, [ebp+var_14]
.text:0000C56B                 sub     eax, 1
.text:0000C56E                 mov     [ebp+var_14], eax
.text:0000C571                 mov     ecx, [ebp+var_14]
.text:0000C574                 push    ecx
.text:0000C575                 mov     ecx, [ebp+var_10]
.text:0000C578                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:0000C57D                 mov     edx, [eax]
.text:0000C57F                 mov     [ebp+var_1C], edx
.text:0000C582                 mov     eax, [ebp+var_1C]
.text:0000C585                 mov     [ebp+var_18], eax
.text:0000C588                 cmp     [ebp+var_18], 0
.text:0000C58C                 jz      short loc_C59D
.text:0000C58E                 push    1
.text:0000C590                 mov     ecx, [ebp+var_18]
.text:0000C593                 call    ??_GCProp@@QAEPAXI@Z ; CProp::`scalar deleting destructor'(uint)
.text:0000C598                 mov     [ebp+var_20], eax
.text:0000C59B                 jmp     short loc_C5A4
.text:0000C59D ; ---------------------------------------------------------------------------
.text:0000C59D
.text:0000C59D loc_C59D:                               ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+78j
.text:0000C59D                 mov     [ebp+var_20], 0
.text:0000C5A4
.text:0000C5A4 loc_C5A4:                               ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+87j
.text:0000C5A4                 jmp     short loc_C562
.text:0000C5A6 ; ---------------------------------------------------------------------------
.text:0000C5A6
.text:0000C5A6 loc_C5A6:                               ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+52j
.text:0000C5A6                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000C5AD                 mov     ecx, [ebp+var_10]
.text:0000C5B0                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:0000C5B5                 mov     ecx, [ebp+var_C]
.text:0000C5B8                 mov     large fs:0, ecx
.text:0000C5BF                 pop     ecx
.text:0000C5C0                 add     esp, 20h
.text:0000C5C3                 cmp     ebp, esp
.text:0000C5C5                 call    __RTC_CheckEsp
.text:0000C5CA                 mov     esp, ebp
.text:0000C5CC                 pop     ebp
.text:0000C5CD                 retn
.text:0000C5CD ??1?$CObjectVector@UCProp@@@@QAE@XZ endp
.text:0000C5CD
.text:0000C5CD ; ---------------------------------------------------------------------------
.text:0000C5CE                 align 10h
.text:0000C5CE _text           ends
.text:0000C5CE
.text$x:0000C5D0 ; ===========================================================================
.text$x:0000C5D0
.text$x:0000C5D0 ; Segment type: Pure code
.text$x:0000C5D0 ; Segment permissions: Read/Execute
.text$x:0000C5D0 _text$x         segment para public 'CODE' use32
.text$x:0000C5D0                 assume cs:_text$x
.text$x:0000C5D0                 ;org 0C5D0h
.text$x:0000C5D0 ; COMDAT (pick associative to section at C514)
.text$x:0000C5D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000C5D0
.text$x:0000C5D0 ; =============== S U B R O U T I N E =======================================
.text$x:0000C5D0
.text$x:0000C5D0
.text$x:0000C5D0 __unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0 proc near
.text$x:0000C5D0                                         ; DATA XREF: .xdata$x:0000C5F8o
.text$x:0000C5D0                 mov     ecx, [ebp-10h]
.text$x:0000C5D3                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:0000C5D3 __unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0 endp
.text$x:0000C5D3
.text$x:0000C5D8
.text$x:0000C5D8 ; =============== S U B R O U T I N E =======================================
.text$x:0000C5D8
.text$x:0000C5D8
.text$x:0000C5D8 __ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ proc near
.text$x:0000C5D8                                         ; DATA XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+5o
.text$x:0000C5D8
.text$x:0000C5D8 arg_4           = dword ptr  8
.text$x:0000C5D8
.text$x:0000C5D8                 mov     edx, [esp+arg_4]
.text$x:0000C5DC                 lea     eax, [edx+0Ch]
.text$x:0000C5DF                 mov     ecx, [edx-18h]
.text$x:0000C5E2                 xor     ecx, eax
.text$x:0000C5E4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000C5E9                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@UCProp@@@@QAE@XZ
.text$x:0000C5EE                 jmp     ___CxxFrameHandler3
.text$x:0000C5EE __ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ endp
.text$x:0000C5EE
.text$x:0000C5EE ; ---------------------------------------------------------------------------
.text$x:0000C5F3                 align 4
.text$x:0000C5F3 _text$x         ends
.text$x:0000C5F3
.xdata$x:0000C5F4 ; ===========================================================================
.xdata$x:0000C5F4
.xdata$x:0000C5F4 ; Segment type: Pure data
.xdata$x:0000C5F4 ; Segment permissions: Read
.xdata$x:0000C5F4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C5F4                 assume cs:_xdata$x
.xdata$x:0000C5F4                 ;org 0C5F4h
.xdata$x:0000C5F4 ; COMDAT (pick associative to section at C514)
.xdata$x:0000C5F4 __unwindtable$??1?$CObjectVector@UCProp@@@@QAE@XZ db 0FFh
.xdata$x:0000C5F4                                         ; DATA XREF: .xdata$x:0000C604o
.xdata$x:0000C5F5                 db 0FFh
.xdata$x:0000C5F6                 db 0FFh
.xdata$x:0000C5F7                 db 0FFh
.xdata$x:0000C5F8                 dd offset __unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0
.xdata$x:0000C5FC __ehfuncinfo$??1?$CObjectVector@UCProp@@@@QAE@XZ db  22h ; "
.xdata$x:0000C5FC                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ+11o
.xdata$x:0000C5FD                 db    5
.xdata$x:0000C5FE                 db  93h ; ô
.xdata$x:0000C5FF                 db  19h
.xdata$x:0000C600                 db    1
.xdata$x:0000C601                 db    0
.xdata$x:0000C602                 db    0
.xdata$x:0000C603                 db    0
.xdata$x:0000C604                 dd offset __unwindtable$??1?$CObjectVector@UCProp@@@@QAE@XZ
.xdata$x:0000C608                 db    0
.xdata$x:0000C609                 db    0
.xdata$x:0000C60A                 db    0
.xdata$x:0000C60B                 db    0
.xdata$x:0000C60C                 db    0
.xdata$x:0000C60D                 db    0
.xdata$x:0000C60E                 db    0
.xdata$x:0000C60F                 db    0
.xdata$x:0000C610                 db    0
.xdata$x:0000C611                 db    0
.xdata$x:0000C612                 db    0
.xdata$x:0000C613                 db    0
.xdata$x:0000C614                 db    0
.xdata$x:0000C615                 db    0
.xdata$x:0000C616                 db    0
.xdata$x:0000C617                 db    0
.xdata$x:0000C618                 db    0
.xdata$x:0000C619                 db    0
.xdata$x:0000C61A                 db    0
.xdata$x:0000C61B                 db    0
.xdata$x:0000C61C                 db    1
.xdata$x:0000C61D                 db    0
.xdata$x:0000C61E                 db    0
.xdata$x:0000C61F                 db    0
.xdata$x:0000C61F _xdata$x        ends
.xdata$x:0000C61F
.text:0000C620 ; ===========================================================================
.text:0000C620
.text:0000C620 ; Segment type: Pure code
.text:0000C620 ; Segment permissions: Read/Execute
.text:0000C620 _text           segment para public 'CODE' use32
.text:0000C620                 assume cs:_text
.text:0000C620                 ;org 0C620h
.text:0000C620 ; COMDAT (pick any)
.text:0000C620                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000C620
.text:0000C620 ; =============== S U B R O U T I N E =======================================
.text:0000C620
.text:0000C620 ; Attributes: bp-based frame
.text:0000C620
.text:0000C620 ; public: unsigned int __thiscall CObjectVector<struct NArchive::N7z::CMethodFull>::Size(void)const
.text:0000C620                 public ?Size@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBEIXZ
.text:0000C620 ?Size@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBEIXZ proc near
.text:0000C620                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+987p
.text:0000C620                                         ; NArchive::N7z::MakeExeMethod(NArchive::N7z::CCompressionMethodMode &,NArchive::N7z::CFilterMode const &,bool)+219p ...
.text:0000C620
.text:0000C620 var_4           = dword ptr -4
.text:0000C620
.text:0000C620                 push    ebp
.text:0000C621                 mov     ebp, esp
.text:0000C623                 push    ecx
.text:0000C624                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000C62B                 mov     [ebp+var_4], ecx
.text:0000C62E                 mov     ecx, [ebp+var_4]
.text:0000C631                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:0000C636                 add     esp, 4
.text:0000C639                 cmp     ebp, esp
.text:0000C63B                 call    __RTC_CheckEsp
.text:0000C640                 mov     esp, ebp
.text:0000C642                 pop     ebp
.text:0000C643                 retn
.text:0000C643 ?Size@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBEIXZ endp
.text:0000C643
.text:0000C643 _text           ends
.text:0000C643
.text:0000C644 ; ===========================================================================
.text:0000C644
.text:0000C644 ; Segment type: Pure code
.text:0000C644 ; Segment permissions: Read/Execute
.text:0000C644 _text           segment para public 'CODE' use32
.text:0000C644                 assume cs:_text
.text:0000C644                 ;org 0C644h
.text:0000C644 ; COMDAT (pick any)
.text:0000C644                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000C644
.text:0000C644 ; =============== S U B R O U T I N E =======================================
.text:0000C644
.text:0000C644 ; Attributes: bp-based frame
.text:0000C644
.text:0000C644 ; public: __thiscall CObjectVector<struct NArchive::N7z::CMethodFull>::CObjectVector<struct NArchive::N7z::CMethodFull>(class CObjectVector<struct NArchive::N7z::CMethodFull> const &)
.text:0000C644                 public ??0?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@ABV0@@Z
.text:0000C644 ??0?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@ABV0@@Z proc near
.text:0000C644                                         ; CODE XREF: NArchive::N7z::CCompressionMethodMode::CCompressionMethodMode(NArchive::N7z::CCompressionMethodMode const &)+34p
.text:0000C644
.text:0000C644 var_24          = dword ptr -24h
.text:0000C644 var_20          = dword ptr -20h
.text:0000C644 var_1C          = dword ptr -1Ch
.text:0000C644 var_18          = dword ptr -18h
.text:0000C644 var_14          = dword ptr -14h
.text:0000C644 var_10          = dword ptr -10h
.text:0000C644 var_C           = dword ptr -0Ch
.text:0000C644 var_4           = dword ptr -4
.text:0000C644 arg_0           = dword ptr  8
.text:0000C644
.text:0000C644                 push    ebp
.text:0000C645                 mov     ebp, esp
.text:0000C647                 push    0FFFFFFFFh
.text:0000C649                 push    offset __ehhandler$??0?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@ABV0@@Z
.text:0000C64E                 mov     eax, large fs:0
.text:0000C654                 push    eax
.text:0000C655                 sub     esp, 18h
.text:0000C658                 mov     eax, 0CCCCCCCCh
.text:0000C65D                 mov     [ebp+var_24], eax
.text:0000C660                 mov     [ebp+var_20], eax
.text:0000C663                 mov     [ebp+var_1C], eax
.text:0000C666                 mov     [ebp+var_18], eax
.text:0000C669                 mov     [ebp+var_14], eax
.text:0000C66C                 mov     [ebp+var_10], eax
.text:0000C66F                 mov     eax, dword ptr ds:___security_cookie
.text:0000C674                 xor     eax, ebp
.text:0000C676                 push    eax
.text:0000C677                 lea     eax, [ebp+var_C]
.text:0000C67A                 mov     large fs:0, eax
.text:0000C680                 mov     [ebp+var_10], ecx
.text:0000C683                 mov     ecx, [ebp+var_10]
.text:0000C686                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:0000C68B                 mov     [ebp+var_4], 0
.text:0000C692                 mov     ecx, [ebp+arg_0]
.text:0000C695                 call    ?Size@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::N7z::CMethodFull>::Size(void)
.text:0000C69A                 mov     [ebp+var_14], eax
.text:0000C69D                 mov     eax, [ebp+var_14]
.text:0000C6A0                 push    eax
.text:0000C6A1                 mov     ecx, [ebp+var_10]
.text:0000C6A4                 call    ?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z ; CRecordVector<void *>::ConstructReserve(uint)
.text:0000C6A9                 mov     [ebp+var_18], 0
.text:0000C6B0                 jmp     short loc_C6BB
.text:0000C6B2 ; ---------------------------------------------------------------------------
.text:0000C6B2
.text:0000C6B2 loc_C6B2:                               ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::CObjectVector<NArchive::N7z::CMethodFull>(CObjectVector<NArchive::N7z::CMethodFull> const &)+CDj
.text:0000C6B2                 mov     ecx, [ebp+var_18]
.text:0000C6B5                 add     ecx, 1
.text:0000C6B8                 mov     [ebp+var_18], ecx
.text:0000C6BB
.text:0000C6BB loc_C6BB:                               ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::CObjectVector<NArchive::N7z::CMethodFull>(CObjectVector<NArchive::N7z::CMethodFull> const &)+6Cj
.text:0000C6BB                 mov     edx, [ebp+var_18]
.text:0000C6BE                 cmp     edx, [ebp+var_14]
.text:0000C6C1                 jnb     short loc_C713
.text:0000C6C3                 push    20h ; ' '       ; unsigned int
.text:0000C6C5                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000C6CA                 add     esp, 4
.text:0000C6CD                 mov     [ebp+var_20], eax
.text:0000C6D0                 mov     byte ptr [ebp+var_4], 1
.text:0000C6D4                 cmp     [ebp+var_20], 0
.text:0000C6D8                 jz      short loc_C6F4
.text:0000C6DA                 mov     eax, [ebp+var_18]
.text:0000C6DD                 push    eax
.text:0000C6DE                 mov     ecx, [ebp+arg_0]
.text:0000C6E1                 call    ??A?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBEABUCMethodFull@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CMethodFull>::operator[](uint)
.text:0000C6E6                 push    eax             ; struct NArchive::N7z::CMethodFull *
.text:0000C6E7                 mov     ecx, [ebp+var_20] ; this
.text:0000C6EA                 call    ??0CMethodFull@N7z@NArchive@@QAE@ABU012@@Z ; NArchive::N7z::CMethodFull::CMethodFull(NArchive::N7z::CMethodFull const &)
.text:0000C6EF                 mov     [ebp+var_24], eax
.text:0000C6F2                 jmp     short loc_C6FB
.text:0000C6F4 ; ---------------------------------------------------------------------------
.text:0000C6F4
.text:0000C6F4 loc_C6F4:                               ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::CObjectVector<NArchive::N7z::CMethodFull>(CObjectVector<NArchive::N7z::CMethodFull> const &)+94j
.text:0000C6F4                 mov     [ebp+var_24], 0
.text:0000C6FB
.text:0000C6FB loc_C6FB:                               ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::CObjectVector<NArchive::N7z::CMethodFull>(CObjectVector<NArchive::N7z::CMethodFull> const &)+AEj
.text:0000C6FB                 mov     ecx, [ebp+var_24]
.text:0000C6FE                 mov     [ebp+var_1C], ecx
.text:0000C701                 mov     byte ptr [ebp+var_4], 0
.text:0000C705                 mov     edx, [ebp+var_1C]
.text:0000C708                 push    edx
.text:0000C709                 mov     ecx, [ebp+var_10]
.text:0000C70C                 call    ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ; CRecordVector<void *>::AddInReserved(void * const)
.text:0000C711                 jmp     short loc_C6B2
.text:0000C713 ; ---------------------------------------------------------------------------
.text:0000C713
.text:0000C713 loc_C713:                               ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::CObjectVector<NArchive::N7z::CMethodFull>(CObjectVector<NArchive::N7z::CMethodFull> const &)+7Dj
.text:0000C713                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000C71A                 mov     eax, [ebp+var_10]
.text:0000C71D                 mov     ecx, [ebp+var_C]
.text:0000C720                 mov     large fs:0, ecx
.text:0000C727                 pop     ecx
.text:0000C728                 add     esp, 24h
.text:0000C72B                 cmp     ebp, esp
.text:0000C72D                 call    __RTC_CheckEsp
.text:0000C732                 mov     esp, ebp
.text:0000C734                 pop     ebp
.text:0000C735                 retn    4
.text:0000C735 ??0?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@ABV0@@Z endp
.text:0000C735
.text:0000C735 _text           ends
.text:0000C735
.text$x:0000C738 ; ===========================================================================
.text$x:0000C738
.text$x:0000C738 ; Segment type: Pure code
.text$x:0000C738 ; Segment permissions: Read/Execute
.text$x:0000C738 _text$x         segment para public 'CODE' use32
.text$x:0000C738                 assume cs:_text$x
.text$x:0000C738                 ;org 0C738h
.text$x:0000C738 ; COMDAT (pick associative to section at C644)
.text$x:0000C738                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000C738
.text$x:0000C738 ; =============== S U B R O U T I N E =======================================
.text$x:0000C738
.text$x:0000C738
.text$x:0000C738 __unwindfunclet$??0?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@ABV0@@Z$0 proc near
.text$x:0000C738                                         ; DATA XREF: .xdata$x:0000C76Co
.text$x:0000C738                 mov     ecx, [ebp-10h]
.text$x:0000C73B                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:0000C73B __unwindfunclet$??0?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@ABV0@@Z$0 endp
.text$x:0000C73B
.text$x:0000C740
.text$x:0000C740 ; =============== S U B R O U T I N E =======================================
.text$x:0000C740
.text$x:0000C740
.text$x:0000C740 __unwindfunclet$??0?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@ABV0@@Z$1 proc near
.text$x:0000C740                                         ; DATA XREF: .xdata$x:0000C774o
.text$x:0000C740                 mov     eax, [ebp-20h]
.text$x:0000C743                 push    eax             ; void *
.text$x:0000C744                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000C749                 pop     ecx
.text$x:0000C74A                 retn
.text$x:0000C74A __unwindfunclet$??0?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@ABV0@@Z$1 endp
.text$x:0000C74A
.text$x:0000C74B
.text$x:0000C74B ; =============== S U B R O U T I N E =======================================
.text$x:0000C74B
.text$x:0000C74B
.text$x:0000C74B __ehhandler$??0?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@ABV0@@Z proc near
.text$x:0000C74B                                         ; DATA XREF: CObjectVector<NArchive::N7z::CMethodFull>::CObjectVector<NArchive::N7z::CMethodFull>(CObjectVector<NArchive::N7z::CMethodFull> const &)+5o
.text$x:0000C74B
.text$x:0000C74B arg_4           = dword ptr  8
.text$x:0000C74B
.text$x:0000C74B                 mov     edx, [esp+arg_4]
.text$x:0000C74F                 lea     eax, [edx+0Ch]
.text$x:0000C752                 mov     ecx, [edx-1Ch]
.text$x:0000C755                 xor     ecx, eax
.text$x:0000C757                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000C75C                 mov     eax, offset __ehfuncinfo$??0?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@ABV0@@Z
.text$x:0000C761                 jmp     ___CxxFrameHandler3
.text$x:0000C761 __ehhandler$??0?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@ABV0@@Z endp
.text$x:0000C761
.text$x:0000C761 ; ---------------------------------------------------------------------------
.text$x:0000C766                 align 4
.text$x:0000C766 _text$x         ends
.text$x:0000C766
.xdata$x:0000C768 ; ===========================================================================
.xdata$x:0000C768
.xdata$x:0000C768 ; Segment type: Pure data
.xdata$x:0000C768 ; Segment permissions: Read
.xdata$x:0000C768 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C768                 assume cs:_xdata$x
.xdata$x:0000C768                 ;org 0C768h
.xdata$x:0000C768 ; COMDAT (pick associative to section at C644)
.xdata$x:0000C768 __unwindtable$??0?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@ABV0@@Z db 0FFh
.xdata$x:0000C768                                         ; DATA XREF: .xdata$x:0000C780o
.xdata$x:0000C769                 db 0FFh
.xdata$x:0000C76A                 db 0FFh
.xdata$x:0000C76B                 db 0FFh
.xdata$x:0000C76C                 dd offset __unwindfunclet$??0?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@ABV0@@Z$0
.xdata$x:0000C770                 db    0
.xdata$x:0000C771                 db    0
.xdata$x:0000C772                 db    0
.xdata$x:0000C773                 db    0
.xdata$x:0000C774                 dd offset __unwindfunclet$??0?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@ABV0@@Z$1
.xdata$x:0000C778 __ehfuncinfo$??0?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@ABV0@@Z db  22h ; "
.xdata$x:0000C778                                         ; DATA XREF: __ehhandler$??0?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@ABV0@@Z+11o
.xdata$x:0000C779                 db    5
.xdata$x:0000C77A                 db  93h ; ô
.xdata$x:0000C77B                 db  19h
.xdata$x:0000C77C                 db    2
.xdata$x:0000C77D                 db    0
.xdata$x:0000C77E                 db    0
.xdata$x:0000C77F                 db    0
.xdata$x:0000C780                 dd offset __unwindtable$??0?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@ABV0@@Z
.xdata$x:0000C784                 db    0
.xdata$x:0000C785                 db    0
.xdata$x:0000C786                 db    0
.xdata$x:0000C787                 db    0
.xdata$x:0000C788                 db    0
.xdata$x:0000C789                 db    0
.xdata$x:0000C78A                 db    0
.xdata$x:0000C78B                 db    0
.xdata$x:0000C78C                 db    0
.xdata$x:0000C78D                 db    0
.xdata$x:0000C78E                 db    0
.xdata$x:0000C78F                 db    0
.xdata$x:0000C790                 db    0
.xdata$x:0000C791                 db    0
.xdata$x:0000C792                 db    0
.xdata$x:0000C793                 db    0
.xdata$x:0000C794                 db    0
.xdata$x:0000C795                 db    0
.xdata$x:0000C796                 db    0
.xdata$x:0000C797                 db    0
.xdata$x:0000C798                 db    1
.xdata$x:0000C799                 db    0
.xdata$x:0000C79A                 db    0
.xdata$x:0000C79B                 db    0
.xdata$x:0000C79B _xdata$x        ends
.xdata$x:0000C79B
.text:0000C79C ; ===========================================================================
.text:0000C79C
.text:0000C79C ; Segment type: Pure code
.text:0000C79C ; Segment permissions: Read/Execute
.text:0000C79C _text           segment para public 'CODE' use32
.text:0000C79C                 assume cs:_text
.text:0000C79C                 ;org 0C79Ch
.text:0000C79C ; COMDAT (pick any)
.text:0000C79C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000C79C
.text:0000C79C ; =============== S U B R O U T I N E =======================================
.text:0000C79C
.text:0000C79C ; Attributes: bp-based frame
.text:0000C79C
.text:0000C79C ; public: struct NArchive::N7z::CMethodFull const & __thiscall CObjectVector<struct NArchive::N7z::CMethodFull>::operator[](unsigned int)const
.text:0000C79C                 public ??A?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBEABUCMethodFull@N7z@NArchive@@I@Z
.text:0000C79C ??A?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBEABUCMethodFull@N7z@NArchive@@I@Z proc near
.text:0000C79C                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+9A1p
.text:0000C79C                                         ; CObjectVector<NArchive::N7z::CMethodFull>::CObjectVector<NArchive::N7z::CMethodFull>(CObjectVector<NArchive::N7z::CMethodFull> const &)+9Dp
.text:0000C79C
.text:0000C79C var_4           = dword ptr -4
.text:0000C79C arg_0           = dword ptr  8
.text:0000C79C
.text:0000C79C                 push    ebp
.text:0000C79D                 mov     ebp, esp
.text:0000C79F                 push    ecx
.text:0000C7A0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000C7A7                 mov     [ebp+var_4], ecx
.text:0000C7AA                 mov     eax, [ebp+arg_0]
.text:0000C7AD                 push    eax
.text:0000C7AE                 mov     ecx, [ebp+var_4]
.text:0000C7B1                 call    ??A?$CRecordVector@PAX@@QBEABQAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:0000C7B6                 mov     eax, [eax]
.text:0000C7B8                 add     esp, 4
.text:0000C7BB                 cmp     ebp, esp
.text:0000C7BD                 call    __RTC_CheckEsp
.text:0000C7C2                 mov     esp, ebp
.text:0000C7C4                 pop     ebp
.text:0000C7C5                 retn    4
.text:0000C7C5 ??A?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBEABUCMethodFull@N7z@NArchive@@I@Z endp
.text:0000C7C5
.text:0000C7C5 _text           ends
.text:0000C7C5
.text:0000C7C8 ; ===========================================================================
.text:0000C7C8
.text:0000C7C8 ; Segment type: Pure code
.text:0000C7C8 ; Segment permissions: Read/Execute
.text:0000C7C8 _text           segment para public 'CODE' use32
.text:0000C7C8                 assume cs:_text
.text:0000C7C8                 ;org 0C7C8h
.text:0000C7C8 ; COMDAT (pick any)
.text:0000C7C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000C7C8
.text:0000C7C8 ; =============== S U B R O U T I N E =======================================
.text:0000C7C8
.text:0000C7C8 ; Attributes: bp-based frame
.text:0000C7C8
.text:0000C7C8 ; public: struct NArchive::N7z::CMethodFull & __thiscall CObjectVector<struct NArchive::N7z::CMethodFull>::operator[](unsigned int)
.text:0000C7C8                 public ??A?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@I@Z
.text:0000C7C8 ??A?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@I@Z proc near
.text:0000C7C8                                         ; CODE XREF: NArchive::N7z::MakeExeMethod(NArchive::N7z::CCompressionMethodMode &,NArchive::N7z::CFilterMode const &,bool)+26p
.text:0000C7C8                                         ; NArchive::N7z::MakeExeMethod(NArchive::N7z::CCompressionMethodMode &,NArchive::N7z::CFilterMode const &,bool)+22Ep
.text:0000C7C8
.text:0000C7C8 var_4           = dword ptr -4
.text:0000C7C8 arg_0           = dword ptr  8
.text:0000C7C8
.text:0000C7C8                 push    ebp
.text:0000C7C9                 mov     ebp, esp
.text:0000C7CB                 push    ecx
.text:0000C7CC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000C7D3                 mov     [ebp+var_4], ecx
.text:0000C7D6                 mov     eax, [ebp+arg_0]
.text:0000C7D9                 push    eax
.text:0000C7DA                 mov     ecx, [ebp+var_4]
.text:0000C7DD                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:0000C7E2                 mov     eax, [eax]
.text:0000C7E4                 add     esp, 4
.text:0000C7E7                 cmp     ebp, esp
.text:0000C7E9                 call    __RTC_CheckEsp
.text:0000C7EE                 mov     esp, ebp
.text:0000C7F0                 pop     ebp
.text:0000C7F1                 retn    4
.text:0000C7F1 ??A?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@I@Z endp
.text:0000C7F1
.text:0000C7F1 _text           ends
.text:0000C7F1
.text:0000C7F4 ; ===========================================================================
.text:0000C7F4
.text:0000C7F4 ; Segment type: Pure code
.text:0000C7F4 ; Segment permissions: Read/Execute
.text:0000C7F4 _text           segment para public 'CODE' use32
.text:0000C7F4                 assume cs:_text
.text:0000C7F4                 ;org 0C7F4h
.text:0000C7F4 ; COMDAT (pick any)
.text:0000C7F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000C7F4
.text:0000C7F4 ; =============== S U B R O U T I N E =======================================
.text:0000C7F4
.text:0000C7F4 ; Attributes: bp-based frame
.text:0000C7F4
.text:0000C7F4 ; int __stdcall CObjectVector<NArchive::N7z::CMethodFull>::Add(struct NArchive::N7z::CMethodFull *)
.text:0000C7F4                 public ?Add@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEIABUCMethodFull@N7z@NArchive@@@Z
.text:0000C7F4 ?Add@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEIABUCMethodFull@N7z@NArchive@@@Z proc near
.text:0000C7F4                                         ; CODE XREF: NArchive::N7z::AddBcj2Methods(NArchive::N7z::CCompressionMethodMode &)+11Dp
.text:0000C7F4                                         ; NArchive::N7z::AddBcj2Methods(NArchive::N7z::CCompressionMethodMode &)+129p
.text:0000C7F4
.text:0000C7F4 var_1C          = dword ptr -1Ch
.text:0000C7F4 var_18          = dword ptr -18h
.text:0000C7F4 var_14          = dword ptr -14h
.text:0000C7F4 var_10          = dword ptr -10h
.text:0000C7F4 var_C           = dword ptr -0Ch
.text:0000C7F4 var_4           = dword ptr -4
.text:0000C7F4 arg_0           = dword ptr  8
.text:0000C7F4
.text:0000C7F4                 push    ebp
.text:0000C7F5                 mov     ebp, esp
.text:0000C7F7                 push    0FFFFFFFFh
.text:0000C7F9                 push    offset __ehhandler$?Add@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEIABUCMethodFull@N7z@NArchive@@@Z
.text:0000C7FE                 mov     eax, large fs:0
.text:0000C804                 push    eax
.text:0000C805                 sub     esp, 10h
.text:0000C808                 mov     eax, 0CCCCCCCCh
.text:0000C80D                 mov     [ebp+var_1C], eax
.text:0000C810                 mov     [ebp+var_18], eax
.text:0000C813                 mov     [ebp+var_14], eax
.text:0000C816                 mov     [ebp+var_10], eax
.text:0000C819                 mov     eax, dword ptr ds:___security_cookie
.text:0000C81E                 xor     eax, ebp
.text:0000C820                 push    eax
.text:0000C821                 lea     eax, [ebp+var_C]
.text:0000C824                 mov     large fs:0, eax
.text:0000C82A                 mov     [ebp+var_10], ecx
.text:0000C82D                 push    20h ; ' '       ; unsigned int
.text:0000C82F                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000C834                 add     esp, 4
.text:0000C837                 mov     [ebp+var_18], eax
.text:0000C83A                 mov     [ebp+var_4], 0
.text:0000C841                 cmp     [ebp+var_18], 0
.text:0000C845                 jz      short loc_C858
.text:0000C847                 mov     eax, [ebp+arg_0]
.text:0000C84A                 push    eax             ; struct NArchive::N7z::CMethodFull *
.text:0000C84B                 mov     ecx, [ebp+var_18] ; this
.text:0000C84E                 call    ??0CMethodFull@N7z@NArchive@@QAE@ABU012@@Z ; NArchive::N7z::CMethodFull::CMethodFull(NArchive::N7z::CMethodFull const &)
.text:0000C853                 mov     [ebp+var_1C], eax
.text:0000C856                 jmp     short loc_C85F
.text:0000C858 ; ---------------------------------------------------------------------------
.text:0000C858
.text:0000C858 loc_C858:                               ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::Add(NArchive::N7z::CMethodFull const &)+51j
.text:0000C858                 mov     [ebp+var_1C], 0
.text:0000C85F
.text:0000C85F loc_C85F:                               ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::Add(NArchive::N7z::CMethodFull const &)+62j
.text:0000C85F                 mov     ecx, [ebp+var_1C]
.text:0000C862                 mov     [ebp+var_14], ecx
.text:0000C865                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000C86C                 mov     edx, [ebp+var_14]
.text:0000C86F                 push    edx
.text:0000C870                 mov     ecx, [ebp+var_10]
.text:0000C873                 call    ?Add@?$CRecordVector@PAX@@QAEIQAX@Z ; CRecordVector<void *>::Add(void * const)
.text:0000C878                 mov     ecx, [ebp+var_C]
.text:0000C87B                 mov     large fs:0, ecx
.text:0000C882                 pop     ecx
.text:0000C883                 add     esp, 1Ch
.text:0000C886                 cmp     ebp, esp
.text:0000C888                 call    __RTC_CheckEsp
.text:0000C88D                 mov     esp, ebp
.text:0000C88F                 pop     ebp
.text:0000C890                 retn    4
.text:0000C890 ?Add@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEIABUCMethodFull@N7z@NArchive@@@Z endp
.text:0000C890
.text:0000C890 ; ---------------------------------------------------------------------------
.text:0000C893                 align 4
.text:0000C893 _text           ends
.text:0000C893
.text$x:0000C894 ; ===========================================================================
.text$x:0000C894
.text$x:0000C894 ; Segment type: Pure code
.text$x:0000C894 ; Segment permissions: Read/Execute
.text$x:0000C894 _text$x         segment para public 'CODE' use32
.text$x:0000C894                 assume cs:_text$x
.text$x:0000C894                 ;org 0C894h
.text$x:0000C894 ; COMDAT (pick associative to section at C7F4)
.text$x:0000C894                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000C894
.text$x:0000C894 ; =============== S U B R O U T I N E =======================================
.text$x:0000C894
.text$x:0000C894
.text$x:0000C894 __unwindfunclet$?Add@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEIABUCMethodFull@N7z@NArchive@@@Z$0 proc near
.text$x:0000C894                                         ; DATA XREF: .xdata$x:0000C8C0o
.text$x:0000C894                 mov     eax, [ebp-18h]
.text$x:0000C897                 push    eax             ; void *
.text$x:0000C898                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000C89D                 pop     ecx
.text$x:0000C89E                 retn
.text$x:0000C89E __unwindfunclet$?Add@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEIABUCMethodFull@N7z@NArchive@@@Z$0 endp
.text$x:0000C89E
.text$x:0000C89F
.text$x:0000C89F ; =============== S U B R O U T I N E =======================================
.text$x:0000C89F
.text$x:0000C89F
.text$x:0000C89F __ehhandler$?Add@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEIABUCMethodFull@N7z@NArchive@@@Z proc near
.text$x:0000C89F                                         ; DATA XREF: CObjectVector<NArchive::N7z::CMethodFull>::Add(NArchive::N7z::CMethodFull const &)+5o
.text$x:0000C89F
.text$x:0000C89F arg_4           = dword ptr  8
.text$x:0000C89F
.text$x:0000C89F                 mov     edx, [esp+arg_4]
.text$x:0000C8A3                 lea     eax, [edx+0Ch]
.text$x:0000C8A6                 mov     ecx, [edx-14h]
.text$x:0000C8A9                 xor     ecx, eax
.text$x:0000C8AB                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000C8B0                 mov     eax, offset __ehfuncinfo$?Add@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEIABUCMethodFull@N7z@NArchive@@@Z
.text$x:0000C8B5                 jmp     ___CxxFrameHandler3
.text$x:0000C8B5 __ehhandler$?Add@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEIABUCMethodFull@N7z@NArchive@@@Z endp
.text$x:0000C8B5
.text$x:0000C8B5 ; ---------------------------------------------------------------------------
.text$x:0000C8BA                 align 4
.text$x:0000C8BA _text$x         ends
.text$x:0000C8BA
.xdata$x:0000C8BC ; ===========================================================================
.xdata$x:0000C8BC
.xdata$x:0000C8BC ; Segment type: Pure data
.xdata$x:0000C8BC ; Segment permissions: Read
.xdata$x:0000C8BC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C8BC                 assume cs:_xdata$x
.xdata$x:0000C8BC                 ;org 0C8BCh
.xdata$x:0000C8BC ; COMDAT (pick associative to section at C7F4)
.xdata$x:0000C8BC __unwindtable$?Add@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEIABUCMethodFull@N7z@NArchive@@@Z db 0FFh
.xdata$x:0000C8BC                                         ; DATA XREF: .xdata$x:0000C8CCo
.xdata$x:0000C8BD                 db 0FFh
.xdata$x:0000C8BE                 db 0FFh
.xdata$x:0000C8BF                 db 0FFh
.xdata$x:0000C8C0                 dd offset __unwindfunclet$?Add@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEIABUCMethodFull@N7z@NArchive@@@Z$0
.xdata$x:0000C8C4 __ehfuncinfo$?Add@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEIABUCMethodFull@N7z@NArchive@@@Z db  22h ; "
.xdata$x:0000C8C4                                         ; DATA XREF: __ehhandler$?Add@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEIABUCMethodFull@N7z@NArchive@@@Z+11o
.xdata$x:0000C8C5                 db    5
.xdata$x:0000C8C6                 db  93h ; ô
.xdata$x:0000C8C7                 db  19h
.xdata$x:0000C8C8                 db    1
.xdata$x:0000C8C9                 db    0
.xdata$x:0000C8CA                 db    0
.xdata$x:0000C8CB                 db    0
.xdata$x:0000C8CC                 dd offset __unwindtable$?Add@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEIABUCMethodFull@N7z@NArchive@@@Z
.xdata$x:0000C8D0                 db    0
.xdata$x:0000C8D1                 db    0
.xdata$x:0000C8D2                 db    0
.xdata$x:0000C8D3                 db    0
.xdata$x:0000C8D4                 db    0
.xdata$x:0000C8D5                 db    0
.xdata$x:0000C8D6                 db    0
.xdata$x:0000C8D7                 db    0
.xdata$x:0000C8D8                 db    0
.xdata$x:0000C8D9                 db    0
.xdata$x:0000C8DA                 db    0
.xdata$x:0000C8DB                 db    0
.xdata$x:0000C8DC                 db    0
.xdata$x:0000C8DD                 db    0
.xdata$x:0000C8DE                 db    0
.xdata$x:0000C8DF                 db    0
.xdata$x:0000C8E0                 db    0
.xdata$x:0000C8E1                 db    0
.xdata$x:0000C8E2                 db    0
.xdata$x:0000C8E3                 db    0
.xdata$x:0000C8E4                 db    1
.xdata$x:0000C8E5                 db    0
.xdata$x:0000C8E6                 db    0
.xdata$x:0000C8E7                 db    0
.xdata$x:0000C8E7 _xdata$x        ends
.xdata$x:0000C8E7
.text:0000C8E8 ; ===========================================================================
.text:0000C8E8
.text:0000C8E8 ; Segment type: Pure code
.text:0000C8E8 ; Segment permissions: Read/Execute
.text:0000C8E8 _text           segment para public 'CODE' use32
.text:0000C8E8                 assume cs:_text
.text:0000C8E8                 ;org 0C8E8h
.text:0000C8E8 ; COMDAT (pick any)
.text:0000C8E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000C8E8
.text:0000C8E8 ; =============== S U B R O U T I N E =======================================
.text:0000C8E8
.text:0000C8E8 ; Attributes: bp-based frame
.text:0000C8E8
.text:0000C8E8 ; public: struct NArchive::N7z::CMethodFull & __thiscall CObjectVector<struct NArchive::N7z::CMethodFull>::InsertNew(unsigned int)
.text:0000C8E8                 public ?InsertNew@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@I@Z
.text:0000C8E8 ?InsertNew@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@I@Z proc near
.text:0000C8E8                                         ; CODE XREF: NArchive::N7z::MakeExeMethod(NArchive::N7z::CCompressionMethodMode &,NArchive::N7z::CFilterMode const &,bool)+95p
.text:0000C8E8
.text:0000C8E8 var_20          = dword ptr -20h
.text:0000C8E8 var_1C          = dword ptr -1Ch
.text:0000C8E8 var_18          = dword ptr -18h
.text:0000C8E8 var_14          = dword ptr -14h
.text:0000C8E8 var_10          = dword ptr -10h
.text:0000C8E8 var_C           = dword ptr -0Ch
.text:0000C8E8 var_4           = dword ptr -4
.text:0000C8E8 arg_0           = dword ptr  8
.text:0000C8E8
.text:0000C8E8                 push    ebp
.text:0000C8E9                 mov     ebp, esp
.text:0000C8EB                 push    0FFFFFFFFh
.text:0000C8ED                 push    offset __ehhandler$?InsertNew@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@I@Z
.text:0000C8F2                 mov     eax, large fs:0
.text:0000C8F8                 push    eax
.text:0000C8F9                 sub     esp, 14h
.text:0000C8FC                 mov     eax, 0CCCCCCCCh
.text:0000C901                 mov     [ebp+var_20], eax
.text:0000C904                 mov     [ebp+var_1C], eax
.text:0000C907                 mov     [ebp+var_18], eax
.text:0000C90A                 mov     [ebp+var_14], eax
.text:0000C90D                 mov     [ebp+var_10], eax
.text:0000C910                 mov     eax, dword ptr ds:___security_cookie
.text:0000C915                 xor     eax, ebp
.text:0000C917                 push    eax
.text:0000C918                 lea     eax, [ebp+var_C]
.text:0000C91B                 mov     large fs:0, eax
.text:0000C921                 mov     [ebp+var_10], ecx
.text:0000C924                 push    20h ; ' '       ; unsigned int
.text:0000C926                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000C92B                 add     esp, 4
.text:0000C92E                 mov     [ebp+var_1C], eax
.text:0000C931                 mov     [ebp+var_4], 0
.text:0000C938                 cmp     [ebp+var_1C], 0
.text:0000C93C                 jz      short loc_C94B
.text:0000C93E                 mov     ecx, [ebp+var_1C] ; this
.text:0000C941                 call    ??0CMethodFull@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CMethodFull::CMethodFull(void)
.text:0000C946                 mov     [ebp+var_20], eax
.text:0000C949                 jmp     short loc_C952
.text:0000C94B ; ---------------------------------------------------------------------------
.text:0000C94B
.text:0000C94B loc_C94B:                               ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::InsertNew(uint)+54j
.text:0000C94B                 mov     [ebp+var_20], 0
.text:0000C952
.text:0000C952 loc_C952:                               ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::InsertNew(uint)+61j
.text:0000C952                 mov     eax, [ebp+var_20]
.text:0000C955                 mov     [ebp+var_18], eax
.text:0000C958                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000C95F                 mov     ecx, [ebp+var_18]
.text:0000C962                 mov     [ebp+var_14], ecx
.text:0000C965                 mov     edx, [ebp+var_14]
.text:0000C968                 push    edx
.text:0000C969                 mov     eax, [ebp+arg_0]
.text:0000C96C                 push    eax
.text:0000C96D                 mov     ecx, [ebp+var_10]
.text:0000C970                 call    ?Insert@?$CRecordVector@PAX@@QAEXIQAX@Z ; CRecordVector<void *>::Insert(uint,void * const)
.text:0000C975                 mov     eax, [ebp+var_14]
.text:0000C978                 mov     ecx, [ebp+var_C]
.text:0000C97B                 mov     large fs:0, ecx
.text:0000C982                 pop     ecx
.text:0000C983                 add     esp, 20h
.text:0000C986                 cmp     ebp, esp
.text:0000C988                 call    __RTC_CheckEsp
.text:0000C98D                 mov     esp, ebp
.text:0000C98F                 pop     ebp
.text:0000C990                 retn    4
.text:0000C990 ?InsertNew@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@I@Z endp
.text:0000C990
.text:0000C990 ; ---------------------------------------------------------------------------
.text:0000C993                 align 4
.text:0000C993 _text           ends
.text:0000C993
.text$x:0000C994 ; ===========================================================================
.text$x:0000C994
.text$x:0000C994 ; Segment type: Pure code
.text$x:0000C994 ; Segment permissions: Read/Execute
.text$x:0000C994 _text$x         segment para public 'CODE' use32
.text$x:0000C994                 assume cs:_text$x
.text$x:0000C994                 ;org 0C994h
.text$x:0000C994 ; COMDAT (pick associative to section at C8E8)
.text$x:0000C994                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000C994
.text$x:0000C994 ; =============== S U B R O U T I N E =======================================
.text$x:0000C994
.text$x:0000C994
.text$x:0000C994 __unwindfunclet$?InsertNew@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@I@Z$0 proc near
.text$x:0000C994                                         ; DATA XREF: .xdata$x:0000C9C0o
.text$x:0000C994                 mov     eax, [ebp-1Ch]
.text$x:0000C997                 push    eax             ; void *
.text$x:0000C998                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000C99D                 pop     ecx
.text$x:0000C99E                 retn
.text$x:0000C99E __unwindfunclet$?InsertNew@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@I@Z$0 endp
.text$x:0000C99E
.text$x:0000C99F
.text$x:0000C99F ; =============== S U B R O U T I N E =======================================
.text$x:0000C99F
.text$x:0000C99F
.text$x:0000C99F __ehhandler$?InsertNew@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@I@Z proc near
.text$x:0000C99F                                         ; DATA XREF: CObjectVector<NArchive::N7z::CMethodFull>::InsertNew(uint)+5o
.text$x:0000C99F
.text$x:0000C99F arg_4           = dword ptr  8
.text$x:0000C99F
.text$x:0000C99F                 mov     edx, [esp+arg_4]
.text$x:0000C9A3                 lea     eax, [edx+0Ch]
.text$x:0000C9A6                 mov     ecx, [edx-18h]
.text$x:0000C9A9                 xor     ecx, eax
.text$x:0000C9AB                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000C9B0                 mov     eax, offset __ehfuncinfo$?InsertNew@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@I@Z
.text$x:0000C9B5                 jmp     ___CxxFrameHandler3
.text$x:0000C9B5 __ehhandler$?InsertNew@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@I@Z endp
.text$x:0000C9B5
.text$x:0000C9B5 ; ---------------------------------------------------------------------------
.text$x:0000C9BA                 align 4
.text$x:0000C9BA _text$x         ends
.text$x:0000C9BA
.xdata$x:0000C9BC ; ===========================================================================
.xdata$x:0000C9BC
.xdata$x:0000C9BC ; Segment type: Pure data
.xdata$x:0000C9BC ; Segment permissions: Read
.xdata$x:0000C9BC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C9BC                 assume cs:_xdata$x
.xdata$x:0000C9BC                 ;org 0C9BCh
.xdata$x:0000C9BC ; COMDAT (pick associative to section at C8E8)
.xdata$x:0000C9BC __unwindtable$?InsertNew@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@I@Z db 0FFh
.xdata$x:0000C9BC                                         ; DATA XREF: .xdata$x:0000C9CCo
.xdata$x:0000C9BD                 db 0FFh
.xdata$x:0000C9BE                 db 0FFh
.xdata$x:0000C9BF                 db 0FFh
.xdata$x:0000C9C0                 dd offset __unwindfunclet$?InsertNew@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@I@Z$0
.xdata$x:0000C9C4 __ehfuncinfo$?InsertNew@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@I@Z db  22h ; "
.xdata$x:0000C9C4                                         ; DATA XREF: __ehhandler$?InsertNew@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@I@Z+11o
.xdata$x:0000C9C5                 db    5
.xdata$x:0000C9C6                 db  93h ; ô
.xdata$x:0000C9C7                 db  19h
.xdata$x:0000C9C8                 db    1
.xdata$x:0000C9C9                 db    0
.xdata$x:0000C9CA                 db    0
.xdata$x:0000C9CB                 db    0
.xdata$x:0000C9CC                 dd offset __unwindtable$?InsertNew@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@I@Z
.xdata$x:0000C9D0                 db    0
.xdata$x:0000C9D1                 db    0
.xdata$x:0000C9D2                 db    0
.xdata$x:0000C9D3                 db    0
.xdata$x:0000C9D4                 db    0
.xdata$x:0000C9D5                 db    0
.xdata$x:0000C9D6                 db    0
.xdata$x:0000C9D7                 db    0
.xdata$x:0000C9D8                 db    0
.xdata$x:0000C9D9                 db    0
.xdata$x:0000C9DA                 db    0
.xdata$x:0000C9DB                 db    0
.xdata$x:0000C9DC                 db    0
.xdata$x:0000C9DD                 db    0
.xdata$x:0000C9DE                 db    0
.xdata$x:0000C9DF                 db    0
.xdata$x:0000C9E0                 db    0
.xdata$x:0000C9E1                 db    0
.xdata$x:0000C9E2                 db    0
.xdata$x:0000C9E3                 db    0
.xdata$x:0000C9E4                 db    1
.xdata$x:0000C9E5                 db    0
.xdata$x:0000C9E6                 db    0
.xdata$x:0000C9E7                 db    0
.xdata$x:0000C9E7 _xdata$x        ends
.xdata$x:0000C9E7
.text:0000C9E8 ; ===========================================================================
.text:0000C9E8
.text:0000C9E8 ; Segment type: Pure code
.text:0000C9E8 ; Segment permissions: Read/Execute
.text:0000C9E8 _text           segment para public 'CODE' use32
.text:0000C9E8                 assume cs:_text
.text:0000C9E8                 ;org 0C9E8h
.text:0000C9E8 ; COMDAT (pick any)
.text:0000C9E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000C9E8
.text:0000C9E8 ; =============== S U B R O U T I N E =======================================
.text:0000C9E8
.text:0000C9E8 ; Attributes: bp-based frame
.text:0000C9E8
.text:0000C9E8 ; public: __thiscall CObjectVector<struct NArchive::N7z::CMethodFull>::~CObjectVector<struct NArchive::N7z::CMethodFull>(void)
.text:0000C9E8                 public ??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ
.text:0000C9E8 ??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ proc near
.text:0000C9E8                                         ; CODE XREF: __unwindfunclet$??0CCompressionMethodMode@N7z@NArchive@@QAE@ABU012@@Z$0+3j
.text:0000C9E8                                         ; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(void)+58p ...
.text:0000C9E8
.text:0000C9E8 var_20          = dword ptr -20h
.text:0000C9E8 var_1C          = dword ptr -1Ch
.text:0000C9E8 var_18          = dword ptr -18h
.text:0000C9E8 var_14          = dword ptr -14h
.text:0000C9E8 var_10          = dword ptr -10h
.text:0000C9E8 var_C           = dword ptr -0Ch
.text:0000C9E8 var_4           = dword ptr -4
.text:0000C9E8
.text:0000C9E8                 push    ebp
.text:0000C9E9                 mov     ebp, esp
.text:0000C9EB                 push    0FFFFFFFFh
.text:0000C9ED                 push    offset __ehhandler$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ
.text:0000C9F2                 mov     eax, large fs:0
.text:0000C9F8                 push    eax
.text:0000C9F9                 sub     esp, 14h
.text:0000C9FC                 mov     eax, 0CCCCCCCCh
.text:0000CA01                 mov     [ebp+var_20], eax
.text:0000CA04                 mov     [ebp+var_1C], eax
.text:0000CA07                 mov     [ebp+var_18], eax
.text:0000CA0A                 mov     [ebp+var_14], eax
.text:0000CA0D                 mov     [ebp+var_10], eax
.text:0000CA10                 mov     eax, dword ptr ds:___security_cookie
.text:0000CA15                 xor     eax, ebp
.text:0000CA17                 push    eax
.text:0000CA18                 lea     eax, [ebp+var_C]
.text:0000CA1B                 mov     large fs:0, eax
.text:0000CA21                 mov     [ebp+var_10], ecx
.text:0000CA24                 mov     [ebp+var_4], 0
.text:0000CA2B                 mov     ecx, [ebp+var_10]
.text:0000CA2E                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:0000CA33                 mov     [ebp+var_14], eax
.text:0000CA36
.text:0000CA36 loc_CA36:                               ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>(void):loc_CA78j
.text:0000CA36                 cmp     [ebp+var_14], 0
.text:0000CA3A                 jz      short loc_CA7A
.text:0000CA3C                 mov     eax, [ebp+var_14]
.text:0000CA3F                 sub     eax, 1
.text:0000CA42                 mov     [ebp+var_14], eax
.text:0000CA45                 mov     ecx, [ebp+var_14]
.text:0000CA48                 push    ecx
.text:0000CA49                 mov     ecx, [ebp+var_10]
.text:0000CA4C                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:0000CA51                 mov     edx, [eax]
.text:0000CA53                 mov     [ebp+var_1C], edx
.text:0000CA56                 mov     eax, [ebp+var_1C]
.text:0000CA59                 mov     [ebp+var_18], eax
.text:0000CA5C                 cmp     [ebp+var_18], 0
.text:0000CA60                 jz      short loc_CA71
.text:0000CA62                 push    1
.text:0000CA64                 mov     ecx, [ebp+var_18]
.text:0000CA67                 call    ??_GCMethodFull@N7z@NArchive@@QAEPAXI@Z ; NArchive::N7z::CMethodFull::`scalar deleting destructor'(uint)
.text:0000CA6C                 mov     [ebp+var_20], eax
.text:0000CA6F                 jmp     short loc_CA78
.text:0000CA71 ; ---------------------------------------------------------------------------
.text:0000CA71
.text:0000CA71 loc_CA71:                               ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>(void)+78j
.text:0000CA71                 mov     [ebp+var_20], 0
.text:0000CA78
.text:0000CA78 loc_CA78:                               ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>(void)+87j
.text:0000CA78                 jmp     short loc_CA36
.text:0000CA7A ; ---------------------------------------------------------------------------
.text:0000CA7A
.text:0000CA7A loc_CA7A:                               ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>(void)+52j
.text:0000CA7A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000CA81                 mov     ecx, [ebp+var_10]
.text:0000CA84                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:0000CA89                 mov     ecx, [ebp+var_C]
.text:0000CA8C                 mov     large fs:0, ecx
.text:0000CA93                 pop     ecx
.text:0000CA94                 add     esp, 20h
.text:0000CA97                 cmp     ebp, esp
.text:0000CA99                 call    __RTC_CheckEsp
.text:0000CA9E                 mov     esp, ebp
.text:0000CAA0                 pop     ebp
.text:0000CAA1                 retn
.text:0000CAA1 ??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ endp
.text:0000CAA1
.text:0000CAA1 ; ---------------------------------------------------------------------------
.text:0000CAA2                 align 4
.text:0000CAA2 _text           ends
.text:0000CAA2
.text$x:0000CAA4 ; ===========================================================================
.text$x:0000CAA4
.text$x:0000CAA4 ; Segment type: Pure code
.text$x:0000CAA4 ; Segment permissions: Read/Execute
.text$x:0000CAA4 _text$x         segment para public 'CODE' use32
.text$x:0000CAA4                 assume cs:_text$x
.text$x:0000CAA4                 ;org 0CAA4h
.text$x:0000CAA4 ; COMDAT (pick associative to section at C9E8)
.text$x:0000CAA4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000CAA4
.text$x:0000CAA4 ; =============== S U B R O U T I N E =======================================
.text$x:0000CAA4
.text$x:0000CAA4
.text$x:0000CAA4 __unwindfunclet$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ$0 proc near
.text$x:0000CAA4                                         ; DATA XREF: .xdata$x:0000CACCo
.text$x:0000CAA4                 mov     ecx, [ebp-10h]
.text$x:0000CAA7                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:0000CAA7 __unwindfunclet$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ$0 endp
.text$x:0000CAA7
.text$x:0000CAAC
.text$x:0000CAAC ; =============== S U B R O U T I N E =======================================
.text$x:0000CAAC
.text$x:0000CAAC
.text$x:0000CAAC __ehhandler$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ proc near
.text$x:0000CAAC                                         ; DATA XREF: CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>(void)+5o
.text$x:0000CAAC
.text$x:0000CAAC arg_4           = dword ptr  8
.text$x:0000CAAC
.text$x:0000CAAC                 mov     edx, [esp+arg_4]
.text$x:0000CAB0                 lea     eax, [edx+0Ch]
.text$x:0000CAB3                 mov     ecx, [edx-18h]
.text$x:0000CAB6                 xor     ecx, eax
.text$x:0000CAB8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000CABD                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ
.text$x:0000CAC2                 jmp     ___CxxFrameHandler3
.text$x:0000CAC2 __ehhandler$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ endp
.text$x:0000CAC2
.text$x:0000CAC2 ; ---------------------------------------------------------------------------
.text$x:0000CAC7                 align 4
.text$x:0000CAC7 _text$x         ends
.text$x:0000CAC7
.xdata$x:0000CAC8 ; ===========================================================================
.xdata$x:0000CAC8
.xdata$x:0000CAC8 ; Segment type: Pure data
.xdata$x:0000CAC8 ; Segment permissions: Read
.xdata$x:0000CAC8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CAC8                 assume cs:_xdata$x
.xdata$x:0000CAC8                 ;org 0CAC8h
.xdata$x:0000CAC8 ; COMDAT (pick associative to section at C9E8)
.xdata$x:0000CAC8 __unwindtable$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ db 0FFh
.xdata$x:0000CAC8                                         ; DATA XREF: .xdata$x:0000CAD8o
.xdata$x:0000CAC9                 db 0FFh
.xdata$x:0000CACA                 db 0FFh
.xdata$x:0000CACB                 db 0FFh
.xdata$x:0000CACC                 dd offset __unwindfunclet$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ$0
.xdata$x:0000CAD0 __ehfuncinfo$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ db  22h ; "
.xdata$x:0000CAD0                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ+11o
.xdata$x:0000CAD1                 db    5
.xdata$x:0000CAD2                 db  93h ; ô
.xdata$x:0000CAD3                 db  19h
.xdata$x:0000CAD4                 db    1
.xdata$x:0000CAD5                 db    0
.xdata$x:0000CAD6                 db    0
.xdata$x:0000CAD7                 db    0
.xdata$x:0000CAD8                 dd offset __unwindtable$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ
.xdata$x:0000CADC                 db    0
.xdata$x:0000CADD                 db    0
.xdata$x:0000CADE                 db    0
.xdata$x:0000CADF                 db    0
.xdata$x:0000CAE0                 db    0
.xdata$x:0000CAE1                 db    0
.xdata$x:0000CAE2                 db    0
.xdata$x:0000CAE3                 db    0
.xdata$x:0000CAE4                 db    0
.xdata$x:0000CAE5                 db    0
.xdata$x:0000CAE6                 db    0
.xdata$x:0000CAE7                 db    0
.xdata$x:0000CAE8                 db    0
.xdata$x:0000CAE9                 db    0
.xdata$x:0000CAEA                 db    0
.xdata$x:0000CAEB                 db    0
.xdata$x:0000CAEC                 db    0
.xdata$x:0000CAED                 db    0
.xdata$x:0000CAEE                 db    0
.xdata$x:0000CAEF                 db    0
.xdata$x:0000CAF0                 db    1
.xdata$x:0000CAF1                 db    0
.xdata$x:0000CAF2                 db    0
.xdata$x:0000CAF3                 db    0
.xdata$x:0000CAF3 _xdata$x        ends
.xdata$x:0000CAF3
.text:0000CAF4 ; ===========================================================================
.text:0000CAF4
.text:0000CAF4 ; Segment type: Pure code
.text:0000CAF4 ; Segment permissions: Read/Execute
.text:0000CAF4 _text           segment para public 'CODE' use32
.text:0000CAF4                 assume cs:_text
.text:0000CAF4                 ;org 0CAF4h
.text:0000CAF4 ; COMDAT (pick any)
.text:0000CAF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000CAF4
.text:0000CAF4 ; =============== S U B R O U T I N E =======================================
.text:0000CAF4
.text:0000CAF4 ; Attributes: bp-based frame
.text:0000CAF4
.text:0000CAF4 ; public: __thiscall CRecordVector<struct NArchive::N7z::CBond2>::CRecordVector<struct NArchive::N7z::CBond2>(class CRecordVector<struct NArchive::N7z::CBond2> const &)
.text:0000CAF4                 public ??0?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@ABV0@@Z
.text:0000CAF4 ??0?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@ABV0@@Z proc near
.text:0000CAF4                                         ; CODE XREF: NArchive::N7z::CCompressionMethodMode::CCompressionMethodMode(NArchive::N7z::CCompressionMethodMode const &)+4Dp
.text:0000CAF4
.text:0000CAF4 var_C           = dword ptr -0Ch
.text:0000CAF4 var_8           = dword ptr -8
.text:0000CAF4 var_4           = dword ptr -4
.text:0000CAF4 arg_0           = dword ptr  8
.text:0000CAF4
.text:0000CAF4                 push    ebp
.text:0000CAF5                 mov     ebp, esp
.text:0000CAF7                 sub     esp, 0Ch
.text:0000CAFA                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000CB01                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000CB08                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000CB0F                 mov     [ebp+var_4], ecx
.text:0000CB12                 mov     eax, [ebp+var_4]
.text:0000CB15                 mov     dword ptr [eax], 0
.text:0000CB1B                 mov     ecx, [ebp+var_4]
.text:0000CB1E                 mov     dword ptr [ecx+4], 0
.text:0000CB25                 mov     edx, [ebp+var_4]
.text:0000CB28                 mov     dword ptr [edx+8], 0
.text:0000CB2F                 mov     ecx, [ebp+arg_0]
.text:0000CB32                 call    ?Size@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CBond2>::Size(void)
.text:0000CB37                 mov     [ebp+var_8], eax
.text:0000CB3A                 cmp     [ebp+var_8], 0
.text:0000CB3E                 jz      short loc_CB94
.text:0000CB40                 xor     ecx, ecx
.text:0000CB42                 mov     eax, [ebp+var_8]
.text:0000CB45                 mov     edx, 0Ch
.text:0000CB4A                 mul     edx
.text:0000CB4C                 seto    cl
.text:0000CB4F                 neg     ecx
.text:0000CB51                 or      ecx, eax
.text:0000CB53                 push    ecx             ; unsigned int
.text:0000CB54                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000CB59                 add     esp, 4
.text:0000CB5C                 mov     [ebp+var_C], eax
.text:0000CB5F                 mov     eax, [ebp+var_4]
.text:0000CB62                 mov     ecx, [ebp+var_C]
.text:0000CB65                 mov     [eax], ecx
.text:0000CB67                 mov     edx, [ebp+var_4]
.text:0000CB6A                 mov     eax, [ebp+var_8]
.text:0000CB6D                 mov     [edx+4], eax
.text:0000CB70                 mov     ecx, [ebp+var_4]
.text:0000CB73                 mov     edx, [ebp+var_8]
.text:0000CB76                 mov     [ecx+8], edx
.text:0000CB79                 mov     eax, [ebp+var_8]
.text:0000CB7C                 imul    eax, 0Ch
.text:0000CB7F                 push    eax             ; Size
.text:0000CB80                 mov     ecx, [ebp+arg_0]
.text:0000CB83                 mov     edx, [ecx]
.text:0000CB85                 push    edx             ; Src
.text:0000CB86                 mov     eax, [ebp+var_4]
.text:0000CB89                 mov     ecx, [eax]
.text:0000CB8B                 push    ecx             ; Dst
.text:0000CB8C                 call    _memcpy
.text:0000CB91                 add     esp, 0Ch
.text:0000CB94
.text:0000CB94 loc_CB94:                               ; CODE XREF: CRecordVector<NArchive::N7z::CBond2>::CRecordVector<NArchive::N7z::CBond2>(CRecordVector<NArchive::N7z::CBond2> const &)+4Aj
.text:0000CB94                 mov     eax, [ebp+var_4]
.text:0000CB97                 add     esp, 0Ch
.text:0000CB9A                 cmp     ebp, esp
.text:0000CB9C                 call    __RTC_CheckEsp
.text:0000CBA1                 mov     esp, ebp
.text:0000CBA3                 pop     ebp
.text:0000CBA4                 retn    4
.text:0000CBA4 ??0?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@ABV0@@Z endp
.text:0000CBA4
.text:0000CBA4 ; ---------------------------------------------------------------------------
.text:0000CBA7                 align 4
.text:0000CBA7 _text           ends
.text:0000CBA7
.text:0000CBA8 ; ===========================================================================
.text:0000CBA8
.text:0000CBA8 ; Segment type: Pure code
.text:0000CBA8 ; Segment permissions: Read/Execute
.text:0000CBA8 _text           segment para public 'CODE' use32
.text:0000CBA8                 assume cs:_text
.text:0000CBA8                 ;org 0CBA8h
.text:0000CBA8 ; COMDAT (pick any)
.text:0000CBA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000CBA8
.text:0000CBA8 ; =============== S U B R O U T I N E =======================================
.text:0000CBA8
.text:0000CBA8 ; Attributes: bp-based frame
.text:0000CBA8
.text:0000CBA8 ; public: unsigned int __thiscall CRecordVector<struct NArchive::N7z::CBond2>::Size(void)const
.text:0000CBA8                 public ?Size@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBEIXZ
.text:0000CBA8 ?Size@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBEIXZ proc near
.text:0000CBA8                                         ; CODE XREF: NArchive::N7z::MakeExeMethod(NArchive::N7z::CCompressionMethodMode &,NArchive::N7z::CFilterMode const &,bool)+B5p
.text:0000CBA8                                         ; NArchive::N7z::CCompressionMethodMode::IsThereBond_to_Coder(uint)+2Fp ...
.text:0000CBA8
.text:0000CBA8 var_4           = dword ptr -4
.text:0000CBA8
.text:0000CBA8                 push    ebp
.text:0000CBA9                 mov     ebp, esp
.text:0000CBAB                 push    ecx
.text:0000CBAC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000CBB3                 mov     [ebp+var_4], ecx
.text:0000CBB6                 mov     eax, [ebp+var_4]
.text:0000CBB9                 mov     eax, [eax+4]
.text:0000CBBC                 mov     esp, ebp
.text:0000CBBE                 pop     ebp
.text:0000CBBF                 retn
.text:0000CBBF ?Size@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBEIXZ endp
.text:0000CBBF
.text:0000CBBF _text           ends
.text:0000CBBF
.text:0000CBC0 ; ===========================================================================
.text:0000CBC0
.text:0000CBC0 ; Segment type: Pure code
.text:0000CBC0 ; Segment permissions: Read/Execute
.text:0000CBC0 _text           segment para public 'CODE' use32
.text:0000CBC0                 assume cs:_text
.text:0000CBC0                 ;org 0CBC0h
.text:0000CBC0 ; COMDAT (pick any)
.text:0000CBC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000CBC0
.text:0000CBC0 ; =============== S U B R O U T I N E =======================================
.text:0000CBC0
.text:0000CBC0 ; Attributes: bp-based frame
.text:0000CBC0
.text:0000CBC0 ; public: bool __thiscall CRecordVector<struct NArchive::N7z::CBond2>::IsEmpty(void)const
.text:0000CBC0                 public ?IsEmpty@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBE_NXZ
.text:0000CBC0 ?IsEmpty@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBE_NXZ proc near
.text:0000CBC0                                         ; CODE XREF: NArchive::N7z::MakeExeMethod(NArchive::N7z::CCompressionMethodMode &,NArchive::N7z::CFilterMode const &,bool)+1F9p
.text:0000CBC0                                         ; NArchive::N7z::AddFilterBond(NArchive::N7z::CCompressionMethodMode &)+9p ...
.text:0000CBC0
.text:0000CBC0 var_4           = dword ptr -4
.text:0000CBC0
.text:0000CBC0                 push    ebp
.text:0000CBC1                 mov     ebp, esp
.text:0000CBC3                 push    ecx
.text:0000CBC4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000CBCB                 mov     [ebp+var_4], ecx
.text:0000CBCE                 mov     eax, [ebp+var_4]
.text:0000CBD1                 xor     ecx, ecx
.text:0000CBD3                 cmp     dword ptr [eax+4], 0
.text:0000CBD7                 setz    cl
.text:0000CBDA                 mov     al, cl
.text:0000CBDC                 mov     esp, ebp
.text:0000CBDE                 pop     ebp
.text:0000CBDF                 retn
.text:0000CBDF ?IsEmpty@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBE_NXZ endp
.text:0000CBDF
.text:0000CBDF _text           ends
.text:0000CBDF
.text:0000CBE0 ; ===========================================================================
.text:0000CBE0
.text:0000CBE0 ; Segment type: Pure code
.text:0000CBE0 ; Segment permissions: Read/Execute
.text:0000CBE0 _text           segment para public 'CODE' use32
.text:0000CBE0                 assume cs:_text
.text:0000CBE0                 ;org 0CBE0h
.text:0000CBE0 ; COMDAT (pick any)
.text:0000CBE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000CBE0
.text:0000CBE0 ; =============== S U B R O U T I N E =======================================
.text:0000CBE0
.text:0000CBE0 ; Attributes: bp-based frame
.text:0000CBE0
.text:0000CBE0 ; public: __thiscall CRecordVector<struct NArchive::N7z::CBond2>::~CRecordVector<struct NArchive::N7z::CBond2>(void)
.text:0000CBE0                 public ??1?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ
.text:0000CBE0 ??1?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ proc near
.text:0000CBE0                                         ; CODE XREF: __unwindfunclet$??0CCompressionMethodMode@N7z@NArchive@@QAE@ABU012@@Z$1+6j
.text:0000CBE0                                         ; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(void)+49p ...
.text:0000CBE0
.text:0000CBE0 var_8           = dword ptr -8
.text:0000CBE0 var_4           = dword ptr -4
.text:0000CBE0
.text:0000CBE0                 push    ebp
.text:0000CBE1                 mov     ebp, esp
.text:0000CBE3                 sub     esp, 8
.text:0000CBE6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000CBED                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000CBF4                 mov     [ebp+var_4], ecx
.text:0000CBF7                 mov     eax, [ebp+var_4]
.text:0000CBFA                 mov     ecx, [eax]
.text:0000CBFC                 mov     [ebp+var_8], ecx
.text:0000CBFF                 mov     edx, [ebp+var_8]
.text:0000CC02                 push    edx             ; void *
.text:0000CC03                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000CC08                 add     esp, 4
.text:0000CC0B                 add     esp, 8
.text:0000CC0E                 cmp     ebp, esp
.text:0000CC10                 call    __RTC_CheckEsp
.text:0000CC15                 mov     esp, ebp
.text:0000CC17                 pop     ebp
.text:0000CC18                 retn
.text:0000CC18 ??1?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ endp
.text:0000CC18
.text:0000CC18 ; ---------------------------------------------------------------------------
.text:0000CC19                 align 4
.text:0000CC19 _text           ends
.text:0000CC19
.text:0000CC1C ; ===========================================================================
.text:0000CC1C
.text:0000CC1C ; Segment type: Pure code
.text:0000CC1C ; Segment permissions: Read/Execute
.text:0000CC1C _text           segment para public 'CODE' use32
.text:0000CC1C                 assume cs:_text
.text:0000CC1C                 ;org 0CC1Ch
.text:0000CC1C ; COMDAT (pick any)
.text:0000CC1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000CC1C
.text:0000CC1C ; =============== S U B R O U T I N E =======================================
.text:0000CC1C
.text:0000CC1C ; Attributes: bp-based frame
.text:0000CC1C
.text:0000CC1C ; public: unsigned int __thiscall CRecordVector<struct NArchive::N7z::CBond2>::Add(struct NArchive::N7z::CBond2)
.text:0000CC1C                 public ?Add@?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEIUCBond2@N7z@NArchive@@@Z
.text:0000CC1C ?Add@?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEIUCBond2@N7z@NArchive@@@Z proc near
.text:0000CC1C                                         ; CODE XREF: NArchive::N7z::AddBondForFilter(NArchive::N7z::CCompressionMethodMode &)+8Cp
.text:0000CC1C                                         ; NArchive::N7z::AddBcj2Methods(NArchive::N7z::CCompressionMethodMode &)+10Fp ...
.text:0000CC1C
.text:0000CC1C var_14          = dword ptr -14h
.text:0000CC1C var_10          = dword ptr -10h
.text:0000CC1C var_C           = dword ptr -0Ch
.text:0000CC1C var_8           = dword ptr -8
.text:0000CC1C var_4           = dword ptr -4
.text:0000CC1C arg_0           = dword ptr  8
.text:0000CC1C arg_4           = dword ptr  0Ch
.text:0000CC1C arg_8           = dword ptr  10h
.text:0000CC1C
.text:0000CC1C                 push    ebp
.text:0000CC1D                 mov     ebp, esp
.text:0000CC1F                 sub     esp, 14h
.text:0000CC22                 mov     eax, 0CCCCCCCCh
.text:0000CC27                 mov     [ebp+var_14], eax
.text:0000CC2A                 mov     [ebp+var_10], eax
.text:0000CC2D                 mov     [ebp+var_C], eax
.text:0000CC30                 mov     [ebp+var_8], eax
.text:0000CC33                 mov     [ebp+var_4], eax
.text:0000CC36                 mov     [ebp+var_4], ecx
.text:0000CC39                 mov     ecx, [ebp+var_4]
.text:0000CC3C                 call    ?ReserveOnePosition@?$CRecordVector@UCBond2@N7z@NArchive@@@@AAEXXZ ; CRecordVector<NArchive::N7z::CBond2>::ReserveOnePosition(void)
.text:0000CC41                 mov     eax, [ebp+var_4]
.text:0000CC44                 mov     ecx, [eax+4]
.text:0000CC47                 imul    ecx, 0Ch
.text:0000CC4A                 mov     edx, [ebp+var_4]
.text:0000CC4D                 mov     eax, [edx]
.text:0000CC4F                 add     eax, ecx
.text:0000CC51                 mov     ecx, [ebp+arg_0]
.text:0000CC54                 mov     [eax], ecx
.text:0000CC56                 mov     edx, [ebp+arg_4]
.text:0000CC59                 mov     [eax+4], edx
.text:0000CC5C                 mov     ecx, [ebp+arg_8]
.text:0000CC5F                 mov     [eax+8], ecx
.text:0000CC62                 mov     edx, [ebp+var_4]
.text:0000CC65                 mov     eax, [edx+4]
.text:0000CC68                 mov     [ebp+var_14], eax
.text:0000CC6B                 mov     ecx, [ebp+var_4]
.text:0000CC6E                 mov     edx, [ecx+4]
.text:0000CC71                 add     edx, 1
.text:0000CC74                 mov     eax, [ebp+var_4]
.text:0000CC77                 mov     [eax+4], edx
.text:0000CC7A                 mov     eax, [ebp+var_14]
.text:0000CC7D                 push    edx
.text:0000CC7E                 mov     ecx, ebp
.text:0000CC80                 push    eax
.text:0000CC81                 lea     edx, $LN5_0
.text:0000CC87                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000CC8C                 pop     eax
.text:0000CC8D                 pop     edx
.text:0000CC8E                 add     esp, 14h
.text:0000CC91                 cmp     ebp, esp
.text:0000CC93                 call    __RTC_CheckEsp
.text:0000CC98                 mov     esp, ebp
.text:0000CC9A                 pop     ebp
.text:0000CC9B                 retn    0Ch
.text:0000CC9B ?Add@?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEIUCBond2@N7z@NArchive@@@Z endp
.text:0000CC9B
.text:0000CC9B ; ---------------------------------------------------------------------------
.text:0000CC9E                 align 10h
.text:0000CCA0 $LN5_0          dd 1                    ; DATA XREF: CRecordVector<NArchive::N7z::CBond2>::Add(NArchive::N7z::CBond2)+65o
.text:0000CCA4                 dd offset $LN4
.text:0000CCA8 $LN4            dd 0FFFFFFF4h, 4        ; DATA XREF: .text:0000CCA4o
.text:0000CCB0                 dd offset $LN3_0        ; "_$ArrayPad"
.text:0000CCB4 $LN3_0          db '_$ArrayPad',0       ; DATA XREF: .text:0000CCB0o
.text:0000CCBF                 align 10h
.text:0000CCBF _text           ends
.text:0000CCBF
.text:0000CCC0 ; ===========================================================================
.text:0000CCC0
.text:0000CCC0 ; Segment type: Pure code
.text:0000CCC0 ; Segment permissions: Read/Execute
.text:0000CCC0 _text           segment para public 'CODE' use32
.text:0000CCC0                 assume cs:_text
.text:0000CCC0                 ;org 0CCC0h
.text:0000CCC0 ; COMDAT (pick any)
.text:0000CCC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000CCC0
.text:0000CCC0 ; =============== S U B R O U T I N E =======================================
.text:0000CCC0
.text:0000CCC0 ; Attributes: bp-based frame
.text:0000CCC0
.text:0000CCC0 ; public: struct NArchive::N7z::CBond2 const & __thiscall CRecordVector<struct NArchive::N7z::CBond2>::operator[](unsigned int)const
.text:0000CCC0                 public ??A?$CRecordVector@UCBond2@N7z@NArchive@@@@QBEABUCBond2@N7z@NArchive@@I@Z
.text:0000CCC0 ??A?$CRecordVector@UCBond2@N7z@NArchive@@@@QBEABUCBond2@N7z@NArchive@@I@Z proc near
.text:0000CCC0                                         ; CODE XREF: NArchive::N7z::CCompressionMethodMode::IsThereBond_to_Coder(uint)+43p
.text:0000CCC0
.text:0000CCC0 var_4           = dword ptr -4
.text:0000CCC0 arg_0           = dword ptr  8
.text:0000CCC0
.text:0000CCC0                 push    ebp
.text:0000CCC1                 mov     ebp, esp
.text:0000CCC3                 push    ecx
.text:0000CCC4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000CCCB                 mov     [ebp+var_4], ecx
.text:0000CCCE                 mov     eax, [ebp+arg_0]
.text:0000CCD1                 imul    eax, 0Ch
.text:0000CCD4                 mov     ecx, [ebp+var_4]
.text:0000CCD7                 add     eax, [ecx]
.text:0000CCD9                 mov     esp, ebp
.text:0000CCDB                 pop     ebp
.text:0000CCDC                 retn    4
.text:0000CCDC ??A?$CRecordVector@UCBond2@N7z@NArchive@@@@QBEABUCBond2@N7z@NArchive@@I@Z endp
.text:0000CCDC
.text:0000CCDC ; ---------------------------------------------------------------------------
.text:0000CCDF                 align 10h
.text:0000CCDF _text           ends
.text:0000CCDF
.text:0000CCE0 ; ===========================================================================
.text:0000CCE0
.text:0000CCE0 ; Segment type: Pure code
.text:0000CCE0 ; Segment permissions: Read/Execute
.text:0000CCE0 _text           segment para public 'CODE' use32
.text:0000CCE0                 assume cs:_text
.text:0000CCE0                 ;org 0CCE0h
.text:0000CCE0 ; COMDAT (pick any)
.text:0000CCE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000CCE0
.text:0000CCE0 ; =============== S U B R O U T I N E =======================================
.text:0000CCE0
.text:0000CCE0 ; Attributes: bp-based frame
.text:0000CCE0
.text:0000CCE0 ; public: struct NArchive::N7z::CBond2 & __thiscall CRecordVector<struct NArchive::N7z::CBond2>::operator[](unsigned int)
.text:0000CCE0                 public ??A?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEAAUCBond2@N7z@NArchive@@I@Z
.text:0000CCE0 ??A?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEAAUCBond2@N7z@NArchive@@I@Z proc near
.text:0000CCE0                                         ; CODE XREF: NArchive::N7z::MakeExeMethod(NArchive::N7z::CCompressionMethodMode &,NArchive::N7z::CFilterMode const &,bool)+C9p
.text:0000CCE0
.text:0000CCE0 var_4           = dword ptr -4
.text:0000CCE0 arg_0           = dword ptr  8
.text:0000CCE0
.text:0000CCE0                 push    ebp
.text:0000CCE1                 mov     ebp, esp
.text:0000CCE3                 push    ecx
.text:0000CCE4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000CCEB                 mov     [ebp+var_4], ecx
.text:0000CCEE                 mov     eax, [ebp+arg_0]
.text:0000CCF1                 imul    eax, 0Ch
.text:0000CCF4                 mov     ecx, [ebp+var_4]
.text:0000CCF7                 add     eax, [ecx]
.text:0000CCF9                 mov     esp, ebp
.text:0000CCFB                 pop     ebp
.text:0000CCFC                 retn    4
.text:0000CCFC ??A?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEAAUCBond2@N7z@NArchive@@I@Z endp
.text:0000CCFC
.text:0000CCFC ; ---------------------------------------------------------------------------
.text:0000CCFF                 align 10h
.text:0000CCFF _text           ends
.text:0000CCFF
.text:0000CD00 ; ===========================================================================
.text:0000CD00
.text:0000CD00 ; Segment type: Pure code
.text:0000CD00 ; Segment permissions: Read/Execute
.text:0000CD00 _text           segment para public 'CODE' use32
.text:0000CD00                 assume cs:_text
.text:0000CD00                 ;org 0CD00h
.text:0000CD00 ; COMDAT (pick any)
.text:0000CD00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000CD00
.text:0000CD00 ; =============== S U B R O U T I N E =======================================
.text:0000CD00
.text:0000CD00 ; Attributes: bp-based frame
.text:0000CD00
.text:0000CD00 ; public: struct NArchive::N7z::CBond2 & __thiscall CRecordVector<struct NArchive::N7z::CBond2>::Back(void)
.text:0000CD00                 public ?Back@?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEAAUCBond2@N7z@NArchive@@XZ
.text:0000CD00 ?Back@?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEAAUCBond2@N7z@NArchive@@XZ proc near
.text:0000CD00                                         ; CODE XREF: NArchive::N7z::MakeExeMethod(NArchive::N7z::CCompressionMethodMode &,NArchive::N7z::CFilterMode const &,bool)+20Bp
.text:0000CD00
.text:0000CD00 var_4           = dword ptr -4
.text:0000CD00
.text:0000CD00                 push    ebp
.text:0000CD01                 mov     ebp, esp
.text:0000CD03                 push    ecx
.text:0000CD04                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000CD0B                 mov     [ebp+var_4], ecx
.text:0000CD0E                 mov     eax, [ebp+var_4]
.text:0000CD11                 mov     eax, [eax+4]
.text:0000CD14                 sub     eax, 1
.text:0000CD17                 imul    eax, 0Ch
.text:0000CD1A                 mov     ecx, [ebp+var_4]
.text:0000CD1D                 add     eax, [ecx]
.text:0000CD1F                 mov     esp, ebp
.text:0000CD21                 pop     ebp
.text:0000CD22                 retn
.text:0000CD22 ?Back@?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEAAUCBond2@N7z@NArchive@@XZ endp
.text:0000CD22
.text:0000CD22 ; ---------------------------------------------------------------------------
.text:0000CD23                 align 4
.text:0000CD23 _text           ends
.text:0000CD23
.text:0000CD24 ; ===========================================================================
.text:0000CD24
.text:0000CD24 ; Segment type: Pure code
.text:0000CD24 ; Segment permissions: Read/Execute
.text:0000CD24 _text           segment para public 'CODE' use32
.text:0000CD24                 assume cs:_text
.text:0000CD24                 ;org 0CD24h
.text:0000CD24 ; COMDAT (pick any)
.text:0000CD24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000CD24
.text:0000CD24 ; =============== S U B R O U T I N E =======================================
.text:0000CD24
.text:0000CD24 ; Attributes: bp-based frame
.text:0000CD24
.text:0000CD24 ; public: __thiscall CMyComPtr<struct IArchiveUpdateCallback>::CMyComPtr<struct IArchiveUpdateCallback>(void)
.text:0000CD24                 public ??0?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@XZ
.text:0000CD24 ??0?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@XZ proc near
.text:0000CD24                                         ; CODE XREF: NArchive::N7z::CFolderInStream::CFolderInStream(void)+76p
.text:0000CD24
.text:0000CD24 var_4           = dword ptr -4
.text:0000CD24
.text:0000CD24                 push    ebp
.text:0000CD25                 mov     ebp, esp
.text:0000CD27                 push    ecx
.text:0000CD28                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000CD2F                 mov     [ebp+var_4], ecx
.text:0000CD32                 mov     eax, [ebp+var_4]
.text:0000CD35                 mov     dword ptr [eax], 0
.text:0000CD3B                 mov     eax, [ebp+var_4]
.text:0000CD3E                 mov     esp, ebp
.text:0000CD40                 pop     ebp
.text:0000CD41                 retn
.text:0000CD41 ??0?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@XZ endp
.text:0000CD41
.text:0000CD41 ; ---------------------------------------------------------------------------
.text:0000CD42                 align 4
.text:0000CD42 _text           ends
.text:0000CD42
.text:0000CD44 ; ===========================================================================
.text:0000CD44
.text:0000CD44 ; Segment type: Pure code
.text:0000CD44 ; Segment permissions: Read/Execute
.text:0000CD44 _text           segment para public 'CODE' use32
.text:0000CD44                 assume cs:_text
.text:0000CD44                 ;org 0CD44h
.text:0000CD44 ; COMDAT (pick any)
.text:0000CD44                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000CD44
.text:0000CD44 ; =============== S U B R O U T I N E =======================================
.text:0000CD44
.text:0000CD44 ; Attributes: bp-based frame
.text:0000CD44
.text:0000CD44 ; public: __thiscall CMyComPtr<struct IArchiveUpdateCallback>::~CMyComPtr<struct IArchiveUpdateCallback>(void)
.text:0000CD44                 public ??1?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@XZ
.text:0000CD44 ??1?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@XZ proc near
.text:0000CD44                                         ; CODE XREF: __unwindfunclet$??0CFolderInStream@N7z@NArchive@@QAE@XZ$1+6j
.text:0000CD44                                         ; NArchive::N7z::CFolderInStream::~CFolderInStream(void)+67p ...
.text:0000CD44
.text:0000CD44 var_4           = dword ptr -4
.text:0000CD44
.text:0000CD44                 push    ebp
.text:0000CD45                 mov     ebp, esp
.text:0000CD47                 push    ecx
.text:0000CD48                 push    esi
.text:0000CD49                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000CD50                 mov     [ebp+var_4], ecx
.text:0000CD53                 mov     eax, [ebp+var_4]
.text:0000CD56                 cmp     dword ptr [eax], 0
.text:0000CD59                 jz      short loc_CD76
.text:0000CD5B                 mov     ecx, [ebp+var_4]
.text:0000CD5E                 mov     edx, [ecx]
.text:0000CD60                 mov     eax, [ebp+var_4]
.text:0000CD63                 mov     ecx, [eax]
.text:0000CD65                 mov     edx, [edx]
.text:0000CD67                 mov     esi, esp
.text:0000CD69                 push    ecx
.text:0000CD6A                 mov     eax, [edx+8]
.text:0000CD6D                 call    eax
.text:0000CD6F                 cmp     esi, esp
.text:0000CD71                 call    __RTC_CheckEsp
.text:0000CD76
.text:0000CD76 loc_CD76:                               ; CODE XREF: CMyComPtr<IArchiveUpdateCallback>::~CMyComPtr<IArchiveUpdateCallback>(void)+15j
.text:0000CD76                 pop     esi
.text:0000CD77                 add     esp, 4
.text:0000CD7A                 cmp     ebp, esp
.text:0000CD7C                 call    __RTC_CheckEsp
.text:0000CD81                 mov     esp, ebp
.text:0000CD83                 pop     ebp
.text:0000CD84                 retn
.text:0000CD84 ??1?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@XZ endp
.text:0000CD84
.text:0000CD84 ; ---------------------------------------------------------------------------
.text:0000CD85                 align 4
.text:0000CD85 _text           ends
.text:0000CD85
.text:0000CD88 ; ===========================================================================
.text:0000CD88
.text:0000CD88 ; Segment type: Pure code
.text:0000CD88 ; Segment permissions: Read/Execute
.text:0000CD88 _text           segment para public 'CODE' use32
.text:0000CD88                 assume cs:_text
.text:0000CD88                 ;org 0CD88h
.text:0000CD88 ; COMDAT (pick any)
.text:0000CD88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000CD88
.text:0000CD88 ; =============== S U B R O U T I N E =======================================
.text:0000CD88
.text:0000CD88 ; Attributes: bp-based frame
.text:0000CD88
.text:0000CD88 ; public: void __thiscall CObjectVector<struct NArchive::N7z::CFolder>::ReserveDown(void)
.text:0000CD88                 public ?ReserveDown@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEXXZ
.text:0000CD88 ?ReserveDown@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEXXZ proc near
.text:0000CD88                                         ; CODE XREF: NArchive::N7z::CArchiveDatabaseOut::ReserveDown(void)+32p
.text:0000CD88
.text:0000CD88 var_4           = dword ptr -4
.text:0000CD88
.text:0000CD88                 push    ebp
.text:0000CD89                 mov     ebp, esp
.text:0000CD8B                 push    ecx
.text:0000CD8C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000CD93                 mov     [ebp+var_4], ecx
.text:0000CD96                 mov     ecx, [ebp+var_4]
.text:0000CD99                 call    ?ReserveDown@?$CRecordVector@PAX@@QAEXXZ ; CRecordVector<void *>::ReserveDown(void)
.text:0000CD9E                 add     esp, 4
.text:0000CDA1                 cmp     ebp, esp
.text:0000CDA3                 call    __RTC_CheckEsp
.text:0000CDA8                 mov     esp, ebp
.text:0000CDAA                 pop     ebp
.text:0000CDAB                 retn
.text:0000CDAB ?ReserveDown@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEXXZ endp
.text:0000CDAB
.text:0000CDAB _text           ends
.text:0000CDAB
.text:0000CDAC ; ===========================================================================
.text:0000CDAC
.text:0000CDAC ; Segment type: Pure code
.text:0000CDAC ; Segment permissions: Read/Execute
.text:0000CDAC _text           segment para public 'CODE' use32
.text:0000CDAC                 assume cs:_text
.text:0000CDAC                 ;org 0CDACh
.text:0000CDAC ; COMDAT (pick any)
.text:0000CDAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000CDAC
.text:0000CDAC ; =============== S U B R O U T I N E =======================================
.text:0000CDAC
.text:0000CDAC ; Attributes: bp-based frame
.text:0000CDAC
.text:0000CDAC ; public: struct NArchive::N7z::CFolder & __thiscall CObjectVector<struct NArchive::N7z::CFolder>::AddNew(void)
.text:0000CDAC                 public ?AddNew@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEAAUCFolder@N7z@NArchive@@XZ
.text:0000CDAC ?AddNew@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEAAUCFolder@N7z@NArchive@@XZ proc near
.text:0000CDAC                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+17DAp
.text:0000CDAC                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+2206p ...
.text:0000CDAC
.text:0000CDAC var_20          = dword ptr -20h
.text:0000CDAC var_1C          = dword ptr -1Ch
.text:0000CDAC var_18          = dword ptr -18h
.text:0000CDAC var_14          = dword ptr -14h
.text:0000CDAC var_10          = dword ptr -10h
.text:0000CDAC var_C           = dword ptr -0Ch
.text:0000CDAC var_4           = dword ptr -4
.text:0000CDAC
.text:0000CDAC                 push    ebp
.text:0000CDAD                 mov     ebp, esp
.text:0000CDAF                 push    0FFFFFFFFh
.text:0000CDB1                 push    offset __ehhandler$?AddNew@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEAAUCFolder@N7z@NArchive@@XZ
.text:0000CDB6                 mov     eax, large fs:0
.text:0000CDBC                 push    eax
.text:0000CDBD                 sub     esp, 14h
.text:0000CDC0                 mov     eax, 0CCCCCCCCh
.text:0000CDC5                 mov     [ebp+var_20], eax
.text:0000CDC8                 mov     [ebp+var_1C], eax
.text:0000CDCB                 mov     [ebp+var_18], eax
.text:0000CDCE                 mov     [ebp+var_14], eax
.text:0000CDD1                 mov     [ebp+var_10], eax
.text:0000CDD4                 mov     eax, dword ptr ds:___security_cookie
.text:0000CDD9                 xor     eax, ebp
.text:0000CDDB                 push    eax
.text:0000CDDC                 lea     eax, [ebp+var_C]
.text:0000CDDF                 mov     large fs:0, eax
.text:0000CDE5                 mov     [ebp+var_10], ecx
.text:0000CDE8                 push    18h             ; unsigned int
.text:0000CDEA                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000CDEF                 add     esp, 4
.text:0000CDF2                 mov     [ebp+var_1C], eax
.text:0000CDF5                 mov     [ebp+var_4], 0
.text:0000CDFC                 cmp     [ebp+var_1C], 0
.text:0000CE00                 jz      short loc_CE0F
.text:0000CE02                 mov     ecx, [ebp+var_1C] ; this
.text:0000CE05                 call    ??0CFolder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFolder::CFolder(void)
.text:0000CE0A                 mov     [ebp+var_20], eax
.text:0000CE0D                 jmp     short loc_CE16
.text:0000CE0F ; ---------------------------------------------------------------------------
.text:0000CE0F
.text:0000CE0F loc_CE0F:                               ; CODE XREF: CObjectVector<NArchive::N7z::CFolder>::AddNew(void)+54j
.text:0000CE0F                 mov     [ebp+var_20], 0
.text:0000CE16
.text:0000CE16 loc_CE16:                               ; CODE XREF: CObjectVector<NArchive::N7z::CFolder>::AddNew(void)+61j
.text:0000CE16                 mov     eax, [ebp+var_20]
.text:0000CE19                 mov     [ebp+var_18], eax
.text:0000CE1C                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000CE23                 mov     ecx, [ebp+var_18]
.text:0000CE26                 mov     [ebp+var_14], ecx
.text:0000CE29                 mov     edx, [ebp+var_14]
.text:0000CE2C                 push    edx
.text:0000CE2D                 mov     ecx, [ebp+var_10]
.text:0000CE30                 call    ?Add@?$CRecordVector@PAX@@QAEIQAX@Z ; CRecordVector<void *>::Add(void * const)
.text:0000CE35                 mov     eax, [ebp+var_14]
.text:0000CE38                 mov     ecx, [ebp+var_C]
.text:0000CE3B                 mov     large fs:0, ecx
.text:0000CE42                 pop     ecx
.text:0000CE43                 add     esp, 20h
.text:0000CE46                 cmp     ebp, esp
.text:0000CE48                 call    __RTC_CheckEsp
.text:0000CE4D                 mov     esp, ebp
.text:0000CE4F                 pop     ebp
.text:0000CE50                 retn
.text:0000CE50 ?AddNew@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEAAUCFolder@N7z@NArchive@@XZ endp
.text:0000CE50
.text:0000CE50 ; ---------------------------------------------------------------------------
.text:0000CE51                 align 4
.text:0000CE51 _text           ends
.text:0000CE51
.text$x:0000CE54 ; ===========================================================================
.text$x:0000CE54
.text$x:0000CE54 ; Segment type: Pure code
.text$x:0000CE54 ; Segment permissions: Read/Execute
.text$x:0000CE54 _text$x         segment para public 'CODE' use32
.text$x:0000CE54                 assume cs:_text$x
.text$x:0000CE54                 ;org 0CE54h
.text$x:0000CE54 ; COMDAT (pick associative to section at CDAC)
.text$x:0000CE54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000CE54
.text$x:0000CE54 ; =============== S U B R O U T I N E =======================================
.text$x:0000CE54
.text$x:0000CE54
.text$x:0000CE54 __unwindfunclet$?AddNew@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEAAUCFolder@N7z@NArchive@@XZ$0 proc near
.text$x:0000CE54                                         ; DATA XREF: .xdata$x:0000CE80o
.text$x:0000CE54                 mov     eax, [ebp-1Ch]
.text$x:0000CE57                 push    eax             ; void *
.text$x:0000CE58                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000CE5D                 pop     ecx
.text$x:0000CE5E                 retn
.text$x:0000CE5E __unwindfunclet$?AddNew@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEAAUCFolder@N7z@NArchive@@XZ$0 endp
.text$x:0000CE5E
.text$x:0000CE5F
.text$x:0000CE5F ; =============== S U B R O U T I N E =======================================
.text$x:0000CE5F
.text$x:0000CE5F
.text$x:0000CE5F __ehhandler$?AddNew@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEAAUCFolder@N7z@NArchive@@XZ proc near
.text$x:0000CE5F                                         ; DATA XREF: CObjectVector<NArchive::N7z::CFolder>::AddNew(void)+5o
.text$x:0000CE5F
.text$x:0000CE5F arg_4           = dword ptr  8
.text$x:0000CE5F
.text$x:0000CE5F                 mov     edx, [esp+arg_4]
.text$x:0000CE63                 lea     eax, [edx+0Ch]
.text$x:0000CE66                 mov     ecx, [edx-18h]
.text$x:0000CE69                 xor     ecx, eax
.text$x:0000CE6B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000CE70                 mov     eax, offset __ehfuncinfo$?AddNew@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEAAUCFolder@N7z@NArchive@@XZ
.text$x:0000CE75                 jmp     ___CxxFrameHandler3
.text$x:0000CE75 __ehhandler$?AddNew@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEAAUCFolder@N7z@NArchive@@XZ endp
.text$x:0000CE75
.text$x:0000CE75 ; ---------------------------------------------------------------------------
.text$x:0000CE7A                 align 4
.text$x:0000CE7A _text$x         ends
.text$x:0000CE7A
.xdata$x:0000CE7C ; ===========================================================================
.xdata$x:0000CE7C
.xdata$x:0000CE7C ; Segment type: Pure data
.xdata$x:0000CE7C ; Segment permissions: Read
.xdata$x:0000CE7C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CE7C                 assume cs:_xdata$x
.xdata$x:0000CE7C                 ;org 0CE7Ch
.xdata$x:0000CE7C ; COMDAT (pick associative to section at CDAC)
.xdata$x:0000CE7C __unwindtable$?AddNew@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEAAUCFolder@N7z@NArchive@@XZ db 0FFh
.xdata$x:0000CE7C                                         ; DATA XREF: .xdata$x:0000CE8Co
.xdata$x:0000CE7D                 db 0FFh
.xdata$x:0000CE7E                 db 0FFh
.xdata$x:0000CE7F                 db 0FFh
.xdata$x:0000CE80                 dd offset __unwindfunclet$?AddNew@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEAAUCFolder@N7z@NArchive@@XZ$0
.xdata$x:0000CE84 __ehfuncinfo$?AddNew@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEAAUCFolder@N7z@NArchive@@XZ db  22h ; "
.xdata$x:0000CE84                                         ; DATA XREF: __ehhandler$?AddNew@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEAAUCFolder@N7z@NArchive@@XZ+11o
.xdata$x:0000CE85                 db    5
.xdata$x:0000CE86                 db  93h ; ô
.xdata$x:0000CE87                 db  19h
.xdata$x:0000CE88                 db    1
.xdata$x:0000CE89                 db    0
.xdata$x:0000CE8A                 db    0
.xdata$x:0000CE8B                 db    0
.xdata$x:0000CE8C                 dd offset __unwindtable$?AddNew@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEAAUCFolder@N7z@NArchive@@XZ
.xdata$x:0000CE90                 db    0
.xdata$x:0000CE91                 db    0
.xdata$x:0000CE92                 db    0
.xdata$x:0000CE93                 db    0
.xdata$x:0000CE94                 db    0
.xdata$x:0000CE95                 db    0
.xdata$x:0000CE96                 db    0
.xdata$x:0000CE97                 db    0
.xdata$x:0000CE98                 db    0
.xdata$x:0000CE99                 db    0
.xdata$x:0000CE9A                 db    0
.xdata$x:0000CE9B                 db    0
.xdata$x:0000CE9C                 db    0
.xdata$x:0000CE9D                 db    0
.xdata$x:0000CE9E                 db    0
.xdata$x:0000CE9F                 db    0
.xdata$x:0000CEA0                 db    0
.xdata$x:0000CEA1                 db    0
.xdata$x:0000CEA2                 db    0
.xdata$x:0000CEA3                 db    0
.xdata$x:0000CEA4                 db    1
.xdata$x:0000CEA5                 db    0
.xdata$x:0000CEA6                 db    0
.xdata$x:0000CEA7                 db    0
.xdata$x:0000CEA7 _xdata$x        ends
.xdata$x:0000CEA7
.text:0000CEA8 ; ===========================================================================
.text:0000CEA8
.text:0000CEA8 ; Segment type: Pure code
.text:0000CEA8 ; Segment permissions: Read/Execute
.text:0000CEA8 _text           segment para public 'CODE' use32
.text:0000CEA8                 assume cs:_text
.text:0000CEA8                 ;org 0CEA8h
.text:0000CEA8 ; COMDAT (pick any)
.text:0000CEA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000CEA8
.text:0000CEA8 ; =============== S U B R O U T I N E =======================================
.text:0000CEA8
.text:0000CEA8 ; Attributes: bp-based frame
.text:0000CEA8
.text:0000CEA8 ; public: __thiscall CRecordVector<struct NArchive::N7z::CFilterMode2>::CRecordVector<struct NArchive::N7z::CFilterMode2>(void)
.text:0000CEA8                 public ??0?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ
.text:0000CEA8 ??0?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ proc near
.text:0000CEA8                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1A9p
.text:0000CEA8
.text:0000CEA8 var_4           = dword ptr -4
.text:0000CEA8
.text:0000CEA8                 push    ebp
.text:0000CEA9                 mov     ebp, esp
.text:0000CEAB                 push    ecx
.text:0000CEAC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000CEB3                 mov     [ebp+var_4], ecx
.text:0000CEB6                 mov     eax, [ebp+var_4]
.text:0000CEB9                 mov     dword ptr [eax], 0
.text:0000CEBF                 mov     ecx, [ebp+var_4]
.text:0000CEC2                 mov     dword ptr [ecx+4], 0
.text:0000CEC9                 mov     edx, [ebp+var_4]
.text:0000CECC                 mov     dword ptr [edx+8], 0
.text:0000CED3                 mov     eax, [ebp+var_4]
.text:0000CED6                 mov     esp, ebp
.text:0000CED8                 pop     ebp
.text:0000CED9                 retn
.text:0000CED9 ??0?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ endp
.text:0000CED9
.text:0000CED9 ; ---------------------------------------------------------------------------
.text:0000CEDA                 align 4
.text:0000CEDA _text           ends
.text:0000CEDA
.text:0000CEDC ; ===========================================================================
.text:0000CEDC
.text:0000CEDC ; Segment type: Pure code
.text:0000CEDC ; Segment permissions: Read/Execute
.text:0000CEDC _text           segment para public 'CODE' use32
.text:0000CEDC                 assume cs:_text
.text:0000CEDC                 ;org 0CEDCh
.text:0000CEDC ; COMDAT (pick any)
.text:0000CEDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000CEDC
.text:0000CEDC ; =============== S U B R O U T I N E =======================================
.text:0000CEDC
.text:0000CEDC ; Attributes: bp-based frame
.text:0000CEDC
.text:0000CEDC ; public: unsigned int __thiscall CRecordVector<struct NArchive::N7z::CFilterMode2>::Size(void)const
.text:0000CEDC                 public ?Size@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QBEIXZ
.text:0000CEDC ?Size@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QBEIXZ proc near
.text:0000CEDC                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+117Cp
.text:0000CEDC                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+11C9p ...
.text:0000CEDC
.text:0000CEDC var_4           = dword ptr -4
.text:0000CEDC
.text:0000CEDC                 push    ebp
.text:0000CEDD                 mov     ebp, esp
.text:0000CEDF                 push    ecx
.text:0000CEE0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000CEE7                 mov     [ebp+var_4], ecx
.text:0000CEEA                 mov     eax, [ebp+var_4]
.text:0000CEED                 mov     eax, [eax+4]
.text:0000CEF0                 mov     esp, ebp
.text:0000CEF2                 pop     ebp
.text:0000CEF3                 retn
.text:0000CEF3 ?Size@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QBEIXZ endp
.text:0000CEF3
.text:0000CEF3 _text           ends
.text:0000CEF3
.text:0000CEF4 ; ===========================================================================
.text:0000CEF4
.text:0000CEF4 ; Segment type: Pure code
.text:0000CEF4 ; Segment permissions: Read/Execute
.text:0000CEF4 _text           segment para public 'CODE' use32
.text:0000CEF4                 assume cs:_text
.text:0000CEF4                 ;org 0CEF4h
.text:0000CEF4 ; COMDAT (pick any)
.text:0000CEF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000CEF4
.text:0000CEF4 ; =============== S U B R O U T I N E =======================================
.text:0000CEF4
.text:0000CEF4 ; Attributes: bp-based frame
.text:0000CEF4
.text:0000CEF4 ; public: __thiscall CRecordVector<struct NArchive::N7z::CFilterMode2>::~CRecordVector<struct NArchive::N7z::CFilterMode2>(void)
.text:0000CEF4                 public ??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ
.text:0000CEF4 ??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ proc near
.text:0000CEF4                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+6A0p
.text:0000CEF4                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+7C9p ...
.text:0000CEF4
.text:0000CEF4 var_8           = dword ptr -8
.text:0000CEF4 var_4           = dword ptr -4
.text:0000CEF4
.text:0000CEF4                 push    ebp
.text:0000CEF5                 mov     ebp, esp
.text:0000CEF7                 sub     esp, 8
.text:0000CEFA                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000CF01                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000CF08                 mov     [ebp+var_4], ecx
.text:0000CF0B                 mov     eax, [ebp+var_4]
.text:0000CF0E                 mov     ecx, [eax]
.text:0000CF10                 mov     [ebp+var_8], ecx
.text:0000CF13                 mov     edx, [ebp+var_8]
.text:0000CF16                 push    edx             ; void *
.text:0000CF17                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000CF1C                 add     esp, 4
.text:0000CF1F                 add     esp, 8
.text:0000CF22                 cmp     ebp, esp
.text:0000CF24                 call    __RTC_CheckEsp
.text:0000CF29                 mov     esp, ebp
.text:0000CF2B                 pop     ebp
.text:0000CF2C                 retn
.text:0000CF2C ??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ endp
.text:0000CF2C
.text:0000CF2C ; ---------------------------------------------------------------------------
.text:0000CF2D                 align 10h
.text:0000CF2D _text           ends
.text:0000CF2D
.text:0000CF30 ; ===========================================================================
.text:0000CF30
.text:0000CF30 ; Segment type: Pure code
.text:0000CF30 ; Segment permissions: Read/Execute
.text:0000CF30 _text           segment para public 'CODE' use32
.text:0000CF30                 assume cs:_text
.text:0000CF30                 ;org 0CF30h
.text:0000CF30 ; COMDAT (pick any)
.text:0000CF30                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000CF30
.text:0000CF30 ; =============== S U B R O U T I N E =======================================
.text:0000CF30
.text:0000CF30 ; Attributes: bp-based frame
.text:0000CF30
.text:0000CF30 ; public: unsigned int __thiscall CRecordVector<struct NArchive::N7z::CFilterMode2>::Add(struct NArchive::N7z::CFilterMode2)
.text:0000CF30                 public ?Add@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAEIUCFilterMode2@N7z@NArchive@@@Z
.text:0000CF30 ?Add@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAEIUCFilterMode2@N7z@NArchive@@@Z proc near
.text:0000CF30                                         ; CODE XREF: NArchive::N7z::GetGroup(CRecordVector<NArchive::N7z::CFilterMode2> &,NArchive::N7z::CFilterMode2 const &)+7Dp
.text:0000CF30
.text:0000CF30 var_8           = dword ptr -8
.text:0000CF30 var_4           = dword ptr -4
.text:0000CF30 arg_0           = dword ptr  8
.text:0000CF30 arg_4           = dword ptr  0Ch
.text:0000CF30 arg_8           = dword ptr  10h
.text:0000CF30 arg_C           = dword ptr  14h
.text:0000CF30
.text:0000CF30                 push    ebp
.text:0000CF31                 mov     ebp, esp
.text:0000CF33                 sub     esp, 8
.text:0000CF36                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000CF3D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000CF44                 mov     [ebp+var_4], ecx
.text:0000CF47                 mov     ecx, [ebp+var_4]
.text:0000CF4A                 call    ?ReserveOnePosition@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@AAEXXZ ; CRecordVector<NArchive::N7z::CFilterMode2>::ReserveOnePosition(void)
.text:0000CF4F                 mov     eax, [ebp+var_4]
.text:0000CF52                 mov     ecx, [eax+4]
.text:0000CF55                 shl     ecx, 4
.text:0000CF58                 mov     edx, [ebp+var_4]
.text:0000CF5B                 mov     eax, [edx]
.text:0000CF5D                 add     eax, ecx
.text:0000CF5F                 mov     ecx, [ebp+arg_0]
.text:0000CF62                 mov     [eax], ecx
.text:0000CF64                 mov     edx, [ebp+arg_4]
.text:0000CF67                 mov     [eax+4], edx
.text:0000CF6A                 mov     ecx, [ebp+arg_8]
.text:0000CF6D                 mov     [eax+8], ecx
.text:0000CF70                 mov     edx, [ebp+arg_C]
.text:0000CF73                 mov     [eax+0Ch], edx
.text:0000CF76                 mov     eax, [ebp+var_4]
.text:0000CF79                 mov     ecx, [eax+4]
.text:0000CF7C                 mov     [ebp+var_8], ecx
.text:0000CF7F                 mov     edx, [ebp+var_4]
.text:0000CF82                 mov     eax, [edx+4]
.text:0000CF85                 add     eax, 1
.text:0000CF88                 mov     ecx, [ebp+var_4]
.text:0000CF8B                 mov     [ecx+4], eax
.text:0000CF8E                 mov     eax, [ebp+var_8]
.text:0000CF91                 add     esp, 8
.text:0000CF94                 cmp     ebp, esp
.text:0000CF96                 call    __RTC_CheckEsp
.text:0000CF9B                 mov     esp, ebp
.text:0000CF9D                 pop     ebp
.text:0000CF9E                 retn    10h
.text:0000CF9E ?Add@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAEIUCFilterMode2@N7z@NArchive@@@Z endp
.text:0000CF9E
.text:0000CF9E ; ---------------------------------------------------------------------------
.text:0000CFA1                 align 4
.text:0000CFA1 _text           ends
.text:0000CFA1
.text:0000CFA4 ; ===========================================================================
.text:0000CFA4
.text:0000CFA4 ; Segment type: Pure code
.text:0000CFA4 ; Segment permissions: Read/Execute
.text:0000CFA4 _text           segment para public 'CODE' use32
.text:0000CFA4                 assume cs:_text
.text:0000CFA4                 ;org 0CFA4h
.text:0000CFA4 ; COMDAT (pick any)
.text:0000CFA4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000CFA4
.text:0000CFA4 ; =============== S U B R O U T I N E =======================================
.text:0000CFA4
.text:0000CFA4 ; Attributes: bp-based frame
.text:0000CFA4
.text:0000CFA4 ; public: struct NArchive::N7z::CFilterMode2 & __thiscall CRecordVector<struct NArchive::N7z::CFilterMode2>::operator[](unsigned int)
.text:0000CFA4                 public ??A?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAEAAUCFilterMode2@N7z@NArchive@@I@Z
.text:0000CFA4 ??A?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAEAAUCFilterMode2@N7z@NArchive@@I@Z proc near
.text:0000CFA4                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1193p
.text:0000CFA4                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+11E4p ...
.text:0000CFA4
.text:0000CFA4 var_4           = dword ptr -4
.text:0000CFA4 arg_0           = dword ptr  8
.text:0000CFA4
.text:0000CFA4                 push    ebp
.text:0000CFA5                 mov     ebp, esp
.text:0000CFA7                 push    ecx
.text:0000CFA8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000CFAF                 mov     [ebp+var_4], ecx
.text:0000CFB2                 mov     eax, [ebp+arg_0]
.text:0000CFB5                 shl     eax, 4
.text:0000CFB8                 mov     ecx, [ebp+var_4]
.text:0000CFBB                 add     eax, [ecx]
.text:0000CFBD                 mov     esp, ebp
.text:0000CFBF                 pop     ebp
.text:0000CFC0                 retn    4
.text:0000CFC0 ??A?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAEAAUCFilterMode2@N7z@NArchive@@I@Z endp
.text:0000CFC0
.text:0000CFC0 ; ---------------------------------------------------------------------------
.text:0000CFC3                 align 4
.text:0000CFC3 _text           ends
.text:0000CFC3
.text:0000CFC4 ; ===========================================================================
.text:0000CFC4
.text:0000CFC4 ; Segment type: Pure code
.text:0000CFC4 ; Segment permissions: Read/Execute
.text:0000CFC4 _text           segment para public 'CODE' use32
.text:0000CFC4                 assume cs:_text
.text:0000CFC4                 ;org 0CFC4h
.text:0000CFC4 ; COMDAT (pick any)
.text:0000CFC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000CFC4
.text:0000CFC4 ; =============== S U B R O U T I N E =======================================
.text:0000CFC4
.text:0000CFC4 ; Attributes: bp-based frame
.text:0000CFC4
.text:0000CFC4 ; public: void __thiscall CRecordVector<struct NArchive::N7z::CFilterMode2>::Sort2(void)
.text:0000CFC4                 public ?Sort2@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAEXXZ
.text:0000CFC4 ?Sort2@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAEXXZ proc near
.text:0000CFC4                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+11A6p
.text:0000CFC4
.text:0000CFC4 var_28          = byte ptr -28h
.text:0000CFC4 var_24          = dword ptr -24h
.text:0000CFC4 var_20          = dword ptr -20h
.text:0000CFC4 var_1C          = dword ptr -1Ch
.text:0000CFC4 var_18          = dword ptr -18h
.text:0000CFC4 var_10          = dword ptr -10h
.text:0000CFC4 var_C           = dword ptr -0Ch
.text:0000CFC4 var_8           = dword ptr -8
.text:0000CFC4 var_4           = dword ptr -4
.text:0000CFC4
.text:0000CFC4                 push    ebp
.text:0000CFC5                 mov     ebp, esp
.text:0000CFC7                 sub     esp, 28h
.text:0000CFCA                 push    edi
.text:0000CFCB                 push    ecx
.text:0000CFCC                 lea     edi, [ebp+var_28]
.text:0000CFCF                 mov     ecx, 0Ah
.text:0000CFD4                 mov     eax, 0CCCCCCCCh
.text:0000CFD9                 rep stosd
.text:0000CFDB                 pop     ecx
.text:0000CFDC                 mov     [ebp+var_4], ecx
.text:0000CFDF                 mov     eax, [ebp+var_4]
.text:0000CFE2                 mov     ecx, [eax+4]
.text:0000CFE5                 mov     [ebp+var_8], ecx
.text:0000CFE8                 cmp     [ebp+var_8], 1
.text:0000CFEC                 ja      short loc_CFF3
.text:0000CFEE                 jmp     loc_D0A5
.text:0000CFF3 ; ---------------------------------------------------------------------------
.text:0000CFF3
.text:0000CFF3 loc_CFF3:                               ; CODE XREF: CRecordVector<NArchive::N7z::CFilterMode2>::Sort2(void)+28j
.text:0000CFF3                 mov     ecx, [ebp+var_4]
.text:0000CFF6                 call    ?Front@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAEAAUCFilterMode2@N7z@NArchive@@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::Front(void)
.text:0000CFFB                 sub     eax, 10h
.text:0000CFFE                 mov     [ebp+var_C], eax
.text:0000D001                 mov     edx, [ebp+var_8]
.text:0000D004                 shr     edx, 1
.text:0000D006                 mov     [ebp+var_10], edx
.text:0000D009
.text:0000D009 loc_D009:                               ; CODE XREF: CRecordVector<NArchive::N7z::CFilterMode2>::Sort2(void)+5Fj
.text:0000D009                 mov     eax, [ebp+var_8]
.text:0000D00C                 push    eax
.text:0000D00D                 mov     ecx, [ebp+var_10]
.text:0000D010                 push    ecx
.text:0000D011                 mov     edx, [ebp+var_C]
.text:0000D014                 push    edx
.text:0000D015                 call    ?SortRefDown2@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@SGXPAUCFilterMode2@N7z@NArchive@@II@Z ; CRecordVector<NArchive::N7z::CFilterMode2>::SortRefDown2(NArchive::N7z::CFilterMode2 *,uint,uint)
.text:0000D01A                 mov     eax, [ebp+var_10]
.text:0000D01D                 sub     eax, 1
.text:0000D020                 mov     [ebp+var_10], eax
.text:0000D023                 jnz     short loc_D009
.text:0000D025
.text:0000D025 loc_D025:                               ; CODE XREF: CRecordVector<NArchive::N7z::CFilterMode2>::Sort2(void)+DFj
.text:0000D025                 mov     ecx, [ebp+var_8]
.text:0000D028                 shl     ecx, 4
.text:0000D02B                 add     ecx, [ebp+var_C]
.text:0000D02E                 mov     edx, [ecx]
.text:0000D030                 mov     [ebp+var_24], edx
.text:0000D033                 mov     eax, [ecx+4]
.text:0000D036                 mov     [ebp+var_20], eax
.text:0000D039                 mov     edx, [ecx+8]
.text:0000D03C                 mov     [ebp+var_1C], edx
.text:0000D03F                 mov     eax, [ecx+0Ch]
.text:0000D042                 mov     [ebp+var_18], eax
.text:0000D045                 mov     ecx, [ebp+var_C]
.text:0000D048                 add     ecx, 10h
.text:0000D04B                 mov     edx, [ebp+var_8]
.text:0000D04E                 shl     edx, 4
.text:0000D051                 add     edx, [ebp+var_C]
.text:0000D054                 mov     eax, [ecx]
.text:0000D056                 mov     [edx], eax
.text:0000D058                 mov     eax, [ecx+4]
.text:0000D05B                 mov     [edx+4], eax
.text:0000D05E                 mov     eax, [ecx+8]
.text:0000D061                 mov     [edx+8], eax
.text:0000D064                 mov     ecx, [ecx+0Ch]
.text:0000D067                 mov     [edx+0Ch], ecx
.text:0000D06A                 mov     edx, [ebp+var_8]
.text:0000D06D                 sub     edx, 1
.text:0000D070                 mov     [ebp+var_8], edx
.text:0000D073                 mov     eax, [ebp+var_C]
.text:0000D076                 add     eax, 10h
.text:0000D079                 mov     ecx, [ebp+var_24]
.text:0000D07C                 mov     [eax], ecx
.text:0000D07E                 mov     edx, [ebp+var_20]
.text:0000D081                 mov     [eax+4], edx
.text:0000D084                 mov     ecx, [ebp+var_1C]
.text:0000D087                 mov     [eax+8], ecx
.text:0000D08A                 mov     edx, [ebp+var_18]
.text:0000D08D                 mov     [eax+0Ch], edx
.text:0000D090                 mov     eax, [ebp+var_8]
.text:0000D093                 push    eax
.text:0000D094                 push    1
.text:0000D096                 mov     ecx, [ebp+var_C]
.text:0000D099                 push    ecx
.text:0000D09A                 call    ?SortRefDown2@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@SGXPAUCFilterMode2@N7z@NArchive@@II@Z ; CRecordVector<NArchive::N7z::CFilterMode2>::SortRefDown2(NArchive::N7z::CFilterMode2 *,uint,uint)
.text:0000D09F                 cmp     [ebp+var_8], 1
.text:0000D0A3                 ja      short loc_D025
.text:0000D0A5
.text:0000D0A5 loc_D0A5:                               ; CODE XREF: CRecordVector<NArchive::N7z::CFilterMode2>::Sort2(void)+2Aj
.text:0000D0A5                 push    edx
.text:0000D0A6                 mov     ecx, ebp
.text:0000D0A8                 push    eax
.text:0000D0A9                 lea     edx, $LN12_0
.text:0000D0AF                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000D0B4                 pop     eax
.text:0000D0B5                 pop     edx
.text:0000D0B6                 pop     edi
.text:0000D0B7                 add     esp, 28h
.text:0000D0BA                 cmp     ebp, esp
.text:0000D0BC                 call    __RTC_CheckEsp
.text:0000D0C1                 mov     esp, ebp
.text:0000D0C3                 pop     ebp
.text:0000D0C4                 retn
.text:0000D0C4 ?Sort2@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAEXXZ endp
.text:0000D0C4
.text:0000D0C4 ; ---------------------------------------------------------------------------
.text:0000D0C5                 align 4
.text:0000D0C8 $LN12_0         dd 1                    ; DATA XREF: CRecordVector<NArchive::N7z::CFilterMode2>::Sort2(void)+E5o
.text:0000D0CC                 dd offset $LN11_1
.text:0000D0D0 $LN11_1         dd 0FFFFFFDCh, 10h      ; DATA XREF: .text:0000D0CCo
.text:0000D0D8                 dd offset $LN10_2       ; "temp"
.text:0000D0DC $LN10_2         db 'temp',0             ; DATA XREF: .text:0000D0D8o
.text:0000D0E1                 align 4
.text:0000D0E1 _text           ends
.text:0000D0E1
.text:0000D0E4 ; ===========================================================================
.text:0000D0E4
.text:0000D0E4 ; Segment type: Pure code
.text:0000D0E4 ; Segment permissions: Read/Execute
.text:0000D0E4 _text           segment para public 'CODE' use32
.text:0000D0E4                 assume cs:_text
.text:0000D0E4                 ;org 0D0E4h
.text:0000D0E4 ; COMDAT (pick any)
.text:0000D0E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000D0E4
.text:0000D0E4 ; =============== S U B R O U T I N E =======================================
.text:0000D0E4
.text:0000D0E4 ; Attributes: bp-based frame
.text:0000D0E4
.text:0000D0E4 ; public: __thiscall CMyComPtr<class CLimitedSequentialInStream>::CMyComPtr<class CLimitedSequentialInStream>(class CLimitedSequentialInStream *)
.text:0000D0E4                 public ??0?$CMyComPtr@VCLimitedSequentialInStream@@@@QAE@PAVCLimitedSequentialInStream@@@Z
.text:0000D0E4 ??0?$CMyComPtr@VCLimitedSequentialInStream@@@@QAE@PAVCLimitedSequentialInStream@@@Z proc near
.text:0000D0E4                                         ; CODE XREF: NArchive::N7z::WriteRange(IInStream *,ISequentialOutStream *,unsigned __int64,unsigned __int64,ICompressProgressInfo *)+B2p
.text:0000D0E4
.text:0000D0E4 var_4           = dword ptr -4
.text:0000D0E4 arg_0           = dword ptr  8
.text:0000D0E4
.text:0000D0E4                 push    ebp
.text:0000D0E5                 mov     ebp, esp
.text:0000D0E7                 push    ecx
.text:0000D0E8                 push    esi
.text:0000D0E9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000D0F0                 mov     [ebp+var_4], ecx
.text:0000D0F3                 mov     eax, [ebp+var_4]
.text:0000D0F6                 mov     ecx, [ebp+arg_0]
.text:0000D0F9                 mov     [eax], ecx
.text:0000D0FB                 cmp     [ebp+arg_0], 0
.text:0000D0FF                 jz      short loc_D118
.text:0000D101                 mov     edx, [ebp+arg_0]
.text:0000D104                 mov     eax, [edx]
.text:0000D106                 mov     esi, esp
.text:0000D108                 mov     ecx, [ebp+arg_0]
.text:0000D10B                 push    ecx
.text:0000D10C                 mov     edx, [eax+4]
.text:0000D10F                 call    edx
.text:0000D111                 cmp     esi, esp
.text:0000D113                 call    __RTC_CheckEsp
.text:0000D118
.text:0000D118 loc_D118:                               ; CODE XREF: CMyComPtr<CLimitedSequentialInStream>::CMyComPtr<CLimitedSequentialInStream>(CLimitedSequentialInStream *)+1Bj
.text:0000D118                 mov     eax, [ebp+var_4]
.text:0000D11B                 pop     esi
.text:0000D11C                 add     esp, 4
.text:0000D11F                 cmp     ebp, esp
.text:0000D121                 call    __RTC_CheckEsp
.text:0000D126                 mov     esp, ebp
.text:0000D128                 pop     ebp
.text:0000D129                 retn    4
.text:0000D129 ??0?$CMyComPtr@VCLimitedSequentialInStream@@@@QAE@PAVCLimitedSequentialInStream@@@Z endp
.text:0000D129
.text:0000D129 _text           ends
.text:0000D129
.text:0000D12C ; ===========================================================================
.text:0000D12C
.text:0000D12C ; Segment type: Pure code
.text:0000D12C ; Segment permissions: Read/Execute
.text:0000D12C _text           segment para public 'CODE' use32
.text:0000D12C                 assume cs:_text
.text:0000D12C                 ;org 0D12Ch
.text:0000D12C ; COMDAT (pick any)
.text:0000D12C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000D12C
.text:0000D12C ; =============== S U B R O U T I N E =======================================
.text:0000D12C
.text:0000D12C ; Attributes: bp-based frame
.text:0000D12C
.text:0000D12C ; public: __thiscall CMyComPtr<class CLimitedSequentialInStream>::~CMyComPtr<class CLimitedSequentialInStream>(void)
.text:0000D12C                 public ??1?$CMyComPtr@VCLimitedSequentialInStream@@@@QAE@XZ
.text:0000D12C ??1?$CMyComPtr@VCLimitedSequentialInStream@@@@QAE@XZ proc near
.text:0000D12C                                         ; CODE XREF: NArchive::N7z::WriteRange(IInStream *,ISequentialOutStream *,unsigned __int64,unsigned __int64,ICompressProgressInfo *)+181p
.text:0000D12C                                         ; NArchive::N7z::WriteRange(IInStream *,ISequentialOutStream *,unsigned __int64,unsigned __int64,ICompressProgressInfo *)+1D3p ...
.text:0000D12C
.text:0000D12C var_4           = dword ptr -4
.text:0000D12C
.text:0000D12C                 push    ebp
.text:0000D12D                 mov     ebp, esp
.text:0000D12F                 push    ecx
.text:0000D130                 push    esi
.text:0000D131                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000D138                 mov     [ebp+var_4], ecx
.text:0000D13B                 mov     eax, [ebp+var_4]
.text:0000D13E                 cmp     dword ptr [eax], 0
.text:0000D141                 jz      short loc_D15E
.text:0000D143                 mov     ecx, [ebp+var_4]
.text:0000D146                 mov     edx, [ecx]
.text:0000D148                 mov     eax, [ebp+var_4]
.text:0000D14B                 mov     ecx, [eax]
.text:0000D14D                 mov     edx, [edx]
.text:0000D14F                 mov     esi, esp
.text:0000D151                 push    ecx
.text:0000D152                 mov     eax, [edx+8]
.text:0000D155                 call    eax
.text:0000D157                 cmp     esi, esp
.text:0000D159                 call    __RTC_CheckEsp
.text:0000D15E
.text:0000D15E loc_D15E:                               ; CODE XREF: CMyComPtr<CLimitedSequentialInStream>::~CMyComPtr<CLimitedSequentialInStream>(void)+15j
.text:0000D15E                 pop     esi
.text:0000D15F                 add     esp, 4
.text:0000D162                 cmp     ebp, esp
.text:0000D164                 call    __RTC_CheckEsp
.text:0000D169                 mov     esp, ebp
.text:0000D16B                 pop     ebp
.text:0000D16C                 retn
.text:0000D16C ??1?$CMyComPtr@VCLimitedSequentialInStream@@@@QAE@XZ endp
.text:0000D16C
.text:0000D16C ; ---------------------------------------------------------------------------
.text:0000D16D                 align 10h
.text:0000D16D _text           ends
.text:0000D16D
.text:0000D170 ; ===========================================================================
.text:0000D170
.text:0000D170 ; Segment type: Pure code
.text:0000D170 ; Segment permissions: Read/Execute
.text:0000D170 _text           segment para public 'CODE' use32
.text:0000D170                 assume cs:_text
.text:0000D170                 ;org 0D170h
.text:0000D170 ; COMDAT (pick any)
.text:0000D170                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000D170
.text:0000D170 ; =============== S U B R O U T I N E =======================================
.text:0000D170
.text:0000D170 ; Attributes: bp-based frame
.text:0000D170
.text:0000D170 ; public: __thiscall CMyComPtr<class CLimitedSequentialInStream>::operator class CLimitedSequentialInStream *(void)const
.text:0000D170                 public ??B?$CMyComPtr@VCLimitedSequentialInStream@@@@QBEPAVCLimitedSequentialInStream@@XZ
.text:0000D170 ??B?$CMyComPtr@VCLimitedSequentialInStream@@@@QBEPAVCLimitedSequentialInStream@@XZ proc near
.text:0000D170                                         ; CODE XREF: NArchive::N7z::WriteRange(IInStream *,ISequentialOutStream *,unsigned __int64,unsigned __int64,ICompressProgressInfo *)+141p
.text:0000D170
.text:0000D170 var_4           = dword ptr -4
.text:0000D170
.text:0000D170                 push    ebp
.text:0000D171                 mov     ebp, esp
.text:0000D173                 push    ecx
.text:0000D174                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000D17B                 mov     [ebp+var_4], ecx
.text:0000D17E                 mov     eax, [ebp+var_4]
.text:0000D181                 mov     eax, [eax]
.text:0000D183                 mov     esp, ebp
.text:0000D185                 pop     ebp
.text:0000D186                 retn
.text:0000D186 ??B?$CMyComPtr@VCLimitedSequentialInStream@@@@QBEPAVCLimitedSequentialInStream@@XZ endp
.text:0000D186
.text:0000D186 ; ---------------------------------------------------------------------------
.text:0000D187                 align 4
.text:0000D187 _text           ends
.text:0000D187
.text:0000D188 ; ===========================================================================
.text:0000D188
.text:0000D188 ; Segment type: Pure code
.text:0000D188 ; Segment permissions: Read/Execute
.text:0000D188 _text           segment para public 'CODE' use32
.text:0000D188                 assume cs:_text
.text:0000D188                 ;org 0D188h
.text:0000D188 ; COMDAT (pick any)
.text:0000D188                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000D188
.text:0000D188 ; =============== S U B R O U T I N E =======================================
.text:0000D188
.text:0000D188 ; Attributes: bp-based frame
.text:0000D188
.text:0000D188 ; public: unsigned int __thiscall CObjectVector<struct NArchive::N7z::CUpdateItem>::Size(void)const
.text:0000D188                 public ?Size@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QBEIXZ
.text:0000D188 ?Size@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QBEIXZ proc near
.text:0000D188                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+246p
.text:0000D188                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+55Ap ...
.text:0000D188
.text:0000D188 var_4           = dword ptr -4
.text:0000D188
.text:0000D188                 push    ebp
.text:0000D189                 mov     ebp, esp
.text:0000D18B                 push    ecx
.text:0000D18C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000D193                 mov     [ebp+var_4], ecx
.text:0000D196                 mov     ecx, [ebp+var_4]
.text:0000D199                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:0000D19E                 add     esp, 4
.text:0000D1A1                 cmp     ebp, esp
.text:0000D1A3                 call    __RTC_CheckEsp
.text:0000D1A8                 mov     esp, ebp
.text:0000D1AA                 pop     ebp
.text:0000D1AB                 retn
.text:0000D1AB ?Size@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QBEIXZ endp
.text:0000D1AB
.text:0000D1AB _text           ends
.text:0000D1AB
.text:0000D1AC ; ===========================================================================
.text:0000D1AC
.text:0000D1AC ; Segment type: Pure code
.text:0000D1AC ; Segment permissions: Read/Execute
.text:0000D1AC _text           segment para public 'CODE' use32
.text:0000D1AC                 assume cs:_text
.text:0000D1AC                 ;org 0D1ACh
.text:0000D1AC ; COMDAT (pick any)
.text:0000D1AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000D1AC
.text:0000D1AC ; =============== S U B R O U T I N E =======================================
.text:0000D1AC
.text:0000D1AC ; Attributes: bp-based frame
.text:0000D1AC
.text:0000D1AC ; public: struct NArchive::N7z::CUpdateItem const & __thiscall CObjectVector<struct NArchive::N7z::CUpdateItem>::operator[](unsigned int)const
.text:0000D1AC                 public ??A?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QBEABUCUpdateItem@N7z@NArchive@@I@Z
.text:0000D1AC ??A?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QBEABUCUpdateItem@N7z@NArchive@@I@Z proc near
.text:0000D1AC                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+25Dp
.text:0000D1AC                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+39Ap ...
.text:0000D1AC
.text:0000D1AC var_4           = dword ptr -4
.text:0000D1AC arg_0           = dword ptr  8
.text:0000D1AC
.text:0000D1AC                 push    ebp
.text:0000D1AD                 mov     ebp, esp
.text:0000D1AF                 push    ecx
.text:0000D1B0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000D1B7                 mov     [ebp+var_4], ecx
.text:0000D1BA                 mov     eax, [ebp+arg_0]
.text:0000D1BD                 push    eax
.text:0000D1BE                 mov     ecx, [ebp+var_4]
.text:0000D1C1                 call    ??A?$CRecordVector@PAX@@QBEABQAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:0000D1C6                 mov     eax, [eax]
.text:0000D1C8                 add     esp, 4
.text:0000D1CB                 cmp     ebp, esp
.text:0000D1CD                 call    __RTC_CheckEsp
.text:0000D1D2                 mov     esp, ebp
.text:0000D1D4                 pop     ebp
.text:0000D1D5                 retn    4
.text:0000D1D5 ??A?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QBEABUCUpdateItem@N7z@NArchive@@I@Z endp
.text:0000D1D5
.text:0000D1D5 _text           ends
.text:0000D1D5
.text:0000D1D8 ; ===========================================================================
.text:0000D1D8
.text:0000D1D8 ; Segment type: Pure code
.text:0000D1D8 ; Segment permissions: Read/Execute
.text:0000D1D8 _text           segment para public 'CODE' use32
.text:0000D1D8                 assume cs:_text
.text:0000D1D8                 ;org 0D1D8h
.text:0000D1D8 ; COMDAT (pick any)
.text:0000D1D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000D1D8
.text:0000D1D8 ; =============== S U B R O U T I N E =======================================
.text:0000D1D8
.text:0000D1D8 ; Attributes: bp-based frame
.text:0000D1D8
.text:0000D1D8 ; public: unsigned int __thiscall CRecordVector<struct NArchive::N7z::CFolderRepack>::Size(void)const
.text:0000D1D8                 public ?Size@?$CRecordVector@UCFolderRepack@N7z@NArchive@@@@QBEIXZ
.text:0000D1D8 ?Size@?$CRecordVector@UCFolderRepack@N7z@NArchive@@@@QBEIXZ proc near
.text:0000D1D8                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+13A9p
.text:0000D1D8
.text:0000D1D8 var_4           = dword ptr -4
.text:0000D1D8
.text:0000D1D8                 push    ebp
.text:0000D1D9                 mov     ebp, esp
.text:0000D1DB                 push    ecx
.text:0000D1DC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000D1E3                 mov     [ebp+var_4], ecx
.text:0000D1E6                 mov     eax, [ebp+var_4]
.text:0000D1E9                 mov     eax, [eax+4]
.text:0000D1EC                 mov     esp, ebp
.text:0000D1EE                 pop     ebp
.text:0000D1EF                 retn
.text:0000D1EF ?Size@?$CRecordVector@UCFolderRepack@N7z@NArchive@@@@QBEIXZ endp
.text:0000D1EF
.text:0000D1EF _text           ends
.text:0000D1EF
.text:0000D1F0 ; ===========================================================================
.text:0000D1F0
.text:0000D1F0 ; Segment type: Pure code
.text:0000D1F0 ; Segment permissions: Read/Execute
.text:0000D1F0 _text           segment para public 'CODE' use32
.text:0000D1F0                 assume cs:_text
.text:0000D1F0                 ;org 0D1F0h
.text:0000D1F0 ; COMDAT (pick any)
.text:0000D1F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000D1F0
.text:0000D1F0 ; =============== S U B R O U T I N E =======================================
.text:0000D1F0
.text:0000D1F0 ; Attributes: bp-based frame
.text:0000D1F0
.text:0000D1F0 ; public: unsigned int __thiscall CRecordVector<struct NArchive::N7z::CFolderRepack>::Add(struct NArchive::N7z::CFolderRepack)
.text:0000D1F0                 public ?Add@?$CRecordVector@UCFolderRepack@N7z@NArchive@@@@QAEIUCFolderRepack@N7z@NArchive@@@Z
.text:0000D1F0 ?Add@?$CRecordVector@UCFolderRepack@N7z@NArchive@@@@QAEIUCFolderRepack@N7z@NArchive@@@Z proc near
.text:0000D1F0                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+48Cp
.text:0000D1F0
.text:0000D1F0 var_8           = dword ptr -8
.text:0000D1F0 var_4           = dword ptr -4
.text:0000D1F0 arg_0           = dword ptr  8
.text:0000D1F0 arg_4           = dword ptr  0Ch
.text:0000D1F0
.text:0000D1F0                 push    ebp
.text:0000D1F1                 mov     ebp, esp
.text:0000D1F3                 sub     esp, 8
.text:0000D1F6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000D1FD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000D204                 mov     [ebp+var_4], ecx
.text:0000D207                 mov     ecx, [ebp+var_4]
.text:0000D20A                 call    ?ReserveOnePosition@?$CRecordVector@UCFolderRepack@N7z@NArchive@@@@AAEXXZ ; CRecordVector<NArchive::N7z::CFolderRepack>::ReserveOnePosition(void)
.text:0000D20F                 mov     eax, [ebp+var_4]
.text:0000D212                 mov     ecx, [eax+4]
.text:0000D215                 mov     edx, [ebp+var_4]
.text:0000D218                 mov     eax, [edx]
.text:0000D21A                 mov     edx, [ebp+arg_0]
.text:0000D21D                 mov     [eax+ecx*8], edx
.text:0000D220                 mov     edx, [ebp+arg_4]
.text:0000D223                 mov     [eax+ecx*8+4], edx
.text:0000D227                 mov     eax, [ebp+var_4]
.text:0000D22A                 mov     ecx, [eax+4]
.text:0000D22D                 mov     [ebp+var_8], ecx
.text:0000D230                 mov     edx, [ebp+var_4]
.text:0000D233                 mov     eax, [edx+4]
.text:0000D236                 add     eax, 1
.text:0000D239                 mov     ecx, [ebp+var_4]
.text:0000D23C                 mov     [ecx+4], eax
.text:0000D23F                 mov     eax, [ebp+var_8]
.text:0000D242                 add     esp, 8
.text:0000D245                 cmp     ebp, esp
.text:0000D247                 call    __RTC_CheckEsp
.text:0000D24C                 mov     esp, ebp
.text:0000D24E                 pop     ebp
.text:0000D24F                 retn    8
.text:0000D24F ?Add@?$CRecordVector@UCFolderRepack@N7z@NArchive@@@@QAEIUCFolderRepack@N7z@NArchive@@@Z endp
.text:0000D24F
.text:0000D24F ; ---------------------------------------------------------------------------
.text:0000D252                 align 4
.text:0000D252 _text           ends
.text:0000D252
.text:0000D254 ; ===========================================================================
.text:0000D254
.text:0000D254 ; Segment type: Pure code
.text:0000D254 ; Segment permissions: Read/Execute
.text:0000D254 _text           segment para public 'CODE' use32
.text:0000D254                 assume cs:_text
.text:0000D254                 ;org 0D254h
.text:0000D254 ; COMDAT (pick any)
.text:0000D254                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000D254
.text:0000D254 ; =============== S U B R O U T I N E =======================================
.text:0000D254
.text:0000D254 ; Attributes: bp-based frame
.text:0000D254
.text:0000D254 ; public: struct NArchive::N7z::CFolderRepack const & __thiscall CRecordVector<struct NArchive::N7z::CFolderRepack>::operator[](unsigned int)const
.text:0000D254                 public ??A?$CRecordVector@UCFolderRepack@N7z@NArchive@@@@QBEABUCFolderRepack@N7z@NArchive@@I@Z
.text:0000D254 ??A?$CRecordVector@UCFolderRepack@N7z@NArchive@@@@QBEABUCFolderRepack@N7z@NArchive@@I@Z proc near
.text:0000D254                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+13CAp
.text:0000D254
.text:0000D254 var_4           = dword ptr -4
.text:0000D254 arg_0           = dword ptr  8
.text:0000D254
.text:0000D254                 push    ebp
.text:0000D255                 mov     ebp, esp
.text:0000D257                 push    ecx
.text:0000D258                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000D25F                 mov     [ebp+var_4], ecx
.text:0000D262                 mov     eax, [ebp+var_4]
.text:0000D265                 mov     ecx, [eax]
.text:0000D267                 mov     edx, [ebp+arg_0]
.text:0000D26A                 lea     eax, [ecx+edx*8]
.text:0000D26D                 mov     esp, ebp
.text:0000D26F                 pop     ebp
.text:0000D270                 retn    4
.text:0000D270 ??A?$CRecordVector@UCFolderRepack@N7z@NArchive@@@@QBEABUCFolderRepack@N7z@NArchive@@I@Z endp
.text:0000D270
.text:0000D270 ; ---------------------------------------------------------------------------
.text:0000D273                 align 4
.text:0000D273 _text           ends
.text:0000D273
.text:0000D274 ; ===========================================================================
.text:0000D274
.text:0000D274 ; Segment type: Pure code
.text:0000D274 ; Segment permissions: Read/Execute
.text:0000D274 _text           segment para public 'CODE' use32
.text:0000D274                 assume cs:_text
.text:0000D274                 ;org 0D274h
.text:0000D274 ; COMDAT (pick any)
.text:0000D274                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000D274
.text:0000D274 ; =============== S U B R O U T I N E =======================================
.text:0000D274
.text:0000D274 ; Attributes: bp-based frame
.text:0000D274
.text:0000D274 ; public: __thiscall CMyComPtr<struct IArchiveUpdateCallbackFile>::CMyComPtr<struct IArchiveUpdateCallbackFile>(void)
.text:0000D274                 public ??0?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ
.text:0000D274 ??0?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ proc near
.text:0000D274                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+67p
.text:0000D274                                         ; NArchive::N7z::CAnalysis::CAnalysis(void)+30p ...
.text:0000D274
.text:0000D274 var_4           = dword ptr -4
.text:0000D274
.text:0000D274                 push    ebp
.text:0000D275                 mov     ebp, esp
.text:0000D277                 push    ecx
.text:0000D278                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000D27F                 mov     [ebp+var_4], ecx
.text:0000D282                 mov     eax, [ebp+var_4]
.text:0000D285                 mov     dword ptr [eax], 0
.text:0000D28B                 mov     eax, [ebp+var_4]
.text:0000D28E                 mov     esp, ebp
.text:0000D290                 pop     ebp
.text:0000D291                 retn
.text:0000D291 ??0?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ endp
.text:0000D291
.text:0000D291 ; ---------------------------------------------------------------------------
.text:0000D292                 align 4
.text:0000D292 _text           ends
.text:0000D292
.text:0000D294 ; ===========================================================================
.text:0000D294
.text:0000D294 ; Segment type: Pure code
.text:0000D294 ; Segment permissions: Read/Execute
.text:0000D294 _text           segment para public 'CODE' use32
.text:0000D294                 assume cs:_text
.text:0000D294                 ;org 0D294h
.text:0000D294 ; COMDAT (pick any)
.text:0000D294                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000D294
.text:0000D294 ; =============== S U B R O U T I N E =======================================
.text:0000D294
.text:0000D294 ; Attributes: bp-based frame
.text:0000D294
.text:0000D294 ; public: __thiscall CMyComPtr<struct IArchiveUpdateCallbackFile>::~CMyComPtr<struct IArchiveUpdateCallbackFile>(void)
.text:0000D294                 public ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ
.text:0000D294 ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ proc near
.text:0000D294                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+16Ap
.text:0000D294                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+6C7p ...
.text:0000D294
.text:0000D294 var_4           = dword ptr -4
.text:0000D294
.text:0000D294                 push    ebp
.text:0000D295                 mov     ebp, esp
.text:0000D297                 push    ecx
.text:0000D298                 push    esi
.text:0000D299                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000D2A0                 mov     [ebp+var_4], ecx
.text:0000D2A3                 mov     eax, [ebp+var_4]
.text:0000D2A6                 cmp     dword ptr [eax], 0
.text:0000D2A9                 jz      short loc_D2C6
.text:0000D2AB                 mov     ecx, [ebp+var_4]
.text:0000D2AE                 mov     edx, [ecx]
.text:0000D2B0                 mov     eax, [ebp+var_4]
.text:0000D2B3                 mov     ecx, [eax]
.text:0000D2B5                 mov     edx, [edx]
.text:0000D2B7                 mov     esi, esp
.text:0000D2B9                 push    ecx
.text:0000D2BA                 mov     eax, [edx+8]
.text:0000D2BD                 call    eax
.text:0000D2BF                 cmp     esi, esp
.text:0000D2C1                 call    __RTC_CheckEsp
.text:0000D2C6
.text:0000D2C6 loc_D2C6:                               ; CODE XREF: CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)+15j
.text:0000D2C6                 pop     esi
.text:0000D2C7                 add     esp, 4
.text:0000D2CA                 cmp     ebp, esp
.text:0000D2CC                 call    __RTC_CheckEsp
.text:0000D2D1                 mov     esp, ebp
.text:0000D2D3                 pop     ebp
.text:0000D2D4                 retn
.text:0000D2D4 ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ endp
.text:0000D2D4
.text:0000D2D4 ; ---------------------------------------------------------------------------
.text:0000D2D5                 align 4
.text:0000D2D5 _text           ends
.text:0000D2D5
.text:0000D2D8 ; ===========================================================================
.text:0000D2D8
.text:0000D2D8 ; Segment type: Pure code
.text:0000D2D8 ; Segment permissions: Read/Execute
.text:0000D2D8 _text           segment para public 'CODE' use32
.text:0000D2D8                 assume cs:_text
.text:0000D2D8                 ;org 0D2D8h
.text:0000D2D8 ; COMDAT (pick any)
.text:0000D2D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000D2D8
.text:0000D2D8 ; =============== S U B R O U T I N E =======================================
.text:0000D2D8
.text:0000D2D8 ; Attributes: bp-based frame
.text:0000D2D8
.text:0000D2D8 ; public: __thiscall CMyComPtr<struct IArchiveUpdateCallbackFile>::operator struct IArchiveUpdateCallbackFile *(void)const
.text:0000D2D8                 public ??B?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ
.text:0000D2D8 ??B?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ proc near
.text:0000D2D8                                         ; CODE XREF: NArchive::N7z::CAnalysis::GetFilterGroup(uint,NArchive::N7z::CUpdateItem const &,NArchive::N7z::CFilterMode &)+15Fp
.text:0000D2D8                                         ; NArchive::N7z::CRepackStreamBase::OpenFile(void)+64p ...
.text:0000D2D8
.text:0000D2D8 var_4           = dword ptr -4
.text:0000D2D8
.text:0000D2D8                 push    ebp
.text:0000D2D9                 mov     ebp, esp
.text:0000D2DB                 push    ecx
.text:0000D2DC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000D2E3                 mov     [ebp+var_4], ecx
.text:0000D2E6                 mov     eax, [ebp+var_4]
.text:0000D2E9                 mov     eax, [eax]
.text:0000D2EB                 mov     esp, ebp
.text:0000D2ED                 pop     ebp
.text:0000D2EE                 retn
.text:0000D2EE ??B?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ endp
.text:0000D2EE
.text:0000D2EE ; ---------------------------------------------------------------------------
.text:0000D2EF                 align 10h
.text:0000D2EF _text           ends
.text:0000D2EF
.text:0000D2F0 ; ===========================================================================
.text:0000D2F0
.text:0000D2F0 ; Segment type: Pure code
.text:0000D2F0 ; Segment permissions: Read/Execute
.text:0000D2F0 _text           segment para public 'CODE' use32
.text:0000D2F0                 assume cs:_text
.text:0000D2F0                 ;org 0D2F0h
.text:0000D2F0 ; COMDAT (pick any)
.text:0000D2F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000D2F0
.text:0000D2F0 ; =============== S U B R O U T I N E =======================================
.text:0000D2F0
.text:0000D2F0 ; Attributes: bp-based frame
.text:0000D2F0
.text:0000D2F0 ; public: struct IArchiveUpdateCallbackFile * * __thiscall CMyComPtr<struct IArchiveUpdateCallbackFile>::operator&(void)
.text:0000D2F0                 public ??I?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAPAUIArchiveUpdateCallbackFile@@XZ
.text:0000D2F0 ??I?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAPAUIArchiveUpdateCallbackFile@@XZ proc near
.text:0000D2F0                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+76p
.text:0000D2F0
.text:0000D2F0 var_4           = dword ptr -4
.text:0000D2F0
.text:0000D2F0                 push    ebp
.text:0000D2F1                 mov     ebp, esp
.text:0000D2F3                 push    ecx
.text:0000D2F4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000D2FB                 mov     [ebp+var_4], ecx
.text:0000D2FE                 mov     eax, [ebp+var_4]
.text:0000D301                 mov     esp, ebp
.text:0000D303                 pop     ebp
.text:0000D304                 retn
.text:0000D304 ??I?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAPAUIArchiveUpdateCallbackFile@@XZ endp
.text:0000D304
.text:0000D304 ; ---------------------------------------------------------------------------
.text:0000D305                 align 4
.text:0000D305 _text           ends
.text:0000D305
.text:0000D308 ; ===========================================================================
.text:0000D308
.text:0000D308 ; Segment type: Pure code
.text:0000D308 ; Segment permissions: Read/Execute
.text:0000D308 _text           segment para public 'CODE' use32
.text:0000D308                 assume cs:_text
.text:0000D308                 ;org 0D308h
.text:0000D308 ; COMDAT (pick any)
.text:0000D308                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000D308
.text:0000D308 ; =============== S U B R O U T I N E =======================================
.text:0000D308
.text:0000D308 ; Attributes: bp-based frame
.text:0000D308
.text:0000D308 ; public: struct IArchiveUpdateCallbackFile * __thiscall CMyComPtr<struct IArchiveUpdateCallbackFile>::operator->(void)const
.text:0000D308                 public ??C?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ
.text:0000D308 ??C?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ proc near
.text:0000D308                                         ; CODE XREF: NArchive::N7z::CAnalysis::GetFilterGroup(uint,NArchive::N7z::CUpdateItem const &,NArchive::N7z::CFilterMode &)+1A0p
.text:0000D308                                         ; NArchive::N7z::CRepackStreamBase::OpenFile(void)+73p ...
.text:0000D308
.text:0000D308 var_4           = dword ptr -4
.text:0000D308
.text:0000D308                 push    ebp
.text:0000D309                 mov     ebp, esp
.text:0000D30B                 push    ecx
.text:0000D30C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000D313                 mov     [ebp+var_4], ecx
.text:0000D316                 mov     eax, [ebp+var_4]
.text:0000D319                 mov     eax, [eax]
.text:0000D31B                 mov     esp, ebp
.text:0000D31D                 pop     ebp
.text:0000D31E                 retn
.text:0000D31E ??C?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ endp
.text:0000D31E
.text:0000D31E ; ---------------------------------------------------------------------------
.text:0000D31F                 align 10h
.text:0000D31F _text           ends
.text:0000D31F
.text:0000D320 ; ===========================================================================
.text:0000D320
.text:0000D320 ; Segment type: Pure code
.text:0000D320 ; Segment permissions: Read/Execute
.text:0000D320 _text           segment para public 'CODE' use32
.text:0000D320                 assume cs:_text
.text:0000D320                 ;org 0D320h
.text:0000D320 ; COMDAT (pick any)
.text:0000D320                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000D320
.text:0000D320 ; =============== S U B R O U T I N E =======================================
.text:0000D320
.text:0000D320 ; Attributes: bp-based frame
.text:0000D320
.text:0000D320 ; public: struct IArchiveUpdateCallbackFile * __thiscall CMyComPtr<struct IArchiveUpdateCallbackFile>::operator=(class CMyComPtr<struct IArchiveUpdateCallbackFile> const &)
.text:0000D320                 public ??4?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAUIArchiveUpdateCallbackFile@@ABV0@@Z
.text:0000D320 ??4?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAUIArchiveUpdateCallbackFile@@ABV0@@Z proc near
.text:0000D320                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+90Fp
.text:0000D320                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+204Fp
.text:0000D320
.text:0000D320 var_4           = dword ptr -4
.text:0000D320 arg_0           = dword ptr  8
.text:0000D320
.text:0000D320                 push    ebp
.text:0000D321                 mov     ebp, esp
.text:0000D323                 push    ecx
.text:0000D324                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000D32B                 mov     [ebp+var_4], ecx
.text:0000D32E                 mov     eax, [ebp+arg_0]
.text:0000D331                 mov     ecx, [eax]
.text:0000D333                 push    ecx
.text:0000D334                 mov     ecx, [ebp+var_4]
.text:0000D337                 call    ??4?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAUIArchiveUpdateCallbackFile@@PAU1@@Z ; CMyComPtr<IArchiveUpdateCallbackFile>::operator=(IArchiveUpdateCallbackFile *)
.text:0000D33C                 add     esp, 4
.text:0000D33F                 cmp     ebp, esp
.text:0000D341                 call    __RTC_CheckEsp
.text:0000D346                 mov     esp, ebp
.text:0000D348                 pop     ebp
.text:0000D349                 retn    4
.text:0000D349 ??4?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAUIArchiveUpdateCallbackFile@@ABV0@@Z endp
.text:0000D349
.text:0000D349 _text           ends
.text:0000D349
.text:0000D34C ; ===========================================================================
.text:0000D34C
.text:0000D34C ; Segment type: Pure code
.text:0000D34C ; Segment permissions: Read/Execute
.text:0000D34C _text           segment para public 'CODE' use32
.text:0000D34C                 assume cs:_text
.text:0000D34C                 ;org 0D34Ch
.text:0000D34C ; COMDAT (pick any)
.text:0000D34C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000D34C
.text:0000D34C ; =============== S U B R O U T I N E =======================================
.text:0000D34C
.text:0000D34C ; Attributes: bp-based frame
.text:0000D34C
.text:0000D34C ; public: bool __thiscall CMyComPtr<struct IArchiveUpdateCallbackFile>::operator!(void)const
.text:0000D34C                 public ??7?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBE_NXZ
.text:0000D34C ??7?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBE_NXZ proc near
.text:0000D34C                                         ; CODE XREF: NArchive::N7z::CAnalysis::GetFilterGroup(uint,NArchive::N7z::CUpdateItem const &,NArchive::N7z::CFilterMode &)+90p
.text:0000D34C                                         ; NArchive::N7z::CAnalysis::GetFilterGroup(uint,NArchive::N7z::CUpdateItem const &,NArchive::N7z::CFilterMode &)+2B9p
.text:0000D34C
.text:0000D34C var_4           = dword ptr -4
.text:0000D34C
.text:0000D34C                 push    ebp
.text:0000D34D                 mov     ebp, esp
.text:0000D34F                 push    ecx
.text:0000D350                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000D357                 mov     [ebp+var_4], ecx
.text:0000D35A                 mov     eax, [ebp+var_4]
.text:0000D35D                 xor     ecx, ecx
.text:0000D35F                 cmp     dword ptr [eax], 0
.text:0000D362                 setz    cl
.text:0000D365                 mov     al, cl
.text:0000D367                 mov     esp, ebp
.text:0000D369                 pop     ebp
.text:0000D36A                 retn
.text:0000D36A ??7?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBE_NXZ endp
.text:0000D36A
.text:0000D36A ; ---------------------------------------------------------------------------
.text:0000D36B                 align 4
.text:0000D36B _text           ends
.text:0000D36B
.text:0000D36C ; ===========================================================================
.text:0000D36C
.text:0000D36C ; Segment type: Pure code
.text:0000D36C ; Segment permissions: Read/Execute
.text:0000D36C _text           segment para public 'CODE' use32
.text:0000D36C                 assume cs:_text
.text:0000D36C                 ;org 0D36Ch
.text:0000D36C ; COMDAT (pick any)
.text:0000D36C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000D36C
.text:0000D36C ; =============== S U B R O U T I N E =======================================
.text:0000D36C
.text:0000D36C ; Attributes: bp-based frame
.text:0000D36C
.text:0000D36C ; public: __thiscall CMyComPtr<struct IArchiveExtractCallbackMessage>::CMyComPtr<struct IArchiveExtractCallbackMessage>(void)
.text:0000D36C                 public ??0?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ
.text:0000D36C ??0?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ proc near
.text:0000D36C                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+9Ap
.text:0000D36C                                         ; NArchive::N7z::CRepackStreamBase::CRepackStreamBase(void)+45p
.text:0000D36C
.text:0000D36C var_4           = dword ptr -4
.text:0000D36C
.text:0000D36C                 push    ebp
.text:0000D36D                 mov     ebp, esp
.text:0000D36F                 push    ecx
.text:0000D370                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000D377                 mov     [ebp+var_4], ecx
.text:0000D37A                 mov     eax, [ebp+var_4]
.text:0000D37D                 mov     dword ptr [eax], 0
.text:0000D383                 mov     eax, [ebp+var_4]
.text:0000D386                 mov     esp, ebp
.text:0000D388                 pop     ebp
.text:0000D389                 retn
.text:0000D389 ??0?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ endp
.text:0000D389
.text:0000D389 ; ---------------------------------------------------------------------------
.text:0000D38A                 align 4
.text:0000D38A _text           ends
.text:0000D38A
.text:0000D38C ; ===========================================================================
.text:0000D38C
.text:0000D38C ; Segment type: Pure code
.text:0000D38C ; Segment permissions: Read/Execute
.text:0000D38C _text           segment para public 'CODE' use32
.text:0000D38C                 assume cs:_text
.text:0000D38C                 ;org 0D38Ch
.text:0000D38C ; COMDAT (pick any)
.text:0000D38C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000D38C
.text:0000D38C ; =============== S U B R O U T I N E =======================================
.text:0000D38C
.text:0000D38C ; Attributes: bp-based frame
.text:0000D38C
.text:0000D38C ; public: __thiscall CMyComPtr<struct IArchiveExtractCallbackMessage>::~CMyComPtr<struct IArchiveExtractCallbackMessage>(void)
.text:0000D38C                 public ??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ
.text:0000D38C ??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ proc near
.text:0000D38C                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+15Bp
.text:0000D38C                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+6B8p ...
.text:0000D38C
.text:0000D38C var_4           = dword ptr -4
.text:0000D38C
.text:0000D38C                 push    ebp
.text:0000D38D                 mov     ebp, esp
.text:0000D38F                 push    ecx
.text:0000D390                 push    esi
.text:0000D391                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000D398                 mov     [ebp+var_4], ecx
.text:0000D39B                 mov     eax, [ebp+var_4]
.text:0000D39E                 cmp     dword ptr [eax], 0
.text:0000D3A1                 jz      short loc_D3BE
.text:0000D3A3                 mov     ecx, [ebp+var_4]
.text:0000D3A6                 mov     edx, [ecx]
.text:0000D3A8                 mov     eax, [ebp+var_4]
.text:0000D3AB                 mov     ecx, [eax]
.text:0000D3AD                 mov     edx, [edx]
.text:0000D3AF                 mov     esi, esp
.text:0000D3B1                 push    ecx
.text:0000D3B2                 mov     eax, [edx+8]
.text:0000D3B5                 call    eax
.text:0000D3B7                 cmp     esi, esp
.text:0000D3B9                 call    __RTC_CheckEsp
.text:0000D3BE
.text:0000D3BE loc_D3BE:                               ; CODE XREF: CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>(void)+15j
.text:0000D3BE                 pop     esi
.text:0000D3BF                 add     esp, 4
.text:0000D3C2                 cmp     ebp, esp
.text:0000D3C4                 call    __RTC_CheckEsp
.text:0000D3C9                 mov     esp, ebp
.text:0000D3CB                 pop     ebp
.text:0000D3CC                 retn
.text:0000D3CC ??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ endp
.text:0000D3CC
.text:0000D3CC ; ---------------------------------------------------------------------------
.text:0000D3CD                 align 10h
.text:0000D3CD _text           ends
.text:0000D3CD
.text:0000D3D0 ; ===========================================================================
.text:0000D3D0
.text:0000D3D0 ; Segment type: Pure code
.text:0000D3D0 ; Segment permissions: Read/Execute
.text:0000D3D0 _text           segment para public 'CODE' use32
.text:0000D3D0                 assume cs:_text
.text:0000D3D0                 ;org 0D3D0h
.text:0000D3D0 ; COMDAT (pick any)
.text:0000D3D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000D3D0
.text:0000D3D0 ; =============== S U B R O U T I N E =======================================
.text:0000D3D0
.text:0000D3D0 ; Attributes: bp-based frame
.text:0000D3D0
.text:0000D3D0 ; public: __thiscall CMyComPtr<struct IArchiveExtractCallbackMessage>::operator struct IArchiveExtractCallbackMessage *(void)const
.text:0000D3D0                 public ??B?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QBEPAUIArchiveExtractCallbackMessage@@XZ
.text:0000D3D0 ??B?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QBEPAUIArchiveExtractCallbackMessage@@XZ proc near
.text:0000D3D0                                         ; CODE XREF: NArchive::N7z::CRepackStreamBase::CloseFile(void)+7Ep
.text:0000D3D0                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+2351p ...
.text:0000D3D0
.text:0000D3D0 var_4           = dword ptr -4
.text:0000D3D0
.text:0000D3D0                 push    ebp
.text:0000D3D1                 mov     ebp, esp
.text:0000D3D3                 push    ecx
.text:0000D3D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000D3DB                 mov     [ebp+var_4], ecx
.text:0000D3DE                 mov     eax, [ebp+var_4]
.text:0000D3E1                 mov     eax, [eax]
.text:0000D3E3                 mov     esp, ebp
.text:0000D3E5                 pop     ebp
.text:0000D3E6                 retn
.text:0000D3E6 ??B?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QBEPAUIArchiveExtractCallbackMessage@@XZ endp
.text:0000D3E6
.text:0000D3E6 ; ---------------------------------------------------------------------------
.text:0000D3E7                 align 4
.text:0000D3E7 _text           ends
.text:0000D3E7
.text:0000D3E8 ; ===========================================================================
.text:0000D3E8
.text:0000D3E8 ; Segment type: Pure code
.text:0000D3E8 ; Segment permissions: Read/Execute
.text:0000D3E8 _text           segment para public 'CODE' use32
.text:0000D3E8                 assume cs:_text
.text:0000D3E8                 ;org 0D3E8h
.text:0000D3E8 ; COMDAT (pick any)
.text:0000D3E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000D3E8
.text:0000D3E8 ; =============== S U B R O U T I N E =======================================
.text:0000D3E8
.text:0000D3E8 ; Attributes: bp-based frame
.text:0000D3E8
.text:0000D3E8 ; public: struct IArchiveExtractCallbackMessage * * __thiscall CMyComPtr<struct IArchiveExtractCallbackMessage>::operator&(void)
.text:0000D3E8                 public ??I?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAEPAPAUIArchiveExtractCallbackMessage@@XZ
.text:0000D3E8 ??I?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAEPAPAUIArchiveExtractCallbackMessage@@XZ proc near
.text:0000D3E8                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+A6p
.text:0000D3E8
.text:0000D3E8 var_4           = dword ptr -4
.text:0000D3E8
.text:0000D3E8                 push    ebp
.text:0000D3E9                 mov     ebp, esp
.text:0000D3EB                 push    ecx
.text:0000D3EC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000D3F3                 mov     [ebp+var_4], ecx
.text:0000D3F6                 mov     eax, [ebp+var_4]
.text:0000D3F9                 mov     esp, ebp
.text:0000D3FB                 pop     ebp
.text:0000D3FC                 retn
.text:0000D3FC ??I?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAEPAPAUIArchiveExtractCallbackMessage@@XZ endp
.text:0000D3FC
.text:0000D3FC ; ---------------------------------------------------------------------------
.text:0000D3FD                 align 10h
.text:0000D3FD _text           ends
.text:0000D3FD
.text:0000D400 ; ===========================================================================
.text:0000D400
.text:0000D400 ; Segment type: Pure code
.text:0000D400 ; Segment permissions: Read/Execute
.text:0000D400 _text           segment para public 'CODE' use32
.text:0000D400                 assume cs:_text
.text:0000D400                 ;org 0D400h
.text:0000D400 ; COMDAT (pick any)
.text:0000D400                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000D400
.text:0000D400 ; =============== S U B R O U T I N E =======================================
.text:0000D400
.text:0000D400 ; Attributes: bp-based frame
.text:0000D400
.text:0000D400 ; public: struct IArchiveExtractCallbackMessage * __thiscall CMyComPtr<struct IArchiveExtractCallbackMessage>::operator->(void)const
.text:0000D400                 public ??C?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QBEPAUIArchiveExtractCallbackMessage@@XZ
.text:0000D400 ??C?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QBEPAUIArchiveExtractCallbackMessage@@XZ proc near
.text:0000D400                                         ; CODE XREF: NArchive::N7z::CRepackStreamBase::CloseFile(void)+8Dp
.text:0000D400                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+2361p ...
.text:0000D400
.text:0000D400 var_4           = dword ptr -4
.text:0000D400
.text:0000D400                 push    ebp
.text:0000D401                 mov     ebp, esp
.text:0000D403                 push    ecx
.text:0000D404                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000D40B                 mov     [ebp+var_4], ecx
.text:0000D40E                 mov     eax, [ebp+var_4]
.text:0000D411                 mov     eax, [eax]
.text:0000D413                 mov     esp, ebp
.text:0000D415                 pop     ebp
.text:0000D416                 retn
.text:0000D416 ??C?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QBEPAUIArchiveExtractCallbackMessage@@XZ endp
.text:0000D416
.text:0000D416 ; ---------------------------------------------------------------------------
.text:0000D417                 align 4
.text:0000D417 _text           ends
.text:0000D417
.text:0000D418 ; ===========================================================================
.text:0000D418
.text:0000D418 ; Segment type: Pure code
.text:0000D418 ; Segment permissions: Read/Execute
.text:0000D418 _text           segment para public 'CODE' use32
.text:0000D418                 assume cs:_text
.text:0000D418                 ;org 0D418h
.text:0000D418 ; COMDAT (pick any)
.text:0000D418                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000D418
.text:0000D418 ; =============== S U B R O U T I N E =======================================
.text:0000D418
.text:0000D418 ; Attributes: bp-based frame
.text:0000D418
.text:0000D418 ; public: struct IArchiveExtractCallbackMessage * __thiscall CMyComPtr<struct IArchiveExtractCallbackMessage>::operator=(class CMyComPtr<struct IArchiveExtractCallbackMessage> const &)
.text:0000D418                 public ??4?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAEPAUIArchiveExtractCallbackMessage@@ABV0@@Z
.text:0000D418 ??4?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAEPAUIArchiveExtractCallbackMessage@@ABV0@@Z proc near
.text:0000D418                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+2061p
.text:0000D418
.text:0000D418 var_4           = dword ptr -4
.text:0000D418 arg_0           = dword ptr  8
.text:0000D418
.text:0000D418                 push    ebp
.text:0000D419                 mov     ebp, esp
.text:0000D41B                 push    ecx
.text:0000D41C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000D423                 mov     [ebp+var_4], ecx
.text:0000D426                 mov     eax, [ebp+arg_0]
.text:0000D429                 mov     ecx, [eax]
.text:0000D42B                 push    ecx
.text:0000D42C                 mov     ecx, [ebp+var_4]
.text:0000D42F                 call    ??4?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAEPAUIArchiveExtractCallbackMessage@@PAU1@@Z ; CMyComPtr<IArchiveExtractCallbackMessage>::operator=(IArchiveExtractCallbackMessage *)
.text:0000D434                 add     esp, 4
.text:0000D437                 cmp     ebp, esp
.text:0000D439                 call    __RTC_CheckEsp
.text:0000D43E                 mov     esp, ebp
.text:0000D440                 pop     ebp
.text:0000D441                 retn    4
.text:0000D441 ??4?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAEPAUIArchiveExtractCallbackMessage@@ABV0@@Z endp
.text:0000D441
.text:0000D441 _text           ends
.text:0000D441
.text:0000D444 ; ===========================================================================
.text:0000D444
.text:0000D444 ; Segment type: Pure code
.text:0000D444 ; Segment permissions: Read/Execute
.text:0000D444 _text           segment para public 'CODE' use32
.text:0000D444                 assume cs:_text
.text:0000D444                 ;org 0D444h
.text:0000D444 ; COMDAT (pick any)
.text:0000D444                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000D444
.text:0000D444 ; =============== S U B R O U T I N E =======================================
.text:0000D444
.text:0000D444 ; Attributes: bp-based frame
.text:0000D444
.text:0000D444 ; public: __thiscall CMyComPtr<struct ICryptoGetTextPassword>::CMyComPtr<struct ICryptoGetTextPassword>(void)
.text:0000D444                 public ??0?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ
.text:0000D444 ??0?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ proc near
.text:0000D444                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+B8Ap
.text:0000D444                                         ; NArchive::N7z::CThreadDecoder::CThreadDecoder(bool)+8Fp
.text:0000D444
.text:0000D444 var_4           = dword ptr -4
.text:0000D444
.text:0000D444                 push    ebp
.text:0000D445                 mov     ebp, esp
.text:0000D447                 push    ecx
.text:0000D448                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000D44F                 mov     [ebp+var_4], ecx
.text:0000D452                 mov     eax, [ebp+var_4]
.text:0000D455                 mov     dword ptr [eax], 0
.text:0000D45B                 mov     eax, [ebp+var_4]
.text:0000D45E                 mov     esp, ebp
.text:0000D460                 pop     ebp
.text:0000D461                 retn
.text:0000D461 ??0?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ endp
.text:0000D461
.text:0000D461 ; ---------------------------------------------------------------------------
.text:0000D462                 align 4
.text:0000D462 _text           ends
.text:0000D462
.text:0000D464 ; ===========================================================================
.text:0000D464
.text:0000D464 ; Segment type: Pure code
.text:0000D464 ; Segment permissions: Read/Execute
.text:0000D464 _text           segment para public 'CODE' use32
.text:0000D464                 assume cs:_text
.text:0000D464                 ;org 0D464h
.text:0000D464 ; COMDAT (pick any)
.text:0000D464                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000D464
.text:0000D464 ; =============== S U B R O U T I N E =======================================
.text:0000D464
.text:0000D464 ; Attributes: bp-based frame
.text:0000D464
.text:0000D464 ; public: __thiscall CMyComPtr<struct ICryptoGetTextPassword>::~CMyComPtr<struct ICryptoGetTextPassword>(void)
.text:0000D464                 public ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ
.text:0000D464 ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ proc near
.text:0000D464                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+C60p
.text:0000D464                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+D46p ...
.text:0000D464
.text:0000D464 var_4           = dword ptr -4
.text:0000D464
.text:0000D464                 push    ebp
.text:0000D465                 mov     ebp, esp
.text:0000D467                 push    ecx
.text:0000D468                 push    esi
.text:0000D469                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000D470                 mov     [ebp+var_4], ecx
.text:0000D473                 mov     eax, [ebp+var_4]
.text:0000D476                 cmp     dword ptr [eax], 0
.text:0000D479                 jz      short loc_D496
.text:0000D47B                 mov     ecx, [ebp+var_4]
.text:0000D47E                 mov     edx, [ecx]
.text:0000D480                 mov     eax, [ebp+var_4]
.text:0000D483                 mov     ecx, [eax]
.text:0000D485                 mov     edx, [edx]
.text:0000D487                 mov     esi, esp
.text:0000D489                 push    ecx
.text:0000D48A                 mov     eax, [edx+8]
.text:0000D48D                 call    eax
.text:0000D48F                 cmp     esi, esp
.text:0000D491                 call    __RTC_CheckEsp
.text:0000D496
.text:0000D496 loc_D496:                               ; CODE XREF: CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)+15j
.text:0000D496                 pop     esi
.text:0000D497                 add     esp, 4
.text:0000D49A                 cmp     ebp, esp
.text:0000D49C                 call    __RTC_CheckEsp
.text:0000D4A1                 mov     esp, ebp
.text:0000D4A3                 pop     ebp
.text:0000D4A4                 retn
.text:0000D4A4 ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ endp
.text:0000D4A4
.text:0000D4A4 ; ---------------------------------------------------------------------------
.text:0000D4A5                 align 4
.text:0000D4A5 _text           ends
.text:0000D4A5
.text:0000D4A8 ; ===========================================================================
.text:0000D4A8
.text:0000D4A8 ; Segment type: Pure code
.text:0000D4A8 ; Segment permissions: Read/Execute
.text:0000D4A8 _text           segment para public 'CODE' use32
.text:0000D4A8                 assume cs:_text
.text:0000D4A8                 ;org 0D4A8h
.text:0000D4A8 ; COMDAT (pick any)
.text:0000D4A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000D4A8
.text:0000D4A8 ; =============== S U B R O U T I N E =======================================
.text:0000D4A8
.text:0000D4A8 ; Attributes: bp-based frame
.text:0000D4A8
.text:0000D4A8 ; public: __thiscall CMyComPtr<struct ICryptoGetTextPassword>::operator struct ICryptoGetTextPassword *(void)const
.text:0000D4A8                 public ??B?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ
.text:0000D4A8 ??B?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ proc near
.text:0000D4A8                                         ; CODE XREF: NArchive::N7z::CThreadDecoder::Execute(void)+67p
.text:0000D4A8                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1D97p
.text:0000D4A8
.text:0000D4A8 var_4           = dword ptr -4
.text:0000D4A8
.text:0000D4A8                 push    ebp
.text:0000D4A9                 mov     ebp, esp
.text:0000D4AB                 push    ecx
.text:0000D4AC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000D4B3                 mov     [ebp+var_4], ecx
.text:0000D4B6                 mov     eax, [ebp+var_4]
.text:0000D4B9                 mov     eax, [eax]
.text:0000D4BB                 mov     esp, ebp
.text:0000D4BD                 pop     ebp
.text:0000D4BE                 retn
.text:0000D4BE ??B?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ endp
.text:0000D4BE
.text:0000D4BE ; ---------------------------------------------------------------------------
.text:0000D4BF                 align 10h
.text:0000D4BF _text           ends
.text:0000D4BF
.text:0000D4C0 ; ===========================================================================
.text:0000D4C0
.text:0000D4C0 ; Segment type: Pure code
.text:0000D4C0 ; Segment permissions: Read/Execute
.text:0000D4C0 _text           segment para public 'CODE' use32
.text:0000D4C0                 assume cs:_text
.text:0000D4C0                 ;org 0D4C0h
.text:0000D4C0 ; COMDAT (pick any)
.text:0000D4C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000D4C0
.text:0000D4C0 ; =============== S U B R O U T I N E =======================================
.text:0000D4C0
.text:0000D4C0 ; Attributes: bp-based frame
.text:0000D4C0
.text:0000D4C0 ; public: struct ICryptoGetTextPassword * __thiscall CMyComPtr<struct ICryptoGetTextPassword>::operator=(struct ICryptoGetTextPassword *)
.text:0000D4C0                 public ??4?$CMyComPtr@UICryptoGetTextPassword@@@@QAEPAUICryptoGetTextPassword@@PAU1@@Z
.text:0000D4C0 ??4?$CMyComPtr@UICryptoGetTextPassword@@@@QAEPAUICryptoGetTextPassword@@PAU1@@Z proc near
.text:0000D4C0                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+C02p
.text:0000D4C0                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+C14p
.text:0000D4C0
.text:0000D4C0 var_4           = dword ptr -4
.text:0000D4C0 arg_0           = dword ptr  8
.text:0000D4C0
.text:0000D4C0                 push    ebp
.text:0000D4C1                 mov     ebp, esp
.text:0000D4C3                 push    ecx
.text:0000D4C4                 push    esi
.text:0000D4C5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000D4CC                 mov     [ebp+var_4], ecx
.text:0000D4CF                 cmp     [ebp+arg_0], 0
.text:0000D4D3                 jz      short loc_D4EC
.text:0000D4D5                 mov     eax, [ebp+arg_0]
.text:0000D4D8                 mov     ecx, [eax]
.text:0000D4DA                 mov     esi, esp
.text:0000D4DC                 mov     edx, [ebp+arg_0]
.text:0000D4DF                 push    edx
.text:0000D4E0                 mov     eax, [ecx+4]
.text:0000D4E3                 call    eax
.text:0000D4E5                 cmp     esi, esp
.text:0000D4E7                 call    __RTC_CheckEsp
.text:0000D4EC
.text:0000D4EC loc_D4EC:                               ; CODE XREF: CMyComPtr<ICryptoGetTextPassword>::operator=(ICryptoGetTextPassword *)+13j
.text:0000D4EC                 mov     ecx, [ebp+var_4]
.text:0000D4EF                 cmp     dword ptr [ecx], 0
.text:0000D4F2                 jz      short loc_D50F
.text:0000D4F4                 mov     edx, [ebp+var_4]
.text:0000D4F7                 mov     eax, [edx]
.text:0000D4F9                 mov     ecx, [ebp+var_4]
.text:0000D4FC                 mov     edx, [ecx]
.text:0000D4FE                 mov     eax, [eax]
.text:0000D500                 mov     esi, esp
.text:0000D502                 push    edx
.text:0000D503                 mov     ecx, [eax+8]
.text:0000D506                 call    ecx
.text:0000D508                 cmp     esi, esp
.text:0000D50A                 call    __RTC_CheckEsp
.text:0000D50F
.text:0000D50F loc_D50F:                               ; CODE XREF: CMyComPtr<ICryptoGetTextPassword>::operator=(ICryptoGetTextPassword *)+32j
.text:0000D50F                 mov     edx, [ebp+var_4]
.text:0000D512                 mov     eax, [ebp+arg_0]
.text:0000D515                 mov     [edx], eax
.text:0000D517                 mov     eax, [ebp+arg_0]
.text:0000D51A                 pop     esi
.text:0000D51B                 add     esp, 4
.text:0000D51E                 cmp     ebp, esp
.text:0000D520                 call    __RTC_CheckEsp
.text:0000D525                 mov     esp, ebp
.text:0000D527                 pop     ebp
.text:0000D528                 retn    4
.text:0000D528 ??4?$CMyComPtr@UICryptoGetTextPassword@@@@QAEPAUICryptoGetTextPassword@@PAU1@@Z endp
.text:0000D528
.text:0000D528 ; ---------------------------------------------------------------------------
.text:0000D52B                 align 4
.text:0000D52B _text           ends
.text:0000D52B
.text:0000D52C ; ===========================================================================
.text:0000D52C
.text:0000D52C ; Segment type: Pure code
.text:0000D52C ; Segment permissions: Read/Execute
.text:0000D52C _text           segment para public 'CODE' use32
.text:0000D52C                 assume cs:_text
.text:0000D52C                 ;org 0D52Ch
.text:0000D52C ; COMDAT (pick any)
.text:0000D52C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000D52C
.text:0000D52C ; =============== S U B R O U T I N E =======================================
.text:0000D52C
.text:0000D52C ; Attributes: bp-based frame
.text:0000D52C
.text:0000D52C ; public: __thiscall CObjArray<int>::CObjArray<int>(void)
.text:0000D52C                 public ??0?$CObjArray@H@@QAE@XZ
.text:0000D52C ??0?$CObjArray@H@@QAE@XZ proc near      ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+17Dp
.text:0000D52C
.text:0000D52C var_4           = dword ptr -4
.text:0000D52C
.text:0000D52C                 push    ebp
.text:0000D52D                 mov     ebp, esp
.text:0000D52F                 push    ecx
.text:0000D530                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000D537                 mov     [ebp+var_4], ecx
.text:0000D53A                 mov     eax, [ebp+var_4]
.text:0000D53D                 mov     dword ptr [eax], 0
.text:0000D543                 mov     eax, [ebp+var_4]
.text:0000D546                 mov     esp, ebp
.text:0000D548                 pop     ebp
.text:0000D549                 retn
.text:0000D549 ??0?$CObjArray@H@@QAE@XZ endp
.text:0000D549
.text:0000D549 ; ---------------------------------------------------------------------------
.text:0000D54A                 align 4
.text:0000D54A _text           ends
.text:0000D54A
.text:0000D54C ; ===========================================================================
.text:0000D54C
.text:0000D54C ; Segment type: Pure code
.text:0000D54C ; Segment permissions: Read/Execute
.text:0000D54C _text           segment para public 'CODE' use32
.text:0000D54C                 assume cs:_text
.text:0000D54C                 ;org 0D54Ch
.text:0000D54C ; COMDAT (pick any)
.text:0000D54C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000D54C
.text:0000D54C ; =============== S U B R O U T I N E =======================================
.text:0000D54C
.text:0000D54C ; Attributes: bp-based frame
.text:0000D54C
.text:0000D54C ; public: __thiscall CObjArray<int>::~CObjArray<int>(void)
.text:0000D54C                 public ??1?$CObjArray@H@@QAE@XZ
.text:0000D54C ??1?$CObjArray@H@@QAE@XZ proc near      ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+6ACp
.text:0000D54C                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+7D5p ...
.text:0000D54C
.text:0000D54C var_8           = dword ptr -8
.text:0000D54C var_4           = dword ptr -4
.text:0000D54C
.text:0000D54C                 push    ebp
.text:0000D54D                 mov     ebp, esp
.text:0000D54F                 sub     esp, 8
.text:0000D552                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000D559                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000D560                 mov     [ebp+var_4], ecx
.text:0000D563                 mov     eax, [ebp+var_4]
.text:0000D566                 mov     ecx, [eax]
.text:0000D568                 mov     [ebp+var_8], ecx
.text:0000D56B                 mov     edx, [ebp+var_8]
.text:0000D56E                 push    edx             ; void *
.text:0000D56F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000D574                 add     esp, 4
.text:0000D577                 add     esp, 8
.text:0000D57A                 cmp     ebp, esp
.text:0000D57C                 call    __RTC_CheckEsp
.text:0000D581                 mov     esp, ebp
.text:0000D583                 pop     ebp
.text:0000D584                 retn
.text:0000D584 ??1?$CObjArray@H@@QAE@XZ endp
.text:0000D584
.text:0000D584 ; ---------------------------------------------------------------------------
.text:0000D585                 align 4
.text:0000D585 _text           ends
.text:0000D585
.text:0000D588 ; ===========================================================================
.text:0000D588
.text:0000D588 ; Segment type: Pure code
.text:0000D588 ; Segment permissions: Read/Execute
.text:0000D588 _text           segment para public 'CODE' use32
.text:0000D588                 assume cs:_text
.text:0000D588                 ;org 0D588h
.text:0000D588 ; COMDAT (pick any)
.text:0000D588                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000D588
.text:0000D588 ; =============== S U B R O U T I N E =======================================
.text:0000D588
.text:0000D588 ; Attributes: bp-based frame
.text:0000D588
.text:0000D588 ; public: __thiscall CObjArray<int>::operator int *(void)
.text:0000D588                 public ??B?$CObjArray@H@@QAEPAHXZ
.text:0000D588 ??B?$CObjArray@H@@QAEPAHXZ proc near    ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+214p
.text:0000D588                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+276p ...
.text:0000D588
.text:0000D588 var_4           = dword ptr -4
.text:0000D588
.text:0000D588                 push    ebp
.text:0000D589                 mov     ebp, esp
.text:0000D58B                 push    ecx
.text:0000D58C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000D593                 mov     [ebp+var_4], ecx
.text:0000D596                 mov     eax, [ebp+var_4]
.text:0000D599                 mov     eax, [eax]
.text:0000D59B                 mov     esp, ebp
.text:0000D59D                 pop     ebp
.text:0000D59E                 retn
.text:0000D59E ??B?$CObjArray@H@@QAEPAHXZ endp
.text:0000D59E
.text:0000D59E ; ---------------------------------------------------------------------------
.text:0000D59F                 align 10h
.text:0000D59F _text           ends
.text:0000D59F
.text:0000D5A0 ; ===========================================================================
.text:0000D5A0
.text:0000D5A0 ; Segment type: Pure code
.text:0000D5A0 ; Segment permissions: Read/Execute
.text:0000D5A0 _text           segment para public 'CODE' use32
.text:0000D5A0                 assume cs:_text
.text:0000D5A0                 ;org 0D5A0h
.text:0000D5A0 ; COMDAT (pick any)
.text:0000D5A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000D5A0
.text:0000D5A0 ; =============== S U B R O U T I N E =======================================
.text:0000D5A0
.text:0000D5A0 ; Attributes: bp-based frame
.text:0000D5A0
.text:0000D5A0 ; public: void __thiscall CObjArray<int>::Alloc(unsigned int)
.text:0000D5A0                 public ?Alloc@?$CObjArray@H@@QAEXI@Z
.text:0000D5A0 ?Alloc@?$CObjArray@H@@QAEXI@Z proc near ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1DEp
.text:0000D5A0
.text:0000D5A0 var_C           = dword ptr -0Ch
.text:0000D5A0 var_8           = dword ptr -8
.text:0000D5A0 var_4           = dword ptr -4
.text:0000D5A0 arg_0           = dword ptr  8
.text:0000D5A0
.text:0000D5A0                 push    ebp
.text:0000D5A1                 mov     ebp, esp
.text:0000D5A3                 sub     esp, 0Ch
.text:0000D5A6                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000D5AD                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000D5B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000D5BB                 mov     [ebp+var_4], ecx
.text:0000D5BE                 mov     eax, [ebp+var_4]
.text:0000D5C1                 mov     ecx, [eax]
.text:0000D5C3                 mov     [ebp+var_8], ecx
.text:0000D5C6                 mov     edx, [ebp+var_8]
.text:0000D5C9                 push    edx             ; void *
.text:0000D5CA                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000D5CF                 add     esp, 4
.text:0000D5D2                 mov     eax, [ebp+var_4]
.text:0000D5D5                 mov     dword ptr [eax], 0
.text:0000D5DB                 xor     ecx, ecx
.text:0000D5DD                 mov     eax, [ebp+arg_0]
.text:0000D5E0                 mov     edx, 4
.text:0000D5E5                 mul     edx
.text:0000D5E7                 seto    cl
.text:0000D5EA                 neg     ecx
.text:0000D5EC                 or      ecx, eax
.text:0000D5EE                 push    ecx             ; unsigned int
.text:0000D5EF                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000D5F4                 add     esp, 4
.text:0000D5F7                 mov     [ebp+var_C], eax
.text:0000D5FA                 mov     eax, [ebp+var_4]
.text:0000D5FD                 mov     ecx, [ebp+var_C]
.text:0000D600                 mov     [eax], ecx
.text:0000D602                 add     esp, 0Ch
.text:0000D605                 cmp     ebp, esp
.text:0000D607                 call    __RTC_CheckEsp
.text:0000D60C                 mov     esp, ebp
.text:0000D60E                 pop     ebp
.text:0000D60F                 retn    4
.text:0000D60F ?Alloc@?$CObjArray@H@@QAEXI@Z endp
.text:0000D60F
.text:0000D60F ; ---------------------------------------------------------------------------
.text:0000D612                 align 4
.text:0000D612 _text           ends
.text:0000D612
.text:0000D614 ; ===========================================================================
.text:0000D614
.text:0000D614 ; Segment type: Pure code
.text:0000D614 ; Segment permissions: Read/Execute
.text:0000D614 _text           segment para public 'CODE' use32
.text:0000D614                 assume cs:_text
.text:0000D614                 ;org 0D614h
.text:0000D614 ; COMDAT (pick any)
.text:0000D614                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000D614
.text:0000D614 ; =============== S U B R O U T I N E =======================================
.text:0000D614
.text:0000D614 ; Attributes: bp-based frame
.text:0000D614
.text:0000D614 ; public: unsigned int __thiscall CObjectVector<struct NArchive::N7z::CSolidGroup>::Size(void)const
.text:0000D614                 public ?Size@?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QBEIXZ
.text:0000D614 ?Size@?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QBEIXZ proc near
.text:0000D614                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+453p
.text:0000D614                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+B32p
.text:0000D614
.text:0000D614 var_4           = dword ptr -4
.text:0000D614
.text:0000D614                 push    ebp
.text:0000D615                 mov     ebp, esp
.text:0000D617                 push    ecx
.text:0000D618                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000D61F                 mov     [ebp+var_4], ecx
.text:0000D622                 mov     ecx, [ebp+var_4]
.text:0000D625                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:0000D62A                 add     esp, 4
.text:0000D62D                 cmp     ebp, esp
.text:0000D62F                 call    __RTC_CheckEsp
.text:0000D634                 mov     esp, ebp
.text:0000D636                 pop     ebp
.text:0000D637                 retn
.text:0000D637 ?Size@?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QBEIXZ endp
.text:0000D637
.text:0000D637 _text           ends
.text:0000D637
.text:0000D638 ; ===========================================================================
.text:0000D638
.text:0000D638 ; Segment type: Pure code
.text:0000D638 ; Segment permissions: Read/Execute
.text:0000D638 _text           segment para public 'CODE' use32
.text:0000D638                 assume cs:_text
.text:0000D638                 ;org 0D638h
.text:0000D638 ; COMDAT (pick any)
.text:0000D638                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000D638
.text:0000D638 ; =============== S U B R O U T I N E =======================================
.text:0000D638
.text:0000D638 ; Attributes: bp-based frame
.text:0000D638
.text:0000D638 ; public: __thiscall CObjectVector<struct NArchive::N7z::CSolidGroup>::CObjectVector<struct NArchive::N7z::CSolidGroup>(void)
.text:0000D638                 public ??0?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ
.text:0000D638 ??0?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ proc near
.text:0000D638                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1B5p
.text:0000D638
.text:0000D638 var_4           = dword ptr -4
.text:0000D638
.text:0000D638                 push    ebp
.text:0000D639                 mov     ebp, esp
.text:0000D63B                 push    ecx
.text:0000D63C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000D643                 mov     [ebp+var_4], ecx
.text:0000D646                 mov     ecx, [ebp+var_4]
.text:0000D649                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:0000D64E                 mov     eax, [ebp+var_4]
.text:0000D651                 add     esp, 4
.text:0000D654                 cmp     ebp, esp
.text:0000D656                 call    __RTC_CheckEsp
.text:0000D65B                 mov     esp, ebp
.text:0000D65D                 pop     ebp
.text:0000D65E                 retn
.text:0000D65E ??0?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ endp
.text:0000D65E
.text:0000D65E ; ---------------------------------------------------------------------------
.text:0000D65F                 align 10h
.text:0000D65F _text           ends
.text:0000D65F
.text:0000D660 ; ===========================================================================
.text:0000D660
.text:0000D660 ; Segment type: Pure code
.text:0000D660 ; Segment permissions: Read/Execute
.text:0000D660 _text           segment para public 'CODE' use32
.text:0000D660                 assume cs:_text
.text:0000D660                 ;org 0D660h
.text:0000D660 ; COMDAT (pick any)
.text:0000D660                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000D660
.text:0000D660 ; =============== S U B R O U T I N E =======================================
.text:0000D660
.text:0000D660 ; Attributes: bp-based frame
.text:0000D660
.text:0000D660 ; public: struct NArchive::N7z::CSolidGroup & __thiscall CObjectVector<struct NArchive::N7z::CSolidGroup>::operator[](unsigned int)
.text:0000D660                 public ??A?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAEAAUCSolidGroup@N7z@NArchive@@I@Z
.text:0000D660 ??A?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAEAAUCSolidGroup@N7z@NArchive@@I@Z proc near
.text:0000D660                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+482p
.text:0000D660                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+B5Ap ...
.text:0000D660
.text:0000D660 var_4           = dword ptr -4
.text:0000D660 arg_0           = dword ptr  8
.text:0000D660
.text:0000D660                 push    ebp
.text:0000D661                 mov     ebp, esp
.text:0000D663                 push    ecx
.text:0000D664                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000D66B                 mov     [ebp+var_4], ecx
.text:0000D66E                 mov     eax, [ebp+arg_0]
.text:0000D671                 push    eax
.text:0000D672                 mov     ecx, [ebp+var_4]
.text:0000D675                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:0000D67A                 mov     eax, [eax]
.text:0000D67C                 add     esp, 4
.text:0000D67F                 cmp     ebp, esp
.text:0000D681                 call    __RTC_CheckEsp
.text:0000D686                 mov     esp, ebp
.text:0000D688                 pop     ebp
.text:0000D689                 retn    4
.text:0000D689 ??A?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAEAAUCSolidGroup@N7z@NArchive@@I@Z endp
.text:0000D689
.text:0000D689 _text           ends
.text:0000D689
.text:0000D68C ; ===========================================================================
.text:0000D68C
.text:0000D68C ; Segment type: Pure code
.text:0000D68C ; Segment permissions: Read/Execute
.text:0000D68C _text           segment para public 'CODE' use32
.text:0000D68C                 assume cs:_text
.text:0000D68C                 ;org 0D68Ch
.text:0000D68C ; COMDAT (pick any)
.text:0000D68C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000D68C
.text:0000D68C ; =============== S U B R O U T I N E =======================================
.text:0000D68C
.text:0000D68C ; Attributes: bp-based frame
.text:0000D68C
.text:0000D68C ; public: struct NArchive::N7z::CSolidGroup & __thiscall CObjectVector<struct NArchive::N7z::CSolidGroup>::AddNew(void)
.text:0000D68C                 public ?AddNew@?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAEAAUCSolidGroup@N7z@NArchive@@XZ
.text:0000D68C ?AddNew@?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAEAAUCSolidGroup@N7z@NArchive@@XZ proc near
.text:0000D68C                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+463p
.text:0000D68C                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+B42p
.text:0000D68C
.text:0000D68C var_20          = dword ptr -20h
.text:0000D68C var_1C          = dword ptr -1Ch
.text:0000D68C var_18          = dword ptr -18h
.text:0000D68C var_14          = dword ptr -14h
.text:0000D68C var_10          = dword ptr -10h
.text:0000D68C var_C           = dword ptr -0Ch
.text:0000D68C var_4           = dword ptr -4
.text:0000D68C
.text:0000D68C                 push    ebp
.text:0000D68D                 mov     ebp, esp
.text:0000D68F                 push    0FFFFFFFFh
.text:0000D691                 push    offset __ehhandler$?AddNew@?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAEAAUCSolidGroup@N7z@NArchive@@XZ
.text:0000D696                 mov     eax, large fs:0
.text:0000D69C                 push    eax
.text:0000D69D                 sub     esp, 14h
.text:0000D6A0                 mov     eax, 0CCCCCCCCh
.text:0000D6A5                 mov     [ebp+var_20], eax
.text:0000D6A8                 mov     [ebp+var_1C], eax
.text:0000D6AB                 mov     [ebp+var_18], eax
.text:0000D6AE                 mov     [ebp+var_14], eax
.text:0000D6B1                 mov     [ebp+var_10], eax
.text:0000D6B4                 mov     eax, dword ptr ds:___security_cookie
.text:0000D6B9                 xor     eax, ebp
.text:0000D6BB                 push    eax
.text:0000D6BC                 lea     eax, [ebp+var_C]
.text:0000D6BF                 mov     large fs:0, eax
.text:0000D6C5                 mov     [ebp+var_10], ecx
.text:0000D6C8                 push    18h             ; unsigned int
.text:0000D6CA                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000D6CF                 add     esp, 4
.text:0000D6D2                 mov     [ebp+var_1C], eax
.text:0000D6D5                 mov     [ebp+var_4], 0
.text:0000D6DC                 cmp     [ebp+var_1C], 0
.text:0000D6E0                 jz      short loc_D6EF
.text:0000D6E2                 mov     ecx, [ebp+var_1C] ; this
.text:0000D6E5                 call    ??0CSolidGroup@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CSolidGroup::CSolidGroup(void)
.text:0000D6EA                 mov     [ebp+var_20], eax
.text:0000D6ED                 jmp     short loc_D6F6
.text:0000D6EF ; ---------------------------------------------------------------------------
.text:0000D6EF
.text:0000D6EF loc_D6EF:                               ; CODE XREF: CObjectVector<NArchive::N7z::CSolidGroup>::AddNew(void)+54j
.text:0000D6EF                 mov     [ebp+var_20], 0
.text:0000D6F6
.text:0000D6F6 loc_D6F6:                               ; CODE XREF: CObjectVector<NArchive::N7z::CSolidGroup>::AddNew(void)+61j
.text:0000D6F6                 mov     eax, [ebp+var_20]
.text:0000D6F9                 mov     [ebp+var_18], eax
.text:0000D6FC                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000D703                 mov     ecx, [ebp+var_18]
.text:0000D706                 mov     [ebp+var_14], ecx
.text:0000D709                 mov     edx, [ebp+var_14]
.text:0000D70C                 push    edx
.text:0000D70D                 mov     ecx, [ebp+var_10]
.text:0000D710                 call    ?Add@?$CRecordVector@PAX@@QAEIQAX@Z ; CRecordVector<void *>::Add(void * const)
.text:0000D715                 mov     eax, [ebp+var_14]
.text:0000D718                 mov     ecx, [ebp+var_C]
.text:0000D71B                 mov     large fs:0, ecx
.text:0000D722                 pop     ecx
.text:0000D723                 add     esp, 20h
.text:0000D726                 cmp     ebp, esp
.text:0000D728                 call    __RTC_CheckEsp
.text:0000D72D                 mov     esp, ebp
.text:0000D72F                 pop     ebp
.text:0000D730                 retn
.text:0000D730 ?AddNew@?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAEAAUCSolidGroup@N7z@NArchive@@XZ endp
.text:0000D730
.text:0000D730 ; ---------------------------------------------------------------------------
.text:0000D731                 align 4
.text:0000D731 _text           ends
.text:0000D731
.text$x:0000D734 ; ===========================================================================
.text$x:0000D734
.text$x:0000D734 ; Segment type: Pure code
.text$x:0000D734 ; Segment permissions: Read/Execute
.text$x:0000D734 _text$x         segment para public 'CODE' use32
.text$x:0000D734                 assume cs:_text$x
.text$x:0000D734                 ;org 0D734h
.text$x:0000D734 ; COMDAT (pick associative to section at D68C)
.text$x:0000D734                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000D734
.text$x:0000D734 ; =============== S U B R O U T I N E =======================================
.text$x:0000D734
.text$x:0000D734
.text$x:0000D734 __unwindfunclet$?AddNew@?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAEAAUCSolidGroup@N7z@NArchive@@XZ$0 proc near
.text$x:0000D734                                         ; DATA XREF: .xdata$x:0000D760o
.text$x:0000D734                 mov     eax, [ebp-1Ch]
.text$x:0000D737                 push    eax             ; void *
.text$x:0000D738                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000D73D                 pop     ecx
.text$x:0000D73E                 retn
.text$x:0000D73E __unwindfunclet$?AddNew@?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAEAAUCSolidGroup@N7z@NArchive@@XZ$0 endp
.text$x:0000D73E
.text$x:0000D73F
.text$x:0000D73F ; =============== S U B R O U T I N E =======================================
.text$x:0000D73F
.text$x:0000D73F
.text$x:0000D73F __ehhandler$?AddNew@?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAEAAUCSolidGroup@N7z@NArchive@@XZ proc near
.text$x:0000D73F                                         ; DATA XREF: CObjectVector<NArchive::N7z::CSolidGroup>::AddNew(void)+5o
.text$x:0000D73F
.text$x:0000D73F arg_4           = dword ptr  8
.text$x:0000D73F
.text$x:0000D73F                 mov     edx, [esp+arg_4]
.text$x:0000D743                 lea     eax, [edx+0Ch]
.text$x:0000D746                 mov     ecx, [edx-18h]
.text$x:0000D749                 xor     ecx, eax
.text$x:0000D74B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000D750                 mov     eax, offset __ehfuncinfo$?AddNew@?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAEAAUCSolidGroup@N7z@NArchive@@XZ
.text$x:0000D755                 jmp     ___CxxFrameHandler3
.text$x:0000D755 __ehhandler$?AddNew@?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAEAAUCSolidGroup@N7z@NArchive@@XZ endp
.text$x:0000D755
.text$x:0000D755 ; ---------------------------------------------------------------------------
.text$x:0000D75A                 align 4
.text$x:0000D75A _text$x         ends
.text$x:0000D75A
.xdata$x:0000D75C ; ===========================================================================
.xdata$x:0000D75C
.xdata$x:0000D75C ; Segment type: Pure data
.xdata$x:0000D75C ; Segment permissions: Read
.xdata$x:0000D75C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D75C                 assume cs:_xdata$x
.xdata$x:0000D75C                 ;org 0D75Ch
.xdata$x:0000D75C ; COMDAT (pick associative to section at D68C)
.xdata$x:0000D75C __unwindtable$?AddNew@?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAEAAUCSolidGroup@N7z@NArchive@@XZ db 0FFh
.xdata$x:0000D75C                                         ; DATA XREF: .xdata$x:0000D76Co
.xdata$x:0000D75D                 db 0FFh
.xdata$x:0000D75E                 db 0FFh
.xdata$x:0000D75F                 db 0FFh
.xdata$x:0000D760                 dd offset __unwindfunclet$?AddNew@?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAEAAUCSolidGroup@N7z@NArchive@@XZ$0
.xdata$x:0000D764 __ehfuncinfo$?AddNew@?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAEAAUCSolidGroup@N7z@NArchive@@XZ db  22h ; "
.xdata$x:0000D764                                         ; DATA XREF: __ehhandler$?AddNew@?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAEAAUCSolidGroup@N7z@NArchive@@XZ+11o
.xdata$x:0000D765                 db    5
.xdata$x:0000D766                 db  93h ; ô
.xdata$x:0000D767                 db  19h
.xdata$x:0000D768                 db    1
.xdata$x:0000D769                 db    0
.xdata$x:0000D76A                 db    0
.xdata$x:0000D76B                 db    0
.xdata$x:0000D76C                 dd offset __unwindtable$?AddNew@?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAEAAUCSolidGroup@N7z@NArchive@@XZ
.xdata$x:0000D770                 db    0
.xdata$x:0000D771                 db    0
.xdata$x:0000D772                 db    0
.xdata$x:0000D773                 db    0
.xdata$x:0000D774                 db    0
.xdata$x:0000D775                 db    0
.xdata$x:0000D776                 db    0
.xdata$x:0000D777                 db    0
.xdata$x:0000D778                 db    0
.xdata$x:0000D779                 db    0
.xdata$x:0000D77A                 db    0
.xdata$x:0000D77B                 db    0
.xdata$x:0000D77C                 db    0
.xdata$x:0000D77D                 db    0
.xdata$x:0000D77E                 db    0
.xdata$x:0000D77F                 db    0
.xdata$x:0000D780                 db    0
.xdata$x:0000D781                 db    0
.xdata$x:0000D782                 db    0
.xdata$x:0000D783                 db    0
.xdata$x:0000D784                 db    1
.xdata$x:0000D785                 db    0
.xdata$x:0000D786                 db    0
.xdata$x:0000D787                 db    0
.xdata$x:0000D787 _xdata$x        ends
.xdata$x:0000D787
.text:0000D788 ; ===========================================================================
.text:0000D788
.text:0000D788 ; Segment type: Pure code
.text:0000D788 ; Segment permissions: Read/Execute
.text:0000D788 _text           segment para public 'CODE' use32
.text:0000D788                 assume cs:_text
.text:0000D788                 ;org 0D788h
.text:0000D788 ; COMDAT (pick any)
.text:0000D788                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000D788
.text:0000D788 ; =============== S U B R O U T I N E =======================================
.text:0000D788
.text:0000D788 ; Attributes: bp-based frame
.text:0000D788
.text:0000D788 ; public: __thiscall CObjectVector<struct NArchive::N7z::CSolidGroup>::~CObjectVector<struct NArchive::N7z::CSolidGroup>(void)
.text:0000D788                 public ??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ
.text:0000D788 ??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ proc near
.text:0000D788                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+694p
.text:0000D788                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+7BDp ...
.text:0000D788
.text:0000D788 var_20          = dword ptr -20h
.text:0000D788 var_1C          = dword ptr -1Ch
.text:0000D788 var_18          = dword ptr -18h
.text:0000D788 var_14          = dword ptr -14h
.text:0000D788 var_10          = dword ptr -10h
.text:0000D788 var_C           = dword ptr -0Ch
.text:0000D788 var_4           = dword ptr -4
.text:0000D788
.text:0000D788                 push    ebp
.text:0000D789                 mov     ebp, esp
.text:0000D78B                 push    0FFFFFFFFh
.text:0000D78D                 push    offset __ehhandler$??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ
.text:0000D792                 mov     eax, large fs:0
.text:0000D798                 push    eax
.text:0000D799                 sub     esp, 14h
.text:0000D79C                 mov     eax, 0CCCCCCCCh
.text:0000D7A1                 mov     [ebp+var_20], eax
.text:0000D7A4                 mov     [ebp+var_1C], eax
.text:0000D7A7                 mov     [ebp+var_18], eax
.text:0000D7AA                 mov     [ebp+var_14], eax
.text:0000D7AD                 mov     [ebp+var_10], eax
.text:0000D7B0                 mov     eax, dword ptr ds:___security_cookie
.text:0000D7B5                 xor     eax, ebp
.text:0000D7B7                 push    eax
.text:0000D7B8                 lea     eax, [ebp+var_C]
.text:0000D7BB                 mov     large fs:0, eax
.text:0000D7C1                 mov     [ebp+var_10], ecx
.text:0000D7C4                 mov     [ebp+var_4], 0
.text:0000D7CB                 mov     ecx, [ebp+var_10]
.text:0000D7CE                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:0000D7D3                 mov     [ebp+var_14], eax
.text:0000D7D6
.text:0000D7D6 loc_D7D6:                               ; CODE XREF: CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>(void):loc_D818j
.text:0000D7D6                 cmp     [ebp+var_14], 0
.text:0000D7DA                 jz      short loc_D81A
.text:0000D7DC                 mov     eax, [ebp+var_14]
.text:0000D7DF                 sub     eax, 1
.text:0000D7E2                 mov     [ebp+var_14], eax
.text:0000D7E5                 mov     ecx, [ebp+var_14]
.text:0000D7E8                 push    ecx
.text:0000D7E9                 mov     ecx, [ebp+var_10]
.text:0000D7EC                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:0000D7F1                 mov     edx, [eax]
.text:0000D7F3                 mov     [ebp+var_1C], edx
.text:0000D7F6                 mov     eax, [ebp+var_1C]
.text:0000D7F9                 mov     [ebp+var_18], eax
.text:0000D7FC                 cmp     [ebp+var_18], 0
.text:0000D800                 jz      short loc_D811
.text:0000D802                 push    1
.text:0000D804                 mov     ecx, [ebp+var_18]
.text:0000D807                 call    ??_GCSolidGroup@N7z@NArchive@@QAEPAXI@Z ; NArchive::N7z::CSolidGroup::`scalar deleting destructor'(uint)
.text:0000D80C                 mov     [ebp+var_20], eax
.text:0000D80F                 jmp     short loc_D818
.text:0000D811 ; ---------------------------------------------------------------------------
.text:0000D811
.text:0000D811 loc_D811:                               ; CODE XREF: CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>(void)+78j
.text:0000D811                 mov     [ebp+var_20], 0
.text:0000D818
.text:0000D818 loc_D818:                               ; CODE XREF: CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>(void)+87j
.text:0000D818                 jmp     short loc_D7D6
.text:0000D81A ; ---------------------------------------------------------------------------
.text:0000D81A
.text:0000D81A loc_D81A:                               ; CODE XREF: CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>(void)+52j
.text:0000D81A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000D821                 mov     ecx, [ebp+var_10]
.text:0000D824                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:0000D829                 mov     ecx, [ebp+var_C]
.text:0000D82C                 mov     large fs:0, ecx
.text:0000D833                 pop     ecx
.text:0000D834                 add     esp, 20h
.text:0000D837                 cmp     ebp, esp
.text:0000D839                 call    __RTC_CheckEsp
.text:0000D83E                 mov     esp, ebp
.text:0000D840                 pop     ebp
.text:0000D841                 retn
.text:0000D841 ??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ endp
.text:0000D841
.text:0000D841 ; ---------------------------------------------------------------------------
.text:0000D842                 align 4
.text:0000D842 _text           ends
.text:0000D842
.text$x:0000D844 ; ===========================================================================
.text$x:0000D844
.text$x:0000D844 ; Segment type: Pure code
.text$x:0000D844 ; Segment permissions: Read/Execute
.text$x:0000D844 _text$x         segment para public 'CODE' use32
.text$x:0000D844                 assume cs:_text$x
.text$x:0000D844                 ;org 0D844h
.text$x:0000D844 ; COMDAT (pick associative to section at D788)
.text$x:0000D844                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000D844
.text$x:0000D844 ; =============== S U B R O U T I N E =======================================
.text$x:0000D844
.text$x:0000D844
.text$x:0000D844 __unwindfunclet$??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ$0 proc near
.text$x:0000D844                                         ; DATA XREF: .xdata$x:0000D86Co
.text$x:0000D844                 mov     ecx, [ebp-10h]
.text$x:0000D847                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:0000D847 __unwindfunclet$??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ$0 endp
.text$x:0000D847
.text$x:0000D84C
.text$x:0000D84C ; =============== S U B R O U T I N E =======================================
.text$x:0000D84C
.text$x:0000D84C
.text$x:0000D84C __ehhandler$??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ proc near
.text$x:0000D84C                                         ; DATA XREF: CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>(void)+5o
.text$x:0000D84C
.text$x:0000D84C arg_4           = dword ptr  8
.text$x:0000D84C
.text$x:0000D84C                 mov     edx, [esp+arg_4]
.text$x:0000D850                 lea     eax, [edx+0Ch]
.text$x:0000D853                 mov     ecx, [edx-18h]
.text$x:0000D856                 xor     ecx, eax
.text$x:0000D858                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000D85D                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ
.text$x:0000D862                 jmp     ___CxxFrameHandler3
.text$x:0000D862 __ehhandler$??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ endp
.text$x:0000D862
.text$x:0000D862 ; ---------------------------------------------------------------------------
.text$x:0000D867                 align 4
.text$x:0000D867 _text$x         ends
.text$x:0000D867
.xdata$x:0000D868 ; ===========================================================================
.xdata$x:0000D868
.xdata$x:0000D868 ; Segment type: Pure data
.xdata$x:0000D868 ; Segment permissions: Read
.xdata$x:0000D868 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D868                 assume cs:_xdata$x
.xdata$x:0000D868                 ;org 0D868h
.xdata$x:0000D868 ; COMDAT (pick associative to section at D788)
.xdata$x:0000D868 __unwindtable$??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ db 0FFh
.xdata$x:0000D868                                         ; DATA XREF: .xdata$x:0000D878o
.xdata$x:0000D869                 db 0FFh
.xdata$x:0000D86A                 db 0FFh
.xdata$x:0000D86B                 db 0FFh
.xdata$x:0000D86C                 dd offset __unwindfunclet$??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ$0
.xdata$x:0000D870 __ehfuncinfo$??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ db  22h ; "
.xdata$x:0000D870                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ+11o
.xdata$x:0000D871                 db    5
.xdata$x:0000D872                 db  93h ; ô
.xdata$x:0000D873                 db  19h
.xdata$x:0000D874                 db    1
.xdata$x:0000D875                 db    0
.xdata$x:0000D876                 db    0
.xdata$x:0000D877                 db    0
.xdata$x:0000D878                 dd offset __unwindtable$??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ
.xdata$x:0000D87C                 db    0
.xdata$x:0000D87D                 db    0
.xdata$x:0000D87E                 db    0
.xdata$x:0000D87F                 db    0
.xdata$x:0000D880                 db    0
.xdata$x:0000D881                 db    0
.xdata$x:0000D882                 db    0
.xdata$x:0000D883                 db    0
.xdata$x:0000D884                 db    0
.xdata$x:0000D885                 db    0
.xdata$x:0000D886                 db    0
.xdata$x:0000D887                 db    0
.xdata$x:0000D888                 db    0
.xdata$x:0000D889                 db    0
.xdata$x:0000D88A                 db    0
.xdata$x:0000D88B                 db    0
.xdata$x:0000D88C                 db    0
.xdata$x:0000D88D                 db    0
.xdata$x:0000D88E                 db    0
.xdata$x:0000D88F                 db    0
.xdata$x:0000D890                 db    1
.xdata$x:0000D891                 db    0
.xdata$x:0000D892                 db    0
.xdata$x:0000D893                 db    0
.xdata$x:0000D893 _xdata$x        ends
.xdata$x:0000D893
.text:0000D894 ; ===========================================================================
.text:0000D894
.text:0000D894 ; Segment type: Pure code
.text:0000D894 ; Segment permissions: Read/Execute
.text:0000D894 _text           segment para public 'CODE' use32
.text:0000D894                 assume cs:_text
.text:0000D894                 ;org 0D894h
.text:0000D894 ; COMDAT (pick any)
.text:0000D894                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000D894
.text:0000D894 ; =============== S U B R O U T I N E =======================================
.text:0000D894
.text:0000D894 ; Attributes: bp-based frame
.text:0000D894
.text:0000D894 ; public: __thiscall CRecordVector<struct NArchive::N7z::CRefItem>::CRecordVector<struct NArchive::N7z::CRefItem>(void)
.text:0000D894                 public ??0?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAE@XZ
.text:0000D894 ??0?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAE@XZ proc near
.text:0000D894                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+2FB5p
.text:0000D894
.text:0000D894 var_4           = dword ptr -4
.text:0000D894
.text:0000D894                 push    ebp
.text:0000D895                 mov     ebp, esp
.text:0000D897                 push    ecx
.text:0000D898                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000D89F                 mov     [ebp+var_4], ecx
.text:0000D8A2                 mov     eax, [ebp+var_4]
.text:0000D8A5                 mov     dword ptr [eax], 0
.text:0000D8AB                 mov     ecx, [ebp+var_4]
.text:0000D8AE                 mov     dword ptr [ecx+4], 0
.text:0000D8B5                 mov     edx, [ebp+var_4]
.text:0000D8B8                 mov     dword ptr [edx+8], 0
.text:0000D8BF                 mov     eax, [ebp+var_4]
.text:0000D8C2                 mov     esp, ebp
.text:0000D8C4                 pop     ebp
.text:0000D8C5                 retn
.text:0000D8C5 ??0?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAE@XZ endp
.text:0000D8C5
.text:0000D8C5 ; ---------------------------------------------------------------------------
.text:0000D8C6                 align 4
.text:0000D8C6 _text           ends
.text:0000D8C6
.text:0000D8C8 ; ===========================================================================
.text:0000D8C8
.text:0000D8C8 ; Segment type: Pure code
.text:0000D8C8 ; Segment permissions: Read/Execute
.text:0000D8C8 _text           segment para public 'CODE' use32
.text:0000D8C8                 assume cs:_text
.text:0000D8C8                 ;org 0D8C8h
.text:0000D8C8 ; COMDAT (pick any)
.text:0000D8C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000D8C8
.text:0000D8C8 ; =============== S U B R O U T I N E =======================================
.text:0000D8C8
.text:0000D8C8 ; Attributes: bp-based frame
.text:0000D8C8
.text:0000D8C8 ; public: void __thiscall CRecordVector<struct NArchive::N7z::CRefItem>::ClearAndSetSize(unsigned int)
.text:0000D8C8                 public ?ClearAndSetSize@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEXI@Z
.text:0000D8C8 ?ClearAndSetSize@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEXI@Z proc near
.text:0000D8C8                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+2FCBp
.text:0000D8C8
.text:0000D8C8 var_4           = dword ptr -4
.text:0000D8C8 arg_0           = dword ptr  8
.text:0000D8C8
.text:0000D8C8                 push    ebp
.text:0000D8C9                 mov     ebp, esp
.text:0000D8CB                 push    ecx
.text:0000D8CC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000D8D3                 mov     [ebp+var_4], ecx
.text:0000D8D6                 mov     eax, [ebp+arg_0]
.text:0000D8D9                 push    eax
.text:0000D8DA                 mov     ecx, [ebp+var_4]
.text:0000D8DD                 call    ?ClearAndReserve@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEXI@Z ; CRecordVector<NArchive::N7z::CRefItem>::ClearAndReserve(uint)
.text:0000D8E2                 mov     ecx, [ebp+var_4]
.text:0000D8E5                 mov     edx, [ebp+arg_0]
.text:0000D8E8                 mov     [ecx+4], edx
.text:0000D8EB                 add     esp, 4
.text:0000D8EE                 cmp     ebp, esp
.text:0000D8F0                 call    __RTC_CheckEsp
.text:0000D8F5                 mov     esp, ebp
.text:0000D8F7                 pop     ebp
.text:0000D8F8                 retn    4
.text:0000D8F8 ?ClearAndSetSize@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEXI@Z endp
.text:0000D8F8
.text:0000D8F8 ; ---------------------------------------------------------------------------
.text:0000D8FB                 align 4
.text:0000D8FB _text           ends
.text:0000D8FB
.text:0000D8FC ; ===========================================================================
.text:0000D8FC
.text:0000D8FC ; Segment type: Pure code
.text:0000D8FC ; Segment permissions: Read/Execute
.text:0000D8FC _text           segment para public 'CODE' use32
.text:0000D8FC                 assume cs:_text
.text:0000D8FC                 ;org 0D8FCh
.text:0000D8FC ; COMDAT (pick any)
.text:0000D8FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000D8FC
.text:0000D8FC ; =============== S U B R O U T I N E =======================================
.text:0000D8FC
.text:0000D8FC ; Attributes: bp-based frame
.text:0000D8FC
.text:0000D8FC ; public: __thiscall CRecordVector<struct NArchive::N7z::CRefItem>::~CRecordVector<struct NArchive::N7z::CRefItem>(void)
.text:0000D8FC                 public ??1?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAE@XZ
.text:0000D8FC ??1?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAE@XZ proc near
.text:0000D8FC                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+336Ep
.text:0000D8FC                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+355Dp ...
.text:0000D8FC
.text:0000D8FC var_8           = dword ptr -8
.text:0000D8FC var_4           = dword ptr -4
.text:0000D8FC
.text:0000D8FC                 push    ebp
.text:0000D8FD                 mov     ebp, esp
.text:0000D8FF                 sub     esp, 8
.text:0000D902                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000D909                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000D910                 mov     [ebp+var_4], ecx
.text:0000D913                 mov     eax, [ebp+var_4]
.text:0000D916                 mov     ecx, [eax]
.text:0000D918                 mov     [ebp+var_8], ecx
.text:0000D91B                 mov     edx, [ebp+var_8]
.text:0000D91E                 push    edx             ; void *
.text:0000D91F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000D924                 add     esp, 4
.text:0000D927                 add     esp, 8
.text:0000D92A                 cmp     ebp, esp
.text:0000D92C                 call    __RTC_CheckEsp
.text:0000D931                 mov     esp, ebp
.text:0000D933                 pop     ebp
.text:0000D934                 retn
.text:0000D934 ??1?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAE@XZ endp
.text:0000D934
.text:0000D934 ; ---------------------------------------------------------------------------
.text:0000D935                 align 4
.text:0000D935 _text           ends
.text:0000D935
.text:0000D938 ; ===========================================================================
.text:0000D938
.text:0000D938 ; Segment type: Pure code
.text:0000D938 ; Segment permissions: Read/Execute
.text:0000D938 _text           segment para public 'CODE' use32
.text:0000D938                 assume cs:_text
.text:0000D938                 ;org 0D938h
.text:0000D938 ; COMDAT (pick any)
.text:0000D938                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000D938
.text:0000D938 ; =============== S U B R O U T I N E =======================================
.text:0000D938
.text:0000D938 ; Attributes: bp-based frame
.text:0000D938
.text:0000D938 ; public: struct NArchive::N7z::CRefItem & __thiscall CRecordVector<struct NArchive::N7z::CRefItem>::operator[](unsigned int)
.text:0000D938                 public ??A?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEAAUCRefItem@N7z@NArchive@@I@Z
.text:0000D938 ??A?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEAAUCRefItem@N7z@NArchive@@I@Z proc near
.text:0000D938                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+307Cp
.text:0000D938                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+3111p
.text:0000D938
.text:0000D938 var_4           = dword ptr -4
.text:0000D938 arg_0           = dword ptr  8
.text:0000D938
.text:0000D938                 push    ebp
.text:0000D939                 mov     ebp, esp
.text:0000D93B                 push    ecx
.text:0000D93C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000D943                 mov     [ebp+var_4], ecx
.text:0000D946                 mov     eax, [ebp+arg_0]
.text:0000D949                 imul    eax, 14h
.text:0000D94C                 mov     ecx, [ebp+var_4]
.text:0000D94F                 add     eax, [ecx]
.text:0000D951                 mov     esp, ebp
.text:0000D953                 pop     ebp
.text:0000D954                 retn    4
.text:0000D954 ??A?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEAAUCRefItem@N7z@NArchive@@I@Z endp
.text:0000D954
.text:0000D954 ; ---------------------------------------------------------------------------
.text:0000D957                 align 4
.text:0000D957 _text           ends
.text:0000D957
.text:0000D958 ; ===========================================================================
.text:0000D958
.text:0000D958 ; Segment type: Pure code
.text:0000D958 ; Segment permissions: Read/Execute
.text:0000D958 _text           segment para public 'CODE' use32
.text:0000D958                 assume cs:_text
.text:0000D958                 ;org 0D958h
.text:0000D958 ; COMDAT (pick any)
.text:0000D958                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000D958
.text:0000D958 ; =============== S U B R O U T I N E =======================================
.text:0000D958
.text:0000D958 ; Attributes: bp-based frame
.text:0000D958
.text:0000D958 ; public: void __thiscall CRecordVector<struct NArchive::N7z::CRefItem>::Sort(int (__stdcall *)(struct NArchive::N7z::CRefItem const *, struct NArchive::N7z::CRefItem const *, void *), void *)
.text:0000D958                 public ?Sort@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEXP6GHPBUCRefItem@N7z@NArchive@@0PAX@Z1@Z
.text:0000D958 ?Sort@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEXP6GHPBUCRefItem@N7z@NArchive@@0PAX@Z1@Z proc near
.text:0000D958                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+30C0p
.text:0000D958
.text:0000D958 var_2C          = byte ptr -2Ch
.text:0000D958 var_28          = dword ptr -28h
.text:0000D958 var_24          = dword ptr -24h
.text:0000D958 var_20          = dword ptr -20h
.text:0000D958 var_1C          = dword ptr -1Ch
.text:0000D958 var_18          = dword ptr -18h
.text:0000D958 var_10          = dword ptr -10h
.text:0000D958 var_C           = dword ptr -0Ch
.text:0000D958 var_8           = dword ptr -8
.text:0000D958 var_4           = dword ptr -4
.text:0000D958 arg_0           = dword ptr  8
.text:0000D958 arg_4           = dword ptr  0Ch
.text:0000D958
.text:0000D958                 push    ebp
.text:0000D959                 mov     ebp, esp
.text:0000D95B                 sub     esp, 2Ch
.text:0000D95E                 push    edi
.text:0000D95F                 push    ecx
.text:0000D960                 lea     edi, [ebp+var_2C]
.text:0000D963                 mov     ecx, 0Bh
.text:0000D968                 mov     eax, 0CCCCCCCCh
.text:0000D96D                 rep stosd
.text:0000D96F                 pop     ecx
.text:0000D970                 mov     [ebp+var_4], ecx
.text:0000D973                 mov     eax, [ebp+var_4]
.text:0000D976                 mov     ecx, [eax+4]
.text:0000D979                 mov     [ebp+var_8], ecx
.text:0000D97C                 cmp     [ebp+var_8], 1
.text:0000D980                 ja      short loc_D987
.text:0000D982                 jmp     loc_DA5F
.text:0000D987 ; ---------------------------------------------------------------------------
.text:0000D987
.text:0000D987 loc_D987:                               ; CODE XREF: CRecordVector<NArchive::N7z::CRefItem>::Sort(int (*)(NArchive::N7z::CRefItem const *,NArchive::N7z::CRefItem const *,void *),void *)+28j
.text:0000D987                 mov     ecx, [ebp+var_4]
.text:0000D98A                 call    ?Front@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEAAUCRefItem@N7z@NArchive@@XZ ; CRecordVector<NArchive::N7z::CRefItem>::Front(void)
.text:0000D98F                 sub     eax, 14h
.text:0000D992                 mov     [ebp+var_C], eax
.text:0000D995                 mov     edx, [ebp+var_8]
.text:0000D998                 shr     edx, 1
.text:0000D99A                 mov     [ebp+var_10], edx
.text:0000D99D
.text:0000D99D loc_D99D:                               ; CODE XREF: CRecordVector<NArchive::N7z::CRefItem>::Sort(int (*)(NArchive::N7z::CRefItem const *,NArchive::N7z::CRefItem const *,void *),void *)+67j
.text:0000D99D                 mov     eax, [ebp+arg_4]
.text:0000D9A0                 push    eax
.text:0000D9A1                 mov     ecx, [ebp+arg_0]
.text:0000D9A4                 push    ecx
.text:0000D9A5                 mov     edx, [ebp+var_8]
.text:0000D9A8                 push    edx
.text:0000D9A9                 mov     eax, [ebp+var_10]
.text:0000D9AC                 push    eax
.text:0000D9AD                 mov     ecx, [ebp+var_C]
.text:0000D9B0                 push    ecx
.text:0000D9B1                 call    ?SortRefDown@?$CRecordVector@UCRefItem@N7z@NArchive@@@@SGXPAUCRefItem@N7z@NArchive@@IIP6GHPBU234@1PAX@Z2@Z ; CRecordVector<NArchive::N7z::CRefItem>::SortRefDown(NArchive::N7z::CRefItem *,uint,uint,int (*)(NArchive::N7z::CRefItem const *,NArchive::N7z::CRefItem const *,void *),void *)
.text:0000D9B6                 mov     edx, [ebp+var_10]
.text:0000D9B9                 sub     edx, 1
.text:0000D9BC                 mov     [ebp+var_10], edx
.text:0000D9BF                 jnz     short loc_D99D
.text:0000D9C1
.text:0000D9C1 loc_D9C1:                               ; CODE XREF: CRecordVector<NArchive::N7z::CRefItem>::Sort(int (*)(NArchive::N7z::CRefItem const *,NArchive::N7z::CRefItem const *,void *),void *)+101j
.text:0000D9C1                 mov     eax, [ebp+var_8]
.text:0000D9C4                 imul    eax, 14h
.text:0000D9C7                 add     eax, [ebp+var_C]
.text:0000D9CA                 mov     ecx, [eax]
.text:0000D9CC                 mov     [ebp+var_28], ecx
.text:0000D9CF                 mov     edx, [eax+4]
.text:0000D9D2                 mov     [ebp+var_24], edx
.text:0000D9D5                 mov     ecx, [eax+8]
.text:0000D9D8                 mov     [ebp+var_20], ecx
.text:0000D9DB                 mov     edx, [eax+0Ch]
.text:0000D9DE                 mov     [ebp+var_1C], edx
.text:0000D9E1                 mov     eax, [eax+10h]
.text:0000D9E4                 mov     [ebp+var_18], eax
.text:0000D9E7                 mov     ecx, [ebp+var_C]
.text:0000D9EA                 add     ecx, 14h
.text:0000D9ED                 mov     edx, [ebp+var_8]
.text:0000D9F0                 imul    edx, 14h
.text:0000D9F3                 add     edx, [ebp+var_C]
.text:0000D9F6                 mov     eax, [ecx]
.text:0000D9F8                 mov     [edx], eax
.text:0000D9FA                 mov     eax, [ecx+4]
.text:0000D9FD                 mov     [edx+4], eax
.text:0000DA00                 mov     eax, [ecx+8]
.text:0000DA03                 mov     [edx+8], eax
.text:0000DA06                 mov     eax, [ecx+0Ch]
.text:0000DA09                 mov     [edx+0Ch], eax
.text:0000DA0C                 mov     ecx, [ecx+10h]
.text:0000DA0F                 mov     [edx+10h], ecx
.text:0000DA12                 mov     edx, [ebp+var_8]
.text:0000DA15                 sub     edx, 1
.text:0000DA18                 mov     [ebp+var_8], edx
.text:0000DA1B                 mov     eax, [ebp+var_C]
.text:0000DA1E                 add     eax, 14h
.text:0000DA21                 mov     ecx, [ebp+var_28]
.text:0000DA24                 mov     [eax], ecx
.text:0000DA26                 mov     edx, [ebp+var_24]
.text:0000DA29                 mov     [eax+4], edx
.text:0000DA2C                 mov     ecx, [ebp+var_20]
.text:0000DA2F                 mov     [eax+8], ecx
.text:0000DA32                 mov     edx, [ebp+var_1C]
.text:0000DA35                 mov     [eax+0Ch], edx
.text:0000DA38                 mov     ecx, [ebp+var_18]
.text:0000DA3B                 mov     [eax+10h], ecx
.text:0000DA3E                 mov     edx, [ebp+arg_4]
.text:0000DA41                 push    edx
.text:0000DA42                 mov     eax, [ebp+arg_0]
.text:0000DA45                 push    eax
.text:0000DA46                 mov     ecx, [ebp+var_8]
.text:0000DA49                 push    ecx
.text:0000DA4A                 push    1
.text:0000DA4C                 mov     edx, [ebp+var_C]
.text:0000DA4F                 push    edx
.text:0000DA50                 call    ?SortRefDown@?$CRecordVector@UCRefItem@N7z@NArchive@@@@SGXPAUCRefItem@N7z@NArchive@@IIP6GHPBU234@1PAX@Z2@Z ; CRecordVector<NArchive::N7z::CRefItem>::SortRefDown(NArchive::N7z::CRefItem *,uint,uint,int (*)(NArchive::N7z::CRefItem const *,NArchive::N7z::CRefItem const *,void *),void *)
.text:0000DA55                 cmp     [ebp+var_8], 1
.text:0000DA59                 ja      loc_D9C1
.text:0000DA5F
.text:0000DA5F loc_DA5F:                               ; CODE XREF: CRecordVector<NArchive::N7z::CRefItem>::Sort(int (*)(NArchive::N7z::CRefItem const *,NArchive::N7z::CRefItem const *,void *),void *)+2Aj
.text:0000DA5F                 push    edx
.text:0000DA60                 mov     ecx, ebp
.text:0000DA62                 push    eax
.text:0000DA63                 lea     edx, $LN12_1
.text:0000DA69                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000DA6E                 pop     eax
.text:0000DA6F                 pop     edx
.text:0000DA70                 pop     edi
.text:0000DA71                 add     esp, 2Ch
.text:0000DA74                 cmp     ebp, esp
.text:0000DA76                 call    __RTC_CheckEsp
.text:0000DA7B                 mov     esp, ebp
.text:0000DA7D                 pop     ebp
.text:0000DA7E                 retn    8
.text:0000DA7E ?Sort@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEXP6GHPBUCRefItem@N7z@NArchive@@0PAX@Z1@Z endp
.text:0000DA7E
.text:0000DA7E ; ---------------------------------------------------------------------------
.text:0000DA81                 align 4
.text:0000DA84 $LN12_1         dd 1                    ; DATA XREF: CRecordVector<NArchive::N7z::CRefItem>::Sort(int (*)(NArchive::N7z::CRefItem const *,NArchive::N7z::CRefItem const *,void *),void *)+10Bo
.text:0000DA88                 dd offset $LN11_2
.text:0000DA8C $LN11_2         dd 0FFFFFFD8h, 14h      ; DATA XREF: .text:0000DA88o
.text:0000DA94                 dd offset $LN10_3       ; "temp"
.text:0000DA98 $LN10_3         db 'temp',0             ; DATA XREF: .text:0000DA94o
.text:0000DA9D                 align 10h
.text:0000DA9D _text           ends
.text:0000DA9D
.text:0000DAA0 ; ===========================================================================
.text:0000DAA0
.text:0000DAA0 ; Segment type: Pure code
.text:0000DAA0 ; Segment permissions: Read/Execute
.text:0000DAA0 _text           segment para public 'CODE' use32
.text:0000DAA0                 assume cs:_text
.text:0000DAA0                 ;org 0DAA0h
.text:0000DAA0 ; COMDAT (pick any)
.text:0000DAA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000DAA0
.text:0000DAA0 ; =============== S U B R O U T I N E =======================================
.text:0000DAA0
.text:0000DAA0 ; Attributes: bp-based frame
.text:0000DAA0
.text:0000DAA0 ; public: void * __thiscall NArchive::N7z::CCoderInfo::`vector deleting destructor'(unsigned int)
.text:0000DAA0                 public ??_ECCoderInfo@N7z@NArchive@@QAEPAXI@Z
.text:0000DAA0 ??_ECCoderInfo@N7z@NArchive@@QAEPAXI@Z proc near
.text:0000DAA0                                         ; CODE XREF: CObjArray2<NArchive::N7z::CCoderInfo>::~CObjArray2<NArchive::N7z::CCoderInfo>(void)+33p
.text:0000DAA0
.text:0000DAA0 var_4           = dword ptr -4
.text:0000DAA0 arg_0           = dword ptr  8
.text:0000DAA0
.text:0000DAA0                 push    ebp
.text:0000DAA1                 mov     ebp, esp
.text:0000DAA3                 push    ecx
.text:0000DAA4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000DAAB                 mov     [ebp+var_4], ecx
.text:0000DAAE                 mov     eax, [ebp+arg_0]
.text:0000DAB1                 and     eax, 2
.text:0000DAB4                 jz      short loc_DAEC
.text:0000DAB6                 push    offset ??1CCoderInfo@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCoderInfo::~CCoderInfo(void)
.text:0000DABB                 mov     ecx, [ebp+var_4]
.text:0000DABE                 mov     edx, [ecx-4]
.text:0000DAC1                 push    edx
.text:0000DAC2                 push    18h
.text:0000DAC4                 mov     eax, [ebp+var_4]
.text:0000DAC7                 push    eax
.text:0000DAC8                 call    ??_M@YGXPAXIHP6EX0@Z@Z ; `eh vector destructor iterator'(void *,uint,int,void (*)(void *))
.text:0000DACD                 mov     ecx, [ebp+arg_0]
.text:0000DAD0                 and     ecx, 1
.text:0000DAD3                 jz      short loc_DAE4
.text:0000DAD5                 mov     edx, [ebp+var_4]
.text:0000DAD8                 sub     edx, 4
.text:0000DADB                 push    edx             ; void *
.text:0000DADC                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000DAE1                 add     esp, 4
.text:0000DAE4
.text:0000DAE4 loc_DAE4:                               ; CODE XREF: NArchive::N7z::CCoderInfo::`vector deleting destructor'(uint)+33j
.text:0000DAE4                 mov     eax, [ebp+var_4]
.text:0000DAE7                 sub     eax, 4
.text:0000DAEA                 jmp     short loc_DB0B
.text:0000DAEC ; ---------------------------------------------------------------------------
.text:0000DAEC
.text:0000DAEC loc_DAEC:                               ; CODE XREF: NArchive::N7z::CCoderInfo::`vector deleting destructor'(uint)+14j
.text:0000DAEC                 mov     ecx, [ebp+var_4] ; this
.text:0000DAEF                 call    ??1CCoderInfo@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCoderInfo::~CCoderInfo(void)
.text:0000DAF4                 mov     eax, [ebp+arg_0]
.text:0000DAF7                 and     eax, 1
.text:0000DAFA                 jz      short loc_DB08
.text:0000DAFC                 mov     ecx, [ebp+var_4]
.text:0000DAFF                 push    ecx             ; void *
.text:0000DB00                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000DB05                 add     esp, 4
.text:0000DB08
.text:0000DB08 loc_DB08:                               ; CODE XREF: NArchive::N7z::CCoderInfo::`vector deleting destructor'(uint)+5Aj
.text:0000DB08                 mov     eax, [ebp+var_4]
.text:0000DB0B
.text:0000DB0B loc_DB0B:                               ; CODE XREF: NArchive::N7z::CCoderInfo::`vector deleting destructor'(uint)+4Aj
.text:0000DB0B                 add     esp, 4
.text:0000DB0E                 cmp     ebp, esp
.text:0000DB10                 call    __RTC_CheckEsp
.text:0000DB15                 mov     esp, ebp
.text:0000DB17                 pop     ebp
.text:0000DB18                 retn    4
.text:0000DB18 ??_ECCoderInfo@N7z@NArchive@@QAEPAXI@Z endp
.text:0000DB18
.text:0000DB18 ; ---------------------------------------------------------------------------
.text:0000DB1B                 align 4
.text:0000DB1B _text           ends
.text:0000DB1B
.text:0000DB1C ; ===========================================================================
.text:0000DB1C
.text:0000DB1C ; Segment type: Pure code
.text:0000DB1C ; Segment permissions: Read/Execute
.text:0000DB1C _text           segment para public 'CODE' use32
.text:0000DB1C                 assume cs:_text
.text:0000DB1C                 ;org 0DB1Ch
.text:0000DB1C ; COMDAT (pick any)
.text:0000DB1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000DB1C
.text:0000DB1C ; =============== S U B R O U T I N E =======================================
.text:0000DB1C
.text:0000DB1C ; Attributes: bp-based frame
.text:0000DB1C
.text:0000DB1C ; void __stdcall `vector constructor iterator'(void *, unsigned int, int, void * (__thiscall *)(void *))
.text:0000DB1C                 public ??_H@YGXPAXIHP6EPAX0@Z@Z
.text:0000DB1C ??_H@YGXPAXIHP6EPAX0@Z@Z proc near      ; CODE XREF: CRecordVector<NArchive::N7z::CFileItem>::ReserveDown(void)+ADp
.text:0000DB1C                                         ; CRecordVector<NArchive::N7z::CFilterMode2>::ReserveOnePosition(void)+AEp ...
.text:0000DB1C
.text:0000DB1C arg_0           = dword ptr  8
.text:0000DB1C arg_4           = dword ptr  0Ch
.text:0000DB1C arg_8           = dword ptr  10h
.text:0000DB1C arg_C           = dword ptr  14h
.text:0000DB1C
.text:0000DB1C                 push    ebp
.text:0000DB1D                 mov     ebp, esp
.text:0000DB1F                 push    esi
.text:0000DB20
.text:0000DB20 loc_DB20:                               ; CODE XREF: `vector constructor iterator'(void *,uint,int,void * (*)(void *))+27j
.text:0000DB20                 mov     eax, [ebp+arg_8]
.text:0000DB23                 sub     eax, 1
.text:0000DB26                 mov     [ebp+arg_8], eax
.text:0000DB29                 js      short loc_DB45
.text:0000DB2B                 mov     esi, esp
.text:0000DB2D                 mov     ecx, [ebp+arg_0]
.text:0000DB30                 call    [ebp+arg_C]
.text:0000DB33                 cmp     esi, esp
.text:0000DB35                 call    __RTC_CheckEsp
.text:0000DB3A                 mov     ecx, [ebp+arg_0]
.text:0000DB3D                 add     ecx, [ebp+arg_4]
.text:0000DB40                 mov     [ebp+arg_0], ecx
.text:0000DB43                 jmp     short loc_DB20
.text:0000DB45 ; ---------------------------------------------------------------------------
.text:0000DB45
.text:0000DB45 loc_DB45:                               ; CODE XREF: `vector constructor iterator'(void *,uint,int,void * (*)(void *))+Dj
.text:0000DB45                 pop     esi
.text:0000DB46                 cmp     ebp, esp
.text:0000DB48                 call    __RTC_CheckEsp
.text:0000DB4D                 pop     ebp
.text:0000DB4E                 retn    10h
.text:0000DB4E ??_H@YGXPAXIHP6EPAX0@Z@Z endp
.text:0000DB4E
.text:0000DB4E ; ---------------------------------------------------------------------------
.text:0000DB51                 align 4
.text:0000DB51 _text           ends
.text:0000DB51
.text:0000DB54 ; ===========================================================================
.text:0000DB54
.text:0000DB54 ; Segment type: Pure code
.text:0000DB54 ; Segment permissions: Read/Execute
.text:0000DB54 _text           segment para public 'CODE' use32
.text:0000DB54                 assume cs:_text
.text:0000DB54                 ;org 0DB54h
.text:0000DB54 ; COMDAT (pick any)
.text:0000DB54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000DB54
.text:0000DB54 ; =============== S U B R O U T I N E =======================================
.text:0000DB54
.text:0000DB54 ; Attributes: bp-based frame
.text:0000DB54
.text:0000DB54 ; public: void * __thiscall CProp::`scalar deleting destructor'(unsigned int)
.text:0000DB54                 public ??_GCProp@@QAEPAXI@Z
.text:0000DB54 ??_GCProp@@QAEPAXI@Z proc near          ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+7Fp
.text:0000DB54
.text:0000DB54 var_4           = dword ptr -4
.text:0000DB54 arg_0           = dword ptr  8
.text:0000DB54
.text:0000DB54                 push    ebp
.text:0000DB55                 mov     ebp, esp
.text:0000DB57                 push    ecx
.text:0000DB58                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000DB5F                 mov     [ebp+var_4], ecx
.text:0000DB62                 mov     ecx, [ebp+var_4] ; this
.text:0000DB65                 call    ??1CProp@@QAE@XZ ; CProp::~CProp(void)
.text:0000DB6A                 mov     eax, [ebp+arg_0]
.text:0000DB6D                 and     eax, 1
.text:0000DB70                 jz      short loc_DB7E
.text:0000DB72                 mov     ecx, [ebp+var_4]
.text:0000DB75                 push    ecx             ; void *
.text:0000DB76                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000DB7B                 add     esp, 4
.text:0000DB7E
.text:0000DB7E loc_DB7E:                               ; CODE XREF: CProp::`scalar deleting destructor'(uint)+1Cj
.text:0000DB7E                 mov     eax, [ebp+var_4]
.text:0000DB81                 add     esp, 4
.text:0000DB84                 cmp     ebp, esp
.text:0000DB86                 call    __RTC_CheckEsp
.text:0000DB8B                 mov     esp, ebp
.text:0000DB8D                 pop     ebp
.text:0000DB8E                 retn    4
.text:0000DB8E ??_GCProp@@QAEPAXI@Z endp
.text:0000DB8E
.text:0000DB8E ; ---------------------------------------------------------------------------
.text:0000DB91                 align 4
.text:0000DB91 _text           ends
.text:0000DB91
.text:0000DB94 ; ===========================================================================
.text:0000DB94
.text:0000DB94 ; Segment type: Pure code
.text:0000DB94 ; Segment permissions: Read/Execute
.text:0000DB94 _text           segment para public 'CODE' use32
.text:0000DB94                 assume cs:_text
.text:0000DB94                 ;org 0DB94h
.text:0000DB94 ; COMDAT (pick any)
.text:0000DB94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000DB94
.text:0000DB94 ; =============== S U B R O U T I N E =======================================
.text:0000DB94
.text:0000DB94 ; Attributes: bp-based frame
.text:0000DB94
.text:0000DB94 ; _DWORD __thiscall NArchive::N7z::CMethodFull::CMethodFull(NArchive::N7z::CMethodFull *this, const struct NArchive::N7z::CMethodFull *)
.text:0000DB94                 public ??0CMethodFull@N7z@NArchive@@QAE@ABU012@@Z
.text:0000DB94 ??0CMethodFull@N7z@NArchive@@QAE@ABU012@@Z proc near
.text:0000DB94                                         ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::CObjectVector<NArchive::N7z::CMethodFull>(CObjectVector<NArchive::N7z::CMethodFull> const &)+A6p
.text:0000DB94                                         ; CObjectVector<NArchive::N7z::CMethodFull>::Add(NArchive::N7z::CMethodFull const &)+5Ap
.text:0000DB94
.text:0000DB94 var_4           = dword ptr -4
.text:0000DB94 arg_0           = dword ptr  8
.text:0000DB94
.text:0000DB94                 push    ebp
.text:0000DB95                 mov     ebp, esp
.text:0000DB97                 push    ecx
.text:0000DB98                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000DB9F                 mov     [ebp+var_4], ecx
.text:0000DBA2                 mov     eax, [ebp+arg_0]
.text:0000DBA5                 push    eax
.text:0000DBA6                 mov     ecx, [ebp+var_4]
.text:0000DBA9                 call    ??0CMethodProps@@QAE@ABV0@@Z ; CMethodProps::CMethodProps(CMethodProps const &)
.text:0000DBAE                 mov     ecx, [ebp+var_4]
.text:0000DBB1                 mov     edx, [ebp+arg_0]
.text:0000DBB4                 mov     eax, [edx+10h]
.text:0000DBB7                 mov     [ecx+10h], eax
.text:0000DBBA                 mov     edx, [edx+14h]
.text:0000DBBD                 mov     [ecx+14h], edx
.text:0000DBC0                 mov     eax, [ebp+var_4]
.text:0000DBC3                 mov     ecx, [ebp+arg_0]
.text:0000DBC6                 mov     edx, [ecx+18h]
.text:0000DBC9                 mov     [eax+18h], edx
.text:0000DBCC                 mov     eax, [ebp+var_4]
.text:0000DBCF                 add     esp, 4
.text:0000DBD2                 cmp     ebp, esp
.text:0000DBD4                 call    __RTC_CheckEsp
.text:0000DBD9                 mov     esp, ebp
.text:0000DBDB                 pop     ebp
.text:0000DBDC                 retn    4
.text:0000DBDC ??0CMethodFull@N7z@NArchive@@QAE@ABU012@@Z endp
.text:0000DBDC
.text:0000DBDC ; ---------------------------------------------------------------------------
.text:0000DBDF                 align 10h
.text:0000DBDF _text           ends
.text:0000DBDF
.text:0000DBE0 ; ===========================================================================
.text:0000DBE0
.text:0000DBE0 ; Segment type: Pure code
.text:0000DBE0 ; Segment permissions: Read/Execute
.text:0000DBE0 _text           segment para public 'CODE' use32
.text:0000DBE0                 assume cs:_text
.text:0000DBE0                 ;org 0DBE0h
.text:0000DBE0 ; COMDAT (pick any)
.text:0000DBE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000DBE0
.text:0000DBE0 ; =============== S U B R O U T I N E =======================================
.text:0000DBE0
.text:0000DBE0 ; Attributes: bp-based frame
.text:0000DBE0
.text:0000DBE0 ; public: void * __thiscall NArchive::N7z::CMethodFull::`scalar deleting destructor'(unsigned int)
.text:0000DBE0                 public ??_GCMethodFull@N7z@NArchive@@QAEPAXI@Z
.text:0000DBE0 ??_GCMethodFull@N7z@NArchive@@QAEPAXI@Z proc near
.text:0000DBE0                                         ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>(void)+7Fp
.text:0000DBE0
.text:0000DBE0 var_4           = dword ptr -4
.text:0000DBE0 arg_0           = dword ptr  8
.text:0000DBE0
.text:0000DBE0                 push    ebp
.text:0000DBE1                 mov     ebp, esp
.text:0000DBE3                 push    ecx
.text:0000DBE4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000DBEB                 mov     [ebp+var_4], ecx
.text:0000DBEE                 mov     ecx, [ebp+var_4] ; this
.text:0000DBF1                 call    ??1CMethodFull@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CMethodFull::~CMethodFull(void)
.text:0000DBF6                 mov     eax, [ebp+arg_0]
.text:0000DBF9                 and     eax, 1
.text:0000DBFC                 jz      short loc_DC0A
.text:0000DBFE                 mov     ecx, [ebp+var_4]
.text:0000DC01                 push    ecx             ; void *
.text:0000DC02                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000DC07                 add     esp, 4
.text:0000DC0A
.text:0000DC0A loc_DC0A:                               ; CODE XREF: NArchive::N7z::CMethodFull::`scalar deleting destructor'(uint)+1Cj
.text:0000DC0A                 mov     eax, [ebp+var_4]
.text:0000DC0D                 add     esp, 4
.text:0000DC10                 cmp     ebp, esp
.text:0000DC12                 call    __RTC_CheckEsp
.text:0000DC17                 mov     esp, ebp
.text:0000DC19                 pop     ebp
.text:0000DC1A                 retn    4
.text:0000DC1A ??_GCMethodFull@N7z@NArchive@@QAEPAXI@Z endp
.text:0000DC1A
.text:0000DC1A ; ---------------------------------------------------------------------------
.text:0000DC1D                 align 10h
.text:0000DC1D _text           ends
.text:0000DC1D
.text:0000DC20 ; ===========================================================================
.text:0000DC20
.text:0000DC20 ; Segment type: Pure code
.text:0000DC20 ; Segment permissions: Read/Execute
.text:0000DC20 _text           segment para public 'CODE' use32
.text:0000DC20                 assume cs:_text
.text:0000DC20                 ;org 0DC20h
.text:0000DC20 ; COMDAT (pick any)
.text:0000DC20                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000DC20
.text:0000DC20 ; =============== S U B R O U T I N E =======================================
.text:0000DC20
.text:0000DC20 ; Attributes: bp-based frame
.text:0000DC20
.text:0000DC20 ; _DWORD __thiscall NArchive::N7z::CSolidGroup::CSolidGroup(NArchive::N7z::CSolidGroup *__hidden this)
.text:0000DC20                 public ??0CSolidGroup@N7z@NArchive@@QAE@XZ
.text:0000DC20 ??0CSolidGroup@N7z@NArchive@@QAE@XZ proc near
.text:0000DC20                                         ; CODE XREF: CObjectVector<NArchive::N7z::CSolidGroup>::AddNew(void)+59p
.text:0000DC20
.text:0000DC20 var_10          = dword ptr -10h
.text:0000DC20 var_C           = dword ptr -0Ch
.text:0000DC20 var_4           = dword ptr -4
.text:0000DC20
.text:0000DC20                 push    ebp
.text:0000DC21                 mov     ebp, esp
.text:0000DC23                 push    0FFFFFFFFh
.text:0000DC25                 push    offset __ehhandler$??0CSolidGroup@N7z@NArchive@@QAE@XZ
.text:0000DC2A                 mov     eax, large fs:0
.text:0000DC30                 push    eax
.text:0000DC31                 push    ecx
.text:0000DC32                 mov     [ebp+var_10], 0CCCCCCCCh
.text:0000DC39                 mov     eax, dword ptr ds:___security_cookie
.text:0000DC3E                 xor     eax, ebp
.text:0000DC40                 push    eax
.text:0000DC41                 lea     eax, [ebp+var_C]
.text:0000DC44                 mov     large fs:0, eax
.text:0000DC4A                 mov     [ebp+var_10], ecx
.text:0000DC4D                 mov     ecx, [ebp+var_10]
.text:0000DC50                 call    ??0?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::CRecordVector<uint>(void)
.text:0000DC55                 mov     [ebp+var_4], 0
.text:0000DC5C                 mov     ecx, [ebp+var_10]
.text:0000DC5F                 add     ecx, 0Ch
.text:0000DC62                 call    ??0?$CRecordVector@UCFolderRepack@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFolderRepack>::CRecordVector<NArchive::N7z::CFolderRepack>(void)
.text:0000DC67                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000DC6E                 mov     eax, [ebp+var_10]
.text:0000DC71                 mov     ecx, [ebp+var_C]
.text:0000DC74                 mov     large fs:0, ecx
.text:0000DC7B                 pop     ecx
.text:0000DC7C                 add     esp, 10h
.text:0000DC7F                 cmp     ebp, esp
.text:0000DC81                 call    __RTC_CheckEsp
.text:0000DC86                 mov     esp, ebp
.text:0000DC88                 pop     ebp
.text:0000DC89                 retn
.text:0000DC89 ??0CSolidGroup@N7z@NArchive@@QAE@XZ endp
.text:0000DC89
.text:0000DC89 ; ---------------------------------------------------------------------------
.text:0000DC8A                 align 4
.text:0000DC8A _text           ends
.text:0000DC8A
.text$x:0000DC8C ; ===========================================================================
.text$x:0000DC8C
.text$x:0000DC8C ; Segment type: Pure code
.text$x:0000DC8C ; Segment permissions: Read/Execute
.text$x:0000DC8C _text$x         segment para public 'CODE' use32
.text$x:0000DC8C                 assume cs:_text$x
.text$x:0000DC8C                 ;org 0DC8Ch
.text$x:0000DC8C ; COMDAT (pick associative to section at DC20)
.text$x:0000DC8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000DC8C
.text$x:0000DC8C ; =============== S U B R O U T I N E =======================================
.text$x:0000DC8C
.text$x:0000DC8C
.text$x:0000DC8C __unwindfunclet$??0CSolidGroup@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:0000DC8C                                         ; DATA XREF: .xdata$x:0000DCB4o
.text$x:0000DC8C                 mov     ecx, [ebp-10h]
.text$x:0000DC8F                 jmp     ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text$x:0000DC8F __unwindfunclet$??0CSolidGroup@N7z@NArchive@@QAE@XZ$0 endp
.text$x:0000DC8F
.text$x:0000DC94
.text$x:0000DC94 ; =============== S U B R O U T I N E =======================================
.text$x:0000DC94
.text$x:0000DC94
.text$x:0000DC94 __ehhandler$??0CSolidGroup@N7z@NArchive@@QAE@XZ proc near
.text$x:0000DC94                                         ; DATA XREF: NArchive::N7z::CSolidGroup::CSolidGroup(void)+5o
.text$x:0000DC94
.text$x:0000DC94 arg_4           = dword ptr  8
.text$x:0000DC94
.text$x:0000DC94                 mov     edx, [esp+arg_4]
.text$x:0000DC98                 lea     eax, [edx+0Ch]
.text$x:0000DC9B                 mov     ecx, [edx-8]
.text$x:0000DC9E                 xor     ecx, eax
.text$x:0000DCA0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000DCA5                 mov     eax, offset __ehfuncinfo$??0CSolidGroup@N7z@NArchive@@QAE@XZ
.text$x:0000DCAA                 jmp     ___CxxFrameHandler3
.text$x:0000DCAA __ehhandler$??0CSolidGroup@N7z@NArchive@@QAE@XZ endp
.text$x:0000DCAA
.text$x:0000DCAA ; ---------------------------------------------------------------------------
.text$x:0000DCAF                 align 10h
.text$x:0000DCAF _text$x         ends
.text$x:0000DCAF
.xdata$x:0000DCB0 ; ===========================================================================
.xdata$x:0000DCB0
.xdata$x:0000DCB0 ; Segment type: Pure data
.xdata$x:0000DCB0 ; Segment permissions: Read
.xdata$x:0000DCB0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000DCB0                 assume cs:_xdata$x
.xdata$x:0000DCB0                 ;org 0DCB0h
.xdata$x:0000DCB0 ; COMDAT (pick associative to section at DC20)
.xdata$x:0000DCB0 __unwindtable$??0CSolidGroup@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:0000DCB0                                         ; DATA XREF: .xdata$x:0000DCC0o
.xdata$x:0000DCB1                 db 0FFh
.xdata$x:0000DCB2                 db 0FFh
.xdata$x:0000DCB3                 db 0FFh
.xdata$x:0000DCB4                 dd offset __unwindfunclet$??0CSolidGroup@N7z@NArchive@@QAE@XZ$0
.xdata$x:0000DCB8 __ehfuncinfo$??0CSolidGroup@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:0000DCB8                                         ; DATA XREF: __ehhandler$??0CSolidGroup@N7z@NArchive@@QAE@XZ+11o
.xdata$x:0000DCB9                 db    5
.xdata$x:0000DCBA                 db  93h ; ô
.xdata$x:0000DCBB                 db  19h
.xdata$x:0000DCBC                 db    1
.xdata$x:0000DCBD                 db    0
.xdata$x:0000DCBE                 db    0
.xdata$x:0000DCBF                 db    0
.xdata$x:0000DCC0                 dd offset __unwindtable$??0CSolidGroup@N7z@NArchive@@QAE@XZ
.xdata$x:0000DCC4                 db    0
.xdata$x:0000DCC5                 db    0
.xdata$x:0000DCC6                 db    0
.xdata$x:0000DCC7                 db    0
.xdata$x:0000DCC8                 db    0
.xdata$x:0000DCC9                 db    0
.xdata$x:0000DCCA                 db    0
.xdata$x:0000DCCB                 db    0
.xdata$x:0000DCCC                 db    0
.xdata$x:0000DCCD                 db    0
.xdata$x:0000DCCE                 db    0
.xdata$x:0000DCCF                 db    0
.xdata$x:0000DCD0                 db    0
.xdata$x:0000DCD1                 db    0
.xdata$x:0000DCD2                 db    0
.xdata$x:0000DCD3                 db    0
.xdata$x:0000DCD4                 db    0
.xdata$x:0000DCD5                 db    0
.xdata$x:0000DCD6                 db    0
.xdata$x:0000DCD7                 db    0
.xdata$x:0000DCD8                 db    1
.xdata$x:0000DCD9                 db    0
.xdata$x:0000DCDA                 db    0
.xdata$x:0000DCDB                 db    0
.xdata$x:0000DCDB _xdata$x        ends
.xdata$x:0000DCDB
.text:0000DCDC ; ===========================================================================
.text:0000DCDC
.text:0000DCDC ; Segment type: Pure code
.text:0000DCDC ; Segment permissions: Read/Execute
.text:0000DCDC _text           segment para public 'CODE' use32
.text:0000DCDC                 assume cs:_text
.text:0000DCDC                 ;org 0DCDCh
.text:0000DCDC ; COMDAT (pick any)
.text:0000DCDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000DCDC
.text:0000DCDC ; =============== S U B R O U T I N E =======================================
.text:0000DCDC
.text:0000DCDC ; Attributes: bp-based frame
.text:0000DCDC
.text:0000DCDC ; public: void * __thiscall NArchive::N7z::CSolidGroup::`scalar deleting destructor'(unsigned int)
.text:0000DCDC                 public ??_GCSolidGroup@N7z@NArchive@@QAEPAXI@Z
.text:0000DCDC ??_GCSolidGroup@N7z@NArchive@@QAEPAXI@Z proc near
.text:0000DCDC                                         ; CODE XREF: CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>(void)+7Fp
.text:0000DCDC
.text:0000DCDC var_4           = dword ptr -4
.text:0000DCDC arg_0           = dword ptr  8
.text:0000DCDC
.text:0000DCDC                 push    ebp
.text:0000DCDD                 mov     ebp, esp
.text:0000DCDF                 push    ecx
.text:0000DCE0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000DCE7                 mov     [ebp+var_4], ecx
.text:0000DCEA                 mov     ecx, [ebp+var_4] ; this
.text:0000DCED                 call    ??1CSolidGroup@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CSolidGroup::~CSolidGroup(void)
.text:0000DCF2                 mov     eax, [ebp+arg_0]
.text:0000DCF5                 and     eax, 1
.text:0000DCF8                 jz      short loc_DD06
.text:0000DCFA                 mov     ecx, [ebp+var_4]
.text:0000DCFD                 push    ecx             ; void *
.text:0000DCFE                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000DD03                 add     esp, 4
.text:0000DD06
.text:0000DD06 loc_DD06:                               ; CODE XREF: NArchive::N7z::CSolidGroup::`scalar deleting destructor'(uint)+1Cj
.text:0000DD06                 mov     eax, [ebp+var_4]
.text:0000DD09                 add     esp, 4
.text:0000DD0C                 cmp     ebp, esp
.text:0000DD0E                 call    __RTC_CheckEsp
.text:0000DD13                 mov     esp, ebp
.text:0000DD15                 pop     ebp
.text:0000DD16                 retn    4
.text:0000DD16 ??_GCSolidGroup@N7z@NArchive@@QAEPAXI@Z endp
.text:0000DD16
.text:0000DD16 ; ---------------------------------------------------------------------------
.text:0000DD19                 align 4
.text:0000DD19 _text           ends
.text:0000DD19
.text:0000DD1C ; ===========================================================================
.text:0000DD1C
.text:0000DD1C ; Segment type: Pure code
.text:0000DD1C ; Segment permissions: Read/Execute
.text:0000DD1C _text           segment para public 'CODE' use32
.text:0000DD1C                 assume cs:_text
.text:0000DD1C                 ;org 0DD1Ch
.text:0000DD1C ; COMDAT (pick any)
.text:0000DD1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000DD1C
.text:0000DD1C ; =============== S U B R O U T I N E =======================================
.text:0000DD1C
.text:0000DD1C ; Attributes: bp-based frame
.text:0000DD1C
.text:0000DD1C ; _DWORD __thiscall NArchive::N7z::CCoderInfo::~CCoderInfo(NArchive::N7z::CCoderInfo *__hidden this)
.text:0000DD1C                 public ??1CCoderInfo@N7z@NArchive@@QAE@XZ
.text:0000DD1C ??1CCoderInfo@N7z@NArchive@@QAE@XZ proc near
.text:0000DD1C                                         ; CODE XREF: NArchive::N7z::CCoderInfo::`vector deleting destructor'(uint)+4Fp
.text:0000DD1C                                         ; DATA XREF: NArchive::N7z::CCoderInfo::`vector deleting destructor'(uint)+16o
.text:0000DD1C
.text:0000DD1C var_4           = dword ptr -4
.text:0000DD1C
.text:0000DD1C                 push    ebp
.text:0000DD1D                 mov     ebp, esp
.text:0000DD1F                 push    ecx
.text:0000DD20                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000DD27                 mov     [ebp+var_4], ecx
.text:0000DD2A                 mov     ecx, [ebp+var_4]
.text:0000DD2D                 add     ecx, 8
.text:0000DD30                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:0000DD35                 add     esp, 4
.text:0000DD38                 cmp     ebp, esp
.text:0000DD3A                 call    __RTC_CheckEsp
.text:0000DD3F                 mov     esp, ebp
.text:0000DD41                 pop     ebp
.text:0000DD42                 retn
.text:0000DD42 ??1CCoderInfo@N7z@NArchive@@QAE@XZ endp
.text:0000DD42
.text:0000DD42 ; ---------------------------------------------------------------------------
.text:0000DD43                 align 4
.text:0000DD43 _text           ends
.text:0000DD43
.text:0000DD44 ; ===========================================================================
.text:0000DD44
.text:0000DD44 ; Segment type: Pure code
.text:0000DD44 ; Segment permissions: Read/Execute
.text:0000DD44 _text           segment para public 'CODE' use32
.text:0000DD44                 assume cs:_text
.text:0000DD44                 ;org 0DD44h
.text:0000DD44 ; COMDAT (pick any)
.text:0000DD44                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000DD44
.text:0000DD44 ; =============== S U B R O U T I N E =======================================
.text:0000DD44
.text:0000DD44 ; Attributes: bp-based frame
.text:0000DD44
.text:0000DD44 ; _DWORD __thiscall CProp::~CProp(CProp *__hidden this)
.text:0000DD44                 public ??1CProp@@QAE@XZ
.text:0000DD44 ??1CProp@@QAE@XZ proc near              ; CODE XREF: CProp::`scalar deleting destructor'(uint)+11p
.text:0000DD44
.text:0000DD44 var_4           = dword ptr -4
.text:0000DD44
.text:0000DD44                 push    ebp
.text:0000DD45                 mov     ebp, esp
.text:0000DD47                 push    ecx
.text:0000DD48                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000DD4F                 mov     [ebp+var_4], ecx
.text:0000DD52                 mov     ecx, [ebp+var_4]
.text:0000DD55                 add     ecx, 8          ; this
.text:0000DD58                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:0000DD5D                 add     esp, 4
.text:0000DD60                 cmp     ebp, esp
.text:0000DD62                 call    __RTC_CheckEsp
.text:0000DD67                 mov     esp, ebp
.text:0000DD69                 pop     ebp
.text:0000DD6A                 retn
.text:0000DD6A ??1CProp@@QAE@XZ endp
.text:0000DD6A
.text:0000DD6A ; ---------------------------------------------------------------------------
.text:0000DD6B                 align 4
.text:0000DD6B _text           ends
.text:0000DD6B
.text:0000DD6C ; ===========================================================================
.text:0000DD6C
.text:0000DD6C ; Segment type: Pure code
.text:0000DD6C ; Segment permissions: Read/Execute
.text:0000DD6C _text           segment para public 'CODE' use32
.text:0000DD6C                 assume cs:_text
.text:0000DD6C                 ;org 0DD6Ch
.text:0000DD6C ; COMDAT (pick any)
.text:0000DD6C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000DD6C
.text:0000DD6C ; =============== S U B R O U T I N E =======================================
.text:0000DD6C
.text:0000DD6C ; Attributes: bp-based frame
.text:0000DD6C
.text:0000DD6C ; _DWORD __thiscall NWindows::NCOM::CPropVariant::~CPropVariant(NWindows::NCOM::CPropVariant *__hidden this)
.text:0000DD6C                 public ??1CPropVariant@NCOM@NWindows@@QAE@XZ
.text:0000DD6C ??1CPropVariant@NCOM@NWindows@@QAE@XZ proc near
.text:0000DD6C                                         ; CODE XREF: CProp::~CProp(void)+14p
.text:0000DD6C
.text:0000DD6C var_4           = dword ptr -4
.text:0000DD6C
.text:0000DD6C                 push    ebp
.text:0000DD6D                 mov     ebp, esp
.text:0000DD6F                 push    ecx
.text:0000DD70                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000DD77                 mov     [ebp+var_4], ecx
.text:0000DD7A                 mov     ecx, [ebp+var_4] ; this
.text:0000DD7D                 call    ?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ ; NWindows::NCOM::CPropVariant::Clear(void)
.text:0000DD82                 add     esp, 4
.text:0000DD85                 cmp     ebp, esp
.text:0000DD87                 call    __RTC_CheckEsp
.text:0000DD8C                 mov     esp, ebp
.text:0000DD8E                 pop     ebp
.text:0000DD8F                 retn
.text:0000DD8F ??1CPropVariant@NCOM@NWindows@@QAE@XZ endp
.text:0000DD8F
.text:0000DD8F _text           ends
.text:0000DD8F
.text:0000DD90 ; ===========================================================================
.text:0000DD90
.text:0000DD90 ; Segment type: Pure code
.text:0000DD90 ; Segment permissions: Read/Execute
.text:0000DD90 _text           segment para public 'CODE' use32
.text:0000DD90                 assume cs:_text
.text:0000DD90                 ;org 0DD90h
.text:0000DD90 ; COMDAT (pick any)
.text:0000DD90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000DD90
.text:0000DD90 ; =============== S U B R O U T I N E =======================================
.text:0000DD90
.text:0000DD90 ; Attributes: bp-based frame
.text:0000DD90
.text:0000DD90 ; public: __thiscall CMethodProps::CMethodProps(class CMethodProps const &)
.text:0000DD90                 public ??0CMethodProps@@QAE@ABV0@@Z
.text:0000DD90 ??0CMethodProps@@QAE@ABV0@@Z proc near  ; CODE XREF: NArchive::N7z::CMethodFull::CMethodFull(NArchive::N7z::CMethodFull const &)+15p
.text:0000DD90
.text:0000DD90 var_4           = dword ptr -4
.text:0000DD90 arg_0           = dword ptr  8
.text:0000DD90
.text:0000DD90                 push    ebp
.text:0000DD91                 mov     ebp, esp
.text:0000DD93                 push    ecx
.text:0000DD94                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000DD9B                 mov     [ebp+var_4], ecx
.text:0000DD9E                 mov     eax, [ebp+arg_0]
.text:0000DDA1                 push    eax
.text:0000DDA2                 mov     ecx, [ebp+var_4]
.text:0000DDA5                 call    ??0CProps@@QAE@ABU0@@Z ; CProps::CProps(CProps const &)
.text:0000DDAA                 mov     eax, [ebp+var_4]
.text:0000DDAD                 add     esp, 4
.text:0000DDB0                 cmp     ebp, esp
.text:0000DDB2                 call    __RTC_CheckEsp
.text:0000DDB7                 mov     esp, ebp
.text:0000DDB9                 pop     ebp
.text:0000DDBA                 retn    4
.text:0000DDBA ??0CMethodProps@@QAE@ABV0@@Z endp
.text:0000DDBA
.text:0000DDBA ; ---------------------------------------------------------------------------
.text:0000DDBD                 align 10h
.text:0000DDBD _text           ends
.text:0000DDBD
.text:0000DDC0 ; ===========================================================================
.text:0000DDC0
.text:0000DDC0 ; Segment type: Pure code
.text:0000DDC0 ; Segment permissions: Read/Execute
.text:0000DDC0 _text           segment para public 'CODE' use32
.text:0000DDC0                 assume cs:_text
.text:0000DDC0                 ;org 0DDC0h
.text:0000DDC0 ; COMDAT (pick any)
.text:0000DDC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000DDC0
.text:0000DDC0 ; =============== S U B R O U T I N E =======================================
.text:0000DDC0
.text:0000DDC0 ; Attributes: bp-based frame
.text:0000DDC0
.text:0000DDC0 ; _DWORD __thiscall NArchive::N7z::CSolidGroup::~CSolidGroup(NArchive::N7z::CSolidGroup *__hidden this)
.text:0000DDC0                 public ??1CSolidGroup@N7z@NArchive@@QAE@XZ
.text:0000DDC0 ??1CSolidGroup@N7z@NArchive@@QAE@XZ proc near
.text:0000DDC0                                         ; CODE XREF: NArchive::N7z::CSolidGroup::`scalar deleting destructor'(uint)+11p
.text:0000DDC0
.text:0000DDC0 var_10          = dword ptr -10h
.text:0000DDC0 var_C           = dword ptr -0Ch
.text:0000DDC0 var_4           = dword ptr -4
.text:0000DDC0
.text:0000DDC0                 push    ebp
.text:0000DDC1                 mov     ebp, esp
.text:0000DDC3                 push    0FFFFFFFFh
.text:0000DDC5                 push    offset __ehhandler$??1CSolidGroup@N7z@NArchive@@QAE@XZ
.text:0000DDCA                 mov     eax, large fs:0
.text:0000DDD0                 push    eax
.text:0000DDD1                 push    ecx
.text:0000DDD2                 mov     [ebp+var_10], 0CCCCCCCCh
.text:0000DDD9                 mov     eax, dword ptr ds:___security_cookie
.text:0000DDDE                 xor     eax, ebp
.text:0000DDE0                 push    eax
.text:0000DDE1                 lea     eax, [ebp+var_C]
.text:0000DDE4                 mov     large fs:0, eax
.text:0000DDEA                 mov     [ebp+var_10], ecx
.text:0000DDED                 mov     [ebp+var_4], 0
.text:0000DDF4                 mov     ecx, [ebp+var_10]
.text:0000DDF7                 add     ecx, 0Ch
.text:0000DDFA                 call    ??1?$CRecordVector@UCFolderRepack@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFolderRepack>::~CRecordVector<NArchive::N7z::CFolderRepack>(void)
.text:0000DDFF                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000DE06                 mov     ecx, [ebp+var_10]
.text:0000DE09                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:0000DE0E                 mov     ecx, [ebp+var_C]
.text:0000DE11                 mov     large fs:0, ecx
.text:0000DE18                 pop     ecx
.text:0000DE19                 add     esp, 10h
.text:0000DE1C                 cmp     ebp, esp
.text:0000DE1E                 call    __RTC_CheckEsp
.text:0000DE23                 mov     esp, ebp
.text:0000DE25                 pop     ebp
.text:0000DE26                 retn
.text:0000DE26 ??1CSolidGroup@N7z@NArchive@@QAE@XZ endp
.text:0000DE26
.text:0000DE26 ; ---------------------------------------------------------------------------
.text:0000DE27                 align 4
.text:0000DE27 _text           ends
.text:0000DE27
.text$x:0000DE28 ; ===========================================================================
.text$x:0000DE28
.text$x:0000DE28 ; Segment type: Pure code
.text$x:0000DE28 ; Segment permissions: Read/Execute
.text$x:0000DE28 _text$x         segment para public 'CODE' use32
.text$x:0000DE28                 assume cs:_text$x
.text$x:0000DE28                 ;org 0DE28h
.text$x:0000DE28 ; COMDAT (pick associative to section at DDC0)
.text$x:0000DE28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000DE28
.text$x:0000DE28 ; =============== S U B R O U T I N E =======================================
.text$x:0000DE28
.text$x:0000DE28
.text$x:0000DE28 __unwindfunclet$??1CSolidGroup@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:0000DE28                                         ; DATA XREF: .xdata$x:0000DE50o
.text$x:0000DE28                 mov     ecx, [ebp-10h]
.text$x:0000DE2B                 jmp     ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text$x:0000DE2B __unwindfunclet$??1CSolidGroup@N7z@NArchive@@QAE@XZ$0 endp
.text$x:0000DE2B
.text$x:0000DE30
.text$x:0000DE30 ; =============== S U B R O U T I N E =======================================
.text$x:0000DE30
.text$x:0000DE30
.text$x:0000DE30 __ehhandler$??1CSolidGroup@N7z@NArchive@@QAE@XZ proc near
.text$x:0000DE30                                         ; DATA XREF: NArchive::N7z::CSolidGroup::~CSolidGroup(void)+5o
.text$x:0000DE30
.text$x:0000DE30 arg_4           = dword ptr  8
.text$x:0000DE30
.text$x:0000DE30                 mov     edx, [esp+arg_4]
.text$x:0000DE34                 lea     eax, [edx+0Ch]
.text$x:0000DE37                 mov     ecx, [edx-8]
.text$x:0000DE3A                 xor     ecx, eax
.text$x:0000DE3C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000DE41                 mov     eax, offset __ehfuncinfo$??1CSolidGroup@N7z@NArchive@@QAE@XZ
.text$x:0000DE46                 jmp     ___CxxFrameHandler3
.text$x:0000DE46 __ehhandler$??1CSolidGroup@N7z@NArchive@@QAE@XZ endp
.text$x:0000DE46
.text$x:0000DE46 ; ---------------------------------------------------------------------------
.text$x:0000DE4B                 align 4
.text$x:0000DE4B _text$x         ends
.text$x:0000DE4B
.xdata$x:0000DE4C ; ===========================================================================
.xdata$x:0000DE4C
.xdata$x:0000DE4C ; Segment type: Pure data
.xdata$x:0000DE4C ; Segment permissions: Read
.xdata$x:0000DE4C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000DE4C                 assume cs:_xdata$x
.xdata$x:0000DE4C                 ;org 0DE4Ch
.xdata$x:0000DE4C ; COMDAT (pick associative to section at DDC0)
.xdata$x:0000DE4C __unwindtable$??1CSolidGroup@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:0000DE4C                                         ; DATA XREF: .xdata$x:0000DE5Co
.xdata$x:0000DE4D                 db 0FFh
.xdata$x:0000DE4E                 db 0FFh
.xdata$x:0000DE4F                 db 0FFh
.xdata$x:0000DE50                 dd offset __unwindfunclet$??1CSolidGroup@N7z@NArchive@@QAE@XZ$0
.xdata$x:0000DE54 __ehfuncinfo$??1CSolidGroup@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:0000DE54                                         ; DATA XREF: __ehhandler$??1CSolidGroup@N7z@NArchive@@QAE@XZ+11o
.xdata$x:0000DE55                 db    5
.xdata$x:0000DE56                 db  93h ; ô
.xdata$x:0000DE57                 db  19h
.xdata$x:0000DE58                 db    1
.xdata$x:0000DE59                 db    0
.xdata$x:0000DE5A                 db    0
.xdata$x:0000DE5B                 db    0
.xdata$x:0000DE5C                 dd offset __unwindtable$??1CSolidGroup@N7z@NArchive@@QAE@XZ
.xdata$x:0000DE60                 db    0
.xdata$x:0000DE61                 db    0
.xdata$x:0000DE62                 db    0
.xdata$x:0000DE63                 db    0
.xdata$x:0000DE64                 db    0
.xdata$x:0000DE65                 db    0
.xdata$x:0000DE66                 db    0
.xdata$x:0000DE67                 db    0
.xdata$x:0000DE68                 db    0
.xdata$x:0000DE69                 db    0
.xdata$x:0000DE6A                 db    0
.xdata$x:0000DE6B                 db    0
.xdata$x:0000DE6C                 db    0
.xdata$x:0000DE6D                 db    0
.xdata$x:0000DE6E                 db    0
.xdata$x:0000DE6F                 db    0
.xdata$x:0000DE70                 db    0
.xdata$x:0000DE71                 db    0
.xdata$x:0000DE72                 db    0
.xdata$x:0000DE73                 db    0
.xdata$x:0000DE74                 db    1
.xdata$x:0000DE75                 db    0
.xdata$x:0000DE76                 db    0
.xdata$x:0000DE77                 db    0
.xdata$x:0000DE77 _xdata$x        ends
.xdata$x:0000DE77
.text:0000DE78 ; ===========================================================================
.text:0000DE78
.text:0000DE78 ; Segment type: Pure code
.text:0000DE78 ; Segment permissions: Read/Execute
.text:0000DE78 _text           segment para public 'CODE' use32
.text:0000DE78                 assume cs:_text
.text:0000DE78                 ;org 0DE78h
.text:0000DE78 ; COMDAT (pick any)
.text:0000DE78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000DE78
.text:0000DE78 ; =============== S U B R O U T I N E =======================================
.text:0000DE78
.text:0000DE78 ; Attributes: bp-based frame
.text:0000DE78
.text:0000DE78 ; public: __thiscall CProps::CProps(struct CProps const &)
.text:0000DE78                 public ??0CProps@@QAE@ABU0@@Z
.text:0000DE78 ??0CProps@@QAE@ABU0@@Z proc near        ; CODE XREF: CMethodProps::CMethodProps(CMethodProps const &)+15p
.text:0000DE78
.text:0000DE78 var_4           = dword ptr -4
.text:0000DE78 arg_0           = dword ptr  8
.text:0000DE78
.text:0000DE78                 push    ebp
.text:0000DE79                 mov     ebp, esp
.text:0000DE7B                 push    ecx
.text:0000DE7C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000DE83                 mov     [ebp+var_4], ecx
.text:0000DE86                 mov     eax, [ebp+arg_0]
.text:0000DE89                 push    eax
.text:0000DE8A                 mov     ecx, [ebp+var_4]
.text:0000DE8D                 call    ??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z ; CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)
.text:0000DE92                 mov     eax, [ebp+var_4]
.text:0000DE95                 add     esp, 4
.text:0000DE98                 cmp     ebp, esp
.text:0000DE9A                 call    __RTC_CheckEsp
.text:0000DE9F                 mov     esp, ebp
.text:0000DEA1                 pop     ebp
.text:0000DEA2                 retn    4
.text:0000DEA2 ??0CProps@@QAE@ABU0@@Z endp
.text:0000DEA2
.text:0000DEA2 ; ---------------------------------------------------------------------------
.text:0000DEA5                 align 4
.text:0000DEA5 _text           ends
.text:0000DEA5
.text:0000DEA8 ; ===========================================================================
.text:0000DEA8
.text:0000DEA8 ; Segment type: Pure code
.text:0000DEA8 ; Segment permissions: Read/Execute
.text:0000DEA8 _text           segment para public 'CODE' use32
.text:0000DEA8                 assume cs:_text
.text:0000DEA8                 ;org 0DEA8h
.text:0000DEA8 ; COMDAT (pick any)
.text:0000DEA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000DEA8
.text:0000DEA8 ; =============== S U B R O U T I N E =======================================
.text:0000DEA8
.text:0000DEA8 ; Attributes: bp-based frame
.text:0000DEA8
.text:0000DEA8 ; public: __thiscall CRecordVector<void *>::CRecordVector<void *>(void)
.text:0000DEA8                 public ??0?$CRecordVector@PAX@@QAE@XZ
.text:0000DEA8 ??0?$CRecordVector@PAX@@QAE@XZ proc near
.text:0000DEA8                                         ; CODE XREF: CObjectVector<CProp>::CObjectVector<CProp>(void)+11p
.text:0000DEA8                                         ; CObjectVector<NArchive::N7z::CMethodFull>::CObjectVector<NArchive::N7z::CMethodFull>(CObjectVector<NArchive::N7z::CMethodFull> const &)+42p ...
.text:0000DEA8
.text:0000DEA8 var_4           = dword ptr -4
.text:0000DEA8
.text:0000DEA8                 push    ebp
.text:0000DEA9                 mov     ebp, esp
.text:0000DEAB                 push    ecx
.text:0000DEAC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000DEB3                 mov     [ebp+var_4], ecx
.text:0000DEB6                 mov     eax, [ebp+var_4]
.text:0000DEB9                 mov     dword ptr [eax], 0
.text:0000DEBF                 mov     ecx, [ebp+var_4]
.text:0000DEC2                 mov     dword ptr [ecx+4], 0
.text:0000DEC9                 mov     edx, [ebp+var_4]
.text:0000DECC                 mov     dword ptr [edx+8], 0
.text:0000DED3                 mov     eax, [ebp+var_4]
.text:0000DED6                 mov     esp, ebp
.text:0000DED8                 pop     ebp
.text:0000DED9                 retn
.text:0000DED9 ??0?$CRecordVector@PAX@@QAE@XZ endp
.text:0000DED9
.text:0000DED9 ; ---------------------------------------------------------------------------
.text:0000DEDA                 align 4
.text:0000DEDA _text           ends
.text:0000DEDA
.text:0000DEDC ; ===========================================================================
.text:0000DEDC
.text:0000DEDC ; Segment type: Pure code
.text:0000DEDC ; Segment permissions: Read/Execute
.text:0000DEDC _text           segment para public 'CODE' use32
.text:0000DEDC                 assume cs:_text
.text:0000DEDC                 ;org 0DEDCh
.text:0000DEDC ; COMDAT (pick any)
.text:0000DEDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000DEDC
.text:0000DEDC ; =============== S U B R O U T I N E =======================================
.text:0000DEDC
.text:0000DEDC ; Attributes: bp-based frame
.text:0000DEDC
.text:0000DEDC ; public: unsigned int __thiscall CRecordVector<void *>::Size(void)const
.text:0000DEDC                 public ?Size@?$CRecordVector@PAX@@QBEIXZ
.text:0000DEDC ?Size@?$CRecordVector@PAX@@QBEIXZ proc near
.text:0000DEDC                                         ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+46p
.text:0000DEDC                                         ; CObjectVector<NArchive::N7z::CMethodFull>::Size(void)+11p ...
.text:0000DEDC
.text:0000DEDC var_4           = dword ptr -4
.text:0000DEDC
.text:0000DEDC                 push    ebp
.text:0000DEDD                 mov     ebp, esp
.text:0000DEDF                 push    ecx
.text:0000DEE0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000DEE7                 mov     [ebp+var_4], ecx
.text:0000DEEA                 mov     eax, [ebp+var_4]
.text:0000DEED                 mov     eax, [eax+4]
.text:0000DEF0                 mov     esp, ebp
.text:0000DEF2                 pop     ebp
.text:0000DEF3                 retn
.text:0000DEF3 ?Size@?$CRecordVector@PAX@@QBEIXZ endp
.text:0000DEF3
.text:0000DEF3 _text           ends
.text:0000DEF3
.text:0000DEF4 ; ===========================================================================
.text:0000DEF4
.text:0000DEF4 ; Segment type: Pure code
.text:0000DEF4 ; Segment permissions: Read/Execute
.text:0000DEF4 _text           segment para public 'CODE' use32
.text:0000DEF4                 assume cs:_text
.text:0000DEF4                 ;org 0DEF4h
.text:0000DEF4 ; COMDAT (pick any)
.text:0000DEF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000DEF4
.text:0000DEF4 ; =============== S U B R O U T I N E =======================================
.text:0000DEF4
.text:0000DEF4 ; Attributes: bp-based frame
.text:0000DEF4
.text:0000DEF4 ; public: void __thiscall CRecordVector<void *>::ConstructReserve(unsigned int)
.text:0000DEF4                 public ?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z
.text:0000DEF4 ?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z proc near
.text:0000DEF4                                         ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::CObjectVector<NArchive::N7z::CMethodFull>(CObjectVector<NArchive::N7z::CMethodFull> const &)+60p
.text:0000DEF4                                         ; CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+60p
.text:0000DEF4
.text:0000DEF4 var_8           = dword ptr -8
.text:0000DEF4 var_4           = dword ptr -4
.text:0000DEF4 arg_0           = dword ptr  8
.text:0000DEF4
.text:0000DEF4                 push    ebp
.text:0000DEF5                 mov     ebp, esp
.text:0000DEF7                 sub     esp, 8
.text:0000DEFA                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000DF01                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000DF08                 mov     [ebp+var_4], ecx
.text:0000DF0B                 cmp     [ebp+arg_0], 0
.text:0000DF0F                 jz      short loc_DF41
.text:0000DF11                 xor     ecx, ecx
.text:0000DF13                 mov     eax, [ebp+arg_0]
.text:0000DF16                 mov     edx, 4
.text:0000DF1B                 mul     edx
.text:0000DF1D                 seto    cl
.text:0000DF20                 neg     ecx
.text:0000DF22                 or      ecx, eax
.text:0000DF24                 push    ecx             ; unsigned int
.text:0000DF25                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000DF2A                 add     esp, 4
.text:0000DF2D                 mov     [ebp+var_8], eax
.text:0000DF30                 mov     eax, [ebp+var_4]
.text:0000DF33                 mov     ecx, [ebp+var_8]
.text:0000DF36                 mov     [eax], ecx
.text:0000DF38                 mov     edx, [ebp+var_4]
.text:0000DF3B                 mov     eax, [ebp+arg_0]
.text:0000DF3E                 mov     [edx+8], eax
.text:0000DF41
.text:0000DF41 loc_DF41:                               ; CODE XREF: CRecordVector<void *>::ConstructReserve(uint)+1Bj
.text:0000DF41                 add     esp, 8
.text:0000DF44                 cmp     ebp, esp
.text:0000DF46                 call    __RTC_CheckEsp
.text:0000DF4B                 mov     esp, ebp
.text:0000DF4D                 pop     ebp
.text:0000DF4E                 retn    4
.text:0000DF4E ?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z endp
.text:0000DF4E
.text:0000DF4E ; ---------------------------------------------------------------------------
.text:0000DF51                 align 4
.text:0000DF51 _text           ends
.text:0000DF51
.text:0000DF54 ; ===========================================================================
.text:0000DF54
.text:0000DF54 ; Segment type: Pure code
.text:0000DF54 ; Segment permissions: Read/Execute
.text:0000DF54 _text           segment para public 'CODE' use32
.text:0000DF54                 assume cs:_text
.text:0000DF54                 ;org 0DF54h
.text:0000DF54 ; COMDAT (pick any)
.text:0000DF54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000DF54
.text:0000DF54 ; =============== S U B R O U T I N E =======================================
.text:0000DF54
.text:0000DF54 ; Attributes: bp-based frame
.text:0000DF54
.text:0000DF54 ; public: void __thiscall CRecordVector<void *>::ReserveDown(void)
.text:0000DF54                 public ?ReserveDown@?$CRecordVector@PAX@@QAEXXZ
.text:0000DF54 ?ReserveDown@?$CRecordVector@PAX@@QAEXXZ proc near
.text:0000DF54                                         ; CODE XREF: CObjectVector<UString>::ReserveDown(void)+11p
.text:0000DF54                                         ; CObjectVector<NArchive::N7z::CFolder>::ReserveDown(void)+11p
.text:0000DF54
.text:0000DF54 var_10          = dword ptr -10h
.text:0000DF54 var_C           = dword ptr -0Ch
.text:0000DF54 Dst             = dword ptr -8
.text:0000DF54 var_4           = dword ptr -4
.text:0000DF54
.text:0000DF54                 push    ebp
.text:0000DF55                 mov     ebp, esp
.text:0000DF57                 sub     esp, 10h
.text:0000DF5A                 mov     eax, 0CCCCCCCCh
.text:0000DF5F                 mov     [ebp+var_10], eax
.text:0000DF62                 mov     [ebp+var_C], eax
.text:0000DF65                 mov     [ebp+Dst], eax
.text:0000DF68                 mov     [ebp+var_4], eax
.text:0000DF6B                 mov     [ebp+var_4], ecx
.text:0000DF6E                 mov     eax, [ebp+var_4]
.text:0000DF71                 mov     ecx, [ebp+var_4]
.text:0000DF74                 mov     edx, [eax+4]
.text:0000DF77                 cmp     edx, [ecx+8]
.text:0000DF7A                 jnz     short loc_DF7E
.text:0000DF7C                 jmp     short loc_DFFA
.text:0000DF7E ; ---------------------------------------------------------------------------
.text:0000DF7E
.text:0000DF7E loc_DF7E:                               ; CODE XREF: CRecordVector<void *>::ReserveDown(void)+26j
.text:0000DF7E                 mov     [ebp+Dst], 0
.text:0000DF85                 mov     eax, [ebp+var_4]
.text:0000DF88                 cmp     dword ptr [eax+4], 0
.text:0000DF8C                 jz      short loc_DFD2
.text:0000DF8E                 xor     ecx, ecx
.text:0000DF90                 mov     edx, [ebp+var_4]
.text:0000DF93                 mov     eax, [edx+4]
.text:0000DF96                 mov     edx, 4
.text:0000DF9B                 mul     edx
.text:0000DF9D                 seto    cl
.text:0000DFA0                 neg     ecx
.text:0000DFA2                 or      ecx, eax
.text:0000DFA4                 push    ecx             ; unsigned int
.text:0000DFA5                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000DFAA                 add     esp, 4
.text:0000DFAD                 mov     [ebp+var_C], eax
.text:0000DFB0                 mov     eax, [ebp+var_C]
.text:0000DFB3                 mov     [ebp+Dst], eax
.text:0000DFB6                 mov     ecx, [ebp+var_4]
.text:0000DFB9                 mov     edx, [ecx+4]
.text:0000DFBC                 shl     edx, 2
.text:0000DFBF                 push    edx             ; Size
.text:0000DFC0                 mov     eax, [ebp+var_4]
.text:0000DFC3                 mov     ecx, [eax]
.text:0000DFC5                 push    ecx             ; Src
.text:0000DFC6                 mov     edx, [ebp+Dst]
.text:0000DFC9                 push    edx             ; Dst
.text:0000DFCA                 call    _memcpy
.text:0000DFCF                 add     esp, 0Ch
.text:0000DFD2
.text:0000DFD2 loc_DFD2:                               ; CODE XREF: CRecordVector<void *>::ReserveDown(void)+38j
.text:0000DFD2                 mov     eax, [ebp+var_4]
.text:0000DFD5                 mov     ecx, [eax]
.text:0000DFD7                 mov     [ebp+var_10], ecx
.text:0000DFDA                 mov     edx, [ebp+var_10]
.text:0000DFDD                 push    edx             ; void *
.text:0000DFDE                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000DFE3                 add     esp, 4
.text:0000DFE6                 mov     eax, [ebp+var_4]
.text:0000DFE9                 mov     ecx, [ebp+Dst]
.text:0000DFEC                 mov     [eax], ecx
.text:0000DFEE                 mov     edx, [ebp+var_4]
.text:0000DFF1                 mov     eax, [ebp+var_4]
.text:0000DFF4                 mov     ecx, [eax+4]
.text:0000DFF7                 mov     [edx+8], ecx
.text:0000DFFA
.text:0000DFFA loc_DFFA:                               ; CODE XREF: CRecordVector<void *>::ReserveDown(void)+28j
.text:0000DFFA                 add     esp, 10h
.text:0000DFFD                 cmp     ebp, esp
.text:0000DFFF                 call    __RTC_CheckEsp
.text:0000E004                 mov     esp, ebp
.text:0000E006                 pop     ebp
.text:0000E007                 retn
.text:0000E007 ?ReserveDown@?$CRecordVector@PAX@@QAEXXZ endp
.text:0000E007
.text:0000E007 _text           ends
.text:0000E007
.text:0000E008 ; ===========================================================================
.text:0000E008
.text:0000E008 ; Segment type: Pure code
.text:0000E008 ; Segment permissions: Read/Execute
.text:0000E008 _text           segment para public 'CODE' use32
.text:0000E008                 assume cs:_text
.text:0000E008                 ;org 0E008h
.text:0000E008 ; COMDAT (pick any)
.text:0000E008                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000E008
.text:0000E008 ; =============== S U B R O U T I N E =======================================
.text:0000E008
.text:0000E008 ; Attributes: bp-based frame
.text:0000E008
.text:0000E008 ; public: __thiscall CRecordVector<void *>::~CRecordVector<void *>(void)
.text:0000E008                 public ??1?$CRecordVector@PAX@@QAE@XZ
.text:0000E008 ??1?$CRecordVector@PAX@@QAE@XZ proc near
.text:0000E008                                         ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+9Cp
.text:0000E008                                         ; __unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0+3j ...
.text:0000E008
.text:0000E008 var_8           = dword ptr -8
.text:0000E008 var_4           = dword ptr -4
.text:0000E008
.text:0000E008                 push    ebp
.text:0000E009                 mov     ebp, esp
.text:0000E00B                 sub     esp, 8
.text:0000E00E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000E015                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000E01C                 mov     [ebp+var_4], ecx
.text:0000E01F                 mov     eax, [ebp+var_4]
.text:0000E022                 mov     ecx, [eax]
.text:0000E024                 mov     [ebp+var_8], ecx
.text:0000E027                 mov     edx, [ebp+var_8]
.text:0000E02A                 push    edx             ; void *
.text:0000E02B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000E030                 add     esp, 4
.text:0000E033                 add     esp, 8
.text:0000E036                 cmp     ebp, esp
.text:0000E038                 call    __RTC_CheckEsp
.text:0000E03D                 mov     esp, ebp
.text:0000E03F                 pop     ebp
.text:0000E040                 retn
.text:0000E040 ??1?$CRecordVector@PAX@@QAE@XZ endp
.text:0000E040
.text:0000E040 ; ---------------------------------------------------------------------------
.text:0000E041                 align 4
.text:0000E041 _text           ends
.text:0000E041
.text:0000E044 ; ===========================================================================
.text:0000E044
.text:0000E044 ; Segment type: Pure code
.text:0000E044 ; Segment permissions: Read/Execute
.text:0000E044 _text           segment para public 'CODE' use32
.text:0000E044                 assume cs:_text
.text:0000E044                 ;org 0E044h
.text:0000E044 ; COMDAT (pick any)
.text:0000E044                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000E044
.text:0000E044 ; =============== S U B R O U T I N E =======================================
.text:0000E044
.text:0000E044 ; Attributes: bp-based frame
.text:0000E044
.text:0000E044 ; public: unsigned int __thiscall CRecordVector<void *>::Add(void * const)
.text:0000E044                 public ?Add@?$CRecordVector@PAX@@QAEIQAX@Z
.text:0000E044 ?Add@?$CRecordVector@PAX@@QAEIQAX@Z proc near
.text:0000E044                                         ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::Add(NArchive::N7z::CMethodFull const &)+7Fp
.text:0000E044                                         ; CObjectVector<NArchive::N7z::CFolder>::AddNew(void)+84p ...
.text:0000E044
.text:0000E044 var_8           = dword ptr -8
.text:0000E044 var_4           = dword ptr -4
.text:0000E044 arg_0           = dword ptr  8
.text:0000E044
.text:0000E044                 push    ebp
.text:0000E045                 mov     ebp, esp
.text:0000E047                 sub     esp, 8
.text:0000E04A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000E051                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000E058                 mov     [ebp+var_4], ecx
.text:0000E05B                 mov     ecx, [ebp+var_4]
.text:0000E05E                 call    ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition(void)
.text:0000E063                 mov     eax, [ebp+var_4]
.text:0000E066                 mov     ecx, [eax+4]
.text:0000E069                 mov     edx, [ebp+var_4]
.text:0000E06C                 mov     eax, [edx]
.text:0000E06E                 mov     edx, [ebp+arg_0]
.text:0000E071                 mov     [eax+ecx*4], edx
.text:0000E074                 mov     eax, [ebp+var_4]
.text:0000E077                 mov     ecx, [eax+4]
.text:0000E07A                 mov     [ebp+var_8], ecx
.text:0000E07D                 mov     edx, [ebp+var_4]
.text:0000E080                 mov     eax, [edx+4]
.text:0000E083                 add     eax, 1
.text:0000E086                 mov     ecx, [ebp+var_4]
.text:0000E089                 mov     [ecx+4], eax
.text:0000E08C                 mov     eax, [ebp+var_8]
.text:0000E08F                 add     esp, 8
.text:0000E092                 cmp     ebp, esp
.text:0000E094                 call    __RTC_CheckEsp
.text:0000E099                 mov     esp, ebp
.text:0000E09B                 pop     ebp
.text:0000E09C                 retn    4
.text:0000E09C ?Add@?$CRecordVector@PAX@@QAEIQAX@Z endp
.text:0000E09C
.text:0000E09C ; ---------------------------------------------------------------------------
.text:0000E09F                 align 10h
.text:0000E09F _text           ends
.text:0000E09F
.text:0000E0A0 ; ===========================================================================
.text:0000E0A0
.text:0000E0A0 ; Segment type: Pure code
.text:0000E0A0 ; Segment permissions: Read/Execute
.text:0000E0A0 _text           segment para public 'CODE' use32
.text:0000E0A0                 assume cs:_text
.text:0000E0A0                 ;org 0E0A0h
.text:0000E0A0 ; COMDAT (pick any)
.text:0000E0A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000E0A0
.text:0000E0A0 ; =============== S U B R O U T I N E =======================================
.text:0000E0A0
.text:0000E0A0 ; Attributes: bp-based frame
.text:0000E0A0
.text:0000E0A0 ; public: void __thiscall CRecordVector<void *>::AddInReserved(void * const)
.text:0000E0A0                 public ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z
.text:0000E0A0 ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z proc near
.text:0000E0A0                                         ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::CObjectVector<NArchive::N7z::CMethodFull>(CObjectVector<NArchive::N7z::CMethodFull> const &)+C8p
.text:0000E0A0                                         ; CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+C8p
.text:0000E0A0
.text:0000E0A0 var_4           = dword ptr -4
.text:0000E0A0 arg_0           = dword ptr  8
.text:0000E0A0
.text:0000E0A0                 push    ebp
.text:0000E0A1                 mov     ebp, esp
.text:0000E0A3                 push    ecx
.text:0000E0A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000E0AB                 mov     [ebp+var_4], ecx
.text:0000E0AE                 mov     eax, [ebp+var_4]
.text:0000E0B1                 mov     ecx, [eax+4]
.text:0000E0B4                 mov     edx, [ebp+var_4]
.text:0000E0B7                 mov     eax, [edx]
.text:0000E0B9                 mov     edx, [ebp+arg_0]
.text:0000E0BC                 mov     [eax+ecx*4], edx
.text:0000E0BF                 mov     eax, [ebp+var_4]
.text:0000E0C2                 mov     ecx, [eax+4]
.text:0000E0C5                 add     ecx, 1
.text:0000E0C8                 mov     edx, [ebp+var_4]
.text:0000E0CB                 mov     [edx+4], ecx
.text:0000E0CE                 mov     esp, ebp
.text:0000E0D0                 pop     ebp
.text:0000E0D1                 retn    4
.text:0000E0D1 ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z endp
.text:0000E0D1
.text:0000E0D1 _text           ends
.text:0000E0D1
.text:0000E0D4 ; ===========================================================================
.text:0000E0D4
.text:0000E0D4 ; Segment type: Pure code
.text:0000E0D4 ; Segment permissions: Read/Execute
.text:0000E0D4 _text           segment para public 'CODE' use32
.text:0000E0D4                 assume cs:_text
.text:0000E0D4                 ;org 0E0D4h
.text:0000E0D4 ; COMDAT (pick any)
.text:0000E0D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000E0D4
.text:0000E0D4 ; =============== S U B R O U T I N E =======================================
.text:0000E0D4
.text:0000E0D4 ; Attributes: bp-based frame
.text:0000E0D4
.text:0000E0D4 ; public: void __thiscall CRecordVector<void *>::Insert(unsigned int, void * const)
.text:0000E0D4                 public ?Insert@?$CRecordVector@PAX@@QAEXIQAX@Z
.text:0000E0D4 ?Insert@?$CRecordVector@PAX@@QAEXIQAX@Z proc near
.text:0000E0D4                                         ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::InsertNew(uint)+88p
.text:0000E0D4
.text:0000E0D4 var_4           = dword ptr -4
.text:0000E0D4 arg_0           = dword ptr  8
.text:0000E0D4 arg_4           = dword ptr  0Ch
.text:0000E0D4
.text:0000E0D4                 push    ebp
.text:0000E0D5                 mov     ebp, esp
.text:0000E0D7                 push    ecx
.text:0000E0D8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000E0DF                 mov     [ebp+var_4], ecx
.text:0000E0E2                 mov     ecx, [ebp+var_4]
.text:0000E0E5                 call    ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition(void)
.text:0000E0EA                 mov     eax, [ebp+arg_0]
.text:0000E0ED                 push    eax
.text:0000E0EE                 mov     ecx, [ebp+arg_0]
.text:0000E0F1                 add     ecx, 1
.text:0000E0F4                 push    ecx
.text:0000E0F5                 mov     ecx, [ebp+var_4]
.text:0000E0F8                 call    ?MoveItems@?$CRecordVector@PAX@@AAEXII@Z ; CRecordVector<void *>::MoveItems(uint,uint)
.text:0000E0FD                 mov     edx, [ebp+var_4]
.text:0000E100                 mov     eax, [edx]
.text:0000E102                 mov     ecx, [ebp+arg_0]
.text:0000E105                 mov     edx, [ebp+arg_4]
.text:0000E108                 mov     [eax+ecx*4], edx
.text:0000E10B                 mov     eax, [ebp+var_4]
.text:0000E10E                 mov     ecx, [eax+4]
.text:0000E111                 add     ecx, 1
.text:0000E114                 mov     edx, [ebp+var_4]
.text:0000E117                 mov     [edx+4], ecx
.text:0000E11A                 add     esp, 4
.text:0000E11D                 cmp     ebp, esp
.text:0000E11F                 call    __RTC_CheckEsp
.text:0000E124                 mov     esp, ebp
.text:0000E126                 pop     ebp
.text:0000E127                 retn    8
.text:0000E127 ?Insert@?$CRecordVector@PAX@@QAEXIQAX@Z endp
.text:0000E127
.text:0000E127 ; ---------------------------------------------------------------------------
.text:0000E12A                 align 4
.text:0000E12A _text           ends
.text:0000E12A
.text:0000E12C ; ===========================================================================
.text:0000E12C
.text:0000E12C ; Segment type: Pure code
.text:0000E12C ; Segment permissions: Read/Execute
.text:0000E12C _text           segment para public 'CODE' use32
.text:0000E12C                 assume cs:_text
.text:0000E12C                 ;org 0E12Ch
.text:0000E12C ; COMDAT (pick any)
.text:0000E12C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000E12C
.text:0000E12C ; =============== S U B R O U T I N E =======================================
.text:0000E12C
.text:0000E12C ; Attributes: bp-based frame
.text:0000E12C
.text:0000E12C ; public: void * const & __thiscall CRecordVector<void *>::operator[](unsigned int)const
.text:0000E12C                 public ??A?$CRecordVector@PAX@@QBEABQAXI@Z
.text:0000E12C ??A?$CRecordVector@PAX@@QBEABQAXI@Z proc near
.text:0000E12C                                         ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::operator[](uint)+15p
.text:0000E12C                                         ; CObjectVector<NArchive::N7z::CUpdateItem>::operator[](uint)+15p ...
.text:0000E12C
.text:0000E12C var_4           = dword ptr -4
.text:0000E12C arg_0           = dword ptr  8
.text:0000E12C
.text:0000E12C                 push    ebp
.text:0000E12D                 mov     ebp, esp
.text:0000E12F                 push    ecx
.text:0000E130                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000E137                 mov     [ebp+var_4], ecx
.text:0000E13A                 mov     eax, [ebp+var_4]
.text:0000E13D                 mov     ecx, [eax]
.text:0000E13F                 mov     edx, [ebp+arg_0]
.text:0000E142                 lea     eax, [ecx+edx*4]
.text:0000E145                 mov     esp, ebp
.text:0000E147                 pop     ebp
.text:0000E148                 retn    4
.text:0000E148 ??A?$CRecordVector@PAX@@QBEABQAXI@Z endp
.text:0000E148
.text:0000E148 ; ---------------------------------------------------------------------------
.text:0000E14B                 align 4
.text:0000E14B _text           ends
.text:0000E14B
.text:0000E14C ; ===========================================================================
.text:0000E14C
.text:0000E14C ; Segment type: Pure code
.text:0000E14C ; Segment permissions: Read/Execute
.text:0000E14C _text           segment para public 'CODE' use32
.text:0000E14C                 assume cs:_text
.text:0000E14C                 ;org 0E14Ch
.text:0000E14C ; COMDAT (pick any)
.text:0000E14C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000E14C
.text:0000E14C ; =============== S U B R O U T I N E =======================================
.text:0000E14C
.text:0000E14C ; Attributes: bp-based frame
.text:0000E14C
.text:0000E14C ; public: void * & __thiscall CRecordVector<void *>::operator[](unsigned int)
.text:0000E14C                 public ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
.text:0000E14C ??A?$CRecordVector@PAX@@QAEAAPAXI@Z proc near
.text:0000E14C                                         ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+64p
.text:0000E14C                                         ; CObjectVector<NArchive::N7z::CMethodFull>::operator[](uint)+15p ...
.text:0000E14C
.text:0000E14C var_4           = dword ptr -4
.text:0000E14C arg_0           = dword ptr  8
.text:0000E14C
.text:0000E14C                 push    ebp
.text:0000E14D                 mov     ebp, esp
.text:0000E14F                 push    ecx
.text:0000E150                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000E157                 mov     [ebp+var_4], ecx
.text:0000E15A                 mov     eax, [ebp+var_4]
.text:0000E15D                 mov     ecx, [eax]
.text:0000E15F                 mov     edx, [ebp+arg_0]
.text:0000E162                 lea     eax, [ecx+edx*4]
.text:0000E165                 mov     esp, ebp
.text:0000E167                 pop     ebp
.text:0000E168                 retn    4
.text:0000E168 ??A?$CRecordVector@PAX@@QAEAAPAXI@Z endp
.text:0000E168
.text:0000E168 ; ---------------------------------------------------------------------------
.text:0000E16B                 align 4
.text:0000E16B _text           ends
.text:0000E16B
.text:0000E16C ; ===========================================================================
.text:0000E16C
.text:0000E16C ; Segment type: Pure code
.text:0000E16C ; Segment permissions: Read/Execute
.text:0000E16C _text           segment para public 'CODE' use32
.text:0000E16C                 assume cs:_text
.text:0000E16C                 ;org 0E16Ch
.text:0000E16C ; COMDAT (pick any)
.text:0000E16C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000E16C
.text:0000E16C ; =============== S U B R O U T I N E =======================================
.text:0000E16C
.text:0000E16C ; Attributes: bp-based frame
.text:0000E16C
.text:0000E16C ; private: void __thiscall CRecordVector<unsigned int>::ReserveOnePosition(void)
.text:0000E16C                 public ?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ
.text:0000E16C ?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ proc near
.text:0000E16C                                         ; CODE XREF: CRecordVector<uint>::Add(uint)+1Ap
.text:0000E16C
.text:0000E16C var_14          = dword ptr -14h
.text:0000E16C var_10          = dword ptr -10h
.text:0000E16C Dst             = dword ptr -0Ch
.text:0000E16C var_8           = dword ptr -8
.text:0000E16C var_4           = dword ptr -4
.text:0000E16C
.text:0000E16C                 push    ebp
.text:0000E16D                 mov     ebp, esp
.text:0000E16F                 sub     esp, 14h
.text:0000E172                 mov     eax, 0CCCCCCCCh
.text:0000E177                 mov     [ebp+var_14], eax
.text:0000E17A                 mov     [ebp+var_10], eax
.text:0000E17D                 mov     [ebp+Dst], eax
.text:0000E180                 mov     [ebp+var_8], eax
.text:0000E183                 mov     [ebp+var_4], eax
.text:0000E186                 mov     [ebp+var_4], ecx
.text:0000E189                 mov     eax, [ebp+var_4]
.text:0000E18C                 mov     ecx, [ebp+var_4]
.text:0000E18F                 mov     edx, [eax+4]
.text:0000E192                 cmp     edx, [ecx+8]
.text:0000E195                 jnz     loc_E220
.text:0000E19B                 mov     eax, [ebp+var_4]
.text:0000E19E                 mov     ecx, [eax+8]
.text:0000E1A1                 shr     ecx, 2
.text:0000E1A4                 mov     edx, [ebp+var_4]
.text:0000E1A7                 mov     eax, [edx+8]
.text:0000E1AA                 lea     ecx, [eax+ecx+1]
.text:0000E1AE                 mov     [ebp+var_8], ecx
.text:0000E1B1                 xor     ecx, ecx
.text:0000E1B3                 mov     eax, [ebp+var_8]
.text:0000E1B6                 mov     edx, 4
.text:0000E1BB                 mul     edx
.text:0000E1BD                 seto    cl
.text:0000E1C0                 neg     ecx
.text:0000E1C2                 or      ecx, eax
.text:0000E1C4                 push    ecx             ; unsigned int
.text:0000E1C5                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000E1CA                 add     esp, 4
.text:0000E1CD                 mov     [ebp+var_10], eax
.text:0000E1D0                 mov     eax, [ebp+var_10]
.text:0000E1D3                 mov     [ebp+Dst], eax
.text:0000E1D6                 mov     ecx, [ebp+var_4]
.text:0000E1D9                 cmp     dword ptr [ecx+4], 0
.text:0000E1DD                 jz      short loc_E1FB
.text:0000E1DF                 mov     edx, [ebp+var_4]
.text:0000E1E2                 mov     eax, [edx+4]
.text:0000E1E5                 shl     eax, 2
.text:0000E1E8                 push    eax             ; Size
.text:0000E1E9                 mov     ecx, [ebp+var_4]
.text:0000E1EC                 mov     edx, [ecx]
.text:0000E1EE                 push    edx             ; Src
.text:0000E1EF                 mov     eax, [ebp+Dst]
.text:0000E1F2                 push    eax             ; Dst
.text:0000E1F3                 call    _memcpy
.text:0000E1F8                 add     esp, 0Ch
.text:0000E1FB
.text:0000E1FB loc_E1FB:                               ; CODE XREF: CRecordVector<uint>::ReserveOnePosition(void)+71j
.text:0000E1FB                 mov     ecx, [ebp+var_4]
.text:0000E1FE                 mov     edx, [ecx]
.text:0000E200                 mov     [ebp+var_14], edx
.text:0000E203                 mov     eax, [ebp+var_14]
.text:0000E206                 push    eax             ; void *
.text:0000E207                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000E20C                 add     esp, 4
.text:0000E20F                 mov     ecx, [ebp+var_4]
.text:0000E212                 mov     edx, [ebp+Dst]
.text:0000E215                 mov     [ecx], edx
.text:0000E217                 mov     eax, [ebp+var_4]
.text:0000E21A                 mov     ecx, [ebp+var_8]
.text:0000E21D                 mov     [eax+8], ecx
.text:0000E220
.text:0000E220 loc_E220:                               ; CODE XREF: CRecordVector<uint>::ReserveOnePosition(void)+29j
.text:0000E220                 add     esp, 14h
.text:0000E223                 cmp     ebp, esp
.text:0000E225                 call    __RTC_CheckEsp
.text:0000E22A                 mov     esp, ebp
.text:0000E22C                 pop     ebp
.text:0000E22D                 retn
.text:0000E22D ?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ endp
.text:0000E22D
.text:0000E22D ; ---------------------------------------------------------------------------
.text:0000E22E                 align 10h
.text:0000E22E _text           ends
.text:0000E22E
.text:0000E230 ; ===========================================================================
.text:0000E230
.text:0000E230 ; Segment type: Pure code
.text:0000E230 ; Segment permissions: Read/Execute
.text:0000E230 _text           segment para public 'CODE' use32
.text:0000E230                 assume cs:_text
.text:0000E230                 ;org 0E230h
.text:0000E230 ; COMDAT (pick any)
.text:0000E230                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000E230
.text:0000E230 ; =============== S U B R O U T I N E =======================================
.text:0000E230
.text:0000E230 ; Attributes: bp-based frame
.text:0000E230
.text:0000E230 ; public: unsigned int & __thiscall CRecordVector<unsigned int>::Front(void)
.text:0000E230                 public ?Front@?$CRecordVector@I@@QAEAAIXZ
.text:0000E230 ?Front@?$CRecordVector@I@@QAEAAIXZ proc near
.text:0000E230                                         ; CODE XREF: CRecordVector<uint>::Sort(int (*)(uint const *,uint const *,void *),void *)+34p
.text:0000E230
.text:0000E230 var_4           = dword ptr -4
.text:0000E230
.text:0000E230                 push    ebp
.text:0000E231                 mov     ebp, esp
.text:0000E233                 push    ecx
.text:0000E234                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000E23B                 mov     [ebp+var_4], ecx
.text:0000E23E                 mov     eax, [ebp+var_4]
.text:0000E241                 mov     eax, [eax]
.text:0000E243                 mov     esp, ebp
.text:0000E245                 pop     ebp
.text:0000E246                 retn
.text:0000E246 ?Front@?$CRecordVector@I@@QAEAAIXZ endp
.text:0000E246
.text:0000E246 ; ---------------------------------------------------------------------------
.text:0000E247                 align 4
.text:0000E247 _text           ends
.text:0000E247
.text:0000E248 ; ===========================================================================
.text:0000E248
.text:0000E248 ; Segment type: Pure code
.text:0000E248 ; Segment permissions: Read/Execute
.text:0000E248 _text           segment para public 'CODE' use32
.text:0000E248                 assume cs:_text
.text:0000E248                 ;org 0E248h
.text:0000E248 ; COMDAT (pick any)
.text:0000E248                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000E248
.text:0000E248 ; =============== S U B R O U T I N E =======================================
.text:0000E248
.text:0000E248 ; Attributes: bp-based frame
.text:0000E248
.text:0000E248 ; public: static void __stdcall CRecordVector<unsigned int>::SortRefDown(unsigned int *, unsigned int, unsigned int, int (__stdcall *)(unsigned int const *, unsigned int const *, void *), void *)
.text:0000E248                 public ?SortRefDown@?$CRecordVector@I@@SGXPAIIIP6GHPBI1PAX@Z2@Z
.text:0000E248 ?SortRefDown@?$CRecordVector@I@@SGXPAIIIP6GHPBI1PAX@Z2@Z proc near
.text:0000E248                                         ; CODE XREF: CRecordVector<uint>::Sort(int (*)(uint const *,uint const *,void *),void *)+5Bp
.text:0000E248                                         ; CRecordVector<uint>::Sort(int (*)(uint const *,uint const *,void *),void *)+AAp
.text:0000E248
.text:0000E248 var_10          = dword ptr -10h
.text:0000E248 var_C           = dword ptr -0Ch
.text:0000E248 var_8           = dword ptr -8
.text:0000E248 var_4           = dword ptr -4
.text:0000E248 arg_0           = dword ptr  8
.text:0000E248 arg_4           = dword ptr  0Ch
.text:0000E248 arg_8           = dword ptr  10h
.text:0000E248 arg_C           = dword ptr  14h
.text:0000E248 arg_10          = dword ptr  18h
.text:0000E248
.text:0000E248                 push    ebp
.text:0000E249                 mov     ebp, esp
.text:0000E24B                 sub     esp, 10h
.text:0000E24E                 push    esi
.text:0000E24F                 mov     eax, 0CCCCCCCCh
.text:0000E254                 mov     [ebp+var_10], eax
.text:0000E257                 mov     [ebp+var_C], eax
.text:0000E25A                 mov     [ebp+var_8], eax
.text:0000E25D                 mov     [ebp+var_4], eax
.text:0000E260                 mov     eax, [ebp+arg_4]
.text:0000E263                 mov     ecx, [ebp+arg_0]
.text:0000E266                 mov     edx, [ecx+eax*4]
.text:0000E269                 mov     [ebp+var_8], edx
.text:0000E26C
.text:0000E26C loc_E26C:                               ; CODE XREF: CRecordVector<uint>::SortRefDown(uint *,uint,uint,int (*)(uint const *,uint const *,void *),void *)+ACj
.text:0000E26C                 mov     eax, [ebp+arg_4]
.text:0000E26F                 shl     eax, 1
.text:0000E271                 mov     [ebp+var_10], eax
.text:0000E274                 mov     ecx, [ebp+var_10]
.text:0000E277                 cmp     ecx, [ebp+arg_8]
.text:0000E27A                 jbe     short loc_E27E
.text:0000E27C                 jmp     short loc_E2F9
.text:0000E27E ; ---------------------------------------------------------------------------
.text:0000E27E
.text:0000E27E loc_E27E:                               ; CODE XREF: CRecordVector<uint>::SortRefDown(uint *,uint,uint,int (*)(uint const *,uint const *,void *),void *)+32j
.text:0000E27E                 mov     edx, [ebp+var_10]
.text:0000E281                 cmp     edx, [ebp+arg_8]
.text:0000E284                 jnb     short loc_E2B8
.text:0000E286                 mov     esi, esp
.text:0000E288                 mov     eax, [ebp+arg_10]
.text:0000E28B                 push    eax
.text:0000E28C                 mov     ecx, [ebp+var_10]
.text:0000E28F                 mov     edx, [ebp+arg_0]
.text:0000E292                 lea     eax, [edx+ecx*4]
.text:0000E295                 push    eax
.text:0000E296                 mov     ecx, [ebp+var_10]
.text:0000E299                 mov     edx, [ebp+arg_0]
.text:0000E29C                 lea     eax, [edx+ecx*4+4]
.text:0000E2A0                 push    eax
.text:0000E2A1                 call    [ebp+arg_C]
.text:0000E2A4                 cmp     esi, esp
.text:0000E2A6                 call    __RTC_CheckEsp
.text:0000E2AB                 test    eax, eax
.text:0000E2AD                 jle     short loc_E2B8
.text:0000E2AF                 mov     ecx, [ebp+var_10]
.text:0000E2B2                 add     ecx, 1
.text:0000E2B5                 mov     [ebp+var_10], ecx
.text:0000E2B8
.text:0000E2B8 loc_E2B8:                               ; CODE XREF: CRecordVector<uint>::SortRefDown(uint *,uint,uint,int (*)(uint const *,uint const *,void *),void *)+3Cj
.text:0000E2B8                                         ; CRecordVector<uint>::SortRefDown(uint *,uint,uint,int (*)(uint const *,uint const *,void *),void *)+65j
.text:0000E2B8                 mov     esi, esp
.text:0000E2BA                 mov     edx, [ebp+arg_10]
.text:0000E2BD                 push    edx
.text:0000E2BE                 mov     eax, [ebp+var_10]
.text:0000E2C1                 mov     ecx, [ebp+arg_0]
.text:0000E2C4                 lea     edx, [ecx+eax*4]
.text:0000E2C7                 push    edx
.text:0000E2C8                 lea     eax, [ebp+var_8]
.text:0000E2CB                 push    eax
.text:0000E2CC                 call    [ebp+arg_C]
.text:0000E2CF                 cmp     esi, esp
.text:0000E2D1                 call    __RTC_CheckEsp
.text:0000E2D6                 test    eax, eax
.text:0000E2D8                 jl      short loc_E2DC
.text:0000E2DA                 jmp     short loc_E2F9
.text:0000E2DC ; ---------------------------------------------------------------------------
.text:0000E2DC
.text:0000E2DC loc_E2DC:                               ; CODE XREF: CRecordVector<uint>::SortRefDown(uint *,uint,uint,int (*)(uint const *,uint const *,void *),void *)+90j
.text:0000E2DC                 mov     ecx, [ebp+arg_4]
.text:0000E2DF                 mov     edx, [ebp+arg_0]
.text:0000E2E2                 mov     eax, [ebp+var_10]
.text:0000E2E5                 mov     esi, [ebp+arg_0]
.text:0000E2E8                 mov     eax, [esi+eax*4]
.text:0000E2EB                 mov     [edx+ecx*4], eax
.text:0000E2EE                 mov     ecx, [ebp+var_10]
.text:0000E2F1                 mov     [ebp+arg_4], ecx
.text:0000E2F4                 jmp     loc_E26C
.text:0000E2F9 ; ---------------------------------------------------------------------------
.text:0000E2F9
.text:0000E2F9 loc_E2F9:                               ; CODE XREF: CRecordVector<uint>::SortRefDown(uint *,uint,uint,int (*)(uint const *,uint const *,void *),void *)+34j
.text:0000E2F9                                         ; CRecordVector<uint>::SortRefDown(uint *,uint,uint,int (*)(uint const *,uint const *,void *),void *)+92j
.text:0000E2F9                 mov     edx, [ebp+arg_4]
.text:0000E2FC                 mov     eax, [ebp+arg_0]
.text:0000E2FF                 mov     ecx, [ebp+var_8]
.text:0000E302                 mov     [eax+edx*4], ecx
.text:0000E305                 push    edx
.text:0000E306                 mov     ecx, ebp
.text:0000E308                 push    eax
.text:0000E309                 lea     edx, $LN10_4
.text:0000E30F                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000E314                 pop     eax
.text:0000E315                 pop     edx
.text:0000E316                 pop     esi
.text:0000E317                 add     esp, 10h
.text:0000E31A                 cmp     ebp, esp
.text:0000E31C                 call    __RTC_CheckEsp
.text:0000E321                 mov     esp, ebp
.text:0000E323                 pop     ebp
.text:0000E324                 retn    14h
.text:0000E324 ?SortRefDown@?$CRecordVector@I@@SGXPAIIIP6GHPBI1PAX@Z2@Z endp
.text:0000E324
.text:0000E324 ; ---------------------------------------------------------------------------
.text:0000E327                 align 4
.text:0000E328 $LN10_4         dd 1                    ; DATA XREF: CRecordVector<uint>::SortRefDown(uint *,uint,uint,int (*)(uint const *,uint const *,void *),void *)+C1o
.text:0000E32C                 dd offset $LN9_2
.text:0000E330 $LN9_2          dd 0FFFFFFF8h, 4        ; DATA XREF: .text:0000E32Co
.text:0000E338                 dd offset $LN8_1        ; "temp"
.text:0000E33C $LN8_1          db 'temp',0             ; DATA XREF: .text:0000E338o
.text:0000E341                 align 4
.text:0000E341 _text           ends
.text:0000E341
.text:0000E344 ; ===========================================================================
.text:0000E344
.text:0000E344 ; Segment type: Pure code
.text:0000E344 ; Segment permissions: Read/Execute
.text:0000E344 _text           segment para public 'CODE' use32
.text:0000E344                 assume cs:_text
.text:0000E344                 ;org 0E344h
.text:0000E344 ; COMDAT (pick any)
.text:0000E344                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000E344
.text:0000E344 ; =============== S U B R O U T I N E =======================================
.text:0000E344
.text:0000E344 ; Attributes: bp-based frame
.text:0000E344
.text:0000E344 ; private: void __thiscall CRecordVector<unsigned __int64>::ReserveOnePosition(void)
.text:0000E344                 public ?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ
.text:0000E344 ?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ proc near
.text:0000E344                                         ; CODE XREF: CRecordVector<unsigned __int64>::Add(unsigned __int64)+1Ap
.text:0000E344
.text:0000E344 var_14          = dword ptr -14h
.text:0000E344 var_10          = dword ptr -10h
.text:0000E344 Dst             = dword ptr -0Ch
.text:0000E344 var_8           = dword ptr -8
.text:0000E344 var_4           = dword ptr -4
.text:0000E344
.text:0000E344                 push    ebp
.text:0000E345                 mov     ebp, esp
.text:0000E347                 sub     esp, 14h
.text:0000E34A                 mov     eax, 0CCCCCCCCh
.text:0000E34F                 mov     [ebp+var_14], eax
.text:0000E352                 mov     [ebp+var_10], eax
.text:0000E355                 mov     [ebp+Dst], eax
.text:0000E358                 mov     [ebp+var_8], eax
.text:0000E35B                 mov     [ebp+var_4], eax
.text:0000E35E                 mov     [ebp+var_4], ecx
.text:0000E361                 mov     eax, [ebp+var_4]
.text:0000E364                 mov     ecx, [ebp+var_4]
.text:0000E367                 mov     edx, [eax+4]
.text:0000E36A                 cmp     edx, [ecx+8]
.text:0000E36D                 jnz     loc_E3F8
.text:0000E373                 mov     eax, [ebp+var_4]
.text:0000E376                 mov     ecx, [eax+8]
.text:0000E379                 shr     ecx, 2
.text:0000E37C                 mov     edx, [ebp+var_4]
.text:0000E37F                 mov     eax, [edx+8]
.text:0000E382                 lea     ecx, [eax+ecx+1]
.text:0000E386                 mov     [ebp+var_8], ecx
.text:0000E389                 xor     ecx, ecx
.text:0000E38B                 mov     eax, [ebp+var_8]
.text:0000E38E                 mov     edx, 8
.text:0000E393                 mul     edx
.text:0000E395                 seto    cl
.text:0000E398                 neg     ecx
.text:0000E39A                 or      ecx, eax
.text:0000E39C                 push    ecx             ; unsigned int
.text:0000E39D                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000E3A2                 add     esp, 4
.text:0000E3A5                 mov     [ebp+var_10], eax
.text:0000E3A8                 mov     eax, [ebp+var_10]
.text:0000E3AB                 mov     [ebp+Dst], eax
.text:0000E3AE                 mov     ecx, [ebp+var_4]
.text:0000E3B1                 cmp     dword ptr [ecx+4], 0
.text:0000E3B5                 jz      short loc_E3D3
.text:0000E3B7                 mov     edx, [ebp+var_4]
.text:0000E3BA                 mov     eax, [edx+4]
.text:0000E3BD                 shl     eax, 3
.text:0000E3C0                 push    eax             ; Size
.text:0000E3C1                 mov     ecx, [ebp+var_4]
.text:0000E3C4                 mov     edx, [ecx]
.text:0000E3C6                 push    edx             ; Src
.text:0000E3C7                 mov     eax, [ebp+Dst]
.text:0000E3CA                 push    eax             ; Dst
.text:0000E3CB                 call    _memcpy
.text:0000E3D0                 add     esp, 0Ch
.text:0000E3D3
.text:0000E3D3 loc_E3D3:                               ; CODE XREF: CRecordVector<unsigned __int64>::ReserveOnePosition(void)+71j
.text:0000E3D3                 mov     ecx, [ebp+var_4]
.text:0000E3D6                 mov     edx, [ecx]
.text:0000E3D8                 mov     [ebp+var_14], edx
.text:0000E3DB                 mov     eax, [ebp+var_14]
.text:0000E3DE                 push    eax             ; void *
.text:0000E3DF                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000E3E4                 add     esp, 4
.text:0000E3E7                 mov     ecx, [ebp+var_4]
.text:0000E3EA                 mov     edx, [ebp+Dst]
.text:0000E3ED                 mov     [ecx], edx
.text:0000E3EF                 mov     eax, [ebp+var_4]
.text:0000E3F2                 mov     ecx, [ebp+var_8]
.text:0000E3F5                 mov     [eax+8], ecx
.text:0000E3F8
.text:0000E3F8 loc_E3F8:                               ; CODE XREF: CRecordVector<unsigned __int64>::ReserveOnePosition(void)+29j
.text:0000E3F8                 add     esp, 14h
.text:0000E3FB                 cmp     ebp, esp
.text:0000E3FD                 call    __RTC_CheckEsp
.text:0000E402                 mov     esp, ebp
.text:0000E404                 pop     ebp
.text:0000E405                 retn
.text:0000E405 ?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ endp
.text:0000E405
.text:0000E405 ; ---------------------------------------------------------------------------
.text:0000E406                 align 4
.text:0000E406 _text           ends
.text:0000E406
.text:0000E408 ; ===========================================================================
.text:0000E408
.text:0000E408 ; Segment type: Pure code
.text:0000E408 ; Segment permissions: Read/Execute
.text:0000E408 _text           segment para public 'CODE' use32
.text:0000E408                 assume cs:_text
.text:0000E408                 ;org 0E408h
.text:0000E408 ; COMDAT (pick any)
.text:0000E408                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000E408
.text:0000E408 ; =============== S U B R O U T I N E =======================================
.text:0000E408
.text:0000E408 ; Attributes: bp-based frame
.text:0000E408
.text:0000E408 ; private: void __thiscall CRecordVector<bool>::ReserveOnePosition(void)
.text:0000E408                 public ?ReserveOnePosition@?$CRecordVector@_N@@AAEXXZ
.text:0000E408 ?ReserveOnePosition@?$CRecordVector@_N@@AAEXXZ proc near
.text:0000E408                                         ; CODE XREF: CRecordVector<bool>::Add(bool)+1Ap
.text:0000E408
.text:0000E408 var_14          = dword ptr -14h
.text:0000E408 var_10          = dword ptr -10h
.text:0000E408 Dst             = dword ptr -0Ch
.text:0000E408 var_8           = dword ptr -8
.text:0000E408 var_4           = dword ptr -4
.text:0000E408
.text:0000E408                 push    ebp
.text:0000E409                 mov     ebp, esp
.text:0000E40B                 sub     esp, 14h
.text:0000E40E                 mov     eax, 0CCCCCCCCh
.text:0000E413                 mov     [ebp+var_14], eax
.text:0000E416                 mov     [ebp+var_10], eax
.text:0000E419                 mov     [ebp+Dst], eax
.text:0000E41C                 mov     [ebp+var_8], eax
.text:0000E41F                 mov     [ebp+var_4], eax
.text:0000E422                 mov     [ebp+var_4], ecx
.text:0000E425                 mov     eax, [ebp+var_4]
.text:0000E428                 mov     ecx, [ebp+var_4]
.text:0000E42B                 mov     edx, [eax+4]
.text:0000E42E                 cmp     edx, [ecx+8]
.text:0000E431                 jnz     short loc_E4A5
.text:0000E433                 mov     eax, [ebp+var_4]
.text:0000E436                 mov     ecx, [eax+8]
.text:0000E439                 shr     ecx, 2
.text:0000E43C                 mov     edx, [ebp+var_4]
.text:0000E43F                 mov     eax, [edx+8]
.text:0000E442                 lea     ecx, [eax+ecx+1]
.text:0000E446                 mov     [ebp+var_8], ecx
.text:0000E449                 mov     edx, [ebp+var_8]
.text:0000E44C                 push    edx             ; unsigned int
.text:0000E44D                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000E452                 add     esp, 4
.text:0000E455                 mov     [ebp+var_10], eax
.text:0000E458                 mov     eax, [ebp+var_10]
.text:0000E45B                 mov     [ebp+Dst], eax
.text:0000E45E                 mov     ecx, [ebp+var_4]
.text:0000E461                 cmp     dword ptr [ecx+4], 0
.text:0000E465                 jz      short loc_E480
.text:0000E467                 mov     edx, [ebp+var_4]
.text:0000E46A                 mov     eax, [edx+4]
.text:0000E46D                 push    eax             ; Size
.text:0000E46E                 mov     ecx, [ebp+var_4]
.text:0000E471                 mov     edx, [ecx]
.text:0000E473                 push    edx             ; Src
.text:0000E474                 mov     eax, [ebp+Dst]
.text:0000E477                 push    eax             ; Dst
.text:0000E478                 call    _memcpy
.text:0000E47D                 add     esp, 0Ch
.text:0000E480
.text:0000E480 loc_E480:                               ; CODE XREF: CRecordVector<bool>::ReserveOnePosition(void)+5Dj
.text:0000E480                 mov     ecx, [ebp+var_4]
.text:0000E483                 mov     edx, [ecx]
.text:0000E485                 mov     [ebp+var_14], edx
.text:0000E488                 mov     eax, [ebp+var_14]
.text:0000E48B                 push    eax             ; void *
.text:0000E48C                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000E491                 add     esp, 4
.text:0000E494                 mov     ecx, [ebp+var_4]
.text:0000E497                 mov     edx, [ebp+Dst]
.text:0000E49A                 mov     [ecx], edx
.text:0000E49C                 mov     eax, [ebp+var_4]
.text:0000E49F                 mov     ecx, [ebp+var_8]
.text:0000E4A2                 mov     [eax+8], ecx
.text:0000E4A5
.text:0000E4A5 loc_E4A5:                               ; CODE XREF: CRecordVector<bool>::ReserveOnePosition(void)+29j
.text:0000E4A5                 add     esp, 14h
.text:0000E4A8                 cmp     ebp, esp
.text:0000E4AA                 call    __RTC_CheckEsp
.text:0000E4AF                 mov     esp, ebp
.text:0000E4B1                 pop     ebp
.text:0000E4B2                 retn
.text:0000E4B2 ?ReserveOnePosition@?$CRecordVector@_N@@AAEXXZ endp
.text:0000E4B2
.text:0000E4B2 ; ---------------------------------------------------------------------------
.text:0000E4B3                 align 4
.text:0000E4B3 _text           ends
.text:0000E4B3
.text:0000E4B4 ; ===========================================================================
.text:0000E4B4
.text:0000E4B4 ; Segment type: Pure code
.text:0000E4B4 ; Segment permissions: Read/Execute
.text:0000E4B4 _text           segment para public 'CODE' use32
.text:0000E4B4                 assume cs:_text
.text:0000E4B4                 ;org 0E4B4h
.text:0000E4B4 ; COMDAT (pick any)
.text:0000E4B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000E4B4
.text:0000E4B4 ; =============== S U B R O U T I N E =======================================
.text:0000E4B4
.text:0000E4B4 ; Attributes: bp-based frame
.text:0000E4B4
.text:0000E4B4 ; public: __thiscall CObjectVector<struct CProp>::CObjectVector<struct CProp>(class CObjectVector<struct CProp> const &)
.text:0000E4B4                 public ??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z
.text:0000E4B4 ??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z proc near
.text:0000E4B4                                         ; CODE XREF: CProps::CProps(CProps const &)+15p
.text:0000E4B4
.text:0000E4B4 var_24          = dword ptr -24h
.text:0000E4B4 var_20          = dword ptr -20h
.text:0000E4B4 var_1C          = dword ptr -1Ch
.text:0000E4B4 var_18          = dword ptr -18h
.text:0000E4B4 var_14          = dword ptr -14h
.text:0000E4B4 var_10          = dword ptr -10h
.text:0000E4B4 var_C           = dword ptr -0Ch
.text:0000E4B4 var_4           = dword ptr -4
.text:0000E4B4 arg_0           = dword ptr  8
.text:0000E4B4
.text:0000E4B4                 push    ebp
.text:0000E4B5                 mov     ebp, esp
.text:0000E4B7                 push    0FFFFFFFFh
.text:0000E4B9                 push    offset __ehhandler$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z
.text:0000E4BE                 mov     eax, large fs:0
.text:0000E4C4                 push    eax
.text:0000E4C5                 sub     esp, 18h
.text:0000E4C8                 mov     eax, 0CCCCCCCCh
.text:0000E4CD                 mov     [ebp+var_24], eax
.text:0000E4D0                 mov     [ebp+var_20], eax
.text:0000E4D3                 mov     [ebp+var_1C], eax
.text:0000E4D6                 mov     [ebp+var_18], eax
.text:0000E4D9                 mov     [ebp+var_14], eax
.text:0000E4DC                 mov     [ebp+var_10], eax
.text:0000E4DF                 mov     eax, dword ptr ds:___security_cookie
.text:0000E4E4                 xor     eax, ebp
.text:0000E4E6                 push    eax
.text:0000E4E7                 lea     eax, [ebp+var_C]
.text:0000E4EA                 mov     large fs:0, eax
.text:0000E4F0                 mov     [ebp+var_10], ecx
.text:0000E4F3                 mov     ecx, [ebp+var_10]
.text:0000E4F6                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:0000E4FB                 mov     [ebp+var_4], 0
.text:0000E502                 mov     ecx, [ebp+arg_0]
.text:0000E505                 call    ?Size@?$CObjectVector@UCProp@@@@QBEIXZ ; CObjectVector<CProp>::Size(void)
.text:0000E50A                 mov     [ebp+var_14], eax
.text:0000E50D                 mov     eax, [ebp+var_14]
.text:0000E510                 push    eax
.text:0000E511                 mov     ecx, [ebp+var_10]
.text:0000E514                 call    ?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z ; CRecordVector<void *>::ConstructReserve(uint)
.text:0000E519                 mov     [ebp+var_18], 0
.text:0000E520                 jmp     short loc_E52B
.text:0000E522 ; ---------------------------------------------------------------------------
.text:0000E522
.text:0000E522 loc_E522:                               ; CODE XREF: CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+CDj
.text:0000E522                 mov     ecx, [ebp+var_18]
.text:0000E525                 add     ecx, 1
.text:0000E528                 mov     [ebp+var_18], ecx
.text:0000E52B
.text:0000E52B loc_E52B:                               ; CODE XREF: CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+6Cj
.text:0000E52B                 mov     edx, [ebp+var_18]
.text:0000E52E                 cmp     edx, [ebp+var_14]
.text:0000E531                 jnb     short loc_E583
.text:0000E533                 push    18h             ; unsigned int
.text:0000E535                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000E53A                 add     esp, 4
.text:0000E53D                 mov     [ebp+var_20], eax
.text:0000E540                 mov     byte ptr [ebp+var_4], 1
.text:0000E544                 cmp     [ebp+var_20], 0
.text:0000E548                 jz      short loc_E564
.text:0000E54A                 mov     eax, [ebp+var_18]
.text:0000E54D                 push    eax
.text:0000E54E                 mov     ecx, [ebp+arg_0]
.text:0000E551                 call    ??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ; CObjectVector<CProp>::operator[](uint)
.text:0000E556                 push    eax             ; struct CProp *
.text:0000E557                 mov     ecx, [ebp+var_20] ; this
.text:0000E55A                 call    ??0CProp@@QAE@ABU0@@Z ; CProp::CProp(CProp const &)
.text:0000E55F                 mov     [ebp+var_24], eax
.text:0000E562                 jmp     short loc_E56B
.text:0000E564 ; ---------------------------------------------------------------------------
.text:0000E564
.text:0000E564 loc_E564:                               ; CODE XREF: CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+94j
.text:0000E564                 mov     [ebp+var_24], 0
.text:0000E56B
.text:0000E56B loc_E56B:                               ; CODE XREF: CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+AEj
.text:0000E56B                 mov     ecx, [ebp+var_24]
.text:0000E56E                 mov     [ebp+var_1C], ecx
.text:0000E571                 mov     byte ptr [ebp+var_4], 0
.text:0000E575                 mov     edx, [ebp+var_1C]
.text:0000E578                 push    edx
.text:0000E579                 mov     ecx, [ebp+var_10]
.text:0000E57C                 call    ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ; CRecordVector<void *>::AddInReserved(void * const)
.text:0000E581                 jmp     short loc_E522
.text:0000E583 ; ---------------------------------------------------------------------------
.text:0000E583
.text:0000E583 loc_E583:                               ; CODE XREF: CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+7Dj
.text:0000E583                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000E58A                 mov     eax, [ebp+var_10]
.text:0000E58D                 mov     ecx, [ebp+var_C]
.text:0000E590                 mov     large fs:0, ecx
.text:0000E597                 pop     ecx
.text:0000E598                 add     esp, 24h
.text:0000E59B                 cmp     ebp, esp
.text:0000E59D                 call    __RTC_CheckEsp
.text:0000E5A2                 mov     esp, ebp
.text:0000E5A4                 pop     ebp
.text:0000E5A5                 retn    4
.text:0000E5A5 ??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z endp
.text:0000E5A5
.text:0000E5A5 _text           ends
.text:0000E5A5
.text$x:0000E5A8 ; ===========================================================================
.text$x:0000E5A8
.text$x:0000E5A8 ; Segment type: Pure code
.text$x:0000E5A8 ; Segment permissions: Read/Execute
.text$x:0000E5A8 _text$x         segment para public 'CODE' use32
.text$x:0000E5A8                 assume cs:_text$x
.text$x:0000E5A8                 ;org 0E5A8h
.text$x:0000E5A8 ; COMDAT (pick associative to section at E4B4)
.text$x:0000E5A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000E5A8
.text$x:0000E5A8 ; =============== S U B R O U T I N E =======================================
.text$x:0000E5A8
.text$x:0000E5A8
.text$x:0000E5A8 __unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$0 proc near
.text$x:0000E5A8                                         ; DATA XREF: .xdata$x:0000E5DCo
.text$x:0000E5A8                 mov     ecx, [ebp-10h]
.text$x:0000E5AB                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:0000E5AB __unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$0 endp
.text$x:0000E5AB
.text$x:0000E5B0
.text$x:0000E5B0 ; =============== S U B R O U T I N E =======================================
.text$x:0000E5B0
.text$x:0000E5B0
.text$x:0000E5B0 __unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$1 proc near
.text$x:0000E5B0                                         ; DATA XREF: .xdata$x:0000E5E4o
.text$x:0000E5B0                 mov     eax, [ebp-20h]
.text$x:0000E5B3                 push    eax             ; void *
.text$x:0000E5B4                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000E5B9                 pop     ecx
.text$x:0000E5BA                 retn
.text$x:0000E5BA __unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$1 endp
.text$x:0000E5BA
.text$x:0000E5BB
.text$x:0000E5BB ; =============== S U B R O U T I N E =======================================
.text$x:0000E5BB
.text$x:0000E5BB
.text$x:0000E5BB __ehhandler$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z proc near
.text$x:0000E5BB                                         ; DATA XREF: CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+5o
.text$x:0000E5BB
.text$x:0000E5BB arg_4           = dword ptr  8
.text$x:0000E5BB
.text$x:0000E5BB                 mov     edx, [esp+arg_4]
.text$x:0000E5BF                 lea     eax, [edx+0Ch]
.text$x:0000E5C2                 mov     ecx, [edx-1Ch]
.text$x:0000E5C5                 xor     ecx, eax
.text$x:0000E5C7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000E5CC                 mov     eax, offset __ehfuncinfo$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z
.text$x:0000E5D1                 jmp     ___CxxFrameHandler3
.text$x:0000E5D1 __ehhandler$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z endp
.text$x:0000E5D1
.text$x:0000E5D1 ; ---------------------------------------------------------------------------
.text$x:0000E5D6                 align 4
.text$x:0000E5D6 _text$x         ends
.text$x:0000E5D6
.xdata$x:0000E5D8 ; ===========================================================================
.xdata$x:0000E5D8
.xdata$x:0000E5D8 ; Segment type: Pure data
.xdata$x:0000E5D8 ; Segment permissions: Read
.xdata$x:0000E5D8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000E5D8                 assume cs:_xdata$x
.xdata$x:0000E5D8                 ;org 0E5D8h
.xdata$x:0000E5D8 ; COMDAT (pick associative to section at E4B4)
.xdata$x:0000E5D8 __unwindtable$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z db 0FFh
.xdata$x:0000E5D8                                         ; DATA XREF: .xdata$x:0000E5F0o
.xdata$x:0000E5D9                 db 0FFh
.xdata$x:0000E5DA                 db 0FFh
.xdata$x:0000E5DB                 db 0FFh
.xdata$x:0000E5DC                 dd offset __unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$0
.xdata$x:0000E5E0                 db    0
.xdata$x:0000E5E1                 db    0
.xdata$x:0000E5E2                 db    0
.xdata$x:0000E5E3                 db    0
.xdata$x:0000E5E4                 dd offset __unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$1
.xdata$x:0000E5E8 __ehfuncinfo$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z db  22h ; "
.xdata$x:0000E5E8                                         ; DATA XREF: __ehhandler$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z+11o
.xdata$x:0000E5E9                 db    5
.xdata$x:0000E5EA                 db  93h ; ô
.xdata$x:0000E5EB                 db  19h
.xdata$x:0000E5EC                 db    2
.xdata$x:0000E5ED                 db    0
.xdata$x:0000E5EE                 db    0
.xdata$x:0000E5EF                 db    0
.xdata$x:0000E5F0                 dd offset __unwindtable$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z
.xdata$x:0000E5F4                 db    0
.xdata$x:0000E5F5                 db    0
.xdata$x:0000E5F6                 db    0
.xdata$x:0000E5F7                 db    0
.xdata$x:0000E5F8                 db    0
.xdata$x:0000E5F9                 db    0
.xdata$x:0000E5FA                 db    0
.xdata$x:0000E5FB                 db    0
.xdata$x:0000E5FC                 db    0
.xdata$x:0000E5FD                 db    0
.xdata$x:0000E5FE                 db    0
.xdata$x:0000E5FF                 db    0
.xdata$x:0000E600                 db    0
.xdata$x:0000E601                 db    0
.xdata$x:0000E602                 db    0
.xdata$x:0000E603                 db    0
.xdata$x:0000E604                 db    0
.xdata$x:0000E605                 db    0
.xdata$x:0000E606                 db    0
.xdata$x:0000E607                 db    0
.xdata$x:0000E608                 db    1
.xdata$x:0000E609                 db    0
.xdata$x:0000E60A                 db    0
.xdata$x:0000E60B                 db    0
.xdata$x:0000E60B _xdata$x        ends
.xdata$x:0000E60B
.text:0000E60C ; ===========================================================================
.text:0000E60C
.text:0000E60C ; Segment type: Pure code
.text:0000E60C ; Segment permissions: Read/Execute
.text:0000E60C _text           segment para public 'CODE' use32
.text:0000E60C                 assume cs:_text
.text:0000E60C                 ;org 0E60Ch
.text:0000E60C ; COMDAT (pick any)
.text:0000E60C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000E60C
.text:0000E60C ; =============== S U B R O U T I N E =======================================
.text:0000E60C
.text:0000E60C ; Attributes: bp-based frame
.text:0000E60C
.text:0000E60C ; public: unsigned int __thiscall CObjectVector<struct CProp>::Size(void)const
.text:0000E60C                 public ?Size@?$CObjectVector@UCProp@@@@QBEIXZ
.text:0000E60C ?Size@?$CObjectVector@UCProp@@@@QBEIXZ proc near
.text:0000E60C                                         ; CODE XREF: CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+51p
.text:0000E60C
.text:0000E60C var_4           = dword ptr -4
.text:0000E60C
.text:0000E60C                 push    ebp
.text:0000E60D                 mov     ebp, esp
.text:0000E60F                 push    ecx
.text:0000E610                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000E617                 mov     [ebp+var_4], ecx
.text:0000E61A                 mov     ecx, [ebp+var_4]
.text:0000E61D                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:0000E622                 add     esp, 4
.text:0000E625                 cmp     ebp, esp
.text:0000E627                 call    __RTC_CheckEsp
.text:0000E62C                 mov     esp, ebp
.text:0000E62E                 pop     ebp
.text:0000E62F                 retn
.text:0000E62F ?Size@?$CObjectVector@UCProp@@@@QBEIXZ endp
.text:0000E62F
.text:0000E62F _text           ends
.text:0000E62F
.text:0000E630 ; ===========================================================================
.text:0000E630
.text:0000E630 ; Segment type: Pure code
.text:0000E630 ; Segment permissions: Read/Execute
.text:0000E630 _text           segment para public 'CODE' use32
.text:0000E630                 assume cs:_text
.text:0000E630                 ;org 0E630h
.text:0000E630 ; COMDAT (pick any)
.text:0000E630                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000E630
.text:0000E630 ; =============== S U B R O U T I N E =======================================
.text:0000E630
.text:0000E630 ; Attributes: bp-based frame
.text:0000E630
.text:0000E630 ; public: struct CProp const & __thiscall CObjectVector<struct CProp>::operator[](unsigned int)const
.text:0000E630                 public ??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z
.text:0000E630 ??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z proc near
.text:0000E630                                         ; CODE XREF: CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+9Dp
.text:0000E630
.text:0000E630 var_4           = dword ptr -4
.text:0000E630 arg_0           = dword ptr  8
.text:0000E630
.text:0000E630                 push    ebp
.text:0000E631                 mov     ebp, esp
.text:0000E633                 push    ecx
.text:0000E634                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000E63B                 mov     [ebp+var_4], ecx
.text:0000E63E                 mov     eax, [ebp+arg_0]
.text:0000E641                 push    eax
.text:0000E642                 mov     ecx, [ebp+var_4]
.text:0000E645                 call    ??A?$CRecordVector@PAX@@QBEABQAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:0000E64A                 mov     eax, [eax]
.text:0000E64C                 add     esp, 4
.text:0000E64F                 cmp     ebp, esp
.text:0000E651                 call    __RTC_CheckEsp
.text:0000E656                 mov     esp, ebp
.text:0000E658                 pop     ebp
.text:0000E659                 retn    4
.text:0000E659 ??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z endp
.text:0000E659
.text:0000E659 _text           ends
.text:0000E659
.text:0000E65C ; ===========================================================================
.text:0000E65C
.text:0000E65C ; Segment type: Pure code
.text:0000E65C ; Segment permissions: Read/Execute
.text:0000E65C _text           segment para public 'CODE' use32
.text:0000E65C                 assume cs:_text
.text:0000E65C                 ;org 0E65Ch
.text:0000E65C ; COMDAT (pick any)
.text:0000E65C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000E65C
.text:0000E65C ; =============== S U B R O U T I N E =======================================
.text:0000E65C
.text:0000E65C ; Attributes: bp-based frame
.text:0000E65C
.text:0000E65C ; private: void __thiscall CRecordVector<struct NArchive::N7z::CBond2>::ReserveOnePosition(void)
.text:0000E65C                 public ?ReserveOnePosition@?$CRecordVector@UCBond2@N7z@NArchive@@@@AAEXXZ
.text:0000E65C ?ReserveOnePosition@?$CRecordVector@UCBond2@N7z@NArchive@@@@AAEXXZ proc near
.text:0000E65C                                         ; CODE XREF: CRecordVector<NArchive::N7z::CBond2>::Add(NArchive::N7z::CBond2)+20p
.text:0000E65C
.text:0000E65C var_14          = dword ptr -14h
.text:0000E65C var_10          = dword ptr -10h
.text:0000E65C Dst             = dword ptr -0Ch
.text:0000E65C var_8           = dword ptr -8
.text:0000E65C var_4           = dword ptr -4
.text:0000E65C
.text:0000E65C                 push    ebp
.text:0000E65D                 mov     ebp, esp
.text:0000E65F                 sub     esp, 14h
.text:0000E662                 mov     eax, 0CCCCCCCCh
.text:0000E667                 mov     [ebp+var_14], eax
.text:0000E66A                 mov     [ebp+var_10], eax
.text:0000E66D                 mov     [ebp+Dst], eax
.text:0000E670                 mov     [ebp+var_8], eax
.text:0000E673                 mov     [ebp+var_4], eax
.text:0000E676                 mov     [ebp+var_4], ecx
.text:0000E679                 mov     eax, [ebp+var_4]
.text:0000E67C                 mov     ecx, [ebp+var_4]
.text:0000E67F                 mov     edx, [eax+4]
.text:0000E682                 cmp     edx, [ecx+8]
.text:0000E685                 jnz     loc_E710
.text:0000E68B                 mov     eax, [ebp+var_4]
.text:0000E68E                 mov     ecx, [eax+8]
.text:0000E691                 shr     ecx, 2
.text:0000E694                 mov     edx, [ebp+var_4]
.text:0000E697                 mov     eax, [edx+8]
.text:0000E69A                 lea     ecx, [eax+ecx+1]
.text:0000E69E                 mov     [ebp+var_8], ecx
.text:0000E6A1                 xor     ecx, ecx
.text:0000E6A3                 mov     eax, [ebp+var_8]
.text:0000E6A6                 mov     edx, 0Ch
.text:0000E6AB                 mul     edx
.text:0000E6AD                 seto    cl
.text:0000E6B0                 neg     ecx
.text:0000E6B2                 or      ecx, eax
.text:0000E6B4                 push    ecx             ; unsigned int
.text:0000E6B5                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000E6BA                 add     esp, 4
.text:0000E6BD                 mov     [ebp+var_10], eax
.text:0000E6C0                 mov     eax, [ebp+var_10]
.text:0000E6C3                 mov     [ebp+Dst], eax
.text:0000E6C6                 mov     ecx, [ebp+var_4]
.text:0000E6C9                 cmp     dword ptr [ecx+4], 0
.text:0000E6CD                 jz      short loc_E6EB
.text:0000E6CF                 mov     edx, [ebp+var_4]
.text:0000E6D2                 mov     eax, [edx+4]
.text:0000E6D5                 imul    eax, 0Ch
.text:0000E6D8                 push    eax             ; Size
.text:0000E6D9                 mov     ecx, [ebp+var_4]
.text:0000E6DC                 mov     edx, [ecx]
.text:0000E6DE                 push    edx             ; Src
.text:0000E6DF                 mov     eax, [ebp+Dst]
.text:0000E6E2                 push    eax             ; Dst
.text:0000E6E3                 call    _memcpy
.text:0000E6E8                 add     esp, 0Ch
.text:0000E6EB
.text:0000E6EB loc_E6EB:                               ; CODE XREF: CRecordVector<NArchive::N7z::CBond2>::ReserveOnePosition(void)+71j
.text:0000E6EB                 mov     ecx, [ebp+var_4]
.text:0000E6EE                 mov     edx, [ecx]
.text:0000E6F0                 mov     [ebp+var_14], edx
.text:0000E6F3                 mov     eax, [ebp+var_14]
.text:0000E6F6                 push    eax             ; void *
.text:0000E6F7                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000E6FC                 add     esp, 4
.text:0000E6FF                 mov     ecx, [ebp+var_4]
.text:0000E702                 mov     edx, [ebp+Dst]
.text:0000E705                 mov     [ecx], edx
.text:0000E707                 mov     eax, [ebp+var_4]
.text:0000E70A                 mov     ecx, [ebp+var_8]
.text:0000E70D                 mov     [eax+8], ecx
.text:0000E710
.text:0000E710 loc_E710:                               ; CODE XREF: CRecordVector<NArchive::N7z::CBond2>::ReserveOnePosition(void)+29j
.text:0000E710                 add     esp, 14h
.text:0000E713                 cmp     ebp, esp
.text:0000E715                 call    __RTC_CheckEsp
.text:0000E71A                 mov     esp, ebp
.text:0000E71C                 pop     ebp
.text:0000E71D                 retn
.text:0000E71D ?ReserveOnePosition@?$CRecordVector@UCBond2@N7z@NArchive@@@@AAEXXZ endp
.text:0000E71D
.text:0000E71D ; ---------------------------------------------------------------------------
.text:0000E71E                 align 10h
.text:0000E71E _text           ends
.text:0000E71E
.text:0000E720 ; ===========================================================================
.text:0000E720
.text:0000E720 ; Segment type: Pure code
.text:0000E720 ; Segment permissions: Read/Execute
.text:0000E720 _text           segment para public 'CODE' use32
.text:0000E720                 assume cs:_text
.text:0000E720                 ;org 0E720h
.text:0000E720 ; COMDAT (pick any)
.text:0000E720                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000E720
.text:0000E720 ; =============== S U B R O U T I N E =======================================
.text:0000E720
.text:0000E720 ; Attributes: bp-based frame
.text:0000E720
.text:0000E720 ; private: void __thiscall CRecordVector<struct NArchive::N7z::CFilterMode2>::ReserveOnePosition(void)
.text:0000E720                 public ?ReserveOnePosition@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@AAEXXZ
.text:0000E720 ?ReserveOnePosition@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@AAEXXZ proc near
.text:0000E720                                         ; CODE XREF: CRecordVector<NArchive::N7z::CFilterMode2>::Add(NArchive::N7z::CFilterMode2)+1Ap
.text:0000E720
.text:0000E720 var_2C          = dword ptr -2Ch
.text:0000E720 var_28          = dword ptr -28h
.text:0000E720 var_24          = dword ptr -24h
.text:0000E720 var_20          = dword ptr -20h
.text:0000E720 var_1C          = dword ptr -1Ch
.text:0000E720 Dst             = dword ptr -18h
.text:0000E720 var_14          = dword ptr -14h
.text:0000E720 var_10          = dword ptr -10h
.text:0000E720 var_C           = dword ptr -0Ch
.text:0000E720 var_4           = dword ptr -4
.text:0000E720
.text:0000E720                 push    ebp
.text:0000E721                 mov     ebp, esp
.text:0000E723                 push    0FFFFFFFFh
.text:0000E725                 push    offset __ehhandler$?ReserveOnePosition@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@AAEXXZ
.text:0000E72A                 mov     eax, large fs:0
.text:0000E730                 push    eax
.text:0000E731                 sub     esp, 20h
.text:0000E734                 mov     eax, 0CCCCCCCCh
.text:0000E739                 mov     [ebp+var_2C], eax
.text:0000E73C                 mov     [ebp+var_28], eax
.text:0000E73F                 mov     [ebp+var_24], eax
.text:0000E742                 mov     [ebp+var_20], eax
.text:0000E745                 mov     [ebp+var_1C], eax
.text:0000E748                 mov     [ebp+Dst], eax
.text:0000E74B                 mov     [ebp+var_14], eax
.text:0000E74E                 mov     [ebp+var_10], eax
.text:0000E751                 mov     eax, dword ptr ds:___security_cookie
.text:0000E756                 xor     eax, ebp
.text:0000E758                 push    eax
.text:0000E759                 lea     eax, [ebp+var_C]
.text:0000E75C                 mov     large fs:0, eax
.text:0000E762                 mov     [ebp+var_10], ecx
.text:0000E765                 mov     eax, [ebp+var_10]
.text:0000E768                 mov     ecx, [ebp+var_10]
.text:0000E76B                 mov     edx, [eax+4]
.text:0000E76E                 cmp     edx, [ecx+8]
.text:0000E771                 jnz     loc_E83F
.text:0000E777                 mov     eax, [ebp+var_10]
.text:0000E77A                 mov     ecx, [eax+8]
.text:0000E77D                 shr     ecx, 2
.text:0000E780                 mov     edx, [ebp+var_10]
.text:0000E783                 mov     eax, [edx+8]
.text:0000E786                 lea     ecx, [eax+ecx+1]
.text:0000E78A                 mov     [ebp+var_14], ecx
.text:0000E78D                 mov     edx, [ebp+var_14]
.text:0000E790                 mov     [ebp+var_1C], edx
.text:0000E793                 xor     ecx, ecx
.text:0000E795                 mov     eax, [ebp+var_1C]
.text:0000E798                 mov     edx, 10h
.text:0000E79D                 mul     edx
.text:0000E79F                 seto    cl
.text:0000E7A2                 neg     ecx
.text:0000E7A4                 or      ecx, eax
.text:0000E7A6                 push    ecx             ; unsigned int
.text:0000E7A7                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000E7AC                 add     esp, 4
.text:0000E7AF                 mov     [ebp+var_24], eax
.text:0000E7B2                 mov     [ebp+var_4], 0
.text:0000E7B9                 cmp     [ebp+var_24], 0
.text:0000E7BD                 jz      short loc_E7DB
.text:0000E7BF                 push    offset ??0CFilterMode2@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFilterMode2::CFilterMode2(void)
.text:0000E7C4                 mov     eax, [ebp+var_1C]
.text:0000E7C7                 push    eax
.text:0000E7C8                 push    10h
.text:0000E7CA                 mov     ecx, [ebp+var_24]
.text:0000E7CD                 push    ecx
.text:0000E7CE                 call    ??_H@YGXPAXIHP6EPAX0@Z@Z ; `vector constructor iterator'(void *,uint,int,void * (*)(void *))
.text:0000E7D3                 mov     edx, [ebp+var_24]
.text:0000E7D6                 mov     [ebp+var_2C], edx
.text:0000E7D9                 jmp     short loc_E7E2
.text:0000E7DB ; ---------------------------------------------------------------------------
.text:0000E7DB
.text:0000E7DB loc_E7DB:                               ; CODE XREF: CRecordVector<NArchive::N7z::CFilterMode2>::ReserveOnePosition(void)+9Dj
.text:0000E7DB                 mov     [ebp+var_2C], 0
.text:0000E7E2
.text:0000E7E2 loc_E7E2:                               ; CODE XREF: CRecordVector<NArchive::N7z::CFilterMode2>::ReserveOnePosition(void)+B9j
.text:0000E7E2                 mov     eax, [ebp+var_2C]
.text:0000E7E5                 mov     [ebp+var_20], eax
.text:0000E7E8                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000E7EF                 mov     ecx, [ebp+var_20]
.text:0000E7F2                 mov     [ebp+Dst], ecx
.text:0000E7F5                 mov     edx, [ebp+var_10]
.text:0000E7F8                 cmp     dword ptr [edx+4], 0
.text:0000E7FC                 jz      short loc_E81A
.text:0000E7FE                 mov     eax, [ebp+var_10]
.text:0000E801                 mov     ecx, [eax+4]
.text:0000E804                 shl     ecx, 4
.text:0000E807                 push    ecx             ; Size
.text:0000E808                 mov     edx, [ebp+var_10]
.text:0000E80B                 mov     eax, [edx]
.text:0000E80D                 push    eax             ; Src
.text:0000E80E                 mov     ecx, [ebp+Dst]
.text:0000E811                 push    ecx             ; Dst
.text:0000E812                 call    _memcpy
.text:0000E817                 add     esp, 0Ch
.text:0000E81A
.text:0000E81A loc_E81A:                               ; CODE XREF: CRecordVector<NArchive::N7z::CFilterMode2>::ReserveOnePosition(void)+DCj
.text:0000E81A                 mov     edx, [ebp+var_10]
.text:0000E81D                 mov     eax, [edx]
.text:0000E81F                 mov     [ebp+var_28], eax
.text:0000E822                 mov     ecx, [ebp+var_28]
.text:0000E825                 push    ecx             ; void *
.text:0000E826                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000E82B                 add     esp, 4
.text:0000E82E                 mov     edx, [ebp+var_10]
.text:0000E831                 mov     eax, [ebp+Dst]
.text:0000E834                 mov     [edx], eax
.text:0000E836                 mov     ecx, [ebp+var_10]
.text:0000E839                 mov     edx, [ebp+var_14]
.text:0000E83C                 mov     [ecx+8], edx
.text:0000E83F
.text:0000E83F loc_E83F:                               ; CODE XREF: CRecordVector<NArchive::N7z::CFilterMode2>::ReserveOnePosition(void)+51j
.text:0000E83F                 mov     ecx, [ebp+var_C]
.text:0000E842                 mov     large fs:0, ecx
.text:0000E849                 pop     ecx
.text:0000E84A                 add     esp, 2Ch
.text:0000E84D                 cmp     ebp, esp
.text:0000E84F                 call    __RTC_CheckEsp
.text:0000E854                 mov     esp, ebp
.text:0000E856                 pop     ebp
.text:0000E857                 retn
.text:0000E857 ?ReserveOnePosition@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@AAEXXZ endp
.text:0000E857
.text:0000E857 _text           ends
.text:0000E857
.text$x:0000E858 ; ===========================================================================
.text$x:0000E858
.text$x:0000E858 ; Segment type: Pure code
.text$x:0000E858 ; Segment permissions: Read/Execute
.text$x:0000E858 _text$x         segment para public 'CODE' use32
.text$x:0000E858                 assume cs:_text$x
.text$x:0000E858                 ;org 0E858h
.text$x:0000E858 ; COMDAT (pick associative to section at E720)
.text$x:0000E858                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000E858
.text$x:0000E858 ; =============== S U B R O U T I N E =======================================
.text$x:0000E858
.text$x:0000E858
.text$x:0000E858 __unwindfunclet$?ReserveOnePosition@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@AAEXXZ$0 proc near
.text$x:0000E858                                         ; DATA XREF: .xdata$x:0000E884o
.text$x:0000E858                 mov     eax, [ebp-24h]
.text$x:0000E85B                 push    eax             ; void *
.text$x:0000E85C                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000E861                 pop     ecx
.text$x:0000E862                 retn
.text$x:0000E862 __unwindfunclet$?ReserveOnePosition@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@AAEXXZ$0 endp
.text$x:0000E862
.text$x:0000E863
.text$x:0000E863 ; =============== S U B R O U T I N E =======================================
.text$x:0000E863
.text$x:0000E863
.text$x:0000E863 __ehhandler$?ReserveOnePosition@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@AAEXXZ proc near
.text$x:0000E863                                         ; DATA XREF: CRecordVector<NArchive::N7z::CFilterMode2>::ReserveOnePosition(void)+5o
.text$x:0000E863
.text$x:0000E863 arg_4           = dword ptr  8
.text$x:0000E863
.text$x:0000E863                 mov     edx, [esp+arg_4]
.text$x:0000E867                 lea     eax, [edx+0Ch]
.text$x:0000E86A                 mov     ecx, [edx-24h]
.text$x:0000E86D                 xor     ecx, eax
.text$x:0000E86F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000E874                 mov     eax, offset __ehfuncinfo$?ReserveOnePosition@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@AAEXXZ
.text$x:0000E879                 jmp     ___CxxFrameHandler3
.text$x:0000E879 __ehhandler$?ReserveOnePosition@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@AAEXXZ endp
.text$x:0000E879
.text$x:0000E879 ; ---------------------------------------------------------------------------
.text$x:0000E87E                 align 10h
.text$x:0000E87E _text$x         ends
.text$x:0000E87E
.xdata$x:0000E880 ; ===========================================================================
.xdata$x:0000E880
.xdata$x:0000E880 ; Segment type: Pure data
.xdata$x:0000E880 ; Segment permissions: Read
.xdata$x:0000E880 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000E880                 assume cs:_xdata$x
.xdata$x:0000E880                 ;org 0E880h
.xdata$x:0000E880 ; COMDAT (pick associative to section at E720)
.xdata$x:0000E880 __unwindtable$?ReserveOnePosition@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@AAEXXZ db 0FFh
.xdata$x:0000E880                                         ; DATA XREF: .xdata$x:0000E890o
.xdata$x:0000E881                 db 0FFh
.xdata$x:0000E882                 db 0FFh
.xdata$x:0000E883                 db 0FFh
.xdata$x:0000E884                 dd offset __unwindfunclet$?ReserveOnePosition@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@AAEXXZ$0
.xdata$x:0000E888 __ehfuncinfo$?ReserveOnePosition@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@AAEXXZ db  22h ; "
.xdata$x:0000E888                                         ; DATA XREF: __ehhandler$?ReserveOnePosition@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@AAEXXZ+11o
.xdata$x:0000E889                 db    5
.xdata$x:0000E88A                 db  93h ; ô
.xdata$x:0000E88B                 db  19h
.xdata$x:0000E88C                 db    1
.xdata$x:0000E88D                 db    0
.xdata$x:0000E88E                 db    0
.xdata$x:0000E88F                 db    0
.xdata$x:0000E890                 dd offset __unwindtable$?ReserveOnePosition@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@AAEXXZ
.xdata$x:0000E894                 db    0
.xdata$x:0000E895                 db    0
.xdata$x:0000E896                 db    0
.xdata$x:0000E897                 db    0
.xdata$x:0000E898                 db    0
.xdata$x:0000E899                 db    0
.xdata$x:0000E89A                 db    0
.xdata$x:0000E89B                 db    0
.xdata$x:0000E89C                 db    0
.xdata$x:0000E89D                 db    0
.xdata$x:0000E89E                 db    0
.xdata$x:0000E89F                 db    0
.xdata$x:0000E8A0                 db    0
.xdata$x:0000E8A1                 db    0
.xdata$x:0000E8A2                 db    0
.xdata$x:0000E8A3                 db    0
.xdata$x:0000E8A4                 db    0
.xdata$x:0000E8A5                 db    0
.xdata$x:0000E8A6                 db    0
.xdata$x:0000E8A7                 db    0
.xdata$x:0000E8A8                 db    1
.xdata$x:0000E8A9                 db    0
.xdata$x:0000E8AA                 db    0
.xdata$x:0000E8AB                 db    0
.xdata$x:0000E8AB _xdata$x        ends
.xdata$x:0000E8AB
.text:0000E8AC ; ===========================================================================
.text:0000E8AC
.text:0000E8AC ; Segment type: Pure code
.text:0000E8AC ; Segment permissions: Read/Execute
.text:0000E8AC _text           segment para public 'CODE' use32
.text:0000E8AC                 assume cs:_text
.text:0000E8AC                 ;org 0E8ACh
.text:0000E8AC ; COMDAT (pick any)
.text:0000E8AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000E8AC
.text:0000E8AC ; =============== S U B R O U T I N E =======================================
.text:0000E8AC
.text:0000E8AC ; Attributes: bp-based frame
.text:0000E8AC
.text:0000E8AC ; public: struct NArchive::N7z::CFilterMode2 & __thiscall CRecordVector<struct NArchive::N7z::CFilterMode2>::Front(void)
.text:0000E8AC                 public ?Front@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAEAAUCFilterMode2@N7z@NArchive@@XZ
.text:0000E8AC ?Front@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAEAAUCFilterMode2@N7z@NArchive@@XZ proc near
.text:0000E8AC                                         ; CODE XREF: CRecordVector<NArchive::N7z::CFilterMode2>::Sort2(void)+32p
.text:0000E8AC
.text:0000E8AC var_4           = dword ptr -4
.text:0000E8AC
.text:0000E8AC                 push    ebp
.text:0000E8AD                 mov     ebp, esp
.text:0000E8AF                 push    ecx
.text:0000E8B0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000E8B7                 mov     [ebp+var_4], ecx
.text:0000E8BA                 mov     eax, [ebp+var_4]
.text:0000E8BD                 mov     eax, [eax]
.text:0000E8BF                 mov     esp, ebp
.text:0000E8C1                 pop     ebp
.text:0000E8C2                 retn
.text:0000E8C2 ?Front@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAEAAUCFilterMode2@N7z@NArchive@@XZ endp
.text:0000E8C2
.text:0000E8C2 ; ---------------------------------------------------------------------------
.text:0000E8C3                 align 4
.text:0000E8C3 _text           ends
.text:0000E8C3
.text:0000E8C4 ; ===========================================================================
.text:0000E8C4
.text:0000E8C4 ; Segment type: Pure code
.text:0000E8C4 ; Segment permissions: Read/Execute
.text:0000E8C4 _text           segment para public 'CODE' use32
.text:0000E8C4                 assume cs:_text
.text:0000E8C4                 ;org 0E8C4h
.text:0000E8C4 ; COMDAT (pick any)
.text:0000E8C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000E8C4
.text:0000E8C4 ; =============== S U B R O U T I N E =======================================
.text:0000E8C4
.text:0000E8C4 ; Attributes: bp-based frame
.text:0000E8C4
.text:0000E8C4 ; public: static void __stdcall CRecordVector<struct NArchive::N7z::CFilterMode2>::SortRefDown2(struct NArchive::N7z::CFilterMode2 *, unsigned int, unsigned int)
.text:0000E8C4                 public ?SortRefDown2@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@SGXPAUCFilterMode2@N7z@NArchive@@II@Z
.text:0000E8C4 ?SortRefDown2@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@SGXPAUCFilterMode2@N7z@NArchive@@II@Z proc near
.text:0000E8C4                                         ; CODE XREF: CRecordVector<NArchive::N7z::CFilterMode2>::Sort2(void)+51p
.text:0000E8C4                                         ; CRecordVector<NArchive::N7z::CFilterMode2>::Sort2(void)+D6p
.text:0000E8C4
.text:0000E8C4 var_1C          = dword ptr -1Ch
.text:0000E8C4 var_18          = dword ptr -18h
.text:0000E8C4 var_14          = dword ptr -14h
.text:0000E8C4 var_10          = dword ptr -10h
.text:0000E8C4 var_C           = dword ptr -0Ch
.text:0000E8C4 var_8           = dword ptr -8
.text:0000E8C4 var_4           = dword ptr -4
.text:0000E8C4 arg_0           = dword ptr  8
.text:0000E8C4 arg_4           = dword ptr  0Ch
.text:0000E8C4 arg_8           = dword ptr  10h
.text:0000E8C4
.text:0000E8C4                 push    ebp
.text:0000E8C5                 mov     ebp, esp
.text:0000E8C7                 sub     esp, 1Ch
.text:0000E8CA                 mov     eax, 0CCCCCCCCh
.text:0000E8CF                 mov     [ebp+var_1C], eax
.text:0000E8D2                 mov     [ebp+var_18], eax
.text:0000E8D5                 mov     [ebp+var_14], eax
.text:0000E8D8                 mov     [ebp+var_10], eax
.text:0000E8DB                 mov     [ebp+var_C], eax
.text:0000E8DE                 mov     [ebp+var_8], eax
.text:0000E8E1                 mov     [ebp+var_4], eax
.text:0000E8E4                 mov     eax, [ebp+arg_4]
.text:0000E8E7                 shl     eax, 4
.text:0000E8EA                 add     eax, [ebp+arg_0]
.text:0000E8ED                 mov     ecx, [eax]
.text:0000E8EF                 mov     [ebp+var_14], ecx
.text:0000E8F2                 mov     edx, [eax+4]
.text:0000E8F5                 mov     [ebp+var_10], edx
.text:0000E8F8                 mov     ecx, [eax+8]
.text:0000E8FB                 mov     [ebp+var_C], ecx
.text:0000E8FE                 mov     edx, [eax+0Ch]
.text:0000E901                 mov     [ebp+var_8], edx
.text:0000E904
.text:0000E904 loc_E904:                               ; CODE XREF: CRecordVector<NArchive::N7z::CFilterMode2>::SortRefDown2(NArchive::N7z::CFilterMode2 *,uint,uint)+C8j
.text:0000E904                 mov     eax, [ebp+arg_4]
.text:0000E907                 shl     eax, 1
.text:0000E909                 mov     [ebp+var_1C], eax
.text:0000E90C                 mov     ecx, [ebp+var_1C]
.text:0000E90F                 cmp     ecx, [ebp+arg_8]
.text:0000E912                 jbe     short loc_E916
.text:0000E914                 jmp     short loc_E991
.text:0000E916 ; ---------------------------------------------------------------------------
.text:0000E916
.text:0000E916 loc_E916:                               ; CODE XREF: CRecordVector<NArchive::N7z::CFilterMode2>::SortRefDown2(NArchive::N7z::CFilterMode2 *,uint,uint)+4Ej
.text:0000E916                 mov     edx, [ebp+var_1C]
.text:0000E919                 cmp     edx, [ebp+arg_8]
.text:0000E91C                 jnb     short loc_E946
.text:0000E91E                 mov     eax, [ebp+var_1C]
.text:0000E921                 shl     eax, 4
.text:0000E924                 add     eax, [ebp+arg_0]
.text:0000E927                 push    eax             ; struct NArchive::N7z::CFilterMode2 *
.text:0000E928                 mov     ecx, [ebp+var_1C]
.text:0000E92B                 add     ecx, 1
.text:0000E92E                 shl     ecx, 4
.text:0000E931                 add     ecx, [ebp+arg_0] ; this
.text:0000E934                 call    ?Compare@CFilterMode2@N7z@NArchive@@QBEHABU123@@Z ; NArchive::N7z::CFilterMode2::Compare(NArchive::N7z::CFilterMode2 const &)
.text:0000E939                 test    eax, eax
.text:0000E93B                 jle     short loc_E946
.text:0000E93D                 mov     ecx, [ebp+var_1C]
.text:0000E940                 add     ecx, 1
.text:0000E943                 mov     [ebp+var_1C], ecx
.text:0000E946
.text:0000E946 loc_E946:                               ; CODE XREF: CRecordVector<NArchive::N7z::CFilterMode2>::SortRefDown2(NArchive::N7z::CFilterMode2 *,uint,uint)+58j
.text:0000E946                                         ; CRecordVector<NArchive::N7z::CFilterMode2>::SortRefDown2(NArchive::N7z::CFilterMode2 *,uint,uint)+77j
.text:0000E946                 mov     edx, [ebp+var_1C]
.text:0000E949                 shl     edx, 4
.text:0000E94C                 add     edx, [ebp+arg_0]
.text:0000E94F                 push    edx             ; struct NArchive::N7z::CFilterMode2 *
.text:0000E950                 lea     ecx, [ebp+var_14] ; this
.text:0000E953                 call    ?Compare@CFilterMode2@N7z@NArchive@@QBEHABU123@@Z ; NArchive::N7z::CFilterMode2::Compare(NArchive::N7z::CFilterMode2 const &)
.text:0000E958                 test    eax, eax
.text:0000E95A                 jl      short loc_E95E
.text:0000E95C                 jmp     short loc_E991
.text:0000E95E ; ---------------------------------------------------------------------------
.text:0000E95E
.text:0000E95E loc_E95E:                               ; CODE XREF: CRecordVector<NArchive::N7z::CFilterMode2>::SortRefDown2(NArchive::N7z::CFilterMode2 *,uint,uint)+96j
.text:0000E95E                 mov     eax, [ebp+var_1C]
.text:0000E961                 shl     eax, 4
.text:0000E964                 add     eax, [ebp+arg_0]
.text:0000E967                 mov     ecx, [ebp+arg_4]
.text:0000E96A                 shl     ecx, 4
.text:0000E96D                 add     ecx, [ebp+arg_0]
.text:0000E970                 mov     edx, [eax]
.text:0000E972                 mov     [ecx], edx
.text:0000E974                 mov     edx, [eax+4]
.text:0000E977                 mov     [ecx+4], edx
.text:0000E97A                 mov     edx, [eax+8]
.text:0000E97D                 mov     [ecx+8], edx
.text:0000E980                 mov     eax, [eax+0Ch]
.text:0000E983                 mov     [ecx+0Ch], eax
.text:0000E986                 mov     ecx, [ebp+var_1C]
.text:0000E989                 mov     [ebp+arg_4], ecx
.text:0000E98C                 jmp     loc_E904
.text:0000E991 ; ---------------------------------------------------------------------------
.text:0000E991
.text:0000E991 loc_E991:                               ; CODE XREF: CRecordVector<NArchive::N7z::CFilterMode2>::SortRefDown2(NArchive::N7z::CFilterMode2 *,uint,uint)+50j
.text:0000E991                                         ; CRecordVector<NArchive::N7z::CFilterMode2>::SortRefDown2(NArchive::N7z::CFilterMode2 *,uint,uint)+98j
.text:0000E991                 mov     edx, [ebp+arg_4]
.text:0000E994                 shl     edx, 4
.text:0000E997                 add     edx, [ebp+arg_0]
.text:0000E99A                 mov     eax, [ebp+var_14]
.text:0000E99D                 mov     [edx], eax
.text:0000E99F                 mov     ecx, [ebp+var_10]
.text:0000E9A2                 mov     [edx+4], ecx
.text:0000E9A5                 mov     eax, [ebp+var_C]
.text:0000E9A8                 mov     [edx+8], eax
.text:0000E9AB                 mov     ecx, [ebp+var_8]
.text:0000E9AE                 mov     [edx+0Ch], ecx
.text:0000E9B1                 push    edx
.text:0000E9B2                 mov     ecx, ebp
.text:0000E9B4                 push    eax
.text:0000E9B5                 lea     edx, $LN10_5
.text:0000E9BB                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000E9C0                 pop     eax
.text:0000E9C1                 pop     edx
.text:0000E9C2                 add     esp, 1Ch
.text:0000E9C5                 cmp     ebp, esp
.text:0000E9C7                 call    __RTC_CheckEsp
.text:0000E9CC                 mov     esp, ebp
.text:0000E9CE                 pop     ebp
.text:0000E9CF                 retn    0Ch
.text:0000E9CF ?SortRefDown2@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@SGXPAUCFilterMode2@N7z@NArchive@@II@Z endp
.text:0000E9CF
.text:0000E9CF ; ---------------------------------------------------------------------------
.text:0000E9D2                 align 4
.text:0000E9D4 $LN10_5         dd 1                    ; DATA XREF: CRecordVector<NArchive::N7z::CFilterMode2>::SortRefDown2(NArchive::N7z::CFilterMode2 *,uint,uint)+F1o
.text:0000E9D8                 dd offset $LN9_3
.text:0000E9DC $LN9_3          dd 0FFFFFFECh, 10h      ; DATA XREF: .text:0000E9D8o
.text:0000E9E4                 dd offset $LN8_2        ; "temp"
.text:0000E9E8 $LN8_2          db 'temp',0             ; DATA XREF: .text:0000E9E4o
.text:0000E9ED                 align 10h
.text:0000E9ED _text           ends
.text:0000E9ED
.text:0000E9F0 ; ===========================================================================
.text:0000E9F0
.text:0000E9F0 ; Segment type: Pure code
.text:0000E9F0 ; Segment permissions: Read/Execute
.text:0000E9F0 _text           segment para public 'CODE' use32
.text:0000E9F0                 assume cs:_text
.text:0000E9F0                 ;org 0E9F0h
.text:0000E9F0 ; COMDAT (pick any)
.text:0000E9F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000E9F0
.text:0000E9F0 ; =============== S U B R O U T I N E =======================================
.text:0000E9F0
.text:0000E9F0 ; Attributes: bp-based frame
.text:0000E9F0
.text:0000E9F0 ; int __thiscall NArchive::N7z::CFilterMode2::Compare(NArchive::N7z::CFilterMode2 *this, const struct NArchive::N7z::CFilterMode2 *)
.text:0000E9F0                 public ?Compare@CFilterMode2@N7z@NArchive@@QBEHABU123@@Z
.text:0000E9F0 ?Compare@CFilterMode2@N7z@NArchive@@QBEHABU123@@Z proc near
.text:0000E9F0                                         ; CODE XREF: CRecordVector<NArchive::N7z::CFilterMode2>::SortRefDown2(NArchive::N7z::CFilterMode2 *,uint,uint)+70p
.text:0000E9F0                                         ; CRecordVector<NArchive::N7z::CFilterMode2>::SortRefDown2(NArchive::N7z::CFilterMode2 *,uint,uint)+8Fp
.text:0000E9F0
.text:0000E9F0 var_4           = dword ptr -4
.text:0000E9F0 arg_0           = dword ptr  8
.text:0000E9F0
.text:0000E9F0                 push    ebp
.text:0000E9F1                 mov     ebp, esp
.text:0000E9F3                 push    ecx
.text:0000E9F4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000E9FB                 mov     [ebp+var_4], ecx
.text:0000E9FE                 mov     eax, [ebp+var_4]
.text:0000EA01                 movzx   ecx, byte ptr [eax+8]
.text:0000EA05                 test    ecx, ecx
.text:0000EA07                 jnz     short loc_EA1B
.text:0000EA09                 mov     edx, [ebp+arg_0]
.text:0000EA0C                 movzx   eax, byte ptr [edx+8]
.text:0000EA10                 test    eax, eax
.text:0000EA12                 jz      short loc_EA19
.text:0000EA14                 or      eax, 0FFFFFFFFh
.text:0000EA17                 jmp     short loc_EA7B
.text:0000EA19 ; ---------------------------------------------------------------------------
.text:0000EA19
.text:0000EA19 loc_EA19:                               ; CODE XREF: NArchive::N7z::CFilterMode2::Compare(NArchive::N7z::CFilterMode2 const &)+22j
.text:0000EA19                 jmp     short loc_EA2D
.text:0000EA1B ; ---------------------------------------------------------------------------
.text:0000EA1B
.text:0000EA1B loc_EA1B:                               ; CODE XREF: NArchive::N7z::CFilterMode2::Compare(NArchive::N7z::CFilterMode2 const &)+17j
.text:0000EA1B                 mov     ecx, [ebp+arg_0]
.text:0000EA1E                 movzx   edx, byte ptr [ecx+8]
.text:0000EA22                 test    edx, edx
.text:0000EA24                 jnz     short loc_EA2D
.text:0000EA26                 mov     eax, 1
.text:0000EA2B                 jmp     short loc_EA7B
.text:0000EA2D ; ---------------------------------------------------------------------------
.text:0000EA2D
.text:0000EA2D loc_EA2D:                               ; CODE XREF: NArchive::N7z::CFilterMode2::Compare(NArchive::N7z::CFilterMode2 const &):loc_EA19j
.text:0000EA2D                                         ; NArchive::N7z::CFilterMode2::Compare(NArchive::N7z::CFilterMode2 const &)+34j
.text:0000EA2D                 mov     eax, [ebp+var_4]
.text:0000EA30                 mov     ecx, [ebp+arg_0]
.text:0000EA33                 mov     edx, [eax]
.text:0000EA35                 cmp     edx, [ecx]
.text:0000EA37                 jnb     short loc_EA3E
.text:0000EA39                 or      eax, 0FFFFFFFFh
.text:0000EA3C                 jmp     short loc_EA7B
.text:0000EA3E ; ---------------------------------------------------------------------------
.text:0000EA3E
.text:0000EA3E loc_EA3E:                               ; CODE XREF: NArchive::N7z::CFilterMode2::Compare(NArchive::N7z::CFilterMode2 const &)+47j
.text:0000EA3E                 mov     eax, [ebp+var_4]
.text:0000EA41                 mov     ecx, [ebp+arg_0]
.text:0000EA44                 mov     edx, [eax]
.text:0000EA46                 cmp     edx, [ecx]
.text:0000EA48                 jbe     short loc_EA51
.text:0000EA4A                 mov     eax, 1
.text:0000EA4F                 jmp     short loc_EA7B
.text:0000EA51 ; ---------------------------------------------------------------------------
.text:0000EA51
.text:0000EA51 loc_EA51:                               ; CODE XREF: NArchive::N7z::CFilterMode2::Compare(NArchive::N7z::CFilterMode2 const &)+58j
.text:0000EA51                 mov     eax, [ebp+var_4]
.text:0000EA54                 mov     ecx, [ebp+arg_0]
.text:0000EA57                 mov     edx, [eax+4]
.text:0000EA5A                 cmp     edx, [ecx+4]
.text:0000EA5D                 jnb     short loc_EA64
.text:0000EA5F                 or      eax, 0FFFFFFFFh
.text:0000EA62                 jmp     short loc_EA7B
.text:0000EA64 ; ---------------------------------------------------------------------------
.text:0000EA64
.text:0000EA64 loc_EA64:                               ; CODE XREF: NArchive::N7z::CFilterMode2::Compare(NArchive::N7z::CFilterMode2 const &)+6Dj
.text:0000EA64                 mov     eax, [ebp+var_4]
.text:0000EA67                 mov     ecx, [ebp+arg_0]
.text:0000EA6A                 mov     edx, [eax+4]
.text:0000EA6D                 cmp     edx, [ecx+4]
.text:0000EA70                 jbe     short loc_EA79
.text:0000EA72                 mov     eax, 1
.text:0000EA77                 jmp     short loc_EA7B
.text:0000EA79 ; ---------------------------------------------------------------------------
.text:0000EA79
.text:0000EA79 loc_EA79:                               ; CODE XREF: NArchive::N7z::CFilterMode2::Compare(NArchive::N7z::CFilterMode2 const &)+80j
.text:0000EA79                 xor     eax, eax
.text:0000EA7B
.text:0000EA7B loc_EA7B:                               ; CODE XREF: NArchive::N7z::CFilterMode2::Compare(NArchive::N7z::CFilterMode2 const &)+27j
.text:0000EA7B                                         ; NArchive::N7z::CFilterMode2::Compare(NArchive::N7z::CFilterMode2 const &)+3Bj ...
.text:0000EA7B                 mov     esp, ebp
.text:0000EA7D                 pop     ebp
.text:0000EA7E                 retn    4
.text:0000EA7E ?Compare@CFilterMode2@N7z@NArchive@@QBEHABU123@@Z endp
.text:0000EA7E
.text:0000EA7E ; ---------------------------------------------------------------------------
.text:0000EA81                 align 4
.text:0000EA81 _text           ends
.text:0000EA81
.text:0000EA84 ; ===========================================================================
.text:0000EA84
.text:0000EA84 ; Segment type: Pure code
.text:0000EA84 ; Segment permissions: Read/Execute
.text:0000EA84 _text           segment para public 'CODE' use32
.text:0000EA84                 assume cs:_text
.text:0000EA84                 ;org 0EA84h
.text:0000EA84 ; COMDAT (pick any)
.text:0000EA84                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000EA84
.text:0000EA84 ; =============== S U B R O U T I N E =======================================
.text:0000EA84
.text:0000EA84 ; Attributes: bp-based frame
.text:0000EA84
.text:0000EA84 ; private: void __thiscall CRecordVector<struct NArchive::N7z::CFolderRepack>::ReserveOnePosition(void)
.text:0000EA84                 public ?ReserveOnePosition@?$CRecordVector@UCFolderRepack@N7z@NArchive@@@@AAEXXZ
.text:0000EA84 ?ReserveOnePosition@?$CRecordVector@UCFolderRepack@N7z@NArchive@@@@AAEXXZ proc near
.text:0000EA84                                         ; CODE XREF: CRecordVector<NArchive::N7z::CFolderRepack>::Add(NArchive::N7z::CFolderRepack)+1Ap
.text:0000EA84
.text:0000EA84 var_14          = dword ptr -14h
.text:0000EA84 var_10          = dword ptr -10h
.text:0000EA84 Dst             = dword ptr -0Ch
.text:0000EA84 var_8           = dword ptr -8
.text:0000EA84 var_4           = dword ptr -4
.text:0000EA84
.text:0000EA84                 push    ebp
.text:0000EA85                 mov     ebp, esp
.text:0000EA87                 sub     esp, 14h
.text:0000EA8A                 mov     eax, 0CCCCCCCCh
.text:0000EA8F                 mov     [ebp+var_14], eax
.text:0000EA92                 mov     [ebp+var_10], eax
.text:0000EA95                 mov     [ebp+Dst], eax
.text:0000EA98                 mov     [ebp+var_8], eax
.text:0000EA9B                 mov     [ebp+var_4], eax
.text:0000EA9E                 mov     [ebp+var_4], ecx
.text:0000EAA1                 mov     eax, [ebp+var_4]
.text:0000EAA4                 mov     ecx, [ebp+var_4]
.text:0000EAA7                 mov     edx, [eax+4]
.text:0000EAAA                 cmp     edx, [ecx+8]
.text:0000EAAD                 jnz     loc_EB38
.text:0000EAB3                 mov     eax, [ebp+var_4]
.text:0000EAB6                 mov     ecx, [eax+8]
.text:0000EAB9                 shr     ecx, 2
.text:0000EABC                 mov     edx, [ebp+var_4]
.text:0000EABF                 mov     eax, [edx+8]
.text:0000EAC2                 lea     ecx, [eax+ecx+1]
.text:0000EAC6                 mov     [ebp+var_8], ecx
.text:0000EAC9                 xor     ecx, ecx
.text:0000EACB                 mov     eax, [ebp+var_8]
.text:0000EACE                 mov     edx, 8
.text:0000EAD3                 mul     edx
.text:0000EAD5                 seto    cl
.text:0000EAD8                 neg     ecx
.text:0000EADA                 or      ecx, eax
.text:0000EADC                 push    ecx             ; unsigned int
.text:0000EADD                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000EAE2                 add     esp, 4
.text:0000EAE5                 mov     [ebp+var_10], eax
.text:0000EAE8                 mov     eax, [ebp+var_10]
.text:0000EAEB                 mov     [ebp+Dst], eax
.text:0000EAEE                 mov     ecx, [ebp+var_4]
.text:0000EAF1                 cmp     dword ptr [ecx+4], 0
.text:0000EAF5                 jz      short loc_EB13
.text:0000EAF7                 mov     edx, [ebp+var_4]
.text:0000EAFA                 mov     eax, [edx+4]
.text:0000EAFD                 shl     eax, 3
.text:0000EB00                 push    eax             ; Size
.text:0000EB01                 mov     ecx, [ebp+var_4]
.text:0000EB04                 mov     edx, [ecx]
.text:0000EB06                 push    edx             ; Src
.text:0000EB07                 mov     eax, [ebp+Dst]
.text:0000EB0A                 push    eax             ; Dst
.text:0000EB0B                 call    _memcpy
.text:0000EB10                 add     esp, 0Ch
.text:0000EB13
.text:0000EB13 loc_EB13:                               ; CODE XREF: CRecordVector<NArchive::N7z::CFolderRepack>::ReserveOnePosition(void)+71j
.text:0000EB13                 mov     ecx, [ebp+var_4]
.text:0000EB16                 mov     edx, [ecx]
.text:0000EB18                 mov     [ebp+var_14], edx
.text:0000EB1B                 mov     eax, [ebp+var_14]
.text:0000EB1E                 push    eax             ; void *
.text:0000EB1F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000EB24                 add     esp, 4
.text:0000EB27                 mov     ecx, [ebp+var_4]
.text:0000EB2A                 mov     edx, [ebp+Dst]
.text:0000EB2D                 mov     [ecx], edx
.text:0000EB2F                 mov     eax, [ebp+var_4]
.text:0000EB32                 mov     ecx, [ebp+var_8]
.text:0000EB35                 mov     [eax+8], ecx
.text:0000EB38
.text:0000EB38 loc_EB38:                               ; CODE XREF: CRecordVector<NArchive::N7z::CFolderRepack>::ReserveOnePosition(void)+29j
.text:0000EB38                 add     esp, 14h
.text:0000EB3B                 cmp     ebp, esp
.text:0000EB3D                 call    __RTC_CheckEsp
.text:0000EB42                 mov     esp, ebp
.text:0000EB44                 pop     ebp
.text:0000EB45                 retn
.text:0000EB45 ?ReserveOnePosition@?$CRecordVector@UCFolderRepack@N7z@NArchive@@@@AAEXXZ endp
.text:0000EB45
.text:0000EB45 ; ---------------------------------------------------------------------------
.text:0000EB46                 align 4
.text:0000EB46 _text           ends
.text:0000EB46
.text:0000EB48 ; ===========================================================================
.text:0000EB48
.text:0000EB48 ; Segment type: Pure code
.text:0000EB48 ; Segment permissions: Read/Execute
.text:0000EB48 _text           segment para public 'CODE' use32
.text:0000EB48                 assume cs:_text
.text:0000EB48                 ;org 0EB48h
.text:0000EB48 ; COMDAT (pick any)
.text:0000EB48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000EB48
.text:0000EB48 ; =============== S U B R O U T I N E =======================================
.text:0000EB48
.text:0000EB48 ; Attributes: bp-based frame
.text:0000EB48
.text:0000EB48 ; public: __thiscall CRecordVector<struct NArchive::N7z::CFolderRepack>::CRecordVector<struct NArchive::N7z::CFolderRepack>(void)
.text:0000EB48                 public ??0?$CRecordVector@UCFolderRepack@N7z@NArchive@@@@QAE@XZ
.text:0000EB48 ??0?$CRecordVector@UCFolderRepack@N7z@NArchive@@@@QAE@XZ proc near
.text:0000EB48                                         ; CODE XREF: NArchive::N7z::CSolidGroup::CSolidGroup(void)+42p
.text:0000EB48
.text:0000EB48 var_4           = dword ptr -4
.text:0000EB48
.text:0000EB48                 push    ebp
.text:0000EB49                 mov     ebp, esp
.text:0000EB4B                 push    ecx
.text:0000EB4C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000EB53                 mov     [ebp+var_4], ecx
.text:0000EB56                 mov     eax, [ebp+var_4]
.text:0000EB59                 mov     dword ptr [eax], 0
.text:0000EB5F                 mov     ecx, [ebp+var_4]
.text:0000EB62                 mov     dword ptr [ecx+4], 0
.text:0000EB69                 mov     edx, [ebp+var_4]
.text:0000EB6C                 mov     dword ptr [edx+8], 0
.text:0000EB73                 mov     eax, [ebp+var_4]
.text:0000EB76                 mov     esp, ebp
.text:0000EB78                 pop     ebp
.text:0000EB79                 retn
.text:0000EB79 ??0?$CRecordVector@UCFolderRepack@N7z@NArchive@@@@QAE@XZ endp
.text:0000EB79
.text:0000EB79 ; ---------------------------------------------------------------------------
.text:0000EB7A                 align 4
.text:0000EB7A _text           ends
.text:0000EB7A
.text:0000EB7C ; ===========================================================================
.text:0000EB7C
.text:0000EB7C ; Segment type: Pure code
.text:0000EB7C ; Segment permissions: Read/Execute
.text:0000EB7C _text           segment para public 'CODE' use32
.text:0000EB7C                 assume cs:_text
.text:0000EB7C                 ;org 0EB7Ch
.text:0000EB7C ; COMDAT (pick any)
.text:0000EB7C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000EB7C
.text:0000EB7C ; =============== S U B R O U T I N E =======================================
.text:0000EB7C
.text:0000EB7C ; Attributes: bp-based frame
.text:0000EB7C
.text:0000EB7C ; public: __thiscall CRecordVector<struct NArchive::N7z::CFolderRepack>::~CRecordVector<struct NArchive::N7z::CFolderRepack>(void)
.text:0000EB7C                 public ??1?$CRecordVector@UCFolderRepack@N7z@NArchive@@@@QAE@XZ
.text:0000EB7C ??1?$CRecordVector@UCFolderRepack@N7z@NArchive@@@@QAE@XZ proc near
.text:0000EB7C                                         ; CODE XREF: NArchive::N7z::CSolidGroup::~CSolidGroup(void)+3Ap
.text:0000EB7C
.text:0000EB7C var_8           = dword ptr -8
.text:0000EB7C var_4           = dword ptr -4
.text:0000EB7C
.text:0000EB7C                 push    ebp
.text:0000EB7D                 mov     ebp, esp
.text:0000EB7F                 sub     esp, 8
.text:0000EB82                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000EB89                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000EB90                 mov     [ebp+var_4], ecx
.text:0000EB93                 mov     eax, [ebp+var_4]
.text:0000EB96                 mov     ecx, [eax]
.text:0000EB98                 mov     [ebp+var_8], ecx
.text:0000EB9B                 mov     edx, [ebp+var_8]
.text:0000EB9E                 push    edx             ; void *
.text:0000EB9F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000EBA4                 add     esp, 4
.text:0000EBA7                 add     esp, 8
.text:0000EBAA                 cmp     ebp, esp
.text:0000EBAC                 call    __RTC_CheckEsp
.text:0000EBB1                 mov     esp, ebp
.text:0000EBB3                 pop     ebp
.text:0000EBB4                 retn
.text:0000EBB4 ??1?$CRecordVector@UCFolderRepack@N7z@NArchive@@@@QAE@XZ endp
.text:0000EBB4
.text:0000EBB4 ; ---------------------------------------------------------------------------
.text:0000EBB5                 align 4
.text:0000EBB5 _text           ends
.text:0000EBB5
.text:0000EBB8 ; ===========================================================================
.text:0000EBB8
.text:0000EBB8 ; Segment type: Pure code
.text:0000EBB8 ; Segment permissions: Read/Execute
.text:0000EBB8 _text           segment para public 'CODE' use32
.text:0000EBB8                 assume cs:_text
.text:0000EBB8                 ;org 0EBB8h
.text:0000EBB8 ; COMDAT (pick any)
.text:0000EBB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000EBB8
.text:0000EBB8 ; =============== S U B R O U T I N E =======================================
.text:0000EBB8
.text:0000EBB8 ; Attributes: bp-based frame
.text:0000EBB8
.text:0000EBB8 ; public: struct IArchiveUpdateCallbackFile * __thiscall CMyComPtr<struct IArchiveUpdateCallbackFile>::operator=(struct IArchiveUpdateCallbackFile *)
.text:0000EBB8                 public ??4?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAUIArchiveUpdateCallbackFile@@PAU1@@Z
.text:0000EBB8 ??4?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAUIArchiveUpdateCallbackFile@@PAU1@@Z proc near
.text:0000EBB8                                         ; CODE XREF: CMyComPtr<IArchiveUpdateCallbackFile>::operator=(CMyComPtr<IArchiveUpdateCallbackFile> const &)+17p
.text:0000EBB8
.text:0000EBB8 var_4           = dword ptr -4
.text:0000EBB8 arg_0           = dword ptr  8
.text:0000EBB8
.text:0000EBB8                 push    ebp
.text:0000EBB9                 mov     ebp, esp
.text:0000EBBB                 push    ecx
.text:0000EBBC                 push    esi
.text:0000EBBD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000EBC4                 mov     [ebp+var_4], ecx
.text:0000EBC7                 cmp     [ebp+arg_0], 0
.text:0000EBCB                 jz      short loc_EBE4
.text:0000EBCD                 mov     eax, [ebp+arg_0]
.text:0000EBD0                 mov     ecx, [eax]
.text:0000EBD2                 mov     esi, esp
.text:0000EBD4                 mov     edx, [ebp+arg_0]
.text:0000EBD7                 push    edx
.text:0000EBD8                 mov     eax, [ecx+4]
.text:0000EBDB                 call    eax
.text:0000EBDD                 cmp     esi, esp
.text:0000EBDF                 call    __RTC_CheckEsp
.text:0000EBE4
.text:0000EBE4 loc_EBE4:                               ; CODE XREF: CMyComPtr<IArchiveUpdateCallbackFile>::operator=(IArchiveUpdateCallbackFile *)+13j
.text:0000EBE4                 mov     ecx, [ebp+var_4]
.text:0000EBE7                 cmp     dword ptr [ecx], 0
.text:0000EBEA                 jz      short loc_EC07
.text:0000EBEC                 mov     edx, [ebp+var_4]
.text:0000EBEF                 mov     eax, [edx]
.text:0000EBF1                 mov     ecx, [ebp+var_4]
.text:0000EBF4                 mov     edx, [ecx]
.text:0000EBF6                 mov     eax, [eax]
.text:0000EBF8                 mov     esi, esp
.text:0000EBFA                 push    edx
.text:0000EBFB                 mov     ecx, [eax+8]
.text:0000EBFE                 call    ecx
.text:0000EC00                 cmp     esi, esp
.text:0000EC02                 call    __RTC_CheckEsp
.text:0000EC07
.text:0000EC07 loc_EC07:                               ; CODE XREF: CMyComPtr<IArchiveUpdateCallbackFile>::operator=(IArchiveUpdateCallbackFile *)+32j
.text:0000EC07                 mov     edx, [ebp+var_4]
.text:0000EC0A                 mov     eax, [ebp+arg_0]
.text:0000EC0D                 mov     [edx], eax
.text:0000EC0F                 mov     eax, [ebp+arg_0]
.text:0000EC12                 pop     esi
.text:0000EC13                 add     esp, 4
.text:0000EC16                 cmp     ebp, esp
.text:0000EC18                 call    __RTC_CheckEsp
.text:0000EC1D                 mov     esp, ebp
.text:0000EC1F                 pop     ebp
.text:0000EC20                 retn    4
.text:0000EC20 ??4?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAUIArchiveUpdateCallbackFile@@PAU1@@Z endp
.text:0000EC20
.text:0000EC20 ; ---------------------------------------------------------------------------
.text:0000EC23                 align 4
.text:0000EC23 _text           ends
.text:0000EC23
.text:0000EC24 ; ===========================================================================
.text:0000EC24
.text:0000EC24 ; Segment type: Pure code
.text:0000EC24 ; Segment permissions: Read/Execute
.text:0000EC24 _text           segment para public 'CODE' use32
.text:0000EC24                 assume cs:_text
.text:0000EC24                 ;org 0EC24h
.text:0000EC24 ; COMDAT (pick any)
.text:0000EC24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000EC24
.text:0000EC24 ; =============== S U B R O U T I N E =======================================
.text:0000EC24
.text:0000EC24 ; Attributes: bp-based frame
.text:0000EC24
.text:0000EC24 ; public: struct IArchiveExtractCallbackMessage * __thiscall CMyComPtr<struct IArchiveExtractCallbackMessage>::operator=(struct IArchiveExtractCallbackMessage *)
.text:0000EC24                 public ??4?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAEPAUIArchiveExtractCallbackMessage@@PAU1@@Z
.text:0000EC24 ??4?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAEPAUIArchiveExtractCallbackMessage@@PAU1@@Z proc near
.text:0000EC24                                         ; CODE XREF: CMyComPtr<IArchiveExtractCallbackMessage>::operator=(CMyComPtr<IArchiveExtractCallbackMessage> const &)+17p
.text:0000EC24
.text:0000EC24 var_4           = dword ptr -4
.text:0000EC24 arg_0           = dword ptr  8
.text:0000EC24
.text:0000EC24                 push    ebp
.text:0000EC25                 mov     ebp, esp
.text:0000EC27                 push    ecx
.text:0000EC28                 push    esi
.text:0000EC29                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000EC30                 mov     [ebp+var_4], ecx
.text:0000EC33                 cmp     [ebp+arg_0], 0
.text:0000EC37                 jz      short loc_EC50
.text:0000EC39                 mov     eax, [ebp+arg_0]
.text:0000EC3C                 mov     ecx, [eax]
.text:0000EC3E                 mov     esi, esp
.text:0000EC40                 mov     edx, [ebp+arg_0]
.text:0000EC43                 push    edx
.text:0000EC44                 mov     eax, [ecx+4]
.text:0000EC47                 call    eax
.text:0000EC49                 cmp     esi, esp
.text:0000EC4B                 call    __RTC_CheckEsp
.text:0000EC50
.text:0000EC50 loc_EC50:                               ; CODE XREF: CMyComPtr<IArchiveExtractCallbackMessage>::operator=(IArchiveExtractCallbackMessage *)+13j
.text:0000EC50                 mov     ecx, [ebp+var_4]
.text:0000EC53                 cmp     dword ptr [ecx], 0
.text:0000EC56                 jz      short loc_EC73
.text:0000EC58                 mov     edx, [ebp+var_4]
.text:0000EC5B                 mov     eax, [edx]
.text:0000EC5D                 mov     ecx, [ebp+var_4]
.text:0000EC60                 mov     edx, [ecx]
.text:0000EC62                 mov     eax, [eax]
.text:0000EC64                 mov     esi, esp
.text:0000EC66                 push    edx
.text:0000EC67                 mov     ecx, [eax+8]
.text:0000EC6A                 call    ecx
.text:0000EC6C                 cmp     esi, esp
.text:0000EC6E                 call    __RTC_CheckEsp
.text:0000EC73
.text:0000EC73 loc_EC73:                               ; CODE XREF: CMyComPtr<IArchiveExtractCallbackMessage>::operator=(IArchiveExtractCallbackMessage *)+32j
.text:0000EC73                 mov     edx, [ebp+var_4]
.text:0000EC76                 mov     eax, [ebp+arg_0]
.text:0000EC79                 mov     [edx], eax
.text:0000EC7B                 mov     eax, [ebp+arg_0]
.text:0000EC7E                 pop     esi
.text:0000EC7F                 add     esp, 4
.text:0000EC82                 cmp     ebp, esp
.text:0000EC84                 call    __RTC_CheckEsp
.text:0000EC89                 mov     esp, ebp
.text:0000EC8B                 pop     ebp
.text:0000EC8C                 retn    4
.text:0000EC8C ??4?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAEPAUIArchiveExtractCallbackMessage@@PAU1@@Z endp
.text:0000EC8C
.text:0000EC8C ; ---------------------------------------------------------------------------
.text:0000EC8F                 align 10h
.text:0000EC8F _text           ends
.text:0000EC8F
.text:0000EC90 ; ===========================================================================
.text:0000EC90
.text:0000EC90 ; Segment type: Pure code
.text:0000EC90 ; Segment permissions: Read/Execute
.text:0000EC90 _text           segment para public 'CODE' use32
.text:0000EC90                 assume cs:_text
.text:0000EC90                 ;org 0EC90h
.text:0000EC90 ; COMDAT (pick any)
.text:0000EC90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000EC90
.text:0000EC90 ; =============== S U B R O U T I N E =======================================
.text:0000EC90
.text:0000EC90 ; Attributes: bp-based frame
.text:0000EC90
.text:0000EC90 ; public: void __thiscall CRecordVector<struct NArchive::N7z::CRefItem>::ClearAndReserve(unsigned int)
.text:0000EC90                 public ?ClearAndReserve@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEXI@Z
.text:0000EC90 ?ClearAndReserve@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEXI@Z proc near
.text:0000EC90                                         ; CODE XREF: CRecordVector<NArchive::N7z::CRefItem>::ClearAndSetSize(uint)+15p
.text:0000EC90
.text:0000EC90 var_24          = dword ptr -24h
.text:0000EC90 var_20          = dword ptr -20h
.text:0000EC90 var_1C          = dword ptr -1Ch
.text:0000EC90 var_18          = dword ptr -18h
.text:0000EC90 var_14          = dword ptr -14h
.text:0000EC90 var_10          = dword ptr -10h
.text:0000EC90 var_C           = dword ptr -0Ch
.text:0000EC90 var_4           = dword ptr -4
.text:0000EC90 arg_0           = dword ptr  8
.text:0000EC90
.text:0000EC90                 push    ebp
.text:0000EC91                 mov     ebp, esp
.text:0000EC93                 push    0FFFFFFFFh
.text:0000EC95                 push    offset __ehhandler$?ClearAndReserve@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEXI@Z
.text:0000EC9A                 mov     eax, large fs:0
.text:0000ECA0                 push    eax
.text:0000ECA1                 sub     esp, 18h
.text:0000ECA4                 mov     eax, 0CCCCCCCCh
.text:0000ECA9                 mov     [ebp+var_24], eax
.text:0000ECAC                 mov     [ebp+var_20], eax
.text:0000ECAF                 mov     [ebp+var_1C], eax
.text:0000ECB2                 mov     [ebp+var_18], eax
.text:0000ECB5                 mov     [ebp+var_14], eax
.text:0000ECB8                 mov     [ebp+var_10], eax
.text:0000ECBB                 mov     eax, dword ptr ds:___security_cookie
.text:0000ECC0                 xor     eax, ebp
.text:0000ECC2                 push    eax
.text:0000ECC3                 lea     eax, [ebp+var_C]
.text:0000ECC6                 mov     large fs:0, eax
.text:0000ECCC                 mov     [ebp+var_10], ecx
.text:0000ECCF                 mov     ecx, [ebp+var_10]
.text:0000ECD2                 call    ?Clear@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEXXZ ; CRecordVector<NArchive::N7z::CRefItem>::Clear(void)
.text:0000ECD7                 mov     eax, [ebp+var_10]
.text:0000ECDA                 mov     ecx, [ebp+arg_0]
.text:0000ECDD                 cmp     ecx, [eax+8]
.text:0000ECE0                 jbe     loc_ED80
.text:0000ECE6                 mov     edx, [ebp+var_10]
.text:0000ECE9                 mov     eax, [edx]
.text:0000ECEB                 mov     [ebp+var_14], eax
.text:0000ECEE                 mov     ecx, [ebp+var_14]
.text:0000ECF1                 push    ecx             ; void *
.text:0000ECF2                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000ECF7                 add     esp, 4
.text:0000ECFA                 mov     edx, [ebp+var_10]
.text:0000ECFD                 mov     dword ptr [edx], 0
.text:0000ED03                 mov     eax, [ebp+var_10]
.text:0000ED06                 mov     dword ptr [eax+8], 0
.text:0000ED0D                 mov     ecx, [ebp+arg_0]
.text:0000ED10                 mov     [ebp+var_18], ecx
.text:0000ED13                 xor     ecx, ecx
.text:0000ED15                 mov     eax, [ebp+var_18]
.text:0000ED18                 mov     edx, 14h
.text:0000ED1D                 mul     edx
.text:0000ED1F                 seto    cl
.text:0000ED22                 neg     ecx
.text:0000ED24                 or      ecx, eax
.text:0000ED26                 push    ecx             ; unsigned int
.text:0000ED27                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000ED2C                 add     esp, 4
.text:0000ED2F                 mov     [ebp+var_20], eax
.text:0000ED32                 mov     [ebp+var_4], 0
.text:0000ED39                 cmp     [ebp+var_20], 0
.text:0000ED3D                 jz      short loc_ED5B
.text:0000ED3F                 push    offset ??0CRefItem@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CRefItem::CRefItem(void)
.text:0000ED44                 mov     eax, [ebp+var_18]
.text:0000ED47                 push    eax
.text:0000ED48                 push    14h
.text:0000ED4A                 mov     ecx, [ebp+var_20]
.text:0000ED4D                 push    ecx
.text:0000ED4E                 call    ??_H@YGXPAXIHP6EPAX0@Z@Z ; `vector constructor iterator'(void *,uint,int,void * (*)(void *))
.text:0000ED53                 mov     edx, [ebp+var_20]
.text:0000ED56                 mov     [ebp+var_24], edx
.text:0000ED59                 jmp     short loc_ED62
.text:0000ED5B ; ---------------------------------------------------------------------------
.text:0000ED5B
.text:0000ED5B loc_ED5B:                               ; CODE XREF: CRecordVector<NArchive::N7z::CRefItem>::ClearAndReserve(uint)+ADj
.text:0000ED5B                 mov     [ebp+var_24], 0
.text:0000ED62
.text:0000ED62 loc_ED62:                               ; CODE XREF: CRecordVector<NArchive::N7z::CRefItem>::ClearAndReserve(uint)+C9j
.text:0000ED62                 mov     eax, [ebp+var_24]
.text:0000ED65                 mov     [ebp+var_1C], eax
.text:0000ED68                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000ED6F                 mov     ecx, [ebp+var_10]
.text:0000ED72                 mov     edx, [ebp+var_1C]
.text:0000ED75                 mov     [ecx], edx
.text:0000ED77                 mov     eax, [ebp+var_10]
.text:0000ED7A                 mov     ecx, [ebp+arg_0]
.text:0000ED7D                 mov     [eax+8], ecx
.text:0000ED80
.text:0000ED80 loc_ED80:                               ; CODE XREF: CRecordVector<NArchive::N7z::CRefItem>::ClearAndReserve(uint)+50j
.text:0000ED80                 mov     ecx, [ebp+var_C]
.text:0000ED83                 mov     large fs:0, ecx
.text:0000ED8A                 pop     ecx
.text:0000ED8B                 add     esp, 24h
.text:0000ED8E                 cmp     ebp, esp
.text:0000ED90                 call    __RTC_CheckEsp
.text:0000ED95                 mov     esp, ebp
.text:0000ED97                 pop     ebp
.text:0000ED98                 retn    4
.text:0000ED98 ?ClearAndReserve@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEXI@Z endp
.text:0000ED98
.text:0000ED98 ; ---------------------------------------------------------------------------
.text:0000ED9B                 align 4
.text:0000ED9B _text           ends
.text:0000ED9B
.text$x:0000ED9C ; ===========================================================================
.text$x:0000ED9C
.text$x:0000ED9C ; Segment type: Pure code
.text$x:0000ED9C ; Segment permissions: Read/Execute
.text$x:0000ED9C _text$x         segment para public 'CODE' use32
.text$x:0000ED9C                 assume cs:_text$x
.text$x:0000ED9C                 ;org 0ED9Ch
.text$x:0000ED9C ; COMDAT (pick associative to section at EC90)
.text$x:0000ED9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000ED9C
.text$x:0000ED9C ; =============== S U B R O U T I N E =======================================
.text$x:0000ED9C
.text$x:0000ED9C
.text$x:0000ED9C __unwindfunclet$?ClearAndReserve@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEXI@Z$0 proc near
.text$x:0000ED9C                                         ; DATA XREF: .xdata$x:0000EDC8o
.text$x:0000ED9C                 mov     eax, [ebp-20h]
.text$x:0000ED9F                 push    eax             ; void *
.text$x:0000EDA0                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000EDA5                 pop     ecx
.text$x:0000EDA6                 retn
.text$x:0000EDA6 __unwindfunclet$?ClearAndReserve@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEXI@Z$0 endp
.text$x:0000EDA6
.text$x:0000EDA7
.text$x:0000EDA7 ; =============== S U B R O U T I N E =======================================
.text$x:0000EDA7
.text$x:0000EDA7
.text$x:0000EDA7 __ehhandler$?ClearAndReserve@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEXI@Z proc near
.text$x:0000EDA7                                         ; DATA XREF: CRecordVector<NArchive::N7z::CRefItem>::ClearAndReserve(uint)+5o
.text$x:0000EDA7
.text$x:0000EDA7 arg_4           = dword ptr  8
.text$x:0000EDA7
.text$x:0000EDA7                 mov     edx, [esp+arg_4]
.text$x:0000EDAB                 lea     eax, [edx+0Ch]
.text$x:0000EDAE                 mov     ecx, [edx-1Ch]
.text$x:0000EDB1                 xor     ecx, eax
.text$x:0000EDB3                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000EDB8                 mov     eax, offset __ehfuncinfo$?ClearAndReserve@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEXI@Z
.text$x:0000EDBD                 jmp     ___CxxFrameHandler3
.text$x:0000EDBD __ehhandler$?ClearAndReserve@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEXI@Z endp
.text$x:0000EDBD
.text$x:0000EDBD ; ---------------------------------------------------------------------------
.text$x:0000EDC2                 align 4
.text$x:0000EDC2 _text$x         ends
.text$x:0000EDC2
.xdata$x:0000EDC4 ; ===========================================================================
.xdata$x:0000EDC4
.xdata$x:0000EDC4 ; Segment type: Pure data
.xdata$x:0000EDC4 ; Segment permissions: Read
.xdata$x:0000EDC4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000EDC4                 assume cs:_xdata$x
.xdata$x:0000EDC4                 ;org 0EDC4h
.xdata$x:0000EDC4 ; COMDAT (pick associative to section at EC90)
.xdata$x:0000EDC4 __unwindtable$?ClearAndReserve@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEXI@Z db 0FFh
.xdata$x:0000EDC4                                         ; DATA XREF: .xdata$x:0000EDD4o
.xdata$x:0000EDC5                 db 0FFh
.xdata$x:0000EDC6                 db 0FFh
.xdata$x:0000EDC7                 db 0FFh
.xdata$x:0000EDC8                 dd offset __unwindfunclet$?ClearAndReserve@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEXI@Z$0
.xdata$x:0000EDCC __ehfuncinfo$?ClearAndReserve@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEXI@Z db  22h ; "
.xdata$x:0000EDCC                                         ; DATA XREF: __ehhandler$?ClearAndReserve@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEXI@Z+11o
.xdata$x:0000EDCD                 db    5
.xdata$x:0000EDCE                 db  93h ; ô
.xdata$x:0000EDCF                 db  19h
.xdata$x:0000EDD0                 db    1
.xdata$x:0000EDD1                 db    0
.xdata$x:0000EDD2                 db    0
.xdata$x:0000EDD3                 db    0
.xdata$x:0000EDD4                 dd offset __unwindtable$?ClearAndReserve@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEXI@Z
.xdata$x:0000EDD8                 db    0
.xdata$x:0000EDD9                 db    0
.xdata$x:0000EDDA                 db    0
.xdata$x:0000EDDB                 db    0
.xdata$x:0000EDDC                 db    0
.xdata$x:0000EDDD                 db    0
.xdata$x:0000EDDE                 db    0
.xdata$x:0000EDDF                 db    0
.xdata$x:0000EDE0                 db    0
.xdata$x:0000EDE1                 db    0
.xdata$x:0000EDE2                 db    0
.xdata$x:0000EDE3                 db    0
.xdata$x:0000EDE4                 db    0
.xdata$x:0000EDE5                 db    0
.xdata$x:0000EDE6                 db    0
.xdata$x:0000EDE7                 db    0
.xdata$x:0000EDE8                 db    0
.xdata$x:0000EDE9                 db    0
.xdata$x:0000EDEA                 db    0
.xdata$x:0000EDEB                 db    0
.xdata$x:0000EDEC                 db    1
.xdata$x:0000EDED                 db    0
.xdata$x:0000EDEE                 db    0
.xdata$x:0000EDEF                 db    0
.xdata$x:0000EDEF _xdata$x        ends
.xdata$x:0000EDEF
.text:0000EDF0 ; ===========================================================================
.text:0000EDF0
.text:0000EDF0 ; Segment type: Pure code
.text:0000EDF0 ; Segment permissions: Read/Execute
.text:0000EDF0 _text           segment para public 'CODE' use32
.text:0000EDF0                 assume cs:_text
.text:0000EDF0                 ;org 0EDF0h
.text:0000EDF0 ; COMDAT (pick any)
.text:0000EDF0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000EDF0
.text:0000EDF0 ; =============== S U B R O U T I N E =======================================
.text:0000EDF0
.text:0000EDF0 ; Attributes: bp-based frame
.text:0000EDF0
.text:0000EDF0 ; _DWORD __thiscall NArchive::N7z::CRefItem::CRefItem(NArchive::N7z::CRefItem *__hidden this)
.text:0000EDF0                 public ??0CRefItem@N7z@NArchive@@QAE@XZ
.text:0000EDF0 ??0CRefItem@N7z@NArchive@@QAE@XZ proc near
.text:0000EDF0                                         ; DATA XREF: CRecordVector<NArchive::N7z::CRefItem>::ClearAndReserve(uint)+AFo
.text:0000EDF0
.text:0000EDF0 var_4           = dword ptr -4
.text:0000EDF0
.text:0000EDF0                 push    ebp
.text:0000EDF1                 mov     ebp, esp
.text:0000EDF3                 push    ecx
.text:0000EDF4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000EDFB                 mov     [ebp+var_4], ecx
.text:0000EDFE                 mov     eax, [ebp+var_4]
.text:0000EE01                 mov     esp, ebp
.text:0000EE03                 pop     ebp
.text:0000EE04                 retn
.text:0000EE04 ??0CRefItem@N7z@NArchive@@QAE@XZ endp
.text:0000EE04
.text:0000EE04 ; ---------------------------------------------------------------------------
.text:0000EE05                 align 4
.text:0000EE05 _text           ends
.text:0000EE05
.text:0000EE08 ; ===========================================================================
.text:0000EE08
.text:0000EE08 ; Segment type: Pure code
.text:0000EE08 ; Segment permissions: Read/Execute
.text:0000EE08 _text           segment para public 'CODE' use32
.text:0000EE08                 assume cs:_text
.text:0000EE08                 ;org 0EE08h
.text:0000EE08 ; COMDAT (pick any)
.text:0000EE08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000EE08
.text:0000EE08 ; =============== S U B R O U T I N E =======================================
.text:0000EE08
.text:0000EE08 ; Attributes: bp-based frame
.text:0000EE08
.text:0000EE08 ; public: struct NArchive::N7z::CRefItem & __thiscall CRecordVector<struct NArchive::N7z::CRefItem>::Front(void)
.text:0000EE08                 public ?Front@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEAAUCRefItem@N7z@NArchive@@XZ
.text:0000EE08 ?Front@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEAAUCRefItem@N7z@NArchive@@XZ proc near
.text:0000EE08                                         ; CODE XREF: CRecordVector<NArchive::N7z::CRefItem>::Sort(int (*)(NArchive::N7z::CRefItem const *,NArchive::N7z::CRefItem const *,void *),void *)+32p
.text:0000EE08
.text:0000EE08 var_4           = dword ptr -4
.text:0000EE08
.text:0000EE08                 push    ebp
.text:0000EE09                 mov     ebp, esp
.text:0000EE0B                 push    ecx
.text:0000EE0C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000EE13                 mov     [ebp+var_4], ecx
.text:0000EE16                 mov     eax, [ebp+var_4]
.text:0000EE19                 mov     eax, [eax]
.text:0000EE1B                 mov     esp, ebp
.text:0000EE1D                 pop     ebp
.text:0000EE1E                 retn
.text:0000EE1E ?Front@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEAAUCRefItem@N7z@NArchive@@XZ endp
.text:0000EE1E
.text:0000EE1E ; ---------------------------------------------------------------------------
.text:0000EE1F                 align 10h
.text:0000EE1F _text           ends
.text:0000EE1F
.text:0000EE20 ; ===========================================================================
.text:0000EE20
.text:0000EE20 ; Segment type: Pure code
.text:0000EE20 ; Segment permissions: Read/Execute
.text:0000EE20 _text           segment para public 'CODE' use32
.text:0000EE20                 assume cs:_text
.text:0000EE20                 ;org 0EE20h
.text:0000EE20 ; COMDAT (pick any)
.text:0000EE20                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000EE20
.text:0000EE20 ; =============== S U B R O U T I N E =======================================
.text:0000EE20
.text:0000EE20 ; Attributes: bp-based frame
.text:0000EE20
.text:0000EE20 ; public: static void __stdcall CRecordVector<struct NArchive::N7z::CRefItem>::SortRefDown(struct NArchive::N7z::CRefItem *, unsigned int, unsigned int, int (__stdcall *)(struct NArchive::N7z::CRefItem const *, struct NArchive::N7z::CRefItem const *, void *), void *)
.text:0000EE20                 public ?SortRefDown@?$CRecordVector@UCRefItem@N7z@NArchive@@@@SGXPAUCRefItem@N7z@NArchive@@IIP6GHPBU234@1PAX@Z2@Z
.text:0000EE20 ?SortRefDown@?$CRecordVector@UCRefItem@N7z@NArchive@@@@SGXPAUCRefItem@N7z@NArchive@@IIP6GHPBU234@1PAX@Z2@Z proc near
.text:0000EE20                                         ; CODE XREF: CRecordVector<NArchive::N7z::CRefItem>::Sort(int (*)(NArchive::N7z::CRefItem const *,NArchive::N7z::CRefItem const *,void *),void *)+59p
.text:0000EE20                                         ; CRecordVector<NArchive::N7z::CRefItem>::Sort(int (*)(NArchive::N7z::CRefItem const *,NArchive::N7z::CRefItem const *,void *),void *)+F8p
.text:0000EE20
.text:0000EE20 var_20          = dword ptr -20h
.text:0000EE20 var_1C          = dword ptr -1Ch
.text:0000EE20 var_18          = dword ptr -18h
.text:0000EE20 var_14          = dword ptr -14h
.text:0000EE20 var_10          = dword ptr -10h
.text:0000EE20 var_C           = dword ptr -0Ch
.text:0000EE20 var_8           = dword ptr -8
.text:0000EE20 var_4           = dword ptr -4
.text:0000EE20 arg_0           = dword ptr  8
.text:0000EE20 arg_4           = dword ptr  0Ch
.text:0000EE20 arg_8           = dword ptr  10h
.text:0000EE20 arg_C           = dword ptr  14h
.text:0000EE20 arg_10          = dword ptr  18h
.text:0000EE20
.text:0000EE20                 push    ebp
.text:0000EE21                 mov     ebp, esp
.text:0000EE23                 sub     esp, 20h
.text:0000EE26                 push    esi
.text:0000EE27                 mov     eax, 0CCCCCCCCh
.text:0000EE2C                 mov     [ebp+var_20], eax
.text:0000EE2F                 mov     [ebp+var_1C], eax
.text:0000EE32                 mov     [ebp+var_18], eax
.text:0000EE35                 mov     [ebp+var_14], eax
.text:0000EE38                 mov     [ebp+var_10], eax
.text:0000EE3B                 mov     [ebp+var_C], eax
.text:0000EE3E                 mov     [ebp+var_8], eax
.text:0000EE41                 mov     [ebp+var_4], eax
.text:0000EE44                 mov     eax, [ebp+arg_4]
.text:0000EE47                 imul    eax, 14h
.text:0000EE4A                 add     eax, [ebp+arg_0]
.text:0000EE4D                 mov     ecx, [eax]
.text:0000EE4F                 mov     [ebp+var_18], ecx
.text:0000EE52                 mov     edx, [eax+4]
.text:0000EE55                 mov     [ebp+var_14], edx
.text:0000EE58                 mov     ecx, [eax+8]
.text:0000EE5B                 mov     [ebp+var_10], ecx
.text:0000EE5E                 mov     edx, [eax+0Ch]
.text:0000EE61                 mov     [ebp+var_C], edx
.text:0000EE64                 mov     eax, [eax+10h]
.text:0000EE67                 mov     [ebp+var_8], eax
.text:0000EE6A
.text:0000EE6A loc_EE6A:                               ; CODE XREF: CRecordVector<NArchive::N7z::CRefItem>::SortRefDown(NArchive::N7z::CRefItem *,uint,uint,int (*)(NArchive::N7z::CRefItem const *,NArchive::N7z::CRefItem const *,void *),void *)+F4j
.text:0000EE6A                 mov     ecx, [ebp+arg_4]
.text:0000EE6D                 shl     ecx, 1
.text:0000EE6F                 mov     [ebp+var_20], ecx
.text:0000EE72                 mov     edx, [ebp+var_20]
.text:0000EE75                 cmp     edx, [ebp+arg_8]
.text:0000EE78                 jbe     short loc_EE7F
.text:0000EE7A                 jmp     loc_EF19
.text:0000EE7F ; ---------------------------------------------------------------------------
.text:0000EE7F
.text:0000EE7F loc_EE7F:                               ; CODE XREF: CRecordVector<NArchive::N7z::CRefItem>::SortRefDown(NArchive::N7z::CRefItem *,uint,uint,int (*)(NArchive::N7z::CRefItem const *,NArchive::N7z::CRefItem const *,void *),void *)+58j
.text:0000EE7F                 mov     eax, [ebp+var_20]
.text:0000EE82                 cmp     eax, [ebp+arg_8]
.text:0000EE85                 jnb     short loc_EEBC
.text:0000EE87                 mov     esi, esp
.text:0000EE89                 mov     ecx, [ebp+arg_10]
.text:0000EE8C                 push    ecx
.text:0000EE8D                 mov     edx, [ebp+var_20]
.text:0000EE90                 imul    edx, 14h
.text:0000EE93                 add     edx, [ebp+arg_0]
.text:0000EE96                 push    edx
.text:0000EE97                 mov     eax, [ebp+var_20]
.text:0000EE9A                 imul    eax, 14h
.text:0000EE9D                 mov     ecx, [ebp+arg_0]
.text:0000EEA0                 lea     edx, [ecx+eax+14h]
.text:0000EEA4                 push    edx
.text:0000EEA5                 call    [ebp+arg_C]
.text:0000EEA8                 cmp     esi, esp
.text:0000EEAA                 call    __RTC_CheckEsp
.text:0000EEAF                 test    eax, eax
.text:0000EEB1                 jle     short loc_EEBC
.text:0000EEB3                 mov     eax, [ebp+var_20]
.text:0000EEB6                 add     eax, 1
.text:0000EEB9                 mov     [ebp+var_20], eax
.text:0000EEBC
.text:0000EEBC loc_EEBC:                               ; CODE XREF: CRecordVector<NArchive::N7z::CRefItem>::SortRefDown(NArchive::N7z::CRefItem *,uint,uint,int (*)(NArchive::N7z::CRefItem const *,NArchive::N7z::CRefItem const *,void *),void *)+65j
.text:0000EEBC                                         ; CRecordVector<NArchive::N7z::CRefItem>::SortRefDown(NArchive::N7z::CRefItem *,uint,uint,int (*)(NArchive::N7z::CRefItem const *,NArchive::N7z::CRefItem const *,void *),void *)+91j
.text:0000EEBC                 mov     esi, esp
.text:0000EEBE                 mov     ecx, [ebp+arg_10]
.text:0000EEC1                 push    ecx
.text:0000EEC2                 mov     edx, [ebp+var_20]
.text:0000EEC5                 imul    edx, 14h
.text:0000EEC8                 add     edx, [ebp+arg_0]
.text:0000EECB                 push    edx
.text:0000EECC                 lea     eax, [ebp+var_18]
.text:0000EECF                 push    eax
.text:0000EED0                 call    [ebp+arg_C]
.text:0000EED3                 cmp     esi, esp
.text:0000EED5                 call    __RTC_CheckEsp
.text:0000EEDA                 test    eax, eax
.text:0000EEDC                 jl      short loc_EEE0
.text:0000EEDE                 jmp     short loc_EF19
.text:0000EEE0 ; ---------------------------------------------------------------------------
.text:0000EEE0
.text:0000EEE0 loc_EEE0:                               ; CODE XREF: CRecordVector<NArchive::N7z::CRefItem>::SortRefDown(NArchive::N7z::CRefItem *,uint,uint,int (*)(NArchive::N7z::CRefItem const *,NArchive::N7z::CRefItem const *,void *),void *)+BCj
.text:0000EEE0                 mov     ecx, [ebp+var_20]
.text:0000EEE3                 imul    ecx, 14h
.text:0000EEE6                 add     ecx, [ebp+arg_0]
.text:0000EEE9                 mov     edx, [ebp+arg_4]
.text:0000EEEC                 imul    edx, 14h
.text:0000EEEF                 add     edx, [ebp+arg_0]
.text:0000EEF2                 mov     eax, [ecx]
.text:0000EEF4                 mov     [edx], eax
.text:0000EEF6                 mov     eax, [ecx+4]
.text:0000EEF9                 mov     [edx+4], eax
.text:0000EEFC                 mov     eax, [ecx+8]
.text:0000EEFF                 mov     [edx+8], eax
.text:0000EF02                 mov     eax, [ecx+0Ch]
.text:0000EF05                 mov     [edx+0Ch], eax
.text:0000EF08                 mov     ecx, [ecx+10h]
.text:0000EF0B                 mov     [edx+10h], ecx
.text:0000EF0E                 mov     edx, [ebp+var_20]
.text:0000EF11                 mov     [ebp+arg_4], edx
.text:0000EF14                 jmp     loc_EE6A
.text:0000EF19 ; ---------------------------------------------------------------------------
.text:0000EF19
.text:0000EF19 loc_EF19:                               ; CODE XREF: CRecordVector<NArchive::N7z::CRefItem>::SortRefDown(NArchive::N7z::CRefItem *,uint,uint,int (*)(NArchive::N7z::CRefItem const *,NArchive::N7z::CRefItem const *,void *),void *)+5Aj
.text:0000EF19                                         ; CRecordVector<NArchive::N7z::CRefItem>::SortRefDown(NArchive::N7z::CRefItem *,uint,uint,int (*)(NArchive::N7z::CRefItem const *,NArchive::N7z::CRefItem const *,void *),void *)+BEj
.text:0000EF19                 mov     eax, [ebp+arg_4]
.text:0000EF1C                 imul    eax, 14h
.text:0000EF1F                 add     eax, [ebp+arg_0]
.text:0000EF22                 mov     ecx, [ebp+var_18]
.text:0000EF25                 mov     [eax], ecx
.text:0000EF27                 mov     edx, [ebp+var_14]
.text:0000EF2A                 mov     [eax+4], edx
.text:0000EF2D                 mov     ecx, [ebp+var_10]
.text:0000EF30                 mov     [eax+8], ecx
.text:0000EF33                 mov     edx, [ebp+var_C]
.text:0000EF36                 mov     [eax+0Ch], edx
.text:0000EF39                 mov     ecx, [ebp+var_8]
.text:0000EF3C                 mov     [eax+10h], ecx
.text:0000EF3F                 push    edx
.text:0000EF40                 mov     ecx, ebp
.text:0000EF42                 push    eax
.text:0000EF43                 lea     edx, $LN10_6
.text:0000EF49                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000EF4E                 pop     eax
.text:0000EF4F                 pop     edx
.text:0000EF50                 pop     esi
.text:0000EF51                 add     esp, 20h
.text:0000EF54                 cmp     ebp, esp
.text:0000EF56                 call    __RTC_CheckEsp
.text:0000EF5B                 mov     esp, ebp
.text:0000EF5D                 pop     ebp
.text:0000EF5E                 retn    14h
.text:0000EF5E ?SortRefDown@?$CRecordVector@UCRefItem@N7z@NArchive@@@@SGXPAUCRefItem@N7z@NArchive@@IIP6GHPBU234@1PAX@Z2@Z endp
.text:0000EF5E
.text:0000EF5E ; ---------------------------------------------------------------------------
.text:0000EF61                 align 4
.text:0000EF64 $LN10_6         dd 1                    ; DATA XREF: CRecordVector<NArchive::N7z::CRefItem>::SortRefDown(NArchive::N7z::CRefItem *,uint,uint,int (*)(NArchive::N7z::CRefItem const *,NArchive::N7z::CRefItem const *,void *),void *)+123o
.text:0000EF68                 dd offset $LN9_4
.text:0000EF6C $LN9_4          dd 0FFFFFFE8h, 14h      ; DATA XREF: .text:0000EF68o
.text:0000EF74                 dd offset $LN8_3        ; "temp"
.text:0000EF78 $LN8_3          db 'temp',0             ; DATA XREF: .text:0000EF74o
.text:0000EF7D                 align 10h
.text:0000EF7D _text           ends
.text:0000EF7D
.text:0000EF80 ; ===========================================================================
.text:0000EF80
.text:0000EF80 ; Segment type: Pure code
.text:0000EF80 ; Segment permissions: Read/Execute
.text:0000EF80 _text           segment para public 'CODE' use32
.text:0000EF80                 assume cs:_text
.text:0000EF80                 ;org 0EF80h
.text:0000EF80 ; COMDAT (pick any)
.text:0000EF80                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000EF80
.text:0000EF80 ; =============== S U B R O U T I N E =======================================
.text:0000EF80
.text:0000EF80 ; Attributes: bp-based frame
.text:0000EF80
.text:0000EF80 ; _DWORD __thiscall CProp::CProp(CProp *this, const struct CProp *)
.text:0000EF80                 public ??0CProp@@QAE@ABU0@@Z
.text:0000EF80 ??0CProp@@QAE@ABU0@@Z proc near         ; CODE XREF: CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+A6p
.text:0000EF80
.text:0000EF80 var_4           = dword ptr -4
.text:0000EF80 arg_0           = dword ptr  8
.text:0000EF80
.text:0000EF80                 push    ebp
.text:0000EF81                 mov     ebp, esp
.text:0000EF83                 push    ecx
.text:0000EF84                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000EF8B                 mov     [ebp+var_4], ecx
.text:0000EF8E                 mov     eax, [ebp+var_4]
.text:0000EF91                 mov     ecx, [ebp+arg_0]
.text:0000EF94                 mov     edx, [ecx]
.text:0000EF96                 mov     [eax], edx
.text:0000EF98                 mov     eax, [ebp+var_4]
.text:0000EF9B                 mov     ecx, [ebp+arg_0]
.text:0000EF9E                 mov     dl, [ecx+4]
.text:0000EFA1                 mov     [eax+4], dl
.text:0000EFA4                 mov     eax, [ebp+arg_0]
.text:0000EFA7                 add     eax, 8
.text:0000EFAA                 push    eax             ; struct NWindows::NCOM::CPropVariant *
.text:0000EFAB                 mov     ecx, [ebp+var_4]
.text:0000EFAE                 add     ecx, 8          ; this
.text:0000EFB1                 call    ??0CPropVariant@NCOM@NWindows@@QAE@ABV012@@Z ; NWindows::NCOM::CPropVariant::CPropVariant(NWindows::NCOM::CPropVariant const &)
.text:0000EFB6                 mov     eax, [ebp+var_4]
.text:0000EFB9                 add     esp, 4
.text:0000EFBC                 cmp     ebp, esp
.text:0000EFBE                 call    __RTC_CheckEsp
.text:0000EFC3                 mov     esp, ebp
.text:0000EFC5                 pop     ebp
.text:0000EFC6                 retn    4
.text:0000EFC6 ??0CProp@@QAE@ABU0@@Z endp
.text:0000EFC6
.text:0000EFC6 ; ---------------------------------------------------------------------------
.text:0000EFC9                 align 4
.text:0000EFC9 _text           ends
.text:0000EFC9
.text:0000EFCC ; ===========================================================================
.text:0000EFCC
.text:0000EFCC ; Segment type: Pure code
.text:0000EFCC ; Segment permissions: Read/Execute
.text:0000EFCC _text           segment para public 'CODE' use32
.text:0000EFCC                 assume cs:_text
.text:0000EFCC                 ;org 0EFCCh
.text:0000EFCC ; COMDAT (pick any)
.text:0000EFCC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000EFCC
.text:0000EFCC ; =============== S U B R O U T I N E =======================================
.text:0000EFCC
.text:0000EFCC ; Attributes: bp-based frame
.text:0000EFCC
.text:0000EFCC ; private: void __thiscall CRecordVector<void *>::MoveItems(unsigned int, unsigned int)
.text:0000EFCC                 public ?MoveItems@?$CRecordVector@PAX@@AAEXII@Z
.text:0000EFCC ?MoveItems@?$CRecordVector@PAX@@AAEXII@Z proc near
.text:0000EFCC                                         ; CODE XREF: CRecordVector<void *>::Insert(uint,void * const)+24p
.text:0000EFCC
.text:0000EFCC var_4           = dword ptr -4
.text:0000EFCC arg_0           = dword ptr  8
.text:0000EFCC arg_4           = dword ptr  0Ch
.text:0000EFCC
.text:0000EFCC                 push    ebp
.text:0000EFCD                 mov     ebp, esp
.text:0000EFCF                 push    ecx
.text:0000EFD0                 push    esi
.text:0000EFD1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000EFD8                 mov     [ebp+var_4], ecx
.text:0000EFDB                 mov     eax, [ebp+var_4]
.text:0000EFDE                 mov     ecx, [eax+4]
.text:0000EFE1                 sub     ecx, [ebp+arg_4]
.text:0000EFE4                 shl     ecx, 2
.text:0000EFE7                 mov     esi, esp
.text:0000EFE9                 push    ecx             ; Size
.text:0000EFEA                 mov     edx, [ebp+var_4]
.text:0000EFED                 mov     eax, [edx]
.text:0000EFEF                 mov     ecx, [ebp+arg_4]
.text:0000EFF2                 lea     edx, [eax+ecx*4]
.text:0000EFF5                 push    edx             ; Src
.text:0000EFF6                 mov     eax, [ebp+var_4]
.text:0000EFF9                 mov     ecx, [eax]
.text:0000EFFB                 mov     edx, [ebp+arg_0]
.text:0000EFFE                 lea     eax, [ecx+edx*4]
.text:0000F001                 push    eax             ; Dst
.text:0000F002                 call    dword ptr ds:__imp__memmove
.text:0000F008                 add     esp, 0Ch
.text:0000F00B                 cmp     esi, esp
.text:0000F00D                 call    __RTC_CheckEsp
.text:0000F012                 pop     esi
.text:0000F013                 add     esp, 4
.text:0000F016                 cmp     ebp, esp
.text:0000F018                 call    __RTC_CheckEsp
.text:0000F01D                 mov     esp, ebp
.text:0000F01F                 pop     ebp
.text:0000F020                 retn    8
.text:0000F020 ?MoveItems@?$CRecordVector@PAX@@AAEXII@Z endp
.text:0000F020
.text:0000F020 ; ---------------------------------------------------------------------------
.text:0000F023                 align 4
.text:0000F023 _text           ends
.text:0000F023
.text:0000F024 ; ===========================================================================
.text:0000F024
.text:0000F024 ; Segment type: Pure code
.text:0000F024 ; Segment permissions: Read/Execute
.text:0000F024 _text           segment para public 'CODE' use32
.text:0000F024                 assume cs:_text
.text:0000F024                 ;org 0F024h
.text:0000F024 ; COMDAT (pick any)
.text:0000F024                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000F024
.text:0000F024 ; =============== S U B R O U T I N E =======================================
.text:0000F024
.text:0000F024 ; Attributes: bp-based frame
.text:0000F024
.text:0000F024 ; private: void __thiscall CRecordVector<void *>::ReserveOnePosition(void)
.text:0000F024                 public ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ
.text:0000F024 ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ proc near
.text:0000F024                                         ; CODE XREF: CRecordVector<void *>::Add(void * const)+1Ap
.text:0000F024                                         ; CRecordVector<void *>::Insert(uint,void * const)+11p
.text:0000F024
.text:0000F024 var_14          = dword ptr -14h
.text:0000F024 var_10          = dword ptr -10h
.text:0000F024 Dst             = dword ptr -0Ch
.text:0000F024 var_8           = dword ptr -8
.text:0000F024 var_4           = dword ptr -4
.text:0000F024
.text:0000F024                 push    ebp
.text:0000F025                 mov     ebp, esp
.text:0000F027                 sub     esp, 14h
.text:0000F02A                 mov     eax, 0CCCCCCCCh
.text:0000F02F                 mov     [ebp+var_14], eax
.text:0000F032                 mov     [ebp+var_10], eax
.text:0000F035                 mov     [ebp+Dst], eax
.text:0000F038                 mov     [ebp+var_8], eax
.text:0000F03B                 mov     [ebp+var_4], eax
.text:0000F03E                 mov     [ebp+var_4], ecx
.text:0000F041                 mov     eax, [ebp+var_4]
.text:0000F044                 mov     ecx, [ebp+var_4]
.text:0000F047                 mov     edx, [eax+4]
.text:0000F04A                 cmp     edx, [ecx+8]
.text:0000F04D                 jnz     loc_F0D8
.text:0000F053                 mov     eax, [ebp+var_4]
.text:0000F056                 mov     ecx, [eax+8]
.text:0000F059                 shr     ecx, 2
.text:0000F05C                 mov     edx, [ebp+var_4]
.text:0000F05F                 mov     eax, [edx+8]
.text:0000F062                 lea     ecx, [eax+ecx+1]
.text:0000F066                 mov     [ebp+var_8], ecx
.text:0000F069                 xor     ecx, ecx
.text:0000F06B                 mov     eax, [ebp+var_8]
.text:0000F06E                 mov     edx, 4
.text:0000F073                 mul     edx
.text:0000F075                 seto    cl
.text:0000F078                 neg     ecx
.text:0000F07A                 or      ecx, eax
.text:0000F07C                 push    ecx             ; unsigned int
.text:0000F07D                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000F082                 add     esp, 4
.text:0000F085                 mov     [ebp+var_10], eax
.text:0000F088                 mov     eax, [ebp+var_10]
.text:0000F08B                 mov     [ebp+Dst], eax
.text:0000F08E                 mov     ecx, [ebp+var_4]
.text:0000F091                 cmp     dword ptr [ecx+4], 0
.text:0000F095                 jz      short loc_F0B3
.text:0000F097                 mov     edx, [ebp+var_4]
.text:0000F09A                 mov     eax, [edx+4]
.text:0000F09D                 shl     eax, 2
.text:0000F0A0                 push    eax             ; Size
.text:0000F0A1                 mov     ecx, [ebp+var_4]
.text:0000F0A4                 mov     edx, [ecx]
.text:0000F0A6                 push    edx             ; Src
.text:0000F0A7                 mov     eax, [ebp+Dst]
.text:0000F0AA                 push    eax             ; Dst
.text:0000F0AB                 call    _memcpy
.text:0000F0B0                 add     esp, 0Ch
.text:0000F0B3
.text:0000F0B3 loc_F0B3:                               ; CODE XREF: CRecordVector<void *>::ReserveOnePosition(void)+71j
.text:0000F0B3                 mov     ecx, [ebp+var_4]
.text:0000F0B6                 mov     edx, [ecx]
.text:0000F0B8                 mov     [ebp+var_14], edx
.text:0000F0BB                 mov     eax, [ebp+var_14]
.text:0000F0BE                 push    eax             ; void *
.text:0000F0BF                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000F0C4                 add     esp, 4
.text:0000F0C7                 mov     ecx, [ebp+var_4]
.text:0000F0CA                 mov     edx, [ebp+Dst]
.text:0000F0CD                 mov     [ecx], edx
.text:0000F0CF                 mov     eax, [ebp+var_4]
.text:0000F0D2                 mov     ecx, [ebp+var_8]
.text:0000F0D5                 mov     [eax+8], ecx
.text:0000F0D8
.text:0000F0D8 loc_F0D8:                               ; CODE XREF: CRecordVector<void *>::ReserveOnePosition(void)+29j
.text:0000F0D8                 add     esp, 14h
.text:0000F0DB                 cmp     ebp, esp
.text:0000F0DD                 call    __RTC_CheckEsp
.text:0000F0E2                 mov     esp, ebp
.text:0000F0E4                 pop     ebp
.text:0000F0E5                 retn
.text:0000F0E5 ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ endp
.text:0000F0E5
.text:0000F0E5 ; ---------------------------------------------------------------------------
.text:0000F0E6                 align 4
.text:0000F0E6 _text           ends
.text:0000F0E6
.text:0000F0E8 ; ===========================================================================
.text:0000F0E8
.text:0000F0E8 ; Segment type: Pure code
.text:0000F0E8 ; Segment permissions: Read/Execute
.text:0000F0E8 _text           segment para public 'CODE' use32
.text:0000F0E8                 assume cs:_text
.text:0000F0E8                 ;org 0F0E8h
.text:0000F0E8 ; COMDAT (pick any)
.text:0000F0E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000F0E8
.text:0000F0E8 ; =============== S U B R O U T I N E =======================================
.text:0000F0E8
.text:0000F0E8 ; Attributes: bp-based frame
.text:0000F0E8
.text:0000F0E8 ; public: void __thiscall CRecordVector<struct NArchive::N7z::CRefItem>::Clear(void)
.text:0000F0E8                 public ?Clear@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEXXZ
.text:0000F0E8 ?Clear@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEXXZ proc near
.text:0000F0E8                                         ; CODE XREF: CRecordVector<NArchive::N7z::CRefItem>::ClearAndReserve(uint)+42p
.text:0000F0E8
.text:0000F0E8 var_4           = dword ptr -4
.text:0000F0E8
.text:0000F0E8                 push    ebp
.text:0000F0E9                 mov     ebp, esp
.text:0000F0EB                 push    ecx
.text:0000F0EC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000F0F3                 mov     [ebp+var_4], ecx
.text:0000F0F6                 mov     eax, [ebp+var_4]
.text:0000F0F9                 mov     dword ptr [eax+4], 0
.text:0000F100                 mov     esp, ebp
.text:0000F102                 pop     ebp
.text:0000F103                 retn
.text:0000F103 ?Clear@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEXXZ endp
.text:0000F103
.text:0000F103 _text           ends
.text:0000F103
.text:0000F104 ; ===========================================================================
.text:0000F104
.text:0000F104 ; Segment type: Pure code
.text:0000F104 ; Segment permissions: Read/Execute
.text:0000F104 _text           segment para public 'CODE' use32
.text:0000F104                 assume cs:_text
.text:0000F104                 ;org 0F104h
.text:0000F104 ; COMDAT (pick any)
.text:0000F104                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000F104
.text:0000F104 ; =============== S U B R O U T I N E =======================================
.text:0000F104
.text:0000F104 ; Attributes: bp-based frame
.text:0000F104
.text:0000F104 ; int __stdcall MyCompare<unsigned int>(unsigned int, unsigned int)
.text:0000F104                 public ??$MyCompare@I@@YGHII@Z
.text:0000F104 ??$MyCompare@I@@YGHII@Z proc near       ; CODE XREF: NArchive::N7z::CompareUpdateItems(NArchive::N7z::CRefItem const *,NArchive::N7z::CRefItem const *,void *)+DFp
.text:0000F104
.text:0000F104 var_4           = dword ptr -4
.text:0000F104 arg_0           = dword ptr  8
.text:0000F104 arg_4           = dword ptr  0Ch
.text:0000F104
.text:0000F104                 push    ebp
.text:0000F105                 mov     ebp, esp
.text:0000F107                 push    ecx
.text:0000F108                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000F10F                 mov     eax, [ebp+arg_0]
.text:0000F112                 cmp     eax, [ebp+arg_4]
.text:0000F115                 jnb     short loc_F120
.text:0000F117                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000F11E                 jmp     short loc_F12E
.text:0000F120 ; ---------------------------------------------------------------------------
.text:0000F120
.text:0000F120 loc_F120:                               ; CODE XREF: MyCompare<uint>(uint,uint)+11j
.text:0000F120                 mov     ecx, [ebp+arg_0]
.text:0000F123                 xor     edx, edx
.text:0000F125                 cmp     ecx, [ebp+arg_4]
.text:0000F128                 setnz   dl
.text:0000F12B                 mov     [ebp+var_4], edx
.text:0000F12E
.text:0000F12E loc_F12E:                               ; CODE XREF: MyCompare<uint>(uint,uint)+1Aj
.text:0000F12E                 mov     eax, [ebp+var_4]
.text:0000F131                 mov     esp, ebp
.text:0000F133                 pop     ebp
.text:0000F134                 retn    8
.text:0000F134 ??$MyCompare@I@@YGHII@Z endp
.text:0000F134
.text:0000F134 ; ---------------------------------------------------------------------------
.text:0000F137                 align 4
.text:0000F137 _text           ends
.text:0000F137
.text:0000F138 ; ===========================================================================
.text:0000F138
.text:0000F138 ; Segment type: Pure code
.text:0000F138 ; Segment permissions: Read/Execute
.text:0000F138 _text           segment para public 'CODE' use32
.text:0000F138                 assume cs:_text
.text:0000F138                 ;org 0F138h
.text:0000F138 ; COMDAT (pick any)
.text:0000F138                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000F138
.text:0000F138 ; =============== S U B R O U T I N E =======================================
.text:0000F138
.text:0000F138 ; Attributes: bp-based frame
.text:0000F138
.text:0000F138 ; int __stdcall MyCompare<unsigned __int64>(unsigned __int64, unsigned __int64)
.text:0000F138                 public ??$MyCompare@_K@@YGH_K0@Z
.text:0000F138 ??$MyCompare@_K@@YGH_K0@Z proc near     ; CODE XREF: NArchive::N7z::CompareUpdateItems(NArchive::N7z::CRefItem const *,NArchive::N7z::CRefItem const *,void *)+1D7p
.text:0000F138                                         ; NArchive::N7z::CompareUpdateItems(NArchive::N7z::CRefItem const *,NArchive::N7z::CRefItem const *,void *)+203p
.text:0000F138
.text:0000F138 var_8           = dword ptr -8
.text:0000F138 var_4           = dword ptr -4
.text:0000F138 arg_0           = dword ptr  8
.text:0000F138 arg_4           = dword ptr  0Ch
.text:0000F138 arg_8           = dword ptr  10h
.text:0000F138 arg_C           = dword ptr  14h
.text:0000F138
.text:0000F138                 push    ebp
.text:0000F139                 mov     ebp, esp
.text:0000F13B                 sub     esp, 8
.text:0000F13E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000F145                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000F14C                 mov     eax, [ebp+arg_4]
.text:0000F14F                 cmp     eax, [ebp+arg_C]
.text:0000F152                 ja      short loc_F167
.text:0000F154                 jb      short loc_F15E
.text:0000F156                 mov     ecx, [ebp+arg_0]
.text:0000F159                 cmp     ecx, [ebp+arg_8]
.text:0000F15C                 jnb     short loc_F167
.text:0000F15E
.text:0000F15E loc_F15E:                               ; CODE XREF: MyCompare<unsigned __int64>(unsigned __int64,unsigned __int64)+1Cj
.text:0000F15E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000F165                 jmp     short loc_F18D
.text:0000F167 ; ---------------------------------------------------------------------------
.text:0000F167
.text:0000F167 loc_F167:                               ; CODE XREF: MyCompare<unsigned __int64>(unsigned __int64,unsigned __int64)+1Aj
.text:0000F167                                         ; MyCompare<unsigned __int64>(unsigned __int64,unsigned __int64)+24j
.text:0000F167                 mov     edx, [ebp+arg_0]
.text:0000F16A                 cmp     edx, [ebp+arg_8]
.text:0000F16D                 jnz     short loc_F180
.text:0000F16F                 mov     eax, [ebp+arg_4]
.text:0000F172                 cmp     eax, [ebp+arg_C]
.text:0000F175                 jnz     short loc_F180
.text:0000F177                 mov     [ebp+var_8], 0
.text:0000F17E                 jmp     short loc_F187
.text:0000F180 ; ---------------------------------------------------------------------------
.text:0000F180
.text:0000F180 loc_F180:                               ; CODE XREF: MyCompare<unsigned __int64>(unsigned __int64,unsigned __int64)+35j
.text:0000F180                                         ; MyCompare<unsigned __int64>(unsigned __int64,unsigned __int64)+3Dj
.text:0000F180                 mov     [ebp+var_8], 1
.text:0000F187
.text:0000F187 loc_F187:                               ; CODE XREF: MyCompare<unsigned __int64>(unsigned __int64,unsigned __int64)+46j
.text:0000F187                 mov     ecx, [ebp+var_8]
.text:0000F18A                 mov     [ebp+var_4], ecx
.text:0000F18D
.text:0000F18D loc_F18D:                               ; CODE XREF: MyCompare<unsigned __int64>(unsigned __int64,unsigned __int64)+2Dj
.text:0000F18D                 mov     eax, [ebp+var_4]
.text:0000F190                 mov     esp, ebp
.text:0000F192                 pop     ebp
.text:0000F193                 retn    10h
.text:0000F193 ??$MyCompare@_K@@YGH_K0@Z endp
.text:0000F193
.text:0000F193 ; ---------------------------------------------------------------------------
.text:0000F196                 align 4
.text:0000F196 _text           ends
.text:0000F196
.text:0000F198 ; ===========================================================================
.text:0000F198
.text:0000F198 ; Segment type: Pure code
.text:0000F198 ; Segment permissions: Read/Execute
.text:0000F198 _text           segment para public 'CODE' use32
.text:0000F198                 assume cs:_text
.text:0000F198                 ;org 0F198h
.text:0000F198 ; COMDAT (pick any)
.text:0000F198                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000F198
.text:0000F198 ; =============== S U B R O U T I N E =======================================
.text:0000F198
.text:0000F198 ; Attributes: bp-based frame
.text:0000F198
.text:0000F198 ; int __stdcall MyCompare<int>(int, int)
.text:0000F198                 public ??$MyCompare@H@@YGHHH@Z
.text:0000F198 ??$MyCompare@H@@YGHHH@Z proc near       ; CODE XREF: NArchive::N7z::CompareUpdateItems(NArchive::N7z::CRefItem const *,NArchive::N7z::CRefItem const *,void *)+253p
.text:0000F198                                         ; NArchive::N7z::CompareUpdateItems(NArchive::N7z::CRefItem const *,NArchive::N7z::CRefItem const *,void *)+276p
.text:0000F198
.text:0000F198 var_4           = dword ptr -4
.text:0000F198 arg_0           = dword ptr  8
.text:0000F198 arg_4           = dword ptr  0Ch
.text:0000F198
.text:0000F198                 push    ebp
.text:0000F199                 mov     ebp, esp
.text:0000F19B                 push    ecx
.text:0000F19C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000F1A3                 mov     eax, [ebp+arg_0]
.text:0000F1A6                 cmp     eax, [ebp+arg_4]
.text:0000F1A9                 jge     short loc_F1B4
.text:0000F1AB                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000F1B2                 jmp     short loc_F1C2
.text:0000F1B4 ; ---------------------------------------------------------------------------
.text:0000F1B4
.text:0000F1B4 loc_F1B4:                               ; CODE XREF: MyCompare<int>(int,int)+11j
.text:0000F1B4                 mov     ecx, [ebp+arg_0]
.text:0000F1B7                 xor     edx, edx
.text:0000F1B9                 cmp     ecx, [ebp+arg_4]
.text:0000F1BC                 setnz   dl
.text:0000F1BF                 mov     [ebp+var_4], edx
.text:0000F1C2
.text:0000F1C2 loc_F1C2:                               ; CODE XREF: MyCompare<int>(int,int)+1Aj
.text:0000F1C2                 mov     eax, [ebp+var_4]
.text:0000F1C5                 mov     esp, ebp
.text:0000F1C7                 pop     ebp
.text:0000F1C8                 retn    8
.text:0000F1C8 ??$MyCompare@H@@YGHHH@Z endp
.text:0000F1C8
.text:0000F1C8 ; ---------------------------------------------------------------------------
.text:0000F1CB                 align 4
.text:0000F1CB _text           ends
.text:0000F1CB
.text:0000F1CC ; ===========================================================================
.text:0000F1CC
.text:0000F1CC ; Segment type: Pure code
.text:0000F1CC ; Segment permissions: Read/Execute
.text:0000F1CC _text           segment para public 'CODE' use32
.text:0000F1CC                 assume cs:_text
.text:0000F1CC                 ;org 0F1CCh
.text:0000F1CC ; COMDAT (pick any)
.text:0000F1CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000F1CC
.text:0000F1CC ; =============== S U B R O U T I N E =======================================
.text:0000F1CC
.text:0000F1CC
.text:0000F1CC ; [thunk]:public: virtual unsigned long __stdcall NCompress::CCopyCoder::Release`adjustor{4}' (void)
.text:0000F1CC                 public ?Release@CCopyCoder@NCompress@@W3AGKXZ
.text:0000F1CC ?Release@CCopyCoder@NCompress@@W3AGKXZ proc near
.text:0000F1CC                                         ; DATA XREF: .rdata:00007AD4o
.text:0000F1CC
.text:0000F1CC arg_0           = dword ptr  4
.text:0000F1CC
.text:0000F1CC                 sub     [esp+arg_0], 4
.text:0000F1D1                 jmp     ?Release@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::Release(void)
.text:0000F1D1 ?Release@CCopyCoder@NCompress@@W3AGKXZ endp
.text:0000F1D1
.text:0000F1D1 ; ---------------------------------------------------------------------------
.text:0000F1D6                 align 4
.text:0000F1D6 _text           ends
.text:0000F1D6
.text:0000F1D8 ; ===========================================================================
.text:0000F1D8
.text:0000F1D8 ; Segment type: Pure code
.text:0000F1D8 ; Segment permissions: Read/Execute
.text:0000F1D8 _text           segment para public 'CODE' use32
.text:0000F1D8                 assume cs:_text
.text:0000F1D8                 ;org 0F1D8h
.text:0000F1D8 ; COMDAT (pick any)
.text:0000F1D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000F1D8
.text:0000F1D8 ; =============== S U B R O U T I N E =======================================
.text:0000F1D8
.text:0000F1D8
.text:0000F1D8 ; [thunk]:public: virtual long __stdcall NArchive::N7z::CRepackInStreamWithSizes::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:0000F1D8                 public ?QueryInterface@CRepackInStreamWithSizes@N7z@NArchive@@W3AGJABU_GUID@@PAPAX@Z
.text:0000F1D8 ?QueryInterface@CRepackInStreamWithSizes@N7z@NArchive@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:0000F1D8                                         ; DATA XREF: .rdata:const NArchive::N7z::CRepackInStreamWithSizes::`vftable'{for `ICompressGetSubStreamSize'}o
.text:0000F1D8
.text:0000F1D8 arg_0           = dword ptr  4
.text:0000F1D8
.text:0000F1D8                 sub     [esp+arg_0], 4
.text:0000F1DD                 jmp     ?QueryInterface@CRepackInStreamWithSizes@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::N7z::CRepackInStreamWithSizes::QueryInterface(_GUID const &,void * *)
.text:0000F1DD ?QueryInterface@CRepackInStreamWithSizes@N7z@NArchive@@W3AGJABU_GUID@@PAPAX@Z endp
.text:0000F1DD
.text:0000F1DD ; ---------------------------------------------------------------------------
.text:0000F1E2                 align 4
.text:0000F1E2 _text           ends
.text:0000F1E2
.text:0000F1E4 ; ===========================================================================
.text:0000F1E4
.text:0000F1E4 ; Segment type: Pure code
.text:0000F1E4 ; Segment permissions: Read/Execute
.text:0000F1E4 _text           segment para public 'CODE' use32
.text:0000F1E4                 assume cs:_text
.text:0000F1E4                 ;org 0F1E4h
.text:0000F1E4 ; COMDAT (pick any)
.text:0000F1E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000F1E4
.text:0000F1E4 ; =============== S U B R O U T I N E =======================================
.text:0000F1E4
.text:0000F1E4
.text:0000F1E4 ; [thunk]:public: virtual unsigned long __stdcall NCompress::CCopyCoder::Release`adjustor{8}' (void)
.text:0000F1E4                 public ?Release@CCopyCoder@NCompress@@W7AGKXZ
.text:0000F1E4 ?Release@CCopyCoder@NCompress@@W7AGKXZ proc near
.text:0000F1E4                                         ; DATA XREF: .rdata:00007AC0o
.text:0000F1E4
.text:0000F1E4 arg_0           = dword ptr  4
.text:0000F1E4
.text:0000F1E4                 sub     [esp+arg_0], 8
.text:0000F1E9                 jmp     ?Release@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::Release(void)
.text:0000F1E9 ?Release@CCopyCoder@NCompress@@W7AGKXZ endp
.text:0000F1E9
.text:0000F1E9 ; ---------------------------------------------------------------------------
.text:0000F1EE                 align 10h
.text:0000F1EE _text           ends
.text:0000F1EE
.text:0000F1F0 ; ===========================================================================
.text:0000F1F0
.text:0000F1F0 ; Segment type: Pure code
.text:0000F1F0 ; Segment permissions: Read/Execute
.text:0000F1F0 _text           segment para public 'CODE' use32
.text:0000F1F0                 assume cs:_text
.text:0000F1F0                 ;org 0F1F0h
.text:0000F1F0 ; COMDAT (pick any)
.text:0000F1F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000F1F0
.text:0000F1F0 ; =============== S U B R O U T I N E =======================================
.text:0000F1F0
.text:0000F1F0
.text:0000F1F0 ; [thunk]:public: virtual unsigned long __stdcall NArchive::N7z::CFolderInStream::AddRef`adjustor{4}' (void)
.text:0000F1F0                 public ?AddRef@CFolderInStream@N7z@NArchive@@W3AGKXZ
.text:0000F1F0 ?AddRef@CFolderInStream@N7z@NArchive@@W3AGKXZ proc near
.text:0000F1F0                                         ; DATA XREF: .rdata:0000ACE8o
.text:0000F1F0
.text:0000F1F0 arg_0           = dword ptr  4
.text:0000F1F0
.text:0000F1F0                 sub     [esp+arg_0], 4
.text:0000F1F5                 jmp     ?AddRef@CFolderInStream@N7z@NArchive@@UAGKXZ ; NArchive::N7z::CFolderInStream::AddRef(void)
.text:0000F1F5 ?AddRef@CFolderInStream@N7z@NArchive@@W3AGKXZ endp
.text:0000F1F5
.text:0000F1F5 ; ---------------------------------------------------------------------------
.text:0000F1FA                 align 4
.text:0000F1FA _text           ends
.text:0000F1FA
.text:0000F1FC ; ===========================================================================
.text:0000F1FC
.text:0000F1FC ; Segment type: Pure code
.text:0000F1FC ; Segment permissions: Read/Execute
.text:0000F1FC _text           segment para public 'CODE' use32
.text:0000F1FC                 assume cs:_text
.text:0000F1FC                 ;org 0F1FCh
.text:0000F1FC ; COMDAT (pick any)
.text:0000F1FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000F1FC
.text:0000F1FC ; =============== S U B R O U T I N E =======================================
.text:0000F1FC
.text:0000F1FC
.text:0000F1FC ; [thunk]:public: virtual unsigned long __stdcall NCompress::CCopyCoder::Release`adjustor{12}' (void)
.text:0000F1FC                 public ?Release@CCopyCoder@NCompress@@WM@AGKXZ
.text:0000F1FC ?Release@CCopyCoder@NCompress@@WM@AGKXZ proc near
.text:0000F1FC                                         ; DATA XREF: .rdata:00007AACo
.text:0000F1FC
.text:0000F1FC arg_0           = dword ptr  4
.text:0000F1FC
.text:0000F1FC                 sub     [esp+arg_0], 0Ch
.text:0000F201                 jmp     ?Release@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::Release(void)
.text:0000F201 ?Release@CCopyCoder@NCompress@@WM@AGKXZ endp
.text:0000F201
.text:0000F201 ; ---------------------------------------------------------------------------
.text:0000F206                 align 4
.text:0000F206 _text           ends
.text:0000F206
.text:0000F208 ; ===========================================================================
.text:0000F208
.text:0000F208 ; Segment type: Pure code
.text:0000F208 ; Segment permissions: Read/Execute
.text:0000F208 _text           segment para public 'CODE' use32
.text:0000F208                 assume cs:_text
.text:0000F208                 ;org 0F208h
.text:0000F208 ; COMDAT (pick any)
.text:0000F208                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000F208
.text:0000F208 ; =============== S U B R O U T I N E =======================================
.text:0000F208
.text:0000F208
.text:0000F208 ; [thunk]:public: virtual unsigned long __stdcall NCompress::CCopyCoder::AddRef`adjustor{4}' (void)
.text:0000F208                 public ?AddRef@CCopyCoder@NCompress@@W3AGKXZ
.text:0000F208 ?AddRef@CCopyCoder@NCompress@@W3AGKXZ proc near ; DATA XREF: .rdata:00007AD0o
.text:0000F208
.text:0000F208 arg_0           = dword ptr  4
.text:0000F208
.text:0000F208                 sub     [esp+arg_0], 4
.text:0000F20D                 jmp     ?AddRef@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::AddRef(void)
.text:0000F20D ?AddRef@CCopyCoder@NCompress@@W3AGKXZ endp
.text:0000F20D
.text:0000F20D ; ---------------------------------------------------------------------------
.text:0000F212                 align 4
.text:0000F212 _text           ends
.text:0000F212
.text:0000F214 ; ===========================================================================
.text:0000F214
.text:0000F214 ; Segment type: Pure code
.text:0000F214 ; Segment permissions: Read/Execute
.text:0000F214 _text           segment para public 'CODE' use32
.text:0000F214                 assume cs:_text
.text:0000F214                 ;org 0F214h
.text:0000F214 ; COMDAT (pick any)
.text:0000F214                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000F214
.text:0000F214 ; =============== S U B R O U T I N E =======================================
.text:0000F214
.text:0000F214
.text:0000F214 ; [thunk]:public: virtual unsigned long __stdcall NCompress::CCopyCoder::AddRef`adjustor{8}' (void)
.text:0000F214                 public ?AddRef@CCopyCoder@NCompress@@W7AGKXZ
.text:0000F214 ?AddRef@CCopyCoder@NCompress@@W7AGKXZ proc near ; DATA XREF: .rdata:00007ABCo
.text:0000F214
.text:0000F214 arg_0           = dword ptr  4
.text:0000F214
.text:0000F214                 sub     [esp+arg_0], 8
.text:0000F219                 jmp     ?AddRef@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::AddRef(void)
.text:0000F219 ?AddRef@CCopyCoder@NCompress@@W7AGKXZ endp
.text:0000F219
.text:0000F219 ; ---------------------------------------------------------------------------
.text:0000F21E                 align 10h
.text:0000F21E _text           ends
.text:0000F21E
.text:0000F220 ; ===========================================================================
.text:0000F220
.text:0000F220 ; Segment type: Pure code
.text:0000F220 ; Segment permissions: Read/Execute
.text:0000F220 _text           segment para public 'CODE' use32
.text:0000F220                 assume cs:_text
.text:0000F220                 ;org 0F220h
.text:0000F220 ; COMDAT (pick any)
.text:0000F220                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000F220
.text:0000F220 ; =============== S U B R O U T I N E =======================================
.text:0000F220
.text:0000F220
.text:0000F220 ; [thunk]:public: virtual long __stdcall NCompress::CCopyCoder::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:0000F220                 public ?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.text:0000F220 ?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:0000F220                                         ; DATA XREF: .rdata:const NCompress::CCopyCoder::`vftable'{for `ICompressSetInStream'}o
.text:0000F220
.text:0000F220 arg_0           = dword ptr  4
.text:0000F220
.text:0000F220                 sub     [esp+arg_0], 4
.text:0000F225                 jmp     ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)
.text:0000F225 ?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z endp
.text:0000F225
.text:0000F225 ; ---------------------------------------------------------------------------
.text:0000F22A                 align 4
.text:0000F22A _text           ends
.text:0000F22A
.text:0000F22C ; ===========================================================================
.text:0000F22C
.text:0000F22C ; Segment type: Pure code
.text:0000F22C ; Segment permissions: Read/Execute
.text:0000F22C _text           segment para public 'CODE' use32
.text:0000F22C                 assume cs:_text
.text:0000F22C                 ;org 0F22Ch
.text:0000F22C ; COMDAT (pick any)
.text:0000F22C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000F22C
.text:0000F22C ; =============== S U B R O U T I N E =======================================
.text:0000F22C
.text:0000F22C
.text:0000F22C ; [thunk]:public: virtual unsigned long __stdcall NCompress::CCopyCoder::AddRef`adjustor{12}' (void)
.text:0000F22C                 public ?AddRef@CCopyCoder@NCompress@@WM@AGKXZ
.text:0000F22C ?AddRef@CCopyCoder@NCompress@@WM@AGKXZ proc near
.text:0000F22C                                         ; DATA XREF: .rdata:00007AA8o
.text:0000F22C
.text:0000F22C arg_0           = dword ptr  4
.text:0000F22C
.text:0000F22C                 sub     [esp+arg_0], 0Ch
.text:0000F231                 jmp     ?AddRef@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::AddRef(void)
.text:0000F231 ?AddRef@CCopyCoder@NCompress@@WM@AGKXZ endp
.text:0000F231
.text:0000F231 ; ---------------------------------------------------------------------------
.text:0000F236                 align 4
.text:0000F236 _text           ends
.text:0000F236
.text:0000F238 ; ===========================================================================
.text:0000F238
.text:0000F238 ; Segment type: Pure code
.text:0000F238 ; Segment permissions: Read/Execute
.text:0000F238 _text           segment para public 'CODE' use32
.text:0000F238                 assume cs:_text
.text:0000F238                 ;org 0F238h
.text:0000F238 ; COMDAT (pick any)
.text:0000F238                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000F238
.text:0000F238 ; =============== S U B R O U T I N E =======================================
.text:0000F238
.text:0000F238
.text:0000F238 ; [thunk]:public: virtual long __stdcall NArchive::N7z::CFolderInStream::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:0000F238                 public ?QueryInterface@CFolderInStream@N7z@NArchive@@W3AGJABU_GUID@@PAPAX@Z
.text:0000F238 ?QueryInterface@CFolderInStream@N7z@NArchive@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:0000F238                                         ; DATA XREF: .rdata:const NArchive::N7z::CFolderInStream::`vftable'{for `ICompressGetSubStreamSize'}o
.text:0000F238
.text:0000F238 arg_0           = dword ptr  4
.text:0000F238
.text:0000F238                 sub     [esp+arg_0], 4
.text:0000F23D                 jmp     ?QueryInterface@CFolderInStream@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::N7z::CFolderInStream::QueryInterface(_GUID const &,void * *)
.text:0000F23D ?QueryInterface@CFolderInStream@N7z@NArchive@@W3AGJABU_GUID@@PAPAX@Z endp
.text:0000F23D
.text:0000F23D ; ---------------------------------------------------------------------------
.text:0000F242                 align 4
.text:0000F242 _text           ends
.text:0000F242
.text:0000F244 ; ===========================================================================
.text:0000F244
.text:0000F244 ; Segment type: Pure code
.text:0000F244 ; Segment permissions: Read/Execute
.text:0000F244 _text           segment para public 'CODE' use32
.text:0000F244                 assume cs:_text
.text:0000F244                 ;org 0F244h
.text:0000F244 ; COMDAT (pick any)
.text:0000F244                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000F244
.text:0000F244 ; =============== S U B R O U T I N E =======================================
.text:0000F244
.text:0000F244
.text:0000F244 ; [thunk]:public: virtual unsigned long __stdcall NArchive::N7z::CRepackInStreamWithSizes::Release`adjustor{4}' (void)
.text:0000F244                 public ?Release@CRepackInStreamWithSizes@N7z@NArchive@@W3AGKXZ
.text:0000F244 ?Release@CRepackInStreamWithSizes@N7z@NArchive@@W3AGKXZ proc near
.text:0000F244                                         ; DATA XREF: .rdata:0000A8C4o
.text:0000F244
.text:0000F244 arg_0           = dword ptr  4
.text:0000F244
.text:0000F244                 sub     [esp+arg_0], 4
.text:0000F249                 jmp     ?Release@CRepackInStreamWithSizes@N7z@NArchive@@UAGKXZ ; NArchive::N7z::CRepackInStreamWithSizes::Release(void)
.text:0000F249 ?Release@CRepackInStreamWithSizes@N7z@NArchive@@W3AGKXZ endp
.text:0000F249
.text:0000F249 ; ---------------------------------------------------------------------------
.text:0000F24E                 align 10h
.text:0000F24E _text           ends
.text:0000F24E
.text:0000F250 ; ===========================================================================
.text:0000F250
.text:0000F250 ; Segment type: Pure code
.text:0000F250 ; Segment permissions: Read/Execute
.text:0000F250 _text           segment para public 'CODE' use32
.text:0000F250                 assume cs:_text
.text:0000F250                 ;org 0F250h
.text:0000F250 ; COMDAT (pick any)
.text:0000F250                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000F250
.text:0000F250 ; =============== S U B R O U T I N E =======================================
.text:0000F250
.text:0000F250
.text:0000F250 ; [thunk]:public: virtual long __stdcall NCompress::CCopyCoder::QueryInterface`adjustor{8}' (struct _GUID const &, void * *)
.text:0000F250                 public ?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z
.text:0000F250 ?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z proc near
.text:0000F250                                         ; DATA XREF: .rdata:const NCompress::CCopyCoder::`vftable'{for `ISequentialInStream'}o
.text:0000F250
.text:0000F250 arg_0           = dword ptr  4
.text:0000F250
.text:0000F250                 sub     [esp+arg_0], 8
.text:0000F255                 jmp     ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)
.text:0000F255 ?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z endp
.text:0000F255
.text:0000F255 ; ---------------------------------------------------------------------------
.text:0000F25A                 align 4
.text:0000F25A _text           ends
.text:0000F25A
.text:0000F25C ; ===========================================================================
.text:0000F25C
.text:0000F25C ; Segment type: Pure code
.text:0000F25C ; Segment permissions: Read/Execute
.text:0000F25C _text           segment para public 'CODE' use32
.text:0000F25C                 assume cs:_text
.text:0000F25C                 ;org 0F25Ch
.text:0000F25C ; COMDAT (pick any)
.text:0000F25C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000F25C
.text:0000F25C ; =============== S U B R O U T I N E =======================================
.text:0000F25C
.text:0000F25C
.text:0000F25C ; [thunk]:public: virtual long __stdcall NCompress::CCopyCoder::QueryInterface`adjustor{12}' (struct _GUID const &, void * *)
.text:0000F25C                 public ?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z
.text:0000F25C ?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z proc near
.text:0000F25C                                         ; DATA XREF: .rdata:const NCompress::CCopyCoder::`vftable'{for `ICompressGetInStreamProcessedSize'}o
.text:0000F25C
.text:0000F25C arg_0           = dword ptr  4
.text:0000F25C
.text:0000F25C                 sub     [esp+arg_0], 0Ch
.text:0000F261                 jmp     ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)
.text:0000F261 ?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z endp
.text:0000F261
.text:0000F261 ; ---------------------------------------------------------------------------
.text:0000F266                 align 4
.text:0000F266 _text           ends
.text:0000F266
.text:0000F268 ; ===========================================================================
.text:0000F268
.text:0000F268 ; Segment type: Pure code
.text:0000F268 ; Segment permissions: Read/Execute
.text:0000F268 _text           segment para public 'CODE' use32
.text:0000F268                 assume cs:_text
.text:0000F268                 ;org 0F268h
.text:0000F268 ; COMDAT (pick any)
.text:0000F268                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000F268
.text:0000F268 ; =============== S U B R O U T I N E =======================================
.text:0000F268
.text:0000F268
.text:0000F268 ; [thunk]:public: virtual unsigned long __stdcall NArchive::N7z::CRepackInStreamWithSizes::AddRef`adjustor{4}' (void)
.text:0000F268                 public ?AddRef@CRepackInStreamWithSizes@N7z@NArchive@@W3AGKXZ
.text:0000F268 ?AddRef@CRepackInStreamWithSizes@N7z@NArchive@@W3AGKXZ proc near
.text:0000F268                                         ; DATA XREF: .rdata:0000A8C0o
.text:0000F268
.text:0000F268 arg_0           = dword ptr  4
.text:0000F268
.text:0000F268                 sub     [esp+arg_0], 4
.text:0000F26D                 jmp     ?AddRef@CRepackInStreamWithSizes@N7z@NArchive@@UAGKXZ ; NArchive::N7z::CRepackInStreamWithSizes::AddRef(void)
.text:0000F26D ?AddRef@CRepackInStreamWithSizes@N7z@NArchive@@W3AGKXZ endp
.text:0000F26D
.text:0000F26D ; ---------------------------------------------------------------------------
.text:0000F272                 align 4
.text:0000F272 _text           ends
.text:0000F272
.text:0000F274 ; ===========================================================================
.text:0000F274
.text:0000F274 ; Segment type: Pure code
.text:0000F274 ; Segment permissions: Read/Execute
.text:0000F274 _text           segment para public 'CODE' use32
.text:0000F274                 assume cs:_text
.text:0000F274                 ;org 0F274h
.text:0000F274 ; COMDAT (pick any)
.text:0000F274                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000F274
.text:0000F274 ; =============== S U B R O U T I N E =======================================
.text:0000F274
.text:0000F274
.text:0000F274 ; [thunk]:public: virtual unsigned long __stdcall NArchive::N7z::CFolderInStream::Release`adjustor{4}' (void)
.text:0000F274                 public ?Release@CFolderInStream@N7z@NArchive@@W3AGKXZ
.text:0000F274 ?Release@CFolderInStream@N7z@NArchive@@W3AGKXZ proc near
.text:0000F274                                         ; DATA XREF: .rdata:0000ACECo
.text:0000F274
.text:0000F274 arg_0           = dword ptr  4
.text:0000F274
.text:0000F274                 sub     [esp+arg_0], 4
.text:0000F279                 jmp     ?Release@CFolderInStream@N7z@NArchive@@UAGKXZ ; NArchive::N7z::CFolderInStream::Release(void)
.text:0000F279 ?Release@CFolderInStream@N7z@NArchive@@W3AGKXZ endp
.text:0000F279
.text:0000F279 _text           ends
.text:0000F279
UNDEF:0000F280 ; ===========================================================================
UNDEF:0000F280
UNDEF:0000F280 ; Segment type: Externs
UNDEF:0000F280 ; UNDEF
UNDEF:0000F280 ; __int32 __stdcall ReadStream(struct ISequentialInStream *, void *, unsigned int *)
UNDEF:0000F280                 extrn ?ReadStream@@YGJPAUISequentialInStream@@PAXPAI@Z:near
UNDEF:0000F280                                         ; CODE XREF: NArchive::N7z::CAnalysis::GetFilterGroup(uint,NArchive::N7z::CUpdateItem const &,NArchive::N7z::CFilterMode &)+20Bp
UNDEF:0000F284 ; bool __stdcall StringsAreEqualNoCase_Ascii(const wchar_t *, const char *)
UNDEF:0000F284                 extrn ?StringsAreEqualNoCase_Ascii@@YG_NPB_WPBD@Z:near
UNDEF:0000F284                                         ; CODE XREF: NArchive::N7z::CAnalysis::GetFilterGroup(uint,NArchive::N7z::CUpdateItem const &,NArchive::N7z::CFilterMode &)+13Bp
UNDEF:0000F284                                         ; NArchive::N7z::IsExeExt(wchar_t const *)+32p
UNDEF:0000F288 ; int __thiscall UString::ReverseFind_PathSepar(UString *__hidden this)
UNDEF:0000F288                 extrn ?ReverseFind_PathSepar@UString@@QBEHXZ:near
UNDEF:0000F288                                         ; CODE XREF: NArchive::N7z::CAnalysis::GetFilterGroup(uint,NArchive::N7z::CUpdateItem const &,NArchive::N7z::CFilterMode &)+62p
UNDEF:0000F288                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+3273p ...
UNDEF:0000F28C                 extrn ___security_cookie:near
UNDEF:0000F28C                                         ; DATA XREF: NArchive::N7z::CAnalysis::GetFilterGroup(uint,NArchive::N7z::CUpdateItem const &,NArchive::N7z::CFilterMode &)+27r
UNDEF:0000F28C                                         ; NArchive::N7z::CThreadDecoder::Execute(void)+29r ...
UNDEF:0000F290                 extrn ___CxxFrameHandler3:near
UNDEF:0000F290                                         ; CODE XREF: __ehhandler$?GetFilterGroup@CAnalysis@N7z@NArchive@@QAEJIABUCUpdateItem@23@AAUCFilterMode@23@@Z+16j
UNDEF:0000F290                                         ; __ehhandler$?Execute@CThreadDecoder@N7z@NArchive@@UAEXXZ+16j ...
UNDEF:0000F294 ; __fastcall __security_check_cookie(x)
UNDEF:0000F294                 extrn @__security_check_cookie@4:near
UNDEF:0000F294                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+3E9Ap
UNDEF:0000F294                                         ; NArchive::N7z::AddBondForFilter(NArchive::N7z::CCompressionMethodMode &)+B2p ...
UNDEF:0000F298 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:0000F298                 extrn @_RTC_CheckStackVars@8:near
UNDEF:0000F298                                         ; CODE XREF: NArchive::N7z::CAnalysis::GetFilterGroup(uint,NArchive::N7z::CUpdateItem const &,NArchive::N7z::CFilterMode &)+2F6p
UNDEF:0000F298                                         ; NArchive::N7z::CFolderOutStream2::Write(void const *,uint,uint *)+1ECp ...
UNDEF:0000F29C                 extrn __aullrem:near    ; CODE XREF: NArchive::N7z::CAnalysis::GetFilterGroup(uint,NArchive::N7z::CUpdateItem const &,NArchive::N7z::CFilterMode &)+26Fp
UNDEF:0000F2A0                 extrn __RTC_CheckEsp:near
UNDEF:0000F2A0                                         ; CODE XREF: NArchive::N7z::CAnalysis::GetFilterGroup(uint,NArchive::N7z::CUpdateItem const &,NArchive::N7z::CFilterMode &)+1C9p
UNDEF:0000F2A0                                         ; NArchive::N7z::CAnalysis::GetFilterGroup(uint,NArchive::N7z::CUpdateItem const &,NArchive::N7z::CFilterMode &)+30Fp ...
UNDEF:0000F2A4                 extrn __RTC_Shutdown:near
UNDEF:0000F2A4                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:0000F2A8                 extrn __RTC_InitBase:near
UNDEF:0000F2A8                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:0000F2AC ; int __thiscall UString::ReverseFind(UString *__hidden this, wchar_t)
UNDEF:0000F2AC                 extrn ?ReverseFind@UString@@QBEH_W@Z:near
UNDEF:0000F2AC                                         ; CODE XREF: UString::ReverseFind_Dot(void)+13p
UNDEF:0000F2B0 ; __fastcall CrcUpdate(x, x, x)
UNDEF:0000F2B0                 extrn @CrcUpdate@12:near
UNDEF:0000F2B0                                         ; CODE XREF: NArchive::N7z::CFolderOutStream2::Write(void const *,uint,uint *)+DDp
UNDEF:0000F2B0                                         ; NArchive::N7z::CFolderInStream2::Read(void *,uint,uint *)+ECp
UNDEF:0000F2B4 ; __int32 __thiscall NArchive::N7z::CDecoder::Decode(NArchive::N7z::CDecoder *__hidden this, struct IInStream *, unsigned __int64, const struct NArchive::N7z::CFolders *, unsigned int, const unsigned __int64 *, struct ISequentialOutStream *, struct ICompressProgressInfo *, struct ISequentialInStream **, struct ICryptoGetTextPassword *, bool *, bool *, struct UString *, bool, unsigned int)
UNDEF:0000F2B4                 extrn ?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z:near
UNDEF:0000F2B4                                         ; CODE XREF: NArchive::N7z::CThreadDecoder::Execute(void)+ECp
UNDEF:0000F2B4                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1DD5p
UNDEF:0000F2B8 ; public: __thiscall UString::UString(void)
UNDEF:0000F2B8                 extrn ??0UString@@QAE@XZ:near
UNDEF:0000F2B8                                         ; CODE XREF: NArchive::N7z::CThreadDecoder::Execute(void)+52p
UNDEF:0000F2B8                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+108Ap ...
UNDEF:0000F2BC ; void __cdecl operator delete(void *)
UNDEF:0000F2BC                 extrn ??3@YAXPAX@Z:near ; CODE XREF: __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$6+7p
UNDEF:0000F2BC                                         ; __unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$12+7p ...
UNDEF:0000F2C0 ; BSTR __stdcall SysAllocString(const OLECHAR *psz)
UNDEF:0000F2C0                 extrn __imp__SysAllocString@4:near
UNDEF:0000F2C0                                         ; CODE XREF: StringToBstr(wchar_t const *,wchar_t * *)+Ap
UNDEF:0000F2C0                                         ; DATA XREF: StringToBstr(wchar_t const *,wchar_t * *)+Ar
UNDEF:0000F2C4 ; void __thiscall NArchive::N7z::CFolderInStream::Init(NArchive::N7z::CFolderInStream *__hidden this, struct IArchiveUpdateCallback *, const unsigned int *, unsigned int)
UNDEF:0000F2C4                 extrn ?Init@CFolderInStream@N7z@NArchive@@QAEXPAUIArchiveUpdateCallback@@PBII@Z:near
UNDEF:0000F2C4                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+34A9p
UNDEF:0000F2C8 ; __int32 __thiscall CLocalProgress::SetCur(CLocalProgress *__hidden this)
UNDEF:0000F2C8                 extrn ?SetCur@CLocalProgress@@QAEJXZ:near
UNDEF:0000F2C8                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+3331p
UNDEF:0000F2C8                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+3C54p
UNDEF:0000F2CC ; bool __stdcall StringsAreEqualNoCase(const wchar_t *, const wchar_t *)
UNDEF:0000F2CC                 extrn ?StringsAreEqualNoCase@@YG_NPB_W0@Z:near
UNDEF:0000F2CC                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+3305p
UNDEF:0000F2D0 ; public: long __thiscall NArchive::N7z::CEncoder::Encode(struct ISequentialInStream *, unsigned __int64 const *, struct NArchive::N7z::CFolder &, class CRecordVector<unsigned __int64> &, unsigned __int64 &, struct ISequentialOutStream *, class CRecordVector<unsigned __int64> &, struct ICompressProgressInfo *)
UNDEF:0000F2D0                 extrn ?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z:near
UNDEF:0000F2D0                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+2225p
UNDEF:0000F2D0                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+3511p
UNDEF:0000F2D4 ; void __thiscall CVirtThread::Start(CVirtThread *__hidden this)
UNDEF:0000F2D4                 extrn ?Start@CVirtThread@@QAEXXZ:near
UNDEF:0000F2D4                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+21CEp
UNDEF:0000F2D8 ; void __thiscall CStreamBinder::ReInit(CStreamBinder *__hidden this)
UNDEF:0000F2D8                 extrn ?ReInit@CStreamBinder@@QAEXXZ:near
UNDEF:0000F2D8                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1C3Cp
UNDEF:0000F2DC ; void __thiscall CStreamBinder::CreateStreams(CStreamBinder *__hidden this, struct ISequentialInStream **, struct ISequentialOutStream **)
UNDEF:0000F2DC                 extrn ?CreateStreams@CStreamBinder@@QAEXPAPAUISequentialInStream@@PAPAUISequentialOutStream@@@Z:near
UNDEF:0000F2DC                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1C31p
UNDEF:0000F2E0 ; void __thiscall NArchive::N7z::CFolders::ParseFolderInfo(NArchive::N7z::CFolders *__hidden this, unsigned int, struct NArchive::N7z::CFolder *)
UNDEF:0000F2E0                 extrn ?ParseFolderInfo@CFolders@N7z@NArchive@@QBEXIAAUCFolder@23@@Z:near
UNDEF:0000F2E0                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+17F6p
UNDEF:0000F2E0                                         ; NArchive::N7z::CFolders::ParseFolderEx(uint,NArchive::N7z::CFolderEx &)+19p
UNDEF:0000F2E4 ; _DWORD __thiscall NArchive::N7z::CEncoder::~CEncoder(NArchive::N7z::CEncoder *__hidden this)
UNDEF:0000F2E4                 extrn ??1CEncoder@N7z@NArchive@@QAE@XZ:near
UNDEF:0000F2E4                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1481p
UNDEF:0000F2E4                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+15F1p ...
UNDEF:0000F2E8 ; _DWORD __thiscall NArchive::N7z::CEncoder::CEncoder(NArchive::N7z::CEncoder *__hidden this, const struct NArchive::N7z::CCompressionMethodMode *)
UNDEF:0000F2E8                 extrn ??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z:near
UNDEF:0000F2E8                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1364p
UNDEF:0000F2EC ; void __thiscall NArchive::N7z::CArchiveDatabaseOut::AddFile(NArchive::N7z::CArchiveDatabaseOut *__hidden this, const struct NArchive::N7z::CFileItem *, const struct NArchive::N7z::CFileItem2 *, const struct UString *)
UNDEF:0000F2EC                 extrn ?AddFile@CArchiveDatabaseOut@N7z@NArchive@@QAEXABUCFileItem@23@ABUCFileItem2@23@ABVUString@@@Z:near
UNDEF:0000F2EC                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1122p
UNDEF:0000F2EC                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+2F54p ...
UNDEF:0000F2F0 ; void __thiscall NArchive::N7z::CDatabase::GetPath(NArchive::N7z::CDatabase *__hidden this, unsigned int, struct UString *)
UNDEF:0000F2F0                 extrn ?GetPath@CDatabase@N7z@NArchive@@QBEXIAAVUString@@@Z:near
UNDEF:0000F2F0                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+1105p
UNDEF:0000F2F0                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+2DEEp ...
UNDEF:0000F2F4 ; __int32 __thiscall NArchive::N7z::COutArchive::SkipPrefixArchiveHeader(NArchive::N7z::COutArchive *__hidden this)
UNDEF:0000F2F4                 extrn ?SkipPrefixArchiveHeader@COutArchive@N7z@NArchive@@QAEJXZ:near
UNDEF:0000F2F4                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+EB0p
UNDEF:0000F2F8 ; __int32 __thiscall NArchive::N7z::COutArchive::Create(NArchive::N7z::COutArchive *__hidden this, struct ISequentialOutStream *, bool)
UNDEF:0000F2F8                 extrn ?Create@COutArchive@N7z@NArchive@@QAEJPAUISequentialOutStream@@_N@Z:near
UNDEF:0000F2F8                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+E03p
UNDEF:0000F2FC ; public: class UString & __thiscall UString::operator=(wchar_t const *)
UNDEF:0000F2FC                 extrn ??4UString@@QAEAAV0@PB_W@Z:near
UNDEF:0000F2FC                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+DE6p
UNDEF:0000F300 ; public: class UString & __thiscall UString::operator=(class UString const &)
UNDEF:0000F300                 extrn ??4UString@@QAEAAV0@ABV0@@Z:near
UNDEF:0000F300                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+C38p
UNDEF:0000F300                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+10CBp ...
UNDEF:0000F304 ; unsigned int __thiscall CVirtThread::Create(CVirtThread *__hidden this)
UNDEF:0000F304                 extrn ?Create@CVirtThread@@QAEIXZ:near
UNDEF:0000F304                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+83Bp
UNDEF:0000F308 ; unsigned int __thiscall CStreamBinder::CreateEvents(CStreamBinder *__hidden this)
UNDEF:0000F308                 extrn ?CreateEvents@CStreamBinder@@QAEIXZ:near
UNDEF:0000F308                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+778p
UNDEF:0000F30C ; void __thiscall CLocalProgress::Init(CLocalProgress *__hidden this, struct IProgress *, bool)
UNDEF:0000F30C                 extrn ?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z:near
UNDEF:0000F30C                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+74Fp
UNDEF:0000F310 ; public: __thiscall CLocalProgress::CLocalProgress(void)
UNDEF:0000F310                 extrn ??0CLocalProgress@@QAE@XZ:near
UNDEF:0000F310                                         ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+6FAp
UNDEF:0000F314 ; void *__cdecl operator new(unsigned int)
UNDEF:0000F314                 extrn ??2@YAPAXI@Z:near ; CODE XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+6D9p
UNDEF:0000F314                                         ; NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+BA1p ...
UNDEF:0000F318                 extrn _IID_IArchiveExtractCallbackMessage:near
UNDEF:0000F318                                         ; DATA XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+AEo
UNDEF:0000F31C                 extrn _IID_IArchiveUpdateCallbackFile:near
UNDEF:0000F31C                                         ; DATA XREF: NArchive::N7z::Update(IInStream *,NArchive::N7z::CDbEx const *,CObjectVector<NArchive::N7z::CUpdateItem> const &,NArchive::N7z::COutArchive &,NArchive::N7z::CArchiveDatabaseOut &,ISequentialOutStream *,IArchiveUpdateCallback *,NArchive::N7z::CUpdateOptions const &,ICryptoGetTextPassword *)+7Eo
UNDEF:0000F320 ; void __stdcall SysFreeString(BSTR bstrString)
UNDEF:0000F320                 extrn __imp__SysFreeString@4:near
UNDEF:0000F320                                         ; CODE XREF: CMyComBSTR::~CMyComBSTR(void)+17p
UNDEF:0000F320                                         ; DATA XREF: CMyComBSTR::~CMyComBSTR(void)+17r
UNDEF:0000F324 ; __stdcall Handle_WaitObject(x)
UNDEF:0000F324                 extrn _Handle_WaitObject@4:near
UNDEF:0000F324                                         ; CODE XREF: NWindows::NSynchronization::CBaseEvent::Lock(void)+14p
UNDEF:0000F328 ; const type_info::`vftable'
UNDEF:0000F328                 extrn ??_7type_info@@6B@:near
UNDEF:0000F328                                         ; DATA XREF: .data:NCompress::CCopyCoder `RTTI Type Descriptor'o
UNDEF:0000F328                                         ; .data:ICompressCoder `RTTI Type Descriptor'o ...
UNDEF:0000F32C ; public: virtual long __stdcall NCompress::CCopyCoder::Code(struct ISequentialInStream *, struct ISequentialOutStream *, unsigned __int64 const *, unsigned __int64 const *, struct ICompressProgressInfo *)
UNDEF:0000F32C                 extrn ?Code@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z:near
UNDEF:0000F32C                                         ; DATA XREF: .rdata:00007AF0o
UNDEF:0000F330 ; public: virtual long __stdcall NCompress::CCopyCoder::SetInStream(struct ISequentialInStream *)
UNDEF:0000F330                 extrn ?SetInStream@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@@Z:near
UNDEF:0000F330                                         ; DATA XREF: .rdata:00007AD8o
UNDEF:0000F334 ; public: virtual long __stdcall NCompress::CCopyCoder::ReleaseInStream(void)
UNDEF:0000F334                 extrn ?ReleaseInStream@CCopyCoder@NCompress@@UAGJXZ:near
UNDEF:0000F334                                         ; DATA XREF: .rdata:00007ADCo
UNDEF:0000F338 ; public: virtual long __stdcall NCompress::CCopyCoder::Read(void *, unsigned int, unsigned int *)
UNDEF:0000F338                 extrn ?Read@CCopyCoder@NCompress@@UAGJPAXIPAI@Z:near
UNDEF:0000F338                                         ; DATA XREF: .rdata:00007AC4o
UNDEF:0000F33C ; public: virtual long __stdcall NCompress::CCopyCoder::GetInStreamProcessedSize(unsigned __int64 *)
UNDEF:0000F33C                 extrn ?GetInStreamProcessedSize@CCopyCoder@NCompress@@UAGJPA_K@Z:near
UNDEF:0000F33C                                         ; DATA XREF: .rdata:00007AB0o
UNDEF:0000F340                 extrn _IID_ICompressGetInStreamProcessedSize:near
UNDEF:0000F340                                         ; DATA XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *):loc_7F9Eo
UNDEF:0000F344                 extrn _IID_ISequentialInStream:near
UNDEF:0000F344                                         ; DATA XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *):loc_7F6Ao
UNDEF:0000F344                                         ; CLimitedSequentialInStream::QueryInterface(_GUID const &,void * *):loc_83BCo ...
UNDEF:0000F348                 extrn _IID_ICompressSetInStream:near
UNDEF:0000F348                                         ; DATA XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *):loc_7F36o
UNDEF:0000F34C                 extrn _IID_ICompressCoder:near
UNDEF:0000F34C                                         ; DATA XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *):loc_7F17o
UNDEF:0000F350 ; const IID IID_IUnknown
UNDEF:0000F350                 extrn _IID_IUnknown:near
UNDEF:0000F350                                         ; DATA XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+24o
UNDEF:0000F350                                         ; CLimitedSequentialInStream::QueryInterface(_GUID const &,void * *)+Co ...
UNDEF:0000F354 ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:0000F354                 extrn _memcmp:near      ; CODE XREF: IsEqualGUID(x,x)+Dp
UNDEF:0000F358                 extrn __purecall:near   ; DATA XREF: .rdata:const ICompressCoder::`vftable'o
UNDEF:0000F358                                         ; .rdata:00008118o ...
UNDEF:0000F35C ; _DWORD __thiscall NCompress::CCopyCoder::~CCopyCoder(NCompress::CCopyCoder *__hidden this)
UNDEF:0000F35C                 extrn ??1CCopyCoder@NCompress@@QAE@XZ:near
UNDEF:0000F35C                                         ; CODE XREF: NCompress::CCopyCoder::`scalar deleting destructor'(uint)+11p
UNDEF:0000F360 ; public: virtual long __stdcall CLimitedSequentialInStream::Read(void *, unsigned int, unsigned int *)
UNDEF:0000F360                 extrn ?Read@CLimitedSequentialInStream@@UAGJPAXIPAI@Z:near
UNDEF:0000F360                                         ; DATA XREF: .rdata:000082F4o
UNDEF:0000F364 ; int __stdcall CompareFileNames(const wchar_t *, const wchar_t *)
UNDEF:0000F364                 extrn ?CompareFileNames@@YGHPB_W0@Z:near
UNDEF:0000F364                                         ; CODE XREF: NArchive::N7z::CompareEmptyItems(uint const *,uint const *,void *)+C5p
UNDEF:0000F364                                         ; NArchive::N7z::CompareUpdateItems(NArchive::N7z::CRefItem const *,NArchive::N7z::CRefItem const *,void *)+A5p ...
UNDEF:0000F368 ; _DWORD __thiscall AString::AString(AString *__hidden this)
UNDEF:0000F368                 extrn ??0AString@@QAE@XZ:near
UNDEF:0000F368                                         ; CODE XREF: NArchive::N7z::CRefItem::CRefItem(uint,NArchive::N7z::CUpdateItem const &,bool)+E1p
UNDEF:0000F36C ; void __thiscall AString::Grow_1(AString *__hidden this)
UNDEF:0000F36C                 extrn ?Grow_1@AString@@AAEXXZ:near
UNDEF:0000F36C                                         ; CODE XREF: AString::operator+=(char)+2Fp
UNDEF:0000F370 ; void __thiscall CProps::AddProp32(CProps *__hidden this, unsigned __int32, unsigned int)
UNDEF:0000F370                 extrn ?AddProp32@CProps@@QAEXKI@Z:near
UNDEF:0000F370                                         ; CODE XREF: NArchive::N7z::MakeExeMethod(NArchive::N7z::CCompressionMethodMode &,NArchive::N7z::CFilterMode const &,bool)+157p
UNDEF:0000F370                                         ; NArchive::N7z::MakeExeMethod(NArchive::N7z::CCompressionMethodMode &,NArchive::N7z::CFilterMode const &,bool)+295p ...
UNDEF:0000F374 ; int __thiscall CMethodProps::FindProp(CMethodProps *__hidden this, unsigned __int32)
UNDEF:0000F374                 extrn ?FindProp@CMethodProps@@QBEHK@Z:near
UNDEF:0000F374                                         ; CODE XREF: CMethodProps::Are_Lzma_Model_Props_Defined(void)+13p
UNDEF:0000F374                                         ; CMethodProps::Are_Lzma_Model_Props_Defined(void)+25p ...
UNDEF:0000F378 ; _DWORD __thiscall NArchive::N7z::CDecoder::CDecoder(NArchive::N7z::CDecoder *__hidden this, bool)
UNDEF:0000F378                 extrn ??0CDecoder@N7z@NArchive@@QAE@_N@Z:near
UNDEF:0000F378                                         ; CODE XREF: NArchive::N7z::CThreadDecoder::CThreadDecoder(bool)+5Cp
UNDEF:0000F37C ; void __thiscall CVirtThread::WaitThreadFinish(CVirtThread *__hidden this)
UNDEF:0000F37C                 extrn ?WaitThreadFinish@CVirtThread@@QAEXXZ:near
UNDEF:0000F37C                                         ; CODE XREF: CVirtThread::~CVirtThread(void)+40p
UNDEF:0000F37C                                         ; NArchive::N7z::CThreadDecoder::~CThreadDecoder(void)+40p
UNDEF:0000F380 ; __stdcall HandlePtr_Close(x)
UNDEF:0000F380                 extrn _HandlePtr_Close@4:near
UNDEF:0000F380                                         ; CODE XREF: NWindows::CThread::Close(void)+12p
UNDEF:0000F380                                         ; NWindows::NSynchronization::CBaseEvent::Close(void)+12p
UNDEF:0000F384 ; public: __thiscall UString::UString(class UString const &)
UNDEF:0000F384                 extrn ??0UString@@QAE@ABV0@@Z:near
UNDEF:0000F384                                         ; CODE XREF: NArchive::N7z::CCompressionMethodMode::CCompressionMethodMode(NArchive::N7z::CCompressionMethodMode const &)+9Fp
UNDEF:0000F388                 extrn _IID_ICompressGetSubStreamSize:near
UNDEF:0000F388                                         ; DATA XREF: NArchive::N7z::CRepackInStreamWithSizes::QueryInterface(_GUID const &,void * *):loc_AA68o
UNDEF:0000F388                                         ; NArchive::N7z::CFolderInStream::QueryInterface(_GUID const &,void * *):loc_AE34o
UNDEF:0000F38C ; public: virtual long __stdcall NArchive::N7z::CFolderInStream::Read(void *, unsigned int, unsigned int *)
UNDEF:0000F38C                 extrn ?Read@CFolderInStream@N7z@NArchive@@UAGJPAXIPAI@Z:near
UNDEF:0000F38C                                         ; DATA XREF: .rdata:0000AD04o
UNDEF:0000F390 ; public: virtual long __stdcall NArchive::N7z::CFolderInStream::GetSubStreamSize(unsigned __int64, unsigned __int64 *)
UNDEF:0000F390                 extrn ?GetSubStreamSize@CFolderInStream@N7z@NArchive@@UAGJ_KPA_K@Z:near
UNDEF:0000F390                                         ; DATA XREF: .rdata:0000ACF0o
UNDEF:0000F394 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:0000F394                 extrn _memcpy:near      ; CODE XREF: CRecordVector<uint>::ReserveDown(void)+76p
UNDEF:0000F394                                         ; CRecordVector<unsigned __int64>::ReserveDown(void)+76p ...
UNDEF:0000F398 ; void __stdcall `eh vector destructor iterator'(void *, unsigned int, int, void (__thiscall *)(void *))
UNDEF:0000F398                 extrn ??_M@YGXPAXIHP6EX0@Z@Z:near
UNDEF:0000F398                                         ; CODE XREF: NArchive::N7z::CCoderInfo::`vector deleting destructor'(uint)+28p
UNDEF:0000F39C ; __int32 __thiscall NWindows::NCOM::CPropVariant::Clear(NWindows::NCOM::CPropVariant *__hidden this)
UNDEF:0000F39C                 extrn ?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ:near
UNDEF:0000F39C                                         ; CODE XREF: NWindows::NCOM::CPropVariant::~CPropVariant(void)+11p
UNDEF:0000F3A0 ; _DWORD __thiscall NWindows::NCOM::CPropVariant::CPropVariant(NWindows::NCOM::CPropVariant *__hidden this, const struct NWindows::NCOM::CPropVariant *)
UNDEF:0000F3A0                 extrn ??0CPropVariant@NCOM@NWindows@@QAE@ABV012@@Z:near
UNDEF:0000F3A0                                         ; CODE XREF: CProp::CProp(CProp const &)+31p
UNDEF:0000F3A4 ; void *__cdecl _memmove(void *Dst, const void *Src, size_t Size)
UNDEF:0000F3A4                 extrn __imp__memmove:near
UNDEF:0000F3A4                                         ; CODE XREF: CRecordVector<void *>::MoveItems(uint,uint)+36p
UNDEF:0000F3A4                                         ; DATA XREF: CRecordVector<void *>::MoveItems(uint,uint)+36r
UNDEF:0000F3A4
UNDEF:0000F3A4