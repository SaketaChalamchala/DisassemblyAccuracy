.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : FD3E3BE727F7508CBD57453A88F7CE53
.rdata:00000000 ; Input CRC32 : 8CE1E89F
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\ExtractCallbackConsole.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 _rdata          segment dword public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 $SG75384        db 'ERROR: ',0          ; DATA XREF: .data:_kErroro
.rdata:00000008 $SG75389        db 'Scan',0             ; DATA XREF: CExtractScanConsole::StartScanning(void)+1Do
.rdata:0000000D                 align 10h
.rdata:00000010 ; char _SG75414[]
.rdata:00000010 $SG75414        db 'bytes',0            ; DATA XREF: PrintSize_bytes_Smart(AString &,unsigned __int64)+1Ao
.rdata:00000016                 align 4
.rdata:00000018 ; char _SG75424[]
.rdata:00000018 $SG75424        dd offset loc_281E+2    ; DATA XREF: PrintSize_bytes_Smart(AString &,unsigned __int64)+96o
.rdata:0000001C $SG75431        db 'folder',0           ; DATA XREF: Print_DirItemsStat(AString &,CDirItemsStat const &)+47o
.rdata:00000023 unk_23          db    0                 ; DATA XREF: .rdata:`string'o
.rdata:00000024 $SG75432        db 'folders',0          ; DATA XREF: Print_DirItemsStat(AString &,CDirItemsStat const &):loc_90Co
.rdata:0000002C $SG75433        dd offset loc_202B+1    ; DATA XREF: Print_DirItemsStat(AString &,CDirItemsStat const &)+6Eo
.rdata:0000002C                                         ; .rdata:$SG75480o ...
.rdata:00000030 $SG75434        db 'file',0             ; DATA XREF: Print_DirItemsStat(AString &,CDirItemsStat const &)+93o
.rdata:00000035                 align 4
.rdata:00000038 $SG75435        db 'files',0            ; DATA XREF: Print_DirItemsStat(AString &,CDirItemsStat const &):loc_958o
.rdata:0000003E unk_3E          db    0                 ; DATA XREF: .rdata:$SG75621o
.rdata:0000003F                 db    0
.rdata:00000040 $SG75436        dd offset loc_202B+1    ; DATA XREF: Print_DirItemsStat(AString &,CDirItemsStat const &)+BBo
.rdata:00000040                                         ; .xdata$x:__catchsym$?CryptoGetTextPassword@CExtractCallbackConsole@@UAGJPAPA_W@Z$3o
.rdata:00000044 ; char _SG75438[]
.rdata:00000044 $SG75438        db 'alternate streams',0
.rdata:00000044                                         ; DATA XREF: Print_DirItemsStat(AString &,CDirItemsStat const &)+F8o
.rdata:00000056                 align 4
.rdata:00000058 $SG75439        dd offset loc_202B+1    ; DATA XREF: Print_DirItemsStat(AString &,CDirItemsStat const &)+111o
.rdata:0000005C $SG75478        dd offset $SG75438+10h  ; DATA XREF: .data:_kTestStringo
.rdata:0000005C                                         ; "s"
.rdata:00000060 $SG75480        dd offset $SG75433+1    ; DATA XREF: .data:_kExtractStringo
.rdata:00000064 $SG75482        dd offset $SG75433+2    ; DATA XREF: .data:_kSkipStringo
.rdata:00000068 $SG75484        db 'Can',27h,'t allocate required memory!',0
.rdata:00000068                                         ; DATA XREF: .data:_kMemoryExceptionMessageo
.rdata:00000088 $SG75486        db 'Extracting archive: ',0 ; DATA XREF: .data:_kExtractingo
.rdata:0000009D                 align 10h
.rdata:000000A0 $SG75488        db 'Testing archive: ',0 ; DATA XREF: .data:_kTestingo
.rdata:000000B2                 align 4
.rdata:000000B4 $SG75490        db 'Everything is Ok',0 ; DATA XREF: .data:_kEverythingIsOko
.rdata:000000C5                 align 4
.rdata:000000C8 $SG75492        db 'No files to process',0 ; DATA XREF: .data:_kNoFileso
.rdata:000000DC $SG75494        db 'Unsupported Method',0
.rdata:000000DC                                         ; DATA XREF: .data:_kUnsupportedMethodo
.rdata:000000EF                 align 10h
.rdata:000000F0 $SG75496        db 'CRC Failed',0       ; DATA XREF: .data:_kCrcFailedo
.rdata:000000FB                 align 4
.rdata:000000FC $SG75498        db 'CRC Failed in encrypted file. Wrong password?',0
.rdata:000000FC                                         ; DATA XREF: .data:_kCrcFailedEncryptedo
.rdata:0000012A                 align 4
.rdata:0000012C $SG75500        db 'Data Error',0       ; DATA XREF: .data:_kDataErroro
.rdata:00000137                 align 4
.rdata:00000138 $SG75502        db 'Data Error in encrypted file. Wrong password?',0
.rdata:00000138                                         ; DATA XREF: .data:_kDataErrorEncryptedo
.rdata:00000166                 align 4
.rdata:00000168 $SG75504        db 'Unavailable data',0 ; DATA XREF: .data:_kUnavailableDatao
.rdata:00000179                 align 4
.rdata:0000017C $SG75506        db 'Unexpected end of data',0
.rdata:0000017C                                         ; DATA XREF: .data:_kUnexpectedEndo
.rdata:00000193                 align 4
.rdata:00000194 $SG75508        db 'There are some data after the end of the payload data',0
.rdata:00000194                                         ; DATA XREF: .data:_kDataAfterEndo
.rdata:000001CA                 align 4
.rdata:000001CC $SG75510        db 'Is not archive',0   ; DATA XREF: .data:_kIsNotArco
.rdata:000001DB                 align 4
.rdata:000001DC $SG75512        db 'Headers Error',0    ; DATA XREF: .data:_kHeadersErroro
.rdata:000001EA                 align 4
.rdata:000001EC $SG75514        db 'Wrong password',0   ; DATA XREF: .data:_kWrongPasswordo
.rdata:000001FB                 align 4
.rdata:000001FC $SG75516        db 'Is not archive',0   ; DATA XREF: .rdata:_k_ErrorFlagsMessageso
.rdata:0000020B                 align 4
.rdata:0000020C $SG75517        db 'Headers Error',0    ; DATA XREF: .rdata:00000318o
.rdata:0000021A                 align 4
.rdata:0000021C $SG75518        db 'Headers Error in encrypted archive. Wrong password?',0
.rdata:0000021C                                         ; DATA XREF: .rdata:0000031Co
.rdata:00000250 $SG75519        db 'Unavailable start of archive',0
.rdata:00000250                                         ; DATA XREF: .rdata:00000320o
.rdata:0000026D                 align 10h
.rdata:00000270 $SG75520        db 'Unconfirmed start of archive',0
.rdata:00000270                                         ; DATA XREF: .rdata:00000324o
.rdata:0000028D                 align 10h
.rdata:00000290 $SG75521        db 'Unexpected end of archive',0
.rdata:00000290                                         ; DATA XREF: .rdata:00000328o
.rdata:000002AA                 align 4
.rdata:000002AC $SG75522        db 'There are data after the end of archive',0
.rdata:000002AC                                         ; DATA XREF: .rdata:0000032Co
.rdata:000002D4 $SG75523        db 'Unsupported method',0 ; DATA XREF: .rdata:00000330o
.rdata:000002E7                 align 4
.rdata:000002E8 $SG75524        db 'Unsupported feature',0 ; DATA XREF: .rdata:00000334o
.rdata:000002FC $SG75525        db 'Data Error',0       ; DATA XREF: .rdata:00000338o
.rdata:00000307                 align 4
.rdata:00000308 $SG75526        db 'CRC Error',0        ; DATA XREF: .rdata:0000033Co
.rdata:00000312                 align 4
.rdata:00000314 _k_ErrorFlagsMessages dd offset $SG75516
.rdata:00000314                                         ; DATA XREF: GetOpenArcErrorMessage(uint)+80r
.rdata:00000314                                         ; "Is not archive"
.rdata:00000318                 dd offset $SG75517      ; "Headers Error"
.rdata:0000031C                 dd offset $SG75518      ; "Headers Error in encrypted archive. Wro"...
.rdata:00000320                 dd offset $SG75519      ; "Unavailable start of archive"
.rdata:00000324                 dd offset $SG75520      ; "Unconfirmed start of archive"
.rdata:00000328                 dd offset $SG75521      ; "Unexpected end of archive"
.rdata:0000032C                 dd offset $SG75522      ; "There are data after the end of archive"
.rdata:00000330                 dd offset $SG75523      ; "Unsupported method"
.rdata:00000334                 dd offset $SG75524      ; "Unsupported feature"
.rdata:00000338                 dd offset $SG75525      ; "Data Error"
.rdata:0000033C                 dd offset $SG75526      ; "CRC Error"
.rdata:00000340 $SG75543        dd offset loc_201A+6    ; DATA XREF: .data:_kTabo
.rdata:00000344 ; char _SG75550[]
.rdata:00000344 $SG75550        db 'Path:     ',0       ; DATA XREF: PrintFileInfo(CStdOutStream *,wchar_t const *,_FILETIME const *,unsigned __int64 const *)+42o
.rdata:0000034F                 align 10h
.rdata:00000350 ; char _SG75553[]
.rdata:00000350 $SG75553        db 'Size:     ',0       ; DATA XREF: PrintFileInfo(CStdOutStream *,wchar_t const *,_FILETIME const *,unsigned __int64 const *)+A1o
.rdata:0000035B                 align 4
.rdata:0000035C ; char _SG75559[]
.rdata:0000035C $SG75559        db 'Modified: ',0       ; DATA XREF: PrintFileInfo(CStdOutStream *,wchar_t const *,_FILETIME const *,unsigned __int64 const *)+11Ao
.rdata:00000367                 align 4
.rdata:00000368 ; char _SG75575[]
.rdata:00000368 $SG75575        db 'Would you like to replace the existing file:',0Ah,0
.rdata:00000368                                         ; DATA XREF: CExtractCallbackConsole::AskOverwrite(wchar_t const *,_FILETIME const *,unsigned __int64 const *,wchar_t const *,_FILETIME const *,unsigned __int64 const *,int *)+5Bo
.rdata:00000396                 align 4
.rdata:00000398 ; char _SG75576[]
.rdata:00000398 $SG75576        db 'with the file from archive:',0Ah,0
.rdata:00000398                                         ; DATA XREF: CExtractCallbackConsole::AskOverwrite(wchar_t const *,_FILETIME const *,unsigned __int64 const *,wchar_t const *,_FILETIME const *,unsigned __int64 const *,int *)+95o
.rdata:000003B5                 align 4
.rdata:000003B8 $SG75614        db '???',0              ; DATA XREF: CExtractCallbackConsole::PrepareOperation(wchar_t const *,int,int,unsigned __int64 const *):loc_1089o
.rdata:000003BC ; char _SG75620[]
.rdata:000003BC $SG75620        db ' <',0               ; DATA XREF: CExtractCallbackConsole::PrepareOperation(wchar_t const *,int,int,unsigned __int64 const *)+17Fo
.rdata:000003BF                 align 10h
.rdata:000003C0 ; char _SG75621[]
.rdata:000003C0 $SG75621        dd offset unk_3E        ; DATA XREF: CExtractCallbackConsole::PrepareOperation(wchar_t const *,int,int,unsigned __int64 const *)+170o
.rdata:000003C4 $SG75661        db 'Error #',0          ; DATA XREF: SetExtractErrorMessage(int,int,AString &)+111o
.rdata:000003CC ; char _SG75674[]
.rdata:000003CC $SG75674        db ' : ',0              ; DATA XREF: CExtractCallbackConsole::SetOperationResult(int,int)+132o
.rdata:000003D0 $SG75706        db 'Open',0             ; DATA XREF: CExtractCallbackConsole::BeforeOpen(wchar_t const *,bool)+F9o
.rdata:000003D5                 align 4
.rdata:000003D8 ; char _SG75744[]
.rdata:000003D8 $SG75744        db ' as [',0            ; DATA XREF: Add_Messsage_Pre_ArcType(UString &,char const *,wchar_t const *)+17o
.rdata:000003DE                 align 10h
.rdata:000003E0 ; char _SG75745[]
.rdata:000003E0 $SG75745        db '] archive',0        ; DATA XREF: Add_Messsage_Pre_ArcType(UString &,char const *,wchar_t const *)+30o
.rdata:000003EA                 align 4
.rdata:000003EC $SG75753:                               ; DATA XREF: Print_ErrorFormatIndex_Warning(CStdOutStream *,CCodecs const *,CArc const &)+45o
.rdata:000003EC                 unicode 0, <WARNING:>
.rdata:000003EC                 dw 0Ah, 0
.rdata:00000400 ; char _SG75755[]
.rdata:00000400 $SG75755        db 'The archive is open with offset',0
.rdata:00000400                                         ; DATA XREF: Print_ErrorFormatIndex_Warning(CStdOutStream *,CCodecs const *,CArc const &)+81o
.rdata:00000420 ; char _SG75757[]
.rdata:00000420 $SG75757        db 'Can not open the file',0
.rdata:00000420                                         ; DATA XREF: Print_ErrorFormatIndex_Warning(CStdOutStream *,CCodecs const *,CArc const &)+A0o
.rdata:00000436                 align 4
.rdata:00000438 ; char _SG75758[]
.rdata:00000438 $SG75758        db 'The file is open',0 ; DATA XREF: Print_ErrorFormatIndex_Warning(CStdOutStream *,CCodecs const *,CArc const &)+C1o
.rdata:00000449                 align 4
.rdata:0000044C ; char _SG75780[]
.rdata:0000044C $SG75780        db 'ERRORS:',0          ; DATA XREF: CExtractCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+149o
.rdata:00000454 ; char _SG75783[]
.rdata:00000454 $SG75783        db 'ERRORS:',0          ; DATA XREF: CExtractCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+1BFo
.rdata:0000045C ; char _SG75792[]
.rdata:0000045C $SG75792        db 'WARNINGS:',0        ; DATA XREF: CExtractCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+2CAo
.rdata:00000466                 align 4
.rdata:00000468 ; char _SG75795[]
.rdata:00000468 $SG75795        db 'WARNINGS:',0        ; DATA XREF: CExtractCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+340o
.rdata:00000472                 align 4
.rdata:00000474 ; char _SG75817[]
.rdata:00000474 $SG75817        db 'Can',27h,'t allocate required memory',0
.rdata:00000474                                         ; DATA XREF: CExtractCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+533o
.rdata:00000493                 align 4
.rdata:00000494 ; char _SG75841[]
.rdata:00000494 $SG75841        db 'Sub items Errors: ',0
.rdata:00000494                                         ; DATA XREF: CExtractCallbackConsole::ExtractResult(long)+1D4o
.rdata:000004A7                 align 4
.rdata:000004A7 _rdata          ends
.rdata:000004A7
.data:000004A8 ; ===========================================================================
.data:000004A8
.data:000004A8 ; Segment type: Pure data
.data:000004A8 ; Segment permissions: Read/Write
.data:000004A8 _data           segment dword public 'DATA' use32
.data:000004A8                 assume cs:_data
.data:000004A8                 ;org 4A8h
.data:000004A8 ; char *kError
.data:000004A8 _kError         dd offset $SG75384      ; DATA XREF: CExtractScanConsole::ScanError(UString const &,ulong)+92r
.data:000004A8                                         ; CExtractCallbackConsole::MessageError(wchar_t const *)+B3r ...
.data:000004A8                                         ; "ERROR: "
.data:000004AC _kTestString    dd offset $SG75478      ; DATA XREF: CExtractCallbackConsole::PrepareOperation(wchar_t const *,int,int,unsigned __int64 const *):loc_106Dr
.data:000004B0 _kExtractString dd offset $SG75480      ; DATA XREF: CExtractCallbackConsole::PrepareOperation(wchar_t const *,int,int,unsigned __int64 const *):loc_1062r
.data:000004B4 _kSkipString    dd offset $SG75482      ; DATA XREF: CExtractCallbackConsole::PrepareOperation(wchar_t const *,int,int,unsigned __int64 const *):loc_1077r
.data:000004B8 ; char *kMemoryExceptionMessage
.data:000004B8 _kMemoryExceptionMessage dd offset $SG75484
.data:000004B8                                         ; DATA XREF: CExtractCallbackConsole::ExtractResult(long)+2ACr
.data:000004B8                                         ; "Can't allocate required memory!"
.data:000004BC _kExtracting    dd offset $SG75486      ; DATA XREF: CExtractCallbackConsole::BeforeOpen(wchar_t const *,bool):loc_19B5r
.data:000004BC                                         ; "Extracting archive: "
.data:000004C0 _kTesting       dd offset $SG75488      ; DATA XREF: CExtractCallbackConsole::BeforeOpen(wchar_t const *,bool)+9Fr
.data:000004C0                                         ; "Testing archive: "
.data:000004C4 ; char *kEverythingIsOk
.data:000004C4 _kEverythingIsOk dd offset $SG75490     ; DATA XREF: CExtractCallbackConsole::ExtractResult(long)+140r
.data:000004C4                                         ; "Everything is Ok"
.data:000004C8 ; char *kNoFiles
.data:000004C8 _kNoFiles       dd offset $SG75492      ; DATA XREF: CExtractCallbackConsole::ThereAreNoFiles(void)+27r
.data:000004C8                                         ; "No files to process"
.data:000004CC _kUnsupportedMethod dd offset $SG75494  ; DATA XREF: SetExtractErrorMessage(int,int,AString &):$LN11_0r
.data:000004CC                                         ; "Unsupported Method"
.data:000004D0 _kCrcFailed     dd offset $SG75496      ; DATA XREF: SetExtractErrorMessage(int,int,AString &):loc_144Cr
.data:000004D0                                         ; "CRC Failed"
.data:000004D4 _kCrcFailedEncrypted dd offset $SG75498 ; DATA XREF: SetExtractErrorMessage(int,int,AString &)+65r
.data:000004D4                                         ; "CRC Failed in encrypted file. Wrong pas"...
.data:000004D8 _kDataError     dd offset $SG75500      ; DATA XREF: SetExtractErrorMessage(int,int,AString &):loc_146Er
.data:000004D8                                         ; "Data Error"
.data:000004DC _kDataErrorEncrypted dd offset $SG75502 ; DATA XREF: SetExtractErrorMessage(int,int,AString &)+87r
.data:000004DC                                         ; "Data Error in encrypted file. Wrong pas"...
.data:000004E0 _kUnavailableData dd offset $SG75504    ; DATA XREF: SetExtractErrorMessage(int,int,AString &):$LN8_2r
.data:000004E0                                         ; "Unavailable data"
.data:000004E4 _kUnexpectedEnd dd offset $SG75506      ; DATA XREF: SetExtractErrorMessage(int,int,AString &):$LN7_3r
.data:000004E4                                         ; "Unexpected end of data"
.data:000004E8 _kDataAfterEnd  dd offset $SG75508      ; DATA XREF: SetExtractErrorMessage(int,int,AString &):$LN6_3r
.data:000004E8                                         ; "There are some data after the end of th"...
.data:000004EC _kIsNotArc      dd offset $SG75510      ; DATA XREF: SetExtractErrorMessage(int,int,AString &):$LN5_5r
.data:000004EC                                         ; "Is not archive"
.data:000004F0 _kHeadersError  dd offset $SG75512      ; DATA XREF: SetExtractErrorMessage(int,int,AString &):$LN4_2r
.data:000004F0                                         ; "Headers Error"
.data:000004F4 _kWrongPassword dd offset $SG75514      ; DATA XREF: SetExtractErrorMessage(int,int,AString &):$LN3_0r
.data:000004F4                                         ; "Wrong password"
.data:000004F8 ; char *kTab
.data:000004F8 _kTab           dd offset $SG75543      ; DATA XREF: PrintFileInfo(CStdOutStream *,wchar_t const *,_FILETIME const *,unsigned __int64 const *)+47r
.data:000004F8                                         ; PrintFileInfo(CStdOutStream *,wchar_t const *,_FILETIME const *,unsigned __int64 const *)+A6r ...
.data:000004F8 _data           ends
.data:000004F8
.text:000004FC ; ===========================================================================
.text:000004FC
.text:000004FC ; Segment type: Pure code
.text:000004FC ; Segment permissions: Read/Execute
.text:000004FC _text           segment para public 'CODE' use32
.text:000004FC                 assume cs:_text
.text:000004FC                 ;org 4FCh
.text:000004FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000004FC
.text:000004FC ; =============== S U B R O U T I N E =======================================
.text:000004FC
.text:000004FC ; Attributes: bp-based frame
.text:000004FC
.text:000004FC ; void __thiscall CExtractScanConsole::StartScanning(CExtractScanConsole *__hidden this)
.text:000004FC                 public ?StartScanning@CExtractScanConsole@@QAEXXZ
.text:000004FC ?StartScanning@CExtractScanConsole@@QAEXXZ proc near
.text:000004FC
.text:000004FC var_4           = dword ptr -4
.text:000004FC
.text:000004FC                 push    ebp
.text:000004FD                 mov     ebp, esp
.text:000004FF                 push    ecx
.text:00000500                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000507                 mov     [ebp+var_4], ecx
.text:0000050A                 mov     ecx, [ebp+var_4] ; this
.text:0000050D                 call    ?NeedPercents@CExtractScanConsole@@ABE_NXZ ; CExtractScanConsole::NeedPercents(void)
.text:00000512                 movzx   eax, al
.text:00000515                 test    eax, eax
.text:00000517                 jz      short loc_529
.text:00000519                 push    offset $SG75389 ; "Scan"
.text:0000051E                 mov     ecx, [ebp+var_4]
.text:00000521                 add     ecx, 28h ; '('
.text:00000524                 call    ??4AString@@QAEAAV0@PBD@Z ; AString::operator=(char const *)
.text:00000529
.text:00000529 loc_529:                                ; CODE XREF: CExtractScanConsole::StartScanning(void)+1Bj
.text:00000529                 add     esp, 4
.text:0000052C                 cmp     ebp, esp
.text:0000052E                 call    __RTC_CheckEsp
.text:00000533                 mov     esp, ebp
.text:00000535                 pop     ebp
.text:00000536                 retn
.text:00000536 ?StartScanning@CExtractScanConsole@@QAEXXZ endp
.text:00000536
.text:00000536 ; ---------------------------------------------------------------------------
.text:00000537                 db 5 dup(0CCh)
.text:0000053C
.text:0000053C ; =============== S U B R O U T I N E =======================================
.text:0000053C
.text:0000053C ; Attributes: bp-based frame
.text:0000053C
.text:0000053C ; __int32 __thiscall CExtractScanConsole::ScanProgress(CExtractScanConsole *this, const struct CDirItemsStat *, const struct UString *, bool)
.text:0000053C                 public ?ScanProgress@CExtractScanConsole@@UAEJABUCDirItemsStat@@ABVUString@@_N@Z
.text:0000053C ?ScanProgress@CExtractScanConsole@@UAEJABUCDirItemsStat@@ABVUString@@_N@Z proc near
.text:0000053C
.text:0000053C var_4           = dword ptr -4
.text:0000053C arg_0           = dword ptr  8
.text:0000053C arg_4           = dword ptr  0Ch
.text:0000053C
.text:0000053C                 push    ebp
.text:0000053D                 mov     ebp, esp
.text:0000053F                 push    ecx
.text:00000540                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000547                 mov     [ebp+var_4], ecx
.text:0000054A                 mov     ecx, [ebp+var_4] ; this
.text:0000054D                 call    ?NeedPercents@CExtractScanConsole@@ABE_NXZ ; CExtractScanConsole::NeedPercents(void)
.text:00000552                 movzx   eax, al
.text:00000555                 test    eax, eax
.text:00000557                 jz      short loc_59E
.text:00000559                 mov     ecx, [ebp+arg_0]
.text:0000055C                 mov     edx, [ebp+arg_0]
.text:0000055F                 mov     eax, [ecx]
.text:00000561                 add     eax, [edx+8]
.text:00000564                 mov     ecx, [ecx+4]
.text:00000567                 adc     ecx, [edx+0Ch]
.text:0000056A                 mov     edx, [ebp+var_4]
.text:0000056D                 mov     [edx+20h], eax
.text:00000570                 mov     [edx+24h], ecx
.text:00000573                 mov     ecx, [ebp+arg_0] ; this
.text:00000576                 call    ?GetTotalBytes@CDirItemsStat@@QBE_KXZ ; CDirItemsStat::GetTotalBytes(void)
.text:0000057B                 mov     ecx, [ebp+var_4]
.text:0000057E                 mov     [ecx+10h], eax
.text:00000581                 mov     [ecx+14h], edx
.text:00000584                 mov     edx, [ebp+arg_4]
.text:00000587                 push    edx
.text:00000588                 mov     ecx, [ebp+var_4]
.text:0000058B                 add     ecx, 34h ; '4'
.text:0000058E                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:00000593                 mov     ecx, [ebp+var_4]
.text:00000596                 add     ecx, 10h        ; this
.text:00000599                 call    ?Print@CPercentPrinter@@QAEXXZ ; CPercentPrinter::Print(void)
.text:0000059E
.text:0000059E loc_59E:                                ; CODE XREF: CExtractScanConsole::ScanProgress(CDirItemsStat const &,UString const &,bool)+1Bj
.text:0000059E                 call    ?CheckBreak2@@YGJXZ ; CheckBreak2(void)
.text:000005A3                 add     esp, 4
.text:000005A6                 cmp     ebp, esp
.text:000005A8                 call    __RTC_CheckEsp
.text:000005AD                 mov     esp, ebp
.text:000005AF                 pop     ebp
.text:000005B0                 retn    0Ch
.text:000005B0 ?ScanProgress@CExtractScanConsole@@UAEJABUCDirItemsStat@@ABVUString@@_N@Z endp
.text:000005B0
.text:000005B0 ; ---------------------------------------------------------------------------
.text:000005B3                 db 9 dup(0CCh)
.text:000005BC
.text:000005BC ; =============== S U B R O U T I N E =======================================
.text:000005BC
.text:000005BC ; Attributes: bp-based frame
.text:000005BC
.text:000005BC ; long __stdcall CheckBreak2(void)
.text:000005BC ?CheckBreak2@@YGJXZ proc near           ; CODE XREF: CExtractScanConsole::ScanProgress(CDirItemsStat const &,UString const &,bool):loc_59Ep
.text:000005BC                                         ; CExtractCallbackConsole::SetTotal(unsigned __int64):loc_B3Cp ...
.text:000005BC                 push    ebp             ; this
.text:000005BD                 mov     ebp, esp
.text:000005BF                 call    ?TestBreakSignal@NConsoleClose@@YG_NXZ ; NConsoleClose::TestBreakSignal(void)
.text:000005C4                 movzx   eax, al
.text:000005C7                 neg     eax
.text:000005C9                 sbb     eax, eax
.text:000005CB                 and     eax, 80004004h
.text:000005D0                 cmp     ebp, esp
.text:000005D2                 call    __RTC_CheckEsp
.text:000005D7                 pop     ebp
.text:000005D8                 retn
.text:000005D8 ?CheckBreak2@@YGJXZ endp
.text:000005D8
.text:000005D8 ; ---------------------------------------------------------------------------
.text:000005D9                 align 4
.text:000005DC
.text:000005DC ; =============== S U B R O U T I N E =======================================
.text:000005DC
.text:000005DC ; Attributes: bp-based frame
.text:000005DC
.text:000005DC ; __int32 __thiscall CExtractScanConsole::ScanError(CExtractScanConsole *this, const struct UString *, unsigned __int32)
.text:000005DC                 public ?ScanError@CExtractScanConsole@@UAEJABVUString@@K@Z
.text:000005DC ?ScanError@CExtractScanConsole@@UAEJABVUString@@K@Z proc near
.text:000005DC
.text:000005DC var_24          = dword ptr -24h
.text:000005DC var_20          = dword ptr -20h
.text:000005DC var_1C          = dword ptr -1Ch
.text:000005DC var_18          = dword ptr -18h
.text:000005DC var_14          = dword ptr -14h
.text:000005DC var_10          = dword ptr -10h
.text:000005DC var_C           = dword ptr -0Ch
.text:000005DC var_4           = dword ptr -4
.text:000005DC arg_0           = dword ptr  8
.text:000005DC arg_4           = dword ptr  0Ch
.text:000005DC
.text:000005DC                 push    ebp
.text:000005DD                 mov     ebp, esp
.text:000005DF                 push    0FFFFFFFFh
.text:000005E1                 push    offset __ehhandler$?ScanError@CExtractScanConsole@@UAEJABVUString@@K@Z
.text:000005E6                 mov     eax, large fs:0
.text:000005EC                 push    eax
.text:000005ED                 sub     esp, 18h
.text:000005F0                 mov     eax, 0CCCCCCCCh
.text:000005F5                 mov     [ebp+var_24], eax
.text:000005F8                 mov     [ebp+var_20], eax
.text:000005FB                 mov     [ebp+var_1C], eax
.text:000005FE                 mov     [ebp+var_18], eax
.text:00000601                 mov     [ebp+var_14], eax
.text:00000604                 mov     [ebp+var_10], eax
.text:00000607                 mov     eax, dword ptr ds:___security_cookie
.text:0000060C                 xor     eax, ebp
.text:0000060E                 push    eax
.text:0000060F                 lea     eax, [ebp+var_C]
.text:00000612                 mov     large fs:0, eax
.text:00000618                 mov     [ebp+var_10], ecx
.text:0000061B                 mov     ecx, [ebp+var_10] ; this
.text:0000061E                 call    ?ClosePercentsAndFlush@CExtractScanConsole@@AAEXXZ ; CExtractScanConsole::ClosePercentsAndFlush(void)
.text:00000623                 mov     eax, [ebp+var_10]
.text:00000626                 cmp     dword ptr [eax+8], 0
.text:0000062A                 jz      loc_6C9
.text:00000630                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00000635                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:0000063A                 mov     ecx, [ebp+arg_0]
.text:0000063D                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00000642                 push    eax
.text:00000643                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00000648                 mov     ecx, [ebp+arg_4]
.text:0000064B                 push    ecx
.text:0000064C                 lea     edx, [ebp+var_1C]
.text:0000064F                 push    edx
.text:00000650                 call    ?MyFormatMessage@NError@NWindows@@YG?AVUString@@K@Z ; NWindows::NError::MyFormatMessage(ulong)
.text:00000655                 mov     [ebp+var_20], eax
.text:00000658                 mov     eax, [ebp+var_20]
.text:0000065B                 mov     [ebp+var_24], eax
.text:0000065E                 mov     [ebp+var_4], 0
.text:00000665                 mov     ecx, [ebp+var_24]
.text:00000668                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:0000066D                 push    eax
.text:0000066E                 mov     ecx, ds:_kError
.text:00000674                 push    ecx             ; Str
.text:00000675                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:0000067A                 mov     edx, [ebp+var_10]
.text:0000067D                 mov     ecx, [edx+8]
.text:00000680                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00000685                 mov     ecx, eax
.text:00000687                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:0000068C                 mov     ecx, eax
.text:0000068E                 call    ??6CStdOutStream@@QAEAAV0@PB_W@Z ; CStdOutStream::operator<<(wchar_t const *)
.text:00000693                 mov     ecx, eax
.text:00000695                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:0000069A                 mov     ecx, eax
.text:0000069C                 call    ??6CStdOutStream@@QAEAAV0@PB_W@Z ; CStdOutStream::operator<<(wchar_t const *)
.text:000006A1                 mov     ecx, eax
.text:000006A3                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:000006A8                 mov     ecx, eax
.text:000006AA                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:000006AF                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000006B6                 lea     ecx, [ebp+var_1C] ; this
.text:000006B9                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000006BE                 mov     eax, [ebp+var_10]
.text:000006C1                 mov     ecx, [eax+8]    ; this
.text:000006C4                 call    ?Flush@CStdOutStream@@QAE_NXZ ; CStdOutStream::Flush(void)
.text:000006C9
.text:000006C9 loc_6C9:                                ; CODE XREF: CExtractScanConsole::ScanError(UString const &,ulong)+4Ej
.text:000006C9                 mov     ecx, [ebp+arg_4]
.text:000006CC                 push    ecx
.text:000006CD                 call    _HRESULT_FROM_WIN32@4 ; HRESULT_FROM_WIN32(x)
.text:000006D2                 mov     ecx, [ebp+var_C]
.text:000006D5                 mov     large fs:0, ecx
.text:000006DC                 pop     ecx
.text:000006DD                 add     esp, 24h
.text:000006E0                 cmp     ebp, esp
.text:000006E2                 call    __RTC_CheckEsp
.text:000006E7                 mov     esp, ebp
.text:000006E9                 pop     ebp
.text:000006EA                 retn    8
.text:000006EA ?ScanError@CExtractScanConsole@@UAEJABVUString@@K@Z endp
.text:000006EA
.text:000006EA ; ---------------------------------------------------------------------------
.text:000006ED                 db 0Fh dup(0CCh)
.text:000006FC
.text:000006FC ; =============== S U B R O U T I N E =======================================
.text:000006FC
.text:000006FC ; Attributes: bp-based frame
.text:000006FC
.text:000006FC ; void __stdcall Print_UInt64_and_String(struct AString *, unsigned __int64, const char *)
.text:000006FC                 public ?Print_UInt64_and_String@@YGXAAVAString@@_KPBD@Z
.text:000006FC ?Print_UInt64_and_String@@YGXAAVAString@@_KPBD@Z proc near
.text:000006FC                                         ; CODE XREF: PrintSize_bytes_Smart(AString &,unsigned __int64)+2Bp
.text:000006FC                                         ; PrintSize_bytes_Smart(AString &,unsigned __int64)+D0p ...
.text:000006FC
.text:000006FC var_2C          = byte ptr -2Ch
.text:000006FC var_28          = byte ptr -28h
.text:000006FC var_4           = dword ptr -4
.text:000006FC arg_0           = dword ptr  8
.text:000006FC arg_4           = qword ptr  0Ch
.text:000006FC arg_C           = dword ptr  14h
.text:000006FC
.text:000006FC                 push    ebp
.text:000006FD                 mov     ebp, esp
.text:000006FF                 sub     esp, 2Ch
.text:00000702                 push    edi
.text:00000703                 lea     edi, [ebp+var_2C]
.text:00000706                 mov     ecx, 0Bh
.text:0000070B                 mov     eax, 0CCCCCCCCh
.text:00000710                 rep stosd
.text:00000712                 mov     eax, dword ptr ds:___security_cookie
.text:00000717                 xor     eax, ebp
.text:00000719                 mov     [ebp+var_4], eax
.text:0000071C                 lea     eax, [ebp+var_28]
.text:0000071F                 push    eax             ; char *
.text:00000720                 mov     ecx, dword ptr [ebp+arg_4+4]
.text:00000723                 push    ecx
.text:00000724                 mov     edx, dword ptr [ebp+arg_4]
.text:00000727                 push    edx             ; unsigned __int64
.text:00000728                 call    ?ConvertUInt64ToString@@YGX_KPAD@Z ; ConvertUInt64ToString(unsigned __int64,char *)
.text:0000072D                 lea     eax, [ebp+var_28]
.text:00000730                 push    eax
.text:00000731                 mov     ecx, [ebp+arg_0]
.text:00000734                 call    ??YAString@@QAEAAV0@PBD@Z ; AString::operator+=(char const *)
.text:00000739                 mov     ecx, [ebp+arg_0] ; this
.text:0000073C                 call    ?Add_Space@AString@@QAEXXZ ; AString::Add_Space(void)
.text:00000741                 mov     ecx, [ebp+arg_C]
.text:00000744                 push    ecx
.text:00000745                 mov     ecx, [ebp+arg_0]
.text:00000748                 call    ??YAString@@QAEAAV0@PBD@Z ; AString::operator+=(char const *)
.text:0000074D                 push    edx
.text:0000074E                 mov     ecx, ebp
.text:00000750                 push    eax
.text:00000751                 lea     edx, $LN5
.text:00000757                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000075C                 pop     eax
.text:0000075D                 pop     edx
.text:0000075E                 pop     edi
.text:0000075F                 mov     ecx, [ebp+var_4]
.text:00000762                 xor     ecx, ebp
.text:00000764                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000769                 add     esp, 2Ch
.text:0000076C                 cmp     ebp, esp
.text:0000076E                 call    __RTC_CheckEsp
.text:00000773                 mov     esp, ebp
.text:00000775                 pop     ebp
.text:00000776                 retn    10h
.text:00000776 ?Print_UInt64_and_String@@YGXAAVAString@@_KPBD@Z endp
.text:00000776
.text:00000776 ; ---------------------------------------------------------------------------
.text:00000779                 align 4
.text:0000077C $LN5            dd 1                    ; DATA XREF: Print_UInt64_and_String(AString &,unsigned __int64,char const *)+55o
.text:00000780                 dd offset $LN4
.text:00000784 $LN4            dd 0FFFFFFD8h, 20h      ; DATA XREF: .text:00000780o
.text:0000078C                 dd offset $LN3          ; "temp"
.text:00000790 $LN3            db 'temp',0             ; DATA XREF: .text:0000078Co
.text:00000795                 db 7 dup(0CCh)
.text:0000079C
.text:0000079C ; =============== S U B R O U T I N E =======================================
.text:0000079C
.text:0000079C ; Attributes: bp-based frame
.text:0000079C
.text:0000079C ; void __stdcall PrintSize_bytes_Smart(struct AString *, unsigned __int64)
.text:0000079C                 public ?PrintSize_bytes_Smart@@YGXAAVAString@@_K@Z
.text:0000079C ?PrintSize_bytes_Smart@@YGXAAVAString@@_K@Z proc near
.text:0000079C                                         ; CODE XREF: Print_DirItemsStat(AString &,CDirItemsStat const &)+D7p
.text:0000079C                                         ; Print_DirItemsStat(AString &,CDirItemsStat const &)+12Dp ...
.text:0000079C
.text:0000079C var_14          = dword ptr -14h
.text:0000079C var_10          = dword ptr -10h
.text:0000079C var_C           = dword ptr -0Ch
.text:0000079C var_8           = dword ptr -8
.text:0000079C var_4           = dword ptr -4
.text:0000079C arg_0           = dword ptr  8
.text:0000079C arg_4           = qword ptr  0Ch
.text:0000079C
.text:0000079C                 push    ebp
.text:0000079D                 mov     ebp, esp
.text:0000079F                 sub     esp, 14h
.text:000007A2                 mov     eax, 0CCCCCCCCh
.text:000007A7                 mov     [ebp+var_14], eax
.text:000007AA                 mov     [ebp+var_10], eax
.text:000007AD                 mov     [ebp+var_C], eax
.text:000007B0                 mov     [ebp+var_8], eax
.text:000007B3                 mov     [ebp+var_4], eax
.text:000007B6                 push    offset $SG75414 ; "bytes"
.text:000007BB                 mov     eax, dword ptr [ebp+arg_4+4]
.text:000007BE                 push    eax
.text:000007BF                 mov     ecx, dword ptr [ebp+arg_4]
.text:000007C2                 push    ecx             ; unsigned __int64
.text:000007C3                 mov     edx, [ebp+arg_0]
.text:000007C6                 push    edx             ; struct AString *
.text:000007C7                 call    ?Print_UInt64_and_String@@YGXAAVAString@@_KPBD@Z ; Print_UInt64_and_String(AString &,unsigned __int64,char const *)
.text:000007CC                 mov     eax, dword ptr [ebp+arg_4]
.text:000007CF                 or      eax, dword ptr [ebp+arg_4+4]
.text:000007D2                 jnz     short loc_7D9
.text:000007D4                 jmp     loc_87B
.text:000007D9 ; ---------------------------------------------------------------------------
.text:000007D9
.text:000007D9 loc_7D9:                                ; CODE XREF: PrintSize_bytes_Smart(AString &,unsigned __int64)+36j
.text:000007D9                 mov     [ebp+var_4], 0Ah
.text:000007E0                 mov     byte ptr [ebp+var_8+3], 4Bh ; 'K'
.text:000007E4                 mov     byte ptr [ebp+var_10], 4Bh ; 'K'
.text:000007E8                 mov     byte ptr [ebp+var_10+1], 69h ; 'i'
.text:000007EC                 mov     byte ptr [ebp+var_10+2], 42h ; 'B'
.text:000007F0                 mov     byte ptr [ebp+var_10+3], 0
.text:000007F4                 cmp     dword ptr [ebp+arg_4+4], 2
.text:000007F8                 jb      short loc_812
.text:000007FA                 ja      short loc_805
.text:000007FC                 cmp     dword ptr [ebp+arg_4], 80000000h
.text:00000803                 jb      short loc_812
.text:00000805
.text:00000805 loc_805:                                ; CODE XREF: PrintSize_bytes_Smart(AString &,unsigned __int64)+5Ej
.text:00000805                 mov     [ebp+var_4], 1Eh
.text:0000080C                 mov     byte ptr [ebp+var_8+3], 47h ; 'G'
.text:00000810                 jmp     short loc_82C
.text:00000812 ; ---------------------------------------------------------------------------
.text:00000812
.text:00000812 loc_812:                                ; CODE XREF: PrintSize_bytes_Smart(AString &,unsigned __int64)+5Cj
.text:00000812                                         ; PrintSize_bytes_Smart(AString &,unsigned __int64)+67j
.text:00000812                 cmp     dword ptr [ebp+arg_4+4], 0
.text:00000816                 ja      short loc_821
.text:00000818                 cmp     dword ptr [ebp+arg_4], 0A00000h
.text:0000081F                 jb      short loc_82C
.text:00000821
.text:00000821 loc_821:                                ; CODE XREF: PrintSize_bytes_Smart(AString &,unsigned __int64)+7Aj
.text:00000821                 mov     [ebp+var_4], 14h
.text:00000828                 mov     byte ptr [ebp+var_8+3], 4Dh ; 'M'
.text:0000082C
.text:0000082C loc_82C:                                ; CODE XREF: PrintSize_bytes_Smart(AString &,unsigned __int64)+74j
.text:0000082C                                         ; PrintSize_bytes_Smart(AString &,unsigned __int64)+83j
.text:0000082C                 mov     cl, byte ptr [ebp+var_8+3]
.text:0000082F                 mov     byte ptr [ebp+var_10], cl
.text:00000832                 push    offset $SG75424 ; char *
.text:00000837                 mov     ecx, [ebp+arg_0]
.text:0000083A                 call    ??YAString@@QAEAAV0@PBD@Z ; AString::operator+=(char const *)
.text:0000083F                 lea     edx, [ebp+var_10]
.text:00000842                 push    edx
.text:00000843                 mov     eax, 1
.text:00000848                 xor     edx, edx
.text:0000084A                 mov     ecx, [ebp+var_4]
.text:0000084D                 call    __allshl
.text:00000852                 add     eax, dword ptr [ebp+arg_4]
.text:00000855                 adc     edx, dword ptr [ebp+arg_4+4]
.text:00000858                 sub     eax, 1
.text:0000085B                 sbb     edx, 0
.text:0000085E                 mov     ecx, [ebp+var_4]
.text:00000861                 call    __aullshr
.text:00000866                 push    edx
.text:00000867                 push    eax             ; unsigned __int64
.text:00000868                 mov     eax, [ebp+arg_0]
.text:0000086B                 push    eax             ; struct AString *
.text:0000086C                 call    ?Print_UInt64_and_String@@YGXAAVAString@@_KPBD@Z ; Print_UInt64_and_String(AString &,unsigned __int64,char const *)
.text:00000871                 push    29h ; ')'
.text:00000873                 mov     ecx, [ebp+arg_0]
.text:00000876                 call    ??YAString@@QAEAAV0@D@Z ; AString::operator+=(char)
.text:0000087B
.text:0000087B loc_87B:                                ; CODE XREF: PrintSize_bytes_Smart(AString &,unsigned __int64)+38j
.text:0000087B                 push    edx
.text:0000087C                 mov     ecx, ebp
.text:0000087E                 push    eax
.text:0000087F                 lea     edx, $LN11
.text:00000885                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000088A                 pop     eax
.text:0000088B                 pop     edx
.text:0000088C                 add     esp, 14h
.text:0000088F                 cmp     ebp, esp
.text:00000891                 call    __RTC_CheckEsp
.text:00000896                 mov     esp, ebp
.text:00000898                 pop     ebp
.text:00000899                 retn    0Ch
.text:00000899 ?PrintSize_bytes_Smart@@YGXAAVAString@@_K@Z endp
.text:00000899
.text:00000899 ; ---------------------------------------------------------------------------
.text:0000089C $LN11           dd 1                    ; DATA XREF: PrintSize_bytes_Smart(AString &,unsigned __int64)+E3o
.text:000008A0                 dd offset $LN10
.text:000008A4 $LN10           dd 0FFFFFFF0h, 4        ; DATA XREF: .text:000008A0o
.text:000008AC                 dd offset $LN9          ; "temp"
.text:000008B0 $LN9            db 'temp',0             ; DATA XREF: .text:000008ACo
.text:000008B5                 db 7 dup(0CCh)
.text:000008BC
.text:000008BC ; =============== S U B R O U T I N E =======================================
.text:000008BC
.text:000008BC ; Attributes: bp-based frame
.text:000008BC
.text:000008BC ; void __stdcall Print_DirItemsStat(struct AString *, const struct CDirItemsStat *)
.text:000008BC                 public ?Print_DirItemsStat@@YGXAAVAString@@ABUCDirItemsStat@@@Z
.text:000008BC ?Print_DirItemsStat@@YGXAAVAString@@ABUCDirItemsStat@@@Z proc near
.text:000008BC                                         ; CODE XREF: CExtractScanConsole::PrintStat(CDirItemsStat const &)+5Fp
.text:000008BC
.text:000008BC var_18          = dword ptr -18h
.text:000008BC var_14          = dword ptr -14h
.text:000008BC var_10          = dword ptr -10h
.text:000008BC var_C           = dword ptr -0Ch
.text:000008BC var_8           = dword ptr -8
.text:000008BC var_4           = dword ptr -4
.text:000008BC arg_0           = dword ptr  8
.text:000008BC arg_4           = dword ptr  0Ch
.text:000008BC
.text:000008BC                 push    ebp
.text:000008BD                 mov     ebp, esp
.text:000008BF                 sub     esp, 18h
.text:000008C2                 mov     eax, 0CCCCCCCCh
.text:000008C7                 mov     [ebp+var_18], eax
.text:000008CA                 mov     [ebp+var_14], eax
.text:000008CD                 mov     [ebp+var_10], eax
.text:000008D0                 mov     [ebp+var_C], eax
.text:000008D3                 mov     [ebp+var_8], eax
.text:000008D6                 mov     [ebp+var_4], eax
.text:000008D9                 mov     eax, [ebp+arg_4]
.text:000008DC                 mov     [ebp+var_4], eax
.text:000008DF                 mov     ecx, [ebp+var_4]
.text:000008E2                 mov     edx, [ebp+var_4]
.text:000008E5                 mov     eax, [ecx]
.text:000008E7                 or      eax, [edx+4]
.text:000008EA                 jz      short loc_937
.text:000008EC                 mov     ecx, [ebp+arg_4]
.text:000008EF                 mov     [ebp+var_8], ecx
.text:000008F2                 mov     edx, [ebp+var_8]
.text:000008F5                 cmp     dword ptr [edx], 1
.text:000008F8                 jnz     short loc_90C
.text:000008FA                 mov     eax, [ebp+var_8]
.text:000008FD                 cmp     dword ptr [eax+4], 0
.text:00000901                 jnz     short loc_90C
.text:00000903                 mov     [ebp+var_C], offset $SG75431 ; "folder"
.text:0000090A                 jmp     short loc_913
.text:0000090C ; ---------------------------------------------------------------------------
.text:0000090C
.text:0000090C loc_90C:                                ; CODE XREF: Print_DirItemsStat(AString &,CDirItemsStat const &)+3Cj
.text:0000090C                                         ; Print_DirItemsStat(AString &,CDirItemsStat const &)+45j
.text:0000090C                 mov     [ebp+var_C], offset $SG75432 ; "folders"
.text:00000913
.text:00000913 loc_913:                                ; CODE XREF: Print_DirItemsStat(AString &,CDirItemsStat const &)+4Ej
.text:00000913                 mov     ecx, [ebp+var_C]
.text:00000916                 push    ecx             ; char *
.text:00000917                 mov     edx, [ebp+arg_4]
.text:0000091A                 mov     eax, [edx+4]
.text:0000091D                 push    eax
.text:0000091E                 mov     ecx, [edx]
.text:00000920                 push    ecx             ; unsigned __int64
.text:00000921                 mov     edx, [ebp+arg_0]
.text:00000924                 push    edx             ; struct AString *
.text:00000925                 call    ?Print_UInt64_and_String@@YGXAAVAString@@_KPBD@Z ; Print_UInt64_and_String(AString &,unsigned __int64,char const *)
.text:0000092A                 push    offset $SG75433
.text:0000092F                 mov     ecx, [ebp+arg_0]
.text:00000932                 call    ??YAString@@QAEAAV0@PBD@Z ; AString::operator+=(char const *)
.text:00000937
.text:00000937 loc_937:                                ; CODE XREF: Print_DirItemsStat(AString &,CDirItemsStat const &)+2Ej
.text:00000937                 mov     eax, [ebp+arg_4]
.text:0000093A                 mov     [ebp+var_10], eax
.text:0000093D                 mov     ecx, [ebp+var_10]
.text:00000940                 cmp     dword ptr [ecx+8], 1
.text:00000944                 jnz     short loc_958
.text:00000946                 mov     edx, [ebp+var_10]
.text:00000949                 cmp     dword ptr [edx+0Ch], 0
.text:0000094D                 jnz     short loc_958
.text:0000094F                 mov     [ebp+var_14], offset $SG75434 ; "file"
.text:00000956                 jmp     short loc_95F
.text:00000958 ; ---------------------------------------------------------------------------
.text:00000958
.text:00000958 loc_958:                                ; CODE XREF: Print_DirItemsStat(AString &,CDirItemsStat const &)+88j
.text:00000958                                         ; Print_DirItemsStat(AString &,CDirItemsStat const &)+91j
.text:00000958                 mov     [ebp+var_14], offset $SG75435 ; "files"
.text:0000095F
.text:0000095F loc_95F:                                ; CODE XREF: Print_DirItemsStat(AString &,CDirItemsStat const &)+9Aj
.text:0000095F                 mov     eax, [ebp+var_14]
.text:00000962                 push    eax             ; char *
.text:00000963                 mov     ecx, [ebp+arg_4]
.text:00000966                 mov     edx, [ecx+0Ch]
.text:00000969                 push    edx
.text:0000096A                 mov     eax, [ecx+8]
.text:0000096D                 push    eax             ; unsigned __int64
.text:0000096E                 mov     ecx, [ebp+arg_0]
.text:00000971                 push    ecx             ; struct AString *
.text:00000972                 call    ?Print_UInt64_and_String@@YGXAAVAString@@_KPBD@Z ; Print_UInt64_and_String(AString &,unsigned __int64,char const *)
.text:00000977                 push    offset $SG75436
.text:0000097C                 mov     ecx, [ebp+arg_0]
.text:0000097F                 call    ??YAString@@QAEAAV0@PBD@Z ; AString::operator+=(char const *)
.text:00000984                 mov     edx, [ebp+arg_4]
.text:00000987                 mov     eax, [edx+1Ch]
.text:0000098A                 push    eax
.text:0000098B                 mov     ecx, [edx+18h]
.text:0000098E                 push    ecx             ; unsigned __int64
.text:0000098F                 mov     edx, [ebp+arg_0]
.text:00000992                 push    edx             ; struct AString *
.text:00000993                 call    ?PrintSize_bytes_Smart@@YGXAAVAString@@_K@Z ; PrintSize_bytes_Smart(AString &,unsigned __int64)
.text:00000998                 mov     eax, [ebp+arg_4]
.text:0000099B                 mov     [ebp+var_18], eax
.text:0000099E                 mov     ecx, [ebp+var_18]
.text:000009A1                 mov     edx, [ebp+var_18]
.text:000009A4                 mov     eax, [ecx+10h]
.text:000009A7                 or      eax, [edx+14h]
.text:000009AA                 jz      short loc_9EE
.text:000009AC                 mov     ecx, [ebp+arg_0] ; this
.text:000009AF                 call    ?Add_LF@AString@@QAEXXZ ; AString::Add_LF(void)
.text:000009B4                 push    offset $SG75438 ; "alternate streams"
.text:000009B9                 mov     ecx, [ebp+arg_4]
.text:000009BC                 mov     edx, [ecx+14h]
.text:000009BF                 push    edx
.text:000009C0                 mov     eax, [ecx+10h]
.text:000009C3                 push    eax             ; unsigned __int64
.text:000009C4                 mov     ecx, [ebp+arg_0]
.text:000009C7                 push    ecx             ; struct AString *
.text:000009C8                 call    ?Print_UInt64_and_String@@YGXAAVAString@@_KPBD@Z ; Print_UInt64_and_String(AString &,unsigned __int64,char const *)
.text:000009CD                 push    offset $SG75439
.text:000009D2                 mov     ecx, [ebp+arg_0]
.text:000009D5                 call    ??YAString@@QAEAAV0@PBD@Z ; AString::operator+=(char const *)
.text:000009DA                 mov     edx, [ebp+arg_4]
.text:000009DD                 mov     eax, [edx+24h]
.text:000009E0                 push    eax
.text:000009E1                 mov     ecx, [edx+20h]
.text:000009E4                 push    ecx             ; unsigned __int64
.text:000009E5                 mov     edx, [ebp+arg_0]
.text:000009E8                 push    edx             ; struct AString *
.text:000009E9                 call    ?PrintSize_bytes_Smart@@YGXAAVAString@@_K@Z ; PrintSize_bytes_Smart(AString &,unsigned __int64)
.text:000009EE
.text:000009EE loc_9EE:                                ; CODE XREF: Print_DirItemsStat(AString &,CDirItemsStat const &)+EEj
.text:000009EE                 add     esp, 18h
.text:000009F1                 cmp     ebp, esp
.text:000009F3                 call    __RTC_CheckEsp
.text:000009F8                 mov     esp, ebp
.text:000009FA                 pop     ebp
.text:000009FB                 retn    8
.text:000009FB ?Print_DirItemsStat@@YGXAAVAString@@ABUCDirItemsStat@@@Z endp
.text:000009FB
.text:000009FB ; ---------------------------------------------------------------------------
.text:000009FE                 db 0Eh dup(0CCh)
.text:00000A0C
.text:00000A0C ; =============== S U B R O U T I N E =======================================
.text:00000A0C
.text:00000A0C ; Attributes: bp-based frame
.text:00000A0C
.text:00000A0C ; void __thiscall CExtractScanConsole::PrintStat(CExtractScanConsole *this, const struct CDirItemsStat *)
.text:00000A0C                 public ?PrintStat@CExtractScanConsole@@QAEXABUCDirItemsStat@@@Z
.text:00000A0C ?PrintStat@CExtractScanConsole@@QAEXABUCDirItemsStat@@@Z proc near
.text:00000A0C
.text:00000A0C var_24          = dword ptr -24h
.text:00000A0C var_20          = dword ptr -20h
.text:00000A0C var_1C          = dword ptr -1Ch
.text:00000A0C var_18          = dword ptr -18h
.text:00000A0C var_14          = dword ptr -14h
.text:00000A0C var_10          = dword ptr -10h
.text:00000A0C var_C           = dword ptr -0Ch
.text:00000A0C var_4           = dword ptr -4
.text:00000A0C arg_0           = dword ptr  8
.text:00000A0C
.text:00000A0C                 push    ebp
.text:00000A0D                 mov     ebp, esp
.text:00000A0F                 push    0FFFFFFFFh
.text:00000A11                 push    offset __ehhandler$?PrintStat@CExtractScanConsole@@QAEXABUCDirItemsStat@@@Z
.text:00000A16                 mov     eax, large fs:0
.text:00000A1C                 push    eax
.text:00000A1D                 sub     esp, 18h
.text:00000A20                 mov     eax, 0CCCCCCCCh
.text:00000A25                 mov     [ebp+var_24], eax
.text:00000A28                 mov     [ebp+var_20], eax
.text:00000A2B                 mov     [ebp+var_1C], eax
.text:00000A2E                 mov     [ebp+var_18], eax
.text:00000A31                 mov     [ebp+var_14], eax
.text:00000A34                 mov     [ebp+var_10], eax
.text:00000A37                 mov     eax, dword ptr ds:___security_cookie
.text:00000A3C                 xor     eax, ebp
.text:00000A3E                 push    eax
.text:00000A3F                 lea     eax, [ebp+var_C]
.text:00000A42                 mov     large fs:0, eax
.text:00000A48                 mov     [ebp+var_10], ecx
.text:00000A4B                 mov     eax, [ebp+var_10]
.text:00000A4E                 cmp     dword ptr [eax+4], 0
.text:00000A52                 jz      short loc_A9F
.text:00000A54                 lea     ecx, [ebp+var_20]
.text:00000A57                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:00000A5C                 mov     [ebp+var_4], 0
.text:00000A63                 mov     ecx, [ebp+arg_0]
.text:00000A66                 push    ecx             ; struct CDirItemsStat *
.text:00000A67                 lea     edx, [ebp+var_20]
.text:00000A6A                 push    edx             ; struct AString *
.text:00000A6B                 call    ?Print_DirItemsStat@@YGXAAVAString@@ABUCDirItemsStat@@@Z ; Print_DirItemsStat(AString &,CDirItemsStat const &)
.text:00000A70                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00000A75                 lea     ecx, [ebp+var_20]
.text:00000A78                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:00000A7D                 push    eax             ; Str
.text:00000A7E                 mov     eax, [ebp+var_10]
.text:00000A81                 mov     ecx, [eax+4]
.text:00000A84                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00000A89                 mov     ecx, eax
.text:00000A8B                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00000A90                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000A97                 lea     ecx, [ebp+var_20] ; this
.text:00000A9A                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00000A9F
.text:00000A9F loc_A9F:                                ; CODE XREF: CExtractScanConsole::PrintStat(CDirItemsStat const &)+46j
.text:00000A9F                 push    edx
.text:00000AA0                 mov     ecx, ebp
.text:00000AA2                 push    eax
.text:00000AA3                 lea     edx, $LN8
.text:00000AA9                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000AAE                 pop     eax
.text:00000AAF                 pop     edx
.text:00000AB0                 mov     ecx, [ebp+var_C]
.text:00000AB3                 mov     large fs:0, ecx
.text:00000ABA                 pop     ecx
.text:00000ABB                 add     esp, 24h
.text:00000ABE                 cmp     ebp, esp
.text:00000AC0                 call    __RTC_CheckEsp
.text:00000AC5                 mov     esp, ebp
.text:00000AC7                 pop     ebp
.text:00000AC8                 retn    4
.text:00000AC8 ?PrintStat@CExtractScanConsole@@QAEXABUCDirItemsStat@@@Z endp
.text:00000AC8
.text:00000AC8 ; ---------------------------------------------------------------------------
.text:00000ACB                 align 4
.text:00000ACC $LN8            dd 1                    ; DATA XREF: CExtractScanConsole::PrintStat(CDirItemsStat const &)+97o
.text:00000AD0                 dd offset $LN7
.text:00000AD4 $LN7            dd 0FFFFFFE0h, 0Ch      ; DATA XREF: .text:00000AD0o
.text:00000ADC                 dd offset $LN5_0
.text:00000AE0 $LN5_0          dd 0CCCC0073h, 2 dup(0CCCCCCCCh) ; DATA XREF: .text:00000ADCo
.text:00000AEC
.text:00000AEC ; =============== S U B R O U T I N E =======================================
.text:00000AEC
.text:00000AEC ; Attributes: bp-based frame
.text:00000AEC
.text:00000AEC ; __int32 __stdcall CExtractCallbackConsole::SetTotal(CExtractCallbackConsole *this, unsigned __int64)
.text:00000AEC                 public ?SetTotal@CExtractCallbackConsole@@UAGJ_K@Z
.text:00000AEC ?SetTotal@CExtractCallbackConsole@@UAGJ_K@Z proc near
.text:00000AEC
.text:00000AEC var_10          = dword ptr -10h
.text:00000AEC var_C           = dword ptr -0Ch
.text:00000AEC var_8           = dword ptr -8
.text:00000AEC var_4           = dword ptr -4
.text:00000AEC this            = dword ptr  8
.text:00000AEC arg_4           = qword ptr  0Ch
.text:00000AEC
.text:00000AEC                 push    ebp
.text:00000AED                 mov     ebp, esp
.text:00000AEF                 sub     esp, 10h
.text:00000AF2                 mov     eax, 0CCCCCCCCh
.text:00000AF7                 mov     [ebp+var_10], eax
.text:00000AFA                 mov     [ebp+var_C], eax
.text:00000AFD                 mov     [ebp+var_8], eax
.text:00000B00                 mov     [ebp+var_4], eax
.text:00000B03                 push    offset _g_CriticalSection ; struct NWindows::NSynchronization::CCriticalSection *
.text:00000B08                 lea     ecx, [ebp+var_8] ; this
.text:00000B0B                 call    ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z ; NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock(NWindows::NSynchronization::CCriticalSection &)
.text:00000B10                 mov     ecx, [ebp+this]
.text:00000B13                 add     ecx, 10h        ; this
.text:00000B16                 call    ?NeedPercents@COpenCallbackConsole@@IBE_NXZ ; COpenCallbackConsole::NeedPercents(void)
.text:00000B1B                 movzx   eax, al
.text:00000B1E                 test    eax, eax
.text:00000B20                 jz      short loc_B3C
.text:00000B22                 mov     ecx, [ebp+this]
.text:00000B25                 mov     edx, dword ptr [ebp+arg_4]
.text:00000B28                 mov     [ecx+20h], edx
.text:00000B2B                 mov     eax, dword ptr [ebp+arg_4+4]
.text:00000B2E                 mov     [ecx+24h], eax
.text:00000B31                 mov     ecx, [ebp+this]
.text:00000B34                 add     ecx, 18h        ; this
.text:00000B37                 call    ?Print@CPercentPrinter@@QAEXXZ ; CPercentPrinter::Print(void)
.text:00000B3C
.text:00000B3C loc_B3C:                                ; CODE XREF: CExtractCallbackConsole::SetTotal(unsigned __int64)+34j
.text:00000B3C                 call    ?CheckBreak2@@YGJXZ ; CheckBreak2(void)
.text:00000B41                 mov     [ebp+var_10], eax
.text:00000B44                 lea     ecx, [ebp+var_8] ; this
.text:00000B47                 call    ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)
.text:00000B4C                 mov     eax, [ebp+var_10]
.text:00000B4F                 push    edx
.text:00000B50                 mov     ecx, ebp
.text:00000B52                 push    eax
.text:00000B53                 lea     edx, $LN6
.text:00000B59                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000B5E                 pop     eax
.text:00000B5F                 pop     edx
.text:00000B60                 add     esp, 10h
.text:00000B63                 cmp     ebp, esp
.text:00000B65                 call    __RTC_CheckEsp
.text:00000B6A                 mov     esp, ebp
.text:00000B6C                 pop     ebp
.text:00000B6D                 retn    0Ch
.text:00000B6D ?SetTotal@CExtractCallbackConsole@@UAGJ_K@Z endp
.text:00000B6D
.text:00000B6D ; ---------------------------------------------------------------------------
.text:00000B70 $LN6            dd 1                    ; DATA XREF: CExtractCallbackConsole::SetTotal(unsigned __int64)+67o
.text:00000B74                 dd offset $LN5_1
.text:00000B78 $LN5_1          dd 0FFFFFFF8h, 4        ; DATA XREF: .text:00000B74o
.text:00000B80                 dd offset $LN4_0        ; "lock"
.text:00000B84 $LN4_0          db 'lock',0             ; DATA XREF: .text:00000B80o
.text:00000B89                 align 4
.text:00000B8C
.text:00000B8C ; =============== S U B R O U T I N E =======================================
.text:00000B8C
.text:00000B8C ; Attributes: bp-based frame
.text:00000B8C
.text:00000B8C ; __int32 __stdcall CExtractCallbackConsole::SetCompleted(CExtractCallbackConsole *this, const unsigned __int64 *)
.text:00000B8C                 public ?SetCompleted@CExtractCallbackConsole@@UAGJPB_K@Z
.text:00000B8C ?SetCompleted@CExtractCallbackConsole@@UAGJPB_K@Z proc near
.text:00000B8C
.text:00000B8C var_10          = dword ptr -10h
.text:00000B8C var_C           = dword ptr -0Ch
.text:00000B8C var_8           = dword ptr -8
.text:00000B8C var_4           = dword ptr -4
.text:00000B8C this            = dword ptr  8
.text:00000B8C arg_4           = dword ptr  0Ch
.text:00000B8C
.text:00000B8C                 push    ebp
.text:00000B8D                 mov     ebp, esp
.text:00000B8F                 sub     esp, 10h
.text:00000B92                 mov     eax, 0CCCCCCCCh
.text:00000B97                 mov     [ebp+var_10], eax
.text:00000B9A                 mov     [ebp+var_C], eax
.text:00000B9D                 mov     [ebp+var_8], eax
.text:00000BA0                 mov     [ebp+var_4], eax
.text:00000BA3                 push    offset _g_CriticalSection ; struct NWindows::NSynchronization::CCriticalSection *
.text:00000BA8                 lea     ecx, [ebp+var_8] ; this
.text:00000BAB                 call    ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z ; NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock(NWindows::NSynchronization::CCriticalSection &)
.text:00000BB0                 mov     ecx, [ebp+this]
.text:00000BB3                 add     ecx, 10h        ; this
.text:00000BB6                 call    ?NeedPercents@COpenCallbackConsole@@IBE_NXZ ; COpenCallbackConsole::NeedPercents(void)
.text:00000BBB                 movzx   eax, al
.text:00000BBE                 test    eax, eax
.text:00000BC0                 jz      short loc_BE4
.text:00000BC2                 cmp     [ebp+arg_4], 0
.text:00000BC6                 jz      short loc_BD9
.text:00000BC8                 mov     ecx, [ebp+this]
.text:00000BCB                 mov     edx, [ebp+arg_4]
.text:00000BCE                 mov     eax, [edx]
.text:00000BD0                 mov     [ecx+18h], eax
.text:00000BD3                 mov     edx, [edx+4]
.text:00000BD6                 mov     [ecx+1Ch], edx
.text:00000BD9
.text:00000BD9 loc_BD9:                                ; CODE XREF: CExtractCallbackConsole::SetCompleted(unsigned __int64 const *)+3Aj
.text:00000BD9                 mov     ecx, [ebp+this]
.text:00000BDC                 add     ecx, 18h        ; this
.text:00000BDF                 call    ?Print@CPercentPrinter@@QAEXXZ ; CPercentPrinter::Print(void)
.text:00000BE4
.text:00000BE4 loc_BE4:                                ; CODE XREF: CExtractCallbackConsole::SetCompleted(unsigned __int64 const *)+34j
.text:00000BE4                 call    ?CheckBreak2@@YGJXZ ; CheckBreak2(void)
.text:00000BE9                 mov     [ebp+var_10], eax
.text:00000BEC                 lea     ecx, [ebp+var_8] ; this
.text:00000BEF                 call    ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)
.text:00000BF4                 mov     eax, [ebp+var_10]
.text:00000BF7                 push    edx
.text:00000BF8                 mov     ecx, ebp
.text:00000BFA                 push    eax
.text:00000BFB                 lea     edx, $LN7_0
.text:00000C01                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000C06                 pop     eax
.text:00000C07                 pop     edx
.text:00000C08                 add     esp, 10h
.text:00000C0B                 cmp     ebp, esp
.text:00000C0D                 call    __RTC_CheckEsp
.text:00000C12                 mov     esp, ebp
.text:00000C14                 pop     ebp
.text:00000C15                 retn    8
.text:00000C15 ?SetCompleted@CExtractCallbackConsole@@UAGJPB_K@Z endp
.text:00000C15
.text:00000C15 ; ---------------------------------------------------------------------------
.text:00000C18 $LN7_0          dd 1                    ; DATA XREF: CExtractCallbackConsole::SetCompleted(unsigned __int64 const *)+6Fo
.text:00000C1C                 dd offset $LN6_0
.text:00000C20 $LN6_0          dd 0FFFFFFF8h, 4        ; DATA XREF: .text:00000C1Co
.text:00000C28                 dd offset $LN5_2        ; "lock"
.text:00000C2C $LN5_2          db 'lock',0             ; DATA XREF: .text:00000C28o
.text:00000C31                 db 0Bh dup(0CCh)
.text:00000C3C
.text:00000C3C ; =============== S U B R O U T I N E =======================================
.text:00000C3C
.text:00000C3C ; Attributes: bp-based frame
.text:00000C3C
.text:00000C3C ; __int32 __stdcall CExtractCallbackConsole::AskOverwrite(CExtractCallbackConsole *this, const wchar_t *, FILETIME *lpFileTime, const unsigned __int64 *, const wchar_t *, FILETIME *, const unsigned __int64 *, int *)
.text:00000C3C                 public ?AskOverwrite@CExtractCallbackConsole@@UAGJPB_WPBU_FILETIME@@PB_K012PAH@Z
.text:00000C3C ?AskOverwrite@CExtractCallbackConsole@@UAGJPB_WPBU_FILETIME@@PB_K012PAH@Z proc near
.text:00000C3C
.text:00000C3C var_28          = dword ptr -28h
.text:00000C3C var_24          = dword ptr -24h
.text:00000C3C var_20          = dword ptr -20h
.text:00000C3C var_1C          = dword ptr -1Ch
.text:00000C3C var_18          = dword ptr -18h
.text:00000C3C var_14          = dword ptr -14h
.text:00000C3C var_10          = dword ptr -10h
.text:00000C3C var_8           = byte ptr -8
.text:00000C3C this            = dword ptr  8
.text:00000C3C arg_4           = dword ptr  0Ch
.text:00000C3C lpFileTime      = dword ptr  10h
.text:00000C3C arg_C           = dword ptr  14h
.text:00000C3C arg_10          = dword ptr  18h
.text:00000C3C arg_14          = dword ptr  1Ch
.text:00000C3C arg_18          = dword ptr  20h
.text:00000C3C arg_1C          = dword ptr  24h
.text:00000C3C
.text:00000C3C                 push    ebp
.text:00000C3D                 mov     ebp, esp
.text:00000C3F                 sub     esp, 28h
.text:00000C42                 push    edi
.text:00000C43                 lea     edi, [ebp+var_28]
.text:00000C46                 mov     ecx, 0Ah
.text:00000C4B                 mov     eax, 0CCCCCCCCh
.text:00000C50                 rep stosd
.text:00000C52                 push    offset _g_CriticalSection ; struct NWindows::NSynchronization::CCriticalSection *
.text:00000C57                 lea     ecx, [ebp+var_8] ; this
.text:00000C5A                 call    ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z ; NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock(NWindows::NSynchronization::CCriticalSection &)
.text:00000C5F                 call    ?CheckBreak2@@YGJXZ ; CheckBreak2(void)
.text:00000C64                 mov     [ebp+var_10], eax
.text:00000C67                 cmp     [ebp+var_10], 0
.text:00000C6B                 jz      short loc_C83
.text:00000C6D                 mov     eax, [ebp+var_10]
.text:00000C70                 mov     [ebp+var_18], eax
.text:00000C73                 lea     ecx, [ebp+var_8] ; this
.text:00000C76                 call    ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)
.text:00000C7B                 mov     eax, [ebp+var_18]
.text:00000C7E                 jmp     loc_DD7
.text:00000C83 ; ---------------------------------------------------------------------------
.text:00000C83
.text:00000C83 loc_C83:                                ; CODE XREF: CExtractCallbackConsole::AskOverwrite(wchar_t const *,_FILETIME const *,unsigned __int64 const *,wchar_t const *,_FILETIME const *,unsigned __int64 const *,int *)+2Fj
.text:00000C83                 mov     ecx, [ebp+this] ; this
.text:00000C86                 call    ?ClosePercentsAndFlush@CExtractCallbackConsole@@AAEXXZ ; CExtractCallbackConsole::ClosePercentsAndFlush(void)
.text:00000C8B                 mov     ecx, [ebp+this]
.text:00000C8E                 cmp     dword ptr [ecx+0C8h], 0
.text:00000C95                 jz      short loc_CFF
.text:00000C97                 push    offset $SG75575 ; "Would you like to replace the existing "...
.text:00000C9C                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00000CA1                 mov     edx, [ebp+this]
.text:00000CA4                 mov     ecx, [edx+0C8h]
.text:00000CAA                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00000CAF                 mov     ecx, eax
.text:00000CB1                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00000CB6                 mov     eax, [ebp+arg_C]
.text:00000CB9                 push    eax             ; int
.text:00000CBA                 mov     ecx, [ebp+lpFileTime]
.text:00000CBD                 push    ecx             ; lpFileTime
.text:00000CBE                 mov     edx, [ebp+arg_4]
.text:00000CC1                 push    edx             ; int
.text:00000CC2                 mov     eax, [ebp+this]
.text:00000CC5                 mov     ecx, [eax+0C8h]
.text:00000CCB                 push    ecx             ; int
.text:00000CCC                 call    ?PrintFileInfo@@YGXPAVCStdOutStream@@PB_WPBU_FILETIME@@PB_K@Z ; PrintFileInfo(CStdOutStream *,wchar_t const *,_FILETIME const *,unsigned __int64 const *)
.text:00000CD1                 push    offset $SG75576 ; "with the file from archive:\n"
.text:00000CD6                 mov     edx, [ebp+this]
.text:00000CD9                 mov     ecx, [edx+0C8h]
.text:00000CDF                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00000CE4                 mov     eax, [ebp+arg_18]
.text:00000CE7                 push    eax             ; int
.text:00000CE8                 mov     ecx, [ebp+arg_14]
.text:00000CEB                 push    ecx             ; lpFileTime
.text:00000CEC                 mov     edx, [ebp+arg_10]
.text:00000CEF                 push    edx             ; int
.text:00000CF0                 mov     eax, [ebp+this]
.text:00000CF3                 mov     ecx, [eax+0C8h]
.text:00000CF9                 push    ecx             ; int
.text:00000CFA                 call    ?PrintFileInfo@@YGXPAVCStdOutStream@@PB_WPBU_FILETIME@@PB_K@Z ; PrintFileInfo(CStdOutStream *,wchar_t const *,_FILETIME const *,unsigned __int64 const *)
.text:00000CFF
.text:00000CFF loc_CFF:                                ; CODE XREF: CExtractCallbackConsole::AskOverwrite(wchar_t const *,_FILETIME const *,unsigned __int64 const *,wchar_t const *,_FILETIME const *,unsigned __int64 const *,int *)+59j
.text:00000CFF                 mov     edx, [ebp+this]
.text:00000D02                 mov     eax, [edx+0C8h]
.text:00000D08                 push    eax
.text:00000D09                 call    ?ScanUserYesNoAllQuit@@YG?AW4EEnum@NUserAnswerMode@@PAVCStdOutStream@@@Z ; ScanUserYesNoAllQuit(CStdOutStream *)
.text:00000D0E                 mov     [ebp+var_14], eax
.text:00000D11                 mov     ecx, [ebp+var_14]
.text:00000D14                 mov     [ebp+var_28], ecx
.text:00000D17                 cmp     [ebp+var_28], 5 ; switch 6 cases
.text:00000D1B                 ja      short loc_D75   ; jumptable 00000D20 default case
.text:00000D1D                 mov     edx, [ebp+var_28]
.text:00000D20                 jmp     ds:$LN19[edx*4] ; switch jump
.text:00000D27 ; ---------------------------------------------------------------------------
.text:00000D27
.text:00000D27 $LN9_0:                                 ; CODE XREF: CExtractCallbackConsole::AskOverwrite(wchar_t const *,_FILETIME const *,unsigned __int64 const *,wchar_t const *,_FILETIME const *,unsigned __int64 const *,int *)+E4j
.text:00000D27                                         ; DATA XREF: .text:$LN19o
.text:00000D27                 mov     [ebp+var_1C], 80004004h ; jumptable 00000D20 case 5
.text:00000D2E                 lea     ecx, [ebp+var_8] ; this
.text:00000D31                 call    ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)
.text:00000D36                 mov     eax, [ebp+var_1C]
.text:00000D39                 jmp     loc_DD7
.text:00000D3E ; ---------------------------------------------------------------------------
.text:00000D3E
.text:00000D3E $LN8_0:                                 ; CODE XREF: CExtractCallbackConsole::AskOverwrite(wchar_t const *,_FILETIME const *,unsigned __int64 const *,wchar_t const *,_FILETIME const *,unsigned __int64 const *,int *)+E4j
.text:00000D3E                                         ; DATA XREF: .text:$LN19o
.text:00000D3E                 mov     eax, [ebp+arg_1C] ; jumptable 00000D20 case 1
.text:00000D41                 mov     dword ptr [eax], 2
.text:00000D47                 jmp     short loc_D89
.text:00000D49 ; ---------------------------------------------------------------------------
.text:00000D49
.text:00000D49 $LN7_1:                                 ; CODE XREF: CExtractCallbackConsole::AskOverwrite(wchar_t const *,_FILETIME const *,unsigned __int64 const *,wchar_t const *,_FILETIME const *,unsigned __int64 const *,int *)+E4j
.text:00000D49                                         ; DATA XREF: .text:$LN19o
.text:00000D49                 mov     ecx, [ebp+arg_1C] ; jumptable 00000D20 case 3
.text:00000D4C                 mov     dword ptr [ecx], 3
.text:00000D52                 jmp     short loc_D89
.text:00000D54 ; ---------------------------------------------------------------------------
.text:00000D54
.text:00000D54 $LN6_1:                                 ; CODE XREF: CExtractCallbackConsole::AskOverwrite(wchar_t const *,_FILETIME const *,unsigned __int64 const *,wchar_t const *,_FILETIME const *,unsigned __int64 const *,int *)+E4j
.text:00000D54                                         ; DATA XREF: .text:$LN19o
.text:00000D54                 mov     edx, [ebp+arg_1C] ; jumptable 00000D20 case 2
.text:00000D57                 mov     dword ptr [edx], 1
.text:00000D5D                 jmp     short loc_D89
.text:00000D5F ; ---------------------------------------------------------------------------
.text:00000D5F
.text:00000D5F $LN5_3:                                 ; CODE XREF: CExtractCallbackConsole::AskOverwrite(wchar_t const *,_FILETIME const *,unsigned __int64 const *,wchar_t const *,_FILETIME const *,unsigned __int64 const *,int *)+E4j
.text:00000D5F                                         ; DATA XREF: .text:$LN19o
.text:00000D5F                 mov     eax, [ebp+arg_1C] ; jumptable 00000D20 case 0
.text:00000D62                 mov     dword ptr [eax], 0
.text:00000D68                 jmp     short loc_D89
.text:00000D6A ; ---------------------------------------------------------------------------
.text:00000D6A
.text:00000D6A $LN4_1:                                 ; CODE XREF: CExtractCallbackConsole::AskOverwrite(wchar_t const *,_FILETIME const *,unsigned __int64 const *,wchar_t const *,_FILETIME const *,unsigned __int64 const *,int *)+E4j
.text:00000D6A                                         ; DATA XREF: .text:$LN19o
.text:00000D6A                 mov     ecx, [ebp+arg_1C] ; jumptable 00000D20 case 4
.text:00000D6D                 mov     dword ptr [ecx], 4
.text:00000D73                 jmp     short loc_D89
.text:00000D75 ; ---------------------------------------------------------------------------
.text:00000D75
.text:00000D75 loc_D75:                                ; CODE XREF: CExtractCallbackConsole::AskOverwrite(wchar_t const *,_FILETIME const *,unsigned __int64 const *,wchar_t const *,_FILETIME const *,unsigned __int64 const *,int *)+DFj
.text:00000D75                 mov     [ebp+var_20], 80004005h ; jumptable 00000D20 default case
.text:00000D7C                 lea     ecx, [ebp+var_8] ; this
.text:00000D7F                 call    ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)
.text:00000D84                 mov     eax, [ebp+var_20]
.text:00000D87                 jmp     short loc_DD7
.text:00000D89 ; ---------------------------------------------------------------------------
.text:00000D89
.text:00000D89 loc_D89:                                ; CODE XREF: CExtractCallbackConsole::AskOverwrite(wchar_t const *,_FILETIME const *,unsigned __int64 const *,wchar_t const *,_FILETIME const *,unsigned __int64 const *,int *)+10Bj
.text:00000D89                                         ; CExtractCallbackConsole::AskOverwrite(wchar_t const *,_FILETIME const *,unsigned __int64 const *,wchar_t const *,_FILETIME const *,unsigned __int64 const *,int *)+116j ...
.text:00000D89                 mov     edx, [ebp+this]
.text:00000D8C                 cmp     dword ptr [edx+0C8h], 0
.text:00000D93                 jz      short loc_DC4
.text:00000D95                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00000D9A                 mov     eax, [ebp+this]
.text:00000D9D                 mov     ecx, [eax+0C8h]
.text:00000DA3                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00000DA8                 mov     ecx, [ebp+this]
.text:00000DAB                 movzx   edx, byte ptr [ecx+158h]
.text:00000DB2                 test    edx, edx
.text:00000DB4                 jz      short loc_DC4
.text:00000DB6                 mov     eax, [ebp+this]
.text:00000DB9                 mov     ecx, [eax+0C8h] ; this
.text:00000DBF                 call    ?Flush@CStdOutStream@@QAE_NXZ ; CStdOutStream::Flush(void)
.text:00000DC4
.text:00000DC4 loc_DC4:                                ; CODE XREF: CExtractCallbackConsole::AskOverwrite(wchar_t const *,_FILETIME const *,unsigned __int64 const *,wchar_t const *,_FILETIME const *,unsigned __int64 const *,int *)+157j
.text:00000DC4                                         ; CExtractCallbackConsole::AskOverwrite(wchar_t const *,_FILETIME const *,unsigned __int64 const *,wchar_t const *,_FILETIME const *,unsigned __int64 const *,int *)+178j
.text:00000DC4                 call    ?CheckBreak2@@YGJXZ ; CheckBreak2(void)
.text:00000DC9                 mov     [ebp+var_24], eax
.text:00000DCC                 lea     ecx, [ebp+var_8] ; this
.text:00000DCF                 call    ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)
.text:00000DD4                 mov     eax, [ebp+var_24]
.text:00000DD7
.text:00000DD7 loc_DD7:                                ; CODE XREF: CExtractCallbackConsole::AskOverwrite(wchar_t const *,_FILETIME const *,unsigned __int64 const *,wchar_t const *,_FILETIME const *,unsigned __int64 const *,int *)+42j
.text:00000DD7                                         ; CExtractCallbackConsole::AskOverwrite(wchar_t const *,_FILETIME const *,unsigned __int64 const *,wchar_t const *,_FILETIME const *,unsigned __int64 const *,int *)+FDj ...
.text:00000DD7                 push    edx
.text:00000DD8                 mov     ecx, ebp
.text:00000DDA                 push    eax
.text:00000DDB                 lea     edx, $LN18
.text:00000DE1                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000DE6                 pop     eax
.text:00000DE7                 pop     edx
.text:00000DE8                 pop     edi
.text:00000DE9                 add     esp, 28h
.text:00000DEC                 cmp     ebp, esp
.text:00000DEE                 call    __RTC_CheckEsp
.text:00000DF3                 mov     esp, ebp
.text:00000DF5                 pop     ebp
.text:00000DF6                 retn    20h
.text:00000DF6 ?AskOverwrite@CExtractCallbackConsole@@UAGJPB_WPBU_FILETIME@@PB_K012PAH@Z endp ; sp-analysis failed
.text:00000DF6
.text:00000DF6 ; ---------------------------------------------------------------------------
.text:00000DF9                 align 4
.text:00000DFC $LN18           dd 1                    ; DATA XREF: CExtractCallbackConsole::AskOverwrite(wchar_t const *,_FILETIME const *,unsigned __int64 const *,wchar_t const *,_FILETIME const *,unsigned __int64 const *,int *)+19Fo
.text:00000E00                 dd offset $LN17
.text:00000E04 $LN17           dd 0FFFFFFF8h, 4        ; DATA XREF: .text:00000E00o
.text:00000E0C                 dd offset $LN16         ; "lock"
.text:00000E10 $LN16           db 'lock',0             ; DATA XREF: .text:00000E0Co
.text:00000E15                 align 4
.text:00000E18 $LN19           dd offset $LN5_3        ; DATA XREF: CExtractCallbackConsole::AskOverwrite(wchar_t const *,_FILETIME const *,unsigned __int64 const *,wchar_t const *,_FILETIME const *,unsigned __int64 const *,int *)+E4r
.text:00000E18                 dd offset $LN8_0        ; jump table for switch statement
.text:00000E18                 dd offset $LN6_1
.text:00000E18                 dd offset $LN7_1
.text:00000E18                 dd offset $LN4_1
.text:00000E18                 dd offset $LN9_0
.text:00000E30                 db 0Ch dup(0CCh)
.text:00000E3C
.text:00000E3C ; =============== S U B R O U T I N E =======================================
.text:00000E3C
.text:00000E3C ; Attributes: bp-based frame
.text:00000E3C
.text:00000E3C ; int __stdcall PrintFileInfo(int, int, FILETIME *lpFileTime, int)
.text:00000E3C ?PrintFileInfo@@YGXPAVCStdOutStream@@PB_WPBU_FILETIME@@PB_K@Z proc near
.text:00000E3C                                         ; CODE XREF: CExtractCallbackConsole::AskOverwrite(wchar_t const *,_FILETIME const *,unsigned __int64 const *,wchar_t const *,_FILETIME const *,unsigned __int64 const *,int *)+90p
.text:00000E3C                                         ; CExtractCallbackConsole::AskOverwrite(wchar_t const *,_FILETIME const *,unsigned __int64 const *,wchar_t const *,_FILETIME const *,unsigned __int64 const *,int *)+BEp
.text:00000E3C
.text:00000E3C var_7C          = byte ptr -7Ch
.text:00000E3C LocalFileTime   = _FILETIME ptr -78h
.text:00000E3C Str             = byte ptr -68h
.text:00000E3C var_20          = byte ptr -20h
.text:00000E3C var_10          = dword ptr -10h
.text:00000E3C var_C           = dword ptr -0Ch
.text:00000E3C var_4           = dword ptr -4
.text:00000E3C arg_0           = dword ptr  8
.text:00000E3C arg_4           = dword ptr  0Ch
.text:00000E3C lpFileTime      = dword ptr  10h
.text:00000E3C arg_C           = dword ptr  14h
.text:00000E3C
.text:00000E3C                 push    ebp
.text:00000E3D                 mov     ebp, esp
.text:00000E3F                 push    0FFFFFFFFh
.text:00000E41                 push    offset __ehhandler$?PrintFileInfo@@YGXPAVCStdOutStream@@PB_WPBU_FILETIME@@PB_K@Z
.text:00000E46                 mov     eax, large fs:0
.text:00000E4C                 push    eax
.text:00000E4D                 sub     esp, 70h
.text:00000E50                 push    esi
.text:00000E51                 push    edi
.text:00000E52                 lea     edi, [ebp+var_7C]
.text:00000E55                 mov     ecx, 1Ch
.text:00000E5A                 mov     eax, 0CCCCCCCCh
.text:00000E5F                 rep stosd
.text:00000E61                 mov     eax, dword ptr ds:___security_cookie
.text:00000E66                 xor     eax, ebp
.text:00000E68                 mov     [ebp+var_10], eax
.text:00000E6B                 push    eax
.text:00000E6C                 lea     eax, [ebp+var_C]
.text:00000E6F                 mov     large fs:0, eax
.text:00000E75                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00000E7A                 mov     eax, [ebp+arg_4]
.text:00000E7D                 push    eax
.text:00000E7E                 push    offset $SG75550 ; "Path:     "
.text:00000E83                 mov     ecx, ds:_kTab
.text:00000E89                 push    ecx             ; Str
.text:00000E8A                 mov     ecx, [ebp+arg_0]
.text:00000E8D                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00000E92                 mov     ecx, eax
.text:00000E94                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00000E99                 mov     ecx, eax
.text:00000E9B                 call    ??6CStdOutStream@@QAEAAV0@PB_W@Z ; CStdOutStream::operator<<(wchar_t const *)
.text:00000EA0                 mov     ecx, eax
.text:00000EA2                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00000EA7                 cmp     [ebp+arg_C], 0
.text:00000EAB                 jz      short loc_F14
.text:00000EAD                 lea     ecx, [ebp+var_20]
.text:00000EB0                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:00000EB5                 mov     [ebp+var_4], 0
.text:00000EBC                 mov     edx, [ebp+arg_C]
.text:00000EBF                 mov     eax, [edx+4]
.text:00000EC2                 push    eax
.text:00000EC3                 mov     ecx, [edx]
.text:00000EC5                 push    ecx             ; unsigned __int64
.text:00000EC6                 lea     edx, [ebp+var_20]
.text:00000EC9                 push    edx             ; struct AString *
.text:00000ECA                 call    ?PrintSize_bytes_Smart@@YGXAAVAString@@_K@Z ; PrintSize_bytes_Smart(AString &,unsigned __int64)
.text:00000ECF                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00000ED4                 lea     ecx, [ebp+var_20]
.text:00000ED7                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:00000EDC                 push    eax             ; Str
.text:00000EDD                 push    offset $SG75553 ; "Size:     "
.text:00000EE2                 mov     eax, ds:_kTab
.text:00000EE7                 push    eax             ; Str
.text:00000EE8                 mov     ecx, [ebp+arg_0]
.text:00000EEB                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00000EF0                 mov     ecx, eax
.text:00000EF2                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00000EF7                 mov     ecx, eax
.text:00000EF9                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00000EFE                 mov     ecx, eax
.text:00000F00                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00000F05                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000F0C                 lea     ecx, [ebp+var_20] ; this
.text:00000F0F                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00000F14
.text:00000F14 loc_F14:                                ; CODE XREF: PrintFileInfo(CStdOutStream *,wchar_t const *,_FILETIME const *,unsigned __int64 const *)+6Fj
.text:00000F14                 cmp     [ebp+lpFileTime], 0
.text:00000F18                 jz      short loc_F7F
.text:00000F1A                 mov     esi, esp
.text:00000F1C                 lea     ecx, [ebp+LocalFileTime]
.text:00000F1F                 push    ecx             ; lpLocalFileTime
.text:00000F20                 mov     edx, [ebp+lpFileTime]
.text:00000F23                 push    edx             ; lpFileTime
.text:00000F24                 call    dword ptr ds:__imp__FileTimeToLocalFileTime@8 ; FileTimeToLocalFileTime(x,x)
.text:00000F2A                 cmp     esi, esp
.text:00000F2C                 call    __RTC_CheckEsp
.text:00000F31                 test    eax, eax
.text:00000F33                 jz      short loc_F7F
.text:00000F35                 push    1               ; bool
.text:00000F37                 push    1               ; bool
.text:00000F39                 lea     eax, [ebp+Str]
.text:00000F3C                 push    eax             ; char *
.text:00000F3D                 lea     ecx, [ebp+LocalFileTime]
.text:00000F40                 push    ecx             ; struct _FILETIME *
.text:00000F41                 call    ?ConvertFileTimeToString@@YG_NABU_FILETIME@@PAD_N2@Z ; ConvertFileTimeToString(_FILETIME const &,char *,bool,bool)
.text:00000F46                 movzx   edx, al
.text:00000F49                 test    edx, edx
.text:00000F4B                 jz      short loc_F7F
.text:00000F4D                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00000F52                 lea     eax, [ebp+Str]
.text:00000F55                 push    eax             ; Str
.text:00000F56                 push    offset $SG75559 ; "Modified: "
.text:00000F5B                 mov     ecx, ds:_kTab
.text:00000F61                 push    ecx             ; Str
.text:00000F62                 mov     ecx, [ebp+arg_0]
.text:00000F65                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00000F6A                 mov     ecx, eax
.text:00000F6C                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00000F71                 mov     ecx, eax
.text:00000F73                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00000F78                 mov     ecx, eax
.text:00000F7A                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00000F7F
.text:00000F7F loc_F7F:                                ; CODE XREF: PrintFileInfo(CStdOutStream *,wchar_t const *,_FILETIME const *,unsigned __int64 const *)+DCj
.text:00000F7F                                         ; PrintFileInfo(CStdOutStream *,wchar_t const *,_FILETIME const *,unsigned __int64 const *)+F7j ...
.text:00000F7F                 push    edx
.text:00000F80                 mov     ecx, ebp
.text:00000F82                 push    eax
.text:00000F83                 lea     edx, $LN13
.text:00000F89                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000F8E                 pop     eax
.text:00000F8F                 pop     edx
.text:00000F90                 mov     ecx, [ebp+var_C]
.text:00000F93                 mov     large fs:0, ecx
.text:00000F9A                 pop     ecx
.text:00000F9B                 pop     edi
.text:00000F9C                 pop     esi
.text:00000F9D                 mov     ecx, [ebp+var_10]
.text:00000FA0                 xor     ecx, ebp
.text:00000FA2                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000FA7                 add     esp, 7Ch
.text:00000FAA                 cmp     ebp, esp
.text:00000FAC                 call    __RTC_CheckEsp
.text:00000FB1                 mov     esp, ebp
.text:00000FB3                 pop     ebp
.text:00000FB4                 retn    10h
.text:00000FB4 ?PrintFileInfo@@YGXPAVCStdOutStream@@PB_WPBU_FILETIME@@PB_K@Z endp
.text:00000FB4
.text:00000FB4 ; ---------------------------------------------------------------------------
.text:00000FB7                 align 4
.text:00000FB8 $LN13           dd 3                    ; DATA XREF: PrintFileInfo(CStdOutStream *,wchar_t const *,_FILETIME const *,unsigned __int64 const *)+147o
.text:00000FBC                 dd offset $LN12
.text:00000FC0 $LN12           dd 0FFFFFFE0h, 0Ch      ; DATA XREF: .text:00000FBCo
.text:00000FC8                 dd offset $LN8_1        ; "s"
.text:00000FCC                 dd 0FFFFFF98h, 40h
.text:00000FD4                 dd offset $LN9_1        ; "temp"
.text:00000FD8                 db 88h, 0FFh
.text:00000FDA                 dw 0FFFFh
.text:00000FDC                 dd 8
.text:00000FE0                 dd offset $LN10_0       ; "locTime"
.text:00000FE4 $LN10_0         db 'locTime',0          ; DATA XREF: .text:00000FE0o
.text:00000FEC $LN9_1          db 'temp',0             ; DATA XREF: .text:00000FD4o
.text:00000FF1 $LN8_1          db 's',0                ; DATA XREF: .text:00000FC8o
.text:00000FF3                 db 9 dup(0CCh)
.text:00000FFC
.text:00000FFC ; =============== S U B R O U T I N E =======================================
.text:00000FFC
.text:00000FFC ; Attributes: bp-based frame
.text:00000FFC
.text:00000FFC ; __int32 __stdcall CExtractCallbackConsole::PrepareOperation(CExtractCallbackConsole *this, const wchar_t *, int, int, const unsigned __int64 *)
.text:00000FFC                 public ?PrepareOperation@CExtractCallbackConsole@@UAGJPB_WHHPB_K@Z
.text:00000FFC ?PrepareOperation@CExtractCallbackConsole@@UAGJPB_WHHPB_K@Z proc near
.text:00000FFC
.text:00000FFC var_24          = dword ptr -24h
.text:00000FFC var_20          = dword ptr -20h
.text:00000FFC var_1C          = dword ptr -1Ch
.text:00000FFC var_18          = dword ptr -18h
.text:00000FFC var_14          = dword ptr -14h
.text:00000FFC var_10          = dword ptr -10h
.text:00000FFC var_C           = dword ptr -0Ch
.text:00000FFC var_8           = dword ptr -8
.text:00000FFC var_4           = dword ptr -4
.text:00000FFC this            = dword ptr  8
.text:00000FFC arg_4           = dword ptr  0Ch
.text:00000FFC arg_C           = dword ptr  14h
.text:00000FFC arg_10          = dword ptr  18h
.text:00000FFC
.text:00000FFC                 push    ebp
.text:00000FFD                 mov     ebp, esp
.text:00000FFF                 sub     esp, 24h
.text:00001002                 mov     eax, 0CCCCCCCCh
.text:00001007                 mov     [ebp+var_24], eax
.text:0000100A                 mov     [ebp+var_20], eax
.text:0000100D                 mov     [ebp+var_1C], eax
.text:00001010                 mov     [ebp+var_18], eax
.text:00001013                 mov     [ebp+var_14], eax
.text:00001016                 mov     [ebp+var_10], eax
.text:00001019                 mov     [ebp+var_C], eax
.text:0000101C                 mov     [ebp+var_8], eax
.text:0000101F                 mov     [ebp+var_4], eax
.text:00001022                 push    offset _g_CriticalSection ; struct NWindows::NSynchronization::CCriticalSection *
.text:00001027                 lea     ecx, [ebp+var_8] ; this
.text:0000102A                 call    ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z ; NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock(NWindows::NSynchronization::CCriticalSection &)
.text:0000102F                 mov     eax, [ebp+arg_4]
.text:00001032                 push    eax
.text:00001033                 mov     ecx, [ebp+this]
.text:00001036                 add     ecx, 0FCh ; 'n'
.text:0000103C                 call    ??4UString@@QAEAAV0@PB_W@Z ; UString::operator=(wchar_t const *)
.text:00001041                 mov     [ebp+var_14], 1
.text:00001048                 mov     ecx, [ebp+arg_C]
.text:0000104B                 mov     [ebp+var_20], ecx
.text:0000104E                 cmp     [ebp+var_20], 0
.text:00001052                 jz      short loc_1062
.text:00001054                 cmp     [ebp+var_20], 1
.text:00001058                 jz      short loc_106D
.text:0000105A                 cmp     [ebp+var_20], 2
.text:0000105E                 jz      short loc_1077
.text:00001060                 jmp     short loc_1089
.text:00001062 ; ---------------------------------------------------------------------------
.text:00001062
.text:00001062 loc_1062:                               ; CODE XREF: CExtractCallbackConsole::PrepareOperation(wchar_t const *,int,int,unsigned __int64 const *)+56j
.text:00001062                 mov     edx, ds:_kExtractString
.text:00001068                 mov     [ebp+var_10], edx
.text:0000106B                 jmp     short loc_1097
.text:0000106D ; ---------------------------------------------------------------------------
.text:0000106D
.text:0000106D loc_106D:                               ; CODE XREF: CExtractCallbackConsole::PrepareOperation(wchar_t const *,int,int,unsigned __int64 const *)+5Cj
.text:0000106D                 mov     eax, ds:_kTestString
.text:00001072                 mov     [ebp+var_10], eax
.text:00001075                 jmp     short loc_1097
.text:00001077 ; ---------------------------------------------------------------------------
.text:00001077
.text:00001077 loc_1077:                               ; CODE XREF: CExtractCallbackConsole::PrepareOperation(wchar_t const *,int,int,unsigned __int64 const *)+62j
.text:00001077                 mov     ecx, ds:_kSkipString
.text:0000107D                 mov     [ebp+var_10], ecx
.text:00001080                 mov     [ebp+var_14], 2
.text:00001087                 jmp     short loc_1097
.text:00001089 ; ---------------------------------------------------------------------------
.text:00001089
.text:00001089 loc_1089:                               ; CODE XREF: CExtractCallbackConsole::PrepareOperation(wchar_t const *,int,int,unsigned __int64 const *)+64j
.text:00001089                 mov     [ebp+var_10], offset $SG75614 ; "???"
.text:00001090                 mov     [ebp+var_14], 2
.text:00001097
.text:00001097 loc_1097:                               ; CODE XREF: CExtractCallbackConsole::PrepareOperation(wchar_t const *,int,int,unsigned __int64 const *)+6Fj
.text:00001097                                         ; CExtractCallbackConsole::PrepareOperation(wchar_t const *,int,int,unsigned __int64 const *)+79j ...
.text:00001097                 mov     edx, [ebp+this]
.text:0000109A                 mov     eax, [edx+160h]
.text:000010A0                 cmp     eax, [ebp+var_14]
.text:000010A3                 jb      short loc_10BA
.text:000010A5                 mov     ecx, [ebp+this]
.text:000010A8                 cmp     dword ptr [ecx+0C8h], 0
.text:000010AF                 jz      short loc_10BA
.text:000010B1                 mov     [ebp+var_24], 1
.text:000010B8                 jmp     short loc_10C1
.text:000010BA ; ---------------------------------------------------------------------------
.text:000010BA
.text:000010BA loc_10BA:                               ; CODE XREF: CExtractCallbackConsole::PrepareOperation(wchar_t const *,int,int,unsigned __int64 const *)+A7j
.text:000010BA                                         ; CExtractCallbackConsole::PrepareOperation(wchar_t const *,int,int,unsigned __int64 const *)+B3j
.text:000010BA                 mov     [ebp+var_24], 0
.text:000010C1
.text:000010C1 loc_10C1:                               ; CODE XREF: CExtractCallbackConsole::PrepareOperation(wchar_t const *,int,int,unsigned __int64 const *)+BCj
.text:000010C1                 mov     dl, byte ptr [ebp+var_24]
.text:000010C4                 mov     byte ptr [ebp+var_18+3], dl
.text:000010C7                 movzx   eax, byte ptr [ebp+var_18+3]
.text:000010CB                 test    eax, eax
.text:000010CD                 jz      loc_11CB
.text:000010D3                 mov     ecx, [ebp+this] ; this
.text:000010D6                 call    ?ClosePercents_for_so@CExtractCallbackConsole@@AAEXXZ ; CExtractCallbackConsole::ClosePercents_for_so(void)
.text:000010DB                 mov     ecx, [ebp+var_10]
.text:000010DE                 push    ecx
.text:000010DF                 mov     ecx, [ebp+this]
.text:000010E2                 add     ecx, 0E4h ; 'S'
.text:000010E8                 call    ??4AString@@QAEAAV0@PBD@Z ; AString::operator=(char const *)
.text:000010ED                 cmp     [ebp+arg_4], 0
.text:000010F1                 jz      short loc_1101
.text:000010F3                 mov     ecx, [ebp+this]
.text:000010F6                 add     ecx, 0E4h ; 'S' ; this
.text:000010FC                 call    ?Add_Space@AString@@QAEXXZ ; AString::Add_Space(void)
.text:00001101
.text:00001101 loc_1101:                               ; CODE XREF: CExtractCallbackConsole::PrepareOperation(wchar_t const *,int,int,unsigned __int64 const *)+F5j
.text:00001101                 mov     ecx, [ebp+this]
.text:00001104                 add     ecx, 0E4h ; 'S'
.text:0000110A                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:0000110F                 push    eax             ; Str
.text:00001110                 mov     edx, [ebp+this]
.text:00001113                 mov     ecx, [edx+0C8h]
.text:00001119                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:0000111E                 mov     ecx, [ebp+this]
.text:00001121                 add     ecx, 0F0h ; '=' ; this
.text:00001127                 call    ?Empty@UString@@QAEXXZ ; UString::Empty(void)
.text:0000112C                 cmp     [ebp+arg_4], 0
.text:00001130                 jz      short loc_1144
.text:00001132                 mov     eax, [ebp+arg_4]
.text:00001135                 push    eax
.text:00001136                 mov     ecx, [ebp+this]
.text:00001139                 add     ecx, 0F0h ; '='
.text:0000113F                 call    ??4UString@@QAEAAV0@PB_W@Z ; UString::operator=(wchar_t const *)
.text:00001144
.text:00001144 loc_1144:                               ; CODE XREF: CExtractCallbackConsole::PrepareOperation(wchar_t const *,int,int,unsigned __int64 const *)+134j
.text:00001144                 mov     ecx, [ebp+this]
.text:00001147                 add     ecx, 0E4h ; 'S'
.text:0000114D                 push    ecx             ; struct AString *
.text:0000114E                 mov     edx, [ebp+this]
.text:00001151                 add     edx, 0F0h ; '='
.text:00001157                 push    edx             ; struct UString *
.text:00001158                 mov     eax, [ebp+this]
.text:0000115B                 mov     ecx, [eax+0C8h] ; this
.text:00001161                 call    ?PrintUString@CStdOutStream@@QAEXABVUString@@AAVAString@@@Z ; CStdOutStream::PrintUString(UString const &,AString &)
.text:00001166                 cmp     [ebp+arg_10], 0
.text:0000116A                 jz      short loc_119C
.text:0000116C                 push    offset $SG75621 ; Str
.text:00001171                 mov     ecx, [ebp+arg_10]
.text:00001174                 mov     edx, [ecx+4]
.text:00001177                 push    edx
.text:00001178                 mov     eax, [ecx]
.text:0000117A                 push    eax
.text:0000117B                 push    offset $SG75620 ; " <"
.text:00001180                 mov     ecx, [ebp+this]
.text:00001183                 mov     ecx, [ecx+0C8h]
.text:00001189                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:0000118E                 mov     ecx, eax
.text:00001190                 call    ??6CStdOutStream@@QAEAAV0@_K@Z ; CStdOutStream::operator<<(unsigned __int64)
.text:00001195                 mov     ecx, eax
.text:00001197                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:0000119C
.text:0000119C loc_119C:                               ; CODE XREF: CExtractCallbackConsole::PrepareOperation(wchar_t const *,int,int,unsigned __int64 const *)+16Ej
.text:0000119C                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:000011A1                 mov     edx, [ebp+this]
.text:000011A4                 mov     ecx, [edx+0C8h]
.text:000011AA                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:000011AF                 mov     eax, [ebp+this]
.text:000011B2                 movzx   ecx, byte ptr [eax+158h]
.text:000011B9                 test    ecx, ecx
.text:000011BB                 jz      short loc_11CB
.text:000011BD                 mov     edx, [ebp+this]
.text:000011C0                 mov     ecx, [edx+0C8h] ; this
.text:000011C6                 call    ?Flush@CStdOutStream@@QAE_NXZ ; CStdOutStream::Flush(void)
.text:000011CB
.text:000011CB loc_11CB:                               ; CODE XREF: CExtractCallbackConsole::PrepareOperation(wchar_t const *,int,int,unsigned __int64 const *)+D1j
.text:000011CB                                         ; CExtractCallbackConsole::PrepareOperation(wchar_t const *,int,int,unsigned __int64 const *)+1BFj
.text:000011CB                 mov     ecx, [ebp+this]
.text:000011CE                 add     ecx, 10h        ; this
.text:000011D1                 call    ?NeedPercents@COpenCallbackConsole@@IBE_NXZ ; COpenCallbackConsole::NeedPercents(void)
.text:000011D6                 movzx   eax, al
.text:000011D9                 test    eax, eax
.text:000011DB                 jz      short loc_1242
.text:000011DD                 mov     ecx, [ebp+this]
.text:000011E0                 cmp     dword ptr [ecx+15Ch], 1
.text:000011E7                 jb      short loc_1237
.text:000011E9                 mov     ecx, [ebp+this]
.text:000011EC                 add     ecx, 3Ch ; '<'  ; this
.text:000011EF                 call    ?Empty@UString@@QAEXXZ ; UString::Empty(void)
.text:000011F4                 mov     ecx, [ebp+this]
.text:000011F7                 add     ecx, 30h ; '0'  ; this
.text:000011FA                 call    ?Empty@AString@@QAEXXZ ; AString::Empty(void)
.text:000011FF                 mov     edx, [ebp+this]
.text:00001202                 cmp     dword ptr [edx+15Ch], 1
.text:00001209                 ja      short loc_1213
.text:0000120B                 movzx   eax, byte ptr [ebp+var_18+3]
.text:0000120F                 test    eax, eax
.text:00001211                 jnz     short loc_1237
.text:00001213
.text:00001213 loc_1213:                               ; CODE XREF: CExtractCallbackConsole::PrepareOperation(wchar_t const *,int,int,unsigned __int64 const *)+20Dj
.text:00001213                 mov     ecx, [ebp+var_10]
.text:00001216                 push    ecx
.text:00001217                 mov     ecx, [ebp+this]
.text:0000121A                 add     ecx, 30h ; '0'
.text:0000121D                 call    ??4AString@@QAEAAV0@PBD@Z ; AString::operator=(char const *)
.text:00001222                 cmp     [ebp+arg_4], 0
.text:00001226                 jz      short loc_1237
.text:00001228                 mov     edx, [ebp+arg_4]
.text:0000122B                 push    edx
.text:0000122C                 mov     ecx, [ebp+this]
.text:0000122F                 add     ecx, 3Ch ; '<'
.text:00001232                 call    ??4UString@@QAEAAV0@PB_W@Z ; UString::operator=(wchar_t const *)
.text:00001237
.text:00001237 loc_1237:                               ; CODE XREF: CExtractCallbackConsole::PrepareOperation(wchar_t const *,int,int,unsigned __int64 const *)+1EBj
.text:00001237                                         ; CExtractCallbackConsole::PrepareOperation(wchar_t const *,int,int,unsigned __int64 const *)+215j ...
.text:00001237                 mov     ecx, [ebp+this]
.text:0000123A                 add     ecx, 18h        ; this
.text:0000123D                 call    ?Print@CPercentPrinter@@QAEXXZ ; CPercentPrinter::Print(void)
.text:00001242
.text:00001242 loc_1242:                               ; CODE XREF: CExtractCallbackConsole::PrepareOperation(wchar_t const *,int,int,unsigned __int64 const *)+1DFj
.text:00001242                 call    ?CheckBreak2@@YGJXZ ; CheckBreak2(void)
.text:00001247                 mov     [ebp+var_1C], eax
.text:0000124A                 lea     ecx, [ebp+var_8] ; this
.text:0000124D                 call    ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)
.text:00001252                 mov     eax, [ebp+var_1C]
.text:00001255                 push    edx
.text:00001256                 mov     ecx, ebp
.text:00001258                 push    eax
.text:00001259                 lea     edx, $LN23
.text:0000125F                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001264                 pop     eax
.text:00001265                 pop     edx
.text:00001266                 add     esp, 24h
.text:00001269                 cmp     ebp, esp
.text:0000126B                 call    __RTC_CheckEsp
.text:00001270                 mov     esp, ebp
.text:00001272                 pop     ebp
.text:00001273                 retn    14h
.text:00001273 ?PrepareOperation@CExtractCallbackConsole@@UAGJPB_WHHPB_K@Z endp
.text:00001273
.text:00001273 ; ---------------------------------------------------------------------------
.text:00001276                 align 4
.text:00001278 $LN23           dd 1                    ; DATA XREF: CExtractCallbackConsole::PrepareOperation(wchar_t const *,int,int,unsigned __int64 const *)+25Do
.text:0000127C                 dd offset $LN22
.text:00001280 $LN22           dd 0FFFFFFF8h, 4        ; DATA XREF: .text:0000127Co
.text:00001288                 dd offset $LN21         ; "lock"
.text:0000128C $LN21           db 'lock',0             ; DATA XREF: .text:00001288o
.text:00001291                 db 0Bh dup(0CCh)
.text:0000129C
.text:0000129C ; =============== S U B R O U T I N E =======================================
.text:0000129C
.text:0000129C ; Attributes: bp-based frame
.text:0000129C
.text:0000129C ; __int32 __stdcall CExtractCallbackConsole::MessageError(CExtractCallbackConsole *this, const wchar_t *)
.text:0000129C                 public ?MessageError@CExtractCallbackConsole@@UAGJPB_W@Z
.text:0000129C ?MessageError@CExtractCallbackConsole@@UAGJPB_W@Z proc near
.text:0000129C
.text:0000129C var_18          = dword ptr -18h
.text:0000129C var_14          = dword ptr -14h
.text:0000129C var_10          = dword ptr -10h
.text:0000129C var_C           = dword ptr -0Ch
.text:0000129C var_8           = dword ptr -8
.text:0000129C var_4           = dword ptr -4
.text:0000129C this            = dword ptr  8
.text:0000129C arg_4           = dword ptr  0Ch
.text:0000129C
.text:0000129C                 push    ebp
.text:0000129D                 mov     ebp, esp
.text:0000129F                 sub     esp, 18h
.text:000012A2                 mov     eax, 0CCCCCCCCh
.text:000012A7                 mov     [ebp+var_18], eax
.text:000012AA                 mov     [ebp+var_14], eax
.text:000012AD                 mov     [ebp+var_10], eax
.text:000012B0                 mov     [ebp+var_C], eax
.text:000012B3                 mov     [ebp+var_8], eax
.text:000012B6                 mov     [ebp+var_4], eax
.text:000012B9                 push    offset _g_CriticalSection ; struct NWindows::NSynchronization::CCriticalSection *
.text:000012BE                 lea     ecx, [ebp+var_8] ; this
.text:000012C1                 call    ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z ; NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock(NWindows::NSynchronization::CCriticalSection &)
.text:000012C6                 call    ?CheckBreak2@@YGJXZ ; CheckBreak2(void)
.text:000012CB                 mov     [ebp+var_10], eax
.text:000012CE                 cmp     [ebp+var_10], 0
.text:000012D2                 jz      short loc_12EA
.text:000012D4                 mov     eax, [ebp+var_10]
.text:000012D7                 mov     [ebp+var_14], eax
.text:000012DA                 lea     ecx, [ebp+var_8] ; this
.text:000012DD                 call    ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)
.text:000012E2                 mov     eax, [ebp+var_14]
.text:000012E5                 jmp     loc_1393
.text:000012EA ; ---------------------------------------------------------------------------
.text:000012EA
.text:000012EA loc_12EA:                               ; CODE XREF: CExtractCallbackConsole::MessageError(wchar_t const *)+36j
.text:000012EA                 mov     ecx, [ebp+this]
.text:000012ED                 mov     edx, [ecx+150h]
.text:000012F3                 add     edx, 1
.text:000012F6                 mov     eax, [ecx+154h]
.text:000012FC                 adc     eax, 0
.text:000012FF                 mov     ecx, [ebp+this]
.text:00001302                 mov     [ecx+150h], edx
.text:00001308                 mov     [ecx+154h], eax
.text:0000130E                 mov     edx, [ebp+this]
.text:00001311                 mov     eax, [edx+148h]
.text:00001317                 add     eax, 1
.text:0000131A                 mov     ecx, [edx+14Ch]
.text:00001320                 adc     ecx, 0
.text:00001323                 mov     edx, [ebp+this]
.text:00001326                 mov     [edx+148h], eax
.text:0000132C                 mov     [edx+14Ch], ecx
.text:00001332                 mov     ecx, [ebp+this] ; this
.text:00001335                 call    ?ClosePercentsAndFlush@CExtractCallbackConsole@@AAEXXZ ; CExtractCallbackConsole::ClosePercentsAndFlush(void)
.text:0000133A                 mov     eax, [ebp+this]
.text:0000133D                 cmp     dword ptr [eax+0CCh], 0
.text:00001344                 jz      short loc_1380
.text:00001346                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:0000134B                 mov     ecx, [ebp+arg_4]
.text:0000134E                 push    ecx
.text:0000134F                 mov     edx, ds:_kError
.text:00001355                 push    edx             ; Str
.text:00001356                 mov     eax, [ebp+this]
.text:00001359                 mov     ecx, [eax+0CCh]
.text:0000135F                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00001364                 mov     ecx, eax
.text:00001366                 call    ??6CStdOutStream@@QAEAAV0@PB_W@Z ; CStdOutStream::operator<<(wchar_t const *)
.text:0000136B                 mov     ecx, eax
.text:0000136D                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00001372                 mov     ecx, [ebp+this]
.text:00001375                 mov     ecx, [ecx+0CCh] ; this
.text:0000137B                 call    ?Flush@CStdOutStream@@QAE_NXZ ; CStdOutStream::Flush(void)
.text:00001380
.text:00001380 loc_1380:                               ; CODE XREF: CExtractCallbackConsole::MessageError(wchar_t const *)+A8j
.text:00001380                 call    ?CheckBreak2@@YGJXZ ; CheckBreak2(void)
.text:00001385                 mov     [ebp+var_18], eax
.text:00001388                 lea     ecx, [ebp+var_8] ; this
.text:0000138B                 call    ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)
.text:00001390                 mov     eax, [ebp+var_18]
.text:00001393
.text:00001393 loc_1393:                               ; CODE XREF: CExtractCallbackConsole::MessageError(wchar_t const *)+49j
.text:00001393                 push    edx
.text:00001394                 mov     ecx, ebp
.text:00001396                 push    eax
.text:00001397                 lea     edx, $LN7_2
.text:0000139D                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000013A2                 pop     eax
.text:000013A3                 pop     edx
.text:000013A4                 add     esp, 18h
.text:000013A7                 cmp     ebp, esp
.text:000013A9                 call    __RTC_CheckEsp
.text:000013AE                 mov     esp, ebp
.text:000013B0                 pop     ebp
.text:000013B1                 retn    8
.text:000013B1 ?MessageError@CExtractCallbackConsole@@UAGJPB_W@Z endp
.text:000013B1
.text:000013B1 ; ---------------------------------------------------------------------------
.text:000013B4 $LN7_2          dd 1                    ; DATA XREF: CExtractCallbackConsole::MessageError(wchar_t const *)+FBo
.text:000013B8                 dd offset $LN6_2
.text:000013BC $LN6_2          dd 0FFFFFFF8h, 4        ; DATA XREF: .text:000013B8o
.text:000013C4                 dd offset $LN5_4        ; "lock"
.text:000013C8 $LN5_4          db 'lock',0             ; DATA XREF: .text:000013C4o
.text:000013CD                 db 0Fh dup(0CCh)
.text:000013DC
.text:000013DC ; =============== S U B R O U T I N E =======================================
.text:000013DC
.text:000013DC ; Attributes: bp-based frame
.text:000013DC
.text:000013DC ; void __stdcall SetExtractErrorMessage(unsigned int, int, struct AString *)
.text:000013DC                 public ?SetExtractErrorMessage@@YGXHHAAVAString@@@Z
.text:000013DC ?SetExtractErrorMessage@@YGXHHAAVAString@@@Z proc near
.text:000013DC                                         ; CODE XREF: CExtractCallbackConsole::SetOperationResult(int,int)+F2p
.text:000013DC
.text:000013DC var_2C          = dword ptr -2Ch
.text:000013DC var_28          = dword ptr -28h
.text:000013DC var_24          = dword ptr -24h
.text:000013DC var_1C          = byte ptr -1Ch
.text:000013DC var_8           = dword ptr -8
.text:000013DC var_4           = dword ptr -4
.text:000013DC arg_0           = dword ptr  8
.text:000013DC arg_4           = dword ptr  0Ch
.text:000013DC arg_8           = dword ptr  10h
.text:000013DC
.text:000013DC                 push    ebp
.text:000013DD                 mov     ebp, esp
.text:000013DF                 sub     esp, 2Ch
.text:000013E2                 push    edi
.text:000013E3                 lea     edi, [ebp+var_2C]
.text:000013E6                 mov     ecx, 0Bh
.text:000013EB                 mov     eax, 0CCCCCCCCh
.text:000013F0                 rep stosd
.text:000013F2                 mov     eax, dword ptr ds:___security_cookie
.text:000013F7                 xor     eax, ebp
.text:000013F9                 mov     [ebp+var_4], eax
.text:000013FC                 mov     ecx, [ebp+arg_8] ; this
.text:000013FF                 call    ?Empty@AString@@QAEXXZ ; AString::Empty(void)
.text:00001404                 mov     [ebp+var_8], 0
.text:0000140B                 mov     eax, [ebp+arg_0]
.text:0000140E                 mov     [ebp+var_24], eax
.text:00001411                 mov     ecx, [ebp+var_24]
.text:00001414                 sub     ecx, 1
.text:00001417                 mov     [ebp+var_24], ecx
.text:0000141A                 cmp     [ebp+var_24], 8 ; switch 9 cases
.text:0000141E                 ja      loc_14BD        ; jumptable 00001427 default case
.text:00001424                 mov     edx, [ebp+var_24]
.text:00001427                 jmp     ds:$LN23_0[edx*4] ; switch jump
.text:0000142E ; ---------------------------------------------------------------------------
.text:0000142E
.text:0000142E $LN11_0:                                ; CODE XREF: SetExtractErrorMessage(int,int,AString &)+4Bj
.text:0000142E                                         ; DATA XREF: .text:$LN23_0o
.text:0000142E                 mov     eax, ds:_kUnsupportedMethod ; jumptable 00001427 case 0
.text:00001433                 mov     [ebp+var_8], eax
.text:00001436                 jmp     loc_14BD        ; jumptable 00001427 default case
.text:0000143B ; ---------------------------------------------------------------------------
.text:0000143B
.text:0000143B $LN10_1:                                ; CODE XREF: SetExtractErrorMessage(int,int,AString &)+4Bj
.text:0000143B                                         ; DATA XREF: .text:$LN23_0o
.text:0000143B                 cmp     [ebp+arg_4], 0  ; jumptable 00001427 case 2
.text:0000143F                 jz      short loc_144C
.text:00001441                 mov     ecx, ds:_kCrcFailedEncrypted
.text:00001447                 mov     [ebp+var_28], ecx
.text:0000144A                 jmp     short loc_1455
.text:0000144C ; ---------------------------------------------------------------------------
.text:0000144C
.text:0000144C loc_144C:                               ; CODE XREF: SetExtractErrorMessage(int,int,AString &)+63j
.text:0000144C                 mov     edx, ds:_kCrcFailed
.text:00001452                 mov     [ebp+var_28], edx
.text:00001455
.text:00001455 loc_1455:                               ; CODE XREF: SetExtractErrorMessage(int,int,AString &)+6Ej
.text:00001455                 mov     eax, [ebp+var_28]
.text:00001458                 mov     [ebp+var_8], eax
.text:0000145B                 jmp     short loc_14BD  ; jumptable 00001427 default case
.text:0000145D ; ---------------------------------------------------------------------------
.text:0000145D
.text:0000145D $LN9_2:                                 ; CODE XREF: SetExtractErrorMessage(int,int,AString &)+4Bj
.text:0000145D                                         ; DATA XREF: .text:$LN23_0o
.text:0000145D                 cmp     [ebp+arg_4], 0  ; jumptable 00001427 case 1
.text:00001461                 jz      short loc_146E
.text:00001463                 mov     ecx, ds:_kDataErrorEncrypted
.text:00001469                 mov     [ebp+var_2C], ecx
.text:0000146C                 jmp     short loc_1477
.text:0000146E ; ---------------------------------------------------------------------------
.text:0000146E
.text:0000146E loc_146E:                               ; CODE XREF: SetExtractErrorMessage(int,int,AString &)+85j
.text:0000146E                 mov     edx, ds:_kDataError
.text:00001474                 mov     [ebp+var_2C], edx
.text:00001477
.text:00001477 loc_1477:                               ; CODE XREF: SetExtractErrorMessage(int,int,AString &)+90j
.text:00001477                 mov     eax, [ebp+var_2C]
.text:0000147A                 mov     [ebp+var_8], eax
.text:0000147D                 jmp     short loc_14BD  ; jumptable 00001427 default case
.text:0000147F ; ---------------------------------------------------------------------------
.text:0000147F
.text:0000147F $LN8_2:                                 ; CODE XREF: SetExtractErrorMessage(int,int,AString &)+4Bj
.text:0000147F                                         ; DATA XREF: .text:$LN23_0o
.text:0000147F                 mov     ecx, ds:_kUnavailableData ; jumptable 00001427 case 3
.text:00001485                 mov     [ebp+var_8], ecx
.text:00001488                 jmp     short loc_14BD  ; jumptable 00001427 default case
.text:0000148A ; ---------------------------------------------------------------------------
.text:0000148A
.text:0000148A $LN7_3:                                 ; CODE XREF: SetExtractErrorMessage(int,int,AString &)+4Bj
.text:0000148A                                         ; DATA XREF: .text:$LN23_0o
.text:0000148A                 mov     edx, ds:_kUnexpectedEnd ; jumptable 00001427 case 4
.text:00001490                 mov     [ebp+var_8], edx
.text:00001493                 jmp     short loc_14BD  ; jumptable 00001427 default case
.text:00001495 ; ---------------------------------------------------------------------------
.text:00001495
.text:00001495 $LN6_3:                                 ; CODE XREF: SetExtractErrorMessage(int,int,AString &)+4Bj
.text:00001495                                         ; DATA XREF: .text:$LN23_0o
.text:00001495                 mov     eax, ds:_kDataAfterEnd ; jumptable 00001427 case 5
.text:0000149A                 mov     [ebp+var_8], eax
.text:0000149D                 jmp     short loc_14BD  ; jumptable 00001427 default case
.text:0000149F ; ---------------------------------------------------------------------------
.text:0000149F
.text:0000149F $LN5_5:                                 ; CODE XREF: SetExtractErrorMessage(int,int,AString &)+4Bj
.text:0000149F                                         ; DATA XREF: .text:$LN23_0o
.text:0000149F                 mov     ecx, ds:_kIsNotArc ; jumptable 00001427 case 6
.text:000014A5                 mov     [ebp+var_8], ecx
.text:000014A8                 jmp     short loc_14BD  ; jumptable 00001427 default case
.text:000014AA ; ---------------------------------------------------------------------------
.text:000014AA
.text:000014AA $LN4_2:                                 ; CODE XREF: SetExtractErrorMessage(int,int,AString &)+4Bj
.text:000014AA                                         ; DATA XREF: .text:$LN23_0o
.text:000014AA                 mov     edx, ds:_kHeadersError ; jumptable 00001427 case 7
.text:000014B0                 mov     [ebp+var_8], edx
.text:000014B3                 jmp     short loc_14BD  ; jumptable 00001427 default case
.text:000014B5 ; ---------------------------------------------------------------------------
.text:000014B5
.text:000014B5 $LN3_0:                                 ; CODE XREF: SetExtractErrorMessage(int,int,AString &)+4Bj
.text:000014B5                                         ; DATA XREF: .text:$LN23_0o
.text:000014B5                 mov     eax, ds:_kWrongPassword ; jumptable 00001427 case 8
.text:000014BA                 mov     [ebp+var_8], eax
.text:000014BD
.text:000014BD loc_14BD:                               ; CODE XREF: SetExtractErrorMessage(int,int,AString &)+42j
.text:000014BD                                         ; SetExtractErrorMessage(int,int,AString &)+5Aj ...
.text:000014BD                 mov     ecx, ds:_kError ; jumptable 00001427 default case
.text:000014C3                 push    ecx
.text:000014C4                 mov     ecx, [ebp+arg_8]
.text:000014C7                 call    ??YAString@@QAEAAV0@PBD@Z ; AString::operator+=(char const *)
.text:000014CC                 cmp     [ebp+var_8], 0
.text:000014D0                 jz      short loc_14E0
.text:000014D2                 mov     edx, [ebp+var_8]
.text:000014D5                 push    edx
.text:000014D6                 mov     ecx, [ebp+arg_8]
.text:000014D9                 call    ??YAString@@QAEAAV0@PBD@Z ; AString::operator+=(char const *)
.text:000014DE                 jmp     short loc_1506
.text:000014E0 ; ---------------------------------------------------------------------------
.text:000014E0
.text:000014E0 loc_14E0:                               ; CODE XREF: SetExtractErrorMessage(int,int,AString &)+F4j
.text:000014E0                 lea     eax, [ebp+var_1C]
.text:000014E3                 push    eax             ; char *
.text:000014E4                 mov     ecx, [ebp+arg_0]
.text:000014E7                 push    ecx             ; unsigned int
.text:000014E8                 call    ?ConvertUInt32ToString@@YGXIPAD@Z ; ConvertUInt32ToString(uint,char *)
.text:000014ED                 push    offset $SG75661 ; "Error #"
.text:000014F2                 mov     ecx, [ebp+arg_8]
.text:000014F5                 call    ??YAString@@QAEAAV0@PBD@Z ; AString::operator+=(char const *)
.text:000014FA                 lea     edx, [ebp+var_1C]
.text:000014FD                 push    edx
.text:000014FE                 mov     ecx, [ebp+arg_8]
.text:00001501                 call    ??YAString@@QAEAAV0@PBD@Z ; AString::operator+=(char const *)
.text:00001506
.text:00001506 loc_1506:                               ; CODE XREF: SetExtractErrorMessage(int,int,AString &)+102j
.text:00001506                 push    edx
.text:00001507                 mov     ecx, ebp
.text:00001509                 push    eax
.text:0000150A                 lea     edx, $LN22_0
.text:00001510                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001515                 pop     eax
.text:00001516                 pop     edx
.text:00001517                 pop     edi
.text:00001518                 mov     ecx, [ebp+var_4]
.text:0000151B                 xor     ecx, ebp
.text:0000151D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00001522                 add     esp, 2Ch
.text:00001525                 cmp     ebp, esp
.text:00001527                 call    __RTC_CheckEsp
.text:0000152C                 mov     esp, ebp
.text:0000152E                 pop     ebp
.text:0000152F                 retn    0Ch
.text:0000152F ?SetExtractErrorMessage@@YGXHHAAVAString@@@Z endp
.text:0000152F
.text:0000152F ; ---------------------------------------------------------------------------
.text:00001532                 align 4
.text:00001534 $LN22_0         dd 1                    ; DATA XREF: SetExtractErrorMessage(int,int,AString &)+12Eo
.text:00001538                 dd offset $LN21_0
.text:0000153C $LN21_0         dd 0FFFFFFE4h, 10h      ; DATA XREF: .text:00001538o
.text:00001544                 dd offset $LN20         ; "temp"
.text:00001548 $LN20           db 'temp',0             ; DATA XREF: .text:00001544o
.text:0000154D                 align 10h
.text:00001550 $LN23_0         dd offset $LN11_0       ; DATA XREF: SetExtractErrorMessage(int,int,AString &)+4Br
.text:00001550                 dd offset $LN9_2        ; jump table for switch statement
.text:00001550                 dd offset $LN10_1
.text:00001550                 dd offset $LN8_2
.text:00001550                 dd offset $LN7_3
.text:00001550                 dd offset $LN6_3
.text:00001550                 dd offset $LN5_5
.text:00001550                 dd offset $LN4_2
.text:00001550                 dd offset $LN3_0
.text:00001574                 db 8 dup(0CCh)
.text:0000157C
.text:0000157C ; =============== S U B R O U T I N E =======================================
.text:0000157C
.text:0000157C ; Attributes: bp-based frame
.text:0000157C
.text:0000157C ; __int32 __stdcall CExtractCallbackConsole::SetOperationResult(CExtractCallbackConsole *this, unsigned int, int)
.text:0000157C                 public ?SetOperationResult@CExtractCallbackConsole@@UAGJHH@Z
.text:0000157C ?SetOperationResult@CExtractCallbackConsole@@UAGJHH@Z proc near
.text:0000157C
.text:0000157C var_24          = dword ptr -24h
.text:0000157C var_20          = dword ptr -20h
.text:0000157C var_1C          = dword ptr -1Ch
.text:0000157C var_18          = dword ptr -18h
.text:0000157C var_14          = dword ptr -14h
.text:0000157C var_10          = dword ptr -10h
.text:0000157C var_C           = dword ptr -0Ch
.text:0000157C var_8           = dword ptr -8
.text:0000157C var_4           = dword ptr -4
.text:0000157C this            = dword ptr  8
.text:0000157C arg_4           = dword ptr  0Ch
.text:0000157C arg_8           = dword ptr  10h
.text:0000157C
.text:0000157C                 push    ebp
.text:0000157D                 mov     ebp, esp
.text:0000157F                 sub     esp, 24h
.text:00001582                 mov     eax, 0CCCCCCCCh
.text:00001587                 mov     [ebp+var_24], eax
.text:0000158A                 mov     [ebp+var_20], eax
.text:0000158D                 mov     [ebp+var_1C], eax
.text:00001590                 mov     [ebp+var_18], eax
.text:00001593                 mov     [ebp+var_14], eax
.text:00001596                 mov     [ebp+var_10], eax
.text:00001599                 mov     [ebp+var_C], eax
.text:0000159C                 mov     [ebp+var_8], eax
.text:0000159F                 mov     [ebp+var_4], eax
.text:000015A2                 push    offset _g_CriticalSection ; struct NWindows::NSynchronization::CCriticalSection *
.text:000015A7                 lea     ecx, [ebp+var_8] ; this
.text:000015AA                 call    ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z ; NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock(NWindows::NSynchronization::CCriticalSection &)
.text:000015AF                 cmp     [ebp+arg_4], 0
.text:000015B3                 jnz     short loc_15FA
.text:000015B5                 mov     ecx, [ebp+this]
.text:000015B8                 add     ecx, 10h        ; this
.text:000015BB                 call    ?NeedPercents@COpenCallbackConsole@@IBE_NXZ ; COpenCallbackConsole::NeedPercents(void)
.text:000015C0                 movzx   eax, al
.text:000015C3                 test    eax, eax
.text:000015C5                 jz      short loc_15F5
.text:000015C7                 mov     ecx, [ebp+this]
.text:000015CA                 add     ecx, 30h ; '0'  ; this
.text:000015CD                 call    ?Empty@AString@@QAEXXZ ; AString::Empty(void)
.text:000015D2                 mov     ecx, [ebp+this]
.text:000015D5                 add     ecx, 3Ch ; '<'  ; this
.text:000015D8                 call    ?Empty@UString@@QAEXXZ ; UString::Empty(void)
.text:000015DD                 mov     ecx, [ebp+this]
.text:000015E0                 mov     edx, [ecx+28h]
.text:000015E3                 add     edx, 1
.text:000015E6                 mov     eax, [ecx+2Ch]
.text:000015E9                 adc     eax, 0
.text:000015EC                 mov     ecx, [ebp+this]
.text:000015EF                 mov     [ecx+28h], edx
.text:000015F2                 mov     [ecx+2Ch], eax
.text:000015F5
.text:000015F5 loc_15F5:                               ; CODE XREF: CExtractCallbackConsole::SetOperationResult(int,int)+49j
.text:000015F5                 jmp     loc_16F1
.text:000015FA ; ---------------------------------------------------------------------------
.text:000015FA
.text:000015FA loc_15FA:                               ; CODE XREF: CExtractCallbackConsole::SetOperationResult(int,int)+37j
.text:000015FA                 mov     edx, [ebp+this]
.text:000015FD                 mov     eax, [edx+150h]
.text:00001603                 add     eax, 1
.text:00001606                 mov     ecx, [edx+154h]
.text:0000160C                 adc     ecx, 0
.text:0000160F                 mov     edx, [ebp+this]
.text:00001612                 mov     [edx+150h], eax
.text:00001618                 mov     [edx+154h], ecx
.text:0000161E                 mov     eax, [ebp+this]
.text:00001621                 mov     ecx, [eax+148h]
.text:00001627                 add     ecx, 1
.text:0000162A                 mov     edx, [eax+14Ch]
.text:00001630                 adc     edx, 0
.text:00001633                 mov     eax, [ebp+this]
.text:00001636                 mov     [eax+148h], ecx
.text:0000163C                 mov     [eax+14Ch], edx
.text:00001642                 mov     ecx, [ebp+this]
.text:00001645                 cmp     dword ptr [ecx+0CCh], 0
.text:0000164C                 jz      loc_16F1
.text:00001652                 mov     ecx, [ebp+this] ; this
.text:00001655                 call    ?ClosePercentsAndFlush@CExtractCallbackConsole@@AAEXXZ ; CExtractCallbackConsole::ClosePercentsAndFlush(void)
.text:0000165A                 lea     ecx, [ebp+var_1C]
.text:0000165D                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:00001662                 lea     edx, [ebp+var_1C]
.text:00001665                 push    edx             ; struct AString *
.text:00001666                 mov     eax, [ebp+arg_8]
.text:00001669                 push    eax             ; int
.text:0000166A                 mov     ecx, [ebp+arg_4]
.text:0000166D                 push    ecx             ; unsigned int
.text:0000166E                 call    ?SetExtractErrorMessage@@YGXHHAAVAString@@@Z ; SetExtractErrorMessage(int,int,AString &)
.text:00001673                 lea     ecx, [ebp+var_1C]
.text:00001676                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:0000167B                 push    eax             ; Str
.text:0000167C                 mov     edx, [ebp+this]
.text:0000167F                 mov     ecx, [edx+0CCh]
.text:00001685                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:0000168A                 mov     ecx, [ebp+this]
.text:0000168D                 add     ecx, 0FCh ; 'n' ; this
.text:00001693                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:00001698                 movzx   eax, al
.text:0000169B                 test    eax, eax
.text:0000169D                 jnz     short loc_16C8
.text:0000169F                 mov     ecx, [ebp+this]
.text:000016A2                 add     ecx, 0FCh ; 'n'
.text:000016A8                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:000016AD                 push    eax
.text:000016AE                 push    offset $SG75674 ; " : "
.text:000016B3                 mov     ecx, [ebp+this]
.text:000016B6                 mov     ecx, [ecx+0CCh]
.text:000016BC                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:000016C1                 mov     ecx, eax
.text:000016C3                 call    ??6CStdOutStream@@QAEAAV0@PB_W@Z ; CStdOutStream::operator<<(wchar_t const *)
.text:000016C8
.text:000016C8 loc_16C8:                               ; CODE XREF: CExtractCallbackConsole::SetOperationResult(int,int)+121j
.text:000016C8                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:000016CD                 mov     edx, [ebp+this]
.text:000016D0                 mov     ecx, [edx+0CCh]
.text:000016D6                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:000016DB                 mov     eax, [ebp+this]
.text:000016DE                 mov     ecx, [eax+0CCh] ; this
.text:000016E4                 call    ?Flush@CStdOutStream@@QAE_NXZ ; CStdOutStream::Flush(void)
.text:000016E9                 lea     ecx, [ebp+var_1C] ; this
.text:000016EC                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:000016F1
.text:000016F1 loc_16F1:                               ; CODE XREF: CExtractCallbackConsole::SetOperationResult(int,int):loc_15F5j
.text:000016F1                                         ; CExtractCallbackConsole::SetOperationResult(int,int)+D0j
.text:000016F1                 call    ?CheckBreak2@@YGJXZ ; CheckBreak2(void)
.text:000016F6                 mov     [ebp+var_24], eax
.text:000016F9                 lea     ecx, [ebp+var_8] ; this
.text:000016FC                 call    ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)
.text:00001701                 mov     eax, [ebp+var_24]
.text:00001704                 push    edx
.text:00001705                 mov     ecx, ebp
.text:00001707                 push    eax
.text:00001708                 lea     edx, $LN11_1
.text:0000170E                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001713                 pop     eax
.text:00001714                 pop     edx
.text:00001715                 add     esp, 24h
.text:00001718                 cmp     ebp, esp
.text:0000171A                 call    __RTC_CheckEsp
.text:0000171F                 mov     esp, ebp
.text:00001721                 pop     ebp
.text:00001722                 retn    0Ch
.text:00001722 ?SetOperationResult@CExtractCallbackConsole@@UAGJHH@Z endp
.text:00001722
.text:00001722 ; ---------------------------------------------------------------------------
.text:00001725                 align 4
.text:00001728 $LN11_1         dd 2                    ; DATA XREF: CExtractCallbackConsole::SetOperationResult(int,int)+18Co
.text:0000172C                 dd offset $LN10_2
.text:00001730 $LN10_2         dd 0FFFFFFF8h, 4        ; DATA XREF: .text:0000172Co
.text:00001738                 dd offset $LN8_3        ; "lock"
.text:0000173C                 dd 0FFFFFFE4h, 0Ch
.text:00001744                 dd offset $LN9_3
.text:00001748 $LN9_3          db 73h, 0               ; DATA XREF: .text:00001744o
.text:0000174A $LN8_3          db 'lock',0             ; DATA XREF: .text:00001738o
.text:0000174F                 db 0Dh dup(0CCh)
.text:0000175C
.text:0000175C ; =============== S U B R O U T I N E =======================================
.text:0000175C
.text:0000175C ; Attributes: bp-based frame
.text:0000175C
.text:0000175C ; __int32 __stdcall CExtractCallbackConsole::ReportExtractResult(CExtractCallbackConsole *this, int, int, const wchar_t *)
.text:0000175C                 public ?ReportExtractResult@CExtractCallbackConsole@@UAGJHHPB_W@Z
.text:0000175C ?ReportExtractResult@CExtractCallbackConsole@@UAGJHHPB_W@Z proc near
.text:0000175C
.text:0000175C this            = dword ptr  8
.text:0000175C arg_4           = dword ptr  0Ch
.text:0000175C arg_8           = dword ptr  10h
.text:0000175C arg_C           = dword ptr  14h
.text:0000175C
.text:0000175C                 push    ebp
.text:0000175D                 mov     ebp, esp
.text:0000175F                 push    esi
.text:00001760                 cmp     [ebp+arg_4], 0
.text:00001764                 jz      short loc_179D
.text:00001766                 mov     eax, [ebp+arg_C]
.text:00001769                 push    eax
.text:0000176A                 mov     ecx, [ebp+this]
.text:0000176D                 add     ecx, 0F8h ; '°'
.text:00001773                 call    ??4UString@@QAEAAV0@PB_W@Z ; UString::operator=(wchar_t const *)
.text:00001778                 mov     esi, esp
.text:0000177A                 mov     ecx, [ebp+arg_8]
.text:0000177D                 push    ecx
.text:0000177E                 mov     edx, [ebp+arg_4]
.text:00001781                 push    edx
.text:00001782                 mov     eax, [ebp+this]
.text:00001785                 sub     eax, 4
.text:00001788                 mov     ecx, [ebp+this]
.text:0000178B                 mov     edx, [ecx-4]
.text:0000178E                 push    eax
.text:0000178F                 mov     eax, [edx+20h]
.text:00001792                 call    eax
.text:00001794                 cmp     esi, esp
.text:00001796                 call    __RTC_CheckEsp
.text:0000179B                 jmp     short loc_17A2
.text:0000179D ; ---------------------------------------------------------------------------
.text:0000179D
.text:0000179D loc_179D:                               ; CODE XREF: CExtractCallbackConsole::ReportExtractResult(int,int,wchar_t const *)+8j
.text:0000179D                 call    ?CheckBreak2@@YGJXZ ; CheckBreak2(void)
.text:000017A2
.text:000017A2 loc_17A2:                               ; CODE XREF: CExtractCallbackConsole::ReportExtractResult(int,int,wchar_t const *)+3Fj
.text:000017A2                 pop     esi
.text:000017A3                 cmp     ebp, esp
.text:000017A5                 call    __RTC_CheckEsp
.text:000017AA                 pop     ebp
.text:000017AB                 retn    10h
.text:000017AB ?ReportExtractResult@CExtractCallbackConsole@@UAGJHHPB_W@Z endp
.text:000017AB
.text:000017AB ; ---------------------------------------------------------------------------
.text:000017AE                 db 0Eh dup(0CCh)
.text:000017BC
.text:000017BC ; =============== S U B R O U T I N E =======================================
.text:000017BC
.text:000017BC ; Attributes: bp-based frame
.text:000017BC
.text:000017BC ; __int32 __thiscall CExtractCallbackConsole::SetPassword(CExtractCallbackConsole *this, const struct UString *)
.text:000017BC                 public ?SetPassword@CExtractCallbackConsole@@UAEJABVUString@@@Z
.text:000017BC ?SetPassword@CExtractCallbackConsole@@UAEJABVUString@@@Z proc near
.text:000017BC
.text:000017BC var_4           = dword ptr -4
.text:000017BC arg_0           = dword ptr  8
.text:000017BC
.text:000017BC                 push    ebp
.text:000017BD                 mov     ebp, esp
.text:000017BF                 push    ecx
.text:000017C0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000017C7                 mov     [ebp+var_4], ecx
.text:000017CA                 mov     eax, [ebp+var_4]
.text:000017CD                 mov     byte ptr [eax+0D3h], 1
.text:000017D4                 mov     ecx, [ebp+arg_0]
.text:000017D7                 push    ecx
.text:000017D8                 mov     ecx, [ebp+var_4]
.text:000017DB                 add     ecx, 0D4h ; '+'
.text:000017E1                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:000017E6                 xor     eax, eax
.text:000017E8                 add     esp, 4
.text:000017EB                 cmp     ebp, esp
.text:000017ED                 call    __RTC_CheckEsp
.text:000017F2                 mov     esp, ebp
.text:000017F4                 pop     ebp
.text:000017F5                 retn    4
.text:000017F5 ?SetPassword@CExtractCallbackConsole@@UAEJABVUString@@@Z endp
.text:000017F5
.text:000017F5 ; ---------------------------------------------------------------------------
.text:000017F8                 db 4 dup(0CCh)
.text:000017FC
.text:000017FC ; =============== S U B R O U T I N E =======================================
.text:000017FC
.text:000017FC ; Attributes: bp-based frame
.text:000017FC
.text:000017FC ; __int32 __cdecl CExtractCallbackConsole::CryptoGetTextPassword(CExtractCallbackConsole *this, wchar_t **)
.text:000017FC                 public ?CryptoGetTextPassword@CExtractCallbackConsole@@UAGJPAPA_W@Z
.text:000017FC ?CryptoGetTextPassword@CExtractCallbackConsole@@UAGJPAPA_W@Z proc near
.text:000017FC
.text:000017FC var_2C          = dword ptr -2Ch
.text:000017FC var_28          = dword ptr -28h
.text:000017FC var_24          = dword ptr -24h
.text:000017FC var_20          = dword ptr -20h
.text:000017FC var_1C          = dword ptr -1Ch
.text:000017FC var_18          = dword ptr -18h
.text:000017FC var_14          = dword ptr -14h
.text:000017FC var_10          = dword ptr -10h
.text:000017FC var_C           = dword ptr -0Ch
.text:000017FC var_4           = dword ptr -4
.text:000017FC this            = dword ptr  8
.text:000017FC arg_4           = dword ptr  0Ch
.text:000017FC
.text:000017FC ; FUNCTION CHUNK AT .text:000018BB SIZE 0000002F BYTES
.text:000017FC
.text:000017FC                 push    ebp
.text:000017FD                 mov     ebp, esp
.text:000017FF                 push    0FFFFFFFFh
.text:00001801                 push    offset __ehhandler$?CryptoGetTextPassword@CExtractCallbackConsole@@UAGJPAPA_W@Z
.text:00001806                 mov     eax, large fs:0
.text:0000180C                 push    eax
.text:0000180D                 push    ecx
.text:0000180E                 sub     esp, 1Ch
.text:00001811                 push    ebx
.text:00001812                 push    esi
.text:00001813                 push    edi
.text:00001814                 mov     eax, 0CCCCCCCCh
.text:00001819                 mov     [ebp+var_2C], eax
.text:0000181C                 mov     [ebp+var_28], eax
.text:0000181F                 mov     [ebp+var_24], eax
.text:00001822                 mov     [ebp+var_20], eax
.text:00001825                 mov     [ebp+var_1C], eax
.text:00001828                 mov     [ebp+var_18], eax
.text:0000182B                 mov     [ebp+var_14], eax
.text:0000182E                 mov     eax, dword ptr ds:___security_cookie
.text:00001833                 xor     eax, ebp
.text:00001835                 push    eax
.text:00001836                 lea     eax, [ebp+var_C]
.text:00001839                 mov     large fs:0, eax
.text:0000183F                 mov     [ebp+var_10], esp
.text:00001842                 mov     [ebp+var_4], 0
.text:00001849                 push    offset _g_CriticalSection ; struct NWindows::NSynchronization::CCriticalSection *
.text:0000184E                 lea     ecx, [ebp+var_18] ; this
.text:00001851                 call    ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z ; NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock(NWindows::NSynchronization::CCriticalSection &)
.text:00001856                 mov     [ebp+var_28], eax
.text:00001859                 mov     byte ptr [ebp+var_4], 1
.text:0000185D                 mov     esi, esp
.text:0000185F                 mov     eax, [ebp+arg_4]
.text:00001862                 push    eax
.text:00001863                 mov     ecx, [ebp+this]
.text:00001866                 add     ecx, 8
.text:00001869                 mov     edx, [ebp+this]
.text:0000186C                 mov     eax, [edx+8]
.text:0000186F                 mov     edx, [eax+10h]
.text:00001872                 call    edx
.text:00001874                 cmp     esi, esp
.text:00001876                 call    __RTC_CheckEsp
.text:0000187B                 mov     [ebp+var_2C], eax
.text:0000187E                 mov     eax, [ebp+var_2C]
.text:00001881                 mov     [ebp+var_20], eax
.text:00001884                 mov     byte ptr [ebp+var_4], 0
.text:00001888                 lea     ecx, [ebp+var_18] ; this
.text:0000188B                 call    ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)
.text:00001890                 mov     eax, [ebp+var_20]
.text:00001893                 jmp     short loc_18BB
.text:00001893 ?CryptoGetTextPassword@CExtractCallbackConsole@@UAGJPAPA_W@Z endp
.text:00001893
.text:00001895
.text:00001895 ; =============== S U B R O U T I N E =======================================
.text:00001895
.text:00001895
.text:00001895 __catch$?CryptoGetTextPassword@CExtractCallbackConsole@@UAGJPAPA_W@Z$0 proc near
.text:00001895                                         ; DATA XREF: .xdata$x:00002A4Co
.text:00001895                 mov     dword ptr [ebp-24h], 8007000Eh
.text:0000189C                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:000018A3                 mov     eax, offset $LN8_4
.text:000018A8                 retn
.text:000018A8 __catch$?CryptoGetTextPassword@CExtractCallbackConsole@@UAGJPAPA_W@Z$0 endp
.text:000018A8
.text:000018A9 ; ---------------------------------------------------------------------------
.text:000018A9                 mov     eax, offset __tryend$?CryptoGetTextPassword@CExtractCallbackConsole@@UAGJPAPA_W@Z$1
.text:000018AE                 retn
.text:000018AF ; ---------------------------------------------------------------------------
.text:000018AF
.text:000018AF __tryend$?CryptoGetTextPassword@CExtractCallbackConsole@@UAGJPAPA_W@Z$1:
.text:000018AF                                         ; DATA XREF: .text:000018A9o
.text:000018AF                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:000018B6                 jmp     short loc_18BB
.text:000018B8 ; ---------------------------------------------------------------------------
.text:000018B8
.text:000018B8 $LN8_4:                                 ; DATA XREF: __catch$?CryptoGetTextPassword@CExtractCallbackConsole@@UAGJPAPA_W@Z$0+Eo
.text:000018B8                 mov     eax, [ebp-24h]
.text:000018BB ; START OF FUNCTION CHUNK FOR ?CryptoGetTextPassword@CExtractCallbackConsole@@UAGJPAPA_W@Z
.text:000018BB
.text:000018BB loc_18BB:                               ; CODE XREF: CExtractCallbackConsole::CryptoGetTextPassword(wchar_t * *)+97j
.text:000018BB                                         ; .text:000018B6j
.text:000018BB                 push    edx
.text:000018BC                 mov     ecx, ebp
.text:000018BE                 push    eax
.text:000018BF                 lea     edx, $LN13_0
.text:000018C5                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000018CA                 pop     eax
.text:000018CB                 pop     edx
.text:000018CC                 mov     ecx, [ebp+var_C]
.text:000018CF                 mov     large fs:0, ecx
.text:000018D6                 pop     ecx
.text:000018D7                 pop     edi
.text:000018D8                 pop     esi
.text:000018D9                 pop     ebx
.text:000018DA                 add     esp, 2Ch
.text:000018DD                 cmp     ebp, esp
.text:000018DF                 call    __RTC_CheckEsp
.text:000018E4                 mov     esp, ebp
.text:000018E6                 pop     ebp
.text:000018E7                 retn    8
.text:000018E7 ; END OF FUNCTION CHUNK FOR ?CryptoGetTextPassword@CExtractCallbackConsole@@UAGJPAPA_W@Z
.text:000018E7 ; ---------------------------------------------------------------------------
.text:000018EA                 align 4
.text:000018EC $LN13_0         dd 1                    ; DATA XREF: CExtractCallbackConsole::CryptoGetTextPassword(wchar_t * *)+C3o
.text:000018F0                 dd offset $LN12_0
.text:000018F4 $LN12_0         dd 0FFFFFFE8h, 4        ; DATA XREF: .text:000018F0o
.text:000018FC                 dd offset $LN10_3       ; "lock"
.text:00001900 $LN10_3         db 'lock',0             ; DATA XREF: .text:000018FCo
.text:00001905                 db 7 dup(0CCh)
.text:0000190C
.text:0000190C ; =============== S U B R O U T I N E =======================================
.text:0000190C
.text:0000190C ; Attributes: bp-based frame
.text:0000190C
.text:0000190C ; __int32 __thiscall CExtractCallbackConsole::BeforeOpen(CExtractCallbackConsole *this, const wchar_t *, bool)
.text:0000190C                 public ?BeforeOpen@CExtractCallbackConsole@@UAEJPB_W_N@Z
.text:0000190C ?BeforeOpen@CExtractCallbackConsole@@UAEJPB_W_N@Z proc near
.text:0000190C
.text:0000190C Str             = dword ptr -0Ch
.text:0000190C var_8           = dword ptr -8
.text:0000190C var_4           = dword ptr -4
.text:0000190C arg_0           = dword ptr  8
.text:0000190C arg_4           = byte ptr  0Ch
.text:0000190C
.text:0000190C                 push    ebp
.text:0000190D                 mov     ebp, esp
.text:0000190F                 sub     esp, 0Ch
.text:00001912                 mov     [ebp+Str], 0CCCCCCCCh
.text:00001919                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001920                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001927                 mov     [ebp+var_4], ecx
.text:0000192A                 call    ?CheckBreak2@@YGJXZ ; CheckBreak2(void)
.text:0000192F                 mov     [ebp+var_8], eax
.text:00001932                 cmp     [ebp+var_8], 0
.text:00001936                 jz      short loc_1940
.text:00001938                 mov     eax, [ebp+var_8]
.text:0000193B                 jmp     loc_1A17
.text:00001940 ; ---------------------------------------------------------------------------
.text:00001940
.text:00001940 loc_1940:                               ; CODE XREF: CExtractCallbackConsole::BeforeOpen(wchar_t const *,bool)+2Aj
.text:00001940                 mov     eax, [ebp+var_4]
.text:00001943                 mov     ecx, [eax+108h]
.text:00001949                 add     ecx, 1
.text:0000194C                 mov     edx, [eax+10Ch]
.text:00001952                 adc     edx, 0
.text:00001955                 mov     eax, [ebp+var_4]
.text:00001958                 mov     [eax+108h], ecx
.text:0000195E                 mov     [eax+10Ch], edx
.text:00001964                 mov     ecx, [ebp+var_4]
.text:00001967                 mov     byte ptr [ecx+110h], 0
.text:0000196E                 mov     edx, [ebp+var_4]
.text:00001971                 mov     byte ptr [edx+111h], 0
.text:00001978                 mov     eax, [ebp+var_4]
.text:0000197B                 mov     dword ptr [eax+150h], 0
.text:00001985                 mov     dword ptr [eax+154h], 0
.text:0000198F                 mov     ecx, [ebp+var_4] ; this
.text:00001992                 call    ?ClosePercents_for_so@CExtractCallbackConsole@@AAEXXZ ; CExtractCallbackConsole::ClosePercents_for_so(void)
.text:00001997                 mov     ecx, [ebp+var_4]
.text:0000199A                 cmp     dword ptr [ecx+0C8h], 0
.text:000019A1                 jz      short loc_19F3
.text:000019A3                 movzx   edx, [ebp+arg_4]
.text:000019A7                 test    edx, edx
.text:000019A9                 jz      short loc_19B5
.text:000019AB                 mov     eax, ds:_kTesting
.text:000019B0                 mov     [ebp+Str], eax
.text:000019B3                 jmp     short loc_19BE
.text:000019B5 ; ---------------------------------------------------------------------------
.text:000019B5
.text:000019B5 loc_19B5:                               ; CODE XREF: CExtractCallbackConsole::BeforeOpen(wchar_t const *,bool)+9Dj
.text:000019B5                 mov     ecx, ds:_kExtracting
.text:000019BB                 mov     [ebp+Str], ecx
.text:000019BE
.text:000019BE loc_19BE:                               ; CODE XREF: CExtractCallbackConsole::BeforeOpen(wchar_t const *,bool)+A7j
.text:000019BE                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:000019C3                 mov     edx, [ebp+arg_0]
.text:000019C6                 push    edx
.text:000019C7                 mov     eax, [ebp+Str]
.text:000019CA                 push    eax             ; Str
.text:000019CB                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:000019D0                 mov     ecx, [ebp+var_4]
.text:000019D3                 mov     ecx, [ecx+0C8h]
.text:000019D9                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:000019DE                 mov     ecx, eax
.text:000019E0                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:000019E5                 mov     ecx, eax
.text:000019E7                 call    ??6CStdOutStream@@QAEAAV0@PB_W@Z ; CStdOutStream::operator<<(wchar_t const *)
.text:000019EC                 mov     ecx, eax
.text:000019EE                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:000019F3
.text:000019F3 loc_19F3:                               ; CODE XREF: CExtractCallbackConsole::BeforeOpen(wchar_t const *,bool)+95j
.text:000019F3                 mov     ecx, [ebp+var_4]
.text:000019F6                 add     ecx, 10h        ; this
.text:000019F9                 call    ?NeedPercents@COpenCallbackConsole@@IBE_NXZ ; COpenCallbackConsole::NeedPercents(void)
.text:000019FE                 movzx   edx, al
.text:00001A01                 test    edx, edx
.text:00001A03                 jz      short loc_1A15
.text:00001A05                 push    offset $SG75706 ; "Open"
.text:00001A0A                 mov     ecx, [ebp+var_4]
.text:00001A0D                 add     ecx, 30h ; '0'
.text:00001A10                 call    ??4AString@@QAEAAV0@PBD@Z ; AString::operator=(char const *)
.text:00001A15
.text:00001A15 loc_1A15:                               ; CODE XREF: CExtractCallbackConsole::BeforeOpen(wchar_t const *,bool)+F7j
.text:00001A15                 xor     eax, eax
.text:00001A17
.text:00001A17 loc_1A17:                               ; CODE XREF: CExtractCallbackConsole::BeforeOpen(wchar_t const *,bool)+2Fj
.text:00001A17                 add     esp, 0Ch
.text:00001A1A                 cmp     ebp, esp
.text:00001A1C                 call    __RTC_CheckEsp
.text:00001A21                 mov     esp, ebp
.text:00001A23                 pop     ebp
.text:00001A24                 retn    8
.text:00001A24 ?BeforeOpen@CExtractCallbackConsole@@UAEJPB_W_N@Z endp
.text:00001A24
.text:00001A24 ; ---------------------------------------------------------------------------
.text:00001A27                 db 5 dup(0CCh)
.text:00001A2C
.text:00001A2C ; =============== S U B R O U T I N E =======================================
.text:00001A2C
.text:00001A2C ; Attributes: bp-based frame
.text:00001A2C
.text:00001A2C ; void __stdcall PrintErrorFlags(struct CStdOutStream *, const char *Str, unsigned int)
.text:00001A2C                 public ?PrintErrorFlags@@YGXAAVCStdOutStream@@PBDI@Z
.text:00001A2C ?PrintErrorFlags@@YGXAAVCStdOutStream@@PBDI@Z proc near
.text:00001A2C                                         ; CODE XREF: CExtractCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+158p
.text:00001A2C                                         ; CExtractCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+2D9p
.text:00001A2C
.text:00001A2C var_20          = dword ptr -20h
.text:00001A2C var_1C          = dword ptr -1Ch
.text:00001A2C var_18          = dword ptr -18h
.text:00001A2C var_14          = dword ptr -14h
.text:00001A2C var_10          = dword ptr -10h
.text:00001A2C var_C           = dword ptr -0Ch
.text:00001A2C var_4           = dword ptr -4
.text:00001A2C arg_0           = dword ptr  8
.text:00001A2C Str             = dword ptr  0Ch
.text:00001A2C arg_8           = dword ptr  10h
.text:00001A2C
.text:00001A2C                 push    ebp
.text:00001A2D                 mov     ebp, esp
.text:00001A2F                 push    0FFFFFFFFh
.text:00001A31                 push    offset __ehhandler$?PrintErrorFlags@@YGXAAVCStdOutStream@@PBDI@Z
.text:00001A36                 mov     eax, large fs:0
.text:00001A3C                 push    eax
.text:00001A3D                 sub     esp, 14h
.text:00001A40                 mov     eax, 0CCCCCCCCh
.text:00001A45                 mov     [ebp+var_20], eax
.text:00001A48                 mov     [ebp+var_1C], eax
.text:00001A4B                 mov     [ebp+var_18], eax
.text:00001A4E                 mov     [ebp+var_14], eax
.text:00001A51                 mov     [ebp+var_10], eax
.text:00001A54                 mov     eax, dword ptr ds:___security_cookie
.text:00001A59                 xor     eax, ebp
.text:00001A5B                 push    eax
.text:00001A5C                 lea     eax, [ebp+var_C]
.text:00001A5F                 mov     large fs:0, eax
.text:00001A65                 cmp     [ebp+arg_8], 0
.text:00001A69                 jnz     short loc_1A6D
.text:00001A6B                 jmp     short loc_1ACD
.text:00001A6D ; ---------------------------------------------------------------------------
.text:00001A6D
.text:00001A6D loc_1A6D:                               ; CODE XREF: PrintErrorFlags(CStdOutStream &,char const *,uint)+3Dj
.text:00001A6D                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00001A72                 mov     eax, [ebp+arg_8]
.text:00001A75                 push    eax
.text:00001A76                 lea     ecx, [ebp+var_18]
.text:00001A79                 push    ecx
.text:00001A7A                 call    ?GetOpenArcErrorMessage@@YG?AVAString@@I@Z ; GetOpenArcErrorMessage(uint)
.text:00001A7F                 mov     [ebp+var_1C], eax
.text:00001A82                 mov     edx, [ebp+var_1C]
.text:00001A85                 mov     [ebp+var_20], edx
.text:00001A88                 mov     [ebp+var_4], 0
.text:00001A8F                 mov     ecx, [ebp+var_20]
.text:00001A92                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:00001A97                 push    eax             ; Str
.text:00001A98                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00001A9D                 mov     eax, [ebp+Str]
.text:00001AA0                 push    eax             ; Str
.text:00001AA1                 mov     ecx, [ebp+arg_0]
.text:00001AA4                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00001AA9                 mov     ecx, eax
.text:00001AAB                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00001AB0                 mov     ecx, eax
.text:00001AB2                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00001AB7                 mov     ecx, eax
.text:00001AB9                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00001ABE                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001AC5                 lea     ecx, [ebp+var_18] ; this
.text:00001AC8                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00001ACD
.text:00001ACD loc_1ACD:                               ; CODE XREF: PrintErrorFlags(CStdOutStream &,char const *,uint)+3Fj
.text:00001ACD                 mov     ecx, [ebp+var_C]
.text:00001AD0                 mov     large fs:0, ecx
.text:00001AD7                 pop     ecx
.text:00001AD8                 add     esp, 20h
.text:00001ADB                 cmp     ebp, esp
.text:00001ADD                 call    __RTC_CheckEsp
.text:00001AE2                 mov     esp, ebp
.text:00001AE4                 pop     ebp
.text:00001AE5                 retn    0Ch
.text:00001AE5 ?PrintErrorFlags@@YGXAAVCStdOutStream@@PBDI@Z endp
.text:00001AE5
.text:00001AE5 ; ---------------------------------------------------------------------------
.text:00001AE8                 db 4 dup(0CCh)
.text:00001AEC
.text:00001AEC ; =============== S U B R O U T I N E =======================================
.text:00001AEC
.text:00001AEC ; Attributes: bp-based frame
.text:00001AEC
.text:00001AEC ; class AString __stdcall GetOpenArcErrorMessage(unsigned int)
.text:00001AEC ?GetOpenArcErrorMessage@@YG?AVAString@@I@Z proc near
.text:00001AEC                                         ; CODE XREF: PrintErrorFlags(CStdOutStream &,char const *,uint)+4Ep
.text:00001AEC
.text:00001AEC var_4C          = dword ptr -4Ch
.text:00001AEC var_44          = byte ptr -44h
.text:00001AEC var_43          = byte ptr -43h
.text:00001AEC var_42          = byte ptr -42h
.text:00001AEC var_30          = dword ptr -30h
.text:00001AEC var_2C          = dword ptr -2Ch
.text:00001AEC var_28          = dword ptr -28h
.text:00001AEC var_20          = byte ptr -20h
.text:00001AEC var_10          = dword ptr -10h
.text:00001AEC var_C           = dword ptr -0Ch
.text:00001AEC var_4           = dword ptr -4
.text:00001AEC arg_0           = dword ptr  8
.text:00001AEC arg_4           = dword ptr  0Ch
.text:00001AEC
.text:00001AEC                 push    ebp
.text:00001AED                 mov     ebp, esp
.text:00001AEF                 push    0FFFFFFFFh
.text:00001AF1                 push    offset __ehhandler$?GetOpenArcErrorMessage@@YG?AVAString@@I@Z
.text:00001AF6                 mov     eax, large fs:0
.text:00001AFC                 push    eax
.text:00001AFD                 sub     esp, 40h
.text:00001B00                 push    edi
.text:00001B01                 lea     edi, [ebp+var_4C]
.text:00001B04                 mov     ecx, 10h
.text:00001B09                 mov     eax, 0CCCCCCCCh
.text:00001B0E                 rep stosd
.text:00001B10                 mov     eax, dword ptr ds:___security_cookie
.text:00001B15                 xor     eax, ebp
.text:00001B17                 mov     [ebp+var_10], eax
.text:00001B1A                 push    eax
.text:00001B1B                 lea     eax, [ebp+var_C]
.text:00001B1E                 mov     large fs:0, eax
.text:00001B24                 mov     [ebp+var_4C], 0
.text:00001B2B                 lea     ecx, [ebp+var_20]
.text:00001B2E                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:00001B33                 mov     [ebp+var_4], 1
.text:00001B3A                 mov     [ebp+var_28], 0
.text:00001B41                 jmp     short loc_1B4C
.text:00001B43 ; ---------------------------------------------------------------------------
.text:00001B43
.text:00001B43 loc_1B43:                               ; CODE XREF: GetOpenArcErrorMessage(uint)+7Bj
.text:00001B43                                         ; GetOpenArcErrorMessage(uint)+B8j
.text:00001B43                 mov     eax, [ebp+var_28]
.text:00001B46                 add     eax, 1
.text:00001B49                 mov     [ebp+var_28], eax
.text:00001B4C
.text:00001B4C loc_1B4C:                               ; CODE XREF: GetOpenArcErrorMessage(uint)+55j
.text:00001B4C                 cmp     [ebp+var_28], 0Bh
.text:00001B50                 jnb     short loc_1BA6
.text:00001B52                 mov     edx, 1
.text:00001B57                 mov     ecx, [ebp+var_28]
.text:00001B5A                 shl     edx, cl
.text:00001B5C                 mov     [ebp+var_2C], edx
.text:00001B5F                 mov     eax, [ebp+arg_4]
.text:00001B62                 and     eax, [ebp+var_2C]
.text:00001B65                 jnz     short loc_1B69
.text:00001B67                 jmp     short loc_1B43
.text:00001B69 ; ---------------------------------------------------------------------------
.text:00001B69
.text:00001B69 loc_1B69:                               ; CODE XREF: GetOpenArcErrorMessage(uint)+79j
.text:00001B69                 mov     ecx, [ebp+var_28]
.text:00001B6C                 mov     edx, _k_ErrorFlagsMessages[ecx*4]
.text:00001B73                 mov     [ebp+var_30], edx
.text:00001B76                 lea     ecx, [ebp+var_20] ; this
.text:00001B79                 call    ?IsEmpty@AString@@QBE_NXZ ; AString::IsEmpty(void)
.text:00001B7E                 movzx   eax, al
.text:00001B81                 test    eax, eax
.text:00001B83                 jnz     short loc_1B8D
.text:00001B85                 lea     ecx, [ebp+var_20] ; this
.text:00001B88                 call    ?Add_LF@AString@@QAEXXZ ; AString::Add_LF(void)
.text:00001B8D
.text:00001B8D loc_1B8D:                               ; CODE XREF: GetOpenArcErrorMessage(uint)+97j
.text:00001B8D                 mov     ecx, [ebp+var_30]
.text:00001B90                 push    ecx
.text:00001B91                 lea     ecx, [ebp+var_20]
.text:00001B94                 call    ??YAString@@QAEAAV0@PBD@Z ; AString::operator+=(char const *)
.text:00001B99                 mov     edx, [ebp+var_2C]
.text:00001B9C                 not     edx
.text:00001B9E                 and     edx, [ebp+arg_4]
.text:00001BA1                 mov     [ebp+arg_4], edx
.text:00001BA4                 jmp     short loc_1B43
.text:00001BA6 ; ---------------------------------------------------------------------------
.text:00001BA6
.text:00001BA6 loc_1BA6:                               ; CODE XREF: GetOpenArcErrorMessage(uint)+64j
.text:00001BA6                 cmp     [ebp+arg_4], 0
.text:00001BAA                 jz      short loc_1BE4
.text:00001BAC                 mov     [ebp+var_44], 30h ; '0'
.text:00001BB0                 mov     [ebp+var_43], 78h ; 'x'
.text:00001BB4                 lea     eax, [ebp+var_42]
.text:00001BB7                 push    eax             ; char *
.text:00001BB8                 mov     ecx, [ebp+arg_4]
.text:00001BBB                 push    ecx             ; unsigned int
.text:00001BBC                 call    ?ConvertUInt32ToHex@@YGXIPAD@Z ; ConvertUInt32ToHex(uint,char *)
.text:00001BC1                 lea     ecx, [ebp+var_20] ; this
.text:00001BC4                 call    ?IsEmpty@AString@@QBE_NXZ ; AString::IsEmpty(void)
.text:00001BC9                 movzx   edx, al
.text:00001BCC                 test    edx, edx
.text:00001BCE                 jnz     short loc_1BD8
.text:00001BD0                 lea     ecx, [ebp+var_20] ; this
.text:00001BD3                 call    ?Add_LF@AString@@QAEXXZ ; AString::Add_LF(void)
.text:00001BD8
.text:00001BD8 loc_1BD8:                               ; CODE XREF: GetOpenArcErrorMessage(uint)+E2j
.text:00001BD8                 lea     eax, [ebp+var_44]
.text:00001BDB                 push    eax
.text:00001BDC                 lea     ecx, [ebp+var_20]
.text:00001BDF                 call    ??YAString@@QAEAAV0@PBD@Z ; AString::operator+=(char const *)
.text:00001BE4
.text:00001BE4 loc_1BE4:                               ; CODE XREF: GetOpenArcErrorMessage(uint)+BEj
.text:00001BE4                 lea     ecx, [ebp+var_20]
.text:00001BE7                 push    ecx
.text:00001BE8                 mov     ecx, [ebp+arg_0]
.text:00001BEB                 call    ??0AString@@QAE@ABV0@@Z ; AString::AString(AString const &)
.text:00001BF0                 mov     edx, [ebp+var_4C]
.text:00001BF3                 or      edx, 1
.text:00001BF6                 mov     [ebp+var_4C], edx
.text:00001BF9                 mov     byte ptr [ebp+var_4], 0
.text:00001BFD                 lea     ecx, [ebp+var_20] ; this
.text:00001C00                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00001C05                 mov     eax, [ebp+arg_0]
.text:00001C08                 push    edx
.text:00001C09                 mov     ecx, ebp
.text:00001C0B                 push    eax
.text:00001C0C                 lea     edx, $LN17_0
.text:00001C12                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001C17                 pop     eax
.text:00001C18                 pop     edx
.text:00001C19                 mov     ecx, [ebp+var_C]
.text:00001C1C                 mov     large fs:0, ecx
.text:00001C23                 pop     ecx
.text:00001C24                 pop     edi
.text:00001C25                 mov     ecx, [ebp+var_10]
.text:00001C28                 xor     ecx, ebp
.text:00001C2A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00001C2F                 add     esp, 4Ch
.text:00001C32                 cmp     ebp, esp
.text:00001C34                 call    __RTC_CheckEsp
.text:00001C39                 mov     esp, ebp
.text:00001C3B                 pop     ebp
.text:00001C3C                 retn    8
.text:00001C3C ?GetOpenArcErrorMessage@@YG?AVAString@@I@Z endp
.text:00001C3C
.text:00001C3C ; ---------------------------------------------------------------------------
.text:00001C3F                 align 10h
.text:00001C40 $LN17_0         dd 2                    ; DATA XREF: GetOpenArcErrorMessage(uint)+120o
.text:00001C44                 dd offset $LN16_0
.text:00001C48 $LN16_0         dd 0FFFFFFE0h, 0Ch      ; DATA XREF: .text:00001C44o
.text:00001C50                 dd offset $LN13_1
.text:00001C54                 dd 0FFFFFFBCh, 10h
.text:00001C5C                 dd offset $LN14
.text:00001C60 $LN14           db 73h, 7Ah, 0          ; DATA XREF: .text:00001C5Co
.text:00001C63 $LN13_1         db 73h                  ; DATA XREF: .text:00001C50o
.text:00001C64                 dd 0CCCCCC00h, 0CCCCCCCCh
.text:00001C6C
.text:00001C6C ; =============== S U B R O U T I N E =======================================
.text:00001C6C
.text:00001C6C ; Attributes: bp-based frame
.text:00001C6C
.text:00001C6C ; void __stdcall Add_Messsage_Pre_ArcType(struct UString *, const char *, const wchar_t *)
.text:00001C6C                 public ?Add_Messsage_Pre_ArcType@@YGXAAVUString@@PBDPB_W@Z
.text:00001C6C ?Add_Messsage_Pre_ArcType@@YGXAAVUString@@PBDPB_W@Z proc near
.text:00001C6C                                         ; CODE XREF: Print_ErrorFormatIndex_Warning(CStdOutStream *,CCodecs const *,CArc const &)+A9p
.text:00001C6C                                         ; Print_ErrorFormatIndex_Warning(CStdOutStream *,CCodecs const *,CArc const &)+CAp
.text:00001C6C
.text:00001C6C arg_0           = dword ptr  8
.text:00001C6C arg_4           = dword ptr  0Ch
.text:00001C6C arg_8           = dword ptr  10h
.text:00001C6C
.text:00001C6C                 push    ebp
.text:00001C6D                 mov     ebp, esp
.text:00001C6F                 mov     ecx, [ebp+arg_0] ; this
.text:00001C72                 call    ?Add_LF@UString@@QAEXXZ ; UString::Add_LF(void)
.text:00001C77                 mov     eax, [ebp+arg_4]
.text:00001C7A                 push    eax             ; char *
.text:00001C7B                 mov     ecx, [ebp+arg_0] ; this
.text:00001C7E                 call    ?AddAscii@UString@@QAEXPBD@Z ; UString::AddAscii(char const *)
.text:00001C83                 push    offset $SG75744 ; " as ["
.text:00001C88                 mov     ecx, [ebp+arg_0] ; this
.text:00001C8B                 call    ?AddAscii@UString@@QAEXPBD@Z ; UString::AddAscii(char const *)
.text:00001C90                 mov     ecx, [ebp+arg_8]
.text:00001C93                 push    ecx
.text:00001C94                 mov     ecx, [ebp+arg_0]
.text:00001C97                 call    ??YUString@@QAEAAV0@PB_W@Z ; UString::operator+=(wchar_t const *)
.text:00001C9C                 push    offset $SG75745 ; "] archive"
.text:00001CA1                 mov     ecx, [ebp+arg_0] ; this
.text:00001CA4                 call    ?AddAscii@UString@@QAEXPBD@Z ; UString::AddAscii(char const *)
.text:00001CA9                 cmp     ebp, esp
.text:00001CAB                 call    __RTC_CheckEsp
.text:00001CB0                 pop     ebp
.text:00001CB1                 retn    0Ch
.text:00001CB1 ?Add_Messsage_Pre_ArcType@@YGXAAVUString@@PBDPB_W@Z endp
.text:00001CB1
.text:00001CB1 ; ---------------------------------------------------------------------------
.text:00001CB4                 db 8 dup(0CCh)
.text:00001CBC
.text:00001CBC ; =============== S U B R O U T I N E =======================================
.text:00001CBC
.text:00001CBC ; Attributes: bp-based frame
.text:00001CBC
.text:00001CBC ; void __stdcall Print_ErrorFormatIndex_Warning(struct CStdOutStream *, const struct CCodecs *, const struct CArc *)
.text:00001CBC                 public ?Print_ErrorFormatIndex_Warning@@YGXPAVCStdOutStream@@PBVCCodecs@@ABVCArc@@@Z
.text:00001CBC ?Print_ErrorFormatIndex_Warning@@YGXPAVCStdOutStream@@PBVCCodecs@@ABVCArc@@@Z proc near
.text:00001CBC                                         ; CODE XREF: CExtractCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+3F8p
.text:00001CBC
.text:00001CBC var_24          = dword ptr -24h
.text:00001CBC var_20          = dword ptr -20h
.text:00001CBC var_1C          = dword ptr -1Ch
.text:00001CBC var_18          = dword ptr -18h
.text:00001CBC var_14          = dword ptr -14h
.text:00001CBC var_10          = dword ptr -10h
.text:00001CBC var_C           = dword ptr -0Ch
.text:00001CBC var_4           = dword ptr -4
.text:00001CBC arg_0           = dword ptr  8
.text:00001CBC arg_4           = dword ptr  0Ch
.text:00001CBC arg_8           = dword ptr  10h
.text:00001CBC
.text:00001CBC                 push    ebp
.text:00001CBD                 mov     ebp, esp
.text:00001CBF                 push    0FFFFFFFFh
.text:00001CC1                 push    offset __ehhandler$?Print_ErrorFormatIndex_Warning@@YGXPAVCStdOutStream@@PBVCCodecs@@ABVCArc@@@Z
.text:00001CC6                 mov     eax, large fs:0
.text:00001CCC                 push    eax
.text:00001CCD                 sub     esp, 18h
.text:00001CD0                 mov     eax, 0CCCCCCCCh
.text:00001CD5                 mov     [ebp+var_24], eax
.text:00001CD8                 mov     [ebp+var_20], eax
.text:00001CDB                 mov     [ebp+var_1C], eax
.text:00001CDE                 mov     [ebp+var_18], eax
.text:00001CE1                 mov     [ebp+var_14], eax
.text:00001CE4                 mov     [ebp+var_10], eax
.text:00001CE7                 mov     eax, dword ptr ds:___security_cookie
.text:00001CEC                 xor     eax, ebp
.text:00001CEE                 push    eax
.text:00001CEF                 lea     eax, [ebp+var_C]
.text:00001CF2                 mov     large fs:0, eax
.text:00001CF8                 mov     eax, [ebp+arg_8]
.text:00001CFB                 add     eax, 10h
.text:00001CFE                 mov     [ebp+var_10], eax
.text:00001D01                 push    offset $SG75753 ; "WARNING:\n"
.text:00001D06                 lea     ecx, [ebp+var_20]
.text:00001D09                 call    ??0UString@@QAE@PB_W@Z ; UString::UString(wchar_t const *)
.text:00001D0E                 mov     [ebp+var_4], 0
.text:00001D15                 mov     ecx, [ebp+arg_8]
.text:00001D18                 add     ecx, 70h ; 'p'
.text:00001D1B                 push    ecx
.text:00001D1C                 lea     ecx, [ebp+var_20]
.text:00001D1F                 call    ??YUString@@QAEAAV0@ABV0@@Z ; UString::operator+=(UString const &)
.text:00001D24                 mov     edx, [ebp+arg_8]
.text:00001D27                 mov     eax, [ebp+var_10]
.text:00001D2A                 mov     ecx, [edx+94h]
.text:00001D30                 cmp     ecx, [eax+0Ch]
.text:00001D33                 jnz     short loc_1D4C
.text:00001D35                 lea     ecx, [ebp+var_20] ; this
.text:00001D38                 call    ?Add_LF@UString@@QAEXXZ ; UString::Add_LF(void)
.text:00001D3D                 push    offset $SG75755 ; "The archive is open with offset"
.text:00001D42                 lea     ecx, [ebp+var_20] ; this
.text:00001D45                 call    ?AddAscii@UString@@QAEXPBD@Z ; UString::AddAscii(char const *)
.text:00001D4A                 jmp     short loc_1D8B
.text:00001D4C ; ---------------------------------------------------------------------------
.text:00001D4C
.text:00001D4C loc_1D4C:                               ; CODE XREF: Print_ErrorFormatIndex_Warning(CStdOutStream *,CCodecs const *,CArc const &)+77j
.text:00001D4C                 mov     edx, [ebp+var_10]
.text:00001D4F                 mov     eax, [edx+0Ch]
.text:00001D52                 push    eax             ; int
.text:00001D53                 mov     ecx, [ebp+arg_4] ; this
.text:00001D56                 call    ?GetFormatNamePtr@CCodecs@@QBEPB_WH@Z ; CCodecs::GetFormatNamePtr(int)
.text:00001D5B                 push    eax             ; wchar_t *
.text:00001D5C                 push    offset $SG75757 ; "Can not open the file"
.text:00001D61                 lea     ecx, [ebp+var_20]
.text:00001D64                 push    ecx             ; struct UString *
.text:00001D65                 call    ?Add_Messsage_Pre_ArcType@@YGXAAVUString@@PBDPB_W@Z ; Add_Messsage_Pre_ArcType(UString &,char const *,wchar_t const *)
.text:00001D6A                 mov     edx, [ebp+arg_8]
.text:00001D6D                 mov     eax, [edx+94h]
.text:00001D73                 push    eax             ; int
.text:00001D74                 mov     ecx, [ebp+arg_4] ; this
.text:00001D77                 call    ?GetFormatNamePtr@CCodecs@@QBEPB_WH@Z ; CCodecs::GetFormatNamePtr(int)
.text:00001D7C                 push    eax             ; wchar_t *
.text:00001D7D                 push    offset $SG75758 ; "The file is open"
.text:00001D82                 lea     ecx, [ebp+var_20]
.text:00001D85                 push    ecx             ; struct UString *
.text:00001D86                 call    ?Add_Messsage_Pre_ArcType@@YGXAAVUString@@PBDPB_W@Z ; Add_Messsage_Pre_ArcType(UString &,char const *,wchar_t const *)
.text:00001D8B
.text:00001D8B loc_1D8B:                               ; CODE XREF: Print_ErrorFormatIndex_Warning(CStdOutStream *,CCodecs const *,CArc const &)+8Ej
.text:00001D8B                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00001D90                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00001D95                 lea     ecx, [ebp+var_20]
.text:00001D98                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00001D9D                 push    eax
.text:00001D9E                 mov     ecx, [ebp+arg_0]
.text:00001DA1                 call    ??6CStdOutStream@@QAEAAV0@PB_W@Z ; CStdOutStream::operator<<(wchar_t const *)
.text:00001DA6                 mov     ecx, eax
.text:00001DA8                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00001DAD                 mov     ecx, eax
.text:00001DAF                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00001DB4                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001DBB                 lea     ecx, [ebp+var_20] ; this
.text:00001DBE                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001DC3                 push    edx
.text:00001DC4                 mov     ecx, ebp
.text:00001DC6                 push    eax
.text:00001DC7                 lea     edx, $LN9_4
.text:00001DCD                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001DD2                 pop     eax
.text:00001DD3                 pop     edx
.text:00001DD4                 mov     ecx, [ebp+var_C]
.text:00001DD7                 mov     large fs:0, ecx
.text:00001DDE                 pop     ecx
.text:00001DDF                 add     esp, 24h
.text:00001DE2                 cmp     ebp, esp
.text:00001DE4                 call    __RTC_CheckEsp
.text:00001DE9                 mov     esp, ebp
.text:00001DEB                 pop     ebp
.text:00001DEC                 retn    0Ch
.text:00001DEC ?Print_ErrorFormatIndex_Warning@@YGXPAVCStdOutStream@@PBVCCodecs@@ABVCArc@@@Z endp
.text:00001DEC
.text:00001DEC ; ---------------------------------------------------------------------------
.text:00001DEF                 align 10h
.text:00001DF0 $LN9_4          dd 1                    ; DATA XREF: Print_ErrorFormatIndex_Warning(CStdOutStream *,CCodecs const *,CArc const &)+10Bo
.text:00001DF4                 dd offset $LN8_5
.text:00001DF8 $LN8_5          dd 0FFFFFFE0h, 0Ch      ; DATA XREF: .text:00001DF4o
.text:00001E00                 dd offset $LN6_4
.text:00001E04 $LN6_4          dd 0CCCC0073h, 0CCCCCCCCh ; DATA XREF: .text:00001E00o
.text:00001E0C
.text:00001E0C ; =============== S U B R O U T I N E =======================================
.text:00001E0C
.text:00001E0C ; Attributes: bp-based frame
.text:00001E0C
.text:00001E0C ; __int32 __thiscall CExtractCallbackConsole::OpenResult(CExtractCallbackConsole *this, const struct CCodecs *, const struct CArchiveLink *, const wchar_t *, __int32)
.text:00001E0C                 public ?OpenResult@CExtractCallbackConsole@@UAEJPBVCCodecs@@ABUCArchiveLink@@PB_WJ@Z
.text:00001E0C ?OpenResult@CExtractCallbackConsole@@UAEJPBVCCodecs@@ABUCArchiveLink@@PB_WJ@Z proc near
.text:00001E0C
.text:00001E0C var_44          = dword ptr -44h
.text:00001E0C var_40          = dword ptr -40h
.text:00001E0C var_3C          = byte ptr -3Ch
.text:00001E0C var_30          = dword ptr -30h
.text:00001E0C var_2C          = dword ptr -2Ch
.text:00001E0C var_28          = dword ptr -28h
.text:00001E0C var_24          = dword ptr -24h
.text:00001E0C var_20          = dword ptr -20h
.text:00001E0C var_1C          = dword ptr -1Ch
.text:00001E0C var_18          = dword ptr -18h
.text:00001E0C var_14          = dword ptr -14h
.text:00001E0C var_10          = dword ptr -10h
.text:00001E0C var_C           = dword ptr -0Ch
.text:00001E0C var_4           = dword ptr -4
.text:00001E0C arg_0           = dword ptr  8
.text:00001E0C arg_4           = dword ptr  0Ch
.text:00001E0C arg_8           = dword ptr  10h
.text:00001E0C arg_C           = dword ptr  14h
.text:00001E0C
.text:00001E0C                 push    ebp
.text:00001E0D                 mov     ebp, esp
.text:00001E0F                 push    0FFFFFFFFh
.text:00001E11                 push    offset __ehhandler$?OpenResult@CExtractCallbackConsole@@UAEJPBVCCodecs@@ABUCArchiveLink@@PB_WJ@Z
.text:00001E16                 mov     eax, large fs:0
.text:00001E1C                 push    eax
.text:00001E1D                 sub     esp, 38h
.text:00001E20                 push    edi
.text:00001E21                 push    ecx
.text:00001E22                 lea     edi, [ebp+var_44]
.text:00001E25                 mov     ecx, 0Eh
.text:00001E2A                 mov     eax, 0CCCCCCCCh
.text:00001E2F                 rep stosd
.text:00001E31                 pop     ecx
.text:00001E32                 mov     eax, dword ptr ds:___security_cookie
.text:00001E37                 xor     eax, ebp
.text:00001E39                 push    eax
.text:00001E3A                 lea     eax, [ebp+var_C]
.text:00001E3D                 mov     large fs:0, eax
.text:00001E43                 mov     [ebp+var_10], ecx
.text:00001E46                 mov     ecx, [ebp+var_10]
.text:00001E49                 add     ecx, 10h        ; this
.text:00001E4C                 call    ?ClosePercents@COpenCallbackConsole@@QAEXXZ ; COpenCallbackConsole::ClosePercents(void)
.text:00001E51                 mov     ecx, [ebp+var_10]
.text:00001E54                 add     ecx, 10h        ; this
.text:00001E57                 call    ?NeedPercents@COpenCallbackConsole@@IBE_NXZ ; COpenCallbackConsole::NeedPercents(void)
.text:00001E5C                 movzx   eax, al
.text:00001E5F                 test    eax, eax
.text:00001E61                 jz      short loc_1E8A
.text:00001E63                 mov     ecx, [ebp+var_10]
.text:00001E66                 mov     dword ptr [ecx+28h], 0
.text:00001E6D                 mov     dword ptr [ecx+2Ch], 0
.text:00001E74                 mov     ecx, [ebp+var_10]
.text:00001E77                 add     ecx, 30h ; '0'  ; this
.text:00001E7A                 call    ?Empty@AString@@QAEXXZ ; AString::Empty(void)
.text:00001E7F                 mov     ecx, [ebp+var_10]
.text:00001E82                 add     ecx, 3Ch ; '<'  ; this
.text:00001E85                 call    ?Empty@UString@@QAEXXZ ; UString::Empty(void)
.text:00001E8A
.text:00001E8A loc_1E8A:                               ; CODE XREF: CExtractCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+55j
.text:00001E8A                 mov     ecx, [ebp+var_10] ; this
.text:00001E8D                 call    ?ClosePercentsAndFlush@CExtractCallbackConsole@@AAEXXZ ; CExtractCallbackConsole::ClosePercentsAndFlush(void)
.text:00001E92                 mov     [ebp+var_14], 0
.text:00001E99                 jmp     short loc_1EA4
.text:00001E9B ; ---------------------------------------------------------------------------
.text:00001E9B
.text:00001E9B loc_1E9B:                               ; CODE XREF: CExtractCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long):loc_222Fj
.text:00001E9B                 mov     edx, [ebp+var_14]
.text:00001E9E                 add     edx, 1
.text:00001EA1                 mov     [ebp+var_14], edx
.text:00001EA4
.text:00001EA4 loc_1EA4:                               ; CODE XREF: CExtractCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+8Dj
.text:00001EA4                 mov     ecx, [ebp+arg_4]
.text:00001EA7                 call    ?Size@?$CObjectVector@VCArc@@@@QBEIXZ ; CObjectVector<CArc>::Size(void)
.text:00001EAC                 cmp     [ebp+var_14], eax
.text:00001EAF                 jnb     loc_2234
.text:00001EB5                 mov     eax, [ebp+var_14]
.text:00001EB8                 push    eax
.text:00001EB9                 mov     ecx, [ebp+arg_4]
.text:00001EBC                 call    ??A?$CObjectVector@VCArc@@@@QBEABVCArc@@I@Z ; CObjectVector<CArc>::operator[](uint)
.text:00001EC1                 mov     [ebp+var_18], eax
.text:00001EC4                 mov     ecx, [ebp+var_18]
.text:00001EC7                 add     ecx, 10h
.text:00001ECA                 mov     [ebp+var_1C], ecx
.text:00001ECD                 mov     ecx, [ebp+var_1C] ; this
.text:00001ED0                 call    ?GetErrorFlags@CArcErrorInfo@@QBEIXZ ; CArcErrorInfo::GetErrorFlags(void)
.text:00001ED5                 mov     [ebp+var_20], eax
.text:00001ED8                 cmp     [ebp+var_20], 0
.text:00001EDC                 jnz     short loc_1EF4
.text:00001EDE                 mov     ecx, [ebp+var_1C]
.text:00001EE1                 add     ecx, 18h        ; this
.text:00001EE4                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:00001EE9                 movzx   edx, al
.text:00001EEC                 test    edx, edx
.text:00001EEE                 jnz     loc_204E
.text:00001EF4
.text:00001EF4 loc_1EF4:                               ; CODE XREF: CExtractCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+D0j
.text:00001EF4                 mov     eax, [ebp+var_10]
.text:00001EF7                 cmp     dword ptr [eax+0CCh], 0
.text:00001EFE                 jz      short loc_1F3F
.text:00001F00                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00001F05                 mov     ecx, [ebp+var_10]
.text:00001F08                 mov     ecx, [ecx+0CCh]
.text:00001F0E                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00001F13                 cmp     [ebp+var_14], 0
.text:00001F17                 jz      short loc_1F3F
.text:00001F19                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00001F1E                 mov     ecx, [ebp+var_18]
.text:00001F21                 add     ecx, 70h ; 'p'
.text:00001F24                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00001F29                 push    eax
.text:00001F2A                 mov     edx, [ebp+var_10]
.text:00001F2D                 mov     ecx, [edx+0CCh]
.text:00001F33                 call    ??6CStdOutStream@@QAEAAV0@PB_W@Z ; CStdOutStream::operator<<(wchar_t const *)
.text:00001F38                 mov     ecx, eax
.text:00001F3A                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00001F3F
.text:00001F3F loc_1F3F:                               ; CODE XREF: CExtractCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+F2j
.text:00001F3F                                         ; CExtractCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+10Bj
.text:00001F3F                 cmp     [ebp+var_20], 0
.text:00001F43                 jz      short loc_1F97
.text:00001F45                 mov     eax, [ebp+var_10]
.text:00001F48                 cmp     dword ptr [eax+0CCh], 0
.text:00001F4F                 jz      short loc_1F69
.text:00001F51                 mov     ecx, [ebp+var_20]
.text:00001F54                 push    ecx             ; unsigned int
.text:00001F55                 push    offset $SG75780 ; "ERRORS:"
.text:00001F5A                 mov     edx, [ebp+var_10]
.text:00001F5D                 mov     eax, [edx+0CCh]
.text:00001F63                 push    eax             ; struct CStdOutStream *
.text:00001F64                 call    ?PrintErrorFlags@@YGXAAVCStdOutStream@@PBDI@Z ; PrintErrorFlags(CStdOutStream &,char const *,uint)
.text:00001F69
.text:00001F69 loc_1F69:                               ; CODE XREF: CExtractCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+143j
.text:00001F69                 mov     ecx, [ebp+var_10]
.text:00001F6C                 mov     edx, [ecx+138h]
.text:00001F72                 add     edx, 1
.text:00001F75                 mov     eax, [ecx+13Ch]
.text:00001F7B                 adc     eax, 0
.text:00001F7E                 mov     ecx, [ebp+var_10]
.text:00001F81                 mov     [ecx+138h], edx
.text:00001F87                 mov     [ecx+13Ch], eax
.text:00001F8D                 mov     edx, [ebp+var_10]
.text:00001F90                 mov     byte ptr [edx+110h], 1
.text:00001F97
.text:00001F97 loc_1F97:                               ; CODE XREF: CExtractCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+137j
.text:00001F97                 mov     ecx, [ebp+var_1C]
.text:00001F9A                 add     ecx, 18h        ; this
.text:00001F9D                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:00001FA2                 movzx   eax, al
.text:00001FA5                 test    eax, eax
.text:00001FA7                 jnz     short loc_2021
.text:00001FA9                 mov     ecx, [ebp+var_10]
.text:00001FAC                 cmp     dword ptr [ecx+0CCh], 0
.text:00001FB3                 jz      short loc_1FF3
.text:00001FB5                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00001FBA                 mov     ecx, [ebp+var_1C]
.text:00001FBD                 add     ecx, 18h
.text:00001FC0                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00001FC5                 push    eax
.text:00001FC6                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00001FCB                 push    offset $SG75783 ; "ERRORS:"
.text:00001FD0                 mov     edx, [ebp+var_10]
.text:00001FD3                 mov     ecx, [edx+0CCh]
.text:00001FD9                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00001FDE                 mov     ecx, eax
.text:00001FE0                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00001FE5                 mov     ecx, eax
.text:00001FE7                 call    ??6CStdOutStream@@QAEAAV0@PB_W@Z ; CStdOutStream::operator<<(wchar_t const *)
.text:00001FEC                 mov     ecx, eax
.text:00001FEE                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00001FF3
.text:00001FF3 loc_1FF3:                               ; CODE XREF: CExtractCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+1A7j
.text:00001FF3                 mov     eax, [ebp+var_10]
.text:00001FF6                 mov     ecx, [eax+138h]
.text:00001FFC                 add     ecx, 1
.text:00001FFF                 mov     edx, [eax+13Ch]
.text:00002005                 adc     edx, 0
.text:00002008                 mov     eax, [ebp+var_10]
.text:0000200B                 mov     [eax+138h], ecx
.text:00002011                 mov     [eax+13Ch], edx
.text:00002017                 mov     ecx, [ebp+var_10]
.text:0000201A
.text:0000201A loc_201A:                               ; DATA XREF: .rdata:$SG75543o
.text:0000201A                 mov     byte ptr [ecx+110h], 1
.text:00002021
.text:00002021 loc_2021:                               ; CODE XREF: CExtractCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+19Bj
.text:00002021                 mov     edx, [ebp+var_10]
.text:00002024                 cmp     dword ptr [edx+0CCh], 0
.text:0000202B
.text:0000202B loc_202B:                               ; DATA XREF: .rdata:$SG75433o
.text:0000202B                                         ; .rdata:$SG75436o ...
.text:0000202B                 jz      short loc_204E
.text:0000202D                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00002032                 mov     eax, [ebp+var_10]
.text:00002035                 mov     ecx, [eax+0CCh]
.text:0000203B                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00002040                 mov     ecx, [ebp+var_10]
.text:00002043                 mov     ecx, [ecx+0CCh] ; this
.text:00002049                 call    ?Flush@CStdOutStream@@QAE_NXZ ; CStdOutStream::Flush(void)
.text:0000204E
.text:0000204E loc_204E:                               ; CODE XREF: CExtractCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+E2j
.text:0000204E                                         ; CExtractCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long):loc_202Bj
.text:0000204E                 mov     ecx, [ebp+var_1C] ; this
.text:00002051                 call    ?GetWarningFlags@CArcErrorInfo@@QBEIXZ ; CArcErrorInfo::GetWarningFlags(void)
.text:00002056                 mov     [ebp+var_24], eax
.text:00002059                 cmp     [ebp+var_24], 0
.text:0000205D                 jnz     short loc_2075
.text:0000205F                 mov     ecx, [ebp+var_1C]
.text:00002062                 add     ecx, 24h ; '$'  ; this
.text:00002065                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:0000206A                 movzx   edx, al
.text:0000206D                 test    edx, edx
.text:0000206F                 jnz     loc_21DD
.text:00002075
.text:00002075 loc_2075:                               ; CODE XREF: CExtractCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+251j
.text:00002075                 mov     eax, [ebp+var_10]
.text:00002078                 cmp     dword ptr [eax+0C8h], 0
.text:0000207F                 jz      short loc_20C0
.text:00002081                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00002086                 mov     ecx, [ebp+var_10]
.text:00002089                 mov     ecx, [ecx+0C8h]
.text:0000208F                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00002094                 cmp     [ebp+var_14], 0
.text:00002098                 jz      short loc_20C0
.text:0000209A                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:0000209F                 mov     ecx, [ebp+var_18]
.text:000020A2                 add     ecx, 70h ; 'p'
.text:000020A5                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:000020AA                 push    eax
.text:000020AB                 mov     edx, [ebp+var_10]
.text:000020AE                 mov     ecx, [edx+0C8h]
.text:000020B4                 call    ??6CStdOutStream@@QAEAAV0@PB_W@Z ; CStdOutStream::operator<<(wchar_t const *)
.text:000020B9                 mov     ecx, eax
.text:000020BB                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:000020C0
.text:000020C0 loc_20C0:                               ; CODE XREF: CExtractCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+273j
.text:000020C0                                         ; CExtractCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+28Cj
.text:000020C0                 cmp     [ebp+var_24], 0
.text:000020C4                 jz      short loc_2118
.text:000020C6                 mov     eax, [ebp+var_10]
.text:000020C9                 cmp     dword ptr [eax+0C8h], 0
.text:000020D0                 jz      short loc_20EA
.text:000020D2                 mov     ecx, [ebp+var_24]
.text:000020D5                 push    ecx             ; unsigned int
.text:000020D6                 push    offset $SG75792 ; "WARNINGS:"
.text:000020DB                 mov     edx, [ebp+var_10]
.text:000020DE                 mov     eax, [edx+0C8h]
.text:000020E4                 push    eax             ; struct CStdOutStream *
.text:000020E5                 call    ?PrintErrorFlags@@YGXAAVCStdOutStream@@PBDI@Z ; PrintErrorFlags(CStdOutStream &,char const *,uint)
.text:000020EA
.text:000020EA loc_20EA:                               ; CODE XREF: CExtractCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+2C4j
.text:000020EA                 mov     ecx, [ebp+var_10]
.text:000020ED                 mov     edx, [ecx+140h]
.text:000020F3                 add     edx, 1
.text:000020F6                 mov     eax, [ecx+144h]
.text:000020FC                 adc     eax, 0
.text:000020FF                 mov     ecx, [ebp+var_10]
.text:00002102                 mov     [ecx+140h], edx
.text:00002108                 mov     [ecx+144h], eax
.text:0000210E                 mov     edx, [ebp+var_10]
.text:00002111                 mov     byte ptr [edx+111h], 1
.text:00002118
.text:00002118 loc_2118:                               ; CODE XREF: CExtractCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+2B8j
.text:00002118                 mov     ecx, [ebp+var_1C]
.text:0000211B                 add     ecx, 24h ; '$'  ; this
.text:0000211E                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:00002123                 movzx   eax, al
.text:00002126                 test    eax, eax
.text:00002128                 jnz     short loc_21A2
.text:0000212A                 mov     ecx, [ebp+var_10]
.text:0000212D                 cmp     dword ptr [ecx+0C8h], 0
.text:00002134                 jz      short loc_2174
.text:00002136                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:0000213B                 mov     ecx, [ebp+var_1C]
.text:0000213E                 add     ecx, 24h ; '$'
.text:00002141                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00002146                 push    eax
.text:00002147                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:0000214C                 push    offset $SG75795 ; "WARNINGS:"
.text:00002151                 mov     edx, [ebp+var_10]
.text:00002154                 mov     ecx, [edx+0C8h]
.text:0000215A                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:0000215F                 mov     ecx, eax
.text:00002161                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00002166                 mov     ecx, eax
.text:00002168                 call    ??6CStdOutStream@@QAEAAV0@PB_W@Z ; CStdOutStream::operator<<(wchar_t const *)
.text:0000216D                 mov     ecx, eax
.text:0000216F                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00002174
.text:00002174 loc_2174:                               ; CODE XREF: CExtractCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+328j
.text:00002174                 mov     eax, [ebp+var_10]
.text:00002177                 mov     ecx, [eax+140h]
.text:0000217D                 add     ecx, 1
.text:00002180                 mov     edx, [eax+144h]
.text:00002186                 adc     edx, 0
.text:00002189                 mov     eax, [ebp+var_10]
.text:0000218C                 mov     [eax+140h], ecx
.text:00002192                 mov     [eax+144h], edx
.text:00002198                 mov     ecx, [ebp+var_10]
.text:0000219B                 mov     byte ptr [ecx+111h], 1
.text:000021A2
.text:000021A2 loc_21A2:                               ; CODE XREF: CExtractCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+31Cj
.text:000021A2                 mov     edx, [ebp+var_10]
.text:000021A5                 cmp     dword ptr [edx+0C8h], 0
.text:000021AC                 jz      short loc_21DD
.text:000021AE                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:000021B3                 mov     eax, [ebp+var_10]
.text:000021B6                 mov     ecx, [eax+0C8h]
.text:000021BC                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:000021C1                 mov     ecx, [ebp+var_10]
.text:000021C4                 movzx   edx, byte ptr [ecx+158h]
.text:000021CB                 test    edx, edx
.text:000021CD                 jz      short loc_21DD
.text:000021CF                 mov     eax, [ebp+var_10]
.text:000021D2                 mov     ecx, [eax+0C8h] ; this
.text:000021D8                 call    ?Flush@CStdOutStream@@QAE_NXZ ; CStdOutStream::Flush(void)
.text:000021DD
.text:000021DD loc_21DD:                               ; CODE XREF: CExtractCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+263j
.text:000021DD                                         ; CExtractCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+3A0j ...
.text:000021DD                 mov     ecx, [ebp+var_1C]
.text:000021E0                 cmp     dword ptr [ecx+0Ch], 0
.text:000021E4                 jl      short loc_222F
.text:000021E6                 mov     edx, [ebp+var_10]
.text:000021E9                 cmp     dword ptr [edx+0C8h], 0
.text:000021F0                 jz      short loc_2225
.text:000021F2                 mov     eax, [ebp+var_18]
.text:000021F5                 push    eax             ; struct CArc *
.text:000021F6                 mov     ecx, [ebp+arg_0]
.text:000021F9                 push    ecx             ; struct CCodecs *
.text:000021FA                 mov     edx, [ebp+var_10]
.text:000021FD                 mov     eax, [edx+0C8h]
.text:00002203                 push    eax             ; struct CStdOutStream *
.text:00002204                 call    ?Print_ErrorFormatIndex_Warning@@YGXPAVCStdOutStream@@PBVCCodecs@@ABVCArc@@@Z ; Print_ErrorFormatIndex_Warning(CStdOutStream *,CCodecs const *,CArc const &)
.text:00002209                 mov     ecx, [ebp+var_10]
.text:0000220C                 movzx   edx, byte ptr [ecx+158h]
.text:00002213                 test    edx, edx
.text:00002215                 jz      short loc_2225
.text:00002217                 mov     eax, [ebp+var_10]
.text:0000221A                 mov     ecx, [eax+0C8h] ; this
.text:00002220                 call    ?Flush@CStdOutStream@@QAE_NXZ ; CStdOutStream::Flush(void)
.text:00002225
.text:00002225 loc_2225:                               ; CODE XREF: CExtractCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+3E4j
.text:00002225                                         ; CExtractCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+409j
.text:00002225                 mov     ecx, [ebp+var_10]
.text:00002228                 mov     byte ptr [ecx+111h], 1
.text:0000222F
.text:0000222F loc_222F:                               ; CODE XREF: CExtractCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+3D8j
.text:0000222F                 jmp     loc_1E9B
.text:00002234 ; ---------------------------------------------------------------------------
.text:00002234
.text:00002234 loc_2234:                               ; CODE XREF: CExtractCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+A3j
.text:00002234                 cmp     [ebp+arg_C], 0
.text:00002238                 jnz     short loc_2286
.text:0000223A                 mov     edx, [ebp+var_10]
.text:0000223D                 cmp     dword ptr [edx+0C8h], 0
.text:00002244                 jz      short loc_2281
.text:00002246                 mov     eax, [ebp+arg_4]
.text:00002249                 push    eax             ; struct CArchiveLink *
.text:0000224A                 mov     ecx, [ebp+arg_0]
.text:0000224D                 push    ecx             ; struct CCodecs *
.text:0000224E                 mov     edx, [ebp+var_10]
.text:00002251                 mov     eax, [edx+0C8h]
.text:00002257                 push    eax             ; struct CStdOutStream *
.text:00002258                 call    ?Print_OpenArchive_Props@@YGJAAVCStdOutStream@@PBVCCodecs@@ABUCArchiveLink@@@Z ; Print_OpenArchive_Props(CStdOutStream &,CCodecs const *,CArchiveLink const &)
.text:0000225D                 mov     [ebp+var_28], eax
.text:00002260                 cmp     [ebp+var_28], 0
.text:00002264                 jz      short loc_226E
.text:00002266                 mov     eax, [ebp+var_28]
.text:00002269                 jmp     loc_23BD
.text:0000226E ; ---------------------------------------------------------------------------
.text:0000226E
.text:0000226E loc_226E:                               ; CODE XREF: CExtractCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+458j
.text:0000226E                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00002273                 mov     ecx, [ebp+var_10]
.text:00002276                 mov     ecx, [ecx+0C8h]
.text:0000227C                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00002281
.text:00002281 loc_2281:                               ; CODE XREF: CExtractCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+438j
.text:00002281                 jmp     loc_23B8
.text:00002286 ; ---------------------------------------------------------------------------
.text:00002286
.text:00002286 loc_2286:                               ; CODE XREF: CExtractCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+42Cj
.text:00002286                 mov     edx, [ebp+var_10]
.text:00002289                 mov     eax, [edx+120h]
.text:0000228F                 add     eax, 1
.text:00002292                 mov     ecx, [edx+124h]
.text:00002298                 adc     ecx, 0
.text:0000229B                 mov     edx, [ebp+var_10]
.text:0000229E                 mov     [edx+120h], eax
.text:000022A4                 mov     [edx+124h], ecx
.text:000022AA                 mov     eax, [ebp+var_10]
.text:000022AD                 cmp     dword ptr [eax+0C8h], 0
.text:000022B4                 jz      short loc_22C4
.text:000022B6                 mov     ecx, [ebp+var_10]
.text:000022B9                 mov     ecx, [ecx+0C8h] ; this
.text:000022BF                 call    ?Flush@CStdOutStream@@QAE_NXZ ; CStdOutStream::Flush(void)
.text:000022C4
.text:000022C4 loc_22C4:                               ; CODE XREF: CExtractCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+4A8j
.text:000022C4                 mov     edx, [ebp+var_10]
.text:000022C7                 cmp     dword ptr [edx+0CCh], 0
.text:000022CE                 jz      loc_23B8
.text:000022D4                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:000022D9                 mov     eax, [ebp+arg_8]
.text:000022DC                 push    eax
.text:000022DD                 mov     ecx, ds:_kError
.text:000022E3                 push    ecx             ; Str
.text:000022E4                 mov     edx, [ebp+var_10]
.text:000022E7                 mov     ecx, [edx+0CCh]
.text:000022ED                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:000022F2                 mov     ecx, eax
.text:000022F4                 call    ??6CStdOutStream@@QAEAAV0@PB_W@Z ; CStdOutStream::operator<<(wchar_t const *)
.text:000022F9                 mov     ecx, eax
.text:000022FB                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00002300                 mov     eax, [ebp+arg_4]
.text:00002303                 push    eax             ; struct CArchiveLink *
.text:00002304                 mov     ecx, [ebp+arg_0]
.text:00002307                 push    ecx             ; struct CCodecs *
.text:00002308                 mov     edx, [ebp+var_10]
.text:0000230B                 mov     eax, [edx+0CCh]
.text:00002311                 push    eax             ; struct CStdOutStream *
.text:00002312                 call    ?Print_OpenArchive_Error@@YGJAAVCStdOutStream@@PBVCCodecs@@ABUCArchiveLink@@@Z ; Print_OpenArchive_Error(CStdOutStream &,CCodecs const *,CArchiveLink const &)
.text:00002317                 mov     [ebp+var_2C], eax
.text:0000231A                 mov     ecx, [ebp+var_2C]
.text:0000231D                 mov     [ebp+var_30], ecx
.text:00002320                 cmp     [ebp+var_30], 0
.text:00002324                 jz      short loc_232E
.text:00002326                 mov     eax, [ebp+var_30]
.text:00002329                 jmp     loc_23BD
.text:0000232E ; ---------------------------------------------------------------------------
.text:0000232E
.text:0000232E loc_232E:                               ; CODE XREF: CExtractCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+518j
.text:0000232E                 cmp     [ebp+arg_C], 1
.text:00002332                 jnz     short loc_2336
.text:00002334                 jmp     short loc_23AA
.text:00002336 ; ---------------------------------------------------------------------------
.text:00002336
.text:00002336 loc_2336:                               ; CODE XREF: CExtractCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+526j
.text:00002336                 cmp     [ebp+arg_C], 8007000Eh
.text:0000233D                 jnz     short loc_2354
.text:0000233F                 push    offset $SG75817 ; "Can't allocate required memory"
.text:00002344                 mov     edx, [ebp+var_10]
.text:00002347                 mov     ecx, [edx+0CCh]
.text:0000234D                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00002352                 jmp     short loc_2397
.text:00002354 ; ---------------------------------------------------------------------------
.text:00002354
.text:00002354 loc_2354:                               ; CODE XREF: CExtractCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+531j
.text:00002354                 mov     eax, [ebp+arg_C]
.text:00002357                 push    eax
.text:00002358                 lea     ecx, [ebp+var_3C]
.text:0000235B                 push    ecx
.text:0000235C                 call    ?MyFormatMessage@NError@NWindows@@YG?AVUString@@K@Z ; NWindows::NError::MyFormatMessage(ulong)
.text:00002361                 mov     [ebp+var_40], eax
.text:00002364                 mov     edx, [ebp+var_40]
.text:00002367                 mov     [ebp+var_44], edx
.text:0000236A                 mov     [ebp+var_4], 0
.text:00002371                 mov     ecx, [ebp+var_44]
.text:00002374                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00002379                 push    eax
.text:0000237A                 mov     eax, [ebp+var_10]
.text:0000237D                 mov     ecx, [eax+0CCh]
.text:00002383                 call    ??6CStdOutStream@@QAEAAV0@PB_W@Z ; CStdOutStream::operator<<(wchar_t const *)
.text:00002388                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000238F                 lea     ecx, [ebp+var_3C] ; this
.text:00002392                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00002397
.text:00002397 loc_2397:                               ; CODE XREF: CExtractCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+546j
.text:00002397                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:0000239C                 mov     ecx, [ebp+var_10]
.text:0000239F                 mov     ecx, [ecx+0CCh]
.text:000023A5                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:000023AA
.text:000023AA loc_23AA:                               ; CODE XREF: CExtractCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+528j
.text:000023AA                 mov     edx, [ebp+var_10]
.text:000023AD                 mov     ecx, [edx+0CCh] ; this
.text:000023B3                 call    ?Flush@CStdOutStream@@QAE_NXZ ; CStdOutStream::Flush(void)
.text:000023B8
.text:000023B8 loc_23B8:                               ; CODE XREF: CExtractCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long):loc_2281j
.text:000023B8                                         ; CExtractCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+4C2j
.text:000023B8                 call    ?CheckBreak2@@YGJXZ ; CheckBreak2(void)
.text:000023BD
.text:000023BD loc_23BD:                               ; CODE XREF: CExtractCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+45Dj
.text:000023BD                                         ; CExtractCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+51Dj
.text:000023BD                 mov     ecx, [ebp+var_C]
.text:000023C0                 mov     large fs:0, ecx
.text:000023C7                 pop     ecx
.text:000023C8                 pop     edi
.text:000023C9                 add     esp, 44h
.text:000023CC                 cmp     ebp, esp
.text:000023CE                 call    __RTC_CheckEsp
.text:000023D3                 mov     esp, ebp
.text:000023D5                 pop     ebp
.text:000023D6                 retn    10h
.text:000023D6 ?OpenResult@CExtractCallbackConsole@@UAEJPBVCCodecs@@ABUCArchiveLink@@PB_WJ@Z endp
.text:000023D6
.text:000023D6 ; ---------------------------------------------------------------------------
.text:000023D9                 align 4
.text:000023DC
.text:000023DC ; =============== S U B R O U T I N E =======================================
.text:000023DC
.text:000023DC ; Attributes: bp-based frame
.text:000023DC
.text:000023DC ; __int32 __thiscall CExtractCallbackConsole::ThereAreNoFiles(CExtractCallbackConsole *__hidden this)
.text:000023DC                 public ?ThereAreNoFiles@CExtractCallbackConsole@@UAEJXZ
.text:000023DC ?ThereAreNoFiles@CExtractCallbackConsole@@UAEJXZ proc near
.text:000023DC
.text:000023DC var_4           = dword ptr -4
.text:000023DC
.text:000023DC                 push    ebp
.text:000023DD                 mov     ebp, esp
.text:000023DF                 push    ecx
.text:000023E0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000023E7                 mov     [ebp+var_4], ecx
.text:000023EA                 mov     ecx, [ebp+var_4] ; this
.text:000023ED                 call    ?ClosePercents_for_so@CExtractCallbackConsole@@AAEXXZ ; CExtractCallbackConsole::ClosePercents_for_so(void)
.text:000023F2                 mov     eax, [ebp+var_4]
.text:000023F5                 cmp     dword ptr [eax+0C8h], 0
.text:000023FC                 jz      short loc_2447
.text:000023FE                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00002403                 mov     ecx, ds:_kNoFiles
.text:00002409                 push    ecx             ; Str
.text:0000240A                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:0000240F                 mov     edx, [ebp+var_4]
.text:00002412                 mov     ecx, [edx+0C8h]
.text:00002418                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:0000241D                 mov     ecx, eax
.text:0000241F                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00002424                 mov     ecx, eax
.text:00002426                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:0000242B                 mov     eax, [ebp+var_4]
.text:0000242E                 movzx   ecx, byte ptr [eax+158h]
.text:00002435                 test    ecx, ecx
.text:00002437                 jz      short loc_2447
.text:00002439                 mov     edx, [ebp+var_4]
.text:0000243C                 mov     ecx, [edx+0C8h] ; this
.text:00002442                 call    ?Flush@CStdOutStream@@QAE_NXZ ; CStdOutStream::Flush(void)
.text:00002447
.text:00002447 loc_2447:                               ; CODE XREF: CExtractCallbackConsole::ThereAreNoFiles(void)+20j
.text:00002447                                         ; CExtractCallbackConsole::ThereAreNoFiles(void)+5Bj
.text:00002447                 call    ?CheckBreak2@@YGJXZ ; CheckBreak2(void)
.text:0000244C                 add     esp, 4
.text:0000244F                 cmp     ebp, esp
.text:00002451                 call    __RTC_CheckEsp
.text:00002456                 mov     esp, ebp
.text:00002458                 pop     ebp
.text:00002459                 retn
.text:00002459 ?ThereAreNoFiles@CExtractCallbackConsole@@UAEJXZ endp
.text:00002459
.text:00002459 ; ---------------------------------------------------------------------------
.text:0000245A                 align 4
.text:0000245C
.text:0000245C ; =============== S U B R O U T I N E =======================================
.text:0000245C
.text:0000245C ; Attributes: bp-based frame
.text:0000245C
.text:0000245C ; __int32 __thiscall CExtractCallbackConsole::ExtractResult(CExtractCallbackConsole *this, __int32)
.text:0000245C                 public ?ExtractResult@CExtractCallbackConsole@@UAEJJ@Z
.text:0000245C ?ExtractResult@CExtractCallbackConsole@@UAEJJ@Z proc near
.text:0000245C
.text:0000245C var_40          = dword ptr -40h
.text:0000245C var_3C          = dword ptr -3Ch
.text:0000245C var_38          = dword ptr -38h
.text:0000245C var_34          = dword ptr -34h
.text:0000245C var_30          = dword ptr -30h
.text:0000245C var_2C          = byte ptr -2Ch
.text:0000245C var_20          = dword ptr -20h
.text:0000245C var_18          = byte ptr -18h
.text:0000245C var_10          = dword ptr -10h
.text:0000245C var_C           = dword ptr -0Ch
.text:0000245C var_4           = dword ptr -4
.text:0000245C arg_0           = dword ptr  8
.text:0000245C
.text:0000245C                 push    ebp
.text:0000245D                 mov     ebp, esp
.text:0000245F                 push    0FFFFFFFFh
.text:00002461                 push    offset __ehhandler$?ExtractResult@CExtractCallbackConsole@@UAEJJ@Z
.text:00002466                 mov     eax, large fs:0
.text:0000246C                 push    eax
.text:0000246D                 sub     esp, 34h
.text:00002470                 push    edi
.text:00002471                 push    ecx
.text:00002472                 lea     edi, [ebp+var_40]
.text:00002475                 mov     ecx, 0Dh
.text:0000247A                 mov     eax, 0CCCCCCCCh
.text:0000247F                 rep stosd
.text:00002481                 pop     ecx
.text:00002482                 mov     eax, dword ptr ds:___security_cookie
.text:00002487                 xor     eax, ebp
.text:00002489                 push    eax
.text:0000248A                 lea     eax, [ebp+var_C]
.text:0000248D                 mov     large fs:0, eax
.text:00002493                 mov     [ebp+var_10], ecx
.text:00002496                 push    offset _g_CriticalSection ; struct NWindows::NSynchronization::CCriticalSection *
.text:0000249B                 lea     ecx, [ebp+var_18] ; this
.text:0000249E                 call    ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z ; NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock(NWindows::NSynchronization::CCriticalSection &)
.text:000024A3                 mov     [ebp+var_4], 0
.text:000024AA                 mov     ecx, [ebp+var_10]
.text:000024AD                 add     ecx, 10h        ; this
.text:000024B0                 call    ?NeedPercents@COpenCallbackConsole@@IBE_NXZ ; COpenCallbackConsole::NeedPercents(void)
.text:000024B5                 movzx   eax, al
.text:000024B8                 test    eax, eax
.text:000024BA                 jz      short loc_24DF
.text:000024BC                 push    1               ; bool
.text:000024BE                 mov     ecx, [ebp+var_10]
.text:000024C1                 add     ecx, 18h        ; this
.text:000024C4                 call    ?ClosePrint@CPercentPrinter@@QAEX_N@Z ; CPercentPrinter::ClosePrint(bool)
.text:000024C9                 mov     ecx, [ebp+var_10]
.text:000024CC                 add     ecx, 30h ; '0'  ; this
.text:000024CF                 call    ?Empty@AString@@QAEXXZ ; AString::Empty(void)
.text:000024D4                 mov     ecx, [ebp+var_10]
.text:000024D7                 add     ecx, 3Ch ; '<'  ; this
.text:000024DA                 call    ?Empty@UString@@QAEXXZ ; UString::Empty(void)
.text:000024DF
.text:000024DF loc_24DF:                               ; CODE XREF: CExtractCallbackConsole::ExtractResult(long)+5Ej
.text:000024DF                 mov     ecx, [ebp+var_10]
.text:000024E2                 cmp     dword ptr [ecx+0C8h], 0
.text:000024E9                 jz      short loc_24F9
.text:000024EB                 mov     edx, [ebp+var_10]
.text:000024EE                 mov     ecx, [edx+0C8h] ; this
.text:000024F4                 call    ?Flush@CStdOutStream@@QAE_NXZ ; CStdOutStream::Flush(void)
.text:000024F9
.text:000024F9 loc_24F9:                               ; CODE XREF: CExtractCallbackConsole::ExtractResult(long)+8Dj
.text:000024F9                 cmp     [ebp+arg_0], 0
.text:000024FD                 jnz     loc_267E
.text:00002503                 mov     eax, [ebp+var_10]
.text:00002506                 mov     [ebp+var_34], eax
.text:00002509                 mov     ecx, [ebp+var_34]
.text:0000250C                 mov     edx, [ebp+var_34]
.text:0000250F                 mov     eax, [ecx+150h]
.text:00002515                 or      eax, [edx+154h]
.text:0000251B                 jnz     loc_25BD
.text:00002521                 mov     ecx, [ebp+var_10]
.text:00002524                 movzx   edx, byte ptr [ecx+110h]
.text:0000252B                 test    edx, edx
.text:0000252D                 jnz     loc_25BD
.text:00002533                 mov     eax, [ebp+var_10]
.text:00002536                 movzx   ecx, byte ptr [eax+111h]
.text:0000253D                 test    ecx, ecx
.text:0000253F                 jz      short loc_2567
.text:00002541                 mov     edx, [ebp+var_10]
.text:00002544                 mov     eax, [edx+130h]
.text:0000254A                 add     eax, 1
.text:0000254D                 mov     ecx, [edx+134h]
.text:00002553                 adc     ecx, 0
.text:00002556                 mov     edx, [ebp+var_10]
.text:00002559                 mov     [edx+130h], eax
.text:0000255F                 mov     [edx+134h], ecx
.text:00002565                 jmp     short loc_258B
.text:00002567 ; ---------------------------------------------------------------------------
.text:00002567
.text:00002567 loc_2567:                               ; CODE XREF: CExtractCallbackConsole::ExtractResult(long)+E3j
.text:00002567                 mov     eax, [ebp+var_10]
.text:0000256A                 mov     ecx, [eax+118h]
.text:00002570                 add     ecx, 1
.text:00002573                 mov     edx, [eax+11Ch]
.text:00002579                 adc     edx, 0
.text:0000257C                 mov     eax, [ebp+var_10]
.text:0000257F                 mov     [eax+118h], ecx
.text:00002585                 mov     [eax+11Ch], edx
.text:0000258B
.text:0000258B loc_258B:                               ; CODE XREF: CExtractCallbackConsole::ExtractResult(long)+109j
.text:0000258B                 mov     ecx, [ebp+var_10]
.text:0000258E                 cmp     dword ptr [ecx+0C8h], 0
.text:00002595                 jz      short loc_25B8
.text:00002597                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:0000259C                 mov     edx, ds:_kEverythingIsOk
.text:000025A2                 push    edx             ; Str
.text:000025A3                 mov     eax, [ebp+var_10]
.text:000025A6                 mov     ecx, [eax+0C8h]
.text:000025AC                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:000025B1                 mov     ecx, eax
.text:000025B3                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:000025B8
.text:000025B8 loc_25B8:                               ; CODE XREF: CExtractCallbackConsole::ExtractResult(long)+139j
.text:000025B8                 jmp     loc_2651
.text:000025BD ; ---------------------------------------------------------------------------
.text:000025BD
.text:000025BD loc_25BD:                               ; CODE XREF: CExtractCallbackConsole::ExtractResult(long)+BFj
.text:000025BD                                         ; CExtractCallbackConsole::ExtractResult(long)+D1j
.text:000025BD                 mov     ecx, [ebp+var_10]
.text:000025C0                 mov     edx, [ecx+128h]
.text:000025C6                 add     edx, 1
.text:000025C9                 mov     eax, [ecx+12Ch]
.text:000025CF                 adc     eax, 0
.text:000025D2                 mov     ecx, [ebp+var_10]
.text:000025D5                 mov     [ecx+128h], edx
.text:000025DB                 mov     [ecx+12Ch], eax
.text:000025E1                 mov     edx, [ebp+var_10]
.text:000025E4                 cmp     dword ptr [edx+0C8h], 0
.text:000025EB                 jz      short loc_2651
.text:000025ED                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:000025F2                 mov     eax, [ebp+var_10]
.text:000025F5                 mov     ecx, [eax+0C8h]
.text:000025FB                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00002600                 mov     ecx, [ebp+var_10]
.text:00002603                 mov     [ebp+var_38], ecx
.text:00002606                 mov     edx, [ebp+var_38]
.text:00002609                 mov     eax, [ebp+var_38]
.text:0000260C                 mov     ecx, [edx+150h]
.text:00002612                 or      ecx, [eax+154h]
.text:00002618                 jz      short loc_2651
.text:0000261A                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:0000261F                 mov     edx, [ebp+var_10]
.text:00002622                 mov     eax, [edx+154h]
.text:00002628                 push    eax
.text:00002629                 mov     ecx, [edx+150h]
.text:0000262F                 push    ecx
.text:00002630                 push    offset $SG75841 ; "Sub items Errors: "
.text:00002635                 mov     edx, [ebp+var_10]
.text:00002638                 mov     ecx, [edx+0C8h]
.text:0000263E                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00002643                 mov     ecx, eax
.text:00002645                 call    ??6CStdOutStream@@QAEAAV0@_K@Z ; CStdOutStream::operator<<(unsigned __int64)
.text:0000264A                 mov     ecx, eax
.text:0000264C                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00002651
.text:00002651 loc_2651:                               ; CODE XREF: CExtractCallbackConsole::ExtractResult(long):loc_25B8j
.text:00002651                                         ; CExtractCallbackConsole::ExtractResult(long)+18Fj ...
.text:00002651                 mov     eax, [ebp+var_10]
.text:00002654                 cmp     dword ptr [eax+0C8h], 0
.text:0000265B                 jz      short loc_2679
.text:0000265D                 mov     ecx, [ebp+var_10]
.text:00002660                 movzx   edx, byte ptr [ecx+158h]
.text:00002667                 test    edx, edx
.text:00002669                 jz      short loc_2679
.text:0000266B                 mov     eax, [ebp+var_10]
.text:0000266E                 mov     ecx, [eax+0C8h] ; this
.text:00002674                 call    ?Flush@CStdOutStream@@QAE_NXZ ; CStdOutStream::Flush(void)
.text:00002679
.text:00002679 loc_2679:                               ; CODE XREF: CExtractCallbackConsole::ExtractResult(long)+1FFj
.text:00002679                                         ; CExtractCallbackConsole::ExtractResult(long)+20Dj
.text:00002679                 jmp     loc_277C
.text:0000267E ; ---------------------------------------------------------------------------
.text:0000267E
.text:0000267E loc_267E:                               ; CODE XREF: CExtractCallbackConsole::ExtractResult(long)+A1j
.text:0000267E                 mov     ecx, [ebp+var_10]
.text:00002681                 mov     edx, [ecx+128h]
.text:00002687                 add     edx, 1
.text:0000268A                 mov     eax, [ecx+12Ch]
.text:00002690                 adc     eax, 0
.text:00002693                 mov     ecx, [ebp+var_10]
.text:00002696                 mov     [ecx+128h], edx
.text:0000269C                 mov     [ecx+12Ch], eax
.text:000026A2                 cmp     [ebp+arg_0], 80004004h
.text:000026A9                 jz      short loc_26B1
.text:000026AB                 cmp     [ebp+arg_0], 70h ; 'p'
.text:000026AF                 jnz     short loc_26CE
.text:000026B1
.text:000026B1 loc_26B1:                               ; CODE XREF: CExtractCallbackConsole::ExtractResult(long)+24Dj
.text:000026B1                 mov     edx, [ebp+arg_0]
.text:000026B4                 mov     [ebp+var_20], edx
.text:000026B7                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000026BE                 lea     ecx, [ebp+var_18] ; this
.text:000026C1                 call    ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)
.text:000026C6                 mov     eax, [ebp+var_20]
.text:000026C9                 jmp     loc_2796
.text:000026CE ; ---------------------------------------------------------------------------
.text:000026CE
.text:000026CE loc_26CE:                               ; CODE XREF: CExtractCallbackConsole::ExtractResult(long)+253j
.text:000026CE                 mov     eax, [ebp+var_10]
.text:000026D1                 cmp     dword ptr [eax+0CCh], 0
.text:000026D8                 jz      loc_277C
.text:000026DE                 mov     ecx, ds:_kError
.text:000026E4                 push    ecx             ; Str
.text:000026E5                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:000026EA                 mov     edx, [ebp+var_10]
.text:000026ED                 mov     ecx, [edx+0CCh]
.text:000026F3                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:000026F8                 mov     ecx, eax
.text:000026FA                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:000026FF                 cmp     [ebp+arg_0], 8007000Eh
.text:00002706                 jnz     short loc_271E
.text:00002708                 mov     eax, ds:_kMemoryExceptionMessage
.text:0000270D                 push    eax             ; Str
.text:0000270E                 mov     ecx, [ebp+var_10]
.text:00002711                 mov     ecx, [ecx+0CCh]
.text:00002717                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:0000271C                 jmp     short loc_275B
.text:0000271E ; ---------------------------------------------------------------------------
.text:0000271E
.text:0000271E loc_271E:                               ; CODE XREF: CExtractCallbackConsole::ExtractResult(long)+2AAj
.text:0000271E                 mov     edx, [ebp+arg_0]
.text:00002721                 push    edx
.text:00002722                 lea     eax, [ebp+var_2C]
.text:00002725                 push    eax
.text:00002726                 call    ?MyFormatMessage@NError@NWindows@@YG?AVUString@@K@Z ; NWindows::NError::MyFormatMessage(ulong)
.text:0000272B                 mov     [ebp+var_3C], eax
.text:0000272E                 mov     ecx, [ebp+var_3C]
.text:00002731                 mov     [ebp+var_40], ecx
.text:00002734                 mov     byte ptr [ebp+var_4], 1
.text:00002738                 mov     ecx, [ebp+var_40]
.text:0000273B                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00002740                 push    eax
.text:00002741                 mov     edx, [ebp+var_10]
.text:00002744                 mov     ecx, [edx+0CCh]
.text:0000274A                 call    ??6CStdOutStream@@QAEAAV0@PB_W@Z ; CStdOutStream::operator<<(wchar_t const *)
.text:0000274F                 mov     byte ptr [ebp+var_4], 0
.text:00002753                 lea     ecx, [ebp+var_2C] ; this
.text:00002756                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000275B
.text:0000275B loc_275B:                               ; CODE XREF: CExtractCallbackConsole::ExtractResult(long)+2C0j
.text:0000275B                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00002760                 mov     eax, [ebp+var_10]
.text:00002763                 mov     ecx, [eax+0CCh]
.text:00002769                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:0000276E                 mov     ecx, [ebp+var_10]
.text:00002771                 mov     ecx, [ecx+0CCh] ; this
.text:00002777                 call    ?Flush@CStdOutStream@@QAE_NXZ ; CStdOutStream::Flush(void)
.text:0000277C
.text:0000277C loc_277C:                               ; CODE XREF: CExtractCallbackConsole::ExtractResult(long):loc_2679j
.text:0000277C                                         ; CExtractCallbackConsole::ExtractResult(long)+27Cj
.text:0000277C                 call    ?CheckBreak2@@YGJXZ ; CheckBreak2(void)
.text:00002781                 mov     [ebp+var_30], eax
.text:00002784                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000278B                 lea     ecx, [ebp+var_18] ; this
.text:0000278E                 call    ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)
.text:00002793                 mov     eax, [ebp+var_30]
.text:00002796
.text:00002796 loc_2796:                               ; CODE XREF: CExtractCallbackConsole::ExtractResult(long)+26Dj
.text:00002796                 push    edx
.text:00002797                 mov     ecx, ebp
.text:00002799                 push    eax
.text:0000279A                 lea     edx, $LN25
.text:000027A0                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000027A5                 pop     eax
.text:000027A6                 pop     edx
.text:000027A7                 mov     ecx, [ebp+var_C]
.text:000027AA                 mov     large fs:0, ecx
.text:000027B1                 pop     ecx
.text:000027B2                 pop     edi
.text:000027B3                 add     esp, 40h
.text:000027B6                 cmp     ebp, esp
.text:000027B8                 call    __RTC_CheckEsp
.text:000027BD                 mov     esp, ebp
.text:000027BF                 pop     ebp
.text:000027C0                 retn    4
.text:000027C0 ?ExtractResult@CExtractCallbackConsole@@UAEJJ@Z endp
.text:000027C0
.text:000027C0 ; ---------------------------------------------------------------------------
.text:000027C3                 align 4
.text:000027C4 $LN25           dd 1                    ; DATA XREF: CExtractCallbackConsole::ExtractResult(long)+33Eo
.text:000027C8                 dd offset $LN24
.text:000027CC $LN24           dd 0FFFFFFE8h, 4        ; DATA XREF: .text:000027C8o
.text:000027D4                 dd offset $LN22_1       ; "lock"
.text:000027D8 $LN22_1         db 'lock',0             ; DATA XREF: .text:000027D4o
.text:000027DD                 align 10h
.text:000027DD _text           ends
.text:000027DD
.rtc$TMZ:000027E0 ; ===========================================================================
.rtc$TMZ:000027E0
.rtc$TMZ:000027E0 ; Segment type: Pure data
.rtc$TMZ:000027E0 ; Segment permissions: Read
.rtc$TMZ:000027E0 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:000027E0                 assume cs:_rtc$TMZ
.rtc$TMZ:000027E0                 ;org 27E0h
.rtc$TMZ:000027E0 ; COMDAT (pick any)
.rtc$TMZ:000027E0 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:000027E0 _rtc$TMZ        ends
.rtc$TMZ:000027E0
.rtc$IMZ:000027E4 ; ===========================================================================
.rtc$IMZ:000027E4
.rtc$IMZ:000027E4 ; Segment type: Pure data
.rtc$IMZ:000027E4 ; Segment permissions: Read
.rtc$IMZ:000027E4 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:000027E4                 assume cs:_rtc$IMZ
.rtc$IMZ:000027E4                 ;org 27E4h
.rtc$IMZ:000027E4 ; COMDAT (pick any)
.rtc$IMZ:000027E4 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:000027E4 _rtc$IMZ        ends
.rtc$IMZ:000027E4
.text:000027E8 ; ===========================================================================
.text:000027E8
.text:000027E8 ; Segment type: Pure code
.text:000027E8 ; Segment permissions: Read/Execute
.text:000027E8 _text           segment para public 'CODE' use32
.text:000027E8                 assume cs:_text
.text:000027E8                 ;org 27E8h
.text:000027E8 ; COMDAT (pick any)
.text:000027E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000027E8
.text:000027E8 ; =============== S U B R O U T I N E =======================================
.text:000027E8
.text:000027E8 ; Attributes: bp-based frame
.text:000027E8
.text:000027E8 ; bool __thiscall CExtractScanConsole::NeedPercents(CExtractScanConsole *__hidden this)
.text:000027E8                 public ?NeedPercents@CExtractScanConsole@@ABE_NXZ
.text:000027E8 ?NeedPercents@CExtractScanConsole@@ABE_NXZ proc near
.text:000027E8                                         ; CODE XREF: CExtractScanConsole::StartScanning(void)+11p
.text:000027E8                                         ; CExtractScanConsole::ScanProgress(CDirItemsStat const &,UString const &,bool)+11p ...
.text:000027E8
.text:000027E8 var_4           = dword ptr -4
.text:000027E8
.text:000027E8                 push    ebp
.text:000027E9                 mov     ebp, esp
.text:000027EB                 push    ecx
.text:000027EC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000027F3                 mov     [ebp+var_4], ecx
.text:000027F6                 mov     eax, [ebp+var_4]
.text:000027F9                 xor     ecx, ecx
.text:000027FB                 cmp     dword ptr [eax+0B4h], 0
.text:00002802                 setnz   cl
.text:00002805                 mov     al, cl
.text:00002807                 mov     esp, ebp
.text:00002809                 pop     ebp
.text:0000280A                 retn
.text:0000280A ?NeedPercents@CExtractScanConsole@@ABE_NXZ endp
.text:0000280A
.text:0000280A ; ---------------------------------------------------------------------------
.text:0000280B                 align 4
.text:0000280B _text           ends
.text:0000280B
.text:0000280C ; ===========================================================================
.text:0000280C
.text:0000280C ; Segment type: Pure code
.text:0000280C ; Segment permissions: Read/Execute
.text:0000280C _text           segment para public 'CODE' use32
.text:0000280C                 assume cs:_text
.text:0000280C                 ;org 280Ch
.text:0000280C ; COMDAT (pick any)
.text:0000280C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000280C
.text:0000280C ; =============== S U B R O U T I N E =======================================
.text:0000280C
.text:0000280C ; Attributes: bp-based frame
.text:0000280C
.text:0000280C ; unsigned __int64 __thiscall CDirItemsStat::GetTotalBytes(CDirItemsStat *__hidden this)
.text:0000280C                 public ?GetTotalBytes@CDirItemsStat@@QBE_KXZ
.text:0000280C ?GetTotalBytes@CDirItemsStat@@QBE_KXZ proc near
.text:0000280C                                         ; CODE XREF: CExtractScanConsole::ScanProgress(CDirItemsStat const &,UString const &,bool)+3Ap
.text:0000280C
.text:0000280C var_4           = dword ptr -4
.text:0000280C
.text:0000280C                 push    ebp
.text:0000280D                 mov     ebp, esp
.text:0000280F                 push    ecx
.text:00002810                 push    esi
.text:00002811                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002818                 mov     [ebp+var_4], ecx
.text:0000281B                 mov     eax, [ebp+var_4]
.text:0000281E
.text:0000281E loc_281E:                               ; DATA XREF: .rdata:$SG75424o
.text:0000281E                 mov     ecx, [ebp+var_4]
.text:00002821                 mov     edx, [eax+18h]
.text:00002824                 add     edx, [ecx+20h]
.text:00002827                 mov     esi, [eax+1Ch]
.text:0000282A                 adc     esi, [ecx+24h]
.text:0000282D                 mov     eax, edx
.text:0000282F                 mov     edx, esi
.text:00002831                 pop     esi
.text:00002832                 mov     esp, ebp
.text:00002834                 pop     ebp
.text:00002835                 retn
.text:00002835 ?GetTotalBytes@CDirItemsStat@@QBE_KXZ endp
.text:00002835
.text:00002835 ; ---------------------------------------------------------------------------
.text:00002836                 align 4
.text:00002836 _text           ends
.text:00002836
.text:00002838 ; ===========================================================================
.text:00002838
.text:00002838 ; Segment type: Pure code
.text:00002838 ; Segment permissions: Read/Execute
.text:00002838 _text           segment para public 'CODE' use32
.text:00002838                 assume cs:_text
.text:00002838                 ;org 2838h
.text:00002838 ; COMDAT (pick any)
.text:00002838                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002838
.text:00002838 ; =============== S U B R O U T I N E =======================================
.text:00002838
.text:00002838 ; Attributes: bp-based frame
.text:00002838
.text:00002838 ; bool NConsoleClose::TestBreakSignal(NConsoleClose *__hidden this)
.text:00002838                 public ?TestBreakSignal@NConsoleClose@@YG_NXZ
.text:00002838 ?TestBreakSignal@NConsoleClose@@YG_NXZ proc near
.text:00002838                                         ; CODE XREF: CheckBreak2(void)+3p
.text:00002838
.text:00002838 this            = dword ptr  8
.text:00002838
.text:00002838                 push    ebp
.text:00002839                 mov     ebp, esp
.text:0000283B                 xor     eax, eax
.text:0000283D                 cmp     dword ptr ds:?g_BreakCounter@NConsoleClose@@3IA, 0 ; uint NConsoleClose::g_BreakCounter
.text:00002844                 setnz   al
.text:00002847                 pop     ebp
.text:00002848                 retn
.text:00002848 ?TestBreakSignal@NConsoleClose@@YG_NXZ endp
.text:00002848
.text:00002848 ; ---------------------------------------------------------------------------
.text:00002849                 align 4
.text:00002849 _text           ends
.text:00002849
.text$x:0000284C ; ===========================================================================
.text$x:0000284C
.text$x:0000284C ; Segment type: Pure code
.text$x:0000284C ; Segment permissions: Read/Execute
.text$x:0000284C _text$x         segment para public 'CODE' use32
.text$x:0000284C                 assume cs:_text$x
.text$x:0000284C                 ;org 284Ch
.text$x:0000284C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000284C
.text$x:0000284C ; =============== S U B R O U T I N E =======================================
.text$x:0000284C
.text$x:0000284C
.text$x:0000284C __unwindfunclet$?ScanError@CExtractScanConsole@@UAEJABVUString@@K@Z$0 proc near
.text$x:0000284C                                         ; DATA XREF: .xdata$x:000029C0o
.text$x:0000284C                 lea     ecx, [ebp-1Ch]  ; this
.text$x:0000284F                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000284F __unwindfunclet$?ScanError@CExtractScanConsole@@UAEJABVUString@@K@Z$0 endp
.text$x:0000284F
.text$x:00002854
.text$x:00002854 ; =============== S U B R O U T I N E =======================================
.text$x:00002854
.text$x:00002854
.text$x:00002854 __ehhandler$?ScanError@CExtractScanConsole@@UAEJABVUString@@K@Z proc near
.text$x:00002854                                         ; DATA XREF: CExtractScanConsole::ScanError(UString const &,ulong)+5o
.text$x:00002854
.text$x:00002854 arg_4           = dword ptr  8
.text$x:00002854
.text$x:00002854                 mov     edx, [esp+arg_4]
.text$x:00002858                 lea     eax, [edx+0Ch]
.text$x:0000285B                 mov     ecx, [edx-1Ch]
.text$x:0000285E                 xor     ecx, eax
.text$x:00002860                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002865                 mov     eax, offset __ehfuncinfo$?ScanError@CExtractScanConsole@@UAEJABVUString@@K@Z
.text$x:0000286A                 jmp     ___CxxFrameHandler3
.text$x:0000286A __ehhandler$?ScanError@CExtractScanConsole@@UAEJABVUString@@K@Z endp
.text$x:0000286A
.text$x:0000286F
.text$x:0000286F ; =============== S U B R O U T I N E =======================================
.text$x:0000286F
.text$x:0000286F
.text$x:0000286F __unwindfunclet$?PrintStat@CExtractScanConsole@@QAEXABUCDirItemsStat@@@Z$0 proc near
.text$x:0000286F                                         ; DATA XREF: .xdata$x:000029ECo
.text$x:0000286F                 lea     ecx, [ebp-20h]  ; this
.text$x:00002872                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00002872 __unwindfunclet$?PrintStat@CExtractScanConsole@@QAEXABUCDirItemsStat@@@Z$0 endp
.text$x:00002872
.text$x:00002877
.text$x:00002877 ; =============== S U B R O U T I N E =======================================
.text$x:00002877
.text$x:00002877
.text$x:00002877 __ehhandler$?PrintStat@CExtractScanConsole@@QAEXABUCDirItemsStat@@@Z proc near
.text$x:00002877                                         ; DATA XREF: CExtractScanConsole::PrintStat(CDirItemsStat const &)+5o
.text$x:00002877
.text$x:00002877 arg_4           = dword ptr  8
.text$x:00002877
.text$x:00002877                 mov     edx, [esp+arg_4]
.text$x:0000287B                 lea     eax, [edx+0Ch]
.text$x:0000287E                 mov     ecx, [edx-1Ch]
.text$x:00002881                 xor     ecx, eax
.text$x:00002883                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002888                 mov     eax, offset __ehfuncinfo$?PrintStat@CExtractScanConsole@@QAEXABUCDirItemsStat@@@Z
.text$x:0000288D                 jmp     ___CxxFrameHandler3
.text$x:0000288D __ehhandler$?PrintStat@CExtractScanConsole@@QAEXABUCDirItemsStat@@@Z endp
.text$x:0000288D
.text$x:00002892
.text$x:00002892 ; =============== S U B R O U T I N E =======================================
.text$x:00002892
.text$x:00002892
.text$x:00002892 __unwindfunclet$?PrintFileInfo@@YGXPAVCStdOutStream@@PB_WPBU_FILETIME@@PB_K@Z$0 proc near
.text$x:00002892                                         ; DATA XREF: .xdata$x:00002A18o
.text$x:00002892                 lea     ecx, [ebp-20h]  ; this
.text$x:00002895                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00002895 __unwindfunclet$?PrintFileInfo@@YGXPAVCStdOutStream@@PB_WPBU_FILETIME@@PB_K@Z$0 endp
.text$x:00002895
.text$x:0000289A
.text$x:0000289A ; =============== S U B R O U T I N E =======================================
.text$x:0000289A
.text$x:0000289A
.text$x:0000289A __ehhandler$?PrintFileInfo@@YGXPAVCStdOutStream@@PB_WPBU_FILETIME@@PB_K@Z proc near
.text$x:0000289A                                         ; DATA XREF: PrintFileInfo(CStdOutStream *,wchar_t const *,_FILETIME const *,unsigned __int64 const *)+5o
.text$x:0000289A
.text$x:0000289A arg_4           = dword ptr  8
.text$x:0000289A
.text$x:0000289A                 mov     edx, [esp+arg_4]
.text$x:0000289E                 lea     eax, [edx+0Ch]
.text$x:000028A1                 mov     ecx, [edx-7Ch]
.text$x:000028A4                 xor     ecx, eax
.text$x:000028A6                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000028AB                 mov     ecx, [edx-4]
.text$x:000028AE                 xor     ecx, eax
.text$x:000028B0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000028B5                 mov     eax, offset __ehfuncinfo$?PrintFileInfo@@YGXPAVCStdOutStream@@PB_WPBU_FILETIME@@PB_K@Z
.text$x:000028BA                 jmp     ___CxxFrameHandler3
.text$x:000028BA __ehhandler$?PrintFileInfo@@YGXPAVCStdOutStream@@PB_WPBU_FILETIME@@PB_K@Z endp
.text$x:000028BA
.text$x:000028BF
.text$x:000028BF ; =============== S U B R O U T I N E =======================================
.text$x:000028BF
.text$x:000028BF
.text$x:000028BF __unwindfunclet$?CryptoGetTextPassword@CExtractCallbackConsole@@UAGJPAPA_W@Z$2 proc near
.text$x:000028BF                                         ; DATA XREF: .xdata$x:00002A70o
.text$x:000028BF                 lea     ecx, [ebp-18h]  ; this
.text$x:000028C2                 jmp     ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)
.text$x:000028C2 __unwindfunclet$?CryptoGetTextPassword@CExtractCallbackConsole@@UAGJPAPA_W@Z$2 endp
.text$x:000028C2
.text$x:000028C7
.text$x:000028C7 ; =============== S U B R O U T I N E =======================================
.text$x:000028C7
.text$x:000028C7
.text$x:000028C7 __ehhandler$?CryptoGetTextPassword@CExtractCallbackConsole@@UAGJPAPA_W@Z proc near
.text$x:000028C7                                         ; DATA XREF: CExtractCallbackConsole::CryptoGetTextPassword(wchar_t * *)+5o
.text$x:000028C7
.text$x:000028C7 arg_4           = dword ptr  8
.text$x:000028C7
.text$x:000028C7                 mov     edx, [esp+arg_4]
.text$x:000028CB                 lea     eax, [edx+0Ch]
.text$x:000028CE                 mov     ecx, [edx-30h]
.text$x:000028D1                 xor     ecx, eax
.text$x:000028D3                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000028D8                 mov     eax, offset __ehfuncinfo$?CryptoGetTextPassword@CExtractCallbackConsole@@UAGJPAPA_W@Z
.text$x:000028DD                 jmp     ___CxxFrameHandler3
.text$x:000028DD __ehhandler$?CryptoGetTextPassword@CExtractCallbackConsole@@UAGJPAPA_W@Z endp
.text$x:000028DD
.text$x:000028E2
.text$x:000028E2 ; =============== S U B R O U T I N E =======================================
.text$x:000028E2
.text$x:000028E2
.text$x:000028E2 __unwindfunclet$?PrintErrorFlags@@YGXAAVCStdOutStream@@PBDI@Z$0 proc near
.text$x:000028E2                                         ; DATA XREF: .xdata$x:00002AA4o
.text$x:000028E2                 lea     ecx, [ebp-18h]  ; this
.text$x:000028E5                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:000028E5 __unwindfunclet$?PrintErrorFlags@@YGXAAVCStdOutStream@@PBDI@Z$0 endp
.text$x:000028E5
.text$x:000028EA
.text$x:000028EA ; =============== S U B R O U T I N E =======================================
.text$x:000028EA
.text$x:000028EA
.text$x:000028EA __ehhandler$?PrintErrorFlags@@YGXAAVCStdOutStream@@PBDI@Z proc near
.text$x:000028EA                                         ; DATA XREF: PrintErrorFlags(CStdOutStream &,char const *,uint)+5o
.text$x:000028EA
.text$x:000028EA arg_4           = dword ptr  8
.text$x:000028EA
.text$x:000028EA                 mov     edx, [esp+arg_4]
.text$x:000028EE                 lea     eax, [edx+0Ch]
.text$x:000028F1                 mov     ecx, [edx-18h]
.text$x:000028F4                 xor     ecx, eax
.text$x:000028F6                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000028FB                 mov     eax, offset __ehfuncinfo$?PrintErrorFlags@@YGXAAVCStdOutStream@@PBDI@Z
.text$x:00002900                 jmp     ___CxxFrameHandler3
.text$x:00002900 __ehhandler$?PrintErrorFlags@@YGXAAVCStdOutStream@@PBDI@Z endp
.text$x:00002900
.text$x:00002905
.text$x:00002905 ; =============== S U B R O U T I N E =======================================
.text$x:00002905
.text$x:00002905
.text$x:00002905 __unwindfunclet$?GetOpenArcErrorMessage@@YG?AVAString@@I@Z$0 proc near
.text$x:00002905                                         ; DATA XREF: .xdata$x:00002AD8o
.text$x:00002905                 lea     ecx, [ebp-20h]  ; this
.text$x:00002908                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00002908 __unwindfunclet$?GetOpenArcErrorMessage@@YG?AVAString@@I@Z$0 endp
.text$x:00002908
.text$x:0000290D
.text$x:0000290D ; =============== S U B R O U T I N E =======================================
.text$x:0000290D
.text$x:0000290D
.text$x:0000290D __unwindfunclet$?GetOpenArcErrorMessage@@YG?AVAString@@I@Z$1 proc near
.text$x:0000290D                                         ; DATA XREF: .xdata$x:00002AD0o
.text$x:0000290D                 mov     eax, [ebp-4Ch]
.text$x:00002910                 and     eax, 1
.text$x:00002913                 jz      locret_2925
.text$x:00002919                 and     dword ptr [ebp-4Ch], 0FFFFFFFEh
.text$x:0000291D                 mov     ecx, [ebp+8]    ; this
.text$x:00002920                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00002925 ; ---------------------------------------------------------------------------
.text$x:00002925
.text$x:00002925 locret_2925:                            ; CODE XREF: __unwindfunclet$?GetOpenArcErrorMessage@@YG?AVAString@@I@Z$1+6j
.text$x:00002925                 retn
.text$x:00002925 __unwindfunclet$?GetOpenArcErrorMessage@@YG?AVAString@@I@Z$1 endp
.text$x:00002925
.text$x:00002926
.text$x:00002926 ; =============== S U B R O U T I N E =======================================
.text$x:00002926
.text$x:00002926
.text$x:00002926 __ehhandler$?GetOpenArcErrorMessage@@YG?AVAString@@I@Z proc near
.text$x:00002926                                         ; DATA XREF: GetOpenArcErrorMessage(uint)+5o
.text$x:00002926
.text$x:00002926 arg_4           = dword ptr  8
.text$x:00002926
.text$x:00002926                 mov     edx, [esp+arg_4]
.text$x:0000292A                 lea     eax, [edx+0Ch]
.text$x:0000292D                 mov     ecx, [edx-48h]
.text$x:00002930                 xor     ecx, eax
.text$x:00002932                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002937                 mov     ecx, [edx-4]
.text$x:0000293A                 xor     ecx, eax
.text$x:0000293C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002941                 mov     eax, offset __ehfuncinfo$?GetOpenArcErrorMessage@@YG?AVAString@@I@Z
.text$x:00002946                 jmp     ___CxxFrameHandler3
.text$x:00002946 __ehhandler$?GetOpenArcErrorMessage@@YG?AVAString@@I@Z endp
.text$x:00002946
.text$x:0000294B
.text$x:0000294B ; =============== S U B R O U T I N E =======================================
.text$x:0000294B
.text$x:0000294B
.text$x:0000294B __unwindfunclet$?Print_ErrorFormatIndex_Warning@@YGXPAVCStdOutStream@@PBVCCodecs@@ABVCArc@@@Z$0 proc near
.text$x:0000294B                                         ; DATA XREF: .xdata$x:00002B04o
.text$x:0000294B                 lea     ecx, [ebp-20h]  ; this
.text$x:0000294E                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000294E __unwindfunclet$?Print_ErrorFormatIndex_Warning@@YGXPAVCStdOutStream@@PBVCCodecs@@ABVCArc@@@Z$0 endp
.text$x:0000294E
.text$x:00002953
.text$x:00002953 ; =============== S U B R O U T I N E =======================================
.text$x:00002953
.text$x:00002953
.text$x:00002953 __ehhandler$?Print_ErrorFormatIndex_Warning@@YGXPAVCStdOutStream@@PBVCCodecs@@ABVCArc@@@Z proc near
.text$x:00002953                                         ; DATA XREF: Print_ErrorFormatIndex_Warning(CStdOutStream *,CCodecs const *,CArc const &)+5o
.text$x:00002953
.text$x:00002953 arg_4           = dword ptr  8
.text$x:00002953
.text$x:00002953                 mov     edx, [esp+arg_4]
.text$x:00002957                 lea     eax, [edx+0Ch]
.text$x:0000295A                 mov     ecx, [edx-1Ch]
.text$x:0000295D                 xor     ecx, eax
.text$x:0000295F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002964                 mov     eax, offset __ehfuncinfo$?Print_ErrorFormatIndex_Warning@@YGXPAVCStdOutStream@@PBVCCodecs@@ABVCArc@@@Z
.text$x:00002969                 jmp     ___CxxFrameHandler3
.text$x:00002969 __ehhandler$?Print_ErrorFormatIndex_Warning@@YGXPAVCStdOutStream@@PBVCCodecs@@ABVCArc@@@Z endp
.text$x:00002969
.text$x:0000296E
.text$x:0000296E ; =============== S U B R O U T I N E =======================================
.text$x:0000296E
.text$x:0000296E
.text$x:0000296E __unwindfunclet$?OpenResult@CExtractCallbackConsole@@UAEJPBVCCodecs@@ABUCArchiveLink@@PB_WJ@Z$0 proc near
.text$x:0000296E                                         ; DATA XREF: .xdata$x:00002B30o
.text$x:0000296E                 lea     ecx, [ebp-3Ch]  ; this
.text$x:00002971                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00002971 __unwindfunclet$?OpenResult@CExtractCallbackConsole@@UAEJPBVCCodecs@@ABUCArchiveLink@@PB_WJ@Z$0 endp
.text$x:00002971
.text$x:00002976
.text$x:00002976 ; =============== S U B R O U T I N E =======================================
.text$x:00002976
.text$x:00002976
.text$x:00002976 __ehhandler$?OpenResult@CExtractCallbackConsole@@UAEJPBVCCodecs@@ABUCArchiveLink@@PB_WJ@Z proc near
.text$x:00002976                                         ; DATA XREF: CExtractCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+5o
.text$x:00002976
.text$x:00002976 arg_4           = dword ptr  8
.text$x:00002976
.text$x:00002976                 mov     edx, [esp+arg_4]
.text$x:0000297A                 lea     eax, [edx+0Ch]
.text$x:0000297D                 mov     ecx, [edx-40h]
.text$x:00002980                 xor     ecx, eax
.text$x:00002982                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002987                 mov     eax, offset __ehfuncinfo$?OpenResult@CExtractCallbackConsole@@UAEJPBVCCodecs@@ABUCArchiveLink@@PB_WJ@Z
.text$x:0000298C                 jmp     ___CxxFrameHandler3
.text$x:0000298C __ehhandler$?OpenResult@CExtractCallbackConsole@@UAEJPBVCCodecs@@ABUCArchiveLink@@PB_WJ@Z endp
.text$x:0000298C
.text$x:00002991
.text$x:00002991 ; =============== S U B R O U T I N E =======================================
.text$x:00002991
.text$x:00002991
.text$x:00002991 __unwindfunclet$?ExtractResult@CExtractCallbackConsole@@UAEJJ@Z$0 proc near
.text$x:00002991                                         ; DATA XREF: .xdata$x:00002B5Co
.text$x:00002991                 lea     ecx, [ebp-18h]  ; this
.text$x:00002994                 jmp     ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)
.text$x:00002994 __unwindfunclet$?ExtractResult@CExtractCallbackConsole@@UAEJJ@Z$0 endp
.text$x:00002994
.text$x:00002999
.text$x:00002999 ; =============== S U B R O U T I N E =======================================
.text$x:00002999
.text$x:00002999
.text$x:00002999 __unwindfunclet$?ExtractResult@CExtractCallbackConsole@@UAEJJ@Z$1 proc near
.text$x:00002999                                         ; DATA XREF: .xdata$x:00002B64o
.text$x:00002999                 lea     ecx, [ebp-2Ch]  ; this
.text$x:0000299C                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000299C __unwindfunclet$?ExtractResult@CExtractCallbackConsole@@UAEJJ@Z$1 endp
.text$x:0000299C
.text$x:000029A1
.text$x:000029A1 ; =============== S U B R O U T I N E =======================================
.text$x:000029A1
.text$x:000029A1
.text$x:000029A1 __ehhandler$?ExtractResult@CExtractCallbackConsole@@UAEJJ@Z proc near
.text$x:000029A1                                         ; DATA XREF: CExtractCallbackConsole::ExtractResult(long)+5o
.text$x:000029A1
.text$x:000029A1 arg_4           = dword ptr  8
.text$x:000029A1
.text$x:000029A1                 mov     edx, [esp+arg_4]
.text$x:000029A5                 lea     eax, [edx+0Ch]
.text$x:000029A8                 mov     ecx, [edx-3Ch]
.text$x:000029AB                 xor     ecx, eax
.text$x:000029AD                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000029B2                 mov     eax, offset __ehfuncinfo$?ExtractResult@CExtractCallbackConsole@@UAEJJ@Z
.text$x:000029B7                 jmp     ___CxxFrameHandler3
.text$x:000029B7 __ehhandler$?ExtractResult@CExtractCallbackConsole@@UAEJJ@Z endp
.text$x:000029B7
.text$x:000029B7 _text$x         ends
.text$x:000029B7
.xdata$x:000029BC ; ===========================================================================
.xdata$x:000029BC
.xdata$x:000029BC ; Segment type: Pure data
.xdata$x:000029BC ; Segment permissions: Read
.xdata$x:000029BC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000029BC                 assume cs:_xdata$x
.xdata$x:000029BC                 ;org 29BCh
.xdata$x:000029BC __unwindtable$?ScanError@CExtractScanConsole@@UAEJABVUString@@K@Z db 0FFh
.xdata$x:000029BC                                         ; DATA XREF: .xdata$x:000029CCo
.xdata$x:000029BD                 db 0FFh
.xdata$x:000029BE                 db 0FFh
.xdata$x:000029BF                 db 0FFh
.xdata$x:000029C0                 dd offset __unwindfunclet$?ScanError@CExtractScanConsole@@UAEJABVUString@@K@Z$0
.xdata$x:000029C4 __ehfuncinfo$?ScanError@CExtractScanConsole@@UAEJABVUString@@K@Z db  22h ; "
.xdata$x:000029C4                                         ; DATA XREF: __ehhandler$?ScanError@CExtractScanConsole@@UAEJABVUString@@K@Z+11o
.xdata$x:000029C5                 db    5
.xdata$x:000029C6                 db  93h ; ô
.xdata$x:000029C7                 db  19h
.xdata$x:000029C8                 db    1
.xdata$x:000029C9                 db    0
.xdata$x:000029CA                 db    0
.xdata$x:000029CB                 db    0
.xdata$x:000029CC                 dd offset __unwindtable$?ScanError@CExtractScanConsole@@UAEJABVUString@@K@Z
.xdata$x:000029D0                 db    0
.xdata$x:000029D1                 db    0
.xdata$x:000029D2                 db    0
.xdata$x:000029D3                 db    0
.xdata$x:000029D4                 db    0
.xdata$x:000029D5                 db    0
.xdata$x:000029D6                 db    0
.xdata$x:000029D7                 db    0
.xdata$x:000029D8                 db    0
.xdata$x:000029D9                 db    0
.xdata$x:000029DA                 db    0
.xdata$x:000029DB                 db    0
.xdata$x:000029DC                 db    0
.xdata$x:000029DD                 db    0
.xdata$x:000029DE                 db    0
.xdata$x:000029DF                 db    0
.xdata$x:000029E0                 db    0
.xdata$x:000029E1                 db    0
.xdata$x:000029E2                 db    0
.xdata$x:000029E3                 db    0
.xdata$x:000029E4                 db    1
.xdata$x:000029E5                 db    0
.xdata$x:000029E6                 db    0
.xdata$x:000029E7                 db    0
.xdata$x:000029E8 __unwindtable$?PrintStat@CExtractScanConsole@@QAEXABUCDirItemsStat@@@Z db 0FFh
.xdata$x:000029E8                                         ; DATA XREF: .xdata$x:000029F8o
.xdata$x:000029E9                 db 0FFh
.xdata$x:000029EA                 db 0FFh
.xdata$x:000029EB                 db 0FFh
.xdata$x:000029EC                 dd offset __unwindfunclet$?PrintStat@CExtractScanConsole@@QAEXABUCDirItemsStat@@@Z$0
.xdata$x:000029F0 __ehfuncinfo$?PrintStat@CExtractScanConsole@@QAEXABUCDirItemsStat@@@Z db  22h ; "
.xdata$x:000029F0                                         ; DATA XREF: __ehhandler$?PrintStat@CExtractScanConsole@@QAEXABUCDirItemsStat@@@Z+11o
.xdata$x:000029F1                 db    5
.xdata$x:000029F2                 db  93h ; ô
.xdata$x:000029F3                 db  19h
.xdata$x:000029F4                 db    1
.xdata$x:000029F5                 db    0
.xdata$x:000029F6                 db    0
.xdata$x:000029F7                 db    0
.xdata$x:000029F8                 dd offset __unwindtable$?PrintStat@CExtractScanConsole@@QAEXABUCDirItemsStat@@@Z
.xdata$x:000029FC                 db    0
.xdata$x:000029FD                 db    0
.xdata$x:000029FE                 db    0
.xdata$x:000029FF                 db    0
.xdata$x:00002A00                 db    0
.xdata$x:00002A01                 db    0
.xdata$x:00002A02                 db    0
.xdata$x:00002A03                 db    0
.xdata$x:00002A04                 db    0
.xdata$x:00002A05                 db    0
.xdata$x:00002A06                 db    0
.xdata$x:00002A07                 db    0
.xdata$x:00002A08                 db    0
.xdata$x:00002A09                 db    0
.xdata$x:00002A0A                 db    0
.xdata$x:00002A0B                 db    0
.xdata$x:00002A0C                 db    0
.xdata$x:00002A0D                 db    0
.xdata$x:00002A0E                 db    0
.xdata$x:00002A0F                 db    0
.xdata$x:00002A10                 db    1
.xdata$x:00002A11                 db    0
.xdata$x:00002A12                 db    0
.xdata$x:00002A13                 db    0
.xdata$x:00002A14 __unwindtable$?PrintFileInfo@@YGXPAVCStdOutStream@@PB_WPBU_FILETIME@@PB_K@Z db 0FFh
.xdata$x:00002A14                                         ; DATA XREF: .xdata$x:00002A24o
.xdata$x:00002A15                 db 0FFh
.xdata$x:00002A16                 db 0FFh
.xdata$x:00002A17                 db 0FFh
.xdata$x:00002A18                 dd offset __unwindfunclet$?PrintFileInfo@@YGXPAVCStdOutStream@@PB_WPBU_FILETIME@@PB_K@Z$0
.xdata$x:00002A1C __ehfuncinfo$?PrintFileInfo@@YGXPAVCStdOutStream@@PB_WPBU_FILETIME@@PB_K@Z db  22h ; "
.xdata$x:00002A1C                                         ; DATA XREF: __ehhandler$?PrintFileInfo@@YGXPAVCStdOutStream@@PB_WPBU_FILETIME@@PB_K@Z+1Bo
.xdata$x:00002A1D                 db    5
.xdata$x:00002A1E                 db  93h ; ô
.xdata$x:00002A1F                 db  19h
.xdata$x:00002A20                 db    1
.xdata$x:00002A21                 db    0
.xdata$x:00002A22                 db    0
.xdata$x:00002A23                 db    0
.xdata$x:00002A24                 dd offset __unwindtable$?PrintFileInfo@@YGXPAVCStdOutStream@@PB_WPBU_FILETIME@@PB_K@Z
.xdata$x:00002A28                 db    0
.xdata$x:00002A29                 db    0
.xdata$x:00002A2A                 db    0
.xdata$x:00002A2B                 db    0
.xdata$x:00002A2C                 db    0
.xdata$x:00002A2D                 db    0
.xdata$x:00002A2E                 db    0
.xdata$x:00002A2F                 db    0
.xdata$x:00002A30                 db    0
.xdata$x:00002A31                 db    0
.xdata$x:00002A32                 db    0
.xdata$x:00002A33                 db    0
.xdata$x:00002A34                 db    0
.xdata$x:00002A35                 db    0
.xdata$x:00002A36                 db    0
.xdata$x:00002A37                 db    0
.xdata$x:00002A38                 db    0
.xdata$x:00002A39                 db    0
.xdata$x:00002A3A                 db    0
.xdata$x:00002A3B                 db    0
.xdata$x:00002A3C                 db    1
.xdata$x:00002A3D                 db    0
.xdata$x:00002A3E                 db    0
.xdata$x:00002A3F                 db    0
.xdata$x:00002A40 __catchsym$?CryptoGetTextPassword@CExtractCallbackConsole@@UAGJPAPA_W@Z$3 dd offset $SG75436
.xdata$x:00002A40                                         ; DATA XREF: .xdata$x:00002A60o
.xdata$x:00002A44                 db    0
.xdata$x:00002A45                 db    0
.xdata$x:00002A46                 db    0
.xdata$x:00002A47                 db    0
.xdata$x:00002A48                 db    0
.xdata$x:00002A49                 db    0
.xdata$x:00002A4A                 db    0
.xdata$x:00002A4B                 db    0
.xdata$x:00002A4C                 dd offset __catch$?CryptoGetTextPassword@CExtractCallbackConsole@@UAGJPAPA_W@Z$0
.xdata$x:00002A50 __tryblocktable$?CryptoGetTextPassword@CExtractCallbackConsole@@UAGJPAPA_W@Z db    0
.xdata$x:00002A50                                         ; DATA XREF: .xdata$x:00002A8Co
.xdata$x:00002A51                 db    0
.xdata$x:00002A52                 db    0
.xdata$x:00002A53                 db    0
.xdata$x:00002A54                 db    1
.xdata$x:00002A55                 db    0
.xdata$x:00002A56                 db    0
.xdata$x:00002A57                 db    0
.xdata$x:00002A58                 db    2
.xdata$x:00002A59                 db    0
.xdata$x:00002A5A                 db    0
.xdata$x:00002A5B                 db    0
.xdata$x:00002A5C                 db    1
.xdata$x:00002A5D                 db    0
.xdata$x:00002A5E                 db    0
.xdata$x:00002A5F                 db    0
.xdata$x:00002A60                 dd offset __catchsym$?CryptoGetTextPassword@CExtractCallbackConsole@@UAGJPAPA_W@Z$3
.xdata$x:00002A64 __unwindtable$?CryptoGetTextPassword@CExtractCallbackConsole@@UAGJPAPA_W@Z db 0FFh
.xdata$x:00002A64                                         ; DATA XREF: .xdata$x:00002A84o
.xdata$x:00002A65                 db 0FFh
.xdata$x:00002A66                 db 0FFh
.xdata$x:00002A67                 db 0FFh
.xdata$x:00002A68                 db    0
.xdata$x:00002A69                 db    0
.xdata$x:00002A6A                 db    0
.xdata$x:00002A6B                 db    0
.xdata$x:00002A6C                 db    0
.xdata$x:00002A6D                 db    0
.xdata$x:00002A6E                 db    0
.xdata$x:00002A6F                 db    0
.xdata$x:00002A70                 dd offset __unwindfunclet$?CryptoGetTextPassword@CExtractCallbackConsole@@UAGJPAPA_W@Z$2
.xdata$x:00002A74                 db 0FFh
.xdata$x:00002A75                 db 0FFh
.xdata$x:00002A76                 db 0FFh
.xdata$x:00002A77                 db 0FFh
.xdata$x:00002A78                 db    0
.xdata$x:00002A79                 db    0
.xdata$x:00002A7A                 db    0
.xdata$x:00002A7B                 db    0
.xdata$x:00002A7C __ehfuncinfo$?CryptoGetTextPassword@CExtractCallbackConsole@@UAGJPAPA_W@Z db  22h ; "
.xdata$x:00002A7C                                         ; DATA XREF: __ehhandler$?CryptoGetTextPassword@CExtractCallbackConsole@@UAGJPAPA_W@Z+11o
.xdata$x:00002A7D                 db    5
.xdata$x:00002A7E                 db  93h ; ô
.xdata$x:00002A7F                 db  19h
.xdata$x:00002A80                 db    3
.xdata$x:00002A81                 db    0
.xdata$x:00002A82                 db    0
.xdata$x:00002A83                 db    0
.xdata$x:00002A84                 dd offset __unwindtable$?CryptoGetTextPassword@CExtractCallbackConsole@@UAGJPAPA_W@Z
.xdata$x:00002A88                 db    1
.xdata$x:00002A89                 db    0
.xdata$x:00002A8A                 db    0
.xdata$x:00002A8B                 db    0
.xdata$x:00002A8C                 dd offset __tryblocktable$?CryptoGetTextPassword@CExtractCallbackConsole@@UAGJPAPA_W@Z
.xdata$x:00002A90                 db    0
.xdata$x:00002A91                 db    0
.xdata$x:00002A92                 db    0
.xdata$x:00002A93                 db    0
.xdata$x:00002A94                 db    0
.xdata$x:00002A95                 db    0
.xdata$x:00002A96                 db    0
.xdata$x:00002A97                 db    0
.xdata$x:00002A98                 db    0
.xdata$x:00002A99                 db    0
.xdata$x:00002A9A                 db    0
.xdata$x:00002A9B                 db    0
.xdata$x:00002A9C                 db    1
.xdata$x:00002A9D                 db    0
.xdata$x:00002A9E                 db    0
.xdata$x:00002A9F                 db    0
.xdata$x:00002AA0 __unwindtable$?PrintErrorFlags@@YGXAAVCStdOutStream@@PBDI@Z db 0FFh
.xdata$x:00002AA0                                         ; DATA XREF: .xdata$x:00002AB0o
.xdata$x:00002AA1                 db 0FFh
.xdata$x:00002AA2                 db 0FFh
.xdata$x:00002AA3                 db 0FFh
.xdata$x:00002AA4                 dd offset __unwindfunclet$?PrintErrorFlags@@YGXAAVCStdOutStream@@PBDI@Z$0
.xdata$x:00002AA8 __ehfuncinfo$?PrintErrorFlags@@YGXAAVCStdOutStream@@PBDI@Z db  22h ; "
.xdata$x:00002AA8                                         ; DATA XREF: __ehhandler$?PrintErrorFlags@@YGXAAVCStdOutStream@@PBDI@Z+11o
.xdata$x:00002AA9                 db    5
.xdata$x:00002AAA                 db  93h ; ô
.xdata$x:00002AAB                 db  19h
.xdata$x:00002AAC                 db    1
.xdata$x:00002AAD                 db    0
.xdata$x:00002AAE                 db    0
.xdata$x:00002AAF                 db    0
.xdata$x:00002AB0                 dd offset __unwindtable$?PrintErrorFlags@@YGXAAVCStdOutStream@@PBDI@Z
.xdata$x:00002AB4                 db    0
.xdata$x:00002AB5                 db    0
.xdata$x:00002AB6                 db    0
.xdata$x:00002AB7                 db    0
.xdata$x:00002AB8                 db    0
.xdata$x:00002AB9                 db    0
.xdata$x:00002ABA                 db    0
.xdata$x:00002ABB                 db    0
.xdata$x:00002ABC                 db    0
.xdata$x:00002ABD                 db    0
.xdata$x:00002ABE                 db    0
.xdata$x:00002ABF                 db    0
.xdata$x:00002AC0                 db    0
.xdata$x:00002AC1                 db    0
.xdata$x:00002AC2                 db    0
.xdata$x:00002AC3                 db    0
.xdata$x:00002AC4                 db    0
.xdata$x:00002AC5                 db    0
.xdata$x:00002AC6                 db    0
.xdata$x:00002AC7                 db    0
.xdata$x:00002AC8                 db    1
.xdata$x:00002AC9                 db    0
.xdata$x:00002ACA                 db    0
.xdata$x:00002ACB                 db    0
.xdata$x:00002ACC __unwindtable$?GetOpenArcErrorMessage@@YG?AVAString@@I@Z db 0FFh
.xdata$x:00002ACC                                         ; DATA XREF: .xdata$x:00002AE4o
.xdata$x:00002ACD                 db 0FFh
.xdata$x:00002ACE                 db 0FFh
.xdata$x:00002ACF                 db 0FFh
.xdata$x:00002AD0                 dd offset __unwindfunclet$?GetOpenArcErrorMessage@@YG?AVAString@@I@Z$1
.xdata$x:00002AD4                 align 8
.xdata$x:00002AD8                 dd offset __unwindfunclet$?GetOpenArcErrorMessage@@YG?AVAString@@I@Z$0
.xdata$x:00002ADC __ehfuncinfo$?GetOpenArcErrorMessage@@YG?AVAString@@I@Z db  22h ; "
.xdata$x:00002ADC                                         ; DATA XREF: __ehhandler$?GetOpenArcErrorMessage@@YG?AVAString@@I@Z+1Bo
.xdata$x:00002ADD                 db    5
.xdata$x:00002ADE                 db  93h ; ô
.xdata$x:00002ADF                 db  19h
.xdata$x:00002AE0                 db    2
.xdata$x:00002AE1                 db    0
.xdata$x:00002AE2                 db    0
.xdata$x:00002AE3                 db    0
.xdata$x:00002AE4                 dd offset __unwindtable$?GetOpenArcErrorMessage@@YG?AVAString@@I@Z
.xdata$x:00002AE8                 db    0
.xdata$x:00002AE9                 db    0
.xdata$x:00002AEA                 db    0
.xdata$x:00002AEB                 db    0
.xdata$x:00002AEC                 db    0
.xdata$x:00002AED                 db    0
.xdata$x:00002AEE                 db    0
.xdata$x:00002AEF                 db    0
.xdata$x:00002AF0                 db    0
.xdata$x:00002AF1                 db    0
.xdata$x:00002AF2                 db    0
.xdata$x:00002AF3                 db    0
.xdata$x:00002AF4                 db    0
.xdata$x:00002AF5                 db    0
.xdata$x:00002AF6                 db    0
.xdata$x:00002AF7                 db    0
.xdata$x:00002AF8                 db    0
.xdata$x:00002AF9                 db    0
.xdata$x:00002AFA                 db    0
.xdata$x:00002AFB                 db    0
.xdata$x:00002AFC                 db    1
.xdata$x:00002AFD                 db    0
.xdata$x:00002AFE                 db    0
.xdata$x:00002AFF                 db    0
.xdata$x:00002B00 __unwindtable$?Print_ErrorFormatIndex_Warning@@YGXPAVCStdOutStream@@PBVCCodecs@@ABVCArc@@@Z db 0FFh
.xdata$x:00002B00                                         ; DATA XREF: .xdata$x:00002B10o
.xdata$x:00002B01                 db 0FFh
.xdata$x:00002B02                 db 0FFh
.xdata$x:00002B03                 db 0FFh
.xdata$x:00002B04                 dd offset __unwindfunclet$?Print_ErrorFormatIndex_Warning@@YGXPAVCStdOutStream@@PBVCCodecs@@ABVCArc@@@Z$0
.xdata$x:00002B08 __ehfuncinfo$?Print_ErrorFormatIndex_Warning@@YGXPAVCStdOutStream@@PBVCCodecs@@ABVCArc@@@Z db  22h ; "
.xdata$x:00002B08                                         ; DATA XREF: __ehhandler$?Print_ErrorFormatIndex_Warning@@YGXPAVCStdOutStream@@PBVCCodecs@@ABVCArc@@@Z+11o
.xdata$x:00002B09                 db    5
.xdata$x:00002B0A                 db  93h ; ô
.xdata$x:00002B0B                 db  19h
.xdata$x:00002B0C                 db    1
.xdata$x:00002B0D                 db    0
.xdata$x:00002B0E                 db    0
.xdata$x:00002B0F                 db    0
.xdata$x:00002B10                 dd offset __unwindtable$?Print_ErrorFormatIndex_Warning@@YGXPAVCStdOutStream@@PBVCCodecs@@ABVCArc@@@Z
.xdata$x:00002B14                 db    0
.xdata$x:00002B15                 db    0
.xdata$x:00002B16                 db    0
.xdata$x:00002B17                 db    0
.xdata$x:00002B18                 db    0
.xdata$x:00002B19                 db    0
.xdata$x:00002B1A                 db    0
.xdata$x:00002B1B                 db    0
.xdata$x:00002B1C                 db    0
.xdata$x:00002B1D                 db    0
.xdata$x:00002B1E                 db    0
.xdata$x:00002B1F                 db    0
.xdata$x:00002B20                 db    0
.xdata$x:00002B21                 db    0
.xdata$x:00002B22                 db    0
.xdata$x:00002B23                 db    0
.xdata$x:00002B24                 db    0
.xdata$x:00002B25                 db    0
.xdata$x:00002B26                 db    0
.xdata$x:00002B27                 db    0
.xdata$x:00002B28                 db    1
.xdata$x:00002B29                 db    0
.xdata$x:00002B2A                 db    0
.xdata$x:00002B2B                 db    0
.xdata$x:00002B2C __unwindtable$?OpenResult@CExtractCallbackConsole@@UAEJPBVCCodecs@@ABUCArchiveLink@@PB_WJ@Z db 0FFh
.xdata$x:00002B2C                                         ; DATA XREF: .xdata$x:00002B3Co
.xdata$x:00002B2D                 db 0FFh
.xdata$x:00002B2E                 db 0FFh
.xdata$x:00002B2F                 db 0FFh
.xdata$x:00002B30                 dd offset __unwindfunclet$?OpenResult@CExtractCallbackConsole@@UAEJPBVCCodecs@@ABUCArchiveLink@@PB_WJ@Z$0
.xdata$x:00002B34 __ehfuncinfo$?OpenResult@CExtractCallbackConsole@@UAEJPBVCCodecs@@ABUCArchiveLink@@PB_WJ@Z db  22h ; "
.xdata$x:00002B34                                         ; DATA XREF: __ehhandler$?OpenResult@CExtractCallbackConsole@@UAEJPBVCCodecs@@ABUCArchiveLink@@PB_WJ@Z+11o
.xdata$x:00002B35                 db    5
.xdata$x:00002B36                 db  93h ; ô
.xdata$x:00002B37                 db  19h
.xdata$x:00002B38                 db    1
.xdata$x:00002B39                 db    0
.xdata$x:00002B3A                 db    0
.xdata$x:00002B3B                 db    0
.xdata$x:00002B3C                 dd offset __unwindtable$?OpenResult@CExtractCallbackConsole@@UAEJPBVCCodecs@@ABUCArchiveLink@@PB_WJ@Z
.xdata$x:00002B40                 db    0
.xdata$x:00002B41                 db    0
.xdata$x:00002B42                 db    0
.xdata$x:00002B43                 db    0
.xdata$x:00002B44                 db    0
.xdata$x:00002B45                 db    0
.xdata$x:00002B46                 db    0
.xdata$x:00002B47                 db    0
.xdata$x:00002B48                 db    0
.xdata$x:00002B49                 db    0
.xdata$x:00002B4A                 db    0
.xdata$x:00002B4B                 db    0
.xdata$x:00002B4C                 db    0
.xdata$x:00002B4D                 db    0
.xdata$x:00002B4E                 db    0
.xdata$x:00002B4F                 db    0
.xdata$x:00002B50                 db    0
.xdata$x:00002B51                 db    0
.xdata$x:00002B52                 db    0
.xdata$x:00002B53                 db    0
.xdata$x:00002B54                 db    1
.xdata$x:00002B55                 db    0
.xdata$x:00002B56                 db    0
.xdata$x:00002B57                 db    0
.xdata$x:00002B58 __unwindtable$?ExtractResult@CExtractCallbackConsole@@UAEJJ@Z db 0FFh
.xdata$x:00002B58                                         ; DATA XREF: .xdata$x:00002B70o
.xdata$x:00002B59                 db 0FFh
.xdata$x:00002B5A                 db 0FFh
.xdata$x:00002B5B                 db 0FFh
.xdata$x:00002B5C                 dd offset __unwindfunclet$?ExtractResult@CExtractCallbackConsole@@UAEJJ@Z$0
.xdata$x:00002B60                 db    0
.xdata$x:00002B61                 db    0
.xdata$x:00002B62                 db    0
.xdata$x:00002B63                 db    0
.xdata$x:00002B64                 dd offset __unwindfunclet$?ExtractResult@CExtractCallbackConsole@@UAEJJ@Z$1
.xdata$x:00002B68 __ehfuncinfo$?ExtractResult@CExtractCallbackConsole@@UAEJJ@Z db  22h ; "
.xdata$x:00002B68                                         ; DATA XREF: __ehhandler$?ExtractResult@CExtractCallbackConsole@@UAEJJ@Z+11o
.xdata$x:00002B69                 db    5
.xdata$x:00002B6A                 db  93h ; ô
.xdata$x:00002B6B                 db  19h
.xdata$x:00002B6C                 db    2
.xdata$x:00002B6D                 db    0
.xdata$x:00002B6E                 db    0
.xdata$x:00002B6F                 db    0
.xdata$x:00002B70                 dd offset __unwindtable$?ExtractResult@CExtractCallbackConsole@@UAEJJ@Z
.xdata$x:00002B74                 db    0
.xdata$x:00002B75                 db    0
.xdata$x:00002B76                 db    0
.xdata$x:00002B77                 db    0
.xdata$x:00002B78                 db    0
.xdata$x:00002B79                 db    0
.xdata$x:00002B7A                 db    0
.xdata$x:00002B7B                 db    0
.xdata$x:00002B7C                 db    0
.xdata$x:00002B7D                 db    0
.xdata$x:00002B7E                 db    0
.xdata$x:00002B7F                 db    0
.xdata$x:00002B80                 db    0
.xdata$x:00002B81                 db    0
.xdata$x:00002B82                 db    0
.xdata$x:00002B83                 db    0
.xdata$x:00002B84                 db    0
.xdata$x:00002B85                 db    0
.xdata$x:00002B86                 db    0
.xdata$x:00002B87                 db    0
.xdata$x:00002B88                 db    1
.xdata$x:00002B89                 db    0
.xdata$x:00002B8A                 db    0
.xdata$x:00002B8B                 db    0
.xdata$x:00002B8B _xdata$x        ends
.xdata$x:00002B8B
.text:00002B8C ; ===========================================================================
.text:00002B8C
.text:00002B8C ; Segment type: Pure code
.text:00002B8C ; Segment permissions: Read/Execute
.text:00002B8C _text           segment para public 'CODE' use32
.text:00002B8C                 assume cs:_text
.text:00002B8C                 ;org 2B8Ch
.text:00002B8C ; COMDAT (pick any)
.text:00002B8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002B8C
.text:00002B8C ; =============== S U B R O U T I N E =======================================
.text:00002B8C
.text:00002B8C ; Attributes: bp-based frame
.text:00002B8C
.text:00002B8C ; _DWORD __thiscall UString::~UString(UString *__hidden this)
.text:00002B8C                 public ??1UString@@QAE@XZ
.text:00002B8C ??1UString@@QAE@XZ proc near            ; CODE XREF: CExtractScanConsole::ScanError(UString const &,ulong)+DDp
.text:00002B8C                                         ; Print_ErrorFormatIndex_Warning(CStdOutStream *,CCodecs const *,CArc const &)+102p ...
.text:00002B8C
.text:00002B8C var_8           = dword ptr -8
.text:00002B8C var_4           = dword ptr -4
.text:00002B8C
.text:00002B8C                 push    ebp
.text:00002B8D                 mov     ebp, esp
.text:00002B8F                 sub     esp, 8
.text:00002B92                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002B99                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002BA0                 mov     [ebp+var_4], ecx
.text:00002BA3                 mov     eax, [ebp+var_4]
.text:00002BA6                 mov     ecx, [eax]
.text:00002BA8                 mov     [ebp+var_8], ecx
.text:00002BAB                 mov     edx, [ebp+var_8]
.text:00002BAE                 push    edx             ; void *
.text:00002BAF                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00002BB4                 add     esp, 4
.text:00002BB7                 add     esp, 8
.text:00002BBA                 cmp     ebp, esp
.text:00002BBC                 call    __RTC_CheckEsp
.text:00002BC1                 mov     esp, ebp
.text:00002BC3                 pop     ebp
.text:00002BC4                 retn
.text:00002BC4 ??1UString@@QAE@XZ endp
.text:00002BC4
.text:00002BC4 ; ---------------------------------------------------------------------------
.text:00002BC5                 align 4
.text:00002BC5 _text           ends
.text:00002BC5
.text:00002BC8 ; ===========================================================================
.text:00002BC8
.text:00002BC8 ; Segment type: Pure code
.text:00002BC8 ; Segment permissions: Read/Execute
.text:00002BC8 _text           segment para public 'CODE' use32
.text:00002BC8                 assume cs:_text
.text:00002BC8                 ;org 2BC8h
.text:00002BC8 ; COMDAT (pick any)
.text:00002BC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002BC8
.text:00002BC8 ; =============== S U B R O U T I N E =======================================
.text:00002BC8
.text:00002BC8 ; Attributes: bp-based frame
.text:00002BC8
.text:00002BC8 ; public: __thiscall UString::operator wchar_t const *(void)const
.text:00002BC8                 public ??BUString@@QBEPB_WXZ
.text:00002BC8 ??BUString@@QBEPB_WXZ proc near         ; CODE XREF: CExtractScanConsole::ScanError(UString const &,ulong)+61p
.text:00002BC8                                         ; CExtractScanConsole::ScanError(UString const &,ulong)+8Cp ...
.text:00002BC8
.text:00002BC8 var_4           = dword ptr -4
.text:00002BC8
.text:00002BC8                 push    ebp
.text:00002BC9                 mov     ebp, esp
.text:00002BCB                 push    ecx
.text:00002BCC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002BD3                 mov     [ebp+var_4], ecx
.text:00002BD6                 mov     eax, [ebp+var_4]
.text:00002BD9                 mov     eax, [eax]
.text:00002BDB                 mov     esp, ebp
.text:00002BDD                 pop     ebp
.text:00002BDE                 retn
.text:00002BDE ??BUString@@QBEPB_WXZ endp
.text:00002BDE
.text:00002BDE ; ---------------------------------------------------------------------------
.text:00002BDF                 align 10h
.text:00002BDF _text           ends
.text:00002BDF
.text:00002BE0 ; ===========================================================================
.text:00002BE0
.text:00002BE0 ; Segment type: Pure code
.text:00002BE0 ; Segment permissions: Read/Execute
.text:00002BE0 _text           segment para public 'CODE' use32
.text:00002BE0                 assume cs:_text
.text:00002BE0                 ;org 2BE0h
.text:00002BE0 ; COMDAT (pick any)
.text:00002BE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002BE0
.text:00002BE0 ; =============== S U B R O U T I N E =======================================
.text:00002BE0
.text:00002BE0 ; Attributes: bp-based frame
.text:00002BE0
.text:00002BE0 ; __stdcall HRESULT_FROM_WIN32(x)
.text:00002BE0                 public _HRESULT_FROM_WIN32@4
.text:00002BE0 _HRESULT_FROM_WIN32@4 proc near         ; CODE XREF: CExtractScanConsole::ScanError(UString const &,ulong)+F1p
.text:00002BE0
.text:00002BE0 var_4           = dword ptr -4
.text:00002BE0 arg_0           = dword ptr  8
.text:00002BE0
.text:00002BE0                 push    ebp
.text:00002BE1                 mov     ebp, esp
.text:00002BE3                 push    ecx
.text:00002BE4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002BEB                 cmp     [ebp+arg_0], 0
.text:00002BEF                 jg      short loc_2BF9
.text:00002BF1                 mov     eax, [ebp+arg_0]
.text:00002BF4                 mov     [ebp+var_4], eax
.text:00002BF7                 jmp     short loc_2C11
.text:00002BF9 ; ---------------------------------------------------------------------------
.text:00002BF9
.text:00002BF9 loc_2BF9:                               ; CODE XREF: HRESULT_FROM_WIN32(x)+Fj
.text:00002BF9                 mov     ecx, [ebp+arg_0]
.text:00002BFC                 and     ecx, 0FFFFh
.text:00002C02                 or      ecx, 70000h
.text:00002C08                 or      ecx, 80000000h
.text:00002C0E                 mov     [ebp+var_4], ecx
.text:00002C11
.text:00002C11 loc_2C11:                               ; CODE XREF: HRESULT_FROM_WIN32(x)+17j
.text:00002C11                 mov     eax, [ebp+var_4]
.text:00002C14                 mov     esp, ebp
.text:00002C16                 pop     ebp
.text:00002C17                 retn    4
.text:00002C17 _HRESULT_FROM_WIN32@4 endp
.text:00002C17
.text:00002C17 ; ---------------------------------------------------------------------------
.text:00002C1A                 align 4
.text:00002C1A _text           ends
.text:00002C1A
.text:00002C1C ; ===========================================================================
.text:00002C1C
.text:00002C1C ; Segment type: Pure code
.text:00002C1C ; Segment permissions: Read/Execute
.text:00002C1C _text           segment para public 'CODE' use32
.text:00002C1C                 assume cs:_text
.text:00002C1C                 ;org 2C1Ch
.text:00002C1C ; COMDAT (pick any)
.text:00002C1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002C1C
.text:00002C1C ; =============== S U B R O U T I N E =======================================
.text:00002C1C
.text:00002C1C ; Attributes: bp-based frame
.text:00002C1C
.text:00002C1C ; public: class CStdOutStream & __thiscall CStdOutStream::operator<<(class CStdOutStream & (__stdcall *)(class CStdOutStream &))
.text:00002C1C                 public ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z
.text:00002C1C ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z proc near
.text:00002C1C                                         ; CODE XREF: CExtractScanConsole::ScanError(UString const &,ulong)+A4p
.text:00002C1C                                         ; CExtractScanConsole::ScanError(UString const &,ulong)+B9p ...
.text:00002C1C
.text:00002C1C var_4           = dword ptr -4
.text:00002C1C arg_0           = dword ptr  8
.text:00002C1C
.text:00002C1C                 push    ebp
.text:00002C1D                 mov     ebp, esp
.text:00002C1F                 push    ecx
.text:00002C20                 push    esi
.text:00002C21                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002C28                 mov     [ebp+var_4], ecx
.text:00002C2B                 mov     esi, esp
.text:00002C2D                 mov     eax, [ebp+var_4]
.text:00002C30                 push    eax
.text:00002C31                 call    [ebp+arg_0]
.text:00002C34                 cmp     esi, esp
.text:00002C36                 call    __RTC_CheckEsp
.text:00002C3B                 mov     eax, [ebp+var_4]
.text:00002C3E                 pop     esi
.text:00002C3F                 add     esp, 4
.text:00002C42                 cmp     ebp, esp
.text:00002C44                 call    __RTC_CheckEsp
.text:00002C49                 mov     esp, ebp
.text:00002C4B                 pop     ebp
.text:00002C4C                 retn    4
.text:00002C4C ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z endp
.text:00002C4C
.text:00002C4C ; ---------------------------------------------------------------------------
.text:00002C4F                 align 10h
.text:00002C4F _text           ends
.text:00002C4F
.text:00002C50 ; ===========================================================================
.text:00002C50
.text:00002C50 ; Segment type: Pure code
.text:00002C50 ; Segment permissions: Read/Execute
.text:00002C50 _text           segment para public 'CODE' use32
.text:00002C50                 assume cs:_text
.text:00002C50                 ;org 2C50h
.text:00002C50 ; COMDAT (pick any)
.text:00002C50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002C50
.text:00002C50 ; =============== S U B R O U T I N E =======================================
.text:00002C50
.text:00002C50 ; Attributes: bp-based frame
.text:00002C50
.text:00002C50 ; int __stdcall CStdOutStream::operator<<(char *Str)
.text:00002C50                 public ??6CStdOutStream@@QAEAAV0@PBD@Z
.text:00002C50 ??6CStdOutStream@@QAEAAV0@PBD@Z proc near
.text:00002C50                                         ; CODE XREF: CExtractScanConsole::ScanError(UString const &,ulong)+ABp
.text:00002C50                                         ; CExtractScanConsole::PrintStat(CDirItemsStat const &)+78p ...
.text:00002C50
.text:00002C50 var_4           = dword ptr -4
.text:00002C50 Str             = dword ptr  8
.text:00002C50
.text:00002C50                 push    ebp
.text:00002C51                 mov     ebp, esp
.text:00002C53                 push    ecx
.text:00002C54                 push    esi
.text:00002C55                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002C5C                 mov     [ebp+var_4], ecx
.text:00002C5F                 mov     esi, esp
.text:00002C61                 mov     eax, [ebp+var_4]
.text:00002C64                 mov     ecx, [eax]
.text:00002C66                 push    ecx             ; File
.text:00002C67                 mov     edx, [ebp+Str]
.text:00002C6A                 push    edx             ; Str
.text:00002C6B                 call    dword ptr ds:__imp__fputs
.text:00002C71                 add     esp, 8
.text:00002C74                 cmp     esi, esp
.text:00002C76                 call    __RTC_CheckEsp
.text:00002C7B                 mov     eax, [ebp+var_4]
.text:00002C7E                 pop     esi
.text:00002C7F                 add     esp, 4
.text:00002C82                 cmp     ebp, esp
.text:00002C84                 call    __RTC_CheckEsp
.text:00002C89                 mov     esp, ebp
.text:00002C8B                 pop     ebp
.text:00002C8C                 retn    4
.text:00002C8C ??6CStdOutStream@@QAEAAV0@PBD@Z endp
.text:00002C8C
.text:00002C8C ; ---------------------------------------------------------------------------
.text:00002C8F                 align 10h
.text:00002C8F _text           ends
.text:00002C8F
.text:00002C90 ; ===========================================================================
.text:00002C90
.text:00002C90 ; Segment type: Pure code
.text:00002C90 ; Segment permissions: Read/Execute
.text:00002C90 _text           segment para public 'CODE' use32
.text:00002C90                 assume cs:_text
.text:00002C90                 ;org 2C90h
.text:00002C90 ; COMDAT (pick any)
.text:00002C90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002C90
.text:00002C90 ; =============== S U B R O U T I N E =======================================
.text:00002C90
.text:00002C90 ; Attributes: bp-based frame
.text:00002C90
.text:00002C90 ; void __thiscall CExtractScanConsole::ClosePercentsAndFlush(CExtractScanConsole *__hidden this)
.text:00002C90                 public ?ClosePercentsAndFlush@CExtractScanConsole@@AAEXXZ
.text:00002C90 ?ClosePercentsAndFlush@CExtractScanConsole@@AAEXXZ proc near
.text:00002C90                                         ; CODE XREF: CExtractScanConsole::ScanError(UString const &,ulong)+42p
.text:00002C90
.text:00002C90 var_4           = dword ptr -4
.text:00002C90
.text:00002C90                 push    ebp
.text:00002C91                 mov     ebp, esp
.text:00002C93                 push    ecx
.text:00002C94                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002C9B                 mov     [ebp+var_4], ecx
.text:00002C9E                 mov     ecx, [ebp+var_4] ; this
.text:00002CA1                 call    ?NeedPercents@CExtractScanConsole@@ABE_NXZ ; CExtractScanConsole::NeedPercents(void)
.text:00002CA6                 movzx   eax, al
.text:00002CA9                 test    eax, eax
.text:00002CAB                 jz      short loc_2CBA
.text:00002CAD                 push    1               ; bool
.text:00002CAF                 mov     ecx, [ebp+var_4]
.text:00002CB2                 add     ecx, 10h        ; this
.text:00002CB5                 call    ?ClosePrint@CPercentPrinter@@QAEX_N@Z ; CPercentPrinter::ClosePrint(bool)
.text:00002CBA
.text:00002CBA loc_2CBA:                               ; CODE XREF: CExtractScanConsole::ClosePercentsAndFlush(void)+1Bj
.text:00002CBA                 mov     ecx, [ebp+var_4]
.text:00002CBD                 cmp     dword ptr [ecx+4], 0
.text:00002CC1                 jz      short loc_2CCE
.text:00002CC3                 mov     edx, [ebp+var_4]
.text:00002CC6                 mov     ecx, [edx+4]    ; this
.text:00002CC9                 call    ?Flush@CStdOutStream@@QAE_NXZ ; CStdOutStream::Flush(void)
.text:00002CCE
.text:00002CCE loc_2CCE:                               ; CODE XREF: CExtractScanConsole::ClosePercentsAndFlush(void)+31j
.text:00002CCE                 add     esp, 4
.text:00002CD1                 cmp     ebp, esp
.text:00002CD3                 call    __RTC_CheckEsp
.text:00002CD8                 mov     esp, ebp
.text:00002CDA                 pop     ebp
.text:00002CDB                 retn
.text:00002CDB ?ClosePercentsAndFlush@CExtractScanConsole@@AAEXXZ endp
.text:00002CDB
.text:00002CDB _text           ends
.text:00002CDB
.text:00002CDC ; ===========================================================================
.text:00002CDC
.text:00002CDC ; Segment type: Pure code
.text:00002CDC ; Segment permissions: Read/Execute
.text:00002CDC _text           segment para public 'CODE' use32
.text:00002CDC                 assume cs:_text
.text:00002CDC                 ;org 2CDCh
.text:00002CDC ; COMDAT (pick any)
.text:00002CDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002CDC
.text:00002CDC ; =============== S U B R O U T I N E =======================================
.text:00002CDC
.text:00002CDC ; Attributes: bp-based frame
.text:00002CDC
.text:00002CDC ; public: class AString & __thiscall AString::operator+=(char)
.text:00002CDC                 public ??YAString@@QAEAAV0@D@Z
.text:00002CDC ??YAString@@QAEAAV0@D@Z proc near       ; CODE XREF: PrintSize_bytes_Smart(AString &,unsigned __int64)+DAp
.text:00002CDC
.text:00002CDC var_C           = dword ptr -0Ch
.text:00002CDC var_8           = dword ptr -8
.text:00002CDC var_4           = dword ptr -4
.text:00002CDC arg_0           = byte ptr  8
.text:00002CDC
.text:00002CDC                 push    ebp
.text:00002CDD                 mov     ebp, esp
.text:00002CDF                 sub     esp, 0Ch
.text:00002CE2                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00002CE9                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002CF0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002CF7                 mov     [ebp+var_4], ecx
.text:00002CFA                 mov     eax, [ebp+var_4]
.text:00002CFD                 mov     ecx, [ebp+var_4]
.text:00002D00                 mov     edx, [eax+8]
.text:00002D03                 cmp     edx, [ecx+4]
.text:00002D06                 jnz     short loc_2D10
.text:00002D08                 mov     ecx, [ebp+var_4] ; this
.text:00002D0B                 call    ?Grow_1@AString@@AAEXXZ ; AString::Grow_1(void)
.text:00002D10
.text:00002D10 loc_2D10:                               ; CODE XREF: AString::operator+=(char)+2Aj
.text:00002D10                 mov     eax, [ebp+var_4]
.text:00002D13                 mov     ecx, [eax+4]
.text:00002D16                 mov     [ebp+var_8], ecx
.text:00002D19                 mov     edx, [ebp+var_4]
.text:00002D1C                 mov     eax, [edx]
.text:00002D1E                 mov     [ebp+var_C], eax
.text:00002D21                 mov     ecx, [ebp+var_C]
.text:00002D24                 add     ecx, [ebp+var_8]
.text:00002D27                 mov     dl, [ebp+arg_0]
.text:00002D2A                 mov     [ecx], dl
.text:00002D2C                 mov     eax, [ebp+var_8]
.text:00002D2F                 add     eax, 1
.text:00002D32                 mov     [ebp+var_8], eax
.text:00002D35                 mov     ecx, [ebp+var_C]
.text:00002D38                 add     ecx, [ebp+var_8]
.text:00002D3B                 mov     byte ptr [ecx], 0
.text:00002D3E                 mov     edx, [ebp+var_4]
.text:00002D41                 mov     eax, [ebp+var_8]
.text:00002D44                 mov     [edx+4], eax
.text:00002D47                 mov     eax, [ebp+var_4]
.text:00002D4A                 add     esp, 0Ch
.text:00002D4D                 cmp     ebp, esp
.text:00002D4F                 call    __RTC_CheckEsp
.text:00002D54                 mov     esp, ebp
.text:00002D56                 pop     ebp
.text:00002D57                 retn    4
.text:00002D57 ??YAString@@QAEAAV0@D@Z endp
.text:00002D57
.text:00002D57 ; ---------------------------------------------------------------------------
.text:00002D5A                 align 4
.text:00002D5A _text           ends
.text:00002D5A
.text:00002D5C ; ===========================================================================
.text:00002D5C
.text:00002D5C ; Segment type: Pure code
.text:00002D5C ; Segment permissions: Read/Execute
.text:00002D5C _text           segment para public 'CODE' use32
.text:00002D5C                 assume cs:_text
.text:00002D5C                 ;org 2D5Ch
.text:00002D5C ; COMDAT (pick any)
.text:00002D5C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002D5C
.text:00002D5C ; =============== S U B R O U T I N E =======================================
.text:00002D5C
.text:00002D5C ; Attributes: bp-based frame
.text:00002D5C
.text:00002D5C ; _DWORD __thiscall AString::~AString(AString *__hidden this)
.text:00002D5C                 public ??1AString@@QAE@XZ
.text:00002D5C ??1AString@@QAE@XZ proc near            ; CODE XREF: CExtractScanConsole::PrintStat(CDirItemsStat const &)+8Ep
.text:00002D5C                                         ; PrintFileInfo(CStdOutStream *,wchar_t const *,_FILETIME const *,unsigned __int64 const *)+D3p ...
.text:00002D5C
.text:00002D5C var_8           = dword ptr -8
.text:00002D5C var_4           = dword ptr -4
.text:00002D5C
.text:00002D5C                 push    ebp
.text:00002D5D                 mov     ebp, esp
.text:00002D5F                 sub     esp, 8
.text:00002D62                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002D69                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002D70                 mov     [ebp+var_4], ecx
.text:00002D73                 mov     eax, [ebp+var_4]
.text:00002D76                 mov     ecx, [eax]
.text:00002D78                 mov     [ebp+var_8], ecx
.text:00002D7B                 mov     edx, [ebp+var_8]
.text:00002D7E                 push    edx             ; void *
.text:00002D7F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00002D84                 add     esp, 4
.text:00002D87                 add     esp, 8
.text:00002D8A                 cmp     ebp, esp
.text:00002D8C                 call    __RTC_CheckEsp
.text:00002D91                 mov     esp, ebp
.text:00002D93                 pop     ebp
.text:00002D94                 retn
.text:00002D94 ??1AString@@QAE@XZ endp
.text:00002D94
.text:00002D94 ; ---------------------------------------------------------------------------
.text:00002D95                 align 4
.text:00002D95 _text           ends
.text:00002D95
.text:00002D98 ; ===========================================================================
.text:00002D98
.text:00002D98 ; Segment type: Pure code
.text:00002D98 ; Segment permissions: Read/Execute
.text:00002D98 _text           segment para public 'CODE' use32
.text:00002D98                 assume cs:_text
.text:00002D98                 ;org 2D98h
.text:00002D98 ; COMDAT (pick any)
.text:00002D98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002D98
.text:00002D98 ; =============== S U B R O U T I N E =======================================
.text:00002D98
.text:00002D98 ; Attributes: bp-based frame
.text:00002D98
.text:00002D98 ; public: __thiscall AString::operator char const *(void)const
.text:00002D98                 public ??BAString@@QBEPBDXZ
.text:00002D98 ??BAString@@QBEPBDXZ proc near          ; CODE XREF: CExtractScanConsole::PrintStat(CDirItemsStat const &)+6Cp
.text:00002D98                                         ; PrintFileInfo(CStdOutStream *,wchar_t const *,_FILETIME const *,unsigned __int64 const *)+9Bp ...
.text:00002D98
.text:00002D98 var_4           = dword ptr -4
.text:00002D98
.text:00002D98                 push    ebp
.text:00002D99                 mov     ebp, esp
.text:00002D9B                 push    ecx
.text:00002D9C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002DA3                 mov     [ebp+var_4], ecx
.text:00002DA6                 mov     eax, [ebp+var_4]
.text:00002DA9                 mov     eax, [eax]
.text:00002DAB                 mov     esp, ebp
.text:00002DAD                 pop     ebp
.text:00002DAE                 retn
.text:00002DAE ??BAString@@QBEPBDXZ endp
.text:00002DAE
.text:00002DAE ; ---------------------------------------------------------------------------
.text:00002DAF                 align 10h
.text:00002DAF _text           ends
.text:00002DAF
.text:00002DB0 ; ===========================================================================
.text:00002DB0
.text:00002DB0 ; Segment type: Pure code
.text:00002DB0 ; Segment permissions: Read/Execute
.text:00002DB0 _text           segment para public 'CODE' use32
.text:00002DB0                 assume cs:_text
.text:00002DB0                 ;org 2DB0h
.text:00002DB0 ; COMDAT (pick any)
.text:00002DB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002DB0
.text:00002DB0 ; =============== S U B R O U T I N E =======================================
.text:00002DB0
.text:00002DB0 ; Attributes: bp-based frame
.text:00002DB0
.text:00002DB0 ; _DWORD __thiscall NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock(NWindows::NSynchronization::CCriticalSectionLock *this, struct NWindows::NSynchronization::CCriticalSection *)
.text:00002DB0                 public ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z
.text:00002DB0 ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z proc near
.text:00002DB0                                         ; CODE XREF: CExtractCallbackConsole::SetTotal(unsigned __int64)+1Fp
.text:00002DB0                                         ; CExtractCallbackConsole::SetCompleted(unsigned __int64 const *)+1Fp ...
.text:00002DB0
.text:00002DB0 var_4           = dword ptr -4
.text:00002DB0 arg_0           = dword ptr  8
.text:00002DB0
.text:00002DB0                 push    ebp
.text:00002DB1                 mov     ebp, esp
.text:00002DB3                 push    ecx
.text:00002DB4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002DBB                 mov     [ebp+var_4], ecx
.text:00002DBE                 mov     eax, [ebp+var_4]
.text:00002DC1                 mov     ecx, [ebp+arg_0]
.text:00002DC4                 mov     [eax], ecx
.text:00002DC6                 mov     edx, [ebp+var_4]
.text:00002DC9                 mov     ecx, [edx]      ; this
.text:00002DCB                 call    ?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ; NWindows::NSynchronization::CCriticalSection::Enter(void)
.text:00002DD0                 mov     eax, [ebp+var_4]
.text:00002DD3                 add     esp, 4
.text:00002DD6                 cmp     ebp, esp
.text:00002DD8                 call    __RTC_CheckEsp
.text:00002DDD                 mov     esp, ebp
.text:00002DDF                 pop     ebp
.text:00002DE0                 retn    4
.text:00002DE0 ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z endp
.text:00002DE0
.text:00002DE0 ; ---------------------------------------------------------------------------
.text:00002DE3                 align 4
.text:00002DE3 _text           ends
.text:00002DE3
.text:00002DE4 ; ===========================================================================
.text:00002DE4
.text:00002DE4 ; Segment type: Pure code
.text:00002DE4 ; Segment permissions: Read/Execute
.text:00002DE4 _text           segment para public 'CODE' use32
.text:00002DE4                 assume cs:_text
.text:00002DE4                 ;org 2DE4h
.text:00002DE4 ; COMDAT (pick any)
.text:00002DE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002DE4
.text:00002DE4 ; =============== S U B R O U T I N E =======================================
.text:00002DE4
.text:00002DE4 ; Attributes: bp-based frame
.text:00002DE4
.text:00002DE4 ; void __thiscall NWindows::NSynchronization::CCriticalSection::Enter(NWindows::NSynchronization::CCriticalSection *__hidden this)
.text:00002DE4                 public ?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ
.text:00002DE4 ?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ proc near
.text:00002DE4                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock(NWindows::NSynchronization::CCriticalSection &)+1Bp
.text:00002DE4
.text:00002DE4 lpCriticalSection= dword ptr -4
.text:00002DE4
.text:00002DE4                 push    ebp
.text:00002DE5                 mov     ebp, esp
.text:00002DE7                 push    ecx
.text:00002DE8                 push    esi
.text:00002DE9                 mov     [ebp+lpCriticalSection], 0CCCCCCCCh
.text:00002DF0                 mov     [ebp+lpCriticalSection], ecx
.text:00002DF3                 mov     esi, esp
.text:00002DF5                 mov     eax, [ebp+lpCriticalSection]
.text:00002DF8                 push    eax             ; lpCriticalSection
.text:00002DF9                 call    dword ptr ds:__imp__EnterCriticalSection@4 ; EnterCriticalSection(x)
.text:00002DFF                 cmp     esi, esp
.text:00002E01                 call    __RTC_CheckEsp
.text:00002E06                 pop     esi
.text:00002E07                 add     esp, 4
.text:00002E0A                 cmp     ebp, esp
.text:00002E0C                 call    __RTC_CheckEsp
.text:00002E11                 mov     esp, ebp
.text:00002E13                 pop     ebp
.text:00002E14                 retn
.text:00002E14 ?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ endp
.text:00002E14
.text:00002E14 ; ---------------------------------------------------------------------------
.text:00002E15                 align 4
.text:00002E15 _text           ends
.text:00002E15
.text:00002E18 ; ===========================================================================
.text:00002E18
.text:00002E18 ; Segment type: Pure code
.text:00002E18 ; Segment permissions: Read/Execute
.text:00002E18 _text           segment para public 'CODE' use32
.text:00002E18                 assume cs:_text
.text:00002E18                 ;org 2E18h
.text:00002E18 ; COMDAT (pick any)
.text:00002E18                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002E18
.text:00002E18 ; =============== S U B R O U T I N E =======================================
.text:00002E18
.text:00002E18 ; Attributes: bp-based frame
.text:00002E18
.text:00002E18 ; _DWORD __thiscall NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(NWindows::NSynchronization::CCriticalSectionLock *__hidden this)
.text:00002E18                 public ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ
.text:00002E18 ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ proc near
.text:00002E18                                         ; CODE XREF: CExtractCallbackConsole::SetTotal(unsigned __int64)+5Bp
.text:00002E18                                         ; CExtractCallbackConsole::SetCompleted(unsigned __int64 const *)+63p ...
.text:00002E18
.text:00002E18 var_4           = dword ptr -4
.text:00002E18
.text:00002E18                 push    ebp
.text:00002E19                 mov     ebp, esp
.text:00002E1B                 push    ecx
.text:00002E1C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002E23                 mov     [ebp+var_4], ecx
.text:00002E26                 mov     ecx, [ebp+var_4] ; this
.text:00002E29                 call    ?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ ; NWindows::NSynchronization::CCriticalSectionLock::Unlock(void)
.text:00002E2E                 add     esp, 4
.text:00002E31                 cmp     ebp, esp
.text:00002E33                 call    __RTC_CheckEsp
.text:00002E38                 mov     esp, ebp
.text:00002E3A                 pop     ebp
.text:00002E3B                 retn
.text:00002E3B ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ endp
.text:00002E3B
.text:00002E3B _text           ends
.text:00002E3B
.text:00002E3C ; ===========================================================================
.text:00002E3C
.text:00002E3C ; Segment type: Pure code
.text:00002E3C ; Segment permissions: Read/Execute
.text:00002E3C _text           segment para public 'CODE' use32
.text:00002E3C                 assume cs:_text
.text:00002E3C                 ;org 2E3Ch
.text:00002E3C ; COMDAT (pick any)
.text:00002E3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002E3C
.text:00002E3C ; =============== S U B R O U T I N E =======================================
.text:00002E3C
.text:00002E3C ; Attributes: bp-based frame
.text:00002E3C
.text:00002E3C ; void __thiscall NWindows::NSynchronization::CCriticalSectionLock::Unlock(NWindows::NSynchronization::CCriticalSectionLock *__hidden this)
.text:00002E3C                 public ?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ
.text:00002E3C ?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ proc near
.text:00002E3C                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)+11p
.text:00002E3C
.text:00002E3C var_4           = dword ptr -4
.text:00002E3C
.text:00002E3C                 push    ebp
.text:00002E3D                 mov     ebp, esp
.text:00002E3F                 push    ecx
.text:00002E40                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002E47                 mov     [ebp+var_4], ecx
.text:00002E4A                 mov     eax, [ebp+var_4]
.text:00002E4D                 mov     ecx, [eax]      ; this
.text:00002E4F                 call    ?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ; NWindows::NSynchronization::CCriticalSection::Leave(void)
.text:00002E54                 add     esp, 4
.text:00002E57                 cmp     ebp, esp
.text:00002E59                 call    __RTC_CheckEsp
.text:00002E5E                 mov     esp, ebp
.text:00002E60                 pop     ebp
.text:00002E61                 retn
.text:00002E61 ?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ endp
.text:00002E61
.text:00002E61 ; ---------------------------------------------------------------------------
.text:00002E62                 align 4
.text:00002E62 _text           ends
.text:00002E62
.text:00002E64 ; ===========================================================================
.text:00002E64
.text:00002E64 ; Segment type: Pure code
.text:00002E64 ; Segment permissions: Read/Execute
.text:00002E64 _text           segment para public 'CODE' use32
.text:00002E64                 assume cs:_text
.text:00002E64                 ;org 2E64h
.text:00002E64 ; COMDAT (pick any)
.text:00002E64                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002E64
.text:00002E64 ; =============== S U B R O U T I N E =======================================
.text:00002E64
.text:00002E64 ; Attributes: bp-based frame
.text:00002E64
.text:00002E64 ; void __thiscall NWindows::NSynchronization::CCriticalSection::Leave(NWindows::NSynchronization::CCriticalSection *__hidden this)
.text:00002E64                 public ?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ
.text:00002E64 ?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ proc near
.text:00002E64                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSectionLock::Unlock(void)+13p
.text:00002E64
.text:00002E64 lpCriticalSection= dword ptr -4
.text:00002E64
.text:00002E64                 push    ebp
.text:00002E65                 mov     ebp, esp
.text:00002E67                 push    ecx
.text:00002E68                 push    esi
.text:00002E69                 mov     [ebp+lpCriticalSection], 0CCCCCCCCh
.text:00002E70                 mov     [ebp+lpCriticalSection], ecx
.text:00002E73                 mov     esi, esp
.text:00002E75                 mov     eax, [ebp+lpCriticalSection]
.text:00002E78                 push    eax             ; lpCriticalSection
.text:00002E79                 call    dword ptr ds:__imp__LeaveCriticalSection@4 ; LeaveCriticalSection(x)
.text:00002E7F                 cmp     esi, esp
.text:00002E81                 call    __RTC_CheckEsp
.text:00002E86                 pop     esi
.text:00002E87                 add     esp, 4
.text:00002E8A                 cmp     ebp, esp
.text:00002E8C                 call    __RTC_CheckEsp
.text:00002E91                 mov     esp, ebp
.text:00002E93                 pop     ebp
.text:00002E94                 retn
.text:00002E94 ?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ endp
.text:00002E94
.text:00002E94 ; ---------------------------------------------------------------------------
.text:00002E95                 align 4
.text:00002E95 _text           ends
.text:00002E95
.text:00002E98 ; ===========================================================================
.text:00002E98
.text:00002E98 ; Segment type: Pure code
.text:00002E98 ; Segment permissions: Read/Execute
.text:00002E98 _text           segment para public 'CODE' use32
.text:00002E98                 assume cs:_text
.text:00002E98                 ;org 2E98h
.text:00002E98 ; COMDAT (pick any)
.text:00002E98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002E98
.text:00002E98 ; =============== S U B R O U T I N E =======================================
.text:00002E98
.text:00002E98 ; Attributes: bp-based frame
.text:00002E98
.text:00002E98 ; bool __thiscall COpenCallbackConsole::NeedPercents(COpenCallbackConsole *__hidden this)
.text:00002E98                 public ?NeedPercents@COpenCallbackConsole@@IBE_NXZ
.text:00002E98 ?NeedPercents@COpenCallbackConsole@@IBE_NXZ proc near
.text:00002E98                                         ; CODE XREF: CExtractCallbackConsole::SetTotal(unsigned __int64)+2Ap
.text:00002E98                                         ; CExtractCallbackConsole::SetCompleted(unsigned __int64 const *)+2Ap ...
.text:00002E98
.text:00002E98 var_4           = dword ptr -4
.text:00002E98
.text:00002E98                 push    ebp
.text:00002E99                 mov     ebp, esp
.text:00002E9B                 push    ecx
.text:00002E9C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002EA3                 mov     [ebp+var_4], ecx
.text:00002EA6                 mov     eax, [ebp+var_4]
.text:00002EA9                 xor     ecx, ecx
.text:00002EAB                 cmp     dword ptr [eax+0ACh], 0
.text:00002EB2                 setnz   cl
.text:00002EB5                 mov     al, cl
.text:00002EB7                 mov     esp, ebp
.text:00002EB9                 pop     ebp
.text:00002EBA                 retn
.text:00002EBA ?NeedPercents@COpenCallbackConsole@@IBE_NXZ endp
.text:00002EBA
.text:00002EBA ; ---------------------------------------------------------------------------
.text:00002EBB                 align 4
.text:00002EBB _text           ends
.text:00002EBB
.text:00002EBC ; ===========================================================================
.text:00002EBC
.text:00002EBC ; Segment type: Pure code
.text:00002EBC ; Segment permissions: Read/Execute
.text:00002EBC _text           segment para public 'CODE' use32
.text:00002EBC                 assume cs:_text
.text:00002EBC                 ;org 2EBCh
.text:00002EBC ; COMDAT (pick any)
.text:00002EBC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002EBC
.text:00002EBC ; =============== S U B R O U T I N E =======================================
.text:00002EBC
.text:00002EBC ; Attributes: bp-based frame
.text:00002EBC
.text:00002EBC ; void __thiscall CExtractCallbackConsole::ClosePercentsAndFlush(CExtractCallbackConsole *__hidden this)
.text:00002EBC                 public ?ClosePercentsAndFlush@CExtractCallbackConsole@@AAEXXZ
.text:00002EBC ?ClosePercentsAndFlush@CExtractCallbackConsole@@AAEXXZ proc near
.text:00002EBC                                         ; CODE XREF: CExtractCallbackConsole::AskOverwrite(wchar_t const *,_FILETIME const *,unsigned __int64 const *,wchar_t const *,_FILETIME const *,unsigned __int64 const *,int *)+4Ap
.text:00002EBC                                         ; CExtractCallbackConsole::MessageError(wchar_t const *)+99p ...
.text:00002EBC
.text:00002EBC var_4           = dword ptr -4
.text:00002EBC
.text:00002EBC                 push    ebp
.text:00002EBD                 mov     ebp, esp
.text:00002EBF                 push    ecx
.text:00002EC0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002EC7                 mov     [ebp+var_4], ecx
.text:00002ECA                 mov     ecx, [ebp+var_4]
.text:00002ECD                 add     ecx, 10h        ; this
.text:00002ED0                 call    ?NeedPercents@COpenCallbackConsole@@IBE_NXZ ; COpenCallbackConsole::NeedPercents(void)
.text:00002ED5                 movzx   eax, al
.text:00002ED8                 test    eax, eax
.text:00002EDA                 jz      short loc_2EE9
.text:00002EDC                 push    1               ; bool
.text:00002EDE                 mov     ecx, [ebp+var_4]
.text:00002EE1                 add     ecx, 18h        ; this
.text:00002EE4                 call    ?ClosePrint@CPercentPrinter@@QAEX_N@Z ; CPercentPrinter::ClosePrint(bool)
.text:00002EE9
.text:00002EE9 loc_2EE9:                               ; CODE XREF: CExtractCallbackConsole::ClosePercentsAndFlush(void)+1Ej
.text:00002EE9                 mov     ecx, [ebp+var_4]
.text:00002EEC                 cmp     dword ptr [ecx+0C8h], 0
.text:00002EF3                 jz      short loc_2F03
.text:00002EF5                 mov     edx, [ebp+var_4]
.text:00002EF8                 mov     ecx, [edx+0C8h] ; this
.text:00002EFE                 call    ?Flush@CStdOutStream@@QAE_NXZ ; CStdOutStream::Flush(void)
.text:00002F03
.text:00002F03 loc_2F03:                               ; CODE XREF: CExtractCallbackConsole::ClosePercentsAndFlush(void)+37j
.text:00002F03                 add     esp, 4
.text:00002F06                 cmp     ebp, esp
.text:00002F08                 call    __RTC_CheckEsp
.text:00002F0D                 mov     esp, ebp
.text:00002F0F                 pop     ebp
.text:00002F10                 retn
.text:00002F10 ?ClosePercentsAndFlush@CExtractCallbackConsole@@AAEXXZ endp
.text:00002F10
.text:00002F10 ; ---------------------------------------------------------------------------
.text:00002F11                 align 4
.text:00002F11 _text           ends
.text:00002F11
.text:00002F14 ; ===========================================================================
.text:00002F14
.text:00002F14 ; Segment type: Pure code
.text:00002F14 ; Segment permissions: Read/Execute
.text:00002F14 _text           segment para public 'CODE' use32
.text:00002F14                 assume cs:_text
.text:00002F14                 ;org 2F14h
.text:00002F14 ; COMDAT (pick any)
.text:00002F14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002F14
.text:00002F14 ; =============== S U B R O U T I N E =======================================
.text:00002F14
.text:00002F14 ; Attributes: bp-based frame
.text:00002F14
.text:00002F14 ; void __thiscall AString::Empty(AString *__hidden this)
.text:00002F14                 public ?Empty@AString@@QAEXXZ
.text:00002F14 ?Empty@AString@@QAEXXZ proc near        ; CODE XREF: CExtractCallbackConsole::PrepareOperation(wchar_t const *,int,int,unsigned __int64 const *)+1FEp
.text:00002F14                                         ; SetExtractErrorMessage(int,int,AString &)+23p ...
.text:00002F14
.text:00002F14 var_4           = dword ptr -4
.text:00002F14
.text:00002F14                 push    ebp
.text:00002F15                 mov     ebp, esp
.text:00002F17                 push    ecx
.text:00002F18                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002F1F                 mov     [ebp+var_4], ecx
.text:00002F22                 mov     eax, [ebp+var_4]
.text:00002F25                 mov     dword ptr [eax+4], 0
.text:00002F2C                 mov     ecx, [ebp+var_4]
.text:00002F2F                 mov     edx, [ecx]
.text:00002F31                 mov     byte ptr [edx], 0
.text:00002F34                 mov     esp, ebp
.text:00002F36                 pop     ebp
.text:00002F37                 retn
.text:00002F37 ?Empty@AString@@QAEXXZ endp
.text:00002F37
.text:00002F37 _text           ends
.text:00002F37
.text:00002F38 ; ===========================================================================
.text:00002F38
.text:00002F38 ; Segment type: Pure code
.text:00002F38 ; Segment permissions: Read/Execute
.text:00002F38 _text           segment para public 'CODE' use32
.text:00002F38                 assume cs:_text
.text:00002F38                 ;org 2F38h
.text:00002F38 ; COMDAT (pick any)
.text:00002F38                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002F38
.text:00002F38 ; =============== S U B R O U T I N E =======================================
.text:00002F38
.text:00002F38 ; Attributes: bp-based frame
.text:00002F38
.text:00002F38 ; void __thiscall UString::Empty(UString *__hidden this)
.text:00002F38                 public ?Empty@UString@@QAEXXZ
.text:00002F38 ?Empty@UString@@QAEXXZ proc near        ; CODE XREF: CExtractCallbackConsole::PrepareOperation(wchar_t const *,int,int,unsigned __int64 const *)+12Bp
.text:00002F38                                         ; CExtractCallbackConsole::PrepareOperation(wchar_t const *,int,int,unsigned __int64 const *)+1F3p ...
.text:00002F38
.text:00002F38 var_4           = dword ptr -4
.text:00002F38
.text:00002F38                 push    ebp
.text:00002F39                 mov     ebp, esp
.text:00002F3B                 push    ecx
.text:00002F3C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002F43                 mov     [ebp+var_4], ecx
.text:00002F46                 mov     eax, [ebp+var_4]
.text:00002F49                 mov     dword ptr [eax+4], 0
.text:00002F50                 mov     ecx, [ebp+var_4]
.text:00002F53                 mov     edx, [ecx]
.text:00002F55                 xor     eax, eax
.text:00002F57                 mov     [edx], ax
.text:00002F5A                 mov     esp, ebp
.text:00002F5C                 pop     ebp
.text:00002F5D                 retn
.text:00002F5D ?Empty@UString@@QAEXXZ endp
.text:00002F5D
.text:00002F5D ; ---------------------------------------------------------------------------
.text:00002F5E                 align 10h
.text:00002F5E _text           ends
.text:00002F5E
.text:00002F60 ; ===========================================================================
.text:00002F60
.text:00002F60 ; Segment type: Pure code
.text:00002F60 ; Segment permissions: Read/Execute
.text:00002F60 _text           segment para public 'CODE' use32
.text:00002F60                 assume cs:_text
.text:00002F60                 ;org 2F60h
.text:00002F60 ; COMDAT (pick any)
.text:00002F60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002F60
.text:00002F60 ; =============== S U B R O U T I N E =======================================
.text:00002F60
.text:00002F60 ; Attributes: bp-based frame
.text:00002F60
.text:00002F60 ; void __thiscall CExtractCallbackConsole::ClosePercents_for_so(CExtractCallbackConsole *__hidden this)
.text:00002F60                 public ?ClosePercents_for_so@CExtractCallbackConsole@@AAEXXZ
.text:00002F60 ?ClosePercents_for_so@CExtractCallbackConsole@@AAEXXZ proc near
.text:00002F60                                         ; CODE XREF: CExtractCallbackConsole::PrepareOperation(wchar_t const *,int,int,unsigned __int64 const *)+DAp
.text:00002F60                                         ; CExtractCallbackConsole::BeforeOpen(wchar_t const *,bool)+86p ...
.text:00002F60
.text:00002F60 var_4           = dword ptr -4
.text:00002F60
.text:00002F60                 push    ebp
.text:00002F61                 mov     ebp, esp
.text:00002F63                 push    ecx
.text:00002F64                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002F6B                 mov     [ebp+var_4], ecx
.text:00002F6E                 mov     ecx, [ebp+var_4]
.text:00002F71                 add     ecx, 10h        ; this
.text:00002F74                 call    ?NeedPercents@COpenCallbackConsole@@IBE_NXZ ; COpenCallbackConsole::NeedPercents(void)
.text:00002F79                 movzx   eax, al
.text:00002F7C                 test    eax, eax
.text:00002F7E                 jz      short loc_2FA1
.text:00002F80                 mov     ecx, [ebp+var_4]
.text:00002F83                 mov     edx, [ebp+var_4]
.text:00002F86                 mov     eax, [ecx+0C8h]
.text:00002F8C                 cmp     eax, [edx+0BCh]
.text:00002F92                 jnz     short loc_2FA1
.text:00002F94                 push    0               ; bool
.text:00002F96                 mov     ecx, [ebp+var_4]
.text:00002F99                 add     ecx, 18h        ; this
.text:00002F9C                 call    ?ClosePrint@CPercentPrinter@@QAEX_N@Z ; CPercentPrinter::ClosePrint(bool)
.text:00002FA1
.text:00002FA1 loc_2FA1:                               ; CODE XREF: CExtractCallbackConsole::ClosePercents_for_so(void)+1Ej
.text:00002FA1                                         ; CExtractCallbackConsole::ClosePercents_for_so(void)+32j
.text:00002FA1                 add     esp, 4
.text:00002FA4                 cmp     ebp, esp
.text:00002FA6                 call    __RTC_CheckEsp
.text:00002FAB                 mov     esp, ebp
.text:00002FAD                 pop     ebp
.text:00002FAE                 retn
.text:00002FAE ?ClosePercents_for_so@CExtractCallbackConsole@@AAEXXZ endp
.text:00002FAE
.text:00002FAE ; ---------------------------------------------------------------------------
.text:00002FAF                 align 10h
.text:00002FAF _text           ends
.text:00002FAF
.text:00002FB0 ; ===========================================================================
.text:00002FB0
.text:00002FB0 ; Segment type: Pure code
.text:00002FB0 ; Segment permissions: Read/Execute
.text:00002FB0 _text           segment para public 'CODE' use32
.text:00002FB0                 assume cs:_text
.text:00002FB0                 ;org 2FB0h
.text:00002FB0 ; COMDAT (pick any)
.text:00002FB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002FB0
.text:00002FB0 ; =============== S U B R O U T I N E =======================================
.text:00002FB0
.text:00002FB0 ; Attributes: bp-based frame
.text:00002FB0
.text:00002FB0 ; bool __thiscall UString::IsEmpty(UString *__hidden this)
.text:00002FB0                 public ?IsEmpty@UString@@QBE_NXZ
.text:00002FB0 ?IsEmpty@UString@@QBE_NXZ proc near     ; CODE XREF: CExtractCallbackConsole::SetOperationResult(int,int)+117p
.text:00002FB0                                         ; CExtractCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+D8p ...
.text:00002FB0
.text:00002FB0 var_4           = dword ptr -4
.text:00002FB0
.text:00002FB0                 push    ebp
.text:00002FB1                 mov     ebp, esp
.text:00002FB3                 push    ecx
.text:00002FB4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002FBB                 mov     [ebp+var_4], ecx
.text:00002FBE                 mov     eax, [ebp+var_4]
.text:00002FC1                 xor     ecx, ecx
.text:00002FC3                 cmp     dword ptr [eax+4], 0
.text:00002FC7                 setz    cl
.text:00002FCA                 mov     al, cl
.text:00002FCC                 mov     esp, ebp
.text:00002FCE                 pop     ebp
.text:00002FCF                 retn
.text:00002FCF ?IsEmpty@UString@@QBE_NXZ endp
.text:00002FCF
.text:00002FCF _text           ends
.text:00002FCF
.text:00002FD0 ; ===========================================================================
.text:00002FD0
.text:00002FD0 ; Segment type: Pure code
.text:00002FD0 ; Segment permissions: Read/Execute
.text:00002FD0 _text           segment para public 'CODE' use32
.text:00002FD0                 assume cs:_text
.text:00002FD0                 ;org 2FD0h
.text:00002FD0 ; COMDAT (pick any)
.text:00002FD0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002FD0
.text:00002FD0 ; =============== S U B R O U T I N E =======================================
.text:00002FD0
.text:00002FD0 ; Attributes: bp-based frame
.text:00002FD0
.text:00002FD0 ; bool __thiscall AString::IsEmpty(AString *__hidden this)
.text:00002FD0                 public ?IsEmpty@AString@@QBE_NXZ
.text:00002FD0 ?IsEmpty@AString@@QBE_NXZ proc near     ; CODE XREF: GetOpenArcErrorMessage(uint)+8Dp
.text:00002FD0                                         ; GetOpenArcErrorMessage(uint)+D8p
.text:00002FD0
.text:00002FD0 var_4           = dword ptr -4
.text:00002FD0
.text:00002FD0                 push    ebp
.text:00002FD1                 mov     ebp, esp
.text:00002FD3                 push    ecx
.text:00002FD4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002FDB                 mov     [ebp+var_4], ecx
.text:00002FDE                 mov     eax, [ebp+var_4]
.text:00002FE1                 xor     ecx, ecx
.text:00002FE3                 cmp     dword ptr [eax+4], 0
.text:00002FE7                 setz    cl
.text:00002FEA                 mov     al, cl
.text:00002FEC                 mov     esp, ebp
.text:00002FEE                 pop     ebp
.text:00002FEF                 retn
.text:00002FEF ?IsEmpty@AString@@QBE_NXZ endp
.text:00002FEF
.text:00002FEF _text           ends
.text:00002FEF
.text:00002FF0 ; ===========================================================================
.text:00002FF0
.text:00002FF0 ; Segment type: Pure code
.text:00002FF0 ; Segment permissions: Read/Execute
.text:00002FF0 _text           segment para public 'CODE' use32
.text:00002FF0                 assume cs:_text
.text:00002FF0                 ;org 2FF0h
.text:00002FF0 ; COMDAT (pick any)
.text:00002FF0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002FF0
.text:00002FF0 ; =============== S U B R O U T I N E =======================================
.text:00002FF0
.text:00002FF0 ; Attributes: bp-based frame
.text:00002FF0
.text:00002FF0 ; const wchar_t *__thiscall CCodecs::GetFormatNamePtr(CCodecs *this, int)
.text:00002FF0                 public ?GetFormatNamePtr@CCodecs@@QBEPB_WH@Z
.text:00002FF0 ?GetFormatNamePtr@CCodecs@@QBEPB_WH@Z proc near
.text:00002FF0                                         ; CODE XREF: Print_ErrorFormatIndex_Warning(CStdOutStream *,CCodecs const *,CArc const &)+9Ap
.text:00002FF0                                         ; Print_ErrorFormatIndex_Warning(CStdOutStream *,CCodecs const *,CArc const &)+BBp
.text:00002FF0
.text:00002FF0 var_8           = dword ptr -8
.text:00002FF0 var_4           = dword ptr -4
.text:00002FF0 arg_0           = dword ptr  8
.text:00002FF0
.text:00002FF0                 push    ebp
.text:00002FF1                 mov     ebp, esp
.text:00002FF3                 sub     esp, 8
.text:00002FF6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002FFD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003004                 mov     [ebp+var_4], ecx
.text:00003007                 cmp     [ebp+arg_0], 0
.text:0000300B                 jge     short loc_3016
.text:0000300D                 mov     [ebp+var_8], offset ??_C@_13GMDMCADD@?$AA?$CD?$AA?$AA@ ; `string'
.text:00003014                 jmp     short loc_3032
.text:00003016 ; ---------------------------------------------------------------------------
.text:00003016
.text:00003016 loc_3016:                               ; CODE XREF: CCodecs::GetFormatNamePtr(int)+1Bj
.text:00003016                 mov     eax, [ebp+arg_0]
.text:00003019                 push    eax
.text:0000301A                 mov     ecx, [ebp+var_4]
.text:0000301D                 add     ecx, 8
.text:00003020                 call    ??A?$CObjectVector@UCArcInfoEx@@@@QBEABUCArcInfoEx@@I@Z ; CObjectVector<CArcInfoEx>::operator[](uint)
.text:00003025                 add     eax, 0Ch
.text:00003028                 mov     ecx, eax
.text:0000302A                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:0000302F                 mov     [ebp+var_8], eax
.text:00003032
.text:00003032 loc_3032:                               ; CODE XREF: CCodecs::GetFormatNamePtr(int)+24j
.text:00003032                 mov     eax, [ebp+var_8]
.text:00003035                 add     esp, 8
.text:00003038                 cmp     ebp, esp
.text:0000303A                 call    __RTC_CheckEsp
.text:0000303F                 mov     esp, ebp
.text:00003041                 pop     ebp
.text:00003042                 retn    4
.text:00003042 ?GetFormatNamePtr@CCodecs@@QBEPB_WH@Z endp
.text:00003042
.text:00003042 ; ---------------------------------------------------------------------------
.text:00003045                 align 4
.text:00003045 _text           ends
.text:00003045
.rdata:00003048 ; ===========================================================================
.rdata:00003048
.rdata:00003048 ; Segment type: Pure data
.rdata:00003048 ; Segment permissions: Read
.rdata:00003048 _rdata          segment dword public 'DATA' use32
.rdata:00003048                 assume cs:_rdata
.rdata:00003048                 ;org 3048h
.rdata:00003048 ; COMDAT (pick any)
.rdata:00003048                 public ??_C@_13GMDMCADD@?$AA?$CD?$AA?$AA@
.rdata:00003048 ; `string'
.rdata:00003048 ??_C@_13GMDMCADD@?$AA?$CD?$AA?$AA@ dd offset unk_23
.rdata:00003048                                         ; DATA XREF: CCodecs::GetFormatNamePtr(int)+1Do
.rdata:00003048 _rdata          ends
.rdata:00003048
.text:0000304C ; ===========================================================================
.text:0000304C
.text:0000304C ; Segment type: Pure code
.text:0000304C ; Segment permissions: Read/Execute
.text:0000304C _text           segment para public 'CODE' use32
.text:0000304C                 assume cs:_text
.text:0000304C                 ;org 304Ch
.text:0000304C ; COMDAT (pick any)
.text:0000304C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000304C
.text:0000304C ; =============== S U B R O U T I N E =======================================
.text:0000304C
.text:0000304C ; Attributes: bp-based frame
.text:0000304C
.text:0000304C ; unsigned int __thiscall CArcErrorInfo::GetWarningFlags(CArcErrorInfo *__hidden this)
.text:0000304C                 public ?GetWarningFlags@CArcErrorInfo@@QBEIXZ
.text:0000304C ?GetWarningFlags@CArcErrorInfo@@QBEIXZ proc near
.text:0000304C                                         ; CODE XREF: CExtractCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+245p
.text:0000304C
.text:0000304C var_8           = dword ptr -8
.text:0000304C var_4           = dword ptr -4
.text:0000304C
.text:0000304C                 push    ebp
.text:0000304D                 mov     ebp, esp
.text:0000304F                 sub     esp, 8
.text:00003052                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00003059                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003060                 mov     [ebp+var_4], ecx
.text:00003063                 mov     eax, [ebp+var_4]
.text:00003066                 mov     ecx, [eax+8]
.text:00003069                 mov     [ebp+var_8], ecx
.text:0000306C                 mov     ecx, [ebp+var_4] ; this
.text:0000306F                 call    ?NeedTailWarning@CArcErrorInfo@@QBE_NXZ ; CArcErrorInfo::NeedTailWarning(void)
.text:00003074                 movzx   edx, al
.text:00003077                 test    edx, edx
.text:00003079                 jz      short loc_308F
.text:0000307B                 mov     eax, [ebp+var_4]
.text:0000307E                 mov     ecx, [eax+4]
.text:00003081                 and     ecx, 40h
.text:00003084                 jnz     short loc_308F
.text:00003086                 mov     edx, [ebp+var_8]
.text:00003089                 or      edx, 40h
.text:0000308C                 mov     [ebp+var_8], edx
.text:0000308F
.text:0000308F loc_308F:                               ; CODE XREF: CArcErrorInfo::GetWarningFlags(void)+2Dj
.text:0000308F                                         ; CArcErrorInfo::GetWarningFlags(void)+38j
.text:0000308F                 mov     eax, [ebp+var_8]
.text:00003092                 add     esp, 8
.text:00003095                 cmp     ebp, esp
.text:00003097                 call    __RTC_CheckEsp
.text:0000309C                 mov     esp, ebp
.text:0000309E                 pop     ebp
.text:0000309F                 retn
.text:0000309F ?GetWarningFlags@CArcErrorInfo@@QBEIXZ endp
.text:0000309F
.text:0000309F _text           ends
.text:0000309F
.text:000030A0 ; ===========================================================================
.text:000030A0
.text:000030A0 ; Segment type: Pure code
.text:000030A0 ; Segment permissions: Read/Execute
.text:000030A0 _text           segment para public 'CODE' use32
.text:000030A0                 assume cs:_text
.text:000030A0                 ;org 30A0h
.text:000030A0 ; COMDAT (pick any)
.text:000030A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000030A0
.text:000030A0 ; =============== S U B R O U T I N E =======================================
.text:000030A0
.text:000030A0 ; Attributes: bp-based frame
.text:000030A0
.text:000030A0 ; bool __thiscall CArcErrorInfo::NeedTailWarning(CArcErrorInfo *__hidden this)
.text:000030A0                 public ?NeedTailWarning@CArcErrorInfo@@QBE_NXZ
.text:000030A0 ?NeedTailWarning@CArcErrorInfo@@QBE_NXZ proc near
.text:000030A0                                         ; CODE XREF: CArcErrorInfo::GetWarningFlags(void)+23p
.text:000030A0
.text:000030A0 var_8           = dword ptr -8
.text:000030A0 var_4           = dword ptr -4
.text:000030A0
.text:000030A0                 push    ebp
.text:000030A1                 mov     ebp, esp
.text:000030A3                 sub     esp, 8
.text:000030A6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000030AD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000030B4                 mov     [ebp+var_4], ecx
.text:000030B7                 mov     eax, [ebp+var_4]
.text:000030BA                 movzx   ecx, byte ptr [eax+2]
.text:000030BE                 test    ecx, ecx
.text:000030C0                 jnz     short loc_30D5
.text:000030C2                 mov     edx, [ebp+var_4]
.text:000030C5                 movzx   eax, byte ptr [edx]
.text:000030C8                 test    eax, eax
.text:000030CA                 jz      short loc_30D5
.text:000030CC                 mov     [ebp+var_8], 1
.text:000030D3                 jmp     short loc_30DC
.text:000030D5 ; ---------------------------------------------------------------------------
.text:000030D5
.text:000030D5 loc_30D5:                               ; CODE XREF: CArcErrorInfo::NeedTailWarning(void)+20j
.text:000030D5                                         ; CArcErrorInfo::NeedTailWarning(void)+2Aj
.text:000030D5                 mov     [ebp+var_8], 0
.text:000030DC
.text:000030DC loc_30DC:                               ; CODE XREF: CArcErrorInfo::NeedTailWarning(void)+33j
.text:000030DC                 mov     al, byte ptr [ebp+var_8]
.text:000030DF                 mov     esp, ebp
.text:000030E1                 pop     ebp
.text:000030E2                 retn
.text:000030E2 ?NeedTailWarning@CArcErrorInfo@@QBE_NXZ endp
.text:000030E2
.text:000030E2 ; ---------------------------------------------------------------------------
.text:000030E3                 align 4
.text:000030E3 _text           ends
.text:000030E3
.text:000030E4 ; ===========================================================================
.text:000030E4
.text:000030E4 ; Segment type: Pure code
.text:000030E4 ; Segment permissions: Read/Execute
.text:000030E4 _text           segment para public 'CODE' use32
.text:000030E4                 assume cs:_text
.text:000030E4                 ;org 30E4h
.text:000030E4 ; COMDAT (pick any)
.text:000030E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000030E4
.text:000030E4 ; =============== S U B R O U T I N E =======================================
.text:000030E4
.text:000030E4 ; Attributes: bp-based frame
.text:000030E4
.text:000030E4 ; unsigned int __thiscall CArcErrorInfo::GetErrorFlags(CArcErrorInfo *__hidden this)
.text:000030E4                 public ?GetErrorFlags@CArcErrorInfo@@QBEIXZ
.text:000030E4 ?GetErrorFlags@CArcErrorInfo@@QBEIXZ proc near
.text:000030E4                                         ; CODE XREF: CExtractCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+C4p
.text:000030E4
.text:000030E4 var_8           = dword ptr -8
.text:000030E4 var_4           = dword ptr -4
.text:000030E4
.text:000030E4                 push    ebp
.text:000030E5                 mov     ebp, esp
.text:000030E7                 sub     esp, 8
.text:000030EA                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000030F1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000030F8                 mov     [ebp+var_4], ecx
.text:000030FB                 mov     eax, [ebp+var_4]
.text:000030FE                 mov     ecx, [eax+4]
.text:00003101                 mov     [ebp+var_8], ecx
.text:00003104                 mov     edx, [ebp+var_4]
.text:00003107                 movzx   eax, byte ptr [edx+1]
.text:0000310B                 test    eax, eax
.text:0000310D                 jz      short loc_3118
.text:0000310F                 mov     ecx, [ebp+var_8]
.text:00003112                 or      ecx, 20h
.text:00003115                 mov     [ebp+var_8], ecx
.text:00003118
.text:00003118 loc_3118:                               ; CODE XREF: CArcErrorInfo::GetErrorFlags(void)+29j
.text:00003118                 mov     eax, [ebp+var_8]
.text:0000311B                 mov     esp, ebp
.text:0000311D                 pop     ebp
.text:0000311E                 retn
.text:0000311E ?GetErrorFlags@CArcErrorInfo@@QBEIXZ endp
.text:0000311E
.text:0000311E ; ---------------------------------------------------------------------------
.text:0000311F                 align 10h
.text:0000311F _text           ends
.text:0000311F
.text:00003120 ; ===========================================================================
.text:00003120
.text:00003120 ; Segment type: Pure code
.text:00003120 ; Segment permissions: Read/Execute
.text:00003120 _text           segment para public 'CODE' use32
.text:00003120                 assume cs:_text
.text:00003120                 ;org 3120h
.text:00003120 ; COMDAT (pick any)
.text:00003120                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003120
.text:00003120 ; =============== S U B R O U T I N E =======================================
.text:00003120
.text:00003120 ; Attributes: bp-based frame
.text:00003120
.text:00003120 ; void __thiscall COpenCallbackConsole::ClosePercents(COpenCallbackConsole *__hidden this)
.text:00003120                 public ?ClosePercents@COpenCallbackConsole@@QAEXXZ
.text:00003120 ?ClosePercents@COpenCallbackConsole@@QAEXXZ proc near
.text:00003120                                         ; CODE XREF: CExtractCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+40p
.text:00003120
.text:00003120 var_4           = dword ptr -4
.text:00003120
.text:00003120                 push    ebp
.text:00003121                 mov     ebp, esp
.text:00003123                 push    ecx
.text:00003124                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000312B                 mov     [ebp+var_4], ecx
.text:0000312E                 mov     ecx, [ebp+var_4] ; this
.text:00003131                 call    ?NeedPercents@COpenCallbackConsole@@IBE_NXZ ; COpenCallbackConsole::NeedPercents(void)
.text:00003136                 movzx   eax, al
.text:00003139                 test    eax, eax
.text:0000313B                 jz      short loc_314A
.text:0000313D                 push    1               ; bool
.text:0000313F                 mov     ecx, [ebp+var_4]
.text:00003142                 add     ecx, 8          ; this
.text:00003145                 call    ?ClosePrint@CPercentPrinter@@QAEX_N@Z ; CPercentPrinter::ClosePrint(bool)
.text:0000314A
.text:0000314A loc_314A:                               ; CODE XREF: COpenCallbackConsole::ClosePercents(void)+1Bj
.text:0000314A                 add     esp, 4
.text:0000314D                 cmp     ebp, esp
.text:0000314F                 call    __RTC_CheckEsp
.text:00003154                 mov     esp, ebp
.text:00003156                 pop     ebp
.text:00003157                 retn
.text:00003157 ?ClosePercents@COpenCallbackConsole@@QAEXXZ endp
.text:00003157
.text:00003157 _text           ends
.text:00003157
.text:00003158 ; ===========================================================================
.text:00003158
.text:00003158 ; Segment type: Pure code
.text:00003158 ; Segment permissions: Read/Execute
.text:00003158 _text           segment para public 'CODE' use32
.text:00003158                 assume cs:_text
.text:00003158                 ;org 3158h
.text:00003158 ; COMDAT (pick any)
.text:00003158                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003158
.text:00003158 ; =============== S U B R O U T I N E =======================================
.text:00003158
.text:00003158 ; Attributes: bp-based frame
.text:00003158
.text:00003158 ; public: struct CArcInfoEx const & __thiscall CObjectVector<struct CArcInfoEx>::operator[](unsigned int)const
.text:00003158                 public ??A?$CObjectVector@UCArcInfoEx@@@@QBEABUCArcInfoEx@@I@Z
.text:00003158 ??A?$CObjectVector@UCArcInfoEx@@@@QBEABUCArcInfoEx@@I@Z proc near
.text:00003158                                         ; CODE XREF: CCodecs::GetFormatNamePtr(int)+30p
.text:00003158
.text:00003158 var_4           = dword ptr -4
.text:00003158 arg_0           = dword ptr  8
.text:00003158
.text:00003158                 push    ebp
.text:00003159                 mov     ebp, esp
.text:0000315B                 push    ecx
.text:0000315C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003163                 mov     [ebp+var_4], ecx
.text:00003166                 mov     eax, [ebp+arg_0]
.text:00003169                 push    eax
.text:0000316A                 mov     ecx, [ebp+var_4]
.text:0000316D                 call    ??A?$CRecordVector@PAX@@QBEABQAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00003172                 mov     eax, [eax]
.text:00003174                 add     esp, 4
.text:00003177                 cmp     ebp, esp
.text:00003179                 call    __RTC_CheckEsp
.text:0000317E                 mov     esp, ebp
.text:00003180                 pop     ebp
.text:00003181                 retn    4
.text:00003181 ??A?$CObjectVector@UCArcInfoEx@@@@QBEABUCArcInfoEx@@I@Z endp
.text:00003181
.text:00003181 _text           ends
.text:00003181
.text:00003184 ; ===========================================================================
.text:00003184
.text:00003184 ; Segment type: Pure code
.text:00003184 ; Segment permissions: Read/Execute
.text:00003184 _text           segment para public 'CODE' use32
.text:00003184                 assume cs:_text
.text:00003184                 ;org 3184h
.text:00003184 ; COMDAT (pick any)
.text:00003184                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003184
.text:00003184 ; =============== S U B R O U T I N E =======================================
.text:00003184
.text:00003184 ; Attributes: bp-based frame
.text:00003184
.text:00003184 ; public: unsigned int __thiscall CObjectVector<class CArc>::Size(void)const
.text:00003184                 public ?Size@?$CObjectVector@VCArc@@@@QBEIXZ
.text:00003184 ?Size@?$CObjectVector@VCArc@@@@QBEIXZ proc near
.text:00003184                                         ; CODE XREF: CExtractCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+9Bp
.text:00003184
.text:00003184 var_4           = dword ptr -4
.text:00003184
.text:00003184                 push    ebp
.text:00003185                 mov     ebp, esp
.text:00003187                 push    ecx
.text:00003188                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000318F                 mov     [ebp+var_4], ecx
.text:00003192                 mov     ecx, [ebp+var_4]
.text:00003195                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:0000319A                 add     esp, 4
.text:0000319D                 cmp     ebp, esp
.text:0000319F                 call    __RTC_CheckEsp
.text:000031A4                 mov     esp, ebp
.text:000031A6                 pop     ebp
.text:000031A7                 retn
.text:000031A7 ?Size@?$CObjectVector@VCArc@@@@QBEIXZ endp
.text:000031A7
.text:000031A7 _text           ends
.text:000031A7
.text:000031A8 ; ===========================================================================
.text:000031A8
.text:000031A8 ; Segment type: Pure code
.text:000031A8 ; Segment permissions: Read/Execute
.text:000031A8 _text           segment para public 'CODE' use32
.text:000031A8                 assume cs:_text
.text:000031A8                 ;org 31A8h
.text:000031A8 ; COMDAT (pick any)
.text:000031A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000031A8
.text:000031A8 ; =============== S U B R O U T I N E =======================================
.text:000031A8
.text:000031A8 ; Attributes: bp-based frame
.text:000031A8
.text:000031A8 ; public: class CArc const & __thiscall CObjectVector<class CArc>::operator[](unsigned int)const
.text:000031A8                 public ??A?$CObjectVector@VCArc@@@@QBEABVCArc@@I@Z
.text:000031A8 ??A?$CObjectVector@VCArc@@@@QBEABVCArc@@I@Z proc near
.text:000031A8                                         ; CODE XREF: CExtractCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+B0p
.text:000031A8
.text:000031A8 var_4           = dword ptr -4
.text:000031A8 arg_0           = dword ptr  8
.text:000031A8
.text:000031A8                 push    ebp
.text:000031A9                 mov     ebp, esp
.text:000031AB                 push    ecx
.text:000031AC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000031B3                 mov     [ebp+var_4], ecx
.text:000031B6                 mov     eax, [ebp+arg_0]
.text:000031B9                 push    eax
.text:000031BA                 mov     ecx, [ebp+var_4]
.text:000031BD                 call    ??A?$CRecordVector@PAX@@QBEABQAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:000031C2                 mov     eax, [eax]
.text:000031C4                 add     esp, 4
.text:000031C7                 cmp     ebp, esp
.text:000031C9                 call    __RTC_CheckEsp
.text:000031CE                 mov     esp, ebp
.text:000031D0                 pop     ebp
.text:000031D1                 retn    4
.text:000031D1 ??A?$CObjectVector@VCArc@@@@QBEABVCArc@@I@Z endp
.text:000031D1
.text:000031D1 _text           ends
.text:000031D1
.text:000031D4 ; ===========================================================================
.text:000031D4
.text:000031D4 ; Segment type: Pure code
.text:000031D4 ; Segment permissions: Read/Execute
.text:000031D4 _text           segment para public 'CODE' use32
.text:000031D4                 assume cs:_text
.text:000031D4                 ;org 31D4h
.text:000031D4 ; COMDAT (pick any)
.text:000031D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000031D4
.text:000031D4 ; =============== S U B R O U T I N E =======================================
.text:000031D4
.text:000031D4 ; Attributes: bp-based frame
.text:000031D4
.text:000031D4 ; public: unsigned int __thiscall CRecordVector<void *>::Size(void)const
.text:000031D4                 public ?Size@?$CRecordVector@PAX@@QBEIXZ
.text:000031D4 ?Size@?$CRecordVector@PAX@@QBEIXZ proc near
.text:000031D4                                         ; CODE XREF: CObjectVector<CArc>::Size(void)+11p
.text:000031D4
.text:000031D4 var_4           = dword ptr -4
.text:000031D4
.text:000031D4                 push    ebp
.text:000031D5                 mov     ebp, esp
.text:000031D7                 push    ecx
.text:000031D8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000031DF                 mov     [ebp+var_4], ecx
.text:000031E2                 mov     eax, [ebp+var_4]
.text:000031E5                 mov     eax, [eax+4]
.text:000031E8                 mov     esp, ebp
.text:000031EA                 pop     ebp
.text:000031EB                 retn
.text:000031EB ?Size@?$CRecordVector@PAX@@QBEIXZ endp
.text:000031EB
.text:000031EB _text           ends
.text:000031EB
.text:000031EC ; ===========================================================================
.text:000031EC
.text:000031EC ; Segment type: Pure code
.text:000031EC ; Segment permissions: Read/Execute
.text:000031EC _text           segment para public 'CODE' use32
.text:000031EC                 assume cs:_text
.text:000031EC                 ;org 31ECh
.text:000031EC ; COMDAT (pick any)
.text:000031EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000031EC
.text:000031EC ; =============== S U B R O U T I N E =======================================
.text:000031EC
.text:000031EC ; Attributes: bp-based frame
.text:000031EC
.text:000031EC ; public: void * const & __thiscall CRecordVector<void *>::operator[](unsigned int)const
.text:000031EC                 public ??A?$CRecordVector@PAX@@QBEABQAXI@Z
.text:000031EC ??A?$CRecordVector@PAX@@QBEABQAXI@Z proc near
.text:000031EC                                         ; CODE XREF: CObjectVector<CArcInfoEx>::operator[](uint)+15p
.text:000031EC                                         ; CObjectVector<CArc>::operator[](uint)+15p
.text:000031EC
.text:000031EC var_4           = dword ptr -4
.text:000031EC arg_0           = dword ptr  8
.text:000031EC
.text:000031EC                 push    ebp
.text:000031ED                 mov     ebp, esp
.text:000031EF                 push    ecx
.text:000031F0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000031F7                 mov     [ebp+var_4], ecx
.text:000031FA                 mov     eax, [ebp+var_4]
.text:000031FD                 mov     ecx, [eax]
.text:000031FF                 mov     edx, [ebp+arg_0]
.text:00003202                 lea     eax, [ecx+edx*4]
.text:00003205                 mov     esp, ebp
.text:00003207                 pop     ebp
.text:00003208                 retn    4
.text:00003208 ??A?$CRecordVector@PAX@@QBEABQAXI@Z endp
.text:00003208
.text:00003208 ; ---------------------------------------------------------------------------
.text:0000320B                 align 4
.text:0000320B _text           ends
.text:0000320B
.text$yc:0000320C ; ===========================================================================
.text$yc:0000320C
.text$yc:0000320C ; Segment type: Pure code
.text$yc:0000320C ; Segment permissions: Read/Execute
.text$yc:0000320C _text$yc        segment para public 'CODE' use32
.text$yc:0000320C                 assume cs:_text$yc
.text$yc:0000320C                 ;org 320Ch
.text$yc:0000320C ; COMDAT (pick any)
.text$yc:0000320C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yc:0000320C
.text$yc:0000320C ; =============== S U B R O U T I N E =======================================
.text$yc:0000320C
.text$yc:0000320C ; Attributes: bp-based frame
.text$yc:0000320C
.text$yc:0000320C ; void __cdecl `dynamic initializer for 'g_CriticalSection''(void)
.text$yc:0000320C ??__Eg_CriticalSection@@YAXXZ proc near ; DATA XREF: .CRT$XCU:_g_CriticalSection$initializer$o
.text$yc:0000320C                 push    ebp
.text$yc:0000320D                 mov     ebp, esp
.text$yc:0000320F                 mov     ecx, offset _g_CriticalSection ; this
.text$yc:00003214                 call    ??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSection::CCriticalSection(void)
.text$yc:00003219                 push    offset ??__Fg_CriticalSection@@YAXXZ ; void (__cdecl *)()
.text$yc:0000321E                 call    _atexit
.text$yc:00003223                 add     esp, 4
.text$yc:00003226                 cmp     ebp, esp
.text$yc:00003228                 call    __RTC_CheckEsp
.text$yc:0000322D                 pop     ebp
.text$yc:0000322E                 retn
.text$yc:0000322E ??__Eg_CriticalSection@@YAXXZ endp
.text$yc:0000322E
.text$yc:0000322E ; ---------------------------------------------------------------------------
.text$yc:0000322F                 align 10h
.text$yc:0000322F _text$yc        ends
.text$yc:0000322F
.text:00003230 ; ===========================================================================
.text:00003230
.text:00003230 ; Segment type: Pure code
.text:00003230 ; Segment permissions: Read/Execute
.text:00003230 _text           segment para public 'CODE' use32
.text:00003230                 assume cs:_text
.text:00003230                 ;org 3230h
.text:00003230 ; COMDAT (pick any)
.text:00003230                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003230
.text:00003230 ; =============== S U B R O U T I N E =======================================
.text:00003230
.text:00003230 ; Attributes: bp-based frame
.text:00003230
.text:00003230 ; _DWORD __thiscall NWindows::NSynchronization::CCriticalSection::CCriticalSection(NWindows::NSynchronization::CCriticalSection *__hidden this)
.text:00003230                 public ??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ
.text:00003230 ??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ proc near
.text:00003230                                         ; CODE XREF: `dynamic initializer for 'g_CriticalSection''(void)+8p
.text:00003230
.text:00003230 var_4           = dword ptr -4
.text:00003230
.text:00003230                 push    ebp
.text:00003231                 mov     ebp, esp
.text:00003233                 push    ecx
.text:00003234                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000323B                 mov     [ebp+var_4], ecx
.text:0000323E                 mov     eax, [ebp+var_4]
.text:00003241                 push    eax
.text:00003242                 call    _CriticalSection_Init@4 ; CriticalSection_Init(x)
.text:00003247                 mov     eax, [ebp+var_4]
.text:0000324A                 add     esp, 4
.text:0000324D                 cmp     ebp, esp
.text:0000324F                 call    __RTC_CheckEsp
.text:00003254                 mov     esp, ebp
.text:00003256                 pop     ebp
.text:00003257                 retn
.text:00003257 ??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ endp
.text:00003257
.text:00003257 _text           ends
.text:00003257
.text$yd:00003258 ; ===========================================================================
.text$yd:00003258
.text$yd:00003258 ; Segment type: Pure code
.text$yd:00003258 ; Segment permissions: Read/Execute
.text$yd:00003258 _text$yd        segment para public 'CODE' use32
.text$yd:00003258                 assume cs:_text$yd
.text$yd:00003258                 ;org 3258h
.text$yd:00003258 ; COMDAT (pick any)
.text$yd:00003258                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yd:00003258
.text$yd:00003258 ; =============== S U B R O U T I N E =======================================
.text$yd:00003258
.text$yd:00003258 ; Attributes: bp-based frame
.text$yd:00003258
.text$yd:00003258 ; void __cdecl `dynamic atexit destructor for 'g_CriticalSection''()
.text$yd:00003258 ??__Fg_CriticalSection@@YAXXZ proc near ; DATA XREF: `dynamic initializer for 'g_CriticalSection''(void)+Do
.text$yd:00003258                 push    ebp
.text$yd:00003259                 mov     ebp, esp
.text$yd:0000325B                 mov     ecx, offset _g_CriticalSection ; this
.text$yd:00003260                 call    ??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSection::~CCriticalSection(void)
.text$yd:00003265                 cmp     ebp, esp
.text$yd:00003267                 call    __RTC_CheckEsp
.text$yd:0000326C                 pop     ebp
.text$yd:0000326D                 retn
.text$yd:0000326D ??__Fg_CriticalSection@@YAXXZ endp
.text$yd:0000326D
.text$yd:0000326D ; ---------------------------------------------------------------------------
.text$yd:0000326E                 align 10h
.text$yd:0000326E _text$yd        ends
.text$yd:0000326E
.text:00003270 ; ===========================================================================
.text:00003270
.text:00003270 ; Segment type: Pure code
.text:00003270 ; Segment permissions: Read/Execute
.text:00003270 _text           segment para public 'CODE' use32
.text:00003270                 assume cs:_text
.text:00003270                 ;org 3270h
.text:00003270 ; COMDAT (pick any)
.text:00003270                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003270
.text:00003270 ; =============== S U B R O U T I N E =======================================
.text:00003270
.text:00003270 ; Attributes: bp-based frame
.text:00003270
.text:00003270 ; _DWORD __thiscall NWindows::NSynchronization::CCriticalSection::~CCriticalSection(NWindows::NSynchronization::CCriticalSection *__hidden this)
.text:00003270                 public ??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ
.text:00003270 ??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ proc near
.text:00003270                                         ; CODE XREF: `dynamic atexit destructor for 'g_CriticalSection''(void)+8p
.text:00003270
.text:00003270 lpCriticalSection= dword ptr -4
.text:00003270
.text:00003270                 push    ebp
.text:00003271                 mov     ebp, esp
.text:00003273                 push    ecx
.text:00003274                 push    esi
.text:00003275                 mov     [ebp+lpCriticalSection], 0CCCCCCCCh
.text:0000327C                 mov     [ebp+lpCriticalSection], ecx
.text:0000327F                 mov     esi, esp
.text:00003281                 mov     eax, [ebp+lpCriticalSection]
.text:00003284                 push    eax             ; lpCriticalSection
.text:00003285                 call    dword ptr ds:__imp__DeleteCriticalSection@4 ; DeleteCriticalSection(x)
.text:0000328B                 cmp     esi, esp
.text:0000328D                 call    __RTC_CheckEsp
.text:00003292                 pop     esi
.text:00003293                 add     esp, 4
.text:00003296                 cmp     ebp, esp
.text:00003298                 call    __RTC_CheckEsp
.text:0000329D                 mov     esp, ebp
.text:0000329F                 pop     ebp
.text:000032A0                 retn
.text:000032A0 ??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ endp
.text:000032A0
.text:000032A0 ; ---------------------------------------------------------------------------
.text:000032A1                 align 4
.text:000032A1 _text           ends
.text:000032A1
.bss:000032A4 ; ===========================================================================
.bss:000032A4
.bss:000032A4 ; Segment type: Uninitialized
.bss:000032A4 ; Segment permissions: Read/Write
.bss:000032A4 _bss            segment dword public 'BSS' use32
.bss:000032A4                 assume cs:_bss
.bss:000032A4                 ;org 32A4h
.bss:000032A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:000032A4 ; NWindows::NSynchronization::CCriticalSection g_CriticalSection
.bss:000032A4 _g_CriticalSection db    ? ;            ; DATA XREF: CExtractCallbackConsole::SetTotal(unsigned __int64)+17o
.bss:000032A4                                         ; CExtractCallbackConsole::SetCompleted(unsigned __int64 const *)+17o ...
.bss:000032A5                 db    ? ;
.bss:000032A6                 db    ? ;
.bss:000032A7                 db    ? ;
.bss:000032A8                 db    ? ;
.bss:000032A9                 db    ? ;
.bss:000032AA                 db    ? ;
.bss:000032AB                 db    ? ;
.bss:000032AC                 db    ? ;
.bss:000032AD                 db    ? ;
.bss:000032AE                 db    ? ;
.bss:000032AF                 db    ? ;
.bss:000032B0                 db    ? ;
.bss:000032B1                 db    ? ;
.bss:000032B2                 db    ? ;
.bss:000032B3                 db    ? ;
.bss:000032B4                 db    ? ;
.bss:000032B5                 db    ? ;
.bss:000032B6                 db    ? ;
.bss:000032B7                 db    ? ;
.bss:000032B8                 db    ? ;
.bss:000032B9                 db    ? ;
.bss:000032BA                 db    ? ;
.bss:000032BB                 db    ? ;
.bss:000032BB _bss            ends
.bss:000032BB
.CRT$XCU:000032BC ; ===========================================================================
.CRT$XCU:000032BC
.CRT$XCU:000032BC ; Segment type: Pure data
.CRT$XCU:000032BC ; Segment permissions: Read
.CRT$XCU:000032BC _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:000032BC                 assume cs:_CRT$XCU
.CRT$XCU:000032BC                 ;org 32BCh
.CRT$XCU:000032BC _g_CriticalSection$initializer$ dd offset ??__Eg_CriticalSection@@YAXXZ ; `dynamic initializer for 'g_CriticalSection''(void)
.CRT$XCU:000032BC _CRT$XCU        ends
.CRT$XCU:000032BC
UNDEF:000032C0 ; ===========================================================================
UNDEF:000032C0
UNDEF:000032C0 ; Segment type: Externs
UNDEF:000032C0 ; UNDEF
UNDEF:000032C0 ; public: class AString & __thiscall AString::operator=(char const *)
UNDEF:000032C0                 extrn ??4AString@@QAEAAV0@PBD@Z:near
UNDEF:000032C0                                         ; CODE XREF: CExtractScanConsole::StartScanning(void)+28p
UNDEF:000032C0                                         ; CExtractCallbackConsole::PrepareOperation(wchar_t const *,int,int,unsigned __int64 const *)+ECp ...
UNDEF:000032C4                 extrn __RTC_CheckEsp:near
UNDEF:000032C4                                         ; CODE XREF: CExtractScanConsole::StartScanning(void)+32p
UNDEF:000032C4                                         ; CExtractScanConsole::ScanProgress(CDirItemsStat const &,UString const &,bool)+6Cp ...
UNDEF:000032C8                 extrn __RTC_Shutdown:near
UNDEF:000032C8                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:000032CC                 extrn __RTC_InitBase:near
UNDEF:000032CC                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:000032D0 ; void __thiscall CPercentPrinter::Print(CPercentPrinter *__hidden this)
UNDEF:000032D0                 extrn ?Print@CPercentPrinter@@QAEXXZ:near
UNDEF:000032D0                                         ; CODE XREF: CExtractScanConsole::ScanProgress(CDirItemsStat const &,UString const &,bool)+5Dp
UNDEF:000032D0                                         ; CExtractCallbackConsole::SetTotal(unsigned __int64)+4Bp ...
UNDEF:000032D4 ; public: class UString & __thiscall UString::operator=(class UString const &)
UNDEF:000032D4                 extrn ??4UString@@QAEAAV0@ABV0@@Z:near
UNDEF:000032D4                                         ; CODE XREF: CExtractScanConsole::ScanProgress(CDirItemsStat const &,UString const &,bool)+52p
UNDEF:000032D4                                         ; CExtractCallbackConsole::SetPassword(UString const &)+25p
UNDEF:000032D8 ; unsigned int NConsoleClose::g_BreakCounter
UNDEF:000032D8                 extrn ?g_BreakCounter@NConsoleClose@@3IA:near
UNDEF:000032D8                                         ; DATA XREF: NConsoleClose::TestBreakSignal(void)+5r
UNDEF:000032DC ; bool __thiscall CStdOutStream::Flush(CStdOutStream *__hidden this)
UNDEF:000032DC                 extrn ?Flush@CStdOutStream@@QAE_NXZ:near
UNDEF:000032DC                                         ; CODE XREF: CExtractScanConsole::ScanError(UString const &,ulong)+E8p
UNDEF:000032DC                                         ; CExtractCallbackConsole::AskOverwrite(wchar_t const *,_FILETIME const *,unsigned __int64 const *,wchar_t const *,_FILETIME const *,unsigned __int64 const *,int *)+183p ...
UNDEF:000032E0 ; public: class CStdOutStream & __thiscall CStdOutStream::operator<<(wchar_t const *)
UNDEF:000032E0                 extrn ??6CStdOutStream@@QAEAAV0@PB_W@Z:near
UNDEF:000032E0                                         ; CODE XREF: CExtractScanConsole::ScanError(UString const &,ulong)+B2p
UNDEF:000032E0                                         ; CExtractScanConsole::ScanError(UString const &,ulong)+C0p ...
UNDEF:000032E4 ; struct UString __stdcall __high NWindows::NError::MyFormatMessage(unsigned __int32)
UNDEF:000032E4                 extrn ?MyFormatMessage@NError@NWindows@@YG?AVUString@@K@Z:near
UNDEF:000032E4                                         ; CODE XREF: CExtractScanConsole::ScanError(UString const &,ulong)+74p
UNDEF:000032E4                                         ; CExtractCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+550p ...
UNDEF:000032E8 ; class CStdOutStream & __stdcall endl(class CStdOutStream &)
UNDEF:000032E8                 extrn ?endl@@YGAAVCStdOutStream@@AAV1@@Z:near
UNDEF:000032E8                                         ; DATA XREF: CExtractScanConsole::ScanError(UString const &,ulong)+54o
UNDEF:000032E8                                         ; CExtractScanConsole::ScanError(UString const &,ulong)+59o ...
UNDEF:000032EC                 extrn ___security_cookie:near
UNDEF:000032EC                                         ; DATA XREF: CExtractScanConsole::ScanError(UString const &,ulong)+2Br
UNDEF:000032EC                                         ; Print_UInt64_and_String(AString &,unsigned __int64,char const *)+16r ...
UNDEF:000032F0                 extrn ___CxxFrameHandler3:near
UNDEF:000032F0                                         ; CODE XREF: __ehhandler$?ScanError@CExtractScanConsole@@UAEJABVUString@@K@Z+16j
UNDEF:000032F0                                         ; __ehhandler$?PrintStat@CExtractScanConsole@@QAEXABUCDirItemsStat@@@Z+16j ...
UNDEF:000032F4 ; __fastcall __security_check_cookie(x)
UNDEF:000032F4                 extrn @__security_check_cookie@4:near
UNDEF:000032F4                                         ; CODE XREF: Print_UInt64_and_String(AString &,unsigned __int64,char const *)+68p
UNDEF:000032F4                                         ; PrintFileInfo(CStdOutStream *,wchar_t const *,_FILETIME const *,unsigned __int64 const *)+166p ...
UNDEF:000032F8 ; void __cdecl operator delete(void *)
UNDEF:000032F8                 extrn ??3@YAXPAX@Z:near ; CODE XREF: UString::~UString(void)+23p
UNDEF:000032F8                                         ; AString::~AString(void)+23p
UNDEF:000032FC ; int __cdecl _fputs(const char *Str, FILE *File)
UNDEF:000032FC                 extrn __imp__fputs:near ; CODE XREF: CStdOutStream::operator<<(char const *)+1Bp
UNDEF:000032FC                                         ; DATA XREF: CStdOutStream::operator<<(char const *)+1Br
UNDEF:00003300 ; void __thiscall CPercentPrinter::ClosePrint(CPercentPrinter *__hidden this, bool)
UNDEF:00003300                 extrn ?ClosePrint@CPercentPrinter@@QAEX_N@Z:near
UNDEF:00003300                                         ; CODE XREF: CExtractCallbackConsole::ExtractResult(long)+68p
UNDEF:00003300                                         ; CExtractScanConsole::ClosePercentsAndFlush(void)+25p ...
UNDEF:00003304 ; void __thiscall AString::Add_Space(AString *__hidden this)
UNDEF:00003304                 extrn ?Add_Space@AString@@QAEXXZ:near
UNDEF:00003304                                         ; CODE XREF: Print_UInt64_and_String(AString &,unsigned __int64,char const *)+40p
UNDEF:00003304                                         ; CExtractCallbackConsole::PrepareOperation(wchar_t const *,int,int,unsigned __int64 const *)+100p
UNDEF:00003308 ; public: class AString & __thiscall AString::operator+=(char const *)
UNDEF:00003308                 extrn ??YAString@@QAEAAV0@PBD@Z:near
UNDEF:00003308                                         ; CODE XREF: Print_UInt64_and_String(AString &,unsigned __int64,char const *)+38p
UNDEF:00003308                                         ; Print_UInt64_and_String(AString &,unsigned __int64,char const *)+4Cp ...
UNDEF:0000330C ; void __stdcall ConvertUInt64ToString(unsigned __int64, char *)
UNDEF:0000330C                 extrn ?ConvertUInt64ToString@@YGX_KPAD@Z:near
UNDEF:0000330C                                         ; CODE XREF: Print_UInt64_and_String(AString &,unsigned __int64,char const *)+2Cp
UNDEF:00003310 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00003310                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00003310                                         ; CODE XREF: Print_UInt64_and_String(AString &,unsigned __int64,char const *)+5Bp
UNDEF:00003310                                         ; PrintSize_bytes_Smart(AString &,unsigned __int64)+E9p ...
UNDEF:00003314                 extrn __aullshr:near    ; CODE XREF: PrintSize_bytes_Smart(AString &,unsigned __int64)+C5p
UNDEF:00003318                 extrn __allshl:near     ; CODE XREF: PrintSize_bytes_Smart(AString &,unsigned __int64)+B1p
UNDEF:0000331C ; void __thiscall AString::Grow_1(AString *__hidden this)
UNDEF:0000331C                 extrn ?Grow_1@AString@@AAEXXZ:near
UNDEF:0000331C                                         ; CODE XREF: AString::operator+=(char)+2Fp
UNDEF:00003320 ; void __thiscall AString::Add_LF(AString *__hidden this)
UNDEF:00003320                 extrn ?Add_LF@AString@@QAEXXZ:near
UNDEF:00003320                                         ; CODE XREF: Print_DirItemsStat(AString &,CDirItemsStat const &)+F3p
UNDEF:00003320                                         ; GetOpenArcErrorMessage(uint)+9Cp ...
UNDEF:00003324 ; public: __thiscall AString::AString(void)
UNDEF:00003324                 extrn ??0AString@@QAE@XZ:near
UNDEF:00003324                                         ; CODE XREF: CExtractScanConsole::PrintStat(CDirItemsStat const &)+4Bp
UNDEF:00003324                                         ; PrintFileInfo(CStdOutStream *,wchar_t const *,_FILETIME const *,unsigned __int64 const *)+74p ...
UNDEF:00003328 ; void __stdcall EnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
UNDEF:00003328                 extrn __imp__EnterCriticalSection@4:near
UNDEF:00003328                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSection::Enter(void)+15p
UNDEF:00003328                                         ; DATA XREF: NWindows::NSynchronization::CCriticalSection::Enter(void)+15r
UNDEF:0000332C ; void __stdcall LeaveCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
UNDEF:0000332C                 extrn __imp__LeaveCriticalSection@4:near
UNDEF:0000332C                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSection::Leave(void)+15p
UNDEF:0000332C                                         ; DATA XREF: NWindows::NSynchronization::CCriticalSection::Leave(void)+15r
UNDEF:00003330 ; enum NUserAnswerMode::EEnum __stdcall __high ScanUserYesNoAllQuit(struct CStdOutStream *)
UNDEF:00003330                 extrn ?ScanUserYesNoAllQuit@@YG?AW4EEnum@NUserAnswerMode@@PAVCStdOutStream@@@Z:near
UNDEF:00003330                                         ; CODE XREF: CExtractCallbackConsole::AskOverwrite(wchar_t const *,_FILETIME const *,unsigned __int64 const *,wchar_t const *,_FILETIME const *,unsigned __int64 const *,int *)+CDp
UNDEF:00003334 ; bool __stdcall ConvertFileTimeToString(const struct _FILETIME *, char *, bool, bool)
UNDEF:00003334                 extrn ?ConvertFileTimeToString@@YG_NABU_FILETIME@@PAD_N2@Z:near
UNDEF:00003334                                         ; CODE XREF: PrintFileInfo(CStdOutStream *,wchar_t const *,_FILETIME const *,unsigned __int64 const *)+105p
UNDEF:00003338 ; BOOL __stdcall FileTimeToLocalFileTime(const FILETIME *lpFileTime, LPFILETIME lpLocalFileTime)
UNDEF:00003338                 extrn __imp__FileTimeToLocalFileTime@8:near
UNDEF:00003338                                         ; CODE XREF: PrintFileInfo(CStdOutStream *,wchar_t const *,_FILETIME const *,unsigned __int64 const *)+E8p
UNDEF:00003338                                         ; DATA XREF: PrintFileInfo(CStdOutStream *,wchar_t const *,_FILETIME const *,unsigned __int64 const *)+E8r
UNDEF:0000333C ; public: class CStdOutStream & __thiscall CStdOutStream::operator<<(unsigned __int64)
UNDEF:0000333C                 extrn ??6CStdOutStream@@QAEAAV0@_K@Z:near
UNDEF:0000333C                                         ; CODE XREF: CExtractCallbackConsole::PrepareOperation(wchar_t const *,int,int,unsigned __int64 const *)+194p
UNDEF:0000333C                                         ; CExtractCallbackConsole::ExtractResult(long)+1E9p
UNDEF:00003340 ; void __thiscall CStdOutStream::PrintUString(CStdOutStream *__hidden this, const struct UString *, struct AString *)
UNDEF:00003340                 extrn ?PrintUString@CStdOutStream@@QAEXABVUString@@AAVAString@@@Z:near
UNDEF:00003340                                         ; CODE XREF: CExtractCallbackConsole::PrepareOperation(wchar_t const *,int,int,unsigned __int64 const *)+165p
UNDEF:00003344 ; public: class UString & __thiscall UString::operator=(wchar_t const *)
UNDEF:00003344                 extrn ??4UString@@QAEAAV0@PB_W@Z:near
UNDEF:00003344                                         ; CODE XREF: CExtractCallbackConsole::PrepareOperation(wchar_t const *,int,int,unsigned __int64 const *)+40p
UNDEF:00003344                                         ; CExtractCallbackConsole::PrepareOperation(wchar_t const *,int,int,unsigned __int64 const *)+143p ...
UNDEF:00003348 ; void __stdcall ConvertUInt32ToString(unsigned int, char *)
UNDEF:00003348                 extrn ?ConvertUInt32ToString@@YGXIPAD@Z:near
UNDEF:00003348                                         ; CODE XREF: SetExtractErrorMessage(int,int,AString &)+10Cp
UNDEF:0000334C ; public: __thiscall AString::AString(class AString const &)
UNDEF:0000334C                 extrn ??0AString@@QAE@ABV0@@Z:near
UNDEF:0000334C                                         ; CODE XREF: GetOpenArcErrorMessage(uint)+FFp
UNDEF:00003350 ; void __stdcall ConvertUInt32ToHex(unsigned int, char *)
UNDEF:00003350                 extrn ?ConvertUInt32ToHex@@YGXIPAD@Z:near
UNDEF:00003350                                         ; CODE XREF: GetOpenArcErrorMessage(uint)+D0p
UNDEF:00003354 ; public: class UString & __thiscall UString::operator+=(wchar_t const *)
UNDEF:00003354                 extrn ??YUString@@QAEAAV0@PB_W@Z:near
UNDEF:00003354                                         ; CODE XREF: Add_Messsage_Pre_ArcType(UString &,char const *,wchar_t const *)+2Bp
UNDEF:00003358 ; void __thiscall UString::AddAscii(UString *__hidden this, const char *)
UNDEF:00003358                 extrn ?AddAscii@UString@@QAEXPBD@Z:near
UNDEF:00003358                                         ; CODE XREF: Add_Messsage_Pre_ArcType(UString &,char const *,wchar_t const *)+12p
UNDEF:00003358                                         ; Add_Messsage_Pre_ArcType(UString &,char const *,wchar_t const *)+1Fp ...
UNDEF:0000335C ; void __thiscall UString::Add_LF(UString *__hidden this)
UNDEF:0000335C                 extrn ?Add_LF@UString@@QAEXXZ:near
UNDEF:0000335C                                         ; CODE XREF: Add_Messsage_Pre_ArcType(UString &,char const *,wchar_t const *)+6p
UNDEF:0000335C                                         ; Print_ErrorFormatIndex_Warning(CStdOutStream *,CCodecs const *,CArc const &)+7Cp
UNDEF:00003360 ; public: class UString & __thiscall UString::operator+=(class UString const &)
UNDEF:00003360                 extrn ??YUString@@QAEAAV0@ABV0@@Z:near
UNDEF:00003360                                         ; CODE XREF: Print_ErrorFormatIndex_Warning(CStdOutStream *,CCodecs const *,CArc const &)+63p
UNDEF:00003364 ; public: __thiscall UString::UString(wchar_t const *)
UNDEF:00003364                 extrn ??0UString@@QAE@PB_W@Z:near
UNDEF:00003364                                         ; CODE XREF: Print_ErrorFormatIndex_Warning(CStdOutStream *,CCodecs const *,CArc const &)+4Dp
UNDEF:00003368 ; __int32 __stdcall Print_OpenArchive_Error(struct CStdOutStream *, const struct CCodecs *, const struct CArchiveLink *)
UNDEF:00003368                 extrn ?Print_OpenArchive_Error@@YGJAAVCStdOutStream@@PBVCCodecs@@ABUCArchiveLink@@@Z:near
UNDEF:00003368                                         ; CODE XREF: CExtractCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+506p
UNDEF:0000336C ; __int32 __stdcall Print_OpenArchive_Props(struct CStdOutStream *, const struct CCodecs *, const struct CArchiveLink *)
UNDEF:0000336C                 extrn ?Print_OpenArchive_Props@@YGJAAVCStdOutStream@@PBVCCodecs@@ABUCArchiveLink@@@Z:near
UNDEF:0000336C                                         ; CODE XREF: CExtractCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)+44Cp
UNDEF:00003370 ; int __cdecl atexit(void (__cdecl *)())
UNDEF:00003370                 extrn _atexit:near      ; CODE XREF: `dynamic initializer for 'g_CriticalSection''(void)+12p
UNDEF:00003374 ; __stdcall CriticalSection_Init(x)
UNDEF:00003374                 extrn _CriticalSection_Init@4:near
UNDEF:00003374                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSection::CCriticalSection(void)+12p
UNDEF:00003378 ; void __stdcall DeleteCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
UNDEF:00003378                 extrn __imp__DeleteCriticalSection@4:near
UNDEF:00003378                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSection::~CCriticalSection(void)+15p
UNDEF:00003378                                         ; DATA XREF: NWindows::NSynchronization::CCriticalSection::~CCriticalSection(void)+15r
UNDEF:00003378
UNDEF:00003378