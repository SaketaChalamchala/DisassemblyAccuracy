.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : 8AD4DAE52C43464013D81AC3297EEEBF
.text:00000000 ; Input CRC32 : 9E31E5DD
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\7zOut.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; __int32 __thiscall NArchive::N7z::COutArchive::WriteSignature(NArchive::N7z::COutArchive *__hidden this)
.text:00000000                 public ?WriteSignature@COutArchive@N7z@NArchive@@AAEJXZ
.text:00000000 ?WriteSignature@COutArchive@N7z@NArchive@@AAEJXZ proc near
.text:00000000                                         ; CODE XREF: NArchive::N7z::COutArchive::Create(ISequentialOutStream *,bool)+8Bp
.text:00000000
.text:00000000 var_18          = dword ptr -18h
.text:00000000 Dst             = dword ptr -14h
.text:00000000 var_10          = dword ptr -10h
.text:00000000 var_C           = dword ptr -0Ch
.text:00000000 var_8           = dword ptr -8
.text:00000000 var_4           = dword ptr -4
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 sub     esp, 18h
.text:00000006                 mov     eax, 0CCCCCCCCh
.text:0000000B                 mov     [ebp+var_18], eax
.text:0000000E                 mov     [ebp+Dst], eax
.text:00000011                 mov     [ebp+var_10], eax
.text:00000014                 mov     [ebp+var_C], eax
.text:00000017                 mov     [ebp+var_8], eax
.text:0000001A                 mov     [ebp+var_4], eax
.text:0000001D                 mov     eax, dword ptr ds:___security_cookie
.text:00000022                 xor     eax, ebp
.text:00000024                 mov     [ebp+var_4], eax
.text:00000027                 mov     [ebp+var_8], ecx
.text:0000002A                 push    6               ; Size
.text:0000002C
.text:0000002C loc_2C:                                 ; DATA XREF: .text:0000238Co
.text:0000002C                 push    offset ?kSignature@N7z@NArchive@@3PAEA ; Src
.text:00000031                 lea     eax, [ebp+Dst]
.text:00000034                 push    eax             ; Dst
.text:00000035                 call    _memcpy
.text:0000003A                 add     esp, 0Ch
.text:0000003D                 mov     byte ptr [ebp+var_10+2], 0
.text:00000041                 mov     byte ptr [ebp+var_10+3], 4
.text:00000045                 push    8               ; unsigned int
.text:00000047                 lea     ecx, [ebp+Dst]
.text:0000004A                 push    ecx             ; void *
.text:0000004B                 mov     ecx, [ebp+var_8] ; this
.text:0000004E                 call    ?WriteDirect@COutArchive@N7z@NArchive@@AAEJPBXI@Z ; NArchive::N7z::COutArchive::WriteDirect(void const *,uint)
.text:00000053                 push    edx
.text:00000054                 mov     ecx, ebp
.text:00000056                 push    eax
.text:00000057                 lea     edx, $LN5
.text:0000005D                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000062                 pop     eax
.text:00000063                 pop     edx
.text:00000064                 mov     ecx, [ebp+var_4]
.text:00000067                 xor     ecx, ebp
.text:00000069                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0000006E                 add     esp, 18h
.text:00000071                 cmp     ebp, esp
.text:00000073                 call    __RTC_CheckEsp
.text:00000078                 mov     esp, ebp
.text:0000007A                 pop     ebp
.text:0000007B                 retn
.text:0000007B ?WriteSignature@COutArchive@N7z@NArchive@@AAEJXZ endp
.text:0000007B
.text:0000007B ; ---------------------------------------------------------------------------
.text:0000007C $LN5            dd 1                    ; DATA XREF: NArchive::N7z::COutArchive::WriteSignature(void)+57o
.text:00000080                 dd offset $LN4
.text:00000084 $LN4            dd 0FFFFFFECh, 8        ; DATA XREF: .text:00000080o
.text:0000008C                 dd offset $LN3
.text:00000090 $LN3            dd 667562h, 3 dup(0CCCCCCCCh) ; DATA XREF: .text:0000008Co
.text:000000A0
.text:000000A0 ; =============== S U B R O U T I N E =======================================
.text:000000A0
.text:000000A0 ; Attributes: bp-based frame
.text:000000A0
.text:000000A0 ; __int32 __thiscall NArchive::N7z::COutArchive::WriteStartHeader(NArchive::N7z::COutArchive *this, const struct NArchive::N7z::CStartHeader *)
.text:000000A0                 public ?WriteStartHeader@COutArchive@N7z@NArchive@@AAEJABUCStartHeader@23@@Z
.text:000000A0 ?WriteStartHeader@COutArchive@N7z@NArchive@@AAEJABUCStartHeader@23@@Z proc near
.text:000000A0                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+517p
.text:000000A0
.text:000000A0 var_28          = byte ptr -28h
.text:000000A0 var_24          = byte ptr -24h
.text:000000A0 var_20          = byte ptr -20h
.text:000000A0 var_18          = byte ptr -18h
.text:000000A0 var_10          = byte ptr -10h
.text:000000A0 var_8           = dword ptr -8
.text:000000A0 var_4           = dword ptr -4
.text:000000A0 arg_0           = dword ptr  8
.text:000000A0
.text:000000A0                 push    ebp
.text:000000A1                 mov     ebp, esp
.text:000000A3                 sub     esp, 28h
.text:000000A6                 push    edi
.text:000000A7                 push    ecx
.text:000000A8                 lea     edi, [ebp+var_28]
.text:000000AB                 mov     ecx, 0Ah
.text:000000B0
.text:000000B0 loc_B0:                                 ; DATA XREF: .text:00002398o
.text:000000B0                 mov     eax, 0CCCCCCCCh
.text:000000B5                 rep stosd
.text:000000B7                 pop     ecx
.text:000000B8                 mov     eax, dword ptr ds:___security_cookie
.text:000000BD                 xor     eax, ebp
.text:000000BF                 mov     [ebp+var_4], eax
.text:000000C2                 mov     [ebp+var_8], ecx
.text:000000C5                 mov     eax, [ebp+arg_0]
.text:000000C8                 mov     ecx, [eax+4]
.text:000000CB                 push    ecx
.text:000000CC                 mov     edx, [eax]
.text:000000CE                 push    edx
.text:000000CF                 lea     eax, [ebp+var_20]
.text:000000D2                 push    eax
.text:000000D3                 call    ?SetUInt64@N7z@NArchive@@YGXPAE_K@Z ; NArchive::N7z::SetUInt64(uchar *,unsigned __int64)
.text:000000D8                 mov     ecx, [ebp+arg_0]
.text:000000DB                 mov     edx, [ecx+0Ch]
.text:000000DE                 push    edx
.text:000000DF                 mov     eax, [ecx+8]
.text:000000E2                 push    eax
.text:000000E3                 lea     ecx, [ebp+var_18]
.text:000000E6                 push    ecx
.text:000000E7                 call    ?SetUInt64@N7z@NArchive@@YGXPAE_K@Z ; NArchive::N7z::SetUInt64(uchar *,unsigned __int64)
.text:000000EC                 mov     edx, [ebp+arg_0]
.text:000000EF                 mov     eax, [edx+10h]
.text:000000F2                 push    eax
.text:000000F3                 lea     ecx, [ebp+var_10]
.text:000000F6                 push    ecx
.text:000000F7                 call    ?SetUInt32@N7z@NArchive@@YGXPAEI@Z ; NArchive::N7z::SetUInt32(uchar *,uint)
.text:000000FC                 lea     ecx, [ebp+var_20]
.text:000000FF                 mov     edx, 14h
.text:00000104                 call    @CrcCalc@8      ; CrcCalc(x,x)
.text:00000109                 push    eax
.text:0000010A                 lea     edx, [ebp+var_24]
.text:0000010D                 push    edx
.text:0000010E                 call    ?SetUInt32@N7z@NArchive@@YGXPAEI@Z ; NArchive::N7z::SetUInt32(uchar *,uint)
.text:00000113                 push    18h             ; unsigned int
.text:00000115                 lea     eax, [ebp+var_24]
.text:00000118                 push    eax             ; void *
.text:00000119                 mov     ecx, [ebp+var_8] ; this
.text:0000011C                 call    ?WriteDirect@COutArchive@N7z@NArchive@@AAEJPBXI@Z ; NArchive::N7z::COutArchive::WriteDirect(void const *,uint)
.text:00000121                 push    edx
.text:00000122                 mov     ecx, ebp
.text:00000124                 push    eax
.text:00000125                 lea     edx, $LN5_0
.text:0000012B                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000130                 pop     eax
.text:00000131                 pop     edx
.text:00000132                 pop     edi
.text:00000133                 mov     ecx, [ebp+var_4]
.text:00000136                 xor     ecx, ebp
.text:00000138                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0000013D                 add     esp, 28h
.text:00000140                 cmp     ebp, esp
.text:00000142                 call    __RTC_CheckEsp
.text:00000147                 mov     esp, ebp
.text:00000149                 pop     ebp
.text:0000014A                 retn    4
.text:0000014A ?WriteStartHeader@COutArchive@N7z@NArchive@@AAEJABUCStartHeader@23@@Z endp
.text:0000014A
.text:0000014A ; ---------------------------------------------------------------------------
.text:0000014D                 align 10h
.text:00000150 $LN5_0          dd 1                    ; DATA XREF: NArchive::N7z::COutArchive::WriteStartHeader(NArchive::N7z::CStartHeader const &)+85o
.text:00000154                 dd offset $LN4_0
.text:00000158 $LN4_0          dd 0FFFFFFDCh, 18h      ; DATA XREF: .text:00000154o
.text:00000160                 dd offset $LN3_0
.text:00000164 $LN3_0          dd 667562h, 2 dup(0CCCCCCCCh) ; DATA XREF: .text:00000160o
.text:00000170
.text:00000170 ; =============== S U B R O U T I N E =======================================
.text:00000170
.text:00000170 ; Attributes: bp-based frame
.text:00000170
.text:00000170 ; void __stdcall NArchive::N7z::SetUInt32(unsigned char *, unsigned int)
.text:00000170 ?SetUInt32@N7z@NArchive@@YGXPAEI@Z proc near
.text:00000170                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteStartHeader(NArchive::N7z::CStartHeader const &)+57p
.text:00000170                                         ; NArchive::N7z::COutArchive::WriteStartHeader(NArchive::N7z::CStartHeader const &)+6Ep
.text:00000170
.text:00000170 var_4           = dword ptr -4
.text:00000170 arg_0           = dword ptr  8
.text:00000170 arg_4           = dword ptr  0Ch
.text:00000170
.text:00000170                 push    ebp
.text:00000171                 mov     ebp, esp
.text:00000173                 push    ecx
.text:00000174                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000017B                 mov     [ebp+var_4], 0
.text:00000182                 jmp     short loc_196
.text:00000184 ; ---------------------------------------------------------------------------
.text:00000184
.text:00000184 loc_184:                                ; CODE XREF: NArchive::N7z::SetUInt32(uchar *,uint)+37j
.text:00000184                 mov     eax, [ebp+var_4]
.text:00000187                 add     eax, 1
.text:0000018A                 mov     [ebp+var_4], eax
.text:0000018D                 mov     ecx, [ebp+arg_4]
.text:00000190                 shr     ecx, 8
.text:00000193                 mov     [ebp+arg_4], ecx
.text:00000196
.text:00000196 loc_196:                                ; CODE XREF: NArchive::N7z::SetUInt32(uchar *,uint)+12j
.text:00000196                 cmp     [ebp+var_4], 4
.text:0000019A                 jge     short loc_1A9
.text:0000019C                 mov     edx, [ebp+arg_0]
.text:0000019F                 add     edx, [ebp+var_4]
.text:000001A2                 mov     al, byte ptr [ebp+arg_4]
.text:000001A5                 mov     [edx], al
.text:000001A7                 jmp     short loc_184
.text:000001A9 ; ---------------------------------------------------------------------------
.text:000001A9
.text:000001A9 loc_1A9:                                ; CODE XREF: NArchive::N7z::SetUInt32(uchar *,uint)+2Aj
.text:000001A9                 mov     esp, ebp
.text:000001AB                 pop     ebp
.text:000001AC                 retn    8
.text:000001AC ?SetUInt32@N7z@NArchive@@YGXPAEI@Z endp
.text:000001AC
.text:000001AC ; ---------------------------------------------------------------------------
.text:000001AF                 align 10h
.text:000001B0
.text:000001B0 ; =============== S U B R O U T I N E =======================================
.text:000001B0
.text:000001B0 ; Attributes: bp-based frame
.text:000001B0
.text:000001B0 ; void __stdcall NArchive::N7z::SetUInt64(unsigned char *, unsigned __int64)
.text:000001B0 ?SetUInt64@N7z@NArchive@@YGXPAE_K@Z proc near
.text:000001B0                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteStartHeader(NArchive::N7z::CStartHeader const &)+33p
.text:000001B0                                         ; NArchive::N7z::COutArchive::WriteStartHeader(NArchive::N7z::CStartHeader const &)+47p
.text:000001B0
.text:000001B0 var_4           = dword ptr -4
.text:000001B0 arg_0           = dword ptr  8
.text:000001B0 arg_4           = dword ptr  0Ch
.text:000001B0 arg_8           = dword ptr  10h
.text:000001B0
.text:000001B0                 push    ebp
.text:000001B1                 mov     ebp, esp
.text:000001B3                 push    ecx
.text:000001B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000001BB                 mov     [ebp+var_4], 0
.text:000001C2                 jmp     short loc_1E0
.text:000001C4 ; ---------------------------------------------------------------------------
.text:000001C4
.text:000001C4 loc_1C4:                                ; CODE XREF: NArchive::N7z::SetUInt64(uchar *,unsigned __int64)+41j
.text:000001C4                 mov     eax, [ebp+var_4]
.text:000001C7                 add     eax, 1
.text:000001CA                 mov     [ebp+var_4], eax
.text:000001CD                 mov     eax, [ebp+arg_4]
.text:000001D0                 mov     edx, [ebp+arg_8]
.text:000001D3                 mov     cl, 8
.text:000001D5                 call    __aullshr
.text:000001DA                 mov     [ebp+arg_4], eax
.text:000001DD                 mov     [ebp+arg_8], edx
.text:000001E0
.text:000001E0 loc_1E0:                                ; CODE XREF: NArchive::N7z::SetUInt64(uchar *,unsigned __int64)+12j
.text:000001E0                 cmp     [ebp+var_4], 8
.text:000001E4                 jge     short loc_1F3
.text:000001E6                 mov     cl, byte ptr [ebp+arg_4]
.text:000001E9                 mov     edx, [ebp+arg_0]
.text:000001EC                 add     edx, [ebp+var_4]
.text:000001EF                 mov     [edx], cl
.text:000001F1                 jmp     short loc_1C4
.text:000001F3 ; ---------------------------------------------------------------------------
.text:000001F3
.text:000001F3 loc_1F3:                                ; CODE XREF: NArchive::N7z::SetUInt64(uchar *,unsigned __int64)+34j
.text:000001F3                 add     esp, 4
.text:000001F6                 cmp     ebp, esp
.text:000001F8                 call    __RTC_CheckEsp
.text:000001FD                 mov     esp, ebp
.text:000001FF                 pop     ebp
.text:00000200                 retn    0Ch
.text:00000200 ?SetUInt64@N7z@NArchive@@YGXPAE_K@Z endp
.text:00000200
.text:00000200 ; ---------------------------------------------------------------------------
.text:00000203                 align 10h
.text:00000210
.text:00000210 ; =============== S U B R O U T I N E =======================================
.text:00000210
.text:00000210 ; Attributes: bp-based frame
.text:00000210
.text:00000210 ; __int32 __thiscall NArchive::N7z::COutArchive::Create(NArchive::N7z::COutArchive *this, struct ISequentialOutStream *, bool)
.text:00000210                 public ?Create@COutArchive@N7z@NArchive@@QAEJPAUISequentialOutStream@@_N@Z
.text:00000210 ?Create@COutArchive@N7z@NArchive@@QAEJPAUISequentialOutStream@@_N@Z proc near
.text:00000210
.text:00000210 var_10          = dword ptr -10h
.text:00000210 var_C           = dword ptr -0Ch
.text:00000210 var_8           = dword ptr -8
.text:00000210 var_4           = dword ptr -4
.text:00000210 arg_0           = dword ptr  8
.text:00000210 arg_4           = byte ptr  0Ch
.text:00000210
.text:00000210                 push    ebp
.text:00000211                 mov     ebp, esp
.text:00000213                 sub     esp, 10h
.text:00000216                 push    esi
.text:00000217                 mov     eax, 0CCCCCCCCh
.text:0000021C                 mov     [ebp+var_10], eax
.text:0000021F                 mov     [ebp+var_C], eax
.text:00000222                 mov     [ebp+var_8], eax
.text:00000225                 mov     [ebp+var_4], eax
.text:00000228                 mov     [ebp+var_4], ecx
.text:0000022B                 mov     ecx, [ebp+var_4] ; this
.text:0000022E                 call    ?Close@COutArchive@N7z@NArchive@@QAEXXZ ; NArchive::N7z::COutArchive::Close(void)
.text:00000233                 mov     eax, [ebp+arg_0]
.text:00000236                 push    eax
.text:00000237                 mov     ecx, [ebp+var_4]
.text:0000023A                 add     ecx, 54h ; 'T'
.text:0000023D                 call    ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=(ISequentialOutStream *)
.text:00000242                 movzx   ecx, [ebp+arg_4]
.text:00000246                 test    ecx, ecx
.text:00000248                 jnz     short loc_27F
.text:0000024A                 mov     ecx, [ebp+var_4]
.text:0000024D                 add     ecx, 50h ; 'P'
.text:00000250                 call    ??I?$CMyComPtr@UIOutStream@@@@QAEPAPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator&(void)
.text:00000255                 push    eax
.text:00000256                 push    offset _IID_IOutStream
.text:0000025B                 mov     ecx, [ebp+var_4]
.text:0000025E                 add     ecx, 54h ; 'T'
.text:00000261                 call    ??$QueryInterface@UIOutStream@@@?$CMyComPtr@UISequentialOutStream@@@@QBEJABU_GUID@@PAPAUIOutStream@@@Z ; CMyComPtr<ISequentialOutStream>::QueryInterface<IOutStream>(_GUID const &,IOutStream * *)
.text:00000266                 mov     ecx, [ebp+var_4]
.text:00000269                 add     ecx, 50h ; 'P'
.text:0000026C                 call    ??7?$CMyComPtr@UIOutStream@@@@QBE_NXZ ; CMyComPtr<IOutStream>::operator!(void)
.text:00000271                 movzx   edx, al
.text:00000274                 test    edx, edx
.text:00000276                 jz      short loc_27F
.text:00000278                 mov     eax, 80004001h
.text:0000027D                 jmp     short loc_2ED
.text:0000027F ; ---------------------------------------------------------------------------
.text:0000027F
.text:0000027F loc_27F:                                ; CODE XREF: NArchive::N7z::COutArchive::Create(ISequentialOutStream *,bool)+38j
.text:0000027F                                         ; NArchive::N7z::COutArchive::Create(ISequentialOutStream *,bool)+66j
.text:0000027F                 mov     ecx, [ebp+var_4]
.text:00000282                 add     ecx, 50h ; 'P'
.text:00000285                 call    ??7?$CMyComPtr@UIOutStream@@@@QBE_NXZ ; CMyComPtr<IOutStream>::operator!(void)
.text:0000028A                 movzx   eax, al
.text:0000028D                 test    eax, eax
.text:0000028F                 jz      short loc_298
.text:00000291                 mov     eax, 80004005h
.text:00000296                 jmp     short loc_2ED
.text:00000298 ; ---------------------------------------------------------------------------
.text:00000298
.text:00000298 loc_298:                                ; CODE XREF: NArchive::N7z::COutArchive::Create(ISequentialOutStream *,bool)+7Fj
.text:00000298                 mov     ecx, [ebp+var_4] ; this
.text:0000029B                 call    ?WriteSignature@COutArchive@N7z@NArchive@@AAEJXZ ; NArchive::N7z::COutArchive::WriteSignature(void)
.text:000002A0                 mov     [ebp+var_8], eax
.text:000002A3                 cmp     [ebp+var_8], 0
.text:000002A7                 jz      short loc_2AE
.text:000002A9                 mov     eax, [ebp+var_8]
.text:000002AC                 jmp     short loc_2ED
.text:000002AE ; ---------------------------------------------------------------------------
.text:000002AE
.text:000002AE loc_2AE:                                ; CODE XREF: NArchive::N7z::COutArchive::Create(ISequentialOutStream *,bool)+97j
.text:000002AE                 mov     ecx, [ebp+var_4]
.text:000002B1                 add     ecx, 50h ; 'P'
.text:000002B4                 call    ??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator->(void)
.text:000002B9                 mov     [ebp+var_10], eax
.text:000002BC                 mov     esi, esp
.text:000002BE                 mov     ecx, [ebp+var_4]
.text:000002C1                 push    ecx
.text:000002C2                 push    1
.text:000002C4                 push    0
.text:000002C6                 push    0
.text:000002C8                 mov     edx, [ebp+var_10]
.text:000002CB                 push    edx
.text:000002CC                 mov     eax, [ebp+var_10]
.text:000002CF                 mov     ecx, [eax]
.text:000002D1                 mov     edx, [ecx+10h]
.text:000002D4                 call    edx
.text:000002D6                 cmp     esi, esp
.text:000002D8                 call    __RTC_CheckEsp
.text:000002DD                 mov     [ebp+var_C], eax
.text:000002E0                 cmp     [ebp+var_C], 0
.text:000002E4                 jz      short loc_2EB
.text:000002E6                 mov     eax, [ebp+var_C]
.text:000002E9                 jmp     short loc_2ED
.text:000002EB ; ---------------------------------------------------------------------------
.text:000002EB
.text:000002EB loc_2EB:                                ; CODE XREF: NArchive::N7z::COutArchive::Create(ISequentialOutStream *,bool)+D4j
.text:000002EB                 xor     eax, eax
.text:000002ED
.text:000002ED loc_2ED:                                ; CODE XREF: NArchive::N7z::COutArchive::Create(ISequentialOutStream *,bool)+6Dj
.text:000002ED                                         ; NArchive::N7z::COutArchive::Create(ISequentialOutStream *,bool)+86j ...
.text:000002ED                 pop     esi
.text:000002EE                 add     esp, 10h
.text:000002F1                 cmp     ebp, esp
.text:000002F3                 call    __RTC_CheckEsp
.text:000002F8                 mov     esp, ebp
.text:000002FA                 pop     ebp
.text:000002FB                 retn    8
.text:000002FB ?Create@COutArchive@N7z@NArchive@@QAEJPAUISequentialOutStream@@_N@Z endp
.text:000002FB
.text:000002FB ; ---------------------------------------------------------------------------
.text:000002FE                 align 10h
.text:00000300
.text:00000300 ; =============== S U B R O U T I N E =======================================
.text:00000300
.text:00000300 ; Attributes: bp-based frame
.text:00000300
.text:00000300 ; void __thiscall NArchive::N7z::COutArchive::Close(NArchive::N7z::COutArchive *__hidden this)
.text:00000300                 public ?Close@COutArchive@N7z@NArchive@@QAEXXZ
.text:00000300 ?Close@COutArchive@N7z@NArchive@@QAEXXZ proc near
.text:00000300                                         ; CODE XREF: NArchive::N7z::COutArchive::Create(ISequentialOutStream *,bool)+1Ep
.text:00000300
.text:00000300 var_4           = dword ptr -4
.text:00000300
.text:00000300                 push    ebp
.text:00000301                 mov     ebp, esp
.text:00000303                 push    ecx
.text:00000304                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000030B                 mov     [ebp+var_4], ecx
.text:0000030E                 mov     ecx, [ebp+var_4]
.text:00000311                 add     ecx, 54h ; 'T'
.text:00000314                 call    ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release(void)
.text:00000319                 mov     ecx, [ebp+var_4]
.text:0000031C                 add     ecx, 50h ; 'P'
.text:0000031F                 call    ?Release@?$CMyComPtr@UIOutStream@@@@QAEXXZ ; CMyComPtr<IOutStream>::Release(void)
.text:00000324                 add     esp, 4
.text:00000327                 cmp     ebp, esp
.text:00000329                 call    __RTC_CheckEsp
.text:0000032E                 mov     esp, ebp
.text:00000330                 pop     ebp
.text:00000331                 retn
.text:00000331 ?Close@COutArchive@N7z@NArchive@@QAEXXZ endp
.text:00000331
.text:00000331 ; ---------------------------------------------------------------------------
.text:00000332                 align 10h
.text:00000340
.text:00000340 ; =============== S U B R O U T I N E =======================================
.text:00000340
.text:00000340 ; Attributes: bp-based frame
.text:00000340
.text:00000340 ; __int32 __thiscall NArchive::N7z::COutArchive::SkipPrefixArchiveHeader(NArchive::N7z::COutArchive *__hidden this)
.text:00000340                 public ?SkipPrefixArchiveHeader@COutArchive@N7z@NArchive@@QAEJXZ
.text:00000340 ?SkipPrefixArchiveHeader@COutArchive@N7z@NArchive@@QAEJXZ proc near
.text:00000340
.text:00000340 var_28          = byte ptr -28h
.text:00000340 Dst             = byte ptr -24h
.text:00000340 var_8           = dword ptr -8
.text:00000340 var_4           = dword ptr -4
.text:00000340
.text:00000340                 push    ebp
.text:00000341                 mov     ebp, esp
.text:00000343                 sub     esp, 28h
.text:00000346                 push    edi
.text:00000347                 push    ecx
.text:00000348                 lea     edi, [ebp+var_28]
.text:0000034B                 mov     ecx, 0Ah
.text:00000350                 mov     eax, 0CCCCCCCCh
.text:00000355                 rep stosd
.text:00000357                 pop     ecx
.text:00000358                 mov     eax, dword ptr ds:___security_cookie
.text:0000035D                 xor     eax, ebp
.text:0000035F                 mov     [ebp+var_4], eax
.text:00000362                 mov     [ebp+var_8], ecx
.text:00000365                 push    18h             ; Size
.text:00000367                 push    0               ; Val
.text:00000369                 lea     eax, [ebp+Dst]
.text:0000036C                 push    eax             ; Dst
.text:0000036D                 call    _memset
.text:00000372                 add     esp, 0Ch
.text:00000375                 push    18h             ; unsigned int
.text:00000377                 lea     ecx, [ebp+Dst]
.text:0000037A                 push    ecx             ; void *
.text:0000037B                 mov     ecx, [ebp+var_8] ; this
.text:0000037E                 call    ?WriteDirect@COutArchive@N7z@NArchive@@AAEJPBXI@Z ; NArchive::N7z::COutArchive::WriteDirect(void const *,uint)
.text:00000383                 push    edx
.text:00000384                 mov     ecx, ebp
.text:00000386                 push    eax
.text:00000387                 lea     edx, $LN5_1
.text:0000038D                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000392                 pop     eax
.text:00000393                 pop     edx
.text:00000394                 pop     edi
.text:00000395                 mov     ecx, [ebp+var_4]
.text:00000398                 xor     ecx, ebp
.text:0000039A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0000039F                 add     esp, 28h
.text:000003A2                 cmp     ebp, esp
.text:000003A4                 call    __RTC_CheckEsp
.text:000003A9                 mov     esp, ebp
.text:000003AB                 pop     ebp
.text:000003AC                 retn
.text:000003AC ?SkipPrefixArchiveHeader@COutArchive@N7z@NArchive@@QAEJXZ endp
.text:000003AC
.text:000003AC ; ---------------------------------------------------------------------------
.text:000003AD                 align 10h
.text:000003B0 $LN5_1          dd 1                    ; DATA XREF: NArchive::N7z::COutArchive::SkipPrefixArchiveHeader(void)+47o
.text:000003B4                 dd offset $LN4_1
.text:000003B8 $LN4_1          dd 0FFFFFFDCh, 18h      ; DATA XREF: .text:000003B4o
.text:000003C0                 dd offset $LN3_1
.text:000003C4 $LN3_1          dd 667562h, 2 dup(0CCCCCCCCh) ; DATA XREF: .text:000003C0o
.text:000003D0
.text:000003D0 ; =============== S U B R O U T I N E =======================================
.text:000003D0
.text:000003D0 ; Attributes: bp-based frame
.text:000003D0
.text:000003D0 ; unsigned __int64 __thiscall NArchive::N7z::COutArchive::GetPos(NArchive::N7z::COutArchive *__hidden this)
.text:000003D0                 public ?GetPos@COutArchive@N7z@NArchive@@ABE_KXZ
.text:000003D0 ?GetPos@COutArchive@N7z@NArchive@@ABE_KXZ proc near
.text:000003D0                                         ; CODE XREF: NArchive::N7z::COutArchive::SkipAlign(uint,uint)+2Ep
.text:000003D0
.text:000003D0 var_4           = dword ptr -4
.text:000003D0
.text:000003D0                 push    ebp
.text:000003D1                 mov     ebp, esp
.text:000003D3                 push    ecx
.text:000003D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000003DB                 mov     [ebp+var_4], ecx
.text:000003DE                 mov     eax, [ebp+var_4]
.text:000003E1                 movzx   ecx, byte ptr [eax+8]
.text:000003E5                 test    ecx, ecx
.text:000003E7                 jz      short loc_3F3
.text:000003E9                 mov     edx, [ebp+var_4]
.text:000003EC                 mov     eax, [edx+0Ch]
.text:000003EF                 xor     edx, edx
.text:000003F1                 jmp     short loc_418
.text:000003F3 ; ---------------------------------------------------------------------------
.text:000003F3
.text:000003F3 loc_3F3:                                ; CODE XREF: NArchive::N7z::COutArchive::GetPos(void)+17j
.text:000003F3                 mov     eax, [ebp+var_4]
.text:000003F6                 movzx   ecx, byte ptr [eax+9]
.text:000003FA                 test    ecx, ecx
.text:000003FC                 jz      short loc_40B
.text:000003FE                 mov     ecx, [ebp+var_4]
.text:00000401                 add     ecx, 18h        ; this
.text:00000404                 call    ?GetProcessedSize@COutBuffer@@QBE_KXZ ; COutBuffer::GetProcessedSize(void)
.text:00000409                 jmp     short loc_418
.text:0000040B ; ---------------------------------------------------------------------------
.text:0000040B
.text:0000040B loc_40B:                                ; CODE XREF: NArchive::N7z::COutArchive::GetPos(void)+2Cj
.text:0000040B                 mov     ecx, [ebp+var_4]
.text:0000040E                 add     ecx, 40h ; '@'  ; this
.text:00000411                 call    ?GetPos@CWriteBufferLoc@N7z@NArchive@@QBEIXZ ; NArchive::N7z::CWriteBufferLoc::GetPos(void)
.text:00000416                 xor     edx, edx
.text:00000418
.text:00000418 loc_418:                                ; CODE XREF: NArchive::N7z::COutArchive::GetPos(void)+21j
.text:00000418                                         ; NArchive::N7z::COutArchive::GetPos(void)+39j
.text:00000418                 add     esp, 4
.text:0000041B                 cmp     ebp, esp
.text:0000041D                 call    __RTC_CheckEsp
.text:00000422                 mov     esp, ebp
.text:00000424                 pop     ebp
.text:00000425                 retn
.text:00000425 ?GetPos@COutArchive@N7z@NArchive@@ABE_KXZ endp
.text:00000425
.text:00000425 ; ---------------------------------------------------------------------------
.text:00000426                 align 10h
.text:00000430
.text:00000430 ; =============== S U B R O U T I N E =======================================
.text:00000430
.text:00000430 ; Attributes: bp-based frame
.text:00000430
.text:00000430 ; void __thiscall NArchive::N7z::COutArchive::WriteBytes(NArchive::N7z::COutArchive *this, const void *Src, unsigned int)
.text:00000430                 public ?WriteBytes@COutArchive@N7z@NArchive@@AAEXPBXI@Z
.text:00000430 ?WriteBytes@COutArchive@N7z@NArchive@@AAEXPBXI@Z proc near
.text:00000430                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteFolder(NArchive::N7z::CFolder const &)+167p
.text:00000430                                         ; NArchive::N7z::COutArchive::WriteFolder(NArchive::N7z::CFolder const &)+1BFp
.text:00000430
.text:00000430 var_4           = dword ptr -4
.text:00000430 Src             = dword ptr  8
.text:00000430 arg_4           = dword ptr  0Ch
.text:00000430
.text:00000430                 push    ebp
.text:00000431                 mov     ebp, esp
.text:00000433                 push    ecx
.text:00000434                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000043B                 mov     [ebp+var_4], ecx
.text:0000043E                 mov     eax, [ebp+var_4]
.text:00000441                 movzx   ecx, byte ptr [eax+8]
.text:00000445                 test    ecx, ecx
.text:00000447                 jz      short loc_45A
.text:00000449                 mov     edx, [ebp+var_4]
.text:0000044C                 mov     eax, [edx+0Ch]
.text:0000044F                 add     eax, [ebp+arg_4]
.text:00000452                 mov     ecx, [ebp+var_4]
.text:00000455                 mov     [ecx+0Ch], eax
.text:00000458                 jmp     short loc_4A5
.text:0000045A ; ---------------------------------------------------------------------------
.text:0000045A
.text:0000045A loc_45A:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteBytes(void const *,uint)+17j
.text:0000045A                 mov     edx, [ebp+var_4]
.text:0000045D                 movzx   eax, byte ptr [edx+9]
.text:00000461                 test    eax, eax
.text:00000463                 jz      short loc_492
.text:00000465                 mov     ecx, [ebp+arg_4]
.text:00000468                 push    ecx             ; unsigned int
.text:00000469                 mov     edx, [ebp+Src]
.text:0000046C                 push    edx             ; void *
.text:0000046D                 mov     ecx, [ebp+var_4]
.text:00000470                 add     ecx, 18h        ; this
.text:00000473                 call    ?WriteBytes@COutBuffer@@QAEXPBXI@Z ; COutBuffer::WriteBytes(void const *,uint)
.text:00000478                 mov     eax, [ebp+arg_4]
.text:0000047B                 push    eax
.text:0000047C                 mov     edx, [ebp+Src]
.text:0000047F                 mov     ecx, [ebp+var_4]
.text:00000482                 mov     ecx, [ecx+10h]
.text:00000485                 call    @CrcUpdate@12   ; CrcUpdate(x,x,x)
.text:0000048A                 mov     edx, [ebp+var_4]
.text:0000048D                 mov     [edx+10h], eax
.text:00000490                 jmp     short loc_4A5
.text:00000492 ; ---------------------------------------------------------------------------
.text:00000492
.text:00000492 loc_492:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteBytes(void const *,uint)+33j
.text:00000492                 mov     eax, [ebp+arg_4]
.text:00000495                 push    eax             ; unsigned int
.text:00000496                 mov     ecx, [ebp+Src]
.text:00000499                 push    ecx             ; Src
.text:0000049A                 mov     ecx, [ebp+var_4]
.text:0000049D                 add     ecx, 40h ; '@'  ; this
.text:000004A0                 call    ?WriteBytes@CWriteBufferLoc@N7z@NArchive@@QAEXPBXI@Z ; NArchive::N7z::CWriteBufferLoc::WriteBytes(void const *,uint)
.text:000004A5
.text:000004A5 loc_4A5:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteBytes(void const *,uint)+28j
.text:000004A5                                         ; NArchive::N7z::COutArchive::WriteBytes(void const *,uint)+60j
.text:000004A5                 add     esp, 4
.text:000004A8                 cmp     ebp, esp
.text:000004AA                 call    __RTC_CheckEsp
.text:000004AF                 mov     esp, ebp
.text:000004B1                 pop     ebp
.text:000004B2                 retn    8
.text:000004B2 ?WriteBytes@COutArchive@N7z@NArchive@@AAEXPBXI@Z endp
.text:000004B2
.text:000004B2 ; ---------------------------------------------------------------------------
.text:000004B5                 align 10h
.text:000004C0
.text:000004C0 ; =============== S U B R O U T I N E =======================================
.text:000004C0
.text:000004C0 ; Attributes: bp-based frame
.text:000004C0
.text:000004C0 ; void __thiscall NArchive::N7z::COutArchive::WriteByte(NArchive::N7z::COutArchive *this, unsigned __int8)
.text:000004C0                 public ?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z
.text:000004C0 ?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z proc near
.text:000004C0                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteUInt32(uint)+37p
.text:000004C0                                         ; NArchive::N7z::COutArchive::WriteUInt64(unsigned __int64)+37p ...
.text:000004C0
.text:000004C0 var_4           = dword ptr -4
.text:000004C0 arg_0           = byte ptr  8
.text:000004C0
.text:000004C0                 push    ebp
.text:000004C1                 mov     ebp, esp
.text:000004C3                 push    ecx
.text:000004C4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000004CB                 mov     [ebp+var_4], ecx
.text:000004CE                 mov     eax, [ebp+var_4]
.text:000004D1                 movzx   ecx, byte ptr [eax+8]
.text:000004D5                 test    ecx, ecx
.text:000004D7                 jz      short loc_4EA
.text:000004D9                 mov     edx, [ebp+var_4]
.text:000004DC                 mov     eax, [edx+0Ch]
.text:000004DF                 add     eax, 1
.text:000004E2                 mov     ecx, [ebp+var_4]
.text:000004E5                 mov     [ecx+0Ch], eax
.text:000004E8                 jmp     short loc_53D
.text:000004EA ; ---------------------------------------------------------------------------
.text:000004EA
.text:000004EA loc_4EA:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteByte(uchar)+17j
.text:000004EA                 mov     edx, [ebp+var_4]
.text:000004ED                 movzx   eax, byte ptr [edx+9]
.text:000004F1                 test    eax, eax
.text:000004F3                 jz      short loc_52D
.text:000004F5                 movzx   ecx, [ebp+arg_0]
.text:000004F9                 push    ecx             ; unsigned __int8
.text:000004FA                 mov     ecx, [ebp+var_4]
.text:000004FD                 add     ecx, 18h        ; this
.text:00000500                 call    ?WriteByte@COutBuffer@@QAEXE@Z ; COutBuffer::WriteByte(uchar)
.text:00000505                 movzx   edx, [ebp+arg_0]
.text:00000509                 mov     eax, [ebp+var_4]
.text:0000050C                 xor     edx, [eax+10h]
.text:0000050F                 and     edx, 0FFh
.text:00000515                 mov     ecx, [ebp+var_4]
.text:00000518                 mov     eax, [ecx+10h]
.text:0000051B                 shr     eax, 8
.text:0000051E                 xor     eax, dword ptr ds:_g_CrcTable[edx*4]
.text:00000525                 mov     ecx, [ebp+var_4]
.text:00000528                 mov     [ecx+10h], eax
.text:0000052B                 jmp     short loc_53D
.text:0000052D ; ---------------------------------------------------------------------------
.text:0000052D
.text:0000052D loc_52D:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteByte(uchar)+33j
.text:0000052D                 movzx   edx, [ebp+arg_0]
.text:00000531                 push    edx             ; unsigned __int8
.text:00000532                 mov     ecx, [ebp+var_4]
.text:00000535                 add     ecx, 40h ; '@'  ; this
.text:00000538                 call    ?WriteByte@CWriteBufferLoc@N7z@NArchive@@QAEXE@Z ; NArchive::N7z::CWriteBufferLoc::WriteByte(uchar)
.text:0000053D
.text:0000053D loc_53D:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteByte(uchar)+28j
.text:0000053D                                         ; NArchive::N7z::COutArchive::WriteByte(uchar)+6Bj
.text:0000053D                 add     esp, 4
.text:00000540                 cmp     ebp, esp
.text:00000542                 call    __RTC_CheckEsp
.text:00000547                 mov     esp, ebp
.text:00000549                 pop     ebp
.text:0000054A                 retn    4
.text:0000054A ?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z endp
.text:0000054A
.text:0000054A ; ---------------------------------------------------------------------------
.text:0000054D                 align 10h
.text:00000550
.text:00000550 ; =============== S U B R O U T I N E =======================================
.text:00000550
.text:00000550 ; Attributes: bp-based frame
.text:00000550
.text:00000550 ; void __thiscall NArchive::N7z::COutArchive::WriteUInt32(NArchive::N7z::COutArchive *this, unsigned int)
.text:00000550                 public ?WriteUInt32@COutArchive@N7z@NArchive@@AAEXI@Z
.text:00000550 ?WriteUInt32@COutArchive@N7z@NArchive@@AAEXI@Z proc near
.text:00000550                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteHashDigests(NArchive::N7z::CUInt32DefVector const &)+EDp
.text:00000550                                         ; NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+74Ap
.text:00000550
.text:00000550 var_8           = dword ptr -8
.text:00000550 var_4           = dword ptr -4
.text:00000550 arg_0           = dword ptr  8
.text:00000550
.text:00000550                 push    ebp
.text:00000551                 mov     ebp, esp
.text:00000553                 sub     esp, 8
.text:00000556                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000055D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000564                 mov     [ebp+var_4], ecx
.text:00000567                 mov     [ebp+var_8], 0
.text:0000056E                 jmp     short loc_579
.text:00000570 ; ---------------------------------------------------------------------------
.text:00000570
.text:00000570 loc_570:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteUInt32(uint)+45j
.text:00000570                 mov     eax, [ebp+var_8]
.text:00000573                 add     eax, 1
.text:00000576                 mov     [ebp+var_8], eax
.text:00000579
.text:00000579 loc_579:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteUInt32(uint)+1Ej
.text:00000579                 cmp     [ebp+var_8], 4
.text:0000057D                 jge     short loc_597
.text:0000057F                 movzx   ecx, byte ptr [ebp+arg_0]
.text:00000583                 push    ecx             ; unsigned __int8
.text:00000584                 mov     ecx, [ebp+var_4] ; this
.text:00000587                 call    ?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte(uchar)
.text:0000058C                 mov     edx, [ebp+arg_0]
.text:0000058F                 shr     edx, 8
.text:00000592                 mov     [ebp+arg_0], edx
.text:00000595                 jmp     short loc_570
.text:00000597 ; ---------------------------------------------------------------------------
.text:00000597
.text:00000597 loc_597:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteUInt32(uint)+2Dj
.text:00000597                 add     esp, 8
.text:0000059A                 cmp     ebp, esp
.text:0000059C                 call    __RTC_CheckEsp
.text:000005A1                 mov     esp, ebp
.text:000005A3                 pop     ebp
.text:000005A4                 retn    4
.text:000005A4 ?WriteUInt32@COutArchive@N7z@NArchive@@AAEXI@Z endp
.text:000005A4
.text:000005A4 ; ---------------------------------------------------------------------------
.text:000005A7                 align 10h
.text:000005B0
.text:000005B0 ; =============== S U B R O U T I N E =======================================
.text:000005B0
.text:000005B0 ; Attributes: bp-based frame
.text:000005B0
.text:000005B0 ; void __thiscall NArchive::N7z::COutArchive::WriteUInt64(NArchive::N7z::COutArchive *this, unsigned __int64)
.text:000005B0                 public ?WriteUInt64@COutArchive@N7z@NArchive@@AAEX_K@Z
.text:000005B0 ?WriteUInt64@COutArchive@N7z@NArchive@@AAEX_K@Z proc near
.text:000005B0                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteUInt64DefVector(NArchive::N7z::CUInt64DefVector const &,uchar)+CCp
.text:000005B0
.text:000005B0 var_8           = dword ptr -8
.text:000005B0 var_4           = dword ptr -4
.text:000005B0 arg_0           = qword ptr  8
.text:000005B0
.text:000005B0                 push    ebp
.text:000005B1                 mov     ebp, esp
.text:000005B3                 sub     esp, 8
.text:000005B6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000005BD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000005C4                 mov     [ebp+var_4], ecx
.text:000005C7                 mov     [ebp+var_8], 0
.text:000005CE                 jmp     short loc_5D9
.text:000005D0 ; ---------------------------------------------------------------------------
.text:000005D0
.text:000005D0 loc_5D0:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteUInt64(unsigned __int64)+4Fj
.text:000005D0                 mov     eax, [ebp+var_8]
.text:000005D3                 add     eax, 1
.text:000005D6                 mov     [ebp+var_8], eax
.text:000005D9
.text:000005D9 loc_5D9:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteUInt64(unsigned __int64)+1Ej
.text:000005D9                 cmp     [ebp+var_8], 8
.text:000005DD                 jge     short loc_601
.text:000005DF                 movzx   ecx, byte ptr [ebp+arg_0]
.text:000005E3                 push    ecx             ; unsigned __int8
.text:000005E4                 mov     ecx, [ebp+var_4] ; this
.text:000005E7                 call    ?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte(uchar)
.text:000005EC                 mov     eax, dword ptr [ebp+arg_0]
.text:000005EF                 mov     edx, dword ptr [ebp+arg_0+4]
.text:000005F2                 mov     cl, 8
.text:000005F4                 call    __aullshr
.text:000005F9                 mov     dword ptr [ebp+arg_0], eax
.text:000005FC                 mov     dword ptr [ebp+arg_0+4], edx
.text:000005FF                 jmp     short loc_5D0
.text:00000601 ; ---------------------------------------------------------------------------
.text:00000601
.text:00000601 loc_601:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteUInt64(unsigned __int64)+2Dj
.text:00000601                 add     esp, 8
.text:00000604                 cmp     ebp, esp
.text:00000606                 call    __RTC_CheckEsp
.text:0000060B                 mov     esp, ebp
.text:0000060D                 pop     ebp
.text:0000060E                 retn    8
.text:0000060E ?WriteUInt64@COutArchive@N7z@NArchive@@AAEX_K@Z endp
.text:0000060E
.text:0000060E ; ---------------------------------------------------------------------------
.text:00000611                 align 10h
.text:00000620
.text:00000620 ; =============== S U B R O U T I N E =======================================
.text:00000620
.text:00000620 ; Attributes: bp-based frame
.text:00000620
.text:00000620 ; void __thiscall NArchive::N7z::COutArchive::WriteNumber(NArchive::N7z::COutArchive *this, unsigned __int64)
.text:00000620                 public ?WriteNumber@COutArchive@N7z@NArchive@@AAEX_K@Z
.text:00000620 ?WriteNumber@COutArchive@N7z@NArchive@@AAEX_K@Z proc near
.text:00000620                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteFolder(NArchive::N7z::CFolder const &)+34p
.text:00000620                                         ; NArchive::N7z::COutArchive::WriteFolder(NArchive::N7z::CFolder const &)+181p ...
.text:00000620
.text:00000620 var_14          = dword ptr -14h
.text:00000620 var_10          = dword ptr -10h
.text:00000620 var_C           = dword ptr -0Ch
.text:00000620 var_8           = dword ptr -8
.text:00000620 var_4           = dword ptr -4
.text:00000620 arg_0           = qword ptr  8
.text:00000620
.text:00000620                 push    ebp
.text:00000621                 mov     ebp, esp
.text:00000623                 sub     esp, 14h
.text:00000626                 mov     eax, 0CCCCCCCCh
.text:0000062B                 mov     [ebp+var_14], eax
.text:0000062E                 mov     [ebp+var_10], eax
.text:00000631                 mov     [ebp+var_C], eax
.text:00000634                 mov     [ebp+var_8], eax
.text:00000637                 mov     [ebp+var_4], eax
.text:0000063A                 mov     [ebp+var_4], ecx
.text:0000063D                 mov     byte ptr [ebp+var_8+3], 0
.text:00000641                 mov     byte ptr [ebp+var_8+2], 80h ; 'Ç'
.text:00000645                 mov     [ebp+var_C], 0
.text:0000064C                 jmp     short loc_657
.text:0000064E ; ---------------------------------------------------------------------------
.text:0000064E
.text:0000064E loc_64E:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteNumber(unsigned __int64)+9Ej
.text:0000064E                 mov     eax, [ebp+var_C]
.text:00000651                 add     eax, 1
.text:00000654                 mov     [ebp+var_C], eax
.text:00000657
.text:00000657 loc_657:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteNumber(unsigned __int64)+2Cj
.text:00000657                 cmp     [ebp+var_C], 8
.text:0000065B                 jge     short loc_6C0
.text:0000065D                 mov     ecx, [ebp+var_C]
.text:00000660                 add     ecx, 1
.text:00000663                 imul    ecx, 7
.text:00000666                 mov     eax, 1
.text:0000066B                 xor     edx, edx
.text:0000066D                 call    __allshl
.text:00000672                 mov     [ebp+var_14], eax
.text:00000675                 mov     [ebp+var_10], edx
.text:00000678                 mov     ecx, dword ptr [ebp+arg_0+4]
.text:0000067B                 cmp     ecx, [ebp+var_10]
.text:0000067E                 ja      short loc_6A9
.text:00000680                 jb      short loc_68A
.text:00000682                 mov     edx, dword ptr [ebp+arg_0]
.text:00000685                 cmp     edx, [ebp+var_14]
.text:00000688                 jnb     short loc_6A9
.text:0000068A
.text:0000068A loc_68A:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteNumber(unsigned __int64)+60j
.text:0000068A                 mov     ecx, [ebp+var_C]
.text:0000068D                 shl     ecx, 3
.text:00000690                 mov     eax, dword ptr [ebp+arg_0]
.text:00000693                 mov     edx, dword ptr [ebp+arg_0+4]
.text:00000696                 call    __aullshr
.text:0000069B                 movzx   eax, al
.text:0000069E                 movzx   ecx, byte ptr [ebp+var_8+3]
.text:000006A2                 or      ecx, eax
.text:000006A4                 mov     byte ptr [ebp+var_8+3], cl
.text:000006A7                 jmp     short loc_6C0
.text:000006A9 ; ---------------------------------------------------------------------------
.text:000006A9
.text:000006A9 loc_6A9:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteNumber(unsigned __int64)+5Ej
.text:000006A9                                         ; NArchive::N7z::COutArchive::WriteNumber(unsigned __int64)+68j
.text:000006A9                 movzx   edx, byte ptr [ebp+var_8+2]
.text:000006AD                 movzx   eax, byte ptr [ebp+var_8+3]
.text:000006B1                 or      eax, edx
.text:000006B3                 mov     byte ptr [ebp+var_8+3], al
.text:000006B6                 mov     cl, byte ptr [ebp+var_8+2]
.text:000006B9                 shr     cl, 1
.text:000006BB                 mov     byte ptr [ebp+var_8+2], cl
.text:000006BE                 jmp     short loc_64E
.text:000006C0 ; ---------------------------------------------------------------------------
.text:000006C0
.text:000006C0 loc_6C0:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteNumber(unsigned __int64)+3Bj
.text:000006C0                                         ; NArchive::N7z::COutArchive::WriteNumber(unsigned __int64)+87j
.text:000006C0                 movzx   edx, byte ptr [ebp+var_8+3]
.text:000006C4                 push    edx             ; unsigned __int8
.text:000006C5                 mov     ecx, [ebp+var_4] ; this
.text:000006C8                 call    ?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte(uchar)
.text:000006CD                 jmp     short loc_6D8
.text:000006CF ; ---------------------------------------------------------------------------
.text:000006CF
.text:000006CF loc_6CF:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteNumber(unsigned __int64)+DEj
.text:000006CF                 mov     eax, [ebp+var_C]
.text:000006D2                 sub     eax, 1
.text:000006D5                 mov     [ebp+var_C], eax
.text:000006D8
.text:000006D8 loc_6D8:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteNumber(unsigned __int64)+ADj
.text:000006D8                 cmp     [ebp+var_C], 0
.text:000006DC                 jle     short loc_700
.text:000006DE                 movzx   ecx, byte ptr [ebp+arg_0]
.text:000006E2                 push    ecx             ; unsigned __int8
.text:000006E3                 mov     ecx, [ebp+var_4] ; this
.text:000006E6                 call    ?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte(uchar)
.text:000006EB                 mov     eax, dword ptr [ebp+arg_0]
.text:000006EE                 mov     edx, dword ptr [ebp+arg_0+4]
.text:000006F1                 mov     cl, 8
.text:000006F3                 call    __aullshr
.text:000006F8                 mov     dword ptr [ebp+arg_0], eax
.text:000006FB                 mov     dword ptr [ebp+arg_0+4], edx
.text:000006FE                 jmp     short loc_6CF
.text:00000700 ; ---------------------------------------------------------------------------
.text:00000700
.text:00000700 loc_700:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteNumber(unsigned __int64)+BCj
.text:00000700                 add     esp, 14h
.text:00000703                 cmp     ebp, esp
.text:00000705                 call    __RTC_CheckEsp
.text:0000070A                 mov     esp, ebp
.text:0000070C                 pop     ebp
.text:0000070D                 retn    8
.text:0000070D ?WriteNumber@COutArchive@N7z@NArchive@@AAEX_K@Z endp
.text:0000070D
.text:00000710
.text:00000710 ; =============== S U B R O U T I N E =======================================
.text:00000710
.text:00000710 ; Attributes: bp-based frame
.text:00000710
.text:00000710 ; void __thiscall NArchive::N7z::COutArchive::WriteFolder(NArchive::N7z::COutArchive *this, const struct NArchive::N7z::CFolder *)
.text:00000710                 public ?WriteFolder@COutArchive@N7z@NArchive@@AAEXABUCFolder@23@@Z
.text:00000710 ?WriteFolder@COutArchive@N7z@NArchive@@AAEXABUCFolder@23@@Z proc near
.text:00000710                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteUnpackInfo(CObjectVector<NArchive::N7z::CFolder> const &,NArchive::N7z::COutFolders const &)+93p
.text:00000710
.text:00000710 var_4C          = dword ptr -4Ch
.text:00000710 var_48          = dword ptr -48h
.text:00000710 var_44          = dword ptr -44h
.text:00000710 var_40          = qword ptr -40h
.text:00000710 var_38          = dword ptr -38h
.text:00000710 Src             = byte ptr -30h
.text:00000710 var_1C          = dword ptr -1Ch
.text:00000710 var_18          = dword ptr -18h
.text:00000710 var_14          = dword ptr -14h
.text:00000710 var_10          = dword ptr -10h
.text:00000710 var_C           = dword ptr -0Ch
.text:00000710 var_8           = dword ptr -8
.text:00000710 var_4           = dword ptr -4
.text:00000710 arg_0           = dword ptr  8
.text:00000710
.text:00000710                 push    ebp
.text:00000711                 mov     ebp, esp
.text:00000713                 sub     esp, 4Ch
.text:00000716                 push    edi
.text:00000717                 push    ecx
.text:00000718                 lea     edi, [ebp+var_4C]
.text:0000071B                 mov     ecx, 13h
.text:00000720                 mov     eax, 0CCCCCCCCh
.text:00000725                 rep stosd
.text:00000727                 pop     ecx
.text:00000728                 mov     eax, dword ptr ds:___security_cookie
.text:0000072D                 xor     eax, ebp
.text:0000072F                 mov     [ebp+var_4], eax
.text:00000732                 mov     [ebp+var_8], ecx
.text:00000735                 mov     ecx, [ebp+arg_0]
.text:00000738                 call    ?Size@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEIXZ ; CObjArray2<NArchive::N7z::CCoderInfo>::Size(void)
.text:0000073D                 xor     ecx, ecx
.text:0000073F                 push    ecx
.text:00000740                 push    eax             ; unsigned __int64
.text:00000741                 mov     ecx, [ebp+var_8] ; this
.text:00000744                 call    ?WriteNumber@COutArchive@N7z@NArchive@@AAEX_K@Z ; NArchive::N7z::COutArchive::WriteNumber(unsigned __int64)
.text:00000749                 mov     [ebp+var_C], 0
.text:00000750                 jmp     short loc_75B
.text:00000752 ; ---------------------------------------------------------------------------
.text:00000752
.text:00000752 loc_752:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteFolder(NArchive::N7z::CFolder const &)+198j
.text:00000752                                         ; NArchive::N7z::COutArchive::WriteFolder(NArchive::N7z::CFolder const &)+1C4j
.text:00000752                 mov     edx, [ebp+var_C]
.text:00000755                 add     edx, 1
.text:00000758                 mov     [ebp+var_C], edx
.text:0000075B
.text:0000075B loc_75B:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteFolder(NArchive::N7z::CFolder const &)+40j
.text:0000075B                 mov     ecx, [ebp+arg_0]
.text:0000075E                 call    ?Size@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEIXZ ; CObjArray2<NArchive::N7z::CCoderInfo>::Size(void)
.text:00000763                 cmp     [ebp+var_C], eax
.text:00000766                 jnb     loc_8D9
.text:0000076C                 mov     ecx, [ebp+arg_0]
.text:0000076F                 call    ??B?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEPBUCCoderInfo@N7z@NArchive@@XZ ; CObjArray2<NArchive::N7z::CCoderInfo>::operator NArchive::N7z::CCoderInfo const *(void)
.text:00000774                 mov     ecx, [ebp+var_C]
.text:00000777                 imul    ecx, 18h
.text:0000077A                 add     eax, ecx
.text:0000077C                 mov     [ebp+var_10], eax
.text:0000077F                 mov     edx, [ebp+var_10]
.text:00000782                 mov     eax, [edx]
.text:00000784                 mov     [ebp+var_18], eax
.text:00000787                 mov     ecx, [edx+4]
.text:0000078A                 mov     [ebp+var_14], ecx
.text:0000078D                 mov     [ebp+var_1C], 1
.text:00000794                 jmp     short loc_79F
.text:00000796 ; ---------------------------------------------------------------------------
.text:00000796
.text:00000796 loc_796:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteFolder(NArchive::N7z::CFolder const &):loc_7C6j
.text:00000796                 mov     edx, [ebp+var_1C]
.text:00000799                 add     edx, 1
.text:0000079C                 mov     [ebp+var_1C], edx
.text:0000079F
.text:0000079F loc_79F:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteFolder(NArchive::N7z::CFolder const &)+84j
.text:0000079F                 cmp     [ebp+var_1C], 8
.text:000007A3                 jnb     short loc_7C8
.text:000007A5                 mov     ecx, [ebp+var_1C]
.text:000007A8                 shl     ecx, 3
.text:000007AB                 mov     eax, [ebp+var_18]
.text:000007AE                 mov     edx, [ebp+var_14]
.text:000007B1                 call    __aullshr
.text:000007B6                 mov     [ebp+var_4C], eax
.text:000007B9                 mov     [ebp+var_48], edx
.text:000007BC                 mov     eax, [ebp+var_4C]
.text:000007BF                 or      eax, [ebp+var_48]
.text:000007C2                 jnz     short loc_7C6
.text:000007C4                 jmp     short loc_7C8
.text:000007C6 ; ---------------------------------------------------------------------------
.text:000007C6
.text:000007C6 loc_7C6:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteFolder(NArchive::N7z::CFolder const &)+B2j
.text:000007C6                 jmp     short loc_796
.text:000007C8 ; ---------------------------------------------------------------------------
.text:000007C8
.text:000007C8 loc_7C8:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteFolder(NArchive::N7z::CFolder const &)+93j
.text:000007C8                                         ; NArchive::N7z::COutArchive::WriteFolder(NArchive::N7z::CFolder const &)+B4j
.text:000007C8                 mov     ecx, [ebp+var_1C]
.text:000007CB                 and     ecx, 0Fh
.text:000007CE                 mov     [ebp+var_1C], ecx
.text:000007D1                 mov     edx, [ebp+var_1C]
.text:000007D4                 mov     [ebp+var_38], edx
.text:000007D7                 jmp     short loc_7F5
.text:000007D9 ; ---------------------------------------------------------------------------
.text:000007D9
.text:000007D9 loc_7D9:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteFolder(NArchive::N7z::CFolder const &)+101j
.text:000007D9                 mov     eax, [ebp+var_38]
.text:000007DC                 sub     eax, 1
.text:000007DF                 mov     [ebp+var_38], eax
.text:000007E2                 mov     eax, [ebp+var_18]
.text:000007E5                 mov     edx, [ebp+var_14]
.text:000007E8                 mov     cl, 8
.text:000007EA                 call    __aullshr
.text:000007EF                 mov     [ebp+var_18], eax
.text:000007F2                 mov     [ebp+var_14], edx
.text:000007F5
.text:000007F5 loc_7F5:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteFolder(NArchive::N7z::CFolder const &)+C7j
.text:000007F5                 cmp     [ebp+var_38], 0
.text:000007F9                 jz      short loc_813
.text:000007FB                 mov     ecx, [ebp+var_18]
.text:000007FE                 and     ecx, 0FFh
.text:00000804                 mov     edx, [ebp+var_14]
.text:00000807                 and     edx, 0
.text:0000080A                 mov     eax, [ebp+var_38]
.text:0000080D                 mov     [ebp+eax+Src], cl
.text:00000811                 jmp     short loc_7D9
.text:00000813 ; ---------------------------------------------------------------------------
.text:00000813
.text:00000813 loc_813:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteFolder(NArchive::N7z::CFolder const &)+E9j
.text:00000813                 mov     cl, byte ptr [ebp+var_1C]
.text:00000816                 mov     byte ptr [ebp+var_40+7], cl
.text:00000819                 mov     ecx, [ebp+var_10] ; this
.text:0000081C                 call    ?IsSimpleCoder@CCoderInfo@N7z@NArchive@@QBE_NXZ ; NArchive::N7z::CCoderInfo::IsSimpleCoder(void)
.text:00000821                 movzx   edx, al
.text:00000824                 neg     edx
.text:00000826                 sbb     edx, edx
.text:00000828                 add     edx, 1
.text:0000082B                 mov     byte ptr [ebp+var_40+6], dl
.text:0000082E                 movzx   eax, byte ptr [ebp+var_40+6]
.text:00000832                 neg     eax
.text:00000834                 sbb     eax, eax
.text:00000836                 and     eax, 10h
.text:00000839                 movzx   ecx, byte ptr [ebp+var_40+7]
.text:0000083D                 or      ecx, eax
.text:0000083F                 mov     byte ptr [ebp+var_40+7], cl
.text:00000842                 mov     ecx, [ebp+var_10]
.text:00000845                 add     ecx, 8
.text:00000848                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:0000084D                 mov     dword ptr [ebp+var_40], eax
.text:00000850                 mov     edx, dword ptr [ebp+var_40]
.text:00000853                 neg     edx
.text:00000855                 sbb     edx, edx
.text:00000857                 and     edx, 20h
.text:0000085A                 movzx   eax, byte ptr [ebp+var_40+7]
.text:0000085E                 or      eax, edx
.text:00000860                 mov     byte ptr [ebp+var_40+7], al
.text:00000863                 mov     cl, byte ptr [ebp+var_40+7]
.text:00000866                 mov     [ebp+Src], cl
.text:00000869                 mov     edx, [ebp+var_1C]
.text:0000086C                 add     edx, 1
.text:0000086F                 push    edx             ; unsigned int
.text:00000870                 lea     eax, [ebp+Src]
.text:00000873                 push    eax             ; Src
.text:00000874                 mov     ecx, [ebp+var_8] ; this
.text:00000877                 call    ?WriteBytes@COutArchive@N7z@NArchive@@AAEXPBXI@Z ; NArchive::N7z::COutArchive::WriteBytes(void const *,uint)
.text:0000087C                 movzx   ecx, byte ptr [ebp+var_40+6]
.text:00000880                 test    ecx, ecx
.text:00000882                 jz      short loc_8A2
.text:00000884                 mov     edx, [ebp+var_10]
.text:00000887                 mov     eax, [edx+10h]
.text:0000088A                 xor     ecx, ecx
.text:0000088C                 push    ecx
.text:0000088D                 push    eax             ; unsigned __int64
.text:0000088E                 mov     ecx, [ebp+var_8] ; this
.text:00000891                 call    ?WriteNumber@COutArchive@N7z@NArchive@@AAEX_K@Z ; NArchive::N7z::COutArchive::WriteNumber(unsigned __int64)
.text:00000896                 push    0
.text:00000898                 push    1               ; unsigned __int64
.text:0000089A                 mov     ecx, [ebp+var_8] ; this
.text:0000089D                 call    ?WriteNumber@COutArchive@N7z@NArchive@@AAEX_K@Z ; NArchive::N7z::COutArchive::WriteNumber(unsigned __int64)
.text:000008A2
.text:000008A2 loc_8A2:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteFolder(NArchive::N7z::CFolder const &)+172j
.text:000008A2                 cmp     dword ptr [ebp+var_40], 0
.text:000008A6                 jnz     short loc_8AD
.text:000008A8                 jmp     loc_752
.text:000008AD ; ---------------------------------------------------------------------------
.text:000008AD
.text:000008AD loc_8AD:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteFolder(NArchive::N7z::CFolder const &)+196j
.text:000008AD                 mov     edx, dword ptr [ebp+var_40]
.text:000008B0                 xor     eax, eax
.text:000008B2                 push    eax
.text:000008B3                 push    edx             ; unsigned __int64
.text:000008B4                 mov     ecx, [ebp+var_8] ; this
.text:000008B7                 call    ?WriteNumber@COutArchive@N7z@NArchive@@AAEX_K@Z ; NArchive::N7z::COutArchive::WriteNumber(unsigned __int64)
.text:000008BC                 mov     ecx, dword ptr [ebp+var_40]
.text:000008BF                 push    ecx             ; unsigned int
.text:000008C0                 mov     ecx, [ebp+var_10]
.text:000008C3                 add     ecx, 8
.text:000008C6                 call    ??B?$CBuffer@E@@QBEPBEXZ ; CBuffer<uchar>::operator uchar const *(void)
.text:000008CB                 push    eax             ; Src
.text:000008CC                 mov     ecx, [ebp+var_8] ; this
.text:000008CF                 call    ?WriteBytes@COutArchive@N7z@NArchive@@AAEXPBXI@Z ; NArchive::N7z::COutArchive::WriteBytes(void const *,uint)
.text:000008D4                 jmp     loc_752
.text:000008D9 ; ---------------------------------------------------------------------------
.text:000008D9
.text:000008D9 loc_8D9:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteFolder(NArchive::N7z::CFolder const &)+56j
.text:000008D9                 mov     [ebp+var_C], 0
.text:000008E0                 jmp     short loc_8EB
.text:000008E2 ; ---------------------------------------------------------------------------
.text:000008E2
.text:000008E2 loc_8E2:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteFolder(NArchive::N7z::CFolder const &)+222j
.text:000008E2                 mov     edx, [ebp+var_C]
.text:000008E5                 add     edx, 1
.text:000008E8                 mov     [ebp+var_C], edx
.text:000008EB
.text:000008EB loc_8EB:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteFolder(NArchive::N7z::CFolder const &)+1D0j
.text:000008EB                 mov     ecx, [ebp+arg_0]
.text:000008EE                 add     ecx, 8
.text:000008F1                 call    ?Size@?$CObjArray2@UCBond@N7z@NArchive@@@@QBEIXZ ; CObjArray2<NArchive::N7z::CBond>::Size(void)
.text:000008F6                 cmp     [ebp+var_C], eax
.text:000008F9                 jnb     short loc_934
.text:000008FB                 mov     ecx, [ebp+arg_0]
.text:000008FE                 add     ecx, 8
.text:00000901                 call    ??B?$CObjArray2@UCBond@N7z@NArchive@@@@QBEPBUCBond@N7z@NArchive@@XZ ; CObjArray2<NArchive::N7z::CBond>::operator NArchive::N7z::CBond const *(void)
.text:00000906                 mov     ecx, [ebp+var_C]
.text:00000909                 lea     edx, [eax+ecx*8]
.text:0000090C                 mov     [ebp+var_44], edx
.text:0000090F                 mov     eax, [ebp+var_44]
.text:00000912                 mov     ecx, [eax]
.text:00000914                 xor     edx, edx
.text:00000916                 push    edx
.text:00000917                 push    ecx             ; unsigned __int64
.text:00000918                 mov     ecx, [ebp+var_8] ; this
.text:0000091B                 call    ?WriteNumber@COutArchive@N7z@NArchive@@AAEX_K@Z ; NArchive::N7z::COutArchive::WriteNumber(unsigned __int64)
.text:00000920                 mov     eax, [ebp+var_44]
.text:00000923                 mov     ecx, [eax+4]
.text:00000926                 xor     edx, edx
.text:00000928                 push    edx
.text:00000929                 push    ecx             ; unsigned __int64
.text:0000092A                 mov     ecx, [ebp+var_8] ; this
.text:0000092D                 call    ?WriteNumber@COutArchive@N7z@NArchive@@AAEX_K@Z ; NArchive::N7z::COutArchive::WriteNumber(unsigned __int64)
.text:00000932                 jmp     short loc_8E2
.text:00000934 ; ---------------------------------------------------------------------------
.text:00000934
.text:00000934 loc_934:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteFolder(NArchive::N7z::CFolder const &)+1E9j
.text:00000934                 mov     ecx, [ebp+arg_0]
.text:00000937                 add     ecx, 10h
.text:0000093A                 call    ?Size@?$CObjArray2@I@@QBEIXZ ; CObjArray2<uint>::Size(void)
.text:0000093F                 cmp     eax, 1
.text:00000942                 jbe     short loc_985
.text:00000944                 mov     [ebp+var_C], 0
.text:0000094B                 jmp     short loc_956
.text:0000094D ; ---------------------------------------------------------------------------
.text:0000094D
.text:0000094D loc_94D:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteFolder(NArchive::N7z::CFolder const &)+273j
.text:0000094D                 mov     eax, [ebp+var_C]
.text:00000950                 add     eax, 1
.text:00000953                 mov     [ebp+var_C], eax
.text:00000956
.text:00000956 loc_956:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteFolder(NArchive::N7z::CFolder const &)+23Bj
.text:00000956                 mov     ecx, [ebp+arg_0]
.text:00000959                 add     ecx, 10h
.text:0000095C                 call    ?Size@?$CObjArray2@I@@QBEIXZ ; CObjArray2<uint>::Size(void)
.text:00000961                 cmp     [ebp+var_C], eax
.text:00000964                 jnb     short loc_985
.text:00000966                 mov     ecx, [ebp+arg_0]
.text:00000969                 add     ecx, 10h
.text:0000096C                 call    ??B?$CObjArray2@I@@QBEPBIXZ ; CObjArray2<uint>::operator uint const *(void)
.text:00000971                 mov     ecx, [ebp+var_C]
.text:00000974                 mov     edx, [eax+ecx*4]
.text:00000977                 xor     eax, eax
.text:00000979                 push    eax
.text:0000097A                 push    edx             ; unsigned __int64
.text:0000097B                 mov     ecx, [ebp+var_8] ; this
.text:0000097E                 call    ?WriteNumber@COutArchive@N7z@NArchive@@AAEX_K@Z ; NArchive::N7z::COutArchive::WriteNumber(unsigned __int64)
.text:00000983                 jmp     short loc_94D
.text:00000985 ; ---------------------------------------------------------------------------
.text:00000985
.text:00000985 loc_985:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteFolder(NArchive::N7z::CFolder const &)+232j
.text:00000985                                         ; NArchive::N7z::COutArchive::WriteFolder(NArchive::N7z::CFolder const &)+254j
.text:00000985                 push    edx
.text:00000986                 mov     ecx, ebp
.text:00000988                 push    eax
.text:00000989                 lea     edx, $LN24
.text:0000098F                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000994                 pop     eax
.text:00000995                 pop     edx
.text:00000996                 pop     edi
.text:00000997                 mov     ecx, [ebp+var_4]
.text:0000099A                 xor     ecx, ebp
.text:0000099C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000009A1                 add     esp, 4Ch
.text:000009A4                 cmp     ebp, esp
.text:000009A6                 call    __RTC_CheckEsp
.text:000009AB                 mov     esp, ebp
.text:000009AD                 pop     ebp
.text:000009AE                 retn    4
.text:000009AE ?WriteFolder@COutArchive@N7z@NArchive@@AAEXABUCFolder@23@@Z endp
.text:000009AE
.text:000009AE ; ---------------------------------------------------------------------------
.text:000009B1                 align 4
.text:000009B4 $LN24           dd 1                    ; DATA XREF: NArchive::N7z::COutArchive::WriteFolder(NArchive::N7z::CFolder const &)+279o
.text:000009B8                 dd offset $LN23
.text:000009BC $LN23           dd 0FFFFFFD0h, 10h      ; DATA XREF: .text:000009B8o
.text:000009C4                 dd offset $LN22         ; "temp"
.text:000009C8 $LN22           db 'temp',0             ; DATA XREF: .text:000009C4o
.text:000009CD                 align 10h
.text:000009D0
.text:000009D0 ; =============== S U B R O U T I N E =======================================
.text:000009D0
.text:000009D0 ; Attributes: bp-based frame
.text:000009D0
.text:000009D0 ; private: void __thiscall NArchive::N7z::COutArchive::WriteBoolVector(class CRecordVector<bool> const &)
.text:000009D0                 public ?WriteBoolVector@COutArchive@N7z@NArchive@@AAEXABV?$CRecordVector@_N@@@Z
.text:000009D0 ?WriteBoolVector@COutArchive@N7z@NArchive@@AAEXABV?$CRecordVector@_N@@@Z proc near
.text:000009D0                                         ; CODE XREF: NArchive::N7z::COutArchive::WritePropBoolVector(uchar,CRecordVector<bool> const &)+37p
.text:000009D0                                         ; NArchive::N7z::COutArchive::WriteHashDigests(NArchive::N7z::CUInt32DefVector const &)+A1p ...
.text:000009D0
.text:000009D0 var_C           = dword ptr -0Ch
.text:000009D0 var_8           = dword ptr -8
.text:000009D0 var_4           = dword ptr -4
.text:000009D0 arg_0           = dword ptr  8
.text:000009D0
.text:000009D0                 push    ebp
.text:000009D1                 mov     ebp, esp
.text:000009D3                 sub     esp, 0Ch
.text:000009D6                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000009DD                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000009E4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000009EB                 mov     [ebp+var_4], ecx
.text:000009EE                 mov     byte ptr [ebp+var_8+3], 0
.text:000009F2                 mov     byte ptr [ebp+var_8+2], 80h ; 'Ç'
.text:000009F6                 mov     [ebp+var_C], 0
.text:000009FD                 jmp     short loc_A08
.text:000009FF ; ---------------------------------------------------------------------------
.text:000009FF
.text:000009FF loc_9FF:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteBoolVector(CRecordVector<bool> const &):loc_A5Aj
.text:000009FF                 mov     eax, [ebp+var_C]
.text:00000A02                 add     eax, 1
.text:00000A05                 mov     [ebp+var_C], eax
.text:00000A08
.text:00000A08 loc_A08:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteBoolVector(CRecordVector<bool> const &)+2Dj
.text:00000A08                 mov     ecx, [ebp+arg_0]
.text:00000A0B                 call    ?Size@?$CRecordVector@_N@@QBEIXZ ; CRecordVector<bool>::Size(void)
.text:00000A10                 cmp     [ebp+var_C], eax
.text:00000A13                 jnb     short loc_A5C
.text:00000A15                 mov     ecx, [ebp+var_C]
.text:00000A18                 push    ecx
.text:00000A19                 mov     ecx, [ebp+arg_0]
.text:00000A1C                 call    ??A?$CRecordVector@_N@@QBEAB_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:00000A21                 movzx   edx, byte ptr [eax]
.text:00000A24                 test    edx, edx
.text:00000A26                 jz      short loc_A35
.text:00000A28                 movzx   eax, byte ptr [ebp+var_8+2]
.text:00000A2C                 movzx   ecx, byte ptr [ebp+var_8+3]
.text:00000A30                 or      ecx, eax
.text:00000A32                 mov     byte ptr [ebp+var_8+3], cl
.text:00000A35
.text:00000A35 loc_A35:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteBoolVector(CRecordVector<bool> const &)+56j
.text:00000A35                 mov     dl, byte ptr [ebp+var_8+2]
.text:00000A38                 shr     dl, 1
.text:00000A3A                 mov     byte ptr [ebp+var_8+2], dl
.text:00000A3D                 movzx   eax, byte ptr [ebp+var_8+2]
.text:00000A41                 test    eax, eax
.text:00000A43                 jnz     short loc_A5A
.text:00000A45                 movzx   ecx, byte ptr [ebp+var_8+3]
.text:00000A49                 push    ecx             ; unsigned __int8
.text:00000A4A                 mov     ecx, [ebp+var_4] ; this
.text:00000A4D                 call    ?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte(uchar)
.text:00000A52                 mov     byte ptr [ebp+var_8+2], 80h ; 'Ç'
.text:00000A56                 mov     byte ptr [ebp+var_8+3], 0
.text:00000A5A
.text:00000A5A loc_A5A:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteBoolVector(CRecordVector<bool> const &)+73j
.text:00000A5A                 jmp     short loc_9FF
.text:00000A5C ; ---------------------------------------------------------------------------
.text:00000A5C
.text:00000A5C loc_A5C:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteBoolVector(CRecordVector<bool> const &)+43j
.text:00000A5C                 movzx   edx, byte ptr [ebp+var_8+2]
.text:00000A60                 cmp     edx, 80h ; 'Ç'
.text:00000A66                 jz      short loc_A75
.text:00000A68                 movzx   eax, byte ptr [ebp+var_8+3]
.text:00000A6C                 push    eax             ; unsigned __int8
.text:00000A6D                 mov     ecx, [ebp+var_4] ; this
.text:00000A70                 call    ?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte(uchar)
.text:00000A75
.text:00000A75 loc_A75:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteBoolVector(CRecordVector<bool> const &)+96j
.text:00000A75                 add     esp, 0Ch
.text:00000A78                 cmp     ebp, esp
.text:00000A7A                 call    __RTC_CheckEsp
.text:00000A7F                 mov     esp, ebp
.text:00000A81                 pop     ebp
.text:00000A82                 retn    4
.text:00000A82 ?WriteBoolVector@COutArchive@N7z@NArchive@@AAEXABV?$CRecordVector@_N@@@Z endp
.text:00000A82
.text:00000A82 ; ---------------------------------------------------------------------------
.text:00000A85                 align 10h
.text:00000A90
.text:00000A90 ; =============== S U B R O U T I N E =======================================
.text:00000A90
.text:00000A90 ; Attributes: bp-based frame
.text:00000A90
.text:00000A90 ; private: void __thiscall NArchive::N7z::COutArchive::WritePropBoolVector(unsigned char, class CRecordVector<bool> const &)
.text:00000A90                 public ?WritePropBoolVector@COutArchive@N7z@NArchive@@AAEXEABV?$CRecordVector@_N@@@Z
.text:00000A90 ?WritePropBoolVector@COutArchive@N7z@NArchive@@AAEXEABV?$CRecordVector@_N@@@Z proc near
.text:00000A90                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+2AEp
.text:00000A90                                         ; NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+3E9p ...
.text:00000A90
.text:00000A90 var_4           = dword ptr -4
.text:00000A90 arg_0           = byte ptr  8
.text:00000A90 arg_4           = dword ptr  0Ch
.text:00000A90
.text:00000A90                 push    ebp
.text:00000A91                 mov     ebp, esp
.text:00000A93                 push    ecx
.text:00000A94                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000A9B                 mov     [ebp+var_4], ecx
.text:00000A9E                 movzx   eax, [ebp+arg_0]
.text:00000AA2                 push    eax             ; unsigned __int8
.text:00000AA3                 mov     ecx, [ebp+var_4] ; this
.text:00000AA6                 call    ?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte(uchar)
.text:00000AAB                 mov     ecx, [ebp+arg_4]
.text:00000AAE                 push    ecx
.text:00000AAF                 call    ?Bv_GetSizeInBytes@N7z@NArchive@@YGIABV?$CRecordVector@_N@@@Z ; NArchive::N7z::Bv_GetSizeInBytes(CRecordVector<bool> const &)
.text:00000AB4                 xor     edx, edx
.text:00000AB6                 push    edx
.text:00000AB7                 push    eax             ; unsigned __int64
.text:00000AB8                 mov     ecx, [ebp+var_4] ; this
.text:00000ABB                 call    ?WriteNumber@COutArchive@N7z@NArchive@@AAEX_K@Z ; NArchive::N7z::COutArchive::WriteNumber(unsigned __int64)
.text:00000AC0                 mov     eax, [ebp+arg_4]
.text:00000AC3                 push    eax
.text:00000AC4                 mov     ecx, [ebp+var_4]
.text:00000AC7                 call    ?WriteBoolVector@COutArchive@N7z@NArchive@@AAEXABV?$CRecordVector@_N@@@Z ; NArchive::N7z::COutArchive::WriteBoolVector(CRecordVector<bool> const &)
.text:00000ACC                 add     esp, 4
.text:00000ACF                 cmp     ebp, esp
.text:00000AD1                 call    __RTC_CheckEsp
.text:00000AD6                 mov     esp, ebp
.text:00000AD8                 pop     ebp
.text:00000AD9                 retn    8
.text:00000AD9 ?WritePropBoolVector@COutArchive@N7z@NArchive@@AAEXEABV?$CRecordVector@_N@@@Z endp
.text:00000AD9
.text:00000AD9 ; ---------------------------------------------------------------------------
.text:00000ADC                 align 10h
.text:00000AE0
.text:00000AE0 ; =============== S U B R O U T I N E =======================================
.text:00000AE0
.text:00000AE0 ; Attributes: bp-based frame
.text:00000AE0
.text:00000AE0 ; unsigned int __stdcall NArchive::N7z::Bv_GetSizeInBytes(class CRecordVector<bool> const &)
.text:00000AE0 ?Bv_GetSizeInBytes@N7z@NArchive@@YGIABV?$CRecordVector@_N@@@Z proc near
.text:00000AE0                                         ; CODE XREF: NArchive::N7z::COutArchive::WritePropBoolVector(uchar,CRecordVector<bool> const &)+1Fp
.text:00000AE0                                         ; NArchive::N7z::COutArchive::WriteAlignedBoolHeader(CRecordVector<bool> const &,uint,uchar,uint)+38p
.text:00000AE0
.text:00000AE0 arg_0           = dword ptr  8
.text:00000AE0
.text:00000AE0                 push    ebp
.text:00000AE1                 mov     ebp, esp
.text:00000AE3                 mov     ecx, [ebp+arg_0]
.text:00000AE6                 call    ?Size@?$CRecordVector@_N@@QBEIXZ ; CRecordVector<bool>::Size(void)
.text:00000AEB                 add     eax, 7
.text:00000AEE                 shr     eax, 3
.text:00000AF1                 cmp     ebp, esp
.text:00000AF3                 call    __RTC_CheckEsp
.text:00000AF8                 pop     ebp
.text:00000AF9                 retn    4
.text:00000AF9 ?Bv_GetSizeInBytes@N7z@NArchive@@YGIABV?$CRecordVector@_N@@@Z endp
.text:00000AF9
.text:00000AF9 ; ---------------------------------------------------------------------------
.text:00000AFC                 align 10h
.text:00000B00
.text:00000B00 ; =============== S U B R O U T I N E =======================================
.text:00000B00
.text:00000B00 ; Attributes: bp-based frame
.text:00000B00
.text:00000B00 ; void __thiscall NArchive::N7z::COutArchive::WriteHashDigests(NArchive::N7z::COutArchive *this, const struct NArchive::N7z::CUInt32DefVector *)
.text:00000B00                 public ?WriteHashDigests@COutArchive@N7z@NArchive@@AAEXABUCUInt32DefVector@23@@Z
.text:00000B00 ?WriteHashDigests@COutArchive@N7z@NArchive@@AAEXABUCUInt32DefVector@23@@Z proc near
.text:00000B00                                         ; CODE XREF: NArchive::N7z::COutArchive::WritePackInfo(unsigned __int64,CRecordVector<unsigned __int64> const &,NArchive::N7z::CUInt32DefVector const &)+A6p
.text:00000B00                                         ; NArchive::N7z::COutArchive::WriteUnpackInfo(CObjectVector<NArchive::N7z::CFolder> const &,NArchive::N7z::COutFolders const &)+EDp ...
.text:00000B00
.text:00000B00 var_C           = dword ptr -0Ch
.text:00000B00 var_8           = dword ptr -8
.text:00000B00 var_4           = dword ptr -4
.text:00000B00 arg_0           = dword ptr  8
.text:00000B00
.text:00000B00                 push    ebp
.text:00000B01                 mov     ebp, esp
.text:00000B03                 sub     esp, 0Ch
.text:00000B06                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00000B0D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000B14                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000B1B                 mov     [ebp+var_4], ecx
.text:00000B1E                 mov     [ebp+var_8], 0
.text:00000B25                 mov     [ebp+var_C], 0
.text:00000B2C                 jmp     short loc_B37
.text:00000B2E ; ---------------------------------------------------------------------------
.text:00000B2E
.text:00000B2E loc_B2E:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteHashDigests(NArchive::N7z::CUInt32DefVector const &):loc_B60j
.text:00000B2E                 mov     eax, [ebp+var_C]
.text:00000B31                 add     eax, 1
.text:00000B34                 mov     [ebp+var_C], eax
.text:00000B37
.text:00000B37 loc_B37:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteHashDigests(NArchive::N7z::CUInt32DefVector const &)+2Cj
.text:00000B37                 mov     ecx, [ebp+arg_0]
.text:00000B3A                 call    ?Size@?$CRecordVector@_N@@QBEIXZ ; CRecordVector<bool>::Size(void)
.text:00000B3F                 cmp     [ebp+var_C], eax
.text:00000B42                 jnb     short loc_B62
.text:00000B44                 mov     ecx, [ebp+var_C]
.text:00000B47                 push    ecx
.text:00000B48                 mov     ecx, [ebp+arg_0]
.text:00000B4B                 call    ??A?$CRecordVector@_N@@QBEAB_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:00000B50                 movzx   edx, byte ptr [eax]
.text:00000B53                 test    edx, edx
.text:00000B55                 jz      short loc_B60
.text:00000B57                 mov     eax, [ebp+var_8]
.text:00000B5A                 add     eax, 1
.text:00000B5D                 mov     [ebp+var_8], eax
.text:00000B60
.text:00000B60 loc_B60:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteHashDigests(NArchive::N7z::CUInt32DefVector const &)+55j
.text:00000B60                 jmp     short loc_B2E
.text:00000B62 ; ---------------------------------------------------------------------------
.text:00000B62
.text:00000B62 loc_B62:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteHashDigests(NArchive::N7z::CUInt32DefVector const &)+42j
.text:00000B62                 cmp     [ebp+var_8], 0
.text:00000B66                 jnz     short loc_B6D
.text:00000B68                 jmp     loc_BF4
.text:00000B6D ; ---------------------------------------------------------------------------
.text:00000B6D
.text:00000B6D loc_B6D:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteHashDigests(NArchive::N7z::CUInt32DefVector const &)+66j
.text:00000B6D                 push    0Ah             ; unsigned __int8
.text:00000B6F                 mov     ecx, [ebp+var_4] ; this
.text:00000B72                 call    ?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte(uchar)
.text:00000B77                 mov     ecx, [ebp+arg_0]
.text:00000B7A                 call    ?Size@?$CRecordVector@_N@@QBEIXZ ; CRecordVector<bool>::Size(void)
.text:00000B7F                 cmp     [ebp+var_8], eax
.text:00000B82                 jnz     short loc_B90
.text:00000B84                 push    1               ; unsigned __int8
.text:00000B86                 mov     ecx, [ebp+var_4] ; this
.text:00000B89                 call    ?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte(uchar)
.text:00000B8E                 jmp     short loc_BA6
.text:00000B90 ; ---------------------------------------------------------------------------
.text:00000B90
.text:00000B90 loc_B90:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteHashDigests(NArchive::N7z::CUInt32DefVector const &)+82j
.text:00000B90                 push    0               ; unsigned __int8
.text:00000B92                 mov     ecx, [ebp+var_4] ; this
.text:00000B95                 call    ?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte(uchar)
.text:00000B9A                 mov     ecx, [ebp+arg_0]
.text:00000B9D                 push    ecx
.text:00000B9E                 mov     ecx, [ebp+var_4]
.text:00000BA1                 call    ?WriteBoolVector@COutArchive@N7z@NArchive@@AAEXABV?$CRecordVector@_N@@@Z ; NArchive::N7z::COutArchive::WriteBoolVector(CRecordVector<bool> const &)
.text:00000BA6
.text:00000BA6 loc_BA6:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteHashDigests(NArchive::N7z::CUInt32DefVector const &)+8Ej
.text:00000BA6                 mov     [ebp+var_C], 0
.text:00000BAD                 jmp     short loc_BB8
.text:00000BAF ; ---------------------------------------------------------------------------
.text:00000BAF
.text:00000BAF loc_BAF:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteHashDigests(NArchive::N7z::CUInt32DefVector const &):loc_BF2j
.text:00000BAF                 mov     edx, [ebp+var_C]
.text:00000BB2                 add     edx, 1
.text:00000BB5                 mov     [ebp+var_C], edx
.text:00000BB8
.text:00000BB8 loc_BB8:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteHashDigests(NArchive::N7z::CUInt32DefVector const &)+ADj
.text:00000BB8                 mov     ecx, [ebp+arg_0]
.text:00000BBB                 call    ?Size@?$CRecordVector@_N@@QBEIXZ ; CRecordVector<bool>::Size(void)
.text:00000BC0                 cmp     [ebp+var_C], eax
.text:00000BC3                 jnb     short loc_BF4
.text:00000BC5                 mov     eax, [ebp+var_C]
.text:00000BC8                 push    eax
.text:00000BC9                 mov     ecx, [ebp+arg_0]
.text:00000BCC                 call    ??A?$CRecordVector@_N@@QBEAB_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:00000BD1                 movzx   ecx, byte ptr [eax]
.text:00000BD4                 test    ecx, ecx
.text:00000BD6                 jz      short loc_BF2
.text:00000BD8                 mov     edx, [ebp+var_C]
.text:00000BDB                 push    edx
.text:00000BDC                 mov     ecx, [ebp+arg_0]
.text:00000BDF                 add     ecx, 0Ch
.text:00000BE2                 call    ??A?$CRecordVector@I@@QBEABII@Z ; CRecordVector<uint>::operator[](uint)
.text:00000BE7                 mov     eax, [eax]
.text:00000BE9                 push    eax             ; unsigned int
.text:00000BEA                 mov     ecx, [ebp+var_4] ; this
.text:00000BED                 call    ?WriteUInt32@COutArchive@N7z@NArchive@@AAEXI@Z ; NArchive::N7z::COutArchive::WriteUInt32(uint)
.text:00000BF2
.text:00000BF2 loc_BF2:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteHashDigests(NArchive::N7z::CUInt32DefVector const &)+D6j
.text:00000BF2                 jmp     short loc_BAF
.text:00000BF4 ; ---------------------------------------------------------------------------
.text:00000BF4
.text:00000BF4 loc_BF4:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteHashDigests(NArchive::N7z::CUInt32DefVector const &)+68j
.text:00000BF4                                         ; NArchive::N7z::COutArchive::WriteHashDigests(NArchive::N7z::CUInt32DefVector const &)+C3j
.text:00000BF4                 add     esp, 0Ch
.text:00000BF7                 cmp     ebp, esp
.text:00000BF9                 call    __RTC_CheckEsp
.text:00000BFE                 mov     esp, ebp
.text:00000C00                 pop     ebp
.text:00000C01                 retn    4
.text:00000C01 ?WriteHashDigests@COutArchive@N7z@NArchive@@AAEXABUCUInt32DefVector@23@@Z endp
.text:00000C01
.text:00000C01 ; ---------------------------------------------------------------------------
.text:00000C04                 align 10h
.text:00000C10
.text:00000C10 ; =============== S U B R O U T I N E =======================================
.text:00000C10
.text:00000C10 ; Attributes: bp-based frame
.text:00000C10
.text:00000C10 ; int __stdcall NArchive::N7z::COutArchive::WritePackInfo(unsigned __int64, int, struct NArchive::N7z::CUInt32DefVector *)
.text:00000C10                 public ?WritePackInfo@COutArchive@N7z@NArchive@@AAEX_KABV?$CRecordVector@_K@@ABUCUInt32DefVector@23@@Z
.text:00000C10 ?WritePackInfo@COutArchive@N7z@NArchive@@AAEX_KABV?$CRecordVector@_K@@ABUCUInt32DefVector@23@@Z proc near
.text:00000C10                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+E4p
.text:00000C10                                         ; NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+36Dp
.text:00000C10
.text:00000C10 var_8           = dword ptr -8
.text:00000C10 var_4           = dword ptr -4
.text:00000C10 arg_0           = qword ptr  8
.text:00000C10 arg_8           = dword ptr  10h
.text:00000C10 arg_C           = dword ptr  14h
.text:00000C10
.text:00000C10                 push    ebp
.text:00000C11                 mov     ebp, esp
.text:00000C13                 sub     esp, 8
.text:00000C16                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000C1D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000C24                 mov     [ebp+var_4], ecx
.text:00000C27                 mov     ecx, [ebp+arg_8]
.text:00000C2A                 call    ?IsEmpty@?$CRecordVector@_K@@QBE_NXZ ; CRecordVector<unsigned __int64>::IsEmpty(void)
.text:00000C2F                 movzx   eax, al
.text:00000C32                 test    eax, eax
.text:00000C34                 jz      short loc_C3B
.text:00000C36                 jmp     loc_CC5
.text:00000C3B ; ---------------------------------------------------------------------------
.text:00000C3B
.text:00000C3B loc_C3B:                                ; CODE XREF: NArchive::N7z::COutArchive::WritePackInfo(unsigned __int64,CRecordVector<unsigned __int64> const &,NArchive::N7z::CUInt32DefVector const &)+24j
.text:00000C3B                 push    6               ; unsigned __int8
.text:00000C3D                 mov     ecx, [ebp+var_4] ; this
.text:00000C40                 call    ?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte(uchar)
.text:00000C45                 mov     ecx, dword ptr [ebp+arg_0+4]
.text:00000C48                 push    ecx
.text:00000C49                 mov     edx, dword ptr [ebp+arg_0]
.text:00000C4C                 push    edx             ; unsigned __int64
.text:00000C4D                 mov     ecx, [ebp+var_4] ; this
.text:00000C50                 call    ?WriteNumber@COutArchive@N7z@NArchive@@AAEX_K@Z ; NArchive::N7z::COutArchive::WriteNumber(unsigned __int64)
.text:00000C55                 mov     ecx, [ebp+arg_8]
.text:00000C58                 call    ?Size@?$CRecordVector@_K@@QBEIXZ ; CRecordVector<unsigned __int64>::Size(void)
.text:00000C5D                 xor     ecx, ecx
.text:00000C5F                 push    ecx
.text:00000C60                 push    eax             ; unsigned __int64
.text:00000C61                 mov     ecx, [ebp+var_4] ; this
.text:00000C64                 call    ?WriteNumber@COutArchive@N7z@NArchive@@AAEX_K@Z ; NArchive::N7z::COutArchive::WriteNumber(unsigned __int64)
.text:00000C69                 push    9               ; unsigned __int8
.text:00000C6B                 mov     ecx, [ebp+var_4] ; this
.text:00000C6E                 call    ?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte(uchar)
.text:00000C73                 mov     [ebp+var_8], 0
.text:00000C7A                 jmp     short loc_C85
.text:00000C7C ; ---------------------------------------------------------------------------
.text:00000C7C
.text:00000C7C loc_C7C:                                ; CODE XREF: NArchive::N7z::COutArchive::WritePackInfo(unsigned __int64,CRecordVector<unsigned __int64> const &,NArchive::N7z::CUInt32DefVector const &)+9Dj
.text:00000C7C                 mov     edx, [ebp+var_8]
.text:00000C7F                 add     edx, 1
.text:00000C82                 mov     [ebp+var_8], edx
.text:00000C85
.text:00000C85 loc_C85:                                ; CODE XREF: NArchive::N7z::COutArchive::WritePackInfo(unsigned __int64,CRecordVector<unsigned __int64> const &,NArchive::N7z::CUInt32DefVector const &)+6Aj
.text:00000C85                 mov     ecx, [ebp+arg_8]
.text:00000C88                 call    ?Size@?$CRecordVector@_K@@QBEIXZ ; CRecordVector<unsigned __int64>::Size(void)
.text:00000C8D                 cmp     [ebp+var_8], eax
.text:00000C90                 jnb     short loc_CAF
.text:00000C92                 mov     eax, [ebp+var_8]
.text:00000C95                 push    eax
.text:00000C96                 mov     ecx, [ebp+arg_8]
.text:00000C99                 call    ??A?$CRecordVector@_K@@QBEAB_KI@Z ; CRecordVector<unsigned __int64>::operator[](uint)
.text:00000C9E                 mov     ecx, [eax+4]
.text:00000CA1                 push    ecx
.text:00000CA2                 mov     edx, [eax]
.text:00000CA4                 push    edx             ; unsigned __int64
.text:00000CA5                 mov     ecx, [ebp+var_4] ; this
.text:00000CA8                 call    ?WriteNumber@COutArchive@N7z@NArchive@@AAEX_K@Z ; NArchive::N7z::COutArchive::WriteNumber(unsigned __int64)
.text:00000CAD                 jmp     short loc_C7C
.text:00000CAF ; ---------------------------------------------------------------------------
.text:00000CAF
.text:00000CAF loc_CAF:                                ; CODE XREF: NArchive::N7z::COutArchive::WritePackInfo(unsigned __int64,CRecordVector<unsigned __int64> const &,NArchive::N7z::CUInt32DefVector const &)+80j
.text:00000CAF                 mov     eax, [ebp+arg_C]
.text:00000CB2                 push    eax             ; struct NArchive::N7z::CUInt32DefVector *
.text:00000CB3                 mov     ecx, [ebp+var_4] ; this
.text:00000CB6                 call    ?WriteHashDigests@COutArchive@N7z@NArchive@@AAEXABUCUInt32DefVector@23@@Z ; NArchive::N7z::COutArchive::WriteHashDigests(NArchive::N7z::CUInt32DefVector const &)
.text:00000CBB                 push    0               ; unsigned __int8
.text:00000CBD                 mov     ecx, [ebp+var_4] ; this
.text:00000CC0                 call    ?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte(uchar)
.text:00000CC5
.text:00000CC5 loc_CC5:                                ; CODE XREF: NArchive::N7z::COutArchive::WritePackInfo(unsigned __int64,CRecordVector<unsigned __int64> const &,NArchive::N7z::CUInt32DefVector const &)+26j
.text:00000CC5                 add     esp, 8
.text:00000CC8                 cmp     ebp, esp
.text:00000CCA                 call    __RTC_CheckEsp
.text:00000CCF                 mov     esp, ebp
.text:00000CD1                 pop     ebp
.text:00000CD2                 retn    10h
.text:00000CD2 ?WritePackInfo@COutArchive@N7z@NArchive@@AAEX_KABV?$CRecordVector@_K@@ABUCUInt32DefVector@23@@Z endp
.text:00000CD2
.text:00000CD2 ; ---------------------------------------------------------------------------
.text:00000CD5                 align 10h
.text:00000CE0
.text:00000CE0 ; =============== S U B R O U T I N E =======================================
.text:00000CE0
.text:00000CE0 ; Attributes: bp-based frame
.text:00000CE0
.text:00000CE0 ; int __stdcall NArchive::N7z::COutArchive::WriteUnpackInfo(int, struct NArchive::N7z::CUInt32DefVector *)
.text:00000CE0                 public ?WriteUnpackInfo@COutArchive@N7z@NArchive@@AAEXABV?$CObjectVector@UCFolder@N7z@NArchive@@@@ABUCOutFolders@23@@Z
.text:00000CE0 ?WriteUnpackInfo@COutArchive@N7z@NArchive@@AAEXABV?$CObjectVector@UCFolder@N7z@NArchive@@@@ABUCOutFolders@23@@Z proc near
.text:00000CE0                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+F7p
.text:00000CE0                                         ; NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+392p
.text:00000CE0
.text:00000CE0 var_C           = dword ptr -0Ch
.text:00000CE0 var_8           = dword ptr -8
.text:00000CE0 var_4           = dword ptr -4
.text:00000CE0 arg_0           = dword ptr  8
.text:00000CE0 arg_4           = dword ptr  0Ch
.text:00000CE0
.text:00000CE0                 push    ebp
.text:00000CE1                 mov     ebp, esp
.text:00000CE3                 sub     esp, 0Ch
.text:00000CE6                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00000CED                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000CF4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000CFB                 mov     [ebp+var_4], ecx
.text:00000CFE                 mov     ecx, [ebp+arg_0]
.text:00000D01                 call    ?IsEmpty@?$CObjectVector@UCFolder@N7z@NArchive@@@@QBE_NXZ ; CObjectVector<NArchive::N7z::CFolder>::IsEmpty(void)
.text:00000D06                 movzx   eax, al
.text:00000D09                 test    eax, eax
.text:00000D0B                 jz      short loc_D12
.text:00000D0D                 jmp     loc_DDC
.text:00000D12 ; ---------------------------------------------------------------------------
.text:00000D12
.text:00000D12 loc_D12:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteUnpackInfo(CObjectVector<NArchive::N7z::CFolder> const &,NArchive::N7z::COutFolders const &)+2Bj
.text:00000D12                 push    7               ; unsigned __int8
.text:00000D14                 mov     ecx, [ebp+var_4] ; this
.text:00000D17                 call    ?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte(uchar)
.text:00000D1C                 push    0Bh             ; unsigned __int8
.text:00000D1E                 mov     ecx, [ebp+var_4] ; this
.text:00000D21                 call    ?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte(uchar)
.text:00000D26                 mov     ecx, [ebp+arg_0]
.text:00000D29                 call    ?Size@?$CObjectVector@UCFolder@N7z@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::N7z::CFolder>::Size(void)
.text:00000D2E                 xor     ecx, ecx
.text:00000D30                 push    ecx
.text:00000D31                 push    eax             ; unsigned __int64
.text:00000D32                 mov     ecx, [ebp+var_4] ; this
.text:00000D35                 call    ?WriteNumber@COutArchive@N7z@NArchive@@AAEX_K@Z ; NArchive::N7z::COutArchive::WriteNumber(unsigned __int64)
.text:00000D3A                 push    0               ; unsigned __int8
.text:00000D3C                 mov     ecx, [ebp+var_4] ; this
.text:00000D3F                 call    ?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte(uchar)
.text:00000D44                 mov     [ebp+var_8], 0
.text:00000D4B                 jmp     short loc_D56
.text:00000D4D ; ---------------------------------------------------------------------------
.text:00000D4D
.text:00000D4D loc_D4D:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteUnpackInfo(CObjectVector<NArchive::N7z::CFolder> const &,NArchive::N7z::COutFolders const &)+98j
.text:00000D4D                 mov     edx, [ebp+var_8]
.text:00000D50                 add     edx, 1
.text:00000D53                 mov     [ebp+var_8], edx
.text:00000D56
.text:00000D56 loc_D56:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteUnpackInfo(CObjectVector<NArchive::N7z::CFolder> const &,NArchive::N7z::COutFolders const &)+6Bj
.text:00000D56                 mov     ecx, [ebp+arg_0]
.text:00000D59                 call    ?Size@?$CObjectVector@UCFolder@N7z@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::N7z::CFolder>::Size(void)
.text:00000D5E                 cmp     [ebp+var_8], eax
.text:00000D61                 jnb     short loc_D7A
.text:00000D63                 mov     eax, [ebp+var_8]
.text:00000D66                 push    eax
.text:00000D67                 mov     ecx, [ebp+arg_0]
.text:00000D6A                 call    ??A?$CObjectVector@UCFolder@N7z@NArchive@@@@QBEABUCFolder@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CFolder>::operator[](uint)
.text:00000D6F                 push    eax             ; struct NArchive::N7z::CFolder *
.text:00000D70                 mov     ecx, [ebp+var_4] ; this
.text:00000D73                 call    ?WriteFolder@COutArchive@N7z@NArchive@@AAEXABUCFolder@23@@Z ; NArchive::N7z::COutArchive::WriteFolder(NArchive::N7z::CFolder const &)
.text:00000D78                 jmp     short loc_D4D
.text:00000D7A ; ---------------------------------------------------------------------------
.text:00000D7A
.text:00000D7A loc_D7A:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteUnpackInfo(CObjectVector<NArchive::N7z::CFolder> const &,NArchive::N7z::COutFolders const &)+81j
.text:00000D7A                 push    0Ch             ; unsigned __int8
.text:00000D7C                 mov     ecx, [ebp+var_4] ; this
.text:00000D7F                 call    ?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte(uchar)
.text:00000D84                 mov     [ebp+var_C], 0
.text:00000D8B                 jmp     short loc_D96
.text:00000D8D ; ---------------------------------------------------------------------------
.text:00000D8D
.text:00000D8D loc_D8D:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteUnpackInfo(CObjectVector<NArchive::N7z::CFolder> const &,NArchive::N7z::COutFolders const &)+E4j
.text:00000D8D                 mov     ecx, [ebp+var_C]
.text:00000D90                 add     ecx, 1
.text:00000D93                 mov     [ebp+var_C], ecx
.text:00000D96
.text:00000D96 loc_D96:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteUnpackInfo(CObjectVector<NArchive::N7z::CFolder> const &,NArchive::N7z::COutFolders const &)+ABj
.text:00000D96                 mov     ecx, [ebp+arg_4]
.text:00000D99                 add     ecx, 24h ; '$'
.text:00000D9C                 call    ?Size@?$CRecordVector@_K@@QBEIXZ ; CRecordVector<unsigned __int64>::Size(void)
.text:00000DA1                 cmp     [ebp+var_C], eax
.text:00000DA4                 jnb     short loc_DC6
.text:00000DA6                 mov     edx, [ebp+var_C]
.text:00000DA9                 push    edx
.text:00000DAA                 mov     ecx, [ebp+arg_4]
.text:00000DAD                 add     ecx, 24h ; '$'
.text:00000DB0                 call    ??A?$CRecordVector@_K@@QBEAB_KI@Z ; CRecordVector<unsigned __int64>::operator[](uint)
.text:00000DB5                 mov     ecx, [eax+4]
.text:00000DB8                 push    ecx
.text:00000DB9                 mov     edx, [eax]
.text:00000DBB                 push    edx             ; unsigned __int64
.text:00000DBC                 mov     ecx, [ebp+var_4] ; this
.text:00000DBF                 call    ?WriteNumber@COutArchive@N7z@NArchive@@AAEX_K@Z ; NArchive::N7z::COutArchive::WriteNumber(unsigned __int64)
.text:00000DC4                 jmp     short loc_D8D
.text:00000DC6 ; ---------------------------------------------------------------------------
.text:00000DC6
.text:00000DC6 loc_DC6:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteUnpackInfo(CObjectVector<NArchive::N7z::CFolder> const &,NArchive::N7z::COutFolders const &)+C4j
.text:00000DC6                 mov     eax, [ebp+arg_4]
.text:00000DC9                 push    eax             ; struct NArchive::N7z::CUInt32DefVector *
.text:00000DCA                 mov     ecx, [ebp+var_4] ; this
.text:00000DCD                 call    ?WriteHashDigests@COutArchive@N7z@NArchive@@AAEXABUCUInt32DefVector@23@@Z ; NArchive::N7z::COutArchive::WriteHashDigests(NArchive::N7z::CUInt32DefVector const &)
.text:00000DD2                 push    0               ; unsigned __int8
.text:00000DD4                 mov     ecx, [ebp+var_4] ; this
.text:00000DD7                 call    ?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte(uchar)
.text:00000DDC
.text:00000DDC loc_DDC:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteUnpackInfo(CObjectVector<NArchive::N7z::CFolder> const &,NArchive::N7z::COutFolders const &)+2Dj
.text:00000DDC                 add     esp, 0Ch
.text:00000DDF                 cmp     ebp, esp
.text:00000DE1                 call    __RTC_CheckEsp
.text:00000DE6                 mov     esp, ebp
.text:00000DE8                 pop     ebp
.text:00000DE9                 retn    8
.text:00000DE9 ?WriteUnpackInfo@COutArchive@N7z@NArchive@@AAEXABV?$CObjectVector@UCFolder@N7z@NArchive@@@@ABUCOutFolders@23@@Z endp
.text:00000DE9
.text:00000DE9 ; ---------------------------------------------------------------------------
.text:00000DEC                 align 10h
.text:00000DF0
.text:00000DF0 ; =============== S U B R O U T I N E =======================================
.text:00000DF0
.text:00000DF0 ; Attributes: bp-based frame
.text:00000DF0
.text:00000DF0 ; int __stdcall NArchive::N7z::COutArchive::WriteSubStreamsInfo(int, NArchive::N7z::CUInt32DefVector *, int, int)
.text:00000DF0                 public ?WriteSubStreamsInfo@COutArchive@N7z@NArchive@@AAEXABV?$CObjectVector@UCFolder@N7z@NArchive@@@@ABUCOutFolders@23@ABV?$CRecordVector@_K@@ABUCUInt32DefVector@23@@Z
.text:00000DF0 ?WriteSubStreamsInfo@COutArchive@N7z@NArchive@@AAEXABV?$CObjectVector@UCFolder@N7z@NArchive@@@@ABUCOutFolders@23@ABV?$CRecordVector@_K@@ABUCUInt32DefVector@23@@Z proc near
.text:00000DF0                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+1A1p
.text:00000DF0
.text:00000DF0 var_50          = dword ptr -50h
.text:00000DF0 var_4C          = dword ptr -4Ch
.text:00000DF0 var_48          = dword ptr -48h
.text:00000DF0 var_40          = byte ptr -40h
.text:00000DF0 var_34          = byte ptr -34h
.text:00000DF0 var_24          = dword ptr -24h
.text:00000DF0 var_20          = dword ptr -20h
.text:00000DF0 var_1C          = dword ptr -1Ch
.text:00000DF0 var_18          = dword ptr -18h
.text:00000DF0 var_14          = dword ptr -14h
.text:00000DF0 var_10          = dword ptr -10h
.text:00000DF0 var_C           = dword ptr -0Ch
.text:00000DF0 var_4           = dword ptr -4
.text:00000DF0 arg_0           = dword ptr  8
.text:00000DF0 arg_4           = dword ptr  0Ch
.text:00000DF0 arg_8           = dword ptr  10h
.text:00000DF0 arg_C           = dword ptr  14h
.text:00000DF0
.text:00000DF0                 push    ebp
.text:00000DF1                 mov     ebp, esp
.text:00000DF3                 push    0FFFFFFFFh
.text:00000DF5                 push    offset __ehhandler$?WriteSubStreamsInfo@COutArchive@N7z@NArchive@@AAEXABV?$CObjectVector@UCFolder@N7z@NArchive@@@@ABUCOutFolders@23@ABV?$CRecordVector@_K@@ABUCUInt32DefVector@23@@Z
.text:00000DFA                 mov     eax, large fs:0
.text:00000E00                 push    eax
.text:00000E01                 sub     esp, 44h
.text:00000E04                 push    edi
.text:00000E05                 push    ecx
.text:00000E06                 lea     edi, [ebp+var_50]
.text:00000E09                 mov     ecx, 11h
.text:00000E0E                 mov     eax, 0CCCCCCCCh
.text:00000E13                 rep stosd
.text:00000E15                 pop     ecx
.text:00000E16                 mov     eax, dword ptr ds:___security_cookie
.text:00000E1B                 xor     eax, ebp
.text:00000E1D                 push    eax
.text:00000E1E                 lea     eax, [ebp+var_C]
.text:00000E21                 mov     large fs:0, eax
.text:00000E27                 mov     [ebp+var_10], ecx
.text:00000E2A                 mov     eax, [ebp+arg_4]
.text:00000E2D                 add     eax, 18h
.text:00000E30                 mov     [ebp+var_14], eax
.text:00000E33                 push    8               ; unsigned __int8
.text:00000E35                 mov     ecx, [ebp+var_10] ; this
.text:00000E38                 call    ?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte(uchar)
.text:00000E3D                 mov     [ebp+var_18], 0
.text:00000E44                 jmp     short loc_E4F
.text:00000E46 ; ---------------------------------------------------------------------------
.text:00000E46
.text:00000E46 loc_E46:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteSubStreamsInfo(CObjectVector<NArchive::N7z::CFolder> const &,NArchive::N7z::COutFolders const &,CRecordVector<unsigned __int64> const &,NArchive::N7z::CUInt32DefVector const &):loc_EB4j
.text:00000E46                 mov     ecx, [ebp+var_18]
.text:00000E49                 add     ecx, 1
.text:00000E4C                 mov     [ebp+var_18], ecx
.text:00000E4F
.text:00000E4F loc_E4F:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteSubStreamsInfo(CObjectVector<NArchive::N7z::CFolder> const &,NArchive::N7z::COutFolders const &,CRecordVector<unsigned __int64> const &,NArchive::N7z::CUInt32DefVector const &)+54j
.text:00000E4F                 mov     ecx, [ebp+var_14]
.text:00000E52                 call    ?Size@?$CRecordVector@I@@QBEIXZ ; CRecordVector<uint>::Size(void)
.text:00000E57                 cmp     [ebp+var_18], eax
.text:00000E5A                 jnb     short loc_EB6
.text:00000E5C                 mov     edx, [ebp+var_18]
.text:00000E5F                 push    edx
.text:00000E60                 mov     ecx, [ebp+var_14]
.text:00000E63                 call    ??A?$CRecordVector@I@@QBEABII@Z ; CRecordVector<uint>::operator[](uint)
.text:00000E68                 cmp     dword ptr [eax], 1
.text:00000E6B                 jz      short loc_EB4
.text:00000E6D                 push    0Dh             ; unsigned __int8
.text:00000E6F                 mov     ecx, [ebp+var_10] ; this
.text:00000E72                 call    ?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte(uchar)
.text:00000E77                 mov     [ebp+var_18], 0
.text:00000E7E                 jmp     short loc_E89
.text:00000E80 ; ---------------------------------------------------------------------------
.text:00000E80
.text:00000E80 loc_E80:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteSubStreamsInfo(CObjectVector<NArchive::N7z::CFolder> const &,NArchive::N7z::COutFolders const &,CRecordVector<unsigned __int64> const &,NArchive::N7z::CUInt32DefVector const &)+C0j
.text:00000E80                 mov     eax, [ebp+var_18]
.text:00000E83                 add     eax, 1
.text:00000E86                 mov     [ebp+var_18], eax
.text:00000E89
.text:00000E89 loc_E89:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteSubStreamsInfo(CObjectVector<NArchive::N7z::CFolder> const &,NArchive::N7z::COutFolders const &,CRecordVector<unsigned __int64> const &,NArchive::N7z::CUInt32DefVector const &)+8Ej
.text:00000E89                 mov     ecx, [ebp+var_14]
.text:00000E8C                 call    ?Size@?$CRecordVector@I@@QBEIXZ ; CRecordVector<uint>::Size(void)
.text:00000E91                 cmp     [ebp+var_18], eax
.text:00000E94                 jnb     short loc_EB2
.text:00000E96                 mov     ecx, [ebp+var_18]
.text:00000E99                 push    ecx
.text:00000E9A                 mov     ecx, [ebp+var_14]
.text:00000E9D                 call    ??A?$CRecordVector@I@@QBEABII@Z ; CRecordVector<uint>::operator[](uint)
.text:00000EA2                 mov     edx, [eax]
.text:00000EA4                 xor     eax, eax
.text:00000EA6                 push    eax
.text:00000EA7                 push    edx             ; unsigned __int64
.text:00000EA8                 mov     ecx, [ebp+var_10] ; this
.text:00000EAB                 call    ?WriteNumber@COutArchive@N7z@NArchive@@AAEX_K@Z ; NArchive::N7z::COutArchive::WriteNumber(unsigned __int64)
.text:00000EB0                 jmp     short loc_E80
.text:00000EB2 ; ---------------------------------------------------------------------------
.text:00000EB2
.text:00000EB2 loc_EB2:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteSubStreamsInfo(CObjectVector<NArchive::N7z::CFolder> const &,NArchive::N7z::COutFolders const &,CRecordVector<unsigned __int64> const &,NArchive::N7z::CUInt32DefVector const &)+A4j
.text:00000EB2                 jmp     short loc_EB6
.text:00000EB4 ; ---------------------------------------------------------------------------
.text:00000EB4
.text:00000EB4 loc_EB4:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteSubStreamsInfo(CObjectVector<NArchive::N7z::CFolder> const &,NArchive::N7z::COutFolders const &,CRecordVector<unsigned __int64> const &,NArchive::N7z::CUInt32DefVector const &)+7Bj
.text:00000EB4                 jmp     short loc_E46
.text:00000EB6 ; ---------------------------------------------------------------------------
.text:00000EB6
.text:00000EB6 loc_EB6:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteSubStreamsInfo(CObjectVector<NArchive::N7z::CFolder> const &,NArchive::N7z::COutFolders const &,CRecordVector<unsigned __int64> const &,NArchive::N7z::CUInt32DefVector const &)+6Aj
.text:00000EB6                                         ; NArchive::N7z::COutArchive::WriteSubStreamsInfo(CObjectVector<NArchive::N7z::CFolder> const &,NArchive::N7z::COutFolders const &,CRecordVector<unsigned __int64> const &,NArchive::N7z::CUInt32DefVector const &):loc_EB2j
.text:00000EB6                 mov     [ebp+var_18], 0
.text:00000EBD                 jmp     short loc_EC8
.text:00000EBF ; ---------------------------------------------------------------------------
.text:00000EBF
.text:00000EBF loc_EBF:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteSubStreamsInfo(CObjectVector<NArchive::N7z::CFolder> const &,NArchive::N7z::COutFolders const &,CRecordVector<unsigned __int64> const &,NArchive::N7z::CUInt32DefVector const &):loc_F7Ej
.text:00000EBF                 mov     ecx, [ebp+var_18]
.text:00000EC2                 add     ecx, 1
.text:00000EC5                 mov     [ebp+var_18], ecx
.text:00000EC8
.text:00000EC8 loc_EC8:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteSubStreamsInfo(CObjectVector<NArchive::N7z::CFolder> const &,NArchive::N7z::COutFolders const &,CRecordVector<unsigned __int64> const &,NArchive::N7z::CUInt32DefVector const &)+CDj
.text:00000EC8                 mov     ecx, [ebp+var_14]
.text:00000ECB                 call    ?Size@?$CRecordVector@I@@QBEIXZ ; CRecordVector<uint>::Size(void)
.text:00000ED0                 cmp     [ebp+var_18], eax
.text:00000ED3                 jnb     loc_F83
.text:00000ED9                 mov     edx, [ebp+var_18]
.text:00000EDC                 push    edx
.text:00000EDD                 mov     ecx, [ebp+var_14]
.text:00000EE0                 call    ??A?$CRecordVector@I@@QBEABII@Z ; CRecordVector<uint>::operator[](uint)
.text:00000EE5                 cmp     dword ptr [eax], 1
.text:00000EE8                 jbe     loc_F7E
.text:00000EEE                 push    9               ; unsigned __int8
.text:00000EF0                 mov     ecx, [ebp+var_10] ; this
.text:00000EF3                 call    ?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte(uchar)
.text:00000EF8                 mov     [ebp+var_1C], 0
.text:00000EFF                 mov     [ebp+var_18], 0
.text:00000F06                 jmp     short loc_F11
.text:00000F08 ; ---------------------------------------------------------------------------
.text:00000F08
.text:00000F08 loc_F08:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteSubStreamsInfo(CObjectVector<NArchive::N7z::CFolder> const &,NArchive::N7z::COutFolders const &,CRecordVector<unsigned __int64> const &,NArchive::N7z::CUInt32DefVector const &):loc_F7Aj
.text:00000F08                 mov     eax, [ebp+var_18]
.text:00000F0B                 add     eax, 1
.text:00000F0E                 mov     [ebp+var_18], eax
.text:00000F11
.text:00000F11 loc_F11:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteSubStreamsInfo(CObjectVector<NArchive::N7z::CFolder> const &,NArchive::N7z::COutFolders const &,CRecordVector<unsigned __int64> const &,NArchive::N7z::CUInt32DefVector const &)+116j
.text:00000F11                 mov     ecx, [ebp+var_14]
.text:00000F14                 call    ?Size@?$CRecordVector@I@@QBEIXZ ; CRecordVector<uint>::Size(void)
.text:00000F19                 cmp     [ebp+var_18], eax
.text:00000F1C                 jnb     short loc_F7C
.text:00000F1E                 mov     ecx, [ebp+var_18]
.text:00000F21                 push    ecx
.text:00000F22                 mov     ecx, [ebp+var_14]
.text:00000F25                 call    ??A?$CRecordVector@I@@QBEABII@Z ; CRecordVector<uint>::operator[](uint)
.text:00000F2A                 mov     edx, [eax]
.text:00000F2C                 mov     [ebp+var_20], edx
.text:00000F2F                 mov     [ebp+var_24], 0
.text:00000F36                 jmp     short loc_F41
.text:00000F38 ; ---------------------------------------------------------------------------
.text:00000F38
.text:00000F38 loc_F38:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteSubStreamsInfo(CObjectVector<NArchive::N7z::CFolder> const &,NArchive::N7z::COutFolders const &,CRecordVector<unsigned __int64> const &,NArchive::N7z::CUInt32DefVector const &)+188j
.text:00000F38                 mov     eax, [ebp+var_24]
.text:00000F3B                 add     eax, 1
.text:00000F3E                 mov     [ebp+var_24], eax
.text:00000F41
.text:00000F41 loc_F41:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteSubStreamsInfo(CObjectVector<NArchive::N7z::CFolder> const &,NArchive::N7z::COutFolders const &,CRecordVector<unsigned __int64> const &,NArchive::N7z::CUInt32DefVector const &)+146j
.text:00000F41                 mov     ecx, [ebp+var_24]
.text:00000F44                 cmp     ecx, [ebp+var_20]
.text:00000F47                 jnb     short loc_F7A
.text:00000F49                 mov     edx, [ebp+var_24]
.text:00000F4C                 add     edx, 1
.text:00000F4F                 cmp     edx, [ebp+var_20]
.text:00000F52                 jz      short loc_F6F
.text:00000F54                 mov     eax, [ebp+var_1C]
.text:00000F57                 push    eax
.text:00000F58                 mov     ecx, [ebp+arg_8]
.text:00000F5B                 call    ??A?$CRecordVector@_K@@QBEAB_KI@Z ; CRecordVector<unsigned __int64>::operator[](uint)
.text:00000F60                 mov     ecx, [eax+4]
.text:00000F63                 push    ecx
.text:00000F64                 mov     edx, [eax]
.text:00000F66                 push    edx             ; unsigned __int64
.text:00000F67                 mov     ecx, [ebp+var_10] ; this
.text:00000F6A                 call    ?WriteNumber@COutArchive@N7z@NArchive@@AAEX_K@Z ; NArchive::N7z::COutArchive::WriteNumber(unsigned __int64)
.text:00000F6F
.text:00000F6F loc_F6F:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteSubStreamsInfo(CObjectVector<NArchive::N7z::CFolder> const &,NArchive::N7z::COutFolders const &,CRecordVector<unsigned __int64> const &,NArchive::N7z::CUInt32DefVector const &)+162j
.text:00000F6F                 mov     eax, [ebp+var_1C]
.text:00000F72                 add     eax, 1
.text:00000F75                 mov     [ebp+var_1C], eax
.text:00000F78                 jmp     short loc_F38
.text:00000F7A ; ---------------------------------------------------------------------------
.text:00000F7A
.text:00000F7A loc_F7A:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteSubStreamsInfo(CObjectVector<NArchive::N7z::CFolder> const &,NArchive::N7z::COutFolders const &,CRecordVector<unsigned __int64> const &,NArchive::N7z::CUInt32DefVector const &)+157j
.text:00000F7A                 jmp     short loc_F08
.text:00000F7C ; ---------------------------------------------------------------------------
.text:00000F7C
.text:00000F7C loc_F7C:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteSubStreamsInfo(CObjectVector<NArchive::N7z::CFolder> const &,NArchive::N7z::COutFolders const &,CRecordVector<unsigned __int64> const &,NArchive::N7z::CUInt32DefVector const &)+12Cj
.text:00000F7C                 jmp     short loc_F83
.text:00000F7E ; ---------------------------------------------------------------------------
.text:00000F7E
.text:00000F7E loc_F7E:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteSubStreamsInfo(CObjectVector<NArchive::N7z::CFolder> const &,NArchive::N7z::COutFolders const &,CRecordVector<unsigned __int64> const &,NArchive::N7z::CUInt32DefVector const &)+F8j
.text:00000F7E                 jmp     loc_EBF
.text:00000F83 ; ---------------------------------------------------------------------------
.text:00000F83
.text:00000F83 loc_F83:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteSubStreamsInfo(CObjectVector<NArchive::N7z::CFolder> const &,NArchive::N7z::COutFolders const &,CRecordVector<unsigned __int64> const &,NArchive::N7z::CUInt32DefVector const &)+E3j
.text:00000F83                                         ; NArchive::N7z::COutArchive::WriteSubStreamsInfo(CObjectVector<NArchive::N7z::CFolder> const &,NArchive::N7z::COutFolders const &,CRecordVector<unsigned __int64> const &,NArchive::N7z::CUInt32DefVector const &):loc_F7Cj
.text:00000F83                 lea     ecx, [ebp+var_40] ; this
.text:00000F86                 call    ??0CUInt32DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt32DefVector::CUInt32DefVector(void)
.text:00000F8B                 mov     [ebp+var_4], 0
.text:00000F92                 mov     [ebp+var_48], 0
.text:00000F99                 mov     [ebp+var_18], 0
.text:00000FA0                 jmp     short loc_FAB
.text:00000FA2 ; ---------------------------------------------------------------------------
.text:00000FA2
.text:00000FA2 loc_FA2:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteSubStreamsInfo(CObjectVector<NArchive::N7z::CFolder> const &,NArchive::N7z::COutFolders const &,CRecordVector<unsigned __int64> const &,NArchive::N7z::CUInt32DefVector const &):loc_1048j
.text:00000FA2                 mov     ecx, [ebp+var_18]
.text:00000FA5                 add     ecx, 1
.text:00000FA8                 mov     [ebp+var_18], ecx
.text:00000FAB
.text:00000FAB loc_FAB:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteSubStreamsInfo(CObjectVector<NArchive::N7z::CFolder> const &,NArchive::N7z::COutFolders const &,CRecordVector<unsigned __int64> const &,NArchive::N7z::CUInt32DefVector const &)+1B0j
.text:00000FAB                 mov     ecx, [ebp+arg_0]
.text:00000FAE                 call    ?Size@?$CObjectVector@UCFolder@N7z@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::N7z::CFolder>::Size(void)
.text:00000FB3                 cmp     [ebp+var_18], eax
.text:00000FB6                 jnb     loc_104D
.text:00000FBC                 mov     edx, [ebp+var_18]
.text:00000FBF                 push    edx
.text:00000FC0                 mov     ecx, [ebp+var_14]
.text:00000FC3                 call    ??A?$CRecordVector@I@@QBEABII@Z ; CRecordVector<uint>::operator[](uint)
.text:00000FC8                 mov     eax, [eax]
.text:00000FCA                 mov     [ebp+var_4C], eax
.text:00000FCD                 cmp     [ebp+var_4C], 1
.text:00000FD1                 jnz     short loc_FF1
.text:00000FD3                 mov     ecx, [ebp+var_18]
.text:00000FD6                 push    ecx             ; unsigned int
.text:00000FD7                 mov     ecx, [ebp+arg_4] ; this
.text:00000FDA                 call    ?ValidAndDefined@CUInt32DefVector@N7z@NArchive@@QBE_NI@Z ; NArchive::N7z::CUInt32DefVector::ValidAndDefined(uint)
.text:00000FDF                 movzx   edx, al
.text:00000FE2                 test    edx, edx
.text:00000FE4                 jz      short loc_FF1
.text:00000FE6                 mov     eax, [ebp+var_48]
.text:00000FE9                 add     eax, 1
.text:00000FEC                 mov     [ebp+var_48], eax
.text:00000FEF                 jmp     short loc_1048
.text:00000FF1 ; ---------------------------------------------------------------------------
.text:00000FF1
.text:00000FF1 loc_FF1:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteSubStreamsInfo(CObjectVector<NArchive::N7z::CFolder> const &,NArchive::N7z::COutFolders const &,CRecordVector<unsigned __int64> const &,NArchive::N7z::CUInt32DefVector const &)+1E1j
.text:00000FF1                                         ; NArchive::N7z::COutArchive::WriteSubStreamsInfo(CObjectVector<NArchive::N7z::CFolder> const &,NArchive::N7z::COutFolders const &,CRecordVector<unsigned __int64> const &,NArchive::N7z::CUInt32DefVector const &)+1F4j
.text:00000FF1                 mov     [ebp+var_50], 0
.text:00000FF8                 jmp     short loc_100C
.text:00000FFA ; ---------------------------------------------------------------------------
.text:00000FFA
.text:00000FFA loc_FFA:                                ; CODE XREF: NArchive::N7z::COutArchive::WriteSubStreamsInfo(CObjectVector<NArchive::N7z::CFolder> const &,NArchive::N7z::COutFolders const &,CRecordVector<unsigned __int64> const &,NArchive::N7z::CUInt32DefVector const &)+256j
.text:00000FFA                 mov     ecx, [ebp+var_50]
.text:00000FFD                 add     ecx, 1
.text:00001000                 mov     [ebp+var_50], ecx
.text:00001003                 mov     edx, [ebp+var_48]
.text:00001006                 add     edx, 1
.text:00001009                 mov     [ebp+var_48], edx
.text:0000100C
.text:0000100C loc_100C:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteSubStreamsInfo(CObjectVector<NArchive::N7z::CFolder> const &,NArchive::N7z::COutFolders const &,CRecordVector<unsigned __int64> const &,NArchive::N7z::CUInt32DefVector const &)+208j
.text:0000100C                 mov     eax, [ebp+var_50]
.text:0000100F                 cmp     eax, [ebp+var_4C]
.text:00001012                 jnb     short loc_1048
.text:00001014                 mov     ecx, [ebp+var_48]
.text:00001017                 push    ecx
.text:00001018                 mov     ecx, [ebp+arg_C]
.text:0000101B                 call    ??A?$CRecordVector@_N@@QBEAB_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:00001020                 movzx   edx, byte ptr [eax]
.text:00001023                 push    edx
.text:00001024                 lea     ecx, [ebp+var_40]
.text:00001027                 call    ?Add@?$CRecordVector@_N@@QAEI_N@Z ; CRecordVector<bool>::Add(bool)
.text:0000102C                 mov     eax, [ebp+var_48]
.text:0000102F                 push    eax
.text:00001030                 mov     ecx, [ebp+arg_C]
.text:00001033                 add     ecx, 0Ch
.text:00001036                 call    ??A?$CRecordVector@I@@QBEABII@Z ; CRecordVector<uint>::operator[](uint)
.text:0000103B                 mov     ecx, [eax]
.text:0000103D                 push    ecx
.text:0000103E                 lea     ecx, [ebp+var_34]
.text:00001041                 call    ?Add@?$CRecordVector@I@@QAEII@Z ; CRecordVector<uint>::Add(uint)
.text:00001046                 jmp     short loc_FFA
.text:00001048 ; ---------------------------------------------------------------------------
.text:00001048
.text:00001048 loc_1048:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteSubStreamsInfo(CObjectVector<NArchive::N7z::CFolder> const &,NArchive::N7z::COutFolders const &,CRecordVector<unsigned __int64> const &,NArchive::N7z::CUInt32DefVector const &)+1FFj
.text:00001048                                         ; NArchive::N7z::COutArchive::WriteSubStreamsInfo(CObjectVector<NArchive::N7z::CFolder> const &,NArchive::N7z::COutFolders const &,CRecordVector<unsigned __int64> const &,NArchive::N7z::CUInt32DefVector const &)+222j
.text:00001048                 jmp     loc_FA2
.text:0000104D ; ---------------------------------------------------------------------------
.text:0000104D
.text:0000104D loc_104D:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteSubStreamsInfo(CObjectVector<NArchive::N7z::CFolder> const &,NArchive::N7z::COutFolders const &,CRecordVector<unsigned __int64> const &,NArchive::N7z::CUInt32DefVector const &)+1C6j
.text:0000104D                 lea     edx, [ebp+var_40]
.text:00001050                 push    edx             ; struct NArchive::N7z::CUInt32DefVector *
.text:00001051                 mov     ecx, [ebp+var_10] ; this
.text:00001054                 call    ?WriteHashDigests@COutArchive@N7z@NArchive@@AAEXABUCUInt32DefVector@23@@Z ; NArchive::N7z::COutArchive::WriteHashDigests(NArchive::N7z::CUInt32DefVector const &)
.text:00001059                 push    0               ; unsigned __int8
.text:0000105B                 mov     ecx, [ebp+var_10] ; this
.text:0000105E                 call    ?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte(uchar)
.text:00001063                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000106A                 lea     ecx, [ebp+var_40] ; this
.text:0000106D                 call    ??1CUInt32DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt32DefVector::~CUInt32DefVector(void)
.text:00001072                 push    edx
.text:00001073                 mov     ecx, ebp
.text:00001075                 push    eax
.text:00001076                 lea     edx, $LN33
.text:0000107C                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001081                 pop     eax
.text:00001082                 pop     edx
.text:00001083                 mov     ecx, [ebp+var_C]
.text:00001086                 mov     large fs:0, ecx
.text:0000108D                 pop     ecx
.text:0000108E                 pop     edi
.text:0000108F                 add     esp, 50h
.text:00001092                 cmp     ebp, esp
.text:00001094                 call    __RTC_CheckEsp
.text:00001099                 mov     esp, ebp
.text:0000109B                 pop     ebp
.text:0000109C                 retn    10h
.text:0000109C ?WriteSubStreamsInfo@COutArchive@N7z@NArchive@@AAEXABV?$CObjectVector@UCFolder@N7z@NArchive@@@@ABUCOutFolders@23@ABV?$CRecordVector@_K@@ABUCUInt32DefVector@23@@Z endp
.text:0000109C
.text:0000109C ; ---------------------------------------------------------------------------
.text:0000109F                 align 10h
.text:000010A0 $LN33           dd 1                    ; DATA XREF: NArchive::N7z::COutArchive::WriteSubStreamsInfo(CObjectVector<NArchive::N7z::CFolder> const &,NArchive::N7z::COutFolders const &,CRecordVector<unsigned __int64> const &,NArchive::N7z::CUInt32DefVector const &)+286o
.text:000010A4                 dd offset $LN32
.text:000010A8 $LN32           dd 0FFFFFFC0h, 18h      ; DATA XREF: .text:000010A4o
.text:000010B0                 dd offset $LN30         ; "digests2"
.text:000010B4 $LN30           db 'digests2',0         ; DATA XREF: .text:000010B0o
.text:000010BD                 align 10h
.text:000010C0
.text:000010C0 ; =============== S U B R O U T I N E =======================================
.text:000010C0
.text:000010C0 ; Attributes: bp-based frame
.text:000010C0
.text:000010C0 ; void __thiscall NArchive::N7z::COutArchive::SkipAlign(NArchive::N7z::COutArchive *this, unsigned int, unsigned int)
.text:000010C0                 public ?SkipAlign@COutArchive@N7z@NArchive@@AAEXII@Z
.text:000010C0 ?SkipAlign@COutArchive@N7z@NArchive@@AAEXII@Z proc near
.text:000010C0                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteAlignedBoolHeader(CRecordVector<bool> const &,uint,uchar,uint)+7Fp
.text:000010C0                                         ; NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+500p
.text:000010C0
.text:000010C0 var_C           = dword ptr -0Ch
.text:000010C0 var_8           = dword ptr -8
.text:000010C0 var_4           = dword ptr -4
.text:000010C0 arg_0           = dword ptr  8
.text:000010C0 arg_4           = dword ptr  0Ch
.text:000010C0
.text:000010C0                 push    ebp
.text:000010C1                 mov     ebp, esp
.text:000010C3                 sub     esp, 0Ch
.text:000010C6                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000010CD                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000010D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000010DB                 mov     [ebp+var_4], ecx
.text:000010DE                 mov     eax, [ebp+var_4]
.text:000010E1                 movzx   ecx, byte ptr [eax+4Ch]
.text:000010E5                 test    ecx, ecx
.text:000010E7                 jnz     short loc_10EB
.text:000010E9                 jmp     short loc_1167
.text:000010EB ; ---------------------------------------------------------------------------
.text:000010EB
.text:000010EB loc_10EB:                               ; CODE XREF: NArchive::N7z::COutArchive::SkipAlign(uint,uint)+27j
.text:000010EB                 mov     ecx, [ebp+var_4] ; this
.text:000010EE                 call    ?GetPos@COutArchive@N7z@NArchive@@ABE_KXZ ; NArchive::N7z::COutArchive::GetPos(void)
.text:000010F3                 add     eax, [ebp+arg_0]
.text:000010F6                 mov     [ebp+arg_0], eax
.text:000010F9                 mov     edx, [ebp+arg_4]
.text:000010FC                 sub     edx, 1
.text:000010FF                 and     edx, [ebp+arg_0]
.text:00001102                 mov     [ebp+arg_0], edx
.text:00001105                 jnz     short loc_1109
.text:00001107                 jmp     short loc_1167
.text:00001109 ; ---------------------------------------------------------------------------
.text:00001109
.text:00001109 loc_1109:                               ; CODE XREF: NArchive::N7z::COutArchive::SkipAlign(uint,uint)+45j
.text:00001109                 mov     eax, [ebp+arg_4]
.text:0000110C                 sub     eax, [ebp+arg_0]
.text:0000110F                 mov     [ebp+var_8], eax
.text:00001112                 cmp     [ebp+var_8], 2
.text:00001116                 jnb     short loc_1121
.text:00001118                 mov     ecx, [ebp+var_8]
.text:0000111B                 add     ecx, [ebp+arg_4]
.text:0000111E                 mov     [ebp+var_8], ecx
.text:00001121
.text:00001121 loc_1121:                               ; CODE XREF: NArchive::N7z::COutArchive::SkipAlign(uint,uint)+56j
.text:00001121                 mov     edx, [ebp+var_8]
.text:00001124                 sub     edx, 2
.text:00001127                 mov     [ebp+var_8], edx
.text:0000112A                 push    19h             ; unsigned __int8
.text:0000112C                 mov     ecx, [ebp+var_4] ; this
.text:0000112F                 call    ?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte(uchar)
.text:00001134                 movzx   eax, byte ptr [ebp+var_8]
.text:00001138                 push    eax             ; unsigned __int8
.text:00001139                 mov     ecx, [ebp+var_4] ; this
.text:0000113C                 call    ?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte(uchar)
.text:00001141                 mov     [ebp+var_C], 0
.text:00001148                 jmp     short loc_1153
.text:0000114A ; ---------------------------------------------------------------------------
.text:0000114A
.text:0000114A loc_114A:                               ; CODE XREF: NArchive::N7z::COutArchive::SkipAlign(uint,uint)+A5j
.text:0000114A                 mov     ecx, [ebp+var_C]
.text:0000114D                 add     ecx, 1
.text:00001150                 mov     [ebp+var_C], ecx
.text:00001153
.text:00001153 loc_1153:                               ; CODE XREF: NArchive::N7z::COutArchive::SkipAlign(uint,uint)+88j
.text:00001153                 mov     edx, [ebp+var_C]
.text:00001156                 cmp     edx, [ebp+var_8]
.text:00001159                 jnb     short loc_1167
.text:0000115B                 push    0               ; unsigned __int8
.text:0000115D                 mov     ecx, [ebp+var_4] ; this
.text:00001160                 call    ?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte(uchar)
.text:00001165                 jmp     short loc_114A
.text:00001167 ; ---------------------------------------------------------------------------
.text:00001167
.text:00001167 loc_1167:                               ; CODE XREF: NArchive::N7z::COutArchive::SkipAlign(uint,uint)+29j
.text:00001167                                         ; NArchive::N7z::COutArchive::SkipAlign(uint,uint)+47j ...
.text:00001167                 add     esp, 0Ch
.text:0000116A                 cmp     ebp, esp
.text:0000116C                 call    __RTC_CheckEsp
.text:00001171                 mov     esp, ebp
.text:00001173                 pop     ebp
.text:00001174                 retn    8
.text:00001174 ?SkipAlign@COutArchive@N7z@NArchive@@AAEXII@Z endp
.text:00001174
.text:00001174 ; ---------------------------------------------------------------------------
.text:00001177                 align 10h
.text:00001180
.text:00001180 ; =============== S U B R O U T I N E =======================================
.text:00001180
.text:00001180 ; Attributes: bp-based frame
.text:00001180
.text:00001180 ; private: void __thiscall NArchive::N7z::COutArchive::WriteAlignedBoolHeader(class CRecordVector<bool> const &, unsigned int, unsigned char, unsigned int)
.text:00001180                 public ?WriteAlignedBoolHeader@COutArchive@N7z@NArchive@@AAEXABV?$CRecordVector@_N@@IEI@Z
.text:00001180 ?WriteAlignedBoolHeader@COutArchive@N7z@NArchive@@AAEXABV?$CRecordVector@_N@@IEI@Z proc near
.text:00001180                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteUInt64DefVector(NArchive::N7z::CUInt64DefVector const &,uchar)+7Cp
.text:00001180                                         ; NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+6F3p
.text:00001180
.text:00001180 var_14          = dword ptr -14h
.text:00001180 var_10          = qword ptr -10h
.text:00001180 var_8           = dword ptr -8
.text:00001180 var_4           = dword ptr -4
.text:00001180 arg_0           = dword ptr  8
.text:00001180 arg_4           = dword ptr  0Ch
.text:00001180 arg_8           = byte ptr  10h
.text:00001180 arg_C           = dword ptr  14h
.text:00001180
.text:00001180                 push    ebp
.text:00001181                 mov     ebp, esp
.text:00001183                 sub     esp, 14h
.text:00001186                 push    esi
.text:00001187                 mov     eax, 0CCCCCCCCh
.text:0000118C                 mov     [ebp+var_14], eax
.text:0000118F                 mov     dword ptr [ebp+var_10], eax
.text:00001192                 mov     dword ptr [ebp+var_10+4], eax
.text:00001195                 mov     [ebp+var_8], eax
.text:00001198                 mov     [ebp+var_4], eax
.text:0000119B                 mov     [ebp+var_4], ecx
.text:0000119E                 mov     ecx, [ebp+arg_0]
.text:000011A1                 call    ?Size@?$CRecordVector@_N@@QBEIXZ ; CRecordVector<bool>::Size(void)
.text:000011A6                 cmp     [ebp+arg_4], eax
.text:000011A9                 jnz     short loc_11B4
.text:000011AB                 mov     [ebp+var_14], 0
.text:000011B2                 jmp     short loc_11C0
.text:000011B4 ; ---------------------------------------------------------------------------
.text:000011B4
.text:000011B4 loc_11B4:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteAlignedBoolHeader(CRecordVector<bool> const &,uint,uchar,uint)+29j
.text:000011B4                 mov     eax, [ebp+arg_0]
.text:000011B7                 push    eax
.text:000011B8                 call    ?Bv_GetSizeInBytes@N7z@NArchive@@YGIABV?$CRecordVector@_N@@@Z ; NArchive::N7z::Bv_GetSizeInBytes(CRecordVector<bool> const &)
.text:000011BD                 mov     [ebp+var_14], eax
.text:000011C0
.text:000011C0 loc_11C0:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteAlignedBoolHeader(CRecordVector<bool> const &,uint,uchar,uint)+32j
.text:000011C0                 mov     ecx, [ebp+var_14]
.text:000011C3                 mov     [ebp+var_8], ecx
.text:000011C6                 mov     eax, [ebp+arg_4]
.text:000011C9                 mov     edx, [ebp+arg_C]
.text:000011CC                 mul     edx
.text:000011CE                 mov     ecx, [ebp+var_8]
.text:000011D1                 xor     esi, esi
.text:000011D3                 add     eax, ecx
.text:000011D5                 adc     edx, esi
.text:000011D7                 add     eax, 2
.text:000011DA                 adc     edx, 0
.text:000011DD                 mov     dword ptr [ebp+var_10], eax
.text:000011E0                 mov     dword ptr [ebp+var_10+4], edx
.text:000011E3                 mov     edx, [ebp+arg_C]
.text:000011E6                 push    edx             ; unsigned int
.text:000011E7                 mov     eax, dword ptr [ebp+var_10+4]
.text:000011EA                 push    eax
.text:000011EB                 mov     ecx, dword ptr [ebp+var_10]
.text:000011EE                 push    ecx
.text:000011EF                 call    ?GetBigNumberSize@N7z@NArchive@@YGI_K@Z ; NArchive::N7z::GetBigNumberSize(unsigned __int64)
.text:000011F4                 mov     edx, [ebp+var_8]
.text:000011F7                 lea     eax, [edx+eax+3]
.text:000011FB                 push    eax             ; unsigned int
.text:000011FC                 mov     ecx, [ebp+var_4] ; this
.text:000011FF                 call    ?SkipAlign@COutArchive@N7z@NArchive@@AAEXII@Z ; NArchive::N7z::COutArchive::SkipAlign(uint,uint)
.text:00001204                 movzx   ecx, [ebp+arg_8]
.text:00001208                 push    ecx             ; unsigned __int8
.text:00001209                 mov     ecx, [ebp+var_4] ; this
.text:0000120C                 call    ?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte(uchar)
.text:00001211                 mov     edx, dword ptr [ebp+var_10+4]
.text:00001214                 push    edx
.text:00001215                 mov     eax, dword ptr [ebp+var_10]
.text:00001218                 push    eax             ; unsigned __int64
.text:00001219                 mov     ecx, [ebp+var_4] ; this
.text:0000121C                 call    ?WriteNumber@COutArchive@N7z@NArchive@@AAEX_K@Z ; NArchive::N7z::COutArchive::WriteNumber(unsigned __int64)
.text:00001221                 mov     ecx, [ebp+arg_0]
.text:00001224                 call    ?Size@?$CRecordVector@_N@@QBEIXZ ; CRecordVector<bool>::Size(void)
.text:00001229                 cmp     [ebp+arg_4], eax
.text:0000122C                 jnz     short loc_123A
.text:0000122E                 push    1               ; unsigned __int8
.text:00001230                 mov     ecx, [ebp+var_4] ; this
.text:00001233                 call    ?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte(uchar)
.text:00001238                 jmp     short loc_1250
.text:0000123A ; ---------------------------------------------------------------------------
.text:0000123A
.text:0000123A loc_123A:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteAlignedBoolHeader(CRecordVector<bool> const &,uint,uchar,uint)+ACj
.text:0000123A                 push    0               ; unsigned __int8
.text:0000123C                 mov     ecx, [ebp+var_4] ; this
.text:0000123F                 call    ?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte(uchar)
.text:00001244                 mov     ecx, [ebp+arg_0]
.text:00001247                 push    ecx
.text:00001248                 mov     ecx, [ebp+var_4]
.text:0000124B                 call    ?WriteBoolVector@COutArchive@N7z@NArchive@@AAEXABV?$CRecordVector@_N@@@Z ; NArchive::N7z::COutArchive::WriteBoolVector(CRecordVector<bool> const &)
.text:00001250
.text:00001250 loc_1250:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteAlignedBoolHeader(CRecordVector<bool> const &,uint,uchar,uint)+B8j
.text:00001250                 push    0               ; unsigned __int8
.text:00001252                 mov     ecx, [ebp+var_4] ; this
.text:00001255                 call    ?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte(uchar)
.text:0000125A                 pop     esi
.text:0000125B                 add     esp, 14h
.text:0000125E                 cmp     ebp, esp
.text:00001260                 call    __RTC_CheckEsp
.text:00001265                 mov     esp, ebp
.text:00001267                 pop     ebp
.text:00001268                 retn    10h
.text:00001268 ?WriteAlignedBoolHeader@COutArchive@N7z@NArchive@@AAEXABV?$CRecordVector@_N@@IEI@Z endp
.text:00001268
.text:00001268 ; ---------------------------------------------------------------------------
.text:0000126B                 align 10h
.text:00001270
.text:00001270 ; =============== S U B R O U T I N E =======================================
.text:00001270
.text:00001270 ; Attributes: bp-based frame
.text:00001270
.text:00001270 ; unsigned int __stdcall NArchive::N7z::GetBigNumberSize(unsigned __int64)
.text:00001270 ?GetBigNumberSize@N7z@NArchive@@YGI_K@Z proc near
.text:00001270                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteAlignedBoolHeader(CRecordVector<bool> const &,uint,uchar,uint)+6Fp
.text:00001270                                         ; NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+4F4p
.text:00001270
.text:00001270 var_C           = dword ptr -0Ch
.text:00001270 var_8           = dword ptr -8
.text:00001270 var_4           = dword ptr -4
.text:00001270 arg_0           = dword ptr  8
.text:00001270 arg_4           = dword ptr  0Ch
.text:00001270
.text:00001270                 push    ebp
.text:00001271                 mov     ebp, esp
.text:00001273                 sub     esp, 0Ch
.text:00001276                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000127D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001284                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000128B                 mov     [ebp+var_4], 1
.text:00001292                 jmp     short loc_129D
.text:00001294 ; ---------------------------------------------------------------------------
.text:00001294
.text:00001294 loc_1294:                               ; CODE XREF: NArchive::N7z::GetBigNumberSize(unsigned __int64):loc_12CFj
.text:00001294                 mov     eax, [ebp+var_4]
.text:00001297                 add     eax, 1
.text:0000129A                 mov     [ebp+var_4], eax
.text:0000129D
.text:0000129D loc_129D:                               ; CODE XREF: NArchive::N7z::GetBigNumberSize(unsigned __int64)+22j
.text:0000129D                 cmp     [ebp+var_4], 9
.text:000012A1                 jge     short loc_12D1
.text:000012A3                 mov     ecx, [ebp+var_4]
.text:000012A6                 imul    ecx, 7
.text:000012A9                 mov     eax, 1
.text:000012AE                 xor     edx, edx
.text:000012B0                 call    __allshl
.text:000012B5                 mov     [ebp+var_C], eax
.text:000012B8                 mov     [ebp+var_8], edx
.text:000012BB                 mov     ecx, [ebp+arg_4]
.text:000012BE                 cmp     ecx, [ebp+var_8]
.text:000012C1                 ja      short loc_12CF
.text:000012C3                 jb      short loc_12CD
.text:000012C5                 mov     edx, [ebp+arg_0]
.text:000012C8                 cmp     edx, [ebp+var_C]
.text:000012CB                 jnb     short loc_12CF
.text:000012CD
.text:000012CD loc_12CD:                               ; CODE XREF: NArchive::N7z::GetBigNumberSize(unsigned __int64)+53j
.text:000012CD                 jmp     short loc_12D1
.text:000012CF ; ---------------------------------------------------------------------------
.text:000012CF
.text:000012CF loc_12CF:                               ; CODE XREF: NArchive::N7z::GetBigNumberSize(unsigned __int64)+51j
.text:000012CF                                         ; NArchive::N7z::GetBigNumberSize(unsigned __int64)+5Bj
.text:000012CF                 jmp     short loc_1294
.text:000012D1 ; ---------------------------------------------------------------------------
.text:000012D1
.text:000012D1 loc_12D1:                               ; CODE XREF: NArchive::N7z::GetBigNumberSize(unsigned __int64)+31j
.text:000012D1                                         ; NArchive::N7z::GetBigNumberSize(unsigned __int64):loc_12CDj
.text:000012D1                 mov     eax, [ebp+var_4]
.text:000012D4                 add     esp, 0Ch
.text:000012D7                 cmp     ebp, esp
.text:000012D9                 call    __RTC_CheckEsp
.text:000012DE                 mov     esp, ebp
.text:000012E0                 pop     ebp
.text:000012E1                 retn    8
.text:000012E1 ?GetBigNumberSize@N7z@NArchive@@YGI_K@Z endp
.text:000012E1
.text:000012E1 ; ---------------------------------------------------------------------------
.text:000012E4                 align 10h
.text:000012F0
.text:000012F0 ; =============== S U B R O U T I N E =======================================
.text:000012F0
.text:000012F0 ; Attributes: bp-based frame
.text:000012F0
.text:000012F0 ; void __thiscall NArchive::N7z::COutArchive::WriteUInt64DefVector(NArchive::N7z::COutArchive *this, const struct NArchive::N7z::CUInt64DefVector *, unsigned __int8)
.text:000012F0                 public ?WriteUInt64DefVector@COutArchive@N7z@NArchive@@AAEXABUCUInt64DefVector@23@E@Z
.text:000012F0 ?WriteUInt64DefVector@COutArchive@N7z@NArchive@@AAEXABUCUInt64DefVector@23@E@Z proc near
.text:000012F0                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+5F5p
.text:000012F0                                         ; NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+609p ...
.text:000012F0
.text:000012F0 var_C           = dword ptr -0Ch
.text:000012F0 var_8           = dword ptr -8
.text:000012F0 var_4           = dword ptr -4
.text:000012F0 arg_0           = dword ptr  8
.text:000012F0 arg_4           = byte ptr  0Ch
.text:000012F0
.text:000012F0                 push    ebp
.text:000012F1                 mov     ebp, esp
.text:000012F3                 sub     esp, 0Ch
.text:000012F6                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000012FD                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001304                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000130B                 mov     [ebp+var_4], ecx
.text:0000130E                 mov     [ebp+var_8], 0
.text:00001315                 mov     [ebp+var_C], 0
.text:0000131C                 jmp     short loc_1327
.text:0000131E ; ---------------------------------------------------------------------------
.text:0000131E
.text:0000131E loc_131E:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteUInt64DefVector(NArchive::N7z::CUInt64DefVector const &,uchar):loc_1350j
.text:0000131E                 mov     eax, [ebp+var_C]
.text:00001321                 add     eax, 1
.text:00001324                 mov     [ebp+var_C], eax
.text:00001327
.text:00001327 loc_1327:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteUInt64DefVector(NArchive::N7z::CUInt64DefVector const &,uchar)+2Cj
.text:00001327                 mov     ecx, [ebp+arg_0]
.text:0000132A                 call    ?Size@?$CRecordVector@_N@@QBEIXZ ; CRecordVector<bool>::Size(void)
.text:0000132F                 cmp     [ebp+var_C], eax
.text:00001332                 jnb     short loc_1352
.text:00001334                 mov     ecx, [ebp+var_C]
.text:00001337                 push    ecx
.text:00001338                 mov     ecx, [ebp+arg_0]
.text:0000133B                 call    ??A?$CRecordVector@_N@@QBEAB_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:00001340                 movzx   edx, byte ptr [eax]
.text:00001343                 test    edx, edx
.text:00001345                 jz      short loc_1350
.text:00001347                 mov     eax, [ebp+var_8]
.text:0000134A                 add     eax, 1
.text:0000134D                 mov     [ebp+var_8], eax
.text:00001350
.text:00001350 loc_1350:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteUInt64DefVector(NArchive::N7z::CUInt64DefVector const &,uchar)+55j
.text:00001350                 jmp     short loc_131E
.text:00001352 ; ---------------------------------------------------------------------------
.text:00001352
.text:00001352 loc_1352:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteUInt64DefVector(NArchive::N7z::CUInt64DefVector const &,uchar)+42j
.text:00001352                 cmp     [ebp+var_8], 0
.text:00001356                 jnz     short loc_135A
.text:00001358                 jmp     short loc_13C3
.text:0000135A ; ---------------------------------------------------------------------------
.text:0000135A
.text:0000135A loc_135A:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteUInt64DefVector(NArchive::N7z::CUInt64DefVector const &,uchar)+66j
.text:0000135A                 push    8
.text:0000135C                 movzx   ecx, [ebp+arg_4]
.text:00001360                 push    ecx
.text:00001361                 mov     edx, [ebp+var_8]
.text:00001364                 push    edx
.text:00001365                 mov     eax, [ebp+arg_0]
.text:00001368                 push    eax
.text:00001369                 mov     ecx, [ebp+var_4]
.text:0000136C                 call    ?WriteAlignedBoolHeader@COutArchive@N7z@NArchive@@AAEXABV?$CRecordVector@_N@@IEI@Z ; NArchive::N7z::COutArchive::WriteAlignedBoolHeader(CRecordVector<bool> const &,uint,uchar,uint)
.text:00001371                 mov     [ebp+var_C], 0
.text:00001378                 jmp     short loc_1383
.text:0000137A ; ---------------------------------------------------------------------------
.text:0000137A
.text:0000137A loc_137A:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteUInt64DefVector(NArchive::N7z::CUInt64DefVector const &,uchar):loc_13C1j
.text:0000137A                 mov     ecx, [ebp+var_C]
.text:0000137D                 add     ecx, 1
.text:00001380                 mov     [ebp+var_C], ecx
.text:00001383
.text:00001383 loc_1383:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteUInt64DefVector(NArchive::N7z::CUInt64DefVector const &,uchar)+88j
.text:00001383                 mov     ecx, [ebp+arg_0]
.text:00001386                 call    ?Size@?$CRecordVector@_N@@QBEIXZ ; CRecordVector<bool>::Size(void)
.text:0000138B                 cmp     [ebp+var_C], eax
.text:0000138E                 jnb     short loc_13C3
.text:00001390                 mov     edx, [ebp+var_C]
.text:00001393                 push    edx
.text:00001394                 mov     ecx, [ebp+arg_0]
.text:00001397                 call    ??A?$CRecordVector@_N@@QBEAB_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:0000139C                 movzx   eax, byte ptr [eax]
.text:0000139F                 test    eax, eax
.text:000013A1                 jz      short loc_13C1
.text:000013A3                 mov     ecx, [ebp+var_C]
.text:000013A6                 push    ecx
.text:000013A7                 mov     ecx, [ebp+arg_0]
.text:000013AA                 add     ecx, 0Ch
.text:000013AD                 call    ??A?$CRecordVector@_K@@QBEAB_KI@Z ; CRecordVector<unsigned __int64>::operator[](uint)
.text:000013B2                 mov     edx, [eax+4]
.text:000013B5                 push    edx
.text:000013B6                 mov     eax, [eax]
.text:000013B8                 push    eax             ; unsigned __int64
.text:000013B9                 mov     ecx, [ebp+var_4] ; this
.text:000013BC                 call    ?WriteUInt64@COutArchive@N7z@NArchive@@AAEX_K@Z ; NArchive::N7z::COutArchive::WriteUInt64(unsigned __int64)
.text:000013C1
.text:000013C1 loc_13C1:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteUInt64DefVector(NArchive::N7z::CUInt64DefVector const &,uchar)+B1j
.text:000013C1                 jmp     short loc_137A
.text:000013C3 ; ---------------------------------------------------------------------------
.text:000013C3
.text:000013C3 loc_13C3:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteUInt64DefVector(NArchive::N7z::CUInt64DefVector const &,uchar)+68j
.text:000013C3                                         ; NArchive::N7z::COutArchive::WriteUInt64DefVector(NArchive::N7z::CUInt64DefVector const &,uchar)+9Ej
.text:000013C3                 add     esp, 0Ch
.text:000013C6                 cmp     ebp, esp
.text:000013C8                 call    __RTC_CheckEsp
.text:000013CD                 mov     esp, ebp
.text:000013CF                 pop     ebp
.text:000013D0                 retn    8
.text:000013D0 ?WriteUInt64DefVector@COutArchive@N7z@NArchive@@AAEXABUCUInt64DefVector@23@E@Z endp
.text:000013D0
.text:000013D0 ; ---------------------------------------------------------------------------
.text:000013D3                 align 10h
.text:000013E0
.text:000013E0 ; =============== S U B R O U T I N E =======================================
.text:000013E0
.text:000013E0 ; Attributes: bp-based frame
.text:000013E0
.text:000013E0 ; private: long __thiscall NArchive::N7z::COutArchive::EncodeStream(class NArchive::N7z::CEncoder &, class CBuffer<unsigned char> const &, class CRecordVector<unsigned __int64> &, class CObjectVector<struct NArchive::N7z::CFolder> &, struct NArchive::N7z::COutFolders &)
.text:000013E0                 public ?EncodeStream@COutArchive@N7z@NArchive@@AAEJAAVCEncoder@23@ABV?$CBuffer@E@@AAV?$CRecordVector@_K@@AAV?$CObjectVector@UCFolder@N7z@NArchive@@@@AAUCOutFolders@23@@Z
.text:000013E0 ?EncodeStream@COutArchive@N7z@NArchive@@AAEJAAVCEncoder@23@ABV?$CBuffer@E@@AAV?$CRecordVector@_K@@AAV?$CObjectVector@UCFolder@N7z@NArchive@@@@AAUCOutFolders@23@@Z proc near
.text:000013E0                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+274p
.text:000013E0
.text:000013E0 var_58          = dword ptr -58h
.text:000013E0 var_54          = dword ptr -54h
.text:000013E0 var_50          = dword ptr -50h
.text:000013E0 var_4C          = dword ptr -4Ch
.text:000013E0 var_48          = dword ptr -48h
.text:000013E0 var_44          = dword ptr -44h
.text:000013E0 var_3C          = byte ptr -3Ch
.text:000013E0 var_2C          = dword ptr -2Ch
.text:000013E0 var_28          = dword ptr -28h
.text:000013E0 var_1C          = byte ptr -1Ch
.text:000013E0 var_14          = dword ptr -14h
.text:000013E0 var_10          = dword ptr -10h
.text:000013E0 var_C           = dword ptr -0Ch
.text:000013E0 var_4           = dword ptr -4
.text:000013E0 arg_0           = dword ptr  8
.text:000013E0 arg_4           = dword ptr  0Ch
.text:000013E0 arg_8           = dword ptr  10h
.text:000013E0 arg_C           = dword ptr  14h
.text:000013E0 arg_10          = dword ptr  18h
.text:000013E0
.text:000013E0                 push    ebp
.text:000013E1                 mov     ebp, esp
.text:000013E3                 push    0FFFFFFFFh
.text:000013E5                 push    offset __ehhandler$?EncodeStream@COutArchive@N7z@NArchive@@AAEJAAVCEncoder@23@ABV?$CBuffer@E@@AAV?$CRecordVector@_K@@AAV?$CObjectVector@UCFolder@N7z@NArchive@@@@AAUCOutFolders@23@@Z
.text:000013EA                 mov     eax, large fs:0
.text:000013F0                 push    eax
.text:000013F1                 sub     esp, 4Ch
.text:000013F4                 push    esi
.text:000013F5                 push    edi
.text:000013F6                 push    ecx
.text:000013F7                 lea     edi, [ebp+var_58]
.text:000013FA                 mov     ecx, 13h
.text:000013FF                 mov     eax, 0CCCCCCCCh
.text:00001404                 rep stosd
.text:00001406                 pop     ecx
.text:00001407                 mov     eax, dword ptr ds:___security_cookie
.text:0000140C                 xor     eax, ebp
.text:0000140E                 push    eax
.text:0000140F                 lea     eax, [ebp+var_C]
.text:00001412                 mov     large fs:0, eax
.text:00001418                 mov     [ebp+var_10], ecx
.text:0000141B                 push    20h ; ' '       ; unsigned int
.text:0000141D                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00001422                 add     esp, 4
.text:00001425                 mov     [ebp+var_4C], eax
.text:00001428                 mov     [ebp+var_4], 0
.text:0000142F                 cmp     [ebp+var_4C], 0
.text:00001433                 jz      short loc_1442
.text:00001435                 mov     ecx, [ebp+var_4C]
.text:00001438                 call    ??0CBufInStream@@QAE@XZ ; CBufInStream::CBufInStream(void)
.text:0000143D                 mov     [ebp+var_58], eax
.text:00001440                 jmp     short loc_1449
.text:00001442 ; ---------------------------------------------------------------------------
.text:00001442
.text:00001442 loc_1442:                               ; CODE XREF: NArchive::N7z::COutArchive::EncodeStream(NArchive::N7z::CEncoder &,CBuffer<uchar> const &,CRecordVector<unsigned __int64> &,CObjectVector<NArchive::N7z::CFolder> &,NArchive::N7z::COutFolders &)+53j
.text:00001442                 mov     [ebp+var_58], 0
.text:00001449
.text:00001449 loc_1449:                               ; CODE XREF: NArchive::N7z::COutArchive::EncodeStream(NArchive::N7z::CEncoder &,CBuffer<uchar> const &,CRecordVector<unsigned __int64> &,CObjectVector<NArchive::N7z::CFolder> &,NArchive::N7z::COutFolders &)+60j
.text:00001449                 mov     eax, [ebp+var_58]
.text:0000144C                 mov     [ebp+var_48], eax
.text:0000144F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001456                 mov     ecx, [ebp+var_48]
.text:00001459                 mov     [ebp+var_14], ecx
.text:0000145C                 mov     edx, [ebp+var_14]
.text:0000145F                 push    edx
.text:00001460                 lea     ecx, [ebp+var_1C]
.text:00001463                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(ISequentialInStream *)
.text:00001468                 mov     [ebp+var_4], 1
.text:0000146F                 push    0               ; struct IUnknown *
.text:00001471                 mov     ecx, [ebp+arg_4]
.text:00001474                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:00001479                 push    eax             ; unsigned int
.text:0000147A                 mov     ecx, [ebp+arg_4]
.text:0000147D                 call    ??B?$CBuffer@E@@QBEPBEXZ ; CBuffer<uchar>::operator uchar const *(void)
.text:00001482                 push    eax             ; unsigned __int8 *
.text:00001483                 mov     ecx, [ebp+var_14] ; this
.text:00001486                 call    ?Init@CBufInStream@@QAEXPBEIPAUIUnknown@@@Z ; CBufInStream::Init(uchar const *,uint,IUnknown *)
.text:0000148B                 push    1
.text:0000148D                 mov     ecx, [ebp+arg_10]
.text:00001490                 call    ?Add@?$CRecordVector@_N@@QAEI_N@Z ; CRecordVector<bool>::Add(bool)
.text:00001495                 mov     ecx, [ebp+arg_4]
.text:00001498                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:0000149D                 mov     esi, eax
.text:0000149F                 mov     ecx, [ebp+arg_4]
.text:000014A2                 call    ??B?$CBuffer@E@@QBEPBEXZ ; CBuffer<uchar>::operator uchar const *(void)
.text:000014A7                 mov     edx, esi
.text:000014A9                 mov     ecx, eax
.text:000014AB                 call    @CrcCalc@8      ; CrcCalc(x,x)
.text:000014B0                 push    eax
.text:000014B1                 mov     ecx, [ebp+arg_10]
.text:000014B4                 add     ecx, 0Ch
.text:000014B7                 call    ?Add@?$CRecordVector@I@@QAEII@Z ; CRecordVector<uint>::Add(uint)
.text:000014BC                 mov     ecx, [ebp+arg_4]
.text:000014BF                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:000014C4                 xor     ecx, ecx
.text:000014C6                 mov     [ebp+var_2C], eax
.text:000014C9                 mov     [ebp+var_28], ecx
.text:000014CC                 push    0
.text:000014CE                 mov     edx, [ebp+arg_8]
.text:000014D1                 push    edx
.text:000014D2                 mov     ecx, [ebp+var_10]
.text:000014D5                 add     ecx, 54h ; 'T'
.text:000014D8                 call    ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *(void)
.text:000014DD                 push    eax
.text:000014DE                 lea     eax, [ebp+var_3C]
.text:000014E1                 push    eax
.text:000014E2                 mov     ecx, [ebp+arg_10]
.text:000014E5                 add     ecx, 24h ; '$'
.text:000014E8                 push    ecx
.text:000014E9                 mov     ecx, [ebp+arg_C]
.text:000014EC                 call    ?AddNew@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEAAUCFolder@N7z@NArchive@@XZ ; CObjectVector<NArchive::N7z::CFolder>::AddNew(void)
.text:000014F1                 push    eax
.text:000014F2                 lea     edx, [ebp+var_2C]
.text:000014F5                 push    edx
.text:000014F6                 lea     ecx, [ebp+var_1C]
.text:000014F9                 call    ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *(void)
.text:000014FE                 push    eax
.text:000014FF                 mov     ecx, [ebp+arg_0]
.text:00001502                 call    ?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z ; NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)
.text:00001507                 mov     [ebp+var_44], eax
.text:0000150A                 cmp     [ebp+var_44], 0
.text:0000150E                 jz      short loc_152A
.text:00001510                 mov     eax, [ebp+var_44]
.text:00001513                 mov     [ebp+var_50], eax
.text:00001516                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000151D                 lea     ecx, [ebp+var_1C]
.text:00001520                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00001525                 mov     eax, [ebp+var_50]
.text:00001528                 jmp     short loc_1543
.text:0000152A ; ---------------------------------------------------------------------------
.text:0000152A
.text:0000152A loc_152A:                               ; CODE XREF: NArchive::N7z::COutArchive::EncodeStream(NArchive::N7z::CEncoder &,CBuffer<uchar> const &,CRecordVector<unsigned __int64> &,CObjectVector<NArchive::N7z::CFolder> &,NArchive::N7z::COutFolders &)+12Ej
.text:0000152A                 mov     [ebp+var_54], 0
.text:00001531                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001538                 lea     ecx, [ebp+var_1C]
.text:0000153B                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00001540                 mov     eax, [ebp+var_54]
.text:00001543
.text:00001543 loc_1543:                               ; CODE XREF: NArchive::N7z::COutArchive::EncodeStream(NArchive::N7z::CEncoder &,CBuffer<uchar> const &,CRecordVector<unsigned __int64> &,CObjectVector<NArchive::N7z::CFolder> &,NArchive::N7z::COutFolders &)+148j
.text:00001543                 push    edx
.text:00001544                 mov     ecx, ebp
.text:00001546                 push    eax
.text:00001547                 lea     edx, $LN13
.text:0000154D                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001552                 pop     eax
.text:00001553                 pop     edx
.text:00001554                 mov     ecx, [ebp+var_C]
.text:00001557                 mov     large fs:0, ecx
.text:0000155E                 pop     ecx
.text:0000155F                 pop     edi
.text:00001560                 pop     esi
.text:00001561                 add     esp, 58h
.text:00001564                 cmp     ebp, esp
.text:00001566                 call    __RTC_CheckEsp
.text:0000156B                 mov     esp, ebp
.text:0000156D                 pop     ebp
.text:0000156E                 retn    14h
.text:0000156E ?EncodeStream@COutArchive@N7z@NArchive@@AAEJAAVCEncoder@23@ABV?$CBuffer@E@@AAV?$CRecordVector@_K@@AAV?$CObjectVector@UCFolder@N7z@NArchive@@@@AAUCOutFolders@23@@Z endp
.text:0000156E
.text:0000156E ; ---------------------------------------------------------------------------
.text:00001571                 align 4
.text:00001574 $LN13           dd 3                    ; DATA XREF: NArchive::N7z::COutArchive::EncodeStream(NArchive::N7z::CEncoder &,CBuffer<uchar> const &,CRecordVector<unsigned __int64> &,CObjectVector<NArchive::N7z::CFolder> &,NArchive::N7z::COutFolders &)+167o
.text:00001578                 dd offset $LN12
.text:0000157C $LN12           dd 0FFFFFFE4h, 4        ; DATA XREF: .text:00001578o
.text:00001584                 dd offset $LN8          ; "stream"
.text:00001588                 dd 0FFFFFFD4h, 8
.text:00001590                 dd offset $LN9          ; "dataSize64"
.text:00001594                 dd 0FFFFFFC4h, 8
.text:0000159C                 dd offset $LN10         ; "unpackSize"
.text:000015A0 $LN10           db 'unpackSize',0       ; DATA XREF: .text:0000159Co
.text:000015AB $LN9            db 'dataSize64',0       ; DATA XREF: .text:00001590o
.text:000015B6 $LN8            db 'stream',0           ; DATA XREF: .text:00001584o
.text:000015BD                 align 10h
.text:000015C0
.text:000015C0 ; =============== S U B R O U T I N E =======================================
.text:000015C0
.text:000015C0 ; Attributes: bp-based frame
.text:000015C0
.text:000015C0 ; void __thiscall NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::COutArchive *this, const struct NArchive::N7z::CArchiveDatabaseOut *, unsigned __int64 *)
.text:000015C0                 public ?WriteHeader@COutArchive@N7z@NArchive@@AAEXABUCArchiveDatabaseOut@23@AA_K@Z
.text:000015C0 ?WriteHeader@COutArchive@N7z@NArchive@@AAEXABUCArchiveDatabaseOut@23@AA_K@Z proc near
.text:000015C0                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+129p
.text:000015C0                                         ; NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+184p
.text:000015C0
.text:000015C0 var_E4          = dword ptr -0E4h
.text:000015C0 var_DD          = byte ptr -0DDh
.text:000015C0 var_DC          = dword ptr -0DCh
.text:000015C0 var_D4          = byte ptr -0D4h
.text:000015C0 var_C4          = word ptr -0C4h
.text:000015C0 var_C0          = dword ptr -0C0h
.text:000015C0 var_BC          = dword ptr -0BCh
.text:000015C0 var_B8          = dword ptr -0B8h
.text:000015C0 var_B4          = dword ptr -0B4h
.text:000015C0 var_B0          = dword ptr -0B0h
.text:000015C0 var_AC          = qword ptr -0ACh
.text:000015C0 var_A1          = byte ptr -0A1h
.text:000015C0 var_A0          = dword ptr -0A0h
.text:000015C0 var_9C          = dword ptr -9Ch
.text:000015C0 var_96          = byte ptr -96h
.text:000015C0 var_95          = byte ptr -95h
.text:000015C0 var_90          = byte ptr -90h
.text:000015C0 var_7C          = byte ptr -7Ch
.text:000015C0 var_6C          = dword ptr -6Ch
.text:000015C0 var_64          = byte ptr -64h
.text:000015C0 var_54          = dword ptr -54h
.text:000015C0 var_4C          = dword ptr -4Ch
.text:000015C0 var_40          = byte ptr -40h
.text:000015C0 var_2C          = dword ptr -2Ch
.text:000015C0 var_1C          = dword ptr -1Ch
.text:000015C0 var_18          = dword ptr -18h
.text:000015C0 var_14          = dword ptr -14h
.text:000015C0 var_10          = dword ptr -10h
.text:000015C0 var_C           = dword ptr -0Ch
.text:000015C0 var_4           = dword ptr -4
.text:000015C0 arg_0           = dword ptr  8
.text:000015C0 arg_4           = dword ptr  0Ch
.text:000015C0
.text:000015C0                 push    ebp
.text:000015C1                 mov     ebp, esp
.text:000015C3                 push    0FFFFFFFFh
.text:000015C5                 push    offset __ehhandler$?WriteHeader@COutArchive@N7z@NArchive@@AAEXABUCArchiveDatabaseOut@23@AA_K@Z
.text:000015CA                 mov     eax, large fs:0
.text:000015D0                 push    eax
.text:000015D1                 sub     esp, 0D8h
.text:000015D7                 push    ebx
.text:000015D8                 push    edi
.text:000015D9                 push    ecx
.text:000015DA                 lea     edi, [ebp+var_E4]
.text:000015E0                 mov     ecx, 36h ; '6'
.text:000015E5                 mov     eax, 0CCCCCCCCh
.text:000015EA                 rep stosd
.text:000015EC                 pop     ecx
.text:000015ED                 mov     eax, dword ptr ds:___security_cookie
.text:000015F2                 xor     eax, ebp
.text:000015F4                 push    eax
.text:000015F5                 lea     eax, [ebp+var_C]
.text:000015F8                 mov     large fs:0, eax
.text:000015FE                 mov     [ebp+var_10], ecx
.text:00001601                 mov     eax, [ebp+var_10]
.text:00001604                 mov     byte ptr [eax+4Ch], 1
.text:00001608                 mov     [ebp+var_1C], 0
.text:0000160F                 mov     [ebp+var_18], 0
.text:00001616                 mov     [ebp+var_14], 0
.text:0000161D                 jmp     short loc_1628
.text:0000161F ; ---------------------------------------------------------------------------
.text:0000161F
.text:0000161F loc_161F:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+98j
.text:0000161F                 mov     ecx, [ebp+var_14]
.text:00001622                 add     ecx, 1
.text:00001625                 mov     [ebp+var_14], ecx
.text:00001628
.text:00001628 loc_1628:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+5Dj
.text:00001628                 mov     ecx, [ebp+arg_0]
.text:0000162B                 add     ecx, 30h ; '0'
.text:0000162E                 call    ?Size@?$CRecordVector@_K@@QBEIXZ ; CRecordVector<unsigned __int64>::Size(void)
.text:00001633                 cmp     [ebp+var_14], eax
.text:00001636                 jnb     short loc_165A
.text:00001638                 mov     edx, [ebp+var_14]
.text:0000163B                 push    edx
.text:0000163C                 mov     ecx, [ebp+arg_0]
.text:0000163F                 add     ecx, 30h ; '0'
.text:00001642                 call    ??A?$CRecordVector@_K@@QBEAB_KI@Z ; CRecordVector<unsigned __int64>::operator[](uint)
.text:00001647                 mov     ecx, [ebp+var_1C]
.text:0000164A                 add     ecx, [eax]
.text:0000164C                 mov     edx, [ebp+var_18]
.text:0000164F                 adc     edx, [eax+4]
.text:00001652                 mov     [ebp+var_1C], ecx
.text:00001655                 mov     [ebp+var_18], edx
.text:00001658                 jmp     short loc_161F
.text:0000165A ; ---------------------------------------------------------------------------
.text:0000165A
.text:0000165A loc_165A:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+76j
.text:0000165A                 mov     eax, [ebp+arg_4]
.text:0000165D                 mov     ecx, [ebp+var_1C]
.text:00001660                 mov     [eax], ecx
.text:00001662                 mov     edx, [ebp+var_18]
.text:00001665                 mov     [eax+4], edx
.text:00001668                 push    1               ; unsigned __int8
.text:0000166A                 mov     ecx, [ebp+var_10] ; this
.text:0000166D                 call    ?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte(uchar)
.text:00001672                 mov     ecx, [ebp+arg_0]
.text:00001675                 add     ecx, 54h ; 'T'
.text:00001678                 call    ?Size@?$CObjectVector@UCFolder@N7z@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::N7z::CFolder>::Size(void)
.text:0000167D                 test    eax, eax
.text:0000167F                 jbe     loc_178B
.text:00001685                 push    4               ; unsigned __int8
.text:00001687                 mov     ecx, [ebp+var_10] ; this
.text:0000168A                 call    ?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte(uchar)
.text:0000168F                 mov     eax, [ebp+arg_0]
.text:00001692                 add     eax, 3Ch ; '<'
.text:00001695                 push    eax             ; struct NArchive::N7z::CUInt32DefVector *
.text:00001696                 mov     ecx, [ebp+arg_0]
.text:00001699                 add     ecx, 30h ; '0'
.text:0000169C                 push    ecx             ; int
.text:0000169D                 push    0
.text:0000169F                 push    0               ; unsigned __int64
.text:000016A1                 mov     ecx, [ebp+var_10]
.text:000016A4                 call    ?WritePackInfo@COutArchive@N7z@NArchive@@AAEX_KABV?$CRecordVector@_K@@ABUCUInt32DefVector@23@@Z ; NArchive::N7z::COutArchive::WritePackInfo(unsigned __int64,CRecordVector<unsigned __int64> const &,NArchive::N7z::CUInt32DefVector const &)
.text:000016A9                 mov     edx, [ebp+arg_0]
.text:000016AC                 push    edx             ; struct NArchive::N7z::CUInt32DefVector *
.text:000016AD                 mov     eax, [ebp+arg_0]
.text:000016B0                 add     eax, 54h ; 'T'
.text:000016B3                 push    eax             ; int
.text:000016B4                 mov     ecx, [ebp+var_10]
.text:000016B7                 call    ?WriteUnpackInfo@COutArchive@N7z@NArchive@@AAEXABV?$CObjectVector@UCFolder@N7z@NArchive@@@@ABUCOutFolders@23@@Z ; NArchive::N7z::COutArchive::WriteUnpackInfo(CObjectVector<NArchive::N7z::CFolder> const &,NArchive::N7z::COutFolders const &)
.text:000016BC                 lea     ecx, [ebp+var_2C]
.text:000016BF                 call    ??0?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>(void)
.text:000016C4                 mov     [ebp+var_4], 0
.text:000016CB                 lea     ecx, [ebp+var_4C] ; this
.text:000016CE                 call    ??0CUInt32DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt32DefVector::CUInt32DefVector(void)
.text:000016D3                 mov     byte ptr [ebp+var_4], 1
.text:000016D7                 mov     [ebp+var_14], 0
.text:000016DE                 jmp     short loc_16E9
.text:000016E0 ; ---------------------------------------------------------------------------
.text:000016E0
.text:000016E0 loc_16E0:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+156j
.text:000016E0                                         ; NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+189j
.text:000016E0                 mov     ecx, [ebp+var_14]
.text:000016E3                 add     ecx, 1
.text:000016E6                 mov     [ebp+var_14], ecx
.text:000016E9
.text:000016E9 loc_16E9:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+11Ej
.text:000016E9                 mov     ecx, [ebp+arg_0]
.text:000016EC                 add     ecx, 60h ; '`'
.text:000016EF                 call    ?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CFileItem>::Size(void)
.text:000016F4                 cmp     [ebp+var_14], eax
.text:000016F7                 jnb     short loc_174B
.text:000016F9                 mov     edx, [ebp+var_14]
.text:000016FC                 push    edx
.text:000016FD                 mov     ecx, [ebp+arg_0]
.text:00001700                 add     ecx, 60h ; '`'
.text:00001703                 call    ??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFileItem>::operator[](uint)
.text:00001708                 mov     [ebp+var_54], eax
.text:0000170B                 mov     eax, [ebp+var_54]
.text:0000170E                 movzx   ecx, byte ptr [eax+10h]
.text:00001712                 test    ecx, ecx
.text:00001714                 jnz     short loc_1718
.text:00001716                 jmp     short loc_16E0
.text:00001718 ; ---------------------------------------------------------------------------
.text:00001718
.text:00001718 loc_1718:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+154j
.text:00001718                 mov     edx, [ebp+var_54]
.text:0000171B                 mov     eax, [edx+4]
.text:0000171E                 push    eax
.text:0000171F                 mov     ecx, [edx]
.text:00001721                 push    ecx
.text:00001722                 lea     ecx, [ebp+var_2C]
.text:00001725                 call    ?Add@?$CRecordVector@_K@@QAEI_K@Z ; CRecordVector<unsigned __int64>::Add(unsigned __int64)
.text:0000172A                 mov     edx, [ebp+var_54]
.text:0000172D                 movzx   eax, byte ptr [edx+12h]
.text:00001731                 push    eax
.text:00001732                 lea     ecx, [ebp+var_4C]
.text:00001735                 call    ?Add@?$CRecordVector@_N@@QAEI_N@Z ; CRecordVector<bool>::Add(bool)
.text:0000173A                 mov     ecx, [ebp+var_54]
.text:0000173D                 mov     edx, [ecx+0Ch]
.text:00001740                 push    edx
.text:00001741                 lea     ecx, [ebp+var_40]
.text:00001744                 call    ?Add@?$CRecordVector@I@@QAEII@Z ; CRecordVector<uint>::Add(uint)
.text:00001749                 jmp     short loc_16E0
.text:0000174B ; ---------------------------------------------------------------------------
.text:0000174B
.text:0000174B loc_174B:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+137j
.text:0000174B                 lea     eax, [ebp+var_4C]
.text:0000174E                 push    eax             ; int
.text:0000174F                 lea     ecx, [ebp+var_2C]
.text:00001752                 push    ecx             ; int
.text:00001753                 mov     edx, [ebp+arg_0]
.text:00001756                 push    edx             ; NArchive::N7z::CUInt32DefVector *
.text:00001757                 mov     eax, [ebp+arg_0]
.text:0000175A                 add     eax, 54h ; 'T'
.text:0000175D                 push    eax             ; int
.text:0000175E                 mov     ecx, [ebp+var_10]
.text:00001761                 call    ?WriteSubStreamsInfo@COutArchive@N7z@NArchive@@AAEXABV?$CObjectVector@UCFolder@N7z@NArchive@@@@ABUCOutFolders@23@ABV?$CRecordVector@_K@@ABUCUInt32DefVector@23@@Z ; NArchive::N7z::COutArchive::WriteSubStreamsInfo(CObjectVector<NArchive::N7z::CFolder> const &,NArchive::N7z::COutFolders const &,CRecordVector<unsigned __int64> const &,NArchive::N7z::CUInt32DefVector const &)
.text:00001766                 push    0               ; unsigned __int8
.text:00001768                 mov     ecx, [ebp+var_10] ; this
.text:0000176B                 call    ?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte(uchar)
.text:00001770                 mov     byte ptr [ebp+var_4], 0
.text:00001774                 lea     ecx, [ebp+var_4C] ; this
.text:00001777                 call    ??1CUInt32DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt32DefVector::~CUInt32DefVector(void)
.text:0000177C                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001783                 lea     ecx, [ebp+var_2C]
.text:00001786                 call    ??1?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text:0000178B
.text:0000178B loc_178B:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+BFj
.text:0000178B                 mov     ecx, [ebp+arg_0]
.text:0000178E                 add     ecx, 60h ; '`'
.text:00001791                 call    ?IsEmpty@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBE_NXZ ; CRecordVector<NArchive::N7z::CFileItem>::IsEmpty(void)
.text:00001796                 movzx   ecx, al
.text:00001799                 test    ecx, ecx
.text:0000179B                 jz      short loc_17AC
.text:0000179D                 push    0               ; unsigned __int8
.text:0000179F                 mov     ecx, [ebp+var_10] ; this
.text:000017A2                 call    ?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte(uchar)
.text:000017A7                 jmp     loc_1D37
.text:000017AC ; ---------------------------------------------------------------------------
.text:000017AC
.text:000017AC loc_17AC:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+1DBj
.text:000017AC                 push    5               ; unsigned __int8
.text:000017AE                 mov     ecx, [ebp+var_10] ; this
.text:000017B1                 call    ?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte(uchar)
.text:000017B6                 mov     ecx, [ebp+arg_0]
.text:000017B9                 add     ecx, 60h ; '`'
.text:000017BC                 call    ?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CFileItem>::Size(void)
.text:000017C1                 xor     edx, edx
.text:000017C3                 push    edx
.text:000017C4                 push    eax             ; unsigned __int64
.text:000017C5                 mov     ecx, [ebp+var_10] ; this
.text:000017C8                 call    ?WriteNumber@COutArchive@N7z@NArchive@@AAEX_K@Z ; NArchive::N7z::COutArchive::WriteNumber(unsigned __int64)
.text:000017CD                 lea     ecx, [ebp+var_64]
.text:000017D0                 call    ??0?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::CRecordVector<bool>(void)
.text:000017D5                 mov     [ebp+var_4], 2
.text:000017DC                 mov     ecx, [ebp+arg_0]
.text:000017DF                 add     ecx, 60h ; '`'
.text:000017E2                 call    ?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CFileItem>::Size(void)
.text:000017E7                 push    eax
.text:000017E8                 lea     ecx, [ebp+var_64]
.text:000017EB                 call    ?ClearAndSetSize@?$CRecordVector@_N@@QAEXI@Z ; CRecordVector<bool>::ClearAndSetSize(uint)
.text:000017F0                 mov     [ebp+var_6C], 0
.text:000017F7                 mov     [ebp+var_14], 0
.text:000017FE                 jmp     short loc_1809
.text:00001800 ; ---------------------------------------------------------------------------
.text:00001800
.text:00001800 loc_1800:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &):loc_1859j
.text:00001800                 mov     eax, [ebp+var_14]
.text:00001803                 add     eax, 1
.text:00001806                 mov     [ebp+var_14], eax
.text:00001809
.text:00001809 loc_1809:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+23Ej
.text:00001809                 mov     ecx, [ebp+arg_0]
.text:0000180C                 add     ecx, 60h ; '`'
.text:0000180F                 call    ?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CFileItem>::Size(void)
.text:00001814                 cmp     [ebp+var_14], eax
.text:00001817                 jnb     short loc_185B
.text:00001819                 mov     ecx, [ebp+var_14]
.text:0000181C                 push    ecx
.text:0000181D                 mov     ecx, [ebp+arg_0]
.text:00001820                 add     ecx, 60h ; '`'
.text:00001823                 call    ??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFileItem>::operator[](uint)
.text:00001828                 movzx   edx, byte ptr [eax+10h]
.text:0000182C                 test    edx, edx
.text:0000182E                 jz      short loc_1841
.text:00001830                 mov     eax, [ebp+var_14]
.text:00001833                 push    eax
.text:00001834                 lea     ecx, [ebp+var_64]
.text:00001837                 call    ??A?$CRecordVector@_N@@QAEAA_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:0000183C                 mov     byte ptr [eax], 0
.text:0000183F                 jmp     short loc_1859
.text:00001841 ; ---------------------------------------------------------------------------
.text:00001841
.text:00001841 loc_1841:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+26Ej
.text:00001841                 mov     ecx, [ebp+var_14]
.text:00001844                 push    ecx
.text:00001845                 lea     ecx, [ebp+var_64]
.text:00001848                 call    ??A?$CRecordVector@_N@@QAEAA_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:0000184D                 mov     byte ptr [eax], 1
.text:00001850                 mov     edx, [ebp+var_6C]
.text:00001853                 add     edx, 1
.text:00001856                 mov     [ebp+var_6C], edx
.text:00001859
.text:00001859 loc_1859:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+27Fj
.text:00001859                 jmp     short loc_1800
.text:0000185B ; ---------------------------------------------------------------------------
.text:0000185B
.text:0000185B loc_185B:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+257j
.text:0000185B                 cmp     [ebp+var_6C], 0
.text:0000185F                 jz      loc_19E5
.text:00001865                 lea     eax, [ebp+var_64]
.text:00001868                 push    eax
.text:00001869                 push    0Eh
.text:0000186B                 mov     ecx, [ebp+var_10]
.text:0000186E                 call    ?WritePropBoolVector@COutArchive@N7z@NArchive@@AAEXEABV?$CRecordVector@_N@@@Z ; NArchive::N7z::COutArchive::WritePropBoolVector(uchar,CRecordVector<bool> const &)
.text:00001873                 lea     ecx, [ebp+var_7C]
.text:00001876                 call    ??0?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::CRecordVector<bool>(void)
.text:0000187B                 mov     byte ptr [ebp+var_4], 3
.text:0000187F                 lea     ecx, [ebp+var_90]
.text:00001885                 call    ??0?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::CRecordVector<bool>(void)
.text:0000188A                 mov     byte ptr [ebp+var_4], 4
.text:0000188E                 mov     ecx, [ebp+var_6C]
.text:00001891                 push    ecx
.text:00001892                 lea     ecx, [ebp+var_7C]
.text:00001895                 call    ?ClearAndSetSize@?$CRecordVector@_N@@QAEXI@Z ; CRecordVector<bool>::ClearAndSetSize(uint)
.text:0000189A                 mov     edx, [ebp+var_6C]
.text:0000189D                 push    edx
.text:0000189E                 lea     ecx, [ebp+var_90]
.text:000018A4                 call    ?ClearAndSetSize@?$CRecordVector@_N@@QAEXI@Z ; CRecordVector<bool>::ClearAndSetSize(uint)
.text:000018A9                 mov     [ebp+var_95], 0
.text:000018B0                 mov     [ebp+var_96], 0
.text:000018B7                 mov     [ebp+var_9C], 0
.text:000018C1                 mov     [ebp+var_14], 0
.text:000018C8                 jmp     short loc_18D3
.text:000018CA ; ---------------------------------------------------------------------------
.text:000018CA
.text:000018CA loc_18CA:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+34Aj
.text:000018CA                                         ; NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+3D0j
.text:000018CA                 mov     eax, [ebp+var_14]
.text:000018CD                 add     eax, 1
.text:000018D0                 mov     [ebp+var_14], eax
.text:000018D3
.text:000018D3 loc_18D3:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+308j
.text:000018D3                 mov     ecx, [ebp+arg_0]
.text:000018D6                 add     ecx, 60h ; '`'
.text:000018D9                 call    ?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CFileItem>::Size(void)
.text:000018DE                 cmp     [ebp+var_14], eax
.text:000018E1                 jnb     loc_1995
.text:000018E7                 mov     ecx, [ebp+var_14]
.text:000018EA                 push    ecx
.text:000018EB                 mov     ecx, [ebp+arg_0]
.text:000018EE                 add     ecx, 60h ; '`'
.text:000018F1                 call    ??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFileItem>::operator[](uint)
.text:000018F6                 mov     [ebp+var_A0], eax
.text:000018FC                 mov     edx, [ebp+var_A0]
.text:00001902                 movzx   eax, byte ptr [edx+10h]
.text:00001906                 test    eax, eax
.text:00001908                 jz      short loc_190C
.text:0000190A                 jmp     short loc_18CA
.text:0000190C ; ---------------------------------------------------------------------------
.text:0000190C
.text:0000190C loc_190C:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+348j
.text:0000190C                 mov     ecx, [ebp+var_A0]
.text:00001912                 movzx   ebx, byte ptr [ecx+11h]
.text:00001916                 neg     ebx
.text:00001918                 sbb     ebx, ebx
.text:0000191A                 add     ebx, 1
.text:0000191D                 mov     edx, [ebp+var_9C]
.text:00001923                 push    edx
.text:00001924                 lea     ecx, [ebp+var_7C]
.text:00001927                 call    ??A?$CRecordVector@_N@@QAEAA_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:0000192C                 mov     [eax], bl
.text:0000192E                 mov     eax, [ebp+var_A0]
.text:00001934                 movzx   ecx, byte ptr [eax+11h]
.text:00001938                 test    ecx, ecx
.text:0000193A                 jnz     short loc_1943
.text:0000193C                 mov     [ebp+var_95], 1
.text:00001943
.text:00001943 loc_1943:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+37Aj
.text:00001943                 mov     edx, [ebp+var_14]
.text:00001946                 push    edx             ; unsigned int
.text:00001947                 mov     ecx, [ebp+arg_0] ; this
.text:0000194A                 call    ?IsItemAnti@CArchiveDatabaseOut@N7z@NArchive@@QBE_NI@Z ; NArchive::N7z::CArchiveDatabaseOut::IsItemAnti(uint)
.text:0000194F                 mov     [ebp+var_A1], al
.text:00001955                 mov     eax, [ebp+var_9C]
.text:0000195B                 push    eax
.text:0000195C                 lea     ecx, [ebp+var_90]
.text:00001962                 call    ??A?$CRecordVector@_N@@QAEAA_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:00001967                 mov     cl, [ebp+var_A1]
.text:0000196D                 mov     [eax], cl
.text:0000196F                 movzx   edx, [ebp+var_A1]
.text:00001976                 test    edx, edx
.text:00001978                 jz      short loc_1981
.text:0000197A                 mov     [ebp+var_96], 1
.text:00001981
.text:00001981 loc_1981:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+3B8j
.text:00001981                 mov     eax, [ebp+var_9C]
.text:00001987                 add     eax, 1
.text:0000198A                 mov     [ebp+var_9C], eax
.text:00001990                 jmp     loc_18CA
.text:00001995 ; ---------------------------------------------------------------------------
.text:00001995
.text:00001995 loc_1995:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+321j
.text:00001995                 movzx   ecx, [ebp+var_95]
.text:0000199C                 test    ecx, ecx
.text:0000199E                 jz      short loc_19AE
.text:000019A0                 lea     edx, [ebp+var_7C]
.text:000019A3                 push    edx
.text:000019A4                 push    0Fh
.text:000019A6                 mov     ecx, [ebp+var_10]
.text:000019A9                 call    ?WritePropBoolVector@COutArchive@N7z@NArchive@@AAEXEABV?$CRecordVector@_N@@@Z ; NArchive::N7z::COutArchive::WritePropBoolVector(uchar,CRecordVector<bool> const &)
.text:000019AE
.text:000019AE loc_19AE:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+3DEj
.text:000019AE                 movzx   eax, [ebp+var_96]
.text:000019B5                 test    eax, eax
.text:000019B7                 jz      short loc_19CA
.text:000019B9                 lea     ecx, [ebp+var_90]
.text:000019BF                 push    ecx
.text:000019C0                 push    10h
.text:000019C2                 mov     ecx, [ebp+var_10]
.text:000019C5                 call    ?WritePropBoolVector@COutArchive@N7z@NArchive@@AAEXEABV?$CRecordVector@_N@@@Z ; NArchive::N7z::COutArchive::WritePropBoolVector(uchar,CRecordVector<bool> const &)
.text:000019CA
.text:000019CA loc_19CA:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+3F7j
.text:000019CA                 mov     byte ptr [ebp+var_4], 3
.text:000019CE                 lea     ecx, [ebp+var_90]
.text:000019D4                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:000019D9                 mov     byte ptr [ebp+var_4], 2
.text:000019DD                 lea     ecx, [ebp+var_7C]
.text:000019E0                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:000019E5
.text:000019E5 loc_19E5:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+29Fj
.text:000019E5                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000019EC                 lea     ecx, [ebp+var_64]
.text:000019EF                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:000019F4                 mov     dword ptr [ebp+var_AC+4], 0
.text:000019FE                 mov     dword ptr [ebp+var_AC], 0
.text:00001A08                 mov     [ebp+var_B0], 0
.text:00001A12                 jmp     short loc_1A23
.text:00001A14 ; ---------------------------------------------------------------------------
.text:00001A14
.text:00001A14 loc_1A14:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+4CAj
.text:00001A14                 mov     edx, [ebp+var_B0]
.text:00001A1A                 add     edx, 1
.text:00001A1D                 mov     [ebp+var_B0], edx
.text:00001A23
.text:00001A23 loc_1A23:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+452j
.text:00001A23                 mov     ecx, [ebp+arg_0]
.text:00001A26                 add     ecx, 60h ; '`'
.text:00001A29                 call    ?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CFileItem>::Size(void)
.text:00001A2E                 cmp     [ebp+var_B0], eax
.text:00001A34                 jnb     short loc_1A8C
.text:00001A36                 mov     eax, [ebp+var_B0]
.text:00001A3C                 push    eax
.text:00001A3D                 mov     ecx, [ebp+arg_0]
.text:00001A40                 add     ecx, 6Ch ; 'l'
.text:00001A43                 call    ??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[](uint)
.text:00001A48                 mov     [ebp+var_B4], eax
.text:00001A4E                 mov     ecx, [ebp+var_B4] ; this
.text:00001A54                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:00001A59                 movzx   ecx, al
.text:00001A5C                 test    ecx, ecx
.text:00001A5E                 jnz     short loc_1A6F
.text:00001A60                 mov     edx, dword ptr [ebp+var_AC+4]
.text:00001A66                 add     edx, 1
.text:00001A69                 mov     dword ptr [ebp+var_AC+4], edx
.text:00001A6F
.text:00001A6F loc_1A6F:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+49Ej
.text:00001A6F                 mov     ecx, [ebp+var_B4] ; this
.text:00001A75                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:00001A7A                 mov     ecx, dword ptr [ebp+var_AC]
.text:00001A80                 lea     edx, [ecx+eax*2+2]
.text:00001A84                 mov     dword ptr [ebp+var_AC], edx
.text:00001A8A                 jmp     short loc_1A14
.text:00001A8C ; ---------------------------------------------------------------------------
.text:00001A8C
.text:00001A8C loc_1A8C:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+474j
.text:00001A8C                 cmp     dword ptr [ebp+var_AC+4], 0
.text:00001A93                 jbe     loc_1BA9
.text:00001A99                 mov     eax, dword ptr [ebp+var_AC]
.text:00001A9F                 add     eax, 1
.text:00001AA2                 mov     dword ptr [ebp+var_AC], eax
.text:00001AA8                 push    10h             ; unsigned int
.text:00001AAA                 mov     ecx, dword ptr [ebp+var_AC]
.text:00001AB0                 xor     edx, edx
.text:00001AB2                 push    edx
.text:00001AB3                 push    ecx
.text:00001AB4                 call    ?GetBigNumberSize@N7z@NArchive@@YGI_K@Z ; NArchive::N7z::GetBigNumberSize(unsigned __int64)
.text:00001AB9                 add     eax, 2
.text:00001ABC                 push    eax             ; unsigned int
.text:00001ABD                 mov     ecx, [ebp+var_10] ; this
.text:00001AC0                 call    ?SkipAlign@COutArchive@N7z@NArchive@@AAEXII@Z ; NArchive::N7z::COutArchive::SkipAlign(uint,uint)
.text:00001AC5                 push    11h             ; unsigned __int8
.text:00001AC7                 mov     ecx, [ebp+var_10] ; this
.text:00001ACA                 call    ?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte(uchar)
.text:00001ACF                 mov     eax, dword ptr [ebp+var_AC]
.text:00001AD5                 xor     ecx, ecx
.text:00001AD7                 push    ecx
.text:00001AD8                 push    eax             ; unsigned __int64
.text:00001AD9                 mov     ecx, [ebp+var_10] ; this
.text:00001ADC                 call    ?WriteNumber@COutArchive@N7z@NArchive@@AAEX_K@Z ; NArchive::N7z::COutArchive::WriteNumber(unsigned __int64)
.text:00001AE1                 push    0               ; unsigned __int8
.text:00001AE3                 mov     ecx, [ebp+var_10] ; this
.text:00001AE6                 call    ?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte(uchar)
.text:00001AEB                 mov     [ebp+var_B8], 0
.text:00001AF5                 jmp     short loc_1B06
.text:00001AF7 ; ---------------------------------------------------------------------------
.text:00001AF7
.text:00001AF7 loc_1AF7:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &):loc_1BA4j
.text:00001AF7                 mov     edx, [ebp+var_B8]
.text:00001AFD                 add     edx, 1
.text:00001B00                 mov     [ebp+var_B8], edx
.text:00001B06
.text:00001B06 loc_1B06:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+535j
.text:00001B06                 mov     ecx, [ebp+arg_0]
.text:00001B09                 add     ecx, 60h ; '`'
.text:00001B0C                 call    ?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CFileItem>::Size(void)
.text:00001B11                 cmp     [ebp+var_B8], eax
.text:00001B17                 jnb     loc_1BA9
.text:00001B1D                 mov     eax, [ebp+var_B8]
.text:00001B23                 push    eax
.text:00001B24                 mov     ecx, [ebp+arg_0]
.text:00001B27                 add     ecx, 6Ch ; 'l'
.text:00001B2A                 call    ??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[](uint)
.text:00001B2F                 mov     [ebp+var_BC], eax
.text:00001B35                 mov     [ebp+var_C0], 0
.text:00001B3F                 jmp     short loc_1B50
.text:00001B41 ; ---------------------------------------------------------------------------
.text:00001B41
.text:00001B41 loc_1B41:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+5E2j
.text:00001B41                 mov     ecx, [ebp+var_C0]
.text:00001B47                 add     ecx, 1
.text:00001B4A                 mov     [ebp+var_C0], ecx
.text:00001B50
.text:00001B50 loc_1B50:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+57Fj
.text:00001B50                 mov     ecx, [ebp+var_BC] ; this
.text:00001B56                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:00001B5B                 cmp     [ebp+var_C0], eax
.text:00001B61                 ja      short loc_1BA4
.text:00001B63                 mov     ecx, [ebp+var_BC]
.text:00001B69                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00001B6E                 mov     edx, [ebp+var_C0]
.text:00001B74                 mov     ax, [eax+edx*2]
.text:00001B78                 mov     [ebp+var_C4], ax
.text:00001B7F                 movzx   ecx, byte ptr [ebp+var_C4]
.text:00001B86                 push    ecx             ; unsigned __int8
.text:00001B87                 mov     ecx, [ebp+var_10] ; this
.text:00001B8A                 call    ?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte(uchar)
.text:00001B8F                 movzx   edx, [ebp+var_C4]
.text:00001B96                 sar     edx, 8
.text:00001B99                 push    edx             ; unsigned __int8
.text:00001B9A                 mov     ecx, [ebp+var_10] ; this
.text:00001B9D                 call    ?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte(uchar)
.text:00001BA2                 jmp     short loc_1B41
.text:00001BA4 ; ---------------------------------------------------------------------------
.text:00001BA4
.text:00001BA4 loc_1BA4:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+5A1j
.text:00001BA4                 jmp     loc_1AF7
.text:00001BA9 ; ---------------------------------------------------------------------------
.text:00001BA9
.text:00001BA9 loc_1BA9:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+4D3j
.text:00001BA9                                         ; NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+557j
.text:00001BA9                 push    12h             ; unsigned __int8
.text:00001BAB                 mov     eax, [ebp+arg_0]
.text:00001BAE                 add     eax, 78h ; 'x'
.text:00001BB1                 push    eax             ; struct NArchive::N7z::CUInt64DefVector *
.text:00001BB2                 mov     ecx, [ebp+var_10] ; this
.text:00001BB5                 call    ?WriteUInt64DefVector@COutArchive@N7z@NArchive@@AAEXABUCUInt64DefVector@23@E@Z ; NArchive::N7z::COutArchive::WriteUInt64DefVector(NArchive::N7z::CUInt64DefVector const &,uchar)
.text:00001BBA                 push    13h             ; unsigned __int8
.text:00001BBC                 mov     ecx, [ebp+arg_0]
.text:00001BBF                 add     ecx, 90h ; 'É'
.text:00001BC5                 push    ecx             ; struct NArchive::N7z::CUInt64DefVector *
.text:00001BC6                 mov     ecx, [ebp+var_10] ; this
.text:00001BC9                 call    ?WriteUInt64DefVector@COutArchive@N7z@NArchive@@AAEXABUCUInt64DefVector@23@E@Z ; NArchive::N7z::COutArchive::WriteUInt64DefVector(NArchive::N7z::CUInt64DefVector const &,uchar)
.text:00001BCE                 push    14h             ; unsigned __int8
.text:00001BD0                 mov     edx, [ebp+arg_0]
.text:00001BD3                 add     edx, 0A8h ; '¿'
.text:00001BD9                 push    edx             ; struct NArchive::N7z::CUInt64DefVector *
.text:00001BDA                 mov     ecx, [ebp+var_10] ; this
.text:00001BDD                 call    ?WriteUInt64DefVector@COutArchive@N7z@NArchive@@AAEXABUCUInt64DefVector@23@E@Z ; NArchive::N7z::COutArchive::WriteUInt64DefVector(NArchive::N7z::CUInt64DefVector const &,uchar)
.text:00001BE2                 push    18h             ; unsigned __int8
.text:00001BE4                 mov     eax, [ebp+arg_0]
.text:00001BE7                 add     eax, 0C0h ; '+'
.text:00001BEC                 push    eax             ; struct NArchive::N7z::CUInt64DefVector *
.text:00001BED                 mov     ecx, [ebp+var_10] ; this
.text:00001BF0                 call    ?WriteUInt64DefVector@COutArchive@N7z@NArchive@@AAEXABUCUInt64DefVector@23@E@Z ; NArchive::N7z::COutArchive::WriteUInt64DefVector(NArchive::N7z::CUInt64DefVector const &,uchar)
.text:00001BF5                 lea     ecx, [ebp+var_D4]
.text:00001BFB                 call    ??0?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::CRecordVector<bool>(void)
.text:00001C00                 mov     [ebp+var_4], 5
.text:00001C07                 mov     ecx, [ebp+arg_0]
.text:00001C0A                 add     ecx, 60h ; '`'
.text:00001C0D                 call    ?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CFileItem>::Size(void)
.text:00001C12                 push    eax
.text:00001C13                 lea     ecx, [ebp+var_D4]
.text:00001C19                 call    ?ClearAndSetSize@?$CRecordVector@_N@@QAEXI@Z ; CRecordVector<bool>::ClearAndSetSize(uint)
.text:00001C1E                 mov     [ebp+var_DC], 0
.text:00001C28                 mov     [ebp+var_14], 0
.text:00001C2F                 jmp     short loc_1C3A
.text:00001C31 ; ---------------------------------------------------------------------------
.text:00001C31
.text:00001C31 loc_1C31:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &):loc_1C93j
.text:00001C31                 mov     ecx, [ebp+var_14]
.text:00001C34                 add     ecx, 1
.text:00001C37                 mov     [ebp+var_14], ecx
.text:00001C3A
.text:00001C3A loc_1C3A:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+66Fj
.text:00001C3A                 mov     ecx, [ebp+arg_0]
.text:00001C3D                 add     ecx, 60h ; '`'
.text:00001C40                 call    ?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CFileItem>::Size(void)
.text:00001C45                 cmp     [ebp+var_14], eax
.text:00001C48                 jnb     short loc_1C95
.text:00001C4A                 mov     edx, [ebp+var_14]
.text:00001C4D                 push    edx
.text:00001C4E                 mov     ecx, [ebp+arg_0]
.text:00001C51                 add     ecx, 60h ; '`'
.text:00001C54                 call    ??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFileItem>::operator[](uint)
.text:00001C59                 mov     al, [eax+13h]
.text:00001C5C                 mov     [ebp+var_DD], al
.text:00001C62                 mov     ecx, [ebp+var_14]
.text:00001C65                 push    ecx
.text:00001C66                 lea     ecx, [ebp+var_D4]
.text:00001C6C                 call    ??A?$CRecordVector@_N@@QAEAA_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:00001C71                 mov     dl, [ebp+var_DD]
.text:00001C77                 mov     [eax], dl
.text:00001C79                 movzx   eax, [ebp+var_DD]
.text:00001C80                 test    eax, eax
.text:00001C82                 jz      short loc_1C93
.text:00001C84                 mov     ecx, [ebp+var_DC]
.text:00001C8A                 add     ecx, 1
.text:00001C8D                 mov     [ebp+var_DC], ecx
.text:00001C93
.text:00001C93 loc_1C93:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+6C2j
.text:00001C93                 jmp     short loc_1C31
.text:00001C95 ; ---------------------------------------------------------------------------
.text:00001C95
.text:00001C95 loc_1C95:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+688j
.text:00001C95                 cmp     [ebp+var_DC], 0
.text:00001C9C                 jz      short loc_1D11
.text:00001C9E                 push    4
.text:00001CA0                 push    15h
.text:00001CA2                 mov     edx, [ebp+var_DC]
.text:00001CA8                 push    edx
.text:00001CA9                 lea     eax, [ebp+var_D4]
.text:00001CAF                 push    eax
.text:00001CB0                 mov     ecx, [ebp+var_10]
.text:00001CB3                 call    ?WriteAlignedBoolHeader@COutArchive@N7z@NArchive@@AAEXABV?$CRecordVector@_N@@IEI@Z ; NArchive::N7z::COutArchive::WriteAlignedBoolHeader(CRecordVector<bool> const &,uint,uchar,uint)
.text:00001CB8                 mov     [ebp+var_14], 0
.text:00001CBF                 jmp     short loc_1CCA
.text:00001CC1 ; ---------------------------------------------------------------------------
.text:00001CC1
.text:00001CC1 loc_1CC1:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &):loc_1D0Fj
.text:00001CC1                 mov     ecx, [ebp+var_14]
.text:00001CC4                 add     ecx, 1
.text:00001CC7                 mov     [ebp+var_14], ecx
.text:00001CCA
.text:00001CCA loc_1CCA:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+6FFj
.text:00001CCA                 mov     ecx, [ebp+arg_0]
.text:00001CCD                 add     ecx, 60h ; '`'
.text:00001CD0                 call    ?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CFileItem>::Size(void)
.text:00001CD5                 cmp     [ebp+var_14], eax
.text:00001CD8                 jnb     short loc_1D11
.text:00001CDA                 mov     edx, [ebp+var_14]
.text:00001CDD                 push    edx
.text:00001CDE                 mov     ecx, [ebp+arg_0]
.text:00001CE1                 add     ecx, 60h ; '`'
.text:00001CE4                 call    ??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFileItem>::operator[](uint)
.text:00001CE9                 mov     [ebp+var_E4], eax
.text:00001CEF                 mov     eax, [ebp+var_E4]
.text:00001CF5                 movzx   ecx, byte ptr [eax+13h]
.text:00001CF9                 test    ecx, ecx
.text:00001CFB                 jz      short loc_1D0F
.text:00001CFD                 mov     edx, [ebp+var_E4]
.text:00001D03                 mov     eax, [edx+8]
.text:00001D06                 push    eax             ; unsigned int
.text:00001D07                 mov     ecx, [ebp+var_10] ; this
.text:00001D0A                 call    ?WriteUInt32@COutArchive@N7z@NArchive@@AAEXI@Z ; NArchive::N7z::COutArchive::WriteUInt32(uint)
.text:00001D0F
.text:00001D0F loc_1D0F:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+73Bj
.text:00001D0F                 jmp     short loc_1CC1
.text:00001D11 ; ---------------------------------------------------------------------------
.text:00001D11
.text:00001D11 loc_1D11:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+6DCj
.text:00001D11                                         ; NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+718j
.text:00001D11                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001D18                 lea     ecx, [ebp+var_D4]
.text:00001D1E                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:00001D23                 push    0               ; unsigned __int8
.text:00001D25                 mov     ecx, [ebp+var_10] ; this
.text:00001D28                 call    ?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte(uchar)
.text:00001D2D                 push    0               ; unsigned __int8
.text:00001D2F                 mov     ecx, [ebp+var_10] ; this
.text:00001D32                 call    ?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte(uchar)
.text:00001D37
.text:00001D37 loc_1D37:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+1E7j
.text:00001D37                 push    edx
.text:00001D38                 mov     ecx, ebp
.text:00001D3A                 push    eax
.text:00001D3B                 lea     edx, $LN60
.text:00001D41                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001D46                 pop     eax
.text:00001D47                 pop     edx
.text:00001D48                 mov     ecx, [ebp+var_C]
.text:00001D4B                 mov     large fs:0, ecx
.text:00001D52                 pop     ecx
.text:00001D53                 pop     edi
.text:00001D54                 pop     ebx
.text:00001D55                 add     esp, 0E4h
.text:00001D5B                 cmp     ebp, esp
.text:00001D5D                 call    __RTC_CheckEsp
.text:00001D62                 mov     esp, ebp
.text:00001D64                 pop     ebp
.text:00001D65                 retn    8
.text:00001D65 ?WriteHeader@COutArchive@N7z@NArchive@@AAEXABUCArchiveDatabaseOut@23@AA_K@Z endp
.text:00001D65
.text:00001D65 ; ---------------------------------------------------------------------------
.text:00001D68 $LN60           dd 6                    ; DATA XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+77Bo
.text:00001D6C                 dd offset $LN59
.text:00001D70 $LN59           dd 0FFFFFFD4h, 0Ch      ; DATA XREF: .text:00001D6Co
.text:00001D78                 dd offset $LN52         ; "unpackSizes"
.text:00001D7C                 dd 0FFFFFFB4h, 18h
.text:00001D84                 dd offset $LN53         ; "digests"
.text:00001D88                 dd 0FFFFFF9Ch, 0Ch
.text:00001D90                 dd offset $LN54         ; "emptyStreamVector"
.text:00001D94                 dd 0FFFFFF84h, 0Ch
.text:00001D9C                 dd offset $LN55         ; "emptyFileVector"
.text:00001DA0                 dd 0FFFFFF70h, 0Ch
.text:00001DA8                 dd offset $LN56         ; "antiVector"
.text:00001DAC                 dd 0FFFFFF2Ch, 0Ch
.text:00001DB4                 dd offset $LN57         ; "boolVector"
.text:00001DB8 $LN57           db 'boolVector',0       ; DATA XREF: .text:00001DB4o
.text:00001DC3 $LN56           db 'antiVector',0       ; DATA XREF: .text:00001DA8o
.text:00001DCE $LN55           db 'emptyFileVector',0  ; DATA XREF: .text:00001D9Co
.text:00001DDE $LN54           db 'emptyStreamVector',0 ; DATA XREF: .text:00001D90o
.text:00001DF0 $LN53           db 'digests',0          ; DATA XREF: .text:00001D84o
.text:00001DF8 $LN52           db 'unpackSizes',0      ; DATA XREF: .text:00001D78o
.text:00001E04                 align 10h
.text:00001E10
.text:00001E10 ; =============== S U B R O U T I N E =======================================
.text:00001E10
.text:00001E10 ; Attributes: bp-based frame
.text:00001E10
.text:00001E10 ; __int32 __thiscall NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::COutArchive *this, const struct NArchive::N7z::CArchiveDatabaseOut *, const struct NArchive::N7z::CCompressionMethodMode *, const struct NArchive::N7z::CHeaderOptions *)
.text:00001E10                 public ?WriteDatabase@COutArchive@N7z@NArchive@@QAEJABUCArchiveDatabaseOut@23@PBUCCompressionMethodMode@23@ABUCHeaderOptions@23@@Z
.text:00001E10 ?WriteDatabase@COutArchive@N7z@NArchive@@QAEJABUCArchiveDatabaseOut@23@PBUCCompressionMethodMode@23@ABUCHeaderOptions@23@@Z proc near
.text:00001E10
.text:00001E10 var_200         = dword ptr -200h
.text:00001E10 var_1FC         = dword ptr -1FCh
.text:00001E10 var_1F8         = dword ptr -1F8h
.text:00001E10 var_1F4         = dword ptr -1F4h
.text:00001E10 var_1F0         = byte ptr -1F0h
.text:00001E10 var_1D8         = dword ptr -1D8h
.text:00001E10 var_1D4         = dword ptr -1D4h
.text:00001E10 var_1D0         = dword ptr -1D0h
.text:00001E10 var_1CC         = dword ptr -1CCh
.text:00001E10 var_1C8         = dword ptr -1C8h
.text:00001E10 var_1C0         = dword ptr -1C0h
.text:00001E10 var_1BC         = dword ptr -1BCh
.text:00001E10 var_1B8         = dword ptr -1B8h
.text:00001E10 var_1B4         = dword ptr -1B4h
.text:00001E10 var_1B0         = dword ptr -1B0h
.text:00001E10 var_1A4         = dword ptr -1A4h
.text:00001E10 var_1A0         = dword ptr -1A0h
.text:00001E10 var_19C         = dword ptr -19Ch
.text:00001E10 var_194         = byte ptr -194h
.text:00001E10 var_15C         = dword ptr -15Ch
.text:00001E10 var_148         = dword ptr -148h
.text:00001E10 var_134         = byte ptr -134h
.text:00001E10 var_78          = byte ptr -78h
.text:00001E10 var_57          = byte ptr -57h
.text:00001E10 var_54          = byte ptr -54h
.text:00001E10 var_40          = byte ptr -40h
.text:00001E10 var_31          = byte ptr -31h
.text:00001E10 var_30          = dword ptr -30h
.text:00001E10 var_2C          = dword ptr -2Ch
.text:00001E10 var_28          = dword ptr -28h
.text:00001E10 var_20          = qword ptr -20h
.text:00001E10 var_14          = dword ptr -14h
.text:00001E10 var_10          = dword ptr -10h
.text:00001E10 var_C           = dword ptr -0Ch
.text:00001E10 var_4           = dword ptr -4
.text:00001E10 arg_0           = dword ptr  8
.text:00001E10 arg_4           = dword ptr  0Ch
.text:00001E10 arg_8           = dword ptr  10h
.text:00001E10
.text:00001E10                 push    ebp
.text:00001E11                 mov     ebp, esp
.text:00001E13                 push    0FFFFFFFFh
.text:00001E15                 push    offset __ehhandler$?WriteDatabase@COutArchive@N7z@NArchive@@QAEJABUCArchiveDatabaseOut@23@PBUCCompressionMethodMode@23@ABUCHeaderOptions@23@@Z
.text:00001E1A                 mov     eax, large fs:0
.text:00001E20                 push    eax
.text:00001E21                 sub     esp, 1F4h
.text:00001E27                 push    esi
.text:00001E28                 push    edi
.text:00001E29                 push    ecx
.text:00001E2A                 lea     edi, [ebp+var_200]
.text:00001E30                 mov     ecx, 7Dh ; '}'
.text:00001E35                 mov     eax, 0CCCCCCCCh
.text:00001E3A                 rep stosd
.text:00001E3C                 pop     ecx
.text:00001E3D                 mov     eax, dword ptr ds:___security_cookie
.text:00001E42                 xor     eax, ebp
.text:00001E44                 mov     [ebp+var_10], eax
.text:00001E47                 push    eax
.text:00001E48                 lea     eax, [ebp+var_C]
.text:00001E4B                 mov     large fs:0, eax
.text:00001E51                 mov     [ebp+var_14], ecx
.text:00001E54                 mov     ecx, [ebp+arg_0] ; this
.text:00001E57                 call    ?CheckNumFiles@CArchiveDatabaseOut@N7z@NArchive@@QBE_NXZ ; NArchive::N7z::CArchiveDatabaseOut::CheckNumFiles(void)
.text:00001E5C                 movzx   eax, al
.text:00001E5F                 test    eax, eax
.text:00001E61                 jnz     short loc_1E6D
.text:00001E63                 mov     eax, 80004005h
.text:00001E68                 jmp     loc_232C
.text:00001E6D ; ---------------------------------------------------------------------------
.text:00001E6D
.text:00001E6D loc_1E6D:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+51j
.text:00001E6D                 mov     ecx, [ebp+arg_0] ; this
.text:00001E70                 call    ?IsEmpty@CArchiveDatabaseOut@N7z@NArchive@@QBE_NXZ ; NArchive::N7z::CArchiveDatabaseOut::IsEmpty(void)
.text:00001E75                 movzx   ecx, al
.text:00001E78                 test    ecx, ecx
.text:00001E7A                 jz      short loc_1EA9
.text:00001E7C                 mov     [ebp+var_30], 0
.text:00001E83                 mov     [ebp+var_2C], 0
.text:00001E8A                 mov     dword ptr [ebp+var_20], 0
.text:00001E91                 mov     dword ptr [ebp+var_20+4], 0
.text:00001E98                 xor     edx, edx
.text:00001E9A                 xor     ecx, ecx
.text:00001E9C                 call    @CrcCalc@8      ; CrcCalc(x,x)
.text:00001EA1                 mov     [ebp+var_28], eax
.text:00001EA4                 jmp     loc_229D
.text:00001EA9 ; ---------------------------------------------------------------------------
.text:00001EA9
.text:00001EA9 loc_1EA9:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+6Aj
.text:00001EA9                 mov     [ebp+var_31], 0
.text:00001EAD                 cmp     [ebp+arg_4], 0
.text:00001EB1                 jz      short loc_1EC9
.text:00001EB3                 mov     ecx, [ebp+arg_4] ; this
.text:00001EB6                 call    ?IsEmpty@CCompressionMethodMode@N7z@NArchive@@QBE_NXZ ; NArchive::N7z::CCompressionMethodMode::IsEmpty(void)
.text:00001EBB                 movzx   edx, al
.text:00001EBE                 test    edx, edx
.text:00001EC0                 jz      short loc_1EC9
.text:00001EC2                 mov     [ebp+arg_4], 0
.text:00001EC9
.text:00001EC9 loc_1EC9:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+A1j
.text:00001EC9                                         ; NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+B0j
.text:00001EC9                 cmp     [ebp+arg_4], 0
.text:00001ECD                 jz      short loc_1EE8
.text:00001ECF                 mov     eax, [ebp+arg_4]
.text:00001ED2                 movzx   ecx, byte ptr [eax+21h]
.text:00001ED6                 test    ecx, ecx
.text:00001ED8                 jnz     short loc_1EE4
.text:00001EDA                 mov     edx, [ebp+arg_8]
.text:00001EDD                 movzx   eax, byte ptr [edx]
.text:00001EE0                 test    eax, eax
.text:00001EE2                 jz      short loc_1EE8
.text:00001EE4
.text:00001EE4 loc_1EE4:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+C8j
.text:00001EE4                 mov     [ebp+var_31], 1
.text:00001EE8
.text:00001EE8 loc_1EE8:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+BDj
.text:00001EE8                                         ; NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+D2j
.text:00001EE8                 mov     ecx, [ebp+var_14]
.text:00001EEB                 add     ecx, 54h ; 'T'
.text:00001EEE                 call    ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *(void)
.text:00001EF3                 push    eax             ; struct ISequentialOutStream *
.text:00001EF4                 mov     ecx, [ebp+var_14]
.text:00001EF7                 add     ecx, 18h        ; this
.text:00001EFA                 call    ?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z ; COutBuffer::SetStream(ISequentialOutStream *)
.text:00001EFF                 mov     ecx, [ebp+var_14]
.text:00001F02                 add     ecx, 18h        ; this
.text:00001F05                 call    ?Init@COutBuffer@@QAEXXZ ; COutBuffer::Init(void)
.text:00001F0A                 mov     ecx, [ebp+var_14]
.text:00001F0D                 mov     dword ptr [ecx+10h], 0FFFFFFFFh
.text:00001F14                 mov     edx, [ebp+var_14]
.text:00001F17                 mov     al, [ebp+var_31]
.text:00001F1A                 mov     [edx+8], al
.text:00001F1D                 mov     ecx, [ebp+var_14]
.text:00001F20                 mov     byte ptr [ecx+9], 1
.text:00001F24                 mov     edx, [ebp+var_14]
.text:00001F27                 mov     dword ptr [edx+0Ch], 0
.text:00001F2E                 lea     eax, [ebp+var_20]
.text:00001F31                 push    eax             ; unsigned __int64 *
.text:00001F32                 mov     ecx, [ebp+arg_0]
.text:00001F35                 push    ecx             ; struct NArchive::N7z::CArchiveDatabaseOut *
.text:00001F36                 mov     ecx, [ebp+var_14] ; this
.text:00001F39                 call    ?WriteHeader@COutArchive@N7z@NArchive@@AAEXABUCArchiveDatabaseOut@23@AA_K@Z ; NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)
.text:00001F3E                 movzx   edx, [ebp+var_31]
.text:00001F42                 test    edx, edx
.text:00001F44                 jz      loc_225B
.text:00001F4A                 mov     eax, [ebp+var_14]
.text:00001F4D                 mov     ecx, [eax+0Ch]
.text:00001F50                 push    ecx
.text:00001F51                 lea     ecx, [ebp+var_40]
.text:00001F54                 call    ??0?$CBuffer@E@@QAE@I@Z ; CBuffer<uchar>::CBuffer<uchar>(uint)
.text:00001F59                 mov     [ebp+var_4], 0
.text:00001F60                 mov     edx, [ebp+var_14]
.text:00001F63                 mov     eax, [edx+0Ch]
.text:00001F66                 push    eax             ; unsigned int
.text:00001F67                 lea     ecx, [ebp+var_40]
.text:00001F6A                 call    ??B?$CBuffer@E@@QAEPAEXZ ; CBuffer<uchar>::operator uchar *(void)
.text:00001F6F                 push    eax             ; unsigned __int8 *
.text:00001F70                 mov     ecx, [ebp+var_14]
.text:00001F73                 add     ecx, 40h ; '@'  ; this
.text:00001F76                 call    ?Init@CWriteBufferLoc@N7z@NArchive@@QAEXPAEI@Z ; NArchive::N7z::CWriteBufferLoc::Init(uchar *,uint)
.text:00001F7B                 mov     ecx, [ebp+var_14]
.text:00001F7E                 mov     byte ptr [ecx+8], 0
.text:00001F82                 mov     edx, [ebp+var_14]
.text:00001F85                 mov     byte ptr [edx+9], 0
.text:00001F89                 lea     eax, [ebp+var_20]
.text:00001F8C                 push    eax             ; unsigned __int64 *
.text:00001F8D                 mov     ecx, [ebp+arg_0]
.text:00001F90                 push    ecx             ; struct NArchive::N7z::CArchiveDatabaseOut *
.text:00001F91                 mov     ecx, [ebp+var_14] ; this
.text:00001F94                 call    ?WriteHeader@COutArchive@N7z@NArchive@@AAEXABUCArchiveDatabaseOut@23@AA_K@Z ; NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)
.text:00001F99                 mov     ecx, [ebp+var_14]
.text:00001F9C                 add     ecx, 40h ; '@'  ; this
.text:00001F9F                 call    ?GetPos@CWriteBufferLoc@N7z@NArchive@@QBEIXZ ; NArchive::N7z::CWriteBufferLoc::GetPos(void)
.text:00001FA4                 mov     edx, [ebp+var_14]
.text:00001FA7                 cmp     [edx+0Ch], eax
.text:00001FAA                 jz      short loc_1FD0
.text:00001FAC                 mov     [ebp+var_1CC], 80004005h
.text:00001FB6                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001FBD                 lea     ecx, [ebp+var_40]
.text:00001FC0                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:00001FC5                 mov     eax, [ebp+var_1CC]
.text:00001FCB                 jmp     loc_232C
.text:00001FD0 ; ---------------------------------------------------------------------------
.text:00001FD0
.text:00001FD0 loc_1FD0:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+19Aj
.text:00001FD0                 lea     ecx, [ebp+var_78] ; this
.text:00001FD3                 call    ??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCompressionMethodMode::CCompressionMethodMode(void)
.text:00001FD8                 mov     byte ptr [ebp+var_4], 1
.text:00001FDC                 mov     eax, [ebp+arg_4]
.text:00001FDF                 mov     cl, [eax+21h]
.text:00001FE2                 mov     [ebp+var_57], cl
.text:00001FE5                 mov     edx, [ebp+arg_4]
.text:00001FE8                 add     edx, 24h ; '$'
.text:00001FEB                 push    edx
.text:00001FEC                 lea     ecx, [ebp+var_54]
.text:00001FEF                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:00001FF4                 mov     eax, [ebp+arg_8]
.text:00001FF7                 movzx   ecx, byte ptr [eax]
.text:00001FFA                 test    ecx, ecx
.text:00001FFC                 jz      short loc_2009
.text:00001FFE                 mov     edx, [ebp+arg_4]
.text:00002001                 mov     [ebp+var_1F4], edx
.text:00002007                 jmp     short loc_2012
.text:00002009 ; ---------------------------------------------------------------------------
.text:00002009
.text:00002009 loc_2009:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+1ECj
.text:00002009                 lea     eax, [ebp+var_78]
.text:0000200C                 mov     [ebp+var_1F4], eax
.text:00002012
.text:00002012 loc_2012:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+1F7j
.text:00002012                 mov     ecx, [ebp+var_1F4]
.text:00002018                 mov     [ebp+var_1D0], ecx
.text:0000201E                 mov     edx, [ebp+var_1D0]
.text:00002024                 push    edx             ; struct NArchive::N7z::CCompressionMethodMode *
.text:00002025                 lea     ecx, [ebp+var_134] ; this
.text:0000202B                 call    ??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z ; NArchive::N7z::CEncoder::CEncoder(NArchive::N7z::CCompressionMethodMode const &)
.text:00002030                 mov     byte ptr [ebp+var_4], 2
.text:00002034                 lea     ecx, [ebp+var_148]
.text:0000203A                 call    ??0?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>(void)
.text:0000203F                 mov     byte ptr [ebp+var_4], 3
.text:00002043                 lea     ecx, [ebp+var_15C]
.text:00002049                 call    ??0?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CFolder>::CObjectVector<NArchive::N7z::CFolder>(void)
.text:0000204E                 mov     byte ptr [ebp+var_4], 4
.text:00002052                 lea     ecx, [ebp+var_194] ; this
.text:00002058                 call    ??0COutFolders@N7z@NArchive@@QAE@XZ ; NArchive::N7z::COutFolders::COutFolders(void)
.text:0000205D                 mov     byte ptr [ebp+var_4], 5
.text:00002061                 lea     eax, [ebp+var_194]
.text:00002067                 push    eax
.text:00002068                 lea     ecx, [ebp+var_15C]
.text:0000206E                 push    ecx
.text:0000206F                 lea     edx, [ebp+var_148]
.text:00002075                 push    edx
.text:00002076                 lea     eax, [ebp+var_40]
.text:00002079                 push    eax
.text:0000207A                 lea     ecx, [ebp+var_134]
.text:00002080                 push    ecx
.text:00002081                 mov     ecx, [ebp+var_14]
.text:00002084                 call    ?EncodeStream@COutArchive@N7z@NArchive@@AAEJAAVCEncoder@23@ABV?$CBuffer@E@@AAV?$CRecordVector@_K@@AAV?$CObjectVector@UCFolder@N7z@NArchive@@@@AAUCOutFolders@23@@Z ; NArchive::N7z::COutArchive::EncodeStream(NArchive::N7z::CEncoder &,CBuffer<uchar> const &,CRecordVector<unsigned __int64> &,CObjectVector<NArchive::N7z::CFolder> &,NArchive::N7z::COutFolders &)
.text:00002089                 mov     [ebp+var_19C], eax
.text:0000208F                 cmp     [ebp+var_19C], 0
.text:00002096                 jz      short loc_2106
.text:00002098                 mov     edx, [ebp+var_19C]
.text:0000209E                 mov     [ebp+var_1D4], edx
.text:000020A4                 mov     byte ptr [ebp+var_4], 4
.text:000020A8                 lea     ecx, [ebp+var_194] ; this
.text:000020AE                 call    ??1COutFolders@N7z@NArchive@@QAE@XZ ; NArchive::N7z::COutFolders::~COutFolders(void)
.text:000020B3                 mov     byte ptr [ebp+var_4], 3
.text:000020B7                 lea     ecx, [ebp+var_15C]
.text:000020BD                 call    ??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CFolder>::~CObjectVector<NArchive::N7z::CFolder>(void)
.text:000020C2                 mov     byte ptr [ebp+var_4], 2
.text:000020C6                 lea     ecx, [ebp+var_148]
.text:000020CC                 call    ??1?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text:000020D1                 mov     byte ptr [ebp+var_4], 1
.text:000020D5                 lea     ecx, [ebp+var_134] ; this
.text:000020DB                 call    ??1CEncoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CEncoder::~CEncoder(void)
.text:000020E0                 mov     byte ptr [ebp+var_4], 0
.text:000020E4                 lea     ecx, [ebp+var_78] ; this
.text:000020E7                 call    ??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:000020EC                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000020F3                 lea     ecx, [ebp+var_40]
.text:000020F6                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:000020FB                 mov     eax, [ebp+var_1D4]
.text:00002101                 jmp     loc_232C
.text:00002106 ; ---------------------------------------------------------------------------
.text:00002106
.text:00002106 loc_2106:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+286j
.text:00002106                 mov     eax, [ebp+var_14]
.text:00002109                 mov     byte ptr [eax+9], 1
.text:0000210D                 lea     ecx, [ebp+var_15C]
.text:00002113                 call    ?Size@?$CObjectVector@UCFolder@N7z@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::N7z::CFolder>::Size(void)
.text:00002118                 test    eax, eax
.text:0000211A                 jnz     short loc_2137
.text:0000211C                 mov     [ebp+var_1D8], 1
.text:00002126                 push    offset __TI1H
.text:0000212B                 lea     ecx, [ebp+var_1D8]
.text:00002131                 push    ecx
.text:00002132                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:00002137 ; ---------------------------------------------------------------------------
.text:00002137
.text:00002137 loc_2137:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+30Aj
.text:00002137                 push    0
.text:00002139                 push    17h             ; unsigned __int64
.text:0000213B                 mov     ecx, [ebp+var_14] ; this
.text:0000213E                 call    ?WriteID@COutArchive@N7z@NArchive@@AAEX_K@Z ; NArchive::N7z::COutArchive::WriteID(unsigned __int64)
.text:00002143                 lea     ecx, [ebp+var_1F0] ; this
.text:00002149                 call    ??0CUInt32DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt32DefVector::CUInt32DefVector(void)
.text:0000214E                 mov     [ebp+var_1F8], eax
.text:00002154                 mov     edx, [ebp+var_1F8]
.text:0000215A                 mov     [ebp+var_1FC], edx
.text:00002160                 mov     byte ptr [ebp+var_4], 6
.text:00002164                 mov     eax, [ebp+var_1FC]
.text:0000216A                 push    eax             ; struct NArchive::N7z::CUInt32DefVector *
.text:0000216B                 lea     ecx, [ebp+var_148]
.text:00002171                 push    ecx             ; int
.text:00002172                 mov     edx, dword ptr [ebp+var_20+4]
.text:00002175                 push    edx
.text:00002176                 mov     eax, dword ptr [ebp+var_20]
.text:00002179                 push    eax             ; unsigned __int64
.text:0000217A                 mov     ecx, [ebp+var_14]
.text:0000217D                 call    ?WritePackInfo@COutArchive@N7z@NArchive@@AAEX_KABV?$CRecordVector@_K@@ABUCUInt32DefVector@23@@Z ; NArchive::N7z::COutArchive::WritePackInfo(unsigned __int64,CRecordVector<unsigned __int64> const &,NArchive::N7z::CUInt32DefVector const &)
.text:00002182                 mov     byte ptr [ebp+var_4], 5
.text:00002186                 lea     ecx, [ebp+var_1F0] ; this
.text:0000218C                 call    ??1CUInt32DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt32DefVector::~CUInt32DefVector(void)
.text:00002191                 lea     ecx, [ebp+var_194]
.text:00002197                 push    ecx             ; struct NArchive::N7z::CUInt32DefVector *
.text:00002198                 lea     edx, [ebp+var_15C]
.text:0000219E                 push    edx             ; int
.text:0000219F                 mov     ecx, [ebp+var_14]
.text:000021A2                 call    ?WriteUnpackInfo@COutArchive@N7z@NArchive@@AAEXABV?$CObjectVector@UCFolder@N7z@NArchive@@@@ABUCOutFolders@23@@Z ; NArchive::N7z::COutArchive::WriteUnpackInfo(CObjectVector<NArchive::N7z::CFolder> const &,NArchive::N7z::COutFolders const &)
.text:000021A7                 push    0               ; unsigned __int8
.text:000021A9                 mov     ecx, [ebp+var_14] ; this
.text:000021AC                 call    ?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte(uchar)
.text:000021B1                 mov     [ebp+var_1A0], 0
.text:000021BB                 jmp     short loc_21CC
.text:000021BD ; ---------------------------------------------------------------------------
.text:000021BD
.text:000021BD loc_21BD:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+3F2j
.text:000021BD                 mov     eax, [ebp+var_1A0]
.text:000021C3                 add     eax, 1
.text:000021C6                 mov     [ebp+var_1A0], eax
.text:000021CC
.text:000021CC loc_21CC:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+3ABj
.text:000021CC                 lea     ecx, [ebp+var_148]
.text:000021D2                 call    ?Size@?$CRecordVector@_K@@QBEIXZ ; CRecordVector<unsigned __int64>::Size(void)
.text:000021D7                 cmp     [ebp+var_1A0], eax
.text:000021DD                 jnb     short loc_2204
.text:000021DF                 mov     ecx, [ebp+var_1A0]
.text:000021E5                 push    ecx
.text:000021E6                 lea     ecx, [ebp+var_148]
.text:000021EC                 call    ??A?$CRecordVector@_K@@QAEAA_KI@Z ; CRecordVector<unsigned __int64>::operator[](uint)
.text:000021F1                 mov     edx, dword ptr [ebp+var_20]
.text:000021F4                 add     edx, [eax]
.text:000021F6                 mov     ecx, dword ptr [ebp+var_20+4]
.text:000021F9                 adc     ecx, [eax+4]
.text:000021FC                 mov     dword ptr [ebp+var_20], edx
.text:000021FF                 mov     dword ptr [ebp+var_20+4], ecx
.text:00002202                 jmp     short loc_21BD
.text:00002204 ; ---------------------------------------------------------------------------
.text:00002204
.text:00002204 loc_2204:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+3CDj
.text:00002204                 mov     byte ptr [ebp+var_4], 4
.text:00002208                 lea     ecx, [ebp+var_194] ; this
.text:0000220E                 call    ??1COutFolders@N7z@NArchive@@QAE@XZ ; NArchive::N7z::COutFolders::~COutFolders(void)
.text:00002213                 mov     byte ptr [ebp+var_4], 3
.text:00002217                 lea     ecx, [ebp+var_15C]
.text:0000221D                 call    ??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CFolder>::~CObjectVector<NArchive::N7z::CFolder>(void)
.text:00002222                 mov     byte ptr [ebp+var_4], 2
.text:00002226                 lea     ecx, [ebp+var_148]
.text:0000222C                 call    ??1?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text:00002231                 mov     byte ptr [ebp+var_4], 1
.text:00002235                 lea     ecx, [ebp+var_134] ; this
.text:0000223B                 call    ??1CEncoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CEncoder::~CEncoder(void)
.text:00002240                 mov     byte ptr [ebp+var_4], 0
.text:00002244                 lea     ecx, [ebp+var_78] ; this
.text:00002247                 call    ??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:0000224C                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002253                 lea     ecx, [ebp+var_40]
.text:00002256                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:0000225B
.text:0000225B loc_225B:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+134j
.text:0000225B                 mov     ecx, [ebp+var_14]
.text:0000225E                 add     ecx, 18h        ; this
.text:00002261                 call    ?Flush@COutBuffer@@QAEJXZ ; COutBuffer::Flush(void)
.text:00002266                 mov     [ebp+var_1A4], eax
.text:0000226C                 cmp     [ebp+var_1A4], 0
.text:00002273                 jz      short loc_2280
.text:00002275                 mov     eax, [ebp+var_1A4]
.text:0000227B                 jmp     loc_232C
.text:00002280 ; ---------------------------------------------------------------------------
.text:00002280
.text:00002280 loc_2280:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+463j
.text:00002280                 mov     edx, [ebp+var_14]
.text:00002283                 mov     eax, [edx+10h]
.text:00002286                 xor     eax, 0FFFFFFFFh
.text:00002289                 mov     [ebp+var_28], eax
.text:0000228C                 mov     ecx, [ebp+var_14]
.text:0000228F                 add     ecx, 18h        ; this
.text:00002292                 call    ?GetProcessedSize@COutBuffer@@QBE_KXZ ; COutBuffer::GetProcessedSize(void)
.text:00002297                 mov     [ebp+var_30], eax
.text:0000229A                 mov     [ebp+var_2C], edx
.text:0000229D
.text:0000229D loc_229D:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+94j
.text:0000229D                 mov     ecx, [ebp+var_30]
.text:000022A0                 mov     [ebp+var_1B8], ecx
.text:000022A6                 mov     edx, [ebp+var_2C]
.text:000022A9                 mov     [ebp+var_1B4], edx
.text:000022AF                 mov     eax, [ebp+var_28]
.text:000022B2                 mov     [ebp+var_1B0], eax
.text:000022B8                 mov     ecx, dword ptr [ebp+var_20]
.text:000022BB                 mov     [ebp+var_1C0], ecx
.text:000022C1                 mov     edx, dword ptr [ebp+var_20+4]
.text:000022C4                 mov     [ebp+var_1BC], edx
.text:000022CA                 mov     ecx, [ebp+var_14]
.text:000022CD                 add     ecx, 50h ; 'P'
.text:000022D0                 call    ??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator->(void)
.text:000022D5                 mov     [ebp+var_200], eax
.text:000022DB                 mov     esi, esp
.text:000022DD                 push    0
.text:000022DF                 push    0
.text:000022E1                 mov     eax, [ebp+var_14]
.text:000022E4                 mov     ecx, [eax+4]
.text:000022E7                 push    ecx
.text:000022E8                 mov     edx, [eax]
.text:000022EA                 push    edx
.text:000022EB                 mov     eax, [ebp+var_200]
.text:000022F1                 push    eax
.text:000022F2                 mov     ecx, [ebp+var_200]
.text:000022F8                 mov     edx, [ecx]
.text:000022FA                 mov     eax, [edx+10h]
.text:000022FD                 call    eax
.text:000022FF                 cmp     esi, esp
.text:00002301                 call    __RTC_CheckEsp
.text:00002306                 mov     [ebp+var_1C8], eax
.text:0000230C                 cmp     [ebp+var_1C8], 0
.text:00002313                 jz      short loc_231D
.text:00002315                 mov     eax, [ebp+var_1C8]
.text:0000231B                 jmp     short loc_232C
.text:0000231D ; ---------------------------------------------------------------------------
.text:0000231D
.text:0000231D loc_231D:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+503j
.text:0000231D                 lea     ecx, [ebp+var_1C0]
.text:00002323                 push    ecx             ; struct NArchive::N7z::CStartHeader *
.text:00002324                 mov     ecx, [ebp+var_14] ; this
.text:00002327                 call    ?WriteStartHeader@COutArchive@N7z@NArchive@@AAEJABUCStartHeader@23@@Z ; NArchive::N7z::COutArchive::WriteStartHeader(NArchive::N7z::CStartHeader const &)
.text:0000232C
.text:0000232C loc_232C:                               ; CODE XREF: NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+58j
.text:0000232C                                         ; NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+1BBj ...
.text:0000232C                 push    edx
.text:0000232D                 mov     ecx, ebp
.text:0000232F                 push    eax
.text:00002330                 lea     edx, $LN39
.text:00002336                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000233B                 pop     eax
.text:0000233C                 pop     edx
.text:0000233D                 mov     ecx, [ebp+var_C]
.text:00002340                 mov     large fs:0, ecx
.text:00002347                 pop     ecx
.text:00002348                 pop     edi
.text:00002349                 pop     esi
.text:0000234A                 mov     ecx, [ebp+var_10]
.text:0000234D                 xor     ecx, ebp
.text:0000234F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00002354                 add     esp, 200h
.text:0000235A                 cmp     ebp, esp
.text:0000235C                 call    __RTC_CheckEsp
.text:00002361                 mov     esp, ebp
.text:00002363                 pop     ebp
.text:00002364                 retn    0Ch
.text:00002364 ?WriteDatabase@COutArchive@N7z@NArchive@@QAEJABUCArchiveDatabaseOut@23@PBUCCompressionMethodMode@23@ABUCHeaderOptions@23@@Z endp
.text:00002364
.text:00002364 ; ---------------------------------------------------------------------------
.text:00002367                 align 4
.text:00002368 $LN39           dd 8                    ; DATA XREF: NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+520o
.text:0000236C                 dd offset $LN38
.text:00002370 $LN38           dd 0FFFFFFE0h, 8        ; DATA XREF: .text:0000236Co
.text:00002378                 dd offset $LN29         ; "headerOffset"
.text:0000237C                 dd 0FFFFFFC0h, 8
.text:00002384                 dd offset $LN30_0       ; "buf"
.text:00002388                 db 88h, 0FFh
.text:0000238A                 dw 0FFFFh
.text:0000238C                 dd offset loc_2C+4
.text:00002390                 dd offset $LN31         ; "encryptOptions"
.text:00002394                 db 0CCh
.text:00002395                 db 0FEh, 2 dup(0FFh)
.text:00002398                 dd offset loc_B0+4
.text:0000239C                 dd offset $LN32_0       ; "encoder"
.text:000023A0                 dd 0FFFFFEB8h, 0Ch
.text:000023A8                 dd offset $LN33_0       ; "packSizes"
.text:000023AC                 dd 0FFFFFEA4h, 0Ch
.text:000023B4                 dd offset $LN34         ; "folders"
.text:000023B8                 dd 0FFFFFE6Ch, 30h
.text:000023C0                 dd offset $LN35         ; "outFolders"
.text:000023C4                 dd 0FFFFFE40h, 18h
.text:000023CC                 dd offset $LN36
.text:000023D0 $LN36           db 68h, 0               ; DATA XREF: .text:000023CCo
.text:000023D2 $LN35           db 'outFolders',0       ; DATA XREF: .text:000023C0o
.text:000023DD $LN34           db 'folders',0          ; DATA XREF: .text:000023B4o
.text:000023E5 $LN33_0         db 'packSizes',0        ; DATA XREF: .text:000023A8o
.text:000023EF $LN32_0         db 'encoder',0          ; DATA XREF: .text:0000239Co
.text:000023F7 $LN31           db 'encryptOptions',0   ; DATA XREF: .text:00002390o
.text:00002406 $LN30_0         db 'buf',0              ; DATA XREF: .text:00002384o
.text:0000240A $LN29           db 'headerOffset',0     ; DATA XREF: .text:00002378o
.text:00002417                 align 10h
.text:00002420
.text:00002420 ; =============== S U B R O U T I N E =======================================
.text:00002420
.text:00002420 ; Attributes: bp-based frame
.text:00002420
.text:00002420 ; void __thiscall NArchive::N7z::CUInt64DefVector::SetItem(NArchive::N7z::CUInt64DefVector *this, unsigned int, bool, unsigned __int64)
.text:00002420                 public ?SetItem@CUInt64DefVector@N7z@NArchive@@QAEXI_N_K@Z
.text:00002420 ?SetItem@CUInt64DefVector@N7z@NArchive@@QAEXI_N_K@Z proc near
.text:00002420                                         ; CODE XREF: NArchive::N7z::CArchiveDatabaseOut::AddFile(NArchive::N7z::CFileItem const &,NArchive::N7z::CFileItem2 const &,UString const &)+41p
.text:00002420                                         ; NArchive::N7z::CArchiveDatabaseOut::AddFile(NArchive::N7z::CFileItem const &,NArchive::N7z::CFileItem2 const &,UString const &)+66p ...
.text:00002420
.text:00002420 var_4           = dword ptr -4
.text:00002420 arg_0           = dword ptr  8
.text:00002420 arg_4           = byte ptr  0Ch
.text:00002420 arg_8           = qword ptr  10h
.text:00002420
.text:00002420                 push    ebp
.text:00002421                 mov     ebp, esp
.text:00002423                 push    ecx
.text:00002424                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000242B                 mov     [ebp+var_4], ecx
.text:0000242E
.text:0000242E loc_242E:                               ; CODE XREF: NArchive::N7z::CUInt64DefVector::SetItem(uint,bool,unsigned __int64)+25j
.text:0000242E                 mov     ecx, [ebp+var_4]
.text:00002431                 call    ?Size@?$CRecordVector@_N@@QBEIXZ ; CRecordVector<bool>::Size(void)
.text:00002436                 cmp     [ebp+arg_0], eax
.text:00002439                 jb      short loc_2447
.text:0000243B                 push    0
.text:0000243D                 mov     ecx, [ebp+var_4]
.text:00002440                 call    ?Add@?$CRecordVector@_N@@QAEI_N@Z ; CRecordVector<bool>::Add(bool)
.text:00002445                 jmp     short loc_242E
.text:00002447 ; ---------------------------------------------------------------------------
.text:00002447
.text:00002447 loc_2447:                               ; CODE XREF: NArchive::N7z::CUInt64DefVector::SetItem(uint,bool,unsigned __int64)+19j
.text:00002447                 mov     eax, [ebp+arg_0]
.text:0000244A                 push    eax
.text:0000244B                 mov     ecx, [ebp+var_4]
.text:0000244E                 call    ??A?$CRecordVector@_N@@QAEAA_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:00002453                 mov     cl, [ebp+arg_4]
.text:00002456                 mov     [eax], cl
.text:00002458                 movzx   edx, [ebp+arg_4]
.text:0000245C                 test    edx, edx
.text:0000245E                 jnz     short loc_2462
.text:00002460                 jmp     short loc_249D
.text:00002462 ; ---------------------------------------------------------------------------
.text:00002462
.text:00002462 loc_2462:                               ; CODE XREF: NArchive::N7z::CUInt64DefVector::SetItem(uint,bool,unsigned __int64)+3Ej
.text:00002462                                         ; NArchive::N7z::CUInt64DefVector::SetItem(uint,bool,unsigned __int64)+61j
.text:00002462                 mov     ecx, [ebp+var_4]
.text:00002465                 add     ecx, 0Ch
.text:00002468                 call    ?Size@?$CRecordVector@_K@@QBEIXZ ; CRecordVector<unsigned __int64>::Size(void)
.text:0000246D                 cmp     [ebp+arg_0], eax
.text:00002470                 jb      short loc_2483
.text:00002472                 push    0
.text:00002474                 push    0
.text:00002476                 mov     ecx, [ebp+var_4]
.text:00002479                 add     ecx, 0Ch
.text:0000247C                 call    ?Add@?$CRecordVector@_K@@QAEI_K@Z ; CRecordVector<unsigned __int64>::Add(unsigned __int64)
.text:00002481                 jmp     short loc_2462
.text:00002483 ; ---------------------------------------------------------------------------
.text:00002483
.text:00002483 loc_2483:                               ; CODE XREF: NArchive::N7z::CUInt64DefVector::SetItem(uint,bool,unsigned __int64)+50j
.text:00002483                 mov     eax, [ebp+arg_0]
.text:00002486                 push    eax
.text:00002487                 mov     ecx, [ebp+var_4]
.text:0000248A                 add     ecx, 0Ch
.text:0000248D                 call    ??A?$CRecordVector@_K@@QAEAA_KI@Z ; CRecordVector<unsigned __int64>::operator[](uint)
.text:00002492                 mov     ecx, dword ptr [ebp+arg_8]
.text:00002495                 mov     [eax], ecx
.text:00002497                 mov     edx, dword ptr [ebp+arg_8+4]
.text:0000249A                 mov     [eax+4], edx
.text:0000249D
.text:0000249D loc_249D:                               ; CODE XREF: NArchive::N7z::CUInt64DefVector::SetItem(uint,bool,unsigned __int64)+40j
.text:0000249D                 add     esp, 4
.text:000024A0                 cmp     ebp, esp
.text:000024A2                 call    __RTC_CheckEsp
.text:000024A7                 mov     esp, ebp
.text:000024A9                 pop     ebp
.text:000024AA                 retn    10h
.text:000024AA ?SetItem@CUInt64DefVector@N7z@NArchive@@QAEXI_N_K@Z endp
.text:000024AA
.text:000024AA ; ---------------------------------------------------------------------------
.text:000024AD                 align 10h
.text:000024B0
.text:000024B0 ; =============== S U B R O U T I N E =======================================
.text:000024B0
.text:000024B0 ; Attributes: bp-based frame
.text:000024B0
.text:000024B0 ; void __thiscall NArchive::N7z::CArchiveDatabaseOut::AddFile(NArchive::N7z::CArchiveDatabaseOut *this, const struct NArchive::N7z::CFileItem *, const struct NArchive::N7z::CFileItem2 *, const struct UString *)
.text:000024B0                 public ?AddFile@CArchiveDatabaseOut@N7z@NArchive@@QAEXABUCFileItem@23@ABUCFileItem2@23@ABVUString@@@Z
.text:000024B0 ?AddFile@CArchiveDatabaseOut@N7z@NArchive@@QAEXABUCFileItem@23@ABUCFileItem2@23@ABVUString@@@Z proc near
.text:000024B0
.text:000024B0 var_8           = dword ptr -8
.text:000024B0 var_4           = dword ptr -4
.text:000024B0 arg_0           = dword ptr  8
.text:000024B0 arg_4           = dword ptr  0Ch
.text:000024B0 arg_8           = dword ptr  10h
.text:000024B0
.text:000024B0                 push    ebp
.text:000024B1                 mov     ebp, esp
.text:000024B3                 sub     esp, 8
.text:000024B6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000024BD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000024C4                 mov     [ebp+var_4], ecx
.text:000024C7                 mov     ecx, [ebp+var_4]
.text:000024CA                 add     ecx, 60h ; '`'
.text:000024CD                 call    ?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CFileItem>::Size(void)
.text:000024D2                 mov     [ebp+var_8], eax
.text:000024D5                 mov     eax, [ebp+arg_4]
.text:000024D8                 mov     ecx, [eax+4]
.text:000024DB                 push    ecx
.text:000024DC                 mov     edx, [eax]
.text:000024DE                 push    edx             ; unsigned __int64
.text:000024DF                 mov     eax, [ebp+arg_4]
.text:000024E2                 movzx   ecx, byte ptr [eax+20h]
.text:000024E6                 push    ecx             ; bool
.text:000024E7                 mov     edx, [ebp+var_8]
.text:000024EA                 push    edx             ; unsigned int
.text:000024EB                 mov     ecx, [ebp+var_4]
.text:000024EE                 add     ecx, 78h ; 'x'  ; this
.text:000024F1                 call    ?SetItem@CUInt64DefVector@N7z@NArchive@@QAEXI_N_K@Z ; NArchive::N7z::CUInt64DefVector::SetItem(uint,bool,unsigned __int64)
.text:000024F6                 mov     eax, [ebp+arg_4]
.text:000024F9                 mov     ecx, [eax+0Ch]
.text:000024FC                 push    ecx
.text:000024FD                 mov     edx, [eax+8]
.text:00002500                 push    edx             ; unsigned __int64
.text:00002501                 mov     eax, [ebp+arg_4]
.text:00002504                 movzx   ecx, byte ptr [eax+21h]
.text:00002508                 push    ecx             ; bool
.text:00002509                 mov     edx, [ebp+var_8]
.text:0000250C                 push    edx             ; unsigned int
.text:0000250D                 mov     ecx, [ebp+var_4]
.text:00002510                 add     ecx, 90h ; 'É'  ; this
.text:00002516                 call    ?SetItem@CUInt64DefVector@N7z@NArchive@@QAEXI_N_K@Z ; NArchive::N7z::CUInt64DefVector::SetItem(uint,bool,unsigned __int64)
.text:0000251B                 mov     eax, [ebp+arg_4]
.text:0000251E                 mov     ecx, [eax+14h]
.text:00002521                 push    ecx
.text:00002522                 mov     edx, [eax+10h]
.text:00002525                 push    edx             ; unsigned __int64
.text:00002526                 mov     eax, [ebp+arg_4]
.text:00002529                 movzx   ecx, byte ptr [eax+22h]
.text:0000252D                 push    ecx             ; bool
.text:0000252E                 mov     edx, [ebp+var_8]
.text:00002531                 push    edx             ; unsigned int
.text:00002532                 mov     ecx, [ebp+var_4]
.text:00002535                 add     ecx, 0A8h ; '¿' ; this
.text:0000253B                 call    ?SetItem@CUInt64DefVector@N7z@NArchive@@QAEXI_N_K@Z ; NArchive::N7z::CUInt64DefVector::SetItem(uint,bool,unsigned __int64)
.text:00002540                 mov     eax, [ebp+arg_4]
.text:00002543                 mov     ecx, [eax+1Ch]
.text:00002546                 push    ecx
.text:00002547                 mov     edx, [eax+18h]
.text:0000254A                 push    edx             ; unsigned __int64
.text:0000254B                 mov     eax, [ebp+arg_4]
.text:0000254E                 movzx   ecx, byte ptr [eax+23h]
.text:00002552                 push    ecx             ; bool
.text:00002553                 mov     edx, [ebp+var_8]
.text:00002556                 push    edx             ; unsigned int
.text:00002557                 mov     ecx, [ebp+var_4]
.text:0000255A                 add     ecx, 0C0h ; '+' ; this
.text:00002560                 call    ?SetItem@CUInt64DefVector@N7z@NArchive@@QAEXI_N_K@Z ; NArchive::N7z::CUInt64DefVector::SetItem(uint,bool,unsigned __int64)
.text:00002565                 mov     eax, [ebp+arg_4]
.text:00002568                 movzx   ecx, byte ptr [eax+24h]
.text:0000256C                 push    ecx             ; bool
.text:0000256D                 mov     edx, [ebp+var_8]
.text:00002570                 push    edx             ; unsigned int
.text:00002571                 mov     ecx, [ebp+var_4] ; this
.text:00002574                 call    ?SetItem_Anti@CArchiveDatabaseOut@N7z@NArchive@@QAEXI_N@Z ; NArchive::N7z::CArchiveDatabaseOut::SetItem_Anti(uint,bool)
.text:00002579                 mov     eax, [ebp+arg_8]
.text:0000257C                 push    eax
.text:0000257D                 mov     ecx, [ebp+var_4]
.text:00002580                 add     ecx, 6Ch ; 'l'
.text:00002583                 call    ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ; CObjectVector<UString>::Add(UString const &)
.text:00002588                 mov     ecx, [ebp+arg_0]
.text:0000258B                 sub     esp, 18h
.text:0000258E                 mov     edx, esp
.text:00002590                 mov     eax, [ecx]
.text:00002592                 mov     [edx], eax
.text:00002594                 mov     eax, [ecx+4]
.text:00002597                 mov     [edx+4], eax
.text:0000259A                 mov     eax, [ecx+8]
.text:0000259D                 mov     [edx+8], eax
.text:000025A0                 mov     eax, [ecx+0Ch]
.text:000025A3                 mov     [edx+0Ch], eax
.text:000025A6                 mov     eax, [ecx+10h]
.text:000025A9                 mov     [edx+10h], eax
.text:000025AC                 mov     ecx, [ecx+14h]
.text:000025AF                 mov     [edx+14h], ecx
.text:000025B2                 mov     ecx, [ebp+var_4]
.text:000025B5                 add     ecx, 60h ; '`'
.text:000025B8                 call    ?Add@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEIUCFileItem@N7z@NArchive@@@Z ; CRecordVector<NArchive::N7z::CFileItem>::Add(NArchive::N7z::CFileItem)
.text:000025BD                 add     esp, 8
.text:000025C0                 cmp     ebp, esp
.text:000025C2                 call    __RTC_CheckEsp
.text:000025C7                 mov     esp, ebp
.text:000025C9                 pop     ebp
.text:000025CA                 retn    0Ch
.text:000025CA ?AddFile@CArchiveDatabaseOut@N7z@NArchive@@QAEXABUCFileItem@23@ABUCFileItem2@23@ABVUString@@@Z endp
.text:000025CA
.text:000025CA ; ---------------------------------------------------------------------------
.text:000025CD                 align 10h
.text:000025CD _text           ends
.text:000025CD
.rtc$TMZ:000025D0 ; ===========================================================================
.rtc$TMZ:000025D0
.rtc$TMZ:000025D0 ; Segment type: Pure data
.rtc$TMZ:000025D0 ; Segment permissions: Read
.rtc$TMZ:000025D0 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:000025D0                 assume cs:_rtc$TMZ
.rtc$TMZ:000025D0                 ;org 25D0h
.rtc$TMZ:000025D0 ; COMDAT (pick any)
.rtc$TMZ:000025D0 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:000025D0 _rtc$TMZ        ends
.rtc$TMZ:000025D0
.rtc$IMZ:000025D4 ; ===========================================================================
.rtc$IMZ:000025D4
.rtc$IMZ:000025D4 ; Segment type: Pure data
.rtc$IMZ:000025D4 ; Segment permissions: Read
.rtc$IMZ:000025D4 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:000025D4                 assume cs:_rtc$IMZ
.rtc$IMZ:000025D4                 ;org 25D4h
.rtc$IMZ:000025D4 ; COMDAT (pick any)
.rtc$IMZ:000025D4 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:000025D4 _rtc$IMZ        ends
.rtc$IMZ:000025D4
.text:000025D8 ; ===========================================================================
.text:000025D8
.text:000025D8 ; Segment type: Pure code
.text:000025D8 ; Segment permissions: Read/Execute
.text:000025D8 _text           segment para public 'CODE' use32
.text:000025D8                 assume cs:_text
.text:000025D8                 ;org 25D8h
.text:000025D8 ; COMDAT (pick any)
.text:000025D8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000025D8
.text:000025D8 ; =============== S U B R O U T I N E =======================================
.text:000025D8
.text:000025D8 ; Attributes: bp-based frame
.text:000025D8
.text:000025D8 ; __int32 __thiscall NArchive::N7z::COutArchive::WriteDirect(NArchive::N7z::COutArchive *this, const void *, unsigned int)
.text:000025D8                 public ?WriteDirect@COutArchive@N7z@NArchive@@AAEJPBXI@Z
.text:000025D8 ?WriteDirect@COutArchive@N7z@NArchive@@AAEJPBXI@Z proc near
.text:000025D8                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteSignature(void)+4Ep
.text:000025D8                                         ; NArchive::N7z::COutArchive::WriteStartHeader(NArchive::N7z::CStartHeader const &)+7Cp ...
.text:000025D8
.text:000025D8 var_4           = dword ptr -4
.text:000025D8 arg_0           = dword ptr  8
.text:000025D8 arg_4           = dword ptr  0Ch
.text:000025D8
.text:000025D8                 push    ebp
.text:000025D9                 mov     ebp, esp
.text:000025DB                 push    ecx
.text:000025DC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000025E3                 mov     [ebp+var_4], ecx
.text:000025E6                 mov     eax, [ebp+arg_4]
.text:000025E9                 push    eax             ; unsigned int
.text:000025EA                 mov     ecx, [ebp+arg_0]
.text:000025ED                 push    ecx             ; void *
.text:000025EE                 mov     ecx, [ebp+var_4]
.text:000025F1                 add     ecx, 54h ; 'T'
.text:000025F4                 call    ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *(void)
.text:000025F9                 push    eax             ; struct ISequentialOutStream *
.text:000025FA                 call    ?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z ; WriteStream(ISequentialOutStream *,void const *,uint)
.text:000025FF                 add     esp, 4
.text:00002602                 cmp     ebp, esp
.text:00002604                 call    __RTC_CheckEsp
.text:00002609                 mov     esp, ebp
.text:0000260B                 pop     ebp
.text:0000260C                 retn    8
.text:0000260C ?WriteDirect@COutArchive@N7z@NArchive@@AAEJPBXI@Z endp
.text:0000260C
.text:0000260C ; ---------------------------------------------------------------------------
.text:0000260F                 align 10h
.text:0000260F _text           ends
.text:0000260F
.text:00002610 ; ===========================================================================
.text:00002610
.text:00002610 ; Segment type: Pure code
.text:00002610 ; Segment permissions: Read/Execute
.text:00002610 _text           segment para public 'CODE' use32
.text:00002610                 assume cs:_text
.text:00002610                 ;org 2610h
.text:00002610 ; COMDAT (pick any)
.text:00002610                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002610
.text:00002610 ; =============== S U B R O U T I N E =======================================
.text:00002610
.text:00002610 ; Attributes: bp-based frame
.text:00002610
.text:00002610 ; unsigned int __thiscall NArchive::N7z::CWriteBufferLoc::GetPos(NArchive::N7z::CWriteBufferLoc *__hidden this)
.text:00002610                 public ?GetPos@CWriteBufferLoc@N7z@NArchive@@QBEIXZ
.text:00002610 ?GetPos@CWriteBufferLoc@N7z@NArchive@@QBEIXZ proc near
.text:00002610                                         ; CODE XREF: NArchive::N7z::COutArchive::GetPos(void)+41p
.text:00002610                                         ; NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+18Fp
.text:00002610
.text:00002610 var_4           = dword ptr -4
.text:00002610
.text:00002610                 push    ebp
.text:00002611                 mov     ebp, esp
.text:00002613                 push    ecx
.text:00002614                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000261B                 mov     [ebp+var_4], ecx
.text:0000261E                 mov     eax, [ebp+var_4]
.text:00002621                 mov     eax, [eax+8]
.text:00002624                 mov     esp, ebp
.text:00002626                 pop     ebp
.text:00002627                 retn
.text:00002627 ?GetPos@CWriteBufferLoc@N7z@NArchive@@QBEIXZ endp
.text:00002627
.text:00002627 _text           ends
.text:00002627
.text:00002628 ; ===========================================================================
.text:00002628
.text:00002628 ; Segment type: Pure code
.text:00002628 ; Segment permissions: Read/Execute
.text:00002628 _text           segment para public 'CODE' use32
.text:00002628                 assume cs:_text
.text:00002628                 ;org 2628h
.text:00002628 ; COMDAT (pick any)
.text:00002628                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002628
.text:00002628 ; =============== S U B R O U T I N E =======================================
.text:00002628
.text:00002628 ; Attributes: bp-based frame
.text:00002628
.text:00002628 ; void __thiscall COutBuffer::WriteBytes(COutBuffer *this, const void *, unsigned int)
.text:00002628                 public ?WriteBytes@COutBuffer@@QAEXPBXI@Z
.text:00002628 ?WriteBytes@COutBuffer@@QAEXPBXI@Z proc near
.text:00002628                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteBytes(void const *,uint)+43p
.text:00002628
.text:00002628 var_8           = dword ptr -8
.text:00002628 var_4           = dword ptr -4
.text:00002628 arg_0           = dword ptr  8
.text:00002628 arg_4           = dword ptr  0Ch
.text:00002628
.text:00002628                 push    ebp
.text:00002629                 mov     ebp, esp
.text:0000262B                 sub     esp, 8
.text:0000262E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002635                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000263C                 mov     [ebp+var_4], ecx
.text:0000263F                 mov     [ebp+var_8], 0
.text:00002646                 jmp     short loc_2651
.text:00002648 ; ---------------------------------------------------------------------------
.text:00002648
.text:00002648 loc_2648:                               ; CODE XREF: COutBuffer::WriteBytes(void const *,uint)+43j
.text:00002648                 mov     eax, [ebp+var_8]
.text:0000264B                 add     eax, 1
.text:0000264E                 mov     [ebp+var_8], eax
.text:00002651
.text:00002651 loc_2651:                               ; CODE XREF: COutBuffer::WriteBytes(void const *,uint)+1Ej
.text:00002651                 mov     ecx, [ebp+var_8]
.text:00002654                 cmp     ecx, [ebp+arg_4]
.text:00002657                 jnb     short loc_266D
.text:00002659                 mov     edx, [ebp+arg_0]
.text:0000265C                 add     edx, [ebp+var_8]
.text:0000265F                 movzx   eax, byte ptr [edx]
.text:00002662                 push    eax             ; unsigned __int8
.text:00002663                 mov     ecx, [ebp+var_4] ; this
.text:00002666                 call    ?WriteByte@COutBuffer@@QAEXE@Z ; COutBuffer::WriteByte(uchar)
.text:0000266B                 jmp     short loc_2648
.text:0000266D ; ---------------------------------------------------------------------------
.text:0000266D
.text:0000266D loc_266D:                               ; CODE XREF: COutBuffer::WriteBytes(void const *,uint)+2Fj
.text:0000266D                 add     esp, 8
.text:00002670                 cmp     ebp, esp
.text:00002672                 call    __RTC_CheckEsp
.text:00002677                 mov     esp, ebp
.text:00002679                 pop     ebp
.text:0000267A                 retn    8
.text:0000267A ?WriteBytes@COutBuffer@@QAEXPBXI@Z endp
.text:0000267A
.text:0000267A ; ---------------------------------------------------------------------------
.text:0000267D                 align 10h
.text:0000267D _text           ends
.text:0000267D
.text:00002680 ; ===========================================================================
.text:00002680
.text:00002680 ; Segment type: Pure code
.text:00002680 ; Segment permissions: Read/Execute
.text:00002680 _text           segment para public 'CODE' use32
.text:00002680                 assume cs:_text
.text:00002680                 ;org 2680h
.text:00002680 ; COMDAT (pick any)
.text:00002680                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002680
.text:00002680 ; =============== S U B R O U T I N E =======================================
.text:00002680
.text:00002680 ; Attributes: bp-based frame
.text:00002680
.text:00002680 ; void __thiscall COutBuffer::WriteByte(COutBuffer *this, unsigned __int8)
.text:00002680                 public ?WriteByte@COutBuffer@@QAEXE@Z
.text:00002680 ?WriteByte@COutBuffer@@QAEXE@Z proc near
.text:00002680                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteByte(uchar)+40p
.text:00002680                                         ; COutBuffer::WriteBytes(void const *,uint)+3Ep
.text:00002680
.text:00002680 var_4           = dword ptr -4
.text:00002680 arg_0           = byte ptr  8
.text:00002680
.text:00002680                 push    ebp
.text:00002681                 mov     ebp, esp
.text:00002683                 push    ecx
.text:00002684                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000268B                 mov     [ebp+var_4], ecx
.text:0000268E                 mov     eax, [ebp+var_4]
.text:00002691                 mov     ecx, [eax]
.text:00002693                 mov     edx, [ebp+var_4]
.text:00002696                 mov     eax, [edx+4]
.text:00002699                 mov     dl, [ebp+arg_0]
.text:0000269C                 mov     [ecx+eax], dl
.text:0000269F                 mov     eax, [ebp+var_4]
.text:000026A2                 mov     ecx, [eax+4]
.text:000026A5                 add     ecx, 1
.text:000026A8                 mov     edx, [ebp+var_4]
.text:000026AB                 mov     [edx+4], ecx
.text:000026AE                 mov     eax, [ebp+var_4]
.text:000026B1                 mov     ecx, [ebp+var_4]
.text:000026B4                 mov     edx, [eax+4]
.text:000026B7                 cmp     edx, [ecx+8]
.text:000026BA                 jnz     short loc_26C4
.text:000026BC                 mov     ecx, [ebp+var_4] ; this
.text:000026BF                 call    ?FlushWithCheck@COutBuffer@@QAEXXZ ; COutBuffer::FlushWithCheck(void)
.text:000026C4
.text:000026C4 loc_26C4:                               ; CODE XREF: COutBuffer::WriteByte(uchar)+3Aj
.text:000026C4                 add     esp, 4
.text:000026C7                 cmp     ebp, esp
.text:000026C9                 call    __RTC_CheckEsp
.text:000026CE                 mov     esp, ebp
.text:000026D0                 pop     ebp
.text:000026D1                 retn    4
.text:000026D1 ?WriteByte@COutBuffer@@QAEXE@Z endp
.text:000026D1
.text:000026D1 _text           ends
.text:000026D1
.text:000026D4 ; ===========================================================================
.text:000026D4
.text:000026D4 ; Segment type: Pure code
.text:000026D4 ; Segment permissions: Read/Execute
.text:000026D4 _text           segment para public 'CODE' use32
.text:000026D4                 assume cs:_text
.text:000026D4                 ;org 26D4h
.text:000026D4 ; COMDAT (pick any)
.text:000026D4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000026D4
.text:000026D4 ; =============== S U B R O U T I N E =======================================
.text:000026D4
.text:000026D4 ; Attributes: bp-based frame
.text:000026D4
.text:000026D4 ; void __thiscall NArchive::N7z::CWriteBufferLoc::WriteBytes(NArchive::N7z::CWriteBufferLoc *this, const void *Src, unsigned int)
.text:000026D4                 public ?WriteBytes@CWriteBufferLoc@N7z@NArchive@@QAEXPBXI@Z
.text:000026D4 ?WriteBytes@CWriteBufferLoc@N7z@NArchive@@QAEXPBXI@Z proc near
.text:000026D4                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteBytes(void const *,uint)+70p
.text:000026D4
.text:000026D4 var_8           = dword ptr -8
.text:000026D4 var_4           = dword ptr -4
.text:000026D4 Src             = dword ptr  8
.text:000026D4 Size            = dword ptr  0Ch
.text:000026D4
.text:000026D4                 push    ebp
.text:000026D5                 mov     ebp, esp
.text:000026D7                 sub     esp, 8
.text:000026DA                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000026E1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000026E8                 mov     [ebp+var_4], ecx
.text:000026EB                 cmp     [ebp+Size], 0
.text:000026EF                 jnz     short loc_26F3
.text:000026F1                 jmp     short loc_2744
.text:000026F3 ; ---------------------------------------------------------------------------
.text:000026F3
.text:000026F3 loc_26F3:                               ; CODE XREF: NArchive::N7z::CWriteBufferLoc::WriteBytes(void const *,uint)+1Bj
.text:000026F3                 mov     eax, [ebp+var_4]
.text:000026F6                 mov     ecx, [ebp+var_4]
.text:000026F9                 mov     edx, [eax+4]
.text:000026FC                 sub     edx, [ecx+8]
.text:000026FF                 cmp     [ebp+Size], edx
.text:00002702                 jbe     short loc_2719
.text:00002704                 mov     [ebp+var_8], 1
.text:0000270B                 push    offset __TI1H
.text:00002710                 lea     eax, [ebp+var_8]
.text:00002713                 push    eax
.text:00002714                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:00002719 ; ---------------------------------------------------------------------------
.text:00002719
.text:00002719 loc_2719:                               ; CODE XREF: NArchive::N7z::CWriteBufferLoc::WriteBytes(void const *,uint)+2Ej
.text:00002719                 mov     ecx, [ebp+Size]
.text:0000271C                 push    ecx             ; Size
.text:0000271D                 mov     edx, [ebp+Src]
.text:00002720                 push    edx             ; Src
.text:00002721                 mov     eax, [ebp+var_4]
.text:00002724                 mov     ecx, [eax]
.text:00002726                 mov     edx, [ebp+var_4]
.text:00002729                 add     ecx, [edx+8]
.text:0000272C                 push    ecx             ; Dst
.text:0000272D                 call    _memcpy
.text:00002732                 add     esp, 0Ch
.text:00002735                 mov     eax, [ebp+var_4]
.text:00002738                 mov     ecx, [eax+8]
.text:0000273B                 add     ecx, [ebp+Size]
.text:0000273E                 mov     edx, [ebp+var_4]
.text:00002741                 mov     [edx+8], ecx
.text:00002744
.text:00002744 loc_2744:                               ; CODE XREF: NArchive::N7z::CWriteBufferLoc::WriteBytes(void const *,uint)+1Dj
.text:00002744                 add     esp, 8
.text:00002747                 cmp     ebp, esp
.text:00002749                 call    __RTC_CheckEsp
.text:0000274E                 mov     esp, ebp
.text:00002750                 pop     ebp
.text:00002751                 retn    8
.text:00002751 ?WriteBytes@CWriteBufferLoc@N7z@NArchive@@QAEXPBXI@Z endp
.text:00002751
.text:00002751 _text           ends
.text:00002751
.xdata$x:00002754 ; ===========================================================================
.xdata$x:00002754
.xdata$x:00002754 ; Segment type: Pure data
.xdata$x:00002754 ; Segment permissions: Read
.xdata$x:00002754 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00002754                 assume cs:_xdata$x
.xdata$x:00002754                 ;org 2754h
.xdata$x:00002754 ; COMDAT (pick any)
.xdata$x:00002754                 public __TI1H
.xdata$x:00002754 __TI1H          db    0                 ; DATA XREF: NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+316o
.xdata$x:00002754                                         ; NArchive::N7z::CWriteBufferLoc::WriteBytes(void const *,uint)+37o ...
.xdata$x:00002755                 db    0
.xdata$x:00002756                 db    0
.xdata$x:00002757                 db    0
.xdata$x:00002758                 db    0
.xdata$x:00002759                 db    0
.xdata$x:0000275A                 db    0
.xdata$x:0000275B                 db    0
.xdata$x:0000275C                 db    0
.xdata$x:0000275D                 db    0
.xdata$x:0000275E                 db    0
.xdata$x:0000275F                 db    0
.xdata$x:00002760                 dd offset __CTA1H
.xdata$x:00002760 _xdata$x        ends
.xdata$x:00002760
.xdata$x:00002764 ; ===========================================================================
.xdata$x:00002764
.xdata$x:00002764 ; Segment type: Pure data
.xdata$x:00002764 ; Segment permissions: Read
.xdata$x:00002764 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00002764                 assume cs:_xdata$x
.xdata$x:00002764                 ;org 2764h
.xdata$x:00002764 ; COMDAT (pick any)
.xdata$x:00002764                 public __CTA1H
.xdata$x:00002764 __CTA1H         db    1                 ; DATA XREF: .xdata$x:00002760o
.xdata$x:00002765                 db    0
.xdata$x:00002766                 db    0
.xdata$x:00002767                 db    0
.xdata$x:00002768                 dd offset __CT??_R0H@84
.xdata$x:00002768 _xdata$x        ends
.xdata$x:00002768
.xdata$x:0000276C ; ===========================================================================
.xdata$x:0000276C
.xdata$x:0000276C ; Segment type: Pure data
.xdata$x:0000276C ; Segment permissions: Read
.xdata$x:0000276C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000276C                 assume cs:_xdata$x
.xdata$x:0000276C                 ;org 276Ch
.xdata$x:0000276C ; COMDAT (pick any)
.xdata$x:0000276C                 public __CT??_R0H@84
.xdata$x:0000276C __CT??_R0H@84   db    1                 ; DATA XREF: .xdata$x:00002768o
.xdata$x:0000276D                 db    0
.xdata$x:0000276E                 db    0
.xdata$x:0000276F                 db    0
.xdata$x:00002770                 dd offset ??_R0H@8      ; int `RTTI Type Descriptor'
.xdata$x:00002774                 align 8
.xdata$x:00002778                 db 0FFh
.xdata$x:00002779                 db 0FFh
.xdata$x:0000277A                 db 0FFh
.xdata$x:0000277B                 db 0FFh
.xdata$x:0000277C                 db    0
.xdata$x:0000277D                 db    0
.xdata$x:0000277E                 db    0
.xdata$x:0000277F                 db    0
.xdata$x:00002780                 db    4
.xdata$x:00002781                 db    0
.xdata$x:00002782                 db    0
.xdata$x:00002783                 db    0
.xdata$x:00002784                 db    0
.xdata$x:00002785                 db    0
.xdata$x:00002786                 db    0
.xdata$x:00002787                 db    0
.xdata$x:00002787 _xdata$x        ends
.xdata$x:00002787
.data:00002788 ; ===========================================================================
.data:00002788
.data:00002788 ; Segment type: Pure data
.data:00002788 ; Segment permissions: Read/Write
.data:00002788 _data           segment dword public 'DATA' use32
.data:00002788                 assume cs:_data
.data:00002788                 ;org 2788h
.data:00002788 ; COMDAT (pick any)
.data:00002788                 public ??_R0H@8
.data:00002788 ; int `RTTI Type Descriptor'
.data:00002788 ??_R0H@8        dd offset ??_7type_info@@6B@ ; DATA XREF: .xdata$x:00002770o
.data:00002788                                         ; const type_info::`vftable'
.data:0000278C                 align 10h
.data:00002790                 db  2Eh ; .
.data:00002791                 db  48h ; H
.data:00002792                 db    0
.data:00002793                 align 4
.data:00002793 _data           ends
.data:00002793
.text:00002794 ; ===========================================================================
.text:00002794
.text:00002794 ; Segment type: Pure code
.text:00002794 ; Segment permissions: Read/Execute
.text:00002794 _text           segment para public 'CODE' use32
.text:00002794                 assume cs:_text
.text:00002794                 ;org 2794h
.text:00002794 ; COMDAT (pick any)
.text:00002794                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002794
.text:00002794 ; =============== S U B R O U T I N E =======================================
.text:00002794
.text:00002794 ; Attributes: bp-based frame
.text:00002794
.text:00002794 ; void __thiscall NArchive::N7z::CWriteBufferLoc::WriteByte(NArchive::N7z::CWriteBufferLoc *this, unsigned __int8)
.text:00002794                 public ?WriteByte@CWriteBufferLoc@N7z@NArchive@@QAEXE@Z
.text:00002794 ?WriteByte@CWriteBufferLoc@N7z@NArchive@@QAEXE@Z proc near
.text:00002794                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteByte(uchar)+78p
.text:00002794
.text:00002794 var_8           = dword ptr -8
.text:00002794 var_4           = dword ptr -4
.text:00002794 arg_0           = byte ptr  8
.text:00002794
.text:00002794                 push    ebp
.text:00002795                 mov     ebp, esp
.text:00002797                 sub     esp, 8
.text:0000279A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000027A1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000027A8                 mov     [ebp+var_4], ecx
.text:000027AB                 mov     eax, [ebp+var_4]
.text:000027AE                 mov     ecx, [ebp+var_4]
.text:000027B1                 mov     edx, [eax+4]
.text:000027B4                 cmp     edx, [ecx+8]
.text:000027B7                 jnz     short loc_27CE
.text:000027B9                 mov     [ebp+var_8], 1
.text:000027C0                 push    offset __TI1H
.text:000027C5                 lea     eax, [ebp+var_8]
.text:000027C8                 push    eax
.text:000027C9                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:000027CE ; ---------------------------------------------------------------------------
.text:000027CE
.text:000027CE loc_27CE:                               ; CODE XREF: NArchive::N7z::CWriteBufferLoc::WriteByte(uchar)+23j
.text:000027CE                 mov     ecx, [ebp+var_4]
.text:000027D1                 mov     edx, [ecx]
.text:000027D3                 mov     eax, [ebp+var_4]
.text:000027D6                 mov     ecx, [eax+8]
.text:000027D9                 mov     al, [ebp+arg_0]
.text:000027DC                 mov     [edx+ecx], al
.text:000027DF                 mov     ecx, [ebp+var_4]
.text:000027E2                 mov     edx, [ecx+8]
.text:000027E5                 add     edx, 1
.text:000027E8                 mov     eax, [ebp+var_4]
.text:000027EB                 mov     [eax+8], edx
.text:000027EE                 add     esp, 8
.text:000027F1                 cmp     ebp, esp
.text:000027F3                 call    __RTC_CheckEsp
.text:000027F8                 mov     esp, ebp
.text:000027FA                 pop     ebp
.text:000027FB                 retn    4
.text:000027FB ?WriteByte@CWriteBufferLoc@N7z@NArchive@@QAEXE@Z endp
.text:000027FB
.text:000027FB ; ---------------------------------------------------------------------------
.text:000027FE                 align 10h
.text:000027FE _text           ends
.text:000027FE
.text:00002800 ; ===========================================================================
.text:00002800
.text:00002800 ; Segment type: Pure code
.text:00002800 ; Segment permissions: Read/Execute
.text:00002800 _text           segment para public 'CODE' use32
.text:00002800                 assume cs:_text
.text:00002800                 ;org 2800h
.text:00002800 ; COMDAT (pick any)
.text:00002800                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002800
.text:00002800 ; =============== S U B R O U T I N E =======================================
.text:00002800
.text:00002800 ; Attributes: bp-based frame
.text:00002800
.text:00002800 ; bool __thiscall NArchive::N7z::CCoderInfo::IsSimpleCoder(NArchive::N7z::CCoderInfo *__hidden this)
.text:00002800                 public ?IsSimpleCoder@CCoderInfo@N7z@NArchive@@QBE_NXZ
.text:00002800 ?IsSimpleCoder@CCoderInfo@N7z@NArchive@@QBE_NXZ proc near
.text:00002800                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteFolder(NArchive::N7z::CFolder const &)+10Cp
.text:00002800
.text:00002800 var_4           = dword ptr -4
.text:00002800
.text:00002800                 push    ebp
.text:00002801                 mov     ebp, esp
.text:00002803                 push    ecx
.text:00002804                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000280B                 mov     [ebp+var_4], ecx
.text:0000280E                 mov     eax, [ebp+var_4]
.text:00002811                 xor     ecx, ecx
.text:00002813                 cmp     dword ptr [eax+10h], 1
.text:00002817                 setz    cl
.text:0000281A                 mov     al, cl
.text:0000281C                 mov     esp, ebp
.text:0000281E                 pop     ebp
.text:0000281F                 retn
.text:0000281F ?IsSimpleCoder@CCoderInfo@N7z@NArchive@@QBE_NXZ endp
.text:0000281F
.text:0000281F _text           ends
.text:0000281F
.text$x:00002820 ; ===========================================================================
.text$x:00002820
.text$x:00002820 ; Segment type: Pure code
.text$x:00002820 ; Segment permissions: Read/Execute
.text$x:00002820 _text$x         segment para public 'CODE' use32
.text$x:00002820                 assume cs:_text$x
.text$x:00002820                 ;org 2820h
.text$x:00002820                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00002820
.text$x:00002820 ; =============== S U B R O U T I N E =======================================
.text$x:00002820
.text$x:00002820
.text$x:00002820 __unwindfunclet$?WriteSubStreamsInfo@COutArchive@N7z@NArchive@@AAEXABV?$CObjectVector@UCFolder@N7z@NArchive@@@@ABUCOutFolders@23@ABV?$CRecordVector@_K@@ABUCUInt32DefVector@23@@Z$0 proc near
.text$x:00002820                                         ; DATA XREF: .xdata$x:00002938o
.text$x:00002820                 lea     ecx, [ebp-40h]  ; this
.text$x:00002823                 jmp     ??1CUInt32DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt32DefVector::~CUInt32DefVector(void)
.text$x:00002823 __unwindfunclet$?WriteSubStreamsInfo@COutArchive@N7z@NArchive@@AAEXABV?$CObjectVector@UCFolder@N7z@NArchive@@@@ABUCOutFolders@23@ABV?$CRecordVector@_K@@ABUCUInt32DefVector@23@@Z$0 endp
.text$x:00002823
.text$x:00002828
.text$x:00002828 ; =============== S U B R O U T I N E =======================================
.text$x:00002828
.text$x:00002828
.text$x:00002828 __ehhandler$?WriteSubStreamsInfo@COutArchive@N7z@NArchive@@AAEXABV?$CObjectVector@UCFolder@N7z@NArchive@@@@ABUCOutFolders@23@ABV?$CRecordVector@_K@@ABUCUInt32DefVector@23@@Z proc near
.text$x:00002828                                         ; DATA XREF: NArchive::N7z::COutArchive::WriteSubStreamsInfo(CObjectVector<NArchive::N7z::CFolder> const &,NArchive::N7z::COutFolders const &,CRecordVector<unsigned __int64> const &,NArchive::N7z::CUInt32DefVector const &)+5o
.text$x:00002828
.text$x:00002828 arg_4           = dword ptr  8
.text$x:00002828
.text$x:00002828                 mov     edx, [esp+arg_4]
.text$x:0000282C                 lea     eax, [edx+0Ch]
.text$x:0000282F                 mov     ecx, [edx-4Ch]
.text$x:00002832                 xor     ecx, eax
.text$x:00002834                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002839                 mov     eax, offset __ehfuncinfo$?WriteSubStreamsInfo@COutArchive@N7z@NArchive@@AAEXABV?$CObjectVector@UCFolder@N7z@NArchive@@@@ABUCOutFolders@23@ABV?$CRecordVector@_K@@ABUCUInt32DefVector@23@@Z
.text$x:0000283E                 jmp     ___CxxFrameHandler3
.text$x:0000283E __ehhandler$?WriteSubStreamsInfo@COutArchive@N7z@NArchive@@AAEXABV?$CObjectVector@UCFolder@N7z@NArchive@@@@ABUCOutFolders@23@ABV?$CRecordVector@_K@@ABUCUInt32DefVector@23@@Z endp
.text$x:0000283E
.text$x:00002843
.text$x:00002843 ; =============== S U B R O U T I N E =======================================
.text$x:00002843
.text$x:00002843
.text$x:00002843 __unwindfunclet$?EncodeStream@COutArchive@N7z@NArchive@@AAEJAAVCEncoder@23@ABV?$CBuffer@E@@AAV?$CRecordVector@_K@@AAV?$CObjectVector@UCFolder@N7z@NArchive@@@@AAUCOutFolders@23@@Z$0 proc near
.text$x:00002843                                         ; DATA XREF: .xdata$x:00002964o
.text$x:00002843                 mov     eax, [ebp-4Ch]
.text$x:00002846                 push    eax             ; void *
.text$x:00002847                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000284C                 pop     ecx
.text$x:0000284D                 retn
.text$x:0000284D __unwindfunclet$?EncodeStream@COutArchive@N7z@NArchive@@AAEJAAVCEncoder@23@ABV?$CBuffer@E@@AAV?$CRecordVector@_K@@AAV?$CObjectVector@UCFolder@N7z@NArchive@@@@AAUCOutFolders@23@@Z$0 endp
.text$x:0000284D
.text$x:0000284E
.text$x:0000284E ; =============== S U B R O U T I N E =======================================
.text$x:0000284E
.text$x:0000284E
.text$x:0000284E __unwindfunclet$?EncodeStream@COutArchive@N7z@NArchive@@AAEJAAVCEncoder@23@ABV?$CBuffer@E@@AAV?$CRecordVector@_K@@AAV?$CObjectVector@UCFolder@N7z@NArchive@@@@AAUCOutFolders@23@@Z$1 proc near
.text$x:0000284E                                         ; DATA XREF: .xdata$x:0000296Co
.text$x:0000284E                 lea     ecx, [ebp-1Ch]
.text$x:00002851                 jmp     ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text$x:00002851 __unwindfunclet$?EncodeStream@COutArchive@N7z@NArchive@@AAEJAAVCEncoder@23@ABV?$CBuffer@E@@AAV?$CRecordVector@_K@@AAV?$CObjectVector@UCFolder@N7z@NArchive@@@@AAUCOutFolders@23@@Z$1 endp
.text$x:00002851
.text$x:00002856
.text$x:00002856 ; =============== S U B R O U T I N E =======================================
.text$x:00002856
.text$x:00002856
.text$x:00002856 __ehhandler$?EncodeStream@COutArchive@N7z@NArchive@@AAEJAAVCEncoder@23@ABV?$CBuffer@E@@AAV?$CRecordVector@_K@@AAV?$CObjectVector@UCFolder@N7z@NArchive@@@@AAUCOutFolders@23@@Z proc near
.text$x:00002856                                         ; DATA XREF: NArchive::N7z::COutArchive::EncodeStream(NArchive::N7z::CEncoder &,CBuffer<uchar> const &,CRecordVector<unsigned __int64> &,CObjectVector<NArchive::N7z::CFolder> &,NArchive::N7z::COutFolders &)+5o
.text$x:00002856
.text$x:00002856 arg_4           = dword ptr  8
.text$x:00002856
.text$x:00002856                 mov     edx, [esp+arg_4]
.text$x:0000285A                 lea     eax, [edx+0Ch]
.text$x:0000285D                 mov     ecx, [edx-58h]
.text$x:00002860                 xor     ecx, eax
.text$x:00002862                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002867                 mov     eax, offset __ehfuncinfo$?EncodeStream@COutArchive@N7z@NArchive@@AAEJAAVCEncoder@23@ABV?$CBuffer@E@@AAV?$CRecordVector@_K@@AAV?$CObjectVector@UCFolder@N7z@NArchive@@@@AAUCOutFolders@23@@Z
.text$x:0000286C                 jmp     ___CxxFrameHandler3
.text$x:0000286C __ehhandler$?EncodeStream@COutArchive@N7z@NArchive@@AAEJAAVCEncoder@23@ABV?$CBuffer@E@@AAV?$CRecordVector@_K@@AAV?$CObjectVector@UCFolder@N7z@NArchive@@@@AAUCOutFolders@23@@Z endp
.text$x:0000286C
.text$x:00002871
.text$x:00002871 ; =============== S U B R O U T I N E =======================================
.text$x:00002871
.text$x:00002871
.text$x:00002871 __unwindfunclet$?WriteHeader@COutArchive@N7z@NArchive@@AAEXABUCArchiveDatabaseOut@23@AA_K@Z$0 proc near
.text$x:00002871                                         ; DATA XREF: .xdata$x:000029BCo
.text$x:00002871                 lea     ecx, [ebp-2Ch]
.text$x:00002874                 jmp     ??1?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text$x:00002874 __unwindfunclet$?WriteHeader@COutArchive@N7z@NArchive@@AAEXABUCArchiveDatabaseOut@23@AA_K@Z$0 endp
.text$x:00002874
.text$x:00002879
.text$x:00002879 ; =============== S U B R O U T I N E =======================================
.text$x:00002879
.text$x:00002879
.text$x:00002879 __unwindfunclet$?WriteHeader@COutArchive@N7z@NArchive@@AAEXABUCArchiveDatabaseOut@23@AA_K@Z$1 proc near
.text$x:00002879                                         ; DATA XREF: .xdata$x:000029C4o
.text$x:00002879                 lea     ecx, [ebp-4Ch]  ; this
.text$x:0000287C                 jmp     ??1CUInt32DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt32DefVector::~CUInt32DefVector(void)
.text$x:0000287C __unwindfunclet$?WriteHeader@COutArchive@N7z@NArchive@@AAEXABUCArchiveDatabaseOut@23@AA_K@Z$1 endp
.text$x:0000287C
.text$x:00002881
.text$x:00002881 ; =============== S U B R O U T I N E =======================================
.text$x:00002881
.text$x:00002881
.text$x:00002881 __unwindfunclet$?WriteHeader@COutArchive@N7z@NArchive@@AAEXABUCArchiveDatabaseOut@23@AA_K@Z$2 proc near
.text$x:00002881                                         ; DATA XREF: .xdata$x:000029CCo
.text$x:00002881                 lea     ecx, [ebp-64h]
.text$x:00002884                 jmp     ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text$x:00002884 __unwindfunclet$?WriteHeader@COutArchive@N7z@NArchive@@AAEXABUCArchiveDatabaseOut@23@AA_K@Z$2 endp
.text$x:00002884
.text$x:00002889
.text$x:00002889 ; =============== S U B R O U T I N E =======================================
.text$x:00002889
.text$x:00002889
.text$x:00002889 __unwindfunclet$?WriteHeader@COutArchive@N7z@NArchive@@AAEXABUCArchiveDatabaseOut@23@AA_K@Z$3 proc near
.text$x:00002889                                         ; DATA XREF: .xdata$x:000029D4o
.text$x:00002889                 lea     ecx, [ebp-7Ch]
.text$x:0000288C                 jmp     ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text$x:0000288C __unwindfunclet$?WriteHeader@COutArchive@N7z@NArchive@@AAEXABUCArchiveDatabaseOut@23@AA_K@Z$3 endp
.text$x:0000288C
.text$x:00002891
.text$x:00002891 ; =============== S U B R O U T I N E =======================================
.text$x:00002891
.text$x:00002891
.text$x:00002891 __unwindfunclet$?WriteHeader@COutArchive@N7z@NArchive@@AAEXABUCArchiveDatabaseOut@23@AA_K@Z$4 proc near
.text$x:00002891                                         ; DATA XREF: .xdata$x:000029DCo
.text$x:00002891                 lea     ecx, [ebp-90h]
.text$x:00002897                 jmp     ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text$x:00002897 __unwindfunclet$?WriteHeader@COutArchive@N7z@NArchive@@AAEXABUCArchiveDatabaseOut@23@AA_K@Z$4 endp
.text$x:00002897
.text$x:0000289C
.text$x:0000289C ; =============== S U B R O U T I N E =======================================
.text$x:0000289C
.text$x:0000289C
.text$x:0000289C __unwindfunclet$?WriteHeader@COutArchive@N7z@NArchive@@AAEXABUCArchiveDatabaseOut@23@AA_K@Z$5 proc near
.text$x:0000289C                                         ; DATA XREF: .xdata$x:000029E4o
.text$x:0000289C                 lea     ecx, [ebp-0D4h]
.text$x:000028A2                 jmp     ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text$x:000028A2 __unwindfunclet$?WriteHeader@COutArchive@N7z@NArchive@@AAEXABUCArchiveDatabaseOut@23@AA_K@Z$5 endp
.text$x:000028A2
.text$x:000028A7
.text$x:000028A7 ; =============== S U B R O U T I N E =======================================
.text$x:000028A7
.text$x:000028A7
.text$x:000028A7 __ehhandler$?WriteHeader@COutArchive@N7z@NArchive@@AAEXABUCArchiveDatabaseOut@23@AA_K@Z proc near
.text$x:000028A7                                         ; DATA XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+5o
.text$x:000028A7
.text$x:000028A7 arg_4           = dword ptr  8
.text$x:000028A7
.text$x:000028A7                 mov     edx, [esp+arg_4]
.text$x:000028AB                 lea     eax, [edx+0Ch]
.text$x:000028AE                 mov     ecx, [edx-0E4h]
.text$x:000028B4                 xor     ecx, eax
.text$x:000028B6                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000028BB                 mov     eax, offset __ehfuncinfo$?WriteHeader@COutArchive@N7z@NArchive@@AAEXABUCArchiveDatabaseOut@23@AA_K@Z
.text$x:000028C0                 jmp     ___CxxFrameHandler3
.text$x:000028C0 __ehhandler$?WriteHeader@COutArchive@N7z@NArchive@@AAEXABUCArchiveDatabaseOut@23@AA_K@Z endp
.text$x:000028C0
.text$x:000028C5
.text$x:000028C5 ; =============== S U B R O U T I N E =======================================
.text$x:000028C5
.text$x:000028C5
.text$x:000028C5 __unwindfunclet$?WriteDatabase@COutArchive@N7z@NArchive@@QAEJABUCArchiveDatabaseOut@23@PBUCCompressionMethodMode@23@ABUCHeaderOptions@23@@Z$0 proc near
.text$x:000028C5                                         ; DATA XREF: .xdata$x:00002A10o
.text$x:000028C5                 lea     ecx, [ebp-40h]
.text$x:000028C8                 jmp     ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text$x:000028C8 __unwindfunclet$?WriteDatabase@COutArchive@N7z@NArchive@@QAEJABUCArchiveDatabaseOut@23@PBUCCompressionMethodMode@23@ABUCHeaderOptions@23@@Z$0 endp
.text$x:000028C8
.text$x:000028CD
.text$x:000028CD ; =============== S U B R O U T I N E =======================================
.text$x:000028CD
.text$x:000028CD
.text$x:000028CD __unwindfunclet$?WriteDatabase@COutArchive@N7z@NArchive@@QAEJABUCArchiveDatabaseOut@23@PBUCCompressionMethodMode@23@ABUCHeaderOptions@23@@Z$1 proc near
.text$x:000028CD                                         ; DATA XREF: .xdata$x:00002A18o
.text$x:000028CD                 lea     ecx, [ebp-78h]  ; this
.text$x:000028D0                 jmp     ??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(void)
.text$x:000028D0 __unwindfunclet$?WriteDatabase@COutArchive@N7z@NArchive@@QAEJABUCArchiveDatabaseOut@23@PBUCCompressionMethodMode@23@ABUCHeaderOptions@23@@Z$1 endp
.text$x:000028D0
.text$x:000028D5
.text$x:000028D5 ; =============== S U B R O U T I N E =======================================
.text$x:000028D5
.text$x:000028D5
.text$x:000028D5 __unwindfunclet$?WriteDatabase@COutArchive@N7z@NArchive@@QAEJABUCArchiveDatabaseOut@23@PBUCCompressionMethodMode@23@ABUCHeaderOptions@23@@Z$2 proc near
.text$x:000028D5                                         ; DATA XREF: .xdata$x:00002A20o
.text$x:000028D5                 lea     ecx, [ebp-134h] ; this
.text$x:000028DB                 jmp     ??1CEncoder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CEncoder::~CEncoder(void)
.text$x:000028DB __unwindfunclet$?WriteDatabase@COutArchive@N7z@NArchive@@QAEJABUCArchiveDatabaseOut@23@PBUCCompressionMethodMode@23@ABUCHeaderOptions@23@@Z$2 endp
.text$x:000028DB
.text$x:000028E0
.text$x:000028E0 ; =============== S U B R O U T I N E =======================================
.text$x:000028E0
.text$x:000028E0
.text$x:000028E0 __unwindfunclet$?WriteDatabase@COutArchive@N7z@NArchive@@QAEJABUCArchiveDatabaseOut@23@PBUCCompressionMethodMode@23@ABUCHeaderOptions@23@@Z$3 proc near
.text$x:000028E0                                         ; DATA XREF: .xdata$x:00002A28o
.text$x:000028E0                 lea     ecx, [ebp-148h]
.text$x:000028E6                 jmp     ??1?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text$x:000028E6 __unwindfunclet$?WriteDatabase@COutArchive@N7z@NArchive@@QAEJABUCArchiveDatabaseOut@23@PBUCCompressionMethodMode@23@ABUCHeaderOptions@23@@Z$3 endp
.text$x:000028E6
.text$x:000028EB
.text$x:000028EB ; =============== S U B R O U T I N E =======================================
.text$x:000028EB
.text$x:000028EB
.text$x:000028EB __unwindfunclet$?WriteDatabase@COutArchive@N7z@NArchive@@QAEJABUCArchiveDatabaseOut@23@PBUCCompressionMethodMode@23@ABUCHeaderOptions@23@@Z$4 proc near
.text$x:000028EB                                         ; DATA XREF: .xdata$x:00002A30o
.text$x:000028EB                 lea     ecx, [ebp-15Ch]
.text$x:000028F1                 jmp     ??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CFolder>::~CObjectVector<NArchive::N7z::CFolder>(void)
.text$x:000028F1 __unwindfunclet$?WriteDatabase@COutArchive@N7z@NArchive@@QAEJABUCArchiveDatabaseOut@23@PBUCCompressionMethodMode@23@ABUCHeaderOptions@23@@Z$4 endp
.text$x:000028F1
.text$x:000028F6
.text$x:000028F6 ; =============== S U B R O U T I N E =======================================
.text$x:000028F6
.text$x:000028F6
.text$x:000028F6 __unwindfunclet$?WriteDatabase@COutArchive@N7z@NArchive@@QAEJABUCArchiveDatabaseOut@23@PBUCCompressionMethodMode@23@ABUCHeaderOptions@23@@Z$5 proc near
.text$x:000028F6                                         ; DATA XREF: .xdata$x:00002A38o
.text$x:000028F6                 lea     ecx, [ebp-194h] ; this
.text$x:000028FC                 jmp     ??1COutFolders@N7z@NArchive@@QAE@XZ ; NArchive::N7z::COutFolders::~COutFolders(void)
.text$x:000028FC __unwindfunclet$?WriteDatabase@COutArchive@N7z@NArchive@@QAEJABUCArchiveDatabaseOut@23@PBUCCompressionMethodMode@23@ABUCHeaderOptions@23@@Z$5 endp
.text$x:000028FC
.text$x:00002901
.text$x:00002901 ; =============== S U B R O U T I N E =======================================
.text$x:00002901
.text$x:00002901
.text$x:00002901 __unwindfunclet$?WriteDatabase@COutArchive@N7z@NArchive@@QAEJABUCArchiveDatabaseOut@23@PBUCCompressionMethodMode@23@ABUCHeaderOptions@23@@Z$6 proc near
.text$x:00002901                                         ; DATA XREF: .xdata$x:00002A40o
.text$x:00002901                 lea     ecx, [ebp-1F0h] ; this
.text$x:00002907                 jmp     ??1CUInt32DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt32DefVector::~CUInt32DefVector(void)
.text$x:00002907 __unwindfunclet$?WriteDatabase@COutArchive@N7z@NArchive@@QAEJABUCArchiveDatabaseOut@23@PBUCCompressionMethodMode@23@ABUCHeaderOptions@23@@Z$6 endp
.text$x:00002907
.text$x:0000290C
.text$x:0000290C ; =============== S U B R O U T I N E =======================================
.text$x:0000290C
.text$x:0000290C
.text$x:0000290C __ehhandler$?WriteDatabase@COutArchive@N7z@NArchive@@QAEJABUCArchiveDatabaseOut@23@PBUCCompressionMethodMode@23@ABUCHeaderOptions@23@@Z proc near
.text$x:0000290C                                         ; DATA XREF: NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+5o
.text$x:0000290C
.text$x:0000290C arg_4           = dword ptr  8
.text$x:0000290C
.text$x:0000290C                 mov     edx, [esp+arg_4]
.text$x:00002910                 lea     eax, [edx+0Ch]
.text$x:00002913                 mov     ecx, [edx-200h]
.text$x:00002919                 xor     ecx, eax
.text$x:0000291B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002920                 mov     ecx, [edx-4]
.text$x:00002923                 xor     ecx, eax
.text$x:00002925                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000292A                 mov     eax, offset __ehfuncinfo$?WriteDatabase@COutArchive@N7z@NArchive@@QAEJABUCArchiveDatabaseOut@23@PBUCCompressionMethodMode@23@ABUCHeaderOptions@23@@Z
.text$x:0000292F                 jmp     ___CxxFrameHandler3
.text$x:0000292F __ehhandler$?WriteDatabase@COutArchive@N7z@NArchive@@QAEJABUCArchiveDatabaseOut@23@PBUCCompressionMethodMode@23@ABUCHeaderOptions@23@@Z endp
.text$x:0000292F
.text$x:0000292F _text$x         ends
.text$x:0000292F
.xdata$x:00002934 ; ===========================================================================
.xdata$x:00002934
.xdata$x:00002934 ; Segment type: Pure data
.xdata$x:00002934 ; Segment permissions: Read
.xdata$x:00002934 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00002934                 assume cs:_xdata$x
.xdata$x:00002934                 ;org 2934h
.xdata$x:00002934 __unwindtable$?WriteSubStreamsInfo@COutArchive@N7z@NArchive@@AAEXABV?$CObjectVector@UCFolder@N7z@NArchive@@@@ABUCOutFolders@23@ABV?$CRecordVector@_K@@ABUCUInt32DefVector@23@@Z db 0FFh
.xdata$x:00002934                                         ; DATA XREF: .xdata$x:00002944o
.xdata$x:00002935                 db 0FFh
.xdata$x:00002936                 db 0FFh
.xdata$x:00002937                 db 0FFh
.xdata$x:00002938                 dd offset __unwindfunclet$?WriteSubStreamsInfo@COutArchive@N7z@NArchive@@AAEXABV?$CObjectVector@UCFolder@N7z@NArchive@@@@ABUCOutFolders@23@ABV?$CRecordVector@_K@@ABUCUInt32DefVector@23@@Z$0
.xdata$x:0000293C __ehfuncinfo$?WriteSubStreamsInfo@COutArchive@N7z@NArchive@@AAEXABV?$CObjectVector@UCFolder@N7z@NArchive@@@@ABUCOutFolders@23@ABV?$CRecordVector@_K@@ABUCUInt32DefVector@23@@Z db  22h ; "
.xdata$x:0000293C                                         ; DATA XREF: __ehhandler$?WriteSubStreamsInfo@COutArchive@N7z@NArchive@@AAEXABV?$CObjectVector@UCFolder@N7z@NArchive@@@@ABUCOutFolders@23@ABV?$CRecordVector@_K@@ABUCUInt32DefVector@23@@Z+11o
.xdata$x:0000293D                 db    5
.xdata$x:0000293E                 db  93h ; ô
.xdata$x:0000293F                 db  19h
.xdata$x:00002940                 db    1
.xdata$x:00002941                 db    0
.xdata$x:00002942                 db    0
.xdata$x:00002943                 db    0
.xdata$x:00002944                 dd offset __unwindtable$?WriteSubStreamsInfo@COutArchive@N7z@NArchive@@AAEXABV?$CObjectVector@UCFolder@N7z@NArchive@@@@ABUCOutFolders@23@ABV?$CRecordVector@_K@@ABUCUInt32DefVector@23@@Z
.xdata$x:00002948                 db    0
.xdata$x:00002949                 db    0
.xdata$x:0000294A                 db    0
.xdata$x:0000294B                 db    0
.xdata$x:0000294C                 db    0
.xdata$x:0000294D                 db    0
.xdata$x:0000294E                 db    0
.xdata$x:0000294F                 db    0
.xdata$x:00002950                 db    0
.xdata$x:00002951                 db    0
.xdata$x:00002952                 db    0
.xdata$x:00002953                 db    0
.xdata$x:00002954                 db    0
.xdata$x:00002955                 db    0
.xdata$x:00002956                 db    0
.xdata$x:00002957                 db    0
.xdata$x:00002958                 db    0
.xdata$x:00002959                 db    0
.xdata$x:0000295A                 db    0
.xdata$x:0000295B                 db    0
.xdata$x:0000295C                 db    1
.xdata$x:0000295D                 db    0
.xdata$x:0000295E                 db    0
.xdata$x:0000295F                 db    0
.xdata$x:00002960 __unwindtable$?EncodeStream@COutArchive@N7z@NArchive@@AAEJAAVCEncoder@23@ABV?$CBuffer@E@@AAV?$CRecordVector@_K@@AAV?$CObjectVector@UCFolder@N7z@NArchive@@@@AAUCOutFolders@23@@Z db 0FFh
.xdata$x:00002960                                         ; DATA XREF: .xdata$x:00002978o
.xdata$x:00002961                 db 0FFh
.xdata$x:00002962                 db 0FFh
.xdata$x:00002963                 db 0FFh
.xdata$x:00002964                 dd offset __unwindfunclet$?EncodeStream@COutArchive@N7z@NArchive@@AAEJAAVCEncoder@23@ABV?$CBuffer@E@@AAV?$CRecordVector@_K@@AAV?$CObjectVector@UCFolder@N7z@NArchive@@@@AAUCOutFolders@23@@Z$0
.xdata$x:00002968                 db 0FFh
.xdata$x:00002969                 db 0FFh
.xdata$x:0000296A                 db 0FFh
.xdata$x:0000296B                 db 0FFh
.xdata$x:0000296C                 dd offset __unwindfunclet$?EncodeStream@COutArchive@N7z@NArchive@@AAEJAAVCEncoder@23@ABV?$CBuffer@E@@AAV?$CRecordVector@_K@@AAV?$CObjectVector@UCFolder@N7z@NArchive@@@@AAUCOutFolders@23@@Z$1
.xdata$x:00002970 __ehfuncinfo$?EncodeStream@COutArchive@N7z@NArchive@@AAEJAAVCEncoder@23@ABV?$CBuffer@E@@AAV?$CRecordVector@_K@@AAV?$CObjectVector@UCFolder@N7z@NArchive@@@@AAUCOutFolders@23@@Z db  22h ; "
.xdata$x:00002970                                         ; DATA XREF: __ehhandler$?EncodeStream@COutArchive@N7z@NArchive@@AAEJAAVCEncoder@23@ABV?$CBuffer@E@@AAV?$CRecordVector@_K@@AAV?$CObjectVector@UCFolder@N7z@NArchive@@@@AAUCOutFolders@23@@Z+11o
.xdata$x:00002971                 db    5
.xdata$x:00002972                 db  93h ; ô
.xdata$x:00002973                 db  19h
.xdata$x:00002974                 db    2
.xdata$x:00002975                 db    0
.xdata$x:00002976                 db    0
.xdata$x:00002977                 db    0
.xdata$x:00002978                 dd offset __unwindtable$?EncodeStream@COutArchive@N7z@NArchive@@AAEJAAVCEncoder@23@ABV?$CBuffer@E@@AAV?$CRecordVector@_K@@AAV?$CObjectVector@UCFolder@N7z@NArchive@@@@AAUCOutFolders@23@@Z
.xdata$x:0000297C                 db    0
.xdata$x:0000297D                 db    0
.xdata$x:0000297E                 db    0
.xdata$x:0000297F                 db    0
.xdata$x:00002980                 db    0
.xdata$x:00002981                 db    0
.xdata$x:00002982                 db    0
.xdata$x:00002983                 db    0
.xdata$x:00002984                 db    0
.xdata$x:00002985                 db    0
.xdata$x:00002986                 db    0
.xdata$x:00002987                 db    0
.xdata$x:00002988                 db    0
.xdata$x:00002989                 db    0
.xdata$x:0000298A                 db    0
.xdata$x:0000298B                 db    0
.xdata$x:0000298C                 db    0
.xdata$x:0000298D                 db    0
.xdata$x:0000298E                 db    0
.xdata$x:0000298F                 db    0
.xdata$x:00002990                 db    1
.xdata$x:00002991                 db    0
.xdata$x:00002992                 db    0
.xdata$x:00002993                 db    0
.xdata$x:00002994 __ehfuncinfo$?WriteHeader@COutArchive@N7z@NArchive@@AAEXABUCArchiveDatabaseOut@23@AA_K@Z db  22h ; "
.xdata$x:00002994                                         ; DATA XREF: __ehhandler$?WriteHeader@COutArchive@N7z@NArchive@@AAEXABUCArchiveDatabaseOut@23@AA_K@Z+14o
.xdata$x:00002995                 db    5
.xdata$x:00002996                 db  93h ; ô
.xdata$x:00002997                 db  19h
.xdata$x:00002998                 db    6
.xdata$x:00002999                 db    0
.xdata$x:0000299A                 db    0
.xdata$x:0000299B                 db    0
.xdata$x:0000299C                 dd offset __unwindtable$?WriteHeader@COutArchive@N7z@NArchive@@AAEXABUCArchiveDatabaseOut@23@AA_K@Z
.xdata$x:000029A0                 db    0
.xdata$x:000029A1                 db    0
.xdata$x:000029A2                 db    0
.xdata$x:000029A3                 db    0
.xdata$x:000029A4                 db    0
.xdata$x:000029A5                 db    0
.xdata$x:000029A6                 db    0
.xdata$x:000029A7                 db    0
.xdata$x:000029A8                 db    0
.xdata$x:000029A9                 db    0
.xdata$x:000029AA                 db    0
.xdata$x:000029AB                 db    0
.xdata$x:000029AC                 db    0
.xdata$x:000029AD                 db    0
.xdata$x:000029AE                 db    0
.xdata$x:000029AF                 db    0
.xdata$x:000029B0                 db    0
.xdata$x:000029B1                 db    0
.xdata$x:000029B2                 db    0
.xdata$x:000029B3                 db    0
.xdata$x:000029B4                 db    1
.xdata$x:000029B5                 db    0
.xdata$x:000029B6                 db    0
.xdata$x:000029B7                 db    0
.xdata$x:000029B8 __unwindtable$?WriteHeader@COutArchive@N7z@NArchive@@AAEXABUCArchiveDatabaseOut@23@AA_K@Z db 0FFh
.xdata$x:000029B8                                         ; DATA XREF: .xdata$x:0000299Co
.xdata$x:000029B9                 db 0FFh
.xdata$x:000029BA                 db 0FFh
.xdata$x:000029BB                 db 0FFh
.xdata$x:000029BC                 dd offset __unwindfunclet$?WriteHeader@COutArchive@N7z@NArchive@@AAEXABUCArchiveDatabaseOut@23@AA_K@Z$0
.xdata$x:000029C0                 db    0
.xdata$x:000029C1                 db    0
.xdata$x:000029C2                 db    0
.xdata$x:000029C3                 db    0
.xdata$x:000029C4                 dd offset __unwindfunclet$?WriteHeader@COutArchive@N7z@NArchive@@AAEXABUCArchiveDatabaseOut@23@AA_K@Z$1
.xdata$x:000029C8                 db 0FFh
.xdata$x:000029C9                 db 0FFh
.xdata$x:000029CA                 db 0FFh
.xdata$x:000029CB                 db 0FFh
.xdata$x:000029CC                 dd offset __unwindfunclet$?WriteHeader@COutArchive@N7z@NArchive@@AAEXABUCArchiveDatabaseOut@23@AA_K@Z$2
.xdata$x:000029D0                 db    2
.xdata$x:000029D1                 db    0
.xdata$x:000029D2                 db    0
.xdata$x:000029D3                 db    0
.xdata$x:000029D4                 dd offset __unwindfunclet$?WriteHeader@COutArchive@N7z@NArchive@@AAEXABUCArchiveDatabaseOut@23@AA_K@Z$3
.xdata$x:000029D8                 db    3
.xdata$x:000029D9                 db    0
.xdata$x:000029DA                 db    0
.xdata$x:000029DB                 db    0
.xdata$x:000029DC                 dd offset __unwindfunclet$?WriteHeader@COutArchive@N7z@NArchive@@AAEXABUCArchiveDatabaseOut@23@AA_K@Z$4
.xdata$x:000029E0                 db 0FFh
.xdata$x:000029E1                 db 0FFh
.xdata$x:000029E2                 db 0FFh
.xdata$x:000029E3                 db 0FFh
.xdata$x:000029E4                 dd offset __unwindfunclet$?WriteHeader@COutArchive@N7z@NArchive@@AAEXABUCArchiveDatabaseOut@23@AA_K@Z$5
.xdata$x:000029E8 __ehfuncinfo$?WriteDatabase@COutArchive@N7z@NArchive@@QAEJABUCArchiveDatabaseOut@23@PBUCCompressionMethodMode@23@ABUCHeaderOptions@23@@Z db  22h ; "
.xdata$x:000029E8                                         ; DATA XREF: __ehhandler$?WriteDatabase@COutArchive@N7z@NArchive@@QAEJABUCArchiveDatabaseOut@23@PBUCCompressionMethodMode@23@ABUCHeaderOptions@23@@Z+1Eo
.xdata$x:000029E9                 db    5
.xdata$x:000029EA                 db  93h ; ô
.xdata$x:000029EB                 db  19h
.xdata$x:000029EC                 db    7
.xdata$x:000029ED                 db    0
.xdata$x:000029EE                 db    0
.xdata$x:000029EF                 db    0
.xdata$x:000029F0                 dd offset __unwindtable$?WriteDatabase@COutArchive@N7z@NArchive@@QAEJABUCArchiveDatabaseOut@23@PBUCCompressionMethodMode@23@ABUCHeaderOptions@23@@Z
.xdata$x:000029F4                 db    0
.xdata$x:000029F5                 db    0
.xdata$x:000029F6                 db    0
.xdata$x:000029F7                 db    0
.xdata$x:000029F8                 db    0
.xdata$x:000029F9                 db    0
.xdata$x:000029FA                 db    0
.xdata$x:000029FB                 db    0
.xdata$x:000029FC                 db    0
.xdata$x:000029FD                 db    0
.xdata$x:000029FE                 db    0
.xdata$x:000029FF                 db    0
.xdata$x:00002A00                 db    0
.xdata$x:00002A01                 db    0
.xdata$x:00002A02                 db    0
.xdata$x:00002A03                 db    0
.xdata$x:00002A04                 db    0
.xdata$x:00002A05                 db    0
.xdata$x:00002A06                 db    0
.xdata$x:00002A07                 db    0
.xdata$x:00002A08                 db    1
.xdata$x:00002A09                 db    0
.xdata$x:00002A0A                 db    0
.xdata$x:00002A0B                 db    0
.xdata$x:00002A0C __unwindtable$?WriteDatabase@COutArchive@N7z@NArchive@@QAEJABUCArchiveDatabaseOut@23@PBUCCompressionMethodMode@23@ABUCHeaderOptions@23@@Z db 0FFh
.xdata$x:00002A0C                                         ; DATA XREF: .xdata$x:000029F0o
.xdata$x:00002A0D                 db 0FFh
.xdata$x:00002A0E                 db 0FFh
.xdata$x:00002A0F                 db 0FFh
.xdata$x:00002A10                 dd offset __unwindfunclet$?WriteDatabase@COutArchive@N7z@NArchive@@QAEJABUCArchiveDatabaseOut@23@PBUCCompressionMethodMode@23@ABUCHeaderOptions@23@@Z$0
.xdata$x:00002A14                 align 8
.xdata$x:00002A18                 dd offset __unwindfunclet$?WriteDatabase@COutArchive@N7z@NArchive@@QAEJABUCArchiveDatabaseOut@23@PBUCCompressionMethodMode@23@ABUCHeaderOptions@23@@Z$1
.xdata$x:00002A1C                 db    1
.xdata$x:00002A1D                 db    0
.xdata$x:00002A1E                 db    0
.xdata$x:00002A1F                 db    0
.xdata$x:00002A20                 dd offset __unwindfunclet$?WriteDatabase@COutArchive@N7z@NArchive@@QAEJABUCArchiveDatabaseOut@23@PBUCCompressionMethodMode@23@ABUCHeaderOptions@23@@Z$2
.xdata$x:00002A24                 db    2
.xdata$x:00002A25                 db    0
.xdata$x:00002A26                 db    0
.xdata$x:00002A27                 db    0
.xdata$x:00002A28                 dd offset __unwindfunclet$?WriteDatabase@COutArchive@N7z@NArchive@@QAEJABUCArchiveDatabaseOut@23@PBUCCompressionMethodMode@23@ABUCHeaderOptions@23@@Z$3
.xdata$x:00002A2C                 db    3
.xdata$x:00002A2D                 db    0
.xdata$x:00002A2E                 db    0
.xdata$x:00002A2F                 db    0
.xdata$x:00002A30                 dd offset __unwindfunclet$?WriteDatabase@COutArchive@N7z@NArchive@@QAEJABUCArchiveDatabaseOut@23@PBUCCompressionMethodMode@23@ABUCHeaderOptions@23@@Z$4
.xdata$x:00002A34                 db    4
.xdata$x:00002A35                 db    0
.xdata$x:00002A36                 db    0
.xdata$x:00002A37                 db    0
.xdata$x:00002A38                 dd offset __unwindfunclet$?WriteDatabase@COutArchive@N7z@NArchive@@QAEJABUCArchiveDatabaseOut@23@PBUCCompressionMethodMode@23@ABUCHeaderOptions@23@@Z$5
.xdata$x:00002A3C                 db    5
.xdata$x:00002A3D                 db    0
.xdata$x:00002A3E                 db    0
.xdata$x:00002A3F                 db    0
.xdata$x:00002A40                 dd offset __unwindfunclet$?WriteDatabase@COutArchive@N7z@NArchive@@QAEJABUCArchiveDatabaseOut@23@PBUCCompressionMethodMode@23@ABUCHeaderOptions@23@@Z$6
.xdata$x:00002A40 _xdata$x        ends
.xdata$x:00002A40
.text:00002A44 ; ===========================================================================
.text:00002A44
.text:00002A44 ; Segment type: Pure code
.text:00002A44 ; Segment permissions: Read/Execute
.text:00002A44 _text           segment para public 'CODE' use32
.text:00002A44                 assume cs:_text
.text:00002A44                 ;org 2A44h
.text:00002A44 ; COMDAT (pick any)
.text:00002A44                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002A44
.text:00002A44 ; =============== S U B R O U T I N E =======================================
.text:00002A44
.text:00002A44 ; Attributes: bp-based frame
.text:00002A44
.text:00002A44 ; bool __thiscall NArchive::N7z::CUInt32DefVector::ValidAndDefined(NArchive::N7z::CUInt32DefVector *this, unsigned int)
.text:00002A44                 public ?ValidAndDefined@CUInt32DefVector@N7z@NArchive@@QBE_NI@Z
.text:00002A44 ?ValidAndDefined@CUInt32DefVector@N7z@NArchive@@QBE_NI@Z proc near
.text:00002A44                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteSubStreamsInfo(CObjectVector<NArchive::N7z::CFolder> const &,NArchive::N7z::COutFolders const &,CRecordVector<unsigned __int64> const &,NArchive::N7z::CUInt32DefVector const &)+1EAp
.text:00002A44
.text:00002A44 var_8           = dword ptr -8
.text:00002A44 var_4           = dword ptr -4
.text:00002A44 arg_0           = dword ptr  8
.text:00002A44
.text:00002A44                 push    ebp
.text:00002A45                 mov     ebp, esp
.text:00002A47                 sub     esp, 8
.text:00002A4A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002A51                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002A58                 mov     [ebp+var_4], ecx
.text:00002A5B                 mov     ecx, [ebp+var_4]
.text:00002A5E                 call    ?Size@?$CRecordVector@_N@@QBEIXZ ; CRecordVector<bool>::Size(void)
.text:00002A63                 cmp     [ebp+arg_0], eax
.text:00002A66                 jnb     short loc_2A84
.text:00002A68                 mov     eax, [ebp+arg_0]
.text:00002A6B                 push    eax
.text:00002A6C                 mov     ecx, [ebp+var_4]
.text:00002A6F                 call    ??A?$CRecordVector@_N@@QBEAB_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:00002A74                 movzx   ecx, byte ptr [eax]
.text:00002A77                 test    ecx, ecx
.text:00002A79                 jz      short loc_2A84
.text:00002A7B                 mov     [ebp+var_8], 1
.text:00002A82                 jmp     short loc_2A8B
.text:00002A84 ; ---------------------------------------------------------------------------
.text:00002A84
.text:00002A84 loc_2A84:                               ; CODE XREF: NArchive::N7z::CUInt32DefVector::ValidAndDefined(uint)+22j
.text:00002A84                                         ; NArchive::N7z::CUInt32DefVector::ValidAndDefined(uint)+35j
.text:00002A84                 mov     [ebp+var_8], 0
.text:00002A8B
.text:00002A8B loc_2A8B:                               ; CODE XREF: NArchive::N7z::CUInt32DefVector::ValidAndDefined(uint)+3Ej
.text:00002A8B                 mov     al, byte ptr [ebp+var_8]
.text:00002A8E                 add     esp, 8
.text:00002A91                 cmp     ebp, esp
.text:00002A93                 call    __RTC_CheckEsp
.text:00002A98                 mov     esp, ebp
.text:00002A9A                 pop     ebp
.text:00002A9B                 retn    4
.text:00002A9B ?ValidAndDefined@CUInt32DefVector@N7z@NArchive@@QBE_NI@Z endp
.text:00002A9B
.text:00002A9B ; ---------------------------------------------------------------------------
.text:00002A9E                 align 10h
.text:00002A9E _text           ends
.text:00002A9E
.text:00002AA0 ; ===========================================================================
.text:00002AA0
.text:00002AA0 ; Segment type: Pure code
.text:00002AA0 ; Segment permissions: Read/Execute
.text:00002AA0 _text           segment para public 'CODE' use32
.text:00002AA0                 assume cs:_text
.text:00002AA0                 ;org 2AA0h
.text:00002AA0 ; COMDAT (pick any)
.text:00002AA0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002AA0
.text:00002AA0 ; =============== S U B R O U T I N E =======================================
.text:00002AA0
.text:00002AA0 ; Attributes: bp-based frame
.text:00002AA0
.text:00002AA0 ; _DWORD __thiscall NArchive::N7z::CUInt32DefVector::CUInt32DefVector(NArchive::N7z::CUInt32DefVector *__hidden this)
.text:00002AA0                 public ??0CUInt32DefVector@N7z@NArchive@@QAE@XZ
.text:00002AA0 ??0CUInt32DefVector@N7z@NArchive@@QAE@XZ proc near
.text:00002AA0                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteSubStreamsInfo(CObjectVector<NArchive::N7z::CFolder> const &,NArchive::N7z::COutFolders const &,CRecordVector<unsigned __int64> const &,NArchive::N7z::CUInt32DefVector const &)+196p
.text:00002AA0                                         ; NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+10Ep ...
.text:00002AA0
.text:00002AA0 var_10          = dword ptr -10h
.text:00002AA0 var_C           = dword ptr -0Ch
.text:00002AA0 var_4           = dword ptr -4
.text:00002AA0
.text:00002AA0                 push    ebp
.text:00002AA1                 mov     ebp, esp
.text:00002AA3                 push    0FFFFFFFFh
.text:00002AA5                 push    offset __ehhandler$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ
.text:00002AAA                 mov     eax, large fs:0
.text:00002AB0                 push    eax
.text:00002AB1                 push    ecx
.text:00002AB2                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00002AB9                 mov     eax, dword ptr ds:___security_cookie
.text:00002ABE                 xor     eax, ebp
.text:00002AC0                 push    eax
.text:00002AC1                 lea     eax, [ebp+var_C]
.text:00002AC4                 mov     large fs:0, eax
.text:00002ACA                 mov     [ebp+var_10], ecx
.text:00002ACD                 mov     ecx, [ebp+var_10]
.text:00002AD0                 call    ??0?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::CRecordVector<bool>(void)
.text:00002AD5                 mov     [ebp+var_4], 0
.text:00002ADC                 mov     ecx, [ebp+var_10]
.text:00002ADF                 add     ecx, 0Ch
.text:00002AE2                 call    ??0?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::CRecordVector<uint>(void)
.text:00002AE7                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002AEE                 mov     eax, [ebp+var_10]
.text:00002AF1                 mov     ecx, [ebp+var_C]
.text:00002AF4                 mov     large fs:0, ecx
.text:00002AFB                 pop     ecx
.text:00002AFC                 add     esp, 10h
.text:00002AFF                 cmp     ebp, esp
.text:00002B01                 call    __RTC_CheckEsp
.text:00002B06                 mov     esp, ebp
.text:00002B08                 pop     ebp
.text:00002B09                 retn
.text:00002B09 ??0CUInt32DefVector@N7z@NArchive@@QAE@XZ endp
.text:00002B09
.text:00002B09 ; ---------------------------------------------------------------------------
.text:00002B0A                 align 4
.text:00002B0A _text           ends
.text:00002B0A
.text$x:00002B0C ; ===========================================================================
.text$x:00002B0C
.text$x:00002B0C ; Segment type: Pure code
.text$x:00002B0C ; Segment permissions: Read/Execute
.text$x:00002B0C _text$x         segment para public 'CODE' use32
.text$x:00002B0C                 assume cs:_text$x
.text$x:00002B0C                 ;org 2B0Ch
.text$x:00002B0C ; COMDAT (pick associative to section at 2AA0)
.text$x:00002B0C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00002B0C
.text$x:00002B0C ; =============== S U B R O U T I N E =======================================
.text$x:00002B0C
.text$x:00002B0C
.text$x:00002B0C __unwindfunclet$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:00002B0C                                         ; DATA XREF: .xdata$x:00002B34o
.text$x:00002B0C                 mov     ecx, [ebp-10h]
.text$x:00002B0F                 jmp     ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text$x:00002B0F __unwindfunclet$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ$0 endp
.text$x:00002B0F
.text$x:00002B14
.text$x:00002B14 ; =============== S U B R O U T I N E =======================================
.text$x:00002B14
.text$x:00002B14
.text$x:00002B14 __ehhandler$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ proc near
.text$x:00002B14                                         ; DATA XREF: NArchive::N7z::CUInt32DefVector::CUInt32DefVector(void)+5o
.text$x:00002B14
.text$x:00002B14 arg_4           = dword ptr  8
.text$x:00002B14
.text$x:00002B14                 mov     edx, [esp+arg_4]
.text$x:00002B18                 lea     eax, [edx+0Ch]
.text$x:00002B1B                 mov     ecx, [edx-8]
.text$x:00002B1E                 xor     ecx, eax
.text$x:00002B20                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002B25                 mov     eax, offset __ehfuncinfo$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ
.text$x:00002B2A                 jmp     ___CxxFrameHandler3
.text$x:00002B2A __ehhandler$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ endp
.text$x:00002B2A
.text$x:00002B2A ; ---------------------------------------------------------------------------
.text$x:00002B2F                 align 10h
.text$x:00002B2F _text$x         ends
.text$x:00002B2F
.xdata$x:00002B30 ; ===========================================================================
.xdata$x:00002B30
.xdata$x:00002B30 ; Segment type: Pure data
.xdata$x:00002B30 ; Segment permissions: Read
.xdata$x:00002B30 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00002B30                 assume cs:_xdata$x
.xdata$x:00002B30                 ;org 2B30h
.xdata$x:00002B30 ; COMDAT (pick associative to section at 2AA0)
.xdata$x:00002B30 __unwindtable$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:00002B30                                         ; DATA XREF: .xdata$x:00002B40o
.xdata$x:00002B31                 db 0FFh
.xdata$x:00002B32                 db 0FFh
.xdata$x:00002B33                 db 0FFh
.xdata$x:00002B34                 dd offset __unwindfunclet$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ$0
.xdata$x:00002B38 __ehfuncinfo$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00002B38                                         ; DATA XREF: __ehhandler$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ+11o
.xdata$x:00002B39                 db    5
.xdata$x:00002B3A                 db  93h ; ô
.xdata$x:00002B3B                 db  19h
.xdata$x:00002B3C                 db    1
.xdata$x:00002B3D                 db    0
.xdata$x:00002B3E                 db    0
.xdata$x:00002B3F                 db    0
.xdata$x:00002B40                 dd offset __unwindtable$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ
.xdata$x:00002B44                 db    0
.xdata$x:00002B45                 db    0
.xdata$x:00002B46                 db    0
.xdata$x:00002B47                 db    0
.xdata$x:00002B48                 db    0
.xdata$x:00002B49                 db    0
.xdata$x:00002B4A                 db    0
.xdata$x:00002B4B                 db    0
.xdata$x:00002B4C                 db    0
.xdata$x:00002B4D                 db    0
.xdata$x:00002B4E                 db    0
.xdata$x:00002B4F                 db    0
.xdata$x:00002B50                 db    0
.xdata$x:00002B51                 db    0
.xdata$x:00002B52                 db    0
.xdata$x:00002B53                 db    0
.xdata$x:00002B54                 db    0
.xdata$x:00002B55                 db    0
.xdata$x:00002B56                 db    0
.xdata$x:00002B57                 db    0
.xdata$x:00002B58                 db    1
.xdata$x:00002B59                 db    0
.xdata$x:00002B5A                 db    0
.xdata$x:00002B5B                 db    0
.xdata$x:00002B5B _xdata$x        ends
.xdata$x:00002B5B
.text:00002B5C ; ===========================================================================
.text:00002B5C
.text:00002B5C ; Segment type: Pure code
.text:00002B5C ; Segment permissions: Read/Execute
.text:00002B5C _text           segment para public 'CODE' use32
.text:00002B5C                 assume cs:_text
.text:00002B5C                 ;org 2B5Ch
.text:00002B5C ; COMDAT (pick any)
.text:00002B5C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002B5C
.text:00002B5C ; =============== S U B R O U T I N E =======================================
.text:00002B5C
.text:00002B5C ; Attributes: bp-based frame
.text:00002B5C
.text:00002B5C ; _DWORD __thiscall NArchive::N7z::CUInt32DefVector::~CUInt32DefVector(NArchive::N7z::CUInt32DefVector *__hidden this)
.text:00002B5C                 public ??1CUInt32DefVector@N7z@NArchive@@QAE@XZ
.text:00002B5C ??1CUInt32DefVector@N7z@NArchive@@QAE@XZ proc near
.text:00002B5C                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteSubStreamsInfo(CObjectVector<NArchive::N7z::CFolder> const &,NArchive::N7z::COutFolders const &,CRecordVector<unsigned __int64> const &,NArchive::N7z::CUInt32DefVector const &)+27Dp
.text:00002B5C                                         ; NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+1B7p ...
.text:00002B5C
.text:00002B5C var_10          = dword ptr -10h
.text:00002B5C var_C           = dword ptr -0Ch
.text:00002B5C var_4           = dword ptr -4
.text:00002B5C
.text:00002B5C                 push    ebp
.text:00002B5D                 mov     ebp, esp
.text:00002B5F                 push    0FFFFFFFFh
.text:00002B61                 push    offset __ehhandler$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ
.text:00002B66                 mov     eax, large fs:0
.text:00002B6C                 push    eax
.text:00002B6D                 push    ecx
.text:00002B6E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00002B75                 mov     eax, dword ptr ds:___security_cookie
.text:00002B7A                 xor     eax, ebp
.text:00002B7C                 push    eax
.text:00002B7D                 lea     eax, [ebp+var_C]
.text:00002B80                 mov     large fs:0, eax
.text:00002B86                 mov     [ebp+var_10], ecx
.text:00002B89                 mov     [ebp+var_4], 0
.text:00002B90                 mov     ecx, [ebp+var_10]
.text:00002B93                 add     ecx, 0Ch
.text:00002B96                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00002B9B                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002BA2                 mov     ecx, [ebp+var_10]
.text:00002BA5                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:00002BAA                 mov     ecx, [ebp+var_C]
.text:00002BAD                 mov     large fs:0, ecx
.text:00002BB4                 pop     ecx
.text:00002BB5                 add     esp, 10h
.text:00002BB8                 cmp     ebp, esp
.text:00002BBA                 call    __RTC_CheckEsp
.text:00002BBF                 mov     esp, ebp
.text:00002BC1                 pop     ebp
.text:00002BC2                 retn
.text:00002BC2 ??1CUInt32DefVector@N7z@NArchive@@QAE@XZ endp
.text:00002BC2
.text:00002BC2 ; ---------------------------------------------------------------------------
.text:00002BC3                 align 4
.text:00002BC3 _text           ends
.text:00002BC3
.text$x:00002BC4 ; ===========================================================================
.text$x:00002BC4
.text$x:00002BC4 ; Segment type: Pure code
.text$x:00002BC4 ; Segment permissions: Read/Execute
.text$x:00002BC4 _text$x         segment para public 'CODE' use32
.text$x:00002BC4                 assume cs:_text$x
.text$x:00002BC4                 ;org 2BC4h
.text$x:00002BC4 ; COMDAT (pick associative to section at 2B5C)
.text$x:00002BC4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00002BC4
.text$x:00002BC4 ; =============== S U B R O U T I N E =======================================
.text$x:00002BC4
.text$x:00002BC4
.text$x:00002BC4 __unwindfunclet$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:00002BC4                                         ; DATA XREF: .xdata$x:00002BECo
.text$x:00002BC4                 mov     ecx, [ebp-10h]
.text$x:00002BC7                 jmp     ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text$x:00002BC7 __unwindfunclet$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ$0 endp
.text$x:00002BC7
.text$x:00002BCC
.text$x:00002BCC ; =============== S U B R O U T I N E =======================================
.text$x:00002BCC
.text$x:00002BCC
.text$x:00002BCC __ehhandler$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ proc near
.text$x:00002BCC                                         ; DATA XREF: NArchive::N7z::CUInt32DefVector::~CUInt32DefVector(void)+5o
.text$x:00002BCC
.text$x:00002BCC arg_4           = dword ptr  8
.text$x:00002BCC
.text$x:00002BCC                 mov     edx, [esp+arg_4]
.text$x:00002BD0                 lea     eax, [edx+0Ch]
.text$x:00002BD3                 mov     ecx, [edx-8]
.text$x:00002BD6                 xor     ecx, eax
.text$x:00002BD8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002BDD                 mov     eax, offset __ehfuncinfo$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ
.text$x:00002BE2                 jmp     ___CxxFrameHandler3
.text$x:00002BE2 __ehhandler$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ endp
.text$x:00002BE2
.text$x:00002BE2 ; ---------------------------------------------------------------------------
.text$x:00002BE7                 align 4
.text$x:00002BE7 _text$x         ends
.text$x:00002BE7
.xdata$x:00002BE8 ; ===========================================================================
.xdata$x:00002BE8
.xdata$x:00002BE8 ; Segment type: Pure data
.xdata$x:00002BE8 ; Segment permissions: Read
.xdata$x:00002BE8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00002BE8                 assume cs:_xdata$x
.xdata$x:00002BE8                 ;org 2BE8h
.xdata$x:00002BE8 ; COMDAT (pick associative to section at 2B5C)
.xdata$x:00002BE8 __unwindtable$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:00002BE8                                         ; DATA XREF: .xdata$x:00002BF8o
.xdata$x:00002BE9                 db 0FFh
.xdata$x:00002BEA                 db 0FFh
.xdata$x:00002BEB                 db 0FFh
.xdata$x:00002BEC                 dd offset __unwindfunclet$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ$0
.xdata$x:00002BF0 __ehfuncinfo$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00002BF0                                         ; DATA XREF: __ehhandler$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ+11o
.xdata$x:00002BF1                 db    5
.xdata$x:00002BF2                 db  93h ; ô
.xdata$x:00002BF3                 db  19h
.xdata$x:00002BF4                 db    1
.xdata$x:00002BF5                 db    0
.xdata$x:00002BF6                 db    0
.xdata$x:00002BF7                 db    0
.xdata$x:00002BF8                 dd offset __unwindtable$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ
.xdata$x:00002BFC                 db    0
.xdata$x:00002BFD                 db    0
.xdata$x:00002BFE                 db    0
.xdata$x:00002BFF                 db    0
.xdata$x:00002C00                 db    0
.xdata$x:00002C01                 db    0
.xdata$x:00002C02                 db    0
.xdata$x:00002C03                 db    0
.xdata$x:00002C04                 db    0
.xdata$x:00002C05                 db    0
.xdata$x:00002C06                 db    0
.xdata$x:00002C07                 db    0
.xdata$x:00002C08                 db    0
.xdata$x:00002C09                 db    0
.xdata$x:00002C0A                 db    0
.xdata$x:00002C0B                 db    0
.xdata$x:00002C0C                 db    0
.xdata$x:00002C0D                 db    0
.xdata$x:00002C0E                 db    0
.xdata$x:00002C0F                 db    0
.xdata$x:00002C10                 db    1
.xdata$x:00002C11                 db    0
.xdata$x:00002C12                 db    0
.xdata$x:00002C13                 db    0
.xdata$x:00002C13 _xdata$x        ends
.xdata$x:00002C13
.text:00002C14 ; ===========================================================================
.text:00002C14
.text:00002C14 ; Segment type: Pure code
.text:00002C14 ; Segment permissions: Read/Execute
.text:00002C14 _text           segment para public 'CODE' use32
.text:00002C14                 assume cs:_text
.text:00002C14                 ;org 2C14h
.text:00002C14 ; COMDAT (pick any)
.text:00002C14                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002C14
.text:00002C14 ; =============== S U B R O U T I N E =======================================
.text:00002C14
.text:00002C14 ; Attributes: bp-based frame
.text:00002C14
.text:00002C14 ; void __thiscall CBufInStream::Init(CBufInStream *this, const unsigned __int8 *, unsigned int, struct IUnknown *)
.text:00002C14                 public ?Init@CBufInStream@@QAEXPBEIPAUIUnknown@@@Z
.text:00002C14 ?Init@CBufInStream@@QAEXPBEIPAUIUnknown@@@Z proc near
.text:00002C14                                         ; CODE XREF: NArchive::N7z::COutArchive::EncodeStream(NArchive::N7z::CEncoder &,CBuffer<uchar> const &,CRecordVector<unsigned __int64> &,CObjectVector<NArchive::N7z::CFolder> &,NArchive::N7z::COutFolders &)+A6p
.text:00002C14
.text:00002C14 var_4           = dword ptr -4
.text:00002C14 arg_0           = dword ptr  8
.text:00002C14 arg_4           = dword ptr  0Ch
.text:00002C14 arg_8           = dword ptr  10h
.text:00002C14
.text:00002C14                 push    ebp
.text:00002C15                 mov     ebp, esp
.text:00002C17                 push    ecx
.text:00002C18                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002C1F                 mov     [ebp+var_4], ecx
.text:00002C22                 mov     eax, [ebp+var_4]
.text:00002C25                 mov     ecx, [ebp+arg_0]
.text:00002C28                 mov     [eax+8], ecx
.text:00002C2B                 mov     edx, [ebp+var_4]
.text:00002C2E                 mov     eax, [ebp+arg_4]
.text:00002C31                 mov     [edx+18h], eax
.text:00002C34                 mov     ecx, [ebp+var_4]
.text:00002C37                 mov     dword ptr [ecx+10h], 0
.text:00002C3E                 mov     dword ptr [ecx+14h], 0
.text:00002C45                 mov     edx, [ebp+arg_8]
.text:00002C48                 push    edx
.text:00002C49                 mov     ecx, [ebp+var_4]
.text:00002C4C                 add     ecx, 1Ch
.text:00002C4F                 call    ??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z ; CMyComPtr<IUnknown>::operator=(IUnknown *)
.text:00002C54                 add     esp, 4
.text:00002C57                 cmp     ebp, esp
.text:00002C59                 call    __RTC_CheckEsp
.text:00002C5E                 mov     esp, ebp
.text:00002C60                 pop     ebp
.text:00002C61                 retn    0Ch
.text:00002C61 ?Init@CBufInStream@@QAEXPBEIPAUIUnknown@@@Z endp
.text:00002C61
.text:00002C61 _text           ends
.text:00002C61
.text:00002C64 ; ===========================================================================
.text:00002C64
.text:00002C64 ; Segment type: Pure code
.text:00002C64 ; Segment permissions: Read/Execute
.text:00002C64 _text           segment para public 'CODE' use32
.text:00002C64                 assume cs:_text
.text:00002C64                 ;org 2C64h
.text:00002C64 ; COMDAT (pick any)
.text:00002C64                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002C64
.text:00002C64 ; =============== S U B R O U T I N E =======================================
.text:00002C64
.text:00002C64 ; Attributes: bp-based frame
.text:00002C64
.text:00002C64 ; public: __thiscall CBufInStream::CBufInStream(void)
.text:00002C64                 public ??0CBufInStream@@QAE@XZ
.text:00002C64 ??0CBufInStream@@QAE@XZ proc near       ; CODE XREF: NArchive::N7z::COutArchive::EncodeStream(NArchive::N7z::CEncoder &,CBuffer<uchar> const &,CRecordVector<unsigned __int64> &,CObjectVector<NArchive::N7z::CFolder> &,NArchive::N7z::COutFolders &)+58p
.text:00002C64
.text:00002C64 var_4           = dword ptr -4
.text:00002C64
.text:00002C64                 push    ebp
.text:00002C65                 mov     ebp, esp
.text:00002C67                 push    ecx
.text:00002C68                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002C6F                 mov     [ebp+var_4], ecx
.text:00002C72                 mov     ecx, [ebp+var_4] ; this
.text:00002C75                 call    ??0IInStream@@QAE@XZ ; IInStream::IInStream(void)
.text:00002C7A                 mov     ecx, [ebp+var_4]
.text:00002C7D                 add     ecx, 4          ; this
.text:00002C80                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00002C85                 mov     eax, [ebp+var_4]
.text:00002C88                 mov     dword ptr [eax], offset ??_7CBufInStream@@6B@ ; const CBufInStream::`vftable'
.text:00002C8E                 mov     ecx, [ebp+var_4]
.text:00002C91                 add     ecx, 1Ch
.text:00002C94                 call    ??0?$CMyComPtr@UIUnknown@@@@QAE@XZ ; CMyComPtr<IUnknown>::CMyComPtr<IUnknown>(void)
.text:00002C99                 mov     eax, [ebp+var_4]
.text:00002C9C                 add     esp, 4
.text:00002C9F                 cmp     ebp, esp
.text:00002CA1                 call    __RTC_CheckEsp
.text:00002CA6                 mov     esp, ebp
.text:00002CA8                 pop     ebp
.text:00002CA9                 retn
.text:00002CA9 ??0CBufInStream@@QAE@XZ endp
.text:00002CA9
.text:00002CA9 ; ---------------------------------------------------------------------------
.text:00002CAA                 align 4
.text:00002CAA _text           ends
.text:00002CAA
.rdata:00002CAC ; ===========================================================================
.rdata:00002CAC
.rdata:00002CAC ; Segment type: Pure data
.rdata:00002CAC ; Segment permissions: Read
.rdata:00002CAC _rdata          segment dword public 'DATA' use32
.rdata:00002CAC                 assume cs:_rdata
.rdata:00002CAC                 ;org 2CACh
.rdata:00002CAC ; COMDAT (pick largest)
.rdata:00002CAC                 dd offset ??_R4CBufInStream@@6B@ ; const CBufInStream::`RTTI Complete Object Locator'
.rdata:00002CB0                 public ??_7CBufInStream@@6B@
.rdata:00002CB0 ; const CBufInStream::`vftable'
.rdata:00002CB0 ??_7CBufInStream@@6B@ dd offset ?QueryInterface@CBufInStream@@UAGJABU_GUID@@PAPAX@Z
.rdata:00002CB0                                         ; DATA XREF: CBufInStream::CBufInStream(void)+24o
.rdata:00002CB0                                         ; CBufInStream::QueryInterface(_GUID const &,void * *)
.rdata:00002CB4                 dd offset ?AddRef@CBufInStream@@UAGKXZ ; CBufInStream::AddRef(void)
.rdata:00002CB8                 dd offset ?Release@CBufInStream@@UAGKXZ ; CBufInStream::Release(void)
.rdata:00002CBC                 dd offset ?Read@CBufInStream@@UAGJPAXIPAI@Z ; CBufInStream::Read(void *,uint,uint *)
.rdata:00002CC0                 dd offset ?Seek@CBufInStream@@UAGJ_JIPA_K@Z ; CBufInStream::Seek(__int64,uint,unsigned __int64 *)
.rdata:00002CC0 _rdata          ends
.rdata:00002CC0
.rdata$r:00002CC4 ; ===========================================================================
.rdata$r:00002CC4
.rdata$r:00002CC4 ; Segment type: Pure data
.rdata$r:00002CC4 ; Segment permissions: Read
.rdata$r:00002CC4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002CC4                 assume cs:_rdata$r
.rdata$r:00002CC4                 ;org 2CC4h
.rdata$r:00002CC4 ; COMDAT (pick any)
.rdata$r:00002CC4                 public ??_R4CBufInStream@@6B@
.rdata$r:00002CC4 ; const CBufInStream::`RTTI Complete Object Locator'
.rdata$r:00002CC4 ??_R4CBufInStream@@6B@ db    0          ; DATA XREF: .rdata:00002CACo
.rdata$r:00002CC5                 db    0
.rdata$r:00002CC6                 db    0
.rdata$r:00002CC7                 db    0
.rdata$r:00002CC8                 db    0
.rdata$r:00002CC9                 db    0
.rdata$r:00002CCA                 db    0
.rdata$r:00002CCB                 db    0
.rdata$r:00002CCC                 db    0
.rdata$r:00002CCD                 db    0
.rdata$r:00002CCE                 db    0
.rdata$r:00002CCF                 db    0
.rdata$r:00002CD0                 dd offset ??_R0?AVCBufInStream@@@8 ; CBufInStream `RTTI Type Descriptor'
.rdata$r:00002CD4                 dd offset ??_R3CBufInStream@@8 ; CBufInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002CD4 _rdata$r        ends
.rdata$r:00002CD4
.data:00002CD8 ; ===========================================================================
.data:00002CD8
.data:00002CD8 ; Segment type: Pure data
.data:00002CD8 ; Segment permissions: Read/Write
.data:00002CD8 _data           segment dword public 'DATA' use32
.data:00002CD8                 assume cs:_data
.data:00002CD8                 ;org 2CD8h
.data:00002CD8 ; COMDAT (pick any)
.data:00002CD8                 public ??_R0?AVCBufInStream@@@8
.data:00002CD8 ; class CBufInStream `RTTI Type Descriptor'
.data:00002CD8 ??_R0?AVCBufInStream@@@8 dd offset ??_7type_info@@6B@
.data:00002CD8                                         ; DATA XREF: .rdata$r:00002CD0o
.data:00002CD8                                         ; .rdata$r:CBufInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00002CD8                                         ; const type_info::`vftable'
.data:00002CDC                 align 10h
.data:00002CE0 a_?avcbufinstre db '.?AVCBufInStream@@',0
.data:00002CF3                 align 4
.data:00002CF3 _data           ends
.data:00002CF3
.rdata$r:00002CF4 ; ===========================================================================
.rdata$r:00002CF4
.rdata$r:00002CF4 ; Segment type: Pure data
.rdata$r:00002CF4 ; Segment permissions: Read
.rdata$r:00002CF4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002CF4                 assume cs:_rdata$r
.rdata$r:00002CF4                 ;org 2CF4h
.rdata$r:00002CF4 ; COMDAT (pick any)
.rdata$r:00002CF4                 public ??_R3CBufInStream@@8
.rdata$r:00002CF4 ; CBufInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002CF4 ??_R3CBufInStream@@8 db    0            ; DATA XREF: .rdata$r:00002CD4o
.rdata$r:00002CF4                                         ; .rdata$r:00002D34o
.rdata$r:00002CF5                 db    0
.rdata$r:00002CF6                 db    0
.rdata$r:00002CF7                 db    0
.rdata$r:00002CF8                 db    1
.rdata$r:00002CF9                 db    0
.rdata$r:00002CFA                 db    0
.rdata$r:00002CFB                 db    0
.rdata$r:00002CFC                 db    5
.rdata$r:00002CFD                 db    0
.rdata$r:00002CFE                 db    0
.rdata$r:00002CFF                 db    0
.rdata$r:00002D00                 dd offset ??_R2CBufInStream@@8 ; CBufInStream::`RTTI Base Class Array'
.rdata$r:00002D00 _rdata$r        ends
.rdata$r:00002D00
.rdata$r:00002D04 ; ===========================================================================
.rdata$r:00002D04
.rdata$r:00002D04 ; Segment type: Pure data
.rdata$r:00002D04 ; Segment permissions: Read
.rdata$r:00002D04 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002D04                 assume cs:_rdata$r
.rdata$r:00002D04                 ;org 2D04h
.rdata$r:00002D04 ; COMDAT (pick any)
.rdata$r:00002D04                 public ??_R2CBufInStream@@8
.rdata$r:00002D04 ; CBufInStream::`RTTI Base Class Array'
.rdata$r:00002D04 ??_R2CBufInStream@@8 dd offset ??_R1A@?0A@EA@CBufInStream@@8
.rdata$r:00002D04                                         ; DATA XREF: .rdata$r:00002D00o
.rdata$r:00002D04                                         ; CBufInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002D08                 dd offset ??_R1A@?0A@EA@IInStream@@8 ; IInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002D0C                 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002D10                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002D14                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00002D18                 db    0
.rdata$r:00002D19                 align 4
.rdata$r:00002D19 _rdata$r        ends
.rdata$r:00002D19
.rdata$r:00002D1C ; ===========================================================================
.rdata$r:00002D1C
.rdata$r:00002D1C ; Segment type: Pure data
.rdata$r:00002D1C ; Segment permissions: Read
.rdata$r:00002D1C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002D1C                 assume cs:_rdata$r
.rdata$r:00002D1C                 ;org 2D1Ch
.rdata$r:00002D1C ; COMDAT (pick any)
.rdata$r:00002D1C                 public ??_R1A@?0A@EA@CBufInStream@@8
.rdata$r:00002D1C ; CBufInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00002D1C ??_R1A@?0A@EA@CBufInStream@@8 dd offset ??_R0?AVCBufInStream@@@8
.rdata$r:00002D1C                                         ; DATA XREF: .rdata$r:CBufInStream::`RTTI Base Class Array'o
.rdata$r:00002D1C                                         ; CBufInStream `RTTI Type Descriptor'
.rdata$r:00002D20                 db    4
.rdata$r:00002D21                 db    0
.rdata$r:00002D22                 db    0
.rdata$r:00002D23                 db    0
.rdata$r:00002D24                 db    0
.rdata$r:00002D25                 db    0
.rdata$r:00002D26                 db    0
.rdata$r:00002D27                 db    0
.rdata$r:00002D28                 db 0FFh
.rdata$r:00002D29                 db 0FFh
.rdata$r:00002D2A                 db 0FFh
.rdata$r:00002D2B                 db 0FFh
.rdata$r:00002D2C                 db    0
.rdata$r:00002D2D                 db    0
.rdata$r:00002D2E                 db    0
.rdata$r:00002D2F                 db    0
.rdata$r:00002D30                 db  40h ; @
.rdata$r:00002D31                 db    0
.rdata$r:00002D32                 db    0
.rdata$r:00002D33                 db    0
.rdata$r:00002D34                 dd offset ??_R3CBufInStream@@8 ; CBufInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002D34 _rdata$r        ends
.rdata$r:00002D34
.rdata$r:00002D38 ; ===========================================================================
.rdata$r:00002D38
.rdata$r:00002D38 ; Segment type: Pure data
.rdata$r:00002D38 ; Segment permissions: Read
.rdata$r:00002D38 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002D38                 assume cs:_rdata$r
.rdata$r:00002D38                 ;org 2D38h
.rdata$r:00002D38 ; COMDAT (pick any)
.rdata$r:00002D38                 public ??_R1A@?0A@EA@IInStream@@8
.rdata$r:00002D38 ; IInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00002D38 ??_R1A@?0A@EA@IInStream@@8 dd offset ??_R0?AUIInStream@@@8
.rdata$r:00002D38                                         ; DATA XREF: .rdata$r:00002D08o
.rdata$r:00002D38                                         ; .rdata$r:IInStream::`RTTI Base Class Array'o
.rdata$r:00002D38                                         ; IInStream `RTTI Type Descriptor'
.rdata$r:00002D3C                 db    2
.rdata$r:00002D3D                 db    0
.rdata$r:00002D3E                 db    0
.rdata$r:00002D3F                 db    0
.rdata$r:00002D40                 db    0
.rdata$r:00002D41                 db    0
.rdata$r:00002D42                 db    0
.rdata$r:00002D43                 db    0
.rdata$r:00002D44                 db 0FFh
.rdata$r:00002D45                 db 0FFh
.rdata$r:00002D46                 db 0FFh
.rdata$r:00002D47                 db 0FFh
.rdata$r:00002D48                 db    0
.rdata$r:00002D49                 db    0
.rdata$r:00002D4A                 db    0
.rdata$r:00002D4B                 db    0
.rdata$r:00002D4C                 db  40h ; @
.rdata$r:00002D4D                 db    0
.rdata$r:00002D4E                 db    0
.rdata$r:00002D4F                 db    0
.rdata$r:00002D50                 dd offset ??_R3IInStream@@8 ; IInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002D50 _rdata$r        ends
.rdata$r:00002D50
.data:00002D54 ; ===========================================================================
.data:00002D54
.data:00002D54 ; Segment type: Pure data
.data:00002D54 ; Segment permissions: Read/Write
.data:00002D54 _data           segment dword public 'DATA' use32
.data:00002D54                 assume cs:_data
.data:00002D54                 ;org 2D54h
.data:00002D54 ; COMDAT (pick any)
.data:00002D54                 public ??_R0?AUIInStream@@@8
.data:00002D54 ; struct IInStream `RTTI Type Descriptor'
.data:00002D54 ??_R0?AUIInStream@@@8 dd offset ??_7type_info@@6B@
.data:00002D54                                         ; DATA XREF: .rdata$r:IInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00002D54                                         ; .rdata$r:000030E4o
.data:00002D54                                         ; const type_info::`vftable'
.data:00002D58                 db    0
.data:00002D59                 db    0
.data:00002D5A                 db    0
.data:00002D5B                 db    0
.data:00002D5C                 db  2Eh ; .
.data:00002D5D                 db  3Fh ; ?
.data:00002D5E                 db  41h ; A
.data:00002D5F                 db  55h ; U
.data:00002D60                 db  49h ; I
.data:00002D61                 db  49h ; I
.data:00002D62                 db  6Eh ; n
.data:00002D63                 db  53h ; S
.data:00002D64                 db  74h ; t
.data:00002D65                 db  72h ; r
.data:00002D66                 db  65h ; e
.data:00002D67                 db  61h ; a
.data:00002D68                 db  6Dh ; m
.data:00002D69                 db  40h ; @
.data:00002D6A                 db  40h ; @
.data:00002D6B                 db    0
.data:00002D6B _data           ends
.data:00002D6B
.rdata$r:00002D6C ; ===========================================================================
.rdata$r:00002D6C
.rdata$r:00002D6C ; Segment type: Pure data
.rdata$r:00002D6C ; Segment permissions: Read
.rdata$r:00002D6C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002D6C                 assume cs:_rdata$r
.rdata$r:00002D6C                 ;org 2D6Ch
.rdata$r:00002D6C ; COMDAT (pick any)
.rdata$r:00002D6C                 public ??_R3IInStream@@8
.rdata$r:00002D6C ; IInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002D6C ??_R3IInStream@@8 db    0               ; DATA XREF: .rdata$r:00002D50o
.rdata$r:00002D6C                                         ; .rdata$r:000030E8o
.rdata$r:00002D6D                 db    0
.rdata$r:00002D6E                 db    0
.rdata$r:00002D6F                 db    0
.rdata$r:00002D70                 db    0
.rdata$r:00002D71                 db    0
.rdata$r:00002D72                 db    0
.rdata$r:00002D73                 db    0
.rdata$r:00002D74                 db    3
.rdata$r:00002D75                 db    0
.rdata$r:00002D76                 db    0
.rdata$r:00002D77                 db    0
.rdata$r:00002D78                 dd offset ??_R2IInStream@@8 ; IInStream::`RTTI Base Class Array'
.rdata$r:00002D78 _rdata$r        ends
.rdata$r:00002D78
.rdata$r:00002D7C ; ===========================================================================
.rdata$r:00002D7C
.rdata$r:00002D7C ; Segment type: Pure data
.rdata$r:00002D7C ; Segment permissions: Read
.rdata$r:00002D7C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002D7C                 assume cs:_rdata$r
.rdata$r:00002D7C                 ;org 2D7Ch
.rdata$r:00002D7C ; COMDAT (pick any)
.rdata$r:00002D7C                 public ??_R2IInStream@@8
.rdata$r:00002D7C ; IInStream::`RTTI Base Class Array'
.rdata$r:00002D7C ??_R2IInStream@@8 dd offset ??_R1A@?0A@EA@IInStream@@8
.rdata$r:00002D7C                                         ; DATA XREF: .rdata$r:00002D78o
.rdata$r:00002D7C                                         ; IInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002D80                 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002D84                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002D88                 db    0
.rdata$r:00002D89                 align 4
.rdata$r:00002D89 _rdata$r        ends
.rdata$r:00002D89
.rdata$r:00002D8C ; ===========================================================================
.rdata$r:00002D8C
.rdata$r:00002D8C ; Segment type: Pure data
.rdata$r:00002D8C ; Segment permissions: Read
.rdata$r:00002D8C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002D8C                 assume cs:_rdata$r
.rdata$r:00002D8C                 ;org 2D8Ch
.rdata$r:00002D8C ; COMDAT (pick any)
.rdata$r:00002D8C                 public ??_R1A@?0A@EA@ISequentialInStream@@8
.rdata$r:00002D8C ; ISequentialInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00002D8C ??_R1A@?0A@EA@ISequentialInStream@@8 dd offset ??_R0?AUISequentialInStream@@@8
.rdata$r:00002D8C                                         ; DATA XREF: .rdata$r:00002D0Co
.rdata$r:00002D8C                                         ; .rdata$r:00002D80o ...
.rdata$r:00002D8C                                         ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:00002D90                 db    1
.rdata$r:00002D91                 db    0
.rdata$r:00002D92                 db    0
.rdata$r:00002D93                 db    0
.rdata$r:00002D94                 db    0
.rdata$r:00002D95                 db    0
.rdata$r:00002D96                 db    0
.rdata$r:00002D97                 db    0
.rdata$r:00002D98                 db 0FFh
.rdata$r:00002D99                 db 0FFh
.rdata$r:00002D9A                 db 0FFh
.rdata$r:00002D9B                 db 0FFh
.rdata$r:00002D9C                 db    0
.rdata$r:00002D9D                 db    0
.rdata$r:00002D9E                 db    0
.rdata$r:00002D9F                 db    0
.rdata$r:00002DA0                 db  40h ; @
.rdata$r:00002DA1                 db    0
.rdata$r:00002DA2                 db    0
.rdata$r:00002DA3                 db    0
.rdata$r:00002DA4                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002DA4 _rdata$r        ends
.rdata$r:00002DA4
.data:00002DA8 ; ===========================================================================
.data:00002DA8
.data:00002DA8 ; Segment type: Pure data
.data:00002DA8 ; Segment permissions: Read/Write
.data:00002DA8 _data           segment dword public 'DATA' use32
.data:00002DA8                 assume cs:_data
.data:00002DA8                 ;org 2DA8h
.data:00002DA8 ; COMDAT (pick any)
.data:00002DA8                 public ??_R0?AUISequentialInStream@@@8
.data:00002DA8 ; struct ISequentialInStream `RTTI Type Descriptor'
.data:00002DA8 ??_R0?AUISequentialInStream@@@8 dd offset ??_7type_info@@6B@
.data:00002DA8                                         ; DATA XREF: .rdata$r:ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00002DA8                                         ; .rdata$r:0000313Co
.data:00002DA8                                         ; const type_info::`vftable'
.data:00002DAC                 align 10h
.data:00002DB0 a_?auisequentia db '.?AUISequentialInStream@@',0
.data:00002DCA                 align 4
.data:00002DCA _data           ends
.data:00002DCA
.rdata$r:00002DCC ; ===========================================================================
.rdata$r:00002DCC
.rdata$r:00002DCC ; Segment type: Pure data
.rdata$r:00002DCC ; Segment permissions: Read
.rdata$r:00002DCC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002DCC                 assume cs:_rdata$r
.rdata$r:00002DCC                 ;org 2DCCh
.rdata$r:00002DCC ; COMDAT (pick any)
.rdata$r:00002DCC                 public ??_R3ISequentialInStream@@8
.rdata$r:00002DCC ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002DCC ??_R3ISequentialInStream@@8 db    0     ; DATA XREF: .rdata$r:00002DA4o
.rdata$r:00002DCC                                         ; .rdata$r:00003140o
.rdata$r:00002DCD                 db    0
.rdata$r:00002DCE                 db    0
.rdata$r:00002DCF                 db    0
.rdata$r:00002DD0                 db    0
.rdata$r:00002DD1                 db    0
.rdata$r:00002DD2                 db    0
.rdata$r:00002DD3                 db    0
.rdata$r:00002DD4                 db    2
.rdata$r:00002DD5                 db    0
.rdata$r:00002DD6                 db    0
.rdata$r:00002DD7                 db    0
.rdata$r:00002DD8                 dd offset ??_R2ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Array'
.rdata$r:00002DD8 _rdata$r        ends
.rdata$r:00002DD8
.rdata$r:00002DDC ; ===========================================================================
.rdata$r:00002DDC
.rdata$r:00002DDC ; Segment type: Pure data
.rdata$r:00002DDC ; Segment permissions: Read
.rdata$r:00002DDC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002DDC                 assume cs:_rdata$r
.rdata$r:00002DDC                 ;org 2DDCh
.rdata$r:00002DDC ; COMDAT (pick any)
.rdata$r:00002DDC                 public ??_R2ISequentialInStream@@8
.rdata$r:00002DDC ; ISequentialInStream::`RTTI Base Class Array'
.rdata$r:00002DDC ??_R2ISequentialInStream@@8 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8
.rdata$r:00002DDC                                         ; DATA XREF: .rdata$r:00002DD8o
.rdata$r:00002DDC                                         ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002DE0                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002DE4                 db    0
.rdata$r:00002DE5                 align 4
.rdata$r:00002DE5 _rdata$r        ends
.rdata$r:00002DE5
.rdata$r:00002DE8 ; ===========================================================================
.rdata$r:00002DE8
.rdata$r:00002DE8 ; Segment type: Pure data
.rdata$r:00002DE8 ; Segment permissions: Read
.rdata$r:00002DE8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002DE8                 assume cs:_rdata$r
.rdata$r:00002DE8                 ;org 2DE8h
.rdata$r:00002DE8 ; COMDAT (pick any)
.rdata$r:00002DE8                 public ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00002DE8 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00002DE8 ??_R1A@?0A@EA@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00002DE8                                         ; DATA XREF: .rdata$r:00002D10o
.rdata$r:00002DE8                                         ; .rdata$r:00002D84o ...
.rdata$r:00002DE8                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00002DEC                 db    0
.rdata$r:00002DED                 db    0
.rdata$r:00002DEE                 db    0
.rdata$r:00002DEF                 db    0
.rdata$r:00002DF0                 db    0
.rdata$r:00002DF1                 db    0
.rdata$r:00002DF2                 db    0
.rdata$r:00002DF3                 db    0
.rdata$r:00002DF4                 db 0FFh
.rdata$r:00002DF5                 db 0FFh
.rdata$r:00002DF6                 db 0FFh
.rdata$r:00002DF7                 db 0FFh
.rdata$r:00002DF8                 db    0
.rdata$r:00002DF9                 db    0
.rdata$r:00002DFA                 db    0
.rdata$r:00002DFB                 db    0
.rdata$r:00002DFC                 db  40h ; @
.rdata$r:00002DFD                 db    0
.rdata$r:00002DFE                 db    0
.rdata$r:00002DFF                 db    0
.rdata$r:00002E00                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002E00 _rdata$r        ends
.rdata$r:00002E00
.data:00002E04 ; ===========================================================================
.data:00002E04
.data:00002E04 ; Segment type: Pure data
.data:00002E04 ; Segment permissions: Read/Write
.data:00002E04 _data           segment dword public 'DATA' use32
.data:00002E04                 assume cs:_data
.data:00002E04                 ;org 2E04h
.data:00002E04 ; COMDAT (pick any)
.data:00002E04                 public ??_R0?AUIUnknown@@@8
.data:00002E04 ; struct IUnknown `RTTI Type Descriptor'
.data:00002E04 ??_R0?AUIUnknown@@@8 dd offset ??_7type_info@@6B@
.data:00002E04                                         ; DATA XREF: .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00002E04                                         ; const type_info::`vftable'
.data:00002E08                 db    0
.data:00002E09                 db    0
.data:00002E0A                 db    0
.data:00002E0B                 db    0
.data:00002E0C                 db  2Eh ; .
.data:00002E0D                 db  3Fh ; ?
.data:00002E0E                 db  41h ; A
.data:00002E0F                 db  55h ; U
.data:00002E10                 db  49h ; I
.data:00002E11                 db  55h ; U
.data:00002E12                 db  6Eh ; n
.data:00002E13                 db  6Bh ; k
.data:00002E14                 db  6Eh ; n
.data:00002E15                 db  6Fh ; o
.data:00002E16                 db  77h ; w
.data:00002E17                 db  6Eh ; n
.data:00002E18                 db  40h ; @
.data:00002E19                 db  40h ; @
.data:00002E1A                 db    0
.data:00002E1B                 align 4
.data:00002E1B _data           ends
.data:00002E1B
.rdata$r:00002E1C ; ===========================================================================
.rdata$r:00002E1C
.rdata$r:00002E1C ; Segment type: Pure data
.rdata$r:00002E1C ; Segment permissions: Read
.rdata$r:00002E1C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002E1C                 assume cs:_rdata$r
.rdata$r:00002E1C                 ;org 2E1Ch
.rdata$r:00002E1C ; COMDAT (pick any)
.rdata$r:00002E1C                 public ??_R3IUnknown@@8
.rdata$r:00002E1C ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002E1C ??_R3IUnknown@@8 db    0                ; DATA XREF: .rdata$r:00002E00o
.rdata$r:00002E1D                 db    0
.rdata$r:00002E1E                 db    0
.rdata$r:00002E1F                 db    0
.rdata$r:00002E20                 db    0
.rdata$r:00002E21                 db    0
.rdata$r:00002E22                 db    0
.rdata$r:00002E23                 db    0
.rdata$r:00002E24                 db    1
.rdata$r:00002E25                 db    0
.rdata$r:00002E26                 db    0
.rdata$r:00002E27                 db    0
.rdata$r:00002E28                 dd offset ??_R2IUnknown@@8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00002E28 _rdata$r        ends
.rdata$r:00002E28
.rdata$r:00002E2C ; ===========================================================================
.rdata$r:00002E2C
.rdata$r:00002E2C ; Segment type: Pure data
.rdata$r:00002E2C ; Segment permissions: Read
.rdata$r:00002E2C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002E2C                 assume cs:_rdata$r
.rdata$r:00002E2C                 ;org 2E2Ch
.rdata$r:00002E2C ; COMDAT (pick any)
.rdata$r:00002E2C                 public ??_R2IUnknown@@8
.rdata$r:00002E2C ; IUnknown::`RTTI Base Class Array'
.rdata$r:00002E2C ??_R2IUnknown@@8 dd offset ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00002E2C                                         ; DATA XREF: .rdata$r:00002E28o
.rdata$r:00002E2C                                         ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002E30                 db    0
.rdata$r:00002E31                 align 4
.rdata$r:00002E31 _rdata$r        ends
.rdata$r:00002E31
.rdata$r:00002E34 ; ===========================================================================
.rdata$r:00002E34
.rdata$r:00002E34 ; Segment type: Pure data
.rdata$r:00002E34 ; Segment permissions: Read
.rdata$r:00002E34 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002E34                 assume cs:_rdata$r
.rdata$r:00002E34                 ;org 2E34h
.rdata$r:00002E34 ; COMDAT (pick any)
.rdata$r:00002E34                 public ??_R13?0A@EA@CMyUnknownImp@@8
.rdata$r:00002E34 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:00002E34 ??_R13?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00002E34                                         ; DATA XREF: .rdata$r:00002D14o
.rdata$r:00002E34                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00002E38                 db    0
.rdata$r:00002E39                 db    0
.rdata$r:00002E3A                 db    0
.rdata$r:00002E3B                 db    0
.rdata$r:00002E3C                 db    4
.rdata$r:00002E3D                 db    0
.rdata$r:00002E3E                 db    0
.rdata$r:00002E3F                 db    0
.rdata$r:00002E40                 db 0FFh
.rdata$r:00002E41                 db 0FFh
.rdata$r:00002E42                 db 0FFh
.rdata$r:00002E43                 db 0FFh
.rdata$r:00002E44                 db    0
.rdata$r:00002E45                 db    0
.rdata$r:00002E46                 db    0
.rdata$r:00002E47                 db    0
.rdata$r:00002E48                 db  40h ; @
.rdata$r:00002E49                 db    0
.rdata$r:00002E4A                 db    0
.rdata$r:00002E4B                 db    0
.rdata$r:00002E4C                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002E4C _rdata$r        ends
.rdata$r:00002E4C
.data:00002E50 ; ===========================================================================
.data:00002E50
.data:00002E50 ; Segment type: Pure data
.data:00002E50 ; Segment permissions: Read/Write
.data:00002E50 _data           segment dword public 'DATA' use32
.data:00002E50                 assume cs:_data
.data:00002E50                 ;org 2E50h
.data:00002E50 ; COMDAT (pick any)
.data:00002E50                 public ??_R0?AVCMyUnknownImp@@@8
.data:00002E50 ; class CMyUnknownImp `RTTI Type Descriptor'
.data:00002E50 ??_R0?AVCMyUnknownImp@@@8 dd offset ??_7type_info@@6B@
.data:00002E50                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:00002E50                                         ; .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00002E50                                         ; const type_info::`vftable'
.data:00002E54                 align 8
.data:00002E58 a_?avcmyunknown db '.?AVCMyUnknownImp@@',0
.data:00002E58 _data           ends
.data:00002E58
.rdata$r:00002E6C ; ===========================================================================
.rdata$r:00002E6C
.rdata$r:00002E6C ; Segment type: Pure data
.rdata$r:00002E6C ; Segment permissions: Read
.rdata$r:00002E6C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002E6C                 assume cs:_rdata$r
.rdata$r:00002E6C                 ;org 2E6Ch
.rdata$r:00002E6C ; COMDAT (pick any)
.rdata$r:00002E6C                 public ??_R3CMyUnknownImp@@8
.rdata$r:00002E6C ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002E6C ??_R3CMyUnknownImp@@8 db    0           ; DATA XREF: .rdata$r:00002E4Co
.rdata$r:00002E6C                                         ; .rdata$r:00002E9Co
.rdata$r:00002E6D                 db    0
.rdata$r:00002E6E                 db    0
.rdata$r:00002E6F                 db    0
.rdata$r:00002E70                 db    0
.rdata$r:00002E71                 db    0
.rdata$r:00002E72                 db    0
.rdata$r:00002E73                 db    0
.rdata$r:00002E74                 db    1
.rdata$r:00002E75                 db    0
.rdata$r:00002E76                 db    0
.rdata$r:00002E77                 db    0
.rdata$r:00002E78                 dd offset ??_R2CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00002E78 _rdata$r        ends
.rdata$r:00002E78
.rdata$r:00002E7C ; ===========================================================================
.rdata$r:00002E7C
.rdata$r:00002E7C ; Segment type: Pure data
.rdata$r:00002E7C ; Segment permissions: Read
.rdata$r:00002E7C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002E7C                 assume cs:_rdata$r
.rdata$r:00002E7C                 ;org 2E7Ch
.rdata$r:00002E7C ; COMDAT (pick any)
.rdata$r:00002E7C                 public ??_R2CMyUnknownImp@@8
.rdata$r:00002E7C ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00002E7C ??_R2CMyUnknownImp@@8 dd offset ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00002E7C                                         ; DATA XREF: .rdata$r:00002E78o
.rdata$r:00002E7C                                         ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002E80                 db    0
.rdata$r:00002E81                 align 4
.rdata$r:00002E81 _rdata$r        ends
.rdata$r:00002E81
.rdata$r:00002E84 ; ===========================================================================
.rdata$r:00002E84
.rdata$r:00002E84 ; Segment type: Pure data
.rdata$r:00002E84 ; Segment permissions: Read
.rdata$r:00002E84 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002E84                 assume cs:_rdata$r
.rdata$r:00002E84                 ;org 2E84h
.rdata$r:00002E84 ; COMDAT (pick any)
.rdata$r:00002E84                 public ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00002E84 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00002E84 ??_R1A@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00002E84                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Array'o
.rdata$r:00002E84                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00002E88                 align 10h
.rdata$r:00002E90                 db 0FFh
.rdata$r:00002E91                 db 0FFh
.rdata$r:00002E92                 db 0FFh
.rdata$r:00002E93                 db 0FFh
.rdata$r:00002E94                 db    0
.rdata$r:00002E95                 db    0
.rdata$r:00002E96                 db    0
.rdata$r:00002E97                 db    0
.rdata$r:00002E98                 db  40h ; @
.rdata$r:00002E99                 db    0
.rdata$r:00002E9A                 db    0
.rdata$r:00002E9B                 db    0
.rdata$r:00002E9C                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002E9C _rdata$r        ends
.rdata$r:00002E9C
.text:00002EA0 ; ===========================================================================
.text:00002EA0
.text:00002EA0 ; Segment type: Pure code
.text:00002EA0 ; Segment permissions: Read/Execute
.text:00002EA0 _text           segment para public 'CODE' use32
.text:00002EA0                 assume cs:_text
.text:00002EA0                 ;org 2EA0h
.text:00002EA0 ; COMDAT (pick any)
.text:00002EA0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002EA0
.text:00002EA0 ; =============== S U B R O U T I N E =======================================
.text:00002EA0
.text:00002EA0 ; Attributes: bp-based frame
.text:00002EA0
.text:00002EA0 ; _DWORD __thiscall CMyUnknownImp::CMyUnknownImp(CMyUnknownImp *__hidden this)
.text:00002EA0                 public ??0CMyUnknownImp@@QAE@XZ
.text:00002EA0 ??0CMyUnknownImp@@QAE@XZ proc near      ; CODE XREF: CBufInStream::CBufInStream(void)+1Cp
.text:00002EA0
.text:00002EA0 var_4           = dword ptr -4
.text:00002EA0
.text:00002EA0                 push    ebp
.text:00002EA1                 mov     ebp, esp
.text:00002EA3                 push    ecx
.text:00002EA4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002EAB                 mov     [ebp+var_4], ecx
.text:00002EAE                 mov     eax, [ebp+var_4]
.text:00002EB1                 mov     dword ptr [eax], 0
.text:00002EB7                 mov     eax, [ebp+var_4]
.text:00002EBA                 mov     esp, ebp
.text:00002EBC                 pop     ebp
.text:00002EBD                 retn
.text:00002EBD ??0CMyUnknownImp@@QAE@XZ endp
.text:00002EBD
.text:00002EBD ; ---------------------------------------------------------------------------
.text:00002EBE                 align 10h
.text:00002EBE _text           ends
.text:00002EBE
.text:00002EC0 ; ===========================================================================
.text:00002EC0
.text:00002EC0 ; Segment type: Pure code
.text:00002EC0 ; Segment permissions: Read/Execute
.text:00002EC0 _text           segment para public 'CODE' use32
.text:00002EC0                 assume cs:_text
.text:00002EC0                 ;org 2EC0h
.text:00002EC0 ; COMDAT (pick any)
.text:00002EC0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002EC0
.text:00002EC0 ; =============== S U B R O U T I N E =======================================
.text:00002EC0
.text:00002EC0 ; Attributes: bp-based frame
.text:00002EC0
.text:00002EC0 ; __int32 __stdcall CBufInStream::QueryInterface(CBufInStream *this, const struct _GUID *Buf1, void **)
.text:00002EC0                 public ?QueryInterface@CBufInStream@@UAGJABU_GUID@@PAPAX@Z
.text:00002EC0 ?QueryInterface@CBufInStream@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00002EC0                                         ; DATA XREF: .rdata:const CBufInStream::`vftable'o
.text:00002EC0
.text:00002EC0 this            = dword ptr  8
.text:00002EC0 Buf1            = dword ptr  0Ch
.text:00002EC0 arg_8           = dword ptr  10h
.text:00002EC0
.text:00002EC0                 push    ebp
.text:00002EC1                 mov     ebp, esp
.text:00002EC3                 mov     eax, [ebp+arg_8]
.text:00002EC6                 mov     dword ptr [eax], 0
.text:00002ECC                 push    offset _IID_IUnknown ; Buf2
.text:00002ED1                 mov     ecx, [ebp+Buf1]
.text:00002ED4                 push    ecx             ; Buf1
.text:00002ED5                 call    ___@8           ; __(x,x)
.text:00002EDA                 test    eax, eax
.text:00002EDC                 jz      short loc_2EE8
.text:00002EDE                 mov     edx, [ebp+arg_8]
.text:00002EE1                 mov     eax, [ebp+this]
.text:00002EE4                 mov     [edx], eax
.text:00002EE6                 jmp     short loc_2F27
.text:00002EE8 ; ---------------------------------------------------------------------------
.text:00002EE8
.text:00002EE8 loc_2EE8:                               ; CODE XREF: CBufInStream::QueryInterface(_GUID const &,void * *)+1Cj
.text:00002EE8                 push    offset _IID_ISequentialInStream ; Buf2
.text:00002EED                 mov     ecx, [ebp+Buf1]
.text:00002EF0                 push    ecx             ; Buf1
.text:00002EF1                 call    ___@8           ; __(x,x)
.text:00002EF6                 test    eax, eax
.text:00002EF8                 jz      short loc_2F04
.text:00002EFA                 mov     edx, [ebp+arg_8]
.text:00002EFD                 mov     eax, [ebp+this]
.text:00002F00                 mov     [edx], eax
.text:00002F02                 jmp     short loc_2F27
.text:00002F04 ; ---------------------------------------------------------------------------
.text:00002F04
.text:00002F04 loc_2F04:                               ; CODE XREF: CBufInStream::QueryInterface(_GUID const &,void * *)+38j
.text:00002F04                 push    offset _IID_IInStream ; Buf2
.text:00002F09                 mov     ecx, [ebp+Buf1]
.text:00002F0C                 push    ecx             ; Buf1
.text:00002F0D                 call    ___@8           ; __(x,x)
.text:00002F12                 test    eax, eax
.text:00002F14                 jz      short loc_2F20
.text:00002F16                 mov     edx, [ebp+arg_8]
.text:00002F19                 mov     eax, [ebp+this]
.text:00002F1C                 mov     [edx], eax
.text:00002F1E                 jmp     short loc_2F27
.text:00002F20 ; ---------------------------------------------------------------------------
.text:00002F20
.text:00002F20 loc_2F20:                               ; CODE XREF: CBufInStream::QueryInterface(_GUID const &,void * *)+54j
.text:00002F20                 mov     eax, 80004002h
.text:00002F25                 jmp     short loc_2F38
.text:00002F27 ; ---------------------------------------------------------------------------
.text:00002F27
.text:00002F27 loc_2F27:                               ; CODE XREF: CBufInStream::QueryInterface(_GUID const &,void * *)+26j
.text:00002F27                                         ; CBufInStream::QueryInterface(_GUID const &,void * *)+42j ...
.text:00002F27                 mov     ecx, [ebp+this]
.text:00002F2A                 mov     edx, [ecx+4]
.text:00002F2D                 add     edx, 1
.text:00002F30                 mov     eax, [ebp+this]
.text:00002F33                 mov     [eax+4], edx
.text:00002F36                 xor     eax, eax
.text:00002F38
.text:00002F38 loc_2F38:                               ; CODE XREF: CBufInStream::QueryInterface(_GUID const &,void * *)+65j
.text:00002F38                 cmp     ebp, esp
.text:00002F3A                 call    __RTC_CheckEsp
.text:00002F3F                 pop     ebp
.text:00002F40                 retn    0Ch
.text:00002F40 ?QueryInterface@CBufInStream@@UAGJABU_GUID@@PAPAX@Z endp
.text:00002F40
.text:00002F40 ; ---------------------------------------------------------------------------
.text:00002F43                 align 4
.text:00002F43 _text           ends
.text:00002F43
.text:00002F44 ; ===========================================================================
.text:00002F44
.text:00002F44 ; Segment type: Pure code
.text:00002F44 ; Segment permissions: Read/Execute
.text:00002F44 _text           segment para public 'CODE' use32
.text:00002F44                 assume cs:_text
.text:00002F44                 ;org 2F44h
.text:00002F44 ; COMDAT (pick any)
.text:00002F44                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002F44
.text:00002F44 ; =============== S U B R O U T I N E =======================================
.text:00002F44
.text:00002F44 ; Attributes: bp-based frame
.text:00002F44
.text:00002F44 ; int __stdcall __(void *Buf1, void *Buf2)
.text:00002F44                 public ___@8
.text:00002F44 ___@8           proc near               ; CODE XREF: CBufInStream::QueryInterface(_GUID const &,void * *)+15p
.text:00002F44                                         ; CBufInStream::QueryInterface(_GUID const &,void * *)+31p ...
.text:00002F44
.text:00002F44 Buf1            = dword ptr  8
.text:00002F44 Buf2            = dword ptr  0Ch
.text:00002F44
.text:00002F44                 push    ebp
.text:00002F45                 mov     ebp, esp
.text:00002F47                 mov     eax, [ebp+Buf2]
.text:00002F4A                 push    eax             ; Buf2
.text:00002F4B                 mov     ecx, [ebp+Buf1]
.text:00002F4E                 push    ecx             ; Buf1
.text:00002F4F                 call    _IsEqualGUID@8  ; IsEqualGUID(x,x)
.text:00002F54                 cmp     ebp, esp
.text:00002F56                 call    __RTC_CheckEsp
.text:00002F5B                 pop     ebp
.text:00002F5C                 retn    8
.text:00002F5C ___@8           endp
.text:00002F5C
.text:00002F5C ; ---------------------------------------------------------------------------
.text:00002F5F                 align 10h
.text:00002F5F _text           ends
.text:00002F5F
.text:00002F60 ; ===========================================================================
.text:00002F60
.text:00002F60 ; Segment type: Pure code
.text:00002F60 ; Segment permissions: Read/Execute
.text:00002F60 _text           segment para public 'CODE' use32
.text:00002F60                 assume cs:_text
.text:00002F60                 ;org 2F60h
.text:00002F60 ; COMDAT (pick any)
.text:00002F60                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002F60
.text:00002F60 ; =============== S U B R O U T I N E =======================================
.text:00002F60
.text:00002F60 ; Attributes: bp-based frame
.text:00002F60
.text:00002F60 ; int __stdcall IsEqualGUID(void *Buf1, void *Buf2)
.text:00002F60                 public _IsEqualGUID@8
.text:00002F60 _IsEqualGUID@8  proc near               ; CODE XREF: __(x,x)+Bp
.text:00002F60
.text:00002F60 Buf1            = dword ptr  8
.text:00002F60 Buf2            = dword ptr  0Ch
.text:00002F60
.text:00002F60                 push    ebp
.text:00002F61                 mov     ebp, esp
.text:00002F63                 push    10h             ; Size
.text:00002F65                 mov     eax, [ebp+Buf2]
.text:00002F68                 push    eax             ; Buf2
.text:00002F69                 mov     ecx, [ebp+Buf1]
.text:00002F6C                 push    ecx             ; Buf1
.text:00002F6D                 call    _memcmp
.text:00002F72                 add     esp, 0Ch
.text:00002F75                 neg     eax
.text:00002F77                 sbb     eax, eax
.text:00002F79                 add     eax, 1
.text:00002F7C                 cmp     ebp, esp
.text:00002F7E                 call    __RTC_CheckEsp
.text:00002F83                 pop     ebp
.text:00002F84                 retn    8
.text:00002F84 _IsEqualGUID@8  endp
.text:00002F84
.text:00002F84 ; ---------------------------------------------------------------------------
.text:00002F87                 align 4
.text:00002F87 _text           ends
.text:00002F87
.text:00002F88 ; ===========================================================================
.text:00002F88
.text:00002F88 ; Segment type: Pure code
.text:00002F88 ; Segment permissions: Read/Execute
.text:00002F88 _text           segment para public 'CODE' use32
.text:00002F88                 assume cs:_text
.text:00002F88                 ;org 2F88h
.text:00002F88 ; COMDAT (pick any)
.text:00002F88                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002F88
.text:00002F88 ; =============== S U B R O U T I N E =======================================
.text:00002F88
.text:00002F88 ; Attributes: bp-based frame
.text:00002F88
.text:00002F88 ; unsigned __int32 __stdcall CBufInStream::AddRef(CBufInStream *this)
.text:00002F88                 public ?AddRef@CBufInStream@@UAGKXZ
.text:00002F88 ?AddRef@CBufInStream@@UAGKXZ proc near  ; DATA XREF: .rdata:00002CB4o
.text:00002F88
.text:00002F88 var_4           = dword ptr -4
.text:00002F88 this            = dword ptr  8
.text:00002F88
.text:00002F88                 push    ebp
.text:00002F89                 mov     ebp, esp
.text:00002F8B                 push    ecx
.text:00002F8C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002F93                 mov     eax, [ebp+this]
.text:00002F96                 mov     ecx, [eax+4]
.text:00002F99                 add     ecx, 1
.text:00002F9C                 mov     [ebp+var_4], ecx
.text:00002F9F                 mov     edx, [ebp+this]
.text:00002FA2                 mov     eax, [ebp+var_4]
.text:00002FA5                 mov     [edx+4], eax
.text:00002FA8                 mov     eax, [ebp+var_4]
.text:00002FAB                 mov     esp, ebp
.text:00002FAD                 pop     ebp
.text:00002FAE                 retn    4
.text:00002FAE ?AddRef@CBufInStream@@UAGKXZ endp
.text:00002FAE
.text:00002FAE ; ---------------------------------------------------------------------------
.text:00002FB1                 align 4
.text:00002FB1 _text           ends
.text:00002FB1
.text:00002FB4 ; ===========================================================================
.text:00002FB4
.text:00002FB4 ; Segment type: Pure code
.text:00002FB4 ; Segment permissions: Read/Execute
.text:00002FB4 _text           segment para public 'CODE' use32
.text:00002FB4                 assume cs:_text
.text:00002FB4                 ;org 2FB4h
.text:00002FB4 ; COMDAT (pick any)
.text:00002FB4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002FB4
.text:00002FB4 ; =============== S U B R O U T I N E =======================================
.text:00002FB4
.text:00002FB4 ; Attributes: bp-based frame
.text:00002FB4
.text:00002FB4 ; unsigned __int32 __stdcall CBufInStream::Release(CBufInStream *this)
.text:00002FB4                 public ?Release@CBufInStream@@UAGKXZ
.text:00002FB4 ?Release@CBufInStream@@UAGKXZ proc near ; DATA XREF: .rdata:00002CB8o
.text:00002FB4
.text:00002FB4 var_10          = dword ptr -10h
.text:00002FB4 var_C           = dword ptr -0Ch
.text:00002FB4 var_8           = dword ptr -8
.text:00002FB4 var_4           = dword ptr -4
.text:00002FB4 this            = dword ptr  8
.text:00002FB4
.text:00002FB4                 push    ebp
.text:00002FB5                 mov     ebp, esp
.text:00002FB7                 sub     esp, 10h
.text:00002FBA                 mov     eax, 0CCCCCCCCh
.text:00002FBF                 mov     [ebp+var_10], eax
.text:00002FC2                 mov     [ebp+var_C], eax
.text:00002FC5                 mov     [ebp+var_8], eax
.text:00002FC8                 mov     [ebp+var_4], eax
.text:00002FCB                 mov     eax, [ebp+this]
.text:00002FCE                 mov     ecx, [eax+4]
.text:00002FD1                 sub     ecx, 1
.text:00002FD4                 mov     [ebp+var_C], ecx
.text:00002FD7                 mov     edx, [ebp+this]
.text:00002FDA                 mov     eax, [ebp+var_C]
.text:00002FDD                 mov     [edx+4], eax
.text:00002FE0                 cmp     [ebp+var_C], 0
.text:00002FE4                 jz      short loc_2FEE
.text:00002FE6                 mov     ecx, [ebp+this]
.text:00002FE9                 mov     eax, [ecx+4]
.text:00002FEC                 jmp     short loc_3018
.text:00002FEE ; ---------------------------------------------------------------------------
.text:00002FEE
.text:00002FEE loc_2FEE:                               ; CODE XREF: CBufInStream::Release(void)+30j
.text:00002FEE                 mov     edx, [ebp+this]
.text:00002FF1                 mov     [ebp+var_8], edx
.text:00002FF4                 mov     eax, [ebp+var_8]
.text:00002FF7                 mov     [ebp+var_4], eax
.text:00002FFA                 cmp     [ebp+var_4], 0
.text:00002FFE                 jz      short loc_300F
.text:00003000                 push    1
.text:00003002                 mov     ecx, [ebp+var_4]
.text:00003005                 call    ??_GCBufInStream@@QAEPAXI@Z ; CBufInStream::`scalar deleting destructor'(uint)
.text:0000300A                 mov     [ebp+var_10], eax
.text:0000300D                 jmp     short loc_3016
.text:0000300F ; ---------------------------------------------------------------------------
.text:0000300F
.text:0000300F loc_300F:                               ; CODE XREF: CBufInStream::Release(void)+4Aj
.text:0000300F                 mov     [ebp+var_10], 0
.text:00003016
.text:00003016 loc_3016:                               ; CODE XREF: CBufInStream::Release(void)+59j
.text:00003016                 xor     eax, eax
.text:00003018
.text:00003018 loc_3018:                               ; CODE XREF: CBufInStream::Release(void)+38j
.text:00003018                 add     esp, 10h
.text:0000301B                 cmp     ebp, esp
.text:0000301D                 call    __RTC_CheckEsp
.text:00003022                 mov     esp, ebp
.text:00003024                 pop     ebp
.text:00003025                 retn    4
.text:00003025 ?Release@CBufInStream@@UAGKXZ endp
.text:00003025
.text:00003025 _text           ends
.text:00003025
.text:00003028 ; ===========================================================================
.text:00003028
.text:00003028 ; Segment type: Pure code
.text:00003028 ; Segment permissions: Read/Execute
.text:00003028 _text           segment para public 'CODE' use32
.text:00003028                 assume cs:_text
.text:00003028                 ;org 3028h
.text:00003028 ; COMDAT (pick any)
.text:00003028                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003028
.text:00003028 ; =============== S U B R O U T I N E =======================================
.text:00003028
.text:00003028 ; Attributes: bp-based frame
.text:00003028
.text:00003028 ; public: void * __thiscall CBufInStream::`scalar deleting destructor'(unsigned int)
.text:00003028                 public ??_GCBufInStream@@QAEPAXI@Z
.text:00003028 ??_GCBufInStream@@QAEPAXI@Z proc near   ; CODE XREF: CBufInStream::Release(void)+51p
.text:00003028
.text:00003028 var_4           = dword ptr -4
.text:00003028 arg_0           = dword ptr  8
.text:00003028
.text:00003028                 push    ebp
.text:00003029                 mov     ebp, esp
.text:0000302B                 push    ecx
.text:0000302C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003033                 mov     [ebp+var_4], ecx
.text:00003036                 mov     ecx, [ebp+var_4] ; this
.text:00003039                 call    ??1CBufInStream@@QAE@XZ ; CBufInStream::~CBufInStream(void)
.text:0000303E                 mov     eax, [ebp+arg_0]
.text:00003041                 and     eax, 1
.text:00003044                 jz      short loc_3052
.text:00003046                 mov     ecx, [ebp+var_4]
.text:00003049                 push    ecx             ; void *
.text:0000304A                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000304F                 add     esp, 4
.text:00003052
.text:00003052 loc_3052:                               ; CODE XREF: CBufInStream::`scalar deleting destructor'(uint)+1Cj
.text:00003052                 mov     eax, [ebp+var_4]
.text:00003055                 add     esp, 4
.text:00003058                 cmp     ebp, esp
.text:0000305A                 call    __RTC_CheckEsp
.text:0000305F                 mov     esp, ebp
.text:00003061                 pop     ebp
.text:00003062                 retn    4
.text:00003062 ??_GCBufInStream@@QAEPAXI@Z endp
.text:00003062
.text:00003062 ; ---------------------------------------------------------------------------
.text:00003065                 align 4
.text:00003065 _text           ends
.text:00003065
.text:00003068 ; ===========================================================================
.text:00003068
.text:00003068 ; Segment type: Pure code
.text:00003068 ; Segment permissions: Read/Execute
.text:00003068 _text           segment para public 'CODE' use32
.text:00003068                 assume cs:_text
.text:00003068                 ;org 3068h
.text:00003068 ; COMDAT (pick any)
.text:00003068                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003068
.text:00003068 ; =============== S U B R O U T I N E =======================================
.text:00003068
.text:00003068 ; Attributes: bp-based frame
.text:00003068
.text:00003068 ; _DWORD __thiscall CBufInStream::~CBufInStream(CBufInStream *__hidden this)
.text:00003068                 public ??1CBufInStream@@QAE@XZ
.text:00003068 ??1CBufInStream@@QAE@XZ proc near       ; CODE XREF: CBufInStream::`scalar deleting destructor'(uint)+11p
.text:00003068
.text:00003068 var_4           = dword ptr -4
.text:00003068
.text:00003068                 push    ebp
.text:00003069                 mov     ebp, esp
.text:0000306B                 push    ecx
.text:0000306C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003073                 mov     [ebp+var_4], ecx
.text:00003076                 mov     ecx, [ebp+var_4]
.text:00003079                 add     ecx, 1Ch
.text:0000307C                 call    ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ ; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>(void)
.text:00003081                 add     esp, 4
.text:00003084                 cmp     ebp, esp
.text:00003086                 call    __RTC_CheckEsp
.text:0000308B                 mov     esp, ebp
.text:0000308D                 pop     ebp
.text:0000308E                 retn
.text:0000308E ??1CBufInStream@@QAE@XZ endp
.text:0000308E
.text:0000308E ; ---------------------------------------------------------------------------
.text:0000308F                 align 10h
.text:0000308F _text           ends
.text:0000308F
.text:00003090 ; ===========================================================================
.text:00003090
.text:00003090 ; Segment type: Pure code
.text:00003090 ; Segment permissions: Read/Execute
.text:00003090 _text           segment para public 'CODE' use32
.text:00003090                 assume cs:_text
.text:00003090                 ;org 3090h
.text:00003090 ; COMDAT (pick any)
.text:00003090                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003090
.text:00003090 ; =============== S U B R O U T I N E =======================================
.text:00003090
.text:00003090 ; Attributes: bp-based frame
.text:00003090
.text:00003090 ; _DWORD __thiscall IInStream::IInStream(IInStream *__hidden this)
.text:00003090                 public ??0IInStream@@QAE@XZ
.text:00003090 ??0IInStream@@QAE@XZ proc near          ; CODE XREF: CBufInStream::CBufInStream(void)+11p
.text:00003090
.text:00003090 var_4           = dword ptr -4
.text:00003090
.text:00003090                 push    ebp
.text:00003091                 mov     ebp, esp
.text:00003093                 push    ecx
.text:00003094                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000309B                 mov     [ebp+var_4], ecx
.text:0000309E                 mov     ecx, [ebp+var_4] ; this
.text:000030A1                 call    ??0ISequentialInStream@@QAE@XZ ; ISequentialInStream::ISequentialInStream(void)
.text:000030A6                 mov     eax, [ebp+var_4]
.text:000030A9                 mov     dword ptr [eax], offset ??_7IInStream@@6B@ ; const IInStream::`vftable'
.text:000030AF                 mov     eax, [ebp+var_4]
.text:000030B2                 add     esp, 4
.text:000030B5                 cmp     ebp, esp
.text:000030B7                 call    __RTC_CheckEsp
.text:000030BC                 mov     esp, ebp
.text:000030BE                 pop     ebp
.text:000030BF                 retn
.text:000030BF ??0IInStream@@QAE@XZ endp
.text:000030BF
.text:000030BF _text           ends
.text:000030BF
.rdata:000030C0 ; ===========================================================================
.rdata:000030C0
.rdata:000030C0 ; Segment type: Pure data
.rdata:000030C0 ; Segment permissions: Read
.rdata:000030C0 _rdata          segment dword public 'DATA' use32
.rdata:000030C0                 assume cs:_rdata
.rdata:000030C0                 ;org 30C0h
.rdata:000030C0 ; COMDAT (pick largest)
.rdata:000030C0                 dd offset ??_R4IInStream@@6B@ ; const IInStream::`RTTI Complete Object Locator'
.rdata:000030C4                 public ??_7IInStream@@6B@
.rdata:000030C4 ; const IInStream::`vftable'
.rdata:000030C4 ??_7IInStream@@6B@ dd offset __purecall ; DATA XREF: IInStream::IInStream(void)+19o
.rdata:000030C8                 dd offset __purecall
.rdata:000030CC                 dd offset __purecall
.rdata:000030D0                 dd offset __purecall
.rdata:000030D4                 dd offset __purecall
.rdata:000030D4 _rdata          ends
.rdata:000030D4
.rdata$r:000030D8 ; ===========================================================================
.rdata$r:000030D8
.rdata$r:000030D8 ; Segment type: Pure data
.rdata$r:000030D8 ; Segment permissions: Read
.rdata$r:000030D8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000030D8                 assume cs:_rdata$r
.rdata$r:000030D8                 ;org 30D8h
.rdata$r:000030D8 ; COMDAT (pick any)
.rdata$r:000030D8                 public ??_R4IInStream@@6B@
.rdata$r:000030D8 ; const IInStream::`RTTI Complete Object Locator'
.rdata$r:000030D8 ??_R4IInStream@@6B@ db    0             ; DATA XREF: .rdata:000030C0o
.rdata$r:000030D9                 db    0
.rdata$r:000030DA                 db    0
.rdata$r:000030DB                 db    0
.rdata$r:000030DC                 db    0
.rdata$r:000030DD                 db    0
.rdata$r:000030DE                 db    0
.rdata$r:000030DF                 db    0
.rdata$r:000030E0                 db    0
.rdata$r:000030E1                 db    0
.rdata$r:000030E2                 db    0
.rdata$r:000030E3                 db    0
.rdata$r:000030E4                 dd offset ??_R0?AUIInStream@@@8 ; IInStream `RTTI Type Descriptor'
.rdata$r:000030E8                 dd offset ??_R3IInStream@@8 ; IInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000030E8 _rdata$r        ends
.rdata$r:000030E8
.text:000030EC ; ===========================================================================
.text:000030EC
.text:000030EC ; Segment type: Pure code
.text:000030EC ; Segment permissions: Read/Execute
.text:000030EC _text           segment para public 'CODE' use32
.text:000030EC                 assume cs:_text
.text:000030EC                 ;org 30ECh
.text:000030EC ; COMDAT (pick any)
.text:000030EC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000030EC
.text:000030EC ; =============== S U B R O U T I N E =======================================
.text:000030EC
.text:000030EC ; Attributes: bp-based frame
.text:000030EC
.text:000030EC ; _DWORD __thiscall ISequentialInStream::ISequentialInStream(ISequentialInStream *__hidden this)
.text:000030EC                 public ??0ISequentialInStream@@QAE@XZ
.text:000030EC ??0ISequentialInStream@@QAE@XZ proc near
.text:000030EC                                         ; CODE XREF: IInStream::IInStream(void)+11p
.text:000030EC
.text:000030EC var_4           = dword ptr -4
.text:000030EC
.text:000030EC                 push    ebp
.text:000030ED                 mov     ebp, esp
.text:000030EF                 push    ecx
.text:000030F0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000030F7                 mov     [ebp+var_4], ecx
.text:000030FA                 mov     ecx, [ebp+var_4]
.text:000030FD                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00003102                 mov     eax, [ebp+var_4]
.text:00003105                 mov     dword ptr [eax], offset ??_7ISequentialInStream@@6B@ ; const ISequentialInStream::`vftable'
.text:0000310B                 mov     eax, [ebp+var_4]
.text:0000310E                 add     esp, 4
.text:00003111                 cmp     ebp, esp
.text:00003113                 call    __RTC_CheckEsp
.text:00003118                 mov     esp, ebp
.text:0000311A                 pop     ebp
.text:0000311B                 retn
.text:0000311B ??0ISequentialInStream@@QAE@XZ endp
.text:0000311B
.text:0000311B _text           ends
.text:0000311B
.rdata:0000311C ; ===========================================================================
.rdata:0000311C
.rdata:0000311C ; Segment type: Pure data
.rdata:0000311C ; Segment permissions: Read
.rdata:0000311C _rdata          segment dword public 'DATA' use32
.rdata:0000311C                 assume cs:_rdata
.rdata:0000311C                 ;org 311Ch
.rdata:0000311C ; COMDAT (pick largest)
.rdata:0000311C                 dd offset ??_R4ISequentialInStream@@6B@ ; const ISequentialInStream::`RTTI Complete Object Locator'
.rdata:00003120                 public ??_7ISequentialInStream@@6B@
.rdata:00003120 ; const ISequentialInStream::`vftable'
.rdata:00003120 ??_7ISequentialInStream@@6B@ dd offset __purecall
.rdata:00003120                                         ; DATA XREF: ISequentialInStream::ISequentialInStream(void)+19o
.rdata:00003124                 dd offset __purecall
.rdata:00003128                 dd offset __purecall
.rdata:0000312C                 dd offset __purecall
.rdata:0000312C _rdata          ends
.rdata:0000312C
.rdata$r:00003130 ; ===========================================================================
.rdata$r:00003130
.rdata$r:00003130 ; Segment type: Pure data
.rdata$r:00003130 ; Segment permissions: Read
.rdata$r:00003130 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003130                 assume cs:_rdata$r
.rdata$r:00003130                 ;org 3130h
.rdata$r:00003130 ; COMDAT (pick any)
.rdata$r:00003130                 public ??_R4ISequentialInStream@@6B@
.rdata$r:00003130 ; const ISequentialInStream::`RTTI Complete Object Locator'
.rdata$r:00003130 ??_R4ISequentialInStream@@6B@ db    0   ; DATA XREF: .rdata:0000311Co
.rdata$r:00003131                 db    0
.rdata$r:00003132                 db    0
.rdata$r:00003133                 db    0
.rdata$r:00003134                 db    0
.rdata$r:00003135                 db    0
.rdata$r:00003136                 db    0
.rdata$r:00003137                 db    0
.rdata$r:00003138                 db    0
.rdata$r:00003139                 db    0
.rdata$r:0000313A                 db    0
.rdata$r:0000313B                 db    0
.rdata$r:0000313C                 dd offset ??_R0?AUISequentialInStream@@@8 ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:00003140                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003140 _rdata$r        ends
.rdata$r:00003140
.text:00003144 ; ===========================================================================
.text:00003144
.text:00003144 ; Segment type: Pure code
.text:00003144 ; Segment permissions: Read/Execute
.text:00003144 _text           segment para public 'CODE' use32
.text:00003144                 assume cs:_text
.text:00003144                 ;org 3144h
.text:00003144 ; COMDAT (pick any)
.text:00003144                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003144
.text:00003144 ; =============== S U B R O U T I N E =======================================
.text:00003144
.text:00003144 ; Attributes: bp-based frame
.text:00003144
.text:00003144 ; public: __thiscall IUnknown::IUnknown(void)
.text:00003144                 public ??0IUnknown@@QAE@XZ
.text:00003144 ??0IUnknown@@QAE@XZ proc near           ; CODE XREF: ISequentialInStream::ISequentialInStream(void)+11p
.text:00003144
.text:00003144 var_4           = dword ptr -4
.text:00003144
.text:00003144                 push    ebp
.text:00003145                 mov     ebp, esp
.text:00003147                 push    ecx
.text:00003148                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000314F                 mov     [ebp+var_4], ecx
.text:00003152                 mov     eax, [ebp+var_4]
.text:00003155                 mov     esp, ebp
.text:00003157                 pop     ebp
.text:00003158                 retn
.text:00003158 ??0IUnknown@@QAE@XZ endp
.text:00003158
.text:00003158 ; ---------------------------------------------------------------------------
.text:00003159                 align 4
.text:00003159 _text           ends
.text:00003159
.text:0000315C ; ===========================================================================
.text:0000315C
.text:0000315C ; Segment type: Pure code
.text:0000315C ; Segment permissions: Read/Execute
.text:0000315C _text           segment para public 'CODE' use32
.text:0000315C                 assume cs:_text
.text:0000315C                 ;org 315Ch
.text:0000315C ; COMDAT (pick any)
.text:0000315C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000315C
.text:0000315C ; =============== S U B R O U T I N E =======================================
.text:0000315C
.text:0000315C ; Attributes: bp-based frame
.text:0000315C
.text:0000315C ; unsigned int __thiscall UString::Len(UString *__hidden this)
.text:0000315C                 public ?Len@UString@@QBEIXZ
.text:0000315C ?Len@UString@@QBEIXZ proc near          ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+4B5p
.text:0000315C                                         ; NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+596p
.text:0000315C
.text:0000315C var_4           = dword ptr -4
.text:0000315C
.text:0000315C                 push    ebp
.text:0000315D                 mov     ebp, esp
.text:0000315F                 push    ecx
.text:00003160                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003167                 mov     [ebp+var_4], ecx
.text:0000316A                 mov     eax, [ebp+var_4]
.text:0000316D                 mov     eax, [eax+4]
.text:00003170                 mov     esp, ebp
.text:00003172                 pop     ebp
.text:00003173                 retn
.text:00003173 ?Len@UString@@QBEIXZ endp
.text:00003173
.text:00003173 _text           ends
.text:00003173
.text:00003174 ; ===========================================================================
.text:00003174
.text:00003174 ; Segment type: Pure code
.text:00003174 ; Segment permissions: Read/Execute
.text:00003174 _text           segment para public 'CODE' use32
.text:00003174                 assume cs:_text
.text:00003174                 ;org 3174h
.text:00003174 ; COMDAT (pick any)
.text:00003174                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003174
.text:00003174 ; =============== S U B R O U T I N E =======================================
.text:00003174
.text:00003174 ; Attributes: bp-based frame
.text:00003174
.text:00003174 ; bool __thiscall UString::IsEmpty(UString *__hidden this)
.text:00003174                 public ?IsEmpty@UString@@QBE_NXZ
.text:00003174 ?IsEmpty@UString@@QBE_NXZ proc near     ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+494p
.text:00003174
.text:00003174 var_4           = dword ptr -4
.text:00003174
.text:00003174                 push    ebp
.text:00003175                 mov     ebp, esp
.text:00003177                 push    ecx
.text:00003178                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000317F                 mov     [ebp+var_4], ecx
.text:00003182                 mov     eax, [ebp+var_4]
.text:00003185                 xor     ecx, ecx
.text:00003187                 cmp     dword ptr [eax+4], 0
.text:0000318B                 setz    cl
.text:0000318E                 mov     al, cl
.text:00003190                 mov     esp, ebp
.text:00003192                 pop     ebp
.text:00003193                 retn
.text:00003193 ?IsEmpty@UString@@QBE_NXZ endp
.text:00003193
.text:00003193 _text           ends
.text:00003193
.text:00003194 ; ===========================================================================
.text:00003194
.text:00003194 ; Segment type: Pure code
.text:00003194 ; Segment permissions: Read/Execute
.text:00003194 _text           segment para public 'CODE' use32
.text:00003194                 assume cs:_text
.text:00003194                 ;org 3194h
.text:00003194 ; COMDAT (pick any)
.text:00003194                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003194
.text:00003194 ; =============== S U B R O U T I N E =======================================
.text:00003194
.text:00003194 ; Attributes: bp-based frame
.text:00003194
.text:00003194 ; public: __thiscall UString::operator wchar_t const *(void)const
.text:00003194                 public ??BUString@@QBEPB_WXZ
.text:00003194 ??BUString@@QBEPB_WXZ proc near         ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+5A9p
.text:00003194
.text:00003194 var_4           = dword ptr -4
.text:00003194
.text:00003194                 push    ebp
.text:00003195                 mov     ebp, esp
.text:00003197                 push    ecx
.text:00003198                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000319F                 mov     [ebp+var_4], ecx
.text:000031A2                 mov     eax, [ebp+var_4]
.text:000031A5                 mov     eax, [eax]
.text:000031A7                 mov     esp, ebp
.text:000031A9                 pop     ebp
.text:000031AA                 retn
.text:000031AA ??BUString@@QBEPB_WXZ endp
.text:000031AA
.text:000031AA ; ---------------------------------------------------------------------------
.text:000031AB                 align 4
.text:000031AB _text           ends
.text:000031AB
.text:000031AC ; ===========================================================================
.text:000031AC
.text:000031AC ; Segment type: Pure code
.text:000031AC ; Segment permissions: Read/Execute
.text:000031AC _text           segment para public 'CODE' use32
.text:000031AC                 assume cs:_text
.text:000031AC                 ;org 31ACh
.text:000031AC ; COMDAT (pick any)
.text:000031AC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000031AC
.text:000031AC ; =============== S U B R O U T I N E =======================================
.text:000031AC
.text:000031AC ; Attributes: bp-based frame
.text:000031AC
.text:000031AC ; bool __thiscall NArchive::N7z::CArchiveDatabaseOut::IsItemAnti(NArchive::N7z::CArchiveDatabaseOut *this, unsigned int)
.text:000031AC                 public ?IsItemAnti@CArchiveDatabaseOut@N7z@NArchive@@QBE_NI@Z
.text:000031AC ?IsItemAnti@CArchiveDatabaseOut@N7z@NArchive@@QBE_NI@Z proc near
.text:000031AC                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+38Ap
.text:000031AC
.text:000031AC var_8           = dword ptr -8
.text:000031AC var_4           = dword ptr -4
.text:000031AC arg_0           = dword ptr  8
.text:000031AC
.text:000031AC                 push    ebp
.text:000031AD                 mov     ebp, esp
.text:000031AF                 sub     esp, 8
.text:000031B2                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000031B9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000031C0                 mov     [ebp+var_4], ecx
.text:000031C3                 mov     ecx, [ebp+var_4]
.text:000031C6                 add     ecx, 0D8h ; '+'
.text:000031CC                 call    ?Size@?$CRecordVector@_N@@QBEIXZ ; CRecordVector<bool>::Size(void)
.text:000031D1                 cmp     [ebp+arg_0], eax
.text:000031D4                 jnb     short loc_31F8
.text:000031D6                 mov     eax, [ebp+arg_0]
.text:000031D9                 push    eax
.text:000031DA                 mov     ecx, [ebp+var_4]
.text:000031DD                 add     ecx, 0D8h ; '+'
.text:000031E3                 call    ??A?$CRecordVector@_N@@QBEAB_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:000031E8                 movzx   ecx, byte ptr [eax]
.text:000031EB                 test    ecx, ecx
.text:000031ED                 jz      short loc_31F8
.text:000031EF                 mov     [ebp+var_8], 1
.text:000031F6                 jmp     short loc_31FF
.text:000031F8 ; ---------------------------------------------------------------------------
.text:000031F8
.text:000031F8 loc_31F8:                               ; CODE XREF: NArchive::N7z::CArchiveDatabaseOut::IsItemAnti(uint)+28j
.text:000031F8                                         ; NArchive::N7z::CArchiveDatabaseOut::IsItemAnti(uint)+41j
.text:000031F8                 mov     [ebp+var_8], 0
.text:000031FF
.text:000031FF loc_31FF:                               ; CODE XREF: NArchive::N7z::CArchiveDatabaseOut::IsItemAnti(uint)+4Aj
.text:000031FF                 mov     al, byte ptr [ebp+var_8]
.text:00003202                 add     esp, 8
.text:00003205                 cmp     ebp, esp
.text:00003207                 call    __RTC_CheckEsp
.text:0000320C                 mov     esp, ebp
.text:0000320E                 pop     ebp
.text:0000320F                 retn    4
.text:0000320F ?IsItemAnti@CArchiveDatabaseOut@N7z@NArchive@@QBE_NI@Z endp
.text:0000320F
.text:0000320F ; ---------------------------------------------------------------------------
.text:00003212                 align 4
.text:00003212 _text           ends
.text:00003212
.text:00003214 ; ===========================================================================
.text:00003214
.text:00003214 ; Segment type: Pure code
.text:00003214 ; Segment permissions: Read/Execute
.text:00003214 _text           segment para public 'CODE' use32
.text:00003214                 assume cs:_text
.text:00003214                 ;org 3214h
.text:00003214 ; COMDAT (pick any)
.text:00003214                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003214
.text:00003214 ; =============== S U B R O U T I N E =======================================
.text:00003214
.text:00003214 ; Attributes: bp-based frame
.text:00003214
.text:00003214 ; bool __thiscall NArchive::N7z::CCompressionMethodMode::IsEmpty(NArchive::N7z::CCompressionMethodMode *__hidden this)
.text:00003214                 public ?IsEmpty@CCompressionMethodMode@N7z@NArchive@@QBE_NXZ
.text:00003214 ?IsEmpty@CCompressionMethodMode@N7z@NArchive@@QBE_NXZ proc near
.text:00003214                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+A6p
.text:00003214
.text:00003214 var_8           = dword ptr -8
.text:00003214 var_4           = dword ptr -4
.text:00003214
.text:00003214                 push    ebp
.text:00003215                 mov     ebp, esp
.text:00003217                 sub     esp, 8
.text:0000321A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00003221                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003228                 mov     [ebp+var_4], ecx
.text:0000322B                 mov     ecx, [ebp+var_4]
.text:0000322E                 call    ?IsEmpty@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBE_NXZ ; CObjectVector<NArchive::N7z::CMethodFull>::IsEmpty(void)
.text:00003233                 movzx   eax, al
.text:00003236                 test    eax, eax
.text:00003238                 jz      short loc_324E
.text:0000323A                 mov     ecx, [ebp+var_4]
.text:0000323D                 movzx   edx, byte ptr [ecx+21h]
.text:00003241                 test    edx, edx
.text:00003243                 jnz     short loc_324E
.text:00003245                 mov     [ebp+var_8], 1
.text:0000324C                 jmp     short loc_3255
.text:0000324E ; ---------------------------------------------------------------------------
.text:0000324E
.text:0000324E loc_324E:                               ; CODE XREF: NArchive::N7z::CCompressionMethodMode::IsEmpty(void)+24j
.text:0000324E                                         ; NArchive::N7z::CCompressionMethodMode::IsEmpty(void)+2Fj
.text:0000324E                 mov     [ebp+var_8], 0
.text:00003255
.text:00003255 loc_3255:                               ; CODE XREF: NArchive::N7z::CCompressionMethodMode::IsEmpty(void)+38j
.text:00003255                 mov     al, byte ptr [ebp+var_8]
.text:00003258                 add     esp, 8
.text:0000325B                 cmp     ebp, esp
.text:0000325D                 call    __RTC_CheckEsp
.text:00003262                 mov     esp, ebp
.text:00003264                 pop     ebp
.text:00003265                 retn
.text:00003265 ?IsEmpty@CCompressionMethodMode@N7z@NArchive@@QBE_NXZ endp
.text:00003265
.text:00003265 ; ---------------------------------------------------------------------------
.text:00003266                 align 4
.text:00003266 _text           ends
.text:00003266
.text:00003268 ; ===========================================================================
.text:00003268
.text:00003268 ; Segment type: Pure code
.text:00003268 ; Segment permissions: Read/Execute
.text:00003268 _text           segment para public 'CODE' use32
.text:00003268                 assume cs:_text
.text:00003268                 ;org 3268h
.text:00003268 ; COMDAT (pick any)
.text:00003268                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003268
.text:00003268 ; =============== S U B R O U T I N E =======================================
.text:00003268
.text:00003268 ; Attributes: bp-based frame
.text:00003268
.text:00003268 ; _DWORD __thiscall NArchive::N7z::CCompressionMethodMode::CCompressionMethodMode(NArchive::N7z::CCompressionMethodMode *__hidden this)
.text:00003268                 public ??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ
.text:00003268 ??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ proc near
.text:00003268                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+1C3p
.text:00003268
.text:00003268 var_10          = dword ptr -10h
.text:00003268 var_C           = dword ptr -0Ch
.text:00003268 var_4           = dword ptr -4
.text:00003268
.text:00003268                 push    ebp
.text:00003269                 mov     ebp, esp
.text:0000326B                 push    0FFFFFFFFh
.text:0000326D                 push    offset __ehhandler$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ
.text:00003272                 mov     eax, large fs:0
.text:00003278                 push    eax
.text:00003279                 push    ecx
.text:0000327A                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00003281                 mov     eax, dword ptr ds:___security_cookie
.text:00003286                 xor     eax, ebp
.text:00003288                 push    eax
.text:00003289                 lea     eax, [ebp+var_C]
.text:0000328C                 mov     large fs:0, eax
.text:00003292                 mov     [ebp+var_10], ecx
.text:00003295                 mov     ecx, [ebp+var_10]
.text:00003298                 call    ??0?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CMethodFull>::CObjectVector<NArchive::N7z::CMethodFull>(void)
.text:0000329D                 mov     [ebp+var_4], 0
.text:000032A4                 mov     ecx, [ebp+var_10]
.text:000032A7                 add     ecx, 0Ch
.text:000032AA                 call    ??0?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CBond2>::CRecordVector<NArchive::N7z::CBond2>(void)
.text:000032AF                 mov     byte ptr [ebp+var_4], 1
.text:000032B3                 mov     eax, [ebp+var_10]
.text:000032B6                 mov     byte ptr [eax+18h], 0
.text:000032BA                 mov     ecx, [ebp+var_10]
.text:000032BD                 mov     byte ptr [ecx+19h], 0
.text:000032C1                 mov     edx, [ebp+var_10]
.text:000032C4                 mov     dword ptr [edx+1Ch], 1
.text:000032CB                 mov     eax, [ebp+var_10]
.text:000032CE                 mov     byte ptr [eax+20h], 1
.text:000032D2                 mov     ecx, [ebp+var_10]
.text:000032D5                 mov     byte ptr [ecx+21h], 0
.text:000032D9                 mov     ecx, [ebp+var_10]
.text:000032DC                 add     ecx, 24h ; '$'
.text:000032DF                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:000032E4                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000032EB                 mov     eax, [ebp+var_10]
.text:000032EE                 mov     ecx, [ebp+var_C]
.text:000032F1                 mov     large fs:0, ecx
.text:000032F8                 pop     ecx
.text:000032F9                 add     esp, 10h
.text:000032FC                 cmp     ebp, esp
.text:000032FE                 call    __RTC_CheckEsp
.text:00003303                 mov     esp, ebp
.text:00003305                 pop     ebp
.text:00003306                 retn
.text:00003306 ??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ endp
.text:00003306
.text:00003306 ; ---------------------------------------------------------------------------
.text:00003307                 align 4
.text:00003307 _text           ends
.text:00003307
.text$x:00003308 ; ===========================================================================
.text$x:00003308
.text$x:00003308 ; Segment type: Pure code
.text$x:00003308 ; Segment permissions: Read/Execute
.text$x:00003308 _text$x         segment para public 'CODE' use32
.text$x:00003308                 assume cs:_text$x
.text$x:00003308                 ;org 3308h
.text$x:00003308 ; COMDAT (pick associative to section at 3268)
.text$x:00003308                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00003308
.text$x:00003308 ; =============== S U B R O U T I N E =======================================
.text$x:00003308
.text$x:00003308
.text$x:00003308 __unwindfunclet$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:00003308                                         ; DATA XREF: .xdata$x:0000333Co
.text$x:00003308                 mov     ecx, [ebp-10h]
.text$x:0000330B                 jmp     ??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>(void)
.text$x:0000330B __unwindfunclet$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ$0 endp
.text$x:0000330B
.text$x:00003310
.text$x:00003310 ; =============== S U B R O U T I N E =======================================
.text$x:00003310
.text$x:00003310
.text$x:00003310 __unwindfunclet$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ$1 proc near
.text$x:00003310                                         ; DATA XREF: .xdata$x:00003344o
.text$x:00003310                 mov     ecx, [ebp-10h]
.text$x:00003313                 add     ecx, 0Ch
.text$x:00003316                 jmp     ??1?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CBond2>::~CRecordVector<NArchive::N7z::CBond2>(void)
.text$x:00003316 __unwindfunclet$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ$1 endp
.text$x:00003316
.text$x:0000331B
.text$x:0000331B ; =============== S U B R O U T I N E =======================================
.text$x:0000331B
.text$x:0000331B
.text$x:0000331B __ehhandler$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ proc near
.text$x:0000331B                                         ; DATA XREF: NArchive::N7z::CCompressionMethodMode::CCompressionMethodMode(void)+5o
.text$x:0000331B
.text$x:0000331B arg_4           = dword ptr  8
.text$x:0000331B
.text$x:0000331B                 mov     edx, [esp+arg_4]
.text$x:0000331F                 lea     eax, [edx+0Ch]
.text$x:00003322                 mov     ecx, [edx-8]
.text$x:00003325                 xor     ecx, eax
.text$x:00003327                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000332C                 mov     eax, offset __ehfuncinfo$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ
.text$x:00003331                 jmp     ___CxxFrameHandler3
.text$x:00003331 __ehhandler$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ endp
.text$x:00003331
.text$x:00003331 ; ---------------------------------------------------------------------------
.text$x:00003336                 align 4
.text$x:00003336 _text$x         ends
.text$x:00003336
.xdata$x:00003338 ; ===========================================================================
.xdata$x:00003338
.xdata$x:00003338 ; Segment type: Pure data
.xdata$x:00003338 ; Segment permissions: Read
.xdata$x:00003338 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00003338                 assume cs:_xdata$x
.xdata$x:00003338                 ;org 3338h
.xdata$x:00003338 ; COMDAT (pick associative to section at 3268)
.xdata$x:00003338 __unwindtable$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:00003338                                         ; DATA XREF: .xdata$x:00003350o
.xdata$x:00003339                 db 0FFh
.xdata$x:0000333A                 db 0FFh
.xdata$x:0000333B                 db 0FFh
.xdata$x:0000333C                 dd offset __unwindfunclet$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ$0
.xdata$x:00003340                 db    0
.xdata$x:00003341                 db    0
.xdata$x:00003342                 db    0
.xdata$x:00003343                 db    0
.xdata$x:00003344                 dd offset __unwindfunclet$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ$1
.xdata$x:00003348 __ehfuncinfo$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00003348                                         ; DATA XREF: __ehhandler$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ+11o
.xdata$x:00003349                 db    5
.xdata$x:0000334A                 db  93h ; ô
.xdata$x:0000334B                 db  19h
.xdata$x:0000334C                 db    2
.xdata$x:0000334D                 db    0
.xdata$x:0000334E                 db    0
.xdata$x:0000334F                 db    0
.xdata$x:00003350                 dd offset __unwindtable$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ
.xdata$x:00003354                 db    0
.xdata$x:00003355                 db    0
.xdata$x:00003356                 db    0
.xdata$x:00003357                 db    0
.xdata$x:00003358                 db    0
.xdata$x:00003359                 db    0
.xdata$x:0000335A                 db    0
.xdata$x:0000335B                 db    0
.xdata$x:0000335C                 db    0
.xdata$x:0000335D                 db    0
.xdata$x:0000335E                 db    0
.xdata$x:0000335F                 db    0
.xdata$x:00003360                 db    0
.xdata$x:00003361                 db    0
.xdata$x:00003362                 db    0
.xdata$x:00003363                 db    0
.xdata$x:00003364                 db    0
.xdata$x:00003365                 db    0
.xdata$x:00003366                 db    0
.xdata$x:00003367                 db    0
.xdata$x:00003368                 db    1
.xdata$x:00003369                 db    0
.xdata$x:0000336A                 db    0
.xdata$x:0000336B                 db    0
.xdata$x:0000336B _xdata$x        ends
.xdata$x:0000336B
.text:0000336C ; ===========================================================================
.text:0000336C
.text:0000336C ; Segment type: Pure code
.text:0000336C ; Segment permissions: Read/Execute
.text:0000336C _text           segment para public 'CODE' use32
.text:0000336C                 assume cs:_text
.text:0000336C                 ;org 336Ch
.text:0000336C ; COMDAT (pick any)
.text:0000336C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000336C
.text:0000336C ; =============== S U B R O U T I N E =======================================
.text:0000336C
.text:0000336C ; Attributes: bp-based frame
.text:0000336C
.text:0000336C ; void __thiscall COutBuffer::SetStream(COutBuffer *this, struct ISequentialOutStream *)
.text:0000336C                 public ?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z
.text:0000336C ?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z proc near
.text:0000336C                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+EAp
.text:0000336C
.text:0000336C var_4           = dword ptr -4
.text:0000336C arg_0           = dword ptr  8
.text:0000336C
.text:0000336C                 push    ebp
.text:0000336D                 mov     ebp, esp
.text:0000336F                 push    ecx
.text:00003370                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003377                 mov     [ebp+var_4], ecx
.text:0000337A                 mov     eax, [ebp+var_4]
.text:0000337D                 mov     ecx, [ebp+arg_0]
.text:00003380                 mov     [eax+14h], ecx
.text:00003383                 mov     esp, ebp
.text:00003385                 pop     ebp
.text:00003386                 retn    4
.text:00003386 ?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z endp
.text:00003386
.text:00003386 ; ---------------------------------------------------------------------------
.text:00003389                 align 4
.text:00003389 _text           ends
.text:00003389
.text:0000338C ; ===========================================================================
.text:0000338C
.text:0000338C ; Segment type: Pure code
.text:0000338C ; Segment permissions: Read/Execute
.text:0000338C _text           segment para public 'CODE' use32
.text:0000338C                 assume cs:_text
.text:0000338C                 ;org 338Ch
.text:0000338C ; COMDAT (pick any)
.text:0000338C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000338C
.text:0000338C ; =============== S U B R O U T I N E =======================================
.text:0000338C
.text:0000338C ; Attributes: bp-based frame
.text:0000338C
.text:0000338C ; void __thiscall NArchive::N7z::CWriteBufferLoc::Init(NArchive::N7z::CWriteBufferLoc *this, unsigned __int8 *, unsigned int)
.text:0000338C                 public ?Init@CWriteBufferLoc@N7z@NArchive@@QAEXPAEI@Z
.text:0000338C ?Init@CWriteBufferLoc@N7z@NArchive@@QAEXPAEI@Z proc near
.text:0000338C                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+166p
.text:0000338C
.text:0000338C var_4           = dword ptr -4
.text:0000338C arg_0           = dword ptr  8
.text:0000338C arg_4           = dword ptr  0Ch
.text:0000338C
.text:0000338C                 push    ebp
.text:0000338D                 mov     ebp, esp
.text:0000338F                 push    ecx
.text:00003390                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003397                 mov     [ebp+var_4], ecx
.text:0000339A                 mov     eax, [ebp+var_4]
.text:0000339D                 mov     ecx, [ebp+arg_0]
.text:000033A0                 mov     [eax], ecx
.text:000033A2                 mov     edx, [ebp+var_4]
.text:000033A5                 mov     eax, [ebp+arg_4]
.text:000033A8                 mov     [edx+4], eax
.text:000033AB                 mov     ecx, [ebp+var_4]
.text:000033AE                 mov     dword ptr [ecx+8], 0
.text:000033B5                 mov     esp, ebp
.text:000033B7                 pop     ebp
.text:000033B8                 retn    8
.text:000033B8 ?Init@CWriteBufferLoc@N7z@NArchive@@QAEXPAEI@Z endp
.text:000033B8
.text:000033B8 ; ---------------------------------------------------------------------------
.text:000033BB                 align 4
.text:000033BB _text           ends
.text:000033BB
.text:000033BC ; ===========================================================================
.text:000033BC
.text:000033BC ; Segment type: Pure code
.text:000033BC ; Segment permissions: Read/Execute
.text:000033BC _text           segment para public 'CODE' use32
.text:000033BC                 assume cs:_text
.text:000033BC                 ;org 33BCh
.text:000033BC ; COMDAT (pick any)
.text:000033BC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000033BC
.text:000033BC ; =============== S U B R O U T I N E =======================================
.text:000033BC
.text:000033BC ; Attributes: bp-based frame
.text:000033BC
.text:000033BC ; bool __thiscall NArchive::N7z::CArchiveDatabaseOut::IsEmpty(NArchive::N7z::CArchiveDatabaseOut *__hidden this)
.text:000033BC                 public ?IsEmpty@CArchiveDatabaseOut@N7z@NArchive@@QBE_NXZ
.text:000033BC ?IsEmpty@CArchiveDatabaseOut@N7z@NArchive@@QBE_NXZ proc near
.text:000033BC                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+60p
.text:000033BC
.text:000033BC var_8           = dword ptr -8
.text:000033BC var_4           = dword ptr -4
.text:000033BC
.text:000033BC                 push    ebp
.text:000033BD                 mov     ebp, esp
.text:000033BF                 sub     esp, 8
.text:000033C2                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000033C9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000033D0                 mov     [ebp+var_4], ecx
.text:000033D3                 mov     ecx, [ebp+var_4]
.text:000033D6                 add     ecx, 30h ; '0'
.text:000033D9                 call    ?IsEmpty@?$CRecordVector@_K@@QBE_NXZ ; CRecordVector<unsigned __int64>::IsEmpty(void)
.text:000033DE                 movzx   eax, al
.text:000033E1                 test    eax, eax
.text:000033E3                 jz      short loc_3424
.text:000033E5                 mov     ecx, [ebp+var_4]
.text:000033E8                 add     ecx, 18h
.text:000033EB                 call    ?IsEmpty@?$CRecordVector@I@@QBE_NXZ ; CRecordVector<uint>::IsEmpty(void)
.text:000033F0                 movzx   ecx, al
.text:000033F3                 test    ecx, ecx
.text:000033F5                 jz      short loc_3424
.text:000033F7                 mov     ecx, [ebp+var_4]
.text:000033FA                 add     ecx, 54h ; 'T'
.text:000033FD                 call    ?IsEmpty@?$CObjectVector@UCFolder@N7z@NArchive@@@@QBE_NXZ ; CObjectVector<NArchive::N7z::CFolder>::IsEmpty(void)
.text:00003402                 movzx   edx, al
.text:00003405                 test    edx, edx
.text:00003407                 jz      short loc_3424
.text:00003409                 mov     ecx, [ebp+var_4]
.text:0000340C                 add     ecx, 60h ; '`'
.text:0000340F                 call    ?IsEmpty@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBE_NXZ ; CRecordVector<NArchive::N7z::CFileItem>::IsEmpty(void)
.text:00003414                 movzx   eax, al
.text:00003417                 test    eax, eax
.text:00003419                 jz      short loc_3424
.text:0000341B                 mov     [ebp+var_8], 1
.text:00003422                 jmp     short loc_342B
.text:00003424 ; ---------------------------------------------------------------------------
.text:00003424
.text:00003424 loc_3424:                               ; CODE XREF: NArchive::N7z::CArchiveDatabaseOut::IsEmpty(void)+27j
.text:00003424                                         ; NArchive::N7z::CArchiveDatabaseOut::IsEmpty(void)+39j ...
.text:00003424                 mov     [ebp+var_8], 0
.text:0000342B
.text:0000342B loc_342B:                               ; CODE XREF: NArchive::N7z::CArchiveDatabaseOut::IsEmpty(void)+66j
.text:0000342B                 mov     al, byte ptr [ebp+var_8]
.text:0000342E                 add     esp, 8
.text:00003431                 cmp     ebp, esp
.text:00003433                 call    __RTC_CheckEsp
.text:00003438                 mov     esp, ebp
.text:0000343A                 pop     ebp
.text:0000343B                 retn
.text:0000343B ?IsEmpty@CArchiveDatabaseOut@N7z@NArchive@@QBE_NXZ endp
.text:0000343B
.text:0000343B _text           ends
.text:0000343B
.text:0000343C ; ===========================================================================
.text:0000343C
.text:0000343C ; Segment type: Pure code
.text:0000343C ; Segment permissions: Read/Execute
.text:0000343C _text           segment para public 'CODE' use32
.text:0000343C                 assume cs:_text
.text:0000343C                 ;org 343Ch
.text:0000343C ; COMDAT (pick any)
.text:0000343C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000343C
.text:0000343C ; =============== S U B R O U T I N E =======================================
.text:0000343C
.text:0000343C ; Attributes: bp-based frame
.text:0000343C
.text:0000343C ; bool __thiscall NArchive::N7z::CArchiveDatabaseOut::CheckNumFiles(NArchive::N7z::CArchiveDatabaseOut *__hidden this)
.text:0000343C                 public ?CheckNumFiles@CArchiveDatabaseOut@N7z@NArchive@@QBE_NXZ
.text:0000343C ?CheckNumFiles@CArchiveDatabaseOut@N7z@NArchive@@QBE_NXZ proc near
.text:0000343C                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+47p
.text:0000343C
.text:0000343C var_C           = dword ptr -0Ch
.text:0000343C var_8           = dword ptr -8
.text:0000343C var_4           = dword ptr -4
.text:0000343C
.text:0000343C                 push    ebp
.text:0000343D                 mov     ebp, esp
.text:0000343F                 sub     esp, 0Ch
.text:00003442                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00003449                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00003450                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003457                 mov     [ebp+var_4], ecx
.text:0000345A                 mov     ecx, [ebp+var_4]
.text:0000345D                 add     ecx, 60h ; '`'
.text:00003460                 call    ?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CFileItem>::Size(void)
.text:00003465                 mov     [ebp+var_8], eax
.text:00003468                 mov     eax, [ebp+var_8]
.text:0000346B                 push    eax             ; unsigned int
.text:0000346C                 mov     ecx, [ebp+var_4]
.text:0000346F                 add     ecx, 78h ; 'x'  ; this
.text:00003472                 call    ?CheckSize@CUInt64DefVector@N7z@NArchive@@QBE_NI@Z ; NArchive::N7z::CUInt64DefVector::CheckSize(uint)
.text:00003477                 movzx   ecx, al
.text:0000347A                 test    ecx, ecx
.text:0000347C                 jz      short loc_34F7
.text:0000347E                 mov     edx, [ebp+var_8]
.text:00003481                 push    edx             ; unsigned int
.text:00003482                 mov     ecx, [ebp+var_4]
.text:00003485                 add     ecx, 90h ; 'É'  ; this
.text:0000348B                 call    ?CheckSize@CUInt64DefVector@N7z@NArchive@@QBE_NI@Z ; NArchive::N7z::CUInt64DefVector::CheckSize(uint)
.text:00003490                 movzx   eax, al
.text:00003493                 test    eax, eax
.text:00003495                 jz      short loc_34F7
.text:00003497                 mov     ecx, [ebp+var_8]
.text:0000349A                 push    ecx             ; unsigned int
.text:0000349B                 mov     ecx, [ebp+var_4]
.text:0000349E                 add     ecx, 0A8h ; '¿' ; this
.text:000034A4                 call    ?CheckSize@CUInt64DefVector@N7z@NArchive@@QBE_NI@Z ; NArchive::N7z::CUInt64DefVector::CheckSize(uint)
.text:000034A9                 movzx   edx, al
.text:000034AC                 test    edx, edx
.text:000034AE                 jz      short loc_34F7
.text:000034B0                 mov     eax, [ebp+var_8]
.text:000034B3                 push    eax             ; unsigned int
.text:000034B4                 mov     ecx, [ebp+var_4]
.text:000034B7                 add     ecx, 0C0h ; '+' ; this
.text:000034BD                 call    ?CheckSize@CUInt64DefVector@N7z@NArchive@@QBE_NI@Z ; NArchive::N7z::CUInt64DefVector::CheckSize(uint)
.text:000034C2                 movzx   ecx, al
.text:000034C5                 test    ecx, ecx
.text:000034C7                 jz      short loc_34F7
.text:000034C9                 mov     ecx, [ebp+var_4]
.text:000034CC                 add     ecx, 0D8h ; '+'
.text:000034D2                 call    ?Size@?$CRecordVector@_N@@QBEIXZ ; CRecordVector<bool>::Size(void)
.text:000034D7                 cmp     [ebp+var_8], eax
.text:000034DA                 jz      short loc_34EE
.text:000034DC                 mov     ecx, [ebp+var_4]
.text:000034DF                 add     ecx, 0D8h ; '+'
.text:000034E5                 call    ?Size@?$CRecordVector@_N@@QBEIXZ ; CRecordVector<bool>::Size(void)
.text:000034EA                 test    eax, eax
.text:000034EC                 jnz     short loc_34F7
.text:000034EE
.text:000034EE loc_34EE:                               ; CODE XREF: NArchive::N7z::CArchiveDatabaseOut::CheckNumFiles(void)+9Ej
.text:000034EE                 mov     [ebp+var_C], 1
.text:000034F5                 jmp     short loc_34FE
.text:000034F7 ; ---------------------------------------------------------------------------
.text:000034F7
.text:000034F7 loc_34F7:                               ; CODE XREF: NArchive::N7z::CArchiveDatabaseOut::CheckNumFiles(void)+40j
.text:000034F7                                         ; NArchive::N7z::CArchiveDatabaseOut::CheckNumFiles(void)+59j ...
.text:000034F7                 mov     [ebp+var_C], 0
.text:000034FE
.text:000034FE loc_34FE:                               ; CODE XREF: NArchive::N7z::CArchiveDatabaseOut::CheckNumFiles(void)+B9j
.text:000034FE                 mov     al, byte ptr [ebp+var_C]
.text:00003501                 add     esp, 0Ch
.text:00003504                 cmp     ebp, esp
.text:00003506                 call    __RTC_CheckEsp
.text:0000350B                 mov     esp, ebp
.text:0000350D                 pop     ebp
.text:0000350E                 retn
.text:0000350E ?CheckNumFiles@CArchiveDatabaseOut@N7z@NArchive@@QBE_NXZ endp
.text:0000350E
.text:0000350E ; ---------------------------------------------------------------------------
.text:0000350F                 align 10h
.text:0000350F _text           ends
.text:0000350F
.text:00003510 ; ===========================================================================
.text:00003510
.text:00003510 ; Segment type: Pure code
.text:00003510 ; Segment permissions: Read/Execute
.text:00003510 _text           segment para public 'CODE' use32
.text:00003510                 assume cs:_text
.text:00003510                 ;org 3510h
.text:00003510 ; COMDAT (pick any)
.text:00003510                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003510
.text:00003510 ; =============== S U B R O U T I N E =======================================
.text:00003510
.text:00003510 ; Attributes: bp-based frame
.text:00003510
.text:00003510 ; bool __thiscall NArchive::N7z::CUInt64DefVector::CheckSize(NArchive::N7z::CUInt64DefVector *this, unsigned int)
.text:00003510                 public ?CheckSize@CUInt64DefVector@N7z@NArchive@@QBE_NI@Z
.text:00003510 ?CheckSize@CUInt64DefVector@N7z@NArchive@@QBE_NI@Z proc near
.text:00003510                                         ; CODE XREF: NArchive::N7z::CArchiveDatabaseOut::CheckNumFiles(void)+36p
.text:00003510                                         ; NArchive::N7z::CArchiveDatabaseOut::CheckNumFiles(void)+4Fp ...
.text:00003510
.text:00003510 var_8           = dword ptr -8
.text:00003510 var_4           = dword ptr -4
.text:00003510 arg_0           = dword ptr  8
.text:00003510
.text:00003510                 push    ebp
.text:00003511                 mov     ebp, esp
.text:00003513                 sub     esp, 8
.text:00003516                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000351D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003524                 mov     [ebp+var_4], ecx
.text:00003527                 mov     ecx, [ebp+var_4]
.text:0000352A                 call    ?Size@?$CRecordVector@_N@@QBEIXZ ; CRecordVector<bool>::Size(void)
.text:0000352F                 cmp     eax, [ebp+arg_0]
.text:00003532                 jz      short loc_3549
.text:00003534                 mov     ecx, [ebp+var_4]
.text:00003537                 call    ?Size@?$CRecordVector@_N@@QBEIXZ ; CRecordVector<bool>::Size(void)
.text:0000353C                 test    eax, eax
.text:0000353E                 jz      short loc_3549
.text:00003540                 mov     [ebp+var_8], 0
.text:00003547                 jmp     short loc_3550
.text:00003549 ; ---------------------------------------------------------------------------
.text:00003549
.text:00003549 loc_3549:                               ; CODE XREF: NArchive::N7z::CUInt64DefVector::CheckSize(uint)+22j
.text:00003549                                         ; NArchive::N7z::CUInt64DefVector::CheckSize(uint)+2Ej
.text:00003549                 mov     [ebp+var_8], 1
.text:00003550
.text:00003550 loc_3550:                               ; CODE XREF: NArchive::N7z::CUInt64DefVector::CheckSize(uint)+37j
.text:00003550                 mov     al, byte ptr [ebp+var_8]
.text:00003553                 add     esp, 8
.text:00003556                 cmp     ebp, esp
.text:00003558                 call    __RTC_CheckEsp
.text:0000355D                 mov     esp, ebp
.text:0000355F                 pop     ebp
.text:00003560                 retn    4
.text:00003560 ?CheckSize@CUInt64DefVector@N7z@NArchive@@QBE_NI@Z endp
.text:00003560
.text:00003560 ; ---------------------------------------------------------------------------
.text:00003563                 align 4
.text:00003563 _text           ends
.text:00003563
.text:00003564 ; ===========================================================================
.text:00003564
.text:00003564 ; Segment type: Pure code
.text:00003564 ; Segment permissions: Read/Execute
.text:00003564 _text           segment para public 'CODE' use32
.text:00003564                 assume cs:_text
.text:00003564                 ;org 3564h
.text:00003564 ; COMDAT (pick any)
.text:00003564                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003564
.text:00003564 ; =============== S U B R O U T I N E =======================================
.text:00003564
.text:00003564 ; Attributes: bp-based frame
.text:00003564
.text:00003564 ; void __thiscall NArchive::N7z::COutArchive::WriteID(NArchive::N7z::COutArchive *this, unsigned __int64)
.text:00003564                 public ?WriteID@COutArchive@N7z@NArchive@@AAEX_K@Z
.text:00003564 ?WriteID@COutArchive@N7z@NArchive@@AAEX_K@Z proc near
.text:00003564                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+32Ep
.text:00003564
.text:00003564 var_4           = dword ptr -4
.text:00003564 arg_0           = qword ptr  8
.text:00003564
.text:00003564                 push    ebp
.text:00003565                 mov     ebp, esp
.text:00003567                 push    ecx
.text:00003568                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000356F                 mov     [ebp+var_4], ecx
.text:00003572                 mov     eax, dword ptr [ebp+arg_0+4]
.text:00003575                 push    eax
.text:00003576                 mov     ecx, dword ptr [ebp+arg_0]
.text:00003579                 push    ecx             ; unsigned __int64
.text:0000357A                 mov     ecx, [ebp+var_4] ; this
.text:0000357D                 call    ?WriteNumber@COutArchive@N7z@NArchive@@AAEX_K@Z ; NArchive::N7z::COutArchive::WriteNumber(unsigned __int64)
.text:00003582                 add     esp, 4
.text:00003585                 cmp     ebp, esp
.text:00003587                 call    __RTC_CheckEsp
.text:0000358C                 mov     esp, ebp
.text:0000358E                 pop     ebp
.text:0000358F                 retn    8
.text:0000358F ?WriteID@COutArchive@N7z@NArchive@@AAEX_K@Z endp
.text:0000358F
.text:0000358F ; ---------------------------------------------------------------------------
.text:00003592                 align 4
.text:00003592 _text           ends
.text:00003592
.text:00003594 ; ===========================================================================
.text:00003594
.text:00003594 ; Segment type: Pure code
.text:00003594 ; Segment permissions: Read/Execute
.text:00003594 _text           segment para public 'CODE' use32
.text:00003594                 assume cs:_text
.text:00003594                 ;org 3594h
.text:00003594 ; COMDAT (pick any)
.text:00003594                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003594
.text:00003594 ; =============== S U B R O U T I N E =======================================
.text:00003594
.text:00003594 ; Attributes: bp-based frame
.text:00003594
.text:00003594 ; _DWORD __thiscall NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(NArchive::N7z::CCompressionMethodMode *__hidden this)
.text:00003594                 public ??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
.text:00003594 ??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ proc near
.text:00003594                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+2D7p
.text:00003594                                         ; NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+437p ...
.text:00003594
.text:00003594 var_10          = dword ptr -10h
.text:00003594 var_C           = dword ptr -0Ch
.text:00003594 var_4           = dword ptr -4
.text:00003594
.text:00003594                 push    ebp
.text:00003595                 mov     ebp, esp
.text:00003597                 push    0FFFFFFFFh
.text:00003599                 push    offset __ehhandler$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
.text:0000359E                 mov     eax, large fs:0
.text:000035A4                 push    eax
.text:000035A5                 push    ecx
.text:000035A6                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000035AD                 mov     eax, dword ptr ds:___security_cookie
.text:000035B2                 xor     eax, ebp
.text:000035B4                 push    eax
.text:000035B5                 lea     eax, [ebp+var_C]
.text:000035B8                 mov     large fs:0, eax
.text:000035BE                 mov     [ebp+var_10], ecx
.text:000035C1                 mov     [ebp+var_4], 1
.text:000035C8                 mov     ecx, [ebp+var_10]
.text:000035CB                 add     ecx, 24h ; '$'  ; this
.text:000035CE                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000035D3                 mov     byte ptr [ebp+var_4], 0
.text:000035D7                 mov     ecx, [ebp+var_10]
.text:000035DA                 add     ecx, 0Ch
.text:000035DD                 call    ??1?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CBond2>::~CRecordVector<NArchive::N7z::CBond2>(void)
.text:000035E2                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000035E9                 mov     ecx, [ebp+var_10]
.text:000035EC                 call    ??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>(void)
.text:000035F1                 mov     ecx, [ebp+var_C]
.text:000035F4                 mov     large fs:0, ecx
.text:000035FB                 pop     ecx
.text:000035FC                 add     esp, 10h
.text:000035FF                 cmp     ebp, esp
.text:00003601                 call    __RTC_CheckEsp
.text:00003606                 mov     esp, ebp
.text:00003608                 pop     ebp
.text:00003609                 retn
.text:00003609 ??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ endp
.text:00003609
.text:00003609 ; ---------------------------------------------------------------------------
.text:0000360A                 align 4
.text:0000360A _text           ends
.text:0000360A
.text$x:0000360C ; ===========================================================================
.text$x:0000360C
.text$x:0000360C ; Segment type: Pure code
.text$x:0000360C ; Segment permissions: Read/Execute
.text$x:0000360C _text$x         segment para public 'CODE' use32
.text$x:0000360C                 assume cs:_text$x
.text$x:0000360C                 ;org 360Ch
.text$x:0000360C ; COMDAT (pick associative to section at 3594)
.text$x:0000360C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:0000360C
.text$x:0000360C ; =============== S U B R O U T I N E =======================================
.text$x:0000360C
.text$x:0000360C
.text$x:0000360C __unwindfunclet$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:0000360C                                         ; DATA XREF: .xdata$x:00003640o
.text$x:0000360C                 mov     ecx, [ebp-10h]
.text$x:0000360F                 jmp     ??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>(void)
.text$x:0000360F __unwindfunclet$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ$0 endp
.text$x:0000360F
.text$x:00003614
.text$x:00003614 ; =============== S U B R O U T I N E =======================================
.text$x:00003614
.text$x:00003614
.text$x:00003614 __unwindfunclet$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ$1 proc near
.text$x:00003614                                         ; DATA XREF: .xdata$x:00003648o
.text$x:00003614                 mov     ecx, [ebp-10h]
.text$x:00003617                 add     ecx, 0Ch
.text$x:0000361A                 jmp     ??1?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CBond2>::~CRecordVector<NArchive::N7z::CBond2>(void)
.text$x:0000361A __unwindfunclet$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ$1 endp
.text$x:0000361A
.text$x:0000361F
.text$x:0000361F ; =============== S U B R O U T I N E =======================================
.text$x:0000361F
.text$x:0000361F
.text$x:0000361F __ehhandler$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ proc near
.text$x:0000361F                                         ; DATA XREF: NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(void)+5o
.text$x:0000361F
.text$x:0000361F arg_4           = dword ptr  8
.text$x:0000361F
.text$x:0000361F                 mov     edx, [esp+arg_4]
.text$x:00003623                 lea     eax, [edx+0Ch]
.text$x:00003626                 mov     ecx, [edx-8]
.text$x:00003629                 xor     ecx, eax
.text$x:0000362B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003630                 mov     eax, offset __ehfuncinfo$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
.text$x:00003635                 jmp     ___CxxFrameHandler3
.text$x:00003635 __ehhandler$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ endp
.text$x:00003635
.text$x:00003635 ; ---------------------------------------------------------------------------
.text$x:0000363A                 align 4
.text$x:0000363A _text$x         ends
.text$x:0000363A
.xdata$x:0000363C ; ===========================================================================
.xdata$x:0000363C
.xdata$x:0000363C ; Segment type: Pure data
.xdata$x:0000363C ; Segment permissions: Read
.xdata$x:0000363C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000363C                 assume cs:_xdata$x
.xdata$x:0000363C                 ;org 363Ch
.xdata$x:0000363C ; COMDAT (pick associative to section at 3594)
.xdata$x:0000363C __unwindtable$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:0000363C                                         ; DATA XREF: .xdata$x:00003654o
.xdata$x:0000363D                 db 0FFh
.xdata$x:0000363E                 db 0FFh
.xdata$x:0000363F                 db 0FFh
.xdata$x:00003640                 dd offset __unwindfunclet$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ$0
.xdata$x:00003644                 align 8
.xdata$x:00003648                 dd offset __unwindfunclet$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ$1
.xdata$x:0000364C __ehfuncinfo$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:0000364C                                         ; DATA XREF: __ehhandler$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ+11o
.xdata$x:0000364D                 db    5
.xdata$x:0000364E                 db  93h ; ô
.xdata$x:0000364F                 db  19h
.xdata$x:00003650                 db    2
.xdata$x:00003651                 db    0
.xdata$x:00003652                 db    0
.xdata$x:00003653                 db    0
.xdata$x:00003654                 dd offset __unwindtable$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
.xdata$x:00003658                 db    0
.xdata$x:00003659                 db    0
.xdata$x:0000365A                 db    0
.xdata$x:0000365B                 db    0
.xdata$x:0000365C                 db    0
.xdata$x:0000365D                 db    0
.xdata$x:0000365E                 db    0
.xdata$x:0000365F                 db    0
.xdata$x:00003660                 db    0
.xdata$x:00003661                 db    0
.xdata$x:00003662                 db    0
.xdata$x:00003663                 db    0
.xdata$x:00003664                 db    0
.xdata$x:00003665                 db    0
.xdata$x:00003666                 db    0
.xdata$x:00003667                 db    0
.xdata$x:00003668                 db    0
.xdata$x:00003669                 db    0
.xdata$x:0000366A                 db    0
.xdata$x:0000366B                 db    0
.xdata$x:0000366C                 db    1
.xdata$x:0000366D                 db    0
.xdata$x:0000366E                 db    0
.xdata$x:0000366F                 db    0
.xdata$x:0000366F _xdata$x        ends
.xdata$x:0000366F
.text:00003670 ; ===========================================================================
.text:00003670
.text:00003670 ; Segment type: Pure code
.text:00003670 ; Segment permissions: Read/Execute
.text:00003670 _text           segment para public 'CODE' use32
.text:00003670                 assume cs:_text
.text:00003670                 ;org 3670h
.text:00003670 ; COMDAT (pick any)
.text:00003670                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003670
.text:00003670 ; =============== S U B R O U T I N E =======================================
.text:00003670
.text:00003670 ; Attributes: bp-based frame
.text:00003670
.text:00003670 ; _DWORD __thiscall UString::~UString(UString *__hidden this)
.text:00003670                 public ??1UString@@QAE@XZ
.text:00003670 ??1UString@@QAE@XZ proc near            ; CODE XREF: NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(void)+3Ap
.text:00003670
.text:00003670 var_8           = dword ptr -8
.text:00003670 var_4           = dword ptr -4
.text:00003670
.text:00003670                 push    ebp
.text:00003671                 mov     ebp, esp
.text:00003673                 sub     esp, 8
.text:00003676                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000367D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003684                 mov     [ebp+var_4], ecx
.text:00003687                 mov     eax, [ebp+var_4]
.text:0000368A                 mov     ecx, [eax]
.text:0000368C                 mov     [ebp+var_8], ecx
.text:0000368F                 mov     edx, [ebp+var_8]
.text:00003692                 push    edx             ; void *
.text:00003693                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00003698                 add     esp, 4
.text:0000369B                 add     esp, 8
.text:0000369E                 cmp     ebp, esp
.text:000036A0                 call    __RTC_CheckEsp
.text:000036A5                 mov     esp, ebp
.text:000036A7                 pop     ebp
.text:000036A8                 retn
.text:000036A8 ??1UString@@QAE@XZ endp
.text:000036A8
.text:000036A8 ; ---------------------------------------------------------------------------
.text:000036A9                 align 4
.text:000036A9 _text           ends
.text:000036A9
.text:000036AC ; ===========================================================================
.text:000036AC
.text:000036AC ; Segment type: Pure code
.text:000036AC ; Segment permissions: Read/Execute
.text:000036AC _text           segment para public 'CODE' use32
.text:000036AC                 assume cs:_text
.text:000036AC                 ;org 36ACh
.text:000036AC ; COMDAT (pick any)
.text:000036AC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000036AC
.text:000036AC ; =============== S U B R O U T I N E =======================================
.text:000036AC
.text:000036AC ; Attributes: bp-based frame
.text:000036AC
.text:000036AC ; _DWORD __thiscall NArchive::N7z::COutFolders::COutFolders(NArchive::N7z::COutFolders *__hidden this)
.text:000036AC                 public ??0COutFolders@N7z@NArchive@@QAE@XZ
.text:000036AC ??0COutFolders@N7z@NArchive@@QAE@XZ proc near
.text:000036AC                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+248p
.text:000036AC
.text:000036AC var_10          = dword ptr -10h
.text:000036AC var_C           = dword ptr -0Ch
.text:000036AC var_4           = dword ptr -4
.text:000036AC
.text:000036AC                 push    ebp
.text:000036AD                 mov     ebp, esp
.text:000036AF                 push    0FFFFFFFFh
.text:000036B1                 push    offset __ehhandler$??0COutFolders@N7z@NArchive@@QAE@XZ
.text:000036B6                 mov     eax, large fs:0
.text:000036BC                 push    eax
.text:000036BD                 push    ecx
.text:000036BE                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000036C5                 mov     eax, dword ptr ds:___security_cookie
.text:000036CA                 xor     eax, ebp
.text:000036CC                 push    eax
.text:000036CD                 lea     eax, [ebp+var_C]
.text:000036D0                 mov     large fs:0, eax
.text:000036D6                 mov     [ebp+var_10], ecx
.text:000036D9                 mov     ecx, [ebp+var_10] ; this
.text:000036DC                 call    ??0CUInt32DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt32DefVector::CUInt32DefVector(void)
.text:000036E1                 mov     [ebp+var_4], 0
.text:000036E8                 mov     ecx, [ebp+var_10]
.text:000036EB                 add     ecx, 18h
.text:000036EE                 call    ??0?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::CRecordVector<uint>(void)
.text:000036F3                 mov     byte ptr [ebp+var_4], 1
.text:000036F7                 mov     ecx, [ebp+var_10]
.text:000036FA                 add     ecx, 24h ; '$'
.text:000036FD                 call    ??0?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>(void)
.text:00003702                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003709                 mov     eax, [ebp+var_10]
.text:0000370C                 mov     ecx, [ebp+var_C]
.text:0000370F                 mov     large fs:0, ecx
.text:00003716                 pop     ecx
.text:00003717                 add     esp, 10h
.text:0000371A                 cmp     ebp, esp
.text:0000371C                 call    __RTC_CheckEsp
.text:00003721                 mov     esp, ebp
.text:00003723                 pop     ebp
.text:00003724                 retn
.text:00003724 ??0COutFolders@N7z@NArchive@@QAE@XZ endp
.text:00003724
.text:00003724 ; ---------------------------------------------------------------------------
.text:00003725                 align 4
.text:00003725 _text           ends
.text:00003725
.text$x:00003728 ; ===========================================================================
.text$x:00003728
.text$x:00003728 ; Segment type: Pure code
.text$x:00003728 ; Segment permissions: Read/Execute
.text$x:00003728 _text$x         segment para public 'CODE' use32
.text$x:00003728                 assume cs:_text$x
.text$x:00003728                 ;org 3728h
.text$x:00003728 ; COMDAT (pick associative to section at 36AC)
.text$x:00003728                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00003728
.text$x:00003728 ; =============== S U B R O U T I N E =======================================
.text$x:00003728
.text$x:00003728
.text$x:00003728 __unwindfunclet$??0COutFolders@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:00003728                                         ; DATA XREF: .xdata$x:0000375Co
.text$x:00003728                 mov     ecx, [ebp-10h]  ; this
.text$x:0000372B                 jmp     ??1CUInt32DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt32DefVector::~CUInt32DefVector(void)
.text$x:0000372B __unwindfunclet$??0COutFolders@N7z@NArchive@@QAE@XZ$0 endp
.text$x:0000372B
.text$x:00003730
.text$x:00003730 ; =============== S U B R O U T I N E =======================================
.text$x:00003730
.text$x:00003730
.text$x:00003730 __unwindfunclet$??0COutFolders@N7z@NArchive@@QAE@XZ$1 proc near
.text$x:00003730                                         ; DATA XREF: .xdata$x:00003764o
.text$x:00003730                 mov     ecx, [ebp-10h]
.text$x:00003733                 add     ecx, 18h
.text$x:00003736                 jmp     ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text$x:00003736 __unwindfunclet$??0COutFolders@N7z@NArchive@@QAE@XZ$1 endp
.text$x:00003736
.text$x:0000373B
.text$x:0000373B ; =============== S U B R O U T I N E =======================================
.text$x:0000373B
.text$x:0000373B
.text$x:0000373B __ehhandler$??0COutFolders@N7z@NArchive@@QAE@XZ proc near
.text$x:0000373B                                         ; DATA XREF: NArchive::N7z::COutFolders::COutFolders(void)+5o
.text$x:0000373B
.text$x:0000373B arg_4           = dword ptr  8
.text$x:0000373B
.text$x:0000373B                 mov     edx, [esp+arg_4]
.text$x:0000373F                 lea     eax, [edx+0Ch]
.text$x:00003742                 mov     ecx, [edx-8]
.text$x:00003745                 xor     ecx, eax
.text$x:00003747                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000374C                 mov     eax, offset __ehfuncinfo$??0COutFolders@N7z@NArchive@@QAE@XZ
.text$x:00003751                 jmp     ___CxxFrameHandler3
.text$x:00003751 __ehhandler$??0COutFolders@N7z@NArchive@@QAE@XZ endp
.text$x:00003751
.text$x:00003751 ; ---------------------------------------------------------------------------
.text$x:00003756                 align 4
.text$x:00003756 _text$x         ends
.text$x:00003756
.xdata$x:00003758 ; ===========================================================================
.xdata$x:00003758
.xdata$x:00003758 ; Segment type: Pure data
.xdata$x:00003758 ; Segment permissions: Read
.xdata$x:00003758 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00003758                 assume cs:_xdata$x
.xdata$x:00003758                 ;org 3758h
.xdata$x:00003758 ; COMDAT (pick associative to section at 36AC)
.xdata$x:00003758 __unwindtable$??0COutFolders@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:00003758                                         ; DATA XREF: .xdata$x:00003770o
.xdata$x:00003759                 db 0FFh
.xdata$x:0000375A                 db 0FFh
.xdata$x:0000375B                 db 0FFh
.xdata$x:0000375C                 dd offset __unwindfunclet$??0COutFolders@N7z@NArchive@@QAE@XZ$0
.xdata$x:00003760                 db    0
.xdata$x:00003761                 db    0
.xdata$x:00003762                 db    0
.xdata$x:00003763                 db    0
.xdata$x:00003764                 dd offset __unwindfunclet$??0COutFolders@N7z@NArchive@@QAE@XZ$1
.xdata$x:00003768 __ehfuncinfo$??0COutFolders@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00003768                                         ; DATA XREF: __ehhandler$??0COutFolders@N7z@NArchive@@QAE@XZ+11o
.xdata$x:00003769                 db    5
.xdata$x:0000376A                 db  93h ; ô
.xdata$x:0000376B                 db  19h
.xdata$x:0000376C                 db    2
.xdata$x:0000376D                 db    0
.xdata$x:0000376E                 db    0
.xdata$x:0000376F                 db    0
.xdata$x:00003770                 dd offset __unwindtable$??0COutFolders@N7z@NArchive@@QAE@XZ
.xdata$x:00003774                 db    0
.xdata$x:00003775                 db    0
.xdata$x:00003776                 db    0
.xdata$x:00003777                 db    0
.xdata$x:00003778                 db    0
.xdata$x:00003779                 db    0
.xdata$x:0000377A                 db    0
.xdata$x:0000377B                 db    0
.xdata$x:0000377C                 db    0
.xdata$x:0000377D                 db    0
.xdata$x:0000377E                 db    0
.xdata$x:0000377F                 db    0
.xdata$x:00003780                 db    0
.xdata$x:00003781                 db    0
.xdata$x:00003782                 db    0
.xdata$x:00003783                 db    0
.xdata$x:00003784                 db    0
.xdata$x:00003785                 db    0
.xdata$x:00003786                 db    0
.xdata$x:00003787                 db    0
.xdata$x:00003788                 db    1
.xdata$x:00003789                 db    0
.xdata$x:0000378A                 db    0
.xdata$x:0000378B                 db    0
.xdata$x:0000378B _xdata$x        ends
.xdata$x:0000378B
.text:0000378C ; ===========================================================================
.text:0000378C
.text:0000378C ; Segment type: Pure code
.text:0000378C ; Segment permissions: Read/Execute
.text:0000378C _text           segment para public 'CODE' use32
.text:0000378C                 assume cs:_text
.text:0000378C                 ;org 378Ch
.text:0000378C ; COMDAT (pick any)
.text:0000378C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000378C
.text:0000378C ; =============== S U B R O U T I N E =======================================
.text:0000378C
.text:0000378C ; Attributes: bp-based frame
.text:0000378C
.text:0000378C ; _DWORD __thiscall NArchive::N7z::COutFolders::~COutFolders(NArchive::N7z::COutFolders *__hidden this)
.text:0000378C                 public ??1COutFolders@N7z@NArchive@@QAE@XZ
.text:0000378C ??1COutFolders@N7z@NArchive@@QAE@XZ proc near
.text:0000378C                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+29Ep
.text:0000378C                                         ; NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+3FEp ...
.text:0000378C
.text:0000378C var_10          = dword ptr -10h
.text:0000378C var_C           = dword ptr -0Ch
.text:0000378C var_4           = dword ptr -4
.text:0000378C
.text:0000378C                 push    ebp
.text:0000378D                 mov     ebp, esp
.text:0000378F                 push    0FFFFFFFFh
.text:00003791                 push    offset __ehhandler$??1COutFolders@N7z@NArchive@@QAE@XZ
.text:00003796                 mov     eax, large fs:0
.text:0000379C                 push    eax
.text:0000379D                 push    ecx
.text:0000379E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000037A5                 mov     eax, dword ptr ds:___security_cookie
.text:000037AA                 xor     eax, ebp
.text:000037AC                 push    eax
.text:000037AD                 lea     eax, [ebp+var_C]
.text:000037B0                 mov     large fs:0, eax
.text:000037B6                 mov     [ebp+var_10], ecx
.text:000037B9                 mov     [ebp+var_4], 1
.text:000037C0                 mov     ecx, [ebp+var_10]
.text:000037C3                 add     ecx, 24h ; '$'
.text:000037C6                 call    ??1?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text:000037CB                 mov     byte ptr [ebp+var_4], 0
.text:000037CF                 mov     ecx, [ebp+var_10]
.text:000037D2                 add     ecx, 18h
.text:000037D5                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:000037DA                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000037E1                 mov     ecx, [ebp+var_10] ; this
.text:000037E4                 call    ??1CUInt32DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt32DefVector::~CUInt32DefVector(void)
.text:000037E9                 mov     ecx, [ebp+var_C]
.text:000037EC                 mov     large fs:0, ecx
.text:000037F3                 pop     ecx
.text:000037F4                 add     esp, 10h
.text:000037F7                 cmp     ebp, esp
.text:000037F9                 call    __RTC_CheckEsp
.text:000037FE                 mov     esp, ebp
.text:00003800                 pop     ebp
.text:00003801                 retn
.text:00003801 ??1COutFolders@N7z@NArchive@@QAE@XZ endp
.text:00003801
.text:00003801 ; ---------------------------------------------------------------------------
.text:00003802                 align 4
.text:00003802 _text           ends
.text:00003802
.text$x:00003804 ; ===========================================================================
.text$x:00003804
.text$x:00003804 ; Segment type: Pure code
.text$x:00003804 ; Segment permissions: Read/Execute
.text$x:00003804 _text$x         segment para public 'CODE' use32
.text$x:00003804                 assume cs:_text$x
.text$x:00003804                 ;org 3804h
.text$x:00003804 ; COMDAT (pick associative to section at 378C)
.text$x:00003804                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00003804
.text$x:00003804 ; =============== S U B R O U T I N E =======================================
.text$x:00003804
.text$x:00003804
.text$x:00003804 __unwindfunclet$??1COutFolders@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:00003804                                         ; DATA XREF: .xdata$x:00003838o
.text$x:00003804                 mov     ecx, [ebp-10h]  ; this
.text$x:00003807                 jmp     ??1CUInt32DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt32DefVector::~CUInt32DefVector(void)
.text$x:00003807 __unwindfunclet$??1COutFolders@N7z@NArchive@@QAE@XZ$0 endp
.text$x:00003807
.text$x:0000380C
.text$x:0000380C ; =============== S U B R O U T I N E =======================================
.text$x:0000380C
.text$x:0000380C
.text$x:0000380C __unwindfunclet$??1COutFolders@N7z@NArchive@@QAE@XZ$1 proc near
.text$x:0000380C                                         ; DATA XREF: .xdata$x:00003840o
.text$x:0000380C                 mov     ecx, [ebp-10h]
.text$x:0000380F                 add     ecx, 18h
.text$x:00003812                 jmp     ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text$x:00003812 __unwindfunclet$??1COutFolders@N7z@NArchive@@QAE@XZ$1 endp
.text$x:00003812
.text$x:00003817
.text$x:00003817 ; =============== S U B R O U T I N E =======================================
.text$x:00003817
.text$x:00003817
.text$x:00003817 __ehhandler$??1COutFolders@N7z@NArchive@@QAE@XZ proc near
.text$x:00003817                                         ; DATA XREF: NArchive::N7z::COutFolders::~COutFolders(void)+5o
.text$x:00003817
.text$x:00003817 arg_4           = dword ptr  8
.text$x:00003817
.text$x:00003817                 mov     edx, [esp+arg_4]
.text$x:0000381B                 lea     eax, [edx+0Ch]
.text$x:0000381E                 mov     ecx, [edx-8]
.text$x:00003821                 xor     ecx, eax
.text$x:00003823                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003828                 mov     eax, offset __ehfuncinfo$??1COutFolders@N7z@NArchive@@QAE@XZ
.text$x:0000382D                 jmp     ___CxxFrameHandler3
.text$x:0000382D __ehhandler$??1COutFolders@N7z@NArchive@@QAE@XZ endp
.text$x:0000382D
.text$x:0000382D ; ---------------------------------------------------------------------------
.text$x:00003832                 align 4
.text$x:00003832 _text$x         ends
.text$x:00003832
.xdata$x:00003834 ; ===========================================================================
.xdata$x:00003834
.xdata$x:00003834 ; Segment type: Pure data
.xdata$x:00003834 ; Segment permissions: Read
.xdata$x:00003834 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00003834                 assume cs:_xdata$x
.xdata$x:00003834                 ;org 3834h
.xdata$x:00003834 ; COMDAT (pick associative to section at 378C)
.xdata$x:00003834 __unwindtable$??1COutFolders@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:00003834                                         ; DATA XREF: .xdata$x:0000384Co
.xdata$x:00003835                 db 0FFh
.xdata$x:00003836                 db 0FFh
.xdata$x:00003837                 db 0FFh
.xdata$x:00003838                 dd offset __unwindfunclet$??1COutFolders@N7z@NArchive@@QAE@XZ$0
.xdata$x:0000383C                 align 10h
.xdata$x:00003840                 dd offset __unwindfunclet$??1COutFolders@N7z@NArchive@@QAE@XZ$1
.xdata$x:00003844 __ehfuncinfo$??1COutFolders@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00003844                                         ; DATA XREF: __ehhandler$??1COutFolders@N7z@NArchive@@QAE@XZ+11o
.xdata$x:00003845                 db    5
.xdata$x:00003846                 db  93h ; ô
.xdata$x:00003847                 db  19h
.xdata$x:00003848                 db    2
.xdata$x:00003849                 db    0
.xdata$x:0000384A                 db    0
.xdata$x:0000384B                 db    0
.xdata$x:0000384C                 dd offset __unwindtable$??1COutFolders@N7z@NArchive@@QAE@XZ
.xdata$x:00003850                 db    0
.xdata$x:00003851                 db    0
.xdata$x:00003852                 db    0
.xdata$x:00003853                 db    0
.xdata$x:00003854                 db    0
.xdata$x:00003855                 db    0
.xdata$x:00003856                 db    0
.xdata$x:00003857                 db    0
.xdata$x:00003858                 db    0
.xdata$x:00003859                 db    0
.xdata$x:0000385A                 db    0
.xdata$x:0000385B                 db    0
.xdata$x:0000385C                 db    0
.xdata$x:0000385D                 db    0
.xdata$x:0000385E                 db    0
.xdata$x:0000385F                 db    0
.xdata$x:00003860                 db    0
.xdata$x:00003861                 db    0
.xdata$x:00003862                 db    0
.xdata$x:00003863                 db    0
.xdata$x:00003864                 db    1
.xdata$x:00003865                 db    0
.xdata$x:00003866                 db    0
.xdata$x:00003867                 db    0
.xdata$x:00003867 _xdata$x        ends
.xdata$x:00003867
.text:00003868 ; ===========================================================================
.text:00003868
.text:00003868 ; Segment type: Pure code
.text:00003868 ; Segment permissions: Read/Execute
.text:00003868 _text           segment para public 'CODE' use32
.text:00003868                 assume cs:_text
.text:00003868                 ;org 3868h
.text:00003868 ; COMDAT (pick any)
.text:00003868                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003868
.text:00003868 ; =============== S U B R O U T I N E =======================================
.text:00003868
.text:00003868 ; Attributes: bp-based frame
.text:00003868
.text:00003868 ; void __thiscall NArchive::N7z::CArchiveDatabaseOut::SetItem_Anti(NArchive::N7z::CArchiveDatabaseOut *this, unsigned int, bool)
.text:00003868                 public ?SetItem_Anti@CArchiveDatabaseOut@N7z@NArchive@@QAEXI_N@Z
.text:00003868 ?SetItem_Anti@CArchiveDatabaseOut@N7z@NArchive@@QAEXI_N@Z proc near
.text:00003868                                         ; CODE XREF: NArchive::N7z::CArchiveDatabaseOut::AddFile(NArchive::N7z::CFileItem const &,NArchive::N7z::CFileItem2 const &,UString const &)+C4p
.text:00003868
.text:00003868 var_4           = dword ptr -4
.text:00003868 arg_0           = dword ptr  8
.text:00003868 arg_4           = byte ptr  0Ch
.text:00003868
.text:00003868                 push    ebp
.text:00003869                 mov     ebp, esp
.text:0000386B                 push    ecx
.text:0000386C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003873                 mov     [ebp+var_4], ecx
.text:00003876
.text:00003876 loc_3876:                               ; CODE XREF: NArchive::N7z::CArchiveDatabaseOut::SetItem_Anti(uint,bool)+31j
.text:00003876                 mov     ecx, [ebp+var_4]
.text:00003879                 add     ecx, 0D8h ; '+'
.text:0000387F                 call    ?Size@?$CRecordVector@_N@@QBEIXZ ; CRecordVector<bool>::Size(void)
.text:00003884                 cmp     [ebp+arg_0], eax
.text:00003887                 jb      short loc_389B
.text:00003889                 push    0
.text:0000388B                 mov     ecx, [ebp+var_4]
.text:0000388E                 add     ecx, 0D8h ; '+'
.text:00003894                 call    ?Add@?$CRecordVector@_N@@QAEI_N@Z ; CRecordVector<bool>::Add(bool)
.text:00003899                 jmp     short loc_3876
.text:0000389B ; ---------------------------------------------------------------------------
.text:0000389B
.text:0000389B loc_389B:                               ; CODE XREF: NArchive::N7z::CArchiveDatabaseOut::SetItem_Anti(uint,bool)+1Fj
.text:0000389B                 mov     eax, [ebp+arg_0]
.text:0000389E                 push    eax
.text:0000389F                 mov     ecx, [ebp+var_4]
.text:000038A2                 add     ecx, 0D8h ; '+'
.text:000038A8                 call    ??A?$CRecordVector@_N@@QAEAA_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:000038AD                 mov     cl, [ebp+arg_4]
.text:000038B0                 mov     [eax], cl
.text:000038B2                 add     esp, 4
.text:000038B5                 cmp     ebp, esp
.text:000038B7                 call    __RTC_CheckEsp
.text:000038BC                 mov     esp, ebp
.text:000038BE                 pop     ebp
.text:000038BF                 retn    8
.text:000038BF ?SetItem_Anti@CArchiveDatabaseOut@N7z@NArchive@@QAEXI_N@Z endp
.text:000038BF
.text:000038BF ; ---------------------------------------------------------------------------
.text:000038C2                 align 4
.text:000038C2 _text           ends
.text:000038C2
.text:000038C4 ; ===========================================================================
.text:000038C4
.text:000038C4 ; Segment type: Pure code
.text:000038C4 ; Segment permissions: Read/Execute
.text:000038C4 _text           segment para public 'CODE' use32
.text:000038C4                 assume cs:_text
.text:000038C4                 ;org 38C4h
.text:000038C4 ; COMDAT (pick any)
.text:000038C4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000038C4
.text:000038C4 ; =============== S U B R O U T I N E =======================================
.text:000038C4
.text:000038C4 ; Attributes: bp-based frame
.text:000038C4
.text:000038C4 ; public: __thiscall CBuffer<unsigned char>::CBuffer<unsigned char>(unsigned int)
.text:000038C4                 public ??0?$CBuffer@E@@QAE@I@Z
.text:000038C4 ??0?$CBuffer@E@@QAE@I@Z proc near       ; CODE XREF: NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+144p
.text:000038C4
.text:000038C4 var_8           = dword ptr -8
.text:000038C4 var_4           = dword ptr -4
.text:000038C4 arg_0           = dword ptr  8
.text:000038C4
.text:000038C4                 push    ebp
.text:000038C5                 mov     ebp, esp
.text:000038C7                 sub     esp, 8
.text:000038CA                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000038D1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000038D8                 mov     [ebp+var_4], ecx
.text:000038DB                 mov     eax, [ebp+var_4]
.text:000038DE                 mov     dword ptr [eax], 0
.text:000038E4                 mov     ecx, [ebp+var_4]
.text:000038E7                 mov     dword ptr [ecx+4], 0
.text:000038EE                 mov     edx, [ebp+arg_0]
.text:000038F1                 push    edx             ; unsigned int
.text:000038F2                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000038F7                 add     esp, 4
.text:000038FA                 mov     [ebp+var_8], eax
.text:000038FD                 mov     eax, [ebp+var_4]
.text:00003900                 mov     ecx, [ebp+var_8]
.text:00003903                 mov     [eax], ecx
.text:00003905                 mov     edx, [ebp+var_4]
.text:00003908                 mov     eax, [ebp+arg_0]
.text:0000390B                 mov     [edx+4], eax
.text:0000390E                 mov     eax, [ebp+var_4]
.text:00003911                 add     esp, 8
.text:00003914                 cmp     ebp, esp
.text:00003916                 call    __RTC_CheckEsp
.text:0000391B                 mov     esp, ebp
.text:0000391D                 pop     ebp
.text:0000391E                 retn    4
.text:0000391E ??0?$CBuffer@E@@QAE@I@Z endp
.text:0000391E
.text:0000391E ; ---------------------------------------------------------------------------
.text:00003921                 align 4
.text:00003921 _text           ends
.text:00003921
.text:00003924 ; ===========================================================================
.text:00003924
.text:00003924 ; Segment type: Pure code
.text:00003924 ; Segment permissions: Read/Execute
.text:00003924 _text           segment para public 'CODE' use32
.text:00003924                 assume cs:_text
.text:00003924                 ;org 3924h
.text:00003924 ; COMDAT (pick any)
.text:00003924                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003924
.text:00003924 ; =============== S U B R O U T I N E =======================================
.text:00003924
.text:00003924 ; Attributes: bp-based frame
.text:00003924
.text:00003924 ; public: __thiscall CBuffer<unsigned char>::~CBuffer<unsigned char>(void)
.text:00003924                 public ??1?$CBuffer@E@@QAE@XZ
.text:00003924 ??1?$CBuffer@E@@QAE@XZ proc near        ; CODE XREF: NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+1B0p
.text:00003924                                         ; NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+2E6p ...
.text:00003924
.text:00003924 var_8           = dword ptr -8
.text:00003924 var_4           = dword ptr -4
.text:00003924
.text:00003924                 push    ebp
.text:00003925                 mov     ebp, esp
.text:00003927                 sub     esp, 8
.text:0000392A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00003931                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003938                 mov     [ebp+var_4], ecx
.text:0000393B                 mov     eax, [ebp+var_4]
.text:0000393E                 mov     ecx, [eax]
.text:00003940                 mov     [ebp+var_8], ecx
.text:00003943                 mov     edx, [ebp+var_8]
.text:00003946                 push    edx             ; void *
.text:00003947                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000394C                 add     esp, 4
.text:0000394F                 add     esp, 8
.text:00003952                 cmp     ebp, esp
.text:00003954                 call    __RTC_CheckEsp
.text:00003959                 mov     esp, ebp
.text:0000395B                 pop     ebp
.text:0000395C                 retn
.text:0000395C ??1?$CBuffer@E@@QAE@XZ endp
.text:0000395C
.text:0000395C ; ---------------------------------------------------------------------------
.text:0000395D                 align 10h
.text:0000395D _text           ends
.text:0000395D
.text:00003960 ; ===========================================================================
.text:00003960
.text:00003960 ; Segment type: Pure code
.text:00003960 ; Segment permissions: Read/Execute
.text:00003960 _text           segment para public 'CODE' use32
.text:00003960                 assume cs:_text
.text:00003960                 ;org 3960h
.text:00003960 ; COMDAT (pick any)
.text:00003960                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003960
.text:00003960 ; =============== S U B R O U T I N E =======================================
.text:00003960
.text:00003960 ; Attributes: bp-based frame
.text:00003960
.text:00003960 ; public: __thiscall CBuffer<unsigned char>::operator unsigned char *(void)
.text:00003960                 public ??B?$CBuffer@E@@QAEPAEXZ
.text:00003960 ??B?$CBuffer@E@@QAEPAEXZ proc near      ; CODE XREF: NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+15Ap
.text:00003960
.text:00003960 var_4           = dword ptr -4
.text:00003960
.text:00003960                 push    ebp
.text:00003961                 mov     ebp, esp
.text:00003963                 push    ecx
.text:00003964                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000396B                 mov     [ebp+var_4], ecx
.text:0000396E                 mov     eax, [ebp+var_4]
.text:00003971                 mov     eax, [eax]
.text:00003973                 mov     esp, ebp
.text:00003975                 pop     ebp
.text:00003976                 retn
.text:00003976 ??B?$CBuffer@E@@QAEPAEXZ endp
.text:00003976
.text:00003976 ; ---------------------------------------------------------------------------
.text:00003977                 align 4
.text:00003977 _text           ends
.text:00003977
.text:00003978 ; ===========================================================================
.text:00003978
.text:00003978 ; Segment type: Pure code
.text:00003978 ; Segment permissions: Read/Execute
.text:00003978 _text           segment para public 'CODE' use32
.text:00003978                 assume cs:_text
.text:00003978                 ;org 3978h
.text:00003978 ; COMDAT (pick any)
.text:00003978                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003978
.text:00003978 ; =============== S U B R O U T I N E =======================================
.text:00003978
.text:00003978 ; Attributes: bp-based frame
.text:00003978
.text:00003978 ; public: __thiscall CBuffer<unsigned char>::operator unsigned char const *(void)const
.text:00003978                 public ??B?$CBuffer@E@@QBEPBEXZ
.text:00003978 ??B?$CBuffer@E@@QBEPBEXZ proc near      ; CODE XREF: NArchive::N7z::COutArchive::WriteFolder(NArchive::N7z::CFolder const &)+1B6p
.text:00003978                                         ; NArchive::N7z::COutArchive::EncodeStream(NArchive::N7z::CEncoder &,CBuffer<uchar> const &,CRecordVector<unsigned __int64> &,CObjectVector<NArchive::N7z::CFolder> &,NArchive::N7z::COutFolders &)+9Dp ...
.text:00003978
.text:00003978 var_4           = dword ptr -4
.text:00003978
.text:00003978                 push    ebp
.text:00003979                 mov     ebp, esp
.text:0000397B                 push    ecx
.text:0000397C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003983                 mov     [ebp+var_4], ecx
.text:00003986                 mov     eax, [ebp+var_4]
.text:00003989                 mov     eax, [eax]
.text:0000398B                 mov     esp, ebp
.text:0000398D                 pop     ebp
.text:0000398E                 retn
.text:0000398E ??B?$CBuffer@E@@QBEPBEXZ endp
.text:0000398E
.text:0000398E ; ---------------------------------------------------------------------------
.text:0000398F                 align 10h
.text:0000398F _text           ends
.text:0000398F
.text:00003990 ; ===========================================================================
.text:00003990
.text:00003990 ; Segment type: Pure code
.text:00003990 ; Segment permissions: Read/Execute
.text:00003990 _text           segment para public 'CODE' use32
.text:00003990                 assume cs:_text
.text:00003990                 ;org 3990h
.text:00003990 ; COMDAT (pick any)
.text:00003990                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003990
.text:00003990 ; =============== S U B R O U T I N E =======================================
.text:00003990
.text:00003990 ; Attributes: bp-based frame
.text:00003990
.text:00003990 ; public: unsigned int __thiscall CBuffer<unsigned char>::Size(void)const
.text:00003990                 public ?Size@?$CBuffer@E@@QBEIXZ
.text:00003990 ?Size@?$CBuffer@E@@QBEIXZ proc near     ; CODE XREF: NArchive::N7z::COutArchive::WriteFolder(NArchive::N7z::CFolder const &)+138p
.text:00003990                                         ; NArchive::N7z::COutArchive::EncodeStream(NArchive::N7z::CEncoder &,CBuffer<uchar> const &,CRecordVector<unsigned __int64> &,CObjectVector<NArchive::N7z::CFolder> &,NArchive::N7z::COutFolders &)+94p ...
.text:00003990
.text:00003990 var_4           = dword ptr -4
.text:00003990
.text:00003990                 push    ebp
.text:00003991                 mov     ebp, esp
.text:00003993                 push    ecx
.text:00003994                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000399B                 mov     [ebp+var_4], ecx
.text:0000399E                 mov     eax, [ebp+var_4]
.text:000039A1                 mov     eax, [eax+4]
.text:000039A4                 mov     esp, ebp
.text:000039A6                 pop     ebp
.text:000039A7                 retn
.text:000039A7 ?Size@?$CBuffer@E@@QBEIXZ endp
.text:000039A7
.text:000039A7 _text           ends
.text:000039A7
.text:000039A8 ; ===========================================================================
.text:000039A8
.text:000039A8 ; Segment type: Pure code
.text:000039A8 ; Segment permissions: Read/Execute
.text:000039A8 _text           segment para public 'CODE' use32
.text:000039A8                 assume cs:_text
.text:000039A8                 ;org 39A8h
.text:000039A8 ; COMDAT (pick any)
.text:000039A8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000039A8
.text:000039A8 ; =============== S U B R O U T I N E =======================================
.text:000039A8
.text:000039A8 ; Attributes: bp-based frame
.text:000039A8
.text:000039A8 ; public: __thiscall CMyComPtr<struct IUnknown>::CMyComPtr<struct IUnknown>(void)
.text:000039A8                 public ??0?$CMyComPtr@UIUnknown@@@@QAE@XZ
.text:000039A8 ??0?$CMyComPtr@UIUnknown@@@@QAE@XZ proc near
.text:000039A8                                         ; CODE XREF: CBufInStream::CBufInStream(void)+30p
.text:000039A8
.text:000039A8 var_4           = dword ptr -4
.text:000039A8
.text:000039A8                 push    ebp
.text:000039A9                 mov     ebp, esp
.text:000039AB                 push    ecx
.text:000039AC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000039B3                 mov     [ebp+var_4], ecx
.text:000039B6                 mov     eax, [ebp+var_4]
.text:000039B9                 mov     dword ptr [eax], 0
.text:000039BF                 mov     eax, [ebp+var_4]
.text:000039C2                 mov     esp, ebp
.text:000039C4                 pop     ebp
.text:000039C5                 retn
.text:000039C5 ??0?$CMyComPtr@UIUnknown@@@@QAE@XZ endp
.text:000039C5
.text:000039C5 ; ---------------------------------------------------------------------------
.text:000039C6                 align 4
.text:000039C6 _text           ends
.text:000039C6
.text:000039C8 ; ===========================================================================
.text:000039C8
.text:000039C8 ; Segment type: Pure code
.text:000039C8 ; Segment permissions: Read/Execute
.text:000039C8 _text           segment para public 'CODE' use32
.text:000039C8                 assume cs:_text
.text:000039C8                 ;org 39C8h
.text:000039C8 ; COMDAT (pick any)
.text:000039C8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000039C8
.text:000039C8 ; =============== S U B R O U T I N E =======================================
.text:000039C8
.text:000039C8 ; Attributes: bp-based frame
.text:000039C8
.text:000039C8 ; public: __thiscall CMyComPtr<struct IUnknown>::~CMyComPtr<struct IUnknown>(void)
.text:000039C8                 public ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ
.text:000039C8 ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ proc near
.text:000039C8                                         ; CODE XREF: CBufInStream::~CBufInStream(void)+14p
.text:000039C8
.text:000039C8 var_4           = dword ptr -4
.text:000039C8
.text:000039C8                 push    ebp
.text:000039C9                 mov     ebp, esp
.text:000039CB                 push    ecx
.text:000039CC                 push    esi
.text:000039CD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000039D4                 mov     [ebp+var_4], ecx
.text:000039D7                 mov     eax, [ebp+var_4]
.text:000039DA                 cmp     dword ptr [eax], 0
.text:000039DD                 jz      short loc_39FA
.text:000039DF                 mov     ecx, [ebp+var_4]
.text:000039E2                 mov     edx, [ecx]
.text:000039E4                 mov     eax, [ebp+var_4]
.text:000039E7                 mov     ecx, [eax]
.text:000039E9                 mov     edx, [edx]
.text:000039EB                 mov     esi, esp
.text:000039ED                 push    ecx
.text:000039EE                 mov     eax, [edx+8]
.text:000039F1                 call    eax
.text:000039F3                 cmp     esi, esp
.text:000039F5                 call    __RTC_CheckEsp
.text:000039FA
.text:000039FA loc_39FA:                               ; CODE XREF: CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>(void)+15j
.text:000039FA                 pop     esi
.text:000039FB                 add     esp, 4
.text:000039FE                 cmp     ebp, esp
.text:00003A00                 call    __RTC_CheckEsp
.text:00003A05                 mov     esp, ebp
.text:00003A07                 pop     ebp
.text:00003A08                 retn
.text:00003A08 ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ endp
.text:00003A08
.text:00003A08 ; ---------------------------------------------------------------------------
.text:00003A09                 align 4
.text:00003A09 _text           ends
.text:00003A09
.text:00003A0C ; ===========================================================================
.text:00003A0C
.text:00003A0C ; Segment type: Pure code
.text:00003A0C ; Segment permissions: Read/Execute
.text:00003A0C _text           segment para public 'CODE' use32
.text:00003A0C                 assume cs:_text
.text:00003A0C                 ;org 3A0Ch
.text:00003A0C ; COMDAT (pick any)
.text:00003A0C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003A0C
.text:00003A0C ; =============== S U B R O U T I N E =======================================
.text:00003A0C
.text:00003A0C ; Attributes: bp-based frame
.text:00003A0C
.text:00003A0C ; public: struct IUnknown * __thiscall CMyComPtr<struct IUnknown>::operator=(struct IUnknown *)
.text:00003A0C                 public ??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z
.text:00003A0C ??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z proc near
.text:00003A0C                                         ; CODE XREF: CBufInStream::Init(uchar const *,uint,IUnknown *)+3Bp
.text:00003A0C
.text:00003A0C var_4           = dword ptr -4
.text:00003A0C arg_0           = dword ptr  8
.text:00003A0C
.text:00003A0C                 push    ebp
.text:00003A0D                 mov     ebp, esp
.text:00003A0F                 push    ecx
.text:00003A10                 push    esi
.text:00003A11                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003A18                 mov     [ebp+var_4], ecx
.text:00003A1B                 cmp     [ebp+arg_0], 0
.text:00003A1F                 jz      short loc_3A38
.text:00003A21                 mov     eax, [ebp+arg_0]
.text:00003A24                 mov     ecx, [eax]
.text:00003A26                 mov     esi, esp
.text:00003A28                 mov     edx, [ebp+arg_0]
.text:00003A2B                 push    edx
.text:00003A2C                 mov     eax, [ecx+4]
.text:00003A2F                 call    eax
.text:00003A31                 cmp     esi, esp
.text:00003A33                 call    __RTC_CheckEsp
.text:00003A38
.text:00003A38 loc_3A38:                               ; CODE XREF: CMyComPtr<IUnknown>::operator=(IUnknown *)+13j
.text:00003A38                 mov     ecx, [ebp+var_4]
.text:00003A3B                 cmp     dword ptr [ecx], 0
.text:00003A3E                 jz      short loc_3A5B
.text:00003A40                 mov     edx, [ebp+var_4]
.text:00003A43                 mov     eax, [edx]
.text:00003A45                 mov     ecx, [ebp+var_4]
.text:00003A48                 mov     edx, [ecx]
.text:00003A4A                 mov     eax, [eax]
.text:00003A4C                 mov     esi, esp
.text:00003A4E                 push    edx
.text:00003A4F                 mov     ecx, [eax+8]
.text:00003A52                 call    ecx
.text:00003A54                 cmp     esi, esp
.text:00003A56                 call    __RTC_CheckEsp
.text:00003A5B
.text:00003A5B loc_3A5B:                               ; CODE XREF: CMyComPtr<IUnknown>::operator=(IUnknown *)+32j
.text:00003A5B                 mov     edx, [ebp+var_4]
.text:00003A5E                 mov     eax, [ebp+arg_0]
.text:00003A61                 mov     [edx], eax
.text:00003A63                 mov     eax, [ebp+arg_0]
.text:00003A66                 pop     esi
.text:00003A67                 add     esp, 4
.text:00003A6A                 cmp     ebp, esp
.text:00003A6C                 call    __RTC_CheckEsp
.text:00003A71                 mov     esp, ebp
.text:00003A73                 pop     ebp
.text:00003A74                 retn    4
.text:00003A74 ??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z endp
.text:00003A74
.text:00003A74 ; ---------------------------------------------------------------------------
.text:00003A77                 align 4
.text:00003A77 _text           ends
.text:00003A77
.text:00003A78 ; ===========================================================================
.text:00003A78
.text:00003A78 ; Segment type: Pure code
.text:00003A78 ; Segment permissions: Read/Execute
.text:00003A78 _text           segment para public 'CODE' use32
.text:00003A78                 assume cs:_text
.text:00003A78                 ;org 3A78h
.text:00003A78 ; COMDAT (pick any)
.text:00003A78                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003A78
.text:00003A78 ; =============== S U B R O U T I N E =======================================
.text:00003A78
.text:00003A78 ; Attributes: bp-based frame
.text:00003A78
.text:00003A78 ; public: void __thiscall CMyComPtr<struct ISequentialOutStream>::Release(void)
.text:00003A78                 public ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ
.text:00003A78 ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ proc near
.text:00003A78                                         ; CODE XREF: NArchive::N7z::COutArchive::Close(void)+14p
.text:00003A78
.text:00003A78 var_4           = dword ptr -4
.text:00003A78
.text:00003A78                 push    ebp
.text:00003A79                 mov     ebp, esp
.text:00003A7B                 push    ecx
.text:00003A7C                 push    esi
.text:00003A7D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003A84                 mov     [ebp+var_4], ecx
.text:00003A87                 mov     eax, [ebp+var_4]
.text:00003A8A                 cmp     dword ptr [eax], 0
.text:00003A8D                 jz      short loc_3AB3
.text:00003A8F                 mov     ecx, [ebp+var_4]
.text:00003A92                 mov     edx, [ecx]
.text:00003A94                 mov     eax, [ebp+var_4]
.text:00003A97                 mov     ecx, [eax]
.text:00003A99                 mov     edx, [edx]
.text:00003A9B                 mov     esi, esp
.text:00003A9D                 push    ecx
.text:00003A9E                 mov     eax, [edx+8]
.text:00003AA1                 call    eax
.text:00003AA3                 cmp     esi, esp
.text:00003AA5                 call    __RTC_CheckEsp
.text:00003AAA                 mov     ecx, [ebp+var_4]
.text:00003AAD                 mov     dword ptr [ecx], 0
.text:00003AB3
.text:00003AB3 loc_3AB3:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::Release(void)+15j
.text:00003AB3                 pop     esi
.text:00003AB4                 add     esp, 4
.text:00003AB7                 cmp     ebp, esp
.text:00003AB9                 call    __RTC_CheckEsp
.text:00003ABE                 mov     esp, ebp
.text:00003AC0                 pop     ebp
.text:00003AC1                 retn
.text:00003AC1 ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ endp
.text:00003AC1
.text:00003AC1 ; ---------------------------------------------------------------------------
.text:00003AC2                 align 4
.text:00003AC2 _text           ends
.text:00003AC2
.text:00003AC4 ; ===========================================================================
.text:00003AC4
.text:00003AC4 ; Segment type: Pure code
.text:00003AC4 ; Segment permissions: Read/Execute
.text:00003AC4 _text           segment para public 'CODE' use32
.text:00003AC4                 assume cs:_text
.text:00003AC4                 ;org 3AC4h
.text:00003AC4 ; COMDAT (pick any)
.text:00003AC4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003AC4
.text:00003AC4 ; =============== S U B R O U T I N E =======================================
.text:00003AC4
.text:00003AC4 ; Attributes: bp-based frame
.text:00003AC4
.text:00003AC4 ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::operator struct ISequentialOutStream *(void)const
.text:00003AC4                 public ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ
.text:00003AC4 ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ proc near
.text:00003AC4                                         ; CODE XREF: NArchive::N7z::COutArchive::EncodeStream(NArchive::N7z::CEncoder &,CBuffer<uchar> const &,CRecordVector<unsigned __int64> &,CObjectVector<NArchive::N7z::CFolder> &,NArchive::N7z::COutFolders &)+F8p
.text:00003AC4                                         ; NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+DEp ...
.text:00003AC4
.text:00003AC4 var_4           = dword ptr -4
.text:00003AC4
.text:00003AC4                 push    ebp
.text:00003AC5                 mov     ebp, esp
.text:00003AC7                 push    ecx
.text:00003AC8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003ACF                 mov     [ebp+var_4], ecx
.text:00003AD2                 mov     eax, [ebp+var_4]
.text:00003AD5                 mov     eax, [eax]
.text:00003AD7                 mov     esp, ebp
.text:00003AD9                 pop     ebp
.text:00003ADA                 retn
.text:00003ADA ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ endp
.text:00003ADA
.text:00003ADA ; ---------------------------------------------------------------------------
.text:00003ADB                 align 4
.text:00003ADB _text           ends
.text:00003ADB
.text:00003ADC ; ===========================================================================
.text:00003ADC
.text:00003ADC ; Segment type: Pure code
.text:00003ADC ; Segment permissions: Read/Execute
.text:00003ADC _text           segment para public 'CODE' use32
.text:00003ADC                 assume cs:_text
.text:00003ADC                 ;org 3ADCh
.text:00003ADC ; COMDAT (pick any)
.text:00003ADC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003ADC
.text:00003ADC ; =============== S U B R O U T I N E =======================================
.text:00003ADC
.text:00003ADC ; Attributes: bp-based frame
.text:00003ADC
.text:00003ADC ; public: struct ISequentialOutStream * __thiscall CMyComPtr<struct ISequentialOutStream>::operator=(struct ISequentialOutStream *)
.text:00003ADC                 public ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z
.text:00003ADC ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z proc near
.text:00003ADC                                         ; CODE XREF: NArchive::N7z::COutArchive::Create(ISequentialOutStream *,bool)+2Dp
.text:00003ADC
.text:00003ADC var_4           = dword ptr -4
.text:00003ADC arg_0           = dword ptr  8
.text:00003ADC
.text:00003ADC                 push    ebp
.text:00003ADD                 mov     ebp, esp
.text:00003ADF                 push    ecx
.text:00003AE0                 push    esi
.text:00003AE1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003AE8                 mov     [ebp+var_4], ecx
.text:00003AEB                 cmp     [ebp+arg_0], 0
.text:00003AEF                 jz      short loc_3B08
.text:00003AF1                 mov     eax, [ebp+arg_0]
.text:00003AF4                 mov     ecx, [eax]
.text:00003AF6                 mov     esi, esp
.text:00003AF8                 mov     edx, [ebp+arg_0]
.text:00003AFB                 push    edx
.text:00003AFC                 mov     eax, [ecx+4]
.text:00003AFF                 call    eax
.text:00003B01                 cmp     esi, esp
.text:00003B03                 call    __RTC_CheckEsp
.text:00003B08
.text:00003B08 loc_3B08:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::operator=(ISequentialOutStream *)+13j
.text:00003B08                 mov     ecx, [ebp+var_4]
.text:00003B0B                 cmp     dword ptr [ecx], 0
.text:00003B0E                 jz      short loc_3B2B
.text:00003B10                 mov     edx, [ebp+var_4]
.text:00003B13                 mov     eax, [edx]
.text:00003B15                 mov     ecx, [ebp+var_4]
.text:00003B18                 mov     edx, [ecx]
.text:00003B1A                 mov     eax, [eax]
.text:00003B1C                 mov     esi, esp
.text:00003B1E                 push    edx
.text:00003B1F                 mov     ecx, [eax+8]
.text:00003B22                 call    ecx
.text:00003B24                 cmp     esi, esp
.text:00003B26                 call    __RTC_CheckEsp
.text:00003B2B
.text:00003B2B loc_3B2B:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::operator=(ISequentialOutStream *)+32j
.text:00003B2B                 mov     edx, [ebp+var_4]
.text:00003B2E                 mov     eax, [ebp+arg_0]
.text:00003B31                 mov     [edx], eax
.text:00003B33                 mov     eax, [ebp+arg_0]
.text:00003B36                 pop     esi
.text:00003B37                 add     esp, 4
.text:00003B3A                 cmp     ebp, esp
.text:00003B3C                 call    __RTC_CheckEsp
.text:00003B41                 mov     esp, ebp
.text:00003B43                 pop     ebp
.text:00003B44                 retn    4
.text:00003B44 ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z endp
.text:00003B44
.text:00003B44 ; ---------------------------------------------------------------------------
.text:00003B47                 align 4
.text:00003B47 _text           ends
.text:00003B47
.text:00003B48 ; ===========================================================================
.text:00003B48
.text:00003B48 ; Segment type: Pure code
.text:00003B48 ; Segment permissions: Read/Execute
.text:00003B48 _text           segment para public 'CODE' use32
.text:00003B48                 assume cs:_text
.text:00003B48                 ;org 3B48h
.text:00003B48 ; COMDAT (pick any)
.text:00003B48                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003B48
.text:00003B48 ; =============== S U B R O U T I N E =======================================
.text:00003B48
.text:00003B48 ; Attributes: bp-based frame
.text:00003B48
.text:00003B48 ; public: bool __thiscall CObjectVector<struct NArchive::N7z::CMethodFull>::IsEmpty(void)const
.text:00003B48                 public ?IsEmpty@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBE_NXZ
.text:00003B48 ?IsEmpty@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBE_NXZ proc near
.text:00003B48                                         ; CODE XREF: NArchive::N7z::CCompressionMethodMode::IsEmpty(void)+1Ap
.text:00003B48
.text:00003B48 var_4           = dword ptr -4
.text:00003B48
.text:00003B48                 push    ebp
.text:00003B49                 mov     ebp, esp
.text:00003B4B                 push    ecx
.text:00003B4C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003B53                 mov     [ebp+var_4], ecx
.text:00003B56                 mov     ecx, [ebp+var_4]
.text:00003B59                 call    ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ ; CRecordVector<void *>::IsEmpty(void)
.text:00003B5E                 add     esp, 4
.text:00003B61                 cmp     ebp, esp
.text:00003B63                 call    __RTC_CheckEsp
.text:00003B68                 mov     esp, ebp
.text:00003B6A                 pop     ebp
.text:00003B6B                 retn
.text:00003B6B ?IsEmpty@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBE_NXZ endp
.text:00003B6B
.text:00003B6B _text           ends
.text:00003B6B
.text:00003B6C ; ===========================================================================
.text:00003B6C
.text:00003B6C ; Segment type: Pure code
.text:00003B6C ; Segment permissions: Read/Execute
.text:00003B6C _text           segment para public 'CODE' use32
.text:00003B6C                 assume cs:_text
.text:00003B6C                 ;org 3B6Ch
.text:00003B6C ; COMDAT (pick any)
.text:00003B6C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003B6C
.text:00003B6C ; =============== S U B R O U T I N E =======================================
.text:00003B6C
.text:00003B6C ; Attributes: bp-based frame
.text:00003B6C
.text:00003B6C ; public: __thiscall CObjectVector<struct NArchive::N7z::CMethodFull>::CObjectVector<struct NArchive::N7z::CMethodFull>(void)
.text:00003B6C                 public ??0?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ
.text:00003B6C ??0?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ proc near
.text:00003B6C                                         ; CODE XREF: NArchive::N7z::CCompressionMethodMode::CCompressionMethodMode(void)+30p
.text:00003B6C
.text:00003B6C var_4           = dword ptr -4
.text:00003B6C
.text:00003B6C                 push    ebp
.text:00003B6D                 mov     ebp, esp
.text:00003B6F                 push    ecx
.text:00003B70                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003B77                 mov     [ebp+var_4], ecx
.text:00003B7A                 mov     ecx, [ebp+var_4]
.text:00003B7D                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:00003B82                 mov     eax, [ebp+var_4]
.text:00003B85                 add     esp, 4
.text:00003B88                 cmp     ebp, esp
.text:00003B8A                 call    __RTC_CheckEsp
.text:00003B8F                 mov     esp, ebp
.text:00003B91                 pop     ebp
.text:00003B92                 retn
.text:00003B92 ??0?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ endp
.text:00003B92
.text:00003B92 ; ---------------------------------------------------------------------------
.text:00003B93                 align 4
.text:00003B93 _text           ends
.text:00003B93
.text:00003B94 ; ===========================================================================
.text:00003B94
.text:00003B94 ; Segment type: Pure code
.text:00003B94 ; Segment permissions: Read/Execute
.text:00003B94 _text           segment para public 'CODE' use32
.text:00003B94                 assume cs:_text
.text:00003B94                 ;org 3B94h
.text:00003B94 ; COMDAT (pick any)
.text:00003B94                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003B94
.text:00003B94 ; =============== S U B R O U T I N E =======================================
.text:00003B94
.text:00003B94 ; Attributes: bp-based frame
.text:00003B94
.text:00003B94 ; public: __thiscall CObjectVector<struct NArchive::N7z::CMethodFull>::~CObjectVector<struct NArchive::N7z::CMethodFull>(void)
.text:00003B94                 public ??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ
.text:00003B94 ??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ proc near
.text:00003B94                                         ; CODE XREF: __unwindfunclet$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ$0+3j
.text:00003B94                                         ; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(void)+58p ...
.text:00003B94
.text:00003B94 var_20          = dword ptr -20h
.text:00003B94 var_1C          = dword ptr -1Ch
.text:00003B94 var_18          = dword ptr -18h
.text:00003B94 var_14          = dword ptr -14h
.text:00003B94 var_10          = dword ptr -10h
.text:00003B94 var_C           = dword ptr -0Ch
.text:00003B94 var_4           = dword ptr -4
.text:00003B94
.text:00003B94                 push    ebp
.text:00003B95                 mov     ebp, esp
.text:00003B97                 push    0FFFFFFFFh
.text:00003B99                 push    offset __ehhandler$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ
.text:00003B9E                 mov     eax, large fs:0
.text:00003BA4                 push    eax
.text:00003BA5                 sub     esp, 14h
.text:00003BA8                 mov     eax, 0CCCCCCCCh
.text:00003BAD                 mov     [ebp+var_20], eax
.text:00003BB0                 mov     [ebp+var_1C], eax
.text:00003BB3                 mov     [ebp+var_18], eax
.text:00003BB6                 mov     [ebp+var_14], eax
.text:00003BB9                 mov     [ebp+var_10], eax
.text:00003BBC                 mov     eax, dword ptr ds:___security_cookie
.text:00003BC1                 xor     eax, ebp
.text:00003BC3                 push    eax
.text:00003BC4                 lea     eax, [ebp+var_C]
.text:00003BC7                 mov     large fs:0, eax
.text:00003BCD                 mov     [ebp+var_10], ecx
.text:00003BD0                 mov     [ebp+var_4], 0
.text:00003BD7                 mov     ecx, [ebp+var_10]
.text:00003BDA                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00003BDF                 mov     [ebp+var_14], eax
.text:00003BE2
.text:00003BE2 loc_3BE2:                               ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>(void):loc_3C24j
.text:00003BE2                 cmp     [ebp+var_14], 0
.text:00003BE6                 jz      short loc_3C26
.text:00003BE8                 mov     eax, [ebp+var_14]
.text:00003BEB                 sub     eax, 1
.text:00003BEE                 mov     [ebp+var_14], eax
.text:00003BF1                 mov     ecx, [ebp+var_14]
.text:00003BF4                 push    ecx
.text:00003BF5                 mov     ecx, [ebp+var_10]
.text:00003BF8                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00003BFD                 mov     edx, [eax]
.text:00003BFF                 mov     [ebp+var_1C], edx
.text:00003C02                 mov     eax, [ebp+var_1C]
.text:00003C05                 mov     [ebp+var_18], eax
.text:00003C08                 cmp     [ebp+var_18], 0
.text:00003C0C                 jz      short loc_3C1D
.text:00003C0E                 push    1
.text:00003C10                 mov     ecx, [ebp+var_18]
.text:00003C13                 call    ??_GCMethodFull@N7z@NArchive@@QAEPAXI@Z ; NArchive::N7z::CMethodFull::`scalar deleting destructor'(uint)
.text:00003C18                 mov     [ebp+var_20], eax
.text:00003C1B                 jmp     short loc_3C24
.text:00003C1D ; ---------------------------------------------------------------------------
.text:00003C1D
.text:00003C1D loc_3C1D:                               ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>(void)+78j
.text:00003C1D                 mov     [ebp+var_20], 0
.text:00003C24
.text:00003C24 loc_3C24:                               ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>(void)+87j
.text:00003C24                 jmp     short loc_3BE2
.text:00003C26 ; ---------------------------------------------------------------------------
.text:00003C26
.text:00003C26 loc_3C26:                               ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>(void)+52j
.text:00003C26                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003C2D                 mov     ecx, [ebp+var_10]
.text:00003C30                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00003C35                 mov     ecx, [ebp+var_C]
.text:00003C38                 mov     large fs:0, ecx
.text:00003C3F                 pop     ecx
.text:00003C40                 add     esp, 20h
.text:00003C43                 cmp     ebp, esp
.text:00003C45                 call    __RTC_CheckEsp
.text:00003C4A                 mov     esp, ebp
.text:00003C4C                 pop     ebp
.text:00003C4D                 retn
.text:00003C4D ??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ endp
.text:00003C4D
.text:00003C4D ; ---------------------------------------------------------------------------
.text:00003C4E                 align 10h
.text:00003C4E _text           ends
.text:00003C4E
.text$x:00003C50 ; ===========================================================================
.text$x:00003C50
.text$x:00003C50 ; Segment type: Pure code
.text$x:00003C50 ; Segment permissions: Read/Execute
.text$x:00003C50 _text$x         segment para public 'CODE' use32
.text$x:00003C50                 assume cs:_text$x
.text$x:00003C50                 ;org 3C50h
.text$x:00003C50 ; COMDAT (pick associative to section at 3B94)
.text$x:00003C50                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00003C50
.text$x:00003C50 ; =============== S U B R O U T I N E =======================================
.text$x:00003C50
.text$x:00003C50
.text$x:00003C50 __unwindfunclet$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ$0 proc near
.text$x:00003C50                                         ; DATA XREF: .xdata$x:00003C78o
.text$x:00003C50                 mov     ecx, [ebp-10h]
.text$x:00003C53                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:00003C53 __unwindfunclet$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ$0 endp
.text$x:00003C53
.text$x:00003C58
.text$x:00003C58 ; =============== S U B R O U T I N E =======================================
.text$x:00003C58
.text$x:00003C58
.text$x:00003C58 __ehhandler$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ proc near
.text$x:00003C58                                         ; DATA XREF: CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>(void)+5o
.text$x:00003C58
.text$x:00003C58 arg_4           = dword ptr  8
.text$x:00003C58
.text$x:00003C58                 mov     edx, [esp+arg_4]
.text$x:00003C5C                 lea     eax, [edx+0Ch]
.text$x:00003C5F                 mov     ecx, [edx-18h]
.text$x:00003C62                 xor     ecx, eax
.text$x:00003C64                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003C69                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ
.text$x:00003C6E                 jmp     ___CxxFrameHandler3
.text$x:00003C6E __ehhandler$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ endp
.text$x:00003C6E
.text$x:00003C6E ; ---------------------------------------------------------------------------
.text$x:00003C73                 align 4
.text$x:00003C73 _text$x         ends
.text$x:00003C73
.xdata$x:00003C74 ; ===========================================================================
.xdata$x:00003C74
.xdata$x:00003C74 ; Segment type: Pure data
.xdata$x:00003C74 ; Segment permissions: Read
.xdata$x:00003C74 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00003C74                 assume cs:_xdata$x
.xdata$x:00003C74                 ;org 3C74h
.xdata$x:00003C74 ; COMDAT (pick associative to section at 3B94)
.xdata$x:00003C74 __unwindtable$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ db 0FFh
.xdata$x:00003C74                                         ; DATA XREF: .xdata$x:00003C84o
.xdata$x:00003C75                 db 0FFh
.xdata$x:00003C76                 db 0FFh
.xdata$x:00003C77                 db 0FFh
.xdata$x:00003C78                 dd offset __unwindfunclet$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ$0
.xdata$x:00003C7C __ehfuncinfo$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ db  22h ; "
.xdata$x:00003C7C                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ+11o
.xdata$x:00003C7D                 db    5
.xdata$x:00003C7E                 db  93h ; ô
.xdata$x:00003C7F                 db  19h
.xdata$x:00003C80                 db    1
.xdata$x:00003C81                 db    0
.xdata$x:00003C82                 db    0
.xdata$x:00003C83                 db    0
.xdata$x:00003C84                 dd offset __unwindtable$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ
.xdata$x:00003C88                 db    0
.xdata$x:00003C89                 db    0
.xdata$x:00003C8A                 db    0
.xdata$x:00003C8B                 db    0
.xdata$x:00003C8C                 db    0
.xdata$x:00003C8D                 db    0
.xdata$x:00003C8E                 db    0
.xdata$x:00003C8F                 db    0
.xdata$x:00003C90                 db    0
.xdata$x:00003C91                 db    0
.xdata$x:00003C92                 db    0
.xdata$x:00003C93                 db    0
.xdata$x:00003C94                 db    0
.xdata$x:00003C95                 db    0
.xdata$x:00003C96                 db    0
.xdata$x:00003C97                 db    0
.xdata$x:00003C98                 db    0
.xdata$x:00003C99                 db    0
.xdata$x:00003C9A                 db    0
.xdata$x:00003C9B                 db    0
.xdata$x:00003C9C                 db    1
.xdata$x:00003C9D                 db    0
.xdata$x:00003C9E                 db    0
.xdata$x:00003C9F                 db    0
.xdata$x:00003C9F _xdata$x        ends
.xdata$x:00003C9F
.text:00003CA0 ; ===========================================================================
.text:00003CA0
.text:00003CA0 ; Segment type: Pure code
.text:00003CA0 ; Segment permissions: Read/Execute
.text:00003CA0 _text           segment para public 'CODE' use32
.text:00003CA0                 assume cs:_text
.text:00003CA0                 ;org 3CA0h
.text:00003CA0 ; COMDAT (pick any)
.text:00003CA0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003CA0
.text:00003CA0 ; =============== S U B R O U T I N E =======================================
.text:00003CA0
.text:00003CA0 ; Attributes: bp-based frame
.text:00003CA0
.text:00003CA0 ; public: __thiscall CRecordVector<struct NArchive::N7z::CBond2>::CRecordVector<struct NArchive::N7z::CBond2>(void)
.text:00003CA0                 public ??0?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ
.text:00003CA0 ??0?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ proc near
.text:00003CA0                                         ; CODE XREF: NArchive::N7z::CCompressionMethodMode::CCompressionMethodMode(void)+42p
.text:00003CA0
.text:00003CA0 var_4           = dword ptr -4
.text:00003CA0
.text:00003CA0                 push    ebp
.text:00003CA1                 mov     ebp, esp
.text:00003CA3                 push    ecx
.text:00003CA4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003CAB                 mov     [ebp+var_4], ecx
.text:00003CAE                 mov     eax, [ebp+var_4]
.text:00003CB1                 mov     dword ptr [eax], 0
.text:00003CB7                 mov     ecx, [ebp+var_4]
.text:00003CBA                 mov     dword ptr [ecx+4], 0
.text:00003CC1                 mov     edx, [ebp+var_4]
.text:00003CC4                 mov     dword ptr [edx+8], 0
.text:00003CCB                 mov     eax, [ebp+var_4]
.text:00003CCE                 mov     esp, ebp
.text:00003CD0                 pop     ebp
.text:00003CD1                 retn
.text:00003CD1 ??0?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ endp
.text:00003CD1
.text:00003CD1 ; ---------------------------------------------------------------------------
.text:00003CD2                 align 4
.text:00003CD2 _text           ends
.text:00003CD2
.text:00003CD4 ; ===========================================================================
.text:00003CD4
.text:00003CD4 ; Segment type: Pure code
.text:00003CD4 ; Segment permissions: Read/Execute
.text:00003CD4 _text           segment para public 'CODE' use32
.text:00003CD4                 assume cs:_text
.text:00003CD4                 ;org 3CD4h
.text:00003CD4 ; COMDAT (pick any)
.text:00003CD4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003CD4
.text:00003CD4 ; =============== S U B R O U T I N E =======================================
.text:00003CD4
.text:00003CD4 ; Attributes: bp-based frame
.text:00003CD4
.text:00003CD4 ; public: __thiscall CRecordVector<struct NArchive::N7z::CBond2>::~CRecordVector<struct NArchive::N7z::CBond2>(void)
.text:00003CD4                 public ??1?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ
.text:00003CD4 ??1?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ proc near
.text:00003CD4                                         ; CODE XREF: __unwindfunclet$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ$1+6j
.text:00003CD4                                         ; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(void)+49p ...
.text:00003CD4
.text:00003CD4 var_8           = dword ptr -8
.text:00003CD4 var_4           = dword ptr -4
.text:00003CD4
.text:00003CD4                 push    ebp
.text:00003CD5                 mov     ebp, esp
.text:00003CD7                 sub     esp, 8
.text:00003CDA                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00003CE1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003CE8                 mov     [ebp+var_4], ecx
.text:00003CEB                 mov     eax, [ebp+var_4]
.text:00003CEE                 mov     ecx, [eax]
.text:00003CF0                 mov     [ebp+var_8], ecx
.text:00003CF3                 mov     edx, [ebp+var_8]
.text:00003CF6                 push    edx             ; void *
.text:00003CF7                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00003CFC                 add     esp, 4
.text:00003CFF                 add     esp, 8
.text:00003D02                 cmp     ebp, esp
.text:00003D04                 call    __RTC_CheckEsp
.text:00003D09                 mov     esp, ebp
.text:00003D0B                 pop     ebp
.text:00003D0C                 retn
.text:00003D0C ??1?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ endp
.text:00003D0C
.text:00003D0C ; ---------------------------------------------------------------------------
.text:00003D0D                 align 10h
.text:00003D0D _text           ends
.text:00003D0D
.text:00003D10 ; ===========================================================================
.text:00003D10
.text:00003D10 ; Segment type: Pure code
.text:00003D10 ; Segment permissions: Read/Execute
.text:00003D10 _text           segment para public 'CODE' use32
.text:00003D10                 assume cs:_text
.text:00003D10                 ;org 3D10h
.text:00003D10 ; COMDAT (pick any)
.text:00003D10                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003D10
.text:00003D10 ; =============== S U B R O U T I N E =======================================
.text:00003D10
.text:00003D10 ; Attributes: bp-based frame
.text:00003D10
.text:00003D10 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::CMyComPtr<struct ISequentialInStream>(struct ISequentialInStream *)
.text:00003D10                 public ??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z
.text:00003D10 ??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z proc near
.text:00003D10                                         ; CODE XREF: NArchive::N7z::COutArchive::EncodeStream(NArchive::N7z::CEncoder &,CBuffer<uchar> const &,CRecordVector<unsigned __int64> &,CObjectVector<NArchive::N7z::CFolder> &,NArchive::N7z::COutFolders &)+83p
.text:00003D10
.text:00003D10 var_4           = dword ptr -4
.text:00003D10 arg_0           = dword ptr  8
.text:00003D10
.text:00003D10                 push    ebp
.text:00003D11                 mov     ebp, esp
.text:00003D13                 push    ecx
.text:00003D14                 push    esi
.text:00003D15                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003D1C                 mov     [ebp+var_4], ecx
.text:00003D1F                 mov     eax, [ebp+var_4]
.text:00003D22                 mov     ecx, [ebp+arg_0]
.text:00003D25                 mov     [eax], ecx
.text:00003D27                 cmp     [ebp+arg_0], 0
.text:00003D2B                 jz      short loc_3D44
.text:00003D2D                 mov     edx, [ebp+arg_0]
.text:00003D30                 mov     eax, [edx]
.text:00003D32                 mov     esi, esp
.text:00003D34                 mov     ecx, [ebp+arg_0]
.text:00003D37                 push    ecx
.text:00003D38                 mov     edx, [eax+4]
.text:00003D3B                 call    edx
.text:00003D3D                 cmp     esi, esp
.text:00003D3F                 call    __RTC_CheckEsp
.text:00003D44
.text:00003D44 loc_3D44:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(ISequentialInStream *)+1Bj
.text:00003D44                 mov     eax, [ebp+var_4]
.text:00003D47                 pop     esi
.text:00003D48                 add     esp, 4
.text:00003D4B                 cmp     ebp, esp
.text:00003D4D                 call    __RTC_CheckEsp
.text:00003D52                 mov     esp, ebp
.text:00003D54                 pop     ebp
.text:00003D55                 retn    4
.text:00003D55 ??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z endp
.text:00003D55
.text:00003D55 _text           ends
.text:00003D55
.text:00003D58 ; ===========================================================================
.text:00003D58
.text:00003D58 ; Segment type: Pure code
.text:00003D58 ; Segment permissions: Read/Execute
.text:00003D58 _text           segment para public 'CODE' use32
.text:00003D58                 assume cs:_text
.text:00003D58                 ;org 3D58h
.text:00003D58 ; COMDAT (pick any)
.text:00003D58                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003D58
.text:00003D58 ; =============== S U B R O U T I N E =======================================
.text:00003D58
.text:00003D58 ; Attributes: bp-based frame
.text:00003D58
.text:00003D58 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::~CMyComPtr<struct ISequentialInStream>(void)
.text:00003D58                 public ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
.text:00003D58 ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ proc near
.text:00003D58                                         ; CODE XREF: NArchive::N7z::COutArchive::EncodeStream(NArchive::N7z::CEncoder &,CBuffer<uchar> const &,CRecordVector<unsigned __int64> &,CObjectVector<NArchive::N7z::CFolder> &,NArchive::N7z::COutFolders &)+140p
.text:00003D58                                         ; NArchive::N7z::COutArchive::EncodeStream(NArchive::N7z::CEncoder &,CBuffer<uchar> const &,CRecordVector<unsigned __int64> &,CObjectVector<NArchive::N7z::CFolder> &,NArchive::N7z::COutFolders &)+15Bp ...
.text:00003D58
.text:00003D58 var_4           = dword ptr -4
.text:00003D58
.text:00003D58                 push    ebp
.text:00003D59                 mov     ebp, esp
.text:00003D5B                 push    ecx
.text:00003D5C                 push    esi
.text:00003D5D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003D64                 mov     [ebp+var_4], ecx
.text:00003D67                 mov     eax, [ebp+var_4]
.text:00003D6A                 cmp     dword ptr [eax], 0
.text:00003D6D                 jz      short loc_3D8A
.text:00003D6F                 mov     ecx, [ebp+var_4]
.text:00003D72                 mov     edx, [ecx]
.text:00003D74                 mov     eax, [ebp+var_4]
.text:00003D77                 mov     ecx, [eax]
.text:00003D79                 mov     edx, [edx]
.text:00003D7B                 mov     esi, esp
.text:00003D7D                 push    ecx
.text:00003D7E                 mov     eax, [edx+8]
.text:00003D81                 call    eax
.text:00003D83                 cmp     esi, esp
.text:00003D85                 call    __RTC_CheckEsp
.text:00003D8A
.text:00003D8A loc_3D8A:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)+15j
.text:00003D8A                 pop     esi
.text:00003D8B                 add     esp, 4
.text:00003D8E                 cmp     ebp, esp
.text:00003D90                 call    __RTC_CheckEsp
.text:00003D95                 mov     esp, ebp
.text:00003D97                 pop     ebp
.text:00003D98                 retn
.text:00003D98 ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ endp
.text:00003D98
.text:00003D98 ; ---------------------------------------------------------------------------
.text:00003D99                 align 4
.text:00003D99 _text           ends
.text:00003D99
.text:00003D9C ; ===========================================================================
.text:00003D9C
.text:00003D9C ; Segment type: Pure code
.text:00003D9C ; Segment permissions: Read/Execute
.text:00003D9C _text           segment para public 'CODE' use32
.text:00003D9C                 assume cs:_text
.text:00003D9C                 ;org 3D9Ch
.text:00003D9C ; COMDAT (pick any)
.text:00003D9C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003D9C
.text:00003D9C ; =============== S U B R O U T I N E =======================================
.text:00003D9C
.text:00003D9C ; Attributes: bp-based frame
.text:00003D9C
.text:00003D9C ; public: __thiscall CMyComPtr<struct ISequentialInStream>::operator struct ISequentialInStream *(void)const
.text:00003D9C                 public ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ
.text:00003D9C ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ proc near
.text:00003D9C                                         ; CODE XREF: NArchive::N7z::COutArchive::EncodeStream(NArchive::N7z::CEncoder &,CBuffer<uchar> const &,CRecordVector<unsigned __int64> &,CObjectVector<NArchive::N7z::CFolder> &,NArchive::N7z::COutFolders &)+119p
.text:00003D9C
.text:00003D9C var_4           = dword ptr -4
.text:00003D9C
.text:00003D9C                 push    ebp
.text:00003D9D                 mov     ebp, esp
.text:00003D9F                 push    ecx
.text:00003DA0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003DA7                 mov     [ebp+var_4], ecx
.text:00003DAA                 mov     eax, [ebp+var_4]
.text:00003DAD                 mov     eax, [eax]
.text:00003DAF                 mov     esp, ebp
.text:00003DB1                 pop     ebp
.text:00003DB2                 retn
.text:00003DB2 ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ endp
.text:00003DB2
.text:00003DB2 ; ---------------------------------------------------------------------------
.text:00003DB3                 align 4
.text:00003DB3 _text           ends
.text:00003DB3
.text:00003DB4 ; ===========================================================================
.text:00003DB4
.text:00003DB4 ; Segment type: Pure code
.text:00003DB4 ; Segment permissions: Read/Execute
.text:00003DB4 _text           segment para public 'CODE' use32
.text:00003DB4                 assume cs:_text
.text:00003DB4                 ;org 3DB4h
.text:00003DB4 ; COMDAT (pick any)
.text:00003DB4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003DB4
.text:00003DB4 ; =============== S U B R O U T I N E =======================================
.text:00003DB4
.text:00003DB4 ; Attributes: bp-based frame
.text:00003DB4
.text:00003DB4 ; public: __thiscall CRecordVector<unsigned int>::CRecordVector<unsigned int>(void)
.text:00003DB4                 public ??0?$CRecordVector@I@@QAE@XZ
.text:00003DB4 ??0?$CRecordVector@I@@QAE@XZ proc near  ; CODE XREF: NArchive::N7z::CUInt32DefVector::CUInt32DefVector(void)+42p
.text:00003DB4                                         ; NArchive::N7z::COutFolders::COutFolders(void)+42p
.text:00003DB4
.text:00003DB4 var_4           = dword ptr -4
.text:00003DB4
.text:00003DB4                 push    ebp
.text:00003DB5                 mov     ebp, esp
.text:00003DB7                 push    ecx
.text:00003DB8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003DBF                 mov     [ebp+var_4], ecx
.text:00003DC2                 mov     eax, [ebp+var_4]
.text:00003DC5                 mov     dword ptr [eax], 0
.text:00003DCB                 mov     ecx, [ebp+var_4]
.text:00003DCE                 mov     dword ptr [ecx+4], 0
.text:00003DD5                 mov     edx, [ebp+var_4]
.text:00003DD8                 mov     dword ptr [edx+8], 0
.text:00003DDF                 mov     eax, [ebp+var_4]
.text:00003DE2                 mov     esp, ebp
.text:00003DE4                 pop     ebp
.text:00003DE5                 retn
.text:00003DE5 ??0?$CRecordVector@I@@QAE@XZ endp
.text:00003DE5
.text:00003DE5 ; ---------------------------------------------------------------------------
.text:00003DE6                 align 4
.text:00003DE6 _text           ends
.text:00003DE6
.text:00003DE8 ; ===========================================================================
.text:00003DE8
.text:00003DE8 ; Segment type: Pure code
.text:00003DE8 ; Segment permissions: Read/Execute
.text:00003DE8 _text           segment para public 'CODE' use32
.text:00003DE8                 assume cs:_text
.text:00003DE8                 ;org 3DE8h
.text:00003DE8 ; COMDAT (pick any)
.text:00003DE8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003DE8
.text:00003DE8 ; =============== S U B R O U T I N E =======================================
.text:00003DE8
.text:00003DE8 ; Attributes: bp-based frame
.text:00003DE8
.text:00003DE8 ; public: unsigned int __thiscall CRecordVector<unsigned int>::Size(void)const
.text:00003DE8                 public ?Size@?$CRecordVector@I@@QBEIXZ
.text:00003DE8 ?Size@?$CRecordVector@I@@QBEIXZ proc near
.text:00003DE8                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteSubStreamsInfo(CObjectVector<NArchive::N7z::CFolder> const &,NArchive::N7z::COutFolders const &,CRecordVector<unsigned __int64> const &,NArchive::N7z::CUInt32DefVector const &)+62p
.text:00003DE8                                         ; NArchive::N7z::COutArchive::WriteSubStreamsInfo(CObjectVector<NArchive::N7z::CFolder> const &,NArchive::N7z::COutFolders const &,CRecordVector<unsigned __int64> const &,NArchive::N7z::CUInt32DefVector const &)+9Cp ...
.text:00003DE8
.text:00003DE8 var_4           = dword ptr -4
.text:00003DE8
.text:00003DE8                 push    ebp
.text:00003DE9                 mov     ebp, esp
.text:00003DEB                 push    ecx
.text:00003DEC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003DF3                 mov     [ebp+var_4], ecx
.text:00003DF6                 mov     eax, [ebp+var_4]
.text:00003DF9                 mov     eax, [eax+4]
.text:00003DFC                 mov     esp, ebp
.text:00003DFE                 pop     ebp
.text:00003DFF                 retn
.text:00003DFF ?Size@?$CRecordVector@I@@QBEIXZ endp
.text:00003DFF
.text:00003DFF _text           ends
.text:00003DFF
.text:00003E00 ; ===========================================================================
.text:00003E00
.text:00003E00 ; Segment type: Pure code
.text:00003E00 ; Segment permissions: Read/Execute
.text:00003E00 _text           segment para public 'CODE' use32
.text:00003E00                 assume cs:_text
.text:00003E00                 ;org 3E00h
.text:00003E00 ; COMDAT (pick any)
.text:00003E00                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003E00
.text:00003E00 ; =============== S U B R O U T I N E =======================================
.text:00003E00
.text:00003E00 ; Attributes: bp-based frame
.text:00003E00
.text:00003E00 ; public: bool __thiscall CRecordVector<unsigned int>::IsEmpty(void)const
.text:00003E00                 public ?IsEmpty@?$CRecordVector@I@@QBE_NXZ
.text:00003E00 ?IsEmpty@?$CRecordVector@I@@QBE_NXZ proc near
.text:00003E00                                         ; CODE XREF: NArchive::N7z::CArchiveDatabaseOut::IsEmpty(void)+2Fp
.text:00003E00
.text:00003E00 var_4           = dword ptr -4
.text:00003E00
.text:00003E00                 push    ebp
.text:00003E01                 mov     ebp, esp
.text:00003E03                 push    ecx
.text:00003E04                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003E0B                 mov     [ebp+var_4], ecx
.text:00003E0E                 mov     eax, [ebp+var_4]
.text:00003E11                 xor     ecx, ecx
.text:00003E13                 cmp     dword ptr [eax+4], 0
.text:00003E17                 setz    cl
.text:00003E1A                 mov     al, cl
.text:00003E1C                 mov     esp, ebp
.text:00003E1E                 pop     ebp
.text:00003E1F                 retn
.text:00003E1F ?IsEmpty@?$CRecordVector@I@@QBE_NXZ endp
.text:00003E1F
.text:00003E1F _text           ends
.text:00003E1F
.text:00003E20 ; ===========================================================================
.text:00003E20
.text:00003E20 ; Segment type: Pure code
.text:00003E20 ; Segment permissions: Read/Execute
.text:00003E20 _text           segment para public 'CODE' use32
.text:00003E20                 assume cs:_text
.text:00003E20                 ;org 3E20h
.text:00003E20 ; COMDAT (pick any)
.text:00003E20                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003E20
.text:00003E20 ; =============== S U B R O U T I N E =======================================
.text:00003E20
.text:00003E20 ; Attributes: bp-based frame
.text:00003E20
.text:00003E20 ; public: __thiscall CRecordVector<unsigned int>::~CRecordVector<unsigned int>(void)
.text:00003E20                 public ??1?$CRecordVector@I@@QAE@XZ
.text:00003E20 ??1?$CRecordVector@I@@QAE@XZ proc near  ; CODE XREF: NArchive::N7z::CUInt32DefVector::~CUInt32DefVector(void)+3Ap
.text:00003E20                                         ; __unwindfunclet$??0COutFolders@N7z@NArchive@@QAE@XZ$1+6j ...
.text:00003E20
.text:00003E20 var_8           = dword ptr -8
.text:00003E20 var_4           = dword ptr -4
.text:00003E20
.text:00003E20                 push    ebp
.text:00003E21                 mov     ebp, esp
.text:00003E23                 sub     esp, 8
.text:00003E26                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00003E2D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003E34                 mov     [ebp+var_4], ecx
.text:00003E37                 mov     eax, [ebp+var_4]
.text:00003E3A                 mov     ecx, [eax]
.text:00003E3C                 mov     [ebp+var_8], ecx
.text:00003E3F                 mov     edx, [ebp+var_8]
.text:00003E42                 push    edx             ; void *
.text:00003E43                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00003E48                 add     esp, 4
.text:00003E4B                 add     esp, 8
.text:00003E4E                 cmp     ebp, esp
.text:00003E50                 call    __RTC_CheckEsp
.text:00003E55                 mov     esp, ebp
.text:00003E57                 pop     ebp
.text:00003E58                 retn
.text:00003E58 ??1?$CRecordVector@I@@QAE@XZ endp
.text:00003E58
.text:00003E58 ; ---------------------------------------------------------------------------
.text:00003E59                 align 4
.text:00003E59 _text           ends
.text:00003E59
.text:00003E5C ; ===========================================================================
.text:00003E5C
.text:00003E5C ; Segment type: Pure code
.text:00003E5C ; Segment permissions: Read/Execute
.text:00003E5C _text           segment para public 'CODE' use32
.text:00003E5C                 assume cs:_text
.text:00003E5C                 ;org 3E5Ch
.text:00003E5C ; COMDAT (pick any)
.text:00003E5C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003E5C
.text:00003E5C ; =============== S U B R O U T I N E =======================================
.text:00003E5C
.text:00003E5C ; Attributes: bp-based frame
.text:00003E5C
.text:00003E5C ; public: unsigned int __thiscall CRecordVector<unsigned int>::Add(unsigned int)
.text:00003E5C                 public ?Add@?$CRecordVector@I@@QAEII@Z
.text:00003E5C ?Add@?$CRecordVector@I@@QAEII@Z proc near
.text:00003E5C                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteSubStreamsInfo(CObjectVector<NArchive::N7z::CFolder> const &,NArchive::N7z::COutFolders const &,CRecordVector<unsigned __int64> const &,NArchive::N7z::CUInt32DefVector const &)+251p
.text:00003E5C                                         ; NArchive::N7z::COutArchive::EncodeStream(NArchive::N7z::CEncoder &,CBuffer<uchar> const &,CRecordVector<unsigned __int64> &,CObjectVector<NArchive::N7z::CFolder> &,NArchive::N7z::COutFolders &)+D7p ...
.text:00003E5C
.text:00003E5C var_8           = dword ptr -8
.text:00003E5C var_4           = dword ptr -4
.text:00003E5C arg_0           = dword ptr  8
.text:00003E5C
.text:00003E5C                 push    ebp
.text:00003E5D                 mov     ebp, esp
.text:00003E5F                 sub     esp, 8
.text:00003E62                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00003E69                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003E70                 mov     [ebp+var_4], ecx
.text:00003E73                 mov     ecx, [ebp+var_4]
.text:00003E76                 call    ?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ ; CRecordVector<uint>::ReserveOnePosition(void)
.text:00003E7B                 mov     eax, [ebp+var_4]
.text:00003E7E                 mov     ecx, [eax+4]
.text:00003E81                 mov     edx, [ebp+var_4]
.text:00003E84                 mov     eax, [edx]
.text:00003E86                 mov     edx, [ebp+arg_0]
.text:00003E89                 mov     [eax+ecx*4], edx
.text:00003E8C                 mov     eax, [ebp+var_4]
.text:00003E8F                 mov     ecx, [eax+4]
.text:00003E92                 mov     [ebp+var_8], ecx
.text:00003E95                 mov     edx, [ebp+var_4]
.text:00003E98                 mov     eax, [edx+4]
.text:00003E9B                 add     eax, 1
.text:00003E9E                 mov     ecx, [ebp+var_4]
.text:00003EA1                 mov     [ecx+4], eax
.text:00003EA4                 mov     eax, [ebp+var_8]
.text:00003EA7                 add     esp, 8
.text:00003EAA                 cmp     ebp, esp
.text:00003EAC                 call    __RTC_CheckEsp
.text:00003EB1                 mov     esp, ebp
.text:00003EB3                 pop     ebp
.text:00003EB4                 retn    4
.text:00003EB4 ?Add@?$CRecordVector@I@@QAEII@Z endp
.text:00003EB4
.text:00003EB4 ; ---------------------------------------------------------------------------
.text:00003EB7                 align 4
.text:00003EB7 _text           ends
.text:00003EB7
.text:00003EB8 ; ===========================================================================
.text:00003EB8
.text:00003EB8 ; Segment type: Pure code
.text:00003EB8 ; Segment permissions: Read/Execute
.text:00003EB8 _text           segment para public 'CODE' use32
.text:00003EB8                 assume cs:_text
.text:00003EB8                 ;org 3EB8h
.text:00003EB8 ; COMDAT (pick any)
.text:00003EB8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003EB8
.text:00003EB8 ; =============== S U B R O U T I N E =======================================
.text:00003EB8
.text:00003EB8 ; Attributes: bp-based frame
.text:00003EB8
.text:00003EB8 ; public: unsigned int const & __thiscall CRecordVector<unsigned int>::operator[](unsigned int)const
.text:00003EB8                 public ??A?$CRecordVector@I@@QBEABII@Z
.text:00003EB8 ??A?$CRecordVector@I@@QBEABII@Z proc near
.text:00003EB8                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteHashDigests(NArchive::N7z::CUInt32DefVector const &)+E2p
.text:00003EB8                                         ; NArchive::N7z::COutArchive::WriteSubStreamsInfo(CObjectVector<NArchive::N7z::CFolder> const &,NArchive::N7z::COutFolders const &,CRecordVector<unsigned __int64> const &,NArchive::N7z::CUInt32DefVector const &)+73p ...
.text:00003EB8
.text:00003EB8 var_4           = dword ptr -4
.text:00003EB8 arg_0           = dword ptr  8
.text:00003EB8
.text:00003EB8                 push    ebp
.text:00003EB9                 mov     ebp, esp
.text:00003EBB                 push    ecx
.text:00003EBC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003EC3                 mov     [ebp+var_4], ecx
.text:00003EC6                 mov     eax, [ebp+var_4]
.text:00003EC9                 mov     ecx, [eax]
.text:00003ECB                 mov     edx, [ebp+arg_0]
.text:00003ECE                 lea     eax, [ecx+edx*4]
.text:00003ED1                 mov     esp, ebp
.text:00003ED3                 pop     ebp
.text:00003ED4                 retn    4
.text:00003ED4 ??A?$CRecordVector@I@@QBEABII@Z endp
.text:00003ED4
.text:00003ED4 ; ---------------------------------------------------------------------------
.text:00003ED7                 align 4
.text:00003ED7 _text           ends
.text:00003ED7
.text:00003ED8 ; ===========================================================================
.text:00003ED8
.text:00003ED8 ; Segment type: Pure code
.text:00003ED8 ; Segment permissions: Read/Execute
.text:00003ED8 _text           segment para public 'CODE' use32
.text:00003ED8                 assume cs:_text
.text:00003ED8                 ;org 3ED8h
.text:00003ED8 ; COMDAT (pick any)
.text:00003ED8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003ED8
.text:00003ED8 ; =============== S U B R O U T I N E =======================================
.text:00003ED8
.text:00003ED8 ; Attributes: bp-based frame
.text:00003ED8
.text:00003ED8 ; public: __thiscall CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>(void)
.text:00003ED8                 public ??0?$CRecordVector@_K@@QAE@XZ
.text:00003ED8 ??0?$CRecordVector@_K@@QAE@XZ proc near ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+FFp
.text:00003ED8                                         ; NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+22Ap ...
.text:00003ED8
.text:00003ED8 var_4           = dword ptr -4
.text:00003ED8
.text:00003ED8                 push    ebp
.text:00003ED9                 mov     ebp, esp
.text:00003EDB                 push    ecx
.text:00003EDC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003EE3                 mov     [ebp+var_4], ecx
.text:00003EE6                 mov     eax, [ebp+var_4]
.text:00003EE9                 mov     dword ptr [eax], 0
.text:00003EEF                 mov     ecx, [ebp+var_4]
.text:00003EF2                 mov     dword ptr [ecx+4], 0
.text:00003EF9                 mov     edx, [ebp+var_4]
.text:00003EFC                 mov     dword ptr [edx+8], 0
.text:00003F03                 mov     eax, [ebp+var_4]
.text:00003F06                 mov     esp, ebp
.text:00003F08                 pop     ebp
.text:00003F09                 retn
.text:00003F09 ??0?$CRecordVector@_K@@QAE@XZ endp
.text:00003F09
.text:00003F09 ; ---------------------------------------------------------------------------
.text:00003F0A                 align 4
.text:00003F0A _text           ends
.text:00003F0A
.text:00003F0C ; ===========================================================================
.text:00003F0C
.text:00003F0C ; Segment type: Pure code
.text:00003F0C ; Segment permissions: Read/Execute
.text:00003F0C _text           segment para public 'CODE' use32
.text:00003F0C                 assume cs:_text
.text:00003F0C                 ;org 3F0Ch
.text:00003F0C ; COMDAT (pick any)
.text:00003F0C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003F0C
.text:00003F0C ; =============== S U B R O U T I N E =======================================
.text:00003F0C
.text:00003F0C ; Attributes: bp-based frame
.text:00003F0C
.text:00003F0C ; public: unsigned int __thiscall CRecordVector<unsigned __int64>::Size(void)const
.text:00003F0C                 public ?Size@?$CRecordVector@_K@@QBEIXZ
.text:00003F0C ?Size@?$CRecordVector@_K@@QBEIXZ proc near
.text:00003F0C                                         ; CODE XREF: NArchive::N7z::COutArchive::WritePackInfo(unsigned __int64,CRecordVector<unsigned __int64> const &,NArchive::N7z::CUInt32DefVector const &)+48p
.text:00003F0C                                         ; NArchive::N7z::COutArchive::WritePackInfo(unsigned __int64,CRecordVector<unsigned __int64> const &,NArchive::N7z::CUInt32DefVector const &)+78p ...
.text:00003F0C
.text:00003F0C var_4           = dword ptr -4
.text:00003F0C
.text:00003F0C                 push    ebp
.text:00003F0D                 mov     ebp, esp
.text:00003F0F                 push    ecx
.text:00003F10                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003F17                 mov     [ebp+var_4], ecx
.text:00003F1A                 mov     eax, [ebp+var_4]
.text:00003F1D                 mov     eax, [eax+4]
.text:00003F20                 mov     esp, ebp
.text:00003F22                 pop     ebp
.text:00003F23                 retn
.text:00003F23 ?Size@?$CRecordVector@_K@@QBEIXZ endp
.text:00003F23
.text:00003F23 _text           ends
.text:00003F23
.text:00003F24 ; ===========================================================================
.text:00003F24
.text:00003F24 ; Segment type: Pure code
.text:00003F24 ; Segment permissions: Read/Execute
.text:00003F24 _text           segment para public 'CODE' use32
.text:00003F24                 assume cs:_text
.text:00003F24                 ;org 3F24h
.text:00003F24 ; COMDAT (pick any)
.text:00003F24                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003F24
.text:00003F24 ; =============== S U B R O U T I N E =======================================
.text:00003F24
.text:00003F24 ; Attributes: bp-based frame
.text:00003F24
.text:00003F24 ; public: bool __thiscall CRecordVector<unsigned __int64>::IsEmpty(void)const
.text:00003F24                 public ?IsEmpty@?$CRecordVector@_K@@QBE_NXZ
.text:00003F24 ?IsEmpty@?$CRecordVector@_K@@QBE_NXZ proc near
.text:00003F24                                         ; CODE XREF: NArchive::N7z::COutArchive::WritePackInfo(unsigned __int64,CRecordVector<unsigned __int64> const &,NArchive::N7z::CUInt32DefVector const &)+1Ap
.text:00003F24                                         ; NArchive::N7z::CArchiveDatabaseOut::IsEmpty(void)+1Dp
.text:00003F24
.text:00003F24 var_4           = dword ptr -4
.text:00003F24
.text:00003F24                 push    ebp
.text:00003F25                 mov     ebp, esp
.text:00003F27                 push    ecx
.text:00003F28                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003F2F                 mov     [ebp+var_4], ecx
.text:00003F32                 mov     eax, [ebp+var_4]
.text:00003F35                 xor     ecx, ecx
.text:00003F37                 cmp     dword ptr [eax+4], 0
.text:00003F3B                 setz    cl
.text:00003F3E                 mov     al, cl
.text:00003F40                 mov     esp, ebp
.text:00003F42                 pop     ebp
.text:00003F43                 retn
.text:00003F43 ?IsEmpty@?$CRecordVector@_K@@QBE_NXZ endp
.text:00003F43
.text:00003F43 _text           ends
.text:00003F43
.text:00003F44 ; ===========================================================================
.text:00003F44
.text:00003F44 ; Segment type: Pure code
.text:00003F44 ; Segment permissions: Read/Execute
.text:00003F44 _text           segment para public 'CODE' use32
.text:00003F44                 assume cs:_text
.text:00003F44                 ;org 3F44h
.text:00003F44 ; COMDAT (pick any)
.text:00003F44                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003F44
.text:00003F44 ; =============== S U B R O U T I N E =======================================
.text:00003F44
.text:00003F44 ; Attributes: bp-based frame
.text:00003F44
.text:00003F44 ; public: __thiscall CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text:00003F44                 public ??1?$CRecordVector@_K@@QAE@XZ
.text:00003F44 ??1?$CRecordVector@_K@@QAE@XZ proc near ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+1C6p
.text:00003F44                                         ; NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+2BCp ...
.text:00003F44
.text:00003F44 var_8           = dword ptr -8
.text:00003F44 var_4           = dword ptr -4
.text:00003F44
.text:00003F44                 push    ebp
.text:00003F45                 mov     ebp, esp
.text:00003F47                 sub     esp, 8
.text:00003F4A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00003F51                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003F58                 mov     [ebp+var_4], ecx
.text:00003F5B                 mov     eax, [ebp+var_4]
.text:00003F5E                 mov     ecx, [eax]
.text:00003F60                 mov     [ebp+var_8], ecx
.text:00003F63                 mov     edx, [ebp+var_8]
.text:00003F66                 push    edx             ; void *
.text:00003F67                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00003F6C                 add     esp, 4
.text:00003F6F                 add     esp, 8
.text:00003F72                 cmp     ebp, esp
.text:00003F74                 call    __RTC_CheckEsp
.text:00003F79                 mov     esp, ebp
.text:00003F7B                 pop     ebp
.text:00003F7C                 retn
.text:00003F7C ??1?$CRecordVector@_K@@QAE@XZ endp
.text:00003F7C
.text:00003F7C ; ---------------------------------------------------------------------------
.text:00003F7D                 align 10h
.text:00003F7D _text           ends
.text:00003F7D
.text:00003F80 ; ===========================================================================
.text:00003F80
.text:00003F80 ; Segment type: Pure code
.text:00003F80 ; Segment permissions: Read/Execute
.text:00003F80 _text           segment para public 'CODE' use32
.text:00003F80                 assume cs:_text
.text:00003F80                 ;org 3F80h
.text:00003F80 ; COMDAT (pick any)
.text:00003F80                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003F80
.text:00003F80 ; =============== S U B R O U T I N E =======================================
.text:00003F80
.text:00003F80 ; Attributes: bp-based frame
.text:00003F80
.text:00003F80 ; public: unsigned int __thiscall CRecordVector<unsigned __int64>::Add(unsigned __int64)
.text:00003F80                 public ?Add@?$CRecordVector@_K@@QAEI_K@Z
.text:00003F80 ?Add@?$CRecordVector@_K@@QAEI_K@Z proc near
.text:00003F80                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+165p
.text:00003F80                                         ; NArchive::N7z::CUInt64DefVector::SetItem(uint,bool,unsigned __int64)+5Cp
.text:00003F80
.text:00003F80 var_8           = dword ptr -8
.text:00003F80 var_4           = dword ptr -4
.text:00003F80 arg_0           = dword ptr  8
.text:00003F80 arg_4           = dword ptr  0Ch
.text:00003F80
.text:00003F80                 push    ebp
.text:00003F81                 mov     ebp, esp
.text:00003F83                 sub     esp, 8
.text:00003F86                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00003F8D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003F94                 mov     [ebp+var_4], ecx
.text:00003F97                 mov     ecx, [ebp+var_4]
.text:00003F9A                 call    ?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ ; CRecordVector<unsigned __int64>::ReserveOnePosition(void)
.text:00003F9F                 mov     eax, [ebp+var_4]
.text:00003FA2                 mov     ecx, [eax+4]
.text:00003FA5                 mov     edx, [ebp+var_4]
.text:00003FA8                 mov     eax, [edx]
.text:00003FAA                 mov     edx, [ebp+arg_0]
.text:00003FAD                 mov     [eax+ecx*8], edx
.text:00003FB0                 mov     edx, [ebp+arg_4]
.text:00003FB3                 mov     [eax+ecx*8+4], edx
.text:00003FB7                 mov     eax, [ebp+var_4]
.text:00003FBA                 mov     ecx, [eax+4]
.text:00003FBD                 mov     [ebp+var_8], ecx
.text:00003FC0                 mov     edx, [ebp+var_4]
.text:00003FC3                 mov     eax, [edx+4]
.text:00003FC6                 add     eax, 1
.text:00003FC9                 mov     ecx, [ebp+var_4]
.text:00003FCC                 mov     [ecx+4], eax
.text:00003FCF                 mov     eax, [ebp+var_8]
.text:00003FD2                 add     esp, 8
.text:00003FD5                 cmp     ebp, esp
.text:00003FD7                 call    __RTC_CheckEsp
.text:00003FDC                 mov     esp, ebp
.text:00003FDE                 pop     ebp
.text:00003FDF                 retn    8
.text:00003FDF ?Add@?$CRecordVector@_K@@QAEI_K@Z endp
.text:00003FDF
.text:00003FDF ; ---------------------------------------------------------------------------
.text:00003FE2                 align 4
.text:00003FE2 _text           ends
.text:00003FE2
.text:00003FE4 ; ===========================================================================
.text:00003FE4
.text:00003FE4 ; Segment type: Pure code
.text:00003FE4 ; Segment permissions: Read/Execute
.text:00003FE4 _text           segment para public 'CODE' use32
.text:00003FE4                 assume cs:_text
.text:00003FE4                 ;org 3FE4h
.text:00003FE4 ; COMDAT (pick any)
.text:00003FE4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003FE4
.text:00003FE4 ; =============== S U B R O U T I N E =======================================
.text:00003FE4
.text:00003FE4 ; Attributes: bp-based frame
.text:00003FE4
.text:00003FE4 ; public: unsigned __int64 const & __thiscall CRecordVector<unsigned __int64>::operator[](unsigned int)const
.text:00003FE4                 public ??A?$CRecordVector@_K@@QBEAB_KI@Z
.text:00003FE4 ??A?$CRecordVector@_K@@QBEAB_KI@Z proc near
.text:00003FE4                                         ; CODE XREF: NArchive::N7z::COutArchive::WritePackInfo(unsigned __int64,CRecordVector<unsigned __int64> const &,NArchive::N7z::CUInt32DefVector const &)+89p
.text:00003FE4                                         ; NArchive::N7z::COutArchive::WriteUnpackInfo(CObjectVector<NArchive::N7z::CFolder> const &,NArchive::N7z::COutFolders const &)+D0p ...
.text:00003FE4
.text:00003FE4 var_4           = dword ptr -4
.text:00003FE4 arg_0           = dword ptr  8
.text:00003FE4
.text:00003FE4                 push    ebp
.text:00003FE5                 mov     ebp, esp
.text:00003FE7                 push    ecx
.text:00003FE8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003FEF                 mov     [ebp+var_4], ecx
.text:00003FF2                 mov     eax, [ebp+var_4]
.text:00003FF5                 mov     ecx, [eax]
.text:00003FF7                 mov     edx, [ebp+arg_0]
.text:00003FFA                 lea     eax, [ecx+edx*8]
.text:00003FFD                 mov     esp, ebp
.text:00003FFF                 pop     ebp
.text:00004000                 retn    4
.text:00004000 ??A?$CRecordVector@_K@@QBEAB_KI@Z endp
.text:00004000
.text:00004000 ; ---------------------------------------------------------------------------
.text:00004003                 align 4
.text:00004003 _text           ends
.text:00004003
.text:00004004 ; ===========================================================================
.text:00004004
.text:00004004 ; Segment type: Pure code
.text:00004004 ; Segment permissions: Read/Execute
.text:00004004 _text           segment para public 'CODE' use32
.text:00004004                 assume cs:_text
.text:00004004                 ;org 4004h
.text:00004004 ; COMDAT (pick any)
.text:00004004                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004004
.text:00004004 ; =============== S U B R O U T I N E =======================================
.text:00004004
.text:00004004 ; Attributes: bp-based frame
.text:00004004
.text:00004004 ; public: unsigned __int64 & __thiscall CRecordVector<unsigned __int64>::operator[](unsigned int)
.text:00004004                 public ??A?$CRecordVector@_K@@QAEAA_KI@Z
.text:00004004 ??A?$CRecordVector@_K@@QAEAA_KI@Z proc near
.text:00004004                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+3DCp
.text:00004004                                         ; NArchive::N7z::CUInt64DefVector::SetItem(uint,bool,unsigned __int64)+6Dp
.text:00004004
.text:00004004 var_4           = dword ptr -4
.text:00004004 arg_0           = dword ptr  8
.text:00004004
.text:00004004                 push    ebp
.text:00004005                 mov     ebp, esp
.text:00004007                 push    ecx
.text:00004008                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000400F                 mov     [ebp+var_4], ecx
.text:00004012                 mov     eax, [ebp+var_4]
.text:00004015                 mov     ecx, [eax]
.text:00004017                 mov     edx, [ebp+arg_0]
.text:0000401A                 lea     eax, [ecx+edx*8]
.text:0000401D                 mov     esp, ebp
.text:0000401F                 pop     ebp
.text:00004020                 retn    4
.text:00004020 ??A?$CRecordVector@_K@@QAEAA_KI@Z endp
.text:00004020
.text:00004020 ; ---------------------------------------------------------------------------
.text:00004023                 align 4
.text:00004023 _text           ends
.text:00004023
.text:00004024 ; ===========================================================================
.text:00004024
.text:00004024 ; Segment type: Pure code
.text:00004024 ; Segment permissions: Read/Execute
.text:00004024 _text           segment para public 'CODE' use32
.text:00004024                 assume cs:_text
.text:00004024                 ;org 4024h
.text:00004024 ; COMDAT (pick any)
.text:00004024                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004024
.text:00004024 ; =============== S U B R O U T I N E =======================================
.text:00004024
.text:00004024 ; Attributes: bp-based frame
.text:00004024
.text:00004024 ; public: __thiscall CRecordVector<bool>::CRecordVector<bool>(void)
.text:00004024                 public ??0?$CRecordVector@_N@@QAE@XZ
.text:00004024 ??0?$CRecordVector@_N@@QAE@XZ proc near ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+210p
.text:00004024                                         ; NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+2B6p ...
.text:00004024
.text:00004024 var_4           = dword ptr -4
.text:00004024
.text:00004024                 push    ebp
.text:00004025                 mov     ebp, esp
.text:00004027                 push    ecx
.text:00004028                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000402F                 mov     [ebp+var_4], ecx
.text:00004032                 mov     eax, [ebp+var_4]
.text:00004035                 mov     dword ptr [eax], 0
.text:0000403B                 mov     ecx, [ebp+var_4]
.text:0000403E                 mov     dword ptr [ecx+4], 0
.text:00004045                 mov     edx, [ebp+var_4]
.text:00004048                 mov     dword ptr [edx+8], 0
.text:0000404F                 mov     eax, [ebp+var_4]
.text:00004052                 mov     esp, ebp
.text:00004054                 pop     ebp
.text:00004055                 retn
.text:00004055 ??0?$CRecordVector@_N@@QAE@XZ endp
.text:00004055
.text:00004055 ; ---------------------------------------------------------------------------
.text:00004056                 align 4
.text:00004056 _text           ends
.text:00004056
.text:00004058 ; ===========================================================================
.text:00004058
.text:00004058 ; Segment type: Pure code
.text:00004058 ; Segment permissions: Read/Execute
.text:00004058 _text           segment para public 'CODE' use32
.text:00004058                 assume cs:_text
.text:00004058                 ;org 4058h
.text:00004058 ; COMDAT (pick any)
.text:00004058                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004058
.text:00004058 ; =============== S U B R O U T I N E =======================================
.text:00004058
.text:00004058 ; Attributes: bp-based frame
.text:00004058
.text:00004058 ; public: unsigned int __thiscall CRecordVector<bool>::Size(void)const
.text:00004058                 public ?Size@?$CRecordVector@_N@@QBEIXZ
.text:00004058 ?Size@?$CRecordVector@_N@@QBEIXZ proc near
.text:00004058                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteBoolVector(CRecordVector<bool> const &)+3Bp
.text:00004058                                         ; NArchive::N7z::Bv_GetSizeInBytes(CRecordVector<bool> const &)+6p ...
.text:00004058
.text:00004058 var_4           = dword ptr -4
.text:00004058
.text:00004058                 push    ebp
.text:00004059                 mov     ebp, esp
.text:0000405B                 push    ecx
.text:0000405C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004063                 mov     [ebp+var_4], ecx
.text:00004066                 mov     eax, [ebp+var_4]
.text:00004069                 mov     eax, [eax+4]
.text:0000406C                 mov     esp, ebp
.text:0000406E                 pop     ebp
.text:0000406F                 retn
.text:0000406F ?Size@?$CRecordVector@_N@@QBEIXZ endp
.text:0000406F
.text:0000406F _text           ends
.text:0000406F
.text:00004070 ; ===========================================================================
.text:00004070
.text:00004070 ; Segment type: Pure code
.text:00004070 ; Segment permissions: Read/Execute
.text:00004070 _text           segment para public 'CODE' use32
.text:00004070                 assume cs:_text
.text:00004070                 ;org 4070h
.text:00004070 ; COMDAT (pick any)
.text:00004070                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004070
.text:00004070 ; =============== S U B R O U T I N E =======================================
.text:00004070
.text:00004070 ; Attributes: bp-based frame
.text:00004070
.text:00004070 ; public: void __thiscall CRecordVector<bool>::ClearAndSetSize(unsigned int)
.text:00004070                 public ?ClearAndSetSize@?$CRecordVector@_N@@QAEXI@Z
.text:00004070 ?ClearAndSetSize@?$CRecordVector@_N@@QAEXI@Z proc near
.text:00004070                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+22Bp
.text:00004070                                         ; NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+2D5p ...
.text:00004070
.text:00004070 var_4           = dword ptr -4
.text:00004070 arg_0           = dword ptr  8
.text:00004070
.text:00004070                 push    ebp
.text:00004071                 mov     ebp, esp
.text:00004073                 push    ecx
.text:00004074                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000407B                 mov     [ebp+var_4], ecx
.text:0000407E                 mov     eax, [ebp+arg_0]
.text:00004081                 push    eax
.text:00004082                 mov     ecx, [ebp+var_4]
.text:00004085                 call    ?ClearAndReserve@?$CRecordVector@_N@@QAEXI@Z ; CRecordVector<bool>::ClearAndReserve(uint)
.text:0000408A                 mov     ecx, [ebp+var_4]
.text:0000408D                 mov     edx, [ebp+arg_0]
.text:00004090                 mov     [ecx+4], edx
.text:00004093                 add     esp, 4
.text:00004096                 cmp     ebp, esp
.text:00004098                 call    __RTC_CheckEsp
.text:0000409D                 mov     esp, ebp
.text:0000409F                 pop     ebp
.text:000040A0                 retn    4
.text:000040A0 ?ClearAndSetSize@?$CRecordVector@_N@@QAEXI@Z endp
.text:000040A0
.text:000040A0 ; ---------------------------------------------------------------------------
.text:000040A3                 align 4
.text:000040A3 _text           ends
.text:000040A3
.text:000040A4 ; ===========================================================================
.text:000040A4
.text:000040A4 ; Segment type: Pure code
.text:000040A4 ; Segment permissions: Read/Execute
.text:000040A4 _text           segment para public 'CODE' use32
.text:000040A4                 assume cs:_text
.text:000040A4                 ;org 40A4h
.text:000040A4 ; COMDAT (pick any)
.text:000040A4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000040A4
.text:000040A4 ; =============== S U B R O U T I N E =======================================
.text:000040A4
.text:000040A4 ; Attributes: bp-based frame
.text:000040A4
.text:000040A4 ; public: __thiscall CRecordVector<bool>::~CRecordVector<bool>(void)
.text:000040A4                 public ??1?$CRecordVector@_N@@QAE@XZ
.text:000040A4 ??1?$CRecordVector@_N@@QAE@XZ proc near ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+414p
.text:000040A4                                         ; NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+420p ...
.text:000040A4
.text:000040A4 var_8           = dword ptr -8
.text:000040A4 var_4           = dword ptr -4
.text:000040A4
.text:000040A4                 push    ebp
.text:000040A5                 mov     ebp, esp
.text:000040A7                 sub     esp, 8
.text:000040AA                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000040B1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000040B8                 mov     [ebp+var_4], ecx
.text:000040BB                 mov     eax, [ebp+var_4]
.text:000040BE                 mov     ecx, [eax]
.text:000040C0                 mov     [ebp+var_8], ecx
.text:000040C3                 mov     edx, [ebp+var_8]
.text:000040C6                 push    edx             ; void *
.text:000040C7                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000040CC                 add     esp, 4
.text:000040CF                 add     esp, 8
.text:000040D2                 cmp     ebp, esp
.text:000040D4                 call    __RTC_CheckEsp
.text:000040D9                 mov     esp, ebp
.text:000040DB                 pop     ebp
.text:000040DC                 retn
.text:000040DC ??1?$CRecordVector@_N@@QAE@XZ endp
.text:000040DC
.text:000040DC ; ---------------------------------------------------------------------------
.text:000040DD                 align 10h
.text:000040DD _text           ends
.text:000040DD
.text:000040E0 ; ===========================================================================
.text:000040E0
.text:000040E0 ; Segment type: Pure code
.text:000040E0 ; Segment permissions: Read/Execute
.text:000040E0 _text           segment para public 'CODE' use32
.text:000040E0                 assume cs:_text
.text:000040E0                 ;org 40E0h
.text:000040E0 ; COMDAT (pick any)
.text:000040E0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000040E0
.text:000040E0 ; =============== S U B R O U T I N E =======================================
.text:000040E0
.text:000040E0 ; Attributes: bp-based frame
.text:000040E0
.text:000040E0 ; public: unsigned int __thiscall CRecordVector<bool>::Add(bool)
.text:000040E0                 public ?Add@?$CRecordVector@_N@@QAEI_N@Z
.text:000040E0 ?Add@?$CRecordVector@_N@@QAEI_N@Z proc near
.text:000040E0                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteSubStreamsInfo(CObjectVector<NArchive::N7z::CFolder> const &,NArchive::N7z::COutFolders const &,CRecordVector<unsigned __int64> const &,NArchive::N7z::CUInt32DefVector const &)+237p
.text:000040E0                                         ; NArchive::N7z::COutArchive::EncodeStream(NArchive::N7z::CEncoder &,CBuffer<uchar> const &,CRecordVector<unsigned __int64> &,CObjectVector<NArchive::N7z::CFolder> &,NArchive::N7z::COutFolders &)+B0p ...
.text:000040E0
.text:000040E0 var_8           = dword ptr -8
.text:000040E0 var_4           = dword ptr -4
.text:000040E0 arg_0           = byte ptr  8
.text:000040E0
.text:000040E0                 push    ebp
.text:000040E1                 mov     ebp, esp
.text:000040E3                 sub     esp, 8
.text:000040E6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000040ED                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000040F4                 mov     [ebp+var_4], ecx
.text:000040F7                 mov     ecx, [ebp+var_4]
.text:000040FA                 call    ?ReserveOnePosition@?$CRecordVector@_N@@AAEXXZ ; CRecordVector<bool>::ReserveOnePosition(void)
.text:000040FF                 mov     eax, [ebp+var_4]
.text:00004102                 mov     ecx, [eax]
.text:00004104                 mov     edx, [ebp+var_4]
.text:00004107                 mov     eax, [edx+4]
.text:0000410A                 mov     dl, [ebp+arg_0]
.text:0000410D                 mov     [ecx+eax], dl
.text:00004110                 mov     eax, [ebp+var_4]
.text:00004113                 mov     ecx, [eax+4]
.text:00004116                 mov     [ebp+var_8], ecx
.text:00004119                 mov     edx, [ebp+var_4]
.text:0000411C                 mov     eax, [edx+4]
.text:0000411F                 add     eax, 1
.text:00004122                 mov     ecx, [ebp+var_4]
.text:00004125                 mov     [ecx+4], eax
.text:00004128                 mov     eax, [ebp+var_8]
.text:0000412B                 add     esp, 8
.text:0000412E                 cmp     ebp, esp
.text:00004130                 call    __RTC_CheckEsp
.text:00004135                 mov     esp, ebp
.text:00004137                 pop     ebp
.text:00004138                 retn    4
.text:00004138 ?Add@?$CRecordVector@_N@@QAEI_N@Z endp
.text:00004138
.text:00004138 ; ---------------------------------------------------------------------------
.text:0000413B                 align 4
.text:0000413B _text           ends
.text:0000413B
.text:0000413C ; ===========================================================================
.text:0000413C
.text:0000413C ; Segment type: Pure code
.text:0000413C ; Segment permissions: Read/Execute
.text:0000413C _text           segment para public 'CODE' use32
.text:0000413C                 assume cs:_text
.text:0000413C                 ;org 413Ch
.text:0000413C ; COMDAT (pick any)
.text:0000413C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000413C
.text:0000413C ; =============== S U B R O U T I N E =======================================
.text:0000413C
.text:0000413C ; Attributes: bp-based frame
.text:0000413C
.text:0000413C ; public: bool const & __thiscall CRecordVector<bool>::operator[](unsigned int)const
.text:0000413C                 public ??A?$CRecordVector@_N@@QBEAB_NI@Z
.text:0000413C ??A?$CRecordVector@_N@@QBEAB_NI@Z proc near
.text:0000413C                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteBoolVector(CRecordVector<bool> const &)+4Cp
.text:0000413C                                         ; NArchive::N7z::COutArchive::WriteHashDigests(NArchive::N7z::CUInt32DefVector const &)+4Bp ...
.text:0000413C
.text:0000413C var_4           = dword ptr -4
.text:0000413C arg_0           = dword ptr  8
.text:0000413C
.text:0000413C                 push    ebp
.text:0000413D                 mov     ebp, esp
.text:0000413F                 push    ecx
.text:00004140                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004147                 mov     [ebp+var_4], ecx
.text:0000414A                 mov     eax, [ebp+var_4]
.text:0000414D                 mov     eax, [eax]
.text:0000414F                 add     eax, [ebp+arg_0]
.text:00004152                 mov     esp, ebp
.text:00004154                 pop     ebp
.text:00004155                 retn    4
.text:00004155 ??A?$CRecordVector@_N@@QBEAB_NI@Z endp
.text:00004155
.text:00004155 _text           ends
.text:00004155
.text:00004158 ; ===========================================================================
.text:00004158
.text:00004158 ; Segment type: Pure code
.text:00004158 ; Segment permissions: Read/Execute
.text:00004158 _text           segment para public 'CODE' use32
.text:00004158                 assume cs:_text
.text:00004158                 ;org 4158h
.text:00004158 ; COMDAT (pick any)
.text:00004158                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004158
.text:00004158 ; =============== S U B R O U T I N E =======================================
.text:00004158
.text:00004158 ; Attributes: bp-based frame
.text:00004158
.text:00004158 ; public: bool & __thiscall CRecordVector<bool>::operator[](unsigned int)
.text:00004158                 public ??A?$CRecordVector@_N@@QAEAA_NI@Z
.text:00004158 ??A?$CRecordVector@_N@@QAEAA_NI@Z proc near
.text:00004158                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+277p
.text:00004158                                         ; NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+288p ...
.text:00004158
.text:00004158 var_4           = dword ptr -4
.text:00004158 arg_0           = dword ptr  8
.text:00004158
.text:00004158                 push    ebp
.text:00004159                 mov     ebp, esp
.text:0000415B                 push    ecx
.text:0000415C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004163                 mov     [ebp+var_4], ecx
.text:00004166                 mov     eax, [ebp+var_4]
.text:00004169                 mov     eax, [eax]
.text:0000416B                 add     eax, [ebp+arg_0]
.text:0000416E                 mov     esp, ebp
.text:00004170                 pop     ebp
.text:00004171                 retn    4
.text:00004171 ??A?$CRecordVector@_N@@QAEAA_NI@Z endp
.text:00004171
.text:00004171 _text           ends
.text:00004171
.text:00004174 ; ===========================================================================
.text:00004174
.text:00004174 ; Segment type: Pure code
.text:00004174 ; Segment permissions: Read/Execute
.text:00004174 _text           segment para public 'CODE' use32
.text:00004174                 assume cs:_text
.text:00004174                 ;org 4174h
.text:00004174 ; COMDAT (pick any)
.text:00004174                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004174
.text:00004174 ; =============== S U B R O U T I N E =======================================
.text:00004174
.text:00004174 ; Attributes: bp-based frame
.text:00004174
.text:00004174 ; public: __thiscall CObjArray2<struct NArchive::N7z::CCoderInfo>::operator struct NArchive::N7z::CCoderInfo const *(void)const
.text:00004174                 public ??B?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEPBUCCoderInfo@N7z@NArchive@@XZ
.text:00004174 ??B?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEPBUCCoderInfo@N7z@NArchive@@XZ proc near
.text:00004174                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteFolder(NArchive::N7z::CFolder const &)+5Fp
.text:00004174
.text:00004174 var_4           = dword ptr -4
.text:00004174
.text:00004174                 push    ebp
.text:00004175                 mov     ebp, esp
.text:00004177                 push    ecx
.text:00004178                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000417F                 mov     [ebp+var_4], ecx
.text:00004182                 mov     eax, [ebp+var_4]
.text:00004185                 mov     eax, [eax]
.text:00004187                 mov     esp, ebp
.text:00004189                 pop     ebp
.text:0000418A                 retn
.text:0000418A ??B?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEPBUCCoderInfo@N7z@NArchive@@XZ endp
.text:0000418A
.text:0000418A ; ---------------------------------------------------------------------------
.text:0000418B                 align 4
.text:0000418B _text           ends
.text:0000418B
.text:0000418C ; ===========================================================================
.text:0000418C
.text:0000418C ; Segment type: Pure code
.text:0000418C ; Segment permissions: Read/Execute
.text:0000418C _text           segment para public 'CODE' use32
.text:0000418C                 assume cs:_text
.text:0000418C                 ;org 418Ch
.text:0000418C ; COMDAT (pick any)
.text:0000418C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000418C
.text:0000418C ; =============== S U B R O U T I N E =======================================
.text:0000418C
.text:0000418C ; Attributes: bp-based frame
.text:0000418C
.text:0000418C ; public: unsigned int __thiscall CObjArray2<struct NArchive::N7z::CCoderInfo>::Size(void)const
.text:0000418C                 public ?Size@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEIXZ
.text:0000418C ?Size@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEIXZ proc near
.text:0000418C                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteFolder(NArchive::N7z::CFolder const &)+28p
.text:0000418C                                         ; NArchive::N7z::COutArchive::WriteFolder(NArchive::N7z::CFolder const &)+4Ep
.text:0000418C
.text:0000418C var_4           = dword ptr -4
.text:0000418C
.text:0000418C                 push    ebp
.text:0000418D                 mov     ebp, esp
.text:0000418F                 push    ecx
.text:00004190                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004197                 mov     [ebp+var_4], ecx
.text:0000419A                 mov     eax, [ebp+var_4]
.text:0000419D                 mov     eax, [eax+4]
.text:000041A0                 mov     esp, ebp
.text:000041A2                 pop     ebp
.text:000041A3                 retn
.text:000041A3 ?Size@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEIXZ endp
.text:000041A3
.text:000041A3 _text           ends
.text:000041A3
.text:000041A4 ; ===========================================================================
.text:000041A4
.text:000041A4 ; Segment type: Pure code
.text:000041A4 ; Segment permissions: Read/Execute
.text:000041A4 _text           segment para public 'CODE' use32
.text:000041A4                 assume cs:_text
.text:000041A4                 ;org 41A4h
.text:000041A4 ; COMDAT (pick any)
.text:000041A4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000041A4
.text:000041A4 ; =============== S U B R O U T I N E =======================================
.text:000041A4
.text:000041A4 ; Attributes: bp-based frame
.text:000041A4
.text:000041A4 ; public: __thiscall CObjArray2<struct NArchive::N7z::CBond>::operator struct NArchive::N7z::CBond const *(void)const
.text:000041A4                 public ??B?$CObjArray2@UCBond@N7z@NArchive@@@@QBEPBUCBond@N7z@NArchive@@XZ
.text:000041A4 ??B?$CObjArray2@UCBond@N7z@NArchive@@@@QBEPBUCBond@N7z@NArchive@@XZ proc near
.text:000041A4                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteFolder(NArchive::N7z::CFolder const &)+1F1p
.text:000041A4
.text:000041A4 var_4           = dword ptr -4
.text:000041A4
.text:000041A4                 push    ebp
.text:000041A5                 mov     ebp, esp
.text:000041A7                 push    ecx
.text:000041A8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000041AF                 mov     [ebp+var_4], ecx
.text:000041B2                 mov     eax, [ebp+var_4]
.text:000041B5                 mov     eax, [eax]
.text:000041B7                 mov     esp, ebp
.text:000041B9                 pop     ebp
.text:000041BA                 retn
.text:000041BA ??B?$CObjArray2@UCBond@N7z@NArchive@@@@QBEPBUCBond@N7z@NArchive@@XZ endp
.text:000041BA
.text:000041BA ; ---------------------------------------------------------------------------
.text:000041BB                 align 4
.text:000041BB _text           ends
.text:000041BB
.text:000041BC ; ===========================================================================
.text:000041BC
.text:000041BC ; Segment type: Pure code
.text:000041BC ; Segment permissions: Read/Execute
.text:000041BC _text           segment para public 'CODE' use32
.text:000041BC                 assume cs:_text
.text:000041BC                 ;org 41BCh
.text:000041BC ; COMDAT (pick any)
.text:000041BC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000041BC
.text:000041BC ; =============== S U B R O U T I N E =======================================
.text:000041BC
.text:000041BC ; Attributes: bp-based frame
.text:000041BC
.text:000041BC ; public: unsigned int __thiscall CObjArray2<struct NArchive::N7z::CBond>::Size(void)const
.text:000041BC                 public ?Size@?$CObjArray2@UCBond@N7z@NArchive@@@@QBEIXZ
.text:000041BC ?Size@?$CObjArray2@UCBond@N7z@NArchive@@@@QBEIXZ proc near
.text:000041BC                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteFolder(NArchive::N7z::CFolder const &)+1E1p
.text:000041BC
.text:000041BC var_4           = dword ptr -4
.text:000041BC
.text:000041BC                 push    ebp
.text:000041BD                 mov     ebp, esp
.text:000041BF                 push    ecx
.text:000041C0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000041C7                 mov     [ebp+var_4], ecx
.text:000041CA                 mov     eax, [ebp+var_4]
.text:000041CD                 mov     eax, [eax+4]
.text:000041D0                 mov     esp, ebp
.text:000041D2                 pop     ebp
.text:000041D3                 retn
.text:000041D3 ?Size@?$CObjArray2@UCBond@N7z@NArchive@@@@QBEIXZ endp
.text:000041D3
.text:000041D3 _text           ends
.text:000041D3
.text:000041D4 ; ===========================================================================
.text:000041D4
.text:000041D4 ; Segment type: Pure code
.text:000041D4 ; Segment permissions: Read/Execute
.text:000041D4 _text           segment para public 'CODE' use32
.text:000041D4                 assume cs:_text
.text:000041D4                 ;org 41D4h
.text:000041D4 ; COMDAT (pick any)
.text:000041D4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000041D4
.text:000041D4 ; =============== S U B R O U T I N E =======================================
.text:000041D4
.text:000041D4 ; Attributes: bp-based frame
.text:000041D4
.text:000041D4 ; public: __thiscall CObjArray2<unsigned int>::operator unsigned int const *(void)const
.text:000041D4                 public ??B?$CObjArray2@I@@QBEPBIXZ
.text:000041D4 ??B?$CObjArray2@I@@QBEPBIXZ proc near   ; CODE XREF: NArchive::N7z::COutArchive::WriteFolder(NArchive::N7z::CFolder const &)+25Cp
.text:000041D4
.text:000041D4 var_4           = dword ptr -4
.text:000041D4
.text:000041D4                 push    ebp
.text:000041D5                 mov     ebp, esp
.text:000041D7                 push    ecx
.text:000041D8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000041DF                 mov     [ebp+var_4], ecx
.text:000041E2                 mov     eax, [ebp+var_4]
.text:000041E5                 mov     eax, [eax]
.text:000041E7                 mov     esp, ebp
.text:000041E9                 pop     ebp
.text:000041EA                 retn
.text:000041EA ??B?$CObjArray2@I@@QBEPBIXZ endp
.text:000041EA
.text:000041EA ; ---------------------------------------------------------------------------
.text:000041EB                 align 4
.text:000041EB _text           ends
.text:000041EB
.text:000041EC ; ===========================================================================
.text:000041EC
.text:000041EC ; Segment type: Pure code
.text:000041EC ; Segment permissions: Read/Execute
.text:000041EC _text           segment para public 'CODE' use32
.text:000041EC                 assume cs:_text
.text:000041EC                 ;org 41ECh
.text:000041EC ; COMDAT (pick any)
.text:000041EC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000041EC
.text:000041EC ; =============== S U B R O U T I N E =======================================
.text:000041EC
.text:000041EC ; Attributes: bp-based frame
.text:000041EC
.text:000041EC ; public: unsigned int __thiscall CObjArray2<unsigned int>::Size(void)const
.text:000041EC                 public ?Size@?$CObjArray2@I@@QBEIXZ
.text:000041EC ?Size@?$CObjArray2@I@@QBEIXZ proc near  ; CODE XREF: NArchive::N7z::COutArchive::WriteFolder(NArchive::N7z::CFolder const &)+22Ap
.text:000041EC                                         ; NArchive::N7z::COutArchive::WriteFolder(NArchive::N7z::CFolder const &)+24Cp
.text:000041EC
.text:000041EC var_4           = dword ptr -4
.text:000041EC
.text:000041EC                 push    ebp
.text:000041ED                 mov     ebp, esp
.text:000041EF                 push    ecx
.text:000041F0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000041F7                 mov     [ebp+var_4], ecx
.text:000041FA                 mov     eax, [ebp+var_4]
.text:000041FD                 mov     eax, [eax+4]
.text:00004200                 mov     esp, ebp
.text:00004202                 pop     ebp
.text:00004203                 retn
.text:00004203 ?Size@?$CObjArray2@I@@QBEIXZ endp
.text:00004203
.text:00004203 _text           ends
.text:00004203
.text:00004204 ; ===========================================================================
.text:00004204
.text:00004204 ; Segment type: Pure code
.text:00004204 ; Segment permissions: Read/Execute
.text:00004204 _text           segment para public 'CODE' use32
.text:00004204                 assume cs:_text
.text:00004204                 ;org 4204h
.text:00004204 ; COMDAT (pick any)
.text:00004204                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004204
.text:00004204 ; =============== S U B R O U T I N E =======================================
.text:00004204
.text:00004204 ; Attributes: bp-based frame
.text:00004204
.text:00004204 ; public: unsigned int __thiscall CObjectVector<struct NArchive::N7z::CFolder>::Size(void)const
.text:00004204                 public ?Size@?$CObjectVector@UCFolder@N7z@NArchive@@@@QBEIXZ
.text:00004204 ?Size@?$CObjectVector@UCFolder@N7z@NArchive@@@@QBEIXZ proc near
.text:00004204                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteUnpackInfo(CObjectVector<NArchive::N7z::CFolder> const &,NArchive::N7z::COutFolders const &)+49p
.text:00004204                                         ; NArchive::N7z::COutArchive::WriteUnpackInfo(CObjectVector<NArchive::N7z::CFolder> const &,NArchive::N7z::COutFolders const &)+79p ...
.text:00004204
.text:00004204 var_4           = dword ptr -4
.text:00004204
.text:00004204                 push    ebp
.text:00004205                 mov     ebp, esp
.text:00004207                 push    ecx
.text:00004208                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000420F                 mov     [ebp+var_4], ecx
.text:00004212                 mov     ecx, [ebp+var_4]
.text:00004215                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:0000421A                 add     esp, 4
.text:0000421D                 cmp     ebp, esp
.text:0000421F                 call    __RTC_CheckEsp
.text:00004224                 mov     esp, ebp
.text:00004226                 pop     ebp
.text:00004227                 retn
.text:00004227 ?Size@?$CObjectVector@UCFolder@N7z@NArchive@@@@QBEIXZ endp
.text:00004227
.text:00004227 _text           ends
.text:00004227
.text:00004228 ; ===========================================================================
.text:00004228
.text:00004228 ; Segment type: Pure code
.text:00004228 ; Segment permissions: Read/Execute
.text:00004228 _text           segment para public 'CODE' use32
.text:00004228                 assume cs:_text
.text:00004228                 ;org 4228h
.text:00004228 ; COMDAT (pick any)
.text:00004228                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004228
.text:00004228 ; =============== S U B R O U T I N E =======================================
.text:00004228
.text:00004228 ; Attributes: bp-based frame
.text:00004228
.text:00004228 ; public: bool __thiscall CObjectVector<struct NArchive::N7z::CFolder>::IsEmpty(void)const
.text:00004228                 public ?IsEmpty@?$CObjectVector@UCFolder@N7z@NArchive@@@@QBE_NXZ
.text:00004228 ?IsEmpty@?$CObjectVector@UCFolder@N7z@NArchive@@@@QBE_NXZ proc near
.text:00004228                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteUnpackInfo(CObjectVector<NArchive::N7z::CFolder> const &,NArchive::N7z::COutFolders const &)+21p
.text:00004228                                         ; NArchive::N7z::CArchiveDatabaseOut::IsEmpty(void)+41p
.text:00004228
.text:00004228 var_4           = dword ptr -4
.text:00004228
.text:00004228                 push    ebp
.text:00004229                 mov     ebp, esp
.text:0000422B                 push    ecx
.text:0000422C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004233                 mov     [ebp+var_4], ecx
.text:00004236                 mov     ecx, [ebp+var_4]
.text:00004239                 call    ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ ; CRecordVector<void *>::IsEmpty(void)
.text:0000423E                 add     esp, 4
.text:00004241                 cmp     ebp, esp
.text:00004243                 call    __RTC_CheckEsp
.text:00004248                 mov     esp, ebp
.text:0000424A                 pop     ebp
.text:0000424B                 retn
.text:0000424B ?IsEmpty@?$CObjectVector@UCFolder@N7z@NArchive@@@@QBE_NXZ endp
.text:0000424B
.text:0000424B _text           ends
.text:0000424B
.text:0000424C ; ===========================================================================
.text:0000424C
.text:0000424C ; Segment type: Pure code
.text:0000424C ; Segment permissions: Read/Execute
.text:0000424C _text           segment para public 'CODE' use32
.text:0000424C                 assume cs:_text
.text:0000424C                 ;org 424Ch
.text:0000424C ; COMDAT (pick any)
.text:0000424C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000424C
.text:0000424C ; =============== S U B R O U T I N E =======================================
.text:0000424C
.text:0000424C ; Attributes: bp-based frame
.text:0000424C
.text:0000424C ; public: __thiscall CObjectVector<struct NArchive::N7z::CFolder>::CObjectVector<struct NArchive::N7z::CFolder>(void)
.text:0000424C                 public ??0?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ
.text:0000424C ??0?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ proc near
.text:0000424C                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+239p
.text:0000424C
.text:0000424C var_4           = dword ptr -4
.text:0000424C
.text:0000424C                 push    ebp
.text:0000424D                 mov     ebp, esp
.text:0000424F                 push    ecx
.text:00004250                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004257                 mov     [ebp+var_4], ecx
.text:0000425A                 mov     ecx, [ebp+var_4]
.text:0000425D                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:00004262                 mov     eax, [ebp+var_4]
.text:00004265                 add     esp, 4
.text:00004268                 cmp     ebp, esp
.text:0000426A                 call    __RTC_CheckEsp
.text:0000426F                 mov     esp, ebp
.text:00004271                 pop     ebp
.text:00004272                 retn
.text:00004272 ??0?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ endp
.text:00004272
.text:00004272 ; ---------------------------------------------------------------------------
.text:00004273                 align 4
.text:00004273 _text           ends
.text:00004273
.text:00004274 ; ===========================================================================
.text:00004274
.text:00004274 ; Segment type: Pure code
.text:00004274 ; Segment permissions: Read/Execute
.text:00004274 _text           segment para public 'CODE' use32
.text:00004274                 assume cs:_text
.text:00004274                 ;org 4274h
.text:00004274 ; COMDAT (pick any)
.text:00004274                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004274
.text:00004274 ; =============== S U B R O U T I N E =======================================
.text:00004274
.text:00004274 ; Attributes: bp-based frame
.text:00004274
.text:00004274 ; public: struct NArchive::N7z::CFolder const & __thiscall CObjectVector<struct NArchive::N7z::CFolder>::operator[](unsigned int)const
.text:00004274                 public ??A?$CObjectVector@UCFolder@N7z@NArchive@@@@QBEABUCFolder@N7z@NArchive@@I@Z
.text:00004274 ??A?$CObjectVector@UCFolder@N7z@NArchive@@@@QBEABUCFolder@N7z@NArchive@@I@Z proc near
.text:00004274                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteUnpackInfo(CObjectVector<NArchive::N7z::CFolder> const &,NArchive::N7z::COutFolders const &)+8Ap
.text:00004274
.text:00004274 var_4           = dword ptr -4
.text:00004274 arg_0           = dword ptr  8
.text:00004274
.text:00004274                 push    ebp
.text:00004275                 mov     ebp, esp
.text:00004277                 push    ecx
.text:00004278                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000427F                 mov     [ebp+var_4], ecx
.text:00004282                 mov     eax, [ebp+arg_0]
.text:00004285                 push    eax
.text:00004286                 mov     ecx, [ebp+var_4]
.text:00004289                 call    ??A?$CRecordVector@PAX@@QBEABQAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:0000428E                 mov     eax, [eax]
.text:00004290                 add     esp, 4
.text:00004293                 cmp     ebp, esp
.text:00004295                 call    __RTC_CheckEsp
.text:0000429A                 mov     esp, ebp
.text:0000429C                 pop     ebp
.text:0000429D                 retn    4
.text:0000429D ??A?$CObjectVector@UCFolder@N7z@NArchive@@@@QBEABUCFolder@N7z@NArchive@@I@Z endp
.text:0000429D
.text:0000429D _text           ends
.text:0000429D
.text:000042A0 ; ===========================================================================
.text:000042A0
.text:000042A0 ; Segment type: Pure code
.text:000042A0 ; Segment permissions: Read/Execute
.text:000042A0 _text           segment para public 'CODE' use32
.text:000042A0                 assume cs:_text
.text:000042A0                 ;org 42A0h
.text:000042A0 ; COMDAT (pick any)
.text:000042A0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000042A0
.text:000042A0 ; =============== S U B R O U T I N E =======================================
.text:000042A0
.text:000042A0 ; Attributes: bp-based frame
.text:000042A0
.text:000042A0 ; public: struct NArchive::N7z::CFolder & __thiscall CObjectVector<struct NArchive::N7z::CFolder>::AddNew(void)
.text:000042A0                 public ?AddNew@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEAAUCFolder@N7z@NArchive@@XZ
.text:000042A0 ?AddNew@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEAAUCFolder@N7z@NArchive@@XZ proc near
.text:000042A0                                         ; CODE XREF: NArchive::N7z::COutArchive::EncodeStream(NArchive::N7z::CEncoder &,CBuffer<uchar> const &,CRecordVector<unsigned __int64> &,CObjectVector<NArchive::N7z::CFolder> &,NArchive::N7z::COutFolders &)+10Cp
.text:000042A0
.text:000042A0 var_20          = dword ptr -20h
.text:000042A0 var_1C          = dword ptr -1Ch
.text:000042A0 var_18          = dword ptr -18h
.text:000042A0 var_14          = dword ptr -14h
.text:000042A0 var_10          = dword ptr -10h
.text:000042A0 var_C           = dword ptr -0Ch
.text:000042A0 var_4           = dword ptr -4
.text:000042A0
.text:000042A0                 push    ebp
.text:000042A1                 mov     ebp, esp
.text:000042A3                 push    0FFFFFFFFh
.text:000042A5                 push    offset __ehhandler$?AddNew@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEAAUCFolder@N7z@NArchive@@XZ
.text:000042AA                 mov     eax, large fs:0
.text:000042B0                 push    eax
.text:000042B1                 sub     esp, 14h
.text:000042B4                 mov     eax, 0CCCCCCCCh
.text:000042B9                 mov     [ebp+var_20], eax
.text:000042BC                 mov     [ebp+var_1C], eax
.text:000042BF                 mov     [ebp+var_18], eax
.text:000042C2                 mov     [ebp+var_14], eax
.text:000042C5                 mov     [ebp+var_10], eax
.text:000042C8                 mov     eax, dword ptr ds:___security_cookie
.text:000042CD                 xor     eax, ebp
.text:000042CF                 push    eax
.text:000042D0                 lea     eax, [ebp+var_C]
.text:000042D3                 mov     large fs:0, eax
.text:000042D9                 mov     [ebp+var_10], ecx
.text:000042DC                 push    18h             ; unsigned int
.text:000042DE                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000042E3                 add     esp, 4
.text:000042E6                 mov     [ebp+var_1C], eax
.text:000042E9                 mov     [ebp+var_4], 0
.text:000042F0                 cmp     [ebp+var_1C], 0
.text:000042F4                 jz      short loc_4303
.text:000042F6                 mov     ecx, [ebp+var_1C] ; this
.text:000042F9                 call    ??0CFolder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFolder::CFolder(void)
.text:000042FE                 mov     [ebp+var_20], eax
.text:00004301                 jmp     short loc_430A
.text:00004303 ; ---------------------------------------------------------------------------
.text:00004303
.text:00004303 loc_4303:                               ; CODE XREF: CObjectVector<NArchive::N7z::CFolder>::AddNew(void)+54j
.text:00004303                 mov     [ebp+var_20], 0
.text:0000430A
.text:0000430A loc_430A:                               ; CODE XREF: CObjectVector<NArchive::N7z::CFolder>::AddNew(void)+61j
.text:0000430A                 mov     eax, [ebp+var_20]
.text:0000430D                 mov     [ebp+var_18], eax
.text:00004310                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004317                 mov     ecx, [ebp+var_18]
.text:0000431A                 mov     [ebp+var_14], ecx
.text:0000431D                 mov     edx, [ebp+var_14]
.text:00004320                 push    edx
.text:00004321                 mov     ecx, [ebp+var_10]
.text:00004324                 call    ?Add@?$CRecordVector@PAX@@QAEIQAX@Z ; CRecordVector<void *>::Add(void * const)
.text:00004329                 mov     eax, [ebp+var_14]
.text:0000432C                 mov     ecx, [ebp+var_C]
.text:0000432F                 mov     large fs:0, ecx
.text:00004336                 pop     ecx
.text:00004337                 add     esp, 20h
.text:0000433A                 cmp     ebp, esp
.text:0000433C                 call    __RTC_CheckEsp
.text:00004341                 mov     esp, ebp
.text:00004343                 pop     ebp
.text:00004344                 retn
.text:00004344 ?AddNew@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEAAUCFolder@N7z@NArchive@@XZ endp
.text:00004344
.text:00004344 ; ---------------------------------------------------------------------------
.text:00004345                 align 4
.text:00004345 _text           ends
.text:00004345
.text$x:00004348 ; ===========================================================================
.text$x:00004348
.text$x:00004348 ; Segment type: Pure code
.text$x:00004348 ; Segment permissions: Read/Execute
.text$x:00004348 _text$x         segment para public 'CODE' use32
.text$x:00004348                 assume cs:_text$x
.text$x:00004348                 ;org 4348h
.text$x:00004348 ; COMDAT (pick associative to section at 42A0)
.text$x:00004348                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00004348
.text$x:00004348 ; =============== S U B R O U T I N E =======================================
.text$x:00004348
.text$x:00004348
.text$x:00004348 __unwindfunclet$?AddNew@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEAAUCFolder@N7z@NArchive@@XZ$0 proc near
.text$x:00004348                                         ; DATA XREF: .xdata$x:00004374o
.text$x:00004348                 mov     eax, [ebp-1Ch]
.text$x:0000434B                 push    eax             ; void *
.text$x:0000434C                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00004351                 pop     ecx
.text$x:00004352                 retn
.text$x:00004352 __unwindfunclet$?AddNew@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEAAUCFolder@N7z@NArchive@@XZ$0 endp
.text$x:00004352
.text$x:00004353
.text$x:00004353 ; =============== S U B R O U T I N E =======================================
.text$x:00004353
.text$x:00004353
.text$x:00004353 __ehhandler$?AddNew@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEAAUCFolder@N7z@NArchive@@XZ proc near
.text$x:00004353                                         ; DATA XREF: CObjectVector<NArchive::N7z::CFolder>::AddNew(void)+5o
.text$x:00004353
.text$x:00004353 arg_4           = dword ptr  8
.text$x:00004353
.text$x:00004353                 mov     edx, [esp+arg_4]
.text$x:00004357                 lea     eax, [edx+0Ch]
.text$x:0000435A                 mov     ecx, [edx-18h]
.text$x:0000435D                 xor     ecx, eax
.text$x:0000435F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004364                 mov     eax, offset __ehfuncinfo$?AddNew@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEAAUCFolder@N7z@NArchive@@XZ
.text$x:00004369                 jmp     ___CxxFrameHandler3
.text$x:00004369 __ehhandler$?AddNew@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEAAUCFolder@N7z@NArchive@@XZ endp
.text$x:00004369
.text$x:00004369 ; ---------------------------------------------------------------------------
.text$x:0000436E                 align 10h
.text$x:0000436E _text$x         ends
.text$x:0000436E
.xdata$x:00004370 ; ===========================================================================
.xdata$x:00004370
.xdata$x:00004370 ; Segment type: Pure data
.xdata$x:00004370 ; Segment permissions: Read
.xdata$x:00004370 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004370                 assume cs:_xdata$x
.xdata$x:00004370                 ;org 4370h
.xdata$x:00004370 ; COMDAT (pick associative to section at 42A0)
.xdata$x:00004370 __unwindtable$?AddNew@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEAAUCFolder@N7z@NArchive@@XZ db 0FFh
.xdata$x:00004370                                         ; DATA XREF: .xdata$x:00004380o
.xdata$x:00004371                 db 0FFh
.xdata$x:00004372                 db 0FFh
.xdata$x:00004373                 db 0FFh
.xdata$x:00004374                 dd offset __unwindfunclet$?AddNew@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEAAUCFolder@N7z@NArchive@@XZ$0
.xdata$x:00004378 __ehfuncinfo$?AddNew@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEAAUCFolder@N7z@NArchive@@XZ db  22h ; "
.xdata$x:00004378                                         ; DATA XREF: __ehhandler$?AddNew@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEAAUCFolder@N7z@NArchive@@XZ+11o
.xdata$x:00004379                 db    5
.xdata$x:0000437A                 db  93h ; ô
.xdata$x:0000437B                 db  19h
.xdata$x:0000437C                 db    1
.xdata$x:0000437D                 db    0
.xdata$x:0000437E                 db    0
.xdata$x:0000437F                 db    0
.xdata$x:00004380                 dd offset __unwindtable$?AddNew@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEAAUCFolder@N7z@NArchive@@XZ
.xdata$x:00004384                 db    0
.xdata$x:00004385                 db    0
.xdata$x:00004386                 db    0
.xdata$x:00004387                 db    0
.xdata$x:00004388                 db    0
.xdata$x:00004389                 db    0
.xdata$x:0000438A                 db    0
.xdata$x:0000438B                 db    0
.xdata$x:0000438C                 db    0
.xdata$x:0000438D                 db    0
.xdata$x:0000438E                 db    0
.xdata$x:0000438F                 db    0
.xdata$x:00004390                 db    0
.xdata$x:00004391                 db    0
.xdata$x:00004392                 db    0
.xdata$x:00004393                 db    0
.xdata$x:00004394                 db    0
.xdata$x:00004395                 db    0
.xdata$x:00004396                 db    0
.xdata$x:00004397                 db    0
.xdata$x:00004398                 db    1
.xdata$x:00004399                 db    0
.xdata$x:0000439A                 db    0
.xdata$x:0000439B                 db    0
.xdata$x:0000439B _xdata$x        ends
.xdata$x:0000439B
.text:0000439C ; ===========================================================================
.text:0000439C
.text:0000439C ; Segment type: Pure code
.text:0000439C ; Segment permissions: Read/Execute
.text:0000439C _text           segment para public 'CODE' use32
.text:0000439C                 assume cs:_text
.text:0000439C                 ;org 439Ch
.text:0000439C ; COMDAT (pick any)
.text:0000439C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000439C
.text:0000439C ; =============== S U B R O U T I N E =======================================
.text:0000439C
.text:0000439C ; Attributes: bp-based frame
.text:0000439C
.text:0000439C ; _DWORD __thiscall NArchive::N7z::CFolder::CFolder(NArchive::N7z::CFolder *__hidden this)
.text:0000439C                 public ??0CFolder@N7z@NArchive@@QAE@XZ
.text:0000439C ??0CFolder@N7z@NArchive@@QAE@XZ proc near
.text:0000439C                                         ; CODE XREF: CObjectVector<NArchive::N7z::CFolder>::AddNew(void)+59p
.text:0000439C
.text:0000439C var_10          = dword ptr -10h
.text:0000439C var_C           = dword ptr -0Ch
.text:0000439C var_4           = dword ptr -4
.text:0000439C
.text:0000439C                 push    ebp
.text:0000439D                 mov     ebp, esp
.text:0000439F                 push    0FFFFFFFFh
.text:000043A1                 push    offset __ehhandler$??0CFolder@N7z@NArchive@@QAE@XZ
.text:000043A6                 mov     eax, large fs:0
.text:000043AC                 push    eax
.text:000043AD                 push    ecx
.text:000043AE                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000043B5                 mov     eax, dword ptr ds:___security_cookie
.text:000043BA                 xor     eax, ebp
.text:000043BC                 push    eax
.text:000043BD                 lea     eax, [ebp+var_C]
.text:000043C0                 mov     large fs:0, eax
.text:000043C6                 mov     [ebp+var_10], ecx
.text:000043C9                 mov     ecx, [ebp+var_10]
.text:000043CC                 call    ??0?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CCoderInfo>::CObjArray2<NArchive::N7z::CCoderInfo>(void)
.text:000043D1                 mov     [ebp+var_4], 0
.text:000043D8                 mov     ecx, [ebp+var_10]
.text:000043DB                 add     ecx, 8
.text:000043DE                 call    ??0?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CBond>::CObjArray2<NArchive::N7z::CBond>(void)
.text:000043E3                 mov     byte ptr [ebp+var_4], 1
.text:000043E7                 mov     ecx, [ebp+var_10]
.text:000043EA                 add     ecx, 10h
.text:000043ED                 call    ??0?$CObjArray2@I@@QAE@XZ ; CObjArray2<uint>::CObjArray2<uint>(void)
.text:000043F2                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000043F9                 mov     eax, [ebp+var_10]
.text:000043FC                 mov     ecx, [ebp+var_C]
.text:000043FF                 mov     large fs:0, ecx
.text:00004406                 pop     ecx
.text:00004407                 add     esp, 10h
.text:0000440A                 cmp     ebp, esp
.text:0000440C                 call    __RTC_CheckEsp
.text:00004411                 mov     esp, ebp
.text:00004413                 pop     ebp
.text:00004414                 retn
.text:00004414 ??0CFolder@N7z@NArchive@@QAE@XZ endp
.text:00004414
.text:00004414 ; ---------------------------------------------------------------------------
.text:00004415                 align 4
.text:00004415 _text           ends
.text:00004415
.text$x:00004418 ; ===========================================================================
.text$x:00004418
.text$x:00004418 ; Segment type: Pure code
.text$x:00004418 ; Segment permissions: Read/Execute
.text$x:00004418 _text$x         segment para public 'CODE' use32
.text$x:00004418                 assume cs:_text$x
.text$x:00004418                 ;org 4418h
.text$x:00004418 ; COMDAT (pick associative to section at 439C)
.text$x:00004418                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00004418
.text$x:00004418 ; =============== S U B R O U T I N E =======================================
.text$x:00004418
.text$x:00004418
.text$x:00004418 __unwindfunclet$??0CFolder@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:00004418                                         ; DATA XREF: .xdata$x:0000444Co
.text$x:00004418                 mov     ecx, [ebp-10h]
.text$x:0000441B                 jmp     ??1?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CCoderInfo>::~CObjArray2<NArchive::N7z::CCoderInfo>(void)
.text$x:0000441B __unwindfunclet$??0CFolder@N7z@NArchive@@QAE@XZ$0 endp
.text$x:0000441B
.text$x:00004420
.text$x:00004420 ; =============== S U B R O U T I N E =======================================
.text$x:00004420
.text$x:00004420
.text$x:00004420 __unwindfunclet$??0CFolder@N7z@NArchive@@QAE@XZ$1 proc near
.text$x:00004420                                         ; DATA XREF: .xdata$x:00004454o
.text$x:00004420                 mov     ecx, [ebp-10h]
.text$x:00004423                 add     ecx, 8
.text$x:00004426                 jmp     ??1?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CBond>::~CObjArray2<NArchive::N7z::CBond>(void)
.text$x:00004426 __unwindfunclet$??0CFolder@N7z@NArchive@@QAE@XZ$1 endp
.text$x:00004426
.text$x:0000442B
.text$x:0000442B ; =============== S U B R O U T I N E =======================================
.text$x:0000442B
.text$x:0000442B
.text$x:0000442B __ehhandler$??0CFolder@N7z@NArchive@@QAE@XZ proc near
.text$x:0000442B                                         ; DATA XREF: NArchive::N7z::CFolder::CFolder(void)+5o
.text$x:0000442B
.text$x:0000442B arg_4           = dword ptr  8
.text$x:0000442B
.text$x:0000442B                 mov     edx, [esp+arg_4]
.text$x:0000442F                 lea     eax, [edx+0Ch]
.text$x:00004432                 mov     ecx, [edx-8]
.text$x:00004435                 xor     ecx, eax
.text$x:00004437                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000443C                 mov     eax, offset __ehfuncinfo$??0CFolder@N7z@NArchive@@QAE@XZ
.text$x:00004441                 jmp     ___CxxFrameHandler3
.text$x:00004441 __ehhandler$??0CFolder@N7z@NArchive@@QAE@XZ endp
.text$x:00004441
.text$x:00004441 ; ---------------------------------------------------------------------------
.text$x:00004446                 align 4
.text$x:00004446 _text$x         ends
.text$x:00004446
.xdata$x:00004448 ; ===========================================================================
.xdata$x:00004448
.xdata$x:00004448 ; Segment type: Pure data
.xdata$x:00004448 ; Segment permissions: Read
.xdata$x:00004448 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004448                 assume cs:_xdata$x
.xdata$x:00004448                 ;org 4448h
.xdata$x:00004448 ; COMDAT (pick associative to section at 439C)
.xdata$x:00004448 __unwindtable$??0CFolder@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:00004448                                         ; DATA XREF: .xdata$x:00004460o
.xdata$x:00004449                 db 0FFh
.xdata$x:0000444A                 db 0FFh
.xdata$x:0000444B                 db 0FFh
.xdata$x:0000444C                 dd offset __unwindfunclet$??0CFolder@N7z@NArchive@@QAE@XZ$0
.xdata$x:00004450                 db    0
.xdata$x:00004451                 db    0
.xdata$x:00004452                 db    0
.xdata$x:00004453                 db    0
.xdata$x:00004454                 dd offset __unwindfunclet$??0CFolder@N7z@NArchive@@QAE@XZ$1
.xdata$x:00004458 __ehfuncinfo$??0CFolder@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00004458                                         ; DATA XREF: __ehhandler$??0CFolder@N7z@NArchive@@QAE@XZ+11o
.xdata$x:00004459                 db    5
.xdata$x:0000445A                 db  93h ; ô
.xdata$x:0000445B                 db  19h
.xdata$x:0000445C                 db    2
.xdata$x:0000445D                 db    0
.xdata$x:0000445E                 db    0
.xdata$x:0000445F                 db    0
.xdata$x:00004460                 dd offset __unwindtable$??0CFolder@N7z@NArchive@@QAE@XZ
.xdata$x:00004464                 db    0
.xdata$x:00004465                 db    0
.xdata$x:00004466                 db    0
.xdata$x:00004467                 db    0
.xdata$x:00004468                 db    0
.xdata$x:00004469                 db    0
.xdata$x:0000446A                 db    0
.xdata$x:0000446B                 db    0
.xdata$x:0000446C                 db    0
.xdata$x:0000446D                 db    0
.xdata$x:0000446E                 db    0
.xdata$x:0000446F                 db    0
.xdata$x:00004470                 db    0
.xdata$x:00004471                 db    0
.xdata$x:00004472                 db    0
.xdata$x:00004473                 db    0
.xdata$x:00004474                 db    0
.xdata$x:00004475                 db    0
.xdata$x:00004476                 db    0
.xdata$x:00004477                 db    0
.xdata$x:00004478                 db    1
.xdata$x:00004479                 db    0
.xdata$x:0000447A                 db    0
.xdata$x:0000447B                 db    0
.xdata$x:0000447B _xdata$x        ends
.xdata$x:0000447B
.text:0000447C ; ===========================================================================
.text:0000447C
.text:0000447C ; Segment type: Pure code
.text:0000447C ; Segment permissions: Read/Execute
.text:0000447C _text           segment para public 'CODE' use32
.text:0000447C                 assume cs:_text
.text:0000447C                 ;org 447Ch
.text:0000447C ; COMDAT (pick any)
.text:0000447C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000447C
.text:0000447C ; =============== S U B R O U T I N E =======================================
.text:0000447C
.text:0000447C ; Attributes: bp-based frame
.text:0000447C
.text:0000447C ; public: __thiscall CObjArray2<struct NArchive::N7z::CCoderInfo>::CObjArray2<struct NArchive::N7z::CCoderInfo>(void)
.text:0000447C                 public ??0?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ
.text:0000447C ??0?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ proc near
.text:0000447C                                         ; CODE XREF: NArchive::N7z::CFolder::CFolder(void)+30p
.text:0000447C
.text:0000447C var_4           = dword ptr -4
.text:0000447C
.text:0000447C                 push    ebp
.text:0000447D                 mov     ebp, esp
.text:0000447F                 push    ecx
.text:00004480                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004487                 mov     [ebp+var_4], ecx
.text:0000448A                 mov     eax, [ebp+var_4]
.text:0000448D                 mov     dword ptr [eax], 0
.text:00004493                 mov     ecx, [ebp+var_4]
.text:00004496                 mov     dword ptr [ecx+4], 0
.text:0000449D                 mov     eax, [ebp+var_4]
.text:000044A0                 mov     esp, ebp
.text:000044A2                 pop     ebp
.text:000044A3                 retn
.text:000044A3 ??0?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ endp
.text:000044A3
.text:000044A3 _text           ends
.text:000044A3
.text:000044A4 ; ===========================================================================
.text:000044A4
.text:000044A4 ; Segment type: Pure code
.text:000044A4 ; Segment permissions: Read/Execute
.text:000044A4 _text           segment para public 'CODE' use32
.text:000044A4                 assume cs:_text
.text:000044A4                 ;org 44A4h
.text:000044A4 ; COMDAT (pick any)
.text:000044A4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000044A4
.text:000044A4 ; =============== S U B R O U T I N E =======================================
.text:000044A4
.text:000044A4 ; Attributes: bp-based frame
.text:000044A4
.text:000044A4 ; public: __thiscall CObjArray2<struct NArchive::N7z::CCoderInfo>::~CObjArray2<struct NArchive::N7z::CCoderInfo>(void)
.text:000044A4                 public ??1?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ
.text:000044A4 ??1?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ proc near
.text:000044A4                                         ; CODE XREF: __unwindfunclet$??0CFolder@N7z@NArchive@@QAE@XZ$0+3j
.text:000044A4                                         ; NArchive::N7z::CFolder::~CFolder(void)+58p ...
.text:000044A4
.text:000044A4 var_10          = dword ptr -10h
.text:000044A4 var_C           = dword ptr -0Ch
.text:000044A4 var_8           = dword ptr -8
.text:000044A4 var_4           = dword ptr -4
.text:000044A4
.text:000044A4                 push    ebp
.text:000044A5                 mov     ebp, esp
.text:000044A7                 sub     esp, 10h
.text:000044AA                 mov     eax, 0CCCCCCCCh
.text:000044AF                 mov     [ebp+var_10], eax
.text:000044B2                 mov     [ebp+var_C], eax
.text:000044B5                 mov     [ebp+var_8], eax
.text:000044B8                 mov     [ebp+var_4], eax
.text:000044BB                 mov     [ebp+var_4], ecx
.text:000044BE                 mov     eax, [ebp+var_4]
.text:000044C1                 mov     ecx, [eax]
.text:000044C3                 mov     [ebp+var_C], ecx
.text:000044C6                 mov     edx, [ebp+var_C]
.text:000044C9                 mov     [ebp+var_8], edx
.text:000044CC                 cmp     [ebp+var_8], 0
.text:000044D0                 jz      short loc_44E1
.text:000044D2                 push    3
.text:000044D4                 mov     ecx, [ebp+var_8]
.text:000044D7                 call    ??_ECCoderInfo@N7z@NArchive@@QAEPAXI@Z ; NArchive::N7z::CCoderInfo::`vector deleting destructor'(uint)
.text:000044DC                 mov     [ebp+var_10], eax
.text:000044DF                 jmp     short loc_44E8
.text:000044E1 ; ---------------------------------------------------------------------------
.text:000044E1
.text:000044E1 loc_44E1:                               ; CODE XREF: CObjArray2<NArchive::N7z::CCoderInfo>::~CObjArray2<NArchive::N7z::CCoderInfo>(void)+2Cj
.text:000044E1                 mov     [ebp+var_10], 0
.text:000044E8
.text:000044E8 loc_44E8:                               ; CODE XREF: CObjArray2<NArchive::N7z::CCoderInfo>::~CObjArray2<NArchive::N7z::CCoderInfo>(void)+3Bj
.text:000044E8                 add     esp, 10h
.text:000044EB                 cmp     ebp, esp
.text:000044ED                 call    __RTC_CheckEsp
.text:000044F2                 mov     esp, ebp
.text:000044F4                 pop     ebp
.text:000044F5                 retn
.text:000044F5 ??1?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ endp
.text:000044F5
.text:000044F5 ; ---------------------------------------------------------------------------
.text:000044F6                 align 4
.text:000044F6 _text           ends
.text:000044F6
.text:000044F8 ; ===========================================================================
.text:000044F8
.text:000044F8 ; Segment type: Pure code
.text:000044F8 ; Segment permissions: Read/Execute
.text:000044F8 _text           segment para public 'CODE' use32
.text:000044F8                 assume cs:_text
.text:000044F8                 ;org 44F8h
.text:000044F8 ; COMDAT (pick any)
.text:000044F8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000044F8
.text:000044F8 ; =============== S U B R O U T I N E =======================================
.text:000044F8
.text:000044F8 ; Attributes: bp-based frame
.text:000044F8
.text:000044F8 ; public: __thiscall CObjArray2<struct NArchive::N7z::CBond>::CObjArray2<struct NArchive::N7z::CBond>(void)
.text:000044F8                 public ??0?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ
.text:000044F8 ??0?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ proc near
.text:000044F8                                         ; CODE XREF: NArchive::N7z::CFolder::CFolder(void)+42p
.text:000044F8
.text:000044F8 var_4           = dword ptr -4
.text:000044F8
.text:000044F8                 push    ebp
.text:000044F9                 mov     ebp, esp
.text:000044FB                 push    ecx
.text:000044FC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004503                 mov     [ebp+var_4], ecx
.text:00004506                 mov     eax, [ebp+var_4]
.text:00004509                 mov     dword ptr [eax], 0
.text:0000450F                 mov     ecx, [ebp+var_4]
.text:00004512                 mov     dword ptr [ecx+4], 0
.text:00004519                 mov     eax, [ebp+var_4]
.text:0000451C                 mov     esp, ebp
.text:0000451E                 pop     ebp
.text:0000451F                 retn
.text:0000451F ??0?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ endp
.text:0000451F
.text:0000451F _text           ends
.text:0000451F
.text:00004520 ; ===========================================================================
.text:00004520
.text:00004520 ; Segment type: Pure code
.text:00004520 ; Segment permissions: Read/Execute
.text:00004520 _text           segment para public 'CODE' use32
.text:00004520                 assume cs:_text
.text:00004520                 ;org 4520h
.text:00004520 ; COMDAT (pick any)
.text:00004520                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004520
.text:00004520 ; =============== S U B R O U T I N E =======================================
.text:00004520
.text:00004520 ; Attributes: bp-based frame
.text:00004520
.text:00004520 ; public: __thiscall CObjArray2<struct NArchive::N7z::CBond>::~CObjArray2<struct NArchive::N7z::CBond>(void)
.text:00004520                 public ??1?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ
.text:00004520 ??1?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ proc near
.text:00004520                                         ; CODE XREF: __unwindfunclet$??0CFolder@N7z@NArchive@@QAE@XZ$1+6j
.text:00004520                                         ; NArchive::N7z::CFolder::~CFolder(void)+49p ...
.text:00004520
.text:00004520 var_8           = dword ptr -8
.text:00004520 var_4           = dword ptr -4
.text:00004520
.text:00004520                 push    ebp
.text:00004521                 mov     ebp, esp
.text:00004523                 sub     esp, 8
.text:00004526                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000452D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004534                 mov     [ebp+var_4], ecx
.text:00004537                 mov     eax, [ebp+var_4]
.text:0000453A                 mov     ecx, [eax]
.text:0000453C                 mov     [ebp+var_8], ecx
.text:0000453F                 mov     edx, [ebp+var_8]
.text:00004542                 push    edx             ; void *
.text:00004543                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00004548                 add     esp, 4
.text:0000454B                 add     esp, 8
.text:0000454E                 cmp     ebp, esp
.text:00004550                 call    __RTC_CheckEsp
.text:00004555                 mov     esp, ebp
.text:00004557                 pop     ebp
.text:00004558                 retn
.text:00004558 ??1?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ endp
.text:00004558
.text:00004558 ; ---------------------------------------------------------------------------
.text:00004559                 align 4
.text:00004559 _text           ends
.text:00004559
.text:0000455C ; ===========================================================================
.text:0000455C
.text:0000455C ; Segment type: Pure code
.text:0000455C ; Segment permissions: Read/Execute
.text:0000455C _text           segment para public 'CODE' use32
.text:0000455C                 assume cs:_text
.text:0000455C                 ;org 455Ch
.text:0000455C ; COMDAT (pick any)
.text:0000455C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000455C
.text:0000455C ; =============== S U B R O U T I N E =======================================
.text:0000455C
.text:0000455C ; Attributes: bp-based frame
.text:0000455C
.text:0000455C ; public: __thiscall CObjArray2<unsigned int>::CObjArray2<unsigned int>(void)
.text:0000455C                 public ??0?$CObjArray2@I@@QAE@XZ
.text:0000455C ??0?$CObjArray2@I@@QAE@XZ proc near     ; CODE XREF: NArchive::N7z::CFolder::CFolder(void)+51p
.text:0000455C
.text:0000455C var_4           = dword ptr -4
.text:0000455C
.text:0000455C                 push    ebp
.text:0000455D                 mov     ebp, esp
.text:0000455F                 push    ecx
.text:00004560                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004567                 mov     [ebp+var_4], ecx
.text:0000456A                 mov     eax, [ebp+var_4]
.text:0000456D                 mov     dword ptr [eax], 0
.text:00004573                 mov     ecx, [ebp+var_4]
.text:00004576                 mov     dword ptr [ecx+4], 0
.text:0000457D                 mov     eax, [ebp+var_4]
.text:00004580                 mov     esp, ebp
.text:00004582                 pop     ebp
.text:00004583                 retn
.text:00004583 ??0?$CObjArray2@I@@QAE@XZ endp
.text:00004583
.text:00004583 _text           ends
.text:00004583
.text:00004584 ; ===========================================================================
.text:00004584
.text:00004584 ; Segment type: Pure code
.text:00004584 ; Segment permissions: Read/Execute
.text:00004584 _text           segment para public 'CODE' use32
.text:00004584                 assume cs:_text
.text:00004584                 ;org 4584h
.text:00004584 ; COMDAT (pick any)
.text:00004584                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004584
.text:00004584 ; =============== S U B R O U T I N E =======================================
.text:00004584
.text:00004584 ; Attributes: bp-based frame
.text:00004584
.text:00004584 ; public: __thiscall CObjectVector<struct NArchive::N7z::CFolder>::~CObjectVector<struct NArchive::N7z::CFolder>(void)
.text:00004584                 public ??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ
.text:00004584 ??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ proc near
.text:00004584                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+2ADp
.text:00004584                                         ; NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+40Dp ...
.text:00004584
.text:00004584 var_20          = dword ptr -20h
.text:00004584 var_1C          = dword ptr -1Ch
.text:00004584 var_18          = dword ptr -18h
.text:00004584 var_14          = dword ptr -14h
.text:00004584 var_10          = dword ptr -10h
.text:00004584 var_C           = dword ptr -0Ch
.text:00004584 var_4           = dword ptr -4
.text:00004584
.text:00004584                 push    ebp
.text:00004585                 mov     ebp, esp
.text:00004587                 push    0FFFFFFFFh
.text:00004589                 push    offset __ehhandler$??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ
.text:0000458E                 mov     eax, large fs:0
.text:00004594                 push    eax
.text:00004595                 sub     esp, 14h
.text:00004598                 mov     eax, 0CCCCCCCCh
.text:0000459D                 mov     [ebp+var_20], eax
.text:000045A0                 mov     [ebp+var_1C], eax
.text:000045A3                 mov     [ebp+var_18], eax
.text:000045A6                 mov     [ebp+var_14], eax
.text:000045A9                 mov     [ebp+var_10], eax
.text:000045AC                 mov     eax, dword ptr ds:___security_cookie
.text:000045B1                 xor     eax, ebp
.text:000045B3                 push    eax
.text:000045B4                 lea     eax, [ebp+var_C]
.text:000045B7                 mov     large fs:0, eax
.text:000045BD                 mov     [ebp+var_10], ecx
.text:000045C0                 mov     [ebp+var_4], 0
.text:000045C7                 mov     ecx, [ebp+var_10]
.text:000045CA                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:000045CF                 mov     [ebp+var_14], eax
.text:000045D2
.text:000045D2 loc_45D2:                               ; CODE XREF: CObjectVector<NArchive::N7z::CFolder>::~CObjectVector<NArchive::N7z::CFolder>(void):loc_4614j
.text:000045D2                 cmp     [ebp+var_14], 0
.text:000045D6                 jz      short loc_4616
.text:000045D8                 mov     eax, [ebp+var_14]
.text:000045DB                 sub     eax, 1
.text:000045DE                 mov     [ebp+var_14], eax
.text:000045E1                 mov     ecx, [ebp+var_14]
.text:000045E4                 push    ecx
.text:000045E5                 mov     ecx, [ebp+var_10]
.text:000045E8                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:000045ED                 mov     edx, [eax]
.text:000045EF                 mov     [ebp+var_1C], edx
.text:000045F2                 mov     eax, [ebp+var_1C]
.text:000045F5                 mov     [ebp+var_18], eax
.text:000045F8                 cmp     [ebp+var_18], 0
.text:000045FC                 jz      short loc_460D
.text:000045FE                 push    1
.text:00004600                 mov     ecx, [ebp+var_18]
.text:00004603                 call    ??_GCFolder@N7z@NArchive@@QAEPAXI@Z ; NArchive::N7z::CFolder::`scalar deleting destructor'(uint)
.text:00004608                 mov     [ebp+var_20], eax
.text:0000460B                 jmp     short loc_4614
.text:0000460D ; ---------------------------------------------------------------------------
.text:0000460D
.text:0000460D loc_460D:                               ; CODE XREF: CObjectVector<NArchive::N7z::CFolder>::~CObjectVector<NArchive::N7z::CFolder>(void)+78j
.text:0000460D                 mov     [ebp+var_20], 0
.text:00004614
.text:00004614 loc_4614:                               ; CODE XREF: CObjectVector<NArchive::N7z::CFolder>::~CObjectVector<NArchive::N7z::CFolder>(void)+87j
.text:00004614                 jmp     short loc_45D2
.text:00004616 ; ---------------------------------------------------------------------------
.text:00004616
.text:00004616 loc_4616:                               ; CODE XREF: CObjectVector<NArchive::N7z::CFolder>::~CObjectVector<NArchive::N7z::CFolder>(void)+52j
.text:00004616                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000461D                 mov     ecx, [ebp+var_10]
.text:00004620                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00004625                 mov     ecx, [ebp+var_C]
.text:00004628                 mov     large fs:0, ecx
.text:0000462F                 pop     ecx
.text:00004630                 add     esp, 20h
.text:00004633                 cmp     ebp, esp
.text:00004635                 call    __RTC_CheckEsp
.text:0000463A                 mov     esp, ebp
.text:0000463C                 pop     ebp
.text:0000463D                 retn
.text:0000463D ??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ endp
.text:0000463D
.text:0000463D ; ---------------------------------------------------------------------------
.text:0000463E                 align 10h
.text:0000463E _text           ends
.text:0000463E
.text$x:00004640 ; ===========================================================================
.text$x:00004640
.text$x:00004640 ; Segment type: Pure code
.text$x:00004640 ; Segment permissions: Read/Execute
.text$x:00004640 _text$x         segment para public 'CODE' use32
.text$x:00004640                 assume cs:_text$x
.text$x:00004640                 ;org 4640h
.text$x:00004640 ; COMDAT (pick associative to section at 4584)
.text$x:00004640                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00004640
.text$x:00004640 ; =============== S U B R O U T I N E =======================================
.text$x:00004640
.text$x:00004640
.text$x:00004640 __unwindfunclet$??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ$0 proc near
.text$x:00004640                                         ; DATA XREF: .xdata$x:00004668o
.text$x:00004640                 mov     ecx, [ebp-10h]
.text$x:00004643                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:00004643 __unwindfunclet$??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ$0 endp
.text$x:00004643
.text$x:00004648
.text$x:00004648 ; =============== S U B R O U T I N E =======================================
.text$x:00004648
.text$x:00004648
.text$x:00004648 __ehhandler$??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ proc near
.text$x:00004648                                         ; DATA XREF: CObjectVector<NArchive::N7z::CFolder>::~CObjectVector<NArchive::N7z::CFolder>(void)+5o
.text$x:00004648
.text$x:00004648 arg_4           = dword ptr  8
.text$x:00004648
.text$x:00004648                 mov     edx, [esp+arg_4]
.text$x:0000464C                 lea     eax, [edx+0Ch]
.text$x:0000464F                 mov     ecx, [edx-18h]
.text$x:00004652                 xor     ecx, eax
.text$x:00004654                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004659                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ
.text$x:0000465E                 jmp     ___CxxFrameHandler3
.text$x:0000465E __ehhandler$??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ endp
.text$x:0000465E
.text$x:0000465E ; ---------------------------------------------------------------------------
.text$x:00004663                 align 4
.text$x:00004663 _text$x         ends
.text$x:00004663
.xdata$x:00004664 ; ===========================================================================
.xdata$x:00004664
.xdata$x:00004664 ; Segment type: Pure data
.xdata$x:00004664 ; Segment permissions: Read
.xdata$x:00004664 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004664                 assume cs:_xdata$x
.xdata$x:00004664                 ;org 4664h
.xdata$x:00004664 ; COMDAT (pick associative to section at 4584)
.xdata$x:00004664 __unwindtable$??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ db 0FFh
.xdata$x:00004664                                         ; DATA XREF: .xdata$x:00004674o
.xdata$x:00004665                 db 0FFh
.xdata$x:00004666                 db 0FFh
.xdata$x:00004667                 db 0FFh
.xdata$x:00004668                 dd offset __unwindfunclet$??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ$0
.xdata$x:0000466C __ehfuncinfo$??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ db  22h ; "
.xdata$x:0000466C                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ+11o
.xdata$x:0000466D                 db    5
.xdata$x:0000466E                 db  93h ; ô
.xdata$x:0000466F                 db  19h
.xdata$x:00004670                 db    1
.xdata$x:00004671                 db    0
.xdata$x:00004672                 db    0
.xdata$x:00004673                 db    0
.xdata$x:00004674                 dd offset __unwindtable$??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ
.xdata$x:00004678                 db    0
.xdata$x:00004679                 db    0
.xdata$x:0000467A                 db    0
.xdata$x:0000467B                 db    0
.xdata$x:0000467C                 db    0
.xdata$x:0000467D                 db    0
.xdata$x:0000467E                 db    0
.xdata$x:0000467F                 db    0
.xdata$x:00004680                 db    0
.xdata$x:00004681                 db    0
.xdata$x:00004682                 db    0
.xdata$x:00004683                 db    0
.xdata$x:00004684                 db    0
.xdata$x:00004685                 db    0
.xdata$x:00004686                 db    0
.xdata$x:00004687                 db    0
.xdata$x:00004688                 db    0
.xdata$x:00004689                 db    0
.xdata$x:0000468A                 db    0
.xdata$x:0000468B                 db    0
.xdata$x:0000468C                 db    1
.xdata$x:0000468D                 db    0
.xdata$x:0000468E                 db    0
.xdata$x:0000468F                 db    0
.xdata$x:0000468F _xdata$x        ends
.xdata$x:0000468F
.text:00004690 ; ===========================================================================
.text:00004690
.text:00004690 ; Segment type: Pure code
.text:00004690 ; Segment permissions: Read/Execute
.text:00004690 _text           segment para public 'CODE' use32
.text:00004690                 assume cs:_text
.text:00004690                 ;org 4690h
.text:00004690 ; COMDAT (pick any)
.text:00004690                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004690
.text:00004690 ; =============== S U B R O U T I N E =======================================
.text:00004690
.text:00004690 ; Attributes: bp-based frame
.text:00004690
.text:00004690 ; public: unsigned int __thiscall CRecordVector<struct NArchive::N7z::CFileItem>::Size(void)const
.text:00004690                 public ?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ
.text:00004690 ?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ proc near
.text:00004690                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+12Fp
.text:00004690                                         ; NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+1FCp ...
.text:00004690
.text:00004690 var_4           = dword ptr -4
.text:00004690
.text:00004690                 push    ebp
.text:00004691                 mov     ebp, esp
.text:00004693                 push    ecx
.text:00004694                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000469B                 mov     [ebp+var_4], ecx
.text:0000469E                 mov     eax, [ebp+var_4]
.text:000046A1                 mov     eax, [eax+4]
.text:000046A4                 mov     esp, ebp
.text:000046A6                 pop     ebp
.text:000046A7                 retn
.text:000046A7 ?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ endp
.text:000046A7
.text:000046A7 _text           ends
.text:000046A7
.text:000046A8 ; ===========================================================================
.text:000046A8
.text:000046A8 ; Segment type: Pure code
.text:000046A8 ; Segment permissions: Read/Execute
.text:000046A8 _text           segment para public 'CODE' use32
.text:000046A8                 assume cs:_text
.text:000046A8                 ;org 46A8h
.text:000046A8 ; COMDAT (pick any)
.text:000046A8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000046A8
.text:000046A8 ; =============== S U B R O U T I N E =======================================
.text:000046A8
.text:000046A8 ; Attributes: bp-based frame
.text:000046A8
.text:000046A8 ; public: bool __thiscall CRecordVector<struct NArchive::N7z::CFileItem>::IsEmpty(void)const
.text:000046A8                 public ?IsEmpty@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBE_NXZ
.text:000046A8 ?IsEmpty@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBE_NXZ proc near
.text:000046A8                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+1D1p
.text:000046A8                                         ; NArchive::N7z::CArchiveDatabaseOut::IsEmpty(void)+53p
.text:000046A8
.text:000046A8 var_4           = dword ptr -4
.text:000046A8
.text:000046A8                 push    ebp
.text:000046A9                 mov     ebp, esp
.text:000046AB                 push    ecx
.text:000046AC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000046B3                 mov     [ebp+var_4], ecx
.text:000046B6                 mov     eax, [ebp+var_4]
.text:000046B9                 xor     ecx, ecx
.text:000046BB                 cmp     dword ptr [eax+4], 0
.text:000046BF                 setz    cl
.text:000046C2                 mov     al, cl
.text:000046C4                 mov     esp, ebp
.text:000046C6                 pop     ebp
.text:000046C7                 retn
.text:000046C7 ?IsEmpty@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBE_NXZ endp
.text:000046C7
.text:000046C7 _text           ends
.text:000046C7
.text:000046C8 ; ===========================================================================
.text:000046C8
.text:000046C8 ; Segment type: Pure code
.text:000046C8 ; Segment permissions: Read/Execute
.text:000046C8 _text           segment para public 'CODE' use32
.text:000046C8                 assume cs:_text
.text:000046C8                 ;org 46C8h
.text:000046C8 ; COMDAT (pick any)
.text:000046C8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000046C8
.text:000046C8 ; =============== S U B R O U T I N E =======================================
.text:000046C8
.text:000046C8 ; Attributes: bp-based frame
.text:000046C8
.text:000046C8 ; public: unsigned int __thiscall CRecordVector<struct NArchive::N7z::CFileItem>::Add(struct NArchive::N7z::CFileItem)
.text:000046C8                 public ?Add@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEIUCFileItem@N7z@NArchive@@@Z
.text:000046C8 ?Add@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEIUCFileItem@N7z@NArchive@@@Z proc near
.text:000046C8                                         ; CODE XREF: NArchive::N7z::CArchiveDatabaseOut::AddFile(NArchive::N7z::CFileItem const &,NArchive::N7z::CFileItem2 const &,UString const &)+108p
.text:000046C8
.text:000046C8 var_8           = dword ptr -8
.text:000046C8 var_4           = dword ptr -4
.text:000046C8 arg_0           = dword ptr  8
.text:000046C8 arg_4           = dword ptr  0Ch
.text:000046C8 arg_8           = dword ptr  10h
.text:000046C8 arg_C           = dword ptr  14h
.text:000046C8 arg_10          = dword ptr  18h
.text:000046C8 arg_14          = dword ptr  1Ch
.text:000046C8
.text:000046C8                 push    ebp
.text:000046C9                 mov     ebp, esp
.text:000046CB                 sub     esp, 8
.text:000046CE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000046D5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000046DC                 mov     [ebp+var_4], ecx
.text:000046DF                 mov     ecx, [ebp+var_4]
.text:000046E2                 call    ?ReserveOnePosition@?$CRecordVector@UCFileItem@N7z@NArchive@@@@AAEXXZ ; CRecordVector<NArchive::N7z::CFileItem>::ReserveOnePosition(void)
.text:000046E7                 mov     eax, [ebp+var_4]
.text:000046EA                 mov     ecx, [eax+4]
.text:000046ED                 imul    ecx, 18h
.text:000046F0                 mov     edx, [ebp+var_4]
.text:000046F3                 mov     eax, [edx]
.text:000046F5                 add     eax, ecx
.text:000046F7                 mov     ecx, [ebp+arg_0]
.text:000046FA                 mov     [eax], ecx
.text:000046FC                 mov     edx, [ebp+arg_4]
.text:000046FF                 mov     [eax+4], edx
.text:00004702                 mov     ecx, [ebp+arg_8]
.text:00004705                 mov     [eax+8], ecx
.text:00004708                 mov     edx, [ebp+arg_C]
.text:0000470B                 mov     [eax+0Ch], edx
.text:0000470E                 mov     ecx, [ebp+arg_10]
.text:00004711                 mov     [eax+10h], ecx
.text:00004714                 mov     edx, [ebp+arg_14]
.text:00004717                 mov     [eax+14h], edx
.text:0000471A                 mov     eax, [ebp+var_4]
.text:0000471D                 mov     ecx, [eax+4]
.text:00004720                 mov     [ebp+var_8], ecx
.text:00004723                 mov     edx, [ebp+var_4]
.text:00004726                 mov     eax, [edx+4]
.text:00004729                 add     eax, 1
.text:0000472C                 mov     ecx, [ebp+var_4]
.text:0000472F                 mov     [ecx+4], eax
.text:00004732                 mov     eax, [ebp+var_8]
.text:00004735                 add     esp, 8
.text:00004738                 cmp     ebp, esp
.text:0000473A                 call    __RTC_CheckEsp
.text:0000473F                 mov     esp, ebp
.text:00004741                 pop     ebp
.text:00004742                 retn    18h
.text:00004742 ?Add@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEIUCFileItem@N7z@NArchive@@@Z endp
.text:00004742
.text:00004742 ; ---------------------------------------------------------------------------
.text:00004745                 align 4
.text:00004745 _text           ends
.text:00004745
.text:00004748 ; ===========================================================================
.text:00004748
.text:00004748 ; Segment type: Pure code
.text:00004748 ; Segment permissions: Read/Execute
.text:00004748 _text           segment para public 'CODE' use32
.text:00004748                 assume cs:_text
.text:00004748                 ;org 4748h
.text:00004748 ; COMDAT (pick any)
.text:00004748                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004748
.text:00004748 ; =============== S U B R O U T I N E =======================================
.text:00004748
.text:00004748 ; Attributes: bp-based frame
.text:00004748
.text:00004748 ; public: struct NArchive::N7z::CFileItem const & __thiscall CRecordVector<struct NArchive::N7z::CFileItem>::operator[](unsigned int)const
.text:00004748                 public ??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z
.text:00004748 ??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z proc near
.text:00004748                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+143p
.text:00004748                                         ; NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+263p ...
.text:00004748
.text:00004748 var_4           = dword ptr -4
.text:00004748 arg_0           = dword ptr  8
.text:00004748
.text:00004748                 push    ebp
.text:00004749                 mov     ebp, esp
.text:0000474B                 push    ecx
.text:0000474C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004753                 mov     [ebp+var_4], ecx
.text:00004756                 mov     eax, [ebp+arg_0]
.text:00004759                 imul    eax, 18h
.text:0000475C                 mov     ecx, [ebp+var_4]
.text:0000475F                 add     eax, [ecx]
.text:00004761                 mov     esp, ebp
.text:00004763                 pop     ebp
.text:00004764                 retn    4
.text:00004764 ??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z endp
.text:00004764
.text:00004764 ; ---------------------------------------------------------------------------
.text:00004767                 align 4
.text:00004767 _text           ends
.text:00004767
.text:00004768 ; ===========================================================================
.text:00004768
.text:00004768 ; Segment type: Pure code
.text:00004768 ; Segment permissions: Read/Execute
.text:00004768 _text           segment para public 'CODE' use32
.text:00004768                 assume cs:_text
.text:00004768                 ;org 4768h
.text:00004768 ; COMDAT (pick any)
.text:00004768                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004768
.text:00004768 ; =============== S U B R O U T I N E =======================================
.text:00004768
.text:00004768 ; Attributes: bp-based frame
.text:00004768
.text:00004768 ; public: class UString const & __thiscall CObjectVector<class UString>::operator[](unsigned int)const
.text:00004768                 public ??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z
.text:00004768 ??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z proc near
.text:00004768                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+483p
.text:00004768                                         ; NArchive::N7z::COutArchive::WriteHeader(NArchive::N7z::CArchiveDatabaseOut const &,unsigned __int64 &)+56Ap
.text:00004768
.text:00004768 var_4           = dword ptr -4
.text:00004768 arg_0           = dword ptr  8
.text:00004768
.text:00004768                 push    ebp
.text:00004769                 mov     ebp, esp
.text:0000476B                 push    ecx
.text:0000476C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004773                 mov     [ebp+var_4], ecx
.text:00004776                 mov     eax, [ebp+arg_0]
.text:00004779                 push    eax
.text:0000477A                 mov     ecx, [ebp+var_4]
.text:0000477D                 call    ??A?$CRecordVector@PAX@@QBEABQAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00004782                 mov     eax, [eax]
.text:00004784                 add     esp, 4
.text:00004787                 cmp     ebp, esp
.text:00004789                 call    __RTC_CheckEsp
.text:0000478E                 mov     esp, ebp
.text:00004790                 pop     ebp
.text:00004791                 retn    4
.text:00004791 ??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z endp
.text:00004791
.text:00004791 _text           ends
.text:00004791
.text:00004794 ; ===========================================================================
.text:00004794
.text:00004794 ; Segment type: Pure code
.text:00004794 ; Segment permissions: Read/Execute
.text:00004794 _text           segment para public 'CODE' use32
.text:00004794                 assume cs:_text
.text:00004794                 ;org 4794h
.text:00004794 ; COMDAT (pick any)
.text:00004794                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004794
.text:00004794 ; =============== S U B R O U T I N E =======================================
.text:00004794
.text:00004794 ; Attributes: bp-based frame
.text:00004794
.text:00004794 ; public: unsigned int __thiscall CObjectVector<class UString>::Add(class UString const &)
.text:00004794                 public ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
.text:00004794 ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z proc near
.text:00004794                                         ; CODE XREF: NArchive::N7z::CArchiveDatabaseOut::AddFile(NArchive::N7z::CFileItem const &,NArchive::N7z::CFileItem2 const &,UString const &)+D3p
.text:00004794
.text:00004794 var_1C          = dword ptr -1Ch
.text:00004794 var_18          = dword ptr -18h
.text:00004794 var_14          = dword ptr -14h
.text:00004794 var_10          = dword ptr -10h
.text:00004794 var_C           = dword ptr -0Ch
.text:00004794 var_4           = dword ptr -4
.text:00004794 arg_0           = dword ptr  8
.text:00004794
.text:00004794                 push    ebp
.text:00004795                 mov     ebp, esp
.text:00004797                 push    0FFFFFFFFh
.text:00004799                 push    offset __ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
.text:0000479E                 mov     eax, large fs:0
.text:000047A4                 push    eax
.text:000047A5                 sub     esp, 10h
.text:000047A8                 mov     eax, 0CCCCCCCCh
.text:000047AD                 mov     [ebp+var_1C], eax
.text:000047B0                 mov     [ebp+var_18], eax
.text:000047B3                 mov     [ebp+var_14], eax
.text:000047B6                 mov     [ebp+var_10], eax
.text:000047B9                 mov     eax, dword ptr ds:___security_cookie
.text:000047BE                 xor     eax, ebp
.text:000047C0                 push    eax
.text:000047C1                 lea     eax, [ebp+var_C]
.text:000047C4                 mov     large fs:0, eax
.text:000047CA                 mov     [ebp+var_10], ecx
.text:000047CD                 push    0Ch             ; unsigned int
.text:000047CF                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000047D4                 add     esp, 4
.text:000047D7                 mov     [ebp+var_18], eax
.text:000047DA                 mov     [ebp+var_4], 0
.text:000047E1                 cmp     [ebp+var_18], 0
.text:000047E5                 jz      short loc_47F8
.text:000047E7                 mov     eax, [ebp+arg_0]
.text:000047EA                 push    eax
.text:000047EB                 mov     ecx, [ebp+var_18]
.text:000047EE                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:000047F3                 mov     [ebp+var_1C], eax
.text:000047F6                 jmp     short loc_47FF
.text:000047F8 ; ---------------------------------------------------------------------------
.text:000047F8
.text:000047F8 loc_47F8:                               ; CODE XREF: CObjectVector<UString>::Add(UString const &)+51j
.text:000047F8                 mov     [ebp+var_1C], 0
.text:000047FF
.text:000047FF loc_47FF:                               ; CODE XREF: CObjectVector<UString>::Add(UString const &)+62j
.text:000047FF                 mov     ecx, [ebp+var_1C]
.text:00004802                 mov     [ebp+var_14], ecx
.text:00004805                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000480C                 mov     edx, [ebp+var_14]
.text:0000480F                 push    edx
.text:00004810                 mov     ecx, [ebp+var_10]
.text:00004813                 call    ?Add@?$CRecordVector@PAX@@QAEIQAX@Z ; CRecordVector<void *>::Add(void * const)
.text:00004818                 mov     ecx, [ebp+var_C]
.text:0000481B                 mov     large fs:0, ecx
.text:00004822                 pop     ecx
.text:00004823                 add     esp, 1Ch
.text:00004826                 cmp     ebp, esp
.text:00004828                 call    __RTC_CheckEsp
.text:0000482D                 mov     esp, ebp
.text:0000482F                 pop     ebp
.text:00004830                 retn    4
.text:00004830 ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z endp
.text:00004830
.text:00004830 ; ---------------------------------------------------------------------------
.text:00004833                 align 4
.text:00004833 _text           ends
.text:00004833
.text$x:00004834 ; ===========================================================================
.text$x:00004834
.text$x:00004834 ; Segment type: Pure code
.text$x:00004834 ; Segment permissions: Read/Execute
.text$x:00004834 _text$x         segment para public 'CODE' use32
.text$x:00004834                 assume cs:_text$x
.text$x:00004834                 ;org 4834h
.text$x:00004834 ; COMDAT (pick associative to section at 4794)
.text$x:00004834                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00004834
.text$x:00004834 ; =============== S U B R O U T I N E =======================================
.text$x:00004834
.text$x:00004834
.text$x:00004834 __unwindfunclet$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z$0 proc near
.text$x:00004834                                         ; DATA XREF: .xdata$x:00004860o
.text$x:00004834                 mov     eax, [ebp-18h]
.text$x:00004837                 push    eax             ; void *
.text$x:00004838                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000483D                 pop     ecx
.text$x:0000483E                 retn
.text$x:0000483E __unwindfunclet$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z$0 endp
.text$x:0000483E
.text$x:0000483F
.text$x:0000483F ; =============== S U B R O U T I N E =======================================
.text$x:0000483F
.text$x:0000483F
.text$x:0000483F __ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z proc near
.text$x:0000483F                                         ; DATA XREF: CObjectVector<UString>::Add(UString const &)+5o
.text$x:0000483F
.text$x:0000483F arg_4           = dword ptr  8
.text$x:0000483F
.text$x:0000483F                 mov     edx, [esp+arg_4]
.text$x:00004843                 lea     eax, [edx+0Ch]
.text$x:00004846                 mov     ecx, [edx-14h]
.text$x:00004849                 xor     ecx, eax
.text$x:0000484B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004850                 mov     eax, offset __ehfuncinfo$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
.text$x:00004855                 jmp     ___CxxFrameHandler3
.text$x:00004855 __ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z endp
.text$x:00004855
.text$x:00004855 ; ---------------------------------------------------------------------------
.text$x:0000485A                 align 4
.text$x:0000485A _text$x         ends
.text$x:0000485A
.xdata$x:0000485C ; ===========================================================================
.xdata$x:0000485C
.xdata$x:0000485C ; Segment type: Pure data
.xdata$x:0000485C ; Segment permissions: Read
.xdata$x:0000485C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000485C                 assume cs:_xdata$x
.xdata$x:0000485C                 ;org 485Ch
.xdata$x:0000485C ; COMDAT (pick associative to section at 4794)
.xdata$x:0000485C __unwindtable$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z db 0FFh
.xdata$x:0000485C                                         ; DATA XREF: .xdata$x:0000486Co
.xdata$x:0000485D                 db 0FFh
.xdata$x:0000485E                 db 0FFh
.xdata$x:0000485F                 db 0FFh
.xdata$x:00004860                 dd offset __unwindfunclet$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z$0
.xdata$x:00004864 __ehfuncinfo$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z db  22h ; "
.xdata$x:00004864                                         ; DATA XREF: __ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z+11o
.xdata$x:00004865                 db    5
.xdata$x:00004866                 db  93h ; ô
.xdata$x:00004867                 db  19h
.xdata$x:00004868                 db    1
.xdata$x:00004869                 db    0
.xdata$x:0000486A                 db    0
.xdata$x:0000486B                 db    0
.xdata$x:0000486C                 dd offset __unwindtable$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
.xdata$x:00004870                 db    0
.xdata$x:00004871                 db    0
.xdata$x:00004872                 db    0
.xdata$x:00004873                 db    0
.xdata$x:00004874                 db    0
.xdata$x:00004875                 db    0
.xdata$x:00004876                 db    0
.xdata$x:00004877                 db    0
.xdata$x:00004878                 db    0
.xdata$x:00004879                 db    0
.xdata$x:0000487A                 db    0
.xdata$x:0000487B                 db    0
.xdata$x:0000487C                 db    0
.xdata$x:0000487D                 db    0
.xdata$x:0000487E                 db    0
.xdata$x:0000487F                 db    0
.xdata$x:00004880                 db    0
.xdata$x:00004881                 db    0
.xdata$x:00004882                 db    0
.xdata$x:00004883                 db    0
.xdata$x:00004884                 db    1
.xdata$x:00004885                 db    0
.xdata$x:00004886                 db    0
.xdata$x:00004887                 db    0
.xdata$x:00004887 _xdata$x        ends
.xdata$x:00004887
.text:00004888 ; ===========================================================================
.text:00004888
.text:00004888 ; Segment type: Pure code
.text:00004888 ; Segment permissions: Read/Execute
.text:00004888 _text           segment para public 'CODE' use32
.text:00004888                 assume cs:_text
.text:00004888                 ;org 4888h
.text:00004888 ; COMDAT (pick any)
.text:00004888                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004888
.text:00004888 ; =============== S U B R O U T I N E =======================================
.text:00004888
.text:00004888 ; Attributes: bp-based frame
.text:00004888
.text:00004888 ; public: void __thiscall CMyComPtr<struct IOutStream>::Release(void)
.text:00004888                 public ?Release@?$CMyComPtr@UIOutStream@@@@QAEXXZ
.text:00004888 ?Release@?$CMyComPtr@UIOutStream@@@@QAEXXZ proc near
.text:00004888                                         ; CODE XREF: NArchive::N7z::COutArchive::Close(void)+1Fp
.text:00004888
.text:00004888 var_4           = dword ptr -4
.text:00004888
.text:00004888                 push    ebp
.text:00004889                 mov     ebp, esp
.text:0000488B                 push    ecx
.text:0000488C                 push    esi
.text:0000488D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004894                 mov     [ebp+var_4], ecx
.text:00004897                 mov     eax, [ebp+var_4]
.text:0000489A                 cmp     dword ptr [eax], 0
.text:0000489D                 jz      short loc_48C3
.text:0000489F                 mov     ecx, [ebp+var_4]
.text:000048A2                 mov     edx, [ecx]
.text:000048A4                 mov     eax, [ebp+var_4]
.text:000048A7                 mov     ecx, [eax]
.text:000048A9                 mov     edx, [edx]
.text:000048AB                 mov     esi, esp
.text:000048AD                 push    ecx
.text:000048AE                 mov     eax, [edx+8]
.text:000048B1                 call    eax
.text:000048B3                 cmp     esi, esp
.text:000048B5                 call    __RTC_CheckEsp
.text:000048BA                 mov     ecx, [ebp+var_4]
.text:000048BD                 mov     dword ptr [ecx], 0
.text:000048C3
.text:000048C3 loc_48C3:                               ; CODE XREF: CMyComPtr<IOutStream>::Release(void)+15j
.text:000048C3                 pop     esi
.text:000048C4                 add     esp, 4
.text:000048C7                 cmp     ebp, esp
.text:000048C9                 call    __RTC_CheckEsp
.text:000048CE                 mov     esp, ebp
.text:000048D0                 pop     ebp
.text:000048D1                 retn
.text:000048D1 ?Release@?$CMyComPtr@UIOutStream@@@@QAEXXZ endp
.text:000048D1
.text:000048D1 ; ---------------------------------------------------------------------------
.text:000048D2                 align 4
.text:000048D2 _text           ends
.text:000048D2
.text:000048D4 ; ===========================================================================
.text:000048D4
.text:000048D4 ; Segment type: Pure code
.text:000048D4 ; Segment permissions: Read/Execute
.text:000048D4 _text           segment para public 'CODE' use32
.text:000048D4                 assume cs:_text
.text:000048D4                 ;org 48D4h
.text:000048D4 ; COMDAT (pick any)
.text:000048D4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000048D4
.text:000048D4 ; =============== S U B R O U T I N E =======================================
.text:000048D4
.text:000048D4 ; Attributes: bp-based frame
.text:000048D4
.text:000048D4 ; public: struct IOutStream * * __thiscall CMyComPtr<struct IOutStream>::operator&(void)
.text:000048D4                 public ??I?$CMyComPtr@UIOutStream@@@@QAEPAPAUIOutStream@@XZ
.text:000048D4 ??I?$CMyComPtr@UIOutStream@@@@QAEPAPAUIOutStream@@XZ proc near
.text:000048D4                                         ; CODE XREF: NArchive::N7z::COutArchive::Create(ISequentialOutStream *,bool)+40p
.text:000048D4
.text:000048D4 var_4           = dword ptr -4
.text:000048D4
.text:000048D4                 push    ebp
.text:000048D5                 mov     ebp, esp
.text:000048D7                 push    ecx
.text:000048D8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000048DF                 mov     [ebp+var_4], ecx
.text:000048E2                 mov     eax, [ebp+var_4]
.text:000048E5                 mov     esp, ebp
.text:000048E7                 pop     ebp
.text:000048E8                 retn
.text:000048E8 ??I?$CMyComPtr@UIOutStream@@@@QAEPAPAUIOutStream@@XZ endp
.text:000048E8
.text:000048E8 ; ---------------------------------------------------------------------------
.text:000048E9                 align 4
.text:000048E9 _text           ends
.text:000048E9
.text:000048EC ; ===========================================================================
.text:000048EC
.text:000048EC ; Segment type: Pure code
.text:000048EC ; Segment permissions: Read/Execute
.text:000048EC _text           segment para public 'CODE' use32
.text:000048EC                 assume cs:_text
.text:000048EC                 ;org 48ECh
.text:000048EC ; COMDAT (pick any)
.text:000048EC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000048EC
.text:000048EC ; =============== S U B R O U T I N E =======================================
.text:000048EC
.text:000048EC ; Attributes: bp-based frame
.text:000048EC
.text:000048EC ; public: struct IOutStream * __thiscall CMyComPtr<struct IOutStream>::operator->(void)const
.text:000048EC                 public ??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ
.text:000048EC ??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ proc near
.text:000048EC                                         ; CODE XREF: NArchive::N7z::COutArchive::Create(ISequentialOutStream *,bool)+A4p
.text:000048EC                                         ; NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+4C0p
.text:000048EC
.text:000048EC var_4           = dword ptr -4
.text:000048EC
.text:000048EC                 push    ebp
.text:000048ED                 mov     ebp, esp
.text:000048EF                 push    ecx
.text:000048F0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000048F7                 mov     [ebp+var_4], ecx
.text:000048FA                 mov     eax, [ebp+var_4]
.text:000048FD                 mov     eax, [eax]
.text:000048FF                 mov     esp, ebp
.text:00004901                 pop     ebp
.text:00004902                 retn
.text:00004902 ??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ endp
.text:00004902
.text:00004902 ; ---------------------------------------------------------------------------
.text:00004903                 align 4
.text:00004903 _text           ends
.text:00004903
.text:00004904 ; ===========================================================================
.text:00004904
.text:00004904 ; Segment type: Pure code
.text:00004904 ; Segment permissions: Read/Execute
.text:00004904 _text           segment para public 'CODE' use32
.text:00004904                 assume cs:_text
.text:00004904                 ;org 4904h
.text:00004904 ; COMDAT (pick any)
.text:00004904                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004904
.text:00004904 ; =============== S U B R O U T I N E =======================================
.text:00004904
.text:00004904 ; Attributes: bp-based frame
.text:00004904
.text:00004904 ; public: bool __thiscall CMyComPtr<struct IOutStream>::operator!(void)const
.text:00004904                 public ??7?$CMyComPtr@UIOutStream@@@@QBE_NXZ
.text:00004904 ??7?$CMyComPtr@UIOutStream@@@@QBE_NXZ proc near
.text:00004904                                         ; CODE XREF: NArchive::N7z::COutArchive::Create(ISequentialOutStream *,bool)+5Cp
.text:00004904                                         ; NArchive::N7z::COutArchive::Create(ISequentialOutStream *,bool)+75p
.text:00004904
.text:00004904 var_4           = dword ptr -4
.text:00004904
.text:00004904                 push    ebp
.text:00004905                 mov     ebp, esp
.text:00004907                 push    ecx
.text:00004908                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000490F                 mov     [ebp+var_4], ecx
.text:00004912                 mov     eax, [ebp+var_4]
.text:00004915                 xor     ecx, ecx
.text:00004917                 cmp     dword ptr [eax], 0
.text:0000491A                 setz    cl
.text:0000491D                 mov     al, cl
.text:0000491F                 mov     esp, ebp
.text:00004921                 pop     ebp
.text:00004922                 retn
.text:00004922 ??7?$CMyComPtr@UIOutStream@@@@QBE_NXZ endp
.text:00004922
.text:00004922 ; ---------------------------------------------------------------------------
.text:00004923                 align 4
.text:00004923 _text           ends
.text:00004923
.text:00004924 ; ===========================================================================
.text:00004924
.text:00004924 ; Segment type: Pure code
.text:00004924 ; Segment permissions: Read/Execute
.text:00004924 _text           segment para public 'CODE' use32
.text:00004924                 assume cs:_text
.text:00004924                 ;org 4924h
.text:00004924 ; COMDAT (pick any)
.text:00004924                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004924
.text:00004924 ; =============== S U B R O U T I N E =======================================
.text:00004924
.text:00004924 ; Attributes: bp-based frame
.text:00004924
.text:00004924 ; public: void * __thiscall NArchive::N7z::CMethodFull::`scalar deleting destructor'(unsigned int)
.text:00004924                 public ??_GCMethodFull@N7z@NArchive@@QAEPAXI@Z
.text:00004924 ??_GCMethodFull@N7z@NArchive@@QAEPAXI@Z proc near
.text:00004924                                         ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>(void)+7Fp
.text:00004924
.text:00004924 var_4           = dword ptr -4
.text:00004924 arg_0           = dword ptr  8
.text:00004924
.text:00004924                 push    ebp
.text:00004925                 mov     ebp, esp
.text:00004927                 push    ecx
.text:00004928                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000492F                 mov     [ebp+var_4], ecx
.text:00004932                 mov     ecx, [ebp+var_4] ; this
.text:00004935                 call    ??1CMethodFull@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CMethodFull::~CMethodFull(void)
.text:0000493A                 mov     eax, [ebp+arg_0]
.text:0000493D                 and     eax, 1
.text:00004940                 jz      short loc_494E
.text:00004942                 mov     ecx, [ebp+var_4]
.text:00004945                 push    ecx             ; void *
.text:00004946                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000494B                 add     esp, 4
.text:0000494E
.text:0000494E loc_494E:                               ; CODE XREF: NArchive::N7z::CMethodFull::`scalar deleting destructor'(uint)+1Cj
.text:0000494E                 mov     eax, [ebp+var_4]
.text:00004951                 add     esp, 4
.text:00004954                 cmp     ebp, esp
.text:00004956                 call    __RTC_CheckEsp
.text:0000495B                 mov     esp, ebp
.text:0000495D                 pop     ebp
.text:0000495E                 retn    4
.text:0000495E ??_GCMethodFull@N7z@NArchive@@QAEPAXI@Z endp
.text:0000495E
.text:0000495E ; ---------------------------------------------------------------------------
.text:00004961                 align 4
.text:00004961 _text           ends
.text:00004961
.text:00004964 ; ===========================================================================
.text:00004964
.text:00004964 ; Segment type: Pure code
.text:00004964 ; Segment permissions: Read/Execute
.text:00004964 _text           segment para public 'CODE' use32
.text:00004964                 assume cs:_text
.text:00004964                 ;org 4964h
.text:00004964 ; COMDAT (pick any)
.text:00004964                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004964
.text:00004964 ; =============== S U B R O U T I N E =======================================
.text:00004964
.text:00004964 ; Attributes: bp-based frame
.text:00004964
.text:00004964 ; public: void * __thiscall NArchive::N7z::CCoderInfo::`vector deleting destructor'(unsigned int)
.text:00004964                 public ??_ECCoderInfo@N7z@NArchive@@QAEPAXI@Z
.text:00004964 ??_ECCoderInfo@N7z@NArchive@@QAEPAXI@Z proc near
.text:00004964                                         ; CODE XREF: CObjArray2<NArchive::N7z::CCoderInfo>::~CObjArray2<NArchive::N7z::CCoderInfo>(void)+33p
.text:00004964
.text:00004964 var_4           = dword ptr -4
.text:00004964 arg_0           = dword ptr  8
.text:00004964
.text:00004964                 push    ebp
.text:00004965                 mov     ebp, esp
.text:00004967                 push    ecx
.text:00004968                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000496F                 mov     [ebp+var_4], ecx
.text:00004972                 mov     eax, [ebp+arg_0]
.text:00004975                 and     eax, 2
.text:00004978                 jz      short loc_49B0
.text:0000497A                 push    offset ??1CCoderInfo@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCoderInfo::~CCoderInfo(void)
.text:0000497F                 mov     ecx, [ebp+var_4]
.text:00004982                 mov     edx, [ecx-4]
.text:00004985                 push    edx
.text:00004986                 push    18h
.text:00004988                 mov     eax, [ebp+var_4]
.text:0000498B                 push    eax
.text:0000498C                 call    ??_M@YGXPAXIHP6EX0@Z@Z ; `eh vector destructor iterator'(void *,uint,int,void (*)(void *))
.text:00004991                 mov     ecx, [ebp+arg_0]
.text:00004994                 and     ecx, 1
.text:00004997                 jz      short loc_49A8
.text:00004999                 mov     edx, [ebp+var_4]
.text:0000499C                 sub     edx, 4
.text:0000499F                 push    edx             ; void *
.text:000049A0                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000049A5                 add     esp, 4
.text:000049A8
.text:000049A8 loc_49A8:                               ; CODE XREF: NArchive::N7z::CCoderInfo::`vector deleting destructor'(uint)+33j
.text:000049A8                 mov     eax, [ebp+var_4]
.text:000049AB                 sub     eax, 4
.text:000049AE                 jmp     short loc_49CF
.text:000049B0 ; ---------------------------------------------------------------------------
.text:000049B0
.text:000049B0 loc_49B0:                               ; CODE XREF: NArchive::N7z::CCoderInfo::`vector deleting destructor'(uint)+14j
.text:000049B0                 mov     ecx, [ebp+var_4] ; this
.text:000049B3                 call    ??1CCoderInfo@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCoderInfo::~CCoderInfo(void)
.text:000049B8                 mov     eax, [ebp+arg_0]
.text:000049BB                 and     eax, 1
.text:000049BE                 jz      short loc_49CC
.text:000049C0                 mov     ecx, [ebp+var_4]
.text:000049C3                 push    ecx             ; void *
.text:000049C4                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000049C9                 add     esp, 4
.text:000049CC
.text:000049CC loc_49CC:                               ; CODE XREF: NArchive::N7z::CCoderInfo::`vector deleting destructor'(uint)+5Aj
.text:000049CC                 mov     eax, [ebp+var_4]
.text:000049CF
.text:000049CF loc_49CF:                               ; CODE XREF: NArchive::N7z::CCoderInfo::`vector deleting destructor'(uint)+4Aj
.text:000049CF                 add     esp, 4
.text:000049D2                 cmp     ebp, esp
.text:000049D4                 call    __RTC_CheckEsp
.text:000049D9                 mov     esp, ebp
.text:000049DB                 pop     ebp
.text:000049DC                 retn    4
.text:000049DC ??_ECCoderInfo@N7z@NArchive@@QAEPAXI@Z endp
.text:000049DC
.text:000049DC ; ---------------------------------------------------------------------------
.text:000049DF                 align 10h
.text:000049DF _text           ends
.text:000049DF
.text:000049E0 ; ===========================================================================
.text:000049E0
.text:000049E0 ; Segment type: Pure code
.text:000049E0 ; Segment permissions: Read/Execute
.text:000049E0 _text           segment para public 'CODE' use32
.text:000049E0                 assume cs:_text
.text:000049E0                 ;org 49E0h
.text:000049E0 ; COMDAT (pick any)
.text:000049E0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000049E0
.text:000049E0 ; =============== S U B R O U T I N E =======================================
.text:000049E0
.text:000049E0 ; Attributes: bp-based frame
.text:000049E0
.text:000049E0 ; public: void * __thiscall NArchive::N7z::CFolder::`scalar deleting destructor'(unsigned int)
.text:000049E0                 public ??_GCFolder@N7z@NArchive@@QAEPAXI@Z
.text:000049E0 ??_GCFolder@N7z@NArchive@@QAEPAXI@Z proc near
.text:000049E0                                         ; CODE XREF: CObjectVector<NArchive::N7z::CFolder>::~CObjectVector<NArchive::N7z::CFolder>(void)+7Fp
.text:000049E0
.text:000049E0 var_4           = dword ptr -4
.text:000049E0 arg_0           = dword ptr  8
.text:000049E0
.text:000049E0                 push    ebp
.text:000049E1                 mov     ebp, esp
.text:000049E3                 push    ecx
.text:000049E4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000049EB                 mov     [ebp+var_4], ecx
.text:000049EE                 mov     ecx, [ebp+var_4] ; this
.text:000049F1                 call    ??1CFolder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFolder::~CFolder(void)
.text:000049F6                 mov     eax, [ebp+arg_0]
.text:000049F9                 and     eax, 1
.text:000049FC                 jz      short loc_4A0A
.text:000049FE                 mov     ecx, [ebp+var_4]
.text:00004A01                 push    ecx             ; void *
.text:00004A02                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00004A07                 add     esp, 4
.text:00004A0A
.text:00004A0A loc_4A0A:                               ; CODE XREF: NArchive::N7z::CFolder::`scalar deleting destructor'(uint)+1Cj
.text:00004A0A                 mov     eax, [ebp+var_4]
.text:00004A0D                 add     esp, 4
.text:00004A10                 cmp     ebp, esp
.text:00004A12                 call    __RTC_CheckEsp
.text:00004A17                 mov     esp, ebp
.text:00004A19                 pop     ebp
.text:00004A1A                 retn    4
.text:00004A1A ??_GCFolder@N7z@NArchive@@QAEPAXI@Z endp
.text:00004A1A
.text:00004A1A ; ---------------------------------------------------------------------------
.text:00004A1D                 align 10h
.text:00004A1D _text           ends
.text:00004A1D
.text:00004A20 ; ===========================================================================
.text:00004A20
.text:00004A20 ; Segment type: Pure code
.text:00004A20 ; Segment permissions: Read/Execute
.text:00004A20 _text           segment para public 'CODE' use32
.text:00004A20                 assume cs:_text
.text:00004A20                 ;org 4A20h
.text:00004A20 ; COMDAT (pick any)
.text:00004A20                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004A20
.text:00004A20 ; =============== S U B R O U T I N E =======================================
.text:00004A20
.text:00004A20 ; Attributes: bp-based frame
.text:00004A20
.text:00004A20 ; void __stdcall `vector constructor iterator'(void *, unsigned int, int, void * (__thiscall *)(void *))
.text:00004A20                 public ??_H@YGXPAXIHP6EPAX0@Z@Z
.text:00004A20 ??_H@YGXPAXIHP6EPAX0@Z@Z proc near      ; CODE XREF: CRecordVector<NArchive::N7z::CFileItem>::ReserveOnePosition(void)+AEp
.text:00004A20
.text:00004A20 arg_0           = dword ptr  8
.text:00004A20 arg_4           = dword ptr  0Ch
.text:00004A20 arg_8           = dword ptr  10h
.text:00004A20 arg_C           = dword ptr  14h
.text:00004A20
.text:00004A20                 push    ebp
.text:00004A21                 mov     ebp, esp
.text:00004A23                 push    esi
.text:00004A24
.text:00004A24 loc_4A24:                               ; CODE XREF: `vector constructor iterator'(void *,uint,int,void * (*)(void *))+27j
.text:00004A24                 mov     eax, [ebp+arg_8]
.text:00004A27                 sub     eax, 1
.text:00004A2A                 mov     [ebp+arg_8], eax
.text:00004A2D                 js      short loc_4A49
.text:00004A2F                 mov     esi, esp
.text:00004A31                 mov     ecx, [ebp+arg_0]
.text:00004A34                 call    [ebp+arg_C]
.text:00004A37                 cmp     esi, esp
.text:00004A39                 call    __RTC_CheckEsp
.text:00004A3E                 mov     ecx, [ebp+arg_0]
.text:00004A41                 add     ecx, [ebp+arg_4]
.text:00004A44                 mov     [ebp+arg_0], ecx
.text:00004A47                 jmp     short loc_4A24
.text:00004A49 ; ---------------------------------------------------------------------------
.text:00004A49
.text:00004A49 loc_4A49:                               ; CODE XREF: `vector constructor iterator'(void *,uint,int,void * (*)(void *))+Dj
.text:00004A49                 pop     esi
.text:00004A4A                 cmp     ebp, esp
.text:00004A4C                 call    __RTC_CheckEsp
.text:00004A51                 pop     ebp
.text:00004A52                 retn    10h
.text:00004A52 ??_H@YGXPAXIHP6EPAX0@Z@Z endp
.text:00004A52
.text:00004A52 ; ---------------------------------------------------------------------------
.text:00004A55                 align 4
.text:00004A55 _text           ends
.text:00004A55
.text:00004A58 ; ===========================================================================
.text:00004A58
.text:00004A58 ; Segment type: Pure code
.text:00004A58 ; Segment permissions: Read/Execute
.text:00004A58 _text           segment para public 'CODE' use32
.text:00004A58                 assume cs:_text
.text:00004A58                 ;org 4A58h
.text:00004A58 ; COMDAT (pick any)
.text:00004A58                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004A58
.text:00004A58 ; =============== S U B R O U T I N E =======================================
.text:00004A58
.text:00004A58 ; Attributes: bp-based frame
.text:00004A58
.text:00004A58 ; _DWORD __thiscall NArchive::N7z::CMethodFull::~CMethodFull(NArchive::N7z::CMethodFull *__hidden this)
.text:00004A58                 public ??1CMethodFull@N7z@NArchive@@QAE@XZ
.text:00004A58 ??1CMethodFull@N7z@NArchive@@QAE@XZ proc near
.text:00004A58                                         ; CODE XREF: NArchive::N7z::CMethodFull::`scalar deleting destructor'(uint)+11p
.text:00004A58
.text:00004A58 var_4           = dword ptr -4
.text:00004A58
.text:00004A58                 push    ebp
.text:00004A59                 mov     ebp, esp
.text:00004A5B                 push    ecx
.text:00004A5C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004A63                 mov     [ebp+var_4], ecx
.text:00004A66                 mov     ecx, [ebp+var_4] ; this
.text:00004A69                 call    ??1CMethodProps@@QAE@XZ ; CMethodProps::~CMethodProps(void)
.text:00004A6E                 add     esp, 4
.text:00004A71                 cmp     ebp, esp
.text:00004A73                 call    __RTC_CheckEsp
.text:00004A78                 mov     esp, ebp
.text:00004A7A                 pop     ebp
.text:00004A7B                 retn
.text:00004A7B ??1CMethodFull@N7z@NArchive@@QAE@XZ endp
.text:00004A7B
.text:00004A7B _text           ends
.text:00004A7B
.text:00004A7C ; ===========================================================================
.text:00004A7C
.text:00004A7C ; Segment type: Pure code
.text:00004A7C ; Segment permissions: Read/Execute
.text:00004A7C _text           segment para public 'CODE' use32
.text:00004A7C                 assume cs:_text
.text:00004A7C                 ;org 4A7Ch
.text:00004A7C ; COMDAT (pick any)
.text:00004A7C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004A7C
.text:00004A7C ; =============== S U B R O U T I N E =======================================
.text:00004A7C
.text:00004A7C ; Attributes: bp-based frame
.text:00004A7C
.text:00004A7C ; _DWORD __thiscall NArchive::N7z::CCoderInfo::~CCoderInfo(NArchive::N7z::CCoderInfo *__hidden this)
.text:00004A7C                 public ??1CCoderInfo@N7z@NArchive@@QAE@XZ
.text:00004A7C ??1CCoderInfo@N7z@NArchive@@QAE@XZ proc near
.text:00004A7C                                         ; CODE XREF: NArchive::N7z::CCoderInfo::`vector deleting destructor'(uint)+4Fp
.text:00004A7C                                         ; DATA XREF: NArchive::N7z::CCoderInfo::`vector deleting destructor'(uint)+16o
.text:00004A7C
.text:00004A7C var_4           = dword ptr -4
.text:00004A7C
.text:00004A7C                 push    ebp
.text:00004A7D                 mov     ebp, esp
.text:00004A7F                 push    ecx
.text:00004A80                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004A87                 mov     [ebp+var_4], ecx
.text:00004A8A                 mov     ecx, [ebp+var_4]
.text:00004A8D                 add     ecx, 8
.text:00004A90                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:00004A95                 add     esp, 4
.text:00004A98                 cmp     ebp, esp
.text:00004A9A                 call    __RTC_CheckEsp
.text:00004A9F                 mov     esp, ebp
.text:00004AA1                 pop     ebp
.text:00004AA2                 retn
.text:00004AA2 ??1CCoderInfo@N7z@NArchive@@QAE@XZ endp
.text:00004AA2
.text:00004AA2 ; ---------------------------------------------------------------------------
.text:00004AA3                 align 4
.text:00004AA3 _text           ends
.text:00004AA3
.text:00004AA4 ; ===========================================================================
.text:00004AA4
.text:00004AA4 ; Segment type: Pure code
.text:00004AA4 ; Segment permissions: Read/Execute
.text:00004AA4 _text           segment para public 'CODE' use32
.text:00004AA4                 assume cs:_text
.text:00004AA4                 ;org 4AA4h
.text:00004AA4 ; COMDAT (pick any)
.text:00004AA4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004AA4
.text:00004AA4 ; =============== S U B R O U T I N E =======================================
.text:00004AA4
.text:00004AA4 ; Attributes: bp-based frame
.text:00004AA4
.text:00004AA4 ; _DWORD __thiscall NArchive::N7z::CFolder::~CFolder(NArchive::N7z::CFolder *__hidden this)
.text:00004AA4                 public ??1CFolder@N7z@NArchive@@QAE@XZ
.text:00004AA4 ??1CFolder@N7z@NArchive@@QAE@XZ proc near
.text:00004AA4                                         ; CODE XREF: NArchive::N7z::CFolder::`scalar deleting destructor'(uint)+11p
.text:00004AA4
.text:00004AA4 var_10          = dword ptr -10h
.text:00004AA4 var_C           = dword ptr -0Ch
.text:00004AA4 var_4           = dword ptr -4
.text:00004AA4
.text:00004AA4                 push    ebp
.text:00004AA5                 mov     ebp, esp
.text:00004AA7                 push    0FFFFFFFFh
.text:00004AA9                 push    offset __ehhandler$??1CFolder@N7z@NArchive@@QAE@XZ
.text:00004AAE                 mov     eax, large fs:0
.text:00004AB4                 push    eax
.text:00004AB5                 push    ecx
.text:00004AB6                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00004ABD                 mov     eax, dword ptr ds:___security_cookie
.text:00004AC2                 xor     eax, ebp
.text:00004AC4                 push    eax
.text:00004AC5                 lea     eax, [ebp+var_C]
.text:00004AC8                 mov     large fs:0, eax
.text:00004ACE                 mov     [ebp+var_10], ecx
.text:00004AD1                 mov     [ebp+var_4], 1
.text:00004AD8                 mov     ecx, [ebp+var_10]
.text:00004ADB                 add     ecx, 10h
.text:00004ADE                 call    ??1?$CObjArray2@I@@QAE@XZ ; CObjArray2<uint>::~CObjArray2<uint>(void)
.text:00004AE3                 mov     byte ptr [ebp+var_4], 0
.text:00004AE7                 mov     ecx, [ebp+var_10]
.text:00004AEA                 add     ecx, 8
.text:00004AED                 call    ??1?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CBond>::~CObjArray2<NArchive::N7z::CBond>(void)
.text:00004AF2                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004AF9                 mov     ecx, [ebp+var_10]
.text:00004AFC                 call    ??1?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CCoderInfo>::~CObjArray2<NArchive::N7z::CCoderInfo>(void)
.text:00004B01                 mov     ecx, [ebp+var_C]
.text:00004B04                 mov     large fs:0, ecx
.text:00004B0B                 pop     ecx
.text:00004B0C                 add     esp, 10h
.text:00004B0F                 cmp     ebp, esp
.text:00004B11                 call    __RTC_CheckEsp
.text:00004B16                 mov     esp, ebp
.text:00004B18                 pop     ebp
.text:00004B19                 retn
.text:00004B19 ??1CFolder@N7z@NArchive@@QAE@XZ endp
.text:00004B19
.text:00004B19 ; ---------------------------------------------------------------------------
.text:00004B1A                 align 4
.text:00004B1A _text           ends
.text:00004B1A
.text$x:00004B1C ; ===========================================================================
.text$x:00004B1C
.text$x:00004B1C ; Segment type: Pure code
.text$x:00004B1C ; Segment permissions: Read/Execute
.text$x:00004B1C _text$x         segment para public 'CODE' use32
.text$x:00004B1C                 assume cs:_text$x
.text$x:00004B1C                 ;org 4B1Ch
.text$x:00004B1C ; COMDAT (pick associative to section at 4AA4)
.text$x:00004B1C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00004B1C
.text$x:00004B1C ; =============== S U B R O U T I N E =======================================
.text$x:00004B1C
.text$x:00004B1C
.text$x:00004B1C __unwindfunclet$??1CFolder@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:00004B1C                                         ; DATA XREF: .xdata$x:00004B50o
.text$x:00004B1C                 mov     ecx, [ebp-10h]
.text$x:00004B1F                 jmp     ??1?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CCoderInfo>::~CObjArray2<NArchive::N7z::CCoderInfo>(void)
.text$x:00004B1F __unwindfunclet$??1CFolder@N7z@NArchive@@QAE@XZ$0 endp
.text$x:00004B1F
.text$x:00004B24
.text$x:00004B24 ; =============== S U B R O U T I N E =======================================
.text$x:00004B24
.text$x:00004B24
.text$x:00004B24 __unwindfunclet$??1CFolder@N7z@NArchive@@QAE@XZ$1 proc near
.text$x:00004B24                                         ; DATA XREF: .xdata$x:00004B58o
.text$x:00004B24                 mov     ecx, [ebp-10h]
.text$x:00004B27                 add     ecx, 8
.text$x:00004B2A                 jmp     ??1?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CBond>::~CObjArray2<NArchive::N7z::CBond>(void)
.text$x:00004B2A __unwindfunclet$??1CFolder@N7z@NArchive@@QAE@XZ$1 endp
.text$x:00004B2A
.text$x:00004B2F
.text$x:00004B2F ; =============== S U B R O U T I N E =======================================
.text$x:00004B2F
.text$x:00004B2F
.text$x:00004B2F __ehhandler$??1CFolder@N7z@NArchive@@QAE@XZ proc near
.text$x:00004B2F                                         ; DATA XREF: NArchive::N7z::CFolder::~CFolder(void)+5o
.text$x:00004B2F
.text$x:00004B2F arg_4           = dword ptr  8
.text$x:00004B2F
.text$x:00004B2F                 mov     edx, [esp+arg_4]
.text$x:00004B33                 lea     eax, [edx+0Ch]
.text$x:00004B36                 mov     ecx, [edx-8]
.text$x:00004B39                 xor     ecx, eax
.text$x:00004B3B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004B40                 mov     eax, offset __ehfuncinfo$??1CFolder@N7z@NArchive@@QAE@XZ
.text$x:00004B45                 jmp     ___CxxFrameHandler3
.text$x:00004B45 __ehhandler$??1CFolder@N7z@NArchive@@QAE@XZ endp
.text$x:00004B45
.text$x:00004B45 ; ---------------------------------------------------------------------------
.text$x:00004B4A                 align 4
.text$x:00004B4A _text$x         ends
.text$x:00004B4A
.xdata$x:00004B4C ; ===========================================================================
.xdata$x:00004B4C
.xdata$x:00004B4C ; Segment type: Pure data
.xdata$x:00004B4C ; Segment permissions: Read
.xdata$x:00004B4C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004B4C                 assume cs:_xdata$x
.xdata$x:00004B4C                 ;org 4B4Ch
.xdata$x:00004B4C ; COMDAT (pick associative to section at 4AA4)
.xdata$x:00004B4C __unwindtable$??1CFolder@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:00004B4C                                         ; DATA XREF: .xdata$x:00004B64o
.xdata$x:00004B4D                 db 0FFh
.xdata$x:00004B4E                 db 0FFh
.xdata$x:00004B4F                 db 0FFh
.xdata$x:00004B50                 dd offset __unwindfunclet$??1CFolder@N7z@NArchive@@QAE@XZ$0
.xdata$x:00004B54                 align 8
.xdata$x:00004B58                 dd offset __unwindfunclet$??1CFolder@N7z@NArchive@@QAE@XZ$1
.xdata$x:00004B5C __ehfuncinfo$??1CFolder@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00004B5C                                         ; DATA XREF: __ehhandler$??1CFolder@N7z@NArchive@@QAE@XZ+11o
.xdata$x:00004B5D                 db    5
.xdata$x:00004B5E                 db  93h ; ô
.xdata$x:00004B5F                 db  19h
.xdata$x:00004B60                 db    2
.xdata$x:00004B61                 db    0
.xdata$x:00004B62                 db    0
.xdata$x:00004B63                 db    0
.xdata$x:00004B64                 dd offset __unwindtable$??1CFolder@N7z@NArchive@@QAE@XZ
.xdata$x:00004B68                 db    0
.xdata$x:00004B69                 db    0
.xdata$x:00004B6A                 db    0
.xdata$x:00004B6B                 db    0
.xdata$x:00004B6C                 db    0
.xdata$x:00004B6D                 db    0
.xdata$x:00004B6E                 db    0
.xdata$x:00004B6F                 db    0
.xdata$x:00004B70                 db    0
.xdata$x:00004B71                 db    0
.xdata$x:00004B72                 db    0
.xdata$x:00004B73                 db    0
.xdata$x:00004B74                 db    0
.xdata$x:00004B75                 db    0
.xdata$x:00004B76                 db    0
.xdata$x:00004B77                 db    0
.xdata$x:00004B78                 db    0
.xdata$x:00004B79                 db    0
.xdata$x:00004B7A                 db    0
.xdata$x:00004B7B                 db    0
.xdata$x:00004B7C                 db    1
.xdata$x:00004B7D                 db    0
.xdata$x:00004B7E                 db    0
.xdata$x:00004B7F                 db    0
.xdata$x:00004B7F _xdata$x        ends
.xdata$x:00004B7F
.text:00004B80 ; ===========================================================================
.text:00004B80
.text:00004B80 ; Segment type: Pure code
.text:00004B80 ; Segment permissions: Read/Execute
.text:00004B80 _text           segment para public 'CODE' use32
.text:00004B80                 assume cs:_text
.text:00004B80                 ;org 4B80h
.text:00004B80 ; COMDAT (pick any)
.text:00004B80                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004B80
.text:00004B80 ; =============== S U B R O U T I N E =======================================
.text:00004B80
.text:00004B80 ; Attributes: bp-based frame
.text:00004B80
.text:00004B80 ; public: __thiscall CObjArray2<unsigned int>::~CObjArray2<unsigned int>(void)
.text:00004B80                 public ??1?$CObjArray2@I@@QAE@XZ
.text:00004B80 ??1?$CObjArray2@I@@QAE@XZ proc near     ; CODE XREF: NArchive::N7z::CFolder::~CFolder(void)+3Ap
.text:00004B80
.text:00004B80 var_8           = dword ptr -8
.text:00004B80 var_4           = dword ptr -4
.text:00004B80
.text:00004B80                 push    ebp
.text:00004B81                 mov     ebp, esp
.text:00004B83                 sub     esp, 8
.text:00004B86                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004B8D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004B94                 mov     [ebp+var_4], ecx
.text:00004B97                 mov     eax, [ebp+var_4]
.text:00004B9A                 mov     ecx, [eax]
.text:00004B9C                 mov     [ebp+var_8], ecx
.text:00004B9F                 mov     edx, [ebp+var_8]
.text:00004BA2                 push    edx             ; void *
.text:00004BA3                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00004BA8                 add     esp, 4
.text:00004BAB                 add     esp, 8
.text:00004BAE                 cmp     ebp, esp
.text:00004BB0                 call    __RTC_CheckEsp
.text:00004BB5                 mov     esp, ebp
.text:00004BB7                 pop     ebp
.text:00004BB8                 retn
.text:00004BB8 ??1?$CObjArray2@I@@QAE@XZ endp
.text:00004BB8
.text:00004BB8 ; ---------------------------------------------------------------------------
.text:00004BB9                 align 4
.text:00004BB9 _text           ends
.text:00004BB9
.text:00004BBC ; ===========================================================================
.text:00004BBC
.text:00004BBC ; Segment type: Pure code
.text:00004BBC ; Segment permissions: Read/Execute
.text:00004BBC _text           segment para public 'CODE' use32
.text:00004BBC                 assume cs:_text
.text:00004BBC                 ;org 4BBCh
.text:00004BBC ; COMDAT (pick any)
.text:00004BBC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004BBC
.text:00004BBC ; =============== S U B R O U T I N E =======================================
.text:00004BBC
.text:00004BBC ; Attributes: bp-based frame
.text:00004BBC
.text:00004BBC ; _DWORD __thiscall CMethodProps::~CMethodProps(CMethodProps *__hidden this)
.text:00004BBC                 public ??1CMethodProps@@QAE@XZ
.text:00004BBC ??1CMethodProps@@QAE@XZ proc near       ; CODE XREF: NArchive::N7z::CMethodFull::~CMethodFull(void)+11p
.text:00004BBC
.text:00004BBC var_4           = dword ptr -4
.text:00004BBC
.text:00004BBC                 push    ebp
.text:00004BBD                 mov     ebp, esp
.text:00004BBF                 push    ecx
.text:00004BC0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004BC7                 mov     [ebp+var_4], ecx
.text:00004BCA                 mov     ecx, [ebp+var_4] ; this
.text:00004BCD                 call    ??1CProps@@QAE@XZ ; CProps::~CProps(void)
.text:00004BD2                 add     esp, 4
.text:00004BD5                 cmp     ebp, esp
.text:00004BD7                 call    __RTC_CheckEsp
.text:00004BDC                 mov     esp, ebp
.text:00004BDE                 pop     ebp
.text:00004BDF                 retn
.text:00004BDF ??1CMethodProps@@QAE@XZ endp
.text:00004BDF
.text:00004BDF _text           ends
.text:00004BDF
.text:00004BE0 ; ===========================================================================
.text:00004BE0
.text:00004BE0 ; Segment type: Pure code
.text:00004BE0 ; Segment permissions: Read/Execute
.text:00004BE0 _text           segment para public 'CODE' use32
.text:00004BE0                 assume cs:_text
.text:00004BE0                 ;org 4BE0h
.text:00004BE0 ; COMDAT (pick any)
.text:00004BE0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004BE0
.text:00004BE0 ; =============== S U B R O U T I N E =======================================
.text:00004BE0
.text:00004BE0 ; Attributes: bp-based frame
.text:00004BE0
.text:00004BE0 ; _DWORD __thiscall CProps::~CProps(CProps *__hidden this)
.text:00004BE0                 public ??1CProps@@QAE@XZ
.text:00004BE0 ??1CProps@@QAE@XZ proc near             ; CODE XREF: CMethodProps::~CMethodProps(void)+11p
.text:00004BE0
.text:00004BE0 var_4           = dword ptr -4
.text:00004BE0
.text:00004BE0                 push    ebp
.text:00004BE1                 mov     ebp, esp
.text:00004BE3                 push    ecx
.text:00004BE4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004BEB                 mov     [ebp+var_4], ecx
.text:00004BEE                 mov     ecx, [ebp+var_4]
.text:00004BF1                 call    ??1?$CObjectVector@UCProp@@@@QAE@XZ ; CObjectVector<CProp>::~CObjectVector<CProp>(void)
.text:00004BF6                 add     esp, 4
.text:00004BF9                 cmp     ebp, esp
.text:00004BFB                 call    __RTC_CheckEsp
.text:00004C00                 mov     esp, ebp
.text:00004C02                 pop     ebp
.text:00004C03                 retn
.text:00004C03 ??1CProps@@QAE@XZ endp
.text:00004C03
.text:00004C03 _text           ends
.text:00004C03
.text:00004C04 ; ===========================================================================
.text:00004C04
.text:00004C04 ; Segment type: Pure code
.text:00004C04 ; Segment permissions: Read/Execute
.text:00004C04 _text           segment para public 'CODE' use32
.text:00004C04                 assume cs:_text
.text:00004C04                 ;org 4C04h
.text:00004C04 ; COMDAT (pick any)
.text:00004C04                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004C04
.text:00004C04 ; =============== S U B R O U T I N E =======================================
.text:00004C04
.text:00004C04 ; Attributes: bp-based frame
.text:00004C04
.text:00004C04 ; public: __thiscall CRecordVector<void *>::CRecordVector<void *>(void)
.text:00004C04                 public ??0?$CRecordVector@PAX@@QAE@XZ
.text:00004C04 ??0?$CRecordVector@PAX@@QAE@XZ proc near
.text:00004C04                                         ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::CObjectVector<NArchive::N7z::CMethodFull>(void)+11p
.text:00004C04                                         ; CObjectVector<NArchive::N7z::CFolder>::CObjectVector<NArchive::N7z::CFolder>(void)+11p
.text:00004C04
.text:00004C04 var_4           = dword ptr -4
.text:00004C04
.text:00004C04                 push    ebp
.text:00004C05                 mov     ebp, esp
.text:00004C07                 push    ecx
.text:00004C08                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004C0F                 mov     [ebp+var_4], ecx
.text:00004C12                 mov     eax, [ebp+var_4]
.text:00004C15                 mov     dword ptr [eax], 0
.text:00004C1B                 mov     ecx, [ebp+var_4]
.text:00004C1E                 mov     dword ptr [ecx+4], 0
.text:00004C25                 mov     edx, [ebp+var_4]
.text:00004C28                 mov     dword ptr [edx+8], 0
.text:00004C2F                 mov     eax, [ebp+var_4]
.text:00004C32                 mov     esp, ebp
.text:00004C34                 pop     ebp
.text:00004C35                 retn
.text:00004C35 ??0?$CRecordVector@PAX@@QAE@XZ endp
.text:00004C35
.text:00004C35 ; ---------------------------------------------------------------------------
.text:00004C36                 align 4
.text:00004C36 _text           ends
.text:00004C36
.text:00004C38 ; ===========================================================================
.text:00004C38
.text:00004C38 ; Segment type: Pure code
.text:00004C38 ; Segment permissions: Read/Execute
.text:00004C38 _text           segment para public 'CODE' use32
.text:00004C38                 assume cs:_text
.text:00004C38                 ;org 4C38h
.text:00004C38 ; COMDAT (pick any)
.text:00004C38                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004C38
.text:00004C38 ; =============== S U B R O U T I N E =======================================
.text:00004C38
.text:00004C38 ; Attributes: bp-based frame
.text:00004C38
.text:00004C38 ; public: unsigned int __thiscall CRecordVector<void *>::Size(void)const
.text:00004C38                 public ?Size@?$CRecordVector@PAX@@QBEIXZ
.text:00004C38 ?Size@?$CRecordVector@PAX@@QBEIXZ proc near
.text:00004C38                                         ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>(void)+46p
.text:00004C38                                         ; CObjectVector<NArchive::N7z::CFolder>::Size(void)+11p ...
.text:00004C38
.text:00004C38 var_4           = dword ptr -4
.text:00004C38
.text:00004C38                 push    ebp
.text:00004C39                 mov     ebp, esp
.text:00004C3B                 push    ecx
.text:00004C3C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004C43                 mov     [ebp+var_4], ecx
.text:00004C46                 mov     eax, [ebp+var_4]
.text:00004C49                 mov     eax, [eax+4]
.text:00004C4C                 mov     esp, ebp
.text:00004C4E                 pop     ebp
.text:00004C4F                 retn
.text:00004C4F ?Size@?$CRecordVector@PAX@@QBEIXZ endp
.text:00004C4F
.text:00004C4F _text           ends
.text:00004C4F
.text:00004C50 ; ===========================================================================
.text:00004C50
.text:00004C50 ; Segment type: Pure code
.text:00004C50 ; Segment permissions: Read/Execute
.text:00004C50 _text           segment para public 'CODE' use32
.text:00004C50                 assume cs:_text
.text:00004C50                 ;org 4C50h
.text:00004C50 ; COMDAT (pick any)
.text:00004C50                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004C50
.text:00004C50 ; =============== S U B R O U T I N E =======================================
.text:00004C50
.text:00004C50 ; Attributes: bp-based frame
.text:00004C50
.text:00004C50 ; public: bool __thiscall CRecordVector<void *>::IsEmpty(void)const
.text:00004C50                 public ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ
.text:00004C50 ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ proc near
.text:00004C50                                         ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::IsEmpty(void)+11p
.text:00004C50                                         ; CObjectVector<NArchive::N7z::CFolder>::IsEmpty(void)+11p
.text:00004C50
.text:00004C50 var_4           = dword ptr -4
.text:00004C50
.text:00004C50                 push    ebp
.text:00004C51                 mov     ebp, esp
.text:00004C53                 push    ecx
.text:00004C54                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004C5B                 mov     [ebp+var_4], ecx
.text:00004C5E                 mov     eax, [ebp+var_4]
.text:00004C61                 xor     ecx, ecx
.text:00004C63                 cmp     dword ptr [eax+4], 0
.text:00004C67                 setz    cl
.text:00004C6A                 mov     al, cl
.text:00004C6C                 mov     esp, ebp
.text:00004C6E                 pop     ebp
.text:00004C6F                 retn
.text:00004C6F ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ endp
.text:00004C6F
.text:00004C6F _text           ends
.text:00004C6F
.text:00004C70 ; ===========================================================================
.text:00004C70
.text:00004C70 ; Segment type: Pure code
.text:00004C70 ; Segment permissions: Read/Execute
.text:00004C70 _text           segment para public 'CODE' use32
.text:00004C70                 assume cs:_text
.text:00004C70                 ;org 4C70h
.text:00004C70 ; COMDAT (pick any)
.text:00004C70                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004C70
.text:00004C70 ; =============== S U B R O U T I N E =======================================
.text:00004C70
.text:00004C70 ; Attributes: bp-based frame
.text:00004C70
.text:00004C70 ; public: __thiscall CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00004C70                 public ??1?$CRecordVector@PAX@@QAE@XZ
.text:00004C70 ??1?$CRecordVector@PAX@@QAE@XZ proc near
.text:00004C70                                         ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>(void)+9Cp
.text:00004C70                                         ; __unwindfunclet$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ$0+3j ...
.text:00004C70
.text:00004C70 var_8           = dword ptr -8
.text:00004C70 var_4           = dword ptr -4
.text:00004C70
.text:00004C70                 push    ebp
.text:00004C71                 mov     ebp, esp
.text:00004C73                 sub     esp, 8
.text:00004C76                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004C7D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004C84                 mov     [ebp+var_4], ecx
.text:00004C87                 mov     eax, [ebp+var_4]
.text:00004C8A                 mov     ecx, [eax]
.text:00004C8C                 mov     [ebp+var_8], ecx
.text:00004C8F                 mov     edx, [ebp+var_8]
.text:00004C92                 push    edx             ; void *
.text:00004C93                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00004C98                 add     esp, 4
.text:00004C9B                 add     esp, 8
.text:00004C9E                 cmp     ebp, esp
.text:00004CA0                 call    __RTC_CheckEsp
.text:00004CA5                 mov     esp, ebp
.text:00004CA7                 pop     ebp
.text:00004CA8                 retn
.text:00004CA8 ??1?$CRecordVector@PAX@@QAE@XZ endp
.text:00004CA8
.text:00004CA8 ; ---------------------------------------------------------------------------
.text:00004CA9                 align 4
.text:00004CA9 _text           ends
.text:00004CA9
.text:00004CAC ; ===========================================================================
.text:00004CAC
.text:00004CAC ; Segment type: Pure code
.text:00004CAC ; Segment permissions: Read/Execute
.text:00004CAC _text           segment para public 'CODE' use32
.text:00004CAC                 assume cs:_text
.text:00004CAC                 ;org 4CACh
.text:00004CAC ; COMDAT (pick any)
.text:00004CAC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004CAC
.text:00004CAC ; =============== S U B R O U T I N E =======================================
.text:00004CAC
.text:00004CAC ; Attributes: bp-based frame
.text:00004CAC
.text:00004CAC ; public: unsigned int __thiscall CRecordVector<void *>::Add(void * const)
.text:00004CAC                 public ?Add@?$CRecordVector@PAX@@QAEIQAX@Z
.text:00004CAC ?Add@?$CRecordVector@PAX@@QAEIQAX@Z proc near
.text:00004CAC                                         ; CODE XREF: CObjectVector<NArchive::N7z::CFolder>::AddNew(void)+84p
.text:00004CAC                                         ; CObjectVector<UString>::Add(UString const &)+7Fp
.text:00004CAC
.text:00004CAC var_8           = dword ptr -8
.text:00004CAC var_4           = dword ptr -4
.text:00004CAC arg_0           = dword ptr  8
.text:00004CAC
.text:00004CAC                 push    ebp
.text:00004CAD                 mov     ebp, esp
.text:00004CAF                 sub     esp, 8
.text:00004CB2                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004CB9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004CC0                 mov     [ebp+var_4], ecx
.text:00004CC3                 mov     ecx, [ebp+var_4]
.text:00004CC6                 call    ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition(void)
.text:00004CCB                 mov     eax, [ebp+var_4]
.text:00004CCE                 mov     ecx, [eax+4]
.text:00004CD1                 mov     edx, [ebp+var_4]
.text:00004CD4                 mov     eax, [edx]
.text:00004CD6                 mov     edx, [ebp+arg_0]
.text:00004CD9                 mov     [eax+ecx*4], edx
.text:00004CDC                 mov     eax, [ebp+var_4]
.text:00004CDF                 mov     ecx, [eax+4]
.text:00004CE2                 mov     [ebp+var_8], ecx
.text:00004CE5                 mov     edx, [ebp+var_4]
.text:00004CE8                 mov     eax, [edx+4]
.text:00004CEB                 add     eax, 1
.text:00004CEE                 mov     ecx, [ebp+var_4]
.text:00004CF1                 mov     [ecx+4], eax
.text:00004CF4                 mov     eax, [ebp+var_8]
.text:00004CF7                 add     esp, 8
.text:00004CFA                 cmp     ebp, esp
.text:00004CFC                 call    __RTC_CheckEsp
.text:00004D01                 mov     esp, ebp
.text:00004D03                 pop     ebp
.text:00004D04                 retn    4
.text:00004D04 ?Add@?$CRecordVector@PAX@@QAEIQAX@Z endp
.text:00004D04
.text:00004D04 ; ---------------------------------------------------------------------------
.text:00004D07                 align 4
.text:00004D07 _text           ends
.text:00004D07
.text:00004D08 ; ===========================================================================
.text:00004D08
.text:00004D08 ; Segment type: Pure code
.text:00004D08 ; Segment permissions: Read/Execute
.text:00004D08 _text           segment para public 'CODE' use32
.text:00004D08                 assume cs:_text
.text:00004D08                 ;org 4D08h
.text:00004D08 ; COMDAT (pick any)
.text:00004D08                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004D08
.text:00004D08 ; =============== S U B R O U T I N E =======================================
.text:00004D08
.text:00004D08 ; Attributes: bp-based frame
.text:00004D08
.text:00004D08 ; public: void * const & __thiscall CRecordVector<void *>::operator[](unsigned int)const
.text:00004D08                 public ??A?$CRecordVector@PAX@@QBEABQAXI@Z
.text:00004D08 ??A?$CRecordVector@PAX@@QBEABQAXI@Z proc near
.text:00004D08                                         ; CODE XREF: CObjectVector<NArchive::N7z::CFolder>::operator[](uint)+15p
.text:00004D08                                         ; CObjectVector<UString>::operator[](uint)+15p
.text:00004D08
.text:00004D08 var_4           = dword ptr -4
.text:00004D08 arg_0           = dword ptr  8
.text:00004D08
.text:00004D08                 push    ebp
.text:00004D09                 mov     ebp, esp
.text:00004D0B                 push    ecx
.text:00004D0C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004D13                 mov     [ebp+var_4], ecx
.text:00004D16                 mov     eax, [ebp+var_4]
.text:00004D19                 mov     ecx, [eax]
.text:00004D1B                 mov     edx, [ebp+arg_0]
.text:00004D1E                 lea     eax, [ecx+edx*4]
.text:00004D21                 mov     esp, ebp
.text:00004D23                 pop     ebp
.text:00004D24                 retn    4
.text:00004D24 ??A?$CRecordVector@PAX@@QBEABQAXI@Z endp
.text:00004D24
.text:00004D24 ; ---------------------------------------------------------------------------
.text:00004D27                 align 4
.text:00004D27 _text           ends
.text:00004D27
.text:00004D28 ; ===========================================================================
.text:00004D28
.text:00004D28 ; Segment type: Pure code
.text:00004D28 ; Segment permissions: Read/Execute
.text:00004D28 _text           segment para public 'CODE' use32
.text:00004D28                 assume cs:_text
.text:00004D28                 ;org 4D28h
.text:00004D28 ; COMDAT (pick any)
.text:00004D28                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004D28
.text:00004D28 ; =============== S U B R O U T I N E =======================================
.text:00004D28
.text:00004D28 ; Attributes: bp-based frame
.text:00004D28
.text:00004D28 ; public: void * & __thiscall CRecordVector<void *>::operator[](unsigned int)
.text:00004D28                 public ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
.text:00004D28 ??A?$CRecordVector@PAX@@QAEAAPAXI@Z proc near
.text:00004D28                                         ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>(void)+64p
.text:00004D28                                         ; CObjectVector<NArchive::N7z::CFolder>::~CObjectVector<NArchive::N7z::CFolder>(void)+64p ...
.text:00004D28
.text:00004D28 var_4           = dword ptr -4
.text:00004D28 arg_0           = dword ptr  8
.text:00004D28
.text:00004D28                 push    ebp
.text:00004D29                 mov     ebp, esp
.text:00004D2B                 push    ecx
.text:00004D2C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004D33                 mov     [ebp+var_4], ecx
.text:00004D36                 mov     eax, [ebp+var_4]
.text:00004D39                 mov     ecx, [eax]
.text:00004D3B                 mov     edx, [ebp+arg_0]
.text:00004D3E                 lea     eax, [ecx+edx*4]
.text:00004D41                 mov     esp, ebp
.text:00004D43                 pop     ebp
.text:00004D44                 retn    4
.text:00004D44 ??A?$CRecordVector@PAX@@QAEAAPAXI@Z endp
.text:00004D44
.text:00004D44 ; ---------------------------------------------------------------------------
.text:00004D47                 align 4
.text:00004D47 _text           ends
.text:00004D47
.text:00004D48 ; ===========================================================================
.text:00004D48
.text:00004D48 ; Segment type: Pure code
.text:00004D48 ; Segment permissions: Read/Execute
.text:00004D48 _text           segment para public 'CODE' use32
.text:00004D48                 assume cs:_text
.text:00004D48                 ;org 4D48h
.text:00004D48 ; COMDAT (pick any)
.text:00004D48                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004D48
.text:00004D48 ; =============== S U B R O U T I N E =======================================
.text:00004D48
.text:00004D48 ; Attributes: bp-based frame
.text:00004D48
.text:00004D48 ; public: __thiscall CObjectVector<struct CProp>::~CObjectVector<struct CProp>(void)
.text:00004D48                 public ??1?$CObjectVector@UCProp@@@@QAE@XZ
.text:00004D48 ??1?$CObjectVector@UCProp@@@@QAE@XZ proc near
.text:00004D48                                         ; CODE XREF: CProps::~CProps(void)+11p
.text:00004D48
.text:00004D48 var_20          = dword ptr -20h
.text:00004D48 var_1C          = dword ptr -1Ch
.text:00004D48 var_18          = dword ptr -18h
.text:00004D48 var_14          = dword ptr -14h
.text:00004D48 var_10          = dword ptr -10h
.text:00004D48 var_C           = dword ptr -0Ch
.text:00004D48 var_4           = dword ptr -4
.text:00004D48
.text:00004D48                 push    ebp
.text:00004D49                 mov     ebp, esp
.text:00004D4B                 push    0FFFFFFFFh
.text:00004D4D                 push    offset __ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ
.text:00004D52                 mov     eax, large fs:0
.text:00004D58                 push    eax
.text:00004D59                 sub     esp, 14h
.text:00004D5C                 mov     eax, 0CCCCCCCCh
.text:00004D61                 mov     [ebp+var_20], eax
.text:00004D64                 mov     [ebp+var_1C], eax
.text:00004D67                 mov     [ebp+var_18], eax
.text:00004D6A                 mov     [ebp+var_14], eax
.text:00004D6D                 mov     [ebp+var_10], eax
.text:00004D70                 mov     eax, dword ptr ds:___security_cookie
.text:00004D75                 xor     eax, ebp
.text:00004D77                 push    eax
.text:00004D78                 lea     eax, [ebp+var_C]
.text:00004D7B                 mov     large fs:0, eax
.text:00004D81                 mov     [ebp+var_10], ecx
.text:00004D84                 mov     [ebp+var_4], 0
.text:00004D8B                 mov     ecx, [ebp+var_10]
.text:00004D8E                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00004D93                 mov     [ebp+var_14], eax
.text:00004D96
.text:00004D96 loc_4D96:                               ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void):loc_4DD8j
.text:00004D96                 cmp     [ebp+var_14], 0
.text:00004D9A                 jz      short loc_4DDA
.text:00004D9C                 mov     eax, [ebp+var_14]
.text:00004D9F                 sub     eax, 1
.text:00004DA2                 mov     [ebp+var_14], eax
.text:00004DA5                 mov     ecx, [ebp+var_14]
.text:00004DA8                 push    ecx
.text:00004DA9                 mov     ecx, [ebp+var_10]
.text:00004DAC                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00004DB1                 mov     edx, [eax]
.text:00004DB3                 mov     [ebp+var_1C], edx
.text:00004DB6                 mov     eax, [ebp+var_1C]
.text:00004DB9                 mov     [ebp+var_18], eax
.text:00004DBC                 cmp     [ebp+var_18], 0
.text:00004DC0                 jz      short loc_4DD1
.text:00004DC2                 push    1
.text:00004DC4                 mov     ecx, [ebp+var_18]
.text:00004DC7                 call    ??_GCProp@@QAEPAXI@Z ; CProp::`scalar deleting destructor'(uint)
.text:00004DCC                 mov     [ebp+var_20], eax
.text:00004DCF                 jmp     short loc_4DD8
.text:00004DD1 ; ---------------------------------------------------------------------------
.text:00004DD1
.text:00004DD1 loc_4DD1:                               ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+78j
.text:00004DD1                 mov     [ebp+var_20], 0
.text:00004DD8
.text:00004DD8 loc_4DD8:                               ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+87j
.text:00004DD8                 jmp     short loc_4D96
.text:00004DDA ; ---------------------------------------------------------------------------
.text:00004DDA
.text:00004DDA loc_4DDA:                               ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+52j
.text:00004DDA                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004DE1                 mov     ecx, [ebp+var_10]
.text:00004DE4                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00004DE9                 mov     ecx, [ebp+var_C]
.text:00004DEC                 mov     large fs:0, ecx
.text:00004DF3                 pop     ecx
.text:00004DF4                 add     esp, 20h
.text:00004DF7                 cmp     ebp, esp
.text:00004DF9                 call    __RTC_CheckEsp
.text:00004DFE                 mov     esp, ebp
.text:00004E00                 pop     ebp
.text:00004E01                 retn
.text:00004E01 ??1?$CObjectVector@UCProp@@@@QAE@XZ endp
.text:00004E01
.text:00004E01 ; ---------------------------------------------------------------------------
.text:00004E02                 align 4
.text:00004E02 _text           ends
.text:00004E02
.text$x:00004E04 ; ===========================================================================
.text$x:00004E04
.text$x:00004E04 ; Segment type: Pure code
.text$x:00004E04 ; Segment permissions: Read/Execute
.text$x:00004E04 _text$x         segment para public 'CODE' use32
.text$x:00004E04                 assume cs:_text$x
.text$x:00004E04                 ;org 4E04h
.text$x:00004E04 ; COMDAT (pick associative to section at 4D48)
.text$x:00004E04                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00004E04
.text$x:00004E04 ; =============== S U B R O U T I N E =======================================
.text$x:00004E04
.text$x:00004E04
.text$x:00004E04 __unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0 proc near
.text$x:00004E04                                         ; DATA XREF: .xdata$x:00004E2Co
.text$x:00004E04                 mov     ecx, [ebp-10h]
.text$x:00004E07                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:00004E07 __unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0 endp
.text$x:00004E07
.text$x:00004E0C
.text$x:00004E0C ; =============== S U B R O U T I N E =======================================
.text$x:00004E0C
.text$x:00004E0C
.text$x:00004E0C __ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ proc near
.text$x:00004E0C                                         ; DATA XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+5o
.text$x:00004E0C
.text$x:00004E0C arg_4           = dword ptr  8
.text$x:00004E0C
.text$x:00004E0C                 mov     edx, [esp+arg_4]
.text$x:00004E10                 lea     eax, [edx+0Ch]
.text$x:00004E13                 mov     ecx, [edx-18h]
.text$x:00004E16                 xor     ecx, eax
.text$x:00004E18                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004E1D                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@UCProp@@@@QAE@XZ
.text$x:00004E22                 jmp     ___CxxFrameHandler3
.text$x:00004E22 __ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ endp
.text$x:00004E22
.text$x:00004E22 ; ---------------------------------------------------------------------------
.text$x:00004E27                 align 4
.text$x:00004E27 _text$x         ends
.text$x:00004E27
.xdata$x:00004E28 ; ===========================================================================
.xdata$x:00004E28
.xdata$x:00004E28 ; Segment type: Pure data
.xdata$x:00004E28 ; Segment permissions: Read
.xdata$x:00004E28 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004E28                 assume cs:_xdata$x
.xdata$x:00004E28                 ;org 4E28h
.xdata$x:00004E28 ; COMDAT (pick associative to section at 4D48)
.xdata$x:00004E28 __unwindtable$??1?$CObjectVector@UCProp@@@@QAE@XZ db 0FFh
.xdata$x:00004E28                                         ; DATA XREF: .xdata$x:00004E38o
.xdata$x:00004E29                 db 0FFh
.xdata$x:00004E2A                 db 0FFh
.xdata$x:00004E2B                 db 0FFh
.xdata$x:00004E2C                 dd offset __unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0
.xdata$x:00004E30 __ehfuncinfo$??1?$CObjectVector@UCProp@@@@QAE@XZ db  22h ; "
.xdata$x:00004E30                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ+11o
.xdata$x:00004E31                 db    5
.xdata$x:00004E32                 db  93h ; ô
.xdata$x:00004E33                 db  19h
.xdata$x:00004E34                 db    1
.xdata$x:00004E35                 db    0
.xdata$x:00004E36                 db    0
.xdata$x:00004E37                 db    0
.xdata$x:00004E38                 dd offset __unwindtable$??1?$CObjectVector@UCProp@@@@QAE@XZ
.xdata$x:00004E3C                 db    0
.xdata$x:00004E3D                 db    0
.xdata$x:00004E3E                 db    0
.xdata$x:00004E3F                 db    0
.xdata$x:00004E40                 db    0
.xdata$x:00004E41                 db    0
.xdata$x:00004E42                 db    0
.xdata$x:00004E43                 db    0
.xdata$x:00004E44                 db    0
.xdata$x:00004E45                 db    0
.xdata$x:00004E46                 db    0
.xdata$x:00004E47                 db    0
.xdata$x:00004E48                 db    0
.xdata$x:00004E49                 db    0
.xdata$x:00004E4A                 db    0
.xdata$x:00004E4B                 db    0
.xdata$x:00004E4C                 db    0
.xdata$x:00004E4D                 db    0
.xdata$x:00004E4E                 db    0
.xdata$x:00004E4F                 db    0
.xdata$x:00004E50                 db    1
.xdata$x:00004E51                 db    0
.xdata$x:00004E52                 db    0
.xdata$x:00004E53                 db    0
.xdata$x:00004E53 _xdata$x        ends
.xdata$x:00004E53
.text:00004E54 ; ===========================================================================
.text:00004E54
.text:00004E54 ; Segment type: Pure code
.text:00004E54 ; Segment permissions: Read/Execute
.text:00004E54 _text           segment para public 'CODE' use32
.text:00004E54                 assume cs:_text
.text:00004E54                 ;org 4E54h
.text:00004E54 ; COMDAT (pick any)
.text:00004E54                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004E54
.text:00004E54 ; =============== S U B R O U T I N E =======================================
.text:00004E54
.text:00004E54 ; Attributes: bp-based frame
.text:00004E54
.text:00004E54 ; public: void * __thiscall CProp::`scalar deleting destructor'(unsigned int)
.text:00004E54                 public ??_GCProp@@QAEPAXI@Z
.text:00004E54 ??_GCProp@@QAEPAXI@Z proc near          ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+7Fp
.text:00004E54
.text:00004E54 var_4           = dword ptr -4
.text:00004E54 arg_0           = dword ptr  8
.text:00004E54
.text:00004E54                 push    ebp
.text:00004E55                 mov     ebp, esp
.text:00004E57                 push    ecx
.text:00004E58                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004E5F                 mov     [ebp+var_4], ecx
.text:00004E62                 mov     ecx, [ebp+var_4] ; this
.text:00004E65                 call    ??1CProp@@QAE@XZ ; CProp::~CProp(void)
.text:00004E6A                 mov     eax, [ebp+arg_0]
.text:00004E6D                 and     eax, 1
.text:00004E70                 jz      short loc_4E7E
.text:00004E72                 mov     ecx, [ebp+var_4]
.text:00004E75                 push    ecx             ; void *
.text:00004E76                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00004E7B                 add     esp, 4
.text:00004E7E
.text:00004E7E loc_4E7E:                               ; CODE XREF: CProp::`scalar deleting destructor'(uint)+1Cj
.text:00004E7E                 mov     eax, [ebp+var_4]
.text:00004E81                 add     esp, 4
.text:00004E84                 cmp     ebp, esp
.text:00004E86                 call    __RTC_CheckEsp
.text:00004E8B                 mov     esp, ebp
.text:00004E8D                 pop     ebp
.text:00004E8E                 retn    4
.text:00004E8E ??_GCProp@@QAEPAXI@Z endp
.text:00004E8E
.text:00004E8E ; ---------------------------------------------------------------------------
.text:00004E91                 align 4
.text:00004E91 _text           ends
.text:00004E91
.text:00004E94 ; ===========================================================================
.text:00004E94
.text:00004E94 ; Segment type: Pure code
.text:00004E94 ; Segment permissions: Read/Execute
.text:00004E94 _text           segment para public 'CODE' use32
.text:00004E94                 assume cs:_text
.text:00004E94                 ;org 4E94h
.text:00004E94 ; COMDAT (pick any)
.text:00004E94                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004E94
.text:00004E94 ; =============== S U B R O U T I N E =======================================
.text:00004E94
.text:00004E94 ; Attributes: bp-based frame
.text:00004E94
.text:00004E94 ; _DWORD __thiscall CProp::~CProp(CProp *__hidden this)
.text:00004E94                 public ??1CProp@@QAE@XZ
.text:00004E94 ??1CProp@@QAE@XZ proc near              ; CODE XREF: CProp::`scalar deleting destructor'(uint)+11p
.text:00004E94
.text:00004E94 var_4           = dword ptr -4
.text:00004E94
.text:00004E94                 push    ebp
.text:00004E95                 mov     ebp, esp
.text:00004E97                 push    ecx
.text:00004E98                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004E9F                 mov     [ebp+var_4], ecx
.text:00004EA2                 mov     ecx, [ebp+var_4]
.text:00004EA5                 add     ecx, 8          ; this
.text:00004EA8                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00004EAD                 add     esp, 4
.text:00004EB0                 cmp     ebp, esp
.text:00004EB2                 call    __RTC_CheckEsp
.text:00004EB7                 mov     esp, ebp
.text:00004EB9                 pop     ebp
.text:00004EBA                 retn
.text:00004EBA ??1CProp@@QAE@XZ endp
.text:00004EBA
.text:00004EBA ; ---------------------------------------------------------------------------
.text:00004EBB                 align 4
.text:00004EBB _text           ends
.text:00004EBB
.text:00004EBC ; ===========================================================================
.text:00004EBC
.text:00004EBC ; Segment type: Pure code
.text:00004EBC ; Segment permissions: Read/Execute
.text:00004EBC _text           segment para public 'CODE' use32
.text:00004EBC                 assume cs:_text
.text:00004EBC                 ;org 4EBCh
.text:00004EBC ; COMDAT (pick any)
.text:00004EBC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004EBC
.text:00004EBC ; =============== S U B R O U T I N E =======================================
.text:00004EBC
.text:00004EBC ; Attributes: bp-based frame
.text:00004EBC
.text:00004EBC ; _DWORD __thiscall NWindows::NCOM::CPropVariant::~CPropVariant(NWindows::NCOM::CPropVariant *__hidden this)
.text:00004EBC                 public ??1CPropVariant@NCOM@NWindows@@QAE@XZ
.text:00004EBC ??1CPropVariant@NCOM@NWindows@@QAE@XZ proc near
.text:00004EBC                                         ; CODE XREF: CProp::~CProp(void)+14p
.text:00004EBC
.text:00004EBC var_4           = dword ptr -4
.text:00004EBC
.text:00004EBC                 push    ebp
.text:00004EBD                 mov     ebp, esp
.text:00004EBF                 push    ecx
.text:00004EC0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004EC7                 mov     [ebp+var_4], ecx
.text:00004ECA                 mov     ecx, [ebp+var_4] ; this
.text:00004ECD                 call    ?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ ; NWindows::NCOM::CPropVariant::Clear(void)
.text:00004ED2                 add     esp, 4
.text:00004ED5                 cmp     ebp, esp
.text:00004ED7                 call    __RTC_CheckEsp
.text:00004EDC                 mov     esp, ebp
.text:00004EDE                 pop     ebp
.text:00004EDF                 retn
.text:00004EDF ??1CPropVariant@NCOM@NWindows@@QAE@XZ endp
.text:00004EDF
.text:00004EDF _text           ends
.text:00004EDF
.text:00004EE0 ; ===========================================================================
.text:00004EE0
.text:00004EE0 ; Segment type: Pure code
.text:00004EE0 ; Segment permissions: Read/Execute
.text:00004EE0 _text           segment para public 'CODE' use32
.text:00004EE0                 assume cs:_text
.text:00004EE0                 ;org 4EE0h
.text:00004EE0 ; COMDAT (pick any)
.text:00004EE0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004EE0
.text:00004EE0 ; =============== S U B R O U T I N E =======================================
.text:00004EE0
.text:00004EE0 ; Attributes: bp-based frame
.text:00004EE0
.text:00004EE0 ; private: void __thiscall CRecordVector<unsigned int>::ReserveOnePosition(void)
.text:00004EE0                 public ?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ
.text:00004EE0 ?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ proc near
.text:00004EE0                                         ; CODE XREF: CRecordVector<uint>::Add(uint)+1Ap
.text:00004EE0
.text:00004EE0 var_14          = dword ptr -14h
.text:00004EE0 var_10          = dword ptr -10h
.text:00004EE0 Dst             = dword ptr -0Ch
.text:00004EE0 var_8           = dword ptr -8
.text:00004EE0 var_4           = dword ptr -4
.text:00004EE0
.text:00004EE0                 push    ebp
.text:00004EE1                 mov     ebp, esp
.text:00004EE3                 sub     esp, 14h
.text:00004EE6                 mov     eax, 0CCCCCCCCh
.text:00004EEB                 mov     [ebp+var_14], eax
.text:00004EEE                 mov     [ebp+var_10], eax
.text:00004EF1                 mov     [ebp+Dst], eax
.text:00004EF4                 mov     [ebp+var_8], eax
.text:00004EF7                 mov     [ebp+var_4], eax
.text:00004EFA                 mov     [ebp+var_4], ecx
.text:00004EFD                 mov     eax, [ebp+var_4]
.text:00004F00                 mov     ecx, [ebp+var_4]
.text:00004F03                 mov     edx, [eax+4]
.text:00004F06                 cmp     edx, [ecx+8]
.text:00004F09                 jnz     loc_4F94
.text:00004F0F                 mov     eax, [ebp+var_4]
.text:00004F12                 mov     ecx, [eax+8]
.text:00004F15                 shr     ecx, 2
.text:00004F18                 mov     edx, [ebp+var_4]
.text:00004F1B                 mov     eax, [edx+8]
.text:00004F1E                 lea     ecx, [eax+ecx+1]
.text:00004F22                 mov     [ebp+var_8], ecx
.text:00004F25                 xor     ecx, ecx
.text:00004F27                 mov     eax, [ebp+var_8]
.text:00004F2A                 mov     edx, 4
.text:00004F2F                 mul     edx
.text:00004F31                 seto    cl
.text:00004F34                 neg     ecx
.text:00004F36                 or      ecx, eax
.text:00004F38                 push    ecx             ; unsigned int
.text:00004F39                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00004F3E                 add     esp, 4
.text:00004F41                 mov     [ebp+var_10], eax
.text:00004F44                 mov     eax, [ebp+var_10]
.text:00004F47                 mov     [ebp+Dst], eax
.text:00004F4A                 mov     ecx, [ebp+var_4]
.text:00004F4D                 cmp     dword ptr [ecx+4], 0
.text:00004F51                 jz      short loc_4F6F
.text:00004F53                 mov     edx, [ebp+var_4]
.text:00004F56                 mov     eax, [edx+4]
.text:00004F59                 shl     eax, 2
.text:00004F5C                 push    eax             ; Size
.text:00004F5D                 mov     ecx, [ebp+var_4]
.text:00004F60                 mov     edx, [ecx]
.text:00004F62                 push    edx             ; Src
.text:00004F63                 mov     eax, [ebp+Dst]
.text:00004F66                 push    eax             ; Dst
.text:00004F67                 call    _memcpy
.text:00004F6C                 add     esp, 0Ch
.text:00004F6F
.text:00004F6F loc_4F6F:                               ; CODE XREF: CRecordVector<uint>::ReserveOnePosition(void)+71j
.text:00004F6F                 mov     ecx, [ebp+var_4]
.text:00004F72                 mov     edx, [ecx]
.text:00004F74                 mov     [ebp+var_14], edx
.text:00004F77                 mov     eax, [ebp+var_14]
.text:00004F7A                 push    eax             ; void *
.text:00004F7B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00004F80                 add     esp, 4
.text:00004F83                 mov     ecx, [ebp+var_4]
.text:00004F86                 mov     edx, [ebp+Dst]
.text:00004F89                 mov     [ecx], edx
.text:00004F8B                 mov     eax, [ebp+var_4]
.text:00004F8E                 mov     ecx, [ebp+var_8]
.text:00004F91                 mov     [eax+8], ecx
.text:00004F94
.text:00004F94 loc_4F94:                               ; CODE XREF: CRecordVector<uint>::ReserveOnePosition(void)+29j
.text:00004F94                 add     esp, 14h
.text:00004F97                 cmp     ebp, esp
.text:00004F99                 call    __RTC_CheckEsp
.text:00004F9E                 mov     esp, ebp
.text:00004FA0                 pop     ebp
.text:00004FA1                 retn
.text:00004FA1 ?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ endp
.text:00004FA1
.text:00004FA1 ; ---------------------------------------------------------------------------
.text:00004FA2                 align 4
.text:00004FA2 _text           ends
.text:00004FA2
.text:00004FA4 ; ===========================================================================
.text:00004FA4
.text:00004FA4 ; Segment type: Pure code
.text:00004FA4 ; Segment permissions: Read/Execute
.text:00004FA4 _text           segment para public 'CODE' use32
.text:00004FA4                 assume cs:_text
.text:00004FA4                 ;org 4FA4h
.text:00004FA4 ; COMDAT (pick any)
.text:00004FA4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004FA4
.text:00004FA4 ; =============== S U B R O U T I N E =======================================
.text:00004FA4
.text:00004FA4 ; Attributes: bp-based frame
.text:00004FA4
.text:00004FA4 ; private: void __thiscall CRecordVector<unsigned __int64>::ReserveOnePosition(void)
.text:00004FA4                 public ?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ
.text:00004FA4 ?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ proc near
.text:00004FA4                                         ; CODE XREF: CRecordVector<unsigned __int64>::Add(unsigned __int64)+1Ap
.text:00004FA4
.text:00004FA4 var_14          = dword ptr -14h
.text:00004FA4 var_10          = dword ptr -10h
.text:00004FA4 Dst             = dword ptr -0Ch
.text:00004FA4 var_8           = dword ptr -8
.text:00004FA4 var_4           = dword ptr -4
.text:00004FA4
.text:00004FA4                 push    ebp
.text:00004FA5                 mov     ebp, esp
.text:00004FA7                 sub     esp, 14h
.text:00004FAA                 mov     eax, 0CCCCCCCCh
.text:00004FAF                 mov     [ebp+var_14], eax
.text:00004FB2                 mov     [ebp+var_10], eax
.text:00004FB5                 mov     [ebp+Dst], eax
.text:00004FB8                 mov     [ebp+var_8], eax
.text:00004FBB                 mov     [ebp+var_4], eax
.text:00004FBE                 mov     [ebp+var_4], ecx
.text:00004FC1                 mov     eax, [ebp+var_4]
.text:00004FC4                 mov     ecx, [ebp+var_4]
.text:00004FC7                 mov     edx, [eax+4]
.text:00004FCA                 cmp     edx, [ecx+8]
.text:00004FCD                 jnz     loc_5058
.text:00004FD3                 mov     eax, [ebp+var_4]
.text:00004FD6                 mov     ecx, [eax+8]
.text:00004FD9                 shr     ecx, 2
.text:00004FDC                 mov     edx, [ebp+var_4]
.text:00004FDF                 mov     eax, [edx+8]
.text:00004FE2                 lea     ecx, [eax+ecx+1]
.text:00004FE6                 mov     [ebp+var_8], ecx
.text:00004FE9                 xor     ecx, ecx
.text:00004FEB                 mov     eax, [ebp+var_8]
.text:00004FEE                 mov     edx, 8
.text:00004FF3                 mul     edx
.text:00004FF5                 seto    cl
.text:00004FF8                 neg     ecx
.text:00004FFA                 or      ecx, eax
.text:00004FFC                 push    ecx             ; unsigned int
.text:00004FFD                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00005002                 add     esp, 4
.text:00005005                 mov     [ebp+var_10], eax
.text:00005008                 mov     eax, [ebp+var_10]
.text:0000500B                 mov     [ebp+Dst], eax
.text:0000500E                 mov     ecx, [ebp+var_4]
.text:00005011                 cmp     dword ptr [ecx+4], 0
.text:00005015                 jz      short loc_5033
.text:00005017                 mov     edx, [ebp+var_4]
.text:0000501A                 mov     eax, [edx+4]
.text:0000501D                 shl     eax, 3
.text:00005020                 push    eax             ; Size
.text:00005021                 mov     ecx, [ebp+var_4]
.text:00005024                 mov     edx, [ecx]
.text:00005026                 push    edx             ; Src
.text:00005027                 mov     eax, [ebp+Dst]
.text:0000502A                 push    eax             ; Dst
.text:0000502B                 call    _memcpy
.text:00005030                 add     esp, 0Ch
.text:00005033
.text:00005033 loc_5033:                               ; CODE XREF: CRecordVector<unsigned __int64>::ReserveOnePosition(void)+71j
.text:00005033                 mov     ecx, [ebp+var_4]
.text:00005036                 mov     edx, [ecx]
.text:00005038                 mov     [ebp+var_14], edx
.text:0000503B                 mov     eax, [ebp+var_14]
.text:0000503E                 push    eax             ; void *
.text:0000503F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00005044                 add     esp, 4
.text:00005047                 mov     ecx, [ebp+var_4]
.text:0000504A                 mov     edx, [ebp+Dst]
.text:0000504D                 mov     [ecx], edx
.text:0000504F                 mov     eax, [ebp+var_4]
.text:00005052                 mov     ecx, [ebp+var_8]
.text:00005055                 mov     [eax+8], ecx
.text:00005058
.text:00005058 loc_5058:                               ; CODE XREF: CRecordVector<unsigned __int64>::ReserveOnePosition(void)+29j
.text:00005058                 add     esp, 14h
.text:0000505B                 cmp     ebp, esp
.text:0000505D                 call    __RTC_CheckEsp
.text:00005062                 mov     esp, ebp
.text:00005064                 pop     ebp
.text:00005065                 retn
.text:00005065 ?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ endp
.text:00005065
.text:00005065 ; ---------------------------------------------------------------------------
.text:00005066                 align 4
.text:00005066 _text           ends
.text:00005066
.text:00005068 ; ===========================================================================
.text:00005068
.text:00005068 ; Segment type: Pure code
.text:00005068 ; Segment permissions: Read/Execute
.text:00005068 _text           segment para public 'CODE' use32
.text:00005068                 assume cs:_text
.text:00005068                 ;org 5068h
.text:00005068 ; COMDAT (pick any)
.text:00005068                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005068
.text:00005068 ; =============== S U B R O U T I N E =======================================
.text:00005068
.text:00005068 ; Attributes: bp-based frame
.text:00005068
.text:00005068 ; private: void __thiscall CRecordVector<bool>::ReserveOnePosition(void)
.text:00005068                 public ?ReserveOnePosition@?$CRecordVector@_N@@AAEXXZ
.text:00005068 ?ReserveOnePosition@?$CRecordVector@_N@@AAEXXZ proc near
.text:00005068                                         ; CODE XREF: CRecordVector<bool>::Add(bool)+1Ap
.text:00005068
.text:00005068 var_14          = dword ptr -14h
.text:00005068 var_10          = dword ptr -10h
.text:00005068 Dst             = dword ptr -0Ch
.text:00005068 var_8           = dword ptr -8
.text:00005068 var_4           = dword ptr -4
.text:00005068
.text:00005068                 push    ebp
.text:00005069                 mov     ebp, esp
.text:0000506B                 sub     esp, 14h
.text:0000506E                 mov     eax, 0CCCCCCCCh
.text:00005073                 mov     [ebp+var_14], eax
.text:00005076                 mov     [ebp+var_10], eax
.text:00005079                 mov     [ebp+Dst], eax
.text:0000507C                 mov     [ebp+var_8], eax
.text:0000507F                 mov     [ebp+var_4], eax
.text:00005082                 mov     [ebp+var_4], ecx
.text:00005085                 mov     eax, [ebp+var_4]
.text:00005088                 mov     ecx, [ebp+var_4]
.text:0000508B                 mov     edx, [eax+4]
.text:0000508E                 cmp     edx, [ecx+8]
.text:00005091                 jnz     short loc_5105
.text:00005093                 mov     eax, [ebp+var_4]
.text:00005096                 mov     ecx, [eax+8]
.text:00005099                 shr     ecx, 2
.text:0000509C                 mov     edx, [ebp+var_4]
.text:0000509F                 mov     eax, [edx+8]
.text:000050A2                 lea     ecx, [eax+ecx+1]
.text:000050A6                 mov     [ebp+var_8], ecx
.text:000050A9                 mov     edx, [ebp+var_8]
.text:000050AC                 push    edx             ; unsigned int
.text:000050AD                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000050B2                 add     esp, 4
.text:000050B5                 mov     [ebp+var_10], eax
.text:000050B8                 mov     eax, [ebp+var_10]
.text:000050BB                 mov     [ebp+Dst], eax
.text:000050BE                 mov     ecx, [ebp+var_4]
.text:000050C1                 cmp     dword ptr [ecx+4], 0
.text:000050C5                 jz      short loc_50E0
.text:000050C7                 mov     edx, [ebp+var_4]
.text:000050CA                 mov     eax, [edx+4]
.text:000050CD                 push    eax             ; Size
.text:000050CE                 mov     ecx, [ebp+var_4]
.text:000050D1                 mov     edx, [ecx]
.text:000050D3                 push    edx             ; Src
.text:000050D4                 mov     eax, [ebp+Dst]
.text:000050D7                 push    eax             ; Dst
.text:000050D8                 call    _memcpy
.text:000050DD                 add     esp, 0Ch
.text:000050E0
.text:000050E0 loc_50E0:                               ; CODE XREF: CRecordVector<bool>::ReserveOnePosition(void)+5Dj
.text:000050E0                 mov     ecx, [ebp+var_4]
.text:000050E3                 mov     edx, [ecx]
.text:000050E5                 mov     [ebp+var_14], edx
.text:000050E8                 mov     eax, [ebp+var_14]
.text:000050EB                 push    eax             ; void *
.text:000050EC                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000050F1                 add     esp, 4
.text:000050F4                 mov     ecx, [ebp+var_4]
.text:000050F7                 mov     edx, [ebp+Dst]
.text:000050FA                 mov     [ecx], edx
.text:000050FC                 mov     eax, [ebp+var_4]
.text:000050FF                 mov     ecx, [ebp+var_8]
.text:00005102                 mov     [eax+8], ecx
.text:00005105
.text:00005105 loc_5105:                               ; CODE XREF: CRecordVector<bool>::ReserveOnePosition(void)+29j
.text:00005105                 add     esp, 14h
.text:00005108                 cmp     ebp, esp
.text:0000510A                 call    __RTC_CheckEsp
.text:0000510F                 mov     esp, ebp
.text:00005111                 pop     ebp
.text:00005112                 retn
.text:00005112 ?ReserveOnePosition@?$CRecordVector@_N@@AAEXXZ endp
.text:00005112
.text:00005112 ; ---------------------------------------------------------------------------
.text:00005113                 align 4
.text:00005113 _text           ends
.text:00005113
.text:00005114 ; ===========================================================================
.text:00005114
.text:00005114 ; Segment type: Pure code
.text:00005114 ; Segment permissions: Read/Execute
.text:00005114 _text           segment para public 'CODE' use32
.text:00005114                 assume cs:_text
.text:00005114                 ;org 5114h
.text:00005114 ; COMDAT (pick any)
.text:00005114                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005114
.text:00005114 ; =============== S U B R O U T I N E =======================================
.text:00005114
.text:00005114 ; Attributes: bp-based frame
.text:00005114
.text:00005114 ; public: void __thiscall CRecordVector<bool>::ClearAndReserve(unsigned int)
.text:00005114                 public ?ClearAndReserve@?$CRecordVector@_N@@QAEXI@Z
.text:00005114 ?ClearAndReserve@?$CRecordVector@_N@@QAEXI@Z proc near
.text:00005114                                         ; CODE XREF: CRecordVector<bool>::ClearAndSetSize(uint)+15p
.text:00005114
.text:00005114 var_C           = dword ptr -0Ch
.text:00005114 var_8           = dword ptr -8
.text:00005114 var_4           = dword ptr -4
.text:00005114 arg_0           = dword ptr  8
.text:00005114
.text:00005114                 push    ebp
.text:00005115                 mov     ebp, esp
.text:00005117                 sub     esp, 0Ch
.text:0000511A                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00005121                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005128                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000512F                 mov     [ebp+var_4], ecx
.text:00005132                 mov     ecx, [ebp+var_4]
.text:00005135                 call    ?Clear@?$CRecordVector@_N@@QAEXXZ ; CRecordVector<bool>::Clear(void)
.text:0000513A                 mov     eax, [ebp+var_4]
.text:0000513D                 mov     ecx, [ebp+arg_0]
.text:00005140                 cmp     ecx, [eax+8]
.text:00005143                 jbe     short loc_518C
.text:00005145                 mov     edx, [ebp+var_4]
.text:00005148                 mov     eax, [edx]
.text:0000514A                 mov     [ebp+var_8], eax
.text:0000514D                 mov     ecx, [ebp+var_8]
.text:00005150                 push    ecx             ; void *
.text:00005151                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00005156                 add     esp, 4
.text:00005159                 mov     edx, [ebp+var_4]
.text:0000515C                 mov     dword ptr [edx], 0
.text:00005162                 mov     eax, [ebp+var_4]
.text:00005165                 mov     dword ptr [eax+8], 0
.text:0000516C                 mov     ecx, [ebp+arg_0]
.text:0000516F                 push    ecx             ; unsigned int
.text:00005170                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00005175                 add     esp, 4
.text:00005178                 mov     [ebp+var_C], eax
.text:0000517B                 mov     edx, [ebp+var_4]
.text:0000517E                 mov     eax, [ebp+var_C]
.text:00005181                 mov     [edx], eax
.text:00005183                 mov     ecx, [ebp+var_4]
.text:00005186                 mov     edx, [ebp+arg_0]
.text:00005189                 mov     [ecx+8], edx
.text:0000518C
.text:0000518C loc_518C:                               ; CODE XREF: CRecordVector<bool>::ClearAndReserve(uint)+2Fj
.text:0000518C                 add     esp, 0Ch
.text:0000518F                 cmp     ebp, esp
.text:00005191                 call    __RTC_CheckEsp
.text:00005196                 mov     esp, ebp
.text:00005198                 pop     ebp
.text:00005199                 retn    4
.text:00005199 ?ClearAndReserve@?$CRecordVector@_N@@QAEXI@Z endp
.text:00005199
.text:00005199 _text           ends
.text:00005199
.text:0000519C ; ===========================================================================
.text:0000519C
.text:0000519C ; Segment type: Pure code
.text:0000519C ; Segment permissions: Read/Execute
.text:0000519C _text           segment para public 'CODE' use32
.text:0000519C                 assume cs:_text
.text:0000519C                 ;org 519Ch
.text:0000519C ; COMDAT (pick any)
.text:0000519C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000519C
.text:0000519C ; =============== S U B R O U T I N E =======================================
.text:0000519C
.text:0000519C ; Attributes: bp-based frame
.text:0000519C
.text:0000519C ; public: void __thiscall CRecordVector<bool>::Clear(void)
.text:0000519C                 public ?Clear@?$CRecordVector@_N@@QAEXXZ
.text:0000519C ?Clear@?$CRecordVector@_N@@QAEXXZ proc near
.text:0000519C                                         ; CODE XREF: CRecordVector<bool>::ClearAndReserve(uint)+21p
.text:0000519C
.text:0000519C var_4           = dword ptr -4
.text:0000519C
.text:0000519C                 push    ebp
.text:0000519D                 mov     ebp, esp
.text:0000519F                 push    ecx
.text:000051A0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000051A7                 mov     [ebp+var_4], ecx
.text:000051AA                 mov     eax, [ebp+var_4]
.text:000051AD                 mov     dword ptr [eax+4], 0
.text:000051B4                 mov     esp, ebp
.text:000051B6                 pop     ebp
.text:000051B7                 retn
.text:000051B7 ?Clear@?$CRecordVector@_N@@QAEXXZ endp
.text:000051B7
.text:000051B7 _text           ends
.text:000051B7
.text:000051B8 ; ===========================================================================
.text:000051B8
.text:000051B8 ; Segment type: Pure code
.text:000051B8 ; Segment permissions: Read/Execute
.text:000051B8 _text           segment para public 'CODE' use32
.text:000051B8                 assume cs:_text
.text:000051B8                 ;org 51B8h
.text:000051B8 ; COMDAT (pick any)
.text:000051B8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000051B8
.text:000051B8 ; =============== S U B R O U T I N E =======================================
.text:000051B8
.text:000051B8 ; Attributes: bp-based frame
.text:000051B8
.text:000051B8 ; private: void __thiscall CRecordVector<struct NArchive::N7z::CFileItem>::ReserveOnePosition(void)
.text:000051B8                 public ?ReserveOnePosition@?$CRecordVector@UCFileItem@N7z@NArchive@@@@AAEXXZ
.text:000051B8 ?ReserveOnePosition@?$CRecordVector@UCFileItem@N7z@NArchive@@@@AAEXXZ proc near
.text:000051B8                                         ; CODE XREF: CRecordVector<NArchive::N7z::CFileItem>::Add(NArchive::N7z::CFileItem)+1Ap
.text:000051B8
.text:000051B8 var_2C          = dword ptr -2Ch
.text:000051B8 var_28          = dword ptr -28h
.text:000051B8 var_24          = dword ptr -24h
.text:000051B8 var_20          = dword ptr -20h
.text:000051B8 var_1C          = dword ptr -1Ch
.text:000051B8 Dst             = dword ptr -18h
.text:000051B8 var_14          = dword ptr -14h
.text:000051B8 var_10          = dword ptr -10h
.text:000051B8 var_C           = dword ptr -0Ch
.text:000051B8 var_4           = dword ptr -4
.text:000051B8
.text:000051B8                 push    ebp
.text:000051B9                 mov     ebp, esp
.text:000051BB                 push    0FFFFFFFFh
.text:000051BD                 push    offset __ehhandler$?ReserveOnePosition@?$CRecordVector@UCFileItem@N7z@NArchive@@@@AAEXXZ
.text:000051C2                 mov     eax, large fs:0
.text:000051C8                 push    eax
.text:000051C9                 sub     esp, 20h
.text:000051CC                 mov     eax, 0CCCCCCCCh
.text:000051D1                 mov     [ebp+var_2C], eax
.text:000051D4                 mov     [ebp+var_28], eax
.text:000051D7                 mov     [ebp+var_24], eax
.text:000051DA                 mov     [ebp+var_20], eax
.text:000051DD                 mov     [ebp+var_1C], eax
.text:000051E0                 mov     [ebp+Dst], eax
.text:000051E3                 mov     [ebp+var_14], eax
.text:000051E6                 mov     [ebp+var_10], eax
.text:000051E9                 mov     eax, dword ptr ds:___security_cookie
.text:000051EE                 xor     eax, ebp
.text:000051F0                 push    eax
.text:000051F1                 lea     eax, [ebp+var_C]
.text:000051F4                 mov     large fs:0, eax
.text:000051FA                 mov     [ebp+var_10], ecx
.text:000051FD                 mov     eax, [ebp+var_10]
.text:00005200                 mov     ecx, [ebp+var_10]
.text:00005203                 mov     edx, [eax+4]
.text:00005206                 cmp     edx, [ecx+8]
.text:00005209                 jnz     loc_52D7
.text:0000520F                 mov     eax, [ebp+var_10]
.text:00005212                 mov     ecx, [eax+8]
.text:00005215                 shr     ecx, 2
.text:00005218                 mov     edx, [ebp+var_10]
.text:0000521B                 mov     eax, [edx+8]
.text:0000521E                 lea     ecx, [eax+ecx+1]
.text:00005222                 mov     [ebp+var_14], ecx
.text:00005225                 mov     edx, [ebp+var_14]
.text:00005228                 mov     [ebp+var_1C], edx
.text:0000522B                 xor     ecx, ecx
.text:0000522D                 mov     eax, [ebp+var_1C]
.text:00005230                 mov     edx, 18h
.text:00005235                 mul     edx
.text:00005237                 seto    cl
.text:0000523A                 neg     ecx
.text:0000523C                 or      ecx, eax
.text:0000523E                 push    ecx             ; unsigned int
.text:0000523F                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00005244                 add     esp, 4
.text:00005247                 mov     [ebp+var_24], eax
.text:0000524A                 mov     [ebp+var_4], 0
.text:00005251                 cmp     [ebp+var_24], 0
.text:00005255                 jz      short loc_5273
.text:00005257                 push    offset ??0CFileItem@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFileItem::CFileItem(void)
.text:0000525C                 mov     eax, [ebp+var_1C]
.text:0000525F                 push    eax
.text:00005260                 push    18h
.text:00005262                 mov     ecx, [ebp+var_24]
.text:00005265                 push    ecx
.text:00005266                 call    ??_H@YGXPAXIHP6EPAX0@Z@Z ; `vector constructor iterator'(void *,uint,int,void * (*)(void *))
.text:0000526B                 mov     edx, [ebp+var_24]
.text:0000526E                 mov     [ebp+var_2C], edx
.text:00005271                 jmp     short loc_527A
.text:00005273 ; ---------------------------------------------------------------------------
.text:00005273
.text:00005273 loc_5273:                               ; CODE XREF: CRecordVector<NArchive::N7z::CFileItem>::ReserveOnePosition(void)+9Dj
.text:00005273                 mov     [ebp+var_2C], 0
.text:0000527A
.text:0000527A loc_527A:                               ; CODE XREF: CRecordVector<NArchive::N7z::CFileItem>::ReserveOnePosition(void)+B9j
.text:0000527A                 mov     eax, [ebp+var_2C]
.text:0000527D                 mov     [ebp+var_20], eax
.text:00005280                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00005287                 mov     ecx, [ebp+var_20]
.text:0000528A                 mov     [ebp+Dst], ecx
.text:0000528D                 mov     edx, [ebp+var_10]
.text:00005290                 cmp     dword ptr [edx+4], 0
.text:00005294                 jz      short loc_52B2
.text:00005296                 mov     eax, [ebp+var_10]
.text:00005299                 mov     ecx, [eax+4]
.text:0000529C                 imul    ecx, 18h
.text:0000529F                 push    ecx             ; Size
.text:000052A0                 mov     edx, [ebp+var_10]
.text:000052A3                 mov     eax, [edx]
.text:000052A5                 push    eax             ; Src
.text:000052A6                 mov     ecx, [ebp+Dst]
.text:000052A9                 push    ecx             ; Dst
.text:000052AA                 call    _memcpy
.text:000052AF                 add     esp, 0Ch
.text:000052B2
.text:000052B2 loc_52B2:                               ; CODE XREF: CRecordVector<NArchive::N7z::CFileItem>::ReserveOnePosition(void)+DCj
.text:000052B2                 mov     edx, [ebp+var_10]
.text:000052B5                 mov     eax, [edx]
.text:000052B7                 mov     [ebp+var_28], eax
.text:000052BA                 mov     ecx, [ebp+var_28]
.text:000052BD                 push    ecx             ; void *
.text:000052BE                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000052C3                 add     esp, 4
.text:000052C6                 mov     edx, [ebp+var_10]
.text:000052C9                 mov     eax, [ebp+Dst]
.text:000052CC                 mov     [edx], eax
.text:000052CE                 mov     ecx, [ebp+var_10]
.text:000052D1                 mov     edx, [ebp+var_14]
.text:000052D4                 mov     [ecx+8], edx
.text:000052D7
.text:000052D7 loc_52D7:                               ; CODE XREF: CRecordVector<NArchive::N7z::CFileItem>::ReserveOnePosition(void)+51j
.text:000052D7                 mov     ecx, [ebp+var_C]
.text:000052DA                 mov     large fs:0, ecx
.text:000052E1                 pop     ecx
.text:000052E2                 add     esp, 2Ch
.text:000052E5                 cmp     ebp, esp
.text:000052E7                 call    __RTC_CheckEsp
.text:000052EC                 mov     esp, ebp
.text:000052EE                 pop     ebp
.text:000052EF                 retn
.text:000052EF ?ReserveOnePosition@?$CRecordVector@UCFileItem@N7z@NArchive@@@@AAEXXZ endp
.text:000052EF
.text:000052EF _text           ends
.text:000052EF
.text$x:000052F0 ; ===========================================================================
.text$x:000052F0
.text$x:000052F0 ; Segment type: Pure code
.text$x:000052F0 ; Segment permissions: Read/Execute
.text$x:000052F0 _text$x         segment para public 'CODE' use32
.text$x:000052F0                 assume cs:_text$x
.text$x:000052F0                 ;org 52F0h
.text$x:000052F0 ; COMDAT (pick associative to section at 51B8)
.text$x:000052F0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:000052F0
.text$x:000052F0 ; =============== S U B R O U T I N E =======================================
.text$x:000052F0
.text$x:000052F0
.text$x:000052F0 __unwindfunclet$?ReserveOnePosition@?$CRecordVector@UCFileItem@N7z@NArchive@@@@AAEXXZ$0 proc near
.text$x:000052F0                                         ; DATA XREF: .xdata$x:0000531Co
.text$x:000052F0                 mov     eax, [ebp-24h]
.text$x:000052F3                 push    eax             ; void *
.text$x:000052F4                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000052F9                 pop     ecx
.text$x:000052FA                 retn
.text$x:000052FA __unwindfunclet$?ReserveOnePosition@?$CRecordVector@UCFileItem@N7z@NArchive@@@@AAEXXZ$0 endp
.text$x:000052FA
.text$x:000052FB
.text$x:000052FB ; =============== S U B R O U T I N E =======================================
.text$x:000052FB
.text$x:000052FB
.text$x:000052FB __ehhandler$?ReserveOnePosition@?$CRecordVector@UCFileItem@N7z@NArchive@@@@AAEXXZ proc near
.text$x:000052FB                                         ; DATA XREF: CRecordVector<NArchive::N7z::CFileItem>::ReserveOnePosition(void)+5o
.text$x:000052FB
.text$x:000052FB arg_4           = dword ptr  8
.text$x:000052FB
.text$x:000052FB                 mov     edx, [esp+arg_4]
.text$x:000052FF                 lea     eax, [edx+0Ch]
.text$x:00005302                 mov     ecx, [edx-24h]
.text$x:00005305                 xor     ecx, eax
.text$x:00005307                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000530C                 mov     eax, offset __ehfuncinfo$?ReserveOnePosition@?$CRecordVector@UCFileItem@N7z@NArchive@@@@AAEXXZ
.text$x:00005311                 jmp     ___CxxFrameHandler3
.text$x:00005311 __ehhandler$?ReserveOnePosition@?$CRecordVector@UCFileItem@N7z@NArchive@@@@AAEXXZ endp
.text$x:00005311
.text$x:00005311 ; ---------------------------------------------------------------------------
.text$x:00005316                 align 4
.text$x:00005316 _text$x         ends
.text$x:00005316
.xdata$x:00005318 ; ===========================================================================
.xdata$x:00005318
.xdata$x:00005318 ; Segment type: Pure data
.xdata$x:00005318 ; Segment permissions: Read
.xdata$x:00005318 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00005318                 assume cs:_xdata$x
.xdata$x:00005318                 ;org 5318h
.xdata$x:00005318 ; COMDAT (pick associative to section at 51B8)
.xdata$x:00005318 __unwindtable$?ReserveOnePosition@?$CRecordVector@UCFileItem@N7z@NArchive@@@@AAEXXZ db 0FFh
.xdata$x:00005318                                         ; DATA XREF: .xdata$x:00005328o
.xdata$x:00005319                 db 0FFh
.xdata$x:0000531A                 db 0FFh
.xdata$x:0000531B                 db 0FFh
.xdata$x:0000531C                 dd offset __unwindfunclet$?ReserveOnePosition@?$CRecordVector@UCFileItem@N7z@NArchive@@@@AAEXXZ$0
.xdata$x:00005320 __ehfuncinfo$?ReserveOnePosition@?$CRecordVector@UCFileItem@N7z@NArchive@@@@AAEXXZ db  22h ; "
.xdata$x:00005320                                         ; DATA XREF: __ehhandler$?ReserveOnePosition@?$CRecordVector@UCFileItem@N7z@NArchive@@@@AAEXXZ+11o
.xdata$x:00005321                 db    5
.xdata$x:00005322                 db  93h ; ô
.xdata$x:00005323                 db  19h
.xdata$x:00005324                 db    1
.xdata$x:00005325                 db    0
.xdata$x:00005326                 db    0
.xdata$x:00005327                 db    0
.xdata$x:00005328                 dd offset __unwindtable$?ReserveOnePosition@?$CRecordVector@UCFileItem@N7z@NArchive@@@@AAEXXZ
.xdata$x:0000532C                 align 20h
.xdata$x:00005340                 db    1
.xdata$x:00005341                 db    0
.xdata$x:00005342                 db    0
.xdata$x:00005343                 db    0
.xdata$x:00005343 _xdata$x        ends
.xdata$x:00005343
.text:00005344 ; ===========================================================================
.text:00005344
.text:00005344 ; Segment type: Pure code
.text:00005344 ; Segment permissions: Read/Execute
.text:00005344 _text           segment para public 'CODE' use32
.text:00005344                 assume cs:_text
.text:00005344                 ;org 5344h
.text:00005344 ; COMDAT (pick any)
.text:00005344                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005344
.text:00005344 ; =============== S U B R O U T I N E =======================================
.text:00005344
.text:00005344 ; Attributes: bp-based frame
.text:00005344
.text:00005344 ; _DWORD __thiscall NArchive::N7z::CFileItem::CFileItem(NArchive::N7z::CFileItem *__hidden this)
.text:00005344                 public ??0CFileItem@N7z@NArchive@@QAE@XZ
.text:00005344 ??0CFileItem@N7z@NArchive@@QAE@XZ proc near
.text:00005344                                         ; DATA XREF: CRecordVector<NArchive::N7z::CFileItem>::ReserveOnePosition(void)+9Fo
.text:00005344
.text:00005344 var_4           = dword ptr -4
.text:00005344
.text:00005344                 push    ebp
.text:00005345                 mov     ebp, esp
.text:00005347                 push    ecx
.text:00005348                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000534F                 mov     [ebp+var_4], ecx
.text:00005352                 mov     eax, [ebp+var_4]
.text:00005355                 mov     byte ptr [eax+10h], 1
.text:00005359                 mov     ecx, [ebp+var_4]
.text:0000535C                 mov     byte ptr [ecx+11h], 0
.text:00005360                 mov     edx, [ebp+var_4]
.text:00005363                 mov     byte ptr [edx+12h], 0
.text:00005367                 mov     eax, [ebp+var_4]
.text:0000536A                 mov     byte ptr [eax+13h], 0
.text:0000536E                 mov     eax, [ebp+var_4]
.text:00005371                 mov     esp, ebp
.text:00005373                 pop     ebp
.text:00005374                 retn
.text:00005374 ??0CFileItem@N7z@NArchive@@QAE@XZ endp
.text:00005374
.text:00005374 ; ---------------------------------------------------------------------------
.text:00005375                 align 4
.text:00005375 _text           ends
.text:00005375
.text:00005378 ; ===========================================================================
.text:00005378
.text:00005378 ; Segment type: Pure code
.text:00005378 ; Segment permissions: Read/Execute
.text:00005378 _text           segment para public 'CODE' use32
.text:00005378                 assume cs:_text
.text:00005378                 ;org 5378h
.text:00005378 ; COMDAT (pick any)
.text:00005378                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005378
.text:00005378 ; =============== S U B R O U T I N E =======================================
.text:00005378
.text:00005378 ; Attributes: bp-based frame
.text:00005378
.text:00005378 ; private: void __thiscall CRecordVector<void *>::ReserveOnePosition(void)
.text:00005378                 public ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ
.text:00005378 ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ proc near
.text:00005378                                         ; CODE XREF: CRecordVector<void *>::Add(void * const)+1Ap
.text:00005378
.text:00005378 var_14          = dword ptr -14h
.text:00005378 var_10          = dword ptr -10h
.text:00005378 Dst             = dword ptr -0Ch
.text:00005378 var_8           = dword ptr -8
.text:00005378 var_4           = dword ptr -4
.text:00005378
.text:00005378                 push    ebp
.text:00005379                 mov     ebp, esp
.text:0000537B                 sub     esp, 14h
.text:0000537E                 mov     eax, 0CCCCCCCCh
.text:00005383                 mov     [ebp+var_14], eax
.text:00005386                 mov     [ebp+var_10], eax
.text:00005389                 mov     [ebp+Dst], eax
.text:0000538C                 mov     [ebp+var_8], eax
.text:0000538F                 mov     [ebp+var_4], eax
.text:00005392                 mov     [ebp+var_4], ecx
.text:00005395                 mov     eax, [ebp+var_4]
.text:00005398                 mov     ecx, [ebp+var_4]
.text:0000539B                 mov     edx, [eax+4]
.text:0000539E                 cmp     edx, [ecx+8]
.text:000053A1                 jnz     loc_542C
.text:000053A7                 mov     eax, [ebp+var_4]
.text:000053AA                 mov     ecx, [eax+8]
.text:000053AD                 shr     ecx, 2
.text:000053B0                 mov     edx, [ebp+var_4]
.text:000053B3                 mov     eax, [edx+8]
.text:000053B6                 lea     ecx, [eax+ecx+1]
.text:000053BA                 mov     [ebp+var_8], ecx
.text:000053BD                 xor     ecx, ecx
.text:000053BF                 mov     eax, [ebp+var_8]
.text:000053C2                 mov     edx, 4
.text:000053C7                 mul     edx
.text:000053C9                 seto    cl
.text:000053CC                 neg     ecx
.text:000053CE                 or      ecx, eax
.text:000053D0                 push    ecx             ; unsigned int
.text:000053D1                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000053D6                 add     esp, 4
.text:000053D9                 mov     [ebp+var_10], eax
.text:000053DC                 mov     eax, [ebp+var_10]
.text:000053DF                 mov     [ebp+Dst], eax
.text:000053E2                 mov     ecx, [ebp+var_4]
.text:000053E5                 cmp     dword ptr [ecx+4], 0
.text:000053E9                 jz      short loc_5407
.text:000053EB                 mov     edx, [ebp+var_4]
.text:000053EE                 mov     eax, [edx+4]
.text:000053F1                 shl     eax, 2
.text:000053F4                 push    eax             ; Size
.text:000053F5                 mov     ecx, [ebp+var_4]
.text:000053F8                 mov     edx, [ecx]
.text:000053FA                 push    edx             ; Src
.text:000053FB                 mov     eax, [ebp+Dst]
.text:000053FE                 push    eax             ; Dst
.text:000053FF                 call    _memcpy
.text:00005404                 add     esp, 0Ch
.text:00005407
.text:00005407 loc_5407:                               ; CODE XREF: CRecordVector<void *>::ReserveOnePosition(void)+71j
.text:00005407                 mov     ecx, [ebp+var_4]
.text:0000540A                 mov     edx, [ecx]
.text:0000540C                 mov     [ebp+var_14], edx
.text:0000540F                 mov     eax, [ebp+var_14]
.text:00005412                 push    eax             ; void *
.text:00005413                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00005418                 add     esp, 4
.text:0000541B                 mov     ecx, [ebp+var_4]
.text:0000541E                 mov     edx, [ebp+Dst]
.text:00005421                 mov     [ecx], edx
.text:00005423                 mov     eax, [ebp+var_4]
.text:00005426                 mov     ecx, [ebp+var_8]
.text:00005429                 mov     [eax+8], ecx
.text:0000542C
.text:0000542C loc_542C:                               ; CODE XREF: CRecordVector<void *>::ReserveOnePosition(void)+29j
.text:0000542C                 add     esp, 14h
.text:0000542F                 cmp     ebp, esp
.text:00005431                 call    __RTC_CheckEsp
.text:00005436                 mov     esp, ebp
.text:00005438                 pop     ebp
.text:00005439                 retn
.text:00005439 ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ endp
.text:00005439
.text:00005439 ; ---------------------------------------------------------------------------
.text:0000543A                 align 4
.text:0000543A _text           ends
.text:0000543A
.text:0000543C ; ===========================================================================
.text:0000543C
.text:0000543C ; Segment type: Pure code
.text:0000543C ; Segment permissions: Read/Execute
.text:0000543C _text           segment para public 'CODE' use32
.text:0000543C                 assume cs:_text
.text:0000543C                 ;org 543Ch
.text:0000543C ; COMDAT (pick any)
.text:0000543C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000543C
.text:0000543C ; =============== S U B R O U T I N E =======================================
.text:0000543C
.text:0000543C ; Attributes: bp-based frame
.text:0000543C
.text:0000543C ; public: long __thiscall CMyComPtr<struct ISequentialOutStream>::QueryInterface<struct IOutStream>(struct _GUID const &, struct IOutStream * *)const
.text:0000543C                 public ??$QueryInterface@UIOutStream@@@?$CMyComPtr@UISequentialOutStream@@@@QBEJABU_GUID@@PAPAUIOutStream@@@Z
.text:0000543C ??$QueryInterface@UIOutStream@@@?$CMyComPtr@UISequentialOutStream@@@@QBEJABU_GUID@@PAPAUIOutStream@@@Z proc near
.text:0000543C                                         ; CODE XREF: NArchive::N7z::COutArchive::Create(ISequentialOutStream *,bool)+51p
.text:0000543C
.text:0000543C var_4           = dword ptr -4
.text:0000543C arg_0           = dword ptr  8
.text:0000543C arg_4           = dword ptr  0Ch
.text:0000543C
.text:0000543C                 push    ebp
.text:0000543D                 mov     ebp, esp
.text:0000543F                 push    ecx
.text:00005440                 push    esi
.text:00005441                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005448                 mov     [ebp+var_4], ecx
.text:0000544B                 mov     esi, esp
.text:0000544D                 mov     eax, [ebp+arg_4]
.text:00005450                 push    eax
.text:00005451                 mov     ecx, [ebp+arg_0]
.text:00005454                 push    ecx
.text:00005455                 mov     edx, [ebp+var_4]
.text:00005458                 mov     eax, [edx]
.text:0000545A                 mov     ecx, [ebp+var_4]
.text:0000545D                 mov     edx, [ecx]
.text:0000545F                 mov     eax, [eax]
.text:00005461                 push    edx
.text:00005462                 mov     ecx, [eax]
.text:00005464                 call    ecx
.text:00005466                 cmp     esi, esp
.text:00005468                 call    __RTC_CheckEsp
.text:0000546D                 pop     esi
.text:0000546E                 add     esp, 4
.text:00005471                 cmp     ebp, esp
.text:00005473                 call    __RTC_CheckEsp
.text:00005478                 mov     esp, ebp
.text:0000547A                 pop     ebp
.text:0000547B                 retn    8
.text:0000547B ??$QueryInterface@UIOutStream@@@?$CMyComPtr@UISequentialOutStream@@@@QBEJABU_GUID@@PAPAUIOutStream@@@Z endp
.text:0000547B
.text:0000547B _text           ends
.text:0000547B
UNDEF:00005480 ; ===========================================================================
UNDEF:00005480
UNDEF:00005480 ; Segment type: Externs
UNDEF:00005480 ; UNDEF
UNDEF:00005480 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:00005480                 extrn _memcpy:near      ; CODE XREF: NArchive::N7z::COutArchive::WriteSignature(void)+35p
UNDEF:00005480                                         ; NArchive::N7z::CWriteBufferLoc::WriteBytes(void const *,uint)+59p ...
UNDEF:00005484 ; unsigned char * NArchive::N7z::kSignature
UNDEF:00005484                 extrn ?kSignature@N7z@NArchive@@3PAEA:near
UNDEF:00005484                                         ; DATA XREF: NArchive::N7z::COutArchive::WriteSignature(void):loc_2Co
UNDEF:00005488                 extrn ___security_cookie:near
UNDEF:00005488                                         ; DATA XREF: NArchive::N7z::COutArchive::WriteSignature(void)+1Dr
UNDEF:00005488                                         ; NArchive::N7z::COutArchive::WriteStartHeader(NArchive::N7z::CStartHeader const &)+18r ...
UNDEF:0000548C                 extrn __RTC_CheckEsp:near
UNDEF:0000548C                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteSignature(void)+73p
UNDEF:0000548C                                         ; NArchive::N7z::COutArchive::WriteStartHeader(NArchive::N7z::CStartHeader const &)+A2p ...
UNDEF:00005490 ; __fastcall __security_check_cookie(x)
UNDEF:00005490                 extrn @__security_check_cookie@4:near
UNDEF:00005490                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteSignature(void)+69p
UNDEF:00005490                                         ; NArchive::N7z::COutArchive::WriteStartHeader(NArchive::N7z::CStartHeader const &)+98p ...
UNDEF:00005494 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00005494                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00005494                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteSignature(void)+5Dp
UNDEF:00005494                                         ; NArchive::N7z::COutArchive::WriteStartHeader(NArchive::N7z::CStartHeader const &)+8Bp ...
UNDEF:00005498                 extrn __RTC_Shutdown:near
UNDEF:00005498                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:0000549C                 extrn __RTC_InitBase:near
UNDEF:0000549C                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:000054A0 ; __int32 __stdcall WriteStream(struct ISequentialOutStream *, const void *, unsigned int)
UNDEF:000054A0                 extrn ?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z:near
UNDEF:000054A0                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteDirect(void const *,uint)+22p
UNDEF:000054A4 ; __fastcall CrcCalc(x, x)
UNDEF:000054A4                 extrn @CrcCalc@8:near   ; CODE XREF: NArchive::N7z::COutArchive::WriteStartHeader(NArchive::N7z::CStartHeader const &)+64p
UNDEF:000054A4                                         ; NArchive::N7z::COutArchive::EncodeStream(NArchive::N7z::CEncoder &,CBuffer<uchar> const &,CRecordVector<unsigned __int64> &,CObjectVector<NArchive::N7z::CFolder> &,NArchive::N7z::COutFolders &)+CBp ...
UNDEF:000054A8                 extrn __aullshr:near    ; CODE XREF: NArchive::N7z::SetUInt64(uchar *,unsigned __int64)+25p
UNDEF:000054A8                                         ; NArchive::N7z::COutArchive::WriteUInt64(unsigned __int64)+44p ...
UNDEF:000054AC                 extrn _IID_IOutStream:near
UNDEF:000054AC                                         ; DATA XREF: NArchive::N7z::COutArchive::Create(ISequentialOutStream *,bool)+46o
UNDEF:000054B0 ; void *__cdecl memset(void *Dst, int Val, size_t Size)
UNDEF:000054B0                 extrn _memset:near      ; CODE XREF: NArchive::N7z::COutArchive::SkipPrefixArchiveHeader(void)+2Dp
UNDEF:000054B4 ; unsigned __int64 __thiscall COutBuffer::GetProcessedSize(COutBuffer *__hidden this)
UNDEF:000054B4                 extrn ?GetProcessedSize@COutBuffer@@QBE_KXZ:near
UNDEF:000054B4                                         ; CODE XREF: NArchive::N7z::COutArchive::GetPos(void)+34p
UNDEF:000054B4                                         ; NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+482p
UNDEF:000054B8 ; __fastcall CrcUpdate(x, x, x)
UNDEF:000054B8                 extrn @CrcUpdate@12:near
UNDEF:000054B8                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteBytes(void const *,uint)+55p
UNDEF:000054BC ; void __thiscall COutBuffer::FlushWithCheck(COutBuffer *__hidden this)
UNDEF:000054BC                 extrn ?FlushWithCheck@COutBuffer@@QAEXXZ:near
UNDEF:000054BC                                         ; CODE XREF: COutBuffer::WriteByte(uchar)+3Fp
UNDEF:000054C0 ; __stdcall _CxxThrowException(x, x)
UNDEF:000054C0                 extrn __CxxThrowException@8:near
UNDEF:000054C0                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+322p
UNDEF:000054C0                                         ; NArchive::N7z::CWriteBufferLoc::WriteBytes(void const *,uint)+40p ...
UNDEF:000054C4 ; const type_info::`vftable'
UNDEF:000054C4                 extrn ??_7type_info@@6B@:near
UNDEF:000054C4                                         ; DATA XREF: .data:int `RTTI Type Descriptor'o
UNDEF:000054C4                                         ; .data:CBufInStream `RTTI Type Descriptor'o ...
UNDEF:000054C8                 extrn _g_CrcTable:near  ; DATA XREF: NArchive::N7z::COutArchive::WriteByte(uchar)+5Er
UNDEF:000054CC                 extrn __allshl:near     ; CODE XREF: NArchive::N7z::COutArchive::WriteNumber(unsigned __int64)+4Dp
UNDEF:000054CC                                         ; NArchive::N7z::GetBigNumberSize(unsigned __int64)+40p
UNDEF:000054D0                 extrn ___CxxFrameHandler3:near
UNDEF:000054D0                                         ; CODE XREF: __ehhandler$?WriteSubStreamsInfo@COutArchive@N7z@NArchive@@AAEXABV?$CObjectVector@UCFolder@N7z@NArchive@@@@ABUCOutFolders@23@ABV?$CRecordVector@_K@@ABUCUInt32DefVector@23@@Z+16j
UNDEF:000054D0                                         ; __ehhandler$?EncodeStream@COutArchive@N7z@NArchive@@AAEJAAVCEncoder@23@ABV?$CBuffer@E@@AAV?$CRecordVector@_K@@AAV?$CObjectVector@UCFolder@N7z@NArchive@@@@AAUCOutFolders@23@@Z+16j ...
UNDEF:000054D4 ; void __cdecl operator delete(void *)
UNDEF:000054D4                 extrn ??3@YAXPAX@Z:near ; CODE XREF: __unwindfunclet$?EncodeStream@COutArchive@N7z@NArchive@@AAEJAAVCEncoder@23@ABV?$CBuffer@E@@AAV?$CRecordVector@_K@@AAV?$CObjectVector@UCFolder@N7z@NArchive@@@@AAUCOutFolders@23@@Z$0+4p
UNDEF:000054D4                                         ; CBufInStream::`scalar deleting destructor'(uint)+22p ...
UNDEF:000054D8 ; public: long __thiscall NArchive::N7z::CEncoder::Encode(struct ISequentialInStream *, unsigned __int64 const *, struct NArchive::N7z::CFolder &, class CRecordVector<unsigned __int64> &, unsigned __int64 &, struct ISequentialOutStream *, class CRecordVector<unsigned __int64> &, struct ICompressProgressInfo *)
UNDEF:000054D8                 extrn ?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z:near
UNDEF:000054D8                                         ; CODE XREF: NArchive::N7z::COutArchive::EncodeStream(NArchive::N7z::CEncoder &,CBuffer<uchar> const &,CRecordVector<unsigned __int64> &,CObjectVector<NArchive::N7z::CFolder> &,NArchive::N7z::COutFolders &)+122p
UNDEF:000054DC ; void *__cdecl operator new(unsigned int)
UNDEF:000054DC                 extrn ??2@YAPAXI@Z:near ; CODE XREF: NArchive::N7z::COutArchive::EncodeStream(NArchive::N7z::CEncoder &,CBuffer<uchar> const &,CRecordVector<unsigned __int64> &,CObjectVector<NArchive::N7z::CFolder> &,NArchive::N7z::COutFolders &)+3Dp
UNDEF:000054DC                                         ; CBuffer<uchar>::CBuffer<uchar>(uint)+2Ep ...
UNDEF:000054E0 ; public: virtual long __stdcall CBufInStream::Read(void *, unsigned int, unsigned int *)
UNDEF:000054E0                 extrn ?Read@CBufInStream@@UAGJPAXIPAI@Z:near
UNDEF:000054E0                                         ; DATA XREF: .rdata:00002CBCo
UNDEF:000054E4 ; public: virtual long __stdcall CBufInStream::Seek(__int64, unsigned int, unsigned __int64 *)
UNDEF:000054E4                 extrn ?Seek@CBufInStream@@UAGJ_JIPA_K@Z:near
UNDEF:000054E4                                         ; DATA XREF: .rdata:00002CC0o
UNDEF:000054E8                 extrn _IID_IInStream:near
UNDEF:000054E8                                         ; DATA XREF: CBufInStream::QueryInterface(_GUID const &,void * *):loc_2F04o
UNDEF:000054EC                 extrn _IID_ISequentialInStream:near
UNDEF:000054EC                                         ; DATA XREF: CBufInStream::QueryInterface(_GUID const &,void * *):loc_2EE8o
UNDEF:000054F0 ; const IID IID_IUnknown
UNDEF:000054F0                 extrn _IID_IUnknown:near
UNDEF:000054F0                                         ; DATA XREF: CBufInStream::QueryInterface(_GUID const &,void * *)+Co
UNDEF:000054F4 ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:000054F4                 extrn _memcmp:near      ; CODE XREF: IsEqualGUID(x,x)+Dp
UNDEF:000054F8                 extrn __purecall:near   ; DATA XREF: .rdata:const IInStream::`vftable'o
UNDEF:000054F8                                         ; .rdata:000030C8o ...
UNDEF:000054FC ; __int32 __thiscall COutBuffer::Flush(COutBuffer *__hidden this)
UNDEF:000054FC                 extrn ?Flush@COutBuffer@@QAEJXZ:near
UNDEF:000054FC                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+451p
UNDEF:00005500 ; _DWORD __thiscall NArchive::N7z::CEncoder::~CEncoder(NArchive::N7z::CEncoder *__hidden this)
UNDEF:00005500                 extrn ??1CEncoder@N7z@NArchive@@QAE@XZ:near
UNDEF:00005500                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+2CBp
UNDEF:00005500                                         ; NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+42Bp ...
UNDEF:00005504 ; _DWORD __thiscall NArchive::N7z::CEncoder::CEncoder(NArchive::N7z::CEncoder *__hidden this, const struct NArchive::N7z::CCompressionMethodMode *)
UNDEF:00005504                 extrn ??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z:near
UNDEF:00005504                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+21Bp
UNDEF:00005508 ; public: class UString & __thiscall UString::operator=(class UString const &)
UNDEF:00005508                 extrn ??4UString@@QAEAAV0@ABV0@@Z:near
UNDEF:00005508                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+1DFp
UNDEF:0000550C ; void __thiscall COutBuffer::Init(COutBuffer *__hidden this)
UNDEF:0000550C                 extrn ?Init@COutBuffer@@QAEXXZ:near
UNDEF:0000550C                                         ; CODE XREF: NArchive::N7z::COutArchive::WriteDatabase(NArchive::N7z::CArchiveDatabaseOut const &,NArchive::N7z::CCompressionMethodMode const *,NArchive::N7z::CHeaderOptions const &)+F5p
UNDEF:00005510 ; public: __thiscall UString::UString(void)
UNDEF:00005510                 extrn ??0UString@@QAE@XZ:near
UNDEF:00005510                                         ; CODE XREF: NArchive::N7z::CCompressionMethodMode::CCompressionMethodMode(void)+77p
UNDEF:00005514 ; public: __thiscall UString::UString(class UString const &)
UNDEF:00005514                 extrn ??0UString@@QAE@ABV0@@Z:near
UNDEF:00005514                                         ; CODE XREF: CObjectVector<UString>::Add(UString const &)+5Ap
UNDEF:00005518 ; void __stdcall `eh vector destructor iterator'(void *, unsigned int, int, void (__thiscall *)(void *))
UNDEF:00005518                 extrn ??_M@YGXPAXIHP6EX0@Z@Z:near
UNDEF:00005518                                         ; CODE XREF: NArchive::N7z::CCoderInfo::`vector deleting destructor'(uint)+28p
UNDEF:0000551C ; __int32 __thiscall NWindows::NCOM::CPropVariant::Clear(NWindows::NCOM::CPropVariant *__hidden this)
UNDEF:0000551C                 extrn ?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ:near
UNDEF:0000551C                                         ; CODE XREF: NWindows::NCOM::CPropVariant::~CPropVariant(void)+11p
UNDEF:0000551C
UNDEF:0000551C