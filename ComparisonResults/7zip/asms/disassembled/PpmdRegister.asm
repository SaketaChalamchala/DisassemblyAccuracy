.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : CEFA9A064517F79D18F29C1B50B68780
.rdata:00000000 ; Input CRC32 : 58EFA5AA
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\PpmdRegister.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00000000 _rdata          segment para public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 $SG66991        db 'PPMD',0             ; DATA XREF: .rdata:00000018o
.rdata:00000005                 align 4
.rdata:00000008 ; struct CCodecInfo g_CodecInfo
.rdata:00000008 _g_CodecInfo    dd offset ?CreateDec@@YGPAXXZ
.rdata:00000008                                         ; DATA XREF: CRegisterCodecPPMD::CRegisterCodecPPMD(void)+Eo
.rdata:00000008                                         ; CreateDec(void)
.rdata:0000000C                 dd offset ?CreateEnc@@YGPAXXZ ; CreateEnc(void)
.rdata:00000010                 db    1
.rdata:00000011                 db    4
.rdata:00000012                 db    3
.rdata:00000013                 db    0
.rdata:00000014                 db    0
.rdata:00000015                 db    0
.rdata:00000016                 db    0
.rdata:00000017                 db    0
.rdata:00000018                 dd offset $SG66991      ; "PPMD"
.rdata:0000001C                 db    1
.rdata:0000001D                 db    0
.rdata:0000001E                 db    0
.rdata:0000001F                 db    0
.rdata:00000020                 db    0
.rdata:00000021                 db    0
.rdata:00000022                 db    0
.rdata:00000023                 db    0
.rdata:00000024                 db    0
.rdata:00000025                 db    0
.rdata:00000026                 db    0
.rdata:00000027                 db    0
.rdata:00000027 _rdata          ends
.rdata:00000027
.text:00000028 ; ===========================================================================
.text:00000028
.text:00000028 ; Segment type: Pure code
.text:00000028 ; Segment permissions: Read/Execute
.text:00000028 _text           segment para public 'CODE' use32
.text:00000028                 assume cs:_text
.text:00000028                 ;org 28h
.text:00000028                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000028
.text:00000028 ; =============== S U B R O U T I N E =======================================
.text:00000028
.text:00000028 ; Attributes: bp-based frame
.text:00000028
.text:00000028 ; void * __stdcall CreateDec(void)
.text:00000028 ?CreateDec@@YGPAXXZ proc near           ; DATA XREF: .rdata:_g_CodecInfoo
.text:00000028
.text:00000028 var_18          = dword ptr -18h
.text:00000028 var_14          = dword ptr -14h
.text:00000028 var_10          = dword ptr -10h
.text:00000028 var_C           = dword ptr -0Ch
.text:00000028 var_4           = dword ptr -4
.text:00000028
.text:00000028                 push    ebp
.text:00000029                 mov     ebp, esp
.text:0000002B                 push    0FFFFFFFFh
.text:0000002D                 push    offset __ehhandler$?CreateDec@@YGPAXXZ
.text:00000032                 mov     eax, large fs:0
.text:00000038                 push    eax
.text:00000039                 sub     esp, 0Ch
.text:0000003C                 mov     [ebp+var_18], 0CCCCCCCCh
.text:00000043                 mov     [ebp+var_14], 0CCCCCCCCh
.text:0000004A                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000051                 mov     eax, dword ptr ds:___security_cookie
.text:00000056                 xor     eax, ebp
.text:00000058                 push    eax
.text:00000059                 lea     eax, [ebp+var_C]
.text:0000005C                 mov     large fs:0, eax
.text:00000062                 push    4B50h           ; unsigned int
.text:00000067                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000006C                 add     esp, 4
.text:0000006F                 mov     [ebp+var_14], eax
.text:00000072                 mov     [ebp+var_4], 0
.text:00000079                 cmp     [ebp+var_14], 0
.text:0000007D                 jz      short loc_8C
.text:0000007F                 mov     ecx, [ebp+var_14] ; this
.text:00000082                 call    ??0CDecoder@NPpmd@NCompress@@QAE@XZ ; NCompress::NPpmd::CDecoder::CDecoder(void)
.text:00000087                 mov     [ebp+var_18], eax
.text:0000008A                 jmp     short loc_93
.text:0000008C ; ---------------------------------------------------------------------------
.text:0000008C
.text:0000008C loc_8C:                                 ; CODE XREF: CreateDec(void)+55j
.text:0000008C                 mov     [ebp+var_18], 0
.text:00000093
.text:00000093 loc_93:                                 ; CODE XREF: CreateDec(void)+62j
.text:00000093                 mov     eax, [ebp+var_18]
.text:00000096                 mov     [ebp+var_10], eax
.text:00000099                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000000A0                 mov     eax, [ebp+var_10]
.text:000000A3                 mov     ecx, [ebp+var_C]
.text:000000A6                 mov     large fs:0, ecx
.text:000000AD                 pop     ecx
.text:000000AE                 add     esp, 18h
.text:000000B1                 cmp     ebp, esp
.text:000000B3                 call    __RTC_CheckEsp
.text:000000B8                 mov     esp, ebp
.text:000000BA                 pop     ebp
.text:000000BB                 retn
.text:000000BB ?CreateDec@@YGPAXXZ endp
.text:000000BB
.text:000000BB ; ---------------------------------------------------------------------------
.text:000000BC                 db 0Ch dup(0CCh)
.text:000000C8
.text:000000C8 ; =============== S U B R O U T I N E =======================================
.text:000000C8
.text:000000C8 ; Attributes: bp-based frame
.text:000000C8
.text:000000C8 ; void * __stdcall CreateEnc(void)
.text:000000C8 ?CreateEnc@@YGPAXXZ proc near           ; DATA XREF: .rdata:0000000Co
.text:000000C8
.text:000000C8 var_18          = dword ptr -18h
.text:000000C8 var_14          = dword ptr -14h
.text:000000C8 var_10          = dword ptr -10h
.text:000000C8 var_C           = dword ptr -0Ch
.text:000000C8 var_4           = dword ptr -4
.text:000000C8
.text:000000C8                 push    ebp
.text:000000C9                 mov     ebp, esp
.text:000000CB                 push    0FFFFFFFFh
.text:000000CD                 push    offset __ehhandler$?CreateEnc@@YGPAXXZ
.text:000000D2                 mov     eax, large fs:0
.text:000000D8                 push    eax
.text:000000D9                 sub     esp, 0Ch
.text:000000DC                 mov     [ebp+var_18], 0CCCCCCCCh
.text:000000E3                 mov     [ebp+var_14], 0CCCCCCCCh
.text:000000EA                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000000F1                 mov     eax, dword ptr ds:___security_cookie
.text:000000F6                 xor     eax, ebp
.text:000000F8                 push    eax
.text:000000F9                 lea     eax, [ebp+var_C]
.text:000000FC                 mov     large fs:0, eax
.text:00000102                 push    4B38h           ; unsigned int
.text:00000107                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000010C                 add     esp, 4
.text:0000010F                 mov     [ebp+var_14], eax
.text:00000112                 mov     [ebp+var_4], 0
.text:00000119                 cmp     [ebp+var_14], 0
.text:0000011D                 jz      short loc_12C
.text:0000011F                 mov     ecx, [ebp+var_14] ; this
.text:00000122                 call    ??0CEncoder@NPpmd@NCompress@@QAE@XZ ; NCompress::NPpmd::CEncoder::CEncoder(void)
.text:00000127                 mov     [ebp+var_18], eax
.text:0000012A                 jmp     short loc_133
.text:0000012C ; ---------------------------------------------------------------------------
.text:0000012C
.text:0000012C loc_12C:                                ; CODE XREF: CreateEnc(void)+55j
.text:0000012C                 mov     [ebp+var_18], 0
.text:00000133
.text:00000133 loc_133:                                ; CODE XREF: CreateEnc(void)+62j
.text:00000133                 mov     eax, [ebp+var_18]
.text:00000136                 mov     [ebp+var_10], eax
.text:00000139                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000140                 mov     eax, [ebp+var_10]
.text:00000143                 mov     ecx, [ebp+var_C]
.text:00000146                 mov     large fs:0, ecx
.text:0000014D                 pop     ecx
.text:0000014E                 add     esp, 18h
.text:00000151                 cmp     ebp, esp
.text:00000153                 call    __RTC_CheckEsp
.text:00000158                 mov     esp, ebp
.text:0000015A                 pop     ebp
.text:0000015B                 retn
.text:0000015B ?CreateEnc@@YGPAXXZ endp
.text:0000015B
.text:0000015B _text           ends
.text:0000015B
.text$x:0000015C ; ===========================================================================
.text$x:0000015C
.text$x:0000015C ; Segment type: Pure code
.text$x:0000015C ; Segment permissions: Read/Execute
.text$x:0000015C _text$x         segment para public 'CODE' use32
.text$x:0000015C                 assume cs:_text$x
.text$x:0000015C                 ;org 15Ch
.text$x:0000015C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000015C
.text$x:0000015C ; =============== S U B R O U T I N E =======================================
.text$x:0000015C
.text$x:0000015C
.text$x:0000015C __unwindfunclet$?CreateDec@@YGPAXXZ$0 proc near
.text$x:0000015C                                         ; DATA XREF: .xdata$x:000001ACo
.text$x:0000015C                 mov     eax, [ebp-14h]
.text$x:0000015F                 push    eax             ; void *
.text$x:00000160                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00000165                 pop     ecx
.text$x:00000166                 retn
.text$x:00000166 __unwindfunclet$?CreateDec@@YGPAXXZ$0 endp
.text$x:00000166
.text$x:00000167
.text$x:00000167 ; =============== S U B R O U T I N E =======================================
.text$x:00000167
.text$x:00000167
.text$x:00000167 __ehhandler$?CreateDec@@YGPAXXZ proc near ; DATA XREF: CreateDec(void)+5o
.text$x:00000167
.text$x:00000167 arg_4           = dword ptr  8
.text$x:00000167
.text$x:00000167                 mov     edx, [esp+arg_4]
.text$x:0000016B                 lea     eax, [edx+0Ch]
.text$x:0000016E                 mov     ecx, [edx-10h]
.text$x:00000171                 xor     ecx, eax
.text$x:00000173                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000178                 mov     eax, offset __ehfuncinfo$?CreateDec@@YGPAXXZ
.text$x:0000017D                 jmp     ___CxxFrameHandler3
.text$x:0000017D __ehhandler$?CreateDec@@YGPAXXZ endp
.text$x:0000017D
.text$x:00000182
.text$x:00000182 ; =============== S U B R O U T I N E =======================================
.text$x:00000182
.text$x:00000182
.text$x:00000182 __unwindfunclet$?CreateEnc@@YGPAXXZ$0 proc near
.text$x:00000182                                         ; DATA XREF: .xdata$x:000001D8o
.text$x:00000182                 mov     eax, [ebp-14h]
.text$x:00000185                 push    eax             ; void *
.text$x:00000186                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000018B                 pop     ecx
.text$x:0000018C                 retn
.text$x:0000018C __unwindfunclet$?CreateEnc@@YGPAXXZ$0 endp
.text$x:0000018C
.text$x:0000018D
.text$x:0000018D ; =============== S U B R O U T I N E =======================================
.text$x:0000018D
.text$x:0000018D
.text$x:0000018D __ehhandler$?CreateEnc@@YGPAXXZ proc near ; DATA XREF: CreateEnc(void)+5o
.text$x:0000018D
.text$x:0000018D arg_4           = dword ptr  8
.text$x:0000018D
.text$x:0000018D                 mov     edx, [esp+arg_4]
.text$x:00000191                 lea     eax, [edx+0Ch]
.text$x:00000194                 mov     ecx, [edx-10h]
.text$x:00000197                 xor     ecx, eax
.text$x:00000199                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000019E                 mov     eax, offset __ehfuncinfo$?CreateEnc@@YGPAXXZ
.text$x:000001A3                 jmp     ___CxxFrameHandler3
.text$x:000001A3 __ehhandler$?CreateEnc@@YGPAXXZ endp
.text$x:000001A3
.text$x:000001A3 _text$x         ends
.text$x:000001A3
.xdata$x:000001A8 ; ===========================================================================
.xdata$x:000001A8
.xdata$x:000001A8 ; Segment type: Pure data
.xdata$x:000001A8 ; Segment permissions: Read
.xdata$x:000001A8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000001A8                 assume cs:_xdata$x
.xdata$x:000001A8                 ;org 1A8h
.xdata$x:000001A8 __unwindtable$?CreateDec@@YGPAXXZ db 0FFh ; DATA XREF: .xdata$x:000001B8o
.xdata$x:000001A9                 db 0FFh
.xdata$x:000001AA                 db 0FFh
.xdata$x:000001AB                 db 0FFh
.xdata$x:000001AC                 dd offset __unwindfunclet$?CreateDec@@YGPAXXZ$0
.xdata$x:000001B0 __ehfuncinfo$?CreateDec@@YGPAXXZ db  22h ; "
.xdata$x:000001B0                                         ; DATA XREF: __ehhandler$?CreateDec@@YGPAXXZ+11o
.xdata$x:000001B1                 db    5
.xdata$x:000001B2                 db  93h ; ô
.xdata$x:000001B3                 db  19h
.xdata$x:000001B4                 db    1
.xdata$x:000001B5                 db    0
.xdata$x:000001B6                 db    0
.xdata$x:000001B7                 db    0
.xdata$x:000001B8                 dd offset __unwindtable$?CreateDec@@YGPAXXZ
.xdata$x:000001BC                 db    0
.xdata$x:000001BD                 db    0
.xdata$x:000001BE                 db    0
.xdata$x:000001BF                 db    0
.xdata$x:000001C0                 db    0
.xdata$x:000001C1                 db    0
.xdata$x:000001C2                 db    0
.xdata$x:000001C3                 db    0
.xdata$x:000001C4                 db    0
.xdata$x:000001C5                 db    0
.xdata$x:000001C6                 db    0
.xdata$x:000001C7                 db    0
.xdata$x:000001C8                 db    0
.xdata$x:000001C9                 db    0
.xdata$x:000001CA                 db    0
.xdata$x:000001CB                 db    0
.xdata$x:000001CC                 db    0
.xdata$x:000001CD                 db    0
.xdata$x:000001CE                 db    0
.xdata$x:000001CF                 db    0
.xdata$x:000001D0                 db    1
.xdata$x:000001D1                 db    0
.xdata$x:000001D2                 db    0
.xdata$x:000001D3                 db    0
.xdata$x:000001D4 __unwindtable$?CreateEnc@@YGPAXXZ db 0FFh ; DATA XREF: .xdata$x:000001E4o
.xdata$x:000001D5                 db 0FFh
.xdata$x:000001D6                 db 0FFh
.xdata$x:000001D7                 db 0FFh
.xdata$x:000001D8                 dd offset __unwindfunclet$?CreateEnc@@YGPAXXZ$0
.xdata$x:000001DC __ehfuncinfo$?CreateEnc@@YGPAXXZ db  22h ; "
.xdata$x:000001DC                                         ; DATA XREF: __ehhandler$?CreateEnc@@YGPAXXZ+11o
.xdata$x:000001DD                 db    5
.xdata$x:000001DE                 db  93h ; ô
.xdata$x:000001DF                 db  19h
.xdata$x:000001E0                 db    1
.xdata$x:000001E1                 db    0
.xdata$x:000001E2                 db    0
.xdata$x:000001E3                 db    0
.xdata$x:000001E4                 dd offset __unwindtable$?CreateEnc@@YGPAXXZ
.xdata$x:000001E8                 db    0
.xdata$x:000001E9                 db    0
.xdata$x:000001EA                 db    0
.xdata$x:000001EB                 db    0
.xdata$x:000001EC                 db    0
.xdata$x:000001ED                 db    0
.xdata$x:000001EE                 db    0
.xdata$x:000001EF                 db    0
.xdata$x:000001F0                 db    0
.xdata$x:000001F1                 db    0
.xdata$x:000001F2                 db    0
.xdata$x:000001F3                 db    0
.xdata$x:000001F4                 db    0
.xdata$x:000001F5                 db    0
.xdata$x:000001F6                 db    0
.xdata$x:000001F7                 db    0
.xdata$x:000001F8                 db    0
.xdata$x:000001F9                 db    0
.xdata$x:000001FA                 db    0
.xdata$x:000001FB                 db    0
.xdata$x:000001FC                 db    1
.xdata$x:000001FD                 db    0
.xdata$x:000001FE                 db    0
.xdata$x:000001FF                 db    0
.xdata$x:000001FF _xdata$x        ends
.xdata$x:000001FF
.rtc$TMZ:00000200 ; ===========================================================================
.rtc$TMZ:00000200
.rtc$TMZ:00000200 ; Segment type: Pure data
.rtc$TMZ:00000200 ; Segment permissions: Read
.rtc$TMZ:00000200 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000200                 assume cs:_rtc$TMZ
.rtc$TMZ:00000200                 ;org 200h
.rtc$TMZ:00000200 ; COMDAT (pick any)
.rtc$TMZ:00000200 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000200 _rtc$TMZ        ends
.rtc$TMZ:00000200
.rtc$IMZ:00000204 ; ===========================================================================
.rtc$IMZ:00000204
.rtc$IMZ:00000204 ; Segment type: Pure data
.rtc$IMZ:00000204 ; Segment permissions: Read
.rtc$IMZ:00000204 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000204                 assume cs:_rtc$IMZ
.rtc$IMZ:00000204                 ;org 204h
.rtc$IMZ:00000204 ; COMDAT (pick any)
.rtc$IMZ:00000204 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000204 _rtc$IMZ        ends
.rtc$IMZ:00000204
.text:00000208 ; ===========================================================================
.text:00000208
.text:00000208 ; Segment type: Pure code
.text:00000208 ; Segment permissions: Read/Execute
.text:00000208 _text           segment para public 'CODE' use32
.text:00000208                 assume cs:_text
.text:00000208                 ;org 208h
.text:00000208 ; COMDAT (pick any)
.text:00000208                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000208
.text:00000208 ; =============== S U B R O U T I N E =======================================
.text:00000208
.text:00000208 ; Attributes: bp-based frame
.text:00000208
.text:00000208 ; _DWORD __thiscall NCompress::NPpmd::CDecoder::CDecoder(NCompress::NPpmd::CDecoder *__hidden this)
.text:00000208                 public ??0CDecoder@NPpmd@NCompress@@QAE@XZ
.text:00000208 ??0CDecoder@NPpmd@NCompress@@QAE@XZ proc near
.text:00000208                                         ; CODE XREF: CreateDec(void)+5Ap
.text:00000208
.text:00000208 var_10          = dword ptr -10h
.text:00000208 var_C           = dword ptr -0Ch
.text:00000208 var_4           = dword ptr -4
.text:00000208
.text:00000208                 push    ebp
.text:00000209                 mov     ebp, esp
.text:0000020B                 push    0FFFFFFFFh
.text:0000020D                 push    offset __ehhandler$??0CDecoder@NPpmd@NCompress@@QAE@XZ
.text:00000212                 mov     eax, large fs:0
.text:00000218                 push    eax
.text:00000219                 push    ecx
.text:0000021A                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000221                 mov     eax, dword ptr ds:___security_cookie
.text:00000226                 xor     eax, ebp
.text:00000228                 push    eax
.text:00000229                 lea     eax, [ebp+var_C]
.text:0000022C                 mov     large fs:0, eax
.text:00000232                 mov     [ebp+var_10], ecx
.text:00000235                 mov     ecx, [ebp+var_10] ; this
.text:00000238                 call    ??0ICompressCoder@@QAE@XZ ; ICompressCoder::ICompressCoder(void)
.text:0000023D                 mov     ecx, [ebp+var_10]
.text:00000240                 add     ecx, 4          ; this
.text:00000243                 call    ??0ICompressSetDecoderProperties2@@QAE@XZ ; ICompressSetDecoderProperties2::ICompressSetDecoderProperties2(void)
.text:00000248                 mov     ecx, [ebp+var_10]
.text:0000024B                 add     ecx, 8          ; this
.text:0000024E                 call    ??0ICompressSetInStream@@QAE@XZ ; ICompressSetInStream::ICompressSetInStream(void)
.text:00000253                 mov     ecx, [ebp+var_10]
.text:00000256                 add     ecx, 0Ch        ; this
.text:00000259                 call    ??0ICompressSetOutStreamSize@@QAE@XZ ; ICompressSetOutStreamSize::ICompressSetOutStreamSize(void)
.text:0000025E                 mov     ecx, [ebp+var_10]
.text:00000261                 add     ecx, 10h        ; this
.text:00000264                 call    ??0ISequentialInStream@@QAE@XZ ; ISequentialInStream::ISequentialInStream(void)
.text:00000269                 mov     ecx, [ebp+var_10]
.text:0000026C                 add     ecx, 14h        ; this
.text:0000026F                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00000274                 mov     eax, [ebp+var_10]
.text:00000277                 mov     dword ptr [eax], offset ??_7CDecoder@NPpmd@NCompress@@6BICompressCoder@@@ ; const NCompress::NPpmd::CDecoder::`vftable'{for `ICompressCoder'}
.text:0000027D                 mov     ecx, [ebp+var_10]
.text:00000280                 mov     dword ptr [ecx+4], offset ??_7CDecoder@NPpmd@NCompress@@6BICompressSetDecoderProperties2@@@ ; const NCompress::NPpmd::CDecoder::`vftable'{for `ICompressSetDecoderProperties2'}
.text:00000287                 mov     edx, [ebp+var_10]
.text:0000028A                 mov     dword ptr [edx+8], offset ??_7CDecoder@NPpmd@NCompress@@6BICompressSetInStream@@@ ; const NCompress::NPpmd::CDecoder::`vftable'{for `ICompressSetInStream'}
.text:00000291                 mov     eax, [ebp+var_10]
.text:00000294                 mov     dword ptr [eax+0Ch], offset ??_7CDecoder@NPpmd@NCompress@@6BICompressSetOutStreamSize@@@ ; const NCompress::NPpmd::CDecoder::`vftable'{for `ICompressSetOutStreamSize'}
.text:0000029B                 mov     ecx, [ebp+var_10]
.text:0000029E                 mov     dword ptr [ecx+10h], offset ??_7CDecoder@NPpmd@NCompress@@6BISequentialInStream@@@ ; const NCompress::NPpmd::CDecoder::`vftable'{for `ISequentialInStream'}
.text:000002A5                 mov     edx, [ebp+var_10]
.text:000002A8                 mov     dword ptr [edx+18h], 0
.text:000002AF                 mov     ecx, [ebp+var_10]
.text:000002B2                 add     ecx, 38h ; '8'  ; this
.text:000002B5                 call    ??0CByteInBufWrap@@QAE@XZ ; CByteInBufWrap::CByteInBufWrap(void)
.text:000002BA                 mov     [ebp+var_4], 0
.text:000002C1                 mov     eax, [ebp+var_10]
.text:000002C4                 mov     byte ptr [eax+4B2Dh], 0
.text:000002CB                 mov     ecx, [ebp+var_10]
.text:000002CE                 add     ecx, 4B48h
.text:000002D4                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(void)
.text:000002D9                 mov     ecx, [ebp+var_10]
.text:000002DC                 add     ecx, 1Ch
.text:000002DF                 push    ecx
.text:000002E0                 call    _Ppmd7z_RangeDec_CreateVTable@4 ; Ppmd7z_RangeDec_CreateVTable(x)
.text:000002E5                 mov     edx, [ebp+var_10]
.text:000002E8                 add     edx, 38h ; '8'
.text:000002EB                 mov     eax, [ebp+var_10]
.text:000002EE                 mov     [eax+30h], edx
.text:000002F1                 mov     ecx, [ebp+var_10]
.text:000002F4                 add     ecx, 60h ; '`'
.text:000002F7                 push    ecx
.text:000002F8                 call    _Ppmd7_Construct@4 ; Ppmd7_Construct(x)
.text:000002FD                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000304                 mov     eax, [ebp+var_10]
.text:00000307                 mov     ecx, [ebp+var_C]
.text:0000030A                 mov     large fs:0, ecx
.text:00000311                 pop     ecx
.text:00000312                 add     esp, 10h
.text:00000315                 cmp     ebp, esp
.text:00000317                 call    __RTC_CheckEsp
.text:0000031C                 mov     esp, ebp
.text:0000031E                 pop     ebp
.text:0000031F                 retn
.text:0000031F ??0CDecoder@NPpmd@NCompress@@QAE@XZ endp
.text:0000031F
.text:0000031F _text           ends
.text:0000031F
.text$x:00000320 ; ===========================================================================
.text$x:00000320
.text$x:00000320 ; Segment type: Pure code
.text$x:00000320 ; Segment permissions: Read/Execute
.text$x:00000320 _text$x         segment para public 'CODE' use32
.text$x:00000320                 assume cs:_text$x
.text$x:00000320                 ;org 320h
.text$x:00000320 ; COMDAT (pick associative to section at 208)
.text$x:00000320                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00000320
.text$x:00000320 ; =============== S U B R O U T I N E =======================================
.text$x:00000320
.text$x:00000320
.text$x:00000320 __unwindfunclet$??0CDecoder@NPpmd@NCompress@@QAE@XZ$0 proc near
.text$x:00000320                                         ; DATA XREF: .xdata$x:000003B4o
.text$x:00000320                 mov     ecx, [ebp-10h]
.text$x:00000323                 add     ecx, 38h ; '8'  ; this
.text$x:00000326                 jmp     ??1CByteInBufWrap@@QAE@XZ ; CByteInBufWrap::~CByteInBufWrap(void)
.text$x:00000326 __unwindfunclet$??0CDecoder@NPpmd@NCompress@@QAE@XZ$0 endp
.text$x:00000326
.text$x:0000032B
.text$x:0000032B ; =============== S U B R O U T I N E =======================================
.text$x:0000032B
.text$x:0000032B
.text$x:0000032B __ehhandler$??0CDecoder@NPpmd@NCompress@@QAE@XZ proc near
.text$x:0000032B                                         ; DATA XREF: NCompress::NPpmd::CDecoder::CDecoder(void)+5o
.text$x:0000032B
.text$x:0000032B arg_4           = dword ptr  8
.text$x:0000032B
.text$x:0000032B                 mov     edx, [esp+arg_4]
.text$x:0000032F                 lea     eax, [edx+0Ch]
.text$x:00000332                 mov     ecx, [edx-8]
.text$x:00000335                 xor     ecx, eax
.text$x:00000337                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000033C                 mov     eax, offset __ehfuncinfo$??0CDecoder@NPpmd@NCompress@@QAE@XZ
.text$x:00000341                 jmp     ___CxxFrameHandler3
.text$x:00000341 __ehhandler$??0CDecoder@NPpmd@NCompress@@QAE@XZ endp
.text$x:00000341
.text$x:00000341 ; ---------------------------------------------------------------------------
.text$x:00000346                 align 4
.text$x:00000346 _text$x         ends
.text$x:00000346
.rdata:00000348 ; ===========================================================================
.rdata:00000348
.rdata:00000348 ; Segment type: Pure data
.rdata:00000348 ; Segment permissions: Read
.rdata:00000348 _rdata          segment dword public 'DATA' use32
.rdata:00000348                 assume cs:_rdata
.rdata:00000348                 ;org 348h
.rdata:00000348 ; COMDAT (pick largest)
.rdata:00000348                 dd offset ??_R4CDecoder@NPpmd@NCompress@@6BISequentialInStream@@@ ; const NCompress::NPpmd::CDecoder::`RTTI Complete Object Locator'{for `ISequentialInStream'}
.rdata:0000034C                 public ??_7CDecoder@NPpmd@NCompress@@6BISequentialInStream@@@
.rdata:0000034C ; const NCompress::NPpmd::CDecoder::`vftable'{for `ISequentialInStream'}
.rdata:0000034C ??_7CDecoder@NPpmd@NCompress@@6BISequentialInStream@@@ dd offset ?QueryInterface@CDecoder@NPpmd@NCompress@@WBA@AGJABU_GUID@@PAPAX@Z
.rdata:0000034C                                         ; DATA XREF: NCompress::NPpmd::CDecoder::CDecoder(void)+96o
.rdata:0000034C                                         ; [thunk]:NCompress::NPpmd::CDecoder::QueryInterface`adjustor{16}' (_GUID const &,void * *)
.rdata:00000350                 dd offset ?AddRef@CDecoder@NPpmd@NCompress@@WBA@AGKXZ ; [thunk]:NCompress::NPpmd::CDecoder::AddRef`adjustor{16}' (void)
.rdata:00000354                 dd offset ?Release@CDecoder@NPpmd@NCompress@@WBA@AGKXZ ; [thunk]:NCompress::NPpmd::CDecoder::Release`adjustor{16}' (void)
.rdata:00000358                 dd offset ?Read@CDecoder@NPpmd@NCompress@@UAGJPAXIPAI@Z ; NCompress::NPpmd::CDecoder::Read(void *,uint,uint *)
.rdata:00000358 _rdata          ends
.rdata:00000358
.rdata:0000035C ; ===========================================================================
.rdata:0000035C
.rdata:0000035C ; Segment type: Pure data
.rdata:0000035C ; Segment permissions: Read
.rdata:0000035C _rdata          segment dword public 'DATA' use32
.rdata:0000035C                 assume cs:_rdata
.rdata:0000035C                 ;org 35Ch
.rdata:0000035C ; COMDAT (pick largest)
.rdata:0000035C                 dd offset ??_R4CDecoder@NPpmd@NCompress@@6BICompressSetOutStreamSize@@@ ; const NCompress::NPpmd::CDecoder::`RTTI Complete Object Locator'{for `ICompressSetOutStreamSize'}
.rdata:00000360                 public ??_7CDecoder@NPpmd@NCompress@@6BICompressSetOutStreamSize@@@
.rdata:00000360 ; const NCompress::NPpmd::CDecoder::`vftable'{for `ICompressSetOutStreamSize'}
.rdata:00000360 ??_7CDecoder@NPpmd@NCompress@@6BICompressSetOutStreamSize@@@ dd offset ?QueryInterface@CDecoder@NPpmd@NCompress@@WM@AGJABU_GUID@@PAPAX@Z
.rdata:00000360                                         ; DATA XREF: NCompress::NPpmd::CDecoder::CDecoder(void)+8Co
.rdata:00000360                                         ; [thunk]:NCompress::NPpmd::CDecoder::QueryInterface`adjustor{12}' (_GUID const &,void * *)
.rdata:00000364                 dd offset ?AddRef@CDecoder@NPpmd@NCompress@@WM@AGKXZ ; [thunk]:NCompress::NPpmd::CDecoder::AddRef`adjustor{12}' (void)
.rdata:00000368                 dd offset ?Release@CDecoder@NPpmd@NCompress@@WM@AGKXZ ; [thunk]:NCompress::NPpmd::CDecoder::Release`adjustor{12}' (void)
.rdata:0000036C                 dd offset ?SetOutStreamSize@CDecoder@NPpmd@NCompress@@UAGJPB_K@Z ; NCompress::NPpmd::CDecoder::SetOutStreamSize(unsigned __int64 const *)
.rdata:0000036C _rdata          ends
.rdata:0000036C
.rdata:00000370 ; ===========================================================================
.rdata:00000370
.rdata:00000370 ; Segment type: Pure data
.rdata:00000370 ; Segment permissions: Read
.rdata:00000370 _rdata          segment dword public 'DATA' use32
.rdata:00000370                 assume cs:_rdata
.rdata:00000370                 ;org 370h
.rdata:00000370 ; COMDAT (pick largest)
.rdata:00000370                 dd offset ??_R4CDecoder@NPpmd@NCompress@@6BICompressSetInStream@@@ ; const NCompress::NPpmd::CDecoder::`RTTI Complete Object Locator'{for `ICompressSetInStream'}
.rdata:00000374                 public ??_7CDecoder@NPpmd@NCompress@@6BICompressSetInStream@@@
.rdata:00000374 ; const NCompress::NPpmd::CDecoder::`vftable'{for `ICompressSetInStream'}
.rdata:00000374 ??_7CDecoder@NPpmd@NCompress@@6BICompressSetInStream@@@ dd offset ?QueryInterface@CDecoder@NPpmd@NCompress@@W7AGJABU_GUID@@PAPAX@Z
.rdata:00000374                                         ; DATA XREF: NCompress::NPpmd::CDecoder::CDecoder(void)+82o
.rdata:00000374                                         ; [thunk]:NCompress::NPpmd::CDecoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)
.rdata:00000378                 dd offset ?AddRef@CDecoder@NPpmd@NCompress@@W7AGKXZ ; [thunk]:NCompress::NPpmd::CDecoder::AddRef`adjustor{8}' (void)
.rdata:0000037C                 dd offset ?Release@CDecoder@NPpmd@NCompress@@W7AGKXZ ; [thunk]:NCompress::NPpmd::CDecoder::Release`adjustor{8}' (void)
.rdata:00000380                 dd offset ?SetInStream@CDecoder@NPpmd@NCompress@@UAGJPAUISequentialInStream@@@Z ; NCompress::NPpmd::CDecoder::SetInStream(ISequentialInStream *)
.rdata:00000384                 dd offset ?ReleaseInStream@CDecoder@NPpmd@NCompress@@UAGJXZ ; NCompress::NPpmd::CDecoder::ReleaseInStream(void)
.rdata:00000384 _rdata          ends
.rdata:00000384
.rdata:00000388 ; ===========================================================================
.rdata:00000388
.rdata:00000388 ; Segment type: Pure data
.rdata:00000388 ; Segment permissions: Read
.rdata:00000388 _rdata          segment dword public 'DATA' use32
.rdata:00000388                 assume cs:_rdata
.rdata:00000388                 ;org 388h
.rdata:00000388 ; COMDAT (pick largest)
.rdata:00000388                 dd offset ??_R4CDecoder@NPpmd@NCompress@@6BICompressSetDecoderProperties2@@@ ; const NCompress::NPpmd::CDecoder::`RTTI Complete Object Locator'{for `ICompressSetDecoderProperties2'}
.rdata:0000038C                 public ??_7CDecoder@NPpmd@NCompress@@6BICompressSetDecoderProperties2@@@
.rdata:0000038C ; const NCompress::NPpmd::CDecoder::`vftable'{for `ICompressSetDecoderProperties2'}
.rdata:0000038C ??_7CDecoder@NPpmd@NCompress@@6BICompressSetDecoderProperties2@@@ dd offset ?QueryInterface@CDecoder@NPpmd@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.rdata:0000038C                                         ; DATA XREF: NCompress::NPpmd::CDecoder::CDecoder(void)+78o
.rdata:0000038C                                         ; [thunk]:NCompress::NPpmd::CDecoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:00000390                 dd offset ?AddRef@CDecoder@NPpmd@NCompress@@W3AGKXZ ; [thunk]:NCompress::NPpmd::CDecoder::AddRef`adjustor{4}' (void)
.rdata:00000394                 dd offset ?Release@CDecoder@NPpmd@NCompress@@W3AGKXZ ; [thunk]:NCompress::NPpmd::CDecoder::Release`adjustor{4}' (void)
.rdata:00000398                 dd offset ?SetDecoderProperties2@CDecoder@NPpmd@NCompress@@UAGJPBEI@Z ; NCompress::NPpmd::CDecoder::SetDecoderProperties2(uchar const *,uint)
.rdata:00000398 _rdata          ends
.rdata:00000398
.rdata:0000039C ; ===========================================================================
.rdata:0000039C
.rdata:0000039C ; Segment type: Pure data
.rdata:0000039C ; Segment permissions: Read
.rdata:0000039C _rdata          segment dword public 'DATA' use32
.rdata:0000039C                 assume cs:_rdata
.rdata:0000039C                 ;org 39Ch
.rdata:0000039C ; COMDAT (pick largest)
.rdata:0000039C                 dd offset ??_R4CDecoder@NPpmd@NCompress@@6BICompressCoder@@@ ; const NCompress::NPpmd::CDecoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata:000003A0                 public ??_7CDecoder@NPpmd@NCompress@@6BICompressCoder@@@
.rdata:000003A0 ; const NCompress::NPpmd::CDecoder::`vftable'{for `ICompressCoder'}
.rdata:000003A0 ??_7CDecoder@NPpmd@NCompress@@6BICompressCoder@@@ dd offset ?QueryInterface@CDecoder@NPpmd@NCompress@@UAGJABU_GUID@@PAPAX@Z
.rdata:000003A0                                         ; DATA XREF: NCompress::NPpmd::CDecoder::CDecoder(void)+6Fo
.rdata:000003A0                                         ; NCompress::NPpmd::CDecoder::QueryInterface(_GUID const &,void * *)
.rdata:000003A4                 dd offset ?AddRef@CDecoder@NPpmd@NCompress@@UAGKXZ ; NCompress::NPpmd::CDecoder::AddRef(void)
.rdata:000003A8                 dd offset ?Release@CDecoder@NPpmd@NCompress@@UAGKXZ ; NCompress::NPpmd::CDecoder::Release(void)
.rdata:000003AC                 dd offset ?Code@CDecoder@NPpmd@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ; NCompress::NPpmd::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)
.rdata:000003AC _rdata          ends
.rdata:000003AC
.xdata$x:000003B0 ; ===========================================================================
.xdata$x:000003B0
.xdata$x:000003B0 ; Segment type: Pure data
.xdata$x:000003B0 ; Segment permissions: Read
.xdata$x:000003B0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000003B0                 assume cs:_xdata$x
.xdata$x:000003B0                 ;org 3B0h
.xdata$x:000003B0 ; COMDAT (pick associative to section at 208)
.xdata$x:000003B0 __unwindtable$??0CDecoder@NPpmd@NCompress@@QAE@XZ db 0FFh
.xdata$x:000003B0                                         ; DATA XREF: .xdata$x:000003C0o
.xdata$x:000003B1                 db 0FFh
.xdata$x:000003B2                 db 0FFh
.xdata$x:000003B3                 db 0FFh
.xdata$x:000003B4                 dd offset __unwindfunclet$??0CDecoder@NPpmd@NCompress@@QAE@XZ$0
.xdata$x:000003B8 __ehfuncinfo$??0CDecoder@NPpmd@NCompress@@QAE@XZ db  22h ; "
.xdata$x:000003B8                                         ; DATA XREF: __ehhandler$??0CDecoder@NPpmd@NCompress@@QAE@XZ+11o
.xdata$x:000003B9                 db    5
.xdata$x:000003BA                 db  93h ; ô
.xdata$x:000003BB                 db  19h
.xdata$x:000003BC                 db    1
.xdata$x:000003BD                 db    0
.xdata$x:000003BE                 db    0
.xdata$x:000003BF                 db    0
.xdata$x:000003C0                 dd offset __unwindtable$??0CDecoder@NPpmd@NCompress@@QAE@XZ
.xdata$x:000003C4                 db    0
.xdata$x:000003C5                 db    0
.xdata$x:000003C6                 db    0
.xdata$x:000003C7                 db    0
.xdata$x:000003C8                 db    0
.xdata$x:000003C9                 db    0
.xdata$x:000003CA                 db    0
.xdata$x:000003CB                 db    0
.xdata$x:000003CC                 db    0
.xdata$x:000003CD                 db    0
.xdata$x:000003CE                 db    0
.xdata$x:000003CF                 db    0
.xdata$x:000003D0                 db    0
.xdata$x:000003D1                 db    0
.xdata$x:000003D2                 db    0
.xdata$x:000003D3                 db    0
.xdata$x:000003D4                 db    0
.xdata$x:000003D5                 db    0
.xdata$x:000003D6                 db    0
.xdata$x:000003D7                 db    0
.xdata$x:000003D8                 db    1
.xdata$x:000003D9                 db    0
.xdata$x:000003DA                 db    0
.xdata$x:000003DB                 db    0
.xdata$x:000003DB _xdata$x        ends
.xdata$x:000003DB
.rdata$r:000003DC ; ===========================================================================
.rdata$r:000003DC
.rdata$r:000003DC ; Segment type: Pure data
.rdata$r:000003DC ; Segment permissions: Read
.rdata$r:000003DC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000003DC                 assume cs:_rdata$r
.rdata$r:000003DC                 ;org 3DCh
.rdata$r:000003DC ; COMDAT (pick any)
.rdata$r:000003DC                 public ??_R4CDecoder@NPpmd@NCompress@@6BICompressCoder@@@
.rdata$r:000003DC ; const NCompress::NPpmd::CDecoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata$r:000003DC ??_R4CDecoder@NPpmd@NCompress@@6BICompressCoder@@@ db    0
.rdata$r:000003DC                                         ; DATA XREF: .rdata:0000039Co
.rdata$r:000003DD                 db    0
.rdata$r:000003DE                 db    0
.rdata$r:000003DF                 db    0
.rdata$r:000003E0                 db    0
.rdata$r:000003E1                 db    0
.rdata$r:000003E2                 db    0
.rdata$r:000003E3                 db    0
.rdata$r:000003E4                 db    0
.rdata$r:000003E5                 db    0
.rdata$r:000003E6                 db    0
.rdata$r:000003E7                 db    0
.rdata$r:000003E8                 dd offset ??_R0?AVCDecoder@NPpmd@NCompress@@@8 ; NCompress::NPpmd::CDecoder `RTTI Type Descriptor'
.rdata$r:000003EC                 dd offset ??_R3CDecoder@NPpmd@NCompress@@8 ; NCompress::NPpmd::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000003EC _rdata$r        ends
.rdata$r:000003EC
.data:000003F0 ; ===========================================================================
.data:000003F0
.data:000003F0 ; Segment type: Pure data
.data:000003F0 ; Segment permissions: Read/Write
.data:000003F0 _data           segment dword public 'DATA' use32
.data:000003F0                 assume cs:_data
.data:000003F0                 ;org 3F0h
.data:000003F0 ; COMDAT (pick any)
.data:000003F0                 public ??_R0?AVCDecoder@NPpmd@NCompress@@@8
.data:000003F0 ; class NCompress::NPpmd::CDecoder `RTTI Type Descriptor'
.data:000003F0 ??_R0?AVCDecoder@NPpmd@NCompress@@@8 dd offset ??_7type_info@@6B@
.data:000003F0                                         ; DATA XREF: .rdata$r:000003E8o
.data:000003F0                                         ; .rdata$r:NCompress::NPpmd::CDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:000003F0                                         ; const type_info::`vftable'
.data:000003F4                 align 8
.data:000003F8 a_?avcdecoder@n db '.?AVCDecoder@NPpmd@NCompress@@',0
.data:00000417                 align 4
.data:00000417 _data           ends
.data:00000417
.rdata$r:00000418 ; ===========================================================================
.rdata$r:00000418
.rdata$r:00000418 ; Segment type: Pure data
.rdata$r:00000418 ; Segment permissions: Read
.rdata$r:00000418 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000418                 assume cs:_rdata$r
.rdata$r:00000418                 ;org 418h
.rdata$r:00000418 ; COMDAT (pick any)
.rdata$r:00000418                 public ??_R3CDecoder@NPpmd@NCompress@@8
.rdata$r:00000418 ; NCompress::NPpmd::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000418 ??_R3CDecoder@NPpmd@NCompress@@8 db    0 ; DATA XREF: .rdata$r:000003ECo
.rdata$r:00000418                                         ; .rdata$r:00000474o ...
.rdata$r:00000419                 db    0
.rdata$r:0000041A                 db    0
.rdata$r:0000041B                 db    0
.rdata$r:0000041C                 db    5
.rdata$r:0000041D                 db    0
.rdata$r:0000041E                 db    0
.rdata$r:0000041F                 db    0
.rdata$r:00000420                 db  0Ch
.rdata$r:00000421                 db    0
.rdata$r:00000422                 db    0
.rdata$r:00000423                 db    0
.rdata$r:00000424                 dd offset ??_R2CDecoder@NPpmd@NCompress@@8 ; NCompress::NPpmd::CDecoder::`RTTI Base Class Array'
.rdata$r:00000424 _rdata$r        ends
.rdata$r:00000424
.rdata$r:00000428 ; ===========================================================================
.rdata$r:00000428
.rdata$r:00000428 ; Segment type: Pure data
.rdata$r:00000428 ; Segment permissions: Read
.rdata$r:00000428 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000428                 assume cs:_rdata$r
.rdata$r:00000428                 ;org 428h
.rdata$r:00000428 ; COMDAT (pick any)
.rdata$r:00000428                 public ??_R2CDecoder@NPpmd@NCompress@@8
.rdata$r:00000428 ; NCompress::NPpmd::CDecoder::`RTTI Base Class Array'
.rdata$r:00000428 ??_R2CDecoder@NPpmd@NCompress@@8 dd offset ??_R1A@?0A@EA@CDecoder@NPpmd@NCompress@@8
.rdata$r:00000428                                         ; DATA XREF: .rdata$r:00000424o
.rdata$r:00000428                                         ; NCompress::NPpmd::CDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000042C                 dd offset ??_R1A@?0A@EA@ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000430                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:00000434                 dd offset ??_R13?0A@EA@ICompressSetDecoderProperties2@@8 ; ICompressSetDecoderProperties2::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00000438                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:0000043C                 dd offset ??_R17?0A@EA@ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:00000440                 dd offset ??_R17?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
.rdata$r:00000444                 dd offset ??_R1M@?0A@EA@ICompressSetOutStreamSize@@8 ; ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (12,-1,0,64)'
.rdata$r:00000448                 dd offset ??_R1M@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (12,-1,0,66)'
.rdata$r:0000044C                 dd offset ??_R1BA@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (16,-1,0,64)'
.rdata$r:00000450                 dd offset ??_R1BA@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (16,-1,0,66)'
.rdata$r:00000454                 dd offset ??_R1BE@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (20,-1,0,64)'
.rdata$r:00000458                 db    0
.rdata$r:00000459                 align 4
.rdata$r:00000459 _rdata$r        ends
.rdata$r:00000459
.rdata$r:0000045C ; ===========================================================================
.rdata$r:0000045C
.rdata$r:0000045C ; Segment type: Pure data
.rdata$r:0000045C ; Segment permissions: Read
.rdata$r:0000045C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000045C                 assume cs:_rdata$r
.rdata$r:0000045C                 ;org 45Ch
.rdata$r:0000045C ; COMDAT (pick any)
.rdata$r:0000045C                 public ??_R1A@?0A@EA@CDecoder@NPpmd@NCompress@@8
.rdata$r:0000045C ; NCompress::NPpmd::CDecoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000045C ??_R1A@?0A@EA@CDecoder@NPpmd@NCompress@@8 dd offset ??_R0?AVCDecoder@NPpmd@NCompress@@@8
.rdata$r:0000045C                                         ; DATA XREF: .rdata$r:NCompress::NPpmd::CDecoder::`RTTI Base Class Array'o
.rdata$r:0000045C                                         ; NCompress::NPpmd::CDecoder `RTTI Type Descriptor'
.rdata$r:00000460                 db  0Bh
.rdata$r:00000461                 db    0
.rdata$r:00000462                 db    0
.rdata$r:00000463                 db    0
.rdata$r:00000464                 db    0
.rdata$r:00000465                 db    0
.rdata$r:00000466                 db    0
.rdata$r:00000467                 db    0
.rdata$r:00000468                 db 0FFh
.rdata$r:00000469                 db 0FFh
.rdata$r:0000046A                 db 0FFh
.rdata$r:0000046B                 db 0FFh
.rdata$r:0000046C                 db    0
.rdata$r:0000046D                 db    0
.rdata$r:0000046E                 db    0
.rdata$r:0000046F                 db    0
.rdata$r:00000470                 db  40h ; @
.rdata$r:00000471                 db    0
.rdata$r:00000472                 db    0
.rdata$r:00000473                 db    0
.rdata$r:00000474                 dd offset ??_R3CDecoder@NPpmd@NCompress@@8 ; NCompress::NPpmd::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000474 _rdata$r        ends
.rdata$r:00000474
.rdata$r:00000478 ; ===========================================================================
.rdata$r:00000478
.rdata$r:00000478 ; Segment type: Pure data
.rdata$r:00000478 ; Segment permissions: Read
.rdata$r:00000478 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000478                 assume cs:_rdata$r
.rdata$r:00000478                 ;org 478h
.rdata$r:00000478 ; COMDAT (pick any)
.rdata$r:00000478                 public ??_R1A@?0A@EA@ICompressCoder@@8
.rdata$r:00000478 ; ICompressCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000478 ??_R1A@?0A@EA@ICompressCoder@@8 dd offset ??_R0?AUICompressCoder@@@8
.rdata$r:00000478                                         ; DATA XREF: .rdata$r:0000042Co
.rdata$r:00000478                                         ; .rdata$r:ICompressCoder::`RTTI Base Class Array'o
.rdata$r:00000478                                         ; ICompressCoder `RTTI Type Descriptor'
.rdata$r:0000047C                 db    1
.rdata$r:0000047D                 db    0
.rdata$r:0000047E                 db    0
.rdata$r:0000047F                 db    0
.rdata$r:00000480                 db    0
.rdata$r:00000481                 db    0
.rdata$r:00000482                 db    0
.rdata$r:00000483                 db    0
.rdata$r:00000484                 db 0FFh
.rdata$r:00000485                 db 0FFh
.rdata$r:00000486                 db 0FFh
.rdata$r:00000487                 db 0FFh
.rdata$r:00000488                 db    0
.rdata$r:00000489                 db    0
.rdata$r:0000048A                 db    0
.rdata$r:0000048B                 db    0
.rdata$r:0000048C                 db  40h ; @
.rdata$r:0000048D                 db    0
.rdata$r:0000048E                 db    0
.rdata$r:0000048F                 db    0
.rdata$r:00000490                 dd offset ??_R3ICompressCoder@@8 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000490 _rdata$r        ends
.rdata$r:00000490
.data:00000494 ; ===========================================================================
.data:00000494
.data:00000494 ; Segment type: Pure data
.data:00000494 ; Segment permissions: Read/Write
.data:00000494 _data           segment dword public 'DATA' use32
.data:00000494                 assume cs:_data
.data:00000494                 ;org 494h
.data:00000494 ; COMDAT (pick any)
.data:00000494                 public ??_R0?AUICompressCoder@@@8
.data:00000494 ; struct ICompressCoder `RTTI Type Descriptor'
.data:00000494 ??_R0?AUICompressCoder@@@8 dd offset ??_7type_info@@6B@
.data:00000494                                         ; DATA XREF: .rdata$r:ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000494                                         ; .rdata$r:00000B64o
.data:00000494                                         ; const type_info::`vftable'
.data:00000498                 db    0
.data:00000499                 db    0
.data:0000049A                 db    0
.data:0000049B                 db    0
.data:0000049C                 db  2Eh ; .
.data:0000049D                 db  3Fh ; ?
.data:0000049E                 db  41h ; A
.data:0000049F                 db  55h ; U
.data:000004A0                 db  49h ; I
.data:000004A1                 db  43h ; C
.data:000004A2                 db  6Fh ; o
.data:000004A3                 db  6Dh ; m
.data:000004A4                 db  70h ; p
.data:000004A5                 db  72h ; r
.data:000004A6                 db  65h ; e
.data:000004A7                 db  73h ; s
.data:000004A8                 db  73h ; s
.data:000004A9                 db  43h ; C
.data:000004AA                 db  6Fh ; o
.data:000004AB                 db  64h ; d
.data:000004AC                 db  65h ; e
.data:000004AD                 db  72h ; r
.data:000004AE                 db  40h ; @
.data:000004AF                 db  40h ; @
.data:000004B0                 db    0
.data:000004B1                 align 4
.data:000004B1 _data           ends
.data:000004B1
.rdata$r:000004B4 ; ===========================================================================
.rdata$r:000004B4
.rdata$r:000004B4 ; Segment type: Pure data
.rdata$r:000004B4 ; Segment permissions: Read
.rdata$r:000004B4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000004B4                 assume cs:_rdata$r
.rdata$r:000004B4                 ;org 4B4h
.rdata$r:000004B4 ; COMDAT (pick any)
.rdata$r:000004B4                 public ??_R3ICompressCoder@@8
.rdata$r:000004B4 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000004B4 ??_R3ICompressCoder@@8 db    0          ; DATA XREF: .rdata$r:00000490o
.rdata$r:000004B4                                         ; .rdata$r:00000B68o
.rdata$r:000004B5                 db    0
.rdata$r:000004B6                 db    0
.rdata$r:000004B7                 db    0
.rdata$r:000004B8                 db    0
.rdata$r:000004B9                 db    0
.rdata$r:000004BA                 db    0
.rdata$r:000004BB                 db    0
.rdata$r:000004BC                 db    2
.rdata$r:000004BD                 db    0
.rdata$r:000004BE                 db    0
.rdata$r:000004BF                 db    0
.rdata$r:000004C0                 dd offset ??_R2ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Array'
.rdata$r:000004C0 _rdata$r        ends
.rdata$r:000004C0
.rdata$r:000004C4 ; ===========================================================================
.rdata$r:000004C4
.rdata$r:000004C4 ; Segment type: Pure data
.rdata$r:000004C4 ; Segment permissions: Read
.rdata$r:000004C4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000004C4                 assume cs:_rdata$r
.rdata$r:000004C4                 ;org 4C4h
.rdata$r:000004C4 ; COMDAT (pick any)
.rdata$r:000004C4                 public ??_R2ICompressCoder@@8
.rdata$r:000004C4 ; ICompressCoder::`RTTI Base Class Array'
.rdata$r:000004C4 ??_R2ICompressCoder@@8 dd offset ??_R1A@?0A@EA@ICompressCoder@@8
.rdata$r:000004C4                                         ; DATA XREF: .rdata$r:000004C0o
.rdata$r:000004C4                                         ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000004C8                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000004CC                 db    0
.rdata$r:000004CD                 align 10h
.rdata$r:000004CD _rdata$r        ends
.rdata$r:000004CD
.rdata$r:000004D0 ; ===========================================================================
.rdata$r:000004D0
.rdata$r:000004D0 ; Segment type: Pure data
.rdata$r:000004D0 ; Segment permissions: Read
.rdata$r:000004D0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000004D0                 assume cs:_rdata$r
.rdata$r:000004D0                 ;org 4D0h
.rdata$r:000004D0 ; COMDAT (pick any)
.rdata$r:000004D0                 public ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:000004D0 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000004D0 ??_R1A@?0A@EA@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000004D0                                         ; DATA XREF: .rdata$r:000004C8o
.rdata$r:000004D0                                         ; .rdata$r:IUnknown::`RTTI Base Class Array'o ...
.rdata$r:000004D0                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:000004D4                 db    0
.rdata$r:000004D5                 db    0
.rdata$r:000004D6                 db    0
.rdata$r:000004D7                 db    0
.rdata$r:000004D8                 db    0
.rdata$r:000004D9                 db    0
.rdata$r:000004DA                 db    0
.rdata$r:000004DB                 db    0
.rdata$r:000004DC                 db 0FFh
.rdata$r:000004DD                 db 0FFh
.rdata$r:000004DE                 db 0FFh
.rdata$r:000004DF                 db 0FFh
.rdata$r:000004E0                 db    0
.rdata$r:000004E1                 db    0
.rdata$r:000004E2                 db    0
.rdata$r:000004E3                 db    0
.rdata$r:000004E4                 db  40h ; @
.rdata$r:000004E5                 db    0
.rdata$r:000004E6                 db    0
.rdata$r:000004E7                 db    0
.rdata$r:000004E8                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000004E8 _rdata$r        ends
.rdata$r:000004E8
.data:000004EC ; ===========================================================================
.data:000004EC
.data:000004EC ; Segment type: Pure data
.data:000004EC ; Segment permissions: Read/Write
.data:000004EC _data           segment dword public 'DATA' use32
.data:000004EC                 assume cs:_data
.data:000004EC                 ;org 4ECh
.data:000004EC ; COMDAT (pick any)
.data:000004EC                 public ??_R0?AUIUnknown@@@8
.data:000004EC ; struct IUnknown `RTTI Type Descriptor'
.data:000004EC ??_R0?AUIUnknown@@@8 dd offset ??_7type_info@@6B@
.data:000004EC                                         ; DATA XREF: .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000004EC                                         ; .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'o ...
.data:000004EC                                         ; const type_info::`vftable'
.data:000004F0                 db    0
.data:000004F1                 db    0
.data:000004F2                 db    0
.data:000004F3                 db    0
.data:000004F4                 db  2Eh ; .
.data:000004F5                 db  3Fh ; ?
.data:000004F6                 db  41h ; A
.data:000004F7                 db  55h ; U
.data:000004F8                 db  49h ; I
.data:000004F9                 db  55h ; U
.data:000004FA                 db  6Eh ; n
.data:000004FB                 db  6Bh ; k
.data:000004FC                 db  6Eh ; n
.data:000004FD                 db  6Fh ; o
.data:000004FE                 db  77h ; w
.data:000004FF                 db  6Eh ; n
.data:00000500                 db  40h ; @
.data:00000501                 db  40h ; @
.data:00000502                 db    0
.data:00000503                 align 4
.data:00000503 _data           ends
.data:00000503
.rdata$r:00000504 ; ===========================================================================
.rdata$r:00000504
.rdata$r:00000504 ; Segment type: Pure data
.rdata$r:00000504 ; Segment permissions: Read
.rdata$r:00000504 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000504                 assume cs:_rdata$r
.rdata$r:00000504                 ;org 504h
.rdata$r:00000504 ; COMDAT (pick any)
.rdata$r:00000504                 public ??_R3IUnknown@@8
.rdata$r:00000504 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000504 ??_R3IUnknown@@8 db    0                ; DATA XREF: .rdata$r:000004E8o
.rdata$r:00000504                                         ; .rdata$r:00000534o ...
.rdata$r:00000505                 db    0
.rdata$r:00000506                 db    0
.rdata$r:00000507                 db    0
.rdata$r:00000508                 db    0
.rdata$r:00000509                 db    0
.rdata$r:0000050A                 db    0
.rdata$r:0000050B                 db    0
.rdata$r:0000050C                 db    1
.rdata$r:0000050D                 db    0
.rdata$r:0000050E                 db    0
.rdata$r:0000050F                 db    0
.rdata$r:00000510                 dd offset ??_R2IUnknown@@8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00000510 _rdata$r        ends
.rdata$r:00000510
.rdata$r:00000514 ; ===========================================================================
.rdata$r:00000514
.rdata$r:00000514 ; Segment type: Pure data
.rdata$r:00000514 ; Segment permissions: Read
.rdata$r:00000514 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000514                 assume cs:_rdata$r
.rdata$r:00000514                 ;org 514h
.rdata$r:00000514 ; COMDAT (pick any)
.rdata$r:00000514                 public ??_R2IUnknown@@8
.rdata$r:00000514 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00000514 ??_R2IUnknown@@8 dd offset ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00000514                                         ; DATA XREF: .rdata$r:00000510o
.rdata$r:00000514                                         ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000518                 db    0
.rdata$r:00000519                 align 4
.rdata$r:00000519 _rdata$r        ends
.rdata$r:00000519
.rdata$r:0000051C ; ===========================================================================
.rdata$r:0000051C
.rdata$r:0000051C ; Segment type: Pure data
.rdata$r:0000051C ; Segment permissions: Read
.rdata$r:0000051C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000051C                 assume cs:_rdata$r
.rdata$r:0000051C                 ;org 51Ch
.rdata$r:0000051C ; COMDAT (pick any)
.rdata$r:0000051C                 public ??_R1A@?0A@EC@IUnknown@@8
.rdata$r:0000051C ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 66)'
.rdata$r:0000051C ??_R1A@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:0000051C                                         ; DATA XREF: .rdata$r:00000430o
.rdata$r:0000051C                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00000520                 db    0
.rdata$r:00000521                 db    0
.rdata$r:00000522                 db    0
.rdata$r:00000523                 db    0
.rdata$r:00000524                 db    0
.rdata$r:00000525                 db    0
.rdata$r:00000526                 db    0
.rdata$r:00000527                 db    0
.rdata$r:00000528                 db 0FFh
.rdata$r:00000529                 db 0FFh
.rdata$r:0000052A                 db 0FFh
.rdata$r:0000052B                 db 0FFh
.rdata$r:0000052C                 db    0
.rdata$r:0000052D                 db    0
.rdata$r:0000052E                 db    0
.rdata$r:0000052F                 db    0
.rdata$r:00000530                 db  42h ; B
.rdata$r:00000531                 db    0
.rdata$r:00000532                 db    0
.rdata$r:00000533                 db    0
.rdata$r:00000534                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000534 _rdata$r        ends
.rdata$r:00000534
.rdata$r:00000538 ; ===========================================================================
.rdata$r:00000538
.rdata$r:00000538 ; Segment type: Pure data
.rdata$r:00000538 ; Segment permissions: Read
.rdata$r:00000538 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000538                 assume cs:_rdata$r
.rdata$r:00000538                 ;org 538h
.rdata$r:00000538 ; COMDAT (pick any)
.rdata$r:00000538                 public ??_R13?0A@EA@ICompressSetDecoderProperties2@@8
.rdata$r:00000538 ; ICompressSetDecoderProperties2::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:00000538 ??_R13?0A@EA@ICompressSetDecoderProperties2@@8 dd offset ??_R0?AUICompressSetDecoderProperties2@@@8
.rdata$r:00000538                                         ; DATA XREF: .rdata$r:00000434o
.rdata$r:00000538                                         ; ICompressSetDecoderProperties2 `RTTI Type Descriptor'
.rdata$r:0000053C                 db    1
.rdata$r:0000053D                 db    0
.rdata$r:0000053E                 db    0
.rdata$r:0000053F                 db    0
.rdata$r:00000540                 db    4
.rdata$r:00000541                 db    0
.rdata$r:00000542                 db    0
.rdata$r:00000543                 db    0
.rdata$r:00000544                 db 0FFh
.rdata$r:00000545                 db 0FFh
.rdata$r:00000546                 db 0FFh
.rdata$r:00000547                 db 0FFh
.rdata$r:00000548                 db    0
.rdata$r:00000549                 db    0
.rdata$r:0000054A                 db    0
.rdata$r:0000054B                 db    0
.rdata$r:0000054C                 db  40h ; @
.rdata$r:0000054D                 db    0
.rdata$r:0000054E                 db    0
.rdata$r:0000054F                 db    0
.rdata$r:00000550                 dd offset ??_R3ICompressSetDecoderProperties2@@8 ; ICompressSetDecoderProperties2::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000550 _rdata$r        ends
.rdata$r:00000550
.data:00000554 ; ===========================================================================
.data:00000554
.data:00000554 ; Segment type: Pure data
.data:00000554 ; Segment permissions: Read/Write
.data:00000554 _data           segment dword public 'DATA' use32
.data:00000554                 assume cs:_data
.data:00000554                 ;org 554h
.data:00000554 ; COMDAT (pick any)
.data:00000554                 public ??_R0?AUICompressSetDecoderProperties2@@@8
.data:00000554 ; struct ICompressSetDecoderProperties2 `RTTI Type Descriptor'
.data:00000554 ??_R0?AUICompressSetDecoderProperties2@@@8 dd offset ??_7type_info@@6B@
.data:00000554                                         ; DATA XREF: .rdata$r:ICompressSetDecoderProperties2::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:00000554                                         ; .rdata$r:ICompressSetDecoderProperties2::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00000554                                         ; const type_info::`vftable'
.data:00000558                 db    0
.data:00000559                 db    0
.data:0000055A                 db    0
.data:0000055B                 db    0
.data:0000055C                 db  2Eh ; .
.data:0000055D                 db  3Fh ; ?
.data:0000055E                 db  41h ; A
.data:0000055F                 db  55h ; U
.data:00000560                 db  49h ; I
.data:00000561                 db  43h ; C
.data:00000562                 db  6Fh ; o
.data:00000563                 db  6Dh ; m
.data:00000564                 db  70h ; p
.data:00000565                 db  72h ; r
.data:00000566                 db  65h ; e
.data:00000567                 db  73h ; s
.data:00000568                 db  73h ; s
.data:00000569                 db  53h ; S
.data:0000056A                 db  65h ; e
.data:0000056B                 db  74h ; t
.data:0000056C                 db  44h ; D
.data:0000056D                 db  65h ; e
.data:0000056E                 db  63h ; c
.data:0000056F                 db  6Fh ; o
.data:00000570                 db  64h ; d
.data:00000571                 db  65h ; e
.data:00000572                 db  72h ; r
.data:00000573                 db  50h ; P
.data:00000574                 db  72h ; r
.data:00000575                 db  6Fh ; o
.data:00000576                 db  70h ; p
.data:00000577                 db  65h ; e
.data:00000578                 db  72h ; r
.data:00000579                 db  74h ; t
.data:0000057A                 db  69h ; i
.data:0000057B                 db  65h ; e
.data:0000057C                 db  73h ; s
.data:0000057D                 db  32h ; 2
.data:0000057E                 db  40h ; @
.data:0000057F                 db  40h ; @
.data:00000580                 db    0
.data:00000581                 align 4
.data:00000581 _data           ends
.data:00000581
.rdata$r:00000584 ; ===========================================================================
.rdata$r:00000584
.rdata$r:00000584 ; Segment type: Pure data
.rdata$r:00000584 ; Segment permissions: Read
.rdata$r:00000584 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000584                 assume cs:_rdata$r
.rdata$r:00000584                 ;org 584h
.rdata$r:00000584 ; COMDAT (pick any)
.rdata$r:00000584                 public ??_R3ICompressSetDecoderProperties2@@8
.rdata$r:00000584 ; ICompressSetDecoderProperties2::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000584 ??_R3ICompressSetDecoderProperties2@@8 db    0
.rdata$r:00000584                                         ; DATA XREF: .rdata$r:00000550o
.rdata$r:00000584                                         ; .rdata$r:000005B8o ...
.rdata$r:00000585                 db    0
.rdata$r:00000586                 db    0
.rdata$r:00000587                 db    0
.rdata$r:00000588                 db    0
.rdata$r:00000589                 db    0
.rdata$r:0000058A                 db    0
.rdata$r:0000058B                 db    0
.rdata$r:0000058C                 db    2
.rdata$r:0000058D                 db    0
.rdata$r:0000058E                 db    0
.rdata$r:0000058F                 db    0
.rdata$r:00000590                 dd offset ??_R2ICompressSetDecoderProperties2@@8 ; ICompressSetDecoderProperties2::`RTTI Base Class Array'
.rdata$r:00000590 _rdata$r        ends
.rdata$r:00000590
.rdata$r:00000594 ; ===========================================================================
.rdata$r:00000594
.rdata$r:00000594 ; Segment type: Pure data
.rdata$r:00000594 ; Segment permissions: Read
.rdata$r:00000594 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000594                 assume cs:_rdata$r
.rdata$r:00000594                 ;org 594h
.rdata$r:00000594 ; COMDAT (pick any)
.rdata$r:00000594                 public ??_R2ICompressSetDecoderProperties2@@8
.rdata$r:00000594 ; ICompressSetDecoderProperties2::`RTTI Base Class Array'
.rdata$r:00000594 ??_R2ICompressSetDecoderProperties2@@8 dd offset ??_R1A@?0A@EA@ICompressSetDecoderProperties2@@8
.rdata$r:00000594                                         ; DATA XREF: .rdata$r:00000590o
.rdata$r:00000594                                         ; ICompressSetDecoderProperties2::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000598                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000059C                 db    0
.rdata$r:0000059D                 align 10h
.rdata$r:0000059D _rdata$r        ends
.rdata$r:0000059D
.rdata$r:000005A0 ; ===========================================================================
.rdata$r:000005A0
.rdata$r:000005A0 ; Segment type: Pure data
.rdata$r:000005A0 ; Segment permissions: Read
.rdata$r:000005A0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000005A0                 assume cs:_rdata$r
.rdata$r:000005A0                 ;org 5A0h
.rdata$r:000005A0 ; COMDAT (pick any)
.rdata$r:000005A0                 public ??_R1A@?0A@EA@ICompressSetDecoderProperties2@@8
.rdata$r:000005A0 ; ICompressSetDecoderProperties2::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000005A0 ??_R1A@?0A@EA@ICompressSetDecoderProperties2@@8 dd offset ??_R0?AUICompressSetDecoderProperties2@@@8
.rdata$r:000005A0                                         ; DATA XREF: .rdata$r:ICompressSetDecoderProperties2::`RTTI Base Class Array'o
.rdata$r:000005A0                                         ; ICompressSetDecoderProperties2 `RTTI Type Descriptor'
.rdata$r:000005A4                 db    1
.rdata$r:000005A5                 db    0
.rdata$r:000005A6                 db    0
.rdata$r:000005A7                 db    0
.rdata$r:000005A8                 db    0
.rdata$r:000005A9                 db    0
.rdata$r:000005AA                 db    0
.rdata$r:000005AB                 db    0
.rdata$r:000005AC                 db 0FFh
.rdata$r:000005AD                 db 0FFh
.rdata$r:000005AE                 db 0FFh
.rdata$r:000005AF                 db 0FFh
.rdata$r:000005B0                 db    0
.rdata$r:000005B1                 db    0
.rdata$r:000005B2                 db    0
.rdata$r:000005B3                 db    0
.rdata$r:000005B4                 db  40h ; @
.rdata$r:000005B5                 db    0
.rdata$r:000005B6                 db    0
.rdata$r:000005B7                 db    0
.rdata$r:000005B8                 dd offset ??_R3ICompressSetDecoderProperties2@@8 ; ICompressSetDecoderProperties2::`RTTI Class Hierarchy Descriptor'
.rdata$r:000005B8 _rdata$r        ends
.rdata$r:000005B8
.rdata$r:000005BC ; ===========================================================================
.rdata$r:000005BC
.rdata$r:000005BC ; Segment type: Pure data
.rdata$r:000005BC ; Segment permissions: Read
.rdata$r:000005BC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000005BC                 assume cs:_rdata$r
.rdata$r:000005BC                 ;org 5BCh
.rdata$r:000005BC ; COMDAT (pick any)
.rdata$r:000005BC                 public ??_R13?0A@EC@IUnknown@@8
.rdata$r:000005BC ; IUnknown::`RTTI Base Class Descriptor at (4, -1, 0, 66)'
.rdata$r:000005BC ??_R13?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000005BC                                         ; DATA XREF: .rdata$r:00000438o
.rdata$r:000005BC                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:000005C0                 db    0
.rdata$r:000005C1                 db    0
.rdata$r:000005C2                 db    0
.rdata$r:000005C3                 db    0
.rdata$r:000005C4                 db    4
.rdata$r:000005C5                 db    0
.rdata$r:000005C6                 db    0
.rdata$r:000005C7                 db    0
.rdata$r:000005C8                 db 0FFh
.rdata$r:000005C9                 db 0FFh
.rdata$r:000005CA                 db 0FFh
.rdata$r:000005CB                 db 0FFh
.rdata$r:000005CC                 db    0
.rdata$r:000005CD                 db    0
.rdata$r:000005CE                 db    0
.rdata$r:000005CF                 db    0
.rdata$r:000005D0                 db  42h ; B
.rdata$r:000005D1                 db    0
.rdata$r:000005D2                 db    0
.rdata$r:000005D3                 db    0
.rdata$r:000005D4                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000005D4 _rdata$r        ends
.rdata$r:000005D4
.rdata$r:000005D8 ; ===========================================================================
.rdata$r:000005D8
.rdata$r:000005D8 ; Segment type: Pure data
.rdata$r:000005D8 ; Segment permissions: Read
.rdata$r:000005D8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000005D8                 assume cs:_rdata$r
.rdata$r:000005D8                 ;org 5D8h
.rdata$r:000005D8 ; COMDAT (pick any)
.rdata$r:000005D8                 public ??_R17?0A@EA@ICompressSetInStream@@8
.rdata$r:000005D8 ; ICompressSetInStream::`RTTI Base Class Descriptor at (8, -1, 0, 64)'
.rdata$r:000005D8 ??_R17?0A@EA@ICompressSetInStream@@8 dd offset ??_R0?AUICompressSetInStream@@@8
.rdata$r:000005D8                                         ; DATA XREF: .rdata$r:0000043Co
.rdata$r:000005D8                                         ; ICompressSetInStream `RTTI Type Descriptor'
.rdata$r:000005DC                 db    1
.rdata$r:000005DD                 db    0
.rdata$r:000005DE                 db    0
.rdata$r:000005DF                 db    0
.rdata$r:000005E0                 db    8
.rdata$r:000005E1                 db    0
.rdata$r:000005E2                 db    0
.rdata$r:000005E3                 db    0
.rdata$r:000005E4                 db 0FFh
.rdata$r:000005E5                 db 0FFh
.rdata$r:000005E6                 db 0FFh
.rdata$r:000005E7                 db 0FFh
.rdata$r:000005E8                 db    0
.rdata$r:000005E9                 db    0
.rdata$r:000005EA                 db    0
.rdata$r:000005EB                 db    0
.rdata$r:000005EC                 db  40h ; @
.rdata$r:000005ED                 db    0
.rdata$r:000005EE                 db    0
.rdata$r:000005EF                 db    0
.rdata$r:000005F0                 dd offset ??_R3ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000005F0 _rdata$r        ends
.rdata$r:000005F0
.data:000005F4 ; ===========================================================================
.data:000005F4
.data:000005F4 ; Segment type: Pure data
.data:000005F4 ; Segment permissions: Read/Write
.data:000005F4 _data           segment dword public 'DATA' use32
.data:000005F4                 assume cs:_data
.data:000005F4                 ;org 5F4h
.data:000005F4 ; COMDAT (pick any)
.data:000005F4                 public ??_R0?AUICompressSetInStream@@@8
.data:000005F4 ; struct ICompressSetInStream `RTTI Type Descriptor'
.data:000005F4 ??_R0?AUICompressSetInStream@@@8 dd offset ??_7type_info@@6B@
.data:000005F4                                         ; DATA XREF: .rdata$r:ICompressSetInStream::`RTTI Base Class Descriptor at (8,-1,0,64)'o
.data:000005F4                                         ; .rdata$r:ICompressSetInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:000005F4                                         ; const type_info::`vftable'
.data:000005F8                 db    0
.data:000005F9                 db    0
.data:000005FA                 db    0
.data:000005FB                 db    0
.data:000005FC                 db  2Eh ; .
.data:000005FD                 db  3Fh ; ?
.data:000005FE                 db  41h ; A
.data:000005FF                 db  55h ; U
.data:00000600                 db  49h ; I
.data:00000601                 db  43h ; C
.data:00000602                 db  6Fh ; o
.data:00000603                 db  6Dh ; m
.data:00000604                 db  70h ; p
.data:00000605                 db  72h ; r
.data:00000606                 db  65h ; e
.data:00000607                 db  73h ; s
.data:00000608                 db  73h ; s
.data:00000609                 db  53h ; S
.data:0000060A                 db  65h ; e
.data:0000060B                 db  74h ; t
.data:0000060C                 db  49h ; I
.data:0000060D                 db  6Eh ; n
.data:0000060E                 db  53h ; S
.data:0000060F                 db  74h ; t
.data:00000610                 db  72h ; r
.data:00000611                 db  65h ; e
.data:00000612                 db  61h ; a
.data:00000613                 db  6Dh ; m
.data:00000614                 db  40h ; @
.data:00000615                 db  40h ; @
.data:00000616                 db    0
.data:00000617                 align 4
.data:00000617 _data           ends
.data:00000617
.rdata$r:00000618 ; ===========================================================================
.rdata$r:00000618
.rdata$r:00000618 ; Segment type: Pure data
.rdata$r:00000618 ; Segment permissions: Read
.rdata$r:00000618 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000618                 assume cs:_rdata$r
.rdata$r:00000618                 ;org 618h
.rdata$r:00000618 ; COMDAT (pick any)
.rdata$r:00000618                 public ??_R3ICompressSetInStream@@8
.rdata$r:00000618 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000618 ??_R3ICompressSetInStream@@8 db    0    ; DATA XREF: .rdata$r:000005F0o
.rdata$r:00000618                                         ; .rdata$r:0000064Co ...
.rdata$r:00000619                 db    0
.rdata$r:0000061A                 db    0
.rdata$r:0000061B                 db    0
.rdata$r:0000061C                 db    0
.rdata$r:0000061D                 db    0
.rdata$r:0000061E                 db    0
.rdata$r:0000061F                 db    0
.rdata$r:00000620                 db    2
.rdata$r:00000621                 db    0
.rdata$r:00000622                 db    0
.rdata$r:00000623                 db    0
.rdata$r:00000624                 dd offset ??_R2ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Base Class Array'
.rdata$r:00000624 _rdata$r        ends
.rdata$r:00000624
.rdata$r:00000628 ; ===========================================================================
.rdata$r:00000628
.rdata$r:00000628 ; Segment type: Pure data
.rdata$r:00000628 ; Segment permissions: Read
.rdata$r:00000628 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000628                 assume cs:_rdata$r
.rdata$r:00000628                 ;org 628h
.rdata$r:00000628 ; COMDAT (pick any)
.rdata$r:00000628                 public ??_R2ICompressSetInStream@@8
.rdata$r:00000628 ; ICompressSetInStream::`RTTI Base Class Array'
.rdata$r:00000628 ??_R2ICompressSetInStream@@8 dd offset ??_R1A@?0A@EA@ICompressSetInStream@@8
.rdata$r:00000628                                         ; DATA XREF: .rdata$r:00000624o
.rdata$r:00000628                                         ; ICompressSetInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000062C                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000630                 db    0
.rdata$r:00000631                 align 4
.rdata$r:00000631 _rdata$r        ends
.rdata$r:00000631
.rdata$r:00000634 ; ===========================================================================
.rdata$r:00000634
.rdata$r:00000634 ; Segment type: Pure data
.rdata$r:00000634 ; Segment permissions: Read
.rdata$r:00000634 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000634                 assume cs:_rdata$r
.rdata$r:00000634                 ;org 634h
.rdata$r:00000634 ; COMDAT (pick any)
.rdata$r:00000634                 public ??_R1A@?0A@EA@ICompressSetInStream@@8
.rdata$r:00000634 ; ICompressSetInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000634 ??_R1A@?0A@EA@ICompressSetInStream@@8 dd offset ??_R0?AUICompressSetInStream@@@8
.rdata$r:00000634                                         ; DATA XREF: .rdata$r:ICompressSetInStream::`RTTI Base Class Array'o
.rdata$r:00000634                                         ; ICompressSetInStream `RTTI Type Descriptor'
.rdata$r:00000638                 db    1
.rdata$r:00000639                 db    0
.rdata$r:0000063A                 db    0
.rdata$r:0000063B                 db    0
.rdata$r:0000063C                 db    0
.rdata$r:0000063D                 db    0
.rdata$r:0000063E                 db    0
.rdata$r:0000063F                 db    0
.rdata$r:00000640                 db 0FFh
.rdata$r:00000641                 db 0FFh
.rdata$r:00000642                 db 0FFh
.rdata$r:00000643                 db 0FFh
.rdata$r:00000644                 db    0
.rdata$r:00000645                 db    0
.rdata$r:00000646                 db    0
.rdata$r:00000647                 db    0
.rdata$r:00000648                 db  40h ; @
.rdata$r:00000649                 db    0
.rdata$r:0000064A                 db    0
.rdata$r:0000064B                 db    0
.rdata$r:0000064C                 dd offset ??_R3ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000064C _rdata$r        ends
.rdata$r:0000064C
.rdata$r:00000650 ; ===========================================================================
.rdata$r:00000650
.rdata$r:00000650 ; Segment type: Pure data
.rdata$r:00000650 ; Segment permissions: Read
.rdata$r:00000650 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000650                 assume cs:_rdata$r
.rdata$r:00000650                 ;org 650h
.rdata$r:00000650 ; COMDAT (pick any)
.rdata$r:00000650                 public ??_R17?0A@EC@IUnknown@@8
.rdata$r:00000650 ; IUnknown::`RTTI Base Class Descriptor at (8, -1, 0, 66)'
.rdata$r:00000650 ??_R17?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00000650                                         ; DATA XREF: .rdata$r:00000440o
.rdata$r:00000650                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00000654                 align 8
.rdata$r:00000658                 db    8
.rdata$r:00000659                 db    0
.rdata$r:0000065A                 db    0
.rdata$r:0000065B                 db    0
.rdata$r:0000065C                 db 0FFh
.rdata$r:0000065D                 db 0FFh
.rdata$r:0000065E                 db 0FFh
.rdata$r:0000065F                 db 0FFh
.rdata$r:00000660                 db    0
.rdata$r:00000661                 db    0
.rdata$r:00000662                 db    0
.rdata$r:00000663                 db    0
.rdata$r:00000664                 db  42h ; B
.rdata$r:00000665                 db    0
.rdata$r:00000666                 db    0
.rdata$r:00000667                 db    0
.rdata$r:00000668                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000668 _rdata$r        ends
.rdata$r:00000668
.rdata$r:0000066C ; ===========================================================================
.rdata$r:0000066C
.rdata$r:0000066C ; Segment type: Pure data
.rdata$r:0000066C ; Segment permissions: Read
.rdata$r:0000066C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000066C                 assume cs:_rdata$r
.rdata$r:0000066C                 ;org 66Ch
.rdata$r:0000066C ; COMDAT (pick any)
.rdata$r:0000066C                 public ??_R1M@?0A@EA@ICompressSetOutStreamSize@@8
.rdata$r:0000066C ; ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (12, -1, 0, 64)'
.rdata$r:0000066C ??_R1M@?0A@EA@ICompressSetOutStreamSize@@8 dd offset ??_R0?AUICompressSetOutStreamSize@@@8
.rdata$r:0000066C                                         ; DATA XREF: .rdata$r:00000444o
.rdata$r:0000066C                                         ; ICompressSetOutStreamSize `RTTI Type Descriptor'
.rdata$r:00000670                 db    1
.rdata$r:00000671                 db    0
.rdata$r:00000672                 db    0
.rdata$r:00000673                 db    0
.rdata$r:00000674                 db  0Ch
.rdata$r:00000675                 db    0
.rdata$r:00000676                 db    0
.rdata$r:00000677                 db    0
.rdata$r:00000678                 db 0FFh
.rdata$r:00000679                 db 0FFh
.rdata$r:0000067A                 db 0FFh
.rdata$r:0000067B                 db 0FFh
.rdata$r:0000067C                 db    0
.rdata$r:0000067D                 db    0
.rdata$r:0000067E                 db    0
.rdata$r:0000067F                 db    0
.rdata$r:00000680                 db  40h ; @
.rdata$r:00000681                 db    0
.rdata$r:00000682                 db    0
.rdata$r:00000683                 db    0
.rdata$r:00000684                 dd offset ??_R3ICompressSetOutStreamSize@@8 ; ICompressSetOutStreamSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000684 _rdata$r        ends
.rdata$r:00000684
.data:00000688 ; ===========================================================================
.data:00000688
.data:00000688 ; Segment type: Pure data
.data:00000688 ; Segment permissions: Read/Write
.data:00000688 _data           segment dword public 'DATA' use32
.data:00000688                 assume cs:_data
.data:00000688                 ;org 688h
.data:00000688 ; COMDAT (pick any)
.data:00000688                 public ??_R0?AUICompressSetOutStreamSize@@@8
.data:00000688 ; struct ICompressSetOutStreamSize `RTTI Type Descriptor'
.data:00000688 ??_R0?AUICompressSetOutStreamSize@@@8 dd offset ??_7type_info@@6B@
.data:00000688                                         ; DATA XREF: .rdata$r:ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (12,-1,0,64)'o
.data:00000688                                         ; .rdata$r:ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00000688                                         ; const type_info::`vftable'
.data:0000068C                 align 10h
.data:00000690 a_?auicompresss db '.?AUICompressSetOutStreamSize@@',0
.data:00000690 _data           ends
.data:00000690
.rdata$r:000006B0 ; ===========================================================================
.rdata$r:000006B0
.rdata$r:000006B0 ; Segment type: Pure data
.rdata$r:000006B0 ; Segment permissions: Read
.rdata$r:000006B0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000006B0                 assume cs:_rdata$r
.rdata$r:000006B0                 ;org 6B0h
.rdata$r:000006B0 ; COMDAT (pick any)
.rdata$r:000006B0                 public ??_R3ICompressSetOutStreamSize@@8
.rdata$r:000006B0 ; ICompressSetOutStreamSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:000006B0 ??_R3ICompressSetOutStreamSize@@8 db    0 ; DATA XREF: .rdata$r:00000684o
.rdata$r:000006B0                                         ; .rdata$r:000006E4o ...
.rdata$r:000006B1                 db    0
.rdata$r:000006B2                 db    0
.rdata$r:000006B3                 db    0
.rdata$r:000006B4                 db    0
.rdata$r:000006B5                 db    0
.rdata$r:000006B6                 db    0
.rdata$r:000006B7                 db    0
.rdata$r:000006B8                 db    2
.rdata$r:000006B9                 db    0
.rdata$r:000006BA                 db    0
.rdata$r:000006BB                 db    0
.rdata$r:000006BC                 dd offset ??_R2ICompressSetOutStreamSize@@8 ; ICompressSetOutStreamSize::`RTTI Base Class Array'
.rdata$r:000006BC _rdata$r        ends
.rdata$r:000006BC
.rdata$r:000006C0 ; ===========================================================================
.rdata$r:000006C0
.rdata$r:000006C0 ; Segment type: Pure data
.rdata$r:000006C0 ; Segment permissions: Read
.rdata$r:000006C0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000006C0                 assume cs:_rdata$r
.rdata$r:000006C0                 ;org 6C0h
.rdata$r:000006C0 ; COMDAT (pick any)
.rdata$r:000006C0                 public ??_R2ICompressSetOutStreamSize@@8
.rdata$r:000006C0 ; ICompressSetOutStreamSize::`RTTI Base Class Array'
.rdata$r:000006C0 ??_R2ICompressSetOutStreamSize@@8 dd offset ??_R1A@?0A@EA@ICompressSetOutStreamSize@@8
.rdata$r:000006C0                                         ; DATA XREF: .rdata$r:000006BCo
.rdata$r:000006C0                                         ; ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000006C4                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000006C8                 db    0
.rdata$r:000006C9                 align 4
.rdata$r:000006C9 _rdata$r        ends
.rdata$r:000006C9
.rdata$r:000006CC ; ===========================================================================
.rdata$r:000006CC
.rdata$r:000006CC ; Segment type: Pure data
.rdata$r:000006CC ; Segment permissions: Read
.rdata$r:000006CC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000006CC                 assume cs:_rdata$r
.rdata$r:000006CC                 ;org 6CCh
.rdata$r:000006CC ; COMDAT (pick any)
.rdata$r:000006CC                 public ??_R1A@?0A@EA@ICompressSetOutStreamSize@@8
.rdata$r:000006CC ; ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000006CC ??_R1A@?0A@EA@ICompressSetOutStreamSize@@8 dd offset ??_R0?AUICompressSetOutStreamSize@@@8
.rdata$r:000006CC                                         ; DATA XREF: .rdata$r:ICompressSetOutStreamSize::`RTTI Base Class Array'o
.rdata$r:000006CC                                         ; ICompressSetOutStreamSize `RTTI Type Descriptor'
.rdata$r:000006D0                 db    1
.rdata$r:000006D1                 db    0
.rdata$r:000006D2                 db    0
.rdata$r:000006D3                 db    0
.rdata$r:000006D4                 db    0
.rdata$r:000006D5                 db    0
.rdata$r:000006D6                 db    0
.rdata$r:000006D7                 db    0
.rdata$r:000006D8                 db 0FFh
.rdata$r:000006D9                 db 0FFh
.rdata$r:000006DA                 db 0FFh
.rdata$r:000006DB                 db 0FFh
.rdata$r:000006DC                 db    0
.rdata$r:000006DD                 db    0
.rdata$r:000006DE                 db    0
.rdata$r:000006DF                 db    0
.rdata$r:000006E0                 db  40h ; @
.rdata$r:000006E1                 db    0
.rdata$r:000006E2                 db    0
.rdata$r:000006E3                 db    0
.rdata$r:000006E4                 dd offset ??_R3ICompressSetOutStreamSize@@8 ; ICompressSetOutStreamSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:000006E4 _rdata$r        ends
.rdata$r:000006E4
.rdata$r:000006E8 ; ===========================================================================
.rdata$r:000006E8
.rdata$r:000006E8 ; Segment type: Pure data
.rdata$r:000006E8 ; Segment permissions: Read
.rdata$r:000006E8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000006E8                 assume cs:_rdata$r
.rdata$r:000006E8                 ;org 6E8h
.rdata$r:000006E8 ; COMDAT (pick any)
.rdata$r:000006E8                 public ??_R1M@?0A@EC@IUnknown@@8
.rdata$r:000006E8 ; IUnknown::`RTTI Base Class Descriptor at (12, -1, 0, 66)'
.rdata$r:000006E8 ??_R1M@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000006E8                                         ; DATA XREF: .rdata$r:00000448o
.rdata$r:000006E8                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:000006EC                 align 10h
.rdata$r:000006F0                 db  0Ch
.rdata$r:000006F1                 db    0
.rdata$r:000006F2                 db    0
.rdata$r:000006F3                 db    0
.rdata$r:000006F4                 db 0FFh
.rdata$r:000006F5                 db 0FFh
.rdata$r:000006F6                 db 0FFh
.rdata$r:000006F7                 db 0FFh
.rdata$r:000006F8                 db    0
.rdata$r:000006F9                 db    0
.rdata$r:000006FA                 db    0
.rdata$r:000006FB                 db    0
.rdata$r:000006FC                 db  42h ; B
.rdata$r:000006FD                 db    0
.rdata$r:000006FE                 db    0
.rdata$r:000006FF                 db    0
.rdata$r:00000700                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000700 _rdata$r        ends
.rdata$r:00000700
.rdata$r:00000704 ; ===========================================================================
.rdata$r:00000704
.rdata$r:00000704 ; Segment type: Pure data
.rdata$r:00000704 ; Segment permissions: Read
.rdata$r:00000704 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000704                 assume cs:_rdata$r
.rdata$r:00000704                 ;org 704h
.rdata$r:00000704 ; COMDAT (pick any)
.rdata$r:00000704                 public ??_R1BA@?0A@EA@ISequentialInStream@@8
.rdata$r:00000704 ; ISequentialInStream::`RTTI Base Class Descriptor at (16, -1, 0, 64)'
.rdata$r:00000704 ??_R1BA@?0A@EA@ISequentialInStream@@8 dd offset ??_R0?AUISequentialInStream@@@8
.rdata$r:00000704                                         ; DATA XREF: .rdata$r:0000044Co
.rdata$r:00000704                                         ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:00000708                 db    1
.rdata$r:00000709                 db    0
.rdata$r:0000070A                 db    0
.rdata$r:0000070B                 db    0
.rdata$r:0000070C                 db  10h
.rdata$r:0000070D                 db    0
.rdata$r:0000070E                 db    0
.rdata$r:0000070F                 db    0
.rdata$r:00000710                 db 0FFh
.rdata$r:00000711                 db 0FFh
.rdata$r:00000712                 db 0FFh
.rdata$r:00000713                 db 0FFh
.rdata$r:00000714                 db    0
.rdata$r:00000715                 db    0
.rdata$r:00000716                 db    0
.rdata$r:00000717                 db    0
.rdata$r:00000718                 db  40h ; @
.rdata$r:00000719                 db    0
.rdata$r:0000071A                 db    0
.rdata$r:0000071B                 db    0
.rdata$r:0000071C                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000071C _rdata$r        ends
.rdata$r:0000071C
.data:00000720 ; ===========================================================================
.data:00000720
.data:00000720 ; Segment type: Pure data
.data:00000720 ; Segment permissions: Read/Write
.data:00000720 _data           segment dword public 'DATA' use32
.data:00000720                 assume cs:_data
.data:00000720                 ;org 720h
.data:00000720 ; COMDAT (pick any)
.data:00000720                 public ??_R0?AUISequentialInStream@@@8
.data:00000720 ; struct ISequentialInStream `RTTI Type Descriptor'
.data:00000720 ??_R0?AUISequentialInStream@@@8 dd offset ??_7type_info@@6B@
.data:00000720                                         ; DATA XREF: .rdata$r:ISequentialInStream::`RTTI Base Class Descriptor at (16,-1,0,64)'o
.data:00000720                                         ; .rdata$r:ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00000720                                         ; const type_info::`vftable'
.data:00000724                 align 8
.data:00000728 a_?auisequentia db '.?AUISequentialInStream@@',0
.data:00000742                 align 4
.data:00000742 _data           ends
.data:00000742
.rdata$r:00000744 ; ===========================================================================
.rdata$r:00000744
.rdata$r:00000744 ; Segment type: Pure data
.rdata$r:00000744 ; Segment permissions: Read
.rdata$r:00000744 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000744                 assume cs:_rdata$r
.rdata$r:00000744                 ;org 744h
.rdata$r:00000744 ; COMDAT (pick any)
.rdata$r:00000744                 public ??_R3ISequentialInStream@@8
.rdata$r:00000744 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000744 ??_R3ISequentialInStream@@8 db    0     ; DATA XREF: .rdata$r:0000071Co
.rdata$r:00000744                                         ; .rdata$r:00000778o ...
.rdata$r:00000745                 db    0
.rdata$r:00000746                 db    0
.rdata$r:00000747                 db    0
.rdata$r:00000748                 db    0
.rdata$r:00000749                 db    0
.rdata$r:0000074A                 db    0
.rdata$r:0000074B                 db    0
.rdata$r:0000074C                 db    2
.rdata$r:0000074D                 db    0
.rdata$r:0000074E                 db    0
.rdata$r:0000074F                 db    0
.rdata$r:00000750                 dd offset ??_R2ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Array'
.rdata$r:00000750 _rdata$r        ends
.rdata$r:00000750
.rdata$r:00000754 ; ===========================================================================
.rdata$r:00000754
.rdata$r:00000754 ; Segment type: Pure data
.rdata$r:00000754 ; Segment permissions: Read
.rdata$r:00000754 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000754                 assume cs:_rdata$r
.rdata$r:00000754                 ;org 754h
.rdata$r:00000754 ; COMDAT (pick any)
.rdata$r:00000754                 public ??_R2ISequentialInStream@@8
.rdata$r:00000754 ; ISequentialInStream::`RTTI Base Class Array'
.rdata$r:00000754 ??_R2ISequentialInStream@@8 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8
.rdata$r:00000754                                         ; DATA XREF: .rdata$r:00000750o
.rdata$r:00000754                                         ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000758                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000075C                 db    0
.rdata$r:0000075D                 align 10h
.rdata$r:0000075D _rdata$r        ends
.rdata$r:0000075D
.rdata$r:00000760 ; ===========================================================================
.rdata$r:00000760
.rdata$r:00000760 ; Segment type: Pure data
.rdata$r:00000760 ; Segment permissions: Read
.rdata$r:00000760 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000760                 assume cs:_rdata$r
.rdata$r:00000760                 ;org 760h
.rdata$r:00000760 ; COMDAT (pick any)
.rdata$r:00000760                 public ??_R1A@?0A@EA@ISequentialInStream@@8
.rdata$r:00000760 ; ISequentialInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000760 ??_R1A@?0A@EA@ISequentialInStream@@8 dd offset ??_R0?AUISequentialInStream@@@8
.rdata$r:00000760                                         ; DATA XREF: .rdata$r:ISequentialInStream::`RTTI Base Class Array'o
.rdata$r:00000760                                         ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:00000764                 db    1
.rdata$r:00000765                 db    0
.rdata$r:00000766                 db    0
.rdata$r:00000767                 db    0
.rdata$r:00000768                 db    0
.rdata$r:00000769                 db    0
.rdata$r:0000076A                 db    0
.rdata$r:0000076B                 db    0
.rdata$r:0000076C                 db 0FFh
.rdata$r:0000076D                 db 0FFh
.rdata$r:0000076E                 db 0FFh
.rdata$r:0000076F                 db 0FFh
.rdata$r:00000770                 db    0
.rdata$r:00000771                 db    0
.rdata$r:00000772                 db    0
.rdata$r:00000773                 db    0
.rdata$r:00000774                 db  40h ; @
.rdata$r:00000775                 db    0
.rdata$r:00000776                 db    0
.rdata$r:00000777                 db    0
.rdata$r:00000778                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000778 _rdata$r        ends
.rdata$r:00000778
.rdata$r:0000077C ; ===========================================================================
.rdata$r:0000077C
.rdata$r:0000077C ; Segment type: Pure data
.rdata$r:0000077C ; Segment permissions: Read
.rdata$r:0000077C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000077C                 assume cs:_rdata$r
.rdata$r:0000077C                 ;org 77Ch
.rdata$r:0000077C ; COMDAT (pick any)
.rdata$r:0000077C                 public ??_R1BA@?0A@EC@IUnknown@@8
.rdata$r:0000077C ; IUnknown::`RTTI Base Class Descriptor at (16, -1, 0, 66)'
.rdata$r:0000077C ??_R1BA@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:0000077C                                         ; DATA XREF: .rdata$r:00000450o
.rdata$r:0000077C                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00000780                 db    0
.rdata$r:00000781                 db    0
.rdata$r:00000782                 db    0
.rdata$r:00000783                 db    0
.rdata$r:00000784                 db  10h
.rdata$r:00000785                 db    0
.rdata$r:00000786                 db    0
.rdata$r:00000787                 db    0
.rdata$r:00000788                 db 0FFh
.rdata$r:00000789                 db 0FFh
.rdata$r:0000078A                 db 0FFh
.rdata$r:0000078B                 db 0FFh
.rdata$r:0000078C                 db    0
.rdata$r:0000078D                 db    0
.rdata$r:0000078E                 db    0
.rdata$r:0000078F                 db    0
.rdata$r:00000790                 db  42h ; B
.rdata$r:00000791                 db    0
.rdata$r:00000792                 db    0
.rdata$r:00000793                 db    0
.rdata$r:00000794                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000794 _rdata$r        ends
.rdata$r:00000794
.rdata$r:00000798 ; ===========================================================================
.rdata$r:00000798
.rdata$r:00000798 ; Segment type: Pure data
.rdata$r:00000798 ; Segment permissions: Read
.rdata$r:00000798 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000798                 assume cs:_rdata$r
.rdata$r:00000798                 ;org 798h
.rdata$r:00000798 ; COMDAT (pick any)
.rdata$r:00000798                 public ??_R1BE@?0A@EA@CMyUnknownImp@@8
.rdata$r:00000798 ; CMyUnknownImp::`RTTI Base Class Descriptor at (20, -1, 0, 64)'
.rdata$r:00000798 ??_R1BE@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00000798                                         ; DATA XREF: .rdata$r:00000454o
.rdata$r:00000798                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:0000079C                 align 10h
.rdata$r:000007A0                 db  14h
.rdata$r:000007A1                 db    0
.rdata$r:000007A2                 db    0
.rdata$r:000007A3                 db    0
.rdata$r:000007A4                 db 0FFh
.rdata$r:000007A5                 db 0FFh
.rdata$r:000007A6                 db 0FFh
.rdata$r:000007A7                 db 0FFh
.rdata$r:000007A8                 db    0
.rdata$r:000007A9                 db    0
.rdata$r:000007AA                 db    0
.rdata$r:000007AB                 db    0
.rdata$r:000007AC                 db  40h ; @
.rdata$r:000007AD                 db    0
.rdata$r:000007AE                 db    0
.rdata$r:000007AF                 db    0
.rdata$r:000007B0                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000007B0 _rdata$r        ends
.rdata$r:000007B0
.data:000007B4 ; ===========================================================================
.data:000007B4
.data:000007B4 ; Segment type: Pure data
.data:000007B4 ; Segment permissions: Read/Write
.data:000007B4 _data           segment dword public 'DATA' use32
.data:000007B4                 assume cs:_data
.data:000007B4                 ;org 7B4h
.data:000007B4 ; COMDAT (pick any)
.data:000007B4                 public ??_R0?AVCMyUnknownImp@@@8
.data:000007B4 ; class CMyUnknownImp `RTTI Type Descriptor'
.data:000007B4 ??_R0?AVCMyUnknownImp@@@8 dd offset ??_7type_info@@6B@
.data:000007B4                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (20,-1,0,64)'o
.data:000007B4                                         ; .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000007B4                                         ; const type_info::`vftable'
.data:000007B8                 db    0
.data:000007B9                 db    0
.data:000007BA                 db    0
.data:000007BB                 db    0
.data:000007BC                 db  2Eh ; .
.data:000007BD                 db  3Fh ; ?
.data:000007BE                 db  41h ; A
.data:000007BF                 db  56h ; V
.data:000007C0                 db  43h ; C
.data:000007C1                 db  4Dh ; M
.data:000007C2                 db  79h ; y
.data:000007C3                 db  55h ; U
.data:000007C4                 db  6Eh ; n
.data:000007C5                 db  6Bh ; k
.data:000007C6                 db  6Eh ; n
.data:000007C7                 db  6Fh ; o
.data:000007C8                 db  77h ; w
.data:000007C9                 db  6Eh ; n
.data:000007CA                 db  49h ; I
.data:000007CB                 db  6Dh ; m
.data:000007CC                 db  70h ; p
.data:000007CD                 db  40h ; @
.data:000007CE                 db  40h ; @
.data:000007CF                 db    0
.data:000007CF _data           ends
.data:000007CF
.rdata$r:000007D0 ; ===========================================================================
.rdata$r:000007D0
.rdata$r:000007D0 ; Segment type: Pure data
.rdata$r:000007D0 ; Segment permissions: Read
.rdata$r:000007D0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000007D0                 assume cs:_rdata$r
.rdata$r:000007D0                 ;org 7D0h
.rdata$r:000007D0 ; COMDAT (pick any)
.rdata$r:000007D0                 public ??_R3CMyUnknownImp@@8
.rdata$r:000007D0 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000007D0 ??_R3CMyUnknownImp@@8 db    0           ; DATA XREF: .rdata$r:000007B0o
.rdata$r:000007D0                                         ; .rdata$r:00000800o
.rdata$r:000007D1                 db    0
.rdata$r:000007D2                 db    0
.rdata$r:000007D3                 db    0
.rdata$r:000007D4                 db    0
.rdata$r:000007D5                 db    0
.rdata$r:000007D6                 db    0
.rdata$r:000007D7                 db    0
.rdata$r:000007D8                 db    1
.rdata$r:000007D9                 db    0
.rdata$r:000007DA                 db    0
.rdata$r:000007DB                 db    0
.rdata$r:000007DC                 dd offset ??_R2CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:000007DC _rdata$r        ends
.rdata$r:000007DC
.rdata$r:000007E0 ; ===========================================================================
.rdata$r:000007E0
.rdata$r:000007E0 ; Segment type: Pure data
.rdata$r:000007E0 ; Segment permissions: Read
.rdata$r:000007E0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000007E0                 assume cs:_rdata$r
.rdata$r:000007E0                 ;org 7E0h
.rdata$r:000007E0 ; COMDAT (pick any)
.rdata$r:000007E0                 public ??_R2CMyUnknownImp@@8
.rdata$r:000007E0 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:000007E0 ??_R2CMyUnknownImp@@8 dd offset ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:000007E0                                         ; DATA XREF: .rdata$r:000007DCo
.rdata$r:000007E0                                         ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000007E4                 db    0
.rdata$r:000007E5                 align 4
.rdata$r:000007E5 _rdata$r        ends
.rdata$r:000007E5
.rdata$r:000007E8 ; ===========================================================================
.rdata$r:000007E8
.rdata$r:000007E8 ; Segment type: Pure data
.rdata$r:000007E8 ; Segment permissions: Read
.rdata$r:000007E8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000007E8                 assume cs:_rdata$r
.rdata$r:000007E8                 ;org 7E8h
.rdata$r:000007E8 ; COMDAT (pick any)
.rdata$r:000007E8                 public ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:000007E8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000007E8 ??_R1A@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:000007E8                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Array'o
.rdata$r:000007E8                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:000007EC                 db    0
.rdata$r:000007ED                 db    0
.rdata$r:000007EE                 db    0
.rdata$r:000007EF                 db    0
.rdata$r:000007F0                 db    0
.rdata$r:000007F1                 db    0
.rdata$r:000007F2                 db    0
.rdata$r:000007F3                 db    0
.rdata$r:000007F4                 db 0FFh
.rdata$r:000007F5                 db 0FFh
.rdata$r:000007F6                 db 0FFh
.rdata$r:000007F7                 db 0FFh
.rdata$r:000007F8                 db    0
.rdata$r:000007F9                 db    0
.rdata$r:000007FA                 db    0
.rdata$r:000007FB                 db    0
.rdata$r:000007FC                 db  40h ; @
.rdata$r:000007FD                 db    0
.rdata$r:000007FE                 db    0
.rdata$r:000007FF                 db    0
.rdata$r:00000800                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000800 _rdata$r        ends
.rdata$r:00000800
.rdata$r:00000804 ; ===========================================================================
.rdata$r:00000804
.rdata$r:00000804 ; Segment type: Pure data
.rdata$r:00000804 ; Segment permissions: Read
.rdata$r:00000804 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000804                 assume cs:_rdata$r
.rdata$r:00000804                 ;org 804h
.rdata$r:00000804 ; COMDAT (pick any)
.rdata$r:00000804                 public ??_R4CDecoder@NPpmd@NCompress@@6BICompressSetDecoderProperties2@@@
.rdata$r:00000804 ; const NCompress::NPpmd::CDecoder::`RTTI Complete Object Locator'{for `ICompressSetDecoderProperties2'}
.rdata$r:00000804 ??_R4CDecoder@NPpmd@NCompress@@6BICompressSetDecoderProperties2@@@ db    0
.rdata$r:00000804                                         ; DATA XREF: .rdata:00000388o
.rdata$r:00000805                 db    0
.rdata$r:00000806                 db    0
.rdata$r:00000807                 db    0
.rdata$r:00000808                 db    4
.rdata$r:00000809                 db    0
.rdata$r:0000080A                 db    0
.rdata$r:0000080B                 db    0
.rdata$r:0000080C                 db    0
.rdata$r:0000080D                 db    0
.rdata$r:0000080E                 db    0
.rdata$r:0000080F                 db    0
.rdata$r:00000810                 dd offset ??_R0?AVCDecoder@NPpmd@NCompress@@@8 ; NCompress::NPpmd::CDecoder `RTTI Type Descriptor'
.rdata$r:00000814                 dd offset ??_R3CDecoder@NPpmd@NCompress@@8 ; NCompress::NPpmd::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000814 _rdata$r        ends
.rdata$r:00000814
.rdata$r:00000818 ; ===========================================================================
.rdata$r:00000818
.rdata$r:00000818 ; Segment type: Pure data
.rdata$r:00000818 ; Segment permissions: Read
.rdata$r:00000818 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000818                 assume cs:_rdata$r
.rdata$r:00000818                 ;org 818h
.rdata$r:00000818 ; COMDAT (pick any)
.rdata$r:00000818                 public ??_R4CDecoder@NPpmd@NCompress@@6BICompressSetInStream@@@
.rdata$r:00000818 ; const NCompress::NPpmd::CDecoder::`RTTI Complete Object Locator'{for `ICompressSetInStream'}
.rdata$r:00000818 ??_R4CDecoder@NPpmd@NCompress@@6BICompressSetInStream@@@ db    0
.rdata$r:00000818                                         ; DATA XREF: .rdata:00000370o
.rdata$r:00000819                 db    0
.rdata$r:0000081A                 db    0
.rdata$r:0000081B                 db    0
.rdata$r:0000081C                 db    8
.rdata$r:0000081D                 db    0
.rdata$r:0000081E                 db    0
.rdata$r:0000081F                 db    0
.rdata$r:00000820                 db    0
.rdata$r:00000821                 db    0
.rdata$r:00000822                 db    0
.rdata$r:00000823                 db    0
.rdata$r:00000824                 dd offset ??_R0?AVCDecoder@NPpmd@NCompress@@@8 ; NCompress::NPpmd::CDecoder `RTTI Type Descriptor'
.rdata$r:00000828                 dd offset ??_R3CDecoder@NPpmd@NCompress@@8 ; NCompress::NPpmd::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000828 _rdata$r        ends
.rdata$r:00000828
.rdata$r:0000082C ; ===========================================================================
.rdata$r:0000082C
.rdata$r:0000082C ; Segment type: Pure data
.rdata$r:0000082C ; Segment permissions: Read
.rdata$r:0000082C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000082C                 assume cs:_rdata$r
.rdata$r:0000082C                 ;org 82Ch
.rdata$r:0000082C ; COMDAT (pick any)
.rdata$r:0000082C                 public ??_R4CDecoder@NPpmd@NCompress@@6BICompressSetOutStreamSize@@@
.rdata$r:0000082C ; const NCompress::NPpmd::CDecoder::`RTTI Complete Object Locator'{for `ICompressSetOutStreamSize'}
.rdata$r:0000082C ??_R4CDecoder@NPpmd@NCompress@@6BICompressSetOutStreamSize@@@ db    0
.rdata$r:0000082C                                         ; DATA XREF: .rdata:0000035Co
.rdata$r:0000082D                 db    0
.rdata$r:0000082E                 db    0
.rdata$r:0000082F                 db    0
.rdata$r:00000830                 db  0Ch
.rdata$r:00000831                 db    0
.rdata$r:00000832                 db    0
.rdata$r:00000833                 db    0
.rdata$r:00000834                 db    0
.rdata$r:00000835                 db    0
.rdata$r:00000836                 db    0
.rdata$r:00000837                 db    0
.rdata$r:00000838                 dd offset ??_R0?AVCDecoder@NPpmd@NCompress@@@8 ; NCompress::NPpmd::CDecoder `RTTI Type Descriptor'
.rdata$r:0000083C                 dd offset ??_R3CDecoder@NPpmd@NCompress@@8 ; NCompress::NPpmd::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000083C _rdata$r        ends
.rdata$r:0000083C
.rdata$r:00000840 ; ===========================================================================
.rdata$r:00000840
.rdata$r:00000840 ; Segment type: Pure data
.rdata$r:00000840 ; Segment permissions: Read
.rdata$r:00000840 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000840                 assume cs:_rdata$r
.rdata$r:00000840                 ;org 840h
.rdata$r:00000840 ; COMDAT (pick any)
.rdata$r:00000840                 public ??_R4CDecoder@NPpmd@NCompress@@6BISequentialInStream@@@
.rdata$r:00000840 ; const NCompress::NPpmd::CDecoder::`RTTI Complete Object Locator'{for `ISequentialInStream'}
.rdata$r:00000840 ??_R4CDecoder@NPpmd@NCompress@@6BISequentialInStream@@@ db    0
.rdata$r:00000840                                         ; DATA XREF: .rdata:00000348o
.rdata$r:00000841                 db    0
.rdata$r:00000842                 db    0
.rdata$r:00000843                 db    0
.rdata$r:00000844                 db  10h
.rdata$r:00000845                 db    0
.rdata$r:00000846                 db    0
.rdata$r:00000847                 db    0
.rdata$r:00000848                 db    0
.rdata$r:00000849                 db    0
.rdata$r:0000084A                 db    0
.rdata$r:0000084B                 db    0
.rdata$r:0000084C                 dd offset ??_R0?AVCDecoder@NPpmd@NCompress@@@8 ; NCompress::NPpmd::CDecoder `RTTI Type Descriptor'
.rdata$r:00000850                 dd offset ??_R3CDecoder@NPpmd@NCompress@@8 ; NCompress::NPpmd::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000850 _rdata$r        ends
.rdata$r:00000850
.text:00000854 ; ===========================================================================
.text:00000854
.text:00000854 ; Segment type: Pure code
.text:00000854 ; Segment permissions: Read/Execute
.text:00000854 _text           segment para public 'CODE' use32
.text:00000854                 assume cs:_text
.text:00000854                 ;org 854h
.text:00000854 ; COMDAT (pick any)
.text:00000854                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000854
.text:00000854 ; =============== S U B R O U T I N E =======================================
.text:00000854
.text:00000854 ; Attributes: bp-based frame
.text:00000854
.text:00000854 ; _DWORD __thiscall CMyUnknownImp::CMyUnknownImp(CMyUnknownImp *__hidden this)
.text:00000854                 public ??0CMyUnknownImp@@QAE@XZ
.text:00000854 ??0CMyUnknownImp@@QAE@XZ proc near      ; CODE XREF: NCompress::NPpmd::CDecoder::CDecoder(void)+67p
.text:00000854
.text:00000854 var_4           = dword ptr -4
.text:00000854
.text:00000854                 push    ebp
.text:00000855                 mov     ebp, esp
.text:00000857                 push    ecx
.text:00000858                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000085F                 mov     [ebp+var_4], ecx
.text:00000862                 mov     eax, [ebp+var_4]
.text:00000865                 mov     dword ptr [eax], 0
.text:0000086B                 mov     eax, [ebp+var_4]
.text:0000086E                 mov     esp, ebp
.text:00000870                 pop     ebp
.text:00000871                 retn
.text:00000871 ??0CMyUnknownImp@@QAE@XZ endp
.text:00000871
.text:00000871 ; ---------------------------------------------------------------------------
.text:00000872                 align 4
.text:00000872 _text           ends
.text:00000872
.text:00000874 ; ===========================================================================
.text:00000874
.text:00000874 ; Segment type: Pure code
.text:00000874 ; Segment permissions: Read/Execute
.text:00000874 _text           segment para public 'CODE' use32
.text:00000874                 assume cs:_text
.text:00000874                 ;org 874h
.text:00000874 ; COMDAT (pick any)
.text:00000874                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000874
.text:00000874 ; =============== S U B R O U T I N E =======================================
.text:00000874
.text:00000874 ; Attributes: bp-based frame
.text:00000874
.text:00000874 ; _DWORD __thiscall CByteInBufWrap::~CByteInBufWrap(CByteInBufWrap *__hidden this)
.text:00000874                 public ??1CByteInBufWrap@@QAE@XZ
.text:00000874 ??1CByteInBufWrap@@QAE@XZ proc near     ; CODE XREF: __unwindfunclet$??0CDecoder@NPpmd@NCompress@@QAE@XZ$0+6j
.text:00000874
.text:00000874 var_4           = dword ptr -4
.text:00000874
.text:00000874                 push    ebp
.text:00000875                 mov     ebp, esp
.text:00000877                 push    ecx
.text:00000878                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000087F                 mov     [ebp+var_4], ecx
.text:00000882                 mov     ecx, [ebp+var_4] ; this
.text:00000885                 call    ?Free@CByteInBufWrap@@QAEXXZ ; CByteInBufWrap::Free(void)
.text:0000088A                 add     esp, 4
.text:0000088D                 cmp     ebp, esp
.text:0000088F                 call    __RTC_CheckEsp
.text:00000894                 mov     esp, ebp
.text:00000896                 pop     ebp
.text:00000897                 retn
.text:00000897 ??1CByteInBufWrap@@QAE@XZ endp
.text:00000897
.text:00000897 _text           ends
.text:00000897
.text:00000898 ; ===========================================================================
.text:00000898
.text:00000898 ; Segment type: Pure code
.text:00000898 ; Segment permissions: Read/Execute
.text:00000898 _text           segment para public 'CODE' use32
.text:00000898                 assume cs:_text
.text:00000898                 ;org 898h
.text:00000898 ; COMDAT (pick any)
.text:00000898                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000898
.text:00000898 ; =============== S U B R O U T I N E =======================================
.text:00000898
.text:00000898 ; Attributes: bp-based frame
.text:00000898
.text:00000898 ; __int32 __stdcall NCompress::NPpmd::CDecoder::QueryInterface(NCompress::NPpmd::CDecoder *this, const struct _GUID *Buf1, void **)
.text:00000898                 public ?QueryInterface@CDecoder@NPpmd@NCompress@@UAGJABU_GUID@@PAPAX@Z
.text:00000898 ?QueryInterface@CDecoder@NPpmd@NCompress@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00000898                                         ; CODE XREF: [thunk]:NCompress::NPpmd::CDecoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j
.text:00000898                                         ; [thunk]:NCompress::NPpmd::CDecoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)+5j ...
.text:00000898
.text:00000898 var_14          = dword ptr -14h
.text:00000898 var_10          = dword ptr -10h
.text:00000898 var_C           = dword ptr -0Ch
.text:00000898 var_8           = dword ptr -8
.text:00000898 var_4           = dword ptr -4
.text:00000898 this            = dword ptr  8
.text:00000898 Buf1            = dword ptr  0Ch
.text:00000898 arg_8           = dword ptr  10h
.text:00000898
.text:00000898                 push    ebp
.text:00000899                 mov     ebp, esp
.text:0000089B                 sub     esp, 14h
.text:0000089E                 mov     eax, 0CCCCCCCCh
.text:000008A3                 mov     [ebp+var_14], eax
.text:000008A6                 mov     [ebp+var_10], eax
.text:000008A9                 mov     [ebp+var_C], eax
.text:000008AC                 mov     [ebp+var_8], eax
.text:000008AF                 mov     [ebp+var_4], eax
.text:000008B2                 mov     eax, [ebp+arg_8]
.text:000008B5                 mov     dword ptr [eax], 0
.text:000008BB                 push    offset _IID_IUnknown ; Buf2
.text:000008C0                 mov     ecx, [ebp+Buf1]
.text:000008C3                 push    ecx             ; Buf1
.text:000008C4                 call    ___@8           ; __(x,x)
.text:000008C9                 test    eax, eax
.text:000008CB                 jz      short loc_8F2
.text:000008CD                 cmp     [ebp+this], 0
.text:000008D1                 jz      short loc_8DE
.text:000008D3                 mov     edx, [ebp+this]
.text:000008D6                 add     edx, 4
.text:000008D9                 mov     [ebp+var_4], edx
.text:000008DC                 jmp     short loc_8E5
.text:000008DE ; ---------------------------------------------------------------------------
.text:000008DE
.text:000008DE loc_8DE:                                ; CODE XREF: NCompress::NPpmd::CDecoder::QueryInterface(_GUID const &,void * *)+39j
.text:000008DE                 mov     [ebp+var_4], 0
.text:000008E5
.text:000008E5 loc_8E5:                                ; CODE XREF: NCompress::NPpmd::CDecoder::QueryInterface(_GUID const &,void * *)+44j
.text:000008E5                 mov     eax, [ebp+arg_8]
.text:000008E8                 mov     ecx, [ebp+var_4]
.text:000008EB                 mov     [eax], ecx
.text:000008ED                 jmp     loc_9CC
.text:000008F2 ; ---------------------------------------------------------------------------
.text:000008F2
.text:000008F2 loc_8F2:                                ; CODE XREF: NCompress::NPpmd::CDecoder::QueryInterface(_GUID const &,void * *)+33j
.text:000008F2                 push    offset _IID_ICompressSetDecoderProperties2 ; Buf2
.text:000008F7                 mov     edx, [ebp+Buf1]
.text:000008FA                 push    edx             ; Buf1
.text:000008FB                 call    ___@8           ; __(x,x)
.text:00000900                 test    eax, eax
.text:00000902                 jz      short loc_929
.text:00000904                 cmp     [ebp+this], 0
.text:00000908                 jz      short loc_915
.text:0000090A                 mov     eax, [ebp+this]
.text:0000090D                 add     eax, 4
.text:00000910                 mov     [ebp+var_8], eax
.text:00000913                 jmp     short loc_91C
.text:00000915 ; ---------------------------------------------------------------------------
.text:00000915
.text:00000915 loc_915:                                ; CODE XREF: NCompress::NPpmd::CDecoder::QueryInterface(_GUID const &,void * *)+70j
.text:00000915                 mov     [ebp+var_8], 0
.text:0000091C
.text:0000091C loc_91C:                                ; CODE XREF: NCompress::NPpmd::CDecoder::QueryInterface(_GUID const &,void * *)+7Bj
.text:0000091C                 mov     ecx, [ebp+arg_8]
.text:0000091F                 mov     edx, [ebp+var_8]
.text:00000922                 mov     [ecx], edx
.text:00000924                 jmp     loc_9CC
.text:00000929 ; ---------------------------------------------------------------------------
.text:00000929
.text:00000929 loc_929:                                ; CODE XREF: NCompress::NPpmd::CDecoder::QueryInterface(_GUID const &,void * *)+6Aj
.text:00000929                 push    offset _IID_ICompressSetInStream ; Buf2
.text:0000092E                 mov     eax, [ebp+Buf1]
.text:00000931                 push    eax             ; Buf1
.text:00000932                 call    ___@8           ; __(x,x)
.text:00000937                 test    eax, eax
.text:00000939                 jz      short loc_95D
.text:0000093B                 cmp     [ebp+this], 0
.text:0000093F                 jz      short loc_94C
.text:00000941                 mov     ecx, [ebp+this]
.text:00000944                 add     ecx, 8
.text:00000947                 mov     [ebp+var_C], ecx
.text:0000094A                 jmp     short loc_953
.text:0000094C ; ---------------------------------------------------------------------------
.text:0000094C
.text:0000094C loc_94C:                                ; CODE XREF: NCompress::NPpmd::CDecoder::QueryInterface(_GUID const &,void * *)+A7j
.text:0000094C                 mov     [ebp+var_C], 0
.text:00000953
.text:00000953 loc_953:                                ; CODE XREF: NCompress::NPpmd::CDecoder::QueryInterface(_GUID const &,void * *)+B2j
.text:00000953                 mov     edx, [ebp+arg_8]
.text:00000956                 mov     eax, [ebp+var_C]
.text:00000959                 mov     [edx], eax
.text:0000095B                 jmp     short loc_9CC
.text:0000095D ; ---------------------------------------------------------------------------
.text:0000095D
.text:0000095D loc_95D:                                ; CODE XREF: NCompress::NPpmd::CDecoder::QueryInterface(_GUID const &,void * *)+A1j
.text:0000095D                 push    offset _IID_ICompressSetOutStreamSize ; Buf2
.text:00000962                 mov     ecx, [ebp+Buf1]
.text:00000965                 push    ecx             ; Buf1
.text:00000966                 call    ___@8           ; __(x,x)
.text:0000096B                 test    eax, eax
.text:0000096D                 jz      short loc_991
.text:0000096F                 cmp     [ebp+this], 0
.text:00000973                 jz      short loc_980
.text:00000975                 mov     edx, [ebp+this]
.text:00000978                 add     edx, 0Ch
.text:0000097B                 mov     [ebp+var_10], edx
.text:0000097E                 jmp     short loc_987
.text:00000980 ; ---------------------------------------------------------------------------
.text:00000980
.text:00000980 loc_980:                                ; CODE XREF: NCompress::NPpmd::CDecoder::QueryInterface(_GUID const &,void * *)+DBj
.text:00000980                 mov     [ebp+var_10], 0
.text:00000987
.text:00000987 loc_987:                                ; CODE XREF: NCompress::NPpmd::CDecoder::QueryInterface(_GUID const &,void * *)+E6j
.text:00000987                 mov     eax, [ebp+arg_8]
.text:0000098A                 mov     ecx, [ebp+var_10]
.text:0000098D                 mov     [eax], ecx
.text:0000098F                 jmp     short loc_9CC
.text:00000991 ; ---------------------------------------------------------------------------
.text:00000991
.text:00000991 loc_991:                                ; CODE XREF: NCompress::NPpmd::CDecoder::QueryInterface(_GUID const &,void * *)+D5j
.text:00000991                 push    offset _IID_ISequentialInStream ; Buf2
.text:00000996                 mov     edx, [ebp+Buf1]
.text:00000999                 push    edx             ; Buf1
.text:0000099A                 call    ___@8           ; __(x,x)
.text:0000099F                 test    eax, eax
.text:000009A1                 jz      short loc_9C5
.text:000009A3                 cmp     [ebp+this], 0
.text:000009A7                 jz      short loc_9B4
.text:000009A9                 mov     eax, [ebp+this]
.text:000009AC                 add     eax, 10h
.text:000009AF                 mov     [ebp+var_14], eax
.text:000009B2                 jmp     short loc_9BB
.text:000009B4 ; ---------------------------------------------------------------------------
.text:000009B4
.text:000009B4 loc_9B4:                                ; CODE XREF: NCompress::NPpmd::CDecoder::QueryInterface(_GUID const &,void * *)+10Fj
.text:000009B4                 mov     [ebp+var_14], 0
.text:000009BB
.text:000009BB loc_9BB:                                ; CODE XREF: NCompress::NPpmd::CDecoder::QueryInterface(_GUID const &,void * *)+11Aj
.text:000009BB                 mov     ecx, [ebp+arg_8]
.text:000009BE                 mov     edx, [ebp+var_14]
.text:000009C1                 mov     [ecx], edx
.text:000009C3                 jmp     short loc_9CC
.text:000009C5 ; ---------------------------------------------------------------------------
.text:000009C5
.text:000009C5 loc_9C5:                                ; CODE XREF: NCompress::NPpmd::CDecoder::QueryInterface(_GUID const &,void * *)+109j
.text:000009C5                 mov     eax, 80004002h
.text:000009CA                 jmp     short loc_9DD
.text:000009CC ; ---------------------------------------------------------------------------
.text:000009CC
.text:000009CC loc_9CC:                                ; CODE XREF: NCompress::NPpmd::CDecoder::QueryInterface(_GUID const &,void * *)+55j
.text:000009CC                                         ; NCompress::NPpmd::CDecoder::QueryInterface(_GUID const &,void * *)+8Cj ...
.text:000009CC                 mov     eax, [ebp+this]
.text:000009CF                 mov     ecx, [eax+14h]
.text:000009D2                 add     ecx, 1
.text:000009D5                 mov     edx, [ebp+this]
.text:000009D8                 mov     [edx+14h], ecx
.text:000009DB                 xor     eax, eax
.text:000009DD
.text:000009DD loc_9DD:                                ; CODE XREF: NCompress::NPpmd::CDecoder::QueryInterface(_GUID const &,void * *)+132j
.text:000009DD                 add     esp, 14h
.text:000009E0                 cmp     ebp, esp
.text:000009E2                 call    __RTC_CheckEsp
.text:000009E7                 mov     esp, ebp
.text:000009E9                 pop     ebp
.text:000009EA                 retn    0Ch
.text:000009EA ?QueryInterface@CDecoder@NPpmd@NCompress@@UAGJABU_GUID@@PAPAX@Z endp
.text:000009EA
.text:000009EA ; ---------------------------------------------------------------------------
.text:000009ED                 align 10h
.text:000009ED _text           ends
.text:000009ED
.text:000009F0 ; ===========================================================================
.text:000009F0
.text:000009F0 ; Segment type: Pure code
.text:000009F0 ; Segment permissions: Read/Execute
.text:000009F0 _text           segment para public 'CODE' use32
.text:000009F0                 assume cs:_text
.text:000009F0                 ;org 9F0h
.text:000009F0 ; COMDAT (pick any)
.text:000009F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000009F0
.text:000009F0 ; =============== S U B R O U T I N E =======================================
.text:000009F0
.text:000009F0 ; Attributes: bp-based frame
.text:000009F0
.text:000009F0 ; unsigned __int32 __stdcall NCompress::NPpmd::CDecoder::AddRef(NCompress::NPpmd::CDecoder *this)
.text:000009F0                 public ?AddRef@CDecoder@NPpmd@NCompress@@UAGKXZ
.text:000009F0 ?AddRef@CDecoder@NPpmd@NCompress@@UAGKXZ proc near
.text:000009F0                                         ; CODE XREF: [thunk]:NCompress::NPpmd::CDecoder::AddRef`adjustor{4}' (void)+5j
.text:000009F0                                         ; [thunk]:NCompress::NPpmd::CDecoder::AddRef`adjustor{8}' (void)+5j ...
.text:000009F0
.text:000009F0 var_4           = dword ptr -4
.text:000009F0 this            = dword ptr  8
.text:000009F0
.text:000009F0                 push    ebp
.text:000009F1                 mov     ebp, esp
.text:000009F3                 push    ecx
.text:000009F4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000009FB                 mov     eax, [ebp+this]
.text:000009FE                 mov     ecx, [eax+14h]
.text:00000A01                 add     ecx, 1
.text:00000A04                 mov     [ebp+var_4], ecx
.text:00000A07                 mov     edx, [ebp+this]
.text:00000A0A                 mov     eax, [ebp+var_4]
.text:00000A0D                 mov     [edx+14h], eax
.text:00000A10                 mov     eax, [ebp+var_4]
.text:00000A13                 mov     esp, ebp
.text:00000A15                 pop     ebp
.text:00000A16                 retn    4
.text:00000A16 ?AddRef@CDecoder@NPpmd@NCompress@@UAGKXZ endp
.text:00000A16
.text:00000A16 ; ---------------------------------------------------------------------------
.text:00000A19                 align 4
.text:00000A19 _text           ends
.text:00000A19
.text:00000A1C ; ===========================================================================
.text:00000A1C
.text:00000A1C ; Segment type: Pure code
.text:00000A1C ; Segment permissions: Read/Execute
.text:00000A1C _text           segment para public 'CODE' use32
.text:00000A1C                 assume cs:_text
.text:00000A1C                 ;org 0A1Ch
.text:00000A1C ; COMDAT (pick any)
.text:00000A1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000A1C
.text:00000A1C ; =============== S U B R O U T I N E =======================================
.text:00000A1C
.text:00000A1C ; Attributes: bp-based frame
.text:00000A1C
.text:00000A1C ; int __stdcall __(void *Buf1, void *Buf2)
.text:00000A1C                 public ___@8
.text:00000A1C ___@8           proc near               ; CODE XREF: NCompress::NPpmd::CDecoder::QueryInterface(_GUID const &,void * *)+2Cp
.text:00000A1C                                         ; NCompress::NPpmd::CDecoder::QueryInterface(_GUID const &,void * *)+63p ...
.text:00000A1C
.text:00000A1C Buf1            = dword ptr  8
.text:00000A1C Buf2            = dword ptr  0Ch
.text:00000A1C
.text:00000A1C                 push    ebp
.text:00000A1D                 mov     ebp, esp
.text:00000A1F                 mov     eax, [ebp+Buf2]
.text:00000A22                 push    eax             ; Buf2
.text:00000A23                 mov     ecx, [ebp+Buf1]
.text:00000A26                 push    ecx             ; Buf1
.text:00000A27                 call    _IsEqualGUID@8  ; IsEqualGUID(x,x)
.text:00000A2C                 cmp     ebp, esp
.text:00000A2E                 call    __RTC_CheckEsp
.text:00000A33                 pop     ebp
.text:00000A34                 retn    8
.text:00000A34 ___@8           endp
.text:00000A34
.text:00000A34 ; ---------------------------------------------------------------------------
.text:00000A37                 align 4
.text:00000A37 _text           ends
.text:00000A37
.text:00000A38 ; ===========================================================================
.text:00000A38
.text:00000A38 ; Segment type: Pure code
.text:00000A38 ; Segment permissions: Read/Execute
.text:00000A38 _text           segment para public 'CODE' use32
.text:00000A38                 assume cs:_text
.text:00000A38                 ;org 0A38h
.text:00000A38 ; COMDAT (pick any)
.text:00000A38                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000A38
.text:00000A38 ; =============== S U B R O U T I N E =======================================
.text:00000A38
.text:00000A38 ; Attributes: bp-based frame
.text:00000A38
.text:00000A38 ; int __stdcall IsEqualGUID(void *Buf1, void *Buf2)
.text:00000A38                 public _IsEqualGUID@8
.text:00000A38 _IsEqualGUID@8  proc near               ; CODE XREF: __(x,x)+Bp
.text:00000A38
.text:00000A38 Buf1            = dword ptr  8
.text:00000A38 Buf2            = dword ptr  0Ch
.text:00000A38
.text:00000A38                 push    ebp
.text:00000A39                 mov     ebp, esp
.text:00000A3B                 push    10h             ; Size
.text:00000A3D                 mov     eax, [ebp+Buf2]
.text:00000A40                 push    eax             ; Buf2
.text:00000A41                 mov     ecx, [ebp+Buf1]
.text:00000A44                 push    ecx             ; Buf1
.text:00000A45                 call    _memcmp
.text:00000A4A                 add     esp, 0Ch
.text:00000A4D                 neg     eax
.text:00000A4F                 sbb     eax, eax
.text:00000A51                 add     eax, 1
.text:00000A54                 cmp     ebp, esp
.text:00000A56                 call    __RTC_CheckEsp
.text:00000A5B                 pop     ebp
.text:00000A5C                 retn    8
.text:00000A5C _IsEqualGUID@8  endp
.text:00000A5C
.text:00000A5C ; ---------------------------------------------------------------------------
.text:00000A5F                 align 10h
.text:00000A5F _text           ends
.text:00000A5F
.text:00000A60 ; ===========================================================================
.text:00000A60
.text:00000A60 ; Segment type: Pure code
.text:00000A60 ; Segment permissions: Read/Execute
.text:00000A60 _text           segment para public 'CODE' use32
.text:00000A60                 assume cs:_text
.text:00000A60                 ;org 0A60h
.text:00000A60 ; COMDAT (pick any)
.text:00000A60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000A60
.text:00000A60 ; =============== S U B R O U T I N E =======================================
.text:00000A60
.text:00000A60 ; Attributes: bp-based frame
.text:00000A60
.text:00000A60 ; unsigned __int32 __stdcall NCompress::NPpmd::CDecoder::Release(NCompress::NPpmd::CDecoder *this)
.text:00000A60                 public ?Release@CDecoder@NPpmd@NCompress@@UAGKXZ
.text:00000A60 ?Release@CDecoder@NPpmd@NCompress@@UAGKXZ proc near
.text:00000A60                                         ; CODE XREF: [thunk]:NCompress::NPpmd::CDecoder::Release`adjustor{12}' (void)+5j
.text:00000A60                                         ; [thunk]:NCompress::NPpmd::CDecoder::Release`adjustor{16}' (void)+5j ...
.text:00000A60
.text:00000A60 var_10          = dword ptr -10h
.text:00000A60 var_C           = dword ptr -0Ch
.text:00000A60 var_8           = dword ptr -8
.text:00000A60 var_4           = dword ptr -4
.text:00000A60 this            = dword ptr  8
.text:00000A60
.text:00000A60                 push    ebp
.text:00000A61                 mov     ebp, esp
.text:00000A63                 sub     esp, 10h
.text:00000A66                 mov     eax, 0CCCCCCCCh
.text:00000A6B                 mov     [ebp+var_10], eax
.text:00000A6E                 mov     [ebp+var_C], eax
.text:00000A71                 mov     [ebp+var_8], eax
.text:00000A74                 mov     [ebp+var_4], eax
.text:00000A77                 mov     eax, [ebp+this]
.text:00000A7A                 mov     ecx, [eax+14h]
.text:00000A7D                 sub     ecx, 1
.text:00000A80                 mov     [ebp+var_C], ecx
.text:00000A83                 mov     edx, [ebp+this]
.text:00000A86                 mov     eax, [ebp+var_C]
.text:00000A89                 mov     [edx+14h], eax
.text:00000A8C                 cmp     [ebp+var_C], 0
.text:00000A90                 jz      short loc_A9A
.text:00000A92                 mov     ecx, [ebp+this]
.text:00000A95                 mov     eax, [ecx+14h]
.text:00000A98                 jmp     short loc_AC4
.text:00000A9A ; ---------------------------------------------------------------------------
.text:00000A9A
.text:00000A9A loc_A9A:                                ; CODE XREF: NCompress::NPpmd::CDecoder::Release(void)+30j
.text:00000A9A                 mov     edx, [ebp+this]
.text:00000A9D                 mov     [ebp+var_8], edx
.text:00000AA0                 mov     eax, [ebp+var_8]
.text:00000AA3                 mov     [ebp+var_4], eax
.text:00000AA6                 cmp     [ebp+var_4], 0
.text:00000AAA                 jz      short loc_ABB
.text:00000AAC                 push    1
.text:00000AAE                 mov     ecx, [ebp+var_4]
.text:00000AB1                 call    ??_GCDecoder@NPpmd@NCompress@@QAEPAXI@Z ; NCompress::NPpmd::CDecoder::`scalar deleting destructor'(uint)
.text:00000AB6                 mov     [ebp+var_10], eax
.text:00000AB9                 jmp     short loc_AC2
.text:00000ABB ; ---------------------------------------------------------------------------
.text:00000ABB
.text:00000ABB loc_ABB:                                ; CODE XREF: NCompress::NPpmd::CDecoder::Release(void)+4Aj
.text:00000ABB                 mov     [ebp+var_10], 0
.text:00000AC2
.text:00000AC2 loc_AC2:                                ; CODE XREF: NCompress::NPpmd::CDecoder::Release(void)+59j
.text:00000AC2                 xor     eax, eax
.text:00000AC4
.text:00000AC4 loc_AC4:                                ; CODE XREF: NCompress::NPpmd::CDecoder::Release(void)+38j
.text:00000AC4                 add     esp, 10h
.text:00000AC7                 cmp     ebp, esp
.text:00000AC9                 call    __RTC_CheckEsp
.text:00000ACE                 mov     esp, ebp
.text:00000AD0                 pop     ebp
.text:00000AD1                 retn    4
.text:00000AD1 ?Release@CDecoder@NPpmd@NCompress@@UAGKXZ endp
.text:00000AD1
.text:00000AD1 _text           ends
.text:00000AD1
.text:00000AD4 ; ===========================================================================
.text:00000AD4
.text:00000AD4 ; Segment type: Pure code
.text:00000AD4 ; Segment permissions: Read/Execute
.text:00000AD4 _text           segment para public 'CODE' use32
.text:00000AD4                 assume cs:_text
.text:00000AD4                 ;org 0AD4h
.text:00000AD4 ; COMDAT (pick any)
.text:00000AD4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000AD4
.text:00000AD4 ; =============== S U B R O U T I N E =======================================
.text:00000AD4
.text:00000AD4 ; Attributes: bp-based frame
.text:00000AD4
.text:00000AD4 ; public: void * __thiscall NCompress::NPpmd::CDecoder::`scalar deleting destructor'(unsigned int)
.text:00000AD4                 public ??_GCDecoder@NPpmd@NCompress@@QAEPAXI@Z
.text:00000AD4 ??_GCDecoder@NPpmd@NCompress@@QAEPAXI@Z proc near
.text:00000AD4                                         ; CODE XREF: NCompress::NPpmd::CDecoder::Release(void)+51p
.text:00000AD4
.text:00000AD4 var_4           = dword ptr -4
.text:00000AD4 arg_0           = dword ptr  8
.text:00000AD4
.text:00000AD4                 push    ebp
.text:00000AD5                 mov     ebp, esp
.text:00000AD7                 push    ecx
.text:00000AD8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000ADF                 mov     [ebp+var_4], ecx
.text:00000AE2                 mov     ecx, [ebp+var_4] ; this
.text:00000AE5                 call    ??1CDecoder@NPpmd@NCompress@@QAE@XZ ; NCompress::NPpmd::CDecoder::~CDecoder(void)
.text:00000AEA                 mov     eax, [ebp+arg_0]
.text:00000AED                 and     eax, 1
.text:00000AF0                 jz      short loc_AFE
.text:00000AF2                 mov     ecx, [ebp+var_4]
.text:00000AF5                 push    ecx             ; void *
.text:00000AF6                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00000AFB                 add     esp, 4
.text:00000AFE
.text:00000AFE loc_AFE:                                ; CODE XREF: NCompress::NPpmd::CDecoder::`scalar deleting destructor'(uint)+1Cj
.text:00000AFE                 mov     eax, [ebp+var_4]
.text:00000B01                 add     esp, 4
.text:00000B04                 cmp     ebp, esp
.text:00000B06                 call    __RTC_CheckEsp
.text:00000B0B                 mov     esp, ebp
.text:00000B0D                 pop     ebp
.text:00000B0E                 retn    4
.text:00000B0E ??_GCDecoder@NPpmd@NCompress@@QAEPAXI@Z endp
.text:00000B0E
.text:00000B0E ; ---------------------------------------------------------------------------
.text:00000B11                 align 4
.text:00000B11 _text           ends
.text:00000B11
.text:00000B14 ; ===========================================================================
.text:00000B14
.text:00000B14 ; Segment type: Pure code
.text:00000B14 ; Segment permissions: Read/Execute
.text:00000B14 _text           segment para public 'CODE' use32
.text:00000B14                 assume cs:_text
.text:00000B14                 ;org 0B14h
.text:00000B14 ; COMDAT (pick any)
.text:00000B14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000B14
.text:00000B14 ; =============== S U B R O U T I N E =======================================
.text:00000B14
.text:00000B14 ; Attributes: bp-based frame
.text:00000B14
.text:00000B14 ; _DWORD __thiscall ICompressCoder::ICompressCoder(ICompressCoder *__hidden this)
.text:00000B14                 public ??0ICompressCoder@@QAE@XZ
.text:00000B14 ??0ICompressCoder@@QAE@XZ proc near     ; CODE XREF: NCompress::NPpmd::CDecoder::CDecoder(void)+30p
.text:00000B14
.text:00000B14 var_4           = dword ptr -4
.text:00000B14
.text:00000B14                 push    ebp
.text:00000B15                 mov     ebp, esp
.text:00000B17                 push    ecx
.text:00000B18                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000B1F                 mov     [ebp+var_4], ecx
.text:00000B22                 mov     ecx, [ebp+var_4]
.text:00000B25                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00000B2A                 mov     eax, [ebp+var_4]
.text:00000B2D                 mov     dword ptr [eax], offset ??_7ICompressCoder@@6B@ ; const ICompressCoder::`vftable'
.text:00000B33                 mov     eax, [ebp+var_4]
.text:00000B36                 add     esp, 4
.text:00000B39                 cmp     ebp, esp
.text:00000B3B                 call    __RTC_CheckEsp
.text:00000B40                 mov     esp, ebp
.text:00000B42                 pop     ebp
.text:00000B43                 retn
.text:00000B43 ??0ICompressCoder@@QAE@XZ endp
.text:00000B43
.text:00000B43 _text           ends
.text:00000B43
.rdata:00000B44 ; ===========================================================================
.rdata:00000B44
.rdata:00000B44 ; Segment type: Pure data
.rdata:00000B44 ; Segment permissions: Read
.rdata:00000B44 _rdata          segment dword public 'DATA' use32
.rdata:00000B44                 assume cs:_rdata
.rdata:00000B44                 ;org 0B44h
.rdata:00000B44 ; COMDAT (pick largest)
.rdata:00000B44                 dd offset ??_R4ICompressCoder@@6B@ ; const ICompressCoder::`RTTI Complete Object Locator'
.rdata:00000B48                 public ??_7ICompressCoder@@6B@
.rdata:00000B48 ; const ICompressCoder::`vftable'
.rdata:00000B48 ??_7ICompressCoder@@6B@ dd offset __purecall
.rdata:00000B48                                         ; DATA XREF: ICompressCoder::ICompressCoder(void)+19o
.rdata:00000B4C                 dd offset __purecall
.rdata:00000B50                 dd offset __purecall
.rdata:00000B54                 dd offset __purecall
.rdata:00000B54 _rdata          ends
.rdata:00000B54
.rdata$r:00000B58 ; ===========================================================================
.rdata$r:00000B58
.rdata$r:00000B58 ; Segment type: Pure data
.rdata$r:00000B58 ; Segment permissions: Read
.rdata$r:00000B58 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000B58                 assume cs:_rdata$r
.rdata$r:00000B58                 ;org 0B58h
.rdata$r:00000B58 ; COMDAT (pick any)
.rdata$r:00000B58                 public ??_R4ICompressCoder@@6B@
.rdata$r:00000B58 ; const ICompressCoder::`RTTI Complete Object Locator'
.rdata$r:00000B58 ??_R4ICompressCoder@@6B@ db    0        ; DATA XREF: .rdata:00000B44o
.rdata$r:00000B59                 db    0
.rdata$r:00000B5A                 db    0
.rdata$r:00000B5B                 db    0
.rdata$r:00000B5C                 db    0
.rdata$r:00000B5D                 db    0
.rdata$r:00000B5E                 db    0
.rdata$r:00000B5F                 db    0
.rdata$r:00000B60                 db    0
.rdata$r:00000B61                 db    0
.rdata$r:00000B62                 db    0
.rdata$r:00000B63                 db    0
.rdata$r:00000B64                 dd offset ??_R0?AUICompressCoder@@@8 ; ICompressCoder `RTTI Type Descriptor'
.rdata$r:00000B68                 dd offset ??_R3ICompressCoder@@8 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000B68 _rdata$r        ends
.rdata$r:00000B68
.text:00000B6C ; ===========================================================================
.text:00000B6C
.text:00000B6C ; Segment type: Pure code
.text:00000B6C ; Segment permissions: Read/Execute
.text:00000B6C _text           segment para public 'CODE' use32
.text:00000B6C                 assume cs:_text
.text:00000B6C                 ;org 0B6Ch
.text:00000B6C ; COMDAT (pick any)
.text:00000B6C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000B6C
.text:00000B6C ; =============== S U B R O U T I N E =======================================
.text:00000B6C
.text:00000B6C ; Attributes: bp-based frame
.text:00000B6C
.text:00000B6C ; _DWORD __thiscall ICompressSetDecoderProperties2::ICompressSetDecoderProperties2(ICompressSetDecoderProperties2 *__hidden this)
.text:00000B6C                 public ??0ICompressSetDecoderProperties2@@QAE@XZ
.text:00000B6C ??0ICompressSetDecoderProperties2@@QAE@XZ proc near
.text:00000B6C                                         ; CODE XREF: NCompress::NPpmd::CDecoder::CDecoder(void)+3Bp
.text:00000B6C
.text:00000B6C var_4           = dword ptr -4
.text:00000B6C
.text:00000B6C                 push    ebp
.text:00000B6D                 mov     ebp, esp
.text:00000B6F                 push    ecx
.text:00000B70                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000B77                 mov     [ebp+var_4], ecx
.text:00000B7A                 mov     ecx, [ebp+var_4]
.text:00000B7D                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00000B82                 mov     eax, [ebp+var_4]
.text:00000B85                 mov     dword ptr [eax], offset ??_7ICompressSetDecoderProperties2@@6B@ ; const ICompressSetDecoderProperties2::`vftable'
.text:00000B8B                 mov     eax, [ebp+var_4]
.text:00000B8E                 add     esp, 4
.text:00000B91                 cmp     ebp, esp
.text:00000B93                 call    __RTC_CheckEsp
.text:00000B98                 mov     esp, ebp
.text:00000B9A                 pop     ebp
.text:00000B9B                 retn
.text:00000B9B ??0ICompressSetDecoderProperties2@@QAE@XZ endp
.text:00000B9B
.text:00000B9B _text           ends
.text:00000B9B
.rdata:00000B9C ; ===========================================================================
.rdata:00000B9C
.rdata:00000B9C ; Segment type: Pure data
.rdata:00000B9C ; Segment permissions: Read
.rdata:00000B9C _rdata          segment dword public 'DATA' use32
.rdata:00000B9C                 assume cs:_rdata
.rdata:00000B9C                 ;org 0B9Ch
.rdata:00000B9C ; COMDAT (pick largest)
.rdata:00000B9C                 dd offset ??_R4ICompressSetDecoderProperties2@@6B@ ; const ICompressSetDecoderProperties2::`RTTI Complete Object Locator'
.rdata:00000BA0                 public ??_7ICompressSetDecoderProperties2@@6B@
.rdata:00000BA0 ; const ICompressSetDecoderProperties2::`vftable'
.rdata:00000BA0 ??_7ICompressSetDecoderProperties2@@6B@ dd offset __purecall
.rdata:00000BA0                                         ; DATA XREF: ICompressSetDecoderProperties2::ICompressSetDecoderProperties2(void)+19o
.rdata:00000BA4                 dd offset __purecall
.rdata:00000BA8                 dd offset __purecall
.rdata:00000BAC                 dd offset __purecall
.rdata:00000BAC _rdata          ends
.rdata:00000BAC
.rdata$r:00000BB0 ; ===========================================================================
.rdata$r:00000BB0
.rdata$r:00000BB0 ; Segment type: Pure data
.rdata$r:00000BB0 ; Segment permissions: Read
.rdata$r:00000BB0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000BB0                 assume cs:_rdata$r
.rdata$r:00000BB0                 ;org 0BB0h
.rdata$r:00000BB0 ; COMDAT (pick any)
.rdata$r:00000BB0                 public ??_R4ICompressSetDecoderProperties2@@6B@
.rdata$r:00000BB0 ; const ICompressSetDecoderProperties2::`RTTI Complete Object Locator'
.rdata$r:00000BB0 ??_R4ICompressSetDecoderProperties2@@6B@ db    0
.rdata$r:00000BB0                                         ; DATA XREF: .rdata:00000B9Co
.rdata$r:00000BB1                 db    0
.rdata$r:00000BB2                 db    0
.rdata$r:00000BB3                 db    0
.rdata$r:00000BB4                 db    0
.rdata$r:00000BB5                 db    0
.rdata$r:00000BB6                 db    0
.rdata$r:00000BB7                 db    0
.rdata$r:00000BB8                 db    0
.rdata$r:00000BB9                 db    0
.rdata$r:00000BBA                 db    0
.rdata$r:00000BBB                 db    0
.rdata$r:00000BBC                 dd offset ??_R0?AUICompressSetDecoderProperties2@@@8 ; ICompressSetDecoderProperties2 `RTTI Type Descriptor'
.rdata$r:00000BC0                 dd offset ??_R3ICompressSetDecoderProperties2@@8 ; ICompressSetDecoderProperties2::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000BC0 _rdata$r        ends
.rdata$r:00000BC0
.text:00000BC4 ; ===========================================================================
.text:00000BC4
.text:00000BC4 ; Segment type: Pure code
.text:00000BC4 ; Segment permissions: Read/Execute
.text:00000BC4 _text           segment para public 'CODE' use32
.text:00000BC4                 assume cs:_text
.text:00000BC4                 ;org 0BC4h
.text:00000BC4 ; COMDAT (pick any)
.text:00000BC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000BC4
.text:00000BC4 ; =============== S U B R O U T I N E =======================================
.text:00000BC4
.text:00000BC4 ; Attributes: bp-based frame
.text:00000BC4
.text:00000BC4 ; _DWORD __thiscall ICompressSetInStream::ICompressSetInStream(ICompressSetInStream *__hidden this)
.text:00000BC4                 public ??0ICompressSetInStream@@QAE@XZ
.text:00000BC4 ??0ICompressSetInStream@@QAE@XZ proc near
.text:00000BC4                                         ; CODE XREF: NCompress::NPpmd::CDecoder::CDecoder(void)+46p
.text:00000BC4
.text:00000BC4 var_4           = dword ptr -4
.text:00000BC4
.text:00000BC4                 push    ebp
.text:00000BC5                 mov     ebp, esp
.text:00000BC7                 push    ecx
.text:00000BC8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000BCF                 mov     [ebp+var_4], ecx
.text:00000BD2                 mov     ecx, [ebp+var_4]
.text:00000BD5                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00000BDA                 mov     eax, [ebp+var_4]
.text:00000BDD                 mov     dword ptr [eax], offset ??_7ICompressSetInStream@@6B@ ; const ICompressSetInStream::`vftable'
.text:00000BE3                 mov     eax, [ebp+var_4]
.text:00000BE6                 add     esp, 4
.text:00000BE9                 cmp     ebp, esp
.text:00000BEB                 call    __RTC_CheckEsp
.text:00000BF0                 mov     esp, ebp
.text:00000BF2                 pop     ebp
.text:00000BF3                 retn
.text:00000BF3 ??0ICompressSetInStream@@QAE@XZ endp
.text:00000BF3
.text:00000BF3 _text           ends
.text:00000BF3
.rdata:00000BF4 ; ===========================================================================
.rdata:00000BF4
.rdata:00000BF4 ; Segment type: Pure data
.rdata:00000BF4 ; Segment permissions: Read
.rdata:00000BF4 _rdata          segment dword public 'DATA' use32
.rdata:00000BF4                 assume cs:_rdata
.rdata:00000BF4                 ;org 0BF4h
.rdata:00000BF4 ; COMDAT (pick largest)
.rdata:00000BF4                 dd offset ??_R4ICompressSetInStream@@6B@ ; const ICompressSetInStream::`RTTI Complete Object Locator'
.rdata:00000BF8                 public ??_7ICompressSetInStream@@6B@
.rdata:00000BF8 ; const ICompressSetInStream::`vftable'
.rdata:00000BF8 ??_7ICompressSetInStream@@6B@ dd offset __purecall
.rdata:00000BF8                                         ; DATA XREF: ICompressSetInStream::ICompressSetInStream(void)+19o
.rdata:00000BFC                 dd offset __purecall
.rdata:00000C00                 dd offset __purecall
.rdata:00000C04                 dd offset __purecall
.rdata:00000C08                 dd offset __purecall
.rdata:00000C08 _rdata          ends
.rdata:00000C08
.rdata$r:00000C0C ; ===========================================================================
.rdata$r:00000C0C
.rdata$r:00000C0C ; Segment type: Pure data
.rdata$r:00000C0C ; Segment permissions: Read
.rdata$r:00000C0C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000C0C                 assume cs:_rdata$r
.rdata$r:00000C0C                 ;org 0C0Ch
.rdata$r:00000C0C ; COMDAT (pick any)
.rdata$r:00000C0C                 public ??_R4ICompressSetInStream@@6B@
.rdata$r:00000C0C ; const ICompressSetInStream::`RTTI Complete Object Locator'
.rdata$r:00000C0C ??_R4ICompressSetInStream@@6B@ db    0  ; DATA XREF: .rdata:00000BF4o
.rdata$r:00000C0D                 db    0
.rdata$r:00000C0E                 db    0
.rdata$r:00000C0F                 db    0
.rdata$r:00000C10                 db    0
.rdata$r:00000C11                 db    0
.rdata$r:00000C12                 db    0
.rdata$r:00000C13                 db    0
.rdata$r:00000C14                 db    0
.rdata$r:00000C15                 db    0
.rdata$r:00000C16                 db    0
.rdata$r:00000C17                 db    0
.rdata$r:00000C18                 dd offset ??_R0?AUICompressSetInStream@@@8 ; ICompressSetInStream `RTTI Type Descriptor'
.rdata$r:00000C1C                 dd offset ??_R3ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000C1C _rdata$r        ends
.rdata$r:00000C1C
.text:00000C20 ; ===========================================================================
.text:00000C20
.text:00000C20 ; Segment type: Pure code
.text:00000C20 ; Segment permissions: Read/Execute
.text:00000C20 _text           segment para public 'CODE' use32
.text:00000C20                 assume cs:_text
.text:00000C20                 ;org 0C20h
.text:00000C20 ; COMDAT (pick any)
.text:00000C20                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000C20
.text:00000C20 ; =============== S U B R O U T I N E =======================================
.text:00000C20
.text:00000C20 ; Attributes: bp-based frame
.text:00000C20
.text:00000C20 ; _DWORD __thiscall ICompressSetOutStreamSize::ICompressSetOutStreamSize(ICompressSetOutStreamSize *__hidden this)
.text:00000C20                 public ??0ICompressSetOutStreamSize@@QAE@XZ
.text:00000C20 ??0ICompressSetOutStreamSize@@QAE@XZ proc near
.text:00000C20                                         ; CODE XREF: NCompress::NPpmd::CDecoder::CDecoder(void)+51p
.text:00000C20
.text:00000C20 var_4           = dword ptr -4
.text:00000C20
.text:00000C20                 push    ebp
.text:00000C21                 mov     ebp, esp
.text:00000C23                 push    ecx
.text:00000C24                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000C2B                 mov     [ebp+var_4], ecx
.text:00000C2E                 mov     ecx, [ebp+var_4]
.text:00000C31                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00000C36                 mov     eax, [ebp+var_4]
.text:00000C39                 mov     dword ptr [eax], offset ??_7ICompressSetOutStreamSize@@6B@ ; const ICompressSetOutStreamSize::`vftable'
.text:00000C3F                 mov     eax, [ebp+var_4]
.text:00000C42                 add     esp, 4
.text:00000C45                 cmp     ebp, esp
.text:00000C47                 call    __RTC_CheckEsp
.text:00000C4C                 mov     esp, ebp
.text:00000C4E                 pop     ebp
.text:00000C4F                 retn
.text:00000C4F ??0ICompressSetOutStreamSize@@QAE@XZ endp
.text:00000C4F
.text:00000C4F _text           ends
.text:00000C4F
.rdata:00000C50 ; ===========================================================================
.rdata:00000C50
.rdata:00000C50 ; Segment type: Pure data
.rdata:00000C50 ; Segment permissions: Read
.rdata:00000C50 _rdata          segment dword public 'DATA' use32
.rdata:00000C50                 assume cs:_rdata
.rdata:00000C50                 ;org 0C50h
.rdata:00000C50 ; COMDAT (pick largest)
.rdata:00000C50                 dd offset ??_R4ICompressSetOutStreamSize@@6B@ ; const ICompressSetOutStreamSize::`RTTI Complete Object Locator'
.rdata:00000C54                 public ??_7ICompressSetOutStreamSize@@6B@
.rdata:00000C54 ; const ICompressSetOutStreamSize::`vftable'
.rdata:00000C54 ??_7ICompressSetOutStreamSize@@6B@ dd offset __purecall
.rdata:00000C54                                         ; DATA XREF: ICompressSetOutStreamSize::ICompressSetOutStreamSize(void)+19o
.rdata:00000C58                 dd offset __purecall
.rdata:00000C5C                 dd offset __purecall
.rdata:00000C60                 dd offset __purecall
.rdata:00000C60 _rdata          ends
.rdata:00000C60
.rdata$r:00000C64 ; ===========================================================================
.rdata$r:00000C64
.rdata$r:00000C64 ; Segment type: Pure data
.rdata$r:00000C64 ; Segment permissions: Read
.rdata$r:00000C64 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000C64                 assume cs:_rdata$r
.rdata$r:00000C64                 ;org 0C64h
.rdata$r:00000C64 ; COMDAT (pick any)
.rdata$r:00000C64                 public ??_R4ICompressSetOutStreamSize@@6B@
.rdata$r:00000C64 ; const ICompressSetOutStreamSize::`RTTI Complete Object Locator'
.rdata$r:00000C64 ??_R4ICompressSetOutStreamSize@@6B@ db    0 ; DATA XREF: .rdata:00000C50o
.rdata$r:00000C65                 db    0
.rdata$r:00000C66                 db    0
.rdata$r:00000C67                 db    0
.rdata$r:00000C68                 db    0
.rdata$r:00000C69                 db    0
.rdata$r:00000C6A                 db    0
.rdata$r:00000C6B                 db    0
.rdata$r:00000C6C                 db    0
.rdata$r:00000C6D                 db    0
.rdata$r:00000C6E                 db    0
.rdata$r:00000C6F                 db    0
.rdata$r:00000C70                 dd offset ??_R0?AUICompressSetOutStreamSize@@@8 ; ICompressSetOutStreamSize `RTTI Type Descriptor'
.rdata$r:00000C74                 dd offset ??_R3ICompressSetOutStreamSize@@8 ; ICompressSetOutStreamSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000C74 _rdata$r        ends
.rdata$r:00000C74
.text:00000C78 ; ===========================================================================
.text:00000C78
.text:00000C78 ; Segment type: Pure code
.text:00000C78 ; Segment permissions: Read/Execute
.text:00000C78 _text           segment para public 'CODE' use32
.text:00000C78                 assume cs:_text
.text:00000C78                 ;org 0C78h
.text:00000C78 ; COMDAT (pick any)
.text:00000C78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000C78
.text:00000C78 ; =============== S U B R O U T I N E =======================================
.text:00000C78
.text:00000C78 ; Attributes: bp-based frame
.text:00000C78
.text:00000C78 ; _DWORD __thiscall ISequentialInStream::ISequentialInStream(ISequentialInStream *__hidden this)
.text:00000C78                 public ??0ISequentialInStream@@QAE@XZ
.text:00000C78 ??0ISequentialInStream@@QAE@XZ proc near
.text:00000C78                                         ; CODE XREF: NCompress::NPpmd::CDecoder::CDecoder(void)+5Cp
.text:00000C78
.text:00000C78 var_4           = dword ptr -4
.text:00000C78
.text:00000C78                 push    ebp
.text:00000C79                 mov     ebp, esp
.text:00000C7B                 push    ecx
.text:00000C7C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000C83                 mov     [ebp+var_4], ecx
.text:00000C86                 mov     ecx, [ebp+var_4]
.text:00000C89                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00000C8E                 mov     eax, [ebp+var_4]
.text:00000C91                 mov     dword ptr [eax], offset ??_7ISequentialInStream@@6B@ ; const ISequentialInStream::`vftable'
.text:00000C97                 mov     eax, [ebp+var_4]
.text:00000C9A                 add     esp, 4
.text:00000C9D                 cmp     ebp, esp
.text:00000C9F                 call    __RTC_CheckEsp
.text:00000CA4                 mov     esp, ebp
.text:00000CA6                 pop     ebp
.text:00000CA7                 retn
.text:00000CA7 ??0ISequentialInStream@@QAE@XZ endp
.text:00000CA7
.text:00000CA7 _text           ends
.text:00000CA7
.rdata:00000CA8 ; ===========================================================================
.rdata:00000CA8
.rdata:00000CA8 ; Segment type: Pure data
.rdata:00000CA8 ; Segment permissions: Read
.rdata:00000CA8 _rdata          segment dword public 'DATA' use32
.rdata:00000CA8                 assume cs:_rdata
.rdata:00000CA8                 ;org 0CA8h
.rdata:00000CA8 ; COMDAT (pick largest)
.rdata:00000CA8                 dd offset ??_R4ISequentialInStream@@6B@ ; const ISequentialInStream::`RTTI Complete Object Locator'
.rdata:00000CAC                 public ??_7ISequentialInStream@@6B@
.rdata:00000CAC ; const ISequentialInStream::`vftable'
.rdata:00000CAC ??_7ISequentialInStream@@6B@ dd offset __purecall
.rdata:00000CAC                                         ; DATA XREF: ISequentialInStream::ISequentialInStream(void)+19o
.rdata:00000CB0                 dd offset __purecall
.rdata:00000CB4                 dd offset __purecall
.rdata:00000CB8                 dd offset __purecall
.rdata:00000CB8 _rdata          ends
.rdata:00000CB8
.rdata$r:00000CBC ; ===========================================================================
.rdata$r:00000CBC
.rdata$r:00000CBC ; Segment type: Pure data
.rdata$r:00000CBC ; Segment permissions: Read
.rdata$r:00000CBC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000CBC                 assume cs:_rdata$r
.rdata$r:00000CBC                 ;org 0CBCh
.rdata$r:00000CBC ; COMDAT (pick any)
.rdata$r:00000CBC                 public ??_R4ISequentialInStream@@6B@
.rdata$r:00000CBC ; const ISequentialInStream::`RTTI Complete Object Locator'
.rdata$r:00000CBC ??_R4ISequentialInStream@@6B@ db    0   ; DATA XREF: .rdata:00000CA8o
.rdata$r:00000CBD                 db    0
.rdata$r:00000CBE                 db    0
.rdata$r:00000CBF                 db    0
.rdata$r:00000CC0                 db    0
.rdata$r:00000CC1                 db    0
.rdata$r:00000CC2                 db    0
.rdata$r:00000CC3                 db    0
.rdata$r:00000CC4                 db    0
.rdata$r:00000CC5                 db    0
.rdata$r:00000CC6                 db    0
.rdata$r:00000CC7                 db    0
.rdata$r:00000CC8                 dd offset ??_R0?AUISequentialInStream@@@8 ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:00000CCC                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000CCC _rdata$r        ends
.rdata$r:00000CCC
.text:00000CD0 ; ===========================================================================
.text:00000CD0
.text:00000CD0 ; Segment type: Pure code
.text:00000CD0 ; Segment permissions: Read/Execute
.text:00000CD0 _text           segment para public 'CODE' use32
.text:00000CD0                 assume cs:_text
.text:00000CD0                 ;org 0CD0h
.text:00000CD0 ; COMDAT (pick any)
.text:00000CD0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000CD0
.text:00000CD0 ; =============== S U B R O U T I N E =======================================
.text:00000CD0
.text:00000CD0 ; Attributes: bp-based frame
.text:00000CD0
.text:00000CD0 ; public: __thiscall IUnknown::IUnknown(void)
.text:00000CD0                 public ??0IUnknown@@QAE@XZ
.text:00000CD0 ??0IUnknown@@QAE@XZ proc near           ; CODE XREF: ICompressCoder::ICompressCoder(void)+11p
.text:00000CD0                                         ; ICompressSetDecoderProperties2::ICompressSetDecoderProperties2(void)+11p ...
.text:00000CD0
.text:00000CD0 var_4           = dword ptr -4
.text:00000CD0
.text:00000CD0                 push    ebp
.text:00000CD1                 mov     ebp, esp
.text:00000CD3                 push    ecx
.text:00000CD4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000CDB                 mov     [ebp+var_4], ecx
.text:00000CDE                 mov     eax, [ebp+var_4]
.text:00000CE1                 mov     esp, ebp
.text:00000CE3                 pop     ebp
.text:00000CE4                 retn
.text:00000CE4 ??0IUnknown@@QAE@XZ endp
.text:00000CE4
.text:00000CE4 ; ---------------------------------------------------------------------------
.text:00000CE5                 align 4
.text:00000CE5 _text           ends
.text:00000CE5
.text:00000CE8 ; ===========================================================================
.text:00000CE8
.text:00000CE8 ; Segment type: Pure code
.text:00000CE8 ; Segment permissions: Read/Execute
.text:00000CE8 _text           segment para public 'CODE' use32
.text:00000CE8                 assume cs:_text
.text:00000CE8                 ;org 0CE8h
.text:00000CE8 ; COMDAT (pick any)
.text:00000CE8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000CE8
.text:00000CE8 ; =============== S U B R O U T I N E =======================================
.text:00000CE8
.text:00000CE8 ; Attributes: bp-based frame
.text:00000CE8
.text:00000CE8 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::CMyComPtr<struct ISequentialInStream>(void)
.text:00000CE8                 public ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
.text:00000CE8 ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ proc near
.text:00000CE8                                         ; CODE XREF: NCompress::NPpmd::CDecoder::CDecoder(void)+CCp
.text:00000CE8
.text:00000CE8 var_4           = dword ptr -4
.text:00000CE8
.text:00000CE8                 push    ebp
.text:00000CE9                 mov     ebp, esp
.text:00000CEB                 push    ecx
.text:00000CEC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000CF3                 mov     [ebp+var_4], ecx
.text:00000CF6                 mov     eax, [ebp+var_4]
.text:00000CF9                 mov     dword ptr [eax], 0
.text:00000CFF                 mov     eax, [ebp+var_4]
.text:00000D02                 mov     esp, ebp
.text:00000D04                 pop     ebp
.text:00000D05                 retn
.text:00000D05 ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ endp
.text:00000D05
.text:00000D05 ; ---------------------------------------------------------------------------
.text:00000D06                 align 4
.text:00000D06 _text           ends
.text:00000D06
.text:00000D08 ; ===========================================================================
.text:00000D08
.text:00000D08 ; Segment type: Pure code
.text:00000D08 ; Segment permissions: Read/Execute
.text:00000D08 _text           segment para public 'CODE' use32
.text:00000D08                 assume cs:_text
.text:00000D08                 ;org 0D08h
.text:00000D08 ; COMDAT (pick any)
.text:00000D08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000D08
.text:00000D08 ; =============== S U B R O U T I N E =======================================
.text:00000D08
.text:00000D08
.text:00000D08 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NPpmd::CDecoder::Release`adjustor{12}' (void)
.text:00000D08                 public ?Release@CDecoder@NPpmd@NCompress@@WM@AGKXZ
.text:00000D08 ?Release@CDecoder@NPpmd@NCompress@@WM@AGKXZ proc near
.text:00000D08                                         ; DATA XREF: .rdata:00000368o
.text:00000D08
.text:00000D08 arg_0           = dword ptr  4
.text:00000D08
.text:00000D08                 sub     [esp+arg_0], 0Ch
.text:00000D0D                 jmp     ?Release@CDecoder@NPpmd@NCompress@@UAGKXZ ; NCompress::NPpmd::CDecoder::Release(void)
.text:00000D0D ?Release@CDecoder@NPpmd@NCompress@@WM@AGKXZ endp
.text:00000D0D
.text:00000D0D ; ---------------------------------------------------------------------------
.text:00000D12                 align 4
.text:00000D12 _text           ends
.text:00000D12
.text:00000D14 ; ===========================================================================
.text:00000D14
.text:00000D14 ; Segment type: Pure code
.text:00000D14 ; Segment permissions: Read/Execute
.text:00000D14 _text           segment para public 'CODE' use32
.text:00000D14                 assume cs:_text
.text:00000D14                 ;org 0D14h
.text:00000D14 ; COMDAT (pick any)
.text:00000D14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000D14
.text:00000D14 ; =============== S U B R O U T I N E =======================================
.text:00000D14
.text:00000D14
.text:00000D14 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NPpmd::CDecoder::AddRef`adjustor{4}' (void)
.text:00000D14                 public ?AddRef@CDecoder@NPpmd@NCompress@@W3AGKXZ
.text:00000D14 ?AddRef@CDecoder@NPpmd@NCompress@@W3AGKXZ proc near
.text:00000D14                                         ; DATA XREF: .rdata:00000390o
.text:00000D14
.text:00000D14 arg_0           = dword ptr  4
.text:00000D14
.text:00000D14                 sub     [esp+arg_0], 4
.text:00000D19                 jmp     ?AddRef@CDecoder@NPpmd@NCompress@@UAGKXZ ; NCompress::NPpmd::CDecoder::AddRef(void)
.text:00000D19 ?AddRef@CDecoder@NPpmd@NCompress@@W3AGKXZ endp
.text:00000D19
.text:00000D19 ; ---------------------------------------------------------------------------
.text:00000D1E                 align 10h
.text:00000D1E _text           ends
.text:00000D1E
.text:00000D20 ; ===========================================================================
.text:00000D20
.text:00000D20 ; Segment type: Pure code
.text:00000D20 ; Segment permissions: Read/Execute
.text:00000D20 _text           segment para public 'CODE' use32
.text:00000D20                 assume cs:_text
.text:00000D20                 ;org 0D20h
.text:00000D20 ; COMDAT (pick any)
.text:00000D20                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000D20
.text:00000D20 ; =============== S U B R O U T I N E =======================================
.text:00000D20
.text:00000D20
.text:00000D20 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NPpmd::CDecoder::Release`adjustor{16}' (void)
.text:00000D20                 public ?Release@CDecoder@NPpmd@NCompress@@WBA@AGKXZ
.text:00000D20 ?Release@CDecoder@NPpmd@NCompress@@WBA@AGKXZ proc near
.text:00000D20                                         ; DATA XREF: .rdata:00000354o
.text:00000D20
.text:00000D20 arg_0           = dword ptr  4
.text:00000D20
.text:00000D20                 sub     [esp+arg_0], 10h
.text:00000D25                 jmp     ?Release@CDecoder@NPpmd@NCompress@@UAGKXZ ; NCompress::NPpmd::CDecoder::Release(void)
.text:00000D25 ?Release@CDecoder@NPpmd@NCompress@@WBA@AGKXZ endp
.text:00000D25
.text:00000D25 ; ---------------------------------------------------------------------------
.text:00000D2A                 align 4
.text:00000D2A _text           ends
.text:00000D2A
.text:00000D2C ; ===========================================================================
.text:00000D2C
.text:00000D2C ; Segment type: Pure code
.text:00000D2C ; Segment permissions: Read/Execute
.text:00000D2C _text           segment para public 'CODE' use32
.text:00000D2C                 assume cs:_text
.text:00000D2C                 ;org 0D2Ch
.text:00000D2C ; COMDAT (pick any)
.text:00000D2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000D2C
.text:00000D2C ; =============== S U B R O U T I N E =======================================
.text:00000D2C
.text:00000D2C
.text:00000D2C ; [thunk]:public: virtual unsigned long __stdcall NCompress::NPpmd::CDecoder::AddRef`adjustor{8}' (void)
.text:00000D2C                 public ?AddRef@CDecoder@NPpmd@NCompress@@W7AGKXZ
.text:00000D2C ?AddRef@CDecoder@NPpmd@NCompress@@W7AGKXZ proc near
.text:00000D2C                                         ; DATA XREF: .rdata:00000378o
.text:00000D2C
.text:00000D2C arg_0           = dword ptr  4
.text:00000D2C
.text:00000D2C                 sub     [esp+arg_0], 8
.text:00000D31                 jmp     ?AddRef@CDecoder@NPpmd@NCompress@@UAGKXZ ; NCompress::NPpmd::CDecoder::AddRef(void)
.text:00000D31 ?AddRef@CDecoder@NPpmd@NCompress@@W7AGKXZ endp
.text:00000D31
.text:00000D31 ; ---------------------------------------------------------------------------
.text:00000D36                 align 4
.text:00000D36 _text           ends
.text:00000D36
.text:00000D38 ; ===========================================================================
.text:00000D38
.text:00000D38 ; Segment type: Pure code
.text:00000D38 ; Segment permissions: Read/Execute
.text:00000D38 _text           segment para public 'CODE' use32
.text:00000D38                 assume cs:_text
.text:00000D38                 ;org 0D38h
.text:00000D38 ; COMDAT (pick any)
.text:00000D38                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000D38
.text:00000D38 ; =============== S U B R O U T I N E =======================================
.text:00000D38
.text:00000D38
.text:00000D38 ; [thunk]:public: virtual long __stdcall NCompress::NPpmd::CDecoder::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:00000D38                 public ?QueryInterface@CDecoder@NPpmd@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.text:00000D38 ?QueryInterface@CDecoder@NPpmd@NCompress@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:00000D38                                         ; DATA XREF: .rdata:const NCompress::NPpmd::CDecoder::`vftable'{for `ICompressSetDecoderProperties2'}o
.text:00000D38
.text:00000D38 arg_0           = dword ptr  4
.text:00000D38
.text:00000D38                 sub     [esp+arg_0], 4
.text:00000D3D                 jmp     ?QueryInterface@CDecoder@NPpmd@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NPpmd::CDecoder::QueryInterface(_GUID const &,void * *)
.text:00000D3D ?QueryInterface@CDecoder@NPpmd@NCompress@@W3AGJABU_GUID@@PAPAX@Z endp
.text:00000D3D
.text:00000D3D ; ---------------------------------------------------------------------------
.text:00000D42                 align 4
.text:00000D42 _text           ends
.text:00000D42
.text:00000D44 ; ===========================================================================
.text:00000D44
.text:00000D44 ; Segment type: Pure code
.text:00000D44 ; Segment permissions: Read/Execute
.text:00000D44 _text           segment para public 'CODE' use32
.text:00000D44                 assume cs:_text
.text:00000D44                 ;org 0D44h
.text:00000D44 ; COMDAT (pick any)
.text:00000D44                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000D44
.text:00000D44 ; =============== S U B R O U T I N E =======================================
.text:00000D44
.text:00000D44
.text:00000D44 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NPpmd::CDecoder::AddRef`adjustor{12}' (void)
.text:00000D44                 public ?AddRef@CDecoder@NPpmd@NCompress@@WM@AGKXZ
.text:00000D44 ?AddRef@CDecoder@NPpmd@NCompress@@WM@AGKXZ proc near
.text:00000D44                                         ; DATA XREF: .rdata:00000364o
.text:00000D44
.text:00000D44 arg_0           = dword ptr  4
.text:00000D44
.text:00000D44                 sub     [esp+arg_0], 0Ch
.text:00000D49                 jmp     ?AddRef@CDecoder@NPpmd@NCompress@@UAGKXZ ; NCompress::NPpmd::CDecoder::AddRef(void)
.text:00000D49 ?AddRef@CDecoder@NPpmd@NCompress@@WM@AGKXZ endp
.text:00000D49
.text:00000D49 ; ---------------------------------------------------------------------------
.text:00000D4E                 align 10h
.text:00000D4E _text           ends
.text:00000D4E
.text:00000D50 ; ===========================================================================
.text:00000D50
.text:00000D50 ; Segment type: Pure code
.text:00000D50 ; Segment permissions: Read/Execute
.text:00000D50 _text           segment para public 'CODE' use32
.text:00000D50                 assume cs:_text
.text:00000D50                 ;org 0D50h
.text:00000D50 ; COMDAT (pick any)
.text:00000D50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000D50
.text:00000D50 ; =============== S U B R O U T I N E =======================================
.text:00000D50
.text:00000D50
.text:00000D50 ; [thunk]:public: virtual long __stdcall NCompress::NPpmd::CDecoder::QueryInterface`adjustor{8}' (struct _GUID const &, void * *)
.text:00000D50                 public ?QueryInterface@CDecoder@NPpmd@NCompress@@W7AGJABU_GUID@@PAPAX@Z
.text:00000D50 ?QueryInterface@CDecoder@NPpmd@NCompress@@W7AGJABU_GUID@@PAPAX@Z proc near
.text:00000D50                                         ; DATA XREF: .rdata:const NCompress::NPpmd::CDecoder::`vftable'{for `ICompressSetInStream'}o
.text:00000D50
.text:00000D50 arg_0           = dword ptr  4
.text:00000D50
.text:00000D50                 sub     [esp+arg_0], 8
.text:00000D55                 jmp     ?QueryInterface@CDecoder@NPpmd@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NPpmd::CDecoder::QueryInterface(_GUID const &,void * *)
.text:00000D55 ?QueryInterface@CDecoder@NPpmd@NCompress@@W7AGJABU_GUID@@PAPAX@Z endp
.text:00000D55
.text:00000D55 ; ---------------------------------------------------------------------------
.text:00000D5A                 align 4
.text:00000D5A _text           ends
.text:00000D5A
.text:00000D5C ; ===========================================================================
.text:00000D5C
.text:00000D5C ; Segment type: Pure code
.text:00000D5C ; Segment permissions: Read/Execute
.text:00000D5C _text           segment para public 'CODE' use32
.text:00000D5C                 assume cs:_text
.text:00000D5C                 ;org 0D5Ch
.text:00000D5C ; COMDAT (pick any)
.text:00000D5C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000D5C
.text:00000D5C ; =============== S U B R O U T I N E =======================================
.text:00000D5C
.text:00000D5C
.text:00000D5C ; [thunk]:public: virtual unsigned long __stdcall NCompress::NPpmd::CDecoder::AddRef`adjustor{16}' (void)
.text:00000D5C                 public ?AddRef@CDecoder@NPpmd@NCompress@@WBA@AGKXZ
.text:00000D5C ?AddRef@CDecoder@NPpmd@NCompress@@WBA@AGKXZ proc near
.text:00000D5C                                         ; DATA XREF: .rdata:00000350o
.text:00000D5C
.text:00000D5C arg_0           = dword ptr  4
.text:00000D5C
.text:00000D5C                 sub     [esp+arg_0], 10h
.text:00000D61                 jmp     ?AddRef@CDecoder@NPpmd@NCompress@@UAGKXZ ; NCompress::NPpmd::CDecoder::AddRef(void)
.text:00000D61 ?AddRef@CDecoder@NPpmd@NCompress@@WBA@AGKXZ endp
.text:00000D61
.text:00000D61 ; ---------------------------------------------------------------------------
.text:00000D66                 align 4
.text:00000D66 _text           ends
.text:00000D66
.text:00000D68 ; ===========================================================================
.text:00000D68
.text:00000D68 ; Segment type: Pure code
.text:00000D68 ; Segment permissions: Read/Execute
.text:00000D68 _text           segment para public 'CODE' use32
.text:00000D68                 assume cs:_text
.text:00000D68                 ;org 0D68h
.text:00000D68 ; COMDAT (pick any)
.text:00000D68                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000D68
.text:00000D68 ; =============== S U B R O U T I N E =======================================
.text:00000D68
.text:00000D68
.text:00000D68 ; [thunk]:public: virtual long __stdcall NCompress::NPpmd::CDecoder::QueryInterface`adjustor{12}' (struct _GUID const &, void * *)
.text:00000D68                 public ?QueryInterface@CDecoder@NPpmd@NCompress@@WM@AGJABU_GUID@@PAPAX@Z
.text:00000D68 ?QueryInterface@CDecoder@NPpmd@NCompress@@WM@AGJABU_GUID@@PAPAX@Z proc near
.text:00000D68                                         ; DATA XREF: .rdata:const NCompress::NPpmd::CDecoder::`vftable'{for `ICompressSetOutStreamSize'}o
.text:00000D68
.text:00000D68 arg_0           = dword ptr  4
.text:00000D68
.text:00000D68                 sub     [esp+arg_0], 0Ch
.text:00000D6D                 jmp     ?QueryInterface@CDecoder@NPpmd@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NPpmd::CDecoder::QueryInterface(_GUID const &,void * *)
.text:00000D6D ?QueryInterface@CDecoder@NPpmd@NCompress@@WM@AGJABU_GUID@@PAPAX@Z endp
.text:00000D6D
.text:00000D6D ; ---------------------------------------------------------------------------
.text:00000D72                 align 4
.text:00000D72 _text           ends
.text:00000D72
.text:00000D74 ; ===========================================================================
.text:00000D74
.text:00000D74 ; Segment type: Pure code
.text:00000D74 ; Segment permissions: Read/Execute
.text:00000D74 _text           segment para public 'CODE' use32
.text:00000D74                 assume cs:_text
.text:00000D74                 ;org 0D74h
.text:00000D74 ; COMDAT (pick any)
.text:00000D74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000D74
.text:00000D74 ; =============== S U B R O U T I N E =======================================
.text:00000D74
.text:00000D74
.text:00000D74 ; [thunk]:public: virtual long __stdcall NCompress::NPpmd::CDecoder::QueryInterface`adjustor{16}' (struct _GUID const &, void * *)
.text:00000D74                 public ?QueryInterface@CDecoder@NPpmd@NCompress@@WBA@AGJABU_GUID@@PAPAX@Z
.text:00000D74 ?QueryInterface@CDecoder@NPpmd@NCompress@@WBA@AGJABU_GUID@@PAPAX@Z proc near
.text:00000D74                                         ; DATA XREF: .rdata:const NCompress::NPpmd::CDecoder::`vftable'{for `ISequentialInStream'}o
.text:00000D74
.text:00000D74 arg_0           = dword ptr  4
.text:00000D74
.text:00000D74                 sub     [esp+arg_0], 10h
.text:00000D79                 jmp     ?QueryInterface@CDecoder@NPpmd@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NPpmd::CDecoder::QueryInterface(_GUID const &,void * *)
.text:00000D79 ?QueryInterface@CDecoder@NPpmd@NCompress@@WBA@AGJABU_GUID@@PAPAX@Z endp
.text:00000D79
.text:00000D79 ; ---------------------------------------------------------------------------
.text:00000D7E                 align 10h
.text:00000D7E _text           ends
.text:00000D7E
.text:00000D80 ; ===========================================================================
.text:00000D80
.text:00000D80 ; Segment type: Pure code
.text:00000D80 ; Segment permissions: Read/Execute
.text:00000D80 _text           segment para public 'CODE' use32
.text:00000D80                 assume cs:_text
.text:00000D80                 ;org 0D80h
.text:00000D80 ; COMDAT (pick any)
.text:00000D80                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000D80
.text:00000D80 ; =============== S U B R O U T I N E =======================================
.text:00000D80
.text:00000D80
.text:00000D80 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NPpmd::CDecoder::Release`adjustor{4}' (void)
.text:00000D80                 public ?Release@CDecoder@NPpmd@NCompress@@W3AGKXZ
.text:00000D80 ?Release@CDecoder@NPpmd@NCompress@@W3AGKXZ proc near
.text:00000D80                                         ; DATA XREF: .rdata:00000394o
.text:00000D80
.text:00000D80 arg_0           = dword ptr  4
.text:00000D80
.text:00000D80                 sub     [esp+arg_0], 4
.text:00000D85                 jmp     ?Release@CDecoder@NPpmd@NCompress@@UAGKXZ ; NCompress::NPpmd::CDecoder::Release(void)
.text:00000D85 ?Release@CDecoder@NPpmd@NCompress@@W3AGKXZ endp
.text:00000D85
.text:00000D85 ; ---------------------------------------------------------------------------
.text:00000D8A                 align 4
.text:00000D8A _text           ends
.text:00000D8A
.text:00000D8C ; ===========================================================================
.text:00000D8C
.text:00000D8C ; Segment type: Pure code
.text:00000D8C ; Segment permissions: Read/Execute
.text:00000D8C _text           segment para public 'CODE' use32
.text:00000D8C                 assume cs:_text
.text:00000D8C                 ;org 0D8Ch
.text:00000D8C ; COMDAT (pick any)
.text:00000D8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000D8C
.text:00000D8C ; =============== S U B R O U T I N E =======================================
.text:00000D8C
.text:00000D8C
.text:00000D8C ; [thunk]:public: virtual unsigned long __stdcall NCompress::NPpmd::CDecoder::Release`adjustor{8}' (void)
.text:00000D8C                 public ?Release@CDecoder@NPpmd@NCompress@@W7AGKXZ
.text:00000D8C ?Release@CDecoder@NPpmd@NCompress@@W7AGKXZ proc near
.text:00000D8C                                         ; DATA XREF: .rdata:0000037Co
.text:00000D8C
.text:00000D8C arg_0           = dword ptr  4
.text:00000D8C
.text:00000D8C                 sub     [esp+arg_0], 8
.text:00000D91                 jmp     ?Release@CDecoder@NPpmd@NCompress@@UAGKXZ ; NCompress::NPpmd::CDecoder::Release(void)
.text:00000D91 ?Release@CDecoder@NPpmd@NCompress@@W7AGKXZ endp
.text:00000D91
.text:00000D91 ; ---------------------------------------------------------------------------
.text:00000D96                 align 4
.text:00000D96 _text           ends
.text:00000D96
.text$yc:00000D98 ; ===========================================================================
.text$yc:00000D98
.text$yc:00000D98 ; Segment type: Pure code
.text$yc:00000D98 ; Segment permissions: Read/Execute
.text$yc:00000D98 _text$yc        segment para public 'CODE' use32
.text$yc:00000D98                 assume cs:_text$yc
.text$yc:00000D98                 ;org 0D98h
.text$yc:00000D98 ; COMDAT (pick any)
.text$yc:00000D98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yc:00000D98
.text$yc:00000D98 ; =============== S U B R O U T I N E =======================================
.text$yc:00000D98
.text$yc:00000D98 ; Attributes: bp-based frame
.text$yc:00000D98
.text$yc:00000D98 ; void __cdecl `dynamic initializer for 'g_RegisterCodec''(void)
.text$yc:00000D98 ??__Eg_RegisterCodec@@YAXXZ proc near   ; DATA XREF: .CRT$XCU:_g_RegisterCodec$initializer$o
.text$yc:00000D98                 push    ebp
.text$yc:00000D99                 mov     ebp, esp
.text$yc:00000D9B                 mov     ecx, offset _g_RegisterCodec ; this
.text$yc:00000DA0                 call    ??0CRegisterCodecPPMD@@QAE@XZ ; CRegisterCodecPPMD::CRegisterCodecPPMD(void)
.text$yc:00000DA5                 cmp     ebp, esp
.text$yc:00000DA7                 call    __RTC_CheckEsp
.text$yc:00000DAC                 pop     ebp
.text$yc:00000DAD                 retn
.text$yc:00000DAD ??__Eg_RegisterCodec@@YAXXZ endp
.text$yc:00000DAD
.text$yc:00000DAD ; ---------------------------------------------------------------------------
.text$yc:00000DAE                 align 10h
.text$yc:00000DAE _text$yc        ends
.text$yc:00000DAE
.text:00000DB0 ; ===========================================================================
.text:00000DB0
.text:00000DB0 ; Segment type: Pure code
.text:00000DB0 ; Segment permissions: Read/Execute
.text:00000DB0 _text           segment para public 'CODE' use32
.text:00000DB0                 assume cs:_text
.text:00000DB0                 ;org 0DB0h
.text:00000DB0 ; COMDAT (pick any)
.text:00000DB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000DB0
.text:00000DB0 ; =============== S U B R O U T I N E =======================================
.text:00000DB0
.text:00000DB0 ; Attributes: bp-based frame
.text:00000DB0
.text:00000DB0 ; _DWORD __thiscall CRegisterCodecPPMD::CRegisterCodecPPMD(CRegisterCodecPPMD *__hidden this)
.text:00000DB0                 public ??0CRegisterCodecPPMD@@QAE@XZ
.text:00000DB0 ??0CRegisterCodecPPMD@@QAE@XZ proc near ; CODE XREF: `dynamic initializer for 'g_RegisterCodec''(void)+8p
.text:00000DB0
.text:00000DB0 var_4           = dword ptr -4
.text:00000DB0
.text:00000DB0                 push    ebp
.text:00000DB1                 mov     ebp, esp
.text:00000DB3                 push    ecx
.text:00000DB4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000DBB                 mov     [ebp+var_4], ecx
.text:00000DBE                 push    offset _g_CodecInfo ; struct CCodecInfo *
.text:00000DC3                 call    ?RegisterCodec@@YGXPBUCCodecInfo@@@Z ; RegisterCodec(CCodecInfo const *)
.text:00000DC8                 mov     eax, [ebp+var_4]
.text:00000DCB                 add     esp, 4
.text:00000DCE                 cmp     ebp, esp
.text:00000DD0                 call    __RTC_CheckEsp
.text:00000DD5                 mov     esp, ebp
.text:00000DD7                 pop     ebp
.text:00000DD8                 retn
.text:00000DD8 ??0CRegisterCodecPPMD@@QAE@XZ endp
.text:00000DD8
.text:00000DD8 ; ---------------------------------------------------------------------------
.text:00000DD9                 align 4
.text:00000DD9 _text           ends
.text:00000DD9
.bss:00000DDC ; ===========================================================================
.bss:00000DDC
.bss:00000DDC ; Segment type: Uninitialized
.bss:00000DDC ; Segment permissions: Read/Write
.bss:00000DDC _bss            segment byte public 'BSS' use32
.bss:00000DDC                 assume cs:_bss
.bss:00000DDC                 ;org 0DDCh
.bss:00000DDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:00000DDC ; CRegisterCodecPPMD g_RegisterCodec
.bss:00000DDC _g_RegisterCodec db    ? ;              ; DATA XREF: `dynamic initializer for 'g_RegisterCodec''(void)+3o
.bss:00000DDD                 align 10h
.bss:00000DDD _bss            ends
.bss:00000DDD
.CRT$XCU:00000DE0 ; ===========================================================================
.CRT$XCU:00000DE0
.CRT$XCU:00000DE0 ; Segment type: Pure data
.CRT$XCU:00000DE0 ; Segment permissions: Read
.CRT$XCU:00000DE0 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00000DE0                 assume cs:_CRT$XCU
.CRT$XCU:00000DE0                 ;org 0DE0h
.CRT$XCU:00000DE0 _g_RegisterCodec$initializer$ dd offset ??__Eg_RegisterCodec@@YAXXZ ; `dynamic initializer for 'g_RegisterCodec''(void)
.CRT$XCU:00000DE0 _CRT$XCU        ends
.CRT$XCU:00000DE0
UNDEF:00000DF0 ; ===========================================================================
UNDEF:00000DF0
UNDEF:00000DF0 ; Segment type: Externs
UNDEF:00000DF0 ; UNDEF
UNDEF:00000DF0 ; void __cdecl operator delete(void *)
UNDEF:00000DF0                 extrn ??3@YAXPAX@Z:near ; CODE XREF: __unwindfunclet$?CreateDec@@YGPAXXZ$0+4p
UNDEF:00000DF0                                         ; __unwindfunclet$?CreateEnc@@YGPAXXZ$0+4p ...
UNDEF:00000DF4 ; void *__cdecl operator new(unsigned int)
UNDEF:00000DF4                 extrn ??2@YAPAXI@Z:near ; CODE XREF: CreateDec(void)+3Fp
UNDEF:00000DF4                                         ; CreateEnc(void)+3Fp
UNDEF:00000DF8                 extrn ___security_cookie:near
UNDEF:00000DF8                                         ; DATA XREF: CreateDec(void)+29r
UNDEF:00000DF8                                         ; CreateEnc(void)+29r ...
UNDEF:00000DFC                 extrn ___CxxFrameHandler3:near
UNDEF:00000DFC                                         ; CODE XREF: __ehhandler$?CreateDec@@YGPAXXZ+16j
UNDEF:00000DFC                                         ; __ehhandler$?CreateEnc@@YGPAXXZ+16j ...
UNDEF:00000E00 ; __fastcall __security_check_cookie(x)
UNDEF:00000E00                 extrn @__security_check_cookie@4:near
UNDEF:00000E00                                         ; CODE XREF: __ehhandler$?CreateDec@@YGPAXXZ+Cp
UNDEF:00000E00                                         ; __ehhandler$?CreateEnc@@YGPAXXZ+Cp ...
UNDEF:00000E04                 extrn __RTC_CheckEsp:near ; CODE XREF: CreateDec(void)+8Bp
UNDEF:00000E04                                         ; CreateEnc(void)+8Bp ...
UNDEF:00000E08                 extrn __RTC_Shutdown:near
UNDEF:00000E08                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000E0C                 extrn __RTC_InitBase:near
UNDEF:00000E0C                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000E10 ; __stdcall Ppmd7_Construct(x)
UNDEF:00000E10                 extrn _Ppmd7_Construct@4:near
UNDEF:00000E10                                         ; CODE XREF: NCompress::NPpmd::CDecoder::CDecoder(void)+F0p
UNDEF:00000E14 ; __stdcall Ppmd7z_RangeDec_CreateVTable(x)
UNDEF:00000E14                 extrn _Ppmd7z_RangeDec_CreateVTable@4:near
UNDEF:00000E14                                         ; CODE XREF: NCompress::NPpmd::CDecoder::CDecoder(void)+D8p
UNDEF:00000E18 ; _DWORD __thiscall CByteInBufWrap::CByteInBufWrap(CByteInBufWrap *__hidden this)
UNDEF:00000E18                 extrn ??0CByteInBufWrap@@QAE@XZ:near
UNDEF:00000E18                                         ; CODE XREF: NCompress::NPpmd::CDecoder::CDecoder(void)+ADp
UNDEF:00000E1C ; const type_info::`vftable'
UNDEF:00000E1C                 extrn ??_7type_info@@6B@:near
UNDEF:00000E1C                                         ; DATA XREF: .data:NCompress::NPpmd::CDecoder `RTTI Type Descriptor'o
UNDEF:00000E1C                                         ; .data:ICompressCoder `RTTI Type Descriptor'o ...
UNDEF:00000E20 ; public: virtual long __stdcall NCompress::NPpmd::CDecoder::Code(struct ISequentialInStream *, struct ISequentialOutStream *, unsigned __int64 const *, unsigned __int64 const *, struct ICompressProgressInfo *)
UNDEF:00000E20                 extrn ?Code@CDecoder@NPpmd@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z:near
UNDEF:00000E20                                         ; DATA XREF: .rdata:000003ACo
UNDEF:00000E24 ; public: virtual long __stdcall NCompress::NPpmd::CDecoder::SetDecoderProperties2(unsigned char const *, unsigned int)
UNDEF:00000E24                 extrn ?SetDecoderProperties2@CDecoder@NPpmd@NCompress@@UAGJPBEI@Z:near
UNDEF:00000E24                                         ; DATA XREF: .rdata:00000398o
UNDEF:00000E28 ; public: virtual long __stdcall NCompress::NPpmd::CDecoder::SetInStream(struct ISequentialInStream *)
UNDEF:00000E28                 extrn ?SetInStream@CDecoder@NPpmd@NCompress@@UAGJPAUISequentialInStream@@@Z:near
UNDEF:00000E28                                         ; DATA XREF: .rdata:00000380o
UNDEF:00000E2C ; public: virtual long __stdcall NCompress::NPpmd::CDecoder::ReleaseInStream(void)
UNDEF:00000E2C                 extrn ?ReleaseInStream@CDecoder@NPpmd@NCompress@@UAGJXZ:near
UNDEF:00000E2C                                         ; DATA XREF: .rdata:00000384o
UNDEF:00000E30 ; public: virtual long __stdcall NCompress::NPpmd::CDecoder::SetOutStreamSize(unsigned __int64 const *)
UNDEF:00000E30                 extrn ?SetOutStreamSize@CDecoder@NPpmd@NCompress@@UAGJPB_K@Z:near
UNDEF:00000E30                                         ; DATA XREF: .rdata:0000036Co
UNDEF:00000E34 ; public: virtual long __stdcall NCompress::NPpmd::CDecoder::Read(void *, unsigned int, unsigned int *)
UNDEF:00000E34                 extrn ?Read@CDecoder@NPpmd@NCompress@@UAGJPAXIPAI@Z:near
UNDEF:00000E34                                         ; DATA XREF: .rdata:00000358o
UNDEF:00000E38 ; void __thiscall CByteInBufWrap::Free(CByteInBufWrap *__hidden this)
UNDEF:00000E38                 extrn ?Free@CByteInBufWrap@@QAEXXZ:near
UNDEF:00000E38                                         ; CODE XREF: CByteInBufWrap::~CByteInBufWrap(void)+11p
UNDEF:00000E3C                 extrn _IID_ISequentialInStream:near
UNDEF:00000E3C                                         ; DATA XREF: NCompress::NPpmd::CDecoder::QueryInterface(_GUID const &,void * *):loc_991o
UNDEF:00000E40                 extrn _IID_ICompressSetOutStreamSize:near
UNDEF:00000E40                                         ; DATA XREF: NCompress::NPpmd::CDecoder::QueryInterface(_GUID const &,void * *):loc_95Do
UNDEF:00000E44                 extrn _IID_ICompressSetInStream:near
UNDEF:00000E44                                         ; DATA XREF: NCompress::NPpmd::CDecoder::QueryInterface(_GUID const &,void * *):loc_929o
UNDEF:00000E48                 extrn _IID_ICompressSetDecoderProperties2:near
UNDEF:00000E48                                         ; DATA XREF: NCompress::NPpmd::CDecoder::QueryInterface(_GUID const &,void * *):loc_8F2o
UNDEF:00000E4C ; const IID IID_IUnknown
UNDEF:00000E4C                 extrn _IID_IUnknown:near
UNDEF:00000E4C                                         ; DATA XREF: NCompress::NPpmd::CDecoder::QueryInterface(_GUID const &,void * *)+23o
UNDEF:00000E50 ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:00000E50                 extrn _memcmp:near      ; CODE XREF: IsEqualGUID(x,x)+Dp
UNDEF:00000E54 ; _DWORD __thiscall NCompress::NPpmd::CDecoder::~CDecoder(NCompress::NPpmd::CDecoder *__hidden this)
UNDEF:00000E54                 extrn ??1CDecoder@NPpmd@NCompress@@QAE@XZ:near
UNDEF:00000E54                                         ; CODE XREF: NCompress::NPpmd::CDecoder::`scalar deleting destructor'(uint)+11p
UNDEF:00000E58                 extrn __purecall:near   ; DATA XREF: .rdata:const ICompressCoder::`vftable'o
UNDEF:00000E58                                         ; .rdata:00000B4Co ...
UNDEF:00000E5C ; _DWORD __thiscall NCompress::NPpmd::CEncoder::CEncoder(NCompress::NPpmd::CEncoder *__hidden this)
UNDEF:00000E5C                 extrn ??0CEncoder@NPpmd@NCompress@@QAE@XZ:near
UNDEF:00000E5C                                         ; CODE XREF: CreateEnc(void)+5Ap
UNDEF:00000E60 ; void __stdcall RegisterCodec(const struct CCodecInfo *)
UNDEF:00000E60                 extrn ?RegisterCodec@@YGXPBUCCodecInfo@@@Z:near
UNDEF:00000E60                                         ; CODE XREF: CRegisterCodecPPMD::CRegisterCodecPPMD(void)+13p
UNDEF:00000E60
UNDEF:00000E60