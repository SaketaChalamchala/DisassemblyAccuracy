.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : 92861B9080E15535680DEB7C76230898
.text:00000000 ; Input CRC32 : BCDF91B4
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\ZipIn.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; void __thiscall NArchive::NZip::CEcd::Parse(NArchive::NZip::CEcd *this, const unsigned __int8 *)
.text:00000000                 public ?Parse@CEcd@NZip@NArchive@@QAEXPBE@Z
.text:00000000 ?Parse@CEcd@NZip@NArchive@@QAEXPBE@Z proc near
.text:00000000                                         ; CODE XREF: IsArc_Zip(x,x)+90p
.text:00000000                                         ; NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+10Bp ...
.text:00000000
.text:00000000 var_4           = dword ptr -4
.text:00000000 arg_0           = dword ptr  8
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 push    ecx
.text:00000004                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000000B                 mov     [ebp+var_4], ecx
.text:0000000E                 mov     eax, [ebp+var_4]
.text:00000011                 mov     ecx, [ebp+arg_0]
.text:00000014                 mov     dx, [ecx]
.text:00000017                 mov     [eax], dx
.text:0000001A                 mov     eax, [ebp+var_4]
.text:0000001D                 mov     ecx, [ebp+arg_0]
.text:00000020                 mov     dx, [ecx+2]
.text:00000024                 mov     [eax+2], dx
.text:00000028                 mov     eax, [ebp+var_4]
.text:0000002B                 mov     ecx, [ebp+arg_0]
.text:0000002E                 mov     dx, [ecx+4]
.text:00000032                 mov     [eax+4], dx
.text:00000036                 mov     eax, [ebp+var_4]
.text:00000039                 mov     ecx, [ebp+arg_0]
.text:0000003C                 mov     dx, [ecx+6]
.text:00000040
.text:00000040 loc_40:                                 ; DATA XREF: .xdata$x:__catchsym$?ReadLocalItemAfterCdItem@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z$3o
.text:00000040                                         ; .xdata$x:__catchsym$?ReadLocalItemAfterCdItemFull@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z$2o ...
.text:00000040                 mov     [eax+6], dx
.text:00000044                 mov     eax, [ebp+var_4]
.text:00000047                 mov     ecx, [ebp+arg_0]
.text:0000004A                 mov     edx, [ecx+8]
.text:0000004D                 mov     [eax+8], edx
.text:00000050                 mov     eax, [ebp+var_4]
.text:00000053                 mov     ecx, [ebp+arg_0]
.text:00000056                 mov     edx, [ecx+0Ch]
.text:00000059                 mov     [eax+0Ch], edx
.text:0000005C                 mov     eax, [ebp+var_4]
.text:0000005F                 mov     ecx, [ebp+arg_0]
.text:00000062                 mov     dx, [ecx+10h]
.text:00000066
.text:00000066 loc_66:                                 ; DATA XREF: .text:00004050o
.text:00000066                 mov     [eax+10h], dx
.text:0000006A                 mov     esp, ebp
.text:0000006C                 pop     ebp
.text:0000006D                 retn    4
.text:0000006D ?Parse@CEcd@NZip@NArchive@@QAEXPBE@Z endp
.text:0000006D
.text:00000070
.text:00000070 ; =============== S U B R O U T I N E =======================================
.text:00000070
.text:00000070 ; Attributes: bp-based frame
.text:00000070
.text:00000070 ; void __thiscall NArchive::NZip::CEcd64::Parse(NArchive::NZip::CEcd64 *this, const unsigned __int8 *)
.text:00000070                 public ?Parse@CEcd64@NZip@NArchive@@QAEXPBE@Z
.text:00000070 ?Parse@CEcd64@NZip@NArchive@@QAEXPBE@Z proc near
.text:00000070                                         ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+7C6p
.text:00000070
.text:00000070 var_4           = dword ptr -4
.text:00000070 arg_0           = dword ptr  8
.text:00000070
.text:00000070                 push    ebp
.text:00000071                 mov     ebp, esp
.text:00000073                 push    ecx
.text:00000074                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000007B                 mov     [ebp+var_4], ecx
.text:0000007E                 mov     eax, [ebp+var_4]
.text:00000081                 mov     ecx, [ebp+arg_0]
.text:00000084                 mov     dx, [ecx]
.text:00000087                 mov     [eax], dx
.text:0000008A                 mov     eax, [ebp+var_4]
.text:0000008D                 mov     ecx, [ebp+arg_0]
.text:00000090                 mov     dx, [ecx+2]
.text:00000094                 mov     [eax+2], dx
.text:00000098                 mov     eax, [ebp+var_4]
.text:0000009B                 mov     ecx, [ebp+arg_0]
.text:0000009E                 mov     edx, [ecx+4]
.text:000000A1                 mov     [eax+4], edx
.text:000000A4                 mov     eax, [ebp+var_4]
.text:000000A7                 mov     ecx, [ebp+arg_0]
.text:000000AA                 mov     edx, [ecx+8]
.text:000000AD                 mov     [eax+8], edx
.text:000000B0                 mov     eax, [ebp+var_4]
.text:000000B3                 mov     ecx, [ebp+arg_0]
.text:000000B6                 mov     edx, [ecx+0Ch]
.text:000000B9                 mov     [eax+10h], edx
.text:000000BC                 mov     ecx, [ecx+10h]
.text:000000BF                 mov     [eax+14h], ecx
.text:000000C2                 mov     edx, [ebp+var_4]
.text:000000C5                 mov     eax, [ebp+arg_0]
.text:000000C8                 mov     ecx, [eax+14h]
.text:000000CB                 mov     [edx+18h], ecx
.text:000000CE                 mov     eax, [eax+18h]
.text:000000D1                 mov     [edx+1Ch], eax
.text:000000D4                 mov     ecx, [ebp+var_4]
.text:000000D7                 mov     edx, [ebp+arg_0]
.text:000000DA                 mov     eax, [edx+1Ch]
.text:000000DD                 mov     [ecx+20h], eax
.text:000000E0                 mov     edx, [edx+20h]
.text:000000E3                 mov     [ecx+24h], edx
.text:000000E6                 mov     eax, [ebp+var_4]
.text:000000E9                 mov     ecx, [ebp+arg_0]
.text:000000EC                 mov     edx, [ecx+24h]
.text:000000EF                 mov     [eax+28h], edx
.text:000000F2                 mov     ecx, [ecx+28h]
.text:000000F5                 mov     [eax+2Ch], ecx
.text:000000F8                 mov     esp, ebp
.text:000000FA                 pop     ebp
.text:000000FB                 retn    4
.text:000000FB ?Parse@CEcd64@NZip@NArchive@@QAEXPBE@Z endp
.text:000000FB
.text:000000FB ; ---------------------------------------------------------------------------
.text:000000FE                 align 10h
.text:00000100
.text:00000100 ; =============== S U B R O U T I N E =======================================
.text:00000100
.text:00000100 ; Attributes: bp-based frame
.text:00000100
.text:00000100 ; __int32 __thiscall NArchive::NZip::CInArchive::Open(NArchive::NZip::CInArchive *this, struct IInStream *, const unsigned __int64 *)
.text:00000100                 public ?Open@CInArchive@NZip@NArchive@@QAEJPAUIInStream@@PB_K@Z
.text:00000100 ?Open@CInArchive@NZip@NArchive@@QAEJPAUIInStream@@PB_K@Z proc near
.text:00000100
.text:00000100 var_18          = dword ptr -18h
.text:00000100 var_14          = dword ptr -14h
.text:00000100 var_10          = dword ptr -10h
.text:00000100 var_C           = dword ptr -0Ch
.text:00000100 var_8           = dword ptr -8
.text:00000100 var_4           = dword ptr -4
.text:00000100 arg_0           = dword ptr  8
.text:00000100 arg_4           = dword ptr  0Ch
.text:00000100
.text:00000100                 push    ebp
.text:00000101                 mov     ebp, esp
.text:00000103                 sub     esp, 18h
.text:00000106                 push    esi
.text:00000107                 mov     eax, 0CCCCCCCCh
.text:0000010C                 mov     [ebp+var_18], eax
.text:0000010F                 mov     [ebp+var_14], eax
.text:00000112                 mov     [ebp+var_10], eax
.text:00000115                 mov     [ebp+var_C], eax
.text:00000118                 mov     [ebp+var_8], eax
.text:0000011B                 mov     [ebp+var_4], eax
.text:0000011E                 mov     [ebp+var_4], ecx
.text:00000121                 mov     eax, [ebp+var_4]
.text:00000124                 mov     byte ptr [eax+28h], 0
.text:00000128                 mov     ecx, [ebp+var_4] ; this
.text:0000012B                 call    ?Close@CInArchive@NZip@NArchive@@QAEXXZ ; NArchive::NZip::CInArchive::Close(void)
.text:00000130                 mov     ecx, [ebp+var_4]
.text:00000133                 add     ecx, 30h ; '0'
.text:00000136                 mov     esi, esp
.text:00000138                 push    ecx
.text:00000139                 push    1
.text:0000013B                 push    0
.text:0000013D                 push    0
.text:0000013F                 mov     edx, [ebp+arg_0]
.text:00000142                 mov     eax, [edx]
.text:00000144                 mov     ecx, [ebp+arg_0]
.text:00000147                 push    ecx
.text:00000148                 mov     edx, [eax+10h]
.text:0000014B                 call    edx
.text:0000014D                 cmp     esi, esp
.text:0000014F                 call    __RTC_CheckEsp
.text:00000154                 mov     [ebp+var_8], eax
.text:00000157                 cmp     [ebp+var_8], 0
.text:0000015B                 jz      short loc_165
.text:0000015D                 mov     eax, [ebp+var_8]
.text:00000160                 jmp     loc_234
.text:00000165 ; ---------------------------------------------------------------------------
.text:00000165
.text:00000165 loc_165:                                ; CODE XREF: NArchive::NZip::CInArchive::Open(IInStream *,unsigned __int64 const *)+5Bj
.text:00000165                 mov     eax, [ebp+var_4]
.text:00000168                 add     eax, 58h ; 'X'
.text:0000016B                 mov     esi, esp
.text:0000016D                 push    eax
.text:0000016E                 push    2
.text:00000170                 push    0
.text:00000172                 push    0
.text:00000174                 mov     ecx, [ebp+arg_0]
.text:00000177                 mov     edx, [ecx]
.text:00000179                 mov     eax, [ebp+arg_0]
.text:0000017C                 push    eax
.text:0000017D                 mov     ecx, [edx+10h]
.text:00000180                 call    ecx
.text:00000182                 cmp     esi, esp
.text:00000184                 call    __RTC_CheckEsp
.text:00000189                 mov     [ebp+var_C], eax
.text:0000018C                 cmp     [ebp+var_C], 0
.text:00000190                 jz      short loc_19A
.text:00000192                 mov     eax, [ebp+var_C]
.text:00000195                 jmp     loc_234
.text:0000019A ; ---------------------------------------------------------------------------
.text:0000019A
.text:0000019A loc_19A:                                ; CODE XREF: NArchive::NZip::CInArchive::Open(IInStream *,unsigned __int64 const *)+90j
.text:0000019A                 mov     esi, esp
.text:0000019C                 push    0
.text:0000019E                 push    0
.text:000001A0                 mov     edx, [ebp+var_4]
.text:000001A3                 mov     eax, [edx+34h]
.text:000001A6                 push    eax
.text:000001A7                 mov     ecx, [edx+30h]
.text:000001AA                 push    ecx
.text:000001AB                 mov     edx, [ebp+arg_0]
.text:000001AE                 mov     eax, [edx]
.text:000001B0                 mov     ecx, [ebp+arg_0]
.text:000001B3                 push    ecx
.text:000001B4                 mov     edx, [eax+10h]
.text:000001B7                 call    edx
.text:000001B9                 cmp     esi, esp
.text:000001BB                 call    __RTC_CheckEsp
.text:000001C0                 mov     [ebp+var_10], eax
.text:000001C3                 cmp     [ebp+var_10], 0
.text:000001C7                 jz      short loc_1CE
.text:000001C9                 mov     eax, [ebp+var_10]
.text:000001CC                 jmp     short loc_234
.text:000001CE ; ---------------------------------------------------------------------------
.text:000001CE
.text:000001CE loc_1CE:                                ; CODE XREF: NArchive::NZip::CInArchive::Open(IInStream *,unsigned __int64 const *)+C7j
.text:000001CE                 mov     eax, [ebp+arg_4]
.text:000001D1                 push    eax             ; unsigned __int64 *
.text:000001D2                 mov     ecx, [ebp+arg_0]
.text:000001D5                 push    ecx             ; struct IInStream *
.text:000001D6                 mov     ecx, [ebp+var_4] ; this
.text:000001D9                 call    ?FindAndReadMarker@CInArchive@NZip@NArchive@@AAEJPAUIInStream@@PB_K@Z ; NArchive::NZip::CInArchive::FindAndReadMarker(IInStream *,unsigned __int64 const *)
.text:000001DE                 mov     [ebp+var_14], eax
.text:000001E1                 cmp     [ebp+var_14], 0
.text:000001E5                 jz      short loc_1EC
.text:000001E7                 mov     eax, [ebp+var_14]
.text:000001EA                 jmp     short loc_234
.text:000001EC ; ---------------------------------------------------------------------------
.text:000001EC
.text:000001EC loc_1EC:                                ; CODE XREF: NArchive::NZip::CInArchive::Open(IInStream *,unsigned __int64 const *)+E5j
.text:000001EC                 mov     esi, esp
.text:000001EE                 push    0
.text:000001F0                 push    0
.text:000001F2                 mov     edx, [ebp+var_4]
.text:000001F5                 mov     eax, [edx+34h]
.text:000001F8                 push    eax
.text:000001F9                 mov     ecx, [edx+30h]
.text:000001FC                 push    ecx
.text:000001FD                 mov     edx, [ebp+arg_0]
.text:00000200                 mov     eax, [edx]
.text:00000202                 mov     ecx, [ebp+arg_0]
.text:00000205                 push    ecx
.text:00000206                 mov     edx, [eax+10h]
.text:00000209                 call    edx
.text:0000020B                 cmp     esi, esp
.text:0000020D                 call    __RTC_CheckEsp
.text:00000212                 mov     [ebp+var_18], eax
.text:00000215                 cmp     [ebp+var_18], 0
.text:00000219                 jz      short loc_220
.text:0000021B                 mov     eax, [ebp+var_18]
.text:0000021E                 jmp     short loc_234
.text:00000220 ; ---------------------------------------------------------------------------
.text:00000220
.text:00000220 loc_220:                                ; CODE XREF: NArchive::NZip::CInArchive::Open(IInStream *,unsigned __int64 const *)+119j
.text:00000220                 mov     eax, [ebp+arg_0]
.text:00000223                 push    eax
.text:00000224                 mov     ecx, [ebp+var_4]
.text:00000227                 add     ecx, 80h ; 'Ç'
.text:0000022D                 call    ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ; CMyComPtr<IInStream>::operator=(IInStream *)
.text:00000232                 xor     eax, eax
.text:00000234
.text:00000234 loc_234:                                ; CODE XREF: NArchive::NZip::CInArchive::Open(IInStream *,unsigned __int64 const *)+60j
.text:00000234                                         ; NArchive::NZip::CInArchive::Open(IInStream *,unsigned __int64 const *)+95j ...
.text:00000234                 pop     esi
.text:00000235                 add     esp, 18h
.text:00000238                 cmp     ebp, esp
.text:0000023A                 call    __RTC_CheckEsp
.text:0000023F                 mov     esp, ebp
.text:00000241                 pop     ebp
.text:00000242                 retn    8
.text:00000242 ?Open@CInArchive@NZip@NArchive@@QAEJPAUIInStream@@PB_K@Z endp
.text:00000242
.text:00000242 ; ---------------------------------------------------------------------------
.text:00000245                 align 10h
.text:00000250
.text:00000250 ; =============== S U B R O U T I N E =======================================
.text:00000250
.text:00000250 ; Attributes: bp-based frame
.text:00000250
.text:00000250 ; void __thiscall NArchive::NZip::CInArchive::Close(NArchive::NZip::CInArchive *__hidden this)
.text:00000250                 public ?Close@CInArchive@NZip@NArchive@@QAEXXZ
.text:00000250 ?Close@CInArchive@NZip@NArchive@@QAEXXZ proc near
.text:00000250                                         ; CODE XREF: NArchive::NZip::CInArchive::Open(IInStream *,unsigned __int64 const *)+2Bp
.text:00000250
.text:00000250 var_4           = dword ptr -4
.text:00000250
.text:00000250                 push    ebp
.text:00000251                 mov     ebp, esp
.text:00000253                 push    ecx
.text:00000254                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000025B                 mov     [ebp+var_4], ecx
.text:0000025E                 mov     eax, [ebp+var_4]
.text:00000261                 mov     byte ptr [eax+78h], 0
.text:00000265                 mov     ecx, [ebp+var_4]
.text:00000268                 mov     byte ptr [ecx+7Ah], 0
.text:0000026C                 mov     edx, [ebp+var_4]
.text:0000026F                 mov     byte ptr [edx+7Bh], 0
.text:00000273                 mov     eax, [ebp+var_4]
.text:00000276                 mov     byte ptr [eax+7Ch], 0
.text:0000027A                 mov     ecx, [ebp+var_4]
.text:0000027D                 mov     byte ptr [ecx+7Dh], 0
.text:00000281                 mov     edx, [ebp+var_4]
.text:00000284                 mov     byte ptr [edx+7Eh], 0
.text:00000288                 mov     eax, [ebp+var_4]
.text:0000028B                 mov     byte ptr [eax+79h], 0
.text:0000028F                 mov     ecx, [ebp+var_4]
.text:00000292                 add     ecx, 80h ; 'Ç'
.text:00000298                 call    ?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ ; CMyComPtr<IInStream>::Release(void)
.text:0000029D                 add     esp, 4
.text:000002A0                 cmp     ebp, esp
.text:000002A2                 call    __RTC_CheckEsp
.text:000002A7                 mov     esp, ebp
.text:000002A9                 pop     ebp
.text:000002AA                 retn
.text:000002AA ?Close@CInArchive@NZip@NArchive@@QAEXXZ endp
.text:000002AA
.text:000002AA ; ---------------------------------------------------------------------------
.text:000002AB                 align 10h
.text:000002B0
.text:000002B0 ; =============== S U B R O U T I N E =======================================
.text:000002B0
.text:000002B0 ; Attributes: bp-based frame
.text:000002B0
.text:000002B0 ; __int32 __thiscall NArchive::NZip::CInArchive::Seek(NArchive::NZip::CInArchive *this, unsigned __int64)
.text:000002B0                 public ?Seek@CInArchive@NZip@NArchive@@AAEJ_K@Z
.text:000002B0 ?Seek@CInArchive@NZip@NArchive@@AAEJ_K@Z proc near
.text:000002B0                                         ; CODE XREF: NArchive::NZip::CInArchive::ReadLocalItemAfterCdItem(NArchive::NZip::CItemEx &)+BDp
.text:000002B0                                         ; NArchive::NZip::CInArchive::ReadLocalItemAfterCdItemFull(NArchive::NZip::CItemEx &)+BEp ...
.text:000002B0
.text:000002B0 var_8           = dword ptr -8
.text:000002B0 var_4           = dword ptr -4
.text:000002B0 arg_0           = qword ptr  8
.text:000002B0
.text:000002B0                 push    ebp
.text:000002B1                 mov     ebp, esp
.text:000002B3                 sub     esp, 8
.text:000002B6                 push    esi
.text:000002B7                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000002BE                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000002C5                 mov     [ebp+var_4], ecx
.text:000002C8                 mov     ecx, [ebp+var_4]
.text:000002CB                 add     ecx, 80h ; 'Ç'
.text:000002D1                 call    ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->(void)
.text:000002D6                 mov     [ebp+var_8], eax
.text:000002D9                 mov     esi, esp
.text:000002DB                 push    0
.text:000002DD                 push    0
.text:000002DF                 mov     eax, dword ptr [ebp+arg_0+4]
.text:000002E2                 push    eax
.text:000002E3                 mov     ecx, dword ptr [ebp+arg_0]
.text:000002E6                 push    ecx
.text:000002E7                 mov     edx, [ebp+var_8]
.text:000002EA                 push    edx
.text:000002EB                 mov     eax, [ebp+var_8]
.text:000002EE                 mov     ecx, [eax]
.text:000002F0                 mov     edx, [ecx+10h]
.text:000002F3                 call    edx
.text:000002F5                 cmp     esi, esp
.text:000002F7                 call    __RTC_CheckEsp
.text:000002FC                 pop     esi
.text:000002FD                 add     esp, 8
.text:00000300                 cmp     ebp, esp
.text:00000302                 call    __RTC_CheckEsp
.text:00000307                 mov     esp, ebp
.text:00000309                 pop     ebp
.text:0000030A                 retn    8
.text:0000030A ?Seek@CInArchive@NZip@NArchive@@AAEJ_K@Z endp
.text:0000030A
.text:0000030A ; ---------------------------------------------------------------------------
.text:0000030D                 align 10h
.text:00000310
.text:00000310 ; =============== S U B R O U T I N E =======================================
.text:00000310
.text:00000310 ; Attributes: bp-based frame
.text:00000310
.text:00000310 ; __stdcall IsArc_Zip(x, x)
.text:00000310                 public _IsArc_Zip@8
.text:00000310 _IsArc_Zip@8    proc near               ; CODE XREF: NArchive::NZip::IsArc_Zip_2(uchar const *,uint,bool)+13p
.text:00000310
.text:00000310 var_48          = dword ptr -48h
.text:00000310 var_44          = dword ptr -44h
.text:00000310 var_40          = dword ptr -40h
.text:00000310 var_3C          = dword ptr -3Ch
.text:00000310 var_38          = dword ptr -38h
.text:00000310 var_34          = dword ptr -34h
.text:00000310 var_30          = dword ptr -30h
.text:00000310 var_2C          = dword ptr -2Ch
.text:00000310 var_28          = dword ptr -28h
.text:00000310 var_20          = byte ptr -20h
.text:00000310 var_8           = dword ptr -8
.text:00000310 var_4           = dword ptr -4
.text:00000310 arg_0           = dword ptr  8
.text:00000310 arg_4           = dword ptr  0Ch
.text:00000310
.text:00000310                 push    ebp
.text:00000311                 mov     ebp, esp
.text:00000313                 sub     esp, 48h
.text:00000316                 push    edi
.text:00000317                 lea     edi, [ebp+var_48]
.text:0000031A                 mov     ecx, 12h
.text:0000031F                 mov     eax, 0CCCCCCCCh
.text:00000324                 rep stosd
.text:00000326                 mov     eax, dword ptr ds:___security_cookie
.text:0000032B                 xor     eax, ebp
.text:0000032D                 mov     [ebp+var_4], eax
.text:00000330                 cmp     [ebp+arg_4], 8
.text:00000334                 jnb     short loc_340
.text:00000336                 mov     eax, 2
.text:0000033B                 jmp     loc_567
.text:00000340 ; ---------------------------------------------------------------------------
.text:00000340
.text:00000340 loc_340:                                ; CODE XREF: IsArc_Zip(x,x)+24j
.text:00000340                 mov     eax, [ebp+arg_0]
.text:00000343                 movzx   ecx, byte ptr [eax]
.text:00000346                 cmp     ecx, 50h ; 'P'
.text:00000349                 jz      short loc_352
.text:0000034B                 xor     eax, eax
.text:0000034D                 jmp     loc_567
.text:00000352 ; ---------------------------------------------------------------------------
.text:00000352
.text:00000352 loc_352:                                ; CODE XREF: IsArc_Zip(x,x)+39j
.text:00000352                 mov     edx, [ebp+arg_0]
.text:00000355                 mov     eax, [edx]
.text:00000357                 mov     [ebp+var_8], eax
.text:0000035A                 cmp     [ebp+var_8], 30304B50h
.text:00000361                 jnz     short loc_375
.text:00000363                 mov     ecx, [ebp+arg_0]
.text:00000366                 add     ecx, 4
.text:00000369                 mov     [ebp+arg_0], ecx
.text:0000036C                 mov     edx, [ebp+arg_4]
.text:0000036F                 sub     edx, 4
.text:00000372                 mov     [ebp+arg_4], edx
.text:00000375
.text:00000375 loc_375:                                ; CODE XREF: IsArc_Zip(x,x)+51j
.text:00000375                 mov     eax, [ebp+arg_0]
.text:00000378                 mov     ecx, [eax]
.text:0000037A                 mov     [ebp+var_8], ecx
.text:0000037D                 cmp     [ebp+var_8], 6054B50h
.text:00000384                 jnz     short loc_3C5
.text:00000386                 cmp     [ebp+arg_4], 16h
.text:0000038A                 jnb     short loc_396
.text:0000038C                 mov     eax, 2
.text:00000391                 jmp     loc_567
.text:00000396 ; ---------------------------------------------------------------------------
.text:00000396
.text:00000396 loc_396:                                ; CODE XREF: IsArc_Zip(x,x)+7Aj
.text:00000396                 mov     edx, [ebp+arg_0]
.text:00000399                 add     edx, 4
.text:0000039C                 push    edx             ; unsigned __int8 *
.text:0000039D                 lea     ecx, [ebp+var_20] ; this
.text:000003A0                 call    ?Parse@CEcd@NZip@NArchive@@QAEXPBE@Z ; NArchive::NZip::CEcd::Parse(uchar const *)
.text:000003A5                 lea     ecx, [ebp+var_20] ; this
.text:000003A8                 call    ?IsEmptyArc@CEcd@NZip@NArchive@@QAE_NXZ ; NArchive::NZip::CEcd::IsEmptyArc(void)
.text:000003AD                 movzx   eax, al
.text:000003B0                 test    eax, eax
.text:000003B2                 jnz     short loc_3BB
.text:000003B4                 xor     eax, eax
.text:000003B6                 jmp     loc_567
.text:000003BB ; ---------------------------------------------------------------------------
.text:000003BB
.text:000003BB loc_3BB:                                ; CODE XREF: IsArc_Zip(x,x)+A2j
.text:000003BB                 mov     eax, 1
.text:000003C0                 jmp     loc_567
.text:000003C5 ; ---------------------------------------------------------------------------
.text:000003C5
.text:000003C5 loc_3C5:                                ; CODE XREF: IsArc_Zip(x,x)+74j
.text:000003C5                 cmp     [ebp+var_8], 4034B50h
.text:000003CC                 jz      short loc_3D5
.text:000003CE                 xor     eax, eax
.text:000003D0                 jmp     loc_567
.text:000003D5 ; ---------------------------------------------------------------------------
.text:000003D5
.text:000003D5 loc_3D5:                                ; CODE XREF: IsArc_Zip(x,x)+BCj
.text:000003D5                 cmp     [ebp+arg_4], 1Eh
.text:000003D9                 jnb     short loc_3E5
.text:000003DB                 mov     eax, 2
.text:000003E0                 jmp     loc_567
.text:000003E5 ; ---------------------------------------------------------------------------
.text:000003E5
.text:000003E5 loc_3E5:                                ; CODE XREF: IsArc_Zip(x,x)+C9j
.text:000003E5                 mov     ecx, [ebp+arg_0]
.text:000003E8                 add     ecx, 4
.text:000003EB                 mov     [ebp+arg_0], ecx
.text:000003EE                 mov     [ebp+var_28], 1Ah
.text:000003F5                 mov     [ebp+var_2C], 0
.text:000003FC                 jmp     short loc_407
.text:000003FE ; ---------------------------------------------------------------------------
.text:000003FE
.text:000003FE loc_3FE:                                ; CODE XREF: IsArc_Zip(x,x)+10Aj
.text:000003FE                 mov     edx, [ebp+var_2C]
.text:00000401                 add     edx, 1
.text:00000404                 mov     [ebp+var_2C], edx
.text:00000407
.text:00000407 loc_407:                                ; CODE XREF: IsArc_Zip(x,x)+ECj
.text:00000407                 cmp     [ebp+var_2C], 1Ah
.text:0000040B                 jnb     short loc_41C
.text:0000040D                 mov     eax, [ebp+arg_0]
.text:00000410                 add     eax, [ebp+var_2C]
.text:00000413                 movzx   ecx, byte ptr [eax]
.text:00000416                 test    ecx, ecx
.text:00000418                 jnz     short loc_41C
.text:0000041A                 jmp     short loc_3FE
.text:0000041C ; ---------------------------------------------------------------------------
.text:0000041C
.text:0000041C loc_41C:                                ; CODE XREF: IsArc_Zip(x,x)+FBj
.text:0000041C                                         ; IsArc_Zip(x,x)+108j
.text:0000041C                 cmp     [ebp+var_2C], 1Ah
.text:00000420                 jnz     short loc_42C
.text:00000422                 mov     eax, 2
.text:00000427                 jmp     loc_567
.text:0000042C ; ---------------------------------------------------------------------------
.text:0000042C
.text:0000042C loc_42C:                                ; CODE XREF: IsArc_Zip(x,x)+110j
.text:0000042C                 mov     edx, [ebp+arg_0]
.text:0000042F                 movzx   eax, word ptr [edx+16h]
.text:00000433                 mov     [ebp+var_30], eax
.text:00000436                 mov     ecx, [ebp+arg_0]
.text:00000439                 movzx   edx, word ptr [ecx+18h]
.text:0000043D                 mov     [ebp+var_34], edx
.text:00000440                 mov     eax, [ebp+var_30]
.text:00000443                 add     eax, 1Eh
.text:00000446                 mov     [ebp+var_38], eax
.text:00000449                 mov     ecx, [ebp+var_38]
.text:0000044C                 add     ecx, [ebp+var_34]
.text:0000044F                 cmp     ecx, 10000h
.text:00000455                 jbe     short loc_45E
.text:00000457                 xor     eax, eax
.text:00000459                 jmp     loc_567
.text:0000045E ; ---------------------------------------------------------------------------
.text:0000045E
.text:0000045E loc_45E:                                ; CODE XREF: IsArc_Zip(x,x)+145j
.text:0000045E                 mov     edx, [ebp+arg_0]
.text:00000461                 sub     edx, 4
.text:00000464                 mov     [ebp+arg_0], edx
.text:00000467                 mov     eax, [ebp+arg_4]
.text:0000046A                 sub     eax, 1Eh
.text:0000046D                 mov     [ebp+var_3C], eax
.text:00000470                 mov     ecx, [ebp+var_3C]
.text:00000473                 cmp     ecx, [ebp+var_30]
.text:00000476                 jbe     short loc_47E
.text:00000478                 mov     edx, [ebp+var_30]
.text:0000047B                 mov     [ebp+var_3C], edx
.text:0000047E
.text:0000047E loc_47E:                                ; CODE XREF: IsArc_Zip(x,x)+166j
.text:0000047E                 mov     eax, [ebp+arg_0]
.text:00000481                 add     eax, 1Eh
.text:00000484                 mov     [ebp+var_40], eax
.text:00000487                 mov     [ebp+var_44], 0
.text:0000048E                 jmp     short loc_499
.text:00000490 ; ---------------------------------------------------------------------------
.text:00000490
.text:00000490 loc_490:                                ; CODE XREF: IsArc_Zip(x,x):loc_4B5j
.text:00000490                 mov     ecx, [ebp+var_44]
.text:00000493                 add     ecx, 1
.text:00000496                 mov     [ebp+var_44], ecx
.text:00000499
.text:00000499 loc_499:                                ; CODE XREF: IsArc_Zip(x,x)+17Ej
.text:00000499                 mov     edx, [ebp+var_44]
.text:0000049C                 cmp     edx, [ebp+var_3C]
.text:0000049F                 jnb     short loc_4B7
.text:000004A1                 mov     eax, [ebp+var_40]
.text:000004A4                 add     eax, [ebp+var_44]
.text:000004A7                 movzx   ecx, byte ptr [eax]
.text:000004AA                 test    ecx, ecx
.text:000004AC                 jnz     short loc_4B5
.text:000004AE                 xor     eax, eax
.text:000004B0                 jmp     loc_567
.text:000004B5 ; ---------------------------------------------------------------------------
.text:000004B5
.text:000004B5 loc_4B5:                                ; CODE XREF: IsArc_Zip(x,x)+19Cj
.text:000004B5                 jmp     short loc_490
.text:000004B7 ; ---------------------------------------------------------------------------
.text:000004B7
.text:000004B7 loc_4B7:                                ; CODE XREF: IsArc_Zip(x,x)+18Fj
.text:000004B7                 mov     edx, [ebp+arg_4]
.text:000004BA                 cmp     edx, [ebp+var_38]
.text:000004BD                 jnb     short loc_4C9
.text:000004BF                 mov     eax, 2
.text:000004C4                 jmp     loc_567
.text:000004C9 ; ---------------------------------------------------------------------------
.text:000004C9
.text:000004C9 loc_4C9:                                ; CODE XREF: IsArc_Zip(x,x)+1ADj
.text:000004C9                 cmp     [ebp+var_34], 0
.text:000004CD                 jbe     loc_562
.text:000004D3                 mov     eax, [ebp+arg_0]
.text:000004D6                 add     eax, [ebp+var_38]
.text:000004D9                 mov     [ebp+arg_0], eax
.text:000004DC                 mov     ecx, [ebp+arg_4]
.text:000004DF                 sub     ecx, [ebp+var_38]
.text:000004E2                 mov     [ebp+arg_4], ecx
.text:000004E5
.text:000004E5 loc_4E5:                                ; CODE XREF: IsArc_Zip(x,x)+250j
.text:000004E5                 cmp     [ebp+var_34], 0
.text:000004E9                 jz      short loc_562
.text:000004EB                 cmp     [ebp+var_34], 4
.text:000004EF                 jnb     short loc_4F8
.text:000004F1                 mov     eax, 1
.text:000004F6                 jmp     short loc_567
.text:000004F8 ; ---------------------------------------------------------------------------
.text:000004F8
.text:000004F8 loc_4F8:                                ; CODE XREF: IsArc_Zip(x,x)+1DFj
.text:000004F8                 cmp     [ebp+arg_4], 4
.text:000004FC                 jnb     short loc_505
.text:000004FE                 mov     eax, 2
.text:00000503                 jmp     short loc_567
.text:00000505 ; ---------------------------------------------------------------------------
.text:00000505
.text:00000505 loc_505:                                ; CODE XREF: IsArc_Zip(x,x)+1ECj
.text:00000505                 mov     edx, [ebp+arg_0]
.text:00000508                 movzx   eax, word ptr [edx+2]
.text:0000050C                 mov     [ebp+var_48], eax
.text:0000050F                 mov     ecx, [ebp+arg_4]
.text:00000512                 sub     ecx, 4
.text:00000515                 mov     [ebp+arg_4], ecx
.text:00000518                 mov     edx, [ebp+var_34]
.text:0000051B                 sub     edx, 4
.text:0000051E                 mov     [ebp+var_34], edx
.text:00000521                 mov     eax, [ebp+arg_0]
.text:00000524                 add     eax, 4
.text:00000527                 mov     [ebp+arg_0], eax
.text:0000052A                 mov     ecx, [ebp+var_48]
.text:0000052D                 cmp     ecx, [ebp+var_34]
.text:00000530                 jbe     short loc_536
.text:00000532                 xor     eax, eax
.text:00000534                 jmp     short loc_567
.text:00000536 ; ---------------------------------------------------------------------------
.text:00000536
.text:00000536 loc_536:                                ; CODE XREF: IsArc_Zip(x,x)+220j
.text:00000536                 mov     edx, [ebp+var_48]
.text:00000539                 cmp     edx, [ebp+arg_4]
.text:0000053C                 jbe     short loc_545
.text:0000053E                 mov     eax, 2
.text:00000543                 jmp     short loc_567
.text:00000545 ; ---------------------------------------------------------------------------
.text:00000545
.text:00000545 loc_545:                                ; CODE XREF: IsArc_Zip(x,x)+22Cj
.text:00000545                 mov     eax, [ebp+arg_4]
.text:00000548                 sub     eax, [ebp+var_48]
.text:0000054B                 mov     [ebp+arg_4], eax
.text:0000054E                 mov     ecx, [ebp+var_34]
.text:00000551                 sub     ecx, [ebp+var_48]
.text:00000554                 mov     [ebp+var_34], ecx
.text:00000557                 mov     edx, [ebp+arg_0]
.text:0000055A                 add     edx, [ebp+var_48]
.text:0000055D                 mov     [ebp+arg_0], edx
.text:00000560                 jmp     short loc_4E5
.text:00000562 ; ---------------------------------------------------------------------------
.text:00000562
.text:00000562 loc_562:                                ; CODE XREF: IsArc_Zip(x,x)+1BDj
.text:00000562                                         ; IsArc_Zip(x,x)+1D9j
.text:00000562                 mov     eax, 1
.text:00000567
.text:00000567 loc_567:                                ; CODE XREF: IsArc_Zip(x,x)+2Bj
.text:00000567                                         ; IsArc_Zip(x,x)+3Dj ...
.text:00000567                 push    edx
.text:00000568                 mov     ecx, ebp
.text:0000056A                 push    eax
.text:0000056B                 lea     edx, $LN31
.text:00000571                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000576                 pop     eax
.text:00000577                 pop     edx
.text:00000578                 pop     edi
.text:00000579                 mov     ecx, [ebp+var_4]
.text:0000057C                 xor     ecx, ebp
.text:0000057E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000583                 add     esp, 48h
.text:00000586                 cmp     ebp, esp
.text:00000588                 call    __RTC_CheckEsp
.text:0000058D                 mov     esp, ebp
.text:0000058F                 pop     ebp
.text:00000590                 retn    8
.text:00000590 _IsArc_Zip@8    endp
.text:00000590
.text:00000590 ; ---------------------------------------------------------------------------
.text:00000593                 align 4
.text:00000594 $LN31           dd 1                    ; DATA XREF: IsArc_Zip(x,x)+25Bo
.text:00000598                 dd offset $LN30
.text:0000059C $LN30           dd 0FFFFFFE0h, 14h      ; DATA XREF: .text:00000598o
.text:000005A4                 dd offset $LN29
.text:000005A8 $LN29           dd 646365h, 0CCCCCCCCh  ; DATA XREF: .text:000005A4o
.text:000005B0
.text:000005B0 ; =============== S U B R O U T I N E =======================================
.text:000005B0
.text:000005B0 ; Attributes: bp-based frame
.text:000005B0
.text:000005B0 ; __int32 __thiscall NArchive::NZip::CInArchive::FindAndReadMarker(NArchive::NZip::CInArchive *this, struct IInStream *, const unsigned __int64 *)
.text:000005B0                 public ?FindAndReadMarker@CInArchive@NZip@NArchive@@AAEJPAUIInStream@@PB_K@Z
.text:000005B0 ?FindAndReadMarker@CInArchive@NZip@NArchive@@AAEJPAUIInStream@@PB_K@Z proc near
.text:000005B0                                         ; CODE XREF: NArchive::NZip::CInArchive::Open(IInStream *,unsigned __int64 const *)+D9p
.text:000005B0
.text:000005B0 var_AC          = dword ptr -0ACh
.text:000005B0 var_A8          = dword ptr -0A8h
.text:000005B0 var_A4          = dword ptr -0A4h
.text:000005B0 var_A0          = dword ptr -0A0h
.text:000005B0 var_9C          = dword ptr -9Ch
.text:000005B0 var_98          = dword ptr -98h
.text:000005B0 var_94          = dword ptr -94h
.text:000005B0 var_90          = dword ptr -90h
.text:000005B0 var_8C          = dword ptr -8Ch
.text:000005B0 var_88          = dword ptr -88h
.text:000005B0 var_84          = dword ptr -84h
.text:000005B0 var_80          = dword ptr -80h
.text:000005B0 var_7C          = dword ptr -7Ch
.text:000005B0 var_78          = dword ptr -78h
.text:000005B0 var_71          = byte ptr -71h
.text:000005B0 var_70          = dword ptr -70h
.text:000005B0 var_68          = dword ptr -68h
.text:000005B0 var_60          = dword ptr -60h
.text:000005B0 var_5C          = dword ptr -5Ch
.text:000005B0 Size            = dword ptr -58h
.text:000005B0 var_50          = byte ptr -50h
.text:000005B0 var_48          = dword ptr -48h
.text:000005B0 var_44          = dword ptr -44h
.text:000005B0 var_40          = dword ptr -40h
.text:000005B0 var_38          = dword ptr -38h
.text:000005B0 var_30          = dword ptr -30h
.text:000005B0 var_28          = dword ptr -28h
.text:000005B0 var_1C          = dword ptr -1Ch
.text:000005B0 var_14          = dword ptr -14h
.text:000005B0 var_10          = dword ptr -10h
.text:000005B0 var_C           = dword ptr -0Ch
.text:000005B0 var_4           = dword ptr -4
.text:000005B0 arg_0           = dword ptr  8
.text:000005B0 arg_4           = dword ptr  0Ch
.text:000005B0
.text:000005B0                 push    ebp
.text:000005B1                 mov     ebp, esp
.text:000005B3                 push    0FFFFFFFFh
.text:000005B5                 push    offset __ehhandler$?FindAndReadMarker@CInArchive@NZip@NArchive@@AAEJPAUIInStream@@PB_K@Z
.text:000005BA                 mov     eax, large fs:0
.text:000005C0                 push    eax
.text:000005C1                 sub     esp, 0A0h
.text:000005C7                 push    esi
.text:000005C8                 push    edi
.text:000005C9                 push    ecx
.text:000005CA                 lea     edi, [ebp+var_AC]
.text:000005D0                 mov     ecx, 28h ; '('
.text:000005D5                 mov     eax, 0CCCCCCCCh
.text:000005DA                 rep stosd
.text:000005DC                 pop     ecx
.text:000005DD                 mov     eax, dword ptr ds:___security_cookie
.text:000005E2                 xor     eax, ebp
.text:000005E4                 push    eax
.text:000005E5                 lea     eax, [ebp+var_C]
.text:000005E8                 mov     large fs:0, eax
.text:000005EE                 mov     [ebp+var_10], ecx
.text:000005F1                 mov     ecx, [ebp+var_10]
.text:000005F4                 add     ecx, 38h ; '8'  ; this
.text:000005F7                 call    ?Clear@CInArchiveInfo@NZip@NArchive@@QAEXXZ ; NArchive::NZip::CInArchiveInfo::Clear(void)
.text:000005FC                 mov     eax, [ebp+var_10]
.text:000005FF                 mov     ecx, [ebp+var_10]
.text:00000602                 mov     edx, [ecx+30h]
.text:00000605                 mov     [eax+40h], edx
.text:00000608                 mov     ecx, [ecx+34h]
.text:0000060B                 mov     [eax+44h], ecx
.text:0000060E                 mov     edx, [ebp+var_10]
.text:00000611                 mov     eax, [ebp+var_10]
.text:00000614                 mov     ecx, [eax+30h]
.text:00000617                 mov     [edx+48h], ecx
.text:0000061A                 mov     eax, [eax+34h]
.text:0000061D                 mov     [edx+4Ch], eax
.text:00000620                 cmp     [ebp+arg_4], 0
.text:00000624                 jz      loc_77A
.text:0000062A                 mov     ecx, [ebp+arg_4]
.text:0000062D                 mov     [ebp+var_9C], ecx
.text:00000633                 mov     edx, [ebp+var_9C]
.text:00000639                 mov     eax, [ebp+var_9C]
.text:0000063F                 mov     ecx, [edx]
.text:00000641                 or      ecx, [eax+4]
.text:00000644                 jnz     loc_77A
.text:0000064A                 mov     [ebp+var_14], 4
.text:00000651                 mov     [ebp+var_28], 4
.text:00000658                 lea     edx, [ebp+var_28]
.text:0000065B                 push    edx             ; unsigned int *
.text:0000065C                 lea     eax, [ebp+var_1C]
.text:0000065F                 push    eax             ; void *
.text:00000660                 mov     ecx, [ebp+arg_0]
.text:00000663                 push    ecx             ; struct ISequentialInStream *
.text:00000664                 call    ?ReadStream@@YGJPAUISequentialInStream@@PAXPAI@Z ; ReadStream(ISequentialInStream *,void *,uint *)
.text:00000669                 mov     [ebp+var_30], eax
.text:0000066C                 cmp     [ebp+var_30], 0
.text:00000670                 jz      short loc_67A
.text:00000672                 mov     eax, [ebp+var_30]
.text:00000675                 jmp     loc_A95
.text:0000067A ; ---------------------------------------------------------------------------
.text:0000067A
.text:0000067A loc_67A:                                ; CODE XREF: NArchive::NZip::CInArchive::FindAndReadMarker(IInStream *,unsigned __int64 const *)+C0j
.text:0000067A                 mov     edx, [ebp+var_28]
.text:0000067D                 xor     eax, eax
.text:0000067F                 mov     ecx, [ebp+var_10]
.text:00000682                 add     edx, [ecx+30h]
.text:00000685                 adc     eax, [ecx+34h]
.text:00000688                 mov     ecx, [ebp+var_10]
.text:0000068B                 mov     [ecx+30h], edx
.text:0000068E                 mov     [ecx+34h], eax
.text:00000691                 cmp     [ebp+var_28], 4
.text:00000695                 jnb     short loc_6A1
.text:00000697                 mov     eax, 1
.text:0000069C                 jmp     loc_A95
.text:000006A1 ; ---------------------------------------------------------------------------
.text:000006A1
.text:000006A1 loc_6A1:                                ; CODE XREF: NArchive::NZip::CInArchive::FindAndReadMarker(IInStream *,unsigned __int64 const *)+E5j
.text:000006A1                 mov     edx, [ebp+var_10]
.text:000006A4                 mov     eax, [ebp+var_1C]
.text:000006A7                 mov     [edx+2Ch], eax
.text:000006AA                 mov     ecx, [ebp+var_10]
.text:000006AD                 cmp     dword ptr [ecx+2Ch], 6054B50h
.text:000006B4                 jz      loc_773
.text:000006BA                 mov     edx, [ebp+var_10]
.text:000006BD                 cmp     dword ptr [edx+2Ch], 4034B50h
.text:000006C4                 jz      loc_773
.text:000006CA                 mov     eax, [ebp+var_10]
.text:000006CD                 cmp     dword ptr [eax+2Ch], 30304B50h
.text:000006D4                 jz      short loc_6E0
.text:000006D6                 mov     eax, 1
.text:000006DB                 jmp     loc_A95
.text:000006E0 ; ---------------------------------------------------------------------------
.text:000006E0
.text:000006E0 loc_6E0:                                ; CODE XREF: NArchive::NZip::CInArchive::FindAndReadMarker(IInStream *,unsigned __int64 const *)+124j
.text:000006E0                 mov     [ebp+var_38], 4
.text:000006E7                 lea     ecx, [ebp+var_38]
.text:000006EA                 push    ecx             ; unsigned int *
.text:000006EB                 lea     edx, [ebp+var_1C]
.text:000006EE                 push    edx             ; void *
.text:000006EF                 mov     eax, [ebp+arg_0]
.text:000006F2                 push    eax             ; struct ISequentialInStream *
.text:000006F3                 call    ?ReadStream@@YGJPAUISequentialInStream@@PAXPAI@Z ; ReadStream(ISequentialInStream *,void *,uint *)
.text:000006F8                 mov     [ebp+var_40], eax
.text:000006FB                 cmp     [ebp+var_40], 0
.text:000006FF                 jz      short loc_709
.text:00000701                 mov     eax, [ebp+var_40]
.text:00000704                 jmp     loc_A95
.text:00000709 ; ---------------------------------------------------------------------------
.text:00000709
.text:00000709 loc_709:                                ; CODE XREF: NArchive::NZip::CInArchive::FindAndReadMarker(IInStream *,unsigned __int64 const *)+14Fj
.text:00000709                 mov     ecx, [ebp+var_38]
.text:0000070C                 xor     edx, edx
.text:0000070E                 mov     eax, [ebp+var_10]
.text:00000711                 add     ecx, [eax+30h]
.text:00000714                 adc     edx, [eax+34h]
.text:00000717                 mov     eax, [ebp+var_10]
.text:0000071A                 mov     [eax+30h], ecx
.text:0000071D                 mov     [eax+34h], edx
.text:00000720                 cmp     [ebp+var_38], 4
.text:00000724                 jnb     short loc_730
.text:00000726                 mov     eax, 1
.text:0000072B                 jmp     loc_A95
.text:00000730 ; ---------------------------------------------------------------------------
.text:00000730
.text:00000730 loc_730:                                ; CODE XREF: NArchive::NZip::CInArchive::FindAndReadMarker(IInStream *,unsigned __int64 const *)+174j
.text:00000730                 mov     ecx, [ebp+var_10]
.text:00000733                 mov     edx, [ebp+var_1C]
.text:00000736                 mov     [ecx+2Ch], edx
.text:00000739                 mov     eax, [ebp+var_10]
.text:0000073C                 cmp     dword ptr [eax+2Ch], 6054B50h
.text:00000743                 jz      short loc_75B
.text:00000745                 mov     ecx, [ebp+var_10]
.text:00000748                 cmp     dword ptr [ecx+2Ch], 4034B50h
.text:0000074F                 jz      short loc_75B
.text:00000751                 mov     eax, 1
.text:00000756                 jmp     loc_A95
.text:0000075B ; ---------------------------------------------------------------------------
.text:0000075B
.text:0000075B loc_75B:                                ; CODE XREF: NArchive::NZip::CInArchive::FindAndReadMarker(IInStream *,unsigned __int64 const *)+193j
.text:0000075B                                         ; NArchive::NZip::CInArchive::FindAndReadMarker(IInStream *,unsigned __int64 const *)+19Fj
.text:0000075B                 mov     edx, [ebp+var_10]
.text:0000075E                 mov     eax, [edx+48h]
.text:00000761                 add     eax, 4
.text:00000764                 mov     ecx, [edx+4Ch]
.text:00000767                 adc     ecx, 0
.text:0000076A                 mov     edx, [ebp+var_10]
.text:0000076D                 mov     [edx+48h], eax
.text:00000770                 mov     [edx+4Ch], ecx
.text:00000773
.text:00000773 loc_773:                                ; CODE XREF: NArchive::NZip::CInArchive::FindAndReadMarker(IInStream *,unsigned __int64 const *)+104j
.text:00000773                                         ; NArchive::NZip::CInArchive::FindAndReadMarker(IInStream *,unsigned __int64 const *)+114j
.text:00000773                 xor     eax, eax
.text:00000775                 jmp     loc_A95
.text:0000077A ; ---------------------------------------------------------------------------
.text:0000077A
.text:0000077A loc_77A:                                ; CODE XREF: NArchive::NZip::CInArchive::FindAndReadMarker(IInStream *,unsigned __int64 const *)+74j
.text:0000077A                                         ; NArchive::NZip::CInArchive::FindAndReadMarker(IInStream *,unsigned __int64 const *)+94j
.text:0000077A                 mov     [ebp+var_44], 40000h
.text:00000781                 mov     [ebp+var_48], 10000h
.text:00000788                 push    40000h
.text:0000078D                 lea     ecx, [ebp+var_50]
.text:00000790                 call    ??0?$CObjArray@E@@QAE@I@Z ; CObjArray<uchar>::CObjArray<uchar>(uint)
.text:00000795                 mov     [ebp+var_4], 0
.text:0000079C                 mov     [ebp+Size], 0
.text:000007A3                 mov     [ebp+var_60], 0
.text:000007AA                 mov     [ebp+var_5C], 0
.text:000007B1
.text:000007B1 loc_7B1:                                ; CODE XREF: NArchive::NZip::CInArchive::FindAndReadMarker(IInStream *,unsigned __int64 const *)+4C1j
.text:000007B1                 mov     eax, 40000h
.text:000007B6                 sub     eax, [ebp+Size]
.text:000007B9                 mov     [ebp+var_68], eax
.text:000007BC                 lea     ecx, [ebp+var_68]
.text:000007BF                 push    ecx             ; unsigned int *
.text:000007C0                 lea     ecx, [ebp+var_50]
.text:000007C3                 call    ??B?$CObjArray@E@@QAEPAEXZ ; CObjArray<uchar>::operator uchar *(void)
.text:000007C8                 add     eax, [ebp+Size]
.text:000007CB                 push    eax             ; void *
.text:000007CC                 mov     edx, [ebp+arg_0]
.text:000007CF                 push    edx             ; struct ISequentialInStream *
.text:000007D0                 call    ?ReadStream@@YGJPAUISequentialInStream@@PAXPAI@Z ; ReadStream(ISequentialInStream *,void *,uint *)
.text:000007D5                 mov     [ebp+var_70], eax
.text:000007D8                 cmp     [ebp+var_70], 0
.text:000007DC                 jz      short loc_801
.text:000007DE                 mov     eax, [ebp+var_70]
.text:000007E1                 mov     [ebp+var_8C], eax
.text:000007E7                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000007EE                 lea     ecx, [ebp+var_50]
.text:000007F1                 call    ??1?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::~CObjArray<uchar>(void)
.text:000007F6                 mov     eax, [ebp+var_8C]
.text:000007FC                 jmp     loc_A95
.text:00000801 ; ---------------------------------------------------------------------------
.text:00000801
.text:00000801 loc_801:                                ; CODE XREF: NArchive::NZip::CInArchive::FindAndReadMarker(IInStream *,unsigned __int64 const *)+22Cj
.text:00000801                 mov     ecx, [ebp+var_68]
.text:00000804                 xor     edx, edx
.text:00000806                 mov     eax, [ebp+var_10]
.text:00000809                 add     ecx, [eax+30h]
.text:0000080C                 adc     edx, [eax+34h]
.text:0000080F                 mov     eax, [ebp+var_10]
.text:00000812                 mov     [eax+30h], ecx
.text:00000815                 mov     [eax+34h], edx
.text:00000818                 mov     ecx, [ebp+Size]
.text:0000081B                 add     ecx, [ebp+var_68]
.text:0000081E                 mov     [ebp+Size], ecx
.text:00000821                 xor     edx, edx
.text:00000823                 cmp     [ebp+Size], 40000h
.text:0000082A                 setnz   dl
.text:0000082D                 mov     [ebp+var_71], dl
.text:00000830                 movzx   eax, [ebp+var_71]
.text:00000834                 test    eax, eax
.text:00000836                 jz      short loc_843
.text:00000838                 mov     ecx, [ebp+Size]
.text:0000083B                 mov     [ebp+var_A0], ecx
.text:00000841                 jmp     short loc_852
.text:00000843 ; ---------------------------------------------------------------------------
.text:00000843
.text:00000843 loc_843:                                ; CODE XREF: NArchive::NZip::CInArchive::FindAndReadMarker(IInStream *,unsigned __int64 const *)+286j
.text:00000843                 mov     edx, [ebp+Size]
.text:00000846                 sub     edx, 10000h
.text:0000084C                 mov     [ebp+var_A0], edx
.text:00000852
.text:00000852 loc_852:                                ; CODE XREF: NArchive::NZip::CInArchive::FindAndReadMarker(IInStream *,unsigned __int64 const *)+291j
.text:00000852                 mov     eax, [ebp+var_A0]
.text:00000858                 mov     [ebp+var_78], eax
.text:0000085B                 cmp     [ebp+arg_4], 0
.text:0000085F                 jz      short loc_8BB
.text:00000861                 mov     ecx, [ebp+var_78]
.text:00000864                 xor     edx, edx
.text:00000866                 add     ecx, [ebp+var_60]
.text:00000869                 adc     edx, [ebp+var_5C]
.text:0000086C                 mov     eax, [ebp+arg_4]
.text:0000086F                 mov     [ebp+var_A8], ecx
.text:00000875                 mov     [ebp+var_A4], edx
.text:0000087B                 mov     [ebp+var_AC], eax
.text:00000881                 mov     ecx, [ebp+var_AC]
.text:00000887                 mov     edx, [ebp+var_A4]
.text:0000088D                 cmp     edx, [ecx+4]
.text:00000890                 jb      short loc_8BB
.text:00000892                 ja      short loc_8A4
.text:00000894                 mov     eax, [ebp+var_AC]
.text:0000089A                 mov     ecx, [ebp+var_A8]
.text:000008A0                 cmp     ecx, [eax]
.text:000008A2                 jbe     short loc_8BB
.text:000008A4
.text:000008A4 loc_8A4:                                ; CODE XREF: NArchive::NZip::CInArchive::FindAndReadMarker(IInStream *,unsigned __int64 const *)+2E2j
.text:000008A4                 mov     edx, [ebp+arg_4]
.text:000008A7                 mov     eax, [edx]
.text:000008A9                 sub     eax, [ebp+var_60]
.text:000008AC                 mov     ecx, [edx+4]
.text:000008AF                 sbb     ecx, [ebp+var_5C]
.text:000008B2                 add     eax, 1
.text:000008B5                 adc     ecx, 0
.text:000008B8                 mov     [ebp+var_78], eax
.text:000008BB
.text:000008BB loc_8BB:                                ; CODE XREF: NArchive::NZip::CInArchive::FindAndReadMarker(IInStream *,unsigned __int64 const *)+2AFj
.text:000008BB                                         ; NArchive::NZip::CInArchive::FindAndReadMarker(IInStream *,unsigned __int64 const *)+2E0j ...
.text:000008BB                 cmp     [ebp+var_78], 1
.text:000008BF                 jnb     short loc_8C6
.text:000008C1                 jmp     loc_A76
.text:000008C6 ; ---------------------------------------------------------------------------
.text:000008C6
.text:000008C6 loc_8C6:                                ; CODE XREF: NArchive::NZip::CInArchive::FindAndReadMarker(IInStream *,unsigned __int64 const *)+30Fj
.text:000008C6                 lea     ecx, [ebp+var_50]
.text:000008C9                 call    ??B?$CObjArray@E@@QAEPAEXZ ; CObjArray<uchar>::operator uchar *(void)
.text:000008CE                 mov     [ebp+var_7C], eax
.text:000008D1                 mov     [ebp+var_80], 0
.text:000008D8                 jmp     short loc_8E3
.text:000008DA ; ---------------------------------------------------------------------------
.text:000008DA
.text:000008DA loc_8DA:                                ; CODE XREF: NArchive::NZip::CInArchive::FindAndReadMarker(IInStream *,unsigned __int64 const *)+34Dj
.text:000008DA                                         ; NArchive::NZip::CInArchive::FindAndReadMarker(IInStream *,unsigned __int64 const *)+35Ej ...
.text:000008DA                 mov     edx, [ebp+var_80]
.text:000008DD                 add     edx, 1
.text:000008E0                 mov     [ebp+var_80], edx
.text:000008E3
.text:000008E3 loc_8E3:                                ; CODE XREF: NArchive::NZip::CInArchive::FindAndReadMarker(IInStream *,unsigned __int64 const *)+328j
.text:000008E3                 mov     eax, [ebp+var_80]
.text:000008E6                 cmp     eax, [ebp+var_78]
.text:000008E9                 jnb     loc_A22
.text:000008EF                 mov     ecx, [ebp+var_7C]
.text:000008F2                 add     ecx, [ebp+var_80]
.text:000008F5                 movzx   edx, byte ptr [ecx]
.text:000008F8                 cmp     edx, 50h ; 'P'
.text:000008FB                 jz      short loc_8FF
.text:000008FD                 jmp     short loc_8DA
.text:000008FF ; ---------------------------------------------------------------------------
.text:000008FF
.text:000008FF loc_8FF:                                ; CODE XREF: NArchive::NZip::CInArchive::FindAndReadMarker(IInStream *,unsigned __int64 const *)+34Bj
.text:000008FF                 mov     eax, [ebp+var_7C]
.text:00000902                 add     eax, [ebp+var_80]
.text:00000905                 movzx   ecx, byte ptr [eax+1]
.text:00000909                 cmp     ecx, 4Bh ; 'K'
.text:0000090C                 jz      short loc_910
.text:0000090E                 jmp     short loc_8DA
.text:00000910 ; ---------------------------------------------------------------------------
.text:00000910
.text:00000910 loc_910:                                ; CODE XREF: NArchive::NZip::CInArchive::FindAndReadMarker(IInStream *,unsigned __int64 const *)+35Cj
.text:00000910                 mov     edx, [ebp+Size]
.text:00000913                 sub     edx, [ebp+var_80]
.text:00000916                 mov     [ebp+var_84], edx
.text:0000091C                 movzx   eax, [ebp+var_71]
.text:00000920                 push    eax
.text:00000921                 mov     ecx, [ebp+var_84]
.text:00000927                 push    ecx
.text:00000928                 mov     edx, [ebp+var_7C]
.text:0000092B                 add     edx, [ebp+var_80]
.text:0000092E                 push    edx
.text:0000092F                 call    ?IsArc_Zip_2@NZip@NArchive@@YGIPBEI_N@Z ; NArchive::NZip::IsArc_Zip_2(uchar const *,uint,bool)
.text:00000934                 mov     [ebp+var_88], eax
.text:0000093A                 cmp     [ebp+var_88], 0
.text:00000941                 jz      loc_A1D
.text:00000947                 cmp     [ebp+var_84], 4
.text:0000094E                 jnb     short loc_974
.text:00000950                 mov     [ebp+var_90], 1
.text:0000095A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000961                 lea     ecx, [ebp+var_50]
.text:00000964                 call    ??1?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::~CObjArray<uchar>(void)
.text:00000969                 mov     eax, [ebp+var_90]
.text:0000096F                 jmp     loc_A95
.text:00000974 ; ---------------------------------------------------------------------------
.text:00000974
.text:00000974 loc_974:                                ; CODE XREF: NArchive::NZip::CInArchive::FindAndReadMarker(IInStream *,unsigned __int64 const *)+39Ej
.text:00000974                 mov     eax, [ebp+var_7C]
.text:00000977                 add     eax, [ebp+var_80]
.text:0000097A                 mov     ecx, [ebp+var_10]
.text:0000097D                 mov     edx, [eax]
.text:0000097F                 mov     [ecx+2Ch], edx
.text:00000982                 mov     eax, [ebp+var_80]
.text:00000985                 xor     ecx, ecx
.text:00000987                 add     eax, [ebp+var_60]
.text:0000098A                 adc     ecx, [ebp+var_5C]
.text:0000098D                 mov     edx, [ebp+var_10]
.text:00000990                 add     eax, [edx+40h]
.text:00000993                 adc     ecx, [edx+44h]
.text:00000996                 mov     edx, [ebp+var_10]
.text:00000999                 mov     [edx+40h], eax
.text:0000099C                 mov     [edx+44h], ecx
.text:0000099F                 mov     eax, [ebp+var_10]
.text:000009A2                 mov     ecx, [ebp+var_10]
.text:000009A5                 mov     edx, [ecx+40h]
.text:000009A8                 mov     [eax+48h], edx
.text:000009AB                 mov     ecx, [ecx+44h]
.text:000009AE                 mov     [eax+4Ch], ecx
.text:000009B1                 mov     edx, [ebp+var_10]
.text:000009B4                 cmp     dword ptr [edx+2Ch], 30304B50h
.text:000009BB                 jnz     short loc_9E4
.text:000009BD                 mov     eax, [ebp+var_7C]
.text:000009C0                 add     eax, [ebp+var_80]
.text:000009C3                 mov     ecx, [ebp+var_10]
.text:000009C6                 mov     edx, [eax+4]
.text:000009C9                 mov     [ecx+2Ch], edx
.text:000009CC                 mov     eax, [ebp+var_10]
.text:000009CF                 mov     ecx, [eax+48h]
.text:000009D2                 add     ecx, 4
.text:000009D5                 mov     edx, [eax+4Ch]
.text:000009D8                 adc     edx, 0
.text:000009DB                 mov     eax, [ebp+var_10]
.text:000009DE                 mov     [eax+48h], ecx
.text:000009E1                 mov     [eax+4Ch], edx
.text:000009E4
.text:000009E4 loc_9E4:                                ; CODE XREF: NArchive::NZip::CInArchive::FindAndReadMarker(IInStream *,unsigned __int64 const *)+40Bj
.text:000009E4                 mov     ecx, [ebp+var_10]
.text:000009E7                 mov     edx, [ecx+48h]
.text:000009EA                 add     edx, 4
.text:000009ED                 mov     eax, [ecx+4Ch]
.text:000009F0                 adc     eax, 0
.text:000009F3                 mov     ecx, [ebp+var_10]
.text:000009F6                 mov     [ecx+30h], edx
.text:000009F9                 mov     [ecx+34h], eax
.text:000009FC                 mov     [ebp+var_94], 0
.text:00000A06                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000A0D                 lea     ecx, [ebp+var_50]
.text:00000A10                 call    ??1?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::~CObjArray<uchar>(void)
.text:00000A15                 mov     eax, [ebp+var_94]
.text:00000A1B                 jmp     short loc_A95
.text:00000A1D ; ---------------------------------------------------------------------------
.text:00000A1D
.text:00000A1D loc_A1D:                                ; CODE XREF: NArchive::NZip::CInArchive::FindAndReadMarker(IInStream *,unsigned __int64 const *)+391j
.text:00000A1D                 jmp     loc_8DA
.text:00000A22 ; ---------------------------------------------------------------------------
.text:00000A22
.text:00000A22 loc_A22:                                ; CODE XREF: NArchive::NZip::CInArchive::FindAndReadMarker(IInStream *,unsigned __int64 const *)+339j
.text:00000A22                 movzx   edx, [ebp+var_71]
.text:00000A26                 test    edx, edx
.text:00000A28                 jz      short loc_A2C
.text:00000A2A                 jmp     short loc_A76
.text:00000A2C ; ---------------------------------------------------------------------------
.text:00000A2C
.text:00000A2C loc_A2C:                                ; CODE XREF: NArchive::NZip::CInArchive::FindAndReadMarker(IInStream *,unsigned __int64 const *)+478j
.text:00000A2C                 mov     eax, [ebp+var_78]
.text:00000A2F                 xor     ecx, ecx
.text:00000A31                 add     eax, [ebp+var_60]
.text:00000A34                 adc     ecx, [ebp+var_5C]
.text:00000A37                 mov     [ebp+var_60], eax
.text:00000A3A                 mov     [ebp+var_5C], ecx
.text:00000A3D                 mov     edx, [ebp+Size]
.text:00000A40                 sub     edx, [ebp+var_78]
.text:00000A43                 mov     [ebp+Size], edx
.text:00000A46                 mov     esi, esp
.text:00000A48                 mov     eax, [ebp+Size]
.text:00000A4B                 push    eax             ; Size
.text:00000A4C                 lea     ecx, [ebp+var_50]
.text:00000A4F                 call    ??B?$CObjArray@E@@QAEPAEXZ ; CObjArray<uchar>::operator uchar *(void)
.text:00000A54                 add     eax, [ebp+var_78]
.text:00000A57                 push    eax             ; Src
.text:00000A58                 lea     ecx, [ebp+var_50]
.text:00000A5B                 call    ??B?$CObjArray@E@@QAEPAEXZ ; CObjArray<uchar>::operator uchar *(void)
.text:00000A60                 push    eax             ; Dst
.text:00000A61                 call    dword ptr ds:__imp__memmove
.text:00000A67                 add     esp, 0Ch
.text:00000A6A                 cmp     esi, esp
.text:00000A6C                 call    __RTC_CheckEsp
.text:00000A71                 jmp     loc_7B1
.text:00000A76 ; ---------------------------------------------------------------------------
.text:00000A76
.text:00000A76 loc_A76:                                ; CODE XREF: NArchive::NZip::CInArchive::FindAndReadMarker(IInStream *,unsigned __int64 const *)+311j
.text:00000A76                                         ; NArchive::NZip::CInArchive::FindAndReadMarker(IInStream *,unsigned __int64 const *)+47Aj
.text:00000A76                 mov     [ebp+var_98], 1
.text:00000A80                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000A87                 lea     ecx, [ebp+var_50]
.text:00000A8A                 call    ??1?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::~CObjArray<uchar>(void)
.text:00000A8F                 mov     eax, [ebp+var_98]
.text:00000A95
.text:00000A95 loc_A95:                                ; CODE XREF: NArchive::NZip::CInArchive::FindAndReadMarker(IInStream *,unsigned __int64 const *)+C5j
.text:00000A95                                         ; NArchive::NZip::CInArchive::FindAndReadMarker(IInStream *,unsigned __int64 const *)+ECj ...
.text:00000A95                 push    edx
.text:00000A96                 mov     ecx, ebp
.text:00000A98                 push    eax
.text:00000A99                 lea     edx, $LN36
.text:00000A9F                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000AA4                 pop     eax
.text:00000AA5                 pop     edx
.text:00000AA6                 mov     ecx, [ebp+var_C]
.text:00000AA9                 mov     large fs:0, ecx
.text:00000AB0                 pop     ecx
.text:00000AB1                 pop     edi
.text:00000AB2                 pop     esi
.text:00000AB3                 add     esp, 0ACh
.text:00000AB9                 cmp     ebp, esp
.text:00000ABB                 call    __RTC_CheckEsp
.text:00000AC0                 mov     esp, ebp
.text:00000AC2                 pop     ebp
.text:00000AC3                 retn    8
.text:00000AC3 ?FindAndReadMarker@CInArchive@NZip@NArchive@@AAEJPAUIInStream@@PB_K@Z endp
.text:00000AC3
.text:00000AC3 ; ---------------------------------------------------------------------------
.text:00000AC6                 align 4
.text:00000AC8 $LN36           dd 5                    ; DATA XREF: NArchive::NZip::CInArchive::FindAndReadMarker(IInStream *,unsigned __int64 const *)+4E9o
.text:00000ACC                 dd offset $LN35
.text:00000AD0 $LN35           dd 0FFFFFFE4h, 4        ; DATA XREF: .text:00000ACCo
.text:00000AD8                 dd offset $LN29_0       ; "startBuf"
.text:00000ADC                 dd 0FFFFFFD8h, 4
.text:00000AE4                 dd offset $LN30_0       ; "processed"
.text:00000AE8                 dd 0FFFFFFC8h, 4
.text:00000AF0                 dd offset $LN31_0       ; "processed"
.text:00000AF4                 dd 0FFFFFFB0h, 4
.text:00000AFC                 dd offset $LN32         ; "buffer"
.text:00000B00                 dd 0FFFFFF98h, 4
.text:00000B08                 dd offset $LN33         ; "numReadBytes"
.text:00000B0C $LN33           db 'numReadBytes',0     ; DATA XREF: .text:00000B08o
.text:00000B19 $LN32           db 'buffer',0           ; DATA XREF: .text:00000AFCo
.text:00000B20 $LN31_0         db 'processed',0        ; DATA XREF: .text:00000AF0o
.text:00000B2A $LN30_0         db 'processed',0        ; DATA XREF: .text:00000AE4o
.text:00000B34 $LN29_0         db 'startBuf',0         ; DATA XREF: .text:00000AD8o
.text:00000B3D                 align 10h
.text:00000B40
.text:00000B40 ; =============== S U B R O U T I N E =======================================
.text:00000B40
.text:00000B40 ; Attributes: bp-based frame
.text:00000B40
.text:00000B40 ; unsigned int __stdcall NArchive::NZip::IsArc_Zip_2(unsigned char const *, unsigned int, bool)
.text:00000B40 ?IsArc_Zip_2@NZip@NArchive@@YGIPBEI_N@Z proc near
.text:00000B40                                         ; CODE XREF: NArchive::NZip::CInArchive::FindAndReadMarker(IInStream *,unsigned __int64 const *)+37Fp
.text:00000B40
.text:00000B40 var_4           = dword ptr -4
.text:00000B40 arg_0           = dword ptr  8
.text:00000B40 arg_4           = dword ptr  0Ch
.text:00000B40 arg_8           = byte ptr  10h
.text:00000B40
.text:00000B40                 push    ebp
.text:00000B41                 mov     ebp, esp
.text:00000B43                 push    ecx
.text:00000B44                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000B4B                 mov     eax, [ebp+arg_4]
.text:00000B4E                 push    eax
.text:00000B4F                 mov     ecx, [ebp+arg_0]
.text:00000B52                 push    ecx
.text:00000B53                 call    _IsArc_Zip@8    ; IsArc_Zip(x,x)
.text:00000B58                 mov     [ebp+var_4], eax
.text:00000B5B                 cmp     [ebp+var_4], 2
.text:00000B5F                 jnz     short loc_B6D
.text:00000B61                 movzx   edx, [ebp+arg_8]
.text:00000B65                 test    edx, edx
.text:00000B67                 jz      short loc_B6D
.text:00000B69                 xor     eax, eax
.text:00000B6B                 jmp     short loc_B70
.text:00000B6D ; ---------------------------------------------------------------------------
.text:00000B6D
.text:00000B6D loc_B6D:                                ; CODE XREF: NArchive::NZip::IsArc_Zip_2(uchar const *,uint,bool)+1Fj
.text:00000B6D                                         ; NArchive::NZip::IsArc_Zip_2(uchar const *,uint,bool)+27j
.text:00000B6D                 mov     eax, [ebp+var_4]
.text:00000B70
.text:00000B70 loc_B70:                                ; CODE XREF: NArchive::NZip::IsArc_Zip_2(uchar const *,uint,bool)+2Bj
.text:00000B70                 add     esp, 4
.text:00000B73                 cmp     ebp, esp
.text:00000B75                 call    __RTC_CheckEsp
.text:00000B7A                 mov     esp, ebp
.text:00000B7C                 pop     ebp
.text:00000B7D                 retn    0Ch
.text:00000B7D ?IsArc_Zip_2@NZip@NArchive@@YGIPBEI_N@Z endp
.text:00000B7D
.text:00000B80
.text:00000B80 ; =============== S U B R O U T I N E =======================================
.text:00000B80
.text:00000B80 ; Attributes: bp-based frame
.text:00000B80
.text:00000B80 ; __int32 __thiscall NArchive::NZip::CInArchive::IncreaseRealPosition(NArchive::NZip::CInArchive *this, __int64)
.text:00000B80                 public ?IncreaseRealPosition@CInArchive@NZip@NArchive@@AAEJ_J@Z
.text:00000B80 ?IncreaseRealPosition@CInArchive@NZip@NArchive@@AAEJ_J@Z proc near
.text:00000B80                                         ; CODE XREF: NArchive::NZip::CInArchive::ReadLocalItemDescriptor(NArchive::NZip::CItemEx &)+18Ap
.text:00000B80                                         ; NArchive::NZip::CInArchive::ReadLocals(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+D1p
.text:00000B80
.text:00000B80 var_8           = dword ptr -8
.text:00000B80 var_4           = dword ptr -4
.text:00000B80 arg_0           = qword ptr  8
.text:00000B80
.text:00000B80                 push    ebp
.text:00000B81                 mov     ebp, esp
.text:00000B83                 sub     esp, 8
.text:00000B86                 push    esi
.text:00000B87                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000B8E                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000B95                 mov     [ebp+var_4], ecx
.text:00000B98                 mov     ecx, [ebp+var_4]
.text:00000B9B                 add     ecx, 80h ; 'Ç'
.text:00000BA1                 call    ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->(void)
.text:00000BA6                 mov     [ebp+var_8], eax
.text:00000BA9                 mov     eax, [ebp+var_4]
.text:00000BAC                 add     eax, 30h ; '0'
.text:00000BAF                 mov     esi, esp
.text:00000BB1                 push    eax
.text:00000BB2                 push    1
.text:00000BB4                 mov     ecx, dword ptr [ebp+arg_0+4]
.text:00000BB7                 push    ecx
.text:00000BB8                 mov     edx, dword ptr [ebp+arg_0]
.text:00000BBB                 push    edx
.text:00000BBC                 mov     eax, [ebp+var_8]
.text:00000BBF                 push    eax
.text:00000BC0                 mov     ecx, [ebp+var_8]
.text:00000BC3                 mov     edx, [ecx]
.text:00000BC5                 mov     eax, [edx+10h]
.text:00000BC8                 call    eax
.text:00000BCA                 cmp     esi, esp
.text:00000BCC                 call    __RTC_CheckEsp
.text:00000BD1                 pop     esi
.text:00000BD2                 add     esp, 8
.text:00000BD5                 cmp     ebp, esp
.text:00000BD7                 call    __RTC_CheckEsp
.text:00000BDC                 mov     esp, ebp
.text:00000BDE                 pop     ebp
.text:00000BDF                 retn    8
.text:00000BDF ?IncreaseRealPosition@CInArchive@NZip@NArchive@@AAEJ_J@Z endp
.text:00000BDF
.text:00000BDF ; ---------------------------------------------------------------------------
.text:00000BE2                 align 10h
.text:00000BF0
.text:00000BF0 ; =============== S U B R O U T I N E =======================================
.text:00000BF0
.text:00000BF0 ; Attributes: bp-based frame
.text:00000BF0
.text:00000BF0 ; __int32 __thiscall NArchive::NZip::CInArchive::ReadBytes(NArchive::NZip::CInArchive *this, unsigned __int8 *, unsigned int, unsigned int *)
.text:00000BF0                 public ?ReadBytes@CInArchive@NZip@NArchive@@AAEJPAXIPAI@Z
.text:00000BF0 ?ReadBytes@CInArchive@NZip@NArchive@@AAEJPAXIPAI@Z proc near
.text:00000BF0                                         ; CODE XREF: NArchive::NZip::CInArchive::ReadLocalItemDescriptor(NArchive::NZip::CItemEx &)+6Ep
.text:00000BF0
.text:00000BF0 var_38          = dword ptr -38h
.text:00000BF0 var_24          = dword ptr -24h
.text:00000BF0 var_1C          = dword ptr -1Ch
.text:00000BF0 var_14          = dword ptr -14h
.text:00000BF0 var_10          = dword ptr -10h
.text:00000BF0 var_C           = dword ptr -0Ch
.text:00000BF0 var_4           = dword ptr -4
.text:00000BF0 arg_0           = dword ptr  8
.text:00000BF0 arg_4           = dword ptr  0Ch
.text:00000BF0 arg_8           = dword ptr  10h
.text:00000BF0
.text:00000BF0 ; FUNCTION CHUNK AT .text:00000C85 SIZE 00000009 BYTES
.text:00000BF0 ; FUNCTION CHUNK AT .text:00000C93 SIZE 00000078 BYTES
.text:00000BF0
.text:00000BF0                 push    ebp
.text:00000BF1                 mov     ebp, esp
.text:00000BF3                 push    0FFFFFFFFh
.text:00000BF5                 push    offset __ehhandler$?ReadBytes@CInArchive@NZip@NArchive@@AAEJPAXIPAI@Z
.text:00000BFA                 mov     eax, large fs:0
.text:00000C00                 push    eax
.text:00000C01                 push    ecx
.text:00000C02                 sub     esp, 28h
.text:00000C05                 push    ebx
.text:00000C06                 push    esi
.text:00000C07                 push    edi
.text:00000C08                 push    ecx
.text:00000C09                 lea     edi, [ebp+var_38]
.text:00000C0C                 mov     ecx, 0Ah
.text:00000C11                 mov     eax, 0CCCCCCCCh
.text:00000C16                 rep stosd
.text:00000C18                 pop     ecx
.text:00000C19                 mov     eax, dword ptr ds:___security_cookie
.text:00000C1E                 xor     eax, ebp
.text:00000C20                 push    eax
.text:00000C21                 lea     eax, [ebp+var_C]
.text:00000C24                 mov     large fs:0, eax
.text:00000C2A                 mov     [ebp+var_10], esp
.text:00000C2D                 mov     [ebp+var_14], ecx
.text:00000C30                 mov     eax, [ebp+arg_4]
.text:00000C33                 mov     [ebp+var_1C], eax
.text:00000C36                 mov     [ebp+var_24], 0
.text:00000C3D                 mov     ecx, [ebp+var_14]
.text:00000C40                 movzx   edx, byte ptr [ecx+28h]
.text:00000C44                 test    edx, edx
.text:00000C46                 jz      short loc_C95
.text:00000C48                 mov     [ebp+var_4], 0
.text:00000C4F                 mov     eax, [ebp+arg_4]
.text:00000C52                 push    eax             ; unsigned int
.text:00000C53                 mov     ecx, [ebp+arg_0]
.text:00000C56                 push    ecx             ; unsigned __int8 *
.text:00000C57                 mov     ecx, [ebp+var_14] ; this
.text:00000C5A                 call    ?ReadBytes@CInBufferBase@@QAEIPAEI@Z ; CInBufferBase::ReadBytes(uchar *,uint)
.text:00000C5F                 mov     [ebp+var_38], eax
.text:00000C62                 mov     edx, [ebp+var_38]
.text:00000C65                 mov     [ebp+var_1C], edx
.text:00000C68                 jmp     short $LN7
.text:00000C68 ?ReadBytes@CInArchive@NZip@NArchive@@AAEJPAXIPAI@Z endp
.text:00000C68
.text:00000C6A
.text:00000C6A ; =============== S U B R O U T I N E =======================================
.text:00000C6A
.text:00000C6A
.text:00000C6A __catch$?ReadBytes@CInArchive@NZip@NArchive@@AAEJPAXIPAI@Z$0 proc near
.text:00000C6A                                         ; DATA XREF: .xdata$x:000046B4o
.text:00000C6A                 mov     eax, [ebp-2Ch]
.text:00000C6D                 mov     ecx, [eax]
.text:00000C6F                 mov     [ebp-34h], ecx
.text:00000C72                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00000C79                 mov     eax, offset $LN10
.text:00000C7E                 retn
.text:00000C7E __catch$?ReadBytes@CInArchive@NZip@NArchive@@AAEJPAXIPAI@Z$0 endp
.text:00000C7E
.text:00000C7F ; ---------------------------------------------------------------------------
.text:00000C7F                 mov     eax, offset $LN7
.text:00000C84                 retn
.text:00000C85 ; ---------------------------------------------------------------------------
.text:00000C85 ; START OF FUNCTION CHUNK FOR ?ReadBytes@CInArchive@NZip@NArchive@@AAEJPAXIPAI@Z
.text:00000C85
.text:00000C85 $LN7:                                   ; CODE XREF: NArchive::NZip::CInArchive::ReadBytes(void *,uint,uint *)+78j
.text:00000C85                                         ; DATA XREF: .text:00000C7Fo
.text:00000C85                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000C8C                 jmp     short loc_C93
.text:00000C8C ; END OF FUNCTION CHUNK FOR ?ReadBytes@CInArchive@NZip@NArchive@@AAEJPAXIPAI@Z
.text:00000C8E
.text:00000C8E ; =============== S U B R O U T I N E =======================================
.text:00000C8E
.text:00000C8E
.text:00000C8E $LN10           proc near               ; DATA XREF: __catch$?ReadBytes@CInArchive@NZip@NArchive@@AAEJPAXIPAI@Z$0+Fo
.text:00000C8E                 mov     eax, [ebp-34h]
.text:00000C91                 jmp     short loc_CDC
.text:00000C91 $LN10           endp
.text:00000C91
.text:00000C93 ; ---------------------------------------------------------------------------
.text:00000C93 ; START OF FUNCTION CHUNK FOR ?ReadBytes@CInArchive@NZip@NArchive@@AAEJPAXIPAI@Z
.text:00000C93
.text:00000C93 loc_C93:                                ; CODE XREF: NArchive::NZip::CInArchive::ReadBytes(void *,uint,uint *)+9Cj
.text:00000C93                 jmp     short loc_CB4
.text:00000C95 ; ---------------------------------------------------------------------------
.text:00000C95
.text:00000C95 loc_C95:                                ; CODE XREF: NArchive::NZip::CInArchive::ReadBytes(void *,uint,uint *)+56j
.text:00000C95                 lea     edx, [ebp+var_1C]
.text:00000C98                 push    edx             ; unsigned int *
.text:00000C99                 mov     eax, [ebp+arg_0]
.text:00000C9C                 push    eax             ; void *
.text:00000C9D                 mov     ecx, [ebp+var_14]
.text:00000CA0                 add     ecx, 80h ; 'Ç'
.text:00000CA6                 call    ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *(void)
.text:00000CAB                 push    eax             ; struct ISequentialInStream *
.text:00000CAC                 call    ?ReadStream@@YGJPAUISequentialInStream@@PAXPAI@Z ; ReadStream(ISequentialInStream *,void *,uint *)
.text:00000CB1                 mov     [ebp+var_24], eax
.text:00000CB4
.text:00000CB4 loc_CB4:                                ; CODE XREF: NArchive::NZip::CInArchive::ReadBytes(void *,uint,uint *):loc_C93j
.text:00000CB4                 cmp     [ebp+arg_8], 0
.text:00000CB8                 jz      short loc_CC2
.text:00000CBA                 mov     ecx, [ebp+arg_8]
.text:00000CBD                 mov     edx, [ebp+var_1C]
.text:00000CC0                 mov     [ecx], edx
.text:00000CC2
.text:00000CC2 loc_CC2:                                ; CODE XREF: NArchive::NZip::CInArchive::ReadBytes(void *,uint,uint *)+C8j
.text:00000CC2                 mov     eax, [ebp+var_1C]
.text:00000CC5                 xor     ecx, ecx
.text:00000CC7                 mov     edx, [ebp+var_14]
.text:00000CCA                 add     eax, [edx+30h]
.text:00000CCD                 adc     ecx, [edx+34h]
.text:00000CD0                 mov     edx, [ebp+var_14]
.text:00000CD3                 mov     [edx+30h], eax
.text:00000CD6                 mov     [edx+34h], ecx
.text:00000CD9                 mov     eax, [ebp+var_24]
.text:00000CDC
.text:00000CDC loc_CDC:                                ; CODE XREF: $LN10+3j
.text:00000CDC                 push    edx
.text:00000CDD                 mov     ecx, ebp
.text:00000CDF                 push    eax
.text:00000CE0                 lea     edx, $LN16
.text:00000CE6                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000CEB                 pop     eax
.text:00000CEC                 pop     edx
.text:00000CED                 mov     ecx, [ebp+var_C]
.text:00000CF0                 mov     large fs:0, ecx
.text:00000CF7                 pop     ecx
.text:00000CF8                 pop     edi
.text:00000CF9                 pop     esi
.text:00000CFA                 pop     ebx
.text:00000CFB                 add     esp, 38h
.text:00000CFE                 cmp     ebp, esp
.text:00000D00                 call    __RTC_CheckEsp
.text:00000D05                 mov     esp, ebp
.text:00000D07                 pop     ebp
.text:00000D08                 retn    0Ch
.text:00000D08 ; END OF FUNCTION CHUNK FOR ?ReadBytes@CInArchive@NZip@NArchive@@AAEJPAXIPAI@Z
.text:00000D08 ; ---------------------------------------------------------------------------
.text:00000D0B                 align 4
.text:00000D0C $LN16           dd 2                    ; DATA XREF: NArchive::NZip::CInArchive::ReadBytes(void *,uint,uint *)+F0o
.text:00000D10                 dd offset $LN15
.text:00000D14 $LN15           dd 0FFFFFFE4h, 4        ; DATA XREF: .text:00000D10o
.text:00000D1C                 dd offset $LN12         ; "realProcessedSize"
.text:00000D20                 dd 0FFFFFFD4h, 4
.text:00000D28                 dd offset $LN13
.text:00000D2C $LN13           db 65h, 0               ; DATA XREF: .text:00000D28o
.text:00000D2E $LN12           db 'realProcessedSize',0 ; DATA XREF: .text:00000D1Co
.text:00000D40
.text:00000D40 ; =============== S U B R O U T I N E =======================================
.text:00000D40
.text:00000D40 ; Attributes: bp-based frame
.text:00000D40
.text:00000D40 ; void __thiscall NArchive::NZip::CInArchive::SafeReadBytes(NArchive::NZip::CInArchive *this, unsigned __int8 *, unsigned int)
.text:00000D40                 public ?SafeReadBytes@CInArchive@NZip@NArchive@@AAEXPAXI@Z
.text:00000D40 ?SafeReadBytes@CInArchive@NZip@NArchive@@AAEXPAXI@Z proc near
.text:00000D40                                         ; CODE XREF: NArchive::NZip::CInArchive::ReadBuffer(CBuffer<uchar> &,uint)+30p
.text:00000D40                                         ; NArchive::NZip::CInArchive::ReadByte(void)+23p ...
.text:00000D40
.text:00000D40 var_20          = dword ptr -20h
.text:00000D40 var_1C          = dword ptr -1Ch
.text:00000D40 var_18          = dword ptr -18h
.text:00000D40 var_14          = dword ptr -14h
.text:00000D40 var_10          = dword ptr -10h
.text:00000D40 var_C           = dword ptr -0Ch
.text:00000D40 var_8           = dword ptr -8
.text:00000D40 var_4           = dword ptr -4
.text:00000D40 arg_0           = dword ptr  8
.text:00000D40 arg_4           = dword ptr  0Ch
.text:00000D40
.text:00000D40                 push    ebp
.text:00000D41                 mov     ebp, esp
.text:00000D43                 sub     esp, 20h
.text:00000D46                 mov     eax, 0CCCCCCCCh
.text:00000D4B                 mov     [ebp+var_20], eax
.text:00000D4E                 mov     [ebp+var_1C], eax
.text:00000D51                 mov     [ebp+var_18], eax
.text:00000D54                 mov     [ebp+var_14], eax
.text:00000D57                 mov     [ebp+var_10], eax
.text:00000D5A                 mov     [ebp+var_C], eax
.text:00000D5D                 mov     [ebp+var_8], eax
.text:00000D60                 mov     [ebp+var_4], eax
.text:00000D63                 mov     [ebp+var_4], ecx
.text:00000D66                 mov     eax, [ebp+arg_4]
.text:00000D69                 mov     [ebp+var_C], eax
.text:00000D6C                 mov     ecx, [ebp+var_4]
.text:00000D6F                 movzx   edx, byte ptr [ecx+28h]
.text:00000D73                 test    edx, edx
.text:00000D75                 jz      short loc_DA3
.text:00000D77                 mov     eax, [ebp+arg_4]
.text:00000D7A                 push    eax             ; unsigned int
.text:00000D7B                 mov     ecx, [ebp+arg_0]
.text:00000D7E                 push    ecx             ; unsigned __int8 *
.text:00000D7F                 mov     ecx, [ebp+var_4] ; this
.text:00000D82                 call    ?ReadBytes@CInBufferBase@@QAEIPAEI@Z ; CInBufferBase::ReadBytes(uchar *,uint)
.text:00000D87                 mov     [ebp+var_C], eax
.text:00000D8A                 mov     edx, [ebp+var_C]
.text:00000D8D                 xor     eax, eax
.text:00000D8F                 mov     ecx, [ebp+var_4]
.text:00000D92                 add     edx, [ecx+30h]
.text:00000D95                 adc     eax, [ecx+34h]
.text:00000D98                 mov     ecx, [ebp+var_4]
.text:00000D9B                 mov     [ecx+30h], edx
.text:00000D9E                 mov     [ecx+34h], eax
.text:00000DA1                 jmp     short loc_DFE
.text:00000DA3 ; ---------------------------------------------------------------------------
.text:00000DA3
.text:00000DA3 loc_DA3:                                ; CODE XREF: NArchive::NZip::CInArchive::SafeReadBytes(void *,uint)+35j
.text:00000DA3                 lea     edx, [ebp+var_C]
.text:00000DA6                 push    edx             ; unsigned int *
.text:00000DA7                 mov     eax, [ebp+arg_0]
.text:00000DAA                 push    eax             ; void *
.text:00000DAB                 mov     ecx, [ebp+var_4]
.text:00000DAE                 add     ecx, 80h ; 'Ç'
.text:00000DB4                 call    ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *(void)
.text:00000DB9                 push    eax             ; struct ISequentialInStream *
.text:00000DBA                 call    ?ReadStream@@YGJPAUISequentialInStream@@PAXPAI@Z ; ReadStream(ISequentialInStream *,void *,uint *)
.text:00000DBF                 mov     [ebp+var_14], eax
.text:00000DC2                 mov     ecx, [ebp+var_C]
.text:00000DC5                 xor     edx, edx
.text:00000DC7                 mov     eax, [ebp+var_4]
.text:00000DCA                 add     ecx, [eax+30h]
.text:00000DCD                 adc     edx, [eax+34h]
.text:00000DD0                 mov     eax, [ebp+var_4]
.text:00000DD3                 mov     [eax+30h], ecx
.text:00000DD6                 mov     [eax+34h], edx
.text:00000DD9                 cmp     [ebp+var_14], 0
.text:00000DDD                 jz      short loc_DFE
.text:00000DDF                 mov     ecx, [ebp+var_14]
.text:00000DE2                 push    ecx             ; __int32
.text:00000DE3                 lea     ecx, [ebp+var_1C] ; this
.text:00000DE6                 call    ??0CSystemException@@QAE@J@Z ; CSystemException::CSystemException(long)
.text:00000DEB                 mov     edx, [eax]
.text:00000DED                 mov     [ebp+var_18], edx
.text:00000DF0                 push    offset __TI1?AUCSystemException@@
.text:00000DF5                 lea     eax, [ebp+var_18]
.text:00000DF8                 push    eax
.text:00000DF9                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:00000DFE ; ---------------------------------------------------------------------------
.text:00000DFE
.text:00000DFE loc_DFE:                                ; CODE XREF: NArchive::NZip::CInArchive::SafeReadBytes(void *,uint)+61j
.text:00000DFE                                         ; NArchive::NZip::CInArchive::SafeReadBytes(void *,uint)+9Dj
.text:00000DFE                 mov     ecx, [ebp+var_C]
.text:00000E01                 cmp     ecx, [ebp+arg_4]
.text:00000E04                 jz      short loc_E1F
.text:00000E06                 xor     edx, edx
.text:00000E08                 mov     byte ptr [ebp+var_20+2], dl
.text:00000E0B                 mov     al, byte ptr [ebp+var_20+2]
.text:00000E0E                 mov     byte ptr [ebp+var_20+3], al
.text:00000E11                 push    offset __TI1?AVCUnexpectEnd@NZip@NArchive@@
.text:00000E16                 lea     ecx, [ebp+var_20+3]
.text:00000E19                 push    ecx
.text:00000E1A                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:00000E1F ; ---------------------------------------------------------------------------
.text:00000E1F
.text:00000E1F loc_E1F:                                ; CODE XREF: NArchive::NZip::CInArchive::SafeReadBytes(void *,uint)+C4j
.text:00000E1F                 push    edx
.text:00000E20                 mov     ecx, ebp
.text:00000E22                 push    eax
.text:00000E23                 lea     edx, $LN9
.text:00000E29                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000E2E                 pop     eax
.text:00000E2F                 pop     edx
.text:00000E30                 add     esp, 20h
.text:00000E33                 cmp     ebp, esp
.text:00000E35                 call    __RTC_CheckEsp
.text:00000E3A                 mov     esp, ebp
.text:00000E3C                 pop     ebp
.text:00000E3D                 retn    8
.text:00000E3D ?SafeReadBytes@CInArchive@NZip@NArchive@@AAEXPAXI@Z endp
.text:00000E3D
.text:00000E3D ; ---------------------------------------------------------------------------
.text:00000E40 $LN9            dd 1                    ; DATA XREF: NArchive::NZip::CInArchive::SafeReadBytes(void *,uint)+E3o
.text:00000E44                 dd offset $LN8
.text:00000E48 $LN8            dd 0FFFFFFF4h, 4        ; DATA XREF: .text:00000E44o
.text:00000E50                 dd offset $LN7_0        ; "processed"
.text:00000E54 $LN7_0          db 'processed',0        ; DATA XREF: .text:00000E50o
.text:00000E5E                 align 10h
.text:00000E60
.text:00000E60 ; =============== S U B R O U T I N E =======================================
.text:00000E60
.text:00000E60 ; Attributes: bp-based frame
.text:00000E60
.text:00000E60 ; private: void __thiscall NArchive::NZip::CInArchive::ReadBuffer(class CBuffer<unsigned char> &, unsigned int)
.text:00000E60                 public ?ReadBuffer@CInArchive@NZip@NArchive@@AAEXAAV?$CBuffer@E@@I@Z
.text:00000E60 ?ReadBuffer@CInArchive@NZip@NArchive@@AAEXAAV?$CBuffer@E@@I@Z proc near
.text:00000E60                                         ; CODE XREF: NArchive::NZip::CInArchive::ReadExtra(uint,NArchive::NZip::CExtraBlock &,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &,uint &)+234p
.text:00000E60                                         ; NArchive::NZip::CInArchive::ReadCdItem(NArchive::NZip::CItemEx &)+145p ...
.text:00000E60
.text:00000E60 var_4           = dword ptr -4
.text:00000E60 arg_0           = dword ptr  8
.text:00000E60 arg_4           = dword ptr  0Ch
.text:00000E60
.text:00000E60                 push    ebp
.text:00000E61                 mov     ebp, esp
.text:00000E63                 push    ecx
.text:00000E64                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000E6B                 mov     [ebp+var_4], ecx
.text:00000E6E                 mov     eax, [ebp+arg_4]
.text:00000E71                 push    eax
.text:00000E72                 mov     ecx, [ebp+arg_0]
.text:00000E75                 call    ?Alloc@?$CBuffer@E@@QAEXI@Z ; CBuffer<uchar>::Alloc(uint)
.text:00000E7A                 cmp     [ebp+arg_4], 0
.text:00000E7E                 jbe     short loc_E95
.text:00000E80                 mov     ecx, [ebp+arg_4]
.text:00000E83                 push    ecx             ; unsigned int
.text:00000E84                 mov     ecx, [ebp+arg_0]
.text:00000E87                 call    ??B?$CBuffer@E@@QAEPAEXZ ; CBuffer<uchar>::operator uchar *(void)
.text:00000E8C                 push    eax             ; unsigned __int8 *
.text:00000E8D                 mov     ecx, [ebp+var_4] ; this
.text:00000E90                 call    ?SafeReadBytes@CInArchive@NZip@NArchive@@AAEXPAXI@Z ; NArchive::NZip::CInArchive::SafeReadBytes(void *,uint)
.text:00000E95
.text:00000E95 loc_E95:                                ; CODE XREF: NArchive::NZip::CInArchive::ReadBuffer(CBuffer<uchar> &,uint)+1Ej
.text:00000E95                 add     esp, 4
.text:00000E98                 cmp     ebp, esp
.text:00000E9A                 call    __RTC_CheckEsp
.text:00000E9F                 mov     esp, ebp
.text:00000EA1                 pop     ebp
.text:00000EA2                 retn    8
.text:00000EA2 ?ReadBuffer@CInArchive@NZip@NArchive@@AAEXAAV?$CBuffer@E@@I@Z endp
.text:00000EA2
.text:00000EA2 ; ---------------------------------------------------------------------------
.text:00000EA5                 align 10h
.text:00000EB0
.text:00000EB0 ; =============== S U B R O U T I N E =======================================
.text:00000EB0
.text:00000EB0 ; Attributes: bp-based frame
.text:00000EB0
.text:00000EB0 ; unsigned __int8 __thiscall NArchive::NZip::CInArchive::ReadByte(NArchive::NZip::CInArchive *__hidden this)
.text:00000EB0                 public ?ReadByte@CInArchive@NZip@NArchive@@AAEEXZ
.text:00000EB0 ?ReadByte@CInArchive@NZip@NArchive@@AAEEXZ proc near
.text:00000EB0                                         ; CODE XREF: NArchive::NZip::CInArchive::Skip(uint)+8Bp
.text:00000EB0                                         ; NArchive::NZip::CInArchive::Skip64(unsigned __int64)+55p
.text:00000EB0
.text:00000EB0 var_10          = dword ptr -10h
.text:00000EB0 var_C           = byte ptr -0Ch
.text:00000EB0 var_8           = dword ptr -8
.text:00000EB0 var_4           = dword ptr -4
.text:00000EB0
.text:00000EB0                 push    ebp
.text:00000EB1                 mov     ebp, esp
.text:00000EB3                 sub     esp, 10h
.text:00000EB6                 mov     eax, 0CCCCCCCCh
.text:00000EBB                 mov     [ebp+var_10], eax
.text:00000EBE                 mov     dword ptr [ebp+var_C], eax
.text:00000EC1                 mov     [ebp+var_8], eax
.text:00000EC4                 mov     [ebp+var_4], eax
.text:00000EC7                 mov     [ebp+var_4], ecx
.text:00000ECA                 push    1               ; unsigned int
.text:00000ECC                 lea     eax, [ebp+var_C+3]
.text:00000ECF                 push    eax             ; unsigned __int8 *
.text:00000ED0                 mov     ecx, [ebp+var_4] ; this
.text:00000ED3                 call    ?SafeReadBytes@CInArchive@NZip@NArchive@@AAEXPAXI@Z ; NArchive::NZip::CInArchive::SafeReadBytes(void *,uint)
.text:00000ED8                 mov     al, [ebp+var_C+3]
.text:00000EDB                 push    edx
.text:00000EDC                 mov     ecx, ebp
.text:00000EDE                 push    eax
.text:00000EDF                 lea     edx, $LN5
.text:00000EE5                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000EEA                 pop     eax
.text:00000EEB                 pop     edx
.text:00000EEC                 add     esp, 10h
.text:00000EEF                 cmp     ebp, esp
.text:00000EF1                 call    __RTC_CheckEsp
.text:00000EF6                 mov     esp, ebp
.text:00000EF8                 pop     ebp
.text:00000EF9                 retn
.text:00000EF9 ?ReadByte@CInArchive@NZip@NArchive@@AAEEXZ endp
.text:00000EF9
.text:00000EF9 ; ---------------------------------------------------------------------------
.text:00000EFA                 align 4
.text:00000EFC $LN5            dd 1                    ; DATA XREF: NArchive::NZip::CInArchive::ReadByte(void)+2Fo
.text:00000F00                 dd offset $LN4
.text:00000F04 $LN4            dd 0FFFFFFF7h, 1        ; DATA XREF: .text:00000F00o
.text:00000F0C                 dd offset $LN3
.text:00000F10 $LN3            dd 0CCCC0062h, 3 dup(0CCCCCCCCh) ; DATA XREF: .text:00000F0Co
.text:00000F20
.text:00000F20 ; =============== S U B R O U T I N E =======================================
.text:00000F20
.text:00000F20 ; Attributes: bp-based frame
.text:00000F20
.text:00000F20 ; unsigned __int16 __thiscall NArchive::NZip::CInArchive::ReadUInt16(NArchive::NZip::CInArchive *__hidden this)
.text:00000F20                 public ?ReadUInt16@CInArchive@NZip@NArchive@@AAEGXZ
.text:00000F20 ?ReadUInt16@CInArchive@NZip@NArchive@@AAEGXZ proc near
.text:00000F20                                         ; CODE XREF: NArchive::NZip::CInArchive::ReadExtra(uint,NArchive::NZip::CExtraBlock &,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &,uint &)+64p
.text:00000F20                                         ; NArchive::NZip::CInArchive::ReadExtra(uint,NArchive::NZip::CExtraBlock &,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &,uint &)+70p
.text:00000F20
.text:00000F20 var_10          = dword ptr -10h
.text:00000F20 var_C           = byte ptr -0Ch
.text:00000F20 var_8           = dword ptr -8
.text:00000F20 var_4           = dword ptr -4
.text:00000F20
.text:00000F20                 push    ebp
.text:00000F21                 mov     ebp, esp
.text:00000F23                 sub     esp, 10h
.text:00000F26                 mov     eax, 0CCCCCCCCh
.text:00000F2B                 mov     [ebp+var_10], eax
.text:00000F2E                 mov     dword ptr [ebp+var_C], eax
.text:00000F31                 mov     [ebp+var_8], eax
.text:00000F34                 mov     [ebp+var_4], eax
.text:00000F37                 mov     [ebp+var_4], ecx
.text:00000F3A                 push    2               ; unsigned int
.text:00000F3C                 lea     eax, [ebp+var_C]
.text:00000F3F                 push    eax             ; unsigned __int8 *
.text:00000F40                 mov     ecx, [ebp+var_4] ; this
.text:00000F43                 call    ?SafeReadBytes@CInArchive@NZip@NArchive@@AAEXPAXI@Z ; NArchive::NZip::CInArchive::SafeReadBytes(void *,uint)
.text:00000F48                 mov     ax, word ptr [ebp+var_C]
.text:00000F4C                 push    edx
.text:00000F4D                 mov     ecx, ebp
.text:00000F4F                 push    eax
.text:00000F50                 lea     edx, $LN5_0
.text:00000F56                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000F5B                 pop     eax
.text:00000F5C                 pop     edx
.text:00000F5D                 add     esp, 10h
.text:00000F60                 cmp     ebp, esp
.text:00000F62                 call    __RTC_CheckEsp
.text:00000F67                 mov     esp, ebp
.text:00000F69                 pop     ebp
.text:00000F6A                 retn
.text:00000F6A ?ReadUInt16@CInArchive@NZip@NArchive@@AAEGXZ endp
.text:00000F6A
.text:00000F6A ; ---------------------------------------------------------------------------
.text:00000F6B                 align 4
.text:00000F6C $LN5_0          dd 1                    ; DATA XREF: NArchive::NZip::CInArchive::ReadUInt16(void)+30o
.text:00000F70                 dd offset $LN4_0
.text:00000F74 $LN4_0          dd 0FFFFFFF4h, 2        ; DATA XREF: .text:00000F70o
.text:00000F7C                 dd offset $LN3_0
.text:00000F80 $LN3_0          dd 667562h, 3 dup(0CCCCCCCCh) ; DATA XREF: .text:00000F7Co
.text:00000F90
.text:00000F90 ; =============== S U B R O U T I N E =======================================
.text:00000F90
.text:00000F90 ; Attributes: bp-based frame
.text:00000F90
.text:00000F90 ; unsigned int __thiscall NArchive::NZip::CInArchive::ReadUInt32(NArchive::NZip::CInArchive *__hidden this)
.text:00000F90                 public ?ReadUInt32@CInArchive@NZip@NArchive@@AAEIXZ
.text:00000F90 ?ReadUInt32@CInArchive@NZip@NArchive@@AAEIXZ proc near
.text:00000F90                                         ; CODE XREF: NArchive::NZip::CInArchive::ReadExtra(uint,NArchive::NZip::CExtraBlock &,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &,uint &)+1FFp
.text:00000F90                                         ; NArchive::NZip::CInArchive::ReadLocalItemAfterCdItem(NArchive::NZip::CItemEx &)+F7p ...
.text:00000F90
.text:00000F90 var_10          = dword ptr -10h
.text:00000F90 var_C           = byte ptr -0Ch
.text:00000F90 var_8           = dword ptr -8
.text:00000F90 var_4           = dword ptr -4
.text:00000F90
.text:00000F90                 push    ebp
.text:00000F91                 mov     ebp, esp
.text:00000F93                 sub     esp, 10h
.text:00000F96                 mov     eax, 0CCCCCCCCh
.text:00000F9B                 mov     [ebp+var_10], eax
.text:00000F9E                 mov     dword ptr [ebp+var_C], eax
.text:00000FA1                 mov     [ebp+var_8], eax
.text:00000FA4                 mov     [ebp+var_4], eax
.text:00000FA7                 mov     [ebp+var_4], ecx
.text:00000FAA                 push    4               ; unsigned int
.text:00000FAC                 lea     eax, [ebp+var_C]
.text:00000FAF                 push    eax             ; unsigned __int8 *
.text:00000FB0                 mov     ecx, [ebp+var_4] ; this
.text:00000FB3                 call    ?SafeReadBytes@CInArchive@NZip@NArchive@@AAEXPAXI@Z ; NArchive::NZip::CInArchive::SafeReadBytes(void *,uint)
.text:00000FB8                 mov     eax, dword ptr [ebp+var_C]
.text:00000FBB                 push    edx
.text:00000FBC                 mov     ecx, ebp
.text:00000FBE                 push    eax
.text:00000FBF                 lea     edx, $LN5_1
.text:00000FC5                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000FCA                 pop     eax
.text:00000FCB                 pop     edx
.text:00000FCC                 add     esp, 10h
.text:00000FCF                 cmp     ebp, esp
.text:00000FD1                 call    __RTC_CheckEsp
.text:00000FD6                 mov     esp, ebp
.text:00000FD8                 pop     ebp
.text:00000FD9                 retn
.text:00000FD9 ?ReadUInt32@CInArchive@NZip@NArchive@@AAEIXZ endp
.text:00000FD9
.text:00000FD9 ; ---------------------------------------------------------------------------
.text:00000FDA                 align 4
.text:00000FDC $LN5_1          dd 1                    ; DATA XREF: NArchive::NZip::CInArchive::ReadUInt32(void)+2Fo
.text:00000FE0                 dd offset $LN4_1
.text:00000FE4 $LN4_1          dd 0FFFFFFF4h, 4        ; DATA XREF: .text:00000FE0o
.text:00000FEC                 dd offset $LN3_1
.text:00000FF0 $LN3_1          dd 667562h, 3 dup(0CCCCCCCCh) ; DATA XREF: .text:00000FECo
.text:00001000
.text:00001000 ; =============== S U B R O U T I N E =======================================
.text:00001000
.text:00001000 ; Attributes: bp-based frame
.text:00001000
.text:00001000 ; unsigned __int64 __thiscall NArchive::NZip::CInArchive::ReadUInt64(NArchive::NZip::CInArchive *__hidden this)
.text:00001000                 public ?ReadUInt64@CInArchive@NZip@NArchive@@AAE_KXZ
.text:00001000 ?ReadUInt64@CInArchive@NZip@NArchive@@AAE_KXZ proc near
.text:00001000                                         ; CODE XREF: NArchive::NZip::CInArchive::ReadExtra(uint,NArchive::NZip::CExtraBlock &,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &,uint &)+115p
.text:00001000                                         ; NArchive::NZip::CInArchive::ReadExtra(uint,NArchive::NZip::CExtraBlock &,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &,uint &)+168p ...
.text:00001000
.text:00001000 var_18          = dword ptr -18h
.text:00001000 var_14          = byte ptr -14h
.text:00001000 var_10          = dword ptr -10h
.text:00001000 var_C           = dword ptr -0Ch
.text:00001000 var_8           = dword ptr -8
.text:00001000 var_4           = dword ptr -4
.text:00001000
.text:00001000                 push    ebp
.text:00001001                 mov     ebp, esp
.text:00001003                 sub     esp, 18h
.text:00001006                 mov     eax, 0CCCCCCCCh
.text:0000100B                 mov     [ebp+var_18], eax
.text:0000100E                 mov     dword ptr [ebp+var_14], eax
.text:00001011                 mov     [ebp+var_10], eax
.text:00001014                 mov     [ebp+var_C], eax
.text:00001017                 mov     [ebp+var_8], eax
.text:0000101A                 mov     [ebp+var_4], eax
.text:0000101D                 mov     eax, dword ptr ds:___security_cookie
.text:00001022                 xor     eax, ebp
.text:00001024                 mov     [ebp+var_4], eax
.text:00001027                 mov     [ebp+var_8], ecx
.text:0000102A                 push    8               ; unsigned int
.text:0000102C                 lea     eax, [ebp+var_14]
.text:0000102F                 push    eax             ; unsigned __int8 *
.text:00001030                 mov     ecx, [ebp+var_8] ; this
.text:00001033                 call    ?SafeReadBytes@CInArchive@NZip@NArchive@@AAEXPAXI@Z ; NArchive::NZip::CInArchive::SafeReadBytes(void *,uint)
.text:00001038                 mov     eax, dword ptr [ebp+var_14]
.text:0000103B                 mov     edx, [ebp+var_10]
.text:0000103E                 push    edx
.text:0000103F                 mov     ecx, ebp
.text:00001041                 push    eax
.text:00001042                 lea     edx, $LN5_2
.text:00001048                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000104D                 pop     eax
.text:0000104E                 pop     edx
.text:0000104F                 mov     ecx, [ebp+var_4]
.text:00001052                 xor     ecx, ebp
.text:00001054                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00001059                 add     esp, 18h
.text:0000105C                 cmp     ebp, esp
.text:0000105E                 call    __RTC_CheckEsp
.text:00001063                 mov     esp, ebp
.text:00001065                 pop     ebp
.text:00001066                 retn
.text:00001066 ?ReadUInt64@CInArchive@NZip@NArchive@@AAE_KXZ endp
.text:00001066
.text:00001066 ; ---------------------------------------------------------------------------
.text:00001067                 align 4
.text:00001068 $LN5_2          dd 1                    ; DATA XREF: NArchive::NZip::CInArchive::ReadUInt64(void)+42o
.text:0000106C                 dd offset $LN4_2
.text:00001070 $LN4_2          dd 0FFFFFFECh, 8        ; DATA XREF: .text:0000106Co
.text:00001078                 dd offset $LN3_2
.text:0000107C $LN3_2          dd 667562h              ; DATA XREF: .text:00001078o
.text:00001080
.text:00001080 ; =============== S U B R O U T I N E =======================================
.text:00001080
.text:00001080 ; Attributes: bp-based frame
.text:00001080
.text:00001080 ; void __thiscall NArchive::NZip::CInArchive::Skip(NArchive::NZip::CInArchive *this, unsigned int)
.text:00001080                 public ?Skip@CInArchive@NZip@NArchive@@AAEXI@Z
.text:00001080 ?Skip@CInArchive@NZip@NArchive@@AAEXI@Z proc near
.text:00001080                                         ; CODE XREF: NArchive::NZip::CInArchive::ReadExtra(uint,NArchive::NZip::CExtraBlock &,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &,uint &)+9Ap
.text:00001080                                         ; NArchive::NZip::CInArchive::ReadExtra(uint,NArchive::NZip::CExtraBlock &,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &,uint &)+F2p ...
.text:00001080
.text:00001080 var_10          = dword ptr -10h
.text:00001080 var_C           = dword ptr -0Ch
.text:00001080 var_8           = dword ptr -8
.text:00001080 var_4           = dword ptr -4
.text:00001080 arg_0           = dword ptr  8
.text:00001080
.text:00001080                 push    ebp
.text:00001081                 mov     ebp, esp
.text:00001083                 sub     esp, 10h
.text:00001086                 mov     eax, 0CCCCCCCCh
.text:0000108B                 mov     [ebp+var_10], eax
.text:0000108E                 mov     [ebp+var_C], eax
.text:00001091                 mov     [ebp+var_8], eax
.text:00001094                 mov     [ebp+var_4], eax
.text:00001097                 mov     [ebp+var_4], ecx
.text:0000109A                 mov     eax, [ebp+var_4]
.text:0000109D                 movzx   ecx, byte ptr [eax+28h]
.text:000010A1                 test    ecx, ecx
.text:000010A3                 jz      short loc_10EE
.text:000010A5                 mov     edx, [ebp+arg_0]
.text:000010A8                 push    edx             ; unsigned int
.text:000010A9                 mov     ecx, [ebp+var_4] ; this
.text:000010AC                 call    ?Skip@CInBufferBase@@QAEII@Z ; CInBufferBase::Skip(uint)
.text:000010B1                 mov     [ebp+var_8], eax
.text:000010B4                 mov     eax, [ebp+var_8]
.text:000010B7                 xor     ecx, ecx
.text:000010B9                 mov     edx, [ebp+var_4]
.text:000010BC                 add     eax, [edx+30h]
.text:000010BF                 adc     ecx, [edx+34h]
.text:000010C2                 mov     edx, [ebp+var_4]
.text:000010C5                 mov     [edx+30h], eax
.text:000010C8                 mov     [edx+34h], ecx
.text:000010CB                 mov     eax, [ebp+var_8]
.text:000010CE                 cmp     eax, [ebp+arg_0]
.text:000010D1                 jz      short loc_10EC
.text:000010D3                 xor     ecx, ecx
.text:000010D5                 mov     byte ptr [ebp+var_10+2], cl
.text:000010D8                 mov     dl, byte ptr [ebp+var_10+2]
.text:000010DB                 mov     byte ptr [ebp+var_10+3], dl
.text:000010DE                 push    offset __TI1?AVCUnexpectEnd@NZip@NArchive@@
.text:000010E3                 lea     eax, [ebp+var_10+3]
.text:000010E6                 push    eax
.text:000010E7                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:000010EC ; ---------------------------------------------------------------------------
.text:000010EC
.text:000010EC loc_10EC:                               ; CODE XREF: NArchive::NZip::CInArchive::Skip(uint)+51j
.text:000010EC                 jmp     short loc_1112
.text:000010EE ; ---------------------------------------------------------------------------
.text:000010EE
.text:000010EE loc_10EE:                               ; CODE XREF: NArchive::NZip::CInArchive::Skip(uint)+23j
.text:000010EE                 mov     [ebp+var_C], 0
.text:000010F5                 jmp     short loc_1100
.text:000010F7 ; ---------------------------------------------------------------------------
.text:000010F7
.text:000010F7 loc_10F7:                               ; CODE XREF: NArchive::NZip::CInArchive::Skip(uint)+90j
.text:000010F7                 mov     ecx, [ebp+var_C]
.text:000010FA                 add     ecx, 1
.text:000010FD                 mov     [ebp+var_C], ecx
.text:00001100
.text:00001100 loc_1100:                               ; CODE XREF: NArchive::NZip::CInArchive::Skip(uint)+75j
.text:00001100                 mov     edx, [ebp+var_C]
.text:00001103                 cmp     edx, [ebp+arg_0]
.text:00001106                 jnb     short loc_1112
.text:00001108                 mov     ecx, [ebp+var_4] ; this
.text:0000110B                 call    ?ReadByte@CInArchive@NZip@NArchive@@AAEEXZ ; NArchive::NZip::CInArchive::ReadByte(void)
.text:00001110                 jmp     short loc_10F7
.text:00001112 ; ---------------------------------------------------------------------------
.text:00001112
.text:00001112 loc_1112:                               ; CODE XREF: NArchive::NZip::CInArchive::Skip(uint):loc_10ECj
.text:00001112                                         ; NArchive::NZip::CInArchive::Skip(uint)+86j
.text:00001112                 add     esp, 10h
.text:00001115                 cmp     ebp, esp
.text:00001117                 call    __RTC_CheckEsp
.text:0000111C                 mov     esp, ebp
.text:0000111E                 pop     ebp
.text:0000111F                 retn    4
.text:0000111F ?Skip@CInArchive@NZip@NArchive@@AAEXI@Z endp
.text:0000111F
.text:0000111F ; ---------------------------------------------------------------------------
.text:00001122                 align 10h
.text:00001130
.text:00001130 ; =============== S U B R O U T I N E =======================================
.text:00001130
.text:00001130 ; Attributes: bp-based frame
.text:00001130
.text:00001130 ; void __thiscall NArchive::NZip::CInArchive::Skip64(NArchive::NZip::CInArchive *this, unsigned __int64)
.text:00001130                 public ?Skip64@CInArchive@NZip@NArchive@@AAEX_K@Z
.text:00001130 ?Skip64@CInArchive@NZip@NArchive@@AAEX_K@Z proc near
.text:00001130                                         ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+7E2p
.text:00001130
.text:00001130 var_C           = dword ptr -0Ch
.text:00001130 var_8           = dword ptr -8
.text:00001130 var_4           = dword ptr -4
.text:00001130 arg_0           = qword ptr  8
.text:00001130
.text:00001130                 push    ebp
.text:00001131                 mov     ebp, esp
.text:00001133                 sub     esp, 0Ch
.text:00001136                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000113D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001144                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000114B                 mov     [ebp+var_4], ecx
.text:0000114E                 mov     [ebp+var_C], 0
.text:00001155                 mov     [ebp+var_8], 0
.text:0000115C                 jmp     short loc_1170
.text:0000115E ; ---------------------------------------------------------------------------
.text:0000115E
.text:0000115E loc_115E:                               ; CODE XREF: NArchive::NZip::CInArchive::Skip64(unsigned __int64)+5Aj
.text:0000115E                 mov     eax, [ebp+var_C]
.text:00001161                 add     eax, 1
.text:00001164                 mov     ecx, [ebp+var_8]
.text:00001167                 adc     ecx, 0
.text:0000116A                 mov     [ebp+var_C], eax
.text:0000116D                 mov     [ebp+var_8], ecx
.text:00001170
.text:00001170 loc_1170:                               ; CODE XREF: NArchive::NZip::CInArchive::Skip64(unsigned __int64)+2Cj
.text:00001170                 mov     edx, [ebp+var_8]
.text:00001173                 cmp     edx, dword ptr [ebp+arg_0+4]
.text:00001176                 ja      short loc_118C
.text:00001178                 jb      short loc_1182
.text:0000117A                 mov     eax, [ebp+var_C]
.text:0000117D                 cmp     eax, dword ptr [ebp+arg_0]
.text:00001180                 jnb     short loc_118C
.text:00001182
.text:00001182 loc_1182:                               ; CODE XREF: NArchive::NZip::CInArchive::Skip64(unsigned __int64)+48j
.text:00001182                 mov     ecx, [ebp+var_4] ; this
.text:00001185                 call    ?ReadByte@CInArchive@NZip@NArchive@@AAEEXZ ; NArchive::NZip::CInArchive::ReadByte(void)
.text:0000118A                 jmp     short loc_115E
.text:0000118C ; ---------------------------------------------------------------------------
.text:0000118C
.text:0000118C loc_118C:                               ; CODE XREF: NArchive::NZip::CInArchive::Skip64(unsigned __int64)+46j
.text:0000118C                                         ; NArchive::NZip::CInArchive::Skip64(unsigned __int64)+50j
.text:0000118C                 add     esp, 0Ch
.text:0000118F                 cmp     ebp, esp
.text:00001191                 call    __RTC_CheckEsp
.text:00001196                 mov     esp, ebp
.text:00001198                 pop     ebp
.text:00001199                 retn    8
.text:00001199 ?Skip64@CInArchive@NZip@NArchive@@AAEX_K@Z endp
.text:00001199
.text:00001199 ; ---------------------------------------------------------------------------
.text:0000119C                 align 10h
.text:000011A0
.text:000011A0 ; =============== S U B R O U T I N E =======================================
.text:000011A0
.text:000011A0 ; Attributes: bp-based frame
.text:000011A0
.text:000011A0 ; void __thiscall NArchive::NZip::CInArchive::ReadFileName(NArchive::NZip::CInArchive *this, unsigned int, struct AString *)
.text:000011A0                 public ?ReadFileName@CInArchive@NZip@NArchive@@AAEXIAAVAString@@@Z
.text:000011A0 ?ReadFileName@CInArchive@NZip@NArchive@@AAEXIAAVAString@@@Z proc near
.text:000011A0                                         ; CODE XREF: NArchive::NZip::CInArchive::ReadLocalItem(NArchive::NZip::CItemEx &)+DEp
.text:000011A0                                         ; NArchive::NZip::CInArchive::ReadCdItem(NArchive::NZip::CItemEx &)+EFp
.text:000011A0
.text:000011A0 var_8           = dword ptr -8
.text:000011A0 var_4           = dword ptr -4
.text:000011A0 arg_0           = dword ptr  8
.text:000011A0 arg_4           = dword ptr  0Ch
.text:000011A0
.text:000011A0                 push    ebp
.text:000011A1                 mov     ebp, esp
.text:000011A3                 sub     esp, 8
.text:000011A6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000011AD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000011B4                 mov     [ebp+var_4], ecx
.text:000011B7                 cmp     [ebp+arg_0], 0
.text:000011BB                 jnz     short loc_11C7
.text:000011BD                 mov     ecx, [ebp+arg_4] ; this
.text:000011C0                 call    ?Empty@AString@@QAEXXZ ; AString::Empty(void)
.text:000011C5                 jmp     short loc_11F2
.text:000011C7 ; ---------------------------------------------------------------------------
.text:000011C7
.text:000011C7 loc_11C7:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadFileName(uint,AString &)+1Bj
.text:000011C7                 mov     eax, [ebp+arg_0]
.text:000011CA                 push    eax             ; unsigned int
.text:000011CB                 mov     ecx, [ebp+arg_4] ; this
.text:000011CE                 call    ?GetBuf@AString@@QAEPADI@Z ; AString::GetBuf(uint)
.text:000011D3                 mov     [ebp+var_8], eax
.text:000011D6                 mov     ecx, [ebp+arg_0]
.text:000011D9                 push    ecx             ; unsigned int
.text:000011DA                 mov     edx, [ebp+var_8]
.text:000011DD                 push    edx             ; unsigned __int8 *
.text:000011DE                 mov     ecx, [ebp+var_4] ; this
.text:000011E1                 call    ?SafeReadBytes@CInArchive@NZip@NArchive@@AAEXPAXI@Z ; NArchive::NZip::CInArchive::SafeReadBytes(void *,uint)
.text:000011E6                 mov     eax, [ebp+arg_0]
.text:000011E9                 push    eax             ; unsigned int
.text:000011EA                 mov     ecx, [ebp+arg_4] ; this
.text:000011ED                 call    ?ReleaseBuf_CalcLen@AString@@QAEXI@Z ; AString::ReleaseBuf_CalcLen(uint)
.text:000011F2
.text:000011F2 loc_11F2:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadFileName(uint,AString &)+25j
.text:000011F2                 add     esp, 8
.text:000011F5                 cmp     ebp, esp
.text:000011F7                 call    __RTC_CheckEsp
.text:000011FC                 mov     esp, ebp
.text:000011FE                 pop     ebp
.text:000011FF                 retn    8
.text:000011FF ?ReadFileName@CInArchive@NZip@NArchive@@AAEXIAAVAString@@@Z endp
.text:000011FF
.text:000011FF ; ---------------------------------------------------------------------------
.text:00001202                 align 10h
.text:00001210
.text:00001210 ; =============== S U B R O U T I N E =======================================
.text:00001210
.text:00001210 ; Attributes: bp-based frame
.text:00001210
.text:00001210 ; bool __thiscall NArchive::NZip::CInArchive::ReadExtra(NArchive::NZip::CInArchive *this, unsigned int, struct NArchive::NZip::CExtraBlock *, unsigned __int64 *, unsigned __int64 *, unsigned __int64 *, unsigned int *)
.text:00001210                 public ?ReadExtra@CInArchive@NZip@NArchive@@AAE_NIAAUCExtraBlock@23@AA_K11AAI@Z
.text:00001210 ?ReadExtra@CInArchive@NZip@NArchive@@AAE_NIAAUCExtraBlock@23@AA_K11AAI@Z proc near
.text:00001210                                         ; CODE XREF: NArchive::NZip::CInArchive::ReadLocalItem(NArchive::NZip::CItemEx &)+132p
.text:00001210                                         ; NArchive::NZip::CInArchive::ReadCdItem(NArchive::NZip::CItemEx &)+124p
.text:00001210
.text:00001210 var_3C          = dword ptr -3Ch
.text:00001210 var_38          = dword ptr -38h
.text:00001210 var_34          = dword ptr -34h
.text:00001210 var_2E          = byte ptr -2Eh
.text:00001210 var_2D          = byte ptr -2Dh
.text:00001210 var_2C          = dword ptr -2Ch
.text:00001210 var_24          = word ptr -24h
.text:00001210 var_20          = byte ptr -20h
.text:00001210 var_14          = dword ptr -14h
.text:00001210 var_10          = dword ptr -10h
.text:00001210 var_C           = dword ptr -0Ch
.text:00001210 var_4           = dword ptr -4
.text:00001210 arg_0           = dword ptr  8
.text:00001210 arg_4           = dword ptr  0Ch
.text:00001210 arg_8           = dword ptr  10h
.text:00001210 arg_C           = dword ptr  14h
.text:00001210 arg_10          = dword ptr  18h
.text:00001210 arg_14          = dword ptr  1Ch
.text:00001210
.text:00001210                 push    ebp
.text:00001211                 mov     ebp, esp
.text:00001213                 push    0FFFFFFFFh
.text:00001215                 push    offset __ehhandler$?ReadExtra@CInArchive@NZip@NArchive@@AAE_NIAAUCExtraBlock@23@AA_K11AAI@Z
.text:0000121A                 mov     eax, large fs:0
.text:00001220                 push    eax
.text:00001221                 sub     esp, 30h
.text:00001224                 push    edi
.text:00001225                 push    ecx
.text:00001226                 lea     edi, [ebp+var_3C]
.text:00001229                 mov     ecx, 0Ch
.text:0000122E                 mov     eax, 0CCCCCCCCh
.text:00001233                 rep stosd
.text:00001235                 pop     ecx
.text:00001236                 mov     eax, dword ptr ds:___security_cookie
.text:0000123B                 xor     eax, ebp
.text:0000123D                 push    eax
.text:0000123E                 lea     eax, [ebp+var_C]
.text:00001241                 mov     large fs:0, eax
.text:00001247                 mov     [ebp+var_10], ecx
.text:0000124A                 mov     ecx, [ebp+arg_4] ; this
.text:0000124D                 call    ?Clear@CExtraBlock@NZip@NArchive@@QAEXXZ ; NArchive::NZip::CExtraBlock::Clear(void)
.text:00001252                 mov     eax, [ebp+arg_0]
.text:00001255                 mov     [ebp+var_14], eax
.text:00001258
.text:00001258 loc_1258:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadExtra(uint,NArchive::NZip::CExtraBlock &,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &,uint &)+25Dj
.text:00001258                 cmp     [ebp+var_14], 4
.text:0000125C                 jb      loc_1472
.text:00001262                 lea     ecx, [ebp+var_24] ; this
.text:00001265                 call    ??0CExtraSubBlock@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CExtraSubBlock::CExtraSubBlock(void)
.text:0000126A                 mov     [ebp+var_4], 0
.text:00001271                 mov     ecx, [ebp+var_10] ; this
.text:00001274                 call    ?ReadUInt16@CInArchive@NZip@NArchive@@AAEGXZ ; NArchive::NZip::CInArchive::ReadUInt16(void)
.text:00001279                 mov     [ebp+var_24], ax
.text:0000127D                 mov     ecx, [ebp+var_10] ; this
.text:00001280                 call    ?ReadUInt16@CInArchive@NZip@NArchive@@AAEGXZ ; NArchive::NZip::CInArchive::ReadUInt16(void)
.text:00001285                 movzx   ecx, ax
.text:00001288                 mov     [ebp+var_2C], ecx
.text:0000128B                 mov     edx, [ebp+var_14]
.text:0000128E                 sub     edx, 4
.text:00001291                 mov     [ebp+var_14], edx
.text:00001294                 mov     eax, [ebp+var_2C]
.text:00001297                 cmp     eax, [ebp+var_14]
.text:0000129A                 jbe     short loc_12CA
.text:0000129C                 mov     ecx, [ebp+var_10]
.text:0000129F                 mov     byte ptr [ecx+7Bh], 1
.text:000012A3                 mov     edx, [ebp+var_14]
.text:000012A6                 push    edx             ; unsigned int
.text:000012A7                 mov     ecx, [ebp+var_10] ; this
.text:000012AA                 call    ?Skip@CInArchive@NZip@NArchive@@AAEXI@Z ; NArchive::NZip::CInArchive::Skip(uint)
.text:000012AF                 mov     [ebp+var_2D], 0
.text:000012B3                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000012BA                 lea     ecx, [ebp+var_24] ; this
.text:000012BD                 call    ??1CExtraSubBlock@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CExtraSubBlock::~CExtraSubBlock(void)
.text:000012C2                 mov     al, [ebp+var_2D]
.text:000012C5                 jmp     loc_148D
.text:000012CA ; ---------------------------------------------------------------------------
.text:000012CA
.text:000012CA loc_12CA:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadExtra(uint,NArchive::NZip::CExtraBlock &,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &,uint &)+8Aj
.text:000012CA                 movzx   eax, [ebp+var_24]
.text:000012CE                 cmp     eax, 1
.text:000012D1                 jnz     loc_1439
.text:000012D7                 mov     ecx, [ebp+arg_8]
.text:000012DA                 mov     [ebp+var_34], ecx
.text:000012DD                 mov     edx, [ebp+var_34]
.text:000012E0                 cmp     dword ptr [edx], 0FFFFFFFFh
.text:000012E3                 jnz     short loc_1344
.text:000012E5                 mov     eax, [ebp+var_34]
.text:000012E8                 cmp     dword ptr [eax+4], 0
.text:000012EC                 jnz     short loc_1344
.text:000012EE                 cmp     [ebp+var_2C], 8
.text:000012F2                 jnb     short loc_1322
.text:000012F4                 mov     ecx, [ebp+var_10]
.text:000012F7                 mov     byte ptr [ecx+7Bh], 1
.text:000012FB                 mov     edx, [ebp+var_14]
.text:000012FE                 push    edx             ; unsigned int
.text:000012FF                 mov     ecx, [ebp+var_10] ; this
.text:00001302                 call    ?Skip@CInArchive@NZip@NArchive@@AAEXI@Z ; NArchive::NZip::CInArchive::Skip(uint)
.text:00001307                 mov     [ebp+var_2E], 0
.text:0000130B                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001312                 lea     ecx, [ebp+var_24] ; this
.text:00001315                 call    ??1CExtraSubBlock@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CExtraSubBlock::~CExtraSubBlock(void)
.text:0000131A                 mov     al, [ebp+var_2E]
.text:0000131D                 jmp     loc_148D
.text:00001322 ; ---------------------------------------------------------------------------
.text:00001322
.text:00001322 loc_1322:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadExtra(uint,NArchive::NZip::CExtraBlock &,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &,uint &)+E2j
.text:00001322                 mov     ecx, [ebp+var_10] ; this
.text:00001325                 call    ?ReadUInt64@CInArchive@NZip@NArchive@@AAE_KXZ ; NArchive::NZip::CInArchive::ReadUInt64(void)
.text:0000132A                 mov     ecx, [ebp+arg_8]
.text:0000132D                 mov     [ecx], eax
.text:0000132F                 mov     [ecx+4], edx
.text:00001332                 mov     edx, [ebp+var_14]
.text:00001335                 sub     edx, 8
.text:00001338                 mov     [ebp+var_14], edx
.text:0000133B                 mov     eax, [ebp+var_2C]
.text:0000133E                 sub     eax, 8
.text:00001341                 mov     [ebp+var_2C], eax
.text:00001344
.text:00001344 loc_1344:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadExtra(uint,NArchive::NZip::CExtraBlock &,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &,uint &)+D3j
.text:00001344                                         ; NArchive::NZip::CInArchive::ReadExtra(uint,NArchive::NZip::CExtraBlock &,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &,uint &)+DCj
.text:00001344                 mov     ecx, [ebp+arg_C]
.text:00001347                 mov     [ebp+var_38], ecx
.text:0000134A                 mov     edx, [ebp+var_38]
.text:0000134D                 cmp     dword ptr [edx], 0FFFFFFFFh
.text:00001350                 jnz     short loc_1397
.text:00001352                 mov     eax, [ebp+var_38]
.text:00001355                 cmp     dword ptr [eax+4], 0
.text:00001359                 jnz     short loc_1397
.text:0000135B                 cmp     [ebp+var_2C], 8
.text:0000135F                 jnb     short loc_1375
.text:00001361                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001368                 lea     ecx, [ebp+var_24] ; this
.text:0000136B                 call    ??1CExtraSubBlock@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CExtraSubBlock::~CExtraSubBlock(void)
.text:00001370                 jmp     loc_1472
.text:00001375 ; ---------------------------------------------------------------------------
.text:00001375
.text:00001375 loc_1375:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadExtra(uint,NArchive::NZip::CExtraBlock &,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &,uint &)+14Fj
.text:00001375                 mov     ecx, [ebp+var_10] ; this
.text:00001378                 call    ?ReadUInt64@CInArchive@NZip@NArchive@@AAE_KXZ ; NArchive::NZip::CInArchive::ReadUInt64(void)
.text:0000137D                 mov     ecx, [ebp+arg_C]
.text:00001380                 mov     [ecx], eax
.text:00001382                 mov     [ecx+4], edx
.text:00001385                 mov     edx, [ebp+var_14]
.text:00001388                 sub     edx, 8
.text:0000138B                 mov     [ebp+var_14], edx
.text:0000138E                 mov     eax, [ebp+var_2C]
.text:00001391                 sub     eax, 8
.text:00001394                 mov     [ebp+var_2C], eax
.text:00001397
.text:00001397 loc_1397:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadExtra(uint,NArchive::NZip::CExtraBlock &,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &,uint &)+140j
.text:00001397                                         ; NArchive::NZip::CInArchive::ReadExtra(uint,NArchive::NZip::CExtraBlock &,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &,uint &)+149j
.text:00001397                 mov     ecx, [ebp+arg_10]
.text:0000139A                 mov     [ebp+var_3C], ecx
.text:0000139D                 mov     edx, [ebp+var_3C]
.text:000013A0                 cmp     dword ptr [edx], 0FFFFFFFFh
.text:000013A3                 jnz     short loc_13EA
.text:000013A5                 mov     eax, [ebp+var_3C]
.text:000013A8                 cmp     dword ptr [eax+4], 0
.text:000013AC                 jnz     short loc_13EA
.text:000013AE                 cmp     [ebp+var_2C], 8
.text:000013B2                 jnb     short loc_13C8
.text:000013B4                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000013BB                 lea     ecx, [ebp+var_24] ; this
.text:000013BE                 call    ??1CExtraSubBlock@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CExtraSubBlock::~CExtraSubBlock(void)
.text:000013C3                 jmp     loc_1472
.text:000013C8 ; ---------------------------------------------------------------------------
.text:000013C8
.text:000013C8 loc_13C8:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadExtra(uint,NArchive::NZip::CExtraBlock &,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &,uint &)+1A2j
.text:000013C8                 mov     ecx, [ebp+var_10] ; this
.text:000013CB                 call    ?ReadUInt64@CInArchive@NZip@NArchive@@AAE_KXZ ; NArchive::NZip::CInArchive::ReadUInt64(void)
.text:000013D0                 mov     ecx, [ebp+arg_10]
.text:000013D3                 mov     [ecx], eax
.text:000013D5                 mov     [ecx+4], edx
.text:000013D8                 mov     edx, [ebp+var_14]
.text:000013DB                 sub     edx, 8
.text:000013DE                 mov     [ebp+var_14], edx
.text:000013E1                 mov     eax, [ebp+var_2C]
.text:000013E4                 sub     eax, 8
.text:000013E7                 mov     [ebp+var_2C], eax
.text:000013EA
.text:000013EA loc_13EA:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadExtra(uint,NArchive::NZip::CExtraBlock &,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &,uint &)+193j
.text:000013EA                                         ; NArchive::NZip::CInArchive::ReadExtra(uint,NArchive::NZip::CExtraBlock &,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &,uint &)+19Cj
.text:000013EA                 mov     ecx, [ebp+arg_14]
.text:000013ED                 cmp     dword ptr [ecx], 0FFFFh
.text:000013F3                 jnz     short loc_142B
.text:000013F5                 cmp     [ebp+var_2C], 4
.text:000013F9                 jnb     short loc_140C
.text:000013FB                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001402                 lea     ecx, [ebp+var_24] ; this
.text:00001405                 call    ??1CExtraSubBlock@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CExtraSubBlock::~CExtraSubBlock(void)
.text:0000140A                 jmp     short loc_1472
.text:0000140C ; ---------------------------------------------------------------------------
.text:0000140C
.text:0000140C loc_140C:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadExtra(uint,NArchive::NZip::CExtraBlock &,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &,uint &)+1E9j
.text:0000140C                 mov     ecx, [ebp+var_10] ; this
.text:0000140F                 call    ?ReadUInt32@CInArchive@NZip@NArchive@@AAEIXZ ; NArchive::NZip::CInArchive::ReadUInt32(void)
.text:00001414                 mov     edx, [ebp+arg_14]
.text:00001417                 mov     [edx], eax
.text:00001419                 mov     eax, [ebp+var_14]
.text:0000141C                 sub     eax, 4
.text:0000141F                 mov     [ebp+var_14], eax
.text:00001422                 mov     ecx, [ebp+var_2C]
.text:00001425                 sub     ecx, 4
.text:00001428                 mov     [ebp+var_2C], ecx
.text:0000142B
.text:0000142B loc_142B:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadExtra(uint,NArchive::NZip::CExtraBlock &,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &,uint &)+1E3j
.text:0000142B                 mov     edx, [ebp+var_2C]
.text:0000142E                 push    edx             ; unsigned int
.text:0000142F                 mov     ecx, [ebp+var_10] ; this
.text:00001432                 call    ?Skip@CInArchive@NZip@NArchive@@AAEXI@Z ; NArchive::NZip::CInArchive::Skip(uint)
.text:00001437                 jmp     short loc_1455
.text:00001439 ; ---------------------------------------------------------------------------
.text:00001439
.text:00001439 loc_1439:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadExtra(uint,NArchive::NZip::CExtraBlock &,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &,uint &)+C1j
.text:00001439                 mov     eax, [ebp+var_2C]
.text:0000143C                 push    eax
.text:0000143D                 lea     ecx, [ebp+var_20]
.text:00001440                 push    ecx
.text:00001441                 mov     ecx, [ebp+var_10]
.text:00001444                 call    ?ReadBuffer@CInArchive@NZip@NArchive@@AAEXAAV?$CBuffer@E@@I@Z ; NArchive::NZip::CInArchive::ReadBuffer(CBuffer<uchar> &,uint)
.text:00001449                 lea     edx, [ebp+var_24]
.text:0000144C                 push    edx             ; struct NArchive::NZip::CExtraSubBlock *
.text:0000144D                 mov     ecx, [ebp+arg_4]
.text:00001450                 call    ?Add@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEIABUCExtraSubBlock@NZip@NArchive@@@Z ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Add(NArchive::NZip::CExtraSubBlock const &)
.text:00001455
.text:00001455 loc_1455:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadExtra(uint,NArchive::NZip::CExtraBlock &,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &,uint &)+227j
.text:00001455                 mov     eax, [ebp+var_14]
.text:00001458                 sub     eax, [ebp+var_2C]
.text:0000145B                 mov     [ebp+var_14], eax
.text:0000145E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001465                 lea     ecx, [ebp+var_24] ; this
.text:00001468                 call    ??1CExtraSubBlock@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CExtraSubBlock::~CExtraSubBlock(void)
.text:0000146D                 jmp     loc_1258
.text:00001472 ; ---------------------------------------------------------------------------
.text:00001472
.text:00001472 loc_1472:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadExtra(uint,NArchive::NZip::CExtraBlock &,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &,uint &)+4Cj
.text:00001472                                         ; NArchive::NZip::CInArchive::ReadExtra(uint,NArchive::NZip::CExtraBlock &,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &,uint &)+160j ...
.text:00001472                 cmp     [ebp+var_14], 0
.text:00001476                 jz      short loc_147F
.text:00001478                 mov     ecx, [ebp+var_10]
.text:0000147B                 mov     byte ptr [ecx+7Ch], 1
.text:0000147F
.text:0000147F loc_147F:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadExtra(uint,NArchive::NZip::CExtraBlock &,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &,uint &)+266j
.text:0000147F                 mov     edx, [ebp+var_14]
.text:00001482                 push    edx             ; unsigned int
.text:00001483                 mov     ecx, [ebp+var_10] ; this
.text:00001486                 call    ?Skip@CInArchive@NZip@NArchive@@AAEXI@Z ; NArchive::NZip::CInArchive::Skip(uint)
.text:0000148B                 mov     al, 1
.text:0000148D
.text:0000148D loc_148D:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadExtra(uint,NArchive::NZip::CExtraBlock &,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &,uint &)+B5j
.text:0000148D                                         ; NArchive::NZip::CInArchive::ReadExtra(uint,NArchive::NZip::CExtraBlock &,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &,uint &)+10Dj
.text:0000148D                 push    edx
.text:0000148E                 mov     ecx, ebp
.text:00001490                 push    eax
.text:00001491                 lea     edx, $LN21
.text:00001497                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000149C                 pop     eax
.text:0000149D                 pop     edx
.text:0000149E                 mov     ecx, [ebp+var_C]
.text:000014A1                 mov     large fs:0, ecx
.text:000014A8                 pop     ecx
.text:000014A9                 pop     edi
.text:000014AA                 add     esp, 3Ch
.text:000014AD                 cmp     ebp, esp
.text:000014AF                 call    __RTC_CheckEsp
.text:000014B4                 mov     esp, ebp
.text:000014B6                 pop     ebp
.text:000014B7                 retn    18h
.text:000014B7 ?ReadExtra@CInArchive@NZip@NArchive@@AAE_NIAAUCExtraBlock@23@AA_K11AAI@Z endp
.text:000014B7
.text:000014B7 ; ---------------------------------------------------------------------------
.text:000014BA                 align 4
.text:000014BC $LN21           dd 1                    ; DATA XREF: NArchive::NZip::CInArchive::ReadExtra(uint,NArchive::NZip::CExtraBlock &,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &,uint &)+281o
.text:000014C0                 dd offset $LN20
.text:000014C4 $LN20           dd 0FFFFFFDCh, 0Ch      ; DATA XREF: .text:000014C0o
.text:000014CC                 dd offset $LN18         ; "subBlock"
.text:000014D0 $LN18           db 'subBlock',0         ; DATA XREF: .text:000014CCo
.text:000014D9                 align 10h
.text:000014E0
.text:000014E0 ; =============== S U B R O U T I N E =======================================
.text:000014E0
.text:000014E0 ; Attributes: bp-based frame
.text:000014E0
.text:000014E0 ; bool __thiscall NArchive::NZip::CInArchive::ReadLocalItem(NArchive::NZip::CInArchive *this, struct NArchive::NZip::CItemEx *)
.text:000014E0                 public ?ReadLocalItem@CInArchive@NZip@NArchive@@AAE_NAAVCItemEx@23@@Z
.text:000014E0 ?ReadLocalItem@CInArchive@NZip@NArchive@@AAE_NAAVCItemEx@23@@Z proc near
.text:000014E0                                         ; CODE XREF: NArchive::NZip::CInArchive::ReadLocalItemAfterCdItem(NArchive::NZip::CItemEx &)+13Cp
.text:000014E0                                         ; NArchive::NZip::CInArchive::ReadLocals(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+96p ...
.text:000014E0
.text:000014E0 var_58          = byte ptr -58h
.text:000014E0 var_54          = dword ptr -54h
.text:000014E0 var_48          = qword ptr -48h
.text:000014E0 var_3C          = dword ptr -3Ch
.text:000014E0 var_38          = dword ptr -38h
.text:000014E0 var_34          = dword ptr -34h
.text:000014E0 var_2C          = byte ptr -2Ch
.text:000014E0 var_2B          = byte ptr -2Bh
.text:000014E0 var_2A          = word ptr -2Ah
.text:000014E0 var_28          = word ptr -28h
.text:000014E0 var_26          = dword ptr -26h
.text:000014E0 var_22          = dword ptr -22h
.text:000014E0 var_1E          = dword ptr -1Eh
.text:000014E0 var_1A          = dword ptr -1Ah
.text:000014E0 var_16          = word ptr -16h
.text:000014E0 var_14          = word ptr -14h
.text:000014E0 var_C           = dword ptr -0Ch
.text:000014E0 var_8           = dword ptr -8
.text:000014E0 var_4           = dword ptr -4
.text:000014E0 arg_0           = dword ptr  8
.text:000014E0
.text:000014E0                 push    ebp
.text:000014E1                 mov     ebp, esp
.text:000014E3                 sub     esp, 58h
.text:000014E6                 push    edi
.text:000014E7                 push    ecx
.text:000014E8                 lea     edi, [ebp+var_58]
.text:000014EB                 mov     ecx, 16h
.text:000014F0                 mov     eax, 0CCCCCCCCh
.text:000014F5                 rep stosd
.text:000014F7                 pop     ecx
.text:000014F8                 mov     eax, dword ptr ds:___security_cookie
.text:000014FD                 xor     eax, ebp
.text:000014FF                 mov     [ebp+var_4], eax
.text:00001502                 mov     [ebp+var_8], ecx
.text:00001505                 mov     [ebp+var_C], 1Ah
.text:0000150C                 push    1Ah             ; unsigned int
.text:0000150E                 lea     eax, [ebp+var_2C]
.text:00001511                 push    eax             ; unsigned __int8 *
.text:00001512                 mov     ecx, [ebp+var_8] ; this
.text:00001515                 call    ?SafeReadBytes@CInArchive@NZip@NArchive@@AAEXPAXI@Z ; NArchive::NZip::CInArchive::SafeReadBytes(void *,uint)
.text:0000151A                 mov     [ebp+var_34], 0
.text:00001521                 jmp     short loc_152C
.text:00001523 ; ---------------------------------------------------------------------------
.text:00001523
.text:00001523 loc_1523:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadLocalItem(NArchive::NZip::CItemEx &)+5Ej
.text:00001523                 mov     ecx, [ebp+var_34]
.text:00001526                 add     ecx, 1
.text:00001529                 mov     [ebp+var_34], ecx
.text:0000152C
.text:0000152C loc_152C:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadLocalItem(NArchive::NZip::CItemEx &)+41j
.text:0000152C                 cmp     [ebp+var_34], 1Ah
.text:00001530                 jnb     short loc_1540
.text:00001532                 mov     edx, [ebp+var_34]
.text:00001535                 movzx   eax, [ebp+edx+var_2C]
.text:0000153A                 test    eax, eax
.text:0000153C                 jnz     short loc_1540
.text:0000153E                 jmp     short loc_1523
.text:00001540 ; ---------------------------------------------------------------------------
.text:00001540
.text:00001540 loc_1540:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadLocalItem(NArchive::NZip::CItemEx &)+50j
.text:00001540                                         ; NArchive::NZip::CInArchive::ReadLocalItem(NArchive::NZip::CItemEx &)+5Cj
.text:00001540                 cmp     [ebp+var_34], 1Ah
.text:00001544                 jnz     short loc_154D
.text:00001546                 xor     al, al
.text:00001548                 jmp     loc_1655
.text:0000154D ; ---------------------------------------------------------------------------
.text:0000154D
.text:0000154D loc_154D:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadLocalItem(NArchive::NZip::CItemEx &)+64j
.text:0000154D                 mov     ecx, [ebp+arg_0]
.text:00001550                 mov     dl, [ebp+var_2C]
.text:00001553                 mov     [ecx+4], dl
.text:00001556                 mov     eax, [ebp+arg_0]
.text:00001559                 mov     cl, [ebp+var_2B]
.text:0000155C                 mov     [eax+5], cl
.text:0000155F                 mov     edx, [ebp+arg_0]
.text:00001562                 mov     ax, [ebp+var_2A]
.text:00001566                 mov     [edx], ax
.text:00001569                 mov     ecx, [ebp+arg_0]
.text:0000156C                 mov     dx, [ebp+var_28]
.text:00001570                 mov     [ecx+2], dx
.text:00001574                 mov     eax, [ebp+arg_0]
.text:00001577                 mov     ecx, [ebp+var_26]
.text:0000157A                 mov     [eax+18h], ecx
.text:0000157D                 mov     edx, [ebp+arg_0]
.text:00001580                 mov     eax, [ebp+var_22]
.text:00001583                 mov     [edx+1Ch], eax
.text:00001586                 mov     ecx, [ebp+var_1E]
.text:00001589                 xor     edx, edx
.text:0000158B                 mov     eax, [ebp+arg_0]
.text:0000158E                 mov     [eax+10h], ecx
.text:00001591                 mov     [eax+14h], edx
.text:00001594                 mov     ecx, [ebp+var_1A]
.text:00001597                 xor     edx, edx
.text:00001599                 mov     eax, [ebp+arg_0]
.text:0000159C                 mov     [eax+8], ecx
.text:0000159F                 mov     [eax+0Ch], edx
.text:000015A2                 movzx   ecx, [ebp+var_16]
.text:000015A6                 mov     [ebp+var_38], ecx
.text:000015A9                 movzx   edx, [ebp+var_14]
.text:000015AD                 mov     [ebp+var_3C], edx
.text:000015B0                 mov     eax, [ebp+arg_0]
.text:000015B3                 add     eax, 20h ; ' '
.text:000015B6                 push    eax             ; struct AString *
.text:000015B7                 mov     ecx, [ebp+var_38]
.text:000015BA                 push    ecx             ; unsigned int
.text:000015BB                 mov     ecx, [ebp+var_8] ; this
.text:000015BE                 call    ?ReadFileName@CInArchive@NZip@NArchive@@AAEXIAAVAString@@@Z ; NArchive::NZip::CInArchive::ReadFileName(uint,AString &)
.text:000015C3                 mov     edx, [ebp+var_3C]
.text:000015C6                 mov     eax, [ebp+var_38]
.text:000015C9                 lea     ecx, [eax+edx+1Eh]
.text:000015CD                 mov     edx, [ebp+arg_0]
.text:000015D0                 mov     [edx+60h], ecx
.text:000015D3                 cmp     [ebp+var_3C], 0
.text:000015D7                 jbe     short loc_1617
.text:000015D9                 mov     dword ptr [ebp+var_48], 0
.text:000015E0                 mov     dword ptr [ebp+var_48+4], 0
.text:000015E7                 mov     [ebp+var_54], 0
.text:000015EE                 lea     eax, [ebp+var_54]
.text:000015F1                 push    eax             ; unsigned int *
.text:000015F2                 lea     ecx, [ebp+var_48]
.text:000015F5                 push    ecx             ; unsigned __int64 *
.text:000015F6                 mov     edx, [ebp+arg_0]
.text:000015F9                 add     edx, 10h
.text:000015FC                 push    edx             ; unsigned __int64 *
.text:000015FD                 mov     eax, [ebp+arg_0]
.text:00001600                 add     eax, 8
.text:00001603                 push    eax             ; unsigned __int64 *
.text:00001604                 mov     ecx, [ebp+arg_0]
.text:00001607                 add     ecx, 2Ch ; ','
.text:0000160A                 push    ecx             ; struct NArchive::NZip::CExtraBlock *
.text:0000160B                 mov     edx, [ebp+var_3C]
.text:0000160E                 push    edx             ; unsigned int
.text:0000160F                 mov     ecx, [ebp+var_8] ; this
.text:00001612                 call    ?ReadExtra@CInArchive@NZip@NArchive@@AAE_NIAAUCExtraBlock@23@AA_K11AAI@Z ; NArchive::NZip::CInArchive::ReadExtra(uint,NArchive::NZip::CExtraBlock &,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &,uint &)
.text:00001617
.text:00001617 loc_1617:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadLocalItem(NArchive::NZip::CItemEx &)+F7j
.text:00001617                 mov     ecx, [ebp+arg_0]
.text:0000161A                 mov     edx, [ecx+18h]
.text:0000161D                 push    edx
.text:0000161E                 call    ?CheckDosTime@NZip@NArchive@@YG_NI@Z ; NArchive::NZip::CheckDosTime(uint)
.text:00001623                 movzx   eax, al
.text:00001626                 test    eax, eax
.text:00001628                 jnz     short loc_1631
.text:0000162A                 mov     ecx, [ebp+var_8]
.text:0000162D                 mov     byte ptr [ecx+7Bh], 1
.text:00001631
.text:00001631 loc_1631:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadLocalItem(NArchive::NZip::CItemEx &)+148j
.text:00001631                 mov     ecx, [ebp+arg_0]
.text:00001634                 add     ecx, 20h ; ' '  ; this
.text:00001637                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:0000163C                 cmp     eax, [ebp+var_38]
.text:0000163F                 jz      short loc_1645
.text:00001641                 xor     al, al
.text:00001643                 jmp     short loc_1655
.text:00001645 ; ---------------------------------------------------------------------------
.text:00001645
.text:00001645 loc_1645:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadLocalItem(NArchive::NZip::CItemEx &)+15Fj
.text:00001645                 mov     edx, [ebp+arg_0]
.text:00001648                 mov     eax, 10000h
.text:0000164D                 cmp     eax, [edx+60h]
.text:00001650                 sbb     eax, eax
.text:00001652                 add     eax, 1
.text:00001655
.text:00001655 loc_1655:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadLocalItem(NArchive::NZip::CItemEx &)+68j
.text:00001655                                         ; NArchive::NZip::CInArchive::ReadLocalItem(NArchive::NZip::CItemEx &)+163j
.text:00001655                 push    edx
.text:00001656                 mov     ecx, ebp
.text:00001658                 push    eax
.text:00001659                 lea     edx, $LN15_0
.text:0000165F                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001664                 pop     eax
.text:00001665                 pop     edx
.text:00001666                 pop     edi
.text:00001667                 mov     ecx, [ebp+var_4]
.text:0000166A                 xor     ecx, ebp
.text:0000166C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00001671                 add     esp, 58h
.text:00001674                 cmp     ebp, esp
.text:00001676                 call    __RTC_CheckEsp
.text:0000167B                 mov     esp, ebp
.text:0000167D                 pop     ebp
.text:0000167E                 retn    4
.text:0000167E ?ReadLocalItem@CInArchive@NZip@NArchive@@AAE_NAAVCItemEx@23@@Z endp
.text:0000167E
.text:0000167E ; ---------------------------------------------------------------------------
.text:00001681                 align 4
.text:00001684 $LN15_0         dd 3                    ; DATA XREF: NArchive::NZip::CInArchive::ReadLocalItem(NArchive::NZip::CItemEx &)+179o
.text:00001688                 dd offset $LN14
.text:0000168C $LN14           dd 0FFFFFFD4h, 1Ah      ; DATA XREF: .text:00001688o
.text:00001694                 dd offset $LN11         ; "p"
.text:00001698                 dd 0FFFFFFB8h, 8
.text:000016A0                 dd offset $LN12_0       ; "localHeaderOffset"
.text:000016A4                 dd 0FFFFFFACh, 4
.text:000016AC                 dd offset $LN13_0       ; "diskStartNumber"
.text:000016B0 $LN13_0         db 'diskStartNumber',0  ; DATA XREF: .text:000016ACo
.text:000016C0 $LN12_0         db 'localHeaderOffset',0 ; DATA XREF: .text:000016A0o
.text:000016D2 $LN11           db 'p',0                ; DATA XREF: .text:00001694o
.text:000016D4                 align 10h
.text:000016E0
.text:000016E0 ; =============== S U B R O U T I N E =======================================
.text:000016E0
.text:000016E0 ; Attributes: bp-based frame
.text:000016E0
.text:000016E0 ; bool __stdcall NArchive::NZip::CheckDosTime(unsigned int)
.text:000016E0 ?CheckDosTime@NZip@NArchive@@YG_NI@Z proc near
.text:000016E0                                         ; CODE XREF: NArchive::NZip::CInArchive::ReadLocalItem(NArchive::NZip::CItemEx &)+13Ep
.text:000016E0
.text:000016E0 var_14          = dword ptr -14h
.text:000016E0 var_10          = dword ptr -10h
.text:000016E0 var_C           = dword ptr -0Ch
.text:000016E0 var_8           = dword ptr -8
.text:000016E0 var_4           = dword ptr -4
.text:000016E0 arg_0           = dword ptr  8
.text:000016E0
.text:000016E0                 push    ebp
.text:000016E1                 mov     ebp, esp
.text:000016E3                 sub     esp, 14h
.text:000016E6                 mov     eax, 0CCCCCCCCh
.text:000016EB                 mov     [ebp+var_14], eax
.text:000016EE                 mov     [ebp+var_10], eax
.text:000016F1                 mov     [ebp+var_C], eax
.text:000016F4                 mov     [ebp+var_8], eax
.text:000016F7                 mov     [ebp+var_4], eax
.text:000016FA                 cmp     [ebp+arg_0], 0
.text:000016FE                 jnz     short loc_1704
.text:00001700                 mov     al, 1
.text:00001702                 jmp     short loc_176F
.text:00001704 ; ---------------------------------------------------------------------------
.text:00001704
.text:00001704 loc_1704:                               ; CODE XREF: NArchive::NZip::CheckDosTime(uint)+1Ej
.text:00001704                 mov     eax, [ebp+arg_0]
.text:00001707                 shr     eax, 15h
.text:0000170A                 and     eax, 0Fh
.text:0000170D                 mov     [ebp+var_4], eax
.text:00001710                 mov     ecx, [ebp+arg_0]
.text:00001713                 shr     ecx, 10h
.text:00001716                 and     ecx, 1Fh
.text:00001719                 mov     [ebp+var_8], ecx
.text:0000171C                 mov     edx, [ebp+arg_0]
.text:0000171F                 shr     edx, 0Bh
.text:00001722                 and     edx, 1Fh
.text:00001725                 mov     [ebp+var_C], edx
.text:00001728                 mov     eax, [ebp+arg_0]
.text:0000172B                 shr     eax, 5
.text:0000172E                 and     eax, 3Fh
.text:00001731                 mov     [ebp+var_10], eax
.text:00001734                 mov     ecx, [ebp+arg_0]
.text:00001737                 and     ecx, 1Fh
.text:0000173A                 shl     ecx, 1
.text:0000173C                 mov     [ebp+var_14], ecx
.text:0000173F                 cmp     [ebp+var_4], 1
.text:00001743                 jb      short loc_1769
.text:00001745                 cmp     [ebp+var_4], 0Ch
.text:00001749                 ja      short loc_1769
.text:0000174B                 cmp     [ebp+var_8], 1
.text:0000174F                 jb      short loc_1769
.text:00001751                 cmp     [ebp+var_8], 1Fh
.text:00001755                 ja      short loc_1769
.text:00001757                 cmp     [ebp+var_C], 17h
.text:0000175B                 ja      short loc_1769
.text:0000175D                 cmp     [ebp+var_10], 3Bh ; ';'
.text:00001761                 ja      short loc_1769
.text:00001763                 cmp     [ebp+var_14], 3Bh ; ';'
.text:00001767                 jbe     short loc_176D
.text:00001769
.text:00001769 loc_1769:                               ; CODE XREF: NArchive::NZip::CheckDosTime(uint)+63j
.text:00001769                                         ; NArchive::NZip::CheckDosTime(uint)+69j ...
.text:00001769                 xor     al, al
.text:0000176B                 jmp     short loc_176F
.text:0000176D ; ---------------------------------------------------------------------------
.text:0000176D
.text:0000176D loc_176D:                               ; CODE XREF: NArchive::NZip::CheckDosTime(uint)+87j
.text:0000176D                 mov     al, 1
.text:0000176F
.text:0000176F loc_176F:                               ; CODE XREF: NArchive::NZip::CheckDosTime(uint)+22j
.text:0000176F                                         ; NArchive::NZip::CheckDosTime(uint)+8Bj
.text:0000176F                 mov     esp, ebp
.text:00001771                 pop     ebp
.text:00001772                 retn    4
.text:00001772 ?CheckDosTime@NZip@NArchive@@YG_NI@Z endp
.text:00001772
.text:00001772 ; ---------------------------------------------------------------------------
.text:00001775                 align 10h
.text:00001780
.text:00001780 ; =============== S U B R O U T I N E =======================================
.text:00001780
.text:00001780 ; Attributes: bp-based frame
.text:00001780
.text:00001780 ; __int32 __thiscall NArchive::NZip::CInArchive::ReadLocalItemAfterCdItem(NArchive::NZip::CInArchive *this, struct NArchive::NZip::CItemEx *)
.text:00001780                 public ?ReadLocalItemAfterCdItem@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z
.text:00001780 ?ReadLocalItemAfterCdItem@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z proc near
.text:00001780                                         ; CODE XREF: NArchive::NZip::CInArchive::ReadLocalItemAfterCdItemFull(NArchive::NZip::CItemEx &)+60p
.text:00001780
.text:00001780 var_B0          = byte ptr -0B0h
.text:00001780 var_AD          = byte ptr -0ADh
.text:00001780 var_AC          = dword ptr -0ACh
.text:00001780 var_A8          = dword ptr -0A8h
.text:00001780 var_A4          = dword ptr -0A4h
.text:00001780 var_A0          = dword ptr -0A0h
.text:00001780 var_98          = dword ptr -98h
.text:00001780 var_94          = dword ptr -94h
.text:00001780 var_8C          = byte ptr -8Ch
.text:00001780 var_60          = byte ptr -60h
.text:00001780 var_2C          = dword ptr -2Ch
.text:00001780 var_20          = dword ptr -20h
.text:00001780 var_1C          = qword ptr -1Ch
.text:00001780 var_14          = dword ptr -14h
.text:00001780 var_10          = dword ptr -10h
.text:00001780 var_C           = dword ptr -0Ch
.text:00001780 var_4           = dword ptr -4
.text:00001780 arg_0           = dword ptr  8
.text:00001780
.text:00001780 ; FUNCTION CHUNK AT .text:00001950 SIZE 00000009 BYTES
.text:00001780 ; FUNCTION CHUNK AT .text:00001961 SIZE 00000034 BYTES
.text:00001780
.text:00001780                 push    ebp
.text:00001781                 mov     ebp, esp
.text:00001783                 push    0FFFFFFFFh
.text:00001785                 push    offset __ehhandler$?ReadLocalItemAfterCdItem@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z
.text:0000178A                 mov     eax, large fs:0
.text:00001790                 push    eax
.text:00001791                 push    ecx
.text:00001792                 sub     esp, 0A0h
.text:00001798                 push    ebx
.text:00001799                 push    esi
.text:0000179A                 push    edi
.text:0000179B                 push    ecx
.text:0000179C                 lea     edi, [ebp+var_B0]
.text:000017A2                 mov     ecx, 28h ; '('
.text:000017A7                 mov     eax, 0CCCCCCCCh
.text:000017AC                 rep stosd
.text:000017AE                 pop     ecx
.text:000017AF                 mov     eax, dword ptr ds:___security_cookie
.text:000017B4                 xor     eax, ebp
.text:000017B6                 push    eax
.text:000017B7                 lea     eax, [ebp+var_C]
.text:000017BA                 mov     large fs:0, eax
.text:000017C0                 mov     [ebp+var_10], esp
.text:000017C3                 mov     [ebp+var_14], ecx
.text:000017C6                 mov     eax, [ebp+arg_0]
.text:000017C9                 movzx   ecx, byte ptr [eax+5Ch]
.text:000017CD                 test    ecx, ecx
.text:000017CF                 jz      short loc_17D8
.text:000017D1                 xor     eax, eax
.text:000017D3                 jmp     loc_1963
.text:000017D8 ; ---------------------------------------------------------------------------
.text:000017D8
.text:000017D8 loc_17D8:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadLocalItemAfterCdItem(NArchive::NZip::CItemEx &)+4Fj
.text:000017D8                 mov     [ebp+var_4], 0
.text:000017DF                 mov     edx, [ebp+var_14]
.text:000017E2                 mov     eax, [ebp+arg_0]
.text:000017E5                 mov     ecx, [edx+38h]
.text:000017E8                 add     ecx, [eax+40h]
.text:000017EB                 mov     edx, [edx+3Ch]
.text:000017EE                 adc     edx, [eax+44h]
.text:000017F1                 mov     dword ptr [ebp+var_1C], ecx
.text:000017F4                 mov     dword ptr [ebp+var_1C+4], edx
.text:000017F7                 mov     eax, [ebp+var_14]
.text:000017FA                 mov     [ebp+var_A0], eax
.text:00001800                 mov     ecx, [ebp+var_A0]
.text:00001806                 cmp     dword ptr [ecx+3Ch], 0
.text:0000180A                 jg      short loc_1832
.text:0000180C                 jl      short loc_181A
.text:0000180E                 mov     edx, [ebp+var_A0]
.text:00001814                 cmp     dword ptr [edx+38h], 0
.text:00001818                 jnb     short loc_1832
.text:0000181A
.text:0000181A loc_181A:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadLocalItemAfterCdItem(NArchive::NZip::CItemEx &)+8Cj
.text:0000181A                 cmp     dword ptr [ebp+var_1C+4], 0
.text:0000181E                 jg      short loc_1832
.text:00001820                 jl      short loc_1828
.text:00001822                 cmp     dword ptr [ebp+var_1C], 0
.text:00001826                 jnb     short loc_1832
.text:00001828
.text:00001828 loc_1828:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadLocalItemAfterCdItem(NArchive::NZip::CItemEx &)+A0j
.text:00001828                 mov     eax, 1
.text:0000182D                 jmp     loc_1963
.text:00001832 ; ---------------------------------------------------------------------------
.text:00001832
.text:00001832 loc_1832:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadLocalItemAfterCdItem(NArchive::NZip::CItemEx &)+8Aj
.text:00001832                                         ; NArchive::NZip::CInArchive::ReadLocalItemAfterCdItem(NArchive::NZip::CItemEx &)+98j ...
.text:00001832                 mov     eax, dword ptr [ebp+var_1C+4]
.text:00001835                 push    eax
.text:00001836                 mov     ecx, dword ptr [ebp+var_1C]
.text:00001839                 push    ecx             ; unsigned __int64
.text:0000183A                 mov     ecx, [ebp+var_14] ; this
.text:0000183D                 call    ?Seek@CInArchive@NZip@NArchive@@AAEJ_K@Z ; NArchive::NZip::CInArchive::Seek(unsigned __int64)
.text:00001842                 mov     [ebp+var_A4], eax
.text:00001848                 mov     edx, [ebp+var_A4]
.text:0000184E                 mov     [ebp+var_20], edx
.text:00001851                 cmp     [ebp+var_20], 0
.text:00001855                 jz      short loc_185F
.text:00001857                 mov     eax, [ebp+var_20]
.text:0000185A                 jmp     loc_1963
.text:0000185F ; ---------------------------------------------------------------------------
.text:0000185F
.text:0000185F loc_185F:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadLocalItemAfterCdItem(NArchive::NZip::CItemEx &)+D5j
.text:0000185F                 lea     ecx, [ebp+var_8C] ; this
.text:00001865                 call    ??0CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::CItemEx(void)
.text:0000186A                 mov     [ebp+var_A8], eax
.text:00001870                 mov     byte ptr [ebp+var_4], 1
.text:00001874                 mov     ecx, [ebp+var_14] ; this
.text:00001877                 call    ?ReadUInt32@CInArchive@NZip@NArchive@@AAEIXZ ; NArchive::NZip::CInArchive::ReadUInt32(void)
.text:0000187C                 mov     [ebp+var_AC], eax
.text:00001882                 cmp     [ebp+var_AC], 4034B50h
.text:0000188C                 jz      short loc_18B2
.text:0000188E                 mov     [ebp+var_94], 1
.text:00001898                 mov     byte ptr [ebp+var_4], 0
.text:0000189C                 lea     ecx, [ebp+var_8C] ; this
.text:000018A2                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:000018A7                 mov     eax, [ebp+var_94]
.text:000018AD                 jmp     loc_1963
.text:000018B2 ; ---------------------------------------------------------------------------
.text:000018B2
.text:000018B2 loc_18B2:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadLocalItemAfterCdItem(NArchive::NZip::CItemEx &)+10Cj
.text:000018B2                 lea     eax, [ebp+var_8C]
.text:000018B8                 push    eax             ; struct NArchive::NZip::CItemEx *
.text:000018B9                 mov     ecx, [ebp+var_14] ; this
.text:000018BC                 call    ?ReadLocalItem@CInArchive@NZip@NArchive@@AAE_NAAVCItemEx@23@@Z ; NArchive::NZip::CInArchive::ReadLocalItem(NArchive::NZip::CItemEx &)
.text:000018C1                 mov     ecx, [ebp+arg_0]
.text:000018C4                 push    ecx             ; int
.text:000018C5                 lea     edx, [ebp+var_8C]
.text:000018CB                 push    edx             ; NArchive::NZip::CLocalItem *
.text:000018CC                 call    ?AreItemsEqual@NZip@NArchive@@YG_NABVCItemEx@12@0@Z ; NArchive::NZip::AreItemsEqual(NArchive::NZip::CItemEx const &,NArchive::NZip::CItemEx const &)
.text:000018D1                 mov     [ebp+var_AD], al
.text:000018D7                 movzx   eax, [ebp+var_AD]
.text:000018DE                 test    eax, eax
.text:000018E0                 jnz     short loc_1903
.text:000018E2                 mov     [ebp+var_98], 1
.text:000018EC                 mov     byte ptr [ebp+var_4], 0
.text:000018F0                 lea     ecx, [ebp+var_8C] ; this
.text:000018F6                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:000018FB                 mov     eax, [ebp+var_98]
.text:00001901                 jmp     short loc_1963
.text:00001903 ; ---------------------------------------------------------------------------
.text:00001903
.text:00001903 loc_1903:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadLocalItemAfterCdItem(NArchive::NZip::CItemEx &)+160j
.text:00001903                 mov     ecx, [ebp+arg_0]
.text:00001906                 mov     edx, [ebp+var_2C]
.text:00001909                 mov     [ecx+60h], edx
.text:0000190C                 lea     eax, [ebp+var_60]
.text:0000190F                 push    eax
.text:00001910                 mov     ecx, [ebp+arg_0]
.text:00001913                 add     ecx, 2Ch ; ','
.text:00001916                 call    ??4CExtraBlock@NZip@NArchive@@QAEAAU012@ABU012@@Z ; NArchive::NZip::CExtraBlock::operator=(NArchive::NZip::CExtraBlock const &)
.text:0000191B                 mov     ecx, [ebp+arg_0]
.text:0000191E                 mov     byte ptr [ecx+5Ch], 1
.text:00001922                 mov     byte ptr [ebp+var_4], 0
.text:00001926                 lea     ecx, [ebp+var_8C] ; this
.text:0000192C                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:00001931                 jmp     short $LN9_0
.text:00001931 ?ReadLocalItemAfterCdItem@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z endp
.text:00001931
.text:00001933
.text:00001933 ; =============== S U B R O U T I N E =======================================
.text:00001933
.text:00001933
.text:00001933 __catch$?ReadLocalItemAfterCdItem@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z$0 proc near
.text:00001933                                         ; DATA XREF: .xdata$x:00004738o
.text:00001933                 mov     dword ptr [ebp-9Ch], 1
.text:0000193D                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00001944                 mov     eax, offset $LN13_1
.text:00001949                 retn
.text:00001949 __catch$?ReadLocalItemAfterCdItem@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z$0 endp
.text:00001949
.text:0000194A ; ---------------------------------------------------------------------------
.text:0000194A                 mov     eax, offset $LN9_0
.text:0000194F                 retn
.text:00001950 ; ---------------------------------------------------------------------------
.text:00001950 ; START OF FUNCTION CHUNK FOR ?ReadLocalItemAfterCdItem@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z
.text:00001950
.text:00001950 $LN9_0:                                 ; CODE XREF: NArchive::NZip::CInArchive::ReadLocalItemAfterCdItem(NArchive::NZip::CItemEx &)+1B1j
.text:00001950                                         ; DATA XREF: .text:0000194Ao
.text:00001950                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001957                 jmp     short loc_1961
.text:00001957 ; END OF FUNCTION CHUNK FOR ?ReadLocalItemAfterCdItem@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z
.text:00001959
.text:00001959 ; =============== S U B R O U T I N E =======================================
.text:00001959
.text:00001959
.text:00001959 $LN13_1         proc near               ; DATA XREF: __catch$?ReadLocalItemAfterCdItem@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z$0+11o
.text:00001959                 mov     eax, [ebp-9Ch]
.text:0000195F                 jmp     short loc_1963
.text:0000195F $LN13_1         endp
.text:0000195F
.text:00001961 ; ---------------------------------------------------------------------------
.text:00001961 ; START OF FUNCTION CHUNK FOR ?ReadLocalItemAfterCdItem@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z
.text:00001961
.text:00001961 loc_1961:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadLocalItemAfterCdItem(NArchive::NZip::CItemEx &)+1D7j
.text:00001961                 xor     eax, eax
.text:00001963
.text:00001963 loc_1963:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadLocalItemAfterCdItem(NArchive::NZip::CItemEx &)+53j
.text:00001963                                         ; NArchive::NZip::CInArchive::ReadLocalItemAfterCdItem(NArchive::NZip::CItemEx &)+ADj ...
.text:00001963                 push    edx
.text:00001964                 mov     ecx, ebp
.text:00001966                 push    eax
.text:00001967                 lea     edx, $LN20_0
.text:0000196D                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001972                 pop     eax
.text:00001973                 pop     edx
.text:00001974                 mov     ecx, [ebp+var_C]
.text:00001977                 mov     large fs:0, ecx
.text:0000197E                 pop     ecx
.text:0000197F                 pop     edi
.text:00001980                 pop     esi
.text:00001981                 pop     ebx
.text:00001982                 add     esp, 0B0h
.text:00001988                 cmp     ebp, esp
.text:0000198A                 call    __RTC_CheckEsp
.text:0000198F                 mov     esp, ebp
.text:00001991                 pop     ebp
.text:00001992                 retn    4
.text:00001992 ; END OF FUNCTION CHUNK FOR ?ReadLocalItemAfterCdItem@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z
.text:00001992 ; ---------------------------------------------------------------------------
.text:00001995                 align 4
.text:00001998 $LN20_0         dd 1                    ; DATA XREF: NArchive::NZip::CInArchive::ReadLocalItemAfterCdItem(NArchive::NZip::CItemEx &)+1E7o
.text:0000199C                 dd offset $LN19
.text:000019A0 $LN19           dd 0FFFFFF74h, 68h      ; DATA XREF: .text:0000199Co
.text:000019A8                 dd offset $LN17         ; "localItem"
.text:000019AC $LN17           db 'localItem',0        ; DATA XREF: .text:000019A8o
.text:000019B6                 align 10h
.text:000019C0
.text:000019C0 ; =============== S U B R O U T I N E =======================================
.text:000019C0
.text:000019C0 ; Attributes: bp-based frame
.text:000019C0
.text:000019C0 ; int __stdcall NArchive::NZip::AreItemsEqual(NArchive::NZip::CLocalItem *, int)
.text:000019C0 ?AreItemsEqual@NZip@NArchive@@YG_NABVCItemEx@12@0@Z proc near
.text:000019C0                                         ; CODE XREF: NArchive::NZip::CInArchive::ReadLocalItemAfterCdItem(NArchive::NZip::CItemEx &)+14Cp
.text:000019C0                                         ; NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+394p
.text:000019C0
.text:000019C0 var_10          = dword ptr -10h
.text:000019C0 var_C           = dword ptr -0Ch
.text:000019C0 var_8           = dword ptr -8
.text:000019C0 var_4           = dword ptr -4
.text:000019C0 arg_0           = dword ptr  8
.text:000019C0 arg_4           = dword ptr  0Ch
.text:000019C0
.text:000019C0                 push    ebp
.text:000019C1                 mov     ebp, esp
.text:000019C3                 sub     esp, 10h
.text:000019C6                 mov     eax, 0CCCCCCCCh
.text:000019CB                 mov     [ebp+var_10], eax
.text:000019CE                 mov     [ebp+var_C], eax
.text:000019D1                 mov     [ebp+var_8], eax
.text:000019D4                 mov     [ebp+var_4], eax
.text:000019D7                 mov     eax, [ebp+arg_0]
.text:000019DA                 push    eax
.text:000019DB                 mov     ecx, [ebp+arg_4]
.text:000019DE                 push    ecx
.text:000019DF                 call    ?FlagsAreSame@NZip@NArchive@@YG_NABVCItem@12@0@Z ; NArchive::NZip::FlagsAreSame(NArchive::NZip::CItem const &,NArchive::NZip::CItem const &)
.text:000019E4                 movzx   edx, al
.text:000019E7                 test    edx, edx
.text:000019E9                 jnz     short loc_19F2
.text:000019EB                 xor     al, al
.text:000019ED                 jmp     loc_1A83
.text:000019F2 ; ---------------------------------------------------------------------------
.text:000019F2
.text:000019F2 loc_19F2:                               ; CODE XREF: NArchive::NZip::AreItemsEqual(NArchive::NZip::CItemEx const &,NArchive::NZip::CItemEx const &)+29j
.text:000019F2                 mov     ecx, [ebp+arg_0] ; this
.text:000019F5                 call    ?HasDescriptor@CLocalItem@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CLocalItem::HasDescriptor(void)
.text:000019FA                 movzx   eax, al
.text:000019FD                 test    eax, eax
.text:000019FF                 jnz     short loc_1A63
.text:00001A01                 mov     ecx, [ebp+arg_4]
.text:00001A04                 mov     edx, [ebp+arg_0]
.text:00001A07                 mov     eax, [ecx+1Ch]
.text:00001A0A                 cmp     eax, [edx+1Ch]
.text:00001A0D                 jnz     short loc_1A5F
.text:00001A0F                 mov     ecx, [ebp+arg_4]
.text:00001A12                 mov     edx, [ebp+arg_0]
.text:00001A15                 mov     [ebp+var_4], ecx
.text:00001A18                 mov     [ebp+var_8], edx
.text:00001A1B                 mov     eax, [ebp+var_4]
.text:00001A1E                 mov     ecx, [ebp+var_8]
.text:00001A21                 mov     edx, [eax+10h]
.text:00001A24                 cmp     edx, [ecx+10h]
.text:00001A27                 jnz     short loc_1A5F
.text:00001A29                 mov     eax, [ebp+var_4]
.text:00001A2C                 mov     ecx, [ebp+var_8]
.text:00001A2F                 mov     edx, [eax+14h]
.text:00001A32                 cmp     edx, [ecx+14h]
.text:00001A35                 jnz     short loc_1A5F
.text:00001A37                 mov     eax, [ebp+arg_4]
.text:00001A3A                 mov     ecx, [ebp+arg_0]
.text:00001A3D                 mov     [ebp+var_C], eax
.text:00001A40                 mov     [ebp+var_10], ecx
.text:00001A43                 mov     edx, [ebp+var_C]
.text:00001A46                 mov     eax, [ebp+var_10]
.text:00001A49                 mov     ecx, [edx+8]
.text:00001A4C                 cmp     ecx, [eax+8]
.text:00001A4F                 jnz     short loc_1A5F
.text:00001A51                 mov     edx, [ebp+var_C]
.text:00001A54                 mov     eax, [ebp+var_10]
.text:00001A57                 mov     ecx, [edx+0Ch]
.text:00001A5A                 cmp     ecx, [eax+0Ch]
.text:00001A5D                 jz      short loc_1A63
.text:00001A5F
.text:00001A5F loc_1A5F:                               ; CODE XREF: NArchive::NZip::AreItemsEqual(NArchive::NZip::CItemEx const &,NArchive::NZip::CItemEx const &)+4Dj
.text:00001A5F                                         ; NArchive::NZip::AreItemsEqual(NArchive::NZip::CItemEx const &,NArchive::NZip::CItemEx const &)+67j ...
.text:00001A5F                 xor     al, al
.text:00001A61                 jmp     short loc_1A83
.text:00001A63 ; ---------------------------------------------------------------------------
.text:00001A63
.text:00001A63 loc_1A63:                               ; CODE XREF: NArchive::NZip::AreItemsEqual(NArchive::NZip::CItemEx const &,NArchive::NZip::CItemEx const &)+3Fj
.text:00001A63                                         ; NArchive::NZip::AreItemsEqual(NArchive::NZip::CItemEx const &,NArchive::NZip::CItemEx const &)+9Dj
.text:00001A63                 mov     edx, [ebp+arg_0]
.text:00001A66                 add     edx, 20h ; ' '
.text:00001A69                 push    edx             ; AString *
.text:00001A6A                 mov     eax, [ebp+arg_4]
.text:00001A6D                 add     eax, 20h ; ' '
.text:00001A70                 push    eax             ; AString *
.text:00001A71                 call    ??9@YG_NABVAString@@0@Z ; operator!=(AString const &,AString const &)
.text:00001A76                 movzx   ecx, al
.text:00001A79                 test    ecx, ecx
.text:00001A7B                 jz      short loc_1A81
.text:00001A7D                 xor     al, al
.text:00001A7F                 jmp     short loc_1A83
.text:00001A81 ; ---------------------------------------------------------------------------
.text:00001A81
.text:00001A81 loc_1A81:                               ; CODE XREF: NArchive::NZip::AreItemsEqual(NArchive::NZip::CItemEx const &,NArchive::NZip::CItemEx const &)+BBj
.text:00001A81                 mov     al, 1
.text:00001A83
.text:00001A83 loc_1A83:                               ; CODE XREF: NArchive::NZip::AreItemsEqual(NArchive::NZip::CItemEx const &,NArchive::NZip::CItemEx const &)+2Dj
.text:00001A83                                         ; NArchive::NZip::AreItemsEqual(NArchive::NZip::CItemEx const &,NArchive::NZip::CItemEx const &)+A1j ...
.text:00001A83                 add     esp, 10h
.text:00001A86                 cmp     ebp, esp
.text:00001A88                 call    __RTC_CheckEsp
.text:00001A8D                 mov     esp, ebp
.text:00001A8F                 pop     ebp
.text:00001A90                 retn    8
.text:00001A90 ?AreItemsEqual@NZip@NArchive@@YG_NABVCItemEx@12@0@Z endp
.text:00001A90
.text:00001A90 ; ---------------------------------------------------------------------------
.text:00001A93                 align 10h
.text:00001AA0
.text:00001AA0 ; =============== S U B R O U T I N E =======================================
.text:00001AA0
.text:00001AA0 ; Attributes: bp-based frame
.text:00001AA0
.text:00001AA0 ; bool __stdcall NArchive::NZip::FlagsAreSame(class NArchive::NZip::CItem const &, class NArchive::NZip::CItem const &)
.text:00001AA0 ?FlagsAreSame@NZip@NArchive@@YG_NABVCItem@12@0@Z proc near
.text:00001AA0                                         ; CODE XREF: NArchive::NZip::AreItemsEqual(NArchive::NZip::CItemEx const &,NArchive::NZip::CItemEx const &)+1Fp
.text:00001AA0                                         ; NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+DDCp
.text:00001AA0
.text:00001AA0 var_8           = dword ptr -8
.text:00001AA0 var_4           = dword ptr -4
.text:00001AA0 arg_0           = dword ptr  8
.text:00001AA0 arg_4           = dword ptr  0Ch
.text:00001AA0
.text:00001AA0                 push    ebp
.text:00001AA1                 mov     ebp, esp
.text:00001AA3                 sub     esp, 8
.text:00001AA6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001AAD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001AB4                 mov     eax, [ebp+arg_0]
.text:00001AB7                 movzx   ecx, word ptr [eax+2]
.text:00001ABB                 mov     edx, [ebp+arg_4]
.text:00001ABE                 movzx   eax, word ptr [edx+2]
.text:00001AC2                 cmp     ecx, eax
.text:00001AC4                 jz      short loc_1ACA
.text:00001AC6                 xor     al, al
.text:00001AC8                 jmp     short loc_1B2E
.text:00001ACA ; ---------------------------------------------------------------------------
.text:00001ACA
.text:00001ACA loc_1ACA:                               ; CODE XREF: NArchive::NZip::FlagsAreSame(NArchive::NZip::CItem const &,NArchive::NZip::CItem const &)+24j
.text:00001ACA                 mov     ecx, [ebp+arg_0]
.text:00001ACD                 movzx   edx, word ptr [ecx]
.text:00001AD0                 mov     eax, [ebp+arg_4]
.text:00001AD3                 movzx   ecx, word ptr [eax]
.text:00001AD6                 cmp     edx, ecx
.text:00001AD8                 jnz     short loc_1ADE
.text:00001ADA                 mov     al, 1
.text:00001ADC                 jmp     short loc_1B2E
.text:00001ADE ; ---------------------------------------------------------------------------
.text:00001ADE
.text:00001ADE loc_1ADE:                               ; CODE XREF: NArchive::NZip::FlagsAreSame(NArchive::NZip::CItem const &,NArchive::NZip::CItem const &)+38j
.text:00001ADE                 mov     [ebp+var_4], 0FFFFh
.text:00001AE5                 mov     edx, [ebp+arg_0]
.text:00001AE8                 movzx   eax, word ptr [edx+2]
.text:00001AEC                 mov     [ebp+var_8], eax
.text:00001AEF                 cmp     [ebp+var_8], 8
.text:00001AF3                 jz      short loc_1AF7
.text:00001AF5                 jmp     short loc_1B00
.text:00001AF7 ; ---------------------------------------------------------------------------
.text:00001AF7
.text:00001AF7 loc_1AF7:                               ; CODE XREF: NArchive::NZip::FlagsAreSame(NArchive::NZip::CItem const &,NArchive::NZip::CItem const &)+53j
.text:00001AF7                 mov     [ebp+var_4], 7FF9h
.text:00001AFE                 jmp     short loc_1B13
.text:00001B00 ; ---------------------------------------------------------------------------
.text:00001B00
.text:00001B00 loc_1B00:                               ; CODE XREF: NArchive::NZip::FlagsAreSame(NArchive::NZip::CItem const &,NArchive::NZip::CItem const &)+55j
.text:00001B00                 mov     ecx, [ebp+arg_0]
.text:00001B03                 movzx   edx, word ptr [ecx+2]
.text:00001B07                 cmp     edx, 6
.text:00001B0A                 jg      short loc_1B13
.text:00001B0C                 mov     [ebp+var_4], 7FFFh
.text:00001B13
.text:00001B13 loc_1B13:                               ; CODE XREF: NArchive::NZip::FlagsAreSame(NArchive::NZip::CItem const &,NArchive::NZip::CItem const &)+5Ej
.text:00001B13                                         ; NArchive::NZip::FlagsAreSame(NArchive::NZip::CItem const &,NArchive::NZip::CItem const &)+6Aj
.text:00001B13                 mov     eax, [ebp+arg_0]
.text:00001B16                 movzx   ecx, word ptr [eax]
.text:00001B19                 and     ecx, [ebp+var_4]
.text:00001B1C                 mov     edx, [ebp+arg_4]
.text:00001B1F                 movzx   eax, word ptr [edx]
.text:00001B22                 and     eax, [ebp+var_4]
.text:00001B25                 xor     edx, edx
.text:00001B27                 cmp     ecx, eax
.text:00001B29                 setz    dl
.text:00001B2C                 mov     al, dl
.text:00001B2E
.text:00001B2E loc_1B2E:                               ; CODE XREF: NArchive::NZip::FlagsAreSame(NArchive::NZip::CItem const &,NArchive::NZip::CItem const &)+28j
.text:00001B2E                                         ; NArchive::NZip::FlagsAreSame(NArchive::NZip::CItem const &,NArchive::NZip::CItem const &)+3Cj
.text:00001B2E                 mov     esp, ebp
.text:00001B30                 pop     ebp
.text:00001B31                 retn    8
.text:00001B31 ?FlagsAreSame@NZip@NArchive@@YG_NABVCItem@12@0@Z endp
.text:00001B31
.text:00001B31 ; ---------------------------------------------------------------------------
.text:00001B34                 align 10h
.text:00001B40
.text:00001B40 ; =============== S U B R O U T I N E =======================================
.text:00001B40
.text:00001B40 ; Attributes: bp-based frame
.text:00001B40
.text:00001B40 ; __int32 __thiscall NArchive::NZip::CInArchive::ReadLocalItemDescriptor(NArchive::NZip::CInArchive *this, struct NArchive::NZip::CItemEx *)
.text:00001B40                 public ?ReadLocalItemDescriptor@CInArchive@NZip@NArchive@@AAEJAAVCItemEx@23@@Z
.text:00001B40 ?ReadLocalItemDescriptor@CInArchive@NZip@NArchive@@AAEJAAVCItemEx@23@@Z proc near
.text:00001B40                                         ; CODE XREF: NArchive::NZip::CInArchive::ReadLocals(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+BFp
.text:00001B40
.text:00001B40 var_1038        = dword ptr -1038h
.text:00001B40 var_1034        = dword ptr -1034h
.text:00001B40 var_1030        = dword ptr -1030h
.text:00001B40 var_102C        = dword ptr -102Ch
.text:00001B40 var_1024        = dword ptr -1024h
.text:00001B40 var_101C        = dword ptr -101Ch
.text:00001B40 var_1018        = dword ptr -1018h
.text:00001B40 var_1010        = byte ptr -1010h
.text:00001B40 var_100C        = dword ptr -100Ch
.text:00001B40 var_1008        = dword ptr -1008h
.text:00001B40 var_1004        = dword ptr -1004h
.text:00001B40 var_C           = dword ptr -0Ch
.text:00001B40 var_8           = dword ptr -8
.text:00001B40 var_4           = dword ptr -4
.text:00001B40 arg_0           = dword ptr  8
.text:00001B40
.text:00001B40                 push    ebp
.text:00001B41                 mov     ebp, esp
.text:00001B43                 mov     eax, 1038h
.text:00001B48                 call    __chkstk
.text:00001B4D                 push    edi
.text:00001B4E                 push    ecx
.text:00001B4F                 lea     edi, [ebp+var_1038]
.text:00001B55                 mov     ecx, 40Eh
.text:00001B5A                 mov     eax, 0CCCCCCCCh
.text:00001B5F                 rep stosd
.text:00001B61                 pop     ecx
.text:00001B62                 mov     eax, dword ptr ds:___security_cookie
.text:00001B67                 xor     eax, ebp
.text:00001B69                 mov     [ebp+var_4], eax
.text:00001B6C                 mov     [ebp+var_8], ecx
.text:00001B6F                 mov     [ebp+var_C], 1000h
.text:00001B76                 mov     [ebp+var_1018], 0
.text:00001B80                 mov     [ebp+var_101C], 0
.text:00001B8A
.text:00001B8A loc_1B8A:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadLocalItemDescriptor(NArchive::NZip::CItemEx &)+208j
.text:00001B8A                 lea     eax, [ebp+var_1024]
.text:00001B90                 push    eax             ; unsigned int *
.text:00001B91                 mov     ecx, 1000h
.text:00001B96                 sub     ecx, [ebp+var_1018]
.text:00001B9C                 push    ecx             ; unsigned int
.text:00001B9D                 mov     edx, [ebp+var_1018]
.text:00001BA3                 lea     eax, [ebp+edx+var_1010]
.text:00001BAA                 push    eax             ; unsigned __int8 *
.text:00001BAB                 mov     ecx, [ebp+var_8] ; this
.text:00001BAE                 call    ?ReadBytes@CInArchive@NZip@NArchive@@AAEJPAXIPAI@Z ; NArchive::NZip::CInArchive::ReadBytes(void *,uint,uint *)
.text:00001BB3                 mov     [ebp+var_102C], eax
.text:00001BB9                 cmp     [ebp+var_102C], 0
.text:00001BC0                 jz      short loc_1BCD
.text:00001BC2                 mov     eax, [ebp+var_102C]
.text:00001BC8                 jmp     loc_1D4D
.text:00001BCD ; ---------------------------------------------------------------------------
.text:00001BCD
.text:00001BCD loc_1BCD:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadLocalItemDescriptor(NArchive::NZip::CItemEx &)+80j
.text:00001BCD                 mov     ecx, [ebp+var_1018]
.text:00001BD3                 add     ecx, [ebp+var_1024]
.text:00001BD9                 mov     [ebp+var_1018], ecx
.text:00001BDF                 cmp     [ebp+var_1018], 10h
.text:00001BE6                 jnb     short loc_1BF2
.text:00001BE8                 mov     eax, 1
.text:00001BED                 jmp     loc_1D4D
.text:00001BF2 ; ---------------------------------------------------------------------------
.text:00001BF2
.text:00001BF2 loc_1BF2:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadLocalItemDescriptor(NArchive::NZip::CItemEx &)+A6j
.text:00001BF2                 mov     [ebp+var_1030], 0
.text:00001BFC                 jmp     short loc_1C0D
.text:00001BFE ; ---------------------------------------------------------------------------
.text:00001BFE
.text:00001BFE loc_1BFE:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadLocalItemDescriptor(NArchive::NZip::CItemEx &)+F5j
.text:00001BFE                                         ; NArchive::NZip::CInArchive::ReadLocalItemDescriptor(NArchive::NZip::CItemEx &):loc_1CD1j
.text:00001BFE                 mov     edx, [ebp+var_1030]
.text:00001C04                 add     edx, 1
.text:00001C07                 mov     [ebp+var_1030], edx
.text:00001C0D
.text:00001C0D loc_1C0D:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadLocalItemDescriptor(NArchive::NZip::CItemEx &)+BCj
.text:00001C0D                 mov     eax, [ebp+var_1018]
.text:00001C13                 sub     eax, 10h
.text:00001C16                 cmp     [ebp+var_1030], eax
.text:00001C1C                 ja      loc_1CD6
.text:00001C22                 mov     ecx, [ebp+var_1030]
.text:00001C28                 movzx   edx, [ebp+ecx+var_1010]
.text:00001C30                 cmp     edx, 50h ; 'P'
.text:00001C33                 jz      short loc_1C37
.text:00001C35                 jmp     short loc_1BFE
.text:00001C37 ; ---------------------------------------------------------------------------
.text:00001C37
.text:00001C37 loc_1C37:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadLocalItemDescriptor(NArchive::NZip::CItemEx &)+F3j
.text:00001C37                 mov     eax, [ebp+var_1030]
.text:00001C3D                 cmp     dword ptr [ebp+eax+var_1010], 8074B50h
.text:00001C48                 jnz     loc_1CD1
.text:00001C4E                 mov     ecx, [ebp+var_1030]
.text:00001C54                 mov     edx, [ebp+ecx+var_1008]
.text:00001C5B                 mov     [ebp+var_1034], edx
.text:00001C61                 mov     eax, [ebp+var_101C]
.text:00001C67                 add     eax, [ebp+var_1030]
.text:00001C6D                 cmp     [ebp+var_1034], eax
.text:00001C73                 jnz     short loc_1CD1
.text:00001C75                 mov     ecx, [ebp+arg_0]
.text:00001C78                 mov     edx, [ebp+var_1030]
.text:00001C7E                 mov     eax, [ebp+edx+var_100C]
.text:00001C85                 mov     [ecx+1Ch], eax
.text:00001C88                 mov     ecx, [ebp+var_1034]
.text:00001C8E                 xor     edx, edx
.text:00001C90                 mov     eax, [ebp+arg_0]
.text:00001C93                 mov     [eax+10h], ecx
.text:00001C96                 mov     [eax+14h], edx
.text:00001C99                 mov     ecx, [ebp+var_1030]
.text:00001C9F                 mov     edx, [ebp+ecx+var_1004]
.text:00001CA6                 xor     eax, eax
.text:00001CA8                 mov     ecx, [ebp+arg_0]
.text:00001CAB                 mov     [ecx+8], edx
.text:00001CAE                 mov     [ecx+0Ch], eax
.text:00001CB1                 mov     edx, [ebp+var_1018]
.text:00001CB7                 sub     edx, [ebp+var_1030]
.text:00001CBD                 sub     edx, 10h
.text:00001CC0                 xor     eax, eax
.text:00001CC2                 sub     eax, edx
.text:00001CC4                 cdq
.text:00001CC5                 push    edx
.text:00001CC6                 push    eax             ; __int64
.text:00001CC7                 mov     ecx, [ebp+var_8] ; this
.text:00001CCA                 call    ?IncreaseRealPosition@CInArchive@NZip@NArchive@@AAEJ_J@Z ; NArchive::NZip::CInArchive::IncreaseRealPosition(__int64)
.text:00001CCF                 jmp     short loc_1D4D
.text:00001CD1 ; ---------------------------------------------------------------------------
.text:00001CD1
.text:00001CD1 loc_1CD1:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadLocalItemDescriptor(NArchive::NZip::CItemEx &)+108j
.text:00001CD1                                         ; NArchive::NZip::CInArchive::ReadLocalItemDescriptor(NArchive::NZip::CItemEx &)+133j
.text:00001CD1                 jmp     loc_1BFE
.text:00001CD6 ; ---------------------------------------------------------------------------
.text:00001CD6
.text:00001CD6 loc_1CD6:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadLocalItemDescriptor(NArchive::NZip::CItemEx &)+DCj
.text:00001CD6                 mov     eax, [ebp+var_101C]
.text:00001CDC                 add     eax, [ebp+var_1030]
.text:00001CE2                 mov     [ebp+var_101C], eax
.text:00001CE8                 mov     [ebp+var_1038], 0
.text:00001CF2                 jmp     short loc_1D12
.text:00001CF4 ; ---------------------------------------------------------------------------
.text:00001CF4
.text:00001CF4 loc_1CF4:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadLocalItemDescriptor(NArchive::NZip::CItemEx &)+1FAj
.text:00001CF4                 mov     ecx, [ebp+var_1030]
.text:00001CFA                 add     ecx, 1
.text:00001CFD                 mov     [ebp+var_1030], ecx
.text:00001D03                 mov     edx, [ebp+var_1038]
.text:00001D09                 add     edx, 1
.text:00001D0C                 mov     [ebp+var_1038], edx
.text:00001D12
.text:00001D12 loc_1D12:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadLocalItemDescriptor(NArchive::NZip::CItemEx &)+1B2j
.text:00001D12                 mov     eax, [ebp+var_1030]
.text:00001D18                 cmp     eax, [ebp+var_1018]
.text:00001D1E                 jnb     short loc_1D3C
.text:00001D20                 mov     ecx, [ebp+var_1038]
.text:00001D26                 mov     edx, [ebp+var_1030]
.text:00001D2C                 mov     al, [ebp+edx+var_1010]
.text:00001D33                 mov     [ebp+ecx+var_1010], al
.text:00001D3A                 jmp     short loc_1CF4
.text:00001D3C ; ---------------------------------------------------------------------------
.text:00001D3C
.text:00001D3C loc_1D3C:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadLocalItemDescriptor(NArchive::NZip::CItemEx &)+1DEj
.text:00001D3C                 mov     ecx, [ebp+var_1038]
.text:00001D42                 mov     [ebp+var_1018], ecx
.text:00001D48                 jmp     loc_1B8A
.text:00001D4D ; ---------------------------------------------------------------------------
.text:00001D4D
.text:00001D4D loc_1D4D:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadLocalItemDescriptor(NArchive::NZip::CItemEx &)+88j
.text:00001D4D                                         ; NArchive::NZip::CInArchive::ReadLocalItemDescriptor(NArchive::NZip::CItemEx &)+ADj ...
.text:00001D4D                 push    edx
.text:00001D4E                 mov     ecx, ebp
.text:00001D50                 push    eax
.text:00001D51                 lea     edx, $LN19_0
.text:00001D57                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001D5C                 pop     eax
.text:00001D5D                 pop     edx
.text:00001D5E                 pop     edi
.text:00001D5F                 mov     ecx, [ebp+var_4]
.text:00001D62                 xor     ecx, ebp
.text:00001D64                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00001D69                 add     esp, 1038h
.text:00001D6F                 cmp     ebp, esp
.text:00001D71                 call    __RTC_CheckEsp
.text:00001D76                 mov     esp, ebp
.text:00001D78                 pop     ebp
.text:00001D79                 retn    4
.text:00001D79 ?ReadLocalItemDescriptor@CInArchive@NZip@NArchive@@AAEJAAVCItemEx@23@@Z endp
.text:00001D79
.text:00001D79 ; ---------------------------------------------------------------------------
.text:00001D7C $LN19_0         dd 2                    ; DATA XREF: NArchive::NZip::CInArchive::ReadLocalItemDescriptor(NArchive::NZip::CItemEx &)+211o
.text:00001D80                 dd offset $LN18_0
.text:00001D84 $LN18_0         dd 0FFFFEFF0h, 1000h    ; DATA XREF: .text:00001D80o
.text:00001D8C                 dd offset $LN16_0       ; "buf"
.text:00001D90                 dd 0FFFFEFDCh, 4
.text:00001D98                 dd offset $LN17_0       ; "processedSize"
.text:00001D9C $LN17_0         db 'processedSize',0    ; DATA XREF: .text:00001D98o
.text:00001DAA $LN16_0         db 'buf',0              ; DATA XREF: .text:00001D8Co
.text:00001DAE                 align 10h
.text:00001DB0
.text:00001DB0 ; =============== S U B R O U T I N E =======================================
.text:00001DB0
.text:00001DB0 ; Attributes: bp-based frame
.text:00001DB0
.text:00001DB0 ; __int32 __thiscall NArchive::NZip::CInArchive::ReadLocalItemAfterCdItemFull(NArchive::NZip::CInArchive *this, struct NArchive::NZip::CItemEx *)
.text:00001DB0                 public ?ReadLocalItemAfterCdItemFull@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z
.text:00001DB0 ?ReadLocalItemAfterCdItemFull@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z proc near
.text:00001DB0
.text:00001DB0 var_60          = dword ptr -60h
.text:00001DB0 var_5C          = dword ptr -5Ch
.text:00001DB0 var_58          = dword ptr -58h
.text:00001DB0 var_54          = dword ptr -54h
.text:00001DB0 var_50          = dword ptr -50h
.text:00001DB0 var_4C          = dword ptr -4Ch
.text:00001DB0 var_48          = dword ptr -48h
.text:00001DB0 var_44          = dword ptr -44h
.text:00001DB0 var_40          = dword ptr -40h
.text:00001DB0 var_39          = byte ptr -39h
.text:00001DB0 var_38          = dword ptr -38h
.text:00001DB0 var_30          = dword ptr -30h
.text:00001DB0 var_2C          = dword ptr -2Ch
.text:00001DB0 var_28          = dword ptr -28h
.text:00001DB0 var_24          = dword ptr -24h
.text:00001DB0 var_20          = dword ptr -20h
.text:00001DB0 var_1C          = dword ptr -1Ch
.text:00001DB0 var_18          = dword ptr -18h
.text:00001DB0 var_14          = dword ptr -14h
.text:00001DB0 var_10          = dword ptr -10h
.text:00001DB0 var_C           = dword ptr -0Ch
.text:00001DB0 var_4           = dword ptr -4
.text:00001DB0 arg_0           = dword ptr  8
.text:00001DB0
.text:00001DB0 ; FUNCTION CHUNK AT .text:00001F4B SIZE 00000009 BYTES
.text:00001DB0 ; FUNCTION CHUNK AT .text:00001F59 SIZE 00000020 BYTES
.text:00001DB0
.text:00001DB0                 push    ebp
.text:00001DB1                 mov     ebp, esp
.text:00001DB3                 push    0FFFFFFFFh
.text:00001DB5                 push    offset __ehhandler$?ReadLocalItemAfterCdItemFull@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z
.text:00001DBA                 mov     eax, large fs:0
.text:00001DC0                 push    eax
.text:00001DC1                 push    ecx
.text:00001DC2                 sub     esp, 50h
.text:00001DC5                 push    ebx
.text:00001DC6                 push    esi
.text:00001DC7                 push    edi
.text:00001DC8                 push    ecx
.text:00001DC9                 lea     edi, [ebp+var_60]
.text:00001DCC                 mov     ecx, 14h
.text:00001DD1                 mov     eax, 0CCCCCCCCh
.text:00001DD6                 rep stosd
.text:00001DD8                 pop     ecx
.text:00001DD9                 mov     eax, dword ptr ds:___security_cookie
.text:00001DDE                 xor     eax, ebp
.text:00001DE0                 push    eax
.text:00001DE1                 lea     eax, [ebp+var_C]
.text:00001DE4                 mov     large fs:0, eax
.text:00001DEA                 mov     [ebp+var_10], esp
.text:00001DED                 mov     [ebp+var_14], ecx
.text:00001DF0                 mov     eax, [ebp+arg_0]
.text:00001DF3                 movzx   ecx, byte ptr [eax+5Ch]
.text:00001DF7                 test    ecx, ecx
.text:00001DF9                 jz      short loc_1E02
.text:00001DFB                 xor     eax, eax
.text:00001DFD                 jmp     loc_1F5B
.text:00001E02 ; ---------------------------------------------------------------------------
.text:00001E02
.text:00001E02 loc_1E02:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadLocalItemAfterCdItemFull(NArchive::NZip::CItemEx &)+49j
.text:00001E02                 mov     [ebp+var_4], 0
.text:00001E09                 mov     edx, [ebp+arg_0]
.text:00001E0C                 push    edx             ; struct NArchive::NZip::CItemEx *
.text:00001E0D                 mov     ecx, [ebp+var_14] ; this
.text:00001E10                 call    ?ReadLocalItemAfterCdItem@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z ; NArchive::NZip::CInArchive::ReadLocalItemAfterCdItem(NArchive::NZip::CItemEx &)
.text:00001E15                 mov     [ebp+var_38], eax
.text:00001E18                 mov     eax, [ebp+var_38]
.text:00001E1B                 mov     [ebp+var_18], eax
.text:00001E1E                 cmp     [ebp+var_18], 0
.text:00001E22                 jz      short loc_1E2C
.text:00001E24                 mov     eax, [ebp+var_18]
.text:00001E27                 jmp     loc_1F5B
.text:00001E2C ; ---------------------------------------------------------------------------
.text:00001E2C
.text:00001E2C loc_1E2C:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadLocalItemAfterCdItemFull(NArchive::NZip::CItemEx &)+72j
.text:00001E2C                 mov     ecx, [ebp+arg_0] ; this
.text:00001E2F                 call    ?HasDescriptor@CLocalItem@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CLocalItem::HasDescriptor(void)
.text:00001E34                 mov     [ebp+var_39], al
.text:00001E37                 movzx   ecx, [ebp+var_39]
.text:00001E3B                 test    ecx, ecx
.text:00001E3D                 jz      loc_1F2F
.text:00001E43                 mov     ecx, [ebp+arg_0] ; this
.text:00001E46                 call    ?GetDataPosition@CItemEx@NZip@NArchive@@QBE_KXZ ; NArchive::NZip::CItemEx::GetDataPosition(void)
.text:00001E4B                 mov     [ebp+var_44], eax
.text:00001E4E                 mov     [ebp+var_40], edx
.text:00001E51                 mov     edx, [ebp+var_14]
.text:00001E54                 mov     eax, [edx+38h]
.text:00001E57                 add     eax, [ebp+var_44]
.text:00001E5A                 mov     ecx, [edx+3Ch]
.text:00001E5D                 adc     ecx, [ebp+var_40]
.text:00001E60                 mov     edx, [ebp+arg_0]
.text:00001E63                 add     eax, [edx+10h]
.text:00001E66                 adc     ecx, [edx+14h]
.text:00001E69                 push    ecx
.text:00001E6A                 push    eax             ; unsigned __int64
.text:00001E6B                 mov     ecx, [ebp+var_14] ; this
.text:00001E6E                 call    ?Seek@CInArchive@NZip@NArchive@@AAEJ_K@Z ; NArchive::NZip::CInArchive::Seek(unsigned __int64)
.text:00001E73                 mov     [ebp+var_48], eax
.text:00001E76                 mov     eax, [ebp+var_48]
.text:00001E79                 mov     [ebp+var_1C], eax
.text:00001E7C                 cmp     [ebp+var_1C], 0
.text:00001E80                 jz      short loc_1E8A
.text:00001E82                 mov     eax, [ebp+var_1C]
.text:00001E85                 jmp     loc_1F5B
.text:00001E8A ; ---------------------------------------------------------------------------
.text:00001E8A
.text:00001E8A loc_1E8A:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadLocalItemAfterCdItemFull(NArchive::NZip::CItemEx &)+D0j
.text:00001E8A                 mov     ecx, [ebp+var_14] ; this
.text:00001E8D                 call    ?ReadUInt32@CInArchive@NZip@NArchive@@AAEIXZ ; NArchive::NZip::CInArchive::ReadUInt32(void)
.text:00001E92                 mov     [ebp+var_4C], eax
.text:00001E95                 cmp     [ebp+var_4C], 8074B50h
.text:00001E9C                 jz      short loc_1EA8
.text:00001E9E                 mov     eax, 1
.text:00001EA3                 jmp     loc_1F5B
.text:00001EA8 ; ---------------------------------------------------------------------------
.text:00001EA8
.text:00001EA8 loc_1EA8:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadLocalItemAfterCdItemFull(NArchive::NZip::CItemEx &)+ECj
.text:00001EA8                 mov     ecx, [ebp+var_14] ; this
.text:00001EAB                 call    ?ReadUInt32@CInArchive@NZip@NArchive@@AAEIXZ ; NArchive::NZip::CInArchive::ReadUInt32(void)
.text:00001EB0                 mov     [ebp+var_50], eax
.text:00001EB3                 mov     ecx, [ebp+var_50]
.text:00001EB6                 mov     [ebp+var_20], ecx
.text:00001EB9                 mov     ecx, [ebp+var_14] ; this
.text:00001EBC                 call    ?ReadUInt32@CInArchive@NZip@NArchive@@AAEIXZ ; NArchive::NZip::CInArchive::ReadUInt32(void)
.text:00001EC1                 mov     [ebp+var_54], eax
.text:00001EC4                 mov     edx, [ebp+var_54]
.text:00001EC7                 xor     eax, eax
.text:00001EC9                 mov     [ebp+var_28], edx
.text:00001ECC                 mov     [ebp+var_24], eax
.text:00001ECF                 mov     ecx, [ebp+var_14] ; this
.text:00001ED2                 call    ?ReadUInt32@CInArchive@NZip@NArchive@@AAEIXZ ; NArchive::NZip::CInArchive::ReadUInt32(void)
.text:00001ED7                 mov     [ebp+var_58], eax
.text:00001EDA                 mov     ecx, [ebp+var_58]
.text:00001EDD                 xor     edx, edx
.text:00001EDF                 mov     [ebp+var_30], ecx
.text:00001EE2                 mov     [ebp+var_2C], edx
.text:00001EE5                 mov     eax, [ebp+arg_0]
.text:00001EE8                 mov     ecx, [ebp+var_20]
.text:00001EEB                 cmp     ecx, [eax+1Ch]
.text:00001EEE                 jnz     short loc_1F28
.text:00001EF0                 mov     edx, [ebp+arg_0]
.text:00001EF3                 mov     [ebp+var_5C], edx
.text:00001EF6                 mov     eax, [ebp+var_5C]
.text:00001EF9                 mov     ecx, [eax+10h]
.text:00001EFC                 cmp     ecx, [ebp+var_28]
.text:00001EFF                 jnz     short loc_1F28
.text:00001F01                 mov     edx, [ebp+var_5C]
.text:00001F04                 mov     eax, [edx+14h]
.text:00001F07                 cmp     eax, [ebp+var_24]
.text:00001F0A                 jnz     short loc_1F28
.text:00001F0C                 mov     ecx, [ebp+arg_0]
.text:00001F0F                 mov     [ebp+var_60], ecx
.text:00001F12                 mov     edx, [ebp+var_60]
.text:00001F15                 mov     eax, [edx+8]
.text:00001F18                 cmp     eax, [ebp+var_30]
.text:00001F1B                 jnz     short loc_1F28
.text:00001F1D                 mov     ecx, [ebp+var_60]
.text:00001F20                 mov     edx, [ecx+0Ch]
.text:00001F23                 cmp     edx, [ebp+var_2C]
.text:00001F26                 jz      short loc_1F2F
.text:00001F28
.text:00001F28 loc_1F28:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadLocalItemAfterCdItemFull(NArchive::NZip::CItemEx &)+13Ej
.text:00001F28                                         ; NArchive::NZip::CInArchive::ReadLocalItemAfterCdItemFull(NArchive::NZip::CItemEx &)+14Fj ...
.text:00001F28                 mov     eax, 1
.text:00001F2D                 jmp     short loc_1F5B
.text:00001F2F ; ---------------------------------------------------------------------------
.text:00001F2F
.text:00001F2F loc_1F2F:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadLocalItemAfterCdItemFull(NArchive::NZip::CItemEx &)+8Dj
.text:00001F2F                                         ; NArchive::NZip::CInArchive::ReadLocalItemAfterCdItemFull(NArchive::NZip::CItemEx &)+176j
.text:00001F2F                 jmp     short $LN11_0
.text:00001F2F ?ReadLocalItemAfterCdItemFull@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z endp
.text:00001F2F
.text:00001F31
.text:00001F31 ; =============== S U B R O U T I N E =======================================
.text:00001F31
.text:00001F31
.text:00001F31 __catch$?ReadLocalItemAfterCdItemFull@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z$0 proc near
.text:00001F31                                         ; DATA XREF: .xdata$x:00004798o
.text:00001F31                 mov     dword ptr [ebp-34h], 1
.text:00001F38                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00001F3F                 mov     eax, offset $LN14_0
.text:00001F44                 retn
.text:00001F44 __catch$?ReadLocalItemAfterCdItemFull@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z$0 endp
.text:00001F44
.text:00001F45 ; ---------------------------------------------------------------------------
.text:00001F45                 mov     eax, offset $LN11_0
.text:00001F4A                 retn
.text:00001F4B ; ---------------------------------------------------------------------------
.text:00001F4B ; START OF FUNCTION CHUNK FOR ?ReadLocalItemAfterCdItemFull@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z
.text:00001F4B
.text:00001F4B $LN11_0:                                ; CODE XREF: NArchive::NZip::CInArchive::ReadLocalItemAfterCdItemFull(NArchive::NZip::CItemEx &):loc_1F2Fj
.text:00001F4B                                         ; DATA XREF: .text:00001F45o
.text:00001F4B                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001F52                 jmp     short loc_1F59
.text:00001F52 ; END OF FUNCTION CHUNK FOR ?ReadLocalItemAfterCdItemFull@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z
.text:00001F54
.text:00001F54 ; =============== S U B R O U T I N E =======================================
.text:00001F54
.text:00001F54
.text:00001F54 $LN14_0         proc near               ; DATA XREF: __catch$?ReadLocalItemAfterCdItemFull@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z$0+Eo
.text:00001F54                 mov     eax, [ebp-34h]
.text:00001F57                 jmp     short loc_1F5B
.text:00001F57 $LN14_0         endp
.text:00001F57
.text:00001F59 ; ---------------------------------------------------------------------------
.text:00001F59 ; START OF FUNCTION CHUNK FOR ?ReadLocalItemAfterCdItemFull@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z
.text:00001F59
.text:00001F59 loc_1F59:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadLocalItemAfterCdItemFull(NArchive::NZip::CItemEx &)+1A2j
.text:00001F59                 xor     eax, eax
.text:00001F5B
.text:00001F5B loc_1F5B:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadLocalItemAfterCdItemFull(NArchive::NZip::CItemEx &)+4Dj
.text:00001F5B                                         ; NArchive::NZip::CInArchive::ReadLocalItemAfterCdItemFull(NArchive::NZip::CItemEx &)+77j ...
.text:00001F5B                 mov     ecx, [ebp+var_C]
.text:00001F5E                 mov     large fs:0, ecx
.text:00001F65                 pop     ecx
.text:00001F66                 pop     edi
.text:00001F67                 pop     esi
.text:00001F68                 pop     ebx
.text:00001F69                 add     esp, 60h
.text:00001F6C                 cmp     ebp, esp
.text:00001F6E                 call    __RTC_CheckEsp
.text:00001F73                 mov     esp, ebp
.text:00001F75                 pop     ebp
.text:00001F76                 retn    4
.text:00001F76 ; END OF FUNCTION CHUNK FOR ?ReadLocalItemAfterCdItemFull@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z
.text:00001F76 ; ---------------------------------------------------------------------------
.text:00001F79                 align 10h
.text:00001F80
.text:00001F80 ; =============== S U B R O U T I N E =======================================
.text:00001F80
.text:00001F80 ; Attributes: bp-based frame
.text:00001F80
.text:00001F80 ; __int32 __thiscall NArchive::NZip::CInArchive::ReadCdItem(NArchive::NZip::CInArchive *this, struct NArchive::NZip::CItemEx *)
.text:00001F80                 public ?ReadCdItem@CInArchive@NZip@NArchive@@AAEJAAVCItemEx@23@@Z
.text:00001F80 ?ReadCdItem@CInArchive@NZip@NArchive@@AAEJAAVCItemEx@23@@Z proc near
.text:00001F80                                         ; CODE XREF: NArchive::NZip::CInArchive::TryReadCd(CObjectVector<NArchive::NZip::CItemEx> &,unsigned __int64,unsigned __int64,NArchive::NZip::CProgressVirt *)+144p
.text:00001F80                                         ; NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+5A4p
.text:00001F80
.text:00001F80 var_54          = byte ptr -54h
.text:00001F80 var_50          = dword ptr -50h
.text:00001F80 var_48          = word ptr -48h
.text:00001F80 var_44          = word ptr -44h
.text:00001F80 var_40          = dword ptr -40h
.text:00001F80 var_38          = byte ptr -38h
.text:00001F80 var_37          = byte ptr -37h
.text:00001F80 var_36          = byte ptr -36h
.text:00001F80 var_35          = byte ptr -35h
.text:00001F80 var_34          = word ptr -34h
.text:00001F80 var_32          = word ptr -32h
.text:00001F80 var_30          = dword ptr -30h
.text:00001F80 var_2C          = dword ptr -2Ch
.text:00001F80 var_28          = dword ptr -28h
.text:00001F80 var_24          = dword ptr -24h
.text:00001F80 var_20          = word ptr -20h
.text:00001F80 var_1E          = word ptr -1Eh
.text:00001F80 var_1C          = word ptr -1Ch
.text:00001F80 var_1A          = word ptr -1Ah
.text:00001F80 var_18          = word ptr -18h
.text:00001F80 var_16          = dword ptr -16h
.text:00001F80 var_12          = dword ptr -12h
.text:00001F80 var_8           = dword ptr -8
.text:00001F80 var_4           = dword ptr -4
.text:00001F80 arg_0           = dword ptr  8
.text:00001F80
.text:00001F80                 push    ebp
.text:00001F81                 mov     ebp, esp
.text:00001F83                 sub     esp, 54h
.text:00001F86                 push    edi
.text:00001F87                 push    ecx
.text:00001F88                 lea     edi, [ebp+var_54]
.text:00001F8B                 mov     ecx, 15h
.text:00001F90                 mov     eax, 0CCCCCCCCh
.text:00001F95                 rep stosd
.text:00001F97                 pop     ecx
.text:00001F98                 mov     eax, dword ptr ds:___security_cookie
.text:00001F9D                 xor     eax, ebp
.text:00001F9F                 mov     [ebp+var_4], eax
.text:00001FA2                 mov     [ebp+var_8], ecx
.text:00001FA5                 mov     eax, [ebp+arg_0]
.text:00001FA8                 mov     byte ptr [eax+5Dh], 1
.text:00001FAC                 push    2Ah ; '*'       ; unsigned int
.text:00001FAE                 lea     ecx, [ebp+var_38]
.text:00001FB1                 push    ecx             ; unsigned __int8 *
.text:00001FB2                 mov     ecx, [ebp+var_8] ; this
.text:00001FB5                 call    ?SafeReadBytes@CInArchive@NZip@NArchive@@AAEXPAXI@Z ; NArchive::NZip::CInArchive::SafeReadBytes(void *,uint)
.text:00001FBA                 mov     edx, [ebp+arg_0]
.text:00001FBD                 mov     al, [ebp+var_38]
.text:00001FC0                 mov     [edx+38h], al
.text:00001FC3                 mov     ecx, [ebp+arg_0]
.text:00001FC6                 mov     dl, [ebp+var_37]
.text:00001FC9                 mov     [ecx+39h], dl
.text:00001FCC                 mov     eax, [ebp+arg_0]
.text:00001FCF                 mov     cl, [ebp+var_36]
.text:00001FD2                 mov     [eax+4], cl
.text:00001FD5                 mov     edx, [ebp+arg_0]
.text:00001FD8                 mov     al, [ebp+var_35]
.text:00001FDB                 mov     [edx+5], al
.text:00001FDE                 mov     ecx, [ebp+arg_0]
.text:00001FE1                 mov     dx, [ebp+var_34]
.text:00001FE5                 mov     [ecx], dx
.text:00001FE8                 mov     eax, [ebp+arg_0]
.text:00001FEB                 mov     cx, [ebp+var_32]
.text:00001FEF                 mov     [eax+2], cx
.text:00001FF3                 mov     edx, [ebp+arg_0]
.text:00001FF6                 mov     eax, [ebp+var_30]
.text:00001FF9                 mov     [edx+18h], eax
.text:00001FFC                 mov     ecx, [ebp+arg_0]
.text:00001FFF                 mov     edx, [ebp+var_2C]
.text:00002002                 mov     [ecx+1Ch], edx
.text:00002005                 mov     eax, [ebp+var_28]
.text:00002008                 xor     ecx, ecx
.text:0000200A                 mov     edx, [ebp+arg_0]
.text:0000200D                 mov     [edx+10h], eax
.text:00002010                 mov     [edx+14h], ecx
.text:00002013                 mov     eax, [ebp+var_24]
.text:00002016                 xor     ecx, ecx
.text:00002018                 mov     edx, [ebp+arg_0]
.text:0000201B                 mov     [edx+8], eax
.text:0000201E                 mov     [edx+0Ch], ecx
.text:00002021                 movzx   eax, [ebp+var_20]
.text:00002025                 mov     [ebp+var_40], eax
.text:00002028                 mov     cx, [ebp+var_1E]
.text:0000202C                 mov     [ebp+var_44], cx
.text:00002030                 mov     dx, [ebp+var_1C]
.text:00002034                 mov     [ebp+var_48], dx
.text:00002038                 movzx   eax, [ebp+var_1A]
.text:0000203C                 mov     [ebp+var_50], eax
.text:0000203F                 mov     ecx, [ebp+arg_0]
.text:00002042                 mov     dx, [ebp+var_18]
.text:00002046                 mov     [ecx+3Ah], dx
.text:0000204A                 mov     eax, [ebp+arg_0]
.text:0000204D                 mov     ecx, [ebp+var_16]
.text:00002050                 mov     [eax+3Ch], ecx
.text:00002053                 mov     edx, [ebp+var_12]
.text:00002056                 xor     eax, eax
.text:00002058                 mov     ecx, [ebp+arg_0]
.text:0000205B                 mov     [ecx+40h], edx
.text:0000205E                 mov     [ecx+44h], eax
.text:00002061                 mov     edx, [ebp+arg_0]
.text:00002064                 add     edx, 20h ; ' '
.text:00002067                 push    edx             ; struct AString *
.text:00002068                 mov     eax, [ebp+var_40]
.text:0000206B                 push    eax             ; unsigned int
.text:0000206C                 mov     ecx, [ebp+var_8] ; this
.text:0000206F                 call    ?ReadFileName@CInArchive@NZip@NArchive@@AAEXIAAVAString@@@Z ; NArchive::NZip::CInArchive::ReadFileName(uint,AString &)
.text:00002074                 movzx   ecx, [ebp+var_44]
.text:00002078                 test    ecx, ecx
.text:0000207A                 jle     short loc_20A9
.text:0000207C                 lea     edx, [ebp+var_50]
.text:0000207F                 push    edx             ; unsigned int *
.text:00002080                 mov     eax, [ebp+arg_0]
.text:00002083                 add     eax, 40h ; '@'
.text:00002086                 push    eax             ; unsigned __int64 *
.text:00002087                 mov     ecx, [ebp+arg_0]
.text:0000208A                 add     ecx, 10h
.text:0000208D                 push    ecx             ; unsigned __int64 *
.text:0000208E                 mov     edx, [ebp+arg_0]
.text:00002091                 add     edx, 8
.text:00002094                 push    edx             ; unsigned __int64 *
.text:00002095                 mov     eax, [ebp+arg_0]
.text:00002098                 add     eax, 48h ; 'H'
.text:0000209B                 push    eax             ; struct NArchive::NZip::CExtraBlock *
.text:0000209C                 movzx   ecx, [ebp+var_44]
.text:000020A0                 push    ecx             ; unsigned int
.text:000020A1                 mov     ecx, [ebp+var_8] ; this
.text:000020A4                 call    ?ReadExtra@CInArchive@NZip@NArchive@@AAE_NIAAUCExtraBlock@23@AA_K11AAI@Z ; NArchive::NZip::CInArchive::ReadExtra(uint,NArchive::NZip::CExtraBlock &,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &,uint &)
.text:000020A9
.text:000020A9 loc_20A9:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadCdItem(NArchive::NZip::CItemEx &)+FAj
.text:000020A9                 cmp     [ebp+var_50], 0
.text:000020AD                 jz      short loc_20B6
.text:000020AF                 mov     eax, 80004001h
.text:000020B4                 jmp     short loc_20CC
.text:000020B6 ; ---------------------------------------------------------------------------
.text:000020B6
.text:000020B6 loc_20B6:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadCdItem(NArchive::NZip::CItemEx &)+12Dj
.text:000020B6                 movzx   edx, [ebp+var_48]
.text:000020BA                 push    edx
.text:000020BB                 mov     eax, [ebp+arg_0]
.text:000020BE                 add     eax, 54h ; 'T'
.text:000020C1                 push    eax
.text:000020C2                 mov     ecx, [ebp+var_8]
.text:000020C5                 call    ?ReadBuffer@CInArchive@NZip@NArchive@@AAEXAAV?$CBuffer@E@@I@Z ; NArchive::NZip::CInArchive::ReadBuffer(CBuffer<uchar> &,uint)
.text:000020CA                 xor     eax, eax
.text:000020CC
.text:000020CC loc_20CC:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadCdItem(NArchive::NZip::CItemEx &)+134j
.text:000020CC                 push    edx
.text:000020CD                 mov     ecx, ebp
.text:000020CF                 push    eax
.text:000020D0                 lea     edx, $LN8_0
.text:000020D6                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000020DB                 pop     eax
.text:000020DC                 pop     edx
.text:000020DD                 pop     edi
.text:000020DE                 mov     ecx, [ebp+var_4]
.text:000020E1                 xor     ecx, ebp
.text:000020E3                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000020E8                 add     esp, 54h
.text:000020EB                 cmp     ebp, esp
.text:000020ED                 call    __RTC_CheckEsp
.text:000020F2                 mov     esp, ebp
.text:000020F4                 pop     ebp
.text:000020F5                 retn    4
.text:000020F5 ?ReadCdItem@CInArchive@NZip@NArchive@@AAEJAAVCItemEx@23@@Z endp
.text:000020F5
.text:000020F5 ; ---------------------------------------------------------------------------
.text:000020F8 $LN8_0          dd 2                    ; DATA XREF: NArchive::NZip::CInArchive::ReadCdItem(NArchive::NZip::CItemEx &)+150o
.text:000020FC                 dd offset $LN7_1
.text:00002100 $LN7_1          dd 0FFFFFFC8h, 2Ah      ; DATA XREF: .text:000020FCo
.text:00002108                 dd offset $LN5_3        ; "p"
.text:0000210C                 dd 0FFFFFFB0h, 4
.text:00002114                 dd offset $LN6          ; "diskNumberStart"
.text:00002118 $LN6            db 'diskNumberStart',0  ; DATA XREF: .text:00002114o
.text:00002128 $LN5_3          db 'p',0                ; DATA XREF: .text:00002108o
.text:0000212A                 align 10h
.text:00002130
.text:00002130 ; =============== S U B R O U T I N E =======================================
.text:00002130
.text:00002130 ; Attributes: bp-based frame
.text:00002130
.text:00002130 ; void __thiscall NArchive::NZip::CCdInfo::ParseEcd(NArchive::NZip::CCdInfo *this, const unsigned __int8 *)
.text:00002130                 public ?ParseEcd@CCdInfo@NZip@NArchive@@QAEXPBE@Z
.text:00002130 ?ParseEcd@CCdInfo@NZip@NArchive@@QAEXPBE@Z proc near
.text:00002130                                         ; CODE XREF: NArchive::NZip::CInArchive::FindCd(NArchive::NZip::CCdInfo &)+4A2p
.text:00002130
.text:00002130 var_4           = dword ptr -4
.text:00002130 arg_0           = dword ptr  8
.text:00002130
.text:00002130                 push    ebp
.text:00002131                 mov     ebp, esp
.text:00002133                 push    ecx
.text:00002134                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000213B                 mov     [ebp+var_4], ecx
.text:0000213E                 mov     eax, [ebp+arg_0]
.text:00002141                 movzx   eax, word ptr [eax+0Ah]
.text:00002145                 cdq
.text:00002146                 mov     ecx, [ebp+var_4]
.text:00002149                 mov     [ecx], eax
.text:0000214B                 mov     [ecx+4], edx
.text:0000214E                 mov     edx, [ebp+arg_0]
.text:00002151                 mov     eax, [edx+0Ch]
.text:00002154                 xor     ecx, ecx
.text:00002156                 mov     edx, [ebp+var_4]
.text:00002159                 mov     [edx+8], eax
.text:0000215C                 mov     [edx+0Ch], ecx
.text:0000215F                 mov     eax, [ebp+arg_0]
.text:00002162                 mov     ecx, [eax+10h]
.text:00002165                 xor     edx, edx
.text:00002167                 mov     eax, [ebp+var_4]
.text:0000216A                 mov     [eax+10h], ecx
.text:0000216D                 mov     [eax+14h], edx
.text:00002170                 mov     esp, ebp
.text:00002172                 pop     ebp
.text:00002173                 retn    4
.text:00002173 ?ParseEcd@CCdInfo@NZip@NArchive@@QAEXPBE@Z endp
.text:00002173
.text:00002173 ; ---------------------------------------------------------------------------
.text:00002176                 align 10h
.text:00002180
.text:00002180 ; =============== S U B R O U T I N E =======================================
.text:00002180
.text:00002180 ; Attributes: bp-based frame
.text:00002180
.text:00002180 ; void __thiscall NArchive::NZip::CCdInfo::ParseEcd64(NArchive::NZip::CCdInfo *this, const unsigned __int8 *)
.text:00002180                 public ?ParseEcd64@CCdInfo@NZip@NArchive@@QAEXPBE@Z
.text:00002180 ?ParseEcd64@CCdInfo@NZip@NArchive@@QAEXPBE@Z proc near
.text:00002180                                         ; CODE XREF: NArchive::NZip::CInArchive::TryEcd64(unsigned __int64,NArchive::NZip::CCdInfo &)+CAp
.text:00002180                                         ; NArchive::NZip::CInArchive::FindCd(NArchive::NZip::CCdInfo &)+344p
.text:00002180
.text:00002180 var_4           = dword ptr -4
.text:00002180 arg_0           = dword ptr  8
.text:00002180
.text:00002180                 push    ebp
.text:00002181                 mov     ebp, esp
.text:00002183                 push    ecx
.text:00002184                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000218B                 mov     [ebp+var_4], ecx
.text:0000218E                 mov     eax, [ebp+var_4]
.text:00002191                 mov     ecx, [ebp+arg_0]
.text:00002194                 mov     edx, [ecx+18h]
.text:00002197                 mov     [eax], edx
.text:00002199                 mov     ecx, [ecx+1Ch]
.text:0000219C                 mov     [eax+4], ecx
.text:0000219F                 mov     edx, [ebp+var_4]
.text:000021A2                 mov     eax, [ebp+arg_0]
.text:000021A5                 mov     ecx, [eax+28h]
.text:000021A8                 mov     [edx+8], ecx
.text:000021AB                 mov     eax, [eax+2Ch]
.text:000021AE                 mov     [edx+0Ch], eax
.text:000021B1                 mov     ecx, [ebp+var_4]
.text:000021B4                 mov     edx, [ebp+arg_0]
.text:000021B7                 mov     eax, [edx+30h]
.text:000021BA                 mov     [ecx+10h], eax
.text:000021BD                 mov     edx, [edx+34h]
.text:000021C0                 mov     [ecx+14h], edx
.text:000021C3                 mov     esp, ebp
.text:000021C5                 pop     ebp
.text:000021C6                 retn    4
.text:000021C6 ?ParseEcd64@CCdInfo@NZip@NArchive@@QAEXPBE@Z endp
.text:000021C6
.text:000021C6 ; ---------------------------------------------------------------------------
.text:000021C9                 align 10h
.text:000021D0
.text:000021D0 ; =============== S U B R O U T I N E =======================================
.text:000021D0
.text:000021D0 ; Attributes: bp-based frame
.text:000021D0
.text:000021D0 ; __int32 __thiscall NArchive::NZip::CInArchive::TryEcd64(NArchive::NZip::CInArchive *this, unsigned __int64, struct NArchive::NZip::CCdInfo *)
.text:000021D0                 public ?TryEcd64@CInArchive@NZip@NArchive@@AAEJ_KAAUCCdInfo@23@@Z
.text:000021D0 ?TryEcd64@CInArchive@NZip@NArchive@@AAEJ_KAAUCCdInfo@23@@Z proc near
.text:000021D0                                         ; CODE XREF: NArchive::NZip::CInArchive::FindCd(NArchive::NZip::CCdInfo &)+3A1p
.text:000021D0                                         ; NArchive::NZip::CInArchive::FindCd(NArchive::NZip::CCdInfo &)+449p
.text:000021D0
.text:000021D0 var_58          = dword ptr -58h
.text:000021D0 var_54          = dword ptr -54h
.text:000021D0 var_50          = dword ptr -50h
.text:000021D0 var_48          = byte ptr -48h
.text:000021D0 var_44          = dword ptr -44h
.text:000021D0 var_40          = dword ptr -40h
.text:000021D0 var_C           = dword ptr -0Ch
.text:000021D0 var_8           = dword ptr -8
.text:000021D0 var_4           = dword ptr -4
.text:000021D0 arg_0           = qword ptr  8
.text:000021D0 arg_8           = dword ptr  10h
.text:000021D0
.text:000021D0                 push    ebp
.text:000021D1                 mov     ebp, esp
.text:000021D3                 sub     esp, 58h
.text:000021D6                 push    edi
.text:000021D7                 push    ecx
.text:000021D8                 lea     edi, [ebp+var_58]
.text:000021DB                 mov     ecx, 16h
.text:000021E0                 mov     eax, 0CCCCCCCCh
.text:000021E5                 rep stosd
.text:000021E7                 pop     ecx
.text:000021E8                 mov     eax, dword ptr ds:___security_cookie
.text:000021ED                 xor     eax, ebp
.text:000021EF                 mov     [ebp+var_4], eax
.text:000021F2                 mov     [ebp+var_8], ecx
.text:000021F5                 cmp     dword ptr [ebp+arg_0+4], 80000000h
.text:000021FC                 jb      short loc_2210
.text:000021FE                 ja      short loc_2206
.text:00002200                 cmp     dword ptr [ebp+arg_0], 0
.text:00002204                 jb      short loc_2210
.text:00002206
.text:00002206 loc_2206:                               ; CODE XREF: NArchive::NZip::CInArchive::TryEcd64(unsigned __int64,NArchive::NZip::CCdInfo &)+2Ej
.text:00002206                 mov     eax, 1
.text:0000220B                 jmp     loc_22A1
.text:00002210 ; ---------------------------------------------------------------------------
.text:00002210
.text:00002210 loc_2210:                               ; CODE XREF: NArchive::NZip::CInArchive::TryEcd64(unsigned __int64,NArchive::NZip::CCdInfo &)+2Cj
.text:00002210                                         ; NArchive::NZip::CInArchive::TryEcd64(unsigned __int64,NArchive::NZip::CCdInfo &)+34j
.text:00002210                 mov     eax, dword ptr [ebp+arg_0+4]
.text:00002213                 push    eax
.text:00002214                 mov     ecx, dword ptr [ebp+arg_0]
.text:00002217                 push    ecx             ; unsigned __int64
.text:00002218                 mov     ecx, [ebp+var_8] ; this
.text:0000221B                 call    ?Seek@CInArchive@NZip@NArchive@@AAEJ_K@Z ; NArchive::NZip::CInArchive::Seek(unsigned __int64)
.text:00002220                 mov     [ebp+var_C], eax
.text:00002223                 cmp     [ebp+var_C], 0
.text:00002227                 jz      short loc_222E
.text:00002229                 mov     eax, [ebp+var_C]
.text:0000222C                 jmp     short loc_22A1
.text:0000222E ; ---------------------------------------------------------------------------
.text:0000222E
.text:0000222E loc_222E:                               ; CODE XREF: NArchive::NZip::CInArchive::TryEcd64(unsigned __int64,NArchive::NZip::CCdInfo &)+57j
.text:0000222E                 push    38h ; '8'       ; unsigned int
.text:00002230                 lea     edx, [ebp+var_48]
.text:00002233                 push    edx             ; void *
.text:00002234                 mov     ecx, [ebp+var_8]
.text:00002237                 add     ecx, 80h ; 'Ç'
.text:0000223D                 call    ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *(void)
.text:00002242                 push    eax             ; struct ISequentialInStream *
.text:00002243                 call    ?ReadStream_FALSE@@YGJPAUISequentialInStream@@PAXI@Z ; ReadStream_FALSE(ISequentialInStream *,void *,uint)
.text:00002248                 mov     [ebp+var_50], eax
.text:0000224B                 cmp     [ebp+var_50], 0
.text:0000224F                 jz      short loc_2256
.text:00002251                 mov     eax, [ebp+var_50]
.text:00002254                 jmp     short loc_22A1
.text:00002256 ; ---------------------------------------------------------------------------
.text:00002256
.text:00002256 loc_2256:                               ; CODE XREF: NArchive::NZip::CInArchive::TryEcd64(unsigned __int64,NArchive::NZip::CCdInfo &)+7Fj
.text:00002256                 cmp     dword ptr [ebp+var_48], 6064B50h
.text:0000225D                 jz      short loc_2266
.text:0000225F                 mov     eax, 1
.text:00002264                 jmp     short loc_22A1
.text:00002266 ; ---------------------------------------------------------------------------
.text:00002266
.text:00002266 loc_2266:                               ; CODE XREF: NArchive::NZip::CInArchive::TryEcd64(unsigned __int64,NArchive::NZip::CCdInfo &)+8Dj
.text:00002266                 mov     eax, [ebp+var_44]
.text:00002269                 mov     [ebp+var_58], eax
.text:0000226C                 mov     ecx, [ebp+var_40]
.text:0000226F                 mov     [ebp+var_54], ecx
.text:00002272                 cmp     [ebp+var_54], 0
.text:00002276                 ja      short loc_227E
.text:00002278                 cmp     [ebp+var_58], 2Ch ; ','
.text:0000227C                 jb      short loc_228C
.text:0000227E
.text:0000227E loc_227E:                               ; CODE XREF: NArchive::NZip::CInArchive::TryEcd64(unsigned __int64,NArchive::NZip::CCdInfo &)+A6j
.text:0000227E                 cmp     [ebp+var_54], 1
.text:00002282                 jb      short loc_2293
.text:00002284                 ja      short loc_228C
.text:00002286                 cmp     [ebp+var_58], 0
.text:0000228A                 jbe     short loc_2293
.text:0000228C
.text:0000228C loc_228C:                               ; CODE XREF: NArchive::NZip::CInArchive::TryEcd64(unsigned __int64,NArchive::NZip::CCdInfo &)+ACj
.text:0000228C                                         ; NArchive::NZip::CInArchive::TryEcd64(unsigned __int64,NArchive::NZip::CCdInfo &)+B4j
.text:0000228C                 mov     eax, 1
.text:00002291                 jmp     short loc_22A1
.text:00002293 ; ---------------------------------------------------------------------------
.text:00002293
.text:00002293 loc_2293:                               ; CODE XREF: NArchive::NZip::CInArchive::TryEcd64(unsigned __int64,NArchive::NZip::CCdInfo &)+B2j
.text:00002293                                         ; NArchive::NZip::CInArchive::TryEcd64(unsigned __int64,NArchive::NZip::CCdInfo &)+BAj
.text:00002293                 lea     edx, [ebp+var_48]
.text:00002296                 push    edx             ; unsigned __int8 *
.text:00002297                 mov     ecx, [ebp+arg_8] ; this
.text:0000229A                 call    ?ParseEcd64@CCdInfo@NZip@NArchive@@QAEXPBE@Z ; NArchive::NZip::CCdInfo::ParseEcd64(uchar const *)
.text:0000229F                 xor     eax, eax
.text:000022A1
.text:000022A1 loc_22A1:                               ; CODE XREF: NArchive::NZip::CInArchive::TryEcd64(unsigned __int64,NArchive::NZip::CCdInfo &)+3Bj
.text:000022A1                                         ; NArchive::NZip::CInArchive::TryEcd64(unsigned __int64,NArchive::NZip::CCdInfo &)+5Cj ...
.text:000022A1                 push    edx
.text:000022A2                 mov     ecx, ebp
.text:000022A4                 push    eax
.text:000022A5                 lea     edx, $LN14_1
.text:000022AB                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000022B0                 pop     eax
.text:000022B1                 pop     edx
.text:000022B2                 pop     edi
.text:000022B3                 mov     ecx, [ebp+var_4]
.text:000022B6                 xor     ecx, ebp
.text:000022B8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000022BD                 add     esp, 58h
.text:000022C0                 cmp     ebp, esp
.text:000022C2                 call    __RTC_CheckEsp
.text:000022C7                 mov     esp, ebp
.text:000022C9                 pop     ebp
.text:000022CA                 retn    0Ch
.text:000022CA ?TryEcd64@CInArchive@NZip@NArchive@@AAEJ_KAAUCCdInfo@23@@Z endp
.text:000022CA
.text:000022CA ; ---------------------------------------------------------------------------
.text:000022CD                 align 10h
.text:000022D0 $LN14_1         dd 1                    ; DATA XREF: NArchive::NZip::CInArchive::TryEcd64(unsigned __int64,NArchive::NZip::CCdInfo &)+D5o
.text:000022D4                 dd offset $LN13_2
.text:000022D8 $LN13_2         dd 0FFFFFFB8h, 38h      ; DATA XREF: .text:000022D4o
.text:000022E0                 dd offset $LN12_1
.text:000022E4 $LN12_1         dd 667562h, 2 dup(0CCCCCCCCh) ; DATA XREF: .text:000022E0o
.text:000022F0
.text:000022F0 ; =============== S U B R O U T I N E =======================================
.text:000022F0
.text:000022F0 ; Attributes: bp-based frame
.text:000022F0
.text:000022F0 ; __int32 __thiscall NArchive::NZip::CInArchive::FindCd(NArchive::NZip::CInArchive *this, struct NArchive::NZip::CCdInfo *)
.text:000022F0                 public ?FindCd@CInArchive@NZip@NArchive@@AAEJAAUCCdInfo@23@@Z
.text:000022F0 ?FindCd@CInArchive@NZip@NArchive@@AAEJAAUCCdInfo@23@@Z proc near
.text:000022F0                                         ; CODE XREF: NArchive::NZip::CInArchive::ReadCd(CObjectVector<NArchive::NZip::CItemEx> &,unsigned __int64 &,unsigned __int64 &,NArchive::NZip::CProgressVirt *)+2Dp
.text:000022F0
.text:000022F0 var_C0          = dword ptr -0C0h
.text:000022F0 var_BC          = dword ptr -0BCh
.text:000022F0 var_B8          = dword ptr -0B8h
.text:000022F0 var_B4          = dword ptr -0B4h
.text:000022F0 var_B0          = dword ptr -0B0h
.text:000022F0 var_AC          = dword ptr -0ACh
.text:000022F0 var_A8          = dword ptr -0A8h
.text:000022F0 var_A4          = dword ptr -0A4h
.text:000022F0 var_A0          = dword ptr -0A0h
.text:000022F0 var_9C          = dword ptr -9Ch
.text:000022F0 var_98          = dword ptr -98h
.text:000022F0 var_94          = dword ptr -94h
.text:000022F0 var_90          = dword ptr -90h
.text:000022F0 var_8C          = dword ptr -8Ch
.text:000022F0 var_88          = dword ptr -88h
.text:000022F0 var_84          = dword ptr -84h
.text:000022F0 var_80          = dword ptr -80h
.text:000022F0 var_7C          = dword ptr -7Ch
.text:000022F0 var_78          = dword ptr -78h
.text:000022F0 var_74          = dword ptr -74h
.text:000022F0 var_70          = dword ptr -70h
.text:000022F0 var_6C          = dword ptr -6Ch
.text:000022F0 var_68          = dword ptr -68h
.text:000022F0 var_64          = dword ptr -64h
.text:000022F0 var_60          = dword ptr -60h
.text:000022F0 var_5C          = qword ptr -5Ch
.text:000022F0 var_54          = dword ptr -54h
.text:000022F0 var_50          = dword ptr -50h
.text:000022F0 var_4C          = dword ptr -4Ch
.text:000022F0 var_48          = dword ptr -48h
.text:000022F0 var_44          = dword ptr -44h
.text:000022F0 var_40          = dword ptr -40h
.text:000022F0 var_3C          = dword ptr -3Ch
.text:000022F0 var_34          = byte ptr -34h
.text:000022F0 var_2C          = dword ptr -2Ch
.text:000022F0 var_28          = dword ptr -28h
.text:000022F0 var_24          = dword ptr -24h
.text:000022F0 var_1C          = dword ptr -1Ch
.text:000022F0 var_18          = dword ptr -18h
.text:000022F0 var_10          = dword ptr -10h
.text:000022F0 var_C           = dword ptr -0Ch
.text:000022F0 var_4           = dword ptr -4
.text:000022F0 arg_0           = dword ptr  8
.text:000022F0
.text:000022F0                 push    ebp
.text:000022F1                 mov     ebp, esp
.text:000022F3                 push    0FFFFFFFFh
.text:000022F5                 push    offset __ehhandler$?FindCd@CInArchive@NZip@NArchive@@AAEJAAUCCdInfo@23@@Z
.text:000022FA                 mov     eax, large fs:0
.text:00002300                 push    eax
.text:00002301                 sub     esp, 0B4h
.text:00002307                 push    esi
.text:00002308                 push    edi
.text:00002309                 push    ecx
.text:0000230A                 lea     edi, [ebp+var_C0]
.text:00002310                 mov     ecx, 2Dh ; '-'
.text:00002315                 mov     eax, 0CCCCCCCCh
.text:0000231A                 rep stosd
.text:0000231C                 pop     ecx
.text:0000231D                 mov     eax, dword ptr ds:___security_cookie
.text:00002322                 xor     eax, ebp
.text:00002324                 push    eax
.text:00002325                 lea     eax, [ebp+var_C]
.text:00002328                 mov     large fs:0, eax
.text:0000232E                 mov     [ebp+var_10], ecx
.text:00002331                 mov     ecx, [ebp+var_10]
.text:00002334                 add     ecx, 80h ; 'Ç'
.text:0000233A                 call    ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->(void)
.text:0000233F                 mov     [ebp+var_A4], eax
.text:00002345                 mov     esi, esp
.text:00002347                 lea     eax, [ebp+var_1C]
.text:0000234A                 push    eax
.text:0000234B                 push    2
.text:0000234D                 push    0
.text:0000234F                 push    0
.text:00002351                 mov     ecx, [ebp+var_A4]
.text:00002357                 push    ecx
.text:00002358                 mov     edx, [ebp+var_A4]
.text:0000235E                 mov     eax, [edx]
.text:00002360                 mov     ecx, [eax+10h]
.text:00002363                 call    ecx
.text:00002365                 cmp     esi, esp
.text:00002367                 call    __RTC_CheckEsp
.text:0000236C                 mov     [ebp+var_24], eax
.text:0000236F                 cmp     [ebp+var_24], 0
.text:00002373                 jz      short loc_237D
.text:00002375                 mov     eax, [ebp+var_24]
.text:00002378                 jmp     loc_285F
.text:0000237D ; ---------------------------------------------------------------------------
.text:0000237D
.text:0000237D loc_237D:                               ; CODE XREF: NArchive::NZip::CInArchive::FindCd(NArchive::NZip::CCdInfo &)+83j
.text:0000237D                 mov     [ebp+var_28], 10062h
.text:00002384                 cmp     [ebp+var_18], 0
.text:00002388                 ja      short loc_23A0
.text:0000238A                 jb      short loc_2395
.text:0000238C                 cmp     [ebp+var_1C], 10062h
.text:00002393                 jnb     short loc_23A0
.text:00002395
.text:00002395 loc_2395:                               ; CODE XREF: NArchive::NZip::CInArchive::FindCd(NArchive::NZip::CCdInfo &)+9Aj
.text:00002395                 mov     edx, [ebp+var_1C]
.text:00002398                 mov     [ebp+var_A8], edx
.text:0000239E                 jmp     short loc_23AA
.text:000023A0 ; ---------------------------------------------------------------------------
.text:000023A0
.text:000023A0 loc_23A0:                               ; CODE XREF: NArchive::NZip::CInArchive::FindCd(NArchive::NZip::CCdInfo &)+98j
.text:000023A0                                         ; NArchive::NZip::CInArchive::FindCd(NArchive::NZip::CCdInfo &)+A3j
.text:000023A0                 mov     [ebp+var_A8], 10062h
.text:000023AA
.text:000023AA loc_23AA:                               ; CODE XREF: NArchive::NZip::CInArchive::FindCd(NArchive::NZip::CCdInfo &)+AEj
.text:000023AA                 mov     eax, [ebp+var_A8]
.text:000023B0                 mov     [ebp+var_2C], eax
.text:000023B3                 cmp     [ebp+var_2C], 16h
.text:000023B7                 jnb     short loc_23C3
.text:000023B9                 mov     eax, 1
.text:000023BE                 jmp     loc_285F
.text:000023C3 ; ---------------------------------------------------------------------------
.text:000023C3
.text:000023C3 loc_23C3:                               ; CODE XREF: NArchive::NZip::CInArchive::FindCd(NArchive::NZip::CCdInfo &)+C7j
.text:000023C3                 mov     ecx, [ebp+var_2C]
.text:000023C6                 push    ecx
.text:000023C7                 lea     ecx, [ebp+var_34]
.text:000023CA                 call    ??0?$CObjArray@E@@QAE@I@Z ; CObjArray<uchar>::CObjArray<uchar>(uint)
.text:000023CF                 mov     [ebp+var_4], 0
.text:000023D6                 mov     edx, [ebp+var_2C]
.text:000023D9                 xor     eax, eax
.text:000023DB                 mov     ecx, [ebp+var_1C]
.text:000023DE                 sub     ecx, edx
.text:000023E0                 mov     edx, [ebp+var_18]
.text:000023E3                 sbb     edx, eax
.text:000023E5                 mov     [ebp+var_40], ecx
.text:000023E8                 mov     [ebp+var_3C], edx
.text:000023EB                 mov     ecx, [ebp+var_10]
.text:000023EE                 add     ecx, 80h ; 'Ç'
.text:000023F4                 call    ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->(void)
.text:000023F9                 mov     [ebp+var_AC], eax
.text:000023FF                 mov     eax, [ebp+var_10]
.text:00002402                 add     eax, 30h ; '0'
.text:00002405                 mov     esi, esp
.text:00002407                 push    eax
.text:00002408                 push    0
.text:0000240A                 mov     ecx, [ebp+var_3C]
.text:0000240D                 push    ecx
.text:0000240E                 mov     edx, [ebp+var_40]
.text:00002411                 push    edx
.text:00002412                 mov     eax, [ebp+var_AC]
.text:00002418                 push    eax
.text:00002419                 mov     ecx, [ebp+var_AC]
.text:0000241F                 mov     edx, [ecx]
.text:00002421                 mov     eax, [edx+10h]
.text:00002424                 call    eax
.text:00002426                 cmp     esi, esp
.text:00002428                 call    __RTC_CheckEsp
.text:0000242D                 mov     [ebp+var_44], eax
.text:00002430                 cmp     [ebp+var_44], 0
.text:00002434                 jz      short loc_2453
.text:00002436                 mov     ecx, [ebp+var_44]
.text:00002439                 mov     [ebp+var_7C], ecx
.text:0000243C                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002443                 lea     ecx, [ebp+var_34]
.text:00002446                 call    ??1?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::~CObjArray<uchar>(void)
.text:0000244B                 mov     eax, [ebp+var_7C]
.text:0000244E                 jmp     loc_285F
.text:00002453 ; ---------------------------------------------------------------------------
.text:00002453
.text:00002453 loc_2453:                               ; CODE XREF: NArchive::NZip::CInArchive::FindCd(NArchive::NZip::CCdInfo &)+144j
.text:00002453                 mov     edx, [ebp+var_10]
.text:00002456                 mov     [ebp+var_B0], edx
.text:0000245C                 mov     eax, [ebp+var_B0]
.text:00002462                 mov     ecx, [eax+30h]
.text:00002465                 cmp     ecx, [ebp+var_40]
.text:00002468                 jnz     short loc_2478
.text:0000246A                 mov     edx, [ebp+var_B0]
.text:00002470                 mov     eax, [edx+34h]
.text:00002473                 cmp     eax, [ebp+var_3C]
.text:00002476                 jz      short loc_2496
.text:00002478
.text:00002478 loc_2478:                               ; CODE XREF: NArchive::NZip::CInArchive::FindCd(NArchive::NZip::CCdInfo &)+178j
.text:00002478                 mov     [ebp+var_80], 1
.text:0000247F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002486                 lea     ecx, [ebp+var_34]
.text:00002489                 call    ??1?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::~CObjArray<uchar>(void)
.text:0000248E                 mov     eax, [ebp+var_80]
.text:00002491                 jmp     loc_285F
.text:00002496 ; ---------------------------------------------------------------------------
.text:00002496
.text:00002496 loc_2496:                               ; CODE XREF: NArchive::NZip::CInArchive::FindCd(NArchive::NZip::CCdInfo &)+186j
.text:00002496                 mov     ecx, [ebp+var_2C]
.text:00002499                 push    ecx             ; unsigned int
.text:0000249A                 lea     ecx, [ebp+var_34]
.text:0000249D                 call    ??B?$CObjArray@E@@QAEPAEXZ ; CObjArray<uchar>::operator uchar *(void)
.text:000024A2                 push    eax             ; void *
.text:000024A3                 mov     ecx, [ebp+var_10]
.text:000024A6                 add     ecx, 80h ; 'Ç'
.text:000024AC                 call    ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *(void)
.text:000024B1                 push    eax             ; struct ISequentialInStream *
.text:000024B2                 call    ?ReadStream_FALSE@@YGJPAUISequentialInStream@@PAXI@Z ; ReadStream_FALSE(ISequentialInStream *,void *,uint)
.text:000024B7                 mov     [ebp+var_48], eax
.text:000024BA                 cmp     [ebp+var_48], 0
.text:000024BE                 jz      short loc_24E3
.text:000024C0                 mov     edx, [ebp+var_48]
.text:000024C3                 mov     [ebp+var_84], edx
.text:000024C9                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000024D0                 lea     ecx, [ebp+var_34]
.text:000024D3                 call    ??1?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::~CObjArray<uchar>(void)
.text:000024D8                 mov     eax, [ebp+var_84]
.text:000024DE                 jmp     loc_285F
.text:000024E3 ; ---------------------------------------------------------------------------
.text:000024E3
.text:000024E3 loc_24E3:                               ; CODE XREF: NArchive::NZip::CInArchive::FindCd(NArchive::NZip::CCdInfo &)+1CEj
.text:000024E3                 lea     ecx, [ebp+var_34]
.text:000024E6                 call    ??B?$CObjArray@E@@QAEPAEXZ ; CObjArray<uchar>::operator uchar *(void)
.text:000024EB                 mov     [ebp+var_4C], eax
.text:000024EE                 mov     eax, [ebp+var_2C]
.text:000024F1                 sub     eax, 16h
.text:000024F4                 mov     [ebp+var_50], eax
.text:000024F7                 jmp     short loc_2502
.text:000024F9 ; ---------------------------------------------------------------------------
.text:000024F9
.text:000024F9 loc_24F9:                               ; CODE XREF: NArchive::NZip::CInArchive::FindCd(NArchive::NZip::CCdInfo &):loc_257Bj
.text:000024F9                                         ; NArchive::NZip::CInArchive::FindCd(NArchive::NZip::CCdInfo &):loc_284Bj
.text:000024F9                 mov     ecx, [ebp+var_50]
.text:000024FC                 sub     ecx, 1
.text:000024FF                 mov     [ebp+var_50], ecx
.text:00002502
.text:00002502 loc_2502:                               ; CODE XREF: NArchive::NZip::CInArchive::FindCd(NArchive::NZip::CCdInfo &)+207j
.text:00002502                 mov     edx, [ebp+var_4C]
.text:00002505                 add     edx, [ebp+var_50]
.text:00002508                 movzx   eax, byte ptr [edx]
.text:0000250B                 cmp     eax, 50h ; 'P'
.text:0000250E                 jz      short loc_2580
.text:00002510                 cmp     [ebp+var_50], 0
.text:00002514                 jnz     short loc_253A
.text:00002516                 mov     [ebp+var_88], 1
.text:00002520                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002527                 lea     ecx, [ebp+var_34]
.text:0000252A                 call    ??1?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::~CObjArray<uchar>(void)
.text:0000252F                 mov     eax, [ebp+var_88]
.text:00002535                 jmp     loc_285F
.text:0000253A ; ---------------------------------------------------------------------------
.text:0000253A
.text:0000253A loc_253A:                               ; CODE XREF: NArchive::NZip::CInArchive::FindCd(NArchive::NZip::CCdInfo &)+224j
.text:0000253A                 mov     ecx, [ebp+var_50]
.text:0000253D                 sub     ecx, 1
.text:00002540                 mov     [ebp+var_50], ecx
.text:00002543                 mov     edx, [ebp+var_4C]
.text:00002546                 add     edx, [ebp+var_50]
.text:00002549                 movzx   eax, byte ptr [edx]
.text:0000254C                 cmp     eax, 50h ; 'P'
.text:0000254F                 jz      short loc_2580
.text:00002551                 cmp     [ebp+var_50], 0
.text:00002555                 jnz     short loc_257B
.text:00002557                 mov     [ebp+var_8C], 1
.text:00002561                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002568                 lea     ecx, [ebp+var_34]
.text:0000256B                 call    ??1?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::~CObjArray<uchar>(void)
.text:00002570                 mov     eax, [ebp+var_8C]
.text:00002576                 jmp     loc_285F
.text:0000257B ; ---------------------------------------------------------------------------
.text:0000257B
.text:0000257B loc_257B:                               ; CODE XREF: NArchive::NZip::CInArchive::FindCd(NArchive::NZip::CCdInfo &)+265j
.text:0000257B                 jmp     loc_24F9
.text:00002580 ; ---------------------------------------------------------------------------
.text:00002580
.text:00002580 loc_2580:                               ; CODE XREF: NArchive::NZip::CInArchive::FindCd(NArchive::NZip::CCdInfo &)+21Ej
.text:00002580                                         ; NArchive::NZip::CInArchive::FindCd(NArchive::NZip::CCdInfo &)+25Fj
.text:00002580                 mov     ecx, [ebp+var_4C]
.text:00002583                 add     ecx, [ebp+var_50]
.text:00002586                 cmp     dword ptr [ecx], 6054B50h
.text:0000258C                 jnz     loc_2824
.text:00002592                 cmp     [ebp+var_50], 4Ch ; 'L'
.text:00002596                 jb      loc_2778
.text:0000259C                 mov     edx, [ebp+var_50]
.text:0000259F                 mov     eax, [ebp+var_4C]
.text:000025A2                 lea     ecx, [eax+edx-14h]
.text:000025A6                 mov     [ebp+var_54], ecx
.text:000025A9                 mov     edx, [ebp+var_54]
.text:000025AC                 cmp     dword ptr [edx], 7064B50h
.text:000025B2                 jnz     loc_2778
.text:000025B8                 mov     eax, [ebp+var_54]
.text:000025BB                 cmp     dword ptr [eax+4], 0
.text:000025BF                 jnz     loc_2778
.text:000025C5                 mov     ecx, [ebp+var_54]
.text:000025C8                 mov     edx, [ecx+8]
.text:000025CB                 mov     dword ptr [ebp+var_5C], edx
.text:000025CE                 mov     eax, [ecx+0Ch]
.text:000025D1                 mov     dword ptr [ebp+var_5C+4], eax
.text:000025D4                 mov     ecx, [ebp+var_2C]
.text:000025D7                 xor     edx, edx
.text:000025D9                 mov     eax, [ebp+var_1C]
.text:000025DC                 sub     eax, ecx
.text:000025DE                 mov     ecx, [ebp+var_18]
.text:000025E1                 sbb     ecx, edx
.text:000025E3                 mov     edx, [ebp+var_50]
.text:000025E6                 xor     esi, esi
.text:000025E8                 add     eax, edx
.text:000025EA                 adc     ecx, esi
.text:000025EC                 sub     eax, 4Ch ; 'L'
.text:000025EF                 sbb     ecx, 0
.text:000025F2                 mov     [ebp+var_64], eax
.text:000025F5                 mov     [ebp+var_60], ecx
.text:000025F8                 mov     eax, [ebp+var_54]
.text:000025FB                 sub     eax, 38h ; '8'
.text:000025FE                 mov     [ebp+var_68], eax
.text:00002601                 mov     ecx, [ebp+var_68]
.text:00002604                 cmp     dword ptr [ecx], 6064B50h
.text:0000260A                 jnz     short loc_2672
.text:0000260C                 mov     edx, [ebp+var_68]
.text:0000260F                 mov     [ebp+var_B4], edx
.text:00002615                 mov     eax, [ebp+var_B4]
.text:0000261B                 cmp     dword ptr [eax+4], 2Ch ; ','
.text:0000261F                 jnz     short loc_2672
.text:00002621                 mov     ecx, [ebp+var_B4]
.text:00002627                 cmp     dword ptr [ecx+8], 0
.text:0000262B                 jnz     short loc_2672
.text:0000262D                 mov     edx, [ebp+var_68]
.text:00002630                 push    edx             ; unsigned __int8 *
.text:00002631                 mov     ecx, [ebp+arg_0] ; this
.text:00002634                 call    ?ParseEcd64@CCdInfo@NZip@NArchive@@QAEXPBE@Z ; NArchive::NZip::CCdInfo::ParseEcd64(uchar const *)
.text:00002639                 mov     eax, [ebp+var_64]
.text:0000263C                 sub     eax, dword ptr [ebp+var_5C]
.text:0000263F                 mov     ecx, [ebp+var_60]
.text:00002642                 sbb     ecx, dword ptr [ebp+var_5C+4]
.text:00002645                 mov     edx, [ebp+var_10]
.text:00002648                 mov     [edx+38h], eax
.text:0000264B                 mov     [edx+3Ch], ecx
.text:0000264E                 mov     [ebp+var_90], 0
.text:00002658                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000265F                 lea     ecx, [ebp+var_34]
.text:00002662                 call    ??1?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::~CObjArray<uchar>(void)
.text:00002667                 mov     eax, [ebp+var_90]
.text:0000266D                 jmp     loc_285F
.text:00002672 ; ---------------------------------------------------------------------------
.text:00002672
.text:00002672 loc_2672:                               ; CODE XREF: NArchive::NZip::CInArchive::FindCd(NArchive::NZip::CCdInfo &)+31Aj
.text:00002672                                         ; NArchive::NZip::CInArchive::FindCd(NArchive::NZip::CCdInfo &)+32Fj ...
.text:00002672                 mov     eax, [ebp+var_64]
.text:00002675                 cmp     eax, dword ptr [ebp+var_5C]
.text:00002678                 jnz     short loc_2682
.text:0000267A                 mov     ecx, [ebp+var_60]
.text:0000267D                 cmp     ecx, dword ptr [ebp+var_5C+4]
.text:00002680                 jz      short loc_26CF
.text:00002682
.text:00002682 loc_2682:                               ; CODE XREF: NArchive::NZip::CInArchive::FindCd(NArchive::NZip::CCdInfo &)+388j
.text:00002682                 mov     edx, [ebp+arg_0]
.text:00002685                 push    edx             ; struct NArchive::NZip::CCdInfo *
.text:00002686                 mov     eax, dword ptr [ebp+var_5C+4]
.text:00002689                 push    eax
.text:0000268A                 mov     ecx, dword ptr [ebp+var_5C]
.text:0000268D                 push    ecx             ; unsigned __int64
.text:0000268E                 mov     ecx, [ebp+var_10] ; this
.text:00002691                 call    ?TryEcd64@CInArchive@NZip@NArchive@@AAEJ_KAAUCCdInfo@23@@Z ; NArchive::NZip::CInArchive::TryEcd64(unsigned __int64,NArchive::NZip::CCdInfo &)
.text:00002696                 test    eax, eax
.text:00002698                 jnz     short loc_26CF
.text:0000269A                 mov     edx, [ebp+var_10]
.text:0000269D                 mov     dword ptr [edx+38h], 0
.text:000026A4                 mov     dword ptr [edx+3Ch], 0
.text:000026AB                 mov     [ebp+var_94], 0
.text:000026B5                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000026BC                 lea     ecx, [ebp+var_34]
.text:000026BF                 call    ??1?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::~CObjArray<uchar>(void)
.text:000026C4                 mov     eax, [ebp+var_94]
.text:000026CA                 jmp     loc_285F
.text:000026CF ; ---------------------------------------------------------------------------
.text:000026CF
.text:000026CF loc_26CF:                               ; CODE XREF: NArchive::NZip::CInArchive::FindCd(NArchive::NZip::CCdInfo &)+390j
.text:000026CF                                         ; NArchive::NZip::CInArchive::FindCd(NArchive::NZip::CCdInfo &)+3A8j
.text:000026CF                 mov     eax, [ebp+var_10]
.text:000026D2                 mov     [ebp+var_B8], eax
.text:000026D8                 mov     ecx, [ebp+var_B8]
.text:000026DE                 mov     edx, [ebp+var_B8]
.text:000026E4                 mov     eax, [ecx+40h]
.text:000026E7                 or      eax, [edx+44h]
.text:000026EA                 jz      loc_2778
.text:000026F0                 mov     ecx, [ebp+var_10]
.text:000026F3                 mov     edx, [ecx+40h]
.text:000026F6                 add     edx, dword ptr [ebp+var_5C]
.text:000026F9                 mov     eax, [ecx+44h]
.text:000026FC                 adc     eax, dword ptr [ebp+var_5C+4]
.text:000026FF                 mov     [ebp+var_C0], edx
.text:00002705                 mov     [ebp+var_BC], eax
.text:0000270B                 mov     ecx, [ebp+var_C0]
.text:00002711                 cmp     ecx, [ebp+var_64]
.text:00002714                 jnz     short loc_2721
.text:00002716                 mov     edx, [ebp+var_BC]
.text:0000271C                 cmp     edx, [ebp+var_60]
.text:0000271F                 jz      short loc_2778
.text:00002721
.text:00002721 loc_2721:                               ; CODE XREF: NArchive::NZip::CInArchive::FindCd(NArchive::NZip::CCdInfo &)+424j
.text:00002721                 mov     eax, [ebp+arg_0]
.text:00002724                 push    eax             ; struct NArchive::NZip::CCdInfo *
.text:00002725                 mov     ecx, [ebp+var_10]
.text:00002728                 mov     edx, [ecx+40h]
.text:0000272B                 add     edx, dword ptr [ebp+var_5C]
.text:0000272E                 mov     eax, [ecx+44h]
.text:00002731                 adc     eax, dword ptr [ebp+var_5C+4]
.text:00002734                 push    eax
.text:00002735                 push    edx             ; unsigned __int64
.text:00002736                 mov     ecx, [ebp+var_10] ; this
.text:00002739                 call    ?TryEcd64@CInArchive@NZip@NArchive@@AAEJ_KAAUCCdInfo@23@@Z ; NArchive::NZip::CInArchive::TryEcd64(unsigned __int64,NArchive::NZip::CCdInfo &)
.text:0000273E                 test    eax, eax
.text:00002740                 jnz     short loc_2778
.text:00002742                 mov     ecx, [ebp+var_10]
.text:00002745                 mov     edx, [ebp+var_10]
.text:00002748                 mov     eax, [edx+40h]
.text:0000274B                 mov     [ecx+38h], eax
.text:0000274E                 mov     edx, [edx+44h]
.text:00002751                 mov     [ecx+3Ch], edx
.text:00002754                 mov     [ebp+var_98], 0
.text:0000275E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002765                 lea     ecx, [ebp+var_34]
.text:00002768                 call    ??1?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::~CObjArray<uchar>(void)
.text:0000276D                 mov     eax, [ebp+var_98]
.text:00002773                 jmp     loc_285F
.text:00002778 ; ---------------------------------------------------------------------------
.text:00002778
.text:00002778 loc_2778:                               ; CODE XREF: NArchive::NZip::CInArchive::FindCd(NArchive::NZip::CCdInfo &)+2A6j
.text:00002778                                         ; NArchive::NZip::CInArchive::FindCd(NArchive::NZip::CCdInfo &)+2C2j ...
.text:00002778                 mov     eax, [ebp+var_4C]
.text:0000277B                 add     eax, [ebp+var_50]
.text:0000277E                 cmp     dword ptr [eax+4], 0
.text:00002782                 jnz     loc_2824
.text:00002788                 mov     ecx, [ebp+var_4C]
.text:0000278B                 add     ecx, [ebp+var_50]
.text:0000278E                 push    ecx             ; unsigned __int8 *
.text:0000278F                 mov     ecx, [ebp+arg_0] ; this
.text:00002792                 call    ?ParseEcd@CCdInfo@NZip@NArchive@@QAEXPBE@Z ; NArchive::NZip::CCdInfo::ParseEcd(uchar const *)
.text:00002797                 mov     edx, [ebp+var_2C]
.text:0000279A                 xor     eax, eax
.text:0000279C                 mov     ecx, [ebp+var_1C]
.text:0000279F                 sub     ecx, edx
.text:000027A1                 mov     edx, [ebp+var_18]
.text:000027A4                 sbb     edx, eax
.text:000027A6                 mov     eax, [ebp+var_50]
.text:000027A9                 xor     esi, esi
.text:000027AB                 add     ecx, eax
.text:000027AD                 adc     edx, esi
.text:000027AF                 mov     [ebp+var_70], ecx
.text:000027B2                 mov     [ebp+var_6C], edx
.text:000027B5                 mov     ecx, [ebp+arg_0]
.text:000027B8                 mov     edx, [ebp+arg_0]
.text:000027BB                 mov     eax, [ecx+8]
.text:000027BE                 add     eax, [edx+10h]
.text:000027C1                 mov     ecx, [ecx+0Ch]
.text:000027C4                 adc     ecx, [edx+14h]
.text:000027C7                 mov     [ebp+var_78], eax
.text:000027CA                 mov     [ebp+var_74], ecx
.text:000027CD                 mov     edx, [ebp+var_10]
.text:000027D0                 mov     dword ptr [edx+38h], 0
.text:000027D7                 mov     dword ptr [edx+3Ch], 0
.text:000027DE                 mov     eax, [ebp+var_70]
.text:000027E1                 cmp     eax, [ebp+var_78]
.text:000027E4                 jnz     short loc_27EE
.text:000027E6                 mov     ecx, [ebp+var_6C]
.text:000027E9                 cmp     ecx, [ebp+var_74]
.text:000027EC                 jz      short loc_2803
.text:000027EE
.text:000027EE loc_27EE:                               ; CODE XREF: NArchive::NZip::CInArchive::FindCd(NArchive::NZip::CCdInfo &)+4F4j
.text:000027EE                 mov     edx, [ebp+var_70]
.text:000027F1                 sub     edx, [ebp+var_78]
.text:000027F4                 mov     eax, [ebp+var_6C]
.text:000027F7                 sbb     eax, [ebp+var_74]
.text:000027FA                 mov     ecx, [ebp+var_10]
.text:000027FD                 mov     [ecx+38h], edx
.text:00002800                 mov     [ecx+3Ch], eax
.text:00002803
.text:00002803 loc_2803:                               ; CODE XREF: NArchive::NZip::CInArchive::FindCd(NArchive::NZip::CCdInfo &)+4FCj
.text:00002803                 mov     [ebp+var_9C], 0
.text:0000280D                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002814                 lea     ecx, [ebp+var_34]
.text:00002817                 call    ??1?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::~CObjArray<uchar>(void)
.text:0000281C                 mov     eax, [ebp+var_9C]
.text:00002822                 jmp     short loc_285F
.text:00002824 ; ---------------------------------------------------------------------------
.text:00002824
.text:00002824 loc_2824:                               ; CODE XREF: NArchive::NZip::CInArchive::FindCd(NArchive::NZip::CCdInfo &)+29Cj
.text:00002824                                         ; NArchive::NZip::CInArchive::FindCd(NArchive::NZip::CCdInfo &)+492j
.text:00002824                 cmp     [ebp+var_50], 0
.text:00002828                 jnz     short loc_284B
.text:0000282A                 mov     [ebp+var_A0], 1
.text:00002834                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000283B                 lea     ecx, [ebp+var_34]
.text:0000283E                 call    ??1?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::~CObjArray<uchar>(void)
.text:00002843                 mov     eax, [ebp+var_A0]
.text:00002849                 jmp     short loc_285F
.text:0000284B ; ---------------------------------------------------------------------------
.text:0000284B
.text:0000284B loc_284B:                               ; CODE XREF: NArchive::NZip::CInArchive::FindCd(NArchive::NZip::CCdInfo &)+538j
.text:0000284B                 jmp     loc_24F9
.text:00002850 ; ---------------------------------------------------------------------------
.text:00002850                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002857                 lea     ecx, [ebp+var_34]
.text:0000285A                 call    ??1?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::~CObjArray<uchar>(void)
.text:0000285F
.text:0000285F loc_285F:                               ; CODE XREF: NArchive::NZip::CInArchive::FindCd(NArchive::NZip::CCdInfo &)+88j
.text:0000285F                                         ; NArchive::NZip::CInArchive::FindCd(NArchive::NZip::CCdInfo &)+CEj ...
.text:0000285F                 push    edx
.text:00002860                 mov     ecx, ebp
.text:00002862                 push    eax
.text:00002863                 lea     edx, $LN38
.text:00002869                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000286E                 pop     eax
.text:0000286F                 pop     edx
.text:00002870                 mov     ecx, [ebp+var_C]
.text:00002873                 mov     large fs:0, ecx
.text:0000287A                 pop     ecx
.text:0000287B                 pop     edi
.text:0000287C                 pop     esi
.text:0000287D                 add     esp, 0C0h
.text:00002883                 cmp     ebp, esp
.text:00002885                 call    __RTC_CheckEsp
.text:0000288A                 mov     esp, ebp
.text:0000288C                 pop     ebp
.text:0000288D                 retn    4
.text:0000288D ?FindCd@CInArchive@NZip@NArchive@@AAEJAAUCCdInfo@23@@Z endp
.text:0000288D
.text:0000288D ; ---------------------------------------------------------------------------
.text:00002890 $LN38           dd 2                    ; DATA XREF: NArchive::NZip::CInArchive::FindCd(NArchive::NZip::CCdInfo &)+573o
.text:00002894                 dd offset $LN37
.text:00002898 $LN37           dd 0FFFFFFE4h, 8        ; DATA XREF: .text:00002894o
.text:000028A0                 dd offset $LN34         ; "endPosition"
.text:000028A4                 db 0CCh
.text:000028A5                 db 3 dup(0FFh)
.text:000028A8                 dd 4
.text:000028AC                 dd offset $LN35_0       ; "byteBuffer"
.text:000028B0 $LN35_0         db 'byteBuffer',0       ; DATA XREF: .text:000028ACo
.text:000028BB $LN34           db 'endPosition',0      ; DATA XREF: .text:000028A0o
.text:000028C7                 align 10h
.text:000028D0
.text:000028D0 ; =============== S U B R O U T I N E =======================================
.text:000028D0
.text:000028D0 ; Attributes: bp-based frame
.text:000028D0
.text:000028D0 ; private: long __thiscall NArchive::NZip::CInArchive::TryReadCd(class CObjectVector<class NArchive::NZip::CItemEx> &, unsigned __int64, unsigned __int64, struct NArchive::NZip::CProgressVirt *)
.text:000028D0                 public ?TryReadCd@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@_K1PAUCProgressVirt@23@@Z
.text:000028D0 ?TryReadCd@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@_K1PAUCProgressVirt@23@@Z proc near
.text:000028D0                                         ; CODE XREF: NArchive::NZip::CInArchive::ReadCd(CObjectVector<NArchive::NZip::CItemEx> &,unsigned __int64 &,unsigned __int64 &,NArchive::NZip::CProgressVirt *)+B2p
.text:000028D0                                         ; NArchive::NZip::CInArchive::ReadCd(CObjectVector<NArchive::NZip::CItemEx> &,unsigned __int64 &,unsigned __int64 &,NArchive::NZip::CProgressVirt *)+FCp
.text:000028D0
.text:000028D0 var_B0          = dword ptr -0B0h
.text:000028D0 var_AC          = dword ptr -0ACh
.text:000028D0 var_A8          = dword ptr -0A8h
.text:000028D0 var_A4          = dword ptr -0A4h
.text:000028D0 var_A0          = dword ptr -0A0h
.text:000028D0 var_9C          = dword ptr -9Ch
.text:000028D0 var_98          = dword ptr -98h
.text:000028D0 var_94          = dword ptr -94h
.text:000028D0 var_90          = dword ptr -90h
.text:000028D0 var_8C          = dword ptr -8Ch
.text:000028D0 var_88          = dword ptr -88h
.text:000028D0 var_80          = byte ptr -80h
.text:000028D0 var_14          = dword ptr -14h
.text:000028D0 var_10          = dword ptr -10h
.text:000028D0 var_C           = dword ptr -0Ch
.text:000028D0 var_4           = dword ptr -4
.text:000028D0 arg_0           = dword ptr  8
.text:000028D0 arg_4           = dword ptr  0Ch
.text:000028D0 arg_8           = dword ptr  10h
.text:000028D0 arg_C           = dword ptr  14h
.text:000028D0 arg_10          = dword ptr  18h
.text:000028D0 arg_14          = dword ptr  1Ch
.text:000028D0
.text:000028D0                 push    ebp
.text:000028D1                 mov     ebp, esp
.text:000028D3                 push    0FFFFFFFFh
.text:000028D5                 push    offset __ehhandler$?TryReadCd@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@_K1PAUCProgressVirt@23@@Z
.text:000028DA                 mov     eax, large fs:0
.text:000028E0                 push    eax
.text:000028E1                 sub     esp, 0A4h
.text:000028E7                 push    esi
.text:000028E8                 push    edi
.text:000028E9                 push    ecx
.text:000028EA                 lea     edi, [ebp+var_B0]
.text:000028F0                 mov     ecx, 29h ; ')'
.text:000028F5                 mov     eax, 0CCCCCCCCh
.text:000028FA                 rep stosd
.text:000028FC                 pop     ecx
.text:000028FD                 mov     eax, dword ptr ds:___security_cookie
.text:00002902                 xor     eax, ebp
.text:00002904                 push    eax
.text:00002905                 lea     eax, [ebp+var_C]
.text:00002908                 mov     large fs:0, eax
.text:0000290E                 mov     [ebp+var_10], ecx
.text:00002911                 mov     ecx, [ebp+arg_0]
.text:00002914                 call    ?Clear@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEXXZ ; CObjectVector<NArchive::NZip::CItemEx>::Clear(void)
.text:00002919                 mov     ecx, [ebp+var_10]
.text:0000291C                 add     ecx, 80h ; 'Ç'
.text:00002922                 call    ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->(void)
.text:00002927                 mov     [ebp+var_98], eax
.text:0000292D                 mov     eax, [ebp+var_10]
.text:00002930                 add     eax, 30h ; '0'
.text:00002933                 mov     esi, esp
.text:00002935                 push    eax
.text:00002936                 push    0
.text:00002938                 mov     ecx, [ebp+arg_8]
.text:0000293B                 push    ecx
.text:0000293C                 mov     edx, [ebp+arg_4]
.text:0000293F                 push    edx
.text:00002940                 mov     eax, [ebp+var_98]
.text:00002946                 push    eax
.text:00002947                 mov     ecx, [ebp+var_98]
.text:0000294D                 mov     edx, [ecx]
.text:0000294F                 mov     eax, [edx+10h]
.text:00002952                 call    eax
.text:00002954                 cmp     esi, esp
.text:00002956                 call    __RTC_CheckEsp
.text:0000295B                 mov     [ebp+var_14], eax
.text:0000295E                 cmp     [ebp+var_14], 0
.text:00002962                 jz      short loc_296C
.text:00002964                 mov     eax, [ebp+var_14]
.text:00002967                 jmp     loc_2B2A
.text:0000296C ; ---------------------------------------------------------------------------
.text:0000296C
.text:0000296C loc_296C:                               ; CODE XREF: NArchive::NZip::CInArchive::TryReadCd(CObjectVector<NArchive::NZip::CItemEx> &,unsigned __int64,unsigned __int64,NArchive::NZip::CProgressVirt *)+92j
.text:0000296C                 mov     ecx, [ebp+var_10]
.text:0000296F                 mov     [ebp+var_9C], ecx
.text:00002975                 mov     edx, [ebp+var_9C]
.text:0000297B                 mov     eax, [edx+30h]
.text:0000297E                 cmp     eax, [ebp+arg_4]
.text:00002981                 jnz     short loc_2991
.text:00002983                 mov     ecx, [ebp+var_9C]
.text:00002989                 mov     edx, [ecx+34h]
.text:0000298C                 cmp     edx, [ebp+arg_8]
.text:0000298F                 jz      short loc_299B
.text:00002991
.text:00002991 loc_2991:                               ; CODE XREF: NArchive::NZip::CInArchive::TryReadCd(CObjectVector<NArchive::NZip::CItemEx> &,unsigned __int64,unsigned __int64,NArchive::NZip::CProgressVirt *)+B1j
.text:00002991                 mov     eax, 1
.text:00002996                 jmp     loc_2B2A
.text:0000299B ; ---------------------------------------------------------------------------
.text:0000299B
.text:0000299B loc_299B:                               ; CODE XREF: NArchive::NZip::CInArchive::TryReadCd(CObjectVector<NArchive::NZip::CItemEx> &,unsigned __int64,unsigned __int64,NArchive::NZip::CProgressVirt *)+BFj
.text:0000299B                 mov     ecx, [ebp+var_10] ; this
.text:0000299E                 call    ?Init@CInBufferBase@@QAEXXZ ; CInBufferBase::Init(void)
.text:000029A3                 mov     eax, [ebp+var_10]
.text:000029A6                 mov     byte ptr [eax+28h], 1
.text:000029AA
.text:000029AA loc_29AA:                               ; CODE XREF: NArchive::NZip::CInArchive::TryReadCd(CObjectVector<NArchive::NZip::CItemEx> &,unsigned __int64,unsigned __int64,NArchive::NZip::CProgressVirt *)+208j
.text:000029AA                 mov     ecx, [ebp+var_10]
.text:000029AD                 mov     edx, [ecx+30h]
.text:000029B0                 sub     edx, [ebp+arg_4]
.text:000029B3                 mov     eax, [ecx+34h]
.text:000029B6                 sbb     eax, [ebp+arg_8]
.text:000029B9                 mov     [ebp+var_A4], edx
.text:000029BF                 mov     [ebp+var_A0], eax
.text:000029C5                 mov     ecx, [ebp+var_A0]
.text:000029CB                 cmp     ecx, [ebp+arg_10]
.text:000029CE                 ja      loc_2ADD
.text:000029D4                 jb      short loc_29E5
.text:000029D6                 mov     edx, [ebp+var_A4]
.text:000029DC                 cmp     edx, [ebp+arg_C]
.text:000029DF                 jnb     loc_2ADD
.text:000029E5
.text:000029E5 loc_29E5:                               ; CODE XREF: NArchive::NZip::CInArchive::TryReadCd(CObjectVector<NArchive::NZip::CItemEx> &,unsigned __int64,unsigned __int64,NArchive::NZip::CProgressVirt *)+104j
.text:000029E5                 mov     ecx, [ebp+var_10] ; this
.text:000029E8                 call    ?ReadUInt32@CInArchive@NZip@NArchive@@AAEIXZ ; NArchive::NZip::CInArchive::ReadUInt32(void)
.text:000029ED                 cmp     eax, 2014B50h
.text:000029F2                 jz      short loc_29FE
.text:000029F4                 mov     eax, 1
.text:000029F9                 jmp     loc_2B2A
.text:000029FE ; ---------------------------------------------------------------------------
.text:000029FE
.text:000029FE loc_29FE:                               ; CODE XREF: NArchive::NZip::CInArchive::TryReadCd(CObjectVector<NArchive::NZip::CItemEx> &,unsigned __int64,unsigned __int64,NArchive::NZip::CProgressVirt *)+122j
.text:000029FE                 lea     ecx, [ebp+var_80] ; this
.text:00002A01                 call    ??0CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::CItemEx(void)
.text:00002A06                 mov     [ebp+var_4], 0
.text:00002A0D                 lea     eax, [ebp+var_80]
.text:00002A10                 push    eax             ; struct NArchive::NZip::CItemEx *
.text:00002A11                 mov     ecx, [ebp+var_10] ; this
.text:00002A14                 call    ?ReadCdItem@CInArchive@NZip@NArchive@@AAEJAAVCItemEx@23@@Z ; NArchive::NZip::CInArchive::ReadCdItem(NArchive::NZip::CItemEx &)
.text:00002A19                 mov     [ebp+var_88], eax
.text:00002A1F                 cmp     [ebp+var_88], 0
.text:00002A26                 jz      short loc_2A4E
.text:00002A28                 mov     ecx, [ebp+var_88]
.text:00002A2E                 mov     [ebp+var_90], ecx
.text:00002A34                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002A3B                 lea     ecx, [ebp+var_80] ; this
.text:00002A3E                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:00002A43                 mov     eax, [ebp+var_90]
.text:00002A49                 jmp     loc_2B2A
.text:00002A4E ; ---------------------------------------------------------------------------
.text:00002A4E
.text:00002A4E loc_2A4E:                               ; CODE XREF: NArchive::NZip::CInArchive::TryReadCd(CObjectVector<NArchive::NZip::CItemEx> &,unsigned __int64,unsigned __int64,NArchive::NZip::CProgressVirt *)+156j
.text:00002A4E                 lea     edx, [ebp+var_80]
.text:00002A51                 push    edx             ; struct NArchive::NZip::CItemEx *
.text:00002A52                 mov     ecx, [ebp+arg_0]
.text:00002A55                 call    ?Add@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEIABVCItemEx@NZip@NArchive@@@Z ; CObjectVector<NArchive::NZip::CItemEx>::Add(NArchive::NZip::CItemEx const &)
.text:00002A5A                 cmp     [ebp+arg_14], 0
.text:00002A5E                 jz      short loc_2AC9
.text:00002A60                 mov     ecx, [ebp+arg_0]
.text:00002A63                 call    ?Size@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CItemEx>::Size(void)
.text:00002A68                 xor     edx, edx
.text:00002A6A                 mov     ecx, 1
.text:00002A6F                 div     ecx
.text:00002A71                 test    edx, edx
.text:00002A73                 jnz     short loc_2AC9
.text:00002A75                 mov     ecx, [ebp+arg_0]
.text:00002A78                 call    ?Size@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CItemEx>::Size(void)
.text:00002A7D                 xor     edx, edx
.text:00002A7F                 mov     esi, esp
.text:00002A81                 push    edx
.text:00002A82                 push    eax
.text:00002A83                 mov     eax, [ebp+arg_14]
.text:00002A86                 mov     edx, [eax]
.text:00002A88                 mov     ecx, [ebp+arg_14]
.text:00002A8B                 mov     eax, [edx+8]
.text:00002A8E                 call    eax
.text:00002A90                 cmp     esi, esp
.text:00002A92                 call    __RTC_CheckEsp
.text:00002A97                 mov     [ebp+var_8C], eax
.text:00002A9D                 cmp     [ebp+var_8C], 0
.text:00002AA4                 jz      short loc_2AC9
.text:00002AA6                 mov     ecx, [ebp+var_8C]
.text:00002AAC                 mov     [ebp+var_94], ecx
.text:00002AB2                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002AB9                 lea     ecx, [ebp+var_80] ; this
.text:00002ABC                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:00002AC1                 mov     eax, [ebp+var_94]
.text:00002AC7                 jmp     short loc_2B2A
.text:00002AC9 ; ---------------------------------------------------------------------------
.text:00002AC9
.text:00002AC9 loc_2AC9:                               ; CODE XREF: NArchive::NZip::CInArchive::TryReadCd(CObjectVector<NArchive::NZip::CItemEx> &,unsigned __int64,unsigned __int64,NArchive::NZip::CProgressVirt *)+18Ej
.text:00002AC9                                         ; NArchive::NZip::CInArchive::TryReadCd(CObjectVector<NArchive::NZip::CItemEx> &,unsigned __int64,unsigned __int64,NArchive::NZip::CProgressVirt *)+1A3j ...
.text:00002AC9                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002AD0                 lea     ecx, [ebp+var_80] ; this
.text:00002AD3                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:00002AD8                 jmp     loc_29AA
.text:00002ADD ; ---------------------------------------------------------------------------
.text:00002ADD
.text:00002ADD loc_2ADD:                               ; CODE XREF: NArchive::NZip::CInArchive::TryReadCd(CObjectVector<NArchive::NZip::CItemEx> &,unsigned __int64,unsigned __int64,NArchive::NZip::CProgressVirt *)+FEj
.text:00002ADD                                         ; NArchive::NZip::CInArchive::TryReadCd(CObjectVector<NArchive::NZip::CItemEx> &,unsigned __int64,unsigned __int64,NArchive::NZip::CProgressVirt *)+10Fj
.text:00002ADD                 mov     edx, [ebp+var_10]
.text:00002AE0                 mov     eax, [edx+30h]
.text:00002AE3                 sub     eax, [ebp+arg_4]
.text:00002AE6                 mov     ecx, [edx+34h]
.text:00002AE9                 sbb     ecx, [ebp+arg_8]
.text:00002AEC                 mov     [ebp+var_AC], eax
.text:00002AF2                 mov     [ebp+var_A8], ecx
.text:00002AF8                 mov     edx, [ebp+var_AC]
.text:00002AFE                 cmp     edx, [ebp+arg_C]
.text:00002B01                 jnz     short loc_2B1A
.text:00002B03                 mov     eax, [ebp+var_A8]
.text:00002B09                 cmp     eax, [ebp+arg_10]
.text:00002B0C                 jnz     short loc_2B1A
.text:00002B0E                 mov     [ebp+var_B0], 0
.text:00002B18                 jmp     short loc_2B24
.text:00002B1A ; ---------------------------------------------------------------------------
.text:00002B1A
.text:00002B1A loc_2B1A:                               ; CODE XREF: NArchive::NZip::CInArchive::TryReadCd(CObjectVector<NArchive::NZip::CItemEx> &,unsigned __int64,unsigned __int64,NArchive::NZip::CProgressVirt *)+231j
.text:00002B1A                                         ; NArchive::NZip::CInArchive::TryReadCd(CObjectVector<NArchive::NZip::CItemEx> &,unsigned __int64,unsigned __int64,NArchive::NZip::CProgressVirt *)+23Cj
.text:00002B1A                 mov     [ebp+var_B0], 1
.text:00002B24
.text:00002B24 loc_2B24:                               ; CODE XREF: NArchive::NZip::CInArchive::TryReadCd(CObjectVector<NArchive::NZip::CItemEx> &,unsigned __int64,unsigned __int64,NArchive::NZip::CProgressVirt *)+248j
.text:00002B24                 mov     eax, [ebp+var_B0]
.text:00002B2A
.text:00002B2A loc_2B2A:                               ; CODE XREF: NArchive::NZip::CInArchive::TryReadCd(CObjectVector<NArchive::NZip::CItemEx> &,unsigned __int64,unsigned __int64,NArchive::NZip::CProgressVirt *)+97j
.text:00002B2A                                         ; NArchive::NZip::CInArchive::TryReadCd(CObjectVector<NArchive::NZip::CItemEx> &,unsigned __int64,unsigned __int64,NArchive::NZip::CProgressVirt *)+C6j ...
.text:00002B2A                 push    edx
.text:00002B2B                 mov     ecx, ebp
.text:00002B2D                 push    eax
.text:00002B2E                 lea     edx, $LN19_1
.text:00002B34                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002B39                 pop     eax
.text:00002B3A                 pop     edx
.text:00002B3B                 mov     ecx, [ebp+var_C]
.text:00002B3E                 mov     large fs:0, ecx
.text:00002B45                 pop     ecx
.text:00002B46                 pop     edi
.text:00002B47                 pop     esi
.text:00002B48                 add     esp, 0B0h
.text:00002B4E                 cmp     ebp, esp
.text:00002B50                 call    __RTC_CheckEsp
.text:00002B55                 mov     esp, ebp
.text:00002B57                 pop     ebp
.text:00002B58                 retn    18h
.text:00002B58 ?TryReadCd@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@_K1PAUCProgressVirt@23@@Z endp
.text:00002B58
.text:00002B58 ; ---------------------------------------------------------------------------
.text:00002B5B                 align 4
.text:00002B5C $LN19_1         dd 1                    ; DATA XREF: NArchive::NZip::CInArchive::TryReadCd(CObjectVector<NArchive::NZip::CItemEx> &,unsigned __int64,unsigned __int64,NArchive::NZip::CProgressVirt *)+25Eo
.text:00002B60                 dd offset $LN18_1
.text:00002B64 ; ---------------------------------------------------------------------------
.text:00002B64
.text:00002B64 $LN18_1:                                ; DATA XREF: .text:00002B60o
.text:00002B64                 cmp     bh, 0FFh
.text:00002B67                 jmp     fword ptr [eax+0]
.text:00002B67 ; ---------------------------------------------------------------------------
.text:00002B6A                 align 4
.text:00002B6C                 dd offset $LN16_1       ; "cdItem"
.text:00002B70 $LN16_1         db 'cdItem',0           ; DATA XREF: .text:00002B6Co
.text:00002B77                 align 10h
.text:00002B80
.text:00002B80 ; =============== S U B R O U T I N E =======================================
.text:00002B80
.text:00002B80 ; Attributes: bp-based frame
.text:00002B80
.text:00002B80 ; private: long __thiscall NArchive::NZip::CInArchive::ReadCd(class CObjectVector<class NArchive::NZip::CItemEx> &, unsigned __int64 &, unsigned __int64 &, struct NArchive::NZip::CProgressVirt *)
.text:00002B80                 public ?ReadCd@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@AA_K1PAUCProgressVirt@23@@Z
.text:00002B80 ?ReadCd@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@AA_K1PAUCProgressVirt@23@@Z proc near
.text:00002B80                                         ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+2A4p
.text:00002B80
.text:00002B80 var_34          = dword ptr -34h
.text:00002B80 var_30          = dword ptr -30h
.text:00002B80 var_2C          = dword ptr -2Ch
.text:00002B80 var_24          = dword ptr -24h
.text:00002B80 var_20          = dword ptr -20h
.text:00002B80 var_1C          = dword ptr -1Ch
.text:00002B80 var_18          = dword ptr -18h
.text:00002B80 var_14          = dword ptr -14h
.text:00002B80 var_10          = dword ptr -10h
.text:00002B80 var_8           = dword ptr -8
.text:00002B80 var_4           = dword ptr -4
.text:00002B80 arg_0           = dword ptr  8
.text:00002B80 arg_4           = dword ptr  0Ch
.text:00002B80 arg_8           = dword ptr  10h
.text:00002B80 arg_C           = dword ptr  14h
.text:00002B80
.text:00002B80                 push    ebp
.text:00002B81                 mov     ebp, esp
.text:00002B83                 sub     esp, 34h
.text:00002B86                 push    esi
.text:00002B87                 push    edi
.text:00002B88                 push    ecx
.text:00002B89                 lea     edi, [ebp+var_34]
.text:00002B8C                 mov     ecx, 0Dh
.text:00002B91                 mov     eax, 0CCCCCCCCh
.text:00002B96                 rep stosd
.text:00002B98                 pop     ecx
.text:00002B99                 mov     eax, dword ptr ds:___security_cookie
.text:00002B9E                 xor     eax, ebp
.text:00002BA0                 mov     [ebp+var_4], eax
.text:00002BA3                 mov     [ebp+var_8], ecx
.text:00002BA6                 lea     eax, [ebp+var_24]
.text:00002BA9                 push    eax             ; struct NArchive::NZip::CCdInfo *
.text:00002BAA                 mov     ecx, [ebp+var_8] ; this
.text:00002BAD                 call    ?FindCd@CInArchive@NZip@NArchive@@AAEJAAUCCdInfo@23@@Z ; NArchive::NZip::CInArchive::FindCd(NArchive::NZip::CCdInfo &)
.text:00002BB2                 mov     [ebp+var_2C], eax
.text:00002BB5                 cmp     [ebp+var_2C], 0
.text:00002BB9                 jz      short loc_2BC3
.text:00002BBB                 mov     eax, [ebp+var_2C]
.text:00002BBE                 jmp     loc_2C9F
.text:00002BC3 ; ---------------------------------------------------------------------------
.text:00002BC3
.text:00002BC3 loc_2BC3:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadCd(CObjectVector<NArchive::NZip::CItemEx> &,unsigned __int64 &,unsigned __int64 &,NArchive::NZip::CProgressVirt *)+39j
.text:00002BC3                 mov     [ebp+var_30], 1
.text:00002BCA                 mov     ecx, [ebp+arg_8]
.text:00002BCD                 mov     edx, [ebp+var_1C]
.text:00002BD0                 mov     [ecx], edx
.text:00002BD2                 mov     eax, [ebp+var_18]
.text:00002BD5                 mov     [ecx+4], eax
.text:00002BD8                 mov     ecx, [ebp+arg_4]
.text:00002BDB                 mov     edx, [ebp+var_14]
.text:00002BDE                 mov     [ecx], edx
.text:00002BE0                 mov     eax, [ebp+var_10]
.text:00002BE3                 mov     [ecx+4], eax
.text:00002BE6                 cmp     [ebp+arg_C], 0
.text:00002BEA                 jz      short loc_2C0A
.text:00002BEC                 mov     esi, esp
.text:00002BEE                 mov     ecx, [ebp+var_20]
.text:00002BF1                 push    ecx
.text:00002BF2                 mov     edx, [ebp+var_24]
.text:00002BF5                 push    edx
.text:00002BF6                 mov     eax, [ebp+arg_C]
.text:00002BF9                 mov     edx, [eax]
.text:00002BFB                 mov     ecx, [ebp+arg_C]
.text:00002BFE                 mov     eax, [edx+4]
.text:00002C01                 call    eax
.text:00002C03                 cmp     esi, esp
.text:00002C05                 call    __RTC_CheckEsp
.text:00002C0A
.text:00002C0A loc_2C0A:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadCd(CObjectVector<NArchive::NZip::CItemEx> &,unsigned __int64 &,unsigned __int64 &,NArchive::NZip::CProgressVirt *)+6Aj
.text:00002C0A                 mov     ecx, [ebp+arg_C]
.text:00002C0D                 push    ecx
.text:00002C0E                 mov     edx, [ebp+arg_8]
.text:00002C11                 mov     eax, [edx+4]
.text:00002C14                 push    eax
.text:00002C15                 mov     ecx, [edx]
.text:00002C17                 push    ecx
.text:00002C18                 mov     edx, [ebp+var_8]
.text:00002C1B                 mov     eax, [ebp+arg_4]
.text:00002C1E                 mov     ecx, [edx+38h]
.text:00002C21                 add     ecx, [eax]
.text:00002C23                 mov     edx, [edx+3Ch]
.text:00002C26                 adc     edx, [eax+4]
.text:00002C29                 push    edx
.text:00002C2A                 push    ecx
.text:00002C2B                 mov     eax, [ebp+arg_0]
.text:00002C2E                 push    eax
.text:00002C2F                 mov     ecx, [ebp+var_8]
.text:00002C32                 call    ?TryReadCd@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@_K1PAUCProgressVirt@23@@Z ; NArchive::NZip::CInArchive::TryReadCd(CObjectVector<NArchive::NZip::CItemEx> &,unsigned __int64,unsigned __int64,NArchive::NZip::CProgressVirt *)
.text:00002C37                 mov     [ebp+var_30], eax
.text:00002C3A                 cmp     [ebp+var_30], 1
.text:00002C3E                 jnz     short loc_2C9C
.text:00002C40                 mov     ecx, [ebp+var_8]
.text:00002C43                 mov     [ebp+var_34], ecx
.text:00002C46                 mov     edx, [ebp+var_34]
.text:00002C49                 mov     eax, [ebp+var_34]
.text:00002C4C                 mov     ecx, [edx+38h]
.text:00002C4F                 or      ecx, [eax+3Ch]
.text:00002C52                 jnz     short loc_2C9C
.text:00002C54                 mov     edx, [ebp+arg_C]
.text:00002C57                 push    edx
.text:00002C58                 mov     eax, [ebp+arg_8]
.text:00002C5B                 mov     ecx, [eax+4]
.text:00002C5E                 push    ecx
.text:00002C5F                 mov     edx, [eax]
.text:00002C61                 push    edx
.text:00002C62                 mov     eax, [ebp+var_8]
.text:00002C65                 mov     ecx, [ebp+arg_4]
.text:00002C68                 mov     edx, [eax+40h]
.text:00002C6B                 add     edx, [ecx]
.text:00002C6D                 mov     eax, [eax+44h]
.text:00002C70                 adc     eax, [ecx+4]
.text:00002C73                 push    eax
.text:00002C74                 push    edx
.text:00002C75                 mov     ecx, [ebp+arg_0]
.text:00002C78                 push    ecx
.text:00002C79                 mov     ecx, [ebp+var_8]
.text:00002C7C                 call    ?TryReadCd@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@_K1PAUCProgressVirt@23@@Z ; NArchive::NZip::CInArchive::TryReadCd(CObjectVector<NArchive::NZip::CItemEx> &,unsigned __int64,unsigned __int64,NArchive::NZip::CProgressVirt *)
.text:00002C81                 mov     [ebp+var_30], eax
.text:00002C84                 cmp     [ebp+var_30], 0
.text:00002C88                 jnz     short loc_2C9C
.text:00002C8A                 mov     edx, [ebp+var_8]
.text:00002C8D                 mov     eax, [ebp+var_8]
.text:00002C90                 mov     ecx, [eax+40h]
.text:00002C93                 mov     [edx+38h], ecx
.text:00002C96                 mov     eax, [eax+44h]
.text:00002C99                 mov     [edx+3Ch], eax
.text:00002C9C
.text:00002C9C loc_2C9C:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadCd(CObjectVector<NArchive::NZip::CItemEx> &,unsigned __int64 &,unsigned __int64 &,NArchive::NZip::CProgressVirt *)+BEj
.text:00002C9C                                         ; NArchive::NZip::CInArchive::ReadCd(CObjectVector<NArchive::NZip::CItemEx> &,unsigned __int64 &,unsigned __int64 &,NArchive::NZip::CProgressVirt *)+D2j ...
.text:00002C9C                 mov     eax, [ebp+var_30]
.text:00002C9F
.text:00002C9F loc_2C9F:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadCd(CObjectVector<NArchive::NZip::CItemEx> &,unsigned __int64 &,unsigned __int64 &,NArchive::NZip::CProgressVirt *)+3Ej
.text:00002C9F                 push    edx
.text:00002CA0                 mov     ecx, ebp
.text:00002CA2                 push    eax
.text:00002CA3                 lea     edx, $LN9_1
.text:00002CA9                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002CAE                 pop     eax
.text:00002CAF                 pop     edx
.text:00002CB0                 pop     edi
.text:00002CB1                 pop     esi
.text:00002CB2                 mov     ecx, [ebp+var_4]
.text:00002CB5                 xor     ecx, ebp
.text:00002CB7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00002CBC                 add     esp, 34h
.text:00002CBF                 cmp     ebp, esp
.text:00002CC1                 call    __RTC_CheckEsp
.text:00002CC6                 mov     esp, ebp
.text:00002CC8                 pop     ebp
.text:00002CC9                 retn    10h
.text:00002CC9 ?ReadCd@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@AA_K1PAUCProgressVirt@23@@Z endp
.text:00002CC9
.text:00002CC9 ; ---------------------------------------------------------------------------
.text:00002CCC $LN9_1          dd 1                    ; DATA XREF: NArchive::NZip::CInArchive::ReadCd(CObjectVector<NArchive::NZip::CItemEx> &,unsigned __int64 &,unsigned __int64 &,NArchive::NZip::CProgressVirt *)+123o
.text:00002CD0                 dd offset $LN8_1
.text:00002CD4 $LN8_1          dd 0FFFFFFDCh, 18h      ; DATA XREF: .text:00002CD0o
.text:00002CDC                 dd offset $LN7_2        ; "cdInfo"
.text:00002CE0 $LN7_2          db 'cdInfo',0           ; DATA XREF: .text:00002CDCo
.text:00002CE7                 align 10h
.text:00002CF0
.text:00002CF0 ; =============== S U B R O U T I N E =======================================
.text:00002CF0
.text:00002CF0 ; Attributes: bp-based frame
.text:00002CF0
.text:00002CF0 ; bool __stdcall NArchive::NZip::IsStrangeItem(NArchive::NZip *this, const struct NArchive::NZip::CItem *)
.text:00002CF0                 public ?IsStrangeItem@NZip@NArchive@@YG_NABVCItem@12@@Z
.text:00002CF0 ?IsStrangeItem@NZip@NArchive@@YG_NABVCItem@12@@Z proc near
.text:00002CF0                                         ; CODE XREF: __catch$?ReadLocals@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$0+27p
.text:00002CF0                                         ; NArchive::NZip::CInArchive::ReadLocals(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+270p
.text:00002CF0
.text:00002CF0 var_4           = dword ptr -4
.text:00002CF0 this            = dword ptr  8
.text:00002CF0
.text:00002CF0                 push    ebp
.text:00002CF1                 mov     ebp, esp
.text:00002CF3                 push    ecx
.text:00002CF4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002CFB                 mov     ecx, [ebp+this]
.text:00002CFE                 add     ecx, 20h ; ' '  ; this
.text:00002D01                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:00002D06                 cmp     eax, 4000h
.text:00002D0B                 ja      short loc_2D25
.text:00002D0D                 mov     eax, [ebp+this]
.text:00002D10                 movzx   ecx, word ptr [eax+2]
.text:00002D14                 cmp     ecx, 100h
.text:00002D1A                 jg      short loc_2D25
.text:00002D1C                 mov     [ebp+var_4], 0
.text:00002D23                 jmp     short loc_2D2C
.text:00002D25 ; ---------------------------------------------------------------------------
.text:00002D25
.text:00002D25 loc_2D25:                               ; CODE XREF: NArchive::NZip::IsStrangeItem(NArchive::NZip::CItem const &)+1Bj
.text:00002D25                                         ; NArchive::NZip::IsStrangeItem(NArchive::NZip::CItem const &)+2Aj
.text:00002D25                 mov     [ebp+var_4], 1
.text:00002D2C
.text:00002D2C loc_2D2C:                               ; CODE XREF: NArchive::NZip::IsStrangeItem(NArchive::NZip::CItem const &)+33j
.text:00002D2C                 mov     al, byte ptr [ebp+var_4]
.text:00002D2F                 add     esp, 4
.text:00002D32                 cmp     ebp, esp
.text:00002D34                 call    __RTC_CheckEsp
.text:00002D39                 mov     esp, ebp
.text:00002D3B                 pop     ebp
.text:00002D3C                 retn    4
.text:00002D3C ?IsStrangeItem@NZip@NArchive@@YG_NABVCItem@12@@Z endp
.text:00002D3C
.text:00002D3C ; ---------------------------------------------------------------------------
.text:00002D3F                 align 10h
.text:00002D40
.text:00002D40 ; =============== S U B R O U T I N E =======================================
.text:00002D40
.text:00002D40 ; Attributes: bp-based frame
.text:00002D40
.text:00002D40 ; private: long __thiscall NArchive::NZip::CInArchive::ReadLocals(class CObjectVector<class NArchive::NZip::CItemEx> &, struct NArchive::NZip::CProgressVirt *)
.text:00002D40                 public ?ReadLocals@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z
.text:00002D40 ?ReadLocals@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z proc near
.text:00002D40                                         ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+4CBp
.text:00002D40
.text:00002D40 var_A4          = dword ptr -0A4h
.text:00002D40 var_A0          = dword ptr -0A0h
.text:00002D40 var_99          = byte ptr -99h
.text:00002D40 var_98          = dword ptr -98h
.text:00002D40 var_90          = dword ptr -90h
.text:00002D40 var_8C          = dword ptr -8Ch
.text:00002D40 var_88          = dword ptr -88h
.text:00002D40 var_80          = byte ptr -80h
.text:00002D40 var_70          = qword ptr -70h
.text:00002D40 var_40          = dword ptr -40h
.text:00002D40 var_3C          = dword ptr -3Ch
.text:00002D40 var_24          = byte ptr -24h
.text:00002D40 var_14          = dword ptr -14h
.text:00002D40 var_10          = dword ptr -10h
.text:00002D40 var_C           = dword ptr -0Ch
.text:00002D40 var_4           = dword ptr -4
.text:00002D40 arg_0           = dword ptr  8
.text:00002D40 arg_4           = dword ptr  0Ch
.text:00002D40
.text:00002D40 ; FUNCTION CHUNK AT .text:00002EDF SIZE 00000009 BYTES
.text:00002D40 ; FUNCTION CHUNK AT .text:00002F02 SIZE 000000F5 BYTES
.text:00002D40
.text:00002D40                 push    ebp
.text:00002D41                 mov     ebp, esp
.text:00002D43                 push    0FFFFFFFFh
.text:00002D45                 push    offset __ehhandler$?ReadLocals@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z
.text:00002D4A                 mov     eax, large fs:0
.text:00002D50                 push    eax
.text:00002D51                 push    ecx
.text:00002D52                 sub     esp, 94h
.text:00002D58                 push    ebx
.text:00002D59                 push    esi
.text:00002D5A                 push    edi
.text:00002D5B                 push    ecx
.text:00002D5C                 lea     edi, [ebp+var_A4]
.text:00002D62                 mov     ecx, 25h ; '%'
.text:00002D67                 mov     eax, 0CCCCCCCCh
.text:00002D6C                 rep stosd
.text:00002D6E                 pop     ecx
.text:00002D6F                 mov     eax, dword ptr ds:___security_cookie
.text:00002D74                 xor     eax, ebp
.text:00002D76                 push    eax             ; struct NArchive::NZip::CItem *
.text:00002D77                 lea     eax, [ebp+var_C]
.text:00002D7A                 mov     large fs:0, eax
.text:00002D80                 mov     [ebp+var_10], esp
.text:00002D83                 mov     [ebp+var_14], ecx
.text:00002D86                 mov     ecx, [ebp+arg_0]
.text:00002D89                 call    ?Clear@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEXXZ ; CObjectVector<NArchive::NZip::CItemEx>::Clear(void)
.text:00002D8E
.text:00002D8E loc_2D8E:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadLocals(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+247j
.text:00002D8E                 mov     eax, [ebp+var_14]
.text:00002D91                 cmp     dword ptr [eax+2Ch], 4034B50h
.text:00002D98                 jnz     loc_2F8C
.text:00002D9E                 lea     ecx, [ebp+var_80] ; this
.text:00002DA1                 call    ??0CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::CItemEx(void)
.text:00002DA6                 mov     [ebp+var_4], 0
.text:00002DAD                 mov     ecx, [ebp+var_14]
.text:00002DB0                 mov     edx, [ecx+30h]
.text:00002DB3                 sub     edx, 4
.text:00002DB6                 mov     eax, [ecx+34h]
.text:00002DB9                 sbb     eax, 0
.text:00002DBC                 mov     ecx, [ebp+var_14]
.text:00002DBF                 sub     edx, [ecx+40h]
.text:00002DC2                 sbb     eax, [ecx+44h]
.text:00002DC5                 mov     [ebp+var_40], edx
.text:00002DC8                 mov     [ebp+var_3C], eax
.text:00002DCB                 mov     byte ptr [ebp+var_4], 1
.text:00002DCF                 lea     edx, [ebp+var_80]
.text:00002DD2                 push    edx             ; struct NArchive::NZip::CItemEx *
.text:00002DD3                 mov     ecx, [ebp+var_14] ; this
.text:00002DD6                 call    ?ReadLocalItem@CInArchive@NZip@NArchive@@AAE_NAAVCItemEx@23@@Z ; NArchive::NZip::CInArchive::ReadLocalItem(NArchive::NZip::CItemEx &)
.text:00002DDB                 mov     [ebp+var_24], 1
.text:00002DDF                 lea     ecx, [ebp+var_80] ; this
.text:00002DE2                 call    ?HasDescriptor@CLocalItem@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CLocalItem::HasDescriptor(void)
.text:00002DE7                 mov     [ebp+var_99], al
.text:00002DED                 movzx   eax, [ebp+var_99]
.text:00002DF4                 test    eax, eax
.text:00002DF6                 jz      short loc_2E06
.text:00002DF8                 lea     ecx, [ebp+var_80]
.text:00002DFB                 push    ecx             ; struct NArchive::NZip::CItemEx *
.text:00002DFC                 mov     ecx, [ebp+var_14] ; this
.text:00002DFF                 call    ?ReadLocalItemDescriptor@CInArchive@NZip@NArchive@@AAEJAAVCItemEx@23@@Z ; NArchive::NZip::CInArchive::ReadLocalItemDescriptor(NArchive::NZip::CItemEx &)
.text:00002E04                 jmp     short loc_2E57
.text:00002E06 ; ---------------------------------------------------------------------------
.text:00002E06
.text:00002E06 loc_2E06:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadLocals(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+B6j
.text:00002E06                 mov     edx, dword ptr [ebp+var_70+4]
.text:00002E09                 push    edx
.text:00002E0A                 mov     eax, dword ptr [ebp+var_70]
.text:00002E0D                 push    eax             ; __int64
.text:00002E0E                 mov     ecx, [ebp+var_14] ; this
.text:00002E11                 call    ?IncreaseRealPosition@CInArchive@NZip@NArchive@@AAEJ_J@Z ; NArchive::NZip::CInArchive::IncreaseRealPosition(__int64)
.text:00002E16                 mov     [ebp+var_A0], eax
.text:00002E1C                 mov     ecx, [ebp+var_A0]
.text:00002E22                 mov     [ebp+var_88], ecx
.text:00002E28                 cmp     [ebp+var_88], 0
.text:00002E2F                 jz      short loc_2E57
.text:00002E31                 mov     edx, [ebp+var_88]
.text:00002E37                 mov     [ebp+var_90], edx
.text:00002E3D                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002E44                 lea     ecx, [ebp+var_80] ; this
.text:00002E47                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:00002E4C                 mov     eax, [ebp+var_90]
.text:00002E52                 jmp     loc_2FC5
.text:00002E57 ; ---------------------------------------------------------------------------
.text:00002E57
.text:00002E57 loc_2E57:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadLocals(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+C4j
.text:00002E57                                         ; NArchive::NZip::CInArchive::ReadLocals(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+EFj
.text:00002E57                 lea     eax, [ebp+var_80]
.text:00002E5A                 push    eax             ; struct NArchive::NZip::CItemEx *
.text:00002E5B                 mov     ecx, [ebp+arg_0]
.text:00002E5E                 call    ?Add@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEIABVCItemEx@NZip@NArchive@@@Z ; CObjectVector<NArchive::NZip::CItemEx>::Add(NArchive::NZip::CItemEx const &)
.text:00002E63                 mov     ecx, [ebp+var_14] ; this
.text:00002E66                 call    ?ReadUInt32@CInArchive@NZip@NArchive@@AAEIXZ ; NArchive::NZip::CInArchive::ReadUInt32(void)
.text:00002E6B                 mov     [ebp+var_A4], eax
.text:00002E71                 mov     ecx, [ebp+var_14]
.text:00002E74                 mov     edx, [ebp+var_A4]
.text:00002E7A                 mov     [ecx+2Ch], edx
.text:00002E7D                 jmp     short loc_2EDF
.text:00002E7D ?ReadLocals@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z endp
.text:00002E7D
.text:00002E7F
.text:00002E7F ; =============== S U B R O U T I N E =======================================
.text:00002E7F
.text:00002E7F
.text:00002E7F __catch$?ReadLocals@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$0 proc near
.text:00002E7F                                         ; DATA XREF: .xdata$x:00004848o
.text:00002E7F                 mov     ecx, [ebp+8]
.text:00002E82                 call    ?IsEmpty@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBE_NXZ ; CObjectVector<NArchive::NZip::CItemEx>::IsEmpty(void)
.text:00002E87                 movzx   eax, al
.text:00002E8A                 test    eax, eax
.text:00002E8C                 jnz     short loc_2EB2
.text:00002E8E                 mov     ecx, [ebp+8]
.text:00002E91                 call    ?Size@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CItemEx>::Size(void)
.text:00002E96                 cmp     eax, 1
.text:00002E99                 jnz     short loc_2EC9
.text:00002E9B                 push    0
.text:00002E9D                 mov     ecx, [ebp+8]
.text:00002EA0                 call    ??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEAAVCItemEx@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CItemEx>::operator[](uint)
.text:00002EA5                 push    eax             ; this
.text:00002EA6                 call    ?IsStrangeItem@NZip@NArchive@@YG_NABVCItem@12@@Z ; NArchive::NZip::IsStrangeItem(NArchive::NZip::CItem const &)
.text:00002EAB                 movzx   ecx, al
.text:00002EAE                 test    ecx, ecx
.text:00002EB0                 jz      short loc_2EC9
.text:00002EB2
.text:00002EB2 loc_2EB2:                               ; CODE XREF: __catch$?ReadLocals@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$0+Dj
.text:00002EB2                 mov     dword ptr [ebp-94h], 1
.text:00002EBC                 mov     dword ptr [ebp-4], 0
.text:00002EC3                 mov     eax, offset $LN19_2
.text:00002EC8                 retn
.text:00002EC9 ; ---------------------------------------------------------------------------
.text:00002EC9
.text:00002EC9 loc_2EC9:                               ; CODE XREF: __catch$?ReadLocals@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$0+1Aj
.text:00002EC9                                         ; __catch$?ReadLocals@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$0+31j
.text:00002EC9                 push    0
.text:00002ECB                 push    0
.text:00002ECD                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:00002ECD __catch$?ReadLocals@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$0 endp
.text:00002ECD
.text:00002ED2 ; ---------------------------------------------------------------------------
.text:00002ED2                 mov     dword ptr [ebp-4], 0
.text:00002ED9                 mov     eax, offset __tryend$?ReadLocals@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$1
.text:00002EDE                 retn
.text:00002EDF ; ---------------------------------------------------------------------------
.text:00002EDF ; START OF FUNCTION CHUNK FOR ?ReadLocals@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z
.text:00002EDF
.text:00002EDF loc_2EDF:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadLocals(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+13Dj
.text:00002EDF                 mov     [ebp+var_4], 0
.text:00002EE6
.text:00002EE6 __tryend$?ReadLocals@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$1:
.text:00002EE6                                         ; DATA XREF: .text:00002ED9o
.text:00002EE6                 jmp     short loc_2F02
.text:00002EE6 ; END OF FUNCTION CHUNK FOR ?ReadLocals@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z
.text:00002EE8
.text:00002EE8 ; =============== S U B R O U T I N E =======================================
.text:00002EE8
.text:00002EE8
.text:00002EE8 $LN19_2         proc near               ; DATA XREF: __catch$?ReadLocals@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$0+44o
.text:00002EE8                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00002EEF                 lea     ecx, [ebp-80h]  ; this
.text:00002EF2                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:00002EF7                 mov     eax, [ebp-94h]
.text:00002EFD                 jmp     loc_2FC5
.text:00002EFD $LN19_2         endp
.text:00002EFD
.text:00002F02 ; ---------------------------------------------------------------------------
.text:00002F02 ; START OF FUNCTION CHUNK FOR ?ReadLocals@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z
.text:00002F02
.text:00002F02 loc_2F02:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadLocals(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *):__tryend$?ReadLocals@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$1j
.text:00002F02                 cmp     [ebp+arg_4], 0
.text:00002F06                 jz      short loc_2F78
.text:00002F08                 mov     ecx, [ebp+arg_0]
.text:00002F0B                 call    ?Size@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CItemEx>::Size(void)
.text:00002F10                 xor     edx, edx
.text:00002F12                 mov     ecx, 1
.text:00002F17                 div     ecx
.text:00002F19                 test    edx, edx
.text:00002F1B                 jnz     short loc_2F78
.text:00002F1D                 mov     esi, esp
.text:00002F1F                 mov     edx, [ebp+var_3C]
.text:00002F22                 push    edx
.text:00002F23                 mov     eax, [ebp+var_40]
.text:00002F26                 push    eax
.text:00002F27                 mov     ecx, [ebp+arg_0]
.text:00002F2A                 call    ?Size@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CItemEx>::Size(void)
.text:00002F2F                 xor     ecx, ecx
.text:00002F31                 push    ecx
.text:00002F32                 push    eax
.text:00002F33                 mov     edx, [ebp+arg_4]
.text:00002F36                 mov     eax, [edx]
.text:00002F38                 mov     ecx, [ebp+arg_4]
.text:00002F3B                 mov     edx, [eax]
.text:00002F3D                 call    edx
.text:00002F3F                 cmp     esi, esp
.text:00002F41                 call    __RTC_CheckEsp
.text:00002F46                 mov     [ebp+var_8C], eax
.text:00002F4C                 cmp     [ebp+var_8C], 0
.text:00002F53                 jz      short loc_2F78
.text:00002F55                 mov     eax, [ebp+var_8C]
.text:00002F5B                 mov     [ebp+var_98], eax
.text:00002F61                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002F68                 lea     ecx, [ebp+var_80] ; this
.text:00002F6B                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:00002F70                 mov     eax, [ebp+var_98]
.text:00002F76                 jmp     short loc_2FC5
.text:00002F78 ; ---------------------------------------------------------------------------
.text:00002F78
.text:00002F78 loc_2F78:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadLocals(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+1C6j
.text:00002F78                                         ; NArchive::NZip::CInArchive::ReadLocals(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+1DBj ...
.text:00002F78                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002F7F                 lea     ecx, [ebp+var_80] ; this
.text:00002F82                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:00002F87                 jmp     loc_2D8E
.text:00002F8C ; ---------------------------------------------------------------------------
.text:00002F8C
.text:00002F8C loc_2F8C:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadLocals(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+58j
.text:00002F8C                 mov     ecx, [ebp+arg_0]
.text:00002F8F                 call    ?Size@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CItemEx>::Size(void)
.text:00002F94                 cmp     eax, 1
.text:00002F97                 jnz     short loc_2FC3
.text:00002F99                 mov     ecx, [ebp+var_14]
.text:00002F9C                 cmp     dword ptr [ecx+2Ch], 2014B50h
.text:00002FA3                 jz      short loc_2FC3
.text:00002FA5                 push    0
.text:00002FA7                 mov     ecx, [ebp+arg_0]
.text:00002FAA                 call    ??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEAAVCItemEx@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CItemEx>::operator[](uint)
.text:00002FAF                 push    eax             ; this
.text:00002FB0                 call    ?IsStrangeItem@NZip@NArchive@@YG_NABVCItem@12@@Z ; NArchive::NZip::IsStrangeItem(NArchive::NZip::CItem const &)
.text:00002FB5                 movzx   edx, al
.text:00002FB8                 test    edx, edx
.text:00002FBA                 jz      short loc_2FC3
.text:00002FBC                 mov     eax, 1
.text:00002FC1                 jmp     short loc_2FC5
.text:00002FC3 ; ---------------------------------------------------------------------------
.text:00002FC3
.text:00002FC3 loc_2FC3:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadLocals(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+257j
.text:00002FC3                                         ; NArchive::NZip::CInArchive::ReadLocals(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+263j ...
.text:00002FC3                 xor     eax, eax
.text:00002FC5
.text:00002FC5 loc_2FC5:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadLocals(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+112j
.text:00002FC5                                         ; $LN19_2+15j ...
.text:00002FC5                 push    edx
.text:00002FC6                 mov     ecx, ebp
.text:00002FC8                 push    eax
.text:00002FC9                 lea     edx, $LN28
.text:00002FCF                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002FD4                 pop     eax
.text:00002FD5                 pop     edx
.text:00002FD6                 mov     ecx, [ebp+var_C]
.text:00002FD9                 mov     large fs:0, ecx
.text:00002FE0                 pop     ecx
.text:00002FE1                 pop     edi
.text:00002FE2                 pop     esi
.text:00002FE3                 pop     ebx
.text:00002FE4                 add     esp, 0A4h
.text:00002FEA                 cmp     ebp, esp
.text:00002FEC                 call    __RTC_CheckEsp
.text:00002FF1                 mov     esp, ebp
.text:00002FF3                 pop     ebp
.text:00002FF4                 retn    8
.text:00002FF4 ; END OF FUNCTION CHUNK FOR ?ReadLocals@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z
.text:00002FF4 ; ---------------------------------------------------------------------------
.text:00002FF7                 align 4
.text:00002FF8 $LN28           dd 1                    ; DATA XREF: NArchive::NZip::CInArchive::ReadLocals(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+289o
.text:00002FFC                 dd offset $LN27
.text:00003000 ; ---------------------------------------------------------------------------
.text:00003000
.text:00003000 $LN27:                                  ; DATA XREF: .text:00002FFCo
.text:00003000                 cmp     bh, 0FFh
.text:00003003                 jmp     fword ptr [eax+0]
.text:00003003 ; ---------------------------------------------------------------------------
.text:00003006                 align 4
.text:00003008                 dd offset $LN25         ; "item"
.text:0000300C $LN25           db 'item',0             ; DATA XREF: .text:00003008o
.text:00003011                 align 10h
.text:00003020
.text:00003020 ; =============== S U B R O U T I N E =======================================
.text:00003020
.text:00003020 ; Attributes: bp-based frame
.text:00003020
.text:00003020 ; private: long __thiscall NArchive::NZip::CInArchive::ReadHeaders2(class CObjectVector<class NArchive::NZip::CItemEx> &, struct NArchive::NZip::CProgressVirt *)
.text:00003020                 public ?ReadHeaders2@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z
.text:00003020 ?ReadHeaders2@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z proc near
.text:00003020                                         ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+5Bp
.text:00003020
.text:00003020 var_308         = dword ptr -308h
.text:00003020 var_304         = dword ptr -304h
.text:00003020 var_300         = dword ptr -300h
.text:00003020 var_2FC         = dword ptr -2FCh
.text:00003020 var_2F8         = dword ptr -2F8h
.text:00003020 var_2F4         = dword ptr -2F4h
.text:00003020 var_2F0         = dword ptr -2F0h
.text:00003020 var_2EC         = dword ptr -2ECh
.text:00003020 var_2E8         = dword ptr -2E8h
.text:00003020 var_2E4         = dword ptr -2E4h
.text:00003020 var_2E0         = dword ptr -2E0h
.text:00003020 var_2DC         = dword ptr -2DCh
.text:00003020 var_2D8         = dword ptr -2D8h
.text:00003020 var_2D4         = dword ptr -2D4h
.text:00003020 var_2D0         = dword ptr -2D0h
.text:00003020 var_2CC         = dword ptr -2CCh
.text:00003020 var_2C5         = byte ptr -2C5h
.text:00003020 var_2C4         = dword ptr -2C4h
.text:00003020 var_2C0         = dword ptr -2C0h
.text:00003020 var_2BC         = dword ptr -2BCh
.text:00003020 var_2B8         = dword ptr -2B8h
.text:00003020 var_2B4         = dword ptr -2B4h
.text:00003020 var_2B0         = dword ptr -2B0h
.text:00003020 var_2AC         = dword ptr -2ACh
.text:00003020 var_2A8         = dword ptr -2A8h
.text:00003020 var_2A4         = dword ptr -2A4h
.text:00003020 var_2A0         = dword ptr -2A0h
.text:00003020 var_29C         = dword ptr -29Ch
.text:00003020 var_298         = dword ptr -298h
.text:00003020 var_294         = dword ptr -294h
.text:00003020 var_290         = dword ptr -290h
.text:00003020 var_28C         = dword ptr -28Ch
.text:00003020 var_284         = dword ptr -284h
.text:00003020 var_280         = dword ptr -280h
.text:00003020 var_27C         = dword ptr -27Ch
.text:00003020 var_278         = dword ptr -278h
.text:00003020 var_274         = dword ptr -274h
.text:00003020 var_270         = dword ptr -270h
.text:00003020 var_26C         = dword ptr -26Ch
.text:00003020 var_268         = dword ptr -268h
.text:00003020 var_260         = word ptr -260h
.text:00003020 var_25E         = word ptr -25Eh
.text:00003020 var_25C         = word ptr -25Ch
.text:00003020 var_25A         = word ptr -25Ah
.text:00003020 var_258         = dword ptr -258h
.text:00003020 var_254         = dword ptr -254h
.text:00003020 var_250         = word ptr -250h
.text:00003020 var_244         = byte ptr -244h
.text:00003020 var_22C         = dword ptr -22Ch
.text:00003020 var_228         = dword ptr -228h
.text:00003020 var_224         = dword ptr -224h
.text:00003020 var_21C         = byte ptr -21Ch
.text:00003020 var_1EC         = dword ptr -1ECh
.text:00003020 var_1E8         = dword ptr -1E8h
.text:00003020 var_1E4         = dword ptr -1E4h
.text:00003020 var_1E0         = dword ptr -1E0h
.text:00003020 var_1DC         = dword ptr -1DCh
.text:00003020 var_1D5         = byte ptr -1D5h
.text:00003020 var_1D0         = byte ptr -1D0h
.text:00003020 var_1CC         = dword ptr -1CCh
.text:00003020 var_1C8         = dword ptr -1C8h
.text:00003020 var_1C0         = dword ptr -1C0h
.text:00003020 var_1BC         = dword ptr -1BCh
.text:00003020 var_1B8         = dword ptr -1B8h
.text:00003020 var_1B4         = dword ptr -1B4h
.text:00003020 var_1B0         = dword ptr -1B0h
.text:00003020 var_1AC         = dword ptr -1ACh
.text:00003020 var_1A8         = dword ptr -1A8h
.text:00003020 var_1A4         = dword ptr -1A4h
.text:00003020 var_19C         = dword ptr -19Ch
.text:00003020 var_198         = dword ptr -198h
.text:00003020 var_190         = byte ptr -190h
.text:00003020 var_124         = dword ptr -124h
.text:00003020 var_120         = dword ptr -120h
.text:00003020 var_11C         = dword ptr -11Ch
.text:00003020 var_115         = byte ptr -115h
.text:00003020 var_110         = byte ptr -110h
.text:00003020 var_100         = dword ptr -100h
.text:00003020 var_F8          = byte ptr -0F8h
.text:00003020 var_B8          = dword ptr -0B8h
.text:00003020 var_B4          = dword ptr -0B4h
.text:00003020 var_8C          = dword ptr -8Ch
.text:00003020 var_88          = dword ptr -88h
.text:00003020 var_84          = dword ptr -84h
.text:00003020 var_7C          = dword ptr -7Ch
.text:00003020 var_78          = dword ptr -78h
.text:00003020 var_6C          = dword ptr -6Ch
.text:00003020 var_68          = dword ptr -68h
.text:00003020 var_60          = dword ptr -60h
.text:00003020 var_58          = byte ptr -58h
.text:00003020 var_3C          = byte ptr -3Ch
.text:00003020 var_24          = dword ptr -24h
.text:00003020 var_1E          = byte ptr -1Eh
.text:00003020 var_1D          = byte ptr -1Dh
.text:00003020 var_1C          = dword ptr -1Ch
.text:00003020 var_18          = dword ptr -18h
.text:00003020 var_14          = dword ptr -14h
.text:00003020 var_10          = dword ptr -10h
.text:00003020 var_C           = dword ptr -0Ch
.text:00003020 var_4           = dword ptr -4
.text:00003020 arg_0           = dword ptr  8
.text:00003020 arg_4           = dword ptr  0Ch
.text:00003020
.text:00003020 ; FUNCTION CHUNK AT .text:00003284 SIZE 00000009 BYTES
.text:00003020 ; FUNCTION CHUNK AT .text:000032AA SIZE 00000D68 BYTES
.text:00003020
.text:00003020                 push    ebp
.text:00003021                 mov     ebp, esp
.text:00003023                 push    0FFFFFFFFh
.text:00003025                 push    offset __ehhandler$?ReadHeaders2@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z
.text:0000302A                 mov     eax, large fs:0
.text:00003030                 push    eax
.text:00003031                 push    ecx
.text:00003032                 sub     esp, 2F8h
.text:00003038                 push    ebx
.text:00003039                 push    esi
.text:0000303A                 push    edi
.text:0000303B                 push    ecx
.text:0000303C                 lea     edi, [ebp+var_308]
.text:00003042                 mov     ecx, 0BEh ; '+'
.text:00003047                 mov     eax, 0CCCCCCCCh
.text:0000304C                 rep stosd
.text:0000304E                 pop     ecx
.text:0000304F                 mov     eax, dword ptr ds:___security_cookie
.text:00003054                 xor     eax, ebp
.text:00003056                 mov     [ebp+var_14], eax
.text:00003059                 push    eax
.text:0000305A                 lea     eax, [ebp+var_C]
.text:0000305D                 mov     large fs:0, eax
.text:00003063                 mov     [ebp+var_10], esp
.text:00003066                 mov     [ebp+var_18], ecx
.text:00003069                 mov     ecx, [ebp+arg_0]
.text:0000306C                 call    ?Clear@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEXXZ ; CObjectVector<NArchive::NZip::CItemEx>::Clear(void)
.text:00003071                 mov     ecx, [ebp+var_18]
.text:00003074                 add     ecx, 80h ; 'Ç'
.text:0000307A                 call    ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->(void)
.text:0000307F                 mov     [ebp+var_2C0], eax
.text:00003085                 mov     esi, esp
.text:00003087                 push    0
.text:00003089                 push    0
.text:0000308B                 mov     eax, [ebp+var_18]
.text:0000308E                 mov     ecx, [eax+34h]
.text:00003091                 push    ecx
.text:00003092                 mov     edx, [eax+30h]
.text:00003095                 push    edx
.text:00003096                 mov     eax, [ebp+var_2C0]
.text:0000309C                 push    eax
.text:0000309D                 mov     ecx, [ebp+var_2C0]
.text:000030A3                 mov     edx, [ecx]
.text:000030A5                 mov     eax, [edx+10h]
.text:000030A8                 call    eax
.text:000030AA                 cmp     esi, esp
.text:000030AC                 call    __RTC_CheckEsp
.text:000030B1                 mov     [ebp+var_1C], eax
.text:000030B4                 cmp     [ebp+var_1C], 0
.text:000030B8                 jz      short loc_30C2
.text:000030BA                 mov     eax, [ebp+var_1C]
.text:000030BD                 jmp     loc_3FD6
.text:000030C2 ; ---------------------------------------------------------------------------
.text:000030C2
.text:000030C2 loc_30C2:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+98j
.text:000030C2                 push    8000h           ; unsigned int
.text:000030C7                 mov     ecx, [ebp+var_18] ; this
.text:000030CA                 call    ?Create@CInBuffer@@QAE_NI@Z ; CInBuffer::Create(uint)
.text:000030CF                 movzx   ecx, al
.text:000030D2                 test    ecx, ecx
.text:000030D4                 jnz     short loc_30E0
.text:000030D6                 mov     eax, 8007000Eh
.text:000030DB                 jmp     loc_3FD6
.text:000030E0 ; ---------------------------------------------------------------------------
.text:000030E0
.text:000030E0 loc_30E0:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+B4j
.text:000030E0                 mov     ecx, [ebp+var_18]
.text:000030E3                 add     ecx, 80h ; 'Ç'
.text:000030E9                 call    ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *(void)
.text:000030EE                 push    eax             ; struct ISequentialInStream *
.text:000030EF                 mov     ecx, [ebp+var_18] ; this
.text:000030F2                 call    ?SetStream@CInBufferBase@@QAEXPAUISequentialInStream@@@Z ; CInBufferBase::SetStream(ISequentialInStream *)
.text:000030F7                 mov     [ebp+var_1D], 1
.text:000030FB                 mov     [ebp+var_1E], 0
.text:000030FF                 mov     edx, [ebp+var_18]
.text:00003102                 cmp     dword ptr [edx+2Ch], 6054B50h
.text:00003109                 jnz     loc_31C2
.text:0000310F                 mov     [ebp+var_24], 12h
.text:00003116                 push    12h             ; unsigned int
.text:00003118                 lea     eax, [ebp+var_3C]
.text:0000311B                 push    eax             ; unsigned __int8 *
.text:0000311C                 mov     ecx, [ebp+var_18] ; this
.text:0000311F                 call    ?SafeReadBytes@CInArchive@NZip@NArchive@@AAEXPAXI@Z ; NArchive::NZip::CInArchive::SafeReadBytes(void *,uint)
.text:00003124                 lea     ecx, [ebp+var_3C]
.text:00003127                 push    ecx             ; unsigned __int8 *
.text:00003128                 lea     ecx, [ebp+var_58] ; this
.text:0000312B                 call    ?Parse@CEcd@NZip@NArchive@@QAEXPBE@Z ; NArchive::NZip::CEcd::Parse(uchar const *)
.text:00003130                 lea     ecx, [ebp+var_58] ; this
.text:00003133                 call    ?IsEmptyArc@CEcd@NZip@NArchive@@QAE_NXZ ; NArchive::NZip::CEcd::IsEmptyArc(void)
.text:00003138                 movzx   edx, al
.text:0000313B                 test    edx, edx
.text:0000313D                 jnz     short loc_3149
.text:0000313F                 mov     eax, 1
.text:00003144                 jmp     loc_3FD6
.text:00003149 ; ---------------------------------------------------------------------------
.text:00003149
.text:00003149 loc_3149:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+11Dj
.text:00003149                 mov     eax, [ebp+var_18]
.text:0000314C                 mov     ecx, [ebp+var_18]
.text:0000314F                 mov     edx, [ecx+40h]
.text:00003152                 mov     [eax+38h], edx
.text:00003155                 mov     ecx, [ecx+44h]
.text:00003158                 mov     [eax+3Ch], ecx
.text:0000315B                 mov     [ebp+var_1D], 0
.text:0000315F                 mov     edx, [ebp+var_18]
.text:00003162                 mov     byte ptr [edx+78h], 1
.text:00003166                 mov     ecx, [ebp+var_18]
.text:00003169                 add     ecx, 80h ; 'Ç'
.text:0000316F                 call    ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->(void)
.text:00003174                 mov     [ebp+var_2C4], eax
.text:0000317A                 mov     eax, [ebp+var_18]
.text:0000317D                 add     eax, 30h ; '0'
.text:00003180                 mov     esi, esp
.text:00003182                 push    eax
.text:00003183                 push    0
.text:00003185                 mov     ecx, [ebp+var_18]
.text:00003188                 mov     edx, [ecx+48h]
.text:0000318B                 add     edx, 4
.text:0000318E                 mov     eax, [ecx+4Ch]
.text:00003191                 adc     eax, 0
.text:00003194                 push    eax
.text:00003195                 push    edx
.text:00003196                 mov     ecx, [ebp+var_2C4]
.text:0000319C                 push    ecx
.text:0000319D                 mov     edx, [ebp+var_2C4]
.text:000031A3                 mov     eax, [edx]
.text:000031A5                 mov     ecx, [eax+10h]
.text:000031A8                 call    ecx
.text:000031AA                 cmp     esi, esp
.text:000031AC                 call    __RTC_CheckEsp
.text:000031B1                 mov     [ebp+var_60], eax
.text:000031B4                 cmp     [ebp+var_60], 0
.text:000031B8                 jz      short loc_31C2
.text:000031BA                 mov     eax, [ebp+var_60]
.text:000031BD                 jmp     loc_3FD6
.text:000031C2 ; ---------------------------------------------------------------------------
.text:000031C2
.text:000031C2 loc_31C2:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+E9j
.text:000031C2                                         ; NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+198j
.text:000031C2                 mov     [ebp+var_6C], 0
.text:000031C9                 mov     [ebp+var_68], 0
.text:000031D0                 mov     [ebp+var_7C], 0
.text:000031D7                 mov     [ebp+var_78], 0
.text:000031DE                 mov     [ebp+var_88], 0
.text:000031E8                 mov     [ebp+var_84], 0
.text:000031F2                 mov     [ebp+var_8C], 0
.text:000031FC                 movzx   edx, [ebp+var_1D]
.text:00003200                 test    edx, edx
.text:00003202                 jz      loc_33FC
.text:00003208                 lea     ecx, [ebp+var_F8] ; this
.text:0000320E                 call    ??0CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::CItemEx(void)
.text:00003213                 mov     [ebp+var_4], 0
.text:0000321A                 mov     byte ptr [ebp+var_4], 1
.text:0000321E                 lea     eax, [ebp+var_F8]
.text:00003224                 push    eax             ; struct NArchive::NZip::CItemEx *
.text:00003225                 mov     ecx, [ebp+var_18] ; this
.text:00003228                 call    ?ReadLocalItem@CInArchive@NZip@NArchive@@AAE_NAAVCItemEx@23@@Z ; NArchive::NZip::CInArchive::ReadLocalItem(NArchive::NZip::CItemEx &)
.text:0000322D                 mov     [ebp+var_2C5], al
.text:00003233                 movzx   ecx, [ebp+var_2C5]
.text:0000323A                 test    ecx, ecx
.text:0000323C                 jnz     short loc_3265
.text:0000323E                 mov     [ebp+var_284], 1
.text:00003248                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000324F                 lea     ecx, [ebp+var_F8] ; this
.text:00003255                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:0000325A                 mov     eax, [ebp+var_284]
.text:00003260                 jmp     loc_3FD6
.text:00003265 ; ---------------------------------------------------------------------------
.text:00003265
.text:00003265 loc_3265:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+21Cj
.text:00003265                 jmp     short $LN72
.text:00003265 ?ReadHeaders2@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z endp
.text:00003265
.text:00003267
.text:00003267 ; =============== S U B R O U T I N E =======================================
.text:00003267
.text:00003267
.text:00003267 __catch$?ReadHeaders2@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$0 proc near
.text:00003267                                         ; DATA XREF: .xdata$x:000048A8o
.text:00003267                 mov     dword ptr [ebp-288h], 1
.text:00003271                 mov     dword ptr [ebp-4], 0
.text:00003278                 mov     eax, offset $LN78
.text:0000327D                 retn
.text:0000327D __catch$?ReadHeaders2@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$0 endp
.text:0000327D
.text:0000327E ; ---------------------------------------------------------------------------
.text:0000327E                 mov     eax, offset $LN72
.text:00003283                 retn
.text:00003284 ; ---------------------------------------------------------------------------
.text:00003284 ; START OF FUNCTION CHUNK FOR ?ReadHeaders2@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z
.text:00003284
.text:00003284 $LN72:                                  ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *):loc_3265j
.text:00003284                                         ; DATA XREF: .text:0000327Eo
.text:00003284                 mov     [ebp+var_4], 0
.text:0000328B                 jmp     short loc_32AA
.text:0000328B ; END OF FUNCTION CHUNK FOR ?ReadHeaders2@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z
.text:0000328D
.text:0000328D ; =============== S U B R O U T I N E =======================================
.text:0000328D
.text:0000328D
.text:0000328D $LN78           proc near               ; DATA XREF: __catch$?ReadHeaders2@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$0+11o
.text:0000328D                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00003294                 lea     ecx, [ebp-0F8h] ; this
.text:0000329A                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:0000329F                 mov     eax, [ebp-288h]
.text:000032A5                 jmp     loc_3FD6
.text:000032A5 $LN78           endp
.text:000032A5
.text:000032AA ; ---------------------------------------------------------------------------
.text:000032AA ; START OF FUNCTION CHUNK FOR ?ReadHeaders2@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z
.text:000032AA
.text:000032AA loc_32AA:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+26Bj
.text:000032AA                 mov     edx, [ebp+var_18]
.text:000032AD                 mov     byte ptr [edx+78h], 1
.text:000032B1                 mov     eax, [ebp+arg_4]
.text:000032B4                 push    eax
.text:000032B5                 lea     ecx, [ebp+var_6C]
.text:000032B8                 push    ecx
.text:000032B9                 lea     edx, [ebp+var_7C]
.text:000032BC                 push    edx
.text:000032BD                 mov     eax, [ebp+arg_0]
.text:000032C0                 push    eax
.text:000032C1                 mov     ecx, [ebp+var_18]
.text:000032C4                 call    ?ReadCd@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@AA_K1PAUCProgressVirt@23@@Z ; NArchive::NZip::CInArchive::ReadCd(CObjectVector<NArchive::NZip::CItemEx> &,unsigned __int64 &,unsigned __int64 &,NArchive::NZip::CProgressVirt *)
.text:000032C9                 mov     [ebp+var_8C], eax
.text:000032CF                 cmp     [ebp+var_8C], 0
.text:000032D6                 jnz     short loc_32E6
.text:000032D8                 mov     ecx, [ebp+var_18] ; this
.text:000032DB                 call    ?ReadUInt32@CInArchive@NZip@NArchive@@AAEIXZ ; NArchive::NZip::CInArchive::ReadUInt32(void)
.text:000032E0                 mov     ecx, [ebp+var_18]
.text:000032E3                 mov     [ecx+2Ch], eax
.text:000032E6
.text:000032E6 loc_32E6:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+2B6j
.text:000032E6                 cmp     [ebp+var_8C], 1
.text:000032ED                 jz      short loc_3321
.text:000032EF                 cmp     [ebp+var_8C], 0
.text:000032F6                 jz      short loc_3321
.text:000032F8                 mov     edx, [ebp+var_8C]
.text:000032FE                 mov     [ebp+var_28C], edx
.text:00003304                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000330B                 lea     ecx, [ebp+var_F8] ; this
.text:00003311                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:00003316                 mov     eax, [ebp+var_28C]
.text:0000331C                 jmp     loc_3FD6
.text:00003321 ; ---------------------------------------------------------------------------
.text:00003321
.text:00003321 loc_3321:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+2CDj
.text:00003321                                         ; NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+2D6j
.text:00003321                 cmp     [ebp+var_8C], 0
.text:00003328                 jnz     short loc_3340
.text:0000332A                 mov     ecx, [ebp+arg_0]
.text:0000332D                 call    ?Size@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CItemEx>::Size(void)
.text:00003332                 test    eax, eax
.text:00003334                 jnz     short loc_3340
.text:00003336                 mov     [ebp+var_8C], 1
.text:00003340
.text:00003340 loc_3340:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+308j
.text:00003340                                         ; NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+314j
.text:00003340                 cmp     [ebp+var_8C], 0
.text:00003347                 jnz     loc_33EA
.text:0000334D                 mov     eax, [ebp+var_18]
.text:00003350                 mov     ecx, [ebp+var_18]
.text:00003353                 mov     edx, [eax+48h]
.text:00003356                 sub     edx, [ecx+38h]
.text:00003359                 mov     eax, [eax+4Ch]
.text:0000335C                 sbb     eax, [ecx+3Ch]
.text:0000335F                 mov     [ebp+var_B8], edx
.text:00003365                 mov     [ebp+var_B4], eax
.text:0000336B                 mov     ecx, [ebp+var_B4]
.text:00003371                 push    ecx
.text:00003372                 mov     edx, [ebp+var_B8]
.text:00003378                 push    edx
.text:00003379                 mov     eax, [ebp+arg_0]
.text:0000337C                 push    eax
.text:0000337D                 call    ?FindItem@NZip@NArchive@@YGJABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@_K@Z ; NArchive::NZip::FindItem(CObjectVector<NArchive::NZip::CItemEx> const &,unsigned __int64)
.text:00003382                 mov     [ebp+var_100], eax
.text:00003388                 cmp     [ebp+var_100], 0FFFFFFFFh
.text:0000338F                 jnz     short loc_339D
.text:00003391                 mov     [ebp+var_8C], 1
.text:0000339B                 jmp     short loc_33CA
.text:0000339D ; ---------------------------------------------------------------------------
.text:0000339D
.text:0000339D loc_339D:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+36Fj
.text:0000339D                 mov     ecx, [ebp+var_100]
.text:000033A3                 push    ecx
.text:000033A4                 mov     ecx, [ebp+arg_0]
.text:000033A7                 call    ??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEAAVCItemEx@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CItemEx>::operator[](uint)
.text:000033AC                 push    eax             ; int
.text:000033AD                 lea     edx, [ebp+var_F8]
.text:000033B3                 push    edx             ; NArchive::NZip::CLocalItem *
.text:000033B4                 call    ?AreItemsEqual@NZip@NArchive@@YG_NABVCItemEx@12@0@Z ; NArchive::NZip::AreItemsEqual(NArchive::NZip::CItemEx const &,NArchive::NZip::CItemEx const &)
.text:000033B9                 movzx   eax, al
.text:000033BC                 test    eax, eax
.text:000033BE                 jnz     short loc_33CA
.text:000033C0                 mov     [ebp+var_8C], 1
.text:000033CA
.text:000033CA loc_33CA:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+37Bj
.text:000033CA                                         ; NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+39Ej
.text:000033CA                 mov     ecx, [ebp+var_18]
.text:000033CD                 mov     byte ptr [ecx+68h], 1
.text:000033D1                 push    0
.text:000033D3                 mov     ecx, [ebp+arg_0]
.text:000033D6                 call    ??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEAAVCItemEx@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CItemEx>::operator[](uint)
.text:000033DB                 mov     edx, [ebp+var_18]
.text:000033DE                 mov     ecx, [eax+40h]
.text:000033E1                 mov     [edx+60h], ecx
.text:000033E4                 mov     eax, [eax+44h]
.text:000033E7                 mov     [edx+64h], eax
.text:000033EA
.text:000033EA loc_33EA:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+327j
.text:000033EA                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000033F1                 lea     ecx, [ebp+var_F8] ; this
.text:000033F7                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:000033FC
.text:000033FC loc_33FC:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+1E2j
.text:000033FC                 lea     ecx, [ebp+var_110]
.text:00003402                 call    ??0?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemEx>::CObjectVector<NArchive::NZip::CItemEx>(void)
.text:00003407                 mov     [ebp+var_4], 3
.text:0000340E                 mov     [ebp+var_115], 0
.text:00003415                 mov     ecx, [ebp+arg_0]
.text:00003418                 call    ?Size@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CItemEx>::Size(void)
.text:0000341D                 mov     [ebp+var_11C], eax
.text:00003423                 cmp     [ebp+var_8C], 1
.text:0000342A                 jnz     loc_375A
.text:00003430                 mov     ecx, [ebp+arg_0]
.text:00003433                 call    ?Clear@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEXXZ ; CObjectVector<NArchive::NZip::CItemEx>::Clear(void)
.text:00003438                 mov     [ebp+var_1E], 1
.text:0000343C                 mov     ecx, [ebp+var_18]
.text:0000343F                 mov     byte ptr [ecx+28h], 0
.text:00003443                 mov     edx, [ebp+var_18]
.text:00003446                 mov     eax, [ebp+var_18]
.text:00003449                 mov     ecx, [eax+40h]
.text:0000344C                 mov     [edx+38h], ecx
.text:0000344F                 mov     eax, [eax+44h]
.text:00003452                 mov     [edx+3Ch], eax
.text:00003455                 mov     ecx, [ebp+var_18]
.text:00003458                 add     ecx, 80h ; 'Ç'
.text:0000345E                 call    ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->(void)
.text:00003463                 mov     [ebp+var_2CC], eax
.text:00003469                 mov     ecx, [ebp+var_18]
.text:0000346C                 add     ecx, 30h ; '0'
.text:0000346F                 mov     esi, esp
.text:00003471                 push    ecx
.text:00003472                 push    0
.text:00003474                 mov     edx, [ebp+var_18]
.text:00003477                 mov     eax, [edx+4Ch]
.text:0000347A                 push    eax
.text:0000347B                 mov     ecx, [edx+48h]
.text:0000347E                 push    ecx
.text:0000347F                 mov     edx, [ebp+var_2CC]
.text:00003485                 push    edx
.text:00003486                 mov     eax, [ebp+var_2CC]
.text:0000348C                 mov     ecx, [eax]
.text:0000348E                 mov     edx, [ecx+10h]
.text:00003491                 call    edx
.text:00003493                 cmp     esi, esp
.text:00003495                 call    __RTC_CheckEsp
.text:0000349A                 mov     [ebp+var_120], eax
.text:000034A0                 cmp     [ebp+var_120], 0
.text:000034A7                 jz      short loc_34D2
.text:000034A9                 mov     eax, [ebp+var_120]
.text:000034AF                 mov     [ebp+var_290], eax
.text:000034B5                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000034BC                 lea     ecx, [ebp+var_110]
.text:000034C2                 call    ??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemEx>::~CObjectVector<NArchive::NZip::CItemEx>(void)
.text:000034C7                 mov     eax, [ebp+var_290]
.text:000034CD                 jmp     loc_3FD6
.text:000034D2 ; ---------------------------------------------------------------------------
.text:000034D2
.text:000034D2 loc_34D2:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+487j
.text:000034D2                 mov     ecx, [ebp+var_18] ; this
.text:000034D5                 call    ?ReadUInt32@CInArchive@NZip@NArchive@@AAEIXZ ; NArchive::NZip::CInArchive::ReadUInt32(void)
.text:000034DA                 mov     ecx, [ebp+var_18]
.text:000034DD                 mov     [ecx+2Ch], eax
.text:000034E0                 mov     edx, [ebp+arg_4]
.text:000034E3                 push    edx
.text:000034E4                 mov     eax, [ebp+arg_0]
.text:000034E7                 push    eax
.text:000034E8                 mov     ecx, [ebp+var_18]
.text:000034EB                 call    ?ReadLocals@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z ; NArchive::NZip::CInArchive::ReadLocals(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)
.text:000034F0                 mov     [ebp+var_124], eax
.text:000034F6                 cmp     [ebp+var_124], 0
.text:000034FD                 jz      short loc_3528
.text:000034FF                 mov     ecx, [ebp+var_124]
.text:00003505                 mov     [ebp+var_294], ecx
.text:0000350B                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003512                 lea     ecx, [ebp+var_110]
.text:00003518                 call    ??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemEx>::~CObjectVector<NArchive::NZip::CItemEx>(void)
.text:0000351D                 mov     eax, [ebp+var_294]
.text:00003523                 jmp     loc_3FD6
.text:00003528 ; ---------------------------------------------------------------------------
.text:00003528
.text:00003528 loc_3528:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+4DDj
.text:00003528                 mov     edx, [ebp+var_18]
.text:0000352B                 cmp     dword ptr [edx+2Ch], 2014B50h
.text:00003532                 jz      short loc_3581
.text:00003534                 mov     eax, [ebp+var_18]
.text:00003537                 mov     ecx, [eax+30h]
.text:0000353A                 sub     ecx, 4
.text:0000353D                 mov     edx, [eax+34h]
.text:00003540                 sbb     edx, 0
.text:00003543                 mov     eax, [ebp+var_18]
.text:00003546                 mov     [eax+30h], ecx
.text:00003549                 mov     [eax+34h], edx
.text:0000354C                 mov     ecx, [ebp+var_18]
.text:0000354F                 mov     byte ptr [ecx+7Eh], 1
.text:00003553                 mov     edx, [ebp+var_18]
.text:00003556                 mov     byte ptr [edx+7Ah], 1
.text:0000355A                 mov     [ebp+var_298], 0
.text:00003564                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000356B                 lea     ecx, [ebp+var_110]
.text:00003571                 call    ??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemEx>::~CObjectVector<NArchive::NZip::CItemEx>(void)
.text:00003576                 mov     eax, [ebp+var_298]
.text:0000357C                 jmp     loc_3FD6
.text:00003581 ; ---------------------------------------------------------------------------
.text:00003581
.text:00003581 loc_3581:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+512j
.text:00003581                 mov     eax, [ebp+var_18]
.text:00003584                 mov     byte ptr [eax+28h], 1
.text:00003588                 mov     ecx, [ebp+var_18] ; this
.text:0000358B                 call    ?Init@CInBufferBase@@QAEXXZ ; CInBufferBase::Init(void)
.text:00003590                 mov     ecx, [ebp+var_18]
.text:00003593                 mov     edx, [ecx+30h]
.text:00003596                 sub     edx, 4
.text:00003599                 mov     eax, [ecx+34h]
.text:0000359C                 sbb     eax, 0
.text:0000359F                 mov     [ebp+var_88], edx
.text:000035A5                 mov     [ebp+var_84], eax
.text:000035AB
.text:000035AB loc_35AB:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+6C7j
.text:000035AB                 lea     ecx, [ebp+var_190] ; this
.text:000035B1                 call    ??0CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::CItemEx(void)
.text:000035B6                 mov     byte ptr [ebp+var_4], 4
.text:000035BA                 lea     ecx, [ebp+var_190]
.text:000035C0                 push    ecx             ; struct NArchive::NZip::CItemEx *
.text:000035C1                 mov     ecx, [ebp+var_18] ; this
.text:000035C4                 call    ?ReadCdItem@CInArchive@NZip@NArchive@@AAEJAAVCItemEx@23@@Z ; NArchive::NZip::CInArchive::ReadCdItem(NArchive::NZip::CItemEx &)
.text:000035C9                 mov     [ebp+var_198], eax
.text:000035CF                 cmp     [ebp+var_198], 0
.text:000035D6                 jz      short loc_3610
.text:000035D8                 mov     edx, [ebp+var_198]
.text:000035DE                 mov     [ebp+var_29C], edx
.text:000035E4                 mov     byte ptr [ebp+var_4], 3
.text:000035E8                 lea     ecx, [ebp+var_190] ; this
.text:000035EE                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:000035F3                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000035FA                 lea     ecx, [ebp+var_110]
.text:00003600                 call    ??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemEx>::~CObjectVector<NArchive::NZip::CItemEx>(void)
.text:00003605                 mov     eax, [ebp+var_29C]
.text:0000360B                 jmp     loc_3FD6
.text:00003610 ; ---------------------------------------------------------------------------
.text:00003610
.text:00003610 loc_3610:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+5B6j
.text:00003610                 lea     eax, [ebp+var_190]
.text:00003616                 push    eax             ; struct NArchive::NZip::CItemEx *
.text:00003617                 lea     ecx, [ebp+var_110]
.text:0000361D                 call    ?Add@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEIABVCItemEx@NZip@NArchive@@@Z ; CObjectVector<NArchive::NZip::CItemEx>::Add(NArchive::NZip::CItemEx const &)
.text:00003622                 cmp     [ebp+arg_4], 0
.text:00003626                 jz      loc_36AD
.text:0000362C                 lea     ecx, [ebp+var_110]
.text:00003632                 call    ?Size@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CItemEx>::Size(void)
.text:00003637                 xor     edx, edx
.text:00003639                 mov     ecx, 1
.text:0000363E                 div     ecx
.text:00003640                 test    edx, edx
.text:00003642                 jnz     short loc_36AD
.text:00003644                 mov     ecx, [ebp+arg_0]
.text:00003647                 call    ?Size@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CItemEx>::Size(void)
.text:0000364C                 xor     edx, edx
.text:0000364E                 mov     esi, esp
.text:00003650                 push    edx
.text:00003651                 push    eax
.text:00003652                 mov     eax, [ebp+arg_4]
.text:00003655                 mov     edx, [eax]
.text:00003657                 mov     ecx, [ebp+arg_4]
.text:0000365A                 mov     eax, [edx+8]
.text:0000365D                 call    eax
.text:0000365F                 cmp     esi, esp
.text:00003661                 call    __RTC_CheckEsp
.text:00003666                 mov     [ebp+var_19C], eax
.text:0000366C                 cmp     [ebp+var_19C], 0
.text:00003673                 jz      short loc_36AD
.text:00003675                 mov     ecx, [ebp+var_19C]
.text:0000367B                 mov     [ebp+var_2A0], ecx
.text:00003681                 mov     byte ptr [ebp+var_4], 3
.text:00003685                 lea     ecx, [ebp+var_190] ; this
.text:0000368B                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:00003690                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003697                 lea     ecx, [ebp+var_110]
.text:0000369D                 call    ??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemEx>::~CObjectVector<NArchive::NZip::CItemEx>(void)
.text:000036A2                 mov     eax, [ebp+var_2A0]
.text:000036A8                 jmp     loc_3FD6
.text:000036AD ; ---------------------------------------------------------------------------
.text:000036AD
.text:000036AD loc_36AD:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+606j
.text:000036AD                                         ; NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+622j ...
.text:000036AD                 mov     ecx, [ebp+var_18] ; this
.text:000036B0                 call    ?ReadUInt32@CInArchive@NZip@NArchive@@AAEIXZ ; NArchive::NZip::CInArchive::ReadUInt32(void)
.text:000036B5                 mov     edx, [ebp+var_18]
.text:000036B8                 mov     [edx+2Ch], eax
.text:000036BB                 mov     eax, [ebp+var_18]
.text:000036BE                 cmp     dword ptr [eax+2Ch], 2014B50h
.text:000036C5                 jz      short loc_36D8
.text:000036C7                 mov     byte ptr [ebp+var_4], 3
.text:000036CB                 lea     ecx, [ebp+var_190] ; this
.text:000036D1                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:000036D6                 jmp     short loc_36EC
.text:000036D8 ; ---------------------------------------------------------------------------
.text:000036D8
.text:000036D8 loc_36D8:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+6A5j
.text:000036D8                 mov     byte ptr [ebp+var_4], 3
.text:000036DC                 lea     ecx, [ebp+var_190] ; this
.text:000036E2                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:000036E7                 jmp     loc_35AB
.text:000036EC ; ---------------------------------------------------------------------------
.text:000036EC
.text:000036EC loc_36EC:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+6B6j
.text:000036EC                 mov     ecx, [ebp+var_18]
.text:000036EF                 mov     edx, [ecx+30h]
.text:000036F2                 sub     edx, 4
.text:000036F5                 mov     eax, [ecx+34h]
.text:000036F8                 sbb     eax, 0
.text:000036FB                 sub     edx, [ebp+var_88]
.text:00003701                 sbb     eax, [ebp+var_84]
.text:00003707                 mov     [ebp+var_6C], edx
.text:0000370A                 mov     [ebp+var_68], eax
.text:0000370D                 mov     [ebp+var_115], 1
.text:00003714                 lea     ecx, [ebp+var_110]
.text:0000371A                 call    ?Size@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CItemEx>::Size(void)
.text:0000371F                 mov     [ebp+var_11C], eax
.text:00003725                 lea     ecx, [ebp+var_110]
.text:0000372B                 call    ?IsEmpty@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBE_NXZ ; CObjectVector<NArchive::NZip::CItemEx>::IsEmpty(void)
.text:00003730                 movzx   ecx, al
.text:00003733                 test    ecx, ecx
.text:00003735                 jnz     short loc_375A
.text:00003737                 mov     edx, [ebp+var_18]
.text:0000373A                 mov     byte ptr [edx+68h], 1
.text:0000373E                 push    0
.text:00003740                 lea     ecx, [ebp+var_110]
.text:00003746                 call    ??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEAAVCItemEx@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CItemEx>::operator[](uint)
.text:0000374B                 mov     ecx, [ebp+var_18]
.text:0000374E                 mov     edx, [eax+40h]
.text:00003751                 mov     [ecx+60h], edx
.text:00003754                 mov     eax, [eax+44h]
.text:00003757                 mov     [ecx+64h], eax
.text:0000375A
.text:0000375A loc_375A:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+40Aj
.text:0000375A                                         ; NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+715j
.text:0000375A                 lea     ecx, [ebp+var_1D0] ; this
.text:00003760                 call    ??0CEcd64@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CEcd64::CEcd64(void)
.text:00003765                 mov     [ebp+var_1D5], 0
.text:0000376C                 mov     ecx, [ebp+var_18]
.text:0000376F                 mov     edx, [ecx+30h]
.text:00003772                 sub     edx, 4
.text:00003775                 mov     eax, [ecx+34h]
.text:00003778                 sbb     eax, 0
.text:0000377B                 mov     [ebp+var_1E0], edx
.text:00003781                 mov     [ebp+var_1DC], eax
.text:00003787                 mov     ecx, [ebp+var_18]
.text:0000378A                 cmp     dword ptr [ecx+2Ch], 6064B50h
.text:00003791                 jnz     loc_3955
.text:00003797                 mov     [ebp+var_1D5], 1
.text:0000379E                 mov     edx, [ebp+var_18]
.text:000037A1                 mov     al, [ebp+var_1D5]
.text:000037A7                 mov     [edx+79h], al
.text:000037AA                 mov     ecx, [ebp+var_18] ; this
.text:000037AD                 call    ?ReadUInt64@CInArchive@NZip@NArchive@@AAE_KXZ ; NArchive::NZip::CInArchive::ReadUInt64(void)
.text:000037B2                 mov     [ebp+var_1E8], eax
.text:000037B8                 mov     [ebp+var_1E4], edx
.text:000037BE                 mov     [ebp+var_1EC], 2Ch ; ','
.text:000037C8                 push    2Ch ; ','       ; unsigned int
.text:000037CA                 lea     ecx, [ebp+var_21C]
.text:000037D0                 push    ecx             ; unsigned __int8 *
.text:000037D1                 mov     ecx, [ebp+var_18] ; this
.text:000037D4                 call    ?SafeReadBytes@CInArchive@NZip@NArchive@@AAEXPAXI@Z ; NArchive::NZip::CInArchive::SafeReadBytes(void *,uint)
.text:000037D9                 lea     edx, [ebp+var_21C]
.text:000037DF                 push    edx             ; unsigned __int8 *
.text:000037E0                 lea     ecx, [ebp+var_1D0] ; this
.text:000037E6                 call    ?Parse@CEcd64@NZip@NArchive@@QAEXPBE@Z ; NArchive::NZip::CEcd64::Parse(uchar const *)
.text:000037EB                 mov     eax, [ebp+var_1E8]
.text:000037F1                 sub     eax, 2Ch ; ','
.text:000037F4                 mov     ecx, [ebp+var_1E4]
.text:000037FA                 sbb     ecx, 0
.text:000037FD                 push    ecx
.text:000037FE                 push    eax             ; unsigned __int64
.text:000037FF                 mov     ecx, [ebp+var_18] ; this
.text:00003802                 call    ?Skip64@CInArchive@NZip@NArchive@@AAEX_K@Z ; NArchive::NZip::CInArchive::Skip64(unsigned __int64)
.text:00003807                 mov     ecx, [ebp+var_18] ; this
.text:0000380A                 call    ?ReadUInt32@CInArchive@NZip@NArchive@@AAEIXZ ; NArchive::NZip::CInArchive::ReadUInt32(void)
.text:0000380F                 mov     edx, [ebp+var_18]
.text:00003812                 mov     [edx+2Ch], eax
.text:00003815                 cmp     [ebp+var_1CC], 0
.text:0000381C                 jnz     short loc_3827
.text:0000381E                 cmp     [ebp+var_1C8], 0
.text:00003825                 jz      short loc_384E
.text:00003827
.text:00003827 loc_3827:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+7FCj
.text:00003827                 mov     [ebp+var_2A4], 80004001h
.text:00003831                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003838                 lea     ecx, [ebp+var_110]
.text:0000383E                 call    ??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemEx>::~CObjectVector<NArchive::NZip::CItemEx>(void)
.text:00003843                 mov     eax, [ebp+var_2A4]
.text:00003849                 jmp     loc_3FD6
.text:0000384E ; ---------------------------------------------------------------------------
.text:0000384E
.text:0000384E loc_384E:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+805j
.text:0000384E                 movzx   eax, [ebp+var_115]
.text:00003855                 test    eax, eax
.text:00003857                 jz      short loc_3893
.text:00003859                 mov     ecx, [ebp+var_88]
.text:0000385F                 sub     ecx, [ebp+var_1A8]
.text:00003865                 mov     edx, [ebp+var_84]
.text:0000386B                 sbb     edx, [ebp+var_1A4]
.text:00003871                 mov     eax, [ebp+var_18]
.text:00003874                 mov     [eax+38h], ecx
.text:00003877                 mov     [eax+3Ch], edx
.text:0000387A                 mov     ecx, [ebp+var_1A8]
.text:00003880                 mov     [ebp+var_7C], ecx
.text:00003883                 mov     edx, [ebp+var_1A4]
.text:00003889                 mov     [ebp+var_78], edx
.text:0000388C                 mov     [ebp+var_115], 0
.text:00003893
.text:00003893 loc_3893:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+837j
.text:00003893                 mov     eax, [ebp+var_11C]
.text:00003899                 xor     ecx, ecx
.text:0000389B                 mov     [ebp+var_2D4], eax
.text:000038A1                 mov     [ebp+var_2D0], ecx
.text:000038A7                 mov     edx, [ebp+var_1C0]
.text:000038AD                 cmp     edx, [ebp+var_2D4]
.text:000038B3                 jnz     short loc_392E
.text:000038B5                 mov     eax, [ebp+var_1BC]
.text:000038BB                 cmp     eax, [ebp+var_2D0]
.text:000038C1                 jnz     short loc_392E
.text:000038C3                 mov     ecx, [ebp+var_11C]
.text:000038C9                 xor     edx, edx
.text:000038CB                 mov     [ebp+var_2DC], ecx
.text:000038D1                 mov     [ebp+var_2D8], edx
.text:000038D7                 mov     eax, [ebp+var_1B8]
.text:000038DD                 cmp     eax, [ebp+var_2DC]
.text:000038E3                 jnz     short loc_392E
.text:000038E5                 mov     ecx, [ebp+var_1B4]
.text:000038EB                 cmp     ecx, [ebp+var_2D8]
.text:000038F1                 jnz     short loc_392E
.text:000038F3                 mov     edx, [ebp+var_1B0]
.text:000038F9                 cmp     edx, [ebp+var_6C]
.text:000038FC                 jnz     short loc_392E
.text:000038FE                 mov     eax, [ebp+var_1AC]
.text:00003904                 cmp     eax, [ebp+var_68]
.text:00003907                 jnz     short loc_392E
.text:00003909                 mov     ecx, [ebp+var_1A8]
.text:0000390F                 cmp     ecx, [ebp+var_7C]
.text:00003912                 jnz     short loc_391F
.text:00003914                 mov     edx, [ebp+var_1A4]
.text:0000391A                 cmp     edx, [ebp+var_78]
.text:0000391D                 jz      short loc_3955
.text:0000391F
.text:0000391F loc_391F:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+8F2j
.text:0000391F                 mov     ecx, [ebp+arg_0]
.text:00003922                 call    ?IsEmpty@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBE_NXZ ; CObjectVector<NArchive::NZip::CItemEx>::IsEmpty(void)
.text:00003927                 movzx   eax, al
.text:0000392A                 test    eax, eax
.text:0000392C                 jnz     short loc_3955
.text:0000392E
.text:0000392E loc_392E:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+893j
.text:0000392E                                         ; NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+8A1j ...
.text:0000392E                 mov     [ebp+var_2A8], 1
.text:00003938                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000393F                 lea     ecx, [ebp+var_110]
.text:00003945                 call    ??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemEx>::~CObjectVector<NArchive::NZip::CItemEx>(void)
.text:0000394A                 mov     eax, [ebp+var_2A8]
.text:00003950                 jmp     loc_3FD6
.text:00003955 ; ---------------------------------------------------------------------------
.text:00003955
.text:00003955 loc_3955:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+771j
.text:00003955                                         ; NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+8FDj ...
.text:00003955                 mov     ecx, [ebp+var_18]
.text:00003958                 cmp     dword ptr [ecx+2Ch], 7064B50h
.text:0000395F                 jnz     loc_3A2D
.text:00003965                 movzx   edx, [ebp+var_1D5]
.text:0000396C                 test    edx, edx
.text:0000396E                 jnz     short loc_3997
.text:00003970                 mov     [ebp+var_2AC], 1
.text:0000397A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003981                 lea     ecx, [ebp+var_110]
.text:00003987                 call    ??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemEx>::~CObjectVector<NArchive::NZip::CItemEx>(void)
.text:0000398C                 mov     eax, [ebp+var_2AC]
.text:00003992                 jmp     loc_3FD6
.text:00003997 ; ---------------------------------------------------------------------------
.text:00003997
.text:00003997 loc_3997:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+94Ej
.text:00003997                 mov     ecx, [ebp+var_18] ; this
.text:0000399A                 call    ?ReadUInt32@CInArchive@NZip@NArchive@@AAEIXZ ; NArchive::NZip::CInArchive::ReadUInt32(void)
.text:0000399F                 mov     ecx, [ebp+var_18] ; this
.text:000039A2                 call    ?ReadUInt64@CInArchive@NZip@NArchive@@AAE_KXZ ; NArchive::NZip::CInArchive::ReadUInt64(void)
.text:000039A7                 mov     [ebp+var_228], eax
.text:000039AD                 mov     [ebp+var_224], edx
.text:000039B3                 mov     ecx, [ebp+var_18] ; this
.text:000039B6                 call    ?ReadUInt32@CInArchive@NZip@NArchive@@AAEIXZ ; NArchive::NZip::CInArchive::ReadUInt32(void)
.text:000039BB                 mov     eax, [ebp+var_18]
.text:000039BE                 mov     ecx, [eax+38h]
.text:000039C1                 add     ecx, [ebp+var_228]
.text:000039C7                 mov     edx, [eax+3Ch]
.text:000039CA                 adc     edx, [ebp+var_224]
.text:000039D0                 mov     [ebp+var_2E4], ecx
.text:000039D6                 mov     [ebp+var_2E0], edx
.text:000039DC                 mov     eax, [ebp+var_1E0]
.text:000039E2                 cmp     eax, [ebp+var_2E4]
.text:000039E8                 jnz     short loc_39F8
.text:000039EA                 mov     ecx, [ebp+var_1DC]
.text:000039F0                 cmp     ecx, [ebp+var_2E0]
.text:000039F6                 jz      short loc_3A1F
.text:000039F8
.text:000039F8 loc_39F8:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+9C8j
.text:000039F8                 mov     [ebp+var_2B0], 1
.text:00003A02                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003A09                 lea     ecx, [ebp+var_110]
.text:00003A0F                 call    ??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemEx>::~CObjectVector<NArchive::NZip::CItemEx>(void)
.text:00003A14                 mov     eax, [ebp+var_2B0]
.text:00003A1A                 jmp     loc_3FD6
.text:00003A1F ; ---------------------------------------------------------------------------
.text:00003A1F
.text:00003A1F loc_3A1F:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+9D6j
.text:00003A1F                 mov     ecx, [ebp+var_18] ; this
.text:00003A22                 call    ?ReadUInt32@CInArchive@NZip@NArchive@@AAEIXZ ; NArchive::NZip::CInArchive::ReadUInt32(void)
.text:00003A27                 mov     edx, [ebp+var_18]
.text:00003A2A                 mov     [edx+2Ch], eax
.text:00003A2D
.text:00003A2D loc_3A2D:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+93Fj
.text:00003A2D                 mov     eax, [ebp+var_18]
.text:00003A30                 cmp     dword ptr [eax+2Ch], 6054B50h
.text:00003A37                 jz      short loc_3A60
.text:00003A39                 mov     [ebp+var_2B4], 1
.text:00003A43                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003A4A                 lea     ecx, [ebp+var_110]
.text:00003A50                 call    ??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemEx>::~CObjectVector<NArchive::NZip::CItemEx>(void)
.text:00003A55                 mov     eax, [ebp+var_2B4]
.text:00003A5B                 jmp     loc_3FD6
.text:00003A60 ; ---------------------------------------------------------------------------
.text:00003A60
.text:00003A60 loc_3A60:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+A17j
.text:00003A60                 mov     [ebp+var_22C], 12h
.text:00003A6A                 push    12h             ; unsigned int
.text:00003A6C                 lea     ecx, [ebp+var_244]
.text:00003A72                 push    ecx             ; unsigned __int8 *
.text:00003A73                 mov     ecx, [ebp+var_18] ; this
.text:00003A76                 call    ?SafeReadBytes@CInArchive@NZip@NArchive@@AAEXPAXI@Z ; NArchive::NZip::CInArchive::SafeReadBytes(void *,uint)
.text:00003A7B                 lea     edx, [ebp+var_244]
.text:00003A81                 push    edx             ; unsigned __int8 *
.text:00003A82                 lea     ecx, [ebp+var_260] ; this
.text:00003A88                 call    ?Parse@CEcd@NZip@NArchive@@QAEXPBE@Z ; NArchive::NZip::CEcd::Parse(uchar const *)
.text:00003A8D                 movzx   eax, [ebp+var_1D5]
.text:00003A94                 test    eax, eax
.text:00003A96                 jz      short loc_3AA7
.text:00003A98                 movzx   ecx, [ebp+var_260]
.text:00003A9F                 cmp     ecx, 0FFFFh
.text:00003AA5                 jz      short loc_3AB4
.text:00003AA7
.text:00003AA7 loc_3AA7:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+A76j
.text:00003AA7                 movzx   edx, [ebp+var_260]
.text:00003AAE                 mov     [ebp+var_1CC], edx
.text:00003AB4
.text:00003AB4 loc_3AB4:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+A85j
.text:00003AB4                 movzx   eax, [ebp+var_1D5]
.text:00003ABB                 test    eax, eax
.text:00003ABD                 jz      short loc_3ACE
.text:00003ABF                 movzx   ecx, [ebp+var_25E]
.text:00003AC6                 cmp     ecx, 0FFFFh
.text:00003ACC                 jz      short loc_3ADB
.text:00003ACE
.text:00003ACE loc_3ACE:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+A9Dj
.text:00003ACE                 movzx   edx, [ebp+var_25E]
.text:00003AD5                 mov     [ebp+var_1C8], edx
.text:00003ADB
.text:00003ADB loc_3ADB:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+AACj
.text:00003ADB                 movzx   eax, [ebp+var_1D5]
.text:00003AE2                 test    eax, eax
.text:00003AE4                 jz      short loc_3AF5
.text:00003AE6                 movzx   ecx, [ebp+var_25C]
.text:00003AED                 cmp     ecx, 0FFFFh
.text:00003AF3                 jz      short loc_3B09
.text:00003AF5
.text:00003AF5 loc_3AF5:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+AC4j
.text:00003AF5                 movzx   eax, [ebp+var_25C]
.text:00003AFC                 cdq
.text:00003AFD                 mov     [ebp+var_1C0], eax
.text:00003B03                 mov     [ebp+var_1BC], edx
.text:00003B09
.text:00003B09 loc_3B09:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+AD3j
.text:00003B09                 movzx   edx, [ebp+var_1D5]
.text:00003B10                 test    edx, edx
.text:00003B12                 jz      short loc_3B22
.text:00003B14                 movzx   eax, [ebp+var_25A]
.text:00003B1B                 cmp     eax, 0FFFFh
.text:00003B20                 jz      short loc_3B36
.text:00003B22
.text:00003B22 loc_3B22:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+AF2j
.text:00003B22                 movzx   eax, [ebp+var_25A]
.text:00003B29                 cdq
.text:00003B2A                 mov     [ebp+var_1B8], eax
.text:00003B30                 mov     [ebp+var_1B4], edx
.text:00003B36
.text:00003B36 loc_3B36:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+B00j
.text:00003B36                 movzx   ecx, [ebp+var_1D5]
.text:00003B3D                 test    ecx, ecx
.text:00003B3F                 jz      short loc_3B4A
.text:00003B41                 cmp     [ebp+var_258], 0FFFFFFFFh
.text:00003B48                 jz      short loc_3B5E
.text:00003B4A
.text:00003B4A loc_3B4A:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+B1Fj
.text:00003B4A                 mov     edx, [ebp+var_258]
.text:00003B50                 xor     eax, eax
.text:00003B52                 mov     [ebp+var_1B0], edx
.text:00003B58                 mov     [ebp+var_1AC], eax
.text:00003B5E
.text:00003B5E loc_3B5E:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+B28j
.text:00003B5E                 movzx   ecx, [ebp+var_1D5]
.text:00003B65                 test    ecx, ecx
.text:00003B67                 jz      short loc_3B72
.text:00003B69                 cmp     [ebp+var_254], 0FFFFFFFFh
.text:00003B70                 jz      short loc_3B86
.text:00003B72
.text:00003B72 loc_3B72:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+B47j
.text:00003B72                 mov     edx, [ebp+var_254]
.text:00003B78                 xor     eax, eax
.text:00003B7A                 mov     [ebp+var_1A8], edx
.text:00003B80                 mov     [ebp+var_1A4], eax
.text:00003B86
.text:00003B86 loc_3B86:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+B50j
.text:00003B86                 movzx   ecx, [ebp+var_115]
.text:00003B8D                 test    ecx, ecx
.text:00003B8F                 jz      short loc_3BCB
.text:00003B91                 mov     edx, [ebp+var_88]
.text:00003B97                 sub     edx, [ebp+var_1A8]
.text:00003B9D                 mov     eax, [ebp+var_84]
.text:00003BA3                 sbb     eax, [ebp+var_1A4]
.text:00003BA9                 mov     ecx, [ebp+var_18]
.text:00003BAC                 mov     [ecx+38h], edx
.text:00003BAF                 mov     [ecx+3Ch], eax
.text:00003BB2                 mov     edx, [ebp+var_1A8]
.text:00003BB8                 mov     [ebp+var_7C], edx
.text:00003BBB                 mov     eax, [ebp+var_1A4]
.text:00003BC1                 mov     [ebp+var_78], eax
.text:00003BC4                 mov     [ebp+var_115], 0
.text:00003BCB
.text:00003BCB loc_3BCB:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+B6Fj
.text:00003BCB                 movzx   ecx, [ebp+var_1E]
.text:00003BCF                 test    ecx, ecx
.text:00003BD1                 jz      loc_3C9A
.text:00003BD7                 mov     edx, [ebp+var_18]
.text:00003BDA                 mov     eax, [ebp+var_18]
.text:00003BDD                 mov     [ebp+var_2E8], edx
.text:00003BE3                 mov     [ebp+var_2EC], eax
.text:00003BE9                 mov     ecx, [ebp+var_2E8]
.text:00003BEF                 mov     edx, [ebp+var_2EC]
.text:00003BF5                 mov     eax, [ecx+38h]
.text:00003BF8                 cmp     eax, [edx+40h]
.text:00003BFB                 jnz     short loc_3C15
.text:00003BFD                 mov     ecx, [ebp+var_2E8]
.text:00003C03                 mov     edx, [ebp+var_2EC]
.text:00003C09                 mov     eax, [ecx+3Ch]
.text:00003C0C                 cmp     eax, [edx+44h]
.text:00003C0F                 jz      loc_3C9A
.text:00003C15
.text:00003C15 loc_3C15:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+BDBj
.text:00003C15                 mov     ecx, [ebp+var_18]
.text:00003C18                 mov     edx, [ebp+var_18]
.text:00003C1B                 mov     eax, [ecx+40h]
.text:00003C1E                 sub     eax, [edx+38h]
.text:00003C21                 mov     ecx, [ecx+44h]
.text:00003C24                 sbb     ecx, [edx+3Ch]
.text:00003C27                 mov     [ebp+var_26C], eax
.text:00003C2D                 mov     [ebp+var_268], ecx
.text:00003C33                 mov     [ebp+var_270], 0
.text:00003C3D                 jmp     short loc_3C4E
.text:00003C3F ; ---------------------------------------------------------------------------
.text:00003C3F
.text:00003C3F loc_3C3F:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+C78j
.text:00003C3F                 mov     edx, [ebp+var_270]
.text:00003C45                 add     edx, 1
.text:00003C48                 mov     [ebp+var_270], edx
.text:00003C4E
.text:00003C4E loc_3C4E:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+C1Dj
.text:00003C4E                 mov     ecx, [ebp+arg_0]
.text:00003C51                 call    ?Size@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CItemEx>::Size(void)
.text:00003C56                 cmp     [ebp+var_270], eax
.text:00003C5C                 jnb     short loc_3C9A
.text:00003C5E                 mov     eax, [ebp+var_270]
.text:00003C64                 push    eax
.text:00003C65                 mov     ecx, [ebp+arg_0]
.text:00003C68                 call    ??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEAAVCItemEx@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CItemEx>::operator[](uint)
.text:00003C6D                 add     eax, 40h ; '@'
.text:00003C70                 mov     [ebp+var_2F0], eax
.text:00003C76                 mov     ecx, [ebp+var_2F0]
.text:00003C7C                 mov     edx, [ecx]
.text:00003C7E                 add     edx, [ebp+var_26C]
.text:00003C84                 mov     eax, [ecx+4]
.text:00003C87                 adc     eax, [ebp+var_268]
.text:00003C8D                 mov     ecx, [ebp+var_2F0]
.text:00003C93                 mov     [ecx], edx
.text:00003C95                 mov     [ecx+4], eax
.text:00003C98                 jmp     short loc_3C3F
.text:00003C9A ; ---------------------------------------------------------------------------
.text:00003C9A
.text:00003C9A loc_3C9A:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+BB1j
.text:00003C9A                                         ; NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+BEFj ...
.text:00003C9A                 lea     ecx, [ebp+var_110]
.text:00003CA0                 call    ?IsEmpty@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBE_NXZ ; CObjectVector<NArchive::NZip::CItemEx>::IsEmpty(void)
.text:00003CA5                 movzx   edx, al
.text:00003CA8                 test    edx, edx
.text:00003CAA                 jnz     loc_3EA2
.text:00003CB0                 mov     [ebp+var_274], 0
.text:00003CBA                 jmp     short loc_3CCB
.text:00003CBC ; ---------------------------------------------------------------------------
.text:00003CBC
.text:00003CBC loc_3CBC:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+D0Fj
.text:00003CBC                                         ; NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *):loc_3E1Cj ...
.text:00003CBC                 mov     eax, [ebp+var_274]
.text:00003CC2                 add     eax, 1
.text:00003CC5                 mov     [ebp+var_274], eax
.text:00003CCB
.text:00003CCB loc_3CCB:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+C9Aj
.text:00003CCB                 lea     ecx, [ebp+var_110]
.text:00003CD1                 call    ?Size@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CItemEx>::Size(void)
.text:00003CD6                 cmp     [ebp+var_274], eax
.text:00003CDC                 jnb     loc_3EA2
.text:00003CE2                 mov     ecx, [ebp+var_274]
.text:00003CE8                 push    ecx
.text:00003CE9                 lea     ecx, [ebp+var_110]
.text:00003CEF                 call    ??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEAAVCItemEx@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CItemEx>::operator[](uint)
.text:00003CF4                 mov     [ebp+var_278], eax
.text:00003CFA                 mov     edx, [ebp+var_278]
.text:00003D00                 mov     eax, [edx+44h]
.text:00003D03                 push    eax
.text:00003D04                 mov     ecx, [edx+40h]
.text:00003D07                 push    ecx
.text:00003D08                 mov     edx, [ebp+arg_0]
.text:00003D0B                 push    edx
.text:00003D0C                 call    ?FindItem@NZip@NArchive@@YGJABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@_K@Z ; NArchive::NZip::FindItem(CObjectVector<NArchive::NZip::CItemEx> const &,unsigned __int64)
.text:00003D11                 mov     [ebp+var_27C], eax
.text:00003D17                 cmp     [ebp+var_27C], 0FFFFFFFFh
.text:00003D1E                 jnz     short loc_3D31
.text:00003D20                 mov     eax, [ebp+var_278]
.text:00003D26                 push    eax             ; struct NArchive::NZip::CItemEx *
.text:00003D27                 mov     ecx, [ebp+arg_0]
.text:00003D2A                 call    ?Add@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEIABVCItemEx@NZip@NArchive@@@Z ; CObjectVector<NArchive::NZip::CItemEx>::Add(NArchive::NZip::CItemEx const &)
.text:00003D2F                 jmp     short loc_3CBC
.text:00003D31 ; ---------------------------------------------------------------------------
.text:00003D31
.text:00003D31 loc_3D31:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+CFEj
.text:00003D31                 mov     ecx, [ebp+var_27C]
.text:00003D37                 push    ecx
.text:00003D38                 mov     ecx, [ebp+arg_0]
.text:00003D3B                 call    ??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEAAVCItemEx@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CItemEx>::operator[](uint)
.text:00003D40                 mov     [ebp+var_280], eax
.text:00003D46                 mov     edx, [ebp+var_278]
.text:00003D4C                 add     edx, 20h ; ' '
.text:00003D4F                 push    edx             ; AString *
.text:00003D50                 mov     eax, [ebp+var_280]
.text:00003D56                 add     eax, 20h ; ' '
.text:00003D59                 push    eax             ; AString *
.text:00003D5A                 call    ??9@YG_NABVAString@@0@Z ; operator!=(AString const &,AString const &)
.text:00003D5F                 movzx   ecx, al
.text:00003D62                 test    ecx, ecx
.text:00003D64                 jnz     loc_3E1C
.text:00003D6A                 mov     edx, [ebp+var_280]
.text:00003D70                 mov     eax, [ebp+var_278]
.text:00003D76                 mov     [ebp+var_2F4], edx
.text:00003D7C                 mov     [ebp+var_2F8], eax
.text:00003D82                 mov     ecx, [ebp+var_2F4]
.text:00003D88                 mov     edx, [ebp+var_2F8]
.text:00003D8E                 mov     eax, [ecx+10h]
.text:00003D91                 cmp     eax, [edx+10h]
.text:00003D94                 jnz     loc_3E1C
.text:00003D9A                 mov     ecx, [ebp+var_2F4]
.text:00003DA0                 mov     edx, [ebp+var_2F8]
.text:00003DA6                 mov     eax, [ecx+14h]
.text:00003DA9                 cmp     eax, [edx+14h]
.text:00003DAC                 jnz     short loc_3E1C
.text:00003DAE                 mov     ecx, [ebp+var_280]
.text:00003DB4                 mov     edx, [ebp+var_278]
.text:00003DBA                 mov     [ebp+var_2FC], ecx
.text:00003DC0                 mov     [ebp+var_300], edx
.text:00003DC6                 mov     eax, [ebp+var_2FC]
.text:00003DCC                 mov     ecx, [ebp+var_300]
.text:00003DD2                 mov     edx, [eax+8]
.text:00003DD5                 cmp     edx, [ecx+8]
.text:00003DD8                 jnz     short loc_3E1C
.text:00003DDA                 mov     eax, [ebp+var_2FC]
.text:00003DE0                 mov     ecx, [ebp+var_300]
.text:00003DE6                 mov     edx, [eax+0Ch]
.text:00003DE9                 cmp     edx, [ecx+0Ch]
.text:00003DEC                 jnz     short loc_3E1C
.text:00003DEE                 mov     eax, [ebp+var_278]
.text:00003DF4                 push    eax
.text:00003DF5                 mov     ecx, [ebp+var_280]
.text:00003DFB                 push    ecx
.text:00003DFC                 call    ?FlagsAreSame@NZip@NArchive@@YG_NABVCItem@12@0@Z ; NArchive::NZip::FlagsAreSame(NArchive::NZip::CItem const &,NArchive::NZip::CItem const &)
.text:00003E01                 movzx   edx, al
.text:00003E04                 test    edx, edx
.text:00003E06                 jz      short loc_3E1C
.text:00003E08                 mov     eax, [ebp+var_280]
.text:00003E0E                 mov     ecx, [ebp+var_278]
.text:00003E14                 mov     edx, [eax+1Ch]
.text:00003E17                 cmp     edx, [ecx+1Ch]
.text:00003E1A                 jz      short loc_3E21
.text:00003E1C
.text:00003E1C loc_3E1C:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+D44j
.text:00003E1C                                         ; NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+D74j ...
.text:00003E1C                 jmp     loc_3CBC
.text:00003E21 ; ---------------------------------------------------------------------------
.text:00003E21
.text:00003E21 loc_3E21:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+DFAj
.text:00003E21                 mov     eax, [ebp+var_278]
.text:00003E27                 mov     cx, [eax+38h]
.text:00003E2B                 mov     edx, [ebp+var_280]
.text:00003E31                 mov     [edx+38h], cx
.text:00003E35                 mov     eax, [ebp+var_278]
.text:00003E3B                 add     eax, 48h ; 'H'
.text:00003E3E                 push    eax
.text:00003E3F                 mov     ecx, [ebp+var_280]
.text:00003E45                 add     ecx, 48h ; 'H'
.text:00003E48                 call    ??4CExtraBlock@NZip@NArchive@@QAEAAU012@ABU012@@Z ; NArchive::NZip::CExtraBlock::operator=(NArchive::NZip::CExtraBlock const &)
.text:00003E4D                 mov     ecx, [ebp+var_280]
.text:00003E53                 mov     edx, [ebp+var_278]
.text:00003E59                 mov     ax, [edx+3Ah]
.text:00003E5D                 mov     [ecx+3Ah], ax
.text:00003E61                 mov     ecx, [ebp+var_280]
.text:00003E67                 mov     edx, [ebp+var_278]
.text:00003E6D                 mov     eax, [edx+3Ch]
.text:00003E70                 mov     [ecx+3Ch], eax
.text:00003E73                 mov     ecx, [ebp+var_278]
.text:00003E79                 add     ecx, 54h ; 'T'
.text:00003E7C                 push    ecx
.text:00003E7D                 mov     ecx, [ebp+var_280]
.text:00003E83                 add     ecx, 54h ; 'T'
.text:00003E86                 call    ??4?$CBuffer@E@@QAEAAV0@ABV0@@Z ; CBuffer<uchar>::operator=(CBuffer<uchar> const &)
.text:00003E8B                 mov     edx, [ebp+var_280]
.text:00003E91                 mov     eax, [ebp+var_278]
.text:00003E97                 mov     cl, [eax+5Dh]
.text:00003E9A                 mov     [edx+5Dh], cl
.text:00003E9D                 jmp     loc_3CBC
.text:00003EA2 ; ---------------------------------------------------------------------------
.text:00003EA2
.text:00003EA2 loc_3EA2:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+C8Aj
.text:00003EA2                                         ; NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+CBCj
.text:00003EA2                 cmp     [ebp+var_1CC], 0
.text:00003EA9                 jnz     short loc_3EB4
.text:00003EAB                 cmp     [ebp+var_1C8], 0
.text:00003EB2                 jz      short loc_3EDB
.text:00003EB4
.text:00003EB4 loc_3EB4:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+E89j
.text:00003EB4                 mov     [ebp+var_2B8], 80004001h
.text:00003EBE                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003EC5                 lea     ecx, [ebp+var_110]
.text:00003ECB                 call    ??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemEx>::~CObjectVector<NArchive::NZip::CItemEx>(void)
.text:00003ED0                 mov     eax, [ebp+var_2B8]
.text:00003ED6                 jmp     loc_3FD6
.text:00003EDB ; ---------------------------------------------------------------------------
.text:00003EDB
.text:00003EDB loc_3EDB:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+E92j
.text:00003EDB                 movzx   edx, [ebp+var_1D5]
.text:00003EE2                 test    edx, edx
.text:00003EE4                 jz      short loc_3F21
.text:00003EE6                 mov     ecx, [ebp+arg_0]
.text:00003EE9                 call    ?Size@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CItemEx>::Size(void)
.text:00003EEE                 xor     ecx, ecx
.text:00003EF0                 mov     [ebp+var_308], eax
.text:00003EF6                 mov     [ebp+var_304], ecx
.text:00003EFC                 mov     edx, [ebp+var_1C0]
.text:00003F02                 cmp     edx, [ebp+var_308]
.text:00003F08                 jnz     short loc_3F18
.text:00003F0A                 mov     eax, [ebp+var_1BC]
.text:00003F10                 cmp     eax, [ebp+var_304]
.text:00003F16                 jz      short loc_3F1F
.text:00003F18
.text:00003F18 loc_3F18:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+EE8j
.text:00003F18                 mov     ecx, [ebp+var_18]
.text:00003F1B                 mov     byte ptr [ecx+7Ah], 1
.text:00003F1F
.text:00003F1F loc_3F1F:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+EF6j
.text:00003F1F                 jmp     short loc_3F50
.text:00003F21 ; ---------------------------------------------------------------------------
.text:00003F21
.text:00003F21 loc_3F21:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+EC4j
.text:00003F21                 movzx   edx, word ptr [ebp+var_11C]
.text:00003F28                 movzx   eax, word ptr [ebp+var_1C0]
.text:00003F2F                 cmp     eax, edx
.text:00003F31                 jnz     short loc_3F49
.text:00003F33                 mov     ecx, [ebp+arg_0]
.text:00003F36                 call    ?Size@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CItemEx>::Size(void)
.text:00003F3B                 movzx   ecx, ax
.text:00003F3E                 movzx   edx, word ptr [ebp+var_1C0]
.text:00003F45                 cmp     edx, ecx
.text:00003F47                 jz      short loc_3F50
.text:00003F49
.text:00003F49 loc_3F49:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+F11j
.text:00003F49                 mov     eax, [ebp+var_18]
.text:00003F4C                 mov     byte ptr [eax+7Ah], 1
.text:00003F50
.text:00003F50 loc_3F50:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *):loc_3F1Fj
.text:00003F50                                         ; NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+F27j
.text:00003F50                 movzx   ecx, [ebp+var_250]
.text:00003F57                 push    ecx
.text:00003F58                 mov     edx, [ebp+var_18]
.text:00003F5B                 add     edx, 6Ch ; 'l'
.text:00003F5E                 push    edx
.text:00003F5F                 mov     ecx, [ebp+var_18]
.text:00003F62                 call    ?ReadBuffer@CInArchive@NZip@NArchive@@AAEXAAV?$CBuffer@E@@I@Z ; NArchive::NZip::CInArchive::ReadBuffer(CBuffer<uchar> &,uint)
.text:00003F67                 mov     eax, [ebp+var_18]
.text:00003F6A                 mov     byte ptr [eax+28h], 0
.text:00003F6E                 mov     ecx, [ebp+var_18] ; this
.text:00003F71                 call    ?Free@CInBuffer@@QAEXXZ ; CInBuffer::Free(void)
.text:00003F76                 movzx   ecx, word ptr [ebp+var_11C]
.text:00003F7D                 movzx   edx, word ptr [ebp+var_1B8]
.text:00003F84                 cmp     edx, ecx
.text:00003F86                 jnz     short loc_3FAD
.text:00003F88                 mov     eax, [ebp+var_6C]
.text:00003F8B                 cmp     [ebp+var_1B0], eax
.text:00003F91                 jnz     short loc_3FAD
.text:00003F93                 mov     ecx, [ebp+var_7C]
.text:00003F96                 cmp     [ebp+var_1A8], ecx
.text:00003F9C                 jz      short loc_3FB4
.text:00003F9E                 mov     ecx, [ebp+arg_0]
.text:00003FA1                 call    ?IsEmpty@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBE_NXZ ; CObjectVector<NArchive::NZip::CItemEx>::IsEmpty(void)
.text:00003FA6                 movzx   edx, al
.text:00003FA9                 test    edx, edx
.text:00003FAB                 jnz     short loc_3FB4
.text:00003FAD
.text:00003FAD loc_3FAD:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+F66j
.text:00003FAD                                         ; NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+F71j
.text:00003FAD                 mov     eax, [ebp+var_18]
.text:00003FB0                 mov     byte ptr [eax+7Ah], 1
.text:00003FB4
.text:00003FB4 loc_3FB4:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+F7Cj
.text:00003FB4                                         ; NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+F8Bj
.text:00003FB4                 mov     [ebp+var_2BC], 0
.text:00003FBE                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003FC5                 lea     ecx, [ebp+var_110]
.text:00003FCB                 call    ??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemEx>::~CObjectVector<NArchive::NZip::CItemEx>(void)
.text:00003FD0                 mov     eax, [ebp+var_2BC]
.text:00003FD6
.text:00003FD6 loc_3FD6:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+9Dj
.text:00003FD6                                         ; NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+BBj ...
.text:00003FD6                 push    edx
.text:00003FD7                 mov     ecx, ebp
.text:00003FD9                 push    eax
.text:00003FDA                 lea     edx, $LN98
.text:00003FE0                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00003FE5                 pop     eax
.text:00003FE6                 pop     edx
.text:00003FE7                 mov     ecx, [ebp+var_C]
.text:00003FEA                 mov     large fs:0, ecx
.text:00003FF1                 pop     ecx
.text:00003FF2                 pop     edi
.text:00003FF3                 pop     esi
.text:00003FF4                 pop     ebx
.text:00003FF5                 mov     ecx, [ebp+var_14]
.text:00003FF8                 xor     ecx, ebp
.text:00003FFA                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00003FFF                 add     esp, 308h
.text:00004005                 cmp     ebp, esp
.text:00004007                 call    __RTC_CheckEsp
.text:0000400C                 mov     esp, ebp
.text:0000400E                 pop     ebp
.text:0000400F                 retn    8
.text:0000400F ; END OF FUNCTION CHUNK FOR ?ReadHeaders2@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z
.text:0000400F ; ---------------------------------------------------------------------------
.text:00004012                 align 4
.text:00004014 $LN98           dd 0Bh                  ; DATA XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+FBAo
.text:00004018                 dd offset $LN97
.text:0000401C $LN97           dd 0FFFFFFC4h, 12h      ; DATA XREF: .text:00004018o
.text:00004024                 dd offset $LN85         ; "buf"
.text:00004028                 dd 0FFFFFFA8h, 14h
.text:00004030                 dd offset $LN86         ; "ecd"
.text:00004034                 dd 0FFFFFF94h, 8
.text:0000403C                 dd offset $LN87         ; "cdSize"
.text:00004040                 dd 0FFFFFF84h, 8
.text:00004048                 dd offset $LN88         ; "cdRelatOffset"
.text:0000404C                 db 8, 0FFh
.text:0000404E                 dw 0FFFFh
.text:00004050                 dd offset loc_66+2
.text:00004054                 dd offset $LN89         ; "firstItem"
.text:00004058                 dd 0FFFFFEF0h, 0Ch
.text:00004060                 dd offset $LN90         ; "cdItems"
.text:00004064                 dd 0FFFFFE70h, 68h
.text:0000406C                 dd offset $LN91         ; "cdItem"
.text:00004070                 dd 0FFFFFE30h, 30h
.text:00004078                 dd offset $LN92         ; "ecd64"
.text:0000407C                 dd 0FFFFFDE4h, 2Ch
.text:00004084                 dd offset $LN93
.text:00004088                 dd 0FFFFFDBCh, 12h
.text:00004090                 dd offset $LN94
.text:00004094                 dd 0FFFFFDA0h, 14h
.text:0000409C                 dd offset $LN95
.text:000040A0 $LN95           dd 646365h              ; DATA XREF: .text:0000409Co
.text:000040A4 $LN94           dd 667562h              ; DATA XREF: .text:00004090o
.text:000040A8 $LN93           dd 667562h              ; DATA XREF: .text:00004084o
.text:000040AC $LN92           db 'ecd64',0            ; DATA XREF: .text:00004078o
.text:000040B2 $LN91           db 'cdItem',0           ; DATA XREF: .text:0000406Co
.text:000040B9 $LN90           db 'cdItems',0          ; DATA XREF: .text:00004060o
.text:000040C1 $LN89           db 'firstItem',0        ; DATA XREF: .text:00004054o
.text:000040CB $LN88           db 'cdRelatOffset',0    ; DATA XREF: .text:00004048o
.text:000040D9 $LN87           db 'cdSize',0           ; DATA XREF: .text:0000403Co
.text:000040E0 $LN86           db 'ecd',0              ; DATA XREF: .text:00004030o
.text:000040E4 $LN85           db 'buf',0              ; DATA XREF: .text:00004024o
.text:000040E8                 align 10h
.text:000040F0
.text:000040F0 ; =============== S U B R O U T I N E =======================================
.text:000040F0
.text:000040F0 ; Attributes: bp-based frame
.text:000040F0
.text:000040F0 ; long __stdcall NArchive::NZip::FindItem(class CObjectVector<class NArchive::NZip::CItemEx> const &, unsigned __int64)
.text:000040F0 ?FindItem@NZip@NArchive@@YGJABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@_K@Z proc near
.text:000040F0                                         ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+35Dp
.text:000040F0                                         ; NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+CECp
.text:000040F0
.text:000040F0 var_14          = dword ptr -14h
.text:000040F0 var_10          = dword ptr -10h
.text:000040F0 var_C           = dword ptr -0Ch
.text:000040F0 var_8           = dword ptr -8
.text:000040F0 var_4           = dword ptr -4
.text:000040F0 arg_0           = dword ptr  8
.text:000040F0 arg_4           = dword ptr  0Ch
.text:000040F0 arg_8           = dword ptr  10h
.text:000040F0
.text:000040F0                 push    ebp
.text:000040F1                 mov     ebp, esp
.text:000040F3                 sub     esp, 14h
.text:000040F6                 mov     eax, 0CCCCCCCCh
.text:000040FB                 mov     [ebp+var_14], eax
.text:000040FE                 mov     [ebp+var_10], eax
.text:00004101                 mov     [ebp+var_C], eax
.text:00004104                 mov     [ebp+var_8], eax
.text:00004107                 mov     [ebp+var_4], eax
.text:0000410A                 mov     [ebp+var_4], 0
.text:00004111                 mov     ecx, [ebp+arg_0]
.text:00004114                 call    ?Size@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CItemEx>::Size(void)
.text:00004119                 mov     [ebp+var_8], eax
.text:0000411C
.text:0000411C loc_411C:                               ; CODE XREF: NArchive::NZip::FindItem(CObjectVector<NArchive::NZip::CItemEx> const &,unsigned __int64):loc_4184j
.text:0000411C                 mov     eax, [ebp+var_4]
.text:0000411F                 cmp     eax, [ebp+var_8]
.text:00004122                 jb      short loc_4129
.text:00004124                 or      eax, 0FFFFFFFFh
.text:00004127                 jmp     short loc_4186
.text:00004129 ; ---------------------------------------------------------------------------
.text:00004129
.text:00004129 loc_4129:                               ; CODE XREF: NArchive::NZip::FindItem(CObjectVector<NArchive::NZip::CItemEx> const &,unsigned __int64)+32j
.text:00004129                 mov     ecx, [ebp+var_4]
.text:0000412C                 add     ecx, [ebp+var_8]
.text:0000412F                 shr     ecx, 1
.text:00004131                 mov     [ebp+var_C], ecx
.text:00004134                 mov     edx, [ebp+var_C]
.text:00004137                 push    edx
.text:00004138                 mov     ecx, [ebp+arg_0]
.text:0000413B                 call    ??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEABVCItemEx@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CItemEx>::operator[](uint)
.text:00004140                 mov     ecx, [eax+40h]
.text:00004143                 mov     [ebp+var_14], ecx
.text:00004146                 mov     edx, [eax+44h]
.text:00004149                 mov     [ebp+var_10], edx
.text:0000414C                 mov     eax, [ebp+arg_4]
.text:0000414F                 cmp     eax, [ebp+var_14]
.text:00004152                 jnz     short loc_4161
.text:00004154                 mov     ecx, [ebp+arg_8]
.text:00004157                 cmp     ecx, [ebp+var_10]
.text:0000415A                 jnz     short loc_4161
.text:0000415C                 mov     eax, [ebp+var_C]
.text:0000415F                 jmp     short loc_4186
.text:00004161 ; ---------------------------------------------------------------------------
.text:00004161
.text:00004161 loc_4161:                               ; CODE XREF: NArchive::NZip::FindItem(CObjectVector<NArchive::NZip::CItemEx> const &,unsigned __int64)+62j
.text:00004161                                         ; NArchive::NZip::FindItem(CObjectVector<NArchive::NZip::CItemEx> const &,unsigned __int64)+6Aj
.text:00004161                 mov     edx, [ebp+arg_8]
.text:00004164                 cmp     edx, [ebp+var_10]
.text:00004167                 ja      short loc_417B
.text:00004169                 jb      short loc_4173
.text:0000416B                 mov     eax, [ebp+arg_4]
.text:0000416E                 cmp     eax, [ebp+var_14]
.text:00004171                 jnb     short loc_417B
.text:00004173
.text:00004173 loc_4173:                               ; CODE XREF: NArchive::NZip::FindItem(CObjectVector<NArchive::NZip::CItemEx> const &,unsigned __int64)+79j
.text:00004173                 mov     ecx, [ebp+var_C]
.text:00004176                 mov     [ebp+var_8], ecx
.text:00004179                 jmp     short loc_4184
.text:0000417B ; ---------------------------------------------------------------------------
.text:0000417B
.text:0000417B loc_417B:                               ; CODE XREF: NArchive::NZip::FindItem(CObjectVector<NArchive::NZip::CItemEx> const &,unsigned __int64)+77j
.text:0000417B                                         ; NArchive::NZip::FindItem(CObjectVector<NArchive::NZip::CItemEx> const &,unsigned __int64)+81j
.text:0000417B                 mov     edx, [ebp+var_C]
.text:0000417E                 add     edx, 1
.text:00004181                 mov     [ebp+var_4], edx
.text:00004184
.text:00004184 loc_4184:                               ; CODE XREF: NArchive::NZip::FindItem(CObjectVector<NArchive::NZip::CItemEx> const &,unsigned __int64)+89j
.text:00004184                 jmp     short loc_411C
.text:00004186 ; ---------------------------------------------------------------------------
.text:00004186
.text:00004186 loc_4186:                               ; CODE XREF: NArchive::NZip::FindItem(CObjectVector<NArchive::NZip::CItemEx> const &,unsigned __int64)+37j
.text:00004186                                         ; NArchive::NZip::FindItem(CObjectVector<NArchive::NZip::CItemEx> const &,unsigned __int64)+6Fj
.text:00004186                 add     esp, 14h
.text:00004189                 cmp     ebp, esp
.text:0000418B                 call    __RTC_CheckEsp
.text:00004190                 mov     esp, ebp
.text:00004192                 pop     ebp
.text:00004193                 retn    0Ch
.text:00004193 ?FindItem@NZip@NArchive@@YGJABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@_K@Z endp
.text:00004193
.text:00004193 ; ---------------------------------------------------------------------------
.text:00004196                 align 10h
.text:000041A0
.text:000041A0 ; =============== S U B R O U T I N E =======================================
.text:000041A0
.text:000041A0 ; Attributes: bp-based frame
.text:000041A0
.text:000041A0 ; public: long __thiscall NArchive::NZip::CInArchive::ReadHeaders(class CObjectVector<class NArchive::NZip::CItemEx> &, struct NArchive::NZip::CProgressVirt *)
.text:000041A0                 public ?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z
.text:000041A0 ?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z proc near
.text:000041A0
.text:000041A0 var_2C          = dword ptr -2Ch
.text:000041A0 var_28          = dword ptr -28h
.text:000041A0 var_24          = dword ptr -24h
.text:000041A0 var_20          = dword ptr -20h
.text:000041A0 var_1C          = dword ptr -1Ch
.text:000041A0 var_18          = dword ptr -18h
.text:000041A0 var_14          = dword ptr -14h
.text:000041A0 var_10          = dword ptr -10h
.text:000041A0 var_C           = dword ptr -0Ch
.text:000041A0 var_4           = dword ptr -4
.text:000041A0 arg_0           = dword ptr  8
.text:000041A0 arg_4           = dword ptr  0Ch
.text:000041A0
.text:000041A0 ; FUNCTION CHUNK AT .text:0000427B SIZE 00000009 BYTES
.text:000041A0 ; FUNCTION CHUNK AT .text:00004286 SIZE 00000002 BYTES
.text:000041A0 ; FUNCTION CHUNK AT .text:0000428A SIZE 00000002 BYTES
.text:000041A0 ; FUNCTION CHUNK AT .text:00004291 SIZE 0000004B BYTES
.text:000041A0
.text:000041A0                 push    ebp
.text:000041A1                 mov     ebp, esp
.text:000041A3                 push    0FFFFFFFFh
.text:000041A5                 push    offset __ehhandler$?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z
.text:000041AA                 mov     eax, large fs:0
.text:000041B0                 push    eax
.text:000041B1                 push    ecx
.text:000041B2                 sub     esp, 1Ch
.text:000041B5                 push    ebx
.text:000041B6                 push    esi
.text:000041B7                 push    edi
.text:000041B8                 mov     eax, 0CCCCCCCCh
.text:000041BD                 mov     [ebp+var_2C], eax
.text:000041C0                 mov     [ebp+var_28], eax
.text:000041C3                 mov     [ebp+var_24], eax
.text:000041C6                 mov     [ebp+var_20], eax
.text:000041C9                 mov     [ebp+var_1C], eax
.text:000041CC                 mov     [ebp+var_18], eax
.text:000041CF                 mov     [ebp+var_14], eax
.text:000041D2                 mov     eax, dword ptr ds:___security_cookie
.text:000041D7                 xor     eax, ebp
.text:000041D9                 push    eax
.text:000041DA                 lea     eax, [ebp+var_C]
.text:000041DD                 mov     large fs:0, eax
.text:000041E3                 mov     [ebp+var_10], esp
.text:000041E6                 mov     [ebp+var_14], ecx
.text:000041E9                 mov     [ebp+var_4], 0
.text:000041F0                 mov     eax, [ebp+arg_4]
.text:000041F3                 push    eax
.text:000041F4                 mov     ecx, [ebp+arg_0]
.text:000041F7                 push    ecx
.text:000041F8                 mov     ecx, [ebp+var_14]
.text:000041FB                 call    ?ReadHeaders2@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z ; NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)
.text:00004200                 mov     [ebp+var_2C], eax
.text:00004203                 mov     edx, [ebp+var_2C]
.text:00004206                 mov     [ebp+var_18], edx
.text:00004209                 jmp     short loc_427B
.text:00004209 ?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z endp
.text:00004209
.text:0000420B
.text:0000420B ; =============== S U B R O U T I N E =======================================
.text:0000420B
.text:0000420B
.text:0000420B __catch$?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$0 proc near
.text:0000420B                                         ; DATA XREF: .xdata$x:00004960o
.text:0000420B                 mov     eax, [ebp-20h]
.text:0000420E                 mov     ecx, [eax]
.text:00004210                 mov     [ebp-18h], ecx
.text:00004213                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:0000421A                 mov     eax, offset __tryend$?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$3
.text:0000421F                 retn
.text:0000421F __catch$?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$0 endp
.text:0000421F
.text:00004220
.text:00004220 ; =============== S U B R O U T I N E =======================================
.text:00004220
.text:00004220
.text:00004220 __catch$?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$1 proc near
.text:00004220                                         ; DATA XREF: .xdata$x:00004970o
.text:00004220                 mov     ecx, [ebp+8]
.text:00004223                 call    ?IsEmpty@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBE_NXZ ; CObjectVector<NArchive::NZip::CItemEx>::IsEmpty(void)
.text:00004228                 movzx   edx, al
.text:0000422B                 test    edx, edx
.text:0000422D                 jz      short loc_4243
.text:0000422F                 mov     dword ptr [ebp-28h], 1
.text:00004236                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:0000423D                 mov     eax, offset $LN12_2
.text:00004242                 retn
.text:00004243 ; ---------------------------------------------------------------------------
.text:00004243
.text:00004243 loc_4243:                               ; CODE XREF: __catch$?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$1+Dj
.text:00004243                 mov     eax, [ebp-14h]
.text:00004246                 mov     byte ptr [eax+7Dh], 1
.text:0000424A                 mov     dword ptr [ebp-18h], 0
.text:00004251                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00004258                 mov     eax, offset $LN14_2
.text:0000425D                 retn
.text:0000425D __catch$?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$1 endp
.text:0000425D
.text:0000425E
.text:0000425E ; =============== S U B R O U T I N E =======================================
.text:0000425E
.text:0000425E ; Attributes: noreturn
.text:0000425E
.text:0000425E __catch$?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$2 proc near
.text:0000425E                                         ; DATA XREF: .xdata$x:00004980o
.text:0000425E                 mov     ecx, [ebp-14h]
.text:00004261                 mov     byte ptr [ecx+28h], 0
.text:00004265                 push    0
.text:00004267                 push    0
.text:00004269                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:00004269 __catch$?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$2 endp
.text:00004269
.text:0000426E ; ---------------------------------------------------------------------------
.text:0000426E                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00004275                 mov     eax, offset $LN16_2
.text:0000427A                 retn
.text:0000427B ; ---------------------------------------------------------------------------
.text:0000427B ; START OF FUNCTION CHUNK FOR ?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z
.text:0000427B
.text:0000427B loc_427B:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+69j
.text:0000427B                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004282                 jmp     short loc_4286
.text:00004282 ; END OF FUNCTION CHUNK FOR ?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z
.text:00004284
.text:00004284 ; =============== S U B R O U T I N E =======================================
.text:00004284
.text:00004284
.text:00004284 $LN16_2         proc near               ; DATA XREF: .text:00004275o
.text:00004284                 jmp     short __tryend$?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$3
.text:00004284 $LN16_2         endp
.text:00004284
.text:00004286 ; ---------------------------------------------------------------------------
.text:00004286 ; START OF FUNCTION CHUNK FOR ?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z
.text:00004286
.text:00004286 loc_4286:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+E2j
.text:00004286                 jmp     short loc_428A
.text:00004286 ; END OF FUNCTION CHUNK FOR ?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z
.text:00004288 ; ---------------------------------------------------------------------------
.text:00004288
.text:00004288 $LN14_2:                                ; DATA XREF: __catch$?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$1+38o
.text:00004288                 jmp     short __tryend$?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$3
.text:0000428A ; ---------------------------------------------------------------------------
.text:0000428A ; START OF FUNCTION CHUNK FOR ?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z
.text:0000428A
.text:0000428A loc_428A:                               ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *):loc_4286j
.text:0000428A                 jmp     short __tryend$?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$3
.text:0000428A ; END OF FUNCTION CHUNK FOR ?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z
.text:0000428C ; ---------------------------------------------------------------------------
.text:0000428C
.text:0000428C $LN12_2:                                ; DATA XREF: __catch$?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$1+1Do
.text:0000428C                 mov     eax, [ebp-28h]
.text:0000428F                 jmp     short loc_42AD
.text:00004291 ; ---------------------------------------------------------------------------
.text:00004291 ; START OF FUNCTION CHUNK FOR ?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z
.text:00004291
.text:00004291 __tryend$?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$3:
.text:00004291                                         ; CODE XREF: $LN16_2j
.text:00004291                                         ; .text:$LN14_2j ...
.text:00004291                 mov     edx, [ebp+var_14]
.text:00004294                 mov     eax, [ebp+var_14]
.text:00004297                 mov     ecx, [eax+30h]
.text:0000429A                 mov     [edx+50h], ecx
.text:0000429D                 mov     eax, [eax+34h]
.text:000042A0                 mov     [edx+54h], eax
.text:000042A3                 mov     ecx, [ebp+var_14]
.text:000042A6                 mov     byte ptr [ecx+28h], 0
.text:000042AA                 mov     eax, [ebp+var_18]
.text:000042AD
.text:000042AD loc_42AD:                               ; CODE XREF: .text:0000428Fj
.text:000042AD                 push    edx
.text:000042AE                 mov     ecx, ebp
.text:000042B0                 push    eax
.text:000042B1                 lea     edx, $LN24
.text:000042B7                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000042BC                 pop     eax
.text:000042BD                 pop     edx
.text:000042BE                 mov     ecx, [ebp+var_C]
.text:000042C1                 mov     large fs:0, ecx
.text:000042C8                 pop     ecx
.text:000042C9                 pop     edi
.text:000042CA                 pop     esi
.text:000042CB                 pop     ebx
.text:000042CC                 add     esp, 2Ch
.text:000042CF                 cmp     ebp, esp
.text:000042D1                 call    __RTC_CheckEsp
.text:000042D6                 mov     esp, ebp
.text:000042D8                 pop     ebp
.text:000042D9                 retn    8
.text:000042D9 ; END OF FUNCTION CHUNK FOR ?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z
.text:000042D9 ; ---------------------------------------------------------------------------
.text:000042DC $LN24           dd 1                    ; DATA XREF: NArchive::NZip::CInArchive::ReadHeaders(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+111o
.text:000042E0                 dd offset $LN23
.text:000042E4 $LN23           dd 0FFFFFFE0h, 4        ; DATA XREF: .text:000042E0o
.text:000042EC                 dd offset $LN21_0
.text:000042F0 $LN21_0         dd 0CCCC0065h, 3 dup(0CCCCCCCCh) ; DATA XREF: .text:000042ECo
.text:00004300
.text:00004300 ; =============== S U B R O U T I N E =======================================
.text:00004300
.text:00004300 ; Attributes: bp-based frame
.text:00004300
.text:00004300 ; struct ISequentialInStream *__thiscall NArchive::NZip::CInArchive::CreateLimitedStream(NArchive::NZip::CInArchive *this, unsigned __int64, unsigned __int64)
.text:00004300                 public ?CreateLimitedStream@CInArchive@NZip@NArchive@@QAEPAUISequentialInStream@@_K0@Z
.text:00004300 ?CreateLimitedStream@CInArchive@NZip@NArchive@@QAEPAUISequentialInStream@@_K0@Z proc near
.text:00004300
.text:00004300 var_34          = dword ptr -34h
.text:00004300 var_30          = dword ptr -30h
.text:00004300 var_2C          = dword ptr -2Ch
.text:00004300 var_28          = dword ptr -28h
.text:00004300 var_24          = dword ptr -24h
.text:00004300 var_1C          = byte ptr -1Ch
.text:00004300 var_14          = dword ptr -14h
.text:00004300 var_10          = dword ptr -10h
.text:00004300 var_C           = dword ptr -0Ch
.text:00004300 var_4           = dword ptr -4
.text:00004300 arg_0           = qword ptr  8
.text:00004300 arg_8           = qword ptr  10h
.text:00004300
.text:00004300                 push    ebp
.text:00004301                 mov     ebp, esp
.text:00004303                 push    0FFFFFFFFh
.text:00004305                 push    offset __ehhandler$?CreateLimitedStream@CInArchive@NZip@NArchive@@QAEPAUISequentialInStream@@_K0@Z
.text:0000430A                 mov     eax, large fs:0
.text:00004310                 push    eax
.text:00004311                 sub     esp, 28h
.text:00004314                 push    esi
.text:00004315                 push    edi
.text:00004316                 push    ecx
.text:00004317                 lea     edi, [ebp+var_34]
.text:0000431A                 mov     ecx, 0Ah
.text:0000431F                 mov     eax, 0CCCCCCCCh
.text:00004324                 rep stosd
.text:00004326                 pop     ecx
.text:00004327                 mov     eax, dword ptr ds:___security_cookie
.text:0000432C                 xor     eax, ebp
.text:0000432E                 push    eax
.text:0000432F                 lea     eax, [ebp+var_C]
.text:00004332                 mov     large fs:0, eax
.text:00004338                 mov     [ebp+var_10], ecx
.text:0000433B                 push    28h ; '('       ; unsigned int
.text:0000433D                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00004342                 add     esp, 4
.text:00004345                 mov     [ebp+var_28], eax
.text:00004348                 mov     [ebp+var_4], 0
.text:0000434F                 cmp     [ebp+var_28], 0
.text:00004353                 jz      short loc_4362
.text:00004355                 mov     ecx, [ebp+var_28]
.text:00004358                 call    ??0CLimitedSequentialInStream@@QAE@XZ ; CLimitedSequentialInStream::CLimitedSequentialInStream(void)
.text:0000435D                 mov     [ebp+var_30], eax
.text:00004360                 jmp     short loc_4369
.text:00004362 ; ---------------------------------------------------------------------------
.text:00004362
.text:00004362 loc_4362:                               ; CODE XREF: NArchive::NZip::CInArchive::CreateLimitedStream(unsigned __int64,unsigned __int64)+53j
.text:00004362                 mov     [ebp+var_30], 0
.text:00004369
.text:00004369 loc_4369:                               ; CODE XREF: NArchive::NZip::CInArchive::CreateLimitedStream(unsigned __int64,unsigned __int64)+60j
.text:00004369                 mov     eax, [ebp+var_30]
.text:0000436C                 mov     [ebp+var_24], eax
.text:0000436F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004376                 mov     ecx, [ebp+var_24]
.text:00004379                 mov     [ebp+var_14], ecx
.text:0000437C                 mov     edx, [ebp+var_14]
.text:0000437F                 push    edx
.text:00004380                 lea     ecx, [ebp+var_1C]
.text:00004383                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(ISequentialInStream *)
.text:00004388                 mov     [ebp+var_4], 1
.text:0000438F                 mov     ecx, [ebp+var_10]
.text:00004392                 add     ecx, 80h ; 'Ç'
.text:00004398                 call    ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->(void)
.text:0000439D                 mov     [ebp+var_34], eax
.text:000043A0                 mov     esi, esp
.text:000043A2                 push    0
.text:000043A4                 push    0
.text:000043A6                 mov     eax, [ebp+var_10]
.text:000043A9                 mov     ecx, [eax+38h]
.text:000043AC                 add     ecx, dword ptr [ebp+arg_0]
.text:000043AF                 mov     edx, [eax+3Ch]
.text:000043B2                 adc     edx, dword ptr [ebp+arg_0+4]
.text:000043B5                 push    edx
.text:000043B6                 push    ecx
.text:000043B7                 mov     eax, [ebp+var_34]
.text:000043BA                 push    eax
.text:000043BB                 mov     ecx, [ebp+var_34]
.text:000043BE                 mov     edx, [ecx]
.text:000043C0                 mov     eax, [edx+10h]
.text:000043C3                 call    eax
.text:000043C5                 cmp     esi, esp
.text:000043C7                 call    __RTC_CheckEsp
.text:000043CC                 mov     ecx, [ebp+var_10]
.text:000043CF                 add     ecx, 80h ; 'Ç'
.text:000043D5                 call    ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *(void)
.text:000043DA                 push    eax             ; struct ISequentialInStream *
.text:000043DB                 mov     ecx, [ebp+var_14] ; this
.text:000043DE                 call    ?SetStream@CLimitedSequentialInStream@@QAEXPAUISequentialInStream@@@Z ; CLimitedSequentialInStream::SetStream(ISequentialInStream *)
.text:000043E3                 mov     ecx, dword ptr [ebp+arg_8+4]
.text:000043E6                 push    ecx
.text:000043E7                 mov     edx, dword ptr [ebp+arg_8]
.text:000043EA                 push    edx             ; unsigned __int64
.text:000043EB                 mov     ecx, [ebp+var_14] ; this
.text:000043EE                 call    ?Init@CLimitedSequentialInStream@@QAEX_K@Z ; CLimitedSequentialInStream::Init(unsigned __int64)
.text:000043F3                 lea     ecx, [ebp+var_1C]
.text:000043F6                 call    ?Detach@?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::Detach(void)
.text:000043FB                 mov     [ebp+var_2C], eax
.text:000043FE                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004405                 lea     ecx, [ebp+var_1C]
.text:00004408                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:0000440D                 mov     eax, [ebp+var_2C]
.text:00004410                 push    edx
.text:00004411                 mov     ecx, ebp
.text:00004413                 push    eax
.text:00004414                 lea     edx, $LN10_0
.text:0000441A                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000441F                 pop     eax
.text:00004420                 pop     edx
.text:00004421                 mov     ecx, [ebp+var_C]
.text:00004424                 mov     large fs:0, ecx
.text:0000442B                 pop     ecx
.text:0000442C                 pop     edi
.text:0000442D                 pop     esi
.text:0000442E                 add     esp, 34h
.text:00004431                 cmp     ebp, esp
.text:00004433                 call    __RTC_CheckEsp
.text:00004438                 mov     esp, ebp
.text:0000443A                 pop     ebp
.text:0000443B                 retn    10h
.text:0000443B ?CreateLimitedStream@CInArchive@NZip@NArchive@@QAEPAUISequentialInStream@@_K0@Z endp
.text:0000443B
.text:0000443B ; ---------------------------------------------------------------------------
.text:0000443E                 align 10h
.text:00004440 $LN10_0         dd 1                    ; DATA XREF: NArchive::NZip::CInArchive::CreateLimitedStream(unsigned __int64,unsigned __int64)+114o
.text:00004444                 dd offset $LN9_2
.text:00004448 $LN9_2          dd 0FFFFFFE4h, 4        ; DATA XREF: .text:00004444o
.text:00004450                 dd offset $LN7_3        ; "stream"
.text:00004454 $LN7_3          db 'stream',0           ; DATA XREF: .text:00004450o
.text:0000445B                 align 4
.text:0000445B _text           ends
.text:0000445B
.rtc$TMZ:0000445C ; ===========================================================================
.rtc$TMZ:0000445C
.rtc$TMZ:0000445C ; Segment type: Pure data
.rtc$TMZ:0000445C ; Segment permissions: Read
.rtc$TMZ:0000445C _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:0000445C                 assume cs:_rtc$TMZ
.rtc$TMZ:0000445C                 ;org 445Ch
.rtc$TMZ:0000445C ; COMDAT (pick any)
.rtc$TMZ:0000445C __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:0000445C _rtc$TMZ        ends
.rtc$TMZ:0000445C
.rtc$IMZ:00004460 ; ===========================================================================
.rtc$IMZ:00004460
.rtc$IMZ:00004460 ; Segment type: Pure data
.rtc$IMZ:00004460 ; Segment permissions: Read
.rtc$IMZ:00004460 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00004460                 assume cs:_rtc$IMZ
.rtc$IMZ:00004460                 ;org 4460h
.rtc$IMZ:00004460 ; COMDAT (pick any)
.rtc$IMZ:00004460 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00004460 _rtc$IMZ        ends
.rtc$IMZ:00004460
.text:00004464 ; ===========================================================================
.text:00004464
.text:00004464 ; Segment type: Pure code
.text:00004464 ; Segment permissions: Read/Execute
.text:00004464 _text           segment para public 'CODE' use32
.text:00004464                 assume cs:_text
.text:00004464                 ;org 4464h
.text:00004464 ; COMDAT (pick any)
.text:00004464                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004464
.text:00004464 ; =============== S U B R O U T I N E =======================================
.text:00004464
.text:00004464 ; Attributes: bp-based frame
.text:00004464
.text:00004464 ; bool __thiscall NArchive::NZip::CEcd::IsEmptyArc(NArchive::NZip::CEcd *__hidden this)
.text:00004464                 public ?IsEmptyArc@CEcd@NZip@NArchive@@QAE_NXZ
.text:00004464 ?IsEmptyArc@CEcd@NZip@NArchive@@QAE_NXZ proc near
.text:00004464                                         ; CODE XREF: IsArc_Zip(x,x)+98p
.text:00004464                                         ; NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+113p
.text:00004464
.text:00004464 var_8           = dword ptr -8
.text:00004464 var_4           = dword ptr -4
.text:00004464
.text:00004464                 push    ebp
.text:00004465                 mov     ebp, esp
.text:00004467                 sub     esp, 8
.text:0000446A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004471                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004478                 mov     [ebp+var_4], ecx
.text:0000447B                 mov     eax, [ebp+var_4]
.text:0000447E                 movzx   ecx, word ptr [eax]
.text:00004481                 test    ecx, ecx
.text:00004483                 jnz     short loc_44C1
.text:00004485                 mov     edx, [ebp+var_4]
.text:00004488                 movzx   eax, word ptr [edx+2]
.text:0000448C                 test    eax, eax
.text:0000448E                 jnz     short loc_44C1
.text:00004490                 mov     ecx, [ebp+var_4]
.text:00004493                 movzx   edx, word ptr [ecx+4]
.text:00004497                 test    edx, edx
.text:00004499                 jnz     short loc_44C1
.text:0000449B                 mov     eax, [ebp+var_4]
.text:0000449E                 movzx   ecx, word ptr [eax+6]
.text:000044A2                 test    ecx, ecx
.text:000044A4                 jnz     short loc_44C1
.text:000044A6                 mov     edx, [ebp+var_4]
.text:000044A9                 cmp     dword ptr [edx+8], 0
.text:000044AD                 jnz     short loc_44C1
.text:000044AF                 mov     eax, [ebp+var_4]
.text:000044B2                 cmp     dword ptr [eax+0Ch], 0
.text:000044B6                 jnz     short loc_44C1
.text:000044B8                 mov     [ebp+var_8], 1
.text:000044BF                 jmp     short loc_44C8
.text:000044C1 ; ---------------------------------------------------------------------------
.text:000044C1
.text:000044C1 loc_44C1:                               ; CODE XREF: NArchive::NZip::CEcd::IsEmptyArc(void)+1Fj
.text:000044C1                                         ; NArchive::NZip::CEcd::IsEmptyArc(void)+2Aj ...
.text:000044C1                 mov     [ebp+var_8], 0
.text:000044C8
.text:000044C8 loc_44C8:                               ; CODE XREF: NArchive::NZip::CEcd::IsEmptyArc(void)+5Bj
.text:000044C8                 mov     al, byte ptr [ebp+var_8]
.text:000044CB                 mov     esp, ebp
.text:000044CD                 pop     ebp
.text:000044CE                 retn
.text:000044CE ?IsEmptyArc@CEcd@NZip@NArchive@@QAE_NXZ endp
.text:000044CE
.text:000044CE ; ---------------------------------------------------------------------------
.text:000044CF                 align 10h
.text:000044CF _text           ends
.text:000044CF
.text$x:000044D0 ; ===========================================================================
.text$x:000044D0
.text$x:000044D0 ; Segment type: Pure code
.text$x:000044D0 ; Segment permissions: Read/Execute
.text$x:000044D0 _text$x         segment para public 'CODE' use32
.text$x:000044D0                 assume cs:_text$x
.text$x:000044D0                 ;org 44D0h
.text$x:000044D0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:000044D0
.text$x:000044D0 ; =============== S U B R O U T I N E =======================================
.text$x:000044D0
.text$x:000044D0
.text$x:000044D0 __unwindfunclet$?FindAndReadMarker@CInArchive@NZip@NArchive@@AAEJPAUIInStream@@PB_K@Z$0 proc near
.text$x:000044D0                                         ; DATA XREF: .xdata$x:00004680o
.text$x:000044D0                 lea     ecx, [ebp-50h]
.text$x:000044D3                 jmp     ??1?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::~CObjArray<uchar>(void)
.text$x:000044D3 __unwindfunclet$?FindAndReadMarker@CInArchive@NZip@NArchive@@AAEJPAUIInStream@@PB_K@Z$0 endp
.text$x:000044D3
.text$x:000044D8
.text$x:000044D8 ; =============== S U B R O U T I N E =======================================
.text$x:000044D8
.text$x:000044D8
.text$x:000044D8 __ehhandler$?FindAndReadMarker@CInArchive@NZip@NArchive@@AAEJPAUIInStream@@PB_K@Z proc near
.text$x:000044D8                                         ; DATA XREF: NArchive::NZip::CInArchive::FindAndReadMarker(IInStream *,unsigned __int64 const *)+5o
.text$x:000044D8
.text$x:000044D8 arg_4           = dword ptr  8
.text$x:000044D8
.text$x:000044D8                 mov     edx, [esp+arg_4]
.text$x:000044DC                 lea     eax, [edx+0Ch]
.text$x:000044DF                 mov     ecx, [edx-0ACh]
.text$x:000044E5                 xor     ecx, eax
.text$x:000044E7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000044EC                 mov     eax, offset __ehfuncinfo$?FindAndReadMarker@CInArchive@NZip@NArchive@@AAEJPAUIInStream@@PB_K@Z
.text$x:000044F1                 jmp     ___CxxFrameHandler3
.text$x:000044F1 __ehhandler$?FindAndReadMarker@CInArchive@NZip@NArchive@@AAEJPAUIInStream@@PB_K@Z endp
.text$x:000044F1
.text$x:000044F6
.text$x:000044F6 ; =============== S U B R O U T I N E =======================================
.text$x:000044F6
.text$x:000044F6
.text$x:000044F6 __ehhandler$?ReadBytes@CInArchive@NZip@NArchive@@AAEJPAXIPAI@Z proc near
.text$x:000044F6                                         ; DATA XREF: NArchive::NZip::CInArchive::ReadBytes(void *,uint,uint *)+5o
.text$x:000044F6
.text$x:000044F6 arg_4           = dword ptr  8
.text$x:000044F6
.text$x:000044F6                 mov     edx, [esp+arg_4]
.text$x:000044FA                 lea     eax, [edx+0Ch]
.text$x:000044FD                 mov     ecx, [edx-3Ch]
.text$x:00004500                 xor     ecx, eax
.text$x:00004502                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004507                 mov     eax, offset __ehfuncinfo$?ReadBytes@CInArchive@NZip@NArchive@@AAEJPAXIPAI@Z
.text$x:0000450C                 jmp     ___CxxFrameHandler3
.text$x:0000450C __ehhandler$?ReadBytes@CInArchive@NZip@NArchive@@AAEJPAXIPAI@Z endp
.text$x:0000450C
.text$x:00004511
.text$x:00004511 ; =============== S U B R O U T I N E =======================================
.text$x:00004511
.text$x:00004511
.text$x:00004511 __unwindfunclet$?ReadExtra@CInArchive@NZip@NArchive@@AAE_NIAAUCExtraBlock@23@AA_K11AAI@Z$0 proc near
.text$x:00004511                                         ; DATA XREF: .xdata$x:00004704o
.text$x:00004511                 lea     ecx, [ebp-24h]  ; this
.text$x:00004514                 jmp     ??1CExtraSubBlock@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CExtraSubBlock::~CExtraSubBlock(void)
.text$x:00004514 __unwindfunclet$?ReadExtra@CInArchive@NZip@NArchive@@AAE_NIAAUCExtraBlock@23@AA_K11AAI@Z$0 endp
.text$x:00004514
.text$x:00004519
.text$x:00004519 ; =============== S U B R O U T I N E =======================================
.text$x:00004519
.text$x:00004519
.text$x:00004519 __ehhandler$?ReadExtra@CInArchive@NZip@NArchive@@AAE_NIAAUCExtraBlock@23@AA_K11AAI@Z proc near
.text$x:00004519                                         ; DATA XREF: NArchive::NZip::CInArchive::ReadExtra(uint,NArchive::NZip::CExtraBlock &,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &,uint &)+5o
.text$x:00004519
.text$x:00004519 arg_4           = dword ptr  8
.text$x:00004519
.text$x:00004519                 mov     edx, [esp+arg_4]
.text$x:0000451D                 lea     eax, [edx+0Ch]
.text$x:00004520                 mov     ecx, [edx-38h]
.text$x:00004523                 xor     ecx, eax
.text$x:00004525                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000452A                 mov     eax, offset __ehfuncinfo$?ReadExtra@CInArchive@NZip@NArchive@@AAE_NIAAUCExtraBlock@23@AA_K11AAI@Z
.text$x:0000452F                 jmp     ___CxxFrameHandler3
.text$x:0000452F __ehhandler$?ReadExtra@CInArchive@NZip@NArchive@@AAE_NIAAUCExtraBlock@23@AA_K11AAI@Z endp
.text$x:0000452F
.text$x:00004534
.text$x:00004534 ; =============== S U B R O U T I N E =======================================
.text$x:00004534
.text$x:00004534
.text$x:00004534 __unwindfunclet$?ReadLocalItemAfterCdItem@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z$2 proc near
.text$x:00004534                                         ; DATA XREF: .xdata$x:0000475Co
.text$x:00004534                 lea     ecx, [ebp-8Ch]  ; this
.text$x:0000453A                 jmp     ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text$x:0000453A __unwindfunclet$?ReadLocalItemAfterCdItem@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z$2 endp
.text$x:0000453A
.text$x:0000453F
.text$x:0000453F ; =============== S U B R O U T I N E =======================================
.text$x:0000453F
.text$x:0000453F
.text$x:0000453F __ehhandler$?ReadLocalItemAfterCdItem@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z proc near
.text$x:0000453F                                         ; DATA XREF: NArchive::NZip::CInArchive::ReadLocalItemAfterCdItem(NArchive::NZip::CItemEx &)+5o
.text$x:0000453F
.text$x:0000453F arg_4           = dword ptr  8
.text$x:0000453F
.text$x:0000453F                 mov     edx, [esp+arg_4]
.text$x:00004543                 lea     eax, [edx+0Ch]
.text$x:00004546                 mov     ecx, [edx-0B4h]
.text$x:0000454C                 xor     ecx, eax
.text$x:0000454E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004553                 mov     eax, offset __ehfuncinfo$?ReadLocalItemAfterCdItem@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z
.text$x:00004558                 jmp     ___CxxFrameHandler3
.text$x:00004558 __ehhandler$?ReadLocalItemAfterCdItem@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z endp
.text$x:00004558
.text$x:0000455D
.text$x:0000455D ; =============== S U B R O U T I N E =======================================
.text$x:0000455D
.text$x:0000455D
.text$x:0000455D __ehhandler$?ReadLocalItemAfterCdItemFull@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z proc near
.text$x:0000455D                                         ; DATA XREF: NArchive::NZip::CInArchive::ReadLocalItemAfterCdItemFull(NArchive::NZip::CItemEx &)+5o
.text$x:0000455D
.text$x:0000455D arg_4           = dword ptr  8
.text$x:0000455D
.text$x:0000455D                 mov     edx, [esp+arg_4]
.text$x:00004561                 lea     eax, [edx+0Ch]
.text$x:00004564                 mov     ecx, [edx-64h]
.text$x:00004567                 xor     ecx, eax
.text$x:00004569                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000456E                 mov     eax, offset __ehfuncinfo$?ReadLocalItemAfterCdItemFull@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z
.text$x:00004573                 jmp     ___CxxFrameHandler3
.text$x:00004573 __ehhandler$?ReadLocalItemAfterCdItemFull@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z endp
.text$x:00004573
.text$x:00004578
.text$x:00004578 ; =============== S U B R O U T I N E =======================================
.text$x:00004578
.text$x:00004578
.text$x:00004578 __unwindfunclet$?FindCd@CInArchive@NZip@NArchive@@AAEJAAUCCdInfo@23@@Z$0 proc near
.text$x:00004578                                         ; DATA XREF: .xdata$x:000047E8o
.text$x:00004578                 lea     ecx, [ebp-34h]
.text$x:0000457B                 jmp     ??1?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::~CObjArray<uchar>(void)
.text$x:0000457B __unwindfunclet$?FindCd@CInArchive@NZip@NArchive@@AAEJAAUCCdInfo@23@@Z$0 endp
.text$x:0000457B
.text$x:00004580
.text$x:00004580 ; =============== S U B R O U T I N E =======================================
.text$x:00004580
.text$x:00004580
.text$x:00004580 __ehhandler$?FindCd@CInArchive@NZip@NArchive@@AAEJAAUCCdInfo@23@@Z proc near
.text$x:00004580                                         ; DATA XREF: NArchive::NZip::CInArchive::FindCd(NArchive::NZip::CCdInfo &)+5o
.text$x:00004580
.text$x:00004580 arg_4           = dword ptr  8
.text$x:00004580
.text$x:00004580                 mov     edx, [esp+arg_4]
.text$x:00004584                 lea     eax, [edx+0Ch]
.text$x:00004587                 mov     ecx, [edx-0C0h]
.text$x:0000458D                 xor     ecx, eax
.text$x:0000458F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004594                 mov     eax, offset __ehfuncinfo$?FindCd@CInArchive@NZip@NArchive@@AAEJAAUCCdInfo@23@@Z
.text$x:00004599                 jmp     ___CxxFrameHandler3
.text$x:00004599 __ehhandler$?FindCd@CInArchive@NZip@NArchive@@AAEJAAUCCdInfo@23@@Z endp
.text$x:00004599
.text$x:0000459E
.text$x:0000459E ; =============== S U B R O U T I N E =======================================
.text$x:0000459E
.text$x:0000459E
.text$x:0000459E __unwindfunclet$?TryReadCd@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@_K1PAUCProgressVirt@23@@Z$0 proc near
.text$x:0000459E                                         ; DATA XREF: .xdata$x:00004814o
.text$x:0000459E                 lea     ecx, [ebp-80h]  ; this
.text$x:000045A1                 jmp     ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text$x:000045A1 __unwindfunclet$?TryReadCd@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@_K1PAUCProgressVirt@23@@Z$0 endp
.text$x:000045A1
.text$x:000045A6
.text$x:000045A6 ; =============== S U B R O U T I N E =======================================
.text$x:000045A6
.text$x:000045A6
.text$x:000045A6 __ehhandler$?TryReadCd@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@_K1PAUCProgressVirt@23@@Z proc near
.text$x:000045A6                                         ; DATA XREF: NArchive::NZip::CInArchive::TryReadCd(CObjectVector<NArchive::NZip::CItemEx> &,unsigned __int64,unsigned __int64,NArchive::NZip::CProgressVirt *)+5o
.text$x:000045A6
.text$x:000045A6 arg_4           = dword ptr  8
.text$x:000045A6
.text$x:000045A6                 mov     edx, [esp+arg_4]
.text$x:000045AA                 lea     eax, [edx+0Ch]
.text$x:000045AD                 mov     ecx, [edx-0B0h]
.text$x:000045B3                 xor     ecx, eax
.text$x:000045B5                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000045BA                 mov     eax, offset __ehfuncinfo$?TryReadCd@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@_K1PAUCProgressVirt@23@@Z
.text$x:000045BF                 jmp     ___CxxFrameHandler3
.text$x:000045BF __ehhandler$?TryReadCd@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@_K1PAUCProgressVirt@23@@Z endp
.text$x:000045BF
.text$x:000045C4
.text$x:000045C4 ; =============== S U B R O U T I N E =======================================
.text$x:000045C4
.text$x:000045C4
.text$x:000045C4 __unwindfunclet$?ReadLocals@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$2 proc near
.text$x:000045C4                                         ; DATA XREF: .xdata$x:00004864o
.text$x:000045C4                 lea     ecx, [ebp-80h]  ; this
.text$x:000045C7                 jmp     ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text$x:000045C7 __unwindfunclet$?ReadLocals@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$2 endp
.text$x:000045C7
.text$x:000045CC
.text$x:000045CC ; =============== S U B R O U T I N E =======================================
.text$x:000045CC
.text$x:000045CC
.text$x:000045CC __ehhandler$?ReadLocals@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z proc near
.text$x:000045CC                                         ; DATA XREF: NArchive::NZip::CInArchive::ReadLocals(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+5o
.text$x:000045CC
.text$x:000045CC arg_4           = dword ptr  8
.text$x:000045CC
.text$x:000045CC                 mov     edx, [esp+arg_4]
.text$x:000045D0                 lea     eax, [edx+0Ch]
.text$x:000045D3                 mov     ecx, [edx-0A8h]
.text$x:000045D9                 xor     ecx, eax
.text$x:000045DB                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000045E0                 mov     eax, offset __ehfuncinfo$?ReadLocals@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z
.text$x:000045E5                 jmp     ___CxxFrameHandler3
.text$x:000045E5 __ehhandler$?ReadLocals@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z endp
.text$x:000045E5
.text$x:000045EA
.text$x:000045EA ; =============== S U B R O U T I N E =======================================
.text$x:000045EA
.text$x:000045EA
.text$x:000045EA __unwindfunclet$?ReadHeaders2@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$2 proc near
.text$x:000045EA                                         ; DATA XREF: .xdata$x:000048E8o
.text$x:000045EA                 lea     ecx, [ebp-0F8h] ; this
.text$x:000045F0                 jmp     ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text$x:000045F0 __unwindfunclet$?ReadHeaders2@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$2 endp
.text$x:000045F0
.text$x:000045F5
.text$x:000045F5 ; =============== S U B R O U T I N E =======================================
.text$x:000045F5
.text$x:000045F5
.text$x:000045F5 __unwindfunclet$?ReadHeaders2@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$3 proc near
.text$x:000045F5                                         ; DATA XREF: .xdata$x:00004900o
.text$x:000045F5                 lea     ecx, [ebp-110h]
.text$x:000045FB                 jmp     ??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemEx>::~CObjectVector<NArchive::NZip::CItemEx>(void)
.text$x:000045FB __unwindfunclet$?ReadHeaders2@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$3 endp
.text$x:000045FB
.text$x:00004600
.text$x:00004600 ; =============== S U B R O U T I N E =======================================
.text$x:00004600
.text$x:00004600
.text$x:00004600 __unwindfunclet$?ReadHeaders2@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$4 proc near
.text$x:00004600                                         ; DATA XREF: .xdata$x:00004908o
.text$x:00004600                 lea     ecx, [ebp-190h] ; this
.text$x:00004606                 jmp     ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text$x:00004606 __unwindfunclet$?ReadHeaders2@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$4 endp
.text$x:00004606
.text$x:0000460B
.text$x:0000460B ; =============== S U B R O U T I N E =======================================
.text$x:0000460B
.text$x:0000460B
.text$x:0000460B __ehhandler$?ReadHeaders2@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z proc near
.text$x:0000460B                                         ; DATA XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+5o
.text$x:0000460B
.text$x:0000460B arg_4           = dword ptr  8
.text$x:0000460B
.text$x:0000460B                 mov     edx, [esp+arg_4]
.text$x:0000460F                 lea     eax, [edx+0Ch]
.text$x:00004612                 mov     ecx, [edx-30Ch]
.text$x:00004618                 xor     ecx, eax
.text$x:0000461A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000461F                 mov     ecx, [edx-8]
.text$x:00004622                 xor     ecx, eax
.text$x:00004624                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004629                 mov     eax, offset __ehfuncinfo$?ReadHeaders2@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z
.text$x:0000462E                 jmp     ___CxxFrameHandler3
.text$x:0000462E __ehhandler$?ReadHeaders2@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z endp
.text$x:0000462E
.text$x:00004633
.text$x:00004633 ; =============== S U B R O U T I N E =======================================
.text$x:00004633
.text$x:00004633
.text$x:00004633 __ehhandler$?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z proc near
.text$x:00004633                                         ; DATA XREF: NArchive::NZip::CInArchive::ReadHeaders(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+5o
.text$x:00004633
.text$x:00004633 arg_4           = dword ptr  8
.text$x:00004633
.text$x:00004633                 mov     edx, [esp+arg_4]
.text$x:00004637                 lea     eax, [edx+0Ch]
.text$x:0000463A                 mov     ecx, [edx-30h]
.text$x:0000463D                 xor     ecx, eax
.text$x:0000463F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004644                 mov     eax, offset __ehfuncinfo$?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z
.text$x:00004649                 jmp     ___CxxFrameHandler3
.text$x:00004649 __ehhandler$?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z endp
.text$x:00004649
.text$x:0000464E
.text$x:0000464E ; =============== S U B R O U T I N E =======================================
.text$x:0000464E
.text$x:0000464E
.text$x:0000464E __unwindfunclet$?CreateLimitedStream@CInArchive@NZip@NArchive@@QAEPAUISequentialInStream@@_K0@Z$0 proc near
.text$x:0000464E                                         ; DATA XREF: .xdata$x:00004988o
.text$x:0000464E                 mov     eax, [ebp-28h]
.text$x:00004651                 push    eax             ; void *
.text$x:00004652                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00004657                 pop     ecx
.text$x:00004658                 retn
.text$x:00004658 __unwindfunclet$?CreateLimitedStream@CInArchive@NZip@NArchive@@QAEPAUISequentialInStream@@_K0@Z$0 endp
.text$x:00004658
.text$x:00004659
.text$x:00004659 ; =============== S U B R O U T I N E =======================================
.text$x:00004659
.text$x:00004659
.text$x:00004659 __unwindfunclet$?CreateLimitedStream@CInArchive@NZip@NArchive@@QAEPAUISequentialInStream@@_K0@Z$1 proc near
.text$x:00004659                                         ; DATA XREF: .xdata$x:00004990o
.text$x:00004659                 lea     ecx, [ebp-1Ch]
.text$x:0000465C                 jmp     ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text$x:0000465C __unwindfunclet$?CreateLimitedStream@CInArchive@NZip@NArchive@@QAEPAUISequentialInStream@@_K0@Z$1 endp
.text$x:0000465C
.text$x:00004661
.text$x:00004661 ; =============== S U B R O U T I N E =======================================
.text$x:00004661
.text$x:00004661
.text$x:00004661 __ehhandler$?CreateLimitedStream@CInArchive@NZip@NArchive@@QAEPAUISequentialInStream@@_K0@Z proc near
.text$x:00004661                                         ; DATA XREF: NArchive::NZip::CInArchive::CreateLimitedStream(unsigned __int64,unsigned __int64)+5o
.text$x:00004661
.text$x:00004661 arg_4           = dword ptr  8
.text$x:00004661
.text$x:00004661                 mov     edx, [esp+arg_4]
.text$x:00004665                 lea     eax, [edx+0Ch]
.text$x:00004668                 mov     ecx, [edx-34h]
.text$x:0000466B                 xor     ecx, eax
.text$x:0000466D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004672                 mov     eax, offset __ehfuncinfo$?CreateLimitedStream@CInArchive@NZip@NArchive@@QAEPAUISequentialInStream@@_K0@Z
.text$x:00004677                 jmp     ___CxxFrameHandler3
.text$x:00004677 __ehhandler$?CreateLimitedStream@CInArchive@NZip@NArchive@@QAEPAUISequentialInStream@@_K0@Z endp
.text$x:00004677
.text$x:00004677 _text$x         ends
.text$x:00004677
.xdata$x:0000467C ; ===========================================================================
.xdata$x:0000467C
.xdata$x:0000467C ; Segment type: Pure data
.xdata$x:0000467C ; Segment permissions: Read
.xdata$x:0000467C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000467C                 assume cs:_xdata$x
.xdata$x:0000467C                 ;org 467Ch
.xdata$x:0000467C __unwindtable$?FindAndReadMarker@CInArchive@NZip@NArchive@@AAEJPAUIInStream@@PB_K@Z db 0FFh
.xdata$x:0000467C                                         ; DATA XREF: .xdata$x:0000468Co
.xdata$x:0000467D                 db 0FFh
.xdata$x:0000467E                 db 0FFh
.xdata$x:0000467F                 db 0FFh
.xdata$x:00004680                 dd offset __unwindfunclet$?FindAndReadMarker@CInArchive@NZip@NArchive@@AAEJPAUIInStream@@PB_K@Z$0
.xdata$x:00004684 __ehfuncinfo$?FindAndReadMarker@CInArchive@NZip@NArchive@@AAEJPAUIInStream@@PB_K@Z db  22h ; "
.xdata$x:00004684                                         ; DATA XREF: __ehhandler$?FindAndReadMarker@CInArchive@NZip@NArchive@@AAEJPAUIInStream@@PB_K@Z+14o
.xdata$x:00004685                 db    5
.xdata$x:00004686                 db  93h ; ô
.xdata$x:00004687                 db  19h
.xdata$x:00004688                 db    1
.xdata$x:00004689                 db    0
.xdata$x:0000468A                 db    0
.xdata$x:0000468B                 db    0
.xdata$x:0000468C                 dd offset __unwindtable$?FindAndReadMarker@CInArchive@NZip@NArchive@@AAEJPAUIInStream@@PB_K@Z
.xdata$x:00004690                 db    0
.xdata$x:00004691                 db    0
.xdata$x:00004692                 db    0
.xdata$x:00004693                 db    0
.xdata$x:00004694                 db    0
.xdata$x:00004695                 db    0
.xdata$x:00004696                 db    0
.xdata$x:00004697                 db    0
.xdata$x:00004698                 db    0
.xdata$x:00004699                 db    0
.xdata$x:0000469A                 db    0
.xdata$x:0000469B                 db    0
.xdata$x:0000469C                 db    0
.xdata$x:0000469D                 db    0
.xdata$x:0000469E                 db    0
.xdata$x:0000469F                 db    0
.xdata$x:000046A0                 db    0
.xdata$x:000046A1                 db    0
.xdata$x:000046A2                 db    0
.xdata$x:000046A3                 db    0
.xdata$x:000046A4                 db    1
.xdata$x:000046A5                 db    0
.xdata$x:000046A6                 db    0
.xdata$x:000046A7                 db    0
.xdata$x:000046A8 __catchsym$?ReadBytes@CInArchive@NZip@NArchive@@AAEJPAXIPAI@Z$2 db    9
.xdata$x:000046A8                                         ; DATA XREF: .xdata$x:000046D8o
.xdata$x:000046A9                 db    0
.xdata$x:000046AA                 db    0
.xdata$x:000046AB                 db    0
.xdata$x:000046AC                 dd offset ??_R0?AUCInBufferException@@@8 ; CInBufferException `RTTI Type Descriptor'
.xdata$x:000046B0                 db 0D4h ; +
.xdata$x:000046B1                 db 0FFh
.xdata$x:000046B2                 db 0FFh
.xdata$x:000046B3                 db 0FFh
.xdata$x:000046B4                 dd offset __catch$?ReadBytes@CInArchive@NZip@NArchive@@AAEJPAXIPAI@Z$0
.xdata$x:000046B8 __unwindtable$?ReadBytes@CInArchive@NZip@NArchive@@AAEJPAXIPAI@Z db 0FFh
.xdata$x:000046B8                                         ; DATA XREF: .xdata$x:000046E4o
.xdata$x:000046B9                 db 0FFh
.xdata$x:000046BA                 db 0FFh
.xdata$x:000046BB                 db 0FFh
.xdata$x:000046BC                 db    0
.xdata$x:000046BD                 db    0
.xdata$x:000046BE                 db    0
.xdata$x:000046BF                 db    0
.xdata$x:000046C0                 db 0FFh
.xdata$x:000046C1                 db 0FFh
.xdata$x:000046C2                 db 0FFh
.xdata$x:000046C3                 db 0FFh
.xdata$x:000046C4                 db    0
.xdata$x:000046C5                 db    0
.xdata$x:000046C6                 db    0
.xdata$x:000046C7                 db    0
.xdata$x:000046C8 __tryblocktable$?ReadBytes@CInArchive@NZip@NArchive@@AAEJPAXIPAI@Z db    0
.xdata$x:000046C8                                         ; DATA XREF: .xdata$x:000046ECo
.xdata$x:000046C9                 db    0
.xdata$x:000046CA                 db    0
.xdata$x:000046CB                 db    0
.xdata$x:000046CC                 db    0
.xdata$x:000046CD                 db    0
.xdata$x:000046CE                 db    0
.xdata$x:000046CF                 db    0
.xdata$x:000046D0                 db    1
.xdata$x:000046D1                 db    0
.xdata$x:000046D2                 db    0
.xdata$x:000046D3                 db    0
.xdata$x:000046D4                 db    1
.xdata$x:000046D5                 db    0
.xdata$x:000046D6                 db    0
.xdata$x:000046D7                 db    0
.xdata$x:000046D8                 dd offset __catchsym$?ReadBytes@CInArchive@NZip@NArchive@@AAEJPAXIPAI@Z$2
.xdata$x:000046DC __ehfuncinfo$?ReadBytes@CInArchive@NZip@NArchive@@AAEJPAXIPAI@Z db  22h ; "
.xdata$x:000046DC                                         ; DATA XREF: __ehhandler$?ReadBytes@CInArchive@NZip@NArchive@@AAEJPAXIPAI@Z+11o
.xdata$x:000046DD                 db    5
.xdata$x:000046DE                 db  93h ; ô
.xdata$x:000046DF                 db  19h
.xdata$x:000046E0                 db    2
.xdata$x:000046E1                 db    0
.xdata$x:000046E2                 db    0
.xdata$x:000046E3                 db    0
.xdata$x:000046E4                 dd offset __unwindtable$?ReadBytes@CInArchive@NZip@NArchive@@AAEJPAXIPAI@Z
.xdata$x:000046E8                 db    1
.xdata$x:000046E9                 db    0
.xdata$x:000046EA                 db    0
.xdata$x:000046EB                 db    0
.xdata$x:000046EC                 dd offset __tryblocktable$?ReadBytes@CInArchive@NZip@NArchive@@AAEJPAXIPAI@Z
.xdata$x:000046F0                 db    0
.xdata$x:000046F1                 db    0
.xdata$x:000046F2                 db    0
.xdata$x:000046F3                 db    0
.xdata$x:000046F4                 db    0
.xdata$x:000046F5                 db    0
.xdata$x:000046F6                 db    0
.xdata$x:000046F7                 db    0
.xdata$x:000046F8                 db    0
.xdata$x:000046F9                 db    0
.xdata$x:000046FA                 db    0
.xdata$x:000046FB                 db    0
.xdata$x:000046FC                 db    1
.xdata$x:000046FD                 db    0
.xdata$x:000046FE                 db    0
.xdata$x:000046FF                 db    0
.xdata$x:00004700 __unwindtable$?ReadExtra@CInArchive@NZip@NArchive@@AAE_NIAAUCExtraBlock@23@AA_K11AAI@Z db 0FFh
.xdata$x:00004700                                         ; DATA XREF: .xdata$x:00004710o
.xdata$x:00004701                 db 0FFh
.xdata$x:00004702                 db 0FFh
.xdata$x:00004703                 db 0FFh
.xdata$x:00004704                 dd offset __unwindfunclet$?ReadExtra@CInArchive@NZip@NArchive@@AAE_NIAAUCExtraBlock@23@AA_K11AAI@Z$0
.xdata$x:00004708 __ehfuncinfo$?ReadExtra@CInArchive@NZip@NArchive@@AAE_NIAAUCExtraBlock@23@AA_K11AAI@Z db  22h ; "
.xdata$x:00004708                                         ; DATA XREF: __ehhandler$?ReadExtra@CInArchive@NZip@NArchive@@AAE_NIAAUCExtraBlock@23@AA_K11AAI@Z+11o
.xdata$x:00004709                 db    5
.xdata$x:0000470A                 db  93h ; ô
.xdata$x:0000470B                 db  19h
.xdata$x:0000470C                 db    1
.xdata$x:0000470D                 db    0
.xdata$x:0000470E                 db    0
.xdata$x:0000470F                 db    0
.xdata$x:00004710                 dd offset __unwindtable$?ReadExtra@CInArchive@NZip@NArchive@@AAE_NIAAUCExtraBlock@23@AA_K11AAI@Z
.xdata$x:00004714                 db    0
.xdata$x:00004715                 db    0
.xdata$x:00004716                 db    0
.xdata$x:00004717                 db    0
.xdata$x:00004718                 db    0
.xdata$x:00004719                 db    0
.xdata$x:0000471A                 db    0
.xdata$x:0000471B                 db    0
.xdata$x:0000471C                 db    0
.xdata$x:0000471D                 db    0
.xdata$x:0000471E                 db    0
.xdata$x:0000471F                 db    0
.xdata$x:00004720                 db    0
.xdata$x:00004721                 db    0
.xdata$x:00004722                 db    0
.xdata$x:00004723                 db    0
.xdata$x:00004724                 db    0
.xdata$x:00004725                 db    0
.xdata$x:00004726                 db    0
.xdata$x:00004727                 db    0
.xdata$x:00004728                 db    1
.xdata$x:00004729                 db    0
.xdata$x:0000472A                 db    0
.xdata$x:0000472B                 db    0
.xdata$x:0000472C __catchsym$?ReadLocalItemAfterCdItem@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z$3 dd offset loc_40
.xdata$x:0000472C                                         ; DATA XREF: .xdata$x:0000474Co
.xdata$x:00004730                 db    0
.xdata$x:00004731                 db    0
.xdata$x:00004732                 db    0
.xdata$x:00004733                 db    0
.xdata$x:00004734                 db    0
.xdata$x:00004735                 db    0
.xdata$x:00004736                 db    0
.xdata$x:00004737                 db    0
.xdata$x:00004738                 dd offset __catch$?ReadLocalItemAfterCdItem@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z$0
.xdata$x:0000473C __tryblocktable$?ReadLocalItemAfterCdItem@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z db    0
.xdata$x:0000473C                                         ; DATA XREF: .xdata$x:00004778o
.xdata$x:0000473D                 db    0
.xdata$x:0000473E                 db    0
.xdata$x:0000473F                 db    0
.xdata$x:00004740                 db    1
.xdata$x:00004741                 db    0
.xdata$x:00004742                 db    0
.xdata$x:00004743                 db    0
.xdata$x:00004744                 db    2
.xdata$x:00004745                 db    0
.xdata$x:00004746                 db    0
.xdata$x:00004747                 db    0
.xdata$x:00004748                 db    1
.xdata$x:00004749                 db    0
.xdata$x:0000474A                 db    0
.xdata$x:0000474B                 db    0
.xdata$x:0000474C                 dd offset __catchsym$?ReadLocalItemAfterCdItem@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z$3
.xdata$x:00004750 __unwindtable$?ReadLocalItemAfterCdItem@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z db 0FFh
.xdata$x:00004750                                         ; DATA XREF: .xdata$x:00004770o
.xdata$x:00004751                 db 0FFh
.xdata$x:00004752                 db 0FFh
.xdata$x:00004753                 db 0FFh
.xdata$x:00004754                 db    0
.xdata$x:00004755                 db    0
.xdata$x:00004756                 db    0
.xdata$x:00004757                 db    0
.xdata$x:00004758                 db    0
.xdata$x:00004759                 db    0
.xdata$x:0000475A                 db    0
.xdata$x:0000475B                 db    0
.xdata$x:0000475C                 dd offset __unwindfunclet$?ReadLocalItemAfterCdItem@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z$2
.xdata$x:00004760                 db 0FFh
.xdata$x:00004761                 db 0FFh
.xdata$x:00004762                 db 0FFh
.xdata$x:00004763                 db 0FFh
.xdata$x:00004764                 db    0
.xdata$x:00004765                 db    0
.xdata$x:00004766                 db    0
.xdata$x:00004767                 db    0
.xdata$x:00004768 __ehfuncinfo$?ReadLocalItemAfterCdItem@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z db  22h ; "
.xdata$x:00004768                                         ; DATA XREF: __ehhandler$?ReadLocalItemAfterCdItem@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z+14o
.xdata$x:00004769                 db    5
.xdata$x:0000476A                 db  93h ; ô
.xdata$x:0000476B                 db  19h
.xdata$x:0000476C                 db    3
.xdata$x:0000476D                 db    0
.xdata$x:0000476E                 db    0
.xdata$x:0000476F                 db    0
.xdata$x:00004770                 dd offset __unwindtable$?ReadLocalItemAfterCdItem@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z
.xdata$x:00004774                 db    1
.xdata$x:00004775                 db    0
.xdata$x:00004776                 db    0
.xdata$x:00004777                 db    0
.xdata$x:00004778                 dd offset __tryblocktable$?ReadLocalItemAfterCdItem@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z
.xdata$x:0000477C                 db    0
.xdata$x:0000477D                 db    0
.xdata$x:0000477E                 db    0
.xdata$x:0000477F                 db    0
.xdata$x:00004780                 db    0
.xdata$x:00004781                 db    0
.xdata$x:00004782                 db    0
.xdata$x:00004783                 db    0
.xdata$x:00004784                 db    0
.xdata$x:00004785                 db    0
.xdata$x:00004786                 db    0
.xdata$x:00004787                 db    0
.xdata$x:00004788                 db    1
.xdata$x:00004789                 db    0
.xdata$x:0000478A                 db    0
.xdata$x:0000478B                 db    0
.xdata$x:0000478C __catchsym$?ReadLocalItemAfterCdItemFull@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z$2 dd offset loc_40
.xdata$x:0000478C                                         ; DATA XREF: .xdata$x:000047BCo
.xdata$x:00004790                 db    0
.xdata$x:00004791                 db    0
.xdata$x:00004792                 db    0
.xdata$x:00004793                 db    0
.xdata$x:00004794                 db    0
.xdata$x:00004795                 db    0
.xdata$x:00004796                 db    0
.xdata$x:00004797                 db    0
.xdata$x:00004798                 dd offset __catch$?ReadLocalItemAfterCdItemFull@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z$0
.xdata$x:0000479C __unwindtable$?ReadLocalItemAfterCdItemFull@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z db 0FFh
.xdata$x:0000479C                                         ; DATA XREF: .xdata$x:000047C8o
.xdata$x:0000479D                 db 0FFh
.xdata$x:0000479E                 db 0FFh
.xdata$x:0000479F                 db 0FFh
.xdata$x:000047A0                 db    0
.xdata$x:000047A1                 db    0
.xdata$x:000047A2                 db    0
.xdata$x:000047A3                 db    0
.xdata$x:000047A4                 db 0FFh
.xdata$x:000047A5                 db 0FFh
.xdata$x:000047A6                 db 0FFh
.xdata$x:000047A7                 db 0FFh
.xdata$x:000047A8                 db    0
.xdata$x:000047A9                 db    0
.xdata$x:000047AA                 db    0
.xdata$x:000047AB                 db    0
.xdata$x:000047AC __tryblocktable$?ReadLocalItemAfterCdItemFull@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z db    0
.xdata$x:000047AC                                         ; DATA XREF: .xdata$x:000047D0o
.xdata$x:000047AD                 db    0
.xdata$x:000047AE                 db    0
.xdata$x:000047AF                 db    0
.xdata$x:000047B0                 db    0
.xdata$x:000047B1                 db    0
.xdata$x:000047B2                 db    0
.xdata$x:000047B3                 db    0
.xdata$x:000047B4                 db    1
.xdata$x:000047B5                 db    0
.xdata$x:000047B6                 db    0
.xdata$x:000047B7                 db    0
.xdata$x:000047B8                 db    1
.xdata$x:000047B9                 db    0
.xdata$x:000047BA                 db    0
.xdata$x:000047BB                 db    0
.xdata$x:000047BC                 dd offset __catchsym$?ReadLocalItemAfterCdItemFull@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z$2
.xdata$x:000047C0 __ehfuncinfo$?ReadLocalItemAfterCdItemFull@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z db  22h ; "
.xdata$x:000047C0                                         ; DATA XREF: __ehhandler$?ReadLocalItemAfterCdItemFull@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z+11o
.xdata$x:000047C1                 db    5
.xdata$x:000047C2                 db  93h ; ô
.xdata$x:000047C3                 db  19h
.xdata$x:000047C4                 db    2
.xdata$x:000047C5                 db    0
.xdata$x:000047C6                 db    0
.xdata$x:000047C7                 db    0
.xdata$x:000047C8                 dd offset __unwindtable$?ReadLocalItemAfterCdItemFull@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z
.xdata$x:000047CC                 db    1
.xdata$x:000047CD                 db    0
.xdata$x:000047CE                 db    0
.xdata$x:000047CF                 db    0
.xdata$x:000047D0                 dd offset __tryblocktable$?ReadLocalItemAfterCdItemFull@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z
.xdata$x:000047D4                 align 10h
.xdata$x:000047E0                 db    1
.xdata$x:000047E1                 db    0
.xdata$x:000047E2                 db    0
.xdata$x:000047E3                 db    0
.xdata$x:000047E4 __unwindtable$?FindCd@CInArchive@NZip@NArchive@@AAEJAAUCCdInfo@23@@Z db 0FFh
.xdata$x:000047E4                                         ; DATA XREF: .xdata$x:000047F4o
.xdata$x:000047E5                 db 0FFh
.xdata$x:000047E6                 db 0FFh
.xdata$x:000047E7                 db 0FFh
.xdata$x:000047E8                 dd offset __unwindfunclet$?FindCd@CInArchive@NZip@NArchive@@AAEJAAUCCdInfo@23@@Z$0
.xdata$x:000047EC __ehfuncinfo$?FindCd@CInArchive@NZip@NArchive@@AAEJAAUCCdInfo@23@@Z db  22h ; "
.xdata$x:000047EC                                         ; DATA XREF: __ehhandler$?FindCd@CInArchive@NZip@NArchive@@AAEJAAUCCdInfo@23@@Z+14o
.xdata$x:000047ED                 db    5
.xdata$x:000047EE                 db  93h ; ô
.xdata$x:000047EF                 db  19h
.xdata$x:000047F0                 db    1
.xdata$x:000047F1                 db    0
.xdata$x:000047F2                 db    0
.xdata$x:000047F3                 db    0
.xdata$x:000047F4                 dd offset __unwindtable$?FindCd@CInArchive@NZip@NArchive@@AAEJAAUCCdInfo@23@@Z
.xdata$x:000047F8                 db    0
.xdata$x:000047F9                 db    0
.xdata$x:000047FA                 db    0
.xdata$x:000047FB                 db    0
.xdata$x:000047FC                 db    0
.xdata$x:000047FD                 db    0
.xdata$x:000047FE                 db    0
.xdata$x:000047FF                 db    0
.xdata$x:00004800                 db    0
.xdata$x:00004801                 db    0
.xdata$x:00004802                 db    0
.xdata$x:00004803                 db    0
.xdata$x:00004804                 db    0
.xdata$x:00004805                 db    0
.xdata$x:00004806                 db    0
.xdata$x:00004807                 db    0
.xdata$x:00004808                 db    0
.xdata$x:00004809                 db    0
.xdata$x:0000480A                 db    0
.xdata$x:0000480B                 db    0
.xdata$x:0000480C                 db    1
.xdata$x:0000480D                 db    0
.xdata$x:0000480E                 db    0
.xdata$x:0000480F                 db    0
.xdata$x:00004810 __unwindtable$?TryReadCd@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@_K1PAUCProgressVirt@23@@Z db 0FFh
.xdata$x:00004810                                         ; DATA XREF: .xdata$x:00004820o
.xdata$x:00004811                 db 0FFh
.xdata$x:00004812                 db 0FFh
.xdata$x:00004813                 db 0FFh
.xdata$x:00004814                 dd offset __unwindfunclet$?TryReadCd@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@_K1PAUCProgressVirt@23@@Z$0
.xdata$x:00004818 __ehfuncinfo$?TryReadCd@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@_K1PAUCProgressVirt@23@@Z db  22h ; "
.xdata$x:00004818                                         ; DATA XREF: __ehhandler$?TryReadCd@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@_K1PAUCProgressVirt@23@@Z+14o
.xdata$x:00004819                 db    5
.xdata$x:0000481A                 db  93h ; ô
.xdata$x:0000481B                 db  19h
.xdata$x:0000481C                 db    1
.xdata$x:0000481D                 db    0
.xdata$x:0000481E                 db    0
.xdata$x:0000481F                 db    0
.xdata$x:00004820                 dd offset __unwindtable$?TryReadCd@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@_K1PAUCProgressVirt@23@@Z
.xdata$x:00004824                 db    0
.xdata$x:00004825                 db    0
.xdata$x:00004826                 db    0
.xdata$x:00004827                 db    0
.xdata$x:00004828                 db    0
.xdata$x:00004829                 db    0
.xdata$x:0000482A                 db    0
.xdata$x:0000482B                 db    0
.xdata$x:0000482C                 db    0
.xdata$x:0000482D                 db    0
.xdata$x:0000482E                 db    0
.xdata$x:0000482F                 db    0
.xdata$x:00004830                 db    0
.xdata$x:00004831                 db    0
.xdata$x:00004832                 db    0
.xdata$x:00004833                 db    0
.xdata$x:00004834                 db    0
.xdata$x:00004835                 db    0
.xdata$x:00004836                 db    0
.xdata$x:00004837                 db    0
.xdata$x:00004838                 db    1
.xdata$x:00004839                 db    0
.xdata$x:0000483A                 db    0
.xdata$x:0000483B                 db    0
.xdata$x:0000483C __catchsym$?ReadLocals@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$3 db    8
.xdata$x:0000483C                                         ; DATA XREF: .xdata$x:0000485Co
.xdata$x:0000483D                 db    0
.xdata$x:0000483E                 db    0
.xdata$x:0000483F                 db    0
.xdata$x:00004840                 dd offset ??_R0?AVCUnexpectEnd@NZip@NArchive@@@8 ; NArchive::NZip::CUnexpectEnd `RTTI Type Descriptor'
.xdata$x:00004844                 align 8
.xdata$x:00004848                 dd offset __catch$?ReadLocals@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$0
.xdata$x:0000484C __tryblocktable$?ReadLocals@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z db    1
.xdata$x:0000484C                                         ; DATA XREF: .xdata$x:00004888o
.xdata$x:0000484D                 db    0
.xdata$x:0000484E                 db    0
.xdata$x:0000484F                 db    0
.xdata$x:00004850                 db    1
.xdata$x:00004851                 db    0
.xdata$x:00004852                 db    0
.xdata$x:00004853                 db    0
.xdata$x:00004854                 db    2
.xdata$x:00004855                 db    0
.xdata$x:00004856                 db    0
.xdata$x:00004857                 db    0
.xdata$x:00004858                 db    1
.xdata$x:00004859                 db    0
.xdata$x:0000485A                 db    0
.xdata$x:0000485B                 db    0
.xdata$x:0000485C                 dd offset __catchsym$?ReadLocals@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$3
.xdata$x:00004860 __unwindtable$?ReadLocals@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z db 0FFh
.xdata$x:00004860                                         ; DATA XREF: .xdata$x:00004880o
.xdata$x:00004861                 db 0FFh
.xdata$x:00004862                 db 0FFh
.xdata$x:00004863                 db 0FFh
.xdata$x:00004864                 dd offset __unwindfunclet$?ReadLocals@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$2
.xdata$x:00004868                 db    0
.xdata$x:00004869                 db    0
.xdata$x:0000486A                 db    0
.xdata$x:0000486B                 db    0
.xdata$x:0000486C                 db    0
.xdata$x:0000486D                 db    0
.xdata$x:0000486E                 db    0
.xdata$x:0000486F                 db    0
.xdata$x:00004870                 db    0
.xdata$x:00004871                 db    0
.xdata$x:00004872                 db    0
.xdata$x:00004873                 db    0
.xdata$x:00004874                 db    0
.xdata$x:00004875                 db    0
.xdata$x:00004876                 db    0
.xdata$x:00004877                 db    0
.xdata$x:00004878 __ehfuncinfo$?ReadLocals@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z db  22h ; "
.xdata$x:00004878                                         ; DATA XREF: __ehhandler$?ReadLocals@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z+14o
.xdata$x:00004879                 db    5
.xdata$x:0000487A                 db  93h ; ô
.xdata$x:0000487B                 db  19h
.xdata$x:0000487C                 db    3
.xdata$x:0000487D                 db    0
.xdata$x:0000487E                 db    0
.xdata$x:0000487F                 db    0
.xdata$x:00004880                 dd offset __unwindtable$?ReadLocals@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z
.xdata$x:00004884                 db    1
.xdata$x:00004885                 db    0
.xdata$x:00004886                 db    0
.xdata$x:00004887                 db    0
.xdata$x:00004888                 dd offset __tryblocktable$?ReadLocals@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z
.xdata$x:0000488C                 db    0
.xdata$x:0000488D                 db    0
.xdata$x:0000488E                 db    0
.xdata$x:0000488F                 db    0
.xdata$x:00004890                 db    0
.xdata$x:00004891                 db    0
.xdata$x:00004892                 db    0
.xdata$x:00004893                 db    0
.xdata$x:00004894                 db    0
.xdata$x:00004895                 db    0
.xdata$x:00004896                 db    0
.xdata$x:00004897                 db    0
.xdata$x:00004898                 db    1
.xdata$x:00004899                 db    0
.xdata$x:0000489A                 db    0
.xdata$x:0000489B                 db    0
.xdata$x:0000489C __catchsym$?ReadHeaders2@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$5 db    8
.xdata$x:0000489C                                         ; DATA XREF: .xdata$x:000048BCo
.xdata$x:0000489D                 db    0
.xdata$x:0000489E                 db    0
.xdata$x:0000489F                 db    0
.xdata$x:000048A0                 dd offset ??_R0?AVCUnexpectEnd@NZip@NArchive@@@8 ; NArchive::NZip::CUnexpectEnd `RTTI Type Descriptor'
.xdata$x:000048A4                 align 8
.xdata$x:000048A8                 dd offset __catch$?ReadHeaders2@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$0
.xdata$x:000048AC __tryblocktable$?ReadHeaders2@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z db    1
.xdata$x:000048AC                                         ; DATA XREF: .xdata$x:000048D0o
.xdata$x:000048AD                 db    0
.xdata$x:000048AE                 db    0
.xdata$x:000048AF                 db    0
.xdata$x:000048B0                 db    1
.xdata$x:000048B1                 db    0
.xdata$x:000048B2                 db    0
.xdata$x:000048B3                 db    0
.xdata$x:000048B4                 db    2
.xdata$x:000048B5                 db    0
.xdata$x:000048B6                 db    0
.xdata$x:000048B7                 db    0
.xdata$x:000048B8                 db    1
.xdata$x:000048B9                 db    0
.xdata$x:000048BA                 db    0
.xdata$x:000048BB                 db    0
.xdata$x:000048BC                 dd offset __catchsym$?ReadHeaders2@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$5
.xdata$x:000048C0 __ehfuncinfo$?ReadHeaders2@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z db  22h ; "
.xdata$x:000048C0                                         ; DATA XREF: __ehhandler$?ReadHeaders2@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z+1Eo
.xdata$x:000048C1                 db    5
.xdata$x:000048C2                 db  93h ; ô
.xdata$x:000048C3                 db  19h
.xdata$x:000048C4                 db    5
.xdata$x:000048C5                 db    0
.xdata$x:000048C6                 db    0
.xdata$x:000048C7                 db    0
.xdata$x:000048C8                 dd offset __unwindtable$?ReadHeaders2@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z
.xdata$x:000048CC                 db    1
.xdata$x:000048CD                 db    0
.xdata$x:000048CE                 db    0
.xdata$x:000048CF                 db    0
.xdata$x:000048D0                 dd offset __tryblocktable$?ReadHeaders2@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z
.xdata$x:000048D4                 align 10h
.xdata$x:000048E0                 db    1
.xdata$x:000048E1                 db    0
.xdata$x:000048E2                 db    0
.xdata$x:000048E3                 db    0
.xdata$x:000048E4 __unwindtable$?ReadHeaders2@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z db 0FFh
.xdata$x:000048E4                                         ; DATA XREF: .xdata$x:000048C8o
.xdata$x:000048E5                 db 0FFh
.xdata$x:000048E6                 db 0FFh
.xdata$x:000048E7                 db 0FFh
.xdata$x:000048E8                 dd offset __unwindfunclet$?ReadHeaders2@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$2
.xdata$x:000048EC                 db    0
.xdata$x:000048ED                 db    0
.xdata$x:000048EE                 db    0
.xdata$x:000048EF                 db    0
.xdata$x:000048F0                 db    0
.xdata$x:000048F1                 db    0
.xdata$x:000048F2                 db    0
.xdata$x:000048F3                 db    0
.xdata$x:000048F4                 db    0
.xdata$x:000048F5                 db    0
.xdata$x:000048F6                 db    0
.xdata$x:000048F7                 db    0
.xdata$x:000048F8                 db    0
.xdata$x:000048F9                 db    0
.xdata$x:000048FA                 db    0
.xdata$x:000048FB                 db    0
.xdata$x:000048FC                 db 0FFh
.xdata$x:000048FD                 db 0FFh
.xdata$x:000048FE                 db 0FFh
.xdata$x:000048FF                 db 0FFh
.xdata$x:00004900                 dd offset __unwindfunclet$?ReadHeaders2@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$3
.xdata$x:00004904                 db    3
.xdata$x:00004905                 db    0
.xdata$x:00004906                 db    0
.xdata$x:00004907                 db    0
.xdata$x:00004908                 dd offset __unwindfunclet$?ReadHeaders2@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$4
.xdata$x:0000490C __unwindtable$?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z db 0FFh
.xdata$x:0000490C                                         ; DATA XREF: .xdata$x:00004938o
.xdata$x:0000490D                 db 0FFh
.xdata$x:0000490E                 db 0FFh
.xdata$x:0000490F                 db 0FFh
.xdata$x:00004910                 db    0
.xdata$x:00004911                 db    0
.xdata$x:00004912                 db    0
.xdata$x:00004913                 db    0
.xdata$x:00004914                 db 0FFh
.xdata$x:00004915                 db 0FFh
.xdata$x:00004916                 db 0FFh
.xdata$x:00004917                 db 0FFh
.xdata$x:00004918                 db    0
.xdata$x:00004919                 db    0
.xdata$x:0000491A                 db    0
.xdata$x:0000491B                 db    0
.xdata$x:0000491C __tryblocktable$?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z db    0
.xdata$x:0000491C                                         ; DATA XREF: .xdata$x:00004940o
.xdata$x:0000491D                 db    0
.xdata$x:0000491E                 db    0
.xdata$x:0000491F                 db    0
.xdata$x:00004920                 db    0
.xdata$x:00004921                 db    0
.xdata$x:00004922                 db    0
.xdata$x:00004923                 db    0
.xdata$x:00004924                 db    1
.xdata$x:00004925                 db    0
.xdata$x:00004926                 db    0
.xdata$x:00004927                 db    0
.xdata$x:00004928                 db    3
.xdata$x:00004929                 db    0
.xdata$x:0000492A                 db    0
.xdata$x:0000492B                 db    0
.xdata$x:0000492C                 dd offset __catchsym$?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$4
.xdata$x:00004930 __ehfuncinfo$?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z db  22h ; "
.xdata$x:00004930                                         ; DATA XREF: __ehhandler$?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z+11o
.xdata$x:00004931                 db    5
.xdata$x:00004932                 db  93h ; ô
.xdata$x:00004933                 db  19h
.xdata$x:00004934                 db    2
.xdata$x:00004935                 db    0
.xdata$x:00004936                 db    0
.xdata$x:00004937                 db    0
.xdata$x:00004938                 dd offset __unwindtable$?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z
.xdata$x:0000493C                 db    1
.xdata$x:0000493D                 db    0
.xdata$x:0000493E                 db    0
.xdata$x:0000493F                 db    0
.xdata$x:00004940                 dd offset __tryblocktable$?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z
.xdata$x:00004944                 align 10h
.xdata$x:00004950                 db    1
.xdata$x:00004951                 db    0
.xdata$x:00004952                 db    0
.xdata$x:00004953                 db    0
.xdata$x:00004954 __catchsym$?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$4 db    9
.xdata$x:00004954                                         ; DATA XREF: .xdata$x:0000492Co
.xdata$x:00004955                 db    0
.xdata$x:00004956                 db    0
.xdata$x:00004957                 db    0
.xdata$x:00004958                 dd offset ??_R0?AUCInBufferException@@@8 ; CInBufferException `RTTI Type Descriptor'
.xdata$x:0000495C                 db 0E0h ; a
.xdata$x:0000495D                 db 0FFh
.xdata$x:0000495E                 db 0FFh
.xdata$x:0000495F                 db 0FFh
.xdata$x:00004960                 dd offset __catch$?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$0
.xdata$x:00004964                 db    9
.xdata$x:00004965                 db    0
.xdata$x:00004966                 db    0
.xdata$x:00004967                 db    0
.xdata$x:00004968                 dd offset ??_R0?AVCUnexpectEnd@NZip@NArchive@@@8 ; NArchive::NZip::CUnexpectEnd `RTTI Type Descriptor'
.xdata$x:0000496C                 align 10h
.xdata$x:00004970                 dd offset __catch$?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$1
.xdata$x:00004974                 dd offset loc_40
.xdata$x:00004978                 align 10h
.xdata$x:00004980                 dd offset __catch$?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$2
.xdata$x:00004984 __unwindtable$?CreateLimitedStream@CInArchive@NZip@NArchive@@QAEPAUISequentialInStream@@_K0@Z db 0FFh
.xdata$x:00004984                                         ; DATA XREF: .xdata$x:0000499Co
.xdata$x:00004985                 db 0FFh
.xdata$x:00004986                 db 0FFh
.xdata$x:00004987                 db 0FFh
.xdata$x:00004988                 dd offset __unwindfunclet$?CreateLimitedStream@CInArchive@NZip@NArchive@@QAEPAUISequentialInStream@@_K0@Z$0
.xdata$x:0000498C                 db 0FFh
.xdata$x:0000498D                 db 0FFh
.xdata$x:0000498E                 db 0FFh
.xdata$x:0000498F                 db 0FFh
.xdata$x:00004990                 dd offset __unwindfunclet$?CreateLimitedStream@CInArchive@NZip@NArchive@@QAEPAUISequentialInStream@@_K0@Z$1
.xdata$x:00004994 __ehfuncinfo$?CreateLimitedStream@CInArchive@NZip@NArchive@@QAEPAUISequentialInStream@@_K0@Z db  22h ; "
.xdata$x:00004994                                         ; DATA XREF: __ehhandler$?CreateLimitedStream@CInArchive@NZip@NArchive@@QAEPAUISequentialInStream@@_K0@Z+11o
.xdata$x:00004995                 db    5
.xdata$x:00004996                 db  93h ; ô
.xdata$x:00004997                 db  19h
.xdata$x:00004998                 db    2
.xdata$x:00004999                 db    0
.xdata$x:0000499A                 db    0
.xdata$x:0000499B                 db    0
.xdata$x:0000499C                 dd offset __unwindtable$?CreateLimitedStream@CInArchive@NZip@NArchive@@QAEPAUISequentialInStream@@_K0@Z
.xdata$x:000049A0                 db    0
.xdata$x:000049A1                 db    0
.xdata$x:000049A2                 db    0
.xdata$x:000049A3                 db    0
.xdata$x:000049A4                 db    0
.xdata$x:000049A5                 db    0
.xdata$x:000049A6                 db    0
.xdata$x:000049A7                 db    0
.xdata$x:000049A8                 db    0
.xdata$x:000049A9                 db    0
.xdata$x:000049AA                 db    0
.xdata$x:000049AB                 db    0
.xdata$x:000049AC                 db    0
.xdata$x:000049AD                 db    0
.xdata$x:000049AE                 db    0
.xdata$x:000049AF                 db    0
.xdata$x:000049B0                 db    0
.xdata$x:000049B1                 db    0
.xdata$x:000049B2                 db    0
.xdata$x:000049B3                 db    0
.xdata$x:000049B4                 db    1
.xdata$x:000049B5                 db    0
.xdata$x:000049B6                 db    0
.xdata$x:000049B7                 db    0
.xdata$x:000049B7 _xdata$x        ends
.xdata$x:000049B7
.text:000049B8 ; ===========================================================================
.text:000049B8
.text:000049B8 ; Segment type: Pure code
.text:000049B8 ; Segment permissions: Read/Execute
.text:000049B8 _text           segment para public 'CODE' use32
.text:000049B8                 assume cs:_text
.text:000049B8                 ;org 49B8h
.text:000049B8 ; COMDAT (pick any)
.text:000049B8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000049B8
.text:000049B8 ; =============== S U B R O U T I N E =======================================
.text:000049B8
.text:000049B8 ; Attributes: bp-based frame
.text:000049B8
.text:000049B8 ; void __thiscall NArchive::NZip::CInArchiveInfo::Clear(NArchive::NZip::CInArchiveInfo *__hidden this)
.text:000049B8                 public ?Clear@CInArchiveInfo@NZip@NArchive@@QAEXXZ
.text:000049B8 ?Clear@CInArchiveInfo@NZip@NArchive@@QAEXXZ proc near
.text:000049B8                                         ; CODE XREF: NArchive::NZip::CInArchive::FindAndReadMarker(IInStream *,unsigned __int64 const *)+47p
.text:000049B8
.text:000049B8 var_4           = dword ptr -4
.text:000049B8
.text:000049B8                 push    ebp
.text:000049B9                 mov     ebp, esp
.text:000049BB                 push    ecx
.text:000049BC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000049C3                 mov     [ebp+var_4], ecx
.text:000049C6                 mov     eax, [ebp+var_4]
.text:000049C9                 mov     dword ptr [eax], 0
.text:000049CF                 mov     dword ptr [eax+4], 0
.text:000049D6                 mov     ecx, [ebp+var_4]
.text:000049D9                 mov     dword ptr [ecx+8], 0
.text:000049E0                 mov     dword ptr [ecx+0Ch], 0
.text:000049E7                 mov     edx, [ebp+var_4]
.text:000049EA                 mov     dword ptr [edx+10h], 0
.text:000049F1                 mov     dword ptr [edx+14h], 0
.text:000049F8                 mov     eax, [ebp+var_4]
.text:000049FB                 mov     dword ptr [eax+18h], 0
.text:00004A02                 mov     dword ptr [eax+1Ch], 0
.text:00004A09                 mov     ecx, [ebp+var_4]
.text:00004A0C                 mov     dword ptr [ecx+20h], 0
.text:00004A13                 mov     dword ptr [ecx+24h], 0
.text:00004A1A                 mov     edx, [ebp+var_4]
.text:00004A1D                 mov     dword ptr [edx+28h], 0
.text:00004A24                 mov     dword ptr [edx+2Ch], 0
.text:00004A2B                 mov     eax, [ebp+var_4]
.text:00004A2E                 mov     byte ptr [eax+30h], 0
.text:00004A32                 mov     ecx, [ebp+var_4]
.text:00004A35                 add     ecx, 34h ; '4'
.text:00004A38                 call    ?Free@?$CBuffer@E@@QAEXXZ ; CBuffer<uchar>::Free(void)
.text:00004A3D                 add     esp, 4
.text:00004A40                 cmp     ebp, esp
.text:00004A42                 call    __RTC_CheckEsp
.text:00004A47                 mov     esp, ebp
.text:00004A49                 pop     ebp
.text:00004A4A                 retn
.text:00004A4A ?Clear@CInArchiveInfo@NZip@NArchive@@QAEXXZ endp
.text:00004A4A
.text:00004A4A ; ---------------------------------------------------------------------------
.text:00004A4B                 align 4
.text:00004A4B _text           ends
.text:00004A4B
.data:00004A4C ; ===========================================================================
.data:00004A4C
.data:00004A4C ; Segment type: Pure data
.data:00004A4C ; Segment permissions: Read/Write
.data:00004A4C _data           segment dword public 'DATA' use32
.data:00004A4C                 assume cs:_data
.data:00004A4C                 ;org 4A4Ch
.data:00004A4C ; COMDAT (pick any)
.data:00004A4C                 public ??_R0?AUCInBufferException@@@8
.data:00004A4C ; struct CInBufferException `RTTI Type Descriptor'
.data:00004A4C ??_R0?AUCInBufferException@@@8 dd offset ??_7type_info@@6B@
.data:00004A4C                                         ; DATA XREF: .xdata$x:000046ACo
.data:00004A4C                                         ; .xdata$x:00004958o
.data:00004A4C                                         ; const type_info::`vftable'
.data:00004A50                 db    0
.data:00004A51                 db    0
.data:00004A52                 db    0
.data:00004A53                 db    0
.data:00004A54                 db  2Eh ; .
.data:00004A55                 db  3Fh ; ?
.data:00004A56                 db  41h ; A
.data:00004A57                 db  55h ; U
.data:00004A58                 db  43h ; C
.data:00004A59                 db  49h ; I
.data:00004A5A                 db  6Eh ; n
.data:00004A5B                 db  42h ; B
.data:00004A5C                 db  75h ; u
.data:00004A5D                 db  66h ; f
.data:00004A5E                 db  66h ; f
.data:00004A5F                 db  65h ; e
.data:00004A60                 db  72h ; r
.data:00004A61                 db  45h ; E
.data:00004A62                 db  78h ; x
.data:00004A63                 db  63h ; c
.data:00004A64                 db  65h ; e
.data:00004A65                 db  70h ; p
.data:00004A66                 db  74h ; t
.data:00004A67                 db  69h ; i
.data:00004A68                 db  6Fh ; o
.data:00004A69                 db  6Eh ; n
.data:00004A6A                 db  40h ; @
.data:00004A6B                 db  40h ; @
.data:00004A6C                 db    0
.data:00004A6D                 align 10h
.data:00004A6D _data           ends
.data:00004A6D
.xdata$x:00004A70 ; ===========================================================================
.xdata$x:00004A70
.xdata$x:00004A70 ; Segment type: Pure data
.xdata$x:00004A70 ; Segment permissions: Read
.xdata$x:00004A70 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004A70                 assume cs:_xdata$x
.xdata$x:00004A70                 ;org 4A70h
.xdata$x:00004A70 ; COMDAT (pick any)
.xdata$x:00004A70                 public __TI1?AVCUnexpectEnd@NZip@NArchive@@
.xdata$x:00004A70 __TI1?AVCUnexpectEnd@NZip@NArchive@@ db    0
.xdata$x:00004A70                                         ; DATA XREF: NArchive::NZip::CInArchive::SafeReadBytes(void *,uint)+D1o
.xdata$x:00004A70                                         ; NArchive::NZip::CInArchive::Skip(uint)+5Eo
.xdata$x:00004A71                 db    0
.xdata$x:00004A72                 db    0
.xdata$x:00004A73                 db    0
.xdata$x:00004A74                 db    0
.xdata$x:00004A75                 db    0
.xdata$x:00004A76                 db    0
.xdata$x:00004A77                 db    0
.xdata$x:00004A78                 db    0
.xdata$x:00004A79                 db    0
.xdata$x:00004A7A                 db    0
.xdata$x:00004A7B                 db    0
.xdata$x:00004A7C                 dd offset __CTA1?AVCUnexpectEnd@NZip@NArchive@@
.xdata$x:00004A7C _xdata$x        ends
.xdata$x:00004A7C
.xdata$x:00004A80 ; ===========================================================================
.xdata$x:00004A80
.xdata$x:00004A80 ; Segment type: Pure data
.xdata$x:00004A80 ; Segment permissions: Read
.xdata$x:00004A80 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004A80                 assume cs:_xdata$x
.xdata$x:00004A80                 ;org 4A80h
.xdata$x:00004A80 ; COMDAT (pick any)
.xdata$x:00004A80                 public __TI1?AUCSystemException@@
.xdata$x:00004A80 __TI1?AUCSystemException@@ db    0      ; DATA XREF: NArchive::NZip::CInArchive::SafeReadBytes(void *,uint)+B0o
.xdata$x:00004A81                 db    0
.xdata$x:00004A82                 db    0
.xdata$x:00004A83                 db    0
.xdata$x:00004A84                 db    0
.xdata$x:00004A85                 db    0
.xdata$x:00004A86                 db    0
.xdata$x:00004A87                 db    0
.xdata$x:00004A88                 db    0
.xdata$x:00004A89                 db    0
.xdata$x:00004A8A                 db    0
.xdata$x:00004A8B                 db    0
.xdata$x:00004A8C                 dd offset __CTA1?AUCSystemException@@
.xdata$x:00004A8C _xdata$x        ends
.xdata$x:00004A8C
.xdata$x:00004A90 ; ===========================================================================
.xdata$x:00004A90
.xdata$x:00004A90 ; Segment type: Pure data
.xdata$x:00004A90 ; Segment permissions: Read
.xdata$x:00004A90 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004A90                 assume cs:_xdata$x
.xdata$x:00004A90                 ;org 4A90h
.xdata$x:00004A90 ; COMDAT (pick any)
.xdata$x:00004A90                 public __CTA1?AUCSystemException@@
.xdata$x:00004A90 __CTA1?AUCSystemException@@ db    1     ; DATA XREF: .xdata$x:00004A8Co
.xdata$x:00004A91                 db    0
.xdata$x:00004A92                 db    0
.xdata$x:00004A93                 db    0
.xdata$x:00004A94                 dd offset __CT??_R0?AUCSystemException@@@84
.xdata$x:00004A94 _xdata$x        ends
.xdata$x:00004A94
.xdata$x:00004A98 ; ===========================================================================
.xdata$x:00004A98
.xdata$x:00004A98 ; Segment type: Pure data
.xdata$x:00004A98 ; Segment permissions: Read
.xdata$x:00004A98 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004A98                 assume cs:_xdata$x
.xdata$x:00004A98                 ;org 4A98h
.xdata$x:00004A98 ; COMDAT (pick any)
.xdata$x:00004A98                 public __CT??_R0?AUCSystemException@@@84
.xdata$x:00004A98 __CT??_R0?AUCSystemException@@@84 db    0 ; DATA XREF: .xdata$x:00004A94o
.xdata$x:00004A99                 db    0
.xdata$x:00004A9A                 db    0
.xdata$x:00004A9B                 db    0
.xdata$x:00004A9C                 dd offset ??_R0?AUCSystemException@@@8 ; CSystemException `RTTI Type Descriptor'
.xdata$x:00004AA0                 db    0
.xdata$x:00004AA1                 db    0
.xdata$x:00004AA2                 db    0
.xdata$x:00004AA3                 db    0
.xdata$x:00004AA4                 db 0FFh
.xdata$x:00004AA5                 db 0FFh
.xdata$x:00004AA6                 db 0FFh
.xdata$x:00004AA7                 db 0FFh
.xdata$x:00004AA8                 db    0
.xdata$x:00004AA9                 db    0
.xdata$x:00004AAA                 db    0
.xdata$x:00004AAB                 db    0
.xdata$x:00004AAC                 db    4
.xdata$x:00004AAD                 db    0
.xdata$x:00004AAE                 db    0
.xdata$x:00004AAF                 db    0
.xdata$x:00004AB0                 db    0
.xdata$x:00004AB1                 db    0
.xdata$x:00004AB2                 db    0
.xdata$x:00004AB3                 db    0
.xdata$x:00004AB3 _xdata$x        ends
.xdata$x:00004AB3
.data:00004AB4 ; ===========================================================================
.data:00004AB4
.data:00004AB4 ; Segment type: Pure data
.data:00004AB4 ; Segment permissions: Read/Write
.data:00004AB4 _data           segment dword public 'DATA' use32
.data:00004AB4                 assume cs:_data
.data:00004AB4                 ;org 4AB4h
.data:00004AB4 ; COMDAT (pick any)
.data:00004AB4                 public ??_R0?AUCSystemException@@@8
.data:00004AB4 ; struct CSystemException `RTTI Type Descriptor'
.data:00004AB4 ??_R0?AUCSystemException@@@8 dd offset ??_7type_info@@6B@
.data:00004AB4                                         ; DATA XREF: .xdata$x:00004A9Co
.data:00004AB4                                         ; const type_info::`vftable'
.data:00004AB8                 db    0
.data:00004AB9                 db    0
.data:00004ABA                 db    0
.data:00004ABB                 db    0
.data:00004ABC                 db  2Eh ; .
.data:00004ABD                 db  3Fh ; ?
.data:00004ABE                 db  41h ; A
.data:00004ABF                 db  55h ; U
.data:00004AC0                 db  43h ; C
.data:00004AC1                 db  53h ; S
.data:00004AC2                 db  79h ; y
.data:00004AC3                 db  73h ; s
.data:00004AC4                 db  74h ; t
.data:00004AC5                 db  65h ; e
.data:00004AC6                 db  6Dh ; m
.data:00004AC7                 db  45h ; E
.data:00004AC8                 db  78h ; x
.data:00004AC9                 db  63h ; c
.data:00004ACA                 db  65h ; e
.data:00004ACB                 db  70h ; p
.data:00004ACC                 db  74h ; t
.data:00004ACD                 db  69h ; i
.data:00004ACE                 db  6Fh ; o
.data:00004ACF                 db  6Eh ; n
.data:00004AD0                 db  40h ; @
.data:00004AD1                 db  40h ; @
.data:00004AD2                 db    0
.data:00004AD3                 align 4
.data:00004AD3 _data           ends
.data:00004AD3
.xdata$x:00004AD4 ; ===========================================================================
.xdata$x:00004AD4
.xdata$x:00004AD4 ; Segment type: Pure data
.xdata$x:00004AD4 ; Segment permissions: Read
.xdata$x:00004AD4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004AD4                 assume cs:_xdata$x
.xdata$x:00004AD4                 ;org 4AD4h
.xdata$x:00004AD4 ; COMDAT (pick any)
.xdata$x:00004AD4                 public __CTA1?AVCUnexpectEnd@NZip@NArchive@@
.xdata$x:00004AD4 __CTA1?AVCUnexpectEnd@NZip@NArchive@@ db    1
.xdata$x:00004AD4                                         ; DATA XREF: .xdata$x:00004A7Co
.xdata$x:00004AD5                 db    0
.xdata$x:00004AD6                 db    0
.xdata$x:00004AD7                 db    0
.xdata$x:00004AD8                 dd offset __CT??_R0?AVCUnexpectEnd@NZip@NArchive@@@81
.xdata$x:00004AD8 _xdata$x        ends
.xdata$x:00004AD8
.xdata$x:00004ADC ; ===========================================================================
.xdata$x:00004ADC
.xdata$x:00004ADC ; Segment type: Pure data
.xdata$x:00004ADC ; Segment permissions: Read
.xdata$x:00004ADC _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004ADC                 assume cs:_xdata$x
.xdata$x:00004ADC                 ;org 4ADCh
.xdata$x:00004ADC ; COMDAT (pick any)
.xdata$x:00004ADC                 public __CT??_R0?AVCUnexpectEnd@NZip@NArchive@@@81
.xdata$x:00004ADC __CT??_R0?AVCUnexpectEnd@NZip@NArchive@@@81 db    0
.xdata$x:00004ADC                                         ; DATA XREF: .xdata$x:00004AD8o
.xdata$x:00004ADD                 db    0
.xdata$x:00004ADE                 db    0
.xdata$x:00004ADF                 db    0
.xdata$x:00004AE0                 dd offset ??_R0?AVCUnexpectEnd@NZip@NArchive@@@8 ; NArchive::NZip::CUnexpectEnd `RTTI Type Descriptor'
.xdata$x:00004AE4                 align 8
.xdata$x:00004AE8                 db 0FFh
.xdata$x:00004AE9                 db 0FFh
.xdata$x:00004AEA                 db 0FFh
.xdata$x:00004AEB                 db 0FFh
.xdata$x:00004AEC                 db    0
.xdata$x:00004AED                 db    0
.xdata$x:00004AEE                 db    0
.xdata$x:00004AEF                 db    0
.xdata$x:00004AF0                 db    1
.xdata$x:00004AF1                 db    0
.xdata$x:00004AF2                 db    0
.xdata$x:00004AF3                 db    0
.xdata$x:00004AF4                 db    0
.xdata$x:00004AF5                 db    0
.xdata$x:00004AF6                 db    0
.xdata$x:00004AF7                 db    0
.xdata$x:00004AF7 _xdata$x        ends
.xdata$x:00004AF7
.data:00004AF8 ; ===========================================================================
.data:00004AF8
.data:00004AF8 ; Segment type: Pure data
.data:00004AF8 ; Segment permissions: Read/Write
.data:00004AF8 _data           segment dword public 'DATA' use32
.data:00004AF8                 assume cs:_data
.data:00004AF8                 ;org 4AF8h
.data:00004AF8 ; COMDAT (pick any)
.data:00004AF8                 public ??_R0?AVCUnexpectEnd@NZip@NArchive@@@8
.data:00004AF8 ; class NArchive::NZip::CUnexpectEnd `RTTI Type Descriptor'
.data:00004AF8 ??_R0?AVCUnexpectEnd@NZip@NArchive@@@8 dd offset ??_7type_info@@6B@
.data:00004AF8                                         ; DATA XREF: .xdata$x:00004840o
.data:00004AF8                                         ; .xdata$x:000048A0o ...
.data:00004AF8                                         ; const type_info::`vftable'
.data:00004AFC                 align 10h
.data:00004B00 a_?avcunexpecte db '.?AVCUnexpectEnd@NZip@NArchive@@',0
.data:00004B21                 align 4
.data:00004B21 _data           ends
.data:00004B21
.text:00004B24 ; ===========================================================================
.text:00004B24
.text:00004B24 ; Segment type: Pure code
.text:00004B24 ; Segment permissions: Read/Execute
.text:00004B24 _text           segment para public 'CODE' use32
.text:00004B24                 assume cs:_text
.text:00004B24                 ;org 4B24h
.text:00004B24 ; COMDAT (pick any)
.text:00004B24                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004B24
.text:00004B24 ; =============== S U B R O U T I N E =======================================
.text:00004B24
.text:00004B24 ; Attributes: bp-based frame
.text:00004B24
.text:00004B24 ; _DWORD __thiscall CSystemException::CSystemException(CSystemException *this, __int32)
.text:00004B24                 public ??0CSystemException@@QAE@J@Z
.text:00004B24 ??0CSystemException@@QAE@J@Z proc near  ; CODE XREF: NArchive::NZip::CInArchive::SafeReadBytes(void *,uint)+A6p
.text:00004B24
.text:00004B24 var_4           = dword ptr -4
.text:00004B24 arg_0           = dword ptr  8
.text:00004B24
.text:00004B24                 push    ebp
.text:00004B25                 mov     ebp, esp
.text:00004B27                 push    ecx
.text:00004B28                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004B2F                 mov     [ebp+var_4], ecx
.text:00004B32                 mov     eax, [ebp+var_4]
.text:00004B35                 mov     ecx, [ebp+arg_0]
.text:00004B38                 mov     [eax], ecx
.text:00004B3A                 mov     eax, [ebp+var_4]
.text:00004B3D                 mov     esp, ebp
.text:00004B3F                 pop     ebp
.text:00004B40                 retn    4
.text:00004B40 ??0CSystemException@@QAE@J@Z endp
.text:00004B40
.text:00004B40 ; ---------------------------------------------------------------------------
.text:00004B43                 align 4
.text:00004B43 _text           ends
.text:00004B43
.text:00004B44 ; ===========================================================================
.text:00004B44
.text:00004B44 ; Segment type: Pure code
.text:00004B44 ; Segment permissions: Read/Execute
.text:00004B44 _text           segment para public 'CODE' use32
.text:00004B44                 assume cs:_text
.text:00004B44                 ;org 4B44h
.text:00004B44 ; COMDAT (pick any)
.text:00004B44                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004B44
.text:00004B44 ; =============== S U B R O U T I N E =======================================
.text:00004B44
.text:00004B44 ; Attributes: bp-based frame
.text:00004B44
.text:00004B44 ; void __thiscall AString::Empty(AString *__hidden this)
.text:00004B44                 public ?Empty@AString@@QAEXXZ
.text:00004B44 ?Empty@AString@@QAEXXZ proc near        ; CODE XREF: NArchive::NZip::CInArchive::ReadFileName(uint,AString &)+20p
.text:00004B44
.text:00004B44 var_4           = dword ptr -4
.text:00004B44
.text:00004B44                 push    ebp
.text:00004B45                 mov     ebp, esp
.text:00004B47                 push    ecx
.text:00004B48                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004B4F                 mov     [ebp+var_4], ecx
.text:00004B52                 mov     eax, [ebp+var_4]
.text:00004B55                 mov     dword ptr [eax+4], 0
.text:00004B5C                 mov     ecx, [ebp+var_4]
.text:00004B5F                 mov     edx, [ecx]
.text:00004B61                 mov     byte ptr [edx], 0
.text:00004B64                 mov     esp, ebp
.text:00004B66                 pop     ebp
.text:00004B67                 retn
.text:00004B67 ?Empty@AString@@QAEXXZ endp
.text:00004B67
.text:00004B67 _text           ends
.text:00004B67
.text:00004B68 ; ===========================================================================
.text:00004B68
.text:00004B68 ; Segment type: Pure code
.text:00004B68 ; Segment permissions: Read/Execute
.text:00004B68 _text           segment para public 'CODE' use32
.text:00004B68                 assume cs:_text
.text:00004B68                 ;org 4B68h
.text:00004B68 ; COMDAT (pick any)
.text:00004B68                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004B68
.text:00004B68 ; =============== S U B R O U T I N E =======================================
.text:00004B68
.text:00004B68 ; Attributes: bp-based frame
.text:00004B68
.text:00004B68 ; char *__thiscall AString::GetBuf(AString *this, unsigned int)
.text:00004B68                 public ?GetBuf@AString@@QAEPADI@Z
.text:00004B68 ?GetBuf@AString@@QAEPADI@Z proc near    ; CODE XREF: NArchive::NZip::CInArchive::ReadFileName(uint,AString &)+2Ep
.text:00004B68
.text:00004B68 var_4           = dword ptr -4
.text:00004B68 arg_0           = dword ptr  8
.text:00004B68
.text:00004B68                 push    ebp
.text:00004B69                 mov     ebp, esp
.text:00004B6B                 push    ecx
.text:00004B6C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004B73                 mov     [ebp+var_4], ecx
.text:00004B76                 mov     eax, [ebp+var_4]
.text:00004B79                 mov     ecx, [ebp+arg_0]
.text:00004B7C                 cmp     ecx, [eax+8]
.text:00004B7F                 jbe     short loc_4B8D
.text:00004B81                 mov     edx, [ebp+arg_0]
.text:00004B84                 push    edx             ; unsigned int
.text:00004B85                 mov     ecx, [ebp+var_4] ; this
.text:00004B88                 call    ?ReAlloc2@AString@@AAEXI@Z ; AString::ReAlloc2(uint)
.text:00004B8D
.text:00004B8D loc_4B8D:                               ; CODE XREF: AString::GetBuf(uint)+17j
.text:00004B8D                 mov     eax, [ebp+var_4]
.text:00004B90                 mov     eax, [eax]
.text:00004B92                 add     esp, 4
.text:00004B95                 cmp     ebp, esp
.text:00004B97                 call    __RTC_CheckEsp
.text:00004B9C                 mov     esp, ebp
.text:00004B9E                 pop     ebp
.text:00004B9F                 retn    4
.text:00004B9F ?GetBuf@AString@@QAEPADI@Z endp
.text:00004B9F
.text:00004B9F ; ---------------------------------------------------------------------------
.text:00004BA2                 align 4
.text:00004BA2 _text           ends
.text:00004BA2
.text:00004BA4 ; ===========================================================================
.text:00004BA4
.text:00004BA4 ; Segment type: Pure code
.text:00004BA4 ; Segment permissions: Read/Execute
.text:00004BA4 _text           segment para public 'CODE' use32
.text:00004BA4                 assume cs:_text
.text:00004BA4                 ;org 4BA4h
.text:00004BA4 ; COMDAT (pick any)
.text:00004BA4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004BA4
.text:00004BA4 ; =============== S U B R O U T I N E =======================================
.text:00004BA4
.text:00004BA4 ; Attributes: bp-based frame
.text:00004BA4
.text:00004BA4 ; void __thiscall AString::ReleaseBuf_CalcLen(AString *this, unsigned int)
.text:00004BA4                 public ?ReleaseBuf_CalcLen@AString@@QAEXI@Z
.text:00004BA4 ?ReleaseBuf_CalcLen@AString@@QAEXI@Z proc near
.text:00004BA4                                         ; CODE XREF: NArchive::NZip::CInArchive::ReadFileName(uint,AString &)+4Dp
.text:00004BA4
.text:00004BA4 var_8           = dword ptr -8
.text:00004BA4 var_4           = dword ptr -4
.text:00004BA4 arg_0           = dword ptr  8
.text:00004BA4
.text:00004BA4                 push    ebp
.text:00004BA5                 mov     ebp, esp
.text:00004BA7                 sub     esp, 8
.text:00004BAA                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004BB1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004BB8                 mov     [ebp+var_4], ecx
.text:00004BBB                 mov     eax, [ebp+var_4]
.text:00004BBE                 mov     ecx, [eax]
.text:00004BC0                 mov     [ebp+var_8], ecx
.text:00004BC3                 mov     edx, [ebp+var_8]
.text:00004BC6                 add     edx, [ebp+arg_0]
.text:00004BC9                 mov     byte ptr [edx], 0
.text:00004BCC                 mov     eax, [ebp+var_8]
.text:00004BCF                 push    eax             ; char *
.text:00004BD0                 call    ?MyStringLen@@YGIPBD@Z ; MyStringLen(char const *)
.text:00004BD5                 mov     ecx, [ebp+var_4]
.text:00004BD8                 mov     [ecx+4], eax
.text:00004BDB                 add     esp, 8
.text:00004BDE                 cmp     ebp, esp
.text:00004BE0                 call    __RTC_CheckEsp
.text:00004BE5                 mov     esp, ebp
.text:00004BE7                 pop     ebp
.text:00004BE8                 retn    4
.text:00004BE8 ?ReleaseBuf_CalcLen@AString@@QAEXI@Z endp
.text:00004BE8
.text:00004BE8 ; ---------------------------------------------------------------------------
.text:00004BEB                 align 4
.text:00004BEB _text           ends
.text:00004BEB
.text:00004BEC ; ===========================================================================
.text:00004BEC
.text:00004BEC ; Segment type: Pure code
.text:00004BEC ; Segment permissions: Read/Execute
.text:00004BEC _text           segment para public 'CODE' use32
.text:00004BEC                 assume cs:_text
.text:00004BEC                 ;org 4BECh
.text:00004BEC ; COMDAT (pick any)
.text:00004BEC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004BEC
.text:00004BEC ; =============== S U B R O U T I N E =======================================
.text:00004BEC
.text:00004BEC ; Attributes: bp-based frame
.text:00004BEC
.text:00004BEC ; unsigned int __stdcall MyStringLen(const char *)
.text:00004BEC                 public ?MyStringLen@@YGIPBD@Z
.text:00004BEC ?MyStringLen@@YGIPBD@Z proc near        ; CODE XREF: AString::ReleaseBuf_CalcLen(uint)+2Cp
.text:00004BEC
.text:00004BEC var_4           = dword ptr -4
.text:00004BEC arg_0           = dword ptr  8
.text:00004BEC
.text:00004BEC                 push    ebp
.text:00004BED                 mov     ebp, esp
.text:00004BEF                 push    ecx
.text:00004BF0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004BF7                 mov     [ebp+var_4], 0
.text:00004BFE                 jmp     short loc_4C09
.text:00004C00 ; ---------------------------------------------------------------------------
.text:00004C00
.text:00004C00 loc_4C00:                               ; CODE XREF: MyStringLen(char const *)+2Aj
.text:00004C00                 mov     eax, [ebp+var_4]
.text:00004C03                 add     eax, 1
.text:00004C06                 mov     [ebp+var_4], eax
.text:00004C09
.text:00004C09 loc_4C09:                               ; CODE XREF: MyStringLen(char const *)+12j
.text:00004C09                 mov     ecx, [ebp+arg_0]
.text:00004C0C                 add     ecx, [ebp+var_4]
.text:00004C0F                 movsx   edx, byte ptr [ecx]
.text:00004C12                 test    edx, edx
.text:00004C14                 jz      short loc_4C18
.text:00004C16                 jmp     short loc_4C00
.text:00004C18 ; ---------------------------------------------------------------------------
.text:00004C18
.text:00004C18 loc_4C18:                               ; CODE XREF: MyStringLen(char const *)+28j
.text:00004C18                 mov     eax, [ebp+var_4]
.text:00004C1B                 mov     esp, ebp
.text:00004C1D                 pop     ebp
.text:00004C1E                 retn    4
.text:00004C1E ?MyStringLen@@YGIPBD@Z endp
.text:00004C1E
.text:00004C1E ; ---------------------------------------------------------------------------
.text:00004C21                 align 4
.text:00004C21 _text           ends
.text:00004C21
.text:00004C24 ; ===========================================================================
.text:00004C24
.text:00004C24 ; Segment type: Pure code
.text:00004C24 ; Segment permissions: Read/Execute
.text:00004C24 _text           segment para public 'CODE' use32
.text:00004C24                 assume cs:_text
.text:00004C24                 ;org 4C24h
.text:00004C24 ; COMDAT (pick any)
.text:00004C24                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004C24
.text:00004C24 ; =============== S U B R O U T I N E =======================================
.text:00004C24
.text:00004C24 ; Attributes: bp-based frame
.text:00004C24
.text:00004C24 ; void __thiscall NArchive::NZip::CExtraBlock::Clear(NArchive::NZip::CExtraBlock *__hidden this)
.text:00004C24                 public ?Clear@CExtraBlock@NZip@NArchive@@QAEXXZ
.text:00004C24 ?Clear@CExtraBlock@NZip@NArchive@@QAEXXZ proc near
.text:00004C24                                         ; CODE XREF: NArchive::NZip::CInArchive::ReadExtra(uint,NArchive::NZip::CExtraBlock &,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &,uint &)+3Dp
.text:00004C24
.text:00004C24 var_4           = dword ptr -4
.text:00004C24
.text:00004C24                 push    ebp
.text:00004C25                 mov     ebp, esp
.text:00004C27                 push    ecx
.text:00004C28                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004C2F                 mov     [ebp+var_4], ecx
.text:00004C32                 mov     ecx, [ebp+var_4]
.text:00004C35                 call    ?Clear@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEXXZ ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Clear(void)
.text:00004C3A                 add     esp, 4
.text:00004C3D                 cmp     ebp, esp
.text:00004C3F                 call    __RTC_CheckEsp
.text:00004C44                 mov     esp, ebp
.text:00004C46                 pop     ebp
.text:00004C47                 retn
.text:00004C47 ?Clear@CExtraBlock@NZip@NArchive@@QAEXXZ endp
.text:00004C47
.text:00004C47 _text           ends
.text:00004C47
.text:00004C48 ; ===========================================================================
.text:00004C48
.text:00004C48 ; Segment type: Pure code
.text:00004C48 ; Segment permissions: Read/Execute
.text:00004C48 _text           segment para public 'CODE' use32
.text:00004C48                 assume cs:_text
.text:00004C48                 ;org 4C48h
.text:00004C48 ; COMDAT (pick any)
.text:00004C48                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004C48
.text:00004C48 ; =============== S U B R O U T I N E =======================================
.text:00004C48
.text:00004C48 ; Attributes: bp-based frame
.text:00004C48
.text:00004C48 ; _DWORD __thiscall NArchive::NZip::CExtraSubBlock::CExtraSubBlock(NArchive::NZip::CExtraSubBlock *__hidden this)
.text:00004C48                 public ??0CExtraSubBlock@NZip@NArchive@@QAE@XZ
.text:00004C48 ??0CExtraSubBlock@NZip@NArchive@@QAE@XZ proc near
.text:00004C48                                         ; CODE XREF: NArchive::NZip::CInArchive::ReadExtra(uint,NArchive::NZip::CExtraBlock &,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &,uint &)+55p
.text:00004C48
.text:00004C48 var_4           = dword ptr -4
.text:00004C48
.text:00004C48                 push    ebp
.text:00004C49                 mov     ebp, esp
.text:00004C4B                 push    ecx
.text:00004C4C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004C53                 mov     [ebp+var_4], ecx
.text:00004C56                 mov     ecx, [ebp+var_4]
.text:00004C59                 add     ecx, 4
.text:00004C5C                 call    ??0?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::CBuffer<uchar>(void)
.text:00004C61                 mov     eax, [ebp+var_4]
.text:00004C64                 add     esp, 4
.text:00004C67                 cmp     ebp, esp
.text:00004C69                 call    __RTC_CheckEsp
.text:00004C6E                 mov     esp, ebp
.text:00004C70                 pop     ebp
.text:00004C71                 retn
.text:00004C71 ??0CExtraSubBlock@NZip@NArchive@@QAE@XZ endp
.text:00004C71
.text:00004C71 ; ---------------------------------------------------------------------------
.text:00004C72                 align 4
.text:00004C72 _text           ends
.text:00004C72
.text:00004C74 ; ===========================================================================
.text:00004C74
.text:00004C74 ; Segment type: Pure code
.text:00004C74 ; Segment permissions: Read/Execute
.text:00004C74 _text           segment para public 'CODE' use32
.text:00004C74                 assume cs:_text
.text:00004C74                 ;org 4C74h
.text:00004C74 ; COMDAT (pick any)
.text:00004C74                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004C74
.text:00004C74 ; =============== S U B R O U T I N E =======================================
.text:00004C74
.text:00004C74 ; Attributes: bp-based frame
.text:00004C74
.text:00004C74 ; _DWORD __thiscall NArchive::NZip::CExtraSubBlock::~CExtraSubBlock(NArchive::NZip::CExtraSubBlock *__hidden this)
.text:00004C74                 public ??1CExtraSubBlock@NZip@NArchive@@QAE@XZ
.text:00004C74 ??1CExtraSubBlock@NZip@NArchive@@QAE@XZ proc near
.text:00004C74                                         ; CODE XREF: NArchive::NZip::CInArchive::ReadExtra(uint,NArchive::NZip::CExtraBlock &,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &,uint &)+ADp
.text:00004C74                                         ; NArchive::NZip::CInArchive::ReadExtra(uint,NArchive::NZip::CExtraBlock &,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &,uint &)+105p ...
.text:00004C74
.text:00004C74 var_4           = dword ptr -4
.text:00004C74
.text:00004C74                 push    ebp
.text:00004C75                 mov     ebp, esp
.text:00004C77                 push    ecx
.text:00004C78                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004C7F                 mov     [ebp+var_4], ecx
.text:00004C82                 mov     ecx, [ebp+var_4]
.text:00004C85                 add     ecx, 4
.text:00004C88                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:00004C8D                 add     esp, 4
.text:00004C90                 cmp     ebp, esp
.text:00004C92                 call    __RTC_CheckEsp
.text:00004C97                 mov     esp, ebp
.text:00004C99                 pop     ebp
.text:00004C9A                 retn
.text:00004C9A ??1CExtraSubBlock@NZip@NArchive@@QAE@XZ endp
.text:00004C9A
.text:00004C9A ; ---------------------------------------------------------------------------
.text:00004C9B                 align 4
.text:00004C9B _text           ends
.text:00004C9B
.text:00004C9C ; ===========================================================================
.text:00004C9C
.text:00004C9C ; Segment type: Pure code
.text:00004C9C ; Segment permissions: Read/Execute
.text:00004C9C _text           segment para public 'CODE' use32
.text:00004C9C                 assume cs:_text
.text:00004C9C                 ;org 4C9Ch
.text:00004C9C ; COMDAT (pick any)
.text:00004C9C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004C9C
.text:00004C9C ; =============== S U B R O U T I N E =======================================
.text:00004C9C
.text:00004C9C ; Attributes: bp-based frame
.text:00004C9C
.text:00004C9C ; unsigned int __thiscall AString::Len(AString *__hidden this)
.text:00004C9C                 public ?Len@AString@@QBEIXZ
.text:00004C9C ?Len@AString@@QBEIXZ proc near          ; CODE XREF: NArchive::NZip::CInArchive::ReadLocalItem(NArchive::NZip::CItemEx &)+157p
.text:00004C9C                                         ; NArchive::NZip::IsStrangeItem(NArchive::NZip::CItem const &)+11p ...
.text:00004C9C
.text:00004C9C var_4           = dword ptr -4
.text:00004C9C
.text:00004C9C                 push    ebp
.text:00004C9D                 mov     ebp, esp
.text:00004C9F                 push    ecx
.text:00004CA0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004CA7                 mov     [ebp+var_4], ecx
.text:00004CAA                 mov     eax, [ebp+var_4]
.text:00004CAD                 mov     eax, [eax+4]
.text:00004CB0                 mov     esp, ebp
.text:00004CB2                 pop     ebp
.text:00004CB3                 retn
.text:00004CB3 ?Len@AString@@QBEIXZ endp
.text:00004CB3
.text:00004CB3 _text           ends
.text:00004CB3
.text:00004CB4 ; ===========================================================================
.text:00004CB4
.text:00004CB4 ; Segment type: Pure code
.text:00004CB4 ; Segment permissions: Read/Execute
.text:00004CB4 _text           segment para public 'CODE' use32
.text:00004CB4                 assume cs:_text
.text:00004CB4                 ;org 4CB4h
.text:00004CB4 ; COMDAT (pick any)
.text:00004CB4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004CB4
.text:00004CB4 ; =============== S U B R O U T I N E =======================================
.text:00004CB4
.text:00004CB4 ; Attributes: bp-based frame
.text:00004CB4
.text:00004CB4 ; int __stdcall operator!=(AString *, AString *)
.text:00004CB4                 public ??9@YG_NABVAString@@0@Z
.text:00004CB4 ??9@YG_NABVAString@@0@Z proc near       ; CODE XREF: NArchive::NZip::AreItemsEqual(NArchive::NZip::CItemEx const &,NArchive::NZip::CItemEx const &)+B1p
.text:00004CB4                                         ; NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+D3Ap
.text:00004CB4
.text:00004CB4 var_4           = dword ptr -4
.text:00004CB4 arg_0           = dword ptr  8
.text:00004CB4 arg_4           = dword ptr  0Ch
.text:00004CB4
.text:00004CB4                 push    ebp
.text:00004CB5                 mov     ebp, esp
.text:00004CB7                 push    ecx
.text:00004CB8                 push    esi
.text:00004CB9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004CC0                 mov     ecx, [ebp+arg_0] ; this
.text:00004CC3                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:00004CC8                 mov     esi, eax
.text:00004CCA                 mov     ecx, [ebp+arg_4] ; this
.text:00004CCD                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:00004CD2                 cmp     esi, eax
.text:00004CD4                 jnz     short loc_4CFD
.text:00004CD6                 mov     ecx, [ebp+arg_4]
.text:00004CD9                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:00004CDE                 push    eax             ; Str2
.text:00004CDF                 mov     ecx, [ebp+arg_0]
.text:00004CE2                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:00004CE7                 push    eax             ; Str1
.text:00004CE8                 call    _strcmp
.text:00004CED                 add     esp, 8
.text:00004CF0                 test    eax, eax
.text:00004CF2                 jnz     short loc_4CFD
.text:00004CF4                 mov     [ebp+var_4], 0
.text:00004CFB                 jmp     short loc_4D04
.text:00004CFD ; ---------------------------------------------------------------------------
.text:00004CFD
.text:00004CFD loc_4CFD:                               ; CODE XREF: operator!=(AString const &,AString const &)+20j
.text:00004CFD                                         ; operator!=(AString const &,AString const &)+3Ej
.text:00004CFD                 mov     [ebp+var_4], 1
.text:00004D04
.text:00004D04 loc_4D04:                               ; CODE XREF: operator!=(AString const &,AString const &)+47j
.text:00004D04                 mov     al, byte ptr [ebp+var_4]
.text:00004D07                 pop     esi
.text:00004D08                 add     esp, 4
.text:00004D0B                 cmp     ebp, esp
.text:00004D0D                 call    __RTC_CheckEsp
.text:00004D12                 mov     esp, ebp
.text:00004D14                 pop     ebp
.text:00004D15                 retn    8
.text:00004D15 ??9@YG_NABVAString@@0@Z endp
.text:00004D15
.text:00004D15 _text           ends
.text:00004D15
.text:00004D18 ; ===========================================================================
.text:00004D18
.text:00004D18 ; Segment type: Pure code
.text:00004D18 ; Segment permissions: Read/Execute
.text:00004D18 _text           segment para public 'CODE' use32
.text:00004D18                 assume cs:_text
.text:00004D18                 ;org 4D18h
.text:00004D18 ; COMDAT (pick any)
.text:00004D18                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004D18
.text:00004D18 ; =============== S U B R O U T I N E =======================================
.text:00004D18
.text:00004D18 ; Attributes: bp-based frame
.text:00004D18
.text:00004D18 ; public: __thiscall AString::operator char const *(void)const
.text:00004D18                 public ??BAString@@QBEPBDXZ
.text:00004D18 ??BAString@@QBEPBDXZ proc near          ; CODE XREF: operator!=(AString const &,AString const &)+25p
.text:00004D18                                         ; operator!=(AString const &,AString const &)+2Ep
.text:00004D18
.text:00004D18 var_4           = dword ptr -4
.text:00004D18
.text:00004D18                 push    ebp
.text:00004D19                 mov     ebp, esp
.text:00004D1B                 push    ecx
.text:00004D1C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004D23                 mov     [ebp+var_4], ecx
.text:00004D26                 mov     eax, [ebp+var_4]
.text:00004D29                 mov     eax, [eax]
.text:00004D2B                 mov     esp, ebp
.text:00004D2D                 pop     ebp
.text:00004D2E                 retn
.text:00004D2E ??BAString@@QBEPBDXZ endp
.text:00004D2E
.text:00004D2E ; ---------------------------------------------------------------------------
.text:00004D2F                 align 10h
.text:00004D2F _text           ends
.text:00004D2F
.text:00004D30 ; ===========================================================================
.text:00004D30
.text:00004D30 ; Segment type: Pure code
.text:00004D30 ; Segment permissions: Read/Execute
.text:00004D30 _text           segment para public 'CODE' use32
.text:00004D30                 assume cs:_text
.text:00004D30                 ;org 4D30h
.text:00004D30 ; COMDAT (pick any)
.text:00004D30                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004D30
.text:00004D30 ; =============== S U B R O U T I N E =======================================
.text:00004D30
.text:00004D30 ; Attributes: bp-based frame
.text:00004D30
.text:00004D30 ; bool __thiscall NArchive::NZip::CLocalItem::HasDescriptor(NArchive::NZip::CLocalItem *__hidden this)
.text:00004D30                 public ?HasDescriptor@CLocalItem@NZip@NArchive@@QBE_NXZ
.text:00004D30 ?HasDescriptor@CLocalItem@NZip@NArchive@@QBE_NXZ proc near
.text:00004D30                                         ; CODE XREF: NArchive::NZip::AreItemsEqual(NArchive::NZip::CItemEx const &,NArchive::NZip::CItemEx const &)+35p
.text:00004D30                                         ; NArchive::NZip::CInArchive::ReadLocalItemAfterCdItemFull(NArchive::NZip::CItemEx &)+7Fp ...
.text:00004D30
.text:00004D30 var_4           = dword ptr -4
.text:00004D30
.text:00004D30                 push    ebp
.text:00004D31                 mov     ebp, esp
.text:00004D33                 push    ecx
.text:00004D34                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004D3B                 mov     [ebp+var_4], ecx
.text:00004D3E                 mov     eax, [ebp+var_4]
.text:00004D41                 movzx   eax, word ptr [eax]
.text:00004D44                 and     eax, 8
.text:00004D47                 neg     eax
.text:00004D49                 sbb     eax, eax
.text:00004D4B                 neg     eax
.text:00004D4D                 mov     esp, ebp
.text:00004D4F                 pop     ebp
.text:00004D50                 retn
.text:00004D50 ?HasDescriptor@CLocalItem@NZip@NArchive@@QBE_NXZ endp
.text:00004D50
.text:00004D50 ; ---------------------------------------------------------------------------
.text:00004D51                 align 4
.text:00004D51 _text           ends
.text:00004D51
.text:00004D54 ; ===========================================================================
.text:00004D54
.text:00004D54 ; Segment type: Pure code
.text:00004D54 ; Segment permissions: Read/Execute
.text:00004D54 _text           segment para public 'CODE' use32
.text:00004D54                 assume cs:_text
.text:00004D54                 ;org 4D54h
.text:00004D54 ; COMDAT (pick any)
.text:00004D54                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004D54
.text:00004D54 ; =============== S U B R O U T I N E =======================================
.text:00004D54
.text:00004D54 ; Attributes: bp-based frame
.text:00004D54
.text:00004D54 ; _DWORD __thiscall NArchive::NZip::CItemEx::CItemEx(NArchive::NZip::CItemEx *__hidden this)
.text:00004D54                 public ??0CItemEx@NZip@NArchive@@QAE@XZ
.text:00004D54 ??0CItemEx@NZip@NArchive@@QAE@XZ proc near
.text:00004D54                                         ; CODE XREF: NArchive::NZip::CInArchive::ReadLocalItemAfterCdItem(NArchive::NZip::CItemEx &)+E5p
.text:00004D54                                         ; NArchive::NZip::CInArchive::TryReadCd(CObjectVector<NArchive::NZip::CItemEx> &,unsigned __int64,unsigned __int64,NArchive::NZip::CProgressVirt *)+131p ...
.text:00004D54
.text:00004D54 var_4           = dword ptr -4
.text:00004D54
.text:00004D54                 push    ebp
.text:00004D55                 mov     ebp, esp
.text:00004D57                 push    ecx
.text:00004D58                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004D5F                 mov     [ebp+var_4], ecx
.text:00004D62                 mov     ecx, [ebp+var_4] ; this
.text:00004D65                 call    ??0CItem@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItem::CItem(void)
.text:00004D6A                 mov     eax, [ebp+var_4]
.text:00004D6D                 add     esp, 4
.text:00004D70                 cmp     ebp, esp
.text:00004D72                 call    __RTC_CheckEsp
.text:00004D77                 mov     esp, ebp
.text:00004D79                 pop     ebp
.text:00004D7A                 retn
.text:00004D7A ??0CItemEx@NZip@NArchive@@QAE@XZ endp
.text:00004D7A
.text:00004D7A ; ---------------------------------------------------------------------------
.text:00004D7B                 align 4
.text:00004D7B _text           ends
.text:00004D7B
.text:00004D7C ; ===========================================================================
.text:00004D7C
.text:00004D7C ; Segment type: Pure code
.text:00004D7C ; Segment permissions: Read/Execute
.text:00004D7C _text           segment para public 'CODE' use32
.text:00004D7C                 assume cs:_text
.text:00004D7C                 ;org 4D7Ch
.text:00004D7C ; COMDAT (pick any)
.text:00004D7C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004D7C
.text:00004D7C ; =============== S U B R O U T I N E =======================================
.text:00004D7C
.text:00004D7C ; Attributes: bp-based frame
.text:00004D7C
.text:00004D7C ; _DWORD __thiscall NArchive::NZip::CItem::CItem(NArchive::NZip::CItem *__hidden this)
.text:00004D7C                 public ??0CItem@NZip@NArchive@@QAE@XZ
.text:00004D7C ??0CItem@NZip@NArchive@@QAE@XZ proc near
.text:00004D7C                                         ; CODE XREF: NArchive::NZip::CItemEx::CItemEx(void)+11p
.text:00004D7C
.text:00004D7C var_10          = dword ptr -10h
.text:00004D7C var_C           = dword ptr -0Ch
.text:00004D7C var_4           = dword ptr -4
.text:00004D7C
.text:00004D7C                 push    ebp
.text:00004D7D                 mov     ebp, esp
.text:00004D7F                 push    0FFFFFFFFh
.text:00004D81                 push    offset __ehhandler$??0CItem@NZip@NArchive@@QAE@XZ
.text:00004D86                 mov     eax, large fs:0
.text:00004D8C                 push    eax
.text:00004D8D                 push    ecx
.text:00004D8E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00004D95                 mov     eax, dword ptr ds:___security_cookie
.text:00004D9A                 xor     eax, ebp
.text:00004D9C                 push    eax
.text:00004D9D                 lea     eax, [ebp+var_C]
.text:00004DA0                 mov     large fs:0, eax
.text:00004DA6                 mov     [ebp+var_10], ecx
.text:00004DA9                 mov     ecx, [ebp+var_10] ; this
.text:00004DAC                 call    ??0CLocalItem@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CLocalItem::CLocalItem(void)
.text:00004DB1                 mov     [ebp+var_4], 0
.text:00004DB8                 xor     eax, eax
.text:00004DBA                 mov     ecx, [ebp+var_10]
.text:00004DBD                 mov     [ecx+3Ah], ax
.text:00004DC1                 mov     edx, [ebp+var_10]
.text:00004DC4                 mov     dword ptr [edx+3Ch], 0
.text:00004DCB                 mov     ecx, [ebp+var_10]
.text:00004DCE                 add     ecx, 48h ; 'H'  ; this
.text:00004DD1                 call    ??0CExtraBlock@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CExtraBlock::CExtraBlock(void)
.text:00004DD6                 mov     byte ptr [ebp+var_4], 1
.text:00004DDA                 mov     ecx, [ebp+var_10]
.text:00004DDD                 add     ecx, 54h ; 'T'
.text:00004DE0                 call    ??0?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::CBuffer<uchar>(void)
.text:00004DE5                 mov     eax, [ebp+var_10]
.text:00004DE8                 mov     byte ptr [eax+5Ch], 0
.text:00004DEC                 mov     ecx, [ebp+var_10]
.text:00004DEF                 mov     byte ptr [ecx+5Dh], 0
.text:00004DF3                 mov     edx, [ebp+var_10]
.text:00004DF6                 mov     byte ptr [edx+38h], 0
.text:00004DFA                 mov     eax, [ebp+var_10]
.text:00004DFD                 mov     byte ptr [eax+39h], 0
.text:00004E01                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004E08                 mov     eax, [ebp+var_10]
.text:00004E0B                 mov     ecx, [ebp+var_C]
.text:00004E0E                 mov     large fs:0, ecx
.text:00004E15                 pop     ecx
.text:00004E16                 add     esp, 10h
.text:00004E19                 cmp     ebp, esp
.text:00004E1B                 call    __RTC_CheckEsp
.text:00004E20                 mov     esp, ebp
.text:00004E22                 pop     ebp
.text:00004E23                 retn
.text:00004E23 ??0CItem@NZip@NArchive@@QAE@XZ endp
.text:00004E23
.text:00004E23 _text           ends
.text:00004E23
.text$x:00004E24 ; ===========================================================================
.text$x:00004E24
.text$x:00004E24 ; Segment type: Pure code
.text$x:00004E24 ; Segment permissions: Read/Execute
.text$x:00004E24 _text$x         segment para public 'CODE' use32
.text$x:00004E24                 assume cs:_text$x
.text$x:00004E24                 ;org 4E24h
.text$x:00004E24 ; COMDAT (pick associative to section at 4D7C)
.text$x:00004E24                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00004E24
.text$x:00004E24 ; =============== S U B R O U T I N E =======================================
.text$x:00004E24
.text$x:00004E24
.text$x:00004E24 __unwindfunclet$??0CItem@NZip@NArchive@@QAE@XZ$0 proc near
.text$x:00004E24                                         ; DATA XREF: .xdata$x:00004E58o
.text$x:00004E24                 mov     ecx, [ebp-10h]  ; this
.text$x:00004E27                 jmp     ??1CLocalItem@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CLocalItem::~CLocalItem(void)
.text$x:00004E27 __unwindfunclet$??0CItem@NZip@NArchive@@QAE@XZ$0 endp
.text$x:00004E27
.text$x:00004E2C
.text$x:00004E2C ; =============== S U B R O U T I N E =======================================
.text$x:00004E2C
.text$x:00004E2C
.text$x:00004E2C __unwindfunclet$??0CItem@NZip@NArchive@@QAE@XZ$1 proc near
.text$x:00004E2C                                         ; DATA XREF: .xdata$x:00004E60o
.text$x:00004E2C                 mov     ecx, [ebp-10h]
.text$x:00004E2F                 add     ecx, 48h ; 'H'  ; this
.text$x:00004E32                 jmp     ??1CExtraBlock@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CExtraBlock::~CExtraBlock(void)
.text$x:00004E32 __unwindfunclet$??0CItem@NZip@NArchive@@QAE@XZ$1 endp
.text$x:00004E32
.text$x:00004E37
.text$x:00004E37 ; =============== S U B R O U T I N E =======================================
.text$x:00004E37
.text$x:00004E37
.text$x:00004E37 __ehhandler$??0CItem@NZip@NArchive@@QAE@XZ proc near
.text$x:00004E37                                         ; DATA XREF: NArchive::NZip::CItem::CItem(void)+5o
.text$x:00004E37
.text$x:00004E37 arg_4           = dword ptr  8
.text$x:00004E37
.text$x:00004E37                 mov     edx, [esp+arg_4]
.text$x:00004E3B                 lea     eax, [edx+0Ch]
.text$x:00004E3E                 mov     ecx, [edx-8]
.text$x:00004E41                 xor     ecx, eax
.text$x:00004E43                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004E48                 mov     eax, offset __ehfuncinfo$??0CItem@NZip@NArchive@@QAE@XZ
.text$x:00004E4D                 jmp     ___CxxFrameHandler3
.text$x:00004E4D __ehhandler$??0CItem@NZip@NArchive@@QAE@XZ endp
.text$x:00004E4D
.text$x:00004E4D ; ---------------------------------------------------------------------------
.text$x:00004E52                 align 4
.text$x:00004E52 _text$x         ends
.text$x:00004E52
.xdata$x:00004E54 ; ===========================================================================
.xdata$x:00004E54
.xdata$x:00004E54 ; Segment type: Pure data
.xdata$x:00004E54 ; Segment permissions: Read
.xdata$x:00004E54 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004E54                 assume cs:_xdata$x
.xdata$x:00004E54                 ;org 4E54h
.xdata$x:00004E54 ; COMDAT (pick associative to section at 4D7C)
.xdata$x:00004E54 __unwindtable$??0CItem@NZip@NArchive@@QAE@XZ db 0FFh
.xdata$x:00004E54                                         ; DATA XREF: .xdata$x:00004E6Co
.xdata$x:00004E55                 db 0FFh
.xdata$x:00004E56                 db 0FFh
.xdata$x:00004E57                 db 0FFh
.xdata$x:00004E58                 dd offset __unwindfunclet$??0CItem@NZip@NArchive@@QAE@XZ$0
.xdata$x:00004E5C                 align 10h
.xdata$x:00004E60                 dd offset __unwindfunclet$??0CItem@NZip@NArchive@@QAE@XZ$1
.xdata$x:00004E64 __ehfuncinfo$??0CItem@NZip@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00004E64                                         ; DATA XREF: __ehhandler$??0CItem@NZip@NArchive@@QAE@XZ+11o
.xdata$x:00004E65                 db    5
.xdata$x:00004E66                 db  93h ; ô
.xdata$x:00004E67                 db  19h
.xdata$x:00004E68                 db    2
.xdata$x:00004E69                 db    0
.xdata$x:00004E6A                 db    0
.xdata$x:00004E6B                 db    0
.xdata$x:00004E6C                 dd offset __unwindtable$??0CItem@NZip@NArchive@@QAE@XZ
.xdata$x:00004E70                 db    0
.xdata$x:00004E71                 db    0
.xdata$x:00004E72                 db    0
.xdata$x:00004E73                 db    0
.xdata$x:00004E74                 db    0
.xdata$x:00004E75                 db    0
.xdata$x:00004E76                 db    0
.xdata$x:00004E77                 db    0
.xdata$x:00004E78                 db    0
.xdata$x:00004E79                 db    0
.xdata$x:00004E7A                 db    0
.xdata$x:00004E7B                 db    0
.xdata$x:00004E7C                 db    0
.xdata$x:00004E7D                 db    0
.xdata$x:00004E7E                 db    0
.xdata$x:00004E7F                 db    0
.xdata$x:00004E80                 db    0
.xdata$x:00004E81                 db    0
.xdata$x:00004E82                 db    0
.xdata$x:00004E83                 db    0
.xdata$x:00004E84                 db    1
.xdata$x:00004E85                 db    0
.xdata$x:00004E86                 db    0
.xdata$x:00004E87                 db    0
.xdata$x:00004E87 _xdata$x        ends
.xdata$x:00004E87
.text:00004E88 ; ===========================================================================
.text:00004E88
.text:00004E88 ; Segment type: Pure code
.text:00004E88 ; Segment permissions: Read/Execute
.text:00004E88 _text           segment para public 'CODE' use32
.text:00004E88                 assume cs:_text
.text:00004E88                 ;org 4E88h
.text:00004E88 ; COMDAT (pick any)
.text:00004E88                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004E88
.text:00004E88 ; =============== S U B R O U T I N E =======================================
.text:00004E88
.text:00004E88 ; Attributes: bp-based frame
.text:00004E88
.text:00004E88 ; _DWORD __thiscall NArchive::NZip::CLocalItem::CLocalItem(NArchive::NZip::CLocalItem *__hidden this)
.text:00004E88                 public ??0CLocalItem@NZip@NArchive@@QAE@XZ
.text:00004E88 ??0CLocalItem@NZip@NArchive@@QAE@XZ proc near
.text:00004E88                                         ; CODE XREF: NArchive::NZip::CItem::CItem(void)+30p
.text:00004E88
.text:00004E88 var_10          = dword ptr -10h
.text:00004E88 var_C           = dword ptr -0Ch
.text:00004E88 var_4           = dword ptr -4
.text:00004E88
.text:00004E88                 push    ebp
.text:00004E89                 mov     ebp, esp
.text:00004E8B                 push    0FFFFFFFFh
.text:00004E8D                 push    offset __ehhandler$??0CLocalItem@NZip@NArchive@@QAE@XZ
.text:00004E92                 mov     eax, large fs:0
.text:00004E98                 push    eax
.text:00004E99                 push    ecx
.text:00004E9A                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00004EA1                 mov     eax, dword ptr ds:___security_cookie
.text:00004EA6                 xor     eax, ebp
.text:00004EA8                 push    eax
.text:00004EA9                 lea     eax, [ebp+var_C]
.text:00004EAC                 mov     large fs:0, eax
.text:00004EB2                 mov     [ebp+var_10], ecx
.text:00004EB5                 mov     ecx, [ebp+var_10]
.text:00004EB8                 add     ecx, 20h ; ' '
.text:00004EBB                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:00004EC0                 mov     [ebp+var_4], 0
.text:00004EC7                 mov     ecx, [ebp+var_10]
.text:00004ECA                 add     ecx, 2Ch ; ','  ; this
.text:00004ECD                 call    ??0CExtraBlock@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CExtraBlock::CExtraBlock(void)
.text:00004ED2                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004ED9                 mov     eax, [ebp+var_10]
.text:00004EDC                 mov     ecx, [ebp+var_C]
.text:00004EDF                 mov     large fs:0, ecx
.text:00004EE6                 pop     ecx
.text:00004EE7                 add     esp, 10h
.text:00004EEA                 cmp     ebp, esp
.text:00004EEC                 call    __RTC_CheckEsp
.text:00004EF1                 mov     esp, ebp
.text:00004EF3                 pop     ebp
.text:00004EF4                 retn
.text:00004EF4 ??0CLocalItem@NZip@NArchive@@QAE@XZ endp
.text:00004EF4
.text:00004EF4 ; ---------------------------------------------------------------------------
.text:00004EF5                 align 4
.text:00004EF5 _text           ends
.text:00004EF5
.text$x:00004EF8 ; ===========================================================================
.text$x:00004EF8
.text$x:00004EF8 ; Segment type: Pure code
.text$x:00004EF8 ; Segment permissions: Read/Execute
.text$x:00004EF8 _text$x         segment para public 'CODE' use32
.text$x:00004EF8                 assume cs:_text$x
.text$x:00004EF8                 ;org 4EF8h
.text$x:00004EF8 ; COMDAT (pick associative to section at 4E88)
.text$x:00004EF8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00004EF8
.text$x:00004EF8 ; =============== S U B R O U T I N E =======================================
.text$x:00004EF8
.text$x:00004EF8
.text$x:00004EF8 __unwindfunclet$??0CLocalItem@NZip@NArchive@@QAE@XZ$0 proc near
.text$x:00004EF8                                         ; DATA XREF: .xdata$x:00004F24o
.text$x:00004EF8                 mov     ecx, [ebp-10h]
.text$x:00004EFB                 add     ecx, 20h ; ' '  ; this
.text$x:00004EFE                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00004EFE __unwindfunclet$??0CLocalItem@NZip@NArchive@@QAE@XZ$0 endp
.text$x:00004EFE
.text$x:00004F03
.text$x:00004F03 ; =============== S U B R O U T I N E =======================================
.text$x:00004F03
.text$x:00004F03
.text$x:00004F03 __ehhandler$??0CLocalItem@NZip@NArchive@@QAE@XZ proc near
.text$x:00004F03                                         ; DATA XREF: NArchive::NZip::CLocalItem::CLocalItem(void)+5o
.text$x:00004F03
.text$x:00004F03 arg_4           = dword ptr  8
.text$x:00004F03
.text$x:00004F03                 mov     edx, [esp+arg_4]
.text$x:00004F07                 lea     eax, [edx+0Ch]
.text$x:00004F0A                 mov     ecx, [edx-8]
.text$x:00004F0D                 xor     ecx, eax
.text$x:00004F0F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004F14                 mov     eax, offset __ehfuncinfo$??0CLocalItem@NZip@NArchive@@QAE@XZ
.text$x:00004F19                 jmp     ___CxxFrameHandler3
.text$x:00004F19 __ehhandler$??0CLocalItem@NZip@NArchive@@QAE@XZ endp
.text$x:00004F19
.text$x:00004F19 ; ---------------------------------------------------------------------------
.text$x:00004F1E                 align 10h
.text$x:00004F1E _text$x         ends
.text$x:00004F1E
.xdata$x:00004F20 ; ===========================================================================
.xdata$x:00004F20
.xdata$x:00004F20 ; Segment type: Pure data
.xdata$x:00004F20 ; Segment permissions: Read
.xdata$x:00004F20 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004F20                 assume cs:_xdata$x
.xdata$x:00004F20                 ;org 4F20h
.xdata$x:00004F20 ; COMDAT (pick associative to section at 4E88)
.xdata$x:00004F20 __unwindtable$??0CLocalItem@NZip@NArchive@@QAE@XZ db 0FFh
.xdata$x:00004F20                                         ; DATA XREF: .xdata$x:00004F30o
.xdata$x:00004F21                 db 0FFh
.xdata$x:00004F22                 db 0FFh
.xdata$x:00004F23                 db 0FFh
.xdata$x:00004F24                 dd offset __unwindfunclet$??0CLocalItem@NZip@NArchive@@QAE@XZ$0
.xdata$x:00004F28 __ehfuncinfo$??0CLocalItem@NZip@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00004F28                                         ; DATA XREF: __ehhandler$??0CLocalItem@NZip@NArchive@@QAE@XZ+11o
.xdata$x:00004F29                 db    5
.xdata$x:00004F2A                 db  93h ; ô
.xdata$x:00004F2B                 db  19h
.xdata$x:00004F2C                 db    1
.xdata$x:00004F2D                 db    0
.xdata$x:00004F2E                 db    0
.xdata$x:00004F2F                 db    0
.xdata$x:00004F30                 dd offset __unwindtable$??0CLocalItem@NZip@NArchive@@QAE@XZ
.xdata$x:00004F34                 db    0
.xdata$x:00004F35                 db    0
.xdata$x:00004F36                 db    0
.xdata$x:00004F37                 db    0
.xdata$x:00004F38                 db    0
.xdata$x:00004F39                 db    0
.xdata$x:00004F3A                 db    0
.xdata$x:00004F3B                 db    0
.xdata$x:00004F3C                 db    0
.xdata$x:00004F3D                 db    0
.xdata$x:00004F3E                 db    0
.xdata$x:00004F3F                 db    0
.xdata$x:00004F40                 db    0
.xdata$x:00004F41                 db    0
.xdata$x:00004F42                 db    0
.xdata$x:00004F43                 db    0
.xdata$x:00004F44                 db    0
.xdata$x:00004F45                 db    0
.xdata$x:00004F46                 db    0
.xdata$x:00004F47                 db    0
.xdata$x:00004F48                 db    1
.xdata$x:00004F49                 db    0
.xdata$x:00004F4A                 db    0
.xdata$x:00004F4B                 db    0
.xdata$x:00004F4B _xdata$x        ends
.xdata$x:00004F4B
.text:00004F4C ; ===========================================================================
.text:00004F4C
.text:00004F4C ; Segment type: Pure code
.text:00004F4C ; Segment permissions: Read/Execute
.text:00004F4C _text           segment para public 'CODE' use32
.text:00004F4C                 assume cs:_text
.text:00004F4C                 ;org 4F4Ch
.text:00004F4C ; COMDAT (pick any)
.text:00004F4C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004F4C
.text:00004F4C ; =============== S U B R O U T I N E =======================================
.text:00004F4C
.text:00004F4C ; Attributes: bp-based frame
.text:00004F4C
.text:00004F4C ; _DWORD __thiscall AString::~AString(AString *__hidden this)
.text:00004F4C                 public ??1AString@@QAE@XZ
.text:00004F4C ??1AString@@QAE@XZ proc near            ; CODE XREF: __unwindfunclet$??0CLocalItem@NZip@NArchive@@QAE@XZ$0+6j
.text:00004F4C                                         ; NArchive::NZip::CLocalItem::~CLocalItem(void)+4Cp ...
.text:00004F4C
.text:00004F4C var_8           = dword ptr -8
.text:00004F4C var_4           = dword ptr -4
.text:00004F4C
.text:00004F4C                 push    ebp
.text:00004F4D                 mov     ebp, esp
.text:00004F4F                 sub     esp, 8
.text:00004F52                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004F59                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004F60                 mov     [ebp+var_4], ecx
.text:00004F63                 mov     eax, [ebp+var_4]
.text:00004F66                 mov     ecx, [eax]
.text:00004F68                 mov     [ebp+var_8], ecx
.text:00004F6B                 mov     edx, [ebp+var_8]
.text:00004F6E                 push    edx             ; void *
.text:00004F6F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00004F74                 add     esp, 4
.text:00004F77                 add     esp, 8
.text:00004F7A                 cmp     ebp, esp
.text:00004F7C                 call    __RTC_CheckEsp
.text:00004F81                 mov     esp, ebp
.text:00004F83                 pop     ebp
.text:00004F84                 retn
.text:00004F84 ??1AString@@QAE@XZ endp
.text:00004F84
.text:00004F84 ; ---------------------------------------------------------------------------
.text:00004F85                 align 4
.text:00004F85 _text           ends
.text:00004F85
.text:00004F88 ; ===========================================================================
.text:00004F88
.text:00004F88 ; Segment type: Pure code
.text:00004F88 ; Segment permissions: Read/Execute
.text:00004F88 _text           segment para public 'CODE' use32
.text:00004F88                 assume cs:_text
.text:00004F88                 ;org 4F88h
.text:00004F88 ; COMDAT (pick any)
.text:00004F88                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004F88
.text:00004F88 ; =============== S U B R O U T I N E =======================================
.text:00004F88
.text:00004F88 ; Attributes: bp-based frame
.text:00004F88
.text:00004F88 ; _DWORD __thiscall NArchive::NZip::CLocalItem::~CLocalItem(NArchive::NZip::CLocalItem *__hidden this)
.text:00004F88                 public ??1CLocalItem@NZip@NArchive@@QAE@XZ
.text:00004F88 ??1CLocalItem@NZip@NArchive@@QAE@XZ proc near
.text:00004F88                                         ; CODE XREF: __unwindfunclet$??0CItem@NZip@NArchive@@QAE@XZ$0+3j
.text:00004F88                                         ; NArchive::NZip::CItem::~CItem(void)+58p ...
.text:00004F88
.text:00004F88 var_10          = dword ptr -10h
.text:00004F88 var_C           = dword ptr -0Ch
.text:00004F88 var_4           = dword ptr -4
.text:00004F88
.text:00004F88                 push    ebp
.text:00004F89                 mov     ebp, esp
.text:00004F8B                 push    0FFFFFFFFh
.text:00004F8D                 push    offset __ehhandler$??1CLocalItem@NZip@NArchive@@QAE@XZ
.text:00004F92                 mov     eax, large fs:0
.text:00004F98                 push    eax
.text:00004F99                 push    ecx
.text:00004F9A                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00004FA1                 mov     eax, dword ptr ds:___security_cookie
.text:00004FA6                 xor     eax, ebp
.text:00004FA8                 push    eax
.text:00004FA9                 lea     eax, [ebp+var_C]
.text:00004FAC                 mov     large fs:0, eax
.text:00004FB2                 mov     [ebp+var_10], ecx
.text:00004FB5                 mov     [ebp+var_4], 0
.text:00004FBC                 mov     ecx, [ebp+var_10]
.text:00004FBF                 add     ecx, 2Ch ; ','  ; this
.text:00004FC2                 call    ??1CExtraBlock@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CExtraBlock::~CExtraBlock(void)
.text:00004FC7                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004FCE                 mov     ecx, [ebp+var_10]
.text:00004FD1                 add     ecx, 20h ; ' '  ; this
.text:00004FD4                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00004FD9                 mov     ecx, [ebp+var_C]
.text:00004FDC                 mov     large fs:0, ecx
.text:00004FE3                 pop     ecx
.text:00004FE4                 add     esp, 10h
.text:00004FE7                 cmp     ebp, esp
.text:00004FE9                 call    __RTC_CheckEsp
.text:00004FEE                 mov     esp, ebp
.text:00004FF0                 pop     ebp
.text:00004FF1                 retn
.text:00004FF1 ??1CLocalItem@NZip@NArchive@@QAE@XZ endp
.text:00004FF1
.text:00004FF1 ; ---------------------------------------------------------------------------
.text:00004FF2                 align 4
.text:00004FF2 _text           ends
.text:00004FF2
.text$x:00004FF4 ; ===========================================================================
.text$x:00004FF4
.text$x:00004FF4 ; Segment type: Pure code
.text$x:00004FF4 ; Segment permissions: Read/Execute
.text$x:00004FF4 _text$x         segment para public 'CODE' use32
.text$x:00004FF4                 assume cs:_text$x
.text$x:00004FF4                 ;org 4FF4h
.text$x:00004FF4 ; COMDAT (pick associative to section at 4F88)
.text$x:00004FF4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00004FF4
.text$x:00004FF4 ; =============== S U B R O U T I N E =======================================
.text$x:00004FF4
.text$x:00004FF4
.text$x:00004FF4 __unwindfunclet$??1CLocalItem@NZip@NArchive@@QAE@XZ$0 proc near
.text$x:00004FF4                                         ; DATA XREF: .xdata$x:00005020o
.text$x:00004FF4                 mov     ecx, [ebp-10h]
.text$x:00004FF7                 add     ecx, 20h ; ' '  ; this
.text$x:00004FFA                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00004FFA __unwindfunclet$??1CLocalItem@NZip@NArchive@@QAE@XZ$0 endp
.text$x:00004FFA
.text$x:00004FFF
.text$x:00004FFF ; =============== S U B R O U T I N E =======================================
.text$x:00004FFF
.text$x:00004FFF
.text$x:00004FFF __ehhandler$??1CLocalItem@NZip@NArchive@@QAE@XZ proc near
.text$x:00004FFF                                         ; DATA XREF: NArchive::NZip::CLocalItem::~CLocalItem(void)+5o
.text$x:00004FFF
.text$x:00004FFF arg_4           = dword ptr  8
.text$x:00004FFF
.text$x:00004FFF                 mov     edx, [esp+arg_4]
.text$x:00005003                 lea     eax, [edx+0Ch]
.text$x:00005006                 mov     ecx, [edx-8]
.text$x:00005009                 xor     ecx, eax
.text$x:0000500B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005010                 mov     eax, offset __ehfuncinfo$??1CLocalItem@NZip@NArchive@@QAE@XZ
.text$x:00005015                 jmp     ___CxxFrameHandler3
.text$x:00005015 __ehhandler$??1CLocalItem@NZip@NArchive@@QAE@XZ endp
.text$x:00005015
.text$x:00005015 ; ---------------------------------------------------------------------------
.text$x:0000501A                 align 4
.text$x:0000501A _text$x         ends
.text$x:0000501A
.xdata$x:0000501C ; ===========================================================================
.xdata$x:0000501C
.xdata$x:0000501C ; Segment type: Pure data
.xdata$x:0000501C ; Segment permissions: Read
.xdata$x:0000501C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000501C                 assume cs:_xdata$x
.xdata$x:0000501C                 ;org 501Ch
.xdata$x:0000501C ; COMDAT (pick associative to section at 4F88)
.xdata$x:0000501C __unwindtable$??1CLocalItem@NZip@NArchive@@QAE@XZ db 0FFh
.xdata$x:0000501C                                         ; DATA XREF: .xdata$x:0000502Co
.xdata$x:0000501D                 db 0FFh
.xdata$x:0000501E                 db 0FFh
.xdata$x:0000501F                 db 0FFh
.xdata$x:00005020                 dd offset __unwindfunclet$??1CLocalItem@NZip@NArchive@@QAE@XZ$0
.xdata$x:00005024 __ehfuncinfo$??1CLocalItem@NZip@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00005024                                         ; DATA XREF: __ehhandler$??1CLocalItem@NZip@NArchive@@QAE@XZ+11o
.xdata$x:00005025                 db    5
.xdata$x:00005026                 db  93h ; ô
.xdata$x:00005027                 db  19h
.xdata$x:00005028                 db    1
.xdata$x:00005029                 db    0
.xdata$x:0000502A                 db    0
.xdata$x:0000502B                 db    0
.xdata$x:0000502C                 dd offset __unwindtable$??1CLocalItem@NZip@NArchive@@QAE@XZ
.xdata$x:00005030                 db    0
.xdata$x:00005031                 db    0
.xdata$x:00005032                 db    0
.xdata$x:00005033                 db    0
.xdata$x:00005034                 db    0
.xdata$x:00005035                 db    0
.xdata$x:00005036                 db    0
.xdata$x:00005037                 db    0
.xdata$x:00005038                 db    0
.xdata$x:00005039                 db    0
.xdata$x:0000503A                 db    0
.xdata$x:0000503B                 db    0
.xdata$x:0000503C                 db    0
.xdata$x:0000503D                 db    0
.xdata$x:0000503E                 db    0
.xdata$x:0000503F                 db    0
.xdata$x:00005040                 db    0
.xdata$x:00005041                 db    0
.xdata$x:00005042                 db    0
.xdata$x:00005043                 db    0
.xdata$x:00005044                 db    1
.xdata$x:00005045                 db    0
.xdata$x:00005046                 db    0
.xdata$x:00005047                 db    0
.xdata$x:00005047 _xdata$x        ends
.xdata$x:00005047
.text:00005048 ; ===========================================================================
.text:00005048
.text:00005048 ; Segment type: Pure code
.text:00005048 ; Segment permissions: Read/Execute
.text:00005048 _text           segment para public 'CODE' use32
.text:00005048                 assume cs:_text
.text:00005048                 ;org 5048h
.text:00005048 ; COMDAT (pick any)
.text:00005048                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005048
.text:00005048 ; =============== S U B R O U T I N E =======================================
.text:00005048
.text:00005048 ; Attributes: bp-based frame
.text:00005048
.text:00005048 ; _DWORD __thiscall NArchive::NZip::CExtraBlock::CExtraBlock(NArchive::NZip::CExtraBlock *__hidden this)
.text:00005048                 public ??0CExtraBlock@NZip@NArchive@@QAE@XZ
.text:00005048 ??0CExtraBlock@NZip@NArchive@@QAE@XZ proc near
.text:00005048                                         ; CODE XREF: NArchive::NZip::CItem::CItem(void)+55p
.text:00005048                                         ; NArchive::NZip::CLocalItem::CLocalItem(void)+45p
.text:00005048
.text:00005048 var_4           = dword ptr -4
.text:00005048
.text:00005048                 push    ebp
.text:00005049                 mov     ebp, esp
.text:0000504B                 push    ecx
.text:0000504C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005053                 mov     [ebp+var_4], ecx
.text:00005056                 mov     ecx, [ebp+var_4]
.text:00005059                 call    ??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CExtraSubBlock>::CObjectVector<NArchive::NZip::CExtraSubBlock>(void)
.text:0000505E                 mov     eax, [ebp+var_4]
.text:00005061                 add     esp, 4
.text:00005064                 cmp     ebp, esp
.text:00005066                 call    __RTC_CheckEsp
.text:0000506B                 mov     esp, ebp
.text:0000506D                 pop     ebp
.text:0000506E                 retn
.text:0000506E ??0CExtraBlock@NZip@NArchive@@QAE@XZ endp
.text:0000506E
.text:0000506E ; ---------------------------------------------------------------------------
.text:0000506F                 align 10h
.text:0000506F _text           ends
.text:0000506F
.text:00005070 ; ===========================================================================
.text:00005070
.text:00005070 ; Segment type: Pure code
.text:00005070 ; Segment permissions: Read/Execute
.text:00005070 _text           segment para public 'CODE' use32
.text:00005070                 assume cs:_text
.text:00005070                 ;org 5070h
.text:00005070 ; COMDAT (pick any)
.text:00005070                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005070
.text:00005070 ; =============== S U B R O U T I N E =======================================
.text:00005070
.text:00005070 ; Attributes: bp-based frame
.text:00005070
.text:00005070 ; _DWORD __thiscall NArchive::NZip::CExtraBlock::~CExtraBlock(NArchive::NZip::CExtraBlock *__hidden this)
.text:00005070                 public ??1CExtraBlock@NZip@NArchive@@QAE@XZ
.text:00005070 ??1CExtraBlock@NZip@NArchive@@QAE@XZ proc near
.text:00005070                                         ; CODE XREF: __unwindfunclet$??0CItem@NZip@NArchive@@QAE@XZ$1+6j
.text:00005070                                         ; NArchive::NZip::CLocalItem::~CLocalItem(void)+3Ap ...
.text:00005070
.text:00005070 var_4           = dword ptr -4
.text:00005070
.text:00005070                 push    ebp
.text:00005071                 mov     ebp, esp
.text:00005073                 push    ecx
.text:00005074                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000507B                 mov     [ebp+var_4], ecx
.text:0000507E                 mov     ecx, [ebp+var_4]
.text:00005081                 call    ??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CExtraSubBlock>::~CObjectVector<NArchive::NZip::CExtraSubBlock>(void)
.text:00005086                 add     esp, 4
.text:00005089                 cmp     ebp, esp
.text:0000508B                 call    __RTC_CheckEsp
.text:00005090                 mov     esp, ebp
.text:00005092                 pop     ebp
.text:00005093                 retn
.text:00005093 ??1CExtraBlock@NZip@NArchive@@QAE@XZ endp
.text:00005093
.text:00005093 _text           ends
.text:00005093
.text:00005094 ; ===========================================================================
.text:00005094
.text:00005094 ; Segment type: Pure code
.text:00005094 ; Segment permissions: Read/Execute
.text:00005094 _text           segment para public 'CODE' use32
.text:00005094                 assume cs:_text
.text:00005094                 ;org 5094h
.text:00005094 ; COMDAT (pick any)
.text:00005094                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005094
.text:00005094 ; =============== S U B R O U T I N E =======================================
.text:00005094
.text:00005094 ; Attributes: bp-based frame
.text:00005094
.text:00005094 ; _DWORD __thiscall NArchive::NZip::CItemEx::~CItemEx(NArchive::NZip::CItemEx *__hidden this)
.text:00005094                 public ??1CItemEx@NZip@NArchive@@QAE@XZ
.text:00005094 ??1CItemEx@NZip@NArchive@@QAE@XZ proc near
.text:00005094                                         ; CODE XREF: NArchive::NZip::CInArchive::ReadLocalItemAfterCdItem(NArchive::NZip::CItemEx &)+122p
.text:00005094                                         ; NArchive::NZip::CInArchive::ReadLocalItemAfterCdItem(NArchive::NZip::CItemEx &)+176p ...
.text:00005094
.text:00005094 var_4           = dword ptr -4
.text:00005094
.text:00005094                 push    ebp
.text:00005095                 mov     ebp, esp
.text:00005097                 push    ecx
.text:00005098                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000509F                 mov     [ebp+var_4], ecx
.text:000050A2                 mov     ecx, [ebp+var_4] ; this
.text:000050A5                 call    ??1CItem@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItem::~CItem(void)
.text:000050AA                 add     esp, 4
.text:000050AD                 cmp     ebp, esp
.text:000050AF                 call    __RTC_CheckEsp
.text:000050B4                 mov     esp, ebp
.text:000050B6                 pop     ebp
.text:000050B7                 retn
.text:000050B7 ??1CItemEx@NZip@NArchive@@QAE@XZ endp
.text:000050B7
.text:000050B7 _text           ends
.text:000050B7
.text:000050B8 ; ===========================================================================
.text:000050B8
.text:000050B8 ; Segment type: Pure code
.text:000050B8 ; Segment permissions: Read/Execute
.text:000050B8 _text           segment para public 'CODE' use32
.text:000050B8                 assume cs:_text
.text:000050B8                 ;org 50B8h
.text:000050B8 ; COMDAT (pick any)
.text:000050B8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000050B8
.text:000050B8 ; =============== S U B R O U T I N E =======================================
.text:000050B8
.text:000050B8 ; Attributes: bp-based frame
.text:000050B8
.text:000050B8 ; public: struct NArchive::NZip::CExtraBlock & __thiscall NArchive::NZip::CExtraBlock::operator=(struct NArchive::NZip::CExtraBlock const &)
.text:000050B8                 public ??4CExtraBlock@NZip@NArchive@@QAEAAU012@ABU012@@Z
.text:000050B8 ??4CExtraBlock@NZip@NArchive@@QAEAAU012@ABU012@@Z proc near
.text:000050B8                                         ; CODE XREF: NArchive::NZip::CInArchive::ReadLocalItemAfterCdItem(NArchive::NZip::CItemEx &)+196p
.text:000050B8                                         ; NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+E28p
.text:000050B8
.text:000050B8 var_4           = dword ptr -4
.text:000050B8 arg_0           = dword ptr  8
.text:000050B8
.text:000050B8                 push    ebp
.text:000050B9                 mov     ebp, esp
.text:000050BB                 push    ecx
.text:000050BC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000050C3                 mov     [ebp+var_4], ecx
.text:000050C6                 mov     eax, [ebp+arg_0]
.text:000050C9                 push    eax
.text:000050CA                 mov     ecx, [ebp+var_4]
.text:000050CD                 call    ??4?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAV0@ABV0@@Z ; CObjectVector<NArchive::NZip::CExtraSubBlock>::operator=(CObjectVector<NArchive::NZip::CExtraSubBlock> const &)
.text:000050D2                 mov     eax, [ebp+var_4]
.text:000050D5                 add     esp, 4
.text:000050D8                 cmp     ebp, esp
.text:000050DA                 call    __RTC_CheckEsp
.text:000050DF                 mov     esp, ebp
.text:000050E1                 pop     ebp
.text:000050E2                 retn    4
.text:000050E2 ??4CExtraBlock@NZip@NArchive@@QAEAAU012@ABU012@@Z endp
.text:000050E2
.text:000050E2 ; ---------------------------------------------------------------------------
.text:000050E5                 align 4
.text:000050E5 _text           ends
.text:000050E5
.text:000050E8 ; ===========================================================================
.text:000050E8
.text:000050E8 ; Segment type: Pure code
.text:000050E8 ; Segment permissions: Read/Execute
.text:000050E8 _text           segment para public 'CODE' use32
.text:000050E8                 assume cs:_text
.text:000050E8                 ;org 50E8h
.text:000050E8 ; COMDAT (pick any)
.text:000050E8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000050E8
.text:000050E8 ; =============== S U B R O U T I N E =======================================
.text:000050E8
.text:000050E8 ; Attributes: bp-based frame
.text:000050E8
.text:000050E8 ; _DWORD __thiscall NArchive::NZip::CItem::~CItem(NArchive::NZip::CItem *__hidden this)
.text:000050E8                 public ??1CItem@NZip@NArchive@@QAE@XZ
.text:000050E8 ??1CItem@NZip@NArchive@@QAE@XZ proc near
.text:000050E8                                         ; CODE XREF: NArchive::NZip::CItemEx::~CItemEx(void)+11p
.text:000050E8
.text:000050E8 var_10          = dword ptr -10h
.text:000050E8 var_C           = dword ptr -0Ch
.text:000050E8 var_4           = dword ptr -4
.text:000050E8
.text:000050E8                 push    ebp
.text:000050E9                 mov     ebp, esp
.text:000050EB                 push    0FFFFFFFFh
.text:000050ED                 push    offset __ehhandler$??1CItem@NZip@NArchive@@QAE@XZ
.text:000050F2                 mov     eax, large fs:0
.text:000050F8                 push    eax
.text:000050F9                 push    ecx
.text:000050FA                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00005101                 mov     eax, dword ptr ds:___security_cookie
.text:00005106                 xor     eax, ebp
.text:00005108                 push    eax
.text:00005109                 lea     eax, [ebp+var_C]
.text:0000510C                 mov     large fs:0, eax
.text:00005112                 mov     [ebp+var_10], ecx
.text:00005115                 mov     [ebp+var_4], 1
.text:0000511C                 mov     ecx, [ebp+var_10]
.text:0000511F                 add     ecx, 54h ; 'T'
.text:00005122                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:00005127                 mov     byte ptr [ebp+var_4], 0
.text:0000512B                 mov     ecx, [ebp+var_10]
.text:0000512E                 add     ecx, 48h ; 'H'  ; this
.text:00005131                 call    ??1CExtraBlock@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CExtraBlock::~CExtraBlock(void)
.text:00005136                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000513D                 mov     ecx, [ebp+var_10] ; this
.text:00005140                 call    ??1CLocalItem@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CLocalItem::~CLocalItem(void)
.text:00005145                 mov     ecx, [ebp+var_C]
.text:00005148                 mov     large fs:0, ecx
.text:0000514F                 pop     ecx
.text:00005150                 add     esp, 10h
.text:00005153                 cmp     ebp, esp
.text:00005155                 call    __RTC_CheckEsp
.text:0000515A                 mov     esp, ebp
.text:0000515C                 pop     ebp
.text:0000515D                 retn
.text:0000515D ??1CItem@NZip@NArchive@@QAE@XZ endp
.text:0000515D
.text:0000515D ; ---------------------------------------------------------------------------
.text:0000515E                 align 10h
.text:0000515E _text           ends
.text:0000515E
.text$x:00005160 ; ===========================================================================
.text$x:00005160
.text$x:00005160 ; Segment type: Pure code
.text$x:00005160 ; Segment permissions: Read/Execute
.text$x:00005160 _text$x         segment para public 'CODE' use32
.text$x:00005160                 assume cs:_text$x
.text$x:00005160                 ;org 5160h
.text$x:00005160 ; COMDAT (pick associative to section at 50E8)
.text$x:00005160                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00005160
.text$x:00005160 ; =============== S U B R O U T I N E =======================================
.text$x:00005160
.text$x:00005160
.text$x:00005160 __unwindfunclet$??1CItem@NZip@NArchive@@QAE@XZ$0 proc near
.text$x:00005160                                         ; DATA XREF: .xdata$x:00005194o
.text$x:00005160                 mov     ecx, [ebp-10h]  ; this
.text$x:00005163                 jmp     ??1CLocalItem@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CLocalItem::~CLocalItem(void)
.text$x:00005163 __unwindfunclet$??1CItem@NZip@NArchive@@QAE@XZ$0 endp
.text$x:00005163
.text$x:00005168
.text$x:00005168 ; =============== S U B R O U T I N E =======================================
.text$x:00005168
.text$x:00005168
.text$x:00005168 __unwindfunclet$??1CItem@NZip@NArchive@@QAE@XZ$1 proc near
.text$x:00005168                                         ; DATA XREF: .xdata$x:0000519Co
.text$x:00005168                 mov     ecx, [ebp-10h]
.text$x:0000516B                 add     ecx, 48h ; 'H'  ; this
.text$x:0000516E                 jmp     ??1CExtraBlock@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CExtraBlock::~CExtraBlock(void)
.text$x:0000516E __unwindfunclet$??1CItem@NZip@NArchive@@QAE@XZ$1 endp
.text$x:0000516E
.text$x:00005173
.text$x:00005173 ; =============== S U B R O U T I N E =======================================
.text$x:00005173
.text$x:00005173
.text$x:00005173 __ehhandler$??1CItem@NZip@NArchive@@QAE@XZ proc near
.text$x:00005173                                         ; DATA XREF: NArchive::NZip::CItem::~CItem(void)+5o
.text$x:00005173
.text$x:00005173 arg_4           = dword ptr  8
.text$x:00005173
.text$x:00005173                 mov     edx, [esp+arg_4]
.text$x:00005177                 lea     eax, [edx+0Ch]
.text$x:0000517A                 mov     ecx, [edx-8]
.text$x:0000517D                 xor     ecx, eax
.text$x:0000517F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005184                 mov     eax, offset __ehfuncinfo$??1CItem@NZip@NArchive@@QAE@XZ
.text$x:00005189                 jmp     ___CxxFrameHandler3
.text$x:00005189 __ehhandler$??1CItem@NZip@NArchive@@QAE@XZ endp
.text$x:00005189
.text$x:00005189 ; ---------------------------------------------------------------------------
.text$x:0000518E                 align 10h
.text$x:0000518E _text$x         ends
.text$x:0000518E
.xdata$x:00005190 ; ===========================================================================
.xdata$x:00005190
.xdata$x:00005190 ; Segment type: Pure data
.xdata$x:00005190 ; Segment permissions: Read
.xdata$x:00005190 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00005190                 assume cs:_xdata$x
.xdata$x:00005190                 ;org 5190h
.xdata$x:00005190 ; COMDAT (pick associative to section at 50E8)
.xdata$x:00005190 __unwindtable$??1CItem@NZip@NArchive@@QAE@XZ db 0FFh
.xdata$x:00005190                                         ; DATA XREF: .xdata$x:000051A8o
.xdata$x:00005191                 db 0FFh
.xdata$x:00005192                 db 0FFh
.xdata$x:00005193                 db 0FFh
.xdata$x:00005194                 dd offset __unwindfunclet$??1CItem@NZip@NArchive@@QAE@XZ$0
.xdata$x:00005198                 db    0
.xdata$x:00005199                 db    0
.xdata$x:0000519A                 db    0
.xdata$x:0000519B                 db    0
.xdata$x:0000519C                 dd offset __unwindfunclet$??1CItem@NZip@NArchive@@QAE@XZ$1
.xdata$x:000051A0 __ehfuncinfo$??1CItem@NZip@NArchive@@QAE@XZ db  22h ; "
.xdata$x:000051A0                                         ; DATA XREF: __ehhandler$??1CItem@NZip@NArchive@@QAE@XZ+11o
.xdata$x:000051A1                 db    5
.xdata$x:000051A2                 db  93h ; ô
.xdata$x:000051A3                 db  19h
.xdata$x:000051A4                 db    2
.xdata$x:000051A5                 db    0
.xdata$x:000051A6                 db    0
.xdata$x:000051A7                 db    0
.xdata$x:000051A8                 dd offset __unwindtable$??1CItem@NZip@NArchive@@QAE@XZ
.xdata$x:000051AC                 align 20h
.xdata$x:000051C0                 db    1
.xdata$x:000051C1                 db    0
.xdata$x:000051C2                 db    0
.xdata$x:000051C3                 db    0
.xdata$x:000051C3 _xdata$x        ends
.xdata$x:000051C3
.text:000051C4 ; ===========================================================================
.text:000051C4
.text:000051C4 ; Segment type: Pure code
.text:000051C4 ; Segment permissions: Read/Execute
.text:000051C4 _text           segment para public 'CODE' use32
.text:000051C4                 assume cs:_text
.text:000051C4                 ;org 51C4h
.text:000051C4 ; COMDAT (pick any)
.text:000051C4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000051C4
.text:000051C4 ; =============== S U B R O U T I N E =======================================
.text:000051C4
.text:000051C4 ; Attributes: bp-based frame
.text:000051C4
.text:000051C4 ; unsigned __int64 __thiscall NArchive::NZip::CItemEx::GetDataPosition(NArchive::NZip::CItemEx *__hidden this)
.text:000051C4                 public ?GetDataPosition@CItemEx@NZip@NArchive@@QBE_KXZ
.text:000051C4 ?GetDataPosition@CItemEx@NZip@NArchive@@QBE_KXZ proc near
.text:000051C4                                         ; CODE XREF: NArchive::NZip::CInArchive::ReadLocalItemAfterCdItemFull(NArchive::NZip::CItemEx &)+96p
.text:000051C4
.text:000051C4 var_4           = dword ptr -4
.text:000051C4
.text:000051C4                 push    ebp
.text:000051C5                 mov     ebp, esp
.text:000051C7                 push    ecx
.text:000051C8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000051CF                 mov     [ebp+var_4], ecx
.text:000051D2                 mov     eax, [ebp+var_4]
.text:000051D5                 mov     eax, [eax+60h]
.text:000051D8                 xor     edx, edx
.text:000051DA                 mov     ecx, [ebp+var_4]
.text:000051DD                 add     eax, [ecx+40h]
.text:000051E0                 adc     edx, [ecx+44h]
.text:000051E3                 mov     esp, ebp
.text:000051E5                 pop     ebp
.text:000051E6                 retn
.text:000051E6 ?GetDataPosition@CItemEx@NZip@NArchive@@QBE_KXZ endp
.text:000051E6
.text:000051E6 ; ---------------------------------------------------------------------------
.text:000051E7                 align 4
.text:000051E7 _text           ends
.text:000051E7
.text:000051E8 ; ===========================================================================
.text:000051E8
.text:000051E8 ; Segment type: Pure code
.text:000051E8 ; Segment permissions: Read/Execute
.text:000051E8 _text           segment para public 'CODE' use32
.text:000051E8                 assume cs:_text
.text:000051E8                 ;org 51E8h
.text:000051E8 ; COMDAT (pick any)
.text:000051E8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000051E8
.text:000051E8 ; =============== S U B R O U T I N E =======================================
.text:000051E8
.text:000051E8 ; Attributes: bp-based frame
.text:000051E8
.text:000051E8 ; void __thiscall CInBufferBase::SetStream(CInBufferBase *this, struct ISequentialInStream *)
.text:000051E8                 public ?SetStream@CInBufferBase@@QAEXPAUISequentialInStream@@@Z
.text:000051E8 ?SetStream@CInBufferBase@@QAEXPAUISequentialInStream@@@Z proc near
.text:000051E8                                         ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+D2p
.text:000051E8
.text:000051E8 var_4           = dword ptr -4
.text:000051E8 arg_0           = dword ptr  8
.text:000051E8
.text:000051E8                 push    ebp
.text:000051E9                 mov     ebp, esp
.text:000051EB                 push    ecx
.text:000051EC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000051F3                 mov     [ebp+var_4], ecx
.text:000051F6                 mov     eax, [ebp+var_4]
.text:000051F9                 mov     ecx, [ebp+arg_0]
.text:000051FC                 mov     [eax+0Ch], ecx
.text:000051FF                 mov     esp, ebp
.text:00005201                 pop     ebp
.text:00005202                 retn    4
.text:00005202 ?SetStream@CInBufferBase@@QAEXPAUISequentialInStream@@@Z endp
.text:00005202
.text:00005202 ; ---------------------------------------------------------------------------
.text:00005205                 align 4
.text:00005205 _text           ends
.text:00005205
.text:00005208 ; ===========================================================================
.text:00005208
.text:00005208 ; Segment type: Pure code
.text:00005208 ; Segment permissions: Read/Execute
.text:00005208 _text           segment para public 'CODE' use32
.text:00005208                 assume cs:_text
.text:00005208                 ;org 5208h
.text:00005208 ; COMDAT (pick any)
.text:00005208                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005208
.text:00005208 ; =============== S U B R O U T I N E =======================================
.text:00005208
.text:00005208 ; Attributes: bp-based frame
.text:00005208
.text:00005208 ; _DWORD __thiscall NArchive::NZip::CEcd64::CEcd64(NArchive::NZip::CEcd64 *__hidden this)
.text:00005208                 public ??0CEcd64@NZip@NArchive@@QAE@XZ
.text:00005208 ??0CEcd64@NZip@NArchive@@QAE@XZ proc near
.text:00005208                                         ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+740p
.text:00005208
.text:00005208 Dst             = dword ptr -4
.text:00005208
.text:00005208                 push    ebp
.text:00005209                 mov     ebp, esp
.text:0000520B                 push    ecx
.text:0000520C                 mov     [ebp+Dst], 0CCCCCCCCh
.text:00005213                 mov     [ebp+Dst], ecx
.text:00005216                 push    30h ; '0'       ; Size
.text:00005218                 push    0               ; Val
.text:0000521A                 mov     eax, [ebp+Dst]
.text:0000521D                 push    eax             ; Dst
.text:0000521E                 call    _memset
.text:00005223                 add     esp, 0Ch
.text:00005226                 mov     eax, [ebp+Dst]
.text:00005229                 add     esp, 4
.text:0000522C                 cmp     ebp, esp
.text:0000522E                 call    __RTC_CheckEsp
.text:00005233                 mov     esp, ebp
.text:00005235                 pop     ebp
.text:00005236                 retn
.text:00005236 ??0CEcd64@NZip@NArchive@@QAE@XZ endp
.text:00005236
.text:00005236 ; ---------------------------------------------------------------------------
.text:00005237                 align 4
.text:00005237 _text           ends
.text:00005237
.text:00005238 ; ===========================================================================
.text:00005238
.text:00005238 ; Segment type: Pure code
.text:00005238 ; Segment permissions: Read/Execute
.text:00005238 _text           segment para public 'CODE' use32
.text:00005238                 assume cs:_text
.text:00005238                 ;org 5238h
.text:00005238 ; COMDAT (pick any)
.text:00005238                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005238
.text:00005238 ; =============== S U B R O U T I N E =======================================
.text:00005238
.text:00005238 ; Attributes: bp-based frame
.text:00005238
.text:00005238 ; void __thiscall CLimitedSequentialInStream::SetStream(CLimitedSequentialInStream *this, struct ISequentialInStream *)
.text:00005238                 public ?SetStream@CLimitedSequentialInStream@@QAEXPAUISequentialInStream@@@Z
.text:00005238 ?SetStream@CLimitedSequentialInStream@@QAEXPAUISequentialInStream@@@Z proc near
.text:00005238                                         ; CODE XREF: NArchive::NZip::CInArchive::CreateLimitedStream(unsigned __int64,unsigned __int64)+DEp
.text:00005238
.text:00005238 var_4           = dword ptr -4
.text:00005238 arg_0           = dword ptr  8
.text:00005238
.text:00005238                 push    ebp
.text:00005239                 mov     ebp, esp
.text:0000523B                 push    ecx
.text:0000523C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005243                 mov     [ebp+var_4], ecx
.text:00005246                 mov     eax, [ebp+arg_0]
.text:00005249                 push    eax
.text:0000524A                 mov     ecx, [ebp+var_4]
.text:0000524D                 add     ecx, 8
.text:00005250                 call    ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)
.text:00005255                 add     esp, 4
.text:00005258                 cmp     ebp, esp
.text:0000525A                 call    __RTC_CheckEsp
.text:0000525F                 mov     esp, ebp
.text:00005261                 pop     ebp
.text:00005262                 retn    4
.text:00005262 ?SetStream@CLimitedSequentialInStream@@QAEXPAUISequentialInStream@@@Z endp
.text:00005262
.text:00005262 ; ---------------------------------------------------------------------------
.text:00005265                 align 4
.text:00005265 _text           ends
.text:00005265
.text:00005268 ; ===========================================================================
.text:00005268
.text:00005268 ; Segment type: Pure code
.text:00005268 ; Segment permissions: Read/Execute
.text:00005268 _text           segment para public 'CODE' use32
.text:00005268                 assume cs:_text
.text:00005268                 ;org 5268h
.text:00005268 ; COMDAT (pick any)
.text:00005268                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005268
.text:00005268 ; =============== S U B R O U T I N E =======================================
.text:00005268
.text:00005268 ; Attributes: bp-based frame
.text:00005268
.text:00005268 ; void __thiscall CLimitedSequentialInStream::Init(CLimitedSequentialInStream *this, unsigned __int64)
.text:00005268                 public ?Init@CLimitedSequentialInStream@@QAEX_K@Z
.text:00005268 ?Init@CLimitedSequentialInStream@@QAEX_K@Z proc near
.text:00005268                                         ; CODE XREF: NArchive::NZip::CInArchive::CreateLimitedStream(unsigned __int64,unsigned __int64)+EEp
.text:00005268
.text:00005268 var_4           = dword ptr -4
.text:00005268 arg_0           = qword ptr  8
.text:00005268
.text:00005268                 push    ebp
.text:00005269                 mov     ebp, esp
.text:0000526B                 push    ecx
.text:0000526C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005273                 mov     [ebp+var_4], ecx
.text:00005276                 mov     eax, [ebp+var_4]
.text:00005279                 mov     ecx, dword ptr [ebp+arg_0]
.text:0000527C                 mov     [eax+10h], ecx
.text:0000527F                 mov     edx, dword ptr [ebp+arg_0+4]
.text:00005282                 mov     [eax+14h], edx
.text:00005285                 mov     eax, [ebp+var_4]
.text:00005288                 mov     dword ptr [eax+18h], 0
.text:0000528F                 mov     dword ptr [eax+1Ch], 0
.text:00005296                 mov     ecx, [ebp+var_4]
.text:00005299                 mov     byte ptr [ecx+20h], 0
.text:0000529D                 mov     esp, ebp
.text:0000529F                 pop     ebp
.text:000052A0                 retn    8
.text:000052A0 ?Init@CLimitedSequentialInStream@@QAEX_K@Z endp
.text:000052A0
.text:000052A0 ; ---------------------------------------------------------------------------
.text:000052A3                 align 4
.text:000052A3 _text           ends
.text:000052A3
.text:000052A4 ; ===========================================================================
.text:000052A4
.text:000052A4 ; Segment type: Pure code
.text:000052A4 ; Segment permissions: Read/Execute
.text:000052A4 _text           segment para public 'CODE' use32
.text:000052A4                 assume cs:_text
.text:000052A4                 ;org 52A4h
.text:000052A4 ; COMDAT (pick any)
.text:000052A4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000052A4
.text:000052A4 ; =============== S U B R O U T I N E =======================================
.text:000052A4
.text:000052A4 ; Attributes: bp-based frame
.text:000052A4
.text:000052A4 ; public: __thiscall CLimitedSequentialInStream::CLimitedSequentialInStream(void)
.text:000052A4                 public ??0CLimitedSequentialInStream@@QAE@XZ
.text:000052A4 ??0CLimitedSequentialInStream@@QAE@XZ proc near
.text:000052A4                                         ; CODE XREF: NArchive::NZip::CInArchive::CreateLimitedStream(unsigned __int64,unsigned __int64)+58p
.text:000052A4
.text:000052A4 var_4           = dword ptr -4
.text:000052A4
.text:000052A4                 push    ebp
.text:000052A5                 mov     ebp, esp
.text:000052A7                 push    ecx
.text:000052A8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000052AF                 mov     [ebp+var_4], ecx
.text:000052B2                 mov     ecx, [ebp+var_4] ; this
.text:000052B5                 call    ??0ISequentialInStream@@QAE@XZ ; ISequentialInStream::ISequentialInStream(void)
.text:000052BA                 mov     ecx, [ebp+var_4]
.text:000052BD                 add     ecx, 4          ; this
.text:000052C0                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:000052C5                 mov     eax, [ebp+var_4]
.text:000052C8                 mov     dword ptr [eax], offset ??_7CLimitedSequentialInStream@@6B@ ; const CLimitedSequentialInStream::`vftable'
.text:000052CE                 mov     ecx, [ebp+var_4]
.text:000052D1                 add     ecx, 8
.text:000052D4                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(void)
.text:000052D9                 mov     eax, [ebp+var_4]
.text:000052DC                 add     esp, 4
.text:000052DF                 cmp     ebp, esp
.text:000052E1                 call    __RTC_CheckEsp
.text:000052E6                 mov     esp, ebp
.text:000052E8                 pop     ebp
.text:000052E9                 retn
.text:000052E9 ??0CLimitedSequentialInStream@@QAE@XZ endp
.text:000052E9
.text:000052E9 ; ---------------------------------------------------------------------------
.text:000052EA                 align 4
.text:000052EA _text           ends
.text:000052EA
.rdata:000052EC ; ===========================================================================
.rdata:000052EC
.rdata:000052EC ; Segment type: Pure data
.rdata:000052EC ; Segment permissions: Read
.rdata:000052EC _rdata          segment dword public 'DATA' use32
.rdata:000052EC                 assume cs:_rdata
.rdata:000052EC                 ;org 52ECh
.rdata:000052EC ; COMDAT (pick largest)
.rdata:000052EC                 dd offset ??_R4CLimitedSequentialInStream@@6B@ ; const CLimitedSequentialInStream::`RTTI Complete Object Locator'
.rdata:000052F0                 public ??_7CLimitedSequentialInStream@@6B@
.rdata:000052F0 ; const CLimitedSequentialInStream::`vftable'
.rdata:000052F0 ??_7CLimitedSequentialInStream@@6B@ dd offset ?QueryInterface@CLimitedSequentialInStream@@UAGJABU_GUID@@PAPAX@Z
.rdata:000052F0                                         ; DATA XREF: CLimitedSequentialInStream::CLimitedSequentialInStream(void)+24o
.rdata:000052F0                                         ; CLimitedSequentialInStream::QueryInterface(_GUID const &,void * *)
.rdata:000052F4                 dd offset ?AddRef@CLimitedSequentialInStream@@UAGKXZ ; CLimitedSequentialInStream::AddRef(void)
.rdata:000052F8                 dd offset ?Release@CLimitedSequentialInStream@@UAGKXZ ; CLimitedSequentialInStream::Release(void)
.rdata:000052FC                 dd offset ?Read@CLimitedSequentialInStream@@UAGJPAXIPAI@Z ; CLimitedSequentialInStream::Read(void *,uint,uint *)
.rdata:000052FC _rdata          ends
.rdata:000052FC
.rdata$r:00005300 ; ===========================================================================
.rdata$r:00005300
.rdata$r:00005300 ; Segment type: Pure data
.rdata$r:00005300 ; Segment permissions: Read
.rdata$r:00005300 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005300                 assume cs:_rdata$r
.rdata$r:00005300                 ;org 5300h
.rdata$r:00005300 ; COMDAT (pick any)
.rdata$r:00005300                 public ??_R4CLimitedSequentialInStream@@6B@
.rdata$r:00005300 ; const CLimitedSequentialInStream::`RTTI Complete Object Locator'
.rdata$r:00005300 ??_R4CLimitedSequentialInStream@@6B@ db    0 ; DATA XREF: .rdata:000052ECo
.rdata$r:00005301                 db    0
.rdata$r:00005302                 db    0
.rdata$r:00005303                 db    0
.rdata$r:00005304                 db    0
.rdata$r:00005305                 db    0
.rdata$r:00005306                 db    0
.rdata$r:00005307                 db    0
.rdata$r:00005308                 db    0
.rdata$r:00005309                 db    0
.rdata$r:0000530A                 db    0
.rdata$r:0000530B                 db    0
.rdata$r:0000530C                 dd offset ??_R0?AVCLimitedSequentialInStream@@@8 ; CLimitedSequentialInStream `RTTI Type Descriptor'
.rdata$r:00005310                 dd offset ??_R3CLimitedSequentialInStream@@8 ; CLimitedSequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005310 _rdata$r        ends
.rdata$r:00005310
.data:00005314 ; ===========================================================================
.data:00005314
.data:00005314 ; Segment type: Pure data
.data:00005314 ; Segment permissions: Read/Write
.data:00005314 _data           segment dword public 'DATA' use32
.data:00005314                 assume cs:_data
.data:00005314                 ;org 5314h
.data:00005314 ; COMDAT (pick any)
.data:00005314                 public ??_R0?AVCLimitedSequentialInStream@@@8
.data:00005314 ; class CLimitedSequentialInStream `RTTI Type Descriptor'
.data:00005314 ??_R0?AVCLimitedSequentialInStream@@@8 dd offset ??_7type_info@@6B@
.data:00005314                                         ; DATA XREF: .rdata$r:0000530Co
.data:00005314                                         ; .rdata$r:CLimitedSequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00005314                                         ; const type_info::`vftable'
.data:00005318                 db    0
.data:00005319                 db    0
.data:0000531A                 db    0
.data:0000531B                 db    0
.data:0000531C                 db  2Eh ; .
.data:0000531D                 db  3Fh ; ?
.data:0000531E                 db  41h ; A
.data:0000531F                 db  56h ; V
.data:00005320                 db  43h ; C
.data:00005321                 db  4Ch ; L
.data:00005322                 db  69h ; i
.data:00005323                 db  6Dh ; m
.data:00005324                 db  69h ; i
.data:00005325                 db  74h ; t
.data:00005326                 db  65h ; e
.data:00005327                 db  64h ; d
.data:00005328                 db  53h ; S
.data:00005329                 db  65h ; e
.data:0000532A                 db  71h ; q
.data:0000532B                 db  75h ; u
.data:0000532C                 db  65h ; e
.data:0000532D                 db  6Eh ; n
.data:0000532E                 db  74h ; t
.data:0000532F                 db  69h ; i
.data:00005330                 db  61h ; a
.data:00005331                 db  6Ch ; l
.data:00005332                 db  49h ; I
.data:00005333                 db  6Eh ; n
.data:00005334                 db  53h ; S
.data:00005335                 db  74h ; t
.data:00005336                 db  72h ; r
.data:00005337                 db  65h ; e
.data:00005338                 db  61h ; a
.data:00005339                 db  6Dh ; m
.data:0000533A                 db  40h ; @
.data:0000533B                 db  40h ; @
.data:0000533C                 db    0
.data:0000533D                 align 10h
.data:0000533D _data           ends
.data:0000533D
.rdata$r:00005340 ; ===========================================================================
.rdata$r:00005340
.rdata$r:00005340 ; Segment type: Pure data
.rdata$r:00005340 ; Segment permissions: Read
.rdata$r:00005340 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005340                 assume cs:_rdata$r
.rdata$r:00005340                 ;org 5340h
.rdata$r:00005340 ; COMDAT (pick any)
.rdata$r:00005340                 public ??_R3CLimitedSequentialInStream@@8
.rdata$r:00005340 ; CLimitedSequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005340 ??_R3CLimitedSequentialInStream@@8 db    0 ; DATA XREF: .rdata$r:00005310o
.rdata$r:00005340                                         ; .rdata$r:0000537Co
.rdata$r:00005341                 db    0
.rdata$r:00005342                 db    0
.rdata$r:00005343                 db    0
.rdata$r:00005344                 db    1
.rdata$r:00005345                 db    0
.rdata$r:00005346                 db    0
.rdata$r:00005347                 db    0
.rdata$r:00005348                 db    4
.rdata$r:00005349                 db    0
.rdata$r:0000534A                 db    0
.rdata$r:0000534B                 db    0
.rdata$r:0000534C                 dd offset ??_R2CLimitedSequentialInStream@@8 ; CLimitedSequentialInStream::`RTTI Base Class Array'
.rdata$r:0000534C _rdata$r        ends
.rdata$r:0000534C
.rdata$r:00005350 ; ===========================================================================
.rdata$r:00005350
.rdata$r:00005350 ; Segment type: Pure data
.rdata$r:00005350 ; Segment permissions: Read
.rdata$r:00005350 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005350                 assume cs:_rdata$r
.rdata$r:00005350                 ;org 5350h
.rdata$r:00005350 ; COMDAT (pick any)
.rdata$r:00005350                 public ??_R2CLimitedSequentialInStream@@8
.rdata$r:00005350 ; CLimitedSequentialInStream::`RTTI Base Class Array'
.rdata$r:00005350 ??_R2CLimitedSequentialInStream@@8 dd offset ??_R1A@?0A@EA@CLimitedSequentialInStream@@8
.rdata$r:00005350                                         ; DATA XREF: .rdata$r:0000534Co
.rdata$r:00005350                                         ; CLimitedSequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005354                 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005358                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000535C                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00005360                 db    0
.rdata$r:00005361                 align 4
.rdata$r:00005361 _rdata$r        ends
.rdata$r:00005361
.rdata$r:00005364 ; ===========================================================================
.rdata$r:00005364
.rdata$r:00005364 ; Segment type: Pure data
.rdata$r:00005364 ; Segment permissions: Read
.rdata$r:00005364 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005364                 assume cs:_rdata$r
.rdata$r:00005364                 ;org 5364h
.rdata$r:00005364 ; COMDAT (pick any)
.rdata$r:00005364                 public ??_R1A@?0A@EA@CLimitedSequentialInStream@@8
.rdata$r:00005364 ; CLimitedSequentialInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00005364 ??_R1A@?0A@EA@CLimitedSequentialInStream@@8 dd offset ??_R0?AVCLimitedSequentialInStream@@@8
.rdata$r:00005364                                         ; DATA XREF: .rdata$r:CLimitedSequentialInStream::`RTTI Base Class Array'o
.rdata$r:00005364                                         ; CLimitedSequentialInStream `RTTI Type Descriptor'
.rdata$r:00005368                 db    3
.rdata$r:00005369                 db    0
.rdata$r:0000536A                 db    0
.rdata$r:0000536B                 db    0
.rdata$r:0000536C                 db    0
.rdata$r:0000536D                 db    0
.rdata$r:0000536E                 db    0
.rdata$r:0000536F                 db    0
.rdata$r:00005370                 db 0FFh
.rdata$r:00005371                 db 0FFh
.rdata$r:00005372                 db 0FFh
.rdata$r:00005373                 db 0FFh
.rdata$r:00005374                 db    0
.rdata$r:00005375                 db    0
.rdata$r:00005376                 db    0
.rdata$r:00005377                 db    0
.rdata$r:00005378                 db  40h ; @
.rdata$r:00005379                 db    0
.rdata$r:0000537A                 db    0
.rdata$r:0000537B                 db    0
.rdata$r:0000537C                 dd offset ??_R3CLimitedSequentialInStream@@8 ; CLimitedSequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000537C _rdata$r        ends
.rdata$r:0000537C
.rdata$r:00005380 ; ===========================================================================
.rdata$r:00005380
.rdata$r:00005380 ; Segment type: Pure data
.rdata$r:00005380 ; Segment permissions: Read
.rdata$r:00005380 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005380                 assume cs:_rdata$r
.rdata$r:00005380                 ;org 5380h
.rdata$r:00005380 ; COMDAT (pick any)
.rdata$r:00005380                 public ??_R1A@?0A@EA@ISequentialInStream@@8
.rdata$r:00005380 ; ISequentialInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00005380 ??_R1A@?0A@EA@ISequentialInStream@@8 dd offset ??_R0?AUISequentialInStream@@@8
.rdata$r:00005380                                         ; DATA XREF: .rdata$r:00005354o
.rdata$r:00005380                                         ; .rdata$r:ISequentialInStream::`RTTI Base Class Array'o
.rdata$r:00005380                                         ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:00005384                 db    1
.rdata$r:00005385                 db    0
.rdata$r:00005386                 db    0
.rdata$r:00005387                 db    0
.rdata$r:00005388                 db    0
.rdata$r:00005389                 db    0
.rdata$r:0000538A                 db    0
.rdata$r:0000538B                 db    0
.rdata$r:0000538C                 db 0FFh
.rdata$r:0000538D                 db 0FFh
.rdata$r:0000538E                 db 0FFh
.rdata$r:0000538F                 db 0FFh
.rdata$r:00005390                 db    0
.rdata$r:00005391                 db    0
.rdata$r:00005392                 db    0
.rdata$r:00005393                 db    0
.rdata$r:00005394                 db  40h ; @
.rdata$r:00005395                 db    0
.rdata$r:00005396                 db    0
.rdata$r:00005397                 db    0
.rdata$r:00005398                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005398 _rdata$r        ends
.rdata$r:00005398
.data:0000539C ; ===========================================================================
.data:0000539C
.data:0000539C ; Segment type: Pure data
.data:0000539C ; Segment permissions: Read/Write
.data:0000539C _data           segment dword public 'DATA' use32
.data:0000539C                 assume cs:_data
.data:0000539C                 ;org 539Ch
.data:0000539C ; COMDAT (pick any)
.data:0000539C                 public ??_R0?AUISequentialInStream@@@8
.data:0000539C ; struct ISequentialInStream `RTTI Type Descriptor'
.data:0000539C ??_R0?AUISequentialInStream@@@8 dd offset ??_7type_info@@6B@
.data:0000539C                                         ; DATA XREF: .rdata$r:ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:0000539C                                         ; .rdata$r:000056B8o
.data:0000539C                                         ; const type_info::`vftable'
.data:000053A0                 db    0
.data:000053A1                 db    0
.data:000053A2                 db    0
.data:000053A3                 db    0
.data:000053A4                 db  2Eh ; .
.data:000053A5                 db  3Fh ; ?
.data:000053A6                 db  41h ; A
.data:000053A7                 db  55h ; U
.data:000053A8                 db  49h ; I
.data:000053A9                 db  53h ; S
.data:000053AA                 db  65h ; e
.data:000053AB                 db  71h ; q
.data:000053AC                 db  75h ; u
.data:000053AD                 db  65h ; e
.data:000053AE                 db  6Eh ; n
.data:000053AF                 db  74h ; t
.data:000053B0                 db  69h ; i
.data:000053B1                 db  61h ; a
.data:000053B2                 db  6Ch ; l
.data:000053B3                 db  49h ; I
.data:000053B4                 db  6Eh ; n
.data:000053B5                 db  53h ; S
.data:000053B6                 db  74h ; t
.data:000053B7                 db  72h ; r
.data:000053B8                 db  65h ; e
.data:000053B9                 db  61h ; a
.data:000053BA                 db  6Dh ; m
.data:000053BB                 db  40h ; @
.data:000053BC                 db  40h ; @
.data:000053BD                 db    0
.data:000053BE                 align 10h
.data:000053BE _data           ends
.data:000053BE
.rdata$r:000053C0 ; ===========================================================================
.rdata$r:000053C0
.rdata$r:000053C0 ; Segment type: Pure data
.rdata$r:000053C0 ; Segment permissions: Read
.rdata$r:000053C0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000053C0                 assume cs:_rdata$r
.rdata$r:000053C0                 ;org 53C0h
.rdata$r:000053C0 ; COMDAT (pick any)
.rdata$r:000053C0                 public ??_R3ISequentialInStream@@8
.rdata$r:000053C0 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000053C0 ??_R3ISequentialInStream@@8 db    0     ; DATA XREF: .rdata$r:00005398o
.rdata$r:000053C0                                         ; .rdata$r:000056BCo
.rdata$r:000053C1                 db    0
.rdata$r:000053C2                 db    0
.rdata$r:000053C3                 db    0
.rdata$r:000053C4                 db    0
.rdata$r:000053C5                 db    0
.rdata$r:000053C6                 db    0
.rdata$r:000053C7                 db    0
.rdata$r:000053C8                 db    2
.rdata$r:000053C9                 db    0
.rdata$r:000053CA                 db    0
.rdata$r:000053CB                 db    0
.rdata$r:000053CC                 dd offset ??_R2ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Array'
.rdata$r:000053CC _rdata$r        ends
.rdata$r:000053CC
.rdata$r:000053D0 ; ===========================================================================
.rdata$r:000053D0
.rdata$r:000053D0 ; Segment type: Pure data
.rdata$r:000053D0 ; Segment permissions: Read
.rdata$r:000053D0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000053D0                 assume cs:_rdata$r
.rdata$r:000053D0                 ;org 53D0h
.rdata$r:000053D0 ; COMDAT (pick any)
.rdata$r:000053D0                 public ??_R2ISequentialInStream@@8
.rdata$r:000053D0 ; ISequentialInStream::`RTTI Base Class Array'
.rdata$r:000053D0 ??_R2ISequentialInStream@@8 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8
.rdata$r:000053D0                                         ; DATA XREF: .rdata$r:000053CCo
.rdata$r:000053D0                                         ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000053D4                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000053D8                 db    0
.rdata$r:000053D9                 align 4
.rdata$r:000053D9 _rdata$r        ends
.rdata$r:000053D9
.rdata$r:000053DC ; ===========================================================================
.rdata$r:000053DC
.rdata$r:000053DC ; Segment type: Pure data
.rdata$r:000053DC ; Segment permissions: Read
.rdata$r:000053DC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000053DC                 assume cs:_rdata$r
.rdata$r:000053DC                 ;org 53DCh
.rdata$r:000053DC ; COMDAT (pick any)
.rdata$r:000053DC                 public ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:000053DC ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000053DC ??_R1A@?0A@EA@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000053DC                                         ; DATA XREF: .rdata$r:00005358o
.rdata$r:000053DC                                         ; .rdata$r:000053D4o ...
.rdata$r:000053DC                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:000053E0                 db    0
.rdata$r:000053E1                 db    0
.rdata$r:000053E2                 db    0
.rdata$r:000053E3                 db    0
.rdata$r:000053E4                 db    0
.rdata$r:000053E5                 db    0
.rdata$r:000053E6                 db    0
.rdata$r:000053E7                 db    0
.rdata$r:000053E8                 db 0FFh
.rdata$r:000053E9                 db 0FFh
.rdata$r:000053EA                 db 0FFh
.rdata$r:000053EB                 db 0FFh
.rdata$r:000053EC                 db    0
.rdata$r:000053ED                 db    0
.rdata$r:000053EE                 db    0
.rdata$r:000053EF                 db    0
.rdata$r:000053F0                 db  40h ; @
.rdata$r:000053F1                 db    0
.rdata$r:000053F2                 db    0
.rdata$r:000053F3                 db    0
.rdata$r:000053F4                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000053F4 _rdata$r        ends
.rdata$r:000053F4
.data:000053F8 ; ===========================================================================
.data:000053F8
.data:000053F8 ; Segment type: Pure data
.data:000053F8 ; Segment permissions: Read/Write
.data:000053F8 _data           segment dword public 'DATA' use32
.data:000053F8                 assume cs:_data
.data:000053F8                 ;org 53F8h
.data:000053F8 ; COMDAT (pick any)
.data:000053F8                 public ??_R0?AUIUnknown@@@8
.data:000053F8 ; struct IUnknown `RTTI Type Descriptor'
.data:000053F8 ??_R0?AUIUnknown@@@8 dd offset ??_7type_info@@6B@
.data:000053F8                                         ; DATA XREF: .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000053F8                                         ; const type_info::`vftable'
.data:000053FC                 align 10h
.data:00005400 a_?auiunknown@@ db '.?AUIUnknown@@',0
.data:0000540F                 align 10h
.data:0000540F _data           ends
.data:0000540F
.rdata$r:00005410 ; ===========================================================================
.rdata$r:00005410
.rdata$r:00005410 ; Segment type: Pure data
.rdata$r:00005410 ; Segment permissions: Read
.rdata$r:00005410 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005410                 assume cs:_rdata$r
.rdata$r:00005410                 ;org 5410h
.rdata$r:00005410 ; COMDAT (pick any)
.rdata$r:00005410                 public ??_R3IUnknown@@8
.rdata$r:00005410 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005410 ??_R3IUnknown@@8 db    0                ; DATA XREF: .rdata$r:000053F4o
.rdata$r:00005411                 db    0
.rdata$r:00005412                 db    0
.rdata$r:00005413                 db    0
.rdata$r:00005414                 db    0
.rdata$r:00005415                 db    0
.rdata$r:00005416                 db    0
.rdata$r:00005417                 db    0
.rdata$r:00005418                 db    1
.rdata$r:00005419                 db    0
.rdata$r:0000541A                 db    0
.rdata$r:0000541B                 db    0
.rdata$r:0000541C                 dd offset ??_R2IUnknown@@8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:0000541C _rdata$r        ends
.rdata$r:0000541C
.rdata$r:00005420 ; ===========================================================================
.rdata$r:00005420
.rdata$r:00005420 ; Segment type: Pure data
.rdata$r:00005420 ; Segment permissions: Read
.rdata$r:00005420 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005420                 assume cs:_rdata$r
.rdata$r:00005420                 ;org 5420h
.rdata$r:00005420 ; COMDAT (pick any)
.rdata$r:00005420                 public ??_R2IUnknown@@8
.rdata$r:00005420 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00005420 ??_R2IUnknown@@8 dd offset ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00005420                                         ; DATA XREF: .rdata$r:0000541Co
.rdata$r:00005420                                         ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005424                 db    0
.rdata$r:00005425                 align 4
.rdata$r:00005425 _rdata$r        ends
.rdata$r:00005425
.rdata$r:00005428 ; ===========================================================================
.rdata$r:00005428
.rdata$r:00005428 ; Segment type: Pure data
.rdata$r:00005428 ; Segment permissions: Read
.rdata$r:00005428 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005428                 assume cs:_rdata$r
.rdata$r:00005428                 ;org 5428h
.rdata$r:00005428 ; COMDAT (pick any)
.rdata$r:00005428                 public ??_R13?0A@EA@CMyUnknownImp@@8
.rdata$r:00005428 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:00005428 ??_R13?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00005428                                         ; DATA XREF: .rdata$r:0000535Co
.rdata$r:00005428                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:0000542C                 align 10h
.rdata$r:00005430                 db    4
.rdata$r:00005431                 db    0
.rdata$r:00005432                 db    0
.rdata$r:00005433                 db    0
.rdata$r:00005434                 db 0FFh
.rdata$r:00005435                 db 0FFh
.rdata$r:00005436                 db 0FFh
.rdata$r:00005437                 db 0FFh
.rdata$r:00005438                 db    0
.rdata$r:00005439                 db    0
.rdata$r:0000543A                 db    0
.rdata$r:0000543B                 db    0
.rdata$r:0000543C                 db  40h ; @
.rdata$r:0000543D                 db    0
.rdata$r:0000543E                 db    0
.rdata$r:0000543F                 db    0
.rdata$r:00005440                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005440 _rdata$r        ends
.rdata$r:00005440
.data:00005444 ; ===========================================================================
.data:00005444
.data:00005444 ; Segment type: Pure data
.data:00005444 ; Segment permissions: Read/Write
.data:00005444 _data           segment dword public 'DATA' use32
.data:00005444                 assume cs:_data
.data:00005444                 ;org 5444h
.data:00005444 ; COMDAT (pick any)
.data:00005444                 public ??_R0?AVCMyUnknownImp@@@8
.data:00005444 ; class CMyUnknownImp `RTTI Type Descriptor'
.data:00005444 ??_R0?AVCMyUnknownImp@@@8 dd offset ??_7type_info@@6B@
.data:00005444                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:00005444                                         ; .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00005444                                         ; const type_info::`vftable'
.data:00005448                 db    0
.data:00005449                 db    0
.data:0000544A                 db    0
.data:0000544B                 db    0
.data:0000544C                 db  2Eh ; .
.data:0000544D                 db  3Fh ; ?
.data:0000544E                 db  41h ; A
.data:0000544F                 db  56h ; V
.data:00005450                 db  43h ; C
.data:00005451                 db  4Dh ; M
.data:00005452                 db  79h ; y
.data:00005453                 db  55h ; U
.data:00005454                 db  6Eh ; n
.data:00005455                 db  6Bh ; k
.data:00005456                 db  6Eh ; n
.data:00005457                 db  6Fh ; o
.data:00005458                 db  77h ; w
.data:00005459                 db  6Eh ; n
.data:0000545A                 db  49h ; I
.data:0000545B                 db  6Dh ; m
.data:0000545C                 db  70h ; p
.data:0000545D                 db  40h ; @
.data:0000545E                 db  40h ; @
.data:0000545F                 db    0
.data:0000545F _data           ends
.data:0000545F
.rdata$r:00005460 ; ===========================================================================
.rdata$r:00005460
.rdata$r:00005460 ; Segment type: Pure data
.rdata$r:00005460 ; Segment permissions: Read
.rdata$r:00005460 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005460                 assume cs:_rdata$r
.rdata$r:00005460                 ;org 5460h
.rdata$r:00005460 ; COMDAT (pick any)
.rdata$r:00005460                 public ??_R3CMyUnknownImp@@8
.rdata$r:00005460 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005460 ??_R3CMyUnknownImp@@8 db    0           ; DATA XREF: .rdata$r:00005440o
.rdata$r:00005460                                         ; .rdata$r:00005490o
.rdata$r:00005461                 db    0
.rdata$r:00005462                 db    0
.rdata$r:00005463                 db    0
.rdata$r:00005464                 db    0
.rdata$r:00005465                 db    0
.rdata$r:00005466                 db    0
.rdata$r:00005467                 db    0
.rdata$r:00005468                 db    1
.rdata$r:00005469                 db    0
.rdata$r:0000546A                 db    0
.rdata$r:0000546B                 db    0
.rdata$r:0000546C                 dd offset ??_R2CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:0000546C _rdata$r        ends
.rdata$r:0000546C
.rdata$r:00005470 ; ===========================================================================
.rdata$r:00005470
.rdata$r:00005470 ; Segment type: Pure data
.rdata$r:00005470 ; Segment permissions: Read
.rdata$r:00005470 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005470                 assume cs:_rdata$r
.rdata$r:00005470                 ;org 5470h
.rdata$r:00005470 ; COMDAT (pick any)
.rdata$r:00005470                 public ??_R2CMyUnknownImp@@8
.rdata$r:00005470 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00005470 ??_R2CMyUnknownImp@@8 dd offset ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00005470                                         ; DATA XREF: .rdata$r:0000546Co
.rdata$r:00005470                                         ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005474                 db    0
.rdata$r:00005475                 align 4
.rdata$r:00005475 _rdata$r        ends
.rdata$r:00005475
.rdata$r:00005478 ; ===========================================================================
.rdata$r:00005478
.rdata$r:00005478 ; Segment type: Pure data
.rdata$r:00005478 ; Segment permissions: Read
.rdata$r:00005478 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005478                 assume cs:_rdata$r
.rdata$r:00005478                 ;org 5478h
.rdata$r:00005478 ; COMDAT (pick any)
.rdata$r:00005478                 public ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00005478 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00005478 ??_R1A@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00005478                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Array'o
.rdata$r:00005478                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:0000547C                 db    0
.rdata$r:0000547D                 db    0
.rdata$r:0000547E                 db    0
.rdata$r:0000547F                 db    0
.rdata$r:00005480                 db    0
.rdata$r:00005481                 db    0
.rdata$r:00005482                 db    0
.rdata$r:00005483                 db    0
.rdata$r:00005484                 db 0FFh
.rdata$r:00005485                 db 0FFh
.rdata$r:00005486                 db 0FFh
.rdata$r:00005487                 db 0FFh
.rdata$r:00005488                 db    0
.rdata$r:00005489                 db    0
.rdata$r:0000548A                 db    0
.rdata$r:0000548B                 db    0
.rdata$r:0000548C                 db  40h ; @
.rdata$r:0000548D                 db    0
.rdata$r:0000548E                 db    0
.rdata$r:0000548F                 db    0
.rdata$r:00005490                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005490 _rdata$r        ends
.rdata$r:00005490
.text:00005494 ; ===========================================================================
.text:00005494
.text:00005494 ; Segment type: Pure code
.text:00005494 ; Segment permissions: Read/Execute
.text:00005494 _text           segment para public 'CODE' use32
.text:00005494                 assume cs:_text
.text:00005494                 ;org 5494h
.text:00005494 ; COMDAT (pick any)
.text:00005494                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005494
.text:00005494 ; =============== S U B R O U T I N E =======================================
.text:00005494
.text:00005494 ; Attributes: bp-based frame
.text:00005494
.text:00005494 ; _DWORD __thiscall CMyUnknownImp::CMyUnknownImp(CMyUnknownImp *__hidden this)
.text:00005494                 public ??0CMyUnknownImp@@QAE@XZ
.text:00005494 ??0CMyUnknownImp@@QAE@XZ proc near      ; CODE XREF: CLimitedSequentialInStream::CLimitedSequentialInStream(void)+1Cp
.text:00005494
.text:00005494 var_4           = dword ptr -4
.text:00005494
.text:00005494                 push    ebp
.text:00005495                 mov     ebp, esp
.text:00005497                 push    ecx
.text:00005498                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000549F                 mov     [ebp+var_4], ecx
.text:000054A2                 mov     eax, [ebp+var_4]
.text:000054A5                 mov     dword ptr [eax], 0
.text:000054AB                 mov     eax, [ebp+var_4]
.text:000054AE                 mov     esp, ebp
.text:000054B0                 pop     ebp
.text:000054B1                 retn
.text:000054B1 ??0CMyUnknownImp@@QAE@XZ endp
.text:000054B1
.text:000054B1 ; ---------------------------------------------------------------------------
.text:000054B2                 align 4
.text:000054B2 _text           ends
.text:000054B2
.text:000054B4 ; ===========================================================================
.text:000054B4
.text:000054B4 ; Segment type: Pure code
.text:000054B4 ; Segment permissions: Read/Execute
.text:000054B4 _text           segment para public 'CODE' use32
.text:000054B4                 assume cs:_text
.text:000054B4                 ;org 54B4h
.text:000054B4 ; COMDAT (pick any)
.text:000054B4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000054B4
.text:000054B4 ; =============== S U B R O U T I N E =======================================
.text:000054B4
.text:000054B4 ; Attributes: bp-based frame
.text:000054B4
.text:000054B4 ; __int32 __stdcall CLimitedSequentialInStream::QueryInterface(CLimitedSequentialInStream *this, const struct _GUID *Buf1, void **)
.text:000054B4                 public ?QueryInterface@CLimitedSequentialInStream@@UAGJABU_GUID@@PAPAX@Z
.text:000054B4 ?QueryInterface@CLimitedSequentialInStream@@UAGJABU_GUID@@PAPAX@Z proc near
.text:000054B4                                         ; DATA XREF: .rdata:const CLimitedSequentialInStream::`vftable'o
.text:000054B4
.text:000054B4 this            = dword ptr  8
.text:000054B4 Buf1            = dword ptr  0Ch
.text:000054B4 arg_8           = dword ptr  10h
.text:000054B4
.text:000054B4                 push    ebp
.text:000054B5                 mov     ebp, esp
.text:000054B7                 mov     eax, [ebp+arg_8]
.text:000054BA                 mov     dword ptr [eax], 0
.text:000054C0                 push    offset _IID_IUnknown ; Buf2
.text:000054C5                 mov     ecx, [ebp+Buf1]
.text:000054C8                 push    ecx             ; Buf1
.text:000054C9                 call    ___@8           ; __(x,x)
.text:000054CE                 test    eax, eax
.text:000054D0                 jz      short loc_54DC
.text:000054D2                 mov     edx, [ebp+arg_8]
.text:000054D5                 mov     eax, [ebp+this]
.text:000054D8                 mov     [edx], eax
.text:000054DA                 jmp     short loc_54FF
.text:000054DC ; ---------------------------------------------------------------------------
.text:000054DC
.text:000054DC loc_54DC:                               ; CODE XREF: CLimitedSequentialInStream::QueryInterface(_GUID const &,void * *)+1Cj
.text:000054DC                 push    offset _IID_ISequentialInStream ; Buf2
.text:000054E1                 mov     ecx, [ebp+Buf1]
.text:000054E4                 push    ecx             ; Buf1
.text:000054E5                 call    ___@8           ; __(x,x)
.text:000054EA                 test    eax, eax
.text:000054EC                 jz      short loc_54F8
.text:000054EE                 mov     edx, [ebp+arg_8]
.text:000054F1                 mov     eax, [ebp+this]
.text:000054F4                 mov     [edx], eax
.text:000054F6                 jmp     short loc_54FF
.text:000054F8 ; ---------------------------------------------------------------------------
.text:000054F8
.text:000054F8 loc_54F8:                               ; CODE XREF: CLimitedSequentialInStream::QueryInterface(_GUID const &,void * *)+38j
.text:000054F8                 mov     eax, 80004002h
.text:000054FD                 jmp     short loc_5510
.text:000054FF ; ---------------------------------------------------------------------------
.text:000054FF
.text:000054FF loc_54FF:                               ; CODE XREF: CLimitedSequentialInStream::QueryInterface(_GUID const &,void * *)+26j
.text:000054FF                                         ; CLimitedSequentialInStream::QueryInterface(_GUID const &,void * *)+42j
.text:000054FF                 mov     ecx, [ebp+this]
.text:00005502                 mov     edx, [ecx+4]
.text:00005505                 add     edx, 1
.text:00005508                 mov     eax, [ebp+this]
.text:0000550B                 mov     [eax+4], edx
.text:0000550E                 xor     eax, eax
.text:00005510
.text:00005510 loc_5510:                               ; CODE XREF: CLimitedSequentialInStream::QueryInterface(_GUID const &,void * *)+49j
.text:00005510                 cmp     ebp, esp
.text:00005512                 call    __RTC_CheckEsp
.text:00005517                 pop     ebp
.text:00005518                 retn    0Ch
.text:00005518 ?QueryInterface@CLimitedSequentialInStream@@UAGJABU_GUID@@PAPAX@Z endp
.text:00005518
.text:00005518 ; ---------------------------------------------------------------------------
.text:0000551B                 align 4
.text:0000551B _text           ends
.text:0000551B
.text:0000551C ; ===========================================================================
.text:0000551C
.text:0000551C ; Segment type: Pure code
.text:0000551C ; Segment permissions: Read/Execute
.text:0000551C _text           segment para public 'CODE' use32
.text:0000551C                 assume cs:_text
.text:0000551C                 ;org 551Ch
.text:0000551C ; COMDAT (pick any)
.text:0000551C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000551C
.text:0000551C ; =============== S U B R O U T I N E =======================================
.text:0000551C
.text:0000551C ; Attributes: bp-based frame
.text:0000551C
.text:0000551C ; unsigned __int32 __stdcall CLimitedSequentialInStream::AddRef(CLimitedSequentialInStream *this)
.text:0000551C                 public ?AddRef@CLimitedSequentialInStream@@UAGKXZ
.text:0000551C ?AddRef@CLimitedSequentialInStream@@UAGKXZ proc near
.text:0000551C                                         ; DATA XREF: .rdata:000052F4o
.text:0000551C
.text:0000551C var_4           = dword ptr -4
.text:0000551C this            = dword ptr  8
.text:0000551C
.text:0000551C                 push    ebp
.text:0000551D                 mov     ebp, esp
.text:0000551F                 push    ecx
.text:00005520                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005527                 mov     eax, [ebp+this]
.text:0000552A                 mov     ecx, [eax+4]
.text:0000552D                 add     ecx, 1
.text:00005530                 mov     [ebp+var_4], ecx
.text:00005533                 mov     edx, [ebp+this]
.text:00005536                 mov     eax, [ebp+var_4]
.text:00005539                 mov     [edx+4], eax
.text:0000553C                 mov     eax, [ebp+var_4]
.text:0000553F                 mov     esp, ebp
.text:00005541                 pop     ebp
.text:00005542                 retn    4
.text:00005542 ?AddRef@CLimitedSequentialInStream@@UAGKXZ endp
.text:00005542
.text:00005542 ; ---------------------------------------------------------------------------
.text:00005545                 align 4
.text:00005545 _text           ends
.text:00005545
.text:00005548 ; ===========================================================================
.text:00005548
.text:00005548 ; Segment type: Pure code
.text:00005548 ; Segment permissions: Read/Execute
.text:00005548 _text           segment para public 'CODE' use32
.text:00005548                 assume cs:_text
.text:00005548                 ;org 5548h
.text:00005548 ; COMDAT (pick any)
.text:00005548                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005548
.text:00005548 ; =============== S U B R O U T I N E =======================================
.text:00005548
.text:00005548 ; Attributes: bp-based frame
.text:00005548
.text:00005548 ; unsigned __int32 __stdcall CLimitedSequentialInStream::Release(CLimitedSequentialInStream *this)
.text:00005548                 public ?Release@CLimitedSequentialInStream@@UAGKXZ
.text:00005548 ?Release@CLimitedSequentialInStream@@UAGKXZ proc near
.text:00005548                                         ; DATA XREF: .rdata:000052F8o
.text:00005548
.text:00005548 var_10          = dword ptr -10h
.text:00005548 var_C           = dword ptr -0Ch
.text:00005548 var_8           = dword ptr -8
.text:00005548 var_4           = dword ptr -4
.text:00005548 this            = dword ptr  8
.text:00005548
.text:00005548                 push    ebp
.text:00005549                 mov     ebp, esp
.text:0000554B                 sub     esp, 10h
.text:0000554E                 mov     eax, 0CCCCCCCCh
.text:00005553                 mov     [ebp+var_10], eax
.text:00005556                 mov     [ebp+var_C], eax
.text:00005559                 mov     [ebp+var_8], eax
.text:0000555C                 mov     [ebp+var_4], eax
.text:0000555F                 mov     eax, [ebp+this]
.text:00005562                 mov     ecx, [eax+4]
.text:00005565                 sub     ecx, 1
.text:00005568                 mov     [ebp+var_C], ecx
.text:0000556B                 mov     edx, [ebp+this]
.text:0000556E                 mov     eax, [ebp+var_C]
.text:00005571                 mov     [edx+4], eax
.text:00005574                 cmp     [ebp+var_C], 0
.text:00005578                 jz      short loc_5582
.text:0000557A                 mov     ecx, [ebp+this]
.text:0000557D                 mov     eax, [ecx+4]
.text:00005580                 jmp     short loc_55AC
.text:00005582 ; ---------------------------------------------------------------------------
.text:00005582
.text:00005582 loc_5582:                               ; CODE XREF: CLimitedSequentialInStream::Release(void)+30j
.text:00005582                 mov     edx, [ebp+this]
.text:00005585                 mov     [ebp+var_8], edx
.text:00005588                 mov     eax, [ebp+var_8]
.text:0000558B                 mov     [ebp+var_4], eax
.text:0000558E                 cmp     [ebp+var_4], 0
.text:00005592                 jz      short loc_55A3
.text:00005594                 push    1
.text:00005596                 mov     ecx, [ebp+var_4]
.text:00005599                 call    ??_GCLimitedSequentialInStream@@QAEPAXI@Z ; CLimitedSequentialInStream::`scalar deleting destructor'(uint)
.text:0000559E                 mov     [ebp+var_10], eax
.text:000055A1                 jmp     short loc_55AA
.text:000055A3 ; ---------------------------------------------------------------------------
.text:000055A3
.text:000055A3 loc_55A3:                               ; CODE XREF: CLimitedSequentialInStream::Release(void)+4Aj
.text:000055A3                 mov     [ebp+var_10], 0
.text:000055AA
.text:000055AA loc_55AA:                               ; CODE XREF: CLimitedSequentialInStream::Release(void)+59j
.text:000055AA                 xor     eax, eax
.text:000055AC
.text:000055AC loc_55AC:                               ; CODE XREF: CLimitedSequentialInStream::Release(void)+38j
.text:000055AC                 add     esp, 10h
.text:000055AF                 cmp     ebp, esp
.text:000055B1                 call    __RTC_CheckEsp
.text:000055B6                 mov     esp, ebp
.text:000055B8                 pop     ebp
.text:000055B9                 retn    4
.text:000055B9 ?Release@CLimitedSequentialInStream@@UAGKXZ endp
.text:000055B9
.text:000055B9 _text           ends
.text:000055B9
.text:000055BC ; ===========================================================================
.text:000055BC
.text:000055BC ; Segment type: Pure code
.text:000055BC ; Segment permissions: Read/Execute
.text:000055BC _text           segment para public 'CODE' use32
.text:000055BC                 assume cs:_text
.text:000055BC                 ;org 55BCh
.text:000055BC ; COMDAT (pick any)
.text:000055BC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000055BC
.text:000055BC ; =============== S U B R O U T I N E =======================================
.text:000055BC
.text:000055BC ; Attributes: bp-based frame
.text:000055BC
.text:000055BC ; public: void * __thiscall CLimitedSequentialInStream::`scalar deleting destructor'(unsigned int)
.text:000055BC                 public ??_GCLimitedSequentialInStream@@QAEPAXI@Z
.text:000055BC ??_GCLimitedSequentialInStream@@QAEPAXI@Z proc near
.text:000055BC                                         ; CODE XREF: CLimitedSequentialInStream::Release(void)+51p
.text:000055BC
.text:000055BC var_4           = dword ptr -4
.text:000055BC arg_0           = dword ptr  8
.text:000055BC
.text:000055BC                 push    ebp
.text:000055BD                 mov     ebp, esp
.text:000055BF                 push    ecx
.text:000055C0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000055C7                 mov     [ebp+var_4], ecx
.text:000055CA                 mov     ecx, [ebp+var_4] ; this
.text:000055CD                 call    ??1CLimitedSequentialInStream@@QAE@XZ ; CLimitedSequentialInStream::~CLimitedSequentialInStream(void)
.text:000055D2                 mov     eax, [ebp+arg_0]
.text:000055D5                 and     eax, 1
.text:000055D8                 jz      short loc_55E6
.text:000055DA                 mov     ecx, [ebp+var_4]
.text:000055DD                 push    ecx             ; void *
.text:000055DE                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000055E3                 add     esp, 4
.text:000055E6
.text:000055E6 loc_55E6:                               ; CODE XREF: CLimitedSequentialInStream::`scalar deleting destructor'(uint)+1Cj
.text:000055E6                 mov     eax, [ebp+var_4]
.text:000055E9                 add     esp, 4
.text:000055EC                 cmp     ebp, esp
.text:000055EE                 call    __RTC_CheckEsp
.text:000055F3                 mov     esp, ebp
.text:000055F5                 pop     ebp
.text:000055F6                 retn    4
.text:000055F6 ??_GCLimitedSequentialInStream@@QAEPAXI@Z endp
.text:000055F6
.text:000055F6 ; ---------------------------------------------------------------------------
.text:000055F9                 align 4
.text:000055F9 _text           ends
.text:000055F9
.text:000055FC ; ===========================================================================
.text:000055FC
.text:000055FC ; Segment type: Pure code
.text:000055FC ; Segment permissions: Read/Execute
.text:000055FC _text           segment para public 'CODE' use32
.text:000055FC                 assume cs:_text
.text:000055FC                 ;org 55FCh
.text:000055FC ; COMDAT (pick any)
.text:000055FC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000055FC
.text:000055FC ; =============== S U B R O U T I N E =======================================
.text:000055FC
.text:000055FC ; Attributes: bp-based frame
.text:000055FC
.text:000055FC ; _DWORD __thiscall CLimitedSequentialInStream::~CLimitedSequentialInStream(CLimitedSequentialInStream *__hidden this)
.text:000055FC                 public ??1CLimitedSequentialInStream@@QAE@XZ
.text:000055FC ??1CLimitedSequentialInStream@@QAE@XZ proc near
.text:000055FC                                         ; CODE XREF: CLimitedSequentialInStream::`scalar deleting destructor'(uint)+11p
.text:000055FC
.text:000055FC var_4           = dword ptr -4
.text:000055FC
.text:000055FC                 push    ebp
.text:000055FD                 mov     ebp, esp
.text:000055FF                 push    ecx
.text:00005600                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005607                 mov     [ebp+var_4], ecx
.text:0000560A                 mov     ecx, [ebp+var_4]
.text:0000560D                 add     ecx, 8
.text:00005610                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00005615                 add     esp, 4
.text:00005618                 cmp     ebp, esp
.text:0000561A                 call    __RTC_CheckEsp
.text:0000561F                 mov     esp, ebp
.text:00005621                 pop     ebp
.text:00005622                 retn
.text:00005622 ??1CLimitedSequentialInStream@@QAE@XZ endp
.text:00005622
.text:00005622 ; ---------------------------------------------------------------------------
.text:00005623                 align 4
.text:00005623 _text           ends
.text:00005623
.text:00005624 ; ===========================================================================
.text:00005624
.text:00005624 ; Segment type: Pure code
.text:00005624 ; Segment permissions: Read/Execute
.text:00005624 _text           segment para public 'CODE' use32
.text:00005624                 assume cs:_text
.text:00005624                 ;org 5624h
.text:00005624 ; COMDAT (pick any)
.text:00005624                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005624
.text:00005624 ; =============== S U B R O U T I N E =======================================
.text:00005624
.text:00005624 ; Attributes: bp-based frame
.text:00005624
.text:00005624 ; int __stdcall __(void *Buf1, void *Buf2)
.text:00005624                 public ___@8
.text:00005624 ___@8           proc near               ; CODE XREF: CLimitedSequentialInStream::QueryInterface(_GUID const &,void * *)+15p
.text:00005624                                         ; CLimitedSequentialInStream::QueryInterface(_GUID const &,void * *)+31p
.text:00005624
.text:00005624 Buf1            = dword ptr  8
.text:00005624 Buf2            = dword ptr  0Ch
.text:00005624
.text:00005624                 push    ebp
.text:00005625                 mov     ebp, esp
.text:00005627                 mov     eax, [ebp+Buf2]
.text:0000562A                 push    eax             ; Buf2
.text:0000562B                 mov     ecx, [ebp+Buf1]
.text:0000562E                 push    ecx             ; Buf1
.text:0000562F                 call    _IsEqualGUID@8  ; IsEqualGUID(x,x)
.text:00005634                 cmp     ebp, esp
.text:00005636                 call    __RTC_CheckEsp
.text:0000563B                 pop     ebp
.text:0000563C                 retn    8
.text:0000563C ___@8           endp
.text:0000563C
.text:0000563C ; ---------------------------------------------------------------------------
.text:0000563F                 align 10h
.text:0000563F _text           ends
.text:0000563F
.text:00005640 ; ===========================================================================
.text:00005640
.text:00005640 ; Segment type: Pure code
.text:00005640 ; Segment permissions: Read/Execute
.text:00005640 _text           segment para public 'CODE' use32
.text:00005640                 assume cs:_text
.text:00005640                 ;org 5640h
.text:00005640 ; COMDAT (pick any)
.text:00005640                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005640
.text:00005640 ; =============== S U B R O U T I N E =======================================
.text:00005640
.text:00005640 ; Attributes: bp-based frame
.text:00005640
.text:00005640 ; int __stdcall IsEqualGUID(void *Buf1, void *Buf2)
.text:00005640                 public _IsEqualGUID@8
.text:00005640 _IsEqualGUID@8  proc near               ; CODE XREF: __(x,x)+Bp
.text:00005640
.text:00005640 Buf1            = dword ptr  8
.text:00005640 Buf2            = dword ptr  0Ch
.text:00005640
.text:00005640                 push    ebp
.text:00005641                 mov     ebp, esp
.text:00005643                 push    10h             ; Size
.text:00005645                 mov     eax, [ebp+Buf2]
.text:00005648                 push    eax             ; Buf2
.text:00005649                 mov     ecx, [ebp+Buf1]
.text:0000564C                 push    ecx             ; Buf1
.text:0000564D                 call    _memcmp
.text:00005652                 add     esp, 0Ch
.text:00005655                 neg     eax
.text:00005657                 sbb     eax, eax
.text:00005659                 add     eax, 1
.text:0000565C                 cmp     ebp, esp
.text:0000565E                 call    __RTC_CheckEsp
.text:00005663                 pop     ebp
.text:00005664                 retn    8
.text:00005664 _IsEqualGUID@8  endp
.text:00005664
.text:00005664 ; ---------------------------------------------------------------------------
.text:00005667                 align 4
.text:00005667 _text           ends
.text:00005667
.text:00005668 ; ===========================================================================
.text:00005668
.text:00005668 ; Segment type: Pure code
.text:00005668 ; Segment permissions: Read/Execute
.text:00005668 _text           segment para public 'CODE' use32
.text:00005668                 assume cs:_text
.text:00005668                 ;org 5668h
.text:00005668 ; COMDAT (pick any)
.text:00005668                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005668
.text:00005668 ; =============== S U B R O U T I N E =======================================
.text:00005668
.text:00005668 ; Attributes: bp-based frame
.text:00005668
.text:00005668 ; _DWORD __thiscall ISequentialInStream::ISequentialInStream(ISequentialInStream *__hidden this)
.text:00005668                 public ??0ISequentialInStream@@QAE@XZ
.text:00005668 ??0ISequentialInStream@@QAE@XZ proc near
.text:00005668                                         ; CODE XREF: CLimitedSequentialInStream::CLimitedSequentialInStream(void)+11p
.text:00005668
.text:00005668 var_4           = dword ptr -4
.text:00005668
.text:00005668                 push    ebp
.text:00005669                 mov     ebp, esp
.text:0000566B                 push    ecx
.text:0000566C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005673                 mov     [ebp+var_4], ecx
.text:00005676                 mov     ecx, [ebp+var_4]
.text:00005679                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:0000567E                 mov     eax, [ebp+var_4]
.text:00005681                 mov     dword ptr [eax], offset ??_7ISequentialInStream@@6B@ ; const ISequentialInStream::`vftable'
.text:00005687                 mov     eax, [ebp+var_4]
.text:0000568A                 add     esp, 4
.text:0000568D                 cmp     ebp, esp
.text:0000568F                 call    __RTC_CheckEsp
.text:00005694                 mov     esp, ebp
.text:00005696                 pop     ebp
.text:00005697                 retn
.text:00005697 ??0ISequentialInStream@@QAE@XZ endp
.text:00005697
.text:00005697 _text           ends
.text:00005697
.rdata:00005698 ; ===========================================================================
.rdata:00005698
.rdata:00005698 ; Segment type: Pure data
.rdata:00005698 ; Segment permissions: Read
.rdata:00005698 _rdata          segment dword public 'DATA' use32
.rdata:00005698                 assume cs:_rdata
.rdata:00005698                 ;org 5698h
.rdata:00005698 ; COMDAT (pick largest)
.rdata:00005698                 dd offset ??_R4ISequentialInStream@@6B@ ; const ISequentialInStream::`RTTI Complete Object Locator'
.rdata:0000569C                 public ??_7ISequentialInStream@@6B@
.rdata:0000569C ; const ISequentialInStream::`vftable'
.rdata:0000569C ??_7ISequentialInStream@@6B@ dd offset __purecall
.rdata:0000569C                                         ; DATA XREF: ISequentialInStream::ISequentialInStream(void)+19o
.rdata:000056A0                 dd offset __purecall
.rdata:000056A4                 dd offset __purecall
.rdata:000056A8                 dd offset __purecall
.rdata:000056A8 _rdata          ends
.rdata:000056A8
.rdata$r:000056AC ; ===========================================================================
.rdata$r:000056AC
.rdata$r:000056AC ; Segment type: Pure data
.rdata$r:000056AC ; Segment permissions: Read
.rdata$r:000056AC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000056AC                 assume cs:_rdata$r
.rdata$r:000056AC                 ;org 56ACh
.rdata$r:000056AC ; COMDAT (pick any)
.rdata$r:000056AC                 public ??_R4ISequentialInStream@@6B@
.rdata$r:000056AC ; const ISequentialInStream::`RTTI Complete Object Locator'
.rdata$r:000056AC ??_R4ISequentialInStream@@6B@ db    0   ; DATA XREF: .rdata:00005698o
.rdata$r:000056AD                 db    0
.rdata$r:000056AE                 db    0
.rdata$r:000056AF                 db    0
.rdata$r:000056B0                 db    0
.rdata$r:000056B1                 db    0
.rdata$r:000056B2                 db    0
.rdata$r:000056B3                 db    0
.rdata$r:000056B4                 db    0
.rdata$r:000056B5                 db    0
.rdata$r:000056B6                 db    0
.rdata$r:000056B7                 db    0
.rdata$r:000056B8                 dd offset ??_R0?AUISequentialInStream@@@8 ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:000056BC                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000056BC _rdata$r        ends
.rdata$r:000056BC
.text:000056C0 ; ===========================================================================
.text:000056C0
.text:000056C0 ; Segment type: Pure code
.text:000056C0 ; Segment permissions: Read/Execute
.text:000056C0 _text           segment para public 'CODE' use32
.text:000056C0                 assume cs:_text
.text:000056C0                 ;org 56C0h
.text:000056C0 ; COMDAT (pick any)
.text:000056C0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000056C0
.text:000056C0 ; =============== S U B R O U T I N E =======================================
.text:000056C0
.text:000056C0 ; Attributes: bp-based frame
.text:000056C0
.text:000056C0 ; public: __thiscall IUnknown::IUnknown(void)
.text:000056C0                 public ??0IUnknown@@QAE@XZ
.text:000056C0 ??0IUnknown@@QAE@XZ proc near           ; CODE XREF: ISequentialInStream::ISequentialInStream(void)+11p
.text:000056C0
.text:000056C0 var_4           = dword ptr -4
.text:000056C0
.text:000056C0                 push    ebp
.text:000056C1                 mov     ebp, esp
.text:000056C3                 push    ecx
.text:000056C4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000056CB                 mov     [ebp+var_4], ecx
.text:000056CE                 mov     eax, [ebp+var_4]
.text:000056D1                 mov     esp, ebp
.text:000056D3                 pop     ebp
.text:000056D4                 retn
.text:000056D4 ??0IUnknown@@QAE@XZ endp
.text:000056D4
.text:000056D4 ; ---------------------------------------------------------------------------
.text:000056D5                 align 4
.text:000056D5 _text           ends
.text:000056D5
.text:000056D8 ; ===========================================================================
.text:000056D8
.text:000056D8 ; Segment type: Pure code
.text:000056D8 ; Segment permissions: Read/Execute
.text:000056D8 _text           segment para public 'CODE' use32
.text:000056D8                 assume cs:_text
.text:000056D8                 ;org 56D8h
.text:000056D8 ; COMDAT (pick any)
.text:000056D8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000056D8
.text:000056D8 ; =============== S U B R O U T I N E =======================================
.text:000056D8
.text:000056D8 ; Attributes: bp-based frame
.text:000056D8
.text:000056D8 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::CMyComPtr<struct ISequentialInStream>(void)
.text:000056D8                 public ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
.text:000056D8 ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ proc near
.text:000056D8                                         ; CODE XREF: CLimitedSequentialInStream::CLimitedSequentialInStream(void)+30p
.text:000056D8
.text:000056D8 var_4           = dword ptr -4
.text:000056D8
.text:000056D8                 push    ebp
.text:000056D9                 mov     ebp, esp
.text:000056DB                 push    ecx
.text:000056DC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000056E3                 mov     [ebp+var_4], ecx
.text:000056E6                 mov     eax, [ebp+var_4]
.text:000056E9                 mov     dword ptr [eax], 0
.text:000056EF                 mov     eax, [ebp+var_4]
.text:000056F2                 mov     esp, ebp
.text:000056F4                 pop     ebp
.text:000056F5                 retn
.text:000056F5 ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ endp
.text:000056F5
.text:000056F5 ; ---------------------------------------------------------------------------
.text:000056F6                 align 4
.text:000056F6 _text           ends
.text:000056F6
.text:000056F8 ; ===========================================================================
.text:000056F8
.text:000056F8 ; Segment type: Pure code
.text:000056F8 ; Segment permissions: Read/Execute
.text:000056F8 _text           segment para public 'CODE' use32
.text:000056F8                 assume cs:_text
.text:000056F8                 ;org 56F8h
.text:000056F8 ; COMDAT (pick any)
.text:000056F8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000056F8
.text:000056F8 ; =============== S U B R O U T I N E =======================================
.text:000056F8
.text:000056F8 ; Attributes: bp-based frame
.text:000056F8
.text:000056F8 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::CMyComPtr<struct ISequentialInStream>(struct ISequentialInStream *)
.text:000056F8                 public ??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z
.text:000056F8 ??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z proc near
.text:000056F8                                         ; CODE XREF: NArchive::NZip::CInArchive::CreateLimitedStream(unsigned __int64,unsigned __int64)+83p
.text:000056F8
.text:000056F8 var_4           = dword ptr -4
.text:000056F8 arg_0           = dword ptr  8
.text:000056F8
.text:000056F8                 push    ebp
.text:000056F9                 mov     ebp, esp
.text:000056FB                 push    ecx
.text:000056FC                 push    esi
.text:000056FD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005704                 mov     [ebp+var_4], ecx
.text:00005707                 mov     eax, [ebp+var_4]
.text:0000570A                 mov     ecx, [ebp+arg_0]
.text:0000570D                 mov     [eax], ecx
.text:0000570F                 cmp     [ebp+arg_0], 0
.text:00005713                 jz      short loc_572C
.text:00005715                 mov     edx, [ebp+arg_0]
.text:00005718                 mov     eax, [edx]
.text:0000571A                 mov     esi, esp
.text:0000571C                 mov     ecx, [ebp+arg_0]
.text:0000571F                 push    ecx
.text:00005720                 mov     edx, [eax+4]
.text:00005723                 call    edx
.text:00005725                 cmp     esi, esp
.text:00005727                 call    __RTC_CheckEsp
.text:0000572C
.text:0000572C loc_572C:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(ISequentialInStream *)+1Bj
.text:0000572C                 mov     eax, [ebp+var_4]
.text:0000572F                 pop     esi
.text:00005730                 add     esp, 4
.text:00005733                 cmp     ebp, esp
.text:00005735                 call    __RTC_CheckEsp
.text:0000573A                 mov     esp, ebp
.text:0000573C                 pop     ebp
.text:0000573D                 retn    4
.text:0000573D ??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z endp
.text:0000573D
.text:0000573D _text           ends
.text:0000573D
.text:00005740 ; ===========================================================================
.text:00005740
.text:00005740 ; Segment type: Pure code
.text:00005740 ; Segment permissions: Read/Execute
.text:00005740 _text           segment para public 'CODE' use32
.text:00005740                 assume cs:_text
.text:00005740                 ;org 5740h
.text:00005740 ; COMDAT (pick any)
.text:00005740                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005740
.text:00005740 ; =============== S U B R O U T I N E =======================================
.text:00005740
.text:00005740 ; Attributes: bp-based frame
.text:00005740
.text:00005740 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::~CMyComPtr<struct ISequentialInStream>(void)
.text:00005740                 public ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
.text:00005740 ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ proc near
.text:00005740                                         ; CODE XREF: NArchive::NZip::CInArchive::CreateLimitedStream(unsigned __int64,unsigned __int64)+108p
.text:00005740                                         ; __unwindfunclet$?CreateLimitedStream@CInArchive@NZip@NArchive@@QAEPAUISequentialInStream@@_K0@Z$1+3j ...
.text:00005740
.text:00005740 var_4           = dword ptr -4
.text:00005740
.text:00005740                 push    ebp
.text:00005741                 mov     ebp, esp
.text:00005743                 push    ecx
.text:00005744                 push    esi
.text:00005745                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000574C                 mov     [ebp+var_4], ecx
.text:0000574F                 mov     eax, [ebp+var_4]
.text:00005752                 cmp     dword ptr [eax], 0
.text:00005755                 jz      short loc_5772
.text:00005757                 mov     ecx, [ebp+var_4]
.text:0000575A                 mov     edx, [ecx]
.text:0000575C                 mov     eax, [ebp+var_4]
.text:0000575F                 mov     ecx, [eax]
.text:00005761                 mov     edx, [edx]
.text:00005763                 mov     esi, esp
.text:00005765                 push    ecx
.text:00005766                 mov     eax, [edx+8]
.text:00005769                 call    eax
.text:0000576B                 cmp     esi, esp
.text:0000576D                 call    __RTC_CheckEsp
.text:00005772
.text:00005772 loc_5772:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)+15j
.text:00005772                 pop     esi
.text:00005773                 add     esp, 4
.text:00005776                 cmp     ebp, esp
.text:00005778                 call    __RTC_CheckEsp
.text:0000577D                 mov     esp, ebp
.text:0000577F                 pop     ebp
.text:00005780                 retn
.text:00005780 ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ endp
.text:00005780
.text:00005780 ; ---------------------------------------------------------------------------
.text:00005781                 align 4
.text:00005781 _text           ends
.text:00005781
.text:00005784 ; ===========================================================================
.text:00005784
.text:00005784 ; Segment type: Pure code
.text:00005784 ; Segment permissions: Read/Execute
.text:00005784 _text           segment para public 'CODE' use32
.text:00005784                 assume cs:_text
.text:00005784                 ;org 5784h
.text:00005784 ; COMDAT (pick any)
.text:00005784                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005784
.text:00005784 ; =============== S U B R O U T I N E =======================================
.text:00005784
.text:00005784 ; Attributes: bp-based frame
.text:00005784
.text:00005784 ; public: struct ISequentialInStream * __thiscall CMyComPtr<struct ISequentialInStream>::operator=(struct ISequentialInStream *)
.text:00005784                 public ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z
.text:00005784 ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z proc near
.text:00005784                                         ; CODE XREF: CLimitedSequentialInStream::SetStream(ISequentialInStream *)+18p
.text:00005784
.text:00005784 var_4           = dword ptr -4
.text:00005784 arg_0           = dword ptr  8
.text:00005784
.text:00005784                 push    ebp
.text:00005785                 mov     ebp, esp
.text:00005787                 push    ecx
.text:00005788                 push    esi
.text:00005789                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005790                 mov     [ebp+var_4], ecx
.text:00005793                 cmp     [ebp+arg_0], 0
.text:00005797                 jz      short loc_57B0
.text:00005799                 mov     eax, [ebp+arg_0]
.text:0000579C                 mov     ecx, [eax]
.text:0000579E                 mov     esi, esp
.text:000057A0                 mov     edx, [ebp+arg_0]
.text:000057A3                 push    edx
.text:000057A4                 mov     eax, [ecx+4]
.text:000057A7                 call    eax
.text:000057A9                 cmp     esi, esp
.text:000057AB                 call    __RTC_CheckEsp
.text:000057B0
.text:000057B0 loc_57B0:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)+13j
.text:000057B0                 mov     ecx, [ebp+var_4]
.text:000057B3                 cmp     dword ptr [ecx], 0
.text:000057B6                 jz      short loc_57D3
.text:000057B8                 mov     edx, [ebp+var_4]
.text:000057BB                 mov     eax, [edx]
.text:000057BD                 mov     ecx, [ebp+var_4]
.text:000057C0                 mov     edx, [ecx]
.text:000057C2                 mov     eax, [eax]
.text:000057C4                 mov     esi, esp
.text:000057C6                 push    edx
.text:000057C7                 mov     ecx, [eax+8]
.text:000057CA                 call    ecx
.text:000057CC                 cmp     esi, esp
.text:000057CE                 call    __RTC_CheckEsp
.text:000057D3
.text:000057D3 loc_57D3:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)+32j
.text:000057D3                 mov     edx, [ebp+var_4]
.text:000057D6                 mov     eax, [ebp+arg_0]
.text:000057D9                 mov     [edx], eax
.text:000057DB                 mov     eax, [ebp+arg_0]
.text:000057DE                 pop     esi
.text:000057DF                 add     esp, 4
.text:000057E2                 cmp     ebp, esp
.text:000057E4                 call    __RTC_CheckEsp
.text:000057E9                 mov     esp, ebp
.text:000057EB                 pop     ebp
.text:000057EC                 retn    4
.text:000057EC ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z endp
.text:000057EC
.text:000057EC ; ---------------------------------------------------------------------------
.text:000057EF                 align 10h
.text:000057EF _text           ends
.text:000057EF
.text:000057F0 ; ===========================================================================
.text:000057F0
.text:000057F0 ; Segment type: Pure code
.text:000057F0 ; Segment permissions: Read/Execute
.text:000057F0 _text           segment para public 'CODE' use32
.text:000057F0                 assume cs:_text
.text:000057F0                 ;org 57F0h
.text:000057F0 ; COMDAT (pick any)
.text:000057F0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000057F0
.text:000057F0 ; =============== S U B R O U T I N E =======================================
.text:000057F0
.text:000057F0 ; Attributes: bp-based frame
.text:000057F0
.text:000057F0 ; public: struct ISequentialInStream * __thiscall CMyComPtr<struct ISequentialInStream>::Detach(void)
.text:000057F0                 public ?Detach@?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@XZ
.text:000057F0 ?Detach@?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@XZ proc near
.text:000057F0                                         ; CODE XREF: NArchive::NZip::CInArchive::CreateLimitedStream(unsigned __int64,unsigned __int64)+F6p
.text:000057F0
.text:000057F0 var_8           = dword ptr -8
.text:000057F0 var_4           = dword ptr -4
.text:000057F0
.text:000057F0                 push    ebp
.text:000057F1                 mov     ebp, esp
.text:000057F3                 sub     esp, 8
.text:000057F6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000057FD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005804                 mov     [ebp+var_4], ecx
.text:00005807                 mov     eax, [ebp+var_4]
.text:0000580A                 mov     ecx, [eax]
.text:0000580C                 mov     [ebp+var_8], ecx
.text:0000580F                 mov     edx, [ebp+var_4]
.text:00005812                 mov     dword ptr [edx], 0
.text:00005818                 mov     eax, [ebp+var_8]
.text:0000581B                 mov     esp, ebp
.text:0000581D                 pop     ebp
.text:0000581E                 retn
.text:0000581E ?Detach@?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@XZ endp
.text:0000581E
.text:0000581E ; ---------------------------------------------------------------------------
.text:0000581F                 align 10h
.text:0000581F _text           ends
.text:0000581F
.text:00005820 ; ===========================================================================
.text:00005820
.text:00005820 ; Segment type: Pure code
.text:00005820 ; Segment permissions: Read/Execute
.text:00005820 _text           segment para public 'CODE' use32
.text:00005820                 assume cs:_text
.text:00005820                 ;org 5820h
.text:00005820 ; COMDAT (pick any)
.text:00005820                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005820
.text:00005820 ; =============== S U B R O U T I N E =======================================
.text:00005820
.text:00005820 ; Attributes: bp-based frame
.text:00005820
.text:00005820 ; public: void __thiscall CMyComPtr<struct IInStream>::Release(void)
.text:00005820                 public ?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ
.text:00005820 ?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ proc near
.text:00005820                                         ; CODE XREF: NArchive::NZip::CInArchive::Close(void)+48p
.text:00005820
.text:00005820 var_4           = dword ptr -4
.text:00005820
.text:00005820                 push    ebp
.text:00005821                 mov     ebp, esp
.text:00005823                 push    ecx
.text:00005824                 push    esi
.text:00005825                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000582C                 mov     [ebp+var_4], ecx
.text:0000582F                 mov     eax, [ebp+var_4]
.text:00005832                 cmp     dword ptr [eax], 0
.text:00005835                 jz      short loc_585B
.text:00005837                 mov     ecx, [ebp+var_4]
.text:0000583A                 mov     edx, [ecx]
.text:0000583C                 mov     eax, [ebp+var_4]
.text:0000583F                 mov     ecx, [eax]
.text:00005841                 mov     edx, [edx]
.text:00005843                 mov     esi, esp
.text:00005845                 push    ecx
.text:00005846                 mov     eax, [edx+8]
.text:00005849                 call    eax
.text:0000584B                 cmp     esi, esp
.text:0000584D                 call    __RTC_CheckEsp
.text:00005852                 mov     ecx, [ebp+var_4]
.text:00005855                 mov     dword ptr [ecx], 0
.text:0000585B
.text:0000585B loc_585B:                               ; CODE XREF: CMyComPtr<IInStream>::Release(void)+15j
.text:0000585B                 pop     esi
.text:0000585C                 add     esp, 4
.text:0000585F                 cmp     ebp, esp
.text:00005861                 call    __RTC_CheckEsp
.text:00005866                 mov     esp, ebp
.text:00005868                 pop     ebp
.text:00005869                 retn
.text:00005869 ?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ endp
.text:00005869
.text:00005869 ; ---------------------------------------------------------------------------
.text:0000586A                 align 4
.text:0000586A _text           ends
.text:0000586A
.text:0000586C ; ===========================================================================
.text:0000586C
.text:0000586C ; Segment type: Pure code
.text:0000586C ; Segment permissions: Read/Execute
.text:0000586C _text           segment para public 'CODE' use32
.text:0000586C                 assume cs:_text
.text:0000586C                 ;org 586Ch
.text:0000586C ; COMDAT (pick any)
.text:0000586C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000586C
.text:0000586C ; =============== S U B R O U T I N E =======================================
.text:0000586C
.text:0000586C ; Attributes: bp-based frame
.text:0000586C
.text:0000586C ; public: __thiscall CMyComPtr<struct IInStream>::operator struct IInStream *(void)const
.text:0000586C                 public ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
.text:0000586C ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ proc near
.text:0000586C                                         ; CODE XREF: NArchive::NZip::CInArchive::ReadBytes(void *,uint,uint *)+B6p
.text:0000586C                                         ; NArchive::NZip::CInArchive::SafeReadBytes(void *,uint)+74p ...
.text:0000586C
.text:0000586C var_4           = dword ptr -4
.text:0000586C
.text:0000586C                 push    ebp
.text:0000586D                 mov     ebp, esp
.text:0000586F                 push    ecx
.text:00005870                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005877                 mov     [ebp+var_4], ecx
.text:0000587A                 mov     eax, [ebp+var_4]
.text:0000587D                 mov     eax, [eax]
.text:0000587F                 mov     esp, ebp
.text:00005881                 pop     ebp
.text:00005882                 retn
.text:00005882 ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ endp
.text:00005882
.text:00005882 ; ---------------------------------------------------------------------------
.text:00005883                 align 4
.text:00005883 _text           ends
.text:00005883
.text:00005884 ; ===========================================================================
.text:00005884
.text:00005884 ; Segment type: Pure code
.text:00005884 ; Segment permissions: Read/Execute
.text:00005884 _text           segment para public 'CODE' use32
.text:00005884                 assume cs:_text
.text:00005884                 ;org 5884h
.text:00005884 ; COMDAT (pick any)
.text:00005884                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005884
.text:00005884 ; =============== S U B R O U T I N E =======================================
.text:00005884
.text:00005884 ; Attributes: bp-based frame
.text:00005884
.text:00005884 ; public: struct IInStream * __thiscall CMyComPtr<struct IInStream>::operator->(void)const
.text:00005884                 public ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
.text:00005884 ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ proc near
.text:00005884                                         ; CODE XREF: NArchive::NZip::CInArchive::Seek(unsigned __int64)+21p
.text:00005884                                         ; NArchive::NZip::CInArchive::IncreaseRealPosition(__int64)+21p ...
.text:00005884
.text:00005884 var_4           = dword ptr -4
.text:00005884
.text:00005884                 push    ebp
.text:00005885                 mov     ebp, esp
.text:00005887                 push    ecx
.text:00005888                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000588F                 mov     [ebp+var_4], ecx
.text:00005892                 mov     eax, [ebp+var_4]
.text:00005895                 mov     eax, [eax]
.text:00005897                 mov     esp, ebp
.text:00005899                 pop     ebp
.text:0000589A                 retn
.text:0000589A ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ endp
.text:0000589A
.text:0000589A ; ---------------------------------------------------------------------------
.text:0000589B                 align 4
.text:0000589B _text           ends
.text:0000589B
.text:0000589C ; ===========================================================================
.text:0000589C
.text:0000589C ; Segment type: Pure code
.text:0000589C ; Segment permissions: Read/Execute
.text:0000589C _text           segment para public 'CODE' use32
.text:0000589C                 assume cs:_text
.text:0000589C                 ;org 589Ch
.text:0000589C ; COMDAT (pick any)
.text:0000589C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000589C
.text:0000589C ; =============== S U B R O U T I N E =======================================
.text:0000589C
.text:0000589C ; Attributes: bp-based frame
.text:0000589C
.text:0000589C ; public: struct IInStream * __thiscall CMyComPtr<struct IInStream>::operator=(struct IInStream *)
.text:0000589C                 public ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z
.text:0000589C ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z proc near
.text:0000589C                                         ; CODE XREF: NArchive::NZip::CInArchive::Open(IInStream *,unsigned __int64 const *)+12Dp
.text:0000589C
.text:0000589C var_4           = dword ptr -4
.text:0000589C arg_0           = dword ptr  8
.text:0000589C
.text:0000589C                 push    ebp
.text:0000589D                 mov     ebp, esp
.text:0000589F                 push    ecx
.text:000058A0                 push    esi
.text:000058A1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000058A8                 mov     [ebp+var_4], ecx
.text:000058AB                 cmp     [ebp+arg_0], 0
.text:000058AF                 jz      short loc_58C8
.text:000058B1                 mov     eax, [ebp+arg_0]
.text:000058B4                 mov     ecx, [eax]
.text:000058B6                 mov     esi, esp
.text:000058B8                 mov     edx, [ebp+arg_0]
.text:000058BB                 push    edx
.text:000058BC                 mov     eax, [ecx+4]
.text:000058BF                 call    eax
.text:000058C1                 cmp     esi, esp
.text:000058C3                 call    __RTC_CheckEsp
.text:000058C8
.text:000058C8 loc_58C8:                               ; CODE XREF: CMyComPtr<IInStream>::operator=(IInStream *)+13j
.text:000058C8                 mov     ecx, [ebp+var_4]
.text:000058CB                 cmp     dword ptr [ecx], 0
.text:000058CE                 jz      short loc_58EB
.text:000058D0                 mov     edx, [ebp+var_4]
.text:000058D3                 mov     eax, [edx]
.text:000058D5                 mov     ecx, [ebp+var_4]
.text:000058D8                 mov     edx, [ecx]
.text:000058DA                 mov     eax, [eax]
.text:000058DC                 mov     esi, esp
.text:000058DE                 push    edx
.text:000058DF                 mov     ecx, [eax+8]
.text:000058E2                 call    ecx
.text:000058E4                 cmp     esi, esp
.text:000058E6                 call    __RTC_CheckEsp
.text:000058EB
.text:000058EB loc_58EB:                               ; CODE XREF: CMyComPtr<IInStream>::operator=(IInStream *)+32j
.text:000058EB                 mov     edx, [ebp+var_4]
.text:000058EE                 mov     eax, [ebp+arg_0]
.text:000058F1                 mov     [edx], eax
.text:000058F3                 mov     eax, [ebp+arg_0]
.text:000058F6                 pop     esi
.text:000058F7                 add     esp, 4
.text:000058FA                 cmp     ebp, esp
.text:000058FC                 call    __RTC_CheckEsp
.text:00005901                 mov     esp, ebp
.text:00005903                 pop     ebp
.text:00005904                 retn    4
.text:00005904 ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z endp
.text:00005904
.text:00005904 ; ---------------------------------------------------------------------------
.text:00005907                 align 4
.text:00005907 _text           ends
.text:00005907
.text:00005908 ; ===========================================================================
.text:00005908
.text:00005908 ; Segment type: Pure code
.text:00005908 ; Segment permissions: Read/Execute
.text:00005908 _text           segment para public 'CODE' use32
.text:00005908                 assume cs:_text
.text:00005908                 ;org 5908h
.text:00005908 ; COMDAT (pick any)
.text:00005908                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005908
.text:00005908 ; =============== S U B R O U T I N E =======================================
.text:00005908
.text:00005908 ; Attributes: bp-based frame
.text:00005908
.text:00005908 ; public: void __thiscall CBuffer<unsigned char>::Free(void)
.text:00005908                 public ?Free@?$CBuffer@E@@QAEXXZ
.text:00005908 ?Free@?$CBuffer@E@@QAEXXZ proc near     ; CODE XREF: NArchive::NZip::CInArchiveInfo::Clear(void)+80p
.text:00005908                                         ; CBuffer<uchar>::Alloc(uint)+25p
.text:00005908
.text:00005908 var_8           = dword ptr -8
.text:00005908 var_4           = dword ptr -4
.text:00005908
.text:00005908                 push    ebp
.text:00005909                 mov     ebp, esp
.text:0000590B                 sub     esp, 8
.text:0000590E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005915                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000591C                 mov     [ebp+var_4], ecx
.text:0000591F                 mov     eax, [ebp+var_4]
.text:00005922                 cmp     dword ptr [eax], 0
.text:00005925                 jz      short loc_5944
.text:00005927                 mov     ecx, [ebp+var_4]
.text:0000592A                 mov     edx, [ecx]
.text:0000592C                 mov     [ebp+var_8], edx
.text:0000592F                 mov     eax, [ebp+var_8]
.text:00005932                 push    eax             ; void *
.text:00005933                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00005938                 add     esp, 4
.text:0000593B                 mov     ecx, [ebp+var_4]
.text:0000593E                 mov     dword ptr [ecx], 0
.text:00005944
.text:00005944 loc_5944:                               ; CODE XREF: CBuffer<uchar>::Free(void)+1Dj
.text:00005944                 mov     edx, [ebp+var_4]
.text:00005947                 mov     dword ptr [edx+4], 0
.text:0000594E                 add     esp, 8
.text:00005951                 cmp     ebp, esp
.text:00005953                 call    __RTC_CheckEsp
.text:00005958                 mov     esp, ebp
.text:0000595A                 pop     ebp
.text:0000595B                 retn
.text:0000595B ?Free@?$CBuffer@E@@QAEXXZ endp
.text:0000595B
.text:0000595B _text           ends
.text:0000595B
.text:0000595C ; ===========================================================================
.text:0000595C
.text:0000595C ; Segment type: Pure code
.text:0000595C ; Segment permissions: Read/Execute
.text:0000595C _text           segment para public 'CODE' use32
.text:0000595C                 assume cs:_text
.text:0000595C                 ;org 595Ch
.text:0000595C ; COMDAT (pick any)
.text:0000595C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000595C
.text:0000595C ; =============== S U B R O U T I N E =======================================
.text:0000595C
.text:0000595C ; Attributes: bp-based frame
.text:0000595C
.text:0000595C ; public: __thiscall CBuffer<unsigned char>::CBuffer<unsigned char>(void)
.text:0000595C                 public ??0?$CBuffer@E@@QAE@XZ
.text:0000595C ??0?$CBuffer@E@@QAE@XZ proc near        ; CODE XREF: NArchive::NZip::CExtraSubBlock::CExtraSubBlock(void)+14p
.text:0000595C                                         ; NArchive::NZip::CItem::CItem(void)+64p
.text:0000595C
.text:0000595C var_4           = dword ptr -4
.text:0000595C
.text:0000595C                 push    ebp
.text:0000595D                 mov     ebp, esp
.text:0000595F                 push    ecx
.text:00005960                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005967                 mov     [ebp+var_4], ecx
.text:0000596A                 mov     eax, [ebp+var_4]
.text:0000596D                 mov     dword ptr [eax], 0
.text:00005973                 mov     ecx, [ebp+var_4]
.text:00005976                 mov     dword ptr [ecx+4], 0
.text:0000597D                 mov     eax, [ebp+var_4]
.text:00005980                 mov     esp, ebp
.text:00005982                 pop     ebp
.text:00005983                 retn
.text:00005983 ??0?$CBuffer@E@@QAE@XZ endp
.text:00005983
.text:00005983 _text           ends
.text:00005983
.text:00005984 ; ===========================================================================
.text:00005984
.text:00005984 ; Segment type: Pure code
.text:00005984 ; Segment permissions: Read/Execute
.text:00005984 _text           segment para public 'CODE' use32
.text:00005984                 assume cs:_text
.text:00005984                 ;org 5984h
.text:00005984 ; COMDAT (pick any)
.text:00005984                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005984
.text:00005984 ; =============== S U B R O U T I N E =======================================
.text:00005984
.text:00005984 ; Attributes: bp-based frame
.text:00005984
.text:00005984 ; public: __thiscall CBuffer<unsigned char>::~CBuffer<unsigned char>(void)
.text:00005984                 public ??1?$CBuffer@E@@QAE@XZ
.text:00005984 ??1?$CBuffer@E@@QAE@XZ proc near        ; CODE XREF: NArchive::NZip::CExtraSubBlock::~CExtraSubBlock(void)+14p
.text:00005984                                         ; NArchive::NZip::CItem::~CItem(void)+3Ap
.text:00005984
.text:00005984 var_8           = dword ptr -8
.text:00005984 var_4           = dword ptr -4
.text:00005984
.text:00005984                 push    ebp
.text:00005985                 mov     ebp, esp
.text:00005987                 sub     esp, 8
.text:0000598A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005991                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005998                 mov     [ebp+var_4], ecx
.text:0000599B                 mov     eax, [ebp+var_4]
.text:0000599E                 mov     ecx, [eax]
.text:000059A0                 mov     [ebp+var_8], ecx
.text:000059A3                 mov     edx, [ebp+var_8]
.text:000059A6                 push    edx             ; void *
.text:000059A7                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000059AC                 add     esp, 4
.text:000059AF                 add     esp, 8
.text:000059B2                 cmp     ebp, esp
.text:000059B4                 call    __RTC_CheckEsp
.text:000059B9                 mov     esp, ebp
.text:000059BB                 pop     ebp
.text:000059BC                 retn
.text:000059BC ??1?$CBuffer@E@@QAE@XZ endp
.text:000059BC
.text:000059BC ; ---------------------------------------------------------------------------
.text:000059BD                 align 10h
.text:000059BD _text           ends
.text:000059BD
.text:000059C0 ; ===========================================================================
.text:000059C0
.text:000059C0 ; Segment type: Pure code
.text:000059C0 ; Segment permissions: Read/Execute
.text:000059C0 _text           segment para public 'CODE' use32
.text:000059C0                 assume cs:_text
.text:000059C0                 ;org 59C0h
.text:000059C0 ; COMDAT (pick any)
.text:000059C0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000059C0
.text:000059C0 ; =============== S U B R O U T I N E =======================================
.text:000059C0
.text:000059C0 ; Attributes: bp-based frame
.text:000059C0
.text:000059C0 ; public: __thiscall CBuffer<unsigned char>::operator unsigned char *(void)
.text:000059C0                 public ??B?$CBuffer@E@@QAEPAEXZ
.text:000059C0 ??B?$CBuffer@E@@QAEPAEXZ proc near      ; CODE XREF: NArchive::NZip::CInArchive::ReadBuffer(CBuffer<uchar> &,uint)+27p
.text:000059C0
.text:000059C0 var_4           = dword ptr -4
.text:000059C0
.text:000059C0                 push    ebp
.text:000059C1                 mov     ebp, esp
.text:000059C3                 push    ecx
.text:000059C4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000059CB                 mov     [ebp+var_4], ecx
.text:000059CE                 mov     eax, [ebp+var_4]
.text:000059D1                 mov     eax, [eax]
.text:000059D3                 mov     esp, ebp
.text:000059D5                 pop     ebp
.text:000059D6                 retn
.text:000059D6 ??B?$CBuffer@E@@QAEPAEXZ endp
.text:000059D6
.text:000059D6 ; ---------------------------------------------------------------------------
.text:000059D7                 align 4
.text:000059D7 _text           ends
.text:000059D7
.text:000059D8 ; ===========================================================================
.text:000059D8
.text:000059D8 ; Segment type: Pure code
.text:000059D8 ; Segment permissions: Read/Execute
.text:000059D8 _text           segment para public 'CODE' use32
.text:000059D8                 assume cs:_text
.text:000059D8                 ;org 59D8h
.text:000059D8 ; COMDAT (pick any)
.text:000059D8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000059D8
.text:000059D8 ; =============== S U B R O U T I N E =======================================
.text:000059D8
.text:000059D8 ; Attributes: bp-based frame
.text:000059D8
.text:000059D8 ; public: void __thiscall CBuffer<unsigned char>::Alloc(unsigned int)
.text:000059D8                 public ?Alloc@?$CBuffer@E@@QAEXI@Z
.text:000059D8 ?Alloc@?$CBuffer@E@@QAEXI@Z proc near   ; CODE XREF: NArchive::NZip::CInArchive::ReadBuffer(CBuffer<uchar> &,uint)+15p
.text:000059D8                                         ; CBuffer<uchar>::CopyFrom(uchar const *,uint)+15p
.text:000059D8
.text:000059D8 var_8           = dword ptr -8
.text:000059D8 var_4           = dword ptr -4
.text:000059D8 arg_0           = dword ptr  8
.text:000059D8
.text:000059D8                 push    ebp
.text:000059D9                 mov     ebp, esp
.text:000059DB                 sub     esp, 8
.text:000059DE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000059E5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000059EC                 mov     [ebp+var_4], ecx
.text:000059EF                 mov     eax, [ebp+var_4]
.text:000059F2                 mov     ecx, [ebp+arg_0]
.text:000059F5                 cmp     ecx, [eax+4]
.text:000059F8                 jz      short loc_5A28
.text:000059FA                 mov     ecx, [ebp+var_4]
.text:000059FD                 call    ?Free@?$CBuffer@E@@QAEXXZ ; CBuffer<uchar>::Free(void)
.text:00005A02                 cmp     [ebp+arg_0], 0
.text:00005A06                 jz      short loc_5A28
.text:00005A08                 mov     edx, [ebp+arg_0]
.text:00005A0B                 push    edx             ; unsigned int
.text:00005A0C                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00005A11                 add     esp, 4
.text:00005A14                 mov     [ebp+var_8], eax
.text:00005A17                 mov     eax, [ebp+var_4]
.text:00005A1A                 mov     ecx, [ebp+var_8]
.text:00005A1D                 mov     [eax], ecx
.text:00005A1F                 mov     edx, [ebp+var_4]
.text:00005A22                 mov     eax, [ebp+arg_0]
.text:00005A25                 mov     [edx+4], eax
.text:00005A28
.text:00005A28 loc_5A28:                               ; CODE XREF: CBuffer<uchar>::Alloc(uint)+20j
.text:00005A28                                         ; CBuffer<uchar>::Alloc(uint)+2Ej
.text:00005A28                 add     esp, 8
.text:00005A2B                 cmp     ebp, esp
.text:00005A2D                 call    __RTC_CheckEsp
.text:00005A32                 mov     esp, ebp
.text:00005A34                 pop     ebp
.text:00005A35                 retn    4
.text:00005A35 ?Alloc@?$CBuffer@E@@QAEXI@Z endp
.text:00005A35
.text:00005A35 _text           ends
.text:00005A35
.text:00005A38 ; ===========================================================================
.text:00005A38
.text:00005A38 ; Segment type: Pure code
.text:00005A38 ; Segment permissions: Read/Execute
.text:00005A38 _text           segment para public 'CODE' use32
.text:00005A38                 assume cs:_text
.text:00005A38                 ;org 5A38h
.text:00005A38 ; COMDAT (pick any)
.text:00005A38                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005A38
.text:00005A38 ; =============== S U B R O U T I N E =======================================
.text:00005A38
.text:00005A38 ; Attributes: bp-based frame
.text:00005A38
.text:00005A38 ; public: class CBuffer<unsigned char> & __thiscall CBuffer<unsigned char>::operator=(class CBuffer<unsigned char> const &)
.text:00005A38                 public ??4?$CBuffer@E@@QAEAAV0@ABV0@@Z
.text:00005A38 ??4?$CBuffer@E@@QAEAAV0@ABV0@@Z proc near
.text:00005A38                                         ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+E66p
.text:00005A38
.text:00005A38 var_4           = dword ptr -4
.text:00005A38 arg_0           = dword ptr  8
.text:00005A38
.text:00005A38                 push    ebp
.text:00005A39                 mov     ebp, esp
.text:00005A3B                 push    ecx
.text:00005A3C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005A43                 mov     [ebp+var_4], ecx
.text:00005A46                 mov     eax, [ebp+arg_0]
.text:00005A49                 cmp     eax, [ebp+var_4]
.text:00005A4C                 jz      short loc_5A66
.text:00005A4E                 mov     ecx, [ebp+arg_0]
.text:00005A51                 mov     edx, [ecx+4]
.text:00005A54                 push    edx             ; Size
.text:00005A55                 mov     ecx, [ebp+arg_0]
.text:00005A58                 call    ??B?$CBuffer@E@@QBEPBEXZ ; CBuffer<uchar>::operator uchar const *(void)
.text:00005A5D                 push    eax             ; Src
.text:00005A5E                 mov     ecx, [ebp+var_4]
.text:00005A61                 call    ?CopyFrom@?$CBuffer@E@@QAEXPBEI@Z ; CBuffer<uchar>::CopyFrom(uchar const *,uint)
.text:00005A66
.text:00005A66 loc_5A66:                               ; CODE XREF: CBuffer<uchar>::operator=(CBuffer<uchar> const &)+14j
.text:00005A66                 mov     eax, [ebp+var_4]
.text:00005A69                 add     esp, 4
.text:00005A6C                 cmp     ebp, esp
.text:00005A6E                 call    __RTC_CheckEsp
.text:00005A73                 mov     esp, ebp
.text:00005A75                 pop     ebp
.text:00005A76                 retn    4
.text:00005A76 ??4?$CBuffer@E@@QAEAAV0@ABV0@@Z endp
.text:00005A76
.text:00005A76 ; ---------------------------------------------------------------------------
.text:00005A79                 align 4
.text:00005A79 _text           ends
.text:00005A79
.text:00005A7C ; ===========================================================================
.text:00005A7C
.text:00005A7C ; Segment type: Pure code
.text:00005A7C ; Segment permissions: Read/Execute
.text:00005A7C _text           segment para public 'CODE' use32
.text:00005A7C                 assume cs:_text
.text:00005A7C                 ;org 5A7Ch
.text:00005A7C ; COMDAT (pick any)
.text:00005A7C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005A7C
.text:00005A7C ; =============== S U B R O U T I N E =======================================
.text:00005A7C
.text:00005A7C ; Attributes: bp-based frame
.text:00005A7C
.text:00005A7C ; public: __thiscall CBuffer<unsigned char>::operator unsigned char const *(void)const
.text:00005A7C                 public ??B?$CBuffer@E@@QBEPBEXZ
.text:00005A7C ??B?$CBuffer@E@@QBEPBEXZ proc near      ; CODE XREF: CBuffer<uchar>::operator=(CBuffer<uchar> const &)+20p
.text:00005A7C
.text:00005A7C var_4           = dword ptr -4
.text:00005A7C
.text:00005A7C                 push    ebp
.text:00005A7D                 mov     ebp, esp
.text:00005A7F                 push    ecx
.text:00005A80                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005A87                 mov     [ebp+var_4], ecx
.text:00005A8A                 mov     eax, [ebp+var_4]
.text:00005A8D                 mov     eax, [eax]
.text:00005A8F                 mov     esp, ebp
.text:00005A91                 pop     ebp
.text:00005A92                 retn
.text:00005A92 ??B?$CBuffer@E@@QBEPBEXZ endp
.text:00005A92
.text:00005A92 ; ---------------------------------------------------------------------------
.text:00005A93                 align 4
.text:00005A93 _text           ends
.text:00005A93
.text:00005A94 ; ===========================================================================
.text:00005A94
.text:00005A94 ; Segment type: Pure code
.text:00005A94 ; Segment permissions: Read/Execute
.text:00005A94 _text           segment para public 'CODE' use32
.text:00005A94                 assume cs:_text
.text:00005A94                 ;org 5A94h
.text:00005A94 ; COMDAT (pick any)
.text:00005A94                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005A94
.text:00005A94 ; =============== S U B R O U T I N E =======================================
.text:00005A94
.text:00005A94 ; Attributes: bp-based frame
.text:00005A94
.text:00005A94 ; public: __thiscall CObjectVector<struct NArchive::NZip::CExtraSubBlock>::CObjectVector<struct NArchive::NZip::CExtraSubBlock>(void)
.text:00005A94                 public ??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ
.text:00005A94 ??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ proc near
.text:00005A94                                         ; CODE XREF: NArchive::NZip::CExtraBlock::CExtraBlock(void)+11p
.text:00005A94
.text:00005A94 var_4           = dword ptr -4
.text:00005A94
.text:00005A94                 push    ebp
.text:00005A95                 mov     ebp, esp
.text:00005A97                 push    ecx
.text:00005A98                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005A9F                 mov     [ebp+var_4], ecx
.text:00005AA2                 mov     ecx, [ebp+var_4]
.text:00005AA5                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:00005AAA                 mov     eax, [ebp+var_4]
.text:00005AAD                 add     esp, 4
.text:00005AB0                 cmp     ebp, esp
.text:00005AB2                 call    __RTC_CheckEsp
.text:00005AB7                 mov     esp, ebp
.text:00005AB9                 pop     ebp
.text:00005ABA                 retn
.text:00005ABA ??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ endp
.text:00005ABA
.text:00005ABA ; ---------------------------------------------------------------------------
.text:00005ABB                 align 4
.text:00005ABB _text           ends
.text:00005ABB
.text:00005ABC ; ===========================================================================
.text:00005ABC
.text:00005ABC ; Segment type: Pure code
.text:00005ABC ; Segment permissions: Read/Execute
.text:00005ABC _text           segment para public 'CODE' use32
.text:00005ABC                 assume cs:_text
.text:00005ABC                 ;org 5ABCh
.text:00005ABC ; COMDAT (pick any)
.text:00005ABC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005ABC
.text:00005ABC ; =============== S U B R O U T I N E =======================================
.text:00005ABC
.text:00005ABC ; Attributes: bp-based frame
.text:00005ABC
.text:00005ABC ; public: class CObjectVector<struct NArchive::NZip::CExtraSubBlock> & __thiscall CObjectVector<struct NArchive::NZip::CExtraSubBlock>::operator=(class CObjectVector<struct NArchive::NZip::CExtraSubBlock> const &)
.text:00005ABC                 public ??4?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAV0@ABV0@@Z
.text:00005ABC ??4?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAV0@ABV0@@Z proc near
.text:00005ABC                                         ; CODE XREF: NArchive::NZip::CExtraBlock::operator=(NArchive::NZip::CExtraBlock const &)+15p
.text:00005ABC
.text:00005ABC var_24          = dword ptr -24h
.text:00005ABC var_20          = dword ptr -20h
.text:00005ABC var_1C          = dword ptr -1Ch
.text:00005ABC var_18          = dword ptr -18h
.text:00005ABC var_14          = dword ptr -14h
.text:00005ABC var_10          = dword ptr -10h
.text:00005ABC var_C           = dword ptr -0Ch
.text:00005ABC var_4           = dword ptr -4
.text:00005ABC arg_0           = dword ptr  8
.text:00005ABC
.text:00005ABC                 push    ebp
.text:00005ABD                 mov     ebp, esp
.text:00005ABF                 push    0FFFFFFFFh
.text:00005AC1                 push    offset __ehhandler$??4?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAV0@ABV0@@Z
.text:00005AC6                 mov     eax, large fs:0
.text:00005ACC                 push    eax
.text:00005ACD                 sub     esp, 18h
.text:00005AD0                 mov     eax, 0CCCCCCCCh
.text:00005AD5                 mov     [ebp+var_24], eax
.text:00005AD8                 mov     [ebp+var_20], eax
.text:00005ADB                 mov     [ebp+var_1C], eax
.text:00005ADE                 mov     [ebp+var_18], eax
.text:00005AE1                 mov     [ebp+var_14], eax
.text:00005AE4                 mov     [ebp+var_10], eax
.text:00005AE7                 mov     eax, dword ptr ds:___security_cookie
.text:00005AEC                 xor     eax, ebp
.text:00005AEE                 push    eax
.text:00005AEF                 lea     eax, [ebp+var_C]
.text:00005AF2                 mov     large fs:0, eax
.text:00005AF8                 mov     [ebp+var_10], ecx
.text:00005AFB                 mov     eax, [ebp+arg_0]
.text:00005AFE                 cmp     eax, [ebp+var_10]
.text:00005B01                 jnz     short loc_5B0B
.text:00005B03                 mov     eax, [ebp+var_10]
.text:00005B06                 jmp     loc_5B9D
.text:00005B0B ; ---------------------------------------------------------------------------
.text:00005B0B
.text:00005B0B loc_5B0B:                               ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::operator=(CObjectVector<NArchive::NZip::CExtraSubBlock> const &)+45j
.text:00005B0B                 mov     ecx, [ebp+var_10]
.text:00005B0E                 call    ?Clear@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEXXZ ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Clear(void)
.text:00005B13                 mov     ecx, [ebp+arg_0]
.text:00005B16                 call    ?Size@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Size(void)
.text:00005B1B                 mov     [ebp+var_14], eax
.text:00005B1E                 mov     ecx, [ebp+var_14]
.text:00005B21                 push    ecx
.text:00005B22                 mov     ecx, [ebp+var_10]
.text:00005B25                 call    ?Reserve@?$CRecordVector@PAX@@QAEXI@Z ; CRecordVector<void *>::Reserve(uint)
.text:00005B2A                 mov     [ebp+var_18], 0
.text:00005B31                 jmp     short loc_5B3C
.text:00005B33 ; ---------------------------------------------------------------------------
.text:00005B33
.text:00005B33 loc_5B33:                               ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::operator=(CObjectVector<NArchive::NZip::CExtraSubBlock> const &)+DCj
.text:00005B33                 mov     edx, [ebp+var_18]
.text:00005B36                 add     edx, 1
.text:00005B39                 mov     [ebp+var_18], edx
.text:00005B3C
.text:00005B3C loc_5B3C:                               ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::operator=(CObjectVector<NArchive::NZip::CExtraSubBlock> const &)+75j
.text:00005B3C                 mov     eax, [ebp+var_18]
.text:00005B3F                 cmp     eax, [ebp+var_14]
.text:00005B42                 jnb     short loc_5B9A
.text:00005B44                 push    0Ch             ; unsigned int
.text:00005B46                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00005B4B                 add     esp, 4
.text:00005B4E                 mov     [ebp+var_20], eax
.text:00005B51                 mov     [ebp+var_4], 0
.text:00005B58                 cmp     [ebp+var_20], 0
.text:00005B5C                 jz      short loc_5B78
.text:00005B5E                 mov     ecx, [ebp+var_18]
.text:00005B61                 push    ecx
.text:00005B62                 mov     ecx, [ebp+arg_0]
.text:00005B65                 call    ??A?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEABUCExtraSubBlock@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CExtraSubBlock>::operator[](uint)
.text:00005B6A                 push    eax             ; struct NArchive::NZip::CExtraSubBlock *
.text:00005B6B                 mov     ecx, [ebp+var_20] ; this
.text:00005B6E                 call    ??0CExtraSubBlock@NZip@NArchive@@QAE@ABU012@@Z ; NArchive::NZip::CExtraSubBlock::CExtraSubBlock(NArchive::NZip::CExtraSubBlock const &)
.text:00005B73                 mov     [ebp+var_24], eax
.text:00005B76                 jmp     short loc_5B7F
.text:00005B78 ; ---------------------------------------------------------------------------
.text:00005B78
.text:00005B78 loc_5B78:                               ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::operator=(CObjectVector<NArchive::NZip::CExtraSubBlock> const &)+A0j
.text:00005B78                 mov     [ebp+var_24], 0
.text:00005B7F
.text:00005B7F loc_5B7F:                               ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::operator=(CObjectVector<NArchive::NZip::CExtraSubBlock> const &)+BAj
.text:00005B7F                 mov     edx, [ebp+var_24]
.text:00005B82                 mov     [ebp+var_1C], edx
.text:00005B85                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00005B8C                 mov     eax, [ebp+var_1C]
.text:00005B8F                 push    eax
.text:00005B90                 mov     ecx, [ebp+var_10]
.text:00005B93                 call    ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ; CRecordVector<void *>::AddInReserved(void * const)
.text:00005B98                 jmp     short loc_5B33
.text:00005B9A ; ---------------------------------------------------------------------------
.text:00005B9A
.text:00005B9A loc_5B9A:                               ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::operator=(CObjectVector<NArchive::NZip::CExtraSubBlock> const &)+86j
.text:00005B9A                 mov     eax, [ebp+var_10]
.text:00005B9D
.text:00005B9D loc_5B9D:                               ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::operator=(CObjectVector<NArchive::NZip::CExtraSubBlock> const &)+4Aj
.text:00005B9D                 mov     ecx, [ebp+var_C]
.text:00005BA0                 mov     large fs:0, ecx
.text:00005BA7                 pop     ecx
.text:00005BA8                 add     esp, 24h
.text:00005BAB                 cmp     ebp, esp
.text:00005BAD                 call    __RTC_CheckEsp
.text:00005BB2                 mov     esp, ebp
.text:00005BB4                 pop     ebp
.text:00005BB5                 retn    4
.text:00005BB5 ??4?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAV0@ABV0@@Z endp
.text:00005BB5
.text:00005BB5 _text           ends
.text:00005BB5
.text$x:00005BB8 ; ===========================================================================
.text$x:00005BB8
.text$x:00005BB8 ; Segment type: Pure code
.text$x:00005BB8 ; Segment permissions: Read/Execute
.text$x:00005BB8 _text$x         segment para public 'CODE' use32
.text$x:00005BB8                 assume cs:_text$x
.text$x:00005BB8                 ;org 5BB8h
.text$x:00005BB8 ; COMDAT (pick associative to section at 5ABC)
.text$x:00005BB8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00005BB8
.text$x:00005BB8 ; =============== S U B R O U T I N E =======================================
.text$x:00005BB8
.text$x:00005BB8
.text$x:00005BB8 __unwindfunclet$??4?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAV0@ABV0@@Z$0 proc near
.text$x:00005BB8                                         ; DATA XREF: .xdata$x:00005BE4o
.text$x:00005BB8                 mov     eax, [ebp-20h]
.text$x:00005BBB                 push    eax             ; void *
.text$x:00005BBC                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00005BC1                 pop     ecx
.text$x:00005BC2                 retn
.text$x:00005BC2 __unwindfunclet$??4?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAV0@ABV0@@Z$0 endp
.text$x:00005BC2
.text$x:00005BC3
.text$x:00005BC3 ; =============== S U B R O U T I N E =======================================
.text$x:00005BC3
.text$x:00005BC3
.text$x:00005BC3 __ehhandler$??4?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAV0@ABV0@@Z proc near
.text$x:00005BC3                                         ; DATA XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::operator=(CObjectVector<NArchive::NZip::CExtraSubBlock> const &)+5o
.text$x:00005BC3
.text$x:00005BC3 arg_4           = dword ptr  8
.text$x:00005BC3
.text$x:00005BC3                 mov     edx, [esp+arg_4]
.text$x:00005BC7                 lea     eax, [edx+0Ch]
.text$x:00005BCA                 mov     ecx, [edx-1Ch]
.text$x:00005BCD                 xor     ecx, eax
.text$x:00005BCF                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005BD4                 mov     eax, offset __ehfuncinfo$??4?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAV0@ABV0@@Z
.text$x:00005BD9                 jmp     ___CxxFrameHandler3
.text$x:00005BD9 __ehhandler$??4?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAV0@ABV0@@Z endp
.text$x:00005BD9
.text$x:00005BD9 ; ---------------------------------------------------------------------------
.text$x:00005BDE                 align 10h
.text$x:00005BDE _text$x         ends
.text$x:00005BDE
.xdata$x:00005BE0 ; ===========================================================================
.xdata$x:00005BE0
.xdata$x:00005BE0 ; Segment type: Pure data
.xdata$x:00005BE0 ; Segment permissions: Read
.xdata$x:00005BE0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00005BE0                 assume cs:_xdata$x
.xdata$x:00005BE0                 ;org 5BE0h
.xdata$x:00005BE0 ; COMDAT (pick associative to section at 5ABC)
.xdata$x:00005BE0 __unwindtable$??4?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAV0@ABV0@@Z db 0FFh
.xdata$x:00005BE0                                         ; DATA XREF: .xdata$x:00005BF0o
.xdata$x:00005BE1                 db 0FFh
.xdata$x:00005BE2                 db 0FFh
.xdata$x:00005BE3                 db 0FFh
.xdata$x:00005BE4                 dd offset __unwindfunclet$??4?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAV0@ABV0@@Z$0
.xdata$x:00005BE8 __ehfuncinfo$??4?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAV0@ABV0@@Z db  22h ; "
.xdata$x:00005BE8                                         ; DATA XREF: __ehhandler$??4?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAV0@ABV0@@Z+11o
.xdata$x:00005BE9                 db    5
.xdata$x:00005BEA                 db  93h ; ô
.xdata$x:00005BEB                 db  19h
.xdata$x:00005BEC                 db    1
.xdata$x:00005BED                 db    0
.xdata$x:00005BEE                 db    0
.xdata$x:00005BEF                 db    0
.xdata$x:00005BF0                 dd offset __unwindtable$??4?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAV0@ABV0@@Z
.xdata$x:00005BF4                 db    0
.xdata$x:00005BF5                 db    0
.xdata$x:00005BF6                 db    0
.xdata$x:00005BF7                 db    0
.xdata$x:00005BF8                 db    0
.xdata$x:00005BF9                 db    0
.xdata$x:00005BFA                 db    0
.xdata$x:00005BFB                 db    0
.xdata$x:00005BFC                 db    0
.xdata$x:00005BFD                 db    0
.xdata$x:00005BFE                 db    0
.xdata$x:00005BFF                 db    0
.xdata$x:00005C00                 db    0
.xdata$x:00005C01                 db    0
.xdata$x:00005C02                 db    0
.xdata$x:00005C03                 db    0
.xdata$x:00005C04                 db    0
.xdata$x:00005C05                 db    0
.xdata$x:00005C06                 db    0
.xdata$x:00005C07                 db    0
.xdata$x:00005C08                 db    1
.xdata$x:00005C09                 db    0
.xdata$x:00005C0A                 db    0
.xdata$x:00005C0B                 db    0
.xdata$x:00005C0B _xdata$x        ends
.xdata$x:00005C0B
.text:00005C0C ; ===========================================================================
.text:00005C0C
.text:00005C0C ; Segment type: Pure code
.text:00005C0C ; Segment permissions: Read/Execute
.text:00005C0C _text           segment para public 'CODE' use32
.text:00005C0C                 assume cs:_text
.text:00005C0C                 ;org 5C0Ch
.text:00005C0C ; COMDAT (pick any)
.text:00005C0C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005C0C
.text:00005C0C ; =============== S U B R O U T I N E =======================================
.text:00005C0C
.text:00005C0C ; Attributes: bp-based frame
.text:00005C0C
.text:00005C0C ; public: unsigned int __thiscall CObjectVector<struct NArchive::NZip::CExtraSubBlock>::Size(void)const
.text:00005C0C                 public ?Size@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEIXZ
.text:00005C0C ?Size@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEIXZ proc near
.text:00005C0C                                         ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::operator=(CObjectVector<NArchive::NZip::CExtraSubBlock> const &)+5Ap
.text:00005C0C                                         ; CObjectVector<NArchive::NZip::CExtraSubBlock>::CObjectVector<NArchive::NZip::CExtraSubBlock>(CObjectVector<NArchive::NZip::CExtraSubBlock> const &)+51p
.text:00005C0C
.text:00005C0C var_4           = dword ptr -4
.text:00005C0C
.text:00005C0C                 push    ebp
.text:00005C0D                 mov     ebp, esp
.text:00005C0F                 push    ecx
.text:00005C10                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005C17                 mov     [ebp+var_4], ecx
.text:00005C1A                 mov     ecx, [ebp+var_4]
.text:00005C1D                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00005C22                 add     esp, 4
.text:00005C25                 cmp     ebp, esp
.text:00005C27                 call    __RTC_CheckEsp
.text:00005C2C                 mov     esp, ebp
.text:00005C2E                 pop     ebp
.text:00005C2F                 retn
.text:00005C2F ?Size@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEIXZ endp
.text:00005C2F
.text:00005C2F _text           ends
.text:00005C2F
.text:00005C30 ; ===========================================================================
.text:00005C30
.text:00005C30 ; Segment type: Pure code
.text:00005C30 ; Segment permissions: Read/Execute
.text:00005C30 _text           segment para public 'CODE' use32
.text:00005C30                 assume cs:_text
.text:00005C30                 ;org 5C30h
.text:00005C30 ; COMDAT (pick any)
.text:00005C30                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005C30
.text:00005C30 ; =============== S U B R O U T I N E =======================================
.text:00005C30
.text:00005C30 ; Attributes: bp-based frame
.text:00005C30
.text:00005C30 ; public: struct NArchive::NZip::CExtraSubBlock const & __thiscall CObjectVector<struct NArchive::NZip::CExtraSubBlock>::operator[](unsigned int)const
.text:00005C30                 public ??A?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEABUCExtraSubBlock@NZip@NArchive@@I@Z
.text:00005C30 ??A?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEABUCExtraSubBlock@NZip@NArchive@@I@Z proc near
.text:00005C30                                         ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::operator=(CObjectVector<NArchive::NZip::CExtraSubBlock> const &)+A9p
.text:00005C30                                         ; CObjectVector<NArchive::NZip::CExtraSubBlock>::CObjectVector<NArchive::NZip::CExtraSubBlock>(CObjectVector<NArchive::NZip::CExtraSubBlock> const &)+9Dp
.text:00005C30
.text:00005C30 var_4           = dword ptr -4
.text:00005C30 arg_0           = dword ptr  8
.text:00005C30
.text:00005C30                 push    ebp
.text:00005C31                 mov     ebp, esp
.text:00005C33                 push    ecx
.text:00005C34                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005C3B                 mov     [ebp+var_4], ecx
.text:00005C3E                 mov     eax, [ebp+arg_0]
.text:00005C41                 push    eax
.text:00005C42                 mov     ecx, [ebp+var_4]
.text:00005C45                 call    ??A?$CRecordVector@PAX@@QBEABQAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00005C4A                 mov     eax, [eax]
.text:00005C4C                 add     esp, 4
.text:00005C4F                 cmp     ebp, esp
.text:00005C51                 call    __RTC_CheckEsp
.text:00005C56                 mov     esp, ebp
.text:00005C58                 pop     ebp
.text:00005C59                 retn    4
.text:00005C59 ??A?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEABUCExtraSubBlock@NZip@NArchive@@I@Z endp
.text:00005C59
.text:00005C59 _text           ends
.text:00005C59
.text:00005C5C ; ===========================================================================
.text:00005C5C
.text:00005C5C ; Segment type: Pure code
.text:00005C5C ; Segment permissions: Read/Execute
.text:00005C5C _text           segment para public 'CODE' use32
.text:00005C5C                 assume cs:_text
.text:00005C5C                 ;org 5C5Ch
.text:00005C5C ; COMDAT (pick any)
.text:00005C5C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005C5C
.text:00005C5C ; =============== S U B R O U T I N E =======================================
.text:00005C5C
.text:00005C5C ; Attributes: bp-based frame
.text:00005C5C
.text:00005C5C ; int __stdcall CObjectVector<NArchive::NZip::CExtraSubBlock>::Add(struct NArchive::NZip::CExtraSubBlock *)
.text:00005C5C                 public ?Add@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEIABUCExtraSubBlock@NZip@NArchive@@@Z
.text:00005C5C ?Add@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEIABUCExtraSubBlock@NZip@NArchive@@@Z proc near
.text:00005C5C                                         ; CODE XREF: NArchive::NZip::CInArchive::ReadExtra(uint,NArchive::NZip::CExtraBlock &,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &,uint &)+240p
.text:00005C5C
.text:00005C5C var_1C          = dword ptr -1Ch
.text:00005C5C var_18          = dword ptr -18h
.text:00005C5C var_14          = dword ptr -14h
.text:00005C5C var_10          = dword ptr -10h
.text:00005C5C var_C           = dword ptr -0Ch
.text:00005C5C var_4           = dword ptr -4
.text:00005C5C arg_0           = dword ptr  8
.text:00005C5C
.text:00005C5C                 push    ebp
.text:00005C5D                 mov     ebp, esp
.text:00005C5F                 push    0FFFFFFFFh
.text:00005C61                 push    offset __ehhandler$?Add@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEIABUCExtraSubBlock@NZip@NArchive@@@Z
.text:00005C66                 mov     eax, large fs:0
.text:00005C6C                 push    eax
.text:00005C6D                 sub     esp, 10h
.text:00005C70                 mov     eax, 0CCCCCCCCh
.text:00005C75                 mov     [ebp+var_1C], eax
.text:00005C78                 mov     [ebp+var_18], eax
.text:00005C7B                 mov     [ebp+var_14], eax
.text:00005C7E                 mov     [ebp+var_10], eax
.text:00005C81                 mov     eax, dword ptr ds:___security_cookie
.text:00005C86                 xor     eax, ebp
.text:00005C88                 push    eax
.text:00005C89                 lea     eax, [ebp+var_C]
.text:00005C8C                 mov     large fs:0, eax
.text:00005C92                 mov     [ebp+var_10], ecx
.text:00005C95                 push    0Ch             ; unsigned int
.text:00005C97                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00005C9C                 add     esp, 4
.text:00005C9F                 mov     [ebp+var_18], eax
.text:00005CA2                 mov     [ebp+var_4], 0
.text:00005CA9                 cmp     [ebp+var_18], 0
.text:00005CAD                 jz      short loc_5CC0
.text:00005CAF                 mov     eax, [ebp+arg_0]
.text:00005CB2                 push    eax             ; struct NArchive::NZip::CExtraSubBlock *
.text:00005CB3                 mov     ecx, [ebp+var_18] ; this
.text:00005CB6                 call    ??0CExtraSubBlock@NZip@NArchive@@QAE@ABU012@@Z ; NArchive::NZip::CExtraSubBlock::CExtraSubBlock(NArchive::NZip::CExtraSubBlock const &)
.text:00005CBB                 mov     [ebp+var_1C], eax
.text:00005CBE                 jmp     short loc_5CC7
.text:00005CC0 ; ---------------------------------------------------------------------------
.text:00005CC0
.text:00005CC0 loc_5CC0:                               ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::Add(NArchive::NZip::CExtraSubBlock const &)+51j
.text:00005CC0                 mov     [ebp+var_1C], 0
.text:00005CC7
.text:00005CC7 loc_5CC7:                               ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::Add(NArchive::NZip::CExtraSubBlock const &)+62j
.text:00005CC7                 mov     ecx, [ebp+var_1C]
.text:00005CCA                 mov     [ebp+var_14], ecx
.text:00005CCD                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00005CD4                 mov     edx, [ebp+var_14]
.text:00005CD7                 push    edx
.text:00005CD8                 mov     ecx, [ebp+var_10]
.text:00005CDB                 call    ?Add@?$CRecordVector@PAX@@QAEIQAX@Z ; CRecordVector<void *>::Add(void * const)
.text:00005CE0                 mov     ecx, [ebp+var_C]
.text:00005CE3                 mov     large fs:0, ecx
.text:00005CEA                 pop     ecx
.text:00005CEB                 add     esp, 1Ch
.text:00005CEE                 cmp     ebp, esp
.text:00005CF0                 call    __RTC_CheckEsp
.text:00005CF5                 mov     esp, ebp
.text:00005CF7                 pop     ebp
.text:00005CF8                 retn    4
.text:00005CF8 ?Add@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEIABUCExtraSubBlock@NZip@NArchive@@@Z endp
.text:00005CF8
.text:00005CF8 ; ---------------------------------------------------------------------------
.text:00005CFB                 align 4
.text:00005CFB _text           ends
.text:00005CFB
.text$x:00005CFC ; ===========================================================================
.text$x:00005CFC
.text$x:00005CFC ; Segment type: Pure code
.text$x:00005CFC ; Segment permissions: Read/Execute
.text$x:00005CFC _text$x         segment para public 'CODE' use32
.text$x:00005CFC                 assume cs:_text$x
.text$x:00005CFC                 ;org 5CFCh
.text$x:00005CFC ; COMDAT (pick associative to section at 5C5C)
.text$x:00005CFC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00005CFC
.text$x:00005CFC ; =============== S U B R O U T I N E =======================================
.text$x:00005CFC
.text$x:00005CFC
.text$x:00005CFC __unwindfunclet$?Add@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEIABUCExtraSubBlock@NZip@NArchive@@@Z$0 proc near
.text$x:00005CFC                                         ; DATA XREF: .xdata$x:00005D28o
.text$x:00005CFC                 mov     eax, [ebp-18h]
.text$x:00005CFF                 push    eax             ; void *
.text$x:00005D00                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00005D05                 pop     ecx
.text$x:00005D06                 retn
.text$x:00005D06 __unwindfunclet$?Add@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEIABUCExtraSubBlock@NZip@NArchive@@@Z$0 endp
.text$x:00005D06
.text$x:00005D07
.text$x:00005D07 ; =============== S U B R O U T I N E =======================================
.text$x:00005D07
.text$x:00005D07
.text$x:00005D07 __ehhandler$?Add@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEIABUCExtraSubBlock@NZip@NArchive@@@Z proc near
.text$x:00005D07                                         ; DATA XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::Add(NArchive::NZip::CExtraSubBlock const &)+5o
.text$x:00005D07
.text$x:00005D07 arg_4           = dword ptr  8
.text$x:00005D07
.text$x:00005D07                 mov     edx, [esp+arg_4]
.text$x:00005D0B                 lea     eax, [edx+0Ch]
.text$x:00005D0E                 mov     ecx, [edx-14h]
.text$x:00005D11                 xor     ecx, eax
.text$x:00005D13                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005D18                 mov     eax, offset __ehfuncinfo$?Add@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEIABUCExtraSubBlock@NZip@NArchive@@@Z
.text$x:00005D1D                 jmp     ___CxxFrameHandler3
.text$x:00005D1D __ehhandler$?Add@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEIABUCExtraSubBlock@NZip@NArchive@@@Z endp
.text$x:00005D1D
.text$x:00005D1D ; ---------------------------------------------------------------------------
.text$x:00005D22                 align 4
.text$x:00005D22 _text$x         ends
.text$x:00005D22
.xdata$x:00005D24 ; ===========================================================================
.xdata$x:00005D24
.xdata$x:00005D24 ; Segment type: Pure data
.xdata$x:00005D24 ; Segment permissions: Read
.xdata$x:00005D24 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00005D24                 assume cs:_xdata$x
.xdata$x:00005D24                 ;org 5D24h
.xdata$x:00005D24 ; COMDAT (pick associative to section at 5C5C)
.xdata$x:00005D24 __unwindtable$?Add@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEIABUCExtraSubBlock@NZip@NArchive@@@Z db 0FFh
.xdata$x:00005D24                                         ; DATA XREF: .xdata$x:00005D34o
.xdata$x:00005D25                 db 0FFh
.xdata$x:00005D26                 db 0FFh
.xdata$x:00005D27                 db 0FFh
.xdata$x:00005D28                 dd offset __unwindfunclet$?Add@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEIABUCExtraSubBlock@NZip@NArchive@@@Z$0
.xdata$x:00005D2C __ehfuncinfo$?Add@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEIABUCExtraSubBlock@NZip@NArchive@@@Z db  22h ; "
.xdata$x:00005D2C                                         ; DATA XREF: __ehhandler$?Add@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEIABUCExtraSubBlock@NZip@NArchive@@@Z+11o
.xdata$x:00005D2D                 db    5
.xdata$x:00005D2E                 db  93h ; ô
.xdata$x:00005D2F                 db  19h
.xdata$x:00005D30                 db    1
.xdata$x:00005D31                 db    0
.xdata$x:00005D32                 db    0
.xdata$x:00005D33                 db    0
.xdata$x:00005D34                 dd offset __unwindtable$?Add@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEIABUCExtraSubBlock@NZip@NArchive@@@Z
.xdata$x:00005D38                 db    0
.xdata$x:00005D39                 db    0
.xdata$x:00005D3A                 db    0
.xdata$x:00005D3B                 db    0
.xdata$x:00005D3C                 db    0
.xdata$x:00005D3D                 db    0
.xdata$x:00005D3E                 db    0
.xdata$x:00005D3F                 db    0
.xdata$x:00005D40                 db    0
.xdata$x:00005D41                 db    0
.xdata$x:00005D42                 db    0
.xdata$x:00005D43                 db    0
.xdata$x:00005D44                 db    0
.xdata$x:00005D45                 db    0
.xdata$x:00005D46                 db    0
.xdata$x:00005D47                 db    0
.xdata$x:00005D48                 db    0
.xdata$x:00005D49                 db    0
.xdata$x:00005D4A                 db    0
.xdata$x:00005D4B                 db    0
.xdata$x:00005D4C                 db    1
.xdata$x:00005D4D                 db    0
.xdata$x:00005D4E                 db    0
.xdata$x:00005D4F                 db    0
.xdata$x:00005D4F _xdata$x        ends
.xdata$x:00005D4F
.text:00005D50 ; ===========================================================================
.text:00005D50
.text:00005D50 ; Segment type: Pure code
.text:00005D50 ; Segment permissions: Read/Execute
.text:00005D50 _text           segment para public 'CODE' use32
.text:00005D50                 assume cs:_text
.text:00005D50                 ;org 5D50h
.text:00005D50 ; COMDAT (pick any)
.text:00005D50                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005D50
.text:00005D50 ; =============== S U B R O U T I N E =======================================
.text:00005D50
.text:00005D50 ; Attributes: bp-based frame
.text:00005D50
.text:00005D50 ; public: __thiscall CObjectVector<struct NArchive::NZip::CExtraSubBlock>::~CObjectVector<struct NArchive::NZip::CExtraSubBlock>(void)
.text:00005D50                 public ??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ
.text:00005D50 ??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ proc near
.text:00005D50                                         ; CODE XREF: NArchive::NZip::CExtraBlock::~CExtraBlock(void)+11p
.text:00005D50
.text:00005D50 var_20          = dword ptr -20h
.text:00005D50 var_1C          = dword ptr -1Ch
.text:00005D50 var_18          = dword ptr -18h
.text:00005D50 var_14          = dword ptr -14h
.text:00005D50 var_10          = dword ptr -10h
.text:00005D50 var_C           = dword ptr -0Ch
.text:00005D50 var_4           = dword ptr -4
.text:00005D50
.text:00005D50                 push    ebp
.text:00005D51                 mov     ebp, esp
.text:00005D53                 push    0FFFFFFFFh
.text:00005D55                 push    offset __ehhandler$??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ
.text:00005D5A                 mov     eax, large fs:0
.text:00005D60                 push    eax
.text:00005D61                 sub     esp, 14h
.text:00005D64                 mov     eax, 0CCCCCCCCh
.text:00005D69                 mov     [ebp+var_20], eax
.text:00005D6C                 mov     [ebp+var_1C], eax
.text:00005D6F                 mov     [ebp+var_18], eax
.text:00005D72                 mov     [ebp+var_14], eax
.text:00005D75                 mov     [ebp+var_10], eax
.text:00005D78                 mov     eax, dword ptr ds:___security_cookie
.text:00005D7D                 xor     eax, ebp
.text:00005D7F                 push    eax
.text:00005D80                 lea     eax, [ebp+var_C]
.text:00005D83                 mov     large fs:0, eax
.text:00005D89                 mov     [ebp+var_10], ecx
.text:00005D8C                 mov     [ebp+var_4], 0
.text:00005D93                 mov     ecx, [ebp+var_10]
.text:00005D96                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00005D9B                 mov     [ebp+var_14], eax
.text:00005D9E
.text:00005D9E loc_5D9E:                               ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::~CObjectVector<NArchive::NZip::CExtraSubBlock>(void):loc_5DE0j
.text:00005D9E                 cmp     [ebp+var_14], 0
.text:00005DA2                 jz      short loc_5DE2
.text:00005DA4                 mov     eax, [ebp+var_14]
.text:00005DA7                 sub     eax, 1
.text:00005DAA                 mov     [ebp+var_14], eax
.text:00005DAD                 mov     ecx, [ebp+var_14]
.text:00005DB0                 push    ecx
.text:00005DB1                 mov     ecx, [ebp+var_10]
.text:00005DB4                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00005DB9                 mov     edx, [eax]
.text:00005DBB                 mov     [ebp+var_1C], edx
.text:00005DBE                 mov     eax, [ebp+var_1C]
.text:00005DC1                 mov     [ebp+var_18], eax
.text:00005DC4                 cmp     [ebp+var_18], 0
.text:00005DC8                 jz      short loc_5DD9
.text:00005DCA                 push    1
.text:00005DCC                 mov     ecx, [ebp+var_18]
.text:00005DCF                 call    ??_GCExtraSubBlock@NZip@NArchive@@QAEPAXI@Z ; NArchive::NZip::CExtraSubBlock::`scalar deleting destructor'(uint)
.text:00005DD4                 mov     [ebp+var_20], eax
.text:00005DD7                 jmp     short loc_5DE0
.text:00005DD9 ; ---------------------------------------------------------------------------
.text:00005DD9
.text:00005DD9 loc_5DD9:                               ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::~CObjectVector<NArchive::NZip::CExtraSubBlock>(void)+78j
.text:00005DD9                 mov     [ebp+var_20], 0
.text:00005DE0
.text:00005DE0 loc_5DE0:                               ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::~CObjectVector<NArchive::NZip::CExtraSubBlock>(void)+87j
.text:00005DE0                 jmp     short loc_5D9E
.text:00005DE2 ; ---------------------------------------------------------------------------
.text:00005DE2
.text:00005DE2 loc_5DE2:                               ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::~CObjectVector<NArchive::NZip::CExtraSubBlock>(void)+52j
.text:00005DE2                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00005DE9                 mov     ecx, [ebp+var_10]
.text:00005DEC                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00005DF1                 mov     ecx, [ebp+var_C]
.text:00005DF4                 mov     large fs:0, ecx
.text:00005DFB                 pop     ecx
.text:00005DFC                 add     esp, 20h
.text:00005DFF                 cmp     ebp, esp
.text:00005E01                 call    __RTC_CheckEsp
.text:00005E06                 mov     esp, ebp
.text:00005E08                 pop     ebp
.text:00005E09                 retn
.text:00005E09 ??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ endp
.text:00005E09
.text:00005E09 ; ---------------------------------------------------------------------------
.text:00005E0A                 align 4
.text:00005E0A _text           ends
.text:00005E0A
.text$x:00005E0C ; ===========================================================================
.text$x:00005E0C
.text$x:00005E0C ; Segment type: Pure code
.text$x:00005E0C ; Segment permissions: Read/Execute
.text$x:00005E0C _text$x         segment para public 'CODE' use32
.text$x:00005E0C                 assume cs:_text$x
.text$x:00005E0C                 ;org 5E0Ch
.text$x:00005E0C ; COMDAT (pick associative to section at 5D50)
.text$x:00005E0C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00005E0C
.text$x:00005E0C ; =============== S U B R O U T I N E =======================================
.text$x:00005E0C
.text$x:00005E0C
.text$x:00005E0C __unwindfunclet$??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ$0 proc near
.text$x:00005E0C                                         ; DATA XREF: .xdata$x:00005E34o
.text$x:00005E0C                 mov     ecx, [ebp-10h]
.text$x:00005E0F                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:00005E0F __unwindfunclet$??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ$0 endp
.text$x:00005E0F
.text$x:00005E14
.text$x:00005E14 ; =============== S U B R O U T I N E =======================================
.text$x:00005E14
.text$x:00005E14
.text$x:00005E14 __ehhandler$??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ proc near
.text$x:00005E14                                         ; DATA XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::~CObjectVector<NArchive::NZip::CExtraSubBlock>(void)+5o
.text$x:00005E14
.text$x:00005E14 arg_4           = dword ptr  8
.text$x:00005E14
.text$x:00005E14                 mov     edx, [esp+arg_4]
.text$x:00005E18                 lea     eax, [edx+0Ch]
.text$x:00005E1B                 mov     ecx, [edx-18h]
.text$x:00005E1E                 xor     ecx, eax
.text$x:00005E20                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005E25                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ
.text$x:00005E2A                 jmp     ___CxxFrameHandler3
.text$x:00005E2A __ehhandler$??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ endp
.text$x:00005E2A
.text$x:00005E2A ; ---------------------------------------------------------------------------
.text$x:00005E2F                 align 10h
.text$x:00005E2F _text$x         ends
.text$x:00005E2F
.xdata$x:00005E30 ; ===========================================================================
.xdata$x:00005E30
.xdata$x:00005E30 ; Segment type: Pure data
.xdata$x:00005E30 ; Segment permissions: Read
.xdata$x:00005E30 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00005E30                 assume cs:_xdata$x
.xdata$x:00005E30                 ;org 5E30h
.xdata$x:00005E30 ; COMDAT (pick associative to section at 5D50)
.xdata$x:00005E30 __unwindtable$??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ db 0FFh
.xdata$x:00005E30                                         ; DATA XREF: .xdata$x:00005E40o
.xdata$x:00005E31                 db 0FFh
.xdata$x:00005E32                 db 0FFh
.xdata$x:00005E33                 db 0FFh
.xdata$x:00005E34                 dd offset __unwindfunclet$??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ$0
.xdata$x:00005E38 __ehfuncinfo$??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ db  22h ; "
.xdata$x:00005E38                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ+11o
.xdata$x:00005E39                 db    5
.xdata$x:00005E3A                 db  93h ; ô
.xdata$x:00005E3B                 db  19h
.xdata$x:00005E3C                 db    1
.xdata$x:00005E3D                 db    0
.xdata$x:00005E3E                 db    0
.xdata$x:00005E3F                 db    0
.xdata$x:00005E40                 dd offset __unwindtable$??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ
.xdata$x:00005E44                 db    0
.xdata$x:00005E45                 db    0
.xdata$x:00005E46                 db    0
.xdata$x:00005E47                 db    0
.xdata$x:00005E48                 db    0
.xdata$x:00005E49                 db    0
.xdata$x:00005E4A                 db    0
.xdata$x:00005E4B                 db    0
.xdata$x:00005E4C                 db    0
.xdata$x:00005E4D                 db    0
.xdata$x:00005E4E                 db    0
.xdata$x:00005E4F                 db    0
.xdata$x:00005E50                 db    0
.xdata$x:00005E51                 db    0
.xdata$x:00005E52                 db    0
.xdata$x:00005E53                 db    0
.xdata$x:00005E54                 db    0
.xdata$x:00005E55                 db    0
.xdata$x:00005E56                 db    0
.xdata$x:00005E57                 db    0
.xdata$x:00005E58                 db    1
.xdata$x:00005E59                 db    0
.xdata$x:00005E5A                 db    0
.xdata$x:00005E5B                 db    0
.xdata$x:00005E5B _xdata$x        ends
.xdata$x:00005E5B
.text:00005E5C ; ===========================================================================
.text:00005E5C
.text:00005E5C ; Segment type: Pure code
.text:00005E5C ; Segment permissions: Read/Execute
.text:00005E5C _text           segment para public 'CODE' use32
.text:00005E5C                 assume cs:_text
.text:00005E5C                 ;org 5E5Ch
.text:00005E5C ; COMDAT (pick any)
.text:00005E5C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005E5C
.text:00005E5C ; =============== S U B R O U T I N E =======================================
.text:00005E5C
.text:00005E5C ; Attributes: bp-based frame
.text:00005E5C
.text:00005E5C ; public: void __thiscall CObjectVector<struct NArchive::NZip::CExtraSubBlock>::Clear(void)
.text:00005E5C                 public ?Clear@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEXXZ
.text:00005E5C ?Clear@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEXXZ proc near
.text:00005E5C                                         ; CODE XREF: NArchive::NZip::CExtraBlock::Clear(void)+11p
.text:00005E5C                                         ; CObjectVector<NArchive::NZip::CExtraSubBlock>::operator=(CObjectVector<NArchive::NZip::CExtraSubBlock> const &)+52p
.text:00005E5C
.text:00005E5C var_14          = dword ptr -14h
.text:00005E5C var_10          = dword ptr -10h
.text:00005E5C var_C           = dword ptr -0Ch
.text:00005E5C var_8           = dword ptr -8
.text:00005E5C var_4           = dword ptr -4
.text:00005E5C
.text:00005E5C                 push    ebp
.text:00005E5D                 mov     ebp, esp
.text:00005E5F                 sub     esp, 14h
.text:00005E62                 mov     eax, 0CCCCCCCCh
.text:00005E67                 mov     [ebp+var_14], eax
.text:00005E6A                 mov     [ebp+var_10], eax
.text:00005E6D                 mov     [ebp+var_C], eax
.text:00005E70                 mov     [ebp+var_8], eax
.text:00005E73                 mov     [ebp+var_4], eax
.text:00005E76                 mov     [ebp+var_4], ecx
.text:00005E79                 mov     ecx, [ebp+var_4]
.text:00005E7C                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00005E81                 mov     [ebp+var_8], eax
.text:00005E84
.text:00005E84 loc_5E84:                               ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::Clear(void):loc_5EC6j
.text:00005E84                 cmp     [ebp+var_8], 0
.text:00005E88                 jz      short loc_5EC8
.text:00005E8A                 mov     eax, [ebp+var_8]
.text:00005E8D                 sub     eax, 1
.text:00005E90                 mov     [ebp+var_8], eax
.text:00005E93                 mov     ecx, [ebp+var_8]
.text:00005E96                 push    ecx
.text:00005E97                 mov     ecx, [ebp+var_4]
.text:00005E9A                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00005E9F                 mov     edx, [eax]
.text:00005EA1                 mov     [ebp+var_10], edx
.text:00005EA4                 mov     eax, [ebp+var_10]
.text:00005EA7                 mov     [ebp+var_C], eax
.text:00005EAA                 cmp     [ebp+var_C], 0
.text:00005EAE                 jz      short loc_5EBF
.text:00005EB0                 push    1
.text:00005EB2                 mov     ecx, [ebp+var_C]
.text:00005EB5                 call    ??_GCExtraSubBlock@NZip@NArchive@@QAEPAXI@Z ; NArchive::NZip::CExtraSubBlock::`scalar deleting destructor'(uint)
.text:00005EBA                 mov     [ebp+var_14], eax
.text:00005EBD                 jmp     short loc_5EC6
.text:00005EBF ; ---------------------------------------------------------------------------
.text:00005EBF
.text:00005EBF loc_5EBF:                               ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::Clear(void)+52j
.text:00005EBF                 mov     [ebp+var_14], 0
.text:00005EC6
.text:00005EC6 loc_5EC6:                               ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::Clear(void)+61j
.text:00005EC6                 jmp     short loc_5E84
.text:00005EC8 ; ---------------------------------------------------------------------------
.text:00005EC8
.text:00005EC8 loc_5EC8:                               ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::Clear(void)+2Cj
.text:00005EC8                 mov     ecx, [ebp+var_4]
.text:00005ECB                 call    ?Clear@?$CRecordVector@PAX@@QAEXXZ ; CRecordVector<void *>::Clear(void)
.text:00005ED0                 add     esp, 14h
.text:00005ED3                 cmp     ebp, esp
.text:00005ED5                 call    __RTC_CheckEsp
.text:00005EDA                 mov     esp, ebp
.text:00005EDC                 pop     ebp
.text:00005EDD                 retn
.text:00005EDD ?Clear@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEXXZ endp
.text:00005EDD
.text:00005EDD ; ---------------------------------------------------------------------------
.text:00005EDE                 align 10h
.text:00005EDE _text           ends
.text:00005EDE
.text:00005EE0 ; ===========================================================================
.text:00005EE0
.text:00005EE0 ; Segment type: Pure code
.text:00005EE0 ; Segment permissions: Read/Execute
.text:00005EE0 _text           segment para public 'CODE' use32
.text:00005EE0                 assume cs:_text
.text:00005EE0                 ;org 5EE0h
.text:00005EE0 ; COMDAT (pick any)
.text:00005EE0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005EE0
.text:00005EE0 ; =============== S U B R O U T I N E =======================================
.text:00005EE0
.text:00005EE0 ; Attributes: bp-based frame
.text:00005EE0
.text:00005EE0 ; public: __thiscall CObjArray<unsigned char>::CObjArray<unsigned char>(unsigned int)
.text:00005EE0                 public ??0?$CObjArray@E@@QAE@I@Z
.text:00005EE0 ??0?$CObjArray@E@@QAE@I@Z proc near     ; CODE XREF: NArchive::NZip::CInArchive::FindAndReadMarker(IInStream *,unsigned __int64 const *)+1E0p
.text:00005EE0                                         ; NArchive::NZip::CInArchive::FindCd(NArchive::NZip::CCdInfo &)+DAp
.text:00005EE0
.text:00005EE0 var_8           = dword ptr -8
.text:00005EE0 var_4           = dword ptr -4
.text:00005EE0 arg_0           = dword ptr  8
.text:00005EE0
.text:00005EE0                 push    ebp
.text:00005EE1                 mov     ebp, esp
.text:00005EE3                 sub     esp, 8
.text:00005EE6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005EED                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005EF4                 mov     [ebp+var_4], ecx
.text:00005EF7                 mov     eax, [ebp+var_4]
.text:00005EFA                 mov     dword ptr [eax], 0
.text:00005F00                 cmp     [ebp+arg_0], 0
.text:00005F04                 jz      short loc_5F1D
.text:00005F06                 mov     ecx, [ebp+arg_0]
.text:00005F09                 push    ecx             ; unsigned int
.text:00005F0A                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00005F0F                 add     esp, 4
.text:00005F12                 mov     [ebp+var_8], eax
.text:00005F15                 mov     edx, [ebp+var_4]
.text:00005F18                 mov     eax, [ebp+var_8]
.text:00005F1B                 mov     [edx], eax
.text:00005F1D
.text:00005F1D loc_5F1D:                               ; CODE XREF: CObjArray<uchar>::CObjArray<uchar>(uint)+24j
.text:00005F1D                 mov     eax, [ebp+var_4]
.text:00005F20                 add     esp, 8
.text:00005F23                 cmp     ebp, esp
.text:00005F25                 call    __RTC_CheckEsp
.text:00005F2A                 mov     esp, ebp
.text:00005F2C                 pop     ebp
.text:00005F2D                 retn    4
.text:00005F2D ??0?$CObjArray@E@@QAE@I@Z endp
.text:00005F2D
.text:00005F2D _text           ends
.text:00005F2D
.text:00005F30 ; ===========================================================================
.text:00005F30
.text:00005F30 ; Segment type: Pure code
.text:00005F30 ; Segment permissions: Read/Execute
.text:00005F30 _text           segment para public 'CODE' use32
.text:00005F30                 assume cs:_text
.text:00005F30                 ;org 5F30h
.text:00005F30 ; COMDAT (pick any)
.text:00005F30                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005F30
.text:00005F30 ; =============== S U B R O U T I N E =======================================
.text:00005F30
.text:00005F30 ; Attributes: bp-based frame
.text:00005F30
.text:00005F30 ; public: __thiscall CObjArray<unsigned char>::~CObjArray<unsigned char>(void)
.text:00005F30                 public ??1?$CObjArray@E@@QAE@XZ
.text:00005F30 ??1?$CObjArray@E@@QAE@XZ proc near      ; CODE XREF: NArchive::NZip::CInArchive::FindAndReadMarker(IInStream *,unsigned __int64 const *)+241p
.text:00005F30                                         ; NArchive::NZip::CInArchive::FindAndReadMarker(IInStream *,unsigned __int64 const *)+3B4p ...
.text:00005F30
.text:00005F30 var_8           = dword ptr -8
.text:00005F30 var_4           = dword ptr -4
.text:00005F30
.text:00005F30                 push    ebp
.text:00005F31                 mov     ebp, esp
.text:00005F33                 sub     esp, 8
.text:00005F36                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005F3D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005F44                 mov     [ebp+var_4], ecx
.text:00005F47                 mov     eax, [ebp+var_4]
.text:00005F4A                 mov     ecx, [eax]
.text:00005F4C                 mov     [ebp+var_8], ecx
.text:00005F4F                 mov     edx, [ebp+var_8]
.text:00005F52                 push    edx             ; void *
.text:00005F53                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00005F58                 add     esp, 4
.text:00005F5B                 add     esp, 8
.text:00005F5E                 cmp     ebp, esp
.text:00005F60                 call    __RTC_CheckEsp
.text:00005F65                 mov     esp, ebp
.text:00005F67                 pop     ebp
.text:00005F68                 retn
.text:00005F68 ??1?$CObjArray@E@@QAE@XZ endp
.text:00005F68
.text:00005F68 ; ---------------------------------------------------------------------------
.text:00005F69                 align 4
.text:00005F69 _text           ends
.text:00005F69
.text:00005F6C ; ===========================================================================
.text:00005F6C
.text:00005F6C ; Segment type: Pure code
.text:00005F6C ; Segment permissions: Read/Execute
.text:00005F6C _text           segment para public 'CODE' use32
.text:00005F6C                 assume cs:_text
.text:00005F6C                 ;org 5F6Ch
.text:00005F6C ; COMDAT (pick any)
.text:00005F6C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005F6C
.text:00005F6C ; =============== S U B R O U T I N E =======================================
.text:00005F6C
.text:00005F6C ; Attributes: bp-based frame
.text:00005F6C
.text:00005F6C ; public: __thiscall CObjArray<unsigned char>::operator unsigned char *(void)
.text:00005F6C                 public ??B?$CObjArray@E@@QAEPAEXZ
.text:00005F6C ??B?$CObjArray@E@@QAEPAEXZ proc near    ; CODE XREF: NArchive::NZip::CInArchive::FindAndReadMarker(IInStream *,unsigned __int64 const *)+213p
.text:00005F6C                                         ; NArchive::NZip::CInArchive::FindAndReadMarker(IInStream *,unsigned __int64 const *)+319p ...
.text:00005F6C
.text:00005F6C var_4           = dword ptr -4
.text:00005F6C
.text:00005F6C                 push    ebp
.text:00005F6D                 mov     ebp, esp
.text:00005F6F                 push    ecx
.text:00005F70                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005F77                 mov     [ebp+var_4], ecx
.text:00005F7A                 mov     eax, [ebp+var_4]
.text:00005F7D                 mov     eax, [eax]
.text:00005F7F                 mov     esp, ebp
.text:00005F81                 pop     ebp
.text:00005F82                 retn
.text:00005F82 ??B?$CObjArray@E@@QAEPAEXZ endp
.text:00005F82
.text:00005F82 ; ---------------------------------------------------------------------------
.text:00005F83                 align 4
.text:00005F83 _text           ends
.text:00005F83
.text:00005F84 ; ===========================================================================
.text:00005F84
.text:00005F84 ; Segment type: Pure code
.text:00005F84 ; Segment permissions: Read/Execute
.text:00005F84 _text           segment para public 'CODE' use32
.text:00005F84                 assume cs:_text
.text:00005F84                 ;org 5F84h
.text:00005F84 ; COMDAT (pick any)
.text:00005F84                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005F84
.text:00005F84 ; =============== S U B R O U T I N E =======================================
.text:00005F84
.text:00005F84 ; Attributes: bp-based frame
.text:00005F84
.text:00005F84 ; public: unsigned int __thiscall CObjectVector<class NArchive::NZip::CItemEx>::Size(void)const
.text:00005F84                 public ?Size@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEIXZ
.text:00005F84 ?Size@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEIXZ proc near
.text:00005F84                                         ; CODE XREF: NArchive::NZip::CInArchive::TryReadCd(CObjectVector<NArchive::NZip::CItemEx> &,unsigned __int64,unsigned __int64,NArchive::NZip::CProgressVirt *)+193p
.text:00005F84                                         ; NArchive::NZip::CInArchive::TryReadCd(CObjectVector<NArchive::NZip::CItemEx> &,unsigned __int64,unsigned __int64,NArchive::NZip::CProgressVirt *)+1A8p ...
.text:00005F84
.text:00005F84 var_4           = dword ptr -4
.text:00005F84
.text:00005F84                 push    ebp
.text:00005F85                 mov     ebp, esp
.text:00005F87                 push    ecx
.text:00005F88                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005F8F                 mov     [ebp+var_4], ecx
.text:00005F92                 mov     ecx, [ebp+var_4]
.text:00005F95                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00005F9A                 add     esp, 4
.text:00005F9D                 cmp     ebp, esp
.text:00005F9F                 call    __RTC_CheckEsp
.text:00005FA4                 mov     esp, ebp
.text:00005FA6                 pop     ebp
.text:00005FA7                 retn
.text:00005FA7 ?Size@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEIXZ endp
.text:00005FA7
.text:00005FA7 _text           ends
.text:00005FA7
.text:00005FA8 ; ===========================================================================
.text:00005FA8
.text:00005FA8 ; Segment type: Pure code
.text:00005FA8 ; Segment permissions: Read/Execute
.text:00005FA8 _text           segment para public 'CODE' use32
.text:00005FA8                 assume cs:_text
.text:00005FA8                 ;org 5FA8h
.text:00005FA8 ; COMDAT (pick any)
.text:00005FA8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005FA8
.text:00005FA8 ; =============== S U B R O U T I N E =======================================
.text:00005FA8
.text:00005FA8 ; Attributes: bp-based frame
.text:00005FA8
.text:00005FA8 ; public: bool __thiscall CObjectVector<class NArchive::NZip::CItemEx>::IsEmpty(void)const
.text:00005FA8                 public ?IsEmpty@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBE_NXZ
.text:00005FA8 ?IsEmpty@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBE_NXZ proc near
.text:00005FA8                                         ; CODE XREF: __catch$?ReadLocals@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$0+3p
.text:00005FA8                                         ; NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+70Bp ...
.text:00005FA8
.text:00005FA8 var_4           = dword ptr -4
.text:00005FA8
.text:00005FA8                 push    ebp
.text:00005FA9                 mov     ebp, esp
.text:00005FAB                 push    ecx
.text:00005FAC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005FB3                 mov     [ebp+var_4], ecx
.text:00005FB6                 mov     ecx, [ebp+var_4]
.text:00005FB9                 call    ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ ; CRecordVector<void *>::IsEmpty(void)
.text:00005FBE                 add     esp, 4
.text:00005FC1                 cmp     ebp, esp
.text:00005FC3                 call    __RTC_CheckEsp
.text:00005FC8                 mov     esp, ebp
.text:00005FCA                 pop     ebp
.text:00005FCB                 retn
.text:00005FCB ?IsEmpty@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBE_NXZ endp
.text:00005FCB
.text:00005FCB _text           ends
.text:00005FCB
.text:00005FCC ; ===========================================================================
.text:00005FCC
.text:00005FCC ; Segment type: Pure code
.text:00005FCC ; Segment permissions: Read/Execute
.text:00005FCC _text           segment para public 'CODE' use32
.text:00005FCC                 assume cs:_text
.text:00005FCC                 ;org 5FCCh
.text:00005FCC ; COMDAT (pick any)
.text:00005FCC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005FCC
.text:00005FCC ; =============== S U B R O U T I N E =======================================
.text:00005FCC
.text:00005FCC ; Attributes: bp-based frame
.text:00005FCC
.text:00005FCC ; public: __thiscall CObjectVector<class NArchive::NZip::CItemEx>::CObjectVector<class NArchive::NZip::CItemEx>(void)
.text:00005FCC                 public ??0?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ
.text:00005FCC ??0?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ proc near
.text:00005FCC                                         ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+3E2p
.text:00005FCC
.text:00005FCC var_4           = dword ptr -4
.text:00005FCC
.text:00005FCC                 push    ebp
.text:00005FCD                 mov     ebp, esp
.text:00005FCF                 push    ecx
.text:00005FD0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005FD7                 mov     [ebp+var_4], ecx
.text:00005FDA                 mov     ecx, [ebp+var_4]
.text:00005FDD                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:00005FE2                 mov     eax, [ebp+var_4]
.text:00005FE5                 add     esp, 4
.text:00005FE8                 cmp     ebp, esp
.text:00005FEA                 call    __RTC_CheckEsp
.text:00005FEF                 mov     esp, ebp
.text:00005FF1                 pop     ebp
.text:00005FF2                 retn
.text:00005FF2 ??0?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ endp
.text:00005FF2
.text:00005FF2 ; ---------------------------------------------------------------------------
.text:00005FF3                 align 4
.text:00005FF3 _text           ends
.text:00005FF3
.text:00005FF4 ; ===========================================================================
.text:00005FF4
.text:00005FF4 ; Segment type: Pure code
.text:00005FF4 ; Segment permissions: Read/Execute
.text:00005FF4 _text           segment para public 'CODE' use32
.text:00005FF4                 assume cs:_text
.text:00005FF4                 ;org 5FF4h
.text:00005FF4 ; COMDAT (pick any)
.text:00005FF4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005FF4
.text:00005FF4 ; =============== S U B R O U T I N E =======================================
.text:00005FF4
.text:00005FF4 ; Attributes: bp-based frame
.text:00005FF4
.text:00005FF4 ; public: class NArchive::NZip::CItemEx const & __thiscall CObjectVector<class NArchive::NZip::CItemEx>::operator[](unsigned int)const
.text:00005FF4                 public ??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEABVCItemEx@NZip@NArchive@@I@Z
.text:00005FF4 ??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEABVCItemEx@NZip@NArchive@@I@Z proc near
.text:00005FF4                                         ; CODE XREF: NArchive::NZip::FindItem(CObjectVector<NArchive::NZip::CItemEx> const &,unsigned __int64)+4Bp
.text:00005FF4
.text:00005FF4 var_4           = dword ptr -4
.text:00005FF4 arg_0           = dword ptr  8
.text:00005FF4
.text:00005FF4                 push    ebp
.text:00005FF5                 mov     ebp, esp
.text:00005FF7                 push    ecx
.text:00005FF8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005FFF                 mov     [ebp+var_4], ecx
.text:00006002                 mov     eax, [ebp+arg_0]
.text:00006005                 push    eax
.text:00006006                 mov     ecx, [ebp+var_4]
.text:00006009                 call    ??A?$CRecordVector@PAX@@QBEABQAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:0000600E                 mov     eax, [eax]
.text:00006010                 add     esp, 4
.text:00006013                 cmp     ebp, esp
.text:00006015                 call    __RTC_CheckEsp
.text:0000601A                 mov     esp, ebp
.text:0000601C                 pop     ebp
.text:0000601D                 retn    4
.text:0000601D ??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEABVCItemEx@NZip@NArchive@@I@Z endp
.text:0000601D
.text:0000601D _text           ends
.text:0000601D
.text:00006020 ; ===========================================================================
.text:00006020
.text:00006020 ; Segment type: Pure code
.text:00006020 ; Segment permissions: Read/Execute
.text:00006020 _text           segment para public 'CODE' use32
.text:00006020                 assume cs:_text
.text:00006020                 ;org 6020h
.text:00006020 ; COMDAT (pick any)
.text:00006020                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006020
.text:00006020 ; =============== S U B R O U T I N E =======================================
.text:00006020
.text:00006020 ; Attributes: bp-based frame
.text:00006020
.text:00006020 ; public: class NArchive::NZip::CItemEx & __thiscall CObjectVector<class NArchive::NZip::CItemEx>::operator[](unsigned int)
.text:00006020                 public ??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEAAVCItemEx@NZip@NArchive@@I@Z
.text:00006020 ??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEAAVCItemEx@NZip@NArchive@@I@Z proc near
.text:00006020                                         ; CODE XREF: __catch$?ReadLocals@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$0+21p
.text:00006020                                         ; NArchive::NZip::CInArchive::ReadLocals(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+26Ap ...
.text:00006020
.text:00006020 var_4           = dword ptr -4
.text:00006020 arg_0           = dword ptr  8
.text:00006020
.text:00006020                 push    ebp
.text:00006021                 mov     ebp, esp
.text:00006023                 push    ecx
.text:00006024                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000602B                 mov     [ebp+var_4], ecx
.text:0000602E                 mov     eax, [ebp+arg_0]
.text:00006031                 push    eax
.text:00006032                 mov     ecx, [ebp+var_4]
.text:00006035                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:0000603A                 mov     eax, [eax]
.text:0000603C                 add     esp, 4
.text:0000603F                 cmp     ebp, esp
.text:00006041                 call    __RTC_CheckEsp
.text:00006046                 mov     esp, ebp
.text:00006048                 pop     ebp
.text:00006049                 retn    4
.text:00006049 ??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEAAVCItemEx@NZip@NArchive@@I@Z endp
.text:00006049
.text:00006049 _text           ends
.text:00006049
.text:0000604C ; ===========================================================================
.text:0000604C
.text:0000604C ; Segment type: Pure code
.text:0000604C ; Segment permissions: Read/Execute
.text:0000604C _text           segment para public 'CODE' use32
.text:0000604C                 assume cs:_text
.text:0000604C                 ;org 604Ch
.text:0000604C ; COMDAT (pick any)
.text:0000604C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000604C
.text:0000604C ; =============== S U B R O U T I N E =======================================
.text:0000604C
.text:0000604C ; Attributes: bp-based frame
.text:0000604C
.text:0000604C ; int __stdcall CObjectVector<NArchive::NZip::CItemEx>::Add(struct NArchive::NZip::CItemEx *)
.text:0000604C                 public ?Add@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEIABVCItemEx@NZip@NArchive@@@Z
.text:0000604C ?Add@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEIABVCItemEx@NZip@NArchive@@@Z proc near
.text:0000604C                                         ; CODE XREF: NArchive::NZip::CInArchive::TryReadCd(CObjectVector<NArchive::NZip::CItemEx> &,unsigned __int64,unsigned __int64,NArchive::NZip::CProgressVirt *)+185p
.text:0000604C                                         ; NArchive::NZip::CInArchive::ReadLocals(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+11Ep ...
.text:0000604C
.text:0000604C var_1C          = dword ptr -1Ch
.text:0000604C var_18          = dword ptr -18h
.text:0000604C var_14          = dword ptr -14h
.text:0000604C var_10          = dword ptr -10h
.text:0000604C var_C           = dword ptr -0Ch
.text:0000604C var_4           = dword ptr -4
.text:0000604C arg_0           = dword ptr  8
.text:0000604C
.text:0000604C                 push    ebp
.text:0000604D                 mov     ebp, esp
.text:0000604F                 push    0FFFFFFFFh
.text:00006051                 push    offset __ehhandler$?Add@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEIABVCItemEx@NZip@NArchive@@@Z
.text:00006056                 mov     eax, large fs:0
.text:0000605C                 push    eax
.text:0000605D                 sub     esp, 10h
.text:00006060                 mov     eax, 0CCCCCCCCh
.text:00006065                 mov     [ebp+var_1C], eax
.text:00006068                 mov     [ebp+var_18], eax
.text:0000606B                 mov     [ebp+var_14], eax
.text:0000606E                 mov     [ebp+var_10], eax
.text:00006071                 mov     eax, dword ptr ds:___security_cookie
.text:00006076                 xor     eax, ebp
.text:00006078                 push    eax
.text:00006079                 lea     eax, [ebp+var_C]
.text:0000607C                 mov     large fs:0, eax
.text:00006082                 mov     [ebp+var_10], ecx
.text:00006085                 push    68h ; 'h'       ; unsigned int
.text:00006087                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000608C                 add     esp, 4
.text:0000608F                 mov     [ebp+var_18], eax
.text:00006092                 mov     [ebp+var_4], 0
.text:00006099                 cmp     [ebp+var_18], 0
.text:0000609D                 jz      short loc_60B0
.text:0000609F                 mov     eax, [ebp+arg_0]
.text:000060A2                 push    eax             ; struct NArchive::NZip::CItemEx *
.text:000060A3                 mov     ecx, [ebp+var_18] ; this
.text:000060A6                 call    ??0CItemEx@NZip@NArchive@@QAE@ABV012@@Z ; NArchive::NZip::CItemEx::CItemEx(NArchive::NZip::CItemEx const &)
.text:000060AB                 mov     [ebp+var_1C], eax
.text:000060AE                 jmp     short loc_60B7
.text:000060B0 ; ---------------------------------------------------------------------------
.text:000060B0
.text:000060B0 loc_60B0:                               ; CODE XREF: CObjectVector<NArchive::NZip::CItemEx>::Add(NArchive::NZip::CItemEx const &)+51j
.text:000060B0                 mov     [ebp+var_1C], 0
.text:000060B7
.text:000060B7 loc_60B7:                               ; CODE XREF: CObjectVector<NArchive::NZip::CItemEx>::Add(NArchive::NZip::CItemEx const &)+62j
.text:000060B7                 mov     ecx, [ebp+var_1C]
.text:000060BA                 mov     [ebp+var_14], ecx
.text:000060BD                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000060C4                 mov     edx, [ebp+var_14]
.text:000060C7                 push    edx
.text:000060C8                 mov     ecx, [ebp+var_10]
.text:000060CB                 call    ?Add@?$CRecordVector@PAX@@QAEIQAX@Z ; CRecordVector<void *>::Add(void * const)
.text:000060D0                 mov     ecx, [ebp+var_C]
.text:000060D3                 mov     large fs:0, ecx
.text:000060DA                 pop     ecx
.text:000060DB                 add     esp, 1Ch
.text:000060DE                 cmp     ebp, esp
.text:000060E0                 call    __RTC_CheckEsp
.text:000060E5                 mov     esp, ebp
.text:000060E7                 pop     ebp
.text:000060E8                 retn    4
.text:000060E8 ?Add@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEIABVCItemEx@NZip@NArchive@@@Z endp
.text:000060E8
.text:000060E8 ; ---------------------------------------------------------------------------
.text:000060EB                 align 4
.text:000060EB _text           ends
.text:000060EB
.text$x:000060EC ; ===========================================================================
.text$x:000060EC
.text$x:000060EC ; Segment type: Pure code
.text$x:000060EC ; Segment permissions: Read/Execute
.text$x:000060EC _text$x         segment para public 'CODE' use32
.text$x:000060EC                 assume cs:_text$x
.text$x:000060EC                 ;org 60ECh
.text$x:000060EC ; COMDAT (pick associative to section at 604C)
.text$x:000060EC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:000060EC
.text$x:000060EC ; =============== S U B R O U T I N E =======================================
.text$x:000060EC
.text$x:000060EC
.text$x:000060EC __unwindfunclet$?Add@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEIABVCItemEx@NZip@NArchive@@@Z$0 proc near
.text$x:000060EC                                         ; DATA XREF: .xdata$x:00006118o
.text$x:000060EC                 mov     eax, [ebp-18h]
.text$x:000060EF                 push    eax             ; void *
.text$x:000060F0                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000060F5                 pop     ecx
.text$x:000060F6                 retn
.text$x:000060F6 __unwindfunclet$?Add@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEIABVCItemEx@NZip@NArchive@@@Z$0 endp
.text$x:000060F6
.text$x:000060F7
.text$x:000060F7 ; =============== S U B R O U T I N E =======================================
.text$x:000060F7
.text$x:000060F7
.text$x:000060F7 __ehhandler$?Add@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEIABVCItemEx@NZip@NArchive@@@Z proc near
.text$x:000060F7                                         ; DATA XREF: CObjectVector<NArchive::NZip::CItemEx>::Add(NArchive::NZip::CItemEx const &)+5o
.text$x:000060F7
.text$x:000060F7 arg_4           = dword ptr  8
.text$x:000060F7
.text$x:000060F7                 mov     edx, [esp+arg_4]
.text$x:000060FB                 lea     eax, [edx+0Ch]
.text$x:000060FE                 mov     ecx, [edx-14h]
.text$x:00006101                 xor     ecx, eax
.text$x:00006103                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006108                 mov     eax, offset __ehfuncinfo$?Add@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEIABVCItemEx@NZip@NArchive@@@Z
.text$x:0000610D                 jmp     ___CxxFrameHandler3
.text$x:0000610D __ehhandler$?Add@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEIABVCItemEx@NZip@NArchive@@@Z endp
.text$x:0000610D
.text$x:0000610D ; ---------------------------------------------------------------------------
.text$x:00006112                 align 4
.text$x:00006112 _text$x         ends
.text$x:00006112
.xdata$x:00006114 ; ===========================================================================
.xdata$x:00006114
.xdata$x:00006114 ; Segment type: Pure data
.xdata$x:00006114 ; Segment permissions: Read
.xdata$x:00006114 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00006114                 assume cs:_xdata$x
.xdata$x:00006114                 ;org 6114h
.xdata$x:00006114 ; COMDAT (pick associative to section at 604C)
.xdata$x:00006114 __unwindtable$?Add@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEIABVCItemEx@NZip@NArchive@@@Z db 0FFh
.xdata$x:00006114                                         ; DATA XREF: .xdata$x:00006124o
.xdata$x:00006115                 db 0FFh
.xdata$x:00006116                 db 0FFh
.xdata$x:00006117                 db 0FFh
.xdata$x:00006118                 dd offset __unwindfunclet$?Add@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEIABVCItemEx@NZip@NArchive@@@Z$0
.xdata$x:0000611C __ehfuncinfo$?Add@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEIABVCItemEx@NZip@NArchive@@@Z db  22h ; "
.xdata$x:0000611C                                         ; DATA XREF: __ehhandler$?Add@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEIABVCItemEx@NZip@NArchive@@@Z+11o
.xdata$x:0000611D                 db    5
.xdata$x:0000611E                 db  93h ; ô
.xdata$x:0000611F                 db  19h
.xdata$x:00006120                 db    1
.xdata$x:00006121                 db    0
.xdata$x:00006122                 db    0
.xdata$x:00006123                 db    0
.xdata$x:00006124                 dd offset __unwindtable$?Add@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEIABVCItemEx@NZip@NArchive@@@Z
.xdata$x:00006128                 db    0
.xdata$x:00006129                 db    0
.xdata$x:0000612A                 db    0
.xdata$x:0000612B                 db    0
.xdata$x:0000612C                 db    0
.xdata$x:0000612D                 db    0
.xdata$x:0000612E                 db    0
.xdata$x:0000612F                 db    0
.xdata$x:00006130                 db    0
.xdata$x:00006131                 db    0
.xdata$x:00006132                 db    0
.xdata$x:00006133                 db    0
.xdata$x:00006134                 db    0
.xdata$x:00006135                 db    0
.xdata$x:00006136                 db    0
.xdata$x:00006137                 db    0
.xdata$x:00006138                 db    0
.xdata$x:00006139                 db    0
.xdata$x:0000613A                 db    0
.xdata$x:0000613B                 db    0
.xdata$x:0000613C                 db    1
.xdata$x:0000613D                 db    0
.xdata$x:0000613E                 db    0
.xdata$x:0000613F                 db    0
.xdata$x:0000613F _xdata$x        ends
.xdata$x:0000613F
.text:00006140 ; ===========================================================================
.text:00006140
.text:00006140 ; Segment type: Pure code
.text:00006140 ; Segment permissions: Read/Execute
.text:00006140 _text           segment para public 'CODE' use32
.text:00006140                 assume cs:_text
.text:00006140                 ;org 6140h
.text:00006140 ; COMDAT (pick any)
.text:00006140                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006140
.text:00006140 ; =============== S U B R O U T I N E =======================================
.text:00006140
.text:00006140 ; Attributes: bp-based frame
.text:00006140
.text:00006140 ; public: __thiscall CObjectVector<class NArchive::NZip::CItemEx>::~CObjectVector<class NArchive::NZip::CItemEx>(void)
.text:00006140                 public ??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ
.text:00006140 ??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ proc near
.text:00006140                                         ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+4A2p
.text:00006140                                         ; NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+4F8p ...
.text:00006140
.text:00006140 var_20          = dword ptr -20h
.text:00006140 var_1C          = dword ptr -1Ch
.text:00006140 var_18          = dword ptr -18h
.text:00006140 var_14          = dword ptr -14h
.text:00006140 var_10          = dword ptr -10h
.text:00006140 var_C           = dword ptr -0Ch
.text:00006140 var_4           = dword ptr -4
.text:00006140
.text:00006140                 push    ebp
.text:00006141                 mov     ebp, esp
.text:00006143                 push    0FFFFFFFFh
.text:00006145                 push    offset __ehhandler$??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ
.text:0000614A                 mov     eax, large fs:0
.text:00006150                 push    eax
.text:00006151                 sub     esp, 14h
.text:00006154                 mov     eax, 0CCCCCCCCh
.text:00006159                 mov     [ebp+var_20], eax
.text:0000615C                 mov     [ebp+var_1C], eax
.text:0000615F                 mov     [ebp+var_18], eax
.text:00006162                 mov     [ebp+var_14], eax
.text:00006165                 mov     [ebp+var_10], eax
.text:00006168                 mov     eax, dword ptr ds:___security_cookie
.text:0000616D                 xor     eax, ebp
.text:0000616F                 push    eax
.text:00006170                 lea     eax, [ebp+var_C]
.text:00006173                 mov     large fs:0, eax
.text:00006179                 mov     [ebp+var_10], ecx
.text:0000617C                 mov     [ebp+var_4], 0
.text:00006183                 mov     ecx, [ebp+var_10]
.text:00006186                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:0000618B                 mov     [ebp+var_14], eax
.text:0000618E
.text:0000618E loc_618E:                               ; CODE XREF: CObjectVector<NArchive::NZip::CItemEx>::~CObjectVector<NArchive::NZip::CItemEx>(void):loc_61D0j
.text:0000618E                 cmp     [ebp+var_14], 0
.text:00006192                 jz      short loc_61D2
.text:00006194                 mov     eax, [ebp+var_14]
.text:00006197                 sub     eax, 1
.text:0000619A                 mov     [ebp+var_14], eax
.text:0000619D                 mov     ecx, [ebp+var_14]
.text:000061A0                 push    ecx
.text:000061A1                 mov     ecx, [ebp+var_10]
.text:000061A4                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:000061A9                 mov     edx, [eax]
.text:000061AB                 mov     [ebp+var_1C], edx
.text:000061AE                 mov     eax, [ebp+var_1C]
.text:000061B1                 mov     [ebp+var_18], eax
.text:000061B4                 cmp     [ebp+var_18], 0
.text:000061B8                 jz      short loc_61C9
.text:000061BA                 push    1
.text:000061BC                 mov     ecx, [ebp+var_18]
.text:000061BF                 call    ??_GCItemEx@NZip@NArchive@@QAEPAXI@Z ; NArchive::NZip::CItemEx::`scalar deleting destructor'(uint)
.text:000061C4                 mov     [ebp+var_20], eax
.text:000061C7                 jmp     short loc_61D0
.text:000061C9 ; ---------------------------------------------------------------------------
.text:000061C9
.text:000061C9 loc_61C9:                               ; CODE XREF: CObjectVector<NArchive::NZip::CItemEx>::~CObjectVector<NArchive::NZip::CItemEx>(void)+78j
.text:000061C9                 mov     [ebp+var_20], 0
.text:000061D0
.text:000061D0 loc_61D0:                               ; CODE XREF: CObjectVector<NArchive::NZip::CItemEx>::~CObjectVector<NArchive::NZip::CItemEx>(void)+87j
.text:000061D0                 jmp     short loc_618E
.text:000061D2 ; ---------------------------------------------------------------------------
.text:000061D2
.text:000061D2 loc_61D2:                               ; CODE XREF: CObjectVector<NArchive::NZip::CItemEx>::~CObjectVector<NArchive::NZip::CItemEx>(void)+52j
.text:000061D2                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000061D9                 mov     ecx, [ebp+var_10]
.text:000061DC                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:000061E1                 mov     ecx, [ebp+var_C]
.text:000061E4                 mov     large fs:0, ecx
.text:000061EB                 pop     ecx
.text:000061EC                 add     esp, 20h
.text:000061EF                 cmp     ebp, esp
.text:000061F1                 call    __RTC_CheckEsp
.text:000061F6                 mov     esp, ebp
.text:000061F8                 pop     ebp
.text:000061F9                 retn
.text:000061F9 ??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ endp
.text:000061F9
.text:000061F9 ; ---------------------------------------------------------------------------
.text:000061FA                 align 4
.text:000061FA _text           ends
.text:000061FA
.text$x:000061FC ; ===========================================================================
.text$x:000061FC
.text$x:000061FC ; Segment type: Pure code
.text$x:000061FC ; Segment permissions: Read/Execute
.text$x:000061FC _text$x         segment para public 'CODE' use32
.text$x:000061FC                 assume cs:_text$x
.text$x:000061FC                 ;org 61FCh
.text$x:000061FC ; COMDAT (pick associative to section at 6140)
.text$x:000061FC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:000061FC
.text$x:000061FC ; =============== S U B R O U T I N E =======================================
.text$x:000061FC
.text$x:000061FC
.text$x:000061FC __unwindfunclet$??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ$0 proc near
.text$x:000061FC                                         ; DATA XREF: .xdata$x:00006224o
.text$x:000061FC                 mov     ecx, [ebp-10h]
.text$x:000061FF                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:000061FF __unwindfunclet$??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ$0 endp
.text$x:000061FF
.text$x:00006204
.text$x:00006204 ; =============== S U B R O U T I N E =======================================
.text$x:00006204
.text$x:00006204
.text$x:00006204 __ehhandler$??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ proc near
.text$x:00006204                                         ; DATA XREF: CObjectVector<NArchive::NZip::CItemEx>::~CObjectVector<NArchive::NZip::CItemEx>(void)+5o
.text$x:00006204
.text$x:00006204 arg_4           = dword ptr  8
.text$x:00006204
.text$x:00006204                 mov     edx, [esp+arg_4]
.text$x:00006208                 lea     eax, [edx+0Ch]
.text$x:0000620B                 mov     ecx, [edx-18h]
.text$x:0000620E                 xor     ecx, eax
.text$x:00006210                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006215                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ
.text$x:0000621A                 jmp     ___CxxFrameHandler3
.text$x:0000621A __ehhandler$??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ endp
.text$x:0000621A
.text$x:0000621A ; ---------------------------------------------------------------------------
.text$x:0000621F                 align 10h
.text$x:0000621F _text$x         ends
.text$x:0000621F
.xdata$x:00006220 ; ===========================================================================
.xdata$x:00006220
.xdata$x:00006220 ; Segment type: Pure data
.xdata$x:00006220 ; Segment permissions: Read
.xdata$x:00006220 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00006220                 assume cs:_xdata$x
.xdata$x:00006220                 ;org 6220h
.xdata$x:00006220 ; COMDAT (pick associative to section at 6140)
.xdata$x:00006220 __unwindtable$??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ db 0FFh
.xdata$x:00006220                                         ; DATA XREF: .xdata$x:00006230o
.xdata$x:00006221                 db 0FFh
.xdata$x:00006222                 db 0FFh
.xdata$x:00006223                 db 0FFh
.xdata$x:00006224                 dd offset __unwindfunclet$??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ$0
.xdata$x:00006228 __ehfuncinfo$??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ db  22h ; "
.xdata$x:00006228                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ+11o
.xdata$x:00006229                 db    5
.xdata$x:0000622A                 db  93h ; ô
.xdata$x:0000622B                 db  19h
.xdata$x:0000622C                 db    1
.xdata$x:0000622D                 db    0
.xdata$x:0000622E                 db    0
.xdata$x:0000622F                 db    0
.xdata$x:00006230                 dd offset __unwindtable$??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ
.xdata$x:00006234                 db    0
.xdata$x:00006235                 db    0
.xdata$x:00006236                 db    0
.xdata$x:00006237                 db    0
.xdata$x:00006238                 db    0
.xdata$x:00006239                 db    0
.xdata$x:0000623A                 db    0
.xdata$x:0000623B                 db    0
.xdata$x:0000623C                 db    0
.xdata$x:0000623D                 db    0
.xdata$x:0000623E                 db    0
.xdata$x:0000623F                 db    0
.xdata$x:00006240                 db    0
.xdata$x:00006241                 db    0
.xdata$x:00006242                 db    0
.xdata$x:00006243                 db    0
.xdata$x:00006244                 db    0
.xdata$x:00006245                 db    0
.xdata$x:00006246                 db    0
.xdata$x:00006247                 db    0
.xdata$x:00006248                 db    1
.xdata$x:00006249                 db    0
.xdata$x:0000624A                 db    0
.xdata$x:0000624B                 db    0
.xdata$x:0000624B _xdata$x        ends
.xdata$x:0000624B
.text:0000624C ; ===========================================================================
.text:0000624C
.text:0000624C ; Segment type: Pure code
.text:0000624C ; Segment permissions: Read/Execute
.text:0000624C _text           segment para public 'CODE' use32
.text:0000624C                 assume cs:_text
.text:0000624C                 ;org 624Ch
.text:0000624C ; COMDAT (pick any)
.text:0000624C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000624C
.text:0000624C ; =============== S U B R O U T I N E =======================================
.text:0000624C
.text:0000624C ; Attributes: bp-based frame
.text:0000624C
.text:0000624C ; public: void __thiscall CObjectVector<class NArchive::NZip::CItemEx>::Clear(void)
.text:0000624C                 public ?Clear@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEXXZ
.text:0000624C ?Clear@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEXXZ proc near
.text:0000624C                                         ; CODE XREF: NArchive::NZip::CInArchive::TryReadCd(CObjectVector<NArchive::NZip::CItemEx> &,unsigned __int64,unsigned __int64,NArchive::NZip::CProgressVirt *)+44p
.text:0000624C                                         ; NArchive::NZip::CInArchive::ReadLocals(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+49p ...
.text:0000624C
.text:0000624C var_14          = dword ptr -14h
.text:0000624C var_10          = dword ptr -10h
.text:0000624C var_C           = dword ptr -0Ch
.text:0000624C var_8           = dword ptr -8
.text:0000624C var_4           = dword ptr -4
.text:0000624C
.text:0000624C                 push    ebp
.text:0000624D                 mov     ebp, esp
.text:0000624F                 sub     esp, 14h
.text:00006252                 mov     eax, 0CCCCCCCCh
.text:00006257                 mov     [ebp+var_14], eax
.text:0000625A                 mov     [ebp+var_10], eax
.text:0000625D                 mov     [ebp+var_C], eax
.text:00006260                 mov     [ebp+var_8], eax
.text:00006263                 mov     [ebp+var_4], eax
.text:00006266                 mov     [ebp+var_4], ecx
.text:00006269                 mov     ecx, [ebp+var_4]
.text:0000626C                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00006271                 mov     [ebp+var_8], eax
.text:00006274
.text:00006274 loc_6274:                               ; CODE XREF: CObjectVector<NArchive::NZip::CItemEx>::Clear(void):loc_62B6j
.text:00006274                 cmp     [ebp+var_8], 0
.text:00006278                 jz      short loc_62B8
.text:0000627A                 mov     eax, [ebp+var_8]
.text:0000627D                 sub     eax, 1
.text:00006280                 mov     [ebp+var_8], eax
.text:00006283                 mov     ecx, [ebp+var_8]
.text:00006286                 push    ecx
.text:00006287                 mov     ecx, [ebp+var_4]
.text:0000628A                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:0000628F                 mov     edx, [eax]
.text:00006291                 mov     [ebp+var_10], edx
.text:00006294                 mov     eax, [ebp+var_10]
.text:00006297                 mov     [ebp+var_C], eax
.text:0000629A                 cmp     [ebp+var_C], 0
.text:0000629E                 jz      short loc_62AF
.text:000062A0                 push    1
.text:000062A2                 mov     ecx, [ebp+var_C]
.text:000062A5                 call    ??_GCItemEx@NZip@NArchive@@QAEPAXI@Z ; NArchive::NZip::CItemEx::`scalar deleting destructor'(uint)
.text:000062AA                 mov     [ebp+var_14], eax
.text:000062AD                 jmp     short loc_62B6
.text:000062AF ; ---------------------------------------------------------------------------
.text:000062AF
.text:000062AF loc_62AF:                               ; CODE XREF: CObjectVector<NArchive::NZip::CItemEx>::Clear(void)+52j
.text:000062AF                 mov     [ebp+var_14], 0
.text:000062B6
.text:000062B6 loc_62B6:                               ; CODE XREF: CObjectVector<NArchive::NZip::CItemEx>::Clear(void)+61j
.text:000062B6                 jmp     short loc_6274
.text:000062B8 ; ---------------------------------------------------------------------------
.text:000062B8
.text:000062B8 loc_62B8:                               ; CODE XREF: CObjectVector<NArchive::NZip::CItemEx>::Clear(void)+2Cj
.text:000062B8                 mov     ecx, [ebp+var_4]
.text:000062BB                 call    ?Clear@?$CRecordVector@PAX@@QAEXXZ ; CRecordVector<void *>::Clear(void)
.text:000062C0                 add     esp, 14h
.text:000062C3                 cmp     ebp, esp
.text:000062C5                 call    __RTC_CheckEsp
.text:000062CA                 mov     esp, ebp
.text:000062CC                 pop     ebp
.text:000062CD                 retn
.text:000062CD ?Clear@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEXXZ endp
.text:000062CD
.text:000062CD ; ---------------------------------------------------------------------------
.text:000062CE                 align 10h
.text:000062CE _text           ends
.text:000062CE
.text:000062D0 ; ===========================================================================
.text:000062D0
.text:000062D0 ; Segment type: Pure code
.text:000062D0 ; Segment permissions: Read/Execute
.text:000062D0 _text           segment para public 'CODE' use32
.text:000062D0                 assume cs:_text
.text:000062D0                 ;org 62D0h
.text:000062D0 ; COMDAT (pick any)
.text:000062D0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000062D0
.text:000062D0 ; =============== S U B R O U T I N E =======================================
.text:000062D0
.text:000062D0 ; Attributes: bp-based frame
.text:000062D0
.text:000062D0 ; _DWORD __thiscall NArchive::NZip::CExtraSubBlock::CExtraSubBlock(NArchive::NZip::CExtraSubBlock *this, const struct NArchive::NZip::CExtraSubBlock *)
.text:000062D0                 public ??0CExtraSubBlock@NZip@NArchive@@QAE@ABU012@@Z
.text:000062D0 ??0CExtraSubBlock@NZip@NArchive@@QAE@ABU012@@Z proc near
.text:000062D0                                         ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::operator=(CObjectVector<NArchive::NZip::CExtraSubBlock> const &)+B2p
.text:000062D0                                         ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Add(NArchive::NZip::CExtraSubBlock const &)+5Ap ...
.text:000062D0
.text:000062D0 var_4           = dword ptr -4
.text:000062D0 arg_0           = dword ptr  8
.text:000062D0
.text:000062D0                 push    ebp
.text:000062D1                 mov     ebp, esp
.text:000062D3                 push    ecx
.text:000062D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000062DB                 mov     [ebp+var_4], ecx
.text:000062DE                 mov     eax, [ebp+var_4]
.text:000062E1                 mov     ecx, [ebp+arg_0]
.text:000062E4                 mov     dx, [ecx]
.text:000062E7                 mov     [eax], dx
.text:000062EA                 mov     eax, [ebp+arg_0]
.text:000062ED                 add     eax, 4
.text:000062F0                 push    eax
.text:000062F1                 mov     ecx, [ebp+var_4]
.text:000062F4                 add     ecx, 4
.text:000062F7                 call    ??0?$CBuffer@E@@QAE@ABV0@@Z ; CBuffer<uchar>::CBuffer<uchar>(CBuffer<uchar> const &)
.text:000062FC                 mov     eax, [ebp+var_4]
.text:000062FF                 add     esp, 4
.text:00006302                 cmp     ebp, esp
.text:00006304                 call    __RTC_CheckEsp
.text:00006309                 mov     esp, ebp
.text:0000630B                 pop     ebp
.text:0000630C                 retn    4
.text:0000630C ??0CExtraSubBlock@NZip@NArchive@@QAE@ABU012@@Z endp
.text:0000630C
.text:0000630C ; ---------------------------------------------------------------------------
.text:0000630F                 align 10h
.text:0000630F _text           ends
.text:0000630F
.text:00006310 ; ===========================================================================
.text:00006310
.text:00006310 ; Segment type: Pure code
.text:00006310 ; Segment permissions: Read/Execute
.text:00006310 _text           segment para public 'CODE' use32
.text:00006310                 assume cs:_text
.text:00006310                 ;org 6310h
.text:00006310 ; COMDAT (pick any)
.text:00006310                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006310
.text:00006310 ; =============== S U B R O U T I N E =======================================
.text:00006310
.text:00006310 ; Attributes: bp-based frame
.text:00006310
.text:00006310 ; public: void * __thiscall NArchive::NZip::CExtraSubBlock::`scalar deleting destructor'(unsigned int)
.text:00006310                 public ??_GCExtraSubBlock@NZip@NArchive@@QAEPAXI@Z
.text:00006310 ??_GCExtraSubBlock@NZip@NArchive@@QAEPAXI@Z proc near
.text:00006310                                         ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::~CObjectVector<NArchive::NZip::CExtraSubBlock>(void)+7Fp
.text:00006310                                         ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Clear(void)+59p
.text:00006310
.text:00006310 var_4           = dword ptr -4
.text:00006310 arg_0           = dword ptr  8
.text:00006310
.text:00006310                 push    ebp
.text:00006311                 mov     ebp, esp
.text:00006313                 push    ecx
.text:00006314                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000631B                 mov     [ebp+var_4], ecx
.text:0000631E                 mov     ecx, [ebp+var_4] ; this
.text:00006321                 call    ??1CExtraSubBlock@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CExtraSubBlock::~CExtraSubBlock(void)
.text:00006326                 mov     eax, [ebp+arg_0]
.text:00006329                 and     eax, 1
.text:0000632C                 jz      short loc_633A
.text:0000632E                 mov     ecx, [ebp+var_4]
.text:00006331                 push    ecx             ; void *
.text:00006332                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006337                 add     esp, 4
.text:0000633A
.text:0000633A loc_633A:                               ; CODE XREF: NArchive::NZip::CExtraSubBlock::`scalar deleting destructor'(uint)+1Cj
.text:0000633A                 mov     eax, [ebp+var_4]
.text:0000633D                 add     esp, 4
.text:00006340                 cmp     ebp, esp
.text:00006342                 call    __RTC_CheckEsp
.text:00006347                 mov     esp, ebp
.text:00006349                 pop     ebp
.text:0000634A                 retn    4
.text:0000634A ??_GCExtraSubBlock@NZip@NArchive@@QAEPAXI@Z endp
.text:0000634A
.text:0000634A ; ---------------------------------------------------------------------------
.text:0000634D                 align 10h
.text:0000634D _text           ends
.text:0000634D
.text:00006350 ; ===========================================================================
.text:00006350
.text:00006350 ; Segment type: Pure code
.text:00006350 ; Segment permissions: Read/Execute
.text:00006350 _text           segment para public 'CODE' use32
.text:00006350                 assume cs:_text
.text:00006350                 ;org 6350h
.text:00006350 ; COMDAT (pick any)
.text:00006350                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006350
.text:00006350 ; =============== S U B R O U T I N E =======================================
.text:00006350
.text:00006350 ; Attributes: bp-based frame
.text:00006350
.text:00006350 ; _DWORD __thiscall NArchive::NZip::CItemEx::CItemEx(NArchive::NZip::CItemEx *this, const struct NArchive::NZip::CItemEx *)
.text:00006350                 public ??0CItemEx@NZip@NArchive@@QAE@ABV012@@Z
.text:00006350 ??0CItemEx@NZip@NArchive@@QAE@ABV012@@Z proc near
.text:00006350                                         ; CODE XREF: CObjectVector<NArchive::NZip::CItemEx>::Add(NArchive::NZip::CItemEx const &)+5Ap
.text:00006350
.text:00006350 var_4           = dword ptr -4
.text:00006350 arg_0           = dword ptr  8
.text:00006350
.text:00006350                 push    ebp
.text:00006351                 mov     ebp, esp
.text:00006353                 push    ecx
.text:00006354                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000635B                 mov     [ebp+var_4], ecx
.text:0000635E                 mov     eax, [ebp+arg_0]
.text:00006361                 push    eax             ; struct NArchive::NZip::CItem *
.text:00006362                 mov     ecx, [ebp+var_4] ; this
.text:00006365                 call    ??0CItem@NZip@NArchive@@QAE@ABV012@@Z ; NArchive::NZip::CItem::CItem(NArchive::NZip::CItem const &)
.text:0000636A                 mov     ecx, [ebp+var_4]
.text:0000636D                 mov     edx, [ebp+arg_0]
.text:00006370                 mov     eax, [edx+60h]
.text:00006373                 mov     [ecx+60h], eax
.text:00006376                 mov     eax, [ebp+var_4]
.text:00006379                 add     esp, 4
.text:0000637C                 cmp     ebp, esp
.text:0000637E                 call    __RTC_CheckEsp
.text:00006383                 mov     esp, ebp
.text:00006385                 pop     ebp
.text:00006386                 retn    4
.text:00006386 ??0CItemEx@NZip@NArchive@@QAE@ABV012@@Z endp
.text:00006386
.text:00006386 ; ---------------------------------------------------------------------------
.text:00006389                 align 4
.text:00006389 _text           ends
.text:00006389
.text:0000638C ; ===========================================================================
.text:0000638C
.text:0000638C ; Segment type: Pure code
.text:0000638C ; Segment permissions: Read/Execute
.text:0000638C _text           segment para public 'CODE' use32
.text:0000638C                 assume cs:_text
.text:0000638C                 ;org 638Ch
.text:0000638C ; COMDAT (pick any)
.text:0000638C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000638C
.text:0000638C ; =============== S U B R O U T I N E =======================================
.text:0000638C
.text:0000638C ; Attributes: bp-based frame
.text:0000638C
.text:0000638C ; public: void * __thiscall NArchive::NZip::CItemEx::`scalar deleting destructor'(unsigned int)
.text:0000638C                 public ??_GCItemEx@NZip@NArchive@@QAEPAXI@Z
.text:0000638C ??_GCItemEx@NZip@NArchive@@QAEPAXI@Z proc near
.text:0000638C                                         ; CODE XREF: CObjectVector<NArchive::NZip::CItemEx>::~CObjectVector<NArchive::NZip::CItemEx>(void)+7Fp
.text:0000638C                                         ; CObjectVector<NArchive::NZip::CItemEx>::Clear(void)+59p
.text:0000638C
.text:0000638C var_4           = dword ptr -4
.text:0000638C arg_0           = dword ptr  8
.text:0000638C
.text:0000638C                 push    ebp
.text:0000638D                 mov     ebp, esp
.text:0000638F                 push    ecx
.text:00006390                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006397                 mov     [ebp+var_4], ecx
.text:0000639A                 mov     ecx, [ebp+var_4] ; this
.text:0000639D                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:000063A2                 mov     eax, [ebp+arg_0]
.text:000063A5                 and     eax, 1
.text:000063A8                 jz      short loc_63B6
.text:000063AA                 mov     ecx, [ebp+var_4]
.text:000063AD                 push    ecx             ; void *
.text:000063AE                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000063B3                 add     esp, 4
.text:000063B6
.text:000063B6 loc_63B6:                               ; CODE XREF: NArchive::NZip::CItemEx::`scalar deleting destructor'(uint)+1Cj
.text:000063B6                 mov     eax, [ebp+var_4]
.text:000063B9                 add     esp, 4
.text:000063BC                 cmp     ebp, esp
.text:000063BE                 call    __RTC_CheckEsp
.text:000063C3                 mov     esp, ebp
.text:000063C5                 pop     ebp
.text:000063C6                 retn    4
.text:000063C6 ??_GCItemEx@NZip@NArchive@@QAEPAXI@Z endp
.text:000063C6
.text:000063C6 ; ---------------------------------------------------------------------------
.text:000063C9                 align 4
.text:000063C9 _text           ends
.text:000063C9
.text:000063CC ; ===========================================================================
.text:000063CC
.text:000063CC ; Segment type: Pure code
.text:000063CC ; Segment permissions: Read/Execute
.text:000063CC _text           segment para public 'CODE' use32
.text:000063CC                 assume cs:_text
.text:000063CC                 ;org 63CCh
.text:000063CC ; COMDAT (pick any)
.text:000063CC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000063CC
.text:000063CC ; =============== S U B R O U T I N E =======================================
.text:000063CC
.text:000063CC ; Attributes: bp-based frame
.text:000063CC
.text:000063CC ; _DWORD __thiscall NArchive::NZip::CItem::CItem(NArchive::NZip::CItem *this, const struct NArchive::NZip::CItem *)
.text:000063CC                 public ??0CItem@NZip@NArchive@@QAE@ABV012@@Z
.text:000063CC ??0CItem@NZip@NArchive@@QAE@ABV012@@Z proc near
.text:000063CC                                         ; CODE XREF: NArchive::NZip::CItemEx::CItemEx(NArchive::NZip::CItemEx const &)+15p
.text:000063CC
.text:000063CC var_10          = dword ptr -10h
.text:000063CC var_C           = dword ptr -0Ch
.text:000063CC var_4           = dword ptr -4
.text:000063CC arg_0           = dword ptr  8
.text:000063CC
.text:000063CC                 push    ebp
.text:000063CD                 mov     ebp, esp
.text:000063CF                 push    0FFFFFFFFh
.text:000063D1                 push    offset __ehhandler$??0CItem@NZip@NArchive@@QAE@ABV012@@Z
.text:000063D6                 mov     eax, large fs:0
.text:000063DC                 push    eax
.text:000063DD                 push    ecx
.text:000063DE                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000063E5                 mov     eax, dword ptr ds:___security_cookie
.text:000063EA                 xor     eax, ebp
.text:000063EC                 push    eax
.text:000063ED                 lea     eax, [ebp+var_C]
.text:000063F0                 mov     large fs:0, eax
.text:000063F6                 mov     [ebp+var_10], ecx
.text:000063F9                 mov     eax, [ebp+arg_0]
.text:000063FC                 push    eax             ; struct NArchive::NZip::CLocalItem *
.text:000063FD                 mov     ecx, [ebp+var_10] ; this
.text:00006400                 call    ??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z ; NArchive::NZip::CLocalItem::CLocalItem(NArchive::NZip::CLocalItem const &)
.text:00006405                 mov     [ebp+var_4], 0
.text:0000640C                 mov     ecx, [ebp+arg_0]
.text:0000640F                 mov     dx, [ecx+38h]
.text:00006413                 mov     eax, [ebp+var_10]
.text:00006416                 mov     [eax+38h], dx
.text:0000641A                 mov     ecx, [ebp+var_10]
.text:0000641D                 mov     edx, [ebp+arg_0]
.text:00006420                 mov     ax, [edx+3Ah]
.text:00006424                 mov     [ecx+3Ah], ax
.text:00006428                 mov     ecx, [ebp+var_10]
.text:0000642B                 mov     edx, [ebp+arg_0]
.text:0000642E                 mov     eax, [edx+3Ch]
.text:00006431                 mov     [ecx+3Ch], eax
.text:00006434                 mov     ecx, [ebp+var_10]
.text:00006437                 mov     edx, [ebp+arg_0]
.text:0000643A                 mov     eax, [edx+40h]
.text:0000643D                 mov     [ecx+40h], eax
.text:00006440                 mov     edx, [edx+44h]
.text:00006443                 mov     [ecx+44h], edx
.text:00006446                 mov     eax, [ebp+arg_0]
.text:00006449                 add     eax, 48h ; 'H'
.text:0000644C                 push    eax             ; struct NArchive::NZip::CExtraBlock *
.text:0000644D                 mov     ecx, [ebp+var_10]
.text:00006450                 add     ecx, 48h ; 'H'  ; this
.text:00006453                 call    ??0CExtraBlock@NZip@NArchive@@QAE@ABU012@@Z ; NArchive::NZip::CExtraBlock::CExtraBlock(NArchive::NZip::CExtraBlock const &)
.text:00006458                 mov     byte ptr [ebp+var_4], 1
.text:0000645C                 mov     ecx, [ebp+arg_0]
.text:0000645F                 add     ecx, 54h ; 'T'
.text:00006462                 push    ecx
.text:00006463                 mov     ecx, [ebp+var_10]
.text:00006466                 add     ecx, 54h ; 'T'
.text:00006469                 call    ??0?$CBuffer@E@@QAE@ABV0@@Z ; CBuffer<uchar>::CBuffer<uchar>(CBuffer<uchar> const &)
.text:0000646E                 mov     edx, [ebp+var_10]
.text:00006471                 mov     eax, [ebp+arg_0]
.text:00006474                 mov     cl, [eax+5Ch]
.text:00006477                 mov     [edx+5Ch], cl
.text:0000647A                 mov     edx, [ebp+var_10]
.text:0000647D                 mov     eax, [ebp+arg_0]
.text:00006480                 mov     cl, [eax+5Dh]
.text:00006483                 mov     [edx+5Dh], cl
.text:00006486                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000648D                 mov     eax, [ebp+var_10]
.text:00006490                 mov     ecx, [ebp+var_C]
.text:00006493                 mov     large fs:0, ecx
.text:0000649A                 pop     ecx
.text:0000649B                 add     esp, 10h
.text:0000649E                 cmp     ebp, esp
.text:000064A0                 call    __RTC_CheckEsp
.text:000064A5                 mov     esp, ebp
.text:000064A7                 pop     ebp
.text:000064A8                 retn    4
.text:000064A8 ??0CItem@NZip@NArchive@@QAE@ABV012@@Z endp
.text:000064A8
.text:000064A8 ; ---------------------------------------------------------------------------
.text:000064AB                 align 4
.text:000064AB _text           ends
.text:000064AB
.text$x:000064AC ; ===========================================================================
.text$x:000064AC
.text$x:000064AC ; Segment type: Pure code
.text$x:000064AC ; Segment permissions: Read/Execute
.text$x:000064AC _text$x         segment para public 'CODE' use32
.text$x:000064AC                 assume cs:_text$x
.text$x:000064AC                 ;org 64ACh
.text$x:000064AC ; COMDAT (pick associative to section at 63CC)
.text$x:000064AC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:000064AC
.text$x:000064AC ; =============== S U B R O U T I N E =======================================
.text$x:000064AC
.text$x:000064AC
.text$x:000064AC __unwindfunclet$??0CItem@NZip@NArchive@@QAE@ABV012@@Z$0 proc near
.text$x:000064AC                                         ; DATA XREF: .xdata$x:000064E0o
.text$x:000064AC                 mov     ecx, [ebp-10h]  ; this
.text$x:000064AF                 jmp     ??1CLocalItem@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CLocalItem::~CLocalItem(void)
.text$x:000064AF __unwindfunclet$??0CItem@NZip@NArchive@@QAE@ABV012@@Z$0 endp
.text$x:000064AF
.text$x:000064B4
.text$x:000064B4 ; =============== S U B R O U T I N E =======================================
.text$x:000064B4
.text$x:000064B4
.text$x:000064B4 __unwindfunclet$??0CItem@NZip@NArchive@@QAE@ABV012@@Z$1 proc near
.text$x:000064B4                                         ; DATA XREF: .xdata$x:000064E8o
.text$x:000064B4                 mov     ecx, [ebp-10h]
.text$x:000064B7                 add     ecx, 48h ; 'H'  ; this
.text$x:000064BA                 jmp     ??1CExtraBlock@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CExtraBlock::~CExtraBlock(void)
.text$x:000064BA __unwindfunclet$??0CItem@NZip@NArchive@@QAE@ABV012@@Z$1 endp
.text$x:000064BA
.text$x:000064BF
.text$x:000064BF ; =============== S U B R O U T I N E =======================================
.text$x:000064BF
.text$x:000064BF
.text$x:000064BF __ehhandler$??0CItem@NZip@NArchive@@QAE@ABV012@@Z proc near
.text$x:000064BF                                         ; DATA XREF: NArchive::NZip::CItem::CItem(NArchive::NZip::CItem const &)+5o
.text$x:000064BF
.text$x:000064BF arg_4           = dword ptr  8
.text$x:000064BF
.text$x:000064BF                 mov     edx, [esp+arg_4]
.text$x:000064C3                 lea     eax, [edx+0Ch]
.text$x:000064C6                 mov     ecx, [edx-8]
.text$x:000064C9                 xor     ecx, eax
.text$x:000064CB                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000064D0                 mov     eax, offset __ehfuncinfo$??0CItem@NZip@NArchive@@QAE@ABV012@@Z
.text$x:000064D5                 jmp     ___CxxFrameHandler3
.text$x:000064D5 __ehhandler$??0CItem@NZip@NArchive@@QAE@ABV012@@Z endp
.text$x:000064D5
.text$x:000064D5 ; ---------------------------------------------------------------------------
.text$x:000064DA                 align 4
.text$x:000064DA _text$x         ends
.text$x:000064DA
.xdata$x:000064DC ; ===========================================================================
.xdata$x:000064DC
.xdata$x:000064DC ; Segment type: Pure data
.xdata$x:000064DC ; Segment permissions: Read
.xdata$x:000064DC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000064DC                 assume cs:_xdata$x
.xdata$x:000064DC                 ;org 64DCh
.xdata$x:000064DC ; COMDAT (pick associative to section at 63CC)
.xdata$x:000064DC __unwindtable$??0CItem@NZip@NArchive@@QAE@ABV012@@Z db 0FFh
.xdata$x:000064DC                                         ; DATA XREF: .xdata$x:000064F4o
.xdata$x:000064DD                 db 0FFh
.xdata$x:000064DE                 db 0FFh
.xdata$x:000064DF                 db 0FFh
.xdata$x:000064E0                 dd offset __unwindfunclet$??0CItem@NZip@NArchive@@QAE@ABV012@@Z$0
.xdata$x:000064E4                 align 8
.xdata$x:000064E8                 dd offset __unwindfunclet$??0CItem@NZip@NArchive@@QAE@ABV012@@Z$1
.xdata$x:000064EC __ehfuncinfo$??0CItem@NZip@NArchive@@QAE@ABV012@@Z db  22h ; "
.xdata$x:000064EC                                         ; DATA XREF: __ehhandler$??0CItem@NZip@NArchive@@QAE@ABV012@@Z+11o
.xdata$x:000064ED                 db    5
.xdata$x:000064EE                 db  93h ; ô
.xdata$x:000064EF                 db  19h
.xdata$x:000064F0                 db    2
.xdata$x:000064F1                 db    0
.xdata$x:000064F2                 db    0
.xdata$x:000064F3                 db    0
.xdata$x:000064F4                 dd offset __unwindtable$??0CItem@NZip@NArchive@@QAE@ABV012@@Z
.xdata$x:000064F8                 db    0
.xdata$x:000064F9                 db    0
.xdata$x:000064FA                 db    0
.xdata$x:000064FB                 db    0
.xdata$x:000064FC                 db    0
.xdata$x:000064FD                 db    0
.xdata$x:000064FE                 db    0
.xdata$x:000064FF                 db    0
.xdata$x:00006500                 db    0
.xdata$x:00006501                 db    0
.xdata$x:00006502                 db    0
.xdata$x:00006503                 db    0
.xdata$x:00006504                 db    0
.xdata$x:00006505                 db    0
.xdata$x:00006506                 db    0
.xdata$x:00006507                 db    0
.xdata$x:00006508                 db    0
.xdata$x:00006509                 db    0
.xdata$x:0000650A                 db    0
.xdata$x:0000650B                 db    0
.xdata$x:0000650C                 db    1
.xdata$x:0000650D                 db    0
.xdata$x:0000650E                 db    0
.xdata$x:0000650F                 db    0
.xdata$x:0000650F _xdata$x        ends
.xdata$x:0000650F
.text:00006510 ; ===========================================================================
.text:00006510
.text:00006510 ; Segment type: Pure code
.text:00006510 ; Segment permissions: Read/Execute
.text:00006510 _text           segment para public 'CODE' use32
.text:00006510                 assume cs:_text
.text:00006510                 ;org 6510h
.text:00006510 ; COMDAT (pick any)
.text:00006510                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006510
.text:00006510 ; =============== S U B R O U T I N E =======================================
.text:00006510
.text:00006510 ; Attributes: bp-based frame
.text:00006510
.text:00006510 ; _DWORD __thiscall NArchive::NZip::CLocalItem::CLocalItem(NArchive::NZip::CLocalItem *this, const struct NArchive::NZip::CLocalItem *)
.text:00006510                 public ??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z
.text:00006510 ??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z proc near
.text:00006510                                         ; CODE XREF: NArchive::NZip::CItem::CItem(NArchive::NZip::CItem const &)+34p
.text:00006510
.text:00006510 var_10          = dword ptr -10h
.text:00006510 var_C           = dword ptr -0Ch
.text:00006510 var_4           = dword ptr -4
.text:00006510 arg_0           = dword ptr  8
.text:00006510
.text:00006510                 push    ebp
.text:00006511                 mov     ebp, esp
.text:00006513                 push    0FFFFFFFFh
.text:00006515                 push    offset __ehhandler$??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z
.text:0000651A                 mov     eax, large fs:0
.text:00006520                 push    eax
.text:00006521                 push    ecx
.text:00006522                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00006529                 mov     eax, dword ptr ds:___security_cookie
.text:0000652E                 xor     eax, ebp
.text:00006530                 push    eax
.text:00006531                 lea     eax, [ebp+var_C]
.text:00006534                 mov     large fs:0, eax
.text:0000653A                 mov     [ebp+var_10], ecx
.text:0000653D                 mov     eax, [ebp+var_10]
.text:00006540                 mov     ecx, [ebp+arg_0]
.text:00006543                 mov     dx, [ecx]
.text:00006546                 mov     [eax], dx
.text:00006549                 mov     eax, [ebp+var_10]
.text:0000654C                 mov     ecx, [ebp+arg_0]
.text:0000654F                 mov     dx, [ecx+2]
.text:00006553                 mov     [eax+2], dx
.text:00006557                 mov     eax, [ebp+arg_0]
.text:0000655A                 mov     cx, [eax+4]
.text:0000655E                 mov     edx, [ebp+var_10]
.text:00006561                 mov     [edx+4], cx
.text:00006565                 mov     eax, [ebp+var_10]
.text:00006568                 mov     ecx, [ebp+arg_0]
.text:0000656B                 mov     edx, [ecx+8]
.text:0000656E                 mov     [eax+8], edx
.text:00006571                 mov     ecx, [ecx+0Ch]
.text:00006574                 mov     [eax+0Ch], ecx
.text:00006577                 mov     edx, [ebp+var_10]
.text:0000657A                 mov     eax, [ebp+arg_0]
.text:0000657D                 mov     ecx, [eax+10h]
.text:00006580                 mov     [edx+10h], ecx
.text:00006583                 mov     eax, [eax+14h]
.text:00006586                 mov     [edx+14h], eax
.text:00006589                 mov     ecx, [ebp+var_10]
.text:0000658C                 mov     edx, [ebp+arg_0]
.text:0000658F                 mov     eax, [edx+18h]
.text:00006592                 mov     [ecx+18h], eax
.text:00006595                 mov     ecx, [ebp+var_10]
.text:00006598                 mov     edx, [ebp+arg_0]
.text:0000659B                 mov     eax, [edx+1Ch]
.text:0000659E                 mov     [ecx+1Ch], eax
.text:000065A1                 mov     ecx, [ebp+arg_0]
.text:000065A4                 add     ecx, 20h ; ' '
.text:000065A7                 push    ecx
.text:000065A8                 mov     ecx, [ebp+var_10]
.text:000065AB                 add     ecx, 20h ; ' '
.text:000065AE                 call    ??0AString@@QAE@ABV0@@Z ; AString::AString(AString const &)
.text:000065B3                 mov     [ebp+var_4], 0
.text:000065BA                 mov     edx, [ebp+arg_0]
.text:000065BD                 add     edx, 2Ch ; ','
.text:000065C0                 push    edx             ; struct NArchive::NZip::CExtraBlock *
.text:000065C1                 mov     ecx, [ebp+var_10]
.text:000065C4                 add     ecx, 2Ch ; ','  ; this
.text:000065C7                 call    ??0CExtraBlock@NZip@NArchive@@QAE@ABU012@@Z ; NArchive::NZip::CExtraBlock::CExtraBlock(NArchive::NZip::CExtraBlock const &)
.text:000065CC                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000065D3                 mov     eax, [ebp+var_10]
.text:000065D6                 mov     ecx, [ebp+var_C]
.text:000065D9                 mov     large fs:0, ecx
.text:000065E0                 pop     ecx
.text:000065E1                 add     esp, 10h
.text:000065E4                 cmp     ebp, esp
.text:000065E6                 call    __RTC_CheckEsp
.text:000065EB                 mov     esp, ebp
.text:000065ED                 pop     ebp
.text:000065EE                 retn    4
.text:000065EE ??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z endp
.text:000065EE
.text:000065EE ; ---------------------------------------------------------------------------
.text:000065F1                 align 4
.text:000065F1 _text           ends
.text:000065F1
.text$x:000065F4 ; ===========================================================================
.text$x:000065F4
.text$x:000065F4 ; Segment type: Pure code
.text$x:000065F4 ; Segment permissions: Read/Execute
.text$x:000065F4 _text$x         segment para public 'CODE' use32
.text$x:000065F4                 assume cs:_text$x
.text$x:000065F4                 ;org 65F4h
.text$x:000065F4 ; COMDAT (pick associative to section at 6510)
.text$x:000065F4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:000065F4
.text$x:000065F4 ; =============== S U B R O U T I N E =======================================
.text$x:000065F4
.text$x:000065F4
.text$x:000065F4 __unwindfunclet$??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z$0 proc near
.text$x:000065F4                                         ; DATA XREF: .xdata$x:00006620o
.text$x:000065F4                 mov     ecx, [ebp-10h]
.text$x:000065F7                 add     ecx, 20h ; ' '  ; this
.text$x:000065FA                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:000065FA __unwindfunclet$??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z$0 endp
.text$x:000065FA
.text$x:000065FF
.text$x:000065FF ; =============== S U B R O U T I N E =======================================
.text$x:000065FF
.text$x:000065FF
.text$x:000065FF __ehhandler$??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z proc near
.text$x:000065FF                                         ; DATA XREF: NArchive::NZip::CLocalItem::CLocalItem(NArchive::NZip::CLocalItem const &)+5o
.text$x:000065FF
.text$x:000065FF arg_4           = dword ptr  8
.text$x:000065FF
.text$x:000065FF                 mov     edx, [esp+arg_4]
.text$x:00006603                 lea     eax, [edx+0Ch]
.text$x:00006606                 mov     ecx, [edx-8]
.text$x:00006609                 xor     ecx, eax
.text$x:0000660B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006610                 mov     eax, offset __ehfuncinfo$??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z
.text$x:00006615                 jmp     ___CxxFrameHandler3
.text$x:00006615 __ehhandler$??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z endp
.text$x:00006615
.text$x:00006615 ; ---------------------------------------------------------------------------
.text$x:0000661A                 align 4
.text$x:0000661A _text$x         ends
.text$x:0000661A
.xdata$x:0000661C ; ===========================================================================
.xdata$x:0000661C
.xdata$x:0000661C ; Segment type: Pure data
.xdata$x:0000661C ; Segment permissions: Read
.xdata$x:0000661C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000661C                 assume cs:_xdata$x
.xdata$x:0000661C                 ;org 661Ch
.xdata$x:0000661C ; COMDAT (pick associative to section at 6510)
.xdata$x:0000661C __unwindtable$??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z db 0FFh
.xdata$x:0000661C                                         ; DATA XREF: .xdata$x:0000662Co
.xdata$x:0000661D                 db 0FFh
.xdata$x:0000661E                 db 0FFh
.xdata$x:0000661F                 db 0FFh
.xdata$x:00006620                 dd offset __unwindfunclet$??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z$0
.xdata$x:00006624 __ehfuncinfo$??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z db  22h ; "
.xdata$x:00006624                                         ; DATA XREF: __ehhandler$??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z+11o
.xdata$x:00006625                 db    5
.xdata$x:00006626                 db  93h ; ô
.xdata$x:00006627                 db  19h
.xdata$x:00006628                 db    1
.xdata$x:00006629                 db    0
.xdata$x:0000662A                 db    0
.xdata$x:0000662B                 db    0
.xdata$x:0000662C                 dd offset __unwindtable$??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z
.xdata$x:00006630                 db    0
.xdata$x:00006631                 db    0
.xdata$x:00006632                 db    0
.xdata$x:00006633                 db    0
.xdata$x:00006634                 db    0
.xdata$x:00006635                 db    0
.xdata$x:00006636                 db    0
.xdata$x:00006637                 db    0
.xdata$x:00006638                 db    0
.xdata$x:00006639                 db    0
.xdata$x:0000663A                 db    0
.xdata$x:0000663B                 db    0
.xdata$x:0000663C                 db    0
.xdata$x:0000663D                 db    0
.xdata$x:0000663E                 db    0
.xdata$x:0000663F                 db    0
.xdata$x:00006640                 db    0
.xdata$x:00006641                 db    0
.xdata$x:00006642                 db    0
.xdata$x:00006643                 db    0
.xdata$x:00006644                 db    1
.xdata$x:00006645                 db    0
.xdata$x:00006646                 db    0
.xdata$x:00006647                 db    0
.xdata$x:00006647 _xdata$x        ends
.xdata$x:00006647
.text:00006648 ; ===========================================================================
.text:00006648
.text:00006648 ; Segment type: Pure code
.text:00006648 ; Segment permissions: Read/Execute
.text:00006648 _text           segment para public 'CODE' use32
.text:00006648                 assume cs:_text
.text:00006648                 ;org 6648h
.text:00006648 ; COMDAT (pick any)
.text:00006648                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006648
.text:00006648 ; =============== S U B R O U T I N E =======================================
.text:00006648
.text:00006648 ; Attributes: bp-based frame
.text:00006648
.text:00006648 ; _DWORD __thiscall NArchive::NZip::CExtraBlock::CExtraBlock(NArchive::NZip::CExtraBlock *this, const struct NArchive::NZip::CExtraBlock *)
.text:00006648                 public ??0CExtraBlock@NZip@NArchive@@QAE@ABU012@@Z
.text:00006648 ??0CExtraBlock@NZip@NArchive@@QAE@ABU012@@Z proc near
.text:00006648                                         ; CODE XREF: NArchive::NZip::CItem::CItem(NArchive::NZip::CItem const &)+87p
.text:00006648                                         ; NArchive::NZip::CLocalItem::CLocalItem(NArchive::NZip::CLocalItem const &)+B7p
.text:00006648
.text:00006648 var_4           = dword ptr -4
.text:00006648 arg_0           = dword ptr  8
.text:00006648
.text:00006648                 push    ebp
.text:00006649                 mov     ebp, esp
.text:0000664B                 push    ecx
.text:0000664C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006653                 mov     [ebp+var_4], ecx
.text:00006656                 mov     eax, [ebp+arg_0]
.text:00006659                 push    eax
.text:0000665A                 mov     ecx, [ebp+var_4]
.text:0000665D                 call    ??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z ; CObjectVector<NArchive::NZip::CExtraSubBlock>::CObjectVector<NArchive::NZip::CExtraSubBlock>(CObjectVector<NArchive::NZip::CExtraSubBlock> const &)
.text:00006662                 mov     eax, [ebp+var_4]
.text:00006665                 add     esp, 4
.text:00006668                 cmp     ebp, esp
.text:0000666A                 call    __RTC_CheckEsp
.text:0000666F                 mov     esp, ebp
.text:00006671                 pop     ebp
.text:00006672                 retn    4
.text:00006672 ??0CExtraBlock@NZip@NArchive@@QAE@ABU012@@Z endp
.text:00006672
.text:00006672 ; ---------------------------------------------------------------------------
.text:00006675                 align 4
.text:00006675 _text           ends
.text:00006675
.text:00006678 ; ===========================================================================
.text:00006678
.text:00006678 ; Segment type: Pure code
.text:00006678 ; Segment permissions: Read/Execute
.text:00006678 _text           segment para public 'CODE' use32
.text:00006678                 assume cs:_text
.text:00006678                 ;org 6678h
.text:00006678 ; COMDAT (pick any)
.text:00006678                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006678
.text:00006678 ; =============== S U B R O U T I N E =======================================
.text:00006678
.text:00006678 ; Attributes: bp-based frame
.text:00006678
.text:00006678 ; public: __thiscall CRecordVector<void *>::CRecordVector<void *>(void)
.text:00006678                 public ??0?$CRecordVector@PAX@@QAE@XZ
.text:00006678 ??0?$CRecordVector@PAX@@QAE@XZ proc near
.text:00006678                                         ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::CObjectVector<NArchive::NZip::CExtraSubBlock>(void)+11p
.text:00006678                                         ; CObjectVector<NArchive::NZip::CItemEx>::CObjectVector<NArchive::NZip::CItemEx>(void)+11p ...
.text:00006678
.text:00006678 var_4           = dword ptr -4
.text:00006678
.text:00006678                 push    ebp
.text:00006679                 mov     ebp, esp
.text:0000667B                 push    ecx
.text:0000667C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006683                 mov     [ebp+var_4], ecx
.text:00006686                 mov     eax, [ebp+var_4]
.text:00006689                 mov     dword ptr [eax], 0
.text:0000668F                 mov     ecx, [ebp+var_4]
.text:00006692                 mov     dword ptr [ecx+4], 0
.text:00006699                 mov     edx, [ebp+var_4]
.text:0000669C                 mov     dword ptr [edx+8], 0
.text:000066A3                 mov     eax, [ebp+var_4]
.text:000066A6                 mov     esp, ebp
.text:000066A8                 pop     ebp
.text:000066A9                 retn
.text:000066A9 ??0?$CRecordVector@PAX@@QAE@XZ endp
.text:000066A9
.text:000066A9 ; ---------------------------------------------------------------------------
.text:000066AA                 align 4
.text:000066AA _text           ends
.text:000066AA
.text:000066AC ; ===========================================================================
.text:000066AC
.text:000066AC ; Segment type: Pure code
.text:000066AC ; Segment permissions: Read/Execute
.text:000066AC _text           segment para public 'CODE' use32
.text:000066AC                 assume cs:_text
.text:000066AC                 ;org 66ACh
.text:000066AC ; COMDAT (pick any)
.text:000066AC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000066AC
.text:000066AC ; =============== S U B R O U T I N E =======================================
.text:000066AC
.text:000066AC ; Attributes: bp-based frame
.text:000066AC
.text:000066AC ; public: unsigned int __thiscall CRecordVector<void *>::Size(void)const
.text:000066AC                 public ?Size@?$CRecordVector@PAX@@QBEIXZ
.text:000066AC ?Size@?$CRecordVector@PAX@@QBEIXZ proc near
.text:000066AC                                         ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::Size(void)+11p
.text:000066AC                                         ; CObjectVector<NArchive::NZip::CExtraSubBlock>::~CObjectVector<NArchive::NZip::CExtraSubBlock>(void)+46p ...
.text:000066AC
.text:000066AC var_4           = dword ptr -4
.text:000066AC
.text:000066AC                 push    ebp
.text:000066AD                 mov     ebp, esp
.text:000066AF                 push    ecx
.text:000066B0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000066B7                 mov     [ebp+var_4], ecx
.text:000066BA                 mov     eax, [ebp+var_4]
.text:000066BD                 mov     eax, [eax+4]
.text:000066C0                 mov     esp, ebp
.text:000066C2                 pop     ebp
.text:000066C3                 retn
.text:000066C3 ?Size@?$CRecordVector@PAX@@QBEIXZ endp
.text:000066C3
.text:000066C3 _text           ends
.text:000066C3
.text:000066C4 ; ===========================================================================
.text:000066C4
.text:000066C4 ; Segment type: Pure code
.text:000066C4 ; Segment permissions: Read/Execute
.text:000066C4 _text           segment para public 'CODE' use32
.text:000066C4                 assume cs:_text
.text:000066C4                 ;org 66C4h
.text:000066C4 ; COMDAT (pick any)
.text:000066C4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000066C4
.text:000066C4 ; =============== S U B R O U T I N E =======================================
.text:000066C4
.text:000066C4 ; Attributes: bp-based frame
.text:000066C4
.text:000066C4 ; public: bool __thiscall CRecordVector<void *>::IsEmpty(void)const
.text:000066C4                 public ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ
.text:000066C4 ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ proc near
.text:000066C4                                         ; CODE XREF: CObjectVector<NArchive::NZip::CItemEx>::IsEmpty(void)+11p
.text:000066C4
.text:000066C4 var_4           = dword ptr -4
.text:000066C4
.text:000066C4                 push    ebp
.text:000066C5                 mov     ebp, esp
.text:000066C7                 push    ecx
.text:000066C8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000066CF                 mov     [ebp+var_4], ecx
.text:000066D2                 mov     eax, [ebp+var_4]
.text:000066D5                 xor     ecx, ecx
.text:000066D7                 cmp     dword ptr [eax+4], 0
.text:000066DB                 setz    cl
.text:000066DE                 mov     al, cl
.text:000066E0                 mov     esp, ebp
.text:000066E2                 pop     ebp
.text:000066E3                 retn
.text:000066E3 ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ endp
.text:000066E3
.text:000066E3 _text           ends
.text:000066E3
.text:000066E4 ; ===========================================================================
.text:000066E4
.text:000066E4 ; Segment type: Pure code
.text:000066E4 ; Segment permissions: Read/Execute
.text:000066E4 _text           segment para public 'CODE' use32
.text:000066E4                 assume cs:_text
.text:000066E4                 ;org 66E4h
.text:000066E4 ; COMDAT (pick any)
.text:000066E4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000066E4
.text:000066E4 ; =============== S U B R O U T I N E =======================================
.text:000066E4
.text:000066E4 ; Attributes: bp-based frame
.text:000066E4
.text:000066E4 ; public: void __thiscall CRecordVector<void *>::Reserve(unsigned int)
.text:000066E4                 public ?Reserve@?$CRecordVector@PAX@@QAEXI@Z
.text:000066E4 ?Reserve@?$CRecordVector@PAX@@QAEXI@Z proc near
.text:000066E4                                         ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::operator=(CObjectVector<NArchive::NZip::CExtraSubBlock> const &)+69p
.text:000066E4
.text:000066E4 var_10          = dword ptr -10h
.text:000066E4 var_C           = dword ptr -0Ch
.text:000066E4 Dst             = dword ptr -8
.text:000066E4 var_4           = dword ptr -4
.text:000066E4 arg_0           = dword ptr  8
.text:000066E4
.text:000066E4                 push    ebp
.text:000066E5                 mov     ebp, esp
.text:000066E7                 sub     esp, 10h
.text:000066EA                 mov     eax, 0CCCCCCCCh
.text:000066EF                 mov     [ebp+var_10], eax
.text:000066F2                 mov     [ebp+var_C], eax
.text:000066F5                 mov     [ebp+Dst], eax
.text:000066F8                 mov     [ebp+var_4], eax
.text:000066FB                 mov     [ebp+var_4], ecx
.text:000066FE                 mov     eax, [ebp+var_4]
.text:00006701                 mov     ecx, [ebp+arg_0]
.text:00006704                 cmp     ecx, [eax+8]
.text:00006707                 jbe     short loc_6778
.text:00006709                 xor     ecx, ecx
.text:0000670B                 mov     eax, [ebp+arg_0]
.text:0000670E                 mov     edx, 4
.text:00006713                 mul     edx
.text:00006715                 seto    cl
.text:00006718                 neg     ecx
.text:0000671A                 or      ecx, eax
.text:0000671C                 push    ecx             ; unsigned int
.text:0000671D                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00006722                 add     esp, 4
.text:00006725                 mov     [ebp+var_C], eax
.text:00006728                 mov     eax, [ebp+var_C]
.text:0000672B                 mov     [ebp+Dst], eax
.text:0000672E                 mov     ecx, [ebp+var_4]
.text:00006731                 cmp     dword ptr [ecx+4], 0
.text:00006735                 jz      short loc_6753
.text:00006737                 mov     edx, [ebp+var_4]
.text:0000673A                 mov     eax, [edx+4]
.text:0000673D                 shl     eax, 2
.text:00006740                 push    eax             ; Size
.text:00006741                 mov     ecx, [ebp+var_4]
.text:00006744                 mov     edx, [ecx]
.text:00006746                 push    edx             ; Src
.text:00006747                 mov     eax, [ebp+Dst]
.text:0000674A                 push    eax             ; Dst
.text:0000674B                 call    _memcpy
.text:00006750                 add     esp, 0Ch
.text:00006753
.text:00006753 loc_6753:                               ; CODE XREF: CRecordVector<void *>::Reserve(uint)+51j
.text:00006753                 mov     ecx, [ebp+var_4]
.text:00006756                 mov     edx, [ecx]
.text:00006758                 mov     [ebp+var_10], edx
.text:0000675B                 mov     eax, [ebp+var_10]
.text:0000675E                 push    eax             ; void *
.text:0000675F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006764                 add     esp, 4
.text:00006767                 mov     ecx, [ebp+var_4]
.text:0000676A                 mov     edx, [ebp+Dst]
.text:0000676D                 mov     [ecx], edx
.text:0000676F                 mov     eax, [ebp+var_4]
.text:00006772                 mov     ecx, [ebp+arg_0]
.text:00006775                 mov     [eax+8], ecx
.text:00006778
.text:00006778 loc_6778:                               ; CODE XREF: CRecordVector<void *>::Reserve(uint)+23j
.text:00006778                 add     esp, 10h
.text:0000677B                 cmp     ebp, esp
.text:0000677D                 call    __RTC_CheckEsp
.text:00006782                 mov     esp, ebp
.text:00006784                 pop     ebp
.text:00006785                 retn    4
.text:00006785 ?Reserve@?$CRecordVector@PAX@@QAEXI@Z endp
.text:00006785
.text:00006785 _text           ends
.text:00006785
.text:00006788 ; ===========================================================================
.text:00006788
.text:00006788 ; Segment type: Pure code
.text:00006788 ; Segment permissions: Read/Execute
.text:00006788 _text           segment para public 'CODE' use32
.text:00006788                 assume cs:_text
.text:00006788                 ;org 6788h
.text:00006788 ; COMDAT (pick any)
.text:00006788                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006788
.text:00006788 ; =============== S U B R O U T I N E =======================================
.text:00006788
.text:00006788 ; Attributes: bp-based frame
.text:00006788
.text:00006788 ; public: __thiscall CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00006788                 public ??1?$CRecordVector@PAX@@QAE@XZ
.text:00006788 ??1?$CRecordVector@PAX@@QAE@XZ proc near
.text:00006788                                         ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::~CObjectVector<NArchive::NZip::CExtraSubBlock>(void)+9Cp
.text:00006788                                         ; __unwindfunclet$??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ$0+3j ...
.text:00006788
.text:00006788 var_8           = dword ptr -8
.text:00006788 var_4           = dword ptr -4
.text:00006788
.text:00006788                 push    ebp
.text:00006789                 mov     ebp, esp
.text:0000678B                 sub     esp, 8
.text:0000678E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006795                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000679C                 mov     [ebp+var_4], ecx
.text:0000679F                 mov     eax, [ebp+var_4]
.text:000067A2                 mov     ecx, [eax]
.text:000067A4                 mov     [ebp+var_8], ecx
.text:000067A7                 mov     edx, [ebp+var_8]
.text:000067AA                 push    edx             ; void *
.text:000067AB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000067B0                 add     esp, 4
.text:000067B3                 add     esp, 8
.text:000067B6                 cmp     ebp, esp
.text:000067B8                 call    __RTC_CheckEsp
.text:000067BD                 mov     esp, ebp
.text:000067BF                 pop     ebp
.text:000067C0                 retn
.text:000067C0 ??1?$CRecordVector@PAX@@QAE@XZ endp
.text:000067C0
.text:000067C0 ; ---------------------------------------------------------------------------
.text:000067C1                 align 4
.text:000067C1 _text           ends
.text:000067C1
.text:000067C4 ; ===========================================================================
.text:000067C4
.text:000067C4 ; Segment type: Pure code
.text:000067C4 ; Segment permissions: Read/Execute
.text:000067C4 _text           segment para public 'CODE' use32
.text:000067C4                 assume cs:_text
.text:000067C4                 ;org 67C4h
.text:000067C4 ; COMDAT (pick any)
.text:000067C4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000067C4
.text:000067C4 ; =============== S U B R O U T I N E =======================================
.text:000067C4
.text:000067C4 ; Attributes: bp-based frame
.text:000067C4
.text:000067C4 ; public: void __thiscall CRecordVector<void *>::Clear(void)
.text:000067C4                 public ?Clear@?$CRecordVector@PAX@@QAEXXZ
.text:000067C4 ?Clear@?$CRecordVector@PAX@@QAEXXZ proc near
.text:000067C4                                         ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::Clear(void)+6Fp
.text:000067C4                                         ; CObjectVector<NArchive::NZip::CItemEx>::Clear(void)+6Fp
.text:000067C4
.text:000067C4 var_4           = dword ptr -4
.text:000067C4
.text:000067C4                 push    ebp
.text:000067C5                 mov     ebp, esp
.text:000067C7                 push    ecx
.text:000067C8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000067CF                 mov     [ebp+var_4], ecx
.text:000067D2                 mov     eax, [ebp+var_4]
.text:000067D5                 mov     dword ptr [eax+4], 0
.text:000067DC                 mov     esp, ebp
.text:000067DE                 pop     ebp
.text:000067DF                 retn
.text:000067DF ?Clear@?$CRecordVector@PAX@@QAEXXZ endp
.text:000067DF
.text:000067DF _text           ends
.text:000067DF
.text:000067E0 ; ===========================================================================
.text:000067E0
.text:000067E0 ; Segment type: Pure code
.text:000067E0 ; Segment permissions: Read/Execute
.text:000067E0 _text           segment para public 'CODE' use32
.text:000067E0                 assume cs:_text
.text:000067E0                 ;org 67E0h
.text:000067E0 ; COMDAT (pick any)
.text:000067E0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000067E0
.text:000067E0 ; =============== S U B R O U T I N E =======================================
.text:000067E0
.text:000067E0 ; Attributes: bp-based frame
.text:000067E0
.text:000067E0 ; public: unsigned int __thiscall CRecordVector<void *>::Add(void * const)
.text:000067E0                 public ?Add@?$CRecordVector@PAX@@QAEIQAX@Z
.text:000067E0 ?Add@?$CRecordVector@PAX@@QAEIQAX@Z proc near
.text:000067E0                                         ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::Add(NArchive::NZip::CExtraSubBlock const &)+7Fp
.text:000067E0                                         ; CObjectVector<NArchive::NZip::CItemEx>::Add(NArchive::NZip::CItemEx const &)+7Fp
.text:000067E0
.text:000067E0 var_8           = dword ptr -8
.text:000067E0 var_4           = dword ptr -4
.text:000067E0 arg_0           = dword ptr  8
.text:000067E0
.text:000067E0                 push    ebp
.text:000067E1                 mov     ebp, esp
.text:000067E3                 sub     esp, 8
.text:000067E6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000067ED                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000067F4                 mov     [ebp+var_4], ecx
.text:000067F7                 mov     ecx, [ebp+var_4]
.text:000067FA                 call    ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition(void)
.text:000067FF                 mov     eax, [ebp+var_4]
.text:00006802                 mov     ecx, [eax+4]
.text:00006805                 mov     edx, [ebp+var_4]
.text:00006808                 mov     eax, [edx]
.text:0000680A                 mov     edx, [ebp+arg_0]
.text:0000680D                 mov     [eax+ecx*4], edx
.text:00006810                 mov     eax, [ebp+var_4]
.text:00006813                 mov     ecx, [eax+4]
.text:00006816                 mov     [ebp+var_8], ecx
.text:00006819                 mov     edx, [ebp+var_4]
.text:0000681C                 mov     eax, [edx+4]
.text:0000681F                 add     eax, 1
.text:00006822                 mov     ecx, [ebp+var_4]
.text:00006825                 mov     [ecx+4], eax
.text:00006828                 mov     eax, [ebp+var_8]
.text:0000682B                 add     esp, 8
.text:0000682E                 cmp     ebp, esp
.text:00006830                 call    __RTC_CheckEsp
.text:00006835                 mov     esp, ebp
.text:00006837                 pop     ebp
.text:00006838                 retn    4
.text:00006838 ?Add@?$CRecordVector@PAX@@QAEIQAX@Z endp
.text:00006838
.text:00006838 ; ---------------------------------------------------------------------------
.text:0000683B                 align 4
.text:0000683B _text           ends
.text:0000683B
.text:0000683C ; ===========================================================================
.text:0000683C
.text:0000683C ; Segment type: Pure code
.text:0000683C ; Segment permissions: Read/Execute
.text:0000683C _text           segment para public 'CODE' use32
.text:0000683C                 assume cs:_text
.text:0000683C                 ;org 683Ch
.text:0000683C ; COMDAT (pick any)
.text:0000683C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000683C
.text:0000683C ; =============== S U B R O U T I N E =======================================
.text:0000683C
.text:0000683C ; Attributes: bp-based frame
.text:0000683C
.text:0000683C ; public: void __thiscall CRecordVector<void *>::AddInReserved(void * const)
.text:0000683C                 public ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z
.text:0000683C ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z proc near
.text:0000683C                                         ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::operator=(CObjectVector<NArchive::NZip::CExtraSubBlock> const &)+D7p
.text:0000683C                                         ; CObjectVector<NArchive::NZip::CExtraSubBlock>::CObjectVector<NArchive::NZip::CExtraSubBlock>(CObjectVector<NArchive::NZip::CExtraSubBlock> const &)+C8p
.text:0000683C
.text:0000683C var_4           = dword ptr -4
.text:0000683C arg_0           = dword ptr  8
.text:0000683C
.text:0000683C                 push    ebp
.text:0000683D                 mov     ebp, esp
.text:0000683F                 push    ecx
.text:00006840                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006847                 mov     [ebp+var_4], ecx
.text:0000684A                 mov     eax, [ebp+var_4]
.text:0000684D                 mov     ecx, [eax+4]
.text:00006850                 mov     edx, [ebp+var_4]
.text:00006853                 mov     eax, [edx]
.text:00006855                 mov     edx, [ebp+arg_0]
.text:00006858                 mov     [eax+ecx*4], edx
.text:0000685B                 mov     eax, [ebp+var_4]
.text:0000685E                 mov     ecx, [eax+4]
.text:00006861                 add     ecx, 1
.text:00006864                 mov     edx, [ebp+var_4]
.text:00006867                 mov     [edx+4], ecx
.text:0000686A                 mov     esp, ebp
.text:0000686C                 pop     ebp
.text:0000686D                 retn    4
.text:0000686D ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z endp
.text:0000686D
.text:0000686D _text           ends
.text:0000686D
.text:00006870 ; ===========================================================================
.text:00006870
.text:00006870 ; Segment type: Pure code
.text:00006870 ; Segment permissions: Read/Execute
.text:00006870 _text           segment para public 'CODE' use32
.text:00006870                 assume cs:_text
.text:00006870                 ;org 6870h
.text:00006870 ; COMDAT (pick any)
.text:00006870                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006870
.text:00006870 ; =============== S U B R O U T I N E =======================================
.text:00006870
.text:00006870 ; Attributes: bp-based frame
.text:00006870
.text:00006870 ; public: void * const & __thiscall CRecordVector<void *>::operator[](unsigned int)const
.text:00006870                 public ??A?$CRecordVector@PAX@@QBEABQAXI@Z
.text:00006870 ??A?$CRecordVector@PAX@@QBEABQAXI@Z proc near
.text:00006870                                         ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::operator[](uint)+15p
.text:00006870                                         ; CObjectVector<NArchive::NZip::CItemEx>::operator[](uint)+15p
.text:00006870
.text:00006870 var_4           = dword ptr -4
.text:00006870 arg_0           = dword ptr  8
.text:00006870
.text:00006870                 push    ebp
.text:00006871                 mov     ebp, esp
.text:00006873                 push    ecx
.text:00006874                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000687B                 mov     [ebp+var_4], ecx
.text:0000687E                 mov     eax, [ebp+var_4]
.text:00006881                 mov     ecx, [eax]
.text:00006883                 mov     edx, [ebp+arg_0]
.text:00006886                 lea     eax, [ecx+edx*4]
.text:00006889                 mov     esp, ebp
.text:0000688B                 pop     ebp
.text:0000688C                 retn    4
.text:0000688C ??A?$CRecordVector@PAX@@QBEABQAXI@Z endp
.text:0000688C
.text:0000688C ; ---------------------------------------------------------------------------
.text:0000688F                 align 10h
.text:0000688F _text           ends
.text:0000688F
.text:00006890 ; ===========================================================================
.text:00006890
.text:00006890 ; Segment type: Pure code
.text:00006890 ; Segment permissions: Read/Execute
.text:00006890 _text           segment para public 'CODE' use32
.text:00006890                 assume cs:_text
.text:00006890                 ;org 6890h
.text:00006890 ; COMDAT (pick any)
.text:00006890                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006890
.text:00006890 ; =============== S U B R O U T I N E =======================================
.text:00006890
.text:00006890 ; Attributes: bp-based frame
.text:00006890
.text:00006890 ; public: void * & __thiscall CRecordVector<void *>::operator[](unsigned int)
.text:00006890                 public ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
.text:00006890 ??A?$CRecordVector@PAX@@QAEAAPAXI@Z proc near
.text:00006890                                         ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::~CObjectVector<NArchive::NZip::CExtraSubBlock>(void)+64p
.text:00006890                                         ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Clear(void)+3Ep ...
.text:00006890
.text:00006890 var_4           = dword ptr -4
.text:00006890 arg_0           = dword ptr  8
.text:00006890
.text:00006890                 push    ebp
.text:00006891                 mov     ebp, esp
.text:00006893                 push    ecx
.text:00006894                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000689B                 mov     [ebp+var_4], ecx
.text:0000689E                 mov     eax, [ebp+var_4]
.text:000068A1                 mov     ecx, [eax]
.text:000068A3                 mov     edx, [ebp+arg_0]
.text:000068A6                 lea     eax, [ecx+edx*4]
.text:000068A9                 mov     esp, ebp
.text:000068AB                 pop     ebp
.text:000068AC                 retn    4
.text:000068AC ??A?$CRecordVector@PAX@@QAEAAPAXI@Z endp
.text:000068AC
.text:000068AC ; ---------------------------------------------------------------------------
.text:000068AF                 align 10h
.text:000068AF _text           ends
.text:000068AF
.text:000068B0 ; ===========================================================================
.text:000068B0
.text:000068B0 ; Segment type: Pure code
.text:000068B0 ; Segment permissions: Read/Execute
.text:000068B0 _text           segment para public 'CODE' use32
.text:000068B0                 assume cs:_text
.text:000068B0                 ;org 68B0h
.text:000068B0 ; COMDAT (pick any)
.text:000068B0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000068B0
.text:000068B0 ; =============== S U B R O U T I N E =======================================
.text:000068B0
.text:000068B0 ; Attributes: bp-based frame
.text:000068B0
.text:000068B0 ; public: __thiscall CBuffer<unsigned char>::CBuffer<unsigned char>(class CBuffer<unsigned char> const &)
.text:000068B0                 public ??0?$CBuffer@E@@QAE@ABV0@@Z
.text:000068B0 ??0?$CBuffer@E@@QAE@ABV0@@Z proc near   ; CODE XREF: NArchive::NZip::CExtraSubBlock::CExtraSubBlock(NArchive::NZip::CExtraSubBlock const &)+27p
.text:000068B0                                         ; NArchive::NZip::CItem::CItem(NArchive::NZip::CItem const &)+9Dp
.text:000068B0
.text:000068B0 var_C           = dword ptr -0Ch
.text:000068B0 Size            = dword ptr -8
.text:000068B0 var_4           = dword ptr -4
.text:000068B0 arg_0           = dword ptr  8
.text:000068B0
.text:000068B0                 push    ebp
.text:000068B1                 mov     ebp, esp
.text:000068B3                 sub     esp, 0Ch
.text:000068B6                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000068BD                 mov     [ebp+Size], 0CCCCCCCCh
.text:000068C4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000068CB                 mov     [ebp+var_4], ecx
.text:000068CE                 mov     eax, [ebp+var_4]
.text:000068D1                 mov     dword ptr [eax], 0
.text:000068D7                 mov     ecx, [ebp+var_4]
.text:000068DA                 mov     dword ptr [ecx+4], 0
.text:000068E1                 mov     edx, [ebp+arg_0]
.text:000068E4                 mov     eax, [edx+4]
.text:000068E7                 mov     [ebp+Size], eax
.text:000068EA                 cmp     [ebp+Size], 0
.text:000068EE                 jz      short loc_6928
.text:000068F0                 mov     ecx, [ebp+Size]
.text:000068F3                 push    ecx             ; unsigned int
.text:000068F4                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000068F9                 add     esp, 4
.text:000068FC                 mov     [ebp+var_C], eax
.text:000068FF                 mov     edx, [ebp+var_4]
.text:00006902                 mov     eax, [ebp+var_C]
.text:00006905                 mov     [edx], eax
.text:00006907                 mov     ecx, [ebp+Size]
.text:0000690A                 push    ecx             ; Size
.text:0000690B                 mov     edx, [ebp+arg_0]
.text:0000690E                 mov     eax, [edx]
.text:00006910                 push    eax             ; Src
.text:00006911                 mov     ecx, [ebp+var_4]
.text:00006914                 mov     edx, [ecx]
.text:00006916                 push    edx             ; Dst
.text:00006917                 call    _memcpy
.text:0000691C                 add     esp, 0Ch
.text:0000691F                 mov     eax, [ebp+var_4]
.text:00006922                 mov     ecx, [ebp+Size]
.text:00006925                 mov     [eax+4], ecx
.text:00006928
.text:00006928 loc_6928:                               ; CODE XREF: CBuffer<uchar>::CBuffer<uchar>(CBuffer<uchar> const &)+3Ej
.text:00006928                 mov     eax, [ebp+var_4]
.text:0000692B                 add     esp, 0Ch
.text:0000692E                 cmp     ebp, esp
.text:00006930                 call    __RTC_CheckEsp
.text:00006935                 mov     esp, ebp
.text:00006937                 pop     ebp
.text:00006938                 retn    4
.text:00006938 ??0?$CBuffer@E@@QAE@ABV0@@Z endp
.text:00006938
.text:00006938 ; ---------------------------------------------------------------------------
.text:0000693B                 align 4
.text:0000693B _text           ends
.text:0000693B
.text:0000693C ; ===========================================================================
.text:0000693C
.text:0000693C ; Segment type: Pure code
.text:0000693C ; Segment permissions: Read/Execute
.text:0000693C _text           segment para public 'CODE' use32
.text:0000693C                 assume cs:_text
.text:0000693C                 ;org 693Ch
.text:0000693C ; COMDAT (pick any)
.text:0000693C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000693C
.text:0000693C ; =============== S U B R O U T I N E =======================================
.text:0000693C
.text:0000693C ; Attributes: bp-based frame
.text:0000693C
.text:0000693C ; int __stdcall CBuffer<unsigned char>::CopyFrom(void *Src, size_t Size)
.text:0000693C                 public ?CopyFrom@?$CBuffer@E@@QAEXPBEI@Z
.text:0000693C ?CopyFrom@?$CBuffer@E@@QAEXPBEI@Z proc near
.text:0000693C                                         ; CODE XREF: CBuffer<uchar>::operator=(CBuffer<uchar> const &)+29p
.text:0000693C
.text:0000693C var_4           = dword ptr -4
.text:0000693C Src             = dword ptr  8
.text:0000693C Size            = dword ptr  0Ch
.text:0000693C
.text:0000693C                 push    ebp
.text:0000693D                 mov     ebp, esp
.text:0000693F                 push    ecx
.text:00006940                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006947                 mov     [ebp+var_4], ecx
.text:0000694A                 mov     eax, [ebp+Size]
.text:0000694D                 push    eax
.text:0000694E                 mov     ecx, [ebp+var_4]
.text:00006951                 call    ?Alloc@?$CBuffer@E@@QAEXI@Z ; CBuffer<uchar>::Alloc(uint)
.text:00006956                 cmp     [ebp+Size], 0
.text:0000695A                 jz      short loc_6972
.text:0000695C                 mov     ecx, [ebp+Size]
.text:0000695F                 push    ecx             ; Size
.text:00006960                 mov     edx, [ebp+Src]
.text:00006963                 push    edx             ; Src
.text:00006964                 mov     eax, [ebp+var_4]
.text:00006967                 mov     ecx, [eax]
.text:00006969                 push    ecx             ; Dst
.text:0000696A                 call    _memcpy
.text:0000696F                 add     esp, 0Ch
.text:00006972
.text:00006972 loc_6972:                               ; CODE XREF: CBuffer<uchar>::CopyFrom(uchar const *,uint)+1Ej
.text:00006972                 add     esp, 4
.text:00006975                 cmp     ebp, esp
.text:00006977                 call    __RTC_CheckEsp
.text:0000697C                 mov     esp, ebp
.text:0000697E                 pop     ebp
.text:0000697F                 retn    8
.text:0000697F ?CopyFrom@?$CBuffer@E@@QAEXPBEI@Z endp
.text:0000697F
.text:0000697F ; ---------------------------------------------------------------------------
.text:00006982                 align 4
.text:00006982 _text           ends
.text:00006982
.text:00006984 ; ===========================================================================
.text:00006984
.text:00006984 ; Segment type: Pure code
.text:00006984 ; Segment permissions: Read/Execute
.text:00006984 _text           segment para public 'CODE' use32
.text:00006984                 assume cs:_text
.text:00006984                 ;org 6984h
.text:00006984 ; COMDAT (pick any)
.text:00006984                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006984
.text:00006984 ; =============== S U B R O U T I N E =======================================
.text:00006984
.text:00006984 ; Attributes: bp-based frame
.text:00006984
.text:00006984 ; public: __thiscall CObjectVector<struct NArchive::NZip::CExtraSubBlock>::CObjectVector<struct NArchive::NZip::CExtraSubBlock>(class CObjectVector<struct NArchive::NZip::CExtraSubBlock> const &)
.text:00006984                 public ??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z
.text:00006984 ??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z proc near
.text:00006984                                         ; CODE XREF: NArchive::NZip::CExtraBlock::CExtraBlock(NArchive::NZip::CExtraBlock const &)+15p
.text:00006984
.text:00006984 var_24          = dword ptr -24h
.text:00006984 var_20          = dword ptr -20h
.text:00006984 var_1C          = dword ptr -1Ch
.text:00006984 var_18          = dword ptr -18h
.text:00006984 var_14          = dword ptr -14h
.text:00006984 var_10          = dword ptr -10h
.text:00006984 var_C           = dword ptr -0Ch
.text:00006984 var_4           = dword ptr -4
.text:00006984 arg_0           = dword ptr  8
.text:00006984
.text:00006984                 push    ebp
.text:00006985                 mov     ebp, esp
.text:00006987                 push    0FFFFFFFFh
.text:00006989                 push    offset __ehhandler$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z
.text:0000698E                 mov     eax, large fs:0
.text:00006994                 push    eax
.text:00006995                 sub     esp, 18h
.text:00006998                 mov     eax, 0CCCCCCCCh
.text:0000699D                 mov     [ebp+var_24], eax
.text:000069A0                 mov     [ebp+var_20], eax
.text:000069A3                 mov     [ebp+var_1C], eax
.text:000069A6                 mov     [ebp+var_18], eax
.text:000069A9                 mov     [ebp+var_14], eax
.text:000069AC                 mov     [ebp+var_10], eax
.text:000069AF                 mov     eax, dword ptr ds:___security_cookie
.text:000069B4                 xor     eax, ebp
.text:000069B6                 push    eax
.text:000069B7                 lea     eax, [ebp+var_C]
.text:000069BA                 mov     large fs:0, eax
.text:000069C0                 mov     [ebp+var_10], ecx
.text:000069C3                 mov     ecx, [ebp+var_10]
.text:000069C6                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:000069CB                 mov     [ebp+var_4], 0
.text:000069D2                 mov     ecx, [ebp+arg_0]
.text:000069D5                 call    ?Size@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Size(void)
.text:000069DA                 mov     [ebp+var_14], eax
.text:000069DD                 mov     eax, [ebp+var_14]
.text:000069E0                 push    eax
.text:000069E1                 mov     ecx, [ebp+var_10]
.text:000069E4                 call    ?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z ; CRecordVector<void *>::ConstructReserve(uint)
.text:000069E9                 mov     [ebp+var_18], 0
.text:000069F0                 jmp     short loc_69FB
.text:000069F2 ; ---------------------------------------------------------------------------
.text:000069F2
.text:000069F2 loc_69F2:                               ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::CObjectVector<NArchive::NZip::CExtraSubBlock>(CObjectVector<NArchive::NZip::CExtraSubBlock> const &)+CDj
.text:000069F2                 mov     ecx, [ebp+var_18]
.text:000069F5                 add     ecx, 1
.text:000069F8                 mov     [ebp+var_18], ecx
.text:000069FB
.text:000069FB loc_69FB:                               ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::CObjectVector<NArchive::NZip::CExtraSubBlock>(CObjectVector<NArchive::NZip::CExtraSubBlock> const &)+6Cj
.text:000069FB                 mov     edx, [ebp+var_18]
.text:000069FE                 cmp     edx, [ebp+var_14]
.text:00006A01                 jnb     short loc_6A53
.text:00006A03                 push    0Ch             ; unsigned int
.text:00006A05                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00006A0A                 add     esp, 4
.text:00006A0D                 mov     [ebp+var_20], eax
.text:00006A10                 mov     byte ptr [ebp+var_4], 1
.text:00006A14                 cmp     [ebp+var_20], 0
.text:00006A18                 jz      short loc_6A34
.text:00006A1A                 mov     eax, [ebp+var_18]
.text:00006A1D                 push    eax
.text:00006A1E                 mov     ecx, [ebp+arg_0]
.text:00006A21                 call    ??A?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEABUCExtraSubBlock@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CExtraSubBlock>::operator[](uint)
.text:00006A26                 push    eax             ; struct NArchive::NZip::CExtraSubBlock *
.text:00006A27                 mov     ecx, [ebp+var_20] ; this
.text:00006A2A                 call    ??0CExtraSubBlock@NZip@NArchive@@QAE@ABU012@@Z ; NArchive::NZip::CExtraSubBlock::CExtraSubBlock(NArchive::NZip::CExtraSubBlock const &)
.text:00006A2F                 mov     [ebp+var_24], eax
.text:00006A32                 jmp     short loc_6A3B
.text:00006A34 ; ---------------------------------------------------------------------------
.text:00006A34
.text:00006A34 loc_6A34:                               ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::CObjectVector<NArchive::NZip::CExtraSubBlock>(CObjectVector<NArchive::NZip::CExtraSubBlock> const &)+94j
.text:00006A34                 mov     [ebp+var_24], 0
.text:00006A3B
.text:00006A3B loc_6A3B:                               ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::CObjectVector<NArchive::NZip::CExtraSubBlock>(CObjectVector<NArchive::NZip::CExtraSubBlock> const &)+AEj
.text:00006A3B                 mov     ecx, [ebp+var_24]
.text:00006A3E                 mov     [ebp+var_1C], ecx
.text:00006A41                 mov     byte ptr [ebp+var_4], 0
.text:00006A45                 mov     edx, [ebp+var_1C]
.text:00006A48                 push    edx
.text:00006A49                 mov     ecx, [ebp+var_10]
.text:00006A4C                 call    ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ; CRecordVector<void *>::AddInReserved(void * const)
.text:00006A51                 jmp     short loc_69F2
.text:00006A53 ; ---------------------------------------------------------------------------
.text:00006A53
.text:00006A53 loc_6A53:                               ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::CObjectVector<NArchive::NZip::CExtraSubBlock>(CObjectVector<NArchive::NZip::CExtraSubBlock> const &)+7Dj
.text:00006A53                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00006A5A                 mov     eax, [ebp+var_10]
.text:00006A5D                 mov     ecx, [ebp+var_C]
.text:00006A60                 mov     large fs:0, ecx
.text:00006A67                 pop     ecx
.text:00006A68                 add     esp, 24h
.text:00006A6B                 cmp     ebp, esp
.text:00006A6D                 call    __RTC_CheckEsp
.text:00006A72                 mov     esp, ebp
.text:00006A74                 pop     ebp
.text:00006A75                 retn    4
.text:00006A75 ??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z endp
.text:00006A75
.text:00006A75 _text           ends
.text:00006A75
.text$x:00006A78 ; ===========================================================================
.text$x:00006A78
.text$x:00006A78 ; Segment type: Pure code
.text$x:00006A78 ; Segment permissions: Read/Execute
.text$x:00006A78 _text$x         segment para public 'CODE' use32
.text$x:00006A78                 assume cs:_text$x
.text$x:00006A78                 ;org 6A78h
.text$x:00006A78 ; COMDAT (pick associative to section at 6984)
.text$x:00006A78                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00006A78
.text$x:00006A78 ; =============== S U B R O U T I N E =======================================
.text$x:00006A78
.text$x:00006A78
.text$x:00006A78 __unwindfunclet$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z$0 proc near
.text$x:00006A78                                         ; DATA XREF: .xdata$x:00006AACo
.text$x:00006A78                 mov     ecx, [ebp-10h]
.text$x:00006A7B                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:00006A7B __unwindfunclet$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z$0 endp
.text$x:00006A7B
.text$x:00006A80
.text$x:00006A80 ; =============== S U B R O U T I N E =======================================
.text$x:00006A80
.text$x:00006A80
.text$x:00006A80 __unwindfunclet$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z$1 proc near
.text$x:00006A80                                         ; DATA XREF: .xdata$x:00006AB4o
.text$x:00006A80                 mov     eax, [ebp-20h]
.text$x:00006A83                 push    eax             ; void *
.text$x:00006A84                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00006A89                 pop     ecx
.text$x:00006A8A                 retn
.text$x:00006A8A __unwindfunclet$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z$1 endp
.text$x:00006A8A
.text$x:00006A8B
.text$x:00006A8B ; =============== S U B R O U T I N E =======================================
.text$x:00006A8B
.text$x:00006A8B
.text$x:00006A8B __ehhandler$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z proc near
.text$x:00006A8B                                         ; DATA XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::CObjectVector<NArchive::NZip::CExtraSubBlock>(CObjectVector<NArchive::NZip::CExtraSubBlock> const &)+5o
.text$x:00006A8B
.text$x:00006A8B arg_4           = dword ptr  8
.text$x:00006A8B
.text$x:00006A8B                 mov     edx, [esp+arg_4]
.text$x:00006A8F                 lea     eax, [edx+0Ch]
.text$x:00006A92                 mov     ecx, [edx-1Ch]
.text$x:00006A95                 xor     ecx, eax
.text$x:00006A97                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006A9C                 mov     eax, offset __ehfuncinfo$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z
.text$x:00006AA1                 jmp     ___CxxFrameHandler3
.text$x:00006AA1 __ehhandler$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z endp
.text$x:00006AA1
.text$x:00006AA1 ; ---------------------------------------------------------------------------
.text$x:00006AA6                 align 4
.text$x:00006AA6 _text$x         ends
.text$x:00006AA6
.xdata$x:00006AA8 ; ===========================================================================
.xdata$x:00006AA8
.xdata$x:00006AA8 ; Segment type: Pure data
.xdata$x:00006AA8 ; Segment permissions: Read
.xdata$x:00006AA8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00006AA8                 assume cs:_xdata$x
.xdata$x:00006AA8                 ;org 6AA8h
.xdata$x:00006AA8 ; COMDAT (pick associative to section at 6984)
.xdata$x:00006AA8 __unwindtable$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z db 0FFh
.xdata$x:00006AA8                                         ; DATA XREF: .xdata$x:00006AC0o
.xdata$x:00006AA9                 db 0FFh
.xdata$x:00006AAA                 db 0FFh
.xdata$x:00006AAB                 db 0FFh
.xdata$x:00006AAC                 dd offset __unwindfunclet$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z$0
.xdata$x:00006AB0                 db    0
.xdata$x:00006AB1                 db    0
.xdata$x:00006AB2                 db    0
.xdata$x:00006AB3                 db    0
.xdata$x:00006AB4                 dd offset __unwindfunclet$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z$1
.xdata$x:00006AB8 __ehfuncinfo$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z db  22h ; "
.xdata$x:00006AB8                                         ; DATA XREF: __ehhandler$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z+11o
.xdata$x:00006AB9                 db    5
.xdata$x:00006ABA                 db  93h ; ô
.xdata$x:00006ABB                 db  19h
.xdata$x:00006ABC                 db    2
.xdata$x:00006ABD                 db    0
.xdata$x:00006ABE                 db    0
.xdata$x:00006ABF                 db    0
.xdata$x:00006AC0                 dd offset __unwindtable$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z
.xdata$x:00006AC4                 db    0
.xdata$x:00006AC5                 db    0
.xdata$x:00006AC6                 db    0
.xdata$x:00006AC7                 db    0
.xdata$x:00006AC8                 db    0
.xdata$x:00006AC9                 db    0
.xdata$x:00006ACA                 db    0
.xdata$x:00006ACB                 db    0
.xdata$x:00006ACC                 db    0
.xdata$x:00006ACD                 db    0
.xdata$x:00006ACE                 db    0
.xdata$x:00006ACF                 db    0
.xdata$x:00006AD0                 db    0
.xdata$x:00006AD1                 db    0
.xdata$x:00006AD2                 db    0
.xdata$x:00006AD3                 db    0
.xdata$x:00006AD4                 db    0
.xdata$x:00006AD5                 db    0
.xdata$x:00006AD6                 db    0
.xdata$x:00006AD7                 db    0
.xdata$x:00006AD8                 db    1
.xdata$x:00006AD9                 db    0
.xdata$x:00006ADA                 db    0
.xdata$x:00006ADB                 db    0
.xdata$x:00006ADB _xdata$x        ends
.xdata$x:00006ADB
.text:00006ADC ; ===========================================================================
.text:00006ADC
.text:00006ADC ; Segment type: Pure code
.text:00006ADC ; Segment permissions: Read/Execute
.text:00006ADC _text           segment para public 'CODE' use32
.text:00006ADC                 assume cs:_text
.text:00006ADC                 ;org 6ADCh
.text:00006ADC ; COMDAT (pick any)
.text:00006ADC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006ADC
.text:00006ADC ; =============== S U B R O U T I N E =======================================
.text:00006ADC
.text:00006ADC ; Attributes: bp-based frame
.text:00006ADC
.text:00006ADC ; private: void __thiscall CRecordVector<void *>::ReserveOnePosition(void)
.text:00006ADC                 public ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ
.text:00006ADC ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ proc near
.text:00006ADC                                         ; CODE XREF: CRecordVector<void *>::Add(void * const)+1Ap
.text:00006ADC
.text:00006ADC var_14          = dword ptr -14h
.text:00006ADC var_10          = dword ptr -10h
.text:00006ADC Dst             = dword ptr -0Ch
.text:00006ADC var_8           = dword ptr -8
.text:00006ADC var_4           = dword ptr -4
.text:00006ADC
.text:00006ADC                 push    ebp
.text:00006ADD                 mov     ebp, esp
.text:00006ADF                 sub     esp, 14h
.text:00006AE2                 mov     eax, 0CCCCCCCCh
.text:00006AE7                 mov     [ebp+var_14], eax
.text:00006AEA                 mov     [ebp+var_10], eax
.text:00006AED                 mov     [ebp+Dst], eax
.text:00006AF0                 mov     [ebp+var_8], eax
.text:00006AF3                 mov     [ebp+var_4], eax
.text:00006AF6                 mov     [ebp+var_4], ecx
.text:00006AF9                 mov     eax, [ebp+var_4]
.text:00006AFC                 mov     ecx, [ebp+var_4]
.text:00006AFF                 mov     edx, [eax+4]
.text:00006B02                 cmp     edx, [ecx+8]
.text:00006B05                 jnz     loc_6B90
.text:00006B0B                 mov     eax, [ebp+var_4]
.text:00006B0E                 mov     ecx, [eax+8]
.text:00006B11                 shr     ecx, 2
.text:00006B14                 mov     edx, [ebp+var_4]
.text:00006B17                 mov     eax, [edx+8]
.text:00006B1A                 lea     ecx, [eax+ecx+1]
.text:00006B1E                 mov     [ebp+var_8], ecx
.text:00006B21                 xor     ecx, ecx
.text:00006B23                 mov     eax, [ebp+var_8]
.text:00006B26                 mov     edx, 4
.text:00006B2B                 mul     edx
.text:00006B2D                 seto    cl
.text:00006B30                 neg     ecx
.text:00006B32                 or      ecx, eax
.text:00006B34                 push    ecx             ; unsigned int
.text:00006B35                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00006B3A                 add     esp, 4
.text:00006B3D                 mov     [ebp+var_10], eax
.text:00006B40                 mov     eax, [ebp+var_10]
.text:00006B43                 mov     [ebp+Dst], eax
.text:00006B46                 mov     ecx, [ebp+var_4]
.text:00006B49                 cmp     dword ptr [ecx+4], 0
.text:00006B4D                 jz      short loc_6B6B
.text:00006B4F                 mov     edx, [ebp+var_4]
.text:00006B52                 mov     eax, [edx+4]
.text:00006B55                 shl     eax, 2
.text:00006B58                 push    eax             ; Size
.text:00006B59                 mov     ecx, [ebp+var_4]
.text:00006B5C                 mov     edx, [ecx]
.text:00006B5E                 push    edx             ; Src
.text:00006B5F                 mov     eax, [ebp+Dst]
.text:00006B62                 push    eax             ; Dst
.text:00006B63                 call    _memcpy
.text:00006B68                 add     esp, 0Ch
.text:00006B6B
.text:00006B6B loc_6B6B:                               ; CODE XREF: CRecordVector<void *>::ReserveOnePosition(void)+71j
.text:00006B6B                 mov     ecx, [ebp+var_4]
.text:00006B6E                 mov     edx, [ecx]
.text:00006B70                 mov     [ebp+var_14], edx
.text:00006B73                 mov     eax, [ebp+var_14]
.text:00006B76                 push    eax             ; void *
.text:00006B77                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006B7C                 add     esp, 4
.text:00006B7F                 mov     ecx, [ebp+var_4]
.text:00006B82                 mov     edx, [ebp+Dst]
.text:00006B85                 mov     [ecx], edx
.text:00006B87                 mov     eax, [ebp+var_4]
.text:00006B8A                 mov     ecx, [ebp+var_8]
.text:00006B8D                 mov     [eax+8], ecx
.text:00006B90
.text:00006B90 loc_6B90:                               ; CODE XREF: CRecordVector<void *>::ReserveOnePosition(void)+29j
.text:00006B90                 add     esp, 14h
.text:00006B93                 cmp     ebp, esp
.text:00006B95                 call    __RTC_CheckEsp
.text:00006B9A                 mov     esp, ebp
.text:00006B9C                 pop     ebp
.text:00006B9D                 retn
.text:00006B9D ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ endp
.text:00006B9D
.text:00006B9D ; ---------------------------------------------------------------------------
.text:00006B9E                 align 10h
.text:00006B9E _text           ends
.text:00006B9E
.text:00006BA0 ; ===========================================================================
.text:00006BA0
.text:00006BA0 ; Segment type: Pure code
.text:00006BA0 ; Segment permissions: Read/Execute
.text:00006BA0 _text           segment para public 'CODE' use32
.text:00006BA0                 assume cs:_text
.text:00006BA0                 ;org 6BA0h
.text:00006BA0 ; COMDAT (pick any)
.text:00006BA0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006BA0
.text:00006BA0 ; =============== S U B R O U T I N E =======================================
.text:00006BA0
.text:00006BA0 ; Attributes: bp-based frame
.text:00006BA0
.text:00006BA0 ; public: void __thiscall CRecordVector<void *>::ConstructReserve(unsigned int)
.text:00006BA0                 public ?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z
.text:00006BA0 ?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z proc near
.text:00006BA0                                         ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::CObjectVector<NArchive::NZip::CExtraSubBlock>(CObjectVector<NArchive::NZip::CExtraSubBlock> const &)+60p
.text:00006BA0
.text:00006BA0 var_8           = dword ptr -8
.text:00006BA0 var_4           = dword ptr -4
.text:00006BA0 arg_0           = dword ptr  8
.text:00006BA0
.text:00006BA0                 push    ebp
.text:00006BA1                 mov     ebp, esp
.text:00006BA3                 sub     esp, 8
.text:00006BA6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006BAD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006BB4                 mov     [ebp+var_4], ecx
.text:00006BB7                 cmp     [ebp+arg_0], 0
.text:00006BBB                 jz      short loc_6BED
.text:00006BBD                 xor     ecx, ecx
.text:00006BBF                 mov     eax, [ebp+arg_0]
.text:00006BC2                 mov     edx, 4
.text:00006BC7                 mul     edx
.text:00006BC9                 seto    cl
.text:00006BCC                 neg     ecx
.text:00006BCE                 or      ecx, eax
.text:00006BD0                 push    ecx             ; unsigned int
.text:00006BD1                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00006BD6                 add     esp, 4
.text:00006BD9                 mov     [ebp+var_8], eax
.text:00006BDC                 mov     eax, [ebp+var_4]
.text:00006BDF                 mov     ecx, [ebp+var_8]
.text:00006BE2                 mov     [eax], ecx
.text:00006BE4                 mov     edx, [ebp+var_4]
.text:00006BE7                 mov     eax, [ebp+arg_0]
.text:00006BEA                 mov     [edx+8], eax
.text:00006BED
.text:00006BED loc_6BED:                               ; CODE XREF: CRecordVector<void *>::ConstructReserve(uint)+1Bj
.text:00006BED                 add     esp, 8
.text:00006BF0                 cmp     ebp, esp
.text:00006BF2                 call    __RTC_CheckEsp
.text:00006BF7                 mov     esp, ebp
.text:00006BF9                 pop     ebp
.text:00006BFA                 retn    4
.text:00006BFA ?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z endp
.text:00006BFA
.text:00006BFA _text           ends
.text:00006BFA
UNDEF:00006C00 ; ===========================================================================
UNDEF:00006C00
UNDEF:00006C00 ; Segment type: Externs
UNDEF:00006C00 ; UNDEF
UNDEF:00006C00                 extrn __RTC_Shutdown:near
UNDEF:00006C00                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00006C04                 extrn __RTC_InitBase:near
UNDEF:00006C04                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00006C08                 extrn __RTC_CheckEsp:near
UNDEF:00006C08                                         ; CODE XREF: NArchive::NZip::CInArchive::Open(IInStream *,unsigned __int64 const *)+4Fp
UNDEF:00006C08                                         ; NArchive::NZip::CInArchive::Open(IInStream *,unsigned __int64 const *)+84p ...
UNDEF:00006C0C                 extrn ___security_cookie:near ; DATA XREF: IsArc_Zip(x,x)+16r
UNDEF:00006C0C                                         ; NArchive::NZip::CInArchive::FindAndReadMarker(IInStream *,unsigned __int64 const *)+2Dr ...
UNDEF:00006C10 ; __fastcall __security_check_cookie(x)
UNDEF:00006C10                 extrn @__security_check_cookie@4:near
UNDEF:00006C10                                         ; CODE XREF: IsArc_Zip(x,x)+26Ep
UNDEF:00006C10                                         ; NArchive::NZip::CInArchive::ReadUInt64(void)+54p ...
UNDEF:00006C14 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00006C14                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00006C14                                         ; CODE XREF: IsArc_Zip(x,x)+261p
UNDEF:00006C14                                         ; NArchive::NZip::CInArchive::FindAndReadMarker(IInStream *,unsigned __int64 const *)+4EFp ...
UNDEF:00006C18 ; void *__cdecl _memmove(void *Dst, const void *Src, size_t Size)
UNDEF:00006C18                 extrn __imp__memmove:near
UNDEF:00006C18                                         ; CODE XREF: NArchive::NZip::CInArchive::FindAndReadMarker(IInStream *,unsigned __int64 const *)+4B1p
UNDEF:00006C18                                         ; DATA XREF: NArchive::NZip::CInArchive::FindAndReadMarker(IInStream *,unsigned __int64 const *)+4B1r
UNDEF:00006C1C ; __int32 __stdcall ReadStream(struct ISequentialInStream *, void *, unsigned int *)
UNDEF:00006C1C                 extrn ?ReadStream@@YGJPAUISequentialInStream@@PAXPAI@Z:near
UNDEF:00006C1C                                         ; CODE XREF: NArchive::NZip::CInArchive::FindAndReadMarker(IInStream *,unsigned __int64 const *)+B4p
UNDEF:00006C1C                                         ; NArchive::NZip::CInArchive::FindAndReadMarker(IInStream *,unsigned __int64 const *)+143p ...
UNDEF:00006C20                 extrn ___CxxFrameHandler3:near
UNDEF:00006C20                                         ; CODE XREF: __ehhandler$?FindAndReadMarker@CInArchive@NZip@NArchive@@AAEJPAUIInStream@@PB_K@Z+19j
UNDEF:00006C20                                         ; __ehhandler$?ReadBytes@CInArchive@NZip@NArchive@@AAEJPAXIPAI@Z+16j ...
UNDEF:00006C24 ; unsigned int __thiscall CInBufferBase::ReadBytes(CInBufferBase *__hidden this, unsigned __int8 *, unsigned int)
UNDEF:00006C24                 extrn ?ReadBytes@CInBufferBase@@QAEIPAEI@Z:near
UNDEF:00006C24                                         ; CODE XREF: NArchive::NZip::CInArchive::ReadBytes(void *,uint,uint *)+6Ap
UNDEF:00006C24                                         ; NArchive::NZip::CInArchive::SafeReadBytes(void *,uint)+42p
UNDEF:00006C28 ; const type_info::`vftable'
UNDEF:00006C28                 extrn ??_7type_info@@6B@:near
UNDEF:00006C28                                         ; DATA XREF: .data:CInBufferException `RTTI Type Descriptor'o
UNDEF:00006C28                                         ; .data:CSystemException `RTTI Type Descriptor'o ...
UNDEF:00006C2C ; __stdcall _CxxThrowException(x, x)
UNDEF:00006C2C                 extrn __CxxThrowException@8:near
UNDEF:00006C2C                                         ; CODE XREF: NArchive::NZip::CInArchive::SafeReadBytes(void *,uint)+B9p
UNDEF:00006C2C                                         ; NArchive::NZip::CInArchive::SafeReadBytes(void *,uint)+DAp ...
UNDEF:00006C30 ; unsigned int __thiscall CInBufferBase::Skip(CInBufferBase *__hidden this, unsigned int)
UNDEF:00006C30                 extrn ?Skip@CInBufferBase@@QAEII@Z:near
UNDEF:00006C30                                         ; CODE XREF: NArchive::NZip::CInArchive::Skip(uint)+2Cp
UNDEF:00006C34 ; void __thiscall AString::ReAlloc2(AString *__hidden this, unsigned int)
UNDEF:00006C34                 extrn ?ReAlloc2@AString@@AAEXI@Z:near
UNDEF:00006C34                                         ; CODE XREF: AString::GetBuf(uint)+20p
UNDEF:00006C38 ; int __cdecl strcmp(const char *Str1, const char *Str2)
UNDEF:00006C38                 extrn _strcmp:near      ; CODE XREF: operator!=(AString const &,AString const &)+34p
UNDEF:00006C3C ; public: __thiscall AString::AString(void)
UNDEF:00006C3C                 extrn ??0AString@@QAE@XZ:near
UNDEF:00006C3C                                         ; CODE XREF: NArchive::NZip::CLocalItem::CLocalItem(void)+33p
UNDEF:00006C40 ; void __cdecl operator delete(void *)
UNDEF:00006C40                 extrn ??3@YAXPAX@Z:near ; CODE XREF: __unwindfunclet$?CreateLimitedStream@CInArchive@NZip@NArchive@@QAEPAUISequentialInStream@@_K0@Z$0+4p
UNDEF:00006C40                                         ; AString::~AString(void)+23p ...
UNDEF:00006C44                 extrn __chkstk:near     ; CODE XREF: NArchive::NZip::CInArchive::ReadLocalItemDescriptor(NArchive::NZip::CItemEx &)+8p
UNDEF:00006C48 ; __int32 __stdcall ReadStream_FALSE(struct ISequentialInStream *, void *, unsigned int)
UNDEF:00006C48                 extrn ?ReadStream_FALSE@@YGJPAUISequentialInStream@@PAXI@Z:near
UNDEF:00006C48                                         ; CODE XREF: NArchive::NZip::CInArchive::TryEcd64(unsigned __int64,NArchive::NZip::CCdInfo &)+73p
UNDEF:00006C48                                         ; NArchive::NZip::CInArchive::FindCd(NArchive::NZip::CCdInfo &)+1C2p
UNDEF:00006C4C ; void __thiscall CInBufferBase::Init(CInBufferBase *__hidden this)
UNDEF:00006C4C                 extrn ?Init@CInBufferBase@@QAEXXZ:near
UNDEF:00006C4C                                         ; CODE XREF: NArchive::NZip::CInArchive::TryReadCd(CObjectVector<NArchive::NZip::CItemEx> &,unsigned __int64,unsigned __int64,NArchive::NZip::CProgressVirt *)+CEp
UNDEF:00006C4C                                         ; NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+56Bp
UNDEF:00006C50 ; void __thiscall CInBuffer::Free(CInBuffer *__hidden this)
UNDEF:00006C50                 extrn ?Free@CInBuffer@@QAEXXZ:near
UNDEF:00006C50                                         ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+F51p
UNDEF:00006C54 ; bool __thiscall CInBuffer::Create(CInBuffer *__hidden this, unsigned int)
UNDEF:00006C54                 extrn ?Create@CInBuffer@@QAE_NI@Z:near
UNDEF:00006C54                                         ; CODE XREF: NArchive::NZip::CInArchive::ReadHeaders2(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)+AAp
UNDEF:00006C58 ; void *__cdecl memset(void *Dst, int Val, size_t Size)
UNDEF:00006C58                 extrn _memset:near      ; CODE XREF: NArchive::NZip::CEcd64::CEcd64(void)+16p
UNDEF:00006C5C ; void *__cdecl operator new(unsigned int)
UNDEF:00006C5C                 extrn ??2@YAPAXI@Z:near ; CODE XREF: NArchive::NZip::CInArchive::CreateLimitedStream(unsigned __int64,unsigned __int64)+3Dp
UNDEF:00006C5C                                         ; CBuffer<uchar>::Alloc(uint)+34p ...
UNDEF:00006C60 ; public: virtual long __stdcall CLimitedSequentialInStream::Read(void *, unsigned int, unsigned int *)
UNDEF:00006C60                 extrn ?Read@CLimitedSequentialInStream@@UAGJPAXIPAI@Z:near
UNDEF:00006C60                                         ; DATA XREF: .rdata:000052FCo
UNDEF:00006C64                 extrn _IID_ISequentialInStream:near
UNDEF:00006C64                                         ; DATA XREF: CLimitedSequentialInStream::QueryInterface(_GUID const &,void * *):loc_54DCo
UNDEF:00006C68 ; const IID IID_IUnknown
UNDEF:00006C68                 extrn _IID_IUnknown:near
UNDEF:00006C68                                         ; DATA XREF: CLimitedSequentialInStream::QueryInterface(_GUID const &,void * *)+Co
UNDEF:00006C6C ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:00006C6C                 extrn _memcmp:near      ; CODE XREF: IsEqualGUID(x,x)+Dp
UNDEF:00006C70                 extrn __purecall:near   ; DATA XREF: .rdata:const ISequentialInStream::`vftable'o
UNDEF:00006C70                                         ; .rdata:000056A0o ...
UNDEF:00006C74 ; public: __thiscall AString::AString(class AString const &)
UNDEF:00006C74                 extrn ??0AString@@QAE@ABV0@@Z:near
UNDEF:00006C74                                         ; CODE XREF: NArchive::NZip::CLocalItem::CLocalItem(NArchive::NZip::CLocalItem const &)+9Ep
UNDEF:00006C78 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:00006C78                 extrn _memcpy:near      ; CODE XREF: CRecordVector<void *>::Reserve(uint)+67p
UNDEF:00006C78                                         ; CBuffer<uchar>::CBuffer<uchar>(CBuffer<uchar> const &)+67p ...
UNDEF:00006C78
UNDEF:00006C78
UNDEF:00006C78                 end