.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : 96A320035F4F761F9D97D16AC0CE8195
.text:00000000 ; Input CRC32 : 943BB02E
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\BranchMisc.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; __int32 __stdcall CBranchCoder::Init(CBranchCoder *this)
.text:00000000                 public ?Init@CBranchCoder@@UAGJXZ
.text:00000000 ?Init@CBranchCoder@@UAGJXZ proc near
.text:00000000
.text:00000000 this            = dword ptr  8
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 mov     eax, [ebp+this]
.text:00000006                 mov     dword ptr [eax+8], 0
.text:0000000D                 xor     eax, eax
.text:0000000F                 pop     ebp
.text:00000010                 retn    4
.text:00000010 ?Init@CBranchCoder@@UAGJXZ endp
.text:00000010
.text:00000010 ; ---------------------------------------------------------------------------
.text:00000013                 align 10h
.text:00000020
.text:00000020 ; =============== S U B R O U T I N E =======================================
.text:00000020
.text:00000020 ; Attributes: bp-based frame
.text:00000020
.text:00000020 ; public: virtual unsigned int __stdcall CBranchCoder::Filter(unsigned char *, unsigned int)
.text:00000020                 public ?Filter@CBranchCoder@@UAGIPAEI@Z
.text:00000020 ?Filter@CBranchCoder@@UAGIPAEI@Z proc near
.text:00000020
.text:00000020 var_4           = dword ptr -4
.text:00000020 arg_0           = dword ptr  8
.text:00000020 arg_4           = dword ptr  0Ch
.text:00000020 arg_8           = dword ptr  10h
.text:00000020
.text:00000020                 push    ebp
.text:00000021                 mov     ebp, esp
.text:00000023                 push    ecx
.text:00000024                 push    esi
.text:00000025                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000002C                 mov     esi, esp
.text:0000002E                 mov     eax, [ebp+arg_0]
.text:00000031                 mov     ecx, [eax+0Ch]
.text:00000034                 push    ecx
.text:00000035                 mov     edx, [ebp+arg_0]
.text:00000038                 mov     eax, [edx+8]
.text:0000003B                 push    eax
.text:0000003C                 mov     ecx, [ebp+arg_8]
.text:0000003F                 push    ecx
.text:00000040                 mov     edx, [ebp+arg_4]
.text:00000043                 push    edx
.text:00000044                 mov     eax, [ebp+arg_0]
.text:00000047                 mov     ecx, [eax+10h]
.text:0000004A                 call    ecx
.text:0000004C                 cmp     esi, esp
.text:0000004E                 call    __RTC_CheckEsp
.text:00000053                 mov     [ebp+var_4], eax
.text:00000056                 mov     edx, [ebp+arg_0]
.text:00000059                 mov     eax, [edx+8]
.text:0000005C                 add     eax, [ebp+var_4]
.text:0000005F                 mov     ecx, [ebp+arg_0]
.text:00000062                 mov     [ecx+8], eax
.text:00000065                 mov     eax, [ebp+var_4]
.text:00000068                 pop     esi
.text:00000069                 add     esp, 4
.text:0000006C                 cmp     ebp, esp
.text:0000006E                 call    __RTC_CheckEsp
.text:00000073                 mov     esp, ebp
.text:00000075                 pop     ebp
.text:00000076                 retn    0Ch
.text:00000076 ?Filter@CBranchCoder@@UAGIPAEI@Z endp
.text:00000076
.text:00000076 ; ---------------------------------------------------------------------------
.text:00000079                 align 4
.text:00000079 _text           ends
.text:00000079
.rtc$TMZ:0000007C ; ===========================================================================
.rtc$TMZ:0000007C
.rtc$TMZ:0000007C ; Segment type: Pure data
.rtc$TMZ:0000007C ; Segment permissions: Read
.rtc$TMZ:0000007C _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:0000007C                 assume cs:_rtc$TMZ
.rtc$TMZ:0000007C                 ;org 7Ch
.rtc$TMZ:0000007C ; COMDAT (pick any)
.rtc$TMZ:0000007C __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:0000007C _rtc$TMZ        ends
.rtc$TMZ:0000007C
.rtc$IMZ:00000080 ; ===========================================================================
.rtc$IMZ:00000080
.rtc$IMZ:00000080 ; Segment type: Pure data
.rtc$IMZ:00000080 ; Segment permissions: Read
.rtc$IMZ:00000080 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000080                 assume cs:_rtc$IMZ
.rtc$IMZ:00000080                 ;org 80h
.rtc$IMZ:00000080 ; COMDAT (pick any)
.rtc$IMZ:00000080 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000080 _rtc$IMZ        ends
.rtc$IMZ:00000080
UNDEF:00000090 ; ===========================================================================
UNDEF:00000090
UNDEF:00000090 ; Segment type: Externs
UNDEF:00000090 ; UNDEF
UNDEF:00000090                 extrn __RTC_Shutdown:near
UNDEF:00000090                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000094                 extrn __RTC_InitBase:near
UNDEF:00000094                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000098                 extrn __RTC_CheckEsp:near
UNDEF:00000098                                         ; CODE XREF: CBranchCoder::Filter(uchar *,uint)+2Ep
UNDEF:00000098                                         ; CBranchCoder::Filter(uchar *,uint)+4Ep
UNDEF:00000098
UNDEF:00000098
UNDEF:00000098                 end