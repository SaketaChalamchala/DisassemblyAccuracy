.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : 142ACC6E0EF353FBCE5644DB78E62057
.rdata:00000000 ; Input CRC32 : 6C7EEDA1
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\FileFind.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 _rdata          segment dword public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 ; char _SG67970[]
.rdata:00000000 $SG67970        db '::$DATA',0          ; DATA XREF: NWindows::NFile::NFind::CStreamInfo::IsMainStream(void)+Eo
.rdata:00000008 ; char _SG67977[]
.rdata:00000008 $SG67977        db ':$DATA',0           ; DATA XREF: NWindows::NFile::NFind::CStreamInfo::GetReducedName(void)+69o
.rdata:0000000F                 align 10h
.rdata:00000010 ; char _SG68052[]
.rdata:00000010 $SG68052        db ':$DATA',0           ; DATA XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+1E0o
.rdata:00000017                 align 4
.rdata:00000018 $SG68053:                               ; DATA XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *):loc_CF8o
.rdata:00000018                 unicode 0, <:$DATA>,0
.rdata:00000026                 align 4
.rdata:00000028 ; wchar_t _SG68101
.rdata:00000028 $SG68101        dd offset loc_2D+1      ; DATA XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+74Co
.rdata:00000028 _rdata          ends
.rdata:00000028
.text:0000002C ; ===========================================================================
.text:0000002C
.text:0000002C ; Segment type: Pure code
.text:0000002C ; Segment permissions: Read/Execute
.text:0000002C _text           segment para public 'CODE' use32
.text:0000002C                 assume cs:_text
.text:0000002C                 ;org 2Ch
.text:0000002C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000002C
.text:0000002C ; =============== S U B R O U T I N E =======================================
.text:0000002C
.text:0000002C ; Attributes: bp-based frame
.text:0000002C
.text:0000002C ; bool __thiscall NWindows::NFile::NFind::CFileInfo::IsDots(NWindows::NFile::NFind::CFileInfo *__hidden this)
.text:0000002C                 public ?IsDots@CFileInfo@NFind@NFile@NWindows@@QBE_NXZ
.text:0000002C ?IsDots@CFileInfo@NFind@NFile@NWindows@@QBE_NXZ proc near
.text:0000002C                                         ; CODE XREF: NWindows::NFile::NFind::CEnumerator::Next(NWindows::NFile::NFind::CFileInfo &)+28p
.text:0000002C
.text:0000002C var_8           = dword ptr -8
.text:0000002C var_4           = dword ptr -4
.text:0000002C
.text:0000002C                 push    ebp
.text:0000002D
.text:0000002D loc_2D:                                 ; DATA XREF: .rdata:$SG68101o
.text:0000002D                 mov     ebp, esp
.text:0000002F                 sub     esp, 8
.text:00000032                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000039                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000040                 mov     [ebp+var_4], ecx
.text:00000043                 mov     ecx, [ebp+var_4] ; this
.text:00000046                 call    ?IsDir@CFileInfoBase@NFind@NFile@NWindows@@QBE_NXZ ; NWindows::NFile::NFind::CFileInfoBase::IsDir(void)
.text:0000004B                 movzx   eax, al
.text:0000004E                 test    eax, eax
.text:00000050                 jz      short loc_64
.text:00000052                 mov     ecx, [ebp+var_4]
.text:00000055                 add     ecx, 28h ; '('  ; this
.text:00000058                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:0000005D                 movzx   ecx, al
.text:00000060                 test    ecx, ecx
.text:00000062                 jz      short loc_68
.text:00000064
.text:00000064 loc_64:                                 ; CODE XREF: NWindows::NFile::NFind::CFileInfo::IsDots(void)+24j
.text:00000064                 xor     al, al
.text:00000066                 jmp     short loc_C6
.text:00000068 ; ---------------------------------------------------------------------------
.text:00000068
.text:00000068 loc_68:                                 ; CODE XREF: NWindows::NFile::NFind::CFileInfo::IsDots(void)+36j
.text:00000068                 mov     ecx, [ebp+var_4]
.text:0000006B                 add     ecx, 28h ; '('
.text:0000006E                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00000073                 movzx   edx, word ptr [eax]
.text:00000076                 cmp     edx, 2Eh ; '.'
.text:00000079                 jz      short loc_7F
.text:0000007B                 xor     al, al
.text:0000007D                 jmp     short loc_C6
.text:0000007F ; ---------------------------------------------------------------------------
.text:0000007F
.text:0000007F loc_7F:                                 ; CODE XREF: NWindows::NFile::NFind::CFileInfo::IsDots(void)+4Dj
.text:0000007F                 mov     ecx, [ebp+var_4]
.text:00000082                 add     ecx, 28h ; '('  ; this
.text:00000085                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:0000008A                 cmp     eax, 1
.text:0000008D                 jz      short loc_BC
.text:0000008F                 mov     ecx, [ebp+var_4]
.text:00000092                 add     ecx, 28h ; '('  ; this
.text:00000095                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:0000009A                 cmp     eax, 2
.text:0000009D                 jnz     short loc_B3
.text:0000009F                 mov     ecx, [ebp+var_4]
.text:000000A2                 add     ecx, 28h ; '('
.text:000000A5                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:000000AA                 movzx   eax, word ptr [eax+2]
.text:000000AE                 cmp     eax, 2Eh ; '.'
.text:000000B1                 jz      short loc_BC
.text:000000B3
.text:000000B3 loc_B3:                                 ; CODE XREF: NWindows::NFile::NFind::CFileInfo::IsDots(void)+71j
.text:000000B3                 mov     [ebp+var_8], 0
.text:000000BA                 jmp     short loc_C3
.text:000000BC ; ---------------------------------------------------------------------------
.text:000000BC
.text:000000BC loc_BC:                                 ; CODE XREF: NWindows::NFile::NFind::CFileInfo::IsDots(void)+61j
.text:000000BC                                         ; NWindows::NFile::NFind::CFileInfo::IsDots(void)+85j
.text:000000BC                 mov     [ebp+var_8], 1
.text:000000C3
.text:000000C3 loc_C3:                                 ; CODE XREF: NWindows::NFile::NFind::CFileInfo::IsDots(void)+8Ej
.text:000000C3                 mov     al, byte ptr [ebp+var_8]
.text:000000C6
.text:000000C6 loc_C6:                                 ; CODE XREF: NWindows::NFile::NFind::CFileInfo::IsDots(void)+3Aj
.text:000000C6                                         ; NWindows::NFile::NFind::CFileInfo::IsDots(void)+51j
.text:000000C6                 add     esp, 8
.text:000000C9                 cmp     ebp, esp
.text:000000CB                 call    __RTC_CheckEsp
.text:000000D0                 mov     esp, ebp
.text:000000D2                 pop     ebp
.text:000000D3                 retn
.text:000000D3 ?IsDots@CFileInfo@NFind@NFile@NWindows@@QBE_NXZ endp
.text:000000D3
.text:000000D3 ; ---------------------------------------------------------------------------
.text:000000D4                 db 8 dup(0CCh)
.text:000000DC
.text:000000DC ; =============== S U B R O U T I N E =======================================
.text:000000DC
.text:000000DC ; Attributes: bp-based frame
.text:000000DC
.text:000000DC ; bool __thiscall NWindows::NFile::NFind::CFindFileBase::Close(NWindows::NFile::NFind::CFindFileBase *__hidden this)
.text:000000DC                 public ?Close@CFindFileBase@NFind@NFile@NWindows@@QAE_NXZ
.text:000000DC ?Close@CFindFileBase@NFind@NFile@NWindows@@QAE_NXZ proc near
.text:000000DC                                         ; CODE XREF: NWindows::NFile::NFind::CFindFile::FindFirst(wchar_t const *,NWindows::NFile::NFind::CFileInfo &)+47p
.text:000000DC                                         ; NWindows::NFile::NFind::CFindStream::FindFirst(wchar_t const *,NWindows::NFile::NFind::CStreamInfo &)+2Fp ...
.text:000000DC
.text:000000DC var_4           = dword ptr -4
.text:000000DC
.text:000000DC                 push    ebp
.text:000000DD                 mov     ebp, esp
.text:000000DF                 push    ecx
.text:000000E0                 push    esi
.text:000000E1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000000E8                 mov     [ebp+var_4], ecx
.text:000000EB                 mov     eax, [ebp+var_4]
.text:000000EE                 cmp     dword ptr [eax], 0FFFFFFFFh
.text:000000F1                 jnz     short loc_F7
.text:000000F3                 mov     al, 1
.text:000000F5                 jmp     short loc_11F
.text:000000F7 ; ---------------------------------------------------------------------------
.text:000000F7
.text:000000F7 loc_F7:                                 ; CODE XREF: NWindows::NFile::NFind::CFindFileBase::Close(void)+15j
.text:000000F7                 mov     esi, esp
.text:000000F9                 mov     ecx, [ebp+var_4]
.text:000000FC                 mov     edx, [ecx]
.text:000000FE                 push    edx             ; hFindFile
.text:000000FF                 call    dword ptr ds:__imp__FindClose@4 ; FindClose(x)
.text:00000105                 cmp     esi, esp
.text:00000107                 call    __RTC_CheckEsp
.text:0000010C                 test    eax, eax
.text:0000010E                 jnz     short loc_114
.text:00000110                 xor     al, al
.text:00000112                 jmp     short loc_11F
.text:00000114 ; ---------------------------------------------------------------------------
.text:00000114
.text:00000114 loc_114:                                ; CODE XREF: NWindows::NFile::NFind::CFindFileBase::Close(void)+32j
.text:00000114                 mov     eax, [ebp+var_4]
.text:00000117                 mov     dword ptr [eax], 0FFFFFFFFh
.text:0000011D                 mov     al, 1
.text:0000011F
.text:0000011F loc_11F:                                ; CODE XREF: NWindows::NFile::NFind::CFindFileBase::Close(void)+19j
.text:0000011F                                         ; NWindows::NFile::NFind::CFindFileBase::Close(void)+36j
.text:0000011F                 pop     esi
.text:00000120                 add     esp, 4
.text:00000123                 cmp     ebp, esp
.text:00000125                 call    __RTC_CheckEsp
.text:0000012A                 mov     esp, ebp
.text:0000012C                 pop     ebp
.text:0000012D                 retn
.text:0000012D ?Close@CFindFileBase@NFind@NFile@NWindows@@QAE_NXZ endp
.text:0000012D
.text:0000012D ; ---------------------------------------------------------------------------
.text:0000012E                 db 0Eh dup(0CCh)
.text:0000013C
.text:0000013C ; =============== S U B R O U T I N E =======================================
.text:0000013C
.text:0000013C ; Attributes: bp-based frame
.text:0000013C
.text:0000013C ; bool __thiscall NWindows::NFile::NFind::CFindFile::FindFirst(NWindows::NFile::NFind::CFindFile *this, LPCWSTR lpFileName, struct NWindows::NFile::NFind::CFileInfo *)
.text:0000013C                 public ?FindFirst@CFindFile@NFind@NFile@NWindows@@QAE_NPB_WAAUCFileInfo@234@@Z
.text:0000013C ?FindFirst@CFindFile@NFind@NFile@NWindows@@QAE_NPB_WAAUCFileInfo@234@@Z proc near
.text:0000013C                                         ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+4E1p
.text:0000013C                                         ; NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+740p ...
.text:0000013C
.text:0000013C var_3C8         = dword ptr -3C8h
.text:0000013C var_3C4         = dword ptr -3C4h
.text:0000013C var_3C0         = _WIN32_FIND_DATAA ptr -3C0h
.text:0000013C FindFileData    = _WIN32_FIND_DATAA ptr -158h
.text:0000013C var_14          = dword ptr -14h
.text:0000013C var_10          = dword ptr -10h
.text:0000013C var_C           = dword ptr -0Ch
.text:0000013C var_4           = dword ptr -4
.text:0000013C lpFileName      = dword ptr  8
.text:0000013C arg_4           = dword ptr  0Ch
.text:0000013C
.text:0000013C                 push    ebp
.text:0000013D                 mov     ebp, esp
.text:0000013F                 push    0FFFFFFFFh
.text:00000141                 push    offset __ehhandler$?FindFirst@CFindFile@NFind@NFile@NWindows@@QAE_NPB_WAAUCFileInfo@234@@Z
.text:00000146                 mov     eax, large fs:0
.text:0000014C                 push    eax
.text:0000014D                 sub     esp, 3BCh
.text:00000153                 push    esi
.text:00000154                 push    edi
.text:00000155                 push    ecx
.text:00000156                 lea     edi, [ebp+var_3C8]
.text:0000015C                 mov     ecx, 0EFh ; 'n'
.text:00000161                 mov     eax, 0CCCCCCCCh
.text:00000166                 rep stosd
.text:00000168                 pop     ecx
.text:00000169                 mov     eax, dword ptr ds:___security_cookie
.text:0000016E                 xor     eax, ebp
.text:00000170                 mov     [ebp+var_10], eax
.text:00000173                 push    eax
.text:00000174                 lea     eax, [ebp+var_C]
.text:00000177                 mov     large fs:0, eax
.text:0000017D                 mov     [ebp+var_14], ecx
.text:00000180                 mov     ecx, [ebp+var_14] ; this
.text:00000183                 call    ?Close@CFindFileBase@NFind@NFile@NWindows@@QAE_NXZ ; NWindows::NFile::NFind::CFindFileBase::Close(void)
.text:00000188                 movzx   eax, al
.text:0000018B                 test    eax, eax
.text:0000018D                 jnz     short loc_196
.text:0000018F                 xor     al, al
.text:00000191                 jmp     loc_262
.text:00000196 ; ---------------------------------------------------------------------------
.text:00000196
.text:00000196 loc_196:                                ; CODE XREF: NWindows::NFile::NFind::CFindFile::FindFirst(wchar_t const *,NWindows::NFile::NFind::CFileInfo &)+51j
.text:00000196                 movzx   ecx, byte ptr ds:?g_IsNT@@3_NA ; bool g_IsNT
.text:0000019D                 test    ecx, ecx
.text:0000019F                 jnz     loc_225
.text:000001A5                 mov     esi, esp
.text:000001A7                 lea     edx, [ebp+FindFileData]
.text:000001AD                 push    edx             ; lpFindFileData
.text:000001AE                 mov     eax, [ebp+lpFileName]
.text:000001B1                 push    eax
.text:000001B2                 lea     ecx, [ebp+var_3C0]
.text:000001B8                 push    ecx             ; lpFindFileData
.text:000001B9                 call    ?fs2fas@@YG?AVAString@@PB_W@Z ; fs2fas(wchar_t const *)
.text:000001BE                 mov     [ebp+var_3C4], eax
.text:000001C4                 mov     edx, [ebp+var_3C4]
.text:000001CA                 mov     [ebp+var_3C8], edx
.text:000001D0                 mov     [ebp+var_4], 0
.text:000001D7                 mov     ecx, [ebp+var_3C8]
.text:000001DD                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:000001E2                 push    eax             ; lpFileName
.text:000001E3                 call    dword ptr ds:__imp__FindFirstFileA@8 ; FindFirstFileA(x,x)
.text:000001E9                 cmp     esi, esp
.text:000001EB                 call    __RTC_CheckEsp
.text:000001F0                 mov     ecx, [ebp+var_14]
.text:000001F3                 mov     [ecx], eax
.text:000001F5                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000001FC                 lea     ecx, [ebp+var_3C0] ; this
.text:00000202                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00000207                 mov     edx, [ebp+var_14]
.text:0000020A                 cmp     dword ptr [edx], 0FFFFFFFFh
.text:0000020D                 jnz     short loc_213
.text:0000020F                 xor     al, al
.text:00000211                 jmp     short loc_262
.text:00000213 ; ---------------------------------------------------------------------------
.text:00000213
.text:00000213 loc_213:                                ; CODE XREF: NWindows::NFile::NFind::CFindFile::FindFirst(wchar_t const *,NWindows::NFile::NFind::CFileInfo &)+D1j
.text:00000213                 mov     eax, [ebp+arg_4]
.text:00000216                 push    eax
.text:00000217                 lea     ecx, [ebp+FindFileData]
.text:0000021D                 push    ecx
.text:0000021E                 call    ?Convert_WIN32_FIND_DATA_to_FileInfo@NFind@NFile@NWindows@@YGXABU_WIN32_FIND_DATAA@@AAUCFileInfo@123@@Z ; NWindows::NFile::NFind::Convert_WIN32_FIND_DATA_to_FileInfo(_WIN32_FIND_DATAA const &,NWindows::NFile::NFind::CFileInfo &)
.text:00000223                 jmp     short loc_260
.text:00000225 ; ---------------------------------------------------------------------------
.text:00000225
.text:00000225 loc_225:                                ; CODE XREF: NWindows::NFile::NFind::CFindFile::FindFirst(wchar_t const *,NWindows::NFile::NFind::CFileInfo &)+63j
.text:00000225                 mov     esi, esp
.text:00000227                 lea     edx, [ebp+var_3C0.ftLastAccessTime.dwHighDateTime]
.text:0000022D                 push    edx             ; lpFindFileData
.text:0000022E                 mov     eax, [ebp+lpFileName]
.text:00000231                 push    eax             ; lpFileName
.text:00000232                 call    dword ptr ds:__imp__FindFirstFileW@8 ; FindFirstFileW(x,x)
.text:00000238                 cmp     esi, esp
.text:0000023A                 call    __RTC_CheckEsp
.text:0000023F                 mov     ecx, [ebp+var_14]
.text:00000242                 mov     [ecx], eax
.text:00000244                 mov     edx, [ebp+var_14]
.text:00000247                 cmp     dword ptr [edx], 0FFFFFFFFh
.text:0000024A                 jnz     short loc_250
.text:0000024C                 xor     al, al
.text:0000024E                 jmp     short loc_262
.text:00000250 ; ---------------------------------------------------------------------------
.text:00000250
.text:00000250 loc_250:                                ; CODE XREF: NWindows::NFile::NFind::CFindFile::FindFirst(wchar_t const *,NWindows::NFile::NFind::CFileInfo &)+10Ej
.text:00000250                 mov     eax, [ebp+arg_4]
.text:00000253                 push    eax
.text:00000254                 lea     ecx, [ebp+var_3C0.ftLastAccessTime.dwHighDateTime]
.text:0000025A                 push    ecx
.text:0000025B                 call    ?Convert_WIN32_FIND_DATA_to_FileInfo@NFind@NFile@NWindows@@YGXABU_WIN32_FIND_DATAW@@AAUCFileInfo@123@@Z ; NWindows::NFile::NFind::Convert_WIN32_FIND_DATA_to_FileInfo(_WIN32_FIND_DATAW const &,NWindows::NFile::NFind::CFileInfo &)
.text:00000260
.text:00000260 loc_260:                                ; CODE XREF: NWindows::NFile::NFind::CFindFile::FindFirst(wchar_t const *,NWindows::NFile::NFind::CFileInfo &)+E7j
.text:00000260                 mov     al, 1
.text:00000262
.text:00000262 loc_262:                                ; CODE XREF: NWindows::NFile::NFind::CFindFile::FindFirst(wchar_t const *,NWindows::NFile::NFind::CFileInfo &)+55j
.text:00000262                                         ; NWindows::NFile::NFind::CFindFile::FindFirst(wchar_t const *,NWindows::NFile::NFind::CFileInfo &)+D5j ...
.text:00000262                 push    edx
.text:00000263                 mov     ecx, ebp
.text:00000265                 push    eax
.text:00000266                 lea     edx, $LN13
.text:0000026C                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000271                 pop     eax
.text:00000272                 pop     edx
.text:00000273                 mov     ecx, [ebp+var_C]
.text:00000276                 mov     large fs:0, ecx
.text:0000027D                 pop     ecx
.text:0000027E                 pop     edi
.text:0000027F                 pop     esi
.text:00000280                 mov     ecx, [ebp+var_10]
.text:00000283                 xor     ecx, ebp
.text:00000285                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0000028A                 add     esp, 3C8h
.text:00000290                 cmp     ebp, esp
.text:00000292                 call    __RTC_CheckEsp
.text:00000297                 mov     esp, ebp
.text:00000299                 pop     ebp
.text:0000029A                 retn    8
.text:0000029A ?FindFirst@CFindFile@NFind@NFile@NWindows@@QAE_NPB_WAAUCFileInfo@234@@Z endp
.text:0000029A
.text:0000029A ; ---------------------------------------------------------------------------
.text:0000029D                 align 10h
.text:000002A0 $LN13           dd 2                    ; DATA XREF: NWindows::NFile::NFind::CFindFile::FindFirst(wchar_t const *,NWindows::NFile::NFind::CFileInfo &)+12Ao
.text:000002A4                 dd offset $LN12
.text:000002A8 $LN12           dd 0FFFFFEA8h, 140h     ; DATA XREF: .text:000002A4o
.text:000002B0                 dd offset $LN9
.text:000002B4                 dd 0FFFFFC50h, 250h
.text:000002BC                 dd offset $LN10
.text:000002C0 $LN10           db 66h, 64h, 0          ; DATA XREF: .text:000002BCo
.text:000002C3 $LN9            db 66h                  ; DATA XREF: .text:000002B0o
.text:000002C4                 dd 0CCCC0064h, 0CCCCCCCCh
.text:000002CC
.text:000002CC ; =============== S U B R O U T I N E =======================================
.text:000002CC
.text:000002CC ; Attributes: bp-based frame
.text:000002CC
.text:000002CC ; void __stdcall NWindows::NFile::NFind::Convert_WIN32_FIND_DATA_to_FileInfo(struct _WIN32_FIND_DATAW const &, struct NWindows::NFile::NFind::CFileInfo &)
.text:000002CC ?Convert_WIN32_FIND_DATA_to_FileInfo@NFind@NFile@NWindows@@YGXABU_WIN32_FIND_DATAW@@AAUCFileInfo@123@@Z proc near
.text:000002CC                                         ; CODE XREF: NWindows::NFile::NFind::CFindFile::FindFirst(wchar_t const *,NWindows::NFile::NFind::CFileInfo &)+11Fp
.text:000002CC                                         ; NWindows::NFile::NFind::CFindFile::FindNext(NWindows::NFile::NFind::CFileInfo &)+9Cp
.text:000002CC
.text:000002CC arg_0           = dword ptr  8
.text:000002CC arg_4           = dword ptr  0Ch
.text:000002CC
.text:000002CC                 push    ebp
.text:000002CD                 mov     ebp, esp
.text:000002CF                 push    esi
.text:000002D0                 mov     eax, [ebp+arg_4]
.text:000002D3                 mov     ecx, [ebp+arg_0]
.text:000002D6                 mov     edx, [ecx]
.text:000002D8                 mov     [eax+20h], edx
.text:000002DB                 mov     eax, [ebp+arg_0]
.text:000002DE                 mov     ecx, [eax+4]
.text:000002E1                 mov     edx, [eax+8]
.text:000002E4                 mov     eax, [ebp+arg_4]
.text:000002E7                 mov     [eax+8], ecx
.text:000002EA                 mov     [eax+0Ch], edx
.text:000002ED                 mov     ecx, [ebp+arg_0]
.text:000002F0                 mov     edx, [ecx+0Ch]
.text:000002F3                 mov     eax, [ecx+10h]
.text:000002F6                 mov     ecx, [ebp+arg_4]
.text:000002F9                 mov     [ecx+10h], edx
.text:000002FC                 mov     [ecx+14h], eax
.text:000002FF                 mov     edx, [ebp+arg_0]
.text:00000302                 mov     eax, [edx+14h]
.text:00000305                 mov     ecx, [edx+18h]
.text:00000308                 mov     edx, [ebp+arg_4]
.text:0000030B                 mov     [edx+18h], eax
.text:0000030E                 mov     [edx+1Ch], ecx
.text:00000311                 mov     eax, [ebp+arg_0]
.text:00000314                 mov     eax, [eax+1Ch]
.text:00000317                 xor     edx, edx
.text:00000319                 mov     cl, 20h ; ' '
.text:0000031B                 call    __allshl
.text:00000320                 mov     ecx, [ebp+arg_0]
.text:00000323                 mov     ecx, [ecx+20h]
.text:00000326                 xor     esi, esi
.text:00000328                 add     eax, ecx
.text:0000032A                 adc     edx, esi
.text:0000032C                 mov     ecx, [ebp+arg_4]
.text:0000032F                 mov     [ecx], eax
.text:00000331                 mov     [ecx+4], edx
.text:00000334                 mov     edx, [ebp+arg_4]
.text:00000337                 mov     byte ptr [edx+24h], 0
.text:0000033B                 mov     eax, [ebp+arg_4]
.text:0000033E                 mov     byte ptr [eax+25h], 0
.text:00000342                 mov     ecx, [ebp+arg_0]
.text:00000345                 add     ecx, 2Ch ; ','
.text:00000348                 push    ecx
.text:00000349                 mov     ecx, [ebp+arg_4]
.text:0000034C                 add     ecx, 28h ; '('
.text:0000034F                 call    ??4UString@@QAEAAV0@PB_W@Z ; UString::operator=(wchar_t const *)
.text:00000354                 pop     esi
.text:00000355                 cmp     ebp, esp
.text:00000357                 call    __RTC_CheckEsp
.text:0000035C                 pop     ebp
.text:0000035D                 retn    8
.text:0000035D ?Convert_WIN32_FIND_DATA_to_FileInfo@NFind@NFile@NWindows@@YGXABU_WIN32_FIND_DATAW@@AAUCFileInfo@123@@Z endp
.text:0000035D
.text:0000035D ; ---------------------------------------------------------------------------
.text:00000360                 db 0Ch dup(0CCh)
.text:0000036C
.text:0000036C ; =============== S U B R O U T I N E =======================================
.text:0000036C
.text:0000036C ; Attributes: bp-based frame
.text:0000036C
.text:0000036C ; void __stdcall NWindows::NFile::NFind::Convert_WIN32_FIND_DATA_to_FileInfo(struct _WIN32_FIND_DATAA const &, struct NWindows::NFile::NFind::CFileInfo &)
.text:0000036C ?Convert_WIN32_FIND_DATA_to_FileInfo@NFind@NFile@NWindows@@YGXABU_WIN32_FIND_DATAA@@AAUCFileInfo@123@@Z proc near
.text:0000036C                                         ; CODE XREF: NWindows::NFile::NFind::CFindFile::FindFirst(wchar_t const *,NWindows::NFile::NFind::CFileInfo &)+E2p
.text:0000036C                                         ; NWindows::NFile::NFind::CFindFile::FindNext(NWindows::NFile::NFind::CFileInfo &)+66p
.text:0000036C
.text:0000036C var_2C          = dword ptr -2Ch
.text:0000036C var_28          = dword ptr -28h
.text:0000036C var_24          = dword ptr -24h
.text:0000036C var_20          = dword ptr -20h
.text:0000036C var_1C          = dword ptr -1Ch
.text:0000036C var_18          = dword ptr -18h
.text:0000036C var_14          = dword ptr -14h
.text:0000036C var_10          = dword ptr -10h
.text:0000036C var_C           = dword ptr -0Ch
.text:0000036C var_4           = dword ptr -4
.text:0000036C arg_0           = dword ptr  8
.text:0000036C arg_4           = dword ptr  0Ch
.text:0000036C
.text:0000036C                 push    ebp
.text:0000036D                 mov     ebp, esp
.text:0000036F                 push    0FFFFFFFFh
.text:00000371                 push    offset __ehhandler$?Convert_WIN32_FIND_DATA_to_FileInfo@NFind@NFile@NWindows@@YGXABU_WIN32_FIND_DATAA@@AAUCFileInfo@123@@Z
.text:00000376                 mov     eax, large fs:0
.text:0000037C                 push    eax
.text:0000037D                 sub     esp, 20h
.text:00000380                 push    esi
.text:00000381                 mov     eax, 0CCCCCCCCh
.text:00000386                 mov     [ebp+var_2C], eax
.text:00000389                 mov     [ebp+var_28], eax
.text:0000038C                 mov     [ebp+var_24], eax
.text:0000038F                 mov     [ebp+var_20], eax
.text:00000392                 mov     [ebp+var_1C], eax
.text:00000395                 mov     [ebp+var_18], eax
.text:00000398                 mov     [ebp+var_14], eax
.text:0000039B                 mov     [ebp+var_10], eax
.text:0000039E                 mov     eax, dword ptr ds:___security_cookie
.text:000003A3                 xor     eax, ebp
.text:000003A5                 push    eax
.text:000003A6                 lea     eax, [ebp+var_C]
.text:000003A9                 mov     large fs:0, eax
.text:000003AF                 mov     eax, [ebp+arg_4]
.text:000003B2                 mov     ecx, [ebp+arg_0]
.text:000003B5                 mov     edx, [ecx]
.text:000003B7                 mov     [eax+20h], edx
.text:000003BA                 mov     eax, [ebp+arg_0]
.text:000003BD                 mov     ecx, [eax+4]
.text:000003C0                 mov     edx, [eax+8]
.text:000003C3                 mov     eax, [ebp+arg_4]
.text:000003C6                 mov     [eax+8], ecx
.text:000003C9                 mov     [eax+0Ch], edx
.text:000003CC                 mov     ecx, [ebp+arg_0]
.text:000003CF                 mov     edx, [ecx+0Ch]
.text:000003D2                 mov     eax, [ecx+10h]
.text:000003D5                 mov     ecx, [ebp+arg_4]
.text:000003D8                 mov     [ecx+10h], edx
.text:000003DB                 mov     [ecx+14h], eax
.text:000003DE                 mov     edx, [ebp+arg_0]
.text:000003E1                 mov     eax, [edx+14h]
.text:000003E4                 mov     ecx, [edx+18h]
.text:000003E7                 mov     edx, [ebp+arg_4]
.text:000003EA                 mov     [edx+18h], eax
.text:000003ED                 mov     [edx+1Ch], ecx
.text:000003F0                 mov     eax, [ebp+arg_0]
.text:000003F3                 mov     eax, [eax+1Ch]
.text:000003F6                 xor     edx, edx
.text:000003F8                 mov     cl, 20h ; ' '
.text:000003FA                 call    __allshl
.text:000003FF                 mov     ecx, [ebp+arg_0]
.text:00000402                 mov     ecx, [ecx+20h]
.text:00000405                 xor     esi, esi
.text:00000407                 add     eax, ecx
.text:00000409                 adc     edx, esi
.text:0000040B                 mov     ecx, [ebp+arg_4]
.text:0000040E                 mov     [ecx], eax
.text:00000410                 mov     [ecx+4], edx
.text:00000413                 mov     edx, [ebp+arg_4]
.text:00000416                 mov     byte ptr [edx+24h], 0
.text:0000041A                 mov     eax, [ebp+arg_4]
.text:0000041D                 mov     byte ptr [eax+25h], 0
.text:00000421                 mov     ecx, [ebp+arg_0]
.text:00000424                 add     ecx, 2Ch ; ','
.text:00000427                 push    ecx             ; char *
.text:00000428                 lea     ecx, [ebp+var_18] ; this
.text:0000042B                 call    ??0AString@@QAE@PBD@Z ; AString::AString(char const *)
.text:00000430                 mov     [ebp+var_4], 0
.text:00000437                 lea     edx, [ebp+var_18]
.text:0000043A                 push    edx
.text:0000043B                 lea     eax, [ebp+var_24]
.text:0000043E                 push    eax
.text:0000043F                 call    ?fas2fs@@YG?AVUString@@ABVAString@@@Z ; fas2fs(AString const &)
.text:00000444                 mov     [ebp+var_28], eax
.text:00000447                 mov     ecx, [ebp+var_28]
.text:0000044A                 mov     [ebp+var_2C], ecx
.text:0000044D                 mov     byte ptr [ebp+var_4], 1
.text:00000451                 mov     edx, [ebp+var_2C]
.text:00000454                 push    edx
.text:00000455                 mov     ecx, [ebp+arg_4]
.text:00000458                 add     ecx, 28h ; '('
.text:0000045B                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:00000460                 mov     byte ptr [ebp+var_4], 0
.text:00000464                 lea     ecx, [ebp+var_24] ; this
.text:00000467                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000046C                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000473                 lea     ecx, [ebp+var_18] ; this
.text:00000476                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:0000047B                 mov     ecx, [ebp+var_C]
.text:0000047E                 mov     large fs:0, ecx
.text:00000485                 pop     ecx
.text:00000486                 pop     esi
.text:00000487                 add     esp, 2Ch
.text:0000048A                 cmp     ebp, esp
.text:0000048C                 call    __RTC_CheckEsp
.text:00000491                 mov     esp, ebp
.text:00000493                 pop     ebp
.text:00000494                 retn    8
.text:00000494 ?Convert_WIN32_FIND_DATA_to_FileInfo@NFind@NFile@NWindows@@YGXABU_WIN32_FIND_DATAA@@AAUCFileInfo@123@@Z endp
.text:00000494
.text:00000494 ; ---------------------------------------------------------------------------
.text:00000497                 db 5 dup(0CCh)
.text:0000049C
.text:0000049C ; =============== S U B R O U T I N E =======================================
.text:0000049C
.text:0000049C ; Attributes: bp-based frame
.text:0000049C
.text:0000049C ; bool __thiscall NWindows::NFile::NFind::CFindFile::FindNext(NWindows::NFile::NFind::CFindFile *this, struct NWindows::NFile::NFind::CFileInfo *)
.text:0000049C                 public ?FindNext@CFindFile@NFind@NFile@NWindows@@QAE_NAAUCFileInfo@234@@Z
.text:0000049C ?FindNext@CFindFile@NFind@NFile@NWindows@@QAE_NAAUCFileInfo@234@@Z proc near
.text:0000049C                                         ; CODE XREF: NWindows::NFile::NFind::CEnumerator::NextAny(NWindows::NFile::NFind::CFileInfo &)+24p
.text:0000049C
.text:0000049C var_3A8         = byte ptr -3A8h
.text:0000049C var_3A4         = _WIN32_FIND_DATAW ptr -3A4h
.text:0000049C FindFileData    = _WIN32_FIND_DATAA ptr -14Ch
.text:0000049C var_8           = dword ptr -8
.text:0000049C var_4           = dword ptr -4
.text:0000049C arg_0           = dword ptr  8
.text:0000049C
.text:0000049C                 push    ebp
.text:0000049D                 mov     ebp, esp
.text:0000049F                 sub     esp, 3A8h
.text:000004A5                 push    esi
.text:000004A6                 push    edi
.text:000004A7                 push    ecx
.text:000004A8                 lea     edi, [ebp+var_3A8]
.text:000004AE                 mov     ecx, 0EAh ; 'O'
.text:000004B3                 mov     eax, 0CCCCCCCCh
.text:000004B8                 rep stosd
.text:000004BA                 pop     ecx
.text:000004BB                 mov     eax, dword ptr ds:___security_cookie
.text:000004C0                 xor     eax, ebp
.text:000004C2                 mov     [ebp+var_4], eax
.text:000004C5                 mov     [ebp+var_8], ecx
.text:000004C8                 movzx   eax, byte ptr ds:?g_IsNT@@3_NA ; bool g_IsNT
.text:000004CF                 test    eax, eax
.text:000004D1                 jnz     short loc_509
.text:000004D3                 mov     esi, esp
.text:000004D5                 lea     ecx, [ebp+FindFileData]
.text:000004DB                 push    ecx             ; lpFindFileData
.text:000004DC                 mov     edx, [ebp+var_8]
.text:000004DF                 mov     eax, [edx]
.text:000004E1                 push    eax             ; hFindFile
.text:000004E2                 call    dword ptr ds:__imp__FindNextFileA@8 ; FindNextFileA(x,x)
.text:000004E8                 cmp     esi, esp
.text:000004EA                 call    __RTC_CheckEsp
.text:000004EF                 test    eax, eax
.text:000004F1                 jnz     short loc_4F7
.text:000004F3                 xor     al, al
.text:000004F5                 jmp     short loc_53F
.text:000004F7 ; ---------------------------------------------------------------------------
.text:000004F7
.text:000004F7 loc_4F7:                                ; CODE XREF: NWindows::NFile::NFind::CFindFile::FindNext(NWindows::NFile::NFind::CFileInfo &)+55j
.text:000004F7                 mov     ecx, [ebp+arg_0]
.text:000004FA                 push    ecx
.text:000004FB                 lea     edx, [ebp+FindFileData]
.text:00000501                 push    edx
.text:00000502                 call    ?Convert_WIN32_FIND_DATA_to_FileInfo@NFind@NFile@NWindows@@YGXABU_WIN32_FIND_DATAA@@AAUCFileInfo@123@@Z ; NWindows::NFile::NFind::Convert_WIN32_FIND_DATA_to_FileInfo(_WIN32_FIND_DATAA const &,NWindows::NFile::NFind::CFileInfo &)
.text:00000507                 jmp     short loc_53D
.text:00000509 ; ---------------------------------------------------------------------------
.text:00000509
.text:00000509 loc_509:                                ; CODE XREF: NWindows::NFile::NFind::CFindFile::FindNext(NWindows::NFile::NFind::CFileInfo &)+35j
.text:00000509                 mov     esi, esp
.text:0000050B                 lea     eax, [ebp+var_3A4]
.text:00000511                 push    eax             ; lpFindFileData
.text:00000512                 mov     ecx, [ebp+var_8]
.text:00000515                 mov     edx, [ecx]
.text:00000517                 push    edx             ; hFindFile
.text:00000518                 call    dword ptr ds:__imp__FindNextFileW@8 ; FindNextFileW(x,x)
.text:0000051E                 cmp     esi, esp
.text:00000520                 call    __RTC_CheckEsp
.text:00000525                 test    eax, eax
.text:00000527                 jnz     short loc_52D
.text:00000529                 xor     al, al
.text:0000052B                 jmp     short loc_53F
.text:0000052D ; ---------------------------------------------------------------------------
.text:0000052D
.text:0000052D loc_52D:                                ; CODE XREF: NWindows::NFile::NFind::CFindFile::FindNext(NWindows::NFile::NFind::CFileInfo &)+8Bj
.text:0000052D                 mov     eax, [ebp+arg_0]
.text:00000530                 push    eax
.text:00000531                 lea     ecx, [ebp+var_3A4]
.text:00000537                 push    ecx
.text:00000538                 call    ?Convert_WIN32_FIND_DATA_to_FileInfo@NFind@NFile@NWindows@@YGXABU_WIN32_FIND_DATAW@@AAUCFileInfo@123@@Z ; NWindows::NFile::NFind::Convert_WIN32_FIND_DATA_to_FileInfo(_WIN32_FIND_DATAW const &,NWindows::NFile::NFind::CFileInfo &)
.text:0000053D
.text:0000053D loc_53D:                                ; CODE XREF: NWindows::NFile::NFind::CFindFile::FindNext(NWindows::NFile::NFind::CFileInfo &)+6Bj
.text:0000053D                 mov     al, 1
.text:0000053F
.text:0000053F loc_53F:                                ; CODE XREF: NWindows::NFile::NFind::CFindFile::FindNext(NWindows::NFile::NFind::CFileInfo &)+59j
.text:0000053F                                         ; NWindows::NFile::NFind::CFindFile::FindNext(NWindows::NFile::NFind::CFileInfo &)+8Fj
.text:0000053F                 push    edx
.text:00000540                 mov     ecx, ebp
.text:00000542                 push    eax
.text:00000543                 lea     edx, $LN10_0
.text:00000549                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000054E                 pop     eax
.text:0000054F                 pop     edx
.text:00000550                 pop     edi
.text:00000551                 pop     esi
.text:00000552                 mov     ecx, [ebp+var_4]
.text:00000555                 xor     ecx, ebp
.text:00000557                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0000055C                 add     esp, 3A8h
.text:00000562                 cmp     ebp, esp
.text:00000564                 call    __RTC_CheckEsp
.text:00000569                 mov     esp, ebp
.text:0000056B                 pop     ebp
.text:0000056C                 retn    4
.text:0000056C ?FindNext@CFindFile@NFind@NFile@NWindows@@QAE_NAAUCFileInfo@234@@Z endp
.text:0000056C
.text:0000056C ; ---------------------------------------------------------------------------
.text:0000056F                 align 10h
.text:00000570 $LN10_0         dd 2                    ; DATA XREF: NWindows::NFile::NFind::CFindFile::FindNext(NWindows::NFile::NFind::CFileInfo &)+A7o
.text:00000574                 dd offset $LN9_0
.text:00000578 $LN9_0          dd 0FFFFFEB4h, 140h     ; DATA XREF: .text:00000574o
.text:00000580                 dd offset $LN7
.text:00000584                 dd 0FFFFFC5Ch, 250h
.text:0000058C                 dd offset $LN8
.text:00000590 $LN8            db 66h, 64h, 0          ; DATA XREF: .text:0000058Co
.text:00000593 $LN7            db 66h                  ; DATA XREF: .text:00000580o
.text:00000594                 dd 0CCCC0064h, 0CCCCCCCCh
.text:0000059C
.text:0000059C ; =============== S U B R O U T I N E =======================================
.text:0000059C
.text:0000059C ; Attributes: bp-based frame
.text:0000059C
.text:0000059C ; bool __thiscall NWindows::NFile::NFind::CStreamInfo::IsMainStream(NWindows::NFile::NFind::CStreamInfo *__hidden this)
.text:0000059C                 public ?IsMainStream@CStreamInfo@NFind@NFile@NWindows@@QBE_NXZ
.text:0000059C ?IsMainStream@CStreamInfo@NFind@NFile@NWindows@@QBE_NXZ proc near
.text:0000059C
.text:0000059C var_4           = dword ptr -4
.text:0000059C
.text:0000059C                 push    ebp
.text:0000059D                 mov     ebp, esp
.text:0000059F                 push    ecx
.text:000005A0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000005A7                 mov     [ebp+var_4], ecx
.text:000005AA                 push    offset $SG67970 ; "::$DATA"
.text:000005AF                 mov     ecx, [ebp+var_4]
.text:000005B2                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:000005B7                 push    eax             ; wchar_t *
.text:000005B8                 call    ?StringsAreEqualNoCase_Ascii@@YG_NPB_WPBD@Z ; StringsAreEqualNoCase_Ascii(wchar_t const *,char const *)
.text:000005BD                 add     esp, 4
.text:000005C0                 cmp     ebp, esp
.text:000005C2                 call    __RTC_CheckEsp
.text:000005C7                 mov     esp, ebp
.text:000005C9                 pop     ebp
.text:000005CA                 retn
.text:000005CA ?IsMainStream@CStreamInfo@NFind@NFile@NWindows@@QBE_NXZ endp
.text:000005CA
.text:000005CA ; ---------------------------------------------------------------------------
.text:000005CB                 align 4
.text:000005CC
.text:000005CC ; =============== S U B R O U T I N E =======================================
.text:000005CC
.text:000005CC ; Attributes: bp-based frame
.text:000005CC
.text:000005CC ; public: class UString __thiscall NWindows::NFile::NFind::CStreamInfo::GetReducedName(void)const
.text:000005CC                 public ?GetReducedName@CStreamInfo@NFind@NFile@NWindows@@QBE?AVUString@@XZ
.text:000005CC ?GetReducedName@CStreamInfo@NFind@NFile@NWindows@@QBE?AVUString@@XZ proc near
.text:000005CC
.text:000005CC var_28          = dword ptr -28h
.text:000005CC var_24          = dword ptr -24h
.text:000005CC var_20          = dword ptr -20h
.text:000005CC var_1C          = dword ptr -1Ch
.text:000005CC var_18          = dword ptr -18h
.text:000005CC var_14          = dword ptr -14h
.text:000005CC var_10          = dword ptr -10h
.text:000005CC var_C           = dword ptr -0Ch
.text:000005CC var_4           = dword ptr -4
.text:000005CC arg_0           = dword ptr  8
.text:000005CC
.text:000005CC                 push    ebp
.text:000005CD                 mov     ebp, esp
.text:000005CF                 push    0FFFFFFFFh
.text:000005D1                 push    offset __ehhandler$?GetReducedName@CStreamInfo@NFind@NFile@NWindows@@QBE?AVUString@@XZ
.text:000005D6                 mov     eax, large fs:0
.text:000005DC                 push    eax
.text:000005DD                 sub     esp, 1Ch
.text:000005E0                 mov     eax, 0CCCCCCCCh
.text:000005E5                 mov     [ebp+var_28], eax
.text:000005E8                 mov     [ebp+var_24], eax
.text:000005EB                 mov     [ebp+var_20], eax
.text:000005EE                 mov     [ebp+var_1C], eax
.text:000005F1                 mov     [ebp+var_18], eax
.text:000005F4                 mov     [ebp+var_14], eax
.text:000005F7                 mov     [ebp+var_10], eax
.text:000005FA                 mov     eax, dword ptr ds:___security_cookie
.text:000005FF                 xor     eax, ebp
.text:00000601                 push    eax
.text:00000602                 lea     eax, [ebp+var_C]
.text:00000605                 mov     large fs:0, eax
.text:0000060B                 mov     [ebp+var_10], ecx
.text:0000060E                 mov     [ebp+var_28], 0
.text:00000615                 mov     eax, [ebp+var_10]
.text:00000618                 push    eax
.text:00000619                 lea     ecx, [ebp+var_20]
.text:0000061C                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:00000621                 mov     [ebp+var_4], 1
.text:00000628                 lea     ecx, [ebp+var_20] ; this
.text:0000062B                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:00000630                 cmp     eax, 7
.text:00000633                 jbe     short loc_665
.text:00000635                 push    offset $SG67977 ; ":$DATA"
.text:0000063A                 push    6               ; unsigned int
.text:0000063C                 lea     ecx, [ebp+var_20] ; this
.text:0000063F                 call    ?RightPtr@UString@@QBEPB_WI@Z ; UString::RightPtr(uint)
.text:00000644                 push    eax             ; wchar_t *
.text:00000645                 call    ?StringsAreEqualNoCase_Ascii@@YG_NPB_WPBD@Z ; StringsAreEqualNoCase_Ascii(wchar_t const *,char const *)
.text:0000064A                 movzx   ecx, al
.text:0000064D                 test    ecx, ecx
.text:0000064F                 jz      short loc_665
.text:00000651                 lea     ecx, [ebp+var_20] ; this
.text:00000654                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:00000659                 sub     eax, 6
.text:0000065C                 push    eax             ; unsigned int
.text:0000065D                 lea     ecx, [ebp+var_20] ; this
.text:00000660                 call    ?DeleteFrom@UString@@QAEXI@Z ; UString::DeleteFrom(uint)
.text:00000665
.text:00000665 loc_665:                                ; CODE XREF: NWindows::NFile::NFind::CStreamInfo::GetReducedName(void)+67j
.text:00000665                                         ; NWindows::NFile::NFind::CStreamInfo::GetReducedName(void)+83j
.text:00000665                 lea     edx, [ebp+var_20]
.text:00000668                 push    edx
.text:00000669                 mov     ecx, [ebp+arg_0]
.text:0000066C                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:00000671                 mov     eax, [ebp+var_28]
.text:00000674                 or      eax, 1
.text:00000677                 mov     [ebp+var_28], eax
.text:0000067A                 mov     byte ptr [ebp+var_4], 0
.text:0000067E                 lea     ecx, [ebp+var_20] ; this
.text:00000681                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000686                 mov     eax, [ebp+arg_0]
.text:00000689                 push    edx
.text:0000068A                 mov     ecx, ebp
.text:0000068C                 push    eax
.text:0000068D                 lea     edx, $LN10_1
.text:00000693                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000698                 pop     eax
.text:00000699                 pop     edx
.text:0000069A                 mov     ecx, [ebp+var_C]
.text:0000069D                 mov     large fs:0, ecx
.text:000006A4                 pop     ecx
.text:000006A5                 add     esp, 28h
.text:000006A8                 cmp     ebp, esp
.text:000006AA                 call    __RTC_CheckEsp
.text:000006AF                 mov     esp, ebp
.text:000006B1                 pop     ebp
.text:000006B2                 retn    4
.text:000006B2 ?GetReducedName@CStreamInfo@NFind@NFile@NWindows@@QBE?AVUString@@XZ endp
.text:000006B2
.text:000006B2 ; ---------------------------------------------------------------------------
.text:000006B5                 align 4
.text:000006B8 $LN10_1         dd 1                    ; DATA XREF: NWindows::NFile::NFind::CStreamInfo::GetReducedName(void)+C1o
.text:000006BC                 dd offset $LN9_1
.text:000006C0 $LN9_1          dd 0FFFFFFE0h, 0Ch      ; DATA XREF: .text:000006BCo
.text:000006C8                 dd offset $LN7_0
.text:000006CC $LN7_0          dd 0CCCC0073h, 3 dup(0CCCCCCCCh) ; DATA XREF: .text:000006C8o
.text:000006DC
.text:000006DC ; =============== S U B R O U T I N E =======================================
.text:000006DC
.text:000006DC ; Attributes: bp-based frame
.text:000006DC
.text:000006DC ; bool __thiscall NWindows::NFile::NFind::CFindStream::FindFirst(NWindows::NFile::NFind::CFindStream *this, const wchar_t *, struct NWindows::NFile::NFind::CStreamInfo *)
.text:000006DC                 public ?FindFirst@CFindStream@NFind@NFile@NWindows@@QAE_NPB_WAAUCStreamInfo@234@@Z
.text:000006DC ?FindFirst@CFindStream@NFind@NFile@NWindows@@QAE_NPB_WAAUCStreamInfo@234@@Z proc near
.text:000006DC                                         ; CODE XREF: NWindows::NFile::NFind::CStreamEnumerator::Next(NWindows::NFile::NFind::CStreamInfo &,bool &)+4Bp
.text:000006DC
.text:000006DC var_268         = byte ptr -268h
.text:000006DC var_264         = byte ptr -264h
.text:000006DC var_8           = dword ptr -8
.text:000006DC var_4           = dword ptr -4
.text:000006DC arg_0           = dword ptr  8
.text:000006DC arg_4           = dword ptr  0Ch
.text:000006DC
.text:000006DC                 push    ebp
.text:000006DD                 mov     ebp, esp
.text:000006DF                 sub     esp, 268h
.text:000006E5                 push    esi
.text:000006E6                 push    edi
.text:000006E7                 push    ecx
.text:000006E8                 lea     edi, [ebp+var_268]
.text:000006EE                 mov     ecx, 9Ah ; 'Ü'
.text:000006F3                 mov     eax, 0CCCCCCCCh
.text:000006F8                 rep stosd
.text:000006FA                 pop     ecx
.text:000006FB                 mov     eax, dword ptr ds:___security_cookie
.text:00000700                 xor     eax, ebp
.text:00000702                 mov     [ebp+var_4], eax
.text:00000705                 mov     [ebp+var_8], ecx
.text:00000708                 mov     ecx, [ebp+var_8] ; this
.text:0000070B                 call    ?Close@CFindFileBase@NFind@NFile@NWindows@@QAE_NXZ ; NWindows::NFile::NFind::CFindFileBase::Close(void)
.text:00000710                 movzx   eax, al
.text:00000713                 test    eax, eax
.text:00000715                 jnz     short loc_71E
.text:00000717                 xor     al, al
.text:00000719                 jmp     loc_7AE
.text:0000071E ; ---------------------------------------------------------------------------
.text:0000071E
.text:0000071E loc_71E:                                ; CODE XREF: NWindows::NFile::NFind::CFindStream::FindFirst(wchar_t const *,NWindows::NFile::NFind::CStreamInfo &)+39j
.text:0000071E                 cmp     ds:_g_FindFirstStreamW, 0
.text:00000725                 jnz     short loc_73C
.text:00000727                 mov     esi, esp
.text:00000729                 push    78h ; 'x'       ; dwErrCode
.text:0000072B                 call    dword ptr ds:__imp__SetLastError@4 ; SetLastError(x)
.text:00000731                 cmp     esi, esp
.text:00000733                 call    __RTC_CheckEsp
.text:00000738                 xor     al, al
.text:0000073A                 jmp     short loc_7AE
.text:0000073C ; ---------------------------------------------------------------------------
.text:0000073C
.text:0000073C loc_73C:                                ; CODE XREF: NWindows::NFile::NFind::CFindStream::FindFirst(wchar_t const *,NWindows::NFile::NFind::CStreamInfo &)+49j
.text:0000073C                 mov     esi, esp
.text:0000073E                 push    0               ; dwErrCode
.text:00000740                 call    dword ptr ds:__imp__SetLastError@4 ; SetLastError(x)
.text:00000746                 cmp     esi, esp
.text:00000748                 call    __RTC_CheckEsp
.text:0000074D                 mov     esi, esp
.text:0000074F                 push    0
.text:00000751                 lea     ecx, [ebp+var_264]
.text:00000757                 push    ecx
.text:00000758                 push    0
.text:0000075A                 mov     edx, [ebp+arg_0]
.text:0000075D                 push    edx
.text:0000075E                 call    ds:_g_FindFirstStreamW
.text:00000764                 cmp     esi, esp
.text:00000766                 call    __RTC_CheckEsp
.text:0000076B                 mov     ecx, [ebp+var_8]
.text:0000076E                 mov     [ecx], eax
.text:00000770                 mov     edx, [ebp+var_8]
.text:00000773                 cmp     dword ptr [edx], 0FFFFFFFFh
.text:00000776                 jnz     short loc_790
.text:00000778                 mov     esi, esp
.text:0000077A                 call    dword ptr ds:__imp__GetLastError@0 ; GetLastError()
.text:00000780                 cmp     esi, esp
.text:00000782                 call    __RTC_CheckEsp
.text:00000787                 cmp     eax, 26h ; '&'
.text:0000078A                 jnz     short loc_790
.text:0000078C                 xor     al, al
.text:0000078E                 jmp     short loc_7AE
.text:00000790 ; ---------------------------------------------------------------------------
.text:00000790
.text:00000790 loc_790:                                ; CODE XREF: NWindows::NFile::NFind::CFindStream::FindFirst(wchar_t const *,NWindows::NFile::NFind::CStreamInfo &)+9Aj
.text:00000790                                         ; NWindows::NFile::NFind::CFindStream::FindFirst(wchar_t const *,NWindows::NFile::NFind::CStreamInfo &)+AEj
.text:00000790                 mov     eax, [ebp+var_8]
.text:00000793                 cmp     dword ptr [eax], 0FFFFFFFFh
.text:00000796                 jnz     short loc_79C
.text:00000798                 xor     al, al
.text:0000079A                 jmp     short loc_7AE
.text:0000079C ; ---------------------------------------------------------------------------
.text:0000079C
.text:0000079C loc_79C:                                ; CODE XREF: NWindows::NFile::NFind::CFindStream::FindFirst(wchar_t const *,NWindows::NFile::NFind::CStreamInfo &)+BAj
.text:0000079C                 mov     ecx, [ebp+arg_4]
.text:0000079F                 push    ecx
.text:000007A0                 lea     edx, [ebp+var_264]
.text:000007A6                 push    edx
.text:000007A7                 call    ?Convert_WIN32_FIND_STREAM_DATA_to_StreamInfo@NFind@NFile@NWindows@@YGXABUMY_WIN32_FIND_STREAM_DATA@@AAUCStreamInfo@123@@Z ; NWindows::NFile::NFind::Convert_WIN32_FIND_STREAM_DATA_to_StreamInfo(MY_WIN32_FIND_STREAM_DATA const &,NWindows::NFile::NFind::CStreamInfo &)
.text:000007AC                 mov     al, 1
.text:000007AE
.text:000007AE loc_7AE:                                ; CODE XREF: NWindows::NFile::NFind::CFindStream::FindFirst(wchar_t const *,NWindows::NFile::NFind::CStreamInfo &)+3Dj
.text:000007AE                                         ; NWindows::NFile::NFind::CFindStream::FindFirst(wchar_t const *,NWindows::NFile::NFind::CStreamInfo &)+5Ej ...
.text:000007AE                 push    edx
.text:000007AF                 mov     ecx, ebp
.text:000007B1                 push    eax
.text:000007B2                 lea     edx, $LN10_2
.text:000007B8                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000007BD                 pop     eax
.text:000007BE                 pop     edx
.text:000007BF                 pop     edi
.text:000007C0                 pop     esi
.text:000007C1                 mov     ecx, [ebp+var_4]
.text:000007C4                 xor     ecx, ebp
.text:000007C6                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000007CB                 add     esp, 268h
.text:000007D1                 cmp     ebp, esp
.text:000007D3                 call    __RTC_CheckEsp
.text:000007D8                 mov     esp, ebp
.text:000007DA                 pop     ebp
.text:000007DB                 retn    8
.text:000007DB ?FindFirst@CFindStream@NFind@NFile@NWindows@@QAE_NPB_WAAUCStreamInfo@234@@Z endp
.text:000007DB
.text:000007DB ; ---------------------------------------------------------------------------
.text:000007DE                 align 10h
.text:000007E0 $LN10_2         dd 1                    ; DATA XREF: NWindows::NFile::NFind::CFindStream::FindFirst(wchar_t const *,NWindows::NFile::NFind::CStreamInfo &)+D6o
.text:000007E4                 dd offset $LN9_2
.text:000007E8 $LN9_2          dd 0FFFFFD9Ch, 258h     ; DATA XREF: .text:000007E4o
.text:000007F0                 dd offset $LN8_0
.text:000007F4 $LN8_0          dd 0CC006473h, 0CCCCCCCCh ; DATA XREF: .text:000007F0o
.text:000007FC
.text:000007FC ; =============== S U B R O U T I N E =======================================
.text:000007FC
.text:000007FC ; Attributes: bp-based frame
.text:000007FC
.text:000007FC ; void __stdcall NWindows::NFile::NFind::Convert_WIN32_FIND_STREAM_DATA_to_StreamInfo(struct MY_WIN32_FIND_STREAM_DATA const &, struct NWindows::NFile::NFind::CStreamInfo &)
.text:000007FC ?Convert_WIN32_FIND_STREAM_DATA_to_StreamInfo@NFind@NFile@NWindows@@YGXABUMY_WIN32_FIND_STREAM_DATA@@AAUCStreamInfo@123@@Z proc near
.text:000007FC                                         ; CODE XREF: NWindows::NFile::NFind::CFindStream::FindFirst(wchar_t const *,NWindows::NFile::NFind::CStreamInfo &)+CBp
.text:000007FC                                         ; NWindows::NFile::NFind::CFindStream::FindNext(NWindows::NFile::NFind::CStreamInfo &)+79p
.text:000007FC
.text:000007FC arg_0           = dword ptr  8
.text:000007FC arg_4           = dword ptr  0Ch
.text:000007FC
.text:000007FC                 push    ebp
.text:000007FD                 mov     ebp, esp
.text:000007FF                 mov     eax, [ebp+arg_4]
.text:00000802                 mov     ecx, [ebp+arg_0]
.text:00000805                 mov     edx, [ecx]
.text:00000807                 mov     [eax+10h], edx
.text:0000080A                 mov     ecx, [ecx+4]
.text:0000080D                 mov     [eax+14h], ecx
.text:00000810                 mov     edx, [ebp+arg_0]
.text:00000813                 add     edx, 8
.text:00000816                 push    edx
.text:00000817                 mov     ecx, [ebp+arg_4]
.text:0000081A                 call    ??4UString@@QAEAAV0@PB_W@Z ; UString::operator=(wchar_t const *)
.text:0000081F                 cmp     ebp, esp
.text:00000821                 call    __RTC_CheckEsp
.text:00000826                 pop     ebp
.text:00000827                 retn    8
.text:00000827 ?Convert_WIN32_FIND_STREAM_DATA_to_StreamInfo@NFind@NFile@NWindows@@YGXABUMY_WIN32_FIND_STREAM_DATA@@AAUCStreamInfo@123@@Z endp
.text:00000827
.text:00000827 ; ---------------------------------------------------------------------------
.text:0000082A                 align 4
.text:0000082C
.text:0000082C ; =============== S U B R O U T I N E =======================================
.text:0000082C
.text:0000082C ; Attributes: bp-based frame
.text:0000082C
.text:0000082C ; bool __thiscall NWindows::NFile::NFind::CFindStream::FindNext(NWindows::NFile::NFind::CFindStream *this, struct NWindows::NFile::NFind::CStreamInfo *)
.text:0000082C                 public ?FindNext@CFindStream@NFind@NFile@NWindows@@QAE_NAAUCStreamInfo@234@@Z
.text:0000082C ?FindNext@CFindStream@NFind@NFile@NWindows@@QAE_NAAUCStreamInfo@234@@Z proc near
.text:0000082C                                         ; CODE XREF: NWindows::NFile::NFind::CStreamEnumerator::Next(NWindows::NFile::NFind::CStreamInfo &,bool &)+2Ep
.text:0000082C
.text:0000082C var_268         = byte ptr -268h
.text:0000082C var_264         = byte ptr -264h
.text:0000082C var_8           = dword ptr -8
.text:0000082C var_4           = dword ptr -4
.text:0000082C arg_0           = dword ptr  8
.text:0000082C
.text:0000082C                 push    ebp
.text:0000082D                 mov     ebp, esp
.text:0000082F                 sub     esp, 268h
.text:00000835                 push    esi
.text:00000836                 push    edi
.text:00000837                 push    ecx
.text:00000838                 lea     edi, [ebp+var_268]
.text:0000083E                 mov     ecx, 9Ah ; 'Ü'
.text:00000843                 mov     eax, 0CCCCCCCCh
.text:00000848                 rep stosd
.text:0000084A                 pop     ecx
.text:0000084B                 mov     eax, dword ptr ds:___security_cookie
.text:00000850                 xor     eax, ebp
.text:00000852                 mov     [ebp+var_4], eax
.text:00000855                 mov     [ebp+var_8], ecx
.text:00000858                 cmp     ds:_g_FindNextStreamW, 0
.text:0000085F                 jnz     short loc_876
.text:00000861                 mov     esi, esp
.text:00000863                 push    78h ; 'x'       ; dwErrCode
.text:00000865                 call    dword ptr ds:__imp__SetLastError@4 ; SetLastError(x)
.text:0000086B                 cmp     esi, esp
.text:0000086D                 call    __RTC_CheckEsp
.text:00000872                 xor     al, al
.text:00000874                 jmp     short loc_8AC
.text:00000876 ; ---------------------------------------------------------------------------
.text:00000876
.text:00000876 loc_876:                                ; CODE XREF: NWindows::NFile::NFind::CFindStream::FindNext(NWindows::NFile::NFind::CStreamInfo &)+33j
.text:00000876                 mov     esi, esp
.text:00000878                 lea     eax, [ebp+var_264]
.text:0000087E                 push    eax
.text:0000087F                 mov     ecx, [ebp+var_8]
.text:00000882                 mov     edx, [ecx]
.text:00000884                 push    edx
.text:00000885                 call    ds:_g_FindNextStreamW
.text:0000088B                 cmp     esi, esp
.text:0000088D                 call    __RTC_CheckEsp
.text:00000892                 test    eax, eax
.text:00000894                 jnz     short loc_89A
.text:00000896                 xor     al, al
.text:00000898                 jmp     short loc_8AC
.text:0000089A ; ---------------------------------------------------------------------------
.text:0000089A
.text:0000089A loc_89A:                                ; CODE XREF: NWindows::NFile::NFind::CFindStream::FindNext(NWindows::NFile::NFind::CStreamInfo &)+68j
.text:0000089A                 mov     eax, [ebp+arg_0]
.text:0000089D                 push    eax
.text:0000089E                 lea     ecx, [ebp+var_264]
.text:000008A4                 push    ecx
.text:000008A5                 call    ?Convert_WIN32_FIND_STREAM_DATA_to_StreamInfo@NFind@NFile@NWindows@@YGXABUMY_WIN32_FIND_STREAM_DATA@@AAUCStreamInfo@123@@Z ; NWindows::NFile::NFind::Convert_WIN32_FIND_STREAM_DATA_to_StreamInfo(MY_WIN32_FIND_STREAM_DATA const &,NWindows::NFile::NFind::CStreamInfo &)
.text:000008AA                 mov     al, 1
.text:000008AC
.text:000008AC loc_8AC:                                ; CODE XREF: NWindows::NFile::NFind::CFindStream::FindNext(NWindows::NFile::NFind::CStreamInfo &)+48j
.text:000008AC                                         ; NWindows::NFile::NFind::CFindStream::FindNext(NWindows::NFile::NFind::CStreamInfo &)+6Cj
.text:000008AC                 push    edx
.text:000008AD                 mov     ecx, ebp
.text:000008AF                 push    eax
.text:000008B0                 lea     edx, $LN7_1
.text:000008B6                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000008BB                 pop     eax
.text:000008BC                 pop     edx
.text:000008BD                 pop     edi
.text:000008BE                 pop     esi
.text:000008BF                 mov     ecx, [ebp+var_4]
.text:000008C2                 xor     ecx, ebp
.text:000008C4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000008C9                 add     esp, 268h
.text:000008CF                 cmp     ebp, esp
.text:000008D1                 call    __RTC_CheckEsp
.text:000008D6                 mov     esp, ebp
.text:000008D8                 pop     ebp
.text:000008D9                 retn    4
.text:000008D9 ?FindNext@CFindStream@NFind@NFile@NWindows@@QAE_NAAUCStreamInfo@234@@Z endp
.text:000008D9
.text:000008D9 ; ---------------------------------------------------------------------------
.text:000008DC $LN7_1          dd 1                    ; DATA XREF: NWindows::NFile::NFind::CFindStream::FindNext(NWindows::NFile::NFind::CStreamInfo &)+84o
.text:000008E0                 dd offset $LN6
.text:000008E4 $LN6            dd 0FFFFFD9Ch, 258h     ; DATA XREF: .text:000008E0o
.text:000008EC                 dd offset $LN5
.text:000008F0 $LN5            dd 0CC006473h, 2 dup(0CCCCCCCCh) ; DATA XREF: .text:000008ECo
.text:000008FC
.text:000008FC ; =============== S U B R O U T I N E =======================================
.text:000008FC
.text:000008FC ; Attributes: bp-based frame
.text:000008FC
.text:000008FC ; bool __thiscall NWindows::NFile::NFind::CStreamEnumerator::Next(NWindows::NFile::NFind::CStreamEnumerator *this, struct NWindows::NFile::NFind::CStreamInfo *, bool *)
.text:000008FC                 public ?Next@CStreamEnumerator@NFind@NFile@NWindows@@QAE_NAAUCStreamInfo@234@AA_N@Z
.text:000008FC ?Next@CStreamEnumerator@NFind@NFile@NWindows@@QAE_NAAUCStreamInfo@234@AA_N@Z proc near
.text:000008FC                                         ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+2F8p
.text:000008FC
.text:000008FC var_8           = dword ptr -8
.text:000008FC var_4           = dword ptr -4
.text:000008FC arg_0           = dword ptr  8
.text:000008FC arg_4           = dword ptr  0Ch
.text:000008FC
.text:000008FC                 push    ebp
.text:000008FD                 mov     ebp, esp
.text:000008FF                 sub     esp, 8
.text:00000902                 push    esi
.text:00000903                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000090A                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000911                 mov     [ebp+var_4], ecx
.text:00000914                 mov     ecx, [ebp+var_4] ; this
.text:00000917                 call    ?IsHandleAllocated@CFindFileBase@NFind@NFile@NWindows@@QBE_NXZ ; NWindows::NFile::NFind::CFindFileBase::IsHandleAllocated(void)
.text:0000091C                 movzx   eax, al
.text:0000091F                 test    eax, eax
.text:00000921                 jz      short loc_934
.text:00000923                 mov     ecx, [ebp+arg_0]
.text:00000926                 push    ecx             ; struct NWindows::NFile::NFind::CStreamInfo *
.text:00000927                 mov     ecx, [ebp+var_4] ; this
.text:0000092A                 call    ?FindNext@CFindStream@NFind@NFile@NWindows@@QAE_NAAUCStreamInfo@234@@Z ; NWindows::NFile::NFind::CFindStream::FindNext(NWindows::NFile::NFind::CStreamInfo &)
.text:0000092F                 mov     byte ptr [ebp+var_8+3], al
.text:00000932                 jmp     short loc_94F
.text:00000934 ; ---------------------------------------------------------------------------
.text:00000934
.text:00000934 loc_934:                                ; CODE XREF: NWindows::NFile::NFind::CStreamEnumerator::Next(NWindows::NFile::NFind::CStreamInfo &,bool &)+25j
.text:00000934                 mov     edx, [ebp+arg_0]
.text:00000937                 push    edx             ; struct NWindows::NFile::NFind::CStreamInfo *
.text:00000938                 mov     ecx, [ebp+var_4]
.text:0000093B                 add     ecx, 4
.text:0000093E                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00000943                 push    eax             ; wchar_t *
.text:00000944                 mov     ecx, [ebp+var_4] ; this
.text:00000947                 call    ?FindFirst@CFindStream@NFind@NFile@NWindows@@QAE_NPB_WAAUCStreamInfo@234@@Z ; NWindows::NFile::NFind::CFindStream::FindFirst(wchar_t const *,NWindows::NFile::NFind::CStreamInfo &)
.text:0000094C                 mov     byte ptr [ebp+var_8+3], al
.text:0000094F
.text:0000094F loc_94F:                                ; CODE XREF: NWindows::NFile::NFind::CStreamEnumerator::Next(NWindows::NFile::NFind::CStreamInfo &,bool &)+36j
.text:0000094F                 movzx   eax, byte ptr [ebp+var_8+3]
.text:00000953                 test    eax, eax
.text:00000955                 jz      short loc_961
.text:00000957                 mov     ecx, [ebp+arg_4]
.text:0000095A                 mov     byte ptr [ecx], 1
.text:0000095D                 mov     al, 1
.text:0000095F                 jmp     short loc_980
.text:00000961 ; ---------------------------------------------------------------------------
.text:00000961
.text:00000961 loc_961:                                ; CODE XREF: NWindows::NFile::NFind::CStreamEnumerator::Next(NWindows::NFile::NFind::CStreamInfo &,bool &)+59j
.text:00000961                 mov     edx, [ebp+arg_4]
.text:00000964                 mov     byte ptr [edx], 0
.text:00000967                 mov     esi, esp
.text:00000969                 call    dword ptr ds:__imp__GetLastError@0 ; GetLastError()
.text:0000096F                 cmp     esi, esp
.text:00000971                 call    __RTC_CheckEsp
.text:00000976                 xor     ecx, ecx
.text:00000978                 cmp     eax, 26h ; '&'
.text:0000097B                 setz    cl
.text:0000097E                 mov     al, cl
.text:00000980
.text:00000980 loc_980:                                ; CODE XREF: NWindows::NFile::NFind::CStreamEnumerator::Next(NWindows::NFile::NFind::CStreamInfo &,bool &)+63j
.text:00000980                 pop     esi
.text:00000981                 add     esp, 8
.text:00000984                 cmp     ebp, esp
.text:00000986                 call    __RTC_CheckEsp
.text:0000098B                 mov     esp, ebp
.text:0000098D                 pop     ebp
.text:0000098E                 retn    8
.text:0000098E ?Next@CStreamEnumerator@NFind@NFile@NWindows@@QAE_NAAUCStreamInfo@234@AA_N@Z endp
.text:0000098E
.text:0000098E ; ---------------------------------------------------------------------------
.text:00000991                 db 0Bh dup(0CCh)
.text:0000099C
.text:0000099C ; =============== S U B R O U T I N E =======================================
.text:0000099C
.text:0000099C ; Attributes: bp-based frame
.text:0000099C
.text:0000099C ; void __thiscall NWindows::NFile::NFind::CFileInfoBase::ClearBase(NWindows::NFile::NFind::CFileInfoBase *__hidden this)
.text:0000099C                 public ?ClearBase@CFileInfoBase@NFind@NFile@NWindows@@QAEXXZ
.text:0000099C ?ClearBase@CFileInfoBase@NFind@NFile@NWindows@@QAEXXZ proc near
.text:0000099C                                         ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+5Bp
.text:0000099C                                         ; NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+24Bp ...
.text:0000099C
.text:0000099C var_4           = dword ptr -4
.text:0000099C
.text:0000099C                 push    ebp
.text:0000099D                 mov     ebp, esp
.text:0000099F                 push    ecx
.text:000009A0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000009A7                 mov     [ebp+var_4], ecx
.text:000009AA                 mov     eax, [ebp+var_4]
.text:000009AD                 mov     dword ptr [eax], 0
.text:000009B3                 mov     dword ptr [eax+4], 0
.text:000009BA                 mov     ecx, [ebp+var_4]
.text:000009BD                 mov     dword ptr [ecx+0Ch], 0
.text:000009C4                 mov     edx, [ebp+var_4]
.text:000009C7                 mov     dword ptr [edx+8], 0
.text:000009CE                 mov     eax, [ebp+var_4]
.text:000009D1                 mov     dword ptr [eax+14h], 0
.text:000009D8                 mov     ecx, [ebp+var_4]
.text:000009DB                 mov     dword ptr [ecx+10h], 0
.text:000009E2                 mov     edx, [ebp+var_4]
.text:000009E5                 mov     dword ptr [edx+1Ch], 0
.text:000009EC                 mov     eax, [ebp+var_4]
.text:000009EF                 mov     dword ptr [eax+18h], 0
.text:000009F6                 mov     ecx, [ebp+var_4]
.text:000009F9                 mov     dword ptr [ecx+20h], 0
.text:00000A00                 mov     edx, [ebp+var_4]
.text:00000A03                 mov     byte ptr [edx+24h], 0
.text:00000A07                 mov     eax, [ebp+var_4]
.text:00000A0A                 mov     byte ptr [eax+25h], 0
.text:00000A0E                 mov     esp, ebp
.text:00000A10                 pop     ebp
.text:00000A11                 retn
.text:00000A11 ?ClearBase@CFileInfoBase@NFind@NFile@NWindows@@QAEXXZ endp
.text:00000A11
.text:00000A11 ; ---------------------------------------------------------------------------
.text:00000A12                 db 0Ah dup(0CCh)
.text:00000A1C
.text:00000A1C ; =============== S U B R O U T I N E =======================================
.text:00000A1C
.text:00000A1C ; Attributes: bp-based frame
.text:00000A1C
.text:00000A1C ; unsigned __int32 __stdcall NWindows::NFile::NFind::GetFileAttrib(LPCWSTR lpFileName, const wchar_t *)
.text:00000A1C                 public ?GetFileAttrib@NFind@NFile@NWindows@@YGKPB_W@Z
.text:00000A1C ?GetFileAttrib@NFind@NFile@NWindows@@YGKPB_W@Z proc near
.text:00000A1C                                         ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+58Ep
.text:00000A1C                                         ; NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+62Cp ...
.text:00000A1C
.text:00000A1C var_28          = dword ptr -28h
.text:00000A1C var_24          = dword ptr -24h
.text:00000A1C var_20          = dword ptr -20h
.text:00000A1C var_1C          = dword ptr -1Ch
.text:00000A1C var_18          = dword ptr -18h
.text:00000A1C var_14          = dword ptr -14h
.text:00000A1C var_10          = dword ptr -10h
.text:00000A1C var_C           = dword ptr -0Ch
.text:00000A1C var_4           = dword ptr -4
.text:00000A1C lpFileName      = dword ptr  8
.text:00000A1C
.text:00000A1C                 push    ebp
.text:00000A1D                 mov     ebp, esp
.text:00000A1F                 push    0FFFFFFFFh
.text:00000A21                 push    offset __ehhandler$?GetFileAttrib@NFind@NFile@NWindows@@YGKPB_W@Z
.text:00000A26                 mov     eax, large fs:0
.text:00000A2C                 push    eax
.text:00000A2D                 sub     esp, 1Ch
.text:00000A30                 push    esi
.text:00000A31                 mov     eax, 0CCCCCCCCh
.text:00000A36                 mov     [ebp+var_28], eax
.text:00000A39                 mov     [ebp+var_24], eax
.text:00000A3C                 mov     [ebp+var_20], eax
.text:00000A3F                 mov     [ebp+var_1C], eax
.text:00000A42                 mov     [ebp+var_18], eax
.text:00000A45                 mov     [ebp+var_14], eax
.text:00000A48                 mov     [ebp+var_10], eax
.text:00000A4B                 mov     eax, dword ptr ds:___security_cookie
.text:00000A50                 xor     eax, ebp
.text:00000A52                 push    eax
.text:00000A53                 lea     eax, [ebp+var_C]
.text:00000A56                 mov     large fs:0, eax
.text:00000A5C                 movzx   eax, byte ptr ds:?g_IsNT@@3_NA ; bool g_IsNT
.text:00000A63                 test    eax, eax
.text:00000A65                 jnz     short loc_AB5
.text:00000A67                 mov     ecx, [ebp+lpFileName]
.text:00000A6A                 push    ecx
.text:00000A6B                 lea     edx, [ebp+var_20]
.text:00000A6E                 push    edx
.text:00000A6F                 call    ?fs2fas@@YG?AVAString@@PB_W@Z ; fs2fas(wchar_t const *)
.text:00000A74                 mov     [ebp+var_24], eax
.text:00000A77                 mov     eax, [ebp+var_24]
.text:00000A7A                 mov     [ebp+var_28], eax
.text:00000A7D                 mov     [ebp+var_4], 0
.text:00000A84                 mov     ecx, [ebp+var_28]
.text:00000A87                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:00000A8C                 mov     esi, esp
.text:00000A8E                 push    eax             ; lpFileName
.text:00000A8F                 call    dword ptr ds:__imp__GetFileAttributesA@4 ; GetFileAttributesA(x)
.text:00000A95                 cmp     esi, esp
.text:00000A97                 call    __RTC_CheckEsp
.text:00000A9C                 mov     [ebp+var_14], eax
.text:00000A9F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000AA6                 lea     ecx, [ebp+var_20] ; this
.text:00000AA9                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00000AAE                 mov     eax, [ebp+var_14]
.text:00000AB1                 jmp     short loc_AD9
.text:00000AB3 ; ---------------------------------------------------------------------------
.text:00000AB3                 jmp     short loc_AD9
.text:00000AB5 ; ---------------------------------------------------------------------------
.text:00000AB5
.text:00000AB5 loc_AB5:                                ; CODE XREF: NWindows::NFile::NFind::GetFileAttrib(wchar_t const *)+49j
.text:00000AB5                 mov     esi, esp
.text:00000AB7                 mov     ecx, [ebp+lpFileName]
.text:00000ABA                 push    ecx             ; lpFileName
.text:00000ABB                 call    dword ptr ds:__imp__GetFileAttributesW@4 ; GetFileAttributesW(x)
.text:00000AC1                 cmp     esi, esp
.text:00000AC3                 call    __RTC_CheckEsp
.text:00000AC8                 mov     [ebp+var_10], eax
.text:00000ACB                 cmp     [ebp+var_10], 0FFFFFFFFh
.text:00000ACF                 jz      short loc_AD6
.text:00000AD1                 mov     eax, [ebp+var_10]
.text:00000AD4                 jmp     short loc_AD9
.text:00000AD6 ; ---------------------------------------------------------------------------
.text:00000AD6
.text:00000AD6 loc_AD6:                                ; CODE XREF: NWindows::NFile::NFind::GetFileAttrib(wchar_t const *)+B3j
.text:00000AD6                 or      eax, 0FFFFFFFFh
.text:00000AD9
.text:00000AD9 loc_AD9:                                ; CODE XREF: NWindows::NFile::NFind::GetFileAttrib(wchar_t const *)+95j
.text:00000AD9                                         ; NWindows::NFile::NFind::GetFileAttrib(wchar_t const *)+97j ...
.text:00000AD9                 mov     ecx, [ebp+var_C]
.text:00000ADC                 mov     large fs:0, ecx
.text:00000AE3                 pop     ecx
.text:00000AE4                 pop     esi
.text:00000AE5                 add     esp, 28h
.text:00000AE8                 cmp     ebp, esp
.text:00000AEA                 call    __RTC_CheckEsp
.text:00000AEF                 mov     esp, ebp
.text:00000AF1                 pop     ebp
.text:00000AF2                 retn    4
.text:00000AF2 ?GetFileAttrib@NFind@NFile@NWindows@@YGKPB_W@Z endp
.text:00000AF2
.text:00000AF2 ; ---------------------------------------------------------------------------
.text:00000AF5                 db 7 dup(0CCh)
.text:00000AFC
.text:00000AFC ; =============== S U B R O U T I N E =======================================
.text:00000AFC
.text:00000AFC ; Attributes: bp-based frame
.text:00000AFC
.text:00000AFC ; bool __thiscall NWindows::NFile::NFind::CFileInfo::Find(NWindows::NFile::NFind::CFileInfo *this, const wchar_t *)
.text:00000AFC                 public ?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z
.text:00000AFC ?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z proc near
.text:00000AFC                                         ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+284p
.text:00000AFC                                         ; NWindows::NFile::NFind::DoesFileExist(wchar_t const *)+4Bp ...
.text:00000AFC
.text:00000AFC var_12C         = word ptr -12Ch
.text:00000AFC var_12A         = byte ptr -12Ah
.text:00000AFC var_129         = byte ptr -129h
.text:00000AFC var_128         = byte ptr -128h
.text:00000AFC var_127         = byte ptr -127h
.text:00000AFC var_126         = byte ptr -126h
.text:00000AFC var_125         = byte ptr -125h
.text:00000AFC var_124         = byte ptr -124h
.text:00000AFC var_123         = byte ptr -123h
.text:00000AFC var_122         = byte ptr -122h
.text:00000AFC var_121         = byte ptr -121h
.text:00000AFC var_120         = dword ptr -120h
.text:00000AFC var_119         = byte ptr -119h
.text:00000AFC var_114         = byte ptr -114h
.text:00000AFC var_104         = dword ptr -104h
.text:00000AFC var_100         = dword ptr -100h
.text:00000AFC var_FC          = dword ptr -0FCh
.text:00000AFC var_F8          = dword ptr -0F8h
.text:00000AFC dwErrCode       = dword ptr -0F4h
.text:00000AFC var_EC          = byte ptr -0ECh
.text:00000AFC var_DD          = byte ptr -0DDh
.text:00000AFC var_D4          = byte ptr -0D4h
.text:00000AFC var_C4          = dword ptr -0C4h
.text:00000AFC var_C0          = dword ptr -0C0h
.text:00000AFC var_B4          = byte ptr -0B4h
.text:00000AFC var_9D          = byte ptr -9Dh
.text:00000AFC var_9C          = dword ptr -9Ch
.text:00000AFC var_94          = byte ptr -94h
.text:00000AFC var_80          = byte ptr -80h
.text:00000AFC var_70          = dword ptr -70h
.text:00000AFC var_68          = byte ptr -68h
.text:00000AFC var_63          = byte ptr -63h
.text:00000AFC var_60          = dword ptr -60h
.text:00000AFC var_5C          = dword ptr -5Ch
.text:00000AFC var_50          = qword ptr -50h
.text:00000AFC var_40          = qword ptr -40h
.text:00000AFC var_30          = word ptr -30h
.text:00000AFC var_20          = word ptr -20h
.text:00000AFC var_1E          = word ptr -1Eh
.text:00000AFC var_1C          = word ptr -1Ch
.text:00000AFC var_1A          = word ptr -1Ah
.text:00000AFC var_14          = dword ptr -14h
.text:00000AFC var_10          = dword ptr -10h
.text:00000AFC var_C           = dword ptr -0Ch
.text:00000AFC var_4           = dword ptr -4
.text:00000AFC lpFileName      = dword ptr  8
.text:00000AFC
.text:00000AFC                 push    ebp
.text:00000AFD                 mov     ebp, esp
.text:00000AFF                 push    0FFFFFFFFh
.text:00000B01                 push    offset __ehhandler$?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z
.text:00000B06                 mov     eax, large fs:0
.text:00000B0C                 push    eax
.text:00000B0D                 sub     esp, 120h
.text:00000B13                 push    esi
.text:00000B14                 push    edi             ; wchar_t *
.text:00000B15                 push    ecx
.text:00000B16                 lea     edi, [ebp+var_12C]
.text:00000B1C                 mov     ecx, 48h ; 'H'
.text:00000B21                 mov     eax, 0CCCCCCCCh
.text:00000B26                 rep stosd
.text:00000B28                 pop     ecx
.text:00000B29                 mov     eax, dword ptr ds:___security_cookie
.text:00000B2E                 xor     eax, ebp
.text:00000B30                 mov     [ebp+var_10], eax
.text:00000B33                 push    eax             ; wchar_t *
.text:00000B34                 lea     eax, [ebp+var_C]
.text:00000B37                 mov     large fs:0, eax
.text:00000B3D                 mov     [ebp+var_14], ecx
.text:00000B40                 mov     eax, [ebp+lpFileName]
.text:00000B43                 push    eax             ; wchar_t *
.text:00000B44                 call    ?IsDevicePath@NName@NFile@NWindows@@YG_NPB_W@Z ; NWindows::NFile::NName::IsDevicePath(wchar_t const *)
.text:00000B49                 movzx   ecx, al
.text:00000B4C                 test    ecx, ecx
.text:00000B4E                 jz      loc_C61
.text:00000B54                 mov     ecx, [ebp+var_14] ; this
.text:00000B57                 call    ?ClearBase@CFileInfoBase@NFind@NFile@NWindows@@QAEXXZ ; NWindows::NFile::NFind::CFileInfoBase::ClearBase(void)
.text:00000B5C                 mov     edx, [ebp+lpFileName]
.text:00000B5F                 add     edx, 8
.text:00000B62                 push    edx             ; wchar_t *
.text:00000B63                 mov     ecx, [ebp+var_14]
.text:00000B66                 add     ecx, 28h ; '('
.text:00000B69                 call    ??4UString@@QAEAAV0@PB_W@Z ; UString::operator=(wchar_t const *)
.text:00000B6E                 mov     eax, [ebp+var_14]
.text:00000B71                 mov     byte ptr [eax+25h], 1
.text:00000B75                 mov     ecx, [ebp+lpFileName]
.text:00000B78                 add     ecx, 8
.text:00000B7B                 push    ecx             ; unsigned __int64 *
.text:00000B7C                 call    ?IsDrivePath2@NName@NFile@NWindows@@YG_NPB_W@Z ; NWindows::NFile::NName::IsDrivePath2(wchar_t const *)
.text:00000B81                 movzx   edx, al
.text:00000B84                 test    edx, edx
.text:00000B86                 jz      short loc_BE7
.text:00000B88                 mov     eax, [ebp+lpFileName]
.text:00000B8B                 movzx   ecx, word ptr [eax+0Ch]
.text:00000B8F                 test    ecx, ecx
.text:00000B91                 jnz     short loc_BE7
.text:00000B93                 mov     edx, [ebp+lpFileName]
.text:00000B96                 mov     ax, [edx+8]
.text:00000B9A                 mov     [ebp+var_20], ax
.text:00000B9E                 mov     ecx, 3Ah ; ':'
.text:00000BA3                 mov     [ebp+var_1E], cx
.text:00000BA7                 mov     edx, 5Ch ; '\'
.text:00000BAC                 mov     [ebp+var_1C], dx
.text:00000BB0                 xor     eax, eax
.text:00000BB2                 mov     [ebp+var_1A], ax
.text:00000BB6                 lea     ecx, [ebp+var_50]
.text:00000BB9                 push    ecx             ; unsigned __int64 *
.text:00000BBA                 lea     edx, [ebp+var_40]
.text:00000BBD                 push    edx             ; unsigned __int64 *
.text:00000BBE                 lea     eax, [ebp+var_30]
.text:00000BC1                 push    eax             ; wchar_t *
.text:00000BC2                 lea     ecx, [ebp+var_20]
.text:00000BC5                 push    ecx             ; this
.text:00000BC6                 call    ?MyGetDiskFreeSpace@NSystem@NFile@NWindows@@YG_NPB_WAA_K11@Z ; NWindows::NFile::NSystem::MyGetDiskFreeSpace(wchar_t const *,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &)
.text:00000BCB                 movzx   edx, al
.text:00000BCE                 test    edx, edx
.text:00000BD0                 jz      short loc_BE7
.text:00000BD2                 mov     eax, [ebp+var_14]
.text:00000BD5                 mov     ecx, dword ptr [ebp+var_40]
.text:00000BD8                 mov     [eax], ecx
.text:00000BDA                 mov     edx, dword ptr [ebp+var_40+4]
.text:00000BDD                 mov     [eax+4], edx
.text:00000BE0                 mov     al, 1
.text:00000BE2                 jmp     loc_1393
.text:00000BE7 ; ---------------------------------------------------------------------------
.text:00000BE7
.text:00000BE7 loc_BE7:                                ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+8Aj
.text:00000BE7                                         ; NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+95j ...
.text:00000BE7                 lea     ecx, [ebp+var_68] ; this
.text:00000BEA                 call    ??0CInFile@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::CInFile::CInFile(void)
.text:00000BEF                 mov     [ebp+var_4], 0
.text:00000BF6                 mov     eax, [ebp+lpFileName]
.text:00000BF9                 push    eax             ; wchar_t *
.text:00000BFA                 lea     ecx, [ebp+var_68] ; this
.text:00000BFD                 call    ?Open@CInFile@NIO@NFile@NWindows@@QAE_NPB_W@Z ; NWindows::NFile::NIO::CInFile::Open(wchar_t const *)
.text:00000C02                 movzx   ecx, al
.text:00000C05                 test    ecx, ecx
.text:00000C07                 jnz     short loc_C2A
.text:00000C09                 mov     [ebp+var_121], 0
.text:00000C10                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000C17                 lea     ecx, [ebp+var_68] ; this
.text:00000C1A                 call    ??1CInFile@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::CInFile::~CInFile(void)
.text:00000C1F                 mov     al, [ebp+var_121]
.text:00000C25                 jmp     loc_1393
.text:00000C2A ; ---------------------------------------------------------------------------
.text:00000C2A
.text:00000C2A loc_C2A:                                ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+10Bj
.text:00000C2A                 movzx   edx, [ebp+var_63]
.text:00000C2E                 test    edx, edx
.text:00000C30                 jz      short loc_C40
.text:00000C32                 mov     eax, [ebp+var_14]
.text:00000C35                 mov     ecx, [ebp+var_60]
.text:00000C38                 mov     [eax], ecx
.text:00000C3A                 mov     edx, [ebp+var_5C]
.text:00000C3D                 mov     [eax+4], edx
.text:00000C40
.text:00000C40 loc_C40:                                ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+134j
.text:00000C40                 mov     [ebp+var_122], 1
.text:00000C47                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000C4E                 lea     ecx, [ebp+var_68] ; this
.text:00000C51                 call    ??1CInFile@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::CInFile::~CInFile(void)
.text:00000C56                 mov     al, [ebp+var_122]
.text:00000C5C                 jmp     loc_1393
.text:00000C61 ; ---------------------------------------------------------------------------
.text:00000C61
.text:00000C61 loc_C61:                                ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+52j
.text:00000C61                 mov     eax, [ebp+lpFileName]
.text:00000C64                 push    eax             ; this
.text:00000C65                 call    ?FindAltStreamColon@NName@NFile@NWindows@@YGHPB_W@Z ; NWindows::NFile::NName::FindAltStreamColon(wchar_t const *)
.text:00000C6A                 mov     [ebp+var_70], eax
.text:00000C6D                 cmp     [ebp+var_70], 0
.text:00000C71                 jl      loc_FBD
.text:00000C77                 mov     ecx, [ebp+var_70]
.text:00000C7A                 mov     edx, [ebp+lpFileName]
.text:00000C7D                 movzx   eax, word ptr [edx+ecx*2+2]
.text:00000C82                 test    eax, eax
.text:00000C84                 jz      loc_FBD
.text:00000C8A                 mov     ecx, [ebp+var_70]
.text:00000C8D                 mov     edx, [ebp+lpFileName]
.text:00000C90                 lea     eax, [edx+ecx*2]
.text:00000C93                 push    eax
.text:00000C94                 lea     ecx, [ebp+var_80]
.text:00000C97                 call    ??0UString@@QAE@PB_W@Z ; UString::UString(wchar_t const *)
.text:00000C9C                 mov     [ebp+var_4], 1
.text:00000CA3                 mov     ecx, [ebp+lpFileName]
.text:00000CA6                 push    ecx
.text:00000CA7                 lea     ecx, [ebp+var_94]
.text:00000CAD                 call    ??0UString@@QAE@PB_W@Z ; UString::UString(wchar_t const *)
.text:00000CB2                 mov     byte ptr [ebp+var_4], 2
.text:00000CB6                 mov     edx, [ebp+var_70]
.text:00000CB9                 push    edx             ; unsigned int
.text:00000CBA                 lea     ecx, [ebp+var_94] ; this
.text:00000CC0                 call    ?DeleteFrom@UString@@QAEXI@Z ; UString::DeleteFrom(uint)
.text:00000CC5                 mov     [ebp+var_9C], 6
.text:00000CCF                 lea     ecx, [ebp+var_80] ; this
.text:00000CD2                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:00000CD7                 cmp     eax, 6
.text:00000CDA                 jbe     short loc_CF8
.text:00000CDC                 push    offset $SG68052 ; ":$DATA"
.text:00000CE1                 push    6               ; unsigned int
.text:00000CE3                 lea     ecx, [ebp+var_80] ; this
.text:00000CE6                 call    ?RightPtr@UString@@QBEPB_WI@Z ; UString::RightPtr(uint)
.text:00000CEB                 push    eax             ; wchar_t *
.text:00000CEC                 call    ?StringsAreEqualNoCase_Ascii@@YG_NPB_WPBD@Z ; StringsAreEqualNoCase_Ascii(wchar_t const *,char const *)
.text:00000CF1                 movzx   eax, al
.text:00000CF4                 test    eax, eax
.text:00000CF6                 jnz     short loc_D05
.text:00000CF8
.text:00000CF8 loc_CF8:                                ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+1DEj
.text:00000CF8                 push    offset $SG68053 ; ":$DATA"
.text:00000CFD                 lea     ecx, [ebp+var_80]
.text:00000D00                 call    ??YUString@@QAEAAV0@PB_W@Z ; UString::operator+=(wchar_t const *)
.text:00000D05
.text:00000D05 loc_D05:                                ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+1FAj
.text:00000D05                 mov     [ebp+var_9D], 1
.text:00000D0C                 lea     ecx, [ebp+var_94]
.text:00000D12                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00000D17                 push    eax             ; wchar_t *
.text:00000D18                 call    ?IsDrivePath2@NName@NFile@NWindows@@YG_NPB_W@Z ; NWindows::NFile::NName::IsDrivePath2(wchar_t const *)
.text:00000D1D                 movzx   ecx, al
.text:00000D20                 test    ecx, ecx
.text:00000D22                 jz      short loc_D71
.text:00000D24                 cmp     [ebp+var_70], 2
.text:00000D28                 jz      short loc_D44
.text:00000D2A                 cmp     [ebp+var_70], 3
.text:00000D2E                 jnz     short loc_D71
.text:00000D30                 lea     ecx, [ebp+var_94]
.text:00000D36                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00000D3B                 movzx   edx, word ptr [eax+4]
.text:00000D3F                 cmp     edx, 5Ch ; '\'
.text:00000D42                 jnz     short loc_D71
.text:00000D44
.text:00000D44 loc_D44:                                ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+22Cj
.text:00000D44                 mov     ecx, [ebp+var_14] ; this
.text:00000D47                 call    ?ClearBase@CFileInfoBase@NFind@NFile@NWindows@@QAEXXZ ; NWindows::NFile::NFind::CFileInfoBase::ClearBase(void)
.text:00000D4C                 mov     ecx, [ebp+var_14]
.text:00000D4F                 add     ecx, 28h ; '('  ; this
.text:00000D52                 call    ?Empty@UString@@QAEXXZ ; UString::Empty(void)
.text:00000D57                 cmp     [ebp+var_70], 2
.text:00000D5B                 jnz     short loc_D6F
.text:00000D5D                 lea     eax, [ebp+var_94]
.text:00000D63                 push    eax
.text:00000D64                 mov     ecx, [ebp+var_14]
.text:00000D67                 add     ecx, 28h ; '('
.text:00000D6A                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:00000D6F
.text:00000D6F loc_D6F:                                ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+25Fj
.text:00000D6F                 jmp     short loc_D8B
.text:00000D71 ; ---------------------------------------------------------------------------
.text:00000D71
.text:00000D71 loc_D71:                                ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+226j
.text:00000D71                                         ; NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+232j ...
.text:00000D71                 lea     ecx, [ebp+var_94]
.text:00000D77                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00000D7C                 push    eax             ; wchar_t *
.text:00000D7D                 mov     ecx, [ebp+var_14] ; this
.text:00000D80                 call    ?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z ; NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)
.text:00000D85                 mov     [ebp+var_9D], al
.text:00000D8B
.text:00000D8B loc_D8B:                                ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *):loc_D6Fj
.text:00000D8B                 movzx   ecx, [ebp+var_9D]
.text:00000D92                 test    ecx, ecx
.text:00000D94                 jz      loc_F9F
.text:00000D9A                 mov     edx, [ebp+var_14]
.text:00000D9D                 mov     eax, [edx+20h]
.text:00000DA0                 and     eax, 0FFFFFBEFh
.text:00000DA5                 mov     ecx, [ebp+var_14]
.text:00000DA8                 mov     [ecx+20h], eax
.text:00000DAB                 mov     edx, [ebp+var_14]
.text:00000DAE                 mov     dword ptr [edx], 0
.text:00000DB4                 mov     dword ptr [edx+4], 0
.text:00000DBB                 lea     eax, [ebp+var_94]
.text:00000DC1                 push    eax             ; struct UString *
.text:00000DC2                 lea     ecx, [ebp+var_B4] ; this
.text:00000DC8                 call    ??0CStreamEnumerator@NFind@NFile@NWindows@@QAE@ABVUString@@@Z ; NWindows::NFile::NFind::CStreamEnumerator::CStreamEnumerator(UString const &)
.text:00000DCD                 mov     byte ptr [ebp+var_4], 3
.text:00000DD1
.text:00000DD1 loc_DD1:                                ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+48Fj
.text:00000DD1                 lea     ecx, [ebp+var_D4] ; this
.text:00000DD7                 call    ??0CStreamInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CStreamInfo::CStreamInfo(void)
.text:00000DDC                 mov     byte ptr [ebp+var_4], 4
.text:00000DE0                 lea     ecx, [ebp+var_DD]
.text:00000DE6                 push    ecx             ; bool *
.text:00000DE7                 lea     edx, [ebp+var_D4]
.text:00000DED                 push    edx             ; struct NWindows::NFile::NFind::CStreamInfo *
.text:00000DEE                 lea     ecx, [ebp+var_B4] ; this
.text:00000DF4                 call    ?Next@CStreamEnumerator@NFind@NFile@NWindows@@QAE_NAAUCStreamInfo@234@AA_N@Z ; NWindows::NFile::NFind::CStreamEnumerator::Next(NWindows::NFile::NFind::CStreamInfo &,bool &)
.text:00000DF9                 movzx   eax, al
.text:00000DFC                 test    eax, eax
.text:00000DFE                 jnz     short loc_E4E
.text:00000E00                 mov     [ebp+var_123], 0
.text:00000E07                 mov     byte ptr [ebp+var_4], 3
.text:00000E0B                 lea     ecx, [ebp+var_D4] ; this
.text:00000E11                 call    ??1CStreamInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CStreamInfo::~CStreamInfo(void)
.text:00000E16                 mov     byte ptr [ebp+var_4], 2
.text:00000E1A                 lea     ecx, [ebp+var_B4] ; this
.text:00000E20                 call    ??1CStreamEnumerator@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CStreamEnumerator::~CStreamEnumerator(void)
.text:00000E25                 mov     byte ptr [ebp+var_4], 1
.text:00000E29                 lea     ecx, [ebp+var_94] ; this
.text:00000E2F                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000E34                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000E3B                 lea     ecx, [ebp+var_80] ; this
.text:00000E3E                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000E43                 mov     al, [ebp+var_123]
.text:00000E49                 jmp     loc_1393
.text:00000E4E ; ---------------------------------------------------------------------------
.text:00000E4E
.text:00000E4E loc_E4E:                                ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+302j
.text:00000E4E                 movzx   ecx, [ebp+var_DD]
.text:00000E55                 test    ecx, ecx
.text:00000E57                 jnz     short loc_EB8
.text:00000E59                 mov     esi, esp
.text:00000E5B                 push    2               ; dwErrCode
.text:00000E5D                 call    dword ptr ds:__imp__SetLastError@4 ; SetLastError(x)
.text:00000E63                 cmp     esi, esp
.text:00000E65                 call    __RTC_CheckEsp
.text:00000E6A                 mov     [ebp+var_124], 0
.text:00000E71                 mov     byte ptr [ebp+var_4], 3
.text:00000E75                 lea     ecx, [ebp+var_D4] ; this
.text:00000E7B                 call    ??1CStreamInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CStreamInfo::~CStreamInfo(void)
.text:00000E80                 mov     byte ptr [ebp+var_4], 2
.text:00000E84                 lea     ecx, [ebp+var_B4] ; this
.text:00000E8A                 call    ??1CStreamEnumerator@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CStreamEnumerator::~CStreamEnumerator(void)
.text:00000E8F                 mov     byte ptr [ebp+var_4], 1
.text:00000E93                 lea     ecx, [ebp+var_94] ; this
.text:00000E99                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000E9E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000EA5                 lea     ecx, [ebp+var_80] ; this
.text:00000EA8                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000EAD                 mov     al, [ebp+var_124]
.text:00000EB3                 jmp     loc_1393
.text:00000EB8 ; ---------------------------------------------------------------------------
.text:00000EB8
.text:00000EB8 loc_EB8:                                ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+35Bj
.text:00000EB8                 lea     ecx, [ebp+var_80]
.text:00000EBB                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00000EC0                 push    eax             ; wchar_t *
.text:00000EC1                 lea     ecx, [ebp+var_D4] ; this
.text:00000EC7                 call    ?IsEqualTo_NoCase@UString@@QBE_NPB_W@Z ; UString::IsEqualTo_NoCase(wchar_t const *)
.text:00000ECC                 movzx   edx, al
.text:00000ECF                 test    edx, edx
.text:00000ED1                 jz      loc_F7C
.text:00000ED7                 lea     ecx, [ebp+var_D4] ; this
.text:00000EDD                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:00000EE2                 cmp     eax, 7
.text:00000EE5                 jbe     short loc_F01
.text:00000EE7                 lea     ecx, [ebp+var_D4] ; this
.text:00000EED                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:00000EF2                 sub     eax, 6
.text:00000EF5                 push    eax             ; unsigned int
.text:00000EF6                 lea     ecx, [ebp+var_D4] ; this
.text:00000EFC                 call    ?DeleteFrom@UString@@QAEXI@Z ; UString::DeleteFrom(uint)
.text:00000F01
.text:00000F01 loc_F01:                                ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+3E9j
.text:00000F01                 lea     eax, [ebp+var_D4]
.text:00000F07                 push    eax
.text:00000F08                 mov     ecx, [ebp+var_14]
.text:00000F0B                 add     ecx, 28h ; '('
.text:00000F0E                 call    ??YUString@@QAEAAV0@ABV0@@Z ; UString::operator+=(UString const &)
.text:00000F13                 mov     ecx, [ebp+var_14]
.text:00000F16                 mov     edx, [ebp+var_C4]
.text:00000F1C                 mov     [ecx], edx
.text:00000F1E                 mov     eax, [ebp+var_C0]
.text:00000F24                 mov     [ecx+4], eax
.text:00000F27                 mov     ecx, [ebp+var_14]
.text:00000F2A                 mov     byte ptr [ecx+24h], 1
.text:00000F2E                 mov     [ebp+var_125], 1
.text:00000F35                 mov     byte ptr [ebp+var_4], 3
.text:00000F39                 lea     ecx, [ebp+var_D4] ; this
.text:00000F3F                 call    ??1CStreamInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CStreamInfo::~CStreamInfo(void)
.text:00000F44                 mov     byte ptr [ebp+var_4], 2
.text:00000F48                 lea     ecx, [ebp+var_B4] ; this
.text:00000F4E                 call    ??1CStreamEnumerator@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CStreamEnumerator::~CStreamEnumerator(void)
.text:00000F53                 mov     byte ptr [ebp+var_4], 1
.text:00000F57                 lea     ecx, [ebp+var_94] ; this
.text:00000F5D                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000F62                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000F69                 lea     ecx, [ebp+var_80] ; this
.text:00000F6C                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000F71                 mov     al, [ebp+var_125]
.text:00000F77                 jmp     loc_1393
.text:00000F7C ; ---------------------------------------------------------------------------
.text:00000F7C
.text:00000F7C loc_F7C:                                ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+3D5j
.text:00000F7C                 mov     byte ptr [ebp+var_4], 3
.text:00000F80                 lea     ecx, [ebp+var_D4] ; this
.text:00000F86                 call    ??1CStreamInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CStreamInfo::~CStreamInfo(void)
.text:00000F8B                 jmp     loc_DD1
.text:00000F90 ; ---------------------------------------------------------------------------
.text:00000F90                 mov     byte ptr [ebp+var_4], 2
.text:00000F94                 lea     ecx, [ebp+var_B4] ; this
.text:00000F9A                 call    ??1CStreamEnumerator@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CStreamEnumerator::~CStreamEnumerator(void)
.text:00000F9F
.text:00000F9F loc_F9F:                                ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+298j
.text:00000F9F                 mov     byte ptr [ebp+var_4], 1
.text:00000FA3                 lea     ecx, [ebp+var_94] ; this
.text:00000FA9                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000FAE                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000FB5                 lea     ecx, [ebp+var_80] ; this
.text:00000FB8                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000FBD
.text:00000FBD loc_FBD:                                ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+175j
.text:00000FBD                                         ; NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+188j
.text:00000FBD                 lea     ecx, [ebp+var_EC] ; this
.text:00000FC3                 call    ??0CFindFile@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFindFile::CFindFile(void)
.text:00000FC8                 mov     [ebp+var_4], 5
.text:00000FCF                 mov     edx, [ebp+var_14]
.text:00000FD2                 push    edx             ; struct NWindows::NFile::NFind::CFileInfo *
.text:00000FD3                 mov     eax, [ebp+lpFileName]
.text:00000FD6                 push    eax             ; lpFileName
.text:00000FD7                 lea     ecx, [ebp+var_EC] ; this
.text:00000FDD                 call    ?FindFirst@CFindFile@NFind@NFile@NWindows@@QAE_NPB_WAAUCFileInfo@234@@Z ; NWindows::NFile::NFind::CFindFile::FindFirst(wchar_t const *,NWindows::NFile::NFind::CFileInfo &)
.text:00000FE2                 movzx   ecx, al
.text:00000FE5                 test    ecx, ecx
.text:00000FE7                 jz      short loc_100D
.text:00000FE9                 mov     [ebp+var_126], 1
.text:00000FF0                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000FF7                 lea     ecx, [ebp+var_EC] ; this
.text:00000FFD                 call    ??1CFindFile@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFindFile::~CFindFile(void)
.text:00001002                 mov     al, [ebp+var_126]
.text:00001008                 jmp     loc_1393
.text:0000100D ; ---------------------------------------------------------------------------
.text:0000100D
.text:0000100D loc_100D:                               ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+4EBj
.text:0000100D                 mov     esi, esp
.text:0000100F                 call    dword ptr ds:__imp__GetLastError@0 ; GetLastError()
.text:00001015                 cmp     esi, esp
.text:00001017                 call    __RTC_CheckEsp
.text:0000101C                 mov     [ebp+dwErrCode], eax
.text:00001022                 cmp     [ebp+dwErrCode], 35h ; '5'
.text:00001029                 jz      short loc_1041
.text:0000102B                 cmp     [ebp+dwErrCode], 2
.text:00001032                 jz      short loc_1041
.text:00001034                 cmp     [ebp+dwErrCode], 7Bh ; '{'
.text:0000103B                 jnz     loc_1374
.text:00001041
.text:00001041 loc_1041:                               ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+52Dj
.text:00001041                                         ; NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+536j
.text:00001041                 mov     [ebp+var_F8], 0
.text:0000104B                 mov     edx, [ebp+lpFileName]
.text:0000104E                 push    edx             ; wchar_t *
.text:0000104F                 call    ?IsSuperPath@NName@NFile@NWindows@@YG_NPB_W@Z ; NWindows::NFile::NName::IsSuperPath(wchar_t const *)
.text:00001054                 movzx   eax, al
.text:00001057                 test    eax, eax
.text:00001059                 jz      short loc_1065
.text:0000105B                 mov     [ebp+var_F8], 4
.text:00001065
.text:00001065 loc_1065:                               ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+55Dj
.text:00001065                 mov     ecx, [ebp+lpFileName]
.text:00001068                 movzx   edx, word ptr [ecx]
.text:0000106B                 cmp     edx, 5Ch ; '\'
.text:0000106E                 jz      short loc_107B
.text:00001070                 mov     eax, [ebp+lpFileName]
.text:00001073                 movzx   ecx, word ptr [eax]
.text:00001076                 cmp     ecx, 2Fh ; '/'
.text:00001079                 jnz     short loc_10F1
.text:0000107B
.text:0000107B loc_107B:                               ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+572j
.text:0000107B                 mov     edx, [ebp+lpFileName]
.text:0000107E                 movzx   eax, word ptr [edx+2]
.text:00001082                 test    eax, eax
.text:00001084                 jnz     short loc_10F1
.text:00001086                 mov     ecx, [ebp+lpFileName]
.text:00001089                 push    ecx             ; lpFileName
.text:0000108A                 call    ?GetFileAttrib@NFind@NFile@NWindows@@YGKPB_W@Z ; NWindows::NFile::NFind::GetFileAttrib(wchar_t const *)
.text:0000108F                 mov     [ebp+var_FC], eax
.text:00001095                 cmp     [ebp+var_FC], 0FFFFFFFFh
.text:0000109C                 jz      short loc_10EC
.text:0000109E                 mov     edx, [ebp+var_FC]
.text:000010A4                 and     edx, 10h
.text:000010A7                 jz      short loc_10EC
.text:000010A9                 mov     ecx, [ebp+var_14] ; this
.text:000010AC                 call    ?ClearBase@CFileInfoBase@NFind@NFile@NWindows@@QAEXXZ ; NWindows::NFile::NFind::CFileInfoBase::ClearBase(void)
.text:000010B1                 mov     ecx, [ebp+var_14]
.text:000010B4                 add     ecx, 28h ; '('  ; this
.text:000010B7                 call    ?Empty@UString@@QAEXXZ ; UString::Empty(void)
.text:000010BC                 mov     eax, [ebp+var_14]
.text:000010BF                 mov     ecx, [ebp+var_FC]
.text:000010C5                 mov     [eax+20h], ecx
.text:000010C8                 mov     [ebp+var_127], 1
.text:000010CF                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000010D6                 lea     ecx, [ebp+var_EC] ; this
.text:000010DC                 call    ??1CFindFile@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFindFile::~CFindFile(void)
.text:000010E1                 mov     al, [ebp+var_127]
.text:000010E7                 jmp     loc_1393
.text:000010EC ; ---------------------------------------------------------------------------
.text:000010EC
.text:000010EC loc_10EC:                               ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+5A0j
.text:000010EC                                         ; NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+5ABj
.text:000010EC                 jmp     loc_1374
.text:000010F1 ; ---------------------------------------------------------------------------
.text:000010F1
.text:000010F1 loc_10F1:                               ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+57Dj
.text:000010F1                                         ; NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+588j
.text:000010F1                 mov     edx, [ebp+var_F8]
.text:000010F7                 mov     eax, [ebp+lpFileName]
.text:000010FA                 lea     ecx, [eax+edx*2]
.text:000010FD                 push    ecx             ; wchar_t *
.text:000010FE                 call    ?IsDrivePath@NName@NFile@NWindows@@YG_NPB_W@Z ; NWindows::NFile::NName::IsDrivePath(wchar_t const *)
.text:00001103                 movzx   edx, al
.text:00001106                 test    edx, edx
.text:00001108                 jz      loc_11A9
.text:0000110E                 mov     eax, [ebp+var_F8]
.text:00001114                 mov     ecx, [ebp+lpFileName]
.text:00001117                 movzx   edx, word ptr [ecx+eax*2+6]
.text:0000111C                 test    edx, edx
.text:0000111E                 jnz     loc_11A9
.text:00001124                 mov     eax, [ebp+lpFileName]
.text:00001127                 push    eax             ; lpFileName
.text:00001128                 call    ?GetFileAttrib@NFind@NFile@NWindows@@YGKPB_W@Z ; NWindows::NFile::NFind::GetFileAttrib(wchar_t const *)
.text:0000112D                 mov     [ebp+var_100], eax
.text:00001133                 cmp     [ebp+var_100], 0FFFFFFFFh
.text:0000113A                 jz      short loc_11A4
.text:0000113C                 mov     ecx, [ebp+var_100]
.text:00001142                 and     ecx, 10h
.text:00001145                 jz      short loc_11A4
.text:00001147                 mov     ecx, [ebp+var_14] ; this
.text:0000114A                 call    ?ClearBase@CFileInfoBase@NFind@NFile@NWindows@@QAEXXZ ; NWindows::NFile::NFind::CFileInfoBase::ClearBase(void)
.text:0000114F                 mov     edx, [ebp+var_14]
.text:00001152                 mov     eax, [ebp+var_100]
.text:00001158                 mov     [edx+20h], eax
.text:0000115B                 mov     ecx, [ebp+var_F8]
.text:00001161                 mov     edx, [ebp+lpFileName]
.text:00001164                 lea     eax, [edx+ecx*2]
.text:00001167                 push    eax
.text:00001168                 mov     ecx, [ebp+var_14]
.text:0000116B                 add     ecx, 28h ; '('
.text:0000116E                 call    ??4UString@@QAEAAV0@PB_W@Z ; UString::operator=(wchar_t const *)
.text:00001173                 push    2               ; unsigned int
.text:00001175                 mov     ecx, [ebp+var_14]
.text:00001178                 add     ecx, 28h ; '('  ; this
.text:0000117B                 call    ?DeleteFrom@UString@@QAEXI@Z ; UString::DeleteFrom(uint)
.text:00001180                 mov     [ebp+var_128], 1
.text:00001187                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000118E                 lea     ecx, [ebp+var_EC] ; this
.text:00001194                 call    ??1CFindFile@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFindFile::~CFindFile(void)
.text:00001199                 mov     al, [ebp+var_128]
.text:0000119F                 jmp     loc_1393
.text:000011A4 ; ---------------------------------------------------------------------------
.text:000011A4
.text:000011A4 loc_11A4:                               ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+63Ej
.text:000011A4                                         ; NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+649j
.text:000011A4                 jmp     loc_1374
.text:000011A9 ; ---------------------------------------------------------------------------
.text:000011A9
.text:000011A9 loc_11A9:                               ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+60Cj
.text:000011A9                                         ; NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+622j
.text:000011A9                 mov     ecx, [ebp+lpFileName]
.text:000011AC                 push    ecx             ; wchar_t *
.text:000011AD                 call    ?GetNetworkServerPrefixSize@NName@NFile@NWindows@@YGIPB_W@Z ; NWindows::NFile::NName::GetNetworkServerPrefixSize(wchar_t const *)
.text:000011B2                 mov     [ebp+var_104], eax
.text:000011B8                 cmp     [ebp+var_104], 0
.text:000011BF                 jbe     loc_1374
.text:000011C5                 mov     edx, [ebp+var_104]
.text:000011CB                 mov     eax, [ebp+lpFileName]
.text:000011CE                 movzx   ecx, word ptr [eax+edx*2]
.text:000011D2                 test    ecx, ecx
.text:000011D4                 jz      loc_1374
.text:000011DA                 mov     edx, [ebp+var_104]
.text:000011E0                 mov     eax, [ebp+lpFileName]
.text:000011E3                 lea     ecx, [eax+edx*2]
.text:000011E6                 push    ecx             ; wchar_t *
.text:000011E7                 call    ?FindSepar@NName@NFile@NWindows@@YGHPB_W@Z ; NWindows::NFile::NName::FindSepar(wchar_t const *)
.text:000011EC                 test    eax, eax
.text:000011EE                 jge     loc_1374
.text:000011F4                 mov     edx, [ebp+lpFileName]
.text:000011F7                 push    edx
.text:000011F8                 lea     ecx, [ebp+var_114]
.text:000011FE                 call    ??0UString@@QAE@PB_W@Z ; UString::UString(wchar_t const *)
.text:00001203                 mov     byte ptr [ebp+var_4], 6
.text:00001207                 lea     ecx, [ebp+var_114] ; this
.text:0000120D                 call    ?Add_PathSepar@UString@@QAEXXZ ; UString::Add_PathSepar(void)
.text:00001212                 push    2Ah ; '*'
.text:00001214                 lea     ecx, [ebp+var_114]
.text:0000121A                 call    ??YUString@@QAEAAV0@_W@Z ; UString::operator+=(wchar_t)
.text:0000121F                 mov     [ebp+var_119], 0
.text:00001226                 mov     eax, [ebp+var_14]
.text:00001229                 push    eax             ; struct NWindows::NFile::NFind::CFileInfo *
.text:0000122A                 lea     ecx, [ebp+var_114]
.text:00001230                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00001235                 push    eax             ; lpFileName
.text:00001236                 lea     ecx, [ebp+var_EC] ; this
.text:0000123C                 call    ?FindFirst@CFindFile@NFind@NFile@NWindows@@QAE_NPB_WAAUCFileInfo@234@@Z ; NWindows::NFile::NFind::CFindFile::FindFirst(wchar_t const *,NWindows::NFile::NFind::CFileInfo &)
.text:00001241                 movzx   ecx, al
.text:00001244                 test    ecx, ecx
.text:00001246                 jz      short loc_12B2
.text:00001248                 push    offset $SG68101 ; Str2
.text:0000124D                 mov     edx, [ebp+var_14]
.text:00001250                 add     edx, 28h ; '('
.text:00001253                 push    edx             ; int
.text:00001254                 call    ??8@YG_NABVUString@@PB_W@Z ; operator==(UString const &,wchar_t const *)
.text:00001259                 movzx   eax, al
.text:0000125C                 test    eax, eax
.text:0000125E                 jz      short loc_12AB
.text:00001260                 mov     ecx, [ebp+var_104]
.text:00001266                 mov     edx, [ebp+lpFileName]
.text:00001269                 lea     eax, [edx+ecx*2]
.text:0000126C                 push    eax
.text:0000126D                 mov     ecx, [ebp+var_14]
.text:00001270                 add     ecx, 28h ; '('
.text:00001273                 call    ??4UString@@QAEAAV0@PB_W@Z ; UString::operator=(wchar_t const *)
.text:00001278                 mov     [ebp+var_129], 1
.text:0000127F                 mov     byte ptr [ebp+var_4], 5
.text:00001283                 lea     ecx, [ebp+var_114] ; this
.text:00001289                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000128E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001295                 lea     ecx, [ebp+var_EC] ; this
.text:0000129B                 call    ??1CFindFile@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFindFile::~CFindFile(void)
.text:000012A0                 mov     al, [ebp+var_129]
.text:000012A6                 jmp     loc_1393
.text:000012AB ; ---------------------------------------------------------------------------
.text:000012AB
.text:000012AB loc_12AB:                               ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+762j
.text:000012AB                 mov     [ebp+var_119], 1
.text:000012B2
.text:000012B2 loc_12B2:                               ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+74Aj
.text:000012B2                 mov     ecx, [ebp+lpFileName]
.text:000012B5                 push    ecx             ; lpFileName
.text:000012B6                 call    ?GetFileAttrib@NFind@NFile@NWindows@@YGKPB_W@Z ; NWindows::NFile::NFind::GetFileAttrib(wchar_t const *)
.text:000012BB                 mov     [ebp+var_120], eax
.text:000012C1                 movzx   edx, [ebp+var_119]
.text:000012C8                 test    edx, edx
.text:000012CA                 jnz     short loc_12E0
.text:000012CC                 cmp     [ebp+var_120], 0FFFFFFFFh
.text:000012D3                 jz      short loc_134F
.text:000012D5                 mov     eax, [ebp+var_120]
.text:000012DB                 and     eax, 10h
.text:000012DE                 jz      short loc_134F
.text:000012E0
.text:000012E0 loc_12E0:                               ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+7CEj
.text:000012E0                 mov     ecx, [ebp+var_14] ; this
.text:000012E3                 call    ?ClearBase@CFileInfoBase@NFind@NFile@NWindows@@QAEXXZ ; NWindows::NFile::NFind::CFileInfoBase::ClearBase(void)
.text:000012E8                 cmp     [ebp+var_120], 0FFFFFFFFh
.text:000012EF                 jz      short loc_12FF
.text:000012F1                 mov     ecx, [ebp+var_14]
.text:000012F4                 mov     edx, [ebp+var_120]
.text:000012FA                 mov     [ecx+20h], edx
.text:000012FD                 jmp     short loc_1307
.text:000012FF ; ---------------------------------------------------------------------------
.text:000012FF
.text:000012FF loc_12FF:                               ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+7F3j
.text:000012FF                 mov     ecx, [ebp+var_14] ; this
.text:00001302                 call    ?SetAsDir@CFileInfoBase@NFind@NFile@NWindows@@QAEXXZ ; NWindows::NFile::NFind::CFileInfoBase::SetAsDir(void)
.text:00001307
.text:00001307 loc_1307:                               ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+801j
.text:00001307                 mov     eax, [ebp+var_104]
.text:0000130D                 mov     ecx, [ebp+lpFileName]
.text:00001310                 lea     edx, [ecx+eax*2]
.text:00001313                 push    edx
.text:00001314                 mov     ecx, [ebp+var_14]
.text:00001317                 add     ecx, 28h ; '('
.text:0000131A                 call    ??4UString@@QAEAAV0@PB_W@Z ; UString::operator=(wchar_t const *)
.text:0000131F                 mov     [ebp+var_12A], 1
.text:00001326                 mov     byte ptr [ebp+var_4], 5
.text:0000132A                 lea     ecx, [ebp+var_114] ; this
.text:00001330                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001335                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000133C                 lea     ecx, [ebp+var_EC] ; this
.text:00001342                 call    ??1CFindFile@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFindFile::~CFindFile(void)
.text:00001347                 mov     al, [ebp+var_12A]
.text:0000134D                 jmp     short loc_1393
.text:0000134F ; ---------------------------------------------------------------------------
.text:0000134F
.text:0000134F loc_134F:                               ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+7D7j
.text:0000134F                                         ; NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+7E2j
.text:0000134F                 mov     esi, esp
.text:00001351                 mov     eax, [ebp+dwErrCode]
.text:00001357                 push    eax             ; dwErrCode
.text:00001358                 call    dword ptr ds:__imp__SetLastError@4 ; SetLastError(x)
.text:0000135E                 cmp     esi, esp
.text:00001360                 call    __RTC_CheckEsp
.text:00001365                 mov     byte ptr [ebp+var_4], 5
.text:00001369                 lea     ecx, [ebp+var_114] ; this
.text:0000136F                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001374
.text:00001374 loc_1374:                               ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+53Fj
.text:00001374                                         ; NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *):loc_10ECj ...
.text:00001374                 mov     byte ptr [ebp+var_12C+1], 0
.text:0000137B                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001382                 lea     ecx, [ebp+var_EC] ; this
.text:00001388                 call    ??1CFindFile@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFindFile::~CFindFile(void)
.text:0000138D                 mov     al, byte ptr [ebp+var_12C+1]
.text:00001393
.text:00001393 loc_1393:                               ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+E6j
.text:00001393                                         ; NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+129j ...
.text:00001393                 push    edx
.text:00001394                 mov     ecx, ebp
.text:00001396                 push    eax
.text:00001397                 lea     edx, $LN62
.text:0000139D                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000013A2                 pop     eax
.text:000013A3                 pop     edx
.text:000013A4                 mov     ecx, [ebp+var_C]
.text:000013A7                 mov     large fs:0, ecx
.text:000013AE                 pop     ecx
.text:000013AF                 pop     edi
.text:000013B0                 pop     esi
.text:000013B1                 mov     ecx, [ebp+var_10]
.text:000013B4                 xor     ecx, ebp
.text:000013B6                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000013BB                 add     esp, 12Ch
.text:000013C1                 cmp     ebp, esp
.text:000013C3                 call    __RTC_CheckEsp
.text:000013C8                 mov     esp, ebp
.text:000013CA                 pop     ebp
.text:000013CB                 retn    4
.text:000013CB ?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z endp ; sp-analysis failed
.text:000013CB
.text:000013CB ; ---------------------------------------------------------------------------
.text:000013CE                 align 10h
.text:000013D0 $LN62           dd 0Ch                  ; DATA XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+89Bo
.text:000013D4                 dd offset $LN61
.text:000013D8 $LN61           dd 0FFFFFFE0h, 8        ; DATA XREF: .text:000013D4o
.text:000013E0                 dd offset $LN48         ; "drive"
.text:000013E4                 dd 0FFFFFFD0h, 8
.text:000013EC                 dd offset $LN49         ; "clusterSize"
.text:000013F0                 dd 0FFFFFFC0h, 8
.text:000013F8                 dd offset $LN50         ; "totalSize"
.text:000013FC                 dd 0FFFFFFB0h, 8
.text:00001404                 dd offset $LN51         ; "freeSize"
.text:00001408                 dd 0FFFFFF98h, 10h
.text:00001410                 dd offset $LN52         ; "inFile"
.text:00001414                 dd 0FFFFFF80h, 0Ch
.text:0000141C                 dd offset $LN53         ; "streamName"
.text:00001420                 dd 0FFFFFF6Ch, 0Ch
.text:00001428                 dd offset $LN54         ; "filePath"
.text:0000142C                 dd 0FFFFFF4Ch, 10h
.text:00001434                 dd offset $LN55         ; "enumerator"
.text:00001438                 dd 0FFFFFF2Ch, 18h
.text:00001440                 dd offset $LN56         ; "si"
.text:00001444                 dd 0FFFFFF23h, 1
.text:0000144C                 dd offset $LN57         ; "found"
.text:00001450                 dd 0FFFFFF14h, 4
.text:00001458                 dd offset $LN58         ; "finder"
.text:0000145C                 dd 0FFFFFEECh, 0Ch
.text:00001464                 dd offset $LN59
.text:00001468 $LN59           db 73h, 0               ; DATA XREF: .text:00001464o
.text:0000146A $LN58           db 'finder',0           ; DATA XREF: .text:00001458o
.text:00001471 $LN57           db 'found',0            ; DATA XREF: .text:0000144Co
.text:00001477 $LN56           db 'si',0               ; DATA XREF: .text:00001440o
.text:0000147A $LN55           db 'enumerator',0       ; DATA XREF: .text:00001434o
.text:00001485 $LN54           db 'filePath',0         ; DATA XREF: .text:00001428o
.text:0000148E $LN53           db 'streamName',0       ; DATA XREF: .text:0000141Co
.text:00001499 $LN52           db 'inFile',0           ; DATA XREF: .text:00001410o
.text:000014A0 $LN51           db 'freeSize',0         ; DATA XREF: .text:00001404o
.text:000014A9 $LN50           db 'totalSize',0        ; DATA XREF: .text:000013F8o
.text:000014B3 $LN49           db 'clusterSize',0      ; DATA XREF: .text:000013ECo
.text:000014BF $LN48           db 'drive',0            ; DATA XREF: .text:000013E0o
.text:000014C5                 db 7 dup(0CCh)
.text:000014CC
.text:000014CC ; =============== S U B R O U T I N E =======================================
.text:000014CC
.text:000014CC ; Attributes: bp-based frame
.text:000014CC
.text:000014CC ; bool __stdcall NWindows::NFile::NFind::DoesFileExist(wchar_t *this, const wchar_t *)
.text:000014CC                 public ?DoesFileExist@NFind@NFile@NWindows@@YG_NPB_W@Z
.text:000014CC ?DoesFileExist@NFind@NFile@NWindows@@YG_NPB_W@Z proc near
.text:000014CC
.text:000014CC var_54          = dword ptr -54h
.text:000014CC var_4D          = byte ptr -4Dh
.text:000014CC var_48          = byte ptr -48h
.text:000014CC var_C           = dword ptr -0Ch
.text:000014CC var_4           = dword ptr -4
.text:000014CC this            = dword ptr  8
.text:000014CC
.text:000014CC                 push    ebp
.text:000014CD                 mov     ebp, esp
.text:000014CF                 push    0FFFFFFFFh
.text:000014D1                 push    offset __ehhandler$?DoesFileExist@NFind@NFile@NWindows@@YG_NPB_W@Z
.text:000014D6                 mov     eax, large fs:0
.text:000014DC                 push    eax
.text:000014DD                 sub     esp, 48h
.text:000014E0                 push    edi
.text:000014E1                 lea     edi, [ebp+var_54]
.text:000014E4                 mov     ecx, 12h
.text:000014E9                 mov     eax, 0CCCCCCCCh
.text:000014EE                 rep stosd
.text:000014F0                 mov     eax, dword ptr ds:___security_cookie
.text:000014F5                 xor     eax, ebp
.text:000014F7                 push    eax
.text:000014F8                 lea     eax, [ebp+var_C]
.text:000014FB                 mov     large fs:0, eax
.text:00001501                 lea     ecx, [ebp+var_48] ; this
.text:00001504                 call    ??0CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::CFileInfo(void)
.text:00001509                 mov     [ebp+var_4], 0
.text:00001510                 mov     eax, [ebp+this]
.text:00001513                 push    eax             ; wchar_t *
.text:00001514                 lea     ecx, [ebp+var_48] ; this
.text:00001517                 call    ?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z ; NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)
.text:0000151C                 movzx   ecx, al
.text:0000151F                 test    ecx, ecx
.text:00001521                 jz      short loc_153B
.text:00001523                 lea     ecx, [ebp+var_48] ; this
.text:00001526                 call    ?IsDir@CFileInfoBase@NFind@NFile@NWindows@@QBE_NXZ ; NWindows::NFile::NFind::CFileInfoBase::IsDir(void)
.text:0000152B                 movzx   edx, al
.text:0000152E                 test    edx, edx
.text:00001530                 jnz     short loc_153B
.text:00001532                 mov     [ebp+var_54], 1
.text:00001539                 jmp     short loc_1542
.text:0000153B ; ---------------------------------------------------------------------------
.text:0000153B
.text:0000153B loc_153B:                               ; CODE XREF: NWindows::NFile::NFind::DoesFileExist(wchar_t const *)+55j
.text:0000153B                                         ; NWindows::NFile::NFind::DoesFileExist(wchar_t const *)+64j
.text:0000153B                 mov     [ebp+var_54], 0
.text:00001542
.text:00001542 loc_1542:                               ; CODE XREF: NWindows::NFile::NFind::DoesFileExist(wchar_t const *)+6Dj
.text:00001542                 mov     al, byte ptr [ebp+var_54]
.text:00001545                 mov     [ebp+var_4D], al
.text:00001548                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000154F                 lea     ecx, [ebp+var_48] ; this
.text:00001552                 call    ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text:00001557                 mov     al, [ebp+var_4D]
.text:0000155A                 push    edx
.text:0000155B                 mov     ecx, ebp
.text:0000155D                 push    eax
.text:0000155E                 lea     edx, $LN9_3
.text:00001564                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001569                 pop     eax
.text:0000156A                 pop     edx
.text:0000156B                 mov     ecx, [ebp+var_C]
.text:0000156E                 mov     large fs:0, ecx
.text:00001575                 pop     ecx
.text:00001576                 pop     edi
.text:00001577                 add     esp, 54h
.text:0000157A                 cmp     ebp, esp
.text:0000157C                 call    __RTC_CheckEsp
.text:00001581                 mov     esp, ebp
.text:00001583                 pop     ebp
.text:00001584                 retn    4
.text:00001584 ?DoesFileExist@NFind@NFile@NWindows@@YG_NPB_W@Z endp
.text:00001584
.text:00001584 ; ---------------------------------------------------------------------------
.text:00001587                 align 4
.text:00001588 $LN9_3          dd 1                    ; DATA XREF: NWindows::NFile::NFind::DoesFileExist(wchar_t const *)+92o
.text:0000158C                 dd offset $LN8_1
.text:00001590 $LN8_1          dd 0FFFFFFB8h, 38h      ; DATA XREF: .text:0000158Co
.text:00001598                 dd offset $LN6_0
.text:0000159C $LN6_0          dd 0CC006966h, 3 dup(0CCCCCCCCh) ; DATA XREF: .text:00001598o
.text:000015AC
.text:000015AC ; =============== S U B R O U T I N E =======================================
.text:000015AC
.text:000015AC ; Attributes: bp-based frame
.text:000015AC
.text:000015AC ; bool __stdcall NWindows::NFile::NFind::DoesDirExist(wchar_t *this, const wchar_t *)
.text:000015AC                 public ?DoesDirExist@NFind@NFile@NWindows@@YG_NPB_W@Z
.text:000015AC ?DoesDirExist@NFind@NFile@NWindows@@YG_NPB_W@Z proc near
.text:000015AC
.text:000015AC var_54          = dword ptr -54h
.text:000015AC var_4D          = byte ptr -4Dh
.text:000015AC var_48          = byte ptr -48h
.text:000015AC var_C           = dword ptr -0Ch
.text:000015AC var_4           = dword ptr -4
.text:000015AC this            = dword ptr  8
.text:000015AC
.text:000015AC                 push    ebp
.text:000015AD                 mov     ebp, esp
.text:000015AF                 push    0FFFFFFFFh
.text:000015B1                 push    offset __ehhandler$?DoesDirExist@NFind@NFile@NWindows@@YG_NPB_W@Z
.text:000015B6                 mov     eax, large fs:0
.text:000015BC                 push    eax
.text:000015BD                 sub     esp, 48h
.text:000015C0                 push    edi
.text:000015C1                 lea     edi, [ebp+var_54]
.text:000015C4                 mov     ecx, 12h
.text:000015C9                 mov     eax, 0CCCCCCCCh
.text:000015CE                 rep stosd
.text:000015D0                 mov     eax, dword ptr ds:___security_cookie
.text:000015D5                 xor     eax, ebp
.text:000015D7                 push    eax
.text:000015D8                 lea     eax, [ebp+var_C]
.text:000015DB                 mov     large fs:0, eax
.text:000015E1                 lea     ecx, [ebp+var_48] ; this
.text:000015E4                 call    ??0CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::CFileInfo(void)
.text:000015E9                 mov     [ebp+var_4], 0
.text:000015F0                 mov     eax, [ebp+this]
.text:000015F3                 push    eax             ; wchar_t *
.text:000015F4                 lea     ecx, [ebp+var_48] ; this
.text:000015F7                 call    ?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z ; NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)
.text:000015FC                 movzx   ecx, al
.text:000015FF                 test    ecx, ecx
.text:00001601                 jz      short loc_161B
.text:00001603                 lea     ecx, [ebp+var_48] ; this
.text:00001606                 call    ?IsDir@CFileInfoBase@NFind@NFile@NWindows@@QBE_NXZ ; NWindows::NFile::NFind::CFileInfoBase::IsDir(void)
.text:0000160B                 movzx   edx, al
.text:0000160E                 test    edx, edx
.text:00001610                 jz      short loc_161B
.text:00001612                 mov     [ebp+var_54], 1
.text:00001619                 jmp     short loc_1622
.text:0000161B ; ---------------------------------------------------------------------------
.text:0000161B
.text:0000161B loc_161B:                               ; CODE XREF: NWindows::NFile::NFind::DoesDirExist(wchar_t const *)+55j
.text:0000161B                                         ; NWindows::NFile::NFind::DoesDirExist(wchar_t const *)+64j
.text:0000161B                 mov     [ebp+var_54], 0
.text:00001622
.text:00001622 loc_1622:                               ; CODE XREF: NWindows::NFile::NFind::DoesDirExist(wchar_t const *)+6Dj
.text:00001622                 mov     al, byte ptr [ebp+var_54]
.text:00001625                 mov     [ebp+var_4D], al
.text:00001628                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000162F                 lea     ecx, [ebp+var_48] ; this
.text:00001632                 call    ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text:00001637                 mov     al, [ebp+var_4D]
.text:0000163A                 push    edx
.text:0000163B                 mov     ecx, ebp
.text:0000163D                 push    eax
.text:0000163E                 lea     edx, $LN9_4
.text:00001644                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001649                 pop     eax
.text:0000164A                 pop     edx
.text:0000164B                 mov     ecx, [ebp+var_C]
.text:0000164E                 mov     large fs:0, ecx
.text:00001655                 pop     ecx
.text:00001656                 pop     edi
.text:00001657                 add     esp, 54h
.text:0000165A                 cmp     ebp, esp
.text:0000165C                 call    __RTC_CheckEsp
.text:00001661                 mov     esp, ebp
.text:00001663                 pop     ebp
.text:00001664                 retn    4
.text:00001664 ?DoesDirExist@NFind@NFile@NWindows@@YG_NPB_W@Z endp
.text:00001664
.text:00001664 ; ---------------------------------------------------------------------------
.text:00001667                 align 4
.text:00001668 $LN9_4          dd 1                    ; DATA XREF: NWindows::NFile::NFind::DoesDirExist(wchar_t const *)+92o
.text:0000166C                 dd offset $LN8_2
.text:00001670 $LN8_2          dd 0FFFFFFB8h, 38h      ; DATA XREF: .text:0000166Co
.text:00001678                 dd offset $LN6_1
.text:0000167C $LN6_1          dd 0CC006966h, 3 dup(0CCCCCCCCh) ; DATA XREF: .text:00001678o
.text:0000168C
.text:0000168C ; =============== S U B R O U T I N E =======================================
.text:0000168C
.text:0000168C ; Attributes: bp-based frame
.text:0000168C
.text:0000168C ; bool __stdcall NWindows::NFile::NFind::DoesFileOrDirExist(wchar_t *this, const wchar_t *)
.text:0000168C                 public ?DoesFileOrDirExist@NFind@NFile@NWindows@@YG_NPB_W@Z
.text:0000168C ?DoesFileOrDirExist@NFind@NFile@NWindows@@YG_NPB_W@Z proc near
.text:0000168C
.text:0000168C var_50          = byte ptr -50h
.text:0000168C var_4D          = byte ptr -4Dh
.text:0000168C var_48          = byte ptr -48h
.text:0000168C var_C           = dword ptr -0Ch
.text:0000168C var_4           = dword ptr -4
.text:0000168C this            = dword ptr  8
.text:0000168C
.text:0000168C                 push    ebp
.text:0000168D                 mov     ebp, esp
.text:0000168F                 push    0FFFFFFFFh
.text:00001691                 push    offset __ehhandler$?DoesFileOrDirExist@NFind@NFile@NWindows@@YG_NPB_W@Z
.text:00001696                 mov     eax, large fs:0
.text:0000169C                 push    eax
.text:0000169D                 sub     esp, 44h
.text:000016A0                 push    edi
.text:000016A1                 lea     edi, [ebp+var_50]
.text:000016A4                 mov     ecx, 11h
.text:000016A9                 mov     eax, 0CCCCCCCCh
.text:000016AE                 rep stosd
.text:000016B0                 mov     eax, dword ptr ds:___security_cookie
.text:000016B5                 xor     eax, ebp
.text:000016B7                 push    eax
.text:000016B8                 lea     eax, [ebp+var_C]
.text:000016BB                 mov     large fs:0, eax
.text:000016C1                 lea     ecx, [ebp+var_48] ; this
.text:000016C4                 call    ??0CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::CFileInfo(void)
.text:000016C9                 mov     [ebp+var_4], 0
.text:000016D0                 mov     eax, [ebp+this]
.text:000016D3                 push    eax             ; wchar_t *
.text:000016D4                 lea     ecx, [ebp+var_48] ; this
.text:000016D7                 call    ?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z ; NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)
.text:000016DC                 mov     [ebp+var_4D], al
.text:000016DF                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000016E6                 lea     ecx, [ebp+var_48] ; this
.text:000016E9                 call    ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text:000016EE                 mov     al, [ebp+var_4D]
.text:000016F1                 push    edx
.text:000016F2                 mov     ecx, ebp
.text:000016F4                 push    eax
.text:000016F5                 lea     edx, $LN7_2
.text:000016FB                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001700                 pop     eax
.text:00001701                 pop     edx
.text:00001702                 mov     ecx, [ebp+var_C]
.text:00001705                 mov     large fs:0, ecx
.text:0000170C                 pop     ecx
.text:0000170D                 pop     edi
.text:0000170E                 add     esp, 50h
.text:00001711                 cmp     ebp, esp
.text:00001713                 call    __RTC_CheckEsp
.text:00001718                 mov     esp, ebp
.text:0000171A                 pop     ebp
.text:0000171B                 retn    4
.text:0000171B ?DoesFileOrDirExist@NFind@NFile@NWindows@@YG_NPB_W@Z endp
.text:0000171B
.text:0000171B ; ---------------------------------------------------------------------------
.text:0000171E                 align 10h
.text:00001720 $LN7_2          dd 1                    ; DATA XREF: NWindows::NFile::NFind::DoesFileOrDirExist(wchar_t const *)+69o
.text:00001724                 dd offset $LN6_2
.text:00001728 $LN6_2          dd 0FFFFFFB8h, 38h      ; DATA XREF: .text:00001724o
.text:00001730                 dd offset $LN4
.text:00001734 $LN4            dd 0CC006966h, 0CCCCCCCCh ; DATA XREF: .text:00001730o
.text:0000173C
.text:0000173C ; =============== S U B R O U T I N E =======================================
.text:0000173C
.text:0000173C ; Attributes: bp-based frame
.text:0000173C
.text:0000173C ; bool __thiscall NWindows::NFile::NFind::CEnumerator::NextAny(NWindows::NFile::NFind::CEnumerator *this, struct NWindows::NFile::NFind::CFileInfo *)
.text:0000173C                 public ?NextAny@CEnumerator@NFind@NFile@NWindows@@AAE_NAAUCFileInfo@234@@Z
.text:0000173C ?NextAny@CEnumerator@NFind@NFile@NWindows@@AAE_NAAUCFileInfo@234@@Z proc near
.text:0000173C                                         ; CODE XREF: NWindows::NFile::NFind::CEnumerator::Next(NWindows::NFile::NFind::CFileInfo &)+15p
.text:0000173C
.text:0000173C var_4           = dword ptr -4
.text:0000173C arg_0           = dword ptr  8
.text:0000173C
.text:0000173C                 push    ebp
.text:0000173D                 mov     ebp, esp
.text:0000173F                 push    ecx
.text:00001740                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001747                 mov     [ebp+var_4], ecx
.text:0000174A                 mov     ecx, [ebp+var_4] ; this
.text:0000174D                 call    ?IsHandleAllocated@CFindFileBase@NFind@NFile@NWindows@@QBE_NXZ ; NWindows::NFile::NFind::CFindFileBase::IsHandleAllocated(void)
.text:00001752                 movzx   eax, al
.text:00001755                 test    eax, eax
.text:00001757                 jz      short loc_1769
.text:00001759                 mov     ecx, [ebp+arg_0]
.text:0000175C                 push    ecx             ; struct NWindows::NFile::NFind::CFileInfo *
.text:0000175D                 mov     ecx, [ebp+var_4] ; this
.text:00001760                 call    ?FindNext@CFindFile@NFind@NFile@NWindows@@QAE_NAAUCFileInfo@234@@Z ; NWindows::NFile::NFind::CFindFile::FindNext(NWindows::NFile::NFind::CFileInfo &)
.text:00001765                 jmp     short loc_1781
.text:00001767 ; ---------------------------------------------------------------------------
.text:00001767                 jmp     short loc_1781
.text:00001769 ; ---------------------------------------------------------------------------
.text:00001769
.text:00001769 loc_1769:                               ; CODE XREF: NWindows::NFile::NFind::CEnumerator::NextAny(NWindows::NFile::NFind::CFileInfo &)+1Bj
.text:00001769                 mov     edx, [ebp+arg_0]
.text:0000176C                 push    edx             ; struct NWindows::NFile::NFind::CFileInfo *
.text:0000176D                 mov     ecx, [ebp+var_4]
.text:00001770                 add     ecx, 4
.text:00001773                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00001778                 push    eax             ; lpFileName
.text:00001779                 mov     ecx, [ebp+var_4] ; this
.text:0000177C                 call    ?FindFirst@CFindFile@NFind@NFile@NWindows@@QAE_NPB_WAAUCFileInfo@234@@Z ; NWindows::NFile::NFind::CFindFile::FindFirst(wchar_t const *,NWindows::NFile::NFind::CFileInfo &)
.text:00001781
.text:00001781 loc_1781:                               ; CODE XREF: NWindows::NFile::NFind::CEnumerator::NextAny(NWindows::NFile::NFind::CFileInfo &)+29j
.text:00001781                                         ; NWindows::NFile::NFind::CEnumerator::NextAny(NWindows::NFile::NFind::CFileInfo &)+2Bj
.text:00001781                 add     esp, 4
.text:00001784                 cmp     ebp, esp
.text:00001786                 call    __RTC_CheckEsp
.text:0000178B                 mov     esp, ebp
.text:0000178D                 pop     ebp
.text:0000178E                 retn    4
.text:0000178E ?NextAny@CEnumerator@NFind@NFile@NWindows@@AAE_NAAUCFileInfo@234@@Z endp
.text:0000178E
.text:0000178E ; ---------------------------------------------------------------------------
.text:00001791                 db 0Bh dup(0CCh)
.text:0000179C
.text:0000179C ; =============== S U B R O U T I N E =======================================
.text:0000179C
.text:0000179C ; Attributes: bp-based frame
.text:0000179C
.text:0000179C ; bool __thiscall NWindows::NFile::NFind::CEnumerator::Next(NWindows::NFile::NFind::CEnumerator *this, struct NWindows::NFile::NFind::CFileInfo *)
.text:0000179C                 public ?Next@CEnumerator@NFind@NFile@NWindows@@QAE_NAAUCFileInfo@234@@Z
.text:0000179C ?Next@CEnumerator@NFind@NFile@NWindows@@QAE_NAAUCFileInfo@234@@Z proc near
.text:0000179C                                         ; CODE XREF: NWindows::NFile::NFind::CEnumerator::Next(NWindows::NFile::NFind::CFileInfo &,bool &)+16p
.text:0000179C
.text:0000179C var_4           = dword ptr -4
.text:0000179C arg_0           = dword ptr  8
.text:0000179C
.text:0000179C                 push    ebp
.text:0000179D                 mov     ebp, esp
.text:0000179F                 push    ecx
.text:000017A0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000017A7                 mov     [ebp+var_4], ecx
.text:000017AA
.text:000017AA loc_17AA:                               ; CODE XREF: NWindows::NFile::NFind::CEnumerator::Next(NWindows::NFile::NFind::CFileInfo &):loc_17D4j
.text:000017AA                 mov     eax, [ebp+arg_0]
.text:000017AD                 push    eax             ; struct NWindows::NFile::NFind::CFileInfo *
.text:000017AE                 mov     ecx, [ebp+var_4] ; this
.text:000017B1                 call    ?NextAny@CEnumerator@NFind@NFile@NWindows@@AAE_NAAUCFileInfo@234@@Z ; NWindows::NFile::NFind::CEnumerator::NextAny(NWindows::NFile::NFind::CFileInfo &)
.text:000017B6                 movzx   ecx, al
.text:000017B9                 test    ecx, ecx
.text:000017BB                 jnz     short loc_17C1
.text:000017BD                 xor     al, al
.text:000017BF                 jmp     short loc_17D6
.text:000017C1 ; ---------------------------------------------------------------------------
.text:000017C1
.text:000017C1 loc_17C1:                               ; CODE XREF: NWindows::NFile::NFind::CEnumerator::Next(NWindows::NFile::NFind::CFileInfo &)+1Fj
.text:000017C1                 mov     ecx, [ebp+arg_0] ; this
.text:000017C4                 call    ?IsDots@CFileInfo@NFind@NFile@NWindows@@QBE_NXZ ; NWindows::NFile::NFind::CFileInfo::IsDots(void)
.text:000017C9                 movzx   edx, al
.text:000017CC                 test    edx, edx
.text:000017CE                 jnz     short loc_17D4
.text:000017D0                 mov     al, 1
.text:000017D2                 jmp     short loc_17D6
.text:000017D4 ; ---------------------------------------------------------------------------
.text:000017D4
.text:000017D4 loc_17D4:                               ; CODE XREF: NWindows::NFile::NFind::CEnumerator::Next(NWindows::NFile::NFind::CFileInfo &)+32j
.text:000017D4                 jmp     short loc_17AA
.text:000017D6 ; ---------------------------------------------------------------------------
.text:000017D6
.text:000017D6 loc_17D6:                               ; CODE XREF: NWindows::NFile::NFind::CEnumerator::Next(NWindows::NFile::NFind::CFileInfo &)+23j
.text:000017D6                                         ; NWindows::NFile::NFind::CEnumerator::Next(NWindows::NFile::NFind::CFileInfo &)+36j
.text:000017D6                 add     esp, 4
.text:000017D9                 cmp     ebp, esp
.text:000017DB                 call    __RTC_CheckEsp
.text:000017E0                 mov     esp, ebp
.text:000017E2                 pop     ebp
.text:000017E3                 retn    4
.text:000017E3 ?Next@CEnumerator@NFind@NFile@NWindows@@QAE_NAAUCFileInfo@234@@Z endp
.text:000017E3
.text:000017E3 ; ---------------------------------------------------------------------------
.text:000017E6                 db 6 dup(0CCh)
.text:000017EC
.text:000017EC ; =============== S U B R O U T I N E =======================================
.text:000017EC
.text:000017EC ; Attributes: bp-based frame
.text:000017EC
.text:000017EC ; bool __thiscall NWindows::NFile::NFind::CEnumerator::Next(NWindows::NFile::NFind::CEnumerator *this, struct NWindows::NFile::NFind::CFileInfo *, bool *)
.text:000017EC                 public ?Next@CEnumerator@NFind@NFile@NWindows@@QAE_NAAUCFileInfo@234@AA_N@Z
.text:000017EC ?Next@CEnumerator@NFind@NFile@NWindows@@QAE_NAAUCFileInfo@234@AA_N@Z proc near
.text:000017EC
.text:000017EC var_4           = dword ptr -4
.text:000017EC arg_0           = dword ptr  8
.text:000017EC arg_4           = dword ptr  0Ch
.text:000017EC
.text:000017EC                 push    ebp
.text:000017ED                 mov     ebp, esp
.text:000017EF                 push    ecx
.text:000017F0                 push    esi
.text:000017F1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000017F8                 mov     [ebp+var_4], ecx
.text:000017FB                 mov     eax, [ebp+arg_0]
.text:000017FE                 push    eax             ; struct NWindows::NFile::NFind::CFileInfo *
.text:000017FF                 mov     ecx, [ebp+var_4] ; this
.text:00001802                 call    ?Next@CEnumerator@NFind@NFile@NWindows@@QAE_NAAUCFileInfo@234@@Z ; NWindows::NFile::NFind::CEnumerator::Next(NWindows::NFile::NFind::CFileInfo &)
.text:00001807                 movzx   ecx, al
.text:0000180A                 test    ecx, ecx
.text:0000180C                 jz      short loc_1818
.text:0000180E                 mov     edx, [ebp+arg_4]
.text:00001811                 mov     byte ptr [edx], 1
.text:00001814                 mov     al, 1
.text:00001816                 jmp     short loc_1837
.text:00001818 ; ---------------------------------------------------------------------------
.text:00001818
.text:00001818 loc_1818:                               ; CODE XREF: NWindows::NFile::NFind::CEnumerator::Next(NWindows::NFile::NFind::CFileInfo &,bool &)+20j
.text:00001818                 mov     eax, [ebp+arg_4]
.text:0000181B                 mov     byte ptr [eax], 0
.text:0000181E                 mov     esi, esp
.text:00001820                 call    dword ptr ds:__imp__GetLastError@0 ; GetLastError()
.text:00001826                 cmp     esi, esp
.text:00001828                 call    __RTC_CheckEsp
.text:0000182D                 xor     ecx, ecx
.text:0000182F                 cmp     eax, 12h
.text:00001832                 setz    cl
.text:00001835                 mov     al, cl
.text:00001837
.text:00001837 loc_1837:                               ; CODE XREF: NWindows::NFile::NFind::CEnumerator::Next(NWindows::NFile::NFind::CFileInfo &,bool &)+2Aj
.text:00001837                 pop     esi
.text:00001838                 add     esp, 4
.text:0000183B                 cmp     ebp, esp
.text:0000183D                 call    __RTC_CheckEsp
.text:00001842                 mov     esp, ebp
.text:00001844                 pop     ebp
.text:00001845                 retn    8
.text:00001845 ?Next@CEnumerator@NFind@NFile@NWindows@@QAE_NAAUCFileInfo@234@AA_N@Z endp
.text:00001845
.text:00001845 ; ---------------------------------------------------------------------------
.text:00001848                 db 4 dup(0CCh)
.text:0000184C
.text:0000184C ; =============== S U B R O U T I N E =======================================
.text:0000184C
.text:0000184C ; Attributes: bp-based frame
.text:0000184C
.text:0000184C ; bool __thiscall NWindows::NFile::NFind::CFindChangeNotification::Close(NWindows::NFile::NFind::CFindChangeNotification *__hidden this)
.text:0000184C                 public ?Close@CFindChangeNotification@NFind@NFile@NWindows@@QAE_NXZ
.text:0000184C ?Close@CFindChangeNotification@NFind@NFile@NWindows@@QAE_NXZ proc near
.text:0000184C
.text:0000184C var_4           = dword ptr -4
.text:0000184C
.text:0000184C                 push    ebp
.text:0000184D                 mov     ebp, esp
.text:0000184F                 push    ecx
.text:00001850                 push    esi
.text:00001851                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001858                 mov     [ebp+var_4], ecx
.text:0000185B                 mov     ecx, [ebp+var_4] ; this
.text:0000185E                 call    ?IsHandleAllocated@CFindChangeNotification@NFind@NFile@NWindows@@QBE_NXZ ; NWindows::NFile::NFind::CFindChangeNotification::IsHandleAllocated(void)
.text:00001863                 movzx   eax, al
.text:00001866                 test    eax, eax
.text:00001868                 jnz     short loc_186E
.text:0000186A                 mov     al, 1
.text:0000186C                 jmp     short loc_1896
.text:0000186E ; ---------------------------------------------------------------------------
.text:0000186E
.text:0000186E loc_186E:                               ; CODE XREF: NWindows::NFile::NFind::CFindChangeNotification::Close(void)+1Cj
.text:0000186E                 mov     esi, esp
.text:00001870                 mov     ecx, [ebp+var_4]
.text:00001873                 mov     edx, [ecx]
.text:00001875                 push    edx             ; hChangeHandle
.text:00001876                 call    dword ptr ds:__imp__FindCloseChangeNotification@4 ; FindCloseChangeNotification(x)
.text:0000187C                 cmp     esi, esp
.text:0000187E                 call    __RTC_CheckEsp
.text:00001883                 test    eax, eax
.text:00001885                 jnz     short loc_188B
.text:00001887                 xor     al, al
.text:00001889                 jmp     short loc_1896
.text:0000188B ; ---------------------------------------------------------------------------
.text:0000188B
.text:0000188B loc_188B:                               ; CODE XREF: NWindows::NFile::NFind::CFindChangeNotification::Close(void)+39j
.text:0000188B                 mov     eax, [ebp+var_4]
.text:0000188E                 mov     dword ptr [eax], 0FFFFFFFFh
.text:00001894                 mov     al, 1
.text:00001896
.text:00001896 loc_1896:                               ; CODE XREF: NWindows::NFile::NFind::CFindChangeNotification::Close(void)+20j
.text:00001896                                         ; NWindows::NFile::NFind::CFindChangeNotification::Close(void)+3Dj
.text:00001896                 pop     esi
.text:00001897                 add     esp, 4
.text:0000189A                 cmp     ebp, esp
.text:0000189C                 call    __RTC_CheckEsp
.text:000018A1                 mov     esp, ebp
.text:000018A3                 pop     ebp
.text:000018A4                 retn
.text:000018A4 ?Close@CFindChangeNotification@NFind@NFile@NWindows@@QAE_NXZ endp
.text:000018A4
.text:000018A4 ; ---------------------------------------------------------------------------
.text:000018A5                 db 7 dup(0CCh)
.text:000018AC
.text:000018AC ; =============== S U B R O U T I N E =======================================
.text:000018AC
.text:000018AC ; Attributes: bp-based frame
.text:000018AC
.text:000018AC ; void *__thiscall NWindows::NFile::NFind::CFindChangeNotification::FindFirst(NWindows::NFile::NFind::CFindChangeNotification *this, LPCWSTR lpPathName, bool, unsigned __int32)
.text:000018AC                 public ?FindFirst@CFindChangeNotification@NFind@NFile@NWindows@@QAEPAXPB_W_NK@Z
.text:000018AC ?FindFirst@CFindChangeNotification@NFind@NFile@NWindows@@QAEPAXPB_W_NK@Z proc near
.text:000018AC
.text:000018AC var_24          = dword ptr -24h
.text:000018AC var_20          = dword ptr -20h
.text:000018AC bWatchSubtree   = dword ptr -1Ch
.text:000018AC var_18          = dword ptr -18h
.text:000018AC var_14          = dword ptr -14h
.text:000018AC var_10          = dword ptr -10h
.text:000018AC var_C           = dword ptr -0Ch
.text:000018AC var_4           = dword ptr -4
.text:000018AC lpPathName      = dword ptr  8
.text:000018AC arg_4           = byte ptr  0Ch
.text:000018AC dwNotifyFilter  = dword ptr  10h
.text:000018AC
.text:000018AC                 push    ebp
.text:000018AD                 mov     ebp, esp
.text:000018AF                 push    0FFFFFFFFh
.text:000018B1                 push    offset __ehhandler$?FindFirst@CFindChangeNotification@NFind@NFile@NWindows@@QAEPAXPB_W_NK@Z
.text:000018B6                 mov     eax, large fs:0
.text:000018BC                 push    eax
.text:000018BD                 sub     esp, 18h
.text:000018C0                 push    esi
.text:000018C1                 mov     eax, 0CCCCCCCCh
.text:000018C6                 mov     [ebp+var_24], eax
.text:000018C9                 mov     [ebp+var_20], eax
.text:000018CC                 mov     [ebp+bWatchSubtree], eax
.text:000018CF                 mov     [ebp+var_18], eax
.text:000018D2                 mov     [ebp+var_14], eax
.text:000018D5                 mov     [ebp+var_10], eax
.text:000018D8                 mov     eax, dword ptr ds:___security_cookie
.text:000018DD                 xor     eax, ebp
.text:000018DF                 push    eax
.text:000018E0                 lea     eax, [ebp+var_C]
.text:000018E3                 mov     large fs:0, eax
.text:000018E9                 mov     [ebp+var_10], ecx
.text:000018EC                 movzx   eax, byte ptr ds:?g_IsNT@@3_NA ; bool g_IsNT
.text:000018F3                 test    eax, eax
.text:000018F5                 jnz     short loc_1951
.text:000018F7                 mov     esi, esp
.text:000018F9                 mov     ecx, [ebp+dwNotifyFilter]
.text:000018FC                 push    ecx             ; dwNotifyFilter
.text:000018FD                 movzx   edx, [ebp+arg_4]
.text:00001901                 push    edx             ; bool
.text:00001902                 call    ?BoolToBOOL@@YGH_N@Z ; BoolToBOOL(bool)
.text:00001907                 push    eax             ; bWatchSubtree
.text:00001908                 mov     eax, [ebp+lpPathName]
.text:0000190B                 push    eax             ; dwNotifyFilter
.text:0000190C                 lea     ecx, [ebp+bWatchSubtree]
.text:0000190F                 push    ecx             ; bWatchSubtree
.text:00001910                 call    ?fs2fas@@YG?AVAString@@PB_W@Z ; fs2fas(wchar_t const *)
.text:00001915                 mov     [ebp+var_20], eax
.text:00001918                 mov     edx, [ebp+var_20]
.text:0000191B                 mov     [ebp+var_24], edx
.text:0000191E                 mov     [ebp+var_4], 0
.text:00001925                 mov     ecx, [ebp+var_24]
.text:00001928                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:0000192D                 push    eax             ; lpPathName
.text:0000192E                 call    dword ptr ds:__imp__FindFirstChangeNotificationA@12 ; FindFirstChangeNotificationA(x,x,x)
.text:00001934                 cmp     esi, esp
.text:00001936                 call    __RTC_CheckEsp
.text:0000193B                 mov     ecx, [ebp+var_10]
.text:0000193E                 mov     [ecx], eax
.text:00001940                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001947                 lea     ecx, [ebp+bWatchSubtree] ; this
.text:0000194A                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:0000194F                 jmp     short loc_1978
.text:00001951 ; ---------------------------------------------------------------------------
.text:00001951
.text:00001951 loc_1951:                               ; CODE XREF: NWindows::NFile::NFind::CFindChangeNotification::FindFirst(wchar_t const *,bool,ulong)+49j
.text:00001951                 mov     esi, esp
.text:00001953                 mov     edx, [ebp+dwNotifyFilter]
.text:00001956                 push    edx             ; dwNotifyFilter
.text:00001957                 movzx   eax, [ebp+arg_4]
.text:0000195B                 push    eax             ; bool
.text:0000195C                 call    ?BoolToBOOL@@YGH_N@Z ; BoolToBOOL(bool)
.text:00001961                 push    eax             ; bWatchSubtree
.text:00001962                 mov     ecx, [ebp+lpPathName]
.text:00001965                 push    ecx             ; lpPathName
.text:00001966                 call    dword ptr ds:__imp__FindFirstChangeNotificationW@12 ; FindFirstChangeNotificationW(x,x,x)
.text:0000196C                 cmp     esi, esp
.text:0000196E                 call    __RTC_CheckEsp
.text:00001973                 mov     edx, [ebp+var_10]
.text:00001976                 mov     [edx], eax
.text:00001978
.text:00001978 loc_1978:                               ; CODE XREF: NWindows::NFile::NFind::CFindChangeNotification::FindFirst(wchar_t const *,bool,ulong)+A3j
.text:00001978                 mov     eax, [ebp+var_10]
.text:0000197B                 mov     eax, [eax]
.text:0000197D                 mov     ecx, [ebp+var_C]
.text:00001980                 mov     large fs:0, ecx
.text:00001987                 pop     ecx
.text:00001988                 pop     esi
.text:00001989                 add     esp, 24h
.text:0000198C                 cmp     ebp, esp
.text:0000198E                 call    __RTC_CheckEsp
.text:00001993                 mov     esp, ebp
.text:00001995                 pop     ebp
.text:00001996                 retn    0Ch
.text:00001996 ?FindFirst@CFindChangeNotification@NFind@NFile@NWindows@@QAEPAXPB_W_NK@Z endp
.text:00001996
.text:00001996 ; ---------------------------------------------------------------------------
.text:00001999                 align 4
.text:0000199C
.text:0000199C ; =============== S U B R O U T I N E =======================================
.text:0000199C
.text:0000199C ; Attributes: bp-based frame
.text:0000199C
.text:0000199C ; bool __stdcall NWindows::NFile::NFind::MyGetLogicalDriveStrings(class CObjectVector<class UString> &)
.text:0000199C                 public ?MyGetLogicalDriveStrings@NFind@NFile@NWindows@@YG_NAAV?$CObjectVector@VUString@@@@@Z
.text:0000199C ?MyGetLogicalDriveStrings@NFind@NFile@NWindows@@YG_NAAV?$CObjectVector@VUString@@@@@Z proc near
.text:0000199C
.text:0000199C var_88          = dword ptr -88h
.text:0000199C var_84          = dword ptr -84h
.text:0000199C var_7F          = byte ptr -7Fh
.text:0000199C var_7E          = byte ptr -7Eh
.text:0000199C var_7D          = byte ptr -7Dh
.text:0000199C var_7C          = byte ptr -7Ch
.text:0000199C var_6D          = byte ptr -6Dh
.text:0000199C var_6C          = dword ptr -6Ch
.text:0000199C var_68          = dword ptr -68h
.text:0000199C var_60          = byte ptr -60h
.text:0000199C var_50          = dword ptr -50h
.text:0000199C var_48          = byte ptr -48h
.text:0000199C var_40          = dword ptr -40h
.text:0000199C var_3C          = dword ptr -3Ch
.text:0000199C var_38          = dword ptr -38h
.text:0000199C var_30          = byte ptr -30h
.text:0000199C var_20          = dword ptr -20h
.text:0000199C var_18          = byte ptr -18h
.text:0000199C nBufferLength   = dword ptr -10h
.text:0000199C var_C           = dword ptr -0Ch
.text:0000199C var_4           = dword ptr -4
.text:0000199C arg_0           = dword ptr  8
.text:0000199C
.text:0000199C                 push    ebp
.text:0000199D                 mov     ebp, esp
.text:0000199F                 push    0FFFFFFFFh
.text:000019A1                 push    offset __ehhandler$?MyGetLogicalDriveStrings@NFind@NFile@NWindows@@YG_NAAV?$CObjectVector@VUString@@@@@Z
.text:000019A6                 mov     eax, large fs:0
.text:000019AC                 push    eax
.text:000019AD                 sub     esp, 7Ch
.text:000019B0                 push    esi
.text:000019B1                 push    edi
.text:000019B2                 lea     edi, [ebp+var_88]
.text:000019B8                 mov     ecx, 1Fh
.text:000019BD                 mov     eax, 0CCCCCCCCh
.text:000019C2                 rep stosd
.text:000019C4                 mov     eax, dword ptr ds:___security_cookie
.text:000019C9                 xor     eax, ebp
.text:000019CB                 push    eax
.text:000019CC                 lea     eax, [ebp+var_C]
.text:000019CF                 mov     large fs:0, eax
.text:000019D5                 mov     ecx, [ebp+arg_0]
.text:000019D8                 call    ?Clear@?$CObjectVector@VUString@@@@QAEXXZ ; CObjectVector<UString>::Clear(void)
.text:000019DD                 movzx   eax, byte ptr ds:?g_IsNT@@3_NA ; bool g_IsNT
.text:000019E4                 test    eax, eax
.text:000019E6                 jnz     loc_1B48
.text:000019EC                 mov     ecx, [ebp+arg_0]
.text:000019EF                 call    ?Clear@?$CObjectVector@VUString@@@@QAEXXZ ; CObjectVector<UString>::Clear(void)
.text:000019F4                 mov     esi, esp
.text:000019F6                 push    0               ; lpBuffer
.text:000019F8                 push    0               ; nBufferLength
.text:000019FA                 call    dword ptr ds:__imp__GetLogicalDriveStringsA@8 ; GetLogicalDriveStringsA(x,x)
.text:00001A00                 cmp     esi, esp
.text:00001A02                 call    __RTC_CheckEsp
.text:00001A07                 mov     [ebp+nBufferLength], eax
.text:00001A0A                 cmp     [ebp+nBufferLength], 0
.text:00001A0E                 jnz     short loc_1A17
.text:00001A10                 xor     al, al
.text:00001A12                 jmp     loc_1C60
.text:00001A17 ; ---------------------------------------------------------------------------
.text:00001A17
.text:00001A17 loc_1A17:                               ; CODE XREF: NWindows::NFile::NFind::MyGetLogicalDriveStrings(CObjectVector<UString> &)+72j
.text:00001A17                 mov     ecx, [ebp+nBufferLength]
.text:00001A1A                 push    ecx
.text:00001A1B                 lea     ecx, [ebp+var_18]
.text:00001A1E                 call    ??0?$CObjArray@D@@QAE@I@Z ; CObjArray<char>::CObjArray<char>(uint)
.text:00001A23                 mov     [ebp+var_4], 0
.text:00001A2A                 lea     ecx, [ebp+var_18]
.text:00001A2D                 call    ??B?$CObjArray@D@@QAEPADXZ ; CObjArray<char>::operator char *(void)
.text:00001A32                 mov     esi, esp
.text:00001A34                 push    eax             ; lpBuffer
.text:00001A35                 mov     edx, [ebp+nBufferLength]
.text:00001A38                 push    edx             ; nBufferLength
.text:00001A39                 call    dword ptr ds:__imp__GetLogicalDriveStringsA@8 ; GetLogicalDriveStringsA(x,x)
.text:00001A3F                 cmp     esi, esp
.text:00001A41                 call    __RTC_CheckEsp
.text:00001A46                 mov     [ebp+var_20], eax
.text:00001A49                 cmp     [ebp+var_20], 0
.text:00001A4D                 jz      short loc_1A57
.text:00001A4F                 mov     eax, [ebp+var_20]
.text:00001A52                 cmp     eax, [ebp+nBufferLength]
.text:00001A55                 jbe     short loc_1A72
.text:00001A57
.text:00001A57 loc_1A57:                               ; CODE XREF: NWindows::NFile::NFind::MyGetLogicalDriveStrings(CObjectVector<UString> &)+B1j
.text:00001A57                 mov     [ebp+var_6D], 0
.text:00001A5B                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001A62                 lea     ecx, [ebp+var_18]
.text:00001A65                 call    ??1?$CObjArray@D@@QAE@XZ ; CObjArray<char>::~CObjArray<char>(void)
.text:00001A6A                 mov     al, [ebp+var_6D]
.text:00001A6D                 jmp     loc_1C60
.text:00001A72 ; ---------------------------------------------------------------------------
.text:00001A72
.text:00001A72 loc_1A72:                               ; CODE XREF: NWindows::NFile::NFind::MyGetLogicalDriveStrings(CObjectVector<UString> &)+B9j
.text:00001A72                 lea     ecx, [ebp+var_30]
.text:00001A75                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:00001A7A                 mov     byte ptr [ebp+var_4], 1
.text:00001A7E                 mov     [ebp+var_38], 0
.text:00001A85                 mov     [ebp+var_3C], 0
.text:00001A8C                 jmp     short loc_1A97
.text:00001A8E ; ---------------------------------------------------------------------------
.text:00001A8E
.text:00001A8E loc_1A8E:                               ; CODE XREF: NWindows::NFile::NFind::MyGetLogicalDriveStrings(CObjectVector<UString> &):loc_1B0Dj
.text:00001A8E                 mov     ecx, [ebp+var_3C]
.text:00001A91                 add     ecx, 1
.text:00001A94                 mov     [ebp+var_3C], ecx
.text:00001A97
.text:00001A97 loc_1A97:                               ; CODE XREF: NWindows::NFile::NFind::MyGetLogicalDriveStrings(CObjectVector<UString> &)+F0j
.text:00001A97                 mov     edx, [ebp+var_3C]
.text:00001A9A                 cmp     edx, [ebp+var_20]
.text:00001A9D                 jnb     short loc_1B12
.text:00001A9F                 lea     ecx, [ebp+var_18]
.text:00001AA2                 call    ??B?$CObjArray@D@@QAEPADXZ ; CObjArray<char>::operator char *(void)
.text:00001AA7                 mov     ecx, [ebp+var_3C]
.text:00001AAA                 movsx   edx, byte ptr [eax+ecx]
.text:00001AAE                 test    edx, edx
.text:00001AB0                 jnz     short loc_1B0D
.text:00001AB2                 lea     ecx, [ebp+var_18]
.text:00001AB5                 call    ??B?$CObjArray@D@@QAEPADXZ ; CObjArray<char>::operator char *(void)
.text:00001ABA                 add     eax, [ebp+var_38]
.text:00001ABD                 push    eax
.text:00001ABE                 lea     ecx, [ebp+var_30]
.text:00001AC1                 call    ??4AString@@QAEAAV0@PBD@Z ; AString::operator=(char const *)
.text:00001AC6                 mov     eax, [ebp+var_3C]
.text:00001AC9                 add     eax, 1
.text:00001ACC                 mov     [ebp+var_38], eax
.text:00001ACF                 lea     ecx, [ebp+var_30]
.text:00001AD2                 push    ecx
.text:00001AD3                 lea     edx, [ebp+var_7C]
.text:00001AD6                 push    edx
.text:00001AD7                 call    ?fas2fs@@YG?AVUString@@ABVAString@@@Z ; fas2fs(AString const &)
.text:00001ADC                 mov     [ebp+var_84], eax
.text:00001AE2                 mov     eax, [ebp+var_84]
.text:00001AE8                 mov     [ebp+var_88], eax
.text:00001AEE                 mov     byte ptr [ebp+var_4], 2
.text:00001AF2                 mov     ecx, [ebp+var_88]
.text:00001AF8                 push    ecx
.text:00001AF9                 mov     ecx, [ebp+arg_0]
.text:00001AFC                 call    ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ; CObjectVector<UString>::Add(UString const &)
.text:00001B01                 mov     byte ptr [ebp+var_4], 1
.text:00001B05                 lea     ecx, [ebp+var_7C] ; this
.text:00001B08                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001B0D
.text:00001B0D loc_1B0D:                               ; CODE XREF: NWindows::NFile::NFind::MyGetLogicalDriveStrings(CObjectVector<UString> &)+114j
.text:00001B0D                 jmp     loc_1A8E
.text:00001B12 ; ---------------------------------------------------------------------------
.text:00001B12
.text:00001B12 loc_1B12:                               ; CODE XREF: NWindows::NFile::NFind::MyGetLogicalDriveStrings(CObjectVector<UString> &)+101j
.text:00001B12                 mov     edx, [ebp+var_38]
.text:00001B15                 xor     eax, eax
.text:00001B17                 cmp     edx, [ebp+var_20]
.text:00001B1A                 setz    al
.text:00001B1D                 mov     [ebp+var_7D], al
.text:00001B20                 mov     byte ptr [ebp+var_4], 0
.text:00001B24                 lea     ecx, [ebp+var_30] ; this
.text:00001B27                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00001B2C                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001B33                 lea     ecx, [ebp+var_18]
.text:00001B36                 call    ??1?$CObjArray@D@@QAE@XZ ; CObjArray<char>::~CObjArray<char>(void)
.text:00001B3B                 mov     al, [ebp+var_7D]
.text:00001B3E                 jmp     loc_1C60
.text:00001B43 ; ---------------------------------------------------------------------------
.text:00001B43                 jmp     loc_1C60
.text:00001B48 ; ---------------------------------------------------------------------------
.text:00001B48
.text:00001B48 loc_1B48:                               ; CODE XREF: NWindows::NFile::NFind::MyGetLogicalDriveStrings(CObjectVector<UString> &)+4Aj
.text:00001B48                 mov     esi, esp
.text:00001B4A                 push    0               ; lpBuffer
.text:00001B4C                 push    0               ; nBufferLength
.text:00001B4E                 call    dword ptr ds:__imp__GetLogicalDriveStringsW@8 ; GetLogicalDriveStringsW(x,x)
.text:00001B54                 cmp     esi, esp
.text:00001B56                 call    __RTC_CheckEsp
.text:00001B5B                 mov     [ebp+var_40], eax
.text:00001B5E                 cmp     [ebp+var_40], 0
.text:00001B62                 jnz     short loc_1B6B
.text:00001B64                 xor     al, al
.text:00001B66                 jmp     loc_1C60
.text:00001B6B ; ---------------------------------------------------------------------------
.text:00001B6B
.text:00001B6B loc_1B6B:                               ; CODE XREF: NWindows::NFile::NFind::MyGetLogicalDriveStrings(CObjectVector<UString> &)+1C6j
.text:00001B6B                 mov     ecx, [ebp+var_40]
.text:00001B6E                 push    ecx
.text:00001B6F                 lea     ecx, [ebp+var_48]
.text:00001B72                 call    ??0?$CObjArray@_W@@QAE@I@Z ; CObjArray<wchar_t>::CObjArray<wchar_t>(uint)
.text:00001B77                 mov     [ebp+var_4], 3
.text:00001B7E                 lea     ecx, [ebp+var_48]
.text:00001B81                 call    ??B?$CObjArray@_W@@QAEPA_WXZ ; CObjArray<wchar_t>::operator wchar_t *(void)
.text:00001B86                 mov     esi, esp
.text:00001B88                 push    eax             ; lpBuffer
.text:00001B89                 mov     edx, [ebp+var_40]
.text:00001B8C                 push    edx             ; nBufferLength
.text:00001B8D                 call    dword ptr ds:__imp__GetLogicalDriveStringsW@8 ; GetLogicalDriveStringsW(x,x)
.text:00001B93                 cmp     esi, esp
.text:00001B95                 call    __RTC_CheckEsp
.text:00001B9A                 mov     [ebp+var_50], eax
.text:00001B9D                 cmp     [ebp+var_50], 0
.text:00001BA1                 jz      short loc_1BAB
.text:00001BA3                 mov     eax, [ebp+var_50]
.text:00001BA6                 cmp     eax, [ebp+var_40]
.text:00001BA9                 jbe     short loc_1BC6
.text:00001BAB
.text:00001BAB loc_1BAB:                               ; CODE XREF: NWindows::NFile::NFind::MyGetLogicalDriveStrings(CObjectVector<UString> &)+205j
.text:00001BAB                 mov     [ebp+var_7E], 0
.text:00001BAF                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001BB6                 lea     ecx, [ebp+var_48]
.text:00001BB9                 call    ??1?$CObjArray@_W@@QAE@XZ ; CObjArray<wchar_t>::~CObjArray<wchar_t>(void)
.text:00001BBE                 mov     al, [ebp+var_7E]
.text:00001BC1                 jmp     loc_1C60
.text:00001BC6 ; ---------------------------------------------------------------------------
.text:00001BC6
.text:00001BC6 loc_1BC6:                               ; CODE XREF: NWindows::NFile::NFind::MyGetLogicalDriveStrings(CObjectVector<UString> &)+20Dj
.text:00001BC6                 lea     ecx, [ebp+var_60]
.text:00001BC9                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00001BCE                 mov     byte ptr [ebp+var_4], 4
.text:00001BD2                 mov     [ebp+var_68], 0
.text:00001BD9                 mov     [ebp+var_6C], 0
.text:00001BE0                 jmp     short loc_1BEB
.text:00001BE2 ; ---------------------------------------------------------------------------
.text:00001BE2
.text:00001BE2 loc_1BE2:                               ; CODE XREF: NWindows::NFile::NFind::MyGetLogicalDriveStrings(CObjectVector<UString> &):loc_1C32j
.text:00001BE2                 mov     ecx, [ebp+var_6C]
.text:00001BE5                 add     ecx, 1
.text:00001BE8                 mov     [ebp+var_6C], ecx
.text:00001BEB
.text:00001BEB loc_1BEB:                               ; CODE XREF: NWindows::NFile::NFind::MyGetLogicalDriveStrings(CObjectVector<UString> &)+244j
.text:00001BEB                 mov     edx, [ebp+var_6C]
.text:00001BEE                 cmp     edx, [ebp+var_50]
.text:00001BF1                 jnb     short loc_1C34
.text:00001BF3                 lea     ecx, [ebp+var_48]
.text:00001BF6                 call    ??B?$CObjArray@_W@@QAEPA_WXZ ; CObjArray<wchar_t>::operator wchar_t *(void)
.text:00001BFB                 mov     ecx, [ebp+var_6C]
.text:00001BFE                 movzx   edx, word ptr [eax+ecx*2]
.text:00001C02                 test    edx, edx
.text:00001C04                 jnz     short loc_1C32
.text:00001C06                 lea     ecx, [ebp+var_48]
.text:00001C09                 call    ??B?$CObjArray@_W@@QAEPA_WXZ ; CObjArray<wchar_t>::operator wchar_t *(void)
.text:00001C0E                 mov     ecx, [ebp+var_68]
.text:00001C11                 lea     edx, [eax+ecx*2]
.text:00001C14                 push    edx
.text:00001C15                 lea     ecx, [ebp+var_60]
.text:00001C18                 call    ??4UString@@QAEAAV0@PB_W@Z ; UString::operator=(wchar_t const *)
.text:00001C1D                 mov     eax, [ebp+var_6C]
.text:00001C20                 add     eax, 1
.text:00001C23                 mov     [ebp+var_68], eax
.text:00001C26                 lea     ecx, [ebp+var_60]
.text:00001C29                 push    ecx
.text:00001C2A                 mov     ecx, [ebp+arg_0]
.text:00001C2D                 call    ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ; CObjectVector<UString>::Add(UString const &)
.text:00001C32
.text:00001C32 loc_1C32:                               ; CODE XREF: NWindows::NFile::NFind::MyGetLogicalDriveStrings(CObjectVector<UString> &)+268j
.text:00001C32                 jmp     short loc_1BE2
.text:00001C34 ; ---------------------------------------------------------------------------
.text:00001C34
.text:00001C34 loc_1C34:                               ; CODE XREF: NWindows::NFile::NFind::MyGetLogicalDriveStrings(CObjectVector<UString> &)+255j
.text:00001C34                 mov     edx, [ebp+var_68]
.text:00001C37                 xor     eax, eax
.text:00001C39                 cmp     edx, [ebp+var_50]
.text:00001C3C                 setz    al
.text:00001C3F                 mov     [ebp+var_7F], al
.text:00001C42                 mov     byte ptr [ebp+var_4], 3
.text:00001C46                 lea     ecx, [ebp+var_60] ; this
.text:00001C49                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001C4E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001C55                 lea     ecx, [ebp+var_48]
.text:00001C58                 call    ??1?$CObjArray@_W@@QAE@XZ ; CObjArray<wchar_t>::~CObjArray<wchar_t>(void)
.text:00001C5D                 mov     al, [ebp+var_7F]
.text:00001C60
.text:00001C60 loc_1C60:                               ; CODE XREF: NWindows::NFile::NFind::MyGetLogicalDriveStrings(CObjectVector<UString> &)+76j
.text:00001C60                                         ; NWindows::NFile::NFind::MyGetLogicalDriveStrings(CObjectVector<UString> &)+D1j ...
.text:00001C60                 push    edx
.text:00001C61                 mov     ecx, ebp
.text:00001C63                 push    eax
.text:00001C64                 lea     edx, $LN30
.text:00001C6A                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001C6F                 pop     eax
.text:00001C70                 pop     edx
.text:00001C71                 mov     ecx, [ebp+var_C]
.text:00001C74                 mov     large fs:0, ecx
.text:00001C7B                 pop     ecx
.text:00001C7C                 pop     edi
.text:00001C7D                 pop     esi
.text:00001C7E                 add     esp, 88h
.text:00001C84                 cmp     ebp, esp
.text:00001C86                 call    __RTC_CheckEsp
.text:00001C8B                 mov     esp, ebp
.text:00001C8D                 pop     ebp
.text:00001C8E                 retn    4
.text:00001C8E ?MyGetLogicalDriveStrings@NFind@NFile@NWindows@@YG_NAAV?$CObjectVector@VUString@@@@@Z endp
.text:00001C8E
.text:00001C8E ; ---------------------------------------------------------------------------
.text:00001C91                 align 4
.text:00001C94 $LN30           dd 4                    ; DATA XREF: NWindows::NFile::NFind::MyGetLogicalDriveStrings(CObjectVector<UString> &)+2C8o
.text:00001C98                 dd offset $LN29
.text:00001C9C $LN29           dd 0FFFFFFE8h, 4        ; DATA XREF: .text:00001C98o
.text:00001CA4                 dd offset $LN24
.text:00001CA8                 dd 0FFFFFFD0h, 0Ch
.text:00001CB0                 dd offset $LN25
.text:00001CB4                 dd 0FFFFFFB8h, 4
.text:00001CBC                 dd offset $LN26
.text:00001CC0                 dd 0FFFFFFA0h, 0Ch
.text:00001CC8                 dd offset $LN27
.text:00001CCC $LN27           db 73h, 0               ; DATA XREF: .text:00001CC8o
.text:00001CCE $LN26           dw 7562h                ; DATA XREF: .text:00001CBCo
.text:00001CD0                 db 66h, 0
.text:00001CD2 $LN25           dw 73h                  ; DATA XREF: .text:00001CB0o
.text:00001CD4 $LN24           dd 667562h              ; DATA XREF: .text:00001CA4o
.text:00001CD4 _text           ends
.text:00001CD4
.rtc$TMZ:00001CD8 ; ===========================================================================
.rtc$TMZ:00001CD8
.rtc$TMZ:00001CD8 ; Segment type: Pure data
.rtc$TMZ:00001CD8 ; Segment permissions: Read
.rtc$TMZ:00001CD8 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00001CD8                 assume cs:_rtc$TMZ
.rtc$TMZ:00001CD8                 ;org 1CD8h
.rtc$TMZ:00001CD8 ; COMDAT (pick any)
.rtc$TMZ:00001CD8 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00001CD8 _rtc$TMZ        ends
.rtc$TMZ:00001CD8
.rtc$IMZ:00001CDC ; ===========================================================================
.rtc$IMZ:00001CDC
.rtc$IMZ:00001CDC ; Segment type: Pure data
.rtc$IMZ:00001CDC ; Segment permissions: Read
.rtc$IMZ:00001CDC _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00001CDC                 assume cs:_rtc$IMZ
.rtc$IMZ:00001CDC                 ;org 1CDCh
.rtc$IMZ:00001CDC ; COMDAT (pick any)
.rtc$IMZ:00001CDC __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00001CDC _rtc$IMZ        ends
.rtc$IMZ:00001CDC
.text:00001CE0 ; ===========================================================================
.text:00001CE0
.text:00001CE0 ; Segment type: Pure code
.text:00001CE0 ; Segment permissions: Read/Execute
.text:00001CE0 _text           segment para public 'CODE' use32
.text:00001CE0                 assume cs:_text
.text:00001CE0                 ;org 1CE0h
.text:00001CE0 ; COMDAT (pick any)
.text:00001CE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001CE0
.text:00001CE0 ; =============== S U B R O U T I N E =======================================
.text:00001CE0
.text:00001CE0 ; Attributes: bp-based frame
.text:00001CE0
.text:00001CE0 ; unsigned int __thiscall UString::Len(UString *__hidden this)
.text:00001CE0                 public ?Len@UString@@QBEIXZ
.text:00001CE0 ?Len@UString@@QBEIXZ proc near          ; CODE XREF: NWindows::NFile::NFind::CFileInfo::IsDots(void)+59p
.text:00001CE0                                         ; NWindows::NFile::NFind::CFileInfo::IsDots(void)+69p ...
.text:00001CE0
.text:00001CE0 var_4           = dword ptr -4
.text:00001CE0
.text:00001CE0                 push    ebp
.text:00001CE1                 mov     ebp, esp
.text:00001CE3                 push    ecx
.text:00001CE4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001CEB                 mov     [ebp+var_4], ecx
.text:00001CEE                 mov     eax, [ebp+var_4]
.text:00001CF1                 mov     eax, [eax+4]
.text:00001CF4                 mov     esp, ebp
.text:00001CF6                 pop     ebp
.text:00001CF7                 retn
.text:00001CF7 ?Len@UString@@QBEIXZ endp
.text:00001CF7
.text:00001CF7 _text           ends
.text:00001CF7
.text:00001CF8 ; ===========================================================================
.text:00001CF8
.text:00001CF8 ; Segment type: Pure code
.text:00001CF8 ; Segment permissions: Read/Execute
.text:00001CF8 _text           segment para public 'CODE' use32
.text:00001CF8                 assume cs:_text
.text:00001CF8                 ;org 1CF8h
.text:00001CF8 ; COMDAT (pick any)
.text:00001CF8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001CF8
.text:00001CF8 ; =============== S U B R O U T I N E =======================================
.text:00001CF8
.text:00001CF8 ; Attributes: bp-based frame
.text:00001CF8
.text:00001CF8 ; bool __thiscall UString::IsEmpty(UString *__hidden this)
.text:00001CF8                 public ?IsEmpty@UString@@QBE_NXZ
.text:00001CF8 ?IsEmpty@UString@@QBE_NXZ proc near     ; CODE XREF: NWindows::NFile::NFind::CFileInfo::IsDots(void)+2Cp
.text:00001CF8
.text:00001CF8 var_4           = dword ptr -4
.text:00001CF8
.text:00001CF8                 push    ebp
.text:00001CF9                 mov     ebp, esp
.text:00001CFB                 push    ecx
.text:00001CFC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001D03                 mov     [ebp+var_4], ecx
.text:00001D06                 mov     eax, [ebp+var_4]
.text:00001D09                 xor     ecx, ecx
.text:00001D0B                 cmp     dword ptr [eax+4], 0
.text:00001D0F                 setz    cl
.text:00001D12                 mov     al, cl
.text:00001D14                 mov     esp, ebp
.text:00001D16                 pop     ebp
.text:00001D17                 retn
.text:00001D17 ?IsEmpty@UString@@QBE_NXZ endp
.text:00001D17
.text:00001D17 _text           ends
.text:00001D17
.text:00001D18 ; ===========================================================================
.text:00001D18
.text:00001D18 ; Segment type: Pure code
.text:00001D18 ; Segment permissions: Read/Execute
.text:00001D18 _text           segment para public 'CODE' use32
.text:00001D18                 assume cs:_text
.text:00001D18                 ;org 1D18h
.text:00001D18 ; COMDAT (pick any)
.text:00001D18                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001D18
.text:00001D18 ; =============== S U B R O U T I N E =======================================
.text:00001D18
.text:00001D18 ; Attributes: bp-based frame
.text:00001D18
.text:00001D18 ; public: __thiscall UString::operator wchar_t const *(void)const
.text:00001D18                 public ??BUString@@QBEPB_WXZ
.text:00001D18 ??BUString@@QBEPB_WXZ proc near         ; CODE XREF: NWindows::NFile::NFind::CFileInfo::IsDots(void)+42p
.text:00001D18                                         ; NWindows::NFile::NFind::CFileInfo::IsDots(void)+79p ...
.text:00001D18
.text:00001D18 var_4           = dword ptr -4
.text:00001D18
.text:00001D18                 push    ebp
.text:00001D19                 mov     ebp, esp
.text:00001D1B                 push    ecx
.text:00001D1C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001D23                 mov     [ebp+var_4], ecx
.text:00001D26                 mov     eax, [ebp+var_4]
.text:00001D29                 mov     eax, [eax]
.text:00001D2B                 mov     esp, ebp
.text:00001D2D                 pop     ebp
.text:00001D2E                 retn
.text:00001D2E ??BUString@@QBEPB_WXZ endp
.text:00001D2E
.text:00001D2E ; ---------------------------------------------------------------------------
.text:00001D2F                 align 10h
.text:00001D2F _text           ends
.text:00001D2F
.text:00001D30 ; ===========================================================================
.text:00001D30
.text:00001D30 ; Segment type: Pure code
.text:00001D30 ; Segment permissions: Read/Execute
.text:00001D30 _text           segment para public 'CODE' use32
.text:00001D30                 assume cs:_text
.text:00001D30                 ;org 1D30h
.text:00001D30 ; COMDAT (pick any)
.text:00001D30                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001D30
.text:00001D30 ; =============== S U B R O U T I N E =======================================
.text:00001D30
.text:00001D30 ; Attributes: bp-based frame
.text:00001D30
.text:00001D30 ; bool __thiscall NWindows::NFile::NFind::CFileInfoBase::IsDir(NWindows::NFile::NFind::CFileInfoBase *__hidden this)
.text:00001D30                 public ?IsDir@CFileInfoBase@NFind@NFile@NWindows@@QBE_NXZ
.text:00001D30 ?IsDir@CFileInfoBase@NFind@NFile@NWindows@@QBE_NXZ proc near
.text:00001D30                                         ; CODE XREF: NWindows::NFile::NFind::CFileInfo::IsDots(void)+1Ap
.text:00001D30                                         ; NWindows::NFile::NFind::DoesFileExist(wchar_t const *)+5Ap ...
.text:00001D30
.text:00001D30 var_4           = dword ptr -4
.text:00001D30
.text:00001D30                 push    ebp
.text:00001D31                 mov     ebp, esp
.text:00001D33                 push    ecx
.text:00001D34                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001D3B                 mov     [ebp+var_4], ecx
.text:00001D3E                 push    10h             ; unsigned int
.text:00001D40                 mov     ecx, [ebp+var_4] ; this
.text:00001D43                 call    ?MatchesMask@CFileInfoBase@NFind@NFile@NWindows@@ABE_NI@Z ; NWindows::NFile::NFind::CFileInfoBase::MatchesMask(uint)
.text:00001D48                 add     esp, 4
.text:00001D4B                 cmp     ebp, esp
.text:00001D4D                 call    __RTC_CheckEsp
.text:00001D52                 mov     esp, ebp
.text:00001D54                 pop     ebp
.text:00001D55                 retn
.text:00001D55 ?IsDir@CFileInfoBase@NFind@NFile@NWindows@@QBE_NXZ endp
.text:00001D55
.text:00001D55 ; ---------------------------------------------------------------------------
.text:00001D56                 align 4
.text:00001D56 _text           ends
.text:00001D56
.text:00001D58 ; ===========================================================================
.text:00001D58
.text:00001D58 ; Segment type: Pure code
.text:00001D58 ; Segment permissions: Read/Execute
.text:00001D58 _text           segment para public 'CODE' use32
.text:00001D58                 assume cs:_text
.text:00001D58                 ;org 1D58h
.text:00001D58 ; COMDAT (pick any)
.text:00001D58                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001D58
.text:00001D58 ; =============== S U B R O U T I N E =======================================
.text:00001D58
.text:00001D58 ; Attributes: bp-based frame
.text:00001D58
.text:00001D58 ; bool __thiscall NWindows::NFile::NFind::CFileInfoBase::MatchesMask(NWindows::NFile::NFind::CFileInfoBase *this, unsigned int)
.text:00001D58                 public ?MatchesMask@CFileInfoBase@NFind@NFile@NWindows@@ABE_NI@Z
.text:00001D58 ?MatchesMask@CFileInfoBase@NFind@NFile@NWindows@@ABE_NI@Z proc near
.text:00001D58                                         ; CODE XREF: NWindows::NFile::NFind::CFileInfoBase::IsDir(void)+13p
.text:00001D58
.text:00001D58 var_4           = dword ptr -4
.text:00001D58 arg_0           = dword ptr  8
.text:00001D58
.text:00001D58                 push    ebp
.text:00001D59                 mov     ebp, esp
.text:00001D5B                 push    ecx
.text:00001D5C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001D63                 mov     [ebp+var_4], ecx
.text:00001D66                 mov     eax, [ebp+var_4]
.text:00001D69                 mov     eax, [eax+20h]
.text:00001D6C                 and     eax, [ebp+arg_0]
.text:00001D6F                 neg     eax
.text:00001D71                 sbb     eax, eax
.text:00001D73                 neg     eax
.text:00001D75                 mov     esp, ebp
.text:00001D77                 pop     ebp
.text:00001D78                 retn    4
.text:00001D78 ?MatchesMask@CFileInfoBase@NFind@NFile@NWindows@@ABE_NI@Z endp
.text:00001D78
.text:00001D78 ; ---------------------------------------------------------------------------
.text:00001D7B                 align 4
.text:00001D7B _text           ends
.text:00001D7B
.text$x:00001D7C ; ===========================================================================
.text$x:00001D7C
.text$x:00001D7C ; Segment type: Pure code
.text$x:00001D7C ; Segment permissions: Read/Execute
.text$x:00001D7C _text$x         segment para public 'CODE' use32
.text$x:00001D7C                 assume cs:_text$x
.text$x:00001D7C                 ;org 1D7Ch
.text$x:00001D7C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00001D7C
.text$x:00001D7C ; =============== S U B R O U T I N E =======================================
.text$x:00001D7C
.text$x:00001D7C
.text$x:00001D7C __unwindfunclet$?FindFirst@CFindFile@NFind@NFile@NWindows@@QAE_NPB_WAAUCFileInfo@234@@Z$0 proc near
.text$x:00001D7C                                         ; DATA XREF: .xdata$x:00001F80o
.text$x:00001D7C                 lea     ecx, [ebp-3C0h] ; this
.text$x:00001D82                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00001D82 __unwindfunclet$?FindFirst@CFindFile@NFind@NFile@NWindows@@QAE_NPB_WAAUCFileInfo@234@@Z$0 endp
.text$x:00001D82
.text$x:00001D87
.text$x:00001D87 ; =============== S U B R O U T I N E =======================================
.text$x:00001D87
.text$x:00001D87
.text$x:00001D87 __ehhandler$?FindFirst@CFindFile@NFind@NFile@NWindows@@QAE_NPB_WAAUCFileInfo@234@@Z proc near
.text$x:00001D87                                         ; DATA XREF: NWindows::NFile::NFind::CFindFile::FindFirst(wchar_t const *,NWindows::NFile::NFind::CFileInfo &)+5o
.text$x:00001D87
.text$x:00001D87 arg_4           = dword ptr  8
.text$x:00001D87
.text$x:00001D87                 mov     edx, [esp+arg_4]
.text$x:00001D8B                 lea     eax, [edx+0Ch]
.text$x:00001D8E                 mov     ecx, [edx-3C8h]
.text$x:00001D94                 xor     ecx, eax
.text$x:00001D96                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001D9B                 mov     ecx, [edx-4]
.text$x:00001D9E                 xor     ecx, eax
.text$x:00001DA0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001DA5                 mov     eax, offset __ehfuncinfo$?FindFirst@CFindFile@NFind@NFile@NWindows@@QAE_NPB_WAAUCFileInfo@234@@Z
.text$x:00001DAA                 jmp     ___CxxFrameHandler3
.text$x:00001DAA __ehhandler$?FindFirst@CFindFile@NFind@NFile@NWindows@@QAE_NPB_WAAUCFileInfo@234@@Z endp
.text$x:00001DAA
.text$x:00001DAF
.text$x:00001DAF ; =============== S U B R O U T I N E =======================================
.text$x:00001DAF
.text$x:00001DAF
.text$x:00001DAF __unwindfunclet$?Convert_WIN32_FIND_DATA_to_FileInfo@NFind@NFile@NWindows@@YGXABU_WIN32_FIND_DATAA@@AAUCFileInfo@123@@Z$0 proc near
.text$x:00001DAF                                         ; DATA XREF: .xdata$x:00001FACo
.text$x:00001DAF                 lea     ecx, [ebp-18h]  ; this
.text$x:00001DB2                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00001DB2 __unwindfunclet$?Convert_WIN32_FIND_DATA_to_FileInfo@NFind@NFile@NWindows@@YGXABU_WIN32_FIND_DATAA@@AAUCFileInfo@123@@Z$0 endp
.text$x:00001DB2
.text$x:00001DB7
.text$x:00001DB7 ; =============== S U B R O U T I N E =======================================
.text$x:00001DB7
.text$x:00001DB7
.text$x:00001DB7 __unwindfunclet$?Convert_WIN32_FIND_DATA_to_FileInfo@NFind@NFile@NWindows@@YGXABU_WIN32_FIND_DATAA@@AAUCFileInfo@123@@Z$1 proc near
.text$x:00001DB7                                         ; DATA XREF: .xdata$x:00001FB4o
.text$x:00001DB7                 lea     ecx, [ebp-24h]  ; this
.text$x:00001DBA                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00001DBA __unwindfunclet$?Convert_WIN32_FIND_DATA_to_FileInfo@NFind@NFile@NWindows@@YGXABU_WIN32_FIND_DATAA@@AAUCFileInfo@123@@Z$1 endp
.text$x:00001DBA
.text$x:00001DBF
.text$x:00001DBF ; =============== S U B R O U T I N E =======================================
.text$x:00001DBF
.text$x:00001DBF
.text$x:00001DBF __ehhandler$?Convert_WIN32_FIND_DATA_to_FileInfo@NFind@NFile@NWindows@@YGXABU_WIN32_FIND_DATAA@@AAUCFileInfo@123@@Z proc near
.text$x:00001DBF                                         ; DATA XREF: NWindows::NFile::NFind::Convert_WIN32_FIND_DATA_to_FileInfo(_WIN32_FIND_DATAA const &,NWindows::NFile::NFind::CFileInfo &)+5o
.text$x:00001DBF
.text$x:00001DBF arg_4           = dword ptr  8
.text$x:00001DBF
.text$x:00001DBF                 mov     edx, [esp+arg_4]
.text$x:00001DC3                 lea     eax, [edx+0Ch]
.text$x:00001DC6                 mov     ecx, [edx-28h]
.text$x:00001DC9                 xor     ecx, eax
.text$x:00001DCB                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001DD0                 mov     eax, offset __ehfuncinfo$?Convert_WIN32_FIND_DATA_to_FileInfo@NFind@NFile@NWindows@@YGXABU_WIN32_FIND_DATAA@@AAUCFileInfo@123@@Z
.text$x:00001DD5                 jmp     ___CxxFrameHandler3
.text$x:00001DD5 __ehhandler$?Convert_WIN32_FIND_DATA_to_FileInfo@NFind@NFile@NWindows@@YGXABU_WIN32_FIND_DATAA@@AAUCFileInfo@123@@Z endp
.text$x:00001DD5
.text$x:00001DDA
.text$x:00001DDA ; =============== S U B R O U T I N E =======================================
.text$x:00001DDA
.text$x:00001DDA
.text$x:00001DDA __unwindfunclet$?GetReducedName@CStreamInfo@NFind@NFile@NWindows@@QBE?AVUString@@XZ$0 proc near
.text$x:00001DDA                                         ; DATA XREF: .xdata$x:00001FE8o
.text$x:00001DDA                 lea     ecx, [ebp-20h]  ; this
.text$x:00001DDD                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00001DDD __unwindfunclet$?GetReducedName@CStreamInfo@NFind@NFile@NWindows@@QBE?AVUString@@XZ$0 endp
.text$x:00001DDD
.text$x:00001DE2
.text$x:00001DE2 ; =============== S U B R O U T I N E =======================================
.text$x:00001DE2
.text$x:00001DE2
.text$x:00001DE2 __unwindfunclet$?GetReducedName@CStreamInfo@NFind@NFile@NWindows@@QBE?AVUString@@XZ$1 proc near
.text$x:00001DE2                                         ; DATA XREF: .xdata$x:00001FE0o
.text$x:00001DE2                 mov     eax, [ebp-28h]
.text$x:00001DE5                 and     eax, 1
.text$x:00001DE8                 jz      locret_1DFA
.text$x:00001DEE                 and     dword ptr [ebp-28h], 0FFFFFFFEh
.text$x:00001DF2                 mov     ecx, [ebp+8]    ; this
.text$x:00001DF5                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00001DFA ; ---------------------------------------------------------------------------
.text$x:00001DFA
.text$x:00001DFA locret_1DFA:                            ; CODE XREF: __unwindfunclet$?GetReducedName@CStreamInfo@NFind@NFile@NWindows@@QBE?AVUString@@XZ$1+6j
.text$x:00001DFA                 retn
.text$x:00001DFA __unwindfunclet$?GetReducedName@CStreamInfo@NFind@NFile@NWindows@@QBE?AVUString@@XZ$1 endp
.text$x:00001DFA
.text$x:00001DFB
.text$x:00001DFB ; =============== S U B R O U T I N E =======================================
.text$x:00001DFB
.text$x:00001DFB
.text$x:00001DFB __ehhandler$?GetReducedName@CStreamInfo@NFind@NFile@NWindows@@QBE?AVUString@@XZ proc near
.text$x:00001DFB                                         ; DATA XREF: NWindows::NFile::NFind::CStreamInfo::GetReducedName(void)+5o
.text$x:00001DFB
.text$x:00001DFB arg_4           = dword ptr  8
.text$x:00001DFB
.text$x:00001DFB                 mov     edx, [esp+arg_4]
.text$x:00001DFF                 lea     eax, [edx+0Ch]
.text$x:00001E02                 mov     ecx, [edx-20h]
.text$x:00001E05                 xor     ecx, eax
.text$x:00001E07                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001E0C                 mov     eax, offset __ehfuncinfo$?GetReducedName@CStreamInfo@NFind@NFile@NWindows@@QBE?AVUString@@XZ
.text$x:00001E11                 jmp     ___CxxFrameHandler3
.text$x:00001E11 __ehhandler$?GetReducedName@CStreamInfo@NFind@NFile@NWindows@@QBE?AVUString@@XZ endp
.text$x:00001E11
.text$x:00001E16
.text$x:00001E16 ; =============== S U B R O U T I N E =======================================
.text$x:00001E16
.text$x:00001E16
.text$x:00001E16 __unwindfunclet$?GetFileAttrib@NFind@NFile@NWindows@@YGKPB_W@Z$0 proc near
.text$x:00001E16                                         ; DATA XREF: .xdata$x:00002014o
.text$x:00001E16                 lea     ecx, [ebp-20h]  ; this
.text$x:00001E19                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00001E19 __unwindfunclet$?GetFileAttrib@NFind@NFile@NWindows@@YGKPB_W@Z$0 endp
.text$x:00001E19
.text$x:00001E1E
.text$x:00001E1E ; =============== S U B R O U T I N E =======================================
.text$x:00001E1E
.text$x:00001E1E
.text$x:00001E1E __ehhandler$?GetFileAttrib@NFind@NFile@NWindows@@YGKPB_W@Z proc near
.text$x:00001E1E                                         ; DATA XREF: NWindows::NFile::NFind::GetFileAttrib(wchar_t const *)+5o
.text$x:00001E1E
.text$x:00001E1E arg_4           = dword ptr  8
.text$x:00001E1E
.text$x:00001E1E                 mov     edx, [esp+arg_4]
.text$x:00001E22                 lea     eax, [edx+0Ch]
.text$x:00001E25                 mov     ecx, [edx-24h]
.text$x:00001E28                 xor     ecx, eax
.text$x:00001E2A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001E2F                 mov     eax, offset __ehfuncinfo$?GetFileAttrib@NFind@NFile@NWindows@@YGKPB_W@Z
.text$x:00001E34                 jmp     ___CxxFrameHandler3
.text$x:00001E34 __ehhandler$?GetFileAttrib@NFind@NFile@NWindows@@YGKPB_W@Z endp
.text$x:00001E34
.text$x:00001E39
.text$x:00001E39 ; =============== S U B R O U T I N E =======================================
.text$x:00001E39
.text$x:00001E39
.text$x:00001E39 __unwindfunclet$?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z$0 proc near
.text$x:00001E39                                         ; DATA XREF: .xdata$x:00002064o
.text$x:00001E39                 lea     ecx, [ebp-68h]  ; this
.text$x:00001E3C                 jmp     ??1CInFile@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::CInFile::~CInFile(void)
.text$x:00001E3C __unwindfunclet$?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z$0 endp
.text$x:00001E3C
.text$x:00001E41
.text$x:00001E41 ; =============== S U B R O U T I N E =======================================
.text$x:00001E41
.text$x:00001E41
.text$x:00001E41 __unwindfunclet$?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z$1 proc near
.text$x:00001E41                                         ; DATA XREF: .xdata$x:0000206Co
.text$x:00001E41                 lea     ecx, [ebp-80h]  ; this
.text$x:00001E44                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00001E44 __unwindfunclet$?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z$1 endp
.text$x:00001E44
.text$x:00001E49
.text$x:00001E49 ; =============== S U B R O U T I N E =======================================
.text$x:00001E49
.text$x:00001E49
.text$x:00001E49 __unwindfunclet$?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z$2 proc near
.text$x:00001E49                                         ; DATA XREF: .xdata$x:00002074o
.text$x:00001E49                 lea     ecx, [ebp-94h]  ; this
.text$x:00001E4F                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00001E4F __unwindfunclet$?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z$2 endp
.text$x:00001E4F
.text$x:00001E54
.text$x:00001E54 ; =============== S U B R O U T I N E =======================================
.text$x:00001E54
.text$x:00001E54
.text$x:00001E54 __unwindfunclet$?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z$3 proc near
.text$x:00001E54                                         ; DATA XREF: .xdata$x:0000207Co
.text$x:00001E54                 lea     ecx, [ebp-0B4h] ; this
.text$x:00001E5A                 jmp     ??1CStreamEnumerator@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CStreamEnumerator::~CStreamEnumerator(void)
.text$x:00001E5A __unwindfunclet$?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z$3 endp
.text$x:00001E5A
.text$x:00001E5F
.text$x:00001E5F ; =============== S U B R O U T I N E =======================================
.text$x:00001E5F
.text$x:00001E5F
.text$x:00001E5F __unwindfunclet$?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z$4 proc near
.text$x:00001E5F                                         ; DATA XREF: .xdata$x:00002084o
.text$x:00001E5F                 lea     ecx, [ebp-0D4h] ; this
.text$x:00001E65                 jmp     ??1CStreamInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CStreamInfo::~CStreamInfo(void)
.text$x:00001E65 __unwindfunclet$?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z$4 endp
.text$x:00001E65
.text$x:00001E6A
.text$x:00001E6A ; =============== S U B R O U T I N E =======================================
.text$x:00001E6A
.text$x:00001E6A
.text$x:00001E6A __unwindfunclet$?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z$5 proc near
.text$x:00001E6A                                         ; DATA XREF: .xdata$x:0000208Co
.text$x:00001E6A                 lea     ecx, [ebp-0ECh] ; this
.text$x:00001E70                 jmp     ??1CFindFile@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFindFile::~CFindFile(void)
.text$x:00001E70 __unwindfunclet$?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z$5 endp
.text$x:00001E70
.text$x:00001E75
.text$x:00001E75 ; =============== S U B R O U T I N E =======================================
.text$x:00001E75
.text$x:00001E75
.text$x:00001E75 __unwindfunclet$?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z$6 proc near
.text$x:00001E75                                         ; DATA XREF: .xdata$x:00002094o
.text$x:00001E75                 lea     ecx, [ebp-114h] ; this
.text$x:00001E7B                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00001E7B __unwindfunclet$?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z$6 endp
.text$x:00001E7B
.text$x:00001E80
.text$x:00001E80 ; =============== S U B R O U T I N E =======================================
.text$x:00001E80
.text$x:00001E80
.text$x:00001E80 __ehhandler$?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z proc near
.text$x:00001E80                                         ; DATA XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+5o
.text$x:00001E80
.text$x:00001E80 arg_4           = dword ptr  8
.text$x:00001E80
.text$x:00001E80                 mov     edx, [esp+arg_4]
.text$x:00001E84                 lea     eax, [edx+0Ch]
.text$x:00001E87                 mov     ecx, [edx-12Ch]
.text$x:00001E8D                 xor     ecx, eax
.text$x:00001E8F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001E94                 mov     ecx, [edx-4]
.text$x:00001E97                 xor     ecx, eax
.text$x:00001E99                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001E9E                 mov     eax, offset __ehfuncinfo$?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z
.text$x:00001EA3                 jmp     ___CxxFrameHandler3
.text$x:00001EA3 __ehhandler$?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z endp
.text$x:00001EA3
.text$x:00001EA8
.text$x:00001EA8 ; =============== S U B R O U T I N E =======================================
.text$x:00001EA8
.text$x:00001EA8
.text$x:00001EA8 __unwindfunclet$?DoesFileExist@NFind@NFile@NWindows@@YG_NPB_W@Z$0 proc near
.text$x:00001EA8                                         ; DATA XREF: .xdata$x:0000209Co
.text$x:00001EA8                 lea     ecx, [ebp-48h]  ; this
.text$x:00001EAB                 jmp     ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text$x:00001EAB __unwindfunclet$?DoesFileExist@NFind@NFile@NWindows@@YG_NPB_W@Z$0 endp
.text$x:00001EAB
.text$x:00001EB0
.text$x:00001EB0 ; =============== S U B R O U T I N E =======================================
.text$x:00001EB0
.text$x:00001EB0
.text$x:00001EB0 __ehhandler$?DoesFileExist@NFind@NFile@NWindows@@YG_NPB_W@Z proc near
.text$x:00001EB0                                         ; DATA XREF: NWindows::NFile::NFind::DoesFileExist(wchar_t const *)+5o
.text$x:00001EB0
.text$x:00001EB0 arg_4           = dword ptr  8
.text$x:00001EB0
.text$x:00001EB0                 mov     edx, [esp+arg_4]
.text$x:00001EB4                 lea     eax, [edx+0Ch]
.text$x:00001EB7                 mov     ecx, [edx-50h]
.text$x:00001EBA                 xor     ecx, eax
.text$x:00001EBC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001EC1                 mov     eax, offset __ehfuncinfo$?DoesFileExist@NFind@NFile@NWindows@@YG_NPB_W@Z
.text$x:00001EC6                 jmp     ___CxxFrameHandler3
.text$x:00001EC6 __ehhandler$?DoesFileExist@NFind@NFile@NWindows@@YG_NPB_W@Z endp
.text$x:00001EC6
.text$x:00001ECB
.text$x:00001ECB ; =============== S U B R O U T I N E =======================================
.text$x:00001ECB
.text$x:00001ECB
.text$x:00001ECB __unwindfunclet$?DoesDirExist@NFind@NFile@NWindows@@YG_NPB_W@Z$0 proc near
.text$x:00001ECB                                         ; DATA XREF: .xdata$x:000020C8o
.text$x:00001ECB                 lea     ecx, [ebp-48h]  ; this
.text$x:00001ECE                 jmp     ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text$x:00001ECE __unwindfunclet$?DoesDirExist@NFind@NFile@NWindows@@YG_NPB_W@Z$0 endp
.text$x:00001ECE
.text$x:00001ED3
.text$x:00001ED3 ; =============== S U B R O U T I N E =======================================
.text$x:00001ED3
.text$x:00001ED3
.text$x:00001ED3 __ehhandler$?DoesDirExist@NFind@NFile@NWindows@@YG_NPB_W@Z proc near
.text$x:00001ED3                                         ; DATA XREF: NWindows::NFile::NFind::DoesDirExist(wchar_t const *)+5o
.text$x:00001ED3
.text$x:00001ED3 arg_4           = dword ptr  8
.text$x:00001ED3
.text$x:00001ED3                 mov     edx, [esp+arg_4]
.text$x:00001ED7                 lea     eax, [edx+0Ch]
.text$x:00001EDA                 mov     ecx, [edx-50h]
.text$x:00001EDD                 xor     ecx, eax
.text$x:00001EDF                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001EE4                 mov     eax, offset __ehfuncinfo$?DoesDirExist@NFind@NFile@NWindows@@YG_NPB_W@Z
.text$x:00001EE9                 jmp     ___CxxFrameHandler3
.text$x:00001EE9 __ehhandler$?DoesDirExist@NFind@NFile@NWindows@@YG_NPB_W@Z endp
.text$x:00001EE9
.text$x:00001EEE
.text$x:00001EEE ; =============== S U B R O U T I N E =======================================
.text$x:00001EEE
.text$x:00001EEE
.text$x:00001EEE __unwindfunclet$?DoesFileOrDirExist@NFind@NFile@NWindows@@YG_NPB_W@Z$0 proc near
.text$x:00001EEE                                         ; DATA XREF: .xdata$x:000020F4o
.text$x:00001EEE                 lea     ecx, [ebp-48h]  ; this
.text$x:00001EF1                 jmp     ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text$x:00001EF1 __unwindfunclet$?DoesFileOrDirExist@NFind@NFile@NWindows@@YG_NPB_W@Z$0 endp
.text$x:00001EF1
.text$x:00001EF6
.text$x:00001EF6 ; =============== S U B R O U T I N E =======================================
.text$x:00001EF6
.text$x:00001EF6
.text$x:00001EF6 __ehhandler$?DoesFileOrDirExist@NFind@NFile@NWindows@@YG_NPB_W@Z proc near
.text$x:00001EF6                                         ; DATA XREF: NWindows::NFile::NFind::DoesFileOrDirExist(wchar_t const *)+5o
.text$x:00001EF6
.text$x:00001EF6 arg_4           = dword ptr  8
.text$x:00001EF6
.text$x:00001EF6                 mov     edx, [esp+arg_4]
.text$x:00001EFA                 lea     eax, [edx+0Ch]
.text$x:00001EFD                 mov     ecx, [edx-4Ch]
.text$x:00001F00                 xor     ecx, eax
.text$x:00001F02                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001F07                 mov     eax, offset __ehfuncinfo$?DoesFileOrDirExist@NFind@NFile@NWindows@@YG_NPB_W@Z
.text$x:00001F0C                 jmp     ___CxxFrameHandler3
.text$x:00001F0C __ehhandler$?DoesFileOrDirExist@NFind@NFile@NWindows@@YG_NPB_W@Z endp
.text$x:00001F0C
.text$x:00001F11
.text$x:00001F11 ; =============== S U B R O U T I N E =======================================
.text$x:00001F11
.text$x:00001F11
.text$x:00001F11 __unwindfunclet$?FindFirst@CFindChangeNotification@NFind@NFile@NWindows@@QAEPAXPB_W_NK@Z$0 proc near
.text$x:00001F11                                         ; DATA XREF: .xdata$x:00002120o
.text$x:00001F11                 lea     ecx, [ebp-1Ch]  ; this
.text$x:00001F14                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00001F14 __unwindfunclet$?FindFirst@CFindChangeNotification@NFind@NFile@NWindows@@QAEPAXPB_W_NK@Z$0 endp
.text$x:00001F14
.text$x:00001F19
.text$x:00001F19 ; =============== S U B R O U T I N E =======================================
.text$x:00001F19
.text$x:00001F19
.text$x:00001F19 __ehhandler$?FindFirst@CFindChangeNotification@NFind@NFile@NWindows@@QAEPAXPB_W_NK@Z proc near
.text$x:00001F19                                         ; DATA XREF: NWindows::NFile::NFind::CFindChangeNotification::FindFirst(wchar_t const *,bool,ulong)+5o
.text$x:00001F19
.text$x:00001F19 arg_4           = dword ptr  8
.text$x:00001F19
.text$x:00001F19                 mov     edx, [esp+arg_4]
.text$x:00001F1D                 lea     eax, [edx+0Ch]
.text$x:00001F20                 mov     ecx, [edx-20h]
.text$x:00001F23                 xor     ecx, eax
.text$x:00001F25                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001F2A                 mov     eax, offset __ehfuncinfo$?FindFirst@CFindChangeNotification@NFind@NFile@NWindows@@QAEPAXPB_W_NK@Z
.text$x:00001F2F                 jmp     ___CxxFrameHandler3
.text$x:00001F2F __ehhandler$?FindFirst@CFindChangeNotification@NFind@NFile@NWindows@@QAEPAXPB_W_NK@Z endp
.text$x:00001F2F
.text$x:00001F34
.text$x:00001F34 ; =============== S U B R O U T I N E =======================================
.text$x:00001F34
.text$x:00001F34
.text$x:00001F34 __unwindfunclet$?MyGetLogicalDriveStrings@NFind@NFile@NWindows@@YG_NAAV?$CObjectVector@VUString@@@@@Z$0 proc near
.text$x:00001F34                                         ; DATA XREF: .xdata$x:00002170o
.text$x:00001F34                 lea     ecx, [ebp-18h]
.text$x:00001F37                 jmp     ??1?$CObjArray@D@@QAE@XZ ; CObjArray<char>::~CObjArray<char>(void)
.text$x:00001F37 __unwindfunclet$?MyGetLogicalDriveStrings@NFind@NFile@NWindows@@YG_NAAV?$CObjectVector@VUString@@@@@Z$0 endp
.text$x:00001F37
.text$x:00001F3C
.text$x:00001F3C ; =============== S U B R O U T I N E =======================================
.text$x:00001F3C
.text$x:00001F3C
.text$x:00001F3C __unwindfunclet$?MyGetLogicalDriveStrings@NFind@NFile@NWindows@@YG_NAAV?$CObjectVector@VUString@@@@@Z$1 proc near
.text$x:00001F3C                                         ; DATA XREF: .xdata$x:00002178o
.text$x:00001F3C                 lea     ecx, [ebp-30h]  ; this
.text$x:00001F3F                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00001F3F __unwindfunclet$?MyGetLogicalDriveStrings@NFind@NFile@NWindows@@YG_NAAV?$CObjectVector@VUString@@@@@Z$1 endp
.text$x:00001F3F
.text$x:00001F44
.text$x:00001F44 ; =============== S U B R O U T I N E =======================================
.text$x:00001F44
.text$x:00001F44
.text$x:00001F44 __unwindfunclet$?MyGetLogicalDriveStrings@NFind@NFile@NWindows@@YG_NAAV?$CObjectVector@VUString@@@@@Z$2 proc near
.text$x:00001F44                                         ; DATA XREF: .xdata$x:00002180o
.text$x:00001F44                 lea     ecx, [ebp-7Ch]  ; this
.text$x:00001F47                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00001F47 __unwindfunclet$?MyGetLogicalDriveStrings@NFind@NFile@NWindows@@YG_NAAV?$CObjectVector@VUString@@@@@Z$2 endp
.text$x:00001F47
.text$x:00001F4C
.text$x:00001F4C ; =============== S U B R O U T I N E =======================================
.text$x:00001F4C
.text$x:00001F4C
.text$x:00001F4C __unwindfunclet$?MyGetLogicalDriveStrings@NFind@NFile@NWindows@@YG_NAAV?$CObjectVector@VUString@@@@@Z$3 proc near
.text$x:00001F4C                                         ; DATA XREF: .xdata$x:00002188o
.text$x:00001F4C                 lea     ecx, [ebp-48h]
.text$x:00001F4F                 jmp     ??1?$CObjArray@_W@@QAE@XZ ; CObjArray<wchar_t>::~CObjArray<wchar_t>(void)
.text$x:00001F4F __unwindfunclet$?MyGetLogicalDriveStrings@NFind@NFile@NWindows@@YG_NAAV?$CObjectVector@VUString@@@@@Z$3 endp
.text$x:00001F4F
.text$x:00001F54
.text$x:00001F54 ; =============== S U B R O U T I N E =======================================
.text$x:00001F54
.text$x:00001F54
.text$x:00001F54 __unwindfunclet$?MyGetLogicalDriveStrings@NFind@NFile@NWindows@@YG_NAAV?$CObjectVector@VUString@@@@@Z$4 proc near
.text$x:00001F54                                         ; DATA XREF: .xdata$x:00002190o
.text$x:00001F54                 lea     ecx, [ebp-60h]  ; this
.text$x:00001F57                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00001F57 __unwindfunclet$?MyGetLogicalDriveStrings@NFind@NFile@NWindows@@YG_NAAV?$CObjectVector@VUString@@@@@Z$4 endp
.text$x:00001F57
.text$x:00001F5C
.text$x:00001F5C ; =============== S U B R O U T I N E =======================================
.text$x:00001F5C
.text$x:00001F5C
.text$x:00001F5C __ehhandler$?MyGetLogicalDriveStrings@NFind@NFile@NWindows@@YG_NAAV?$CObjectVector@VUString@@@@@Z proc near
.text$x:00001F5C                                         ; DATA XREF: NWindows::NFile::NFind::MyGetLogicalDriveStrings(CObjectVector<UString> &)+5o
.text$x:00001F5C
.text$x:00001F5C arg_4           = dword ptr  8
.text$x:00001F5C
.text$x:00001F5C                 mov     edx, [esp+arg_4]
.text$x:00001F60                 lea     eax, [edx+0Ch]
.text$x:00001F63                 mov     ecx, [edx-88h]
.text$x:00001F69                 xor     ecx, eax
.text$x:00001F6B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001F70                 mov     eax, offset __ehfuncinfo$?MyGetLogicalDriveStrings@NFind@NFile@NWindows@@YG_NAAV?$CObjectVector@VUString@@@@@Z
.text$x:00001F75                 jmp     ___CxxFrameHandler3
.text$x:00001F75 __ehhandler$?MyGetLogicalDriveStrings@NFind@NFile@NWindows@@YG_NAAV?$CObjectVector@VUString@@@@@Z endp
.text$x:00001F75
.text$x:00001F75 ; ---------------------------------------------------------------------------
.text$x:00001F7A                 align 4
.text$x:00001F7A _text$x         ends
.text$x:00001F7A
.xdata$x:00001F7C ; ===========================================================================
.xdata$x:00001F7C
.xdata$x:00001F7C ; Segment type: Pure data
.xdata$x:00001F7C ; Segment permissions: Read
.xdata$x:00001F7C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00001F7C                 assume cs:_xdata$x
.xdata$x:00001F7C                 ;org 1F7Ch
.xdata$x:00001F7C __unwindtable$?FindFirst@CFindFile@NFind@NFile@NWindows@@QAE_NPB_WAAUCFileInfo@234@@Z db 0FFh
.xdata$x:00001F7C                                         ; DATA XREF: .xdata$x:00001F8Co
.xdata$x:00001F7D                 db 0FFh
.xdata$x:00001F7E                 db 0FFh
.xdata$x:00001F7F                 db 0FFh
.xdata$x:00001F80                 dd offset __unwindfunclet$?FindFirst@CFindFile@NFind@NFile@NWindows@@QAE_NPB_WAAUCFileInfo@234@@Z$0
.xdata$x:00001F84 __ehfuncinfo$?FindFirst@CFindFile@NFind@NFile@NWindows@@QAE_NPB_WAAUCFileInfo@234@@Z db  22h ; "
.xdata$x:00001F84                                         ; DATA XREF: __ehhandler$?FindFirst@CFindFile@NFind@NFile@NWindows@@QAE_NPB_WAAUCFileInfo@234@@Z+1Eo
.xdata$x:00001F85                 db    5
.xdata$x:00001F86                 db  93h ; ô
.xdata$x:00001F87                 db  19h
.xdata$x:00001F88                 db    1
.xdata$x:00001F89                 db    0
.xdata$x:00001F8A                 db    0
.xdata$x:00001F8B                 db    0
.xdata$x:00001F8C                 dd offset __unwindtable$?FindFirst@CFindFile@NFind@NFile@NWindows@@QAE_NPB_WAAUCFileInfo@234@@Z
.xdata$x:00001F90                 db    0
.xdata$x:00001F91                 db    0
.xdata$x:00001F92                 db    0
.xdata$x:00001F93                 db    0
.xdata$x:00001F94                 db    0
.xdata$x:00001F95                 db    0
.xdata$x:00001F96                 db    0
.xdata$x:00001F97                 db    0
.xdata$x:00001F98                 db    0
.xdata$x:00001F99                 db    0
.xdata$x:00001F9A                 db    0
.xdata$x:00001F9B                 db    0
.xdata$x:00001F9C                 db    0
.xdata$x:00001F9D                 db    0
.xdata$x:00001F9E                 db    0
.xdata$x:00001F9F                 db    0
.xdata$x:00001FA0                 db    0
.xdata$x:00001FA1                 db    0
.xdata$x:00001FA2                 db    0
.xdata$x:00001FA3                 db    0
.xdata$x:00001FA4                 db    1
.xdata$x:00001FA5                 db    0
.xdata$x:00001FA6                 db    0
.xdata$x:00001FA7                 db    0
.xdata$x:00001FA8 __unwindtable$?Convert_WIN32_FIND_DATA_to_FileInfo@NFind@NFile@NWindows@@YGXABU_WIN32_FIND_DATAA@@AAUCFileInfo@123@@Z db 0FFh
.xdata$x:00001FA8                                         ; DATA XREF: .xdata$x:00001FC0o
.xdata$x:00001FA9                 db 0FFh
.xdata$x:00001FAA                 db 0FFh
.xdata$x:00001FAB                 db 0FFh
.xdata$x:00001FAC                 dd offset __unwindfunclet$?Convert_WIN32_FIND_DATA_to_FileInfo@NFind@NFile@NWindows@@YGXABU_WIN32_FIND_DATAA@@AAUCFileInfo@123@@Z$0
.xdata$x:00001FB0                 db    0
.xdata$x:00001FB1                 db    0
.xdata$x:00001FB2                 db    0
.xdata$x:00001FB3                 db    0
.xdata$x:00001FB4                 dd offset __unwindfunclet$?Convert_WIN32_FIND_DATA_to_FileInfo@NFind@NFile@NWindows@@YGXABU_WIN32_FIND_DATAA@@AAUCFileInfo@123@@Z$1
.xdata$x:00001FB8 __ehfuncinfo$?Convert_WIN32_FIND_DATA_to_FileInfo@NFind@NFile@NWindows@@YGXABU_WIN32_FIND_DATAA@@AAUCFileInfo@123@@Z db  22h ; "
.xdata$x:00001FB8                                         ; DATA XREF: __ehhandler$?Convert_WIN32_FIND_DATA_to_FileInfo@NFind@NFile@NWindows@@YGXABU_WIN32_FIND_DATAA@@AAUCFileInfo@123@@Z+11o
.xdata$x:00001FB9                 db    5
.xdata$x:00001FBA                 db  93h ; ô
.xdata$x:00001FBB                 db  19h
.xdata$x:00001FBC                 db    2
.xdata$x:00001FBD                 db    0
.xdata$x:00001FBE                 db    0
.xdata$x:00001FBF                 db    0
.xdata$x:00001FC0                 dd offset __unwindtable$?Convert_WIN32_FIND_DATA_to_FileInfo@NFind@NFile@NWindows@@YGXABU_WIN32_FIND_DATAA@@AAUCFileInfo@123@@Z
.xdata$x:00001FC4                 db    0
.xdata$x:00001FC5                 db    0
.xdata$x:00001FC6                 db    0
.xdata$x:00001FC7                 db    0
.xdata$x:00001FC8                 db    0
.xdata$x:00001FC9                 db    0
.xdata$x:00001FCA                 db    0
.xdata$x:00001FCB                 db    0
.xdata$x:00001FCC                 db    0
.xdata$x:00001FCD                 db    0
.xdata$x:00001FCE                 db    0
.xdata$x:00001FCF                 db    0
.xdata$x:00001FD0                 db    0
.xdata$x:00001FD1                 db    0
.xdata$x:00001FD2                 db    0
.xdata$x:00001FD3                 db    0
.xdata$x:00001FD4                 db    0
.xdata$x:00001FD5                 db    0
.xdata$x:00001FD6                 db    0
.xdata$x:00001FD7                 db    0
.xdata$x:00001FD8                 db    1
.xdata$x:00001FD9                 db    0
.xdata$x:00001FDA                 db    0
.xdata$x:00001FDB                 db    0
.xdata$x:00001FDC __unwindtable$?GetReducedName@CStreamInfo@NFind@NFile@NWindows@@QBE?AVUString@@XZ db 0FFh
.xdata$x:00001FDC                                         ; DATA XREF: .xdata$x:00001FF4o
.xdata$x:00001FDD                 db 0FFh
.xdata$x:00001FDE                 db 0FFh
.xdata$x:00001FDF                 db 0FFh
.xdata$x:00001FE0                 dd offset __unwindfunclet$?GetReducedName@CStreamInfo@NFind@NFile@NWindows@@QBE?AVUString@@XZ$1
.xdata$x:00001FE4                 align 8
.xdata$x:00001FE8                 dd offset __unwindfunclet$?GetReducedName@CStreamInfo@NFind@NFile@NWindows@@QBE?AVUString@@XZ$0
.xdata$x:00001FEC __ehfuncinfo$?GetReducedName@CStreamInfo@NFind@NFile@NWindows@@QBE?AVUString@@XZ db  22h ; "
.xdata$x:00001FEC                                         ; DATA XREF: __ehhandler$?GetReducedName@CStreamInfo@NFind@NFile@NWindows@@QBE?AVUString@@XZ+11o
.xdata$x:00001FED                 db    5
.xdata$x:00001FEE                 db  93h ; ô
.xdata$x:00001FEF                 db  19h
.xdata$x:00001FF0                 db    2
.xdata$x:00001FF1                 db    0
.xdata$x:00001FF2                 db    0
.xdata$x:00001FF3                 db    0
.xdata$x:00001FF4                 dd offset __unwindtable$?GetReducedName@CStreamInfo@NFind@NFile@NWindows@@QBE?AVUString@@XZ
.xdata$x:00001FF8                 db    0
.xdata$x:00001FF9                 db    0
.xdata$x:00001FFA                 db    0
.xdata$x:00001FFB                 db    0
.xdata$x:00001FFC                 db    0
.xdata$x:00001FFD                 db    0
.xdata$x:00001FFE                 db    0
.xdata$x:00001FFF                 db    0
.xdata$x:00002000                 db    0
.xdata$x:00002001                 db    0
.xdata$x:00002002                 db    0
.xdata$x:00002003                 db    0
.xdata$x:00002004                 db    0
.xdata$x:00002005                 db    0
.xdata$x:00002006                 db    0
.xdata$x:00002007                 db    0
.xdata$x:00002008                 db    0
.xdata$x:00002009                 db    0
.xdata$x:0000200A                 db    0
.xdata$x:0000200B                 db    0
.xdata$x:0000200C                 db    1
.xdata$x:0000200D                 db    0
.xdata$x:0000200E                 db    0
.xdata$x:0000200F                 db    0
.xdata$x:00002010 __unwindtable$?GetFileAttrib@NFind@NFile@NWindows@@YGKPB_W@Z db 0FFh
.xdata$x:00002010                                         ; DATA XREF: .xdata$x:00002020o
.xdata$x:00002011                 db 0FFh
.xdata$x:00002012                 db 0FFh
.xdata$x:00002013                 db 0FFh
.xdata$x:00002014                 dd offset __unwindfunclet$?GetFileAttrib@NFind@NFile@NWindows@@YGKPB_W@Z$0
.xdata$x:00002018 __ehfuncinfo$?GetFileAttrib@NFind@NFile@NWindows@@YGKPB_W@Z db  22h ; "
.xdata$x:00002018                                         ; DATA XREF: __ehhandler$?GetFileAttrib@NFind@NFile@NWindows@@YGKPB_W@Z+11o
.xdata$x:00002019                 db    5
.xdata$x:0000201A                 db  93h ; ô
.xdata$x:0000201B                 db  19h
.xdata$x:0000201C                 db    1
.xdata$x:0000201D                 db    0
.xdata$x:0000201E                 db    0
.xdata$x:0000201F                 db    0
.xdata$x:00002020                 dd offset __unwindtable$?GetFileAttrib@NFind@NFile@NWindows@@YGKPB_W@Z
.xdata$x:00002024                 db    0
.xdata$x:00002025                 db    0
.xdata$x:00002026                 db    0
.xdata$x:00002027                 db    0
.xdata$x:00002028                 db    0
.xdata$x:00002029                 db    0
.xdata$x:0000202A                 db    0
.xdata$x:0000202B                 db    0
.xdata$x:0000202C                 db    0
.xdata$x:0000202D                 db    0
.xdata$x:0000202E                 db    0
.xdata$x:0000202F                 db    0
.xdata$x:00002030                 db    0
.xdata$x:00002031                 db    0
.xdata$x:00002032                 db    0
.xdata$x:00002033                 db    0
.xdata$x:00002034                 db    0
.xdata$x:00002035                 db    0
.xdata$x:00002036                 db    0
.xdata$x:00002037                 db    0
.xdata$x:00002038                 db    1
.xdata$x:00002039                 db    0
.xdata$x:0000203A                 db    0
.xdata$x:0000203B                 db    0
.xdata$x:0000203C __ehfuncinfo$?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z db  22h ; "
.xdata$x:0000203C                                         ; DATA XREF: __ehhandler$?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z+1Eo
.xdata$x:0000203D                 db    5
.xdata$x:0000203E                 db  93h ; ô
.xdata$x:0000203F                 db  19h
.xdata$x:00002040                 db    7
.xdata$x:00002041                 db    0
.xdata$x:00002042                 db    0
.xdata$x:00002043                 db    0
.xdata$x:00002044                 dd offset __unwindtable$?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z
.xdata$x:00002048                 db    0
.xdata$x:00002049                 db    0
.xdata$x:0000204A                 db    0
.xdata$x:0000204B                 db    0
.xdata$x:0000204C                 db    0
.xdata$x:0000204D                 db    0
.xdata$x:0000204E                 db    0
.xdata$x:0000204F                 db    0
.xdata$x:00002050                 db    0
.xdata$x:00002051                 db    0
.xdata$x:00002052                 db    0
.xdata$x:00002053                 db    0
.xdata$x:00002054                 db    0
.xdata$x:00002055                 db    0
.xdata$x:00002056                 db    0
.xdata$x:00002057                 db    0
.xdata$x:00002058                 db    0
.xdata$x:00002059                 db    0
.xdata$x:0000205A                 db    0
.xdata$x:0000205B                 db    0
.xdata$x:0000205C                 db    1
.xdata$x:0000205D                 db    0
.xdata$x:0000205E                 db    0
.xdata$x:0000205F                 db    0
.xdata$x:00002060 __unwindtable$?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z db 0FFh
.xdata$x:00002060                                         ; DATA XREF: .xdata$x:00002044o
.xdata$x:00002061                 db 0FFh
.xdata$x:00002062                 db 0FFh
.xdata$x:00002063                 db 0FFh
.xdata$x:00002064                 dd offset __unwindfunclet$?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z$0
.xdata$x:00002068                 db 0FFh
.xdata$x:00002069                 db 0FFh
.xdata$x:0000206A                 db 0FFh
.xdata$x:0000206B                 db 0FFh
.xdata$x:0000206C                 dd offset __unwindfunclet$?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z$1
.xdata$x:00002070                 db    1
.xdata$x:00002071                 db    0
.xdata$x:00002072                 db    0
.xdata$x:00002073                 db    0
.xdata$x:00002074                 dd offset __unwindfunclet$?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z$2
.xdata$x:00002078                 db    2
.xdata$x:00002079                 db    0
.xdata$x:0000207A                 db    0
.xdata$x:0000207B                 db    0
.xdata$x:0000207C                 dd offset __unwindfunclet$?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z$3
.xdata$x:00002080                 db    3
.xdata$x:00002081                 db    0
.xdata$x:00002082                 db    0
.xdata$x:00002083                 db    0
.xdata$x:00002084                 dd offset __unwindfunclet$?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z$4
.xdata$x:00002088                 db 0FFh
.xdata$x:00002089                 db 0FFh
.xdata$x:0000208A                 db 0FFh
.xdata$x:0000208B                 db 0FFh
.xdata$x:0000208C                 dd offset __unwindfunclet$?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z$5
.xdata$x:00002090                 db    5
.xdata$x:00002091                 db    0
.xdata$x:00002092                 db    0
.xdata$x:00002093                 db    0
.xdata$x:00002094                 dd offset __unwindfunclet$?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z$6
.xdata$x:00002098 __unwindtable$?DoesFileExist@NFind@NFile@NWindows@@YG_NPB_W@Z db 0FFh
.xdata$x:00002098                                         ; DATA XREF: .xdata$x:000020A8o
.xdata$x:00002099                 db 0FFh
.xdata$x:0000209A                 db 0FFh
.xdata$x:0000209B                 db 0FFh
.xdata$x:0000209C                 dd offset __unwindfunclet$?DoesFileExist@NFind@NFile@NWindows@@YG_NPB_W@Z$0
.xdata$x:000020A0 __ehfuncinfo$?DoesFileExist@NFind@NFile@NWindows@@YG_NPB_W@Z db  22h ; "
.xdata$x:000020A0                                         ; DATA XREF: __ehhandler$?DoesFileExist@NFind@NFile@NWindows@@YG_NPB_W@Z+11o
.xdata$x:000020A1                 db    5
.xdata$x:000020A2                 db  93h ; ô
.xdata$x:000020A3                 db  19h
.xdata$x:000020A4                 db    1
.xdata$x:000020A5                 db    0
.xdata$x:000020A6                 db    0
.xdata$x:000020A7                 db    0
.xdata$x:000020A8                 dd offset __unwindtable$?DoesFileExist@NFind@NFile@NWindows@@YG_NPB_W@Z
.xdata$x:000020AC                 align 20h
.xdata$x:000020C0                 db    1
.xdata$x:000020C1                 db    0
.xdata$x:000020C2                 db    0
.xdata$x:000020C3                 db    0
.xdata$x:000020C4 __unwindtable$?DoesDirExist@NFind@NFile@NWindows@@YG_NPB_W@Z db 0FFh
.xdata$x:000020C4                                         ; DATA XREF: .xdata$x:000020D4o
.xdata$x:000020C5                 db 0FFh
.xdata$x:000020C6                 db 0FFh
.xdata$x:000020C7                 db 0FFh
.xdata$x:000020C8                 dd offset __unwindfunclet$?DoesDirExist@NFind@NFile@NWindows@@YG_NPB_W@Z$0
.xdata$x:000020CC __ehfuncinfo$?DoesDirExist@NFind@NFile@NWindows@@YG_NPB_W@Z db  22h ; "
.xdata$x:000020CC                                         ; DATA XREF: __ehhandler$?DoesDirExist@NFind@NFile@NWindows@@YG_NPB_W@Z+11o
.xdata$x:000020CD                 db    5
.xdata$x:000020CE                 db  93h ; ô
.xdata$x:000020CF                 db  19h
.xdata$x:000020D0                 db    1
.xdata$x:000020D1                 db    0
.xdata$x:000020D2                 db    0
.xdata$x:000020D3                 db    0
.xdata$x:000020D4                 dd offset __unwindtable$?DoesDirExist@NFind@NFile@NWindows@@YG_NPB_W@Z
.xdata$x:000020D8                 db    0
.xdata$x:000020D9                 db    0
.xdata$x:000020DA                 db    0
.xdata$x:000020DB                 db    0
.xdata$x:000020DC                 db    0
.xdata$x:000020DD                 db    0
.xdata$x:000020DE                 db    0
.xdata$x:000020DF                 db    0
.xdata$x:000020E0                 db    0
.xdata$x:000020E1                 db    0
.xdata$x:000020E2                 db    0
.xdata$x:000020E3                 db    0
.xdata$x:000020E4                 db    0
.xdata$x:000020E5                 db    0
.xdata$x:000020E6                 db    0
.xdata$x:000020E7                 db    0
.xdata$x:000020E8                 db    0
.xdata$x:000020E9                 db    0
.xdata$x:000020EA                 db    0
.xdata$x:000020EB                 db    0
.xdata$x:000020EC                 db    1
.xdata$x:000020ED                 db    0
.xdata$x:000020EE                 db    0
.xdata$x:000020EF                 db    0
.xdata$x:000020F0 __unwindtable$?DoesFileOrDirExist@NFind@NFile@NWindows@@YG_NPB_W@Z db 0FFh
.xdata$x:000020F0                                         ; DATA XREF: .xdata$x:00002100o
.xdata$x:000020F1                 db 0FFh
.xdata$x:000020F2                 db 0FFh
.xdata$x:000020F3                 db 0FFh
.xdata$x:000020F4                 dd offset __unwindfunclet$?DoesFileOrDirExist@NFind@NFile@NWindows@@YG_NPB_W@Z$0
.xdata$x:000020F8 __ehfuncinfo$?DoesFileOrDirExist@NFind@NFile@NWindows@@YG_NPB_W@Z db  22h ; "
.xdata$x:000020F8                                         ; DATA XREF: __ehhandler$?DoesFileOrDirExist@NFind@NFile@NWindows@@YG_NPB_W@Z+11o
.xdata$x:000020F9                 db    5
.xdata$x:000020FA                 db  93h ; ô
.xdata$x:000020FB                 db  19h
.xdata$x:000020FC                 db    1
.xdata$x:000020FD                 db    0
.xdata$x:000020FE                 db    0
.xdata$x:000020FF                 db    0
.xdata$x:00002100                 dd offset __unwindtable$?DoesFileOrDirExist@NFind@NFile@NWindows@@YG_NPB_W@Z
.xdata$x:00002104                 db    0
.xdata$x:00002105                 db    0
.xdata$x:00002106                 db    0
.xdata$x:00002107                 db    0
.xdata$x:00002108                 db    0
.xdata$x:00002109                 db    0
.xdata$x:0000210A                 db    0
.xdata$x:0000210B                 db    0
.xdata$x:0000210C                 db    0
.xdata$x:0000210D                 db    0
.xdata$x:0000210E                 db    0
.xdata$x:0000210F                 db    0
.xdata$x:00002110                 db    0
.xdata$x:00002111                 db    0
.xdata$x:00002112                 db    0
.xdata$x:00002113                 db    0
.xdata$x:00002114                 db    0
.xdata$x:00002115                 db    0
.xdata$x:00002116                 db    0
.xdata$x:00002117                 db    0
.xdata$x:00002118                 db    1
.xdata$x:00002119                 db    0
.xdata$x:0000211A                 db    0
.xdata$x:0000211B                 db    0
.xdata$x:0000211C __unwindtable$?FindFirst@CFindChangeNotification@NFind@NFile@NWindows@@QAEPAXPB_W_NK@Z db 0FFh
.xdata$x:0000211C                                         ; DATA XREF: .xdata$x:0000212Co
.xdata$x:0000211D                 db 0FFh
.xdata$x:0000211E                 db 0FFh
.xdata$x:0000211F                 db 0FFh
.xdata$x:00002120                 dd offset __unwindfunclet$?FindFirst@CFindChangeNotification@NFind@NFile@NWindows@@QAEPAXPB_W_NK@Z$0
.xdata$x:00002124 __ehfuncinfo$?FindFirst@CFindChangeNotification@NFind@NFile@NWindows@@QAEPAXPB_W_NK@Z db  22h ; "
.xdata$x:00002124                                         ; DATA XREF: __ehhandler$?FindFirst@CFindChangeNotification@NFind@NFile@NWindows@@QAEPAXPB_W_NK@Z+11o
.xdata$x:00002125                 db    5
.xdata$x:00002126                 db  93h ; ô
.xdata$x:00002127                 db  19h
.xdata$x:00002128                 db    1
.xdata$x:00002129                 db    0
.xdata$x:0000212A                 db    0
.xdata$x:0000212B                 db    0
.xdata$x:0000212C                 dd offset __unwindtable$?FindFirst@CFindChangeNotification@NFind@NFile@NWindows@@QAEPAXPB_W_NK@Z
.xdata$x:00002130                 db    0
.xdata$x:00002131                 db    0
.xdata$x:00002132                 db    0
.xdata$x:00002133                 db    0
.xdata$x:00002134                 db    0
.xdata$x:00002135                 db    0
.xdata$x:00002136                 db    0
.xdata$x:00002137                 db    0
.xdata$x:00002138                 db    0
.xdata$x:00002139                 db    0
.xdata$x:0000213A                 db    0
.xdata$x:0000213B                 db    0
.xdata$x:0000213C                 db    0
.xdata$x:0000213D                 db    0
.xdata$x:0000213E                 db    0
.xdata$x:0000213F                 db    0
.xdata$x:00002140                 db    0
.xdata$x:00002141                 db    0
.xdata$x:00002142                 db    0
.xdata$x:00002143                 db    0
.xdata$x:00002144                 db    1
.xdata$x:00002145                 db    0
.xdata$x:00002146                 db    0
.xdata$x:00002147                 db    0
.xdata$x:00002148 __ehfuncinfo$?MyGetLogicalDriveStrings@NFind@NFile@NWindows@@YG_NAAV?$CObjectVector@VUString@@@@@Z db  22h ; "
.xdata$x:00002148                                         ; DATA XREF: __ehhandler$?MyGetLogicalDriveStrings@NFind@NFile@NWindows@@YG_NAAV?$CObjectVector@VUString@@@@@Z+14o
.xdata$x:00002149                 db    5
.xdata$x:0000214A                 db  93h ; ô
.xdata$x:0000214B                 db  19h
.xdata$x:0000214C                 db    5
.xdata$x:0000214D                 db    0
.xdata$x:0000214E                 db    0
.xdata$x:0000214F                 db    0
.xdata$x:00002150                 dd offset __unwindtable$?MyGetLogicalDriveStrings@NFind@NFile@NWindows@@YG_NAAV?$CObjectVector@VUString@@@@@Z
.xdata$x:00002154                 db    0
.xdata$x:00002155                 db    0
.xdata$x:00002156                 db    0
.xdata$x:00002157                 db    0
.xdata$x:00002158                 db    0
.xdata$x:00002159                 db    0
.xdata$x:0000215A                 db    0
.xdata$x:0000215B                 db    0
.xdata$x:0000215C                 db    0
.xdata$x:0000215D                 db    0
.xdata$x:0000215E                 db    0
.xdata$x:0000215F                 db    0
.xdata$x:00002160                 db    0
.xdata$x:00002161                 db    0
.xdata$x:00002162                 db    0
.xdata$x:00002163                 db    0
.xdata$x:00002164                 db    0
.xdata$x:00002165                 db    0
.xdata$x:00002166                 db    0
.xdata$x:00002167                 db    0
.xdata$x:00002168                 db    1
.xdata$x:00002169                 db    0
.xdata$x:0000216A                 db    0
.xdata$x:0000216B                 db    0
.xdata$x:0000216C __unwindtable$?MyGetLogicalDriveStrings@NFind@NFile@NWindows@@YG_NAAV?$CObjectVector@VUString@@@@@Z db 0FFh
.xdata$x:0000216C                                         ; DATA XREF: .xdata$x:00002150o
.xdata$x:0000216D                 db 0FFh
.xdata$x:0000216E                 db 0FFh
.xdata$x:0000216F                 db 0FFh
.xdata$x:00002170                 dd offset __unwindfunclet$?MyGetLogicalDriveStrings@NFind@NFile@NWindows@@YG_NAAV?$CObjectVector@VUString@@@@@Z$0
.xdata$x:00002174                 align 8
.xdata$x:00002178                 dd offset __unwindfunclet$?MyGetLogicalDriveStrings@NFind@NFile@NWindows@@YG_NAAV?$CObjectVector@VUString@@@@@Z$1
.xdata$x:0000217C                 db    1
.xdata$x:0000217D                 db    0
.xdata$x:0000217E                 db    0
.xdata$x:0000217F                 db    0
.xdata$x:00002180                 dd offset __unwindfunclet$?MyGetLogicalDriveStrings@NFind@NFile@NWindows@@YG_NAAV?$CObjectVector@VUString@@@@@Z$2
.xdata$x:00002184                 db 0FFh
.xdata$x:00002185                 db 0FFh
.xdata$x:00002186                 db 0FFh
.xdata$x:00002187                 db 0FFh
.xdata$x:00002188                 dd offset __unwindfunclet$?MyGetLogicalDriveStrings@NFind@NFile@NWindows@@YG_NAAV?$CObjectVector@VUString@@@@@Z$3
.xdata$x:0000218C                 db    3
.xdata$x:0000218D                 db    0
.xdata$x:0000218E                 db    0
.xdata$x:0000218F                 db    0
.xdata$x:00002190                 dd offset __unwindfunclet$?MyGetLogicalDriveStrings@NFind@NFile@NWindows@@YG_NAAV?$CObjectVector@VUString@@@@@Z$4
.xdata$x:00002190 _xdata$x        ends
.xdata$x:00002190
.text:00002194 ; ===========================================================================
.text:00002194
.text:00002194 ; Segment type: Pure code
.text:00002194 ; Segment permissions: Read/Execute
.text:00002194 _text           segment para public 'CODE' use32
.text:00002194                 assume cs:_text
.text:00002194                 ;org 2194h
.text:00002194 ; COMDAT (pick any)
.text:00002194                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002194
.text:00002194 ; =============== S U B R O U T I N E =======================================
.text:00002194
.text:00002194 ; Attributes: bp-based frame
.text:00002194
.text:00002194 ; _DWORD __thiscall AString::~AString(AString *__hidden this)
.text:00002194                 public ??1AString@@QAE@XZ
.text:00002194 ??1AString@@QAE@XZ proc near            ; CODE XREF: NWindows::NFile::NFind::CFindFile::FindFirst(wchar_t const *,NWindows::NFile::NFind::CFileInfo &)+C6p
.text:00002194                                         ; NWindows::NFile::NFind::Convert_WIN32_FIND_DATA_to_FileInfo(_WIN32_FIND_DATAA const &,NWindows::NFile::NFind::CFileInfo &)+10Ap ...
.text:00002194
.text:00002194 var_8           = dword ptr -8
.text:00002194 var_4           = dword ptr -4
.text:00002194
.text:00002194                 push    ebp
.text:00002195                 mov     ebp, esp
.text:00002197                 sub     esp, 8
.text:0000219A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000021A1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000021A8                 mov     [ebp+var_4], ecx
.text:000021AB                 mov     eax, [ebp+var_4]
.text:000021AE                 mov     ecx, [eax]
.text:000021B0                 mov     [ebp+var_8], ecx
.text:000021B3                 mov     edx, [ebp+var_8]
.text:000021B6                 push    edx             ; void *
.text:000021B7                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000021BC                 add     esp, 4
.text:000021BF                 add     esp, 8
.text:000021C2                 cmp     ebp, esp
.text:000021C4                 call    __RTC_CheckEsp
.text:000021C9                 mov     esp, ebp
.text:000021CB                 pop     ebp
.text:000021CC                 retn
.text:000021CC ??1AString@@QAE@XZ endp
.text:000021CC
.text:000021CC ; ---------------------------------------------------------------------------
.text:000021CD                 align 10h
.text:000021CD _text           ends
.text:000021CD
.text:000021D0 ; ===========================================================================
.text:000021D0
.text:000021D0 ; Segment type: Pure code
.text:000021D0 ; Segment permissions: Read/Execute
.text:000021D0 _text           segment para public 'CODE' use32
.text:000021D0                 assume cs:_text
.text:000021D0                 ;org 21D0h
.text:000021D0 ; COMDAT (pick any)
.text:000021D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000021D0
.text:000021D0 ; =============== S U B R O U T I N E =======================================
.text:000021D0
.text:000021D0 ; Attributes: bp-based frame
.text:000021D0
.text:000021D0 ; public: __thiscall AString::operator char const *(void)const
.text:000021D0                 public ??BAString@@QBEPBDXZ
.text:000021D0 ??BAString@@QBEPBDXZ proc near          ; CODE XREF: NWindows::NFile::NFind::CFindFile::FindFirst(wchar_t const *,NWindows::NFile::NFind::CFileInfo &)+A1p
.text:000021D0                                         ; NWindows::NFile::NFind::GetFileAttrib(wchar_t const *)+6Bp ...
.text:000021D0
.text:000021D0 var_4           = dword ptr -4
.text:000021D0
.text:000021D0                 push    ebp
.text:000021D1                 mov     ebp, esp
.text:000021D3                 push    ecx
.text:000021D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000021DB                 mov     [ebp+var_4], ecx
.text:000021DE                 mov     eax, [ebp+var_4]
.text:000021E1                 mov     eax, [eax]
.text:000021E3                 mov     esp, ebp
.text:000021E5                 pop     ebp
.text:000021E6                 retn
.text:000021E6 ??BAString@@QBEPBDXZ endp
.text:000021E6
.text:000021E6 ; ---------------------------------------------------------------------------
.text:000021E7                 align 4
.text:000021E7 _text           ends
.text:000021E7
.text:000021E8 ; ===========================================================================
.text:000021E8
.text:000021E8 ; Segment type: Pure code
.text:000021E8 ; Segment permissions: Read/Execute
.text:000021E8 _text           segment para public 'CODE' use32
.text:000021E8                 assume cs:_text
.text:000021E8                 ;org 21E8h
.text:000021E8 ; COMDAT (pick any)
.text:000021E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000021E8
.text:000021E8 ; =============== S U B R O U T I N E =======================================
.text:000021E8
.text:000021E8 ; Attributes: bp-based frame
.text:000021E8
.text:000021E8 ; _DWORD __thiscall UString::~UString(UString *__hidden this)
.text:000021E8                 public ??1UString@@QAE@XZ
.text:000021E8 ??1UString@@QAE@XZ proc near            ; CODE XREF: NWindows::NFile::NFind::Convert_WIN32_FIND_DATA_to_FileInfo(_WIN32_FIND_DATAA const &,NWindows::NFile::NFind::CFileInfo &)+FBp
.text:000021E8                                         ; NWindows::NFile::NFind::CStreamInfo::GetReducedName(void)+B5p ...
.text:000021E8
.text:000021E8 var_8           = dword ptr -8
.text:000021E8 var_4           = dword ptr -4
.text:000021E8
.text:000021E8                 push    ebp
.text:000021E9                 mov     ebp, esp
.text:000021EB                 sub     esp, 8
.text:000021EE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000021F5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000021FC                 mov     [ebp+var_4], ecx
.text:000021FF                 mov     eax, [ebp+var_4]
.text:00002202                 mov     ecx, [eax]
.text:00002204                 mov     [ebp+var_8], ecx
.text:00002207                 mov     edx, [ebp+var_8]
.text:0000220A                 push    edx             ; void *
.text:0000220B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00002210                 add     esp, 4
.text:00002213                 add     esp, 8
.text:00002216                 cmp     ebp, esp
.text:00002218                 call    __RTC_CheckEsp
.text:0000221D                 mov     esp, ebp
.text:0000221F                 pop     ebp
.text:00002220                 retn
.text:00002220 ??1UString@@QAE@XZ endp
.text:00002220
.text:00002220 ; ---------------------------------------------------------------------------
.text:00002221                 align 4
.text:00002221 _text           ends
.text:00002221
.text:00002224 ; ===========================================================================
.text:00002224
.text:00002224 ; Segment type: Pure code
.text:00002224 ; Segment permissions: Read/Execute
.text:00002224 _text           segment para public 'CODE' use32
.text:00002224                 assume cs:_text
.text:00002224                 ;org 2224h
.text:00002224 ; COMDAT (pick any)
.text:00002224                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002224
.text:00002224 ; =============== S U B R O U T I N E =======================================
.text:00002224
.text:00002224 ; Attributes: bp-based frame
.text:00002224
.text:00002224 ; const wchar_t *__thiscall UString::RightPtr(UString *this, unsigned int)
.text:00002224                 public ?RightPtr@UString@@QBEPB_WI@Z
.text:00002224 ?RightPtr@UString@@QBEPB_WI@Z proc near ; CODE XREF: NWindows::NFile::NFind::CStreamInfo::GetReducedName(void)+73p
.text:00002224                                         ; NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+1EAp
.text:00002224
.text:00002224 var_4           = dword ptr -4
.text:00002224 arg_0           = dword ptr  8
.text:00002224
.text:00002224                 push    ebp
.text:00002225                 mov     ebp, esp
.text:00002227                 push    ecx
.text:00002228                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000222F                 mov     [ebp+var_4], ecx
.text:00002232                 mov     eax, [ebp+var_4]
.text:00002235                 mov     ecx, [eax+4]
.text:00002238                 mov     edx, [ebp+var_4]
.text:0000223B                 mov     eax, [edx]
.text:0000223D                 lea     eax, [eax+ecx*2]
.text:00002240                 mov     ecx, [ebp+arg_0]
.text:00002243                 shl     ecx, 1
.text:00002245                 sub     eax, ecx
.text:00002247                 mov     esp, ebp
.text:00002249                 pop     ebp
.text:0000224A                 retn    4
.text:0000224A ?RightPtr@UString@@QBEPB_WI@Z endp
.text:0000224A
.text:0000224A ; ---------------------------------------------------------------------------
.text:0000224D                 align 10h
.text:0000224D _text           ends
.text:0000224D
.text:00002250 ; ===========================================================================
.text:00002250
.text:00002250 ; Segment type: Pure code
.text:00002250 ; Segment permissions: Read/Execute
.text:00002250 _text           segment para public 'CODE' use32
.text:00002250                 assume cs:_text
.text:00002250                 ;org 2250h
.text:00002250 ; COMDAT (pick any)
.text:00002250                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002250
.text:00002250 ; =============== S U B R O U T I N E =======================================
.text:00002250
.text:00002250 ; Attributes: bp-based frame
.text:00002250
.text:00002250 ; void __thiscall UString::DeleteFrom(UString *this, unsigned int)
.text:00002250                 public ?DeleteFrom@UString@@QAEXI@Z
.text:00002250 ?DeleteFrom@UString@@QAEXI@Z proc near  ; CODE XREF: NWindows::NFile::NFind::CStreamInfo::GetReducedName(void)+94p
.text:00002250                                         ; NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+1C4p ...
.text:00002250
.text:00002250 var_4           = dword ptr -4
.text:00002250 arg_0           = dword ptr  8
.text:00002250
.text:00002250                 push    ebp
.text:00002251                 mov     ebp, esp
.text:00002253                 push    ecx
.text:00002254                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000225B                 mov     [ebp+var_4], ecx
.text:0000225E                 mov     eax, [ebp+var_4]
.text:00002261                 mov     ecx, [ebp+arg_0]
.text:00002264                 cmp     ecx, [eax+4]
.text:00002267                 jnb     short loc_2280
.text:00002269                 mov     edx, [ebp+var_4]
.text:0000226C                 mov     eax, [ebp+arg_0]
.text:0000226F                 mov     [edx+4], eax
.text:00002272                 mov     ecx, [ebp+var_4]
.text:00002275                 mov     edx, [ecx]
.text:00002277                 xor     eax, eax
.text:00002279                 mov     ecx, [ebp+arg_0]
.text:0000227C                 mov     [edx+ecx*2], ax
.text:00002280
.text:00002280 loc_2280:                               ; CODE XREF: UString::DeleteFrom(uint)+17j
.text:00002280                 mov     esp, ebp
.text:00002282                 pop     ebp
.text:00002283                 retn    4
.text:00002283 ?DeleteFrom@UString@@QAEXI@Z endp
.text:00002283
.text:00002283 ; ---------------------------------------------------------------------------
.text:00002286                 align 4
.text:00002286 _text           ends
.text:00002286
.bss:00002288 ; ===========================================================================
.bss:00002288
.bss:00002288 ; Segment type: Uninitialized
.bss:00002288 ; Segment permissions: Read/Write
.bss:00002288 _bss            segment dword public 'BSS' use32
.bss:00002288                 assume cs:_bss
.bss:00002288                 ;org 2288h
.bss:00002288                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:00002288 _g_FindNextStreamW dd ?                 ; DATA XREF: NWindows::NFile::NFind::CFindStream::FindNext(NWindows::NFile::NFind::CStreamInfo &)+2Cr
.bss:00002288                                         ; NWindows::NFile::NFind::CFindStream::FindNext(NWindows::NFile::NFind::CStreamInfo &)+59r ...
.bss:0000228C _g_FindFirstStreamW dd ?                ; DATA XREF: NWindows::NFile::NFind::CFindStream::FindFirst(wchar_t const *,NWindows::NFile::NFind::CStreamInfo &):loc_71Er
.bss:0000228C                                         ; NWindows::NFile::NFind::CFindStream::FindFirst(wchar_t const *,NWindows::NFile::NFind::CStreamInfo &)+82r ...
.bss:00002290                 public ?g_FindStreamLoader@NFind@NFile@NWindows@@3UCFindStreamLoader@123@A
.bss:00002290 ; NWindows::NFile::NFind::CFindStreamLoader NWindows::NFile::NFind::g_FindStreamLoader
.bss:00002290 ?g_FindStreamLoader@NFind@NFile@NWindows@@3UCFindStreamLoader@123@A db    ? ;
.bss:00002290                                         ; DATA XREF: NWindows::NFile::NFind::`dynamic initializer for 'g_FindStreamLoader''(void)+3o
.bss:00002291                 align 4
.bss:00002291 _bss            ends
.bss:00002291
.text:00002294 ; ===========================================================================
.text:00002294
.text:00002294 ; Segment type: Pure code
.text:00002294 ; Segment permissions: Read/Execute
.text:00002294 _text           segment para public 'CODE' use32
.text:00002294                 assume cs:_text
.text:00002294                 ;org 2294h
.text:00002294 ; COMDAT (pick any)
.text:00002294                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002294
.text:00002294 ; =============== S U B R O U T I N E =======================================
.text:00002294
.text:00002294 ; Attributes: bp-based frame
.text:00002294
.text:00002294 ; bool __thiscall NWindows::NFile::NFind::CFindFileBase::IsHandleAllocated(NWindows::NFile::NFind::CFindFileBase *__hidden this)
.text:00002294                 public ?IsHandleAllocated@CFindFileBase@NFind@NFile@NWindows@@QBE_NXZ
.text:00002294 ?IsHandleAllocated@CFindFileBase@NFind@NFile@NWindows@@QBE_NXZ proc near
.text:00002294                                         ; CODE XREF: NWindows::NFile::NFind::CStreamEnumerator::Next(NWindows::NFile::NFind::CStreamInfo &,bool &)+1Bp
.text:00002294                                         ; NWindows::NFile::NFind::CEnumerator::NextAny(NWindows::NFile::NFind::CFileInfo &)+11p
.text:00002294
.text:00002294 var_4           = dword ptr -4
.text:00002294
.text:00002294                 push    ebp
.text:00002295                 mov     ebp, esp
.text:00002297                 push    ecx
.text:00002298                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000229F                 mov     [ebp+var_4], ecx
.text:000022A2                 mov     eax, [ebp+var_4]
.text:000022A5                 xor     ecx, ecx
.text:000022A7                 cmp     dword ptr [eax], 0FFFFFFFFh
.text:000022AA                 setnz   cl
.text:000022AD                 mov     al, cl
.text:000022AF                 mov     esp, ebp
.text:000022B1                 pop     ebp
.text:000022B2                 retn
.text:000022B2 ?IsHandleAllocated@CFindFileBase@NFind@NFile@NWindows@@QBE_NXZ endp
.text:000022B2
.text:000022B2 ; ---------------------------------------------------------------------------
.text:000022B3                 align 4
.text:000022B3 _text           ends
.text:000022B3
.text:000022B4 ; ===========================================================================
.text:000022B4
.text:000022B4 ; Segment type: Pure code
.text:000022B4 ; Segment permissions: Read/Execute
.text:000022B4 _text           segment para public 'CODE' use32
.text:000022B4                 assume cs:_text
.text:000022B4                 ;org 22B4h
.text:000022B4 ; COMDAT (pick any)
.text:000022B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000022B4
.text:000022B4 ; =============== S U B R O U T I N E =======================================
.text:000022B4
.text:000022B4 ; Attributes: bp-based frame
.text:000022B4
.text:000022B4 ; void __thiscall UString::Empty(UString *__hidden this)
.text:000022B4                 public ?Empty@UString@@QAEXXZ
.text:000022B4 ?Empty@UString@@QAEXXZ proc near        ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+256p
.text:000022B4                                         ; NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+5BBp
.text:000022B4
.text:000022B4 var_4           = dword ptr -4
.text:000022B4
.text:000022B4                 push    ebp
.text:000022B5                 mov     ebp, esp
.text:000022B7                 push    ecx
.text:000022B8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000022BF                 mov     [ebp+var_4], ecx
.text:000022C2                 mov     eax, [ebp+var_4]
.text:000022C5                 mov     dword ptr [eax+4], 0
.text:000022CC                 mov     ecx, [ebp+var_4]
.text:000022CF                 mov     edx, [ecx]
.text:000022D1                 xor     eax, eax
.text:000022D3                 mov     [edx], ax
.text:000022D6                 mov     esp, ebp
.text:000022D8                 pop     ebp
.text:000022D9                 retn
.text:000022D9 ?Empty@UString@@QAEXXZ endp
.text:000022D9
.text:000022D9 ; ---------------------------------------------------------------------------
.text:000022DA                 align 4
.text:000022DA _text           ends
.text:000022DA
.text:000022DC ; ===========================================================================
.text:000022DC
.text:000022DC ; Segment type: Pure code
.text:000022DC ; Segment permissions: Read/Execute
.text:000022DC _text           segment para public 'CODE' use32
.text:000022DC                 assume cs:_text
.text:000022DC                 ;org 22DCh
.text:000022DC ; COMDAT (pick any)
.text:000022DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000022DC
.text:000022DC ; =============== S U B R O U T I N E =======================================
.text:000022DC
.text:000022DC ; Attributes: bp-based frame
.text:000022DC
.text:000022DC ; public: class UString & __thiscall UString::operator+=(wchar_t)
.text:000022DC                 public ??YUString@@QAEAAV0@_W@Z
.text:000022DC ??YUString@@QAEAAV0@_W@Z proc near      ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+71Ep
.text:000022DC                                         ; UString::Add_PathSepar(void)+13p
.text:000022DC
.text:000022DC var_C           = dword ptr -0Ch
.text:000022DC var_8           = dword ptr -8
.text:000022DC var_4           = dword ptr -4
.text:000022DC arg_0           = word ptr  8
.text:000022DC
.text:000022DC                 push    ebp
.text:000022DD                 mov     ebp, esp
.text:000022DF                 sub     esp, 0Ch
.text:000022E2                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000022E9                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000022F0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000022F7                 mov     [ebp+var_4], ecx
.text:000022FA                 mov     eax, [ebp+var_4]
.text:000022FD                 mov     ecx, [ebp+var_4]
.text:00002300                 mov     edx, [eax+8]
.text:00002303                 cmp     edx, [ecx+4]
.text:00002306                 jnz     short loc_2310
.text:00002308                 mov     ecx, [ebp+var_4] ; this
.text:0000230B                 call    ?Grow_1@UString@@AAEXXZ ; UString::Grow_1(void)
.text:00002310
.text:00002310 loc_2310:                               ; CODE XREF: UString::operator+=(wchar_t)+2Aj
.text:00002310                 mov     eax, [ebp+var_4]
.text:00002313                 mov     ecx, [eax+4]
.text:00002316                 mov     [ebp+var_8], ecx
.text:00002319                 mov     edx, [ebp+var_4]
.text:0000231C                 mov     eax, [edx]
.text:0000231E                 mov     [ebp+var_C], eax
.text:00002321                 mov     ecx, [ebp+var_8]
.text:00002324                 mov     edx, [ebp+var_C]
.text:00002327                 mov     ax, [ebp+arg_0]
.text:0000232B                 mov     [edx+ecx*2], ax
.text:0000232F                 mov     ecx, [ebp+var_8]
.text:00002332                 add     ecx, 1
.text:00002335                 mov     [ebp+var_8], ecx
.text:00002338                 xor     edx, edx
.text:0000233A                 mov     eax, [ebp+var_8]
.text:0000233D                 mov     ecx, [ebp+var_C]
.text:00002340                 mov     [ecx+eax*2], dx
.text:00002344                 mov     edx, [ebp+var_4]
.text:00002347                 mov     eax, [ebp+var_8]
.text:0000234A                 mov     [edx+4], eax
.text:0000234D                 mov     eax, [ebp+var_4]
.text:00002350                 add     esp, 0Ch
.text:00002353                 cmp     ebp, esp
.text:00002355                 call    __RTC_CheckEsp
.text:0000235A                 mov     esp, ebp
.text:0000235C                 pop     ebp
.text:0000235D                 retn    4
.text:0000235D ??YUString@@QAEAAV0@_W@Z endp
.text:0000235D
.text:0000235D _text           ends
.text:0000235D
.text:00002360 ; ===========================================================================
.text:00002360
.text:00002360 ; Segment type: Pure code
.text:00002360 ; Segment permissions: Read/Execute
.text:00002360 _text           segment para public 'CODE' use32
.text:00002360                 assume cs:_text
.text:00002360                 ;org 2360h
.text:00002360 ; COMDAT (pick any)
.text:00002360                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002360
.text:00002360 ; =============== S U B R O U T I N E =======================================
.text:00002360
.text:00002360 ; Attributes: bp-based frame
.text:00002360
.text:00002360 ; void __thiscall UString::Add_PathSepar(UString *__hidden this)
.text:00002360                 public ?Add_PathSepar@UString@@QAEXXZ
.text:00002360 ?Add_PathSepar@UString@@QAEXXZ proc near
.text:00002360                                         ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+711p
.text:00002360
.text:00002360 var_4           = dword ptr -4
.text:00002360
.text:00002360                 push    ebp
.text:00002361                 mov     ebp, esp
.text:00002363                 push    ecx
.text:00002364                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000236B                 mov     [ebp+var_4], ecx
.text:0000236E                 push    5Ch ; '\'
.text:00002370                 mov     ecx, [ebp+var_4]
.text:00002373                 call    ??YUString@@QAEAAV0@_W@Z ; UString::operator+=(wchar_t)
.text:00002378                 add     esp, 4
.text:0000237B                 cmp     ebp, esp
.text:0000237D                 call    __RTC_CheckEsp
.text:00002382                 mov     esp, ebp
.text:00002384                 pop     ebp
.text:00002385                 retn
.text:00002385 ?Add_PathSepar@UString@@QAEXXZ endp
.text:00002385
.text:00002385 ; ---------------------------------------------------------------------------
.text:00002386                 align 4
.text:00002386 _text           ends
.text:00002386
.text:00002388 ; ===========================================================================
.text:00002388
.text:00002388 ; Segment type: Pure code
.text:00002388 ; Segment permissions: Read/Execute
.text:00002388 _text           segment para public 'CODE' use32
.text:00002388                 assume cs:_text
.text:00002388                 ;org 2388h
.text:00002388 ; COMDAT (pick any)
.text:00002388                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002388
.text:00002388 ; =============== S U B R O U T I N E =======================================
.text:00002388
.text:00002388 ; Attributes: bp-based frame
.text:00002388
.text:00002388 ; bool __thiscall UString::IsEqualTo_NoCase(UString *this, const wchar_t *)
.text:00002388                 public ?IsEqualTo_NoCase@UString@@QBE_NPB_W@Z
.text:00002388 ?IsEqualTo_NoCase@UString@@QBE_NPB_W@Z proc near
.text:00002388                                         ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+3CBp
.text:00002388
.text:00002388 var_4           = dword ptr -4
.text:00002388 arg_0           = dword ptr  8
.text:00002388
.text:00002388                 push    ebp
.text:00002389                 mov     ebp, esp
.text:0000238B                 push    ecx
.text:0000238C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002393                 mov     [ebp+var_4], ecx
.text:00002396                 mov     eax, [ebp+arg_0]
.text:00002399                 push    eax             ; wchar_t *
.text:0000239A                 mov     ecx, [ebp+var_4]
.text:0000239D                 mov     edx, [ecx]
.text:0000239F                 push    edx             ; wchar_t *
.text:000023A0                 call    ?StringsAreEqualNoCase@@YG_NPB_W0@Z ; StringsAreEqualNoCase(wchar_t const *,wchar_t const *)
.text:000023A5                 add     esp, 4
.text:000023A8                 cmp     ebp, esp
.text:000023AA                 call    __RTC_CheckEsp
.text:000023AF                 mov     esp, ebp
.text:000023B1                 pop     ebp
.text:000023B2                 retn    4
.text:000023B2 ?IsEqualTo_NoCase@UString@@QBE_NPB_W@Z endp
.text:000023B2
.text:000023B2 ; ---------------------------------------------------------------------------
.text:000023B5                 align 4
.text:000023B5 _text           ends
.text:000023B5
.text:000023B8 ; ===========================================================================
.text:000023B8
.text:000023B8 ; Segment type: Pure code
.text:000023B8 ; Segment permissions: Read/Execute
.text:000023B8 _text           segment para public 'CODE' use32
.text:000023B8                 assume cs:_text
.text:000023B8                 ;org 23B8h
.text:000023B8 ; COMDAT (pick any)
.text:000023B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000023B8
.text:000023B8 ; =============== S U B R O U T I N E =======================================
.text:000023B8
.text:000023B8 ; Attributes: bp-based frame
.text:000023B8
.text:000023B8 ; int __stdcall operator==(int, wchar_t *Str2)
.text:000023B8                 public ??8@YG_NABVUString@@PB_W@Z
.text:000023B8 ??8@YG_NABVUString@@PB_W@Z proc near    ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+758p
.text:000023B8
.text:000023B8 arg_0           = dword ptr  8
.text:000023B8 Str2            = dword ptr  0Ch
.text:000023B8
.text:000023B8                 push    ebp
.text:000023B9                 mov     ebp, esp
.text:000023BB                 push    esi
.text:000023BC                 mov     esi, esp
.text:000023BE                 mov     eax, [ebp+Str2]
.text:000023C1                 push    eax             ; Str2
.text:000023C2                 mov     ecx, [ebp+arg_0]
.text:000023C5                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:000023CA                 push    eax             ; Str1
.text:000023CB                 call    dword ptr ds:__imp__wcscmp
.text:000023D1                 add     esp, 8
.text:000023D4                 cmp     esi, esp
.text:000023D6                 call    __RTC_CheckEsp
.text:000023DB                 neg     eax
.text:000023DD                 sbb     eax, eax
.text:000023DF                 add     eax, 1
.text:000023E2                 pop     esi
.text:000023E3                 cmp     ebp, esp
.text:000023E5                 call    __RTC_CheckEsp
.text:000023EA                 pop     ebp
.text:000023EB                 retn    8
.text:000023EB ??8@YG_NABVUString@@PB_W@Z endp
.text:000023EB
.text:000023EB ; ---------------------------------------------------------------------------
.text:000023EE                 align 10h
.text:000023EE _text           ends
.text:000023EE
.text:000023F0 ; ===========================================================================
.text:000023F0
.text:000023F0 ; Segment type: Pure code
.text:000023F0 ; Segment permissions: Read/Execute
.text:000023F0 _text           segment para public 'CODE' use32
.text:000023F0                 assume cs:_text
.text:000023F0                 ;org 23F0h
.text:000023F0 ; COMDAT (pick any)
.text:000023F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000023F0
.text:000023F0 ; =============== S U B R O U T I N E =======================================
.text:000023F0
.text:000023F0 ; Attributes: bp-based frame
.text:000023F0
.text:000023F0 ; void __thiscall NWindows::NFile::NFind::CFileInfoBase::SetAsDir(NWindows::NFile::NFind::CFileInfoBase *__hidden this)
.text:000023F0                 public ?SetAsDir@CFileInfoBase@NFind@NFile@NWindows@@QAEXXZ
.text:000023F0 ?SetAsDir@CFileInfoBase@NFind@NFile@NWindows@@QAEXXZ proc near
.text:000023F0                                         ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+806p
.text:000023F0
.text:000023F0 var_4           = dword ptr -4
.text:000023F0
.text:000023F0                 push    ebp
.text:000023F1                 mov     ebp, esp
.text:000023F3                 push    ecx
.text:000023F4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000023FB                 mov     [ebp+var_4], ecx
.text:000023FE                 mov     eax, [ebp+var_4]
.text:00002401                 mov     dword ptr [eax+20h], 10h
.text:00002408                 mov     esp, ebp
.text:0000240A                 pop     ebp
.text:0000240B                 retn
.text:0000240B ?SetAsDir@CFileInfoBase@NFind@NFile@NWindows@@QAEXXZ endp
.text:0000240B
.text:0000240B _text           ends
.text:0000240B
.text:0000240C ; ===========================================================================
.text:0000240C
.text:0000240C ; Segment type: Pure code
.text:0000240C ; Segment permissions: Read/Execute
.text:0000240C _text           segment para public 'CODE' use32
.text:0000240C                 assume cs:_text
.text:0000240C                 ;org 240Ch
.text:0000240C ; COMDAT (pick any)
.text:0000240C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000240C
.text:0000240C ; =============== S U B R O U T I N E =======================================
.text:0000240C
.text:0000240C ; Attributes: bp-based frame
.text:0000240C
.text:0000240C ; _DWORD __thiscall NWindows::NFile::NFind::CStreamEnumerator::CStreamEnumerator(NWindows::NFile::NFind::CStreamEnumerator *this, const struct UString *)
.text:0000240C                 public ??0CStreamEnumerator@NFind@NFile@NWindows@@QAE@ABVUString@@@Z
.text:0000240C ??0CStreamEnumerator@NFind@NFile@NWindows@@QAE@ABVUString@@@Z proc near
.text:0000240C                                         ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+2CCp
.text:0000240C
.text:0000240C var_10          = dword ptr -10h
.text:0000240C var_C           = dword ptr -0Ch
.text:0000240C var_4           = dword ptr -4
.text:0000240C arg_0           = dword ptr  8
.text:0000240C
.text:0000240C                 push    ebp
.text:0000240D                 mov     ebp, esp
.text:0000240F                 push    0FFFFFFFFh
.text:00002411                 push    offset __ehhandler$??0CStreamEnumerator@NFind@NFile@NWindows@@QAE@ABVUString@@@Z
.text:00002416                 mov     eax, large fs:0
.text:0000241C                 push    eax
.text:0000241D                 push    ecx
.text:0000241E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00002425                 mov     eax, dword ptr ds:___security_cookie
.text:0000242A                 xor     eax, ebp
.text:0000242C                 push    eax
.text:0000242D                 lea     eax, [ebp+var_C]
.text:00002430                 mov     large fs:0, eax
.text:00002436                 mov     [ebp+var_10], ecx
.text:00002439                 mov     ecx, [ebp+var_10] ; this
.text:0000243C                 call    ??0CFindStream@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFindStream::CFindStream(void)
.text:00002441                 mov     [ebp+var_4], 0
.text:00002448                 mov     eax, [ebp+arg_0]
.text:0000244B                 push    eax
.text:0000244C                 mov     ecx, [ebp+var_10]
.text:0000244F                 add     ecx, 4
.text:00002452                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:00002457                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000245E                 mov     eax, [ebp+var_10]
.text:00002461                 mov     ecx, [ebp+var_C]
.text:00002464                 mov     large fs:0, ecx
.text:0000246B                 pop     ecx
.text:0000246C                 add     esp, 10h
.text:0000246F                 cmp     ebp, esp
.text:00002471                 call    __RTC_CheckEsp
.text:00002476                 mov     esp, ebp
.text:00002478                 pop     ebp
.text:00002479                 retn    4
.text:00002479 ??0CStreamEnumerator@NFind@NFile@NWindows@@QAE@ABVUString@@@Z endp
.text:00002479
.text:00002479 _text           ends
.text:00002479
.text$x:0000247C ; ===========================================================================
.text$x:0000247C
.text$x:0000247C ; Segment type: Pure code
.text$x:0000247C ; Segment permissions: Read/Execute
.text$x:0000247C _text$x         segment para public 'CODE' use32
.text$x:0000247C                 assume cs:_text$x
.text$x:0000247C                 ;org 247Ch
.text$x:0000247C ; COMDAT (pick associative to section at 240C)
.text$x:0000247C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000247C
.text$x:0000247C ; =============== S U B R O U T I N E =======================================
.text$x:0000247C
.text$x:0000247C
.text$x:0000247C __unwindfunclet$??0CStreamEnumerator@NFind@NFile@NWindows@@QAE@ABVUString@@@Z$0 proc near
.text$x:0000247C                                         ; DATA XREF: .xdata$x:000024A4o
.text$x:0000247C                 mov     ecx, [ebp-10h]  ; this
.text$x:0000247F                 jmp     ??1CFindStream@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFindStream::~CFindStream(void)
.text$x:0000247F __unwindfunclet$??0CStreamEnumerator@NFind@NFile@NWindows@@QAE@ABVUString@@@Z$0 endp
.text$x:0000247F
.text$x:00002484
.text$x:00002484 ; =============== S U B R O U T I N E =======================================
.text$x:00002484
.text$x:00002484
.text$x:00002484 __ehhandler$??0CStreamEnumerator@NFind@NFile@NWindows@@QAE@ABVUString@@@Z proc near
.text$x:00002484                                         ; DATA XREF: NWindows::NFile::NFind::CStreamEnumerator::CStreamEnumerator(UString const &)+5o
.text$x:00002484
.text$x:00002484 arg_4           = dword ptr  8
.text$x:00002484
.text$x:00002484                 mov     edx, [esp+arg_4]
.text$x:00002488                 lea     eax, [edx+0Ch]
.text$x:0000248B                 mov     ecx, [edx-8]
.text$x:0000248E                 xor     ecx, eax
.text$x:00002490                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002495                 mov     eax, offset __ehfuncinfo$??0CStreamEnumerator@NFind@NFile@NWindows@@QAE@ABVUString@@@Z
.text$x:0000249A                 jmp     ___CxxFrameHandler3
.text$x:0000249A __ehhandler$??0CStreamEnumerator@NFind@NFile@NWindows@@QAE@ABVUString@@@Z endp
.text$x:0000249A
.text$x:0000249A ; ---------------------------------------------------------------------------
.text$x:0000249F                 align 10h
.text$x:0000249F _text$x         ends
.text$x:0000249F
.xdata$x:000024A0 ; ===========================================================================
.xdata$x:000024A0
.xdata$x:000024A0 ; Segment type: Pure data
.xdata$x:000024A0 ; Segment permissions: Read
.xdata$x:000024A0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000024A0                 assume cs:_xdata$x
.xdata$x:000024A0                 ;org 24A0h
.xdata$x:000024A0 ; COMDAT (pick associative to section at 240C)
.xdata$x:000024A0 __unwindtable$??0CStreamEnumerator@NFind@NFile@NWindows@@QAE@ABVUString@@@Z db 0FFh
.xdata$x:000024A0                                         ; DATA XREF: .xdata$x:000024B0o
.xdata$x:000024A1                 db 0FFh
.xdata$x:000024A2                 db 0FFh
.xdata$x:000024A3                 db 0FFh
.xdata$x:000024A4                 dd offset __unwindfunclet$??0CStreamEnumerator@NFind@NFile@NWindows@@QAE@ABVUString@@@Z$0
.xdata$x:000024A8 __ehfuncinfo$??0CStreamEnumerator@NFind@NFile@NWindows@@QAE@ABVUString@@@Z db  22h ; "
.xdata$x:000024A8                                         ; DATA XREF: __ehhandler$??0CStreamEnumerator@NFind@NFile@NWindows@@QAE@ABVUString@@@Z+11o
.xdata$x:000024A9                 db    5
.xdata$x:000024AA                 db  93h ; ô
.xdata$x:000024AB                 db  19h
.xdata$x:000024AC                 db    1
.xdata$x:000024AD                 db    0
.xdata$x:000024AE                 db    0
.xdata$x:000024AF                 db    0
.xdata$x:000024B0                 dd offset __unwindtable$??0CStreamEnumerator@NFind@NFile@NWindows@@QAE@ABVUString@@@Z
.xdata$x:000024B4                 db    0
.xdata$x:000024B5                 db    0
.xdata$x:000024B6                 db    0
.xdata$x:000024B7                 db    0
.xdata$x:000024B8                 db    0
.xdata$x:000024B9                 db    0
.xdata$x:000024BA                 db    0
.xdata$x:000024BB                 db    0
.xdata$x:000024BC                 db    0
.xdata$x:000024BD                 db    0
.xdata$x:000024BE                 db    0
.xdata$x:000024BF                 db    0
.xdata$x:000024C0                 db    0
.xdata$x:000024C1                 db    0
.xdata$x:000024C2                 db    0
.xdata$x:000024C3                 db    0
.xdata$x:000024C4                 db    0
.xdata$x:000024C5                 db    0
.xdata$x:000024C6                 db    0
.xdata$x:000024C7                 db    0
.xdata$x:000024C8                 db    1
.xdata$x:000024C9                 db    0
.xdata$x:000024CA                 db    0
.xdata$x:000024CB                 db    0
.xdata$x:000024CB _xdata$x        ends
.xdata$x:000024CB
.text:000024CC ; ===========================================================================
.text:000024CC
.text:000024CC ; Segment type: Pure code
.text:000024CC ; Segment permissions: Read/Execute
.text:000024CC _text           segment para public 'CODE' use32
.text:000024CC                 assume cs:_text
.text:000024CC                 ;org 24CCh
.text:000024CC ; COMDAT (pick any)
.text:000024CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000024CC
.text:000024CC ; =============== S U B R O U T I N E =======================================
.text:000024CC
.text:000024CC ; Attributes: bp-based frame
.text:000024CC
.text:000024CC ; _DWORD __thiscall NWindows::NFile::NFind::CFindStream::CFindStream(NWindows::NFile::NFind::CFindStream *__hidden this)
.text:000024CC                 public ??0CFindStream@NFind@NFile@NWindows@@QAE@XZ
.text:000024CC ??0CFindStream@NFind@NFile@NWindows@@QAE@XZ proc near
.text:000024CC                                         ; CODE XREF: NWindows::NFile::NFind::CStreamEnumerator::CStreamEnumerator(UString const &)+30p
.text:000024CC
.text:000024CC var_4           = dword ptr -4
.text:000024CC
.text:000024CC                 push    ebp
.text:000024CD                 mov     ebp, esp
.text:000024CF                 push    ecx
.text:000024D0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000024D7                 mov     [ebp+var_4], ecx
.text:000024DA                 mov     ecx, [ebp+var_4] ; this
.text:000024DD                 call    ??0CFindFileBase@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFindFileBase::CFindFileBase(void)
.text:000024E2                 mov     eax, [ebp+var_4]
.text:000024E5                 add     esp, 4
.text:000024E8                 cmp     ebp, esp
.text:000024EA                 call    __RTC_CheckEsp
.text:000024EF                 mov     esp, ebp
.text:000024F1                 pop     ebp
.text:000024F2                 retn
.text:000024F2 ??0CFindStream@NFind@NFile@NWindows@@QAE@XZ endp
.text:000024F2
.text:000024F2 ; ---------------------------------------------------------------------------
.text:000024F3                 align 4
.text:000024F3 _text           ends
.text:000024F3
.text:000024F4 ; ===========================================================================
.text:000024F4
.text:000024F4 ; Segment type: Pure code
.text:000024F4 ; Segment permissions: Read/Execute
.text:000024F4 _text           segment para public 'CODE' use32
.text:000024F4                 assume cs:_text
.text:000024F4                 ;org 24F4h
.text:000024F4 ; COMDAT (pick any)
.text:000024F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000024F4
.text:000024F4 ; =============== S U B R O U T I N E =======================================
.text:000024F4
.text:000024F4 ; Attributes: bp-based frame
.text:000024F4
.text:000024F4 ; _DWORD __thiscall NWindows::NFile::NFind::CFindFileBase::CFindFileBase(NWindows::NFile::NFind::CFindFileBase *__hidden this)
.text:000024F4                 public ??0CFindFileBase@NFind@NFile@NWindows@@QAE@XZ
.text:000024F4 ??0CFindFileBase@NFind@NFile@NWindows@@QAE@XZ proc near
.text:000024F4                                         ; CODE XREF: NWindows::NFile::NFind::CFindStream::CFindStream(void)+11p
.text:000024F4                                         ; NWindows::NFile::NFind::CFindFile::CFindFile(void)+11p
.text:000024F4
.text:000024F4 var_4           = dword ptr -4
.text:000024F4
.text:000024F4                 push    ebp
.text:000024F5                 mov     ebp, esp
.text:000024F7                 push    ecx
.text:000024F8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000024FF                 mov     [ebp+var_4], ecx
.text:00002502                 mov     eax, [ebp+var_4]
.text:00002505                 mov     dword ptr [eax], 0FFFFFFFFh
.text:0000250B                 mov     eax, [ebp+var_4]
.text:0000250E                 mov     esp, ebp
.text:00002510                 pop     ebp
.text:00002511                 retn
.text:00002511 ??0CFindFileBase@NFind@NFile@NWindows@@QAE@XZ endp
.text:00002511
.text:00002511 ; ---------------------------------------------------------------------------
.text:00002512                 align 4
.text:00002512 _text           ends
.text:00002512
.text:00002514 ; ===========================================================================
.text:00002514
.text:00002514 ; Segment type: Pure code
.text:00002514 ; Segment permissions: Read/Execute
.text:00002514 _text           segment para public 'CODE' use32
.text:00002514                 assume cs:_text
.text:00002514                 ;org 2514h
.text:00002514 ; COMDAT (pick any)
.text:00002514                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002514
.text:00002514 ; =============== S U B R O U T I N E =======================================
.text:00002514
.text:00002514 ; Attributes: bp-based frame
.text:00002514
.text:00002514 ; _DWORD __thiscall NWindows::NFile::NFind::CFindStream::~CFindStream(NWindows::NFile::NFind::CFindStream *__hidden this)
.text:00002514                 public ??1CFindStream@NFind@NFile@NWindows@@QAE@XZ
.text:00002514 ??1CFindStream@NFind@NFile@NWindows@@QAE@XZ proc near
.text:00002514                                         ; CODE XREF: __unwindfunclet$??0CStreamEnumerator@NFind@NFile@NWindows@@QAE@ABVUString@@@Z$0+3j
.text:00002514                                         ; NWindows::NFile::NFind::CStreamEnumerator::~CStreamEnumerator(void)+49p ...
.text:00002514
.text:00002514 var_4           = dword ptr -4
.text:00002514
.text:00002514                 push    ebp
.text:00002515                 mov     ebp, esp
.text:00002517                 push    ecx
.text:00002518                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000251F                 mov     [ebp+var_4], ecx
.text:00002522                 mov     ecx, [ebp+var_4] ; this
.text:00002525                 call    ??1CFindFileBase@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFindFileBase::~CFindFileBase(void)
.text:0000252A                 add     esp, 4
.text:0000252D                 cmp     ebp, esp
.text:0000252F                 call    __RTC_CheckEsp
.text:00002534                 mov     esp, ebp
.text:00002536                 pop     ebp
.text:00002537                 retn
.text:00002537 ??1CFindStream@NFind@NFile@NWindows@@QAE@XZ endp
.text:00002537
.text:00002537 _text           ends
.text:00002537
.text:00002538 ; ===========================================================================
.text:00002538
.text:00002538 ; Segment type: Pure code
.text:00002538 ; Segment permissions: Read/Execute
.text:00002538 _text           segment para public 'CODE' use32
.text:00002538                 assume cs:_text
.text:00002538                 ;org 2538h
.text:00002538 ; COMDAT (pick any)
.text:00002538                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002538
.text:00002538 ; =============== S U B R O U T I N E =======================================
.text:00002538
.text:00002538 ; Attributes: bp-based frame
.text:00002538
.text:00002538 ; _DWORD __thiscall NWindows::NFile::NFind::CFindFileBase::~CFindFileBase(NWindows::NFile::NFind::CFindFileBase *__hidden this)
.text:00002538                 public ??1CFindFileBase@NFind@NFile@NWindows@@QAE@XZ
.text:00002538 ??1CFindFileBase@NFind@NFile@NWindows@@QAE@XZ proc near
.text:00002538                                         ; CODE XREF: NWindows::NFile::NFind::CFindStream::~CFindStream(void)+11p
.text:00002538                                         ; NWindows::NFile::NFind::CFindFile::~CFindFile(void)+11p
.text:00002538
.text:00002538 var_4           = dword ptr -4
.text:00002538
.text:00002538                 push    ebp
.text:00002539                 mov     ebp, esp
.text:0000253B                 push    ecx
.text:0000253C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002543                 mov     [ebp+var_4], ecx
.text:00002546                 mov     ecx, [ebp+var_4] ; this
.text:00002549                 call    ?Close@CFindFileBase@NFind@NFile@NWindows@@QAE_NXZ ; NWindows::NFile::NFind::CFindFileBase::Close(void)
.text:0000254E                 add     esp, 4
.text:00002551                 cmp     ebp, esp
.text:00002553                 call    __RTC_CheckEsp
.text:00002558                 mov     esp, ebp
.text:0000255A                 pop     ebp
.text:0000255B                 retn
.text:0000255B ??1CFindFileBase@NFind@NFile@NWindows@@QAE@XZ endp
.text:0000255B
.text:0000255B _text           ends
.text:0000255B
.text:0000255C ; ===========================================================================
.text:0000255C
.text:0000255C ; Segment type: Pure code
.text:0000255C ; Segment permissions: Read/Execute
.text:0000255C _text           segment para public 'CODE' use32
.text:0000255C                 assume cs:_text
.text:0000255C                 ;org 255Ch
.text:0000255C ; COMDAT (pick any)
.text:0000255C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000255C
.text:0000255C ; =============== S U B R O U T I N E =======================================
.text:0000255C
.text:0000255C ; Attributes: bp-based frame
.text:0000255C
.text:0000255C ; _DWORD __thiscall NWindows::NFile::NFind::CFindFile::CFindFile(NWindows::NFile::NFind::CFindFile *__hidden this)
.text:0000255C                 public ??0CFindFile@NFind@NFile@NWindows@@QAE@XZ
.text:0000255C ??0CFindFile@NFind@NFile@NWindows@@QAE@XZ proc near
.text:0000255C                                         ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+4C7p
.text:0000255C
.text:0000255C var_4           = dword ptr -4
.text:0000255C
.text:0000255C                 push    ebp
.text:0000255D                 mov     ebp, esp
.text:0000255F                 push    ecx
.text:00002560                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002567                 mov     [ebp+var_4], ecx
.text:0000256A                 mov     ecx, [ebp+var_4] ; this
.text:0000256D                 call    ??0CFindFileBase@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFindFileBase::CFindFileBase(void)
.text:00002572                 mov     eax, [ebp+var_4]
.text:00002575                 add     esp, 4
.text:00002578                 cmp     ebp, esp
.text:0000257A                 call    __RTC_CheckEsp
.text:0000257F                 mov     esp, ebp
.text:00002581                 pop     ebp
.text:00002582                 retn
.text:00002582 ??0CFindFile@NFind@NFile@NWindows@@QAE@XZ endp
.text:00002582
.text:00002582 ; ---------------------------------------------------------------------------
.text:00002583                 align 4
.text:00002583 _text           ends
.text:00002583
.text:00002584 ; ===========================================================================
.text:00002584
.text:00002584 ; Segment type: Pure code
.text:00002584 ; Segment permissions: Read/Execute
.text:00002584 _text           segment para public 'CODE' use32
.text:00002584                 assume cs:_text
.text:00002584                 ;org 2584h
.text:00002584 ; COMDAT (pick any)
.text:00002584                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002584
.text:00002584 ; =============== S U B R O U T I N E =======================================
.text:00002584
.text:00002584 ; Attributes: bp-based frame
.text:00002584
.text:00002584 ; _DWORD __thiscall NWindows::NFile::NFind::CFindFile::~CFindFile(NWindows::NFile::NFind::CFindFile *__hidden this)
.text:00002584                 public ??1CFindFile@NFind@NFile@NWindows@@QAE@XZ
.text:00002584 ??1CFindFile@NFind@NFile@NWindows@@QAE@XZ proc near
.text:00002584                                         ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+501p
.text:00002584                                         ; NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+5E0p ...
.text:00002584
.text:00002584 var_4           = dword ptr -4
.text:00002584
.text:00002584                 push    ebp
.text:00002585                 mov     ebp, esp
.text:00002587                 push    ecx
.text:00002588                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000258F                 mov     [ebp+var_4], ecx
.text:00002592                 mov     ecx, [ebp+var_4] ; this
.text:00002595                 call    ??1CFindFileBase@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFindFileBase::~CFindFileBase(void)
.text:0000259A                 add     esp, 4
.text:0000259D                 cmp     ebp, esp
.text:0000259F                 call    __RTC_CheckEsp
.text:000025A4                 mov     esp, ebp
.text:000025A6                 pop     ebp
.text:000025A7                 retn
.text:000025A7 ??1CFindFile@NFind@NFile@NWindows@@QAE@XZ endp
.text:000025A7
.text:000025A7 _text           ends
.text:000025A7
.text:000025A8 ; ===========================================================================
.text:000025A8
.text:000025A8 ; Segment type: Pure code
.text:000025A8 ; Segment permissions: Read/Execute
.text:000025A8 _text           segment para public 'CODE' use32
.text:000025A8                 assume cs:_text
.text:000025A8                 ;org 25A8h
.text:000025A8 ; COMDAT (pick any)
.text:000025A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000025A8
.text:000025A8 ; =============== S U B R O U T I N E =======================================
.text:000025A8
.text:000025A8 ; Attributes: bp-based frame
.text:000025A8
.text:000025A8 ; _DWORD __thiscall NWindows::NFile::NIO::CInFile::CInFile(NWindows::NFile::NIO::CInFile *__hidden this)
.text:000025A8                 public ??0CInFile@NIO@NFile@NWindows@@QAE@XZ
.text:000025A8 ??0CInFile@NIO@NFile@NWindows@@QAE@XZ proc near
.text:000025A8                                         ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+EEp
.text:000025A8
.text:000025A8 var_4           = dword ptr -4
.text:000025A8
.text:000025A8                 push    ebp
.text:000025A9                 mov     ebp, esp
.text:000025AB                 push    ecx
.text:000025AC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000025B3                 mov     [ebp+var_4], ecx
.text:000025B6                 mov     ecx, [ebp+var_4] ; this
.text:000025B9                 call    ??0CFileBase@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::CFileBase::CFileBase(void)
.text:000025BE                 mov     eax, [ebp+var_4]
.text:000025C1                 add     esp, 4
.text:000025C4                 cmp     ebp, esp
.text:000025C6                 call    __RTC_CheckEsp
.text:000025CB                 mov     esp, ebp
.text:000025CD                 pop     ebp
.text:000025CE                 retn
.text:000025CE ??0CInFile@NIO@NFile@NWindows@@QAE@XZ endp
.text:000025CE
.text:000025CE ; ---------------------------------------------------------------------------
.text:000025CF                 align 10h
.text:000025CF _text           ends
.text:000025CF
.text:000025D0 ; ===========================================================================
.text:000025D0
.text:000025D0 ; Segment type: Pure code
.text:000025D0 ; Segment permissions: Read/Execute
.text:000025D0 _text           segment para public 'CODE' use32
.text:000025D0                 assume cs:_text
.text:000025D0                 ;org 25D0h
.text:000025D0 ; COMDAT (pick any)
.text:000025D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000025D0
.text:000025D0 ; =============== S U B R O U T I N E =======================================
.text:000025D0
.text:000025D0 ; Attributes: bp-based frame
.text:000025D0
.text:000025D0 ; _DWORD __thiscall NWindows::NFile::NIO::CFileBase::CFileBase(NWindows::NFile::NIO::CFileBase *__hidden this)
.text:000025D0                 public ??0CFileBase@NIO@NFile@NWindows@@QAE@XZ
.text:000025D0 ??0CFileBase@NIO@NFile@NWindows@@QAE@XZ proc near
.text:000025D0                                         ; CODE XREF: NWindows::NFile::NIO::CInFile::CInFile(void)+11p
.text:000025D0
.text:000025D0 var_4           = dword ptr -4
.text:000025D0
.text:000025D0                 push    ebp
.text:000025D1                 mov     ebp, esp
.text:000025D3                 push    ecx
.text:000025D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000025DB                 mov     [ebp+var_4], ecx
.text:000025DE                 mov     eax, [ebp+var_4]
.text:000025E1                 mov     dword ptr [eax], 0FFFFFFFFh
.text:000025E7                 mov     eax, [ebp+var_4]
.text:000025EA                 mov     esp, ebp
.text:000025EC                 pop     ebp
.text:000025ED                 retn
.text:000025ED ??0CFileBase@NIO@NFile@NWindows@@QAE@XZ endp
.text:000025ED
.text:000025ED ; ---------------------------------------------------------------------------
.text:000025EE                 align 10h
.text:000025EE _text           ends
.text:000025EE
.text:000025F0 ; ===========================================================================
.text:000025F0
.text:000025F0 ; Segment type: Pure code
.text:000025F0 ; Segment permissions: Read/Execute
.text:000025F0 _text           segment para public 'CODE' use32
.text:000025F0                 assume cs:_text
.text:000025F0                 ;org 25F0h
.text:000025F0 ; COMDAT (pick any)
.text:000025F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000025F0
.text:000025F0 ; =============== S U B R O U T I N E =======================================
.text:000025F0
.text:000025F0 ; Attributes: bp-based frame
.text:000025F0
.text:000025F0 ; _DWORD __thiscall NWindows::NFile::NIO::CInFile::~CInFile(NWindows::NFile::NIO::CInFile *__hidden this)
.text:000025F0                 public ??1CInFile@NIO@NFile@NWindows@@QAE@XZ
.text:000025F0 ??1CInFile@NIO@NFile@NWindows@@QAE@XZ proc near
.text:000025F0                                         ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+11Ep
.text:000025F0                                         ; NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+155p ...
.text:000025F0
.text:000025F0 var_4           = dword ptr -4
.text:000025F0
.text:000025F0                 push    ebp
.text:000025F1                 mov     ebp, esp
.text:000025F3                 push    ecx
.text:000025F4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000025FB                 mov     [ebp+var_4], ecx
.text:000025FE                 mov     ecx, [ebp+var_4] ; this
.text:00002601                 call    ??1CFileBase@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::CFileBase::~CFileBase(void)
.text:00002606                 add     esp, 4
.text:00002609                 cmp     ebp, esp
.text:0000260B                 call    __RTC_CheckEsp
.text:00002610                 mov     esp, ebp
.text:00002612                 pop     ebp
.text:00002613                 retn
.text:00002613 ??1CInFile@NIO@NFile@NWindows@@QAE@XZ endp
.text:00002613
.text:00002613 _text           ends
.text:00002613
.text:00002614 ; ===========================================================================
.text:00002614
.text:00002614 ; Segment type: Pure code
.text:00002614 ; Segment permissions: Read/Execute
.text:00002614 _text           segment para public 'CODE' use32
.text:00002614                 assume cs:_text
.text:00002614                 ;org 2614h
.text:00002614 ; COMDAT (pick any)
.text:00002614                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002614
.text:00002614 ; =============== S U B R O U T I N E =======================================
.text:00002614
.text:00002614 ; Attributes: bp-based frame
.text:00002614
.text:00002614 ; _DWORD __thiscall NWindows::NFile::NIO::CFileBase::~CFileBase(NWindows::NFile::NIO::CFileBase *__hidden this)
.text:00002614                 public ??1CFileBase@NIO@NFile@NWindows@@QAE@XZ
.text:00002614 ??1CFileBase@NIO@NFile@NWindows@@QAE@XZ proc near
.text:00002614                                         ; CODE XREF: NWindows::NFile::NIO::CInFile::~CInFile(void)+11p
.text:00002614
.text:00002614 var_4           = dword ptr -4
.text:00002614
.text:00002614                 push    ebp
.text:00002615                 mov     ebp, esp
.text:00002617                 push    ecx
.text:00002618                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000261F                 mov     [ebp+var_4], ecx
.text:00002622                 mov     ecx, [ebp+var_4] ; this
.text:00002625                 call    ?Close@CFileBase@NIO@NFile@NWindows@@QAE_NXZ ; NWindows::NFile::NIO::CFileBase::Close(void)
.text:0000262A                 add     esp, 4
.text:0000262D                 cmp     ebp, esp
.text:0000262F                 call    __RTC_CheckEsp
.text:00002634                 mov     esp, ebp
.text:00002636                 pop     ebp
.text:00002637                 retn
.text:00002637 ??1CFileBase@NIO@NFile@NWindows@@QAE@XZ endp
.text:00002637
.text:00002637 _text           ends
.text:00002637
.text:00002638 ; ===========================================================================
.text:00002638
.text:00002638 ; Segment type: Pure code
.text:00002638 ; Segment permissions: Read/Execute
.text:00002638 _text           segment para public 'CODE' use32
.text:00002638                 assume cs:_text
.text:00002638                 ;org 2638h
.text:00002638 ; COMDAT (pick any)
.text:00002638                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002638
.text:00002638 ; =============== S U B R O U T I N E =======================================
.text:00002638
.text:00002638 ; Attributes: bp-based frame
.text:00002638
.text:00002638 ; _DWORD __thiscall NWindows::NFile::NFind::CStreamEnumerator::~CStreamEnumerator(NWindows::NFile::NFind::CStreamEnumerator *__hidden this)
.text:00002638                 public ??1CStreamEnumerator@NFind@NFile@NWindows@@QAE@XZ
.text:00002638 ??1CStreamEnumerator@NFind@NFile@NWindows@@QAE@XZ proc near
.text:00002638                                         ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+324p
.text:00002638                                         ; NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+38Ep ...
.text:00002638
.text:00002638 var_10          = dword ptr -10h
.text:00002638 var_C           = dword ptr -0Ch
.text:00002638 var_4           = dword ptr -4
.text:00002638
.text:00002638                 push    ebp
.text:00002639                 mov     ebp, esp
.text:0000263B                 push    0FFFFFFFFh
.text:0000263D                 push    offset __ehhandler$??1CStreamEnumerator@NFind@NFile@NWindows@@QAE@XZ
.text:00002642                 mov     eax, large fs:0
.text:00002648                 push    eax
.text:00002649                 push    ecx
.text:0000264A                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00002651                 mov     eax, dword ptr ds:___security_cookie
.text:00002656                 xor     eax, ebp
.text:00002658                 push    eax
.text:00002659                 lea     eax, [ebp+var_C]
.text:0000265C                 mov     large fs:0, eax
.text:00002662                 mov     [ebp+var_10], ecx
.text:00002665                 mov     [ebp+var_4], 0
.text:0000266C                 mov     ecx, [ebp+var_10]
.text:0000266F                 add     ecx, 4          ; this
.text:00002672                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00002677                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000267E                 mov     ecx, [ebp+var_10] ; this
.text:00002681                 call    ??1CFindStream@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFindStream::~CFindStream(void)
.text:00002686                 mov     ecx, [ebp+var_C]
.text:00002689                 mov     large fs:0, ecx
.text:00002690                 pop     ecx
.text:00002691                 add     esp, 10h
.text:00002694                 cmp     ebp, esp
.text:00002696                 call    __RTC_CheckEsp
.text:0000269B                 mov     esp, ebp
.text:0000269D                 pop     ebp
.text:0000269E                 retn
.text:0000269E ??1CStreamEnumerator@NFind@NFile@NWindows@@QAE@XZ endp
.text:0000269E
.text:0000269E ; ---------------------------------------------------------------------------
.text:0000269F                 align 10h
.text:0000269F _text           ends
.text:0000269F
.text$x:000026A0 ; ===========================================================================
.text$x:000026A0
.text$x:000026A0 ; Segment type: Pure code
.text$x:000026A0 ; Segment permissions: Read/Execute
.text$x:000026A0 _text$x         segment para public 'CODE' use32
.text$x:000026A0                 assume cs:_text$x
.text$x:000026A0                 ;org 26A0h
.text$x:000026A0 ; COMDAT (pick associative to section at 2638)
.text$x:000026A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000026A0
.text$x:000026A0 ; =============== S U B R O U T I N E =======================================
.text$x:000026A0
.text$x:000026A0
.text$x:000026A0 __unwindfunclet$??1CStreamEnumerator@NFind@NFile@NWindows@@QAE@XZ$0 proc near
.text$x:000026A0                                         ; DATA XREF: .xdata$x:000026C8o
.text$x:000026A0                 mov     ecx, [ebp-10h]  ; this
.text$x:000026A3                 jmp     ??1CFindStream@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFindStream::~CFindStream(void)
.text$x:000026A3 __unwindfunclet$??1CStreamEnumerator@NFind@NFile@NWindows@@QAE@XZ$0 endp
.text$x:000026A3
.text$x:000026A8
.text$x:000026A8 ; =============== S U B R O U T I N E =======================================
.text$x:000026A8
.text$x:000026A8
.text$x:000026A8 __ehhandler$??1CStreamEnumerator@NFind@NFile@NWindows@@QAE@XZ proc near
.text$x:000026A8                                         ; DATA XREF: NWindows::NFile::NFind::CStreamEnumerator::~CStreamEnumerator(void)+5o
.text$x:000026A8
.text$x:000026A8 arg_4           = dword ptr  8
.text$x:000026A8
.text$x:000026A8                 mov     edx, [esp+arg_4]
.text$x:000026AC                 lea     eax, [edx+0Ch]
.text$x:000026AF                 mov     ecx, [edx-8]
.text$x:000026B2                 xor     ecx, eax
.text$x:000026B4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000026B9                 mov     eax, offset __ehfuncinfo$??1CStreamEnumerator@NFind@NFile@NWindows@@QAE@XZ
.text$x:000026BE                 jmp     ___CxxFrameHandler3
.text$x:000026BE __ehhandler$??1CStreamEnumerator@NFind@NFile@NWindows@@QAE@XZ endp
.text$x:000026BE
.text$x:000026BE ; ---------------------------------------------------------------------------
.text$x:000026C3                 align 4
.text$x:000026C3 _text$x         ends
.text$x:000026C3
.xdata$x:000026C4 ; ===========================================================================
.xdata$x:000026C4
.xdata$x:000026C4 ; Segment type: Pure data
.xdata$x:000026C4 ; Segment permissions: Read
.xdata$x:000026C4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000026C4                 assume cs:_xdata$x
.xdata$x:000026C4                 ;org 26C4h
.xdata$x:000026C4 ; COMDAT (pick associative to section at 2638)
.xdata$x:000026C4 __unwindtable$??1CStreamEnumerator@NFind@NFile@NWindows@@QAE@XZ db 0FFh
.xdata$x:000026C4                                         ; DATA XREF: .xdata$x:000026D4o
.xdata$x:000026C5                 db 0FFh
.xdata$x:000026C6                 db 0FFh
.xdata$x:000026C7                 db 0FFh
.xdata$x:000026C8                 dd offset __unwindfunclet$??1CStreamEnumerator@NFind@NFile@NWindows@@QAE@XZ$0
.xdata$x:000026CC __ehfuncinfo$??1CStreamEnumerator@NFind@NFile@NWindows@@QAE@XZ db  22h ; "
.xdata$x:000026CC                                         ; DATA XREF: __ehhandler$??1CStreamEnumerator@NFind@NFile@NWindows@@QAE@XZ+11o
.xdata$x:000026CD                 db    5
.xdata$x:000026CE                 db  93h ; ô
.xdata$x:000026CF                 db  19h
.xdata$x:000026D0                 db    1
.xdata$x:000026D1                 db    0
.xdata$x:000026D2                 db    0
.xdata$x:000026D3                 db    0
.xdata$x:000026D4                 dd offset __unwindtable$??1CStreamEnumerator@NFind@NFile@NWindows@@QAE@XZ
.xdata$x:000026D8                 db    0
.xdata$x:000026D9                 db    0
.xdata$x:000026DA                 db    0
.xdata$x:000026DB                 db    0
.xdata$x:000026DC                 db    0
.xdata$x:000026DD                 db    0
.xdata$x:000026DE                 db    0
.xdata$x:000026DF                 db    0
.xdata$x:000026E0                 db    0
.xdata$x:000026E1                 db    0
.xdata$x:000026E2                 db    0
.xdata$x:000026E3                 db    0
.xdata$x:000026E4                 db    0
.xdata$x:000026E5                 db    0
.xdata$x:000026E6                 db    0
.xdata$x:000026E7                 db    0
.xdata$x:000026E8                 db    0
.xdata$x:000026E9                 db    0
.xdata$x:000026EA                 db    0
.xdata$x:000026EB                 db    0
.xdata$x:000026EC                 db    1
.xdata$x:000026ED                 db    0
.xdata$x:000026EE                 db    0
.xdata$x:000026EF                 db    0
.xdata$x:000026EF _xdata$x        ends
.xdata$x:000026EF
.text:000026F0 ; ===========================================================================
.text:000026F0
.text:000026F0 ; Segment type: Pure code
.text:000026F0 ; Segment permissions: Read/Execute
.text:000026F0 _text           segment para public 'CODE' use32
.text:000026F0                 assume cs:_text
.text:000026F0                 ;org 26F0h
.text:000026F0 ; COMDAT (pick any)
.text:000026F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000026F0
.text:000026F0 ; =============== S U B R O U T I N E =======================================
.text:000026F0
.text:000026F0 ; Attributes: bp-based frame
.text:000026F0
.text:000026F0 ; _DWORD __thiscall NWindows::NFile::NFind::CStreamInfo::CStreamInfo(NWindows::NFile::NFind::CStreamInfo *__hidden this)
.text:000026F0                 public ??0CStreamInfo@NFind@NFile@NWindows@@QAE@XZ
.text:000026F0 ??0CStreamInfo@NFind@NFile@NWindows@@QAE@XZ proc near
.text:000026F0                                         ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+2DBp
.text:000026F0
.text:000026F0 var_4           = dword ptr -4
.text:000026F0
.text:000026F0                 push    ebp
.text:000026F1                 mov     ebp, esp
.text:000026F3                 push    ecx
.text:000026F4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000026FB                 mov     [ebp+var_4], ecx
.text:000026FE                 mov     ecx, [ebp+var_4]
.text:00002701                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00002706                 mov     eax, [ebp+var_4]
.text:00002709                 add     esp, 4
.text:0000270C                 cmp     ebp, esp
.text:0000270E                 call    __RTC_CheckEsp
.text:00002713                 mov     esp, ebp
.text:00002715                 pop     ebp
.text:00002716                 retn
.text:00002716 ??0CStreamInfo@NFind@NFile@NWindows@@QAE@XZ endp
.text:00002716
.text:00002716 ; ---------------------------------------------------------------------------
.text:00002717                 align 4
.text:00002717 _text           ends
.text:00002717
.text:00002718 ; ===========================================================================
.text:00002718
.text:00002718 ; Segment type: Pure code
.text:00002718 ; Segment permissions: Read/Execute
.text:00002718 _text           segment para public 'CODE' use32
.text:00002718                 assume cs:_text
.text:00002718                 ;org 2718h
.text:00002718 ; COMDAT (pick any)
.text:00002718                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002718
.text:00002718 ; =============== S U B R O U T I N E =======================================
.text:00002718
.text:00002718 ; Attributes: bp-based frame
.text:00002718
.text:00002718 ; _DWORD __thiscall NWindows::NFile::NFind::CStreamInfo::~CStreamInfo(NWindows::NFile::NFind::CStreamInfo *__hidden this)
.text:00002718                 public ??1CStreamInfo@NFind@NFile@NWindows@@QAE@XZ
.text:00002718 ??1CStreamInfo@NFind@NFile@NWindows@@QAE@XZ proc near
.text:00002718                                         ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+315p
.text:00002718                                         ; NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+37Fp ...
.text:00002718
.text:00002718 var_4           = dword ptr -4
.text:00002718
.text:00002718                 push    ebp
.text:00002719                 mov     ebp, esp
.text:0000271B                 push    ecx
.text:0000271C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002723                 mov     [ebp+var_4], ecx
.text:00002726                 mov     ecx, [ebp+var_4] ; this
.text:00002729                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000272E                 add     esp, 4
.text:00002731                 cmp     ebp, esp
.text:00002733                 call    __RTC_CheckEsp
.text:00002738                 mov     esp, ebp
.text:0000273A                 pop     ebp
.text:0000273B                 retn
.text:0000273B ??1CStreamInfo@NFind@NFile@NWindows@@QAE@XZ endp
.text:0000273B
.text:0000273B _text           ends
.text:0000273B
.text:0000273C ; ===========================================================================
.text:0000273C
.text:0000273C ; Segment type: Pure code
.text:0000273C ; Segment permissions: Read/Execute
.text:0000273C _text           segment para public 'CODE' use32
.text:0000273C                 assume cs:_text
.text:0000273C                 ;org 273Ch
.text:0000273C ; COMDAT (pick any)
.text:0000273C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000273C
.text:0000273C ; =============== S U B R O U T I N E =======================================
.text:0000273C
.text:0000273C ; Attributes: bp-based frame
.text:0000273C
.text:0000273C ; _DWORD __thiscall NWindows::NFile::NFind::CFileInfo::CFileInfo(NWindows::NFile::NFind::CFileInfo *__hidden this)
.text:0000273C                 public ??0CFileInfo@NFind@NFile@NWindows@@QAE@XZ
.text:0000273C ??0CFileInfo@NFind@NFile@NWindows@@QAE@XZ proc near
.text:0000273C                                         ; CODE XREF: NWindows::NFile::NFind::DoesFileExist(wchar_t const *)+38p
.text:0000273C                                         ; NWindows::NFile::NFind::DoesDirExist(wchar_t const *)+38p ...
.text:0000273C
.text:0000273C var_4           = dword ptr -4
.text:0000273C
.text:0000273C                 push    ebp
.text:0000273D                 mov     ebp, esp
.text:0000273F                 push    ecx
.text:00002740                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002747                 mov     [ebp+var_4], ecx
.text:0000274A                 mov     ecx, [ebp+var_4] ; this
.text:0000274D                 call    ??0CFileInfoBase@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfoBase::CFileInfoBase(void)
.text:00002752                 mov     ecx, [ebp+var_4]
.text:00002755                 add     ecx, 28h ; '('
.text:00002758                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:0000275D                 mov     eax, [ebp+var_4]
.text:00002760                 add     esp, 4
.text:00002763                 cmp     ebp, esp
.text:00002765                 call    __RTC_CheckEsp
.text:0000276A                 mov     esp, ebp
.text:0000276C                 pop     ebp
.text:0000276D                 retn
.text:0000276D ??0CFileInfo@NFind@NFile@NWindows@@QAE@XZ endp
.text:0000276D
.text:0000276D ; ---------------------------------------------------------------------------
.text:0000276E                 align 10h
.text:0000276E _text           ends
.text:0000276E
.text:00002770 ; ===========================================================================
.text:00002770
.text:00002770 ; Segment type: Pure code
.text:00002770 ; Segment permissions: Read/Execute
.text:00002770 _text           segment para public 'CODE' use32
.text:00002770                 assume cs:_text
.text:00002770                 ;org 2770h
.text:00002770 ; COMDAT (pick any)
.text:00002770                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002770
.text:00002770 ; =============== S U B R O U T I N E =======================================
.text:00002770
.text:00002770 ; Attributes: bp-based frame
.text:00002770
.text:00002770 ; _DWORD __thiscall NWindows::NFile::NFind::CFileInfoBase::CFileInfoBase(NWindows::NFile::NFind::CFileInfoBase *__hidden this)
.text:00002770                 public ??0CFileInfoBase@NFind@NFile@NWindows@@QAE@XZ
.text:00002770 ??0CFileInfoBase@NFind@NFile@NWindows@@QAE@XZ proc near
.text:00002770                                         ; CODE XREF: NWindows::NFile::NFind::CFileInfo::CFileInfo(void)+11p
.text:00002770
.text:00002770 var_4           = dword ptr -4
.text:00002770
.text:00002770                 push    ebp
.text:00002771                 mov     ebp, esp
.text:00002773                 push    ecx
.text:00002774                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000277B                 mov     [ebp+var_4], ecx
.text:0000277E                 mov     ecx, [ebp+var_4] ; this
.text:00002781                 call    ?ClearBase@CFileInfoBase@NFind@NFile@NWindows@@QAEXXZ ; NWindows::NFile::NFind::CFileInfoBase::ClearBase(void)
.text:00002786                 mov     eax, [ebp+var_4]
.text:00002789                 add     esp, 4
.text:0000278C                 cmp     ebp, esp
.text:0000278E                 call    __RTC_CheckEsp
.text:00002793                 mov     esp, ebp
.text:00002795                 pop     ebp
.text:00002796                 retn
.text:00002796 ??0CFileInfoBase@NFind@NFile@NWindows@@QAE@XZ endp
.text:00002796
.text:00002796 ; ---------------------------------------------------------------------------
.text:00002797                 align 4
.text:00002797 _text           ends
.text:00002797
.text:00002798 ; ===========================================================================
.text:00002798
.text:00002798 ; Segment type: Pure code
.text:00002798 ; Segment permissions: Read/Execute
.text:00002798 _text           segment para public 'CODE' use32
.text:00002798                 assume cs:_text
.text:00002798                 ;org 2798h
.text:00002798 ; COMDAT (pick any)
.text:00002798                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002798
.text:00002798 ; =============== S U B R O U T I N E =======================================
.text:00002798
.text:00002798 ; Attributes: bp-based frame
.text:00002798
.text:00002798 ; _DWORD __thiscall NWindows::NFile::NFind::CFileInfo::~CFileInfo(NWindows::NFile::NFind::CFileInfo *__hidden this)
.text:00002798                 public ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
.text:00002798 ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ proc near
.text:00002798                                         ; CODE XREF: NWindows::NFile::NFind::DoesFileExist(wchar_t const *)+86p
.text:00002798                                         ; NWindows::NFile::NFind::DoesDirExist(wchar_t const *)+86p ...
.text:00002798
.text:00002798 var_4           = dword ptr -4
.text:00002798
.text:00002798                 push    ebp
.text:00002799                 mov     ebp, esp
.text:0000279B                 push    ecx
.text:0000279C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000027A3                 mov     [ebp+var_4], ecx
.text:000027A6                 mov     ecx, [ebp+var_4]
.text:000027A9                 add     ecx, 28h ; '('  ; this
.text:000027AC                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000027B1                 add     esp, 4
.text:000027B4                 cmp     ebp, esp
.text:000027B6                 call    __RTC_CheckEsp
.text:000027BB                 mov     esp, ebp
.text:000027BD                 pop     ebp
.text:000027BE                 retn
.text:000027BE ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ endp
.text:000027BE
.text:000027BE ; ---------------------------------------------------------------------------
.text:000027BF                 align 10h
.text:000027BF _text           ends
.text:000027BF
.text:000027C0 ; ===========================================================================
.text:000027C0
.text:000027C0 ; Segment type: Pure code
.text:000027C0 ; Segment permissions: Read/Execute
.text:000027C0 _text           segment para public 'CODE' use32
.text:000027C0                 assume cs:_text
.text:000027C0                 ;org 27C0h
.text:000027C0 ; COMDAT (pick any)
.text:000027C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000027C0
.text:000027C0 ; =============== S U B R O U T I N E =======================================
.text:000027C0
.text:000027C0 ; Attributes: bp-based frame
.text:000027C0
.text:000027C0 ; bool __thiscall NWindows::NFile::NFind::CFindChangeNotification::IsHandleAllocated(NWindows::NFile::NFind::CFindChangeNotification *__hidden this)
.text:000027C0                 public ?IsHandleAllocated@CFindChangeNotification@NFind@NFile@NWindows@@QBE_NXZ
.text:000027C0 ?IsHandleAllocated@CFindChangeNotification@NFind@NFile@NWindows@@QBE_NXZ proc near
.text:000027C0                                         ; CODE XREF: NWindows::NFile::NFind::CFindChangeNotification::Close(void)+12p
.text:000027C0
.text:000027C0 var_8           = dword ptr -8
.text:000027C0 var_4           = dword ptr -4
.text:000027C0
.text:000027C0                 push    ebp
.text:000027C1                 mov     ebp, esp
.text:000027C3                 sub     esp, 8
.text:000027C6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000027CD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000027D4                 mov     [ebp+var_4], ecx
.text:000027D7                 mov     eax, [ebp+var_4]
.text:000027DA                 cmp     dword ptr [eax], 0FFFFFFFFh
.text:000027DD                 jz      short loc_27F0
.text:000027DF                 mov     ecx, [ebp+var_4]
.text:000027E2                 cmp     dword ptr [ecx], 0
.text:000027E5                 jz      short loc_27F0
.text:000027E7                 mov     [ebp+var_8], 1
.text:000027EE                 jmp     short loc_27F7
.text:000027F0 ; ---------------------------------------------------------------------------
.text:000027F0
.text:000027F0 loc_27F0:                               ; CODE XREF: NWindows::NFile::NFind::CFindChangeNotification::IsHandleAllocated(void)+1Dj
.text:000027F0                                         ; NWindows::NFile::NFind::CFindChangeNotification::IsHandleAllocated(void)+25j
.text:000027F0                 mov     [ebp+var_8], 0
.text:000027F7
.text:000027F7 loc_27F7:                               ; CODE XREF: NWindows::NFile::NFind::CFindChangeNotification::IsHandleAllocated(void)+2Ej
.text:000027F7                 mov     al, byte ptr [ebp+var_8]
.text:000027FA                 mov     esp, ebp
.text:000027FC                 pop     ebp
.text:000027FD                 retn
.text:000027FD ?IsHandleAllocated@CFindChangeNotification@NFind@NFile@NWindows@@QBE_NXZ endp
.text:000027FD
.text:000027FD ; ---------------------------------------------------------------------------
.text:000027FE                 align 10h
.text:000027FE _text           ends
.text:000027FE
.text:00002800 ; ===========================================================================
.text:00002800
.text:00002800 ; Segment type: Pure code
.text:00002800 ; Segment permissions: Read/Execute
.text:00002800 _text           segment para public 'CODE' use32
.text:00002800                 assume cs:_text
.text:00002800                 ;org 2800h
.text:00002800 ; COMDAT (pick any)
.text:00002800                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002800
.text:00002800 ; =============== S U B R O U T I N E =======================================
.text:00002800
.text:00002800 ; Attributes: bp-based frame
.text:00002800
.text:00002800 ; int __stdcall BoolToBOOL(bool)
.text:00002800                 public ?BoolToBOOL@@YGH_N@Z
.text:00002800 ?BoolToBOOL@@YGH_N@Z proc near          ; CODE XREF: NWindows::NFile::NFind::CFindChangeNotification::FindFirst(wchar_t const *,bool,ulong)+56p
.text:00002800                                         ; NWindows::NFile::NFind::CFindChangeNotification::FindFirst(wchar_t const *,bool,ulong)+B0p
.text:00002800
.text:00002800 arg_0           = byte ptr  8
.text:00002800
.text:00002800                 push    ebp
.text:00002801                 mov     ebp, esp
.text:00002803                 movzx   eax, [ebp+arg_0]
.text:00002807                 neg     eax
.text:00002809                 sbb     eax, eax
.text:0000280B                 neg     eax
.text:0000280D                 pop     ebp
.text:0000280E                 retn    4
.text:0000280E ?BoolToBOOL@@YGH_N@Z endp
.text:0000280E
.text:0000280E ; ---------------------------------------------------------------------------
.text:00002811                 align 4
.text:00002811 _text           ends
.text:00002811
.text:00002814 ; ===========================================================================
.text:00002814
.text:00002814 ; Segment type: Pure code
.text:00002814 ; Segment permissions: Read/Execute
.text:00002814 _text           segment para public 'CODE' use32
.text:00002814                 assume cs:_text
.text:00002814                 ;org 2814h
.text:00002814 ; COMDAT (pick any)
.text:00002814                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002814
.text:00002814 ; =============== S U B R O U T I N E =======================================
.text:00002814
.text:00002814 ; Attributes: bp-based frame
.text:00002814
.text:00002814 ; public: unsigned int __thiscall CObjectVector<class UString>::Add(class UString const &)
.text:00002814                 public ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
.text:00002814 ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z proc near
.text:00002814                                         ; CODE XREF: NWindows::NFile::NFind::MyGetLogicalDriveStrings(CObjectVector<UString> &)+160p
.text:00002814                                         ; NWindows::NFile::NFind::MyGetLogicalDriveStrings(CObjectVector<UString> &)+291p
.text:00002814
.text:00002814 var_1C          = dword ptr -1Ch
.text:00002814 var_18          = dword ptr -18h
.text:00002814 var_14          = dword ptr -14h
.text:00002814 var_10          = dword ptr -10h
.text:00002814 var_C           = dword ptr -0Ch
.text:00002814 var_4           = dword ptr -4
.text:00002814 arg_0           = dword ptr  8
.text:00002814
.text:00002814                 push    ebp
.text:00002815                 mov     ebp, esp
.text:00002817                 push    0FFFFFFFFh
.text:00002819                 push    offset __ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
.text:0000281E                 mov     eax, large fs:0
.text:00002824                 push    eax
.text:00002825                 sub     esp, 10h
.text:00002828                 mov     eax, 0CCCCCCCCh
.text:0000282D                 mov     [ebp+var_1C], eax
.text:00002830                 mov     [ebp+var_18], eax
.text:00002833                 mov     [ebp+var_14], eax
.text:00002836                 mov     [ebp+var_10], eax
.text:00002839                 mov     eax, dword ptr ds:___security_cookie
.text:0000283E                 xor     eax, ebp
.text:00002840                 push    eax
.text:00002841                 lea     eax, [ebp+var_C]
.text:00002844                 mov     large fs:0, eax
.text:0000284A                 mov     [ebp+var_10], ecx
.text:0000284D                 push    0Ch             ; unsigned int
.text:0000284F                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00002854                 add     esp, 4
.text:00002857                 mov     [ebp+var_18], eax
.text:0000285A                 mov     [ebp+var_4], 0
.text:00002861                 cmp     [ebp+var_18], 0
.text:00002865                 jz      short loc_2878
.text:00002867                 mov     eax, [ebp+arg_0]
.text:0000286A                 push    eax
.text:0000286B                 mov     ecx, [ebp+var_18]
.text:0000286E                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:00002873                 mov     [ebp+var_1C], eax
.text:00002876                 jmp     short loc_287F
.text:00002878 ; ---------------------------------------------------------------------------
.text:00002878
.text:00002878 loc_2878:                               ; CODE XREF: CObjectVector<UString>::Add(UString const &)+51j
.text:00002878                 mov     [ebp+var_1C], 0
.text:0000287F
.text:0000287F loc_287F:                               ; CODE XREF: CObjectVector<UString>::Add(UString const &)+62j
.text:0000287F                 mov     ecx, [ebp+var_1C]
.text:00002882                 mov     [ebp+var_14], ecx
.text:00002885                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000288C                 mov     edx, [ebp+var_14]
.text:0000288F                 push    edx
.text:00002890                 mov     ecx, [ebp+var_10]
.text:00002893                 call    ?Add@?$CRecordVector@PAX@@QAEIQAX@Z ; CRecordVector<void *>::Add(void * const)
.text:00002898                 mov     ecx, [ebp+var_C]
.text:0000289B                 mov     large fs:0, ecx
.text:000028A2                 pop     ecx
.text:000028A3                 add     esp, 1Ch
.text:000028A6                 cmp     ebp, esp
.text:000028A8                 call    __RTC_CheckEsp
.text:000028AD                 mov     esp, ebp
.text:000028AF                 pop     ebp
.text:000028B0                 retn    4
.text:000028B0 ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z endp
.text:000028B0
.text:000028B0 ; ---------------------------------------------------------------------------
.text:000028B3                 align 4
.text:000028B3 _text           ends
.text:000028B3
.text$x:000028B4 ; ===========================================================================
.text$x:000028B4
.text$x:000028B4 ; Segment type: Pure code
.text$x:000028B4 ; Segment permissions: Read/Execute
.text$x:000028B4 _text$x         segment para public 'CODE' use32
.text$x:000028B4                 assume cs:_text$x
.text$x:000028B4                 ;org 28B4h
.text$x:000028B4 ; COMDAT (pick associative to section at 2814)
.text$x:000028B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000028B4
.text$x:000028B4 ; =============== S U B R O U T I N E =======================================
.text$x:000028B4
.text$x:000028B4
.text$x:000028B4 __unwindfunclet$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z$0 proc near
.text$x:000028B4                                         ; DATA XREF: .xdata$x:000028E0o
.text$x:000028B4                 mov     eax, [ebp-18h]
.text$x:000028B7                 push    eax             ; void *
.text$x:000028B8                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000028BD                 pop     ecx
.text$x:000028BE                 retn
.text$x:000028BE __unwindfunclet$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z$0 endp
.text$x:000028BE
.text$x:000028BF
.text$x:000028BF ; =============== S U B R O U T I N E =======================================
.text$x:000028BF
.text$x:000028BF
.text$x:000028BF __ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z proc near
.text$x:000028BF                                         ; DATA XREF: CObjectVector<UString>::Add(UString const &)+5o
.text$x:000028BF
.text$x:000028BF arg_4           = dword ptr  8
.text$x:000028BF
.text$x:000028BF                 mov     edx, [esp+arg_4]
.text$x:000028C3                 lea     eax, [edx+0Ch]
.text$x:000028C6                 mov     ecx, [edx-14h]
.text$x:000028C9                 xor     ecx, eax
.text$x:000028CB                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000028D0                 mov     eax, offset __ehfuncinfo$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
.text$x:000028D5                 jmp     ___CxxFrameHandler3
.text$x:000028D5 __ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z endp
.text$x:000028D5
.text$x:000028D5 ; ---------------------------------------------------------------------------
.text$x:000028DA                 align 4
.text$x:000028DA _text$x         ends
.text$x:000028DA
.xdata$x:000028DC ; ===========================================================================
.xdata$x:000028DC
.xdata$x:000028DC ; Segment type: Pure data
.xdata$x:000028DC ; Segment permissions: Read
.xdata$x:000028DC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000028DC                 assume cs:_xdata$x
.xdata$x:000028DC                 ;org 28DCh
.xdata$x:000028DC ; COMDAT (pick associative to section at 2814)
.xdata$x:000028DC __unwindtable$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z db 0FFh
.xdata$x:000028DC                                         ; DATA XREF: .xdata$x:000028ECo
.xdata$x:000028DD                 db 0FFh
.xdata$x:000028DE                 db 0FFh
.xdata$x:000028DF                 db 0FFh
.xdata$x:000028E0                 dd offset __unwindfunclet$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z$0
.xdata$x:000028E4 __ehfuncinfo$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z db  22h ; "
.xdata$x:000028E4                                         ; DATA XREF: __ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z+11o
.xdata$x:000028E5                 db    5
.xdata$x:000028E6                 db  93h ; ô
.xdata$x:000028E7                 db  19h
.xdata$x:000028E8                 db    1
.xdata$x:000028E9                 db    0
.xdata$x:000028EA                 db    0
.xdata$x:000028EB                 db    0
.xdata$x:000028EC                 dd offset __unwindtable$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
.xdata$x:000028F0                 db    0
.xdata$x:000028F1                 db    0
.xdata$x:000028F2                 db    0
.xdata$x:000028F3                 db    0
.xdata$x:000028F4                 db    0
.xdata$x:000028F5                 db    0
.xdata$x:000028F6                 db    0
.xdata$x:000028F7                 db    0
.xdata$x:000028F8                 db    0
.xdata$x:000028F9                 db    0
.xdata$x:000028FA                 db    0
.xdata$x:000028FB                 db    0
.xdata$x:000028FC                 db    0
.xdata$x:000028FD                 db    0
.xdata$x:000028FE                 db    0
.xdata$x:000028FF                 db    0
.xdata$x:00002900                 db    0
.xdata$x:00002901                 db    0
.xdata$x:00002902                 db    0
.xdata$x:00002903                 db    0
.xdata$x:00002904                 db    1
.xdata$x:00002905                 db    0
.xdata$x:00002906                 db    0
.xdata$x:00002907                 db    0
.xdata$x:00002907 _xdata$x        ends
.xdata$x:00002907
.text:00002908 ; ===========================================================================
.text:00002908
.text:00002908 ; Segment type: Pure code
.text:00002908 ; Segment permissions: Read/Execute
.text:00002908 _text           segment para public 'CODE' use32
.text:00002908                 assume cs:_text
.text:00002908                 ;org 2908h
.text:00002908 ; COMDAT (pick any)
.text:00002908                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002908
.text:00002908 ; =============== S U B R O U T I N E =======================================
.text:00002908
.text:00002908 ; Attributes: bp-based frame
.text:00002908
.text:00002908 ; public: void __thiscall CObjectVector<class UString>::Clear(void)
.text:00002908                 public ?Clear@?$CObjectVector@VUString@@@@QAEXXZ
.text:00002908 ?Clear@?$CObjectVector@VUString@@@@QAEXXZ proc near
.text:00002908                                         ; CODE XREF: NWindows::NFile::NFind::MyGetLogicalDriveStrings(CObjectVector<UString> &)+3Cp
.text:00002908                                         ; NWindows::NFile::NFind::MyGetLogicalDriveStrings(CObjectVector<UString> &)+53p
.text:00002908
.text:00002908 var_14          = dword ptr -14h
.text:00002908 var_10          = dword ptr -10h
.text:00002908 var_C           = dword ptr -0Ch
.text:00002908 var_8           = dword ptr -8
.text:00002908 var_4           = dword ptr -4
.text:00002908
.text:00002908                 push    ebp
.text:00002909                 mov     ebp, esp
.text:0000290B                 sub     esp, 14h
.text:0000290E                 mov     eax, 0CCCCCCCCh
.text:00002913                 mov     [ebp+var_14], eax
.text:00002916                 mov     [ebp+var_10], eax
.text:00002919                 mov     [ebp+var_C], eax
.text:0000291C                 mov     [ebp+var_8], eax
.text:0000291F                 mov     [ebp+var_4], eax
.text:00002922                 mov     [ebp+var_4], ecx
.text:00002925                 mov     ecx, [ebp+var_4]
.text:00002928                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:0000292D                 mov     [ebp+var_8], eax
.text:00002930
.text:00002930 loc_2930:                               ; CODE XREF: CObjectVector<UString>::Clear(void):loc_2972j
.text:00002930                 cmp     [ebp+var_8], 0
.text:00002934                 jz      short loc_2974
.text:00002936                 mov     eax, [ebp+var_8]
.text:00002939                 sub     eax, 1
.text:0000293C                 mov     [ebp+var_8], eax
.text:0000293F                 mov     ecx, [ebp+var_8]
.text:00002942                 push    ecx
.text:00002943                 mov     ecx, [ebp+var_4]
.text:00002946                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:0000294B                 mov     edx, [eax]
.text:0000294D                 mov     [ebp+var_10], edx
.text:00002950                 mov     eax, [ebp+var_10]
.text:00002953                 mov     [ebp+var_C], eax
.text:00002956                 cmp     [ebp+var_C], 0
.text:0000295A                 jz      short loc_296B
.text:0000295C                 push    1
.text:0000295E                 mov     ecx, [ebp+var_C]
.text:00002961                 call    ??_GUString@@QAEPAXI@Z ; UString::`scalar deleting destructor'(uint)
.text:00002966                 mov     [ebp+var_14], eax
.text:00002969                 jmp     short loc_2972
.text:0000296B ; ---------------------------------------------------------------------------
.text:0000296B
.text:0000296B loc_296B:                               ; CODE XREF: CObjectVector<UString>::Clear(void)+52j
.text:0000296B                 mov     [ebp+var_14], 0
.text:00002972
.text:00002972 loc_2972:                               ; CODE XREF: CObjectVector<UString>::Clear(void)+61j
.text:00002972                 jmp     short loc_2930
.text:00002974 ; ---------------------------------------------------------------------------
.text:00002974
.text:00002974 loc_2974:                               ; CODE XREF: CObjectVector<UString>::Clear(void)+2Cj
.text:00002974                 mov     ecx, [ebp+var_4]
.text:00002977                 call    ?Clear@?$CRecordVector@PAX@@QAEXXZ ; CRecordVector<void *>::Clear(void)
.text:0000297C                 add     esp, 14h
.text:0000297F                 cmp     ebp, esp
.text:00002981                 call    __RTC_CheckEsp
.text:00002986                 mov     esp, ebp
.text:00002988                 pop     ebp
.text:00002989                 retn
.text:00002989 ?Clear@?$CObjectVector@VUString@@@@QAEXXZ endp
.text:00002989
.text:00002989 ; ---------------------------------------------------------------------------
.text:0000298A                 align 4
.text:0000298A _text           ends
.text:0000298A
.text:0000298C ; ===========================================================================
.text:0000298C
.text:0000298C ; Segment type: Pure code
.text:0000298C ; Segment permissions: Read/Execute
.text:0000298C _text           segment para public 'CODE' use32
.text:0000298C                 assume cs:_text
.text:0000298C                 ;org 298Ch
.text:0000298C ; COMDAT (pick any)
.text:0000298C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000298C
.text:0000298C ; =============== S U B R O U T I N E =======================================
.text:0000298C
.text:0000298C ; Attributes: bp-based frame
.text:0000298C
.text:0000298C ; public: __thiscall CObjArray<char>::CObjArray<char>(unsigned int)
.text:0000298C                 public ??0?$CObjArray@D@@QAE@I@Z
.text:0000298C ??0?$CObjArray@D@@QAE@I@Z proc near     ; CODE XREF: NWindows::NFile::NFind::MyGetLogicalDriveStrings(CObjectVector<UString> &)+82p
.text:0000298C
.text:0000298C var_8           = dword ptr -8
.text:0000298C var_4           = dword ptr -4
.text:0000298C arg_0           = dword ptr  8
.text:0000298C
.text:0000298C                 push    ebp
.text:0000298D                 mov     ebp, esp
.text:0000298F                 sub     esp, 8
.text:00002992                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002999                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000029A0                 mov     [ebp+var_4], ecx
.text:000029A3                 mov     eax, [ebp+var_4]
.text:000029A6                 mov     dword ptr [eax], 0
.text:000029AC                 cmp     [ebp+arg_0], 0
.text:000029B0                 jz      short loc_29C9
.text:000029B2                 mov     ecx, [ebp+arg_0]
.text:000029B5                 push    ecx             ; unsigned int
.text:000029B6                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000029BB                 add     esp, 4
.text:000029BE                 mov     [ebp+var_8], eax
.text:000029C1                 mov     edx, [ebp+var_4]
.text:000029C4                 mov     eax, [ebp+var_8]
.text:000029C7                 mov     [edx], eax
.text:000029C9
.text:000029C9 loc_29C9:                               ; CODE XREF: CObjArray<char>::CObjArray<char>(uint)+24j
.text:000029C9                 mov     eax, [ebp+var_4]
.text:000029CC                 add     esp, 8
.text:000029CF                 cmp     ebp, esp
.text:000029D1                 call    __RTC_CheckEsp
.text:000029D6                 mov     esp, ebp
.text:000029D8                 pop     ebp
.text:000029D9                 retn    4
.text:000029D9 ??0?$CObjArray@D@@QAE@I@Z endp
.text:000029D9
.text:000029D9 _text           ends
.text:000029D9
.text:000029DC ; ===========================================================================
.text:000029DC
.text:000029DC ; Segment type: Pure code
.text:000029DC ; Segment permissions: Read/Execute
.text:000029DC _text           segment para public 'CODE' use32
.text:000029DC                 assume cs:_text
.text:000029DC                 ;org 29DCh
.text:000029DC ; COMDAT (pick any)
.text:000029DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000029DC
.text:000029DC ; =============== S U B R O U T I N E =======================================
.text:000029DC
.text:000029DC ; Attributes: bp-based frame
.text:000029DC
.text:000029DC ; public: __thiscall CObjArray<char>::~CObjArray<char>(void)
.text:000029DC                 public ??1?$CObjArray@D@@QAE@XZ
.text:000029DC ??1?$CObjArray@D@@QAE@XZ proc near      ; CODE XREF: NWindows::NFile::NFind::MyGetLogicalDriveStrings(CObjectVector<UString> &)+C9p
.text:000029DC                                         ; NWindows::NFile::NFind::MyGetLogicalDriveStrings(CObjectVector<UString> &)+19Ap ...
.text:000029DC
.text:000029DC var_8           = dword ptr -8
.text:000029DC var_4           = dword ptr -4
.text:000029DC
.text:000029DC                 push    ebp
.text:000029DD                 mov     ebp, esp
.text:000029DF                 sub     esp, 8
.text:000029E2                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000029E9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000029F0                 mov     [ebp+var_4], ecx
.text:000029F3                 mov     eax, [ebp+var_4]
.text:000029F6                 mov     ecx, [eax]
.text:000029F8                 mov     [ebp+var_8], ecx
.text:000029FB                 mov     edx, [ebp+var_8]
.text:000029FE                 push    edx             ; void *
.text:000029FF                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00002A04                 add     esp, 4
.text:00002A07                 add     esp, 8
.text:00002A0A                 cmp     ebp, esp
.text:00002A0C                 call    __RTC_CheckEsp
.text:00002A11                 mov     esp, ebp
.text:00002A13                 pop     ebp
.text:00002A14                 retn
.text:00002A14 ??1?$CObjArray@D@@QAE@XZ endp
.text:00002A14
.text:00002A14 ; ---------------------------------------------------------------------------
.text:00002A15                 align 4
.text:00002A15 _text           ends
.text:00002A15
.text:00002A18 ; ===========================================================================
.text:00002A18
.text:00002A18 ; Segment type: Pure code
.text:00002A18 ; Segment permissions: Read/Execute
.text:00002A18 _text           segment para public 'CODE' use32
.text:00002A18                 assume cs:_text
.text:00002A18                 ;org 2A18h
.text:00002A18 ; COMDAT (pick any)
.text:00002A18                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002A18
.text:00002A18 ; =============== S U B R O U T I N E =======================================
.text:00002A18
.text:00002A18 ; Attributes: bp-based frame
.text:00002A18
.text:00002A18 ; public: __thiscall CObjArray<char>::operator char *(void)
.text:00002A18                 public ??B?$CObjArray@D@@QAEPADXZ
.text:00002A18 ??B?$CObjArray@D@@QAEPADXZ proc near    ; CODE XREF: NWindows::NFile::NFind::MyGetLogicalDriveStrings(CObjectVector<UString> &)+91p
.text:00002A18                                         ; NWindows::NFile::NFind::MyGetLogicalDriveStrings(CObjectVector<UString> &)+106p ...
.text:00002A18
.text:00002A18 var_4           = dword ptr -4
.text:00002A18
.text:00002A18                 push    ebp
.text:00002A19                 mov     ebp, esp
.text:00002A1B                 push    ecx
.text:00002A1C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002A23                 mov     [ebp+var_4], ecx
.text:00002A26                 mov     eax, [ebp+var_4]
.text:00002A29                 mov     eax, [eax]
.text:00002A2B                 mov     esp, ebp
.text:00002A2D                 pop     ebp
.text:00002A2E                 retn
.text:00002A2E ??B?$CObjArray@D@@QAEPADXZ endp
.text:00002A2E
.text:00002A2E ; ---------------------------------------------------------------------------
.text:00002A2F                 align 10h
.text:00002A2F _text           ends
.text:00002A2F
.text:00002A30 ; ===========================================================================
.text:00002A30
.text:00002A30 ; Segment type: Pure code
.text:00002A30 ; Segment permissions: Read/Execute
.text:00002A30 _text           segment para public 'CODE' use32
.text:00002A30                 assume cs:_text
.text:00002A30                 ;org 2A30h
.text:00002A30 ; COMDAT (pick any)
.text:00002A30                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002A30
.text:00002A30 ; =============== S U B R O U T I N E =======================================
.text:00002A30
.text:00002A30 ; Attributes: bp-based frame
.text:00002A30
.text:00002A30 ; public: __thiscall CObjArray<wchar_t>::CObjArray<wchar_t>(unsigned int)
.text:00002A30                 public ??0?$CObjArray@_W@@QAE@I@Z
.text:00002A30 ??0?$CObjArray@_W@@QAE@I@Z proc near    ; CODE XREF: NWindows::NFile::NFind::MyGetLogicalDriveStrings(CObjectVector<UString> &)+1D6p
.text:00002A30
.text:00002A30 var_8           = dword ptr -8
.text:00002A30 var_4           = dword ptr -4
.text:00002A30 arg_0           = dword ptr  8
.text:00002A30
.text:00002A30                 push    ebp
.text:00002A31                 mov     ebp, esp
.text:00002A33                 sub     esp, 8
.text:00002A36                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002A3D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002A44                 mov     [ebp+var_4], ecx
.text:00002A47                 mov     eax, [ebp+var_4]
.text:00002A4A                 mov     dword ptr [eax], 0
.text:00002A50                 cmp     [ebp+arg_0], 0
.text:00002A54                 jz      short loc_2A7D
.text:00002A56                 xor     ecx, ecx
.text:00002A58                 mov     eax, [ebp+arg_0]
.text:00002A5B                 mov     edx, 2
.text:00002A60                 mul     edx
.text:00002A62                 seto    cl
.text:00002A65                 neg     ecx
.text:00002A67                 or      ecx, eax
.text:00002A69                 push    ecx             ; unsigned int
.text:00002A6A                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00002A6F                 add     esp, 4
.text:00002A72                 mov     [ebp+var_8], eax
.text:00002A75                 mov     eax, [ebp+var_4]
.text:00002A78                 mov     ecx, [ebp+var_8]
.text:00002A7B                 mov     [eax], ecx
.text:00002A7D
.text:00002A7D loc_2A7D:                               ; CODE XREF: CObjArray<wchar_t>::CObjArray<wchar_t>(uint)+24j
.text:00002A7D                 mov     eax, [ebp+var_4]
.text:00002A80                 add     esp, 8
.text:00002A83                 cmp     ebp, esp
.text:00002A85                 call    __RTC_CheckEsp
.text:00002A8A                 mov     esp, ebp
.text:00002A8C                 pop     ebp
.text:00002A8D                 retn    4
.text:00002A8D ??0?$CObjArray@_W@@QAE@I@Z endp
.text:00002A8D
.text:00002A8D _text           ends
.text:00002A8D
.text:00002A90 ; ===========================================================================
.text:00002A90
.text:00002A90 ; Segment type: Pure code
.text:00002A90 ; Segment permissions: Read/Execute
.text:00002A90 _text           segment para public 'CODE' use32
.text:00002A90                 assume cs:_text
.text:00002A90                 ;org 2A90h
.text:00002A90 ; COMDAT (pick any)
.text:00002A90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002A90
.text:00002A90 ; =============== S U B R O U T I N E =======================================
.text:00002A90
.text:00002A90 ; Attributes: bp-based frame
.text:00002A90
.text:00002A90 ; public: __thiscall CObjArray<wchar_t>::~CObjArray<wchar_t>(void)
.text:00002A90                 public ??1?$CObjArray@_W@@QAE@XZ
.text:00002A90 ??1?$CObjArray@_W@@QAE@XZ proc near     ; CODE XREF: NWindows::NFile::NFind::MyGetLogicalDriveStrings(CObjectVector<UString> &)+21Dp
.text:00002A90                                         ; NWindows::NFile::NFind::MyGetLogicalDriveStrings(CObjectVector<UString> &)+2BCp ...
.text:00002A90
.text:00002A90 var_8           = dword ptr -8
.text:00002A90 var_4           = dword ptr -4
.text:00002A90
.text:00002A90                 push    ebp
.text:00002A91                 mov     ebp, esp
.text:00002A93                 sub     esp, 8
.text:00002A96                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002A9D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002AA4                 mov     [ebp+var_4], ecx
.text:00002AA7                 mov     eax, [ebp+var_4]
.text:00002AAA                 mov     ecx, [eax]
.text:00002AAC                 mov     [ebp+var_8], ecx
.text:00002AAF                 mov     edx, [ebp+var_8]
.text:00002AB2                 push    edx             ; void *
.text:00002AB3                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00002AB8                 add     esp, 4
.text:00002ABB                 add     esp, 8
.text:00002ABE                 cmp     ebp, esp
.text:00002AC0                 call    __RTC_CheckEsp
.text:00002AC5                 mov     esp, ebp
.text:00002AC7                 pop     ebp
.text:00002AC8                 retn
.text:00002AC8 ??1?$CObjArray@_W@@QAE@XZ endp
.text:00002AC8
.text:00002AC8 ; ---------------------------------------------------------------------------
.text:00002AC9                 align 4
.text:00002AC9 _text           ends
.text:00002AC9
.text:00002ACC ; ===========================================================================
.text:00002ACC
.text:00002ACC ; Segment type: Pure code
.text:00002ACC ; Segment permissions: Read/Execute
.text:00002ACC _text           segment para public 'CODE' use32
.text:00002ACC                 assume cs:_text
.text:00002ACC                 ;org 2ACCh
.text:00002ACC ; COMDAT (pick any)
.text:00002ACC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002ACC
.text:00002ACC ; =============== S U B R O U T I N E =======================================
.text:00002ACC
.text:00002ACC ; Attributes: bp-based frame
.text:00002ACC
.text:00002ACC ; public: __thiscall CObjArray<wchar_t>::operator wchar_t *(void)
.text:00002ACC                 public ??B?$CObjArray@_W@@QAEPA_WXZ
.text:00002ACC ??B?$CObjArray@_W@@QAEPA_WXZ proc near  ; CODE XREF: NWindows::NFile::NFind::MyGetLogicalDriveStrings(CObjectVector<UString> &)+1E5p
.text:00002ACC                                         ; NWindows::NFile::NFind::MyGetLogicalDriveStrings(CObjectVector<UString> &)+25Ap ...
.text:00002ACC
.text:00002ACC var_4           = dword ptr -4
.text:00002ACC
.text:00002ACC                 push    ebp
.text:00002ACD                 mov     ebp, esp
.text:00002ACF                 push    ecx
.text:00002AD0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002AD7                 mov     [ebp+var_4], ecx
.text:00002ADA                 mov     eax, [ebp+var_4]
.text:00002ADD                 mov     eax, [eax]
.text:00002ADF                 mov     esp, ebp
.text:00002AE1                 pop     ebp
.text:00002AE2                 retn
.text:00002AE2 ??B?$CObjArray@_W@@QAEPA_WXZ endp
.text:00002AE2
.text:00002AE2 ; ---------------------------------------------------------------------------
.text:00002AE3                 align 4
.text:00002AE3 _text           ends
.text:00002AE3
.text:00002AE4 ; ===========================================================================
.text:00002AE4
.text:00002AE4 ; Segment type: Pure code
.text:00002AE4 ; Segment permissions: Read/Execute
.text:00002AE4 _text           segment para public 'CODE' use32
.text:00002AE4                 assume cs:_text
.text:00002AE4                 ;org 2AE4h
.text:00002AE4 ; COMDAT (pick any)
.text:00002AE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002AE4
.text:00002AE4 ; =============== S U B R O U T I N E =======================================
.text:00002AE4
.text:00002AE4 ; Attributes: bp-based frame
.text:00002AE4
.text:00002AE4 ; public: void * __thiscall UString::`scalar deleting destructor'(unsigned int)
.text:00002AE4                 public ??_GUString@@QAEPAXI@Z
.text:00002AE4 ??_GUString@@QAEPAXI@Z proc near        ; CODE XREF: CObjectVector<UString>::Clear(void)+59p
.text:00002AE4
.text:00002AE4 var_4           = dword ptr -4
.text:00002AE4 arg_0           = dword ptr  8
.text:00002AE4
.text:00002AE4                 push    ebp
.text:00002AE5                 mov     ebp, esp
.text:00002AE7                 push    ecx
.text:00002AE8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002AEF                 mov     [ebp+var_4], ecx
.text:00002AF2                 mov     ecx, [ebp+var_4] ; this
.text:00002AF5                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00002AFA                 mov     eax, [ebp+arg_0]
.text:00002AFD                 and     eax, 1
.text:00002B00                 jz      short loc_2B0E
.text:00002B02                 mov     ecx, [ebp+var_4]
.text:00002B05                 push    ecx             ; void *
.text:00002B06                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00002B0B                 add     esp, 4
.text:00002B0E
.text:00002B0E loc_2B0E:                               ; CODE XREF: UString::`scalar deleting destructor'(uint)+1Cj
.text:00002B0E                 mov     eax, [ebp+var_4]
.text:00002B11                 add     esp, 4
.text:00002B14                 cmp     ebp, esp
.text:00002B16                 call    __RTC_CheckEsp
.text:00002B1B                 mov     esp, ebp
.text:00002B1D                 pop     ebp
.text:00002B1E                 retn    4
.text:00002B1E ??_GUString@@QAEPAXI@Z endp
.text:00002B1E
.text:00002B1E ; ---------------------------------------------------------------------------
.text:00002B21                 align 4
.text:00002B21 _text           ends
.text:00002B21
.text:00002B24 ; ===========================================================================
.text:00002B24
.text:00002B24 ; Segment type: Pure code
.text:00002B24 ; Segment permissions: Read/Execute
.text:00002B24 _text           segment para public 'CODE' use32
.text:00002B24                 assume cs:_text
.text:00002B24                 ;org 2B24h
.text:00002B24 ; COMDAT (pick any)
.text:00002B24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002B24
.text:00002B24 ; =============== S U B R O U T I N E =======================================
.text:00002B24
.text:00002B24 ; Attributes: bp-based frame
.text:00002B24
.text:00002B24 ; public: unsigned int __thiscall CRecordVector<void *>::Size(void)const
.text:00002B24                 public ?Size@?$CRecordVector@PAX@@QBEIXZ
.text:00002B24 ?Size@?$CRecordVector@PAX@@QBEIXZ proc near
.text:00002B24                                         ; CODE XREF: CObjectVector<UString>::Clear(void)+20p
.text:00002B24
.text:00002B24 var_4           = dword ptr -4
.text:00002B24
.text:00002B24                 push    ebp
.text:00002B25                 mov     ebp, esp
.text:00002B27                 push    ecx
.text:00002B28                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002B2F                 mov     [ebp+var_4], ecx
.text:00002B32                 mov     eax, [ebp+var_4]
.text:00002B35                 mov     eax, [eax+4]
.text:00002B38                 mov     esp, ebp
.text:00002B3A                 pop     ebp
.text:00002B3B                 retn
.text:00002B3B ?Size@?$CRecordVector@PAX@@QBEIXZ endp
.text:00002B3B
.text:00002B3B _text           ends
.text:00002B3B
.text:00002B3C ; ===========================================================================
.text:00002B3C
.text:00002B3C ; Segment type: Pure code
.text:00002B3C ; Segment permissions: Read/Execute
.text:00002B3C _text           segment para public 'CODE' use32
.text:00002B3C                 assume cs:_text
.text:00002B3C                 ;org 2B3Ch
.text:00002B3C ; COMDAT (pick any)
.text:00002B3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002B3C
.text:00002B3C ; =============== S U B R O U T I N E =======================================
.text:00002B3C
.text:00002B3C ; Attributes: bp-based frame
.text:00002B3C
.text:00002B3C ; public: void __thiscall CRecordVector<void *>::Clear(void)
.text:00002B3C                 public ?Clear@?$CRecordVector@PAX@@QAEXXZ
.text:00002B3C ?Clear@?$CRecordVector@PAX@@QAEXXZ proc near
.text:00002B3C                                         ; CODE XREF: CObjectVector<UString>::Clear(void)+6Fp
.text:00002B3C
.text:00002B3C var_4           = dword ptr -4
.text:00002B3C
.text:00002B3C                 push    ebp
.text:00002B3D                 mov     ebp, esp
.text:00002B3F                 push    ecx
.text:00002B40                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002B47                 mov     [ebp+var_4], ecx
.text:00002B4A                 mov     eax, [ebp+var_4]
.text:00002B4D                 mov     dword ptr [eax+4], 0
.text:00002B54                 mov     esp, ebp
.text:00002B56                 pop     ebp
.text:00002B57                 retn
.text:00002B57 ?Clear@?$CRecordVector@PAX@@QAEXXZ endp
.text:00002B57
.text:00002B57 _text           ends
.text:00002B57
.text:00002B58 ; ===========================================================================
.text:00002B58
.text:00002B58 ; Segment type: Pure code
.text:00002B58 ; Segment permissions: Read/Execute
.text:00002B58 _text           segment para public 'CODE' use32
.text:00002B58                 assume cs:_text
.text:00002B58                 ;org 2B58h
.text:00002B58 ; COMDAT (pick any)
.text:00002B58                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002B58
.text:00002B58 ; =============== S U B R O U T I N E =======================================
.text:00002B58
.text:00002B58 ; Attributes: bp-based frame
.text:00002B58
.text:00002B58 ; public: unsigned int __thiscall CRecordVector<void *>::Add(void * const)
.text:00002B58                 public ?Add@?$CRecordVector@PAX@@QAEIQAX@Z
.text:00002B58 ?Add@?$CRecordVector@PAX@@QAEIQAX@Z proc near
.text:00002B58                                         ; CODE XREF: CObjectVector<UString>::Add(UString const &)+7Fp
.text:00002B58
.text:00002B58 var_8           = dword ptr -8
.text:00002B58 var_4           = dword ptr -4
.text:00002B58 arg_0           = dword ptr  8
.text:00002B58
.text:00002B58                 push    ebp
.text:00002B59                 mov     ebp, esp
.text:00002B5B                 sub     esp, 8
.text:00002B5E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002B65                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002B6C                 mov     [ebp+var_4], ecx
.text:00002B6F                 mov     ecx, [ebp+var_4]
.text:00002B72                 call    ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition(void)
.text:00002B77                 mov     eax, [ebp+var_4]
.text:00002B7A                 mov     ecx, [eax+4]
.text:00002B7D                 mov     edx, [ebp+var_4]
.text:00002B80                 mov     eax, [edx]
.text:00002B82                 mov     edx, [ebp+arg_0]
.text:00002B85                 mov     [eax+ecx*4], edx
.text:00002B88                 mov     eax, [ebp+var_4]
.text:00002B8B                 mov     ecx, [eax+4]
.text:00002B8E                 mov     [ebp+var_8], ecx
.text:00002B91                 mov     edx, [ebp+var_4]
.text:00002B94                 mov     eax, [edx+4]
.text:00002B97                 add     eax, 1
.text:00002B9A                 mov     ecx, [ebp+var_4]
.text:00002B9D                 mov     [ecx+4], eax
.text:00002BA0                 mov     eax, [ebp+var_8]
.text:00002BA3                 add     esp, 8
.text:00002BA6                 cmp     ebp, esp
.text:00002BA8                 call    __RTC_CheckEsp
.text:00002BAD                 mov     esp, ebp
.text:00002BAF                 pop     ebp
.text:00002BB0                 retn    4
.text:00002BB0 ?Add@?$CRecordVector@PAX@@QAEIQAX@Z endp
.text:00002BB0
.text:00002BB0 ; ---------------------------------------------------------------------------
.text:00002BB3                 align 4
.text:00002BB3 _text           ends
.text:00002BB3
.text:00002BB4 ; ===========================================================================
.text:00002BB4
.text:00002BB4 ; Segment type: Pure code
.text:00002BB4 ; Segment permissions: Read/Execute
.text:00002BB4 _text           segment para public 'CODE' use32
.text:00002BB4                 assume cs:_text
.text:00002BB4                 ;org 2BB4h
.text:00002BB4 ; COMDAT (pick any)
.text:00002BB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002BB4
.text:00002BB4 ; =============== S U B R O U T I N E =======================================
.text:00002BB4
.text:00002BB4 ; Attributes: bp-based frame
.text:00002BB4
.text:00002BB4 ; public: void * & __thiscall CRecordVector<void *>::operator[](unsigned int)
.text:00002BB4                 public ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
.text:00002BB4 ??A?$CRecordVector@PAX@@QAEAAPAXI@Z proc near
.text:00002BB4                                         ; CODE XREF: CObjectVector<UString>::Clear(void)+3Ep
.text:00002BB4
.text:00002BB4 var_4           = dword ptr -4
.text:00002BB4 arg_0           = dword ptr  8
.text:00002BB4
.text:00002BB4                 push    ebp
.text:00002BB5                 mov     ebp, esp
.text:00002BB7                 push    ecx
.text:00002BB8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002BBF                 mov     [ebp+var_4], ecx
.text:00002BC2                 mov     eax, [ebp+var_4]
.text:00002BC5                 mov     ecx, [eax]
.text:00002BC7                 mov     edx, [ebp+arg_0]
.text:00002BCA                 lea     eax, [ecx+edx*4]
.text:00002BCD                 mov     esp, ebp
.text:00002BCF                 pop     ebp
.text:00002BD0                 retn    4
.text:00002BD0 ??A?$CRecordVector@PAX@@QAEAAPAXI@Z endp
.text:00002BD0
.text:00002BD0 ; ---------------------------------------------------------------------------
.text:00002BD3                 align 4
.text:00002BD3 _text           ends
.text:00002BD3
.text:00002BD4 ; ===========================================================================
.text:00002BD4
.text:00002BD4 ; Segment type: Pure code
.text:00002BD4 ; Segment permissions: Read/Execute
.text:00002BD4 _text           segment para public 'CODE' use32
.text:00002BD4                 assume cs:_text
.text:00002BD4                 ;org 2BD4h
.text:00002BD4 ; COMDAT (pick any)
.text:00002BD4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002BD4
.text:00002BD4 ; =============== S U B R O U T I N E =======================================
.text:00002BD4
.text:00002BD4 ; Attributes: bp-based frame
.text:00002BD4
.text:00002BD4 ; private: void __thiscall CRecordVector<void *>::ReserveOnePosition(void)
.text:00002BD4                 public ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ
.text:00002BD4 ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ proc near
.text:00002BD4                                         ; CODE XREF: CRecordVector<void *>::Add(void * const)+1Ap
.text:00002BD4
.text:00002BD4 var_14          = dword ptr -14h
.text:00002BD4 var_10          = dword ptr -10h
.text:00002BD4 Dst             = dword ptr -0Ch
.text:00002BD4 var_8           = dword ptr -8
.text:00002BD4 var_4           = dword ptr -4
.text:00002BD4
.text:00002BD4                 push    ebp
.text:00002BD5                 mov     ebp, esp
.text:00002BD7                 sub     esp, 14h
.text:00002BDA                 mov     eax, 0CCCCCCCCh
.text:00002BDF                 mov     [ebp+var_14], eax
.text:00002BE2                 mov     [ebp+var_10], eax
.text:00002BE5                 mov     [ebp+Dst], eax
.text:00002BE8                 mov     [ebp+var_8], eax
.text:00002BEB                 mov     [ebp+var_4], eax
.text:00002BEE                 mov     [ebp+var_4], ecx
.text:00002BF1                 mov     eax, [ebp+var_4]
.text:00002BF4                 mov     ecx, [ebp+var_4]
.text:00002BF7                 mov     edx, [eax+4]
.text:00002BFA                 cmp     edx, [ecx+8]
.text:00002BFD                 jnz     loc_2C88
.text:00002C03                 mov     eax, [ebp+var_4]
.text:00002C06                 mov     ecx, [eax+8]
.text:00002C09                 shr     ecx, 2
.text:00002C0C                 mov     edx, [ebp+var_4]
.text:00002C0F                 mov     eax, [edx+8]
.text:00002C12                 lea     ecx, [eax+ecx+1]
.text:00002C16                 mov     [ebp+var_8], ecx
.text:00002C19                 xor     ecx, ecx
.text:00002C1B                 mov     eax, [ebp+var_8]
.text:00002C1E                 mov     edx, 4
.text:00002C23                 mul     edx
.text:00002C25                 seto    cl
.text:00002C28                 neg     ecx
.text:00002C2A                 or      ecx, eax
.text:00002C2C                 push    ecx             ; unsigned int
.text:00002C2D                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00002C32                 add     esp, 4
.text:00002C35                 mov     [ebp+var_10], eax
.text:00002C38                 mov     eax, [ebp+var_10]
.text:00002C3B                 mov     [ebp+Dst], eax
.text:00002C3E                 mov     ecx, [ebp+var_4]
.text:00002C41                 cmp     dword ptr [ecx+4], 0
.text:00002C45                 jz      short loc_2C63
.text:00002C47                 mov     edx, [ebp+var_4]
.text:00002C4A                 mov     eax, [edx+4]
.text:00002C4D                 shl     eax, 2
.text:00002C50                 push    eax             ; Size
.text:00002C51                 mov     ecx, [ebp+var_4]
.text:00002C54                 mov     edx, [ecx]
.text:00002C56                 push    edx             ; Src
.text:00002C57                 mov     eax, [ebp+Dst]
.text:00002C5A                 push    eax             ; Dst
.text:00002C5B                 call    _memcpy
.text:00002C60                 add     esp, 0Ch
.text:00002C63
.text:00002C63 loc_2C63:                               ; CODE XREF: CRecordVector<void *>::ReserveOnePosition(void)+71j
.text:00002C63                 mov     ecx, [ebp+var_4]
.text:00002C66                 mov     edx, [ecx]
.text:00002C68                 mov     [ebp+var_14], edx
.text:00002C6B                 mov     eax, [ebp+var_14]
.text:00002C6E                 push    eax             ; void *
.text:00002C6F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00002C74                 add     esp, 4
.text:00002C77                 mov     ecx, [ebp+var_4]
.text:00002C7A                 mov     edx, [ebp+Dst]
.text:00002C7D                 mov     [ecx], edx
.text:00002C7F                 mov     eax, [ebp+var_4]
.text:00002C82                 mov     ecx, [ebp+var_8]
.text:00002C85                 mov     [eax+8], ecx
.text:00002C88
.text:00002C88 loc_2C88:                               ; CODE XREF: CRecordVector<void *>::ReserveOnePosition(void)+29j
.text:00002C88                 add     esp, 14h
.text:00002C8B                 cmp     ebp, esp
.text:00002C8D                 call    __RTC_CheckEsp
.text:00002C92                 mov     esp, ebp
.text:00002C94                 pop     ebp
.text:00002C95                 retn
.text:00002C95 ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ endp
.text:00002C95
.text:00002C95 ; ---------------------------------------------------------------------------
.text:00002C96                 align 4
.text:00002C96 _text           ends
.text:00002C96
.text$yc:00002C98 ; ===========================================================================
.text$yc:00002C98
.text$yc:00002C98 ; Segment type: Pure code
.text$yc:00002C98 ; Segment permissions: Read/Execute
.text$yc:00002C98 _text$yc        segment para public 'CODE' use32
.text$yc:00002C98                 assume cs:_text$yc
.text$yc:00002C98                 ;org 2C98h
.text$yc:00002C98 ; COMDAT (pick any)
.text$yc:00002C98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yc:00002C98
.text$yc:00002C98 ; =============== S U B R O U T I N E =======================================
.text$yc:00002C98
.text$yc:00002C98 ; Attributes: bp-based frame
.text$yc:00002C98
.text$yc:00002C98 ; void __cdecl NWindows::NFile::NFind::`dynamic initializer for 'g_FindStreamLoader''(void)
.text$yc:00002C98 ??__Eg_FindStreamLoader@NFind@NFile@NWindows@@YAXXZ proc near
.text$yc:00002C98                                         ; DATA XREF: .CRT$XCU:_g_FindStreamLoader$initializer$o
.text$yc:00002C98                 push    ebp
.text$yc:00002C99                 mov     ebp, esp
.text$yc:00002C9B                 mov     ecx, offset ?g_FindStreamLoader@NFind@NFile@NWindows@@3UCFindStreamLoader@123@A ; this
.text$yc:00002CA0                 call    ??0CFindStreamLoader@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFindStreamLoader::CFindStreamLoader(void)
.text$yc:00002CA5                 cmp     ebp, esp
.text$yc:00002CA7                 call    __RTC_CheckEsp
.text$yc:00002CAC                 pop     ebp
.text$yc:00002CAD                 retn
.text$yc:00002CAD ??__Eg_FindStreamLoader@NFind@NFile@NWindows@@YAXXZ endp
.text$yc:00002CAD
.text$yc:00002CAD ; ---------------------------------------------------------------------------
.text$yc:00002CAE                 align 10h
.text$yc:00002CAE _text$yc        ends
.text$yc:00002CAE
.text:00002CB0 ; ===========================================================================
.text:00002CB0
.text:00002CB0 ; Segment type: Pure code
.text:00002CB0 ; Segment permissions: Read/Execute
.text:00002CB0 _text           segment para public 'CODE' use32
.text:00002CB0                 assume cs:_text
.text:00002CB0                 ;org 2CB0h
.text:00002CB0 ; COMDAT (pick any)
.text:00002CB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002CB0
.text:00002CB0 ; =============== S U B R O U T I N E =======================================
.text:00002CB0
.text:00002CB0 ; Attributes: bp-based frame
.text:00002CB0
.text:00002CB0 ; _DWORD __thiscall NWindows::NFile::NFind::CFindStreamLoader::CFindStreamLoader(NWindows::NFile::NFind::CFindStreamLoader *__hidden this)
.text:00002CB0                 public ??0CFindStreamLoader@NFind@NFile@NWindows@@QAE@XZ
.text:00002CB0 ??0CFindStreamLoader@NFind@NFile@NWindows@@QAE@XZ proc near
.text:00002CB0                                         ; CODE XREF: NWindows::NFile::NFind::`dynamic initializer for 'g_FindStreamLoader''(void)+8p
.text:00002CB0
.text:00002CB0 var_4           = dword ptr -4
.text:00002CB0
.text:00002CB0                 push    ebp
.text:00002CB1                 mov     ebp, esp
.text:00002CB3                 push    ecx
.text:00002CB4                 push    esi
.text:00002CB5                 push    edi
.text:00002CB6                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002CBD                 mov     [ebp+var_4], ecx
.text:00002CC0                 mov     esi, esp
.text:00002CC2                 push    offset ??_C@_0BB@EOFBAKLA@FindFirstStreamW?$AA@ ; "FindFirstStreamW"
.text:00002CC7                 mov     edi, esp
.text:00002CC9                 push    offset ??_C@_0N@MDJJJHMB@kernel32?4dll?$AA@ ; "kernel32.dll"
.text:00002CCE                 call    dword ptr ds:__imp__GetModuleHandleA@4 ; GetModuleHandleA(x)
.text:00002CD4                 cmp     edi, esp
.text:00002CD6                 call    __RTC_CheckEsp
.text:00002CDB                 push    eax             ; hModule
.text:00002CDC                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:00002CE2                 cmp     esi, esp
.text:00002CE4                 call    __RTC_CheckEsp
.text:00002CE9                 mov     ds:_g_FindFirstStreamW, eax
.text:00002CEE                 mov     esi, esp
.text:00002CF0                 push    offset ??_C@_0BA@IBDCENBE@FindNextStreamW?$AA@ ; "FindNextStreamW"
.text:00002CF5                 mov     edi, esp
.text:00002CF7                 push    offset ??_C@_0N@MDJJJHMB@kernel32?4dll?$AA@ ; "kernel32.dll"
.text:00002CFC                 call    dword ptr ds:__imp__GetModuleHandleA@4 ; GetModuleHandleA(x)
.text:00002D02                 cmp     edi, esp
.text:00002D04                 call    __RTC_CheckEsp
.text:00002D09                 push    eax             ; hModule
.text:00002D0A                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:00002D10                 cmp     esi, esp
.text:00002D12                 call    __RTC_CheckEsp
.text:00002D17                 mov     ds:_g_FindNextStreamW, eax
.text:00002D1C                 mov     eax, [ebp+var_4]
.text:00002D1F                 pop     edi
.text:00002D20                 pop     esi
.text:00002D21                 add     esp, 4
.text:00002D24                 cmp     ebp, esp
.text:00002D26                 call    __RTC_CheckEsp
.text:00002D2B                 mov     esp, ebp
.text:00002D2D                 pop     ebp
.text:00002D2E                 retn
.text:00002D2E ??0CFindStreamLoader@NFind@NFile@NWindows@@QAE@XZ endp
.text:00002D2E
.text:00002D2E ; ---------------------------------------------------------------------------
.text:00002D2F                 align 10h
.text:00002D2F _text           ends
.text:00002D2F
.rdata:00002D30 ; ===========================================================================
.rdata:00002D30
.rdata:00002D30 ; Segment type: Pure data
.rdata:00002D30 ; Segment permissions: Read
.rdata:00002D30 _rdata          segment dword public 'DATA' use32
.rdata:00002D30                 assume cs:_rdata
.rdata:00002D30                 ;org 2D30h
.rdata:00002D30 ; COMDAT (pick any)
.rdata:00002D30                 public ??_C@_0BA@IBDCENBE@FindNextStreamW?$AA@
.rdata:00002D30 ; CHAR `string'[]
.rdata:00002D30 ??_C@_0BA@IBDCENBE@FindNextStreamW?$AA@ db 'FindNextStreamW',0
.rdata:00002D30                                         ; DATA XREF: NWindows::NFile::NFind::CFindStreamLoader::CFindStreamLoader(void)+40o
.rdata:00002D30 _rdata          ends
.rdata:00002D30
.rdata:00002D40 ; ===========================================================================
.rdata:00002D40
.rdata:00002D40 ; Segment type: Pure data
.rdata:00002D40 ; Segment permissions: Read
.rdata:00002D40 _rdata          segment dword public 'DATA' use32
.rdata:00002D40                 assume cs:_rdata
.rdata:00002D40                 ;org 2D40h
.rdata:00002D40 ; COMDAT (pick any)
.rdata:00002D40                 public ??_C@_0N@MDJJJHMB@kernel32?4dll?$AA@
.rdata:00002D40 ; CHAR `string'[]
.rdata:00002D40 ??_C@_0N@MDJJJHMB@kernel32?4dll?$AA@ db 'kernel32.dll',0
.rdata:00002D40                                         ; DATA XREF: NWindows::NFile::NFind::CFindStreamLoader::CFindStreamLoader(void)+19o
.rdata:00002D40                                         ; NWindows::NFile::NFind::CFindStreamLoader::CFindStreamLoader(void)+47o
.rdata:00002D4D                 align 10h
.rdata:00002D4D _rdata          ends
.rdata:00002D4D
.rdata:00002D50 ; ===========================================================================
.rdata:00002D50
.rdata:00002D50 ; Segment type: Pure data
.rdata:00002D50 ; Segment permissions: Read
.rdata:00002D50 _rdata          segment dword public 'DATA' use32
.rdata:00002D50                 assume cs:_rdata
.rdata:00002D50                 ;org 2D50h
.rdata:00002D50 ; COMDAT (pick any)
.rdata:00002D50                 public ??_C@_0BB@EOFBAKLA@FindFirstStreamW?$AA@
.rdata:00002D50 ; CHAR `string'[]
.rdata:00002D50 ??_C@_0BB@EOFBAKLA@FindFirstStreamW?$AA@ db 'FindFirstStreamW',0
.rdata:00002D50                                         ; DATA XREF: NWindows::NFile::NFind::CFindStreamLoader::CFindStreamLoader(void)+12o
.rdata:00002D61                 align 4
.rdata:00002D61 _rdata          ends
.rdata:00002D61
.CRT$XCU:00002D64 ; ===========================================================================
.CRT$XCU:00002D64
.CRT$XCU:00002D64 ; Segment type: Pure data
.CRT$XCU:00002D64 ; Segment permissions: Read
.CRT$XCU:00002D64 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00002D64                 assume cs:_CRT$XCU
.CRT$XCU:00002D64                 ;org 2D64h
.CRT$XCU:00002D64 _g_FindStreamLoader$initializer$ dd offset ??__Eg_FindStreamLoader@NFind@NFile@NWindows@@YAXXZ ; NWindows::NFile::NFind::`dynamic initializer for 'g_FindStreamLoader''(void)
.CRT$XCU:00002D64 _CRT$XCU        ends
.CRT$XCU:00002D64
UNDEF:00002D70 ; ===========================================================================
UNDEF:00002D70
UNDEF:00002D70 ; Segment type: Externs
UNDEF:00002D70 ; UNDEF
UNDEF:00002D70                 extrn __RTC_CheckEsp:near
UNDEF:00002D70                                         ; CODE XREF: NWindows::NFile::NFind::CFileInfo::IsDots(void)+9Fp
UNDEF:00002D70                                         ; NWindows::NFile::NFind::CFindFileBase::Close(void)+2Bp ...
UNDEF:00002D74                 extrn __RTC_Shutdown:near
UNDEF:00002D74                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00002D78                 extrn __RTC_InitBase:near
UNDEF:00002D78                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00002D7C ; BOOL __stdcall FindClose(HANDLE hFindFile)
UNDEF:00002D7C                 extrn __imp__FindClose@4:near
UNDEF:00002D7C                                         ; CODE XREF: NWindows::NFile::NFind::CFindFileBase::Close(void)+23p
UNDEF:00002D7C                                         ; DATA XREF: NWindows::NFile::NFind::CFindFileBase::Close(void)+23r
UNDEF:00002D80 ; HANDLE __stdcall FindFirstFileW(LPCWSTR lpFileName, LPWIN32_FIND_DATAW lpFindFileData)
UNDEF:00002D80                 extrn __imp__FindFirstFileW@8:near
UNDEF:00002D80                                         ; CODE XREF: NWindows::NFile::NFind::CFindFile::FindFirst(wchar_t const *,NWindows::NFile::NFind::CFileInfo &)+F6p
UNDEF:00002D80                                         ; DATA XREF: NWindows::NFile::NFind::CFindFile::FindFirst(wchar_t const *,NWindows::NFile::NFind::CFileInfo &)+F6r
UNDEF:00002D84 ; HANDLE __stdcall FindFirstFileA(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
UNDEF:00002D84                 extrn __imp__FindFirstFileA@8:near
UNDEF:00002D84                                         ; CODE XREF: NWindows::NFile::NFind::CFindFile::FindFirst(wchar_t const *,NWindows::NFile::NFind::CFileInfo &)+A7p
UNDEF:00002D84                                         ; DATA XREF: NWindows::NFile::NFind::CFindFile::FindFirst(wchar_t const *,NWindows::NFile::NFind::CFileInfo &)+A7r
UNDEF:00002D88 ; struct AString __stdcall __high fs2fas(const wchar_t *)
UNDEF:00002D88                 extrn ?fs2fas@@YG?AVAString@@PB_W@Z:near
UNDEF:00002D88                                         ; CODE XREF: NWindows::NFile::NFind::CFindFile::FindFirst(wchar_t const *,NWindows::NFile::NFind::CFileInfo &)+7Dp
UNDEF:00002D88                                         ; NWindows::NFile::NFind::GetFileAttrib(wchar_t const *)+53p ...
UNDEF:00002D8C ; bool g_IsNT
UNDEF:00002D8C                 extrn ?g_IsNT@@3_NA:near
UNDEF:00002D8C                                         ; DATA XREF: NWindows::NFile::NFind::CFindFile::FindFirst(wchar_t const *,NWindows::NFile::NFind::CFileInfo &):loc_196r
UNDEF:00002D8C                                         ; NWindows::NFile::NFind::CFindFile::FindNext(NWindows::NFile::NFind::CFileInfo &)+2Cr ...
UNDEF:00002D90                 extrn ___security_cookie:near
UNDEF:00002D90                                         ; DATA XREF: NWindows::NFile::NFind::CFindFile::FindFirst(wchar_t const *,NWindows::NFile::NFind::CFileInfo &)+2Dr
UNDEF:00002D90                                         ; NWindows::NFile::NFind::Convert_WIN32_FIND_DATA_to_FileInfo(_WIN32_FIND_DATAA const &,NWindows::NFile::NFind::CFileInfo &)+32r ...
UNDEF:00002D94                 extrn ___CxxFrameHandler3:near
UNDEF:00002D94                                         ; CODE XREF: __ehhandler$?FindFirst@CFindFile@NFind@NFile@NWindows@@QAE_NPB_WAAUCFileInfo@234@@Z+23j
UNDEF:00002D94                                         ; __ehhandler$?Convert_WIN32_FIND_DATA_to_FileInfo@NFind@NFile@NWindows@@YGXABU_WIN32_FIND_DATAA@@AAUCFileInfo@123@@Z+16j ...
UNDEF:00002D98 ; __fastcall __security_check_cookie(x)
UNDEF:00002D98                 extrn @__security_check_cookie@4:near
UNDEF:00002D98                                         ; CODE XREF: NWindows::NFile::NFind::CFindFile::FindFirst(wchar_t const *,NWindows::NFile::NFind::CFileInfo &)+149p
UNDEF:00002D98                                         ; NWindows::NFile::NFind::CFindFile::FindNext(NWindows::NFile::NFind::CFileInfo &)+BBp ...
UNDEF:00002D9C ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00002D9C                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00002D9C                                         ; CODE XREF: NWindows::NFile::NFind::CFindFile::FindFirst(wchar_t const *,NWindows::NFile::NFind::CFileInfo &)+130p
UNDEF:00002D9C                                         ; NWindows::NFile::NFind::CFindFile::FindNext(NWindows::NFile::NFind::CFileInfo &)+ADp ...
UNDEF:00002DA0 ; void __cdecl operator delete(void *)
UNDEF:00002DA0                 extrn ??3@YAXPAX@Z:near ; CODE XREF: AString::~AString(void)+23p
UNDEF:00002DA0                                         ; UString::~UString(void)+23p ...
UNDEF:00002DA4 ; public: class UString & __thiscall UString::operator=(wchar_t const *)
UNDEF:00002DA4                 extrn ??4UString@@QAEAAV0@PB_W@Z:near
UNDEF:00002DA4                                         ; CODE XREF: NWindows::NFile::NFind::Convert_WIN32_FIND_DATA_to_FileInfo(_WIN32_FIND_DATAW const &,NWindows::NFile::NFind::CFileInfo &)+83p
UNDEF:00002DA4                                         ; NWindows::NFile::NFind::Convert_WIN32_FIND_STREAM_DATA_to_StreamInfo(MY_WIN32_FIND_STREAM_DATA const &,NWindows::NFile::NFind::CStreamInfo &)+1Ep ...
UNDEF:00002DA8                 extrn __allshl:near     ; CODE XREF: NWindows::NFile::NFind::Convert_WIN32_FIND_DATA_to_FileInfo(_WIN32_FIND_DATAW const &,NWindows::NFile::NFind::CFileInfo &)+4Fp
UNDEF:00002DA8                                         ; NWindows::NFile::NFind::Convert_WIN32_FIND_DATA_to_FileInfo(_WIN32_FIND_DATAA const &,NWindows::NFile::NFind::CFileInfo &)+8Ep
UNDEF:00002DAC ; public: class UString & __thiscall UString::operator=(class UString const &)
UNDEF:00002DAC                 extrn ??4UString@@QAEAAV0@ABV0@@Z:near
UNDEF:00002DAC                                         ; CODE XREF: NWindows::NFile::NFind::Convert_WIN32_FIND_DATA_to_FileInfo(_WIN32_FIND_DATAA const &,NWindows::NFile::NFind::CFileInfo &)+EFp
UNDEF:00002DAC                                         ; NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+26Ep
UNDEF:00002DB0 ; struct UString __stdcall __high fas2fs(const struct AString *)
UNDEF:00002DB0                 extrn ?fas2fs@@YG?AVUString@@ABVAString@@@Z:near
UNDEF:00002DB0                                         ; CODE XREF: NWindows::NFile::NFind::Convert_WIN32_FIND_DATA_to_FileInfo(_WIN32_FIND_DATAA const &,NWindows::NFile::NFind::CFileInfo &)+D3p
UNDEF:00002DB0                                         ; NWindows::NFile::NFind::MyGetLogicalDriveStrings(CObjectVector<UString> &)+13Bp
UNDEF:00002DB4 ; _DWORD __thiscall AString::AString(AString *__hidden this, const char *)
UNDEF:00002DB4                 extrn ??0AString@@QAE@PBD@Z:near
UNDEF:00002DB4                                         ; CODE XREF: NWindows::NFile::NFind::Convert_WIN32_FIND_DATA_to_FileInfo(_WIN32_FIND_DATAA const &,NWindows::NFile::NFind::CFileInfo &)+BFp
UNDEF:00002DB8 ; BOOL __stdcall FindNextFileW(HANDLE hFindFile, LPWIN32_FIND_DATAW lpFindFileData)
UNDEF:00002DB8                 extrn __imp__FindNextFileW@8:near
UNDEF:00002DB8                                         ; CODE XREF: NWindows::NFile::NFind::CFindFile::FindNext(NWindows::NFile::NFind::CFileInfo &)+7Cp
UNDEF:00002DB8                                         ; DATA XREF: NWindows::NFile::NFind::CFindFile::FindNext(NWindows::NFile::NFind::CFileInfo &)+7Cr
UNDEF:00002DBC ; BOOL __stdcall FindNextFileA(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
UNDEF:00002DBC                 extrn __imp__FindNextFileA@8:near
UNDEF:00002DBC                                         ; CODE XREF: NWindows::NFile::NFind::CFindFile::FindNext(NWindows::NFile::NFind::CFileInfo &)+46p
UNDEF:00002DBC                                         ; DATA XREF: NWindows::NFile::NFind::CFindFile::FindNext(NWindows::NFile::NFind::CFileInfo &)+46r
UNDEF:00002DC0 ; bool __stdcall StringsAreEqualNoCase_Ascii(const wchar_t *, const char *)
UNDEF:00002DC0                 extrn ?StringsAreEqualNoCase_Ascii@@YG_NPB_WPBD@Z:near
UNDEF:00002DC0                                         ; CODE XREF: NWindows::NFile::NFind::CStreamInfo::IsMainStream(void)+1Cp
UNDEF:00002DC0                                         ; NWindows::NFile::NFind::CStreamInfo::GetReducedName(void)+79p ...
UNDEF:00002DC4 ; public: __thiscall UString::UString(class UString const &)
UNDEF:00002DC4                 extrn ??0UString@@QAE@ABV0@@Z:near
UNDEF:00002DC4                                         ; CODE XREF: NWindows::NFile::NFind::CStreamInfo::GetReducedName(void)+50p
UNDEF:00002DC4                                         ; NWindows::NFile::NFind::CStreamInfo::GetReducedName(void)+A0p ...
UNDEF:00002DC8 ; DWORD __stdcall GetLastError()
UNDEF:00002DC8                 extrn __imp__GetLastError@0:near
UNDEF:00002DC8                                         ; CODE XREF: NWindows::NFile::NFind::CFindStream::FindFirst(wchar_t const *,NWindows::NFile::NFind::CStreamInfo &)+9Ep
UNDEF:00002DC8                                         ; NWindows::NFile::NFind::CStreamEnumerator::Next(NWindows::NFile::NFind::CStreamInfo &,bool &)+6Dp ...
UNDEF:00002DCC ; void __stdcall SetLastError(DWORD dwErrCode)
UNDEF:00002DCC                 extrn __imp__SetLastError@4:near
UNDEF:00002DCC                                         ; CODE XREF: NWindows::NFile::NFind::CFindStream::FindFirst(wchar_t const *,NWindows::NFile::NFind::CStreamInfo &)+4Fp
UNDEF:00002DCC                                         ; NWindows::NFile::NFind::CFindStream::FindFirst(wchar_t const *,NWindows::NFile::NFind::CStreamInfo &)+64p ...
UNDEF:00002DD0 ; DWORD __stdcall GetFileAttributesW(LPCWSTR lpFileName)
UNDEF:00002DD0                 extrn __imp__GetFileAttributesW@4:near
UNDEF:00002DD0                                         ; CODE XREF: NWindows::NFile::NFind::GetFileAttrib(wchar_t const *)+9Fp
UNDEF:00002DD0                                         ; DATA XREF: NWindows::NFile::NFind::GetFileAttrib(wchar_t const *)+9Fr
UNDEF:00002DD4 ; DWORD __stdcall GetFileAttributesA(LPCSTR lpFileName)
UNDEF:00002DD4                 extrn __imp__GetFileAttributesA@4:near
UNDEF:00002DD4                                         ; CODE XREF: NWindows::NFile::NFind::GetFileAttrib(wchar_t const *)+73p
UNDEF:00002DD4                                         ; DATA XREF: NWindows::NFile::NFind::GetFileAttrib(wchar_t const *)+73r
UNDEF:00002DD8 ; int NWindows::NFile::NName::FindSepar(NWindows::NFile::NName *__hidden this, const wchar_t *)
UNDEF:00002DD8                 extrn ?FindSepar@NName@NFile@NWindows@@YGHPB_W@Z:near
UNDEF:00002DD8                                         ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+6EBp
UNDEF:00002DDC ; unsigned int NWindows::NFile::NName::GetNetworkServerPrefixSize(NWindows::NFile::NName *__hidden this, const wchar_t *)
UNDEF:00002DDC                 extrn ?GetNetworkServerPrefixSize@NName@NFile@NWindows@@YGIPB_W@Z:near
UNDEF:00002DDC                                         ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+6B1p
UNDEF:00002DE0 ; bool NWindows::NFile::NName::IsDrivePath(NWindows::NFile::NName *__hidden this, const wchar_t *)
UNDEF:00002DE0                 extrn ?IsDrivePath@NName@NFile@NWindows@@YG_NPB_W@Z:near
UNDEF:00002DE0                                         ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+602p
UNDEF:00002DE4 ; bool NWindows::NFile::NName::IsSuperPath(NWindows::NFile::NName *__hidden this, const wchar_t *)
UNDEF:00002DE4                 extrn ?IsSuperPath@NName@NFile@NWindows@@YG_NPB_W@Z:near
UNDEF:00002DE4                                         ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+553p
UNDEF:00002DE8 ; public: class UString & __thiscall UString::operator+=(class UString const &)
UNDEF:00002DE8                 extrn ??YUString@@QAEAAV0@ABV0@@Z:near
UNDEF:00002DE8                                         ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+412p
UNDEF:00002DEC ; public: class UString & __thiscall UString::operator+=(wchar_t const *)
UNDEF:00002DEC                 extrn ??YUString@@QAEAAV0@PB_W@Z:near
UNDEF:00002DEC                                         ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+204p
UNDEF:00002DF0 ; public: __thiscall UString::UString(wchar_t const *)
UNDEF:00002DF0                 extrn ??0UString@@QAE@PB_W@Z:near
UNDEF:00002DF0                                         ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+19Bp
UNDEF:00002DF0                                         ; NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+1B1p ...
UNDEF:00002DF4 ; int NWindows::NFile::NName::FindAltStreamColon(NWindows::NFile::NName *__hidden this, const wchar_t *)
UNDEF:00002DF4                 extrn ?FindAltStreamColon@NName@NFile@NWindows@@YGHPB_W@Z:near
UNDEF:00002DF4                                         ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+169p
UNDEF:00002DF8 ; bool __thiscall NWindows::NFile::NIO::CInFile::Open(NWindows::NFile::NIO::CInFile *__hidden this, const wchar_t *)
UNDEF:00002DF8                 extrn ?Open@CInFile@NIO@NFile@NWindows@@QAE_NPB_W@Z:near
UNDEF:00002DF8                                         ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+101p
UNDEF:00002DFC ; bool NWindows::NFile::NSystem::MyGetDiskFreeSpace(NWindows::NFile::NSystem *__hidden this, const wchar_t *, unsigned __int64 *, unsigned __int64 *, unsigned __int64 *)
UNDEF:00002DFC                 extrn ?MyGetDiskFreeSpace@NSystem@NFile@NWindows@@YG_NPB_WAA_K11@Z:near
UNDEF:00002DFC                                         ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+CAp
UNDEF:00002E00 ; bool NWindows::NFile::NName::IsDrivePath2(NWindows::NFile::NName *__hidden this, const wchar_t *)
UNDEF:00002E00                 extrn ?IsDrivePath2@NName@NFile@NWindows@@YG_NPB_W@Z:near
UNDEF:00002E00                                         ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+80p
UNDEF:00002E00                                         ; NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+21Cp
UNDEF:00002E04 ; bool NWindows::NFile::NName::IsDevicePath(NWindows::NFile::NName *__hidden this, const wchar_t *)
UNDEF:00002E04                 extrn ?IsDevicePath@NName@NFile@NWindows@@YG_NPB_W@Z:near
UNDEF:00002E04                                         ; CODE XREF: NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)+48p
UNDEF:00002E08 ; void __thiscall UString::Grow_1(UString *__hidden this)
UNDEF:00002E08                 extrn ?Grow_1@UString@@AAEXXZ:near
UNDEF:00002E08                                         ; CODE XREF: UString::operator+=(wchar_t)+2Fp
UNDEF:00002E0C ; bool __stdcall StringsAreEqualNoCase(const wchar_t *, const wchar_t *)
UNDEF:00002E0C                 extrn ?StringsAreEqualNoCase@@YG_NPB_W0@Z:near
UNDEF:00002E0C                                         ; CODE XREF: UString::IsEqualTo_NoCase(wchar_t const *)+18p
UNDEF:00002E10 ; int __cdecl _wcscmp(const wchar_t *Str1, const wchar_t *Str2)
UNDEF:00002E10                 extrn __imp__wcscmp:near
UNDEF:00002E10                                         ; CODE XREF: operator==(UString const &,wchar_t const *)+13p
UNDEF:00002E10                                         ; DATA XREF: operator==(UString const &,wchar_t const *)+13r
UNDEF:00002E14 ; bool __thiscall NWindows::NFile::NIO::CFileBase::Close(NWindows::NFile::NIO::CFileBase *__hidden this)
UNDEF:00002E14                 extrn ?Close@CFileBase@NIO@NFile@NWindows@@QAE_NXZ:near
UNDEF:00002E14                                         ; CODE XREF: NWindows::NFile::NIO::CFileBase::~CFileBase(void)+11p
UNDEF:00002E18 ; public: __thiscall UString::UString(void)
UNDEF:00002E18                 extrn ??0UString@@QAE@XZ:near
UNDEF:00002E18                                         ; CODE XREF: NWindows::NFile::NFind::MyGetLogicalDriveStrings(CObjectVector<UString> &)+22Dp
UNDEF:00002E18                                         ; NWindows::NFile::NFind::CStreamInfo::CStreamInfo(void)+11p ...
UNDEF:00002E1C ; BOOL __stdcall FindCloseChangeNotification(HANDLE hChangeHandle)
UNDEF:00002E1C                 extrn __imp__FindCloseChangeNotification@4:near
UNDEF:00002E1C                                         ; CODE XREF: NWindows::NFile::NFind::CFindChangeNotification::Close(void)+2Ap
UNDEF:00002E1C                                         ; DATA XREF: NWindows::NFile::NFind::CFindChangeNotification::Close(void)+2Ar
UNDEF:00002E20 ; HANDLE __stdcall FindFirstChangeNotificationW(LPCWSTR lpPathName, BOOL bWatchSubtree, DWORD dwNotifyFilter)
UNDEF:00002E20                 extrn __imp__FindFirstChangeNotificationW@12:near
UNDEF:00002E20                                         ; CODE XREF: NWindows::NFile::NFind::CFindChangeNotification::FindFirst(wchar_t const *,bool,ulong)+BAp
UNDEF:00002E20                                         ; DATA XREF: NWindows::NFile::NFind::CFindChangeNotification::FindFirst(wchar_t const *,bool,ulong)+BAr
UNDEF:00002E24 ; HANDLE __stdcall FindFirstChangeNotificationA(LPCSTR lpPathName, BOOL bWatchSubtree, DWORD dwNotifyFilter)
UNDEF:00002E24                 extrn __imp__FindFirstChangeNotificationA@12:near
UNDEF:00002E24                                         ; CODE XREF: NWindows::NFile::NFind::CFindChangeNotification::FindFirst(wchar_t const *,bool,ulong)+82p
UNDEF:00002E24                                         ; DATA XREF: NWindows::NFile::NFind::CFindChangeNotification::FindFirst(wchar_t const *,bool,ulong)+82r
UNDEF:00002E28 ; DWORD __stdcall GetLogicalDriveStringsW(DWORD nBufferLength, LPWSTR lpBuffer)
UNDEF:00002E28                 extrn __imp__GetLogicalDriveStringsW@8:near
UNDEF:00002E28                                         ; CODE XREF: NWindows::NFile::NFind::MyGetLogicalDriveStrings(CObjectVector<UString> &)+1B2p
UNDEF:00002E28                                         ; NWindows::NFile::NFind::MyGetLogicalDriveStrings(CObjectVector<UString> &)+1F1p
UNDEF:00002E28                                         ; DATA XREF: ...
UNDEF:00002E2C ; public: class AString & __thiscall AString::operator=(char const *)
UNDEF:00002E2C                 extrn ??4AString@@QAEAAV0@PBD@Z:near
UNDEF:00002E2C                                         ; CODE XREF: NWindows::NFile::NFind::MyGetLogicalDriveStrings(CObjectVector<UString> &)+125p
UNDEF:00002E30 ; public: __thiscall AString::AString(void)
UNDEF:00002E30                 extrn ??0AString@@QAE@XZ:near
UNDEF:00002E30                                         ; CODE XREF: NWindows::NFile::NFind::MyGetLogicalDriveStrings(CObjectVector<UString> &)+D9p
UNDEF:00002E34 ; DWORD __stdcall GetLogicalDriveStringsA(DWORD nBufferLength, LPSTR lpBuffer)
UNDEF:00002E34                 extrn __imp__GetLogicalDriveStringsA@8:near
UNDEF:00002E34                                         ; CODE XREF: NWindows::NFile::NFind::MyGetLogicalDriveStrings(CObjectVector<UString> &)+5Ep
UNDEF:00002E34                                         ; NWindows::NFile::NFind::MyGetLogicalDriveStrings(CObjectVector<UString> &)+9Dp
UNDEF:00002E34                                         ; DATA XREF: ...
UNDEF:00002E38 ; void *__cdecl operator new(unsigned int)
UNDEF:00002E38                 extrn ??2@YAPAXI@Z:near ; CODE XREF: CObjectVector<UString>::Add(UString const &)+3Bp
UNDEF:00002E38                                         ; CObjArray<char>::CObjArray<char>(uint)+2Ap ...
UNDEF:00002E3C ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:00002E3C                 extrn _memcpy:near      ; CODE XREF: CRecordVector<void *>::ReserveOnePosition(void)+87p
UNDEF:00002E40 ; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
UNDEF:00002E40                 extrn __imp__GetProcAddress@8:near
UNDEF:00002E40                                         ; CODE XREF: NWindows::NFile::NFind::CFindStreamLoader::CFindStreamLoader(void)+2Cp
UNDEF:00002E40                                         ; NWindows::NFile::NFind::CFindStreamLoader::CFindStreamLoader(void)+5Ap
UNDEF:00002E40                                         ; DATA XREF: ...
UNDEF:00002E44 ; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
UNDEF:00002E44                 extrn __imp__GetModuleHandleA@4:near
UNDEF:00002E44                                         ; CODE XREF: NWindows::NFile::NFind::CFindStreamLoader::CFindStreamLoader(void)+1Ep
UNDEF:00002E44                                         ; NWindows::NFile::NFind::CFindStreamLoader::CFindStreamLoader(void)+4Cp
UNDEF:00002E44                                         ; DATA XREF: ...
UNDEF:00002E44
UNDEF:00002E44