.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : 29A4709A6A890A4314AD1E2BD95901AC
.rdata:00000000 ; Input CRC32 : 08B35D60
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\UpdateCallback.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 _rdata          segment dword public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 $SG76007:                               ; DATA XREF: GetRelativePath(UString const &,UString const &)+171o
.rdata:00000000                 unicode 0, <..\>,0
.rdata:00000008 $SG76267        db    0                 ; DATA XREF: CArchiveUpdateCallback::ReportOperation(uint,uint,uint)+341o
.rdata:00000009                 db    0
.rdata:0000000A                 align 4
.rdata:0000000A _rdata          ends
.rdata:0000000A
.text:0000000C ; ===========================================================================
.text:0000000C
.text:0000000C ; Segment type: Pure code
.text:0000000C ; Segment permissions: Read/Execute
.text:0000000C _text           segment para public 'CODE' use32
.text:0000000C                 assume cs:_text
.text:0000000C                 ;org 0Ch
.text:0000000C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000000C
.text:0000000C ; =============== S U B R O U T I N E =======================================
.text:0000000C
.text:0000000C ; Attributes: bp-based frame
.text:0000000C
.text:0000000C ; public: __thiscall CArchiveUpdateCallback::CArchiveUpdateCallback(void)
.text:0000000C                 public ??0CArchiveUpdateCallback@@QAE@XZ
.text:0000000C ??0CArchiveUpdateCallback@@QAE@XZ proc near
.text:0000000C
.text:0000000C var_10          = dword ptr -10h
.text:0000000C var_C           = dword ptr -0Ch
.text:0000000C var_4           = dword ptr -4
.text:0000000C
.text:0000000C                 push    ebp
.text:0000000D                 mov     ebp, esp
.text:0000000F                 push    0FFFFFFFFh
.text:00000011                 push    offset __ehhandler$??0CArchiveUpdateCallback@@QAE@XZ
.text:00000016                 mov     eax, large fs:0
.text:0000001C                 push    eax
.text:0000001D                 push    ecx
.text:0000001E
.text:0000001E loc_1E:                                 ; DATA XREF: .rdata$r:000040C0o
.text:0000001E                                         ; .rdata$r:00004138o
.text:0000001E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000025                 mov     eax, dword ptr ds:___security_cookie
.text:0000002A                 xor     eax, ebp
.text:0000002C                 push    eax
.text:0000002D                 lea     eax, [ebp+var_C]
.text:00000030                 mov     large fs:0, eax
.text:00000036                 mov     [ebp+var_10], ecx
.text:00000039                 mov     ecx, [ebp+var_10] ; this
.text:0000003C
.text:0000003C loc_3C:                                 ; DATA XREF: .xdata$x:__catchsym$?SetTotal@CArchiveUpdateCallback@@UAGJ_K@Z$2o
.text:0000003C                                         ; .xdata$x:__catchsym$?SetCompleted@CArchiveUpdateCallback@@UAGJPB_K@Z$2o ...
.text:0000003C                 call    ??0IArchiveUpdateCallback2@@QAE@XZ ; IArchiveUpdateCallback2::IArchiveUpdateCallback2(void)
.text:00000041                 mov     ecx, [ebp+var_10]
.text:00000044                 add     ecx, 4          ; this
.text:00000047                 call    ??0IArchiveUpdateCallbackFile@@QAE@XZ ; IArchiveUpdateCallbackFile::IArchiveUpdateCallbackFile(void)
.text:0000004C                 mov     ecx, [ebp+var_10]
.text:0000004F                 add     ecx, 8          ; this
.text:00000052                 call    ??0IArchiveExtractCallbackMessage@@QAE@XZ ; IArchiveExtractCallbackMessage::IArchiveExtractCallbackMessage(void)
.text:00000057                 mov     ecx, [ebp+var_10]
.text:0000005A                 add     ecx, 0Ch        ; this
.text:0000005D                 call    ??0IArchiveGetRawProps@@QAE@XZ ; IArchiveGetRawProps::IArchiveGetRawProps(void)
.text:00000062                 mov     ecx, [ebp+var_10]
.text:00000065                 add     ecx, 10h        ; this
.text:00000068                 call    ??0IArchiveGetRootProps@@QAE@XZ ; IArchiveGetRootProps::IArchiveGetRootProps(void)
.text:0000006D                 mov     ecx, [ebp+var_10]
.text:00000070                 add     ecx, 14h        ; this
.text:00000073                 call    ??0ICryptoGetTextPassword2@@QAE@XZ ; ICryptoGetTextPassword2::ICryptoGetTextPassword2(void)
.text:00000078                 mov     ecx, [ebp+var_10]
.text:0000007B                 add     ecx, 18h        ; this
.text:0000007E                 call    ??0ICryptoGetTextPassword@@QAE@XZ ; ICryptoGetTextPassword::ICryptoGetTextPassword(void)
.text:00000083                 mov     ecx, [ebp+var_10]
.text:00000086                 add     ecx, 1Ch        ; this
.text:00000089                 call    ??0ICompressProgressInfo@@QAE@XZ ; ICompressProgressInfo::ICompressProgressInfo(void)
.text:0000008E                 mov     ecx, [ebp+var_10]
.text:00000091                 add     ecx, 20h ; ' '  ; this
.text:00000094                 call    ??0IInFileStream_Callback@@QAE@XZ ; IInFileStream_Callback::IInFileStream_Callback(void)
.text:00000099                 mov     ecx, [ebp+var_10]
.text:0000009C                 add     ecx, 24h ; '$'  ; this
.text:0000009F                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:000000A4                 mov     eax, [ebp+var_10]
.text:000000A7                 mov     dword ptr [eax], offset ??_7CArchiveUpdateCallback@@6BIArchiveUpdateCallback2@@@ ; const CArchiveUpdateCallback::`vftable'{for `IArchiveUpdateCallback2'}
.text:000000AD                 mov     ecx, [ebp+var_10]
.text:000000B0                 mov     dword ptr [ecx+4], offset ??_7CArchiveUpdateCallback@@6BIArchiveUpdateCallbackFile@@@ ; const CArchiveUpdateCallback::`vftable'{for `IArchiveUpdateCallbackFile'}
.text:000000B7                 mov     edx, [ebp+var_10]
.text:000000BA                 mov     dword ptr [edx+8], offset ??_7CArchiveUpdateCallback@@6BIArchiveExtractCallbackMessage@@@ ; const CArchiveUpdateCallback::`vftable'{for `IArchiveExtractCallbackMessage'}
.text:000000C1                 mov     eax, [ebp+var_10]
.text:000000C4                 mov     dword ptr [eax+0Ch], offset ??_7CArchiveUpdateCallback@@6BIArchiveGetRawProps@@@ ; const CArchiveUpdateCallback::`vftable'{for `IArchiveGetRawProps'}
.text:000000CB                 mov     ecx, [ebp+var_10]
.text:000000CE                 mov     dword ptr [ecx+10h], offset ??_7CArchiveUpdateCallback@@6BIArchiveGetRootProps@@@ ; const CArchiveUpdateCallback::`vftable'{for `IArchiveGetRootProps'}
.text:000000D5                 mov     edx, [ebp+var_10]
.text:000000D8                 mov     dword ptr [edx+14h], offset ??_7CArchiveUpdateCallback@@6BICryptoGetTextPassword2@@@ ; const CArchiveUpdateCallback::`vftable'{for `ICryptoGetTextPassword2'}
.text:000000DF                 mov     eax, [ebp+var_10]
.text:000000E2                 mov     dword ptr [eax+18h], offset ??_7CArchiveUpdateCallback@@6BICryptoGetTextPassword@@@ ; const CArchiveUpdateCallback::`vftable'{for `ICryptoGetTextPassword'}
.text:000000E9                 mov     ecx, [ebp+var_10]
.text:000000EC                 mov     dword ptr [ecx+1Ch], offset ??_7CArchiveUpdateCallback@@6BICompressProgressInfo@@@ ; const CArchiveUpdateCallback::`vftable'{for `ICompressProgressInfo'}
.text:000000F3                 mov     edx, [ebp+var_10]
.text:000000F6                 mov     dword ptr [edx+20h], offset ??_7CArchiveUpdateCallback@@6BIInFileStream_Callback@@@ ; const CArchiveUpdateCallback::`vftable'{for `IInFileStream_Callback'}
.text:000000FD                 mov     ecx, [ebp+var_10]
.text:00000100                 add     ecx, 2Ch ; ','
.text:00000103                 call    ??0?$CRecordVector@UCKeyKeyValPair@@@@QAE@XZ ; CRecordVector<CKeyKeyValPair>::CRecordVector<CKeyKeyValPair>(void)
.text:00000108                 mov     [ebp+var_4], 0
.text:0000010F                 mov     eax, [ebp+var_10]
.text:00000112                 mov     dword ptr [eax+38h], 0FFFFFFFFh
.text:00000119                 mov     ecx, [ebp+var_10]
.text:0000011C                 add     ecx, 40h ; '@'
.text:0000011F                 call    ??0?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::CRecordVector<uint>(void)
.text:00000124                 mov     byte ptr [ebp+var_4], 1
.text:00000128                 mov     ecx, [ebp+var_10]
.text:0000012B                 add     ecx, 4Ch ; 'L'
.text:0000012E                 call    ??0?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::CObjectVector<UString>(void)
.text:00000133                 mov     byte ptr [ebp+var_4], 2
.text:00000137                 mov     ecx, [ebp+var_10]
.text:0000013A                 add     ecx, 58h ; 'X'
.text:0000013D                 call    ??0?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>(void)
.text:00000142                 mov     byte ptr [ebp+var_4], 3
.text:00000146                 mov     ecx, [ebp+var_10]
.text:00000149                 add     ecx, 64h ; 'd'
.text:0000014C                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00000151                 mov     byte ptr [ebp+var_4], 4
.text:00000155                 mov     ecx, [ebp+var_10]
.text:00000158                 add     ecx, 70h ; 'p'
.text:0000015B                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00000160                 mov     byte ptr [ebp+var_4], 5
.text:00000164                 mov     ecx, [ebp+var_10]
.text:00000167                 mov     dword ptr [ecx+7Ch], 0
.text:0000016E                 mov     edx, [ebp+var_10]
.text:00000171                 mov     dword ptr [edx+80h], 0
.text:0000017B                 mov     eax, [ebp+var_10]
.text:0000017E                 mov     dword ptr [eax+84h], 0
.text:00000188                 mov     ecx, [ebp+var_10]
.text:0000018B                 mov     dword ptr [ecx+88h], 0
.text:00000195                 mov     ecx, [ebp+var_10]
.text:00000198                 add     ecx, 8Ch ; 'î'
.text:0000019E                 call    ??0?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::CMyComPtr<IInArchive>(void)
.text:000001A3                 mov     byte ptr [ebp+var_4], 6
.text:000001A7                 mov     edx, [ebp+var_10]
.text:000001AA                 mov     dword ptr [edx+90h], 0
.text:000001B4                 mov     eax, [ebp+var_10]
.text:000001B7                 mov     dword ptr [eax+94h], 0
.text:000001C1                 mov     ecx, [ebp+var_10]
.text:000001C4                 mov     dword ptr [ecx+98h], 0
.text:000001CE                 mov     edx, [ebp+var_10]
.text:000001D1                 mov     byte ptr [edx+9Ch], 0
.text:000001D8                 mov     eax, [ebp+var_10]
.text:000001DB                 mov     byte ptr [eax+9Dh], 0
.text:000001E2                 mov     ecx, [ebp+var_10]
.text:000001E5                 mov     byte ptr [ecx+9Eh], 0
.text:000001EC                 mov     edx, [ebp+var_10]
.text:000001EF                 mov     byte ptr [edx+9Fh], 0
.text:000001F6                 mov     eax, [ebp+var_10]
.text:000001F9                 mov     byte ptr [eax+0A0h], 0
.text:00000200                 mov     ecx, [ebp+var_10]
.text:00000203                 mov     byte ptr [ecx+0A1h], 0
.text:0000020A                 mov     edx, [ebp+var_10]
.text:0000020D                 mov     dword ptr [edx+0A4h], 0
.text:00000217                 call    ?InitLocalPrivileges@@YG_NXZ ; InitLocalPrivileges(void)
.text:0000021C                 mov     ecx, [ebp+var_10]
.text:0000021F                 mov     [ecx+28h], al
.text:00000222                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000229                 mov     eax, [ebp+var_10]
.text:0000022C                 mov     ecx, [ebp+var_C]
.text:0000022F                 mov     large fs:0, ecx
.text:00000236                 pop     ecx
.text:00000237                 add     esp, 10h
.text:0000023A                 cmp     ebp, esp
.text:0000023C                 call    __RTC_CheckEsp
.text:00000241                 mov     esp, ebp
.text:00000243                 pop     ebp
.text:00000244                 retn
.text:00000244 ??0CArchiveUpdateCallback@@QAE@XZ endp
.text:00000244
.text:00000244 ; ---------------------------------------------------------------------------
.text:00000245                 db 7 dup(0CCh)
.text:0000024C
.text:0000024C ; =============== S U B R O U T I N E =======================================
.text:0000024C
.text:0000024C ; Attributes: bp-based frame
.text:0000024C
.text:0000024C ; __int32 __cdecl CArchiveUpdateCallback::SetTotal(CArchiveUpdateCallback *this, unsigned __int64)
.text:0000024C                 public ?SetTotal@CArchiveUpdateCallback@@UAGJ_K@Z
.text:0000024C ?SetTotal@CArchiveUpdateCallback@@UAGJ_K@Z proc near
.text:0000024C                                         ; CODE XREF: [thunk]:CArchiveUpdateCallback::SetTotal`adjustor{8}' (unsigned __int64)+5j
.text:0000024C                                         ; DATA XREF: .rdata:000033A4o
.text:0000024C
.text:0000024C var_18          = dword ptr -18h
.text:0000024C var_14          = dword ptr -14h
.text:0000024C var_10          = dword ptr -10h
.text:0000024C var_C           = dword ptr -0Ch
.text:0000024C var_4           = dword ptr -4
.text:0000024C this            = dword ptr  8
.text:0000024C arg_4           = qword ptr  0Ch
.text:0000024C
.text:0000024C ; FUNCTION CHUNK AT .text:000002DF SIZE 0000001E BYTES
.text:0000024C
.text:0000024C                 push    ebp
.text:0000024D                 mov     ebp, esp
.text:0000024F                 push    0FFFFFFFFh
.text:00000251                 push    offset __ehhandler$?SetTotal@CArchiveUpdateCallback@@UAGJ_K@Z
.text:00000256                 mov     eax, large fs:0
.text:0000025C                 push    eax
.text:0000025D                 push    ecx
.text:0000025E                 sub     esp, 8
.text:00000261                 push    ebx
.text:00000262                 push    esi
.text:00000263                 push    edi
.text:00000264                 mov     [ebp+var_18], 0CCCCCCCCh
.text:0000026B                 mov     [ebp+var_14], 0CCCCCCCCh
.text:00000272                 mov     eax, dword ptr ds:___security_cookie
.text:00000277                 xor     eax, ebp
.text:00000279                 push    eax
.text:0000027A                 lea     eax, [ebp+var_C]
.text:0000027D                 mov     large fs:0, eax
.text:00000283                 mov     [ebp+var_10], esp
.text:00000286                 mov     [ebp+var_4], 0
.text:0000028D                 mov     esi, esp
.text:0000028F                 mov     eax, dword ptr [ebp+arg_4+4]
.text:00000292                 push    eax
.text:00000293                 mov     ecx, dword ptr [ebp+arg_4]
.text:00000296                 push    ecx
.text:00000297                 mov     edx, [ebp+this]
.text:0000029A                 mov     ecx, [edx+7Ch]
.text:0000029D                 mov     eax, [ebp+this]
.text:000002A0                 mov     edx, [eax+7Ch]
.text:000002A3                 mov     eax, [edx]
.text:000002A5                 mov     edx, [eax+4]
.text:000002A8                 call    edx
.text:000002AA                 cmp     esi, esp
.text:000002AC                 call    __RTC_CheckEsp
.text:000002B1                 mov     [ebp+var_18], eax
.text:000002B4                 mov     eax, [ebp+var_18]
.text:000002B7                 jmp     short loc_2DF
.text:000002B7 ?SetTotal@CArchiveUpdateCallback@@UAGJ_K@Z endp
.text:000002B7
.text:000002B9
.text:000002B9 ; =============== S U B R O U T I N E =======================================
.text:000002B9
.text:000002B9
.text:000002B9 __catch$?SetTotal@CArchiveUpdateCallback@@UAGJ_K@Z$0 proc near
.text:000002B9                                         ; DATA XREF: .xdata$x:0000342Co
.text:000002B9                 mov     dword ptr [ebp-14h], 8007000Eh
.text:000002C0                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:000002C7                 mov     eax, offset $LN7
.text:000002CC                 retn
.text:000002CC __catch$?SetTotal@CArchiveUpdateCallback@@UAGJ_K@Z$0 endp
.text:000002CC
.text:000002CD ; ---------------------------------------------------------------------------
.text:000002CD                 mov     eax, offset __tryend$?SetTotal@CArchiveUpdateCallback@@UAGJ_K@Z$1
.text:000002D2                 retn
.text:000002D3 ; ---------------------------------------------------------------------------
.text:000002D3
.text:000002D3 __tryend$?SetTotal@CArchiveUpdateCallback@@UAGJ_K@Z$1:
.text:000002D3                                         ; DATA XREF: .text:000002CDo
.text:000002D3                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:000002DA                 jmp     short loc_2DF
.text:000002DC ; ---------------------------------------------------------------------------
.text:000002DC
.text:000002DC $LN7:                                   ; DATA XREF: __catch$?SetTotal@CArchiveUpdateCallback@@UAGJ_K@Z$0+Eo
.text:000002DC                 mov     eax, [ebp-14h]
.text:000002DF ; START OF FUNCTION CHUNK FOR ?SetTotal@CArchiveUpdateCallback@@UAGJ_K@Z
.text:000002DF
.text:000002DF loc_2DF:                                ; CODE XREF: CArchiveUpdateCallback::SetTotal(unsigned __int64)+6Bj
.text:000002DF                                         ; .text:000002DAj
.text:000002DF                 mov     ecx, [ebp+var_C]
.text:000002E2                 mov     large fs:0, ecx
.text:000002E9                 pop     ecx
.text:000002EA                 pop     edi
.text:000002EB                 pop     esi
.text:000002EC                 pop     ebx
.text:000002ED                 add     esp, 18h
.text:000002F0                 cmp     ebp, esp
.text:000002F2                 call    __RTC_CheckEsp
.text:000002F7                 mov     esp, ebp
.text:000002F9                 pop     ebp
.text:000002FA                 retn    0Ch
.text:000002FA ; END OF FUNCTION CHUNK FOR ?SetTotal@CArchiveUpdateCallback@@UAGJ_K@Z
.text:000002FA ; ---------------------------------------------------------------------------
.text:000002FD                 db 0Fh dup(0CCh)
.text:0000030C
.text:0000030C ; =============== S U B R O U T I N E =======================================
.text:0000030C
.text:0000030C ; Attributes: bp-based frame
.text:0000030C
.text:0000030C ; __int32 __cdecl CArchiveUpdateCallback::SetCompleted(CArchiveUpdateCallback *this, const unsigned __int64 *)
.text:0000030C                 public ?SetCompleted@CArchiveUpdateCallback@@UAGJPB_K@Z
.text:0000030C ?SetCompleted@CArchiveUpdateCallback@@UAGJPB_K@Z proc near
.text:0000030C                                         ; CODE XREF: [thunk]:CArchiveUpdateCallback::SetCompleted`adjustor{8}' (unsigned __int64 const *)+5j
.text:0000030C                                         ; DATA XREF: .rdata:000033A8o
.text:0000030C
.text:0000030C var_18          = dword ptr -18h
.text:0000030C var_14          = dword ptr -14h
.text:0000030C var_10          = dword ptr -10h
.text:0000030C var_C           = dword ptr -0Ch
.text:0000030C var_4           = dword ptr -4
.text:0000030C this            = dword ptr  8
.text:0000030C arg_4           = dword ptr  0Ch
.text:0000030C
.text:0000030C ; FUNCTION CHUNK AT .text:0000039B SIZE 0000001E BYTES
.text:0000030C
.text:0000030C                 push    ebp
.text:0000030D                 mov     ebp, esp
.text:0000030F                 push    0FFFFFFFFh
.text:00000311                 push    offset __ehhandler$?SetCompleted@CArchiveUpdateCallback@@UAGJPB_K@Z
.text:00000316                 mov     eax, large fs:0
.text:0000031C                 push    eax
.text:0000031D                 push    ecx
.text:0000031E                 sub     esp, 8
.text:00000321                 push    ebx
.text:00000322                 push    esi
.text:00000323                 push    edi
.text:00000324                 mov     [ebp+var_18], 0CCCCCCCCh
.text:0000032B                 mov     [ebp+var_14], 0CCCCCCCCh
.text:00000332                 mov     eax, dword ptr ds:___security_cookie
.text:00000337                 xor     eax, ebp
.text:00000339                 push    eax
.text:0000033A                 lea     eax, [ebp+var_C]
.text:0000033D                 mov     large fs:0, eax
.text:00000343                 mov     [ebp+var_10], esp
.text:00000346                 mov     [ebp+var_4], 0
.text:0000034D                 mov     esi, esp
.text:0000034F                 mov     eax, [ebp+arg_4]
.text:00000352                 push    eax
.text:00000353                 mov     ecx, [ebp+this]
.text:00000356                 mov     ecx, [ecx+7Ch]
.text:00000359                 mov     edx, [ebp+this]
.text:0000035C                 mov     eax, [edx+7Ch]
.text:0000035F                 mov     edx, [eax]
.text:00000361                 mov     eax, [edx+8]
.text:00000364                 call    eax
.text:00000366                 cmp     esi, esp
.text:00000368                 call    __RTC_CheckEsp
.text:0000036D                 mov     [ebp+var_18], eax
.text:00000370                 mov     eax, [ebp+var_18]
.text:00000373                 jmp     short loc_39B
.text:00000373 ?SetCompleted@CArchiveUpdateCallback@@UAGJPB_K@Z endp
.text:00000373
.text:00000375
.text:00000375 ; =============== S U B R O U T I N E =======================================
.text:00000375
.text:00000375
.text:00000375 __catch$?SetCompleted@CArchiveUpdateCallback@@UAGJPB_K@Z$0 proc near
.text:00000375                                         ; DATA XREF: .xdata$x:00003484o
.text:00000375                 mov     dword ptr [ebp-14h], 8007000Eh
.text:0000037C                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00000383                 mov     eax, offset $LN7_0
.text:00000388                 retn
.text:00000388 __catch$?SetCompleted@CArchiveUpdateCallback@@UAGJPB_K@Z$0 endp
.text:00000388
.text:00000389 ; ---------------------------------------------------------------------------
.text:00000389                 mov     eax, offset __tryend$?SetCompleted@CArchiveUpdateCallback@@UAGJPB_K@Z$1
.text:0000038E                 retn
.text:0000038F ; ---------------------------------------------------------------------------
.text:0000038F
.text:0000038F __tryend$?SetCompleted@CArchiveUpdateCallback@@UAGJPB_K@Z$1:
.text:0000038F                                         ; DATA XREF: .text:00000389o
.text:0000038F                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00000396                 jmp     short loc_39B
.text:00000398 ; ---------------------------------------------------------------------------
.text:00000398
.text:00000398 $LN7_0:                                 ; DATA XREF: __catch$?SetCompleted@CArchiveUpdateCallback@@UAGJPB_K@Z$0+Eo
.text:00000398                 mov     eax, [ebp-14h]
.text:0000039B ; START OF FUNCTION CHUNK FOR ?SetCompleted@CArchiveUpdateCallback@@UAGJPB_K@Z
.text:0000039B
.text:0000039B loc_39B:                                ; CODE XREF: CArchiveUpdateCallback::SetCompleted(unsigned __int64 const *)+67j
.text:0000039B                                         ; .text:00000396j
.text:0000039B                 mov     ecx, [ebp+var_C]
.text:0000039E                 mov     large fs:0, ecx
.text:000003A5                 pop     ecx
.text:000003A6                 pop     edi
.text:000003A7                 pop     esi
.text:000003A8                 pop     ebx
.text:000003A9                 add     esp, 18h
.text:000003AC                 cmp     ebp, esp
.text:000003AE                 call    __RTC_CheckEsp
.text:000003B3                 mov     esp, ebp
.text:000003B5                 pop     ebp
.text:000003B6                 retn    8
.text:000003B6 ; END OF FUNCTION CHUNK FOR ?SetCompleted@CArchiveUpdateCallback@@UAGJPB_K@Z
.text:000003B6 ; ---------------------------------------------------------------------------
.text:000003B9                 align 4
.text:000003BC
.text:000003BC ; =============== S U B R O U T I N E =======================================
.text:000003BC
.text:000003BC ; Attributes: bp-based frame
.text:000003BC
.text:000003BC ; __int32 __cdecl CArchiveUpdateCallback::SetRatioInfo(CArchiveUpdateCallback *this, const unsigned __int64 *, const unsigned __int64 *)
.text:000003BC                 public ?SetRatioInfo@CArchiveUpdateCallback@@UAGJPB_K0@Z
.text:000003BC ?SetRatioInfo@CArchiveUpdateCallback@@UAGJPB_K0@Z proc near
.text:000003BC                                         ; DATA XREF: .rdata:000032FCo
.text:000003BC
.text:000003BC var_18          = dword ptr -18h
.text:000003BC var_14          = dword ptr -14h
.text:000003BC var_10          = dword ptr -10h
.text:000003BC var_C           = dword ptr -0Ch
.text:000003BC var_4           = dword ptr -4
.text:000003BC this            = dword ptr  8
.text:000003BC arg_4           = dword ptr  0Ch
.text:000003BC arg_8           = dword ptr  10h
.text:000003BC
.text:000003BC ; FUNCTION CHUNK AT .text:0000044F SIZE 0000001E BYTES
.text:000003BC
.text:000003BC                 push    ebp
.text:000003BD                 mov     ebp, esp
.text:000003BF                 push    0FFFFFFFFh
.text:000003C1                 push    offset __ehhandler$?SetRatioInfo@CArchiveUpdateCallback@@UAGJPB_K0@Z
.text:000003C6                 mov     eax, large fs:0
.text:000003CC                 push    eax
.text:000003CD                 push    ecx
.text:000003CE                 sub     esp, 8
.text:000003D1                 push    ebx
.text:000003D2                 push    esi
.text:000003D3                 push    edi
.text:000003D4                 mov     [ebp+var_18], 0CCCCCCCCh
.text:000003DB                 mov     [ebp+var_14], 0CCCCCCCCh
.text:000003E2                 mov     eax, dword ptr ds:___security_cookie
.text:000003E7                 xor     eax, ebp
.text:000003E9                 push    eax
.text:000003EA                 lea     eax, [ebp+var_C]
.text:000003ED                 mov     large fs:0, eax
.text:000003F3                 mov     [ebp+var_10], esp
.text:000003F6                 mov     [ebp+var_4], 0
.text:000003FD                 mov     esi, esp
.text:000003FF                 mov     eax, [ebp+arg_8]
.text:00000402                 push    eax
.text:00000403                 mov     ecx, [ebp+arg_4]
.text:00000406                 push    ecx
.text:00000407                 mov     edx, [ebp+this]
.text:0000040A                 mov     ecx, [edx+60h]
.text:0000040D                 mov     eax, [ebp+this]
.text:00000410                 mov     edx, [eax+60h]
.text:00000413                 mov     eax, [edx]
.text:00000415                 mov     edx, [eax+0Ch]
.text:00000418                 call    edx
.text:0000041A                 cmp     esi, esp
.text:0000041C                 call    __RTC_CheckEsp
.text:00000421                 mov     [ebp+var_18], eax
.text:00000424                 mov     eax, [ebp+var_18]
.text:00000427                 jmp     short loc_44F
.text:00000427 ?SetRatioInfo@CArchiveUpdateCallback@@UAGJPB_K0@Z endp
.text:00000427
.text:00000429
.text:00000429 ; =============== S U B R O U T I N E =======================================
.text:00000429
.text:00000429
.text:00000429 __catch$?SetRatioInfo@CArchiveUpdateCallback@@UAGJPB_K0@Z$0 proc near
.text:00000429                                         ; DATA XREF: .xdata$x:000034DCo
.text:00000429                 mov     dword ptr [ebp-14h], 8007000Eh
.text:00000430                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00000437                 mov     eax, offset $LN7_1
.text:0000043C                 retn
.text:0000043C __catch$?SetRatioInfo@CArchiveUpdateCallback@@UAGJPB_K0@Z$0 endp
.text:0000043C
.text:0000043D ; ---------------------------------------------------------------------------
.text:0000043D                 mov     eax, offset __tryend$?SetRatioInfo@CArchiveUpdateCallback@@UAGJPB_K0@Z$1
.text:00000442                 retn
.text:00000443 ; ---------------------------------------------------------------------------
.text:00000443
.text:00000443 __tryend$?SetRatioInfo@CArchiveUpdateCallback@@UAGJPB_K0@Z$1:
.text:00000443                                         ; DATA XREF: .text:0000043Do
.text:00000443                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:0000044A                 jmp     short loc_44F
.text:0000044C ; ---------------------------------------------------------------------------
.text:0000044C
.text:0000044C $LN7_1:                                 ; DATA XREF: __catch$?SetRatioInfo@CArchiveUpdateCallback@@UAGJPB_K0@Z$0+Eo
.text:0000044C                 mov     eax, [ebp-14h]
.text:0000044F ; START OF FUNCTION CHUNK FOR ?SetRatioInfo@CArchiveUpdateCallback@@UAGJPB_K0@Z
.text:0000044F
.text:0000044F loc_44F:                                ; CODE XREF: CArchiveUpdateCallback::SetRatioInfo(unsigned __int64 const *,unsigned __int64 const *)+6Bj
.text:0000044F                                         ; .text:0000044Aj
.text:0000044F                 mov     ecx, [ebp+var_C]
.text:00000452                 mov     large fs:0, ecx
.text:00000459                 pop     ecx
.text:0000045A                 pop     edi
.text:0000045B                 pop     esi
.text:0000045C                 pop     ebx
.text:0000045D                 add     esp, 18h
.text:00000460                 cmp     ebp, esp
.text:00000462                 call    __RTC_CheckEsp
.text:00000467                 mov     esp, ebp
.text:00000469                 pop     ebp
.text:0000046A                 retn    0Ch
.text:0000046A ; END OF FUNCTION CHUNK FOR ?SetRatioInfo@CArchiveUpdateCallback@@UAGJPB_K0@Z
.text:0000046A ; ---------------------------------------------------------------------------
.text:0000046D                 db 0Fh dup(0CCh)
.text:0000047C
.text:0000047C ; =============== S U B R O U T I N E =======================================
.text:0000047C
.text:0000047C ; Attributes: bp-based frame
.text:0000047C
.text:0000047C ; __int32 __cdecl CArchiveUpdateCallback::GetUpdateItemInfo(CArchiveUpdateCallback *this, unsigned int, int *, int *, unsigned int *)
.text:0000047C                 public ?GetUpdateItemInfo@CArchiveUpdateCallback@@UAGJIPAH0PAI@Z
.text:0000047C ?GetUpdateItemInfo@CArchiveUpdateCallback@@UAGJIPAH0PAI@Z proc near
.text:0000047C                                         ; DATA XREF: .rdata:000033ACo
.text:0000047C
.text:0000047C var_38          = dword ptr -38h
.text:0000047C var_34          = dword ptr -34h
.text:0000047C var_2D          = byte ptr -2Dh
.text:0000047C var_2C          = dword ptr -2Ch
.text:0000047C var_28          = dword ptr -28h
.text:0000047C var_24          = dword ptr -24h
.text:0000047C var_20          = dword ptr -20h
.text:0000047C var_18          = dword ptr -18h
.text:0000047C var_14          = dword ptr -14h
.text:0000047C var_10          = dword ptr -10h
.text:0000047C var_C           = dword ptr -0Ch
.text:0000047C var_4           = dword ptr -4
.text:0000047C this            = dword ptr  8
.text:0000047C arg_4           = dword ptr  0Ch
.text:0000047C arg_8           = dword ptr  10h
.text:0000047C arg_C           = dword ptr  14h
.text:0000047C arg_10          = dword ptr  18h
.text:0000047C
.text:0000047C ; FUNCTION CHUNK AT .text:000005D3 SIZE 0000001E BYTES
.text:0000047C
.text:0000047C                 push    ebp
.text:0000047D                 mov     ebp, esp
.text:0000047F                 push    0FFFFFFFFh
.text:00000481                 push    offset __ehhandler$?GetUpdateItemInfo@CArchiveUpdateCallback@@UAGJIPAH0PAI@Z
.text:00000486                 mov     eax, large fs:0
.text:0000048C                 push    eax
.text:0000048D                 push    ecx
.text:0000048E                 sub     esp, 28h
.text:00000491                 push    ebx
.text:00000492                 push    esi
.text:00000493                 push    edi
.text:00000494                 lea     edi, [ebp+var_38]
.text:00000497                 mov     ecx, 0Ah
.text:0000049C                 mov     eax, 0CCCCCCCCh
.text:000004A1                 rep stosd
.text:000004A3                 mov     eax, dword ptr ds:___security_cookie
.text:000004A8                 xor     eax, ebp
.text:000004AA                 push    eax
.text:000004AB                 lea     eax, [ebp+var_C]
.text:000004AE                 mov     large fs:0, eax
.text:000004B4                 mov     [ebp+var_10], esp
.text:000004B7                 mov     [ebp+var_4], 0
.text:000004BE                 mov     eax, [ebp+this]
.text:000004C1                 mov     ecx, [eax+7Ch]
.text:000004C4                 mov     esi, esp
.text:000004C6                 mov     edx, [ebp+this]
.text:000004C9                 mov     eax, [edx+7Ch]
.text:000004CC                 mov     edx, [eax]
.text:000004CE                 mov     eax, [edx+10h]
.text:000004D1                 call    eax
.text:000004D3                 cmp     esi, esp
.text:000004D5                 call    __RTC_CheckEsp
.text:000004DA                 mov     [ebp+var_20], eax
.text:000004DD                 mov     ecx, [ebp+var_20]
.text:000004E0                 mov     [ebp+var_14], ecx
.text:000004E3                 cmp     [ebp+var_14], 0
.text:000004E7                 jz      short loc_4F1
.text:000004E9                 mov     eax, [ebp+var_14]
.text:000004EC                 jmp     loc_5D3
.text:000004F1 ; ---------------------------------------------------------------------------
.text:000004F1
.text:000004F1 loc_4F1:                                ; CODE XREF: CArchiveUpdateCallback::GetUpdateItemInfo(uint,int *,int *,uint *)+6Bj
.text:000004F1                 mov     edx, [ebp+arg_4]
.text:000004F4                 push    edx
.text:000004F5                 mov     eax, [ebp+this]
.text:000004F8                 mov     ecx, [eax+94h]
.text:000004FE                 call    ??A?$CRecordVector@UCUpdatePair2@@@@QBEABUCUpdatePair2@@I@Z ; CRecordVector<CUpdatePair2>::operator[](uint)
.text:00000503                 mov     [ebp+var_24], eax
.text:00000506                 mov     ecx, [ebp+var_24]
.text:00000509                 mov     [ebp+var_18], ecx
.text:0000050C                 cmp     [ebp+arg_8], 0
.text:00000510                 jz      short loc_529
.text:00000512                 mov     edx, [ebp+var_18]
.text:00000515                 movzx   eax, byte ptr [edx]
.text:00000518                 push    eax             ; bool
.text:00000519                 call    ?BoolToInt@@YGH_N@Z ; BoolToInt(bool)
.text:0000051E                 mov     [ebp+var_28], eax
.text:00000521                 mov     ecx, [ebp+arg_8]
.text:00000524                 mov     edx, [ebp+var_28]
.text:00000527                 mov     [ecx], edx
.text:00000529
.text:00000529 loc_529:                                ; CODE XREF: CArchiveUpdateCallback::GetUpdateItemInfo(uint,int *,int *,uint *)+94j
.text:00000529                 cmp     [ebp+arg_C], 0
.text:0000052D                 jz      short loc_547
.text:0000052F                 mov     eax, [ebp+var_18]
.text:00000532                 movzx   ecx, byte ptr [eax+1]
.text:00000536                 push    ecx             ; bool
.text:00000537                 call    ?BoolToInt@@YGH_N@Z ; BoolToInt(bool)
.text:0000053C                 mov     [ebp+var_2C], eax
.text:0000053F                 mov     edx, [ebp+arg_C]
.text:00000542                 mov     eax, [ebp+var_2C]
.text:00000545                 mov     [edx], eax
.text:00000547
.text:00000547 loc_547:                                ; CODE XREF: CArchiveUpdateCallback::GetUpdateItemInfo(uint,int *,int *,uint *)+B1j
.text:00000547                 cmp     [ebp+arg_10], 0
.text:0000054B                 jz      short loc_5A9
.text:0000054D                 mov     ecx, [ebp+arg_10]
.text:00000550                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:00000556                 mov     ecx, [ebp+var_18] ; this
.text:00000559                 call    ?ExistInArchive@CUpdatePair2@@QBE_NXZ ; CUpdatePair2::ExistInArchive(void)
.text:0000055E                 mov     [ebp+var_2D], al
.text:00000561                 movzx   edx, [ebp+var_2D]
.text:00000565                 test    edx, edx
.text:00000567                 jz      short loc_5A9
.text:00000569                 mov     eax, [ebp+this]
.text:0000056C                 cmp     dword ptr [eax+90h], 0
.text:00000573                 jnz     short loc_580
.text:00000575                 mov     ecx, [ebp+var_18]
.text:00000578                 mov     edx, [ecx+8]
.text:0000057B                 mov     [ebp+var_34], edx
.text:0000057E                 jmp     short loc_5A1
.text:00000580 ; ---------------------------------------------------------------------------
.text:00000580
.text:00000580 loc_580:                                ; CODE XREF: CArchiveUpdateCallback::GetUpdateItemInfo(uint,int *,int *,uint *)+F7j
.text:00000580                 mov     eax, [ebp+var_18]
.text:00000583                 mov     ecx, [eax+8]
.text:00000586                 push    ecx
.text:00000587                 mov     edx, [ebp+this]
.text:0000058A                 mov     ecx, [edx+90h]
.text:00000590                 call    ??A?$CObjectVector@UCArcItem@@@@QBEABUCArcItem@@I@Z ; CObjectVector<CArcItem>::operator[](uint)
.text:00000595                 mov     [ebp+var_38], eax
.text:00000598                 mov     eax, [ebp+var_38]
.text:0000059B                 mov     ecx, [eax+24h]
.text:0000059E                 mov     [ebp+var_34], ecx
.text:000005A1
.text:000005A1 loc_5A1:                                ; CODE XREF: CArchiveUpdateCallback::GetUpdateItemInfo(uint,int *,int *,uint *)+102j
.text:000005A1                 mov     edx, [ebp+arg_10]
.text:000005A4                 mov     eax, [ebp+var_34]
.text:000005A7                 mov     [edx], eax
.text:000005A9
.text:000005A9 loc_5A9:                                ; CODE XREF: CArchiveUpdateCallback::GetUpdateItemInfo(uint,int *,int *,uint *)+CFj
.text:000005A9                                         ; CArchiveUpdateCallback::GetUpdateItemInfo(uint,int *,int *,uint *)+EBj
.text:000005A9                 xor     eax, eax
.text:000005AB                 jmp     short loc_5D3
.text:000005AB ?GetUpdateItemInfo@CArchiveUpdateCallback@@UAGJIPAH0PAI@Z endp
.text:000005AB
.text:000005AD
.text:000005AD ; =============== S U B R O U T I N E =======================================
.text:000005AD
.text:000005AD
.text:000005AD __catch$?GetUpdateItemInfo@CArchiveUpdateCallback@@UAGJIPAH0PAI@Z$0 proc near
.text:000005AD                                         ; DATA XREF: .xdata$x:00003534o
.text:000005AD                 mov     dword ptr [ebp-1Ch], 8007000Eh
.text:000005B4                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:000005BB                 mov     eax, offset $LN14
.text:000005C0                 retn
.text:000005C0 __catch$?GetUpdateItemInfo@CArchiveUpdateCallback@@UAGJIPAH0PAI@Z$0 endp
.text:000005C0
.text:000005C1 ; ---------------------------------------------------------------------------
.text:000005C1                 mov     eax, offset __tryend$?GetUpdateItemInfo@CArchiveUpdateCallback@@UAGJIPAH0PAI@Z$1
.text:000005C6                 retn
.text:000005C7 ; ---------------------------------------------------------------------------
.text:000005C7
.text:000005C7 __tryend$?GetUpdateItemInfo@CArchiveUpdateCallback@@UAGJIPAH0PAI@Z$1:
.text:000005C7                                         ; DATA XREF: .text:000005C1o
.text:000005C7                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:000005CE                 jmp     short loc_5D3
.text:000005D0 ; ---------------------------------------------------------------------------
.text:000005D0
.text:000005D0 $LN14:                                  ; DATA XREF: __catch$?GetUpdateItemInfo@CArchiveUpdateCallback@@UAGJIPAH0PAI@Z$0+Eo
.text:000005D0                 mov     eax, [ebp-1Ch]
.text:000005D3 ; START OF FUNCTION CHUNK FOR ?GetUpdateItemInfo@CArchiveUpdateCallback@@UAGJIPAH0PAI@Z
.text:000005D3
.text:000005D3 loc_5D3:                                ; CODE XREF: CArchiveUpdateCallback::GetUpdateItemInfo(uint,int *,int *,uint *)+70j
.text:000005D3                                         ; CArchiveUpdateCallback::GetUpdateItemInfo(uint,int *,int *,uint *)+12Fj ...
.text:000005D3                 mov     ecx, [ebp+var_C]
.text:000005D6                 mov     large fs:0, ecx
.text:000005DD                 pop     ecx
.text:000005DE                 pop     edi
.text:000005DF                 pop     esi
.text:000005E0                 pop     ebx
.text:000005E1                 add     esp, 38h
.text:000005E4                 cmp     ebp, esp
.text:000005E6                 call    __RTC_CheckEsp
.text:000005EB                 mov     esp, ebp
.text:000005ED                 pop     ebp
.text:000005EE                 retn    14h
.text:000005EE ; END OF FUNCTION CHUNK FOR ?GetUpdateItemInfo@CArchiveUpdateCallback@@UAGJIPAH0PAI@Z
.text:000005EE ; ---------------------------------------------------------------------------
.text:000005F1                 db 0Bh dup(0CCh)
.text:000005FC
.text:000005FC ; =============== S U B R O U T I N E =======================================
.text:000005FC
.text:000005FC ; Attributes: bp-based frame
.text:000005FC
.text:000005FC ; __int32 __stdcall CArchiveUpdateCallback::GetRootProp(CArchiveUpdateCallback *this, unsigned __int32, struct tagPROPVARIANT *)
.text:000005FC                 public ?GetRootProp@CArchiveUpdateCallback@@UAGJKPAUtagPROPVARIANT@@@Z
.text:000005FC ?GetRootProp@CArchiveUpdateCallback@@UAGJKPAUtagPROPVARIANT@@@Z proc near
.text:000005FC                                         ; DATA XREF: .rdata:00003338o
.text:000005FC
.text:000005FC var_20          = dword ptr -20h
.text:000005FC var_1C          = dword ptr -1Ch
.text:000005FC var_18          = dword ptr -18h
.text:000005FC var_14          = dword ptr -14h
.text:000005FC var_10          = dword ptr -10h
.text:000005FC var_C           = dword ptr -0Ch
.text:000005FC var_8           = dword ptr -8
.text:000005FC var_4           = dword ptr -4
.text:000005FC this            = dword ptr  8
.text:000005FC arg_4           = dword ptr  0Ch
.text:000005FC arg_8           = dword ptr  10h
.text:000005FC
.text:000005FC                 push    ebp
.text:000005FD                 mov     ebp, esp
.text:000005FF                 sub     esp, 20h
.text:00000602                 mov     eax, 0CCCCCCCCh
.text:00000607                 mov     [ebp+var_20], eax
.text:0000060A                 mov     [ebp+var_1C], eax
.text:0000060D                 mov     [ebp+var_18], eax
.text:00000610                 mov     [ebp+var_14], eax
.text:00000613                 mov     [ebp+var_10], eax
.text:00000616                 mov     [ebp+var_C], eax
.text:00000619                 mov     [ebp+var_8], eax
.text:0000061C                 mov     [ebp+var_4], eax
.text:0000061F                 lea     ecx, [ebp+var_14] ; this
.text:00000622                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:00000627                 mov     eax, [ebp+arg_4]
.text:0000062A                 mov     [ebp+var_20], eax
.text:0000062D                 mov     ecx, [ebp+var_20]
.text:00000630                 sub     ecx, 6
.text:00000633                 mov     [ebp+var_20], ecx
.text:00000636                 cmp     [ebp+var_20], 6 ; switch 7 cases
.text:0000063A                 ja      $LN10           ; jumptable 00000643 default case
.text:00000640                 mov     edx, [ebp+var_20]
.text:00000643                 jmp     ds:$LN17[edx*4] ; switch jump
.text:0000064A ; ---------------------------------------------------------------------------
.text:0000064A
.text:0000064A $LN9:                                   ; CODE XREF: CArchiveUpdateCallback::GetRootProp(ulong,tagPROPVARIANT *)+47j
.text:0000064A                                         ; DATA XREF: .text:$LN17o
.text:0000064A                 push    1               ; jumptable 00000643 case 0
.text:0000064C                 lea     ecx, [ebp+var_14]
.text:0000064F                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_N@Z ; NWindows::NCOM::CPropVariant::operator=(bool)
.text:00000654                 jmp     short $LN10     ; jumptable 00000643 default case
.text:00000656 ; ---------------------------------------------------------------------------
.text:00000656
.text:00000656 $LN8:                                   ; CODE XREF: CArchiveUpdateCallback::GetRootProp(ulong,tagPROPVARIANT *)+47j
.text:00000656                                         ; DATA XREF: .text:$LN17o
.text:00000656                 mov     eax, [ebp+this] ; jumptable 00000643 case 3
.text:00000659                 cmp     dword ptr [eax+74h], 0
.text:0000065D                 jz      short loc_671
.text:0000065F                 mov     ecx, [ebp+this]
.text:00000662                 mov     edx, [ecx+74h]
.text:00000665                 mov     eax, [edx+3Ch]
.text:00000668                 push    eax
.text:00000669                 lea     ecx, [ebp+var_14]
.text:0000066C                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z ; NWindows::NCOM::CPropVariant::operator=(uint)
.text:00000671
.text:00000671 loc_671:                                ; CODE XREF: CArchiveUpdateCallback::GetRootProp(ulong,tagPROPVARIANT *)+61j
.text:00000671                 jmp     short $LN10     ; jumptable 00000643 default case
.text:00000673 ; ---------------------------------------------------------------------------
.text:00000673
.text:00000673 $LN6:                                   ; CODE XREF: CArchiveUpdateCallback::GetRootProp(ulong,tagPROPVARIANT *)+47j
.text:00000673                                         ; DATA XREF: .text:$LN17o
.text:00000673                 mov     ecx, [ebp+this] ; jumptable 00000643 case 4
.text:00000676                 cmp     dword ptr [ecx+74h], 0
.text:0000067A                 jz      short loc_68E
.text:0000067C                 mov     edx, [ebp+this]
.text:0000067F                 mov     eax, [edx+74h]
.text:00000682                 add     eax, 8
.text:00000685                 push    eax
.text:00000686                 lea     ecx, [ebp+var_14]
.text:00000689                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABU_FILETIME@@@Z ; NWindows::NCOM::CPropVariant::operator=(_FILETIME const &)
.text:0000068E
.text:0000068E loc_68E:                                ; CODE XREF: CArchiveUpdateCallback::GetRootProp(ulong,tagPROPVARIANT *)+7Ej
.text:0000068E                 jmp     short $LN10     ; jumptable 00000643 default case
.text:00000690 ; ---------------------------------------------------------------------------
.text:00000690
.text:00000690 $LN4:                                   ; CODE XREF: CArchiveUpdateCallback::GetRootProp(ulong,tagPROPVARIANT *)+47j
.text:00000690                                         ; DATA XREF: .text:$LN17o
.text:00000690                 mov     ecx, [ebp+this] ; jumptable 00000643 case 5
.text:00000693                 cmp     dword ptr [ecx+74h], 0
.text:00000697                 jz      short loc_6AB
.text:00000699                 mov     edx, [ebp+this]
.text:0000069C                 mov     eax, [edx+74h]
.text:0000069F                 add     eax, 10h
.text:000006A2                 push    eax
.text:000006A3                 lea     ecx, [ebp+var_14]
.text:000006A6                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABU_FILETIME@@@Z ; NWindows::NCOM::CPropVariant::operator=(_FILETIME const &)
.text:000006AB
.text:000006AB loc_6AB:                                ; CODE XREF: CArchiveUpdateCallback::GetRootProp(ulong,tagPROPVARIANT *)+9Bj
.text:000006AB                 jmp     short $LN10     ; jumptable 00000643 default case
.text:000006AD ; ---------------------------------------------------------------------------
.text:000006AD
.text:000006AD $LN2:                                   ; CODE XREF: CArchiveUpdateCallback::GetRootProp(ulong,tagPROPVARIANT *)+47j
.text:000006AD                                         ; DATA XREF: .text:$LN17o
.text:000006AD                 mov     ecx, [ebp+this] ; jumptable 00000643 case 6
.text:000006B0                 cmp     dword ptr [ecx+74h], 0
.text:000006B4                 jz      short $LN10     ; jumptable 00000643 default case
.text:000006B6                 mov     edx, [ebp+this]
.text:000006B9                 mov     eax, [edx+74h]
.text:000006BC                 add     eax, 18h
.text:000006BF                 push    eax
.text:000006C0                 lea     ecx, [ebp+var_14]
.text:000006C3                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABU_FILETIME@@@Z ; NWindows::NCOM::CPropVariant::operator=(_FILETIME const &)
.text:000006C8
.text:000006C8 $LN10:                                  ; CODE XREF: CArchiveUpdateCallback::GetRootProp(ulong,tagPROPVARIANT *)+3Ej
.text:000006C8                                         ; CArchiveUpdateCallback::GetRootProp(ulong,tagPROPVARIANT *)+47j ...
.text:000006C8                 mov     ecx, [ebp+arg_8] ; jumptable 00000643 default case
.text:000006CB                 push    ecx             ; struct tagPROPVARIANT *
.text:000006CC                 lea     ecx, [ebp+var_14] ; this
.text:000006CF                 call    ?Detach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z ; NWindows::NCOM::CPropVariant::Detach(tagPROPVARIANT *)
.text:000006D4                 mov     [ebp+var_1C], 0
.text:000006DB                 lea     ecx, [ebp+var_14] ; this
.text:000006DE                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:000006E3                 mov     eax, [ebp+var_1C]
.text:000006E6                 push    edx
.text:000006E7                 mov     ecx, ebp
.text:000006E9                 push    eax
.text:000006EA                 lea     edx, $LN16
.text:000006F0                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000006F5                 pop     eax
.text:000006F6                 pop     edx
.text:000006F7                 add     esp, 20h
.text:000006FA                 cmp     ebp, esp
.text:000006FC                 call    __RTC_CheckEsp
.text:00000701                 mov     esp, ebp
.text:00000703                 pop     ebp
.text:00000704                 retn    0Ch
.text:00000704 ?GetRootProp@CArchiveUpdateCallback@@UAGJKPAUtagPROPVARIANT@@@Z endp
.text:00000704
.text:00000704 ; ---------------------------------------------------------------------------
.text:00000707                 align 4
.text:00000708 $LN16           dd 1                    ; DATA XREF: CArchiveUpdateCallback::GetRootProp(ulong,tagPROPVARIANT *)+EEo
.text:0000070C                 dd offset $LN15
.text:00000710 $LN15           dd 0FFFFFFECh, 10h      ; DATA XREF: .text:0000070Co
.text:00000718                 dd offset $LN14_0       ; "prop"
.text:0000071C $LN14_0         db 'prop',0             ; DATA XREF: .text:00000718o
.text:00000721                 align 4
.text:00000724 $LN17           dd offset $LN9          ; DATA XREF: CArchiveUpdateCallback::GetRootProp(ulong,tagPROPVARIANT *)+47r
.text:00000724                 dd offset $LN10         ; jump table for switch statement
.text:00000724                 dd offset $LN10
.text:00000724                 dd offset $LN8
.text:00000724                 dd offset $LN6
.text:00000724                 dd offset $LN4
.text:00000724                 dd offset $LN2
.text:00000740                 db 0Ch dup(0CCh)
.text:0000074C
.text:0000074C ; =============== S U B R O U T I N E =======================================
.text:0000074C
.text:0000074C ; Attributes: bp-based frame
.text:0000074C
.text:0000074C ; __int32 __stdcall CArchiveUpdateCallback::GetParent(CArchiveUpdateCallback *this, unsigned int, unsigned int *, unsigned int *)
.text:0000074C                 public ?GetParent@CArchiveUpdateCallback@@UAGJIPAI0@Z
.text:0000074C ?GetParent@CArchiveUpdateCallback@@UAGJIPAI0@Z proc near
.text:0000074C                                         ; DATA XREF: .rdata:00003350o
.text:0000074C
.text:0000074C this            = dword ptr  8
.text:0000074C arg_8           = dword ptr  10h
.text:0000074C arg_C           = dword ptr  14h
.text:0000074C
.text:0000074C                 push    ebp
.text:0000074D                 mov     ebp, esp
.text:0000074F                 mov     eax, [ebp+arg_C]
.text:00000752                 mov     dword ptr [eax], 0
.text:00000758                 mov     ecx, [ebp+arg_8]
.text:0000075B                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:00000761                 xor     eax, eax
.text:00000763                 pop     ebp
.text:00000764                 retn    10h
.text:00000764 ?GetParent@CArchiveUpdateCallback@@UAGJIPAI0@Z endp
.text:00000764
.text:00000764 ; ---------------------------------------------------------------------------
.text:00000767                 db 5 dup(0CCh)
.text:0000076C
.text:0000076C ; =============== S U B R O U T I N E =======================================
.text:0000076C
.text:0000076C ; Attributes: bp-based frame
.text:0000076C
.text:0000076C ; __int32 __stdcall CArchiveUpdateCallback::GetNumRawProps(CArchiveUpdateCallback *this, unsigned int *)
.text:0000076C                 public ?GetNumRawProps@CArchiveUpdateCallback@@UAGJPAI@Z
.text:0000076C ?GetNumRawProps@CArchiveUpdateCallback@@UAGJPAI@Z proc near
.text:0000076C                                         ; DATA XREF: .rdata:00003358o
.text:0000076C
.text:0000076C this            = dword ptr  8
.text:0000076C arg_4           = dword ptr  0Ch
.text:0000076C
.text:0000076C                 push    ebp
.text:0000076D                 mov     ebp, esp
.text:0000076F                 mov     eax, [ebp+arg_4]
.text:00000772                 mov     dword ptr [eax], 0
.text:00000778                 mov     ecx, [ebp+this]
.text:0000077B                 movzx   edx, byte ptr [ecx+93h]
.text:00000782                 test    edx, edx
.text:00000784                 jz      short loc_78F
.text:00000786                 mov     eax, [ebp+arg_4]
.text:00000789                 mov     dword ptr [eax], 1
.text:0000078F
.text:0000078F loc_78F:                                ; CODE XREF: CArchiveUpdateCallback::GetNumRawProps(uint *)+18j
.text:0000078F                 xor     eax, eax
.text:00000791                 pop     ebp
.text:00000792                 retn    8
.text:00000792 ?GetNumRawProps@CArchiveUpdateCallback@@UAGJPAI@Z endp
.text:00000792
.text:00000792 ; ---------------------------------------------------------------------------
.text:00000795                 db 7 dup(0CCh)
.text:0000079C
.text:0000079C ; =============== S U B R O U T I N E =======================================
.text:0000079C
.text:0000079C ; Attributes: bp-based frame
.text:0000079C
.text:0000079C ; __int32 __stdcall CArchiveUpdateCallback::GetRawPropInfo(CArchiveUpdateCallback *this, unsigned int, wchar_t **, unsigned __int32 *)
.text:0000079C                 public ?GetRawPropInfo@CArchiveUpdateCallback@@UAGJIPAPA_WPAK@Z
.text:0000079C ?GetRawPropInfo@CArchiveUpdateCallback@@UAGJIPAPA_WPAK@Z proc near
.text:0000079C                                         ; DATA XREF: .rdata:0000335Co
.text:0000079C
.text:0000079C this            = dword ptr  8
.text:0000079C arg_8           = dword ptr  10h
.text:0000079C arg_C           = dword ptr  14h
.text:0000079C
.text:0000079C                 push    ebp
.text:0000079D                 mov     ebp, esp
.text:0000079F                 mov     eax, [ebp+arg_8]
.text:000007A2                 mov     dword ptr [eax], 0
.text:000007A8                 mov     ecx, [ebp+arg_C]
.text:000007AB                 mov     dword ptr [ecx], 3Eh ; '>'
.text:000007B1                 xor     eax, eax
.text:000007B3                 pop     ebp
.text:000007B4                 retn    10h
.text:000007B4 ?GetRawPropInfo@CArchiveUpdateCallback@@UAGJIPAPA_WPAK@Z endp
.text:000007B4
.text:000007B4 ; ---------------------------------------------------------------------------
.text:000007B7                 db 5 dup(0CCh)
.text:000007BC
.text:000007BC ; =============== S U B R O U T I N E =======================================
.text:000007BC
.text:000007BC ; Attributes: bp-based frame
.text:000007BC
.text:000007BC ; __int32 __stdcall CArchiveUpdateCallback::GetRootRawProp(CArchiveUpdateCallback *this, unsigned __int32, const void **, unsigned int *, unsigned int *)
.text:000007BC                 public ?GetRootRawProp@CArchiveUpdateCallback@@UAGJKPAPBXPAI1@Z
.text:000007BC ?GetRootRawProp@CArchiveUpdateCallback@@UAGJKPAPBXPAI1@Z proc near
.text:000007BC                                         ; DATA XREF: .rdata:0000333Co
.text:000007BC
.text:000007BC var_8           = dword ptr -8
.text:000007BC var_4           = dword ptr -4
.text:000007BC this            = dword ptr  8
.text:000007BC arg_4           = dword ptr  0Ch
.text:000007BC arg_8           = dword ptr  10h
.text:000007BC arg_C           = dword ptr  14h
.text:000007BC arg_10          = dword ptr  18h
.text:000007BC
.text:000007BC                 push    ebp
.text:000007BD                 mov     ebp, esp
.text:000007BF                 sub     esp, 8
.text:000007C2                 push    esi
.text:000007C3                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000007CA                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000007D1                 mov     eax, [ebp+arg_8]
.text:000007D4                 mov     dword ptr [eax], 0
.text:000007DA                 mov     ecx, [ebp+arg_C]
.text:000007DD                 mov     dword ptr [ecx], 0
.text:000007E3                 mov     edx, [ebp+arg_10]
.text:000007E6                 mov     dword ptr [edx], 0
.text:000007EC                 mov     eax, [ebp+this]
.text:000007EF                 movzx   ecx, byte ptr [eax+8Fh]
.text:000007F6                 test    ecx, ecx
.text:000007F8                 jnz     short loc_801
.text:000007FA                 xor     eax, eax
.text:000007FC                 jmp     loc_8D5
.text:00000801 ; ---------------------------------------------------------------------------
.text:00000801
.text:00000801 loc_801:                                ; CODE XREF: CArchiveUpdateCallback::GetRootRawProp(ulong,void const * *,uint *,uint *)+3Cj
.text:00000801                 cmp     [ebp+arg_4], 3Eh ; '>'
.text:00000805                 jnz     loc_8D3
.text:0000080B                 mov     edx, [ebp+this]
.text:0000080E                 movzx   eax, byte ptr [edx+8Dh]
.text:00000815                 test    eax, eax
.text:00000817                 jz      short loc_820
.text:00000819                 xor     eax, eax
.text:0000081B                 jmp     loc_8D5
.text:00000820 ; ---------------------------------------------------------------------------
.text:00000820
.text:00000820 loc_820:                                ; CODE XREF: CArchiveUpdateCallback::GetRootRawProp(ulong,void const * *,uint *,uint *)+5Bj
.text:00000820                 mov     ecx, [ebp+this]
.text:00000823                 cmp     dword ptr [ecx+74h], 0
.text:00000827                 jz      short loc_87E
.text:00000829                 mov     edx, [ebp+this]
.text:0000082C                 mov     eax, [edx+74h]
.text:0000082F                 cmp     dword ptr [eax+48h], 0
.text:00000833                 jge     short loc_83C
.text:00000835                 xor     eax, eax
.text:00000837                 jmp     loc_8D5
.text:0000083C ; ---------------------------------------------------------------------------
.text:0000083C
.text:0000083C loc_83C:                                ; CODE XREF: CArchiveUpdateCallback::GetRootRawProp(ulong,void const * *,uint *,uint *)+77j
.text:0000083C                 mov     ecx, [ebp+this]
.text:0000083F                 mov     edx, [ecx+74h]
.text:00000842                 mov     eax, [edx+48h]
.text:00000845                 push    eax
.text:00000846                 mov     ecx, [ebp+this]
.text:00000849                 mov     ecx, [ecx+70h]
.text:0000084C                 add     ecx, 68h ; 'h'
.text:0000084F                 call    ??A?$CObjectVector@V?$CBuffer@E@@@@QBEABV?$CBuffer@E@@I@Z ; CObjectVector<CBuffer<uchar>>::operator[](uint)
.text:00000854                 mov     [ebp+var_4], eax
.text:00000857                 mov     ecx, [ebp+var_4]
.text:0000085A                 call    ??B?$CBuffer@E@@QBEPBEXZ ; CBuffer<uchar>::operator uchar const *(void)
.text:0000085F                 mov     edx, [ebp+arg_8]
.text:00000862                 mov     [edx], eax
.text:00000864                 mov     ecx, [ebp+var_4]
.text:00000867                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:0000086C                 mov     ecx, [ebp+arg_C]
.text:0000086F                 mov     [ecx], eax
.text:00000871                 mov     edx, [ebp+arg_10]
.text:00000874                 mov     dword ptr [edx], 1
.text:0000087A                 xor     eax, eax
.text:0000087C                 jmp     short loc_8D5
.text:0000087E ; ---------------------------------------------------------------------------
.text:0000087E
.text:0000087E loc_87E:                                ; CODE XREF: CArchiveUpdateCallback::GetRootRawProp(ulong,void const * *,uint *,uint *)+6Bj
.text:0000087E                 mov     eax, [ebp+this]
.text:00000881                 cmp     dword ptr [eax+78h], 0
.text:00000885                 jz      short loc_8D3
.text:00000887                 mov     ecx, [ebp+this]
.text:0000088A                 mov     ecx, [ecx+78h]
.text:0000088D                 add     ecx, 0Ch
.text:00000890                 call    ??B?$CMyComPtr@UIArchiveGetRootProps@@@@QBEPAUIArchiveGetRootProps@@XZ ; CMyComPtr<IArchiveGetRootProps>::operator IArchiveGetRootProps *(void)
.text:00000895                 test    eax, eax
.text:00000897                 jz      short loc_8D3
.text:00000899                 mov     edx, [ebp+this]
.text:0000089C                 mov     ecx, [edx+78h]
.text:0000089F                 add     ecx, 0Ch
.text:000008A2                 call    ??C?$CMyComPtr@UIArchiveGetRootProps@@@@QBEPAUIArchiveGetRootProps@@XZ ; CMyComPtr<IArchiveGetRootProps>::operator->(void)
.text:000008A7                 mov     [ebp+var_8], eax
.text:000008AA                 mov     esi, esp
.text:000008AC                 mov     eax, [ebp+arg_10]
.text:000008AF                 push    eax
.text:000008B0                 mov     ecx, [ebp+arg_C]
.text:000008B3                 push    ecx
.text:000008B4                 mov     edx, [ebp+arg_8]
.text:000008B7                 push    edx
.text:000008B8                 mov     eax, [ebp+arg_4]
.text:000008BB                 push    eax
.text:000008BC                 mov     ecx, [ebp+var_8]
.text:000008BF                 push    ecx
.text:000008C0                 mov     edx, [ebp+var_8]
.text:000008C3                 mov     eax, [edx]
.text:000008C5                 mov     ecx, [eax+10h]
.text:000008C8                 call    ecx
.text:000008CA                 cmp     esi, esp
.text:000008CC                 call    __RTC_CheckEsp
.text:000008D1                 jmp     short loc_8D5
.text:000008D3 ; ---------------------------------------------------------------------------
.text:000008D3
.text:000008D3 loc_8D3:                                ; CODE XREF: CArchiveUpdateCallback::GetRootRawProp(ulong,void const * *,uint *,uint *)+49j
.text:000008D3                                         ; CArchiveUpdateCallback::GetRootRawProp(ulong,void const * *,uint *,uint *)+C9j ...
.text:000008D3                 xor     eax, eax
.text:000008D5
.text:000008D5 loc_8D5:                                ; CODE XREF: CArchiveUpdateCallback::GetRootRawProp(ulong,void const * *,uint *,uint *)+40j
.text:000008D5                                         ; CArchiveUpdateCallback::GetRootRawProp(ulong,void const * *,uint *,uint *)+5Fj ...
.text:000008D5                 pop     esi
.text:000008D6                 add     esp, 8
.text:000008D9                 cmp     ebp, esp
.text:000008DB                 call    __RTC_CheckEsp
.text:000008E0                 mov     esp, ebp
.text:000008E2                 pop     ebp
.text:000008E3                 retn    14h
.text:000008E3 ?GetRootRawProp@CArchiveUpdateCallback@@UAGJKPAPBXPAI1@Z endp
.text:000008E3
.text:000008E3 ; ---------------------------------------------------------------------------
.text:000008E6                 db 6 dup(0CCh)
.text:000008EC
.text:000008EC ; =============== S U B R O U T I N E =======================================
.text:000008EC
.text:000008EC ; Attributes: bp-based frame
.text:000008EC
.text:000008EC ; __int32 __stdcall CArchiveUpdateCallback::GetRawProp(CArchiveUpdateCallback *this, unsigned int, unsigned __int32, const void **, unsigned int *, unsigned int *)
.text:000008EC                 public ?GetRawProp@CArchiveUpdateCallback@@UAGJIKPAPBXPAI1@Z
.text:000008EC ?GetRawProp@CArchiveUpdateCallback@@UAGJIKPAPBXPAI1@Z proc near
.text:000008EC                                         ; DATA XREF: .rdata:00003354o
.text:000008EC
.text:000008EC var_1C          = dword ptr -1Ch
.text:000008EC var_18          = dword ptr -18h
.text:000008EC var_14          = dword ptr -14h
.text:000008EC var_10          = dword ptr -10h
.text:000008EC var_C           = dword ptr -0Ch
.text:000008EC var_8           = dword ptr -8
.text:000008EC var_4           = dword ptr -4
.text:000008EC this            = dword ptr  8
.text:000008EC arg_4           = dword ptr  0Ch
.text:000008EC arg_8           = dword ptr  10h
.text:000008EC arg_C           = dword ptr  14h
.text:000008EC arg_10          = dword ptr  18h
.text:000008EC arg_14          = dword ptr  1Ch
.text:000008EC
.text:000008EC                 push    ebp
.text:000008ED                 mov     ebp, esp
.text:000008EF                 sub     esp, 1Ch
.text:000008F2                 push    esi
.text:000008F3                 mov     eax, 0CCCCCCCCh
.text:000008F8                 mov     [ebp+var_1C], eax
.text:000008FB                 mov     [ebp+var_18], eax
.text:000008FE                 mov     [ebp+var_14], eax
.text:00000901                 mov     [ebp+var_10], eax
.text:00000904                 mov     [ebp+var_C], eax
.text:00000907                 mov     [ebp+var_8], eax
.text:0000090A                 mov     [ebp+var_4], eax
.text:0000090D                 mov     eax, [ebp+arg_C]
.text:00000910                 mov     dword ptr [eax], 0
.text:00000916                 mov     ecx, [ebp+arg_10]
.text:00000919                 mov     dword ptr [ecx], 0
.text:0000091F                 mov     edx, [ebp+arg_14]
.text:00000922                 mov     dword ptr [edx], 0
.text:00000928                 cmp     [ebp+arg_8], 3Eh ; '>'
.text:0000092C                 jz      short loc_938
.text:0000092E                 cmp     [ebp+arg_8], 59h ; 'Y'
.text:00000932                 jnz     loc_B13
.text:00000938
.text:00000938 loc_938:                                ; CODE XREF: CArchiveUpdateCallback::GetRawProp(uint,ulong,void const * *,uint *,uint *)+40j
.text:00000938                 mov     eax, [ebp+this]
.text:0000093B                 movzx   ecx, byte ptr [eax+91h]
.text:00000942                 test    ecx, ecx
.text:00000944                 jz      short loc_94D
.text:00000946                 xor     eax, eax
.text:00000948                 jmp     loc_B15
.text:0000094D ; ---------------------------------------------------------------------------
.text:0000094D
.text:0000094D loc_94D:                                ; CODE XREF: CArchiveUpdateCallback::GetRawProp(uint,ulong,void const * *,uint *,uint *)+58j
.text:0000094D                 mov     edx, [ebp+arg_4]
.text:00000950                 push    edx
.text:00000951                 mov     eax, [ebp+this]
.text:00000954                 mov     ecx, [eax+88h]
.text:0000095A                 call    ??A?$CRecordVector@UCUpdatePair2@@@@QBEABUCUpdatePair2@@I@Z ; CRecordVector<CUpdatePair2>::operator[](uint)
.text:0000095F                 mov     [ebp+var_4], eax
.text:00000962                 mov     ecx, [ebp+var_4]
.text:00000965                 movzx   edx, byte ptr [ecx+2]
.text:00000969                 test    edx, edx
.text:0000096B                 jz      loc_A09
.text:00000971                 mov     ecx, [ebp+var_4] ; this
.text:00000974                 call    ?ExistInArchive@CUpdatePair2@@QBE_NXZ ; CUpdatePair2::ExistInArchive(void)
.text:00000979                 movzx   eax, al
.text:0000097C                 test    eax, eax
.text:0000097E                 jz      loc_A09
.text:00000984                 mov     ecx, [ebp+this]
.text:00000987                 mov     ecx, [ecx+7Ch]
.text:0000098A                 add     ecx, 8
.text:0000098D                 call    ??B?$CMyComPtr@UIArchiveGetRawProps@@@@QBEPAUIArchiveGetRawProps@@XZ ; CMyComPtr<IArchiveGetRawProps>::operator IArchiveGetRawProps *(void)
.text:00000992                 test    eax, eax
.text:00000994                 jz      short loc_A09
.text:00000996                 mov     edx, [ebp+this]
.text:00000999                 cmp     dword ptr [edx+84h], 0
.text:000009A0                 jz      short loc_9BF
.text:000009A2                 mov     eax, [ebp+var_4]
.text:000009A5                 mov     ecx, [eax+8]
.text:000009A8                 push    ecx
.text:000009A9                 mov     edx, [ebp+this]
.text:000009AC                 mov     ecx, [edx+84h]
.text:000009B2                 call    ??A?$CObjectVector@UCArcItem@@@@QBEABUCArcItem@@I@Z ; CObjectVector<CArcItem>::operator[](uint)
.text:000009B7                 mov     eax, [eax+24h]
.text:000009BA                 mov     [ebp+var_18], eax
.text:000009BD                 jmp     short loc_9C8
.text:000009BF ; ---------------------------------------------------------------------------
.text:000009BF
.text:000009BF loc_9BF:                                ; CODE XREF: CArchiveUpdateCallback::GetRawProp(uint,ulong,void const * *,uint *,uint *)+B4j
.text:000009BF                 mov     ecx, [ebp+var_4]
.text:000009C2                 mov     edx, [ecx+8]
.text:000009C5                 mov     [ebp+var_18], edx
.text:000009C8
.text:000009C8 loc_9C8:                                ; CODE XREF: CArchiveUpdateCallback::GetRawProp(uint,ulong,void const * *,uint *,uint *)+D1j
.text:000009C8                 mov     eax, [ebp+this]
.text:000009CB                 mov     ecx, [eax+7Ch]
.text:000009CE                 add     ecx, 8
.text:000009D1                 call    ??C?$CMyComPtr@UIArchiveGetRawProps@@@@QBEPAUIArchiveGetRawProps@@XZ ; CMyComPtr<IArchiveGetRawProps>::operator->(void)
.text:000009D6                 mov     [ebp+var_1C], eax
.text:000009D9                 mov     esi, esp
.text:000009DB                 mov     ecx, [ebp+arg_14]
.text:000009DE                 push    ecx
.text:000009DF                 mov     edx, [ebp+arg_10]
.text:000009E2                 push    edx
.text:000009E3                 mov     eax, [ebp+arg_C]
.text:000009E6                 push    eax
.text:000009E7                 mov     ecx, [ebp+arg_8]
.text:000009EA                 push    ecx
.text:000009EB                 mov     edx, [ebp+var_18]
.text:000009EE                 push    edx
.text:000009EF                 mov     eax, [ebp+var_1C]
.text:000009F2                 push    eax
.text:000009F3                 mov     ecx, [ebp+var_1C]
.text:000009F6                 mov     edx, [ecx]
.text:000009F8                 mov     eax, [edx+10h]
.text:000009FB                 call    eax
.text:000009FD                 cmp     esi, esp
.text:000009FF                 call    __RTC_CheckEsp
.text:00000A04                 jmp     loc_B15
.text:00000A09 ; ---------------------------------------------------------------------------
.text:00000A09
.text:00000A09 loc_A09:                                ; CODE XREF: CArchiveUpdateCallback::GetRawProp(uint,ulong,void const * *,uint *,uint *)+7Fj
.text:00000A09                                         ; CArchiveUpdateCallback::GetRawProp(uint,ulong,void const * *,uint *,uint *)+92j ...
.text:00000A09                 mov     ecx, [ebp+arg_4]
.text:00000A0C                 push    ecx
.text:00000A0D                 mov     edx, [ebp+this]
.text:00000A10                 mov     ecx, [edx+88h]
.text:00000A16                 call    ??A?$CRecordVector@UCUpdatePair2@@@@QBEABUCUpdatePair2@@I@Z ; CRecordVector<CUpdatePair2>::operator[](uint)
.text:00000A1B                 mov     [ebp+var_8], eax
.text:00000A1E                 mov     eax, [ebp+var_8]
.text:00000A21                 movzx   ecx, byte ptr [eax+3]
.text:00000A25                 test    ecx, ecx
.text:00000A27                 jz      short loc_A30
.text:00000A29                 xor     eax, eax
.text:00000A2B                 jmp     loc_B15
.text:00000A30 ; ---------------------------------------------------------------------------
.text:00000A30
.text:00000A30 loc_A30:                                ; CODE XREF: CArchiveUpdateCallback::GetRawProp(uint,ulong,void const * *,uint *,uint *)+13Bj
.text:00000A30                 mov     edx, [ebp+var_8]
.text:00000A33                 mov     eax, [edx+4]
.text:00000A36                 push    eax
.text:00000A37                 mov     ecx, [ebp+this]
.text:00000A3A                 mov     ecx, [ecx+74h]
.text:00000A3D                 add     ecx, 24h ; '$'
.text:00000A40                 call    ??A?$CObjectVector@UCDirItem@@@@QBEABUCDirItem@@I@Z ; CObjectVector<CDirItem>::operator[](uint)
.text:00000A45                 mov     [ebp+var_C], eax
.text:00000A48                 cmp     [ebp+arg_8], 3Eh ; '>'
.text:00000A4C                 jnz     short loc_AB0
.text:00000A4E                 mov     edx, [ebp+this]
.text:00000A51                 movzx   eax, byte ptr [edx+93h]
.text:00000A58                 test    eax, eax
.text:00000A5A                 jnz     short loc_A63
.text:00000A5C                 xor     eax, eax
.text:00000A5E                 jmp     loc_B15
.text:00000A63 ; ---------------------------------------------------------------------------
.text:00000A63
.text:00000A63 loc_A63:                                ; CODE XREF: CArchiveUpdateCallback::GetRawProp(uint,ulong,void const * *,uint *,uint *)+16Ej
.text:00000A63                 mov     ecx, [ebp+var_C]
.text:00000A66                 cmp     dword ptr [ecx+48h], 0
.text:00000A6A                 jge     short loc_A73
.text:00000A6C                 xor     eax, eax
.text:00000A6E                 jmp     loc_B15
.text:00000A73 ; ---------------------------------------------------------------------------
.text:00000A73
.text:00000A73 loc_A73:                                ; CODE XREF: CArchiveUpdateCallback::GetRawProp(uint,ulong,void const * *,uint *,uint *)+17Ej
.text:00000A73                 mov     edx, [ebp+var_C]
.text:00000A76                 mov     eax, [edx+48h]
.text:00000A79                 push    eax
.text:00000A7A                 mov     ecx, [ebp+this]
.text:00000A7D                 mov     ecx, [ecx+74h]
.text:00000A80                 add     ecx, 68h ; 'h'
.text:00000A83                 call    ??A?$CObjectVector@V?$CBuffer@E@@@@QBEABV?$CBuffer@E@@I@Z ; CObjectVector<CBuffer<uchar>>::operator[](uint)
.text:00000A88                 mov     [ebp+var_10], eax
.text:00000A8B                 mov     ecx, [ebp+var_10]
.text:00000A8E                 call    ??B?$CBuffer@E@@QBEPBEXZ ; CBuffer<uchar>::operator uchar const *(void)
.text:00000A93                 mov     edx, [ebp+arg_C]
.text:00000A96                 mov     [edx], eax
.text:00000A98                 mov     ecx, [ebp+var_10]
.text:00000A9B                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:00000AA0                 mov     ecx, [ebp+arg_10]
.text:00000AA3                 mov     [ecx], eax
.text:00000AA5                 mov     edx, [ebp+arg_14]
.text:00000AA8                 mov     dword ptr [edx], 1
.text:00000AAE                 jmp     short loc_B0F
.text:00000AB0 ; ---------------------------------------------------------------------------
.text:00000AB0
.text:00000AB0 loc_AB0:                                ; CODE XREF: CArchiveUpdateCallback::GetRawProp(uint,ulong,void const * *,uint *,uint *)+160j
.text:00000AB0                 mov     eax, [ebp+this]
.text:00000AB3                 movzx   ecx, byte ptr [eax+95h]
.text:00000ABA                 test    ecx, ecx
.text:00000ABC                 jnz     short loc_AC2
.text:00000ABE                 xor     eax, eax
.text:00000AC0                 jmp     short loc_B15
.text:00000AC2 ; ---------------------------------------------------------------------------
.text:00000AC2
.text:00000AC2 loc_AC2:                                ; CODE XREF: CArchiveUpdateCallback::GetRawProp(uint,ulong,void const * *,uint *,uint *)+1D0j
.text:00000AC2                 mov     edx, [ebp+var_C]
.text:00000AC5                 add     edx, 34h ; '4'
.text:00000AC8                 mov     [ebp+var_14], edx
.text:00000ACB                 mov     ecx, [ebp+var_14]
.text:00000ACE                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:00000AD3                 test    eax, eax
.text:00000AD5                 jnz     short loc_AE0
.text:00000AD7                 mov     eax, [ebp+var_C]
.text:00000ADA                 add     eax, 2Ch ; ','
.text:00000ADD                 mov     [ebp+var_14], eax
.text:00000AE0
.text:00000AE0 loc_AE0:                                ; CODE XREF: CArchiveUpdateCallback::GetRawProp(uint,ulong,void const * *,uint *,uint *)+1E9j
.text:00000AE0                 mov     ecx, [ebp+var_14]
.text:00000AE3                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:00000AE8                 test    eax, eax
.text:00000AEA                 jz      short loc_B0F
.text:00000AEC                 mov     ecx, [ebp+var_14]
.text:00000AEF                 call    ??B?$CBuffer@E@@QBEPBEXZ ; CBuffer<uchar>::operator uchar const *(void)
.text:00000AF4                 mov     ecx, [ebp+arg_C]
.text:00000AF7                 mov     [ecx], eax
.text:00000AF9                 mov     ecx, [ebp+var_14]
.text:00000AFC                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:00000B01                 mov     edx, [ebp+arg_10]
.text:00000B04                 mov     [edx], eax
.text:00000B06                 mov     eax, [ebp+arg_14]
.text:00000B09                 mov     dword ptr [eax], 1
.text:00000B0F
.text:00000B0F loc_B0F:                                ; CODE XREF: CArchiveUpdateCallback::GetRawProp(uint,ulong,void const * *,uint *,uint *)+1C2j
.text:00000B0F                                         ; CArchiveUpdateCallback::GetRawProp(uint,ulong,void const * *,uint *,uint *)+1FEj
.text:00000B0F                 xor     eax, eax
.text:00000B11                 jmp     short loc_B15
.text:00000B13 ; ---------------------------------------------------------------------------
.text:00000B13
.text:00000B13 loc_B13:                                ; CODE XREF: CArchiveUpdateCallback::GetRawProp(uint,ulong,void const * *,uint *,uint *)+46j
.text:00000B13                 xor     eax, eax
.text:00000B15
.text:00000B15 loc_B15:                                ; CODE XREF: CArchiveUpdateCallback::GetRawProp(uint,ulong,void const * *,uint *,uint *)+5Cj
.text:00000B15                                         ; CArchiveUpdateCallback::GetRawProp(uint,ulong,void const * *,uint *,uint *)+118j ...
.text:00000B15                 pop     esi
.text:00000B16                 add     esp, 1Ch
.text:00000B19                 cmp     ebp, esp
.text:00000B1B                 call    __RTC_CheckEsp
.text:00000B20                 mov     esp, ebp
.text:00000B22                 pop     ebp
.text:00000B23                 retn    18h
.text:00000B23 ?GetRawProp@CArchiveUpdateCallback@@UAGJIKPAPBXPAI1@Z endp
.text:00000B23
.text:00000B23 ; ---------------------------------------------------------------------------
.text:00000B26                 db 6 dup(0CCh)
.text:00000B2C
.text:00000B2C ; =============== S U B R O U T I N E =======================================
.text:00000B2C
.text:00000B2C ; Attributes: bp-based frame
.text:00000B2C
.text:00000B2C ; __int32 CArchiveUpdateCallback::GetProperty(CArchiveUpdateCallback *__hidden this, unsigned int, unsigned __int32, struct tagPROPVARIANT *)
.text:00000B2C                 public ?GetProperty@CArchiveUpdateCallback@@UAGJIKPAUtagPROPVARIANT@@@Z
.text:00000B2C ?GetProperty@CArchiveUpdateCallback@@UAGJIKPAUtagPROPVARIANT@@@Z proc near
.text:00000B2C                                         ; DATA XREF: .rdata:000033B0o
.text:00000B2C
.text:00000B2C var_168         = byte ptr -168h
.text:00000B2C var_165         = byte ptr -165h
.text:00000B2C var_164         = dword ptr -164h
.text:00000B2C var_160         = dword ptr -160h
.text:00000B2C var_15C         = dword ptr -15Ch
.text:00000B2C var_158         = dword ptr -158h
.text:00000B2C var_151         = byte ptr -151h
.text:00000B2C var_150         = dword ptr -150h
.text:00000B2C var_14C         = dword ptr -14Ch
.text:00000B2C var_148         = dword ptr -148h
.text:00000B2C var_144         = dword ptr -144h
.text:00000B2C var_140         = dword ptr -140h
.text:00000B2C var_13C         = dword ptr -13Ch
.text:00000B2C var_135         = byte ptr -135h
.text:00000B2C var_134         = dword ptr -134h
.text:00000B2C var_130         = dword ptr -130h
.text:00000B2C var_12C         = dword ptr -12Ch
.text:00000B2C var_128         = dword ptr -128h
.text:00000B2C var_124         = dword ptr -124h
.text:00000B2C var_120         = dword ptr -120h
.text:00000B2C var_11C         = dword ptr -11Ch
.text:00000B2C var_118         = dword ptr -118h
.text:00000B2C var_111         = byte ptr -111h
.text:00000B2C var_110         = dword ptr -110h
.text:00000B2C var_10C         = dword ptr -10Ch
.text:00000B2C var_108         = dword ptr -108h
.text:00000B2C var_101         = byte ptr -101h
.text:00000B2C var_100         = dword ptr -100h
.text:00000B2C var_F9          = byte ptr -0F9h
.text:00000B2C var_F8          = dword ptr -0F8h
.text:00000B2C var_F4          = dword ptr -0F4h
.text:00000B2C var_F0          = dword ptr -0F0h
.text:00000B2C var_EC          = dword ptr -0ECh
.text:00000B2C var_E8          = dword ptr -0E8h
.text:00000B2C var_E4          = dword ptr -0E4h
.text:00000B2C var_DC          = dword ptr -0DCh
.text:00000B2C var_D8          = byte ptr -0D8h
.text:00000B2C var_CC          = dword ptr -0CCh
.text:00000B2C var_C8          = dword ptr -0C8h
.text:00000B2C var_C4          = dword ptr -0C4h
.text:00000B2C var_C0          = byte ptr -0C0h
.text:00000B2C var_B4          = dword ptr -0B4h
.text:00000B2C var_B0          = byte ptr -0B0h
.text:00000B2C var_A4          = dword ptr -0A4h
.text:00000B2C var_A0          = dword ptr -0A0h
.text:00000B2C var_9C          = dword ptr -9Ch
.text:00000B2C var_98          = dword ptr -98h
.text:00000B2C var_90          = word ptr -90h
.text:00000B2C var_7C          = byte ptr -7Ch
.text:00000B2C var_68          = byte ptr -68h
.text:00000B2C var_54          = byte ptr -54h
.text:00000B2C var_30          = dword ptr -30h
.text:00000B2C var_28          = byte ptr -28h
.text:00000B2C var_14          = dword ptr -14h
.text:00000B2C var_10          = dword ptr -10h
.text:00000B2C var_C           = dword ptr -0Ch
.text:00000B2C var_4           = dword ptr -4
.text:00000B2C this            = dword ptr  8
.text:00000B2C arg_4           = dword ptr  0Ch
.text:00000B2C arg_8           = dword ptr  10h
.text:00000B2C arg_C           = dword ptr  14h
.text:00000B2C
.text:00000B2C ; FUNCTION CHUNK AT .text:000012B2 SIZE 00000032 BYTES
.text:00000B2C
.text:00000B2C                 push    ebp
.text:00000B2D                 mov     ebp, esp
.text:00000B2F                 push    0FFFFFFFFh
.text:00000B31                 push    offset __ehhandler$?GetProperty@CArchiveUpdateCallback@@UAGJIKPAUtagPROPVARIANT@@@Z
.text:00000B36                 mov     eax, large fs:0
.text:00000B3C                 push    eax
.text:00000B3D                 push    ecx
.text:00000B3E                 sub     esp, 158h
.text:00000B44                 push    ebx
.text:00000B45                 push    esi             ; struct UString *
.text:00000B46                 push    edi             ; struct UString *
.text:00000B47                 lea     edi, [ebp+var_168]
.text:00000B4D                 mov     ecx, 56h ; 'V'
.text:00000B52                 mov     eax, 0CCCCCCCCh
.text:00000B57                 rep stosd
.text:00000B59                 mov     eax, dword ptr ds:___security_cookie
.text:00000B5E                 xor     eax, ebp
.text:00000B60                 push    eax
.text:00000B61                 lea     eax, [ebp+var_C]
.text:00000B64                 mov     large fs:0, eax
.text:00000B6A                 mov     [ebp+var_10], esp
.text:00000B6D                 mov     [ebp+var_4], 0
.text:00000B74                 mov     eax, [ebp+arg_4]
.text:00000B77                 push    eax
.text:00000B78                 mov     ecx, [ebp+this]
.text:00000B7B                 mov     ecx, [ecx+94h]
.text:00000B81                 call    ??A?$CRecordVector@UCUpdatePair2@@@@QBEABUCUpdatePair2@@I@Z ; CRecordVector<CUpdatePair2>::operator[](uint)
.text:00000B86                 mov     [ebp+var_E4], eax
.text:00000B8C                 mov     edx, [ebp+var_E4]
.text:00000B92                 mov     [ebp+var_14], edx
.text:00000B95                 lea     ecx, [ebp+var_28] ; this
.text:00000B98                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:00000B9D                 mov     [ebp+var_E8], eax
.text:00000BA3                 mov     byte ptr [ebp+var_4], 1
.text:00000BA7                 mov     eax, [ebp+var_14]
.text:00000BAA                 movzx   ecx, byte ptr [eax]
.text:00000BAD                 test    ecx, ecx
.text:00000BAF                 jz      loc_F0D
.text:00000BB5                 cmp     [ebp+arg_8], 36h ; '6'
.text:00000BB9                 jnz     loc_DF0
.text:00000BBF                 mov     edx, [ebp+this]
.text:00000BC2                 mov     eax, [ebp+arg_4]
.text:00000BC5                 cmp     eax, [edx+38h]
.text:00000BC8                 jnz     short loc_BF7
.text:00000BCA                 mov     ecx, [ebp+arg_C]
.text:00000BCD                 push    ecx             ; struct tagPROPVARIANT *
.text:00000BCE                 lea     ecx, [ebp+var_28] ; this
.text:00000BD1                 call    ?Detach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z ; NWindows::NCOM::CPropVariant::Detach(tagPROPVARIANT *)
.text:00000BD6                 mov     [ebp+var_A4], 0
.text:00000BE0                 mov     byte ptr [ebp+var_4], 0
.text:00000BE4                 lea     ecx, [ebp+var_28] ; this
.text:00000BE7                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00000BEC                 mov     eax, [ebp+var_A4]
.text:00000BF2                 jmp     loc_12B2
.text:00000BF7 ; ---------------------------------------------------------------------------
.text:00000BF7
.text:00000BF7 loc_BF7:                                ; CODE XREF: CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+9Cj
.text:00000BF7                 mov     edx, [ebp+var_14]
.text:00000BFA                 cmp     dword ptr [edx+4], 0
.text:00000BFE                 jl      loc_DEB
.text:00000C04                 mov     eax, [ebp+var_14]
.text:00000C07                 mov     ecx, [eax+4]
.text:00000C0A                 push    ecx
.text:00000C0B                 mov     edx, [ebp+this]
.text:00000C0E                 mov     ecx, [edx+80h]
.text:00000C14                 add     ecx, 24h ; '$'
.text:00000C17                 call    ??A?$CObjectVector@UCDirItem@@@@QBEABUCDirItem@@I@Z ; CObjectVector<CDirItem>::operator[](uint)
.text:00000C1C                 mov     [ebp+var_EC], eax
.text:00000C22                 mov     eax, [ebp+var_EC]
.text:00000C28                 mov     [ebp+var_30], eax
.text:00000C2B                 lea     ecx, [ebp+var_54] ; this
.text:00000C2E                 call    ??0CReparseAttr@NFile@NWindows@@QAE@XZ ; NWindows::NFile::CReparseAttr::CReparseAttr(void)
.text:00000C33                 mov     [ebp+var_F0], eax
.text:00000C39                 mov     byte ptr [ebp+var_4], 2
.text:00000C3D                 mov     ecx, [ebp+var_30]
.text:00000C40                 add     ecx, 2Ch ; ','
.text:00000C43                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:00000C48                 mov     [ebp+var_F4], eax
.text:00000C4E                 mov     ecx, [ebp+var_30]
.text:00000C51                 add     ecx, 2Ch ; ','
.text:00000C54                 call    ??B?$CBuffer@E@@QBEPBEXZ ; CBuffer<uchar>::operator uchar const *(void)
.text:00000C59                 mov     [ebp+var_F8], eax
.text:00000C5F                 mov     ecx, [ebp+var_F4]
.text:00000C65                 push    ecx             ; unsigned int
.text:00000C66                 mov     edx, [ebp+var_F8]
.text:00000C6C                 push    edx             ; unsigned __int8 *
.text:00000C6D                 lea     ecx, [ebp+var_54] ; this
.text:00000C70                 call    ?Parse@CReparseAttr@NFile@NWindows@@QAE_NPBEI@Z ; NWindows::NFile::CReparseAttr::Parse(uchar const *,uint)
.text:00000C75                 mov     [ebp+var_F9], al
.text:00000C7B                 movzx   eax, [ebp+var_F9]
.text:00000C82                 test    eax, eax
.text:00000C84                 jz      loc_DDF
.text:00000C8A                 lea     ecx, [ebp+var_68]
.text:00000C8D                 push    ecx
.text:00000C8E                 lea     ecx, [ebp+var_54]
.text:00000C91                 call    ?GetPath@CReparseAttr@NFile@NWindows@@QBE?AVUString@@XZ ; NWindows::NFile::CReparseAttr::GetPath(void)
.text:00000C96                 mov     [ebp+var_100], eax
.text:00000C9C                 mov     byte ptr [ebp+var_4], 3
.text:00000CA0                 lea     ecx, [ebp+var_54] ; this
.text:00000CA3                 call    ?IsRelative@CReparseAttr@NFile@NWindows@@QBE_NXZ ; NWindows::NFile::CReparseAttr::IsRelative(void)
.text:00000CA8                 mov     [ebp+var_101], al
.text:00000CAE                 movzx   edx, [ebp+var_101]
.text:00000CB5                 test    edx, edx
.text:00000CB7                 jz      short loc_CCA
.text:00000CB9                 lea     eax, [ebp+var_68]
.text:00000CBC                 push    eax
.text:00000CBD                 lea     ecx, [ebp+var_28]
.text:00000CC0                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABVUString@@@Z ; NWindows::NCOM::CPropVariant::operator=(UString const &)
.text:00000CC5                 jmp     loc_D9A
.text:00000CCA ; ---------------------------------------------------------------------------
.text:00000CCA
.text:00000CCA loc_CCA:                                ; CODE XREF: CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+18Bj
.text:00000CCA                 mov     ecx, [ebp+var_14]
.text:00000CCD                 mov     edx, [ecx+4]
.text:00000CD0                 push    edx
.text:00000CD1                 lea     eax, [ebp+var_7C]
.text:00000CD4                 push    eax
.text:00000CD5                 mov     ecx, [ebp+this]
.text:00000CD8                 mov     ecx, [ecx+80h]
.text:00000CDE                 call    ?GetPhyPath@CDirItems@@QBE?AVUString@@I@Z ; CDirItems::GetPhyPath(uint)
.text:00000CE3                 mov     [ebp+var_108], eax
.text:00000CE9                 mov     byte ptr [ebp+var_4], 4
.text:00000CED                 lea     ecx, [ebp+var_90]
.text:00000CF3                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00000CF8                 mov     [ebp+var_10C], eax
.text:00000CFE                 mov     byte ptr [ebp+var_4], 5
.text:00000D02                 lea     ecx, [ebp+var_7C]
.text:00000D05                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00000D0A                 mov     [ebp+var_110], eax
.text:00000D10                 lea     edx, [ebp+var_90]
.text:00000D16                 push    edx             ; wchar_t *
.text:00000D17                 mov     eax, [ebp+var_110]
.text:00000D1D                 push    eax             ; this
.text:00000D1E                 call    ?MyGetFullPathName@NDir@NFile@NWindows@@YG_NPB_WAAVUString@@@Z ; NWindows::NFile::NDir::MyGetFullPathName(wchar_t const *,UString &)
.text:00000D23                 mov     [ebp+var_111], al
.text:00000D29                 movzx   ecx, [ebp+var_111]
.text:00000D30                 test    ecx, ecx
.text:00000D32                 jz      short loc_D7F
.text:00000D34                 lea     edx, [ebp+var_90]
.text:00000D3A                 push    edx
.text:00000D3B                 lea     eax, [ebp+var_68]
.text:00000D3E                 push    eax
.text:00000D3F                 lea     ecx, [ebp+var_B0]
.text:00000D45                 push    ecx
.text:00000D46                 call    ?GetRelativePath@@YG?AVUString@@ABV1@0@Z ; GetRelativePath(UString const &,UString const &)
.text:00000D4B                 mov     [ebp+var_118], eax
.text:00000D51                 mov     edx, [ebp+var_118]
.text:00000D57                 mov     [ebp+var_11C], edx
.text:00000D5D                 mov     byte ptr [ebp+var_4], 6
.text:00000D61                 mov     eax, [ebp+var_11C]
.text:00000D67                 push    eax
.text:00000D68                 lea     ecx, [ebp+var_28]
.text:00000D6B                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABVUString@@@Z ; NWindows::NCOM::CPropVariant::operator=(UString const &)
.text:00000D70                 mov     byte ptr [ebp+var_4], 5
.text:00000D74                 lea     ecx, [ebp+var_B0] ; this
.text:00000D7A                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000D7F
.text:00000D7F loc_D7F:                                ; CODE XREF: CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+206j
.text:00000D7F                 mov     byte ptr [ebp+var_4], 4
.text:00000D83                 lea     ecx, [ebp+var_90] ; this
.text:00000D89                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000D8E                 mov     byte ptr [ebp+var_4], 3
.text:00000D92                 lea     ecx, [ebp+var_7C] ; this
.text:00000D95                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000D9A
.text:00000D9A loc_D9A:                                ; CODE XREF: CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+199j
.text:00000D9A                 mov     ecx, [ebp+arg_C]
.text:00000D9D                 push    ecx             ; struct tagPROPVARIANT *
.text:00000D9E                 lea     ecx, [ebp+var_28] ; this
.text:00000DA1                 call    ?Detach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z ; NWindows::NCOM::CPropVariant::Detach(tagPROPVARIANT *)
.text:00000DA6                 mov     [ebp+var_B4], 0
.text:00000DB0                 mov     byte ptr [ebp+var_4], 2
.text:00000DB4                 lea     ecx, [ebp+var_68] ; this
.text:00000DB7                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000DBC                 mov     byte ptr [ebp+var_4], 1
.text:00000DC0                 lea     ecx, [ebp+var_54] ; this
.text:00000DC3                 call    ??1CReparseAttr@NFile@NWindows@@QAE@XZ ; NWindows::NFile::CReparseAttr::~CReparseAttr(void)
.text:00000DC8                 mov     byte ptr [ebp+var_4], 0
.text:00000DCC                 lea     ecx, [ebp+var_28] ; this
.text:00000DCF                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00000DD4                 mov     eax, [ebp+var_B4]
.text:00000DDA                 jmp     loc_12B2
.text:00000DDF ; ---------------------------------------------------------------------------
.text:00000DDF
.text:00000DDF loc_DDF:                                ; CODE XREF: CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+158j
.text:00000DDF                 mov     byte ptr [ebp+var_4], 1
.text:00000DE3                 lea     ecx, [ebp+var_54] ; this
.text:00000DE6                 call    ??1CReparseAttr@NFile@NWindows@@QAE@XZ ; NWindows::NFile::CReparseAttr::~CReparseAttr(void)
.text:00000DEB
.text:00000DEB loc_DEB:                                ; CODE XREF: CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+D2j
.text:00000DEB                 jmp     loc_F0D
.text:00000DF0 ; ---------------------------------------------------------------------------
.text:00000DF0
.text:00000DF0 loc_DF0:                                ; CODE XREF: CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+8Dj
.text:00000DF0                 cmp     [ebp+arg_8], 5Ah ; 'Z'
.text:00000DF4                 jnz     loc_F0D
.text:00000DFA                 mov     edx, [ebp+this]
.text:00000DFD                 mov     eax, [ebp+arg_4]
.text:00000E00                 cmp     eax, [edx+38h]
.text:00000E03                 jnz     loc_ED7
.text:00000E09                 mov     ecx, [ebp+this]
.text:00000E0C                 mov     edx, [ecx+3Ch]
.text:00000E0F                 push    edx
.text:00000E10                 mov     ecx, [ebp+this]
.text:00000E13                 add     ecx, 2Ch ; ','
.text:00000E16                 call    ??A?$CRecordVector@UCKeyKeyValPair@@@@QAEAAUCKeyKeyValPair@@I@Z ; CRecordVector<CKeyKeyValPair>::operator[](uint)
.text:00000E1B                 mov     [ebp+var_120], eax
.text:00000E21                 mov     eax, [ebp+var_120]
.text:00000E27                 mov     [ebp+var_98], eax
.text:00000E2D                 mov     ecx, [ebp+var_98]
.text:00000E33                 mov     edx, [ecx+10h]
.text:00000E36                 push    edx
.text:00000E37                 mov     eax, [ebp+this]
.text:00000E3A                 mov     ecx, [eax+94h]
.text:00000E40                 call    ??A?$CRecordVector@UCUpdatePair2@@@@QBEABUCUpdatePair2@@I@Z ; CRecordVector<CUpdatePair2>::operator[](uint)
.text:00000E45                 mov     [ebp+var_124], eax
.text:00000E4B                 mov     ecx, [ebp+var_124]
.text:00000E51                 mov     [ebp+var_9C], ecx
.text:00000E57                 mov     edx, [ebp+var_9C]
.text:00000E5D                 mov     eax, [edx+4]
.text:00000E60                 push    eax
.text:00000E61                 lea     ecx, [ebp+var_C0]
.text:00000E67                 push    ecx
.text:00000E68                 mov     edx, [ebp+this]
.text:00000E6B                 mov     ecx, [edx+80h]
.text:00000E71                 call    ?GetLogPath@CDirItems@@QBE?AVUString@@I@Z ; CDirItems::GetLogPath(uint)
.text:00000E76                 mov     [ebp+var_128], eax
.text:00000E7C                 mov     eax, [ebp+var_128]
.text:00000E82                 mov     [ebp+var_12C], eax
.text:00000E88                 mov     byte ptr [ebp+var_4], 7
.text:00000E8C                 mov     ecx, [ebp+var_12C]
.text:00000E92                 push    ecx
.text:00000E93                 lea     ecx, [ebp+var_28]
.text:00000E96                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABVUString@@@Z ; NWindows::NCOM::CPropVariant::operator=(UString const &)
.text:00000E9B                 mov     byte ptr [ebp+var_4], 1
.text:00000E9F                 lea     ecx, [ebp+var_C0] ; this
.text:00000EA5                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000EAA                 mov     edx, [ebp+arg_C]
.text:00000EAD                 push    edx             ; struct tagPROPVARIANT *
.text:00000EAE                 lea     ecx, [ebp+var_28] ; this
.text:00000EB1                 call    ?Detach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z ; NWindows::NCOM::CPropVariant::Detach(tagPROPVARIANT *)
.text:00000EB6                 mov     [ebp+var_C4], 0
.text:00000EC0                 mov     byte ptr [ebp+var_4], 0
.text:00000EC4                 lea     ecx, [ebp+var_28] ; this
.text:00000EC7                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00000ECC                 mov     eax, [ebp+var_C4]
.text:00000ED2                 jmp     loc_12B2
.text:00000ED7 ; ---------------------------------------------------------------------------
.text:00000ED7
.text:00000ED7 loc_ED7:                                ; CODE XREF: CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+2D7j
.text:00000ED7                 mov     eax, [ebp+var_14]
.text:00000EDA                 cmp     dword ptr [eax+4], 0
.text:00000EDE                 jl      short loc_F0D
.text:00000EE0                 mov     ecx, [ebp+arg_C]
.text:00000EE3                 push    ecx             ; struct tagPROPVARIANT *
.text:00000EE4                 lea     ecx, [ebp+var_28] ; this
.text:00000EE7                 call    ?Detach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z ; NWindows::NCOM::CPropVariant::Detach(tagPROPVARIANT *)
.text:00000EEC                 mov     [ebp+var_C8], 0
.text:00000EF6                 mov     byte ptr [ebp+var_4], 0
.text:00000EFA                 lea     ecx, [ebp+var_28] ; this
.text:00000EFD                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00000F02                 mov     eax, [ebp+var_C8]
.text:00000F08                 jmp     loc_12B2
.text:00000F0D ; ---------------------------------------------------------------------------
.text:00000F0D
.text:00000F0D loc_F0D:                                ; CODE XREF: CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+83j
.text:00000F0D                                         ; CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *):loc_DEBj ...
.text:00000F0D                 mov     edx, [ebp+var_14]
.text:00000F10                 movzx   eax, byte ptr [edx+3]
.text:00000F14                 test    eax, eax
.text:00000F16                 jz      short loc_F64
.text:00000F18                 cmp     [ebp+arg_8], 6
.text:00000F1C                 jz      short loc_F64
.text:00000F1E                 cmp     [ebp+arg_8], 3
.text:00000F22                 jz      short loc_F64
.text:00000F24                 cmp     [ebp+arg_8], 3Fh ; '?'
.text:00000F28                 jz      short loc_F64
.text:00000F2A                 mov     ecx, [ebp+arg_8]
.text:00000F2D                 mov     [ebp+var_130], ecx
.text:00000F33                 cmp     [ebp+var_130], 7
.text:00000F3A                 jz      short loc_F47
.text:00000F3C                 cmp     [ebp+var_130], 15h
.text:00000F43                 jz      short loc_F55
.text:00000F45                 jmp     short loc_F5F
.text:00000F47 ; ---------------------------------------------------------------------------
.text:00000F47
.text:00000F47 loc_F47:                                ; CODE XREF: CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+40Ej
.text:00000F47                 push    0
.text:00000F49                 push    0
.text:00000F4B                 lea     ecx, [ebp+var_28]
.text:00000F4E                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
.text:00000F53                 jmp     short loc_F5F
.text:00000F55 ; ---------------------------------------------------------------------------
.text:00000F55
.text:00000F55 loc_F55:                                ; CODE XREF: CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+417j
.text:00000F55                 push    1
.text:00000F57                 lea     ecx, [ebp+var_28]
.text:00000F5A                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_N@Z ; NWindows::NCOM::CPropVariant::operator=(bool)
.text:00000F5F
.text:00000F5F loc_F5F:                                ; CODE XREF: CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+419j
.text:00000F5F                                         ; CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+427j
.text:00000F5F                 jmp     $LN20
.text:00000F64 ; ---------------------------------------------------------------------------
.text:00000F64
.text:00000F64 loc_F64:                                ; CODE XREF: CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+3EAj
.text:00000F64                                         ; CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+3F0j ...
.text:00000F64                 cmp     [ebp+arg_8], 3
.text:00000F68                 jnz     short loc_FA2
.text:00000F6A                 mov     edx, [ebp+var_14]
.text:00000F6D                 cmp     dword ptr [edx+0Ch], 0
.text:00000F71                 jl      short loc_FA2
.text:00000F73                 mov     eax, [ebp+var_14]
.text:00000F76                 mov     ecx, [eax+0Ch]
.text:00000F79                 push    ecx
.text:00000F7A                 mov     edx, [ebp+this]
.text:00000F7D                 mov     ecx, [edx+98h]
.text:00000F83                 call    ??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[](uint)
.text:00000F88                 mov     [ebp+var_134], eax
.text:00000F8E                 mov     eax, [ebp+var_134]
.text:00000F94                 push    eax
.text:00000F95                 lea     ecx, [ebp+var_28]
.text:00000F98                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABVUString@@@Z ; NWindows::NCOM::CPropVariant::operator=(UString const &)
.text:00000F9D                 jmp     $LN20
.text:00000FA2 ; ---------------------------------------------------------------------------
.text:00000FA2
.text:00000FA2 loc_FA2:                                ; CODE XREF: CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+43Cj
.text:00000FA2                                         ; CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+445j
.text:00000FA2                 cmp     [ebp+arg_8], 32h ; '2'
.text:00000FA6                 jnz     short loc_FC1
.text:00000FA8                 mov     ecx, [ebp+var_14]
.text:00000FAB                 cmp     dword ptr [ecx+0Ch], 0
.text:00000FAF                 jl      short loc_FC1
.text:00000FB1                 mov     edx, [ebp+var_14]
.text:00000FB4                 movzx   eax, byte ptr [edx+10h]
.text:00000FB8                 test    eax, eax
.text:00000FBA                 jz      short loc_FC1
.text:00000FBC                 jmp     $LN20
.text:00000FC1 ; ---------------------------------------------------------------------------
.text:00000FC1
.text:00000FC1 loc_FC1:                                ; CODE XREF: CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+47Aj
.text:00000FC1                                         ; CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+483j ...
.text:00000FC1                 mov     ecx, [ebp+var_14]
.text:00000FC4                 movzx   edx, byte ptr [ecx+2]
.text:00000FC8                 test    edx, edx
.text:00000FCA                 jnz     short loc_FEE
.text:00000FCC                 mov     eax, [ebp+this]
.text:00000FCF                 movzx   ecx, byte ptr [eax+9Eh]
.text:00000FD6                 test    ecx, ecx
.text:00000FD8                 jz      loc_10EA
.text:00000FDE                 cmp     [ebp+arg_8], 3
.text:00000FE2                 jz      short loc_FEE
.text:00000FE4                 cmp     [ebp+arg_8], 3Fh ; '?'
.text:00000FE8                 jnz     loc_10EA
.text:00000FEE
.text:00000FEE loc_FEE:                                ; CODE XREF: CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+49Ej
.text:00000FEE                                         ; CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+4B6j
.text:00000FEE                 mov     ecx, [ebp+var_14] ; this
.text:00000FF1                 call    ?ExistInArchive@CUpdatePair2@@QBE_NXZ ; CUpdatePair2::ExistInArchive(void)
.text:00000FF6                 mov     [ebp+var_135], al
.text:00000FFC                 movzx   edx, [ebp+var_135]
.text:00001003                 test    edx, edx
.text:00001005                 jz      loc_10EA
.text:0000100B                 mov     ecx, [ebp+this]
.text:0000100E                 add     ecx, 8Ch ; 'î'
.text:00001014                 call    ??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *(void)
.text:00001019                 mov     [ebp+var_13C], eax
.text:0000101F                 cmp     [ebp+var_13C], 0
.text:00001026                 jz      loc_10EA
.text:0000102C                 mov     eax, [ebp+this]
.text:0000102F                 cmp     dword ptr [eax+90h], 0
.text:00001036                 jz      short loc_1064
.text:00001038                 mov     ecx, [ebp+var_14]
.text:0000103B                 mov     edx, [ecx+8]
.text:0000103E                 push    edx
.text:0000103F                 mov     eax, [ebp+this]
.text:00001042                 mov     ecx, [eax+90h]
.text:00001048                 call    ??A?$CObjectVector@UCArcItem@@@@QBEABUCArcItem@@I@Z ; CObjectVector<CArcItem>::operator[](uint)
.text:0000104D                 mov     [ebp+var_140], eax
.text:00001053                 mov     ecx, [ebp+var_140]
.text:00001059                 mov     edx, [ecx+24h]
.text:0000105C                 mov     [ebp+var_144], edx
.text:00001062                 jmp     short loc_1070
.text:00001064 ; ---------------------------------------------------------------------------
.text:00001064
.text:00001064 loc_1064:                               ; CODE XREF: CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+50Aj
.text:00001064                 mov     eax, [ebp+var_14]
.text:00001067                 mov     ecx, [eax+8]
.text:0000106A                 mov     [ebp+var_144], ecx
.text:00001070
.text:00001070 loc_1070:                               ; CODE XREF: CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+536j
.text:00001070                 mov     ecx, [ebp+this]
.text:00001073                 add     ecx, 8Ch ; 'î'
.text:00001079                 call    ??C?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator->(void)
.text:0000107E                 mov     [ebp+var_148], eax
.text:00001084                 mov     edx, [ebp+var_148]
.text:0000108A                 mov     [ebp+var_14C], edx
.text:00001090                 mov     esi, esp
.text:00001092                 mov     eax, [ebp+arg_C]
.text:00001095                 push    eax
.text:00001096                 mov     ecx, [ebp+arg_8]
.text:00001099                 push    ecx
.text:0000109A                 mov     edx, [ebp+var_144]
.text:000010A0                 push    edx
.text:000010A1                 mov     eax, [ebp+var_14C]
.text:000010A7                 push    eax
.text:000010A8                 mov     ecx, [ebp+var_14C]
.text:000010AE                 mov     edx, [ecx]
.text:000010B0                 mov     eax, [edx+18h]
.text:000010B3                 call    eax
.text:000010B5                 cmp     esi, esp
.text:000010B7                 call    __RTC_CheckEsp
.text:000010BC                 mov     [ebp+var_150], eax
.text:000010C2                 mov     ecx, [ebp+var_150]
.text:000010C8                 mov     [ebp+var_CC], ecx
.text:000010CE                 mov     byte ptr [ebp+var_4], 0
.text:000010D2                 lea     ecx, [ebp+var_28] ; this
.text:000010D5                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:000010DA                 mov     eax, [ebp+var_CC]
.text:000010E0                 jmp     loc_12B2
.text:000010E5 ; ---------------------------------------------------------------------------
.text:000010E5                 jmp     $LN20
.text:000010EA ; ---------------------------------------------------------------------------
.text:000010EA
.text:000010EA loc_10EA:                               ; CODE XREF: CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+4ACj
.text:000010EA                                         ; CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+4BCj ...
.text:000010EA                 mov     ecx, [ebp+var_14] ; this
.text:000010ED                 call    ?ExistOnDisk@CUpdatePair2@@QBE_NXZ ; CUpdatePair2::ExistOnDisk(void)
.text:000010F2                 mov     [ebp+var_151], al
.text:000010F8                 movzx   edx, [ebp+var_151]
.text:000010FF                 test    edx, edx
.text:00001101                 jz      $LN20
.text:00001107                 mov     eax, [ebp+var_14]
.text:0000110A                 mov     ecx, [eax+4]
.text:0000110D                 push    ecx
.text:0000110E                 mov     edx, [ebp+this]
.text:00001111                 mov     ecx, [edx+80h]
.text:00001117                 add     ecx, 24h ; '$'
.text:0000111A                 call    ??A?$CObjectVector@UCDirItem@@@@QBEABUCDirItem@@I@Z ; CObjectVector<CDirItem>::operator[](uint)
.text:0000111F                 mov     [ebp+var_158], eax
.text:00001125                 mov     eax, [ebp+var_158]
.text:0000112B                 mov     [ebp+var_A0], eax
.text:00001131                 mov     ecx, [ebp+arg_8]
.text:00001134                 mov     [ebp+var_15C], ecx
.text:0000113A                 mov     edx, [ebp+var_15C]
.text:00001140                 sub     edx, 3
.text:00001143                 mov     [ebp+var_15C], edx
.text:00001149                 cmp     [ebp+var_15C], 3Ch ; '<'
.text:00001150                 ja      $LN20
.text:00001156                 mov     eax, [ebp+var_15C]
.text:0000115C                 movzx   ecx, ds:$LN56[eax]
.text:00001163                 jmp     ds:$LN65[ecx*4]
.text:0000116A ; ---------------------------------------------------------------------------
.text:0000116A
.text:0000116A $LN8_0:                                 ; CODE XREF: CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+637j
.text:0000116A                                         ; DATA XREF: .text:$LN65o
.text:0000116A                 mov     edx, [ebp+var_14]
.text:0000116D                 mov     eax, [edx+4]
.text:00001170                 push    eax
.text:00001171                 lea     ecx, [ebp+var_D8]
.text:00001177                 push    ecx
.text:00001178                 mov     edx, [ebp+this]
.text:0000117B                 mov     ecx, [edx+80h]
.text:00001181                 call    ?GetLogPath@CDirItems@@QBE?AVUString@@I@Z ; CDirItems::GetLogPath(uint)
.text:00001186                 mov     [ebp+var_160], eax
.text:0000118C                 mov     eax, [ebp+var_160]
.text:00001192                 mov     [ebp+var_164], eax
.text:00001198                 mov     byte ptr [ebp+var_4], 8
.text:0000119C                 mov     ecx, [ebp+var_164]
.text:000011A2                 push    ecx
.text:000011A3                 lea     ecx, [ebp+var_28]
.text:000011A6                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABVUString@@@Z ; NWindows::NCOM::CPropVariant::operator=(UString const &)
.text:000011AB                 mov     byte ptr [ebp+var_4], 1
.text:000011AF                 lea     ecx, [ebp+var_D8] ; this
.text:000011B5                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000011BA                 jmp     $LN20
.text:000011BF ; ---------------------------------------------------------------------------
.text:000011BF
.text:000011BF $LN7_2:                                 ; CODE XREF: CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+637j
.text:000011BF                                         ; DATA XREF: .text:00001354o
.text:000011BF                 mov     ecx, [ebp+var_A0] ; this
.text:000011C5                 call    ?IsDir@CDirItem@@QBE_NXZ ; CDirItem::IsDir(void)
.text:000011CA                 mov     [ebp+var_165], al
.text:000011D0                 movzx   edx, [ebp+var_165]
.text:000011D7                 push    edx
.text:000011D8                 lea     ecx, [ebp+var_28]
.text:000011DB                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_N@Z ; NWindows::NCOM::CPropVariant::operator=(bool)
.text:000011E0                 jmp     short $LN20
.text:000011E2 ; ---------------------------------------------------------------------------
.text:000011E2
.text:000011E2 $LN6_0:                                 ; CODE XREF: CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+637j
.text:000011E2                                         ; DATA XREF: .text:00001358o
.text:000011E2                 mov     eax, [ebp+var_A0]
.text:000011E8                 mov     ecx, [eax+4]
.text:000011EB                 push    ecx
.text:000011EC                 mov     edx, [eax]
.text:000011EE                 push    edx
.text:000011EF                 lea     ecx, [ebp+var_28]
.text:000011F2                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
.text:000011F7                 jmp     short $LN20
.text:000011F9 ; ---------------------------------------------------------------------------
.text:000011F9
.text:000011F9 $LN5:                                   ; CODE XREF: CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+637j
.text:000011F9                                         ; DATA XREF: .text:0000135Co
.text:000011F9                 mov     eax, [ebp+var_A0]
.text:000011FF                 mov     ecx, [eax+3Ch]
.text:00001202                 push    ecx
.text:00001203                 lea     ecx, [ebp+var_28]
.text:00001206                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z ; NWindows::NCOM::CPropVariant::operator=(uint)
.text:0000120B                 jmp     short $LN20
.text:0000120D ; ---------------------------------------------------------------------------
.text:0000120D
.text:0000120D $LN4_0:                                 ; CODE XREF: CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+637j
.text:0000120D                                         ; DATA XREF: .text:00001360o
.text:0000120D                 mov     edx, [ebp+var_A0]
.text:00001213                 add     edx, 8
.text:00001216                 push    edx
.text:00001217                 lea     ecx, [ebp+var_28]
.text:0000121A                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABU_FILETIME@@@Z ; NWindows::NCOM::CPropVariant::operator=(_FILETIME const &)
.text:0000121F                 jmp     short $LN20
.text:00001221 ; ---------------------------------------------------------------------------
.text:00001221
.text:00001221 $LN3:                                   ; CODE XREF: CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+637j
.text:00001221                                         ; DATA XREF: .text:00001364o
.text:00001221                 mov     eax, [ebp+var_A0]
.text:00001227                 add     eax, 10h
.text:0000122A                 push    eax
.text:0000122B                 lea     ecx, [ebp+var_28]
.text:0000122E                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABU_FILETIME@@@Z ; NWindows::NCOM::CPropVariant::operator=(_FILETIME const &)
.text:00001233                 jmp     short $LN20
.text:00001235 ; ---------------------------------------------------------------------------
.text:00001235
.text:00001235 $LN2_0:                                 ; CODE XREF: CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+637j
.text:00001235                                         ; DATA XREF: .text:00001368o
.text:00001235                 mov     ecx, [ebp+var_A0]
.text:0000123B                 add     ecx, 18h
.text:0000123E                 push    ecx
.text:0000123F                 lea     ecx, [ebp+var_28]
.text:00001242                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABU_FILETIME@@@Z ; NWindows::NCOM::CPropVariant::operator=(_FILETIME const &)
.text:00001247                 jmp     short $LN20
.text:00001249 ; ---------------------------------------------------------------------------
.text:00001249
.text:00001249 $LN1:                                   ; CODE XREF: CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+637j
.text:00001249                                         ; DATA XREF: .text:0000136Co
.text:00001249                 mov     edx, [ebp+var_A0]
.text:0000124F                 movzx   eax, byte ptr [edx+4Ch]
.text:00001253                 push    eax
.text:00001254                 lea     ecx, [ebp+var_28]
.text:00001257                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_N@Z ; NWindows::NCOM::CPropVariant::operator=(bool)
.text:0000125C
.text:0000125C $LN20:                                  ; CODE XREF: CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *):loc_F5Fj
.text:0000125C                                         ; CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+471j ...
.text:0000125C                 mov     ecx, [ebp+arg_C]
.text:0000125F                 push    ecx             ; struct tagPROPVARIANT *
.text:00001260                 lea     ecx, [ebp+var_28] ; this
.text:00001263                 call    ?Detach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z ; NWindows::NCOM::CPropVariant::Detach(tagPROPVARIANT *)
.text:00001268                 mov     [ebp+var_DC], 0
.text:00001272                 mov     byte ptr [ebp+var_4], 0
.text:00001276                 lea     ecx, [ebp+var_28] ; this
.text:00001279                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:0000127E                 mov     eax, [ebp+var_DC]
.text:00001284                 jmp     short loc_12B2
.text:00001284 ?GetProperty@CArchiveUpdateCallback@@UAGJIKPAUtagPROPVARIANT@@@Z endp
.text:00001284
.text:00001286
.text:00001286 ; =============== S U B R O U T I N E =======================================
.text:00001286
.text:00001286
.text:00001286 __catch$?GetProperty@CArchiveUpdateCallback@@UAGJIKPAUtagPROPVARIANT@@@Z$0 proc near
.text:00001286                                         ; DATA XREF: .xdata$x:0000358Co
.text:00001286                 mov     dword ptr [ebp-0E0h], 8007000Eh
.text:00001290                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00001297                 mov     eax, offset $LN54
.text:0000129C                 retn
.text:0000129C __catch$?GetProperty@CArchiveUpdateCallback@@UAGJIKPAUtagPROPVARIANT@@@Z$0 endp
.text:0000129C
.text:0000129D ; ---------------------------------------------------------------------------
.text:0000129D                 mov     eax, offset __tryend$?GetProperty@CArchiveUpdateCallback@@UAGJIKPAUtagPROPVARIANT@@@Z$1
.text:000012A2                 retn
.text:000012A3 ; ---------------------------------------------------------------------------
.text:000012A3
.text:000012A3 __tryend$?GetProperty@CArchiveUpdateCallback@@UAGJIKPAUtagPROPVARIANT@@@Z$1:
.text:000012A3                                         ; DATA XREF: .text:0000129Do
.text:000012A3                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:000012AA                 jmp     short loc_12B2
.text:000012AC ; ---------------------------------------------------------------------------
.text:000012AC
.text:000012AC $LN54:                                  ; DATA XREF: __catch$?GetProperty@CArchiveUpdateCallback@@UAGJIKPAUtagPROPVARIANT@@@Z$0+11o
.text:000012AC                 mov     eax, [ebp-0E0h]
.text:000012B2 ; START OF FUNCTION CHUNK FOR ?GetProperty@CArchiveUpdateCallback@@UAGJIKPAUtagPROPVARIANT@@@Z
.text:000012B2
.text:000012B2 loc_12B2:                               ; CODE XREF: CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+C6j
.text:000012B2                                         ; CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+2AEj ...
.text:000012B2                 push    edx
.text:000012B3                 mov     ecx, ebp
.text:000012B5                 push    eax
.text:000012B6                 lea     edx, $LN64
.text:000012BC                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000012C1                 pop     eax
.text:000012C2                 pop     edx
.text:000012C3                 mov     ecx, [ebp+var_C]
.text:000012C6                 mov     large fs:0, ecx
.text:000012CD                 pop     ecx
.text:000012CE                 pop     edi
.text:000012CF                 pop     esi
.text:000012D0                 pop     ebx
.text:000012D1                 add     esp, 168h
.text:000012D7                 cmp     ebp, esp
.text:000012D9                 call    __RTC_CheckEsp
.text:000012DE                 mov     esp, ebp
.text:000012E0                 pop     ebp
.text:000012E1                 retn    10h
.text:000012E1 ; END OF FUNCTION CHUNK FOR ?GetProperty@CArchiveUpdateCallback@@UAGJIKPAUtagPROPVARIANT@@@Z
.text:000012E1 ; ---------------------------------------------------------------------------
.text:000012E4 $LN64           dd 5                    ; DATA XREF: CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+78Ao
.text:000012E8                 dd offset $LN63
.text:000012EC $LN63           dd 0FFFFFFD8h, 10h      ; DATA XREF: .text:000012E8o
.text:000012F4                 dd offset $LN57         ; "prop"
.text:000012F8                 dd 0FFFFFFACh, 20h
.text:00001300                 dd offset $LN58         ; "attr"
.text:00001304                 dd 0FFFFFF98h, 0Ch
.text:0000130C                 dd offset $LN59         ; "simpleName"
.text:00001310                 dd 0FFFFFF84h, 0Ch
.text:00001318                 dd offset $LN60         ; "phyPath"
.text:0000131C                 dd 0FFFFFF70h, 0Ch
.text:00001324                 dd offset $LN61         ; "fullPath"
.text:00001328 $LN61           db 'fullPath',0         ; DATA XREF: .text:00001324o
.text:00001331 $LN60           db 'phyPath',0          ; DATA XREF: .text:00001318o
.text:00001339 $LN59           db 'simpleName',0       ; DATA XREF: .text:0000130Co
.text:00001344 $LN58           db 'attr',0             ; DATA XREF: .text:00001300o
.text:00001349 $LN57           db 'prop',0             ; DATA XREF: .text:000012F4o
.text:0000134E                 align 10h
.text:00001350 $LN65           dd offset $LN8_0        ; DATA XREF: CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+637r
.text:00001354                 dd offset $LN7_2
.text:00001358                 dd offset $LN6_0
.text:0000135C                 dd offset $LN5
.text:00001360                 dd offset $LN4_0
.text:00001364                 dd offset $LN3
.text:00001368                 dd offset $LN2_0
.text:0000136C                 dd offset $LN1
.text:00001370                 dd offset $LN20
.text:00001374 $LN56           db 0                    ; DATA XREF: CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+630r
.text:00001375                 db 2 dup(8), 1
.text:00001378                 dd 4030802h, 8080605h, 0Ch dup(8080808h), 0CCCCCC07h, 2 dup(0CCCCCCCCh)
.text:000013BC
.text:000013BC ; =============== S U B R O U T I N E =======================================
.text:000013BC
.text:000013BC ; Attributes: bp-based frame
.text:000013BC
.text:000013BC ; class UString __stdcall GetRelativePath(class UString const &, class UString const &)
.text:000013BC ?GetRelativePath@@YG?AVUString@@ABV1@0@Z proc near
.text:000013BC                                         ; CODE XREF: CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+21Ap
.text:000013BC
.text:000013BC var_54          = dword ptr -54h
.text:000013BC var_50          = dword ptr -50h
.text:000013BC var_48          = byte ptr -48h
.text:000013BC var_38          = dword ptr -38h
.text:000013BC var_30          = byte ptr -30h
.text:000013BC var_1C          = byte ptr -1Ch
.text:000013BC var_C           = dword ptr -0Ch
.text:000013BC var_4           = dword ptr -4
.text:000013BC arg_0           = dword ptr  8
.text:000013BC arg_4           = dword ptr  0Ch
.text:000013BC arg_8           = dword ptr  10h
.text:000013BC
.text:000013BC                 push    ebp
.text:000013BD                 mov     ebp, esp
.text:000013BF                 push    0FFFFFFFFh
.text:000013C1                 push    offset __ehhandler$?GetRelativePath@@YG?AVUString@@ABV1@0@Z
.text:000013C6                 mov     eax, large fs:0
.text:000013CC                 push    eax
.text:000013CD                 sub     esp, 48h
.text:000013D0                 push    esi
.text:000013D1                 push    edi
.text:000013D2                 lea     edi, [ebp+var_54]
.text:000013D5                 mov     ecx, 12h
.text:000013DA                 mov     eax, 0CCCCCCCCh
.text:000013DF                 rep stosd
.text:000013E1                 mov     eax, dword ptr ds:___security_cookie
.text:000013E6                 xor     eax, ebp
.text:000013E8                 push    eax
.text:000013E9                 lea     eax, [ebp+var_C]
.text:000013EC                 mov     large fs:0, eax
.text:000013F2                 mov     [ebp+var_54], 0
.text:000013F9                 lea     ecx, [ebp+var_1C]
.text:000013FC                 call    ??0?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::CObjectVector<UString>(void)
.text:00001401                 mov     [ebp+var_4], 1
.text:00001408                 lea     ecx, [ebp+var_30]
.text:0000140B                 call    ??0?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::CObjectVector<UString>(void)
.text:00001410                 mov     byte ptr [ebp+var_4], 2
.text:00001414                 lea     eax, [ebp+var_1C]
.text:00001417                 push    eax
.text:00001418                 mov     ecx, [ebp+arg_4]
.text:0000141B                 push    ecx
.text:0000141C                 call    ?SplitPathToParts@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z ; SplitPathToParts(UString const &,CObjectVector<UString> &)
.text:00001421                 lea     edx, [ebp+var_30]
.text:00001424                 push    edx
.text:00001425                 mov     eax, [ebp+arg_8]
.text:00001428                 push    eax
.text:00001429                 call    ?SplitPathToParts@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z ; SplitPathToParts(UString const &,CObjectVector<UString> &)
.text:0000142E                 mov     [ebp+var_38], 0
.text:00001435                 jmp     short loc_1440
.text:00001437 ; ---------------------------------------------------------------------------
.text:00001437
.text:00001437 loc_1437:                               ; CODE XREF: GetRelativePath(UString const &,UString const &):loc_1499j
.text:00001437                 mov     ecx, [ebp+var_38]
.text:0000143A                 add     ecx, 1
.text:0000143D                 mov     [ebp+var_38], ecx
.text:00001440
.text:00001440 loc_1440:                               ; CODE XREF: GetRelativePath(UString const &,UString const &)+79j
.text:00001440                 mov     esi, [ebp+var_38]
.text:00001443                 add     esi, 1
.text:00001446                 lea     ecx, [ebp+var_30]
.text:00001449                 call    ?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size(void)
.text:0000144E                 cmp     esi, eax
.text:00001450                 jnb     short loc_1464
.text:00001452                 mov     esi, [ebp+var_38]
.text:00001455                 add     esi, 1
.text:00001458                 lea     ecx, [ebp+var_1C]
.text:0000145B                 call    ?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size(void)
.text:00001460                 cmp     esi, eax
.text:00001462                 jb      short loc_1466
.text:00001464
.text:00001464 loc_1464:                               ; CODE XREF: GetRelativePath(UString const &,UString const &)+94j
.text:00001464                 jmp     short loc_149B
.text:00001466 ; ---------------------------------------------------------------------------
.text:00001466
.text:00001466 loc_1466:                               ; CODE XREF: GetRelativePath(UString const &,UString const &)+A6j
.text:00001466                 mov     edx, [ebp+var_38]
.text:00001469                 push    edx
.text:0000146A                 lea     ecx, [ebp+var_1C]
.text:0000146D                 call    ??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[](uint)
.text:00001472                 mov     ecx, eax
.text:00001474                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00001479                 push    eax             ; wchar_t *
.text:0000147A                 mov     eax, [ebp+var_38]
.text:0000147D                 push    eax
.text:0000147E                 lea     ecx, [ebp+var_30]
.text:00001481                 call    ??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[](uint)
.text:00001486                 mov     ecx, eax
.text:00001488                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:0000148D                 push    eax             ; wchar_t *
.text:0000148E                 call    ?CompareFileNames@@YGHPB_W0@Z ; CompareFileNames(wchar_t const *,wchar_t const *)
.text:00001493                 test    eax, eax
.text:00001495                 jz      short loc_1499
.text:00001497                 jmp     short loc_149B
.text:00001499 ; ---------------------------------------------------------------------------
.text:00001499
.text:00001499 loc_1499:                               ; CODE XREF: GetRelativePath(UString const &,UString const &)+D9j
.text:00001499                 jmp     short loc_1437
.text:0000149B ; ---------------------------------------------------------------------------
.text:0000149B
.text:0000149B loc_149B:                               ; CODE XREF: GetRelativePath(UString const &,UString const &):loc_1464j
.text:0000149B                                         ; GetRelativePath(UString const &,UString const &)+DBj
.text:0000149B                 cmp     [ebp+var_38], 0
.text:0000149F                 jnz     short loc_1500
.text:000014A1                 mov     ecx, [ebp+arg_4]
.text:000014A4                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:000014A9                 push    eax             ; wchar_t *
.text:000014AA                 call    ?IsDrivePath@NName@NFile@NWindows@@YG_NPB_W@Z ; NWindows::NFile::NName::IsDrivePath(wchar_t const *)
.text:000014AF                 movzx   ecx, al
.text:000014B2                 test    ecx, ecx
.text:000014B4                 jnz     short loc_14CB
.text:000014B6                 mov     ecx, [ebp+arg_8]
.text:000014B9                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:000014BE                 push    eax             ; this
.text:000014BF                 call    ?IsDrivePath@NName@NFile@NWindows@@YG_NPB_W@Z ; NWindows::NFile::NName::IsDrivePath(wchar_t const *)
.text:000014C4                 movzx   edx, al
.text:000014C7                 test    edx, edx
.text:000014C9                 jz      short loc_1500
.text:000014CB
.text:000014CB loc_14CB:                               ; CODE XREF: GetRelativePath(UString const &,UString const &)+F8j
.text:000014CB                 mov     eax, [ebp+arg_4]
.text:000014CE                 push    eax
.text:000014CF                 mov     ecx, [ebp+arg_0]
.text:000014D2                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:000014D7                 mov     ecx, [ebp+var_54]
.text:000014DA                 or      ecx, 1
.text:000014DD                 mov     [ebp+var_54], ecx
.text:000014E0                 mov     byte ptr [ebp+var_4], 1
.text:000014E4                 lea     ecx, [ebp+var_30]
.text:000014E7                 call    ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text:000014EC                 mov     byte ptr [ebp+var_4], 0
.text:000014F0                 lea     ecx, [ebp+var_1C]
.text:000014F3                 call    ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text:000014F8                 mov     eax, [ebp+arg_0]
.text:000014FB                 jmp     loc_15BD
.text:00001500 ; ---------------------------------------------------------------------------
.text:00001500
.text:00001500 loc_1500:                               ; CODE XREF: GetRelativePath(UString const &,UString const &)+E3j
.text:00001500                                         ; GetRelativePath(UString const &,UString const &)+10Dj
.text:00001500                 lea     ecx, [ebp+var_48]
.text:00001503                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00001508                 mov     byte ptr [ebp+var_4], 3
.text:0000150C                 mov     edx, [ebp+var_38]
.text:0000150F                 add     edx, 1
.text:00001512                 mov     [ebp+var_50], edx
.text:00001515                 jmp     short loc_1520
.text:00001517 ; ---------------------------------------------------------------------------
.text:00001517
.text:00001517 loc_1517:                               ; CODE XREF: GetRelativePath(UString const &,UString const &)+17Ej
.text:00001517                 mov     eax, [ebp+var_50]
.text:0000151A                 add     eax, 1
.text:0000151D                 mov     [ebp+var_50], eax
.text:00001520
.text:00001520 loc_1520:                               ; CODE XREF: GetRelativePath(UString const &,UString const &)+159j
.text:00001520                 lea     ecx, [ebp+var_30]
.text:00001523                 call    ?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size(void)
.text:00001528                 cmp     [ebp+var_50], eax
.text:0000152B                 jnb     short loc_153C
.text:0000152D                 push    offset $SG76007 ; "..\\"
.text:00001532                 lea     ecx, [ebp+var_48]
.text:00001535                 call    ??YUString@@QAEAAV0@PB_W@Z ; UString::operator+=(wchar_t const *)
.text:0000153A                 jmp     short loc_1517
.text:0000153C ; ---------------------------------------------------------------------------
.text:0000153C
.text:0000153C loc_153C:                               ; CODE XREF: GetRelativePath(UString const &,UString const &)+16Fj
.text:0000153C                 mov     ecx, [ebp+var_38]
.text:0000153F                 mov     [ebp+var_50], ecx
.text:00001542                 jmp     short loc_154D
.text:00001544 ; ---------------------------------------------------------------------------
.text:00001544
.text:00001544 loc_1544:                               ; CODE XREF: GetRelativePath(UString const &,UString const &)+1C3j
.text:00001544                 mov     edx, [ebp+var_50]
.text:00001547                 add     edx, 1
.text:0000154A                 mov     [ebp+var_50], edx
.text:0000154D
.text:0000154D loc_154D:                               ; CODE XREF: GetRelativePath(UString const &,UString const &)+186j
.text:0000154D                 lea     ecx, [ebp+var_1C]
.text:00001550                 call    ?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size(void)
.text:00001555                 cmp     [ebp+var_50], eax
.text:00001558                 jnb     short loc_1581
.text:0000155A                 mov     eax, [ebp+var_50]
.text:0000155D                 cmp     eax, [ebp+var_38]
.text:00001560                 jz      short loc_156A
.text:00001562                 lea     ecx, [ebp+var_48] ; this
.text:00001565                 call    ?Add_PathSepar@UString@@QAEXXZ ; UString::Add_PathSepar(void)
.text:0000156A
.text:0000156A loc_156A:                               ; CODE XREF: GetRelativePath(UString const &,UString const &)+1A4j
.text:0000156A                 mov     ecx, [ebp+var_50]
.text:0000156D                 push    ecx
.text:0000156E                 lea     ecx, [ebp+var_1C]
.text:00001571                 call    ??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[](uint)
.text:00001576                 push    eax
.text:00001577                 lea     ecx, [ebp+var_48]
.text:0000157A                 call    ??YUString@@QAEAAV0@ABV0@@Z ; UString::operator+=(UString const &)
.text:0000157F                 jmp     short loc_1544
.text:00001581 ; ---------------------------------------------------------------------------
.text:00001581
.text:00001581 loc_1581:                               ; CODE XREF: GetRelativePath(UString const &,UString const &)+19Cj
.text:00001581                 lea     edx, [ebp+var_48]
.text:00001584                 push    edx
.text:00001585                 mov     ecx, [ebp+arg_0]
.text:00001588                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:0000158D                 mov     eax, [ebp+var_54]
.text:00001590                 or      eax, 1
.text:00001593                 mov     [ebp+var_54], eax
.text:00001596                 mov     byte ptr [ebp+var_4], 2
.text:0000159A                 lea     ecx, [ebp+var_48] ; this
.text:0000159D                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000015A2                 mov     byte ptr [ebp+var_4], 1
.text:000015A6                 lea     ecx, [ebp+var_30]
.text:000015A9                 call    ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text:000015AE                 mov     byte ptr [ebp+var_4], 0
.text:000015B2                 lea     ecx, [ebp+var_1C]
.text:000015B5                 call    ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text:000015BA                 mov     eax, [ebp+arg_0]
.text:000015BD
.text:000015BD loc_15BD:                               ; CODE XREF: GetRelativePath(UString const &,UString const &)+13Fj
.text:000015BD                 push    edx
.text:000015BE                 mov     ecx, ebp
.text:000015C0                 push    eax
.text:000015C1                 lea     edx, $LN29
.text:000015C7                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000015CC                 pop     eax
.text:000015CD                 pop     edx
.text:000015CE                 mov     ecx, [ebp+var_C]
.text:000015D1                 mov     large fs:0, ecx
.text:000015D8                 pop     ecx
.text:000015D9                 pop     edi
.text:000015DA                 pop     esi
.text:000015DB                 add     esp, 54h
.text:000015DE                 cmp     ebp, esp
.text:000015E0                 call    __RTC_CheckEsp
.text:000015E5                 mov     esp, ebp
.text:000015E7                 pop     ebp
.text:000015E8                 retn    0Ch
.text:000015E8 ?GetRelativePath@@YG?AVUString@@ABV1@0@Z endp ; sp-analysis failed
.text:000015E8
.text:000015E8 ; ---------------------------------------------------------------------------
.text:000015EB                 align 4
.text:000015EC $LN29           dd 3                    ; DATA XREF: GetRelativePath(UString const &,UString const &)+205o
.text:000015F0                 dd offset $LN28
.text:000015F4 $LN28           dd 0FFFFFFE4h, 0Ch      ; DATA XREF: .text:000015F0o
.text:000015FC                 dd offset $LN24         ; "partsTo"
.text:00001600                 dd 0FFFFFFD0h, 0Ch
.text:00001608                 dd offset $LN25         ; "partsFrom"
.text:0000160C                 dd 0FFFFFFB8h, 0Ch
.text:00001614                 dd offset $LN26
.text:00001618 $LN26           db 73h, 0               ; DATA XREF: .text:00001614o
.text:0000161A $LN25           db 'partsFrom',0        ; DATA XREF: .text:00001608o
.text:00001624 $LN24           db 'partsTo',0          ; DATA XREF: .text:000015FCo
.text:0000162C
.text:0000162C ; =============== S U B R O U T I N E =======================================
.text:0000162C
.text:0000162C ; Attributes: bp-based frame
.text:0000162C
.text:0000162C ; __int32 __cdecl CArchiveUpdateCallback::GetStream2(CArchiveUpdateCallback *this, unsigned int, struct ISequentialInStream **, unsigned int)
.text:0000162C                 public ?GetStream2@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@I@Z
.text:0000162C ?GetStream2@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@I@Z proc near
.text:0000162C                                         ; DATA XREF: .rdata:0000338Co
.text:0000162C
.text:0000162C var_1DC         = dword ptr -1DCh
.text:0000162C var_1D8         = dword ptr -1D8h
.text:0000162C var_1D4         = dword ptr -1D4h
.text:0000162C var_1D0         = dword ptr -1D0h
.text:0000162C var_1CC         = dword ptr -1CCh
.text:0000162C var_1C8         = dword ptr -1C8h
.text:0000162C var_1C1         = byte ptr -1C1h
.text:0000162C var_1C0         = dword ptr -1C0h
.text:0000162C var_1BC         = dword ptr -1BCh
.text:0000162C var_1B5         = byte ptr -1B5h
.text:0000162C var_1B4         = dword ptr -1B4h
.text:0000162C var_1AD         = byte ptr -1ADh
.text:0000162C var_1AC         = dword ptr -1ACh
.text:0000162C var_1A8         = dword ptr -1A8h
.text:0000162C var_1A4         = dword ptr -1A4h
.text:0000162C var_1A0         = dword ptr -1A0h
.text:0000162C var_19C         = dword ptr -19Ch
.text:0000162C var_198         = dword ptr -198h
.text:0000162C var_194         = dword ptr -194h
.text:0000162C var_190         = dword ptr -190h
.text:0000162C var_18C         = dword ptr -18Ch
.text:0000162C var_188         = dword ptr -188h
.text:0000162C var_184         = dword ptr -184h
.text:0000162C var_180         = dword ptr -180h
.text:0000162C var_17C         = dword ptr -17Ch
.text:0000162C var_178         = dword ptr -178h
.text:0000162C var_174         = dword ptr -174h
.text:0000162C var_170         = dword ptr -170h
.text:0000162C var_16C         = dword ptr -16Ch
.text:0000162C var_168         = dword ptr -168h
.text:0000162C var_164         = dword ptr -164h
.text:0000162C var_160         = dword ptr -160h
.text:0000162C var_15C         = dword ptr -15Ch
.text:0000162C var_158         = dword ptr -158h
.text:0000162C var_154         = dword ptr -154h
.text:0000162C var_150         = dword ptr -150h
.text:0000162C var_149         = byte ptr -149h
.text:0000162C var_148         = dword ptr -148h
.text:0000162C var_144         = dword ptr -144h
.text:0000162C var_13C         = dword ptr -13Ch
.text:0000162C var_138         = dword ptr -138h
.text:0000162C var_134         = dword ptr -134h
.text:0000162C var_130         = dword ptr -130h
.text:0000162C var_12C         = dword ptr -12Ch
.text:0000162C var_128         = dword ptr -128h
.text:0000162C var_124         = byte ptr -124h
.text:0000162C var_118         = dword ptr -118h
.text:0000162C var_114         = dword ptr -114h
.text:0000162C var_110         = dword ptr -110h
.text:0000162C var_10C         = dword ptr -10Ch
.text:0000162C var_108         = byte ptr -108h
.text:0000162C var_F8          = byte ptr -0F8h
.text:0000162C var_F0          = dword ptr -0F0h
.text:0000162C var_EC          = dword ptr -0ECh
.text:0000162C var_E4          = dword ptr -0E4h
.text:0000162C var_E0          = dword ptr -0E0h
.text:0000162C var_DC          = dword ptr -0DCh
.text:0000162C var_D8          = dword ptr -0D8h
.text:0000162C var_D4          = dword ptr -0D4h
.text:0000162C var_C4          = byte ptr -0C4h
.text:0000162C var_BC          = dword ptr -0BCh
.text:0000162C var_B8          = dword ptr -0B8h
.text:0000162C var_B4          = dword ptr -0B4h
.text:0000162C var_B0          = dword ptr -0B0h
.text:0000162C var_A4          = dword ptr -0A4h
.text:0000162C var_7C          = byte ptr -7Ch
.text:0000162C var_68          = byte ptr -68h
.text:0000162C var_60          = dword ptr -60h
.text:0000162C var_58          = byte ptr -58h
.text:0000162C var_50          = dword ptr -50h
.text:0000162C var_4C          = dword ptr -4Ch
.text:0000162C var_44          = byte ptr -44h
.text:0000162C var_3C          = dword ptr -3Ch
.text:0000162C var_38          = dword ptr -38h
.text:0000162C var_30          = byte ptr -30h
.text:0000162C var_1D          = byte ptr -1Dh
.text:0000162C var_1C          = dword ptr -1Ch
.text:0000162C var_18          = dword ptr -18h
.text:0000162C var_14          = dword ptr -14h
.text:0000162C var_10          = dword ptr -10h
.text:0000162C var_C           = dword ptr -0Ch
.text:0000162C var_4           = dword ptr -4
.text:0000162C this            = dword ptr  8
.text:0000162C arg_4           = dword ptr  0Ch
.text:0000162C arg_8           = dword ptr  10h
.text:0000162C arg_C           = dword ptr  14h
.text:0000162C
.text:0000162C ; FUNCTION CHUNK AT .text:00001E88 SIZE 0000003C BYTES
.text:0000162C
.text:0000162C                 push    ebp
.text:0000162D                 mov     ebp, esp
.text:0000162F                 push    0FFFFFFFFh
.text:00001631                 push    offset __ehhandler$?GetStream2@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@I@Z
.text:00001636                 mov     eax, large fs:0
.text:0000163C                 push    eax
.text:0000163D                 push    ecx
.text:0000163E                 sub     esp, 1CCh
.text:00001644                 push    ebx
.text:00001645                 push    esi
.text:00001646                 push    edi
.text:00001647                 lea     edi, [ebp+var_1DC]
.text:0000164D                 mov     ecx, 73h ; 's'
.text:00001652                 mov     eax, 0CCCCCCCCh
.text:00001657                 rep stosd
.text:00001659                 mov     eax, dword ptr ds:___security_cookie
.text:0000165E                 xor     eax, ebp
.text:00001660                 mov     [ebp+var_14], eax
.text:00001663                 push    eax
.text:00001664                 lea     eax, [ebp+var_C]
.text:00001667                 mov     large fs:0, eax
.text:0000166D                 mov     [ebp+var_10], esp
.text:00001670                 mov     [ebp+var_4], 0
.text:00001677                 mov     eax, [ebp+arg_8]
.text:0000167A                 mov     dword ptr [eax], 0
.text:00001680                 mov     ecx, [ebp+arg_4]
.text:00001683                 push    ecx
.text:00001684                 mov     edx, [ebp+this]
.text:00001687                 mov     ecx, [edx+90h]
.text:0000168D                 call    ??A?$CRecordVector@UCUpdatePair2@@@@QBEABUCUpdatePair2@@I@Z ; CRecordVector<CUpdatePair2>::operator[](uint)
.text:00001692                 mov     [ebp+var_144], eax
.text:00001698                 mov     eax, [ebp+var_144]
.text:0000169E                 mov     [ebp+var_18], eax
.text:000016A1                 mov     ecx, [ebp+var_18]
.text:000016A4                 movzx   edx, byte ptr [ecx]
.text:000016A7                 test    edx, edx
.text:000016A9                 jnz     short loc_16B5
.text:000016AB                 mov     eax, 80004005h
.text:000016B0                 jmp     loc_1E88
.text:000016B5 ; ---------------------------------------------------------------------------
.text:000016B5
.text:000016B5 loc_16B5:                               ; CODE XREF: CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+7Dj
.text:000016B5                 mov     eax, [ebp+this]
.text:000016B8                 mov     ecx, [eax+78h]
.text:000016BB                 mov     esi, esp
.text:000016BD                 mov     edx, [ebp+this]
.text:000016C0                 mov     eax, [edx+78h]
.text:000016C3                 mov     edx, [eax]
.text:000016C5                 mov     eax, [edx+10h]
.text:000016C8                 call    eax
.text:000016CA                 cmp     esi, esp
.text:000016CC                 call    __RTC_CheckEsp
.text:000016D1                 mov     [ebp+var_148], eax
.text:000016D7                 mov     ecx, [ebp+var_148]
.text:000016DD                 mov     [ebp+var_1C], ecx
.text:000016E0                 cmp     [ebp+var_1C], 0
.text:000016E4                 jz      short loc_16EE
.text:000016E6                 mov     eax, [ebp+var_1C]
.text:000016E9                 jmp     loc_1E88
.text:000016EE ; ---------------------------------------------------------------------------
.text:000016EE
.text:000016EE loc_16EE:                               ; CODE XREF: CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+B8j
.text:000016EE                 mov     edx, [ebp+var_18]
.text:000016F1                 push    edx             ; struct CUpdatePair2 *
.text:000016F2                 mov     ecx, [ebp+this]
.text:000016F5                 sub     ecx, 4          ; this
.text:000016F8                 call    ?IsDir@CArchiveUpdateCallback@@QBE_NABUCUpdatePair2@@@Z ; CArchiveUpdateCallback::IsDir(CUpdatePair2 const &)
.text:000016FD                 mov     [ebp+var_149], al
.text:00001703                 mov     al, [ebp+var_149]
.text:00001709                 mov     [ebp+var_1D], al
.text:0000170C                 mov     ecx, [ebp+var_18]
.text:0000170F                 movzx   edx, byte ptr [ecx+3]
.text:00001713                 test    edx, edx
.text:00001715                 jz      loc_1907
.text:0000171B                 lea     ecx, [ebp+var_30]
.text:0000171E                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00001723                 mov     [ebp+var_150], eax
.text:00001729                 mov     byte ptr [ebp+var_4], 1
.text:0000172D                 mov     eax, [ebp+var_18]
.text:00001730                 cmp     dword ptr [eax+8], 0
.text:00001734                 jl      short loc_1765
.text:00001736                 mov     ecx, [ebp+var_18]
.text:00001739                 mov     edx, [ecx+8]
.text:0000173C                 push    edx
.text:0000173D                 mov     eax, [ebp+this]
.text:00001740                 mov     ecx, [eax+8Ch]
.text:00001746                 call    ??A?$CObjectVector@UCArcItem@@@@QBEABUCArcItem@@I@Z ; CObjectVector<CArcItem>::operator[](uint)
.text:0000174B                 mov     [ebp+var_154], eax
.text:00001751                 mov     ecx, [ebp+var_154]
.text:00001757                 add     ecx, 10h
.text:0000175A                 push    ecx
.text:0000175B                 lea     ecx, [ebp+var_30]
.text:0000175E                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:00001763                 jmp     short loc_17BB
.text:00001765 ; ---------------------------------------------------------------------------
.text:00001765
.text:00001765 loc_1765:                               ; CODE XREF: CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+108j
.text:00001765                 mov     edx, [ebp+var_18]
.text:00001768                 cmp     dword ptr [edx+4], 0
.text:0000176C                 jl      short loc_17BB
.text:0000176E                 mov     eax, [ebp+var_18]
.text:00001771                 mov     ecx, [eax+4]
.text:00001774                 push    ecx
.text:00001775                 lea     edx, [ebp+var_108]
.text:0000177B                 push    edx
.text:0000177C                 mov     eax, [ebp+this]
.text:0000177F                 mov     ecx, [eax+7Ch]
.text:00001782                 call    ?GetLogPath@CDirItems@@QBE?AVUString@@I@Z ; CDirItems::GetLogPath(uint)
.text:00001787                 mov     [ebp+var_158], eax
.text:0000178D                 mov     ecx, [ebp+var_158]
.text:00001793                 mov     [ebp+var_15C], ecx
.text:00001799                 mov     byte ptr [ebp+var_4], 2
.text:0000179D                 mov     edx, [ebp+var_15C]
.text:000017A3                 push    edx
.text:000017A4                 lea     ecx, [ebp+var_30]
.text:000017A7                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:000017AC                 mov     byte ptr [ebp+var_4], 1
.text:000017B0                 lea     ecx, [ebp+var_108] ; this
.text:000017B6                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000017BB
.text:000017BB loc_17BB:                               ; CODE XREF: CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+137j
.text:000017BB                                         ; CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+140j
.text:000017BB                 lea     ecx, [ebp+var_30]
.text:000017BE                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:000017C3                 mov     [ebp+var_160], eax
.text:000017C9                 mov     esi, esp
.text:000017CB                 mov     eax, [ebp+arg_C]
.text:000017CE                 push    eax
.text:000017CF                 push    1
.text:000017D1                 movzx   ecx, [ebp+var_1D]
.text:000017D5                 push    ecx
.text:000017D6                 mov     edx, [ebp+var_160]
.text:000017DC                 push    edx
.text:000017DD                 mov     eax, [ebp+this]
.text:000017E0                 mov     ecx, [eax+78h]
.text:000017E3                 mov     edx, [ebp+this]
.text:000017E6                 mov     eax, [edx+78h]
.text:000017E9                 mov     edx, [eax]
.text:000017EB                 mov     eax, [edx+18h]
.text:000017EE                 call    eax
.text:000017F0                 cmp     esi, esp
.text:000017F2                 call    __RTC_CheckEsp
.text:000017F7                 mov     [ebp+var_164], eax
.text:000017FD                 mov     ecx, [ebp+var_164]
.text:00001803                 mov     [ebp+var_38], ecx
.text:00001806                 cmp     [ebp+var_38], 0
.text:0000180A                 jz      short loc_182C
.text:0000180C                 mov     edx, [ebp+var_38]
.text:0000180F                 mov     [ebp+var_10C], edx
.text:00001815                 mov     byte ptr [ebp+var_4], 0
.text:00001819                 lea     ecx, [ebp+var_30] ; this
.text:0000181C                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001821                 mov     eax, [ebp+var_10C]
.text:00001827                 jmp     loc_1E88
.text:0000182C ; ---------------------------------------------------------------------------
.text:0000182C
.text:0000182C loc_182C:                               ; CODE XREF: CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+1DEj
.text:0000182C                 movzx   eax, [ebp+var_1D]
.text:00001830                 test    eax, eax
.text:00001832                 jnz     loc_18E6
.text:00001838                 push    20h ; ' '       ; unsigned int
.text:0000183A                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000183F                 add     esp, 4
.text:00001842                 mov     [ebp+var_168], eax
.text:00001848                 mov     ecx, [ebp+var_168]
.text:0000184E                 mov     [ebp+var_114], ecx
.text:00001854                 mov     byte ptr [ebp+var_4], 3
.text:00001858                 cmp     [ebp+var_114], 0
.text:0000185F                 jz      short loc_1880
.text:00001861                 mov     ecx, [ebp+var_114]
.text:00001867                 call    ??0CBufInStream@@QAE@XZ ; CBufInStream::CBufInStream(void)
.text:0000186C                 mov     [ebp+var_16C], eax
.text:00001872                 mov     edx, [ebp+var_16C]
.text:00001878                 mov     [ebp+var_170], edx
.text:0000187E                 jmp     short loc_188A
.text:00001880 ; ---------------------------------------------------------------------------
.text:00001880
.text:00001880 loc_1880:                               ; CODE XREF: CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+233j
.text:00001880                 mov     [ebp+var_170], 0
.text:0000188A
.text:0000188A loc_188A:                               ; CODE XREF: CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+252j
.text:0000188A                 mov     eax, [ebp+var_170]
.text:00001890                 mov     [ebp+var_110], eax
.text:00001896                 mov     byte ptr [ebp+var_4], 1
.text:0000189A                 mov     ecx, [ebp+var_110]
.text:000018A0                 mov     [ebp+var_3C], ecx
.text:000018A3                 mov     edx, [ebp+var_3C]
.text:000018A6                 push    edx
.text:000018A7                 lea     ecx, [ebp+var_44]
.text:000018AA                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(ISequentialInStream *)
.text:000018AF                 mov     byte ptr [ebp+var_4], 4
.text:000018B3                 push    0               ; struct IUnknown *
.text:000018B5                 push    0               ; unsigned int
.text:000018B7                 push    0               ; unsigned __int8 *
.text:000018B9                 mov     ecx, [ebp+var_3C] ; this
.text:000018BC                 call    ?Init@CBufInStream@@QAEXPBEIPAUIUnknown@@@Z ; CBufInStream::Init(uchar const *,uint,IUnknown *)
.text:000018C1                 lea     ecx, [ebp+var_44]
.text:000018C4                 call    ?Detach@?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::Detach(void)
.text:000018C9                 mov     [ebp+var_174], eax
.text:000018CF                 mov     eax, [ebp+arg_8]
.text:000018D2                 mov     ecx, [ebp+var_174]
.text:000018D8                 mov     [eax], ecx
.text:000018DA                 mov     byte ptr [ebp+var_4], 1
.text:000018DE                 lea     ecx, [ebp+var_44]
.text:000018E1                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:000018E6
.text:000018E6 loc_18E6:                               ; CODE XREF: CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+206j
.text:000018E6                 mov     [ebp+var_118], 0
.text:000018F0                 mov     byte ptr [ebp+var_4], 0
.text:000018F4                 lea     ecx, [ebp+var_30] ; this
.text:000018F7                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000018FC                 mov     eax, [ebp+var_118]
.text:00001902                 jmp     loc_1E88
.text:00001907 ; ---------------------------------------------------------------------------
.text:00001907
.text:00001907 loc_1907:                               ; CODE XREF: CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+E9j
.text:00001907                 mov     edx, [ebp+var_18]
.text:0000190A                 mov     eax, [edx+4]
.text:0000190D                 push    eax
.text:0000190E                 lea     ecx, [ebp+var_124]
.text:00001914                 push    ecx
.text:00001915                 mov     edx, [ebp+this]
.text:00001918                 mov     ecx, [edx+7Ch]
.text:0000191B                 call    ?GetLogPath@CDirItems@@QBE?AVUString@@I@Z ; CDirItems::GetLogPath(uint)
.text:00001920                 mov     [ebp+var_178], eax
.text:00001926                 mov     eax, [ebp+var_178]
.text:0000192C                 mov     [ebp+var_17C], eax
.text:00001932                 mov     byte ptr [ebp+var_4], 5
.text:00001936                 mov     ecx, [ebp+var_17C]
.text:0000193C                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00001941                 mov     [ebp+var_180], eax
.text:00001947                 mov     esi, esp
.text:00001949                 mov     ecx, [ebp+arg_C]
.text:0000194C                 push    ecx
.text:0000194D                 push    0
.text:0000194F                 movzx   edx, [ebp+var_1D]
.text:00001953                 push    edx
.text:00001954                 mov     eax, [ebp+var_180]
.text:0000195A                 push    eax
.text:0000195B                 mov     ecx, [ebp+this]
.text:0000195E                 mov     ecx, [ecx+78h]
.text:00001961                 mov     edx, [ebp+this]
.text:00001964                 mov     eax, [edx+78h]
.text:00001967                 mov     edx, [eax]
.text:00001969                 mov     eax, [edx+18h]
.text:0000196C                 call    eax
.text:0000196E                 cmp     esi, esp
.text:00001970                 call    __RTC_CheckEsp
.text:00001975                 mov     [ebp+var_184], eax
.text:0000197B                 mov     ecx, [ebp+var_184]
.text:00001981                 mov     [ebp+var_4C], ecx
.text:00001984                 mov     byte ptr [ebp+var_4], 0
.text:00001988                 lea     ecx, [ebp+var_124] ; this
.text:0000198E                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001993                 cmp     [ebp+var_4C], 0
.text:00001997                 jz      short loc_19A1
.text:00001999                 mov     eax, [ebp+var_4C]
.text:0000199C                 jmp     loc_1E88
.text:000019A1 ; ---------------------------------------------------------------------------
.text:000019A1
.text:000019A1 loc_19A1:                               ; CODE XREF: CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+36Bj
.text:000019A1                 movzx   edx, [ebp+var_1D]
.text:000019A5                 test    edx, edx
.text:000019A7                 jz      short loc_19B0
.text:000019A9                 xor     eax, eax
.text:000019AB                 jmp     loc_1E88
.text:000019B0 ; ---------------------------------------------------------------------------
.text:000019B0
.text:000019B0 loc_19B0:                               ; CODE XREF: CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+37Bj
.text:000019B0                 mov     eax, [ebp+this]
.text:000019B3                 movzx   ecx, byte ptr [eax+99h]
.text:000019BA                 test    ecx, ecx
.text:000019BC                 jz      loc_1A7A
.text:000019C2                 cmp     [ebp+arg_C], 0
.text:000019C6                 jz      short loc_19D5
.text:000019C8                 cmp     [ebp+arg_C], 1
.text:000019CC                 jz      short loc_19D5
.text:000019CE                 xor     eax, eax
.text:000019D0                 jmp     loc_1E88
.text:000019D5 ; ---------------------------------------------------------------------------
.text:000019D5
.text:000019D5 loc_19D5:                               ; CODE XREF: CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+39Aj
.text:000019D5                                         ; CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+3A0j
.text:000019D5                 push    8               ; unsigned int
.text:000019D7                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000019DC                 add     esp, 4
.text:000019DF                 mov     [ebp+var_188], eax
.text:000019E5                 mov     edx, [ebp+var_188]
.text:000019EB                 mov     [ebp+var_12C], edx
.text:000019F1                 mov     byte ptr [ebp+var_4], 6
.text:000019F5                 cmp     [ebp+var_12C], 0
.text:000019FC                 jz      short loc_1A1D
.text:000019FE                 mov     ecx, [ebp+var_12C]
.text:00001A04                 call    ??0CStdInFileStream@@QAE@XZ ; CStdInFileStream::CStdInFileStream(void)
.text:00001A09                 mov     [ebp+var_18C], eax
.text:00001A0F                 mov     eax, [ebp+var_18C]
.text:00001A15                 mov     [ebp+var_190], eax
.text:00001A1B                 jmp     short loc_1A27
.text:00001A1D ; ---------------------------------------------------------------------------
.text:00001A1D
.text:00001A1D loc_1A1D:                               ; CODE XREF: CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+3D0j
.text:00001A1D                 mov     [ebp+var_190], 0
.text:00001A27
.text:00001A27 loc_1A27:                               ; CODE XREF: CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+3EFj
.text:00001A27                 mov     ecx, [ebp+var_190]
.text:00001A2D                 mov     [ebp+var_128], ecx
.text:00001A33                 mov     byte ptr [ebp+var_4], 0
.text:00001A37                 mov     edx, [ebp+var_128]
.text:00001A3D                 mov     [ebp+var_50], edx
.text:00001A40                 mov     eax, [ebp+var_50]
.text:00001A43                 push    eax
.text:00001A44                 lea     ecx, [ebp+var_58]
.text:00001A47                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(ISequentialInStream *)
.text:00001A4C                 mov     byte ptr [ebp+var_4], 7
.text:00001A50                 lea     ecx, [ebp+var_58]
.text:00001A53                 call    ?Detach@?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::Detach(void)
.text:00001A58                 mov     [ebp+var_194], eax
.text:00001A5E                 mov     ecx, [ebp+arg_8]
.text:00001A61                 mov     edx, [ebp+var_194]
.text:00001A67                 mov     [ecx], edx
.text:00001A69                 mov     byte ptr [ebp+var_4], 0
.text:00001A6D                 lea     ecx, [ebp+var_58]
.text:00001A70                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00001A75                 jmp     loc_1E58
.text:00001A7A ; ---------------------------------------------------------------------------
.text:00001A7A
.text:00001A7A loc_1A7A:                               ; CODE XREF: CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+390j
.text:00001A7A                 push    58h ; 'X'       ; unsigned int
.text:00001A7C                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00001A81                 add     esp, 4
.text:00001A84                 mov     [ebp+var_198], eax
.text:00001A8A                 mov     eax, [ebp+var_198]
.text:00001A90                 mov     [ebp+var_134], eax
.text:00001A96                 mov     byte ptr [ebp+var_4], 8
.text:00001A9A                 cmp     [ebp+var_134], 0
.text:00001AA1                 jz      short loc_1AC2
.text:00001AA3                 mov     ecx, [ebp+var_134] ; this
.text:00001AA9                 call    ??0CInFileStream@@QAE@XZ ; CInFileStream::CInFileStream(void)
.text:00001AAE                 mov     [ebp+var_19C], eax
.text:00001AB4                 mov     ecx, [ebp+var_19C]
.text:00001ABA                 mov     [ebp+var_1A0], ecx
.text:00001AC0                 jmp     short loc_1ACC
.text:00001AC2 ; ---------------------------------------------------------------------------
.text:00001AC2
.text:00001AC2 loc_1AC2:                               ; CODE XREF: CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+475j
.text:00001AC2                 mov     [ebp+var_1A0], 0
.text:00001ACC
.text:00001ACC loc_1ACC:                               ; CODE XREF: CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+494j
.text:00001ACC                 mov     edx, [ebp+var_1A0]
.text:00001AD2                 mov     [ebp+var_130], edx
.text:00001AD8                 mov     byte ptr [ebp+var_4], 0
.text:00001ADC                 mov     eax, [ebp+var_130]
.text:00001AE2                 mov     [ebp+var_60], eax
.text:00001AE5                 mov     ecx, [ebp+var_60]
.text:00001AE8                 push    ecx
.text:00001AE9                 lea     ecx, [ebp+var_68]
.text:00001AEC                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(ISequentialInStream *)
.text:00001AF1                 mov     byte ptr [ebp+var_4], 9
.text:00001AF5                 mov     edx, [ebp+var_60]
.text:00001AF8                 mov     eax, [ebp+this]
.text:00001AFB                 mov     cl, [eax+9Ch]
.text:00001B01                 mov     [edx+48h], cl
.text:00001B04                 mov     edx, [ebp+this]
.text:00001B07                 sub     edx, 4
.text:00001B0A                 jz      short loc_1B1A
.text:00001B0C                 mov     eax, [ebp+this]
.text:00001B0F                 add     eax, 1Ch
.text:00001B12                 mov     [ebp+var_1A4], eax
.text:00001B18                 jmp     short loc_1B24
.text:00001B1A ; ---------------------------------------------------------------------------
.text:00001B1A
.text:00001B1A loc_1B1A:                               ; CODE XREF: CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+4DEj
.text:00001B1A                 mov     [ebp+var_1A4], 0
.text:00001B24
.text:00001B24 loc_1B24:                               ; CODE XREF: CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+4ECj
.text:00001B24                 mov     ecx, [ebp+var_60]
.text:00001B27                 mov     edx, [ebp+var_1A4]
.text:00001B2D                 mov     [ecx+4Ch], edx
.text:00001B30                 mov     eax, [ebp+var_60]
.text:00001B33                 mov     ecx, [ebp+arg_4]
.text:00001B36                 mov     [eax+50h], ecx
.text:00001B39                 mov     edx, [ebp+var_18]
.text:00001B3C                 mov     eax, [edx+4]
.text:00001B3F                 push    eax
.text:00001B40                 lea     ecx, [ebp+var_7C]
.text:00001B43                 push    ecx
.text:00001B44                 mov     edx, [ebp+this]
.text:00001B47                 mov     ecx, [edx+7Ch]
.text:00001B4A                 call    ?GetPhyPath@CDirItems@@QBE?AVUString@@I@Z ; CDirItems::GetPhyPath(uint)
.text:00001B4F                 mov     [ebp+var_1A8], eax
.text:00001B55                 mov     byte ptr [ebp+var_4], 0Ah
.text:00001B59                 mov     eax, [ebp+arg_4]
.text:00001B5C                 push    eax
.text:00001B5D                 mov     ecx, [ebp+this]
.text:00001B60                 add     ecx, 3Ch ; '<'
.text:00001B63                 call    ?Add@?$CRecordVector@I@@QAEII@Z ; CRecordVector<uint>::Add(uint)
.text:00001B68                 lea     ecx, [ebp+var_7C]
.text:00001B6B                 push    ecx
.text:00001B6C                 mov     ecx, [ebp+this]
.text:00001B6F                 add     ecx, 48h ; 'H'
.text:00001B72                 call    ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ; CObjectVector<UString>::Add(UString const &)
.text:00001B77                 mov     edx, [ebp+var_18]
.text:00001B7A                 mov     eax, [edx+4]
.text:00001B7D                 push    eax
.text:00001B7E                 mov     ecx, [ebp+this]
.text:00001B81                 mov     ecx, [ecx+7Ch]
.text:00001B84                 add     ecx, 24h ; '$'
.text:00001B87                 call    ??A?$CObjectVector@UCDirItem@@@@QBEABUCDirItem@@I@Z ; CObjectVector<CDirItem>::operator[](uint)
.text:00001B8C                 mov     [ebp+var_1AC], eax
.text:00001B92                 mov     ecx, [ebp+var_1AC] ; this
.text:00001B98                 call    ?AreReparseData@CDirItem@@QBE_NXZ ; CDirItem::AreReparseData(void)
.text:00001B9D                 mov     [ebp+var_1AD], al
.text:00001BA3                 movzx   edx, [ebp+var_1AD]
.text:00001BAA                 test    edx, edx
.text:00001BAC                 jz      loc_1C4D
.text:00001BB2                 lea     ecx, [ebp+var_7C]
.text:00001BB5                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00001BBA                 mov     [ebp+var_1B4], eax
.text:00001BC0                 mov     eax, [ebp+var_1B4]
.text:00001BC6                 push    eax             ; wchar_t *
.text:00001BC7                 mov     ecx, [ebp+var_60]
.text:00001BCA                 add     ecx, 18h        ; this
.text:00001BCD                 call    ?OpenReparse@CInFile@NIO@NFile@NWindows@@QAE_NPB_W@Z ; NWindows::NFile::NIO::CInFile::OpenReparse(wchar_t const *)
.text:00001BD2                 mov     [ebp+var_1B5], al
.text:00001BD8                 movzx   ecx, [ebp+var_1B5]
.text:00001BDF                 test    ecx, ecx
.text:00001BE1                 jnz     short loc_1C48
.text:00001BE3                 mov     esi, esp
.text:00001BE5                 call    dword ptr ds:__imp__GetLastError@0 ; GetLastError()
.text:00001BEB                 cmp     esi, esp
.text:00001BED                 call    __RTC_CheckEsp
.text:00001BF2                 mov     esi, esp
.text:00001BF4                 push    eax
.text:00001BF5                 lea     edx, [ebp+var_7C]
.text:00001BF8                 push    edx
.text:00001BF9                 mov     eax, [ebp+this]
.text:00001BFC                 mov     ecx, [eax+78h]
.text:00001BFF                 mov     edx, [ebp+this]
.text:00001C02                 mov     eax, [edx+78h]
.text:00001C05                 mov     edx, [eax]
.text:00001C07                 mov     eax, [edx+1Ch]
.text:00001C0A                 call    eax
.text:00001C0C                 cmp     esi, esp
.text:00001C0E                 call    __RTC_CheckEsp
.text:00001C13                 mov     [ebp+var_1BC], eax
.text:00001C19                 mov     ecx, [ebp+var_1BC]
.text:00001C1F                 mov     [ebp+var_138], ecx
.text:00001C25                 mov     byte ptr [ebp+var_4], 9
.text:00001C29                 lea     ecx, [ebp+var_7C] ; this
.text:00001C2C                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001C31                 mov     byte ptr [ebp+var_4], 0
.text:00001C35                 lea     ecx, [ebp+var_68]
.text:00001C38                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00001C3D                 mov     eax, [ebp+var_138]
.text:00001C43                 jmp     loc_1E88
.text:00001C48 ; ---------------------------------------------------------------------------
.text:00001C48
.text:00001C48 loc_1C48:                               ; CODE XREF: CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+5B5j
.text:00001C48                 jmp     loc_1CEB
.text:00001C4D ; ---------------------------------------------------------------------------
.text:00001C4D
.text:00001C4D loc_1C4D:                               ; CODE XREF: CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+580j
.text:00001C4D                 lea     ecx, [ebp+var_7C]
.text:00001C50                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00001C55                 mov     [ebp+var_1C0], eax
.text:00001C5B                 mov     edx, [ebp+this]
.text:00001C5E                 movzx   eax, byte ptr [edx+98h]
.text:00001C65                 push    eax             ; bool
.text:00001C66                 mov     ecx, [ebp+var_1C0]
.text:00001C6C                 push    ecx             ; wchar_t *
.text:00001C6D                 mov     ecx, [ebp+var_60] ; this
.text:00001C70                 call    ?OpenShared@CInFileStream@@QAE_NPB_W_N@Z ; CInFileStream::OpenShared(wchar_t const *,bool)
.text:00001C75                 mov     [ebp+var_1C1], al
.text:00001C7B                 movzx   edx, [ebp+var_1C1]
.text:00001C82                 test    edx, edx
.text:00001C84                 jnz     short loc_1CEB
.text:00001C86                 mov     esi, esp
.text:00001C88                 call    dword ptr ds:__imp__GetLastError@0 ; GetLastError()
.text:00001C8E                 cmp     esi, esp
.text:00001C90                 call    __RTC_CheckEsp
.text:00001C95                 mov     esi, esp
.text:00001C97                 push    eax
.text:00001C98                 lea     eax, [ebp+var_7C]
.text:00001C9B                 push    eax
.text:00001C9C                 mov     ecx, [ebp+this]
.text:00001C9F                 mov     ecx, [ecx+78h]
.text:00001CA2                 mov     edx, [ebp+this]
.text:00001CA5                 mov     eax, [edx+78h]
.text:00001CA8                 mov     edx, [eax]
.text:00001CAA                 mov     eax, [edx+1Ch]
.text:00001CAD                 call    eax
.text:00001CAF                 cmp     esi, esp
.text:00001CB1                 call    __RTC_CheckEsp
.text:00001CB6                 mov     [ebp+var_1C8], eax
.text:00001CBC                 mov     ecx, [ebp+var_1C8]
.text:00001CC2                 mov     [ebp+var_13C], ecx
.text:00001CC8                 mov     byte ptr [ebp+var_4], 9
.text:00001CCC                 lea     ecx, [ebp+var_7C] ; this
.text:00001CCF                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001CD4                 mov     byte ptr [ebp+var_4], 0
.text:00001CD8                 lea     ecx, [ebp+var_68]
.text:00001CDB                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00001CE0                 mov     eax, [ebp+var_13C]
.text:00001CE6                 jmp     loc_1E88
.text:00001CEB ; ---------------------------------------------------------------------------
.text:00001CEB
.text:00001CEB loc_1CEB:                               ; CODE XREF: CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint):loc_1C48j
.text:00001CEB                                         ; CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+658j
.text:00001CEB                 mov     edx, [ebp+this]
.text:00001CEE                 movzx   eax, byte ptr [edx+9Ch]
.text:00001CF5                 test    eax, eax
.text:00001CF7                 jz      loc_1DED
.text:00001CFD                 mov     esi, esp
.text:00001CFF                 lea     ecx, [ebp+var_C4]
.text:00001D05                 push    ecx
.text:00001D06                 mov     edx, [ebp+var_60]
.text:00001D09                 add     edx, 0Ch
.text:00001D0C                 push    edx
.text:00001D0D                 mov     eax, [ebp+var_60]
.text:00001D10                 mov     ecx, [eax+0Ch]
.text:00001D13                 mov     edx, [ecx+0Ch]
.text:00001D16                 call    edx
.text:00001D18                 cmp     esi, esp
.text:00001D1A                 call    __RTC_CheckEsp
.text:00001D1F                 mov     [ebp+var_1CC], eax
.text:00001D25                 cmp     [ebp+var_1CC], 0
.text:00001D2C                 jnz     loc_1DED
.text:00001D32                 cmp     [ebp+var_A4], 1
.text:00001D39                 jbe     loc_1DED
.text:00001D3F                 mov     eax, [ebp+var_BC]
.text:00001D45                 mov     [ebp+var_E4], eax
.text:00001D4B                 mov     ecx, [ebp+var_B8]
.text:00001D51                 mov     [ebp+var_E0], ecx
.text:00001D57                 mov     edx, [ebp+var_B4]
.text:00001D5D                 mov     [ebp+var_DC], edx
.text:00001D63                 mov     eax, [ebp+var_B0]
.text:00001D69                 mov     [ebp+var_D8], eax
.text:00001D6F                 mov     ecx, [ebp+arg_4]
.text:00001D72                 mov     [ebp+var_D4], ecx
.text:00001D78                 mov     ecx, [ebp+this]
.text:00001D7B                 add     ecx, 28h ; '('
.text:00001D7E                 call    ?Size@?$CRecordVector@UCKeyKeyValPair@@@@QBEIXZ ; CRecordVector<CKeyKeyValPair>::Size(void)
.text:00001D83                 mov     [ebp+var_1D0], eax
.text:00001D89                 mov     edx, [ebp+var_1D0]
.text:00001D8F                 mov     [ebp+var_EC], edx
.text:00001D95                 lea     eax, [ebp+var_E4]
.text:00001D9B                 push    eax             ; CKeyKeyValPair *
.text:00001D9C                 mov     ecx, [ebp+this]
.text:00001D9F                 add     ecx, 28h ; '('
.text:00001DA2                 call    ?AddToUniqueSorted2@?$CRecordVector@UCKeyKeyValPair@@@@QAEIABUCKeyKeyValPair@@@Z ; CRecordVector<CKeyKeyValPair>::AddToUniqueSorted2(CKeyKeyValPair const &)
.text:00001DA7                 mov     [ebp+var_1D4], eax
.text:00001DAD                 mov     ecx, [ebp+var_1D4]
.text:00001DB3                 mov     [ebp+var_F0], ecx
.text:00001DB9                 mov     ecx, [ebp+this]
.text:00001DBC                 add     ecx, 28h ; '('
.text:00001DBF                 call    ?Size@?$CRecordVector@UCKeyKeyValPair@@@@QBEIXZ ; CRecordVector<CKeyKeyValPair>::Size(void)
.text:00001DC4                 mov     [ebp+var_1D8], eax
.text:00001DCA                 mov     edx, [ebp+var_EC]
.text:00001DD0                 cmp     edx, [ebp+var_1D8]
.text:00001DD6                 jnz     short loc_1DED
.text:00001DD8                 mov     eax, [ebp+this]
.text:00001DDB                 mov     ecx, [ebp+arg_4]
.text:00001DDE                 mov     [eax+34h], ecx
.text:00001DE1                 mov     edx, [ebp+this]
.text:00001DE4                 mov     eax, [ebp+var_F0]
.text:00001DEA                 mov     [edx+38h], eax
.text:00001DED
.text:00001DED loc_1DED:                               ; CODE XREF: CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+6CBj
.text:00001DED                                         ; CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+700j ...
.text:00001DED                 mov     ecx, [ebp+this]
.text:00001DF0                 cmp     dword ptr [ecx+0A0h], 0
.text:00001DF7                 jz      short loc_1E27
.text:00001DF9                 push    offset _CS      ; struct NWindows::NSynchronization::CCriticalSection *
.text:00001DFE                 lea     ecx, [ebp+var_F8] ; this
.text:00001E04                 call    ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z ; NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock(NWindows::NSynchronization::CCriticalSection &)
.text:00001E09                 mov     edx, [ebp+this]
.text:00001E0C                 mov     eax, [edx+0A0h]
.text:00001E12                 mov     ecx, [ebp+var_18]
.text:00001E15                 mov     edx, [ecx+4]
.text:00001E18                 mov     byte ptr [eax+edx], 1
.text:00001E1C                 lea     ecx, [ebp+var_F8] ; this
.text:00001E22                 call    ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)
.text:00001E27
.text:00001E27 loc_1E27:                               ; CODE XREF: CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+7CBj
.text:00001E27                 lea     ecx, [ebp+var_68]
.text:00001E2A                 call    ?Detach@?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::Detach(void)
.text:00001E2F                 mov     [ebp+var_1DC], eax
.text:00001E35                 mov     eax, [ebp+arg_8]
.text:00001E38                 mov     ecx, [ebp+var_1DC]
.text:00001E3E                 mov     [eax], ecx
.text:00001E40                 mov     byte ptr [ebp+var_4], 9
.text:00001E44                 lea     ecx, [ebp+var_7C] ; this
.text:00001E47                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001E4C                 mov     byte ptr [ebp+var_4], 0
.text:00001E50                 lea     ecx, [ebp+var_68]
.text:00001E53                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00001E58
.text:00001E58 loc_1E58:                               ; CODE XREF: CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+449j
.text:00001E58                 xor     eax, eax
.text:00001E5A                 jmp     short loc_1E88
.text:00001E5A ?GetStream2@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@I@Z endp ; sp-analysis failed
.text:00001E5A
.text:00001E5C
.text:00001E5C ; =============== S U B R O U T I N E =======================================
.text:00001E5C
.text:00001E5C
.text:00001E5C __catch$?GetStream2@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@I@Z$0 proc near
.text:00001E5C                                         ; DATA XREF: .xdata$x:00003668o
.text:00001E5C                 mov     dword ptr [ebp-140h], 8007000Eh
.text:00001E66                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00001E6D                 mov     eax, offset $LN48
.text:00001E72                 retn
.text:00001E72 __catch$?GetStream2@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@I@Z$0 endp
.text:00001E72
.text:00001E73 ; ---------------------------------------------------------------------------
.text:00001E73                 mov     eax, offset __tryend$?GetStream2@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@I@Z$1
.text:00001E78                 retn
.text:00001E79 ; ---------------------------------------------------------------------------
.text:00001E79
.text:00001E79 __tryend$?GetStream2@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@I@Z$1:
.text:00001E79                                         ; DATA XREF: .text:00001E73o
.text:00001E79                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00001E80                 jmp     short loc_1E88
.text:00001E82 ; ---------------------------------------------------------------------------
.text:00001E82
.text:00001E82 $LN48:                                  ; DATA XREF: __catch$?GetStream2@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@I@Z$0+11o
.text:00001E82                 mov     eax, [ebp-140h]
.text:00001E88 ; START OF FUNCTION CHUNK FOR ?GetStream2@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@I@Z
.text:00001E88
.text:00001E88 loc_1E88:                               ; CODE XREF: CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+84j
.text:00001E88                                         ; CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+BDj ...
.text:00001E88                 push    edx
.text:00001E89                 mov     ecx, ebp
.text:00001E8B                 push    eax
.text:00001E8C                 lea     edx, $LN60_0
.text:00001E92                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001E97                 pop     eax
.text:00001E98                 pop     edx
.text:00001E99                 mov     ecx, [ebp+var_C]
.text:00001E9C                 mov     large fs:0, ecx
.text:00001EA3                 pop     ecx
.text:00001EA4                 pop     edi
.text:00001EA5                 pop     esi
.text:00001EA6                 pop     ebx
.text:00001EA7                 mov     ecx, [ebp+var_14]
.text:00001EAA                 xor     ecx, ebp
.text:00001EAC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00001EB1                 add     esp, 1DCh
.text:00001EB7                 cmp     ebp, esp
.text:00001EB9                 call    __RTC_CheckEsp
.text:00001EBE                 mov     esp, ebp
.text:00001EC0                 pop     ebp
.text:00001EC1                 retn    10h
.text:00001EC1 ; END OF FUNCTION CHUNK FOR ?GetStream2@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@I@Z
.text:00001EC1 ; ---------------------------------------------------------------------------
.text:00001EC4 $LN60_0         dd 8                    ; DATA XREF: CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+860o
.text:00001EC8                 dd offset $LN59_0
.text:00001ECC $LN59_0         dd 0FFFFFFD0h, 0Ch      ; DATA XREF: .text:00001EC8o
.text:00001ED4                 dd offset $LN50         ; "name"
.text:00001ED8                 dd 0FFFFFFBCh, 4
.text:00001EE0                 dd offset $LN51         ; "inStreamLoc"
.text:00001EE4                 dd 0FFFFFFA8h, 4
.text:00001EEC                 dd offset $LN52         ; "inStreamLoc"
.text:00001EF0                 dd 0FFFFFF98h, 4
.text:00001EF8                 dd offset $LN53         ; "inStreamLoc"
.text:00001EFC                 dd 0FFFFFF84h, 0Ch
.text:00001F04                 dd offset $LN54_0       ; "path"
.text:00001F08                 dd 0FFFFFF3Ch, 40h
.text:00001F10                 dd offset $LN55         ; "props"
.text:00001F14                 dd 0FFFFFF1Ch, 18h
.text:00001F1C                 dd offset $LN56_0       ; "pair"
.text:00001F20                 db 8, 0FFh
.text:00001F22                 dw 0FFFFh
.text:00001F24                 dd 4
.text:00001F28                 dd offset $LN57_0       ; "lock"
.text:00001F2C $LN57_0         db 'lock',0             ; DATA XREF: .text:00001F28o
.text:00001F31 $LN56_0         db 'pair',0             ; DATA XREF: .text:00001F1Co
.text:00001F36 $LN55           db 'props',0            ; DATA XREF: .text:00001F10o
.text:00001F3C $LN54_0         db 'path',0             ; DATA XREF: .text:00001F04o
.text:00001F41 $LN53           db 'inStreamLoc',0      ; DATA XREF: .text:00001EF8o
.text:00001F4D $LN52           db 'inStreamLoc',0      ; DATA XREF: .text:00001EECo
.text:00001F59 $LN51           db 'inStreamLoc',0      ; DATA XREF: .text:00001EE0o
.text:00001F65 $LN50           db 'name',0             ; DATA XREF: .text:00001ED4o
.text:00001F6A                 align 4
.text:00001F6C
.text:00001F6C ; =============== S U B R O U T I N E =======================================
.text:00001F6C
.text:00001F6C ; Attributes: bp-based frame
.text:00001F6C
.text:00001F6C ; __int32 __cdecl CArchiveUpdateCallback::SetOperationResult(CArchiveUpdateCallback *this, int)
.text:00001F6C                 public ?SetOperationResult@CArchiveUpdateCallback@@UAGJH@Z
.text:00001F6C ?SetOperationResult@CArchiveUpdateCallback@@UAGJH@Z proc near
.text:00001F6C                                         ; DATA XREF: .rdata:000033B8o
.text:00001F6C
.text:00001F6C var_18          = dword ptr -18h
.text:00001F6C var_14          = dword ptr -14h
.text:00001F6C var_10          = dword ptr -10h
.text:00001F6C var_C           = dword ptr -0Ch
.text:00001F6C var_4           = dword ptr -4
.text:00001F6C this            = dword ptr  8
.text:00001F6C arg_4           = dword ptr  0Ch
.text:00001F6C
.text:00001F6C ; FUNCTION CHUNK AT .text:00001FFB SIZE 0000001E BYTES
.text:00001F6C
.text:00001F6C                 push    ebp
.text:00001F6D                 mov     ebp, esp
.text:00001F6F                 push    0FFFFFFFFh
.text:00001F71                 push    offset __ehhandler$?SetOperationResult@CArchiveUpdateCallback@@UAGJH@Z
.text:00001F76                 mov     eax, large fs:0
.text:00001F7C                 push    eax
.text:00001F7D                 push    ecx
.text:00001F7E                 sub     esp, 8
.text:00001F81                 push    ebx
.text:00001F82                 push    esi
.text:00001F83                 push    edi
.text:00001F84                 mov     [ebp+var_18], 0CCCCCCCCh
.text:00001F8B                 mov     [ebp+var_14], 0CCCCCCCCh
.text:00001F92                 mov     eax, dword ptr ds:___security_cookie
.text:00001F97                 xor     eax, ebp
.text:00001F99                 push    eax
.text:00001F9A                 lea     eax, [ebp+var_C]
.text:00001F9D                 mov     large fs:0, eax
.text:00001FA3                 mov     [ebp+var_10], esp
.text:00001FA6                 mov     [ebp+var_4], 0
.text:00001FAD                 mov     esi, esp
.text:00001FAF                 mov     eax, [ebp+arg_4]
.text:00001FB2                 push    eax
.text:00001FB3                 mov     ecx, [ebp+this]
.text:00001FB6                 mov     ecx, [ecx+7Ch]
.text:00001FB9                 mov     edx, [ebp+this]
.text:00001FBC                 mov     eax, [edx+7Ch]
.text:00001FBF                 mov     edx, [eax]
.text:00001FC1                 mov     eax, [edx+24h]
.text:00001FC4                 call    eax
.text:00001FC6                 cmp     esi, esp
.text:00001FC8                 call    __RTC_CheckEsp
.text:00001FCD                 mov     [ebp+var_18], eax
.text:00001FD0                 mov     eax, [ebp+var_18]
.text:00001FD3                 jmp     short loc_1FFB
.text:00001FD3 ?SetOperationResult@CArchiveUpdateCallback@@UAGJH@Z endp
.text:00001FD3
.text:00001FD5
.text:00001FD5 ; =============== S U B R O U T I N E =======================================
.text:00001FD5
.text:00001FD5
.text:00001FD5 __catch$?SetOperationResult@CArchiveUpdateCallback@@UAGJH@Z$0 proc near
.text:00001FD5                                         ; DATA XREF: .xdata$x:00003710o
.text:00001FD5                 mov     dword ptr [ebp-14h], 8007000Eh
.text:00001FDC                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00001FE3                 mov     eax, offset $LN7_3
.text:00001FE8                 retn
.text:00001FE8 __catch$?SetOperationResult@CArchiveUpdateCallback@@UAGJH@Z$0 endp
.text:00001FE8
.text:00001FE9 ; ---------------------------------------------------------------------------
.text:00001FE9                 mov     eax, offset __tryend$?SetOperationResult@CArchiveUpdateCallback@@UAGJH@Z$1
.text:00001FEE                 retn
.text:00001FEF ; ---------------------------------------------------------------------------
.text:00001FEF
.text:00001FEF __tryend$?SetOperationResult@CArchiveUpdateCallback@@UAGJH@Z$1:
.text:00001FEF                                         ; DATA XREF: .text:00001FE9o
.text:00001FEF                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00001FF6                 jmp     short loc_1FFB
.text:00001FF8 ; ---------------------------------------------------------------------------
.text:00001FF8
.text:00001FF8 $LN7_3:                                 ; DATA XREF: __catch$?SetOperationResult@CArchiveUpdateCallback@@UAGJH@Z$0+Eo
.text:00001FF8                 mov     eax, [ebp-14h]
.text:00001FFB ; START OF FUNCTION CHUNK FOR ?SetOperationResult@CArchiveUpdateCallback@@UAGJH@Z
.text:00001FFB
.text:00001FFB loc_1FFB:                               ; CODE XREF: CArchiveUpdateCallback::SetOperationResult(int)+67j
.text:00001FFB                                         ; .text:00001FF6j
.text:00001FFB                 mov     ecx, [ebp+var_C]
.text:00001FFE                 mov     large fs:0, ecx
.text:00002005                 pop     ecx
.text:00002006                 pop     edi
.text:00002007                 pop     esi
.text:00002008                 pop     ebx
.text:00002009                 add     esp, 18h
.text:0000200C                 cmp     ebp, esp
.text:0000200E                 call    __RTC_CheckEsp
.text:00002013                 mov     esp, ebp
.text:00002015                 pop     ebp
.text:00002016                 retn    8
.text:00002016 ; END OF FUNCTION CHUNK FOR ?SetOperationResult@CArchiveUpdateCallback@@UAGJH@Z
.text:00002016 ; ---------------------------------------------------------------------------
.text:00002019                 align 4
.text:0000201C
.text:0000201C ; =============== S U B R O U T I N E =======================================
.text:0000201C
.text:0000201C ; Attributes: bp-based frame
.text:0000201C
.text:0000201C ; __int32 __cdecl CArchiveUpdateCallback::GetStream(CArchiveUpdateCallback *this, unsigned int, struct ISequentialInStream **)
.text:0000201C                 public ?GetStream@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@@Z
.text:0000201C ?GetStream@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@@Z proc near
.text:0000201C                                         ; DATA XREF: .rdata:000033B4o
.text:0000201C
.text:0000201C var_1C          = dword ptr -1Ch
.text:0000201C var_18          = dword ptr -18h
.text:0000201C var_14          = dword ptr -14h
.text:0000201C var_10          = dword ptr -10h
.text:0000201C var_C           = dword ptr -0Ch
.text:0000201C var_4           = dword ptr -4
.text:0000201C this            = dword ptr  8
.text:0000201C arg_4           = dword ptr  0Ch
.text:0000201C arg_8           = dword ptr  10h
.text:0000201C
.text:0000201C ; FUNCTION CHUNK AT .text:000020D7 SIZE 0000001E BYTES
.text:0000201C
.text:0000201C                 push    ebp
.text:0000201D                 mov     ebp, esp
.text:0000201F                 push    0FFFFFFFFh
.text:00002021                 push    offset __ehhandler$?GetStream@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@@Z
.text:00002026                 mov     eax, large fs:0
.text:0000202C                 push    eax
.text:0000202D                 push    ecx
.text:0000202E                 sub     esp, 0Ch
.text:00002031                 push    ebx
.text:00002032                 push    esi
.text:00002033                 push    edi
.text:00002034                 mov     [ebp+var_1C], 0CCCCCCCCh
.text:0000203B                 mov     [ebp+var_18], 0CCCCCCCCh
.text:00002042                 mov     [ebp+var_14], 0CCCCCCCCh
.text:00002049                 mov     eax, dword ptr ds:___security_cookie
.text:0000204E                 xor     eax, ebp
.text:00002050                 push    eax
.text:00002051                 lea     eax, [ebp+var_C]
.text:00002054                 mov     large fs:0, eax
.text:0000205A                 mov     [ebp+var_10], esp
.text:0000205D                 mov     [ebp+var_4], 0
.text:00002064                 mov     eax, [ebp+arg_4]
.text:00002067                 push    eax
.text:00002068                 mov     ecx, [ebp+this]
.text:0000206B                 mov     ecx, [ecx+94h]
.text:00002071                 call    ??A?$CRecordVector@UCUpdatePair2@@@@QBEABUCUpdatePair2@@I@Z ; CRecordVector<CUpdatePair2>::operator[](uint)
.text:00002076                 mov     [ebp+var_18], eax
.text:00002079                 mov     edx, [ebp+var_18]
.text:0000207C                 xor     eax, eax
.text:0000207E                 cmp     dword ptr [edx+8], 0
.text:00002082                 setnl   al
.text:00002085                 mov     esi, esp
.text:00002087                 push    eax
.text:00002088                 mov     ecx, [ebp+arg_8]
.text:0000208B                 push    ecx
.text:0000208C                 mov     edx, [ebp+arg_4]
.text:0000208F                 push    edx
.text:00002090                 mov     eax, [ebp+this]
.text:00002093                 add     eax, 4
.text:00002096                 push    eax
.text:00002097                 mov     ecx, [ebp+this]
.text:0000209A                 mov     edx, [ecx+4]
.text:0000209D                 mov     eax, [edx+0Ch]
.text:000020A0                 call    eax
.text:000020A2                 cmp     esi, esp
.text:000020A4                 call    __RTC_CheckEsp
.text:000020A9                 mov     [ebp+var_1C], eax
.text:000020AC                 mov     eax, [ebp+var_1C]
.text:000020AF                 jmp     short loc_20D7
.text:000020AF ?GetStream@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@@Z endp
.text:000020AF
.text:000020B1
.text:000020B1 ; =============== S U B R O U T I N E =======================================
.text:000020B1
.text:000020B1
.text:000020B1 __catch$?GetStream@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@@Z$0 proc near
.text:000020B1                                         ; DATA XREF: .xdata$x:00003768o
.text:000020B1                 mov     dword ptr [ebp-14h], 8007000Eh
.text:000020B8                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:000020BF                 mov     eax, offset $LN7_4
.text:000020C4                 retn
.text:000020C4 __catch$?GetStream@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@@Z$0 endp
.text:000020C4
.text:000020C5 ; ---------------------------------------------------------------------------
.text:000020C5                 mov     eax, offset __tryend$?GetStream@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@@Z$1
.text:000020CA                 retn
.text:000020CB ; ---------------------------------------------------------------------------
.text:000020CB
.text:000020CB __tryend$?GetStream@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@@Z$1:
.text:000020CB                                         ; DATA XREF: .text:000020C5o
.text:000020CB                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:000020D2                 jmp     short loc_20D7
.text:000020D4 ; ---------------------------------------------------------------------------
.text:000020D4
.text:000020D4 $LN7_4:                                 ; DATA XREF: __catch$?GetStream@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@@Z$0+Eo
.text:000020D4                 mov     eax, [ebp-14h]
.text:000020D7 ; START OF FUNCTION CHUNK FOR ?GetStream@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@@Z
.text:000020D7
.text:000020D7 loc_20D7:                               ; CODE XREF: CArchiveUpdateCallback::GetStream(uint,ISequentialInStream * *)+93j
.text:000020D7                                         ; .text:000020D2j
.text:000020D7                 mov     ecx, [ebp+var_C]
.text:000020DA                 mov     large fs:0, ecx
.text:000020E1                 pop     ecx
.text:000020E2                 pop     edi
.text:000020E3                 pop     esi
.text:000020E4                 pop     ebx
.text:000020E5                 add     esp, 1Ch
.text:000020E8                 cmp     ebp, esp
.text:000020EA                 call    __RTC_CheckEsp
.text:000020EF                 mov     esp, ebp
.text:000020F1                 pop     ebp
.text:000020F2                 retn    0Ch
.text:000020F2 ; END OF FUNCTION CHUNK FOR ?GetStream@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@@Z
.text:000020F2 ; ---------------------------------------------------------------------------
.text:000020F5                 db 7 dup(0CCh)
.text:000020FC
.text:000020FC ; =============== S U B R O U T I N E =======================================
.text:000020FC
.text:000020FC ; Attributes: bp-based frame
.text:000020FC
.text:000020FC ; __int32 __cdecl CArchiveUpdateCallback::ReportOperation(CArchiveUpdateCallback *this, unsigned int, unsigned int, unsigned int)
.text:000020FC                 public ?ReportOperation@CArchiveUpdateCallback@@UAGJIII@Z
.text:000020FC ?ReportOperation@CArchiveUpdateCallback@@UAGJIII@Z proc near
.text:000020FC                                         ; DATA XREF: .rdata:00003390o
.text:000020FC
.text:000020FC var_E8          = dword ptr -0E8h
.text:000020FC var_E4          = dword ptr -0E4h
.text:000020FC var_E0          = dword ptr -0E0h
.text:000020FC var_DC          = dword ptr -0DCh
.text:000020FC var_D8          = dword ptr -0D8h
.text:000020FC var_D4          = dword ptr -0D4h
.text:000020FC var_D0          = dword ptr -0D0h
.text:000020FC var_CC          = dword ptr -0CCh
.text:000020FC var_C8          = dword ptr -0C8h
.text:000020FC var_C4          = dword ptr -0C4h
.text:000020FC var_BE          = byte ptr -0BEh
.text:000020FC var_BD          = byte ptr -0BDh
.text:000020FC var_BC          = dword ptr -0BCh
.text:000020FC var_B8          = dword ptr -0B8h
.text:000020FC var_B4          = dword ptr -0B4h
.text:000020FC var_AD          = byte ptr -0ADh
.text:000020FC var_AC          = dword ptr -0ACh
.text:000020FC var_A8          = dword ptr -0A8h
.text:000020FC var_A0          = dword ptr -0A0h
.text:000020FC var_9C          = dword ptr -9Ch
.text:000020FC var_98          = dword ptr -98h
.text:000020FC var_94          = dword ptr -94h
.text:000020FC var_90          = byte ptr -90h
.text:000020FC var_84          = dword ptr -84h
.text:000020FC var_80          = dword ptr -80h
.text:000020FC var_7C          = dword ptr -7Ch
.text:000020FC var_78          = dword ptr -78h
.text:000020FC var_70          = byte ptr -70h
.text:000020FC var_5C          = word ptr -5Ch
.text:000020FC var_5A          = word ptr -5Ah
.text:000020FC var_38          = dword ptr -38h
.text:000020FC var_30          = byte ptr -30h
.text:000020FC var_19          = byte ptr -19h
.text:000020FC var_14          = dword ptr -14h
.text:000020FC var_10          = dword ptr -10h
.text:000020FC var_C           = dword ptr -0Ch
.text:000020FC var_4           = dword ptr -4
.text:000020FC this            = dword ptr  8
.text:000020FC arg_4           = dword ptr  0Ch
.text:000020FC arg_8           = dword ptr  10h
.text:000020FC arg_C           = dword ptr  14h
.text:000020FC
.text:000020FC ; FUNCTION CHUNK AT .text:000024BF SIZE 0000003C BYTES
.text:000020FC
.text:000020FC                 push    ebp
.text:000020FD                 mov     ebp, esp
.text:000020FF                 push    0FFFFFFFFh
.text:00002101                 push    offset __ehhandler$?ReportOperation@CArchiveUpdateCallback@@UAGJIII@Z
.text:00002106                 mov     eax, large fs:0
.text:0000210C                 push    eax
.text:0000210D                 push    ecx
.text:0000210E                 sub     esp, 0D8h
.text:00002114                 push    ebx
.text:00002115                 push    esi
.text:00002116                 push    edi
.text:00002117                 lea     edi, [ebp+var_E8]
.text:0000211D                 mov     ecx, 36h ; '6'
.text:00002122                 mov     eax, 0CCCCCCCCh
.text:00002127                 rep stosd
.text:00002129                 mov     eax, dword ptr ds:___security_cookie
.text:0000212E                 xor     eax, ebp
.text:00002130                 mov     [ebp+var_14], eax
.text:00002133                 push    eax
.text:00002134                 lea     eax, [ebp+var_C]
.text:00002137                 mov     large fs:0, eax
.text:0000213D                 mov     [ebp+var_10], esp
.text:00002140                 mov     [ebp+var_4], 0
.text:00002147                 mov     [ebp+var_19], 0
.text:0000214B                 cmp     [ebp+arg_4], 3
.text:0000214F                 jnz     loc_22C5
.text:00002155                 lea     ecx, [ebp+var_30]
.text:00002158                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:0000215D                 mov     [ebp+var_A8], eax
.text:00002163                 mov     byte ptr [ebp+var_4], 1
.text:00002167                 cmp     [ebp+arg_8], 0FFFFFFFFh
.text:0000216B                 jz      loc_2231
.text:00002171                 mov     eax, [ebp+arg_8]
.text:00002174                 push    eax
.text:00002175                 mov     ecx, [ebp+this]
.text:00002178                 mov     ecx, [ecx+90h]
.text:0000217E                 call    ??A?$CRecordVector@UCUpdatePair2@@@@QBEABUCUpdatePair2@@I@Z ; CRecordVector<CUpdatePair2>::operator[](uint)
.text:00002183                 mov     [ebp+var_AC], eax
.text:00002189                 mov     edx, [ebp+var_AC]
.text:0000218F                 mov     [ebp+var_38], edx
.text:00002192                 mov     ecx, [ebp+var_38] ; this
.text:00002195                 call    ?ExistOnDisk@CUpdatePair2@@QBE_NXZ ; CUpdatePair2::ExistOnDisk(void)
.text:0000219A                 mov     [ebp+var_AD], al
.text:000021A0                 movzx   eax, [ebp+var_AD]
.text:000021A7                 test    eax, eax
.text:000021A9                 jz      loc_2231
.text:000021AF                 mov     ecx, [ebp+var_38]
.text:000021B2                 mov     edx, [ecx+4]
.text:000021B5                 push    edx
.text:000021B6                 lea     eax, [ebp+var_90]
.text:000021BC                 push    eax
.text:000021BD                 mov     ecx, [ebp+this]
.text:000021C0                 mov     ecx, [ecx+7Ch]
.text:000021C3                 call    ?GetLogPath@CDirItems@@QBE?AVUString@@I@Z ; CDirItems::GetLogPath(uint)
.text:000021C8                 mov     [ebp+var_B4], eax
.text:000021CE                 mov     edx, [ebp+var_B4]
.text:000021D4                 mov     [ebp+var_B8], edx
.text:000021DA                 mov     byte ptr [ebp+var_4], 2
.text:000021DE                 mov     eax, [ebp+var_B8]
.text:000021E4                 push    eax
.text:000021E5                 lea     ecx, [ebp+var_30]
.text:000021E8                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:000021ED                 mov     byte ptr [ebp+var_4], 1
.text:000021F1                 lea     ecx, [ebp+var_90] ; this
.text:000021F7                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000021FC                 mov     ecx, [ebp+var_38]
.text:000021FF                 mov     edx, [ecx+4]
.text:00002202                 push    edx
.text:00002203                 mov     eax, [ebp+this]
.text:00002206                 mov     ecx, [eax+7Ch]
.text:00002209                 add     ecx, 24h ; '$'
.text:0000220C                 call    ??A?$CObjectVector@UCDirItem@@@@QBEABUCDirItem@@I@Z ; CObjectVector<CDirItem>::operator[](uint)
.text:00002211                 mov     [ebp+var_BC], eax
.text:00002217                 mov     ecx, [ebp+var_BC] ; this
.text:0000221D                 call    ?IsDir@CDirItem@@QBE_NXZ ; CDirItem::IsDir(void)
.text:00002222                 mov     [ebp+var_BD], al
.text:00002228                 mov     cl, [ebp+var_BD]
.text:0000222E                 mov     [ebp+var_19], cl
.text:00002231
.text:00002231 loc_2231:                               ; CODE XREF: CArchiveUpdateCallback::ReportOperation(uint,uint,uint)+6Fj
.text:00002231                                         ; CArchiveUpdateCallback::ReportOperation(uint,uint,uint)+ADj
.text:00002231                 lea     ecx, [ebp+var_30] ; this
.text:00002234                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:00002239                 mov     [ebp+var_BE], al
.text:0000223F                 movzx   edx, [ebp+var_BE]
.text:00002246                 test    edx, edx
.text:00002248                 jz      short loc_2256
.text:0000224A                 mov     [ebp+var_C4], 0
.text:00002254                 jmp     short loc_2270
.text:00002256 ; ---------------------------------------------------------------------------
.text:00002256
.text:00002256 loc_2256:                               ; CODE XREF: CArchiveUpdateCallback::ReportOperation(uint,uint,uint)+14Cj
.text:00002256                 lea     ecx, [ebp+var_30] ; this
.text:00002259                 call    ?Ptr@UString@@QBEPB_WXZ ; UString::Ptr(void)
.text:0000225E                 mov     [ebp+var_C8], eax
.text:00002264                 mov     eax, [ebp+var_C8]
.text:0000226A                 mov     [ebp+var_C4], eax
.text:00002270
.text:00002270 loc_2270:                               ; CODE XREF: CArchiveUpdateCallback::ReportOperation(uint,uint,uint)+158j
.text:00002270                 mov     esi, esp
.text:00002272                 movzx   ecx, [ebp+var_19]
.text:00002276                 push    ecx
.text:00002277                 mov     edx, [ebp+var_C4]
.text:0000227D                 push    edx
.text:0000227E                 mov     eax, [ebp+arg_C]
.text:00002281                 push    eax
.text:00002282                 mov     ecx, [ebp+this]
.text:00002285                 mov     ecx, [ecx+78h]
.text:00002288                 mov     edx, [ebp+this]
.text:0000228B                 mov     eax, [edx+78h]
.text:0000228E                 mov     edx, [eax]
.text:00002290                 mov     eax, [edx+2Ch]
.text:00002293                 call    eax
.text:00002295                 cmp     esi, esp
.text:00002297                 call    __RTC_CheckEsp
.text:0000229C                 mov     [ebp+var_CC], eax
.text:000022A2                 mov     ecx, [ebp+var_CC]
.text:000022A8                 mov     [ebp+var_94], ecx
.text:000022AE                 mov     byte ptr [ebp+var_4], 0
.text:000022B2                 lea     ecx, [ebp+var_30] ; this
.text:000022B5                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000022BA                 mov     eax, [ebp+var_94]
.text:000022C0                 jmp     loc_24BF
.text:000022C5 ; ---------------------------------------------------------------------------
.text:000022C5
.text:000022C5 loc_22C5:                               ; CODE XREF: CArchiveUpdateCallback::ReportOperation(uint,uint,uint)+53j
.text:000022C5                 lea     ecx, [ebp+var_70]
.text:000022C8                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:000022CD                 mov     [ebp+var_D0], eax
.text:000022D3                 mov     byte ptr [ebp+var_4], 3
.text:000022D7                 mov     [ebp+var_78], 0
.text:000022DE                 cmp     [ebp+arg_4], 1
.text:000022E2                 jnz     loc_2415
.text:000022E8                 cmp     [ebp+arg_8], 0FFFFFFFFh
.text:000022EC                 jz      loc_2413
.text:000022F2                 mov     edx, [ebp+this]
.text:000022F5                 cmp     dword ptr [edx+8Ch], 0
.text:000022FC                 jz      short loc_2347
.text:000022FE                 mov     eax, [ebp+arg_8]
.text:00002301                 push    eax
.text:00002302                 mov     ecx, [ebp+this]
.text:00002305                 mov     ecx, [ecx+8Ch]
.text:0000230B                 call    ??A?$CObjectVector@UCArcItem@@@@QBEABUCArcItem@@I@Z ; CObjectVector<CArcItem>::operator[](uint)
.text:00002310                 mov     [ebp+var_D4], eax
.text:00002316                 mov     edx, [ebp+var_D4]
.text:0000231C                 mov     [ebp+var_7C], edx
.text:0000231F                 mov     ecx, [ebp+var_7C]
.text:00002322                 add     ecx, 10h
.text:00002325                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:0000232A                 mov     [ebp+var_D8], eax
.text:00002330                 mov     eax, [ebp+var_D8]
.text:00002336                 mov     [ebp+var_78], eax
.text:00002339                 mov     ecx, [ebp+var_7C]
.text:0000233C                 mov     dl, [ecx+1Ch]
.text:0000233F                 mov     [ebp+var_19], dl
.text:00002342                 jmp     loc_2413
.text:00002347 ; ---------------------------------------------------------------------------
.text:00002347
.text:00002347 loc_2347:                               ; CODE XREF: CArchiveUpdateCallback::ReportOperation(uint,uint,uint)+200j
.text:00002347                 mov     eax, [ebp+this]
.text:0000234A                 cmp     dword ptr [eax+84h], 0
.text:00002351                 jz      loc_2413
.text:00002357                 lea     ecx, [ebp+var_70]
.text:0000235A                 push    ecx             ; struct UString *
.text:0000235B                 mov     edx, [ebp+arg_8]
.text:0000235E                 push    edx             ; unsigned int
.text:0000235F                 mov     eax, [ebp+this]
.text:00002362                 mov     ecx, [eax+84h]  ; this
.text:00002368                 call    ?GetItemPath@CArc@@QBEJIAAVUString@@@Z ; CArc::GetItemPath(uint,UString &)
.text:0000236D                 mov     [ebp+var_DC], eax
.text:00002373                 mov     ecx, [ebp+var_DC]
.text:00002379                 mov     [ebp+var_80], ecx
.text:0000237C                 cmp     [ebp+var_80], 0
.text:00002380                 jz      short loc_23A2
.text:00002382                 mov     edx, [ebp+var_80]
.text:00002385                 mov     [ebp+var_98], edx
.text:0000238B                 mov     byte ptr [ebp+var_4], 0
.text:0000238F                 lea     ecx, [ebp+var_70] ; this
.text:00002392                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00002397                 mov     eax, [ebp+var_98]
.text:0000239D                 jmp     loc_24BF
.text:000023A2 ; ---------------------------------------------------------------------------
.text:000023A2
.text:000023A2 loc_23A2:                               ; CODE XREF: CArchiveUpdateCallback::ReportOperation(uint,uint,uint)+284j
.text:000023A2                 lea     ecx, [ebp+var_70]
.text:000023A5                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:000023AA                 mov     [ebp+var_E0], eax
.text:000023B0                 mov     eax, [ebp+var_E0]
.text:000023B6                 mov     [ebp+var_78], eax
.text:000023B9                 mov     ecx, [ebp+this]
.text:000023BC                 mov     ecx, [ecx+84h]
.text:000023C2                 call    ??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *(void)
.text:000023C7                 mov     [ebp+var_E4], eax
.text:000023CD                 lea     edx, [ebp+var_19]
.text:000023D0                 push    edx             ; bool *
.text:000023D1                 mov     eax, [ebp+arg_8]
.text:000023D4                 push    eax             ; unsigned int
.text:000023D5                 mov     ecx, [ebp+var_E4]
.text:000023DB                 push    ecx             ; struct IInArchive *
.text:000023DC                 call    ?Archive_IsItem_Dir@@YGJPAUIInArchive@@IAA_N@Z ; Archive_IsItem_Dir(IInArchive *,uint,bool &)
.text:000023E1                 mov     [ebp+var_84], eax
.text:000023E7                 cmp     [ebp+var_84], 0
.text:000023EE                 jz      short loc_2413
.text:000023F0                 mov     edx, [ebp+var_84]
.text:000023F6                 mov     [ebp+var_9C], edx
.text:000023FC                 mov     byte ptr [ebp+var_4], 0
.text:00002400                 lea     ecx, [ebp+var_70] ; this
.text:00002403                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00002408                 mov     eax, [ebp+var_9C]
.text:0000240E                 jmp     loc_24BF
.text:00002413 ; ---------------------------------------------------------------------------
.text:00002413
.text:00002413 loc_2413:                               ; CODE XREF: CArchiveUpdateCallback::ReportOperation(uint,uint,uint)+1F0j
.text:00002413                                         ; CArchiveUpdateCallback::ReportOperation(uint,uint,uint)+246j ...
.text:00002413                 jmp     short loc_2437
.text:00002415 ; ---------------------------------------------------------------------------
.text:00002415
.text:00002415 loc_2415:                               ; CODE XREF: CArchiveUpdateCallback::ReportOperation(uint,uint,uint)+1E6j
.text:00002415                 cmp     [ebp+arg_4], 2
.text:00002419                 jnz     short loc_2437
.text:0000241B                 mov     eax, 23h ; '#'
.text:00002420                 mov     [ebp+var_5C], ax
.text:00002424                 lea     ecx, [ebp+var_5A]
.text:00002427                 push    ecx             ; wchar_t *
.text:00002428                 mov     edx, [ebp+arg_8]
.text:0000242B                 push    edx             ; unsigned int
.text:0000242C                 call    ?ConvertUInt32ToString@@YGXIPA_W@Z ; ConvertUInt32ToString(uint,wchar_t *)
.text:00002431                 lea     eax, [ebp+var_5C]
.text:00002434                 mov     [ebp+var_78], eax
.text:00002437
.text:00002437 loc_2437:                               ; CODE XREF: CArchiveUpdateCallback::ReportOperation(uint,uint,uint):loc_2413j
.text:00002437                                         ; CArchiveUpdateCallback::ReportOperation(uint,uint,uint)+31Dj
.text:00002437                 cmp     [ebp+var_78], 0
.text:0000243B                 jnz     short loc_2444
.text:0000243D                 mov     [ebp+var_78], offset $SG76267
.text:00002444
.text:00002444 loc_2444:                               ; CODE XREF: CArchiveUpdateCallback::ReportOperation(uint,uint,uint)+33Fj
.text:00002444                 mov     esi, esp
.text:00002446                 movzx   ecx, [ebp+var_19]
.text:0000244A                 push    ecx
.text:0000244B                 mov     edx, [ebp+var_78]
.text:0000244E                 push    edx
.text:0000244F                 mov     eax, [ebp+arg_C]
.text:00002452                 push    eax
.text:00002453                 mov     ecx, [ebp+this]
.text:00002456                 mov     ecx, [ecx+78h]
.text:00002459                 mov     edx, [ebp+this]
.text:0000245C                 mov     eax, [edx+78h]
.text:0000245F                 mov     edx, [eax]
.text:00002461                 mov     eax, [edx+2Ch]
.text:00002464                 call    eax
.text:00002466                 cmp     esi, esp
.text:00002468                 call    __RTC_CheckEsp
.text:0000246D                 mov     [ebp+var_E8], eax
.text:00002473                 mov     ecx, [ebp+var_E8]
.text:00002479                 mov     [ebp+var_A0], ecx
.text:0000247F                 mov     byte ptr [ebp+var_4], 0
.text:00002483                 lea     ecx, [ebp+var_70] ; this
.text:00002486                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000248B                 mov     eax, [ebp+var_A0]
.text:00002491                 jmp     short loc_24BF
.text:00002491 ?ReportOperation@CArchiveUpdateCallback@@UAGJIII@Z endp
.text:00002491
.text:00002493
.text:00002493 ; =============== S U B R O U T I N E =======================================
.text:00002493
.text:00002493
.text:00002493 __catch$?ReportOperation@CArchiveUpdateCallback@@UAGJIII@Z$0 proc near
.text:00002493                                         ; DATA XREF: .xdata$x:000037C0o
.text:00002493                 mov     dword ptr [ebp-0A4h], 8007000Eh
.text:0000249D                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:000024A4                 mov     eax, offset $LN25_0
.text:000024A9                 retn
.text:000024A9 __catch$?ReportOperation@CArchiveUpdateCallback@@UAGJIII@Z$0 endp
.text:000024A9
.text:000024AA ; ---------------------------------------------------------------------------
.text:000024AA                 mov     eax, offset __tryend$?ReportOperation@CArchiveUpdateCallback@@UAGJIII@Z$1
.text:000024AF                 retn
.text:000024B0 ; ---------------------------------------------------------------------------
.text:000024B0
.text:000024B0 __tryend$?ReportOperation@CArchiveUpdateCallback@@UAGJIII@Z$1:
.text:000024B0                                         ; DATA XREF: .text:000024AAo
.text:000024B0                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:000024B7                 jmp     short loc_24BF
.text:000024B9 ; ---------------------------------------------------------------------------
.text:000024B9
.text:000024B9 $LN25_0:                                ; DATA XREF: __catch$?ReportOperation@CArchiveUpdateCallback@@UAGJIII@Z$0+11o
.text:000024B9                 mov     eax, [ebp-0A4h]
.text:000024BF ; START OF FUNCTION CHUNK FOR ?ReportOperation@CArchiveUpdateCallback@@UAGJIII@Z
.text:000024BF
.text:000024BF loc_24BF:                               ; CODE XREF: CArchiveUpdateCallback::ReportOperation(uint,uint,uint)+1C4j
.text:000024BF                                         ; CArchiveUpdateCallback::ReportOperation(uint,uint,uint)+2A1j ...
.text:000024BF                 push    edx
.text:000024C0                 mov     ecx, ebp
.text:000024C2                 push    eax
.text:000024C3                 lea     edx, $LN33
.text:000024C9                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000024CE                 pop     eax
.text:000024CF                 pop     edx
.text:000024D0                 mov     ecx, [ebp+var_C]
.text:000024D3                 mov     large fs:0, ecx
.text:000024DA                 pop     ecx
.text:000024DB                 pop     edi
.text:000024DC                 pop     esi
.text:000024DD                 pop     ebx
.text:000024DE                 mov     ecx, [ebp+var_14]
.text:000024E1                 xor     ecx, ebp
.text:000024E3                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000024E8                 add     esp, 0E8h
.text:000024EE                 cmp     ebp, esp
.text:000024F0                 call    __RTC_CheckEsp
.text:000024F5                 mov     esp, ebp
.text:000024F7                 pop     ebp
.text:000024F8                 retn    10h
.text:000024F8 ; END OF FUNCTION CHUNK FOR ?ReportOperation@CArchiveUpdateCallback@@UAGJIII@Z
.text:000024F8 ; ---------------------------------------------------------------------------
.text:000024FB                 align 4
.text:000024FC $LN33           dd 4                    ; DATA XREF: CArchiveUpdateCallback::ReportOperation(uint,uint,uint)+3C7o
.text:00002500                 dd offset $LN32
.text:00002504 $LN32           dd 0FFFFFFE7h, 1        ; DATA XREF: .text:00002500o
.text:0000250C                 dd offset $LN27         ; "isDir"
.text:00002510                 dd 0FFFFFFD0h, 0Ch
.text:00002518                 dd offset $LN28_0       ; "name"
.text:0000251C                 dd 0FFFFFFA4h, 20h
.text:00002524                 dd offset $LN29_0       ; "temp"
.text:00002528                 db 90h
.text:00002529                 db 3 dup(0FFh)
.text:0000252C                 dd 0Ch
.text:00002530                 dd offset $LN30
.text:00002534 $LN30           db 73h, 32h, 0          ; DATA XREF: .text:00002530o
.text:00002537 $LN29_0         db 'temp',0             ; DATA XREF: .text:00002524o
.text:0000253C $LN28_0         db 'name',0             ; DATA XREF: .text:00002518o
.text:00002541 $LN27           db 'isDir',0            ; DATA XREF: .text:0000250Co
.text:00002547                 db 5 dup(0CCh)
.text:0000254C
.text:0000254C ; =============== S U B R O U T I N E =======================================
.text:0000254C
.text:0000254C ; Attributes: bp-based frame
.text:0000254C
.text:0000254C ; __int32 __cdecl CArchiveUpdateCallback::ReportExtractResult(CArchiveUpdateCallback *this, unsigned int, unsigned int, int)
.text:0000254C                 public ?ReportExtractResult@CArchiveUpdateCallback@@UAGJIIH@Z
.text:0000254C ?ReportExtractResult@CArchiveUpdateCallback@@UAGJIIH@Z proc near
.text:0000254C                                         ; DATA XREF: .rdata:00003378o
.text:0000254C
.text:0000254C var_A0          = dword ptr -0A0h
.text:0000254C var_9C          = dword ptr -9Ch
.text:0000254C var_98          = dword ptr -98h
.text:0000254C var_94          = dword ptr -94h
.text:0000254C var_90          = dword ptr -90h
.text:0000254C var_8C          = dword ptr -8Ch
.text:0000254C var_88          = dword ptr -88h
.text:0000254C var_84          = dword ptr -84h
.text:0000254C var_80          = dword ptr -80h
.text:0000254C var_78          = dword ptr -78h
.text:0000254C var_74          = dword ptr -74h
.text:0000254C var_70          = dword ptr -70h
.text:0000254C var_6C          = dword ptr -6Ch
.text:0000254C var_68          = dword ptr -68h
.text:0000254C var_64          = dword ptr -64h
.text:0000254C var_60          = dword ptr -60h
.text:0000254C var_58          = byte ptr -58h
.text:0000254C var_44          = word ptr -44h
.text:0000254C var_42          = word ptr -42h
.text:0000254C var_19          = byte ptr -19h
.text:0000254C var_14          = dword ptr -14h
.text:0000254C var_10          = dword ptr -10h
.text:0000254C var_C           = dword ptr -0Ch
.text:0000254C var_4           = dword ptr -4
.text:0000254C this            = dword ptr  8
.text:0000254C arg_4           = dword ptr  0Ch
.text:0000254C arg_8           = dword ptr  10h
.text:0000254C arg_C           = dword ptr  14h
.text:0000254C
.text:0000254C ; FUNCTION CHUNK AT .text:000027A0 SIZE 0000003C BYTES
.text:0000254C
.text:0000254C                 push    ebp
.text:0000254D                 mov     ebp, esp
.text:0000254F                 push    0FFFFFFFFh
.text:00002551                 push    offset __ehhandler$?ReportExtractResult@CArchiveUpdateCallback@@UAGJIIH@Z
.text:00002556                 mov     eax, large fs:0
.text:0000255C                 push    eax
.text:0000255D                 push    ecx
.text:0000255E                 sub     esp, 90h
.text:00002564                 push    ebx
.text:00002565                 push    esi
.text:00002566                 push    edi
.text:00002567                 lea     edi, [ebp+var_A0]
.text:0000256D                 mov     ecx, 24h ; '$'
.text:00002572                 mov     eax, 0CCCCCCCCh
.text:00002577                 rep stosd
.text:00002579                 mov     eax, dword ptr ds:___security_cookie
.text:0000257E                 xor     eax, ebp
.text:00002580                 mov     [ebp+var_14], eax
.text:00002583                 push    eax
.text:00002584                 lea     eax, [ebp+var_C]
.text:00002587                 mov     large fs:0, eax
.text:0000258D                 mov     [ebp+var_10], esp
.text:00002590                 mov     [ebp+var_4], 0
.text:00002597                 mov     [ebp+var_19], 0
.text:0000259B                 lea     ecx, [ebp+var_58]
.text:0000259E                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:000025A3                 mov     [ebp+var_80], eax
.text:000025A6                 mov     byte ptr [ebp+var_4], 1
.text:000025AA                 mov     [ebp+var_60], 0
.text:000025B1                 cmp     [ebp+arg_4], 3
.text:000025B5                 jnz     short loc_25D2
.text:000025B7                 mov     [ebp+var_6C], 80004005h
.text:000025BE                 mov     byte ptr [ebp+var_4], 0
.text:000025C2                 lea     ecx, [ebp+var_58] ; this
.text:000025C5                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000025CA                 mov     eax, [ebp+var_6C]
.text:000025CD                 jmp     loc_27A0
.text:000025D2 ; ---------------------------------------------------------------------------
.text:000025D2
.text:000025D2 loc_25D2:                               ; CODE XREF: CArchiveUpdateCallback::ReportExtractResult(uint,uint,int)+69j
.text:000025D2                 cmp     [ebp+arg_4], 1
.text:000025D6                 jnz     loc_26FD
.text:000025DC                 cmp     [ebp+arg_8], 0FFFFFFFFh
.text:000025E0                 jz      loc_26FB
.text:000025E6                 mov     eax, [ebp+this]
.text:000025E9                 cmp     dword ptr [eax+88h], 0
.text:000025F0                 jz      short loc_2629
.text:000025F2                 mov     ecx, [ebp+arg_8]
.text:000025F5                 push    ecx
.text:000025F6                 mov     edx, [ebp+this]
.text:000025F9                 mov     ecx, [edx+88h]
.text:000025FF                 call    ??A?$CObjectVector@UCArcItem@@@@QBEABUCArcItem@@I@Z ; CObjectVector<CArcItem>::operator[](uint)
.text:00002604                 mov     [ebp+var_84], eax
.text:0000260A                 mov     ecx, [ebp+var_84]
.text:00002610                 add     ecx, 10h
.text:00002613                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00002618                 mov     [ebp+var_88], eax
.text:0000261E                 mov     eax, [ebp+var_88]
.text:00002624                 mov     [ebp+var_60], eax
.text:00002627                 jmp     short loc_2691
.text:00002629 ; ---------------------------------------------------------------------------
.text:00002629
.text:00002629 loc_2629:                               ; CODE XREF: CArchiveUpdateCallback::ReportExtractResult(uint,uint,int)+A4j
.text:00002629                 mov     ecx, [ebp+this]
.text:0000262C                 cmp     dword ptr [ecx+80h], 0
.text:00002633                 jz      short loc_2691
.text:00002635                 lea     edx, [ebp+var_58]
.text:00002638                 push    edx             ; struct UString *
.text:00002639                 mov     eax, [ebp+arg_8]
.text:0000263C                 push    eax             ; unsigned int
.text:0000263D                 mov     ecx, [ebp+this]
.text:00002640                 mov     ecx, [ecx+80h]  ; this
.text:00002646                 call    ?GetItemPath@CArc@@QBEJIAAVUString@@@Z ; CArc::GetItemPath(uint,UString &)
.text:0000264B                 mov     [ebp+var_8C], eax
.text:00002651                 mov     edx, [ebp+var_8C]
.text:00002657                 mov     [ebp+var_64], edx
.text:0000265A                 cmp     [ebp+var_64], 0
.text:0000265E                 jz      short loc_267A
.text:00002660                 mov     eax, [ebp+var_64]
.text:00002663                 mov     [ebp+var_70], eax
.text:00002666                 mov     byte ptr [ebp+var_4], 0
.text:0000266A                 lea     ecx, [ebp+var_58] ; this
.text:0000266D                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00002672                 mov     eax, [ebp+var_70]
.text:00002675                 jmp     loc_27A0
.text:0000267A ; ---------------------------------------------------------------------------
.text:0000267A
.text:0000267A loc_267A:                               ; CODE XREF: CArchiveUpdateCallback::ReportExtractResult(uint,uint,int)+112j
.text:0000267A                 lea     ecx, [ebp+var_58]
.text:0000267D                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00002682                 mov     [ebp+var_90], eax
.text:00002688                 mov     ecx, [ebp+var_90]
.text:0000268E                 mov     [ebp+var_60], ecx
.text:00002691
.text:00002691 loc_2691:                               ; CODE XREF: CArchiveUpdateCallback::ReportExtractResult(uint,uint,int)+DBj
.text:00002691                                         ; CArchiveUpdateCallback::ReportExtractResult(uint,uint,int)+E7j
.text:00002691                 mov     ecx, [ebp+this]
.text:00002694                 add     ecx, 84h ; 'ä'
.text:0000269A                 call    ??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *(void)
.text:0000269F                 mov     [ebp+var_94], eax
.text:000026A5                 cmp     [ebp+var_94], 0
.text:000026AC                 jz      short loc_26FB
.text:000026AE                 mov     ecx, [ebp+this]
.text:000026B1                 add     ecx, 84h ; 'ä'
.text:000026B7                 call    ??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *(void)
.text:000026BC                 mov     [ebp+var_98], eax
.text:000026C2                 lea     edx, [ebp+var_19]
.text:000026C5                 push    edx             ; bool *
.text:000026C6                 push    0Fh             ; unsigned __int32
.text:000026C8                 mov     eax, [ebp+arg_8]
.text:000026CB                 push    eax             ; unsigned int
.text:000026CC                 mov     ecx, [ebp+var_98]
.text:000026D2                 push    ecx             ; struct IInArchive *
.text:000026D3                 call    ?Archive_GetItemBoolProp@@YGJPAUIInArchive@@IKAA_N@Z ; Archive_GetItemBoolProp(IInArchive *,uint,ulong,bool &)
.text:000026D8                 mov     [ebp+var_68], eax
.text:000026DB                 cmp     [ebp+var_68], 0
.text:000026DF                 jz      short loc_26FB
.text:000026E1                 mov     edx, [ebp+var_68]
.text:000026E4                 mov     [ebp+var_74], edx
.text:000026E7                 mov     byte ptr [ebp+var_4], 0
.text:000026EB                 lea     ecx, [ebp+var_58] ; this
.text:000026EE                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000026F3                 mov     eax, [ebp+var_74]
.text:000026F6                 jmp     loc_27A0
.text:000026FB ; ---------------------------------------------------------------------------
.text:000026FB
.text:000026FB loc_26FB:                               ; CODE XREF: CArchiveUpdateCallback::ReportExtractResult(uint,uint,int)+94j
.text:000026FB                                         ; CArchiveUpdateCallback::ReportExtractResult(uint,uint,int)+160j ...
.text:000026FB                 jmp     short loc_271F
.text:000026FD ; ---------------------------------------------------------------------------
.text:000026FD
.text:000026FD loc_26FD:                               ; CODE XREF: CArchiveUpdateCallback::ReportExtractResult(uint,uint,int)+8Aj
.text:000026FD                 cmp     [ebp+arg_4], 2
.text:00002701                 jnz     short loc_271F
.text:00002703                 mov     eax, 23h ; '#'
.text:00002708                 mov     [ebp+var_44], ax
.text:0000270C                 lea     ecx, [ebp+var_42]
.text:0000270F                 push    ecx             ; wchar_t *
.text:00002710                 mov     edx, [ebp+arg_8]
.text:00002713                 push    edx             ; unsigned int
.text:00002714                 call    ?ConvertUInt32ToString@@YGXIPA_W@Z ; ConvertUInt32ToString(uint,wchar_t *)
.text:00002719                 lea     eax, [ebp+var_44]
.text:0000271C                 mov     [ebp+var_60], eax
.text:0000271F
.text:0000271F loc_271F:                               ; CODE XREF: CArchiveUpdateCallback::ReportExtractResult(uint,uint,int):loc_26FBj
.text:0000271F                                         ; CArchiveUpdateCallback::ReportExtractResult(uint,uint,int)+1B5j
.text:0000271F                 movzx   ecx, [ebp+var_19]
.text:00002723                 push    ecx             ; bool
.text:00002724                 call    ?BoolToInt@@YGH_N@Z ; BoolToInt(bool)
.text:00002729                 mov     [ebp+var_9C], eax
.text:0000272F                 mov     esi, esp
.text:00002731                 mov     edx, [ebp+var_60]
.text:00002734                 push    edx
.text:00002735                 mov     eax, [ebp+var_9C]
.text:0000273B                 push    eax
.text:0000273C                 mov     ecx, [ebp+arg_C]
.text:0000273F                 push    ecx
.text:00002740                 mov     edx, [ebp+this]
.text:00002743                 mov     ecx, [edx+74h]
.text:00002746                 mov     eax, [ebp+this]
.text:00002749                 mov     edx, [eax+74h]
.text:0000274C                 mov     eax, [edx]
.text:0000274E                 mov     edx, [eax+28h]
.text:00002751                 call    edx
.text:00002753                 cmp     esi, esp
.text:00002755                 call    __RTC_CheckEsp
.text:0000275A                 mov     [ebp+var_A0], eax
.text:00002760                 mov     eax, [ebp+var_A0]
.text:00002766                 mov     [ebp+var_78], eax
.text:00002769                 mov     byte ptr [ebp+var_4], 0
.text:0000276D                 lea     ecx, [ebp+var_58] ; this
.text:00002770                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00002775                 mov     eax, [ebp+var_78]
.text:00002778                 jmp     short loc_27A0
.text:00002778 ?ReportExtractResult@CArchiveUpdateCallback@@UAGJIIH@Z endp
.text:00002778
.text:0000277A
.text:0000277A ; =============== S U B R O U T I N E =======================================
.text:0000277A
.text:0000277A
.text:0000277A __catch$?ReportExtractResult@CArchiveUpdateCallback@@UAGJIIH@Z$0 proc near
.text:0000277A                                         ; DATA XREF: .xdata$x:00003830o
.text:0000277A                 mov     dword ptr [ebp-7Ch], 8007000Eh
.text:00002781                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00002788                 mov     eax, offset $LN19
.text:0000278D                 retn
.text:0000278D __catch$?ReportExtractResult@CArchiveUpdateCallback@@UAGJIIH@Z$0 endp
.text:0000278D
.text:0000278E ; ---------------------------------------------------------------------------
.text:0000278E                 mov     eax, offset __tryend$?ReportExtractResult@CArchiveUpdateCallback@@UAGJIIH@Z$1
.text:00002793                 retn
.text:00002794 ; ---------------------------------------------------------------------------
.text:00002794
.text:00002794 __tryend$?ReportExtractResult@CArchiveUpdateCallback@@UAGJIIH@Z$1:
.text:00002794                                         ; DATA XREF: .text:0000278Eo
.text:00002794                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:0000279B                 jmp     short loc_27A0
.text:0000279D ; ---------------------------------------------------------------------------
.text:0000279D
.text:0000279D $LN19:                                  ; DATA XREF: __catch$?ReportExtractResult@CArchiveUpdateCallback@@UAGJIIH@Z$0+Eo
.text:0000279D                 mov     eax, [ebp-7Ch]
.text:000027A0 ; START OF FUNCTION CHUNK FOR ?ReportExtractResult@CArchiveUpdateCallback@@UAGJIIH@Z
.text:000027A0
.text:000027A0 loc_27A0:                               ; CODE XREF: CArchiveUpdateCallback::ReportExtractResult(uint,uint,int)+81j
.text:000027A0                                         ; CArchiveUpdateCallback::ReportExtractResult(uint,uint,int)+129j ...
.text:000027A0                 push    edx
.text:000027A1                 mov     ecx, ebp
.text:000027A3                 push    eax
.text:000027A4                 lea     edx, $LN26_0
.text:000027AA                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000027AF                 pop     eax
.text:000027B0                 pop     edx
.text:000027B1                 mov     ecx, [ebp+var_C]
.text:000027B4                 mov     large fs:0, ecx
.text:000027BB                 pop     ecx
.text:000027BC                 pop     edi
.text:000027BD                 pop     esi
.text:000027BE                 pop     ebx
.text:000027BF                 mov     ecx, [ebp+var_14]
.text:000027C2                 xor     ecx, ebp
.text:000027C4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000027C9                 add     esp, 0A0h
.text:000027CF                 cmp     ebp, esp
.text:000027D1                 call    __RTC_CheckEsp
.text:000027D6                 mov     esp, ebp
.text:000027D8                 pop     ebp
.text:000027D9                 retn    10h
.text:000027D9 ; END OF FUNCTION CHUNK FOR ?ReportExtractResult@CArchiveUpdateCallback@@UAGJIIH@Z
.text:000027D9 ; ---------------------------------------------------------------------------
.text:000027DC $LN26_0         dd 3                    ; DATA XREF: CArchiveUpdateCallback::ReportExtractResult(uint,uint,int)+258o
.text:000027E0                 dd offset $LN25_1
.text:000027E4 $LN25_1         dd 0FFFFFFE7h, 1        ; DATA XREF: .text:000027E0o
.text:000027EC                 dd offset $LN21         ; "isEncrypted"
.text:000027F0                 dd 0FFFFFFBCh, 20h
.text:000027F8                 dd offset $LN22         ; "temp"
.text:000027FC                 dd 0FFFFFFA8h, 0Ch
.text:00002804                 dd offset $LN23
.text:00002808 $LN23           db 73h, 32h, 0          ; DATA XREF: .text:00002804o
.text:0000280B $LN22           db 'temp',0             ; DATA XREF: .text:000027F8o
.text:00002810 $LN21           db 'isEncrypted',0      ; DATA XREF: .text:000027ECo
.text:0000281C
.text:0000281C ; =============== S U B R O U T I N E =======================================
.text:0000281C
.text:0000281C ; Attributes: bp-based frame
.text:0000281C
.text:0000281C ; __int32 __stdcall CArchiveUpdateCallback::GetVolumeSize(CArchiveUpdateCallback *this, unsigned int, unsigned __int64 *)
.text:0000281C                 public ?GetVolumeSize@CArchiveUpdateCallback@@UAGJIPA_K@Z
.text:0000281C ?GetVolumeSize@CArchiveUpdateCallback@@UAGJIPA_K@Z proc near
.text:0000281C                                         ; DATA XREF: .rdata:000033BCo
.text:0000281C
.text:0000281C this            = dword ptr  8
.text:0000281C arg_4           = dword ptr  0Ch
.text:0000281C arg_8           = dword ptr  10h
.text:0000281C
.text:0000281C                 push    ebp
.text:0000281D                 mov     ebp, esp
.text:0000281F                 mov     ecx, [ebp+this]
.text:00002822                 add     ecx, 58h ; 'X'
.text:00002825                 call    ?Size@?$CRecordVector@_K@@QBEIXZ ; CRecordVector<unsigned __int64>::Size(void)
.text:0000282A                 test    eax, eax
.text:0000282C                 jnz     short loc_2835
.text:0000282E                 mov     eax, 1
.text:00002833                 jmp     short loc_2874
.text:00002835 ; ---------------------------------------------------------------------------
.text:00002835
.text:00002835 loc_2835:                               ; CODE XREF: CArchiveUpdateCallback::GetVolumeSize(uint,unsigned __int64 *)+10j
.text:00002835                 mov     ecx, [ebp+this]
.text:00002838                 add     ecx, 58h ; 'X'
.text:0000283B                 call    ?Size@?$CRecordVector@_K@@QBEIXZ ; CRecordVector<unsigned __int64>::Size(void)
.text:00002840                 cmp     [ebp+arg_4], eax
.text:00002843                 jb      short loc_2856
.text:00002845                 mov     ecx, [ebp+this]
.text:00002848                 add     ecx, 58h ; 'X'
.text:0000284B                 call    ?Size@?$CRecordVector@_K@@QBEIXZ ; CRecordVector<unsigned __int64>::Size(void)
.text:00002850                 sub     eax, 1
.text:00002853                 mov     [ebp+arg_4], eax
.text:00002856
.text:00002856 loc_2856:                               ; CODE XREF: CArchiveUpdateCallback::GetVolumeSize(uint,unsigned __int64 *)+27j
.text:00002856                 mov     eax, [ebp+arg_4]
.text:00002859                 push    eax
.text:0000285A                 mov     ecx, [ebp+this]
.text:0000285D                 add     ecx, 58h ; 'X'
.text:00002860                 call    ??A?$CRecordVector@_K@@QAEAA_KI@Z ; CRecordVector<unsigned __int64>::operator[](uint)
.text:00002865                 mov     ecx, [ebp+arg_8]
.text:00002868                 mov     edx, [eax]
.text:0000286A                 mov     [ecx], edx
.text:0000286C                 mov     eax, [eax+4]
.text:0000286F                 mov     [ecx+4], eax
.text:00002872                 xor     eax, eax
.text:00002874
.text:00002874 loc_2874:                               ; CODE XREF: CArchiveUpdateCallback::GetVolumeSize(uint,unsigned __int64 *)+17j
.text:00002874                 cmp     ebp, esp
.text:00002876                 call    __RTC_CheckEsp
.text:0000287B                 pop     ebp
.text:0000287C                 retn    0Ch
.text:0000287C ?GetVolumeSize@CArchiveUpdateCallback@@UAGJIPA_K@Z endp
.text:0000287C
.text:0000287C ; ---------------------------------------------------------------------------
.text:0000287F                 db 0Dh dup(0CCh)
.text:0000288C
.text:0000288C ; =============== S U B R O U T I N E =======================================
.text:0000288C
.text:0000288C ; Attributes: bp-based frame
.text:0000288C
.text:0000288C ; __int32 __cdecl CArchiveUpdateCallback::GetVolumeStream(CArchiveUpdateCallback *this, unsigned int, struct ISequentialOutStream **)
.text:0000288C                 public ?GetVolumeStream@CArchiveUpdateCallback@@UAGJIPAPAUISequentialOutStream@@@Z
.text:0000288C ?GetVolumeStream@CArchiveUpdateCallback@@UAGJIPAPAUISequentialOutStream@@@Z proc near
.text:0000288C                                         ; DATA XREF: .rdata:000033C0o
.text:0000288C
.text:0000288C var_AC          = dword ptr -0ACh
.text:0000288C var_A5          = byte ptr -0A5h
.text:0000288C var_A4          = dword ptr -0A4h
.text:0000288C var_A0          = dword ptr -0A0h
.text:0000288C var_9C          = dword ptr -9Ch
.text:0000288C var_98          = dword ptr -98h
.text:0000288C var_94          = dword ptr -94h
.text:0000288C var_90          = dword ptr -90h
.text:0000288C var_8C          = dword ptr -8Ch
.text:0000288C var_84          = dword ptr -84h
.text:0000288C var_80          = dword ptr -80h
.text:0000288C var_7C          = dword ptr -7Ch
.text:0000288C var_78          = dword ptr -78h
.text:0000288C var_70          = byte ptr -70h
.text:0000288C var_68          = dword ptr -68h
.text:0000288C var_60          = byte ptr -60h
.text:0000288C var_4C          = byte ptr -4Ch
.text:0000288C var_38          = word ptr -38h
.text:0000288C var_14          = dword ptr -14h
.text:0000288C var_10          = dword ptr -10h
.text:0000288C var_C           = dword ptr -0Ch
.text:0000288C var_4           = dword ptr -4
.text:0000288C this            = dword ptr  8
.text:0000288C arg_4           = dword ptr  0Ch
.text:0000288C arg_8           = dword ptr  10h
.text:0000288C
.text:0000288C ; FUNCTION CHUNK AT .text:00002AB0 SIZE 0000003C BYTES
.text:0000288C
.text:0000288C                 push    ebp
.text:0000288D                 mov     ebp, esp
.text:0000288F                 push    0FFFFFFFFh
.text:00002891                 push    offset __ehhandler$?GetVolumeStream@CArchiveUpdateCallback@@UAGJIPAPAUISequentialOutStream@@@Z
.text:00002896                 mov     eax, large fs:0
.text:0000289C                 push    eax
.text:0000289D                 push    ecx
.text:0000289E                 sub     esp, 9Ch
.text:000028A4                 push    ebx
.text:000028A5                 push    esi
.text:000028A6                 push    edi
.text:000028A7                 lea     edi, [ebp+var_AC]
.text:000028AD                 mov     ecx, 27h ; '''
.text:000028B2                 mov     eax, 0CCCCCCCCh
.text:000028B7                 rep stosd
.text:000028B9                 mov     eax, dword ptr ds:___security_cookie
.text:000028BE                 xor     eax, ebp
.text:000028C0                 mov     [ebp+var_14], eax
.text:000028C3                 push    eax
.text:000028C4                 lea     eax, [ebp+var_C]
.text:000028C7                 mov     large fs:0, eax
.text:000028CD                 mov     [ebp+var_10], esp
.text:000028D0                 mov     [ebp+var_4], 0
.text:000028D7                 lea     eax, [ebp+var_38]
.text:000028DA                 push    eax             ; wchar_t *
.text:000028DB                 mov     ecx, [ebp+arg_4]
.text:000028DE                 add     ecx, 1
.text:000028E1                 push    ecx             ; unsigned int
.text:000028E2                 call    ?ConvertUInt32ToString@@YGXIPA_W@Z ; ConvertUInt32ToString(uint,wchar_t *)
.text:000028E7                 lea     edx, [ebp+var_38]
.text:000028EA                 push    edx
.text:000028EB                 lea     ecx, [ebp+var_4C]
.text:000028EE                 call    ??0UString@@QAE@PB_W@Z ; UString::UString(wchar_t const *)
.text:000028F3                 mov     [ebp+var_8C], eax
.text:000028F9                 mov     byte ptr [ebp+var_4], 1
.text:000028FD
.text:000028FD loc_28FD:                               ; CODE XREF: CArchiveUpdateCallback::GetVolumeStream(uint,ISequentialOutStream * *)+92j
.text:000028FD                 lea     ecx, [ebp+var_4C] ; this
.text:00002900                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:00002905                 mov     [ebp+var_90], eax
.text:0000290B                 cmp     [ebp+var_90], 2
.text:00002912                 jnb     short loc_2920
.text:00002914                 push    30h ; '0'       ; wchar_t
.text:00002916                 lea     ecx, [ebp+var_4C] ; this
.text:00002919                 call    ?InsertAtFront@UString@@QAEX_W@Z ; UString::InsertAtFront(wchar_t)
.text:0000291E                 jmp     short loc_28FD
.text:00002920 ; ---------------------------------------------------------------------------
.text:00002920
.text:00002920 loc_2920:                               ; CODE XREF: CArchiveUpdateCallback::GetVolumeStream(uint,ISequentialOutStream * *)+86j
.text:00002920                 mov     eax, [ebp+this]
.text:00002923                 add     eax, 64h ; 'd'
.text:00002926                 push    eax
.text:00002927                 lea     ecx, [ebp+var_60]
.text:0000292A                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:0000292F                 mov     [ebp+var_94], eax
.text:00002935                 mov     byte ptr [ebp+var_4], 2
.text:00002939                 push    2Eh ; '.'
.text:0000293B                 lea     ecx, [ebp+var_60]
.text:0000293E                 call    ??YUString@@QAEAAV0@_W@Z ; UString::operator+=(wchar_t)
.text:00002943                 lea     ecx, [ebp+var_4C]
.text:00002946                 push    ecx
.text:00002947                 lea     ecx, [ebp+var_60]
.text:0000294A                 call    ??YUString@@QAEAAV0@ABV0@@Z ; UString::operator+=(UString const &)
.text:0000294F                 mov     edx, [ebp+this]
.text:00002952                 add     edx, 70h ; 'p'
.text:00002955                 push    edx
.text:00002956                 lea     ecx, [ebp+var_60]
.text:00002959                 call    ??YUString@@QAEAAV0@ABV0@@Z ; UString::operator+=(UString const &)
.text:0000295E                 push    20h ; ' '       ; unsigned int
.text:00002960                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00002965                 add     esp, 4
.text:00002968                 mov     [ebp+var_98], eax
.text:0000296E                 mov     eax, [ebp+var_98]
.text:00002974                 mov     [ebp+var_7C], eax
.text:00002977                 mov     byte ptr [ebp+var_4], 3
.text:0000297B                 cmp     [ebp+var_7C], 0
.text:0000297F                 jz      short loc_299D
.text:00002981                 mov     ecx, [ebp+var_7C]
.text:00002984                 call    ??0COutFileStream@@QAE@XZ ; COutFileStream::COutFileStream(void)
.text:00002989                 mov     [ebp+var_9C], eax
.text:0000298F                 mov     ecx, [ebp+var_9C]
.text:00002995                 mov     [ebp+var_A0], ecx
.text:0000299B                 jmp     short loc_29A7
.text:0000299D ; ---------------------------------------------------------------------------
.text:0000299D
.text:0000299D loc_299D:                               ; CODE XREF: CArchiveUpdateCallback::GetVolumeStream(uint,ISequentialOutStream * *)+F3j
.text:0000299D                 mov     [ebp+var_A0], 0
.text:000029A7
.text:000029A7 loc_29A7:                               ; CODE XREF: CArchiveUpdateCallback::GetVolumeStream(uint,ISequentialOutStream * *)+10Fj
.text:000029A7                 mov     edx, [ebp+var_A0]
.text:000029AD                 mov     [ebp+var_78], edx
.text:000029B0                 mov     byte ptr [ebp+var_4], 2
.text:000029B4                 mov     eax, [ebp+var_78]
.text:000029B7                 mov     [ebp+var_68], eax
.text:000029BA                 mov     ecx, [ebp+var_68]
.text:000029BD                 push    ecx
.text:000029BE                 lea     ecx, [ebp+var_70]
.text:000029C1                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(ISequentialOutStream *)
.text:000029C6                 mov     byte ptr [ebp+var_4], 4
.text:000029CA                 lea     ecx, [ebp+var_60]
.text:000029CD                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:000029D2                 mov     [ebp+var_A4], eax
.text:000029D8                 push    0               ; bool
.text:000029DA                 mov     edx, [ebp+var_A4]
.text:000029E0                 push    edx             ; wchar_t *
.text:000029E1                 mov     ecx, [ebp+var_68] ; this
.text:000029E4                 call    ?Create@COutFileStream@@QAE_NPB_W_N@Z ; COutFileStream::Create(wchar_t const *,bool)
.text:000029E9                 mov     [ebp+var_A5], al
.text:000029EF                 movzx   eax, [ebp+var_A5]
.text:000029F6                 test    eax, eax
.text:000029F8                 jnz     short loc_2A35
.text:000029FA                 mov     esi, esp
.text:000029FC                 call    dword ptr ds:__imp__GetLastError@0 ; GetLastError()
.text:00002A02                 cmp     esi, esp
.text:00002A04                 call    __RTC_CheckEsp
.text:00002A09                 mov     [ebp+var_80], eax
.text:00002A0C                 mov     byte ptr [ebp+var_4], 2
.text:00002A10                 lea     ecx, [ebp+var_70]
.text:00002A13                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00002A18                 mov     byte ptr [ebp+var_4], 1
.text:00002A1C                 lea     ecx, [ebp+var_60] ; this
.text:00002A1F                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00002A24                 mov     byte ptr [ebp+var_4], 0
.text:00002A28                 lea     ecx, [ebp+var_4C] ; this
.text:00002A2B                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00002A30                 mov     eax, [ebp+var_80]
.text:00002A33                 jmp     short loc_2AB0
.text:00002A35 ; ---------------------------------------------------------------------------
.text:00002A35
.text:00002A35 loc_2A35:                               ; CODE XREF: CArchiveUpdateCallback::GetVolumeStream(uint,ISequentialOutStream * *)+16Cj
.text:00002A35                 lea     ecx, [ebp+var_70]
.text:00002A38                 call    ?Detach@?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::Detach(void)
.text:00002A3D                 mov     [ebp+var_AC], eax
.text:00002A43                 mov     ecx, [ebp+arg_8]
.text:00002A46                 mov     edx, [ebp+var_AC]
.text:00002A4C                 mov     [ecx], edx
.text:00002A4E                 mov     [ebp+var_84], 0
.text:00002A58                 mov     byte ptr [ebp+var_4], 2
.text:00002A5C                 lea     ecx, [ebp+var_70]
.text:00002A5F                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00002A64                 mov     byte ptr [ebp+var_4], 1
.text:00002A68                 lea     ecx, [ebp+var_60] ; this
.text:00002A6B                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00002A70                 mov     byte ptr [ebp+var_4], 0
.text:00002A74                 lea     ecx, [ebp+var_4C] ; this
.text:00002A77                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00002A7C                 mov     eax, [ebp+var_84]
.text:00002A82                 jmp     short loc_2AB0
.text:00002A82 ?GetVolumeStream@CArchiveUpdateCallback@@UAGJIPAPAUISequentialOutStream@@@Z endp
.text:00002A82
.text:00002A84
.text:00002A84 ; =============== S U B R O U T I N E =======================================
.text:00002A84
.text:00002A84
.text:00002A84 __catch$?GetVolumeStream@CArchiveUpdateCallback@@UAGJIPAPAUISequentialOutStream@@@Z$0 proc near
.text:00002A84                                         ; DATA XREF: .xdata$x:00003890o
.text:00002A84                 mov     dword ptr [ebp-88h], 8007000Eh
.text:00002A8E                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00002A95                 mov     eax, offset $LN16_0
.text:00002A9A                 retn
.text:00002A9A __catch$?GetVolumeStream@CArchiveUpdateCallback@@UAGJIPAPAUISequentialOutStream@@@Z$0 endp
.text:00002A9A
.text:00002A9B ; ---------------------------------------------------------------------------
.text:00002A9B                 mov     eax, offset __tryend$?GetVolumeStream@CArchiveUpdateCallback@@UAGJIPAPAUISequentialOutStream@@@Z$1
.text:00002AA0                 retn
.text:00002AA1 ; ---------------------------------------------------------------------------
.text:00002AA1
.text:00002AA1 __tryend$?GetVolumeStream@CArchiveUpdateCallback@@UAGJIPAPAUISequentialOutStream@@@Z$1:
.text:00002AA1                                         ; DATA XREF: .text:00002A9Bo
.text:00002AA1                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00002AA8                 jmp     short loc_2AB0
.text:00002AAA ; ---------------------------------------------------------------------------
.text:00002AAA
.text:00002AAA $LN16_0:                                ; DATA XREF: __catch$?GetVolumeStream@CArchiveUpdateCallback@@UAGJIPAPAUISequentialOutStream@@@Z$0+11o
.text:00002AAA                 mov     eax, [ebp-88h]
.text:00002AB0 ; START OF FUNCTION CHUNK FOR ?GetVolumeStream@CArchiveUpdateCallback@@UAGJIPAPAUISequentialOutStream@@@Z
.text:00002AB0
.text:00002AB0 loc_2AB0:                               ; CODE XREF: CArchiveUpdateCallback::GetVolumeStream(uint,ISequentialOutStream * *)+1A7j
.text:00002AB0                                         ; CArchiveUpdateCallback::GetVolumeStream(uint,ISequentialOutStream * *)+1F6j ...
.text:00002AB0                 push    edx
.text:00002AB1                 mov     ecx, ebp
.text:00002AB3                 push    eax
.text:00002AB4                 lea     edx, $LN24_0
.text:00002ABA                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002ABF                 pop     eax
.text:00002AC0                 pop     edx
.text:00002AC1                 mov     ecx, [ebp+var_C]
.text:00002AC4                 mov     large fs:0, ecx
.text:00002ACB                 pop     ecx
.text:00002ACC                 pop     edi
.text:00002ACD                 pop     esi
.text:00002ACE                 pop     ebx
.text:00002ACF                 mov     ecx, [ebp+var_14]
.text:00002AD2                 xor     ecx, ebp
.text:00002AD4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00002AD9                 add     esp, 0ACh
.text:00002ADF                 cmp     ebp, esp
.text:00002AE1                 call    __RTC_CheckEsp
.text:00002AE6                 mov     esp, ebp
.text:00002AE8                 pop     ebp
.text:00002AE9                 retn    0Ch
.text:00002AE9 ; END OF FUNCTION CHUNK FOR ?GetVolumeStream@CArchiveUpdateCallback@@UAGJIPAPAUISequentialOutStream@@@Z
.text:00002AE9 ; ---------------------------------------------------------------------------
.text:00002AEC $LN24_0         dd 4                    ; DATA XREF: CArchiveUpdateCallback::GetVolumeStream(uint,ISequentialOutStream * *)+228o
.text:00002AF0                 dd offset $LN23_0
.text:00002AF4 $LN23_0         dd 0FFFFFFC8h, 20h      ; DATA XREF: .text:00002AF0o
.text:00002AFC                 dd offset $LN18         ; "temp"
.text:00002B00                 dd 0FFFFFFB4h, 0Ch
.text:00002B08                 dd offset $LN19_0       ; "res"
.text:00002B0C                 dd 0FFFFFFA0h, 0Ch
.text:00002B14                 dd offset $LN20_0       ; "fileName"
.text:00002B18                 db 90h
.text:00002B19                 db 3 dup(0FFh)
.text:00002B1C                 dd 4
.text:00002B20                 dd offset $LN21_0       ; "streamLoc"
.text:00002B24 $LN21_0         db 'streamLoc',0        ; DATA XREF: .text:00002B20o
.text:00002B2E $LN20_0         db 'fileName',0         ; DATA XREF: .text:00002B14o
.text:00002B37 $LN19_0         db 'res',0              ; DATA XREF: .text:00002B08o
.text:00002B3B $LN18           db 'temp',0             ; DATA XREF: .text:00002AFCo
.text:00002B40                 db 0Ch dup(0CCh)
.text:00002B4C
.text:00002B4C ; =============== S U B R O U T I N E =======================================
.text:00002B4C
.text:00002B4C ; Attributes: bp-based frame
.text:00002B4C
.text:00002B4C ; __int32 __cdecl CArchiveUpdateCallback::CryptoGetTextPassword2(CArchiveUpdateCallback *this, int *, wchar_t **)
.text:00002B4C                 public ?CryptoGetTextPassword2@CArchiveUpdateCallback@@UAGJPAHPAPA_W@Z
.text:00002B4C ?CryptoGetTextPassword2@CArchiveUpdateCallback@@UAGJPAHPAPA_W@Z proc near
.text:00002B4C                                         ; DATA XREF: .rdata:00003324o
.text:00002B4C
.text:00002B4C var_18          = dword ptr -18h
.text:00002B4C var_14          = dword ptr -14h
.text:00002B4C var_10          = dword ptr -10h
.text:00002B4C var_C           = dword ptr -0Ch
.text:00002B4C var_4           = dword ptr -4
.text:00002B4C this            = dword ptr  8
.text:00002B4C arg_4           = dword ptr  0Ch
.text:00002B4C arg_8           = dword ptr  10h
.text:00002B4C
.text:00002B4C ; FUNCTION CHUNK AT .text:00002BDF SIZE 0000001E BYTES
.text:00002B4C
.text:00002B4C                 push    ebp
.text:00002B4D                 mov     ebp, esp
.text:00002B4F                 push    0FFFFFFFFh
.text:00002B51                 push    offset __ehhandler$?CryptoGetTextPassword2@CArchiveUpdateCallback@@UAGJPAHPAPA_W@Z
.text:00002B56                 mov     eax, large fs:0
.text:00002B5C                 push    eax
.text:00002B5D                 push    ecx
.text:00002B5E                 sub     esp, 8
.text:00002B61                 push    ebx
.text:00002B62                 push    esi
.text:00002B63                 push    edi
.text:00002B64                 mov     [ebp+var_18], 0CCCCCCCCh
.text:00002B6B                 mov     [ebp+var_14], 0CCCCCCCCh
.text:00002B72                 mov     eax, dword ptr ds:___security_cookie
.text:00002B77                 xor     eax, ebp
.text:00002B79                 push    eax
.text:00002B7A                 lea     eax, [ebp+var_C]
.text:00002B7D                 mov     large fs:0, eax
.text:00002B83                 mov     [ebp+var_10], esp
.text:00002B86                 mov     [ebp+var_4], 0
.text:00002B8D                 mov     esi, esp
.text:00002B8F                 mov     eax, [ebp+arg_8]
.text:00002B92                 push    eax
.text:00002B93                 mov     ecx, [ebp+arg_4]
.text:00002B96                 push    ecx
.text:00002B97                 mov     edx, [ebp+this]
.text:00002B9A                 mov     ecx, [edx+68h]
.text:00002B9D                 mov     eax, [ebp+this]
.text:00002BA0                 mov     edx, [eax+68h]
.text:00002BA3                 mov     eax, [edx]
.text:00002BA5                 mov     edx, [eax+30h]
.text:00002BA8                 call    edx
.text:00002BAA                 cmp     esi, esp
.text:00002BAC                 call    __RTC_CheckEsp
.text:00002BB1                 mov     [ebp+var_18], eax
.text:00002BB4                 mov     eax, [ebp+var_18]
.text:00002BB7                 jmp     short loc_2BDF
.text:00002BB7 ?CryptoGetTextPassword2@CArchiveUpdateCallback@@UAGJPAHPAPA_W@Z endp
.text:00002BB7
.text:00002BB9
.text:00002BB9 ; =============== S U B R O U T I N E =======================================
.text:00002BB9
.text:00002BB9
.text:00002BB9 __catch$?CryptoGetTextPassword2@CArchiveUpdateCallback@@UAGJPAHPAPA_W@Z$0 proc near
.text:00002BB9                                         ; DATA XREF: .xdata$x:00003908o
.text:00002BB9                 mov     dword ptr [ebp-14h], 8007000Eh
.text:00002BC0                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00002BC7                 mov     eax, offset $LN7_5
.text:00002BCC                 retn
.text:00002BCC __catch$?CryptoGetTextPassword2@CArchiveUpdateCallback@@UAGJPAHPAPA_W@Z$0 endp
.text:00002BCC
.text:00002BCD ; ---------------------------------------------------------------------------
.text:00002BCD                 mov     eax, offset __tryend$?CryptoGetTextPassword2@CArchiveUpdateCallback@@UAGJPAHPAPA_W@Z$1
.text:00002BD2                 retn
.text:00002BD3 ; ---------------------------------------------------------------------------
.text:00002BD3
.text:00002BD3 __tryend$?CryptoGetTextPassword2@CArchiveUpdateCallback@@UAGJPAHPAPA_W@Z$1:
.text:00002BD3                                         ; DATA XREF: .text:00002BCDo
.text:00002BD3                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00002BDA                 jmp     short loc_2BDF
.text:00002BDC ; ---------------------------------------------------------------------------
.text:00002BDC
.text:00002BDC $LN7_5:                                 ; DATA XREF: __catch$?CryptoGetTextPassword2@CArchiveUpdateCallback@@UAGJPAHPAPA_W@Z$0+Eo
.text:00002BDC                 mov     eax, [ebp-14h]
.text:00002BDF ; START OF FUNCTION CHUNK FOR ?CryptoGetTextPassword2@CArchiveUpdateCallback@@UAGJPAHPAPA_W@Z
.text:00002BDF
.text:00002BDF loc_2BDF:                               ; CODE XREF: CArchiveUpdateCallback::CryptoGetTextPassword2(int *,wchar_t * *)+6Bj
.text:00002BDF                                         ; .text:00002BDAj
.text:00002BDF                 mov     ecx, [ebp+var_C]
.text:00002BE2                 mov     large fs:0, ecx
.text:00002BE9                 pop     ecx
.text:00002BEA                 pop     edi
.text:00002BEB                 pop     esi
.text:00002BEC                 pop     ebx
.text:00002BED                 add     esp, 18h
.text:00002BF0                 cmp     ebp, esp
.text:00002BF2                 call    __RTC_CheckEsp
.text:00002BF7                 mov     esp, ebp
.text:00002BF9                 pop     ebp
.text:00002BFA                 retn    0Ch
.text:00002BFA ; END OF FUNCTION CHUNK FOR ?CryptoGetTextPassword2@CArchiveUpdateCallback@@UAGJPAHPAPA_W@Z
.text:00002BFA ; ---------------------------------------------------------------------------
.text:00002BFD                 db 0Fh dup(0CCh)
.text:00002C0C
.text:00002C0C ; =============== S U B R O U T I N E =======================================
.text:00002C0C
.text:00002C0C ; Attributes: bp-based frame
.text:00002C0C
.text:00002C0C ; __int32 __cdecl CArchiveUpdateCallback::CryptoGetTextPassword(CArchiveUpdateCallback *this, wchar_t **)
.text:00002C0C                 public ?CryptoGetTextPassword@CArchiveUpdateCallback@@UAGJPAPA_W@Z
.text:00002C0C ?CryptoGetTextPassword@CArchiveUpdateCallback@@UAGJPAPA_W@Z proc near
.text:00002C0C                                         ; DATA XREF: .rdata:00003310o
.text:00002C0C
.text:00002C0C var_18          = dword ptr -18h
.text:00002C0C var_14          = dword ptr -14h
.text:00002C0C var_10          = dword ptr -10h
.text:00002C0C var_C           = dword ptr -0Ch
.text:00002C0C var_4           = dword ptr -4
.text:00002C0C this            = dword ptr  8
.text:00002C0C arg_4           = dword ptr  0Ch
.text:00002C0C
.text:00002C0C ; FUNCTION CHUNK AT .text:00002C9B SIZE 0000001E BYTES
.text:00002C0C
.text:00002C0C                 push    ebp
.text:00002C0D                 mov     ebp, esp
.text:00002C0F                 push    0FFFFFFFFh
.text:00002C11                 push    offset __ehhandler$?CryptoGetTextPassword@CArchiveUpdateCallback@@UAGJPAPA_W@Z
.text:00002C16                 mov     eax, large fs:0
.text:00002C1C                 push    eax
.text:00002C1D                 push    ecx
.text:00002C1E                 sub     esp, 8
.text:00002C21                 push    ebx
.text:00002C22                 push    esi
.text:00002C23                 push    edi
.text:00002C24                 mov     [ebp+var_18], 0CCCCCCCCh
.text:00002C2B                 mov     [ebp+var_14], 0CCCCCCCCh
.text:00002C32                 mov     eax, dword ptr ds:___security_cookie
.text:00002C37                 xor     eax, ebp
.text:00002C39                 push    eax
.text:00002C3A                 lea     eax, [ebp+var_C]
.text:00002C3D                 mov     large fs:0, eax
.text:00002C43                 mov     [ebp+var_10], esp
.text:00002C46                 mov     [ebp+var_4], 0
.text:00002C4D                 mov     esi, esp
.text:00002C4F                 mov     eax, [ebp+arg_4]
.text:00002C52                 push    eax
.text:00002C53                 mov     ecx, [ebp+this]
.text:00002C56                 mov     ecx, [ecx+64h]
.text:00002C59                 mov     edx, [ebp+this]
.text:00002C5C                 mov     eax, [edx+64h]
.text:00002C5F                 mov     edx, [eax]
.text:00002C61                 mov     eax, [edx+34h]
.text:00002C64                 call    eax
.text:00002C66                 cmp     esi, esp
.text:00002C68                 call    __RTC_CheckEsp
.text:00002C6D                 mov     [ebp+var_18], eax
.text:00002C70                 mov     eax, [ebp+var_18]
.text:00002C73                 jmp     short loc_2C9B
.text:00002C73 ?CryptoGetTextPassword@CArchiveUpdateCallback@@UAGJPAPA_W@Z endp
.text:00002C73
.text:00002C75
.text:00002C75 ; =============== S U B R O U T I N E =======================================
.text:00002C75
.text:00002C75
.text:00002C75 __catch$?CryptoGetTextPassword@CArchiveUpdateCallback@@UAGJPAPA_W@Z$0 proc near
.text:00002C75                                         ; DATA XREF: .xdata$x:00003960o
.text:00002C75                 mov     dword ptr [ebp-14h], 8007000Eh
.text:00002C7C                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00002C83                 mov     eax, offset $LN7_6
.text:00002C88                 retn
.text:00002C88 __catch$?CryptoGetTextPassword@CArchiveUpdateCallback@@UAGJPAPA_W@Z$0 endp
.text:00002C88
.text:00002C89 ; ---------------------------------------------------------------------------
.text:00002C89                 mov     eax, offset __tryend$?CryptoGetTextPassword@CArchiveUpdateCallback@@UAGJPAPA_W@Z$1
.text:00002C8E                 retn
.text:00002C8F ; ---------------------------------------------------------------------------
.text:00002C8F
.text:00002C8F __tryend$?CryptoGetTextPassword@CArchiveUpdateCallback@@UAGJPAPA_W@Z$1:
.text:00002C8F                                         ; DATA XREF: .text:00002C89o
.text:00002C8F                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00002C96                 jmp     short loc_2C9B
.text:00002C98 ; ---------------------------------------------------------------------------
.text:00002C98
.text:00002C98 $LN7_6:                                 ; DATA XREF: __catch$?CryptoGetTextPassword@CArchiveUpdateCallback@@UAGJPAPA_W@Z$0+Eo
.text:00002C98                 mov     eax, [ebp-14h]
.text:00002C9B ; START OF FUNCTION CHUNK FOR ?CryptoGetTextPassword@CArchiveUpdateCallback@@UAGJPAPA_W@Z
.text:00002C9B
.text:00002C9B loc_2C9B:                               ; CODE XREF: CArchiveUpdateCallback::CryptoGetTextPassword(wchar_t * *)+67j
.text:00002C9B                                         ; .text:00002C96j
.text:00002C9B                 mov     ecx, [ebp+var_C]
.text:00002C9E                 mov     large fs:0, ecx
.text:00002CA5                 pop     ecx
.text:00002CA6                 pop     edi
.text:00002CA7                 pop     esi
.text:00002CA8                 pop     ebx
.text:00002CA9                 add     esp, 18h
.text:00002CAC                 cmp     ebp, esp
.text:00002CAE                 call    __RTC_CheckEsp
.text:00002CB3                 mov     esp, ebp
.text:00002CB5                 pop     ebp
.text:00002CB6                 retn    8
.text:00002CB6 ; END OF FUNCTION CHUNK FOR ?CryptoGetTextPassword@CArchiveUpdateCallback@@UAGJPAPA_W@Z
.text:00002CB6 ; ---------------------------------------------------------------------------
.text:00002CB9                 align 4
.text:00002CBC
.text:00002CBC ; =============== S U B R O U T I N E =======================================
.text:00002CBC
.text:00002CBC ; Attributes: bp-based frame
.text:00002CBC
.text:00002CBC ; __int32 __thiscall CArchiveUpdateCallback::InFileStream_On_Error(CArchiveUpdateCallback *this, unsigned int, unsigned __int32)
.text:00002CBC                 public ?InFileStream_On_Error@CArchiveUpdateCallback@@UAEJIK@Z
.text:00002CBC ?InFileStream_On_Error@CArchiveUpdateCallback@@UAEJIK@Z proc near
.text:00002CBC                                         ; DATA XREF: .rdata:const CArchiveUpdateCallback::`vftable'{for `IInFileStream_Callback'}o
.text:00002CBC
.text:00002CBC var_2C          = dword ptr -2Ch
.text:00002CBC var_28          = dword ptr -28h
.text:00002CBC var_24          = dword ptr -24h
.text:00002CBC var_20          = dword ptr -20h
.text:00002CBC var_1C          = dword ptr -1Ch
.text:00002CBC var_18          = dword ptr -18h
.text:00002CBC var_14          = dword ptr -14h
.text:00002CBC var_10          = dword ptr -10h
.text:00002CBC var_C           = dword ptr -0Ch
.text:00002CBC var_4           = dword ptr -4
.text:00002CBC arg_0           = dword ptr  8
.text:00002CBC arg_4           = dword ptr  0Ch
.text:00002CBC
.text:00002CBC                 push    ebp
.text:00002CBD                 mov     ebp, esp
.text:00002CBF                 push    0FFFFFFFFh
.text:00002CC1                 push    offset __ehhandler$?InFileStream_On_Error@CArchiveUpdateCallback@@UAEJIK@Z
.text:00002CC6                 mov     eax, large fs:0
.text:00002CCC                 push    eax
.text:00002CCD                 sub     esp, 20h
.text:00002CD0                 push    esi
.text:00002CD1                 mov     eax, 0CCCCCCCCh
.text:00002CD6                 mov     [ebp+var_2C], eax
.text:00002CD9                 mov     [ebp+var_28], eax
.text:00002CDC                 mov     [ebp+var_24], eax
.text:00002CDF                 mov     [ebp+var_20], eax
.text:00002CE2                 mov     [ebp+var_1C], eax
.text:00002CE5                 mov     [ebp+var_18], eax
.text:00002CE8                 mov     [ebp+var_14], eax
.text:00002CEB                 mov     [ebp+var_10], eax
.text:00002CEE                 mov     eax, dword ptr ds:___security_cookie
.text:00002CF3                 xor     eax, ebp
.text:00002CF5                 push    eax
.text:00002CF6                 lea     eax, [ebp+var_C]
.text:00002CF9                 mov     large fs:0, eax
.text:00002CFF                 mov     [ebp+var_10], ecx
.text:00002D02                 cmp     [ebp+arg_4], 21h ; '!'
.text:00002D06                 jnz     loc_2DC9
.text:00002D0C                 push    offset _g_CriticalSection ; struct NWindows::NSynchronization::CCriticalSection *
.text:00002D11                 lea     ecx, [ebp+var_18] ; this
.text:00002D14                 call    ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z ; NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock(NWindows::NSynchronization::CCriticalSection &)
.text:00002D19                 mov     [ebp+var_4], 0
.text:00002D20                 mov     eax, [ebp+arg_0]
.text:00002D23                 mov     [ebp+var_20], eax
.text:00002D26                 mov     [ebp+var_24], 0
.text:00002D2D                 jmp     short loc_2D38
.text:00002D2F ; ---------------------------------------------------------------------------
.text:00002D2F
.text:00002D2F loc_2D2F:                               ; CODE XREF: CArchiveUpdateCallback::InFileStream_On_Error(uint,ulong):loc_2DB5j
.text:00002D2F                 mov     ecx, [ebp+var_24]
.text:00002D32                 add     ecx, 1
.text:00002D35                 mov     [ebp+var_24], ecx
.text:00002D38
.text:00002D38 loc_2D38:                               ; CODE XREF: CArchiveUpdateCallback::InFileStream_On_Error(uint,ulong)+71j
.text:00002D38                 mov     ecx, [ebp+var_10]
.text:00002D3B                 add     ecx, 20h ; ' '
.text:00002D3E                 call    ?Size@?$CRecordVector@I@@QBEIXZ ; CRecordVector<uint>::Size(void)
.text:00002D43                 cmp     [ebp+var_24], eax
.text:00002D46                 jnb     short loc_2DBA
.text:00002D48                 mov     edx, [ebp+var_24]
.text:00002D4B                 push    edx
.text:00002D4C                 mov     ecx, [ebp+var_10]
.text:00002D4F                 add     ecx, 20h ; ' '
.text:00002D52                 call    ??A?$CRecordVector@I@@QAEAAII@Z ; CRecordVector<uint>::operator[](uint)
.text:00002D57                 mov     eax, [eax]
.text:00002D59                 cmp     eax, [ebp+var_20]
.text:00002D5C                 jnz     short loc_2DB5
.text:00002D5E                 mov     esi, esp
.text:00002D60                 mov     ecx, [ebp+arg_4]
.text:00002D63                 push    ecx
.text:00002D64                 mov     edx, [ebp+var_24]
.text:00002D67                 push    edx
.text:00002D68                 mov     ecx, [ebp+var_10]
.text:00002D6B                 add     ecx, 2Ch ; ','
.text:00002D6E                 call    ??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[](uint)
.text:00002D73                 push    eax
.text:00002D74                 mov     eax, [ebp+var_10]
.text:00002D77                 mov     ecx, [eax+5Ch]
.text:00002D7A                 mov     edx, [ebp+var_10]
.text:00002D7D                 mov     eax, [edx+5Ch]
.text:00002D80                 mov     edx, [ecx]
.text:00002D82                 mov     ecx, eax
.text:00002D84                 mov     eax, [edx+20h]
.text:00002D87                 call    eax
.text:00002D89                 cmp     esi, esp
.text:00002D8B                 call    __RTC_CheckEsp
.text:00002D90                 mov     [ebp+var_28], eax
.text:00002D93                 cmp     [ebp+var_28], 0
.text:00002D97                 jz      short loc_2DB3
.text:00002D99                 mov     ecx, [ebp+var_28]
.text:00002D9C                 mov     [ebp+var_2C], ecx
.text:00002D9F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002DA6                 lea     ecx, [ebp+var_18] ; this
.text:00002DA9                 call    ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)
.text:00002DAE                 mov     eax, [ebp+var_2C]
.text:00002DB1                 jmp     short loc_2DD2
.text:00002DB3 ; ---------------------------------------------------------------------------
.text:00002DB3
.text:00002DB3 loc_2DB3:                               ; CODE XREF: CArchiveUpdateCallback::InFileStream_On_Error(uint,ulong)+DBj
.text:00002DB3                 jmp     short loc_2DBA
.text:00002DB5 ; ---------------------------------------------------------------------------
.text:00002DB5
.text:00002DB5 loc_2DB5:                               ; CODE XREF: CArchiveUpdateCallback::InFileStream_On_Error(uint,ulong)+A0j
.text:00002DB5                 jmp     loc_2D2F
.text:00002DBA ; ---------------------------------------------------------------------------
.text:00002DBA
.text:00002DBA loc_2DBA:                               ; CODE XREF: CArchiveUpdateCallback::InFileStream_On_Error(uint,ulong)+8Aj
.text:00002DBA                                         ; CArchiveUpdateCallback::InFileStream_On_Error(uint,ulong):loc_2DB3j
.text:00002DBA                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002DC1                 lea     ecx, [ebp+var_18] ; this
.text:00002DC4                 call    ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)
.text:00002DC9
.text:00002DC9 loc_2DC9:                               ; CODE XREF: CArchiveUpdateCallback::InFileStream_On_Error(uint,ulong)+4Aj
.text:00002DC9                 mov     edx, [ebp+arg_4]
.text:00002DCC                 push    edx
.text:00002DCD                 call    _HRESULT_FROM_WIN32@4 ; HRESULT_FROM_WIN32(x)
.text:00002DD2
.text:00002DD2 loc_2DD2:                               ; CODE XREF: CArchiveUpdateCallback::InFileStream_On_Error(uint,ulong)+F5j
.text:00002DD2                 push    edx
.text:00002DD3                 mov     ecx, ebp
.text:00002DD5                 push    eax
.text:00002DD6                 lea     edx, $LN13
.text:00002DDC                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002DE1                 pop     eax
.text:00002DE2                 pop     edx
.text:00002DE3                 mov     ecx, [ebp+var_C]
.text:00002DE6                 mov     large fs:0, ecx
.text:00002DED                 pop     ecx
.text:00002DEE                 pop     esi
.text:00002DEF                 add     esp, 2Ch
.text:00002DF2                 cmp     ebp, esp
.text:00002DF4                 call    __RTC_CheckEsp
.text:00002DF9                 mov     esp, ebp
.text:00002DFB                 pop     ebp
.text:00002DFC                 retn    8
.text:00002DFC ?InFileStream_On_Error@CArchiveUpdateCallback@@UAEJIK@Z endp
.text:00002DFC
.text:00002DFC ; ---------------------------------------------------------------------------
.text:00002DFF                 align 10h
.text:00002E00 $LN13           dd 1                    ; DATA XREF: CArchiveUpdateCallback::InFileStream_On_Error(uint,ulong)+11Ao
.text:00002E04                 dd offset $LN12
.text:00002E08 $LN12           dd 0FFFFFFE8h, 4        ; DATA XREF: .text:00002E04o
.text:00002E10                 dd offset $LN10_0       ; "lock"
.text:00002E14 $LN10_0         db 'lock',0             ; DATA XREF: .text:00002E10o
.text:00002E19                 align 4
.text:00002E1C
.text:00002E1C ; =============== S U B R O U T I N E =======================================
.text:00002E1C
.text:00002E1C ; Attributes: bp-based frame
.text:00002E1C
.text:00002E1C ; void __thiscall CArchiveUpdateCallback::InFileStream_On_Destroy(CArchiveUpdateCallback *this, unsigned int)
.text:00002E1C                 public ?InFileStream_On_Destroy@CArchiveUpdateCallback@@UAEXI@Z
.text:00002E1C ?InFileStream_On_Destroy@CArchiveUpdateCallback@@UAEXI@Z proc near
.text:00002E1C                                         ; DATA XREF: .rdata:000032E8o
.text:00002E1C
.text:00002E1C var_28          = dword ptr -28h
.text:00002E1C var_24          = dword ptr -24h
.text:00002E1C var_20          = dword ptr -20h
.text:00002E1C var_1C          = dword ptr -1Ch
.text:00002E1C var_18          = dword ptr -18h
.text:00002E1C var_14          = dword ptr -14h
.text:00002E1C var_10          = dword ptr -10h
.text:00002E1C var_C           = dword ptr -0Ch
.text:00002E1C var_4           = dword ptr -4
.text:00002E1C arg_0           = dword ptr  8
.text:00002E1C
.text:00002E1C                 push    ebp
.text:00002E1D                 mov     ebp, esp
.text:00002E1F                 push    0FFFFFFFFh
.text:00002E21                 push    offset __ehhandler$?InFileStream_On_Destroy@CArchiveUpdateCallback@@UAEXI@Z
.text:00002E26                 mov     eax, large fs:0
.text:00002E2C                 push    eax
.text:00002E2D                 sub     esp, 1Ch
.text:00002E30                 mov     eax, 0CCCCCCCCh
.text:00002E35                 mov     [ebp+var_28], eax
.text:00002E38                 mov     [ebp+var_24], eax
.text:00002E3B                 mov     [ebp+var_20], eax
.text:00002E3E                 mov     [ebp+var_1C], eax
.text:00002E41                 mov     [ebp+var_18], eax
.text:00002E44                 mov     [ebp+var_14], eax
.text:00002E47                 mov     [ebp+var_10], eax
.text:00002E4A                 mov     eax, dword ptr ds:___security_cookie
.text:00002E4F                 xor     eax, ebp
.text:00002E51                 push    eax
.text:00002E52                 lea     eax, [ebp+var_C]
.text:00002E55                 mov     large fs:0, eax
.text:00002E5B                 mov     [ebp+var_10], ecx
.text:00002E5E                 push    offset _g_CriticalSection ; struct NWindows::NSynchronization::CCriticalSection *
.text:00002E63                 lea     ecx, [ebp+var_18] ; this
.text:00002E66                 call    ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z ; NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock(NWindows::NSynchronization::CCriticalSection &)
.text:00002E6B                 mov     [ebp+var_4], 0
.text:00002E72                 mov     eax, [ebp+arg_0]
.text:00002E75                 mov     [ebp+var_20], eax
.text:00002E78                 mov     [ebp+var_24], 0
.text:00002E7F                 jmp     short loc_2E8A
.text:00002E81 ; ---------------------------------------------------------------------------
.text:00002E81
.text:00002E81 loc_2E81:                               ; CODE XREF: CArchiveUpdateCallback::InFileStream_On_Destroy(uint):loc_2EDFj
.text:00002E81                 mov     ecx, [ebp+var_24]
.text:00002E84                 add     ecx, 1
.text:00002E87                 mov     [ebp+var_24], ecx
.text:00002E8A
.text:00002E8A loc_2E8A:                               ; CODE XREF: CArchiveUpdateCallback::InFileStream_On_Destroy(uint)+63j
.text:00002E8A                 mov     ecx, [ebp+var_10]
.text:00002E8D                 add     ecx, 20h ; ' '
.text:00002E90                 call    ?Size@?$CRecordVector@I@@QBEIXZ ; CRecordVector<uint>::Size(void)
.text:00002E95                 cmp     [ebp+var_24], eax
.text:00002E98                 jnb     short loc_2EE1
.text:00002E9A                 mov     edx, [ebp+var_24]
.text:00002E9D                 push    edx
.text:00002E9E                 mov     ecx, [ebp+var_10]
.text:00002EA1                 add     ecx, 20h ; ' '
.text:00002EA4                 call    ??A?$CRecordVector@I@@QAEAAII@Z ; CRecordVector<uint>::operator[](uint)
.text:00002EA9                 mov     eax, [eax]
.text:00002EAB                 cmp     eax, [ebp+var_20]
.text:00002EAE                 jnz     short loc_2EDF
.text:00002EB0                 mov     ecx, [ebp+var_24]
.text:00002EB3                 push    ecx
.text:00002EB4                 mov     ecx, [ebp+var_10]
.text:00002EB7                 add     ecx, 20h ; ' '
.text:00002EBA                 call    ?Delete@?$CRecordVector@I@@QAEXI@Z ; CRecordVector<uint>::Delete(uint)
.text:00002EBF                 mov     edx, [ebp+var_24]
.text:00002EC2                 push    edx
.text:00002EC3                 mov     ecx, [ebp+var_10]
.text:00002EC6                 add     ecx, 2Ch ; ','
.text:00002EC9                 call    ?Delete@?$CObjectVector@VUString@@@@QAEXI@Z ; CObjectVector<UString>::Delete(uint)
.text:00002ECE                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002ED5                 lea     ecx, [ebp+var_18] ; this
.text:00002ED8                 call    ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)
.text:00002EDD                 jmp     short loc_2F05
.text:00002EDF ; ---------------------------------------------------------------------------
.text:00002EDF
.text:00002EDF loc_2EDF:                               ; CODE XREF: CArchiveUpdateCallback::InFileStream_On_Destroy(uint)+92j
.text:00002EDF                 jmp     short loc_2E81
.text:00002EE1 ; ---------------------------------------------------------------------------
.text:00002EE1
.text:00002EE1 loc_2EE1:                               ; CODE XREF: CArchiveUpdateCallback::InFileStream_On_Destroy(uint)+7Cj
.text:00002EE1                 mov     [ebp+var_28], 1335445h
.text:00002EE8                 push    offset __TI1H
.text:00002EED                 lea     eax, [ebp+var_28]
.text:00002EF0                 push    eax
.text:00002EF1                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:00002EF6 ; ---------------------------------------------------------------------------
.text:00002EF6                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002EFD                 lea     ecx, [ebp+var_18] ; this
.text:00002F00                 call    ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)
.text:00002F05
.text:00002F05 loc_2F05:                               ; CODE XREF: CArchiveUpdateCallback::InFileStream_On_Destroy(uint)+C1j
.text:00002F05                 push    edx
.text:00002F06                 mov     ecx, ebp
.text:00002F08                 push    eax
.text:00002F09                 lea     edx, $LN11
.text:00002F0F                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002F14                 pop     eax
.text:00002F15                 pop     edx
.text:00002F16                 mov     ecx, [ebp+var_C]
.text:00002F19                 mov     large fs:0, ecx
.text:00002F20                 pop     ecx
.text:00002F21                 add     esp, 28h
.text:00002F24                 cmp     ebp, esp
.text:00002F26                 call    __RTC_CheckEsp
.text:00002F2B                 mov     esp, ebp
.text:00002F2D                 pop     ebp
.text:00002F2E                 retn    4
.text:00002F2E ?InFileStream_On_Destroy@CArchiveUpdateCallback@@UAEXI@Z endp
.text:00002F2E
.text:00002F2E ; ---------------------------------------------------------------------------
.text:00002F31                 align 4
.text:00002F34 $LN11           dd 1                    ; DATA XREF: CArchiveUpdateCallback::InFileStream_On_Destroy(uint)+EDo
.text:00002F38                 dd offset $LN10_1
.text:00002F3C $LN10_1         dd 0FFFFFFE8h, 4        ; DATA XREF: .text:00002F38o
.text:00002F44                 dd offset $LN8_1        ; "lock"
.text:00002F48 $LN8_1          db 'lock',0             ; DATA XREF: .text:00002F44o
.text:00002F4D                 align 10h
.text:00002F4D _text           ends
.text:00002F4D
.text$x:00002F50 ; ===========================================================================
.text$x:00002F50
.text$x:00002F50 ; Segment type: Pure code
.text$x:00002F50 ; Segment permissions: Read/Execute
.text$x:00002F50 _text$x         segment para public 'CODE' use32
.text$x:00002F50                 assume cs:_text$x
.text$x:00002F50                 ;org 2F50h
.text$x:00002F50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00002F50
.text$x:00002F50 ; =============== S U B R O U T I N E =======================================
.text$x:00002F50
.text$x:00002F50
.text$x:00002F50 __unwindfunclet$??0CArchiveUpdateCallback@@QAE@XZ$0 proc near
.text$x:00002F50                                         ; DATA XREF: .xdata$x:000033ECo
.text$x:00002F50                 mov     ecx, [ebp-10h]
.text$x:00002F53                 add     ecx, 2Ch ; ','
.text$x:00002F56                 jmp     ??1?$CRecordVector@UCKeyKeyValPair@@@@QAE@XZ ; CRecordVector<CKeyKeyValPair>::~CRecordVector<CKeyKeyValPair>(void)
.text$x:00002F56 __unwindfunclet$??0CArchiveUpdateCallback@@QAE@XZ$0 endp
.text$x:00002F56
.text$x:00002F5B
.text$x:00002F5B ; =============== S U B R O U T I N E =======================================
.text$x:00002F5B
.text$x:00002F5B
.text$x:00002F5B __unwindfunclet$??0CArchiveUpdateCallback@@QAE@XZ$1 proc near
.text$x:00002F5B                                         ; DATA XREF: .xdata$x:000033F4o
.text$x:00002F5B                 mov     ecx, [ebp-10h]
.text$x:00002F5E                 add     ecx, 40h ; '@'
.text$x:00002F61                 jmp     ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text$x:00002F61 __unwindfunclet$??0CArchiveUpdateCallback@@QAE@XZ$1 endp
.text$x:00002F61
.text$x:00002F66
.text$x:00002F66 ; =============== S U B R O U T I N E =======================================
.text$x:00002F66
.text$x:00002F66
.text$x:00002F66 __unwindfunclet$??0CArchiveUpdateCallback@@QAE@XZ$2 proc near
.text$x:00002F66                                         ; DATA XREF: .xdata$x:000033FCo
.text$x:00002F66                 mov     ecx, [ebp-10h]
.text$x:00002F69                 add     ecx, 4Ch ; 'L'
.text$x:00002F6C                 jmp     ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text$x:00002F6C __unwindfunclet$??0CArchiveUpdateCallback@@QAE@XZ$2 endp
.text$x:00002F6C
.text$x:00002F71
.text$x:00002F71 ; =============== S U B R O U T I N E =======================================
.text$x:00002F71
.text$x:00002F71
.text$x:00002F71 __unwindfunclet$??0CArchiveUpdateCallback@@QAE@XZ$3 proc near
.text$x:00002F71                                         ; DATA XREF: .xdata$x:00003404o
.text$x:00002F71                 mov     ecx, [ebp-10h]
.text$x:00002F74                 add     ecx, 58h ; 'X'
.text$x:00002F77                 jmp     ??1?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text$x:00002F77 __unwindfunclet$??0CArchiveUpdateCallback@@QAE@XZ$3 endp
.text$x:00002F77
.text$x:00002F7C
.text$x:00002F7C ; =============== S U B R O U T I N E =======================================
.text$x:00002F7C
.text$x:00002F7C
.text$x:00002F7C __unwindfunclet$??0CArchiveUpdateCallback@@QAE@XZ$4 proc near
.text$x:00002F7C                                         ; DATA XREF: .xdata$x:0000340Co
.text$x:00002F7C                 mov     ecx, [ebp-10h]
.text$x:00002F7F                 add     ecx, 64h ; 'd'  ; this
.text$x:00002F82                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00002F82 __unwindfunclet$??0CArchiveUpdateCallback@@QAE@XZ$4 endp
.text$x:00002F82
.text$x:00002F87
.text$x:00002F87 ; =============== S U B R O U T I N E =======================================
.text$x:00002F87
.text$x:00002F87
.text$x:00002F87 __unwindfunclet$??0CArchiveUpdateCallback@@QAE@XZ$5 proc near
.text$x:00002F87                                         ; DATA XREF: .xdata$x:00003414o
.text$x:00002F87                 mov     ecx, [ebp-10h]
.text$x:00002F8A                 add     ecx, 70h ; 'p'  ; this
.text$x:00002F8D                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00002F8D __unwindfunclet$??0CArchiveUpdateCallback@@QAE@XZ$5 endp
.text$x:00002F8D
.text$x:00002F92
.text$x:00002F92 ; =============== S U B R O U T I N E =======================================
.text$x:00002F92
.text$x:00002F92
.text$x:00002F92 __unwindfunclet$??0CArchiveUpdateCallback@@QAE@XZ$6 proc near
.text$x:00002F92                                         ; DATA XREF: .xdata$x:0000341Co
.text$x:00002F92                 mov     ecx, [ebp-10h]
.text$x:00002F95                 add     ecx, 8Ch ; 'î'
.text$x:00002F9B                 jmp     ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text$x:00002F9B __unwindfunclet$??0CArchiveUpdateCallback@@QAE@XZ$6 endp
.text$x:00002F9B
.text$x:00002FA0
.text$x:00002FA0 ; =============== S U B R O U T I N E =======================================
.text$x:00002FA0
.text$x:00002FA0
.text$x:00002FA0 __ehhandler$??0CArchiveUpdateCallback@@QAE@XZ proc near
.text$x:00002FA0                                         ; DATA XREF: CArchiveUpdateCallback::CArchiveUpdateCallback(void)+5o
.text$x:00002FA0
.text$x:00002FA0 arg_4           = dword ptr  8
.text$x:00002FA0
.text$x:00002FA0                 mov     edx, [esp+arg_4]
.text$x:00002FA4                 lea     eax, [edx+0Ch]
.text$x:00002FA7                 mov     ecx, [edx-8]
.text$x:00002FAA                 xor     ecx, eax
.text$x:00002FAC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002FB1                 mov     eax, offset __ehfuncinfo$??0CArchiveUpdateCallback@@QAE@XZ
.text$x:00002FB6                 jmp     ___CxxFrameHandler3
.text$x:00002FB6 __ehhandler$??0CArchiveUpdateCallback@@QAE@XZ endp
.text$x:00002FB6
.text$x:00002FBB
.text$x:00002FBB ; =============== S U B R O U T I N E =======================================
.text$x:00002FBB
.text$x:00002FBB
.text$x:00002FBB __ehhandler$?SetTotal@CArchiveUpdateCallback@@UAGJ_K@Z proc near
.text$x:00002FBB                                         ; DATA XREF: CArchiveUpdateCallback::SetTotal(unsigned __int64)+5o
.text$x:00002FBB
.text$x:00002FBB arg_4           = dword ptr  8
.text$x:00002FBB
.text$x:00002FBB                 mov     edx, [esp+arg_4]
.text$x:00002FBF                 lea     eax, [edx+0Ch]
.text$x:00002FC2                 mov     ecx, [edx-1Ch]
.text$x:00002FC5                 xor     ecx, eax
.text$x:00002FC7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002FCC                 mov     eax, offset __ehfuncinfo$?SetTotal@CArchiveUpdateCallback@@UAGJ_K@Z
.text$x:00002FD1                 jmp     ___CxxFrameHandler3
.text$x:00002FD1 __ehhandler$?SetTotal@CArchiveUpdateCallback@@UAGJ_K@Z endp
.text$x:00002FD1
.text$x:00002FD6
.text$x:00002FD6 ; =============== S U B R O U T I N E =======================================
.text$x:00002FD6
.text$x:00002FD6
.text$x:00002FD6 __ehhandler$?SetCompleted@CArchiveUpdateCallback@@UAGJPB_K@Z proc near
.text$x:00002FD6                                         ; DATA XREF: CArchiveUpdateCallback::SetCompleted(unsigned __int64 const *)+5o
.text$x:00002FD6
.text$x:00002FD6 arg_4           = dword ptr  8
.text$x:00002FD6
.text$x:00002FD6                 mov     edx, [esp+arg_4]
.text$x:00002FDA                 lea     eax, [edx+0Ch]
.text$x:00002FDD                 mov     ecx, [edx-1Ch]
.text$x:00002FE0                 xor     ecx, eax
.text$x:00002FE2                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002FE7                 mov     eax, offset __ehfuncinfo$?SetCompleted@CArchiveUpdateCallback@@UAGJPB_K@Z
.text$x:00002FEC                 jmp     ___CxxFrameHandler3
.text$x:00002FEC __ehhandler$?SetCompleted@CArchiveUpdateCallback@@UAGJPB_K@Z endp
.text$x:00002FEC
.text$x:00002FF1
.text$x:00002FF1 ; =============== S U B R O U T I N E =======================================
.text$x:00002FF1
.text$x:00002FF1
.text$x:00002FF1 __ehhandler$?SetRatioInfo@CArchiveUpdateCallback@@UAGJPB_K0@Z proc near
.text$x:00002FF1                                         ; DATA XREF: CArchiveUpdateCallback::SetRatioInfo(unsigned __int64 const *,unsigned __int64 const *)+5o
.text$x:00002FF1
.text$x:00002FF1 arg_4           = dword ptr  8
.text$x:00002FF1
.text$x:00002FF1                 mov     edx, [esp+arg_4]
.text$x:00002FF5                 lea     eax, [edx+0Ch]
.text$x:00002FF8                 mov     ecx, [edx-1Ch]
.text$x:00002FFB                 xor     ecx, eax
.text$x:00002FFD                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003002                 mov     eax, offset __ehfuncinfo$?SetRatioInfo@CArchiveUpdateCallback@@UAGJPB_K0@Z
.text$x:00003007                 jmp     ___CxxFrameHandler3
.text$x:00003007 __ehhandler$?SetRatioInfo@CArchiveUpdateCallback@@UAGJPB_K0@Z endp
.text$x:00003007
.text$x:0000300C
.text$x:0000300C ; =============== S U B R O U T I N E =======================================
.text$x:0000300C
.text$x:0000300C
.text$x:0000300C __ehhandler$?GetUpdateItemInfo@CArchiveUpdateCallback@@UAGJIPAH0PAI@Z proc near
.text$x:0000300C                                         ; DATA XREF: CArchiveUpdateCallback::GetUpdateItemInfo(uint,int *,int *,uint *)+5o
.text$x:0000300C
.text$x:0000300C arg_4           = dword ptr  8
.text$x:0000300C
.text$x:0000300C                 mov     edx, [esp+arg_4]
.text$x:00003010                 lea     eax, [edx+0Ch]
.text$x:00003013                 mov     ecx, [edx-3Ch]
.text$x:00003016                 xor     ecx, eax
.text$x:00003018                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000301D                 mov     eax, offset __ehfuncinfo$?GetUpdateItemInfo@CArchiveUpdateCallback@@UAGJIPAH0PAI@Z
.text$x:00003022                 jmp     ___CxxFrameHandler3
.text$x:00003022 __ehhandler$?GetUpdateItemInfo@CArchiveUpdateCallback@@UAGJIPAH0PAI@Z endp
.text$x:00003022
.text$x:00003027
.text$x:00003027 ; =============== S U B R O U T I N E =======================================
.text$x:00003027
.text$x:00003027
.text$x:00003027 __unwindfunclet$?GetProperty@CArchiveUpdateCallback@@UAGJIKPAUtagPROPVARIANT@@@Z$2 proc near
.text$x:00003027                                         ; DATA XREF: .xdata$x:000035D4o
.text$x:00003027                 lea     ecx, [ebp-28h]  ; this
.text$x:0000302A                 jmp     ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text$x:0000302A __unwindfunclet$?GetProperty@CArchiveUpdateCallback@@UAGJIKPAUtagPROPVARIANT@@@Z$2 endp
.text$x:0000302A
.text$x:0000302F
.text$x:0000302F ; =============== S U B R O U T I N E =======================================
.text$x:0000302F
.text$x:0000302F
.text$x:0000302F __unwindfunclet$?GetProperty@CArchiveUpdateCallback@@UAGJIKPAUtagPROPVARIANT@@@Z$3 proc near
.text$x:0000302F                                         ; DATA XREF: .xdata$x:000035DCo
.text$x:0000302F                 lea     ecx, [ebp-54h]  ; this
.text$x:00003032                 jmp     ??1CReparseAttr@NFile@NWindows@@QAE@XZ ; NWindows::NFile::CReparseAttr::~CReparseAttr(void)
.text$x:00003032 __unwindfunclet$?GetProperty@CArchiveUpdateCallback@@UAGJIKPAUtagPROPVARIANT@@@Z$3 endp
.text$x:00003032
.text$x:00003037
.text$x:00003037 ; =============== S U B R O U T I N E =======================================
.text$x:00003037
.text$x:00003037
.text$x:00003037 __unwindfunclet$?GetProperty@CArchiveUpdateCallback@@UAGJIKPAUtagPROPVARIANT@@@Z$4 proc near
.text$x:00003037                                         ; DATA XREF: .xdata$x:000035E4o
.text$x:00003037                 lea     ecx, [ebp-68h]  ; this
.text$x:0000303A                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000303A __unwindfunclet$?GetProperty@CArchiveUpdateCallback@@UAGJIKPAUtagPROPVARIANT@@@Z$4 endp
.text$x:0000303A
.text$x:0000303F
.text$x:0000303F ; =============== S U B R O U T I N E =======================================
.text$x:0000303F
.text$x:0000303F
.text$x:0000303F __unwindfunclet$?GetProperty@CArchiveUpdateCallback@@UAGJIKPAUtagPROPVARIANT@@@Z$5 proc near
.text$x:0000303F                                         ; DATA XREF: .xdata$x:000035ECo
.text$x:0000303F                 lea     ecx, [ebp-7Ch]  ; this
.text$x:00003042                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00003042 __unwindfunclet$?GetProperty@CArchiveUpdateCallback@@UAGJIKPAUtagPROPVARIANT@@@Z$5 endp
.text$x:00003042
.text$x:00003047
.text$x:00003047 ; =============== S U B R O U T I N E =======================================
.text$x:00003047
.text$x:00003047
.text$x:00003047 __unwindfunclet$?GetProperty@CArchiveUpdateCallback@@UAGJIKPAUtagPROPVARIANT@@@Z$6 proc near
.text$x:00003047                                         ; DATA XREF: .xdata$x:000035F4o
.text$x:00003047                 lea     ecx, [ebp-90h]  ; this
.text$x:0000304D                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000304D __unwindfunclet$?GetProperty@CArchiveUpdateCallback@@UAGJIKPAUtagPROPVARIANT@@@Z$6 endp
.text$x:0000304D
.text$x:00003052
.text$x:00003052 ; =============== S U B R O U T I N E =======================================
.text$x:00003052
.text$x:00003052
.text$x:00003052 __unwindfunclet$?GetProperty@CArchiveUpdateCallback@@UAGJIKPAUtagPROPVARIANT@@@Z$7 proc near
.text$x:00003052                                         ; DATA XREF: .xdata$x:000035FCo
.text$x:00003052                 lea     ecx, [ebp-0B0h] ; this
.text$x:00003058                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00003058 __unwindfunclet$?GetProperty@CArchiveUpdateCallback@@UAGJIKPAUtagPROPVARIANT@@@Z$7 endp
.text$x:00003058
.text$x:0000305D
.text$x:0000305D ; =============== S U B R O U T I N E =======================================
.text$x:0000305D
.text$x:0000305D
.text$x:0000305D __unwindfunclet$?GetProperty@CArchiveUpdateCallback@@UAGJIKPAUtagPROPVARIANT@@@Z$8 proc near
.text$x:0000305D                                         ; DATA XREF: .xdata$x:00003604o
.text$x:0000305D                 lea     ecx, [ebp-0C0h] ; this
.text$x:00003063                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00003063 __unwindfunclet$?GetProperty@CArchiveUpdateCallback@@UAGJIKPAUtagPROPVARIANT@@@Z$8 endp
.text$x:00003063
.text$x:00003068
.text$x:00003068 ; =============== S U B R O U T I N E =======================================
.text$x:00003068
.text$x:00003068
.text$x:00003068 __unwindfunclet$?GetProperty@CArchiveUpdateCallback@@UAGJIKPAUtagPROPVARIANT@@@Z$9 proc near
.text$x:00003068                                         ; DATA XREF: .xdata$x:0000360Co
.text$x:00003068                 lea     ecx, [ebp-0D8h] ; this
.text$x:0000306E                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000306E __unwindfunclet$?GetProperty@CArchiveUpdateCallback@@UAGJIKPAUtagPROPVARIANT@@@Z$9 endp
.text$x:0000306E
.text$x:00003073
.text$x:00003073 ; =============== S U B R O U T I N E =======================================
.text$x:00003073
.text$x:00003073
.text$x:00003073 __ehhandler$?GetProperty@CArchiveUpdateCallback@@UAGJIKPAUtagPROPVARIANT@@@Z proc near
.text$x:00003073                                         ; DATA XREF: CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+5o
.text$x:00003073
.text$x:00003073 arg_4           = dword ptr  8
.text$x:00003073
.text$x:00003073                 mov     edx, [esp+arg_4]
.text$x:00003077                 lea     eax, [edx+0Ch]
.text$x:0000307A                 mov     ecx, [edx-16Ch]
.text$x:00003080                 xor     ecx, eax
.text$x:00003082                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003087                 mov     eax, offset __ehfuncinfo$?GetProperty@CArchiveUpdateCallback@@UAGJIKPAUtagPROPVARIANT@@@Z
.text$x:0000308C                 jmp     ___CxxFrameHandler3
.text$x:0000308C __ehhandler$?GetProperty@CArchiveUpdateCallback@@UAGJIKPAUtagPROPVARIANT@@@Z endp
.text$x:0000308C
.text$x:00003091
.text$x:00003091 ; =============== S U B R O U T I N E =======================================
.text$x:00003091
.text$x:00003091
.text$x:00003091 __unwindfunclet$?GetRelativePath@@YG?AVUString@@ABV1@0@Z$0 proc near
.text$x:00003091                                         ; DATA XREF: .xdata$x:00003624o
.text$x:00003091                 lea     ecx, [ebp-1Ch]
.text$x:00003094                 jmp     ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text$x:00003094 __unwindfunclet$?GetRelativePath@@YG?AVUString@@ABV1@0@Z$0 endp
.text$x:00003094
.text$x:00003099
.text$x:00003099 ; =============== S U B R O U T I N E =======================================
.text$x:00003099
.text$x:00003099
.text$x:00003099 __unwindfunclet$?GetRelativePath@@YG?AVUString@@ABV1@0@Z$1 proc near
.text$x:00003099                                         ; DATA XREF: .xdata$x:0000362Co
.text$x:00003099                 lea     ecx, [ebp-30h]
.text$x:0000309C                 jmp     ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text$x:0000309C __unwindfunclet$?GetRelativePath@@YG?AVUString@@ABV1@0@Z$1 endp
.text$x:0000309C
.text$x:000030A1
.text$x:000030A1 ; =============== S U B R O U T I N E =======================================
.text$x:000030A1
.text$x:000030A1
.text$x:000030A1 __unwindfunclet$?GetRelativePath@@YG?AVUString@@ABV1@0@Z$2 proc near
.text$x:000030A1                                         ; DATA XREF: .xdata$x:0000361Co
.text$x:000030A1                 mov     eax, [ebp-54h]
.text$x:000030A4                 and     eax, 1
.text$x:000030A7                 jz      locret_30B9
.text$x:000030AD                 and     dword ptr [ebp-54h], 0FFFFFFFEh
.text$x:000030B1                 mov     ecx, [ebp+8]    ; this
.text$x:000030B4                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:000030B9 ; ---------------------------------------------------------------------------
.text$x:000030B9
.text$x:000030B9 locret_30B9:                            ; CODE XREF: __unwindfunclet$?GetRelativePath@@YG?AVUString@@ABV1@0@Z$2+6j
.text$x:000030B9                 retn
.text$x:000030B9 __unwindfunclet$?GetRelativePath@@YG?AVUString@@ABV1@0@Z$2 endp
.text$x:000030B9
.text$x:000030BA
.text$x:000030BA ; =============== S U B R O U T I N E =======================================
.text$x:000030BA
.text$x:000030BA
.text$x:000030BA __unwindfunclet$?GetRelativePath@@YG?AVUString@@ABV1@0@Z$3 proc near
.text$x:000030BA                                         ; DATA XREF: .xdata$x:00003634o
.text$x:000030BA                 lea     ecx, [ebp-48h]  ; this
.text$x:000030BD                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:000030BD __unwindfunclet$?GetRelativePath@@YG?AVUString@@ABV1@0@Z$3 endp
.text$x:000030BD
.text$x:000030C2
.text$x:000030C2 ; =============== S U B R O U T I N E =======================================
.text$x:000030C2
.text$x:000030C2
.text$x:000030C2 __ehhandler$?GetRelativePath@@YG?AVUString@@ABV1@0@Z proc near
.text$x:000030C2                                         ; DATA XREF: GetRelativePath(UString const &,UString const &)+5o
.text$x:000030C2
.text$x:000030C2 arg_4           = dword ptr  8
.text$x:000030C2
.text$x:000030C2                 mov     edx, [esp+arg_4]
.text$x:000030C6                 lea     eax, [edx+0Ch]
.text$x:000030C9                 mov     ecx, [edx-54h]
.text$x:000030CC                 xor     ecx, eax
.text$x:000030CE                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000030D3                 mov     eax, offset __ehfuncinfo$?GetRelativePath@@YG?AVUString@@ABV1@0@Z
.text$x:000030D8                 jmp     ___CxxFrameHandler3
.text$x:000030D8 __ehhandler$?GetRelativePath@@YG?AVUString@@ABV1@0@Z endp
.text$x:000030D8
.text$x:000030DD
.text$x:000030DD ; =============== S U B R O U T I N E =======================================
.text$x:000030DD
.text$x:000030DD
.text$x:000030DD __unwindfunclet$?GetStream2@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@I@Z$2 proc near
.text$x:000030DD                                         ; DATA XREF: .xdata$x:000036B0o
.text$x:000030DD                 lea     ecx, [ebp-30h]  ; this
.text$x:000030E0                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:000030E0 __unwindfunclet$?GetStream2@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@I@Z$2 endp
.text$x:000030E0
.text$x:000030E5
.text$x:000030E5 ; =============== S U B R O U T I N E =======================================
.text$x:000030E5
.text$x:000030E5
.text$x:000030E5 __unwindfunclet$?GetStream2@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@I@Z$3 proc near
.text$x:000030E5                                         ; DATA XREF: .xdata$x:000036B8o
.text$x:000030E5                 lea     ecx, [ebp-108h] ; this
.text$x:000030EB                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:000030EB __unwindfunclet$?GetStream2@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@I@Z$3 endp
.text$x:000030EB
.text$x:000030F0
.text$x:000030F0 ; =============== S U B R O U T I N E =======================================
.text$x:000030F0
.text$x:000030F0
.text$x:000030F0 __unwindfunclet$?GetStream2@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@I@Z$4 proc near
.text$x:000030F0                                         ; DATA XREF: .xdata$x:000036C0o
.text$x:000030F0                 mov     eax, [ebp-114h]
.text$x:000030F6                 push    eax             ; void *
.text$x:000030F7                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000030FC                 pop     ecx
.text$x:000030FD                 retn
.text$x:000030FD __unwindfunclet$?GetStream2@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@I@Z$4 endp
.text$x:000030FD
.text$x:000030FE
.text$x:000030FE ; =============== S U B R O U T I N E =======================================
.text$x:000030FE
.text$x:000030FE
.text$x:000030FE __unwindfunclet$?GetStream2@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@I@Z$5 proc near
.text$x:000030FE                                         ; DATA XREF: .xdata$x:000036C8o
.text$x:000030FE                 lea     ecx, [ebp-44h]
.text$x:00003101                 jmp     ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text$x:00003101 __unwindfunclet$?GetStream2@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@I@Z$5 endp
.text$x:00003101
.text$x:00003106
.text$x:00003106 ; =============== S U B R O U T I N E =======================================
.text$x:00003106
.text$x:00003106
.text$x:00003106 __unwindfunclet$?GetStream2@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@I@Z$6 proc near
.text$x:00003106                                         ; DATA XREF: .xdata$x:000036D0o
.text$x:00003106                 lea     ecx, [ebp-124h] ; this
.text$x:0000310C                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000310C __unwindfunclet$?GetStream2@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@I@Z$6 endp
.text$x:0000310C
.text$x:00003111
.text$x:00003111 ; =============== S U B R O U T I N E =======================================
.text$x:00003111
.text$x:00003111
.text$x:00003111 __unwindfunclet$?GetStream2@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@I@Z$7 proc near
.text$x:00003111                                         ; DATA XREF: .xdata$x:000036D8o
.text$x:00003111                 mov     eax, [ebp-12Ch]
.text$x:00003117                 push    eax             ; void *
.text$x:00003118                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000311D                 pop     ecx
.text$x:0000311E                 retn
.text$x:0000311E __unwindfunclet$?GetStream2@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@I@Z$7 endp
.text$x:0000311E
.text$x:0000311F
.text$x:0000311F ; =============== S U B R O U T I N E =======================================
.text$x:0000311F
.text$x:0000311F
.text$x:0000311F __unwindfunclet$?GetStream2@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@I@Z$8 proc near
.text$x:0000311F                                         ; DATA XREF: .xdata$x:000036E0o
.text$x:0000311F                 lea     ecx, [ebp-58h]
.text$x:00003122                 jmp     ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text$x:00003122 __unwindfunclet$?GetStream2@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@I@Z$8 endp
.text$x:00003122
.text$x:00003127
.text$x:00003127 ; =============== S U B R O U T I N E =======================================
.text$x:00003127
.text$x:00003127
.text$x:00003127 __unwindfunclet$?GetStream2@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@I@Z$9 proc near
.text$x:00003127                                         ; DATA XREF: .xdata$x:000036E8o
.text$x:00003127                 mov     eax, [ebp-134h]
.text$x:0000312D                 push    eax             ; void *
.text$x:0000312E                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00003133                 pop     ecx
.text$x:00003134                 retn
.text$x:00003134 __unwindfunclet$?GetStream2@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@I@Z$9 endp
.text$x:00003134
.text$x:00003135
.text$x:00003135 ; =============== S U B R O U T I N E =======================================
.text$x:00003135
.text$x:00003135
.text$x:00003135 __unwindfunclet$?GetStream2@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@I@Z$10 proc near
.text$x:00003135                                         ; DATA XREF: .xdata$x:000036F0o
.text$x:00003135                 lea     ecx, [ebp-68h]
.text$x:00003138                 jmp     ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text$x:00003138 __unwindfunclet$?GetStream2@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@I@Z$10 endp
.text$x:00003138
.text$x:0000313D
.text$x:0000313D ; =============== S U B R O U T I N E =======================================
.text$x:0000313D
.text$x:0000313D
.text$x:0000313D __unwindfunclet$?GetStream2@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@I@Z$11 proc near
.text$x:0000313D                                         ; DATA XREF: .xdata$x:000036F8o
.text$x:0000313D                 lea     ecx, [ebp-7Ch]  ; this
.text$x:00003140                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00003140 __unwindfunclet$?GetStream2@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@I@Z$11 endp
.text$x:00003140
.text$x:00003145
.text$x:00003145 ; =============== S U B R O U T I N E =======================================
.text$x:00003145
.text$x:00003145
.text$x:00003145 __ehhandler$?GetStream2@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@I@Z proc near
.text$x:00003145                                         ; DATA XREF: CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+5o
.text$x:00003145
.text$x:00003145 arg_4           = dword ptr  8
.text$x:00003145
.text$x:00003145                 mov     edx, [esp+arg_4]
.text$x:00003149                 lea     eax, [edx+0Ch]
.text$x:0000314C                 mov     ecx, [edx-1E0h]
.text$x:00003152                 xor     ecx, eax
.text$x:00003154                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003159                 mov     ecx, [edx-8]
.text$x:0000315C                 xor     ecx, eax
.text$x:0000315E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003163                 mov     eax, offset __ehfuncinfo$?GetStream2@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@I@Z
.text$x:00003168                 jmp     ___CxxFrameHandler3
.text$x:00003168 __ehhandler$?GetStream2@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@I@Z endp
.text$x:00003168
.text$x:0000316D
.text$x:0000316D ; =============== S U B R O U T I N E =======================================
.text$x:0000316D
.text$x:0000316D
.text$x:0000316D __ehhandler$?SetOperationResult@CArchiveUpdateCallback@@UAGJH@Z proc near
.text$x:0000316D                                         ; DATA XREF: CArchiveUpdateCallback::SetOperationResult(int)+5o
.text$x:0000316D
.text$x:0000316D arg_4           = dword ptr  8
.text$x:0000316D
.text$x:0000316D                 mov     edx, [esp+arg_4]
.text$x:00003171                 lea     eax, [edx+0Ch]
.text$x:00003174                 mov     ecx, [edx-1Ch]
.text$x:00003177                 xor     ecx, eax
.text$x:00003179                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000317E                 mov     eax, offset __ehfuncinfo$?SetOperationResult@CArchiveUpdateCallback@@UAGJH@Z
.text$x:00003183                 jmp     ___CxxFrameHandler3
.text$x:00003183 __ehhandler$?SetOperationResult@CArchiveUpdateCallback@@UAGJH@Z endp
.text$x:00003183
.text$x:00003188
.text$x:00003188 ; =============== S U B R O U T I N E =======================================
.text$x:00003188
.text$x:00003188
.text$x:00003188 __ehhandler$?GetStream@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@@Z proc near
.text$x:00003188                                         ; DATA XREF: CArchiveUpdateCallback::GetStream(uint,ISequentialInStream * *)+5o
.text$x:00003188
.text$x:00003188 arg_4           = dword ptr  8
.text$x:00003188
.text$x:00003188                 mov     edx, [esp+arg_4]
.text$x:0000318C                 lea     eax, [edx+0Ch]
.text$x:0000318F                 mov     ecx, [edx-20h]
.text$x:00003192                 xor     ecx, eax
.text$x:00003194                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003199                 mov     eax, offset __ehfuncinfo$?GetStream@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@@Z
.text$x:0000319E                 jmp     ___CxxFrameHandler3
.text$x:0000319E __ehhandler$?GetStream@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@@Z endp
.text$x:0000319E
.text$x:000031A3
.text$x:000031A3 ; =============== S U B R O U T I N E =======================================
.text$x:000031A3
.text$x:000031A3
.text$x:000031A3 __unwindfunclet$?ReportOperation@CArchiveUpdateCallback@@UAGJIII@Z$2 proc near
.text$x:000031A3                                         ; DATA XREF: .xdata$x:00003808o
.text$x:000031A3                 lea     ecx, [ebp-30h]  ; this
.text$x:000031A6                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:000031A6 __unwindfunclet$?ReportOperation@CArchiveUpdateCallback@@UAGJIII@Z$2 endp
.text$x:000031A6
.text$x:000031AB
.text$x:000031AB ; =============== S U B R O U T I N E =======================================
.text$x:000031AB
.text$x:000031AB
.text$x:000031AB __unwindfunclet$?ReportOperation@CArchiveUpdateCallback@@UAGJIII@Z$3 proc near
.text$x:000031AB                                         ; DATA XREF: .xdata$x:00003810o
.text$x:000031AB                 lea     ecx, [ebp-90h]  ; this
.text$x:000031B1                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:000031B1 __unwindfunclet$?ReportOperation@CArchiveUpdateCallback@@UAGJIII@Z$3 endp
.text$x:000031B1
.text$x:000031B6
.text$x:000031B6 ; =============== S U B R O U T I N E =======================================
.text$x:000031B6
.text$x:000031B6
.text$x:000031B6 __unwindfunclet$?ReportOperation@CArchiveUpdateCallback@@UAGJIII@Z$4 proc near
.text$x:000031B6                                         ; DATA XREF: .xdata$x:00003818o
.text$x:000031B6                 lea     ecx, [ebp-70h]  ; this
.text$x:000031B9                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:000031B9 __unwindfunclet$?ReportOperation@CArchiveUpdateCallback@@UAGJIII@Z$4 endp
.text$x:000031B9
.text$x:000031BE
.text$x:000031BE ; =============== S U B R O U T I N E =======================================
.text$x:000031BE
.text$x:000031BE
.text$x:000031BE __ehhandler$?ReportOperation@CArchiveUpdateCallback@@UAGJIII@Z proc near
.text$x:000031BE                                         ; DATA XREF: CArchiveUpdateCallback::ReportOperation(uint,uint,uint)+5o
.text$x:000031BE
.text$x:000031BE arg_4           = dword ptr  8
.text$x:000031BE
.text$x:000031BE                 mov     edx, [esp+arg_4]
.text$x:000031C2                 lea     eax, [edx+0Ch]
.text$x:000031C5                 mov     ecx, [edx-0ECh]
.text$x:000031CB                 xor     ecx, eax
.text$x:000031CD                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000031D2                 mov     ecx, [edx-8]
.text$x:000031D5                 xor     ecx, eax
.text$x:000031D7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000031DC                 mov     eax, offset __ehfuncinfo$?ReportOperation@CArchiveUpdateCallback@@UAGJIII@Z
.text$x:000031E1                 jmp     ___CxxFrameHandler3
.text$x:000031E1 __ehhandler$?ReportOperation@CArchiveUpdateCallback@@UAGJIII@Z endp
.text$x:000031E1
.text$x:000031E6
.text$x:000031E6 ; =============== S U B R O U T I N E =======================================
.text$x:000031E6
.text$x:000031E6
.text$x:000031E6 __unwindfunclet$?ReportExtractResult@CArchiveUpdateCallback@@UAGJIIH@Z$2 proc near
.text$x:000031E6                                         ; DATA XREF: .xdata$x:00003854o
.text$x:000031E6                 lea     ecx, [ebp-58h]  ; this
.text$x:000031E9                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:000031E9 __unwindfunclet$?ReportExtractResult@CArchiveUpdateCallback@@UAGJIIH@Z$2 endp
.text$x:000031E9
.text$x:000031EE
.text$x:000031EE ; =============== S U B R O U T I N E =======================================
.text$x:000031EE
.text$x:000031EE
.text$x:000031EE __ehhandler$?ReportExtractResult@CArchiveUpdateCallback@@UAGJIIH@Z proc near
.text$x:000031EE                                         ; DATA XREF: CArchiveUpdateCallback::ReportExtractResult(uint,uint,int)+5o
.text$x:000031EE
.text$x:000031EE arg_4           = dword ptr  8
.text$x:000031EE
.text$x:000031EE                 mov     edx, [esp+arg_4]
.text$x:000031F2                 lea     eax, [edx+0Ch]
.text$x:000031F5                 mov     ecx, [edx-0A4h]
.text$x:000031FB                 xor     ecx, eax
.text$x:000031FD                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003202                 mov     ecx, [edx-8]
.text$x:00003205                 xor     ecx, eax
.text$x:00003207                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000320C                 mov     eax, offset __ehfuncinfo$?ReportExtractResult@CArchiveUpdateCallback@@UAGJIIH@Z
.text$x:00003211                 jmp     ___CxxFrameHandler3
.text$x:00003211 __ehhandler$?ReportExtractResult@CArchiveUpdateCallback@@UAGJIIH@Z endp
.text$x:00003211
.text$x:00003216
.text$x:00003216 ; =============== S U B R O U T I N E =======================================
.text$x:00003216
.text$x:00003216
.text$x:00003216 __unwindfunclet$?GetVolumeStream@CArchiveUpdateCallback@@UAGJIPAPAUISequentialOutStream@@@Z$2 proc near
.text$x:00003216                                         ; DATA XREF: .xdata$x:000038D8o
.text$x:00003216                 lea     ecx, [ebp-4Ch]  ; this
.text$x:00003219                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00003219 __unwindfunclet$?GetVolumeStream@CArchiveUpdateCallback@@UAGJIPAPAUISequentialOutStream@@@Z$2 endp
.text$x:00003219
.text$x:0000321E
.text$x:0000321E ; =============== S U B R O U T I N E =======================================
.text$x:0000321E
.text$x:0000321E
.text$x:0000321E __unwindfunclet$?GetVolumeStream@CArchiveUpdateCallback@@UAGJIPAPAUISequentialOutStream@@@Z$3 proc near
.text$x:0000321E                                         ; DATA XREF: .xdata$x:000038E0o
.text$x:0000321E                 lea     ecx, [ebp-60h]  ; this
.text$x:00003221                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00003221 __unwindfunclet$?GetVolumeStream@CArchiveUpdateCallback@@UAGJIPAPAUISequentialOutStream@@@Z$3 endp
.text$x:00003221
.text$x:00003226
.text$x:00003226 ; =============== S U B R O U T I N E =======================================
.text$x:00003226
.text$x:00003226
.text$x:00003226 __unwindfunclet$?GetVolumeStream@CArchiveUpdateCallback@@UAGJIPAPAUISequentialOutStream@@@Z$4 proc near
.text$x:00003226                                         ; DATA XREF: .xdata$x:000038E8o
.text$x:00003226                 mov     eax, [ebp-7Ch]
.text$x:00003229                 push    eax             ; void *
.text$x:0000322A                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000322F                 pop     ecx
.text$x:00003230                 retn
.text$x:00003230 __unwindfunclet$?GetVolumeStream@CArchiveUpdateCallback@@UAGJIPAPAUISequentialOutStream@@@Z$4 endp
.text$x:00003230
.text$x:00003231
.text$x:00003231 ; =============== S U B R O U T I N E =======================================
.text$x:00003231
.text$x:00003231
.text$x:00003231 __unwindfunclet$?GetVolumeStream@CArchiveUpdateCallback@@UAGJIPAPAUISequentialOutStream@@@Z$5 proc near
.text$x:00003231                                         ; DATA XREF: .xdata$x:000038F0o
.text$x:00003231                 lea     ecx, [ebp-70h]
.text$x:00003234                 jmp     ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text$x:00003234 __unwindfunclet$?GetVolumeStream@CArchiveUpdateCallback@@UAGJIPAPAUISequentialOutStream@@@Z$5 endp
.text$x:00003234
.text$x:00003239
.text$x:00003239 ; =============== S U B R O U T I N E =======================================
.text$x:00003239
.text$x:00003239
.text$x:00003239 __ehhandler$?GetVolumeStream@CArchiveUpdateCallback@@UAGJIPAPAUISequentialOutStream@@@Z proc near
.text$x:00003239                                         ; DATA XREF: CArchiveUpdateCallback::GetVolumeStream(uint,ISequentialOutStream * *)+5o
.text$x:00003239
.text$x:00003239 arg_4           = dword ptr  8
.text$x:00003239
.text$x:00003239                 mov     edx, [esp+arg_4]
.text$x:0000323D                 lea     eax, [edx+0Ch]
.text$x:00003240                 mov     ecx, [edx-0B0h]
.text$x:00003246                 xor     ecx, eax
.text$x:00003248                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000324D                 mov     ecx, [edx-8]
.text$x:00003250                 xor     ecx, eax
.text$x:00003252                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003257                 mov     eax, offset __ehfuncinfo$?GetVolumeStream@CArchiveUpdateCallback@@UAGJIPAPAUISequentialOutStream@@@Z
.text$x:0000325C                 jmp     ___CxxFrameHandler3
.text$x:0000325C __ehhandler$?GetVolumeStream@CArchiveUpdateCallback@@UAGJIPAPAUISequentialOutStream@@@Z endp
.text$x:0000325C
.text$x:00003261
.text$x:00003261 ; =============== S U B R O U T I N E =======================================
.text$x:00003261
.text$x:00003261
.text$x:00003261 __ehhandler$?CryptoGetTextPassword2@CArchiveUpdateCallback@@UAGJPAHPAPA_W@Z proc near
.text$x:00003261                                         ; DATA XREF: CArchiveUpdateCallback::CryptoGetTextPassword2(int *,wchar_t * *)+5o
.text$x:00003261
.text$x:00003261 arg_4           = dword ptr  8
.text$x:00003261
.text$x:00003261                 mov     edx, [esp+arg_4]
.text$x:00003265                 lea     eax, [edx+0Ch]
.text$x:00003268                 mov     ecx, [edx-1Ch]
.text$x:0000326B                 xor     ecx, eax
.text$x:0000326D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003272                 mov     eax, offset __ehfuncinfo$?CryptoGetTextPassword2@CArchiveUpdateCallback@@UAGJPAHPAPA_W@Z
.text$x:00003277                 jmp     ___CxxFrameHandler3
.text$x:00003277 __ehhandler$?CryptoGetTextPassword2@CArchiveUpdateCallback@@UAGJPAHPAPA_W@Z endp
.text$x:00003277
.text$x:0000327C
.text$x:0000327C ; =============== S U B R O U T I N E =======================================
.text$x:0000327C
.text$x:0000327C
.text$x:0000327C __ehhandler$?CryptoGetTextPassword@CArchiveUpdateCallback@@UAGJPAPA_W@Z proc near
.text$x:0000327C                                         ; DATA XREF: CArchiveUpdateCallback::CryptoGetTextPassword(wchar_t * *)+5o
.text$x:0000327C
.text$x:0000327C arg_4           = dword ptr  8
.text$x:0000327C
.text$x:0000327C                 mov     edx, [esp+arg_4]
.text$x:00003280                 lea     eax, [edx+0Ch]
.text$x:00003283                 mov     ecx, [edx-1Ch]
.text$x:00003286                 xor     ecx, eax
.text$x:00003288                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000328D                 mov     eax, offset __ehfuncinfo$?CryptoGetTextPassword@CArchiveUpdateCallback@@UAGJPAPA_W@Z
.text$x:00003292                 jmp     ___CxxFrameHandler3
.text$x:00003292 __ehhandler$?CryptoGetTextPassword@CArchiveUpdateCallback@@UAGJPAPA_W@Z endp
.text$x:00003292
.text$x:00003297
.text$x:00003297 ; =============== S U B R O U T I N E =======================================
.text$x:00003297
.text$x:00003297
.text$x:00003297 __unwindfunclet$?InFileStream_On_Error@CArchiveUpdateCallback@@UAEJIK@Z$0 proc near
.text$x:00003297                                         ; DATA XREF: .xdata$x:000039B0o
.text$x:00003297                 lea     ecx, [ebp-18h]  ; this
.text$x:0000329A                 jmp     ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)
.text$x:0000329A __unwindfunclet$?InFileStream_On_Error@CArchiveUpdateCallback@@UAEJIK@Z$0 endp
.text$x:0000329A
.text$x:0000329F
.text$x:0000329F ; =============== S U B R O U T I N E =======================================
.text$x:0000329F
.text$x:0000329F
.text$x:0000329F __ehhandler$?InFileStream_On_Error@CArchiveUpdateCallback@@UAEJIK@Z proc near
.text$x:0000329F                                         ; DATA XREF: CArchiveUpdateCallback::InFileStream_On_Error(uint,ulong)+5o
.text$x:0000329F
.text$x:0000329F arg_4           = dword ptr  8
.text$x:0000329F
.text$x:0000329F                 mov     edx, [esp+arg_4]
.text$x:000032A3                 lea     eax, [edx+0Ch]
.text$x:000032A6                 mov     ecx, [edx-28h]
.text$x:000032A9                 xor     ecx, eax
.text$x:000032AB                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000032B0                 mov     eax, offset __ehfuncinfo$?InFileStream_On_Error@CArchiveUpdateCallback@@UAEJIK@Z
.text$x:000032B5                 jmp     ___CxxFrameHandler3
.text$x:000032B5 __ehhandler$?InFileStream_On_Error@CArchiveUpdateCallback@@UAEJIK@Z endp
.text$x:000032B5
.text$x:000032BA
.text$x:000032BA ; =============== S U B R O U T I N E =======================================
.text$x:000032BA
.text$x:000032BA
.text$x:000032BA __unwindfunclet$?InFileStream_On_Destroy@CArchiveUpdateCallback@@UAEXI@Z$0 proc near
.text$x:000032BA                                         ; DATA XREF: .xdata$x:000039DCo
.text$x:000032BA                 lea     ecx, [ebp-18h]  ; this
.text$x:000032BD                 jmp     ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)
.text$x:000032BD __unwindfunclet$?InFileStream_On_Destroy@CArchiveUpdateCallback@@UAEXI@Z$0 endp
.text$x:000032BD
.text$x:000032C2
.text$x:000032C2 ; =============== S U B R O U T I N E =======================================
.text$x:000032C2
.text$x:000032C2
.text$x:000032C2 __ehhandler$?InFileStream_On_Destroy@CArchiveUpdateCallback@@UAEXI@Z proc near
.text$x:000032C2                                         ; DATA XREF: CArchiveUpdateCallback::InFileStream_On_Destroy(uint)+5o
.text$x:000032C2
.text$x:000032C2 arg_4           = dword ptr  8
.text$x:000032C2
.text$x:000032C2                 mov     edx, [esp+arg_4]
.text$x:000032C6                 lea     eax, [edx+0Ch]
.text$x:000032C9                 mov     ecx, [edx-20h]
.text$x:000032CC                 xor     ecx, eax
.text$x:000032CE                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000032D3                 mov     eax, offset __ehfuncinfo$?InFileStream_On_Destroy@CArchiveUpdateCallback@@UAEXI@Z
.text$x:000032D8                 jmp     ___CxxFrameHandler3
.text$x:000032D8 __ehhandler$?InFileStream_On_Destroy@CArchiveUpdateCallback@@UAEXI@Z endp
.text$x:000032D8
.text$x:000032D8 ; ---------------------------------------------------------------------------
.text$x:000032DD                 align 10h
.text$x:000032DD _text$x         ends
.text$x:000032DD
.rdata:000032E0 ; ===========================================================================
.rdata:000032E0
.rdata:000032E0 ; Segment type: Pure data
.rdata:000032E0 ; Segment permissions: Read
.rdata:000032E0 _rdata          segment dword public 'DATA' use32
.rdata:000032E0                 assume cs:_rdata
.rdata:000032E0                 ;org 32E0h
.rdata:000032E0 ; COMDAT (pick largest)
.rdata:000032E0                 dd offset ??_R4CArchiveUpdateCallback@@6BIInFileStream_Callback@@@ ; const CArchiveUpdateCallback::`RTTI Complete Object Locator'{for `IInFileStream_Callback'}
.rdata:000032E4                 public ??_7CArchiveUpdateCallback@@6BIInFileStream_Callback@@@
.rdata:000032E4 ; const CArchiveUpdateCallback::`vftable'{for `IInFileStream_Callback'}
.rdata:000032E4 ??_7CArchiveUpdateCallback@@6BIInFileStream_Callback@@@ dd offset ?InFileStream_On_Error@CArchiveUpdateCallback@@UAEJIK@Z
.rdata:000032E4                                         ; DATA XREF: CArchiveUpdateCallback::CArchiveUpdateCallback(void)+EAo
.rdata:000032E4                                         ; CArchiveUpdateCallback::InFileStream_On_Error(uint,ulong)
.rdata:000032E8                 dd offset ?InFileStream_On_Destroy@CArchiveUpdateCallback@@UAEXI@Z ; CArchiveUpdateCallback::InFileStream_On_Destroy(uint)
.rdata:000032E8 _rdata          ends
.rdata:000032E8
.rdata:000032EC ; ===========================================================================
.rdata:000032EC
.rdata:000032EC ; Segment type: Pure data
.rdata:000032EC ; Segment permissions: Read
.rdata:000032EC _rdata          segment dword public 'DATA' use32
.rdata:000032EC                 assume cs:_rdata
.rdata:000032EC                 ;org 32ECh
.rdata:000032EC ; COMDAT (pick largest)
.rdata:000032EC                 dd offset ??_R4CArchiveUpdateCallback@@6BICompressProgressInfo@@@ ; const CArchiveUpdateCallback::`RTTI Complete Object Locator'{for `ICompressProgressInfo'}
.rdata:000032F0                 public ??_7CArchiveUpdateCallback@@6BICompressProgressInfo@@@
.rdata:000032F0 ; const CArchiveUpdateCallback::`vftable'{for `ICompressProgressInfo'}
.rdata:000032F0 ??_7CArchiveUpdateCallback@@6BICompressProgressInfo@@@ dd offset ?QueryInterface@CArchiveUpdateCallback@@WBM@AGJABU_GUID@@PAPAX@Z
.rdata:000032F0                                         ; DATA XREF: CArchiveUpdateCallback::CArchiveUpdateCallback(void)+E0o
.rdata:000032F0                                         ; [thunk]:CArchiveUpdateCallback::QueryInterface`adjustor{28}' (_GUID const &,void * *)
.rdata:000032F4                 dd offset ?AddRef@CArchiveUpdateCallback@@WBM@AGKXZ ; [thunk]:CArchiveUpdateCallback::AddRef`adjustor{28}' (void)
.rdata:000032F8                 dd offset ?Release@CArchiveUpdateCallback@@WBM@AGKXZ ; [thunk]:CArchiveUpdateCallback::Release`adjustor{28}' (void)
.rdata:000032FC                 dd offset ?SetRatioInfo@CArchiveUpdateCallback@@UAGJPB_K0@Z ; CArchiveUpdateCallback::SetRatioInfo(unsigned __int64 const *,unsigned __int64 const *)
.rdata:000032FC _rdata          ends
.rdata:000032FC
.rdata:00003300 ; ===========================================================================
.rdata:00003300
.rdata:00003300 ; Segment type: Pure data
.rdata:00003300 ; Segment permissions: Read
.rdata:00003300 _rdata          segment dword public 'DATA' use32
.rdata:00003300                 assume cs:_rdata
.rdata:00003300                 ;org 3300h
.rdata:00003300 ; COMDAT (pick largest)
.rdata:00003300                 dd offset ??_R4CArchiveUpdateCallback@@6BICryptoGetTextPassword@@@ ; const CArchiveUpdateCallback::`RTTI Complete Object Locator'{for `ICryptoGetTextPassword'}
.rdata:00003304                 public ??_7CArchiveUpdateCallback@@6BICryptoGetTextPassword@@@
.rdata:00003304 ; const CArchiveUpdateCallback::`vftable'{for `ICryptoGetTextPassword'}
.rdata:00003304 ??_7CArchiveUpdateCallback@@6BICryptoGetTextPassword@@@ dd offset ?QueryInterface@CArchiveUpdateCallback@@WBI@AGJABU_GUID@@PAPAX@Z
.rdata:00003304                                         ; DATA XREF: CArchiveUpdateCallback::CArchiveUpdateCallback(void)+D6o
.rdata:00003304                                         ; [thunk]:CArchiveUpdateCallback::QueryInterface`adjustor{24}' (_GUID const &,void * *)
.rdata:00003308                 dd offset ?AddRef@CArchiveUpdateCallback@@WBI@AGKXZ ; [thunk]:CArchiveUpdateCallback::AddRef`adjustor{24}' (void)
.rdata:0000330C                 dd offset ?Release@CArchiveUpdateCallback@@WBI@AGKXZ ; [thunk]:CArchiveUpdateCallback::Release`adjustor{24}' (void)
.rdata:00003310                 dd offset ?CryptoGetTextPassword@CArchiveUpdateCallback@@UAGJPAPA_W@Z ; CArchiveUpdateCallback::CryptoGetTextPassword(wchar_t * *)
.rdata:00003310 _rdata          ends
.rdata:00003310
.rdata:00003314 ; ===========================================================================
.rdata:00003314
.rdata:00003314 ; Segment type: Pure data
.rdata:00003314 ; Segment permissions: Read
.rdata:00003314 _rdata          segment dword public 'DATA' use32
.rdata:00003314                 assume cs:_rdata
.rdata:00003314                 ;org 3314h
.rdata:00003314 ; COMDAT (pick largest)
.rdata:00003314                 dd offset ??_R4CArchiveUpdateCallback@@6BICryptoGetTextPassword2@@@ ; const CArchiveUpdateCallback::`RTTI Complete Object Locator'{for `ICryptoGetTextPassword2'}
.rdata:00003318                 public ??_7CArchiveUpdateCallback@@6BICryptoGetTextPassword2@@@
.rdata:00003318 ; const CArchiveUpdateCallback::`vftable'{for `ICryptoGetTextPassword2'}
.rdata:00003318 ??_7CArchiveUpdateCallback@@6BICryptoGetTextPassword2@@@ dd offset ?QueryInterface@CArchiveUpdateCallback@@WBE@AGJABU_GUID@@PAPAX@Z
.rdata:00003318                                         ; DATA XREF: CArchiveUpdateCallback::CArchiveUpdateCallback(void)+CCo
.rdata:00003318                                         ; [thunk]:CArchiveUpdateCallback::QueryInterface`adjustor{20}' (_GUID const &,void * *)
.rdata:0000331C                 dd offset ?AddRef@CArchiveUpdateCallback@@WBE@AGKXZ ; [thunk]:CArchiveUpdateCallback::AddRef`adjustor{20}' (void)
.rdata:00003320                 dd offset ?Release@CArchiveUpdateCallback@@WBE@AGKXZ ; [thunk]:CArchiveUpdateCallback::Release`adjustor{20}' (void)
.rdata:00003324                 dd offset ?CryptoGetTextPassword2@CArchiveUpdateCallback@@UAGJPAHPAPA_W@Z ; CArchiveUpdateCallback::CryptoGetTextPassword2(int *,wchar_t * *)
.rdata:00003324 _rdata          ends
.rdata:00003324
.rdata:00003328 ; ===========================================================================
.rdata:00003328
.rdata:00003328 ; Segment type: Pure data
.rdata:00003328 ; Segment permissions: Read
.rdata:00003328 _rdata          segment dword public 'DATA' use32
.rdata:00003328                 assume cs:_rdata
.rdata:00003328                 ;org 3328h
.rdata:00003328 ; COMDAT (pick largest)
.rdata:00003328                 dd offset ??_R4CArchiveUpdateCallback@@6BIArchiveGetRootProps@@@ ; const CArchiveUpdateCallback::`RTTI Complete Object Locator'{for `IArchiveGetRootProps'}
.rdata:0000332C                 public ??_7CArchiveUpdateCallback@@6BIArchiveGetRootProps@@@
.rdata:0000332C ; const CArchiveUpdateCallback::`vftable'{for `IArchiveGetRootProps'}
.rdata:0000332C ??_7CArchiveUpdateCallback@@6BIArchiveGetRootProps@@@ dd offset ?QueryInterface@CArchiveUpdateCallback@@WBA@AGJABU_GUID@@PAPAX@Z
.rdata:0000332C                                         ; DATA XREF: CArchiveUpdateCallback::CArchiveUpdateCallback(void)+C2o
.rdata:0000332C                                         ; [thunk]:CArchiveUpdateCallback::QueryInterface`adjustor{16}' (_GUID const &,void * *)
.rdata:00003330                 dd offset ?AddRef@CArchiveUpdateCallback@@WBA@AGKXZ ; [thunk]:CArchiveUpdateCallback::AddRef`adjustor{16}' (void)
.rdata:00003334                 dd offset ?Release@CArchiveUpdateCallback@@WBA@AGKXZ ; [thunk]:CArchiveUpdateCallback::Release`adjustor{16}' (void)
.rdata:00003338                 dd offset ?GetRootProp@CArchiveUpdateCallback@@UAGJKPAUtagPROPVARIANT@@@Z ; CArchiveUpdateCallback::GetRootProp(ulong,tagPROPVARIANT *)
.rdata:0000333C                 dd offset ?GetRootRawProp@CArchiveUpdateCallback@@UAGJKPAPBXPAI1@Z ; CArchiveUpdateCallback::GetRootRawProp(ulong,void const * *,uint *,uint *)
.rdata:0000333C _rdata          ends
.rdata:0000333C
.rdata:00003340 ; ===========================================================================
.rdata:00003340
.rdata:00003340 ; Segment type: Pure data
.rdata:00003340 ; Segment permissions: Read
.rdata:00003340 _rdata          segment dword public 'DATA' use32
.rdata:00003340                 assume cs:_rdata
.rdata:00003340                 ;org 3340h
.rdata:00003340 ; COMDAT (pick largest)
.rdata:00003340                 dd offset ??_R4CArchiveUpdateCallback@@6BIArchiveGetRawProps@@@ ; const CArchiveUpdateCallback::`RTTI Complete Object Locator'{for `IArchiveGetRawProps'}
.rdata:00003344                 public ??_7CArchiveUpdateCallback@@6BIArchiveGetRawProps@@@
.rdata:00003344 ; const CArchiveUpdateCallback::`vftable'{for `IArchiveGetRawProps'}
.rdata:00003344 ??_7CArchiveUpdateCallback@@6BIArchiveGetRawProps@@@ dd offset ?QueryInterface@CArchiveUpdateCallback@@WM@AGJABU_GUID@@PAPAX@Z
.rdata:00003344                                         ; DATA XREF: CArchiveUpdateCallback::CArchiveUpdateCallback(void)+B8o
.rdata:00003344                                         ; [thunk]:CArchiveUpdateCallback::QueryInterface`adjustor{12}' (_GUID const &,void * *)
.rdata:00003348                 dd offset ?AddRef@CArchiveUpdateCallback@@WM@AGKXZ ; [thunk]:CArchiveUpdateCallback::AddRef`adjustor{12}' (void)
.rdata:0000334C                 dd offset ?Release@CArchiveUpdateCallback@@WM@AGKXZ ; [thunk]:CArchiveUpdateCallback::Release`adjustor{12}' (void)
.rdata:00003350                 dd offset ?GetParent@CArchiveUpdateCallback@@UAGJIPAI0@Z ; CArchiveUpdateCallback::GetParent(uint,uint *,uint *)
.rdata:00003354                 dd offset ?GetRawProp@CArchiveUpdateCallback@@UAGJIKPAPBXPAI1@Z ; CArchiveUpdateCallback::GetRawProp(uint,ulong,void const * *,uint *,uint *)
.rdata:00003358                 dd offset ?GetNumRawProps@CArchiveUpdateCallback@@UAGJPAI@Z ; CArchiveUpdateCallback::GetNumRawProps(uint *)
.rdata:0000335C                 dd offset ?GetRawPropInfo@CArchiveUpdateCallback@@UAGJIPAPA_WPAK@Z ; CArchiveUpdateCallback::GetRawPropInfo(uint,wchar_t * *,ulong *)
.rdata:0000335C _rdata          ends
.rdata:0000335C
.rdata:00003360 ; ===========================================================================
.rdata:00003360
.rdata:00003360 ; Segment type: Pure data
.rdata:00003360 ; Segment permissions: Read
.rdata:00003360 _rdata          segment dword public 'DATA' use32
.rdata:00003360                 assume cs:_rdata
.rdata:00003360                 ;org 3360h
.rdata:00003360 ; COMDAT (pick largest)
.rdata:00003360                 dd offset ??_R4CArchiveUpdateCallback@@6BIArchiveExtractCallbackMessage@@@ ; const CArchiveUpdateCallback::`RTTI Complete Object Locator'{for `IArchiveExtractCallbackMessage'}
.rdata:00003364                 public ??_7CArchiveUpdateCallback@@6BIArchiveExtractCallbackMessage@@@
.rdata:00003364 ; const CArchiveUpdateCallback::`vftable'{for `IArchiveExtractCallbackMessage'}
.rdata:00003364 ??_7CArchiveUpdateCallback@@6BIArchiveExtractCallbackMessage@@@ dd offset ?QueryInterface@CArchiveUpdateCallback@@W7AGJABU_GUID@@PAPAX@Z
.rdata:00003364                                         ; DATA XREF: CArchiveUpdateCallback::CArchiveUpdateCallback(void)+AEo
.rdata:00003364                                         ; [thunk]:CArchiveUpdateCallback::QueryInterface`adjustor{8}' (_GUID const &,void * *)
.rdata:00003368                 dd offset ?AddRef@CArchiveUpdateCallback@@W7AGKXZ ; [thunk]:CArchiveUpdateCallback::AddRef`adjustor{8}' (void)
.rdata:0000336C                 dd offset ?Release@CArchiveUpdateCallback@@W7AGKXZ ; [thunk]:CArchiveUpdateCallback::Release`adjustor{8}' (void)
.rdata:00003370                 dd offset ?SetTotal@CArchiveUpdateCallback@@W7AGJ_K@Z ; [thunk]:CArchiveUpdateCallback::SetTotal`adjustor{8}' (unsigned __int64)
.rdata:00003374                 dd offset ?SetCompleted@CArchiveUpdateCallback@@W7AGJPB_K@Z ; [thunk]:CArchiveUpdateCallback::SetCompleted`adjustor{8}' (unsigned __int64 const *)
.rdata:00003378                 dd offset ?ReportExtractResult@CArchiveUpdateCallback@@UAGJIIH@Z ; CArchiveUpdateCallback::ReportExtractResult(uint,uint,int)
.rdata:00003378 _rdata          ends
.rdata:00003378
.rdata:0000337C ; ===========================================================================
.rdata:0000337C
.rdata:0000337C ; Segment type: Pure data
.rdata:0000337C ; Segment permissions: Read
.rdata:0000337C _rdata          segment dword public 'DATA' use32
.rdata:0000337C                 assume cs:_rdata
.rdata:0000337C                 ;org 337Ch
.rdata:0000337C ; COMDAT (pick largest)
.rdata:0000337C                 dd offset ??_R4CArchiveUpdateCallback@@6BIArchiveUpdateCallbackFile@@@ ; const CArchiveUpdateCallback::`RTTI Complete Object Locator'{for `IArchiveUpdateCallbackFile'}
.rdata:00003380                 public ??_7CArchiveUpdateCallback@@6BIArchiveUpdateCallbackFile@@@
.rdata:00003380 ; const CArchiveUpdateCallback::`vftable'{for `IArchiveUpdateCallbackFile'}
.rdata:00003380 ??_7CArchiveUpdateCallback@@6BIArchiveUpdateCallbackFile@@@ dd offset ?QueryInterface@CArchiveUpdateCallback@@W3AGJABU_GUID@@PAPAX@Z
.rdata:00003380                                         ; DATA XREF: CArchiveUpdateCallback::CArchiveUpdateCallback(void)+A4o
.rdata:00003380                                         ; [thunk]:CArchiveUpdateCallback::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:00003384                 dd offset ?AddRef@CArchiveUpdateCallback@@W3AGKXZ ; [thunk]:CArchiveUpdateCallback::AddRef`adjustor{4}' (void)
.rdata:00003388                 dd offset ?Release@CArchiveUpdateCallback@@W3AGKXZ ; [thunk]:CArchiveUpdateCallback::Release`adjustor{4}' (void)
.rdata:0000338C                 dd offset ?GetStream2@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@I@Z ; CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)
.rdata:00003390                 dd offset ?ReportOperation@CArchiveUpdateCallback@@UAGJIII@Z ; CArchiveUpdateCallback::ReportOperation(uint,uint,uint)
.rdata:00003390 _rdata          ends
.rdata:00003390
.rdata:00003394 ; ===========================================================================
.rdata:00003394
.rdata:00003394 ; Segment type: Pure data
.rdata:00003394 ; Segment permissions: Read
.rdata:00003394 _rdata          segment dword public 'DATA' use32
.rdata:00003394                 assume cs:_rdata
.rdata:00003394                 ;org 3394h
.rdata:00003394 ; COMDAT (pick largest)
.rdata:00003394                 dd offset ??_R4CArchiveUpdateCallback@@6BIArchiveUpdateCallback2@@@ ; const CArchiveUpdateCallback::`RTTI Complete Object Locator'{for `IArchiveUpdateCallback2'}
.rdata:00003398                 public ??_7CArchiveUpdateCallback@@6BIArchiveUpdateCallback2@@@
.rdata:00003398 ; const CArchiveUpdateCallback::`vftable'{for `IArchiveUpdateCallback2'}
.rdata:00003398 ??_7CArchiveUpdateCallback@@6BIArchiveUpdateCallback2@@@ dd offset ?QueryInterface@CArchiveUpdateCallback@@UAGJABU_GUID@@PAPAX@Z
.rdata:00003398                                         ; DATA XREF: CArchiveUpdateCallback::CArchiveUpdateCallback(void)+9Bo
.rdata:00003398                                         ; CArchiveUpdateCallback::QueryInterface(_GUID const &,void * *)
.rdata:0000339C                 dd offset ?AddRef@CArchiveUpdateCallback@@UAGKXZ ; CArchiveUpdateCallback::AddRef(void)
.rdata:000033A0                 dd offset ?Release@CArchiveUpdateCallback@@UAGKXZ ; CArchiveUpdateCallback::Release(void)
.rdata:000033A4                 dd offset ?SetTotal@CArchiveUpdateCallback@@UAGJ_K@Z ; CArchiveUpdateCallback::SetTotal(unsigned __int64)
.rdata:000033A8                 dd offset ?SetCompleted@CArchiveUpdateCallback@@UAGJPB_K@Z ; CArchiveUpdateCallback::SetCompleted(unsigned __int64 const *)
.rdata:000033AC                 dd offset ?GetUpdateItemInfo@CArchiveUpdateCallback@@UAGJIPAH0PAI@Z ; CArchiveUpdateCallback::GetUpdateItemInfo(uint,int *,int *,uint *)
.rdata:000033B0                 dd offset ?GetProperty@CArchiveUpdateCallback@@UAGJIKPAUtagPROPVARIANT@@@Z ; CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)
.rdata:000033B4                 dd offset ?GetStream@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@@Z ; CArchiveUpdateCallback::GetStream(uint,ISequentialInStream * *)
.rdata:000033B8                 dd offset ?SetOperationResult@CArchiveUpdateCallback@@UAGJH@Z ; CArchiveUpdateCallback::SetOperationResult(int)
.rdata:000033BC                 dd offset ?GetVolumeSize@CArchiveUpdateCallback@@UAGJIPA_K@Z ; CArchiveUpdateCallback::GetVolumeSize(uint,unsigned __int64 *)
.rdata:000033C0                 dd offset ?GetVolumeStream@CArchiveUpdateCallback@@UAGJIPAPAUISequentialOutStream@@@Z ; CArchiveUpdateCallback::GetVolumeStream(uint,ISequentialOutStream * *)
.rdata:000033C0 _rdata          ends
.rdata:000033C0
.xdata$x:000033C4 ; ===========================================================================
.xdata$x:000033C4
.xdata$x:000033C4 ; Segment type: Pure data
.xdata$x:000033C4 ; Segment permissions: Read
.xdata$x:000033C4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000033C4                 assume cs:_xdata$x
.xdata$x:000033C4                 ;org 33C4h
.xdata$x:000033C4 __ehfuncinfo$??0CArchiveUpdateCallback@@QAE@XZ db  22h ; "
.xdata$x:000033C4                                         ; DATA XREF: __ehhandler$??0CArchiveUpdateCallback@@QAE@XZ+11o
.xdata$x:000033C5                 db    5
.xdata$x:000033C6                 db  93h ; ô
.xdata$x:000033C7                 db  19h
.xdata$x:000033C8                 db    7
.xdata$x:000033C9                 db    0
.xdata$x:000033CA                 db    0
.xdata$x:000033CB                 db    0
.xdata$x:000033CC                 dd offset __unwindtable$??0CArchiveUpdateCallback@@QAE@XZ
.xdata$x:000033D0                 db    0
.xdata$x:000033D1                 db    0
.xdata$x:000033D2                 db    0
.xdata$x:000033D3                 db    0
.xdata$x:000033D4                 db    0
.xdata$x:000033D5                 db    0
.xdata$x:000033D6                 db    0
.xdata$x:000033D7                 db    0
.xdata$x:000033D8                 db    0
.xdata$x:000033D9                 db    0
.xdata$x:000033DA                 db    0
.xdata$x:000033DB                 db    0
.xdata$x:000033DC                 db    0
.xdata$x:000033DD                 db    0
.xdata$x:000033DE                 db    0
.xdata$x:000033DF                 db    0
.xdata$x:000033E0                 db    0
.xdata$x:000033E1                 db    0
.xdata$x:000033E2                 db    0
.xdata$x:000033E3                 db    0
.xdata$x:000033E4                 db    1
.xdata$x:000033E5                 db    0
.xdata$x:000033E6                 db    0
.xdata$x:000033E7                 db    0
.xdata$x:000033E8 __unwindtable$??0CArchiveUpdateCallback@@QAE@XZ db 0FFh
.xdata$x:000033E8                                         ; DATA XREF: .xdata$x:000033CCo
.xdata$x:000033E9                 db 0FFh
.xdata$x:000033EA                 db 0FFh
.xdata$x:000033EB                 db 0FFh
.xdata$x:000033EC                 dd offset __unwindfunclet$??0CArchiveUpdateCallback@@QAE@XZ$0
.xdata$x:000033F0                 db    0
.xdata$x:000033F1                 db    0
.xdata$x:000033F2                 db    0
.xdata$x:000033F3                 db    0
.xdata$x:000033F4                 dd offset __unwindfunclet$??0CArchiveUpdateCallback@@QAE@XZ$1
.xdata$x:000033F8                 db    1
.xdata$x:000033F9                 db    0
.xdata$x:000033FA                 db    0
.xdata$x:000033FB                 db    0
.xdata$x:000033FC                 dd offset __unwindfunclet$??0CArchiveUpdateCallback@@QAE@XZ$2
.xdata$x:00003400                 db    2
.xdata$x:00003401                 db    0
.xdata$x:00003402                 db    0
.xdata$x:00003403                 db    0
.xdata$x:00003404                 dd offset __unwindfunclet$??0CArchiveUpdateCallback@@QAE@XZ$3
.xdata$x:00003408                 db    3
.xdata$x:00003409                 db    0
.xdata$x:0000340A                 db    0
.xdata$x:0000340B                 db    0
.xdata$x:0000340C                 dd offset __unwindfunclet$??0CArchiveUpdateCallback@@QAE@XZ$4
.xdata$x:00003410                 db    4
.xdata$x:00003411                 db    0
.xdata$x:00003412                 db    0
.xdata$x:00003413                 db    0
.xdata$x:00003414                 dd offset __unwindfunclet$??0CArchiveUpdateCallback@@QAE@XZ$5
.xdata$x:00003418                 db    5
.xdata$x:00003419                 db    0
.xdata$x:0000341A                 db    0
.xdata$x:0000341B                 db    0
.xdata$x:0000341C                 dd offset __unwindfunclet$??0CArchiveUpdateCallback@@QAE@XZ$6
.xdata$x:00003420 __catchsym$?SetTotal@CArchiveUpdateCallback@@UAGJ_K@Z$2 dd offset loc_3C+4
.xdata$x:00003420                                         ; DATA XREF: .xdata$x:00003450o
.xdata$x:00003424                 db    0
.xdata$x:00003425                 db    0
.xdata$x:00003426                 db    0
.xdata$x:00003427                 db    0
.xdata$x:00003428                 db    0
.xdata$x:00003429                 db    0
.xdata$x:0000342A                 db    0
.xdata$x:0000342B                 db    0
.xdata$x:0000342C                 dd offset __catch$?SetTotal@CArchiveUpdateCallback@@UAGJ_K@Z$0
.xdata$x:00003430 __unwindtable$?SetTotal@CArchiveUpdateCallback@@UAGJ_K@Z db 0FFh
.xdata$x:00003430                                         ; DATA XREF: .xdata$x:0000345Co
.xdata$x:00003431                 db 0FFh
.xdata$x:00003432                 db 0FFh
.xdata$x:00003433                 db 0FFh
.xdata$x:00003434                 db    0
.xdata$x:00003435                 db    0
.xdata$x:00003436                 db    0
.xdata$x:00003437                 db    0
.xdata$x:00003438                 db 0FFh
.xdata$x:00003439                 db 0FFh
.xdata$x:0000343A                 db 0FFh
.xdata$x:0000343B                 db 0FFh
.xdata$x:0000343C                 db    0
.xdata$x:0000343D                 db    0
.xdata$x:0000343E                 db    0
.xdata$x:0000343F                 db    0
.xdata$x:00003440 __tryblocktable$?SetTotal@CArchiveUpdateCallback@@UAGJ_K@Z db    0
.xdata$x:00003440                                         ; DATA XREF: .xdata$x:00003464o
.xdata$x:00003441                 db    0
.xdata$x:00003442                 db    0
.xdata$x:00003443                 db    0
.xdata$x:00003444                 db    0
.xdata$x:00003445                 db    0
.xdata$x:00003446                 db    0
.xdata$x:00003447                 db    0
.xdata$x:00003448                 db    1
.xdata$x:00003449                 db    0
.xdata$x:0000344A                 db    0
.xdata$x:0000344B                 db    0
.xdata$x:0000344C                 db    1
.xdata$x:0000344D                 db    0
.xdata$x:0000344E                 db    0
.xdata$x:0000344F                 db    0
.xdata$x:00003450                 dd offset __catchsym$?SetTotal@CArchiveUpdateCallback@@UAGJ_K@Z$2
.xdata$x:00003454 __ehfuncinfo$?SetTotal@CArchiveUpdateCallback@@UAGJ_K@Z db  22h ; "
.xdata$x:00003454                                         ; DATA XREF: __ehhandler$?SetTotal@CArchiveUpdateCallback@@UAGJ_K@Z+11o
.xdata$x:00003455                 db    5
.xdata$x:00003456                 db  93h ; ô
.xdata$x:00003457                 db  19h
.xdata$x:00003458                 db    2
.xdata$x:00003459                 db    0
.xdata$x:0000345A                 db    0
.xdata$x:0000345B                 db    0
.xdata$x:0000345C                 dd offset __unwindtable$?SetTotal@CArchiveUpdateCallback@@UAGJ_K@Z
.xdata$x:00003460                 db    1
.xdata$x:00003461                 db    0
.xdata$x:00003462                 db    0
.xdata$x:00003463                 db    0
.xdata$x:00003464                 dd offset __tryblocktable$?SetTotal@CArchiveUpdateCallback@@UAGJ_K@Z
.xdata$x:00003468                 db    0
.xdata$x:00003469                 db    0
.xdata$x:0000346A                 db    0
.xdata$x:0000346B                 db    0
.xdata$x:0000346C                 db    0
.xdata$x:0000346D                 db    0
.xdata$x:0000346E                 db    0
.xdata$x:0000346F                 db    0
.xdata$x:00003470                 db    0
.xdata$x:00003471                 db    0
.xdata$x:00003472                 db    0
.xdata$x:00003473                 db    0
.xdata$x:00003474                 db    1
.xdata$x:00003475                 db    0
.xdata$x:00003476                 db    0
.xdata$x:00003477                 db    0
.xdata$x:00003478 __catchsym$?SetCompleted@CArchiveUpdateCallback@@UAGJPB_K@Z$2 dd offset loc_3C+4
.xdata$x:00003478                                         ; DATA XREF: .xdata$x:000034A8o
.xdata$x:0000347C                 db    0
.xdata$x:0000347D                 db    0
.xdata$x:0000347E                 db    0
.xdata$x:0000347F                 db    0
.xdata$x:00003480                 db    0
.xdata$x:00003481                 db    0
.xdata$x:00003482                 db    0
.xdata$x:00003483                 db    0
.xdata$x:00003484                 dd offset __catch$?SetCompleted@CArchiveUpdateCallback@@UAGJPB_K@Z$0
.xdata$x:00003488 __unwindtable$?SetCompleted@CArchiveUpdateCallback@@UAGJPB_K@Z db 0FFh
.xdata$x:00003488                                         ; DATA XREF: .xdata$x:000034B4o
.xdata$x:00003489                 db 0FFh
.xdata$x:0000348A                 db 0FFh
.xdata$x:0000348B                 db 0FFh
.xdata$x:0000348C                 db    0
.xdata$x:0000348D                 db    0
.xdata$x:0000348E                 db    0
.xdata$x:0000348F                 db    0
.xdata$x:00003490                 db 0FFh
.xdata$x:00003491                 db 0FFh
.xdata$x:00003492                 db 0FFh
.xdata$x:00003493                 db 0FFh
.xdata$x:00003494                 db    0
.xdata$x:00003495                 db    0
.xdata$x:00003496                 db    0
.xdata$x:00003497                 db    0
.xdata$x:00003498 __tryblocktable$?SetCompleted@CArchiveUpdateCallback@@UAGJPB_K@Z db    0
.xdata$x:00003498                                         ; DATA XREF: .xdata$x:000034BCo
.xdata$x:00003499                 db    0
.xdata$x:0000349A                 db    0
.xdata$x:0000349B                 db    0
.xdata$x:0000349C                 db    0
.xdata$x:0000349D                 db    0
.xdata$x:0000349E                 db    0
.xdata$x:0000349F                 db    0
.xdata$x:000034A0                 db    1
.xdata$x:000034A1                 db    0
.xdata$x:000034A2                 db    0
.xdata$x:000034A3                 db    0
.xdata$x:000034A4                 db    1
.xdata$x:000034A5                 db    0
.xdata$x:000034A6                 db    0
.xdata$x:000034A7                 db    0
.xdata$x:000034A8                 dd offset __catchsym$?SetCompleted@CArchiveUpdateCallback@@UAGJPB_K@Z$2
.xdata$x:000034AC __ehfuncinfo$?SetCompleted@CArchiveUpdateCallback@@UAGJPB_K@Z db  22h ; "
.xdata$x:000034AC                                         ; DATA XREF: __ehhandler$?SetCompleted@CArchiveUpdateCallback@@UAGJPB_K@Z+11o
.xdata$x:000034AD                 db    5
.xdata$x:000034AE                 db  93h ; ô
.xdata$x:000034AF                 db  19h
.xdata$x:000034B0                 db    2
.xdata$x:000034B1                 db    0
.xdata$x:000034B2                 db    0
.xdata$x:000034B3                 db    0
.xdata$x:000034B4                 dd offset __unwindtable$?SetCompleted@CArchiveUpdateCallback@@UAGJPB_K@Z
.xdata$x:000034B8                 db    1
.xdata$x:000034B9                 db    0
.xdata$x:000034BA                 db    0
.xdata$x:000034BB                 db    0
.xdata$x:000034BC                 dd offset __tryblocktable$?SetCompleted@CArchiveUpdateCallback@@UAGJPB_K@Z
.xdata$x:000034C0                 db    0
.xdata$x:000034C1                 db    0
.xdata$x:000034C2                 db    0
.xdata$x:000034C3                 db    0
.xdata$x:000034C4                 db    0
.xdata$x:000034C5                 db    0
.xdata$x:000034C6                 db    0
.xdata$x:000034C7                 db    0
.xdata$x:000034C8                 db    0
.xdata$x:000034C9                 db    0
.xdata$x:000034CA                 db    0
.xdata$x:000034CB                 db    0
.xdata$x:000034CC                 db    1
.xdata$x:000034CD                 db    0
.xdata$x:000034CE                 db    0
.xdata$x:000034CF                 db    0
.xdata$x:000034D0 __catchsym$?SetRatioInfo@CArchiveUpdateCallback@@UAGJPB_K0@Z$2 dd offset loc_3C+4
.xdata$x:000034D0                                         ; DATA XREF: .xdata$x:00003500o
.xdata$x:000034D4                 db    0
.xdata$x:000034D5                 db    0
.xdata$x:000034D6                 db    0
.xdata$x:000034D7                 db    0
.xdata$x:000034D8                 db    0
.xdata$x:000034D9                 db    0
.xdata$x:000034DA                 db    0
.xdata$x:000034DB                 db    0
.xdata$x:000034DC                 dd offset __catch$?SetRatioInfo@CArchiveUpdateCallback@@UAGJPB_K0@Z$0
.xdata$x:000034E0 __unwindtable$?SetRatioInfo@CArchiveUpdateCallback@@UAGJPB_K0@Z db 0FFh
.xdata$x:000034E0                                         ; DATA XREF: .xdata$x:0000350Co
.xdata$x:000034E1                 db 0FFh
.xdata$x:000034E2                 db 0FFh
.xdata$x:000034E3                 db 0FFh
.xdata$x:000034E4                 db    0
.xdata$x:000034E5                 db    0
.xdata$x:000034E6                 db    0
.xdata$x:000034E7                 db    0
.xdata$x:000034E8                 db 0FFh
.xdata$x:000034E9                 db 0FFh
.xdata$x:000034EA                 db 0FFh
.xdata$x:000034EB                 db 0FFh
.xdata$x:000034EC                 db    0
.xdata$x:000034ED                 db    0
.xdata$x:000034EE                 db    0
.xdata$x:000034EF                 db    0
.xdata$x:000034F0 __tryblocktable$?SetRatioInfo@CArchiveUpdateCallback@@UAGJPB_K0@Z db    0
.xdata$x:000034F0                                         ; DATA XREF: .xdata$x:00003514o
.xdata$x:000034F1                 db    0
.xdata$x:000034F2                 db    0
.xdata$x:000034F3                 db    0
.xdata$x:000034F4                 db    0
.xdata$x:000034F5                 db    0
.xdata$x:000034F6                 db    0
.xdata$x:000034F7                 db    0
.xdata$x:000034F8                 db    1
.xdata$x:000034F9                 db    0
.xdata$x:000034FA                 db    0
.xdata$x:000034FB                 db    0
.xdata$x:000034FC                 db    1
.xdata$x:000034FD                 db    0
.xdata$x:000034FE                 db    0
.xdata$x:000034FF                 db    0
.xdata$x:00003500                 dd offset __catchsym$?SetRatioInfo@CArchiveUpdateCallback@@UAGJPB_K0@Z$2
.xdata$x:00003504 __ehfuncinfo$?SetRatioInfo@CArchiveUpdateCallback@@UAGJPB_K0@Z db  22h ; "
.xdata$x:00003504                                         ; DATA XREF: __ehhandler$?SetRatioInfo@CArchiveUpdateCallback@@UAGJPB_K0@Z+11o
.xdata$x:00003505                 db    5
.xdata$x:00003506                 db  93h ; ô
.xdata$x:00003507                 db  19h
.xdata$x:00003508                 db    2
.xdata$x:00003509                 db    0
.xdata$x:0000350A                 db    0
.xdata$x:0000350B                 db    0
.xdata$x:0000350C                 dd offset __unwindtable$?SetRatioInfo@CArchiveUpdateCallback@@UAGJPB_K0@Z
.xdata$x:00003510                 db    1
.xdata$x:00003511                 db    0
.xdata$x:00003512                 db    0
.xdata$x:00003513                 db    0
.xdata$x:00003514                 dd offset __tryblocktable$?SetRatioInfo@CArchiveUpdateCallback@@UAGJPB_K0@Z
.xdata$x:00003518                 db    0
.xdata$x:00003519                 db    0
.xdata$x:0000351A                 db    0
.xdata$x:0000351B                 db    0
.xdata$x:0000351C                 db    0
.xdata$x:0000351D                 db    0
.xdata$x:0000351E                 db    0
.xdata$x:0000351F                 db    0
.xdata$x:00003520                 db    0
.xdata$x:00003521                 db    0
.xdata$x:00003522                 db    0
.xdata$x:00003523                 db    0
.xdata$x:00003524                 db    1
.xdata$x:00003525                 db    0
.xdata$x:00003526                 db    0
.xdata$x:00003527                 db    0
.xdata$x:00003528 __catchsym$?GetUpdateItemInfo@CArchiveUpdateCallback@@UAGJIPAH0PAI@Z$2 dd offset loc_3C+4
.xdata$x:00003528                                         ; DATA XREF: .xdata$x:00003558o
.xdata$x:0000352C                 db    0
.xdata$x:0000352D                 db    0
.xdata$x:0000352E                 db    0
.xdata$x:0000352F                 db    0
.xdata$x:00003530                 db    0
.xdata$x:00003531                 db    0
.xdata$x:00003532                 db    0
.xdata$x:00003533                 db    0
.xdata$x:00003534                 dd offset __catch$?GetUpdateItemInfo@CArchiveUpdateCallback@@UAGJIPAH0PAI@Z$0
.xdata$x:00003538 __unwindtable$?GetUpdateItemInfo@CArchiveUpdateCallback@@UAGJIPAH0PAI@Z db 0FFh
.xdata$x:00003538                                         ; DATA XREF: .xdata$x:00003564o
.xdata$x:00003539                 db 0FFh
.xdata$x:0000353A                 db 0FFh
.xdata$x:0000353B                 db 0FFh
.xdata$x:0000353C                 db    0
.xdata$x:0000353D                 db    0
.xdata$x:0000353E                 db    0
.xdata$x:0000353F                 db    0
.xdata$x:00003540                 db 0FFh
.xdata$x:00003541                 db 0FFh
.xdata$x:00003542                 db 0FFh
.xdata$x:00003543                 db 0FFh
.xdata$x:00003544                 db    0
.xdata$x:00003545                 db    0
.xdata$x:00003546                 db    0
.xdata$x:00003547                 db    0
.xdata$x:00003548 __tryblocktable$?GetUpdateItemInfo@CArchiveUpdateCallback@@UAGJIPAH0PAI@Z db    0
.xdata$x:00003548                                         ; DATA XREF: .xdata$x:0000356Co
.xdata$x:00003549                 db    0
.xdata$x:0000354A                 db    0
.xdata$x:0000354B                 db    0
.xdata$x:0000354C                 db    0
.xdata$x:0000354D                 db    0
.xdata$x:0000354E                 db    0
.xdata$x:0000354F                 db    0
.xdata$x:00003550                 db    1
.xdata$x:00003551                 db    0
.xdata$x:00003552                 db    0
.xdata$x:00003553                 db    0
.xdata$x:00003554                 db    1
.xdata$x:00003555                 db    0
.xdata$x:00003556                 db    0
.xdata$x:00003557                 db    0
.xdata$x:00003558                 dd offset __catchsym$?GetUpdateItemInfo@CArchiveUpdateCallback@@UAGJIPAH0PAI@Z$2
.xdata$x:0000355C __ehfuncinfo$?GetUpdateItemInfo@CArchiveUpdateCallback@@UAGJIPAH0PAI@Z db  22h ; "
.xdata$x:0000355C                                         ; DATA XREF: __ehhandler$?GetUpdateItemInfo@CArchiveUpdateCallback@@UAGJIPAH0PAI@Z+11o
.xdata$x:0000355D                 db    5
.xdata$x:0000355E                 db  93h ; ô
.xdata$x:0000355F                 db  19h
.xdata$x:00003560                 db    2
.xdata$x:00003561                 db    0
.xdata$x:00003562                 db    0
.xdata$x:00003563                 db    0
.xdata$x:00003564                 dd offset __unwindtable$?GetUpdateItemInfo@CArchiveUpdateCallback@@UAGJIPAH0PAI@Z
.xdata$x:00003568                 db    1
.xdata$x:00003569                 db    0
.xdata$x:0000356A                 db    0
.xdata$x:0000356B                 db    0
.xdata$x:0000356C                 dd offset __tryblocktable$?GetUpdateItemInfo@CArchiveUpdateCallback@@UAGJIPAH0PAI@Z
.xdata$x:00003570                 db    0
.xdata$x:00003571                 db    0
.xdata$x:00003572                 db    0
.xdata$x:00003573                 db    0
.xdata$x:00003574                 db    0
.xdata$x:00003575                 db    0
.xdata$x:00003576                 db    0
.xdata$x:00003577                 db    0
.xdata$x:00003578                 db    0
.xdata$x:00003579                 db    0
.xdata$x:0000357A                 db    0
.xdata$x:0000357B                 db    0
.xdata$x:0000357C                 db    1
.xdata$x:0000357D                 db    0
.xdata$x:0000357E                 db    0
.xdata$x:0000357F                 db    0
.xdata$x:00003580 __catchsym$?GetProperty@CArchiveUpdateCallback@@UAGJIKPAUtagPROPVARIANT@@@Z$10 dd offset loc_3C+4
.xdata$x:00003580                                         ; DATA XREF: .xdata$x:000035A0o
.xdata$x:00003584                 db    0
.xdata$x:00003585                 db    0
.xdata$x:00003586                 db    0
.xdata$x:00003587                 db    0
.xdata$x:00003588                 db    0
.xdata$x:00003589                 db    0
.xdata$x:0000358A                 db    0
.xdata$x:0000358B                 db    0
.xdata$x:0000358C                 dd offset __catch$?GetProperty@CArchiveUpdateCallback@@UAGJIKPAUtagPROPVARIANT@@@Z$0
.xdata$x:00003590 __tryblocktable$?GetProperty@CArchiveUpdateCallback@@UAGJIKPAUtagPROPVARIANT@@@Z db    0
.xdata$x:00003590                                         ; DATA XREF: .xdata$x:000035B4o
.xdata$x:00003591                 db    0
.xdata$x:00003592                 db    0
.xdata$x:00003593                 db    0
.xdata$x:00003594                 db    8
.xdata$x:00003595                 db    0
.xdata$x:00003596                 db    0
.xdata$x:00003597                 db    0
.xdata$x:00003598                 db    9
.xdata$x:00003599                 db    0
.xdata$x:0000359A                 db    0
.xdata$x:0000359B                 db    0
.xdata$x:0000359C                 db    1
.xdata$x:0000359D                 db    0
.xdata$x:0000359E                 db    0
.xdata$x:0000359F                 db    0
.xdata$x:000035A0                 dd offset __catchsym$?GetProperty@CArchiveUpdateCallback@@UAGJIKPAUtagPROPVARIANT@@@Z$10
.xdata$x:000035A4 __ehfuncinfo$?GetProperty@CArchiveUpdateCallback@@UAGJIKPAUtagPROPVARIANT@@@Z db  22h ; "
.xdata$x:000035A4                                         ; DATA XREF: __ehhandler$?GetProperty@CArchiveUpdateCallback@@UAGJIKPAUtagPROPVARIANT@@@Z+14o
.xdata$x:000035A5                 db    5
.xdata$x:000035A6                 db  93h ; ô
.xdata$x:000035A7                 db  19h
.xdata$x:000035A8                 db  0Ah
.xdata$x:000035A9                 db    0
.xdata$x:000035AA                 db    0
.xdata$x:000035AB                 db    0
.xdata$x:000035AC                 dd offset __unwindtable$?GetProperty@CArchiveUpdateCallback@@UAGJIKPAUtagPROPVARIANT@@@Z
.xdata$x:000035B0                 db    1
.xdata$x:000035B1                 db    0
.xdata$x:000035B2                 db    0
.xdata$x:000035B3                 db    0
.xdata$x:000035B4                 dd offset __tryblocktable$?GetProperty@CArchiveUpdateCallback@@UAGJIKPAUtagPROPVARIANT@@@Z
.xdata$x:000035B8                 db    0
.xdata$x:000035B9                 db    0
.xdata$x:000035BA                 db    0
.xdata$x:000035BB                 db    0
.xdata$x:000035BC                 db    0
.xdata$x:000035BD                 db    0
.xdata$x:000035BE                 db    0
.xdata$x:000035BF                 db    0
.xdata$x:000035C0                 db    0
.xdata$x:000035C1                 db    0
.xdata$x:000035C2                 db    0
.xdata$x:000035C3                 db    0
.xdata$x:000035C4                 db    1
.xdata$x:000035C5                 db    0
.xdata$x:000035C6                 db    0
.xdata$x:000035C7                 db    0
.xdata$x:000035C8 __unwindtable$?GetProperty@CArchiveUpdateCallback@@UAGJIKPAUtagPROPVARIANT@@@Z db 0FFh
.xdata$x:000035C8                                         ; DATA XREF: .xdata$x:000035ACo
.xdata$x:000035C9                 db 0FFh
.xdata$x:000035CA                 db 0FFh
.xdata$x:000035CB                 db 0FFh
.xdata$x:000035CC                 db    0
.xdata$x:000035CD                 db    0
.xdata$x:000035CE                 db    0
.xdata$x:000035CF                 db    0
.xdata$x:000035D0                 db    0
.xdata$x:000035D1                 db    0
.xdata$x:000035D2                 db    0
.xdata$x:000035D3                 db    0
.xdata$x:000035D4                 dd offset __unwindfunclet$?GetProperty@CArchiveUpdateCallback@@UAGJIKPAUtagPROPVARIANT@@@Z$2
.xdata$x:000035D8                 db    1
.xdata$x:000035D9                 db    0
.xdata$x:000035DA                 db    0
.xdata$x:000035DB                 db    0
.xdata$x:000035DC                 dd offset __unwindfunclet$?GetProperty@CArchiveUpdateCallback@@UAGJIKPAUtagPROPVARIANT@@@Z$3
.xdata$x:000035E0                 db    2
.xdata$x:000035E1                 db    0
.xdata$x:000035E2                 db    0
.xdata$x:000035E3                 db    0
.xdata$x:000035E4                 dd offset __unwindfunclet$?GetProperty@CArchiveUpdateCallback@@UAGJIKPAUtagPROPVARIANT@@@Z$4
.xdata$x:000035E8                 db    3
.xdata$x:000035E9                 db    0
.xdata$x:000035EA                 db    0
.xdata$x:000035EB                 db    0
.xdata$x:000035EC                 dd offset __unwindfunclet$?GetProperty@CArchiveUpdateCallback@@UAGJIKPAUtagPROPVARIANT@@@Z$5
.xdata$x:000035F0                 db    4
.xdata$x:000035F1                 db    0
.xdata$x:000035F2                 db    0
.xdata$x:000035F3                 db    0
.xdata$x:000035F4                 dd offset __unwindfunclet$?GetProperty@CArchiveUpdateCallback@@UAGJIKPAUtagPROPVARIANT@@@Z$6
.xdata$x:000035F8                 db    5
.xdata$x:000035F9                 db    0
.xdata$x:000035FA                 db    0
.xdata$x:000035FB                 db    0
.xdata$x:000035FC                 dd offset __unwindfunclet$?GetProperty@CArchiveUpdateCallback@@UAGJIKPAUtagPROPVARIANT@@@Z$7
.xdata$x:00003600                 db    1
.xdata$x:00003601                 db    0
.xdata$x:00003602                 db    0
.xdata$x:00003603                 db    0
.xdata$x:00003604                 dd offset __unwindfunclet$?GetProperty@CArchiveUpdateCallback@@UAGJIKPAUtagPROPVARIANT@@@Z$8
.xdata$x:00003608                 db    1
.xdata$x:00003609                 db    0
.xdata$x:0000360A                 db    0
.xdata$x:0000360B                 db    0
.xdata$x:0000360C                 dd offset __unwindfunclet$?GetProperty@CArchiveUpdateCallback@@UAGJIKPAUtagPROPVARIANT@@@Z$9
.xdata$x:00003610                 db 0FFh
.xdata$x:00003611                 db 0FFh
.xdata$x:00003612                 db 0FFh
.xdata$x:00003613                 db 0FFh
.xdata$x:00003614                 db    0
.xdata$x:00003615                 db    0
.xdata$x:00003616                 db    0
.xdata$x:00003617                 db    0
.xdata$x:00003618 __unwindtable$?GetRelativePath@@YG?AVUString@@ABV1@0@Z db 0FFh
.xdata$x:00003618                                         ; DATA XREF: .xdata$x:00003640o
.xdata$x:00003619                 db 0FFh
.xdata$x:0000361A                 db 0FFh
.xdata$x:0000361B                 db 0FFh
.xdata$x:0000361C                 dd offset __unwindfunclet$?GetRelativePath@@YG?AVUString@@ABV1@0@Z$2
.xdata$x:00003620                 db    0
.xdata$x:00003621                 db    0
.xdata$x:00003622                 db    0
.xdata$x:00003623                 db    0
.xdata$x:00003624                 dd offset __unwindfunclet$?GetRelativePath@@YG?AVUString@@ABV1@0@Z$0
.xdata$x:00003628                 db    1
.xdata$x:00003629                 db    0
.xdata$x:0000362A                 db    0
.xdata$x:0000362B                 db    0
.xdata$x:0000362C                 dd offset __unwindfunclet$?GetRelativePath@@YG?AVUString@@ABV1@0@Z$1
.xdata$x:00003630                 db    2
.xdata$x:00003631                 db    0
.xdata$x:00003632                 db    0
.xdata$x:00003633                 db    0
.xdata$x:00003634                 dd offset __unwindfunclet$?GetRelativePath@@YG?AVUString@@ABV1@0@Z$3
.xdata$x:00003638 __ehfuncinfo$?GetRelativePath@@YG?AVUString@@ABV1@0@Z db  22h ; "
.xdata$x:00003638                                         ; DATA XREF: __ehhandler$?GetRelativePath@@YG?AVUString@@ABV1@0@Z+11o
.xdata$x:00003639                 db    5
.xdata$x:0000363A                 db  93h ; ô
.xdata$x:0000363B                 db  19h
.xdata$x:0000363C                 db    4
.xdata$x:0000363D                 db    0
.xdata$x:0000363E                 db    0
.xdata$x:0000363F                 db    0
.xdata$x:00003640                 dd offset __unwindtable$?GetRelativePath@@YG?AVUString@@ABV1@0@Z
.xdata$x:00003644                 db    0
.xdata$x:00003645                 db    0
.xdata$x:00003646                 db    0
.xdata$x:00003647                 db    0
.xdata$x:00003648                 db    0
.xdata$x:00003649                 db    0
.xdata$x:0000364A                 db    0
.xdata$x:0000364B                 db    0
.xdata$x:0000364C                 db    0
.xdata$x:0000364D                 db    0
.xdata$x:0000364E                 db    0
.xdata$x:0000364F                 db    0
.xdata$x:00003650                 db    0
.xdata$x:00003651                 db    0
.xdata$x:00003652                 db    0
.xdata$x:00003653                 db    0
.xdata$x:00003654                 db    0
.xdata$x:00003655                 db    0
.xdata$x:00003656                 db    0
.xdata$x:00003657                 db    0
.xdata$x:00003658                 db    1
.xdata$x:00003659                 db    0
.xdata$x:0000365A                 db    0
.xdata$x:0000365B                 db    0
.xdata$x:0000365C __catchsym$?GetStream2@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@I@Z$13 dd offset loc_3C+4
.xdata$x:0000365C                                         ; DATA XREF: .xdata$x:0000367Co
.xdata$x:00003660                 db    0
.xdata$x:00003661                 db    0
.xdata$x:00003662                 db    0
.xdata$x:00003663                 db    0
.xdata$x:00003664                 db    0
.xdata$x:00003665                 db    0
.xdata$x:00003666                 db    0
.xdata$x:00003667                 db    0
.xdata$x:00003668                 dd offset __catch$?GetStream2@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@I@Z$0
.xdata$x:0000366C __tryblocktable$?GetStream2@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@I@Z db    0
.xdata$x:0000366C                                         ; DATA XREF: .xdata$x:00003690o
.xdata$x:0000366D                 db    0
.xdata$x:0000366E                 db    0
.xdata$x:0000366F                 db    0
.xdata$x:00003670                 db  0Ah
.xdata$x:00003671                 db    0
.xdata$x:00003672                 db    0
.xdata$x:00003673                 db    0
.xdata$x:00003674                 db  0Bh
.xdata$x:00003675                 db    0
.xdata$x:00003676                 db    0
.xdata$x:00003677                 db    0
.xdata$x:00003678                 db    1
.xdata$x:00003679                 db    0
.xdata$x:0000367A                 db    0
.xdata$x:0000367B                 db    0
.xdata$x:0000367C                 dd offset __catchsym$?GetStream2@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@I@Z$13
.xdata$x:00003680 __ehfuncinfo$?GetStream2@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@I@Z db  22h ; "
.xdata$x:00003680                                         ; DATA XREF: __ehhandler$?GetStream2@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@I@Z+1Eo
.xdata$x:00003681                 db    5
.xdata$x:00003682                 db  93h ; ô
.xdata$x:00003683                 db  19h
.xdata$x:00003684                 db  0Ch
.xdata$x:00003685                 db    0
.xdata$x:00003686                 db    0
.xdata$x:00003687                 db    0
.xdata$x:00003688                 dd offset __unwindtable$?GetStream2@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@I@Z
.xdata$x:0000368C                 db    1
.xdata$x:0000368D                 db    0
.xdata$x:0000368E                 db    0
.xdata$x:0000368F                 db    0
.xdata$x:00003690                 dd offset __tryblocktable$?GetStream2@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@I@Z
.xdata$x:00003694                 align 10h
.xdata$x:000036A0                 db    1
.xdata$x:000036A1                 db    0
.xdata$x:000036A2                 db    0
.xdata$x:000036A3                 db    0
.xdata$x:000036A4 __unwindtable$?GetStream2@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@I@Z db 0FFh
.xdata$x:000036A4                                         ; DATA XREF: .xdata$x:00003688o
.xdata$x:000036A5                 db 0FFh
.xdata$x:000036A6                 db 0FFh
.xdata$x:000036A7                 db 0FFh
.xdata$x:000036A8                 db    0
.xdata$x:000036A9                 db    0
.xdata$x:000036AA                 db    0
.xdata$x:000036AB                 db    0
.xdata$x:000036AC                 db    0
.xdata$x:000036AD                 db    0
.xdata$x:000036AE                 db    0
.xdata$x:000036AF                 db    0
.xdata$x:000036B0                 dd offset __unwindfunclet$?GetStream2@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@I@Z$2
.xdata$x:000036B4                 db    1
.xdata$x:000036B5                 db    0
.xdata$x:000036B6                 db    0
.xdata$x:000036B7                 db    0
.xdata$x:000036B8                 dd offset __unwindfunclet$?GetStream2@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@I@Z$3
.xdata$x:000036BC                 db    1
.xdata$x:000036BD                 db    0
.xdata$x:000036BE                 db    0
.xdata$x:000036BF                 db    0
.xdata$x:000036C0                 dd offset __unwindfunclet$?GetStream2@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@I@Z$4
.xdata$x:000036C4                 db    1
.xdata$x:000036C5                 db    0
.xdata$x:000036C6                 db    0
.xdata$x:000036C7                 db    0
.xdata$x:000036C8                 dd offset __unwindfunclet$?GetStream2@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@I@Z$5
.xdata$x:000036CC                 align 10h
.xdata$x:000036D0                 dd offset __unwindfunclet$?GetStream2@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@I@Z$6
.xdata$x:000036D4                 align 8
.xdata$x:000036D8                 dd offset __unwindfunclet$?GetStream2@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@I@Z$7
.xdata$x:000036DC                 align 10h
.xdata$x:000036E0                 dd offset __unwindfunclet$?GetStream2@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@I@Z$8
.xdata$x:000036E4                 align 8
.xdata$x:000036E8                 dd offset __unwindfunclet$?GetStream2@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@I@Z$9
.xdata$x:000036EC                 align 10h
.xdata$x:000036F0                 dd offset __unwindfunclet$?GetStream2@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@I@Z$10
.xdata$x:000036F4                 db    9
.xdata$x:000036F5                 db    0
.xdata$x:000036F6                 db    0
.xdata$x:000036F7                 db    0
.xdata$x:000036F8                 dd offset __unwindfunclet$?GetStream2@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@I@Z$11
.xdata$x:000036FC                 db 0FFh
.xdata$x:000036FD                 db 0FFh
.xdata$x:000036FE                 db 0FFh
.xdata$x:000036FF                 db 0FFh
.xdata$x:00003700                 db    0
.xdata$x:00003701                 db    0
.xdata$x:00003702                 db    0
.xdata$x:00003703                 db    0
.xdata$x:00003704 __catchsym$?SetOperationResult@CArchiveUpdateCallback@@UAGJH@Z$2 dd offset loc_3C+4
.xdata$x:00003704                                         ; DATA XREF: .xdata$x:00003734o
.xdata$x:00003708                 align 10h
.xdata$x:00003710                 dd offset __catch$?SetOperationResult@CArchiveUpdateCallback@@UAGJH@Z$0
.xdata$x:00003714 __unwindtable$?SetOperationResult@CArchiveUpdateCallback@@UAGJH@Z db 0FFh
.xdata$x:00003714                                         ; DATA XREF: .xdata$x:00003740o
.xdata$x:00003715                 db 0FFh
.xdata$x:00003716                 db 0FFh
.xdata$x:00003717                 db 0FFh
.xdata$x:00003718                 db    0
.xdata$x:00003719                 db    0
.xdata$x:0000371A                 db    0
.xdata$x:0000371B                 db    0
.xdata$x:0000371C                 db 0FFh
.xdata$x:0000371D                 db 0FFh
.xdata$x:0000371E                 db 0FFh
.xdata$x:0000371F                 db 0FFh
.xdata$x:00003720                 db    0
.xdata$x:00003721                 db    0
.xdata$x:00003722                 db    0
.xdata$x:00003723                 db    0
.xdata$x:00003724 __tryblocktable$?SetOperationResult@CArchiveUpdateCallback@@UAGJH@Z db    0
.xdata$x:00003724                                         ; DATA XREF: .xdata$x:00003748o
.xdata$x:00003725                 db    0
.xdata$x:00003726                 db    0
.xdata$x:00003727                 db    0
.xdata$x:00003728                 db    0
.xdata$x:00003729                 db    0
.xdata$x:0000372A                 db    0
.xdata$x:0000372B                 db    0
.xdata$x:0000372C                 db    1
.xdata$x:0000372D                 db    0
.xdata$x:0000372E                 db    0
.xdata$x:0000372F                 db    0
.xdata$x:00003730                 db    1
.xdata$x:00003731                 db    0
.xdata$x:00003732                 db    0
.xdata$x:00003733                 db    0
.xdata$x:00003734                 dd offset __catchsym$?SetOperationResult@CArchiveUpdateCallback@@UAGJH@Z$2
.xdata$x:00003738 __ehfuncinfo$?SetOperationResult@CArchiveUpdateCallback@@UAGJH@Z db  22h ; "
.xdata$x:00003738                                         ; DATA XREF: __ehhandler$?SetOperationResult@CArchiveUpdateCallback@@UAGJH@Z+11o
.xdata$x:00003739                 db    5
.xdata$x:0000373A                 db  93h ; ô
.xdata$x:0000373B                 db  19h
.xdata$x:0000373C                 db    2
.xdata$x:0000373D                 db    0
.xdata$x:0000373E                 db    0
.xdata$x:0000373F                 db    0
.xdata$x:00003740                 dd offset __unwindtable$?SetOperationResult@CArchiveUpdateCallback@@UAGJH@Z
.xdata$x:00003744                 db    1
.xdata$x:00003745                 db    0
.xdata$x:00003746                 db    0
.xdata$x:00003747                 db    0
.xdata$x:00003748                 dd offset __tryblocktable$?SetOperationResult@CArchiveUpdateCallback@@UAGJH@Z
.xdata$x:0000374C                 db    0
.xdata$x:0000374D                 db    0
.xdata$x:0000374E                 db    0
.xdata$x:0000374F                 db    0
.xdata$x:00003750                 db    0
.xdata$x:00003751                 db    0
.xdata$x:00003752                 db    0
.xdata$x:00003753                 db    0
.xdata$x:00003754                 db    0
.xdata$x:00003755                 db    0
.xdata$x:00003756                 db    0
.xdata$x:00003757                 db    0
.xdata$x:00003758                 db    1
.xdata$x:00003759                 db    0
.xdata$x:0000375A                 db    0
.xdata$x:0000375B                 db    0
.xdata$x:0000375C __catchsym$?GetStream@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@@Z$2 dd offset loc_3C+4
.xdata$x:0000375C                                         ; DATA XREF: .xdata$x:0000378Co
.xdata$x:00003760                 db    0
.xdata$x:00003761                 db    0
.xdata$x:00003762                 db    0
.xdata$x:00003763                 db    0
.xdata$x:00003764                 db    0
.xdata$x:00003765                 db    0
.xdata$x:00003766                 db    0
.xdata$x:00003767                 db    0
.xdata$x:00003768                 dd offset __catch$?GetStream@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@@Z$0
.xdata$x:0000376C __unwindtable$?GetStream@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@@Z db 0FFh
.xdata$x:0000376C                                         ; DATA XREF: .xdata$x:00003798o
.xdata$x:0000376D                 db 0FFh
.xdata$x:0000376E                 db 0FFh
.xdata$x:0000376F                 db 0FFh
.xdata$x:00003770                 db    0
.xdata$x:00003771                 db    0
.xdata$x:00003772                 db    0
.xdata$x:00003773                 db    0
.xdata$x:00003774                 db 0FFh
.xdata$x:00003775                 db 0FFh
.xdata$x:00003776                 db 0FFh
.xdata$x:00003777                 db 0FFh
.xdata$x:00003778                 db    0
.xdata$x:00003779                 db    0
.xdata$x:0000377A                 db    0
.xdata$x:0000377B                 db    0
.xdata$x:0000377C __tryblocktable$?GetStream@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@@Z db    0
.xdata$x:0000377C                                         ; DATA XREF: .xdata$x:000037A0o
.xdata$x:0000377D                 db    0
.xdata$x:0000377E                 db    0
.xdata$x:0000377F                 db    0
.xdata$x:00003780                 db    0
.xdata$x:00003781                 db    0
.xdata$x:00003782                 db    0
.xdata$x:00003783                 db    0
.xdata$x:00003784                 db    1
.xdata$x:00003785                 db    0
.xdata$x:00003786                 db    0
.xdata$x:00003787                 db    0
.xdata$x:00003788                 db    1
.xdata$x:00003789                 db    0
.xdata$x:0000378A                 db    0
.xdata$x:0000378B                 db    0
.xdata$x:0000378C                 dd offset __catchsym$?GetStream@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@@Z$2
.xdata$x:00003790 __ehfuncinfo$?GetStream@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@@Z db  22h ; "
.xdata$x:00003790                                         ; DATA XREF: __ehhandler$?GetStream@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@@Z+11o
.xdata$x:00003791                 db    5
.xdata$x:00003792                 db  93h ; ô
.xdata$x:00003793                 db  19h
.xdata$x:00003794                 db    2
.xdata$x:00003795                 db    0
.xdata$x:00003796                 db    0
.xdata$x:00003797                 db    0
.xdata$x:00003798                 dd offset __unwindtable$?GetStream@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@@Z
.xdata$x:0000379C                 db    1
.xdata$x:0000379D                 db    0
.xdata$x:0000379E                 db    0
.xdata$x:0000379F                 db    0
.xdata$x:000037A0                 dd offset __tryblocktable$?GetStream@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@@Z
.xdata$x:000037A4                 align 10h
.xdata$x:000037B0                 db    1
.xdata$x:000037B1                 db    0
.xdata$x:000037B2                 db    0
.xdata$x:000037B3                 db    0
.xdata$x:000037B4 __catchsym$?ReportOperation@CArchiveUpdateCallback@@UAGJIII@Z$5 dd offset loc_3C+4
.xdata$x:000037B4                                         ; DATA XREF: .xdata$x:000037D4o
.xdata$x:000037B8                 align 10h
.xdata$x:000037C0                 dd offset __catch$?ReportOperation@CArchiveUpdateCallback@@UAGJIII@Z$0
.xdata$x:000037C4 __tryblocktable$?ReportOperation@CArchiveUpdateCallback@@UAGJIII@Z db    0
.xdata$x:000037C4                                         ; DATA XREF: .xdata$x:000037E8o
.xdata$x:000037C5                 db    0
.xdata$x:000037C6                 db    0
.xdata$x:000037C7                 db    0
.xdata$x:000037C8                 db    3
.xdata$x:000037C9                 db    0
.xdata$x:000037CA                 db    0
.xdata$x:000037CB                 db    0
.xdata$x:000037CC                 db    4
.xdata$x:000037CD                 db    0
.xdata$x:000037CE                 db    0
.xdata$x:000037CF                 db    0
.xdata$x:000037D0                 db    1
.xdata$x:000037D1                 db    0
.xdata$x:000037D2                 db    0
.xdata$x:000037D3                 db    0
.xdata$x:000037D4                 dd offset __catchsym$?ReportOperation@CArchiveUpdateCallback@@UAGJIII@Z$5
.xdata$x:000037D8 __ehfuncinfo$?ReportOperation@CArchiveUpdateCallback@@UAGJIII@Z db  22h ; "
.xdata$x:000037D8                                         ; DATA XREF: __ehhandler$?ReportOperation@CArchiveUpdateCallback@@UAGJIII@Z+1Eo
.xdata$x:000037D9                 db    5
.xdata$x:000037DA                 db  93h ; ô
.xdata$x:000037DB                 db  19h
.xdata$x:000037DC                 db    5
.xdata$x:000037DD                 db    0
.xdata$x:000037DE                 db    0
.xdata$x:000037DF                 db    0
.xdata$x:000037E0                 dd offset __unwindtable$?ReportOperation@CArchiveUpdateCallback@@UAGJIII@Z
.xdata$x:000037E4                 db    1
.xdata$x:000037E5                 db    0
.xdata$x:000037E6                 db    0
.xdata$x:000037E7                 db    0
.xdata$x:000037E8                 dd offset __tryblocktable$?ReportOperation@CArchiveUpdateCallback@@UAGJIII@Z
.xdata$x:000037EC                 db    0
.xdata$x:000037ED                 db    0
.xdata$x:000037EE                 db    0
.xdata$x:000037EF                 db    0
.xdata$x:000037F0                 db    0
.xdata$x:000037F1                 db    0
.xdata$x:000037F2                 db    0
.xdata$x:000037F3                 db    0
.xdata$x:000037F4                 db    0
.xdata$x:000037F5                 db    0
.xdata$x:000037F6                 db    0
.xdata$x:000037F7                 db    0
.xdata$x:000037F8                 db    1
.xdata$x:000037F9                 db    0
.xdata$x:000037FA                 db    0
.xdata$x:000037FB                 db    0
.xdata$x:000037FC __unwindtable$?ReportOperation@CArchiveUpdateCallback@@UAGJIII@Z db 0FFh
.xdata$x:000037FC                                         ; DATA XREF: .xdata$x:000037E0o
.xdata$x:000037FD                 db 0FFh
.xdata$x:000037FE                 db 0FFh
.xdata$x:000037FF                 db 0FFh
.xdata$x:00003800                 db    0
.xdata$x:00003801                 db    0
.xdata$x:00003802                 db    0
.xdata$x:00003803                 db    0
.xdata$x:00003804                 db    0
.xdata$x:00003805                 db    0
.xdata$x:00003806                 db    0
.xdata$x:00003807                 db    0
.xdata$x:00003808                 dd offset __unwindfunclet$?ReportOperation@CArchiveUpdateCallback@@UAGJIII@Z$2
.xdata$x:0000380C                 db    1
.xdata$x:0000380D                 db    0
.xdata$x:0000380E                 db    0
.xdata$x:0000380F                 db    0
.xdata$x:00003810                 dd offset __unwindfunclet$?ReportOperation@CArchiveUpdateCallback@@UAGJIII@Z$3
.xdata$x:00003814                 align 8
.xdata$x:00003818                 dd offset __unwindfunclet$?ReportOperation@CArchiveUpdateCallback@@UAGJIII@Z$4
.xdata$x:0000381C                 db 0FFh
.xdata$x:0000381D                 db 0FFh
.xdata$x:0000381E                 db 0FFh
.xdata$x:0000381F                 db 0FFh
.xdata$x:00003820                 db    0
.xdata$x:00003821                 db    0
.xdata$x:00003822                 db    0
.xdata$x:00003823                 db    0
.xdata$x:00003824 __catchsym$?ReportExtractResult@CArchiveUpdateCallback@@UAGJIIH@Z$3 dd offset loc_3C+4
.xdata$x:00003824                                         ; DATA XREF: .xdata$x:00003844o
.xdata$x:00003828                 align 10h
.xdata$x:00003830                 dd offset __catch$?ReportExtractResult@CArchiveUpdateCallback@@UAGJIIH@Z$0
.xdata$x:00003834 __tryblocktable$?ReportExtractResult@CArchiveUpdateCallback@@UAGJIIH@Z db    0
.xdata$x:00003834                                         ; DATA XREF: .xdata$x:00003870o
.xdata$x:00003835                 db    0
.xdata$x:00003836                 db    0
.xdata$x:00003837                 db    0
.xdata$x:00003838                 db    1
.xdata$x:00003839                 db    0
.xdata$x:0000383A                 db    0
.xdata$x:0000383B                 db    0
.xdata$x:0000383C                 db    2
.xdata$x:0000383D                 db    0
.xdata$x:0000383E                 db    0
.xdata$x:0000383F                 db    0
.xdata$x:00003840                 db    1
.xdata$x:00003841                 db    0
.xdata$x:00003842                 db    0
.xdata$x:00003843                 db    0
.xdata$x:00003844                 dd offset __catchsym$?ReportExtractResult@CArchiveUpdateCallback@@UAGJIIH@Z$3
.xdata$x:00003848 __unwindtable$?ReportExtractResult@CArchiveUpdateCallback@@UAGJIIH@Z db 0FFh
.xdata$x:00003848                                         ; DATA XREF: .xdata$x:00003868o
.xdata$x:00003849                 db 0FFh
.xdata$x:0000384A                 db 0FFh
.xdata$x:0000384B                 db 0FFh
.xdata$x:0000384C                 db    0
.xdata$x:0000384D                 db    0
.xdata$x:0000384E                 db    0
.xdata$x:0000384F                 db    0
.xdata$x:00003850                 db    0
.xdata$x:00003851                 db    0
.xdata$x:00003852                 db    0
.xdata$x:00003853                 db    0
.xdata$x:00003854                 dd offset __unwindfunclet$?ReportExtractResult@CArchiveUpdateCallback@@UAGJIIH@Z$2
.xdata$x:00003858                 db 0FFh
.xdata$x:00003859                 db 0FFh
.xdata$x:0000385A                 db 0FFh
.xdata$x:0000385B                 db 0FFh
.xdata$x:0000385C                 db    0
.xdata$x:0000385D                 db    0
.xdata$x:0000385E                 db    0
.xdata$x:0000385F                 db    0
.xdata$x:00003860 __ehfuncinfo$?ReportExtractResult@CArchiveUpdateCallback@@UAGJIIH@Z db  22h ; "
.xdata$x:00003860                                         ; DATA XREF: __ehhandler$?ReportExtractResult@CArchiveUpdateCallback@@UAGJIIH@Z+1Eo
.xdata$x:00003861                 db    5
.xdata$x:00003862                 db  93h ; ô
.xdata$x:00003863                 db  19h
.xdata$x:00003864                 db    3
.xdata$x:00003865                 db    0
.xdata$x:00003866                 db    0
.xdata$x:00003867                 db    0
.xdata$x:00003868                 dd offset __unwindtable$?ReportExtractResult@CArchiveUpdateCallback@@UAGJIIH@Z
.xdata$x:0000386C                 db    1
.xdata$x:0000386D                 db    0
.xdata$x:0000386E                 db    0
.xdata$x:0000386F                 db    0
.xdata$x:00003870                 dd offset __tryblocktable$?ReportExtractResult@CArchiveUpdateCallback@@UAGJIIH@Z
.xdata$x:00003874                 align 10h
.xdata$x:00003880                 db    1
.xdata$x:00003881                 db    0
.xdata$x:00003882                 db    0
.xdata$x:00003883                 db    0
.xdata$x:00003884 __catchsym$?GetVolumeStream@CArchiveUpdateCallback@@UAGJIPAPAUISequentialOutStream@@@Z$6 dd offset loc_3C+4
.xdata$x:00003884                                         ; DATA XREF: .xdata$x:000038A4o
.xdata$x:00003888                 align 10h
.xdata$x:00003890                 dd offset __catch$?GetVolumeStream@CArchiveUpdateCallback@@UAGJIPAPAUISequentialOutStream@@@Z$0
.xdata$x:00003894 __tryblocktable$?GetVolumeStream@CArchiveUpdateCallback@@UAGJIPAPAUISequentialOutStream@@@Z db    0
.xdata$x:00003894                                         ; DATA XREF: .xdata$x:000038B8o
.xdata$x:00003895                 db    0
.xdata$x:00003896                 db    0
.xdata$x:00003897                 db    0
.xdata$x:00003898                 db    4
.xdata$x:00003899                 db    0
.xdata$x:0000389A                 db    0
.xdata$x:0000389B                 db    0
.xdata$x:0000389C                 db    5
.xdata$x:0000389D                 db    0
.xdata$x:0000389E                 db    0
.xdata$x:0000389F                 db    0
.xdata$x:000038A0                 db    1
.xdata$x:000038A1                 db    0
.xdata$x:000038A2                 db    0
.xdata$x:000038A3                 db    0
.xdata$x:000038A4                 dd offset __catchsym$?GetVolumeStream@CArchiveUpdateCallback@@UAGJIPAPAUISequentialOutStream@@@Z$6
.xdata$x:000038A8 __ehfuncinfo$?GetVolumeStream@CArchiveUpdateCallback@@UAGJIPAPAUISequentialOutStream@@@Z db  22h ; "
.xdata$x:000038A8                                         ; DATA XREF: __ehhandler$?GetVolumeStream@CArchiveUpdateCallback@@UAGJIPAPAUISequentialOutStream@@@Z+1Eo
.xdata$x:000038A9                 db    5
.xdata$x:000038AA                 db  93h ; ô
.xdata$x:000038AB                 db  19h
.xdata$x:000038AC                 db    6
.xdata$x:000038AD                 db    0
.xdata$x:000038AE                 db    0
.xdata$x:000038AF                 db    0
.xdata$x:000038B0                 dd offset __unwindtable$?GetVolumeStream@CArchiveUpdateCallback@@UAGJIPAPAUISequentialOutStream@@@Z
.xdata$x:000038B4                 db    1
.xdata$x:000038B5                 db    0
.xdata$x:000038B6                 db    0
.xdata$x:000038B7                 db    0
.xdata$x:000038B8                 dd offset __tryblocktable$?GetVolumeStream@CArchiveUpdateCallback@@UAGJIPAPAUISequentialOutStream@@@Z
.xdata$x:000038BC                 db    0
.xdata$x:000038BD                 db    0
.xdata$x:000038BE                 db    0
.xdata$x:000038BF                 db    0
.xdata$x:000038C0                 db    0
.xdata$x:000038C1                 db    0
.xdata$x:000038C2                 db    0
.xdata$x:000038C3                 db    0
.xdata$x:000038C4                 db    0
.xdata$x:000038C5                 db    0
.xdata$x:000038C6                 db    0
.xdata$x:000038C7                 db    0
.xdata$x:000038C8                 db    1
.xdata$x:000038C9                 db    0
.xdata$x:000038CA                 db    0
.xdata$x:000038CB                 db    0
.xdata$x:000038CC __unwindtable$?GetVolumeStream@CArchiveUpdateCallback@@UAGJIPAPAUISequentialOutStream@@@Z db 0FFh
.xdata$x:000038CC                                         ; DATA XREF: .xdata$x:000038B0o
.xdata$x:000038CD                 db 0FFh
.xdata$x:000038CE                 db 0FFh
.xdata$x:000038CF                 db 0FFh
.xdata$x:000038D0                 db    0
.xdata$x:000038D1                 db    0
.xdata$x:000038D2                 db    0
.xdata$x:000038D3                 db    0
.xdata$x:000038D4                 db    0
.xdata$x:000038D5                 db    0
.xdata$x:000038D6                 db    0
.xdata$x:000038D7                 db    0
.xdata$x:000038D8                 dd offset __unwindfunclet$?GetVolumeStream@CArchiveUpdateCallback@@UAGJIPAPAUISequentialOutStream@@@Z$2
.xdata$x:000038DC                 db    1
.xdata$x:000038DD                 db    0
.xdata$x:000038DE                 db    0
.xdata$x:000038DF                 db    0
.xdata$x:000038E0                 dd offset __unwindfunclet$?GetVolumeStream@CArchiveUpdateCallback@@UAGJIPAPAUISequentialOutStream@@@Z$3
.xdata$x:000038E4                 db    2
.xdata$x:000038E5                 db    0
.xdata$x:000038E6                 db    0
.xdata$x:000038E7                 db    0
.xdata$x:000038E8                 dd offset __unwindfunclet$?GetVolumeStream@CArchiveUpdateCallback@@UAGJIPAPAUISequentialOutStream@@@Z$4
.xdata$x:000038EC                 db    2
.xdata$x:000038ED                 db    0
.xdata$x:000038EE                 db    0
.xdata$x:000038EF                 db    0
.xdata$x:000038F0                 dd offset __unwindfunclet$?GetVolumeStream@CArchiveUpdateCallback@@UAGJIPAPAUISequentialOutStream@@@Z$5
.xdata$x:000038F4                 db 0FFh
.xdata$x:000038F5                 db 0FFh
.xdata$x:000038F6                 db 0FFh
.xdata$x:000038F7                 db 0FFh
.xdata$x:000038F8                 db    0
.xdata$x:000038F9                 db    0
.xdata$x:000038FA                 db    0
.xdata$x:000038FB                 db    0
.xdata$x:000038FC __catchsym$?CryptoGetTextPassword2@CArchiveUpdateCallback@@UAGJPAHPAPA_W@Z$2 dd offset loc_3C+4
.xdata$x:000038FC                                         ; DATA XREF: .xdata$x:0000392Co
.xdata$x:00003900                 db    0
.xdata$x:00003901                 db    0
.xdata$x:00003902                 db    0
.xdata$x:00003903                 db    0
.xdata$x:00003904                 db    0
.xdata$x:00003905                 db    0
.xdata$x:00003906                 db    0
.xdata$x:00003907                 db    0
.xdata$x:00003908                 dd offset __catch$?CryptoGetTextPassword2@CArchiveUpdateCallback@@UAGJPAHPAPA_W@Z$0
.xdata$x:0000390C __unwindtable$?CryptoGetTextPassword2@CArchiveUpdateCallback@@UAGJPAHPAPA_W@Z db 0FFh
.xdata$x:0000390C                                         ; DATA XREF: .xdata$x:00003938o
.xdata$x:0000390D                 db 0FFh
.xdata$x:0000390E                 db 0FFh
.xdata$x:0000390F                 db 0FFh
.xdata$x:00003910                 db    0
.xdata$x:00003911                 db    0
.xdata$x:00003912                 db    0
.xdata$x:00003913                 db    0
.xdata$x:00003914                 db 0FFh
.xdata$x:00003915                 db 0FFh
.xdata$x:00003916                 db 0FFh
.xdata$x:00003917                 db 0FFh
.xdata$x:00003918                 db    0
.xdata$x:00003919                 db    0
.xdata$x:0000391A                 db    0
.xdata$x:0000391B                 db    0
.xdata$x:0000391C __tryblocktable$?CryptoGetTextPassword2@CArchiveUpdateCallback@@UAGJPAHPAPA_W@Z db    0
.xdata$x:0000391C                                         ; DATA XREF: .xdata$x:00003940o
.xdata$x:0000391D                 db    0
.xdata$x:0000391E                 db    0
.xdata$x:0000391F                 db    0
.xdata$x:00003920                 db    0
.xdata$x:00003921                 db    0
.xdata$x:00003922                 db    0
.xdata$x:00003923                 db    0
.xdata$x:00003924                 db    1
.xdata$x:00003925                 db    0
.xdata$x:00003926                 db    0
.xdata$x:00003927                 db    0
.xdata$x:00003928                 db    1
.xdata$x:00003929                 db    0
.xdata$x:0000392A                 db    0
.xdata$x:0000392B                 db    0
.xdata$x:0000392C                 dd offset __catchsym$?CryptoGetTextPassword2@CArchiveUpdateCallback@@UAGJPAHPAPA_W@Z$2
.xdata$x:00003930 __ehfuncinfo$?CryptoGetTextPassword2@CArchiveUpdateCallback@@UAGJPAHPAPA_W@Z db  22h ; "
.xdata$x:00003930                                         ; DATA XREF: __ehhandler$?CryptoGetTextPassword2@CArchiveUpdateCallback@@UAGJPAHPAPA_W@Z+11o
.xdata$x:00003931                 db    5
.xdata$x:00003932                 db  93h ; ô
.xdata$x:00003933                 db  19h
.xdata$x:00003934                 db    2
.xdata$x:00003935                 db    0
.xdata$x:00003936                 db    0
.xdata$x:00003937                 db    0
.xdata$x:00003938                 dd offset __unwindtable$?CryptoGetTextPassword2@CArchiveUpdateCallback@@UAGJPAHPAPA_W@Z
.xdata$x:0000393C                 db    1
.xdata$x:0000393D                 db    0
.xdata$x:0000393E                 db    0
.xdata$x:0000393F                 db    0
.xdata$x:00003940                 dd offset __tryblocktable$?CryptoGetTextPassword2@CArchiveUpdateCallback@@UAGJPAHPAPA_W@Z
.xdata$x:00003944                 align 10h
.xdata$x:00003950                 db    1
.xdata$x:00003951                 db    0
.xdata$x:00003952                 db    0
.xdata$x:00003953                 db    0
.xdata$x:00003954 __catchsym$?CryptoGetTextPassword@CArchiveUpdateCallback@@UAGJPAPA_W@Z$2 dd offset loc_3C+4
.xdata$x:00003954                                         ; DATA XREF: .xdata$x:00003984o
.xdata$x:00003958                 align 10h
.xdata$x:00003960                 dd offset __catch$?CryptoGetTextPassword@CArchiveUpdateCallback@@UAGJPAPA_W@Z$0
.xdata$x:00003964 __unwindtable$?CryptoGetTextPassword@CArchiveUpdateCallback@@UAGJPAPA_W@Z db 0FFh
.xdata$x:00003964                                         ; DATA XREF: .xdata$x:00003990o
.xdata$x:00003965                 db 0FFh
.xdata$x:00003966                 db 0FFh
.xdata$x:00003967                 db 0FFh
.xdata$x:00003968                 db    0
.xdata$x:00003969                 db    0
.xdata$x:0000396A                 db    0
.xdata$x:0000396B                 db    0
.xdata$x:0000396C                 db 0FFh
.xdata$x:0000396D                 db 0FFh
.xdata$x:0000396E                 db 0FFh
.xdata$x:0000396F                 db 0FFh
.xdata$x:00003970                 db    0
.xdata$x:00003971                 db    0
.xdata$x:00003972                 db    0
.xdata$x:00003973                 db    0
.xdata$x:00003974 __tryblocktable$?CryptoGetTextPassword@CArchiveUpdateCallback@@UAGJPAPA_W@Z db    0
.xdata$x:00003974                                         ; DATA XREF: .xdata$x:00003998o
.xdata$x:00003975                 db    0
.xdata$x:00003976                 db    0
.xdata$x:00003977                 db    0
.xdata$x:00003978                 db    0
.xdata$x:00003979                 db    0
.xdata$x:0000397A                 db    0
.xdata$x:0000397B                 db    0
.xdata$x:0000397C                 db    1
.xdata$x:0000397D                 db    0
.xdata$x:0000397E                 db    0
.xdata$x:0000397F                 db    0
.xdata$x:00003980                 db    1
.xdata$x:00003981                 db    0
.xdata$x:00003982                 db    0
.xdata$x:00003983                 db    0
.xdata$x:00003984                 dd offset __catchsym$?CryptoGetTextPassword@CArchiveUpdateCallback@@UAGJPAPA_W@Z$2
.xdata$x:00003988 __ehfuncinfo$?CryptoGetTextPassword@CArchiveUpdateCallback@@UAGJPAPA_W@Z db  22h ; "
.xdata$x:00003988                                         ; DATA XREF: __ehhandler$?CryptoGetTextPassword@CArchiveUpdateCallback@@UAGJPAPA_W@Z+11o
.xdata$x:00003989                 db    5
.xdata$x:0000398A                 db  93h ; ô
.xdata$x:0000398B                 db  19h
.xdata$x:0000398C                 db    2
.xdata$x:0000398D                 db    0
.xdata$x:0000398E                 db    0
.xdata$x:0000398F                 db    0
.xdata$x:00003990                 dd offset __unwindtable$?CryptoGetTextPassword@CArchiveUpdateCallback@@UAGJPAPA_W@Z
.xdata$x:00003994                 db    1
.xdata$x:00003995                 db    0
.xdata$x:00003996                 db    0
.xdata$x:00003997                 db    0
.xdata$x:00003998                 dd offset __tryblocktable$?CryptoGetTextPassword@CArchiveUpdateCallback@@UAGJPAPA_W@Z
.xdata$x:0000399C                 db    0
.xdata$x:0000399D                 db    0
.xdata$x:0000399E                 db    0
.xdata$x:0000399F                 db    0
.xdata$x:000039A0                 db    0
.xdata$x:000039A1                 db    0
.xdata$x:000039A2                 db    0
.xdata$x:000039A3                 db    0
.xdata$x:000039A4                 db    0
.xdata$x:000039A5                 db    0
.xdata$x:000039A6                 db    0
.xdata$x:000039A7                 db    0
.xdata$x:000039A8                 db    1
.xdata$x:000039A9                 db    0
.xdata$x:000039AA                 db    0
.xdata$x:000039AB                 db    0
.xdata$x:000039AC __unwindtable$?InFileStream_On_Error@CArchiveUpdateCallback@@UAEJIK@Z db 0FFh
.xdata$x:000039AC                                         ; DATA XREF: .xdata$x:000039BCo
.xdata$x:000039AD                 db 0FFh
.xdata$x:000039AE                 db 0FFh
.xdata$x:000039AF                 db 0FFh
.xdata$x:000039B0                 dd offset __unwindfunclet$?InFileStream_On_Error@CArchiveUpdateCallback@@UAEJIK@Z$0
.xdata$x:000039B4 __ehfuncinfo$?InFileStream_On_Error@CArchiveUpdateCallback@@UAEJIK@Z db  22h ; "
.xdata$x:000039B4                                         ; DATA XREF: __ehhandler$?InFileStream_On_Error@CArchiveUpdateCallback@@UAEJIK@Z+11o
.xdata$x:000039B5                 db    5
.xdata$x:000039B6                 db  93h ; ô
.xdata$x:000039B7                 db  19h
.xdata$x:000039B8                 db    1
.xdata$x:000039B9                 db    0
.xdata$x:000039BA                 db    0
.xdata$x:000039BB                 db    0
.xdata$x:000039BC                 dd offset __unwindtable$?InFileStream_On_Error@CArchiveUpdateCallback@@UAEJIK@Z
.xdata$x:000039C0                 db    0
.xdata$x:000039C1                 db    0
.xdata$x:000039C2                 db    0
.xdata$x:000039C3                 db    0
.xdata$x:000039C4                 db    0
.xdata$x:000039C5                 db    0
.xdata$x:000039C6                 db    0
.xdata$x:000039C7                 db    0
.xdata$x:000039C8                 db    0
.xdata$x:000039C9                 db    0
.xdata$x:000039CA                 db    0
.xdata$x:000039CB                 db    0
.xdata$x:000039CC                 db    0
.xdata$x:000039CD                 db    0
.xdata$x:000039CE                 db    0
.xdata$x:000039CF                 db    0
.xdata$x:000039D0                 db    0
.xdata$x:000039D1                 db    0
.xdata$x:000039D2                 db    0
.xdata$x:000039D3                 db    0
.xdata$x:000039D4                 db    1
.xdata$x:000039D5                 db    0
.xdata$x:000039D6                 db    0
.xdata$x:000039D7                 db    0
.xdata$x:000039D8 __unwindtable$?InFileStream_On_Destroy@CArchiveUpdateCallback@@UAEXI@Z db 0FFh
.xdata$x:000039D8                                         ; DATA XREF: .xdata$x:000039E8o
.xdata$x:000039D9                 db 0FFh
.xdata$x:000039DA                 db 0FFh
.xdata$x:000039DB                 db 0FFh
.xdata$x:000039DC                 dd offset __unwindfunclet$?InFileStream_On_Destroy@CArchiveUpdateCallback@@UAEXI@Z$0
.xdata$x:000039E0 __ehfuncinfo$?InFileStream_On_Destroy@CArchiveUpdateCallback@@UAEXI@Z db  22h ; "
.xdata$x:000039E0                                         ; DATA XREF: __ehhandler$?InFileStream_On_Destroy@CArchiveUpdateCallback@@UAEXI@Z+11o
.xdata$x:000039E1                 db    5
.xdata$x:000039E2                 db  93h ; ô
.xdata$x:000039E3                 db  19h
.xdata$x:000039E4                 db    1
.xdata$x:000039E5                 db    0
.xdata$x:000039E6                 db    0
.xdata$x:000039E7                 db    0
.xdata$x:000039E8                 dd offset __unwindtable$?InFileStream_On_Destroy@CArchiveUpdateCallback@@UAEXI@Z
.xdata$x:000039EC                 align 20h
.xdata$x:00003A00                 db    1
.xdata$x:00003A01                 db    0
.xdata$x:00003A02                 db    0
.xdata$x:00003A03                 db    0
.xdata$x:00003A03 _xdata$x        ends
.xdata$x:00003A03
.rtc$TMZ:00003A04 ; ===========================================================================
.rtc$TMZ:00003A04
.rtc$TMZ:00003A04 ; Segment type: Pure data
.rtc$TMZ:00003A04 ; Segment permissions: Read
.rtc$TMZ:00003A04 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00003A04                 assume cs:_rtc$TMZ
.rtc$TMZ:00003A04                 ;org 3A04h
.rtc$TMZ:00003A04 ; COMDAT (pick any)
.rtc$TMZ:00003A04 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00003A04 _rtc$TMZ        ends
.rtc$TMZ:00003A04
.rtc$IMZ:00003A08 ; ===========================================================================
.rtc$IMZ:00003A08
.rtc$IMZ:00003A08 ; Segment type: Pure data
.rtc$IMZ:00003A08 ; Segment permissions: Read
.rtc$IMZ:00003A08 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00003A08                 assume cs:_rtc$IMZ
.rtc$IMZ:00003A08                 ;org 3A08h
.rtc$IMZ:00003A08 ; COMDAT (pick any)
.rtc$IMZ:00003A08 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00003A08 _rtc$IMZ        ends
.rtc$IMZ:00003A08
.rdata$r:00003A0C ; ===========================================================================
.rdata$r:00003A0C
.rdata$r:00003A0C ; Segment type: Pure data
.rdata$r:00003A0C ; Segment permissions: Read
.rdata$r:00003A0C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003A0C                 assume cs:_rdata$r
.rdata$r:00003A0C                 ;org 3A0Ch
.rdata$r:00003A0C ; COMDAT (pick any)
.rdata$r:00003A0C                 public ??_R4CArchiveUpdateCallback@@6BIArchiveUpdateCallback2@@@
.rdata$r:00003A0C ; const CArchiveUpdateCallback::`RTTI Complete Object Locator'{for `IArchiveUpdateCallback2'}
.rdata$r:00003A0C ??_R4CArchiveUpdateCallback@@6BIArchiveUpdateCallback2@@@ db    0
.rdata$r:00003A0C                                         ; DATA XREF: .rdata:00003394o
.rdata$r:00003A0D                 db    0
.rdata$r:00003A0E                 db    0
.rdata$r:00003A0F                 db    0
.rdata$r:00003A10                 db    0
.rdata$r:00003A11                 db    0
.rdata$r:00003A12                 db    0
.rdata$r:00003A13                 db    0
.rdata$r:00003A14                 db    0
.rdata$r:00003A15                 db    0
.rdata$r:00003A16                 db    0
.rdata$r:00003A17                 db    0
.rdata$r:00003A18                 dd offset ??_R0?AVCArchiveUpdateCallback@@@8 ; CArchiveUpdateCallback `RTTI Type Descriptor'
.rdata$r:00003A1C                 dd offset ??_R3CArchiveUpdateCallback@@8 ; CArchiveUpdateCallback::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003A1C _rdata$r        ends
.rdata$r:00003A1C
.data:00003A20 ; ===========================================================================
.data:00003A20
.data:00003A20 ; Segment type: Pure data
.data:00003A20 ; Segment permissions: Read/Write
.data:00003A20 _data           segment dword public 'DATA' use32
.data:00003A20                 assume cs:_data
.data:00003A20                 ;org 3A20h
.data:00003A20 ; COMDAT (pick any)
.data:00003A20                 public ??_R0?AVCArchiveUpdateCallback@@@8
.data:00003A20 ; class CArchiveUpdateCallback `RTTI Type Descriptor'
.data:00003A20 ??_R0?AVCArchiveUpdateCallback@@@8 dd offset ??_7type_info@@6B@
.data:00003A20                                         ; DATA XREF: .rdata$r:00003A18o
.data:00003A20                                         ; .rdata$r:CArchiveUpdateCallback::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00003A20                                         ; const type_info::`vftable'
.data:00003A24                 align 8
.data:00003A28 a_?avcarchiveup db '.?AVCArchiveUpdateCallback@@',0
.data:00003A45                 align 4
.data:00003A45 _data           ends
.data:00003A45
.rdata$r:00003A48 ; ===========================================================================
.rdata$r:00003A48
.rdata$r:00003A48 ; Segment type: Pure data
.rdata$r:00003A48 ; Segment permissions: Read
.rdata$r:00003A48 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003A48                 assume cs:_rdata$r
.rdata$r:00003A48                 ;org 3A48h
.rdata$r:00003A48 ; COMDAT (pick any)
.rdata$r:00003A48                 public ??_R3CArchiveUpdateCallback@@8
.rdata$r:00003A48 ; CArchiveUpdateCallback::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003A48 ??_R3CArchiveUpdateCallback@@8 db    0  ; DATA XREF: .rdata$r:00003A1Co
.rdata$r:00003A48                                         ; .rdata$r:00003ACCo ...
.rdata$r:00003A49                 db    0
.rdata$r:00003A4A                 db    0
.rdata$r:00003A4B                 db    0
.rdata$r:00003A4C                 db    5
.rdata$r:00003A4D                 db    0
.rdata$r:00003A4E                 db    0
.rdata$r:00003A4F                 db    0
.rdata$r:00003A50                 db  16h
.rdata$r:00003A51                 db    0
.rdata$r:00003A52                 db    0
.rdata$r:00003A53                 db    0
.rdata$r:00003A54                 dd offset ??_R2CArchiveUpdateCallback@@8 ; CArchiveUpdateCallback::`RTTI Base Class Array'
.rdata$r:00003A54 _rdata$r        ends
.rdata$r:00003A54
.rdata$r:00003A58 ; ===========================================================================
.rdata$r:00003A58
.rdata$r:00003A58 ; Segment type: Pure data
.rdata$r:00003A58 ; Segment permissions: Read
.rdata$r:00003A58 ; Segment alignment 'qword' can not be represented in assembly
.rdata$r:00003A58 _rdata$r        segment para public 'DATA' use32
.rdata$r:00003A58                 assume cs:_rdata$r
.rdata$r:00003A58                 ;org 3A58h
.rdata$r:00003A58 ; COMDAT (pick any)
.rdata$r:00003A58                 public ??_R2CArchiveUpdateCallback@@8
.rdata$r:00003A58 ; CArchiveUpdateCallback::`RTTI Base Class Array'
.rdata$r:00003A58 ??_R2CArchiveUpdateCallback@@8 dd offset ??_R1A@?0A@EA@CArchiveUpdateCallback@@8
.rdata$r:00003A58                                         ; DATA XREF: .rdata$r:00003A54o
.rdata$r:00003A58                                         ; CArchiveUpdateCallback::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003A5C                 dd offset ??_R1A@?0A@EA@IArchiveUpdateCallback2@@8 ; IArchiveUpdateCallback2::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003A60                 dd offset ??_R1A@?0A@EA@IArchiveUpdateCallback@@8 ; IArchiveUpdateCallback::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003A64                 dd offset ??_R1A@?0A@EC@IProgress@@8 ; IProgress::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:00003A68                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:00003A6C                 dd offset ??_R13?0A@EA@IArchiveUpdateCallbackFile@@8 ; IArchiveUpdateCallbackFile::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00003A70                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:00003A74                 dd offset ??_R17?0A@EA@IArchiveExtractCallbackMessage@@8 ; IArchiveExtractCallbackMessage::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:00003A78                 dd offset ??_R17?0A@EC@IProgress@@8 ; IProgress::`RTTI Base Class Descriptor at (8,-1,0,66)'
.rdata$r:00003A7C                 dd offset ??_R17?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
.rdata$r:00003A80                 dd offset ??_R1M@?0A@EA@IArchiveGetRawProps@@8 ; IArchiveGetRawProps::`RTTI Base Class Descriptor at (12,-1,0,64)'
.rdata$r:00003A84                 dd offset ??_R1M@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (12,-1,0,66)'
.rdata$r:00003A88                 dd offset ??_R1BA@?0A@EA@IArchiveGetRootProps@@8 ; IArchiveGetRootProps::`RTTI Base Class Descriptor at (16,-1,0,64)'
.rdata$r:00003A8C                 dd offset ??_R1BA@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (16,-1,0,66)'
.rdata$r:00003A90                 dd offset ??_R1BE@?0A@EA@ICryptoGetTextPassword2@@8 ; ICryptoGetTextPassword2::`RTTI Base Class Descriptor at (20,-1,0,64)'
.rdata$r:00003A94                 dd offset ??_R1BE@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (20,-1,0,66)'
.rdata$r:00003A98                 dd offset ??_R1BI@?0A@EA@ICryptoGetTextPassword@@8 ; ICryptoGetTextPassword::`RTTI Base Class Descriptor at (24,-1,0,64)'
.rdata$r:00003A9C                 dd offset ??_R1BI@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (24,-1,0,66)'
.rdata$r:00003AA0                 dd offset ??_R1BM@?0A@EA@ICompressProgressInfo@@8 ; ICompressProgressInfo::`RTTI Base Class Descriptor at (28,-1,0,64)'
.rdata$r:00003AA4                 dd offset ??_R1BM@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (28,-1,0,66)'
.rdata$r:00003AA8                 dd offset ??_R1CA@?0A@EA@IInFileStream_Callback@@8 ; IInFileStream_Callback::`RTTI Base Class Descriptor at (32,-1,0,64)'
.rdata$r:00003AAC                 dd offset ??_R1CE@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (36,-1,0,64)'
.rdata$r:00003AB0                 db    0
.rdata$r:00003AB1                 align 4
.rdata$r:00003AB1 _rdata$r        ends
.rdata$r:00003AB1
.rdata$r:00003AB4 ; ===========================================================================
.rdata$r:00003AB4
.rdata$r:00003AB4 ; Segment type: Pure data
.rdata$r:00003AB4 ; Segment permissions: Read
.rdata$r:00003AB4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003AB4                 assume cs:_rdata$r
.rdata$r:00003AB4                 ;org 3AB4h
.rdata$r:00003AB4 ; COMDAT (pick any)
.rdata$r:00003AB4                 public ??_R1A@?0A@EA@CArchiveUpdateCallback@@8
.rdata$r:00003AB4 ; CArchiveUpdateCallback::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00003AB4 ??_R1A@?0A@EA@CArchiveUpdateCallback@@8 dd offset ??_R0?AVCArchiveUpdateCallback@@@8
.rdata$r:00003AB4                                         ; DATA XREF: .rdata$r:CArchiveUpdateCallback::`RTTI Base Class Array'o
.rdata$r:00003AB4                                         ; CArchiveUpdateCallback `RTTI Type Descriptor'
.rdata$r:00003AB8                 db  15h
.rdata$r:00003AB9                 db    0
.rdata$r:00003ABA                 db    0
.rdata$r:00003ABB                 db    0
.rdata$r:00003ABC                 db    0
.rdata$r:00003ABD                 db    0
.rdata$r:00003ABE                 db    0
.rdata$r:00003ABF                 db    0
.rdata$r:00003AC0                 db 0FFh
.rdata$r:00003AC1                 db 0FFh
.rdata$r:00003AC2                 db 0FFh
.rdata$r:00003AC3                 db 0FFh
.rdata$r:00003AC4                 db    0
.rdata$r:00003AC5                 db    0
.rdata$r:00003AC6                 db    0
.rdata$r:00003AC7                 db    0
.rdata$r:00003AC8                 db  40h ; @
.rdata$r:00003AC9                 db    0
.rdata$r:00003ACA                 db    0
.rdata$r:00003ACB                 db    0
.rdata$r:00003ACC                 dd offset ??_R3CArchiveUpdateCallback@@8 ; CArchiveUpdateCallback::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003ACC _rdata$r        ends
.rdata$r:00003ACC
.rdata$r:00003AD0 ; ===========================================================================
.rdata$r:00003AD0
.rdata$r:00003AD0 ; Segment type: Pure data
.rdata$r:00003AD0 ; Segment permissions: Read
.rdata$r:00003AD0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003AD0                 assume cs:_rdata$r
.rdata$r:00003AD0                 ;org 3AD0h
.rdata$r:00003AD0 ; COMDAT (pick any)
.rdata$r:00003AD0                 public ??_R1A@?0A@EA@IArchiveUpdateCallback2@@8
.rdata$r:00003AD0 ; IArchiveUpdateCallback2::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00003AD0 ??_R1A@?0A@EA@IArchiveUpdateCallback2@@8 dd offset ??_R0?AUIArchiveUpdateCallback2@@@8
.rdata$r:00003AD0                                         ; DATA XREF: .rdata$r:00003A5Co
.rdata$r:00003AD0                                         ; .rdata$r:IArchiveUpdateCallback2::`RTTI Base Class Array'o
.rdata$r:00003AD0                                         ; IArchiveUpdateCallback2 `RTTI Type Descriptor'
.rdata$r:00003AD4                 db    3
.rdata$r:00003AD5                 db    0
.rdata$r:00003AD6                 db    0
.rdata$r:00003AD7                 db    0
.rdata$r:00003AD8                 db    0
.rdata$r:00003AD9                 db    0
.rdata$r:00003ADA                 db    0
.rdata$r:00003ADB                 db    0
.rdata$r:00003ADC                 db 0FFh
.rdata$r:00003ADD                 db 0FFh
.rdata$r:00003ADE                 db 0FFh
.rdata$r:00003ADF                 db 0FFh
.rdata$r:00003AE0                 db    0
.rdata$r:00003AE1                 db    0
.rdata$r:00003AE2                 db    0
.rdata$r:00003AE3                 db    0
.rdata$r:00003AE4                 db  40h ; @
.rdata$r:00003AE5                 db    0
.rdata$r:00003AE6                 db    0
.rdata$r:00003AE7                 db    0
.rdata$r:00003AE8                 dd offset ??_R3IArchiveUpdateCallback2@@8 ; IArchiveUpdateCallback2::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003AE8 _rdata$r        ends
.rdata$r:00003AE8
.data:00003AEC ; ===========================================================================
.data:00003AEC
.data:00003AEC ; Segment type: Pure data
.data:00003AEC ; Segment permissions: Read/Write
.data:00003AEC _data           segment dword public 'DATA' use32
.data:00003AEC                 assume cs:_data
.data:00003AEC                 ;org 3AECh
.data:00003AEC ; COMDAT (pick any)
.data:00003AEC                 public ??_R0?AUIArchiveUpdateCallback2@@@8
.data:00003AEC ; struct IArchiveUpdateCallback2 `RTTI Type Descriptor'
.data:00003AEC ??_R0?AUIArchiveUpdateCallback2@@@8 dd offset ??_7type_info@@6B@
.data:00003AEC                                         ; DATA XREF: .rdata$r:IArchiveUpdateCallback2::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00003AEC                                         ; .rdata$r:0000480Co
.data:00003AEC                                         ; const type_info::`vftable'
.data:00003AF0                 db    0
.data:00003AF1                 db    0
.data:00003AF2                 db    0
.data:00003AF3                 db    0
.data:00003AF4                 db  2Eh ; .
.data:00003AF5                 db  3Fh ; ?
.data:00003AF6                 db  41h ; A
.data:00003AF7                 db  55h ; U
.data:00003AF8                 db  49h ; I
.data:00003AF9                 db  41h ; A
.data:00003AFA                 db  72h ; r
.data:00003AFB                 db  63h ; c
.data:00003AFC                 db  68h ; h
.data:00003AFD                 db  69h ; i
.data:00003AFE                 db  76h ; v
.data:00003AFF                 db  65h ; e
.data:00003B00                 db  55h ; U
.data:00003B01                 db  70h ; p
.data:00003B02                 db  64h ; d
.data:00003B03                 db  61h ; a
.data:00003B04                 db  74h ; t
.data:00003B05                 db  65h ; e
.data:00003B06                 db  43h ; C
.data:00003B07                 db  61h ; a
.data:00003B08                 db  6Ch ; l
.data:00003B09                 db  6Ch ; l
.data:00003B0A                 db  62h ; b
.data:00003B0B                 db  61h ; a
.data:00003B0C                 db  63h ; c
.data:00003B0D                 db  6Bh ; k
.data:00003B0E                 db  32h ; 2
.data:00003B0F                 db  40h ; @
.data:00003B10                 db  40h ; @
.data:00003B11                 db    0
.data:00003B12                 align 4
.data:00003B12 _data           ends
.data:00003B12
.rdata$r:00003B14 ; ===========================================================================
.rdata$r:00003B14
.rdata$r:00003B14 ; Segment type: Pure data
.rdata$r:00003B14 ; Segment permissions: Read
.rdata$r:00003B14 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003B14                 assume cs:_rdata$r
.rdata$r:00003B14                 ;org 3B14h
.rdata$r:00003B14 ; COMDAT (pick any)
.rdata$r:00003B14                 public ??_R3IArchiveUpdateCallback2@@8
.rdata$r:00003B14 ; IArchiveUpdateCallback2::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003B14 ??_R3IArchiveUpdateCallback2@@8 db    0 ; DATA XREF: .rdata$r:00003AE8o
.rdata$r:00003B14                                         ; .rdata$r:00004810o
.rdata$r:00003B15                 db    0
.rdata$r:00003B16                 db    0
.rdata$r:00003B17                 db    0
.rdata$r:00003B18                 db    0
.rdata$r:00003B19                 db    0
.rdata$r:00003B1A                 db    0
.rdata$r:00003B1B                 db    0
.rdata$r:00003B1C                 db    4
.rdata$r:00003B1D                 db    0
.rdata$r:00003B1E                 db    0
.rdata$r:00003B1F                 db    0
.rdata$r:00003B20                 dd offset ??_R2IArchiveUpdateCallback2@@8 ; IArchiveUpdateCallback2::`RTTI Base Class Array'
.rdata$r:00003B20 _rdata$r        ends
.rdata$r:00003B20
.rdata$r:00003B24 ; ===========================================================================
.rdata$r:00003B24
.rdata$r:00003B24 ; Segment type: Pure data
.rdata$r:00003B24 ; Segment permissions: Read
.rdata$r:00003B24 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003B24                 assume cs:_rdata$r
.rdata$r:00003B24                 ;org 3B24h
.rdata$r:00003B24 ; COMDAT (pick any)
.rdata$r:00003B24                 public ??_R2IArchiveUpdateCallback2@@8
.rdata$r:00003B24 ; IArchiveUpdateCallback2::`RTTI Base Class Array'
.rdata$r:00003B24 ??_R2IArchiveUpdateCallback2@@8 dd offset ??_R1A@?0A@EA@IArchiveUpdateCallback2@@8
.rdata$r:00003B24                                         ; DATA XREF: .rdata$r:00003B20o
.rdata$r:00003B24                                         ; IArchiveUpdateCallback2::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003B28                 dd offset ??_R1A@?0A@EA@IArchiveUpdateCallback@@8 ; IArchiveUpdateCallback::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003B2C                 dd offset ??_R1A@?0A@EA@IProgress@@8 ; IProgress::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003B30                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003B34                 db    0
.rdata$r:00003B35                 align 4
.rdata$r:00003B35 _rdata$r        ends
.rdata$r:00003B35
.rdata$r:00003B38 ; ===========================================================================
.rdata$r:00003B38
.rdata$r:00003B38 ; Segment type: Pure data
.rdata$r:00003B38 ; Segment permissions: Read
.rdata$r:00003B38 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003B38                 assume cs:_rdata$r
.rdata$r:00003B38                 ;org 3B38h
.rdata$r:00003B38 ; COMDAT (pick any)
.rdata$r:00003B38                 public ??_R1A@?0A@EA@IArchiveUpdateCallback@@8
.rdata$r:00003B38 ; IArchiveUpdateCallback::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00003B38 ??_R1A@?0A@EA@IArchiveUpdateCallback@@8 dd offset ??_R0?AUIArchiveUpdateCallback@@@8
.rdata$r:00003B38                                         ; DATA XREF: .rdata$r:00003A60o
.rdata$r:00003B38                                         ; .rdata$r:00003B28o ...
.rdata$r:00003B38                                         ; IArchiveUpdateCallback `RTTI Type Descriptor'
.rdata$r:00003B3C                 db    2
.rdata$r:00003B3D                 db    0
.rdata$r:00003B3E                 db    0
.rdata$r:00003B3F                 db    0
.rdata$r:00003B40                 db    0
.rdata$r:00003B41                 db    0
.rdata$r:00003B42                 db    0
.rdata$r:00003B43                 db    0
.rdata$r:00003B44                 db 0FFh
.rdata$r:00003B45                 db 0FFh
.rdata$r:00003B46                 db 0FFh
.rdata$r:00003B47                 db 0FFh
.rdata$r:00003B48                 db    0
.rdata$r:00003B49                 db    0
.rdata$r:00003B4A                 db    0
.rdata$r:00003B4B                 db    0
.rdata$r:00003B4C                 db  40h ; @
.rdata$r:00003B4D                 db    0
.rdata$r:00003B4E                 db    0
.rdata$r:00003B4F                 db    0
.rdata$r:00003B50                 dd offset ??_R3IArchiveUpdateCallback@@8 ; IArchiveUpdateCallback::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003B50 _rdata$r        ends
.rdata$r:00003B50
.data:00003B54 ; ===========================================================================
.data:00003B54
.data:00003B54 ; Segment type: Pure data
.data:00003B54 ; Segment permissions: Read/Write
.data:00003B54 _data           segment dword public 'DATA' use32
.data:00003B54                 assume cs:_data
.data:00003B54                 ;org 3B54h
.data:00003B54 ; COMDAT (pick any)
.data:00003B54                 public ??_R0?AUIArchiveUpdateCallback@@@8
.data:00003B54 ; struct IArchiveUpdateCallback `RTTI Type Descriptor'
.data:00003B54 ??_R0?AUIArchiveUpdateCallback@@@8 dd offset ??_7type_info@@6B@
.data:00003B54                                         ; DATA XREF: .rdata$r:IArchiveUpdateCallback::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00003B54                                         ; .rdata$r:00004AE4o
.data:00003B54                                         ; const type_info::`vftable'
.data:00003B58                 db    0
.data:00003B59                 db    0
.data:00003B5A                 db    0
.data:00003B5B                 db    0
.data:00003B5C                 db  2Eh ; .
.data:00003B5D                 db  3Fh ; ?
.data:00003B5E                 db  41h ; A
.data:00003B5F                 db  55h ; U
.data:00003B60                 db  49h ; I
.data:00003B61                 db  41h ; A
.data:00003B62                 db  72h ; r
.data:00003B63                 db  63h ; c
.data:00003B64                 db  68h ; h
.data:00003B65                 db  69h ; i
.data:00003B66                 db  76h ; v
.data:00003B67                 db  65h ; e
.data:00003B68                 db  55h ; U
.data:00003B69                 db  70h ; p
.data:00003B6A                 db  64h ; d
.data:00003B6B                 db  61h ; a
.data:00003B6C                 db  74h ; t
.data:00003B6D                 db  65h ; e
.data:00003B6E                 db  43h ; C
.data:00003B6F                 db  61h ; a
.data:00003B70                 db  6Ch ; l
.data:00003B71                 db  6Ch ; l
.data:00003B72                 db  62h ; b
.data:00003B73                 db  61h ; a
.data:00003B74                 db  63h ; c
.data:00003B75                 db  6Bh ; k
.data:00003B76                 db  40h ; @
.data:00003B77                 db  40h ; @
.data:00003B78                 db    0
.data:00003B79                 align 4
.data:00003B79 _data           ends
.data:00003B79
.rdata$r:00003B7C ; ===========================================================================
.rdata$r:00003B7C
.rdata$r:00003B7C ; Segment type: Pure data
.rdata$r:00003B7C ; Segment permissions: Read
.rdata$r:00003B7C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003B7C                 assume cs:_rdata$r
.rdata$r:00003B7C                 ;org 3B7Ch
.rdata$r:00003B7C ; COMDAT (pick any)
.rdata$r:00003B7C                 public ??_R3IArchiveUpdateCallback@@8
.rdata$r:00003B7C ; IArchiveUpdateCallback::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003B7C ??_R3IArchiveUpdateCallback@@8 db    0  ; DATA XREF: .rdata$r:00003B50o
.rdata$r:00003B7C                                         ; .rdata$r:00004AE8o
.rdata$r:00003B7D                 db    0
.rdata$r:00003B7E                 db    0
.rdata$r:00003B7F                 db    0
.rdata$r:00003B80                 db    0
.rdata$r:00003B81                 db    0
.rdata$r:00003B82                 db    0
.rdata$r:00003B83                 db    0
.rdata$r:00003B84                 db    3
.rdata$r:00003B85                 db    0
.rdata$r:00003B86                 db    0
.rdata$r:00003B87                 db    0
.rdata$r:00003B88                 dd offset ??_R2IArchiveUpdateCallback@@8 ; IArchiveUpdateCallback::`RTTI Base Class Array'
.rdata$r:00003B88 _rdata$r        ends
.rdata$r:00003B88
.rdata$r:00003B8C ; ===========================================================================
.rdata$r:00003B8C
.rdata$r:00003B8C ; Segment type: Pure data
.rdata$r:00003B8C ; Segment permissions: Read
.rdata$r:00003B8C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003B8C                 assume cs:_rdata$r
.rdata$r:00003B8C                 ;org 3B8Ch
.rdata$r:00003B8C ; COMDAT (pick any)
.rdata$r:00003B8C                 public ??_R2IArchiveUpdateCallback@@8
.rdata$r:00003B8C ; IArchiveUpdateCallback::`RTTI Base Class Array'
.rdata$r:00003B8C ??_R2IArchiveUpdateCallback@@8 dd offset ??_R1A@?0A@EA@IArchiveUpdateCallback@@8
.rdata$r:00003B8C                                         ; DATA XREF: .rdata$r:00003B88o
.rdata$r:00003B8C                                         ; IArchiveUpdateCallback::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003B90                 dd offset ??_R1A@?0A@EA@IProgress@@8 ; IProgress::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003B94                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003B98                 db    0
.rdata$r:00003B99                 align 4
.rdata$r:00003B99 _rdata$r        ends
.rdata$r:00003B99
.rdata$r:00003B9C ; ===========================================================================
.rdata$r:00003B9C
.rdata$r:00003B9C ; Segment type: Pure data
.rdata$r:00003B9C ; Segment permissions: Read
.rdata$r:00003B9C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003B9C                 assume cs:_rdata$r
.rdata$r:00003B9C                 ;org 3B9Ch
.rdata$r:00003B9C ; COMDAT (pick any)
.rdata$r:00003B9C                 public ??_R1A@?0A@EA@IProgress@@8
.rdata$r:00003B9C ; IProgress::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00003B9C ??_R1A@?0A@EA@IProgress@@8 dd offset ??_R0?AUIProgress@@@8
.rdata$r:00003B9C                                         ; DATA XREF: .rdata$r:00003B2Co
.rdata$r:00003B9C                                         ; .rdata$r:00003B90o ...
.rdata$r:00003B9C                                         ; IProgress `RTTI Type Descriptor'
.rdata$r:00003BA0                 db    1
.rdata$r:00003BA1                 db    0
.rdata$r:00003BA2                 db    0
.rdata$r:00003BA3                 db    0
.rdata$r:00003BA4                 db    0
.rdata$r:00003BA5                 db    0
.rdata$r:00003BA6                 db    0
.rdata$r:00003BA7                 db    0
.rdata$r:00003BA8                 db 0FFh
.rdata$r:00003BA9                 db 0FFh
.rdata$r:00003BAA                 db 0FFh
.rdata$r:00003BAB                 db 0FFh
.rdata$r:00003BAC                 db    0
.rdata$r:00003BAD                 db    0
.rdata$r:00003BAE                 db    0
.rdata$r:00003BAF                 db    0
.rdata$r:00003BB0                 db  40h ; @
.rdata$r:00003BB1                 db    0
.rdata$r:00003BB2                 db    0
.rdata$r:00003BB3                 db    0
.rdata$r:00003BB4                 dd offset ??_R3IProgress@@8 ; IProgress::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003BB4 _rdata$r        ends
.rdata$r:00003BB4
.data:00003BB8 ; ===========================================================================
.data:00003BB8
.data:00003BB8 ; Segment type: Pure data
.data:00003BB8 ; Segment permissions: Read/Write
.data:00003BB8 _data           segment dword public 'DATA' use32
.data:00003BB8                 assume cs:_data
.data:00003BB8                 ;org 3BB8h
.data:00003BB8 ; COMDAT (pick any)
.data:00003BB8                 public ??_R0?AUIProgress@@@8
.data:00003BB8 ; struct IProgress `RTTI Type Descriptor'
.data:00003BB8 ??_R0?AUIProgress@@@8 dd offset ??_7type_info@@6B@
.data:00003BB8                                         ; DATA XREF: .rdata$r:IProgress::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00003BB8                                         ; .rdata$r:IProgress::`RTTI Base Class Descriptor at (0,-1,0,66)'o ...
.data:00003BB8                                         ; const type_info::`vftable'
.data:00003BBC                 align 10h
.data:00003BC0 a_?auiprogress@ db '.?AUIProgress@@',0
.data:00003BC0 _data           ends
.data:00003BC0
.rdata$r:00003BD0 ; ===========================================================================
.rdata$r:00003BD0
.rdata$r:00003BD0 ; Segment type: Pure data
.rdata$r:00003BD0 ; Segment permissions: Read
.rdata$r:00003BD0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003BD0                 assume cs:_rdata$r
.rdata$r:00003BD0                 ;org 3BD0h
.rdata$r:00003BD0 ; COMDAT (pick any)
.rdata$r:00003BD0                 public ??_R3IProgress@@8
.rdata$r:00003BD0 ; IProgress::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003BD0 ??_R3IProgress@@8 db    0               ; DATA XREF: .rdata$r:00003BB4o
.rdata$r:00003BD0                                         ; .rdata$r:00003C50o ...
.rdata$r:00003BD1                 db    0
.rdata$r:00003BD2                 db    0
.rdata$r:00003BD3                 db    0
.rdata$r:00003BD4                 db    0
.rdata$r:00003BD5                 db    0
.rdata$r:00003BD6                 db    0
.rdata$r:00003BD7                 db    0
.rdata$r:00003BD8                 db    2
.rdata$r:00003BD9                 db    0
.rdata$r:00003BDA                 db    0
.rdata$r:00003BDB                 db    0
.rdata$r:00003BDC                 dd offset ??_R2IProgress@@8 ; IProgress::`RTTI Base Class Array'
.rdata$r:00003BDC _rdata$r        ends
.rdata$r:00003BDC
.rdata$r:00003BE0 ; ===========================================================================
.rdata$r:00003BE0
.rdata$r:00003BE0 ; Segment type: Pure data
.rdata$r:00003BE0 ; Segment permissions: Read
.rdata$r:00003BE0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003BE0                 assume cs:_rdata$r
.rdata$r:00003BE0                 ;org 3BE0h
.rdata$r:00003BE0 ; COMDAT (pick any)
.rdata$r:00003BE0                 public ??_R2IProgress@@8
.rdata$r:00003BE0 ; IProgress::`RTTI Base Class Array'
.rdata$r:00003BE0 ??_R2IProgress@@8 dd offset ??_R1A@?0A@EA@IProgress@@8
.rdata$r:00003BE0                                         ; DATA XREF: .rdata$r:00003BDCo
.rdata$r:00003BE0                                         ; IProgress::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003BE4                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003BE8                 db    0
.rdata$r:00003BE9                 align 4
.rdata$r:00003BE9 _rdata$r        ends
.rdata$r:00003BE9
.rdata$r:00003BEC ; ===========================================================================
.rdata$r:00003BEC
.rdata$r:00003BEC ; Segment type: Pure data
.rdata$r:00003BEC ; Segment permissions: Read
.rdata$r:00003BEC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003BEC                 assume cs:_rdata$r
.rdata$r:00003BEC                 ;org 3BECh
.rdata$r:00003BEC ; COMDAT (pick any)
.rdata$r:00003BEC                 public ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00003BEC ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00003BEC ??_R1A@?0A@EA@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00003BEC                                         ; DATA XREF: .rdata$r:00003B30o
.rdata$r:00003BEC                                         ; .rdata$r:00003B94o ...
.rdata$r:00003BEC                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00003BF0                 db    0
.rdata$r:00003BF1                 db    0
.rdata$r:00003BF2                 db    0
.rdata$r:00003BF3                 db    0
.rdata$r:00003BF4                 db    0
.rdata$r:00003BF5                 db    0
.rdata$r:00003BF6                 db    0
.rdata$r:00003BF7                 db    0
.rdata$r:00003BF8                 db 0FFh
.rdata$r:00003BF9                 db 0FFh
.rdata$r:00003BFA                 db 0FFh
.rdata$r:00003BFB                 db 0FFh
.rdata$r:00003BFC                 db    0
.rdata$r:00003BFD                 db    0
.rdata$r:00003BFE                 db    0
.rdata$r:00003BFF                 db    0
.rdata$r:00003C00                 db  40h ; @
.rdata$r:00003C01                 db    0
.rdata$r:00003C02                 db    0
.rdata$r:00003C03                 db    0
.rdata$r:00003C04                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003C04 _rdata$r        ends
.rdata$r:00003C04
.data:00003C08 ; ===========================================================================
.data:00003C08
.data:00003C08 ; Segment type: Pure data
.data:00003C08 ; Segment permissions: Read/Write
.data:00003C08 _data           segment dword public 'DATA' use32
.data:00003C08                 assume cs:_data
.data:00003C08                 ;org 3C08h
.data:00003C08 ; COMDAT (pick any)
.data:00003C08                 public ??_R0?AUIUnknown@@@8
.data:00003C08 ; struct IUnknown `RTTI Type Descriptor'
.data:00003C08 ??_R0?AUIUnknown@@@8 dd offset ??_7type_info@@6B@
.data:00003C08                                         ; DATA XREF: .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00003C08                                         ; .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'o ...
.data:00003C08                                         ; const type_info::`vftable'
.data:00003C0C                 align 10h
.data:00003C10 a_?auiunknown@@ db '.?AUIUnknown@@',0
.data:00003C1F                 align 10h
.data:00003C1F _data           ends
.data:00003C1F
.rdata$r:00003C20 ; ===========================================================================
.rdata$r:00003C20
.rdata$r:00003C20 ; Segment type: Pure data
.rdata$r:00003C20 ; Segment permissions: Read
.rdata$r:00003C20 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003C20                 assume cs:_rdata$r
.rdata$r:00003C20                 ;org 3C20h
.rdata$r:00003C20 ; COMDAT (pick any)
.rdata$r:00003C20                 public ??_R3IUnknown@@8
.rdata$r:00003C20 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003C20 ??_R3IUnknown@@8 db    0                ; DATA XREF: .rdata$r:00003C04o
.rdata$r:00003C20                                         ; .rdata$r:00003C6Co ...
.rdata$r:00003C21                 db    0
.rdata$r:00003C22                 db    0
.rdata$r:00003C23                 db    0
.rdata$r:00003C24                 db    0
.rdata$r:00003C25                 db    0
.rdata$r:00003C26                 db    0
.rdata$r:00003C27                 db    0
.rdata$r:00003C28                 db    1
.rdata$r:00003C29                 db    0
.rdata$r:00003C2A                 db    0
.rdata$r:00003C2B                 db    0
.rdata$r:00003C2C                 dd offset ??_R2IUnknown@@8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00003C2C _rdata$r        ends
.rdata$r:00003C2C
.rdata$r:00003C30 ; ===========================================================================
.rdata$r:00003C30
.rdata$r:00003C30 ; Segment type: Pure data
.rdata$r:00003C30 ; Segment permissions: Read
.rdata$r:00003C30 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003C30                 assume cs:_rdata$r
.rdata$r:00003C30                 ;org 3C30h
.rdata$r:00003C30 ; COMDAT (pick any)
.rdata$r:00003C30                 public ??_R2IUnknown@@8
.rdata$r:00003C30 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00003C30 ??_R2IUnknown@@8 dd offset ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00003C30                                         ; DATA XREF: .rdata$r:00003C2Co
.rdata$r:00003C30                                         ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003C34                 db    0
.rdata$r:00003C35                 align 4
.rdata$r:00003C35 _rdata$r        ends
.rdata$r:00003C35
.rdata$r:00003C38 ; ===========================================================================
.rdata$r:00003C38
.rdata$r:00003C38 ; Segment type: Pure data
.rdata$r:00003C38 ; Segment permissions: Read
.rdata$r:00003C38 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003C38                 assume cs:_rdata$r
.rdata$r:00003C38                 ;org 3C38h
.rdata$r:00003C38 ; COMDAT (pick any)
.rdata$r:00003C38                 public ??_R1A@?0A@EC@IProgress@@8
.rdata$r:00003C38 ; IProgress::`RTTI Base Class Descriptor at (0, -1, 0, 66)'
.rdata$r:00003C38 ??_R1A@?0A@EC@IProgress@@8 dd offset ??_R0?AUIProgress@@@8
.rdata$r:00003C38                                         ; DATA XREF: .rdata$r:00003A64o
.rdata$r:00003C38                                         ; IProgress `RTTI Type Descriptor'
.rdata$r:00003C3C                 db    1
.rdata$r:00003C3D                 db    0
.rdata$r:00003C3E                 db    0
.rdata$r:00003C3F                 db    0
.rdata$r:00003C40                 db    0
.rdata$r:00003C41                 db    0
.rdata$r:00003C42                 db    0
.rdata$r:00003C43                 db    0
.rdata$r:00003C44                 db 0FFh
.rdata$r:00003C45                 db 0FFh
.rdata$r:00003C46                 db 0FFh
.rdata$r:00003C47                 db 0FFh
.rdata$r:00003C48                 db    0
.rdata$r:00003C49                 db    0
.rdata$r:00003C4A                 db    0
.rdata$r:00003C4B                 db    0
.rdata$r:00003C4C                 db  42h ; B
.rdata$r:00003C4D                 db    0
.rdata$r:00003C4E                 db    0
.rdata$r:00003C4F                 db    0
.rdata$r:00003C50                 dd offset ??_R3IProgress@@8 ; IProgress::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003C50 _rdata$r        ends
.rdata$r:00003C50
.rdata$r:00003C54 ; ===========================================================================
.rdata$r:00003C54
.rdata$r:00003C54 ; Segment type: Pure data
.rdata$r:00003C54 ; Segment permissions: Read
.rdata$r:00003C54 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003C54                 assume cs:_rdata$r
.rdata$r:00003C54                 ;org 3C54h
.rdata$r:00003C54 ; COMDAT (pick any)
.rdata$r:00003C54                 public ??_R1A@?0A@EC@IUnknown@@8
.rdata$r:00003C54 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 66)'
.rdata$r:00003C54 ??_R1A@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00003C54                                         ; DATA XREF: .rdata$r:00003A68o
.rdata$r:00003C54                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00003C58                 align 10h
.rdata$r:00003C60                 db 0FFh
.rdata$r:00003C61                 db 0FFh
.rdata$r:00003C62                 db 0FFh
.rdata$r:00003C63                 db 0FFh
.rdata$r:00003C64                 db    0
.rdata$r:00003C65                 db    0
.rdata$r:00003C66                 db    0
.rdata$r:00003C67                 db    0
.rdata$r:00003C68                 db  42h ; B
.rdata$r:00003C69                 db    0
.rdata$r:00003C6A                 db    0
.rdata$r:00003C6B                 db    0
.rdata$r:00003C6C                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003C6C _rdata$r        ends
.rdata$r:00003C6C
.rdata$r:00003C70 ; ===========================================================================
.rdata$r:00003C70
.rdata$r:00003C70 ; Segment type: Pure data
.rdata$r:00003C70 ; Segment permissions: Read
.rdata$r:00003C70 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003C70                 assume cs:_rdata$r
.rdata$r:00003C70                 ;org 3C70h
.rdata$r:00003C70 ; COMDAT (pick any)
.rdata$r:00003C70                 public ??_R13?0A@EA@IArchiveUpdateCallbackFile@@8
.rdata$r:00003C70 ; IArchiveUpdateCallbackFile::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:00003C70 ??_R13?0A@EA@IArchiveUpdateCallbackFile@@8 dd offset ??_R0?AUIArchiveUpdateCallbackFile@@@8
.rdata$r:00003C70                                         ; DATA XREF: .rdata$r:00003A6Co
.rdata$r:00003C70                                         ; IArchiveUpdateCallbackFile `RTTI Type Descriptor'
.rdata$r:00003C74                 db    1
.rdata$r:00003C75                 db    0
.rdata$r:00003C76                 db    0
.rdata$r:00003C77                 db    0
.rdata$r:00003C78                 db    4
.rdata$r:00003C79                 db    0
.rdata$r:00003C7A                 db    0
.rdata$r:00003C7B                 db    0
.rdata$r:00003C7C                 db 0FFh
.rdata$r:00003C7D                 db 0FFh
.rdata$r:00003C7E                 db 0FFh
.rdata$r:00003C7F                 db 0FFh
.rdata$r:00003C80                 db    0
.rdata$r:00003C81                 db    0
.rdata$r:00003C82                 db    0
.rdata$r:00003C83                 db    0
.rdata$r:00003C84                 db  40h ; @
.rdata$r:00003C85                 db    0
.rdata$r:00003C86                 db    0
.rdata$r:00003C87                 db    0
.rdata$r:00003C88                 dd offset ??_R3IArchiveUpdateCallbackFile@@8 ; IArchiveUpdateCallbackFile::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003C88 _rdata$r        ends
.rdata$r:00003C88
.data:00003C8C ; ===========================================================================
.data:00003C8C
.data:00003C8C ; Segment type: Pure data
.data:00003C8C ; Segment permissions: Read/Write
.data:00003C8C _data           segment dword public 'DATA' use32
.data:00003C8C                 assume cs:_data
.data:00003C8C                 ;org 3C8Ch
.data:00003C8C ; COMDAT (pick any)
.data:00003C8C                 public ??_R0?AUIArchiveUpdateCallbackFile@@@8
.data:00003C8C ; struct IArchiveUpdateCallbackFile `RTTI Type Descriptor'
.data:00003C8C ??_R0?AUIArchiveUpdateCallbackFile@@@8 dd offset ??_7type_info@@6B@
.data:00003C8C                                         ; DATA XREF: .rdata$r:IArchiveUpdateCallbackFile::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:00003C8C                                         ; .rdata$r:IArchiveUpdateCallbackFile::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00003C8C                                         ; const type_info::`vftable'
.data:00003C90                 db    0
.data:00003C91                 db    0
.data:00003C92                 db    0
.data:00003C93                 db    0
.data:00003C94                 db  2Eh ; .
.data:00003C95                 db  3Fh ; ?
.data:00003C96                 db  41h ; A
.data:00003C97                 db  55h ; U
.data:00003C98                 db  49h ; I
.data:00003C99                 db  41h ; A
.data:00003C9A                 db  72h ; r
.data:00003C9B                 db  63h ; c
.data:00003C9C                 db  68h ; h
.data:00003C9D                 db  69h ; i
.data:00003C9E                 db  76h ; v
.data:00003C9F                 db  65h ; e
.data:00003CA0                 db  55h ; U
.data:00003CA1                 db  70h ; p
.data:00003CA2                 db  64h ; d
.data:00003CA3                 db  61h ; a
.data:00003CA4                 db  74h ; t
.data:00003CA5                 db  65h ; e
.data:00003CA6                 db  43h ; C
.data:00003CA7                 db  61h ; a
.data:00003CA8                 db  6Ch ; l
.data:00003CA9                 db  6Ch ; l
.data:00003CAA                 db  62h ; b
.data:00003CAB                 db  61h ; a
.data:00003CAC                 db  63h ; c
.data:00003CAD                 db  6Bh ; k
.data:00003CAE                 db  46h ; F
.data:00003CAF                 db  69h ; i
.data:00003CB0                 db  6Ch ; l
.data:00003CB1                 db  65h ; e
.data:00003CB2                 db  40h ; @
.data:00003CB3                 db  40h ; @
.data:00003CB4                 db    0
.data:00003CB5                 align 4
.data:00003CB5 _data           ends
.data:00003CB5
.rdata$r:00003CB8 ; ===========================================================================
.rdata$r:00003CB8
.rdata$r:00003CB8 ; Segment type: Pure data
.rdata$r:00003CB8 ; Segment permissions: Read
.rdata$r:00003CB8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003CB8                 assume cs:_rdata$r
.rdata$r:00003CB8                 ;org 3CB8h
.rdata$r:00003CB8 ; COMDAT (pick any)
.rdata$r:00003CB8                 public ??_R3IArchiveUpdateCallbackFile@@8
.rdata$r:00003CB8 ; IArchiveUpdateCallbackFile::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003CB8 ??_R3IArchiveUpdateCallbackFile@@8 db    0 ; DATA XREF: .rdata$r:00003C88o
.rdata$r:00003CB8                                         ; .rdata$r:00003CECo ...
.rdata$r:00003CB9                 db    0
.rdata$r:00003CBA                 db    0
.rdata$r:00003CBB                 db    0
.rdata$r:00003CBC                 db    0
.rdata$r:00003CBD                 db    0
.rdata$r:00003CBE                 db    0
.rdata$r:00003CBF                 db    0
.rdata$r:00003CC0                 db    2
.rdata$r:00003CC1                 db    0
.rdata$r:00003CC2                 db    0
.rdata$r:00003CC3                 db    0
.rdata$r:00003CC4                 dd offset ??_R2IArchiveUpdateCallbackFile@@8 ; IArchiveUpdateCallbackFile::`RTTI Base Class Array'
.rdata$r:00003CC4 _rdata$r        ends
.rdata$r:00003CC4
.rdata$r:00003CC8 ; ===========================================================================
.rdata$r:00003CC8
.rdata$r:00003CC8 ; Segment type: Pure data
.rdata$r:00003CC8 ; Segment permissions: Read
.rdata$r:00003CC8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003CC8                 assume cs:_rdata$r
.rdata$r:00003CC8                 ;org 3CC8h
.rdata$r:00003CC8 ; COMDAT (pick any)
.rdata$r:00003CC8                 public ??_R2IArchiveUpdateCallbackFile@@8
.rdata$r:00003CC8 ; IArchiveUpdateCallbackFile::`RTTI Base Class Array'
.rdata$r:00003CC8 ??_R2IArchiveUpdateCallbackFile@@8 dd offset ??_R1A@?0A@EA@IArchiveUpdateCallbackFile@@8
.rdata$r:00003CC8                                         ; DATA XREF: .rdata$r:00003CC4o
.rdata$r:00003CC8                                         ; IArchiveUpdateCallbackFile::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003CCC                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003CD0                 db    0
.rdata$r:00003CD1                 align 4
.rdata$r:00003CD1 _rdata$r        ends
.rdata$r:00003CD1
.rdata$r:00003CD4 ; ===========================================================================
.rdata$r:00003CD4
.rdata$r:00003CD4 ; Segment type: Pure data
.rdata$r:00003CD4 ; Segment permissions: Read
.rdata$r:00003CD4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003CD4                 assume cs:_rdata$r
.rdata$r:00003CD4                 ;org 3CD4h
.rdata$r:00003CD4 ; COMDAT (pick any)
.rdata$r:00003CD4                 public ??_R1A@?0A@EA@IArchiveUpdateCallbackFile@@8
.rdata$r:00003CD4 ; IArchiveUpdateCallbackFile::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00003CD4 ??_R1A@?0A@EA@IArchiveUpdateCallbackFile@@8 dd offset ??_R0?AUIArchiveUpdateCallbackFile@@@8
.rdata$r:00003CD4                                         ; DATA XREF: .rdata$r:IArchiveUpdateCallbackFile::`RTTI Base Class Array'o
.rdata$r:00003CD4                                         ; IArchiveUpdateCallbackFile `RTTI Type Descriptor'
.rdata$r:00003CD8                 db    1
.rdata$r:00003CD9                 db    0
.rdata$r:00003CDA                 db    0
.rdata$r:00003CDB                 db    0
.rdata$r:00003CDC                 db    0
.rdata$r:00003CDD                 db    0
.rdata$r:00003CDE                 db    0
.rdata$r:00003CDF                 db    0
.rdata$r:00003CE0                 db 0FFh
.rdata$r:00003CE1                 db 0FFh
.rdata$r:00003CE2                 db 0FFh
.rdata$r:00003CE3                 db 0FFh
.rdata$r:00003CE4                 db    0
.rdata$r:00003CE5                 db    0
.rdata$r:00003CE6                 db    0
.rdata$r:00003CE7                 db    0
.rdata$r:00003CE8                 db  40h ; @
.rdata$r:00003CE9                 db    0
.rdata$r:00003CEA                 db    0
.rdata$r:00003CEB                 db    0
.rdata$r:00003CEC                 dd offset ??_R3IArchiveUpdateCallbackFile@@8 ; IArchiveUpdateCallbackFile::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003CEC _rdata$r        ends
.rdata$r:00003CEC
.rdata$r:00003CF0 ; ===========================================================================
.rdata$r:00003CF0
.rdata$r:00003CF0 ; Segment type: Pure data
.rdata$r:00003CF0 ; Segment permissions: Read
.rdata$r:00003CF0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003CF0                 assume cs:_rdata$r
.rdata$r:00003CF0                 ;org 3CF0h
.rdata$r:00003CF0 ; COMDAT (pick any)
.rdata$r:00003CF0                 public ??_R13?0A@EC@IUnknown@@8
.rdata$r:00003CF0 ; IUnknown::`RTTI Base Class Descriptor at (4, -1, 0, 66)'
.rdata$r:00003CF0 ??_R13?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00003CF0                                         ; DATA XREF: .rdata$r:00003A70o
.rdata$r:00003CF0                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00003CF4                 align 8
.rdata$r:00003CF8                 db    4
.rdata$r:00003CF9                 db    0
.rdata$r:00003CFA                 db    0
.rdata$r:00003CFB                 db    0
.rdata$r:00003CFC                 db 0FFh
.rdata$r:00003CFD                 db 0FFh
.rdata$r:00003CFE                 db 0FFh
.rdata$r:00003CFF                 db 0FFh
.rdata$r:00003D00                 db    0
.rdata$r:00003D01                 db    0
.rdata$r:00003D02                 db    0
.rdata$r:00003D03                 db    0
.rdata$r:00003D04                 db  42h ; B
.rdata$r:00003D05                 db    0
.rdata$r:00003D06                 db    0
.rdata$r:00003D07                 db    0
.rdata$r:00003D08                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003D08 _rdata$r        ends
.rdata$r:00003D08
.rdata$r:00003D0C ; ===========================================================================
.rdata$r:00003D0C
.rdata$r:00003D0C ; Segment type: Pure data
.rdata$r:00003D0C ; Segment permissions: Read
.rdata$r:00003D0C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003D0C                 assume cs:_rdata$r
.rdata$r:00003D0C                 ;org 3D0Ch
.rdata$r:00003D0C ; COMDAT (pick any)
.rdata$r:00003D0C                 public ??_R17?0A@EA@IArchiveExtractCallbackMessage@@8
.rdata$r:00003D0C ; IArchiveExtractCallbackMessage::`RTTI Base Class Descriptor at (8, -1, 0, 64)'
.rdata$r:00003D0C ??_R17?0A@EA@IArchiveExtractCallbackMessage@@8 dd offset ??_R0?AUIArchiveExtractCallbackMessage@@@8
.rdata$r:00003D0C                                         ; DATA XREF: .rdata$r:00003A74o
.rdata$r:00003D0C                                         ; IArchiveExtractCallbackMessage `RTTI Type Descriptor'
.rdata$r:00003D10                 db    2
.rdata$r:00003D11                 db    0
.rdata$r:00003D12                 db    0
.rdata$r:00003D13                 db    0
.rdata$r:00003D14                 db    8
.rdata$r:00003D15                 db    0
.rdata$r:00003D16                 db    0
.rdata$r:00003D17                 db    0
.rdata$r:00003D18                 db 0FFh
.rdata$r:00003D19                 db 0FFh
.rdata$r:00003D1A                 db 0FFh
.rdata$r:00003D1B                 db 0FFh
.rdata$r:00003D1C                 db    0
.rdata$r:00003D1D                 db    0
.rdata$r:00003D1E                 db    0
.rdata$r:00003D1F                 db    0
.rdata$r:00003D20                 db  40h ; @
.rdata$r:00003D21                 db    0
.rdata$r:00003D22                 db    0
.rdata$r:00003D23                 db    0
.rdata$r:00003D24                 dd offset ??_R3IArchiveExtractCallbackMessage@@8 ; IArchiveExtractCallbackMessage::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003D24 _rdata$r        ends
.rdata$r:00003D24
.data:00003D28 ; ===========================================================================
.data:00003D28
.data:00003D28 ; Segment type: Pure data
.data:00003D28 ; Segment permissions: Read/Write
.data:00003D28 _data           segment dword public 'DATA' use32
.data:00003D28                 assume cs:_data
.data:00003D28                 ;org 3D28h
.data:00003D28 ; COMDAT (pick any)
.data:00003D28                 public ??_R0?AUIArchiveExtractCallbackMessage@@@8
.data:00003D28 ; struct IArchiveExtractCallbackMessage `RTTI Type Descriptor'
.data:00003D28 ??_R0?AUIArchiveExtractCallbackMessage@@@8 dd offset ??_7type_info@@6B@
.data:00003D28                                         ; DATA XREF: .rdata$r:IArchiveExtractCallbackMessage::`RTTI Base Class Descriptor at (8,-1,0,64)'o
.data:00003D28                                         ; .rdata$r:IArchiveExtractCallbackMessage::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00003D28                                         ; const type_info::`vftable'
.data:00003D2C                 align 10h
.data:00003D30 a_?auiarchiveex db '.?AUIArchiveExtractCallbackMessage@@',0
.data:00003D55                 align 4
.data:00003D55 _data           ends
.data:00003D55
.rdata$r:00003D58 ; ===========================================================================
.rdata$r:00003D58
.rdata$r:00003D58 ; Segment type: Pure data
.rdata$r:00003D58 ; Segment permissions: Read
.rdata$r:00003D58 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003D58                 assume cs:_rdata$r
.rdata$r:00003D58                 ;org 3D58h
.rdata$r:00003D58 ; COMDAT (pick any)
.rdata$r:00003D58                 public ??_R3IArchiveExtractCallbackMessage@@8
.rdata$r:00003D58 ; IArchiveExtractCallbackMessage::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003D58 ??_R3IArchiveExtractCallbackMessage@@8 db    0
.rdata$r:00003D58                                         ; DATA XREF: .rdata$r:00003D24o
.rdata$r:00003D58                                         ; .rdata$r:00003D90o ...
.rdata$r:00003D59                 db    0
.rdata$r:00003D5A                 db    0
.rdata$r:00003D5B                 db    0
.rdata$r:00003D5C                 db    0
.rdata$r:00003D5D                 db    0
.rdata$r:00003D5E                 db    0
.rdata$r:00003D5F                 db    0
.rdata$r:00003D60                 db    3
.rdata$r:00003D61                 db    0
.rdata$r:00003D62                 db    0
.rdata$r:00003D63                 db    0
.rdata$r:00003D64                 dd offset ??_R2IArchiveExtractCallbackMessage@@8 ; IArchiveExtractCallbackMessage::`RTTI Base Class Array'
.rdata$r:00003D64 _rdata$r        ends
.rdata$r:00003D64
.rdata$r:00003D68 ; ===========================================================================
.rdata$r:00003D68
.rdata$r:00003D68 ; Segment type: Pure data
.rdata$r:00003D68 ; Segment permissions: Read
.rdata$r:00003D68 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003D68                 assume cs:_rdata$r
.rdata$r:00003D68                 ;org 3D68h
.rdata$r:00003D68 ; COMDAT (pick any)
.rdata$r:00003D68                 public ??_R2IArchiveExtractCallbackMessage@@8
.rdata$r:00003D68 ; IArchiveExtractCallbackMessage::`RTTI Base Class Array'
.rdata$r:00003D68 ??_R2IArchiveExtractCallbackMessage@@8 dd offset ??_R1A@?0A@EA@IArchiveExtractCallbackMessage@@8
.rdata$r:00003D68                                         ; DATA XREF: .rdata$r:00003D64o
.rdata$r:00003D68                                         ; IArchiveExtractCallbackMessage::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003D6C                 dd offset ??_R1A@?0A@EA@IProgress@@8 ; IProgress::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003D70                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003D74                 db    0
.rdata$r:00003D75                 align 4
.rdata$r:00003D75 _rdata$r        ends
.rdata$r:00003D75
.rdata$r:00003D78 ; ===========================================================================
.rdata$r:00003D78
.rdata$r:00003D78 ; Segment type: Pure data
.rdata$r:00003D78 ; Segment permissions: Read
.rdata$r:00003D78 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003D78                 assume cs:_rdata$r
.rdata$r:00003D78                 ;org 3D78h
.rdata$r:00003D78 ; COMDAT (pick any)
.rdata$r:00003D78                 public ??_R1A@?0A@EA@IArchiveExtractCallbackMessage@@8
.rdata$r:00003D78 ; IArchiveExtractCallbackMessage::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00003D78 ??_R1A@?0A@EA@IArchiveExtractCallbackMessage@@8 dd offset ??_R0?AUIArchiveExtractCallbackMessage@@@8
.rdata$r:00003D78                                         ; DATA XREF: .rdata$r:IArchiveExtractCallbackMessage::`RTTI Base Class Array'o
.rdata$r:00003D78                                         ; IArchiveExtractCallbackMessage `RTTI Type Descriptor'
.rdata$r:00003D7C                 db    2
.rdata$r:00003D7D                 db    0
.rdata$r:00003D7E                 db    0
.rdata$r:00003D7F                 db    0
.rdata$r:00003D80                 db    0
.rdata$r:00003D81                 db    0
.rdata$r:00003D82                 db    0
.rdata$r:00003D83                 db    0
.rdata$r:00003D84                 db 0FFh
.rdata$r:00003D85                 db 0FFh
.rdata$r:00003D86                 db 0FFh
.rdata$r:00003D87                 db 0FFh
.rdata$r:00003D88                 db    0
.rdata$r:00003D89                 db    0
.rdata$r:00003D8A                 db    0
.rdata$r:00003D8B                 db    0
.rdata$r:00003D8C                 db  40h ; @
.rdata$r:00003D8D                 db    0
.rdata$r:00003D8E                 db    0
.rdata$r:00003D8F                 db    0
.rdata$r:00003D90                 dd offset ??_R3IArchiveExtractCallbackMessage@@8 ; IArchiveExtractCallbackMessage::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003D90 _rdata$r        ends
.rdata$r:00003D90
.rdata$r:00003D94 ; ===========================================================================
.rdata$r:00003D94
.rdata$r:00003D94 ; Segment type: Pure data
.rdata$r:00003D94 ; Segment permissions: Read
.rdata$r:00003D94 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003D94                 assume cs:_rdata$r
.rdata$r:00003D94                 ;org 3D94h
.rdata$r:00003D94 ; COMDAT (pick any)
.rdata$r:00003D94                 public ??_R17?0A@EC@IProgress@@8
.rdata$r:00003D94 ; IProgress::`RTTI Base Class Descriptor at (8, -1, 0, 66)'
.rdata$r:00003D94 ??_R17?0A@EC@IProgress@@8 dd offset ??_R0?AUIProgress@@@8
.rdata$r:00003D94                                         ; DATA XREF: .rdata$r:00003A78o
.rdata$r:00003D94                                         ; IProgress `RTTI Type Descriptor'
.rdata$r:00003D98                 db    1
.rdata$r:00003D99                 db    0
.rdata$r:00003D9A                 db    0
.rdata$r:00003D9B                 db    0
.rdata$r:00003D9C                 db    8
.rdata$r:00003D9D                 db    0
.rdata$r:00003D9E                 db    0
.rdata$r:00003D9F                 db    0
.rdata$r:00003DA0                 db 0FFh
.rdata$r:00003DA1                 db 0FFh
.rdata$r:00003DA2                 db 0FFh
.rdata$r:00003DA3                 db 0FFh
.rdata$r:00003DA4                 db    0
.rdata$r:00003DA5                 db    0
.rdata$r:00003DA6                 db    0
.rdata$r:00003DA7                 db    0
.rdata$r:00003DA8                 db  42h ; B
.rdata$r:00003DA9                 db    0
.rdata$r:00003DAA                 db    0
.rdata$r:00003DAB                 db    0
.rdata$r:00003DAC                 dd offset ??_R3IProgress@@8 ; IProgress::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003DAC _rdata$r        ends
.rdata$r:00003DAC
.rdata$r:00003DB0 ; ===========================================================================
.rdata$r:00003DB0
.rdata$r:00003DB0 ; Segment type: Pure data
.rdata$r:00003DB0 ; Segment permissions: Read
.rdata$r:00003DB0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003DB0                 assume cs:_rdata$r
.rdata$r:00003DB0                 ;org 3DB0h
.rdata$r:00003DB0 ; COMDAT (pick any)
.rdata$r:00003DB0                 public ??_R17?0A@EC@IUnknown@@8
.rdata$r:00003DB0 ; IUnknown::`RTTI Base Class Descriptor at (8, -1, 0, 66)'
.rdata$r:00003DB0 ??_R17?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00003DB0                                         ; DATA XREF: .rdata$r:00003A7Co
.rdata$r:00003DB0                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00003DB4                 align 8
.rdata$r:00003DB8                 db    8
.rdata$r:00003DB9                 db    0
.rdata$r:00003DBA                 db    0
.rdata$r:00003DBB                 db    0
.rdata$r:00003DBC                 db 0FFh
.rdata$r:00003DBD                 db 0FFh
.rdata$r:00003DBE                 db 0FFh
.rdata$r:00003DBF                 db 0FFh
.rdata$r:00003DC0                 db    0
.rdata$r:00003DC1                 db    0
.rdata$r:00003DC2                 db    0
.rdata$r:00003DC3                 db    0
.rdata$r:00003DC4                 db  42h ; B
.rdata$r:00003DC5                 db    0
.rdata$r:00003DC6                 db    0
.rdata$r:00003DC7                 db    0
.rdata$r:00003DC8                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003DC8 _rdata$r        ends
.rdata$r:00003DC8
.rdata$r:00003DCC ; ===========================================================================
.rdata$r:00003DCC
.rdata$r:00003DCC ; Segment type: Pure data
.rdata$r:00003DCC ; Segment permissions: Read
.rdata$r:00003DCC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003DCC                 assume cs:_rdata$r
.rdata$r:00003DCC                 ;org 3DCCh
.rdata$r:00003DCC ; COMDAT (pick any)
.rdata$r:00003DCC                 public ??_R1M@?0A@EA@IArchiveGetRawProps@@8
.rdata$r:00003DCC ; IArchiveGetRawProps::`RTTI Base Class Descriptor at (12, -1, 0, 64)'
.rdata$r:00003DCC ??_R1M@?0A@EA@IArchiveGetRawProps@@8 dd offset ??_R0?AUIArchiveGetRawProps@@@8
.rdata$r:00003DCC                                         ; DATA XREF: .rdata$r:00003A80o
.rdata$r:00003DCC                                         ; IArchiveGetRawProps `RTTI Type Descriptor'
.rdata$r:00003DD0                 db    1
.rdata$r:00003DD1                 db    0
.rdata$r:00003DD2                 db    0
.rdata$r:00003DD3                 db    0
.rdata$r:00003DD4                 db  0Ch
.rdata$r:00003DD5                 db    0
.rdata$r:00003DD6                 db    0
.rdata$r:00003DD7                 db    0
.rdata$r:00003DD8                 db 0FFh
.rdata$r:00003DD9                 db 0FFh
.rdata$r:00003DDA                 db 0FFh
.rdata$r:00003DDB                 db 0FFh
.rdata$r:00003DDC                 db    0
.rdata$r:00003DDD                 db    0
.rdata$r:00003DDE                 db    0
.rdata$r:00003DDF                 db    0
.rdata$r:00003DE0                 db  40h ; @
.rdata$r:00003DE1                 db    0
.rdata$r:00003DE2                 db    0
.rdata$r:00003DE3                 db    0
.rdata$r:00003DE4                 dd offset ??_R3IArchiveGetRawProps@@8 ; IArchiveGetRawProps::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003DE4 _rdata$r        ends
.rdata$r:00003DE4
.data:00003DE8 ; ===========================================================================
.data:00003DE8
.data:00003DE8 ; Segment type: Pure data
.data:00003DE8 ; Segment permissions: Read/Write
.data:00003DE8 _data           segment dword public 'DATA' use32
.data:00003DE8                 assume cs:_data
.data:00003DE8                 ;org 3DE8h
.data:00003DE8 ; COMDAT (pick any)
.data:00003DE8                 public ??_R0?AUIArchiveGetRawProps@@@8
.data:00003DE8 ; struct IArchiveGetRawProps `RTTI Type Descriptor'
.data:00003DE8 ??_R0?AUIArchiveGetRawProps@@@8 dd offset ??_7type_info@@6B@
.data:00003DE8                                         ; DATA XREF: .rdata$r:IArchiveGetRawProps::`RTTI Base Class Descriptor at (12,-1,0,64)'o
.data:00003DE8                                         ; .rdata$r:IArchiveGetRawProps::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00003DE8                                         ; const type_info::`vftable'
.data:00003DEC                 align 10h
.data:00003DF0 a_?auiarchivege db '.?AUIArchiveGetRawProps@@',0
.data:00003E0A                 align 4
.data:00003E0A _data           ends
.data:00003E0A
.rdata$r:00003E0C ; ===========================================================================
.rdata$r:00003E0C
.rdata$r:00003E0C ; Segment type: Pure data
.rdata$r:00003E0C ; Segment permissions: Read
.rdata$r:00003E0C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003E0C                 assume cs:_rdata$r
.rdata$r:00003E0C                 ;org 3E0Ch
.rdata$r:00003E0C ; COMDAT (pick any)
.rdata$r:00003E0C                 public ??_R3IArchiveGetRawProps@@8
.rdata$r:00003E0C ; IArchiveGetRawProps::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003E0C ??_R3IArchiveGetRawProps@@8 db    0     ; DATA XREF: .rdata$r:00003DE4o
.rdata$r:00003E0C                                         ; .rdata$r:00003E40o ...
.rdata$r:00003E0D                 db    0
.rdata$r:00003E0E                 db    0
.rdata$r:00003E0F                 db    0
.rdata$r:00003E10                 db    0
.rdata$r:00003E11                 db    0
.rdata$r:00003E12                 db    0
.rdata$r:00003E13                 db    0
.rdata$r:00003E14                 db    2
.rdata$r:00003E15                 db    0
.rdata$r:00003E16                 db    0
.rdata$r:00003E17                 db    0
.rdata$r:00003E18                 dd offset ??_R2IArchiveGetRawProps@@8 ; IArchiveGetRawProps::`RTTI Base Class Array'
.rdata$r:00003E18 _rdata$r        ends
.rdata$r:00003E18
.rdata$r:00003E1C ; ===========================================================================
.rdata$r:00003E1C
.rdata$r:00003E1C ; Segment type: Pure data
.rdata$r:00003E1C ; Segment permissions: Read
.rdata$r:00003E1C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003E1C                 assume cs:_rdata$r
.rdata$r:00003E1C                 ;org 3E1Ch
.rdata$r:00003E1C ; COMDAT (pick any)
.rdata$r:00003E1C                 public ??_R2IArchiveGetRawProps@@8
.rdata$r:00003E1C ; IArchiveGetRawProps::`RTTI Base Class Array'
.rdata$r:00003E1C ??_R2IArchiveGetRawProps@@8 dd offset ??_R1A@?0A@EA@IArchiveGetRawProps@@8
.rdata$r:00003E1C                                         ; DATA XREF: .rdata$r:00003E18o
.rdata$r:00003E1C                                         ; IArchiveGetRawProps::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003E20                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003E24                 db    0
.rdata$r:00003E25                 align 4
.rdata$r:00003E25 _rdata$r        ends
.rdata$r:00003E25
.rdata$r:00003E28 ; ===========================================================================
.rdata$r:00003E28
.rdata$r:00003E28 ; Segment type: Pure data
.rdata$r:00003E28 ; Segment permissions: Read
.rdata$r:00003E28 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003E28                 assume cs:_rdata$r
.rdata$r:00003E28                 ;org 3E28h
.rdata$r:00003E28 ; COMDAT (pick any)
.rdata$r:00003E28                 public ??_R1A@?0A@EA@IArchiveGetRawProps@@8
.rdata$r:00003E28 ; IArchiveGetRawProps::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00003E28 ??_R1A@?0A@EA@IArchiveGetRawProps@@8 dd offset ??_R0?AUIArchiveGetRawProps@@@8
.rdata$r:00003E28                                         ; DATA XREF: .rdata$r:IArchiveGetRawProps::`RTTI Base Class Array'o
.rdata$r:00003E28                                         ; IArchiveGetRawProps `RTTI Type Descriptor'
.rdata$r:00003E2C                 db    1
.rdata$r:00003E2D                 db    0
.rdata$r:00003E2E                 db    0
.rdata$r:00003E2F                 db    0
.rdata$r:00003E30                 db    0
.rdata$r:00003E31                 db    0
.rdata$r:00003E32                 db    0
.rdata$r:00003E33                 db    0
.rdata$r:00003E34                 db 0FFh
.rdata$r:00003E35                 db 0FFh
.rdata$r:00003E36                 db 0FFh
.rdata$r:00003E37                 db 0FFh
.rdata$r:00003E38                 db    0
.rdata$r:00003E39                 db    0
.rdata$r:00003E3A                 db    0
.rdata$r:00003E3B                 db    0
.rdata$r:00003E3C                 db  40h ; @
.rdata$r:00003E3D                 db    0
.rdata$r:00003E3E                 db    0
.rdata$r:00003E3F                 db    0
.rdata$r:00003E40                 dd offset ??_R3IArchiveGetRawProps@@8 ; IArchiveGetRawProps::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003E40 _rdata$r        ends
.rdata$r:00003E40
.rdata$r:00003E44 ; ===========================================================================
.rdata$r:00003E44
.rdata$r:00003E44 ; Segment type: Pure data
.rdata$r:00003E44 ; Segment permissions: Read
.rdata$r:00003E44 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003E44                 assume cs:_rdata$r
.rdata$r:00003E44                 ;org 3E44h
.rdata$r:00003E44 ; COMDAT (pick any)
.rdata$r:00003E44                 public ??_R1M@?0A@EC@IUnknown@@8
.rdata$r:00003E44 ; IUnknown::`RTTI Base Class Descriptor at (12, -1, 0, 66)'
.rdata$r:00003E44 ??_R1M@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00003E44                                         ; DATA XREF: .rdata$r:00003A84o
.rdata$r:00003E44                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00003E48                 db    0
.rdata$r:00003E49                 db    0
.rdata$r:00003E4A                 db    0
.rdata$r:00003E4B                 db    0
.rdata$r:00003E4C                 db  0Ch
.rdata$r:00003E4D                 db    0
.rdata$r:00003E4E                 db    0
.rdata$r:00003E4F                 db    0
.rdata$r:00003E50                 db 0FFh
.rdata$r:00003E51                 db 0FFh
.rdata$r:00003E52                 db 0FFh
.rdata$r:00003E53                 db 0FFh
.rdata$r:00003E54                 db    0
.rdata$r:00003E55                 db    0
.rdata$r:00003E56                 db    0
.rdata$r:00003E57                 db    0
.rdata$r:00003E58                 db  42h ; B
.rdata$r:00003E59                 db    0
.rdata$r:00003E5A                 db    0
.rdata$r:00003E5B                 db    0
.rdata$r:00003E5C                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003E5C _rdata$r        ends
.rdata$r:00003E5C
.rdata$r:00003E60 ; ===========================================================================
.rdata$r:00003E60
.rdata$r:00003E60 ; Segment type: Pure data
.rdata$r:00003E60 ; Segment permissions: Read
.rdata$r:00003E60 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003E60                 assume cs:_rdata$r
.rdata$r:00003E60                 ;org 3E60h
.rdata$r:00003E60 ; COMDAT (pick any)
.rdata$r:00003E60                 public ??_R1BA@?0A@EA@IArchiveGetRootProps@@8
.rdata$r:00003E60 ; IArchiveGetRootProps::`RTTI Base Class Descriptor at (16, -1, 0, 64)'
.rdata$r:00003E60 ??_R1BA@?0A@EA@IArchiveGetRootProps@@8 dd offset ??_R0?AUIArchiveGetRootProps@@@8
.rdata$r:00003E60                                         ; DATA XREF: .rdata$r:00003A88o
.rdata$r:00003E60                                         ; IArchiveGetRootProps `RTTI Type Descriptor'
.rdata$r:00003E64                 db    1
.rdata$r:00003E65                 db    0
.rdata$r:00003E66                 db    0
.rdata$r:00003E67                 db    0
.rdata$r:00003E68                 db  10h
.rdata$r:00003E69                 db    0
.rdata$r:00003E6A                 db    0
.rdata$r:00003E6B                 db    0
.rdata$r:00003E6C                 db 0FFh
.rdata$r:00003E6D                 db 0FFh
.rdata$r:00003E6E                 db 0FFh
.rdata$r:00003E6F                 db 0FFh
.rdata$r:00003E70                 db    0
.rdata$r:00003E71                 db    0
.rdata$r:00003E72                 db    0
.rdata$r:00003E73                 db    0
.rdata$r:00003E74                 db  40h ; @
.rdata$r:00003E75                 db    0
.rdata$r:00003E76                 db    0
.rdata$r:00003E77                 db    0
.rdata$r:00003E78                 dd offset ??_R3IArchiveGetRootProps@@8 ; IArchiveGetRootProps::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003E78 _rdata$r        ends
.rdata$r:00003E78
.data:00003E7C ; ===========================================================================
.data:00003E7C
.data:00003E7C ; Segment type: Pure data
.data:00003E7C ; Segment permissions: Read/Write
.data:00003E7C _data           segment dword public 'DATA' use32
.data:00003E7C                 assume cs:_data
.data:00003E7C                 ;org 3E7Ch
.data:00003E7C ; COMDAT (pick any)
.data:00003E7C                 public ??_R0?AUIArchiveGetRootProps@@@8
.data:00003E7C ; struct IArchiveGetRootProps `RTTI Type Descriptor'
.data:00003E7C ??_R0?AUIArchiveGetRootProps@@@8 dd offset ??_7type_info@@6B@
.data:00003E7C                                         ; DATA XREF: .rdata$r:IArchiveGetRootProps::`RTTI Base Class Descriptor at (16,-1,0,64)'o
.data:00003E7C                                         ; .rdata$r:IArchiveGetRootProps::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00003E7C                                         ; const type_info::`vftable'
.data:00003E80                 db    0
.data:00003E81                 db    0
.data:00003E82                 db    0
.data:00003E83                 db    0
.data:00003E84                 db  2Eh ; .
.data:00003E85                 db  3Fh ; ?
.data:00003E86                 db  41h ; A
.data:00003E87                 db  55h ; U
.data:00003E88                 db  49h ; I
.data:00003E89                 db  41h ; A
.data:00003E8A                 db  72h ; r
.data:00003E8B                 db  63h ; c
.data:00003E8C                 db  68h ; h
.data:00003E8D                 db  69h ; i
.data:00003E8E                 db  76h ; v
.data:00003E8F                 db  65h ; e
.data:00003E90                 db  47h ; G
.data:00003E91                 db  65h ; e
.data:00003E92                 db  74h ; t
.data:00003E93                 db  52h ; R
.data:00003E94                 db  6Fh ; o
.data:00003E95                 db  6Fh ; o
.data:00003E96                 db  74h ; t
.data:00003E97                 db  50h ; P
.data:00003E98                 db  72h ; r
.data:00003E99                 db  6Fh ; o
.data:00003E9A                 db  70h ; p
.data:00003E9B                 db  73h ; s
.data:00003E9C                 db  40h ; @
.data:00003E9D                 db  40h ; @
.data:00003E9E                 db    0
.data:00003E9F                 align 10h
.data:00003E9F _data           ends
.data:00003E9F
.rdata$r:00003EA0 ; ===========================================================================
.rdata$r:00003EA0
.rdata$r:00003EA0 ; Segment type: Pure data
.rdata$r:00003EA0 ; Segment permissions: Read
.rdata$r:00003EA0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003EA0                 assume cs:_rdata$r
.rdata$r:00003EA0                 ;org 3EA0h
.rdata$r:00003EA0 ; COMDAT (pick any)
.rdata$r:00003EA0                 public ??_R3IArchiveGetRootProps@@8
.rdata$r:00003EA0 ; IArchiveGetRootProps::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003EA0 ??_R3IArchiveGetRootProps@@8 db    0    ; DATA XREF: .rdata$r:00003E78o
.rdata$r:00003EA0                                         ; .rdata$r:00003ED4o ...
.rdata$r:00003EA1                 db    0
.rdata$r:00003EA2                 db    0
.rdata$r:00003EA3                 db    0
.rdata$r:00003EA4                 db    0
.rdata$r:00003EA5                 db    0
.rdata$r:00003EA6                 db    0
.rdata$r:00003EA7                 db    0
.rdata$r:00003EA8                 db    2
.rdata$r:00003EA9                 db    0
.rdata$r:00003EAA                 db    0
.rdata$r:00003EAB                 db    0
.rdata$r:00003EAC                 dd offset ??_R2IArchiveGetRootProps@@8 ; IArchiveGetRootProps::`RTTI Base Class Array'
.rdata$r:00003EAC _rdata$r        ends
.rdata$r:00003EAC
.rdata$r:00003EB0 ; ===========================================================================
.rdata$r:00003EB0
.rdata$r:00003EB0 ; Segment type: Pure data
.rdata$r:00003EB0 ; Segment permissions: Read
.rdata$r:00003EB0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003EB0                 assume cs:_rdata$r
.rdata$r:00003EB0                 ;org 3EB0h
.rdata$r:00003EB0 ; COMDAT (pick any)
.rdata$r:00003EB0                 public ??_R2IArchiveGetRootProps@@8
.rdata$r:00003EB0 ; IArchiveGetRootProps::`RTTI Base Class Array'
.rdata$r:00003EB0 ??_R2IArchiveGetRootProps@@8 dd offset ??_R1A@?0A@EA@IArchiveGetRootProps@@8
.rdata$r:00003EB0                                         ; DATA XREF: .rdata$r:00003EACo
.rdata$r:00003EB0                                         ; IArchiveGetRootProps::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003EB4                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003EB8                 db    0
.rdata$r:00003EB9                 align 4
.rdata$r:00003EB9 _rdata$r        ends
.rdata$r:00003EB9
.rdata$r:00003EBC ; ===========================================================================
.rdata$r:00003EBC
.rdata$r:00003EBC ; Segment type: Pure data
.rdata$r:00003EBC ; Segment permissions: Read
.rdata$r:00003EBC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003EBC                 assume cs:_rdata$r
.rdata$r:00003EBC                 ;org 3EBCh
.rdata$r:00003EBC ; COMDAT (pick any)
.rdata$r:00003EBC                 public ??_R1A@?0A@EA@IArchiveGetRootProps@@8
.rdata$r:00003EBC ; IArchiveGetRootProps::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00003EBC ??_R1A@?0A@EA@IArchiveGetRootProps@@8 dd offset ??_R0?AUIArchiveGetRootProps@@@8
.rdata$r:00003EBC                                         ; DATA XREF: .rdata$r:IArchiveGetRootProps::`RTTI Base Class Array'o
.rdata$r:00003EBC                                         ; IArchiveGetRootProps `RTTI Type Descriptor'
.rdata$r:00003EC0                 db    1
.rdata$r:00003EC1                 db    0
.rdata$r:00003EC2                 db    0
.rdata$r:00003EC3                 db    0
.rdata$r:00003EC4                 db    0
.rdata$r:00003EC5                 db    0
.rdata$r:00003EC6                 db    0
.rdata$r:00003EC7                 db    0
.rdata$r:00003EC8                 db 0FFh
.rdata$r:00003EC9                 db 0FFh
.rdata$r:00003ECA                 db 0FFh
.rdata$r:00003ECB                 db 0FFh
.rdata$r:00003ECC                 db    0
.rdata$r:00003ECD                 db    0
.rdata$r:00003ECE                 db    0
.rdata$r:00003ECF                 db    0
.rdata$r:00003ED0                 db  40h ; @
.rdata$r:00003ED1                 db    0
.rdata$r:00003ED2                 db    0
.rdata$r:00003ED3                 db    0
.rdata$r:00003ED4                 dd offset ??_R3IArchiveGetRootProps@@8 ; IArchiveGetRootProps::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003ED4 _rdata$r        ends
.rdata$r:00003ED4
.rdata$r:00003ED8 ; ===========================================================================
.rdata$r:00003ED8
.rdata$r:00003ED8 ; Segment type: Pure data
.rdata$r:00003ED8 ; Segment permissions: Read
.rdata$r:00003ED8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003ED8                 assume cs:_rdata$r
.rdata$r:00003ED8                 ;org 3ED8h
.rdata$r:00003ED8 ; COMDAT (pick any)
.rdata$r:00003ED8                 public ??_R1BA@?0A@EC@IUnknown@@8
.rdata$r:00003ED8 ; IUnknown::`RTTI Base Class Descriptor at (16, -1, 0, 66)'
.rdata$r:00003ED8 ??_R1BA@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00003ED8                                         ; DATA XREF: .rdata$r:00003A8Co
.rdata$r:00003ED8                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00003EDC                 align 10h
.rdata$r:00003EE0                 db  10h
.rdata$r:00003EE1                 db    0
.rdata$r:00003EE2                 db    0
.rdata$r:00003EE3                 db    0
.rdata$r:00003EE4                 db 0FFh
.rdata$r:00003EE5                 db 0FFh
.rdata$r:00003EE6                 db 0FFh
.rdata$r:00003EE7                 db 0FFh
.rdata$r:00003EE8                 db    0
.rdata$r:00003EE9                 db    0
.rdata$r:00003EEA                 db    0
.rdata$r:00003EEB                 db    0
.rdata$r:00003EEC                 db  42h ; B
.rdata$r:00003EED                 db    0
.rdata$r:00003EEE                 db    0
.rdata$r:00003EEF                 db    0
.rdata$r:00003EF0                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003EF0 _rdata$r        ends
.rdata$r:00003EF0
.rdata$r:00003EF4 ; ===========================================================================
.rdata$r:00003EF4
.rdata$r:00003EF4 ; Segment type: Pure data
.rdata$r:00003EF4 ; Segment permissions: Read
.rdata$r:00003EF4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003EF4                 assume cs:_rdata$r
.rdata$r:00003EF4                 ;org 3EF4h
.rdata$r:00003EF4 ; COMDAT (pick any)
.rdata$r:00003EF4                 public ??_R1BE@?0A@EA@ICryptoGetTextPassword2@@8
.rdata$r:00003EF4 ; ICryptoGetTextPassword2::`RTTI Base Class Descriptor at (20, -1, 0, 64)'
.rdata$r:00003EF4 ??_R1BE@?0A@EA@ICryptoGetTextPassword2@@8 dd offset ??_R0?AUICryptoGetTextPassword2@@@8
.rdata$r:00003EF4                                         ; DATA XREF: .rdata$r:00003A90o
.rdata$r:00003EF4                                         ; ICryptoGetTextPassword2 `RTTI Type Descriptor'
.rdata$r:00003EF8                 db    1
.rdata$r:00003EF9                 db    0
.rdata$r:00003EFA                 db    0
.rdata$r:00003EFB                 db    0
.rdata$r:00003EFC                 db  14h
.rdata$r:00003EFD                 db    0
.rdata$r:00003EFE                 db    0
.rdata$r:00003EFF                 db    0
.rdata$r:00003F00                 db 0FFh
.rdata$r:00003F01                 db 0FFh
.rdata$r:00003F02                 db 0FFh
.rdata$r:00003F03                 db 0FFh
.rdata$r:00003F04                 db    0
.rdata$r:00003F05                 db    0
.rdata$r:00003F06                 db    0
.rdata$r:00003F07                 db    0
.rdata$r:00003F08                 db  40h ; @
.rdata$r:00003F09                 db    0
.rdata$r:00003F0A                 db    0
.rdata$r:00003F0B                 db    0
.rdata$r:00003F0C                 dd offset ??_R3ICryptoGetTextPassword2@@8 ; ICryptoGetTextPassword2::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003F0C _rdata$r        ends
.rdata$r:00003F0C
.data:00003F10 ; ===========================================================================
.data:00003F10
.data:00003F10 ; Segment type: Pure data
.data:00003F10 ; Segment permissions: Read/Write
.data:00003F10 _data           segment dword public 'DATA' use32
.data:00003F10                 assume cs:_data
.data:00003F10                 ;org 3F10h
.data:00003F10 ; COMDAT (pick any)
.data:00003F10                 public ??_R0?AUICryptoGetTextPassword2@@@8
.data:00003F10 ; struct ICryptoGetTextPassword2 `RTTI Type Descriptor'
.data:00003F10 ??_R0?AUICryptoGetTextPassword2@@@8 dd offset ??_7type_info@@6B@
.data:00003F10                                         ; DATA XREF: .rdata$r:ICryptoGetTextPassword2::`RTTI Base Class Descriptor at (20,-1,0,64)'o
.data:00003F10                                         ; .rdata$r:ICryptoGetTextPassword2::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00003F10                                         ; const type_info::`vftable'
.data:00003F14                 align 8
.data:00003F18 a_?auicryptoget db '.?AUICryptoGetTextPassword2@@',0
.data:00003F36                 align 4
.data:00003F36 _data           ends
.data:00003F36
.rdata$r:00003F38 ; ===========================================================================
.rdata$r:00003F38
.rdata$r:00003F38 ; Segment type: Pure data
.rdata$r:00003F38 ; Segment permissions: Read
.rdata$r:00003F38 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003F38                 assume cs:_rdata$r
.rdata$r:00003F38                 ;org 3F38h
.rdata$r:00003F38 ; COMDAT (pick any)
.rdata$r:00003F38                 public ??_R3ICryptoGetTextPassword2@@8
.rdata$r:00003F38 ; ICryptoGetTextPassword2::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003F38 ??_R3ICryptoGetTextPassword2@@8 db    0 ; DATA XREF: .rdata$r:00003F0Co
.rdata$r:00003F38                                         ; .rdata$r:00003F6Co ...
.rdata$r:00003F39                 db    0
.rdata$r:00003F3A                 db    0
.rdata$r:00003F3B                 db    0
.rdata$r:00003F3C                 db    0
.rdata$r:00003F3D                 db    0
.rdata$r:00003F3E                 db    0
.rdata$r:00003F3F                 db    0
.rdata$r:00003F40                 db    2
.rdata$r:00003F41                 db    0
.rdata$r:00003F42                 db    0
.rdata$r:00003F43                 db    0
.rdata$r:00003F44                 dd offset ??_R2ICryptoGetTextPassword2@@8 ; ICryptoGetTextPassword2::`RTTI Base Class Array'
.rdata$r:00003F44 _rdata$r        ends
.rdata$r:00003F44
.rdata$r:00003F48 ; ===========================================================================
.rdata$r:00003F48
.rdata$r:00003F48 ; Segment type: Pure data
.rdata$r:00003F48 ; Segment permissions: Read
.rdata$r:00003F48 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003F48                 assume cs:_rdata$r
.rdata$r:00003F48                 ;org 3F48h
.rdata$r:00003F48 ; COMDAT (pick any)
.rdata$r:00003F48                 public ??_R2ICryptoGetTextPassword2@@8
.rdata$r:00003F48 ; ICryptoGetTextPassword2::`RTTI Base Class Array'
.rdata$r:00003F48 ??_R2ICryptoGetTextPassword2@@8 dd offset ??_R1A@?0A@EA@ICryptoGetTextPassword2@@8
.rdata$r:00003F48                                         ; DATA XREF: .rdata$r:00003F44o
.rdata$r:00003F48                                         ; ICryptoGetTextPassword2::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003F4C                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003F50                 db    0
.rdata$r:00003F51                 align 4
.rdata$r:00003F51 _rdata$r        ends
.rdata$r:00003F51
.rdata$r:00003F54 ; ===========================================================================
.rdata$r:00003F54
.rdata$r:00003F54 ; Segment type: Pure data
.rdata$r:00003F54 ; Segment permissions: Read
.rdata$r:00003F54 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003F54                 assume cs:_rdata$r
.rdata$r:00003F54                 ;org 3F54h
.rdata$r:00003F54 ; COMDAT (pick any)
.rdata$r:00003F54                 public ??_R1A@?0A@EA@ICryptoGetTextPassword2@@8
.rdata$r:00003F54 ; ICryptoGetTextPassword2::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00003F54 ??_R1A@?0A@EA@ICryptoGetTextPassword2@@8 dd offset ??_R0?AUICryptoGetTextPassword2@@@8
.rdata$r:00003F54                                         ; DATA XREF: .rdata$r:ICryptoGetTextPassword2::`RTTI Base Class Array'o
.rdata$r:00003F54                                         ; ICryptoGetTextPassword2 `RTTI Type Descriptor'
.rdata$r:00003F58                 db    1
.rdata$r:00003F59                 db    0
.rdata$r:00003F5A                 db    0
.rdata$r:00003F5B                 db    0
.rdata$r:00003F5C                 db    0
.rdata$r:00003F5D                 db    0
.rdata$r:00003F5E                 db    0
.rdata$r:00003F5F                 db    0
.rdata$r:00003F60                 db 0FFh
.rdata$r:00003F61                 db 0FFh
.rdata$r:00003F62                 db 0FFh
.rdata$r:00003F63                 db 0FFh
.rdata$r:00003F64                 db    0
.rdata$r:00003F65                 db    0
.rdata$r:00003F66                 db    0
.rdata$r:00003F67                 db    0
.rdata$r:00003F68                 db  40h ; @
.rdata$r:00003F69                 db    0
.rdata$r:00003F6A                 db    0
.rdata$r:00003F6B                 db    0
.rdata$r:00003F6C                 dd offset ??_R3ICryptoGetTextPassword2@@8 ; ICryptoGetTextPassword2::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003F6C _rdata$r        ends
.rdata$r:00003F6C
.rdata$r:00003F70 ; ===========================================================================
.rdata$r:00003F70
.rdata$r:00003F70 ; Segment type: Pure data
.rdata$r:00003F70 ; Segment permissions: Read
.rdata$r:00003F70 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003F70                 assume cs:_rdata$r
.rdata$r:00003F70                 ;org 3F70h
.rdata$r:00003F70 ; COMDAT (pick any)
.rdata$r:00003F70                 public ??_R1BE@?0A@EC@IUnknown@@8
.rdata$r:00003F70 ; IUnknown::`RTTI Base Class Descriptor at (20, -1, 0, 66)'
.rdata$r:00003F70 ??_R1BE@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00003F70                                         ; DATA XREF: .rdata$r:00003A94o
.rdata$r:00003F70                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00003F74                 align 8
.rdata$r:00003F78                 db  14h
.rdata$r:00003F79                 db    0
.rdata$r:00003F7A                 db    0
.rdata$r:00003F7B                 db    0
.rdata$r:00003F7C                 db 0FFh
.rdata$r:00003F7D                 db 0FFh
.rdata$r:00003F7E                 db 0FFh
.rdata$r:00003F7F                 db 0FFh
.rdata$r:00003F80                 db    0
.rdata$r:00003F81                 db    0
.rdata$r:00003F82                 db    0
.rdata$r:00003F83                 db    0
.rdata$r:00003F84                 db  42h ; B
.rdata$r:00003F85                 db    0
.rdata$r:00003F86                 db    0
.rdata$r:00003F87                 db    0
.rdata$r:00003F88                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003F88 _rdata$r        ends
.rdata$r:00003F88
.rdata$r:00003F8C ; ===========================================================================
.rdata$r:00003F8C
.rdata$r:00003F8C ; Segment type: Pure data
.rdata$r:00003F8C ; Segment permissions: Read
.rdata$r:00003F8C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003F8C                 assume cs:_rdata$r
.rdata$r:00003F8C                 ;org 3F8Ch
.rdata$r:00003F8C ; COMDAT (pick any)
.rdata$r:00003F8C                 public ??_R1BI@?0A@EA@ICryptoGetTextPassword@@8
.rdata$r:00003F8C ; ICryptoGetTextPassword::`RTTI Base Class Descriptor at (24, -1, 0, 64)'
.rdata$r:00003F8C ??_R1BI@?0A@EA@ICryptoGetTextPassword@@8 dd offset ??_R0?AUICryptoGetTextPassword@@@8
.rdata$r:00003F8C                                         ; DATA XREF: .rdata$r:00003A98o
.rdata$r:00003F8C                                         ; ICryptoGetTextPassword `RTTI Type Descriptor'
.rdata$r:00003F90                 db    1
.rdata$r:00003F91                 db    0
.rdata$r:00003F92                 db    0
.rdata$r:00003F93                 db    0
.rdata$r:00003F94                 db  18h
.rdata$r:00003F95                 db    0
.rdata$r:00003F96                 db    0
.rdata$r:00003F97                 db    0
.rdata$r:00003F98                 db 0FFh
.rdata$r:00003F99                 db 0FFh
.rdata$r:00003F9A                 db 0FFh
.rdata$r:00003F9B                 db 0FFh
.rdata$r:00003F9C                 db    0
.rdata$r:00003F9D                 db    0
.rdata$r:00003F9E                 db    0
.rdata$r:00003F9F                 db    0
.rdata$r:00003FA0                 db  40h ; @
.rdata$r:00003FA1                 db    0
.rdata$r:00003FA2                 db    0
.rdata$r:00003FA3                 db    0
.rdata$r:00003FA4                 dd offset ??_R3ICryptoGetTextPassword@@8 ; ICryptoGetTextPassword::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003FA4 _rdata$r        ends
.rdata$r:00003FA4
.data:00003FA8 ; ===========================================================================
.data:00003FA8
.data:00003FA8 ; Segment type: Pure data
.data:00003FA8 ; Segment permissions: Read/Write
.data:00003FA8 _data           segment dword public 'DATA' use32
.data:00003FA8                 assume cs:_data
.data:00003FA8                 ;org 3FA8h
.data:00003FA8 ; COMDAT (pick any)
.data:00003FA8                 public ??_R0?AUICryptoGetTextPassword@@@8
.data:00003FA8 ; struct ICryptoGetTextPassword `RTTI Type Descriptor'
.data:00003FA8 ??_R0?AUICryptoGetTextPassword@@@8 dd offset ??_7type_info@@6B@
.data:00003FA8                                         ; DATA XREF: .rdata$r:ICryptoGetTextPassword::`RTTI Base Class Descriptor at (24,-1,0,64)'o
.data:00003FA8                                         ; .rdata$r:ICryptoGetTextPassword::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00003FA8                                         ; const type_info::`vftable'
.data:00003FAC                 align 10h
.data:00003FB0 a_?auicryptog_0 db '.?AUICryptoGetTextPassword@@',0
.data:00003FCD                 align 10h
.data:00003FCD _data           ends
.data:00003FCD
.rdata$r:00003FD0 ; ===========================================================================
.rdata$r:00003FD0
.rdata$r:00003FD0 ; Segment type: Pure data
.rdata$r:00003FD0 ; Segment permissions: Read
.rdata$r:00003FD0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003FD0                 assume cs:_rdata$r
.rdata$r:00003FD0                 ;org 3FD0h
.rdata$r:00003FD0 ; COMDAT (pick any)
.rdata$r:00003FD0                 public ??_R3ICryptoGetTextPassword@@8
.rdata$r:00003FD0 ; ICryptoGetTextPassword::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003FD0 ??_R3ICryptoGetTextPassword@@8 db    0  ; DATA XREF: .rdata$r:00003FA4o
.rdata$r:00003FD0                                         ; .rdata$r:00004004o ...
.rdata$r:00003FD1                 db    0
.rdata$r:00003FD2                 db    0
.rdata$r:00003FD3                 db    0
.rdata$r:00003FD4                 db    0
.rdata$r:00003FD5                 db    0
.rdata$r:00003FD6                 db    0
.rdata$r:00003FD7                 db    0
.rdata$r:00003FD8                 db    2
.rdata$r:00003FD9                 db    0
.rdata$r:00003FDA                 db    0
.rdata$r:00003FDB                 db    0
.rdata$r:00003FDC                 dd offset ??_R2ICryptoGetTextPassword@@8 ; ICryptoGetTextPassword::`RTTI Base Class Array'
.rdata$r:00003FDC _rdata$r        ends
.rdata$r:00003FDC
.rdata$r:00003FE0 ; ===========================================================================
.rdata$r:00003FE0
.rdata$r:00003FE0 ; Segment type: Pure data
.rdata$r:00003FE0 ; Segment permissions: Read
.rdata$r:00003FE0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003FE0                 assume cs:_rdata$r
.rdata$r:00003FE0                 ;org 3FE0h
.rdata$r:00003FE0 ; COMDAT (pick any)
.rdata$r:00003FE0                 public ??_R2ICryptoGetTextPassword@@8
.rdata$r:00003FE0 ; ICryptoGetTextPassword::`RTTI Base Class Array'
.rdata$r:00003FE0 ??_R2ICryptoGetTextPassword@@8 dd offset ??_R1A@?0A@EA@ICryptoGetTextPassword@@8
.rdata$r:00003FE0                                         ; DATA XREF: .rdata$r:00003FDCo
.rdata$r:00003FE0                                         ; ICryptoGetTextPassword::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003FE4                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003FE8                 db    0
.rdata$r:00003FE9                 align 4
.rdata$r:00003FE9 _rdata$r        ends
.rdata$r:00003FE9
.rdata$r:00003FEC ; ===========================================================================
.rdata$r:00003FEC
.rdata$r:00003FEC ; Segment type: Pure data
.rdata$r:00003FEC ; Segment permissions: Read
.rdata$r:00003FEC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003FEC                 assume cs:_rdata$r
.rdata$r:00003FEC                 ;org 3FECh
.rdata$r:00003FEC ; COMDAT (pick any)
.rdata$r:00003FEC                 public ??_R1A@?0A@EA@ICryptoGetTextPassword@@8
.rdata$r:00003FEC ; ICryptoGetTextPassword::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00003FEC ??_R1A@?0A@EA@ICryptoGetTextPassword@@8 dd offset ??_R0?AUICryptoGetTextPassword@@@8
.rdata$r:00003FEC                                         ; DATA XREF: .rdata$r:ICryptoGetTextPassword::`RTTI Base Class Array'o
.rdata$r:00003FEC                                         ; ICryptoGetTextPassword `RTTI Type Descriptor'
.rdata$r:00003FF0                 db    1
.rdata$r:00003FF1                 db    0
.rdata$r:00003FF2                 db    0
.rdata$r:00003FF3                 db    0
.rdata$r:00003FF4                 db    0
.rdata$r:00003FF5                 db    0
.rdata$r:00003FF6                 db    0
.rdata$r:00003FF7                 db    0
.rdata$r:00003FF8                 db 0FFh
.rdata$r:00003FF9                 db 0FFh
.rdata$r:00003FFA                 db 0FFh
.rdata$r:00003FFB                 db 0FFh
.rdata$r:00003FFC                 db    0
.rdata$r:00003FFD                 db    0
.rdata$r:00003FFE                 db    0
.rdata$r:00003FFF                 db    0
.rdata$r:00004000                 db  40h ; @
.rdata$r:00004001                 db    0
.rdata$r:00004002                 db    0
.rdata$r:00004003                 db    0
.rdata$r:00004004                 dd offset ??_R3ICryptoGetTextPassword@@8 ; ICryptoGetTextPassword::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004004 _rdata$r        ends
.rdata$r:00004004
.rdata$r:00004008 ; ===========================================================================
.rdata$r:00004008
.rdata$r:00004008 ; Segment type: Pure data
.rdata$r:00004008 ; Segment permissions: Read
.rdata$r:00004008 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004008                 assume cs:_rdata$r
.rdata$r:00004008                 ;org 4008h
.rdata$r:00004008 ; COMDAT (pick any)
.rdata$r:00004008                 public ??_R1BI@?0A@EC@IUnknown@@8
.rdata$r:00004008 ; IUnknown::`RTTI Base Class Descriptor at (24, -1, 0, 66)'
.rdata$r:00004008 ??_R1BI@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00004008                                         ; DATA XREF: .rdata$r:00003A9Co
.rdata$r:00004008                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:0000400C                 align 10h
.rdata$r:00004010                 db  18h
.rdata$r:00004011                 db    0
.rdata$r:00004012                 db    0
.rdata$r:00004013                 db    0
.rdata$r:00004014                 db 0FFh
.rdata$r:00004015                 db 0FFh
.rdata$r:00004016                 db 0FFh
.rdata$r:00004017                 db 0FFh
.rdata$r:00004018                 db    0
.rdata$r:00004019                 db    0
.rdata$r:0000401A                 db    0
.rdata$r:0000401B                 db    0
.rdata$r:0000401C                 db  42h ; B
.rdata$r:0000401D                 db    0
.rdata$r:0000401E                 db    0
.rdata$r:0000401F                 db    0
.rdata$r:00004020                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004020 _rdata$r        ends
.rdata$r:00004020
.rdata$r:00004024 ; ===========================================================================
.rdata$r:00004024
.rdata$r:00004024 ; Segment type: Pure data
.rdata$r:00004024 ; Segment permissions: Read
.rdata$r:00004024 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004024                 assume cs:_rdata$r
.rdata$r:00004024                 ;org 4024h
.rdata$r:00004024 ; COMDAT (pick any)
.rdata$r:00004024                 public ??_R1BM@?0A@EA@ICompressProgressInfo@@8
.rdata$r:00004024 ; ICompressProgressInfo::`RTTI Base Class Descriptor at (28, -1, 0, 64)'
.rdata$r:00004024 ??_R1BM@?0A@EA@ICompressProgressInfo@@8 dd offset ??_R0?AUICompressProgressInfo@@@8
.rdata$r:00004024                                         ; DATA XREF: .rdata$r:00003AA0o
.rdata$r:00004024                                         ; ICompressProgressInfo `RTTI Type Descriptor'
.rdata$r:00004028                 db    1
.rdata$r:00004029                 db    0
.rdata$r:0000402A                 db    0
.rdata$r:0000402B                 db    0
.rdata$r:0000402C                 db  1Ch
.rdata$r:0000402D                 db    0
.rdata$r:0000402E                 db    0
.rdata$r:0000402F                 db    0
.rdata$r:00004030                 db 0FFh
.rdata$r:00004031                 db 0FFh
.rdata$r:00004032                 db 0FFh
.rdata$r:00004033                 db 0FFh
.rdata$r:00004034                 db    0
.rdata$r:00004035                 db    0
.rdata$r:00004036                 db    0
.rdata$r:00004037                 db    0
.rdata$r:00004038                 db  40h ; @
.rdata$r:00004039                 db    0
.rdata$r:0000403A                 db    0
.rdata$r:0000403B                 db    0
.rdata$r:0000403C                 dd offset ??_R3ICompressProgressInfo@@8 ; ICompressProgressInfo::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000403C _rdata$r        ends
.rdata$r:0000403C
.data:00004040 ; ===========================================================================
.data:00004040
.data:00004040 ; Segment type: Pure data
.data:00004040 ; Segment permissions: Read/Write
.data:00004040 _data           segment dword public 'DATA' use32
.data:00004040                 assume cs:_data
.data:00004040                 ;org 4040h
.data:00004040 ; COMDAT (pick any)
.data:00004040                 public ??_R0?AUICompressProgressInfo@@@8
.data:00004040 ; struct ICompressProgressInfo `RTTI Type Descriptor'
.data:00004040 ??_R0?AUICompressProgressInfo@@@8 dd offset ??_7type_info@@6B@
.data:00004040                                         ; DATA XREF: .rdata$r:ICompressProgressInfo::`RTTI Base Class Descriptor at (28,-1,0,64)'o
.data:00004040                                         ; .rdata$r:ICompressProgressInfo::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00004040                                         ; const type_info::`vftable'
.data:00004044                 align 8
.data:00004048 a_?auicompressp db '.?AUICompressProgressInfo@@',0
.data:00004048 _data           ends
.data:00004048
.rdata$r:00004064 ; ===========================================================================
.rdata$r:00004064
.rdata$r:00004064 ; Segment type: Pure data
.rdata$r:00004064 ; Segment permissions: Read
.rdata$r:00004064 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004064                 assume cs:_rdata$r
.rdata$r:00004064                 ;org 4064h
.rdata$r:00004064 ; COMDAT (pick any)
.rdata$r:00004064                 public ??_R3ICompressProgressInfo@@8
.rdata$r:00004064 ; ICompressProgressInfo::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004064 ??_R3ICompressProgressInfo@@8 db    0   ; DATA XREF: .rdata$r:0000403Co
.rdata$r:00004064                                         ; .rdata$r:00004098o ...
.rdata$r:00004065                 db    0
.rdata$r:00004066                 db    0
.rdata$r:00004067                 db    0
.rdata$r:00004068                 db    0
.rdata$r:00004069                 db    0
.rdata$r:0000406A                 db    0
.rdata$r:0000406B                 db    0
.rdata$r:0000406C                 db    2
.rdata$r:0000406D                 db    0
.rdata$r:0000406E                 db    0
.rdata$r:0000406F                 db    0
.rdata$r:00004070                 dd offset ??_R2ICompressProgressInfo@@8 ; ICompressProgressInfo::`RTTI Base Class Array'
.rdata$r:00004070 _rdata$r        ends
.rdata$r:00004070
.rdata$r:00004074 ; ===========================================================================
.rdata$r:00004074
.rdata$r:00004074 ; Segment type: Pure data
.rdata$r:00004074 ; Segment permissions: Read
.rdata$r:00004074 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004074                 assume cs:_rdata$r
.rdata$r:00004074                 ;org 4074h
.rdata$r:00004074 ; COMDAT (pick any)
.rdata$r:00004074                 public ??_R2ICompressProgressInfo@@8
.rdata$r:00004074 ; ICompressProgressInfo::`RTTI Base Class Array'
.rdata$r:00004074 ??_R2ICompressProgressInfo@@8 dd offset ??_R1A@?0A@EA@ICompressProgressInfo@@8
.rdata$r:00004074                                         ; DATA XREF: .rdata$r:00004070o
.rdata$r:00004074                                         ; ICompressProgressInfo::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00004078                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000407C                 db    0
.rdata$r:0000407D                 align 10h
.rdata$r:0000407D _rdata$r        ends
.rdata$r:0000407D
.rdata$r:00004080 ; ===========================================================================
.rdata$r:00004080
.rdata$r:00004080 ; Segment type: Pure data
.rdata$r:00004080 ; Segment permissions: Read
.rdata$r:00004080 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004080                 assume cs:_rdata$r
.rdata$r:00004080                 ;org 4080h
.rdata$r:00004080 ; COMDAT (pick any)
.rdata$r:00004080                 public ??_R1A@?0A@EA@ICompressProgressInfo@@8
.rdata$r:00004080 ; ICompressProgressInfo::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00004080 ??_R1A@?0A@EA@ICompressProgressInfo@@8 dd offset ??_R0?AUICompressProgressInfo@@@8
.rdata$r:00004080                                         ; DATA XREF: .rdata$r:ICompressProgressInfo::`RTTI Base Class Array'o
.rdata$r:00004080                                         ; ICompressProgressInfo `RTTI Type Descriptor'
.rdata$r:00004084                 db    1
.rdata$r:00004085                 db    0
.rdata$r:00004086                 db    0
.rdata$r:00004087                 db    0
.rdata$r:00004088                 db    0
.rdata$r:00004089                 db    0
.rdata$r:0000408A                 db    0
.rdata$r:0000408B                 db    0
.rdata$r:0000408C                 db 0FFh
.rdata$r:0000408D                 db 0FFh
.rdata$r:0000408E                 db 0FFh
.rdata$r:0000408F                 db 0FFh
.rdata$r:00004090                 db    0
.rdata$r:00004091                 db    0
.rdata$r:00004092                 db    0
.rdata$r:00004093                 db    0
.rdata$r:00004094                 db  40h ; @
.rdata$r:00004095                 db    0
.rdata$r:00004096                 db    0
.rdata$r:00004097                 db    0
.rdata$r:00004098                 dd offset ??_R3ICompressProgressInfo@@8 ; ICompressProgressInfo::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004098 _rdata$r        ends
.rdata$r:00004098
.rdata$r:0000409C ; ===========================================================================
.rdata$r:0000409C
.rdata$r:0000409C ; Segment type: Pure data
.rdata$r:0000409C ; Segment permissions: Read
.rdata$r:0000409C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000409C                 assume cs:_rdata$r
.rdata$r:0000409C                 ;org 409Ch
.rdata$r:0000409C ; COMDAT (pick any)
.rdata$r:0000409C                 public ??_R1BM@?0A@EC@IUnknown@@8
.rdata$r:0000409C ; IUnknown::`RTTI Base Class Descriptor at (28, -1, 0, 66)'
.rdata$r:0000409C ??_R1BM@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:0000409C                                         ; DATA XREF: .rdata$r:00003AA4o
.rdata$r:0000409C                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:000040A0                 db    0
.rdata$r:000040A1                 db    0
.rdata$r:000040A2                 db    0
.rdata$r:000040A3                 db    0
.rdata$r:000040A4                 db  1Ch
.rdata$r:000040A5                 db    0
.rdata$r:000040A6                 db    0
.rdata$r:000040A7                 db    0
.rdata$r:000040A8                 db 0FFh
.rdata$r:000040A9                 db 0FFh
.rdata$r:000040AA                 db 0FFh
.rdata$r:000040AB                 db 0FFh
.rdata$r:000040AC                 db    0
.rdata$r:000040AD                 db    0
.rdata$r:000040AE                 db    0
.rdata$r:000040AF                 db    0
.rdata$r:000040B0                 db  42h ; B
.rdata$r:000040B1                 db    0
.rdata$r:000040B2                 db    0
.rdata$r:000040B3                 db    0
.rdata$r:000040B4                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000040B4 _rdata$r        ends
.rdata$r:000040B4
.rdata$r:000040B8 ; ===========================================================================
.rdata$r:000040B8
.rdata$r:000040B8 ; Segment type: Pure data
.rdata$r:000040B8 ; Segment permissions: Read
.rdata$r:000040B8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000040B8                 assume cs:_rdata$r
.rdata$r:000040B8                 ;org 40B8h
.rdata$r:000040B8 ; COMDAT (pick any)
.rdata$r:000040B8                 public ??_R1CA@?0A@EA@IInFileStream_Callback@@8
.rdata$r:000040B8 ; IInFileStream_Callback::`RTTI Base Class Descriptor at (32, -1, 0, 64)'
.rdata$r:000040B8 ??_R1CA@?0A@EA@IInFileStream_Callback@@8 dd offset ??_R0?AUIInFileStream_Callback@@@8
.rdata$r:000040B8                                         ; DATA XREF: .rdata$r:00003AA8o
.rdata$r:000040B8                                         ; IInFileStream_Callback `RTTI Type Descriptor'
.rdata$r:000040BC                 align 10h
.rdata$r:000040C0                 dd offset loc_1E+2
.rdata$r:000040C4                 db 0FFh
.rdata$r:000040C5                 db 0FFh
.rdata$r:000040C6                 db 0FFh
.rdata$r:000040C7                 db 0FFh
.rdata$r:000040C8                 db    0
.rdata$r:000040C9                 db    0
.rdata$r:000040CA                 db    0
.rdata$r:000040CB                 db    0
.rdata$r:000040CC                 db  40h ; @
.rdata$r:000040CD                 db    0
.rdata$r:000040CE                 db    0
.rdata$r:000040CF                 db    0
.rdata$r:000040D0                 dd offset ??_R3IInFileStream_Callback@@8 ; IInFileStream_Callback::`RTTI Class Hierarchy Descriptor'
.rdata$r:000040D0 _rdata$r        ends
.rdata$r:000040D0
.data:000040D4 ; ===========================================================================
.data:000040D4
.data:000040D4 ; Segment type: Pure data
.data:000040D4 ; Segment permissions: Read/Write
.data:000040D4 _data           segment dword public 'DATA' use32
.data:000040D4                 assume cs:_data
.data:000040D4                 ;org 40D4h
.data:000040D4 ; COMDAT (pick any)
.data:000040D4                 public ??_R0?AUIInFileStream_Callback@@@8
.data:000040D4 ; struct IInFileStream_Callback `RTTI Type Descriptor'
.data:000040D4 ??_R0?AUIInFileStream_Callback@@@8 dd offset ??_7type_info@@6B@
.data:000040D4                                         ; DATA XREF: .rdata$r:IInFileStream_Callback::`RTTI Base Class Descriptor at (32,-1,0,64)'o
.data:000040D4                                         ; .rdata$r:IInFileStream_Callback::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:000040D4                                         ; const type_info::`vftable'
.data:000040D8                 db    0
.data:000040D9                 db    0
.data:000040DA                 db    0
.data:000040DB                 db    0
.data:000040DC                 db  2Eh ; .
.data:000040DD                 db  3Fh ; ?
.data:000040DE                 db  41h ; A
.data:000040DF                 db  55h ; U
.data:000040E0                 db  49h ; I
.data:000040E1                 db  49h ; I
.data:000040E2                 db  6Eh ; n
.data:000040E3                 db  46h ; F
.data:000040E4                 db  69h ; i
.data:000040E5                 db  6Ch ; l
.data:000040E6                 db  65h ; e
.data:000040E7                 db  53h ; S
.data:000040E8                 db  74h ; t
.data:000040E9                 db  72h ; r
.data:000040EA                 db  65h ; e
.data:000040EB                 db  61h ; a
.data:000040EC                 db  6Dh ; m
.data:000040ED                 db  5Fh ; _
.data:000040EE                 db  43h ; C
.data:000040EF                 db  61h ; a
.data:000040F0                 db  6Ch ; l
.data:000040F1                 db  6Ch ; l
.data:000040F2                 db  62h ; b
.data:000040F3                 db  61h ; a
.data:000040F4                 db  63h ; c
.data:000040F5                 db  6Bh ; k
.data:000040F6                 db  40h ; @
.data:000040F7                 db  40h ; @
.data:000040F8                 db    0
.data:000040F9                 align 4
.data:000040F9 _data           ends
.data:000040F9
.rdata$r:000040FC ; ===========================================================================
.rdata$r:000040FC
.rdata$r:000040FC ; Segment type: Pure data
.rdata$r:000040FC ; Segment permissions: Read
.rdata$r:000040FC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000040FC                 assume cs:_rdata$r
.rdata$r:000040FC                 ;org 40FCh
.rdata$r:000040FC ; COMDAT (pick any)
.rdata$r:000040FC                 public ??_R3IInFileStream_Callback@@8
.rdata$r:000040FC ; IInFileStream_Callback::`RTTI Class Hierarchy Descriptor'
.rdata$r:000040FC ??_R3IInFileStream_Callback@@8 db    0  ; DATA XREF: .rdata$r:000040D0o
.rdata$r:000040FC                                         ; .rdata$r:0000412Co ...
.rdata$r:000040FD                 db    0
.rdata$r:000040FE                 db    0
.rdata$r:000040FF                 db    0
.rdata$r:00004100                 db    0
.rdata$r:00004101                 db    0
.rdata$r:00004102                 db    0
.rdata$r:00004103                 db    0
.rdata$r:00004104                 db    1
.rdata$r:00004105                 db    0
.rdata$r:00004106                 db    0
.rdata$r:00004107                 db    0
.rdata$r:00004108                 dd offset ??_R2IInFileStream_Callback@@8 ; IInFileStream_Callback::`RTTI Base Class Array'
.rdata$r:00004108 _rdata$r        ends
.rdata$r:00004108
.rdata$r:0000410C ; ===========================================================================
.rdata$r:0000410C
.rdata$r:0000410C ; Segment type: Pure data
.rdata$r:0000410C ; Segment permissions: Read
.rdata$r:0000410C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000410C                 assume cs:_rdata$r
.rdata$r:0000410C                 ;org 410Ch
.rdata$r:0000410C ; COMDAT (pick any)
.rdata$r:0000410C                 public ??_R2IInFileStream_Callback@@8
.rdata$r:0000410C ; IInFileStream_Callback::`RTTI Base Class Array'
.rdata$r:0000410C ??_R2IInFileStream_Callback@@8 dd offset ??_R1A@?0A@EA@IInFileStream_Callback@@8
.rdata$r:0000410C                                         ; DATA XREF: .rdata$r:00004108o
.rdata$r:0000410C                                         ; IInFileStream_Callback::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00004110                 db    0
.rdata$r:00004111                 align 4
.rdata$r:00004111 _rdata$r        ends
.rdata$r:00004111
.rdata$r:00004114 ; ===========================================================================
.rdata$r:00004114
.rdata$r:00004114 ; Segment type: Pure data
.rdata$r:00004114 ; Segment permissions: Read
.rdata$r:00004114 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004114                 assume cs:_rdata$r
.rdata$r:00004114                 ;org 4114h
.rdata$r:00004114 ; COMDAT (pick any)
.rdata$r:00004114                 public ??_R1A@?0A@EA@IInFileStream_Callback@@8
.rdata$r:00004114 ; IInFileStream_Callback::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00004114 ??_R1A@?0A@EA@IInFileStream_Callback@@8 dd offset ??_R0?AUIInFileStream_Callback@@@8
.rdata$r:00004114                                         ; DATA XREF: .rdata$r:IInFileStream_Callback::`RTTI Base Class Array'o
.rdata$r:00004114                                         ; IInFileStream_Callback `RTTI Type Descriptor'
.rdata$r:00004118                 align 10h
.rdata$r:00004120                 db 0FFh
.rdata$r:00004121                 db 0FFh
.rdata$r:00004122                 db 0FFh
.rdata$r:00004123                 db 0FFh
.rdata$r:00004124                 db    0
.rdata$r:00004125                 db    0
.rdata$r:00004126                 db    0
.rdata$r:00004127                 db    0
.rdata$r:00004128                 db  40h ; @
.rdata$r:00004129                 db    0
.rdata$r:0000412A                 db    0
.rdata$r:0000412B                 db    0
.rdata$r:0000412C                 dd offset ??_R3IInFileStream_Callback@@8 ; IInFileStream_Callback::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000412C _rdata$r        ends
.rdata$r:0000412C
.rdata$r:00004130 ; ===========================================================================
.rdata$r:00004130
.rdata$r:00004130 ; Segment type: Pure data
.rdata$r:00004130 ; Segment permissions: Read
.rdata$r:00004130 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004130                 assume cs:_rdata$r
.rdata$r:00004130                 ;org 4130h
.rdata$r:00004130 ; COMDAT (pick any)
.rdata$r:00004130                 public ??_R1CE@?0A@EA@CMyUnknownImp@@8
.rdata$r:00004130 ; CMyUnknownImp::`RTTI Base Class Descriptor at (36, -1, 0, 64)'
.rdata$r:00004130 ??_R1CE@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00004130                                         ; DATA XREF: .rdata$r:00003AACo
.rdata$r:00004130                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00004134                 align 8
.rdata$r:00004138                 dd offset loc_1E+6
.rdata$r:0000413C                 db 0FFh
.rdata$r:0000413D                 db 0FFh
.rdata$r:0000413E                 db 0FFh
.rdata$r:0000413F                 db 0FFh
.rdata$r:00004140                 db    0
.rdata$r:00004141                 db    0
.rdata$r:00004142                 db    0
.rdata$r:00004143                 db    0
.rdata$r:00004144                 db  40h ; @
.rdata$r:00004145                 db    0
.rdata$r:00004146                 db    0
.rdata$r:00004147                 db    0
.rdata$r:00004148                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004148 _rdata$r        ends
.rdata$r:00004148
.data:0000414C ; ===========================================================================
.data:0000414C
.data:0000414C ; Segment type: Pure data
.data:0000414C ; Segment permissions: Read/Write
.data:0000414C _data           segment dword public 'DATA' use32
.data:0000414C                 assume cs:_data
.data:0000414C                 ;org 414Ch
.data:0000414C ; COMDAT (pick any)
.data:0000414C                 public ??_R0?AVCMyUnknownImp@@@8
.data:0000414C ; class CMyUnknownImp `RTTI Type Descriptor'
.data:0000414C ??_R0?AVCMyUnknownImp@@@8 dd offset ??_7type_info@@6B@
.data:0000414C                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (36,-1,0,64)'o
.data:0000414C                                         ; .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:0000414C                                         ; const type_info::`vftable'
.data:00004150                 db    0
.data:00004151                 db    0
.data:00004152                 db    0
.data:00004153                 db    0
.data:00004154                 db  2Eh ; .
.data:00004155                 db  3Fh ; ?
.data:00004156                 db  41h ; A
.data:00004157                 db  56h ; V
.data:00004158                 db  43h ; C
.data:00004159                 db  4Dh ; M
.data:0000415A                 db  79h ; y
.data:0000415B                 db  55h ; U
.data:0000415C                 db  6Eh ; n
.data:0000415D                 db  6Bh ; k
.data:0000415E                 db  6Eh ; n
.data:0000415F                 db  6Fh ; o
.data:00004160                 db  77h ; w
.data:00004161                 db  6Eh ; n
.data:00004162                 db  49h ; I
.data:00004163                 db  6Dh ; m
.data:00004164                 db  70h ; p
.data:00004165                 db  40h ; @
.data:00004166                 db  40h ; @
.data:00004167                 db    0
.data:00004167 _data           ends
.data:00004167
.rdata$r:00004168 ; ===========================================================================
.rdata$r:00004168
.rdata$r:00004168 ; Segment type: Pure data
.rdata$r:00004168 ; Segment permissions: Read
.rdata$r:00004168 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004168                 assume cs:_rdata$r
.rdata$r:00004168                 ;org 4168h
.rdata$r:00004168 ; COMDAT (pick any)
.rdata$r:00004168                 public ??_R3CMyUnknownImp@@8
.rdata$r:00004168 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004168 ??_R3CMyUnknownImp@@8 db    0           ; DATA XREF: .rdata$r:00004148o
.rdata$r:00004168                                         ; .rdata$r:00004198o ...
.rdata$r:00004169                 db    0
.rdata$r:0000416A                 db    0
.rdata$r:0000416B                 db    0
.rdata$r:0000416C                 db    0
.rdata$r:0000416D                 db    0
.rdata$r:0000416E                 db    0
.rdata$r:0000416F                 db    0
.rdata$r:00004170                 db    1
.rdata$r:00004171                 db    0
.rdata$r:00004172                 db    0
.rdata$r:00004173                 db    0
.rdata$r:00004174                 dd offset ??_R2CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00004174 _rdata$r        ends
.rdata$r:00004174
.rdata$r:00004178 ; ===========================================================================
.rdata$r:00004178
.rdata$r:00004178 ; Segment type: Pure data
.rdata$r:00004178 ; Segment permissions: Read
.rdata$r:00004178 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004178                 assume cs:_rdata$r
.rdata$r:00004178                 ;org 4178h
.rdata$r:00004178 ; COMDAT (pick any)
.rdata$r:00004178                 public ??_R2CMyUnknownImp@@8
.rdata$r:00004178 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00004178 ??_R2CMyUnknownImp@@8 dd offset ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00004178                                         ; DATA XREF: .rdata$r:00004174o
.rdata$r:00004178                                         ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000417C                 db    0
.rdata$r:0000417D                 align 10h
.rdata$r:0000417D _rdata$r        ends
.rdata$r:0000417D
.rdata$r:00004180 ; ===========================================================================
.rdata$r:00004180
.rdata$r:00004180 ; Segment type: Pure data
.rdata$r:00004180 ; Segment permissions: Read
.rdata$r:00004180 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004180                 assume cs:_rdata$r
.rdata$r:00004180                 ;org 4180h
.rdata$r:00004180 ; COMDAT (pick any)
.rdata$r:00004180                 public ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00004180 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00004180 ??_R1A@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00004180                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Array'o
.rdata$r:00004180                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00004184                 db    0
.rdata$r:00004185                 db    0
.rdata$r:00004186                 db    0
.rdata$r:00004187                 db    0
.rdata$r:00004188                 db    0
.rdata$r:00004189                 db    0
.rdata$r:0000418A                 db    0
.rdata$r:0000418B                 db    0
.rdata$r:0000418C                 db 0FFh
.rdata$r:0000418D                 db 0FFh
.rdata$r:0000418E                 db 0FFh
.rdata$r:0000418F                 db 0FFh
.rdata$r:00004190                 db    0
.rdata$r:00004191                 db    0
.rdata$r:00004192                 db    0
.rdata$r:00004193                 db    0
.rdata$r:00004194                 db  40h ; @
.rdata$r:00004195                 db    0
.rdata$r:00004196                 db    0
.rdata$r:00004197                 db    0
.rdata$r:00004198                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004198 _rdata$r        ends
.rdata$r:00004198
.rdata$r:0000419C ; ===========================================================================
.rdata$r:0000419C
.rdata$r:0000419C ; Segment type: Pure data
.rdata$r:0000419C ; Segment permissions: Read
.rdata$r:0000419C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000419C                 assume cs:_rdata$r
.rdata$r:0000419C                 ;org 419Ch
.rdata$r:0000419C ; COMDAT (pick any)
.rdata$r:0000419C                 public ??_R4CArchiveUpdateCallback@@6BIArchiveUpdateCallbackFile@@@
.rdata$r:0000419C ; const CArchiveUpdateCallback::`RTTI Complete Object Locator'{for `IArchiveUpdateCallbackFile'}
.rdata$r:0000419C ??_R4CArchiveUpdateCallback@@6BIArchiveUpdateCallbackFile@@@ db    0
.rdata$r:0000419C                                         ; DATA XREF: .rdata:0000337Co
.rdata$r:0000419D                 db    0
.rdata$r:0000419E                 db    0
.rdata$r:0000419F                 db    0
.rdata$r:000041A0                 db    4
.rdata$r:000041A1                 db    0
.rdata$r:000041A2                 db    0
.rdata$r:000041A3                 db    0
.rdata$r:000041A4                 db    0
.rdata$r:000041A5                 db    0
.rdata$r:000041A6                 db    0
.rdata$r:000041A7                 db    0
.rdata$r:000041A8                 dd offset ??_R0?AVCArchiveUpdateCallback@@@8 ; CArchiveUpdateCallback `RTTI Type Descriptor'
.rdata$r:000041AC                 dd offset ??_R3CArchiveUpdateCallback@@8 ; CArchiveUpdateCallback::`RTTI Class Hierarchy Descriptor'
.rdata$r:000041AC _rdata$r        ends
.rdata$r:000041AC
.rdata$r:000041B0 ; ===========================================================================
.rdata$r:000041B0
.rdata$r:000041B0 ; Segment type: Pure data
.rdata$r:000041B0 ; Segment permissions: Read
.rdata$r:000041B0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000041B0                 assume cs:_rdata$r
.rdata$r:000041B0                 ;org 41B0h
.rdata$r:000041B0 ; COMDAT (pick any)
.rdata$r:000041B0                 public ??_R4CArchiveUpdateCallback@@6BIArchiveExtractCallbackMessage@@@
.rdata$r:000041B0 ; const CArchiveUpdateCallback::`RTTI Complete Object Locator'{for `IArchiveExtractCallbackMessage'}
.rdata$r:000041B0 ??_R4CArchiveUpdateCallback@@6BIArchiveExtractCallbackMessage@@@ db    0
.rdata$r:000041B0                                         ; DATA XREF: .rdata:00003360o
.rdata$r:000041B1                 db    0
.rdata$r:000041B2                 db    0
.rdata$r:000041B3                 db    0
.rdata$r:000041B4                 db    8
.rdata$r:000041B5                 db    0
.rdata$r:000041B6                 db    0
.rdata$r:000041B7                 db    0
.rdata$r:000041B8                 db    0
.rdata$r:000041B9                 db    0
.rdata$r:000041BA                 db    0
.rdata$r:000041BB                 db    0
.rdata$r:000041BC                 dd offset ??_R0?AVCArchiveUpdateCallback@@@8 ; CArchiveUpdateCallback `RTTI Type Descriptor'
.rdata$r:000041C0                 dd offset ??_R3CArchiveUpdateCallback@@8 ; CArchiveUpdateCallback::`RTTI Class Hierarchy Descriptor'
.rdata$r:000041C0 _rdata$r        ends
.rdata$r:000041C0
.rdata$r:000041C4 ; ===========================================================================
.rdata$r:000041C4
.rdata$r:000041C4 ; Segment type: Pure data
.rdata$r:000041C4 ; Segment permissions: Read
.rdata$r:000041C4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000041C4                 assume cs:_rdata$r
.rdata$r:000041C4                 ;org 41C4h
.rdata$r:000041C4 ; COMDAT (pick any)
.rdata$r:000041C4                 public ??_R4CArchiveUpdateCallback@@6BIArchiveGetRawProps@@@
.rdata$r:000041C4 ; const CArchiveUpdateCallback::`RTTI Complete Object Locator'{for `IArchiveGetRawProps'}
.rdata$r:000041C4 ??_R4CArchiveUpdateCallback@@6BIArchiveGetRawProps@@@ db    0
.rdata$r:000041C4                                         ; DATA XREF: .rdata:00003340o
.rdata$r:000041C5                 db    0
.rdata$r:000041C6                 db    0
.rdata$r:000041C7                 db    0
.rdata$r:000041C8                 db  0Ch
.rdata$r:000041C9                 db    0
.rdata$r:000041CA                 db    0
.rdata$r:000041CB                 db    0
.rdata$r:000041CC                 db    0
.rdata$r:000041CD                 db    0
.rdata$r:000041CE                 db    0
.rdata$r:000041CF                 db    0
.rdata$r:000041D0                 dd offset ??_R0?AVCArchiveUpdateCallback@@@8 ; CArchiveUpdateCallback `RTTI Type Descriptor'
.rdata$r:000041D4                 dd offset ??_R3CArchiveUpdateCallback@@8 ; CArchiveUpdateCallback::`RTTI Class Hierarchy Descriptor'
.rdata$r:000041D4 _rdata$r        ends
.rdata$r:000041D4
.rdata$r:000041D8 ; ===========================================================================
.rdata$r:000041D8
.rdata$r:000041D8 ; Segment type: Pure data
.rdata$r:000041D8 ; Segment permissions: Read
.rdata$r:000041D8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000041D8                 assume cs:_rdata$r
.rdata$r:000041D8                 ;org 41D8h
.rdata$r:000041D8 ; COMDAT (pick any)
.rdata$r:000041D8                 public ??_R4CArchiveUpdateCallback@@6BIArchiveGetRootProps@@@
.rdata$r:000041D8 ; const CArchiveUpdateCallback::`RTTI Complete Object Locator'{for `IArchiveGetRootProps'}
.rdata$r:000041D8 ??_R4CArchiveUpdateCallback@@6BIArchiveGetRootProps@@@ db    0
.rdata$r:000041D8                                         ; DATA XREF: .rdata:00003328o
.rdata$r:000041D9                 db    0
.rdata$r:000041DA                 db    0
.rdata$r:000041DB                 db    0
.rdata$r:000041DC                 db  10h
.rdata$r:000041DD                 db    0
.rdata$r:000041DE                 db    0
.rdata$r:000041DF                 db    0
.rdata$r:000041E0                 db    0
.rdata$r:000041E1                 db    0
.rdata$r:000041E2                 db    0
.rdata$r:000041E3                 db    0
.rdata$r:000041E4                 dd offset ??_R0?AVCArchiveUpdateCallback@@@8 ; CArchiveUpdateCallback `RTTI Type Descriptor'
.rdata$r:000041E8                 dd offset ??_R3CArchiveUpdateCallback@@8 ; CArchiveUpdateCallback::`RTTI Class Hierarchy Descriptor'
.rdata$r:000041E8 _rdata$r        ends
.rdata$r:000041E8
.rdata$r:000041EC ; ===========================================================================
.rdata$r:000041EC
.rdata$r:000041EC ; Segment type: Pure data
.rdata$r:000041EC ; Segment permissions: Read
.rdata$r:000041EC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000041EC                 assume cs:_rdata$r
.rdata$r:000041EC                 ;org 41ECh
.rdata$r:000041EC ; COMDAT (pick any)
.rdata$r:000041EC                 public ??_R4CArchiveUpdateCallback@@6BICryptoGetTextPassword2@@@
.rdata$r:000041EC ; const CArchiveUpdateCallback::`RTTI Complete Object Locator'{for `ICryptoGetTextPassword2'}
.rdata$r:000041EC ??_R4CArchiveUpdateCallback@@6BICryptoGetTextPassword2@@@ db    0
.rdata$r:000041EC                                         ; DATA XREF: .rdata:00003314o
.rdata$r:000041ED                 db    0
.rdata$r:000041EE                 db    0
.rdata$r:000041EF                 db    0
.rdata$r:000041F0                 db  14h
.rdata$r:000041F1                 db    0
.rdata$r:000041F2                 db    0
.rdata$r:000041F3                 db    0
.rdata$r:000041F4                 db    0
.rdata$r:000041F5                 db    0
.rdata$r:000041F6                 db    0
.rdata$r:000041F7                 db    0
.rdata$r:000041F8                 dd offset ??_R0?AVCArchiveUpdateCallback@@@8 ; CArchiveUpdateCallback `RTTI Type Descriptor'
.rdata$r:000041FC                 dd offset ??_R3CArchiveUpdateCallback@@8 ; CArchiveUpdateCallback::`RTTI Class Hierarchy Descriptor'
.rdata$r:000041FC _rdata$r        ends
.rdata$r:000041FC
.rdata$r:00004200 ; ===========================================================================
.rdata$r:00004200
.rdata$r:00004200 ; Segment type: Pure data
.rdata$r:00004200 ; Segment permissions: Read
.rdata$r:00004200 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004200                 assume cs:_rdata$r
.rdata$r:00004200                 ;org 4200h
.rdata$r:00004200 ; COMDAT (pick any)
.rdata$r:00004200                 public ??_R4CArchiveUpdateCallback@@6BICryptoGetTextPassword@@@
.rdata$r:00004200 ; const CArchiveUpdateCallback::`RTTI Complete Object Locator'{for `ICryptoGetTextPassword'}
.rdata$r:00004200 ??_R4CArchiveUpdateCallback@@6BICryptoGetTextPassword@@@ db    0
.rdata$r:00004200                                         ; DATA XREF: .rdata:00003300o
.rdata$r:00004201                 db    0
.rdata$r:00004202                 db    0
.rdata$r:00004203                 db    0
.rdata$r:00004204                 db  18h
.rdata$r:00004205                 db    0
.rdata$r:00004206                 db    0
.rdata$r:00004207                 db    0
.rdata$r:00004208                 db    0
.rdata$r:00004209                 db    0
.rdata$r:0000420A                 db    0
.rdata$r:0000420B                 db    0
.rdata$r:0000420C                 dd offset ??_R0?AVCArchiveUpdateCallback@@@8 ; CArchiveUpdateCallback `RTTI Type Descriptor'
.rdata$r:00004210                 dd offset ??_R3CArchiveUpdateCallback@@8 ; CArchiveUpdateCallback::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004210 _rdata$r        ends
.rdata$r:00004210
.rdata$r:00004214 ; ===========================================================================
.rdata$r:00004214
.rdata$r:00004214 ; Segment type: Pure data
.rdata$r:00004214 ; Segment permissions: Read
.rdata$r:00004214 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004214                 assume cs:_rdata$r
.rdata$r:00004214                 ;org 4214h
.rdata$r:00004214 ; COMDAT (pick any)
.rdata$r:00004214                 public ??_R4CArchiveUpdateCallback@@6BICompressProgressInfo@@@
.rdata$r:00004214 ; const CArchiveUpdateCallback::`RTTI Complete Object Locator'{for `ICompressProgressInfo'}
.rdata$r:00004214 ??_R4CArchiveUpdateCallback@@6BICompressProgressInfo@@@ db    0
.rdata$r:00004214                                         ; DATA XREF: .rdata:000032ECo
.rdata$r:00004215                 db    0
.rdata$r:00004216                 db    0
.rdata$r:00004217                 db    0
.rdata$r:00004218                 db  1Ch
.rdata$r:00004219                 db    0
.rdata$r:0000421A                 db    0
.rdata$r:0000421B                 db    0
.rdata$r:0000421C                 db    0
.rdata$r:0000421D                 db    0
.rdata$r:0000421E                 db    0
.rdata$r:0000421F                 db    0
.rdata$r:00004220                 dd offset ??_R0?AVCArchiveUpdateCallback@@@8 ; CArchiveUpdateCallback `RTTI Type Descriptor'
.rdata$r:00004224                 dd offset ??_R3CArchiveUpdateCallback@@8 ; CArchiveUpdateCallback::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004224 _rdata$r        ends
.rdata$r:00004224
.rdata$r:00004228 ; ===========================================================================
.rdata$r:00004228
.rdata$r:00004228 ; Segment type: Pure data
.rdata$r:00004228 ; Segment permissions: Read
.rdata$r:00004228 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004228                 assume cs:_rdata$r
.rdata$r:00004228                 ;org 4228h
.rdata$r:00004228 ; COMDAT (pick any)
.rdata$r:00004228                 public ??_R4CArchiveUpdateCallback@@6BIInFileStream_Callback@@@
.rdata$r:00004228 ; const CArchiveUpdateCallback::`RTTI Complete Object Locator'{for `IInFileStream_Callback'}
.rdata$r:00004228 ??_R4CArchiveUpdateCallback@@6BIInFileStream_Callback@@@ db    0
.rdata$r:00004228                                         ; DATA XREF: .rdata:000032E0o
.rdata$r:00004229                 db    0
.rdata$r:0000422A                 db    0
.rdata$r:0000422B                 db    0
.rdata$r:0000422C                 db  20h
.rdata$r:0000422D                 db    0
.rdata$r:0000422E                 db    0
.rdata$r:0000422F                 db    0
.rdata$r:00004230                 db    0
.rdata$r:00004231                 db    0
.rdata$r:00004232                 db    0
.rdata$r:00004233                 db    0
.rdata$r:00004234                 dd offset ??_R0?AVCArchiveUpdateCallback@@@8 ; CArchiveUpdateCallback `RTTI Type Descriptor'
.rdata$r:00004238                 dd offset ??_R3CArchiveUpdateCallback@@8 ; CArchiveUpdateCallback::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004238 _rdata$r        ends
.rdata$r:00004238
.text:0000423C ; ===========================================================================
.text:0000423C
.text:0000423C ; Segment type: Pure code
.text:0000423C ; Segment permissions: Read/Execute
.text:0000423C _text           segment para public 'CODE' use32
.text:0000423C                 assume cs:_text
.text:0000423C                 ;org 423Ch
.text:0000423C ; COMDAT (pick any)
.text:0000423C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000423C
.text:0000423C ; =============== S U B R O U T I N E =======================================
.text:0000423C
.text:0000423C ; Attributes: bp-based frame
.text:0000423C
.text:0000423C ; _DWORD __thiscall UString::~UString(UString *__hidden this)
.text:0000423C                 public ??1UString@@QAE@XZ
.text:0000423C ??1UString@@QAE@XZ proc near            ; CODE XREF: CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+24Ep
.text:0000423C                                         ; CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+25Dp ...
.text:0000423C
.text:0000423C var_8           = dword ptr -8
.text:0000423C var_4           = dword ptr -4
.text:0000423C
.text:0000423C                 push    ebp
.text:0000423D                 mov     ebp, esp
.text:0000423F                 sub     esp, 8
.text:00004242                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004249                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004250                 mov     [ebp+var_4], ecx
.text:00004253                 mov     eax, [ebp+var_4]
.text:00004256                 mov     ecx, [eax]
.text:00004258                 mov     [ebp+var_8], ecx
.text:0000425B                 mov     edx, [ebp+var_8]
.text:0000425E                 push    edx             ; void *
.text:0000425F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00004264                 add     esp, 4
.text:00004267                 add     esp, 8
.text:0000426A                 cmp     ebp, esp
.text:0000426C                 call    __RTC_CheckEsp
.text:00004271                 mov     esp, ebp
.text:00004273                 pop     ebp
.text:00004274                 retn
.text:00004274 ??1UString@@QAE@XZ endp
.text:00004274
.text:00004274 ; ---------------------------------------------------------------------------
.text:00004275                 align 4
.text:00004275 _text           ends
.text:00004275
.text:00004278 ; ===========================================================================
.text:00004278
.text:00004278 ; Segment type: Pure code
.text:00004278 ; Segment permissions: Read/Execute
.text:00004278 _text           segment para public 'CODE' use32
.text:00004278                 assume cs:_text
.text:00004278                 ;org 4278h
.text:00004278 ; COMDAT (pick any)
.text:00004278                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004278
.text:00004278 ; =============== S U B R O U T I N E =======================================
.text:00004278
.text:00004278 ; Attributes: bp-based frame
.text:00004278
.text:00004278 ; _DWORD __thiscall CMyUnknownImp::CMyUnknownImp(CMyUnknownImp *__hidden this)
.text:00004278                 public ??0CMyUnknownImp@@QAE@XZ
.text:00004278 ??0CMyUnknownImp@@QAE@XZ proc near      ; CODE XREF: CArchiveUpdateCallback::CArchiveUpdateCallback(void)+93p
.text:00004278                                         ; CBufInStream::CBufInStream(void)+1Cp ...
.text:00004278
.text:00004278 var_4           = dword ptr -4
.text:00004278
.text:00004278                 push    ebp
.text:00004279                 mov     ebp, esp
.text:0000427B                 push    ecx
.text:0000427C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004283                 mov     [ebp+var_4], ecx
.text:00004286                 mov     eax, [ebp+var_4]
.text:00004289                 mov     dword ptr [eax], 0
.text:0000428F                 mov     eax, [ebp+var_4]
.text:00004292                 mov     esp, ebp
.text:00004294                 pop     ebp
.text:00004295                 retn
.text:00004295 ??0CMyUnknownImp@@QAE@XZ endp
.text:00004295
.text:00004295 ; ---------------------------------------------------------------------------
.text:00004296                 align 4
.text:00004296 _text           ends
.text:00004296
.text:00004298 ; ===========================================================================
.text:00004298
.text:00004298 ; Segment type: Pure code
.text:00004298 ; Segment permissions: Read/Execute
.text:00004298 _text           segment para public 'CODE' use32
.text:00004298                 assume cs:_text
.text:00004298                 ;org 4298h
.text:00004298 ; COMDAT (pick any)
.text:00004298                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004298
.text:00004298 ; =============== S U B R O U T I N E =======================================
.text:00004298
.text:00004298 ; Attributes: bp-based frame
.text:00004298
.text:00004298 ; _DWORD __thiscall ICryptoGetTextPassword::ICryptoGetTextPassword(ICryptoGetTextPassword *__hidden this)
.text:00004298                 public ??0ICryptoGetTextPassword@@QAE@XZ
.text:00004298 ??0ICryptoGetTextPassword@@QAE@XZ proc near
.text:00004298                                         ; CODE XREF: CArchiveUpdateCallback::CArchiveUpdateCallback(void)+72p
.text:00004298
.text:00004298 var_4           = dword ptr -4
.text:00004298
.text:00004298                 push    ebp
.text:00004299                 mov     ebp, esp
.text:0000429B                 push    ecx
.text:0000429C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000042A3                 mov     [ebp+var_4], ecx
.text:000042A6                 mov     ecx, [ebp+var_4]
.text:000042A9                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:000042AE                 mov     eax, [ebp+var_4]
.text:000042B1                 mov     dword ptr [eax], offset ??_7ICryptoGetTextPassword@@6B@ ; const ICryptoGetTextPassword::`vftable'
.text:000042B7                 mov     eax, [ebp+var_4]
.text:000042BA                 add     esp, 4
.text:000042BD                 cmp     ebp, esp
.text:000042BF                 call    __RTC_CheckEsp
.text:000042C4                 mov     esp, ebp
.text:000042C6                 pop     ebp
.text:000042C7                 retn
.text:000042C7 ??0ICryptoGetTextPassword@@QAE@XZ endp
.text:000042C7
.text:000042C7 _text           ends
.text:000042C7
.rdata:000042C8 ; ===========================================================================
.rdata:000042C8
.rdata:000042C8 ; Segment type: Pure data
.rdata:000042C8 ; Segment permissions: Read
.rdata:000042C8 _rdata          segment dword public 'DATA' use32
.rdata:000042C8                 assume cs:_rdata
.rdata:000042C8                 ;org 42C8h
.rdata:000042C8 ; COMDAT (pick largest)
.rdata:000042C8                 dd offset ??_R4ICryptoGetTextPassword@@6B@ ; const ICryptoGetTextPassword::`RTTI Complete Object Locator'
.rdata:000042CC                 public ??_7ICryptoGetTextPassword@@6B@
.rdata:000042CC ; const ICryptoGetTextPassword::`vftable'
.rdata:000042CC ??_7ICryptoGetTextPassword@@6B@ dd offset __purecall
.rdata:000042CC                                         ; DATA XREF: ICryptoGetTextPassword::ICryptoGetTextPassword(void)+19o
.rdata:000042D0                 dd offset __purecall
.rdata:000042D4                 dd offset __purecall
.rdata:000042D8                 dd offset __purecall
.rdata:000042D8 _rdata          ends
.rdata:000042D8
.rdata$r:000042DC ; ===========================================================================
.rdata$r:000042DC
.rdata$r:000042DC ; Segment type: Pure data
.rdata$r:000042DC ; Segment permissions: Read
.rdata$r:000042DC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000042DC                 assume cs:_rdata$r
.rdata$r:000042DC                 ;org 42DCh
.rdata$r:000042DC ; COMDAT (pick any)
.rdata$r:000042DC                 public ??_R4ICryptoGetTextPassword@@6B@
.rdata$r:000042DC ; const ICryptoGetTextPassword::`RTTI Complete Object Locator'
.rdata$r:000042DC ??_R4ICryptoGetTextPassword@@6B@ db    0 ; DATA XREF: .rdata:000042C8o
.rdata$r:000042DD                 db    0
.rdata$r:000042DE                 db    0
.rdata$r:000042DF                 db    0
.rdata$r:000042E0                 db    0
.rdata$r:000042E1                 db    0
.rdata$r:000042E2                 db    0
.rdata$r:000042E3                 db    0
.rdata$r:000042E4                 db    0
.rdata$r:000042E5                 db    0
.rdata$r:000042E6                 db    0
.rdata$r:000042E7                 db    0
.rdata$r:000042E8                 dd offset ??_R0?AUICryptoGetTextPassword@@@8 ; ICryptoGetTextPassword `RTTI Type Descriptor'
.rdata$r:000042EC                 dd offset ??_R3ICryptoGetTextPassword@@8 ; ICryptoGetTextPassword::`RTTI Class Hierarchy Descriptor'
.rdata$r:000042EC _rdata$r        ends
.rdata$r:000042EC
.text:000042F0 ; ===========================================================================
.text:000042F0
.text:000042F0 ; Segment type: Pure code
.text:000042F0 ; Segment permissions: Read/Execute
.text:000042F0 _text           segment para public 'CODE' use32
.text:000042F0                 assume cs:_text
.text:000042F0                 ;org 42F0h
.text:000042F0 ; COMDAT (pick any)
.text:000042F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000042F0
.text:000042F0 ; =============== S U B R O U T I N E =======================================
.text:000042F0
.text:000042F0 ; Attributes: bp-based frame
.text:000042F0
.text:000042F0 ; public: __thiscall IUnknown::IUnknown(void)
.text:000042F0                 public ??0IUnknown@@QAE@XZ
.text:000042F0 ??0IUnknown@@QAE@XZ proc near           ; CODE XREF: ICryptoGetTextPassword::ICryptoGetTextPassword(void)+11p
.text:000042F0                                         ; IArchiveUpdateCallbackFile::IArchiveUpdateCallbackFile(void)+11p ...
.text:000042F0
.text:000042F0 var_4           = dword ptr -4
.text:000042F0
.text:000042F0                 push    ebp
.text:000042F1                 mov     ebp, esp
.text:000042F3                 push    ecx
.text:000042F4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000042FB                 mov     [ebp+var_4], ecx
.text:000042FE                 mov     eax, [ebp+var_4]
.text:00004301                 mov     esp, ebp
.text:00004303                 pop     ebp
.text:00004304                 retn
.text:00004304 ??0IUnknown@@QAE@XZ endp
.text:00004304
.text:00004304 ; ---------------------------------------------------------------------------
.text:00004305                 align 4
.text:00004305 _text           ends
.text:00004305
.text:00004308 ; ===========================================================================
.text:00004308
.text:00004308 ; Segment type: Pure code
.text:00004308 ; Segment permissions: Read/Execute
.text:00004308 _text           segment para public 'CODE' use32
.text:00004308                 assume cs:_text
.text:00004308                 ;org 4308h
.text:00004308 ; COMDAT (pick any)
.text:00004308                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004308
.text:00004308 ; =============== S U B R O U T I N E =======================================
.text:00004308
.text:00004308 ; Attributes: bp-based frame
.text:00004308
.text:00004308 ; __int32 __stdcall CArchiveUpdateCallback::QueryInterface(CArchiveUpdateCallback *this, const struct _GUID *Buf1, void **)
.text:00004308                 public ?QueryInterface@CArchiveUpdateCallback@@UAGJABU_GUID@@PAPAX@Z
.text:00004308 ?QueryInterface@CArchiveUpdateCallback@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00004308                                         ; CODE XREF: [thunk]:CArchiveUpdateCallback::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j
.text:00004308                                         ; [thunk]:CArchiveUpdateCallback::QueryInterface`adjustor{8}' (_GUID const &,void * *)+5j ...
.text:00004308
.text:00004308 var_1C          = dword ptr -1Ch
.text:00004308 var_18          = dword ptr -18h
.text:00004308 var_14          = dword ptr -14h
.text:00004308 var_10          = dword ptr -10h
.text:00004308 var_C           = dword ptr -0Ch
.text:00004308 var_8           = dword ptr -8
.text:00004308 var_4           = dword ptr -4
.text:00004308 this            = dword ptr  8
.text:00004308 Buf1            = dword ptr  0Ch
.text:00004308 arg_8           = dword ptr  10h
.text:00004308
.text:00004308                 push    ebp
.text:00004309                 mov     ebp, esp
.text:0000430B                 sub     esp, 1Ch
.text:0000430E                 mov     eax, 0CCCCCCCCh
.text:00004313                 mov     [ebp+var_1C], eax
.text:00004316                 mov     [ebp+var_18], eax
.text:00004319                 mov     [ebp+var_14], eax
.text:0000431C                 mov     [ebp+var_10], eax
.text:0000431F                 mov     [ebp+var_C], eax
.text:00004322                 mov     [ebp+var_8], eax
.text:00004325                 mov     [ebp+var_4], eax
.text:00004328                 mov     eax, [ebp+arg_8]
.text:0000432B                 mov     dword ptr [eax], 0
.text:00004331                 push    offset _IID_IUnknown ; Buf2
.text:00004336                 mov     ecx, [ebp+Buf1]
.text:00004339                 push    ecx             ; Buf1
.text:0000433A                 call    ___@8           ; __(x,x)
.text:0000433F                 test    eax, eax
.text:00004341                 jz      short loc_4350
.text:00004343                 mov     edx, [ebp+arg_8]
.text:00004346                 mov     eax, [ebp+this]
.text:00004349                 mov     [edx], eax
.text:0000434B                 jmp     loc_44EE
.text:00004350 ; ---------------------------------------------------------------------------
.text:00004350
.text:00004350 loc_4350:                               ; CODE XREF: CArchiveUpdateCallback::QueryInterface(_GUID const &,void * *)+39j
.text:00004350                 push    offset _IID_IArchiveUpdateCallback2 ; Buf2
.text:00004355                 mov     ecx, [ebp+Buf1]
.text:00004358                 push    ecx             ; Buf1
.text:00004359                 call    ___@8           ; __(x,x)
.text:0000435E                 test    eax, eax
.text:00004360                 jz      short loc_436F
.text:00004362                 mov     edx, [ebp+arg_8]
.text:00004365                 mov     eax, [ebp+this]
.text:00004368                 mov     [edx], eax
.text:0000436A                 jmp     loc_44EE
.text:0000436F ; ---------------------------------------------------------------------------
.text:0000436F
.text:0000436F loc_436F:                               ; CODE XREF: CArchiveUpdateCallback::QueryInterface(_GUID const &,void * *)+58j
.text:0000436F                 push    offset _IID_IArchiveUpdateCallbackFile ; Buf2
.text:00004374                 mov     ecx, [ebp+Buf1]
.text:00004377                 push    ecx             ; Buf1
.text:00004378                 call    ___@8           ; __(x,x)
.text:0000437D                 test    eax, eax
.text:0000437F                 jz      short loc_43A6
.text:00004381                 cmp     [ebp+this], 0
.text:00004385                 jz      short loc_4392
.text:00004387                 mov     edx, [ebp+this]
.text:0000438A                 add     edx, 4
.text:0000438D                 mov     [ebp+var_4], edx
.text:00004390                 jmp     short loc_4399
.text:00004392 ; ---------------------------------------------------------------------------
.text:00004392
.text:00004392 loc_4392:                               ; CODE XREF: CArchiveUpdateCallback::QueryInterface(_GUID const &,void * *)+7Dj
.text:00004392                 mov     [ebp+var_4], 0
.text:00004399
.text:00004399 loc_4399:                               ; CODE XREF: CArchiveUpdateCallback::QueryInterface(_GUID const &,void * *)+88j
.text:00004399                 mov     eax, [ebp+arg_8]
.text:0000439C                 mov     ecx, [ebp+var_4]
.text:0000439F                 mov     [eax], ecx
.text:000043A1                 jmp     loc_44EE
.text:000043A6 ; ---------------------------------------------------------------------------
.text:000043A6
.text:000043A6 loc_43A6:                               ; CODE XREF: CArchiveUpdateCallback::QueryInterface(_GUID const &,void * *)+77j
.text:000043A6                 push    offset _IID_IArchiveExtractCallbackMessage ; Buf2
.text:000043AB                 mov     edx, [ebp+Buf1]
.text:000043AE                 push    edx             ; Buf1
.text:000043AF                 call    ___@8           ; __(x,x)
.text:000043B4                 test    eax, eax
.text:000043B6                 jz      short loc_43DD
.text:000043B8                 cmp     [ebp+this], 0
.text:000043BC                 jz      short loc_43C9
.text:000043BE                 mov     eax, [ebp+this]
.text:000043C1                 add     eax, 8
.text:000043C4                 mov     [ebp+var_8], eax
.text:000043C7                 jmp     short loc_43D0
.text:000043C9 ; ---------------------------------------------------------------------------
.text:000043C9
.text:000043C9 loc_43C9:                               ; CODE XREF: CArchiveUpdateCallback::QueryInterface(_GUID const &,void * *)+B4j
.text:000043C9                 mov     [ebp+var_8], 0
.text:000043D0
.text:000043D0 loc_43D0:                               ; CODE XREF: CArchiveUpdateCallback::QueryInterface(_GUID const &,void * *)+BFj
.text:000043D0                 mov     ecx, [ebp+arg_8]
.text:000043D3                 mov     edx, [ebp+var_8]
.text:000043D6                 mov     [ecx], edx
.text:000043D8                 jmp     loc_44EE
.text:000043DD ; ---------------------------------------------------------------------------
.text:000043DD
.text:000043DD loc_43DD:                               ; CODE XREF: CArchiveUpdateCallback::QueryInterface(_GUID const &,void * *)+AEj
.text:000043DD                 push    offset _IID_IArchiveGetRawProps ; Buf2
.text:000043E2                 mov     eax, [ebp+Buf1]
.text:000043E5                 push    eax             ; Buf1
.text:000043E6                 call    ___@8           ; __(x,x)
.text:000043EB                 test    eax, eax
.text:000043ED                 jz      short loc_4414
.text:000043EF                 cmp     [ebp+this], 0
.text:000043F3                 jz      short loc_4400
.text:000043F5                 mov     ecx, [ebp+this]
.text:000043F8                 add     ecx, 0Ch
.text:000043FB                 mov     [ebp+var_C], ecx
.text:000043FE                 jmp     short loc_4407
.text:00004400 ; ---------------------------------------------------------------------------
.text:00004400
.text:00004400 loc_4400:                               ; CODE XREF: CArchiveUpdateCallback::QueryInterface(_GUID const &,void * *)+EBj
.text:00004400                 mov     [ebp+var_C], 0
.text:00004407
.text:00004407 loc_4407:                               ; CODE XREF: CArchiveUpdateCallback::QueryInterface(_GUID const &,void * *)+F6j
.text:00004407                 mov     edx, [ebp+arg_8]
.text:0000440A                 mov     eax, [ebp+var_C]
.text:0000440D                 mov     [edx], eax
.text:0000440F                 jmp     loc_44EE
.text:00004414 ; ---------------------------------------------------------------------------
.text:00004414
.text:00004414 loc_4414:                               ; CODE XREF: CArchiveUpdateCallback::QueryInterface(_GUID const &,void * *)+E5j
.text:00004414                 push    offset _IID_IArchiveGetRootProps ; Buf2
.text:00004419                 mov     ecx, [ebp+Buf1]
.text:0000441C                 push    ecx             ; Buf1
.text:0000441D                 call    ___@8           ; __(x,x)
.text:00004422                 test    eax, eax
.text:00004424                 jz      short loc_444B
.text:00004426                 cmp     [ebp+this], 0
.text:0000442A                 jz      short loc_4437
.text:0000442C                 mov     edx, [ebp+this]
.text:0000442F                 add     edx, 10h
.text:00004432                 mov     [ebp+var_10], edx
.text:00004435                 jmp     short loc_443E
.text:00004437 ; ---------------------------------------------------------------------------
.text:00004437
.text:00004437 loc_4437:                               ; CODE XREF: CArchiveUpdateCallback::QueryInterface(_GUID const &,void * *)+122j
.text:00004437                 mov     [ebp+var_10], 0
.text:0000443E
.text:0000443E loc_443E:                               ; CODE XREF: CArchiveUpdateCallback::QueryInterface(_GUID const &,void * *)+12Dj
.text:0000443E                 mov     eax, [ebp+arg_8]
.text:00004441                 mov     ecx, [ebp+var_10]
.text:00004444                 mov     [eax], ecx
.text:00004446                 jmp     loc_44EE
.text:0000444B ; ---------------------------------------------------------------------------
.text:0000444B
.text:0000444B loc_444B:                               ; CODE XREF: CArchiveUpdateCallback::QueryInterface(_GUID const &,void * *)+11Cj
.text:0000444B                 push    offset _IID_ICryptoGetTextPassword2 ; Buf2
.text:00004450                 mov     edx, [ebp+Buf1]
.text:00004453                 push    edx             ; Buf1
.text:00004454                 call    ___@8           ; __(x,x)
.text:00004459                 test    eax, eax
.text:0000445B                 jz      short loc_447F
.text:0000445D                 cmp     [ebp+this], 0
.text:00004461                 jz      short loc_446E
.text:00004463                 mov     eax, [ebp+this]
.text:00004466                 add     eax, 14h
.text:00004469                 mov     [ebp+var_14], eax
.text:0000446C                 jmp     short loc_4475
.text:0000446E ; ---------------------------------------------------------------------------
.text:0000446E
.text:0000446E loc_446E:                               ; CODE XREF: CArchiveUpdateCallback::QueryInterface(_GUID const &,void * *)+159j
.text:0000446E                 mov     [ebp+var_14], 0
.text:00004475
.text:00004475 loc_4475:                               ; CODE XREF: CArchiveUpdateCallback::QueryInterface(_GUID const &,void * *)+164j
.text:00004475                 mov     ecx, [ebp+arg_8]
.text:00004478                 mov     edx, [ebp+var_14]
.text:0000447B                 mov     [ecx], edx
.text:0000447D                 jmp     short loc_44EE
.text:0000447F ; ---------------------------------------------------------------------------
.text:0000447F
.text:0000447F loc_447F:                               ; CODE XREF: CArchiveUpdateCallback::QueryInterface(_GUID const &,void * *)+153j
.text:0000447F                 push    offset _IID_ICryptoGetTextPassword ; Buf2
.text:00004484                 mov     eax, [ebp+Buf1]
.text:00004487                 push    eax             ; Buf1
.text:00004488                 call    ___@8           ; __(x,x)
.text:0000448D                 test    eax, eax
.text:0000448F                 jz      short loc_44B3
.text:00004491                 cmp     [ebp+this], 0
.text:00004495                 jz      short loc_44A2
.text:00004497                 mov     ecx, [ebp+this]
.text:0000449A                 add     ecx, 18h
.text:0000449D                 mov     [ebp+var_18], ecx
.text:000044A0                 jmp     short loc_44A9
.text:000044A2 ; ---------------------------------------------------------------------------
.text:000044A2
.text:000044A2 loc_44A2:                               ; CODE XREF: CArchiveUpdateCallback::QueryInterface(_GUID const &,void * *)+18Dj
.text:000044A2                 mov     [ebp+var_18], 0
.text:000044A9
.text:000044A9 loc_44A9:                               ; CODE XREF: CArchiveUpdateCallback::QueryInterface(_GUID const &,void * *)+198j
.text:000044A9                 mov     edx, [ebp+arg_8]
.text:000044AC                 mov     eax, [ebp+var_18]
.text:000044AF                 mov     [edx], eax
.text:000044B1                 jmp     short loc_44EE
.text:000044B3 ; ---------------------------------------------------------------------------
.text:000044B3
.text:000044B3 loc_44B3:                               ; CODE XREF: CArchiveUpdateCallback::QueryInterface(_GUID const &,void * *)+187j
.text:000044B3                 push    offset _IID_ICompressProgressInfo ; Buf2
.text:000044B8                 mov     ecx, [ebp+Buf1]
.text:000044BB                 push    ecx             ; Buf1
.text:000044BC                 call    ___@8           ; __(x,x)
.text:000044C1                 test    eax, eax
.text:000044C3                 jz      short loc_44E7
.text:000044C5                 cmp     [ebp+this], 0
.text:000044C9                 jz      short loc_44D6
.text:000044CB                 mov     edx, [ebp+this]
.text:000044CE                 add     edx, 1Ch
.text:000044D1                 mov     [ebp+var_1C], edx
.text:000044D4                 jmp     short loc_44DD
.text:000044D6 ; ---------------------------------------------------------------------------
.text:000044D6
.text:000044D6 loc_44D6:                               ; CODE XREF: CArchiveUpdateCallback::QueryInterface(_GUID const &,void * *)+1C1j
.text:000044D6                 mov     [ebp+var_1C], 0
.text:000044DD
.text:000044DD loc_44DD:                               ; CODE XREF: CArchiveUpdateCallback::QueryInterface(_GUID const &,void * *)+1CCj
.text:000044DD                 mov     eax, [ebp+arg_8]
.text:000044E0                 mov     ecx, [ebp+var_1C]
.text:000044E3                 mov     [eax], ecx
.text:000044E5                 jmp     short loc_44EE
.text:000044E7 ; ---------------------------------------------------------------------------
.text:000044E7
.text:000044E7 loc_44E7:                               ; CODE XREF: CArchiveUpdateCallback::QueryInterface(_GUID const &,void * *)+1BBj
.text:000044E7                 mov     eax, 80004002h
.text:000044EC                 jmp     short loc_44FF
.text:000044EE ; ---------------------------------------------------------------------------
.text:000044EE
.text:000044EE loc_44EE:                               ; CODE XREF: CArchiveUpdateCallback::QueryInterface(_GUID const &,void * *)+43j
.text:000044EE                                         ; CArchiveUpdateCallback::QueryInterface(_GUID const &,void * *)+62j ...
.text:000044EE                 mov     edx, [ebp+this]
.text:000044F1                 mov     eax, [edx+24h]
.text:000044F4                 add     eax, 1
.text:000044F7                 mov     ecx, [ebp+this]
.text:000044FA                 mov     [ecx+24h], eax
.text:000044FD                 xor     eax, eax
.text:000044FF
.text:000044FF loc_44FF:                               ; CODE XREF: CArchiveUpdateCallback::QueryInterface(_GUID const &,void * *)+1E4j
.text:000044FF                 add     esp, 1Ch
.text:00004502                 cmp     ebp, esp
.text:00004504                 call    __RTC_CheckEsp
.text:00004509                 mov     esp, ebp
.text:0000450B                 pop     ebp
.text:0000450C                 retn    0Ch
.text:0000450C ?QueryInterface@CArchiveUpdateCallback@@UAGJABU_GUID@@PAPAX@Z endp
.text:0000450C
.text:0000450C ; ---------------------------------------------------------------------------
.text:0000450F                 align 10h
.text:0000450F _text           ends
.text:0000450F
.text:00004510 ; ===========================================================================
.text:00004510
.text:00004510 ; Segment type: Pure code
.text:00004510 ; Segment permissions: Read/Execute
.text:00004510 _text           segment para public 'CODE' use32
.text:00004510                 assume cs:_text
.text:00004510                 ;org 4510h
.text:00004510 ; COMDAT (pick any)
.text:00004510                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004510
.text:00004510 ; =============== S U B R O U T I N E =======================================
.text:00004510
.text:00004510 ; Attributes: bp-based frame
.text:00004510
.text:00004510 ; int __stdcall __(void *Buf1, void *Buf2)
.text:00004510                 public ___@8
.text:00004510 ___@8           proc near               ; CODE XREF: CArchiveUpdateCallback::QueryInterface(_GUID const &,void * *)+32p
.text:00004510                                         ; CArchiveUpdateCallback::QueryInterface(_GUID const &,void * *)+51p ...
.text:00004510
.text:00004510 Buf1            = dword ptr  8
.text:00004510 Buf2            = dword ptr  0Ch
.text:00004510
.text:00004510                 push    ebp
.text:00004511                 mov     ebp, esp
.text:00004513                 mov     eax, [ebp+Buf2]
.text:00004516                 push    eax             ; Buf2
.text:00004517                 mov     ecx, [ebp+Buf1]
.text:0000451A                 push    ecx             ; Buf1
.text:0000451B                 call    _IsEqualGUID@8  ; IsEqualGUID(x,x)
.text:00004520                 cmp     ebp, esp
.text:00004522                 call    __RTC_CheckEsp
.text:00004527                 pop     ebp
.text:00004528                 retn    8
.text:00004528 ___@8           endp
.text:00004528
.text:00004528 ; ---------------------------------------------------------------------------
.text:0000452B                 align 4
.text:0000452B _text           ends
.text:0000452B
.text:0000452C ; ===========================================================================
.text:0000452C
.text:0000452C ; Segment type: Pure code
.text:0000452C ; Segment permissions: Read/Execute
.text:0000452C _text           segment para public 'CODE' use32
.text:0000452C                 assume cs:_text
.text:0000452C                 ;org 452Ch
.text:0000452C ; COMDAT (pick any)
.text:0000452C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000452C
.text:0000452C ; =============== S U B R O U T I N E =======================================
.text:0000452C
.text:0000452C ; Attributes: bp-based frame
.text:0000452C
.text:0000452C ; int __stdcall IsEqualGUID(void *Buf1, void *Buf2)
.text:0000452C                 public _IsEqualGUID@8
.text:0000452C _IsEqualGUID@8  proc near               ; CODE XREF: __(x,x)+Bp
.text:0000452C
.text:0000452C Buf1            = dword ptr  8
.text:0000452C Buf2            = dword ptr  0Ch
.text:0000452C
.text:0000452C                 push    ebp
.text:0000452D                 mov     ebp, esp
.text:0000452F                 push    10h             ; Size
.text:00004531                 mov     eax, [ebp+Buf2]
.text:00004534                 push    eax             ; Buf2
.text:00004535                 mov     ecx, [ebp+Buf1]
.text:00004538                 push    ecx             ; Buf1
.text:00004539                 call    _memcmp
.text:0000453E                 add     esp, 0Ch
.text:00004541                 neg     eax
.text:00004543                 sbb     eax, eax
.text:00004545                 add     eax, 1
.text:00004548                 cmp     ebp, esp
.text:0000454A                 call    __RTC_CheckEsp
.text:0000454F                 pop     ebp
.text:00004550                 retn    8
.text:00004550 _IsEqualGUID@8  endp
.text:00004550
.text:00004550 ; ---------------------------------------------------------------------------
.text:00004553                 align 4
.text:00004553 _text           ends
.text:00004553
.text:00004554 ; ===========================================================================
.text:00004554
.text:00004554 ; Segment type: Pure code
.text:00004554 ; Segment permissions: Read/Execute
.text:00004554 _text           segment para public 'CODE' use32
.text:00004554                 assume cs:_text
.text:00004554                 ;org 4554h
.text:00004554 ; COMDAT (pick any)
.text:00004554                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004554
.text:00004554 ; =============== S U B R O U T I N E =======================================
.text:00004554
.text:00004554 ; Attributes: bp-based frame
.text:00004554
.text:00004554 ; unsigned __int32 __stdcall CArchiveUpdateCallback::AddRef(CArchiveUpdateCallback *this)
.text:00004554                 public ?AddRef@CArchiveUpdateCallback@@UAGKXZ
.text:00004554 ?AddRef@CArchiveUpdateCallback@@UAGKXZ proc near
.text:00004554                                         ; CODE XREF: [thunk]:CArchiveUpdateCallback::AddRef`adjustor{8}' (void)+5j
.text:00004554                                         ; [thunk]:CArchiveUpdateCallback::AddRef`adjustor{12}' (void)+5j ...
.text:00004554
.text:00004554 var_4           = dword ptr -4
.text:00004554 this            = dword ptr  8
.text:00004554
.text:00004554                 push    ebp
.text:00004555                 mov     ebp, esp
.text:00004557                 push    ecx
.text:00004558                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000455F                 mov     eax, [ebp+this]
.text:00004562                 mov     ecx, [eax+24h]
.text:00004565                 add     ecx, 1
.text:00004568                 mov     [ebp+var_4], ecx
.text:0000456B                 mov     edx, [ebp+this]
.text:0000456E                 mov     eax, [ebp+var_4]
.text:00004571                 mov     [edx+24h], eax
.text:00004574                 mov     eax, [ebp+var_4]
.text:00004577                 mov     esp, ebp
.text:00004579                 pop     ebp
.text:0000457A                 retn    4
.text:0000457A ?AddRef@CArchiveUpdateCallback@@UAGKXZ endp
.text:0000457A
.text:0000457A ; ---------------------------------------------------------------------------
.text:0000457D                 align 10h
.text:0000457D _text           ends
.text:0000457D
.text:00004580 ; ===========================================================================
.text:00004580
.text:00004580 ; Segment type: Pure code
.text:00004580 ; Segment permissions: Read/Execute
.text:00004580 _text           segment para public 'CODE' use32
.text:00004580                 assume cs:_text
.text:00004580                 ;org 4580h
.text:00004580 ; COMDAT (pick any)
.text:00004580                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004580
.text:00004580 ; =============== S U B R O U T I N E =======================================
.text:00004580
.text:00004580 ; Attributes: bp-based frame
.text:00004580
.text:00004580 ; unsigned __int32 __stdcall CArchiveUpdateCallback::Release(CArchiveUpdateCallback *this)
.text:00004580                 public ?Release@CArchiveUpdateCallback@@UAGKXZ
.text:00004580 ?Release@CArchiveUpdateCallback@@UAGKXZ proc near
.text:00004580                                         ; CODE XREF: [thunk]:CArchiveUpdateCallback::Release`adjustor{16}' (void)+5j
.text:00004580                                         ; [thunk]:CArchiveUpdateCallback::Release`adjustor{20}' (void)+5j ...
.text:00004580
.text:00004580 var_10          = dword ptr -10h
.text:00004580 var_C           = dword ptr -0Ch
.text:00004580 var_8           = dword ptr -8
.text:00004580 var_4           = dword ptr -4
.text:00004580 this            = dword ptr  8
.text:00004580
.text:00004580                 push    ebp
.text:00004581                 mov     ebp, esp
.text:00004583                 sub     esp, 10h
.text:00004586                 mov     eax, 0CCCCCCCCh
.text:0000458B                 mov     [ebp+var_10], eax
.text:0000458E                 mov     [ebp+var_C], eax
.text:00004591                 mov     [ebp+var_8], eax
.text:00004594                 mov     [ebp+var_4], eax
.text:00004597                 mov     eax, [ebp+this]
.text:0000459A                 mov     ecx, [eax+24h]
.text:0000459D                 sub     ecx, 1
.text:000045A0                 mov     [ebp+var_C], ecx
.text:000045A3                 mov     edx, [ebp+this]
.text:000045A6                 mov     eax, [ebp+var_C]
.text:000045A9                 mov     [edx+24h], eax
.text:000045AC                 cmp     [ebp+var_C], 0
.text:000045B0                 jz      short loc_45BA
.text:000045B2                 mov     ecx, [ebp+this]
.text:000045B5                 mov     eax, [ecx+24h]
.text:000045B8                 jmp     short loc_45E4
.text:000045BA ; ---------------------------------------------------------------------------
.text:000045BA
.text:000045BA loc_45BA:                               ; CODE XREF: CArchiveUpdateCallback::Release(void)+30j
.text:000045BA                 mov     edx, [ebp+this]
.text:000045BD                 mov     [ebp+var_8], edx
.text:000045C0                 mov     eax, [ebp+var_8]
.text:000045C3                 mov     [ebp+var_4], eax
.text:000045C6                 cmp     [ebp+var_4], 0
.text:000045CA                 jz      short loc_45DB
.text:000045CC                 push    1
.text:000045CE                 mov     ecx, [ebp+var_4]
.text:000045D1                 call    ??_GCArchiveUpdateCallback@@QAEPAXI@Z ; CArchiveUpdateCallback::`scalar deleting destructor'(uint)
.text:000045D6                 mov     [ebp+var_10], eax
.text:000045D9                 jmp     short loc_45E2
.text:000045DB ; ---------------------------------------------------------------------------
.text:000045DB
.text:000045DB loc_45DB:                               ; CODE XREF: CArchiveUpdateCallback::Release(void)+4Aj
.text:000045DB                 mov     [ebp+var_10], 0
.text:000045E2
.text:000045E2 loc_45E2:                               ; CODE XREF: CArchiveUpdateCallback::Release(void)+59j
.text:000045E2                 xor     eax, eax
.text:000045E4
.text:000045E4 loc_45E4:                               ; CODE XREF: CArchiveUpdateCallback::Release(void)+38j
.text:000045E4                 add     esp, 10h
.text:000045E7                 cmp     ebp, esp
.text:000045E9                 call    __RTC_CheckEsp
.text:000045EE                 mov     esp, ebp
.text:000045F0                 pop     ebp
.text:000045F1                 retn    4
.text:000045F1 ?Release@CArchiveUpdateCallback@@UAGKXZ endp
.text:000045F1
.text:000045F1 _text           ends
.text:000045F1
.text:000045F4 ; ===========================================================================
.text:000045F4
.text:000045F4 ; Segment type: Pure code
.text:000045F4 ; Segment permissions: Read/Execute
.text:000045F4 _text           segment para public 'CODE' use32
.text:000045F4                 assume cs:_text
.text:000045F4                 ;org 45F4h
.text:000045F4 ; COMDAT (pick any)
.text:000045F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000045F4
.text:000045F4 ; =============== S U B R O U T I N E =======================================
.text:000045F4
.text:000045F4 ; Attributes: bp-based frame
.text:000045F4
.text:000045F4 ; public: void * __thiscall CArchiveUpdateCallback::`scalar deleting destructor'(unsigned int)
.text:000045F4                 public ??_GCArchiveUpdateCallback@@QAEPAXI@Z
.text:000045F4 ??_GCArchiveUpdateCallback@@QAEPAXI@Z proc near
.text:000045F4                                         ; CODE XREF: CArchiveUpdateCallback::Release(void)+51p
.text:000045F4
.text:000045F4 var_4           = dword ptr -4
.text:000045F4 arg_0           = dword ptr  8
.text:000045F4
.text:000045F4                 push    ebp
.text:000045F5                 mov     ebp, esp
.text:000045F7                 push    ecx
.text:000045F8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000045FF                 mov     [ebp+var_4], ecx
.text:00004602                 mov     ecx, [ebp+var_4] ; this
.text:00004605                 call    ??1CArchiveUpdateCallback@@QAE@XZ ; CArchiveUpdateCallback::~CArchiveUpdateCallback(void)
.text:0000460A                 mov     eax, [ebp+arg_0]
.text:0000460D                 and     eax, 1
.text:00004610                 jz      short loc_461E
.text:00004612                 mov     ecx, [ebp+var_4]
.text:00004615                 push    ecx             ; void *
.text:00004616                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000461B                 add     esp, 4
.text:0000461E
.text:0000461E loc_461E:                               ; CODE XREF: CArchiveUpdateCallback::`scalar deleting destructor'(uint)+1Cj
.text:0000461E                 mov     eax, [ebp+var_4]
.text:00004621                 add     esp, 4
.text:00004624                 cmp     ebp, esp
.text:00004626                 call    __RTC_CheckEsp
.text:0000462B                 mov     esp, ebp
.text:0000462D                 pop     ebp
.text:0000462E                 retn    4
.text:0000462E ??_GCArchiveUpdateCallback@@QAEPAXI@Z endp
.text:0000462E
.text:0000462E ; ---------------------------------------------------------------------------
.text:00004631                 align 4
.text:00004631 _text           ends
.text:00004631
.text:00004634 ; ===========================================================================
.text:00004634
.text:00004634 ; Segment type: Pure code
.text:00004634 ; Segment permissions: Read/Execute
.text:00004634 _text           segment para public 'CODE' use32
.text:00004634                 assume cs:_text
.text:00004634                 ;org 4634h
.text:00004634 ; COMDAT (pick any)
.text:00004634                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004634
.text:00004634 ; =============== S U B R O U T I N E =======================================
.text:00004634
.text:00004634 ; Attributes: bp-based frame
.text:00004634
.text:00004634 ; _DWORD __thiscall CArchiveUpdateCallback::~CArchiveUpdateCallback(CArchiveUpdateCallback *__hidden this)
.text:00004634                 public ??1CArchiveUpdateCallback@@QAE@XZ
.text:00004634 ??1CArchiveUpdateCallback@@QAE@XZ proc near
.text:00004634                                         ; CODE XREF: CArchiveUpdateCallback::`scalar deleting destructor'(uint)+11p
.text:00004634
.text:00004634 var_10          = dword ptr -10h
.text:00004634 var_C           = dword ptr -0Ch
.text:00004634 var_4           = dword ptr -4
.text:00004634
.text:00004634                 push    ebp
.text:00004635                 mov     ebp, esp
.text:00004637                 push    0FFFFFFFFh
.text:00004639                 push    offset __ehhandler$??1CArchiveUpdateCallback@@QAE@XZ
.text:0000463E                 mov     eax, large fs:0
.text:00004644                 push    eax
.text:00004645                 push    ecx
.text:00004646                 mov     [ebp+var_10], 0CCCCCCCCh
.text:0000464D                 mov     eax, dword ptr ds:___security_cookie
.text:00004652                 xor     eax, ebp
.text:00004654                 push    eax
.text:00004655                 lea     eax, [ebp+var_C]
.text:00004658                 mov     large fs:0, eax
.text:0000465E                 mov     [ebp+var_10], ecx
.text:00004661                 mov     [ebp+var_4], 5
.text:00004668                 mov     ecx, [ebp+var_10]
.text:0000466B                 add     ecx, 8Ch ; 'î'
.text:00004671                 call    ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)
.text:00004676                 mov     byte ptr [ebp+var_4], 4
.text:0000467A                 mov     ecx, [ebp+var_10]
.text:0000467D                 add     ecx, 70h ; 'p'  ; this
.text:00004680                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00004685                 mov     byte ptr [ebp+var_4], 3
.text:00004689                 mov     ecx, [ebp+var_10]
.text:0000468C                 add     ecx, 64h ; 'd'  ; this
.text:0000468F                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00004694                 mov     byte ptr [ebp+var_4], 2
.text:00004698                 mov     ecx, [ebp+var_10]
.text:0000469B                 add     ecx, 58h ; 'X'
.text:0000469E                 call    ??1?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text:000046A3                 mov     byte ptr [ebp+var_4], 1
.text:000046A7                 mov     ecx, [ebp+var_10]
.text:000046AA                 add     ecx, 4Ch ; 'L'
.text:000046AD                 call    ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text:000046B2                 mov     byte ptr [ebp+var_4], 0
.text:000046B6                 mov     ecx, [ebp+var_10]
.text:000046B9                 add     ecx, 40h ; '@'
.text:000046BC                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:000046C1                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000046C8                 mov     ecx, [ebp+var_10]
.text:000046CB                 add     ecx, 2Ch ; ','
.text:000046CE                 call    ??1?$CRecordVector@UCKeyKeyValPair@@@@QAE@XZ ; CRecordVector<CKeyKeyValPair>::~CRecordVector<CKeyKeyValPair>(void)
.text:000046D3                 mov     ecx, [ebp+var_C]
.text:000046D6                 mov     large fs:0, ecx
.text:000046DD                 pop     ecx
.text:000046DE                 add     esp, 10h
.text:000046E1                 cmp     ebp, esp
.text:000046E3                 call    __RTC_CheckEsp
.text:000046E8                 mov     esp, ebp
.text:000046EA                 pop     ebp
.text:000046EB                 retn
.text:000046EB ??1CArchiveUpdateCallback@@QAE@XZ endp
.text:000046EB
.text:000046EB _text           ends
.text:000046EB
.text$x:000046EC ; ===========================================================================
.text$x:000046EC
.text$x:000046EC ; Segment type: Pure code
.text$x:000046EC ; Segment permissions: Read/Execute
.text$x:000046EC _text$x         segment para public 'CODE' use32
.text$x:000046EC                 assume cs:_text$x
.text$x:000046EC                 ;org 46ECh
.text$x:000046EC ; COMDAT (pick associative to section at 4634)
.text$x:000046EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000046EC
.text$x:000046EC ; =============== S U B R O U T I N E =======================================
.text$x:000046EC
.text$x:000046EC
.text$x:000046EC __unwindfunclet$??1CArchiveUpdateCallback@@QAE@XZ$0 proc near
.text$x:000046EC                                         ; DATA XREF: .xdata$x:00004774o
.text$x:000046EC                 mov     ecx, [ebp-10h]
.text$x:000046EF                 add     ecx, 2Ch ; ','
.text$x:000046F2                 jmp     ??1?$CRecordVector@UCKeyKeyValPair@@@@QAE@XZ ; CRecordVector<CKeyKeyValPair>::~CRecordVector<CKeyKeyValPair>(void)
.text$x:000046F2 __unwindfunclet$??1CArchiveUpdateCallback@@QAE@XZ$0 endp
.text$x:000046F2
.text$x:000046F7
.text$x:000046F7 ; =============== S U B R O U T I N E =======================================
.text$x:000046F7
.text$x:000046F7
.text$x:000046F7 __unwindfunclet$??1CArchiveUpdateCallback@@QAE@XZ$1 proc near
.text$x:000046F7                                         ; DATA XREF: .xdata$x:0000477Co
.text$x:000046F7                 mov     ecx, [ebp-10h]
.text$x:000046FA                 add     ecx, 40h ; '@'
.text$x:000046FD                 jmp     ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text$x:000046FD __unwindfunclet$??1CArchiveUpdateCallback@@QAE@XZ$1 endp
.text$x:000046FD
.text$x:00004702
.text$x:00004702 ; =============== S U B R O U T I N E =======================================
.text$x:00004702
.text$x:00004702
.text$x:00004702 __unwindfunclet$??1CArchiveUpdateCallback@@QAE@XZ$2 proc near
.text$x:00004702                                         ; DATA XREF: .xdata$x:00004784o
.text$x:00004702                 mov     ecx, [ebp-10h]
.text$x:00004705                 add     ecx, 4Ch ; 'L'
.text$x:00004708                 jmp     ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text$x:00004708 __unwindfunclet$??1CArchiveUpdateCallback@@QAE@XZ$2 endp
.text$x:00004708
.text$x:0000470D
.text$x:0000470D ; =============== S U B R O U T I N E =======================================
.text$x:0000470D
.text$x:0000470D
.text$x:0000470D __unwindfunclet$??1CArchiveUpdateCallback@@QAE@XZ$3 proc near
.text$x:0000470D                                         ; DATA XREF: .xdata$x:0000478Co
.text$x:0000470D                 mov     ecx, [ebp-10h]
.text$x:00004710                 add     ecx, 58h ; 'X'
.text$x:00004713                 jmp     ??1?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text$x:00004713 __unwindfunclet$??1CArchiveUpdateCallback@@QAE@XZ$3 endp
.text$x:00004713
.text$x:00004718
.text$x:00004718 ; =============== S U B R O U T I N E =======================================
.text$x:00004718
.text$x:00004718
.text$x:00004718 __unwindfunclet$??1CArchiveUpdateCallback@@QAE@XZ$4 proc near
.text$x:00004718                                         ; DATA XREF: .xdata$x:00004794o
.text$x:00004718                 mov     ecx, [ebp-10h]
.text$x:0000471B                 add     ecx, 64h ; 'd'  ; this
.text$x:0000471E                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000471E __unwindfunclet$??1CArchiveUpdateCallback@@QAE@XZ$4 endp
.text$x:0000471E
.text$x:00004723
.text$x:00004723 ; =============== S U B R O U T I N E =======================================
.text$x:00004723
.text$x:00004723
.text$x:00004723 __unwindfunclet$??1CArchiveUpdateCallback@@QAE@XZ$5 proc near
.text$x:00004723                                         ; DATA XREF: .xdata$x:0000479Co
.text$x:00004723                 mov     ecx, [ebp-10h]
.text$x:00004726                 add     ecx, 70h ; 'p'  ; this
.text$x:00004729                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00004729 __unwindfunclet$??1CArchiveUpdateCallback@@QAE@XZ$5 endp
.text$x:00004729
.text$x:0000472E
.text$x:0000472E ; =============== S U B R O U T I N E =======================================
.text$x:0000472E
.text$x:0000472E
.text$x:0000472E __ehhandler$??1CArchiveUpdateCallback@@QAE@XZ proc near
.text$x:0000472E                                         ; DATA XREF: CArchiveUpdateCallback::~CArchiveUpdateCallback(void)+5o
.text$x:0000472E
.text$x:0000472E arg_4           = dword ptr  8
.text$x:0000472E
.text$x:0000472E                 mov     edx, [esp+arg_4]
.text$x:00004732                 lea     eax, [edx+0Ch]
.text$x:00004735                 mov     ecx, [edx-8]
.text$x:00004738                 xor     ecx, eax
.text$x:0000473A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000473F                 mov     eax, offset __ehfuncinfo$??1CArchiveUpdateCallback@@QAE@XZ
.text$x:00004744                 jmp     ___CxxFrameHandler3
.text$x:00004744 __ehhandler$??1CArchiveUpdateCallback@@QAE@XZ endp
.text$x:00004744
.text$x:00004744 ; ---------------------------------------------------------------------------
.text$x:00004749                 align 4
.text$x:00004749 _text$x         ends
.text$x:00004749
.xdata$x:0000474C ; ===========================================================================
.xdata$x:0000474C
.xdata$x:0000474C ; Segment type: Pure data
.xdata$x:0000474C ; Segment permissions: Read
.xdata$x:0000474C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000474C                 assume cs:_xdata$x
.xdata$x:0000474C                 ;org 474Ch
.xdata$x:0000474C ; COMDAT (pick associative to section at 4634)
.xdata$x:0000474C __ehfuncinfo$??1CArchiveUpdateCallback@@QAE@XZ db  22h ; "
.xdata$x:0000474C                                         ; DATA XREF: __ehhandler$??1CArchiveUpdateCallback@@QAE@XZ+11o
.xdata$x:0000474D                 db    5
.xdata$x:0000474E                 db  93h ; ô
.xdata$x:0000474F                 db  19h
.xdata$x:00004750                 db    6
.xdata$x:00004751                 db    0
.xdata$x:00004752                 db    0
.xdata$x:00004753                 db    0
.xdata$x:00004754                 dd offset __unwindtable$??1CArchiveUpdateCallback@@QAE@XZ
.xdata$x:00004758                 db    0
.xdata$x:00004759                 db    0
.xdata$x:0000475A                 db    0
.xdata$x:0000475B                 db    0
.xdata$x:0000475C                 db    0
.xdata$x:0000475D                 db    0
.xdata$x:0000475E                 db    0
.xdata$x:0000475F                 db    0
.xdata$x:00004760                 db    0
.xdata$x:00004761                 db    0
.xdata$x:00004762                 db    0
.xdata$x:00004763                 db    0
.xdata$x:00004764                 db    0
.xdata$x:00004765                 db    0
.xdata$x:00004766                 db    0
.xdata$x:00004767                 db    0
.xdata$x:00004768                 db    0
.xdata$x:00004769                 db    0
.xdata$x:0000476A                 db    0
.xdata$x:0000476B                 db    0
.xdata$x:0000476C                 db    1
.xdata$x:0000476D                 db    0
.xdata$x:0000476E                 db    0
.xdata$x:0000476F                 db    0
.xdata$x:00004770 __unwindtable$??1CArchiveUpdateCallback@@QAE@XZ db 0FFh
.xdata$x:00004770                                         ; DATA XREF: .xdata$x:00004754o
.xdata$x:00004771                 db 0FFh
.xdata$x:00004772                 db 0FFh
.xdata$x:00004773                 db 0FFh
.xdata$x:00004774                 dd offset __unwindfunclet$??1CArchiveUpdateCallback@@QAE@XZ$0
.xdata$x:00004778                 db    0
.xdata$x:00004779                 db    0
.xdata$x:0000477A                 db    0
.xdata$x:0000477B                 db    0
.xdata$x:0000477C                 dd offset __unwindfunclet$??1CArchiveUpdateCallback@@QAE@XZ$1
.xdata$x:00004780                 db    1
.xdata$x:00004781                 db    0
.xdata$x:00004782                 db    0
.xdata$x:00004783                 db    0
.xdata$x:00004784                 dd offset __unwindfunclet$??1CArchiveUpdateCallback@@QAE@XZ$2
.xdata$x:00004788                 db    2
.xdata$x:00004789                 db    0
.xdata$x:0000478A                 db    0
.xdata$x:0000478B                 db    0
.xdata$x:0000478C                 dd offset __unwindfunclet$??1CArchiveUpdateCallback@@QAE@XZ$3
.xdata$x:00004790                 db    3
.xdata$x:00004791                 db    0
.xdata$x:00004792                 db    0
.xdata$x:00004793                 db    0
.xdata$x:00004794                 dd offset __unwindfunclet$??1CArchiveUpdateCallback@@QAE@XZ$4
.xdata$x:00004798                 db    4
.xdata$x:00004799                 db    0
.xdata$x:0000479A                 db    0
.xdata$x:0000479B                 db    0
.xdata$x:0000479C                 dd offset __unwindfunclet$??1CArchiveUpdateCallback@@QAE@XZ$5
.xdata$x:0000479C _xdata$x        ends
.xdata$x:0000479C
.text:000047A0 ; ===========================================================================
.text:000047A0
.text:000047A0 ; Segment type: Pure code
.text:000047A0 ; Segment permissions: Read/Execute
.text:000047A0 _text           segment para public 'CODE' use32
.text:000047A0                 assume cs:_text
.text:000047A0                 ;org 47A0h
.text:000047A0 ; COMDAT (pick any)
.text:000047A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000047A0
.text:000047A0 ; =============== S U B R O U T I N E =======================================
.text:000047A0
.text:000047A0 ; Attributes: bp-based frame
.text:000047A0
.text:000047A0 ; _DWORD __thiscall IArchiveUpdateCallback2::IArchiveUpdateCallback2(IArchiveUpdateCallback2 *__hidden this)
.text:000047A0                 public ??0IArchiveUpdateCallback2@@QAE@XZ
.text:000047A0 ??0IArchiveUpdateCallback2@@QAE@XZ proc near
.text:000047A0                                         ; CODE XREF: CArchiveUpdateCallback::CArchiveUpdateCallback(void):loc_3Cp
.text:000047A0
.text:000047A0 var_4           = dword ptr -4
.text:000047A0
.text:000047A0                 push    ebp
.text:000047A1                 mov     ebp, esp
.text:000047A3                 push    ecx
.text:000047A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000047AB                 mov     [ebp+var_4], ecx
.text:000047AE                 mov     ecx, [ebp+var_4] ; this
.text:000047B1                 call    ??0IArchiveUpdateCallback@@QAE@XZ ; IArchiveUpdateCallback::IArchiveUpdateCallback(void)
.text:000047B6                 mov     eax, [ebp+var_4]
.text:000047B9                 mov     dword ptr [eax], offset ??_7IArchiveUpdateCallback2@@6B@ ; const IArchiveUpdateCallback2::`vftable'
.text:000047BF                 mov     eax, [ebp+var_4]
.text:000047C2                 add     esp, 4
.text:000047C5                 cmp     ebp, esp
.text:000047C7                 call    __RTC_CheckEsp
.text:000047CC                 mov     esp, ebp
.text:000047CE                 pop     ebp
.text:000047CF                 retn
.text:000047CF ??0IArchiveUpdateCallback2@@QAE@XZ endp
.text:000047CF
.text:000047CF _text           ends
.text:000047CF
.rdata:000047D0 ; ===========================================================================
.rdata:000047D0
.rdata:000047D0 ; Segment type: Pure data
.rdata:000047D0 ; Segment permissions: Read
.rdata:000047D0 _rdata          segment dword public 'DATA' use32
.rdata:000047D0                 assume cs:_rdata
.rdata:000047D0                 ;org 47D0h
.rdata:000047D0 ; COMDAT (pick largest)
.rdata:000047D0                 dd offset ??_R4IArchiveUpdateCallback2@@6B@ ; const IArchiveUpdateCallback2::`RTTI Complete Object Locator'
.rdata:000047D4                 public ??_7IArchiveUpdateCallback2@@6B@
.rdata:000047D4 ; const IArchiveUpdateCallback2::`vftable'
.rdata:000047D4 ??_7IArchiveUpdateCallback2@@6B@ dd offset __purecall
.rdata:000047D4                                         ; DATA XREF: IArchiveUpdateCallback2::IArchiveUpdateCallback2(void)+19o
.rdata:000047D8                 dd offset __purecall
.rdata:000047DC                 dd offset __purecall
.rdata:000047E0                 dd offset __purecall
.rdata:000047E4                 dd offset __purecall
.rdata:000047E8                 dd offset __purecall
.rdata:000047EC                 dd offset __purecall
.rdata:000047F0                 dd offset __purecall
.rdata:000047F4                 dd offset __purecall
.rdata:000047F8                 dd offset __purecall
.rdata:000047FC                 dd offset __purecall
.rdata:000047FC _rdata          ends
.rdata:000047FC
.rdata$r:00004800 ; ===========================================================================
.rdata$r:00004800
.rdata$r:00004800 ; Segment type: Pure data
.rdata$r:00004800 ; Segment permissions: Read
.rdata$r:00004800 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004800                 assume cs:_rdata$r
.rdata$r:00004800                 ;org 4800h
.rdata$r:00004800 ; COMDAT (pick any)
.rdata$r:00004800                 public ??_R4IArchiveUpdateCallback2@@6B@
.rdata$r:00004800 ; const IArchiveUpdateCallback2::`RTTI Complete Object Locator'
.rdata$r:00004800 ??_R4IArchiveUpdateCallback2@@6B@ db    0 ; DATA XREF: .rdata:000047D0o
.rdata$r:00004801                 db    0
.rdata$r:00004802                 db    0
.rdata$r:00004803                 db    0
.rdata$r:00004804                 db    0
.rdata$r:00004805                 db    0
.rdata$r:00004806                 db    0
.rdata$r:00004807                 db    0
.rdata$r:00004808                 db    0
.rdata$r:00004809                 db    0
.rdata$r:0000480A                 db    0
.rdata$r:0000480B                 db    0
.rdata$r:0000480C                 dd offset ??_R0?AUIArchiveUpdateCallback2@@@8 ; IArchiveUpdateCallback2 `RTTI Type Descriptor'
.rdata$r:00004810                 dd offset ??_R3IArchiveUpdateCallback2@@8 ; IArchiveUpdateCallback2::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004810 _rdata$r        ends
.rdata$r:00004810
.text:00004814 ; ===========================================================================
.text:00004814
.text:00004814 ; Segment type: Pure code
.text:00004814 ; Segment permissions: Read/Execute
.text:00004814 _text           segment para public 'CODE' use32
.text:00004814                 assume cs:_text
.text:00004814                 ;org 4814h
.text:00004814 ; COMDAT (pick any)
.text:00004814                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004814
.text:00004814 ; =============== S U B R O U T I N E =======================================
.text:00004814
.text:00004814 ; Attributes: bp-based frame
.text:00004814
.text:00004814 ; _DWORD __thiscall IArchiveUpdateCallbackFile::IArchiveUpdateCallbackFile(IArchiveUpdateCallbackFile *__hidden this)
.text:00004814                 public ??0IArchiveUpdateCallbackFile@@QAE@XZ
.text:00004814 ??0IArchiveUpdateCallbackFile@@QAE@XZ proc near
.text:00004814                                         ; CODE XREF: CArchiveUpdateCallback::CArchiveUpdateCallback(void)+3Bp
.text:00004814
.text:00004814 var_4           = dword ptr -4
.text:00004814
.text:00004814                 push    ebp
.text:00004815                 mov     ebp, esp
.text:00004817                 push    ecx
.text:00004818                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000481F                 mov     [ebp+var_4], ecx
.text:00004822                 mov     ecx, [ebp+var_4]
.text:00004825                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:0000482A                 mov     eax, [ebp+var_4]
.text:0000482D                 mov     dword ptr [eax], offset ??_7IArchiveUpdateCallbackFile@@6B@ ; const IArchiveUpdateCallbackFile::`vftable'
.text:00004833                 mov     eax, [ebp+var_4]
.text:00004836                 add     esp, 4
.text:00004839                 cmp     ebp, esp
.text:0000483B                 call    __RTC_CheckEsp
.text:00004840                 mov     esp, ebp
.text:00004842                 pop     ebp
.text:00004843                 retn
.text:00004843 ??0IArchiveUpdateCallbackFile@@QAE@XZ endp
.text:00004843
.text:00004843 _text           ends
.text:00004843
.rdata:00004844 ; ===========================================================================
.rdata:00004844
.rdata:00004844 ; Segment type: Pure data
.rdata:00004844 ; Segment permissions: Read
.rdata:00004844 _rdata          segment dword public 'DATA' use32
.rdata:00004844                 assume cs:_rdata
.rdata:00004844                 ;org 4844h
.rdata:00004844 ; COMDAT (pick largest)
.rdata:00004844                 dd offset ??_R4IArchiveUpdateCallbackFile@@6B@ ; const IArchiveUpdateCallbackFile::`RTTI Complete Object Locator'
.rdata:00004848                 public ??_7IArchiveUpdateCallbackFile@@6B@
.rdata:00004848 ; const IArchiveUpdateCallbackFile::`vftable'
.rdata:00004848 ??_7IArchiveUpdateCallbackFile@@6B@ dd offset __purecall
.rdata:00004848                                         ; DATA XREF: IArchiveUpdateCallbackFile::IArchiveUpdateCallbackFile(void)+19o
.rdata:0000484C                 dd offset __purecall
.rdata:00004850                 dd offset __purecall
.rdata:00004854                 dd offset __purecall
.rdata:00004858                 dd offset __purecall
.rdata:00004858 _rdata          ends
.rdata:00004858
.rdata$r:0000485C ; ===========================================================================
.rdata$r:0000485C
.rdata$r:0000485C ; Segment type: Pure data
.rdata$r:0000485C ; Segment permissions: Read
.rdata$r:0000485C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000485C                 assume cs:_rdata$r
.rdata$r:0000485C                 ;org 485Ch
.rdata$r:0000485C ; COMDAT (pick any)
.rdata$r:0000485C                 public ??_R4IArchiveUpdateCallbackFile@@6B@
.rdata$r:0000485C ; const IArchiveUpdateCallbackFile::`RTTI Complete Object Locator'
.rdata$r:0000485C ??_R4IArchiveUpdateCallbackFile@@6B@ db    0 ; DATA XREF: .rdata:00004844o
.rdata$r:0000485D                 db    0
.rdata$r:0000485E                 db    0
.rdata$r:0000485F                 db    0
.rdata$r:00004860                 db    0
.rdata$r:00004861                 db    0
.rdata$r:00004862                 db    0
.rdata$r:00004863                 db    0
.rdata$r:00004864                 db    0
.rdata$r:00004865                 db    0
.rdata$r:00004866                 db    0
.rdata$r:00004867                 db    0
.rdata$r:00004868                 dd offset ??_R0?AUIArchiveUpdateCallbackFile@@@8 ; IArchiveUpdateCallbackFile `RTTI Type Descriptor'
.rdata$r:0000486C                 dd offset ??_R3IArchiveUpdateCallbackFile@@8 ; IArchiveUpdateCallbackFile::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000486C _rdata$r        ends
.rdata$r:0000486C
.text:00004870 ; ===========================================================================
.text:00004870
.text:00004870 ; Segment type: Pure code
.text:00004870 ; Segment permissions: Read/Execute
.text:00004870 _text           segment para public 'CODE' use32
.text:00004870                 assume cs:_text
.text:00004870                 ;org 4870h
.text:00004870 ; COMDAT (pick any)
.text:00004870                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004870
.text:00004870 ; =============== S U B R O U T I N E =======================================
.text:00004870
.text:00004870 ; Attributes: bp-based frame
.text:00004870
.text:00004870 ; _DWORD __thiscall IArchiveExtractCallbackMessage::IArchiveExtractCallbackMessage(IArchiveExtractCallbackMessage *__hidden this)
.text:00004870                 public ??0IArchiveExtractCallbackMessage@@QAE@XZ
.text:00004870 ??0IArchiveExtractCallbackMessage@@QAE@XZ proc near
.text:00004870                                         ; CODE XREF: CArchiveUpdateCallback::CArchiveUpdateCallback(void)+46p
.text:00004870
.text:00004870 var_4           = dword ptr -4
.text:00004870
.text:00004870                 push    ebp
.text:00004871                 mov     ebp, esp
.text:00004873                 push    ecx
.text:00004874                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000487B                 mov     [ebp+var_4], ecx
.text:0000487E                 mov     ecx, [ebp+var_4] ; this
.text:00004881                 call    ??0IProgress@@QAE@XZ ; IProgress::IProgress(void)
.text:00004886                 mov     eax, [ebp+var_4]
.text:00004889                 mov     dword ptr [eax], offset ??_7IArchiveExtractCallbackMessage@@6B@ ; const IArchiveExtractCallbackMessage::`vftable'
.text:0000488F                 mov     eax, [ebp+var_4]
.text:00004892                 add     esp, 4
.text:00004895                 cmp     ebp, esp
.text:00004897                 call    __RTC_CheckEsp
.text:0000489C                 mov     esp, ebp
.text:0000489E                 pop     ebp
.text:0000489F                 retn
.text:0000489F ??0IArchiveExtractCallbackMessage@@QAE@XZ endp
.text:0000489F
.text:0000489F _text           ends
.text:0000489F
.rdata:000048A0 ; ===========================================================================
.rdata:000048A0
.rdata:000048A0 ; Segment type: Pure data
.rdata:000048A0 ; Segment permissions: Read
.rdata:000048A0 _rdata          segment dword public 'DATA' use32
.rdata:000048A0                 assume cs:_rdata
.rdata:000048A0                 ;org 48A0h
.rdata:000048A0 ; COMDAT (pick largest)
.rdata:000048A0                 dd offset ??_R4IArchiveExtractCallbackMessage@@6B@ ; const IArchiveExtractCallbackMessage::`RTTI Complete Object Locator'
.rdata:000048A4                 public ??_7IArchiveExtractCallbackMessage@@6B@
.rdata:000048A4 ; const IArchiveExtractCallbackMessage::`vftable'
.rdata:000048A4 ??_7IArchiveExtractCallbackMessage@@6B@ dd offset __purecall
.rdata:000048A4                                         ; DATA XREF: IArchiveExtractCallbackMessage::IArchiveExtractCallbackMessage(void)+19o
.rdata:000048A8                 dd offset __purecall
.rdata:000048AC                 dd offset __purecall
.rdata:000048B0                 dd offset __purecall
.rdata:000048B4                 dd offset __purecall
.rdata:000048B8                 dd offset __purecall
.rdata:000048B8 _rdata          ends
.rdata:000048B8
.rdata$r:000048BC ; ===========================================================================
.rdata$r:000048BC
.rdata$r:000048BC ; Segment type: Pure data
.rdata$r:000048BC ; Segment permissions: Read
.rdata$r:000048BC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000048BC                 assume cs:_rdata$r
.rdata$r:000048BC                 ;org 48BCh
.rdata$r:000048BC ; COMDAT (pick any)
.rdata$r:000048BC                 public ??_R4IArchiveExtractCallbackMessage@@6B@
.rdata$r:000048BC ; const IArchiveExtractCallbackMessage::`RTTI Complete Object Locator'
.rdata$r:000048BC ??_R4IArchiveExtractCallbackMessage@@6B@ db    0
.rdata$r:000048BC                                         ; DATA XREF: .rdata:000048A0o
.rdata$r:000048BD                 db    0
.rdata$r:000048BE                 db    0
.rdata$r:000048BF                 db    0
.rdata$r:000048C0                 db    0
.rdata$r:000048C1                 db    0
.rdata$r:000048C2                 db    0
.rdata$r:000048C3                 db    0
.rdata$r:000048C4                 db    0
.rdata$r:000048C5                 db    0
.rdata$r:000048C6                 db    0
.rdata$r:000048C7                 db    0
.rdata$r:000048C8                 dd offset ??_R0?AUIArchiveExtractCallbackMessage@@@8 ; IArchiveExtractCallbackMessage `RTTI Type Descriptor'
.rdata$r:000048CC                 dd offset ??_R3IArchiveExtractCallbackMessage@@8 ; IArchiveExtractCallbackMessage::`RTTI Class Hierarchy Descriptor'
.rdata$r:000048CC _rdata$r        ends
.rdata$r:000048CC
.text:000048D0 ; ===========================================================================
.text:000048D0
.text:000048D0 ; Segment type: Pure code
.text:000048D0 ; Segment permissions: Read/Execute
.text:000048D0 _text           segment para public 'CODE' use32
.text:000048D0                 assume cs:_text
.text:000048D0                 ;org 48D0h
.text:000048D0 ; COMDAT (pick any)
.text:000048D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000048D0
.text:000048D0 ; =============== S U B R O U T I N E =======================================
.text:000048D0
.text:000048D0 ; Attributes: bp-based frame
.text:000048D0
.text:000048D0 ; _DWORD __thiscall IArchiveGetRawProps::IArchiveGetRawProps(IArchiveGetRawProps *__hidden this)
.text:000048D0                 public ??0IArchiveGetRawProps@@QAE@XZ
.text:000048D0 ??0IArchiveGetRawProps@@QAE@XZ proc near
.text:000048D0                                         ; CODE XREF: CArchiveUpdateCallback::CArchiveUpdateCallback(void)+51p
.text:000048D0
.text:000048D0 var_4           = dword ptr -4
.text:000048D0
.text:000048D0                 push    ebp
.text:000048D1                 mov     ebp, esp
.text:000048D3                 push    ecx
.text:000048D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000048DB                 mov     [ebp+var_4], ecx
.text:000048DE                 mov     ecx, [ebp+var_4]
.text:000048E1                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:000048E6                 mov     eax, [ebp+var_4]
.text:000048E9                 mov     dword ptr [eax], offset ??_7IArchiveGetRawProps@@6B@ ; const IArchiveGetRawProps::`vftable'
.text:000048EF                 mov     eax, [ebp+var_4]
.text:000048F2                 add     esp, 4
.text:000048F5                 cmp     ebp, esp
.text:000048F7                 call    __RTC_CheckEsp
.text:000048FC                 mov     esp, ebp
.text:000048FE                 pop     ebp
.text:000048FF                 retn
.text:000048FF ??0IArchiveGetRawProps@@QAE@XZ endp
.text:000048FF
.text:000048FF _text           ends
.text:000048FF
.rdata:00004900 ; ===========================================================================
.rdata:00004900
.rdata:00004900 ; Segment type: Pure data
.rdata:00004900 ; Segment permissions: Read
.rdata:00004900 _rdata          segment dword public 'DATA' use32
.rdata:00004900                 assume cs:_rdata
.rdata:00004900                 ;org 4900h
.rdata:00004900 ; COMDAT (pick largest)
.rdata:00004900                 dd offset ??_R4IArchiveGetRawProps@@6B@ ; const IArchiveGetRawProps::`RTTI Complete Object Locator'
.rdata:00004904                 public ??_7IArchiveGetRawProps@@6B@
.rdata:00004904 ; const IArchiveGetRawProps::`vftable'
.rdata:00004904 ??_7IArchiveGetRawProps@@6B@ dd offset __purecall
.rdata:00004904                                         ; DATA XREF: IArchiveGetRawProps::IArchiveGetRawProps(void)+19o
.rdata:00004908                 dd offset __purecall
.rdata:0000490C                 dd offset __purecall
.rdata:00004910                 dd offset __purecall
.rdata:00004914                 dd offset __purecall
.rdata:00004918                 dd offset __purecall
.rdata:0000491C                 dd offset __purecall
.rdata:0000491C _rdata          ends
.rdata:0000491C
.rdata$r:00004920 ; ===========================================================================
.rdata$r:00004920
.rdata$r:00004920 ; Segment type: Pure data
.rdata$r:00004920 ; Segment permissions: Read
.rdata$r:00004920 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004920                 assume cs:_rdata$r
.rdata$r:00004920                 ;org 4920h
.rdata$r:00004920 ; COMDAT (pick any)
.rdata$r:00004920                 public ??_R4IArchiveGetRawProps@@6B@
.rdata$r:00004920 ; const IArchiveGetRawProps::`RTTI Complete Object Locator'
.rdata$r:00004920 ??_R4IArchiveGetRawProps@@6B@ db    0   ; DATA XREF: .rdata:00004900o
.rdata$r:00004921                 db    0
.rdata$r:00004922                 db    0
.rdata$r:00004923                 db    0
.rdata$r:00004924                 db    0
.rdata$r:00004925                 db    0
.rdata$r:00004926                 db    0
.rdata$r:00004927                 db    0
.rdata$r:00004928                 db    0
.rdata$r:00004929                 db    0
.rdata$r:0000492A                 db    0
.rdata$r:0000492B                 db    0
.rdata$r:0000492C                 dd offset ??_R0?AUIArchiveGetRawProps@@@8 ; IArchiveGetRawProps `RTTI Type Descriptor'
.rdata$r:00004930                 dd offset ??_R3IArchiveGetRawProps@@8 ; IArchiveGetRawProps::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004930 _rdata$r        ends
.rdata$r:00004930
.text:00004934 ; ===========================================================================
.text:00004934
.text:00004934 ; Segment type: Pure code
.text:00004934 ; Segment permissions: Read/Execute
.text:00004934 _text           segment para public 'CODE' use32
.text:00004934                 assume cs:_text
.text:00004934                 ;org 4934h
.text:00004934 ; COMDAT (pick any)
.text:00004934                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004934
.text:00004934 ; =============== S U B R O U T I N E =======================================
.text:00004934
.text:00004934 ; Attributes: bp-based frame
.text:00004934
.text:00004934 ; _DWORD __thiscall IArchiveGetRootProps::IArchiveGetRootProps(IArchiveGetRootProps *__hidden this)
.text:00004934                 public ??0IArchiveGetRootProps@@QAE@XZ
.text:00004934 ??0IArchiveGetRootProps@@QAE@XZ proc near
.text:00004934                                         ; CODE XREF: CArchiveUpdateCallback::CArchiveUpdateCallback(void)+5Cp
.text:00004934
.text:00004934 var_4           = dword ptr -4
.text:00004934
.text:00004934                 push    ebp
.text:00004935                 mov     ebp, esp
.text:00004937                 push    ecx
.text:00004938                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000493F                 mov     [ebp+var_4], ecx
.text:00004942                 mov     ecx, [ebp+var_4]
.text:00004945                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:0000494A                 mov     eax, [ebp+var_4]
.text:0000494D                 mov     dword ptr [eax], offset ??_7IArchiveGetRootProps@@6B@ ; const IArchiveGetRootProps::`vftable'
.text:00004953                 mov     eax, [ebp+var_4]
.text:00004956                 add     esp, 4
.text:00004959                 cmp     ebp, esp
.text:0000495B                 call    __RTC_CheckEsp
.text:00004960                 mov     esp, ebp
.text:00004962                 pop     ebp
.text:00004963                 retn
.text:00004963 ??0IArchiveGetRootProps@@QAE@XZ endp
.text:00004963
.text:00004963 _text           ends
.text:00004963
.rdata:00004964 ; ===========================================================================
.rdata:00004964
.rdata:00004964 ; Segment type: Pure data
.rdata:00004964 ; Segment permissions: Read
.rdata:00004964 _rdata          segment dword public 'DATA' use32
.rdata:00004964                 assume cs:_rdata
.rdata:00004964                 ;org 4964h
.rdata:00004964 ; COMDAT (pick largest)
.rdata:00004964                 dd offset ??_R4IArchiveGetRootProps@@6B@ ; const IArchiveGetRootProps::`RTTI Complete Object Locator'
.rdata:00004968                 public ??_7IArchiveGetRootProps@@6B@
.rdata:00004968 ; const IArchiveGetRootProps::`vftable'
.rdata:00004968 ??_7IArchiveGetRootProps@@6B@ dd offset __purecall
.rdata:00004968                                         ; DATA XREF: IArchiveGetRootProps::IArchiveGetRootProps(void)+19o
.rdata:0000496C                 dd offset __purecall
.rdata:00004970                 dd offset __purecall
.rdata:00004974                 dd offset __purecall
.rdata:00004978                 dd offset __purecall
.rdata:00004978 _rdata          ends
.rdata:00004978
.rdata$r:0000497C ; ===========================================================================
.rdata$r:0000497C
.rdata$r:0000497C ; Segment type: Pure data
.rdata$r:0000497C ; Segment permissions: Read
.rdata$r:0000497C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000497C                 assume cs:_rdata$r
.rdata$r:0000497C                 ;org 497Ch
.rdata$r:0000497C ; COMDAT (pick any)
.rdata$r:0000497C                 public ??_R4IArchiveGetRootProps@@6B@
.rdata$r:0000497C ; const IArchiveGetRootProps::`RTTI Complete Object Locator'
.rdata$r:0000497C ??_R4IArchiveGetRootProps@@6B@ db    0  ; DATA XREF: .rdata:00004964o
.rdata$r:0000497D                 db    0
.rdata$r:0000497E                 db    0
.rdata$r:0000497F                 db    0
.rdata$r:00004980                 db    0
.rdata$r:00004981                 db    0
.rdata$r:00004982                 db    0
.rdata$r:00004983                 db    0
.rdata$r:00004984                 db    0
.rdata$r:00004985                 db    0
.rdata$r:00004986                 db    0
.rdata$r:00004987                 db    0
.rdata$r:00004988                 dd offset ??_R0?AUIArchiveGetRootProps@@@8 ; IArchiveGetRootProps `RTTI Type Descriptor'
.rdata$r:0000498C                 dd offset ??_R3IArchiveGetRootProps@@8 ; IArchiveGetRootProps::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000498C _rdata$r        ends
.rdata$r:0000498C
.text:00004990 ; ===========================================================================
.text:00004990
.text:00004990 ; Segment type: Pure code
.text:00004990 ; Segment permissions: Read/Execute
.text:00004990 _text           segment para public 'CODE' use32
.text:00004990                 assume cs:_text
.text:00004990                 ;org 4990h
.text:00004990 ; COMDAT (pick any)
.text:00004990                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004990
.text:00004990 ; =============== S U B R O U T I N E =======================================
.text:00004990
.text:00004990 ; Attributes: bp-based frame
.text:00004990
.text:00004990 ; _DWORD __thiscall ICryptoGetTextPassword2::ICryptoGetTextPassword2(ICryptoGetTextPassword2 *__hidden this)
.text:00004990                 public ??0ICryptoGetTextPassword2@@QAE@XZ
.text:00004990 ??0ICryptoGetTextPassword2@@QAE@XZ proc near
.text:00004990                                         ; CODE XREF: CArchiveUpdateCallback::CArchiveUpdateCallback(void)+67p
.text:00004990
.text:00004990 var_4           = dword ptr -4
.text:00004990
.text:00004990                 push    ebp
.text:00004991                 mov     ebp, esp
.text:00004993                 push    ecx
.text:00004994                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000499B                 mov     [ebp+var_4], ecx
.text:0000499E                 mov     ecx, [ebp+var_4]
.text:000049A1                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:000049A6                 mov     eax, [ebp+var_4]
.text:000049A9                 mov     dword ptr [eax], offset ??_7ICryptoGetTextPassword2@@6B@ ; const ICryptoGetTextPassword2::`vftable'
.text:000049AF                 mov     eax, [ebp+var_4]
.text:000049B2                 add     esp, 4
.text:000049B5                 cmp     ebp, esp
.text:000049B7                 call    __RTC_CheckEsp
.text:000049BC                 mov     esp, ebp
.text:000049BE                 pop     ebp
.text:000049BF                 retn
.text:000049BF ??0ICryptoGetTextPassword2@@QAE@XZ endp
.text:000049BF
.text:000049BF _text           ends
.text:000049BF
.rdata:000049C0 ; ===========================================================================
.rdata:000049C0
.rdata:000049C0 ; Segment type: Pure data
.rdata:000049C0 ; Segment permissions: Read
.rdata:000049C0 _rdata          segment dword public 'DATA' use32
.rdata:000049C0                 assume cs:_rdata
.rdata:000049C0                 ;org 49C0h
.rdata:000049C0 ; COMDAT (pick largest)
.rdata:000049C0                 dd offset ??_R4ICryptoGetTextPassword2@@6B@ ; const ICryptoGetTextPassword2::`RTTI Complete Object Locator'
.rdata:000049C4                 public ??_7ICryptoGetTextPassword2@@6B@
.rdata:000049C4 ; const ICryptoGetTextPassword2::`vftable'
.rdata:000049C4 ??_7ICryptoGetTextPassword2@@6B@ dd offset __purecall
.rdata:000049C4                                         ; DATA XREF: ICryptoGetTextPassword2::ICryptoGetTextPassword2(void)+19o
.rdata:000049C8                 dd offset __purecall
.rdata:000049CC                 dd offset __purecall
.rdata:000049D0                 dd offset __purecall
.rdata:000049D0 _rdata          ends
.rdata:000049D0
.rdata$r:000049D4 ; ===========================================================================
.rdata$r:000049D4
.rdata$r:000049D4 ; Segment type: Pure data
.rdata$r:000049D4 ; Segment permissions: Read
.rdata$r:000049D4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000049D4                 assume cs:_rdata$r
.rdata$r:000049D4                 ;org 49D4h
.rdata$r:000049D4 ; COMDAT (pick any)
.rdata$r:000049D4                 public ??_R4ICryptoGetTextPassword2@@6B@
.rdata$r:000049D4 ; const ICryptoGetTextPassword2::`RTTI Complete Object Locator'
.rdata$r:000049D4 ??_R4ICryptoGetTextPassword2@@6B@ db    0 ; DATA XREF: .rdata:000049C0o
.rdata$r:000049D5                 db    0
.rdata$r:000049D6                 db    0
.rdata$r:000049D7                 db    0
.rdata$r:000049D8                 db    0
.rdata$r:000049D9                 db    0
.rdata$r:000049DA                 db    0
.rdata$r:000049DB                 db    0
.rdata$r:000049DC                 db    0
.rdata$r:000049DD                 db    0
.rdata$r:000049DE                 db    0
.rdata$r:000049DF                 db    0
.rdata$r:000049E0                 dd offset ??_R0?AUICryptoGetTextPassword2@@@8 ; ICryptoGetTextPassword2 `RTTI Type Descriptor'
.rdata$r:000049E4                 dd offset ??_R3ICryptoGetTextPassword2@@8 ; ICryptoGetTextPassword2::`RTTI Class Hierarchy Descriptor'
.rdata$r:000049E4 _rdata$r        ends
.rdata$r:000049E4
.text:000049E8 ; ===========================================================================
.text:000049E8
.text:000049E8 ; Segment type: Pure code
.text:000049E8 ; Segment permissions: Read/Execute
.text:000049E8 _text           segment para public 'CODE' use32
.text:000049E8                 assume cs:_text
.text:000049E8                 ;org 49E8h
.text:000049E8 ; COMDAT (pick any)
.text:000049E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000049E8
.text:000049E8 ; =============== S U B R O U T I N E =======================================
.text:000049E8
.text:000049E8 ; Attributes: bp-based frame
.text:000049E8
.text:000049E8 ; _DWORD __thiscall ICompressProgressInfo::ICompressProgressInfo(ICompressProgressInfo *__hidden this)
.text:000049E8                 public ??0ICompressProgressInfo@@QAE@XZ
.text:000049E8 ??0ICompressProgressInfo@@QAE@XZ proc near
.text:000049E8                                         ; CODE XREF: CArchiveUpdateCallback::CArchiveUpdateCallback(void)+7Dp
.text:000049E8
.text:000049E8 var_4           = dword ptr -4
.text:000049E8
.text:000049E8                 push    ebp
.text:000049E9                 mov     ebp, esp
.text:000049EB                 push    ecx
.text:000049EC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000049F3                 mov     [ebp+var_4], ecx
.text:000049F6                 mov     ecx, [ebp+var_4]
.text:000049F9                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:000049FE                 mov     eax, [ebp+var_4]
.text:00004A01                 mov     dword ptr [eax], offset ??_7ICompressProgressInfo@@6B@ ; const ICompressProgressInfo::`vftable'
.text:00004A07                 mov     eax, [ebp+var_4]
.text:00004A0A                 add     esp, 4
.text:00004A0D                 cmp     ebp, esp
.text:00004A0F                 call    __RTC_CheckEsp
.text:00004A14                 mov     esp, ebp
.text:00004A16                 pop     ebp
.text:00004A17                 retn
.text:00004A17 ??0ICompressProgressInfo@@QAE@XZ endp
.text:00004A17
.text:00004A17 _text           ends
.text:00004A17
.rdata:00004A18 ; ===========================================================================
.rdata:00004A18
.rdata:00004A18 ; Segment type: Pure data
.rdata:00004A18 ; Segment permissions: Read
.rdata:00004A18 _rdata          segment dword public 'DATA' use32
.rdata:00004A18                 assume cs:_rdata
.rdata:00004A18                 ;org 4A18h
.rdata:00004A18 ; COMDAT (pick largest)
.rdata:00004A18                 dd offset ??_R4ICompressProgressInfo@@6B@ ; const ICompressProgressInfo::`RTTI Complete Object Locator'
.rdata:00004A1C                 public ??_7ICompressProgressInfo@@6B@
.rdata:00004A1C ; const ICompressProgressInfo::`vftable'
.rdata:00004A1C ??_7ICompressProgressInfo@@6B@ dd offset __purecall
.rdata:00004A1C                                         ; DATA XREF: ICompressProgressInfo::ICompressProgressInfo(void)+19o
.rdata:00004A20                 dd offset __purecall
.rdata:00004A24                 dd offset __purecall
.rdata:00004A28                 dd offset __purecall
.rdata:00004A28 _rdata          ends
.rdata:00004A28
.rdata$r:00004A2C ; ===========================================================================
.rdata$r:00004A2C
.rdata$r:00004A2C ; Segment type: Pure data
.rdata$r:00004A2C ; Segment permissions: Read
.rdata$r:00004A2C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004A2C                 assume cs:_rdata$r
.rdata$r:00004A2C                 ;org 4A2Ch
.rdata$r:00004A2C ; COMDAT (pick any)
.rdata$r:00004A2C                 public ??_R4ICompressProgressInfo@@6B@
.rdata$r:00004A2C ; const ICompressProgressInfo::`RTTI Complete Object Locator'
.rdata$r:00004A2C ??_R4ICompressProgressInfo@@6B@ db    0 ; DATA XREF: .rdata:00004A18o
.rdata$r:00004A2D                 db    0
.rdata$r:00004A2E                 db    0
.rdata$r:00004A2F                 db    0
.rdata$r:00004A30                 db    0
.rdata$r:00004A31                 db    0
.rdata$r:00004A32                 db    0
.rdata$r:00004A33                 db    0
.rdata$r:00004A34                 db    0
.rdata$r:00004A35                 db    0
.rdata$r:00004A36                 db    0
.rdata$r:00004A37                 db    0
.rdata$r:00004A38                 dd offset ??_R0?AUICompressProgressInfo@@@8 ; ICompressProgressInfo `RTTI Type Descriptor'
.rdata$r:00004A3C                 dd offset ??_R3ICompressProgressInfo@@8 ; ICompressProgressInfo::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004A3C _rdata$r        ends
.rdata$r:00004A3C
.text:00004A40 ; ===========================================================================
.text:00004A40
.text:00004A40 ; Segment type: Pure code
.text:00004A40 ; Segment permissions: Read/Execute
.text:00004A40 _text           segment para public 'CODE' use32
.text:00004A40                 assume cs:_text
.text:00004A40                 ;org 4A40h
.text:00004A40 ; COMDAT (pick any)
.text:00004A40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004A40
.text:00004A40 ; =============== S U B R O U T I N E =======================================
.text:00004A40
.text:00004A40 ; Attributes: bp-based frame
.text:00004A40
.text:00004A40 ; _DWORD __thiscall IInFileStream_Callback::IInFileStream_Callback(IInFileStream_Callback *__hidden this)
.text:00004A40                 public ??0IInFileStream_Callback@@QAE@XZ
.text:00004A40 ??0IInFileStream_Callback@@QAE@XZ proc near
.text:00004A40                                         ; CODE XREF: CArchiveUpdateCallback::CArchiveUpdateCallback(void)+88p
.text:00004A40
.text:00004A40 var_4           = dword ptr -4
.text:00004A40
.text:00004A40                 push    ebp
.text:00004A41                 mov     ebp, esp
.text:00004A43                 push    ecx
.text:00004A44                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004A4B                 mov     [ebp+var_4], ecx
.text:00004A4E                 mov     eax, [ebp+var_4]
.text:00004A51                 mov     dword ptr [eax], offset ??_7IInFileStream_Callback@@6B@ ; const IInFileStream_Callback::`vftable'
.text:00004A57                 mov     eax, [ebp+var_4]
.text:00004A5A                 mov     esp, ebp
.text:00004A5C                 pop     ebp
.text:00004A5D                 retn
.text:00004A5D ??0IInFileStream_Callback@@QAE@XZ endp
.text:00004A5D
.text:00004A5D ; ---------------------------------------------------------------------------
.text:00004A5E                 align 10h
.text:00004A5E _text           ends
.text:00004A5E
.rdata:00004A60 ; ===========================================================================
.rdata:00004A60
.rdata:00004A60 ; Segment type: Pure data
.rdata:00004A60 ; Segment permissions: Read
.rdata:00004A60 _rdata          segment dword public 'DATA' use32
.rdata:00004A60                 assume cs:_rdata
.rdata:00004A60                 ;org 4A60h
.rdata:00004A60 ; COMDAT (pick largest)
.rdata:00004A60                 dd offset ??_R4IInFileStream_Callback@@6B@ ; const IInFileStream_Callback::`RTTI Complete Object Locator'
.rdata:00004A64                 public ??_7IInFileStream_Callback@@6B@
.rdata:00004A64 ; const IInFileStream_Callback::`vftable'
.rdata:00004A64 ??_7IInFileStream_Callback@@6B@ dd offset __purecall
.rdata:00004A64                                         ; DATA XREF: IInFileStream_Callback::IInFileStream_Callback(void)+11o
.rdata:00004A68                 dd offset __purecall
.rdata:00004A68 _rdata          ends
.rdata:00004A68
.rdata$r:00004A6C ; ===========================================================================
.rdata$r:00004A6C
.rdata$r:00004A6C ; Segment type: Pure data
.rdata$r:00004A6C ; Segment permissions: Read
.rdata$r:00004A6C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004A6C                 assume cs:_rdata$r
.rdata$r:00004A6C                 ;org 4A6Ch
.rdata$r:00004A6C ; COMDAT (pick any)
.rdata$r:00004A6C                 public ??_R4IInFileStream_Callback@@6B@
.rdata$r:00004A6C ; const IInFileStream_Callback::`RTTI Complete Object Locator'
.rdata$r:00004A6C ??_R4IInFileStream_Callback@@6B@ db    0 ; DATA XREF: .rdata:00004A60o
.rdata$r:00004A6D                 db    0
.rdata$r:00004A6E                 db    0
.rdata$r:00004A6F                 db    0
.rdata$r:00004A70                 db    0
.rdata$r:00004A71                 db    0
.rdata$r:00004A72                 db    0
.rdata$r:00004A73                 db    0
.rdata$r:00004A74                 db    0
.rdata$r:00004A75                 db    0
.rdata$r:00004A76                 db    0
.rdata$r:00004A77                 db    0
.rdata$r:00004A78                 dd offset ??_R0?AUIInFileStream_Callback@@@8 ; IInFileStream_Callback `RTTI Type Descriptor'
.rdata$r:00004A7C                 dd offset ??_R3IInFileStream_Callback@@8 ; IInFileStream_Callback::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004A7C _rdata$r        ends
.rdata$r:00004A7C
.text:00004A80 ; ===========================================================================
.text:00004A80
.text:00004A80 ; Segment type: Pure code
.text:00004A80 ; Segment permissions: Read/Execute
.text:00004A80 _text           segment para public 'CODE' use32
.text:00004A80                 assume cs:_text
.text:00004A80                 ;org 4A80h
.text:00004A80 ; COMDAT (pick any)
.text:00004A80                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004A80
.text:00004A80 ; =============== S U B R O U T I N E =======================================
.text:00004A80
.text:00004A80 ; Attributes: bp-based frame
.text:00004A80
.text:00004A80 ; _DWORD __thiscall IArchiveUpdateCallback::IArchiveUpdateCallback(IArchiveUpdateCallback *__hidden this)
.text:00004A80                 public ??0IArchiveUpdateCallback@@QAE@XZ
.text:00004A80 ??0IArchiveUpdateCallback@@QAE@XZ proc near
.text:00004A80                                         ; CODE XREF: IArchiveUpdateCallback2::IArchiveUpdateCallback2(void)+11p
.text:00004A80
.text:00004A80 var_4           = dword ptr -4
.text:00004A80
.text:00004A80                 push    ebp
.text:00004A81                 mov     ebp, esp
.text:00004A83                 push    ecx
.text:00004A84                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004A8B                 mov     [ebp+var_4], ecx
.text:00004A8E                 mov     ecx, [ebp+var_4] ; this
.text:00004A91                 call    ??0IProgress@@QAE@XZ ; IProgress::IProgress(void)
.text:00004A96                 mov     eax, [ebp+var_4]
.text:00004A99                 mov     dword ptr [eax], offset ??_7IArchiveUpdateCallback@@6B@ ; const IArchiveUpdateCallback::`vftable'
.text:00004A9F                 mov     eax, [ebp+var_4]
.text:00004AA2                 add     esp, 4
.text:00004AA5                 cmp     ebp, esp
.text:00004AA7                 call    __RTC_CheckEsp
.text:00004AAC                 mov     esp, ebp
.text:00004AAE                 pop     ebp
.text:00004AAF                 retn
.text:00004AAF ??0IArchiveUpdateCallback@@QAE@XZ endp
.text:00004AAF
.text:00004AAF _text           ends
.text:00004AAF
.rdata:00004AB0 ; ===========================================================================
.rdata:00004AB0
.rdata:00004AB0 ; Segment type: Pure data
.rdata:00004AB0 ; Segment permissions: Read
.rdata:00004AB0 _rdata          segment dword public 'DATA' use32
.rdata:00004AB0                 assume cs:_rdata
.rdata:00004AB0                 ;org 4AB0h
.rdata:00004AB0 ; COMDAT (pick largest)
.rdata:00004AB0                 dd offset ??_R4IArchiveUpdateCallback@@6B@ ; const IArchiveUpdateCallback::`RTTI Complete Object Locator'
.rdata:00004AB4                 public ??_7IArchiveUpdateCallback@@6B@
.rdata:00004AB4 ; const IArchiveUpdateCallback::`vftable'
.rdata:00004AB4 ??_7IArchiveUpdateCallback@@6B@ dd offset __purecall
.rdata:00004AB4                                         ; DATA XREF: IArchiveUpdateCallback::IArchiveUpdateCallback(void)+19o
.rdata:00004AB8                 dd offset __purecall
.rdata:00004ABC                 dd offset __purecall
.rdata:00004AC0                 dd offset __purecall
.rdata:00004AC4                 dd offset __purecall
.rdata:00004AC8                 dd offset __purecall
.rdata:00004ACC                 dd offset __purecall
.rdata:00004AD0                 dd offset __purecall
.rdata:00004AD4                 dd offset __purecall
.rdata:00004AD4 _rdata          ends
.rdata:00004AD4
.rdata$r:00004AD8 ; ===========================================================================
.rdata$r:00004AD8
.rdata$r:00004AD8 ; Segment type: Pure data
.rdata$r:00004AD8 ; Segment permissions: Read
.rdata$r:00004AD8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004AD8                 assume cs:_rdata$r
.rdata$r:00004AD8                 ;org 4AD8h
.rdata$r:00004AD8 ; COMDAT (pick any)
.rdata$r:00004AD8                 public ??_R4IArchiveUpdateCallback@@6B@
.rdata$r:00004AD8 ; const IArchiveUpdateCallback::`RTTI Complete Object Locator'
.rdata$r:00004AD8 ??_R4IArchiveUpdateCallback@@6B@ db    0 ; DATA XREF: .rdata:00004AB0o
.rdata$r:00004AD9                 db    0
.rdata$r:00004ADA                 db    0
.rdata$r:00004ADB                 db    0
.rdata$r:00004ADC                 db    0
.rdata$r:00004ADD                 db    0
.rdata$r:00004ADE                 db    0
.rdata$r:00004ADF                 db    0
.rdata$r:00004AE0                 db    0
.rdata$r:00004AE1                 db    0
.rdata$r:00004AE2                 db    0
.rdata$r:00004AE3                 db    0
.rdata$r:00004AE4                 dd offset ??_R0?AUIArchiveUpdateCallback@@@8 ; IArchiveUpdateCallback `RTTI Type Descriptor'
.rdata$r:00004AE8                 dd offset ??_R3IArchiveUpdateCallback@@8 ; IArchiveUpdateCallback::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004AE8 _rdata$r        ends
.rdata$r:00004AE8
.text:00004AEC ; ===========================================================================
.text:00004AEC
.text:00004AEC ; Segment type: Pure code
.text:00004AEC ; Segment permissions: Read/Execute
.text:00004AEC _text           segment para public 'CODE' use32
.text:00004AEC                 assume cs:_text
.text:00004AEC                 ;org 4AECh
.text:00004AEC ; COMDAT (pick any)
.text:00004AEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004AEC
.text:00004AEC ; =============== S U B R O U T I N E =======================================
.text:00004AEC
.text:00004AEC ; Attributes: bp-based frame
.text:00004AEC
.text:00004AEC ; _DWORD __thiscall IProgress::IProgress(IProgress *__hidden this)
.text:00004AEC                 public ??0IProgress@@QAE@XZ
.text:00004AEC ??0IProgress@@QAE@XZ proc near          ; CODE XREF: IArchiveExtractCallbackMessage::IArchiveExtractCallbackMessage(void)+11p
.text:00004AEC                                         ; IArchiveUpdateCallback::IArchiveUpdateCallback(void)+11p
.text:00004AEC
.text:00004AEC var_4           = dword ptr -4
.text:00004AEC
.text:00004AEC                 push    ebp
.text:00004AED                 mov     ebp, esp
.text:00004AEF                 push    ecx
.text:00004AF0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004AF7                 mov     [ebp+var_4], ecx
.text:00004AFA                 mov     ecx, [ebp+var_4]
.text:00004AFD                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00004B02                 mov     eax, [ebp+var_4]
.text:00004B05                 mov     dword ptr [eax], offset ??_7IProgress@@6B@ ; const IProgress::`vftable'
.text:00004B0B                 mov     eax, [ebp+var_4]
.text:00004B0E                 add     esp, 4
.text:00004B11                 cmp     ebp, esp
.text:00004B13                 call    __RTC_CheckEsp
.text:00004B18                 mov     esp, ebp
.text:00004B1A                 pop     ebp
.text:00004B1B                 retn
.text:00004B1B ??0IProgress@@QAE@XZ endp
.text:00004B1B
.text:00004B1B _text           ends
.text:00004B1B
.rdata:00004B1C ; ===========================================================================
.rdata:00004B1C
.rdata:00004B1C ; Segment type: Pure data
.rdata:00004B1C ; Segment permissions: Read
.rdata:00004B1C _rdata          segment dword public 'DATA' use32
.rdata:00004B1C                 assume cs:_rdata
.rdata:00004B1C                 ;org 4B1Ch
.rdata:00004B1C ; COMDAT (pick largest)
.rdata:00004B1C                 dd offset ??_R4IProgress@@6B@ ; const IProgress::`RTTI Complete Object Locator'
.rdata:00004B20                 public ??_7IProgress@@6B@
.rdata:00004B20 ; const IProgress::`vftable'
.rdata:00004B20 ??_7IProgress@@6B@ dd offset __purecall ; DATA XREF: IProgress::IProgress(void)+19o
.rdata:00004B24                 dd offset __purecall
.rdata:00004B28                 dd offset __purecall
.rdata:00004B2C                 dd offset __purecall
.rdata:00004B30                 dd offset __purecall
.rdata:00004B30 _rdata          ends
.rdata:00004B30
.rdata$r:00004B34 ; ===========================================================================
.rdata$r:00004B34
.rdata$r:00004B34 ; Segment type: Pure data
.rdata$r:00004B34 ; Segment permissions: Read
.rdata$r:00004B34 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004B34                 assume cs:_rdata$r
.rdata$r:00004B34                 ;org 4B34h
.rdata$r:00004B34 ; COMDAT (pick any)
.rdata$r:00004B34                 public ??_R4IProgress@@6B@
.rdata$r:00004B34 ; const IProgress::`RTTI Complete Object Locator'
.rdata$r:00004B34 ??_R4IProgress@@6B@ db    0             ; DATA XREF: .rdata:00004B1Co
.rdata$r:00004B35                 db    0
.rdata$r:00004B36                 db    0
.rdata$r:00004B37                 db    0
.rdata$r:00004B38                 db    0
.rdata$r:00004B39                 db    0
.rdata$r:00004B3A                 db    0
.rdata$r:00004B3B                 db    0
.rdata$r:00004B3C                 db    0
.rdata$r:00004B3D                 db    0
.rdata$r:00004B3E                 db    0
.rdata$r:00004B3F                 db    0
.rdata$r:00004B40                 dd offset ??_R0?AUIProgress@@@8 ; IProgress `RTTI Type Descriptor'
.rdata$r:00004B44                 dd offset ??_R3IProgress@@8 ; IProgress::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004B44 _rdata$r        ends
.rdata$r:00004B44
.text:00004B48 ; ===========================================================================
.text:00004B48
.text:00004B48 ; Segment type: Pure code
.text:00004B48 ; Segment permissions: Read/Execute
.text:00004B48 _text           segment para public 'CODE' use32
.text:00004B48                 assume cs:_text
.text:00004B48                 ;org 4B48h
.text:00004B48 ; COMDAT (pick any)
.text:00004B48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004B48
.text:00004B48 ; =============== S U B R O U T I N E =======================================
.text:00004B48
.text:00004B48 ; Attributes: bp-based frame
.text:00004B48
.text:00004B48 ; int __stdcall BoolToInt(bool)
.text:00004B48                 public ?BoolToInt@@YGH_N@Z
.text:00004B48 ?BoolToInt@@YGH_N@Z proc near           ; CODE XREF: CArchiveUpdateCallback::GetUpdateItemInfo(uint,int *,int *,uint *)+9Dp
.text:00004B48                                         ; CArchiveUpdateCallback::GetUpdateItemInfo(uint,int *,int *,uint *)+BBp ...
.text:00004B48
.text:00004B48 arg_0           = byte ptr  8
.text:00004B48
.text:00004B48                 push    ebp
.text:00004B49                 mov     ebp, esp
.text:00004B4B                 movzx   eax, [ebp+arg_0]
.text:00004B4F                 neg     eax
.text:00004B51                 sbb     eax, eax
.text:00004B53                 neg     eax
.text:00004B55                 pop     ebp
.text:00004B56                 retn    4
.text:00004B56 ?BoolToInt@@YGH_N@Z endp
.text:00004B56
.text:00004B56 ; ---------------------------------------------------------------------------
.text:00004B59                 align 4
.text:00004B59 _text           ends
.text:00004B59
.text:00004B5C ; ===========================================================================
.text:00004B5C
.text:00004B5C ; Segment type: Pure code
.text:00004B5C ; Segment permissions: Read/Execute
.text:00004B5C _text           segment para public 'CODE' use32
.text:00004B5C                 assume cs:_text
.text:00004B5C                 ;org 4B5Ch
.text:00004B5C ; COMDAT (pick any)
.text:00004B5C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004B5C
.text:00004B5C ; =============== S U B R O U T I N E =======================================
.text:00004B5C
.text:00004B5C ; Attributes: bp-based frame
.text:00004B5C
.text:00004B5C ; bool __thiscall CUpdatePair2::ExistInArchive(CUpdatePair2 *__hidden this)
.text:00004B5C                 public ?ExistInArchive@CUpdatePair2@@QBE_NXZ
.text:00004B5C ?ExistInArchive@CUpdatePair2@@QBE_NXZ proc near
.text:00004B5C                                         ; CODE XREF: CArchiveUpdateCallback::GetUpdateItemInfo(uint,int *,int *,uint *)+DDp
.text:00004B5C                                         ; CArchiveUpdateCallback::GetRawProp(uint,ulong,void const * *,uint *,uint *)+88p ...
.text:00004B5C
.text:00004B5C var_4           = dword ptr -4
.text:00004B5C
.text:00004B5C                 push    ebp
.text:00004B5D                 mov     ebp, esp
.text:00004B5F                 push    ecx
.text:00004B60                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004B67                 mov     [ebp+var_4], ecx
.text:00004B6A                 mov     eax, [ebp+var_4]
.text:00004B6D                 xor     ecx, ecx
.text:00004B6F                 cmp     dword ptr [eax+8], 0FFFFFFFFh
.text:00004B73                 setnz   cl
.text:00004B76                 mov     al, cl
.text:00004B78                 mov     esp, ebp
.text:00004B7A                 pop     ebp
.text:00004B7B                 retn
.text:00004B7B ?ExistInArchive@CUpdatePair2@@QBE_NXZ endp
.text:00004B7B
.text:00004B7B _text           ends
.text:00004B7B
.text:00004B7C ; ===========================================================================
.text:00004B7C
.text:00004B7C ; Segment type: Pure code
.text:00004B7C ; Segment permissions: Read/Execute
.text:00004B7C _text           segment para public 'CODE' use32
.text:00004B7C                 assume cs:_text
.text:00004B7C                 ;org 4B7Ch
.text:00004B7C ; COMDAT (pick any)
.text:00004B7C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004B7C
.text:00004B7C ; =============== S U B R O U T I N E =======================================
.text:00004B7C
.text:00004B7C ; Attributes: bp-based frame
.text:00004B7C
.text:00004B7C ; _DWORD __thiscall NWindows::NCOM::CPropVariant::CPropVariant(NWindows::NCOM::CPropVariant *__hidden this)
.text:00004B7C                 public ??0CPropVariant@NCOM@NWindows@@QAE@XZ
.text:00004B7C ??0CPropVariant@NCOM@NWindows@@QAE@XZ proc near
.text:00004B7C                                         ; CODE XREF: CArchiveUpdateCallback::GetRootProp(ulong,tagPROPVARIANT *)+26p
.text:00004B7C                                         ; CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+6Cp
.text:00004B7C
.text:00004B7C var_4           = dword ptr -4
.text:00004B7C
.text:00004B7C                 push    ebp
.text:00004B7D                 mov     ebp, esp
.text:00004B7F                 push    ecx
.text:00004B80                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004B87                 mov     [ebp+var_4], ecx
.text:00004B8A                 xor     eax, eax
.text:00004B8C                 mov     ecx, [ebp+var_4]
.text:00004B8F                 mov     [ecx], ax
.text:00004B92                 xor     edx, edx
.text:00004B94                 mov     eax, [ebp+var_4]
.text:00004B97                 mov     [eax+2], dx
.text:00004B9B                 mov     ecx, [ebp+var_4]
.text:00004B9E                 mov     dword ptr [ecx+8], 0
.text:00004BA5                 mov     eax, [ebp+var_4]
.text:00004BA8                 mov     esp, ebp
.text:00004BAA                 pop     ebp
.text:00004BAB                 retn
.text:00004BAB ??0CPropVariant@NCOM@NWindows@@QAE@XZ endp
.text:00004BAB
.text:00004BAB _text           ends
.text:00004BAB
.text:00004BAC ; ===========================================================================
.text:00004BAC
.text:00004BAC ; Segment type: Pure code
.text:00004BAC ; Segment permissions: Read/Execute
.text:00004BAC _text           segment para public 'CODE' use32
.text:00004BAC                 assume cs:_text
.text:00004BAC                 ;org 4BACh
.text:00004BAC ; COMDAT (pick any)
.text:00004BAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004BAC
.text:00004BAC ; =============== S U B R O U T I N E =======================================
.text:00004BAC
.text:00004BAC ; Attributes: bp-based frame
.text:00004BAC
.text:00004BAC ; _DWORD __thiscall NWindows::NCOM::CPropVariant::~CPropVariant(NWindows::NCOM::CPropVariant *__hidden this)
.text:00004BAC                 public ??1CPropVariant@NCOM@NWindows@@QAE@XZ
.text:00004BAC ??1CPropVariant@NCOM@NWindows@@QAE@XZ proc near
.text:00004BAC                                         ; CODE XREF: CArchiveUpdateCallback::GetRootProp(ulong,tagPROPVARIANT *)+E2p
.text:00004BAC                                         ; CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+BBp ...
.text:00004BAC
.text:00004BAC var_4           = dword ptr -4
.text:00004BAC
.text:00004BAC                 push    ebp
.text:00004BAD                 mov     ebp, esp
.text:00004BAF                 push    ecx
.text:00004BB0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004BB7                 mov     [ebp+var_4], ecx
.text:00004BBA                 mov     ecx, [ebp+var_4] ; this
.text:00004BBD                 call    ?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ ; NWindows::NCOM::CPropVariant::Clear(void)
.text:00004BC2                 add     esp, 4
.text:00004BC5                 cmp     ebp, esp
.text:00004BC7                 call    __RTC_CheckEsp
.text:00004BCC                 mov     esp, ebp
.text:00004BCE                 pop     ebp
.text:00004BCF                 retn
.text:00004BCF ??1CPropVariant@NCOM@NWindows@@QAE@XZ endp
.text:00004BCF
.text:00004BCF _text           ends
.text:00004BCF
.text:00004BD0 ; ===========================================================================
.text:00004BD0
.text:00004BD0 ; Segment type: Pure code
.text:00004BD0 ; Segment permissions: Read/Execute
.text:00004BD0 _text           segment para public 'CODE' use32
.text:00004BD0                 assume cs:_text
.text:00004BD0                 ;org 4BD0h
.text:00004BD0 ; COMDAT (pick any)
.text:00004BD0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004BD0
.text:00004BD0 ; =============== S U B R O U T I N E =======================================
.text:00004BD0
.text:00004BD0 ; Attributes: bp-based frame
.text:00004BD0
.text:00004BD0 ; public: __thiscall UString::operator wchar_t const *(void)const
.text:00004BD0                 public ??BUString@@QBEPB_WXZ
.text:00004BD0 ??BUString@@QBEPB_WXZ proc near         ; CODE XREF: CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+1D9p
.text:00004BD0                                         ; GetRelativePath(UString const &,UString const &)+B8p ...
.text:00004BD0
.text:00004BD0 var_4           = dword ptr -4
.text:00004BD0
.text:00004BD0                 push    ebp
.text:00004BD1                 mov     ebp, esp
.text:00004BD3                 push    ecx
.text:00004BD4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004BDB                 mov     [ebp+var_4], ecx
.text:00004BDE                 mov     eax, [ebp+var_4]
.text:00004BE1                 mov     eax, [eax]
.text:00004BE3                 mov     esp, ebp
.text:00004BE5                 pop     ebp
.text:00004BE6                 retn
.text:00004BE6 ??BUString@@QBEPB_WXZ endp
.text:00004BE6
.text:00004BE6 ; ---------------------------------------------------------------------------
.text:00004BE7                 align 4
.text:00004BE7 _text           ends
.text:00004BE7
.text:00004BE8 ; ===========================================================================
.text:00004BE8
.text:00004BE8 ; Segment type: Pure code
.text:00004BE8 ; Segment permissions: Read/Execute
.text:00004BE8 _text           segment para public 'CODE' use32
.text:00004BE8                 assume cs:_text
.text:00004BE8                 ;org 4BE8h
.text:00004BE8 ; COMDAT (pick any)
.text:00004BE8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004BE8
.text:00004BE8 ; =============== S U B R O U T I N E =======================================
.text:00004BE8
.text:00004BE8 ; Attributes: bp-based frame
.text:00004BE8
.text:00004BE8 ; _DWORD __thiscall NWindows::NFile::CReparseAttr::CReparseAttr(NWindows::NFile::CReparseAttr *__hidden this)
.text:00004BE8                 public ??0CReparseAttr@NFile@NWindows@@QAE@XZ
.text:00004BE8 ??0CReparseAttr@NFile@NWindows@@QAE@XZ proc near
.text:00004BE8                                         ; CODE XREF: CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+102p
.text:00004BE8
.text:00004BE8 var_10          = dword ptr -10h
.text:00004BE8 var_C           = dword ptr -0Ch
.text:00004BE8 var_4           = dword ptr -4
.text:00004BE8
.text:00004BE8                 push    ebp
.text:00004BE9                 mov     ebp, esp
.text:00004BEB                 push    0FFFFFFFFh
.text:00004BED                 push    offset __ehhandler$??0CReparseAttr@NFile@NWindows@@QAE@XZ
.text:00004BF2                 mov     eax, large fs:0
.text:00004BF8                 push    eax
.text:00004BF9                 push    ecx
.text:00004BFA                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00004C01                 mov     eax, dword ptr ds:___security_cookie
.text:00004C06                 xor     eax, ebp
.text:00004C08                 push    eax
.text:00004C09                 lea     eax, [ebp+var_C]
.text:00004C0C                 mov     large fs:0, eax
.text:00004C12                 mov     [ebp+var_10], ecx
.text:00004C15                 mov     eax, [ebp+var_10]
.text:00004C18                 mov     dword ptr [eax], 0
.text:00004C1E                 mov     ecx, [ebp+var_10]
.text:00004C21                 mov     dword ptr [ecx+4], 0
.text:00004C28                 mov     ecx, [ebp+var_10]
.text:00004C2B                 add     ecx, 8
.text:00004C2E                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00004C33                 mov     [ebp+var_4], 0
.text:00004C3A                 mov     ecx, [ebp+var_10]
.text:00004C3D                 add     ecx, 14h
.text:00004C40                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00004C45                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004C4C                 mov     eax, [ebp+var_10]
.text:00004C4F                 mov     ecx, [ebp+var_C]
.text:00004C52                 mov     large fs:0, ecx
.text:00004C59                 pop     ecx
.text:00004C5A                 add     esp, 10h
.text:00004C5D                 cmp     ebp, esp
.text:00004C5F                 call    __RTC_CheckEsp
.text:00004C64                 mov     esp, ebp
.text:00004C66                 pop     ebp
.text:00004C67                 retn
.text:00004C67 ??0CReparseAttr@NFile@NWindows@@QAE@XZ endp
.text:00004C67
.text:00004C67 _text           ends
.text:00004C67
.text$x:00004C68 ; ===========================================================================
.text$x:00004C68
.text$x:00004C68 ; Segment type: Pure code
.text$x:00004C68 ; Segment permissions: Read/Execute
.text$x:00004C68 _text$x         segment para public 'CODE' use32
.text$x:00004C68                 assume cs:_text$x
.text$x:00004C68                 ;org 4C68h
.text$x:00004C68 ; COMDAT (pick associative to section at 4BE8)
.text$x:00004C68                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004C68
.text$x:00004C68 ; =============== S U B R O U T I N E =======================================
.text$x:00004C68
.text$x:00004C68
.text$x:00004C68 __unwindfunclet$??0CReparseAttr@NFile@NWindows@@QAE@XZ$0 proc near
.text$x:00004C68                                         ; DATA XREF: .xdata$x:00004C94o
.text$x:00004C68                 mov     ecx, [ebp-10h]
.text$x:00004C6B                 add     ecx, 8          ; this
.text$x:00004C6E                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00004C6E __unwindfunclet$??0CReparseAttr@NFile@NWindows@@QAE@XZ$0 endp
.text$x:00004C6E
.text$x:00004C73
.text$x:00004C73 ; =============== S U B R O U T I N E =======================================
.text$x:00004C73
.text$x:00004C73
.text$x:00004C73 __ehhandler$??0CReparseAttr@NFile@NWindows@@QAE@XZ proc near
.text$x:00004C73                                         ; DATA XREF: NWindows::NFile::CReparseAttr::CReparseAttr(void)+5o
.text$x:00004C73
.text$x:00004C73 arg_4           = dword ptr  8
.text$x:00004C73
.text$x:00004C73                 mov     edx, [esp+arg_4]
.text$x:00004C77                 lea     eax, [edx+0Ch]
.text$x:00004C7A                 mov     ecx, [edx-8]
.text$x:00004C7D                 xor     ecx, eax
.text$x:00004C7F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004C84                 mov     eax, offset __ehfuncinfo$??0CReparseAttr@NFile@NWindows@@QAE@XZ
.text$x:00004C89                 jmp     ___CxxFrameHandler3
.text$x:00004C89 __ehhandler$??0CReparseAttr@NFile@NWindows@@QAE@XZ endp
.text$x:00004C89
.text$x:00004C89 ; ---------------------------------------------------------------------------
.text$x:00004C8E                 align 10h
.text$x:00004C8E _text$x         ends
.text$x:00004C8E
.xdata$x:00004C90 ; ===========================================================================
.xdata$x:00004C90
.xdata$x:00004C90 ; Segment type: Pure data
.xdata$x:00004C90 ; Segment permissions: Read
.xdata$x:00004C90 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004C90                 assume cs:_xdata$x
.xdata$x:00004C90                 ;org 4C90h
.xdata$x:00004C90 ; COMDAT (pick associative to section at 4BE8)
.xdata$x:00004C90 __unwindtable$??0CReparseAttr@NFile@NWindows@@QAE@XZ db 0FFh
.xdata$x:00004C90                                         ; DATA XREF: .xdata$x:00004CA0o
.xdata$x:00004C91                 db 0FFh
.xdata$x:00004C92                 db 0FFh
.xdata$x:00004C93                 db 0FFh
.xdata$x:00004C94                 dd offset __unwindfunclet$??0CReparseAttr@NFile@NWindows@@QAE@XZ$0
.xdata$x:00004C98 __ehfuncinfo$??0CReparseAttr@NFile@NWindows@@QAE@XZ db  22h ; "
.xdata$x:00004C98                                         ; DATA XREF: __ehhandler$??0CReparseAttr@NFile@NWindows@@QAE@XZ+11o
.xdata$x:00004C99                 db    5
.xdata$x:00004C9A                 db  93h ; ô
.xdata$x:00004C9B                 db  19h
.xdata$x:00004C9C                 db    1
.xdata$x:00004C9D                 db    0
.xdata$x:00004C9E                 db    0
.xdata$x:00004C9F                 db    0
.xdata$x:00004CA0                 dd offset __unwindtable$??0CReparseAttr@NFile@NWindows@@QAE@XZ
.xdata$x:00004CA4                 db    0
.xdata$x:00004CA5                 db    0
.xdata$x:00004CA6                 db    0
.xdata$x:00004CA7                 db    0
.xdata$x:00004CA8                 db    0
.xdata$x:00004CA9                 db    0
.xdata$x:00004CAA                 db    0
.xdata$x:00004CAB                 db    0
.xdata$x:00004CAC                 db    0
.xdata$x:00004CAD                 db    0
.xdata$x:00004CAE                 db    0
.xdata$x:00004CAF                 db    0
.xdata$x:00004CB0                 db    0
.xdata$x:00004CB1                 db    0
.xdata$x:00004CB2                 db    0
.xdata$x:00004CB3                 db    0
.xdata$x:00004CB4                 db    0
.xdata$x:00004CB5                 db    0
.xdata$x:00004CB6                 db    0
.xdata$x:00004CB7                 db    0
.xdata$x:00004CB8                 db    1
.xdata$x:00004CB9                 db    0
.xdata$x:00004CBA                 db    0
.xdata$x:00004CBB                 db    0
.xdata$x:00004CBB _xdata$x        ends
.xdata$x:00004CBB
.text:00004CBC ; ===========================================================================
.text:00004CBC
.text:00004CBC ; Segment type: Pure code
.text:00004CBC ; Segment permissions: Read/Execute
.text:00004CBC _text           segment para public 'CODE' use32
.text:00004CBC                 assume cs:_text
.text:00004CBC                 ;org 4CBCh
.text:00004CBC ; COMDAT (pick any)
.text:00004CBC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004CBC
.text:00004CBC ; =============== S U B R O U T I N E =======================================
.text:00004CBC
.text:00004CBC ; Attributes: bp-based frame
.text:00004CBC
.text:00004CBC ; bool __thiscall NWindows::NFile::CReparseAttr::IsRelative(NWindows::NFile::CReparseAttr *__hidden this)
.text:00004CBC                 public ?IsRelative@CReparseAttr@NFile@NWindows@@QBE_NXZ
.text:00004CBC ?IsRelative@CReparseAttr@NFile@NWindows@@QBE_NXZ proc near
.text:00004CBC                                         ; CODE XREF: CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+177p
.text:00004CBC
.text:00004CBC var_4           = dword ptr -4
.text:00004CBC
.text:00004CBC                 push    ebp
.text:00004CBD                 mov     ebp, esp
.text:00004CBF                 push    ecx
.text:00004CC0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004CC7                 mov     [ebp+var_4], ecx
.text:00004CCA                 mov     eax, [ebp+var_4]
.text:00004CCD                 xor     ecx, ecx
.text:00004CCF                 cmp     dword ptr [eax+4], 1
.text:00004CD3                 setz    cl
.text:00004CD6                 mov     al, cl
.text:00004CD8                 mov     esp, ebp
.text:00004CDA                 pop     ebp
.text:00004CDB                 retn
.text:00004CDB ?IsRelative@CReparseAttr@NFile@NWindows@@QBE_NXZ endp
.text:00004CDB
.text:00004CDB _text           ends
.text:00004CDB
.text:00004CDC ; ===========================================================================
.text:00004CDC
.text:00004CDC ; Segment type: Pure code
.text:00004CDC ; Segment permissions: Read/Execute
.text:00004CDC _text           segment para public 'CODE' use32
.text:00004CDC                 assume cs:_text
.text:00004CDC                 ;org 4CDCh
.text:00004CDC ; COMDAT (pick any)
.text:00004CDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004CDC
.text:00004CDC ; =============== S U B R O U T I N E =======================================
.text:00004CDC
.text:00004CDC ; Attributes: bp-based frame
.text:00004CDC
.text:00004CDC ; bool __thiscall CDirItem::IsDir(CDirItem *__hidden this)
.text:00004CDC                 public ?IsDir@CDirItem@@QBE_NXZ
.text:00004CDC ?IsDir@CDirItem@@QBE_NXZ proc near      ; CODE XREF: CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+699p
.text:00004CDC                                         ; CArchiveUpdateCallback::ReportOperation(uint,uint,uint)+121p ...
.text:00004CDC
.text:00004CDC var_4           = dword ptr -4
.text:00004CDC
.text:00004CDC                 push    ebp
.text:00004CDD                 mov     ebp, esp
.text:00004CDF                 push    ecx
.text:00004CE0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004CE7                 mov     [ebp+var_4], ecx
.text:00004CEA                 mov     eax, [ebp+var_4]
.text:00004CED                 mov     eax, [eax+3Ch]
.text:00004CF0                 and     eax, 10h
.text:00004CF3                 neg     eax
.text:00004CF5                 sbb     eax, eax
.text:00004CF7                 neg     eax
.text:00004CF9                 mov     esp, ebp
.text:00004CFB                 pop     ebp
.text:00004CFC                 retn
.text:00004CFC ?IsDir@CDirItem@@QBE_NXZ endp
.text:00004CFC
.text:00004CFC ; ---------------------------------------------------------------------------
.text:00004CFD                 align 10h
.text:00004CFD _text           ends
.text:00004CFD
.text:00004D00 ; ===========================================================================
.text:00004D00
.text:00004D00 ; Segment type: Pure code
.text:00004D00 ; Segment permissions: Read/Execute
.text:00004D00 _text           segment para public 'CODE' use32
.text:00004D00                 assume cs:_text
.text:00004D00                 ;org 4D00h
.text:00004D00 ; COMDAT (pick any)
.text:00004D00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004D00
.text:00004D00 ; =============== S U B R O U T I N E =======================================
.text:00004D00
.text:00004D00 ; Attributes: bp-based frame
.text:00004D00
.text:00004D00 ; bool __thiscall CUpdatePair2::ExistOnDisk(CUpdatePair2 *__hidden this)
.text:00004D00                 public ?ExistOnDisk@CUpdatePair2@@QBE_NXZ
.text:00004D00 ?ExistOnDisk@CUpdatePair2@@QBE_NXZ proc near
.text:00004D00                                         ; CODE XREF: CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+5C1p
.text:00004D00                                         ; CArchiveUpdateCallback::ReportOperation(uint,uint,uint)+99p
.text:00004D00
.text:00004D00 var_4           = dword ptr -4
.text:00004D00
.text:00004D00                 push    ebp
.text:00004D01                 mov     ebp, esp
.text:00004D03                 push    ecx
.text:00004D04                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004D0B                 mov     [ebp+var_4], ecx
.text:00004D0E                 mov     eax, [ebp+var_4]
.text:00004D11                 xor     ecx, ecx
.text:00004D13                 cmp     dword ptr [eax+4], 0FFFFFFFFh
.text:00004D17                 setnz   cl
.text:00004D1A                 mov     al, cl
.text:00004D1C                 mov     esp, ebp
.text:00004D1E                 pop     ebp
.text:00004D1F                 retn
.text:00004D1F ?ExistOnDisk@CUpdatePair2@@QBE_NXZ endp
.text:00004D1F
.text:00004D1F _text           ends
.text:00004D1F
.text:00004D20 ; ===========================================================================
.text:00004D20
.text:00004D20 ; Segment type: Pure code
.text:00004D20 ; Segment permissions: Read/Execute
.text:00004D20 _text           segment para public 'CODE' use32
.text:00004D20                 assume cs:_text
.text:00004D20                 ;org 4D20h
.text:00004D20 ; COMDAT (pick any)
.text:00004D20                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004D20
.text:00004D20 ; =============== S U B R O U T I N E =======================================
.text:00004D20
.text:00004D20 ; Attributes: bp-based frame
.text:00004D20
.text:00004D20 ; void __thiscall UString::Add_PathSepar(UString *__hidden this)
.text:00004D20                 public ?Add_PathSepar@UString@@QAEXXZ
.text:00004D20 ?Add_PathSepar@UString@@QAEXXZ proc near
.text:00004D20                                         ; CODE XREF: GetRelativePath(UString const &,UString const &)+1A9p
.text:00004D20
.text:00004D20 var_4           = dword ptr -4
.text:00004D20
.text:00004D20                 push    ebp
.text:00004D21                 mov     ebp, esp
.text:00004D23                 push    ecx
.text:00004D24                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004D2B                 mov     [ebp+var_4], ecx
.text:00004D2E                 push    5Ch ; '\'
.text:00004D30                 mov     ecx, [ebp+var_4]
.text:00004D33                 call    ??YUString@@QAEAAV0@_W@Z ; UString::operator+=(wchar_t)
.text:00004D38                 add     esp, 4
.text:00004D3B                 cmp     ebp, esp
.text:00004D3D                 call    __RTC_CheckEsp
.text:00004D42                 mov     esp, ebp
.text:00004D44                 pop     ebp
.text:00004D45                 retn
.text:00004D45 ?Add_PathSepar@UString@@QAEXXZ endp
.text:00004D45
.text:00004D45 ; ---------------------------------------------------------------------------
.text:00004D46                 align 4
.text:00004D46 _text           ends
.text:00004D46
.text:00004D48 ; ===========================================================================
.text:00004D48
.text:00004D48 ; Segment type: Pure code
.text:00004D48 ; Segment permissions: Read/Execute
.text:00004D48 _text           segment para public 'CODE' use32
.text:00004D48                 assume cs:_text
.text:00004D48                 ;org 4D48h
.text:00004D48 ; COMDAT (pick any)
.text:00004D48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004D48
.text:00004D48 ; =============== S U B R O U T I N E =======================================
.text:00004D48
.text:00004D48 ; Attributes: bp-based frame
.text:00004D48
.text:00004D48 ; public: class UString & __thiscall UString::operator+=(wchar_t)
.text:00004D48                 public ??YUString@@QAEAAV0@_W@Z
.text:00004D48 ??YUString@@QAEAAV0@_W@Z proc near      ; CODE XREF: CArchiveUpdateCallback::GetVolumeStream(uint,ISequentialOutStream * *)+B2p
.text:00004D48                                         ; UString::Add_PathSepar(void)+13p
.text:00004D48
.text:00004D48 var_C           = dword ptr -0Ch
.text:00004D48 var_8           = dword ptr -8
.text:00004D48 var_4           = dword ptr -4
.text:00004D48 arg_0           = word ptr  8
.text:00004D48
.text:00004D48                 push    ebp
.text:00004D49                 mov     ebp, esp
.text:00004D4B                 sub     esp, 0Ch
.text:00004D4E                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00004D55                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004D5C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004D63                 mov     [ebp+var_4], ecx
.text:00004D66                 mov     eax, [ebp+var_4]
.text:00004D69                 mov     ecx, [ebp+var_4]
.text:00004D6C                 mov     edx, [eax+8]
.text:00004D6F                 cmp     edx, [ecx+4]
.text:00004D72                 jnz     short loc_4D7C
.text:00004D74                 mov     ecx, [ebp+var_4] ; this
.text:00004D77                 call    ?Grow_1@UString@@AAEXXZ ; UString::Grow_1(void)
.text:00004D7C
.text:00004D7C loc_4D7C:                               ; CODE XREF: UString::operator+=(wchar_t)+2Aj
.text:00004D7C                 mov     eax, [ebp+var_4]
.text:00004D7F                 mov     ecx, [eax+4]
.text:00004D82                 mov     [ebp+var_8], ecx
.text:00004D85                 mov     edx, [ebp+var_4]
.text:00004D88                 mov     eax, [edx]
.text:00004D8A                 mov     [ebp+var_C], eax
.text:00004D8D                 mov     ecx, [ebp+var_8]
.text:00004D90                 mov     edx, [ebp+var_C]
.text:00004D93                 mov     ax, [ebp+arg_0]
.text:00004D97                 mov     [edx+ecx*2], ax
.text:00004D9B                 mov     ecx, [ebp+var_8]
.text:00004D9E                 add     ecx, 1
.text:00004DA1                 mov     [ebp+var_8], ecx
.text:00004DA4                 xor     edx, edx
.text:00004DA6                 mov     eax, [ebp+var_8]
.text:00004DA9                 mov     ecx, [ebp+var_C]
.text:00004DAC                 mov     [ecx+eax*2], dx
.text:00004DB0                 mov     edx, [ebp+var_4]
.text:00004DB3                 mov     eax, [ebp+var_8]
.text:00004DB6                 mov     [edx+4], eax
.text:00004DB9                 mov     eax, [ebp+var_4]
.text:00004DBC                 add     esp, 0Ch
.text:00004DBF                 cmp     ebp, esp
.text:00004DC1                 call    __RTC_CheckEsp
.text:00004DC6                 mov     esp, ebp
.text:00004DC8                 pop     ebp
.text:00004DC9                 retn    4
.text:00004DC9 ??YUString@@QAEAAV0@_W@Z endp
.text:00004DC9
.text:00004DC9 _text           ends
.text:00004DC9
.text:00004DCC ; ===========================================================================
.text:00004DCC
.text:00004DCC ; Segment type: Pure code
.text:00004DCC ; Segment permissions: Read/Execute
.text:00004DCC _text           segment para public 'CODE' use32
.text:00004DCC                 assume cs:_text
.text:00004DCC                 ;org 4DCCh
.text:00004DCC ; COMDAT (pick any)
.text:00004DCC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004DCC
.text:00004DCC ; =============== S U B R O U T I N E =======================================
.text:00004DCC
.text:00004DCC ; Attributes: bp-based frame
.text:00004DCC
.text:00004DCC ; _DWORD __thiscall NWindows::NFile::CReparseAttr::~CReparseAttr(NWindows::NFile::CReparseAttr *__hidden this)
.text:00004DCC                 public ??1CReparseAttr@NFile@NWindows@@QAE@XZ
.text:00004DCC ??1CReparseAttr@NFile@NWindows@@QAE@XZ proc near
.text:00004DCC                                         ; CODE XREF: CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+297p
.text:00004DCC                                         ; CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+2BAp ...
.text:00004DCC
.text:00004DCC var_10          = dword ptr -10h
.text:00004DCC var_C           = dword ptr -0Ch
.text:00004DCC var_4           = dword ptr -4
.text:00004DCC
.text:00004DCC                 push    ebp
.text:00004DCD                 mov     ebp, esp
.text:00004DCF                 push    0FFFFFFFFh
.text:00004DD1                 push    offset __ehhandler$??1CReparseAttr@NFile@NWindows@@QAE@XZ
.text:00004DD6                 mov     eax, large fs:0
.text:00004DDC                 push    eax
.text:00004DDD                 push    ecx
.text:00004DDE                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00004DE5                 mov     eax, dword ptr ds:___security_cookie
.text:00004DEA                 xor     eax, ebp
.text:00004DEC                 push    eax
.text:00004DED                 lea     eax, [ebp+var_C]
.text:00004DF0                 mov     large fs:0, eax
.text:00004DF6                 mov     [ebp+var_10], ecx
.text:00004DF9                 mov     [ebp+var_4], 0
.text:00004E00                 mov     ecx, [ebp+var_10]
.text:00004E03                 add     ecx, 14h        ; this
.text:00004E06                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00004E0B                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004E12                 mov     ecx, [ebp+var_10]
.text:00004E15                 add     ecx, 8          ; this
.text:00004E18                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00004E1D                 mov     ecx, [ebp+var_C]
.text:00004E20                 mov     large fs:0, ecx
.text:00004E27                 pop     ecx
.text:00004E28                 add     esp, 10h
.text:00004E2B                 cmp     ebp, esp
.text:00004E2D                 call    __RTC_CheckEsp
.text:00004E32                 mov     esp, ebp
.text:00004E34                 pop     ebp
.text:00004E35                 retn
.text:00004E35 ??1CReparseAttr@NFile@NWindows@@QAE@XZ endp
.text:00004E35
.text:00004E35 ; ---------------------------------------------------------------------------
.text:00004E36                 align 4
.text:00004E36 _text           ends
.text:00004E36
.text$x:00004E38 ; ===========================================================================
.text$x:00004E38
.text$x:00004E38 ; Segment type: Pure code
.text$x:00004E38 ; Segment permissions: Read/Execute
.text$x:00004E38 _text$x         segment para public 'CODE' use32
.text$x:00004E38                 assume cs:_text$x
.text$x:00004E38                 ;org 4E38h
.text$x:00004E38 ; COMDAT (pick associative to section at 4DCC)
.text$x:00004E38                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004E38
.text$x:00004E38 ; =============== S U B R O U T I N E =======================================
.text$x:00004E38
.text$x:00004E38
.text$x:00004E38 __unwindfunclet$??1CReparseAttr@NFile@NWindows@@QAE@XZ$0 proc near
.text$x:00004E38                                         ; DATA XREF: .xdata$x:00004E64o
.text$x:00004E38                 mov     ecx, [ebp-10h]
.text$x:00004E3B                 add     ecx, 8          ; this
.text$x:00004E3E                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00004E3E __unwindfunclet$??1CReparseAttr@NFile@NWindows@@QAE@XZ$0 endp
.text$x:00004E3E
.text$x:00004E43
.text$x:00004E43 ; =============== S U B R O U T I N E =======================================
.text$x:00004E43
.text$x:00004E43
.text$x:00004E43 __ehhandler$??1CReparseAttr@NFile@NWindows@@QAE@XZ proc near
.text$x:00004E43                                         ; DATA XREF: NWindows::NFile::CReparseAttr::~CReparseAttr(void)+5o
.text$x:00004E43
.text$x:00004E43 arg_4           = dword ptr  8
.text$x:00004E43
.text$x:00004E43                 mov     edx, [esp+arg_4]
.text$x:00004E47                 lea     eax, [edx+0Ch]
.text$x:00004E4A                 mov     ecx, [edx-8]
.text$x:00004E4D                 xor     ecx, eax
.text$x:00004E4F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004E54                 mov     eax, offset __ehfuncinfo$??1CReparseAttr@NFile@NWindows@@QAE@XZ
.text$x:00004E59                 jmp     ___CxxFrameHandler3
.text$x:00004E59 __ehhandler$??1CReparseAttr@NFile@NWindows@@QAE@XZ endp
.text$x:00004E59
.text$x:00004E59 ; ---------------------------------------------------------------------------
.text$x:00004E5E                 align 10h
.text$x:00004E5E _text$x         ends
.text$x:00004E5E
.xdata$x:00004E60 ; ===========================================================================
.xdata$x:00004E60
.xdata$x:00004E60 ; Segment type: Pure data
.xdata$x:00004E60 ; Segment permissions: Read
.xdata$x:00004E60 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004E60                 assume cs:_xdata$x
.xdata$x:00004E60                 ;org 4E60h
.xdata$x:00004E60 ; COMDAT (pick associative to section at 4DCC)
.xdata$x:00004E60 __unwindtable$??1CReparseAttr@NFile@NWindows@@QAE@XZ db 0FFh
.xdata$x:00004E60                                         ; DATA XREF: .xdata$x:00004E70o
.xdata$x:00004E61                 db 0FFh
.xdata$x:00004E62                 db 0FFh
.xdata$x:00004E63                 db 0FFh
.xdata$x:00004E64                 dd offset __unwindfunclet$??1CReparseAttr@NFile@NWindows@@QAE@XZ$0
.xdata$x:00004E68 __ehfuncinfo$??1CReparseAttr@NFile@NWindows@@QAE@XZ db  22h ; "
.xdata$x:00004E68                                         ; DATA XREF: __ehhandler$??1CReparseAttr@NFile@NWindows@@QAE@XZ+11o
.xdata$x:00004E69                 db    5
.xdata$x:00004E6A                 db  93h ; ô
.xdata$x:00004E6B                 db  19h
.xdata$x:00004E6C                 db    1
.xdata$x:00004E6D                 db    0
.xdata$x:00004E6E                 db    0
.xdata$x:00004E6F                 db    0
.xdata$x:00004E70                 dd offset __unwindtable$??1CReparseAttr@NFile@NWindows@@QAE@XZ
.xdata$x:00004E74                 db    0
.xdata$x:00004E75                 db    0
.xdata$x:00004E76                 db    0
.xdata$x:00004E77                 db    0
.xdata$x:00004E78                 db    0
.xdata$x:00004E79                 db    0
.xdata$x:00004E7A                 db    0
.xdata$x:00004E7B                 db    0
.xdata$x:00004E7C                 db    0
.xdata$x:00004E7D                 db    0
.xdata$x:00004E7E                 db    0
.xdata$x:00004E7F                 db    0
.xdata$x:00004E80                 db    0
.xdata$x:00004E81                 db    0
.xdata$x:00004E82                 db    0
.xdata$x:00004E83                 db    0
.xdata$x:00004E84                 db    0
.xdata$x:00004E85                 db    0
.xdata$x:00004E86                 db    0
.xdata$x:00004E87                 db    0
.xdata$x:00004E88                 db    1
.xdata$x:00004E89                 db    0
.xdata$x:00004E8A                 db    0
.xdata$x:00004E8B                 db    0
.xdata$x:00004E8B _xdata$x        ends
.xdata$x:00004E8B
.text:00004E8C ; ===========================================================================
.text:00004E8C
.text:00004E8C ; Segment type: Pure code
.text:00004E8C ; Segment permissions: Read/Execute
.text:00004E8C _text           segment para public 'CODE' use32
.text:00004E8C                 assume cs:_text
.text:00004E8C                 ;org 4E8Ch
.text:00004E8C ; COMDAT (pick any)
.text:00004E8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004E8C
.text:00004E8C ; =============== S U B R O U T I N E =======================================
.text:00004E8C
.text:00004E8C ; Attributes: bp-based frame
.text:00004E8C
.text:00004E8C ; _DWORD __thiscall NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock(NWindows::NSynchronization::CCriticalSectionLock *this, struct NWindows::NSynchronization::CCriticalSection *)
.text:00004E8C                 public ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z
.text:00004E8C ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z proc near
.text:00004E8C                                         ; CODE XREF: CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+7D8p
.text:00004E8C                                         ; CArchiveUpdateCallback::InFileStream_On_Error(uint,ulong)+58p ...
.text:00004E8C
.text:00004E8C var_4           = dword ptr -4
.text:00004E8C arg_0           = dword ptr  8
.text:00004E8C
.text:00004E8C                 push    ebp
.text:00004E8D                 mov     ebp, esp
.text:00004E8F                 push    ecx
.text:00004E90                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004E97                 mov     [ebp+var_4], ecx
.text:00004E9A                 mov     eax, [ebp+var_4]
.text:00004E9D                 mov     ecx, [ebp+arg_0]
.text:00004EA0                 mov     [eax], ecx
.text:00004EA2                 mov     edx, [ebp+var_4]
.text:00004EA5                 mov     ecx, [edx]      ; this
.text:00004EA7                 call    ?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ; NWindows::NSynchronization::CCriticalSection::Enter(void)
.text:00004EAC                 mov     eax, [ebp+var_4]
.text:00004EAF                 add     esp, 4
.text:00004EB2                 cmp     ebp, esp
.text:00004EB4                 call    __RTC_CheckEsp
.text:00004EB9                 mov     esp, ebp
.text:00004EBB                 pop     ebp
.text:00004EBC                 retn    4
.text:00004EBC ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z endp
.text:00004EBC
.text:00004EBC ; ---------------------------------------------------------------------------
.text:00004EBF                 align 10h
.text:00004EBF _text           ends
.text:00004EBF
.text:00004EC0 ; ===========================================================================
.text:00004EC0
.text:00004EC0 ; Segment type: Pure code
.text:00004EC0 ; Segment permissions: Read/Execute
.text:00004EC0 _text           segment para public 'CODE' use32
.text:00004EC0                 assume cs:_text
.text:00004EC0                 ;org 4EC0h
.text:00004EC0 ; COMDAT (pick any)
.text:00004EC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004EC0
.text:00004EC0 ; =============== S U B R O U T I N E =======================================
.text:00004EC0
.text:00004EC0 ; Attributes: bp-based frame
.text:00004EC0
.text:00004EC0 ; void __thiscall NWindows::NSynchronization::CCriticalSection::Enter(NWindows::NSynchronization::CCriticalSection *__hidden this)
.text:00004EC0                 public ?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ
.text:00004EC0 ?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ proc near
.text:00004EC0                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock(NWindows::NSynchronization::CCriticalSection &)+1Bp
.text:00004EC0
.text:00004EC0 lpCriticalSection= dword ptr -4
.text:00004EC0
.text:00004EC0                 push    ebp
.text:00004EC1                 mov     ebp, esp
.text:00004EC3                 push    ecx
.text:00004EC4                 push    esi
.text:00004EC5                 mov     [ebp+lpCriticalSection], 0CCCCCCCCh
.text:00004ECC                 mov     [ebp+lpCriticalSection], ecx
.text:00004ECF                 mov     esi, esp
.text:00004ED1                 mov     eax, [ebp+lpCriticalSection]
.text:00004ED4                 push    eax             ; lpCriticalSection
.text:00004ED5                 call    dword ptr ds:__imp__EnterCriticalSection@4 ; EnterCriticalSection(x)
.text:00004EDB                 cmp     esi, esp
.text:00004EDD                 call    __RTC_CheckEsp
.text:00004EE2                 pop     esi
.text:00004EE3                 add     esp, 4
.text:00004EE6                 cmp     ebp, esp
.text:00004EE8                 call    __RTC_CheckEsp
.text:00004EED                 mov     esp, ebp
.text:00004EEF                 pop     ebp
.text:00004EF0                 retn
.text:00004EF0 ?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ endp
.text:00004EF0
.text:00004EF0 ; ---------------------------------------------------------------------------
.text:00004EF1                 align 4
.text:00004EF1 _text           ends
.text:00004EF1
.text:00004EF4 ; ===========================================================================
.text:00004EF4
.text:00004EF4 ; Segment type: Pure code
.text:00004EF4 ; Segment permissions: Read/Execute
.text:00004EF4 _text           segment para public 'CODE' use32
.text:00004EF4                 assume cs:_text
.text:00004EF4                 ;org 4EF4h
.text:00004EF4 ; COMDAT (pick any)
.text:00004EF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004EF4
.text:00004EF4 ; =============== S U B R O U T I N E =======================================
.text:00004EF4
.text:00004EF4 ; Attributes: bp-based frame
.text:00004EF4
.text:00004EF4 ; _DWORD __thiscall NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(NWindows::NSynchronization::CCriticalSectionLock *__hidden this)
.text:00004EF4                 public ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ
.text:00004EF4 ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ proc near
.text:00004EF4                                         ; CODE XREF: CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+7F6p
.text:00004EF4                                         ; CArchiveUpdateCallback::InFileStream_On_Error(uint,ulong)+EDp ...
.text:00004EF4
.text:00004EF4 var_4           = dword ptr -4
.text:00004EF4
.text:00004EF4                 push    ebp
.text:00004EF5                 mov     ebp, esp
.text:00004EF7                 push    ecx
.text:00004EF8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004EFF                 mov     [ebp+var_4], ecx
.text:00004F02                 mov     ecx, [ebp+var_4] ; this
.text:00004F05                 call    ?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ ; NWindows::NSynchronization::CCriticalSectionLock::Unlock(void)
.text:00004F0A                 add     esp, 4
.text:00004F0D                 cmp     ebp, esp
.text:00004F0F                 call    __RTC_CheckEsp
.text:00004F14                 mov     esp, ebp
.text:00004F16                 pop     ebp
.text:00004F17                 retn
.text:00004F17 ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ endp
.text:00004F17
.text:00004F17 _text           ends
.text:00004F17
.text:00004F18 ; ===========================================================================
.text:00004F18
.text:00004F18 ; Segment type: Pure code
.text:00004F18 ; Segment permissions: Read/Execute
.text:00004F18 _text           segment para public 'CODE' use32
.text:00004F18                 assume cs:_text
.text:00004F18                 ;org 4F18h
.text:00004F18 ; COMDAT (pick any)
.text:00004F18                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004F18
.text:00004F18 ; =============== S U B R O U T I N E =======================================
.text:00004F18
.text:00004F18 ; Attributes: bp-based frame
.text:00004F18
.text:00004F18 ; void __thiscall NWindows::NSynchronization::CCriticalSectionLock::Unlock(NWindows::NSynchronization::CCriticalSectionLock *__hidden this)
.text:00004F18                 public ?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ
.text:00004F18 ?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ proc near
.text:00004F18                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)+11p
.text:00004F18
.text:00004F18 var_4           = dword ptr -4
.text:00004F18
.text:00004F18                 push    ebp
.text:00004F19                 mov     ebp, esp
.text:00004F1B                 push    ecx
.text:00004F1C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004F23                 mov     [ebp+var_4], ecx
.text:00004F26                 mov     eax, [ebp+var_4]
.text:00004F29                 mov     ecx, [eax]      ; this
.text:00004F2B                 call    ?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ; NWindows::NSynchronization::CCriticalSection::Leave(void)
.text:00004F30                 add     esp, 4
.text:00004F33                 cmp     ebp, esp
.text:00004F35                 call    __RTC_CheckEsp
.text:00004F3A                 mov     esp, ebp
.text:00004F3C                 pop     ebp
.text:00004F3D                 retn
.text:00004F3D ?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ endp
.text:00004F3D
.text:00004F3D ; ---------------------------------------------------------------------------
.text:00004F3E                 align 10h
.text:00004F3E _text           ends
.text:00004F3E
.text:00004F40 ; ===========================================================================
.text:00004F40
.text:00004F40 ; Segment type: Pure code
.text:00004F40 ; Segment permissions: Read/Execute
.text:00004F40 _text           segment para public 'CODE' use32
.text:00004F40                 assume cs:_text
.text:00004F40                 ;org 4F40h
.text:00004F40 ; COMDAT (pick any)
.text:00004F40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004F40
.text:00004F40 ; =============== S U B R O U T I N E =======================================
.text:00004F40
.text:00004F40 ; Attributes: bp-based frame
.text:00004F40
.text:00004F40 ; void __thiscall NWindows::NSynchronization::CCriticalSection::Leave(NWindows::NSynchronization::CCriticalSection *__hidden this)
.text:00004F40                 public ?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ
.text:00004F40 ?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ proc near
.text:00004F40                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSectionLock::Unlock(void)+13p
.text:00004F40
.text:00004F40 lpCriticalSection= dword ptr -4
.text:00004F40
.text:00004F40                 push    ebp
.text:00004F41                 mov     ebp, esp
.text:00004F43                 push    ecx
.text:00004F44                 push    esi
.text:00004F45                 mov     [ebp+lpCriticalSection], 0CCCCCCCCh
.text:00004F4C                 mov     [ebp+lpCriticalSection], ecx
.text:00004F4F                 mov     esi, esp
.text:00004F51                 mov     eax, [ebp+lpCriticalSection]
.text:00004F54                 push    eax             ; lpCriticalSection
.text:00004F55                 call    dword ptr ds:__imp__LeaveCriticalSection@4 ; LeaveCriticalSection(x)
.text:00004F5B                 cmp     esi, esp
.text:00004F5D                 call    __RTC_CheckEsp
.text:00004F62                 pop     esi
.text:00004F63                 add     esp, 4
.text:00004F66                 cmp     ebp, esp
.text:00004F68                 call    __RTC_CheckEsp
.text:00004F6D                 mov     esp, ebp
.text:00004F6F                 pop     ebp
.text:00004F70                 retn
.text:00004F70 ?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ endp
.text:00004F70
.text:00004F70 ; ---------------------------------------------------------------------------
.text:00004F71                 align 4
.text:00004F71 _text           ends
.text:00004F71
.text:00004F74 ; ===========================================================================
.text:00004F74
.text:00004F74 ; Segment type: Pure code
.text:00004F74 ; Segment permissions: Read/Execute
.text:00004F74 _text           segment para public 'CODE' use32
.text:00004F74                 assume cs:_text
.text:00004F74                 ;org 4F74h
.text:00004F74 ; COMDAT (pick any)
.text:00004F74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004F74
.text:00004F74 ; =============== S U B R O U T I N E =======================================
.text:00004F74
.text:00004F74 ; Attributes: bp-based frame
.text:00004F74
.text:00004F74 ; bool __thiscall NWindows::NFile::NIO::CInFile::OpenReparse(NWindows::NFile::NIO::CInFile *this, const wchar_t *)
.text:00004F74                 public ?OpenReparse@CInFile@NIO@NFile@NWindows@@QAE_NPB_W@Z
.text:00004F74 ?OpenReparse@CInFile@NIO@NFile@NWindows@@QAE_NPB_W@Z proc near
.text:00004F74                                         ; CODE XREF: CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+5A1p
.text:00004F74
.text:00004F74 var_4           = dword ptr -4
.text:00004F74 arg_0           = dword ptr  8
.text:00004F74
.text:00004F74                 push    ebp
.text:00004F75                 mov     ebp, esp
.text:00004F77                 push    ecx
.text:00004F78                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004F7F                 mov     [ebp+var_4], ecx
.text:00004F82                 push    2200000h        ; unsigned __int32
.text:00004F87                 push    3               ; unsigned __int32
.text:00004F89                 push    1               ; unsigned __int32
.text:00004F8B                 mov     eax, [ebp+arg_0]
.text:00004F8E                 push    eax             ; wchar_t *
.text:00004F8F                 mov     ecx, [ebp+var_4] ; this
.text:00004F92                 call    ?Open@CInFile@NIO@NFile@NWindows@@QAE_NPB_WKKK@Z ; NWindows::NFile::NIO::CInFile::Open(wchar_t const *,ulong,ulong,ulong)
.text:00004F97                 add     esp, 4
.text:00004F9A                 cmp     ebp, esp
.text:00004F9C                 call    __RTC_CheckEsp
.text:00004FA1                 mov     esp, ebp
.text:00004FA3                 pop     ebp
.text:00004FA4                 retn    4
.text:00004FA4 ?OpenReparse@CInFile@NIO@NFile@NWindows@@QAE_NPB_W@Z endp
.text:00004FA4
.text:00004FA4 ; ---------------------------------------------------------------------------
.text:00004FA7                 align 4
.text:00004FA7 _text           ends
.text:00004FA7
.text:00004FA8 ; ===========================================================================
.text:00004FA8
.text:00004FA8 ; Segment type: Pure code
.text:00004FA8 ; Segment permissions: Read/Execute
.text:00004FA8 _text           segment para public 'CODE' use32
.text:00004FA8                 assume cs:_text
.text:00004FA8                 ;org 4FA8h
.text:00004FA8 ; COMDAT (pick any)
.text:00004FA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004FA8
.text:00004FA8 ; =============== S U B R O U T I N E =======================================
.text:00004FA8
.text:00004FA8 ; Attributes: bp-based frame
.text:00004FA8
.text:00004FA8 ; void __thiscall CBufInStream::Init(CBufInStream *this, const unsigned __int8 *, unsigned int, struct IUnknown *)
.text:00004FA8                 public ?Init@CBufInStream@@QAEXPBEIPAUIUnknown@@@Z
.text:00004FA8 ?Init@CBufInStream@@QAEXPBEIPAUIUnknown@@@Z proc near
.text:00004FA8                                         ; CODE XREF: CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+290p
.text:00004FA8
.text:00004FA8 var_4           = dword ptr -4
.text:00004FA8 arg_0           = dword ptr  8
.text:00004FA8 arg_4           = dword ptr  0Ch
.text:00004FA8 arg_8           = dword ptr  10h
.text:00004FA8
.text:00004FA8                 push    ebp
.text:00004FA9                 mov     ebp, esp
.text:00004FAB                 push    ecx
.text:00004FAC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004FB3                 mov     [ebp+var_4], ecx
.text:00004FB6                 mov     eax, [ebp+var_4]
.text:00004FB9                 mov     ecx, [ebp+arg_0]
.text:00004FBC                 mov     [eax+8], ecx
.text:00004FBF                 mov     edx, [ebp+var_4]
.text:00004FC2                 mov     eax, [ebp+arg_4]
.text:00004FC5                 mov     [edx+18h], eax
.text:00004FC8                 mov     ecx, [ebp+var_4]
.text:00004FCB                 mov     dword ptr [ecx+10h], 0
.text:00004FD2                 mov     dword ptr [ecx+14h], 0
.text:00004FD9                 mov     edx, [ebp+arg_8]
.text:00004FDC                 push    edx
.text:00004FDD                 mov     ecx, [ebp+var_4]
.text:00004FE0                 add     ecx, 1Ch
.text:00004FE3                 call    ??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z ; CMyComPtr<IUnknown>::operator=(IUnknown *)
.text:00004FE8                 add     esp, 4
.text:00004FEB                 cmp     ebp, esp
.text:00004FED                 call    __RTC_CheckEsp
.text:00004FF2                 mov     esp, ebp
.text:00004FF4                 pop     ebp
.text:00004FF5                 retn    0Ch
.text:00004FF5 ?Init@CBufInStream@@QAEXPBEIPAUIUnknown@@@Z endp
.text:00004FF5
.text:00004FF5 _text           ends
.text:00004FF5
.text:00004FF8 ; ===========================================================================
.text:00004FF8
.text:00004FF8 ; Segment type: Pure code
.text:00004FF8 ; Segment permissions: Read/Execute
.text:00004FF8 _text           segment para public 'CODE' use32
.text:00004FF8                 assume cs:_text
.text:00004FF8                 ;org 4FF8h
.text:00004FF8 ; COMDAT (pick any)
.text:00004FF8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004FF8
.text:00004FF8 ; =============== S U B R O U T I N E =======================================
.text:00004FF8
.text:00004FF8 ; Attributes: bp-based frame
.text:00004FF8
.text:00004FF8 ; bool __thiscall CInFileStream::OpenShared(CInFileStream *this, const wchar_t *, bool)
.text:00004FF8                 public ?OpenShared@CInFileStream@@QAE_NPB_W_N@Z
.text:00004FF8 ?OpenShared@CInFileStream@@QAE_NPB_W_N@Z proc near
.text:00004FF8                                         ; CODE XREF: CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+644p
.text:00004FF8
.text:00004FF8 var_4           = dword ptr -4
.text:00004FF8 arg_0           = dword ptr  8
.text:00004FF8 arg_4           = byte ptr  0Ch
.text:00004FF8
.text:00004FF8                 push    ebp
.text:00004FF9                 mov     ebp, esp
.text:00004FFB                 push    ecx
.text:00004FFC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005003                 mov     [ebp+var_4], ecx
.text:00005006                 movzx   eax, [ebp+arg_4]
.text:0000500A                 push    eax             ; bool
.text:0000500B                 mov     ecx, [ebp+arg_0]
.text:0000500E                 push    ecx             ; wchar_t *
.text:0000500F                 mov     ecx, [ebp+var_4]
.text:00005012                 add     ecx, 18h        ; this
.text:00005015                 call    ?OpenShared@CInFile@NIO@NFile@NWindows@@QAE_NPB_W_N@Z ; NWindows::NFile::NIO::CInFile::OpenShared(wchar_t const *,bool)
.text:0000501A                 add     esp, 4
.text:0000501D                 cmp     ebp, esp
.text:0000501F                 call    __RTC_CheckEsp
.text:00005024                 mov     esp, ebp
.text:00005026                 pop     ebp
.text:00005027                 retn    8
.text:00005027 ?OpenShared@CInFileStream@@QAE_NPB_W_N@Z endp
.text:00005027
.text:00005027 ; ---------------------------------------------------------------------------
.text:0000502A                 align 4
.text:0000502A _text           ends
.text:0000502A
.text:0000502C ; ===========================================================================
.text:0000502C
.text:0000502C ; Segment type: Pure code
.text:0000502C ; Segment permissions: Read/Execute
.text:0000502C _text           segment para public 'CODE' use32
.text:0000502C                 assume cs:_text
.text:0000502C                 ;org 502Ch
.text:0000502C ; COMDAT (pick any)
.text:0000502C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000502C
.text:0000502C ; =============== S U B R O U T I N E =======================================
.text:0000502C
.text:0000502C ; Attributes: bp-based frame
.text:0000502C
.text:0000502C ; bool __thiscall CDirItem::AreReparseData(CDirItem *__hidden this)
.text:0000502C                 public ?AreReparseData@CDirItem@@QBE_NXZ
.text:0000502C ?AreReparseData@CDirItem@@QBE_NXZ proc near
.text:0000502C                                         ; CODE XREF: CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+56Cp
.text:0000502C
.text:0000502C var_8           = dword ptr -8
.text:0000502C var_4           = dword ptr -4
.text:0000502C
.text:0000502C                 push    ebp
.text:0000502D                 mov     ebp, esp
.text:0000502F                 sub     esp, 8
.text:00005032                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005039                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005040                 mov     [ebp+var_4], ecx
.text:00005043                 mov     ecx, [ebp+var_4]
.text:00005046                 add     ecx, 2Ch ; ','
.text:00005049                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:0000504E                 test    eax, eax
.text:00005050                 jnz     short loc_506A
.text:00005052                 mov     ecx, [ebp+var_4]
.text:00005055                 add     ecx, 34h ; '4'
.text:00005058                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:0000505D                 test    eax, eax
.text:0000505F                 jnz     short loc_506A
.text:00005061                 mov     [ebp+var_8], 0
.text:00005068                 jmp     short loc_5071
.text:0000506A ; ---------------------------------------------------------------------------
.text:0000506A
.text:0000506A loc_506A:                               ; CODE XREF: CDirItem::AreReparseData(void)+24j
.text:0000506A                                         ; CDirItem::AreReparseData(void)+33j
.text:0000506A                 mov     [ebp+var_8], 1
.text:00005071
.text:00005071 loc_5071:                               ; CODE XREF: CDirItem::AreReparseData(void)+3Cj
.text:00005071                 mov     al, byte ptr [ebp+var_8]
.text:00005074                 add     esp, 8
.text:00005077                 cmp     ebp, esp
.text:00005079                 call    __RTC_CheckEsp
.text:0000507E                 mov     esp, ebp
.text:00005080                 pop     ebp
.text:00005081                 retn
.text:00005081 ?AreReparseData@CDirItem@@QBE_NXZ endp
.text:00005081
.text:00005081 ; ---------------------------------------------------------------------------
.text:00005082                 align 4
.text:00005082 _text           ends
.text:00005082
.text:00005084 ; ===========================================================================
.text:00005084
.text:00005084 ; Segment type: Pure code
.text:00005084 ; Segment permissions: Read/Execute
.text:00005084 _text           segment para public 'CODE' use32
.text:00005084                 assume cs:_text
.text:00005084                 ;org 5084h
.text:00005084 ; COMDAT (pick any)
.text:00005084                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005084
.text:00005084 ; =============== S U B R O U T I N E =======================================
.text:00005084
.text:00005084 ; Attributes: bp-based frame
.text:00005084
.text:00005084 ; bool __thiscall CArchiveUpdateCallback::IsDir(CArchiveUpdateCallback *this, const struct CUpdatePair2 *)
.text:00005084                 public ?IsDir@CArchiveUpdateCallback@@QBE_NABUCUpdatePair2@@@Z
.text:00005084 ?IsDir@CArchiveUpdateCallback@@QBE_NABUCUpdatePair2@@@Z proc near
.text:00005084                                         ; CODE XREF: CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+CCp
.text:00005084
.text:00005084 var_4           = dword ptr -4
.text:00005084 arg_0           = dword ptr  8
.text:00005084
.text:00005084                 push    ebp
.text:00005085                 mov     ebp, esp
.text:00005087                 push    ecx
.text:00005088                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000508F                 mov     [ebp+var_4], ecx
.text:00005092                 mov     eax, [ebp+arg_0]
.text:00005095                 cmp     dword ptr [eax+4], 0
.text:00005099                 jl      short loc_50BE
.text:0000509B                 mov     ecx, [ebp+arg_0]
.text:0000509E                 mov     edx, [ecx+4]
.text:000050A1                 push    edx
.text:000050A2                 mov     eax, [ebp+var_4]
.text:000050A5                 mov     ecx, [eax+80h]
.text:000050AB                 add     ecx, 24h ; '$'
.text:000050AE                 call    ??A?$CObjectVector@UCDirItem@@@@QBEABUCDirItem@@I@Z ; CObjectVector<CDirItem>::operator[](uint)
.text:000050B3                 mov     ecx, eax        ; this
.text:000050B5                 call    ?IsDir@CDirItem@@QBE_NXZ ; CDirItem::IsDir(void)
.text:000050BA                 jmp     short loc_50E3
.text:000050BC ; ---------------------------------------------------------------------------
.text:000050BC                 jmp     short loc_50E1
.text:000050BE ; ---------------------------------------------------------------------------
.text:000050BE
.text:000050BE loc_50BE:                               ; CODE XREF: CArchiveUpdateCallback::IsDir(CUpdatePair2 const &)+15j
.text:000050BE                 mov     ecx, [ebp+arg_0]
.text:000050C1                 cmp     dword ptr [ecx+8], 0
.text:000050C5                 jl      short loc_50E1
.text:000050C7                 mov     edx, [ebp+arg_0]
.text:000050CA                 mov     eax, [edx+8]
.text:000050CD                 push    eax
.text:000050CE                 mov     ecx, [ebp+var_4]
.text:000050D1                 mov     ecx, [ecx+90h]
.text:000050D7                 call    ??A?$CObjectVector@UCArcItem@@@@QBEABUCArcItem@@I@Z ; CObjectVector<CArcItem>::operator[](uint)
.text:000050DC                 mov     al, [eax+1Ch]
.text:000050DF                 jmp     short loc_50E3
.text:000050E1 ; ---------------------------------------------------------------------------
.text:000050E1
.text:000050E1 loc_50E1:                               ; CODE XREF: CArchiveUpdateCallback::IsDir(CUpdatePair2 const &)+38j
.text:000050E1                                         ; CArchiveUpdateCallback::IsDir(CUpdatePair2 const &)+41j
.text:000050E1                 xor     al, al
.text:000050E3
.text:000050E3 loc_50E3:                               ; CODE XREF: CArchiveUpdateCallback::IsDir(CUpdatePair2 const &)+36j
.text:000050E3                                         ; CArchiveUpdateCallback::IsDir(CUpdatePair2 const &)+5Bj
.text:000050E3                 add     esp, 4
.text:000050E6                 cmp     ebp, esp
.text:000050E8                 call    __RTC_CheckEsp
.text:000050ED                 mov     esp, ebp
.text:000050EF                 pop     ebp
.text:000050F0                 retn    4
.text:000050F0 ?IsDir@CArchiveUpdateCallback@@QBE_NABUCUpdatePair2@@@Z endp
.text:000050F0
.text:000050F0 ; ---------------------------------------------------------------------------
.text:000050F3                 align 4
.text:000050F3 _text           ends
.text:000050F3
.text:000050F4 ; ===========================================================================
.text:000050F4
.text:000050F4 ; Segment type: Pure code
.text:000050F4 ; Segment permissions: Read/Execute
.text:000050F4 _text           segment para public 'CODE' use32
.text:000050F4                 assume cs:_text
.text:000050F4                 ;org 50F4h
.text:000050F4 ; COMDAT (pick any)
.text:000050F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000050F4
.text:000050F4 ; =============== S U B R O U T I N E =======================================
.text:000050F4
.text:000050F4 ; Attributes: bp-based frame
.text:000050F4
.text:000050F4 ; public: __thiscall CBufInStream::CBufInStream(void)
.text:000050F4                 public ??0CBufInStream@@QAE@XZ
.text:000050F4 ??0CBufInStream@@QAE@XZ proc near       ; CODE XREF: CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+23Bp
.text:000050F4
.text:000050F4 var_4           = dword ptr -4
.text:000050F4
.text:000050F4                 push    ebp
.text:000050F5                 mov     ebp, esp
.text:000050F7                 push    ecx
.text:000050F8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000050FF                 mov     [ebp+var_4], ecx
.text:00005102                 mov     ecx, [ebp+var_4] ; this
.text:00005105                 call    ??0IInStream@@QAE@XZ ; IInStream::IInStream(void)
.text:0000510A                 mov     ecx, [ebp+var_4]
.text:0000510D                 add     ecx, 4          ; this
.text:00005110                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00005115                 mov     eax, [ebp+var_4]
.text:00005118                 mov     dword ptr [eax], offset ??_7CBufInStream@@6B@ ; const CBufInStream::`vftable'
.text:0000511E                 mov     ecx, [ebp+var_4]
.text:00005121                 add     ecx, 1Ch
.text:00005124                 call    ??0?$CMyComPtr@UIUnknown@@@@QAE@XZ ; CMyComPtr<IUnknown>::CMyComPtr<IUnknown>(void)
.text:00005129                 mov     eax, [ebp+var_4]
.text:0000512C                 add     esp, 4
.text:0000512F                 cmp     ebp, esp
.text:00005131                 call    __RTC_CheckEsp
.text:00005136                 mov     esp, ebp
.text:00005138                 pop     ebp
.text:00005139                 retn
.text:00005139 ??0CBufInStream@@QAE@XZ endp
.text:00005139
.text:00005139 ; ---------------------------------------------------------------------------
.text:0000513A                 align 4
.text:0000513A _text           ends
.text:0000513A
.rdata:0000513C ; ===========================================================================
.rdata:0000513C
.rdata:0000513C ; Segment type: Pure data
.rdata:0000513C ; Segment permissions: Read
.rdata:0000513C _rdata          segment dword public 'DATA' use32
.rdata:0000513C                 assume cs:_rdata
.rdata:0000513C                 ;org 513Ch
.rdata:0000513C ; COMDAT (pick largest)
.rdata:0000513C                 dd offset ??_R4CBufInStream@@6B@ ; const CBufInStream::`RTTI Complete Object Locator'
.rdata:00005140                 public ??_7CBufInStream@@6B@
.rdata:00005140 ; const CBufInStream::`vftable'
.rdata:00005140 ??_7CBufInStream@@6B@ dd offset ?QueryInterface@CBufInStream@@UAGJABU_GUID@@PAPAX@Z
.rdata:00005140                                         ; DATA XREF: CBufInStream::CBufInStream(void)+24o
.rdata:00005140                                         ; CBufInStream::QueryInterface(_GUID const &,void * *)
.rdata:00005144                 dd offset ?AddRef@CBufInStream@@UAGKXZ ; CBufInStream::AddRef(void)
.rdata:00005148                 dd offset ?Release@CBufInStream@@UAGKXZ ; CBufInStream::Release(void)
.rdata:0000514C                 dd offset ?Read@CBufInStream@@UAGJPAXIPAI@Z ; CBufInStream::Read(void *,uint,uint *)
.rdata:00005150                 dd offset ?Seek@CBufInStream@@UAGJ_JIPA_K@Z ; CBufInStream::Seek(__int64,uint,unsigned __int64 *)
.rdata:00005150 _rdata          ends
.rdata:00005150
.rdata$r:00005154 ; ===========================================================================
.rdata$r:00005154
.rdata$r:00005154 ; Segment type: Pure data
.rdata$r:00005154 ; Segment permissions: Read
.rdata$r:00005154 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005154                 assume cs:_rdata$r
.rdata$r:00005154                 ;org 5154h
.rdata$r:00005154 ; COMDAT (pick any)
.rdata$r:00005154                 public ??_R4CBufInStream@@6B@
.rdata$r:00005154 ; const CBufInStream::`RTTI Complete Object Locator'
.rdata$r:00005154 ??_R4CBufInStream@@6B@ db    0          ; DATA XREF: .rdata:0000513Co
.rdata$r:00005155                 db    0
.rdata$r:00005156                 db    0
.rdata$r:00005157                 db    0
.rdata$r:00005158                 db    0
.rdata$r:00005159                 db    0
.rdata$r:0000515A                 db    0
.rdata$r:0000515B                 db    0
.rdata$r:0000515C                 db    0
.rdata$r:0000515D                 db    0
.rdata$r:0000515E                 db    0
.rdata$r:0000515F                 db    0
.rdata$r:00005160                 dd offset ??_R0?AVCBufInStream@@@8 ; CBufInStream `RTTI Type Descriptor'
.rdata$r:00005164                 dd offset ??_R3CBufInStream@@8 ; CBufInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005164 _rdata$r        ends
.rdata$r:00005164
.data:00005168 ; ===========================================================================
.data:00005168
.data:00005168 ; Segment type: Pure data
.data:00005168 ; Segment permissions: Read/Write
.data:00005168 _data           segment dword public 'DATA' use32
.data:00005168                 assume cs:_data
.data:00005168                 ;org 5168h
.data:00005168 ; COMDAT (pick any)
.data:00005168                 public ??_R0?AVCBufInStream@@@8
.data:00005168 ; class CBufInStream `RTTI Type Descriptor'
.data:00005168 ??_R0?AVCBufInStream@@@8 dd offset ??_7type_info@@6B@
.data:00005168                                         ; DATA XREF: .rdata$r:00005160o
.data:00005168                                         ; .rdata$r:CBufInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00005168                                         ; const type_info::`vftable'
.data:0000516C                 align 10h
.data:00005170 a_?avcbufinstre db '.?AVCBufInStream@@',0
.data:00005183                 align 4
.data:00005183 _data           ends
.data:00005183
.rdata$r:00005184 ; ===========================================================================
.rdata$r:00005184
.rdata$r:00005184 ; Segment type: Pure data
.rdata$r:00005184 ; Segment permissions: Read
.rdata$r:00005184 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005184                 assume cs:_rdata$r
.rdata$r:00005184                 ;org 5184h
.rdata$r:00005184 ; COMDAT (pick any)
.rdata$r:00005184                 public ??_R3CBufInStream@@8
.rdata$r:00005184 ; CBufInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005184 ??_R3CBufInStream@@8 db    0            ; DATA XREF: .rdata$r:00005164o
.rdata$r:00005184                                         ; .rdata$r:000051C4o
.rdata$r:00005185                 db    0
.rdata$r:00005186                 db    0
.rdata$r:00005187                 db    0
.rdata$r:00005188                 db    1
.rdata$r:00005189                 db    0
.rdata$r:0000518A                 db    0
.rdata$r:0000518B                 db    0
.rdata$r:0000518C                 db    5
.rdata$r:0000518D                 db    0
.rdata$r:0000518E                 db    0
.rdata$r:0000518F                 db    0
.rdata$r:00005190                 dd offset ??_R2CBufInStream@@8 ; CBufInStream::`RTTI Base Class Array'
.rdata$r:00005190 _rdata$r        ends
.rdata$r:00005190
.rdata$r:00005194 ; ===========================================================================
.rdata$r:00005194
.rdata$r:00005194 ; Segment type: Pure data
.rdata$r:00005194 ; Segment permissions: Read
.rdata$r:00005194 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005194                 assume cs:_rdata$r
.rdata$r:00005194                 ;org 5194h
.rdata$r:00005194 ; COMDAT (pick any)
.rdata$r:00005194                 public ??_R2CBufInStream@@8
.rdata$r:00005194 ; CBufInStream::`RTTI Base Class Array'
.rdata$r:00005194 ??_R2CBufInStream@@8 dd offset ??_R1A@?0A@EA@CBufInStream@@8
.rdata$r:00005194                                         ; DATA XREF: .rdata$r:00005190o
.rdata$r:00005194                                         ; CBufInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005198                 dd offset ??_R1A@?0A@EA@IInStream@@8 ; IInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000519C                 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000051A0                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000051A4                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:000051A8                 db    0
.rdata$r:000051A9                 align 4
.rdata$r:000051A9 _rdata$r        ends
.rdata$r:000051A9
.rdata$r:000051AC ; ===========================================================================
.rdata$r:000051AC
.rdata$r:000051AC ; Segment type: Pure data
.rdata$r:000051AC ; Segment permissions: Read
.rdata$r:000051AC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000051AC                 assume cs:_rdata$r
.rdata$r:000051AC                 ;org 51ACh
.rdata$r:000051AC ; COMDAT (pick any)
.rdata$r:000051AC                 public ??_R1A@?0A@EA@CBufInStream@@8
.rdata$r:000051AC ; CBufInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000051AC ??_R1A@?0A@EA@CBufInStream@@8 dd offset ??_R0?AVCBufInStream@@@8
.rdata$r:000051AC                                         ; DATA XREF: .rdata$r:CBufInStream::`RTTI Base Class Array'o
.rdata$r:000051AC                                         ; CBufInStream `RTTI Type Descriptor'
.rdata$r:000051B0                 db    4
.rdata$r:000051B1                 db    0
.rdata$r:000051B2                 db    0
.rdata$r:000051B3                 db    0
.rdata$r:000051B4                 db    0
.rdata$r:000051B5                 db    0
.rdata$r:000051B6                 db    0
.rdata$r:000051B7                 db    0
.rdata$r:000051B8                 db 0FFh
.rdata$r:000051B9                 db 0FFh
.rdata$r:000051BA                 db 0FFh
.rdata$r:000051BB                 db 0FFh
.rdata$r:000051BC                 db    0
.rdata$r:000051BD                 db    0
.rdata$r:000051BE                 db    0
.rdata$r:000051BF                 db    0
.rdata$r:000051C0                 db  40h ; @
.rdata$r:000051C1                 db    0
.rdata$r:000051C2                 db    0
.rdata$r:000051C3                 db    0
.rdata$r:000051C4                 dd offset ??_R3CBufInStream@@8 ; CBufInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000051C4 _rdata$r        ends
.rdata$r:000051C4
.rdata$r:000051C8 ; ===========================================================================
.rdata$r:000051C8
.rdata$r:000051C8 ; Segment type: Pure data
.rdata$r:000051C8 ; Segment permissions: Read
.rdata$r:000051C8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000051C8                 assume cs:_rdata$r
.rdata$r:000051C8                 ;org 51C8h
.rdata$r:000051C8 ; COMDAT (pick any)
.rdata$r:000051C8                 public ??_R1A@?0A@EA@IInStream@@8
.rdata$r:000051C8 ; IInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000051C8 ??_R1A@?0A@EA@IInStream@@8 dd offset ??_R0?AUIInStream@@@8
.rdata$r:000051C8                                         ; DATA XREF: .rdata$r:00005198o
.rdata$r:000051C8                                         ; .rdata$r:IInStream::`RTTI Base Class Array'o
.rdata$r:000051C8                                         ; IInStream `RTTI Type Descriptor'
.rdata$r:000051CC                 db    2
.rdata$r:000051CD                 db    0
.rdata$r:000051CE                 db    0
.rdata$r:000051CF                 db    0
.rdata$r:000051D0                 db    0
.rdata$r:000051D1                 db    0
.rdata$r:000051D2                 db    0
.rdata$r:000051D3                 db    0
.rdata$r:000051D4                 db 0FFh
.rdata$r:000051D5                 db 0FFh
.rdata$r:000051D6                 db 0FFh
.rdata$r:000051D7                 db 0FFh
.rdata$r:000051D8                 db    0
.rdata$r:000051D9                 db    0
.rdata$r:000051DA                 db    0
.rdata$r:000051DB                 db    0
.rdata$r:000051DC                 db  40h ; @
.rdata$r:000051DD                 db    0
.rdata$r:000051DE                 db    0
.rdata$r:000051DF                 db    0
.rdata$r:000051E0                 dd offset ??_R3IInStream@@8 ; IInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000051E0 _rdata$r        ends
.rdata$r:000051E0
.data:000051E4 ; ===========================================================================
.data:000051E4
.data:000051E4 ; Segment type: Pure data
.data:000051E4 ; Segment permissions: Read/Write
.data:000051E4 _data           segment dword public 'DATA' use32
.data:000051E4                 assume cs:_data
.data:000051E4                 ;org 51E4h
.data:000051E4 ; COMDAT (pick any)
.data:000051E4                 public ??_R0?AUIInStream@@@8
.data:000051E4 ; struct IInStream `RTTI Type Descriptor'
.data:000051E4 ??_R0?AUIInStream@@@8 dd offset ??_7type_info@@6B@
.data:000051E4                                         ; DATA XREF: .rdata$r:IInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000051E4                                         ; .rdata$r:00005474o
.data:000051E4                                         ; const type_info::`vftable'
.data:000051E8                 db    0
.data:000051E9                 db    0
.data:000051EA                 db    0
.data:000051EB                 db    0
.data:000051EC                 db  2Eh ; .
.data:000051ED                 db  3Fh ; ?
.data:000051EE                 db  41h ; A
.data:000051EF                 db  55h ; U
.data:000051F0                 db  49h ; I
.data:000051F1                 db  49h ; I
.data:000051F2                 db  6Eh ; n
.data:000051F3                 db  53h ; S
.data:000051F4                 db  74h ; t
.data:000051F5                 db  72h ; r
.data:000051F6                 db  65h ; e
.data:000051F7                 db  61h ; a
.data:000051F8                 db  6Dh ; m
.data:000051F9                 db  40h ; @
.data:000051FA                 db  40h ; @
.data:000051FB                 db    0
.data:000051FB _data           ends
.data:000051FB
.rdata$r:000051FC ; ===========================================================================
.rdata$r:000051FC
.rdata$r:000051FC ; Segment type: Pure data
.rdata$r:000051FC ; Segment permissions: Read
.rdata$r:000051FC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000051FC                 assume cs:_rdata$r
.rdata$r:000051FC                 ;org 51FCh
.rdata$r:000051FC ; COMDAT (pick any)
.rdata$r:000051FC                 public ??_R3IInStream@@8
.rdata$r:000051FC ; IInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000051FC ??_R3IInStream@@8 db    0               ; DATA XREF: .rdata$r:000051E0o
.rdata$r:000051FC                                         ; .rdata$r:00005478o
.rdata$r:000051FD                 db    0
.rdata$r:000051FE                 db    0
.rdata$r:000051FF                 db    0
.rdata$r:00005200                 db    0
.rdata$r:00005201                 db    0
.rdata$r:00005202                 db    0
.rdata$r:00005203                 db    0
.rdata$r:00005204                 db    3
.rdata$r:00005205                 db    0
.rdata$r:00005206                 db    0
.rdata$r:00005207                 db    0
.rdata$r:00005208                 dd offset ??_R2IInStream@@8 ; IInStream::`RTTI Base Class Array'
.rdata$r:00005208 _rdata$r        ends
.rdata$r:00005208
.rdata$r:0000520C ; ===========================================================================
.rdata$r:0000520C
.rdata$r:0000520C ; Segment type: Pure data
.rdata$r:0000520C ; Segment permissions: Read
.rdata$r:0000520C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000520C                 assume cs:_rdata$r
.rdata$r:0000520C                 ;org 520Ch
.rdata$r:0000520C ; COMDAT (pick any)
.rdata$r:0000520C                 public ??_R2IInStream@@8
.rdata$r:0000520C ; IInStream::`RTTI Base Class Array'
.rdata$r:0000520C ??_R2IInStream@@8 dd offset ??_R1A@?0A@EA@IInStream@@8
.rdata$r:0000520C                                         ; DATA XREF: .rdata$r:00005208o
.rdata$r:0000520C                                         ; IInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005210                 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005214                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005218                 db    0
.rdata$r:00005219                 align 4
.rdata$r:00005219 _rdata$r        ends
.rdata$r:00005219
.rdata$r:0000521C ; ===========================================================================
.rdata$r:0000521C
.rdata$r:0000521C ; Segment type: Pure data
.rdata$r:0000521C ; Segment permissions: Read
.rdata$r:0000521C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000521C                 assume cs:_rdata$r
.rdata$r:0000521C                 ;org 521Ch
.rdata$r:0000521C ; COMDAT (pick any)
.rdata$r:0000521C                 public ??_R1A@?0A@EA@ISequentialInStream@@8
.rdata$r:0000521C ; ISequentialInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000521C ??_R1A@?0A@EA@ISequentialInStream@@8 dd offset ??_R0?AUISequentialInStream@@@8
.rdata$r:0000521C                                         ; DATA XREF: .rdata$r:0000519Co
.rdata$r:0000521C                                         ; .rdata$r:00005210o ...
.rdata$r:0000521C                                         ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:00005220                 db    1
.rdata$r:00005221                 db    0
.rdata$r:00005222                 db    0
.rdata$r:00005223                 db    0
.rdata$r:00005224                 db    0
.rdata$r:00005225                 db    0
.rdata$r:00005226                 db    0
.rdata$r:00005227                 db    0
.rdata$r:00005228                 db 0FFh
.rdata$r:00005229                 db 0FFh
.rdata$r:0000522A                 db 0FFh
.rdata$r:0000522B                 db 0FFh
.rdata$r:0000522C                 db    0
.rdata$r:0000522D                 db    0
.rdata$r:0000522E                 db    0
.rdata$r:0000522F                 db    0
.rdata$r:00005230                 db  40h ; @
.rdata$r:00005231                 db    0
.rdata$r:00005232                 db    0
.rdata$r:00005233                 db    0
.rdata$r:00005234                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005234 _rdata$r        ends
.rdata$r:00005234
.data:00005238 ; ===========================================================================
.data:00005238
.data:00005238 ; Segment type: Pure data
.data:00005238 ; Segment permissions: Read/Write
.data:00005238 _data           segment dword public 'DATA' use32
.data:00005238                 assume cs:_data
.data:00005238                 ;org 5238h
.data:00005238 ; COMDAT (pick any)
.data:00005238                 public ??_R0?AUISequentialInStream@@@8
.data:00005238 ; struct ISequentialInStream `RTTI Type Descriptor'
.data:00005238 ??_R0?AUISequentialInStream@@@8 dd offset ??_7type_info@@6B@
.data:00005238                                         ; DATA XREF: .rdata$r:ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00005238                                         ; .rdata$r:000054CCo
.data:00005238                                         ; const type_info::`vftable'
.data:0000523C                 align 10h
.data:00005240 a_?auisequentia db '.?AUISequentialInStream@@',0
.data:0000525A                 align 4
.data:0000525A _data           ends
.data:0000525A
.rdata$r:0000525C ; ===========================================================================
.rdata$r:0000525C
.rdata$r:0000525C ; Segment type: Pure data
.rdata$r:0000525C ; Segment permissions: Read
.rdata$r:0000525C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000525C                 assume cs:_rdata$r
.rdata$r:0000525C                 ;org 525Ch
.rdata$r:0000525C ; COMDAT (pick any)
.rdata$r:0000525C                 public ??_R3ISequentialInStream@@8
.rdata$r:0000525C ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000525C ??_R3ISequentialInStream@@8 db    0     ; DATA XREF: .rdata$r:00005234o
.rdata$r:0000525C                                         ; .rdata$r:000054D0o
.rdata$r:0000525D                 db    0
.rdata$r:0000525E                 db    0
.rdata$r:0000525F                 db    0
.rdata$r:00005260                 db    0
.rdata$r:00005261                 db    0
.rdata$r:00005262                 db    0
.rdata$r:00005263                 db    0
.rdata$r:00005264                 db    2
.rdata$r:00005265                 db    0
.rdata$r:00005266                 db    0
.rdata$r:00005267                 db    0
.rdata$r:00005268                 dd offset ??_R2ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Array'
.rdata$r:00005268 _rdata$r        ends
.rdata$r:00005268
.rdata$r:0000526C ; ===========================================================================
.rdata$r:0000526C
.rdata$r:0000526C ; Segment type: Pure data
.rdata$r:0000526C ; Segment permissions: Read
.rdata$r:0000526C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000526C                 assume cs:_rdata$r
.rdata$r:0000526C                 ;org 526Ch
.rdata$r:0000526C ; COMDAT (pick any)
.rdata$r:0000526C                 public ??_R2ISequentialInStream@@8
.rdata$r:0000526C ; ISequentialInStream::`RTTI Base Class Array'
.rdata$r:0000526C ??_R2ISequentialInStream@@8 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8
.rdata$r:0000526C                                         ; DATA XREF: .rdata$r:00005268o
.rdata$r:0000526C                                         ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005270                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005274                 db    0
.rdata$r:00005275                 align 4
.rdata$r:00005275 _rdata$r        ends
.rdata$r:00005275
.rdata$r:00005278 ; ===========================================================================
.rdata$r:00005278
.rdata$r:00005278 ; Segment type: Pure data
.rdata$r:00005278 ; Segment permissions: Read
.rdata$r:00005278 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005278                 assume cs:_rdata$r
.rdata$r:00005278                 ;org 5278h
.rdata$r:00005278 ; COMDAT (pick any)
.rdata$r:00005278                 public ??_R13?0A@EA@CMyUnknownImp@@8
.rdata$r:00005278 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:00005278 ??_R13?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00005278                                         ; DATA XREF: .rdata$r:000051A4o
.rdata$r:00005278                                         ; .rdata$r:00005578o ...
.rdata$r:00005278                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:0000527C                 align 10h
.rdata$r:00005280                 db    4
.rdata$r:00005281                 db    0
.rdata$r:00005282                 db    0
.rdata$r:00005283                 db    0
.rdata$r:00005284                 db 0FFh
.rdata$r:00005285                 db 0FFh
.rdata$r:00005286                 db 0FFh
.rdata$r:00005287                 db 0FFh
.rdata$r:00005288                 db    0
.rdata$r:00005289                 db    0
.rdata$r:0000528A                 db    0
.rdata$r:0000528B                 db    0
.rdata$r:0000528C                 db  40h ; @
.rdata$r:0000528D                 db    0
.rdata$r:0000528E                 db    0
.rdata$r:0000528F                 db    0
.rdata$r:00005290                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005290 _rdata$r        ends
.rdata$r:00005290
.text:00005294 ; ===========================================================================
.text:00005294
.text:00005294 ; Segment type: Pure code
.text:00005294 ; Segment permissions: Read/Execute
.text:00005294 _text           segment para public 'CODE' use32
.text:00005294                 assume cs:_text
.text:00005294                 ;org 5294h
.text:00005294 ; COMDAT (pick any)
.text:00005294                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005294
.text:00005294 ; =============== S U B R O U T I N E =======================================
.text:00005294
.text:00005294 ; Attributes: bp-based frame
.text:00005294
.text:00005294 ; __int32 __stdcall CBufInStream::QueryInterface(CBufInStream *this, const struct _GUID *Buf1, void **)
.text:00005294                 public ?QueryInterface@CBufInStream@@UAGJABU_GUID@@PAPAX@Z
.text:00005294 ?QueryInterface@CBufInStream@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00005294                                         ; DATA XREF: .rdata:const CBufInStream::`vftable'o
.text:00005294
.text:00005294 this            = dword ptr  8
.text:00005294 Buf1            = dword ptr  0Ch
.text:00005294 arg_8           = dword ptr  10h
.text:00005294
.text:00005294                 push    ebp
.text:00005295                 mov     ebp, esp
.text:00005297                 mov     eax, [ebp+arg_8]
.text:0000529A                 mov     dword ptr [eax], 0
.text:000052A0                 push    offset _IID_IUnknown ; Buf2
.text:000052A5                 mov     ecx, [ebp+Buf1]
.text:000052A8                 push    ecx             ; Buf1
.text:000052A9                 call    ___@8           ; __(x,x)
.text:000052AE                 test    eax, eax
.text:000052B0                 jz      short loc_52BC
.text:000052B2                 mov     edx, [ebp+arg_8]
.text:000052B5                 mov     eax, [ebp+this]
.text:000052B8                 mov     [edx], eax
.text:000052BA                 jmp     short loc_52FB
.text:000052BC ; ---------------------------------------------------------------------------
.text:000052BC
.text:000052BC loc_52BC:                               ; CODE XREF: CBufInStream::QueryInterface(_GUID const &,void * *)+1Cj
.text:000052BC                 push    offset _IID_ISequentialInStream ; Buf2
.text:000052C1                 mov     ecx, [ebp+Buf1]
.text:000052C4                 push    ecx             ; Buf1
.text:000052C5                 call    ___@8           ; __(x,x)
.text:000052CA                 test    eax, eax
.text:000052CC                 jz      short loc_52D8
.text:000052CE                 mov     edx, [ebp+arg_8]
.text:000052D1                 mov     eax, [ebp+this]
.text:000052D4                 mov     [edx], eax
.text:000052D6                 jmp     short loc_52FB
.text:000052D8 ; ---------------------------------------------------------------------------
.text:000052D8
.text:000052D8 loc_52D8:                               ; CODE XREF: CBufInStream::QueryInterface(_GUID const &,void * *)+38j
.text:000052D8                 push    offset _IID_IInStream ; Buf2
.text:000052DD                 mov     ecx, [ebp+Buf1]
.text:000052E0                 push    ecx             ; Buf1
.text:000052E1                 call    ___@8           ; __(x,x)
.text:000052E6                 test    eax, eax
.text:000052E8                 jz      short loc_52F4
.text:000052EA                 mov     edx, [ebp+arg_8]
.text:000052ED                 mov     eax, [ebp+this]
.text:000052F0                 mov     [edx], eax
.text:000052F2                 jmp     short loc_52FB
.text:000052F4 ; ---------------------------------------------------------------------------
.text:000052F4
.text:000052F4 loc_52F4:                               ; CODE XREF: CBufInStream::QueryInterface(_GUID const &,void * *)+54j
.text:000052F4                 mov     eax, 80004002h
.text:000052F9                 jmp     short loc_530C
.text:000052FB ; ---------------------------------------------------------------------------
.text:000052FB
.text:000052FB loc_52FB:                               ; CODE XREF: CBufInStream::QueryInterface(_GUID const &,void * *)+26j
.text:000052FB                                         ; CBufInStream::QueryInterface(_GUID const &,void * *)+42j ...
.text:000052FB                 mov     ecx, [ebp+this]
.text:000052FE                 mov     edx, [ecx+4]
.text:00005301                 add     edx, 1
.text:00005304                 mov     eax, [ebp+this]
.text:00005307                 mov     [eax+4], edx
.text:0000530A                 xor     eax, eax
.text:0000530C
.text:0000530C loc_530C:                               ; CODE XREF: CBufInStream::QueryInterface(_GUID const &,void * *)+65j
.text:0000530C                 cmp     ebp, esp
.text:0000530E                 call    __RTC_CheckEsp
.text:00005313                 pop     ebp
.text:00005314                 retn    0Ch
.text:00005314 ?QueryInterface@CBufInStream@@UAGJABU_GUID@@PAPAX@Z endp
.text:00005314
.text:00005314 ; ---------------------------------------------------------------------------
.text:00005317                 align 4
.text:00005317 _text           ends
.text:00005317
.text:00005318 ; ===========================================================================
.text:00005318
.text:00005318 ; Segment type: Pure code
.text:00005318 ; Segment permissions: Read/Execute
.text:00005318 _text           segment para public 'CODE' use32
.text:00005318                 assume cs:_text
.text:00005318                 ;org 5318h
.text:00005318 ; COMDAT (pick any)
.text:00005318                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005318
.text:00005318 ; =============== S U B R O U T I N E =======================================
.text:00005318
.text:00005318 ; Attributes: bp-based frame
.text:00005318
.text:00005318 ; unsigned __int32 __stdcall CBufInStream::AddRef(CBufInStream *this)
.text:00005318                 public ?AddRef@CBufInStream@@UAGKXZ
.text:00005318 ?AddRef@CBufInStream@@UAGKXZ proc near  ; DATA XREF: .rdata:00005144o
.text:00005318
.text:00005318 var_4           = dword ptr -4
.text:00005318 this            = dword ptr  8
.text:00005318
.text:00005318                 push    ebp
.text:00005319                 mov     ebp, esp
.text:0000531B                 push    ecx
.text:0000531C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005323                 mov     eax, [ebp+this]
.text:00005326                 mov     ecx, [eax+4]
.text:00005329                 add     ecx, 1
.text:0000532C                 mov     [ebp+var_4], ecx
.text:0000532F                 mov     edx, [ebp+this]
.text:00005332                 mov     eax, [ebp+var_4]
.text:00005335                 mov     [edx+4], eax
.text:00005338                 mov     eax, [ebp+var_4]
.text:0000533B                 mov     esp, ebp
.text:0000533D                 pop     ebp
.text:0000533E                 retn    4
.text:0000533E ?AddRef@CBufInStream@@UAGKXZ endp
.text:0000533E
.text:0000533E ; ---------------------------------------------------------------------------
.text:00005341                 align 4
.text:00005341 _text           ends
.text:00005341
.text:00005344 ; ===========================================================================
.text:00005344
.text:00005344 ; Segment type: Pure code
.text:00005344 ; Segment permissions: Read/Execute
.text:00005344 _text           segment para public 'CODE' use32
.text:00005344                 assume cs:_text
.text:00005344                 ;org 5344h
.text:00005344 ; COMDAT (pick any)
.text:00005344                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005344
.text:00005344 ; =============== S U B R O U T I N E =======================================
.text:00005344
.text:00005344 ; Attributes: bp-based frame
.text:00005344
.text:00005344 ; unsigned __int32 __stdcall CBufInStream::Release(CBufInStream *this)
.text:00005344                 public ?Release@CBufInStream@@UAGKXZ
.text:00005344 ?Release@CBufInStream@@UAGKXZ proc near ; DATA XREF: .rdata:00005148o
.text:00005344
.text:00005344 var_10          = dword ptr -10h
.text:00005344 var_C           = dword ptr -0Ch
.text:00005344 var_8           = dword ptr -8
.text:00005344 var_4           = dword ptr -4
.text:00005344 this            = dword ptr  8
.text:00005344
.text:00005344                 push    ebp
.text:00005345                 mov     ebp, esp
.text:00005347                 sub     esp, 10h
.text:0000534A                 mov     eax, 0CCCCCCCCh
.text:0000534F                 mov     [ebp+var_10], eax
.text:00005352                 mov     [ebp+var_C], eax
.text:00005355                 mov     [ebp+var_8], eax
.text:00005358                 mov     [ebp+var_4], eax
.text:0000535B                 mov     eax, [ebp+this]
.text:0000535E                 mov     ecx, [eax+4]
.text:00005361                 sub     ecx, 1
.text:00005364                 mov     [ebp+var_C], ecx
.text:00005367                 mov     edx, [ebp+this]
.text:0000536A                 mov     eax, [ebp+var_C]
.text:0000536D                 mov     [edx+4], eax
.text:00005370                 cmp     [ebp+var_C], 0
.text:00005374                 jz      short loc_537E
.text:00005376                 mov     ecx, [ebp+this]
.text:00005379                 mov     eax, [ecx+4]
.text:0000537C                 jmp     short loc_53A8
.text:0000537E ; ---------------------------------------------------------------------------
.text:0000537E
.text:0000537E loc_537E:                               ; CODE XREF: CBufInStream::Release(void)+30j
.text:0000537E                 mov     edx, [ebp+this]
.text:00005381                 mov     [ebp+var_8], edx
.text:00005384                 mov     eax, [ebp+var_8]
.text:00005387                 mov     [ebp+var_4], eax
.text:0000538A                 cmp     [ebp+var_4], 0
.text:0000538E                 jz      short loc_539F
.text:00005390                 push    1
.text:00005392                 mov     ecx, [ebp+var_4]
.text:00005395                 call    ??_GCBufInStream@@QAEPAXI@Z ; CBufInStream::`scalar deleting destructor'(uint)
.text:0000539A                 mov     [ebp+var_10], eax
.text:0000539D                 jmp     short loc_53A6
.text:0000539F ; ---------------------------------------------------------------------------
.text:0000539F
.text:0000539F loc_539F:                               ; CODE XREF: CBufInStream::Release(void)+4Aj
.text:0000539F                 mov     [ebp+var_10], 0
.text:000053A6
.text:000053A6 loc_53A6:                               ; CODE XREF: CBufInStream::Release(void)+59j
.text:000053A6                 xor     eax, eax
.text:000053A8
.text:000053A8 loc_53A8:                               ; CODE XREF: CBufInStream::Release(void)+38j
.text:000053A8                 add     esp, 10h
.text:000053AB                 cmp     ebp, esp
.text:000053AD                 call    __RTC_CheckEsp
.text:000053B2                 mov     esp, ebp
.text:000053B4                 pop     ebp
.text:000053B5                 retn    4
.text:000053B5 ?Release@CBufInStream@@UAGKXZ endp
.text:000053B5
.text:000053B5 _text           ends
.text:000053B5
.text:000053B8 ; ===========================================================================
.text:000053B8
.text:000053B8 ; Segment type: Pure code
.text:000053B8 ; Segment permissions: Read/Execute
.text:000053B8 _text           segment para public 'CODE' use32
.text:000053B8                 assume cs:_text
.text:000053B8                 ;org 53B8h
.text:000053B8 ; COMDAT (pick any)
.text:000053B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000053B8
.text:000053B8 ; =============== S U B R O U T I N E =======================================
.text:000053B8
.text:000053B8 ; Attributes: bp-based frame
.text:000053B8
.text:000053B8 ; public: void * __thiscall CBufInStream::`scalar deleting destructor'(unsigned int)
.text:000053B8                 public ??_GCBufInStream@@QAEPAXI@Z
.text:000053B8 ??_GCBufInStream@@QAEPAXI@Z proc near   ; CODE XREF: CBufInStream::Release(void)+51p
.text:000053B8
.text:000053B8 var_4           = dword ptr -4
.text:000053B8 arg_0           = dword ptr  8
.text:000053B8
.text:000053B8                 push    ebp
.text:000053B9                 mov     ebp, esp
.text:000053BB                 push    ecx
.text:000053BC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000053C3                 mov     [ebp+var_4], ecx
.text:000053C6                 mov     ecx, [ebp+var_4] ; this
.text:000053C9                 call    ??1CBufInStream@@QAE@XZ ; CBufInStream::~CBufInStream(void)
.text:000053CE                 mov     eax, [ebp+arg_0]
.text:000053D1                 and     eax, 1
.text:000053D4                 jz      short loc_53E2
.text:000053D6                 mov     ecx, [ebp+var_4]
.text:000053D9                 push    ecx             ; void *
.text:000053DA                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000053DF                 add     esp, 4
.text:000053E2
.text:000053E2 loc_53E2:                               ; CODE XREF: CBufInStream::`scalar deleting destructor'(uint)+1Cj
.text:000053E2                 mov     eax, [ebp+var_4]
.text:000053E5                 add     esp, 4
.text:000053E8                 cmp     ebp, esp
.text:000053EA                 call    __RTC_CheckEsp
.text:000053EF                 mov     esp, ebp
.text:000053F1                 pop     ebp
.text:000053F2                 retn    4
.text:000053F2 ??_GCBufInStream@@QAEPAXI@Z endp
.text:000053F2
.text:000053F2 ; ---------------------------------------------------------------------------
.text:000053F5                 align 4
.text:000053F5 _text           ends
.text:000053F5
.text:000053F8 ; ===========================================================================
.text:000053F8
.text:000053F8 ; Segment type: Pure code
.text:000053F8 ; Segment permissions: Read/Execute
.text:000053F8 _text           segment para public 'CODE' use32
.text:000053F8                 assume cs:_text
.text:000053F8                 ;org 53F8h
.text:000053F8 ; COMDAT (pick any)
.text:000053F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000053F8
.text:000053F8 ; =============== S U B R O U T I N E =======================================
.text:000053F8
.text:000053F8 ; Attributes: bp-based frame
.text:000053F8
.text:000053F8 ; _DWORD __thiscall CBufInStream::~CBufInStream(CBufInStream *__hidden this)
.text:000053F8                 public ??1CBufInStream@@QAE@XZ
.text:000053F8 ??1CBufInStream@@QAE@XZ proc near       ; CODE XREF: CBufInStream::`scalar deleting destructor'(uint)+11p
.text:000053F8
.text:000053F8 var_4           = dword ptr -4
.text:000053F8
.text:000053F8                 push    ebp
.text:000053F9                 mov     ebp, esp
.text:000053FB                 push    ecx
.text:000053FC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005403                 mov     [ebp+var_4], ecx
.text:00005406                 mov     ecx, [ebp+var_4]
.text:00005409                 add     ecx, 1Ch
.text:0000540C                 call    ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ ; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>(void)
.text:00005411                 add     esp, 4
.text:00005414                 cmp     ebp, esp
.text:00005416                 call    __RTC_CheckEsp
.text:0000541B                 mov     esp, ebp
.text:0000541D                 pop     ebp
.text:0000541E                 retn
.text:0000541E ??1CBufInStream@@QAE@XZ endp
.text:0000541E
.text:0000541E ; ---------------------------------------------------------------------------
.text:0000541F                 align 10h
.text:0000541F _text           ends
.text:0000541F
.text:00005420 ; ===========================================================================
.text:00005420
.text:00005420 ; Segment type: Pure code
.text:00005420 ; Segment permissions: Read/Execute
.text:00005420 _text           segment para public 'CODE' use32
.text:00005420                 assume cs:_text
.text:00005420                 ;org 5420h
.text:00005420 ; COMDAT (pick any)
.text:00005420                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005420
.text:00005420 ; =============== S U B R O U T I N E =======================================
.text:00005420
.text:00005420 ; Attributes: bp-based frame
.text:00005420
.text:00005420 ; _DWORD __thiscall IInStream::IInStream(IInStream *__hidden this)
.text:00005420                 public ??0IInStream@@QAE@XZ
.text:00005420 ??0IInStream@@QAE@XZ proc near          ; CODE XREF: CBufInStream::CBufInStream(void)+11p
.text:00005420
.text:00005420 var_4           = dword ptr -4
.text:00005420
.text:00005420                 push    ebp
.text:00005421                 mov     ebp, esp
.text:00005423                 push    ecx
.text:00005424                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000542B                 mov     [ebp+var_4], ecx
.text:0000542E                 mov     ecx, [ebp+var_4] ; this
.text:00005431                 call    ??0ISequentialInStream@@QAE@XZ ; ISequentialInStream::ISequentialInStream(void)
.text:00005436                 mov     eax, [ebp+var_4]
.text:00005439                 mov     dword ptr [eax], offset ??_7IInStream@@6B@ ; const IInStream::`vftable'
.text:0000543F                 mov     eax, [ebp+var_4]
.text:00005442                 add     esp, 4
.text:00005445                 cmp     ebp, esp
.text:00005447                 call    __RTC_CheckEsp
.text:0000544C                 mov     esp, ebp
.text:0000544E                 pop     ebp
.text:0000544F                 retn
.text:0000544F ??0IInStream@@QAE@XZ endp
.text:0000544F
.text:0000544F _text           ends
.text:0000544F
.rdata:00005450 ; ===========================================================================
.rdata:00005450
.rdata:00005450 ; Segment type: Pure data
.rdata:00005450 ; Segment permissions: Read
.rdata:00005450 _rdata          segment dword public 'DATA' use32
.rdata:00005450                 assume cs:_rdata
.rdata:00005450                 ;org 5450h
.rdata:00005450 ; COMDAT (pick largest)
.rdata:00005450                 dd offset ??_R4IInStream@@6B@ ; const IInStream::`RTTI Complete Object Locator'
.rdata:00005454                 public ??_7IInStream@@6B@
.rdata:00005454 ; const IInStream::`vftable'
.rdata:00005454 ??_7IInStream@@6B@ dd offset __purecall ; DATA XREF: IInStream::IInStream(void)+19o
.rdata:00005458                 dd offset __purecall
.rdata:0000545C                 dd offset __purecall
.rdata:00005460                 dd offset __purecall
.rdata:00005464                 dd offset __purecall
.rdata:00005464 _rdata          ends
.rdata:00005464
.rdata$r:00005468 ; ===========================================================================
.rdata$r:00005468
.rdata$r:00005468 ; Segment type: Pure data
.rdata$r:00005468 ; Segment permissions: Read
.rdata$r:00005468 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005468                 assume cs:_rdata$r
.rdata$r:00005468                 ;org 5468h
.rdata$r:00005468 ; COMDAT (pick any)
.rdata$r:00005468                 public ??_R4IInStream@@6B@
.rdata$r:00005468 ; const IInStream::`RTTI Complete Object Locator'
.rdata$r:00005468 ??_R4IInStream@@6B@ db    0             ; DATA XREF: .rdata:00005450o
.rdata$r:00005469                 db    0
.rdata$r:0000546A                 db    0
.rdata$r:0000546B                 db    0
.rdata$r:0000546C                 db    0
.rdata$r:0000546D                 db    0
.rdata$r:0000546E                 db    0
.rdata$r:0000546F                 db    0
.rdata$r:00005470                 db    0
.rdata$r:00005471                 db    0
.rdata$r:00005472                 db    0
.rdata$r:00005473                 db    0
.rdata$r:00005474                 dd offset ??_R0?AUIInStream@@@8 ; IInStream `RTTI Type Descriptor'
.rdata$r:00005478                 dd offset ??_R3IInStream@@8 ; IInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005478 _rdata$r        ends
.rdata$r:00005478
.text:0000547C ; ===========================================================================
.text:0000547C
.text:0000547C ; Segment type: Pure code
.text:0000547C ; Segment permissions: Read/Execute
.text:0000547C _text           segment para public 'CODE' use32
.text:0000547C                 assume cs:_text
.text:0000547C                 ;org 547Ch
.text:0000547C ; COMDAT (pick any)
.text:0000547C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000547C
.text:0000547C ; =============== S U B R O U T I N E =======================================
.text:0000547C
.text:0000547C ; Attributes: bp-based frame
.text:0000547C
.text:0000547C ; _DWORD __thiscall ISequentialInStream::ISequentialInStream(ISequentialInStream *__hidden this)
.text:0000547C                 public ??0ISequentialInStream@@QAE@XZ
.text:0000547C ??0ISequentialInStream@@QAE@XZ proc near
.text:0000547C                                         ; CODE XREF: IInStream::IInStream(void)+11p
.text:0000547C                                         ; CStdInFileStream::CStdInFileStream(void)+11p
.text:0000547C
.text:0000547C var_4           = dword ptr -4
.text:0000547C
.text:0000547C                 push    ebp
.text:0000547D                 mov     ebp, esp
.text:0000547F                 push    ecx
.text:00005480                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005487                 mov     [ebp+var_4], ecx
.text:0000548A                 mov     ecx, [ebp+var_4]
.text:0000548D                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00005492                 mov     eax, [ebp+var_4]
.text:00005495                 mov     dword ptr [eax], offset ??_7ISequentialInStream@@6B@ ; const ISequentialInStream::`vftable'
.text:0000549B                 mov     eax, [ebp+var_4]
.text:0000549E                 add     esp, 4
.text:000054A1                 cmp     ebp, esp
.text:000054A3                 call    __RTC_CheckEsp
.text:000054A8                 mov     esp, ebp
.text:000054AA                 pop     ebp
.text:000054AB                 retn
.text:000054AB ??0ISequentialInStream@@QAE@XZ endp
.text:000054AB
.text:000054AB _text           ends
.text:000054AB
.rdata:000054AC ; ===========================================================================
.rdata:000054AC
.rdata:000054AC ; Segment type: Pure data
.rdata:000054AC ; Segment permissions: Read
.rdata:000054AC _rdata          segment dword public 'DATA' use32
.rdata:000054AC                 assume cs:_rdata
.rdata:000054AC                 ;org 54ACh
.rdata:000054AC ; COMDAT (pick largest)
.rdata:000054AC                 dd offset ??_R4ISequentialInStream@@6B@ ; const ISequentialInStream::`RTTI Complete Object Locator'
.rdata:000054B0                 public ??_7ISequentialInStream@@6B@
.rdata:000054B0 ; const ISequentialInStream::`vftable'
.rdata:000054B0 ??_7ISequentialInStream@@6B@ dd offset __purecall
.rdata:000054B0                                         ; DATA XREF: ISequentialInStream::ISequentialInStream(void)+19o
.rdata:000054B4                 dd offset __purecall
.rdata:000054B8                 dd offset __purecall
.rdata:000054BC                 dd offset __purecall
.rdata:000054BC _rdata          ends
.rdata:000054BC
.rdata$r:000054C0 ; ===========================================================================
.rdata$r:000054C0
.rdata$r:000054C0 ; Segment type: Pure data
.rdata$r:000054C0 ; Segment permissions: Read
.rdata$r:000054C0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000054C0                 assume cs:_rdata$r
.rdata$r:000054C0                 ;org 54C0h
.rdata$r:000054C0 ; COMDAT (pick any)
.rdata$r:000054C0                 public ??_R4ISequentialInStream@@6B@
.rdata$r:000054C0 ; const ISequentialInStream::`RTTI Complete Object Locator'
.rdata$r:000054C0 ??_R4ISequentialInStream@@6B@ db    0   ; DATA XREF: .rdata:000054ACo
.rdata$r:000054C1                 db    0
.rdata$r:000054C2                 db    0
.rdata$r:000054C3                 db    0
.rdata$r:000054C4                 db    0
.rdata$r:000054C5                 db    0
.rdata$r:000054C6                 db    0
.rdata$r:000054C7                 db    0
.rdata$r:000054C8                 db    0
.rdata$r:000054C9                 db    0
.rdata$r:000054CA                 db    0
.rdata$r:000054CB                 db    0
.rdata$r:000054CC                 dd offset ??_R0?AUISequentialInStream@@@8 ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:000054D0                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000054D0 _rdata$r        ends
.rdata$r:000054D0
.text:000054D4 ; ===========================================================================
.text:000054D4
.text:000054D4 ; Segment type: Pure code
.text:000054D4 ; Segment permissions: Read/Execute
.text:000054D4 _text           segment para public 'CODE' use32
.text:000054D4                 assume cs:_text
.text:000054D4                 ;org 54D4h
.text:000054D4 ; COMDAT (pick any)
.text:000054D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000054D4
.text:000054D4 ; =============== S U B R O U T I N E =======================================
.text:000054D4
.text:000054D4 ; Attributes: bp-based frame
.text:000054D4
.text:000054D4 ; public: __thiscall CStdInFileStream::CStdInFileStream(void)
.text:000054D4                 public ??0CStdInFileStream@@QAE@XZ
.text:000054D4 ??0CStdInFileStream@@QAE@XZ proc near   ; CODE XREF: CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+3D8p
.text:000054D4
.text:000054D4 var_4           = dword ptr -4
.text:000054D4
.text:000054D4                 push    ebp
.text:000054D5                 mov     ebp, esp
.text:000054D7                 push    ecx
.text:000054D8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000054DF                 mov     [ebp+var_4], ecx
.text:000054E2                 mov     ecx, [ebp+var_4] ; this
.text:000054E5                 call    ??0ISequentialInStream@@QAE@XZ ; ISequentialInStream::ISequentialInStream(void)
.text:000054EA                 mov     ecx, [ebp+var_4]
.text:000054ED                 add     ecx, 4          ; this
.text:000054F0                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:000054F5                 mov     eax, [ebp+var_4]
.text:000054F8                 mov     dword ptr [eax], offset ??_7CStdInFileStream@@6B@ ; const CStdInFileStream::`vftable'
.text:000054FE                 mov     eax, [ebp+var_4]
.text:00005501                 add     esp, 4
.text:00005504                 cmp     ebp, esp
.text:00005506                 call    __RTC_CheckEsp
.text:0000550B                 mov     esp, ebp
.text:0000550D                 pop     ebp
.text:0000550E                 retn
.text:0000550E ??0CStdInFileStream@@QAE@XZ endp
.text:0000550E
.text:0000550E ; ---------------------------------------------------------------------------
.text:0000550F                 align 10h
.text:0000550F _text           ends
.text:0000550F
.rdata:00005510 ; ===========================================================================
.rdata:00005510
.rdata:00005510 ; Segment type: Pure data
.rdata:00005510 ; Segment permissions: Read
.rdata:00005510 _rdata          segment dword public 'DATA' use32
.rdata:00005510                 assume cs:_rdata
.rdata:00005510                 ;org 5510h
.rdata:00005510 ; COMDAT (pick largest)
.rdata:00005510                 dd offset ??_R4CStdInFileStream@@6B@ ; const CStdInFileStream::`RTTI Complete Object Locator'
.rdata:00005514                 public ??_7CStdInFileStream@@6B@
.rdata:00005514 ; const CStdInFileStream::`vftable'
.rdata:00005514 ??_7CStdInFileStream@@6B@ dd offset ?QueryInterface@CStdInFileStream@@UAGJABU_GUID@@PAPAX@Z
.rdata:00005514                                         ; DATA XREF: CStdInFileStream::CStdInFileStream(void)+24o
.rdata:00005514                                         ; CStdInFileStream::~CStdInFileStream(void)+11o
.rdata:00005514                                         ; CStdInFileStream::QueryInterface(_GUID const &,void * *)
.rdata:00005518                 dd offset ?AddRef@CStdInFileStream@@UAGKXZ ; CStdInFileStream::AddRef(void)
.rdata:0000551C                 dd offset ?Release@CStdInFileStream@@UAGKXZ ; CStdInFileStream::Release(void)
.rdata:00005520                 dd offset ?Read@CStdInFileStream@@UAGJPAXIPAI@Z ; CStdInFileStream::Read(void *,uint,uint *)
.rdata:00005524                 dd offset ??_ECStdInFileStream@@UAEPAXI@Z ; CStdInFileStream::`vector deleting destructor'(uint)
.rdata:00005524 _rdata          ends
.rdata:00005524
.rdata$r:00005528 ; ===========================================================================
.rdata$r:00005528
.rdata$r:00005528 ; Segment type: Pure data
.rdata$r:00005528 ; Segment permissions: Read
.rdata$r:00005528 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005528                 assume cs:_rdata$r
.rdata$r:00005528                 ;org 5528h
.rdata$r:00005528 ; COMDAT (pick any)
.rdata$r:00005528                 public ??_R4CStdInFileStream@@6B@
.rdata$r:00005528 ; const CStdInFileStream::`RTTI Complete Object Locator'
.rdata$r:00005528 ??_R4CStdInFileStream@@6B@ db    0      ; DATA XREF: .rdata:00005510o
.rdata$r:00005529                 db    0
.rdata$r:0000552A                 db    0
.rdata$r:0000552B                 db    0
.rdata$r:0000552C                 db    0
.rdata$r:0000552D                 db    0
.rdata$r:0000552E                 db    0
.rdata$r:0000552F                 db    0
.rdata$r:00005530                 db    0
.rdata$r:00005531                 db    0
.rdata$r:00005532                 db    0
.rdata$r:00005533                 db    0
.rdata$r:00005534                 dd offset ??_R0?AVCStdInFileStream@@@8 ; CStdInFileStream `RTTI Type Descriptor'
.rdata$r:00005538                 dd offset ??_R3CStdInFileStream@@8 ; CStdInFileStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005538 _rdata$r        ends
.rdata$r:00005538
.data:0000553C ; ===========================================================================
.data:0000553C
.data:0000553C ; Segment type: Pure data
.data:0000553C ; Segment permissions: Read/Write
.data:0000553C _data           segment dword public 'DATA' use32
.data:0000553C                 assume cs:_data
.data:0000553C                 ;org 553Ch
.data:0000553C ; COMDAT (pick any)
.data:0000553C                 public ??_R0?AVCStdInFileStream@@@8
.data:0000553C ; class CStdInFileStream `RTTI Type Descriptor'
.data:0000553C ??_R0?AVCStdInFileStream@@@8 dd offset ??_7type_info@@6B@
.data:0000553C                                         ; DATA XREF: .rdata$r:00005534o
.data:0000553C                                         ; .rdata$r:CStdInFileStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:0000553C                                         ; const type_info::`vftable'
.data:00005540                 db    0
.data:00005541                 db    0
.data:00005542                 db    0
.data:00005543                 db    0
.data:00005544                 db  2Eh ; .
.data:00005545                 db  3Fh ; ?
.data:00005546                 db  41h ; A
.data:00005547                 db  56h ; V
.data:00005548                 db  43h ; C
.data:00005549                 db  53h ; S
.data:0000554A                 db  74h ; t
.data:0000554B                 db  64h ; d
.data:0000554C                 db  49h ; I
.data:0000554D                 db  6Eh ; n
.data:0000554E                 db  46h ; F
.data:0000554F                 db  69h ; i
.data:00005550                 db  6Ch ; l
.data:00005551                 db  65h ; e
.data:00005552                 db  53h ; S
.data:00005553                 db  74h ; t
.data:00005554                 db  72h ; r
.data:00005555                 db  65h ; e
.data:00005556                 db  61h ; a
.data:00005557                 db  6Dh ; m
.data:00005558                 db  40h ; @
.data:00005559                 db  40h ; @
.data:0000555A                 db    0
.data:0000555B                 align 4
.data:0000555B _data           ends
.data:0000555B
.rdata$r:0000555C ; ===========================================================================
.rdata$r:0000555C
.rdata$r:0000555C ; Segment type: Pure data
.rdata$r:0000555C ; Segment permissions: Read
.rdata$r:0000555C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000555C                 assume cs:_rdata$r
.rdata$r:0000555C                 ;org 555Ch
.rdata$r:0000555C ; COMDAT (pick any)
.rdata$r:0000555C                 public ??_R3CStdInFileStream@@8
.rdata$r:0000555C ; CStdInFileStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000555C ??_R3CStdInFileStream@@8 db    0        ; DATA XREF: .rdata$r:00005538o
.rdata$r:0000555C                                         ; .rdata$r:00005598o
.rdata$r:0000555D                 db    0
.rdata$r:0000555E                 db    0
.rdata$r:0000555F                 db    0
.rdata$r:00005560                 db    1
.rdata$r:00005561                 db    0
.rdata$r:00005562                 db    0
.rdata$r:00005563                 db    0
.rdata$r:00005564                 db    4
.rdata$r:00005565                 db    0
.rdata$r:00005566                 db    0
.rdata$r:00005567                 db    0
.rdata$r:00005568                 dd offset ??_R2CStdInFileStream@@8 ; CStdInFileStream::`RTTI Base Class Array'
.rdata$r:00005568 _rdata$r        ends
.rdata$r:00005568
.rdata$r:0000556C ; ===========================================================================
.rdata$r:0000556C
.rdata$r:0000556C ; Segment type: Pure data
.rdata$r:0000556C ; Segment permissions: Read
.rdata$r:0000556C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000556C                 assume cs:_rdata$r
.rdata$r:0000556C                 ;org 556Ch
.rdata$r:0000556C ; COMDAT (pick any)
.rdata$r:0000556C                 public ??_R2CStdInFileStream@@8
.rdata$r:0000556C ; CStdInFileStream::`RTTI Base Class Array'
.rdata$r:0000556C ??_R2CStdInFileStream@@8 dd offset ??_R1A@?0A@EA@CStdInFileStream@@8
.rdata$r:0000556C                                         ; DATA XREF: .rdata$r:00005568o
.rdata$r:0000556C                                         ; CStdInFileStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005570                 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005574                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005578                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:0000557C                 db    0
.rdata$r:0000557D                 align 10h
.rdata$r:0000557D _rdata$r        ends
.rdata$r:0000557D
.rdata$r:00005580 ; ===========================================================================
.rdata$r:00005580
.rdata$r:00005580 ; Segment type: Pure data
.rdata$r:00005580 ; Segment permissions: Read
.rdata$r:00005580 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005580                 assume cs:_rdata$r
.rdata$r:00005580                 ;org 5580h
.rdata$r:00005580 ; COMDAT (pick any)
.rdata$r:00005580                 public ??_R1A@?0A@EA@CStdInFileStream@@8
.rdata$r:00005580 ; CStdInFileStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00005580 ??_R1A@?0A@EA@CStdInFileStream@@8 dd offset ??_R0?AVCStdInFileStream@@@8
.rdata$r:00005580                                         ; DATA XREF: .rdata$r:CStdInFileStream::`RTTI Base Class Array'o
.rdata$r:00005580                                         ; CStdInFileStream `RTTI Type Descriptor'
.rdata$r:00005584                 db    3
.rdata$r:00005585                 db    0
.rdata$r:00005586                 db    0
.rdata$r:00005587                 db    0
.rdata$r:00005588                 db    0
.rdata$r:00005589                 db    0
.rdata$r:0000558A                 db    0
.rdata$r:0000558B                 db    0
.rdata$r:0000558C                 db 0FFh
.rdata$r:0000558D                 db 0FFh
.rdata$r:0000558E                 db 0FFh
.rdata$r:0000558F                 db 0FFh
.rdata$r:00005590                 db    0
.rdata$r:00005591                 db    0
.rdata$r:00005592                 db    0
.rdata$r:00005593                 db    0
.rdata$r:00005594                 db  40h ; @
.rdata$r:00005595                 db    0
.rdata$r:00005596                 db    0
.rdata$r:00005597                 db    0
.rdata$r:00005598                 dd offset ??_R3CStdInFileStream@@8 ; CStdInFileStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005598 _rdata$r        ends
.rdata$r:00005598
.text:0000559C ; ===========================================================================
.text:0000559C
.text:0000559C ; Segment type: Pure code
.text:0000559C ; Segment permissions: Read/Execute
.text:0000559C _text           segment para public 'CODE' use32
.text:0000559C                 assume cs:_text
.text:0000559C                 ;org 559Ch
.text:0000559C ; COMDAT (pick any)
.text:0000559C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000559C
.text:0000559C ; =============== S U B R O U T I N E =======================================
.text:0000559C
.text:0000559C ; Attributes: bp-based frame
.text:0000559C
.text:0000559C ; __int32 __stdcall CStdInFileStream::QueryInterface(CStdInFileStream *this, const struct _GUID *Buf1, void **)
.text:0000559C                 public ?QueryInterface@CStdInFileStream@@UAGJABU_GUID@@PAPAX@Z
.text:0000559C ?QueryInterface@CStdInFileStream@@UAGJABU_GUID@@PAPAX@Z proc near
.text:0000559C                                         ; DATA XREF: .rdata:const CStdInFileStream::`vftable'o
.text:0000559C
.text:0000559C this            = dword ptr  8
.text:0000559C Buf1            = dword ptr  0Ch
.text:0000559C arg_8           = dword ptr  10h
.text:0000559C
.text:0000559C                 push    ebp
.text:0000559D                 mov     ebp, esp
.text:0000559F                 mov     eax, [ebp+arg_8]
.text:000055A2                 mov     dword ptr [eax], 0
.text:000055A8                 push    offset _IID_IUnknown ; Buf2
.text:000055AD                 mov     ecx, [ebp+Buf1]
.text:000055B0                 push    ecx             ; Buf1
.text:000055B1                 call    ___@8           ; __(x,x)
.text:000055B6                 test    eax, eax
.text:000055B8                 jz      short loc_55C4
.text:000055BA                 mov     edx, [ebp+arg_8]
.text:000055BD                 mov     eax, [ebp+this]
.text:000055C0                 mov     [edx], eax
.text:000055C2                 jmp     short loc_55CB
.text:000055C4 ; ---------------------------------------------------------------------------
.text:000055C4
.text:000055C4 loc_55C4:                               ; CODE XREF: CStdInFileStream::QueryInterface(_GUID const &,void * *)+1Cj
.text:000055C4                 mov     eax, 80004002h
.text:000055C9                 jmp     short loc_55DC
.text:000055CB ; ---------------------------------------------------------------------------
.text:000055CB
.text:000055CB loc_55CB:                               ; CODE XREF: CStdInFileStream::QueryInterface(_GUID const &,void * *)+26j
.text:000055CB                 mov     ecx, [ebp+this]
.text:000055CE                 mov     edx, [ecx+4]
.text:000055D1                 add     edx, 1
.text:000055D4                 mov     eax, [ebp+this]
.text:000055D7                 mov     [eax+4], edx
.text:000055DA                 xor     eax, eax
.text:000055DC
.text:000055DC loc_55DC:                               ; CODE XREF: CStdInFileStream::QueryInterface(_GUID const &,void * *)+2Dj
.text:000055DC                 cmp     ebp, esp
.text:000055DE                 call    __RTC_CheckEsp
.text:000055E3                 pop     ebp
.text:000055E4                 retn    0Ch
.text:000055E4 ?QueryInterface@CStdInFileStream@@UAGJABU_GUID@@PAPAX@Z endp
.text:000055E4
.text:000055E4 ; ---------------------------------------------------------------------------
.text:000055E7                 align 4
.text:000055E7 _text           ends
.text:000055E7
.text:000055E8 ; ===========================================================================
.text:000055E8
.text:000055E8 ; Segment type: Pure code
.text:000055E8 ; Segment permissions: Read/Execute
.text:000055E8 _text           segment para public 'CODE' use32
.text:000055E8                 assume cs:_text
.text:000055E8                 ;org 55E8h
.text:000055E8 ; COMDAT (pick any)
.text:000055E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000055E8
.text:000055E8 ; =============== S U B R O U T I N E =======================================
.text:000055E8
.text:000055E8 ; Attributes: bp-based frame
.text:000055E8
.text:000055E8 ; unsigned __int32 __stdcall CStdInFileStream::AddRef(CStdInFileStream *this)
.text:000055E8                 public ?AddRef@CStdInFileStream@@UAGKXZ
.text:000055E8 ?AddRef@CStdInFileStream@@UAGKXZ proc near ; DATA XREF: .rdata:00005518o
.text:000055E8
.text:000055E8 var_4           = dword ptr -4
.text:000055E8 this            = dword ptr  8
.text:000055E8
.text:000055E8                 push    ebp
.text:000055E9                 mov     ebp, esp
.text:000055EB                 push    ecx
.text:000055EC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000055F3                 mov     eax, [ebp+this]
.text:000055F6                 mov     ecx, [eax+4]
.text:000055F9                 add     ecx, 1
.text:000055FC                 mov     [ebp+var_4], ecx
.text:000055FF                 mov     edx, [ebp+this]
.text:00005602                 mov     eax, [ebp+var_4]
.text:00005605                 mov     [edx+4], eax
.text:00005608                 mov     eax, [ebp+var_4]
.text:0000560B                 mov     esp, ebp
.text:0000560D                 pop     ebp
.text:0000560E                 retn    4
.text:0000560E ?AddRef@CStdInFileStream@@UAGKXZ endp
.text:0000560E
.text:0000560E ; ---------------------------------------------------------------------------
.text:00005611                 align 4
.text:00005611 _text           ends
.text:00005611
.text:00005614 ; ===========================================================================
.text:00005614
.text:00005614 ; Segment type: Pure code
.text:00005614 ; Segment permissions: Read/Execute
.text:00005614 _text           segment para public 'CODE' use32
.text:00005614                 assume cs:_text
.text:00005614                 ;org 5614h
.text:00005614 ; COMDAT (pick any)
.text:00005614                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005614
.text:00005614 ; =============== S U B R O U T I N E =======================================
.text:00005614
.text:00005614 ; Attributes: bp-based frame
.text:00005614
.text:00005614 ; unsigned __int32 __stdcall CStdInFileStream::Release(CStdInFileStream *this)
.text:00005614                 public ?Release@CStdInFileStream@@UAGKXZ
.text:00005614 ?Release@CStdInFileStream@@UAGKXZ proc near ; DATA XREF: .rdata:0000551Co
.text:00005614
.text:00005614 var_10          = dword ptr -10h
.text:00005614 var_C           = dword ptr -0Ch
.text:00005614 var_8           = dword ptr -8
.text:00005614 var_4           = dword ptr -4
.text:00005614 this            = dword ptr  8
.text:00005614
.text:00005614                 push    ebp
.text:00005615                 mov     ebp, esp
.text:00005617                 sub     esp, 10h
.text:0000561A                 push    esi
.text:0000561B                 mov     eax, 0CCCCCCCCh
.text:00005620                 mov     [ebp+var_10], eax
.text:00005623                 mov     [ebp+var_C], eax
.text:00005626                 mov     [ebp+var_8], eax
.text:00005629                 mov     [ebp+var_4], eax
.text:0000562C                 mov     eax, [ebp+this]
.text:0000562F                 mov     ecx, [eax+4]
.text:00005632                 sub     ecx, 1
.text:00005635                 mov     [ebp+var_C], ecx
.text:00005638                 mov     edx, [ebp+this]
.text:0000563B                 mov     eax, [ebp+var_C]
.text:0000563E                 mov     [edx+4], eax
.text:00005641                 cmp     [ebp+var_C], 0
.text:00005645                 jz      short loc_564F
.text:00005647                 mov     ecx, [ebp+this]
.text:0000564A                 mov     eax, [ecx+4]
.text:0000564D                 jmp     short loc_5687
.text:0000564F ; ---------------------------------------------------------------------------
.text:0000564F
.text:0000564F loc_564F:                               ; CODE XREF: CStdInFileStream::Release(void)+31j
.text:0000564F                 mov     edx, [ebp+this]
.text:00005652                 mov     [ebp+var_8], edx
.text:00005655                 mov     eax, [ebp+var_8]
.text:00005658                 mov     [ebp+var_4], eax
.text:0000565B                 cmp     [ebp+var_4], 0
.text:0000565F                 jz      short loc_567E
.text:00005661                 mov     esi, esp
.text:00005663                 push    1
.text:00005665                 mov     ecx, [ebp+var_4]
.text:00005668                 mov     edx, [ecx]
.text:0000566A                 mov     ecx, [ebp+var_4]
.text:0000566D                 mov     eax, [edx+10h]
.text:00005670                 call    eax
.text:00005672                 cmp     esi, esp
.text:00005674                 call    __RTC_CheckEsp
.text:00005679                 mov     [ebp+var_10], eax
.text:0000567C                 jmp     short loc_5685
.text:0000567E ; ---------------------------------------------------------------------------
.text:0000567E
.text:0000567E loc_567E:                               ; CODE XREF: CStdInFileStream::Release(void)+4Bj
.text:0000567E                 mov     [ebp+var_10], 0
.text:00005685
.text:00005685 loc_5685:                               ; CODE XREF: CStdInFileStream::Release(void)+68j
.text:00005685                 xor     eax, eax
.text:00005687
.text:00005687 loc_5687:                               ; CODE XREF: CStdInFileStream::Release(void)+39j
.text:00005687                 pop     esi
.text:00005688                 add     esp, 10h
.text:0000568B                 cmp     ebp, esp
.text:0000568D                 call    __RTC_CheckEsp
.text:00005692                 mov     esp, ebp
.text:00005694                 pop     ebp
.text:00005695                 retn    4
.text:00005695 ?Release@CStdInFileStream@@UAGKXZ endp
.text:00005695
.text:00005695 _text           ends
.text:00005695
.text:00005698 ; ===========================================================================
.text:00005698
.text:00005698 ; Segment type: Pure code
.text:00005698 ; Segment permissions: Read/Execute
.text:00005698 _text           segment para public 'CODE' use32
.text:00005698                 assume cs:_text
.text:00005698                 ;org 5698h
.text:00005698 ; COMDAT (pick any)
.text:00005698                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005698
.text:00005698 ; =============== S U B R O U T I N E =======================================
.text:00005698
.text:00005698 ; Attributes: bp-based frame
.text:00005698
.text:00005698 ; public: virtual void * __thiscall CStdInFileStream::`scalar deleting destructor'(unsigned int)
.text:00005698                 public ??_GCStdInFileStream@@UAEPAXI@Z
.text:00005698 ??_GCStdInFileStream@@UAEPAXI@Z proc near
.text:00005698
.text:00005698 var_4           = dword ptr -4
.text:00005698 arg_0           = dword ptr  8
.text:00005698
.text:00005698                 push    ebp
.text:00005699                 mov     ebp, esp
.text:0000569B                 push    ecx
.text:0000569C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000056A3                 mov     [ebp+var_4], ecx
.text:000056A6                 mov     ecx, [ebp+var_4] ; this
.text:000056A9                 call    ??1CStdInFileStream@@UAE@XZ ; CStdInFileStream::~CStdInFileStream(void)
.text:000056AE                 mov     eax, [ebp+arg_0]
.text:000056B1                 and     eax, 1
.text:000056B4                 jz      short loc_56C2
.text:000056B6                 mov     ecx, [ebp+var_4]
.text:000056B9                 push    ecx             ; void *
.text:000056BA                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000056BF                 add     esp, 4
.text:000056C2
.text:000056C2 loc_56C2:                               ; CODE XREF: CStdInFileStream::`scalar deleting destructor'(uint)+1Cj
.text:000056C2                 mov     eax, [ebp+var_4]
.text:000056C5                 add     esp, 4
.text:000056C8                 cmp     ebp, esp
.text:000056CA                 call    __RTC_CheckEsp
.text:000056CF                 mov     esp, ebp
.text:000056D1                 pop     ebp
.text:000056D2                 retn    4
.text:000056D2 ??_GCStdInFileStream@@UAEPAXI@Z endp
.text:000056D2
.text:000056D2 ; ---------------------------------------------------------------------------
.text:000056D5                 align 4
.text:000056D5 _text           ends
.text:000056D5
.text:000056D8 ; ===========================================================================
.text:000056D8
.text:000056D8 ; Segment type: Pure code
.text:000056D8 ; Segment permissions: Read/Execute
.text:000056D8 _text           segment para public 'CODE' use32
.text:000056D8                 assume cs:_text
.text:000056D8                 ;org 56D8h
.text:000056D8 ; COMDAT (pick any)
.text:000056D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000056D8
.text:000056D8 ; =============== S U B R O U T I N E =======================================
.text:000056D8
.text:000056D8 ; Attributes: bp-based frame
.text:000056D8
.text:000056D8 ; _DWORD __thiscall CStdInFileStream::~CStdInFileStream(CStdInFileStream *__hidden this)
.text:000056D8                 public ??1CStdInFileStream@@UAE@XZ
.text:000056D8 ??1CStdInFileStream@@UAE@XZ proc near   ; CODE XREF: CStdInFileStream::`scalar deleting destructor'(uint)+11p
.text:000056D8
.text:000056D8 var_4           = dword ptr -4
.text:000056D8
.text:000056D8                 push    ebp
.text:000056D9                 mov     ebp, esp
.text:000056DB                 push    ecx
.text:000056DC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000056E3                 mov     [ebp+var_4], ecx
.text:000056E6                 mov     eax, [ebp+var_4]
.text:000056E9                 mov     dword ptr [eax], offset ??_7CStdInFileStream@@6B@ ; const CStdInFileStream::`vftable'
.text:000056EF                 mov     esp, ebp
.text:000056F1                 pop     ebp
.text:000056F2                 retn
.text:000056F2 ??1CStdInFileStream@@UAE@XZ endp
.text:000056F2
.text:000056F2 ; ---------------------------------------------------------------------------
.text:000056F3                 align 4
.text:000056F3 _text           ends
.text:000056F3
.text:000056F4 ; ===========================================================================
.text:000056F4
.text:000056F4 ; Segment type: Pure code
.text:000056F4 ; Segment permissions: Read/Execute
.text:000056F4 _text           segment para public 'CODE' use32
.text:000056F4                 assume cs:_text
.text:000056F4                 ;org 56F4h
.text:000056F4 ; COMDAT (pick any)
.text:000056F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000056F4
.text:000056F4 ; =============== S U B R O U T I N E =======================================
.text:000056F4
.text:000056F4 ; Attributes: bp-based frame
.text:000056F4
.text:000056F4 ; bool __thiscall UString::IsEmpty(UString *__hidden this)
.text:000056F4                 public ?IsEmpty@UString@@QBE_NXZ
.text:000056F4 ?IsEmpty@UString@@QBE_NXZ proc near     ; CODE XREF: CArchiveUpdateCallback::ReportOperation(uint,uint,uint)+138p
.text:000056F4
.text:000056F4 var_4           = dword ptr -4
.text:000056F4
.text:000056F4                 push    ebp
.text:000056F5                 mov     ebp, esp
.text:000056F7                 push    ecx
.text:000056F8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000056FF                 mov     [ebp+var_4], ecx
.text:00005702                 mov     eax, [ebp+var_4]
.text:00005705                 xor     ecx, ecx
.text:00005707                 cmp     dword ptr [eax+4], 0
.text:0000570B                 setz    cl
.text:0000570E                 mov     al, cl
.text:00005710                 mov     esp, ebp
.text:00005712                 pop     ebp
.text:00005713                 retn
.text:00005713 ?IsEmpty@UString@@QBE_NXZ endp
.text:00005713
.text:00005713 _text           ends
.text:00005713
.text:00005714 ; ===========================================================================
.text:00005714
.text:00005714 ; Segment type: Pure code
.text:00005714 ; Segment permissions: Read/Execute
.text:00005714 _text           segment para public 'CODE' use32
.text:00005714                 assume cs:_text
.text:00005714                 ;org 5714h
.text:00005714 ; COMDAT (pick any)
.text:00005714                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005714
.text:00005714 ; =============== S U B R O U T I N E =======================================
.text:00005714
.text:00005714 ; Attributes: bp-based frame
.text:00005714
.text:00005714 ; const wchar_t *__thiscall UString::Ptr(UString *__hidden this)
.text:00005714                 public ?Ptr@UString@@QBEPB_WXZ
.text:00005714 ?Ptr@UString@@QBEPB_WXZ proc near       ; CODE XREF: CArchiveUpdateCallback::ReportOperation(uint,uint,uint)+15Dp
.text:00005714
.text:00005714 var_4           = dword ptr -4
.text:00005714
.text:00005714                 push    ebp
.text:00005715                 mov     ebp, esp
.text:00005717                 push    ecx
.text:00005718                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000571F                 mov     [ebp+var_4], ecx
.text:00005722                 mov     eax, [ebp+var_4]
.text:00005725                 mov     eax, [eax]
.text:00005727                 mov     esp, ebp
.text:00005729                 pop     ebp
.text:0000572A                 retn
.text:0000572A ?Ptr@UString@@QBEPB_WXZ endp
.text:0000572A
.text:0000572A ; ---------------------------------------------------------------------------
.text:0000572B                 align 4
.text:0000572B _text           ends
.text:0000572B
.text:0000572C ; ===========================================================================
.text:0000572C
.text:0000572C ; Segment type: Pure code
.text:0000572C ; Segment permissions: Read/Execute
.text:0000572C _text           segment para public 'CODE' use32
.text:0000572C                 assume cs:_text
.text:0000572C                 ;org 572Ch
.text:0000572C ; COMDAT (pick any)
.text:0000572C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000572C
.text:0000572C ; =============== S U B R O U T I N E =======================================
.text:0000572C
.text:0000572C ; Attributes: bp-based frame
.text:0000572C
.text:0000572C ; unsigned int __thiscall UString::Len(UString *__hidden this)
.text:0000572C                 public ?Len@UString@@QBEIXZ
.text:0000572C ?Len@UString@@QBEIXZ proc near          ; CODE XREF: CArchiveUpdateCallback::GetVolumeStream(uint,ISequentialOutStream * *)+74p
.text:0000572C
.text:0000572C var_4           = dword ptr -4
.text:0000572C
.text:0000572C                 push    ebp
.text:0000572D                 mov     ebp, esp
.text:0000572F                 push    ecx
.text:00005730                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005737                 mov     [ebp+var_4], ecx
.text:0000573A                 mov     eax, [ebp+var_4]
.text:0000573D                 mov     eax, [eax+4]
.text:00005740                 mov     esp, ebp
.text:00005742                 pop     ebp
.text:00005743                 retn
.text:00005743 ?Len@UString@@QBEIXZ endp
.text:00005743
.text:00005743 _text           ends
.text:00005743
.text:00005744 ; ===========================================================================
.text:00005744
.text:00005744 ; Segment type: Pure code
.text:00005744 ; Segment permissions: Read/Execute
.text:00005744 _text           segment para public 'CODE' use32
.text:00005744                 assume cs:_text
.text:00005744                 ;org 5744h
.text:00005744 ; COMDAT (pick any)
.text:00005744                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005744
.text:00005744 ; =============== S U B R O U T I N E =======================================
.text:00005744
.text:00005744 ; Attributes: bp-based frame
.text:00005744
.text:00005744 ; bool __thiscall COutFileStream::Create(COutFileStream *this, const wchar_t *, bool)
.text:00005744                 public ?Create@COutFileStream@@QAE_NPB_W_N@Z
.text:00005744 ?Create@COutFileStream@@QAE_NPB_W_N@Z proc near
.text:00005744                                         ; CODE XREF: CArchiveUpdateCallback::GetVolumeStream(uint,ISequentialOutStream * *)+158p
.text:00005744
.text:00005744 var_4           = dword ptr -4
.text:00005744 arg_0           = dword ptr  8
.text:00005744 arg_4           = byte ptr  0Ch
.text:00005744
.text:00005744                 push    ebp
.text:00005745                 mov     ebp, esp
.text:00005747                 push    ecx
.text:00005748                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000574F                 mov     [ebp+var_4], ecx
.text:00005752                 mov     eax, [ebp+var_4]
.text:00005755                 mov     dword ptr [eax+18h], 0
.text:0000575C                 mov     dword ptr [eax+1Ch], 0
.text:00005763                 movzx   ecx, [ebp+arg_4]
.text:00005767                 push    ecx             ; bool
.text:00005768                 mov     edx, [ebp+arg_0]
.text:0000576B                 push    edx             ; wchar_t *
.text:0000576C                 mov     ecx, [ebp+var_4]
.text:0000576F                 add     ecx, 8          ; this
.text:00005772                 call    ?Create@COutFile@NIO@NFile@NWindows@@QAE_NPB_W_N@Z ; NWindows::NFile::NIO::COutFile::Create(wchar_t const *,bool)
.text:00005777                 add     esp, 4
.text:0000577A                 cmp     ebp, esp
.text:0000577C                 call    __RTC_CheckEsp
.text:00005781                 mov     esp, ebp
.text:00005783                 pop     ebp
.text:00005784                 retn    8
.text:00005784 ?Create@COutFileStream@@QAE_NPB_W_N@Z endp
.text:00005784
.text:00005784 ; ---------------------------------------------------------------------------
.text:00005787                 align 4
.text:00005787 _text           ends
.text:00005787
.text:00005788 ; ===========================================================================
.text:00005788
.text:00005788 ; Segment type: Pure code
.text:00005788 ; Segment permissions: Read/Execute
.text:00005788 _text           segment para public 'CODE' use32
.text:00005788                 assume cs:_text
.text:00005788                 ;org 5788h
.text:00005788 ; COMDAT (pick any)
.text:00005788                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005788
.text:00005788 ; =============== S U B R O U T I N E =======================================
.text:00005788
.text:00005788 ; Attributes: bp-based frame
.text:00005788
.text:00005788 ; public: __thiscall COutFileStream::COutFileStream(void)
.text:00005788                 public ??0COutFileStream@@QAE@XZ
.text:00005788 ??0COutFileStream@@QAE@XZ proc near     ; CODE XREF: CArchiveUpdateCallback::GetVolumeStream(uint,ISequentialOutStream * *)+F8p
.text:00005788
.text:00005788 var_4           = dword ptr -4
.text:00005788
.text:00005788                 push    ebp
.text:00005789                 mov     ebp, esp
.text:0000578B                 push    ecx
.text:0000578C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005793                 mov     [ebp+var_4], ecx
.text:00005796                 mov     ecx, [ebp+var_4] ; this
.text:00005799                 call    ??0IOutStream@@QAE@XZ ; IOutStream::IOutStream(void)
.text:0000579E                 mov     ecx, [ebp+var_4]
.text:000057A1                 add     ecx, 4          ; this
.text:000057A4                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:000057A9                 mov     eax, [ebp+var_4]
.text:000057AC                 mov     dword ptr [eax], offset ??_7COutFileStream@@6B@ ; const COutFileStream::`vftable'
.text:000057B2                 mov     ecx, [ebp+var_4]
.text:000057B5                 add     ecx, 8          ; this
.text:000057B8                 call    ??0COutFile@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::COutFile::COutFile(void)
.text:000057BD                 mov     eax, [ebp+var_4]
.text:000057C0                 add     esp, 4
.text:000057C3                 cmp     ebp, esp
.text:000057C5                 call    __RTC_CheckEsp
.text:000057CA                 mov     esp, ebp
.text:000057CC                 pop     ebp
.text:000057CD                 retn
.text:000057CD ??0COutFileStream@@QAE@XZ endp
.text:000057CD
.text:000057CD ; ---------------------------------------------------------------------------
.text:000057CE                 align 10h
.text:000057CE _text           ends
.text:000057CE
.rdata:000057D0 ; ===========================================================================
.rdata:000057D0
.rdata:000057D0 ; Segment type: Pure data
.rdata:000057D0 ; Segment permissions: Read
.rdata:000057D0 _rdata          segment dword public 'DATA' use32
.rdata:000057D0                 assume cs:_rdata
.rdata:000057D0                 ;org 57D0h
.rdata:000057D0 ; COMDAT (pick largest)
.rdata:000057D0                 dd offset ??_R4COutFileStream@@6B@ ; const COutFileStream::`RTTI Complete Object Locator'
.rdata:000057D4                 public ??_7COutFileStream@@6B@
.rdata:000057D4 ; const COutFileStream::`vftable'
.rdata:000057D4 ??_7COutFileStream@@6B@ dd offset ?QueryInterface@COutFileStream@@UAGJABU_GUID@@PAPAX@Z
.rdata:000057D4                                         ; DATA XREF: COutFileStream::COutFileStream(void)+24o
.rdata:000057D4                                         ; COutFileStream::~COutFileStream(void)+11o
.rdata:000057D4                                         ; COutFileStream::QueryInterface(_GUID const &,void * *)
.rdata:000057D8                 dd offset ?AddRef@COutFileStream@@UAGKXZ ; COutFileStream::AddRef(void)
.rdata:000057DC                 dd offset ?Release@COutFileStream@@UAGKXZ ; COutFileStream::Release(void)
.rdata:000057E0                 dd offset ?Write@COutFileStream@@UAGJPBXIPAI@Z ; COutFileStream::Write(void const *,uint,uint *)
.rdata:000057E4                 dd offset ?Seek@COutFileStream@@UAGJ_JIPA_K@Z ; COutFileStream::Seek(__int64,uint,unsigned __int64 *)
.rdata:000057E8                 dd offset ?SetSize@COutFileStream@@UAGJ_K@Z ; COutFileStream::SetSize(unsigned __int64)
.rdata:000057EC                 dd offset ??_ECOutFileStream@@UAEPAXI@Z ; COutFileStream::`vector deleting destructor'(uint)
.rdata:000057EC _rdata          ends
.rdata:000057EC
.rdata$r:000057F0 ; ===========================================================================
.rdata$r:000057F0
.rdata$r:000057F0 ; Segment type: Pure data
.rdata$r:000057F0 ; Segment permissions: Read
.rdata$r:000057F0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000057F0                 assume cs:_rdata$r
.rdata$r:000057F0                 ;org 57F0h
.rdata$r:000057F0 ; COMDAT (pick any)
.rdata$r:000057F0                 public ??_R4COutFileStream@@6B@
.rdata$r:000057F0 ; const COutFileStream::`RTTI Complete Object Locator'
.rdata$r:000057F0 ??_R4COutFileStream@@6B@ db    0        ; DATA XREF: .rdata:000057D0o
.rdata$r:000057F1                 db    0
.rdata$r:000057F2                 db    0
.rdata$r:000057F3                 db    0
.rdata$r:000057F4                 db    0
.rdata$r:000057F5                 db    0
.rdata$r:000057F6                 db    0
.rdata$r:000057F7                 db    0
.rdata$r:000057F8                 db    0
.rdata$r:000057F9                 db    0
.rdata$r:000057FA                 db    0
.rdata$r:000057FB                 db    0
.rdata$r:000057FC                 dd offset ??_R0?AVCOutFileStream@@@8 ; COutFileStream `RTTI Type Descriptor'
.rdata$r:00005800                 dd offset ??_R3COutFileStream@@8 ; COutFileStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005800 _rdata$r        ends
.rdata$r:00005800
.data:00005804 ; ===========================================================================
.data:00005804
.data:00005804 ; Segment type: Pure data
.data:00005804 ; Segment permissions: Read/Write
.data:00005804 _data           segment dword public 'DATA' use32
.data:00005804                 assume cs:_data
.data:00005804                 ;org 5804h
.data:00005804 ; COMDAT (pick any)
.data:00005804                 public ??_R0?AVCOutFileStream@@@8
.data:00005804 ; class COutFileStream `RTTI Type Descriptor'
.data:00005804 ??_R0?AVCOutFileStream@@@8 dd offset ??_7type_info@@6B@
.data:00005804                                         ; DATA XREF: .rdata$r:000057FCo
.data:00005804                                         ; .rdata$r:COutFileStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00005804                                         ; const type_info::`vftable'
.data:00005808                 db    0
.data:00005809                 db    0
.data:0000580A                 db    0
.data:0000580B                 db    0
.data:0000580C                 db  2Eh ; .
.data:0000580D                 db  3Fh ; ?
.data:0000580E                 db  41h ; A
.data:0000580F                 db  56h ; V
.data:00005810                 db  43h ; C
.data:00005811                 db  4Fh ; O
.data:00005812                 db  75h ; u
.data:00005813                 db  74h ; t
.data:00005814                 db  46h ; F
.data:00005815                 db  69h ; i
.data:00005816                 db  6Ch ; l
.data:00005817                 db  65h ; e
.data:00005818                 db  53h ; S
.data:00005819                 db  74h ; t
.data:0000581A                 db  72h ; r
.data:0000581B                 db  65h ; e
.data:0000581C                 db  61h ; a
.data:0000581D                 db  6Dh ; m
.data:0000581E                 db  40h ; @
.data:0000581F                 db  40h ; @
.data:00005820                 db    0
.data:00005821                 align 4
.data:00005821 _data           ends
.data:00005821
.rdata$r:00005824 ; ===========================================================================
.rdata$r:00005824
.rdata$r:00005824 ; Segment type: Pure data
.rdata$r:00005824 ; Segment permissions: Read
.rdata$r:00005824 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005824                 assume cs:_rdata$r
.rdata$r:00005824                 ;org 5824h
.rdata$r:00005824 ; COMDAT (pick any)
.rdata$r:00005824                 public ??_R3COutFileStream@@8
.rdata$r:00005824 ; COutFileStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005824 ??_R3COutFileStream@@8 db    0          ; DATA XREF: .rdata$r:00005800o
.rdata$r:00005824                                         ; .rdata$r:00005864o
.rdata$r:00005825                 db    0
.rdata$r:00005826                 db    0
.rdata$r:00005827                 db    0
.rdata$r:00005828                 db    1
.rdata$r:00005829                 db    0
.rdata$r:0000582A                 db    0
.rdata$r:0000582B                 db    0
.rdata$r:0000582C                 db    5
.rdata$r:0000582D                 db    0
.rdata$r:0000582E                 db    0
.rdata$r:0000582F                 db    0
.rdata$r:00005830                 dd offset ??_R2COutFileStream@@8 ; COutFileStream::`RTTI Base Class Array'
.rdata$r:00005830 _rdata$r        ends
.rdata$r:00005830
.rdata$r:00005834 ; ===========================================================================
.rdata$r:00005834
.rdata$r:00005834 ; Segment type: Pure data
.rdata$r:00005834 ; Segment permissions: Read
.rdata$r:00005834 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005834                 assume cs:_rdata$r
.rdata$r:00005834                 ;org 5834h
.rdata$r:00005834 ; COMDAT (pick any)
.rdata$r:00005834                 public ??_R2COutFileStream@@8
.rdata$r:00005834 ; COutFileStream::`RTTI Base Class Array'
.rdata$r:00005834 ??_R2COutFileStream@@8 dd offset ??_R1A@?0A@EA@COutFileStream@@8
.rdata$r:00005834                                         ; DATA XREF: .rdata$r:00005830o
.rdata$r:00005834                                         ; COutFileStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005838                 dd offset ??_R1A@?0A@EA@IOutStream@@8 ; IOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000583C                 dd offset ??_R1A@?0A@EA@ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005840                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005844                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00005848                 db    0
.rdata$r:00005849                 align 4
.rdata$r:00005849 _rdata$r        ends
.rdata$r:00005849
.rdata$r:0000584C ; ===========================================================================
.rdata$r:0000584C
.rdata$r:0000584C ; Segment type: Pure data
.rdata$r:0000584C ; Segment permissions: Read
.rdata$r:0000584C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000584C                 assume cs:_rdata$r
.rdata$r:0000584C                 ;org 584Ch
.rdata$r:0000584C ; COMDAT (pick any)
.rdata$r:0000584C                 public ??_R1A@?0A@EA@COutFileStream@@8
.rdata$r:0000584C ; COutFileStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000584C ??_R1A@?0A@EA@COutFileStream@@8 dd offset ??_R0?AVCOutFileStream@@@8
.rdata$r:0000584C                                         ; DATA XREF: .rdata$r:COutFileStream::`RTTI Base Class Array'o
.rdata$r:0000584C                                         ; COutFileStream `RTTI Type Descriptor'
.rdata$r:00005850                 db    4
.rdata$r:00005851                 db    0
.rdata$r:00005852                 db    0
.rdata$r:00005853                 db    0
.rdata$r:00005854                 db    0
.rdata$r:00005855                 db    0
.rdata$r:00005856                 db    0
.rdata$r:00005857                 db    0
.rdata$r:00005858                 db 0FFh
.rdata$r:00005859                 db 0FFh
.rdata$r:0000585A                 db 0FFh
.rdata$r:0000585B                 db 0FFh
.rdata$r:0000585C                 db    0
.rdata$r:0000585D                 db    0
.rdata$r:0000585E                 db    0
.rdata$r:0000585F                 db    0
.rdata$r:00005860                 db  40h ; @
.rdata$r:00005861                 db    0
.rdata$r:00005862                 db    0
.rdata$r:00005863                 db    0
.rdata$r:00005864                 dd offset ??_R3COutFileStream@@8 ; COutFileStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005864 _rdata$r        ends
.rdata$r:00005864
.rdata$r:00005868 ; ===========================================================================
.rdata$r:00005868
.rdata$r:00005868 ; Segment type: Pure data
.rdata$r:00005868 ; Segment permissions: Read
.rdata$r:00005868 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005868                 assume cs:_rdata$r
.rdata$r:00005868                 ;org 5868h
.rdata$r:00005868 ; COMDAT (pick any)
.rdata$r:00005868                 public ??_R1A@?0A@EA@IOutStream@@8
.rdata$r:00005868 ; IOutStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00005868 ??_R1A@?0A@EA@IOutStream@@8 dd offset ??_R0?AUIOutStream@@@8
.rdata$r:00005868                                         ; DATA XREF: .rdata$r:00005838o
.rdata$r:00005868                                         ; .rdata$r:IOutStream::`RTTI Base Class Array'o
.rdata$r:00005868                                         ; IOutStream `RTTI Type Descriptor'
.rdata$r:0000586C                 db    2
.rdata$r:0000586D                 db    0
.rdata$r:0000586E                 db    0
.rdata$r:0000586F                 db    0
.rdata$r:00005870                 db    0
.rdata$r:00005871                 db    0
.rdata$r:00005872                 db    0
.rdata$r:00005873                 db    0
.rdata$r:00005874                 db 0FFh
.rdata$r:00005875                 db 0FFh
.rdata$r:00005876                 db 0FFh
.rdata$r:00005877                 db 0FFh
.rdata$r:00005878                 db    0
.rdata$r:00005879                 db    0
.rdata$r:0000587A                 db    0
.rdata$r:0000587B                 db    0
.rdata$r:0000587C                 db  40h ; @
.rdata$r:0000587D                 db    0
.rdata$r:0000587E                 db    0
.rdata$r:0000587F                 db    0
.rdata$r:00005880                 dd offset ??_R3IOutStream@@8 ; IOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005880 _rdata$r        ends
.rdata$r:00005880
.data:00005884 ; ===========================================================================
.data:00005884
.data:00005884 ; Segment type: Pure data
.data:00005884 ; Segment permissions: Read/Write
.data:00005884 _data           segment dword public 'DATA' use32
.data:00005884                 assume cs:_data
.data:00005884                 ;org 5884h
.data:00005884 ; COMDAT (pick any)
.data:00005884                 public ??_R0?AUIOutStream@@@8
.data:00005884 ; struct IOutStream `RTTI Type Descriptor'
.data:00005884 ??_R0?AUIOutStream@@@8 dd offset ??_7type_info@@6B@
.data:00005884                                         ; DATA XREF: .rdata$r:IOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00005884                                         ; .rdata$r:00005B44o
.data:00005884                                         ; const type_info::`vftable'
.data:00005888                 db    0
.data:00005889                 db    0
.data:0000588A                 db    0
.data:0000588B                 db    0
.data:0000588C                 db  2Eh ; .
.data:0000588D                 db  3Fh ; ?
.data:0000588E                 db  41h ; A
.data:0000588F                 db  55h ; U
.data:00005890                 db  49h ; I
.data:00005891                 db  4Fh ; O
.data:00005892                 db  75h ; u
.data:00005893                 db  74h ; t
.data:00005894                 db  53h ; S
.data:00005895                 db  74h ; t
.data:00005896                 db  72h ; r
.data:00005897                 db  65h ; e
.data:00005898                 db  61h ; a
.data:00005899                 db  6Dh ; m
.data:0000589A                 db  40h ; @
.data:0000589B                 db  40h ; @
.data:0000589C                 db    0
.data:0000589D                 align 10h
.data:0000589D _data           ends
.data:0000589D
.rdata$r:000058A0 ; ===========================================================================
.rdata$r:000058A0
.rdata$r:000058A0 ; Segment type: Pure data
.rdata$r:000058A0 ; Segment permissions: Read
.rdata$r:000058A0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000058A0                 assume cs:_rdata$r
.rdata$r:000058A0                 ;org 58A0h
.rdata$r:000058A0 ; COMDAT (pick any)
.rdata$r:000058A0                 public ??_R3IOutStream@@8
.rdata$r:000058A0 ; IOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000058A0 ??_R3IOutStream@@8 db    0              ; DATA XREF: .rdata$r:00005880o
.rdata$r:000058A0                                         ; .rdata$r:00005B48o
.rdata$r:000058A1                 db    0
.rdata$r:000058A2                 db    0
.rdata$r:000058A3                 db    0
.rdata$r:000058A4                 db    0
.rdata$r:000058A5                 db    0
.rdata$r:000058A6                 db    0
.rdata$r:000058A7                 db    0
.rdata$r:000058A8                 db    3
.rdata$r:000058A9                 db    0
.rdata$r:000058AA                 db    0
.rdata$r:000058AB                 db    0
.rdata$r:000058AC                 dd offset ??_R2IOutStream@@8 ; IOutStream::`RTTI Base Class Array'
.rdata$r:000058AC _rdata$r        ends
.rdata$r:000058AC
.rdata$r:000058B0 ; ===========================================================================
.rdata$r:000058B0
.rdata$r:000058B0 ; Segment type: Pure data
.rdata$r:000058B0 ; Segment permissions: Read
.rdata$r:000058B0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000058B0                 assume cs:_rdata$r
.rdata$r:000058B0                 ;org 58B0h
.rdata$r:000058B0 ; COMDAT (pick any)
.rdata$r:000058B0                 public ??_R2IOutStream@@8
.rdata$r:000058B0 ; IOutStream::`RTTI Base Class Array'
.rdata$r:000058B0 ??_R2IOutStream@@8 dd offset ??_R1A@?0A@EA@IOutStream@@8
.rdata$r:000058B0                                         ; DATA XREF: .rdata$r:000058ACo
.rdata$r:000058B0                                         ; IOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000058B4                 dd offset ??_R1A@?0A@EA@ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000058B8                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000058BC                 db    0
.rdata$r:000058BD                 align 10h
.rdata$r:000058BD _rdata$r        ends
.rdata$r:000058BD
.rdata$r:000058C0 ; ===========================================================================
.rdata$r:000058C0
.rdata$r:000058C0 ; Segment type: Pure data
.rdata$r:000058C0 ; Segment permissions: Read
.rdata$r:000058C0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000058C0                 assume cs:_rdata$r
.rdata$r:000058C0                 ;org 58C0h
.rdata$r:000058C0 ; COMDAT (pick any)
.rdata$r:000058C0                 public ??_R1A@?0A@EA@ISequentialOutStream@@8
.rdata$r:000058C0 ; ISequentialOutStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000058C0 ??_R1A@?0A@EA@ISequentialOutStream@@8 dd offset ??_R0?AUISequentialOutStream@@@8
.rdata$r:000058C0                                         ; DATA XREF: .rdata$r:0000583Co
.rdata$r:000058C0                                         ; .rdata$r:000058B4o ...
.rdata$r:000058C0                                         ; ISequentialOutStream `RTTI Type Descriptor'
.rdata$r:000058C4                 db    1
.rdata$r:000058C5                 db    0
.rdata$r:000058C6                 db    0
.rdata$r:000058C7                 db    0
.rdata$r:000058C8                 db    0
.rdata$r:000058C9                 db    0
.rdata$r:000058CA                 db    0
.rdata$r:000058CB                 db    0
.rdata$r:000058CC                 db 0FFh
.rdata$r:000058CD                 db 0FFh
.rdata$r:000058CE                 db 0FFh
.rdata$r:000058CF                 db 0FFh
.rdata$r:000058D0                 db    0
.rdata$r:000058D1                 db    0
.rdata$r:000058D2                 db    0
.rdata$r:000058D3                 db    0
.rdata$r:000058D4                 db  40h ; @
.rdata$r:000058D5                 db    0
.rdata$r:000058D6                 db    0
.rdata$r:000058D7                 db    0
.rdata$r:000058D8                 dd offset ??_R3ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000058D8 _rdata$r        ends
.rdata$r:000058D8
.data:000058DC ; ===========================================================================
.data:000058DC
.data:000058DC ; Segment type: Pure data
.data:000058DC ; Segment permissions: Read/Write
.data:000058DC _data           segment dword public 'DATA' use32
.data:000058DC                 assume cs:_data
.data:000058DC                 ;org 58DCh
.data:000058DC ; COMDAT (pick any)
.data:000058DC                 public ??_R0?AUISequentialOutStream@@@8
.data:000058DC ; struct ISequentialOutStream `RTTI Type Descriptor'
.data:000058DC ??_R0?AUISequentialOutStream@@@8 dd offset ??_7type_info@@6B@
.data:000058DC                                         ; DATA XREF: .rdata$r:ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000058DC                                         ; .rdata$r:00005B9Co
.data:000058DC                                         ; const type_info::`vftable'
.data:000058E0                 db    0
.data:000058E1                 db    0
.data:000058E2                 db    0
.data:000058E3                 db    0
.data:000058E4                 db  2Eh ; .
.data:000058E5                 db  3Fh ; ?
.data:000058E6                 db  41h ; A
.data:000058E7                 db  55h ; U
.data:000058E8                 db  49h ; I
.data:000058E9                 db  53h ; S
.data:000058EA                 db  65h ; e
.data:000058EB                 db  71h ; q
.data:000058EC                 db  75h ; u
.data:000058ED                 db  65h ; e
.data:000058EE                 db  6Eh ; n
.data:000058EF                 db  74h ; t
.data:000058F0                 db  69h ; i
.data:000058F1                 db  61h ; a
.data:000058F2                 db  6Ch ; l
.data:000058F3                 db  4Fh ; O
.data:000058F4                 db  75h ; u
.data:000058F5                 db  74h ; t
.data:000058F6                 db  53h ; S
.data:000058F7                 db  74h ; t
.data:000058F8                 db  72h ; r
.data:000058F9                 db  65h ; e
.data:000058FA                 db  61h ; a
.data:000058FB                 db  6Dh ; m
.data:000058FC                 db  40h ; @
.data:000058FD                 db  40h ; @
.data:000058FE                 db    0
.data:000058FF                 align 10h
.data:000058FF _data           ends
.data:000058FF
.rdata$r:00005900 ; ===========================================================================
.rdata$r:00005900
.rdata$r:00005900 ; Segment type: Pure data
.rdata$r:00005900 ; Segment permissions: Read
.rdata$r:00005900 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005900                 assume cs:_rdata$r
.rdata$r:00005900                 ;org 5900h
.rdata$r:00005900 ; COMDAT (pick any)
.rdata$r:00005900                 public ??_R3ISequentialOutStream@@8
.rdata$r:00005900 ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005900 ??_R3ISequentialOutStream@@8 db    0    ; DATA XREF: .rdata$r:000058D8o
.rdata$r:00005900                                         ; .rdata$r:00005BA0o
.rdata$r:00005901                 db    0
.rdata$r:00005902                 db    0
.rdata$r:00005903                 db    0
.rdata$r:00005904                 db    0
.rdata$r:00005905                 db    0
.rdata$r:00005906                 db    0
.rdata$r:00005907                 db    0
.rdata$r:00005908                 db    2
.rdata$r:00005909                 db    0
.rdata$r:0000590A                 db    0
.rdata$r:0000590B                 db    0
.rdata$r:0000590C                 dd offset ??_R2ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Array'
.rdata$r:0000590C _rdata$r        ends
.rdata$r:0000590C
.rdata$r:00005910 ; ===========================================================================
.rdata$r:00005910
.rdata$r:00005910 ; Segment type: Pure data
.rdata$r:00005910 ; Segment permissions: Read
.rdata$r:00005910 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005910                 assume cs:_rdata$r
.rdata$r:00005910                 ;org 5910h
.rdata$r:00005910 ; COMDAT (pick any)
.rdata$r:00005910                 public ??_R2ISequentialOutStream@@8
.rdata$r:00005910 ; ISequentialOutStream::`RTTI Base Class Array'
.rdata$r:00005910 ??_R2ISequentialOutStream@@8 dd offset ??_R1A@?0A@EA@ISequentialOutStream@@8
.rdata$r:00005910                                         ; DATA XREF: .rdata$r:0000590Co
.rdata$r:00005910                                         ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005914                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005918                 db    0
.rdata$r:00005919                 align 4
.rdata$r:00005919 _rdata$r        ends
.rdata$r:00005919
.text:0000591C ; ===========================================================================
.text:0000591C
.text:0000591C ; Segment type: Pure code
.text:0000591C ; Segment permissions: Read/Execute
.text:0000591C _text           segment para public 'CODE' use32
.text:0000591C                 assume cs:_text
.text:0000591C                 ;org 591Ch
.text:0000591C ; COMDAT (pick any)
.text:0000591C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000591C
.text:0000591C ; =============== S U B R O U T I N E =======================================
.text:0000591C
.text:0000591C ; Attributes: bp-based frame
.text:0000591C
.text:0000591C ; __int32 __stdcall COutFileStream::QueryInterface(COutFileStream *this, const struct _GUID *Buf1, void **)
.text:0000591C                 public ?QueryInterface@COutFileStream@@UAGJABU_GUID@@PAPAX@Z
.text:0000591C ?QueryInterface@COutFileStream@@UAGJABU_GUID@@PAPAX@Z proc near
.text:0000591C                                         ; DATA XREF: .rdata:const COutFileStream::`vftable'o
.text:0000591C
.text:0000591C this            = dword ptr  8
.text:0000591C Buf1            = dword ptr  0Ch
.text:0000591C arg_8           = dword ptr  10h
.text:0000591C
.text:0000591C                 push    ebp
.text:0000591D                 mov     ebp, esp
.text:0000591F                 mov     eax, [ebp+arg_8]
.text:00005922                 mov     dword ptr [eax], 0
.text:00005928                 push    offset _IID_IUnknown ; Buf2
.text:0000592D                 mov     ecx, [ebp+Buf1]
.text:00005930                 push    ecx             ; Buf1
.text:00005931                 call    ___@8           ; __(x,x)
.text:00005936                 test    eax, eax
.text:00005938                 jz      short loc_5944
.text:0000593A                 mov     edx, [ebp+arg_8]
.text:0000593D                 mov     eax, [ebp+this]
.text:00005940                 mov     [edx], eax
.text:00005942                 jmp     short loc_5967
.text:00005944 ; ---------------------------------------------------------------------------
.text:00005944
.text:00005944 loc_5944:                               ; CODE XREF: COutFileStream::QueryInterface(_GUID const &,void * *)+1Cj
.text:00005944                 push    offset _IID_IOutStream ; Buf2
.text:00005949                 mov     ecx, [ebp+Buf1]
.text:0000594C                 push    ecx             ; Buf1
.text:0000594D                 call    ___@8           ; __(x,x)
.text:00005952                 test    eax, eax
.text:00005954                 jz      short loc_5960
.text:00005956                 mov     edx, [ebp+arg_8]
.text:00005959                 mov     eax, [ebp+this]
.text:0000595C                 mov     [edx], eax
.text:0000595E                 jmp     short loc_5967
.text:00005960 ; ---------------------------------------------------------------------------
.text:00005960
.text:00005960 loc_5960:                               ; CODE XREF: COutFileStream::QueryInterface(_GUID const &,void * *)+38j
.text:00005960                 mov     eax, 80004002h
.text:00005965                 jmp     short loc_5978
.text:00005967 ; ---------------------------------------------------------------------------
.text:00005967
.text:00005967 loc_5967:                               ; CODE XREF: COutFileStream::QueryInterface(_GUID const &,void * *)+26j
.text:00005967                                         ; COutFileStream::QueryInterface(_GUID const &,void * *)+42j
.text:00005967                 mov     ecx, [ebp+this]
.text:0000596A                 mov     edx, [ecx+4]
.text:0000596D                 add     edx, 1
.text:00005970                 mov     eax, [ebp+this]
.text:00005973                 mov     [eax+4], edx
.text:00005976                 xor     eax, eax
.text:00005978
.text:00005978 loc_5978:                               ; CODE XREF: COutFileStream::QueryInterface(_GUID const &,void * *)+49j
.text:00005978                 cmp     ebp, esp
.text:0000597A                 call    __RTC_CheckEsp
.text:0000597F                 pop     ebp
.text:00005980                 retn    0Ch
.text:00005980 ?QueryInterface@COutFileStream@@UAGJABU_GUID@@PAPAX@Z endp
.text:00005980
.text:00005980 ; ---------------------------------------------------------------------------
.text:00005983                 align 4
.text:00005983 _text           ends
.text:00005983
.text:00005984 ; ===========================================================================
.text:00005984
.text:00005984 ; Segment type: Pure code
.text:00005984 ; Segment permissions: Read/Execute
.text:00005984 _text           segment para public 'CODE' use32
.text:00005984                 assume cs:_text
.text:00005984                 ;org 5984h
.text:00005984 ; COMDAT (pick any)
.text:00005984                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005984
.text:00005984 ; =============== S U B R O U T I N E =======================================
.text:00005984
.text:00005984 ; Attributes: bp-based frame
.text:00005984
.text:00005984 ; unsigned __int32 __stdcall COutFileStream::AddRef(COutFileStream *this)
.text:00005984                 public ?AddRef@COutFileStream@@UAGKXZ
.text:00005984 ?AddRef@COutFileStream@@UAGKXZ proc near ; DATA XREF: .rdata:000057D8o
.text:00005984
.text:00005984 var_4           = dword ptr -4
.text:00005984 this            = dword ptr  8
.text:00005984
.text:00005984                 push    ebp
.text:00005985                 mov     ebp, esp
.text:00005987                 push    ecx
.text:00005988                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000598F                 mov     eax, [ebp+this]
.text:00005992                 mov     ecx, [eax+4]
.text:00005995                 add     ecx, 1
.text:00005998                 mov     [ebp+var_4], ecx
.text:0000599B                 mov     edx, [ebp+this]
.text:0000599E                 mov     eax, [ebp+var_4]
.text:000059A1                 mov     [edx+4], eax
.text:000059A4                 mov     eax, [ebp+var_4]
.text:000059A7                 mov     esp, ebp
.text:000059A9                 pop     ebp
.text:000059AA                 retn    4
.text:000059AA ?AddRef@COutFileStream@@UAGKXZ endp
.text:000059AA
.text:000059AA ; ---------------------------------------------------------------------------
.text:000059AD                 align 10h
.text:000059AD _text           ends
.text:000059AD
.text:000059B0 ; ===========================================================================
.text:000059B0
.text:000059B0 ; Segment type: Pure code
.text:000059B0 ; Segment permissions: Read/Execute
.text:000059B0 _text           segment para public 'CODE' use32
.text:000059B0                 assume cs:_text
.text:000059B0                 ;org 59B0h
.text:000059B0 ; COMDAT (pick any)
.text:000059B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000059B0
.text:000059B0 ; =============== S U B R O U T I N E =======================================
.text:000059B0
.text:000059B0 ; Attributes: bp-based frame
.text:000059B0
.text:000059B0 ; unsigned __int32 __stdcall COutFileStream::Release(COutFileStream *this)
.text:000059B0                 public ?Release@COutFileStream@@UAGKXZ
.text:000059B0 ?Release@COutFileStream@@UAGKXZ proc near ; DATA XREF: .rdata:000057DCo
.text:000059B0
.text:000059B0 var_10          = dword ptr -10h
.text:000059B0 var_C           = dword ptr -0Ch
.text:000059B0 var_8           = dword ptr -8
.text:000059B0 var_4           = dword ptr -4
.text:000059B0 this            = dword ptr  8
.text:000059B0
.text:000059B0                 push    ebp
.text:000059B1                 mov     ebp, esp
.text:000059B3                 sub     esp, 10h
.text:000059B6                 push    esi
.text:000059B7                 mov     eax, 0CCCCCCCCh
.text:000059BC                 mov     [ebp+var_10], eax
.text:000059BF                 mov     [ebp+var_C], eax
.text:000059C2                 mov     [ebp+var_8], eax
.text:000059C5                 mov     [ebp+var_4], eax
.text:000059C8                 mov     eax, [ebp+this]
.text:000059CB                 mov     ecx, [eax+4]
.text:000059CE                 sub     ecx, 1
.text:000059D1                 mov     [ebp+var_C], ecx
.text:000059D4                 mov     edx, [ebp+this]
.text:000059D7                 mov     eax, [ebp+var_C]
.text:000059DA                 mov     [edx+4], eax
.text:000059DD                 cmp     [ebp+var_C], 0
.text:000059E1                 jz      short loc_59EB
.text:000059E3                 mov     ecx, [ebp+this]
.text:000059E6                 mov     eax, [ecx+4]
.text:000059E9                 jmp     short loc_5A23
.text:000059EB ; ---------------------------------------------------------------------------
.text:000059EB
.text:000059EB loc_59EB:                               ; CODE XREF: COutFileStream::Release(void)+31j
.text:000059EB                 mov     edx, [ebp+this]
.text:000059EE                 mov     [ebp+var_8], edx
.text:000059F1                 mov     eax, [ebp+var_8]
.text:000059F4                 mov     [ebp+var_4], eax
.text:000059F7                 cmp     [ebp+var_4], 0
.text:000059FB                 jz      short loc_5A1A
.text:000059FD                 mov     esi, esp
.text:000059FF                 push    1
.text:00005A01                 mov     ecx, [ebp+var_4]
.text:00005A04                 mov     edx, [ecx]
.text:00005A06                 mov     ecx, [ebp+var_4]
.text:00005A09                 mov     eax, [edx+18h]
.text:00005A0C                 call    eax
.text:00005A0E                 cmp     esi, esp
.text:00005A10                 call    __RTC_CheckEsp
.text:00005A15                 mov     [ebp+var_10], eax
.text:00005A18                 jmp     short loc_5A21
.text:00005A1A ; ---------------------------------------------------------------------------
.text:00005A1A
.text:00005A1A loc_5A1A:                               ; CODE XREF: COutFileStream::Release(void)+4Bj
.text:00005A1A                 mov     [ebp+var_10], 0
.text:00005A21
.text:00005A21 loc_5A21:                               ; CODE XREF: COutFileStream::Release(void)+68j
.text:00005A21                 xor     eax, eax
.text:00005A23
.text:00005A23 loc_5A23:                               ; CODE XREF: COutFileStream::Release(void)+39j
.text:00005A23                 pop     esi
.text:00005A24                 add     esp, 10h
.text:00005A27                 cmp     ebp, esp
.text:00005A29                 call    __RTC_CheckEsp
.text:00005A2E                 mov     esp, ebp
.text:00005A30                 pop     ebp
.text:00005A31                 retn    4
.text:00005A31 ?Release@COutFileStream@@UAGKXZ endp
.text:00005A31
.text:00005A31 _text           ends
.text:00005A31
.text:00005A34 ; ===========================================================================
.text:00005A34
.text:00005A34 ; Segment type: Pure code
.text:00005A34 ; Segment permissions: Read/Execute
.text:00005A34 _text           segment para public 'CODE' use32
.text:00005A34                 assume cs:_text
.text:00005A34                 ;org 5A34h
.text:00005A34 ; COMDAT (pick any)
.text:00005A34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005A34
.text:00005A34 ; =============== S U B R O U T I N E =======================================
.text:00005A34
.text:00005A34 ; Attributes: bp-based frame
.text:00005A34
.text:00005A34 ; public: virtual void * __thiscall COutFileStream::`scalar deleting destructor'(unsigned int)
.text:00005A34                 public ??_GCOutFileStream@@UAEPAXI@Z
.text:00005A34 ??_GCOutFileStream@@UAEPAXI@Z proc near
.text:00005A34
.text:00005A34 var_4           = dword ptr -4
.text:00005A34 arg_0           = dword ptr  8
.text:00005A34
.text:00005A34                 push    ebp
.text:00005A35                 mov     ebp, esp
.text:00005A37                 push    ecx
.text:00005A38                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005A3F                 mov     [ebp+var_4], ecx
.text:00005A42                 mov     ecx, [ebp+var_4] ; this
.text:00005A45                 call    ??1COutFileStream@@UAE@XZ ; COutFileStream::~COutFileStream(void)
.text:00005A4A                 mov     eax, [ebp+arg_0]
.text:00005A4D                 and     eax, 1
.text:00005A50                 jz      short loc_5A5E
.text:00005A52                 mov     ecx, [ebp+var_4]
.text:00005A55                 push    ecx             ; void *
.text:00005A56                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00005A5B                 add     esp, 4
.text:00005A5E
.text:00005A5E loc_5A5E:                               ; CODE XREF: COutFileStream::`scalar deleting destructor'(uint)+1Cj
.text:00005A5E                 mov     eax, [ebp+var_4]
.text:00005A61                 add     esp, 4
.text:00005A64                 cmp     ebp, esp
.text:00005A66                 call    __RTC_CheckEsp
.text:00005A6B                 mov     esp, ebp
.text:00005A6D                 pop     ebp
.text:00005A6E                 retn    4
.text:00005A6E ??_GCOutFileStream@@UAEPAXI@Z endp
.text:00005A6E
.text:00005A6E ; ---------------------------------------------------------------------------
.text:00005A71                 align 4
.text:00005A71 _text           ends
.text:00005A71
.text:00005A74 ; ===========================================================================
.text:00005A74
.text:00005A74 ; Segment type: Pure code
.text:00005A74 ; Segment permissions: Read/Execute
.text:00005A74 _text           segment para public 'CODE' use32
.text:00005A74                 assume cs:_text
.text:00005A74                 ;org 5A74h
.text:00005A74 ; COMDAT (pick any)
.text:00005A74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005A74
.text:00005A74 ; =============== S U B R O U T I N E =======================================
.text:00005A74
.text:00005A74 ; Attributes: bp-based frame
.text:00005A74
.text:00005A74 ; _DWORD __thiscall COutFileStream::~COutFileStream(COutFileStream *__hidden this)
.text:00005A74                 public ??1COutFileStream@@UAE@XZ
.text:00005A74 ??1COutFileStream@@UAE@XZ proc near     ; CODE XREF: COutFileStream::`scalar deleting destructor'(uint)+11p
.text:00005A74
.text:00005A74 var_4           = dword ptr -4
.text:00005A74
.text:00005A74                 push    ebp
.text:00005A75                 mov     ebp, esp
.text:00005A77                 push    ecx
.text:00005A78                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005A7F                 mov     [ebp+var_4], ecx
.text:00005A82                 mov     eax, [ebp+var_4]
.text:00005A85                 mov     dword ptr [eax], offset ??_7COutFileStream@@6B@ ; const COutFileStream::`vftable'
.text:00005A8B                 mov     ecx, [ebp+var_4]
.text:00005A8E                 add     ecx, 8          ; this
.text:00005A91                 call    ??1COutFile@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::COutFile::~COutFile(void)
.text:00005A96                 add     esp, 4
.text:00005A99                 cmp     ebp, esp
.text:00005A9B                 call    __RTC_CheckEsp
.text:00005AA0                 mov     esp, ebp
.text:00005AA2                 pop     ebp
.text:00005AA3                 retn
.text:00005AA3 ??1COutFileStream@@UAE@XZ endp
.text:00005AA3
.text:00005AA3 _text           ends
.text:00005AA3
.text:00005AA4 ; ===========================================================================
.text:00005AA4
.text:00005AA4 ; Segment type: Pure code
.text:00005AA4 ; Segment permissions: Read/Execute
.text:00005AA4 _text           segment para public 'CODE' use32
.text:00005AA4                 assume cs:_text
.text:00005AA4                 ;org 5AA4h
.text:00005AA4 ; COMDAT (pick any)
.text:00005AA4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005AA4
.text:00005AA4 ; =============== S U B R O U T I N E =======================================
.text:00005AA4
.text:00005AA4 ; Attributes: bp-based frame
.text:00005AA4
.text:00005AA4 ; _DWORD __thiscall NWindows::NFile::NIO::COutFile::~COutFile(NWindows::NFile::NIO::COutFile *__hidden this)
.text:00005AA4                 public ??1COutFile@NIO@NFile@NWindows@@QAE@XZ
.text:00005AA4 ??1COutFile@NIO@NFile@NWindows@@QAE@XZ proc near
.text:00005AA4                                         ; CODE XREF: COutFileStream::~COutFileStream(void)+1Dp
.text:00005AA4
.text:00005AA4 var_4           = dword ptr -4
.text:00005AA4
.text:00005AA4                 push    ebp
.text:00005AA5                 mov     ebp, esp
.text:00005AA7                 push    ecx
.text:00005AA8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005AAF                 mov     [ebp+var_4], ecx
.text:00005AB2                 mov     ecx, [ebp+var_4] ; this
.text:00005AB5                 call    ??1CFileBase@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::CFileBase::~CFileBase(void)
.text:00005ABA                 add     esp, 4
.text:00005ABD                 cmp     ebp, esp
.text:00005ABF                 call    __RTC_CheckEsp
.text:00005AC4                 mov     esp, ebp
.text:00005AC6                 pop     ebp
.text:00005AC7                 retn
.text:00005AC7 ??1COutFile@NIO@NFile@NWindows@@QAE@XZ endp
.text:00005AC7
.text:00005AC7 _text           ends
.text:00005AC7
.text:00005AC8 ; ===========================================================================
.text:00005AC8
.text:00005AC8 ; Segment type: Pure code
.text:00005AC8 ; Segment permissions: Read/Execute
.text:00005AC8 _text           segment para public 'CODE' use32
.text:00005AC8                 assume cs:_text
.text:00005AC8                 ;org 5AC8h
.text:00005AC8 ; COMDAT (pick any)
.text:00005AC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005AC8
.text:00005AC8 ; =============== S U B R O U T I N E =======================================
.text:00005AC8
.text:00005AC8 ; Attributes: bp-based frame
.text:00005AC8
.text:00005AC8 ; _DWORD __thiscall NWindows::NFile::NIO::CFileBase::~CFileBase(NWindows::NFile::NIO::CFileBase *__hidden this)
.text:00005AC8                 public ??1CFileBase@NIO@NFile@NWindows@@QAE@XZ
.text:00005AC8 ??1CFileBase@NIO@NFile@NWindows@@QAE@XZ proc near
.text:00005AC8                                         ; CODE XREF: NWindows::NFile::NIO::COutFile::~COutFile(void)+11p
.text:00005AC8
.text:00005AC8 var_4           = dword ptr -4
.text:00005AC8
.text:00005AC8                 push    ebp
.text:00005AC9                 mov     ebp, esp
.text:00005ACB                 push    ecx
.text:00005ACC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005AD3                 mov     [ebp+var_4], ecx
.text:00005AD6                 mov     ecx, [ebp+var_4] ; this
.text:00005AD9                 call    ?Close@CFileBase@NIO@NFile@NWindows@@QAE_NXZ ; NWindows::NFile::NIO::CFileBase::Close(void)
.text:00005ADE                 add     esp, 4
.text:00005AE1                 cmp     ebp, esp
.text:00005AE3                 call    __RTC_CheckEsp
.text:00005AE8                 mov     esp, ebp
.text:00005AEA                 pop     ebp
.text:00005AEB                 retn
.text:00005AEB ??1CFileBase@NIO@NFile@NWindows@@QAE@XZ endp
.text:00005AEB
.text:00005AEB _text           ends
.text:00005AEB
.text:00005AEC ; ===========================================================================
.text:00005AEC
.text:00005AEC ; Segment type: Pure code
.text:00005AEC ; Segment permissions: Read/Execute
.text:00005AEC _text           segment para public 'CODE' use32
.text:00005AEC                 assume cs:_text
.text:00005AEC                 ;org 5AECh
.text:00005AEC ; COMDAT (pick any)
.text:00005AEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005AEC
.text:00005AEC ; =============== S U B R O U T I N E =======================================
.text:00005AEC
.text:00005AEC ; Attributes: bp-based frame
.text:00005AEC
.text:00005AEC ; _DWORD __thiscall IOutStream::IOutStream(IOutStream *__hidden this)
.text:00005AEC                 public ??0IOutStream@@QAE@XZ
.text:00005AEC ??0IOutStream@@QAE@XZ proc near         ; CODE XREF: COutFileStream::COutFileStream(void)+11p
.text:00005AEC
.text:00005AEC var_4           = dword ptr -4
.text:00005AEC
.text:00005AEC                 push    ebp
.text:00005AED                 mov     ebp, esp
.text:00005AEF                 push    ecx
.text:00005AF0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005AF7                 mov     [ebp+var_4], ecx
.text:00005AFA                 mov     ecx, [ebp+var_4] ; this
.text:00005AFD                 call    ??0ISequentialOutStream@@QAE@XZ ; ISequentialOutStream::ISequentialOutStream(void)
.text:00005B02                 mov     eax, [ebp+var_4]
.text:00005B05                 mov     dword ptr [eax], offset ??_7IOutStream@@6B@ ; const IOutStream::`vftable'
.text:00005B0B                 mov     eax, [ebp+var_4]
.text:00005B0E                 add     esp, 4
.text:00005B11                 cmp     ebp, esp
.text:00005B13                 call    __RTC_CheckEsp
.text:00005B18                 mov     esp, ebp
.text:00005B1A                 pop     ebp
.text:00005B1B                 retn
.text:00005B1B ??0IOutStream@@QAE@XZ endp
.text:00005B1B
.text:00005B1B _text           ends
.text:00005B1B
.rdata:00005B1C ; ===========================================================================
.rdata:00005B1C
.rdata:00005B1C ; Segment type: Pure data
.rdata:00005B1C ; Segment permissions: Read
.rdata:00005B1C _rdata          segment dword public 'DATA' use32
.rdata:00005B1C                 assume cs:_rdata
.rdata:00005B1C                 ;org 5B1Ch
.rdata:00005B1C ; COMDAT (pick largest)
.rdata:00005B1C                 dd offset ??_R4IOutStream@@6B@ ; const IOutStream::`RTTI Complete Object Locator'
.rdata:00005B20                 public ??_7IOutStream@@6B@
.rdata:00005B20 ; const IOutStream::`vftable'
.rdata:00005B20 ??_7IOutStream@@6B@ dd offset __purecall
.rdata:00005B20                                         ; DATA XREF: IOutStream::IOutStream(void)+19o
.rdata:00005B24                 dd offset __purecall
.rdata:00005B28                 dd offset __purecall
.rdata:00005B2C                 dd offset __purecall
.rdata:00005B30                 dd offset __purecall
.rdata:00005B34                 dd offset __purecall
.rdata:00005B34 _rdata          ends
.rdata:00005B34
.rdata$r:00005B38 ; ===========================================================================
.rdata$r:00005B38
.rdata$r:00005B38 ; Segment type: Pure data
.rdata$r:00005B38 ; Segment permissions: Read
.rdata$r:00005B38 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005B38                 assume cs:_rdata$r
.rdata$r:00005B38                 ;org 5B38h
.rdata$r:00005B38 ; COMDAT (pick any)
.rdata$r:00005B38                 public ??_R4IOutStream@@6B@
.rdata$r:00005B38 ; const IOutStream::`RTTI Complete Object Locator'
.rdata$r:00005B38 ??_R4IOutStream@@6B@ db    0            ; DATA XREF: .rdata:00005B1Co
.rdata$r:00005B39                 db    0
.rdata$r:00005B3A                 db    0
.rdata$r:00005B3B                 db    0
.rdata$r:00005B3C                 db    0
.rdata$r:00005B3D                 db    0
.rdata$r:00005B3E                 db    0
.rdata$r:00005B3F                 db    0
.rdata$r:00005B40                 db    0
.rdata$r:00005B41                 db    0
.rdata$r:00005B42                 db    0
.rdata$r:00005B43                 db    0
.rdata$r:00005B44                 dd offset ??_R0?AUIOutStream@@@8 ; IOutStream `RTTI Type Descriptor'
.rdata$r:00005B48                 dd offset ??_R3IOutStream@@8 ; IOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005B48 _rdata$r        ends
.rdata$r:00005B48
.text:00005B4C ; ===========================================================================
.text:00005B4C
.text:00005B4C ; Segment type: Pure code
.text:00005B4C ; Segment permissions: Read/Execute
.text:00005B4C _text           segment para public 'CODE' use32
.text:00005B4C                 assume cs:_text
.text:00005B4C                 ;org 5B4Ch
.text:00005B4C ; COMDAT (pick any)
.text:00005B4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005B4C
.text:00005B4C ; =============== S U B R O U T I N E =======================================
.text:00005B4C
.text:00005B4C ; Attributes: bp-based frame
.text:00005B4C
.text:00005B4C ; _DWORD __thiscall ISequentialOutStream::ISequentialOutStream(ISequentialOutStream *__hidden this)
.text:00005B4C                 public ??0ISequentialOutStream@@QAE@XZ
.text:00005B4C ??0ISequentialOutStream@@QAE@XZ proc near
.text:00005B4C                                         ; CODE XREF: IOutStream::IOutStream(void)+11p
.text:00005B4C
.text:00005B4C var_4           = dword ptr -4
.text:00005B4C
.text:00005B4C                 push    ebp
.text:00005B4D                 mov     ebp, esp
.text:00005B4F                 push    ecx
.text:00005B50                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005B57                 mov     [ebp+var_4], ecx
.text:00005B5A                 mov     ecx, [ebp+var_4]
.text:00005B5D                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00005B62                 mov     eax, [ebp+var_4]
.text:00005B65                 mov     dword ptr [eax], offset ??_7ISequentialOutStream@@6B@ ; const ISequentialOutStream::`vftable'
.text:00005B6B                 mov     eax, [ebp+var_4]
.text:00005B6E                 add     esp, 4
.text:00005B71                 cmp     ebp, esp
.text:00005B73                 call    __RTC_CheckEsp
.text:00005B78                 mov     esp, ebp
.text:00005B7A                 pop     ebp
.text:00005B7B                 retn
.text:00005B7B ??0ISequentialOutStream@@QAE@XZ endp
.text:00005B7B
.text:00005B7B _text           ends
.text:00005B7B
.rdata:00005B7C ; ===========================================================================
.rdata:00005B7C
.rdata:00005B7C ; Segment type: Pure data
.rdata:00005B7C ; Segment permissions: Read
.rdata:00005B7C _rdata          segment dword public 'DATA' use32
.rdata:00005B7C                 assume cs:_rdata
.rdata:00005B7C                 ;org 5B7Ch
.rdata:00005B7C ; COMDAT (pick largest)
.rdata:00005B7C                 dd offset ??_R4ISequentialOutStream@@6B@ ; const ISequentialOutStream::`RTTI Complete Object Locator'
.rdata:00005B80                 public ??_7ISequentialOutStream@@6B@
.rdata:00005B80 ; const ISequentialOutStream::`vftable'
.rdata:00005B80 ??_7ISequentialOutStream@@6B@ dd offset __purecall
.rdata:00005B80                                         ; DATA XREF: ISequentialOutStream::ISequentialOutStream(void)+19o
.rdata:00005B84                 dd offset __purecall
.rdata:00005B88                 dd offset __purecall
.rdata:00005B8C                 dd offset __purecall
.rdata:00005B8C _rdata          ends
.rdata:00005B8C
.rdata$r:00005B90 ; ===========================================================================
.rdata$r:00005B90
.rdata$r:00005B90 ; Segment type: Pure data
.rdata$r:00005B90 ; Segment permissions: Read
.rdata$r:00005B90 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005B90                 assume cs:_rdata$r
.rdata$r:00005B90                 ;org 5B90h
.rdata$r:00005B90 ; COMDAT (pick any)
.rdata$r:00005B90                 public ??_R4ISequentialOutStream@@6B@
.rdata$r:00005B90 ; const ISequentialOutStream::`RTTI Complete Object Locator'
.rdata$r:00005B90 ??_R4ISequentialOutStream@@6B@ db    0  ; DATA XREF: .rdata:00005B7Co
.rdata$r:00005B91                 db    0
.rdata$r:00005B92                 db    0
.rdata$r:00005B93                 db    0
.rdata$r:00005B94                 db    0
.rdata$r:00005B95                 db    0
.rdata$r:00005B96                 db    0
.rdata$r:00005B97                 db    0
.rdata$r:00005B98                 db    0
.rdata$r:00005B99                 db    0
.rdata$r:00005B9A                 db    0
.rdata$r:00005B9B                 db    0
.rdata$r:00005B9C                 dd offset ??_R0?AUISequentialOutStream@@@8 ; ISequentialOutStream `RTTI Type Descriptor'
.rdata$r:00005BA0                 dd offset ??_R3ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005BA0 _rdata$r        ends
.rdata$r:00005BA0
.text:00005BA4 ; ===========================================================================
.text:00005BA4
.text:00005BA4 ; Segment type: Pure code
.text:00005BA4 ; Segment permissions: Read/Execute
.text:00005BA4 _text           segment para public 'CODE' use32
.text:00005BA4                 assume cs:_text
.text:00005BA4                 ;org 5BA4h
.text:00005BA4 ; COMDAT (pick any)
.text:00005BA4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005BA4
.text:00005BA4 ; =============== S U B R O U T I N E =======================================
.text:00005BA4
.text:00005BA4 ; Attributes: bp-based frame
.text:00005BA4
.text:00005BA4 ; _DWORD __thiscall NWindows::NFile::NIO::COutFile::COutFile(NWindows::NFile::NIO::COutFile *__hidden this)
.text:00005BA4                 public ??0COutFile@NIO@NFile@NWindows@@QAE@XZ
.text:00005BA4 ??0COutFile@NIO@NFile@NWindows@@QAE@XZ proc near
.text:00005BA4                                         ; CODE XREF: COutFileStream::COutFileStream(void)+30p
.text:00005BA4
.text:00005BA4 var_4           = dword ptr -4
.text:00005BA4
.text:00005BA4                 push    ebp
.text:00005BA5                 mov     ebp, esp
.text:00005BA7                 push    ecx
.text:00005BA8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005BAF                 mov     [ebp+var_4], ecx
.text:00005BB2                 mov     ecx, [ebp+var_4] ; this
.text:00005BB5                 call    ??0CFileBase@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::CFileBase::CFileBase(void)
.text:00005BBA                 mov     eax, [ebp+var_4]
.text:00005BBD                 add     esp, 4
.text:00005BC0                 cmp     ebp, esp
.text:00005BC2                 call    __RTC_CheckEsp
.text:00005BC7                 mov     esp, ebp
.text:00005BC9                 pop     ebp
.text:00005BCA                 retn
.text:00005BCA ??0COutFile@NIO@NFile@NWindows@@QAE@XZ endp
.text:00005BCA
.text:00005BCA ; ---------------------------------------------------------------------------
.text:00005BCB                 align 4
.text:00005BCB _text           ends
.text:00005BCB
.text:00005BCC ; ===========================================================================
.text:00005BCC
.text:00005BCC ; Segment type: Pure code
.text:00005BCC ; Segment permissions: Read/Execute
.text:00005BCC _text           segment para public 'CODE' use32
.text:00005BCC                 assume cs:_text
.text:00005BCC                 ;org 5BCCh
.text:00005BCC ; COMDAT (pick any)
.text:00005BCC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005BCC
.text:00005BCC ; =============== S U B R O U T I N E =======================================
.text:00005BCC
.text:00005BCC ; Attributes: bp-based frame
.text:00005BCC
.text:00005BCC ; _DWORD __thiscall NWindows::NFile::NIO::CFileBase::CFileBase(NWindows::NFile::NIO::CFileBase *__hidden this)
.text:00005BCC                 public ??0CFileBase@NIO@NFile@NWindows@@QAE@XZ
.text:00005BCC ??0CFileBase@NIO@NFile@NWindows@@QAE@XZ proc near
.text:00005BCC                                         ; CODE XREF: NWindows::NFile::NIO::COutFile::COutFile(void)+11p
.text:00005BCC
.text:00005BCC var_4           = dword ptr -4
.text:00005BCC
.text:00005BCC                 push    ebp
.text:00005BCD                 mov     ebp, esp
.text:00005BCF                 push    ecx
.text:00005BD0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005BD7                 mov     [ebp+var_4], ecx
.text:00005BDA                 mov     eax, [ebp+var_4]
.text:00005BDD                 mov     dword ptr [eax], 0FFFFFFFFh
.text:00005BE3                 mov     eax, [ebp+var_4]
.text:00005BE6                 mov     esp, ebp
.text:00005BE8                 pop     ebp
.text:00005BE9                 retn
.text:00005BE9 ??0CFileBase@NIO@NFile@NWindows@@QAE@XZ endp
.text:00005BE9
.text:00005BE9 ; ---------------------------------------------------------------------------
.text:00005BEA                 align 4
.text:00005BEA _text           ends
.text:00005BEA
.text:00005BEC ; ===========================================================================
.text:00005BEC
.text:00005BEC ; Segment type: Pure code
.text:00005BEC ; Segment permissions: Read/Execute
.text:00005BEC _text           segment para public 'CODE' use32
.text:00005BEC                 assume cs:_text
.text:00005BEC                 ;org 5BECh
.text:00005BEC ; COMDAT (pick any)
.text:00005BEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005BEC
.text:00005BEC ; =============== S U B R O U T I N E =======================================
.text:00005BEC
.text:00005BEC ; Attributes: bp-based frame
.text:00005BEC
.text:00005BEC ; __stdcall HRESULT_FROM_WIN32(x)
.text:00005BEC                 public _HRESULT_FROM_WIN32@4
.text:00005BEC _HRESULT_FROM_WIN32@4 proc near         ; CODE XREF: CArchiveUpdateCallback::InFileStream_On_Error(uint,ulong)+111p
.text:00005BEC
.text:00005BEC var_4           = dword ptr -4
.text:00005BEC arg_0           = dword ptr  8
.text:00005BEC
.text:00005BEC                 push    ebp
.text:00005BED                 mov     ebp, esp
.text:00005BEF                 push    ecx
.text:00005BF0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005BF7                 cmp     [ebp+arg_0], 0
.text:00005BFB                 jg      short loc_5C05
.text:00005BFD                 mov     eax, [ebp+arg_0]
.text:00005C00                 mov     [ebp+var_4], eax
.text:00005C03                 jmp     short loc_5C1D
.text:00005C05 ; ---------------------------------------------------------------------------
.text:00005C05
.text:00005C05 loc_5C05:                               ; CODE XREF: HRESULT_FROM_WIN32(x)+Fj
.text:00005C05                 mov     ecx, [ebp+arg_0]
.text:00005C08                 and     ecx, 0FFFFh
.text:00005C0E                 or      ecx, 70000h
.text:00005C14                 or      ecx, 80000000h
.text:00005C1A                 mov     [ebp+var_4], ecx
.text:00005C1D
.text:00005C1D loc_5C1D:                               ; CODE XREF: HRESULT_FROM_WIN32(x)+17j
.text:00005C1D                 mov     eax, [ebp+var_4]
.text:00005C20                 mov     esp, ebp
.text:00005C22                 pop     ebp
.text:00005C23                 retn    4
.text:00005C23 _HRESULT_FROM_WIN32@4 endp
.text:00005C23
.text:00005C23 ; ---------------------------------------------------------------------------
.text:00005C26                 align 4
.text:00005C26 _text           ends
.text:00005C26
.xdata$x:00005C28 ; ===========================================================================
.xdata$x:00005C28
.xdata$x:00005C28 ; Segment type: Pure data
.xdata$x:00005C28 ; Segment permissions: Read
.xdata$x:00005C28 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00005C28                 assume cs:_xdata$x
.xdata$x:00005C28                 ;org 5C28h
.xdata$x:00005C28 ; COMDAT (pick any)
.xdata$x:00005C28                 public __TI1H
.xdata$x:00005C28 __TI1H          db    0                 ; DATA XREF: CArchiveUpdateCallback::InFileStream_On_Destroy(uint)+CCo
.xdata$x:00005C29                 db    0
.xdata$x:00005C2A                 db    0
.xdata$x:00005C2B                 db    0
.xdata$x:00005C2C                 db    0
.xdata$x:00005C2D                 db    0
.xdata$x:00005C2E                 db    0
.xdata$x:00005C2F                 db    0
.xdata$x:00005C30                 db    0
.xdata$x:00005C31                 db    0
.xdata$x:00005C32                 db    0
.xdata$x:00005C33                 db    0
.xdata$x:00005C34                 dd offset __CTA1H
.xdata$x:00005C34 _xdata$x        ends
.xdata$x:00005C34
.xdata$x:00005C38 ; ===========================================================================
.xdata$x:00005C38
.xdata$x:00005C38 ; Segment type: Pure data
.xdata$x:00005C38 ; Segment permissions: Read
.xdata$x:00005C38 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00005C38                 assume cs:_xdata$x
.xdata$x:00005C38                 ;org 5C38h
.xdata$x:00005C38 ; COMDAT (pick any)
.xdata$x:00005C38                 public __CTA1H
.xdata$x:00005C38 __CTA1H         db    1                 ; DATA XREF: .xdata$x:00005C34o
.xdata$x:00005C39                 db    0
.xdata$x:00005C3A                 db    0
.xdata$x:00005C3B                 db    0
.xdata$x:00005C3C                 dd offset __CT??_R0H@84
.xdata$x:00005C3C _xdata$x        ends
.xdata$x:00005C3C
.xdata$x:00005C40 ; ===========================================================================
.xdata$x:00005C40
.xdata$x:00005C40 ; Segment type: Pure data
.xdata$x:00005C40 ; Segment permissions: Read
.xdata$x:00005C40 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00005C40                 assume cs:_xdata$x
.xdata$x:00005C40                 ;org 5C40h
.xdata$x:00005C40 ; COMDAT (pick any)
.xdata$x:00005C40                 public __CT??_R0H@84
.xdata$x:00005C40 __CT??_R0H@84   db    1                 ; DATA XREF: .xdata$x:00005C3Co
.xdata$x:00005C41                 db    0
.xdata$x:00005C42                 db    0
.xdata$x:00005C43                 db    0
.xdata$x:00005C44                 dd offset ??_R0H@8      ; int `RTTI Type Descriptor'
.xdata$x:00005C48                 db    0
.xdata$x:00005C49                 db    0
.xdata$x:00005C4A                 db    0
.xdata$x:00005C4B                 db    0
.xdata$x:00005C4C                 db 0FFh
.xdata$x:00005C4D                 db 0FFh
.xdata$x:00005C4E                 db 0FFh
.xdata$x:00005C4F                 db 0FFh
.xdata$x:00005C50                 db    0
.xdata$x:00005C51                 db    0
.xdata$x:00005C52                 db    0
.xdata$x:00005C53                 db    0
.xdata$x:00005C54                 db    4
.xdata$x:00005C55                 db    0
.xdata$x:00005C56                 db    0
.xdata$x:00005C57                 db    0
.xdata$x:00005C58                 db    0
.xdata$x:00005C59                 db    0
.xdata$x:00005C5A                 db    0
.xdata$x:00005C5B                 db    0
.xdata$x:00005C5B _xdata$x        ends
.xdata$x:00005C5B
.data:00005C5C ; ===========================================================================
.data:00005C5C
.data:00005C5C ; Segment type: Pure data
.data:00005C5C ; Segment permissions: Read/Write
.data:00005C5C _data           segment dword public 'DATA' use32
.data:00005C5C                 assume cs:_data
.data:00005C5C                 ;org 5C5Ch
.data:00005C5C ; COMDAT (pick any)
.data:00005C5C                 public ??_R0H@8
.data:00005C5C ; int `RTTI Type Descriptor'
.data:00005C5C ??_R0H@8        dd offset ??_7type_info@@6B@ ; DATA XREF: .xdata$x:00005C44o
.data:00005C5C                                         ; const type_info::`vftable'
.data:00005C60                 db    0
.data:00005C61                 db    0
.data:00005C62                 db    0
.data:00005C63                 db    0
.data:00005C64                 db  2Eh ; .
.data:00005C65                 db  48h ; H
.data:00005C66                 db    0
.data:00005C67                 align 4
.data:00005C67 _data           ends
.data:00005C67
.text:00005C68 ; ===========================================================================
.text:00005C68
.text:00005C68 ; Segment type: Pure code
.text:00005C68 ; Segment permissions: Read/Execute
.text:00005C68 _text           segment para public 'CODE' use32
.text:00005C68                 assume cs:_text
.text:00005C68                 ;org 5C68h
.text:00005C68 ; COMDAT (pick any)
.text:00005C68                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005C68
.text:00005C68 ; =============== S U B R O U T I N E =======================================
.text:00005C68
.text:00005C68 ; Attributes: bp-based frame
.text:00005C68
.text:00005C68 ; public: unsigned int __thiscall CObjectVector<class UString>::Size(void)const
.text:00005C68                 public ?Size@?$CObjectVector@VUString@@@@QBEIXZ
.text:00005C68 ?Size@?$CObjectVector@VUString@@@@QBEIXZ proc near
.text:00005C68                                         ; CODE XREF: GetRelativePath(UString const &,UString const &)+8Dp
.text:00005C68                                         ; GetRelativePath(UString const &,UString const &)+9Fp ...
.text:00005C68
.text:00005C68 var_4           = dword ptr -4
.text:00005C68
.text:00005C68                 push    ebp
.text:00005C69                 mov     ebp, esp
.text:00005C6B                 push    ecx
.text:00005C6C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005C73                 mov     [ebp+var_4], ecx
.text:00005C76                 mov     ecx, [ebp+var_4]
.text:00005C79                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00005C7E                 add     esp, 4
.text:00005C81                 cmp     ebp, esp
.text:00005C83                 call    __RTC_CheckEsp
.text:00005C88                 mov     esp, ebp
.text:00005C8A                 pop     ebp
.text:00005C8B                 retn
.text:00005C8B ?Size@?$CObjectVector@VUString@@@@QBEIXZ endp
.text:00005C8B
.text:00005C8B _text           ends
.text:00005C8B
.text:00005C8C ; ===========================================================================
.text:00005C8C
.text:00005C8C ; Segment type: Pure code
.text:00005C8C ; Segment permissions: Read/Execute
.text:00005C8C _text           segment para public 'CODE' use32
.text:00005C8C                 assume cs:_text
.text:00005C8C                 ;org 5C8Ch
.text:00005C8C ; COMDAT (pick any)
.text:00005C8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005C8C
.text:00005C8C ; =============== S U B R O U T I N E =======================================
.text:00005C8C
.text:00005C8C ; Attributes: bp-based frame
.text:00005C8C
.text:00005C8C ; public: __thiscall CObjectVector<class UString>::CObjectVector<class UString>(void)
.text:00005C8C                 public ??0?$CObjectVector@VUString@@@@QAE@XZ
.text:00005C8C ??0?$CObjectVector@VUString@@@@QAE@XZ proc near
.text:00005C8C                                         ; CODE XREF: CArchiveUpdateCallback::CArchiveUpdateCallback(void)+122p
.text:00005C8C                                         ; GetRelativePath(UString const &,UString const &)+40p ...
.text:00005C8C
.text:00005C8C var_4           = dword ptr -4
.text:00005C8C
.text:00005C8C                 push    ebp
.text:00005C8D                 mov     ebp, esp
.text:00005C8F                 push    ecx
.text:00005C90                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005C97                 mov     [ebp+var_4], ecx
.text:00005C9A                 mov     ecx, [ebp+var_4]
.text:00005C9D                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:00005CA2                 mov     eax, [ebp+var_4]
.text:00005CA5                 add     esp, 4
.text:00005CA8                 cmp     ebp, esp
.text:00005CAA                 call    __RTC_CheckEsp
.text:00005CAF                 mov     esp, ebp
.text:00005CB1                 pop     ebp
.text:00005CB2                 retn
.text:00005CB2 ??0?$CObjectVector@VUString@@@@QAE@XZ endp
.text:00005CB2
.text:00005CB2 ; ---------------------------------------------------------------------------
.text:00005CB3                 align 4
.text:00005CB3 _text           ends
.text:00005CB3
.text:00005CB4 ; ===========================================================================
.text:00005CB4
.text:00005CB4 ; Segment type: Pure code
.text:00005CB4 ; Segment permissions: Read/Execute
.text:00005CB4 _text           segment para public 'CODE' use32
.text:00005CB4                 assume cs:_text
.text:00005CB4                 ;org 5CB4h
.text:00005CB4 ; COMDAT (pick any)
.text:00005CB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005CB4
.text:00005CB4 ; =============== S U B R O U T I N E =======================================
.text:00005CB4
.text:00005CB4 ; Attributes: bp-based frame
.text:00005CB4
.text:00005CB4 ; public: class UString const & __thiscall CObjectVector<class UString>::operator[](unsigned int)const
.text:00005CB4                 public ??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z
.text:00005CB4 ??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z proc near
.text:00005CB4                                         ; CODE XREF: CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+457p
.text:00005CB4
.text:00005CB4 var_4           = dword ptr -4
.text:00005CB4 arg_0           = dword ptr  8
.text:00005CB4
.text:00005CB4                 push    ebp
.text:00005CB5                 mov     ebp, esp
.text:00005CB7                 push    ecx
.text:00005CB8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005CBF                 mov     [ebp+var_4], ecx
.text:00005CC2                 mov     eax, [ebp+arg_0]
.text:00005CC5                 push    eax
.text:00005CC6                 mov     ecx, [ebp+var_4]
.text:00005CC9                 call    ??A?$CRecordVector@PAX@@QBEABQAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00005CCE                 mov     eax, [eax]
.text:00005CD0                 add     esp, 4
.text:00005CD3                 cmp     ebp, esp
.text:00005CD5                 call    __RTC_CheckEsp
.text:00005CDA                 mov     esp, ebp
.text:00005CDC                 pop     ebp
.text:00005CDD                 retn    4
.text:00005CDD ??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z endp
.text:00005CDD
.text:00005CDD _text           ends
.text:00005CDD
.text:00005CE0 ; ===========================================================================
.text:00005CE0
.text:00005CE0 ; Segment type: Pure code
.text:00005CE0 ; Segment permissions: Read/Execute
.text:00005CE0 _text           segment para public 'CODE' use32
.text:00005CE0                 assume cs:_text
.text:00005CE0                 ;org 5CE0h
.text:00005CE0 ; COMDAT (pick any)
.text:00005CE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005CE0
.text:00005CE0 ; =============== S U B R O U T I N E =======================================
.text:00005CE0
.text:00005CE0 ; Attributes: bp-based frame
.text:00005CE0
.text:00005CE0 ; public: class UString & __thiscall CObjectVector<class UString>::operator[](unsigned int)
.text:00005CE0                 public ??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z
.text:00005CE0 ??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z proc near
.text:00005CE0                                         ; CODE XREF: GetRelativePath(UString const &,UString const &)+B1p
.text:00005CE0                                         ; GetRelativePath(UString const &,UString const &)+C5p ...
.text:00005CE0
.text:00005CE0 var_4           = dword ptr -4
.text:00005CE0 arg_0           = dword ptr  8
.text:00005CE0
.text:00005CE0                 push    ebp
.text:00005CE1                 mov     ebp, esp
.text:00005CE3                 push    ecx
.text:00005CE4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005CEB                 mov     [ebp+var_4], ecx
.text:00005CEE                 mov     eax, [ebp+arg_0]
.text:00005CF1                 push    eax
.text:00005CF2                 mov     ecx, [ebp+var_4]
.text:00005CF5                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00005CFA                 mov     eax, [eax]
.text:00005CFC                 add     esp, 4
.text:00005CFF                 cmp     ebp, esp
.text:00005D01                 call    __RTC_CheckEsp
.text:00005D06                 mov     esp, ebp
.text:00005D08                 pop     ebp
.text:00005D09                 retn    4
.text:00005D09 ??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z endp
.text:00005D09
.text:00005D09 _text           ends
.text:00005D09
.text:00005D0C ; ===========================================================================
.text:00005D0C
.text:00005D0C ; Segment type: Pure code
.text:00005D0C ; Segment permissions: Read/Execute
.text:00005D0C _text           segment para public 'CODE' use32
.text:00005D0C                 assume cs:_text
.text:00005D0C                 ;org 5D0Ch
.text:00005D0C ; COMDAT (pick any)
.text:00005D0C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005D0C
.text:00005D0C ; =============== S U B R O U T I N E =======================================
.text:00005D0C
.text:00005D0C ; Attributes: bp-based frame
.text:00005D0C
.text:00005D0C ; public: unsigned int __thiscall CObjectVector<class UString>::Add(class UString const &)
.text:00005D0C                 public ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
.text:00005D0C ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z proc near
.text:00005D0C                                         ; CODE XREF: CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+546p
.text:00005D0C
.text:00005D0C var_1C          = dword ptr -1Ch
.text:00005D0C var_18          = dword ptr -18h
.text:00005D0C var_14          = dword ptr -14h
.text:00005D0C var_10          = dword ptr -10h
.text:00005D0C var_C           = dword ptr -0Ch
.text:00005D0C var_4           = dword ptr -4
.text:00005D0C arg_0           = dword ptr  8
.text:00005D0C
.text:00005D0C                 push    ebp
.text:00005D0D                 mov     ebp, esp
.text:00005D0F                 push    0FFFFFFFFh
.text:00005D11                 push    offset __ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
.text:00005D16                 mov     eax, large fs:0
.text:00005D1C                 push    eax
.text:00005D1D                 sub     esp, 10h
.text:00005D20                 mov     eax, 0CCCCCCCCh
.text:00005D25                 mov     [ebp+var_1C], eax
.text:00005D28                 mov     [ebp+var_18], eax
.text:00005D2B                 mov     [ebp+var_14], eax
.text:00005D2E                 mov     [ebp+var_10], eax
.text:00005D31                 mov     eax, dword ptr ds:___security_cookie
.text:00005D36                 xor     eax, ebp
.text:00005D38                 push    eax
.text:00005D39                 lea     eax, [ebp+var_C]
.text:00005D3C                 mov     large fs:0, eax
.text:00005D42                 mov     [ebp+var_10], ecx
.text:00005D45                 push    0Ch             ; unsigned int
.text:00005D47                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00005D4C                 add     esp, 4
.text:00005D4F                 mov     [ebp+var_18], eax
.text:00005D52                 mov     [ebp+var_4], 0
.text:00005D59                 cmp     [ebp+var_18], 0
.text:00005D5D                 jz      short loc_5D70
.text:00005D5F                 mov     eax, [ebp+arg_0]
.text:00005D62                 push    eax
.text:00005D63                 mov     ecx, [ebp+var_18]
.text:00005D66                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:00005D6B                 mov     [ebp+var_1C], eax
.text:00005D6E                 jmp     short loc_5D77
.text:00005D70 ; ---------------------------------------------------------------------------
.text:00005D70
.text:00005D70 loc_5D70:                               ; CODE XREF: CObjectVector<UString>::Add(UString const &)+51j
.text:00005D70                 mov     [ebp+var_1C], 0
.text:00005D77
.text:00005D77 loc_5D77:                               ; CODE XREF: CObjectVector<UString>::Add(UString const &)+62j
.text:00005D77                 mov     ecx, [ebp+var_1C]
.text:00005D7A                 mov     [ebp+var_14], ecx
.text:00005D7D                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00005D84                 mov     edx, [ebp+var_14]
.text:00005D87                 push    edx
.text:00005D88                 mov     ecx, [ebp+var_10]
.text:00005D8B                 call    ?Add@?$CRecordVector@PAX@@QAEIQAX@Z ; CRecordVector<void *>::Add(void * const)
.text:00005D90                 mov     ecx, [ebp+var_C]
.text:00005D93                 mov     large fs:0, ecx
.text:00005D9A                 pop     ecx
.text:00005D9B                 add     esp, 1Ch
.text:00005D9E                 cmp     ebp, esp
.text:00005DA0                 call    __RTC_CheckEsp
.text:00005DA5                 mov     esp, ebp
.text:00005DA7                 pop     ebp
.text:00005DA8                 retn    4
.text:00005DA8 ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z endp
.text:00005DA8
.text:00005DA8 ; ---------------------------------------------------------------------------
.text:00005DAB                 align 4
.text:00005DAB _text           ends
.text:00005DAB
.text$x:00005DAC ; ===========================================================================
.text$x:00005DAC
.text$x:00005DAC ; Segment type: Pure code
.text$x:00005DAC ; Segment permissions: Read/Execute
.text$x:00005DAC _text$x         segment para public 'CODE' use32
.text$x:00005DAC                 assume cs:_text$x
.text$x:00005DAC                 ;org 5DACh
.text$x:00005DAC ; COMDAT (pick associative to section at 5D0C)
.text$x:00005DAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005DAC
.text$x:00005DAC ; =============== S U B R O U T I N E =======================================
.text$x:00005DAC
.text$x:00005DAC
.text$x:00005DAC __unwindfunclet$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z$0 proc near
.text$x:00005DAC                                         ; DATA XREF: .xdata$x:00005DD8o
.text$x:00005DAC                 mov     eax, [ebp-18h]
.text$x:00005DAF                 push    eax             ; void *
.text$x:00005DB0                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00005DB5                 pop     ecx
.text$x:00005DB6                 retn
.text$x:00005DB6 __unwindfunclet$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z$0 endp
.text$x:00005DB6
.text$x:00005DB7
.text$x:00005DB7 ; =============== S U B R O U T I N E =======================================
.text$x:00005DB7
.text$x:00005DB7
.text$x:00005DB7 __ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z proc near
.text$x:00005DB7                                         ; DATA XREF: CObjectVector<UString>::Add(UString const &)+5o
.text$x:00005DB7
.text$x:00005DB7 arg_4           = dword ptr  8
.text$x:00005DB7
.text$x:00005DB7                 mov     edx, [esp+arg_4]
.text$x:00005DBB                 lea     eax, [edx+0Ch]
.text$x:00005DBE                 mov     ecx, [edx-14h]
.text$x:00005DC1                 xor     ecx, eax
.text$x:00005DC3                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005DC8                 mov     eax, offset __ehfuncinfo$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
.text$x:00005DCD                 jmp     ___CxxFrameHandler3
.text$x:00005DCD __ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z endp
.text$x:00005DCD
.text$x:00005DCD ; ---------------------------------------------------------------------------
.text$x:00005DD2                 align 4
.text$x:00005DD2 _text$x         ends
.text$x:00005DD2
.xdata$x:00005DD4 ; ===========================================================================
.xdata$x:00005DD4
.xdata$x:00005DD4 ; Segment type: Pure data
.xdata$x:00005DD4 ; Segment permissions: Read
.xdata$x:00005DD4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00005DD4                 assume cs:_xdata$x
.xdata$x:00005DD4                 ;org 5DD4h
.xdata$x:00005DD4 ; COMDAT (pick associative to section at 5D0C)
.xdata$x:00005DD4 __unwindtable$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z db 0FFh
.xdata$x:00005DD4                                         ; DATA XREF: .xdata$x:00005DE4o
.xdata$x:00005DD5                 db 0FFh
.xdata$x:00005DD6                 db 0FFh
.xdata$x:00005DD7                 db 0FFh
.xdata$x:00005DD8                 dd offset __unwindfunclet$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z$0
.xdata$x:00005DDC __ehfuncinfo$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z db  22h ; "
.xdata$x:00005DDC                                         ; DATA XREF: __ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z+11o
.xdata$x:00005DDD                 db    5
.xdata$x:00005DDE                 db  93h ; ô
.xdata$x:00005DDF                 db  19h
.xdata$x:00005DE0                 db    1
.xdata$x:00005DE1                 db    0
.xdata$x:00005DE2                 db    0
.xdata$x:00005DE3                 db    0
.xdata$x:00005DE4                 dd offset __unwindtable$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
.xdata$x:00005DE8                 db    0
.xdata$x:00005DE9                 db    0
.xdata$x:00005DEA                 db    0
.xdata$x:00005DEB                 db    0
.xdata$x:00005DEC                 db    0
.xdata$x:00005DED                 db    0
.xdata$x:00005DEE                 db    0
.xdata$x:00005DEF                 db    0
.xdata$x:00005DF0                 db    0
.xdata$x:00005DF1                 db    0
.xdata$x:00005DF2                 db    0
.xdata$x:00005DF3                 db    0
.xdata$x:00005DF4                 db    0
.xdata$x:00005DF5                 db    0
.xdata$x:00005DF6                 db    0
.xdata$x:00005DF7                 db    0
.xdata$x:00005DF8                 db    0
.xdata$x:00005DF9                 db    0
.xdata$x:00005DFA                 db    0
.xdata$x:00005DFB                 db    0
.xdata$x:00005DFC                 db    1
.xdata$x:00005DFD                 db    0
.xdata$x:00005DFE                 db    0
.xdata$x:00005DFF                 db    0
.xdata$x:00005DFF _xdata$x        ends
.xdata$x:00005DFF
.text:00005E00 ; ===========================================================================
.text:00005E00
.text:00005E00 ; Segment type: Pure code
.text:00005E00 ; Segment permissions: Read/Execute
.text:00005E00 _text           segment para public 'CODE' use32
.text:00005E00                 assume cs:_text
.text:00005E00                 ;org 5E00h
.text:00005E00 ; COMDAT (pick any)
.text:00005E00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005E00
.text:00005E00 ; =============== S U B R O U T I N E =======================================
.text:00005E00
.text:00005E00 ; Attributes: bp-based frame
.text:00005E00
.text:00005E00 ; public: __thiscall CObjectVector<class UString>::~CObjectVector<class UString>(void)
.text:00005E00                 public ??1?$CObjectVector@VUString@@@@QAE@XZ
.text:00005E00 ??1?$CObjectVector@VUString@@@@QAE@XZ proc near
.text:00005E00                                         ; CODE XREF: GetRelativePath(UString const &,UString const &)+12Bp
.text:00005E00                                         ; GetRelativePath(UString const &,UString const &)+137p ...
.text:00005E00
.text:00005E00 var_20          = dword ptr -20h
.text:00005E00 var_1C          = dword ptr -1Ch
.text:00005E00 var_18          = dword ptr -18h
.text:00005E00 var_14          = dword ptr -14h
.text:00005E00 var_10          = dword ptr -10h
.text:00005E00 var_C           = dword ptr -0Ch
.text:00005E00 var_4           = dword ptr -4
.text:00005E00
.text:00005E00                 push    ebp
.text:00005E01                 mov     ebp, esp
.text:00005E03                 push    0FFFFFFFFh
.text:00005E05                 push    offset __ehhandler$??1?$CObjectVector@VUString@@@@QAE@XZ
.text:00005E0A                 mov     eax, large fs:0
.text:00005E10                 push    eax
.text:00005E11                 sub     esp, 14h
.text:00005E14                 mov     eax, 0CCCCCCCCh
.text:00005E19                 mov     [ebp+var_20], eax
.text:00005E1C                 mov     [ebp+var_1C], eax
.text:00005E1F                 mov     [ebp+var_18], eax
.text:00005E22                 mov     [ebp+var_14], eax
.text:00005E25                 mov     [ebp+var_10], eax
.text:00005E28                 mov     eax, dword ptr ds:___security_cookie
.text:00005E2D                 xor     eax, ebp
.text:00005E2F                 push    eax
.text:00005E30                 lea     eax, [ebp+var_C]
.text:00005E33                 mov     large fs:0, eax
.text:00005E39                 mov     [ebp+var_10], ecx
.text:00005E3C                 mov     [ebp+var_4], 0
.text:00005E43                 mov     ecx, [ebp+var_10]
.text:00005E46                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00005E4B                 mov     [ebp+var_14], eax
.text:00005E4E
.text:00005E4E loc_5E4E:                               ; CODE XREF: CObjectVector<UString>::~CObjectVector<UString>(void):loc_5E90j
.text:00005E4E                 cmp     [ebp+var_14], 0
.text:00005E52                 jz      short loc_5E92
.text:00005E54                 mov     eax, [ebp+var_14]
.text:00005E57                 sub     eax, 1
.text:00005E5A                 mov     [ebp+var_14], eax
.text:00005E5D                 mov     ecx, [ebp+var_14]
.text:00005E60                 push    ecx
.text:00005E61                 mov     ecx, [ebp+var_10]
.text:00005E64                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00005E69                 mov     edx, [eax]
.text:00005E6B                 mov     [ebp+var_1C], edx
.text:00005E6E                 mov     eax, [ebp+var_1C]
.text:00005E71                 mov     [ebp+var_18], eax
.text:00005E74                 cmp     [ebp+var_18], 0
.text:00005E78                 jz      short loc_5E89
.text:00005E7A                 push    1
.text:00005E7C                 mov     ecx, [ebp+var_18]
.text:00005E7F                 call    ??_GUString@@QAEPAXI@Z ; UString::`scalar deleting destructor'(uint)
.text:00005E84                 mov     [ebp+var_20], eax
.text:00005E87                 jmp     short loc_5E90
.text:00005E89 ; ---------------------------------------------------------------------------
.text:00005E89
.text:00005E89 loc_5E89:                               ; CODE XREF: CObjectVector<UString>::~CObjectVector<UString>(void)+78j
.text:00005E89                 mov     [ebp+var_20], 0
.text:00005E90
.text:00005E90 loc_5E90:                               ; CODE XREF: CObjectVector<UString>::~CObjectVector<UString>(void)+87j
.text:00005E90                 jmp     short loc_5E4E
.text:00005E92 ; ---------------------------------------------------------------------------
.text:00005E92
.text:00005E92 loc_5E92:                               ; CODE XREF: CObjectVector<UString>::~CObjectVector<UString>(void)+52j
.text:00005E92                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00005E99                 mov     ecx, [ebp+var_10]
.text:00005E9C                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00005EA1                 mov     ecx, [ebp+var_C]
.text:00005EA4                 mov     large fs:0, ecx
.text:00005EAB                 pop     ecx
.text:00005EAC                 add     esp, 20h
.text:00005EAF                 cmp     ebp, esp
.text:00005EB1                 call    __RTC_CheckEsp
.text:00005EB6                 mov     esp, ebp
.text:00005EB8                 pop     ebp
.text:00005EB9                 retn
.text:00005EB9 ??1?$CObjectVector@VUString@@@@QAE@XZ endp
.text:00005EB9
.text:00005EB9 ; ---------------------------------------------------------------------------
.text:00005EBA                 align 4
.text:00005EBA _text           ends
.text:00005EBA
.text$x:00005EBC ; ===========================================================================
.text$x:00005EBC
.text$x:00005EBC ; Segment type: Pure code
.text$x:00005EBC ; Segment permissions: Read/Execute
.text$x:00005EBC _text$x         segment para public 'CODE' use32
.text$x:00005EBC                 assume cs:_text$x
.text$x:00005EBC                 ;org 5EBCh
.text$x:00005EBC ; COMDAT (pick associative to section at 5E00)
.text$x:00005EBC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005EBC
.text$x:00005EBC ; =============== S U B R O U T I N E =======================================
.text$x:00005EBC
.text$x:00005EBC
.text$x:00005EBC __unwindfunclet$??1?$CObjectVector@VUString@@@@QAE@XZ$0 proc near
.text$x:00005EBC                                         ; DATA XREF: .xdata$x:00005EE4o
.text$x:00005EBC                 mov     ecx, [ebp-10h]
.text$x:00005EBF                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:00005EBF __unwindfunclet$??1?$CObjectVector@VUString@@@@QAE@XZ$0 endp
.text$x:00005EBF
.text$x:00005EC4
.text$x:00005EC4 ; =============== S U B R O U T I N E =======================================
.text$x:00005EC4
.text$x:00005EC4
.text$x:00005EC4 __ehhandler$??1?$CObjectVector@VUString@@@@QAE@XZ proc near
.text$x:00005EC4                                         ; DATA XREF: CObjectVector<UString>::~CObjectVector<UString>(void)+5o
.text$x:00005EC4
.text$x:00005EC4 arg_4           = dword ptr  8
.text$x:00005EC4
.text$x:00005EC4                 mov     edx, [esp+arg_4]
.text$x:00005EC8                 lea     eax, [edx+0Ch]
.text$x:00005ECB                 mov     ecx, [edx-18h]
.text$x:00005ECE                 xor     ecx, eax
.text$x:00005ED0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005ED5                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@VUString@@@@QAE@XZ
.text$x:00005EDA                 jmp     ___CxxFrameHandler3
.text$x:00005EDA __ehhandler$??1?$CObjectVector@VUString@@@@QAE@XZ endp
.text$x:00005EDA
.text$x:00005EDA ; ---------------------------------------------------------------------------
.text$x:00005EDF                 align 10h
.text$x:00005EDF _text$x         ends
.text$x:00005EDF
.xdata$x:00005EE0 ; ===========================================================================
.xdata$x:00005EE0
.xdata$x:00005EE0 ; Segment type: Pure data
.xdata$x:00005EE0 ; Segment permissions: Read
.xdata$x:00005EE0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00005EE0                 assume cs:_xdata$x
.xdata$x:00005EE0                 ;org 5EE0h
.xdata$x:00005EE0 ; COMDAT (pick associative to section at 5E00)
.xdata$x:00005EE0 __unwindtable$??1?$CObjectVector@VUString@@@@QAE@XZ db 0FFh
.xdata$x:00005EE0                                         ; DATA XREF: .xdata$x:00005EF0o
.xdata$x:00005EE1                 db 0FFh
.xdata$x:00005EE2                 db 0FFh
.xdata$x:00005EE3                 db 0FFh
.xdata$x:00005EE4                 dd offset __unwindfunclet$??1?$CObjectVector@VUString@@@@QAE@XZ$0
.xdata$x:00005EE8 __ehfuncinfo$??1?$CObjectVector@VUString@@@@QAE@XZ db  22h ; "
.xdata$x:00005EE8                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@VUString@@@@QAE@XZ+11o
.xdata$x:00005EE9                 db    5
.xdata$x:00005EEA                 db  93h ; ô
.xdata$x:00005EEB                 db  19h
.xdata$x:00005EEC                 db    1
.xdata$x:00005EED                 db    0
.xdata$x:00005EEE                 db    0
.xdata$x:00005EEF                 db    0
.xdata$x:00005EF0                 dd offset __unwindtable$??1?$CObjectVector@VUString@@@@QAE@XZ
.xdata$x:00005EF4                 db    0
.xdata$x:00005EF5                 db    0
.xdata$x:00005EF6                 db    0
.xdata$x:00005EF7                 db    0
.xdata$x:00005EF8                 db    0
.xdata$x:00005EF9                 db    0
.xdata$x:00005EFA                 db    0
.xdata$x:00005EFB                 db    0
.xdata$x:00005EFC                 db    0
.xdata$x:00005EFD                 db    0
.xdata$x:00005EFE                 db    0
.xdata$x:00005EFF                 db    0
.xdata$x:00005F00                 db    0
.xdata$x:00005F01                 db    0
.xdata$x:00005F02                 db    0
.xdata$x:00005F03                 db    0
.xdata$x:00005F04                 db    0
.xdata$x:00005F05                 db    0
.xdata$x:00005F06                 db    0
.xdata$x:00005F07                 db    0
.xdata$x:00005F08                 db    1
.xdata$x:00005F09                 db    0
.xdata$x:00005F0A                 db    0
.xdata$x:00005F0B                 db    0
.xdata$x:00005F0B _xdata$x        ends
.xdata$x:00005F0B
.text:00005F0C ; ===========================================================================
.text:00005F0C
.text:00005F0C ; Segment type: Pure code
.text:00005F0C ; Segment permissions: Read/Execute
.text:00005F0C _text           segment para public 'CODE' use32
.text:00005F0C                 assume cs:_text
.text:00005F0C                 ;org 5F0Ch
.text:00005F0C ; COMDAT (pick any)
.text:00005F0C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005F0C
.text:00005F0C ; =============== S U B R O U T I N E =======================================
.text:00005F0C
.text:00005F0C ; Attributes: bp-based frame
.text:00005F0C
.text:00005F0C ; public: void __thiscall CObjectVector<class UString>::Delete(unsigned int)
.text:00005F0C                 public ?Delete@?$CObjectVector@VUString@@@@QAEXI@Z
.text:00005F0C ?Delete@?$CObjectVector@VUString@@@@QAEXI@Z proc near
.text:00005F0C                                         ; CODE XREF: CArchiveUpdateCallback::InFileStream_On_Destroy(uint)+ADp
.text:00005F0C
.text:00005F0C var_10          = dword ptr -10h
.text:00005F0C var_C           = dword ptr -0Ch
.text:00005F0C var_8           = dword ptr -8
.text:00005F0C var_4           = dword ptr -4
.text:00005F0C arg_0           = dword ptr  8
.text:00005F0C
.text:00005F0C                 push    ebp
.text:00005F0D                 mov     ebp, esp
.text:00005F0F                 sub     esp, 10h
.text:00005F12                 mov     eax, 0CCCCCCCCh
.text:00005F17                 mov     [ebp+var_10], eax
.text:00005F1A                 mov     [ebp+var_C], eax
.text:00005F1D                 mov     [ebp+var_8], eax
.text:00005F20                 mov     [ebp+var_4], eax
.text:00005F23                 mov     [ebp+var_4], ecx
.text:00005F26                 mov     eax, [ebp+arg_0]
.text:00005F29                 push    eax
.text:00005F2A                 mov     ecx, [ebp+var_4]
.text:00005F2D                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00005F32                 mov     ecx, [eax]
.text:00005F34                 mov     [ebp+var_C], ecx
.text:00005F37                 mov     edx, [ebp+var_C]
.text:00005F3A                 mov     [ebp+var_8], edx
.text:00005F3D                 cmp     [ebp+var_8], 0
.text:00005F41                 jz      short loc_5F52
.text:00005F43                 push    1
.text:00005F45                 mov     ecx, [ebp+var_8]
.text:00005F48                 call    ??_GUString@@QAEPAXI@Z ; UString::`scalar deleting destructor'(uint)
.text:00005F4D                 mov     [ebp+var_10], eax
.text:00005F50                 jmp     short loc_5F59
.text:00005F52 ; ---------------------------------------------------------------------------
.text:00005F52
.text:00005F52 loc_5F52:                               ; CODE XREF: CObjectVector<UString>::Delete(uint)+35j
.text:00005F52                 mov     [ebp+var_10], 0
.text:00005F59
.text:00005F59 loc_5F59:                               ; CODE XREF: CObjectVector<UString>::Delete(uint)+44j
.text:00005F59                 mov     eax, [ebp+arg_0]
.text:00005F5C                 push    eax
.text:00005F5D                 mov     ecx, [ebp+var_4]
.text:00005F60                 call    ?Delete@?$CRecordVector@PAX@@QAEXI@Z ; CRecordVector<void *>::Delete(uint)
.text:00005F65                 add     esp, 10h
.text:00005F68                 cmp     ebp, esp
.text:00005F6A                 call    __RTC_CheckEsp
.text:00005F6F                 mov     esp, ebp
.text:00005F71                 pop     ebp
.text:00005F72                 retn    4
.text:00005F72 ?Delete@?$CObjectVector@VUString@@@@QAEXI@Z endp
.text:00005F72
.text:00005F72 ; ---------------------------------------------------------------------------
.text:00005F75                 align 4
.text:00005F75 _text           ends
.text:00005F75
.text:00005F78 ; ===========================================================================
.text:00005F78
.text:00005F78 ; Segment type: Pure code
.text:00005F78 ; Segment permissions: Read/Execute
.text:00005F78 _text           segment para public 'CODE' use32
.text:00005F78                 assume cs:_text
.text:00005F78                 ;org 5F78h
.text:00005F78 ; COMDAT (pick any)
.text:00005F78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005F78
.text:00005F78 ; =============== S U B R O U T I N E =======================================
.text:00005F78
.text:00005F78 ; Attributes: bp-based frame
.text:00005F78
.text:00005F78 ; public: __thiscall CBuffer<unsigned char>::operator unsigned char const *(void)const
.text:00005F78                 public ??B?$CBuffer@E@@QBEPBEXZ
.text:00005F78 ??B?$CBuffer@E@@QBEPBEXZ proc near      ; CODE XREF: CArchiveUpdateCallback::GetRootRawProp(ulong,void const * *,uint *,uint *)+9Ep
.text:00005F78                                         ; CArchiveUpdateCallback::GetRawProp(uint,ulong,void const * *,uint *,uint *)+1A2p ...
.text:00005F78
.text:00005F78 var_4           = dword ptr -4
.text:00005F78
.text:00005F78                 push    ebp
.text:00005F79                 mov     ebp, esp
.text:00005F7B                 push    ecx
.text:00005F7C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005F83                 mov     [ebp+var_4], ecx
.text:00005F86                 mov     eax, [ebp+var_4]
.text:00005F89                 mov     eax, [eax]
.text:00005F8B                 mov     esp, ebp
.text:00005F8D                 pop     ebp
.text:00005F8E                 retn
.text:00005F8E ??B?$CBuffer@E@@QBEPBEXZ endp
.text:00005F8E
.text:00005F8E ; ---------------------------------------------------------------------------
.text:00005F8F                 align 10h
.text:00005F8F _text           ends
.text:00005F8F
.text:00005F90 ; ===========================================================================
.text:00005F90
.text:00005F90 ; Segment type: Pure code
.text:00005F90 ; Segment permissions: Read/Execute
.text:00005F90 _text           segment para public 'CODE' use32
.text:00005F90                 assume cs:_text
.text:00005F90                 ;org 5F90h
.text:00005F90 ; COMDAT (pick any)
.text:00005F90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005F90
.text:00005F90 ; =============== S U B R O U T I N E =======================================
.text:00005F90
.text:00005F90 ; Attributes: bp-based frame
.text:00005F90
.text:00005F90 ; public: unsigned int __thiscall CBuffer<unsigned char>::Size(void)const
.text:00005F90                 public ?Size@?$CBuffer@E@@QBEIXZ
.text:00005F90 ?Size@?$CBuffer@E@@QBEIXZ proc near     ; CODE XREF: CArchiveUpdateCallback::GetRootRawProp(ulong,void const * *,uint *,uint *)+ABp
.text:00005F90                                         ; CArchiveUpdateCallback::GetRawProp(uint,ulong,void const * *,uint *,uint *)+1AFp ...
.text:00005F90
.text:00005F90 var_4           = dword ptr -4
.text:00005F90
.text:00005F90                 push    ebp
.text:00005F91                 mov     ebp, esp
.text:00005F93                 push    ecx
.text:00005F94                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005F9B                 mov     [ebp+var_4], ecx
.text:00005F9E                 mov     eax, [ebp+var_4]
.text:00005FA1                 mov     eax, [eax+4]
.text:00005FA4                 mov     esp, ebp
.text:00005FA6                 pop     ebp
.text:00005FA7                 retn
.text:00005FA7 ?Size@?$CBuffer@E@@QBEIXZ endp
.text:00005FA7
.text:00005FA7 _text           ends
.text:00005FA7
.text:00005FA8 ; ===========================================================================
.text:00005FA8
.text:00005FA8 ; Segment type: Pure code
.text:00005FA8 ; Segment permissions: Read/Execute
.text:00005FA8 _text           segment para public 'CODE' use32
.text:00005FA8                 assume cs:_text
.text:00005FA8                 ;org 5FA8h
.text:00005FA8 ; COMDAT (pick any)
.text:00005FA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005FA8
.text:00005FA8 ; =============== S U B R O U T I N E =======================================
.text:00005FA8
.text:00005FA8 ; Attributes: bp-based frame
.text:00005FA8
.text:00005FA8 ; public: __thiscall CMyComPtr<struct IUnknown>::CMyComPtr<struct IUnknown>(void)
.text:00005FA8                 public ??0?$CMyComPtr@UIUnknown@@@@QAE@XZ
.text:00005FA8 ??0?$CMyComPtr@UIUnknown@@@@QAE@XZ proc near
.text:00005FA8                                         ; CODE XREF: CBufInStream::CBufInStream(void)+30p
.text:00005FA8
.text:00005FA8 var_4           = dword ptr -4
.text:00005FA8
.text:00005FA8                 push    ebp
.text:00005FA9                 mov     ebp, esp
.text:00005FAB                 push    ecx
.text:00005FAC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005FB3                 mov     [ebp+var_4], ecx
.text:00005FB6                 mov     eax, [ebp+var_4]
.text:00005FB9                 mov     dword ptr [eax], 0
.text:00005FBF                 mov     eax, [ebp+var_4]
.text:00005FC2                 mov     esp, ebp
.text:00005FC4                 pop     ebp
.text:00005FC5                 retn
.text:00005FC5 ??0?$CMyComPtr@UIUnknown@@@@QAE@XZ endp
.text:00005FC5
.text:00005FC5 ; ---------------------------------------------------------------------------
.text:00005FC6                 align 4
.text:00005FC6 _text           ends
.text:00005FC6
.text:00005FC8 ; ===========================================================================
.text:00005FC8
.text:00005FC8 ; Segment type: Pure code
.text:00005FC8 ; Segment permissions: Read/Execute
.text:00005FC8 _text           segment para public 'CODE' use32
.text:00005FC8                 assume cs:_text
.text:00005FC8                 ;org 5FC8h
.text:00005FC8 ; COMDAT (pick any)
.text:00005FC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005FC8
.text:00005FC8 ; =============== S U B R O U T I N E =======================================
.text:00005FC8
.text:00005FC8 ; Attributes: bp-based frame
.text:00005FC8
.text:00005FC8 ; public: __thiscall CMyComPtr<struct IUnknown>::~CMyComPtr<struct IUnknown>(void)
.text:00005FC8                 public ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ
.text:00005FC8 ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ proc near
.text:00005FC8                                         ; CODE XREF: CBufInStream::~CBufInStream(void)+14p
.text:00005FC8
.text:00005FC8 var_4           = dword ptr -4
.text:00005FC8
.text:00005FC8                 push    ebp
.text:00005FC9                 mov     ebp, esp
.text:00005FCB                 push    ecx
.text:00005FCC                 push    esi
.text:00005FCD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005FD4                 mov     [ebp+var_4], ecx
.text:00005FD7                 mov     eax, [ebp+var_4]
.text:00005FDA                 cmp     dword ptr [eax], 0
.text:00005FDD                 jz      short loc_5FFA
.text:00005FDF                 mov     ecx, [ebp+var_4]
.text:00005FE2                 mov     edx, [ecx]
.text:00005FE4                 mov     eax, [ebp+var_4]
.text:00005FE7                 mov     ecx, [eax]
.text:00005FE9                 mov     edx, [edx]
.text:00005FEB                 mov     esi, esp
.text:00005FED                 push    ecx
.text:00005FEE                 mov     eax, [edx+8]
.text:00005FF1                 call    eax
.text:00005FF3                 cmp     esi, esp
.text:00005FF5                 call    __RTC_CheckEsp
.text:00005FFA
.text:00005FFA loc_5FFA:                               ; CODE XREF: CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>(void)+15j
.text:00005FFA                 pop     esi
.text:00005FFB                 add     esp, 4
.text:00005FFE                 cmp     ebp, esp
.text:00006000                 call    __RTC_CheckEsp
.text:00006005                 mov     esp, ebp
.text:00006007                 pop     ebp
.text:00006008                 retn
.text:00006008 ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ endp
.text:00006008
.text:00006008 ; ---------------------------------------------------------------------------
.text:00006009                 align 4
.text:00006009 _text           ends
.text:00006009
.text:0000600C ; ===========================================================================
.text:0000600C
.text:0000600C ; Segment type: Pure code
.text:0000600C ; Segment permissions: Read/Execute
.text:0000600C _text           segment para public 'CODE' use32
.text:0000600C                 assume cs:_text
.text:0000600C                 ;org 600Ch
.text:0000600C ; COMDAT (pick any)
.text:0000600C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000600C
.text:0000600C ; =============== S U B R O U T I N E =======================================
.text:0000600C
.text:0000600C ; Attributes: bp-based frame
.text:0000600C
.text:0000600C ; public: struct IUnknown * __thiscall CMyComPtr<struct IUnknown>::operator=(struct IUnknown *)
.text:0000600C                 public ??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z
.text:0000600C ??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z proc near
.text:0000600C                                         ; CODE XREF: CBufInStream::Init(uchar const *,uint,IUnknown *)+3Bp
.text:0000600C
.text:0000600C var_4           = dword ptr -4
.text:0000600C arg_0           = dword ptr  8
.text:0000600C
.text:0000600C                 push    ebp
.text:0000600D                 mov     ebp, esp
.text:0000600F                 push    ecx
.text:00006010                 push    esi
.text:00006011                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006018                 mov     [ebp+var_4], ecx
.text:0000601B                 cmp     [ebp+arg_0], 0
.text:0000601F                 jz      short loc_6038
.text:00006021                 mov     eax, [ebp+arg_0]
.text:00006024                 mov     ecx, [eax]
.text:00006026                 mov     esi, esp
.text:00006028                 mov     edx, [ebp+arg_0]
.text:0000602B                 push    edx
.text:0000602C                 mov     eax, [ecx+4]
.text:0000602F                 call    eax
.text:00006031                 cmp     esi, esp
.text:00006033                 call    __RTC_CheckEsp
.text:00006038
.text:00006038 loc_6038:                               ; CODE XREF: CMyComPtr<IUnknown>::operator=(IUnknown *)+13j
.text:00006038                 mov     ecx, [ebp+var_4]
.text:0000603B                 cmp     dword ptr [ecx], 0
.text:0000603E                 jz      short loc_605B
.text:00006040                 mov     edx, [ebp+var_4]
.text:00006043                 mov     eax, [edx]
.text:00006045                 mov     ecx, [ebp+var_4]
.text:00006048                 mov     edx, [ecx]
.text:0000604A                 mov     eax, [eax]
.text:0000604C                 mov     esi, esp
.text:0000604E                 push    edx
.text:0000604F                 mov     ecx, [eax+8]
.text:00006052                 call    ecx
.text:00006054                 cmp     esi, esp
.text:00006056                 call    __RTC_CheckEsp
.text:0000605B
.text:0000605B loc_605B:                               ; CODE XREF: CMyComPtr<IUnknown>::operator=(IUnknown *)+32j
.text:0000605B                 mov     edx, [ebp+var_4]
.text:0000605E                 mov     eax, [ebp+arg_0]
.text:00006061                 mov     [edx], eax
.text:00006063                 mov     eax, [ebp+arg_0]
.text:00006066                 pop     esi
.text:00006067                 add     esp, 4
.text:0000606A                 cmp     ebp, esp
.text:0000606C                 call    __RTC_CheckEsp
.text:00006071                 mov     esp, ebp
.text:00006073                 pop     ebp
.text:00006074                 retn    4
.text:00006074 ??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z endp
.text:00006074
.text:00006074 ; ---------------------------------------------------------------------------
.text:00006077                 align 4
.text:00006077 _text           ends
.text:00006077
.text:00006078 ; ===========================================================================
.text:00006078
.text:00006078 ; Segment type: Pure code
.text:00006078 ; Segment permissions: Read/Execute
.text:00006078 _text           segment para public 'CODE' use32
.text:00006078                 assume cs:_text
.text:00006078                 ;org 6078h
.text:00006078 ; COMDAT (pick any)
.text:00006078                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006078
.text:00006078 ; =============== S U B R O U T I N E =======================================
.text:00006078
.text:00006078 ; Attributes: bp-based frame
.text:00006078
.text:00006078 ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::CMyComPtr<struct ISequentialOutStream>(struct ISequentialOutStream *)
.text:00006078                 public ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z
.text:00006078 ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z proc near
.text:00006078                                         ; CODE XREF: CArchiveUpdateCallback::GetVolumeStream(uint,ISequentialOutStream * *)+135p
.text:00006078
.text:00006078 var_4           = dword ptr -4
.text:00006078 arg_0           = dword ptr  8
.text:00006078
.text:00006078                 push    ebp
.text:00006079                 mov     ebp, esp
.text:0000607B                 push    ecx
.text:0000607C                 push    esi
.text:0000607D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006084                 mov     [ebp+var_4], ecx
.text:00006087                 mov     eax, [ebp+var_4]
.text:0000608A                 mov     ecx, [ebp+arg_0]
.text:0000608D                 mov     [eax], ecx
.text:0000608F                 cmp     [ebp+arg_0], 0
.text:00006093                 jz      short loc_60AC
.text:00006095                 mov     edx, [ebp+arg_0]
.text:00006098                 mov     eax, [edx]
.text:0000609A                 mov     esi, esp
.text:0000609C                 mov     ecx, [ebp+arg_0]
.text:0000609F                 push    ecx
.text:000060A0                 mov     edx, [eax+4]
.text:000060A3                 call    edx
.text:000060A5                 cmp     esi, esp
.text:000060A7                 call    __RTC_CheckEsp
.text:000060AC
.text:000060AC loc_60AC:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(ISequentialOutStream *)+1Bj
.text:000060AC                 mov     eax, [ebp+var_4]
.text:000060AF                 pop     esi
.text:000060B0                 add     esp, 4
.text:000060B3                 cmp     ebp, esp
.text:000060B5                 call    __RTC_CheckEsp
.text:000060BA                 mov     esp, ebp
.text:000060BC                 pop     ebp
.text:000060BD                 retn    4
.text:000060BD ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z endp
.text:000060BD
.text:000060BD _text           ends
.text:000060BD
.text:000060C0 ; ===========================================================================
.text:000060C0
.text:000060C0 ; Segment type: Pure code
.text:000060C0 ; Segment permissions: Read/Execute
.text:000060C0 _text           segment para public 'CODE' use32
.text:000060C0                 assume cs:_text
.text:000060C0                 ;org 60C0h
.text:000060C0 ; COMDAT (pick any)
.text:000060C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000060C0
.text:000060C0 ; =============== S U B R O U T I N E =======================================
.text:000060C0
.text:000060C0 ; Attributes: bp-based frame
.text:000060C0
.text:000060C0 ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::~CMyComPtr<struct ISequentialOutStream>(void)
.text:000060C0                 public ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
.text:000060C0 ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ proc near
.text:000060C0                                         ; CODE XREF: CArchiveUpdateCallback::GetVolumeStream(uint,ISequentialOutStream * *)+187p
.text:000060C0                                         ; CArchiveUpdateCallback::GetVolumeStream(uint,ISequentialOutStream * *)+1D3p ...
.text:000060C0
.text:000060C0 var_4           = dword ptr -4
.text:000060C0
.text:000060C0                 push    ebp
.text:000060C1                 mov     ebp, esp
.text:000060C3                 push    ecx
.text:000060C4                 push    esi
.text:000060C5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000060CC                 mov     [ebp+var_4], ecx
.text:000060CF                 mov     eax, [ebp+var_4]
.text:000060D2                 cmp     dword ptr [eax], 0
.text:000060D5                 jz      short loc_60F2
.text:000060D7                 mov     ecx, [ebp+var_4]
.text:000060DA                 mov     edx, [ecx]
.text:000060DC                 mov     eax, [ebp+var_4]
.text:000060DF                 mov     ecx, [eax]
.text:000060E1                 mov     edx, [edx]
.text:000060E3                 mov     esi, esp
.text:000060E5                 push    ecx
.text:000060E6                 mov     eax, [edx+8]
.text:000060E9                 call    eax
.text:000060EB                 cmp     esi, esp
.text:000060ED                 call    __RTC_CheckEsp
.text:000060F2
.text:000060F2 loc_60F2:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)+15j
.text:000060F2                 pop     esi
.text:000060F3                 add     esp, 4
.text:000060F6                 cmp     ebp, esp
.text:000060F8                 call    __RTC_CheckEsp
.text:000060FD                 mov     esp, ebp
.text:000060FF                 pop     ebp
.text:00006100                 retn
.text:00006100 ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ endp
.text:00006100
.text:00006100 ; ---------------------------------------------------------------------------
.text:00006101                 align 4
.text:00006101 _text           ends
.text:00006101
.text:00006104 ; ===========================================================================
.text:00006104
.text:00006104 ; Segment type: Pure code
.text:00006104 ; Segment permissions: Read/Execute
.text:00006104 _text           segment para public 'CODE' use32
.text:00006104                 assume cs:_text
.text:00006104                 ;org 6104h
.text:00006104 ; COMDAT (pick any)
.text:00006104                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006104
.text:00006104 ; =============== S U B R O U T I N E =======================================
.text:00006104
.text:00006104 ; Attributes: bp-based frame
.text:00006104
.text:00006104 ; public: struct ISequentialOutStream * __thiscall CMyComPtr<struct ISequentialOutStream>::Detach(void)
.text:00006104                 public ?Detach@?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@XZ
.text:00006104 ?Detach@?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@XZ proc near
.text:00006104                                         ; CODE XREF: CArchiveUpdateCallback::GetVolumeStream(uint,ISequentialOutStream * *)+1ACp
.text:00006104
.text:00006104 var_8           = dword ptr -8
.text:00006104 var_4           = dword ptr -4
.text:00006104
.text:00006104                 push    ebp
.text:00006105                 mov     ebp, esp
.text:00006107                 sub     esp, 8
.text:0000610A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006111                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006118                 mov     [ebp+var_4], ecx
.text:0000611B                 mov     eax, [ebp+var_4]
.text:0000611E                 mov     ecx, [eax]
.text:00006120                 mov     [ebp+var_8], ecx
.text:00006123                 mov     edx, [ebp+var_4]
.text:00006126                 mov     dword ptr [edx], 0
.text:0000612C                 mov     eax, [ebp+var_8]
.text:0000612F                 mov     esp, ebp
.text:00006131                 pop     ebp
.text:00006132                 retn
.text:00006132 ?Detach@?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@XZ endp
.text:00006132
.text:00006132 ; ---------------------------------------------------------------------------
.text:00006133                 align 4
.text:00006133 _text           ends
.text:00006133
.text:00006134 ; ===========================================================================
.text:00006134
.text:00006134 ; Segment type: Pure code
.text:00006134 ; Segment permissions: Read/Execute
.text:00006134 _text           segment para public 'CODE' use32
.text:00006134                 assume cs:_text
.text:00006134                 ;org 6134h
.text:00006134 ; COMDAT (pick any)
.text:00006134                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006134
.text:00006134 ; =============== S U B R O U T I N E =======================================
.text:00006134
.text:00006134 ; Attributes: bp-based frame
.text:00006134
.text:00006134 ; public: class CBuffer<unsigned char> const & __thiscall CObjectVector<class CBuffer<unsigned char>>::operator[](unsigned int)const
.text:00006134                 public ??A?$CObjectVector@V?$CBuffer@E@@@@QBEABV?$CBuffer@E@@I@Z
.text:00006134 ??A?$CObjectVector@V?$CBuffer@E@@@@QBEABV?$CBuffer@E@@I@Z proc near
.text:00006134                                         ; CODE XREF: CArchiveUpdateCallback::GetRootRawProp(ulong,void const * *,uint *,uint *)+93p
.text:00006134                                         ; CArchiveUpdateCallback::GetRawProp(uint,ulong,void const * *,uint *,uint *)+197p
.text:00006134
.text:00006134 var_4           = dword ptr -4
.text:00006134 arg_0           = dword ptr  8
.text:00006134
.text:00006134                 push    ebp
.text:00006135                 mov     ebp, esp
.text:00006137                 push    ecx
.text:00006138                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000613F                 mov     [ebp+var_4], ecx
.text:00006142                 mov     eax, [ebp+arg_0]
.text:00006145                 push    eax
.text:00006146                 mov     ecx, [ebp+var_4]
.text:00006149                 call    ??A?$CRecordVector@PAX@@QBEABQAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:0000614E                 mov     eax, [eax]
.text:00006150                 add     esp, 4
.text:00006153                 cmp     ebp, esp
.text:00006155                 call    __RTC_CheckEsp
.text:0000615A                 mov     esp, ebp
.text:0000615C                 pop     ebp
.text:0000615D                 retn    4
.text:0000615D ??A?$CObjectVector@V?$CBuffer@E@@@@QBEABV?$CBuffer@E@@I@Z endp
.text:0000615D
.text:0000615D _text           ends
.text:0000615D
.text:00006160 ; ===========================================================================
.text:00006160
.text:00006160 ; Segment type: Pure code
.text:00006160 ; Segment permissions: Read/Execute
.text:00006160 _text           segment para public 'CODE' use32
.text:00006160                 assume cs:_text
.text:00006160                 ;org 6160h
.text:00006160 ; COMDAT (pick any)
.text:00006160                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006160
.text:00006160 ; =============== S U B R O U T I N E =======================================
.text:00006160
.text:00006160 ; Attributes: bp-based frame
.text:00006160
.text:00006160 ; public: __thiscall CRecordVector<unsigned int>::CRecordVector<unsigned int>(void)
.text:00006160                 public ??0?$CRecordVector@I@@QAE@XZ
.text:00006160 ??0?$CRecordVector@I@@QAE@XZ proc near  ; CODE XREF: CArchiveUpdateCallback::CArchiveUpdateCallback(void)+113p
.text:00006160
.text:00006160 var_4           = dword ptr -4
.text:00006160
.text:00006160                 push    ebp
.text:00006161                 mov     ebp, esp
.text:00006163                 push    ecx
.text:00006164                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000616B                 mov     [ebp+var_4], ecx
.text:0000616E                 mov     eax, [ebp+var_4]
.text:00006171                 mov     dword ptr [eax], 0
.text:00006177                 mov     ecx, [ebp+var_4]
.text:0000617A                 mov     dword ptr [ecx+4], 0
.text:00006181                 mov     edx, [ebp+var_4]
.text:00006184                 mov     dword ptr [edx+8], 0
.text:0000618B                 mov     eax, [ebp+var_4]
.text:0000618E                 mov     esp, ebp
.text:00006190                 pop     ebp
.text:00006191                 retn
.text:00006191 ??0?$CRecordVector@I@@QAE@XZ endp
.text:00006191
.text:00006191 ; ---------------------------------------------------------------------------
.text:00006192                 align 4
.text:00006192 _text           ends
.text:00006192
.text:00006194 ; ===========================================================================
.text:00006194
.text:00006194 ; Segment type: Pure code
.text:00006194 ; Segment permissions: Read/Execute
.text:00006194 _text           segment para public 'CODE' use32
.text:00006194                 assume cs:_text
.text:00006194                 ;org 6194h
.text:00006194 ; COMDAT (pick any)
.text:00006194                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006194
.text:00006194 ; =============== S U B R O U T I N E =======================================
.text:00006194
.text:00006194 ; Attributes: bp-based frame
.text:00006194
.text:00006194 ; public: unsigned int __thiscall CRecordVector<unsigned int>::Size(void)const
.text:00006194                 public ?Size@?$CRecordVector@I@@QBEIXZ
.text:00006194 ?Size@?$CRecordVector@I@@QBEIXZ proc near
.text:00006194                                         ; CODE XREF: CArchiveUpdateCallback::InFileStream_On_Error(uint,ulong)+82p
.text:00006194                                         ; CArchiveUpdateCallback::InFileStream_On_Destroy(uint)+74p
.text:00006194
.text:00006194 var_4           = dword ptr -4
.text:00006194
.text:00006194                 push    ebp
.text:00006195                 mov     ebp, esp
.text:00006197                 push    ecx
.text:00006198                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000619F                 mov     [ebp+var_4], ecx
.text:000061A2                 mov     eax, [ebp+var_4]
.text:000061A5                 mov     eax, [eax+4]
.text:000061A8                 mov     esp, ebp
.text:000061AA                 pop     ebp
.text:000061AB                 retn
.text:000061AB ?Size@?$CRecordVector@I@@QBEIXZ endp
.text:000061AB
.text:000061AB _text           ends
.text:000061AB
.text:000061AC ; ===========================================================================
.text:000061AC
.text:000061AC ; Segment type: Pure code
.text:000061AC ; Segment permissions: Read/Execute
.text:000061AC _text           segment para public 'CODE' use32
.text:000061AC                 assume cs:_text
.text:000061AC                 ;org 61ACh
.text:000061AC ; COMDAT (pick any)
.text:000061AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000061AC
.text:000061AC ; =============== S U B R O U T I N E =======================================
.text:000061AC
.text:000061AC ; Attributes: bp-based frame
.text:000061AC
.text:000061AC ; public: __thiscall CRecordVector<unsigned int>::~CRecordVector<unsigned int>(void)
.text:000061AC                 public ??1?$CRecordVector@I@@QAE@XZ
.text:000061AC ??1?$CRecordVector@I@@QAE@XZ proc near  ; CODE XREF: __unwindfunclet$??0CArchiveUpdateCallback@@QAE@XZ$1+6j
.text:000061AC                                         ; CArchiveUpdateCallback::~CArchiveUpdateCallback(void)+88p ...
.text:000061AC
.text:000061AC var_8           = dword ptr -8
.text:000061AC var_4           = dword ptr -4
.text:000061AC
.text:000061AC                 push    ebp
.text:000061AD                 mov     ebp, esp
.text:000061AF                 sub     esp, 8
.text:000061B2                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000061B9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000061C0                 mov     [ebp+var_4], ecx
.text:000061C3                 mov     eax, [ebp+var_4]
.text:000061C6                 mov     ecx, [eax]
.text:000061C8                 mov     [ebp+var_8], ecx
.text:000061CB                 mov     edx, [ebp+var_8]
.text:000061CE                 push    edx             ; void *
.text:000061CF                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000061D4                 add     esp, 4
.text:000061D7                 add     esp, 8
.text:000061DA                 cmp     ebp, esp
.text:000061DC                 call    __RTC_CheckEsp
.text:000061E1                 mov     esp, ebp
.text:000061E3                 pop     ebp
.text:000061E4                 retn
.text:000061E4 ??1?$CRecordVector@I@@QAE@XZ endp
.text:000061E4
.text:000061E4 ; ---------------------------------------------------------------------------
.text:000061E5                 align 4
.text:000061E5 _text           ends
.text:000061E5
.text:000061E8 ; ===========================================================================
.text:000061E8
.text:000061E8 ; Segment type: Pure code
.text:000061E8 ; Segment permissions: Read/Execute
.text:000061E8 _text           segment para public 'CODE' use32
.text:000061E8                 assume cs:_text
.text:000061E8                 ;org 61E8h
.text:000061E8 ; COMDAT (pick any)
.text:000061E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000061E8
.text:000061E8 ; =============== S U B R O U T I N E =======================================
.text:000061E8
.text:000061E8 ; Attributes: bp-based frame
.text:000061E8
.text:000061E8 ; public: void __thiscall CRecordVector<unsigned int>::Delete(unsigned int)
.text:000061E8                 public ?Delete@?$CRecordVector@I@@QAEXI@Z
.text:000061E8 ?Delete@?$CRecordVector@I@@QAEXI@Z proc near
.text:000061E8                                         ; CODE XREF: CArchiveUpdateCallback::InFileStream_On_Destroy(uint)+9Ep
.text:000061E8
.text:000061E8 var_4           = dword ptr -4
.text:000061E8 arg_0           = dword ptr  8
.text:000061E8
.text:000061E8                 push    ebp
.text:000061E9                 mov     ebp, esp
.text:000061EB                 push    ecx
.text:000061EC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000061F3                 mov     [ebp+var_4], ecx
.text:000061F6                 mov     eax, [ebp+arg_0]
.text:000061F9                 add     eax, 1
.text:000061FC                 push    eax
.text:000061FD                 mov     ecx, [ebp+arg_0]
.text:00006200                 push    ecx
.text:00006201                 mov     ecx, [ebp+var_4]
.text:00006204                 call    ?MoveItems@?$CRecordVector@I@@AAEXII@Z ; CRecordVector<uint>::MoveItems(uint,uint)
.text:00006209                 mov     edx, [ebp+var_4]
.text:0000620C                 mov     eax, [edx+4]
.text:0000620F                 sub     eax, 1
.text:00006212                 mov     ecx, [ebp+var_4]
.text:00006215                 mov     [ecx+4], eax
.text:00006218                 add     esp, 4
.text:0000621B                 cmp     ebp, esp
.text:0000621D                 call    __RTC_CheckEsp
.text:00006222                 mov     esp, ebp
.text:00006224                 pop     ebp
.text:00006225                 retn    4
.text:00006225 ?Delete@?$CRecordVector@I@@QAEXI@Z endp
.text:00006225
.text:00006225 _text           ends
.text:00006225
.text:00006228 ; ===========================================================================
.text:00006228
.text:00006228 ; Segment type: Pure code
.text:00006228 ; Segment permissions: Read/Execute
.text:00006228 _text           segment para public 'CODE' use32
.text:00006228                 assume cs:_text
.text:00006228                 ;org 6228h
.text:00006228 ; COMDAT (pick any)
.text:00006228                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006228
.text:00006228 ; =============== S U B R O U T I N E =======================================
.text:00006228
.text:00006228 ; Attributes: bp-based frame
.text:00006228
.text:00006228 ; public: unsigned int __thiscall CRecordVector<unsigned int>::Add(unsigned int)
.text:00006228                 public ?Add@?$CRecordVector@I@@QAEII@Z
.text:00006228 ?Add@?$CRecordVector@I@@QAEII@Z proc near
.text:00006228                                         ; CODE XREF: CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+537p
.text:00006228
.text:00006228 var_8           = dword ptr -8
.text:00006228 var_4           = dword ptr -4
.text:00006228 arg_0           = dword ptr  8
.text:00006228
.text:00006228                 push    ebp
.text:00006229                 mov     ebp, esp
.text:0000622B                 sub     esp, 8
.text:0000622E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006235                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000623C                 mov     [ebp+var_4], ecx
.text:0000623F                 mov     ecx, [ebp+var_4]
.text:00006242                 call    ?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ ; CRecordVector<uint>::ReserveOnePosition(void)
.text:00006247                 mov     eax, [ebp+var_4]
.text:0000624A                 mov     ecx, [eax+4]
.text:0000624D                 mov     edx, [ebp+var_4]
.text:00006250                 mov     eax, [edx]
.text:00006252                 mov     edx, [ebp+arg_0]
.text:00006255                 mov     [eax+ecx*4], edx
.text:00006258                 mov     eax, [ebp+var_4]
.text:0000625B                 mov     ecx, [eax+4]
.text:0000625E                 mov     [ebp+var_8], ecx
.text:00006261                 mov     edx, [ebp+var_4]
.text:00006264                 mov     eax, [edx+4]
.text:00006267                 add     eax, 1
.text:0000626A                 mov     ecx, [ebp+var_4]
.text:0000626D                 mov     [ecx+4], eax
.text:00006270                 mov     eax, [ebp+var_8]
.text:00006273                 add     esp, 8
.text:00006276                 cmp     ebp, esp
.text:00006278                 call    __RTC_CheckEsp
.text:0000627D                 mov     esp, ebp
.text:0000627F                 pop     ebp
.text:00006280                 retn    4
.text:00006280 ?Add@?$CRecordVector@I@@QAEII@Z endp
.text:00006280
.text:00006280 ; ---------------------------------------------------------------------------
.text:00006283                 align 4
.text:00006283 _text           ends
.text:00006283
.text:00006284 ; ===========================================================================
.text:00006284
.text:00006284 ; Segment type: Pure code
.text:00006284 ; Segment permissions: Read/Execute
.text:00006284 _text           segment para public 'CODE' use32
.text:00006284                 assume cs:_text
.text:00006284                 ;org 6284h
.text:00006284 ; COMDAT (pick any)
.text:00006284                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006284
.text:00006284 ; =============== S U B R O U T I N E =======================================
.text:00006284
.text:00006284 ; Attributes: bp-based frame
.text:00006284
.text:00006284 ; public: unsigned int & __thiscall CRecordVector<unsigned int>::operator[](unsigned int)
.text:00006284                 public ??A?$CRecordVector@I@@QAEAAII@Z
.text:00006284 ??A?$CRecordVector@I@@QAEAAII@Z proc near
.text:00006284                                         ; CODE XREF: CArchiveUpdateCallback::InFileStream_On_Error(uint,ulong)+96p
.text:00006284                                         ; CArchiveUpdateCallback::InFileStream_On_Destroy(uint)+88p
.text:00006284
.text:00006284 var_4           = dword ptr -4
.text:00006284 arg_0           = dword ptr  8
.text:00006284
.text:00006284                 push    ebp
.text:00006285                 mov     ebp, esp
.text:00006287                 push    ecx
.text:00006288                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000628F                 mov     [ebp+var_4], ecx
.text:00006292                 mov     eax, [ebp+var_4]
.text:00006295                 mov     ecx, [eax]
.text:00006297                 mov     edx, [ebp+arg_0]
.text:0000629A                 lea     eax, [ecx+edx*4]
.text:0000629D                 mov     esp, ebp
.text:0000629F                 pop     ebp
.text:000062A0                 retn    4
.text:000062A0 ??A?$CRecordVector@I@@QAEAAII@Z endp
.text:000062A0
.text:000062A0 ; ---------------------------------------------------------------------------
.text:000062A3                 align 4
.text:000062A3 _text           ends
.text:000062A3
.text:000062A4 ; ===========================================================================
.text:000062A4
.text:000062A4 ; Segment type: Pure code
.text:000062A4 ; Segment permissions: Read/Execute
.text:000062A4 _text           segment para public 'CODE' use32
.text:000062A4                 assume cs:_text
.text:000062A4                 ;org 62A4h
.text:000062A4 ; COMDAT (pick any)
.text:000062A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000062A4
.text:000062A4 ; =============== S U B R O U T I N E =======================================
.text:000062A4
.text:000062A4 ; Attributes: bp-based frame
.text:000062A4
.text:000062A4 ; public: struct CDirItem const & __thiscall CObjectVector<struct CDirItem>::operator[](unsigned int)const
.text:000062A4                 public ??A?$CObjectVector@UCDirItem@@@@QBEABUCDirItem@@I@Z
.text:000062A4 ??A?$CObjectVector@UCDirItem@@@@QBEABUCDirItem@@I@Z proc near
.text:000062A4                                         ; CODE XREF: CArchiveUpdateCallback::GetRawProp(uint,ulong,void const * *,uint *,uint *)+154p
.text:000062A4                                         ; CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+EBp ...
.text:000062A4
.text:000062A4 var_4           = dword ptr -4
.text:000062A4 arg_0           = dword ptr  8
.text:000062A4
.text:000062A4                 push    ebp
.text:000062A5                 mov     ebp, esp
.text:000062A7                 push    ecx
.text:000062A8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000062AF                 mov     [ebp+var_4], ecx
.text:000062B2                 mov     eax, [ebp+arg_0]
.text:000062B5                 push    eax
.text:000062B6                 mov     ecx, [ebp+var_4]
.text:000062B9                 call    ??A?$CRecordVector@PAX@@QBEABQAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:000062BE                 mov     eax, [eax]
.text:000062C0                 add     esp, 4
.text:000062C3                 cmp     ebp, esp
.text:000062C5                 call    __RTC_CheckEsp
.text:000062CA                 mov     esp, ebp
.text:000062CC                 pop     ebp
.text:000062CD                 retn    4
.text:000062CD ??A?$CObjectVector@UCDirItem@@@@QBEABUCDirItem@@I@Z endp
.text:000062CD
.text:000062CD _text           ends
.text:000062CD
.text:000062D0 ; ===========================================================================
.text:000062D0
.text:000062D0 ; Segment type: Pure code
.text:000062D0 ; Segment permissions: Read/Execute
.text:000062D0 _text           segment para public 'CODE' use32
.text:000062D0                 assume cs:_text
.text:000062D0                 ;org 62D0h
.text:000062D0 ; COMDAT (pick any)
.text:000062D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000062D0
.text:000062D0 ; =============== S U B R O U T I N E =======================================
.text:000062D0
.text:000062D0 ; Attributes: bp-based frame
.text:000062D0
.text:000062D0 ; public: __thiscall CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>(void)
.text:000062D0                 public ??0?$CRecordVector@_K@@QAE@XZ
.text:000062D0 ??0?$CRecordVector@_K@@QAE@XZ proc near ; CODE XREF: CArchiveUpdateCallback::CArchiveUpdateCallback(void)+131p
.text:000062D0
.text:000062D0 var_4           = dword ptr -4
.text:000062D0
.text:000062D0                 push    ebp
.text:000062D1                 mov     ebp, esp
.text:000062D3                 push    ecx
.text:000062D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000062DB                 mov     [ebp+var_4], ecx
.text:000062DE                 mov     eax, [ebp+var_4]
.text:000062E1                 mov     dword ptr [eax], 0
.text:000062E7                 mov     ecx, [ebp+var_4]
.text:000062EA                 mov     dword ptr [ecx+4], 0
.text:000062F1                 mov     edx, [ebp+var_4]
.text:000062F4                 mov     dword ptr [edx+8], 0
.text:000062FB                 mov     eax, [ebp+var_4]
.text:000062FE                 mov     esp, ebp
.text:00006300                 pop     ebp
.text:00006301                 retn
.text:00006301 ??0?$CRecordVector@_K@@QAE@XZ endp
.text:00006301
.text:00006301 ; ---------------------------------------------------------------------------
.text:00006302                 align 4
.text:00006302 _text           ends
.text:00006302
.text:00006304 ; ===========================================================================
.text:00006304
.text:00006304 ; Segment type: Pure code
.text:00006304 ; Segment permissions: Read/Execute
.text:00006304 _text           segment para public 'CODE' use32
.text:00006304                 assume cs:_text
.text:00006304                 ;org 6304h
.text:00006304 ; COMDAT (pick any)
.text:00006304                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006304
.text:00006304 ; =============== S U B R O U T I N E =======================================
.text:00006304
.text:00006304 ; Attributes: bp-based frame
.text:00006304
.text:00006304 ; public: unsigned int __thiscall CRecordVector<unsigned __int64>::Size(void)const
.text:00006304                 public ?Size@?$CRecordVector@_K@@QBEIXZ
.text:00006304 ?Size@?$CRecordVector@_K@@QBEIXZ proc near
.text:00006304                                         ; CODE XREF: CArchiveUpdateCallback::GetVolumeSize(uint,unsigned __int64 *)+9p
.text:00006304                                         ; CArchiveUpdateCallback::GetVolumeSize(uint,unsigned __int64 *)+1Fp ...
.text:00006304
.text:00006304 var_4           = dword ptr -4
.text:00006304
.text:00006304                 push    ebp
.text:00006305                 mov     ebp, esp
.text:00006307                 push    ecx
.text:00006308                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000630F                 mov     [ebp+var_4], ecx
.text:00006312                 mov     eax, [ebp+var_4]
.text:00006315                 mov     eax, [eax+4]
.text:00006318                 mov     esp, ebp
.text:0000631A                 pop     ebp
.text:0000631B                 retn
.text:0000631B ?Size@?$CRecordVector@_K@@QBEIXZ endp
.text:0000631B
.text:0000631B _text           ends
.text:0000631B
.text:0000631C ; ===========================================================================
.text:0000631C
.text:0000631C ; Segment type: Pure code
.text:0000631C ; Segment permissions: Read/Execute
.text:0000631C _text           segment para public 'CODE' use32
.text:0000631C                 assume cs:_text
.text:0000631C                 ;org 631Ch
.text:0000631C ; COMDAT (pick any)
.text:0000631C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000631C
.text:0000631C ; =============== S U B R O U T I N E =======================================
.text:0000631C
.text:0000631C ; Attributes: bp-based frame
.text:0000631C
.text:0000631C ; public: __thiscall CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text:0000631C                 public ??1?$CRecordVector@_K@@QAE@XZ
.text:0000631C ??1?$CRecordVector@_K@@QAE@XZ proc near ; CODE XREF: __unwindfunclet$??0CArchiveUpdateCallback@@QAE@XZ$3+6j
.text:0000631C                                         ; CArchiveUpdateCallback::~CArchiveUpdateCallback(void)+6Ap ...
.text:0000631C
.text:0000631C var_8           = dword ptr -8
.text:0000631C var_4           = dword ptr -4
.text:0000631C
.text:0000631C                 push    ebp
.text:0000631D                 mov     ebp, esp
.text:0000631F                 sub     esp, 8
.text:00006322                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006329                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006330                 mov     [ebp+var_4], ecx
.text:00006333                 mov     eax, [ebp+var_4]
.text:00006336                 mov     ecx, [eax]
.text:00006338                 mov     [ebp+var_8], ecx
.text:0000633B                 mov     edx, [ebp+var_8]
.text:0000633E                 push    edx             ; void *
.text:0000633F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006344                 add     esp, 4
.text:00006347                 add     esp, 8
.text:0000634A                 cmp     ebp, esp
.text:0000634C                 call    __RTC_CheckEsp
.text:00006351                 mov     esp, ebp
.text:00006353                 pop     ebp
.text:00006354                 retn
.text:00006354 ??1?$CRecordVector@_K@@QAE@XZ endp
.text:00006354
.text:00006354 ; ---------------------------------------------------------------------------
.text:00006355                 align 4
.text:00006355 _text           ends
.text:00006355
.text:00006358 ; ===========================================================================
.text:00006358
.text:00006358 ; Segment type: Pure code
.text:00006358 ; Segment permissions: Read/Execute
.text:00006358 _text           segment para public 'CODE' use32
.text:00006358                 assume cs:_text
.text:00006358                 ;org 6358h
.text:00006358 ; COMDAT (pick any)
.text:00006358                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006358
.text:00006358 ; =============== S U B R O U T I N E =======================================
.text:00006358
.text:00006358 ; Attributes: bp-based frame
.text:00006358
.text:00006358 ; public: unsigned __int64 & __thiscall CRecordVector<unsigned __int64>::operator[](unsigned int)
.text:00006358                 public ??A?$CRecordVector@_K@@QAEAA_KI@Z
.text:00006358 ??A?$CRecordVector@_K@@QAEAA_KI@Z proc near
.text:00006358                                         ; CODE XREF: CArchiveUpdateCallback::GetVolumeSize(uint,unsigned __int64 *)+44p
.text:00006358
.text:00006358 var_4           = dword ptr -4
.text:00006358 arg_0           = dword ptr  8
.text:00006358
.text:00006358                 push    ebp
.text:00006359                 mov     ebp, esp
.text:0000635B                 push    ecx
.text:0000635C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006363                 mov     [ebp+var_4], ecx
.text:00006366                 mov     eax, [ebp+var_4]
.text:00006369                 mov     ecx, [eax]
.text:0000636B                 mov     edx, [ebp+arg_0]
.text:0000636E                 lea     eax, [ecx+edx*8]
.text:00006371                 mov     esp, ebp
.text:00006373                 pop     ebp
.text:00006374                 retn    4
.text:00006374 ??A?$CRecordVector@_K@@QAEAA_KI@Z endp
.text:00006374
.text:00006374 ; ---------------------------------------------------------------------------
.text:00006377                 align 4
.text:00006377 _text           ends
.text:00006377
.text:00006378 ; ===========================================================================
.text:00006378
.text:00006378 ; Segment type: Pure code
.text:00006378 ; Segment permissions: Read/Execute
.text:00006378 _text           segment para public 'CODE' use32
.text:00006378                 assume cs:_text
.text:00006378                 ;org 6378h
.text:00006378 ; COMDAT (pick any)
.text:00006378                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006378
.text:00006378 ; =============== S U B R O U T I N E =======================================
.text:00006378
.text:00006378 ; Attributes: bp-based frame
.text:00006378
.text:00006378 ; public: __thiscall CMyComPtr<struct IInArchive>::CMyComPtr<struct IInArchive>(void)
.text:00006378                 public ??0?$CMyComPtr@UIInArchive@@@@QAE@XZ
.text:00006378 ??0?$CMyComPtr@UIInArchive@@@@QAE@XZ proc near
.text:00006378                                         ; CODE XREF: CArchiveUpdateCallback::CArchiveUpdateCallback(void)+192p
.text:00006378
.text:00006378 var_4           = dword ptr -4
.text:00006378
.text:00006378                 push    ebp
.text:00006379                 mov     ebp, esp
.text:0000637B                 push    ecx
.text:0000637C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006383                 mov     [ebp+var_4], ecx
.text:00006386                 mov     eax, [ebp+var_4]
.text:00006389                 mov     dword ptr [eax], 0
.text:0000638F                 mov     eax, [ebp+var_4]
.text:00006392                 mov     esp, ebp
.text:00006394                 pop     ebp
.text:00006395                 retn
.text:00006395 ??0?$CMyComPtr@UIInArchive@@@@QAE@XZ endp
.text:00006395
.text:00006395 ; ---------------------------------------------------------------------------
.text:00006396                 align 4
.text:00006396 _text           ends
.text:00006396
.text:00006398 ; ===========================================================================
.text:00006398
.text:00006398 ; Segment type: Pure code
.text:00006398 ; Segment permissions: Read/Execute
.text:00006398 _text           segment para public 'CODE' use32
.text:00006398                 assume cs:_text
.text:00006398                 ;org 6398h
.text:00006398 ; COMDAT (pick any)
.text:00006398                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006398
.text:00006398 ; =============== S U B R O U T I N E =======================================
.text:00006398
.text:00006398 ; Attributes: bp-based frame
.text:00006398
.text:00006398 ; public: __thiscall CMyComPtr<struct IInArchive>::~CMyComPtr<struct IInArchive>(void)
.text:00006398                 public ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ
.text:00006398 ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ proc near
.text:00006398                                         ; CODE XREF: __unwindfunclet$??0CArchiveUpdateCallback@@QAE@XZ$6+9j
.text:00006398                                         ; CArchiveUpdateCallback::~CArchiveUpdateCallback(void)+3Dp
.text:00006398
.text:00006398 var_4           = dword ptr -4
.text:00006398
.text:00006398                 push    ebp
.text:00006399                 mov     ebp, esp
.text:0000639B                 push    ecx
.text:0000639C                 push    esi
.text:0000639D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000063A4                 mov     [ebp+var_4], ecx
.text:000063A7                 mov     eax, [ebp+var_4]
.text:000063AA                 cmp     dword ptr [eax], 0
.text:000063AD                 jz      short loc_63CA
.text:000063AF                 mov     ecx, [ebp+var_4]
.text:000063B2                 mov     edx, [ecx]
.text:000063B4                 mov     eax, [ebp+var_4]
.text:000063B7                 mov     ecx, [eax]
.text:000063B9                 mov     edx, [edx]
.text:000063BB                 mov     esi, esp
.text:000063BD                 push    ecx
.text:000063BE                 mov     eax, [edx+8]
.text:000063C1                 call    eax
.text:000063C3                 cmp     esi, esp
.text:000063C5                 call    __RTC_CheckEsp
.text:000063CA
.text:000063CA loc_63CA:                               ; CODE XREF: CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>(void)+15j
.text:000063CA                 pop     esi
.text:000063CB                 add     esp, 4
.text:000063CE                 cmp     ebp, esp
.text:000063D0                 call    __RTC_CheckEsp
.text:000063D5                 mov     esp, ebp
.text:000063D7                 pop     ebp
.text:000063D8                 retn
.text:000063D8 ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ endp
.text:000063D8
.text:000063D8 ; ---------------------------------------------------------------------------
.text:000063D9                 align 4
.text:000063D9 _text           ends
.text:000063D9
.text:000063DC ; ===========================================================================
.text:000063DC
.text:000063DC ; Segment type: Pure code
.text:000063DC ; Segment permissions: Read/Execute
.text:000063DC _text           segment para public 'CODE' use32
.text:000063DC                 assume cs:_text
.text:000063DC                 ;org 63DCh
.text:000063DC ; COMDAT (pick any)
.text:000063DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000063DC
.text:000063DC ; =============== S U B R O U T I N E =======================================
.text:000063DC
.text:000063DC ; Attributes: bp-based frame
.text:000063DC
.text:000063DC ; public: __thiscall CMyComPtr<struct IInArchive>::operator struct IInArchive *(void)const
.text:000063DC                 public ??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ
.text:000063DC ??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ proc near
.text:000063DC                                         ; CODE XREF: CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+4E8p
.text:000063DC                                         ; CArchiveUpdateCallback::ReportOperation(uint,uint,uint)+2C6p ...
.text:000063DC
.text:000063DC var_4           = dword ptr -4
.text:000063DC
.text:000063DC                 push    ebp
.text:000063DD                 mov     ebp, esp
.text:000063DF                 push    ecx
.text:000063E0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000063E7                 mov     [ebp+var_4], ecx
.text:000063EA                 mov     eax, [ebp+var_4]
.text:000063ED                 mov     eax, [eax]
.text:000063EF                 mov     esp, ebp
.text:000063F1                 pop     ebp
.text:000063F2                 retn
.text:000063F2 ??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ endp
.text:000063F2
.text:000063F2 ; ---------------------------------------------------------------------------
.text:000063F3                 align 4
.text:000063F3 _text           ends
.text:000063F3
.text:000063F4 ; ===========================================================================
.text:000063F4
.text:000063F4 ; Segment type: Pure code
.text:000063F4 ; Segment permissions: Read/Execute
.text:000063F4 _text           segment para public 'CODE' use32
.text:000063F4                 assume cs:_text
.text:000063F4                 ;org 63F4h
.text:000063F4 ; COMDAT (pick any)
.text:000063F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000063F4
.text:000063F4 ; =============== S U B R O U T I N E =======================================
.text:000063F4
.text:000063F4 ; Attributes: bp-based frame
.text:000063F4
.text:000063F4 ; public: struct IInArchive * __thiscall CMyComPtr<struct IInArchive>::operator->(void)const
.text:000063F4                 public ??C?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ
.text:000063F4 ??C?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ proc near
.text:000063F4                                         ; CODE XREF: CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+54Dp
.text:000063F4
.text:000063F4 var_4           = dword ptr -4
.text:000063F4
.text:000063F4                 push    ebp
.text:000063F5                 mov     ebp, esp
.text:000063F7                 push    ecx
.text:000063F8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000063FF                 mov     [ebp+var_4], ecx
.text:00006402                 mov     eax, [ebp+var_4]
.text:00006405                 mov     eax, [eax]
.text:00006407                 mov     esp, ebp
.text:00006409                 pop     ebp
.text:0000640A                 retn
.text:0000640A ??C?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ endp
.text:0000640A
.text:0000640A ; ---------------------------------------------------------------------------
.text:0000640B                 align 4
.text:0000640B _text           ends
.text:0000640B
.text:0000640C ; ===========================================================================
.text:0000640C
.text:0000640C ; Segment type: Pure code
.text:0000640C ; Segment permissions: Read/Execute
.text:0000640C _text           segment para public 'CODE' use32
.text:0000640C                 assume cs:_text
.text:0000640C                 ;org 640Ch
.text:0000640C ; COMDAT (pick any)
.text:0000640C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000640C
.text:0000640C ; =============== S U B R O U T I N E =======================================
.text:0000640C
.text:0000640C ; Attributes: bp-based frame
.text:0000640C
.text:0000640C ; public: __thiscall CMyComPtr<struct IArchiveGetRawProps>::operator struct IArchiveGetRawProps *(void)const
.text:0000640C                 public ??B?$CMyComPtr@UIArchiveGetRawProps@@@@QBEPAUIArchiveGetRawProps@@XZ
.text:0000640C ??B?$CMyComPtr@UIArchiveGetRawProps@@@@QBEPAUIArchiveGetRawProps@@XZ proc near
.text:0000640C                                         ; CODE XREF: CArchiveUpdateCallback::GetRawProp(uint,ulong,void const * *,uint *,uint *)+A1p
.text:0000640C
.text:0000640C var_4           = dword ptr -4
.text:0000640C
.text:0000640C                 push    ebp
.text:0000640D                 mov     ebp, esp
.text:0000640F                 push    ecx
.text:00006410                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006417                 mov     [ebp+var_4], ecx
.text:0000641A                 mov     eax, [ebp+var_4]
.text:0000641D                 mov     eax, [eax]
.text:0000641F                 mov     esp, ebp
.text:00006421                 pop     ebp
.text:00006422                 retn
.text:00006422 ??B?$CMyComPtr@UIArchiveGetRawProps@@@@QBEPAUIArchiveGetRawProps@@XZ endp
.text:00006422
.text:00006422 ; ---------------------------------------------------------------------------
.text:00006423                 align 4
.text:00006423 _text           ends
.text:00006423
.text:00006424 ; ===========================================================================
.text:00006424
.text:00006424 ; Segment type: Pure code
.text:00006424 ; Segment permissions: Read/Execute
.text:00006424 _text           segment para public 'CODE' use32
.text:00006424                 assume cs:_text
.text:00006424                 ;org 6424h
.text:00006424 ; COMDAT (pick any)
.text:00006424                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006424
.text:00006424 ; =============== S U B R O U T I N E =======================================
.text:00006424
.text:00006424 ; Attributes: bp-based frame
.text:00006424
.text:00006424 ; public: struct IArchiveGetRawProps * __thiscall CMyComPtr<struct IArchiveGetRawProps>::operator->(void)const
.text:00006424                 public ??C?$CMyComPtr@UIArchiveGetRawProps@@@@QBEPAUIArchiveGetRawProps@@XZ
.text:00006424 ??C?$CMyComPtr@UIArchiveGetRawProps@@@@QBEPAUIArchiveGetRawProps@@XZ proc near
.text:00006424                                         ; CODE XREF: CArchiveUpdateCallback::GetRawProp(uint,ulong,void const * *,uint *,uint *)+E5p
.text:00006424
.text:00006424 var_4           = dword ptr -4
.text:00006424
.text:00006424                 push    ebp
.text:00006425                 mov     ebp, esp
.text:00006427                 push    ecx
.text:00006428                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000642F                 mov     [ebp+var_4], ecx
.text:00006432                 mov     eax, [ebp+var_4]
.text:00006435                 mov     eax, [eax]
.text:00006437                 mov     esp, ebp
.text:00006439                 pop     ebp
.text:0000643A                 retn
.text:0000643A ??C?$CMyComPtr@UIArchiveGetRawProps@@@@QBEPAUIArchiveGetRawProps@@XZ endp
.text:0000643A
.text:0000643A ; ---------------------------------------------------------------------------
.text:0000643B                 align 4
.text:0000643B _text           ends
.text:0000643B
.text:0000643C ; ===========================================================================
.text:0000643C
.text:0000643C ; Segment type: Pure code
.text:0000643C ; Segment permissions: Read/Execute
.text:0000643C _text           segment para public 'CODE' use32
.text:0000643C                 assume cs:_text
.text:0000643C                 ;org 643Ch
.text:0000643C ; COMDAT (pick any)
.text:0000643C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000643C
.text:0000643C ; =============== S U B R O U T I N E =======================================
.text:0000643C
.text:0000643C ; Attributes: bp-based frame
.text:0000643C
.text:0000643C ; public: __thiscall CMyComPtr<struct IArchiveGetRootProps>::operator struct IArchiveGetRootProps *(void)const
.text:0000643C                 public ??B?$CMyComPtr@UIArchiveGetRootProps@@@@QBEPAUIArchiveGetRootProps@@XZ
.text:0000643C ??B?$CMyComPtr@UIArchiveGetRootProps@@@@QBEPAUIArchiveGetRootProps@@XZ proc near
.text:0000643C                                         ; CODE XREF: CArchiveUpdateCallback::GetRootRawProp(ulong,void const * *,uint *,uint *)+D4p
.text:0000643C
.text:0000643C var_4           = dword ptr -4
.text:0000643C
.text:0000643C                 push    ebp
.text:0000643D                 mov     ebp, esp
.text:0000643F                 push    ecx
.text:00006440                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006447                 mov     [ebp+var_4], ecx
.text:0000644A                 mov     eax, [ebp+var_4]
.text:0000644D                 mov     eax, [eax]
.text:0000644F                 mov     esp, ebp
.text:00006451                 pop     ebp
.text:00006452                 retn
.text:00006452 ??B?$CMyComPtr@UIArchiveGetRootProps@@@@QBEPAUIArchiveGetRootProps@@XZ endp
.text:00006452
.text:00006452 ; ---------------------------------------------------------------------------
.text:00006453                 align 4
.text:00006453 _text           ends
.text:00006453
.text:00006454 ; ===========================================================================
.text:00006454
.text:00006454 ; Segment type: Pure code
.text:00006454 ; Segment permissions: Read/Execute
.text:00006454 _text           segment para public 'CODE' use32
.text:00006454                 assume cs:_text
.text:00006454                 ;org 6454h
.text:00006454 ; COMDAT (pick any)
.text:00006454                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006454
.text:00006454 ; =============== S U B R O U T I N E =======================================
.text:00006454
.text:00006454 ; Attributes: bp-based frame
.text:00006454
.text:00006454 ; public: struct IArchiveGetRootProps * __thiscall CMyComPtr<struct IArchiveGetRootProps>::operator->(void)const
.text:00006454                 public ??C?$CMyComPtr@UIArchiveGetRootProps@@@@QBEPAUIArchiveGetRootProps@@XZ
.text:00006454 ??C?$CMyComPtr@UIArchiveGetRootProps@@@@QBEPAUIArchiveGetRootProps@@XZ proc near
.text:00006454                                         ; CODE XREF: CArchiveUpdateCallback::GetRootRawProp(ulong,void const * *,uint *,uint *)+E6p
.text:00006454
.text:00006454 var_4           = dword ptr -4
.text:00006454
.text:00006454                 push    ebp
.text:00006455                 mov     ebp, esp
.text:00006457                 push    ecx
.text:00006458                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000645F                 mov     [ebp+var_4], ecx
.text:00006462                 mov     eax, [ebp+var_4]
.text:00006465                 mov     eax, [eax]
.text:00006467                 mov     esp, ebp
.text:00006469                 pop     ebp
.text:0000646A                 retn
.text:0000646A ??C?$CMyComPtr@UIArchiveGetRootProps@@@@QBEPAUIArchiveGetRootProps@@XZ endp
.text:0000646A
.text:0000646A ; ---------------------------------------------------------------------------
.text:0000646B                 align 4
.text:0000646B _text           ends
.text:0000646B
.text:0000646C ; ===========================================================================
.text:0000646C
.text:0000646C ; Segment type: Pure code
.text:0000646C ; Segment permissions: Read/Execute
.text:0000646C _text           segment para public 'CODE' use32
.text:0000646C                 assume cs:_text
.text:0000646C                 ;org 646Ch
.text:0000646C ; COMDAT (pick any)
.text:0000646C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000646C
.text:0000646C ; =============== S U B R O U T I N E =======================================
.text:0000646C
.text:0000646C ; Attributes: bp-based frame
.text:0000646C
.text:0000646C ; public: __thiscall CRecordVector<struct CKeyKeyValPair>::CRecordVector<struct CKeyKeyValPair>(void)
.text:0000646C                 public ??0?$CRecordVector@UCKeyKeyValPair@@@@QAE@XZ
.text:0000646C ??0?$CRecordVector@UCKeyKeyValPair@@@@QAE@XZ proc near
.text:0000646C                                         ; CODE XREF: CArchiveUpdateCallback::CArchiveUpdateCallback(void)+F7p
.text:0000646C
.text:0000646C var_4           = dword ptr -4
.text:0000646C
.text:0000646C                 push    ebp
.text:0000646D                 mov     ebp, esp
.text:0000646F                 push    ecx
.text:00006470                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006477                 mov     [ebp+var_4], ecx
.text:0000647A                 mov     eax, [ebp+var_4]
.text:0000647D                 mov     dword ptr [eax], 0
.text:00006483                 mov     ecx, [ebp+var_4]
.text:00006486                 mov     dword ptr [ecx+4], 0
.text:0000648D                 mov     edx, [ebp+var_4]
.text:00006490                 mov     dword ptr [edx+8], 0
.text:00006497                 mov     eax, [ebp+var_4]
.text:0000649A                 mov     esp, ebp
.text:0000649C                 pop     ebp
.text:0000649D                 retn
.text:0000649D ??0?$CRecordVector@UCKeyKeyValPair@@@@QAE@XZ endp
.text:0000649D
.text:0000649D ; ---------------------------------------------------------------------------
.text:0000649E                 align 10h
.text:0000649E _text           ends
.text:0000649E
.text:000064A0 ; ===========================================================================
.text:000064A0
.text:000064A0 ; Segment type: Pure code
.text:000064A0 ; Segment permissions: Read/Execute
.text:000064A0 _text           segment para public 'CODE' use32
.text:000064A0                 assume cs:_text
.text:000064A0                 ;org 64A0h
.text:000064A0 ; COMDAT (pick any)
.text:000064A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000064A0
.text:000064A0 ; =============== S U B R O U T I N E =======================================
.text:000064A0
.text:000064A0 ; Attributes: bp-based frame
.text:000064A0
.text:000064A0 ; public: unsigned int __thiscall CRecordVector<struct CKeyKeyValPair>::Size(void)const
.text:000064A0                 public ?Size@?$CRecordVector@UCKeyKeyValPair@@@@QBEIXZ
.text:000064A0 ?Size@?$CRecordVector@UCKeyKeyValPair@@@@QBEIXZ proc near
.text:000064A0                                         ; CODE XREF: CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+752p
.text:000064A0                                         ; CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+793p
.text:000064A0
.text:000064A0 var_4           = dword ptr -4
.text:000064A0
.text:000064A0                 push    ebp
.text:000064A1                 mov     ebp, esp
.text:000064A3                 push    ecx
.text:000064A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000064AB                 mov     [ebp+var_4], ecx
.text:000064AE                 mov     eax, [ebp+var_4]
.text:000064B1                 mov     eax, [eax+4]
.text:000064B4                 mov     esp, ebp
.text:000064B6                 pop     ebp
.text:000064B7                 retn
.text:000064B7 ?Size@?$CRecordVector@UCKeyKeyValPair@@@@QBEIXZ endp
.text:000064B7
.text:000064B7 _text           ends
.text:000064B7
.text:000064B8 ; ===========================================================================
.text:000064B8
.text:000064B8 ; Segment type: Pure code
.text:000064B8 ; Segment permissions: Read/Execute
.text:000064B8 _text           segment para public 'CODE' use32
.text:000064B8                 assume cs:_text
.text:000064B8                 ;org 64B8h
.text:000064B8 ; COMDAT (pick any)
.text:000064B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000064B8
.text:000064B8 ; =============== S U B R O U T I N E =======================================
.text:000064B8
.text:000064B8 ; Attributes: bp-based frame
.text:000064B8
.text:000064B8 ; public: __thiscall CRecordVector<struct CKeyKeyValPair>::~CRecordVector<struct CKeyKeyValPair>(void)
.text:000064B8                 public ??1?$CRecordVector@UCKeyKeyValPair@@@@QAE@XZ
.text:000064B8 ??1?$CRecordVector@UCKeyKeyValPair@@@@QAE@XZ proc near
.text:000064B8                                         ; CODE XREF: __unwindfunclet$??0CArchiveUpdateCallback@@QAE@XZ$0+6j
.text:000064B8                                         ; CArchiveUpdateCallback::~CArchiveUpdateCallback(void)+9Ap ...
.text:000064B8
.text:000064B8 var_8           = dword ptr -8
.text:000064B8 var_4           = dword ptr -4
.text:000064B8
.text:000064B8                 push    ebp
.text:000064B9                 mov     ebp, esp
.text:000064BB                 sub     esp, 8
.text:000064BE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000064C5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000064CC                 mov     [ebp+var_4], ecx
.text:000064CF                 mov     eax, [ebp+var_4]
.text:000064D2                 mov     ecx, [eax]
.text:000064D4                 mov     [ebp+var_8], ecx
.text:000064D7                 mov     edx, [ebp+var_8]
.text:000064DA                 push    edx             ; void *
.text:000064DB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000064E0                 add     esp, 4
.text:000064E3                 add     esp, 8
.text:000064E6                 cmp     ebp, esp
.text:000064E8                 call    __RTC_CheckEsp
.text:000064ED                 mov     esp, ebp
.text:000064EF                 pop     ebp
.text:000064F0                 retn
.text:000064F0 ??1?$CRecordVector@UCKeyKeyValPair@@@@QAE@XZ endp
.text:000064F0
.text:000064F0 ; ---------------------------------------------------------------------------
.text:000064F1                 align 4
.text:000064F1 _text           ends
.text:000064F1
.text:000064F4 ; ===========================================================================
.text:000064F4
.text:000064F4 ; Segment type: Pure code
.text:000064F4 ; Segment permissions: Read/Execute
.text:000064F4 _text           segment para public 'CODE' use32
.text:000064F4                 assume cs:_text
.text:000064F4                 ;org 64F4h
.text:000064F4 ; COMDAT (pick any)
.text:000064F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000064F4
.text:000064F4 ; =============== S U B R O U T I N E =======================================
.text:000064F4
.text:000064F4 ; Attributes: bp-based frame
.text:000064F4
.text:000064F4 ; public: struct CKeyKeyValPair & __thiscall CRecordVector<struct CKeyKeyValPair>::operator[](unsigned int)
.text:000064F4                 public ??A?$CRecordVector@UCKeyKeyValPair@@@@QAEAAUCKeyKeyValPair@@I@Z
.text:000064F4 ??A?$CRecordVector@UCKeyKeyValPair@@@@QAEAAUCKeyKeyValPair@@I@Z proc near
.text:000064F4                                         ; CODE XREF: CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+2EAp
.text:000064F4                                         ; CRecordVector<CKeyKeyValPair>::AddToUniqueSorted2(CKeyKeyValPair const &)+4Ap
.text:000064F4
.text:000064F4 var_4           = dword ptr -4
.text:000064F4 arg_0           = dword ptr  8
.text:000064F4
.text:000064F4                 push    ebp
.text:000064F5                 mov     ebp, esp
.text:000064F7                 push    ecx
.text:000064F8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000064FF                 mov     [ebp+var_4], ecx
.text:00006502                 mov     eax, [ebp+arg_0]
.text:00006505                 imul    eax, 18h
.text:00006508                 mov     ecx, [ebp+var_4]
.text:0000650B                 add     eax, [ecx]
.text:0000650D                 mov     esp, ebp
.text:0000650F                 pop     ebp
.text:00006510                 retn    4
.text:00006510 ??A?$CRecordVector@UCKeyKeyValPair@@@@QAEAAUCKeyKeyValPair@@I@Z endp
.text:00006510
.text:00006510 ; ---------------------------------------------------------------------------
.text:00006513                 align 4
.text:00006513 _text           ends
.text:00006513
.text:00006514 ; ===========================================================================
.text:00006514
.text:00006514 ; Segment type: Pure code
.text:00006514 ; Segment permissions: Read/Execute
.text:00006514 _text           segment para public 'CODE' use32
.text:00006514                 assume cs:_text
.text:00006514                 ;org 6514h
.text:00006514 ; COMDAT (pick any)
.text:00006514                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006514
.text:00006514 ; =============== S U B R O U T I N E =======================================
.text:00006514
.text:00006514 ; Attributes: bp-based frame
.text:00006514
.text:00006514 ; int __stdcall CRecordVector<CKeyKeyValPair>::AddToUniqueSorted2(CKeyKeyValPair *)
.text:00006514                 public ?AddToUniqueSorted2@?$CRecordVector@UCKeyKeyValPair@@@@QAEIABUCKeyKeyValPair@@@Z
.text:00006514 ?AddToUniqueSorted2@?$CRecordVector@UCKeyKeyValPair@@@@QAEIABUCKeyKeyValPair@@@Z proc near
.text:00006514                                         ; CODE XREF: CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+776p
.text:00006514
.text:00006514 var_18          = dword ptr -18h
.text:00006514 var_14          = dword ptr -14h
.text:00006514 var_10          = dword ptr -10h
.text:00006514 var_C           = dword ptr -0Ch
.text:00006514 var_8           = dword ptr -8
.text:00006514 var_4           = dword ptr -4
.text:00006514 arg_0           = dword ptr  8
.text:00006514
.text:00006514                 push    ebp
.text:00006515                 mov     ebp, esp
.text:00006517                 sub     esp, 18h
.text:0000651A                 mov     eax, 0CCCCCCCCh
.text:0000651F                 mov     [ebp+var_18], eax
.text:00006522                 mov     [ebp+var_14], eax
.text:00006525                 mov     [ebp+var_10], eax
.text:00006528                 mov     [ebp+var_C], eax
.text:0000652B                 mov     [ebp+var_8], eax
.text:0000652E                 mov     [ebp+var_4], eax
.text:00006531                 mov     [ebp+var_4], ecx
.text:00006534                 mov     [ebp+var_8], 0
.text:0000653B                 mov     eax, [ebp+var_4]
.text:0000653E                 mov     ecx, [eax+4]
.text:00006541                 mov     [ebp+var_C], ecx
.text:00006544
.text:00006544 loc_6544:                               ; CODE XREF: CRecordVector<CKeyKeyValPair>::AddToUniqueSorted2(CKeyKeyValPair const &):loc_6597j
.text:00006544                 mov     edx, [ebp+var_8]
.text:00006547                 cmp     edx, [ebp+var_C]
.text:0000654A                 jz      short loc_6599
.text:0000654C                 mov     eax, [ebp+var_8]
.text:0000654F                 add     eax, [ebp+var_C]
.text:00006552                 shr     eax, 1
.text:00006554                 mov     [ebp+var_10], eax
.text:00006557                 mov     ecx, [ebp+var_10]
.text:0000655A                 push    ecx
.text:0000655B                 mov     ecx, [ebp+var_4]
.text:0000655E                 call    ??A?$CRecordVector@UCKeyKeyValPair@@@@QAEAAUCKeyKeyValPair@@I@Z ; CRecordVector<CKeyKeyValPair>::operator[](uint)
.text:00006563                 mov     [ebp+var_14], eax
.text:00006566                 mov     edx, [ebp+var_14]
.text:00006569                 push    edx             ; struct CKeyKeyValPair *
.text:0000656A                 mov     ecx, [ebp+arg_0] ; this
.text:0000656D                 call    ?Compare@CKeyKeyValPair@@QBEHABU1@@Z ; CKeyKeyValPair::Compare(CKeyKeyValPair const &)
.text:00006572                 mov     [ebp+var_18], eax
.text:00006575                 cmp     [ebp+var_18], 0
.text:00006579                 jnz     short loc_6580
.text:0000657B                 mov     eax, [ebp+var_10]
.text:0000657E                 jmp     short loc_65D2
.text:00006580 ; ---------------------------------------------------------------------------
.text:00006580
.text:00006580 loc_6580:                               ; CODE XREF: CRecordVector<CKeyKeyValPair>::AddToUniqueSorted2(CKeyKeyValPair const &)+65j
.text:00006580                 cmp     [ebp+var_18], 0
.text:00006584                 jge     short loc_658E
.text:00006586                 mov     eax, [ebp+var_10]
.text:00006589                 mov     [ebp+var_C], eax
.text:0000658C                 jmp     short loc_6597
.text:0000658E ; ---------------------------------------------------------------------------
.text:0000658E
.text:0000658E loc_658E:                               ; CODE XREF: CRecordVector<CKeyKeyValPair>::AddToUniqueSorted2(CKeyKeyValPair const &)+70j
.text:0000658E                 mov     ecx, [ebp+var_10]
.text:00006591                 add     ecx, 1
.text:00006594                 mov     [ebp+var_8], ecx
.text:00006597
.text:00006597 loc_6597:                               ; CODE XREF: CRecordVector<CKeyKeyValPair>::AddToUniqueSorted2(CKeyKeyValPair const &)+78j
.text:00006597                 jmp     short loc_6544
.text:00006599 ; ---------------------------------------------------------------------------
.text:00006599
.text:00006599 loc_6599:                               ; CODE XREF: CRecordVector<CKeyKeyValPair>::AddToUniqueSorted2(CKeyKeyValPair const &)+36j
.text:00006599                 mov     edx, [ebp+arg_0]
.text:0000659C                 sub     esp, 18h
.text:0000659F                 mov     eax, esp
.text:000065A1                 mov     ecx, [edx]
.text:000065A3                 mov     [eax], ecx
.text:000065A5                 mov     ecx, [edx+4]
.text:000065A8                 mov     [eax+4], ecx
.text:000065AB                 mov     ecx, [edx+8]
.text:000065AE                 mov     [eax+8], ecx
.text:000065B1                 mov     ecx, [edx+0Ch]
.text:000065B4                 mov     [eax+0Ch], ecx
.text:000065B7                 mov     ecx, [edx+10h]
.text:000065BA                 mov     [eax+10h], ecx
.text:000065BD                 mov     edx, [edx+14h]
.text:000065C0                 mov     [eax+14h], edx
.text:000065C3                 mov     eax, [ebp+var_C]
.text:000065C6                 push    eax
.text:000065C7                 mov     ecx, [ebp+var_4]
.text:000065CA                 call    ?Insert@?$CRecordVector@UCKeyKeyValPair@@@@QAEXIUCKeyKeyValPair@@@Z ; CRecordVector<CKeyKeyValPair>::Insert(uint,CKeyKeyValPair)
.text:000065CF                 mov     eax, [ebp+var_C]
.text:000065D2
.text:000065D2 loc_65D2:                               ; CODE XREF: CRecordVector<CKeyKeyValPair>::AddToUniqueSorted2(CKeyKeyValPair const &)+6Aj
.text:000065D2                 add     esp, 18h
.text:000065D5                 cmp     ebp, esp
.text:000065D7                 call    __RTC_CheckEsp
.text:000065DC                 mov     esp, ebp
.text:000065DE                 pop     ebp
.text:000065DF                 retn    4
.text:000065DF ?AddToUniqueSorted2@?$CRecordVector@UCKeyKeyValPair@@@@QAEIABUCKeyKeyValPair@@@Z endp
.text:000065DF
.text:000065DF ; ---------------------------------------------------------------------------
.text:000065E2                 align 4
.text:000065E2 _text           ends
.text:000065E2
.text:000065E4 ; ===========================================================================
.text:000065E4
.text:000065E4 ; Segment type: Pure code
.text:000065E4 ; Segment permissions: Read/Execute
.text:000065E4 _text           segment para public 'CODE' use32
.text:000065E4                 assume cs:_text
.text:000065E4                 ;org 65E4h
.text:000065E4 ; COMDAT (pick any)
.text:000065E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000065E4
.text:000065E4 ; =============== S U B R O U T I N E =======================================
.text:000065E4
.text:000065E4 ; Attributes: bp-based frame
.text:000065E4
.text:000065E4 ; int __thiscall CKeyKeyValPair::Compare(CKeyKeyValPair *this, const struct CKeyKeyValPair *)
.text:000065E4                 public ?Compare@CKeyKeyValPair@@QBEHABU1@@Z
.text:000065E4 ?Compare@CKeyKeyValPair@@QBEHABU1@@Z proc near
.text:000065E4                                         ; CODE XREF: CRecordVector<CKeyKeyValPair>::AddToUniqueSorted2(CKeyKeyValPair const &)+59p
.text:000065E4
.text:000065E4 var_14          = dword ptr -14h
.text:000065E4 var_10          = dword ptr -10h
.text:000065E4 var_C           = dword ptr -0Ch
.text:000065E4 var_8           = dword ptr -8
.text:000065E4 var_4           = dword ptr -4
.text:000065E4 arg_0           = dword ptr  8
.text:000065E4
.text:000065E4                 push    ebp
.text:000065E5                 mov     ebp, esp
.text:000065E7                 sub     esp, 14h
.text:000065EA                 mov     eax, 0CCCCCCCCh
.text:000065EF                 mov     [ebp+var_14], eax
.text:000065F2                 mov     [ebp+var_10], eax
.text:000065F5                 mov     [ebp+var_C], eax
.text:000065F8                 mov     [ebp+var_8], eax
.text:000065FB                 mov     [ebp+var_4], eax
.text:000065FE                 mov     [ebp+var_4], ecx
.text:00006601                 mov     eax, [ebp+var_4]
.text:00006604                 mov     ecx, [ebp+arg_0]
.text:00006607                 mov     [ebp+var_8], eax
.text:0000660A                 mov     [ebp+var_C], ecx
.text:0000660D                 mov     edx, [ebp+var_8]
.text:00006610                 mov     eax, [ebp+var_C]
.text:00006613                 mov     ecx, [edx+4]
.text:00006616                 cmp     ecx, [eax+4]
.text:00006619                 ja      short loc_662E
.text:0000661B                 jb      short loc_6629
.text:0000661D                 mov     edx, [ebp+var_8]
.text:00006620                 mov     eax, [ebp+var_C]
.text:00006623                 mov     ecx, [edx]
.text:00006625                 cmp     ecx, [eax]
.text:00006627                 jnb     short loc_662E
.text:00006629
.text:00006629 loc_6629:                               ; CODE XREF: CKeyKeyValPair::Compare(CKeyKeyValPair const &)+37j
.text:00006629                 or      eax, 0FFFFFFFFh
.text:0000662C                 jmp     short loc_6678
.text:0000662E ; ---------------------------------------------------------------------------
.text:0000662E
.text:0000662E loc_662E:                               ; CODE XREF: CKeyKeyValPair::Compare(CKeyKeyValPair const &)+35j
.text:0000662E                                         ; CKeyKeyValPair::Compare(CKeyKeyValPair const &)+43j
.text:0000662E                 mov     edx, [ebp+var_4]
.text:00006631                 mov     eax, [ebp+arg_0]
.text:00006634                 mov     [ebp+var_10], edx
.text:00006637                 mov     [ebp+var_14], eax
.text:0000663A                 mov     ecx, [ebp+var_10]
.text:0000663D                 mov     edx, [ebp+var_14]
.text:00006640                 mov     eax, [ecx+4]
.text:00006643                 cmp     eax, [edx+4]
.text:00006646                 jb      short loc_665D
.text:00006648                 ja      short loc_6656
.text:0000664A                 mov     ecx, [ebp+var_10]
.text:0000664D                 mov     edx, [ebp+var_14]
.text:00006650                 mov     eax, [ecx]
.text:00006652                 cmp     eax, [edx]
.text:00006654                 jbe     short loc_665D
.text:00006656
.text:00006656 loc_6656:                               ; CODE XREF: CKeyKeyValPair::Compare(CKeyKeyValPair const &)+64j
.text:00006656                 mov     eax, 1
.text:0000665B                 jmp     short loc_6678
.text:0000665D ; ---------------------------------------------------------------------------
.text:0000665D
.text:0000665D loc_665D:                               ; CODE XREF: CKeyKeyValPair::Compare(CKeyKeyValPair const &)+62j
.text:0000665D                                         ; CKeyKeyValPair::Compare(CKeyKeyValPair const &)+70j
.text:0000665D                 mov     ecx, [ebp+arg_0]
.text:00006660                 mov     edx, [ecx+0Ch]
.text:00006663                 push    edx
.text:00006664                 mov     eax, [ecx+8]
.text:00006667                 push    eax
.text:00006668                 mov     ecx, [ebp+var_4]
.text:0000666B                 mov     edx, [ecx+0Ch]
.text:0000666E                 push    edx
.text:0000666F                 mov     eax, [ecx+8]
.text:00006672                 push    eax
.text:00006673                 call    ??$MyCompare@_K@@YGH_K0@Z ; MyCompare<unsigned __int64>(unsigned __int64,unsigned __int64)
.text:00006678
.text:00006678 loc_6678:                               ; CODE XREF: CKeyKeyValPair::Compare(CKeyKeyValPair const &)+48j
.text:00006678                                         ; CKeyKeyValPair::Compare(CKeyKeyValPair const &)+77j
.text:00006678                 add     esp, 14h
.text:0000667B                 cmp     ebp, esp
.text:0000667D                 call    __RTC_CheckEsp
.text:00006682                 mov     esp, ebp
.text:00006684                 pop     ebp
.text:00006685                 retn    4
.text:00006685 ?Compare@CKeyKeyValPair@@QBEHABU1@@Z endp
.text:00006685
.text:00006685 _text           ends
.text:00006685
.text:00006688 ; ===========================================================================
.text:00006688
.text:00006688 ; Segment type: Pure code
.text:00006688 ; Segment permissions: Read/Execute
.text:00006688 _text           segment para public 'CODE' use32
.text:00006688                 assume cs:_text
.text:00006688                 ;org 6688h
.text:00006688 ; COMDAT (pick any)
.text:00006688                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006688
.text:00006688 ; =============== S U B R O U T I N E =======================================
.text:00006688
.text:00006688 ; Attributes: bp-based frame
.text:00006688
.text:00006688 ; public: struct CArcItem const & __thiscall CObjectVector<struct CArcItem>::operator[](unsigned int)const
.text:00006688                 public ??A?$CObjectVector@UCArcItem@@@@QBEABUCArcItem@@I@Z
.text:00006688 ??A?$CObjectVector@UCArcItem@@@@QBEABUCArcItem@@I@Z proc near
.text:00006688                                         ; CODE XREF: CArchiveUpdateCallback::GetUpdateItemInfo(uint,int *,int *,uint *)+114p
.text:00006688                                         ; CArchiveUpdateCallback::GetRawProp(uint,ulong,void const * *,uint *,uint *)+C6p ...
.text:00006688
.text:00006688 var_4           = dword ptr -4
.text:00006688 arg_0           = dword ptr  8
.text:00006688
.text:00006688                 push    ebp
.text:00006689                 mov     ebp, esp
.text:0000668B                 push    ecx
.text:0000668C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006693                 mov     [ebp+var_4], ecx
.text:00006696                 mov     eax, [ebp+arg_0]
.text:00006699                 push    eax
.text:0000669A                 mov     ecx, [ebp+var_4]
.text:0000669D                 call    ??A?$CRecordVector@PAX@@QBEABQAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:000066A2                 mov     eax, [eax]
.text:000066A4                 add     esp, 4
.text:000066A7                 cmp     ebp, esp
.text:000066A9                 call    __RTC_CheckEsp
.text:000066AE                 mov     esp, ebp
.text:000066B0                 pop     ebp
.text:000066B1                 retn    4
.text:000066B1 ??A?$CObjectVector@UCArcItem@@@@QBEABUCArcItem@@I@Z endp
.text:000066B1
.text:000066B1 _text           ends
.text:000066B1
.text:000066B4 ; ===========================================================================
.text:000066B4
.text:000066B4 ; Segment type: Pure code
.text:000066B4 ; Segment permissions: Read/Execute
.text:000066B4 _text           segment para public 'CODE' use32
.text:000066B4                 assume cs:_text
.text:000066B4                 ;org 66B4h
.text:000066B4 ; COMDAT (pick any)
.text:000066B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000066B4
.text:000066B4 ; =============== S U B R O U T I N E =======================================
.text:000066B4
.text:000066B4 ; Attributes: bp-based frame
.text:000066B4
.text:000066B4 ; public: struct CUpdatePair2 const & __thiscall CRecordVector<struct CUpdatePair2>::operator[](unsigned int)const
.text:000066B4                 public ??A?$CRecordVector@UCUpdatePair2@@@@QBEABUCUpdatePair2@@I@Z
.text:000066B4 ??A?$CRecordVector@UCUpdatePair2@@@@QBEABUCUpdatePair2@@I@Z proc near
.text:000066B4                                         ; CODE XREF: CArchiveUpdateCallback::GetUpdateItemInfo(uint,int *,int *,uint *)+82p
.text:000066B4                                         ; CArchiveUpdateCallback::GetRawProp(uint,ulong,void const * *,uint *,uint *)+6Ep ...
.text:000066B4
.text:000066B4 var_4           = dword ptr -4
.text:000066B4 arg_0           = dword ptr  8
.text:000066B4
.text:000066B4                 push    ebp
.text:000066B5                 mov     ebp, esp
.text:000066B7                 push    ecx
.text:000066B8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000066BF                 mov     [ebp+var_4], ecx
.text:000066C2                 mov     eax, [ebp+arg_0]
.text:000066C5                 imul    eax, 14h
.text:000066C8                 mov     ecx, [ebp+var_4]
.text:000066CB                 add     eax, [ecx]
.text:000066CD                 mov     esp, ebp
.text:000066CF                 pop     ebp
.text:000066D0                 retn    4
.text:000066D0 ??A?$CRecordVector@UCUpdatePair2@@@@QBEABUCUpdatePair2@@I@Z endp
.text:000066D0
.text:000066D0 ; ---------------------------------------------------------------------------
.text:000066D3                 align 4
.text:000066D3 _text           ends
.text:000066D3
.text:000066D4 ; ===========================================================================
.text:000066D4
.text:000066D4 ; Segment type: Pure code
.text:000066D4 ; Segment permissions: Read/Execute
.text:000066D4 _text           segment para public 'CODE' use32
.text:000066D4                 assume cs:_text
.text:000066D4                 ;org 66D4h
.text:000066D4 ; COMDAT (pick any)
.text:000066D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000066D4
.text:000066D4 ; =============== S U B R O U T I N E =======================================
.text:000066D4
.text:000066D4 ; Attributes: bp-based frame
.text:000066D4
.text:000066D4 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::CMyComPtr<struct ISequentialInStream>(struct ISequentialInStream *)
.text:000066D4                 public ??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z
.text:000066D4 ??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z proc near
.text:000066D4                                         ; CODE XREF: CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+27Ep
.text:000066D4                                         ; CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+41Bp ...
.text:000066D4
.text:000066D4 var_4           = dword ptr -4
.text:000066D4 arg_0           = dword ptr  8
.text:000066D4
.text:000066D4                 push    ebp
.text:000066D5                 mov     ebp, esp
.text:000066D7                 push    ecx
.text:000066D8                 push    esi
.text:000066D9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000066E0                 mov     [ebp+var_4], ecx
.text:000066E3                 mov     eax, [ebp+var_4]
.text:000066E6                 mov     ecx, [ebp+arg_0]
.text:000066E9                 mov     [eax], ecx
.text:000066EB                 cmp     [ebp+arg_0], 0
.text:000066EF                 jz      short loc_6708
.text:000066F1                 mov     edx, [ebp+arg_0]
.text:000066F4                 mov     eax, [edx]
.text:000066F6                 mov     esi, esp
.text:000066F8                 mov     ecx, [ebp+arg_0]
.text:000066FB                 push    ecx
.text:000066FC                 mov     edx, [eax+4]
.text:000066FF                 call    edx
.text:00006701                 cmp     esi, esp
.text:00006703                 call    __RTC_CheckEsp
.text:00006708
.text:00006708 loc_6708:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(ISequentialInStream *)+1Bj
.text:00006708                 mov     eax, [ebp+var_4]
.text:0000670B                 pop     esi
.text:0000670C                 add     esp, 4
.text:0000670F                 cmp     ebp, esp
.text:00006711                 call    __RTC_CheckEsp
.text:00006716                 mov     esp, ebp
.text:00006718                 pop     ebp
.text:00006719                 retn    4
.text:00006719 ??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z endp
.text:00006719
.text:00006719 _text           ends
.text:00006719
.text:0000671C ; ===========================================================================
.text:0000671C
.text:0000671C ; Segment type: Pure code
.text:0000671C ; Segment permissions: Read/Execute
.text:0000671C _text           segment para public 'CODE' use32
.text:0000671C                 assume cs:_text
.text:0000671C                 ;org 671Ch
.text:0000671C ; COMDAT (pick any)
.text:0000671C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000671C
.text:0000671C ; =============== S U B R O U T I N E =======================================
.text:0000671C
.text:0000671C ; Attributes: bp-based frame
.text:0000671C
.text:0000671C ; public: __thiscall CMyComPtr<struct ISequentialInStream>::~CMyComPtr<struct ISequentialInStream>(void)
.text:0000671C                 public ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
.text:0000671C ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ proc near
.text:0000671C                                         ; CODE XREF: CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+2B5p
.text:0000671C                                         ; CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+444p ...
.text:0000671C
.text:0000671C var_4           = dword ptr -4
.text:0000671C
.text:0000671C                 push    ebp
.text:0000671D                 mov     ebp, esp
.text:0000671F                 push    ecx
.text:00006720                 push    esi
.text:00006721                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006728                 mov     [ebp+var_4], ecx
.text:0000672B                 mov     eax, [ebp+var_4]
.text:0000672E                 cmp     dword ptr [eax], 0
.text:00006731                 jz      short loc_674E
.text:00006733                 mov     ecx, [ebp+var_4]
.text:00006736                 mov     edx, [ecx]
.text:00006738                 mov     eax, [ebp+var_4]
.text:0000673B                 mov     ecx, [eax]
.text:0000673D                 mov     edx, [edx]
.text:0000673F                 mov     esi, esp
.text:00006741                 push    ecx
.text:00006742                 mov     eax, [edx+8]
.text:00006745                 call    eax
.text:00006747                 cmp     esi, esp
.text:00006749                 call    __RTC_CheckEsp
.text:0000674E
.text:0000674E loc_674E:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)+15j
.text:0000674E                 pop     esi
.text:0000674F                 add     esp, 4
.text:00006752                 cmp     ebp, esp
.text:00006754                 call    __RTC_CheckEsp
.text:00006759                 mov     esp, ebp
.text:0000675B                 pop     ebp
.text:0000675C                 retn
.text:0000675C ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ endp
.text:0000675C
.text:0000675C ; ---------------------------------------------------------------------------
.text:0000675D                 align 10h
.text:0000675D _text           ends
.text:0000675D
.text:00006760 ; ===========================================================================
.text:00006760
.text:00006760 ; Segment type: Pure code
.text:00006760 ; Segment permissions: Read/Execute
.text:00006760 _text           segment para public 'CODE' use32
.text:00006760                 assume cs:_text
.text:00006760                 ;org 6760h
.text:00006760 ; COMDAT (pick any)
.text:00006760                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006760
.text:00006760 ; =============== S U B R O U T I N E =======================================
.text:00006760
.text:00006760 ; Attributes: bp-based frame
.text:00006760
.text:00006760 ; public: struct ISequentialInStream * __thiscall CMyComPtr<struct ISequentialInStream>::Detach(void)
.text:00006760                 public ?Detach@?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@XZ
.text:00006760 ?Detach@?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@XZ proc near
.text:00006760                                         ; CODE XREF: CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+298p
.text:00006760                                         ; CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+427p ...
.text:00006760
.text:00006760 var_8           = dword ptr -8
.text:00006760 var_4           = dword ptr -4
.text:00006760
.text:00006760                 push    ebp
.text:00006761                 mov     ebp, esp
.text:00006763                 sub     esp, 8
.text:00006766                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000676D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006774                 mov     [ebp+var_4], ecx
.text:00006777                 mov     eax, [ebp+var_4]
.text:0000677A                 mov     ecx, [eax]
.text:0000677C                 mov     [ebp+var_8], ecx
.text:0000677F                 mov     edx, [ebp+var_4]
.text:00006782                 mov     dword ptr [edx], 0
.text:00006788                 mov     eax, [ebp+var_8]
.text:0000678B                 mov     esp, ebp
.text:0000678D                 pop     ebp
.text:0000678E                 retn
.text:0000678E ?Detach@?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@XZ endp
.text:0000678E
.text:0000678E ; ---------------------------------------------------------------------------
.text:0000678F                 align 10h
.text:0000678F _text           ends
.text:0000678F
.text:00006790 ; ===========================================================================
.text:00006790
.text:00006790 ; Segment type: Pure code
.text:00006790 ; Segment permissions: Read/Execute
.text:00006790 _text           segment para public 'CODE' use32
.text:00006790                 assume cs:_text
.text:00006790                 ;org 6790h
.text:00006790 ; COMDAT (pick any)
.text:00006790                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006790
.text:00006790 ; =============== S U B R O U T I N E =======================================
.text:00006790
.text:00006790 ; Attributes: bp-based frame
.text:00006790
.text:00006790 ; public: void * __thiscall UString::`scalar deleting destructor'(unsigned int)
.text:00006790                 public ??_GUString@@QAEPAXI@Z
.text:00006790 ??_GUString@@QAEPAXI@Z proc near        ; CODE XREF: CObjectVector<UString>::~CObjectVector<UString>(void)+7Fp
.text:00006790                                         ; CObjectVector<UString>::Delete(uint)+3Cp
.text:00006790
.text:00006790 var_4           = dword ptr -4
.text:00006790 arg_0           = dword ptr  8
.text:00006790
.text:00006790                 push    ebp
.text:00006791                 mov     ebp, esp
.text:00006793                 push    ecx
.text:00006794                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000679B                 mov     [ebp+var_4], ecx
.text:0000679E                 mov     ecx, [ebp+var_4] ; this
.text:000067A1                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000067A6                 mov     eax, [ebp+arg_0]
.text:000067A9                 and     eax, 1
.text:000067AC                 jz      short loc_67BA
.text:000067AE                 mov     ecx, [ebp+var_4]
.text:000067B1                 push    ecx             ; void *
.text:000067B2                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000067B7                 add     esp, 4
.text:000067BA
.text:000067BA loc_67BA:                               ; CODE XREF: UString::`scalar deleting destructor'(uint)+1Cj
.text:000067BA                 mov     eax, [ebp+var_4]
.text:000067BD                 add     esp, 4
.text:000067C0                 cmp     ebp, esp
.text:000067C2                 call    __RTC_CheckEsp
.text:000067C7                 mov     esp, ebp
.text:000067C9                 pop     ebp
.text:000067CA                 retn    4
.text:000067CA ??_GUString@@QAEPAXI@Z endp
.text:000067CA
.text:000067CA ; ---------------------------------------------------------------------------
.text:000067CD                 align 10h
.text:000067CD _text           ends
.text:000067CD
.text:000067D0 ; ===========================================================================
.text:000067D0
.text:000067D0 ; Segment type: Pure code
.text:000067D0 ; Segment permissions: Read/Execute
.text:000067D0 _text           segment para public 'CODE' use32
.text:000067D0                 assume cs:_text
.text:000067D0                 ;org 67D0h
.text:000067D0 ; COMDAT (pick any)
.text:000067D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000067D0
.text:000067D0 ; =============== S U B R O U T I N E =======================================
.text:000067D0
.text:000067D0 ; Attributes: bp-based frame
.text:000067D0
.text:000067D0 ; public: __thiscall CRecordVector<void *>::CRecordVector<void *>(void)
.text:000067D0                 public ??0?$CRecordVector@PAX@@QAE@XZ
.text:000067D0 ??0?$CRecordVector@PAX@@QAE@XZ proc near
.text:000067D0                                         ; CODE XREF: CObjectVector<UString>::CObjectVector<UString>(void)+11p
.text:000067D0
.text:000067D0 var_4           = dword ptr -4
.text:000067D0
.text:000067D0                 push    ebp
.text:000067D1                 mov     ebp, esp
.text:000067D3                 push    ecx
.text:000067D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000067DB                 mov     [ebp+var_4], ecx
.text:000067DE                 mov     eax, [ebp+var_4]
.text:000067E1                 mov     dword ptr [eax], 0
.text:000067E7                 mov     ecx, [ebp+var_4]
.text:000067EA                 mov     dword ptr [ecx+4], 0
.text:000067F1                 mov     edx, [ebp+var_4]
.text:000067F4                 mov     dword ptr [edx+8], 0
.text:000067FB                 mov     eax, [ebp+var_4]
.text:000067FE                 mov     esp, ebp
.text:00006800                 pop     ebp
.text:00006801                 retn
.text:00006801 ??0?$CRecordVector@PAX@@QAE@XZ endp
.text:00006801
.text:00006801 ; ---------------------------------------------------------------------------
.text:00006802                 align 4
.text:00006802 _text           ends
.text:00006802
.text:00006804 ; ===========================================================================
.text:00006804
.text:00006804 ; Segment type: Pure code
.text:00006804 ; Segment permissions: Read/Execute
.text:00006804 _text           segment para public 'CODE' use32
.text:00006804                 assume cs:_text
.text:00006804                 ;org 6804h
.text:00006804 ; COMDAT (pick any)
.text:00006804                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006804
.text:00006804 ; =============== S U B R O U T I N E =======================================
.text:00006804
.text:00006804 ; Attributes: bp-based frame
.text:00006804
.text:00006804 ; public: unsigned int __thiscall CRecordVector<void *>::Size(void)const
.text:00006804                 public ?Size@?$CRecordVector@PAX@@QBEIXZ
.text:00006804 ?Size@?$CRecordVector@PAX@@QBEIXZ proc near
.text:00006804                                         ; CODE XREF: CObjectVector<UString>::Size(void)+11p
.text:00006804                                         ; CObjectVector<UString>::~CObjectVector<UString>(void)+46p
.text:00006804
.text:00006804 var_4           = dword ptr -4
.text:00006804
.text:00006804                 push    ebp
.text:00006805                 mov     ebp, esp
.text:00006807                 push    ecx
.text:00006808                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000680F                 mov     [ebp+var_4], ecx
.text:00006812                 mov     eax, [ebp+var_4]
.text:00006815                 mov     eax, [eax+4]
.text:00006818                 mov     esp, ebp
.text:0000681A                 pop     ebp
.text:0000681B                 retn
.text:0000681B ?Size@?$CRecordVector@PAX@@QBEIXZ endp
.text:0000681B
.text:0000681B _text           ends
.text:0000681B
.text:0000681C ; ===========================================================================
.text:0000681C
.text:0000681C ; Segment type: Pure code
.text:0000681C ; Segment permissions: Read/Execute
.text:0000681C _text           segment para public 'CODE' use32
.text:0000681C                 assume cs:_text
.text:0000681C                 ;org 681Ch
.text:0000681C ; COMDAT (pick any)
.text:0000681C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000681C
.text:0000681C ; =============== S U B R O U T I N E =======================================
.text:0000681C
.text:0000681C ; Attributes: bp-based frame
.text:0000681C
.text:0000681C ; public: __thiscall CRecordVector<void *>::~CRecordVector<void *>(void)
.text:0000681C                 public ??1?$CRecordVector@PAX@@QAE@XZ
.text:0000681C ??1?$CRecordVector@PAX@@QAE@XZ proc near
.text:0000681C                                         ; CODE XREF: CObjectVector<UString>::~CObjectVector<UString>(void)+9Cp
.text:0000681C                                         ; __unwindfunclet$??1?$CObjectVector@VUString@@@@QAE@XZ$0+3j
.text:0000681C
.text:0000681C var_8           = dword ptr -8
.text:0000681C var_4           = dword ptr -4
.text:0000681C
.text:0000681C                 push    ebp
.text:0000681D                 mov     ebp, esp
.text:0000681F                 sub     esp, 8
.text:00006822                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006829                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006830                 mov     [ebp+var_4], ecx
.text:00006833                 mov     eax, [ebp+var_4]
.text:00006836                 mov     ecx, [eax]
.text:00006838                 mov     [ebp+var_8], ecx
.text:0000683B                 mov     edx, [ebp+var_8]
.text:0000683E                 push    edx             ; void *
.text:0000683F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006844                 add     esp, 4
.text:00006847                 add     esp, 8
.text:0000684A                 cmp     ebp, esp
.text:0000684C                 call    __RTC_CheckEsp
.text:00006851                 mov     esp, ebp
.text:00006853                 pop     ebp
.text:00006854                 retn
.text:00006854 ??1?$CRecordVector@PAX@@QAE@XZ endp
.text:00006854
.text:00006854 ; ---------------------------------------------------------------------------
.text:00006855                 align 4
.text:00006855 _text           ends
.text:00006855
.text:00006858 ; ===========================================================================
.text:00006858
.text:00006858 ; Segment type: Pure code
.text:00006858 ; Segment permissions: Read/Execute
.text:00006858 _text           segment para public 'CODE' use32
.text:00006858                 assume cs:_text
.text:00006858                 ;org 6858h
.text:00006858 ; COMDAT (pick any)
.text:00006858                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006858
.text:00006858 ; =============== S U B R O U T I N E =======================================
.text:00006858
.text:00006858 ; Attributes: bp-based frame
.text:00006858
.text:00006858 ; public: void __thiscall CRecordVector<void *>::Delete(unsigned int)
.text:00006858                 public ?Delete@?$CRecordVector@PAX@@QAEXI@Z
.text:00006858 ?Delete@?$CRecordVector@PAX@@QAEXI@Z proc near
.text:00006858                                         ; CODE XREF: CObjectVector<UString>::Delete(uint)+54p
.text:00006858
.text:00006858 var_4           = dword ptr -4
.text:00006858 arg_0           = dword ptr  8
.text:00006858
.text:00006858                 push    ebp
.text:00006859                 mov     ebp, esp
.text:0000685B                 push    ecx
.text:0000685C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006863                 mov     [ebp+var_4], ecx
.text:00006866                 mov     eax, [ebp+arg_0]
.text:00006869                 add     eax, 1
.text:0000686C                 push    eax
.text:0000686D                 mov     ecx, [ebp+arg_0]
.text:00006870                 push    ecx
.text:00006871                 mov     ecx, [ebp+var_4]
.text:00006874                 call    ?MoveItems@?$CRecordVector@PAX@@AAEXII@Z ; CRecordVector<void *>::MoveItems(uint,uint)
.text:00006879                 mov     edx, [ebp+var_4]
.text:0000687C                 mov     eax, [edx+4]
.text:0000687F                 sub     eax, 1
.text:00006882                 mov     ecx, [ebp+var_4]
.text:00006885                 mov     [ecx+4], eax
.text:00006888                 add     esp, 4
.text:0000688B                 cmp     ebp, esp
.text:0000688D                 call    __RTC_CheckEsp
.text:00006892                 mov     esp, ebp
.text:00006894                 pop     ebp
.text:00006895                 retn    4
.text:00006895 ?Delete@?$CRecordVector@PAX@@QAEXI@Z endp
.text:00006895
.text:00006895 _text           ends
.text:00006895
.text:00006898 ; ===========================================================================
.text:00006898
.text:00006898 ; Segment type: Pure code
.text:00006898 ; Segment permissions: Read/Execute
.text:00006898 _text           segment para public 'CODE' use32
.text:00006898                 assume cs:_text
.text:00006898                 ;org 6898h
.text:00006898 ; COMDAT (pick any)
.text:00006898                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006898
.text:00006898 ; =============== S U B R O U T I N E =======================================
.text:00006898
.text:00006898 ; Attributes: bp-based frame
.text:00006898
.text:00006898 ; public: unsigned int __thiscall CRecordVector<void *>::Add(void * const)
.text:00006898                 public ?Add@?$CRecordVector@PAX@@QAEIQAX@Z
.text:00006898 ?Add@?$CRecordVector@PAX@@QAEIQAX@Z proc near
.text:00006898                                         ; CODE XREF: CObjectVector<UString>::Add(UString const &)+7Fp
.text:00006898
.text:00006898 var_8           = dword ptr -8
.text:00006898 var_4           = dword ptr -4
.text:00006898 arg_0           = dword ptr  8
.text:00006898
.text:00006898                 push    ebp
.text:00006899                 mov     ebp, esp
.text:0000689B                 sub     esp, 8
.text:0000689E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000068A5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000068AC                 mov     [ebp+var_4], ecx
.text:000068AF                 mov     ecx, [ebp+var_4]
.text:000068B2                 call    ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition(void)
.text:000068B7                 mov     eax, [ebp+var_4]
.text:000068BA                 mov     ecx, [eax+4]
.text:000068BD                 mov     edx, [ebp+var_4]
.text:000068C0                 mov     eax, [edx]
.text:000068C2                 mov     edx, [ebp+arg_0]
.text:000068C5                 mov     [eax+ecx*4], edx
.text:000068C8                 mov     eax, [ebp+var_4]
.text:000068CB                 mov     ecx, [eax+4]
.text:000068CE                 mov     [ebp+var_8], ecx
.text:000068D1                 mov     edx, [ebp+var_4]
.text:000068D4                 mov     eax, [edx+4]
.text:000068D7                 add     eax, 1
.text:000068DA                 mov     ecx, [ebp+var_4]
.text:000068DD                 mov     [ecx+4], eax
.text:000068E0                 mov     eax, [ebp+var_8]
.text:000068E3                 add     esp, 8
.text:000068E6                 cmp     ebp, esp
.text:000068E8                 call    __RTC_CheckEsp
.text:000068ED                 mov     esp, ebp
.text:000068EF                 pop     ebp
.text:000068F0                 retn    4
.text:000068F0 ?Add@?$CRecordVector@PAX@@QAEIQAX@Z endp
.text:000068F0
.text:000068F0 ; ---------------------------------------------------------------------------
.text:000068F3                 align 4
.text:000068F3 _text           ends
.text:000068F3
.text:000068F4 ; ===========================================================================
.text:000068F4
.text:000068F4 ; Segment type: Pure code
.text:000068F4 ; Segment permissions: Read/Execute
.text:000068F4 _text           segment para public 'CODE' use32
.text:000068F4                 assume cs:_text
.text:000068F4                 ;org 68F4h
.text:000068F4 ; COMDAT (pick any)
.text:000068F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000068F4
.text:000068F4 ; =============== S U B R O U T I N E =======================================
.text:000068F4
.text:000068F4 ; Attributes: bp-based frame
.text:000068F4
.text:000068F4 ; public: void * const & __thiscall CRecordVector<void *>::operator[](unsigned int)const
.text:000068F4                 public ??A?$CRecordVector@PAX@@QBEABQAXI@Z
.text:000068F4 ??A?$CRecordVector@PAX@@QBEABQAXI@Z proc near
.text:000068F4                                         ; CODE XREF: CObjectVector<UString>::operator[](uint)+15p
.text:000068F4                                         ; CObjectVector<CBuffer<uchar>>::operator[](uint)+15p ...
.text:000068F4
.text:000068F4 var_4           = dword ptr -4
.text:000068F4 arg_0           = dword ptr  8
.text:000068F4
.text:000068F4                 push    ebp
.text:000068F5                 mov     ebp, esp
.text:000068F7                 push    ecx
.text:000068F8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000068FF                 mov     [ebp+var_4], ecx
.text:00006902                 mov     eax, [ebp+var_4]
.text:00006905                 mov     ecx, [eax]
.text:00006907                 mov     edx, [ebp+arg_0]
.text:0000690A                 lea     eax, [ecx+edx*4]
.text:0000690D                 mov     esp, ebp
.text:0000690F                 pop     ebp
.text:00006910                 retn    4
.text:00006910 ??A?$CRecordVector@PAX@@QBEABQAXI@Z endp
.text:00006910
.text:00006910 ; ---------------------------------------------------------------------------
.text:00006913                 align 4
.text:00006913 _text           ends
.text:00006913
.text:00006914 ; ===========================================================================
.text:00006914
.text:00006914 ; Segment type: Pure code
.text:00006914 ; Segment permissions: Read/Execute
.text:00006914 _text           segment para public 'CODE' use32
.text:00006914                 assume cs:_text
.text:00006914                 ;org 6914h
.text:00006914 ; COMDAT (pick any)
.text:00006914                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006914
.text:00006914 ; =============== S U B R O U T I N E =======================================
.text:00006914
.text:00006914 ; Attributes: bp-based frame
.text:00006914
.text:00006914 ; public: void * & __thiscall CRecordVector<void *>::operator[](unsigned int)
.text:00006914                 public ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
.text:00006914 ??A?$CRecordVector@PAX@@QAEAAPAXI@Z proc near
.text:00006914                                         ; CODE XREF: CObjectVector<UString>::operator[](uint)+15p
.text:00006914                                         ; CObjectVector<UString>::~CObjectVector<UString>(void)+64p ...
.text:00006914
.text:00006914 var_4           = dword ptr -4
.text:00006914 arg_0           = dword ptr  8
.text:00006914
.text:00006914                 push    ebp
.text:00006915                 mov     ebp, esp
.text:00006917                 push    ecx
.text:00006918                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000691F                 mov     [ebp+var_4], ecx
.text:00006922                 mov     eax, [ebp+var_4]
.text:00006925                 mov     ecx, [eax]
.text:00006927                 mov     edx, [ebp+arg_0]
.text:0000692A                 lea     eax, [ecx+edx*4]
.text:0000692D                 mov     esp, ebp
.text:0000692F                 pop     ebp
.text:00006930                 retn    4
.text:00006930 ??A?$CRecordVector@PAX@@QAEAAPAXI@Z endp
.text:00006930
.text:00006930 ; ---------------------------------------------------------------------------
.text:00006933                 align 4
.text:00006933 _text           ends
.text:00006933
.text:00006934 ; ===========================================================================
.text:00006934
.text:00006934 ; Segment type: Pure code
.text:00006934 ; Segment permissions: Read/Execute
.text:00006934 _text           segment para public 'CODE' use32
.text:00006934                 assume cs:_text
.text:00006934                 ;org 6934h
.text:00006934 ; COMDAT (pick any)
.text:00006934                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006934
.text:00006934 ; =============== S U B R O U T I N E =======================================
.text:00006934
.text:00006934 ; Attributes: bp-based frame
.text:00006934
.text:00006934 ; private: void __thiscall CRecordVector<unsigned int>::MoveItems(unsigned int, unsigned int)
.text:00006934                 public ?MoveItems@?$CRecordVector@I@@AAEXII@Z
.text:00006934 ?MoveItems@?$CRecordVector@I@@AAEXII@Z proc near
.text:00006934                                         ; CODE XREF: CRecordVector<uint>::Delete(uint)+1Cp
.text:00006934
.text:00006934 var_4           = dword ptr -4
.text:00006934 arg_0           = dword ptr  8
.text:00006934 arg_4           = dword ptr  0Ch
.text:00006934
.text:00006934                 push    ebp
.text:00006935                 mov     ebp, esp
.text:00006937                 push    ecx
.text:00006938                 push    esi
.text:00006939                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006940                 mov     [ebp+var_4], ecx
.text:00006943                 mov     eax, [ebp+var_4]
.text:00006946                 mov     ecx, [eax+4]
.text:00006949                 sub     ecx, [ebp+arg_4]
.text:0000694C                 shl     ecx, 2
.text:0000694F                 mov     esi, esp
.text:00006951                 push    ecx             ; Size
.text:00006952                 mov     edx, [ebp+var_4]
.text:00006955                 mov     eax, [edx]
.text:00006957                 mov     ecx, [ebp+arg_4]
.text:0000695A                 lea     edx, [eax+ecx*4]
.text:0000695D                 push    edx             ; Src
.text:0000695E                 mov     eax, [ebp+var_4]
.text:00006961                 mov     ecx, [eax]
.text:00006963                 mov     edx, [ebp+arg_0]
.text:00006966                 lea     eax, [ecx+edx*4]
.text:00006969                 push    eax             ; Dst
.text:0000696A                 call    dword ptr ds:__imp__memmove
.text:00006970                 add     esp, 0Ch
.text:00006973                 cmp     esi, esp
.text:00006975                 call    __RTC_CheckEsp
.text:0000697A                 pop     esi
.text:0000697B                 add     esp, 4
.text:0000697E                 cmp     ebp, esp
.text:00006980                 call    __RTC_CheckEsp
.text:00006985                 mov     esp, ebp
.text:00006987                 pop     ebp
.text:00006988                 retn    8
.text:00006988 ?MoveItems@?$CRecordVector@I@@AAEXII@Z endp
.text:00006988
.text:00006988 ; ---------------------------------------------------------------------------
.text:0000698B                 align 4
.text:0000698B _text           ends
.text:0000698B
.text:0000698C ; ===========================================================================
.text:0000698C
.text:0000698C ; Segment type: Pure code
.text:0000698C ; Segment permissions: Read/Execute
.text:0000698C _text           segment para public 'CODE' use32
.text:0000698C                 assume cs:_text
.text:0000698C                 ;org 698Ch
.text:0000698C ; COMDAT (pick any)
.text:0000698C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000698C
.text:0000698C ; =============== S U B R O U T I N E =======================================
.text:0000698C
.text:0000698C ; Attributes: bp-based frame
.text:0000698C
.text:0000698C ; private: void __thiscall CRecordVector<unsigned int>::ReserveOnePosition(void)
.text:0000698C                 public ?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ
.text:0000698C ?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ proc near
.text:0000698C                                         ; CODE XREF: CRecordVector<uint>::Add(uint)+1Ap
.text:0000698C
.text:0000698C var_14          = dword ptr -14h
.text:0000698C var_10          = dword ptr -10h
.text:0000698C Dst             = dword ptr -0Ch
.text:0000698C var_8           = dword ptr -8
.text:0000698C var_4           = dword ptr -4
.text:0000698C
.text:0000698C                 push    ebp
.text:0000698D                 mov     ebp, esp
.text:0000698F                 sub     esp, 14h
.text:00006992                 mov     eax, 0CCCCCCCCh
.text:00006997                 mov     [ebp+var_14], eax
.text:0000699A                 mov     [ebp+var_10], eax
.text:0000699D                 mov     [ebp+Dst], eax
.text:000069A0                 mov     [ebp+var_8], eax
.text:000069A3                 mov     [ebp+var_4], eax
.text:000069A6                 mov     [ebp+var_4], ecx
.text:000069A9                 mov     eax, [ebp+var_4]
.text:000069AC                 mov     ecx, [ebp+var_4]
.text:000069AF                 mov     edx, [eax+4]
.text:000069B2                 cmp     edx, [ecx+8]
.text:000069B5                 jnz     loc_6A40
.text:000069BB                 mov     eax, [ebp+var_4]
.text:000069BE                 mov     ecx, [eax+8]
.text:000069C1                 shr     ecx, 2
.text:000069C4                 mov     edx, [ebp+var_4]
.text:000069C7                 mov     eax, [edx+8]
.text:000069CA                 lea     ecx, [eax+ecx+1]
.text:000069CE                 mov     [ebp+var_8], ecx
.text:000069D1                 xor     ecx, ecx
.text:000069D3                 mov     eax, [ebp+var_8]
.text:000069D6                 mov     edx, 4
.text:000069DB                 mul     edx
.text:000069DD                 seto    cl
.text:000069E0                 neg     ecx
.text:000069E2                 or      ecx, eax
.text:000069E4                 push    ecx             ; unsigned int
.text:000069E5                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000069EA                 add     esp, 4
.text:000069ED                 mov     [ebp+var_10], eax
.text:000069F0                 mov     eax, [ebp+var_10]
.text:000069F3                 mov     [ebp+Dst], eax
.text:000069F6                 mov     ecx, [ebp+var_4]
.text:000069F9                 cmp     dword ptr [ecx+4], 0
.text:000069FD                 jz      short loc_6A1B
.text:000069FF                 mov     edx, [ebp+var_4]
.text:00006A02                 mov     eax, [edx+4]
.text:00006A05                 shl     eax, 2
.text:00006A08                 push    eax             ; Size
.text:00006A09                 mov     ecx, [ebp+var_4]
.text:00006A0C                 mov     edx, [ecx]
.text:00006A0E                 push    edx             ; Src
.text:00006A0F                 mov     eax, [ebp+Dst]
.text:00006A12                 push    eax             ; Dst
.text:00006A13                 call    _memcpy
.text:00006A18                 add     esp, 0Ch
.text:00006A1B
.text:00006A1B loc_6A1B:                               ; CODE XREF: CRecordVector<uint>::ReserveOnePosition(void)+71j
.text:00006A1B                 mov     ecx, [ebp+var_4]
.text:00006A1E                 mov     edx, [ecx]
.text:00006A20                 mov     [ebp+var_14], edx
.text:00006A23                 mov     eax, [ebp+var_14]
.text:00006A26                 push    eax             ; void *
.text:00006A27                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006A2C                 add     esp, 4
.text:00006A2F                 mov     ecx, [ebp+var_4]
.text:00006A32                 mov     edx, [ebp+Dst]
.text:00006A35                 mov     [ecx], edx
.text:00006A37                 mov     eax, [ebp+var_4]
.text:00006A3A                 mov     ecx, [ebp+var_8]
.text:00006A3D                 mov     [eax+8], ecx
.text:00006A40
.text:00006A40 loc_6A40:                               ; CODE XREF: CRecordVector<uint>::ReserveOnePosition(void)+29j
.text:00006A40                 add     esp, 14h
.text:00006A43                 cmp     ebp, esp
.text:00006A45                 call    __RTC_CheckEsp
.text:00006A4A                 mov     esp, ebp
.text:00006A4C                 pop     ebp
.text:00006A4D                 retn
.text:00006A4D ?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ endp
.text:00006A4D
.text:00006A4D ; ---------------------------------------------------------------------------
.text:00006A4E                 align 10h
.text:00006A4E _text           ends
.text:00006A4E
.text:00006A50 ; ===========================================================================
.text:00006A50
.text:00006A50 ; Segment type: Pure code
.text:00006A50 ; Segment permissions: Read/Execute
.text:00006A50 _text           segment para public 'CODE' use32
.text:00006A50                 assume cs:_text
.text:00006A50                 ;org 6A50h
.text:00006A50 ; COMDAT (pick any)
.text:00006A50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006A50
.text:00006A50 ; =============== S U B R O U T I N E =======================================
.text:00006A50
.text:00006A50 ; Attributes: bp-based frame
.text:00006A50
.text:00006A50 ; public: void __thiscall CRecordVector<struct CKeyKeyValPair>::Insert(unsigned int, struct CKeyKeyValPair)
.text:00006A50                 public ?Insert@?$CRecordVector@UCKeyKeyValPair@@@@QAEXIUCKeyKeyValPair@@@Z
.text:00006A50 ?Insert@?$CRecordVector@UCKeyKeyValPair@@@@QAEXIUCKeyKeyValPair@@@Z proc near
.text:00006A50                                         ; CODE XREF: CRecordVector<CKeyKeyValPair>::AddToUniqueSorted2(CKeyKeyValPair const &)+B6p
.text:00006A50
.text:00006A50 var_10          = dword ptr -10h
.text:00006A50 var_C           = dword ptr -0Ch
.text:00006A50 var_8           = dword ptr -8
.text:00006A50 var_4           = dword ptr -4
.text:00006A50 arg_0           = dword ptr  8
.text:00006A50 arg_4           = dword ptr  0Ch
.text:00006A50 arg_8           = dword ptr  10h
.text:00006A50 arg_C           = dword ptr  14h
.text:00006A50 arg_10          = dword ptr  18h
.text:00006A50 arg_14          = dword ptr  1Ch
.text:00006A50 arg_18          = dword ptr  20h
.text:00006A50
.text:00006A50                 push    ebp
.text:00006A51                 mov     ebp, esp
.text:00006A53                 sub     esp, 10h
.text:00006A56                 mov     eax, 0CCCCCCCCh
.text:00006A5B                 mov     [ebp+var_10], eax
.text:00006A5E                 mov     [ebp+var_C], eax
.text:00006A61                 mov     [ebp+var_8], eax
.text:00006A64                 mov     [ebp+var_4], eax
.text:00006A67                 mov     [ebp+var_4], ecx
.text:00006A6A                 mov     ecx, [ebp+var_4]
.text:00006A6D                 call    ?ReserveOnePosition@?$CRecordVector@UCKeyKeyValPair@@@@AAEXXZ ; CRecordVector<CKeyKeyValPair>::ReserveOnePosition(void)
.text:00006A72                 mov     eax, [ebp+arg_0]
.text:00006A75                 push    eax
.text:00006A76                 mov     ecx, [ebp+arg_0]
.text:00006A79                 add     ecx, 1
.text:00006A7C                 push    ecx
.text:00006A7D                 mov     ecx, [ebp+var_4]
.text:00006A80                 call    ?MoveItems@?$CRecordVector@UCKeyKeyValPair@@@@AAEXII@Z ; CRecordVector<CKeyKeyValPair>::MoveItems(uint,uint)
.text:00006A85                 mov     edx, [ebp+arg_0]
.text:00006A88                 imul    edx, 18h
.text:00006A8B                 mov     eax, [ebp+var_4]
.text:00006A8E                 mov     ecx, [eax]
.text:00006A90                 add     ecx, edx
.text:00006A92                 mov     edx, [ebp+arg_4]
.text:00006A95                 mov     [ecx], edx
.text:00006A97                 mov     eax, [ebp+arg_8]
.text:00006A9A                 mov     [ecx+4], eax
.text:00006A9D                 mov     edx, [ebp+arg_C]
.text:00006AA0                 mov     [ecx+8], edx
.text:00006AA3                 mov     eax, [ebp+arg_10]
.text:00006AA6                 mov     [ecx+0Ch], eax
.text:00006AA9                 mov     edx, [ebp+arg_14]
.text:00006AAC                 mov     [ecx+10h], edx
.text:00006AAF                 mov     eax, [ebp+arg_18]
.text:00006AB2                 mov     [ecx+14h], eax
.text:00006AB5                 mov     ecx, [ebp+var_4]
.text:00006AB8                 mov     edx, [ecx+4]
.text:00006ABB                 add     edx, 1
.text:00006ABE                 mov     eax, [ebp+var_4]
.text:00006AC1                 mov     [eax+4], edx
.text:00006AC4                 push    edx
.text:00006AC5                 mov     ecx, ebp
.text:00006AC7                 push    eax
.text:00006AC8                 lea     edx, $LN5_0
.text:00006ACE                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00006AD3                 pop     eax
.text:00006AD4                 pop     edx
.text:00006AD5                 add     esp, 10h
.text:00006AD8                 cmp     ebp, esp
.text:00006ADA                 call    __RTC_CheckEsp
.text:00006ADF                 mov     esp, ebp
.text:00006AE1                 pop     ebp
.text:00006AE2                 retn    1Ch
.text:00006AE2 ?Insert@?$CRecordVector@UCKeyKeyValPair@@@@QAEXIUCKeyKeyValPair@@@Z endp
.text:00006AE2
.text:00006AE2 ; ---------------------------------------------------------------------------
.text:00006AE5                 align 4
.text:00006AE8 $LN5_0          dd 1                    ; DATA XREF: CRecordVector<CKeyKeyValPair>::Insert(uint,CKeyKeyValPair)+78o
.text:00006AEC                 dd offset $LN4_1
.text:00006AF0 $LN4_1          dd 0FFFFFFF4h, 4        ; DATA XREF: .text:00006AECo
.text:00006AF8                 dd offset $LN3_0        ; "_$ArrayPad"
.text:00006AFC $LN3_0          db '_$ArrayPad',0       ; DATA XREF: .text:00006AF8o
.text:00006B07                 align 4
.text:00006B07 _text           ends
.text:00006B07
.text:00006B08 ; ===========================================================================
.text:00006B08
.text:00006B08 ; Segment type: Pure code
.text:00006B08 ; Segment permissions: Read/Execute
.text:00006B08 _text           segment para public 'CODE' use32
.text:00006B08                 assume cs:_text
.text:00006B08                 ;org 6B08h
.text:00006B08 ; COMDAT (pick any)
.text:00006B08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006B08
.text:00006B08 ; =============== S U B R O U T I N E =======================================
.text:00006B08
.text:00006B08 ; Attributes: bp-based frame
.text:00006B08
.text:00006B08 ; private: void __thiscall CRecordVector<void *>::MoveItems(unsigned int, unsigned int)
.text:00006B08                 public ?MoveItems@?$CRecordVector@PAX@@AAEXII@Z
.text:00006B08 ?MoveItems@?$CRecordVector@PAX@@AAEXII@Z proc near
.text:00006B08                                         ; CODE XREF: CRecordVector<void *>::Delete(uint)+1Cp
.text:00006B08
.text:00006B08 var_4           = dword ptr -4
.text:00006B08 arg_0           = dword ptr  8
.text:00006B08 arg_4           = dword ptr  0Ch
.text:00006B08
.text:00006B08                 push    ebp
.text:00006B09                 mov     ebp, esp
.text:00006B0B                 push    ecx
.text:00006B0C                 push    esi
.text:00006B0D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006B14                 mov     [ebp+var_4], ecx
.text:00006B17                 mov     eax, [ebp+var_4]
.text:00006B1A                 mov     ecx, [eax+4]
.text:00006B1D                 sub     ecx, [ebp+arg_4]
.text:00006B20                 shl     ecx, 2
.text:00006B23                 mov     esi, esp
.text:00006B25                 push    ecx             ; Size
.text:00006B26                 mov     edx, [ebp+var_4]
.text:00006B29                 mov     eax, [edx]
.text:00006B2B                 mov     ecx, [ebp+arg_4]
.text:00006B2E                 lea     edx, [eax+ecx*4]
.text:00006B31                 push    edx             ; Src
.text:00006B32                 mov     eax, [ebp+var_4]
.text:00006B35                 mov     ecx, [eax]
.text:00006B37                 mov     edx, [ebp+arg_0]
.text:00006B3A                 lea     eax, [ecx+edx*4]
.text:00006B3D                 push    eax             ; Dst
.text:00006B3E                 call    dword ptr ds:__imp__memmove
.text:00006B44                 add     esp, 0Ch
.text:00006B47                 cmp     esi, esp
.text:00006B49                 call    __RTC_CheckEsp
.text:00006B4E                 pop     esi
.text:00006B4F                 add     esp, 4
.text:00006B52                 cmp     ebp, esp
.text:00006B54                 call    __RTC_CheckEsp
.text:00006B59                 mov     esp, ebp
.text:00006B5B                 pop     ebp
.text:00006B5C                 retn    8
.text:00006B5C ?MoveItems@?$CRecordVector@PAX@@AAEXII@Z endp
.text:00006B5C
.text:00006B5C ; ---------------------------------------------------------------------------
.text:00006B5F                 align 10h
.text:00006B5F _text           ends
.text:00006B5F
.text:00006B60 ; ===========================================================================
.text:00006B60
.text:00006B60 ; Segment type: Pure code
.text:00006B60 ; Segment permissions: Read/Execute
.text:00006B60 _text           segment para public 'CODE' use32
.text:00006B60                 assume cs:_text
.text:00006B60                 ;org 6B60h
.text:00006B60 ; COMDAT (pick any)
.text:00006B60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006B60
.text:00006B60 ; =============== S U B R O U T I N E =======================================
.text:00006B60
.text:00006B60 ; Attributes: bp-based frame
.text:00006B60
.text:00006B60 ; private: void __thiscall CRecordVector<void *>::ReserveOnePosition(void)
.text:00006B60                 public ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ
.text:00006B60 ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ proc near
.text:00006B60                                         ; CODE XREF: CRecordVector<void *>::Add(void * const)+1Ap
.text:00006B60
.text:00006B60 var_14          = dword ptr -14h
.text:00006B60 var_10          = dword ptr -10h
.text:00006B60 Dst             = dword ptr -0Ch
.text:00006B60 var_8           = dword ptr -8
.text:00006B60 var_4           = dword ptr -4
.text:00006B60
.text:00006B60                 push    ebp
.text:00006B61                 mov     ebp, esp
.text:00006B63                 sub     esp, 14h
.text:00006B66                 mov     eax, 0CCCCCCCCh
.text:00006B6B                 mov     [ebp+var_14], eax
.text:00006B6E                 mov     [ebp+var_10], eax
.text:00006B71                 mov     [ebp+Dst], eax
.text:00006B74                 mov     [ebp+var_8], eax
.text:00006B77                 mov     [ebp+var_4], eax
.text:00006B7A                 mov     [ebp+var_4], ecx
.text:00006B7D                 mov     eax, [ebp+var_4]
.text:00006B80                 mov     ecx, [ebp+var_4]
.text:00006B83                 mov     edx, [eax+4]
.text:00006B86                 cmp     edx, [ecx+8]
.text:00006B89                 jnz     loc_6C14
.text:00006B8F                 mov     eax, [ebp+var_4]
.text:00006B92                 mov     ecx, [eax+8]
.text:00006B95                 shr     ecx, 2
.text:00006B98                 mov     edx, [ebp+var_4]
.text:00006B9B                 mov     eax, [edx+8]
.text:00006B9E                 lea     ecx, [eax+ecx+1]
.text:00006BA2                 mov     [ebp+var_8], ecx
.text:00006BA5                 xor     ecx, ecx
.text:00006BA7                 mov     eax, [ebp+var_8]
.text:00006BAA                 mov     edx, 4
.text:00006BAF                 mul     edx
.text:00006BB1                 seto    cl
.text:00006BB4                 neg     ecx
.text:00006BB6                 or      ecx, eax
.text:00006BB8                 push    ecx             ; unsigned int
.text:00006BB9                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00006BBE                 add     esp, 4
.text:00006BC1                 mov     [ebp+var_10], eax
.text:00006BC4                 mov     eax, [ebp+var_10]
.text:00006BC7                 mov     [ebp+Dst], eax
.text:00006BCA                 mov     ecx, [ebp+var_4]
.text:00006BCD                 cmp     dword ptr [ecx+4], 0
.text:00006BD1                 jz      short loc_6BEF
.text:00006BD3                 mov     edx, [ebp+var_4]
.text:00006BD6                 mov     eax, [edx+4]
.text:00006BD9                 shl     eax, 2
.text:00006BDC                 push    eax             ; Size
.text:00006BDD                 mov     ecx, [ebp+var_4]
.text:00006BE0                 mov     edx, [ecx]
.text:00006BE2                 push    edx             ; Src
.text:00006BE3                 mov     eax, [ebp+Dst]
.text:00006BE6                 push    eax             ; Dst
.text:00006BE7                 call    _memcpy
.text:00006BEC                 add     esp, 0Ch
.text:00006BEF
.text:00006BEF loc_6BEF:                               ; CODE XREF: CRecordVector<void *>::ReserveOnePosition(void)+71j
.text:00006BEF                 mov     ecx, [ebp+var_4]
.text:00006BF2                 mov     edx, [ecx]
.text:00006BF4                 mov     [ebp+var_14], edx
.text:00006BF7                 mov     eax, [ebp+var_14]
.text:00006BFA                 push    eax             ; void *
.text:00006BFB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006C00                 add     esp, 4
.text:00006C03                 mov     ecx, [ebp+var_4]
.text:00006C06                 mov     edx, [ebp+Dst]
.text:00006C09                 mov     [ecx], edx
.text:00006C0B                 mov     eax, [ebp+var_4]
.text:00006C0E                 mov     ecx, [ebp+var_8]
.text:00006C11                 mov     [eax+8], ecx
.text:00006C14
.text:00006C14 loc_6C14:                               ; CODE XREF: CRecordVector<void *>::ReserveOnePosition(void)+29j
.text:00006C14                 add     esp, 14h
.text:00006C17                 cmp     ebp, esp
.text:00006C19                 call    __RTC_CheckEsp
.text:00006C1E                 mov     esp, ebp
.text:00006C20                 pop     ebp
.text:00006C21                 retn
.text:00006C21 ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ endp
.text:00006C21
.text:00006C21 ; ---------------------------------------------------------------------------
.text:00006C22                 align 4
.text:00006C22 _text           ends
.text:00006C22
.text:00006C24 ; ===========================================================================
.text:00006C24
.text:00006C24 ; Segment type: Pure code
.text:00006C24 ; Segment permissions: Read/Execute
.text:00006C24 _text           segment para public 'CODE' use32
.text:00006C24                 assume cs:_text
.text:00006C24                 ;org 6C24h
.text:00006C24 ; COMDAT (pick any)
.text:00006C24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006C24
.text:00006C24 ; =============== S U B R O U T I N E =======================================
.text:00006C24
.text:00006C24 ; Attributes: bp-based frame
.text:00006C24
.text:00006C24 ; private: void __thiscall CRecordVector<struct CKeyKeyValPair>::MoveItems(unsigned int, unsigned int)
.text:00006C24                 public ?MoveItems@?$CRecordVector@UCKeyKeyValPair@@@@AAEXII@Z
.text:00006C24 ?MoveItems@?$CRecordVector@UCKeyKeyValPair@@@@AAEXII@Z proc near
.text:00006C24                                         ; CODE XREF: CRecordVector<CKeyKeyValPair>::Insert(uint,CKeyKeyValPair)+30p
.text:00006C24
.text:00006C24 var_4           = dword ptr -4
.text:00006C24 arg_0           = dword ptr  8
.text:00006C24 arg_4           = dword ptr  0Ch
.text:00006C24
.text:00006C24                 push    ebp
.text:00006C25                 mov     ebp, esp
.text:00006C27                 push    ecx
.text:00006C28                 push    esi
.text:00006C29                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006C30                 mov     [ebp+var_4], ecx
.text:00006C33                 mov     eax, [ebp+var_4]
.text:00006C36                 mov     ecx, [eax+4]
.text:00006C39                 sub     ecx, [ebp+arg_4]
.text:00006C3C                 imul    ecx, 18h
.text:00006C3F                 mov     esi, esp
.text:00006C41                 push    ecx             ; Size
.text:00006C42                 mov     edx, [ebp+arg_4]
.text:00006C45                 imul    edx, 18h
.text:00006C48                 mov     eax, [ebp+var_4]
.text:00006C4B                 add     edx, [eax]
.text:00006C4D                 push    edx             ; Src
.text:00006C4E                 mov     ecx, [ebp+arg_0]
.text:00006C51                 imul    ecx, 18h
.text:00006C54                 mov     edx, [ebp+var_4]
.text:00006C57                 add     ecx, [edx]
.text:00006C59                 push    ecx             ; Dst
.text:00006C5A                 call    dword ptr ds:__imp__memmove
.text:00006C60                 add     esp, 0Ch
.text:00006C63                 cmp     esi, esp
.text:00006C65                 call    __RTC_CheckEsp
.text:00006C6A                 pop     esi
.text:00006C6B                 add     esp, 4
.text:00006C6E                 cmp     ebp, esp
.text:00006C70                 call    __RTC_CheckEsp
.text:00006C75                 mov     esp, ebp
.text:00006C77                 pop     ebp
.text:00006C78                 retn    8
.text:00006C78 ?MoveItems@?$CRecordVector@UCKeyKeyValPair@@@@AAEXII@Z endp
.text:00006C78
.text:00006C78 ; ---------------------------------------------------------------------------
.text:00006C7B                 align 4
.text:00006C7B _text           ends
.text:00006C7B
.text:00006C7C ; ===========================================================================
.text:00006C7C
.text:00006C7C ; Segment type: Pure code
.text:00006C7C ; Segment permissions: Read/Execute
.text:00006C7C _text           segment para public 'CODE' use32
.text:00006C7C                 assume cs:_text
.text:00006C7C                 ;org 6C7Ch
.text:00006C7C ; COMDAT (pick any)
.text:00006C7C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006C7C
.text:00006C7C ; =============== S U B R O U T I N E =======================================
.text:00006C7C
.text:00006C7C ; Attributes: bp-based frame
.text:00006C7C
.text:00006C7C ; private: void __thiscall CRecordVector<struct CKeyKeyValPair>::ReserveOnePosition(void)
.text:00006C7C                 public ?ReserveOnePosition@?$CRecordVector@UCKeyKeyValPair@@@@AAEXXZ
.text:00006C7C ?ReserveOnePosition@?$CRecordVector@UCKeyKeyValPair@@@@AAEXXZ proc near
.text:00006C7C                                         ; CODE XREF: CRecordVector<CKeyKeyValPair>::Insert(uint,CKeyKeyValPair)+1Dp
.text:00006C7C
.text:00006C7C var_14          = dword ptr -14h
.text:00006C7C var_10          = dword ptr -10h
.text:00006C7C Dst             = dword ptr -0Ch
.text:00006C7C var_8           = dword ptr -8
.text:00006C7C var_4           = dword ptr -4
.text:00006C7C
.text:00006C7C                 push    ebp
.text:00006C7D                 mov     ebp, esp
.text:00006C7F                 sub     esp, 14h
.text:00006C82                 mov     eax, 0CCCCCCCCh
.text:00006C87                 mov     [ebp+var_14], eax
.text:00006C8A                 mov     [ebp+var_10], eax
.text:00006C8D                 mov     [ebp+Dst], eax
.text:00006C90                 mov     [ebp+var_8], eax
.text:00006C93                 mov     [ebp+var_4], eax
.text:00006C96                 mov     [ebp+var_4], ecx
.text:00006C99                 mov     eax, [ebp+var_4]
.text:00006C9C                 mov     ecx, [ebp+var_4]
.text:00006C9F                 mov     edx, [eax+4]
.text:00006CA2                 cmp     edx, [ecx+8]
.text:00006CA5                 jnz     loc_6D30
.text:00006CAB                 mov     eax, [ebp+var_4]
.text:00006CAE                 mov     ecx, [eax+8]
.text:00006CB1                 shr     ecx, 2
.text:00006CB4                 mov     edx, [ebp+var_4]
.text:00006CB7                 mov     eax, [edx+8]
.text:00006CBA                 lea     ecx, [eax+ecx+1]
.text:00006CBE                 mov     [ebp+var_8], ecx
.text:00006CC1                 xor     ecx, ecx
.text:00006CC3                 mov     eax, [ebp+var_8]
.text:00006CC6                 mov     edx, 18h
.text:00006CCB                 mul     edx
.text:00006CCD                 seto    cl
.text:00006CD0                 neg     ecx
.text:00006CD2                 or      ecx, eax
.text:00006CD4                 push    ecx             ; unsigned int
.text:00006CD5                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00006CDA                 add     esp, 4
.text:00006CDD                 mov     [ebp+var_10], eax
.text:00006CE0                 mov     eax, [ebp+var_10]
.text:00006CE3                 mov     [ebp+Dst], eax
.text:00006CE6                 mov     ecx, [ebp+var_4]
.text:00006CE9                 cmp     dword ptr [ecx+4], 0
.text:00006CED                 jz      short loc_6D0B
.text:00006CEF                 mov     edx, [ebp+var_4]
.text:00006CF2                 mov     eax, [edx+4]
.text:00006CF5                 imul    eax, 18h
.text:00006CF8                 push    eax             ; Size
.text:00006CF9                 mov     ecx, [ebp+var_4]
.text:00006CFC                 mov     edx, [ecx]
.text:00006CFE                 push    edx             ; Src
.text:00006CFF                 mov     eax, [ebp+Dst]
.text:00006D02                 push    eax             ; Dst
.text:00006D03                 call    _memcpy
.text:00006D08                 add     esp, 0Ch
.text:00006D0B
.text:00006D0B loc_6D0B:                               ; CODE XREF: CRecordVector<CKeyKeyValPair>::ReserveOnePosition(void)+71j
.text:00006D0B                 mov     ecx, [ebp+var_4]
.text:00006D0E                 mov     edx, [ecx]
.text:00006D10                 mov     [ebp+var_14], edx
.text:00006D13                 mov     eax, [ebp+var_14]
.text:00006D16                 push    eax             ; void *
.text:00006D17                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006D1C                 add     esp, 4
.text:00006D1F                 mov     ecx, [ebp+var_4]
.text:00006D22                 mov     edx, [ebp+Dst]
.text:00006D25                 mov     [ecx], edx
.text:00006D27                 mov     eax, [ebp+var_4]
.text:00006D2A                 mov     ecx, [ebp+var_8]
.text:00006D2D                 mov     [eax+8], ecx
.text:00006D30
.text:00006D30 loc_6D30:                               ; CODE XREF: CRecordVector<CKeyKeyValPair>::ReserveOnePosition(void)+29j
.text:00006D30                 add     esp, 14h
.text:00006D33                 cmp     ebp, esp
.text:00006D35                 call    __RTC_CheckEsp
.text:00006D3A                 mov     esp, ebp
.text:00006D3C                 pop     ebp
.text:00006D3D                 retn
.text:00006D3D ?ReserveOnePosition@?$CRecordVector@UCKeyKeyValPair@@@@AAEXXZ endp
.text:00006D3D
.text:00006D3D ; ---------------------------------------------------------------------------
.text:00006D3E                 align 10h
.text:00006D3E _text           ends
.text:00006D3E
.text:00006D40 ; ===========================================================================
.text:00006D40
.text:00006D40 ; Segment type: Pure code
.text:00006D40 ; Segment permissions: Read/Execute
.text:00006D40 _text           segment para public 'CODE' use32
.text:00006D40                 assume cs:_text
.text:00006D40                 ;org 6D40h
.text:00006D40 ; COMDAT (pick any)
.text:00006D40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006D40
.text:00006D40 ; =============== S U B R O U T I N E =======================================
.text:00006D40
.text:00006D40 ; Attributes: bp-based frame
.text:00006D40
.text:00006D40 ; int __stdcall MyCompare<unsigned __int64>(unsigned __int64, unsigned __int64)
.text:00006D40                 public ??$MyCompare@_K@@YGH_K0@Z
.text:00006D40 ??$MyCompare@_K@@YGH_K0@Z proc near     ; CODE XREF: CKeyKeyValPair::Compare(CKeyKeyValPair const &)+8Fp
.text:00006D40
.text:00006D40 var_8           = dword ptr -8
.text:00006D40 var_4           = dword ptr -4
.text:00006D40 arg_0           = dword ptr  8
.text:00006D40 arg_4           = dword ptr  0Ch
.text:00006D40 arg_8           = dword ptr  10h
.text:00006D40 arg_C           = dword ptr  14h
.text:00006D40
.text:00006D40                 push    ebp
.text:00006D41                 mov     ebp, esp
.text:00006D43                 sub     esp, 8
.text:00006D46                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006D4D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006D54                 mov     eax, [ebp+arg_4]
.text:00006D57                 cmp     eax, [ebp+arg_C]
.text:00006D5A                 ja      short loc_6D6F
.text:00006D5C                 jb      short loc_6D66
.text:00006D5E                 mov     ecx, [ebp+arg_0]
.text:00006D61                 cmp     ecx, [ebp+arg_8]
.text:00006D64                 jnb     short loc_6D6F
.text:00006D66
.text:00006D66 loc_6D66:                               ; CODE XREF: MyCompare<unsigned __int64>(unsigned __int64,unsigned __int64)+1Cj
.text:00006D66                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00006D6D                 jmp     short loc_6D95
.text:00006D6F ; ---------------------------------------------------------------------------
.text:00006D6F
.text:00006D6F loc_6D6F:                               ; CODE XREF: MyCompare<unsigned __int64>(unsigned __int64,unsigned __int64)+1Aj
.text:00006D6F                                         ; MyCompare<unsigned __int64>(unsigned __int64,unsigned __int64)+24j
.text:00006D6F                 mov     edx, [ebp+arg_0]
.text:00006D72                 cmp     edx, [ebp+arg_8]
.text:00006D75                 jnz     short loc_6D88
.text:00006D77                 mov     eax, [ebp+arg_4]
.text:00006D7A                 cmp     eax, [ebp+arg_C]
.text:00006D7D                 jnz     short loc_6D88
.text:00006D7F                 mov     [ebp+var_8], 0
.text:00006D86                 jmp     short loc_6D8F
.text:00006D88 ; ---------------------------------------------------------------------------
.text:00006D88
.text:00006D88 loc_6D88:                               ; CODE XREF: MyCompare<unsigned __int64>(unsigned __int64,unsigned __int64)+35j
.text:00006D88                                         ; MyCompare<unsigned __int64>(unsigned __int64,unsigned __int64)+3Dj
.text:00006D88                 mov     [ebp+var_8], 1
.text:00006D8F
.text:00006D8F loc_6D8F:                               ; CODE XREF: MyCompare<unsigned __int64>(unsigned __int64,unsigned __int64)+46j
.text:00006D8F                 mov     ecx, [ebp+var_8]
.text:00006D92                 mov     [ebp+var_4], ecx
.text:00006D95
.text:00006D95 loc_6D95:                               ; CODE XREF: MyCompare<unsigned __int64>(unsigned __int64,unsigned __int64)+2Dj
.text:00006D95                 mov     eax, [ebp+var_4]
.text:00006D98                 mov     esp, ebp
.text:00006D9A                 pop     ebp
.text:00006D9B                 retn    10h
.text:00006D9B ??$MyCompare@_K@@YGH_K0@Z endp
.text:00006D9B
.text:00006D9B ; ---------------------------------------------------------------------------
.text:00006D9E                 align 10h
.text:00006D9E _text           ends
.text:00006D9E
.text:00006DA0 ; ===========================================================================
.text:00006DA0
.text:00006DA0 ; Segment type: Pure code
.text:00006DA0 ; Segment permissions: Read/Execute
.text:00006DA0 _text           segment para public 'CODE' use32
.text:00006DA0                 assume cs:_text
.text:00006DA0                 ;org 6DA0h
.text:00006DA0 ; COMDAT (pick any)
.text:00006DA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006DA0
.text:00006DA0 ; =============== S U B R O U T I N E =======================================
.text:00006DA0
.text:00006DA0
.text:00006DA0 ; [thunk]:public: virtual unsigned long __stdcall CArchiveUpdateCallback::Release`adjustor{16}' (void)
.text:00006DA0                 public ?Release@CArchiveUpdateCallback@@WBA@AGKXZ
.text:00006DA0 ?Release@CArchiveUpdateCallback@@WBA@AGKXZ proc near
.text:00006DA0                                         ; DATA XREF: .rdata:00003334o
.text:00006DA0
.text:00006DA0 arg_0           = dword ptr  4
.text:00006DA0
.text:00006DA0                 sub     [esp+arg_0], 10h
.text:00006DA5                 jmp     ?Release@CArchiveUpdateCallback@@UAGKXZ ; CArchiveUpdateCallback::Release(void)
.text:00006DA5 ?Release@CArchiveUpdateCallback@@WBA@AGKXZ endp
.text:00006DA5
.text:00006DA5 ; ---------------------------------------------------------------------------
.text:00006DAA                 align 4
.text:00006DAA _text           ends
.text:00006DAA
.text:00006DAC ; ===========================================================================
.text:00006DAC
.text:00006DAC ; Segment type: Pure code
.text:00006DAC ; Segment permissions: Read/Execute
.text:00006DAC _text           segment para public 'CODE' use32
.text:00006DAC                 assume cs:_text
.text:00006DAC                 ;org 6DACh
.text:00006DAC ; COMDAT (pick any)
.text:00006DAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006DAC
.text:00006DAC ; =============== S U B R O U T I N E =======================================
.text:00006DAC
.text:00006DAC
.text:00006DAC ; [thunk]:public: virtual unsigned long __stdcall CArchiveUpdateCallback::AddRef`adjustor{8}' (void)
.text:00006DAC                 public ?AddRef@CArchiveUpdateCallback@@W7AGKXZ
.text:00006DAC ?AddRef@CArchiveUpdateCallback@@W7AGKXZ proc near
.text:00006DAC                                         ; DATA XREF: .rdata:00003368o
.text:00006DAC
.text:00006DAC arg_0           = dword ptr  4
.text:00006DAC
.text:00006DAC                 sub     [esp+arg_0], 8
.text:00006DB1                 jmp     ?AddRef@CArchiveUpdateCallback@@UAGKXZ ; CArchiveUpdateCallback::AddRef(void)
.text:00006DB1 ?AddRef@CArchiveUpdateCallback@@W7AGKXZ endp
.text:00006DB1
.text:00006DB1 ; ---------------------------------------------------------------------------
.text:00006DB6                 align 4
.text:00006DB6 _text           ends
.text:00006DB6
.text:00006DB8 ; ===========================================================================
.text:00006DB8
.text:00006DB8 ; Segment type: Pure code
.text:00006DB8 ; Segment permissions: Read/Execute
.text:00006DB8 _text           segment para public 'CODE' use32
.text:00006DB8                 assume cs:_text
.text:00006DB8                 ;org 6DB8h
.text:00006DB8 ; COMDAT (pick any)
.text:00006DB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006DB8
.text:00006DB8 ; =============== S U B R O U T I N E =======================================
.text:00006DB8
.text:00006DB8
.text:00006DB8 ; [thunk]:public: virtual long __stdcall CArchiveUpdateCallback::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:00006DB8                 public ?QueryInterface@CArchiveUpdateCallback@@W3AGJABU_GUID@@PAPAX@Z
.text:00006DB8 ?QueryInterface@CArchiveUpdateCallback@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:00006DB8                                         ; DATA XREF: .rdata:const CArchiveUpdateCallback::`vftable'{for `IArchiveUpdateCallbackFile'}o
.text:00006DB8
.text:00006DB8 arg_0           = dword ptr  4
.text:00006DB8
.text:00006DB8                 sub     [esp+arg_0], 4
.text:00006DBD                 jmp     ?QueryInterface@CArchiveUpdateCallback@@UAGJABU_GUID@@PAPAX@Z ; CArchiveUpdateCallback::QueryInterface(_GUID const &,void * *)
.text:00006DBD ?QueryInterface@CArchiveUpdateCallback@@W3AGJABU_GUID@@PAPAX@Z endp
.text:00006DBD
.text:00006DBD ; ---------------------------------------------------------------------------
.text:00006DC2                 align 4
.text:00006DC2 _text           ends
.text:00006DC2
.text:00006DC4 ; ===========================================================================
.text:00006DC4
.text:00006DC4 ; Segment type: Pure code
.text:00006DC4 ; Segment permissions: Read/Execute
.text:00006DC4 _text           segment para public 'CODE' use32
.text:00006DC4                 assume cs:_text
.text:00006DC4                 ;org 6DC4h
.text:00006DC4 ; COMDAT (pick any)
.text:00006DC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006DC4
.text:00006DC4 ; =============== S U B R O U T I N E =======================================
.text:00006DC4
.text:00006DC4
.text:00006DC4 ; [thunk]:public: virtual unsigned long __stdcall CArchiveUpdateCallback::Release`adjustor{20}' (void)
.text:00006DC4                 public ?Release@CArchiveUpdateCallback@@WBE@AGKXZ
.text:00006DC4 ?Release@CArchiveUpdateCallback@@WBE@AGKXZ proc near
.text:00006DC4                                         ; DATA XREF: .rdata:00003320o
.text:00006DC4
.text:00006DC4 arg_0           = dword ptr  4
.text:00006DC4
.text:00006DC4                 sub     [esp+arg_0], 14h
.text:00006DC9                 jmp     ?Release@CArchiveUpdateCallback@@UAGKXZ ; CArchiveUpdateCallback::Release(void)
.text:00006DC9 ?Release@CArchiveUpdateCallback@@WBE@AGKXZ endp
.text:00006DC9
.text:00006DC9 ; ---------------------------------------------------------------------------
.text:00006DCE                 align 10h
.text:00006DCE _text           ends
.text:00006DCE
.text:00006DD0 ; ===========================================================================
.text:00006DD0
.text:00006DD0 ; Segment type: Pure code
.text:00006DD0 ; Segment permissions: Read/Execute
.text:00006DD0 _text           segment para public 'CODE' use32
.text:00006DD0                 assume cs:_text
.text:00006DD0                 ;org 6DD0h
.text:00006DD0 ; COMDAT (pick any)
.text:00006DD0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006DD0
.text:00006DD0 ; =============== S U B R O U T I N E =======================================
.text:00006DD0
.text:00006DD0
.text:00006DD0 ; [thunk]:public: virtual unsigned long __stdcall CArchiveUpdateCallback::AddRef`adjustor{12}' (void)
.text:00006DD0                 public ?AddRef@CArchiveUpdateCallback@@WM@AGKXZ
.text:00006DD0 ?AddRef@CArchiveUpdateCallback@@WM@AGKXZ proc near
.text:00006DD0                                         ; DATA XREF: .rdata:00003348o
.text:00006DD0
.text:00006DD0 arg_0           = dword ptr  4
.text:00006DD0
.text:00006DD0                 sub     [esp+arg_0], 0Ch
.text:00006DD5                 jmp     ?AddRef@CArchiveUpdateCallback@@UAGKXZ ; CArchiveUpdateCallback::AddRef(void)
.text:00006DD5 ?AddRef@CArchiveUpdateCallback@@WM@AGKXZ endp
.text:00006DD5
.text:00006DD5 ; ---------------------------------------------------------------------------
.text:00006DDA                 align 4
.text:00006DDA _text           ends
.text:00006DDA
.text:00006DDC ; ===========================================================================
.text:00006DDC
.text:00006DDC ; Segment type: Pure code
.text:00006DDC ; Segment permissions: Read/Execute
.text:00006DDC _text           segment para public 'CODE' use32
.text:00006DDC                 assume cs:_text
.text:00006DDC                 ;org 6DDCh
.text:00006DDC ; COMDAT (pick any)
.text:00006DDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006DDC
.text:00006DDC ; =============== S U B R O U T I N E =======================================
.text:00006DDC
.text:00006DDC
.text:00006DDC ; [thunk]:public: virtual long __stdcall CArchiveUpdateCallback::QueryInterface`adjustor{8}' (struct _GUID const &, void * *)
.text:00006DDC                 public ?QueryInterface@CArchiveUpdateCallback@@W7AGJABU_GUID@@PAPAX@Z
.text:00006DDC ?QueryInterface@CArchiveUpdateCallback@@W7AGJABU_GUID@@PAPAX@Z proc near
.text:00006DDC                                         ; DATA XREF: .rdata:const CArchiveUpdateCallback::`vftable'{for `IArchiveExtractCallbackMessage'}o
.text:00006DDC
.text:00006DDC arg_0           = dword ptr  4
.text:00006DDC
.text:00006DDC                 sub     [esp+arg_0], 8
.text:00006DE1                 jmp     ?QueryInterface@CArchiveUpdateCallback@@UAGJABU_GUID@@PAPAX@Z ; CArchiveUpdateCallback::QueryInterface(_GUID const &,void * *)
.text:00006DE1 ?QueryInterface@CArchiveUpdateCallback@@W7AGJABU_GUID@@PAPAX@Z endp
.text:00006DE1
.text:00006DE1 ; ---------------------------------------------------------------------------
.text:00006DE6                 align 4
.text:00006DE6 _text           ends
.text:00006DE6
.text:00006DE8 ; ===========================================================================
.text:00006DE8
.text:00006DE8 ; Segment type: Pure code
.text:00006DE8 ; Segment permissions: Read/Execute
.text:00006DE8 _text           segment para public 'CODE' use32
.text:00006DE8                 assume cs:_text
.text:00006DE8                 ;org 6DE8h
.text:00006DE8 ; COMDAT (pick any)
.text:00006DE8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006DE8
.text:00006DE8 ; =============== S U B R O U T I N E =======================================
.text:00006DE8
.text:00006DE8
.text:00006DE8 ; [thunk]:public: virtual unsigned long __stdcall CArchiveUpdateCallback::Release`adjustor{24}' (void)
.text:00006DE8                 public ?Release@CArchiveUpdateCallback@@WBI@AGKXZ
.text:00006DE8 ?Release@CArchiveUpdateCallback@@WBI@AGKXZ proc near
.text:00006DE8                                         ; DATA XREF: .rdata:0000330Co
.text:00006DE8
.text:00006DE8 arg_0           = dword ptr  4
.text:00006DE8
.text:00006DE8                 sub     [esp+arg_0], 18h
.text:00006DED                 jmp     ?Release@CArchiveUpdateCallback@@UAGKXZ ; CArchiveUpdateCallback::Release(void)
.text:00006DED ?Release@CArchiveUpdateCallback@@WBI@AGKXZ endp
.text:00006DED
.text:00006DED ; ---------------------------------------------------------------------------
.text:00006DF2                 align 4
.text:00006DF2 _text           ends
.text:00006DF2
.text:00006DF4 ; ===========================================================================
.text:00006DF4
.text:00006DF4 ; Segment type: Pure code
.text:00006DF4 ; Segment permissions: Read/Execute
.text:00006DF4 _text           segment para public 'CODE' use32
.text:00006DF4                 assume cs:_text
.text:00006DF4                 ;org 6DF4h
.text:00006DF4 ; COMDAT (pick any)
.text:00006DF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006DF4
.text:00006DF4 ; =============== S U B R O U T I N E =======================================
.text:00006DF4
.text:00006DF4
.text:00006DF4 ; [thunk]:public: virtual unsigned long __stdcall CArchiveUpdateCallback::AddRef`adjustor{16}' (void)
.text:00006DF4                 public ?AddRef@CArchiveUpdateCallback@@WBA@AGKXZ
.text:00006DF4 ?AddRef@CArchiveUpdateCallback@@WBA@AGKXZ proc near
.text:00006DF4                                         ; DATA XREF: .rdata:00003330o
.text:00006DF4
.text:00006DF4 arg_0           = dword ptr  4
.text:00006DF4
.text:00006DF4                 sub     [esp+arg_0], 10h
.text:00006DF9                 jmp     ?AddRef@CArchiveUpdateCallback@@UAGKXZ ; CArchiveUpdateCallback::AddRef(void)
.text:00006DF9 ?AddRef@CArchiveUpdateCallback@@WBA@AGKXZ endp
.text:00006DF9
.text:00006DF9 ; ---------------------------------------------------------------------------
.text:00006DFE                 align 10h
.text:00006DFE _text           ends
.text:00006DFE
.text:00006E00 ; ===========================================================================
.text:00006E00
.text:00006E00 ; Segment type: Pure code
.text:00006E00 ; Segment permissions: Read/Execute
.text:00006E00 _text           segment para public 'CODE' use32
.text:00006E00                 assume cs:_text
.text:00006E00                 ;org 6E00h
.text:00006E00 ; COMDAT (pick any)
.text:00006E00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006E00
.text:00006E00 ; =============== S U B R O U T I N E =======================================
.text:00006E00
.text:00006E00
.text:00006E00 ; [thunk]:public: virtual long __stdcall CArchiveUpdateCallback::QueryInterface`adjustor{12}' (struct _GUID const &, void * *)
.text:00006E00                 public ?QueryInterface@CArchiveUpdateCallback@@WM@AGJABU_GUID@@PAPAX@Z
.text:00006E00 ?QueryInterface@CArchiveUpdateCallback@@WM@AGJABU_GUID@@PAPAX@Z proc near
.text:00006E00                                         ; DATA XREF: .rdata:const CArchiveUpdateCallback::`vftable'{for `IArchiveGetRawProps'}o
.text:00006E00
.text:00006E00 arg_0           = dword ptr  4
.text:00006E00
.text:00006E00                 sub     [esp+arg_0], 0Ch
.text:00006E05                 jmp     ?QueryInterface@CArchiveUpdateCallback@@UAGJABU_GUID@@PAPAX@Z ; CArchiveUpdateCallback::QueryInterface(_GUID const &,void * *)
.text:00006E05 ?QueryInterface@CArchiveUpdateCallback@@WM@AGJABU_GUID@@PAPAX@Z endp
.text:00006E05
.text:00006E05 ; ---------------------------------------------------------------------------
.text:00006E0A                 align 4
.text:00006E0A _text           ends
.text:00006E0A
.text:00006E0C ; ===========================================================================
.text:00006E0C
.text:00006E0C ; Segment type: Pure code
.text:00006E0C ; Segment permissions: Read/Execute
.text:00006E0C _text           segment para public 'CODE' use32
.text:00006E0C                 assume cs:_text
.text:00006E0C                 ;org 6E0Ch
.text:00006E0C ; COMDAT (pick any)
.text:00006E0C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006E0C
.text:00006E0C ; =============== S U B R O U T I N E =======================================
.text:00006E0C
.text:00006E0C
.text:00006E0C ; [thunk]:public: virtual unsigned long __stdcall CArchiveUpdateCallback::Release`adjustor{28}' (void)
.text:00006E0C                 public ?Release@CArchiveUpdateCallback@@WBM@AGKXZ
.text:00006E0C ?Release@CArchiveUpdateCallback@@WBM@AGKXZ proc near
.text:00006E0C                                         ; DATA XREF: .rdata:000032F8o
.text:00006E0C
.text:00006E0C arg_0           = dword ptr  4
.text:00006E0C
.text:00006E0C                 sub     [esp+arg_0], 1Ch
.text:00006E11                 jmp     ?Release@CArchiveUpdateCallback@@UAGKXZ ; CArchiveUpdateCallback::Release(void)
.text:00006E11 ?Release@CArchiveUpdateCallback@@WBM@AGKXZ endp
.text:00006E11
.text:00006E11 ; ---------------------------------------------------------------------------
.text:00006E16                 align 4
.text:00006E16 _text           ends
.text:00006E16
.text:00006E18 ; ===========================================================================
.text:00006E18
.text:00006E18 ; Segment type: Pure code
.text:00006E18 ; Segment permissions: Read/Execute
.text:00006E18 _text           segment para public 'CODE' use32
.text:00006E18                 assume cs:_text
.text:00006E18                 ;org 6E18h
.text:00006E18 ; COMDAT (pick any)
.text:00006E18                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006E18
.text:00006E18 ; =============== S U B R O U T I N E =======================================
.text:00006E18
.text:00006E18
.text:00006E18 ; [thunk]:public: virtual unsigned long __stdcall CArchiveUpdateCallback::AddRef`adjustor{20}' (void)
.text:00006E18                 public ?AddRef@CArchiveUpdateCallback@@WBE@AGKXZ
.text:00006E18 ?AddRef@CArchiveUpdateCallback@@WBE@AGKXZ proc near
.text:00006E18                                         ; DATA XREF: .rdata:0000331Co
.text:00006E18
.text:00006E18 arg_0           = dword ptr  4
.text:00006E18
.text:00006E18                 sub     [esp+arg_0], 14h
.text:00006E1D                 jmp     ?AddRef@CArchiveUpdateCallback@@UAGKXZ ; CArchiveUpdateCallback::AddRef(void)
.text:00006E1D ?AddRef@CArchiveUpdateCallback@@WBE@AGKXZ endp
.text:00006E1D
.text:00006E1D ; ---------------------------------------------------------------------------
.text:00006E22                 align 4
.text:00006E22 _text           ends
.text:00006E22
.text:00006E24 ; ===========================================================================
.text:00006E24
.text:00006E24 ; Segment type: Pure code
.text:00006E24 ; Segment permissions: Read/Execute
.text:00006E24 _text           segment para public 'CODE' use32
.text:00006E24                 assume cs:_text
.text:00006E24                 ;org 6E24h
.text:00006E24 ; COMDAT (pick any)
.text:00006E24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006E24
.text:00006E24 ; =============== S U B R O U T I N E =======================================
.text:00006E24
.text:00006E24
.text:00006E24 ; [thunk]:public: virtual long __stdcall CArchiveUpdateCallback::QueryInterface`adjustor{16}' (struct _GUID const &, void * *)
.text:00006E24                 public ?QueryInterface@CArchiveUpdateCallback@@WBA@AGJABU_GUID@@PAPAX@Z
.text:00006E24 ?QueryInterface@CArchiveUpdateCallback@@WBA@AGJABU_GUID@@PAPAX@Z proc near
.text:00006E24                                         ; DATA XREF: .rdata:const CArchiveUpdateCallback::`vftable'{for `IArchiveGetRootProps'}o
.text:00006E24
.text:00006E24 arg_0           = dword ptr  4
.text:00006E24
.text:00006E24                 sub     [esp+arg_0], 10h
.text:00006E29                 jmp     ?QueryInterface@CArchiveUpdateCallback@@UAGJABU_GUID@@PAPAX@Z ; CArchiveUpdateCallback::QueryInterface(_GUID const &,void * *)
.text:00006E29 ?QueryInterface@CArchiveUpdateCallback@@WBA@AGJABU_GUID@@PAPAX@Z endp
.text:00006E29
.text:00006E29 ; ---------------------------------------------------------------------------
.text:00006E2E                 align 10h
.text:00006E2E _text           ends
.text:00006E2E
.text:00006E30 ; ===========================================================================
.text:00006E30
.text:00006E30 ; Segment type: Pure code
.text:00006E30 ; Segment permissions: Read/Execute
.text:00006E30 _text           segment para public 'CODE' use32
.text:00006E30                 assume cs:_text
.text:00006E30                 ;org 6E30h
.text:00006E30 ; COMDAT (pick any)
.text:00006E30                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006E30
.text:00006E30 ; =============== S U B R O U T I N E =======================================
.text:00006E30
.text:00006E30
.text:00006E30 ; [thunk]:public: virtual unsigned long __stdcall CArchiveUpdateCallback::AddRef`adjustor{24}' (void)
.text:00006E30                 public ?AddRef@CArchiveUpdateCallback@@WBI@AGKXZ
.text:00006E30 ?AddRef@CArchiveUpdateCallback@@WBI@AGKXZ proc near
.text:00006E30                                         ; DATA XREF: .rdata:00003308o
.text:00006E30
.text:00006E30 arg_0           = dword ptr  4
.text:00006E30
.text:00006E30                 sub     [esp+arg_0], 18h
.text:00006E35                 jmp     ?AddRef@CArchiveUpdateCallback@@UAGKXZ ; CArchiveUpdateCallback::AddRef(void)
.text:00006E35 ?AddRef@CArchiveUpdateCallback@@WBI@AGKXZ endp
.text:00006E35
.text:00006E35 ; ---------------------------------------------------------------------------
.text:00006E3A                 align 4
.text:00006E3A _text           ends
.text:00006E3A
.text:00006E3C ; ===========================================================================
.text:00006E3C
.text:00006E3C ; Segment type: Pure code
.text:00006E3C ; Segment permissions: Read/Execute
.text:00006E3C _text           segment para public 'CODE' use32
.text:00006E3C                 assume cs:_text
.text:00006E3C                 ;org 6E3Ch
.text:00006E3C ; COMDAT (pick any)
.text:00006E3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006E3C
.text:00006E3C ; =============== S U B R O U T I N E =======================================
.text:00006E3C
.text:00006E3C
.text:00006E3C ; [thunk]:public: virtual long __stdcall CArchiveUpdateCallback::QueryInterface`adjustor{20}' (struct _GUID const &, void * *)
.text:00006E3C                 public ?QueryInterface@CArchiveUpdateCallback@@WBE@AGJABU_GUID@@PAPAX@Z
.text:00006E3C ?QueryInterface@CArchiveUpdateCallback@@WBE@AGJABU_GUID@@PAPAX@Z proc near
.text:00006E3C                                         ; DATA XREF: .rdata:const CArchiveUpdateCallback::`vftable'{for `ICryptoGetTextPassword2'}o
.text:00006E3C
.text:00006E3C arg_0           = dword ptr  4
.text:00006E3C
.text:00006E3C                 sub     [esp+arg_0], 14h
.text:00006E41                 jmp     ?QueryInterface@CArchiveUpdateCallback@@UAGJABU_GUID@@PAPAX@Z ; CArchiveUpdateCallback::QueryInterface(_GUID const &,void * *)
.text:00006E41 ?QueryInterface@CArchiveUpdateCallback@@WBE@AGJABU_GUID@@PAPAX@Z endp
.text:00006E41
.text:00006E41 ; ---------------------------------------------------------------------------
.text:00006E46                 align 4
.text:00006E46 _text           ends
.text:00006E46
.text:00006E48 ; ===========================================================================
.text:00006E48
.text:00006E48 ; Segment type: Pure code
.text:00006E48 ; Segment permissions: Read/Execute
.text:00006E48 _text           segment para public 'CODE' use32
.text:00006E48                 assume cs:_text
.text:00006E48                 ;org 6E48h
.text:00006E48 ; COMDAT (pick any)
.text:00006E48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006E48
.text:00006E48 ; =============== S U B R O U T I N E =======================================
.text:00006E48
.text:00006E48
.text:00006E48 ; [thunk]:public: virtual unsigned long __stdcall CArchiveUpdateCallback::Release`adjustor{4}' (void)
.text:00006E48                 public ?Release@CArchiveUpdateCallback@@W3AGKXZ
.text:00006E48 ?Release@CArchiveUpdateCallback@@W3AGKXZ proc near
.text:00006E48                                         ; DATA XREF: .rdata:00003388o
.text:00006E48
.text:00006E48 arg_0           = dword ptr  4
.text:00006E48
.text:00006E48                 sub     [esp+arg_0], 4
.text:00006E4D                 jmp     ?Release@CArchiveUpdateCallback@@UAGKXZ ; CArchiveUpdateCallback::Release(void)
.text:00006E4D ?Release@CArchiveUpdateCallback@@W3AGKXZ endp
.text:00006E4D
.text:00006E4D ; ---------------------------------------------------------------------------
.text:00006E52                 align 4
.text:00006E52 _text           ends
.text:00006E52
.text:00006E54 ; ===========================================================================
.text:00006E54
.text:00006E54 ; Segment type: Pure code
.text:00006E54 ; Segment permissions: Read/Execute
.text:00006E54 _text           segment para public 'CODE' use32
.text:00006E54                 assume cs:_text
.text:00006E54                 ;org 6E54h
.text:00006E54 ; COMDAT (pick any)
.text:00006E54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006E54
.text:00006E54 ; =============== S U B R O U T I N E =======================================
.text:00006E54
.text:00006E54
.text:00006E54 ; [thunk]:public: virtual unsigned long __stdcall CArchiveUpdateCallback::AddRef`adjustor{28}' (void)
.text:00006E54                 public ?AddRef@CArchiveUpdateCallback@@WBM@AGKXZ
.text:00006E54 ?AddRef@CArchiveUpdateCallback@@WBM@AGKXZ proc near
.text:00006E54                                         ; DATA XREF: .rdata:000032F4o
.text:00006E54
.text:00006E54 arg_0           = dword ptr  4
.text:00006E54
.text:00006E54                 sub     [esp+arg_0], 1Ch
.text:00006E59                 jmp     ?AddRef@CArchiveUpdateCallback@@UAGKXZ ; CArchiveUpdateCallback::AddRef(void)
.text:00006E59 ?AddRef@CArchiveUpdateCallback@@WBM@AGKXZ endp
.text:00006E59
.text:00006E59 ; ---------------------------------------------------------------------------
.text:00006E5E                 align 10h
.text:00006E5E _text           ends
.text:00006E5E
.text:00006E60 ; ===========================================================================
.text:00006E60
.text:00006E60 ; Segment type: Pure code
.text:00006E60 ; Segment permissions: Read/Execute
.text:00006E60 _text           segment para public 'CODE' use32
.text:00006E60                 assume cs:_text
.text:00006E60                 ;org 6E60h
.text:00006E60 ; COMDAT (pick any)
.text:00006E60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006E60
.text:00006E60 ; =============== S U B R O U T I N E =======================================
.text:00006E60
.text:00006E60
.text:00006E60 ; [thunk]:public: virtual long __stdcall CArchiveUpdateCallback::SetCompleted`adjustor{8}' (unsigned __int64 const *)
.text:00006E60                 public ?SetCompleted@CArchiveUpdateCallback@@W7AGJPB_K@Z
.text:00006E60 ?SetCompleted@CArchiveUpdateCallback@@W7AGJPB_K@Z proc near
.text:00006E60                                         ; DATA XREF: .rdata:00003374o
.text:00006E60
.text:00006E60 arg_0           = dword ptr  4
.text:00006E60
.text:00006E60                 sub     [esp+arg_0], 8
.text:00006E65                 jmp     ?SetCompleted@CArchiveUpdateCallback@@UAGJPB_K@Z ; CArchiveUpdateCallback::SetCompleted(unsigned __int64 const *)
.text:00006E65 ?SetCompleted@CArchiveUpdateCallback@@W7AGJPB_K@Z endp
.text:00006E65
.text:00006E65 ; ---------------------------------------------------------------------------
.text:00006E6A                 align 4
.text:00006E6A _text           ends
.text:00006E6A
.text:00006E6C ; ===========================================================================
.text:00006E6C
.text:00006E6C ; Segment type: Pure code
.text:00006E6C ; Segment permissions: Read/Execute
.text:00006E6C _text           segment para public 'CODE' use32
.text:00006E6C                 assume cs:_text
.text:00006E6C                 ;org 6E6Ch
.text:00006E6C ; COMDAT (pick any)
.text:00006E6C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006E6C
.text:00006E6C ; =============== S U B R O U T I N E =======================================
.text:00006E6C
.text:00006E6C
.text:00006E6C ; [thunk]:public: virtual long __stdcall CArchiveUpdateCallback::QueryInterface`adjustor{24}' (struct _GUID const &, void * *)
.text:00006E6C                 public ?QueryInterface@CArchiveUpdateCallback@@WBI@AGJABU_GUID@@PAPAX@Z
.text:00006E6C ?QueryInterface@CArchiveUpdateCallback@@WBI@AGJABU_GUID@@PAPAX@Z proc near
.text:00006E6C                                         ; DATA XREF: .rdata:const CArchiveUpdateCallback::`vftable'{for `ICryptoGetTextPassword'}o
.text:00006E6C
.text:00006E6C arg_0           = dword ptr  4
.text:00006E6C
.text:00006E6C                 sub     [esp+arg_0], 18h
.text:00006E71                 jmp     ?QueryInterface@CArchiveUpdateCallback@@UAGJABU_GUID@@PAPAX@Z ; CArchiveUpdateCallback::QueryInterface(_GUID const &,void * *)
.text:00006E71 ?QueryInterface@CArchiveUpdateCallback@@WBI@AGJABU_GUID@@PAPAX@Z endp
.text:00006E71
.text:00006E71 ; ---------------------------------------------------------------------------
.text:00006E76                 align 4
.text:00006E76 _text           ends
.text:00006E76
.text:00006E78 ; ===========================================================================
.text:00006E78
.text:00006E78 ; Segment type: Pure code
.text:00006E78 ; Segment permissions: Read/Execute
.text:00006E78 _text           segment para public 'CODE' use32
.text:00006E78                 assume cs:_text
.text:00006E78                 ;org 6E78h
.text:00006E78 ; COMDAT (pick any)
.text:00006E78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006E78
.text:00006E78 ; =============== S U B R O U T I N E =======================================
.text:00006E78
.text:00006E78
.text:00006E78 ; [thunk]:public: virtual unsigned long __stdcall CArchiveUpdateCallback::Release`adjustor{8}' (void)
.text:00006E78                 public ?Release@CArchiveUpdateCallback@@W7AGKXZ
.text:00006E78 ?Release@CArchiveUpdateCallback@@W7AGKXZ proc near
.text:00006E78                                         ; DATA XREF: .rdata:0000336Co
.text:00006E78
.text:00006E78 arg_0           = dword ptr  4
.text:00006E78
.text:00006E78                 sub     [esp+arg_0], 8
.text:00006E7D                 jmp     ?Release@CArchiveUpdateCallback@@UAGKXZ ; CArchiveUpdateCallback::Release(void)
.text:00006E7D ?Release@CArchiveUpdateCallback@@W7AGKXZ endp
.text:00006E7D
.text:00006E7D ; ---------------------------------------------------------------------------
.text:00006E82                 align 4
.text:00006E82 _text           ends
.text:00006E82
.text:00006E84 ; ===========================================================================
.text:00006E84
.text:00006E84 ; Segment type: Pure code
.text:00006E84 ; Segment permissions: Read/Execute
.text:00006E84 _text           segment para public 'CODE' use32
.text:00006E84                 assume cs:_text
.text:00006E84                 ;org 6E84h
.text:00006E84 ; COMDAT (pick any)
.text:00006E84                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006E84
.text:00006E84 ; =============== S U B R O U T I N E =======================================
.text:00006E84
.text:00006E84
.text:00006E84 ; [thunk]:public: virtual long __stdcall CArchiveUpdateCallback::QueryInterface`adjustor{28}' (struct _GUID const &, void * *)
.text:00006E84                 public ?QueryInterface@CArchiveUpdateCallback@@WBM@AGJABU_GUID@@PAPAX@Z
.text:00006E84 ?QueryInterface@CArchiveUpdateCallback@@WBM@AGJABU_GUID@@PAPAX@Z proc near
.text:00006E84                                         ; DATA XREF: .rdata:const CArchiveUpdateCallback::`vftable'{for `ICompressProgressInfo'}o
.text:00006E84
.text:00006E84 arg_0           = dword ptr  4
.text:00006E84
.text:00006E84                 sub     [esp+arg_0], 1Ch
.text:00006E89                 jmp     ?QueryInterface@CArchiveUpdateCallback@@UAGJABU_GUID@@PAPAX@Z ; CArchiveUpdateCallback::QueryInterface(_GUID const &,void * *)
.text:00006E89 ?QueryInterface@CArchiveUpdateCallback@@WBM@AGJABU_GUID@@PAPAX@Z endp
.text:00006E89
.text:00006E89 ; ---------------------------------------------------------------------------
.text:00006E8E                 align 10h
.text:00006E8E _text           ends
.text:00006E8E
.text:00006E90 ; ===========================================================================
.text:00006E90
.text:00006E90 ; Segment type: Pure code
.text:00006E90 ; Segment permissions: Read/Execute
.text:00006E90 _text           segment para public 'CODE' use32
.text:00006E90                 assume cs:_text
.text:00006E90                 ;org 6E90h
.text:00006E90 ; COMDAT (pick any)
.text:00006E90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006E90
.text:00006E90 ; =============== S U B R O U T I N E =======================================
.text:00006E90
.text:00006E90
.text:00006E90 ; [thunk]:public: virtual unsigned long __stdcall CArchiveUpdateCallback::Release`adjustor{12}' (void)
.text:00006E90                 public ?Release@CArchiveUpdateCallback@@WM@AGKXZ
.text:00006E90 ?Release@CArchiveUpdateCallback@@WM@AGKXZ proc near
.text:00006E90                                         ; DATA XREF: .rdata:0000334Co
.text:00006E90
.text:00006E90 arg_0           = dword ptr  4
.text:00006E90
.text:00006E90                 sub     [esp+arg_0], 0Ch
.text:00006E95                 jmp     ?Release@CArchiveUpdateCallback@@UAGKXZ ; CArchiveUpdateCallback::Release(void)
.text:00006E95 ?Release@CArchiveUpdateCallback@@WM@AGKXZ endp
.text:00006E95
.text:00006E95 ; ---------------------------------------------------------------------------
.text:00006E9A                 align 4
.text:00006E9A _text           ends
.text:00006E9A
.text:00006E9C ; ===========================================================================
.text:00006E9C
.text:00006E9C ; Segment type: Pure code
.text:00006E9C ; Segment permissions: Read/Execute
.text:00006E9C _text           segment para public 'CODE' use32
.text:00006E9C                 assume cs:_text
.text:00006E9C                 ;org 6E9Ch
.text:00006E9C ; COMDAT (pick any)
.text:00006E9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006E9C
.text:00006E9C ; =============== S U B R O U T I N E =======================================
.text:00006E9C
.text:00006E9C
.text:00006E9C ; [thunk]:public: virtual unsigned long __stdcall CArchiveUpdateCallback::AddRef`adjustor{4}' (void)
.text:00006E9C                 public ?AddRef@CArchiveUpdateCallback@@W3AGKXZ
.text:00006E9C ?AddRef@CArchiveUpdateCallback@@W3AGKXZ proc near
.text:00006E9C                                         ; DATA XREF: .rdata:00003384o
.text:00006E9C
.text:00006E9C arg_0           = dword ptr  4
.text:00006E9C
.text:00006E9C                 sub     [esp+arg_0], 4
.text:00006EA1                 jmp     ?AddRef@CArchiveUpdateCallback@@UAGKXZ ; CArchiveUpdateCallback::AddRef(void)
.text:00006EA1 ?AddRef@CArchiveUpdateCallback@@W3AGKXZ endp
.text:00006EA1
.text:00006EA1 ; ---------------------------------------------------------------------------
.text:00006EA6                 align 4
.text:00006EA6 _text           ends
.text:00006EA6
.text:00006EA8 ; ===========================================================================
.text:00006EA8
.text:00006EA8 ; Segment type: Pure code
.text:00006EA8 ; Segment permissions: Read/Execute
.text:00006EA8 _text           segment para public 'CODE' use32
.text:00006EA8                 assume cs:_text
.text:00006EA8                 ;org 6EA8h
.text:00006EA8 ; COMDAT (pick any)
.text:00006EA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006EA8
.text:00006EA8 ; =============== S U B R O U T I N E =======================================
.text:00006EA8
.text:00006EA8
.text:00006EA8 ; [thunk]:public: virtual long __stdcall CArchiveUpdateCallback::SetTotal`adjustor{8}' (unsigned __int64)
.text:00006EA8                 public ?SetTotal@CArchiveUpdateCallback@@W7AGJ_K@Z
.text:00006EA8 ?SetTotal@CArchiveUpdateCallback@@W7AGJ_K@Z proc near
.text:00006EA8                                         ; DATA XREF: .rdata:00003370o
.text:00006EA8
.text:00006EA8 arg_0           = dword ptr  4
.text:00006EA8
.text:00006EA8                 sub     [esp+arg_0], 8
.text:00006EAD                 jmp     ?SetTotal@CArchiveUpdateCallback@@UAGJ_K@Z ; CArchiveUpdateCallback::SetTotal(unsigned __int64)
.text:00006EAD ?SetTotal@CArchiveUpdateCallback@@W7AGJ_K@Z endp
.text:00006EAD
.text:00006EAD ; ---------------------------------------------------------------------------
.text:00006EB2                 align 4
.text:00006EB2 _text           ends
.text:00006EB2
.text$yc:00006EB4 ; ===========================================================================
.text$yc:00006EB4
.text$yc:00006EB4 ; Segment type: Pure code
.text$yc:00006EB4 ; Segment permissions: Read/Execute
.text$yc:00006EB4 _text$yc        segment para public 'CODE' use32
.text$yc:00006EB4                 assume cs:_text$yc
.text$yc:00006EB4                 ;org 6EB4h
.text$yc:00006EB4 ; COMDAT (pick any)
.text$yc:00006EB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yc:00006EB4
.text$yc:00006EB4 ; =============== S U B R O U T I N E =======================================
.text$yc:00006EB4
.text$yc:00006EB4 ; Attributes: bp-based frame
.text$yc:00006EB4
.text$yc:00006EB4 ; void __cdecl `dynamic initializer for 'g_CriticalSection''(void)
.text$yc:00006EB4 ??__Eg_CriticalSection@@YAXXZ proc near ; DATA XREF: .CRT$XCU:_g_CriticalSection$initializer$o
.text$yc:00006EB4                 push    ebp
.text$yc:00006EB5                 mov     ebp, esp
.text$yc:00006EB7                 mov     ecx, offset _g_CriticalSection ; this
.text$yc:00006EBC                 call    ??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSection::CCriticalSection(void)
.text$yc:00006EC1                 push    offset ??__Fg_CriticalSection@@YAXXZ ; void (__cdecl *)()
.text$yc:00006EC6                 call    _atexit
.text$yc:00006ECB                 add     esp, 4
.text$yc:00006ECE                 cmp     ebp, esp
.text$yc:00006ED0                 call    __RTC_CheckEsp
.text$yc:00006ED5                 pop     ebp
.text$yc:00006ED6                 retn
.text$yc:00006ED6 ??__Eg_CriticalSection@@YAXXZ endp
.text$yc:00006ED6
.text$yc:00006ED6 ; ---------------------------------------------------------------------------
.text$yc:00006ED7                 align 4
.text$yc:00006ED7 _text$yc        ends
.text$yc:00006ED7
.text:00006ED8 ; ===========================================================================
.text:00006ED8
.text:00006ED8 ; Segment type: Pure code
.text:00006ED8 ; Segment permissions: Read/Execute
.text:00006ED8 _text           segment para public 'CODE' use32
.text:00006ED8                 assume cs:_text
.text:00006ED8                 ;org 6ED8h
.text:00006ED8 ; COMDAT (pick any)
.text:00006ED8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006ED8
.text:00006ED8 ; =============== S U B R O U T I N E =======================================
.text:00006ED8
.text:00006ED8 ; Attributes: bp-based frame
.text:00006ED8
.text:00006ED8 ; _DWORD __thiscall NWindows::NSynchronization::CCriticalSection::CCriticalSection(NWindows::NSynchronization::CCriticalSection *__hidden this)
.text:00006ED8                 public ??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ
.text:00006ED8 ??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ proc near
.text:00006ED8                                         ; CODE XREF: `dynamic initializer for 'g_CriticalSection''(void)+8p
.text:00006ED8                                         ; `dynamic initializer for 'CS''(void)+8p
.text:00006ED8
.text:00006ED8 var_4           = dword ptr -4
.text:00006ED8
.text:00006ED8                 push    ebp
.text:00006ED9                 mov     ebp, esp
.text:00006EDB                 push    ecx
.text:00006EDC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006EE3                 mov     [ebp+var_4], ecx
.text:00006EE6                 mov     eax, [ebp+var_4]
.text:00006EE9                 push    eax
.text:00006EEA                 call    _CriticalSection_Init@4 ; CriticalSection_Init(x)
.text:00006EEF                 mov     eax, [ebp+var_4]
.text:00006EF2                 add     esp, 4
.text:00006EF5                 cmp     ebp, esp
.text:00006EF7                 call    __RTC_CheckEsp
.text:00006EFC                 mov     esp, ebp
.text:00006EFE                 pop     ebp
.text:00006EFF                 retn
.text:00006EFF ??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ endp
.text:00006EFF
.text:00006EFF _text           ends
.text:00006EFF
.text$yc:00006F00 ; ===========================================================================
.text$yc:00006F00
.text$yc:00006F00 ; Segment type: Pure code
.text$yc:00006F00 ; Segment permissions: Read/Execute
.text$yc:00006F00 _text$yc        segment para public 'CODE' use32
.text$yc:00006F00                 assume cs:_text$yc
.text$yc:00006F00                 ;org 6F00h
.text$yc:00006F00 ; COMDAT (pick any)
.text$yc:00006F00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yc:00006F00
.text$yc:00006F00 ; =============== S U B R O U T I N E =======================================
.text$yc:00006F00
.text$yc:00006F00 ; Attributes: bp-based frame
.text$yc:00006F00
.text$yc:00006F00 ; void __cdecl `dynamic initializer for 'CS''(void)
.text$yc:00006F00 ??__ECS@@YAXXZ  proc near               ; DATA XREF: .CRT$XCU:_CS$initializer$o
.text$yc:00006F00                 push    ebp
.text$yc:00006F01                 mov     ebp, esp
.text$yc:00006F03                 mov     ecx, offset _CS ; this
.text$yc:00006F08                 call    ??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSection::CCriticalSection(void)
.text$yc:00006F0D                 push    offset ??__FCS@@YAXXZ ; void (__cdecl *)()
.text$yc:00006F12                 call    _atexit
.text$yc:00006F17                 add     esp, 4
.text$yc:00006F1A                 cmp     ebp, esp
.text$yc:00006F1C                 call    __RTC_CheckEsp
.text$yc:00006F21                 pop     ebp
.text$yc:00006F22                 retn
.text$yc:00006F22 ??__ECS@@YAXXZ  endp
.text$yc:00006F22
.text$yc:00006F22 ; ---------------------------------------------------------------------------
.text$yc:00006F23                 align 4
.text$yc:00006F23 _text$yc        ends
.text$yc:00006F23
.text$yd:00006F24 ; ===========================================================================
.text$yd:00006F24
.text$yd:00006F24 ; Segment type: Pure code
.text$yd:00006F24 ; Segment permissions: Read/Execute
.text$yd:00006F24 _text$yd        segment para public 'CODE' use32
.text$yd:00006F24                 assume cs:_text$yd
.text$yd:00006F24                 ;org 6F24h
.text$yd:00006F24 ; COMDAT (pick any)
.text$yd:00006F24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yd:00006F24
.text$yd:00006F24 ; =============== S U B R O U T I N E =======================================
.text$yd:00006F24
.text$yd:00006F24 ; Attributes: bp-based frame
.text$yd:00006F24
.text$yd:00006F24 ; void __cdecl `dynamic atexit destructor for 'g_CriticalSection''()
.text$yd:00006F24 ??__Fg_CriticalSection@@YAXXZ proc near ; DATA XREF: `dynamic initializer for 'g_CriticalSection''(void)+Do
.text$yd:00006F24                 push    ebp
.text$yd:00006F25                 mov     ebp, esp
.text$yd:00006F27                 mov     ecx, offset _g_CriticalSection ; this
.text$yd:00006F2C                 call    ??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSection::~CCriticalSection(void)
.text$yd:00006F31                 cmp     ebp, esp
.text$yd:00006F33                 call    __RTC_CheckEsp
.text$yd:00006F38                 pop     ebp
.text$yd:00006F39                 retn
.text$yd:00006F39 ??__Fg_CriticalSection@@YAXXZ endp
.text$yd:00006F39
.text$yd:00006F39 ; ---------------------------------------------------------------------------
.text$yd:00006F3A                 align 4
.text$yd:00006F3A _text$yd        ends
.text$yd:00006F3A
.text:00006F3C ; ===========================================================================
.text:00006F3C
.text:00006F3C ; Segment type: Pure code
.text:00006F3C ; Segment permissions: Read/Execute
.text:00006F3C _text           segment para public 'CODE' use32
.text:00006F3C                 assume cs:_text
.text:00006F3C                 ;org 6F3Ch
.text:00006F3C ; COMDAT (pick any)
.text:00006F3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006F3C
.text:00006F3C ; =============== S U B R O U T I N E =======================================
.text:00006F3C
.text:00006F3C ; Attributes: bp-based frame
.text:00006F3C
.text:00006F3C ; _DWORD __thiscall NWindows::NSynchronization::CCriticalSection::~CCriticalSection(NWindows::NSynchronization::CCriticalSection *__hidden this)
.text:00006F3C                 public ??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ
.text:00006F3C ??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ proc near
.text:00006F3C                                         ; CODE XREF: `dynamic atexit destructor for 'g_CriticalSection''(void)+8p
.text:00006F3C                                         ; `dynamic atexit destructor for 'CS''(void)+8p
.text:00006F3C
.text:00006F3C lpCriticalSection= dword ptr -4
.text:00006F3C
.text:00006F3C                 push    ebp
.text:00006F3D                 mov     ebp, esp
.text:00006F3F                 push    ecx
.text:00006F40                 push    esi
.text:00006F41                 mov     [ebp+lpCriticalSection], 0CCCCCCCCh
.text:00006F48                 mov     [ebp+lpCriticalSection], ecx
.text:00006F4B                 mov     esi, esp
.text:00006F4D                 mov     eax, [ebp+lpCriticalSection]
.text:00006F50                 push    eax             ; lpCriticalSection
.text:00006F51                 call    dword ptr ds:__imp__DeleteCriticalSection@4 ; DeleteCriticalSection(x)
.text:00006F57                 cmp     esi, esp
.text:00006F59                 call    __RTC_CheckEsp
.text:00006F5E                 pop     esi
.text:00006F5F                 add     esp, 4
.text:00006F62                 cmp     ebp, esp
.text:00006F64                 call    __RTC_CheckEsp
.text:00006F69                 mov     esp, ebp
.text:00006F6B                 pop     ebp
.text:00006F6C                 retn
.text:00006F6C ??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ endp
.text:00006F6C
.text:00006F6C ; ---------------------------------------------------------------------------
.text:00006F6D                 align 10h
.text:00006F6D _text           ends
.text:00006F6D
.text$yd:00006F70 ; ===========================================================================
.text$yd:00006F70
.text$yd:00006F70 ; Segment type: Pure code
.text$yd:00006F70 ; Segment permissions: Read/Execute
.text$yd:00006F70 _text$yd        segment para public 'CODE' use32
.text$yd:00006F70                 assume cs:_text$yd
.text$yd:00006F70                 ;org 6F70h
.text$yd:00006F70 ; COMDAT (pick any)
.text$yd:00006F70                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yd:00006F70
.text$yd:00006F70 ; =============== S U B R O U T I N E =======================================
.text$yd:00006F70
.text$yd:00006F70 ; Attributes: bp-based frame
.text$yd:00006F70
.text$yd:00006F70 ; void __cdecl `dynamic atexit destructor for 'CS''()
.text$yd:00006F70 ??__FCS@@YAXXZ  proc near               ; DATA XREF: `dynamic initializer for 'CS''(void)+Do
.text$yd:00006F70                 push    ebp
.text$yd:00006F71                 mov     ebp, esp
.text$yd:00006F73                 mov     ecx, offset _CS ; this
.text$yd:00006F78                 call    ??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSection::~CCriticalSection(void)
.text$yd:00006F7D                 cmp     ebp, esp
.text$yd:00006F7F                 call    __RTC_CheckEsp
.text$yd:00006F84                 pop     ebp
.text$yd:00006F85                 retn
.text$yd:00006F85 ??__FCS@@YAXXZ  endp
.text$yd:00006F85
.text$yd:00006F85 ; ---------------------------------------------------------------------------
.text$yd:00006F86                 align 4
.text$yd:00006F86 _text$yd        ends
.text$yd:00006F86
.bss:00006F88 ; ===========================================================================
.bss:00006F88
.bss:00006F88 ; Segment type: Uninitialized
.bss:00006F88 ; Segment permissions: Read/Write
.bss:00006F88 _bss            segment dword public 'BSS' use32
.bss:00006F88                 assume cs:_bss
.bss:00006F88                 ;org 6F88h
.bss:00006F88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:00006F88 ; NWindows::NSynchronization::CCriticalSection g_CriticalSection
.bss:00006F88 _g_CriticalSection db    ? ;            ; DATA XREF: CArchiveUpdateCallback::InFileStream_On_Error(uint,ulong)+50o
.bss:00006F88                                         ; CArchiveUpdateCallback::InFileStream_On_Destroy(uint)+42o ...
.bss:00006F89                 db    ? ;
.bss:00006F8A                 db    ? ;
.bss:00006F8B                 db    ? ;
.bss:00006F8C                 db    ? ;
.bss:00006F8D                 db    ? ;
.bss:00006F8E                 db    ? ;
.bss:00006F8F                 db    ? ;
.bss:00006F90                 db    ? ;
.bss:00006F91                 db    ? ;
.bss:00006F92                 db    ? ;
.bss:00006F93                 db    ? ;
.bss:00006F94                 db    ? ;
.bss:00006F95                 db    ? ;
.bss:00006F96                 db    ? ;
.bss:00006F97                 db    ? ;
.bss:00006F98                 db    ? ;
.bss:00006F99                 db    ? ;
.bss:00006F9A                 db    ? ;
.bss:00006F9B                 db    ? ;
.bss:00006F9C                 db    ? ;
.bss:00006F9D                 db    ? ;
.bss:00006F9E                 db    ? ;
.bss:00006F9F                 db    ? ;
.bss:00006FA0 ; NWindows::NSynchronization::CCriticalSection CS
.bss:00006FA0 _CS             db    ? ;               ; DATA XREF: CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+7CDo
.bss:00006FA0                                         ; `dynamic initializer for 'CS''(void)+3o ...
.bss:00006FA1                 db    ? ;
.bss:00006FA2                 db    ? ;
.bss:00006FA3                 db    ? ;
.bss:00006FA4                 db    ? ;
.bss:00006FA5                 db    ? ;
.bss:00006FA6                 db    ? ;
.bss:00006FA7                 db    ? ;
.bss:00006FA8                 db    ? ;
.bss:00006FA9                 db    ? ;
.bss:00006FAA                 db    ? ;
.bss:00006FAB                 db    ? ;
.bss:00006FAC                 db    ? ;
.bss:00006FAD                 db    ? ;
.bss:00006FAE                 db    ? ;
.bss:00006FAF                 db    ? ;
.bss:00006FB0                 db    ? ;
.bss:00006FB1                 db    ? ;
.bss:00006FB2                 db    ? ;
.bss:00006FB3                 db    ? ;
.bss:00006FB4                 db    ? ;
.bss:00006FB5                 db    ? ;
.bss:00006FB6                 db    ? ;
.bss:00006FB7                 db    ? ;
.bss:00006FB7 _bss            ends
.bss:00006FB7
.CRT$XCU:00006FB8 ; ===========================================================================
.CRT$XCU:00006FB8
.CRT$XCU:00006FB8 ; Segment type: Pure data
.CRT$XCU:00006FB8 ; Segment permissions: Read
.CRT$XCU:00006FB8 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00006FB8                 assume cs:_CRT$XCU
.CRT$XCU:00006FB8                 ;org 6FB8h
.CRT$XCU:00006FB8 _g_CriticalSection$initializer$ dd offset ??__Eg_CriticalSection@@YAXXZ ; `dynamic initializer for 'g_CriticalSection''(void)
.CRT$XCU:00006FBC _CS$initializer$ dd offset ??__ECS@@YAXXZ ; `dynamic initializer for 'CS''(void)
.CRT$XCU:00006FBC _CRT$XCU        ends
.CRT$XCU:00006FBC
UNDEF:00006FC0 ; ===========================================================================
UNDEF:00006FC0
UNDEF:00006FC0 ; Segment type: Externs
UNDEF:00006FC0 ; UNDEF
UNDEF:00006FC0 ; bool __stdcall InitLocalPrivileges()
UNDEF:00006FC0                 extrn ?InitLocalPrivileges@@YG_NXZ:near
UNDEF:00006FC0                                         ; CODE XREF: CArchiveUpdateCallback::CArchiveUpdateCallback(void)+20Bp
UNDEF:00006FC4 ; public: __thiscall UString::UString(void)
UNDEF:00006FC4                 extrn ??0UString@@QAE@XZ:near
UNDEF:00006FC4                                         ; CODE XREF: CArchiveUpdateCallback::CArchiveUpdateCallback(void)+140p
UNDEF:00006FC4                                         ; CArchiveUpdateCallback::CArchiveUpdateCallback(void)+14Fp ...
UNDEF:00006FC8                 extrn ___security_cookie:near
UNDEF:00006FC8                                         ; DATA XREF: CArchiveUpdateCallback::CArchiveUpdateCallback(void)+19r
UNDEF:00006FC8                                         ; CArchiveUpdateCallback::SetTotal(unsigned __int64)+26r ...
UNDEF:00006FCC                 extrn ___CxxFrameHandler3:near
UNDEF:00006FCC                                         ; CODE XREF: __ehhandler$??0CArchiveUpdateCallback@@QAE@XZ+16j
UNDEF:00006FCC                                         ; __ehhandler$?SetTotal@CArchiveUpdateCallback@@UAGJ_K@Z+16j ...
UNDEF:00006FD0 ; __fastcall __security_check_cookie(x)
UNDEF:00006FD0                 extrn @__security_check_cookie@4:near
UNDEF:00006FD0                                         ; CODE XREF: CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+880p
UNDEF:00006FD0                                         ; CArchiveUpdateCallback::ReportOperation(uint,uint,uint)+3E7p ...
UNDEF:00006FD4                 extrn __RTC_CheckEsp:near
UNDEF:00006FD4                                         ; CODE XREF: CArchiveUpdateCallback::CArchiveUpdateCallback(void)+230p
UNDEF:00006FD4                                         ; CArchiveUpdateCallback::SetTotal(unsigned __int64)+60p ...
UNDEF:00006FD8                 extrn __RTC_Shutdown:near
UNDEF:00006FD8                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00006FDC                 extrn __RTC_InitBase:near
UNDEF:00006FDC                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00006FE0 ; const type_info::`vftable'
UNDEF:00006FE0                 extrn ??_7type_info@@6B@:near
UNDEF:00006FE0                                         ; DATA XREF: .data:CArchiveUpdateCallback `RTTI Type Descriptor'o
UNDEF:00006FE0                                         ; .data:IArchiveUpdateCallback2 `RTTI Type Descriptor'o ...
UNDEF:00006FE4 ; void __cdecl operator delete(void *)
UNDEF:00006FE4                 extrn ??3@YAXPAX@Z:near ; CODE XREF: __unwindfunclet$?GetStream2@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@I@Z$4+7p
UNDEF:00006FE4                                         ; __unwindfunclet$?GetStream2@CArchiveUpdateCallback@@UAGJIPAPAUISequentialInStream@@I@Z$7+7p ...
UNDEF:00006FE8                 extrn __purecall:near   ; DATA XREF: .rdata:const ICryptoGetTextPassword::`vftable'o
UNDEF:00006FE8                                         ; .rdata:000042D0o ...
UNDEF:00006FEC                 extrn _IID_ICompressProgressInfo:near
UNDEF:00006FEC                                         ; DATA XREF: CArchiveUpdateCallback::QueryInterface(_GUID const &,void * *):loc_44B3o
UNDEF:00006FF0                 extrn _IID_ICryptoGetTextPassword:near
UNDEF:00006FF0                                         ; DATA XREF: CArchiveUpdateCallback::QueryInterface(_GUID const &,void * *):loc_447Fo
UNDEF:00006FF4                 extrn _IID_ICryptoGetTextPassword2:near
UNDEF:00006FF4                                         ; DATA XREF: CArchiveUpdateCallback::QueryInterface(_GUID const &,void * *):loc_444Bo
UNDEF:00006FF8                 extrn _IID_IArchiveGetRootProps:near
UNDEF:00006FF8                                         ; DATA XREF: CArchiveUpdateCallback::QueryInterface(_GUID const &,void * *):loc_4414o
UNDEF:00006FFC                 extrn _IID_IArchiveGetRawProps:near
UNDEF:00006FFC                                         ; DATA XREF: CArchiveUpdateCallback::QueryInterface(_GUID const &,void * *):loc_43DDo
UNDEF:00007000                 extrn _IID_IArchiveExtractCallbackMessage:near
UNDEF:00007000                                         ; DATA XREF: CArchiveUpdateCallback::QueryInterface(_GUID const &,void * *):loc_43A6o
UNDEF:00007004                 extrn _IID_IArchiveUpdateCallbackFile:near
UNDEF:00007004                                         ; DATA XREF: CArchiveUpdateCallback::QueryInterface(_GUID const &,void * *):loc_436Fo
UNDEF:00007008                 extrn _IID_IArchiveUpdateCallback2:near
UNDEF:00007008                                         ; DATA XREF: CArchiveUpdateCallback::QueryInterface(_GUID const &,void * *):loc_4350o
UNDEF:0000700C ; const IID IID_IUnknown
UNDEF:0000700C                 extrn _IID_IUnknown:near
UNDEF:0000700C                                         ; DATA XREF: CArchiveUpdateCallback::QueryInterface(_GUID const &,void * *)+29o
UNDEF:0000700C                                         ; CBufInStream::QueryInterface(_GUID const &,void * *)+Co ...
UNDEF:00007010 ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:00007010                 extrn _memcmp:near      ; CODE XREF: IsEqualGUID(x,x)+Dp
UNDEF:00007014 ; __int32 __thiscall NWindows::NCOM::CPropVariant::Detach(NWindows::NCOM::CPropVariant *__hidden this, struct tagPROPVARIANT *)
UNDEF:00007014                 extrn ?Detach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z:near
UNDEF:00007014                                         ; CODE XREF: CArchiveUpdateCallback::GetRootProp(ulong,tagPROPVARIANT *)+D3p
UNDEF:00007014                                         ; CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+A5p ...
UNDEF:00007018 ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(struct _FILETIME const &)
UNDEF:00007018                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABU_FILETIME@@@Z:near
UNDEF:00007018                                         ; CODE XREF: CArchiveUpdateCallback::GetRootProp(ulong,tagPROPVARIANT *)+8Dp
UNDEF:00007018                                         ; CArchiveUpdateCallback::GetRootProp(ulong,tagPROPVARIANT *)+AAp ...
UNDEF:0000701C ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(unsigned int)
UNDEF:0000701C                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z:near
UNDEF:0000701C                                         ; CODE XREF: CArchiveUpdateCallback::GetRootProp(ulong,tagPROPVARIANT *)+70p
UNDEF:0000701C                                         ; CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+6DAp
UNDEF:00007020 ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(bool)
UNDEF:00007020                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_N@Z:near
UNDEF:00007020                                         ; CODE XREF: CArchiveUpdateCallback::GetRootProp(ulong,tagPROPVARIANT *)+53p
UNDEF:00007020                                         ; CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+42Ep ...
UNDEF:00007024 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00007024                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00007024                                         ; CODE XREF: CArchiveUpdateCallback::GetRootProp(ulong,tagPROPVARIANT *)+F4p
UNDEF:00007024                                         ; CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+790p ...
UNDEF:00007028 ; __int32 __thiscall NWindows::NCOM::CPropVariant::Clear(NWindows::NCOM::CPropVariant *__hidden this)
UNDEF:00007028                 extrn ?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ:near
UNDEF:00007028                                         ; CODE XREF: NWindows::NCOM::CPropVariant::~CPropVariant(void)+11p
UNDEF:0000702C ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
UNDEF:0000702C                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z:near
UNDEF:0000702C                                         ; CODE XREF: CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+422p
UNDEF:0000702C                                         ; CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+6C6p
UNDEF:00007030 ; struct UString __thiscall __high CDirItems::GetLogPath(unsigned int)
UNDEF:00007030                 extrn ?GetLogPath@CDirItems@@QBE?AVUString@@I@Z:near
UNDEF:00007030                                         ; CODE XREF: CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+345p
UNDEF:00007030                                         ; CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+655p ...
UNDEF:00007034 ; bool NWindows::NFile::NDir::MyGetFullPathName(NWindows::NFile::NDir *__hidden this, const wchar_t *, struct UString *)
UNDEF:00007034                 extrn ?MyGetFullPathName@NDir@NFile@NWindows@@YG_NPB_WAAVUString@@@Z:near
UNDEF:00007034                                         ; CODE XREF: CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+1F2p
UNDEF:00007038 ; struct UString __thiscall __high CDirItems::GetPhyPath(unsigned int)
UNDEF:00007038                 extrn ?GetPhyPath@CDirItems@@QBE?AVUString@@I@Z:near
UNDEF:00007038                                         ; CODE XREF: CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+1B2p
UNDEF:00007038                                         ; CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+51Ep
UNDEF:0000703C ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(class UString const &)
UNDEF:0000703C                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABVUString@@@Z:near
UNDEF:0000703C                                         ; CODE XREF: CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+194p
UNDEF:0000703C                                         ; CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+23Fp ...
UNDEF:00007040 ; struct UString __thiscall __high NWindows::NFile::CReparseAttr::GetPath()
UNDEF:00007040                 extrn ?GetPath@CReparseAttr@NFile@NWindows@@QBE?AVUString@@XZ:near
UNDEF:00007040                                         ; CODE XREF: CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+165p
UNDEF:00007044 ; bool __thiscall NWindows::NFile::CReparseAttr::Parse(NWindows::NFile::CReparseAttr *__hidden this, const unsigned __int8 *, unsigned int)
UNDEF:00007044                 extrn ?Parse@CReparseAttr@NFile@NWindows@@QAE_NPBEI@Z:near
UNDEF:00007044                                         ; CODE XREF: CArchiveUpdateCallback::GetProperty(uint,ulong,tagPROPVARIANT *)+144p
UNDEF:00007048 ; public: class UString & __thiscall UString::operator+=(class UString const &)
UNDEF:00007048                 extrn ??YUString@@QAEAAV0@ABV0@@Z:near
UNDEF:00007048                                         ; CODE XREF: GetRelativePath(UString const &,UString const &)+1BEp
UNDEF:00007048                                         ; CArchiveUpdateCallback::GetVolumeStream(uint,ISequentialOutStream * *)+BEp ...
UNDEF:0000704C ; public: class UString & __thiscall UString::operator+=(wchar_t const *)
UNDEF:0000704C                 extrn ??YUString@@QAEAAV0@PB_W@Z:near
UNDEF:0000704C                                         ; CODE XREF: GetRelativePath(UString const &,UString const &)+179p
UNDEF:00007050 ; public: __thiscall UString::UString(class UString const &)
UNDEF:00007050                 extrn ??0UString@@QAE@ABV0@@Z:near
UNDEF:00007050                                         ; CODE XREF: GetRelativePath(UString const &,UString const &)+116p
UNDEF:00007050                                         ; GetRelativePath(UString const &,UString const &)+1CCp ...
UNDEF:00007054 ; bool NWindows::NFile::NName::IsDrivePath(NWindows::NFile::NName *__hidden this, const wchar_t *)
UNDEF:00007054                 extrn ?IsDrivePath@NName@NFile@NWindows@@YG_NPB_W@Z:near
UNDEF:00007054                                         ; CODE XREF: GetRelativePath(UString const &,UString const &)+EEp
UNDEF:00007054                                         ; GetRelativePath(UString const &,UString const &)+103p
UNDEF:00007058 ; int __stdcall CompareFileNames(const wchar_t *, const wchar_t *)
UNDEF:00007058                 extrn ?CompareFileNames@@YGHPB_W0@Z:near
UNDEF:00007058                                         ; CODE XREF: GetRelativePath(UString const &,UString const &)+D2p
UNDEF:0000705C ; void __stdcall SplitPathToParts(class UString const &, class CObjectVector<class UString> &)
UNDEF:0000705C                 extrn ?SplitPathToParts@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z:near
UNDEF:0000705C                                         ; CODE XREF: GetRelativePath(UString const &,UString const &)+60p
UNDEF:0000705C                                         ; GetRelativePath(UString const &,UString const &)+6Dp
UNDEF:00007060 ; void __thiscall UString::Grow_1(UString *__hidden this)
UNDEF:00007060                 extrn ?Grow_1@UString@@AAEXXZ:near
UNDEF:00007060                                         ; CODE XREF: UString::operator+=(wchar_t)+2Fp
UNDEF:00007064 ; DWORD __stdcall GetLastError()
UNDEF:00007064                 extrn __imp__GetLastError@0:near
UNDEF:00007064                                         ; CODE XREF: CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+5B9p
UNDEF:00007064                                         ; CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+65Cp ...
UNDEF:00007068 ; _DWORD __thiscall CInFileStream::CInFileStream(CInFileStream *__hidden this)
UNDEF:00007068                 extrn ??0CInFileStream@@QAE@XZ:near
UNDEF:00007068                                         ; CODE XREF: CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+47Dp
UNDEF:0000706C ; void *__cdecl operator new(unsigned int)
UNDEF:0000706C                 extrn ??2@YAPAXI@Z:near ; CODE XREF: CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+20Ep
UNDEF:0000706C                                         ; CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+3ABp ...
UNDEF:00007070 ; public: class UString & __thiscall UString::operator=(class UString const &)
UNDEF:00007070                 extrn ??4UString@@QAEAAV0@ABV0@@Z:near
UNDEF:00007070                                         ; CODE XREF: CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+132p
UNDEF:00007070                                         ; CArchiveUpdateCallback::GetStream2(uint,ISequentialInStream * *,uint)+17Bp ...
UNDEF:00007074 ; void __stdcall EnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
UNDEF:00007074                 extrn __imp__EnterCriticalSection@4:near
UNDEF:00007074                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSection::Enter(void)+15p
UNDEF:00007074                                         ; DATA XREF: NWindows::NSynchronization::CCriticalSection::Enter(void)+15r
UNDEF:00007078 ; void __stdcall LeaveCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
UNDEF:00007078                 extrn __imp__LeaveCriticalSection@4:near
UNDEF:00007078                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSection::Leave(void)+15p
UNDEF:00007078                                         ; DATA XREF: NWindows::NSynchronization::CCriticalSection::Leave(void)+15r
UNDEF:0000707C ; bool __thiscall NWindows::NFile::NIO::CInFile::Open(NWindows::NFile::NIO::CInFile *__hidden this, const wchar_t *, unsigned __int32, unsigned __int32, unsigned __int32)
UNDEF:0000707C                 extrn ?Open@CInFile@NIO@NFile@NWindows@@QAE_NPB_WKKK@Z:near
UNDEF:0000707C                                         ; CODE XREF: NWindows::NFile::NIO::CInFile::OpenReparse(wchar_t const *)+1Ep
UNDEF:00007080 ; bool __thiscall NWindows::NFile::NIO::CInFile::OpenShared(NWindows::NFile::NIO::CInFile *__hidden this, const wchar_t *, bool)
UNDEF:00007080                 extrn ?OpenShared@CInFile@NIO@NFile@NWindows@@QAE_NPB_W_N@Z:near
UNDEF:00007080                                         ; CODE XREF: CInFileStream::OpenShared(wchar_t const *,bool)+1Dp
UNDEF:00007084 ; public: virtual long __stdcall CBufInStream::Read(void *, unsigned int, unsigned int *)
UNDEF:00007084                 extrn ?Read@CBufInStream@@UAGJPAXIPAI@Z:near
UNDEF:00007084                                         ; DATA XREF: .rdata:0000514Co
UNDEF:00007088 ; public: virtual long __stdcall CBufInStream::Seek(__int64, unsigned int, unsigned __int64 *)
UNDEF:00007088                 extrn ?Seek@CBufInStream@@UAGJ_JIPA_K@Z:near
UNDEF:00007088                                         ; DATA XREF: .rdata:00005150o
UNDEF:0000708C                 extrn _IID_IInStream:near
UNDEF:0000708C                                         ; DATA XREF: CBufInStream::QueryInterface(_GUID const &,void * *):loc_52D8o
UNDEF:00007090                 extrn _IID_ISequentialInStream:near
UNDEF:00007090                                         ; DATA XREF: CBufInStream::QueryInterface(_GUID const &,void * *):loc_52BCo
UNDEF:00007094 ; public: virtual long __stdcall CStdInFileStream::Read(void *, unsigned int, unsigned int *)
UNDEF:00007094                 extrn ?Read@CStdInFileStream@@UAGJPAXIPAI@Z:near
UNDEF:00007094                                         ; DATA XREF: .rdata:00005520o
UNDEF:00007098 ; public: virtual void * __thiscall CStdInFileStream::`scalar deleting destructor'(unsigned int)
UNDEF:00007098                 extrn ??_GCStdInFileStream@@UAEPAXI@Z_0:near
UNDEF:0000709C ; public: virtual void * __thiscall CStdInFileStream::`vector deleting destructor'(unsigned int)
UNDEF:0000709C                 extrn ??_ECStdInFileStream@@UAEPAXI@Z:near ; weak
UNDEF:0000709C                                         ; DATA XREF: .rdata:00005524o
UNDEF:000070A0 ; void __stdcall ConvertUInt32ToString(unsigned int, wchar_t *)
UNDEF:000070A0                 extrn ?ConvertUInt32ToString@@YGXIPA_W@Z:near
UNDEF:000070A0                                         ; CODE XREF: CArchiveUpdateCallback::ReportOperation(uint,uint,uint)+330p
UNDEF:000070A0                                         ; CArchiveUpdateCallback::ReportExtractResult(uint,uint,int)+1C8p ...
UNDEF:000070A4 ; __int32 __stdcall Archive_IsItem_Dir(struct IInArchive *, unsigned int, bool *)
UNDEF:000070A4                 extrn ?Archive_IsItem_Dir@@YGJPAUIInArchive@@IAA_N@Z:near
UNDEF:000070A4                                         ; CODE XREF: CArchiveUpdateCallback::ReportOperation(uint,uint,uint)+2E0p
UNDEF:000070A8 ; __int32 __thiscall CArc::GetItemPath(CArc *__hidden this, unsigned int, struct UString *)
UNDEF:000070A8                 extrn ?GetItemPath@CArc@@QBEJIAAVUString@@@Z:near
UNDEF:000070A8                                         ; CODE XREF: CArchiveUpdateCallback::ReportOperation(uint,uint,uint)+26Cp
UNDEF:000070A8                                         ; CArchiveUpdateCallback::ReportExtractResult(uint,uint,int)+FAp
UNDEF:000070AC ; __int32 __stdcall Archive_GetItemBoolProp(struct IInArchive *, unsigned int, unsigned __int32, bool *)
UNDEF:000070AC                 extrn ?Archive_GetItemBoolProp@@YGJPAUIInArchive@@IKAA_N@Z:near
UNDEF:000070AC                                         ; CODE XREF: CArchiveUpdateCallback::ReportExtractResult(uint,uint,int)+187p
UNDEF:000070B0 ; void __thiscall UString::InsertAtFront(UString *__hidden this, wchar_t)
UNDEF:000070B0                 extrn ?InsertAtFront@UString@@QAEX_W@Z:near
UNDEF:000070B0                                         ; CODE XREF: CArchiveUpdateCallback::GetVolumeStream(uint,ISequentialOutStream * *)+8Dp
UNDEF:000070B4 ; public: __thiscall UString::UString(wchar_t const *)
UNDEF:000070B4                 extrn ??0UString@@QAE@PB_W@Z:near
UNDEF:000070B4                                         ; CODE XREF: CArchiveUpdateCallback::GetVolumeStream(uint,ISequentialOutStream * *)+62p
UNDEF:000070B8 ; bool __thiscall NWindows::NFile::NIO::COutFile::Create(NWindows::NFile::NIO::COutFile *__hidden this, const wchar_t *, bool)
UNDEF:000070B8                 extrn ?Create@COutFile@NIO@NFile@NWindows@@QAE_NPB_W_N@Z:near
UNDEF:000070B8                                         ; CODE XREF: COutFileStream::Create(wchar_t const *,bool)+2Ep
UNDEF:000070BC ; public: virtual long __stdcall COutFileStream::Write(void const *, unsigned int, unsigned int *)
UNDEF:000070BC                 extrn ?Write@COutFileStream@@UAGJPBXIPAI@Z:near
UNDEF:000070BC                                         ; DATA XREF: .rdata:000057E0o
UNDEF:000070C0 ; public: virtual long __stdcall COutFileStream::Seek(__int64, unsigned int, unsigned __int64 *)
UNDEF:000070C0                 extrn ?Seek@COutFileStream@@UAGJ_JIPA_K@Z:near
UNDEF:000070C0                                         ; DATA XREF: .rdata:000057E4o
UNDEF:000070C4 ; public: virtual long __stdcall COutFileStream::SetSize(unsigned __int64)
UNDEF:000070C4                 extrn ?SetSize@COutFileStream@@UAGJ_K@Z:near
UNDEF:000070C4                                         ; DATA XREF: .rdata:000057E8o
UNDEF:000070C8 ; public: virtual void * __thiscall COutFileStream::`scalar deleting destructor'(unsigned int)
UNDEF:000070C8                 extrn ??_GCOutFileStream@@UAEPAXI@Z_0:near
UNDEF:000070CC ; public: virtual void * __thiscall COutFileStream::`vector deleting destructor'(unsigned int)
UNDEF:000070CC                 extrn ??_ECOutFileStream@@UAEPAXI@Z:near ; weak
UNDEF:000070CC                                         ; DATA XREF: .rdata:000057ECo
UNDEF:000070D0                 extrn _IID_IOutStream:near
UNDEF:000070D0                                         ; DATA XREF: COutFileStream::QueryInterface(_GUID const &,void * *):loc_5944o
UNDEF:000070D4 ; bool __thiscall NWindows::NFile::NIO::CFileBase::Close(NWindows::NFile::NIO::CFileBase *__hidden this)
UNDEF:000070D4                 extrn ?Close@CFileBase@NIO@NFile@NWindows@@QAE_NXZ:near
UNDEF:000070D4                                         ; CODE XREF: NWindows::NFile::NIO::CFileBase::~CFileBase(void)+11p
UNDEF:000070D8 ; __stdcall _CxxThrowException(x, x)
UNDEF:000070D8                 extrn __CxxThrowException@8:near
UNDEF:000070D8                                         ; CODE XREF: CArchiveUpdateCallback::InFileStream_On_Destroy(uint)+D5p
UNDEF:000070DC ; void *__cdecl _memmove(void *Dst, const void *Src, size_t Size)
UNDEF:000070DC                 extrn __imp__memmove:near
UNDEF:000070DC                                         ; CODE XREF: CRecordVector<uint>::MoveItems(uint,uint)+36p
UNDEF:000070DC                                         ; CRecordVector<void *>::MoveItems(uint,uint)+36p ...
UNDEF:000070E0 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:000070E0                 extrn _memcpy:near      ; CODE XREF: CRecordVector<uint>::ReserveOnePosition(void)+87p
UNDEF:000070E0                                         ; CRecordVector<void *>::ReserveOnePosition(void)+87p ...
UNDEF:000070E4 ; int __cdecl atexit(void (__cdecl *)())
UNDEF:000070E4                 extrn _atexit:near      ; CODE XREF: `dynamic initializer for 'g_CriticalSection''(void)+12p
UNDEF:000070E4                                         ; `dynamic initializer for 'CS''(void)+12p
UNDEF:000070E8 ; __stdcall CriticalSection_Init(x)
UNDEF:000070E8                 extrn _CriticalSection_Init@4:near
UNDEF:000070E8                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSection::CCriticalSection(void)+12p
UNDEF:000070EC ; void __stdcall DeleteCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
UNDEF:000070EC                 extrn __imp__DeleteCriticalSection@4:near
UNDEF:000070EC                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSection::~CCriticalSection(void)+15p
UNDEF:000070EC                                         ; DATA XREF: NWindows::NSynchronization::CCriticalSection::~CCriticalSection(void)+15r
UNDEF:000070EC
UNDEF:000070EC
UNDEF:000070EC                 end