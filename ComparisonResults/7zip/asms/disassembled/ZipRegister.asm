.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : 457C3A0A43C87E0988551A1E8C174555
.rdata:00000000 ; Input CRC32 : 98B5673A
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\ZipRegister.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 _rdata          segment dword public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 _k_Signature    db    4                 ; DATA XREF: .rdata:00000048o
.rdata:00000001                 db  50h ; P
.rdata:00000002                 db  4Bh ; K
.rdata:00000003                 db    3
.rdata:00000004                 db    4
.rdata:00000005                 db    4
.rdata:00000006                 db  50h ; P
.rdata:00000007                 db  4Bh ; K
.rdata:00000008                 db    5
.rdata:00000009                 db    6
.rdata:0000000A                 db    6
.rdata:0000000B                 db  50h ; P
.rdata:0000000C                 db  4Bh ; K
.rdata:0000000D                 db  30h ; 0
.rdata:0000000E                 db  30h ; 0
.rdata:0000000F                 db  50h ; P
.rdata:00000010                 db  4Bh ; K
.rdata:00000011                 db    0
.rdata:00000012                 db    0
.rdata:00000013                 db    0
.rdata:00000014 $SG70416        db  7Ah ; z             ; DATA XREF: .rdata:0000004Co
.rdata:00000015                 db  69h ; i
.rdata:00000016                 db  70h ; p
.rdata:00000017                 db    0
.rdata:00000018 $SG70417        db 'zip zipx jar xpi odt ods docx xlsx epub',0
.rdata:00000018                                         ; DATA XREF: .rdata:00000050o
.rdata:00000040 ; struct CArcInfo g_ArcInfo
.rdata:00000040 _g_ArcInfo      db '8',0                ; DATA XREF: NArchive::NZip::CRegisterArc::CRegisterArc(void)+Eo
.rdata:00000042                 db    1
.rdata:00000043                 db  11h
.rdata:00000044                 db    0
.rdata:00000045                 db    0
.rdata:00000046                 db    0
.rdata:00000047                 db    0
.rdata:00000048                 dd offset _k_Signature
.rdata:0000004C                 dd offset $SG70416
.rdata:00000050                 dd offset $SG70417      ; "zip zipx jar xpi odt ods docx xlsx epub"
.rdata:00000054                 align 8
.rdata:00000058                 dd offset ?CreateArc@NZip@NArchive@@YGPAUIInArchive@@XZ ; NArchive::NZip::CreateArc(void)
.rdata:0000005C                 dd offset ?CreateArcOut@NZip@NArchive@@YGPAUIOutArchive@@XZ ; NArchive::NZip::CreateArcOut(void)
.rdata:00000060                 dd offset _IsArc_Zip@8  ; IsArc_Zip(x,x)
.rdata:00000060 _rdata          ends
.rdata:00000060
.text:00000064 ; ===========================================================================
.text:00000064
.text:00000064 ; Segment type: Pure code
.text:00000064 ; Segment permissions: Read/Execute
.text:00000064 _text           segment para public 'CODE' use32
.text:00000064                 assume cs:_text
.text:00000064                 ;org 64h
.text:00000064                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000064
.text:00000064 ; =============== S U B R O U T I N E =======================================
.text:00000064
.text:00000064 ; Attributes: bp-based frame
.text:00000064
.text:00000064 ; struct IInArchive * __stdcall NArchive::NZip::CreateArc(void)
.text:00000064 ?CreateArc@NZip@NArchive@@YGPAUIInArchive@@XZ proc near
.text:00000064                                         ; DATA XREF: .rdata:00000058o
.text:00000064
.text:00000064 var_18          = dword ptr -18h
.text:00000064 var_14          = dword ptr -14h
.text:00000064 var_10          = dword ptr -10h
.text:00000064 var_C           = dword ptr -0Ch
.text:00000064 var_4           = dword ptr -4
.text:00000064
.text:00000064                 push    ebp
.text:00000065                 mov     ebp, esp
.text:00000067                 push    0FFFFFFFFh
.text:00000069                 push    offset __ehhandler$?CreateArc@NZip@NArchive@@YGPAUIInArchive@@XZ
.text:0000006E                 mov     eax, large fs:0
.text:00000074                 push    eax
.text:00000075                 sub     esp, 0Ch
.text:00000078                 mov     [ebp+var_18], 0CCCCCCCCh
.text:0000007F                 mov     [ebp+var_14], 0CCCCCCCCh
.text:00000086                 mov     [ebp+var_10], 0CCCCCCCCh
.text:0000008D                 mov     eax, dword ptr ds:___security_cookie
.text:00000092                 xor     eax, ebp
.text:00000094                 push    eax
.text:00000095                 lea     eax, [ebp+var_C]
.text:00000098                 mov     large fs:0, eax
.text:0000009E                 push    0D0h ; '-'      ; unsigned int
.text:000000A3                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000000A8                 add     esp, 4
.text:000000AB                 mov     [ebp+var_14], eax
.text:000000AE                 mov     [ebp+var_4], 0
.text:000000B5                 cmp     [ebp+var_14], 0
.text:000000B9                 jz      short loc_C8
.text:000000BB                 mov     ecx, [ebp+var_14] ; this
.text:000000BE                 call    ??0CHandler@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CHandler::CHandler(void)
.text:000000C3                 mov     [ebp+var_18], eax
.text:000000C6                 jmp     short loc_CF
.text:000000C8 ; ---------------------------------------------------------------------------
.text:000000C8
.text:000000C8 loc_C8:                                 ; CODE XREF: NArchive::NZip::CreateArc(void)+55j
.text:000000C8                 mov     [ebp+var_18], 0
.text:000000CF
.text:000000CF loc_CF:                                 ; CODE XREF: NArchive::NZip::CreateArc(void)+62j
.text:000000CF                 mov     eax, [ebp+var_18]
.text:000000D2                 mov     [ebp+var_10], eax
.text:000000D5                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000000DC                 mov     eax, [ebp+var_10]
.text:000000DF                 mov     ecx, [ebp+var_C]
.text:000000E2                 mov     large fs:0, ecx
.text:000000E9                 pop     ecx
.text:000000EA                 add     esp, 18h
.text:000000ED                 cmp     ebp, esp
.text:000000EF                 call    __RTC_CheckEsp
.text:000000F4                 mov     esp, ebp
.text:000000F6                 pop     ebp
.text:000000F7                 retn
.text:000000F7 ?CreateArc@NZip@NArchive@@YGPAUIInArchive@@XZ endp
.text:000000F7
.text:000000F7 ; ---------------------------------------------------------------------------
.text:000000F8                 db 0Ch dup(0CCh)
.text:00000104
.text:00000104 ; =============== S U B R O U T I N E =======================================
.text:00000104
.text:00000104 ; Attributes: bp-based frame
.text:00000104
.text:00000104 ; struct IOutArchive * __stdcall NArchive::NZip::CreateArcOut(void)
.text:00000104 ?CreateArcOut@NZip@NArchive@@YGPAUIOutArchive@@XZ proc near
.text:00000104                                         ; DATA XREF: .rdata:0000005Co
.text:00000104
.text:00000104 var_1C          = dword ptr -1Ch
.text:00000104 var_18          = dword ptr -18h
.text:00000104 var_14          = dword ptr -14h
.text:00000104 var_10          = dword ptr -10h
.text:00000104 var_C           = dword ptr -0Ch
.text:00000104 var_4           = dword ptr -4
.text:00000104
.text:00000104                 push    ebp
.text:00000105                 mov     ebp, esp
.text:00000107                 push    0FFFFFFFFh
.text:00000109                 push    offset __ehhandler$?CreateArcOut@NZip@NArchive@@YGPAUIOutArchive@@XZ
.text:0000010E                 mov     eax, large fs:0
.text:00000114                 push    eax
.text:00000115                 sub     esp, 10h
.text:00000118                 mov     eax, 0CCCCCCCCh
.text:0000011D                 mov     [ebp+var_1C], eax
.text:00000120                 mov     [ebp+var_18], eax
.text:00000123                 mov     [ebp+var_14], eax
.text:00000126                 mov     [ebp+var_10], eax
.text:00000129                 mov     eax, dword ptr ds:___security_cookie
.text:0000012E                 xor     eax, ebp
.text:00000130                 push    eax
.text:00000131                 lea     eax, [ebp+var_C]
.text:00000134                 mov     large fs:0, eax
.text:0000013A                 push    0D0h ; '-'      ; unsigned int
.text:0000013F                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000144                 add     esp, 4
.text:00000147                 mov     [ebp+var_14], eax
.text:0000014A                 mov     [ebp+var_4], 0
.text:00000151                 cmp     [ebp+var_14], 0
.text:00000155                 jz      short loc_164
.text:00000157                 mov     ecx, [ebp+var_14] ; this
.text:0000015A                 call    ??0CHandler@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CHandler::CHandler(void)
.text:0000015F                 mov     [ebp+var_18], eax
.text:00000162                 jmp     short loc_16B
.text:00000164 ; ---------------------------------------------------------------------------
.text:00000164
.text:00000164 loc_164:                                ; CODE XREF: NArchive::NZip::CreateArcOut(void)+51j
.text:00000164                 mov     [ebp+var_18], 0
.text:0000016B
.text:0000016B loc_16B:                                ; CODE XREF: NArchive::NZip::CreateArcOut(void)+5Ej
.text:0000016B                 mov     eax, [ebp+var_18]
.text:0000016E                 mov     [ebp+var_10], eax
.text:00000171                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000178                 cmp     [ebp+var_10], 0
.text:0000017C                 jz      short loc_189
.text:0000017E                 mov     ecx, [ebp+var_10]
.text:00000181                 add     ecx, 4
.text:00000184                 mov     [ebp+var_1C], ecx
.text:00000187                 jmp     short loc_190
.text:00000189 ; ---------------------------------------------------------------------------
.text:00000189
.text:00000189 loc_189:                                ; CODE XREF: NArchive::NZip::CreateArcOut(void)+78j
.text:00000189                 mov     [ebp+var_1C], 0
.text:00000190
.text:00000190 loc_190:                                ; CODE XREF: NArchive::NZip::CreateArcOut(void)+83j
.text:00000190                 mov     eax, [ebp+var_1C]
.text:00000193                 mov     ecx, [ebp+var_C]
.text:00000196                 mov     large fs:0, ecx
.text:0000019D                 pop     ecx
.text:0000019E                 add     esp, 1Ch
.text:000001A1                 cmp     ebp, esp
.text:000001A3                 call    __RTC_CheckEsp
.text:000001A8                 mov     esp, ebp
.text:000001AA                 pop     ebp
.text:000001AB                 retn
.text:000001AB ?CreateArcOut@NZip@NArchive@@YGPAUIOutArchive@@XZ endp
.text:000001AB
.text:000001AB _text           ends
.text:000001AB
.text$x:000001AC ; ===========================================================================
.text$x:000001AC
.text$x:000001AC ; Segment type: Pure code
.text$x:000001AC ; Segment permissions: Read/Execute
.text$x:000001AC _text$x         segment para public 'CODE' use32
.text$x:000001AC                 assume cs:_text$x
.text$x:000001AC                 ;org 1ACh
.text$x:000001AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000001AC
.text$x:000001AC ; =============== S U B R O U T I N E =======================================
.text$x:000001AC
.text$x:000001AC
.text$x:000001AC __unwindfunclet$?CreateArc@NZip@NArchive@@YGPAUIInArchive@@XZ$0 proc near
.text$x:000001AC                                         ; DATA XREF: .xdata$x:000001FCo
.text$x:000001AC                 mov     eax, [ebp-14h]
.text$x:000001AF                 push    eax             ; void *
.text$x:000001B0                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000001B5                 pop     ecx
.text$x:000001B6                 retn
.text$x:000001B6 __unwindfunclet$?CreateArc@NZip@NArchive@@YGPAUIInArchive@@XZ$0 endp
.text$x:000001B6
.text$x:000001B7
.text$x:000001B7 ; =============== S U B R O U T I N E =======================================
.text$x:000001B7
.text$x:000001B7
.text$x:000001B7 __ehhandler$?CreateArc@NZip@NArchive@@YGPAUIInArchive@@XZ proc near
.text$x:000001B7                                         ; DATA XREF: NArchive::NZip::CreateArc(void)+5o
.text$x:000001B7
.text$x:000001B7 arg_4           = dword ptr  8
.text$x:000001B7
.text$x:000001B7                 mov     edx, [esp+arg_4]
.text$x:000001BB                 lea     eax, [edx+0Ch]
.text$x:000001BE                 mov     ecx, [edx-10h]
.text$x:000001C1                 xor     ecx, eax
.text$x:000001C3                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000001C8                 mov     eax, offset __ehfuncinfo$?CreateArc@NZip@NArchive@@YGPAUIInArchive@@XZ
.text$x:000001CD                 jmp     ___CxxFrameHandler3
.text$x:000001CD __ehhandler$?CreateArc@NZip@NArchive@@YGPAUIInArchive@@XZ endp
.text$x:000001CD
.text$x:000001D2
.text$x:000001D2 ; =============== S U B R O U T I N E =======================================
.text$x:000001D2
.text$x:000001D2
.text$x:000001D2 __unwindfunclet$?CreateArcOut@NZip@NArchive@@YGPAUIOutArchive@@XZ$0 proc near
.text$x:000001D2                                         ; DATA XREF: .xdata$x:00000228o
.text$x:000001D2                 mov     eax, [ebp-14h]
.text$x:000001D5                 push    eax             ; void *
.text$x:000001D6                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000001DB                 pop     ecx
.text$x:000001DC                 retn
.text$x:000001DC __unwindfunclet$?CreateArcOut@NZip@NArchive@@YGPAUIOutArchive@@XZ$0 endp
.text$x:000001DC
.text$x:000001DD
.text$x:000001DD ; =============== S U B R O U T I N E =======================================
.text$x:000001DD
.text$x:000001DD
.text$x:000001DD __ehhandler$?CreateArcOut@NZip@NArchive@@YGPAUIOutArchive@@XZ proc near
.text$x:000001DD                                         ; DATA XREF: NArchive::NZip::CreateArcOut(void)+5o
.text$x:000001DD
.text$x:000001DD arg_4           = dword ptr  8
.text$x:000001DD
.text$x:000001DD                 mov     edx, [esp+arg_4]
.text$x:000001E1                 lea     eax, [edx+0Ch]
.text$x:000001E4                 mov     ecx, [edx-14h]
.text$x:000001E7                 xor     ecx, eax
.text$x:000001E9                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000001EE                 mov     eax, offset __ehfuncinfo$?CreateArcOut@NZip@NArchive@@YGPAUIOutArchive@@XZ
.text$x:000001F3                 jmp     ___CxxFrameHandler3
.text$x:000001F3 __ehhandler$?CreateArcOut@NZip@NArchive@@YGPAUIOutArchive@@XZ endp
.text$x:000001F3
.text$x:000001F3 _text$x         ends
.text$x:000001F3
.xdata$x:000001F8 ; ===========================================================================
.xdata$x:000001F8
.xdata$x:000001F8 ; Segment type: Pure data
.xdata$x:000001F8 ; Segment permissions: Read
.xdata$x:000001F8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000001F8                 assume cs:_xdata$x
.xdata$x:000001F8                 ;org 1F8h
.xdata$x:000001F8 __unwindtable$?CreateArc@NZip@NArchive@@YGPAUIInArchive@@XZ db 0FFh
.xdata$x:000001F8                                         ; DATA XREF: .xdata$x:00000208o
.xdata$x:000001F9                 db 0FFh
.xdata$x:000001FA                 db 0FFh
.xdata$x:000001FB                 db 0FFh
.xdata$x:000001FC                 dd offset __unwindfunclet$?CreateArc@NZip@NArchive@@YGPAUIInArchive@@XZ$0
.xdata$x:00000200 __ehfuncinfo$?CreateArc@NZip@NArchive@@YGPAUIInArchive@@XZ db  22h ; "
.xdata$x:00000200                                         ; DATA XREF: __ehhandler$?CreateArc@NZip@NArchive@@YGPAUIInArchive@@XZ+11o
.xdata$x:00000201                 db    5
.xdata$x:00000202                 db  93h ; ô
.xdata$x:00000203                 db  19h
.xdata$x:00000204                 db    1
.xdata$x:00000205                 db    0
.xdata$x:00000206                 db    0
.xdata$x:00000207                 db    0
.xdata$x:00000208                 dd offset __unwindtable$?CreateArc@NZip@NArchive@@YGPAUIInArchive@@XZ
.xdata$x:0000020C                 align 20h
.xdata$x:00000220                 db    1
.xdata$x:00000221                 db    0
.xdata$x:00000222                 db    0
.xdata$x:00000223                 db    0
.xdata$x:00000224 __unwindtable$?CreateArcOut@NZip@NArchive@@YGPAUIOutArchive@@XZ db 0FFh
.xdata$x:00000224                                         ; DATA XREF: .xdata$x:00000234o
.xdata$x:00000225                 db 0FFh
.xdata$x:00000226                 db 0FFh
.xdata$x:00000227                 db 0FFh
.xdata$x:00000228                 dd offset __unwindfunclet$?CreateArcOut@NZip@NArchive@@YGPAUIOutArchive@@XZ$0
.xdata$x:0000022C __ehfuncinfo$?CreateArcOut@NZip@NArchive@@YGPAUIOutArchive@@XZ db  22h ; "
.xdata$x:0000022C                                         ; DATA XREF: __ehhandler$?CreateArcOut@NZip@NArchive@@YGPAUIOutArchive@@XZ+11o
.xdata$x:0000022D                 db    5
.xdata$x:0000022E                 db  93h ; ô
.xdata$x:0000022F                 db  19h
.xdata$x:00000230                 db    1
.xdata$x:00000231                 db    0
.xdata$x:00000232                 db    0
.xdata$x:00000233                 db    0
.xdata$x:00000234                 dd offset __unwindtable$?CreateArcOut@NZip@NArchive@@YGPAUIOutArchive@@XZ
.xdata$x:00000238                 db    0
.xdata$x:00000239                 db    0
.xdata$x:0000023A                 db    0
.xdata$x:0000023B                 db    0
.xdata$x:0000023C                 db    0
.xdata$x:0000023D                 db    0
.xdata$x:0000023E                 db    0
.xdata$x:0000023F                 db    0
.xdata$x:00000240                 db    0
.xdata$x:00000241                 db    0
.xdata$x:00000242                 db    0
.xdata$x:00000243                 db    0
.xdata$x:00000244                 db    0
.xdata$x:00000245                 db    0
.xdata$x:00000246                 db    0
.xdata$x:00000247                 db    0
.xdata$x:00000248                 db    0
.xdata$x:00000249                 db    0
.xdata$x:0000024A                 db    0
.xdata$x:0000024B                 db    0
.xdata$x:0000024C                 db    1
.xdata$x:0000024D                 db    0
.xdata$x:0000024E                 db    0
.xdata$x:0000024F                 db    0
.xdata$x:0000024F _xdata$x        ends
.xdata$x:0000024F
.rtc$TMZ:00000250 ; ===========================================================================
.rtc$TMZ:00000250
.rtc$TMZ:00000250 ; Segment type: Pure data
.rtc$TMZ:00000250 ; Segment permissions: Read
.rtc$TMZ:00000250 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000250                 assume cs:_rtc$TMZ
.rtc$TMZ:00000250                 ;org 250h
.rtc$TMZ:00000250 ; COMDAT (pick any)
.rtc$TMZ:00000250 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000250 _rtc$TMZ        ends
.rtc$TMZ:00000250
.rtc$IMZ:00000254 ; ===========================================================================
.rtc$IMZ:00000254
.rtc$IMZ:00000254 ; Segment type: Pure data
.rtc$IMZ:00000254 ; Segment permissions: Read
.rtc$IMZ:00000254 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000254                 assume cs:_rtc$IMZ
.rtc$IMZ:00000254                 ;org 254h
.rtc$IMZ:00000254 ; COMDAT (pick any)
.rtc$IMZ:00000254 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000254 _rtc$IMZ        ends
.rtc$IMZ:00000254
.text$yc:00000258 ; ===========================================================================
.text$yc:00000258
.text$yc:00000258 ; Segment type: Pure code
.text$yc:00000258 ; Segment permissions: Read/Execute
.text$yc:00000258 _text$yc        segment para public 'CODE' use32
.text$yc:00000258                 assume cs:_text$yc
.text$yc:00000258                 ;org 258h
.text$yc:00000258 ; COMDAT (pick any)
.text$yc:00000258                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yc:00000258
.text$yc:00000258 ; =============== S U B R O U T I N E =======================================
.text$yc:00000258
.text$yc:00000258 ; Attributes: bp-based frame
.text$yc:00000258
.text$yc:00000258 ; void __cdecl NArchive::NZip::`dynamic initializer for 'g_RegisterArc''(void)
.text$yc:00000258 ??__Eg_RegisterArc@NZip@NArchive@@YAXXZ proc near
.text$yc:00000258                                         ; DATA XREF: .CRT$XCU:_g_RegisterArc$initializer$o
.text$yc:00000258                 push    ebp
.text$yc:00000259                 mov     ebp, esp
.text$yc:0000025B                 mov     ecx, offset _g_RegisterArc ; this
.text$yc:00000260                 call    ??0CRegisterArc@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CRegisterArc::CRegisterArc(void)
.text$yc:00000265                 cmp     ebp, esp
.text$yc:00000267                 call    __RTC_CheckEsp
.text$yc:0000026C                 pop     ebp
.text$yc:0000026D                 retn
.text$yc:0000026D ??__Eg_RegisterArc@NZip@NArchive@@YAXXZ endp
.text$yc:0000026D
.text$yc:0000026D ; ---------------------------------------------------------------------------
.text$yc:0000026E                 align 10h
.text$yc:0000026E _text$yc        ends
.text$yc:0000026E
.text:00000270 ; ===========================================================================
.text:00000270
.text:00000270 ; Segment type: Pure code
.text:00000270 ; Segment permissions: Read/Execute
.text:00000270 _text           segment para public 'CODE' use32
.text:00000270                 assume cs:_text
.text:00000270                 ;org 270h
.text:00000270 ; COMDAT (pick any)
.text:00000270                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000270
.text:00000270 ; =============== S U B R O U T I N E =======================================
.text:00000270
.text:00000270 ; Attributes: bp-based frame
.text:00000270
.text:00000270 ; _DWORD __thiscall NArchive::NZip::CRegisterArc::CRegisterArc(NArchive::NZip::CRegisterArc *__hidden this)
.text:00000270                 public ??0CRegisterArc@NZip@NArchive@@QAE@XZ
.text:00000270 ??0CRegisterArc@NZip@NArchive@@QAE@XZ proc near
.text:00000270                                         ; CODE XREF: NArchive::NZip::`dynamic initializer for 'g_RegisterArc''(void)+8p
.text:00000270
.text:00000270 var_4           = dword ptr -4
.text:00000270
.text:00000270                 push    ebp
.text:00000271                 mov     ebp, esp
.text:00000273                 push    ecx
.text:00000274                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000027B                 mov     [ebp+var_4], ecx
.text:0000027E                 push    offset _g_ArcInfo ; "8"
.text:00000283                 call    ?RegisterArc@@YGXPBUCArcInfo@@@Z ; RegisterArc(CArcInfo const *)
.text:00000288                 mov     eax, [ebp+var_4]
.text:0000028B                 add     esp, 4
.text:0000028E                 cmp     ebp, esp
.text:00000290                 call    __RTC_CheckEsp
.text:00000295                 mov     esp, ebp
.text:00000297                 pop     ebp
.text:00000298                 retn
.text:00000298 ??0CRegisterArc@NZip@NArchive@@QAE@XZ endp
.text:00000298
.text:00000298 ; ---------------------------------------------------------------------------
.text:00000299                 align 4
.text:00000299 _text           ends
.text:00000299
.bss:0000029C ; ===========================================================================
.bss:0000029C
.bss:0000029C ; Segment type: Uninitialized
.bss:0000029C ; Segment permissions: Read/Write
.bss:0000029C _bss            segment byte public 'BSS' use32
.bss:0000029C                 assume cs:_bss
.bss:0000029C                 ;org 29Ch
.bss:0000029C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000029C ; NArchive::NZip::CRegisterArc g_RegisterArc
.bss:0000029C _g_RegisterArc  db    ? ;               ; DATA XREF: NArchive::NZip::`dynamic initializer for 'g_RegisterArc''(void)+3o
.bss:0000029D                 align 10h
.bss:0000029D _bss            ends
.bss:0000029D
.CRT$XCU:000002A0 ; ===========================================================================
.CRT$XCU:000002A0
.CRT$XCU:000002A0 ; Segment type: Pure data
.CRT$XCU:000002A0 ; Segment permissions: Read
.CRT$XCU:000002A0 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:000002A0                 assume cs:_CRT$XCU
.CRT$XCU:000002A0                 ;org 2A0h
.CRT$XCU:000002A0 _g_RegisterArc$initializer$ dd offset ??__Eg_RegisterArc@NZip@NArchive@@YAXXZ ; NArchive::NZip::`dynamic initializer for 'g_RegisterArc''(void)
.CRT$XCU:000002A0 _CRT$XCU        ends
.CRT$XCU:000002A0
UNDEF:000002B0 ; ===========================================================================
UNDEF:000002B0
UNDEF:000002B0 ; Segment type: Externs
UNDEF:000002B0 ; UNDEF
UNDEF:000002B0 ; __stdcall IsArc_Zip(x, x)
UNDEF:000002B0                 extrn _IsArc_Zip@8:near ; DATA XREF: .rdata:00000060o
UNDEF:000002B4 ; void __cdecl operator delete(void *)
UNDEF:000002B4                 extrn ??3@YAXPAX@Z:near ; CODE XREF: __unwindfunclet$?CreateArc@NZip@NArchive@@YGPAUIInArchive@@XZ$0+4p
UNDEF:000002B4                                         ; __unwindfunclet$?CreateArcOut@NZip@NArchive@@YGPAUIOutArchive@@XZ$0+4p
UNDEF:000002B8 ; _DWORD __thiscall NArchive::NZip::CHandler::CHandler(NArchive::NZip::CHandler *__hidden this)
UNDEF:000002B8                 extrn ??0CHandler@NZip@NArchive@@QAE@XZ:near
UNDEF:000002B8                                         ; CODE XREF: NArchive::NZip::CreateArc(void)+5Ap
UNDEF:000002B8                                         ; NArchive::NZip::CreateArcOut(void)+56p
UNDEF:000002BC ; void *__cdecl operator new(unsigned int)
UNDEF:000002BC                 extrn ??2@YAPAXI@Z:near ; CODE XREF: NArchive::NZip::CreateArc(void)+3Fp
UNDEF:000002BC                                         ; NArchive::NZip::CreateArcOut(void)+3Bp
UNDEF:000002C0                 extrn ___security_cookie:near
UNDEF:000002C0                                         ; DATA XREF: NArchive::NZip::CreateArc(void)+29r
UNDEF:000002C0                                         ; NArchive::NZip::CreateArcOut(void)+25r
UNDEF:000002C4                 extrn ___CxxFrameHandler3:near
UNDEF:000002C4                                         ; CODE XREF: __ehhandler$?CreateArc@NZip@NArchive@@YGPAUIInArchive@@XZ+16j
UNDEF:000002C4                                         ; __ehhandler$?CreateArcOut@NZip@NArchive@@YGPAUIOutArchive@@XZ+16j
UNDEF:000002C8 ; __fastcall __security_check_cookie(x)
UNDEF:000002C8                 extrn @__security_check_cookie@4:near
UNDEF:000002C8                                         ; CODE XREF: __ehhandler$?CreateArc@NZip@NArchive@@YGPAUIInArchive@@XZ+Cp
UNDEF:000002C8                                         ; __ehhandler$?CreateArcOut@NZip@NArchive@@YGPAUIOutArchive@@XZ+Cp
UNDEF:000002CC                 extrn __RTC_CheckEsp:near
UNDEF:000002CC                                         ; CODE XREF: NArchive::NZip::CreateArc(void)+8Bp
UNDEF:000002CC                                         ; NArchive::NZip::CreateArcOut(void)+9Fp ...
UNDEF:000002D0                 extrn __RTC_Shutdown:near
UNDEF:000002D0                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:000002D4                 extrn __RTC_InitBase:near
UNDEF:000002D4                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:000002D8 ; void __stdcall RegisterArc(const struct CArcInfo *)
UNDEF:000002D8                 extrn ?RegisterArc@@YGXPBUCArcInfo@@@Z:near
UNDEF:000002D8                                         ; CODE XREF: NArchive::NZip::CRegisterArc::CRegisterArc(void)+13p
UNDEF:000002D8
UNDEF:000002D8
UNDEF:000002D8                 end