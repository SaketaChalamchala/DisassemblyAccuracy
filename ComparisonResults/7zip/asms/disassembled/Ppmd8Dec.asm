.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : B2741BCE5AE2E8593E8DD401BBEDB218
.text:00000000 ; Input CRC32 : CFB38373
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\Ppmd8Dec.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; __stdcall Ppmd8_RangeDec_Init(x)
.text:00000000                 public _Ppmd8_RangeDec_Init@4
.text:00000000 _Ppmd8_RangeDec_Init@4 proc near
.text:00000000
.text:00000000 var_4           = dword ptr -4
.text:00000000 arg_0           = dword ptr  8
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 push    ecx
.text:00000004                 push    esi
.text:00000005                 push    edi
.text:00000006                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000000D                 mov     eax, [ebp+arg_0]
.text:00000010                 mov     dword ptr [eax+50h], 0
.text:00000017                 mov     ecx, [ebp+arg_0]
.text:0000001A                 mov     dword ptr [ecx+48h], 0FFFFFFFFh
.text:00000021                 mov     edx, [ebp+arg_0]
.text:00000024                 mov     dword ptr [edx+4Ch], 0
.text:0000002B                 mov     [ebp+var_4], 0
.text:00000032                 jmp     short loc_3D
.text:00000034 ; ---------------------------------------------------------------------------
.text:00000034
.text:00000034 loc_34:                                 ; CODE XREF: Ppmd8_RangeDec_Init(x)+71j
.text:00000034                 mov     eax, [ebp+var_4]
.text:00000037                 add     eax, 1
.text:0000003A                 mov     [ebp+var_4], eax
.text:0000003D
.text:0000003D loc_3D:                                 ; CODE XREF: Ppmd8_RangeDec_Init(x)+32j
.text:0000003D                 cmp     [ebp+var_4], 4
.text:00000041                 jnb     short loc_73
.text:00000043                 mov     ecx, [ebp+arg_0]
.text:00000046                 mov     esi, [ecx+4Ch]
.text:00000049                 shl     esi, 8
.text:0000004C                 mov     edi, esp
.text:0000004E                 mov     edx, [ebp+arg_0]
.text:00000051                 mov     eax, [edx+54h]
.text:00000054                 push    eax
.text:00000055                 mov     ecx, [ebp+arg_0]
.text:00000058                 mov     edx, [ecx+54h]
.text:0000005B                 mov     eax, [edx]
.text:0000005D                 call    eax
.text:0000005F                 cmp     edi, esp
.text:00000061                 call    __RTC_CheckEsp
.text:00000066                 movzx   ecx, al
.text:00000069                 or      esi, ecx
.text:0000006B                 mov     edx, [ebp+arg_0]
.text:0000006E                 mov     [edx+4Ch], esi
.text:00000071                 jmp     short loc_34
.text:00000073 ; ---------------------------------------------------------------------------
.text:00000073
.text:00000073 loc_73:                                 ; CODE XREF: Ppmd8_RangeDec_Init(x)+41j
.text:00000073                 mov     eax, [ebp+arg_0]
.text:00000076                 cmp     dword ptr [eax+4Ch], 0FFFFFFFFh
.text:0000007A                 sbb     eax, eax
.text:0000007C                 neg     eax
.text:0000007E                 pop     edi
.text:0000007F                 pop     esi
.text:00000080                 add     esp, 4
.text:00000083                 cmp     ebp, esp
.text:00000085                 call    __RTC_CheckEsp
.text:0000008A                 mov     esp, ebp
.text:0000008C                 pop     ebp
.text:0000008D                 retn    4
.text:0000008D _Ppmd8_RangeDec_Init@4 endp
.text:0000008D
.text:00000090
.text:00000090 ; =============== S U B R O U T I N E =======================================
.text:00000090
.text:00000090 ; Attributes: bp-based frame
.text:00000090
.text:00000090 ; __stdcall Ppmd8_DecodeSymbol(x)
.text:00000090                 public _Ppmd8_DecodeSymbol@4
.text:00000090 _Ppmd8_DecodeSymbol@4 proc near
.text:00000090
.text:00000090 var_578         = byte ptr -578h
.text:00000090 var_575         = byte ptr -575h
.text:00000090 var_574         = dword ptr -574h
.text:00000090 var_570         = dword ptr -570h
.text:00000090 var_56C         = dword ptr -56Ch
.text:00000090 var_565         = byte ptr -565h
.text:00000090 var_564         = dword ptr -564h
.text:00000090 var_560         = dword ptr -560h
.text:00000090 var_55C         = dword ptr -55Ch
.text:00000090 var_558         = dword ptr -558h
.text:00000090 var_554         = dword ptr -554h
.text:00000090 var_550         = dword ptr -550h
.text:00000090 var_54C         = dword ptr -54Ch
.text:00000090 var_544         = dword ptr -544h
.text:00000090 var_53C         = dword ptr -53Ch
.text:00000090 var_534         = dword ptr -534h
.text:00000090 var_130         = dword ptr -130h
.text:00000090 var_129         = byte ptr -129h
.text:00000090 var_128         = dword ptr -128h
.text:00000090 var_124         = dword ptr -124h
.text:00000090 var_11E         = byte ptr -11Eh
.text:00000090 var_11D         = byte ptr -11Dh
.text:00000090 var_11C         = dword ptr -11Ch
.text:00000090 var_118         = dword ptr -118h
.text:00000090 var_114         = dword ptr -114h
.text:00000090 var_110         = dword ptr -110h
.text:00000090 var_108         = dword ptr -108h
.text:00000090 var_104         = dword ptr -104h
.text:00000090 var_100         = dword ptr -100h
.text:00000090 var_FC          = dword ptr -0FCh
.text:00000090 var_F8          = dword ptr -0F8h
.text:00000090 var_F4          = dword ptr -0F4h
.text:00000090 var_F0          = dword ptr -0F0h
.text:00000090 var_EC          = dword ptr -0ECh
.text:00000090 var_4           = dword ptr -4
.text:00000090 arg_0           = dword ptr  8
.text:00000090
.text:00000090                 push    ebp
.text:00000091                 mov     ebp, esp
.text:00000093                 sub     esp, 578h
.text:00000099                 push    edi
.text:0000009A                 lea     edi, [ebp+var_578]
.text:000000A0                 mov     ecx, 15Eh
.text:000000A5                 mov     eax, 0CCCCCCCCh
.text:000000AA                 rep stosd
.text:000000AC                 mov     eax, dword ptr ds:___security_cookie
.text:000000B1                 xor     eax, ebp
.text:000000B3                 mov     [ebp+var_4], eax
.text:000000B6                 mov     eax, [ebp+arg_0]
.text:000000B9                 mov     ecx, [eax]
.text:000000BB                 movzx   edx, byte ptr [ecx]
.text:000000BE                 test    edx, edx
.text:000000C0                 jz      loc_34B
.text:000000C6                 mov     eax, [ebp+arg_0]
.text:000000C9                 mov     ecx, [eax]
.text:000000CB                 mov     edx, [ecx+4]
.text:000000CE                 mov     [ebp+var_110], edx
.text:000000D4                 mov     eax, [ebp+arg_0]
.text:000000D7                 mov     ecx, [eax]
.text:000000D9                 movzx   edx, word ptr [ecx+2]
.text:000000DD                 push    edx
.text:000000DE                 mov     eax, [ebp+arg_0]
.text:000000E1                 push    eax
.text:000000E2                 call    _RangeDec_GetThreshold@8 ; RangeDec_GetThreshold(x,x)
.text:000000E7                 mov     [ebp+var_118], eax
.text:000000ED                 mov     ecx, [ebp+var_110]
.text:000000F3                 movzx   edx, byte ptr [ecx+1]
.text:000000F7                 mov     [ebp+var_11C], edx
.text:000000FD                 mov     eax, [ebp+var_118]
.text:00000103                 cmp     eax, [ebp+var_11C]
.text:00000109                 jnb     short loc_150
.text:0000010B                 mov     ecx, [ebp+var_110]
.text:00000111                 movzx   edx, byte ptr [ecx+1]
.text:00000115                 push    edx
.text:00000116                 push    0
.text:00000118                 mov     eax, [ebp+arg_0]
.text:0000011B                 push    eax
.text:0000011C                 call    _RangeDec_Decode@12 ; RangeDec_Decode(x,x,x)
.text:00000121                 mov     ecx, [ebp+arg_0]
.text:00000124                 mov     edx, [ebp+var_110]
.text:0000012A                 mov     [ecx+8], edx
.text:0000012D                 mov     eax, [ebp+var_110]
.text:00000133                 mov     cl, [eax]
.text:00000135                 mov     [ebp+var_11D], cl
.text:0000013B                 mov     edx, [ebp+arg_0]
.text:0000013E                 push    edx
.text:0000013F                 call    _Ppmd8_Update1_0@4 ; Ppmd8_Update1_0(x)
.text:00000144                 movzx   eax, [ebp+var_11D]
.text:0000014B                 jmp     loc_887
.text:00000150 ; ---------------------------------------------------------------------------
.text:00000150
.text:00000150 loc_150:                                ; CODE XREF: Ppmd8_DecodeSymbol(x)+79j
.text:00000150                 mov     eax, [ebp+arg_0]
.text:00000153                 mov     dword ptr [eax+14h], 0
.text:0000015A                 mov     ecx, [ebp+arg_0]
.text:0000015D                 mov     edx, [ecx]
.text:0000015F                 movzx   eax, byte ptr [edx]
.text:00000162                 mov     [ebp+var_114], eax
.text:00000168
.text:00000168 loc_168:                                ; CODE XREF: Ppmd8_DecodeSymbol(x)+170j
.text:00000168                 mov     ecx, [ebp+var_110]
.text:0000016E                 add     ecx, 6
.text:00000171                 mov     [ebp+var_110], ecx
.text:00000177                 mov     edx, [ebp+var_110]
.text:0000017D                 movzx   eax, byte ptr [edx+1]
.text:00000181                 add     eax, [ebp+var_11C]
.text:00000187                 mov     [ebp+var_11C], eax
.text:0000018D                 mov     ecx, [ebp+var_11C]
.text:00000193                 cmp     ecx, [ebp+var_118]
.text:00000199                 jbe     short loc_1F1
.text:0000019B                 mov     edx, [ebp+var_110]
.text:000001A1                 movzx   eax, byte ptr [edx+1]
.text:000001A5                 push    eax
.text:000001A6                 mov     ecx, [ebp+var_110]
.text:000001AC                 movzx   edx, byte ptr [ecx+1]
.text:000001B0                 mov     eax, [ebp+var_11C]
.text:000001B6                 sub     eax, edx
.text:000001B8                 push    eax
.text:000001B9                 mov     ecx, [ebp+arg_0]
.text:000001BC                 push    ecx
.text:000001BD                 call    _RangeDec_Decode@12 ; RangeDec_Decode(x,x,x)
.text:000001C2                 mov     edx, [ebp+arg_0]
.text:000001C5                 mov     eax, [ebp+var_110]
.text:000001CB                 mov     [edx+8], eax
.text:000001CE                 mov     ecx, [ebp+var_110]
.text:000001D4                 mov     dl, [ecx]
.text:000001D6                 mov     [ebp+var_11E], dl
.text:000001DC                 mov     eax, [ebp+arg_0]
.text:000001DF                 push    eax
.text:000001E0                 call    _Ppmd8_Update1@4 ; Ppmd8_Update1(x)
.text:000001E5                 movzx   eax, [ebp+var_11E]
.text:000001EC                 jmp     loc_887
.text:000001F1 ; ---------------------------------------------------------------------------
.text:000001F1
.text:000001F1 loc_1F1:                                ; CODE XREF: Ppmd8_DecodeSymbol(x)+109j
.text:000001F1                 mov     ecx, [ebp+var_114]
.text:000001F7                 sub     ecx, 1
.text:000001FA                 mov     [ebp+var_114], ecx
.text:00000200                 jnz     loc_168
.text:00000206                 mov     edx, [ebp+arg_0]
.text:00000209                 mov     eax, [edx]
.text:0000020B                 movzx   ecx, word ptr [eax+2]
.text:0000020F                 cmp     [ebp+var_118], ecx
.text:00000215                 jb      short loc_221
.text:00000217                 mov     eax, 0FFFFFFFEh
.text:0000021C                 jmp     loc_887
.text:00000221 ; ---------------------------------------------------------------------------
.text:00000221
.text:00000221 loc_221:                                ; CODE XREF: Ppmd8_DecodeSymbol(x)+185j
.text:00000221                 mov     edx, [ebp+arg_0]
.text:00000224                 mov     eax, [edx]
.text:00000226                 movzx   ecx, word ptr [eax+2]
.text:0000022A                 sub     ecx, [ebp+var_11C]
.text:00000230                 push    ecx
.text:00000231                 mov     edx, [ebp+var_11C]
.text:00000237                 push    edx
.text:00000238                 mov     eax, [ebp+arg_0]
.text:0000023B                 push    eax
.text:0000023C                 call    _RangeDec_Decode@12 ; RangeDec_Decode(x,x,x)
.text:00000241                 mov     [ebp+var_124], 0
.text:0000024B                 jmp     short loc_25C
.text:0000024D ; ---------------------------------------------------------------------------
.text:0000024D
.text:0000024D loc_24D:                                ; CODE XREF: Ppmd8_DecodeSymbol(x)+261j
.text:0000024D                 mov     ecx, [ebp+var_124]
.text:00000253                 add     ecx, 8
.text:00000256                 mov     [ebp+var_124], ecx
.text:0000025C
.text:0000025C loc_25C:                                ; CODE XREF: Ppmd8_DecodeSymbol(x)+1BBj
.text:0000025C                 cmp     [ebp+var_124], 40h ; '@'
.text:00000263                 jnb     loc_2F6
.text:00000269                 mov     edx, [ebp+var_124]
.text:0000026F                 mov     [ebp+edx*4+var_108], 0FFFFFFFFh
.text:0000027A                 mov     eax, [ebp+var_124]
.text:00000280                 mov     [ebp+eax*4+var_104], 0FFFFFFFFh
.text:0000028B                 mov     ecx, [ebp+var_124]
.text:00000291                 mov     [ebp+ecx*4+var_100], 0FFFFFFFFh
.text:0000029C                 mov     edx, [ebp+var_124]
.text:000002A2                 mov     [ebp+edx*4+var_FC], 0FFFFFFFFh
.text:000002AD                 mov     eax, [ebp+var_124]
.text:000002B3                 mov     [ebp+eax*4+var_F8], 0FFFFFFFFh
.text:000002BE                 mov     ecx, [ebp+var_124]
.text:000002C4                 mov     [ebp+ecx*4+var_F4], 0FFFFFFFFh
.text:000002CF                 mov     edx, [ebp+var_124]
.text:000002D5                 mov     [ebp+edx*4+var_F0], 0FFFFFFFFh
.text:000002E0                 mov     eax, [ebp+var_124]
.text:000002E6                 mov     [ebp+eax*4+var_EC], 0FFFFFFFFh
.text:000002F1                 jmp     loc_24D
.text:000002F6 ; ---------------------------------------------------------------------------
.text:000002F6
.text:000002F6 loc_2F6:                                ; CODE XREF: Ppmd8_DecodeSymbol(x)+1D3j
.text:000002F6                 mov     ecx, [ebp+var_110]
.text:000002FC                 movzx   edx, byte ptr [ecx]
.text:000002FF                 mov     byte ptr [ebp+edx+var_108], 0
.text:00000307                 mov     eax, [ebp+arg_0]
.text:0000030A                 mov     ecx, [eax]
.text:0000030C                 movzx   edx, byte ptr [ecx]
.text:0000030F                 mov     [ebp+var_114], edx
.text:00000315
.text:00000315 loc_315:                                ; CODE XREF: Ppmd8_DecodeSymbol(x)+2B4j
.text:00000315                 mov     eax, [ebp+var_110]
.text:0000031B                 sub     eax, 6
.text:0000031E                 mov     [ebp+var_110], eax
.text:00000324                 mov     ecx, [ebp+var_110]
.text:0000032A                 movzx   edx, byte ptr [ecx]
.text:0000032D                 mov     byte ptr [ebp+edx+var_108], 0
.text:00000335                 mov     eax, [ebp+var_114]
.text:0000033B                 sub     eax, 1
.text:0000033E                 mov     [ebp+var_114], eax
.text:00000344                 jnz     short loc_315
.text:00000346                 jmp     loc_58B
.text:0000034B ; ---------------------------------------------------------------------------
.text:0000034B
.text:0000034B loc_34B:                                ; CODE XREF: Ppmd8_DecodeSymbol(x)+30j
.text:0000034B                 mov     ecx, [ebp+arg_0]
.text:0000034E                 mov     edx, [ecx]
.text:00000350                 movzx   eax, byte ptr [edx+3]
.text:00000354                 mov     ecx, [ebp+arg_0]
.text:00000357                 movzx   edx, byte ptr [ecx+eax+32Fh]
.text:0000035F                 shl     edx, 7
.text:00000362                 mov     eax, [ebp+arg_0]
.text:00000365                 lea     ecx, [eax+edx+1038h]
.text:0000036C                 mov     edx, [ebp+arg_0]
.text:0000036F                 mov     eax, [edx]
.text:00000371                 mov     edx, [eax+8]
.text:00000374                 movzx   eax, byte ptr [edx]
.text:00000377                 mov     edx, [ebp+arg_0]
.text:0000037A                 movzx   eax, byte ptr [edx+eax+230h]
.text:00000382                 mov     edx, [ebp+arg_0]
.text:00000385                 add     eax, [edx+14h]
.text:00000388                 mov     edx, [ebp+arg_0]
.text:0000038B                 mov     edx, [edx]
.text:0000038D                 movzx   edx, byte ptr [edx+1]
.text:00000391                 add     eax, edx
.text:00000393                 mov     edx, [ebp+arg_0]
.text:00000396                 mov     edx, [edx+1Ch]
.text:00000399                 sar     edx, 1Ah
.text:0000039C                 and     edx, 20h
.text:0000039F                 add     eax, edx
.text:000003A1                 lea     eax, [ecx+eax*2]
.text:000003A4                 mov     [ebp+var_128], eax
.text:000003AA                 mov     ecx, [ebp+arg_0]
.text:000003AD                 mov     edx, [ecx+48h]
.text:000003B0                 shr     edx, 0Eh
.text:000003B3                 mov     [ebp+var_570], edx
.text:000003B9                 mov     eax, [ebp+arg_0]
.text:000003BC                 mov     ecx, [ebp+var_570]
.text:000003C2                 mov     [eax+48h], ecx
.text:000003C5                 mov     edx, [ebp+var_128]
.text:000003CB                 movzx   ecx, word ptr [edx]
.text:000003CE                 mov     edx, [ebp+arg_0]
.text:000003D1                 mov     eax, [edx+4Ch]
.text:000003D4                 xor     edx, edx
.text:000003D6                 div     [ebp+var_570]
.text:000003DC                 cmp     eax, ecx
.text:000003DE                 jnb     short loc_45B
.text:000003E0                 mov     eax, [ebp+var_128]
.text:000003E6                 movzx   ecx, word ptr [eax]
.text:000003E9                 push    ecx
.text:000003EA                 push    0
.text:000003EC                 mov     edx, [ebp+arg_0]
.text:000003EF                 push    edx
.text:000003F0                 call    _RangeDec_Decode@12 ; RangeDec_Decode(x,x,x)
.text:000003F5                 mov     eax, [ebp+var_128]
.text:000003FB                 movzx   ecx, word ptr [eax]
.text:000003FE
.text:000003FE loc_3FE:                                ; DATA XREF: .text:000008D0o
.text:000003FE                 add     ecx, 80h ; 'Ç'
.text:00000404                 mov     edx, [ebp+var_128]
.text:0000040A                 movzx   eax, word ptr [edx]
.text:0000040D                 add     eax, 20h ; ' '
.text:00000410                 sar     eax, 7
.text:00000413                 sub     ecx, eax
.text:00000415                 mov     edx, [ebp+var_128]
.text:0000041B                 mov     [edx], cx
.text:0000041E                 mov     eax, [ebp+arg_0]
.text:00000421                 mov     ecx, [eax]
.text:00000423                 add     ecx, 2
.text:00000426                 mov     [ebp+var_574], ecx
.text:0000042C                 mov     edx, [ebp+arg_0]
.text:0000042F                 mov     eax, [ebp+var_574]
.text:00000435                 mov     [edx+8], eax
.text:00000438                 mov     ecx, [ebp+var_574]
.text:0000043E                 mov     dl, [ecx]
.text:00000440                 mov     [ebp+var_129], dl
.text:00000446                 mov     eax, [ebp+arg_0]
.text:00000449                 push    eax
.text:0000044A                 call    _Ppmd8_UpdateBin@4 ; Ppmd8_UpdateBin(x)
.text:0000044F                 movzx   eax, [ebp+var_129]
.text:00000456                 jmp     loc_887
.text:0000045B ; ---------------------------------------------------------------------------
.text:0000045B
.text:0000045B loc_45B:                                ; CODE XREF: Ppmd8_DecodeSymbol(x)+34Ej
.text:0000045B                 mov     ecx, [ebp+var_128]
.text:00000461                 movzx   edx, word ptr [ecx]
.text:00000464                 mov     eax, 4000h
.text:00000469                 sub     eax, edx
.text:0000046B                 push    eax
.text:0000046C                 mov     ecx, [ebp+var_128]
.text:00000472                 movzx   edx, word ptr [ecx]
.text:00000475                 push    edx
.text:00000476                 mov     eax, [ebp+arg_0]
.text:00000479                 push    eax
.text:0000047A                 call    _RangeDec_Decode@12 ; RangeDec_Decode(x,x,x)
.text:0000047F                 mov     ecx, [ebp+var_128]
.text:00000485                 movzx   edx, word ptr [ecx]
.text:00000488                 mov     eax, [ebp+var_128]
.text:0000048E                 movzx   ecx, word ptr [eax]
.text:00000491                 add     ecx, 20h ; ' '
.text:00000494                 sar     ecx, 7
.text:00000497                 sub     edx, ecx
.text:00000499                 mov     eax, [ebp+var_128]
.text:0000049F                 mov     [eax], dx
.text:000004A2                 mov     ecx, [ebp+var_128]
.text:000004A8                 movzx   edx, word ptr [ecx]
.text:000004AB                 sar     edx, 0Ah
.text:000004AE                 movzx   eax, byte ptr ds:_PPMD8_kExpEscape[edx]
.text:000004B5                 mov     ecx, [ebp+arg_0]
.text:000004B8                 mov     [ecx+10h], eax
.text:000004BB                 mov     [ebp+var_130], 0
.text:000004C5                 jmp     short loc_4D6
.text:000004C7 ; ---------------------------------------------------------------------------
.text:000004C7
.text:000004C7 loc_4C7:                                ; CODE XREF: Ppmd8_DecodeSymbol(x)+4DBj
.text:000004C7                 mov     edx, [ebp+var_130]
.text:000004CD                 add     edx, 8
.text:000004D0                 mov     [ebp+var_130], edx
.text:000004D6
.text:000004D6 loc_4D6:                                ; CODE XREF: Ppmd8_DecodeSymbol(x)+435j
.text:000004D6                 cmp     [ebp+var_130], 40h ; '@'
.text:000004DD                 jnb     loc_570
.text:000004E3                 mov     eax, [ebp+var_130]
.text:000004E9                 mov     [ebp+eax*4+var_108], 0FFFFFFFFh
.text:000004F4                 mov     ecx, [ebp+var_130]
.text:000004FA                 mov     [ebp+ecx*4+var_104], 0FFFFFFFFh
.text:00000505                 mov     edx, [ebp+var_130]
.text:0000050B                 mov     [ebp+edx*4+var_100], 0FFFFFFFFh
.text:00000516                 mov     eax, [ebp+var_130]
.text:0000051C                 mov     [ebp+eax*4+var_FC], 0FFFFFFFFh
.text:00000527                 mov     ecx, [ebp+var_130]
.text:0000052D                 mov     [ebp+ecx*4+var_F8], 0FFFFFFFFh
.text:00000538                 mov     edx, [ebp+var_130]
.text:0000053E                 mov     [ebp+edx*4+var_F4], 0FFFFFFFFh
.text:00000549                 mov     eax, [ebp+var_130]
.text:0000054F                 mov     [ebp+eax*4+var_F0], 0FFFFFFFFh
.text:0000055A                 mov     ecx, [ebp+var_130]
.text:00000560                 mov     [ebp+ecx*4+var_EC], 0FFFFFFFFh
.text:0000056B                 jmp     loc_4C7
.text:00000570 ; ---------------------------------------------------------------------------
.text:00000570
.text:00000570 loc_570:                                ; CODE XREF: Ppmd8_DecodeSymbol(x)+44Dj
.text:00000570                 mov     edx, [ebp+arg_0]
.text:00000573                 mov     eax, [edx]
.text:00000575                 movzx   ecx, byte ptr [eax+2]
.text:00000579                 mov     byte ptr [ebp+ecx+var_108], 0
.text:00000581                 mov     edx, [ebp+arg_0]
.text:00000584                 mov     dword ptr [edx+14h], 0
.text:0000058B
.text:0000058B loc_58B:                                ; CODE XREF: Ppmd8_DecodeSymbol(x)+2B6j
.text:0000058B                                         ; Ppmd8_DecodeSymbol(x)+7F2j
.text:0000058B                 mov     eax, [ebp+arg_0]
.text:0000058E                 mov     ecx, [eax]
.text:00000590                 movzx   edx, byte ptr [ecx]
.text:00000593                 mov     [ebp+var_560], edx
.text:00000599
.text:00000599 loc_599:                                ; CODE XREF: Ppmd8_DecodeSymbol(x)+546j
.text:00000599                 mov     eax, [ebp+arg_0]
.text:0000059C                 mov     ecx, [eax+0Ch]
.text:0000059F                 add     ecx, 1
.text:000005A2                 mov     edx, [ebp+arg_0]
.text:000005A5                 mov     [edx+0Ch], ecx
.text:000005A8                 mov     eax, [ebp+arg_0]
.text:000005AB                 mov     ecx, [eax]
.text:000005AD                 cmp     dword ptr [ecx+8], 0
.text:000005B1                 jnz     short loc_5BB
.text:000005B3                 or      eax, 0FFFFFFFFh
.text:000005B6                 jmp     loc_887
.text:000005BB ; ---------------------------------------------------------------------------
.text:000005BB
.text:000005BB loc_5BB:                                ; CODE XREF: Ppmd8_DecodeSymbol(x)+521j
.text:000005BB                 mov     edx, [ebp+arg_0]
.text:000005BE                 mov     eax, [edx]
.text:000005C0                 mov     ecx, [ebp+arg_0]
.text:000005C3                 mov     edx, [eax+8]
.text:000005C6                 mov     [ecx], edx
.text:000005C8                 mov     eax, [ebp+arg_0]
.text:000005CB                 mov     ecx, [eax]
.text:000005CD                 movzx   edx, byte ptr [ecx]
.text:000005D0                 cmp     edx, [ebp+var_560]
.text:000005D6                 jz      short loc_599
.text:000005D8                 mov     [ebp+var_550], 0
.text:000005E2                 mov     eax, [ebp+arg_0]
.text:000005E5                 mov     ecx, [eax]
.text:000005E7                 mov     edx, [ecx+4]
.text:000005EA                 mov     [ebp+var_53C], edx
.text:000005F0                 mov     [ebp+var_558], 0
.text:000005FA                 mov     eax, [ebp+arg_0]
.text:000005FD                 mov     ecx, [eax]
.text:000005FF                 movzx   edx, byte ptr [ecx]
.text:00000602                 sub     edx, [ebp+var_560]
.text:00000608                 mov     [ebp+var_55C], edx
.text:0000060E
.text:0000060E loc_60E:                                ; CODE XREF: Ppmd8_DecodeSymbol(x)+5F1j
.text:0000060E                 mov     eax, [ebp+var_53C]
.text:00000614                 movzx   ecx, byte ptr [eax]
.text:00000617                 movsx   edx, byte ptr [ebp+ecx+var_108]
.text:0000061F                 mov     [ebp+var_564], edx
.text:00000625                 mov     eax, [ebp+var_53C]
.text:0000062B                 movzx   ecx, byte ptr [eax+1]
.text:0000062F                 and     ecx, [ebp+var_564]
.text:00000635                 add     ecx, [ebp+var_550]
.text:0000063B                 mov     [ebp+var_550], ecx
.text:00000641                 mov     edx, [ebp+var_558]
.text:00000647                 mov     eax, [ebp+var_53C]
.text:0000064D                 mov     [ebp+edx*4+var_534], eax
.text:00000654                 mov     ecx, [ebp+var_53C]
.text:0000065A                 add     ecx, 6
.text:0000065D                 mov     [ebp+var_53C], ecx
.text:00000663                 mov     edx, [ebp+var_558]
.text:00000669                 sub     edx, [ebp+var_564]
.text:0000066F                 mov     [ebp+var_558], edx
.text:00000675                 mov     eax, [ebp+var_558]
.text:0000067B                 cmp     eax, [ebp+var_55C]
.text:00000681                 jnz     short loc_60E
.text:00000683                 lea     ecx, [ebp+var_544]
.text:00000689                 push    ecx
.text:0000068A                 mov     edx, [ebp+var_560]
.text:00000690                 push    edx
.text:00000691                 mov     eax, [ebp+arg_0]
.text:00000694                 push    eax
.text:00000695                 call    _Ppmd8_MakeEscFreq@12 ; Ppmd8_MakeEscFreq(x,x,x)
.text:0000069A                 mov     [ebp+var_554], eax
.text:000006A0                 mov     ecx, [ebp+var_544]
.text:000006A6                 add     ecx, [ebp+var_550]
.text:000006AC                 mov     [ebp+var_544], ecx
.text:000006B2                 mov     edx, [ebp+var_544]
.text:000006B8                 push    edx
.text:000006B9                 mov     eax, [ebp+arg_0]
.text:000006BC                 push    eax
.text:000006BD                 call    _RangeDec_GetThreshold@8 ; RangeDec_GetThreshold(x,x)
.text:000006C2                 mov     [ebp+var_54C], eax
.text:000006C8                 mov     ecx, [ebp+var_54C]
.text:000006CE                 cmp     ecx, [ebp+var_550]
.text:000006D4                 jnb     loc_808
.text:000006DA                 lea     edx, [ebp+var_534]
.text:000006E0                 mov     [ebp+var_56C], edx
.text:000006E6                 mov     [ebp+var_550], 0
.text:000006F0                 jmp     short loc_701
.text:000006F2 ; ---------------------------------------------------------------------------
.text:000006F2
.text:000006F2 loc_6F2:                                ; CODE XREF: Ppmd8_DecodeSymbol(x)+697j
.text:000006F2                 mov     eax, [ebp+var_56C]
.text:000006F8                 add     eax, 4
.text:000006FB                 mov     [ebp+var_56C], eax
.text:00000701
.text:00000701 loc_701:                                ; CODE XREF: Ppmd8_DecodeSymbol(x)+660j
.text:00000701                 mov     ecx, [ebp+var_56C]
.text:00000707                 mov     edx, [ecx]
.text:00000709                 movzx   eax, byte ptr [edx+1]
.text:0000070D                 add     eax, [ebp+var_550]
.text:00000713                 mov     [ebp+var_550], eax
.text:00000719                 mov     ecx, [ebp+var_550]
.text:0000071F                 cmp     ecx, [ebp+var_54C]
.text:00000725                 ja      short loc_729
.text:00000727                 jmp     short loc_6F2
.text:00000729 ; ---------------------------------------------------------------------------
.text:00000729
.text:00000729 loc_729:                                ; CODE XREF: Ppmd8_DecodeSymbol(x)+695j
.text:00000729                 mov     edx, [ebp+var_56C]
.text:0000072F                 mov     eax, [edx]
.text:00000731                 mov     [ebp+var_53C], eax
.text:00000737                 mov     ecx, [ebp+var_53C]
.text:0000073D                 movzx   edx, byte ptr [ecx+1]
.text:00000741                 push    edx
.text:00000742                 mov     eax, [ebp+var_53C]
.text:00000748                 movzx   ecx, byte ptr [eax+1]
.text:0000074C                 mov     edx, [ebp+var_550]
.text:00000752                 sub     edx, ecx
.text:00000754                 push    edx
.text:00000755                 mov     eax, [ebp+arg_0]
.text:00000758                 push    eax
.text:00000759                 call    _RangeDec_Decode@12 ; RangeDec_Decode(x,x,x)
.text:0000075E                 mov     ecx, [ebp+var_554]
.text:00000764                 movzx   edx, byte ptr [ecx+2]
.text:00000768                 cmp     edx, 7
.text:0000076B                 jge     short loc_7DC
.text:0000076D                 mov     eax, [ebp+var_554]
.text:00000773                 mov     cl, [eax+3]
.text:00000776                 sub     cl, 1
.text:00000779                 mov     [ebp+var_575], cl
.text:0000077F                 mov     edx, [ebp+var_554]
.text:00000785                 mov     al, [ebp+var_575]
.text:0000078B                 mov     [edx+3], al
.text:0000078E                 movzx   ecx, [ebp+var_575]
.text:00000795                 test    ecx, ecx
.text:00000797                 jnz     short loc_7DC
.text:00000799                 mov     edx, [ebp+var_554]
.text:0000079F                 mov     ax, [edx]
.text:000007A2                 shl     ax, 1
.text:000007A5                 mov     ecx, [ebp+var_554]
.text:000007AB                 mov     [ecx], ax
.text:000007AE                 mov     edx, [ebp+var_554]
.text:000007B4                 movzx   ecx, byte ptr [edx+2]
.text:000007B8                 mov     eax, 3
.text:000007BD                 shl     eax, cl
.text:000007BF                 mov     ecx, [ebp+var_554]
.text:000007C5                 mov     [ecx+3], al
.text:000007C8                 mov     edx, [ebp+var_554]
.text:000007CE                 mov     al, [edx+2]
.text:000007D1                 add     al, 1
.text:000007D3                 mov     ecx, [ebp+var_554]
.text:000007D9                 mov     [ecx+2], al
.text:000007DC
.text:000007DC loc_7DC:                                ; CODE XREF: Ppmd8_DecodeSymbol(x)+6DBj
.text:000007DC                                         ; Ppmd8_DecodeSymbol(x)+707j
.text:000007DC                 mov     edx, [ebp+arg_0]
.text:000007DF                 mov     eax, [ebp+var_53C]
.text:000007E5                 mov     [edx+8], eax
.text:000007E8                 mov     ecx, [ebp+var_53C]
.text:000007EE                 mov     dl, [ecx]
.text:000007F0                 mov     [ebp+var_565], dl
.text:000007F6                 mov     eax, [ebp+arg_0]
.text:000007F9                 push    eax
.text:000007FA                 call    _Ppmd8_Update2@4 ; Ppmd8_Update2(x)
.text:000007FF                 movzx   eax, [ebp+var_565]
.text:00000806                 jmp     short loc_887
.text:00000808 ; ---------------------------------------------------------------------------
.text:00000808
.text:00000808 loc_808:                                ; CODE XREF: Ppmd8_DecodeSymbol(x)+644j
.text:00000808                 mov     ecx, [ebp+var_54C]
.text:0000080E                 cmp     ecx, [ebp+var_544]
.text:00000814                 jb      short loc_81D
.text:00000816                 mov     eax, 0FFFFFFFEh
.text:0000081B                 jmp     short loc_887
.text:0000081D ; ---------------------------------------------------------------------------
.text:0000081D
.text:0000081D loc_81D:                                ; CODE XREF: Ppmd8_DecodeSymbol(x)+784j
.text:0000081D                 mov     edx, [ebp+var_544]
.text:00000823                 sub     edx, [ebp+var_550]
.text:00000829                 push    edx
.text:0000082A                 mov     eax, [ebp+var_550]
.text:00000830                 push    eax
.text:00000831                 mov     ecx, [ebp+arg_0]
.text:00000834                 push    ecx
.text:00000835                 call    _RangeDec_Decode@12 ; RangeDec_Decode(x,x,x)
.text:0000083A                 mov     edx, [ebp+var_554]
.text:00000840                 movzx   eax, word ptr [edx]
.text:00000843                 add     eax, [ebp+var_544]
.text:00000849                 mov     ecx, [ebp+var_554]
.text:0000084F                 mov     [ecx], ax
.text:00000852
.text:00000852 loc_852:                                ; CODE XREF: Ppmd8_DecodeSymbol(x)+7F0j
.text:00000852                 mov     edx, [ebp+var_558]
.text:00000858                 sub     edx, 1
.text:0000085B                 mov     [ebp+var_558], edx
.text:00000861                 mov     eax, [ebp+var_558]
.text:00000867                 mov     ecx, [ebp+eax*4+var_534]
.text:0000086E                 movzx   edx, byte ptr [ecx]
.text:00000871                 mov     byte ptr [ebp+edx+var_108], 0
.text:00000879                 cmp     [ebp+var_558], 0
.text:00000880                 jnz     short loc_852
.text:00000882                 jmp     loc_58B
.text:00000887 ; ---------------------------------------------------------------------------
.text:00000887
.text:00000887 loc_887:                                ; CODE XREF: Ppmd8_DecodeSymbol(x)+BBj
.text:00000887                                         ; Ppmd8_DecodeSymbol(x)+15Cj ...
.text:00000887                 push    edx
.text:00000888                 mov     ecx, ebp
.text:0000088A                 push    eax
.text:0000088B                 lea     edx, $LN43
.text:00000891                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000896                 pop     eax
.text:00000897                 pop     edx
.text:00000898                 pop     edi
.text:00000899                 mov     ecx, [ebp+var_4]
.text:0000089C                 xor     ecx, ebp
.text:0000089E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000008A3                 add     esp, 578h
.text:000008A9                 cmp     ebp, esp
.text:000008AB                 call    __RTC_CheckEsp
.text:000008B0                 mov     esp, ebp
.text:000008B2                 pop     ebp
.text:000008B3                 retn    4
.text:000008B3 _Ppmd8_DecodeSymbol@4 endp
.text:000008B3
.text:000008B3 ; ---------------------------------------------------------------------------
.text:000008B6                 align 4
.text:000008B8 $LN43           dd 3                    ; DATA XREF: Ppmd8_DecodeSymbol(x)+7FBo
.text:000008BC                 dd offset $LN42
.text:000008C0 $LN42           dd 0FFFFFEF8h, 100h     ; DATA XREF: .text:000008BCo
.text:000008C8                 dd offset $LN39         ; "charMask"
.text:000008CC                 db 0CCh
.text:000008CD                 db 0FAh, 2 dup(0FFh)
.text:000008D0                 dd offset loc_3FE+2
.text:000008D4                 dd offset $LN40         ; "ps"
.text:000008D8                 dd 0FFFFFABCh, 4
.text:000008E0                 dd offset $LN41         ; "freqSum"
.text:000008E4 $LN41           db 'freqSum',0          ; DATA XREF: .text:000008E0o
.text:000008EC $LN40           db 'ps',0               ; DATA XREF: .text:000008D4o
.text:000008EF $LN39           db 'charMask',0         ; DATA XREF: .text:000008C8o
.text:000008F8                 align 10h
.text:00000900
.text:00000900 ; =============== S U B R O U T I N E =======================================
.text:00000900
.text:00000900 ; Attributes: bp-based frame
.text:00000900
.text:00000900 ; __stdcall RangeDec_GetThreshold(x, x)
.text:00000900 _RangeDec_GetThreshold@8 proc near      ; CODE XREF: Ppmd8_DecodeSymbol(x)+52p
.text:00000900                                         ; Ppmd8_DecodeSymbol(x)+62Dp
.text:00000900
.text:00000900 var_4           = dword ptr -4
.text:00000900 arg_0           = dword ptr  8
.text:00000900 arg_4           = dword ptr  0Ch
.text:00000900
.text:00000900                 push    ebp
.text:00000901                 mov     ebp, esp
.text:00000903                 push    ecx
.text:00000904                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000090B                 mov     eax, [ebp+arg_0]
.text:0000090E                 mov     eax, [eax+48h]
.text:00000911                 xor     edx, edx
.text:00000913                 div     [ebp+arg_4]
.text:00000916                 mov     [ebp+var_4], eax
.text:00000919                 mov     ecx, [ebp+arg_0]
.text:0000091C                 mov     edx, [ebp+var_4]
.text:0000091F                 mov     [ecx+48h], edx
.text:00000922                 mov     eax, [ebp+arg_0]
.text:00000925                 mov     eax, [eax+4Ch]
.text:00000928                 xor     edx, edx
.text:0000092A                 div     [ebp+var_4]
.text:0000092D                 mov     esp, ebp
.text:0000092F                 pop     ebp
.text:00000930                 retn    8
.text:00000930 _RangeDec_GetThreshold@8 endp
.text:00000930
.text:00000930 ; ---------------------------------------------------------------------------
.text:00000933                 align 10h
.text:00000940
.text:00000940 ; =============== S U B R O U T I N E =======================================
.text:00000940
.text:00000940 ; Attributes: bp-based frame
.text:00000940
.text:00000940 ; __stdcall RangeDec_Decode(x, x, x)
.text:00000940 _RangeDec_Decode@12 proc near           ; CODE XREF: Ppmd8_DecodeSymbol(x)+8Cp
.text:00000940                                         ; Ppmd8_DecodeSymbol(x)+12Dp ...
.text:00000940
.text:00000940 arg_0           = dword ptr  8
.text:00000940 arg_4           = dword ptr  0Ch
.text:00000940 arg_8           = dword ptr  10h
.text:00000940
.text:00000940                 push    ebp
.text:00000941                 mov     ebp, esp
.text:00000943                 push    esi
.text:00000944                 push    edi
.text:00000945                 mov     eax, [ebp+arg_0]
.text:00000948                 mov     ecx, [ebp+arg_4]
.text:0000094B                 imul    ecx, [eax+48h]
.text:0000094F                 mov     [ebp+arg_4], ecx
.text:00000952                 mov     edx, [ebp+arg_0]
.text:00000955                 mov     eax, [edx+50h]
.text:00000958                 add     eax, [ebp+arg_4]
.text:0000095B                 mov     ecx, [ebp+arg_0]
.text:0000095E                 mov     [ecx+50h], eax
.text:00000961                 mov     edx, [ebp+arg_0]
.text:00000964                 mov     eax, [edx+4Ch]
.text:00000967                 sub     eax, [ebp+arg_4]
.text:0000096A                 mov     ecx, [ebp+arg_0]
.text:0000096D                 mov     [ecx+4Ch], eax
.text:00000970                 mov     edx, [ebp+arg_0]
.text:00000973                 mov     eax, [edx+48h]
.text:00000976                 imul    eax, [ebp+arg_8]
.text:0000097A                 mov     ecx, [ebp+arg_0]
.text:0000097D                 mov     [ecx+48h], eax
.text:00000980
.text:00000980 loc_980:                                ; CODE XREF: RangeDec_Decode(x,x,x)+CEj
.text:00000980                 mov     edx, [ebp+arg_0]
.text:00000983                 mov     eax, [edx+50h]
.text:00000986                 mov     ecx, [ebp+arg_0]
.text:00000989                 add     eax, [ecx+48h]
.text:0000098C                 mov     edx, [ebp+arg_0]
.text:0000098F                 xor     eax, [edx+50h]
.text:00000992                 cmp     eax, 1000000h
.text:00000997                 jb      short loc_9C2
.text:00000999                 mov     eax, [ebp+arg_0]
.text:0000099C                 cmp     dword ptr [eax+48h], 8000h
.text:000009A3                 jnb     short loc_A13
.text:000009A5                 mov     ecx, [ebp+arg_0]
.text:000009A8                 xor     edx, edx
.text:000009AA                 sub     edx, [ecx+50h]
.text:000009AD                 and     edx, 7FFFh
.text:000009B3                 mov     eax, [ebp+arg_0]
.text:000009B6                 mov     [eax+48h], edx
.text:000009B9                 mov     ecx, 1
.text:000009BE                 test    ecx, ecx
.text:000009C0                 jz      short loc_A13
.text:000009C2
.text:000009C2 loc_9C2:                                ; CODE XREF: RangeDec_Decode(x,x,x)+57j
.text:000009C2                 mov     edx, [ebp+arg_0]
.text:000009C5                 mov     esi, [edx+4Ch]
.text:000009C8                 shl     esi, 8
.text:000009CB                 mov     edi, esp
.text:000009CD                 mov     eax, [ebp+arg_0]
.text:000009D0                 mov     ecx, [eax+54h]
.text:000009D3                 push    ecx
.text:000009D4                 mov     edx, [ebp+arg_0]
.text:000009D7                 mov     eax, [edx+54h]
.text:000009DA                 mov     ecx, [eax]
.text:000009DC                 call    ecx
.text:000009DE                 cmp     edi, esp
.text:000009E0                 call    __RTC_CheckEsp
.text:000009E5                 movzx   edx, al
.text:000009E8                 or      esi, edx
.text:000009EA                 mov     eax, [ebp+arg_0]
.text:000009ED                 mov     [eax+4Ch], esi
.text:000009F0                 mov     ecx, [ebp+arg_0]
.text:000009F3                 mov     edx, [ecx+48h]
.text:000009F6                 shl     edx, 8
.text:000009F9                 mov     eax, [ebp+arg_0]
.text:000009FC                 mov     [eax+48h], edx
.text:000009FF                 mov     ecx, [ebp+arg_0]
.text:00000A02                 mov     edx, [ecx+50h]
.text:00000A05                 shl     edx, 8
.text:00000A08                 mov     eax, [ebp+arg_0]
.text:00000A0B                 mov     [eax+50h], edx
.text:00000A0E                 jmp     loc_980
.text:00000A13 ; ---------------------------------------------------------------------------
.text:00000A13
.text:00000A13 loc_A13:                                ; CODE XREF: RangeDec_Decode(x,x,x)+63j
.text:00000A13                                         ; RangeDec_Decode(x,x,x)+80j
.text:00000A13                 pop     edi
.text:00000A14                 pop     esi
.text:00000A15                 cmp     ebp, esp
.text:00000A17                 call    __RTC_CheckEsp
.text:00000A1C                 pop     ebp
.text:00000A1D                 retn    0Ch
.text:00000A1D _RangeDec_Decode@12 endp
.text:00000A1D
.text:00000A1D _text           ends
.text:00000A1D
.rtc$TMZ:00000A20 ; ===========================================================================
.rtc$TMZ:00000A20
.rtc$TMZ:00000A20 ; Segment type: Pure data
.rtc$TMZ:00000A20 ; Segment permissions: Read
.rtc$TMZ:00000A20 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000A20                 assume cs:_rtc$TMZ
.rtc$TMZ:00000A20                 ;org 0A20h
.rtc$TMZ:00000A20 ; COMDAT (pick any)
.rtc$TMZ:00000A20 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000A20 _rtc$TMZ        ends
.rtc$TMZ:00000A20
.rtc$IMZ:00000A24 ; ===========================================================================
.rtc$IMZ:00000A24
.rtc$IMZ:00000A24 ; Segment type: Pure data
.rtc$IMZ:00000A24 ; Segment permissions: Read
.rtc$IMZ:00000A24 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000A24                 assume cs:_rtc$IMZ
.rtc$IMZ:00000A24                 ;org 0A24h
.rtc$IMZ:00000A24 ; COMDAT (pick any)
.rtc$IMZ:00000A24 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000A24 _rtc$IMZ        ends
.rtc$IMZ:00000A24
UNDEF:00000A30 ; ===========================================================================
UNDEF:00000A30
UNDEF:00000A30 ; Segment type: Externs
UNDEF:00000A30 ; UNDEF
UNDEF:00000A30                 extrn __RTC_CheckEsp:near
UNDEF:00000A30                                         ; CODE XREF: Ppmd8_RangeDec_Init(x)+61p
UNDEF:00000A30                                         ; Ppmd8_RangeDec_Init(x)+85p ...
UNDEF:00000A34                 extrn __RTC_Shutdown:near
UNDEF:00000A34                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000A38                 extrn __RTC_InitBase:near
UNDEF:00000A38                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000A3C ; __stdcall Ppmd8_Update2(x)
UNDEF:00000A3C                 extrn _Ppmd8_Update2@4:near
UNDEF:00000A3C                                         ; CODE XREF: Ppmd8_DecodeSymbol(x)+76Ap
UNDEF:00000A40 ; __stdcall Ppmd8_MakeEscFreq(x, x, x)
UNDEF:00000A40                 extrn _Ppmd8_MakeEscFreq@12:near
UNDEF:00000A40                                         ; CODE XREF: Ppmd8_DecodeSymbol(x)+605p
UNDEF:00000A44                 extrn _PPMD8_kExpEscape:near
UNDEF:00000A44                                         ; DATA XREF: Ppmd8_DecodeSymbol(x)+41Er
UNDEF:00000A48 ; __stdcall Ppmd8_UpdateBin(x)
UNDEF:00000A48                 extrn _Ppmd8_UpdateBin@4:near
UNDEF:00000A48                                         ; CODE XREF: Ppmd8_DecodeSymbol(x)+3BAp
UNDEF:00000A4C ; __stdcall Ppmd8_Update1(x)
UNDEF:00000A4C                 extrn _Ppmd8_Update1@4:near
UNDEF:00000A4C                                         ; CODE XREF: Ppmd8_DecodeSymbol(x)+150p
UNDEF:00000A50 ; __stdcall Ppmd8_Update1_0(x)
UNDEF:00000A50                 extrn _Ppmd8_Update1_0@4:near
UNDEF:00000A50                                         ; CODE XREF: Ppmd8_DecodeSymbol(x)+AFp
UNDEF:00000A54                 extrn ___security_cookie:near
UNDEF:00000A54                                         ; DATA XREF: Ppmd8_DecodeSymbol(x)+1Cr
UNDEF:00000A58 ; __fastcall __security_check_cookie(x)
UNDEF:00000A58                 extrn @__security_check_cookie@4:near
UNDEF:00000A58                                         ; CODE XREF: Ppmd8_DecodeSymbol(x)+80Ep
UNDEF:00000A5C ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00000A5C                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00000A5C                                         ; CODE XREF: Ppmd8_DecodeSymbol(x)+801p
UNDEF:00000A5C
UNDEF:00000A5C
UNDEF:00000A5C                 end