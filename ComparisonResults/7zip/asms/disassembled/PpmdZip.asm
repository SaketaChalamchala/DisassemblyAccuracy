.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : 8D653A3798FD06A921DD5DE9FD635012
.text:00000000 ; Input CRC32 : 5BE43BAF
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\PpmdZip.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; _DWORD __thiscall NCompress::NPpmdZip::CDecoder::CDecoder(NCompress::NPpmdZip::CDecoder *this, bool)
.text:00000000                 public ??0CDecoder@NPpmdZip@NCompress@@QAE@_N@Z
.text:00000000 ??0CDecoder@NPpmdZip@NCompress@@QAE@_N@Z proc near
.text:00000000
.text:00000000 var_10          = dword ptr -10h
.text:00000000 var_C           = dword ptr -0Ch
.text:00000000 var_4           = dword ptr -4
.text:00000000 arg_0           = byte ptr  8
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 push    0FFFFFFFFh
.text:00000005                 push    offset __ehhandler$??0CDecoder@NPpmdZip@NCompress@@QAE@_N@Z
.text:0000000A                 mov     eax, large fs:0
.text:00000010                 push    eax
.text:00000011                 push    ecx
.text:00000012                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000019                 mov     eax, dword ptr ds:___security_cookie
.text:0000001E                 xor     eax, ebp
.text:00000020                 push    eax
.text:00000021                 lea     eax, [ebp+var_C]
.text:00000024                 mov     large fs:0, eax
.text:0000002A                 mov     [ebp+var_10], ecx
.text:0000002D                 mov     ecx, [ebp+var_10] ; this
.text:00000030                 call    ??0ICompressCoder@@QAE@XZ ; ICompressCoder::ICompressCoder(void)
.text:00000035                 mov     ecx, [ebp+var_10]
.text:00000038                 add     ecx, 4          ; this
.text:0000003B                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00000040                 mov     eax, [ebp+var_10]
.text:00000043                 mov     dword ptr [eax], offset ??_7CDecoder@NPpmdZip@NCompress@@6B@ ; const NCompress::NPpmdZip::CDecoder::`vftable'
.text:00000049                 mov     ecx, [ebp+var_10]
.text:0000004C                 add     ecx, 8
.text:0000004F                 call    ??0CByteInBufWrap@@QAE@XZ ; CByteInBufWrap::CByteInBufWrap(void)
.text:00000054                 mov     [ebp+var_4], 0
.text:0000005B                 mov     ecx, [ebp+var_10]
.text:0000005E                 add     ecx, 30h ; '0'  ; this
.text:00000061                 call    ??0CBuf@NPpmdZip@NCompress@@QAE@XZ ; NCompress::NPpmdZip::CBuf::CBuf(void)
.text:00000066                 mov     ecx, [ebp+var_10]
.text:00000069                 mov     dl, [ebp+arg_0]
.text:0000006C                 mov     [ecx+1CECh], dl
.text:00000072                 mov     eax, [ebp+var_10]
.text:00000075                 add     eax, 8
.text:00000078                 mov     ecx, [ebp+var_10]
.text:0000007B                 mov     [ecx+88h], eax
.text:00000081                 mov     edx, [ebp+var_10]
.text:00000084                 add     edx, 34h ; '4'
.text:00000087                 push    edx
.text:00000088                 call    _Ppmd8_Construct@4 ; Ppmd8_Construct(x)
.text:0000008D                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000094                 mov     eax, [ebp+var_10]
.text:00000097                 mov     ecx, [ebp+var_C]
.text:0000009A                 mov     large fs:0, ecx
.text:000000A1                 pop     ecx
.text:000000A2                 add     esp, 10h
.text:000000A5                 cmp     ebp, esp
.text:000000A7                 call    __RTC_CheckEsp
.text:000000AC                 mov     esp, ebp
.text:000000AE                 pop     ebp
.text:000000AF                 retn    4
.text:000000AF ??0CDecoder@NPpmdZip@NCompress@@QAE@_N@Z endp
.text:000000AF
.text:000000AF ; ---------------------------------------------------------------------------
.text:000000B2                 align 10h
.text:000000C0
.text:000000C0 ; =============== S U B R O U T I N E =======================================
.text:000000C0
.text:000000C0 ; Attributes: bp-based frame
.text:000000C0
.text:000000C0 ; _DWORD __thiscall NCompress::NPpmdZip::CDecoder::~CDecoder(NCompress::NPpmdZip::CDecoder *__hidden this)
.text:000000C0                 public ??1CDecoder@NPpmdZip@NCompress@@QAE@XZ
.text:000000C0 ??1CDecoder@NPpmdZip@NCompress@@QAE@XZ proc near
.text:000000C0                                         ; CODE XREF: NCompress::NPpmdZip::CDecoder::`scalar deleting destructor'(uint)+11p
.text:000000C0
.text:000000C0 var_10          = dword ptr -10h
.text:000000C0 var_C           = dword ptr -0Ch
.text:000000C0 var_4           = dword ptr -4
.text:000000C0
.text:000000C0                 push    ebp
.text:000000C1                 mov     ebp, esp
.text:000000C3                 push    0FFFFFFFFh
.text:000000C5                 push    offset __ehhandler$??1CDecoder@NPpmdZip@NCompress@@QAE@XZ
.text:000000CA                 mov     eax, large fs:0
.text:000000D0                 push    eax
.text:000000D1                 push    ecx
.text:000000D2                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000000D9                 mov     eax, dword ptr ds:___security_cookie
.text:000000DE                 xor     eax, ebp
.text:000000E0                 push    eax
.text:000000E1                 lea     eax, [ebp+var_C]
.text:000000E4                 mov     large fs:0, eax
.text:000000EA                 mov     [ebp+var_10], ecx
.text:000000ED                 mov     eax, [ebp+var_10]
.text:000000F0                 mov     dword ptr [eax], offset ??_7CDecoder@NPpmdZip@NCompress@@6B@ ; const NCompress::NPpmdZip::CDecoder::`vftable'
.text:000000F6                 mov     [ebp+var_4], 0
.text:000000FD                 push    offset _g_BigAlloc
.text:00000102                 mov     ecx, [ebp+var_10]
.text:00000105                 add     ecx, 34h ; '4'
.text:00000108                 push    ecx
.text:00000109                 call    _Ppmd8_Free@8   ; Ppmd8_Free(x,x)
.text:0000010E                 mov     ecx, [ebp+var_10]
.text:00000111                 add     ecx, 30h ; '0'  ; this
.text:00000114                 call    ??1CBuf@NPpmdZip@NCompress@@QAE@XZ ; NCompress::NPpmdZip::CBuf::~CBuf(void)
.text:00000119                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000120                 mov     ecx, [ebp+var_10]
.text:00000123                 add     ecx, 8          ; this
.text:00000126                 call    ??1CByteInBufWrap@@QAE@XZ ; CByteInBufWrap::~CByteInBufWrap(void)
.text:0000012B                 mov     ecx, [ebp+var_C]
.text:0000012E                 mov     large fs:0, ecx
.text:00000135                 pop     ecx
.text:00000136                 add     esp, 10h
.text:00000139                 cmp     ebp, esp
.text:0000013B                 call    __RTC_CheckEsp
.text:00000140                 mov     esp, ebp
.text:00000142                 pop     ebp
.text:00000143                 retn
.text:00000143 ??1CDecoder@NPpmdZip@NCompress@@QAE@XZ endp
.text:00000143
.text:00000143 ; ---------------------------------------------------------------------------
.text:00000144                 align 10h
.text:00000150
.text:00000150 ; =============== S U B R O U T I N E =======================================
.text:00000150
.text:00000150 ; Attributes: bp-based frame
.text:00000150
.text:00000150 ; __int32 __stdcall NCompress::NPpmdZip::CDecoder::Code(NCompress::NPpmdZip::CDecoder *this, struct ISequentialInStream *, struct ISequentialOutStream *, const unsigned __int64 *, const unsigned __int64 *, struct ICompressProgressInfo *)
.text:00000150                 public ?Code@CDecoder@NPpmdZip@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text:00000150 ?Code@CDecoder@NPpmdZip@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z proc near
.text:00000150                                         ; DATA XREF: .rdata:00000D00o
.text:00000150
.text:00000150 var_80          = dword ptr -80h
.text:00000150 var_7C          = dword ptr -7Ch
.text:00000150 var_78          = dword ptr -78h
.text:00000150 var_74          = dword ptr -74h
.text:00000150 var_70          = dword ptr -70h
.text:00000150 var_6C          = dword ptr -6Ch
.text:00000150 var_68          = dword ptr -68h
.text:00000150 var_60          = dword ptr -60h
.text:00000150 var_5C          = dword ptr -5Ch
.text:00000150 var_54          = dword ptr -54h
.text:00000150 var_50          = dword ptr -50h
.text:00000150 var_4C          = dword ptr -4Ch
.text:00000150 var_48          = dword ptr -48h
.text:00000150 var_44          = dword ptr -44h
.text:00000150 var_40          = dword ptr -40h
.text:00000150 var_3C          = dword ptr -3Ch
.text:00000150 var_38          = dword ptr -38h
.text:00000150 var_30          = dword ptr -30h
.text:00000150 var_2C          = dword ptr -2Ch
.text:00000150 var_21          = byte ptr -21h
.text:00000150 var_20          = dword ptr -20h
.text:00000150 var_1C          = dword ptr -1Ch
.text:00000150 var_18          = dword ptr -18h
.text:00000150 var_14          = dword ptr -14h
.text:00000150 var_10          = dword ptr -10h
.text:00000150 var_8           = word ptr -8
.text:00000150 this            = dword ptr  8
.text:00000150 arg_4           = dword ptr  0Ch
.text:00000150 arg_8           = dword ptr  10h
.text:00000150 arg_10          = dword ptr  18h
.text:00000150 arg_14          = dword ptr  1Ch
.text:00000150
.text:00000150                 push    ebp
.text:00000151                 mov     ebp, esp
.text:00000153                 sub     esp, 80h
.text:00000159                 push    esi
.text:0000015A                 push    edi
.text:0000015B                 lea     edi, [ebp+var_80]
.text:0000015E                 mov     ecx, 20h ; ' '
.text:00000163                 mov     eax, 0CCCCCCCCh
.text:00000168                 rep stosd
.text:0000016A                 mov     ecx, [ebp+this]
.text:0000016D                 add     ecx, 30h ; '0'  ; this
.text:00000170                 call    ?Alloc@CBuf@NPpmdZip@NCompress@@QAE_NXZ ; NCompress::NPpmdZip::CBuf::Alloc(void)
.text:00000175                 movzx   eax, al
.text:00000178                 test    eax, eax
.text:0000017A                 jnz     short loc_186
.text:0000017C                 mov     eax, 8007000Eh
.text:00000181                 jmp     loc_4BB
.text:00000186 ; ---------------------------------------------------------------------------
.text:00000186
.text:00000186 loc_186:                                ; CODE XREF: NCompress::NPpmdZip::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+2Aj
.text:00000186                 push    100000h         ; unsigned int
.text:0000018B                 mov     ecx, [ebp+this]
.text:0000018E                 add     ecx, 8          ; this
.text:00000191                 call    ?Alloc@CByteInBufWrap@@QAE_NI@Z ; CByteInBufWrap::Alloc(uint)
.text:00000196                 movzx   ecx, al
.text:00000199                 test    ecx, ecx
.text:0000019B                 jnz     short loc_1A7
.text:0000019D                 mov     eax, 8007000Eh
.text:000001A2                 jmp     loc_4BB
.text:000001A7 ; ---------------------------------------------------------------------------
.text:000001A7
.text:000001A7 loc_1A7:                                ; CODE XREF: NCompress::NPpmdZip::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+4Bj
.text:000001A7                 mov     edx, [ebp+this]
.text:000001AA                 mov     eax, [ebp+arg_4]
.text:000001AD                 mov     [edx+1Ch], eax
.text:000001B0                 mov     ecx, [ebp+this]
.text:000001B3                 add     ecx, 8          ; this
.text:000001B6                 call    ?Init@CByteInBufWrap@@QAEXXZ ; CByteInBufWrap::Init(void)
.text:000001BB                 mov     [ebp+var_10], 0
.text:000001C2                 jmp     short loc_1CD
.text:000001C4 ; ---------------------------------------------------------------------------
.text:000001C4
.text:000001C4 loc_1C4:                                ; CODE XREF: NCompress::NPpmdZip::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+95j
.text:000001C4                 mov     ecx, [ebp+var_10]
.text:000001C7                 add     ecx, 1
.text:000001CA                 mov     [ebp+var_10], ecx
.text:000001CD
.text:000001CD loc_1CD:                                ; CODE XREF: NCompress::NPpmdZip::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+72j
.text:000001CD                 cmp     [ebp+var_10], 2
.text:000001D1                 jge     short loc_1E7
.text:000001D3                 mov     ecx, [ebp+this]
.text:000001D6                 add     ecx, 8          ; this
.text:000001D9                 call    ?ReadByte@CByteInBufWrap@@QAEEXZ ; CByteInBufWrap::ReadByte(void)
.text:000001DE                 mov     edx, [ebp+var_10]
.text:000001E1                 mov     byte ptr [ebp+edx+var_8], al
.text:000001E5                 jmp     short loc_1C4
.text:000001E7 ; ---------------------------------------------------------------------------
.text:000001E7
.text:000001E7 loc_1E7:                                ; CODE XREF: NCompress::NPpmdZip::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+81j
.text:000001E7                 mov     eax, [ebp+this]
.text:000001EA                 movzx   ecx, byte ptr [eax+28h]
.text:000001EE                 test    ecx, ecx
.text:000001F0                 jz      short loc_1FC
.text:000001F2                 mov     eax, 1
.text:000001F7                 jmp     loc_4BB
.text:000001FC ; ---------------------------------------------------------------------------
.text:000001FC
.text:000001FC loc_1FC:                                ; CODE XREF: NCompress::NPpmdZip::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+A0j
.text:000001FC                 movzx   edx, [ebp+var_8]
.text:00000200                 mov     [ebp+var_14], edx
.text:00000203                 mov     eax, [ebp+var_14]
.text:00000206                 and     eax, 0Fh
.text:00000209                 add     eax, 1
.text:0000020C                 mov     [ebp+var_18], eax
.text:0000020F                 mov     ecx, [ebp+var_14]
.text:00000212                 shr     ecx, 4
.text:00000215                 and     ecx, 0FFh
.text:0000021B                 add     ecx, 1
.text:0000021E                 mov     [ebp+var_1C], ecx
.text:00000221                 mov     edx, [ebp+var_14]
.text:00000224                 shr     edx, 0Ch
.text:00000227                 mov     [ebp+var_20], edx
.text:0000022A                 cmp     [ebp+var_18], 2
.text:0000022E                 jb      short loc_236
.text:00000230                 cmp     [ebp+var_20], 2
.text:00000234                 jbe     short loc_240
.text:00000236
.text:00000236 loc_236:                                ; CODE XREF: NCompress::NPpmdZip::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+DEj
.text:00000236                 mov     eax, 1
.text:0000023B                 jmp     loc_4BB
.text:00000240 ; ---------------------------------------------------------------------------
.text:00000240
.text:00000240 loc_240:                                ; CODE XREF: NCompress::NPpmdZip::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+E4j
.text:00000240                 cmp     [ebp+var_20], 2
.text:00000244                 jnz     short loc_250
.text:00000246                 mov     eax, 80004001h
.text:0000024B                 jmp     loc_4BB
.text:00000250 ; ---------------------------------------------------------------------------
.text:00000250
.text:00000250 loc_250:                                ; CODE XREF: NCompress::NPpmdZip::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+F4j
.text:00000250                 push    offset _g_BigAlloc
.text:00000255                 mov     eax, [ebp+var_1C]
.text:00000258                 shl     eax, 14h
.text:0000025B                 push    eax
.text:0000025C                 mov     ecx, [ebp+this]
.text:0000025F                 add     ecx, 34h ; '4'
.text:00000262                 push    ecx
.text:00000263                 call    _Ppmd8_Alloc@12 ; Ppmd8_Alloc(x,x,x)
.text:00000268                 test    eax, eax
.text:0000026A                 jnz     short loc_276
.text:0000026C                 mov     eax, 8007000Eh
.text:00000271                 jmp     loc_4BB
.text:00000276 ; ---------------------------------------------------------------------------
.text:00000276
.text:00000276 loc_276:                                ; CODE XREF: NCompress::NPpmdZip::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+11Aj
.text:00000276                 mov     edx, [ebp+this]
.text:00000279                 add     edx, 34h ; '4'
.text:0000027C                 push    edx
.text:0000027D                 call    _Ppmd8_RangeDec_Init@4 ; Ppmd8_RangeDec_Init(x)
.text:00000282                 test    eax, eax
.text:00000284                 jnz     short loc_290
.text:00000286                 mov     eax, 1
.text:0000028B                 jmp     loc_4BB
.text:00000290 ; ---------------------------------------------------------------------------
.text:00000290
.text:00000290 loc_290:                                ; CODE XREF: NCompress::NPpmdZip::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+134j
.text:00000290                 mov     eax, [ebp+var_20]
.text:00000293                 push    eax
.text:00000294                 mov     ecx, [ebp+var_18]
.text:00000297                 push    ecx
.text:00000298                 mov     edx, [ebp+this]
.text:0000029B                 add     edx, 34h ; '4'
.text:0000029E                 push    edx
.text:0000029F                 call    _Ppmd8_Init@12  ; Ppmd8_Init(x,x,x)
.text:000002A4                 mov     [ebp+var_21], 0
.text:000002A8                 mov     [ebp+var_30], 0
.text:000002AF                 mov     [ebp+var_2C], 0
.text:000002B6
.text:000002B6 loc_2B6:                                ; CODE XREF: NCompress::NPpmdZip::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *):loc_43Cj
.text:000002B6                 cmp     [ebp+arg_10], 0
.text:000002BA                 jz      short loc_2E1
.text:000002BC                 mov     eax, [ebp+arg_10]
.text:000002BF                 mov     [ebp+var_78], eax
.text:000002C2                 mov     ecx, [ebp+var_78]
.text:000002C5                 mov     edx, [ebp+var_2C]
.text:000002C8                 cmp     edx, [ecx+4]
.text:000002CB                 ja      loc_441
.text:000002D1                 jb      short loc_2E1
.text:000002D3                 mov     eax, [ebp+var_78]
.text:000002D6                 mov     ecx, [ebp+var_30]
.text:000002D9                 cmp     ecx, [eax]
.text:000002DB                 jnb     loc_441
.text:000002E1
.text:000002E1 loc_2E1:                                ; CODE XREF: NCompress::NPpmdZip::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+16Aj
.text:000002E1                                         ; NCompress::NPpmdZip::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+181j
.text:000002E1                 mov     [ebp+var_38], 100000h
.text:000002E8                 cmp     [ebp+arg_10], 0
.text:000002EC                 jz      short loc_325
.text:000002EE                 mov     edx, [ebp+arg_10]
.text:000002F1                 mov     eax, [edx]
.text:000002F3                 sub     eax, [ebp+var_30]
.text:000002F6                 mov     ecx, [edx+4]
.text:000002F9                 sbb     ecx, [ebp+var_2C]
.text:000002FC                 mov     [ebp+var_40], eax
.text:000002FF                 mov     [ebp+var_3C], ecx
.text:00000302                 mov     edx, [ebp+var_38]
.text:00000305                 xor     eax, eax
.text:00000307                 mov     [ebp+var_80], edx
.text:0000030A                 mov     [ebp+var_7C], eax
.text:0000030D                 mov     ecx, [ebp+var_7C]
.text:00000310                 cmp     ecx, [ebp+var_3C]
.text:00000313                 jb      short loc_325
.text:00000315                 ja      short loc_31F
.text:00000317                 mov     edx, [ebp+var_80]
.text:0000031A                 cmp     edx, [ebp+var_40]
.text:0000031D                 jbe     short loc_325
.text:0000031F
.text:0000031F loc_31F:                                ; CODE XREF: NCompress::NPpmdZip::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+1C5j
.text:0000031F                 mov     eax, [ebp+var_40]
.text:00000322                 mov     [ebp+var_38], eax
.text:00000325
.text:00000325 loc_325:                                ; CODE XREF: NCompress::NPpmdZip::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+19Cj
.text:00000325                                         ; NCompress::NPpmdZip::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+1C3j ...
.text:00000325                 mov     ecx, [ebp+this]
.text:00000328                 mov     edx, [ecx+30h]
.text:0000032B                 mov     [ebp+var_44], edx
.text:0000032E                 mov     [ebp+var_48], 0
.text:00000335                 mov     [ebp+var_4C], 0
.text:0000033C
.text:0000033C loc_33C:                                ; CODE XREF: NCompress::NPpmdZip::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+228j
.text:0000033C                 mov     eax, [ebp+this]
.text:0000033F                 add     eax, 34h ; '4'
.text:00000342                 push    eax
.text:00000343                 call    _Ppmd8_DecodeSymbol@4 ; Ppmd8_DecodeSymbol(x)
.text:00000348                 mov     [ebp+var_4C], eax
.text:0000034B                 mov     ecx, [ebp+this]
.text:0000034E                 movzx   edx, byte ptr [ecx+28h]
.text:00000352                 test    edx, edx
.text:00000354                 jnz     short loc_35C
.text:00000356                 cmp     [ebp+var_4C], 0
.text:0000035A                 jge     short loc_35E
.text:0000035C
.text:0000035C loc_35C:                                ; CODE XREF: NCompress::NPpmdZip::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+204j
.text:0000035C                 jmp     short loc_37A
.text:0000035E ; ---------------------------------------------------------------------------
.text:0000035E
.text:0000035E loc_35E:                                ; CODE XREF: NCompress::NPpmdZip::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+20Aj
.text:0000035E                 mov     eax, [ebp+var_44]
.text:00000361                 add     eax, [ebp+var_48]
.text:00000364                 mov     cl, byte ptr [ebp+var_4C]
.text:00000367                 mov     [eax], cl
.text:00000369                 mov     edx, [ebp+var_48]
.text:0000036C                 add     edx, 1
.text:0000036F                 mov     [ebp+var_48], edx
.text:00000372                 mov     eax, [ebp+var_48]
.text:00000375                 cmp     eax, [ebp+var_38]
.text:00000378                 jnz     short loc_33C
.text:0000037A
.text:0000037A loc_37A:                                ; CODE XREF: NCompress::NPpmdZip::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *):loc_35Cj
.text:0000037A                 mov     ecx, [ebp+var_48]
.text:0000037D                 xor     edx, edx
.text:0000037F                 add     ecx, [ebp+var_30]
.text:00000382                 adc     edx, [ebp+var_2C]
.text:00000385                 mov     [ebp+var_30], ecx
.text:00000388                 mov     [ebp+var_2C], edx
.text:0000038B                 mov     eax, [ebp+var_48]
.text:0000038E                 push    eax             ; unsigned int
.text:0000038F                 mov     ecx, [ebp+this]
.text:00000392                 mov     edx, [ecx+30h]
.text:00000395                 push    edx             ; void *
.text:00000396                 mov     eax, [ebp+arg_8]
.text:00000399                 push    eax             ; struct ISequentialOutStream *
.text:0000039A                 call    ?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z ; WriteStream(ISequentialOutStream *,void const *,uint)
.text:0000039F                 mov     [ebp+var_50], eax
.text:000003A2                 cmp     [ebp+var_50], 0
.text:000003A6                 jz      short loc_3B0
.text:000003A8                 mov     eax, [ebp+var_50]
.text:000003AB                 jmp     loc_4BB
.text:000003B0 ; ---------------------------------------------------------------------------
.text:000003B0
.text:000003B0 loc_3B0:                                ; CODE XREF: NCompress::NPpmdZip::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+256j
.text:000003B0                 mov     ecx, [ebp+this]
.text:000003B3                 mov     edx, [ecx+2Ch]
.text:000003B6                 mov     [ebp+var_54], edx
.text:000003B9                 cmp     [ebp+var_54], 0
.text:000003BD                 jz      short loc_3C7
.text:000003BF                 mov     eax, [ebp+var_54]
.text:000003C2                 jmp     loc_4BB
.text:000003C7 ; ---------------------------------------------------------------------------
.text:000003C7
.text:000003C7 loc_3C7:                                ; CODE XREF: NCompress::NPpmdZip::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+26Dj
.text:000003C7                 mov     eax, [ebp+this]
.text:000003CA                 movzx   ecx, byte ptr [eax+28h]
.text:000003CE                 test    ecx, ecx
.text:000003D0                 jz      short loc_3DC
.text:000003D2                 mov     eax, 1
.text:000003D7                 jmp     loc_4BB
.text:000003DC ; ---------------------------------------------------------------------------
.text:000003DC
.text:000003DC loc_3DC:                                ; CODE XREF: NCompress::NPpmdZip::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+280j
.text:000003DC                 cmp     [ebp+var_4C], 0
.text:000003E0                 jge     short loc_3F8
.text:000003E2                 cmp     [ebp+var_4C], 0FFFFFFFFh
.text:000003E6                 jz      short loc_3F2
.text:000003E8                 mov     eax, 1
.text:000003ED                 jmp     loc_4BB
.text:000003F2 ; ---------------------------------------------------------------------------
.text:000003F2
.text:000003F2 loc_3F2:                                ; CODE XREF: NCompress::NPpmdZip::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+296j
.text:000003F2                 mov     [ebp+var_21], 1
.text:000003F6                 jmp     short loc_441
.text:000003F8 ; ---------------------------------------------------------------------------
.text:000003F8
.text:000003F8 loc_3F8:                                ; CODE XREF: NCompress::NPpmdZip::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+290j
.text:000003F8                 cmp     [ebp+arg_14], 0
.text:000003FC                 jz      short loc_43C
.text:000003FE                 mov     ecx, [ebp+this]
.text:00000401                 add     ecx, 8          ; this
.text:00000404                 call    ?GetProcessed@CByteInBufWrap@@QBE_KXZ ; CByteInBufWrap::GetProcessed(void)
.text:00000409                 mov     [ebp+var_60], eax
.text:0000040C                 mov     [ebp+var_5C], edx
.text:0000040F                 mov     esi, esp
.text:00000411                 lea     edx, [ebp+var_30]
.text:00000414                 push    edx
.text:00000415                 lea     eax, [ebp+var_60]
.text:00000418                 push    eax
.text:00000419                 mov     ecx, [ebp+arg_14]
.text:0000041C                 mov     edx, [ecx]
.text:0000041E                 mov     eax, [ebp+arg_14]
.text:00000421                 push    eax
.text:00000422                 mov     ecx, [edx+0Ch]
.text:00000425                 call    ecx
.text:00000427                 cmp     esi, esp
.text:00000429                 call    __RTC_CheckEsp
.text:0000042E                 mov     [ebp+var_68], eax
.text:00000431                 cmp     [ebp+var_68], 0
.text:00000435                 jz      short loc_43C
.text:00000437                 mov     eax, [ebp+var_68]
.text:0000043A                 jmp     short loc_4BB
.text:0000043C ; ---------------------------------------------------------------------------
.text:0000043C
.text:0000043C loc_43C:                                ; CODE XREF: NCompress::NPpmdZip::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+2ACj
.text:0000043C                                         ; NCompress::NPpmdZip::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+2E5j
.text:0000043C                 jmp     loc_2B6
.text:00000441 ; ---------------------------------------------------------------------------
.text:00000441
.text:00000441 loc_441:                                ; CODE XREF: NCompress::NPpmdZip::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+17Bj
.text:00000441                                         ; NCompress::NPpmdZip::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+18Bj ...
.text:00000441                 mov     edx, [ebp+this]
.text:00000444                 mov     eax, [edx+2Ch]
.text:00000447                 mov     [ebp+var_6C], eax
.text:0000044A                 cmp     [ebp+var_6C], 0
.text:0000044E                 jz      short loc_455
.text:00000450                 mov     eax, [ebp+var_6C]
.text:00000453                 jmp     short loc_4BB
.text:00000455 ; ---------------------------------------------------------------------------
.text:00000455
.text:00000455 loc_455:                                ; CODE XREF: NCompress::NPpmdZip::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+2FEj
.text:00000455                 mov     ecx, [ebp+this]
.text:00000458                 movzx   edx, byte ptr [ecx+1CECh]
.text:0000045F                 test    edx, edx
.text:00000461                 jz      short loc_4B9
.text:00000463                 movzx   eax, [ebp+var_21]
.text:00000467                 test    eax, eax
.text:00000469                 jnz     short loc_4A6
.text:0000046B                 mov     ecx, [ebp+this]
.text:0000046E                 add     ecx, 34h ; '4'
.text:00000471                 push    ecx
.text:00000472                 call    _Ppmd8_DecodeSymbol@4 ; Ppmd8_DecodeSymbol(x)
.text:00000477                 mov     [ebp+var_70], eax
.text:0000047A                 mov     edx, [ebp+this]
.text:0000047D                 mov     eax, [edx+2Ch]
.text:00000480                 mov     [ebp+var_74], eax
.text:00000483                 cmp     [ebp+var_74], 0
.text:00000487                 jz      short loc_48E
.text:00000489                 mov     eax, [ebp+var_74]
.text:0000048C                 jmp     short loc_4BB
.text:0000048E ; ---------------------------------------------------------------------------
.text:0000048E
.text:0000048E loc_48E:                                ; CODE XREF: NCompress::NPpmdZip::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+337j
.text:0000048E                 mov     ecx, [ebp+this]
.text:00000491                 movzx   edx, byte ptr [ecx+28h]
.text:00000495                 test    edx, edx
.text:00000497                 jnz     short loc_49F
.text:00000499                 cmp     [ebp+var_70], 0FFFFFFFFh
.text:0000049D                 jz      short loc_4A6
.text:0000049F
.text:0000049F loc_49F:                                ; CODE XREF: NCompress::NPpmdZip::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+347j
.text:0000049F                 mov     eax, 1
.text:000004A4                 jmp     short loc_4BB
.text:000004A6 ; ---------------------------------------------------------------------------
.text:000004A6
.text:000004A6 loc_4A6:                                ; CODE XREF: NCompress::NPpmdZip::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+319j
.text:000004A6                                         ; NCompress::NPpmdZip::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+34Dj
.text:000004A6                 mov     eax, [ebp+this]
.text:000004A9                 cmp     dword ptr [eax+80h], 0
.text:000004B0                 jz      short loc_4B9
.text:000004B2                 mov     eax, 1
.text:000004B7                 jmp     short loc_4BB
.text:000004B9 ; ---------------------------------------------------------------------------
.text:000004B9
.text:000004B9 loc_4B9:                                ; CODE XREF: NCompress::NPpmdZip::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+311j
.text:000004B9                                         ; NCompress::NPpmdZip::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+360j
.text:000004B9                 xor     eax, eax
.text:000004BB
.text:000004BB loc_4BB:                                ; CODE XREF: NCompress::NPpmdZip::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+31j
.text:000004BB                                         ; NCompress::NPpmdZip::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+52j ...
.text:000004BB                 push    edx
.text:000004BC                 mov     ecx, ebp
.text:000004BE                 push    eax
.text:000004BF                 lea     edx, $LN44
.text:000004C5                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000004CA                 pop     eax
.text:000004CB                 pop     edx
.text:000004CC                 pop     edi
.text:000004CD                 pop     esi
.text:000004CE                 add     esp, 80h
.text:000004D4                 cmp     ebp, esp
.text:000004D6                 call    __RTC_CheckEsp
.text:000004DB                 mov     esp, ebp
.text:000004DD                 pop     ebp
.text:000004DE                 retn    18h
.text:000004DE ?Code@CDecoder@NPpmdZip@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z endp
.text:000004DE
.text:000004DE ; ---------------------------------------------------------------------------
.text:000004E1                 align 4
.text:000004E4 $LN44           dd 3                    ; DATA XREF: NCompress::NPpmdZip::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+36Fo
.text:000004E8                 dd offset $LN43
.text:000004EC $LN43           dd 0FFFFFFF8h, 2        ; DATA XREF: .text:000004E8o
.text:000004F4                 dd offset $LN40         ; "buf"
.text:000004F8                 dd 0FFFFFFD0h, 8
.text:00000500                 dd offset $LN41         ; "processedSize"
.text:00000504                 dd 0FFFFFFA0h, 8
.text:0000050C                 dd offset $LN42         ; "inSize"
.text:00000510 $LN42           db 'inSize',0           ; DATA XREF: .text:0000050Co
.text:00000517 $LN41           db 'processedSize',0    ; DATA XREF: .text:00000500o
.text:00000525 $LN40           db 'buf',0              ; DATA XREF: .text:000004F4o
.text:00000529                 align 10h
.text:00000530
.text:00000530 ; =============== S U B R O U T I N E =======================================
.text:00000530
.text:00000530 ; Attributes: bp-based frame
.text:00000530
.text:00000530 ; void __thiscall NCompress::NPpmdZip::CEncProps::Normalize(NCompress::NPpmdZip::CEncProps *this, int)
.text:00000530                 public ?Normalize@CEncProps@NPpmdZip@NCompress@@QAEXH@Z
.text:00000530 ?Normalize@CEncProps@NPpmdZip@NCompress@@QAEXH@Z proc near
.text:00000530                                         ; CODE XREF: NCompress::NPpmdZip::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+152p
.text:00000530                                         ; NCompress::NPpmdZip::CEncoder::CEncoder(void)+98p
.text:00000530
.text:00000530 var_10          = dword ptr -10h
.text:00000530 var_C           = dword ptr -0Ch
.text:00000530 var_8           = dword ptr -8
.text:00000530 var_4           = dword ptr -4
.text:00000530 arg_0           = dword ptr  8
.text:00000530
.text:00000530                 push    ebp
.text:00000531                 mov     ebp, esp
.text:00000533                 sub     esp, 10h
.text:00000536                 mov     eax, 0CCCCCCCCh
.text:0000053B                 mov     [ebp+var_10], eax
.text:0000053E                 mov     [ebp+var_C], eax
.text:00000541                 mov     [ebp+var_8], eax
.text:00000544                 mov     [ebp+var_4], eax
.text:00000547                 mov     [ebp+var_4], ecx
.text:0000054A                 cmp     [ebp+arg_0], 0
.text:0000054E                 jge     short loc_557
.text:00000550                 mov     [ebp+arg_0], 5
.text:00000557
.text:00000557 loc_557:                                ; CODE XREF: NCompress::NPpmdZip::CEncProps::Normalize(int)+1Ej
.text:00000557                 cmp     [ebp+arg_0], 0
.text:0000055B                 jnz     short loc_564
.text:0000055D                 mov     [ebp+arg_0], 1
.text:00000564
.text:00000564 loc_564:                                ; CODE XREF: NCompress::NPpmdZip::CEncProps::Normalize(int)+2Bj
.text:00000564                 cmp     [ebp+arg_0], 9
.text:00000568                 jle     short loc_571
.text:0000056A                 mov     [ebp+arg_0], 9
.text:00000571
.text:00000571 loc_571:                                ; CODE XREF: NCompress::NPpmdZip::CEncProps::Normalize(int)+38j
.text:00000571                 mov     eax, [ebp+var_4]
.text:00000574                 cmp     dword ptr [eax], 0FFFFFFFFh
.text:00000577                 jnz     short loc_5A0
.text:00000579                 cmp     [ebp+arg_0], 8
.text:0000057D                 jle     short loc_588
.text:0000057F                 mov     [ebp+var_10], 8
.text:00000586                 jmp     short loc_58E
.text:00000588 ; ---------------------------------------------------------------------------
.text:00000588
.text:00000588 loc_588:                                ; CODE XREF: NCompress::NPpmdZip::CEncProps::Normalize(int)+4Dj
.text:00000588                 mov     ecx, [ebp+arg_0]
.text:0000058B                 mov     [ebp+var_10], ecx
.text:0000058E
.text:0000058E loc_58E:                                ; CODE XREF: NCompress::NPpmdZip::CEncProps::Normalize(int)+56j
.text:0000058E                 mov     ecx, [ebp+var_10]
.text:00000591                 sub     ecx, 1
.text:00000594                 mov     edx, 1
.text:00000599                 shl     edx, cl
.text:0000059B                 mov     eax, [ebp+var_4]
.text:0000059E                 mov     [eax], edx
.text:000005A0
.text:000005A0 loc_5A0:                                ; CODE XREF: NCompress::NPpmdZip::CEncProps::Normalize(int)+47j
.text:000005A0                 mov     [ebp+var_8], 10h
.text:000005A7                 mov     ecx, [ebp+var_4]
.text:000005AA                 mov     edx, [ecx]
.text:000005AC                 shl     edx, 14h
.text:000005AF                 shr     edx, 4
.text:000005B2                 mov     eax, [ebp+var_4]
.text:000005B5                 cmp     edx, [eax+4]
.text:000005B8                 jbe     short loc_601
.text:000005BA                 mov     [ebp+var_C], 100000h
.text:000005C1                 jmp     short loc_5CB
.text:000005C3 ; ---------------------------------------------------------------------------
.text:000005C3
.text:000005C3 loc_5C3:                                ; CODE XREF: NCompress::NPpmdZip::CEncProps::Normalize(int):loc_5FFj
.text:000005C3                 mov     ecx, [ebp+var_C]
.text:000005C6                 shl     ecx, 1
.text:000005C8                 mov     [ebp+var_C], ecx
.text:000005CB
.text:000005CB loc_5CB:                                ; CODE XREF: NCompress::NPpmdZip::CEncProps::Normalize(int)+91j
.text:000005CB                 cmp     [ebp+var_C], 10000000h
.text:000005D2                 ja      short loc_601
.text:000005D4                 mov     edx, [ebp+var_C]
.text:000005D7                 shr     edx, 4
.text:000005DA                 mov     eax, [ebp+var_4]
.text:000005DD                 cmp     [eax+4], edx
.text:000005E0                 ja      short loc_5FF
.text:000005E2                 mov     ecx, [ebp+var_C]
.text:000005E5                 shr     ecx, 14h
.text:000005E8                 mov     [ebp+var_C], ecx
.text:000005EB                 mov     edx, [ebp+var_4]
.text:000005EE                 mov     eax, [edx]
.text:000005F0                 cmp     eax, [ebp+var_C]
.text:000005F3                 jbe     short loc_5FD
.text:000005F5                 mov     ecx, [ebp+var_4]
.text:000005F8                 mov     edx, [ebp+var_C]
.text:000005FB                 mov     [ecx], edx
.text:000005FD
.text:000005FD loc_5FD:                                ; CODE XREF: NCompress::NPpmdZip::CEncProps::Normalize(int)+C3j
.text:000005FD                 jmp     short loc_601
.text:000005FF ; ---------------------------------------------------------------------------
.text:000005FF
.text:000005FF loc_5FF:                                ; CODE XREF: NCompress::NPpmdZip::CEncProps::Normalize(int)+B0j
.text:000005FF                 jmp     short loc_5C3
.text:00000601 ; ---------------------------------------------------------------------------
.text:00000601
.text:00000601 loc_601:                                ; CODE XREF: NCompress::NPpmdZip::CEncProps::Normalize(int)+88j
.text:00000601                                         ; NCompress::NPpmdZip::CEncProps::Normalize(int)+A2j ...
.text:00000601                 mov     eax, [ebp+var_4]
.text:00000604                 cmp     dword ptr [eax+8], 0FFFFFFFFh
.text:00000608                 jnz     short loc_616
.text:0000060A                 mov     ecx, [ebp+arg_0]
.text:0000060D                 add     ecx, 3
.text:00000610                 mov     edx, [ebp+var_4]
.text:00000613                 mov     [edx+8], ecx
.text:00000616
.text:00000616 loc_616:                                ; CODE XREF: NCompress::NPpmdZip::CEncProps::Normalize(int)+D8j
.text:00000616                 mov     eax, [ebp+var_4]
.text:00000619                 cmp     dword ptr [eax+0Ch], 0FFFFFFFFh
.text:0000061D                 jnz     short loc_62E
.text:0000061F                 xor     ecx, ecx
.text:00000621                 cmp     [ebp+arg_0], 7
.text:00000625                 setnl   cl
.text:00000628                 mov     edx, [ebp+var_4]
.text:0000062B                 mov     [edx+0Ch], ecx
.text:0000062E
.text:0000062E loc_62E:                                ; CODE XREF: NCompress::NPpmdZip::CEncProps::Normalize(int)+EDj
.text:0000062E                 mov     esp, ebp
.text:00000630                 pop     ebp
.text:00000631                 retn    4
.text:00000631 ?Normalize@CEncProps@NPpmdZip@NCompress@@QAEXH@Z endp
.text:00000631
.text:00000631 ; ---------------------------------------------------------------------------
.text:00000634                 align 10h
.text:00000640
.text:00000640 ; =============== S U B R O U T I N E =======================================
.text:00000640
.text:00000640 ; Attributes: bp-based frame
.text:00000640
.text:00000640 ; _DWORD __thiscall NCompress::NPpmdZip::CEncoder::~CEncoder(NCompress::NPpmdZip::CEncoder *__hidden this)
.text:00000640                 public ??1CEncoder@NPpmdZip@NCompress@@QAE@XZ
.text:00000640 ??1CEncoder@NPpmdZip@NCompress@@QAE@XZ proc near
.text:00000640                                         ; CODE XREF: NCompress::NPpmdZip::CEncoder::`scalar deleting destructor'(uint)+11p
.text:00000640
.text:00000640 var_10          = dword ptr -10h
.text:00000640 var_C           = dword ptr -0Ch
.text:00000640 var_4           = dword ptr -4
.text:00000640
.text:00000640                 push    ebp
.text:00000641                 mov     ebp, esp
.text:00000643                 push    0FFFFFFFFh
.text:00000645                 push    offset __ehhandler$??1CEncoder@NPpmdZip@NCompress@@QAE@XZ
.text:0000064A                 mov     eax, large fs:0
.text:00000650                 push    eax
.text:00000651                 push    ecx
.text:00000652                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000659                 mov     eax, dword ptr ds:___security_cookie
.text:0000065E                 xor     eax, ebp
.text:00000660                 push    eax
.text:00000661                 lea     eax, [ebp+var_C]
.text:00000664                 mov     large fs:0, eax
.text:0000066A                 mov     [ebp+var_10], ecx
.text:0000066D                 mov     eax, [ebp+var_10]
.text:00000670                 mov     dword ptr [eax], offset ??_7CEncoder@NPpmdZip@NCompress@@6BICompressCoder@@@ ; const NCompress::NPpmdZip::CEncoder::`vftable'{for `ICompressCoder'}
.text:00000676                 mov     ecx, [ebp+var_10]
.text:00000679                 mov     dword ptr [ecx+4], offset ??_7CEncoder@NPpmdZip@NCompress@@6BICompressSetCoderProperties@@@ ; const NCompress::NPpmdZip::CEncoder::`vftable'{for `ICompressSetCoderProperties'}
.text:00000680                 mov     [ebp+var_4], 0
.text:00000687                 push    offset _g_BigAlloc
.text:0000068C                 mov     edx, [ebp+var_10]
.text:0000068F                 add     edx, 3Ch ; '<'
.text:00000692                 push    edx
.text:00000693                 call    _Ppmd8_Free@8   ; Ppmd8_Free(x,x)
.text:00000698                 mov     ecx, [ebp+var_10]
.text:0000069B                 add     ecx, 38h ; '8'  ; this
.text:0000069E                 call    ??1CBuf@NPpmdZip@NCompress@@QAE@XZ ; NCompress::NPpmdZip::CBuf::~CBuf(void)
.text:000006A3                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000006AA                 mov     ecx, [ebp+var_10]
.text:000006AD                 add     ecx, 10h        ; this
.text:000006B0                 call    ??1CByteOutBufWrap@@QAE@XZ ; CByteOutBufWrap::~CByteOutBufWrap(void)
.text:000006B5                 mov     ecx, [ebp+var_C]
.text:000006B8                 mov     large fs:0, ecx
.text:000006BF                 pop     ecx
.text:000006C0                 add     esp, 10h
.text:000006C3                 cmp     ebp, esp
.text:000006C5                 call    __RTC_CheckEsp
.text:000006CA                 mov     esp, ebp
.text:000006CC                 pop     ebp
.text:000006CD                 retn
.text:000006CD ??1CEncoder@NPpmdZip@NCompress@@QAE@XZ endp
.text:000006CD
.text:000006CD ; ---------------------------------------------------------------------------
.text:000006CE                 align 10h
.text:000006D0
.text:000006D0 ; =============== S U B R O U T I N E =======================================
.text:000006D0
.text:000006D0 ; Attributes: bp-based frame
.text:000006D0
.text:000006D0 ; __int32 __stdcall NCompress::NPpmdZip::CEncoder::SetCoderProperties(NCompress::NPpmdZip::CEncoder *this, const unsigned __int32 *, const struct tagPROPVARIANT *, unsigned int)
.text:000006D0                 public ?SetCoderProperties@CEncoder@NPpmdZip@NCompress@@UAGJPBKPBUtagPROPVARIANT@@I@Z
.text:000006D0 ?SetCoderProperties@CEncoder@NPpmdZip@NCompress@@UAGJPBKPBUtagPROPVARIANT@@I@Z proc near
.text:000006D0                                         ; DATA XREF: .rdata:000012E0o
.text:000006D0
.text:000006D0 var_34          = dword ptr -34h
.text:000006D0 var_30          = dword ptr -30h
.text:000006D0 var_2C          = dword ptr -2Ch
.text:000006D0 var_28          = dword ptr -28h
.text:000006D0 var_24          = dword ptr -24h
.text:000006D0 var_20          = dword ptr -20h
.text:000006D0 var_18          = dword ptr -18h
.text:000006D0 var_14          = dword ptr -14h
.text:000006D0 var_10          = dword ptr -10h
.text:000006D0 var_C           = dword ptr -0Ch
.text:000006D0 var_4           = dword ptr -4
.text:000006D0 this            = dword ptr  8
.text:000006D0 arg_4           = dword ptr  0Ch
.text:000006D0 arg_8           = dword ptr  10h
.text:000006D0 arg_C           = dword ptr  14h
.text:000006D0
.text:000006D0                 push    ebp
.text:000006D1                 mov     ebp, esp
.text:000006D3                 sub     esp, 34h
.text:000006D6                 push    edi
.text:000006D7                 lea     edi, [ebp+var_34]
.text:000006DA                 mov     ecx, 0Dh
.text:000006DF                 mov     eax, 0CCCCCCCCh
.text:000006E4                 rep stosd
.text:000006E6                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000006ED                 lea     ecx, [ebp+var_18] ; this
.text:000006F0                 call    ??0CEncProps@NPpmdZip@NCompress@@QAE@XZ ; NCompress::NPpmdZip::CEncProps::CEncProps(void)
.text:000006F5                 mov     [ebp+var_20], 0
.text:000006FC                 jmp     short loc_707
.text:000006FE ; ---------------------------------------------------------------------------
.text:000006FE
.text:000006FE loc_6FE:                                ; CODE XREF: NCompress::NPpmdZip::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+61j
.text:000006FE                                         ; NCompress::NPpmdZip::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint):loc_767j ...
.text:000006FE                 mov     eax, [ebp+var_20]
.text:00000701                 add     eax, 1
.text:00000704                 mov     [ebp+var_20], eax
.text:00000707
.text:00000707 loc_707:                                ; CODE XREF: NCompress::NPpmdZip::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+2Cj
.text:00000707                 mov     ecx, [ebp+var_20]
.text:0000070A                 cmp     ecx, [ebp+arg_C]
.text:0000070D                 jnb     loc_81B
.text:00000713                 mov     edx, [ebp+var_20]
.text:00000716                 shl     edx, 4
.text:00000719                 add     edx, [ebp+arg_8]
.text:0000071C                 mov     [ebp+var_24], edx
.text:0000071F                 mov     eax, [ebp+var_20]
.text:00000722                 mov     ecx, [ebp+arg_4]
.text:00000725                 mov     edx, [ecx+eax*4]
.text:00000728                 mov     [ebp+var_28], edx
.text:0000072B                 cmp     [ebp+var_28], 10h
.text:0000072F                 jbe     short loc_733
.text:00000731                 jmp     short loc_6FE
.text:00000733 ; ---------------------------------------------------------------------------
.text:00000733
.text:00000733 loc_733:                                ; CODE XREF: NCompress::NPpmdZip::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+5Fj
.text:00000733                 cmp     [ebp+var_28], 10h
.text:00000737                 jnz     short loc_769
.text:00000739                 mov     eax, [ebp+var_24]
.text:0000073C                 movzx   ecx, word ptr [eax]
.text:0000073F                 cmp     ecx, 15h
.text:00000742                 jnz     short loc_767
.text:00000744                 mov     edx, [ebp+var_24]
.text:00000747                 mov     [ebp+var_30], edx
.text:0000074A                 mov     eax, [ebp+var_30]
.text:0000074D                 cmp     dword ptr [eax+0Ch], 0
.text:00000751                 ja      short loc_767
.text:00000753                 jb      short loc_75E
.text:00000755                 mov     ecx, [ebp+var_30]
.text:00000758                 cmp     dword ptr [ecx+8], 0FFFFFFFFh
.text:0000075C                 jnb     short loc_767
.text:0000075E
.text:0000075E loc_75E:                                ; CODE XREF: NCompress::NPpmdZip::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+83j
.text:0000075E                 mov     edx, [ebp+var_24]
.text:00000761                 mov     eax, [edx+8]
.text:00000764                 mov     [ebp+var_14], eax
.text:00000767
.text:00000767 loc_767:                                ; CODE XREF: NCompress::NPpmdZip::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+72j
.text:00000767                                         ; NCompress::NPpmdZip::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+81j ...
.text:00000767                 jmp     short loc_6FE
.text:00000769 ; ---------------------------------------------------------------------------
.text:00000769
.text:00000769 loc_769:                                ; CODE XREF: NCompress::NPpmdZip::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+67j
.text:00000769                 mov     ecx, [ebp+var_24]
.text:0000076C                 movzx   edx, word ptr [ecx]
.text:0000076F                 cmp     edx, 13h
.text:00000772                 jz      short loc_77E
.text:00000774                 mov     eax, 80070057h
.text:00000779                 jmp     loc_849
.text:0000077E ; ---------------------------------------------------------------------------
.text:0000077E
.text:0000077E loc_77E:                                ; CODE XREF: NCompress::NPpmdZip::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+A2j
.text:0000077E                 mov     eax, [ebp+var_24]
.text:00000781                 mov     ecx, [eax+8]
.text:00000784                 mov     [ebp+var_2C], ecx
.text:00000787                 mov     edx, [ebp+var_28]
.text:0000078A                 mov     [ebp+var_34], edx
.text:0000078D                 mov     eax, [ebp+var_34]
.text:00000790                 sub     eax, 2
.text:00000793                 mov     [ebp+var_34], eax
.text:00000796                 cmp     [ebp+var_34], 0Dh ; switch 14 cases
.text:0000079A                 ja      short $LN1      ; jumptable 000007A6 default case
.text:0000079C                 mov     ecx, [ebp+var_34]
.text:0000079F                 movzx   edx, ds:$LN24[ecx]
.text:000007A6                 jmp     ds:$LN28[edx*4] ; switch jump
.text:000007AD ; ---------------------------------------------------------------------------
.text:000007AD
.text:000007AD $LN11:                                  ; CODE XREF: NCompress::NPpmdZip::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+D6j
.text:000007AD                                         ; DATA XREF: .text:$LN28o
.text:000007AD                 cmp     [ebp+var_2C], 100000h ; jumptable 000007A6 case 0
.text:000007B4                 jb      short loc_7BF
.text:000007B6                 cmp     [ebp+var_2C], 10000000h
.text:000007BD                 jbe     short loc_7C9
.text:000007BF
.text:000007BF loc_7BF:                                ; CODE XREF: NCompress::NPpmdZip::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+E4j
.text:000007BF                 mov     eax, 80070057h
.text:000007C4                 jmp     loc_849
.text:000007C9 ; ---------------------------------------------------------------------------
.text:000007C9
.text:000007C9 loc_7C9:                                ; CODE XREF: NCompress::NPpmdZip::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+EDj
.text:000007C9                 mov     eax, [ebp+var_2C]
.text:000007CC                 shr     eax, 14h
.text:000007CF                 mov     [ebp+var_18], eax
.text:000007D2                 jmp     short loc_816
.text:000007D4 ; ---------------------------------------------------------------------------
.text:000007D4
.text:000007D4 $LN8:                                   ; CODE XREF: NCompress::NPpmdZip::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+D6j
.text:000007D4                                         ; DATA XREF: .text:$LN28o
.text:000007D4                 cmp     [ebp+var_2C], 2 ; jumptable 000007A6 case 1
.text:000007D8                 jb      short loc_7E0
.text:000007DA                 cmp     [ebp+var_2C], 10h
.text:000007DE                 jbe     short loc_7E7
.text:000007E0
.text:000007E0 loc_7E0:                                ; CODE XREF: NCompress::NPpmdZip::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+108j
.text:000007E0                 mov     eax, 80070057h
.text:000007E5                 jmp     short loc_849
.text:000007E7 ; ---------------------------------------------------------------------------
.text:000007E7
.text:000007E7 loc_7E7:                                ; CODE XREF: NCompress::NPpmdZip::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+10Ej
.text:000007E7                 movzx   ecx, byte ptr [ebp+var_2C]
.text:000007EB                 mov     [ebp+var_10], ecx
.text:000007EE                 jmp     short loc_816
.text:000007F0 ; ---------------------------------------------------------------------------
.text:000007F0
.text:000007F0 $LN5:                                   ; CODE XREF: NCompress::NPpmdZip::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+D6j
.text:000007F0                                         ; DATA XREF: .text:$LN28o
.text:000007F0                 jmp     short loc_816   ; jumptable 000007A6 case 11
.text:000007F2 ; ---------------------------------------------------------------------------
.text:000007F2
.text:000007F2 $LN4:                                   ; CODE XREF: NCompress::NPpmdZip::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+D6j
.text:000007F2                                         ; DATA XREF: .text:$LN28o
.text:000007F2                 mov     edx, [ebp+var_2C] ; jumptable 000007A6 case 13
.text:000007F5                 mov     [ebp+var_4], edx
.text:000007F8                 jmp     short loc_816
.text:000007FA ; ---------------------------------------------------------------------------
.text:000007FA
.text:000007FA $LN3:                                   ; CODE XREF: NCompress::NPpmdZip::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+D6j
.text:000007FA                                         ; DATA XREF: .text:$LN28o
.text:000007FA                 cmp     [ebp+var_2C], 1 ; jumptable 000007A6 case 10
.text:000007FE                 jbe     short loc_807
.text:00000800                 mov     eax, 80070057h
.text:00000805                 jmp     short loc_849
.text:00000807 ; ---------------------------------------------------------------------------
.text:00000807
.text:00000807 loc_807:                                ; CODE XREF: NCompress::NPpmdZip::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+12Ej
.text:00000807                 mov     eax, [ebp+var_2C]
.text:0000080A                 mov     [ebp+var_C], eax
.text:0000080D                 jmp     short loc_816
.text:0000080F ; ---------------------------------------------------------------------------
.text:0000080F
.text:0000080F $LN1:                                   ; CODE XREF: NCompress::NPpmdZip::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+CAj
.text:0000080F                                         ; NCompress::NPpmdZip::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+D6j
.text:0000080F                                         ; DATA XREF: ...
.text:0000080F                 mov     eax, 80070057h  ; jumptable 000007A6 default case
.text:00000814                 jmp     short loc_849
.text:00000816 ; ---------------------------------------------------------------------------
.text:00000816
.text:00000816 loc_816:                                ; CODE XREF: NCompress::NPpmdZip::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+102j
.text:00000816                                         ; NCompress::NPpmdZip::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+11Ej ...
.text:00000816                 jmp     loc_6FE
.text:0000081B ; ---------------------------------------------------------------------------
.text:0000081B
.text:0000081B loc_81B:                                ; CODE XREF: NCompress::NPpmdZip::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+3Dj
.text:0000081B                 mov     ecx, [ebp+var_4]
.text:0000081E                 push    ecx             ; int
.text:0000081F                 lea     ecx, [ebp+var_18] ; this
.text:00000822                 call    ?Normalize@CEncProps@NPpmdZip@NCompress@@QAEXH@Z ; NCompress::NPpmdZip::CEncProps::Normalize(int)
.text:00000827                 mov     edx, [ebp+this]
.text:0000082A                 add     edx, 1CF0h
.text:00000830                 mov     eax, [ebp+var_18]
.text:00000833                 mov     [edx], eax
.text:00000835                 mov     ecx, [ebp+var_14]
.text:00000838                 mov     [edx+4], ecx
.text:0000083B                 mov     eax, [ebp+var_10]
.text:0000083E                 mov     [edx+8], eax
.text:00000841                 mov     ecx, [ebp+var_C]
.text:00000844                 mov     [edx+0Ch], ecx
.text:00000847                 xor     eax, eax
.text:00000849
.text:00000849 loc_849:                                ; CODE XREF: NCompress::NPpmdZip::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+A9j
.text:00000849                                         ; NCompress::NPpmdZip::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+F4j ...
.text:00000849                 push    edx
.text:0000084A                 mov     ecx, ebp
.text:0000084C                 push    eax
.text:0000084D                 lea     edx, $LN27
.text:00000853                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000858                 pop     eax
.text:00000859                 pop     edx
.text:0000085A                 pop     edi
.text:0000085B                 add     esp, 34h
.text:0000085E                 cmp     ebp, esp
.text:00000860                 call    __RTC_CheckEsp
.text:00000865                 mov     esp, ebp
.text:00000867                 pop     ebp
.text:00000868                 retn    10h
.text:00000868 ?SetCoderProperties@CEncoder@NPpmdZip@NCompress@@UAGJPBKPBUtagPROPVARIANT@@I@Z endp
.text:00000868
.text:00000868 ; ---------------------------------------------------------------------------
.text:0000086B                 align 4
.text:0000086C $LN27           dd 1                    ; DATA XREF: NCompress::NPpmdZip::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+17Do
.text:00000870                 dd offset $LN26
.text:00000874 $LN26           dd 0FFFFFFE8h, 10h      ; DATA XREF: .text:00000870o
.text:0000087C                 dd offset $LN25         ; "props"
.text:00000880 $LN25           db 'props',0            ; DATA XREF: .text:0000087Co
.text:00000886                 align 4
.text:00000888 $LN28           dd offset $LN11         ; DATA XREF: NCompress::NPpmdZip::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+D6r
.text:00000888                 dd offset $LN8          ; jump table for switch statement
.text:00000888                 dd offset $LN3
.text:00000888                 dd offset $LN5
.text:00000888                 dd offset $LN4
.text:00000888                 dd offset $LN1
.text:000008A0 $LN24           db      0,     1,     5,     5
.text:000008A0                                         ; DATA XREF: NCompress::NPpmdZip::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+CFr
.text:000008A0                 db      5,     5,     5,     5 ; indirect table for switch statement
.text:000008A0                 db      5,     5,     2,     3
.text:000008A0                 db      5,     4
.text:000008AE                 align 10h
.text:000008B0
.text:000008B0 ; =============== S U B R O U T I N E =======================================
.text:000008B0
.text:000008B0 ; Attributes: bp-based frame
.text:000008B0
.text:000008B0 ; _DWORD __thiscall NCompress::NPpmdZip::CEncoder::CEncoder(NCompress::NPpmdZip::CEncoder *__hidden this)
.text:000008B0                 public ??0CEncoder@NPpmdZip@NCompress@@QAE@XZ
.text:000008B0 ??0CEncoder@NPpmdZip@NCompress@@QAE@XZ proc near
.text:000008B0
.text:000008B0 var_10          = dword ptr -10h
.text:000008B0 var_C           = dword ptr -0Ch
.text:000008B0 var_4           = dword ptr -4
.text:000008B0
.text:000008B0                 push    ebp
.text:000008B1                 mov     ebp, esp
.text:000008B3                 push    0FFFFFFFFh
.text:000008B5                 push    offset __ehhandler$??0CEncoder@NPpmdZip@NCompress@@QAE@XZ
.text:000008BA                 mov     eax, large fs:0
.text:000008C0                 push    eax
.text:000008C1                 push    ecx
.text:000008C2                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000008C9                 mov     eax, dword ptr ds:___security_cookie
.text:000008CE                 xor     eax, ebp
.text:000008D0                 push    eax
.text:000008D1                 lea     eax, [ebp+var_C]
.text:000008D4                 mov     large fs:0, eax
.text:000008DA                 mov     [ebp+var_10], ecx
.text:000008DD                 mov     ecx, [ebp+var_10] ; this
.text:000008E0                 call    ??0ICompressCoder@@QAE@XZ ; ICompressCoder::ICompressCoder(void)
.text:000008E5                 mov     ecx, [ebp+var_10]
.text:000008E8                 add     ecx, 4          ; this
.text:000008EB                 call    ??0ICompressSetCoderProperties@@QAE@XZ ; ICompressSetCoderProperties::ICompressSetCoderProperties(void)
.text:000008F0                 mov     ecx, [ebp+var_10]
.text:000008F3                 add     ecx, 8          ; this
.text:000008F6                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:000008FB                 mov     eax, [ebp+var_10]
.text:000008FE                 mov     dword ptr [eax], offset ??_7CEncoder@NPpmdZip@NCompress@@6BICompressCoder@@@ ; const NCompress::NPpmdZip::CEncoder::`vftable'{for `ICompressCoder'}
.text:00000904                 mov     ecx, [ebp+var_10]
.text:00000907                 mov     dword ptr [ecx+4], offset ??_7CEncoder@NPpmdZip@NCompress@@6BICompressSetCoderProperties@@@ ; const NCompress::NPpmdZip::CEncoder::`vftable'{for `ICompressSetCoderProperties'}
.text:0000090E                 mov     ecx, [ebp+var_10]
.text:00000911                 add     ecx, 10h
.text:00000914                 call    ??0CByteOutBufWrap@@QAE@XZ ; CByteOutBufWrap::CByteOutBufWrap(void)
.text:00000919                 mov     [ebp+var_4], 0
.text:00000920                 mov     ecx, [ebp+var_10]
.text:00000923                 add     ecx, 38h ; '8'  ; this
.text:00000926                 call    ??0CBuf@NPpmdZip@NCompress@@QAE@XZ ; NCompress::NPpmdZip::CBuf::CBuf(void)
.text:0000092B                 mov     byte ptr [ebp+var_4], 1
.text:0000092F                 mov     ecx, [ebp+var_10]
.text:00000932                 add     ecx, 1CF4h      ; this
.text:00000938                 call    ??0CEncProps@NPpmdZip@NCompress@@QAE@XZ ; NCompress::NPpmdZip::CEncProps::CEncProps(void)
.text:0000093D                 push    0FFFFFFFFh      ; int
.text:0000093F                 mov     ecx, [ebp+var_10]
.text:00000942                 add     ecx, 1CF4h      ; this
.text:00000948                 call    ?Normalize@CEncProps@NPpmdZip@NCompress@@QAEXH@Z ; NCompress::NPpmdZip::CEncProps::Normalize(int)
.text:0000094D                 mov     edx, [ebp+var_10]
.text:00000950                 add     edx, 10h
.text:00000953                 mov     eax, [ebp+var_10]
.text:00000956                 mov     [eax+90h], edx
.text:0000095C                 mov     ecx, [ebp+var_10]
.text:0000095F                 add     ecx, 3Ch ; '<'
.text:00000962                 push    ecx
.text:00000963                 call    _Ppmd8_Construct@4 ; Ppmd8_Construct(x)
.text:00000968                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000096F                 mov     eax, [ebp+var_10]
.text:00000972                 mov     ecx, [ebp+var_C]
.text:00000975                 mov     large fs:0, ecx
.text:0000097C                 pop     ecx
.text:0000097D                 add     esp, 10h
.text:00000980                 cmp     ebp, esp
.text:00000982                 call    __RTC_CheckEsp
.text:00000987                 mov     esp, ebp
.text:00000989                 pop     ebp
.text:0000098A                 retn
.text:0000098A ??0CEncoder@NPpmdZip@NCompress@@QAE@XZ endp
.text:0000098A
.text:0000098A ; ---------------------------------------------------------------------------
.text:0000098B                 align 10h
.text:00000990
.text:00000990 ; =============== S U B R O U T I N E =======================================
.text:00000990
.text:00000990 ; Attributes: bp-based frame
.text:00000990
.text:00000990 ; __int32 __stdcall NCompress::NPpmdZip::CEncoder::Code(NCompress::NPpmdZip::CEncoder *this, struct ISequentialInStream *, struct ISequentialOutStream *, const unsigned __int64 *, const unsigned __int64 *, struct ICompressProgressInfo *)
.text:00000990                 public ?Code@CEncoder@NPpmdZip@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text:00000990 ?Code@CEncoder@NPpmdZip@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z proc near
.text:00000990                                         ; DATA XREF: .rdata:000012F4o
.text:00000990
.text:00000990 var_44          = dword ptr -44h
.text:00000990 var_3C          = dword ptr -3Ch
.text:00000990 var_38          = dword ptr -38h
.text:00000990 var_30          = dword ptr -30h
.text:00000990 var_2C          = dword ptr -2Ch
.text:00000990 var_28          = dword ptr -28h
.text:00000990 var_20          = dword ptr -20h
.text:00000990 var_14          = dword ptr -14h
.text:00000990 var_10          = dword ptr -10h
.text:00000990 var_8           = dword ptr -8
.text:00000990 var_4           = dword ptr -4
.text:00000990 this            = dword ptr  8
.text:00000990 arg_4           = dword ptr  0Ch
.text:00000990 arg_8           = dword ptr  10h
.text:00000990 arg_14          = dword ptr  1Ch
.text:00000990
.text:00000990                 push    ebp
.text:00000991                 mov     ebp, esp
.text:00000993                 sub     esp, 44h
.text:00000996                 push    esi
.text:00000997                 push    edi
.text:00000998                 lea     edi, [ebp+var_44]
.text:0000099B                 mov     ecx, 11h
.text:000009A0                 mov     eax, 0CCCCCCCCh
.text:000009A5                 rep stosd
.text:000009A7                 mov     ecx, [ebp+this]
.text:000009AA                 add     ecx, 38h ; '8'  ; this
.text:000009AD                 call    ?Alloc@CBuf@NPpmdZip@NCompress@@QAE_NXZ ; NCompress::NPpmdZip::CBuf::Alloc(void)
.text:000009B2                 movzx   eax, al
.text:000009B5                 test    eax, eax
.text:000009B7                 jnz     short loc_9C3
.text:000009B9                 mov     eax, 8007000Eh
.text:000009BE                 jmp     loc_BE2
.text:000009C3 ; ---------------------------------------------------------------------------
.text:000009C3
.text:000009C3 loc_9C3:                                ; CODE XREF: NCompress::NPpmdZip::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+27j
.text:000009C3                 push    100000h         ; unsigned int
.text:000009C8                 mov     ecx, [ebp+this]
.text:000009CB                 add     ecx, 10h        ; this
.text:000009CE                 call    ?Alloc@CByteOutBufWrap@@QAE_NI@Z ; CByteOutBufWrap::Alloc(uint)
.text:000009D3                 movzx   ecx, al
.text:000009D6                 test    ecx, ecx
.text:000009D8                 jnz     short loc_9E4
.text:000009DA                 mov     eax, 8007000Eh
.text:000009DF                 jmp     loc_BE2
.text:000009E4 ; ---------------------------------------------------------------------------
.text:000009E4
.text:000009E4 loc_9E4:                                ; CODE XREF: NCompress::NPpmdZip::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+48j
.text:000009E4                 push    offset _g_BigAlloc
.text:000009E9                 mov     edx, [ebp+this]
.text:000009EC                 mov     eax, [edx+1CF4h]
.text:000009F2                 shl     eax, 14h
.text:000009F5                 push    eax
.text:000009F6                 mov     ecx, [ebp+this]
.text:000009F9                 add     ecx, 3Ch ; '<'
.text:000009FC                 push    ecx
.text:000009FD                 call    _Ppmd8_Alloc@12 ; Ppmd8_Alloc(x,x,x)
.text:00000A02                 test    eax, eax
.text:00000A04                 jnz     short loc_A10
.text:00000A06                 mov     eax, 8007000Eh
.text:00000A0B                 jmp     loc_BE2
.text:00000A10 ; ---------------------------------------------------------------------------
.text:00000A10
.text:00000A10 loc_A10:                                ; CODE XREF: NCompress::NPpmdZip::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+74j
.text:00000A10                 mov     edx, [ebp+this]
.text:00000A13                 mov     eax, [ebp+arg_8]
.text:00000A16                 mov     [edx+24h], eax
.text:00000A19                 mov     ecx, [ebp+this]
.text:00000A1C                 add     ecx, 10h        ; this
.text:00000A1F                 call    ?Init@CByteOutBufWrap@@QAEXXZ ; CByteOutBufWrap::Init(void)
.text:00000A24                 mov     ecx, [ebp+this]
.text:00000A27                 mov     dword ptr [ecx+8Ch], 0
.text:00000A31                 mov     edx, [ebp+this]
.text:00000A34                 mov     dword ptr [edx+84h], 0FFFFFFFFh
.text:00000A3E                 mov     eax, [ebp+this]
.text:00000A41                 mov     ecx, [eax+1D00h]
.text:00000A47                 push    ecx
.text:00000A48                 mov     edx, [ebp+this]
.text:00000A4B                 mov     eax, [edx+1CFCh]
.text:00000A51                 push    eax
.text:00000A52                 mov     ecx, [ebp+this]
.text:00000A55                 add     ecx, 3Ch ; '<'
.text:00000A58                 push    ecx
.text:00000A59                 call    _Ppmd8_Init@12  ; Ppmd8_Init(x,x,x)
.text:00000A5E                 mov     edx, [ebp+this]
.text:00000A61                 mov     eax, [edx+1CFCh]
.text:00000A67                 mov     ecx, [ebp+this]
.text:00000A6A                 mov     edx, [ecx+1CF4h]
.text:00000A70                 sub     edx, 1
.text:00000A73                 shl     edx, 4
.text:00000A76                 lea     eax, [eax+edx-1]
.text:00000A7A                 mov     ecx, [ebp+this]
.text:00000A7D                 mov     edx, [ecx+1D00h]
.text:00000A83                 shl     edx, 0Ch
.text:00000A86                 add     eax, edx
.text:00000A88                 mov     [ebp+var_4], eax
.text:00000A8B                 mov     eax, [ebp+var_4]
.text:00000A8E                 and     eax, 0FFh
.text:00000A93                 push    eax             ; unsigned __int8
.text:00000A94                 mov     ecx, [ebp+this]
.text:00000A97                 add     ecx, 10h        ; this
.text:00000A9A                 call    ?WriteByte@CByteOutBufWrap@@QAEXE@Z ; CByteOutBufWrap::WriteByte(uchar)
.text:00000A9F                 mov     ecx, [ebp+var_4]
.text:00000AA2                 shr     ecx, 8
.text:00000AA5                 push    ecx             ; unsigned __int8
.text:00000AA6                 mov     ecx, [ebp+this]
.text:00000AA9                 add     ecx, 10h        ; this
.text:00000AAC                 call    ?WriteByte@CByteOutBufWrap@@QAEXE@Z ; CByteOutBufWrap::WriteByte(uchar)
.text:00000AB1                 mov     edx, [ebp+this]
.text:00000AB4                 mov     eax, [edx+30h]
.text:00000AB7                 mov     [ebp+var_8], eax
.text:00000ABA                 cmp     [ebp+var_8], 0
.text:00000ABE                 jz      short loc_AC8
.text:00000AC0                 mov     eax, [ebp+var_8]
.text:00000AC3                 jmp     loc_BE2
.text:00000AC8 ; ---------------------------------------------------------------------------
.text:00000AC8
.text:00000AC8 loc_AC8:                                ; CODE XREF: NCompress::NPpmdZip::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+12Ej
.text:00000AC8                 mov     [ebp+var_14], 0
.text:00000ACF                 mov     [ebp+var_10], 0
.text:00000AD6
.text:00000AD6 loc_AD6:                                ; CODE XREF: NCompress::NPpmdZip::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *):loc_BDDj
.text:00000AD6                 mov     esi, esp
.text:00000AD8                 lea     ecx, [ebp+var_20]
.text:00000ADB                 push    ecx
.text:00000ADC                 push    100000h
.text:00000AE1                 mov     edx, [ebp+this]
.text:00000AE4                 mov     eax, [edx+38h]
.text:00000AE7                 push    eax
.text:00000AE8                 mov     ecx, [ebp+arg_4]
.text:00000AEB                 mov     edx, [ecx]
.text:00000AED                 mov     eax, [ebp+arg_4]
.text:00000AF0                 push    eax
.text:00000AF1                 mov     ecx, [edx+0Ch]
.text:00000AF4                 call    ecx
.text:00000AF6                 cmp     esi, esp
.text:00000AF8                 call    __RTC_CheckEsp
.text:00000AFD                 mov     [ebp+var_28], eax
.text:00000B00                 cmp     [ebp+var_28], 0
.text:00000B04                 jz      short loc_B0E
.text:00000B06                 mov     eax, [ebp+var_28]
.text:00000B09                 jmp     loc_BE2
.text:00000B0E ; ---------------------------------------------------------------------------
.text:00000B0E
.text:00000B0E loc_B0E:                                ; CODE XREF: NCompress::NPpmdZip::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+174j
.text:00000B0E                 cmp     [ebp+var_20], 0
.text:00000B12                 jnz     short loc_B3E
.text:00000B14                 push    0FFFFFFFFh
.text:00000B16                 mov     edx, [ebp+this]
.text:00000B19                 add     edx, 3Ch ; '<'
.text:00000B1C                 push    edx
.text:00000B1D                 call    _Ppmd8_EncodeSymbol@8 ; Ppmd8_EncodeSymbol(x,x)
.text:00000B22                 mov     eax, [ebp+this]
.text:00000B25                 add     eax, 3Ch ; '<'
.text:00000B28                 push    eax
.text:00000B29                 call    _Ppmd8_RangeEnc_FlushData@4 ; Ppmd8_RangeEnc_FlushData(x)
.text:00000B2E                 mov     ecx, [ebp+this]
.text:00000B31                 add     ecx, 10h        ; this
.text:00000B34                 call    ?Flush@CByteOutBufWrap@@QAEJXZ ; CByteOutBufWrap::Flush(void)
.text:00000B39                 jmp     loc_BE2
.text:00000B3E ; ---------------------------------------------------------------------------
.text:00000B3E
.text:00000B3E loc_B3E:                                ; CODE XREF: NCompress::NPpmdZip::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+182j
.text:00000B3E                 mov     [ebp+var_2C], 0
.text:00000B45                 jmp     short loc_B50
.text:00000B47 ; ---------------------------------------------------------------------------
.text:00000B47
.text:00000B47 loc_B47:                                ; CODE XREF: NCompress::NPpmdZip::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *):loc_B86j
.text:00000B47                 mov     ecx, [ebp+var_2C]
.text:00000B4A                 add     ecx, 1
.text:00000B4D                 mov     [ebp+var_2C], ecx
.text:00000B50
.text:00000B50 loc_B50:                                ; CODE XREF: NCompress::NPpmdZip::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+1B5j
.text:00000B50                 mov     edx, [ebp+var_2C]
.text:00000B53                 cmp     edx, [ebp+var_20]
.text:00000B56                 jnb     short loc_B88
.text:00000B58                 mov     eax, [ebp+this]
.text:00000B5B                 mov     ecx, [eax+38h]
.text:00000B5E                 mov     edx, [ebp+var_2C]
.text:00000B61                 movzx   eax, byte ptr [ecx+edx]
.text:00000B65                 push    eax
.text:00000B66                 mov     ecx, [ebp+this]
.text:00000B69                 add     ecx, 3Ch ; '<'
.text:00000B6C                 push    ecx
.text:00000B6D                 call    _Ppmd8_EncodeSymbol@8 ; Ppmd8_EncodeSymbol(x,x)
.text:00000B72                 mov     edx, [ebp+this]
.text:00000B75                 mov     eax, [edx+30h]
.text:00000B78                 mov     [ebp+var_30], eax
.text:00000B7B                 cmp     [ebp+var_30], 0
.text:00000B7F                 jz      short loc_B86
.text:00000B81                 mov     eax, [ebp+var_30]
.text:00000B84                 jmp     short loc_BE2
.text:00000B86 ; ---------------------------------------------------------------------------
.text:00000B86
.text:00000B86 loc_B86:                                ; CODE XREF: NCompress::NPpmdZip::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+1EFj
.text:00000B86                 jmp     short loc_B47
.text:00000B88 ; ---------------------------------------------------------------------------
.text:00000B88
.text:00000B88 loc_B88:                                ; CODE XREF: NCompress::NPpmdZip::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+1C6j
.text:00000B88                 mov     ecx, [ebp+var_20]
.text:00000B8B                 xor     edx, edx
.text:00000B8D                 add     ecx, [ebp+var_14]
.text:00000B90                 adc     edx, [ebp+var_10]
.text:00000B93                 mov     [ebp+var_14], ecx
.text:00000B96                 mov     [ebp+var_10], edx
.text:00000B99                 cmp     [ebp+arg_14], 0
.text:00000B9D                 jz      short loc_BDD
.text:00000B9F                 mov     ecx, [ebp+this]
.text:00000BA2                 add     ecx, 10h        ; this
.text:00000BA5                 call    ?GetProcessed@CByteOutBufWrap@@QBE_KXZ ; CByteOutBufWrap::GetProcessed(void)
.text:00000BAA                 mov     [ebp+var_3C], eax
.text:00000BAD                 mov     [ebp+var_38], edx
.text:00000BB0                 mov     esi, esp
.text:00000BB2                 lea     eax, [ebp+var_3C]
.text:00000BB5                 push    eax
.text:00000BB6                 lea     ecx, [ebp+var_14]
.text:00000BB9                 push    ecx
.text:00000BBA                 mov     edx, [ebp+arg_14]
.text:00000BBD                 mov     eax, [edx]
.text:00000BBF                 mov     ecx, [ebp+arg_14]
.text:00000BC2                 push    ecx
.text:00000BC3                 mov     edx, [eax+0Ch]
.text:00000BC6                 call    edx
.text:00000BC8                 cmp     esi, esp
.text:00000BCA                 call    __RTC_CheckEsp
.text:00000BCF                 mov     [ebp+var_44], eax
.text:00000BD2                 cmp     [ebp+var_44], 0
.text:00000BD6                 jz      short loc_BDD
.text:00000BD8                 mov     eax, [ebp+var_44]
.text:00000BDB                 jmp     short loc_BE2
.text:00000BDD ; ---------------------------------------------------------------------------
.text:00000BDD
.text:00000BDD loc_BDD:                                ; CODE XREF: NCompress::NPpmdZip::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+20Dj
.text:00000BDD                                         ; NCompress::NPpmdZip::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+246j
.text:00000BDD                 jmp     loc_AD6
.text:00000BE2 ; ---------------------------------------------------------------------------
.text:00000BE2
.text:00000BE2 loc_BE2:                                ; CODE XREF: NCompress::NPpmdZip::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+2Ej
.text:00000BE2                                         ; NCompress::NPpmdZip::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+4Fj ...
.text:00000BE2                 push    edx
.text:00000BE3                 mov     ecx, ebp
.text:00000BE5                 push    eax
.text:00000BE6                 lea     edx, $LN21
.text:00000BEC                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000BF1                 pop     eax
.text:00000BF2                 pop     edx
.text:00000BF3                 pop     edi
.text:00000BF4                 pop     esi
.text:00000BF5                 add     esp, 44h
.text:00000BF8                 cmp     ebp, esp
.text:00000BFA                 call    __RTC_CheckEsp
.text:00000BFF                 mov     esp, ebp
.text:00000C01                 pop     ebp
.text:00000C02                 retn    18h
.text:00000C02 ?Code@CEncoder@NPpmdZip@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z endp
.text:00000C02
.text:00000C02 ; ---------------------------------------------------------------------------
.text:00000C05                 align 4
.text:00000C08 $LN21           dd 3                    ; DATA XREF: NCompress::NPpmdZip::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+256o
.text:00000C0C                 dd offset $LN20
.text:00000C10 $LN20           dd 0FFFFFFECh, 8        ; DATA XREF: .text:00000C0Co
.text:00000C18                 dd offset $LN17         ; "processed"
.text:00000C1C                 dd 0FFFFFFE0h, 4
.text:00000C24                 dd offset $LN18         ; "size"
.text:00000C28                 dd 0FFFFFFC4h, 8
.text:00000C30                 dd offset $LN19         ; "outSize"
.text:00000C34 $LN19           db 'outSize',0          ; DATA XREF: .text:00000C30o
.text:00000C3C $LN18           db 'size',0             ; DATA XREF: .text:00000C24o
.text:00000C41 $LN17           db 'processed',0        ; DATA XREF: .text:00000C18o
.text:00000C4B                 align 4
.text:00000C4B _text           ends
.text:00000C4B
.text$x:00000C4C ; ===========================================================================
.text$x:00000C4C
.text$x:00000C4C ; Segment type: Pure code
.text$x:00000C4C ; Segment permissions: Read/Execute
.text$x:00000C4C _text$x         segment para public 'CODE' use32
.text$x:00000C4C                 assume cs:_text$x
.text$x:00000C4C                 ;org 0C4Ch
.text$x:00000C4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00000C4C
.text$x:00000C4C ; =============== S U B R O U T I N E =======================================
.text$x:00000C4C
.text$x:00000C4C
.text$x:00000C4C __unwindfunclet$??0CDecoder@NPpmdZip@NCompress@@QAE@_N@Z$0 proc near
.text$x:00000C4C                                         ; DATA XREF: .xdata$x:00000D08o
.text$x:00000C4C                 mov     ecx, [ebp-10h]
.text$x:00000C4F                 add     ecx, 8          ; this
.text$x:00000C52                 jmp     ??1CByteInBufWrap@@QAE@XZ ; CByteInBufWrap::~CByteInBufWrap(void)
.text$x:00000C52 __unwindfunclet$??0CDecoder@NPpmdZip@NCompress@@QAE@_N@Z$0 endp
.text$x:00000C52
.text$x:00000C57
.text$x:00000C57 ; =============== S U B R O U T I N E =======================================
.text$x:00000C57
.text$x:00000C57
.text$x:00000C57 __ehhandler$??0CDecoder@NPpmdZip@NCompress@@QAE@_N@Z proc near
.text$x:00000C57                                         ; DATA XREF: NCompress::NPpmdZip::CDecoder::CDecoder(bool)+5o
.text$x:00000C57
.text$x:00000C57 arg_4           = dword ptr  8
.text$x:00000C57
.text$x:00000C57                 mov     edx, [esp+arg_4]
.text$x:00000C5B                 lea     eax, [edx+0Ch]
.text$x:00000C5E                 mov     ecx, [edx-8]
.text$x:00000C61                 xor     ecx, eax
.text$x:00000C63                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000C68                 mov     eax, offset __ehfuncinfo$??0CDecoder@NPpmdZip@NCompress@@QAE@_N@Z
.text$x:00000C6D                 jmp     ___CxxFrameHandler3
.text$x:00000C6D __ehhandler$??0CDecoder@NPpmdZip@NCompress@@QAE@_N@Z endp
.text$x:00000C6D
.text$x:00000C72
.text$x:00000C72 ; =============== S U B R O U T I N E =======================================
.text$x:00000C72
.text$x:00000C72
.text$x:00000C72 __unwindfunclet$??1CDecoder@NPpmdZip@NCompress@@QAE@XZ$0 proc near
.text$x:00000C72                                         ; DATA XREF: .xdata$x:00000D34o
.text$x:00000C72                 mov     ecx, [ebp-10h]
.text$x:00000C75                 add     ecx, 8          ; this
.text$x:00000C78                 jmp     ??1CByteInBufWrap@@QAE@XZ ; CByteInBufWrap::~CByteInBufWrap(void)
.text$x:00000C78 __unwindfunclet$??1CDecoder@NPpmdZip@NCompress@@QAE@XZ$0 endp
.text$x:00000C78
.text$x:00000C7D
.text$x:00000C7D ; =============== S U B R O U T I N E =======================================
.text$x:00000C7D
.text$x:00000C7D
.text$x:00000C7D __ehhandler$??1CDecoder@NPpmdZip@NCompress@@QAE@XZ proc near
.text$x:00000C7D                                         ; DATA XREF: NCompress::NPpmdZip::CDecoder::~CDecoder(void)+5o
.text$x:00000C7D
.text$x:00000C7D arg_4           = dword ptr  8
.text$x:00000C7D
.text$x:00000C7D                 mov     edx, [esp+arg_4]
.text$x:00000C81                 lea     eax, [edx+0Ch]
.text$x:00000C84                 mov     ecx, [edx-8]
.text$x:00000C87                 xor     ecx, eax
.text$x:00000C89                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000C8E                 mov     eax, offset __ehfuncinfo$??1CDecoder@NPpmdZip@NCompress@@QAE@XZ
.text$x:00000C93                 jmp     ___CxxFrameHandler3
.text$x:00000C93 __ehhandler$??1CDecoder@NPpmdZip@NCompress@@QAE@XZ endp
.text$x:00000C93
.text$x:00000C98
.text$x:00000C98 ; =============== S U B R O U T I N E =======================================
.text$x:00000C98
.text$x:00000C98
.text$x:00000C98 __unwindfunclet$??1CEncoder@NPpmdZip@NCompress@@QAE@XZ$0 proc near
.text$x:00000C98                                         ; DATA XREF: .xdata$x:00000D60o
.text$x:00000C98                 mov     ecx, [ebp-10h]
.text$x:00000C9B                 add     ecx, 10h        ; this
.text$x:00000C9E                 jmp     ??1CByteOutBufWrap@@QAE@XZ ; CByteOutBufWrap::~CByteOutBufWrap(void)
.text$x:00000C9E __unwindfunclet$??1CEncoder@NPpmdZip@NCompress@@QAE@XZ$0 endp
.text$x:00000C9E
.text$x:00000CA3
.text$x:00000CA3 ; =============== S U B R O U T I N E =======================================
.text$x:00000CA3
.text$x:00000CA3
.text$x:00000CA3 __ehhandler$??1CEncoder@NPpmdZip@NCompress@@QAE@XZ proc near
.text$x:00000CA3                                         ; DATA XREF: NCompress::NPpmdZip::CEncoder::~CEncoder(void)+5o
.text$x:00000CA3
.text$x:00000CA3 arg_4           = dword ptr  8
.text$x:00000CA3
.text$x:00000CA3                 mov     edx, [esp+arg_4]
.text$x:00000CA7                 lea     eax, [edx+0Ch]
.text$x:00000CAA                 mov     ecx, [edx-8]
.text$x:00000CAD                 xor     ecx, eax
.text$x:00000CAF                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000CB4                 mov     eax, offset __ehfuncinfo$??1CEncoder@NPpmdZip@NCompress@@QAE@XZ
.text$x:00000CB9                 jmp     ___CxxFrameHandler3
.text$x:00000CB9 __ehhandler$??1CEncoder@NPpmdZip@NCompress@@QAE@XZ endp
.text$x:00000CB9
.text$x:00000CBE
.text$x:00000CBE ; =============== S U B R O U T I N E =======================================
.text$x:00000CBE
.text$x:00000CBE
.text$x:00000CBE __unwindfunclet$??0CEncoder@NPpmdZip@NCompress@@QAE@XZ$0 proc near
.text$x:00000CBE                                         ; DATA XREF: .xdata$x:00000D8Co
.text$x:00000CBE                 mov     ecx, [ebp-10h]
.text$x:00000CC1                 add     ecx, 10h        ; this
.text$x:00000CC4                 jmp     ??1CByteOutBufWrap@@QAE@XZ ; CByteOutBufWrap::~CByteOutBufWrap(void)
.text$x:00000CC4 __unwindfunclet$??0CEncoder@NPpmdZip@NCompress@@QAE@XZ$0 endp
.text$x:00000CC4
.text$x:00000CC9
.text$x:00000CC9 ; =============== S U B R O U T I N E =======================================
.text$x:00000CC9
.text$x:00000CC9
.text$x:00000CC9 __unwindfunclet$??0CEncoder@NPpmdZip@NCompress@@QAE@XZ$1 proc near
.text$x:00000CC9                                         ; DATA XREF: .xdata$x:00000D94o
.text$x:00000CC9                 mov     ecx, [ebp-10h]
.text$x:00000CCC                 add     ecx, 38h ; '8'  ; this
.text$x:00000CCF                 jmp     ??1CBuf@NPpmdZip@NCompress@@QAE@XZ ; NCompress::NPpmdZip::CBuf::~CBuf(void)
.text$x:00000CCF __unwindfunclet$??0CEncoder@NPpmdZip@NCompress@@QAE@XZ$1 endp
.text$x:00000CCF
.text$x:00000CD4
.text$x:00000CD4 ; =============== S U B R O U T I N E =======================================
.text$x:00000CD4
.text$x:00000CD4
.text$x:00000CD4 __ehhandler$??0CEncoder@NPpmdZip@NCompress@@QAE@XZ proc near
.text$x:00000CD4                                         ; DATA XREF: NCompress::NPpmdZip::CEncoder::CEncoder(void)+5o
.text$x:00000CD4
.text$x:00000CD4 arg_4           = dword ptr  8
.text$x:00000CD4
.text$x:00000CD4                 mov     edx, [esp+arg_4]
.text$x:00000CD8                 lea     eax, [edx+0Ch]
.text$x:00000CDB                 mov     ecx, [edx-8]
.text$x:00000CDE                 xor     ecx, eax
.text$x:00000CE0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000CE5                 mov     eax, offset __ehfuncinfo$??0CEncoder@NPpmdZip@NCompress@@QAE@XZ
.text$x:00000CEA                 jmp     ___CxxFrameHandler3
.text$x:00000CEA __ehhandler$??0CEncoder@NPpmdZip@NCompress@@QAE@XZ endp
.text$x:00000CEA
.text$x:00000CEA ; ---------------------------------------------------------------------------
.text$x:00000CEF                 align 10h
.text$x:00000CEF _text$x         ends
.text$x:00000CEF
.rdata:00000CF0 ; ===========================================================================
.rdata:00000CF0
.rdata:00000CF0 ; Segment type: Pure data
.rdata:00000CF0 ; Segment permissions: Read
.rdata:00000CF0 _rdata          segment dword public 'DATA' use32
.rdata:00000CF0                 assume cs:_rdata
.rdata:00000CF0                 ;org 0CF0h
.rdata:00000CF0 ; COMDAT (pick largest)
.rdata:00000CF0                 dd offset ??_R4CDecoder@NPpmdZip@NCompress@@6B@ ; const NCompress::NPpmdZip::CDecoder::`RTTI Complete Object Locator'
.rdata:00000CF4                 public ??_7CDecoder@NPpmdZip@NCompress@@6B@
.rdata:00000CF4 ; const NCompress::NPpmdZip::CDecoder::`vftable'
.rdata:00000CF4 ??_7CDecoder@NPpmdZip@NCompress@@6B@ dd offset ?QueryInterface@CDecoder@NPpmdZip@NCompress@@UAGJABU_GUID@@PAPAX@Z
.rdata:00000CF4                                         ; DATA XREF: NCompress::NPpmdZip::CDecoder::CDecoder(bool)+43o
.rdata:00000CF4                                         ; NCompress::NPpmdZip::CDecoder::~CDecoder(void)+30o
.rdata:00000CF4                                         ; NCompress::NPpmdZip::CDecoder::QueryInterface(_GUID const &,void * *)
.rdata:00000CF8                 dd offset ?AddRef@CDecoder@NPpmdZip@NCompress@@UAGKXZ ; NCompress::NPpmdZip::CDecoder::AddRef(void)
.rdata:00000CFC                 dd offset ?Release@CDecoder@NPpmdZip@NCompress@@UAGKXZ ; NCompress::NPpmdZip::CDecoder::Release(void)
.rdata:00000D00                 dd offset ?Code@CDecoder@NPpmdZip@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ; NCompress::NPpmdZip::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)
.rdata:00000D00 _rdata          ends
.rdata:00000D00
.xdata$x:00000D04 ; ===========================================================================
.xdata$x:00000D04
.xdata$x:00000D04 ; Segment type: Pure data
.xdata$x:00000D04 ; Segment permissions: Read
.xdata$x:00000D04 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000D04                 assume cs:_xdata$x
.xdata$x:00000D04                 ;org 0D04h
.xdata$x:00000D04 __unwindtable$??0CDecoder@NPpmdZip@NCompress@@QAE@_N@Z db 0FFh
.xdata$x:00000D04                                         ; DATA XREF: .xdata$x:00000D14o
.xdata$x:00000D05                 db 0FFh
.xdata$x:00000D06                 db 0FFh
.xdata$x:00000D07                 db 0FFh
.xdata$x:00000D08                 dd offset __unwindfunclet$??0CDecoder@NPpmdZip@NCompress@@QAE@_N@Z$0
.xdata$x:00000D0C __ehfuncinfo$??0CDecoder@NPpmdZip@NCompress@@QAE@_N@Z db  22h ; "
.xdata$x:00000D0C                                         ; DATA XREF: __ehhandler$??0CDecoder@NPpmdZip@NCompress@@QAE@_N@Z+11o
.xdata$x:00000D0D                 db    5
.xdata$x:00000D0E                 db  93h ; ô
.xdata$x:00000D0F                 db  19h
.xdata$x:00000D10                 db    1
.xdata$x:00000D11                 db    0
.xdata$x:00000D12                 db    0
.xdata$x:00000D13                 db    0
.xdata$x:00000D14                 dd offset __unwindtable$??0CDecoder@NPpmdZip@NCompress@@QAE@_N@Z
.xdata$x:00000D18                 db    0
.xdata$x:00000D19                 db    0
.xdata$x:00000D1A                 db    0
.xdata$x:00000D1B                 db    0
.xdata$x:00000D1C                 db    0
.xdata$x:00000D1D                 db    0
.xdata$x:00000D1E                 db    0
.xdata$x:00000D1F                 db    0
.xdata$x:00000D20                 db    0
.xdata$x:00000D21                 db    0
.xdata$x:00000D22                 db    0
.xdata$x:00000D23                 db    0
.xdata$x:00000D24                 db    0
.xdata$x:00000D25                 db    0
.xdata$x:00000D26                 db    0
.xdata$x:00000D27                 db    0
.xdata$x:00000D28                 db    0
.xdata$x:00000D29                 db    0
.xdata$x:00000D2A                 db    0
.xdata$x:00000D2B                 db    0
.xdata$x:00000D2C                 db    1
.xdata$x:00000D2D                 db    0
.xdata$x:00000D2E                 db    0
.xdata$x:00000D2F                 db    0
.xdata$x:00000D30 __unwindtable$??1CDecoder@NPpmdZip@NCompress@@QAE@XZ db 0FFh
.xdata$x:00000D30                                         ; DATA XREF: .xdata$x:00000D40o
.xdata$x:00000D31                 db 0FFh
.xdata$x:00000D32                 db 0FFh
.xdata$x:00000D33                 db 0FFh
.xdata$x:00000D34                 dd offset __unwindfunclet$??1CDecoder@NPpmdZip@NCompress@@QAE@XZ$0
.xdata$x:00000D38 __ehfuncinfo$??1CDecoder@NPpmdZip@NCompress@@QAE@XZ db  22h ; "
.xdata$x:00000D38                                         ; DATA XREF: __ehhandler$??1CDecoder@NPpmdZip@NCompress@@QAE@XZ+11o
.xdata$x:00000D39                 db    5
.xdata$x:00000D3A                 db  93h ; ô
.xdata$x:00000D3B                 db  19h
.xdata$x:00000D3C                 db    1
.xdata$x:00000D3D                 db    0
.xdata$x:00000D3E                 db    0
.xdata$x:00000D3F                 db    0
.xdata$x:00000D40                 dd offset __unwindtable$??1CDecoder@NPpmdZip@NCompress@@QAE@XZ
.xdata$x:00000D44                 db    0
.xdata$x:00000D45                 db    0
.xdata$x:00000D46                 db    0
.xdata$x:00000D47                 db    0
.xdata$x:00000D48                 db    0
.xdata$x:00000D49                 db    0
.xdata$x:00000D4A                 db    0
.xdata$x:00000D4B                 db    0
.xdata$x:00000D4C                 db    0
.xdata$x:00000D4D                 db    0
.xdata$x:00000D4E                 db    0
.xdata$x:00000D4F                 db    0
.xdata$x:00000D50                 db    0
.xdata$x:00000D51                 db    0
.xdata$x:00000D52                 db    0
.xdata$x:00000D53                 db    0
.xdata$x:00000D54                 db    0
.xdata$x:00000D55                 db    0
.xdata$x:00000D56                 db    0
.xdata$x:00000D57                 db    0
.xdata$x:00000D58                 db    1
.xdata$x:00000D59                 db    0
.xdata$x:00000D5A                 db    0
.xdata$x:00000D5B                 db    0
.xdata$x:00000D5C __unwindtable$??1CEncoder@NPpmdZip@NCompress@@QAE@XZ db 0FFh
.xdata$x:00000D5C                                         ; DATA XREF: .xdata$x:00000D6Co
.xdata$x:00000D5D                 db 0FFh
.xdata$x:00000D5E                 db 0FFh
.xdata$x:00000D5F                 db 0FFh
.xdata$x:00000D60                 dd offset __unwindfunclet$??1CEncoder@NPpmdZip@NCompress@@QAE@XZ$0
.xdata$x:00000D64 __ehfuncinfo$??1CEncoder@NPpmdZip@NCompress@@QAE@XZ db  22h ; "
.xdata$x:00000D64                                         ; DATA XREF: __ehhandler$??1CEncoder@NPpmdZip@NCompress@@QAE@XZ+11o
.xdata$x:00000D65                 db    5
.xdata$x:00000D66                 db  93h ; ô
.xdata$x:00000D67                 db  19h
.xdata$x:00000D68                 db    1
.xdata$x:00000D69                 db    0
.xdata$x:00000D6A                 db    0
.xdata$x:00000D6B                 db    0
.xdata$x:00000D6C                 dd offset __unwindtable$??1CEncoder@NPpmdZip@NCompress@@QAE@XZ
.xdata$x:00000D70                 db    0
.xdata$x:00000D71                 db    0
.xdata$x:00000D72                 db    0
.xdata$x:00000D73                 db    0
.xdata$x:00000D74                 db    0
.xdata$x:00000D75                 db    0
.xdata$x:00000D76                 db    0
.xdata$x:00000D77                 db    0
.xdata$x:00000D78                 db    0
.xdata$x:00000D79                 db    0
.xdata$x:00000D7A                 db    0
.xdata$x:00000D7B                 db    0
.xdata$x:00000D7C                 db    0
.xdata$x:00000D7D                 db    0
.xdata$x:00000D7E                 db    0
.xdata$x:00000D7F                 db    0
.xdata$x:00000D80                 db    0
.xdata$x:00000D81                 db    0
.xdata$x:00000D82                 db    0
.xdata$x:00000D83                 db    0
.xdata$x:00000D84                 db    1
.xdata$x:00000D85                 db    0
.xdata$x:00000D86                 db    0
.xdata$x:00000D87                 db    0
.xdata$x:00000D88 __unwindtable$??0CEncoder@NPpmdZip@NCompress@@QAE@XZ db 0FFh
.xdata$x:00000D88                                         ; DATA XREF: .xdata$x:00000DA0o
.xdata$x:00000D89                 db 0FFh
.xdata$x:00000D8A                 db 0FFh
.xdata$x:00000D8B                 db 0FFh
.xdata$x:00000D8C                 dd offset __unwindfunclet$??0CEncoder@NPpmdZip@NCompress@@QAE@XZ$0
.xdata$x:00000D90                 db    0
.xdata$x:00000D91                 db    0
.xdata$x:00000D92                 db    0
.xdata$x:00000D93                 db    0
.xdata$x:00000D94                 dd offset __unwindfunclet$??0CEncoder@NPpmdZip@NCompress@@QAE@XZ$1
.xdata$x:00000D98 __ehfuncinfo$??0CEncoder@NPpmdZip@NCompress@@QAE@XZ db  22h ; "
.xdata$x:00000D98                                         ; DATA XREF: __ehhandler$??0CEncoder@NPpmdZip@NCompress@@QAE@XZ+11o
.xdata$x:00000D99                 db    5
.xdata$x:00000D9A                 db  93h ; ô
.xdata$x:00000D9B                 db  19h
.xdata$x:00000D9C                 db    2
.xdata$x:00000D9D                 db    0
.xdata$x:00000D9E                 db    0
.xdata$x:00000D9F                 db    0
.xdata$x:00000DA0                 dd offset __unwindtable$??0CEncoder@NPpmdZip@NCompress@@QAE@XZ
.xdata$x:00000DA4                 db    0
.xdata$x:00000DA5                 db    0
.xdata$x:00000DA6                 db    0
.xdata$x:00000DA7                 db    0
.xdata$x:00000DA8                 db    0
.xdata$x:00000DA9                 db    0
.xdata$x:00000DAA                 db    0
.xdata$x:00000DAB                 db    0
.xdata$x:00000DAC                 db    0
.xdata$x:00000DAD                 db    0
.xdata$x:00000DAE                 db    0
.xdata$x:00000DAF                 db    0
.xdata$x:00000DB0                 db    0
.xdata$x:00000DB1                 db    0
.xdata$x:00000DB2                 db    0
.xdata$x:00000DB3                 db    0
.xdata$x:00000DB4                 db    0
.xdata$x:00000DB5                 db    0
.xdata$x:00000DB6                 db    0
.xdata$x:00000DB7                 db    0
.xdata$x:00000DB8                 db    1
.xdata$x:00000DB9                 db    0
.xdata$x:00000DBA                 db    0
.xdata$x:00000DBB                 db    0
.xdata$x:00000DBB _xdata$x        ends
.xdata$x:00000DBB
.rtc$TMZ:00000DBC ; ===========================================================================
.rtc$TMZ:00000DBC
.rtc$TMZ:00000DBC ; Segment type: Pure data
.rtc$TMZ:00000DBC ; Segment permissions: Read
.rtc$TMZ:00000DBC _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000DBC                 assume cs:_rtc$TMZ
.rtc$TMZ:00000DBC                 ;org 0DBCh
.rtc$TMZ:00000DBC ; COMDAT (pick any)
.rtc$TMZ:00000DBC __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000DBC _rtc$TMZ        ends
.rtc$TMZ:00000DBC
.rtc$IMZ:00000DC0 ; ===========================================================================
.rtc$IMZ:00000DC0
.rtc$IMZ:00000DC0 ; Segment type: Pure data
.rtc$IMZ:00000DC0 ; Segment permissions: Read
.rtc$IMZ:00000DC0 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000DC0                 assume cs:_rtc$IMZ
.rtc$IMZ:00000DC0                 ;org 0DC0h
.rtc$IMZ:00000DC0 ; COMDAT (pick any)
.rtc$IMZ:00000DC0 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000DC0 _rtc$IMZ        ends
.rtc$IMZ:00000DC0
.rdata$r:00000DC4 ; ===========================================================================
.rdata$r:00000DC4
.rdata$r:00000DC4 ; Segment type: Pure data
.rdata$r:00000DC4 ; Segment permissions: Read
.rdata$r:00000DC4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000DC4                 assume cs:_rdata$r
.rdata$r:00000DC4                 ;org 0DC4h
.rdata$r:00000DC4 ; COMDAT (pick any)
.rdata$r:00000DC4                 public ??_R4CDecoder@NPpmdZip@NCompress@@6B@
.rdata$r:00000DC4 ; const NCompress::NPpmdZip::CDecoder::`RTTI Complete Object Locator'
.rdata$r:00000DC4 ??_R4CDecoder@NPpmdZip@NCompress@@6B@ db    0
.rdata$r:00000DC4                                         ; DATA XREF: .rdata:00000CF0o
.rdata$r:00000DC5                 db    0
.rdata$r:00000DC6                 db    0
.rdata$r:00000DC7                 db    0
.rdata$r:00000DC8                 db    0
.rdata$r:00000DC9                 db    0
.rdata$r:00000DCA                 db    0
.rdata$r:00000DCB                 db    0
.rdata$r:00000DCC                 db    0
.rdata$r:00000DCD                 db    0
.rdata$r:00000DCE                 db    0
.rdata$r:00000DCF                 db    0
.rdata$r:00000DD0                 dd offset ??_R0?AVCDecoder@NPpmdZip@NCompress@@@8 ; NCompress::NPpmdZip::CDecoder `RTTI Type Descriptor'
.rdata$r:00000DD4                 dd offset ??_R3CDecoder@NPpmdZip@NCompress@@8 ; NCompress::NPpmdZip::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000DD4 _rdata$r        ends
.rdata$r:00000DD4
.data:00000DD8 ; ===========================================================================
.data:00000DD8
.data:00000DD8 ; Segment type: Pure data
.data:00000DD8 ; Segment permissions: Read/Write
.data:00000DD8 _data           segment dword public 'DATA' use32
.data:00000DD8                 assume cs:_data
.data:00000DD8                 ;org 0DD8h
.data:00000DD8 ; COMDAT (pick any)
.data:00000DD8                 public ??_R0?AVCDecoder@NPpmdZip@NCompress@@@8
.data:00000DD8 ; class NCompress::NPpmdZip::CDecoder `RTTI Type Descriptor'
.data:00000DD8 ??_R0?AVCDecoder@NPpmdZip@NCompress@@@8 dd offset ??_7type_info@@6B@
.data:00000DD8                                         ; DATA XREF: .rdata$r:00000DD0o
.data:00000DD8                                         ; .rdata$r:NCompress::NPpmdZip::CDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000DD8                                         ; const type_info::`vftable'
.data:00000DDC                 align 10h
.data:00000DE0 a_?avcdecoder@n db '.?AVCDecoder@NPpmdZip@NCompress@@',0
.data:00000E02                 align 4
.data:00000E02 _data           ends
.data:00000E02
.rdata$r:00000E04 ; ===========================================================================
.rdata$r:00000E04
.rdata$r:00000E04 ; Segment type: Pure data
.rdata$r:00000E04 ; Segment permissions: Read
.rdata$r:00000E04 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000E04                 assume cs:_rdata$r
.rdata$r:00000E04                 ;org 0E04h
.rdata$r:00000E04 ; COMDAT (pick any)
.rdata$r:00000E04                 public ??_R3CDecoder@NPpmdZip@NCompress@@8
.rdata$r:00000E04 ; NCompress::NPpmdZip::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000E04 ??_R3CDecoder@NPpmdZip@NCompress@@8 db    0
.rdata$r:00000E04                                         ; DATA XREF: .rdata$r:00000DD4o
.rdata$r:00000E04                                         ; .rdata$r:00000E40o
.rdata$r:00000E05                 db    0
.rdata$r:00000E06                 db    0
.rdata$r:00000E07                 db    0
.rdata$r:00000E08                 db    1
.rdata$r:00000E09                 db    0
.rdata$r:00000E0A                 db    0
.rdata$r:00000E0B                 db    0
.rdata$r:00000E0C                 db    4
.rdata$r:00000E0D                 db    0
.rdata$r:00000E0E                 db    0
.rdata$r:00000E0F                 db    0
.rdata$r:00000E10                 dd offset ??_R2CDecoder@NPpmdZip@NCompress@@8 ; NCompress::NPpmdZip::CDecoder::`RTTI Base Class Array'
.rdata$r:00000E10 _rdata$r        ends
.rdata$r:00000E10
.rdata$r:00000E14 ; ===========================================================================
.rdata$r:00000E14
.rdata$r:00000E14 ; Segment type: Pure data
.rdata$r:00000E14 ; Segment permissions: Read
.rdata$r:00000E14 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000E14                 assume cs:_rdata$r
.rdata$r:00000E14                 ;org 0E14h
.rdata$r:00000E14 ; COMDAT (pick any)
.rdata$r:00000E14                 public ??_R2CDecoder@NPpmdZip@NCompress@@8
.rdata$r:00000E14 ; NCompress::NPpmdZip::CDecoder::`RTTI Base Class Array'
.rdata$r:00000E14 ??_R2CDecoder@NPpmdZip@NCompress@@8 dd offset ??_R1A@?0A@EA@CDecoder@NPpmdZip@NCompress@@8
.rdata$r:00000E14                                         ; DATA XREF: .rdata$r:00000E10o
.rdata$r:00000E14                                         ; NCompress::NPpmdZip::CDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000E18                 dd offset ??_R1A@?0A@EA@ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000E1C                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000E20                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00000E24                 db    0
.rdata$r:00000E25                 align 4
.rdata$r:00000E25 _rdata$r        ends
.rdata$r:00000E25
.rdata$r:00000E28 ; ===========================================================================
.rdata$r:00000E28
.rdata$r:00000E28 ; Segment type: Pure data
.rdata$r:00000E28 ; Segment permissions: Read
.rdata$r:00000E28 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000E28                 assume cs:_rdata$r
.rdata$r:00000E28                 ;org 0E28h
.rdata$r:00000E28 ; COMDAT (pick any)
.rdata$r:00000E28                 public ??_R1A@?0A@EA@CDecoder@NPpmdZip@NCompress@@8
.rdata$r:00000E28 ; NCompress::NPpmdZip::CDecoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000E28 ??_R1A@?0A@EA@CDecoder@NPpmdZip@NCompress@@8 dd offset ??_R0?AVCDecoder@NPpmdZip@NCompress@@@8
.rdata$r:00000E28                                         ; DATA XREF: .rdata$r:NCompress::NPpmdZip::CDecoder::`RTTI Base Class Array'o
.rdata$r:00000E28                                         ; NCompress::NPpmdZip::CDecoder `RTTI Type Descriptor'
.rdata$r:00000E2C                 db    3
.rdata$r:00000E2D                 db    0
.rdata$r:00000E2E                 db    0
.rdata$r:00000E2F                 db    0
.rdata$r:00000E30                 db    0
.rdata$r:00000E31                 db    0
.rdata$r:00000E32                 db    0
.rdata$r:00000E33                 db    0
.rdata$r:00000E34                 db 0FFh
.rdata$r:00000E35                 db 0FFh
.rdata$r:00000E36                 db 0FFh
.rdata$r:00000E37                 db 0FFh
.rdata$r:00000E38                 db    0
.rdata$r:00000E39                 db    0
.rdata$r:00000E3A                 db    0
.rdata$r:00000E3B                 db    0
.rdata$r:00000E3C                 db  40h ; @
.rdata$r:00000E3D                 db    0
.rdata$r:00000E3E                 db    0
.rdata$r:00000E3F                 db    0
.rdata$r:00000E40                 dd offset ??_R3CDecoder@NPpmdZip@NCompress@@8 ; NCompress::NPpmdZip::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000E40 _rdata$r        ends
.rdata$r:00000E40
.rdata$r:00000E44 ; ===========================================================================
.rdata$r:00000E44
.rdata$r:00000E44 ; Segment type: Pure data
.rdata$r:00000E44 ; Segment permissions: Read
.rdata$r:00000E44 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000E44                 assume cs:_rdata$r
.rdata$r:00000E44                 ;org 0E44h
.rdata$r:00000E44 ; COMDAT (pick any)
.rdata$r:00000E44                 public ??_R1A@?0A@EA@ICompressCoder@@8
.rdata$r:00000E44 ; ICompressCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000E44 ??_R1A@?0A@EA@ICompressCoder@@8 dd offset ??_R0?AUICompressCoder@@@8
.rdata$r:00000E44                                         ; DATA XREF: .rdata$r:00000E18o
.rdata$r:00000E44                                         ; .rdata$r:ICompressCoder::`RTTI Base Class Array'o ...
.rdata$r:00000E44                                         ; ICompressCoder `RTTI Type Descriptor'
.rdata$r:00000E48                 db    1
.rdata$r:00000E49                 db    0
.rdata$r:00000E4A                 db    0
.rdata$r:00000E4B                 db    0
.rdata$r:00000E4C                 db    0
.rdata$r:00000E4D                 db    0
.rdata$r:00000E4E                 db    0
.rdata$r:00000E4F                 db    0
.rdata$r:00000E50                 db 0FFh
.rdata$r:00000E51                 db 0FFh
.rdata$r:00000E52                 db 0FFh
.rdata$r:00000E53                 db 0FFh
.rdata$r:00000E54                 db    0
.rdata$r:00000E55                 db    0
.rdata$r:00000E56                 db    0
.rdata$r:00000E57                 db    0
.rdata$r:00000E58                 db  40h ; @
.rdata$r:00000E59                 db    0
.rdata$r:00000E5A                 db    0
.rdata$r:00000E5B                 db    0
.rdata$r:00000E5C                 dd offset ??_R3ICompressCoder@@8 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000E5C _rdata$r        ends
.rdata$r:00000E5C
.data:00000E60 ; ===========================================================================
.data:00000E60
.data:00000E60 ; Segment type: Pure data
.data:00000E60 ; Segment permissions: Read/Write
.data:00000E60 _data           segment dword public 'DATA' use32
.data:00000E60                 assume cs:_data
.data:00000E60                 ;org 0E60h
.data:00000E60 ; COMDAT (pick any)
.data:00000E60                 public ??_R0?AUICompressCoder@@@8
.data:00000E60 ; struct ICompressCoder `RTTI Type Descriptor'
.data:00000E60 ??_R0?AUICompressCoder@@@8 dd offset ??_7type_info@@6B@
.data:00000E60                                         ; DATA XREF: .rdata$r:ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000E60                                         ; .rdata$r:00001178o
.data:00000E60                                         ; const type_info::`vftable'
.data:00000E64                 align 8
.data:00000E68 a_?auicompressc db '.?AUICompressCoder@@',0
.data:00000E7D                 align 10h
.data:00000E7D _data           ends
.data:00000E7D
.rdata$r:00000E80 ; ===========================================================================
.rdata$r:00000E80
.rdata$r:00000E80 ; Segment type: Pure data
.rdata$r:00000E80 ; Segment permissions: Read
.rdata$r:00000E80 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000E80                 assume cs:_rdata$r
.rdata$r:00000E80                 ;org 0E80h
.rdata$r:00000E80 ; COMDAT (pick any)
.rdata$r:00000E80                 public ??_R3ICompressCoder@@8
.rdata$r:00000E80 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000E80 ??_R3ICompressCoder@@8 db    0          ; DATA XREF: .rdata$r:00000E5Co
.rdata$r:00000E80                                         ; .rdata$r:0000117Co
.rdata$r:00000E81                 db    0
.rdata$r:00000E82                 db    0
.rdata$r:00000E83                 db    0
.rdata$r:00000E84                 db    0
.rdata$r:00000E85                 db    0
.rdata$r:00000E86                 db    0
.rdata$r:00000E87                 db    0
.rdata$r:00000E88                 db    2
.rdata$r:00000E89                 db    0
.rdata$r:00000E8A                 db    0
.rdata$r:00000E8B                 db    0
.rdata$r:00000E8C                 dd offset ??_R2ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Array'
.rdata$r:00000E8C _rdata$r        ends
.rdata$r:00000E8C
.rdata$r:00000E90 ; ===========================================================================
.rdata$r:00000E90
.rdata$r:00000E90 ; Segment type: Pure data
.rdata$r:00000E90 ; Segment permissions: Read
.rdata$r:00000E90 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000E90                 assume cs:_rdata$r
.rdata$r:00000E90                 ;org 0E90h
.rdata$r:00000E90 ; COMDAT (pick any)
.rdata$r:00000E90                 public ??_R2ICompressCoder@@8
.rdata$r:00000E90 ; ICompressCoder::`RTTI Base Class Array'
.rdata$r:00000E90 ??_R2ICompressCoder@@8 dd offset ??_R1A@?0A@EA@ICompressCoder@@8
.rdata$r:00000E90                                         ; DATA XREF: .rdata$r:00000E8Co
.rdata$r:00000E90                                         ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000E94                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000E98                 db    0
.rdata$r:00000E99                 align 4
.rdata$r:00000E99 _rdata$r        ends
.rdata$r:00000E99
.rdata$r:00000E9C ; ===========================================================================
.rdata$r:00000E9C
.rdata$r:00000E9C ; Segment type: Pure data
.rdata$r:00000E9C ; Segment permissions: Read
.rdata$r:00000E9C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000E9C                 assume cs:_rdata$r
.rdata$r:00000E9C                 ;org 0E9Ch
.rdata$r:00000E9C ; COMDAT (pick any)
.rdata$r:00000E9C                 public ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00000E9C ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000E9C ??_R1A@?0A@EA@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00000E9C                                         ; DATA XREF: .rdata$r:00000E1Co
.rdata$r:00000E9C                                         ; .rdata$r:00000E94o ...
.rdata$r:00000E9C                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00000EA0                 db    0
.rdata$r:00000EA1                 db    0
.rdata$r:00000EA2                 db    0
.rdata$r:00000EA3                 db    0
.rdata$r:00000EA4                 db    0
.rdata$r:00000EA5                 db    0
.rdata$r:00000EA6                 db    0
.rdata$r:00000EA7                 db    0
.rdata$r:00000EA8                 db 0FFh
.rdata$r:00000EA9                 db 0FFh
.rdata$r:00000EAA                 db 0FFh
.rdata$r:00000EAB                 db 0FFh
.rdata$r:00000EAC                 db    0
.rdata$r:00000EAD                 db    0
.rdata$r:00000EAE                 db    0
.rdata$r:00000EAF                 db    0
.rdata$r:00000EB0                 db  40h ; @
.rdata$r:00000EB1                 db    0
.rdata$r:00000EB2                 db    0
.rdata$r:00000EB3                 db    0
.rdata$r:00000EB4                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000EB4 _rdata$r        ends
.rdata$r:00000EB4
.data:00000EB8 ; ===========================================================================
.data:00000EB8
.data:00000EB8 ; Segment type: Pure data
.data:00000EB8 ; Segment permissions: Read/Write
.data:00000EB8 _data           segment dword public 'DATA' use32
.data:00000EB8                 assume cs:_data
.data:00000EB8                 ;org 0EB8h
.data:00000EB8 ; COMDAT (pick any)
.data:00000EB8                 public ??_R0?AUIUnknown@@@8
.data:00000EB8 ; struct IUnknown `RTTI Type Descriptor'
.data:00000EB8 ??_R0?AUIUnknown@@@8 dd offset ??_7type_info@@6B@
.data:00000EB8                                         ; DATA XREF: .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000EB8                                         ; .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'o ...
.data:00000EB8                                         ; const type_info::`vftable'
.data:00000EBC                 align 10h
.data:00000EC0 a_?auiunknown@@ db '.?AUIUnknown@@',0
.data:00000ECF                 align 10h
.data:00000ECF _data           ends
.data:00000ECF
.rdata$r:00000ED0 ; ===========================================================================
.rdata$r:00000ED0
.rdata$r:00000ED0 ; Segment type: Pure data
.rdata$r:00000ED0 ; Segment permissions: Read
.rdata$r:00000ED0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000ED0                 assume cs:_rdata$r
.rdata$r:00000ED0                 ;org 0ED0h
.rdata$r:00000ED0 ; COMDAT (pick any)
.rdata$r:00000ED0                 public ??_R3IUnknown@@8
.rdata$r:00000ED0 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000ED0 ??_R3IUnknown@@8 db    0                ; DATA XREF: .rdata$r:00000EB4o
.rdata$r:00000ED0                                         ; .rdata$r:00001398o ...
.rdata$r:00000ED1                 db    0
.rdata$r:00000ED2                 db    0
.rdata$r:00000ED3                 db    0
.rdata$r:00000ED4                 db    0
.rdata$r:00000ED5                 db    0
.rdata$r:00000ED6                 db    0
.rdata$r:00000ED7                 db    0
.rdata$r:00000ED8                 db    1
.rdata$r:00000ED9                 db    0
.rdata$r:00000EDA                 db    0
.rdata$r:00000EDB                 db    0
.rdata$r:00000EDC                 dd offset ??_R2IUnknown@@8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00000EDC _rdata$r        ends
.rdata$r:00000EDC
.rdata$r:00000EE0 ; ===========================================================================
.rdata$r:00000EE0
.rdata$r:00000EE0 ; Segment type: Pure data
.rdata$r:00000EE0 ; Segment permissions: Read
.rdata$r:00000EE0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000EE0                 assume cs:_rdata$r
.rdata$r:00000EE0                 ;org 0EE0h
.rdata$r:00000EE0 ; COMDAT (pick any)
.rdata$r:00000EE0                 public ??_R2IUnknown@@8
.rdata$r:00000EE0 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00000EE0 ??_R2IUnknown@@8 dd offset ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00000EE0                                         ; DATA XREF: .rdata$r:00000EDCo
.rdata$r:00000EE0                                         ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000EE4                 db    0
.rdata$r:00000EE5                 align 4
.rdata$r:00000EE5 _rdata$r        ends
.rdata$r:00000EE5
.rdata$r:00000EE8 ; ===========================================================================
.rdata$r:00000EE8
.rdata$r:00000EE8 ; Segment type: Pure data
.rdata$r:00000EE8 ; Segment permissions: Read
.rdata$r:00000EE8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000EE8                 assume cs:_rdata$r
.rdata$r:00000EE8                 ;org 0EE8h
.rdata$r:00000EE8 ; COMDAT (pick any)
.rdata$r:00000EE8                 public ??_R13?0A@EA@CMyUnknownImp@@8
.rdata$r:00000EE8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:00000EE8 ??_R13?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00000EE8                                         ; DATA XREF: .rdata$r:00000E20o
.rdata$r:00000EE8                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00000EEC                 align 10h
.rdata$r:00000EF0                 db    4
.rdata$r:00000EF1                 db    0
.rdata$r:00000EF2                 db    0
.rdata$r:00000EF3                 db    0
.rdata$r:00000EF4                 db 0FFh
.rdata$r:00000EF5                 db 0FFh
.rdata$r:00000EF6                 db 0FFh
.rdata$r:00000EF7                 db 0FFh
.rdata$r:00000EF8                 db    0
.rdata$r:00000EF9                 db    0
.rdata$r:00000EFA                 db    0
.rdata$r:00000EFB                 db    0
.rdata$r:00000EFC                 db  40h ; @
.rdata$r:00000EFD                 db    0
.rdata$r:00000EFE                 db    0
.rdata$r:00000EFF                 db    0
.rdata$r:00000F00                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000F00 _rdata$r        ends
.rdata$r:00000F00
.data:00000F04 ; ===========================================================================
.data:00000F04
.data:00000F04 ; Segment type: Pure data
.data:00000F04 ; Segment permissions: Read/Write
.data:00000F04 _data           segment dword public 'DATA' use32
.data:00000F04                 assume cs:_data
.data:00000F04                 ;org 0F04h
.data:00000F04 ; COMDAT (pick any)
.data:00000F04                 public ??_R0?AVCMyUnknownImp@@@8
.data:00000F04 ; class CMyUnknownImp `RTTI Type Descriptor'
.data:00000F04 ??_R0?AVCMyUnknownImp@@@8 dd offset ??_7type_info@@6B@
.data:00000F04                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:00000F04                                         ; .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00000F04                                         ; const type_info::`vftable'
.data:00000F08                 db    0
.data:00000F09                 db    0
.data:00000F0A                 db    0
.data:00000F0B                 db    0
.data:00000F0C                 db  2Eh ; .
.data:00000F0D                 db  3Fh ; ?
.data:00000F0E                 db  41h ; A
.data:00000F0F                 db  56h ; V
.data:00000F10                 db  43h ; C
.data:00000F11                 db  4Dh ; M
.data:00000F12                 db  79h ; y
.data:00000F13                 db  55h ; U
.data:00000F14                 db  6Eh ; n
.data:00000F15                 db  6Bh ; k
.data:00000F16                 db  6Eh ; n
.data:00000F17                 db  6Fh ; o
.data:00000F18                 db  77h ; w
.data:00000F19                 db  6Eh ; n
.data:00000F1A                 db  49h ; I
.data:00000F1B                 db  6Dh ; m
.data:00000F1C                 db  70h ; p
.data:00000F1D                 db  40h ; @
.data:00000F1E                 db  40h ; @
.data:00000F1F                 db    0
.data:00000F1F _data           ends
.data:00000F1F
.rdata$r:00000F20 ; ===========================================================================
.rdata$r:00000F20
.rdata$r:00000F20 ; Segment type: Pure data
.rdata$r:00000F20 ; Segment permissions: Read
.rdata$r:00000F20 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000F20                 assume cs:_rdata$r
.rdata$r:00000F20                 ;org 0F20h
.rdata$r:00000F20 ; COMDAT (pick any)
.rdata$r:00000F20                 public ??_R3CMyUnknownImp@@8
.rdata$r:00000F20 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000F20 ??_R3CMyUnknownImp@@8 db    0           ; DATA XREF: .rdata$r:00000F00o
.rdata$r:00000F20                                         ; .rdata$r:00000F50o ...
.rdata$r:00000F21                 db    0
.rdata$r:00000F22                 db    0
.rdata$r:00000F23                 db    0
.rdata$r:00000F24                 db    0
.rdata$r:00000F25                 db    0
.rdata$r:00000F26                 db    0
.rdata$r:00000F27                 db    0
.rdata$r:00000F28                 db    1
.rdata$r:00000F29                 db    0
.rdata$r:00000F2A                 db    0
.rdata$r:00000F2B                 db    0
.rdata$r:00000F2C                 dd offset ??_R2CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00000F2C _rdata$r        ends
.rdata$r:00000F2C
.rdata$r:00000F30 ; ===========================================================================
.rdata$r:00000F30
.rdata$r:00000F30 ; Segment type: Pure data
.rdata$r:00000F30 ; Segment permissions: Read
.rdata$r:00000F30 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000F30                 assume cs:_rdata$r
.rdata$r:00000F30                 ;org 0F30h
.rdata$r:00000F30 ; COMDAT (pick any)
.rdata$r:00000F30                 public ??_R2CMyUnknownImp@@8
.rdata$r:00000F30 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00000F30 ??_R2CMyUnknownImp@@8 dd offset ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00000F30                                         ; DATA XREF: .rdata$r:00000F2Co
.rdata$r:00000F30                                         ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000F34                 db    0
.rdata$r:00000F35                 align 4
.rdata$r:00000F35 _rdata$r        ends
.rdata$r:00000F35
.rdata$r:00000F38 ; ===========================================================================
.rdata$r:00000F38
.rdata$r:00000F38 ; Segment type: Pure data
.rdata$r:00000F38 ; Segment permissions: Read
.rdata$r:00000F38 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000F38                 assume cs:_rdata$r
.rdata$r:00000F38                 ;org 0F38h
.rdata$r:00000F38 ; COMDAT (pick any)
.rdata$r:00000F38                 public ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00000F38 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000F38 ??_R1A@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00000F38                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Array'o
.rdata$r:00000F38                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00000F3C                 db    0
.rdata$r:00000F3D                 db    0
.rdata$r:00000F3E                 db    0
.rdata$r:00000F3F                 db    0
.rdata$r:00000F40                 db    0
.rdata$r:00000F41                 db    0
.rdata$r:00000F42                 db    0
.rdata$r:00000F43                 db    0
.rdata$r:00000F44                 db 0FFh
.rdata$r:00000F45                 db 0FFh
.rdata$r:00000F46                 db 0FFh
.rdata$r:00000F47                 db 0FFh
.rdata$r:00000F48                 db    0
.rdata$r:00000F49                 db    0
.rdata$r:00000F4A                 db    0
.rdata$r:00000F4B                 db    0
.rdata$r:00000F4C                 db  40h ; @
.rdata$r:00000F4D                 db    0
.rdata$r:00000F4E                 db    0
.rdata$r:00000F4F                 db    0
.rdata$r:00000F50                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000F50 _rdata$r        ends
.rdata$r:00000F50
.text:00000F54 ; ===========================================================================
.text:00000F54
.text:00000F54 ; Segment type: Pure code
.text:00000F54 ; Segment permissions: Read/Execute
.text:00000F54 _text           segment para public 'CODE' use32
.text:00000F54                 assume cs:_text
.text:00000F54                 ;org 0F54h
.text:00000F54 ; COMDAT (pick any)
.text:00000F54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000F54
.text:00000F54 ; =============== S U B R O U T I N E =======================================
.text:00000F54
.text:00000F54 ; Attributes: bp-based frame
.text:00000F54
.text:00000F54 ; _DWORD __thiscall CMyUnknownImp::CMyUnknownImp(CMyUnknownImp *__hidden this)
.text:00000F54                 public ??0CMyUnknownImp@@QAE@XZ
.text:00000F54 ??0CMyUnknownImp@@QAE@XZ proc near      ; CODE XREF: NCompress::NPpmdZip::CDecoder::CDecoder(bool)+3Bp
.text:00000F54                                         ; NCompress::NPpmdZip::CEncoder::CEncoder(void)+46p
.text:00000F54
.text:00000F54 var_4           = dword ptr -4
.text:00000F54
.text:00000F54                 push    ebp
.text:00000F55                 mov     ebp, esp
.text:00000F57                 push    ecx
.text:00000F58                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000F5F                 mov     [ebp+var_4], ecx
.text:00000F62                 mov     eax, [ebp+var_4]
.text:00000F65                 mov     dword ptr [eax], 0
.text:00000F6B                 mov     eax, [ebp+var_4]
.text:00000F6E                 mov     esp, ebp
.text:00000F70                 pop     ebp
.text:00000F71                 retn
.text:00000F71 ??0CMyUnknownImp@@QAE@XZ endp
.text:00000F71
.text:00000F71 ; ---------------------------------------------------------------------------
.text:00000F72                 align 4
.text:00000F72 _text           ends
.text:00000F72
.text:00000F74 ; ===========================================================================
.text:00000F74
.text:00000F74 ; Segment type: Pure code
.text:00000F74 ; Segment permissions: Read/Execute
.text:00000F74 _text           segment para public 'CODE' use32
.text:00000F74                 assume cs:_text
.text:00000F74                 ;org 0F74h
.text:00000F74 ; COMDAT (pick any)
.text:00000F74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000F74
.text:00000F74 ; =============== S U B R O U T I N E =======================================
.text:00000F74
.text:00000F74 ; Attributes: bp-based frame
.text:00000F74
.text:00000F74 ; _DWORD __thiscall CByteInBufWrap::~CByteInBufWrap(CByteInBufWrap *__hidden this)
.text:00000F74                 public ??1CByteInBufWrap@@QAE@XZ
.text:00000F74 ??1CByteInBufWrap@@QAE@XZ proc near     ; CODE XREF: NCompress::NPpmdZip::CDecoder::~CDecoder(void)+66p
.text:00000F74                                         ; __unwindfunclet$??0CDecoder@NPpmdZip@NCompress@@QAE@_N@Z$0+6j ...
.text:00000F74
.text:00000F74 var_4           = dword ptr -4
.text:00000F74
.text:00000F74                 push    ebp
.text:00000F75                 mov     ebp, esp
.text:00000F77                 push    ecx
.text:00000F78                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000F7F                 mov     [ebp+var_4], ecx
.text:00000F82                 mov     ecx, [ebp+var_4] ; this
.text:00000F85                 call    ?Free@CByteInBufWrap@@QAEXXZ ; CByteInBufWrap::Free(void)
.text:00000F8A                 add     esp, 4
.text:00000F8D                 cmp     ebp, esp
.text:00000F8F                 call    __RTC_CheckEsp
.text:00000F94                 mov     esp, ebp
.text:00000F96                 pop     ebp
.text:00000F97                 retn
.text:00000F97 ??1CByteInBufWrap@@QAE@XZ endp
.text:00000F97
.text:00000F97 _text           ends
.text:00000F97
.text:00000F98 ; ===========================================================================
.text:00000F98
.text:00000F98 ; Segment type: Pure code
.text:00000F98 ; Segment permissions: Read/Execute
.text:00000F98 _text           segment para public 'CODE' use32
.text:00000F98                 assume cs:_text
.text:00000F98                 ;org 0F98h
.text:00000F98 ; COMDAT (pick any)
.text:00000F98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000F98
.text:00000F98 ; =============== S U B R O U T I N E =======================================
.text:00000F98
.text:00000F98 ; Attributes: bp-based frame
.text:00000F98
.text:00000F98 ; _DWORD __thiscall NCompress::NPpmdZip::CBuf::CBuf(NCompress::NPpmdZip::CBuf *__hidden this)
.text:00000F98                 public ??0CBuf@NPpmdZip@NCompress@@QAE@XZ
.text:00000F98 ??0CBuf@NPpmdZip@NCompress@@QAE@XZ proc near
.text:00000F98                                         ; CODE XREF: NCompress::NPpmdZip::CDecoder::CDecoder(bool)+61p
.text:00000F98                                         ; NCompress::NPpmdZip::CEncoder::CEncoder(void)+76p
.text:00000F98
.text:00000F98 var_4           = dword ptr -4
.text:00000F98
.text:00000F98                 push    ebp
.text:00000F99                 mov     ebp, esp
.text:00000F9B                 push    ecx
.text:00000F9C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000FA3                 mov     [ebp+var_4], ecx
.text:00000FA6                 mov     eax, [ebp+var_4]
.text:00000FA9                 mov     dword ptr [eax], 0
.text:00000FAF                 mov     eax, [ebp+var_4]
.text:00000FB2                 mov     esp, ebp
.text:00000FB4                 pop     ebp
.text:00000FB5                 retn
.text:00000FB5 ??0CBuf@NPpmdZip@NCompress@@QAE@XZ endp
.text:00000FB5
.text:00000FB5 ; ---------------------------------------------------------------------------
.text:00000FB6                 align 4
.text:00000FB6 _text           ends
.text:00000FB6
.text:00000FB8 ; ===========================================================================
.text:00000FB8
.text:00000FB8 ; Segment type: Pure code
.text:00000FB8 ; Segment permissions: Read/Execute
.text:00000FB8 _text           segment para public 'CODE' use32
.text:00000FB8                 assume cs:_text
.text:00000FB8                 ;org 0FB8h
.text:00000FB8 ; COMDAT (pick any)
.text:00000FB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000FB8
.text:00000FB8 ; =============== S U B R O U T I N E =======================================
.text:00000FB8
.text:00000FB8 ; Attributes: bp-based frame
.text:00000FB8
.text:00000FB8 ; __int32 __stdcall NCompress::NPpmdZip::CDecoder::QueryInterface(NCompress::NPpmdZip::CDecoder *this, const struct _GUID *Buf1, void **)
.text:00000FB8                 public ?QueryInterface@CDecoder@NPpmdZip@NCompress@@UAGJABU_GUID@@PAPAX@Z
.text:00000FB8 ?QueryInterface@CDecoder@NPpmdZip@NCompress@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00000FB8                                         ; DATA XREF: .rdata:const NCompress::NPpmdZip::CDecoder::`vftable'o
.text:00000FB8
.text:00000FB8 this            = dword ptr  8
.text:00000FB8 Buf1            = dword ptr  0Ch
.text:00000FB8 arg_8           = dword ptr  10h
.text:00000FB8
.text:00000FB8                 push    ebp
.text:00000FB9                 mov     ebp, esp
.text:00000FBB                 mov     eax, [ebp+arg_8]
.text:00000FBE                 mov     dword ptr [eax], 0
.text:00000FC4                 push    offset _IID_IUnknown ; Buf2
.text:00000FC9                 mov     ecx, [ebp+Buf1]
.text:00000FCC                 push    ecx             ; Buf1
.text:00000FCD                 call    ___@8           ; __(x,x)
.text:00000FD2                 test    eax, eax
.text:00000FD4                 jz      short loc_FE0
.text:00000FD6                 mov     edx, [ebp+arg_8]
.text:00000FD9                 mov     eax, [ebp+this]
.text:00000FDC                 mov     [edx], eax
.text:00000FDE                 jmp     short loc_FE7
.text:00000FE0 ; ---------------------------------------------------------------------------
.text:00000FE0
.text:00000FE0 loc_FE0:                                ; CODE XREF: NCompress::NPpmdZip::CDecoder::QueryInterface(_GUID const &,void * *)+1Cj
.text:00000FE0                 mov     eax, 80004002h
.text:00000FE5                 jmp     short loc_FF8
.text:00000FE7 ; ---------------------------------------------------------------------------
.text:00000FE7
.text:00000FE7 loc_FE7:                                ; CODE XREF: NCompress::NPpmdZip::CDecoder::QueryInterface(_GUID const &,void * *)+26j
.text:00000FE7                 mov     ecx, [ebp+this]
.text:00000FEA                 mov     edx, [ecx+4]
.text:00000FED                 add     edx, 1
.text:00000FF0                 mov     eax, [ebp+this]
.text:00000FF3                 mov     [eax+4], edx
.text:00000FF6                 xor     eax, eax
.text:00000FF8
.text:00000FF8 loc_FF8:                                ; CODE XREF: NCompress::NPpmdZip::CDecoder::QueryInterface(_GUID const &,void * *)+2Dj
.text:00000FF8                 cmp     ebp, esp
.text:00000FFA                 call    __RTC_CheckEsp
.text:00000FFF                 pop     ebp
.text:00001000                 retn    0Ch
.text:00001000 ?QueryInterface@CDecoder@NPpmdZip@NCompress@@UAGJABU_GUID@@PAPAX@Z endp
.text:00001000
.text:00001000 ; ---------------------------------------------------------------------------
.text:00001003                 align 4
.text:00001003 _text           ends
.text:00001003
.text:00001004 ; ===========================================================================
.text:00001004
.text:00001004 ; Segment type: Pure code
.text:00001004 ; Segment permissions: Read/Execute
.text:00001004 _text           segment para public 'CODE' use32
.text:00001004                 assume cs:_text
.text:00001004                 ;org 1004h
.text:00001004 ; COMDAT (pick any)
.text:00001004                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001004
.text:00001004 ; =============== S U B R O U T I N E =======================================
.text:00001004
.text:00001004 ; Attributes: bp-based frame
.text:00001004
.text:00001004 ; unsigned __int32 __stdcall NCompress::NPpmdZip::CDecoder::AddRef(NCompress::NPpmdZip::CDecoder *this)
.text:00001004                 public ?AddRef@CDecoder@NPpmdZip@NCompress@@UAGKXZ
.text:00001004 ?AddRef@CDecoder@NPpmdZip@NCompress@@UAGKXZ proc near
.text:00001004                                         ; DATA XREF: .rdata:00000CF8o
.text:00001004
.text:00001004 var_4           = dword ptr -4
.text:00001004 this            = dword ptr  8
.text:00001004
.text:00001004                 push    ebp
.text:00001005                 mov     ebp, esp
.text:00001007                 push    ecx
.text:00001008                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000100F                 mov     eax, [ebp+this]
.text:00001012                 mov     ecx, [eax+4]
.text:00001015                 add     ecx, 1
.text:00001018                 mov     [ebp+var_4], ecx
.text:0000101B                 mov     edx, [ebp+this]
.text:0000101E                 mov     eax, [ebp+var_4]
.text:00001021                 mov     [edx+4], eax
.text:00001024                 mov     eax, [ebp+var_4]
.text:00001027                 mov     esp, ebp
.text:00001029                 pop     ebp
.text:0000102A                 retn    4
.text:0000102A ?AddRef@CDecoder@NPpmdZip@NCompress@@UAGKXZ endp
.text:0000102A
.text:0000102A ; ---------------------------------------------------------------------------
.text:0000102D                 align 10h
.text:0000102D _text           ends
.text:0000102D
.text:00001030 ; ===========================================================================
.text:00001030
.text:00001030 ; Segment type: Pure code
.text:00001030 ; Segment permissions: Read/Execute
.text:00001030 _text           segment para public 'CODE' use32
.text:00001030                 assume cs:_text
.text:00001030                 ;org 1030h
.text:00001030 ; COMDAT (pick any)
.text:00001030                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001030
.text:00001030 ; =============== S U B R O U T I N E =======================================
.text:00001030
.text:00001030 ; Attributes: bp-based frame
.text:00001030
.text:00001030 ; int __stdcall __(void *Buf1, void *Buf2)
.text:00001030                 public ___@8
.text:00001030 ___@8           proc near               ; CODE XREF: NCompress::NPpmdZip::CDecoder::QueryInterface(_GUID const &,void * *)+15p
.text:00001030                                         ; NCompress::NPpmdZip::CEncoder::QueryInterface(_GUID const &,void * *)+26p ...
.text:00001030
.text:00001030 Buf1            = dword ptr  8
.text:00001030 Buf2            = dword ptr  0Ch
.text:00001030
.text:00001030                 push    ebp
.text:00001031                 mov     ebp, esp
.text:00001033                 mov     eax, [ebp+Buf2]
.text:00001036                 push    eax             ; Buf2
.text:00001037                 mov     ecx, [ebp+Buf1]
.text:0000103A                 push    ecx             ; Buf1
.text:0000103B                 call    _IsEqualGUID@8  ; IsEqualGUID(x,x)
.text:00001040                 cmp     ebp, esp
.text:00001042                 call    __RTC_CheckEsp
.text:00001047                 pop     ebp
.text:00001048                 retn    8
.text:00001048 ___@8           endp
.text:00001048
.text:00001048 ; ---------------------------------------------------------------------------
.text:0000104B                 align 4
.text:0000104B _text           ends
.text:0000104B
.text:0000104C ; ===========================================================================
.text:0000104C
.text:0000104C ; Segment type: Pure code
.text:0000104C ; Segment permissions: Read/Execute
.text:0000104C _text           segment para public 'CODE' use32
.text:0000104C                 assume cs:_text
.text:0000104C                 ;org 104Ch
.text:0000104C ; COMDAT (pick any)
.text:0000104C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000104C
.text:0000104C ; =============== S U B R O U T I N E =======================================
.text:0000104C
.text:0000104C ; Attributes: bp-based frame
.text:0000104C
.text:0000104C ; int __stdcall IsEqualGUID(void *Buf1, void *Buf2)
.text:0000104C                 public _IsEqualGUID@8
.text:0000104C _IsEqualGUID@8  proc near               ; CODE XREF: __(x,x)+Bp
.text:0000104C
.text:0000104C Buf1            = dword ptr  8
.text:0000104C Buf2            = dword ptr  0Ch
.text:0000104C
.text:0000104C                 push    ebp
.text:0000104D                 mov     ebp, esp
.text:0000104F                 push    10h             ; Size
.text:00001051                 mov     eax, [ebp+Buf2]
.text:00001054                 push    eax             ; Buf2
.text:00001055                 mov     ecx, [ebp+Buf1]
.text:00001058                 push    ecx             ; Buf1
.text:00001059                 call    _memcmp
.text:0000105E                 add     esp, 0Ch
.text:00001061                 neg     eax
.text:00001063                 sbb     eax, eax
.text:00001065                 add     eax, 1
.text:00001068                 cmp     ebp, esp
.text:0000106A                 call    __RTC_CheckEsp
.text:0000106F                 pop     ebp
.text:00001070                 retn    8
.text:00001070 _IsEqualGUID@8  endp
.text:00001070
.text:00001070 ; ---------------------------------------------------------------------------
.text:00001073                 align 4
.text:00001073 _text           ends
.text:00001073
.text:00001074 ; ===========================================================================
.text:00001074
.text:00001074 ; Segment type: Pure code
.text:00001074 ; Segment permissions: Read/Execute
.text:00001074 _text           segment para public 'CODE' use32
.text:00001074                 assume cs:_text
.text:00001074                 ;org 1074h
.text:00001074 ; COMDAT (pick any)
.text:00001074                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001074
.text:00001074 ; =============== S U B R O U T I N E =======================================
.text:00001074
.text:00001074 ; Attributes: bp-based frame
.text:00001074
.text:00001074 ; unsigned __int32 __stdcall NCompress::NPpmdZip::CDecoder::Release(NCompress::NPpmdZip::CDecoder *this)
.text:00001074                 public ?Release@CDecoder@NPpmdZip@NCompress@@UAGKXZ
.text:00001074 ?Release@CDecoder@NPpmdZip@NCompress@@UAGKXZ proc near
.text:00001074                                         ; DATA XREF: .rdata:00000CFCo
.text:00001074
.text:00001074 var_10          = dword ptr -10h
.text:00001074 var_C           = dword ptr -0Ch
.text:00001074 var_8           = dword ptr -8
.text:00001074 var_4           = dword ptr -4
.text:00001074 this            = dword ptr  8
.text:00001074
.text:00001074                 push    ebp
.text:00001075                 mov     ebp, esp
.text:00001077                 sub     esp, 10h
.text:0000107A                 mov     eax, 0CCCCCCCCh
.text:0000107F                 mov     [ebp+var_10], eax
.text:00001082                 mov     [ebp+var_C], eax
.text:00001085                 mov     [ebp+var_8], eax
.text:00001088                 mov     [ebp+var_4], eax
.text:0000108B                 mov     eax, [ebp+this]
.text:0000108E                 mov     ecx, [eax+4]
.text:00001091                 sub     ecx, 1
.text:00001094                 mov     [ebp+var_C], ecx
.text:00001097                 mov     edx, [ebp+this]
.text:0000109A                 mov     eax, [ebp+var_C]
.text:0000109D                 mov     [edx+4], eax
.text:000010A0                 cmp     [ebp+var_C], 0
.text:000010A4                 jz      short loc_10AE
.text:000010A6                 mov     ecx, [ebp+this]
.text:000010A9                 mov     eax, [ecx+4]
.text:000010AC                 jmp     short loc_10D8
.text:000010AE ; ---------------------------------------------------------------------------
.text:000010AE
.text:000010AE loc_10AE:                               ; CODE XREF: NCompress::NPpmdZip::CDecoder::Release(void)+30j
.text:000010AE                 mov     edx, [ebp+this]
.text:000010B1                 mov     [ebp+var_8], edx
.text:000010B4                 mov     eax, [ebp+var_8]
.text:000010B7                 mov     [ebp+var_4], eax
.text:000010BA                 cmp     [ebp+var_4], 0
.text:000010BE                 jz      short loc_10CF
.text:000010C0                 push    1
.text:000010C2                 mov     ecx, [ebp+var_4]
.text:000010C5                 call    ??_GCDecoder@NPpmdZip@NCompress@@QAEPAXI@Z ; NCompress::NPpmdZip::CDecoder::`scalar deleting destructor'(uint)
.text:000010CA                 mov     [ebp+var_10], eax
.text:000010CD                 jmp     short loc_10D6
.text:000010CF ; ---------------------------------------------------------------------------
.text:000010CF
.text:000010CF loc_10CF:                               ; CODE XREF: NCompress::NPpmdZip::CDecoder::Release(void)+4Aj
.text:000010CF                 mov     [ebp+var_10], 0
.text:000010D6
.text:000010D6 loc_10D6:                               ; CODE XREF: NCompress::NPpmdZip::CDecoder::Release(void)+59j
.text:000010D6                 xor     eax, eax
.text:000010D8
.text:000010D8 loc_10D8:                               ; CODE XREF: NCompress::NPpmdZip::CDecoder::Release(void)+38j
.text:000010D8                 add     esp, 10h
.text:000010DB                 cmp     ebp, esp
.text:000010DD                 call    __RTC_CheckEsp
.text:000010E2                 mov     esp, ebp
.text:000010E4                 pop     ebp
.text:000010E5                 retn    4
.text:000010E5 ?Release@CDecoder@NPpmdZip@NCompress@@UAGKXZ endp
.text:000010E5
.text:000010E5 _text           ends
.text:000010E5
.text:000010E8 ; ===========================================================================
.text:000010E8
.text:000010E8 ; Segment type: Pure code
.text:000010E8 ; Segment permissions: Read/Execute
.text:000010E8 _text           segment para public 'CODE' use32
.text:000010E8                 assume cs:_text
.text:000010E8                 ;org 10E8h
.text:000010E8 ; COMDAT (pick any)
.text:000010E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000010E8
.text:000010E8 ; =============== S U B R O U T I N E =======================================
.text:000010E8
.text:000010E8 ; Attributes: bp-based frame
.text:000010E8
.text:000010E8 ; public: void * __thiscall NCompress::NPpmdZip::CDecoder::`scalar deleting destructor'(unsigned int)
.text:000010E8                 public ??_GCDecoder@NPpmdZip@NCompress@@QAEPAXI@Z
.text:000010E8 ??_GCDecoder@NPpmdZip@NCompress@@QAEPAXI@Z proc near
.text:000010E8                                         ; CODE XREF: NCompress::NPpmdZip::CDecoder::Release(void)+51p
.text:000010E8
.text:000010E8 var_4           = dword ptr -4
.text:000010E8 arg_0           = dword ptr  8
.text:000010E8
.text:000010E8                 push    ebp
.text:000010E9                 mov     ebp, esp
.text:000010EB                 push    ecx
.text:000010EC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000010F3                 mov     [ebp+var_4], ecx
.text:000010F6                 mov     ecx, [ebp+var_4] ; this
.text:000010F9                 call    ??1CDecoder@NPpmdZip@NCompress@@QAE@XZ ; NCompress::NPpmdZip::CDecoder::~CDecoder(void)
.text:000010FE                 mov     eax, [ebp+arg_0]
.text:00001101                 and     eax, 1
.text:00001104                 jz      short loc_1112
.text:00001106                 mov     ecx, [ebp+var_4]
.text:00001109                 push    ecx             ; void *
.text:0000110A                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000110F                 add     esp, 4
.text:00001112
.text:00001112 loc_1112:                               ; CODE XREF: NCompress::NPpmdZip::CDecoder::`scalar deleting destructor'(uint)+1Cj
.text:00001112                 mov     eax, [ebp+var_4]
.text:00001115                 add     esp, 4
.text:00001118                 cmp     ebp, esp
.text:0000111A                 call    __RTC_CheckEsp
.text:0000111F                 mov     esp, ebp
.text:00001121                 pop     ebp
.text:00001122                 retn    4
.text:00001122 ??_GCDecoder@NPpmdZip@NCompress@@QAEPAXI@Z endp
.text:00001122
.text:00001122 ; ---------------------------------------------------------------------------
.text:00001125                 align 4
.text:00001125 _text           ends
.text:00001125
.text:00001128 ; ===========================================================================
.text:00001128
.text:00001128 ; Segment type: Pure code
.text:00001128 ; Segment permissions: Read/Execute
.text:00001128 _text           segment para public 'CODE' use32
.text:00001128                 assume cs:_text
.text:00001128                 ;org 1128h
.text:00001128 ; COMDAT (pick any)
.text:00001128                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001128
.text:00001128 ; =============== S U B R O U T I N E =======================================
.text:00001128
.text:00001128 ; Attributes: bp-based frame
.text:00001128
.text:00001128 ; _DWORD __thiscall ICompressCoder::ICompressCoder(ICompressCoder *__hidden this)
.text:00001128                 public ??0ICompressCoder@@QAE@XZ
.text:00001128 ??0ICompressCoder@@QAE@XZ proc near     ; CODE XREF: NCompress::NPpmdZip::CDecoder::CDecoder(bool)+30p
.text:00001128                                         ; NCompress::NPpmdZip::CEncoder::CEncoder(void)+30p
.text:00001128
.text:00001128 var_4           = dword ptr -4
.text:00001128
.text:00001128                 push    ebp
.text:00001129                 mov     ebp, esp
.text:0000112B                 push    ecx
.text:0000112C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001133                 mov     [ebp+var_4], ecx
.text:00001136                 mov     ecx, [ebp+var_4]
.text:00001139                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:0000113E                 mov     eax, [ebp+var_4]
.text:00001141                 mov     dword ptr [eax], offset ??_7ICompressCoder@@6B@ ; const ICompressCoder::`vftable'
.text:00001147                 mov     eax, [ebp+var_4]
.text:0000114A                 add     esp, 4
.text:0000114D                 cmp     ebp, esp
.text:0000114F                 call    __RTC_CheckEsp
.text:00001154                 mov     esp, ebp
.text:00001156                 pop     ebp
.text:00001157                 retn
.text:00001157 ??0ICompressCoder@@QAE@XZ endp
.text:00001157
.text:00001157 _text           ends
.text:00001157
.rdata:00001158 ; ===========================================================================
.rdata:00001158
.rdata:00001158 ; Segment type: Pure data
.rdata:00001158 ; Segment permissions: Read
.rdata:00001158 _rdata          segment dword public 'DATA' use32
.rdata:00001158                 assume cs:_rdata
.rdata:00001158                 ;org 1158h
.rdata:00001158 ; COMDAT (pick largest)
.rdata:00001158                 dd offset ??_R4ICompressCoder@@6B@ ; const ICompressCoder::`RTTI Complete Object Locator'
.rdata:0000115C                 public ??_7ICompressCoder@@6B@
.rdata:0000115C ; const ICompressCoder::`vftable'
.rdata:0000115C ??_7ICompressCoder@@6B@ dd offset __purecall
.rdata:0000115C                                         ; DATA XREF: ICompressCoder::ICompressCoder(void)+19o
.rdata:00001160                 dd offset __purecall
.rdata:00001164                 dd offset __purecall
.rdata:00001168                 dd offset __purecall
.rdata:00001168 _rdata          ends
.rdata:00001168
.rdata$r:0000116C ; ===========================================================================
.rdata$r:0000116C
.rdata$r:0000116C ; Segment type: Pure data
.rdata$r:0000116C ; Segment permissions: Read
.rdata$r:0000116C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000116C                 assume cs:_rdata$r
.rdata$r:0000116C                 ;org 116Ch
.rdata$r:0000116C ; COMDAT (pick any)
.rdata$r:0000116C                 public ??_R4ICompressCoder@@6B@
.rdata$r:0000116C ; const ICompressCoder::`RTTI Complete Object Locator'
.rdata$r:0000116C ??_R4ICompressCoder@@6B@ db    0        ; DATA XREF: .rdata:00001158o
.rdata$r:0000116D                 db    0
.rdata$r:0000116E                 db    0
.rdata$r:0000116F                 db    0
.rdata$r:00001170                 db    0
.rdata$r:00001171                 db    0
.rdata$r:00001172                 db    0
.rdata$r:00001173                 db    0
.rdata$r:00001174                 db    0
.rdata$r:00001175                 db    0
.rdata$r:00001176                 db    0
.rdata$r:00001177                 db    0
.rdata$r:00001178                 dd offset ??_R0?AUICompressCoder@@@8 ; ICompressCoder `RTTI Type Descriptor'
.rdata$r:0000117C                 dd offset ??_R3ICompressCoder@@8 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000117C _rdata$r        ends
.rdata$r:0000117C
.text:00001180 ; ===========================================================================
.text:00001180
.text:00001180 ; Segment type: Pure code
.text:00001180 ; Segment permissions: Read/Execute
.text:00001180 _text           segment para public 'CODE' use32
.text:00001180                 assume cs:_text
.text:00001180                 ;org 1180h
.text:00001180 ; COMDAT (pick any)
.text:00001180                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001180
.text:00001180 ; =============== S U B R O U T I N E =======================================
.text:00001180
.text:00001180 ; Attributes: bp-based frame
.text:00001180
.text:00001180 ; public: __thiscall IUnknown::IUnknown(void)
.text:00001180                 public ??0IUnknown@@QAE@XZ
.text:00001180 ??0IUnknown@@QAE@XZ proc near           ; CODE XREF: ICompressCoder::ICompressCoder(void)+11p
.text:00001180                                         ; ICompressSetCoderProperties::ICompressSetCoderProperties(void)+11p
.text:00001180
.text:00001180 var_4           = dword ptr -4
.text:00001180
.text:00001180                 push    ebp
.text:00001181                 mov     ebp, esp
.text:00001183                 push    ecx
.text:00001184                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000118B                 mov     [ebp+var_4], ecx
.text:0000118E                 mov     eax, [ebp+var_4]
.text:00001191                 mov     esp, ebp
.text:00001193                 pop     ebp
.text:00001194                 retn
.text:00001194 ??0IUnknown@@QAE@XZ endp
.text:00001194
.text:00001194 ; ---------------------------------------------------------------------------
.text:00001195                 align 4
.text:00001195 _text           ends
.text:00001195
.text:00001198 ; ===========================================================================
.text:00001198
.text:00001198 ; Segment type: Pure code
.text:00001198 ; Segment permissions: Read/Execute
.text:00001198 _text           segment para public 'CODE' use32
.text:00001198                 assume cs:_text
.text:00001198                 ;org 1198h
.text:00001198 ; COMDAT (pick any)
.text:00001198                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001198
.text:00001198 ; =============== S U B R O U T I N E =======================================
.text:00001198
.text:00001198 ; Attributes: bp-based frame
.text:00001198
.text:00001198 ; _DWORD __thiscall NCompress::NPpmdZip::CBuf::~CBuf(NCompress::NPpmdZip::CBuf *__hidden this)
.text:00001198                 public ??1CBuf@NPpmdZip@NCompress@@QAE@XZ
.text:00001198 ??1CBuf@NPpmdZip@NCompress@@QAE@XZ proc near
.text:00001198                                         ; CODE XREF: NCompress::NPpmdZip::CDecoder::~CDecoder(void)+54p
.text:00001198                                         ; NCompress::NPpmdZip::CEncoder::~CEncoder(void)+5Ep ...
.text:00001198
.text:00001198 var_4           = dword ptr -4
.text:00001198
.text:00001198                 push    ebp
.text:00001199                 mov     ebp, esp
.text:0000119B                 push    ecx
.text:0000119C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000011A3                 mov     [ebp+var_4], ecx
.text:000011A6                 mov     eax, [ebp+var_4]
.text:000011A9                 mov     ecx, [eax]
.text:000011AB                 push    ecx
.text:000011AC                 call    _MidFree@4      ; MidFree(x)
.text:000011B1                 add     esp, 4
.text:000011B4                 cmp     ebp, esp
.text:000011B6                 call    __RTC_CheckEsp
.text:000011BB                 mov     esp, ebp
.text:000011BD                 pop     ebp
.text:000011BE                 retn
.text:000011BE ??1CBuf@NPpmdZip@NCompress@@QAE@XZ endp
.text:000011BE
.text:000011BE ; ---------------------------------------------------------------------------
.text:000011BF                 align 10h
.text:000011BF _text           ends
.text:000011BF
.text:000011C0 ; ===========================================================================
.text:000011C0
.text:000011C0 ; Segment type: Pure code
.text:000011C0 ; Segment permissions: Read/Execute
.text:000011C0 _text           segment para public 'CODE' use32
.text:000011C0                 assume cs:_text
.text:000011C0                 ;org 11C0h
.text:000011C0 ; COMDAT (pick any)
.text:000011C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000011C0
.text:000011C0 ; =============== S U B R O U T I N E =======================================
.text:000011C0
.text:000011C0 ; Attributes: bp-based frame
.text:000011C0
.text:000011C0 ; void __thiscall CByteInBufWrap::Init(CByteInBufWrap *__hidden this)
.text:000011C0                 public ?Init@CByteInBufWrap@@QAEXXZ
.text:000011C0 ?Init@CByteInBufWrap@@QAEXXZ proc near  ; CODE XREF: NCompress::NPpmdZip::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+66p
.text:000011C0
.text:000011C0 var_4           = dword ptr -4
.text:000011C0
.text:000011C0                 push    ebp
.text:000011C1                 mov     ebp, esp
.text:000011C3                 push    ecx
.text:000011C4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000011CB                 mov     [ebp+var_4], ecx
.text:000011CE                 mov     eax, [ebp+var_4]
.text:000011D1                 mov     ecx, [ebp+var_4]
.text:000011D4                 mov     edx, [ecx+0Ch]
.text:000011D7                 mov     [eax+4], edx
.text:000011DA                 mov     eax, [ebp+var_4]
.text:000011DD                 mov     ecx, [ebp+var_4]
.text:000011E0                 mov     edx, [ecx+4]
.text:000011E3                 mov     [eax+8], edx
.text:000011E6                 mov     eax, [ebp+var_4]
.text:000011E9                 mov     dword ptr [eax+18h], 0
.text:000011F0                 mov     dword ptr [eax+1Ch], 0
.text:000011F7                 mov     ecx, [ebp+var_4]
.text:000011FA                 mov     byte ptr [ecx+20h], 0
.text:000011FE                 mov     edx, [ebp+var_4]
.text:00001201                 mov     dword ptr [edx+24h], 0
.text:00001208                 mov     esp, ebp
.text:0000120A                 pop     ebp
.text:0000120B                 retn
.text:0000120B ?Init@CByteInBufWrap@@QAEXXZ endp
.text:0000120B
.text:0000120B _text           ends
.text:0000120B
.text:0000120C ; ===========================================================================
.text:0000120C
.text:0000120C ; Segment type: Pure code
.text:0000120C ; Segment permissions: Read/Execute
.text:0000120C _text           segment para public 'CODE' use32
.text:0000120C                 assume cs:_text
.text:0000120C                 ;org 120Ch
.text:0000120C ; COMDAT (pick any)
.text:0000120C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000120C
.text:0000120C ; =============== S U B R O U T I N E =======================================
.text:0000120C
.text:0000120C ; Attributes: bp-based frame
.text:0000120C
.text:0000120C ; unsigned __int64 __thiscall CByteInBufWrap::GetProcessed(CByteInBufWrap *__hidden this)
.text:0000120C                 public ?GetProcessed@CByteInBufWrap@@QBE_KXZ
.text:0000120C ?GetProcessed@CByteInBufWrap@@QBE_KXZ proc near
.text:0000120C                                         ; CODE XREF: NCompress::NPpmdZip::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+2B4p
.text:0000120C
.text:0000120C var_4           = dword ptr -4
.text:0000120C
.text:0000120C                 push    ebp
.text:0000120D                 mov     ebp, esp
.text:0000120F                 push    ecx
.text:00001210                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001217                 mov     [ebp+var_4], ecx
.text:0000121A                 mov     eax, [ebp+var_4]
.text:0000121D                 mov     ecx, [ebp+var_4]
.text:00001220                 mov     eax, [eax+4]
.text:00001223                 sub     eax, [ecx+0Ch]
.text:00001226                 cdq
.text:00001227                 mov     ecx, [ebp+var_4]
.text:0000122A                 add     eax, [ecx+18h]
.text:0000122D                 adc     edx, [ecx+1Ch]
.text:00001230                 mov     esp, ebp
.text:00001232                 pop     ebp
.text:00001233                 retn
.text:00001233 ?GetProcessed@CByteInBufWrap@@QBE_KXZ endp
.text:00001233
.text:00001233 _text           ends
.text:00001233
.text:00001234 ; ===========================================================================
.text:00001234
.text:00001234 ; Segment type: Pure code
.text:00001234 ; Segment permissions: Read/Execute
.text:00001234 _text           segment para public 'CODE' use32
.text:00001234                 assume cs:_text
.text:00001234                 ;org 1234h
.text:00001234 ; COMDAT (pick any)
.text:00001234                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001234
.text:00001234 ; =============== S U B R O U T I N E =======================================
.text:00001234
.text:00001234 ; Attributes: bp-based frame
.text:00001234
.text:00001234 ; unsigned __int8 __thiscall CByteInBufWrap::ReadByte(CByteInBufWrap *__hidden this)
.text:00001234                 public ?ReadByte@CByteInBufWrap@@QAEEXZ
.text:00001234 ?ReadByte@CByteInBufWrap@@QAEEXZ proc near
.text:00001234                                         ; CODE XREF: NCompress::NPpmdZip::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+89p
.text:00001234
.text:00001234 var_8           = dword ptr -8
.text:00001234 var_4           = dword ptr -4
.text:00001234
.text:00001234                 push    ebp
.text:00001235                 mov     ebp, esp
.text:00001237                 sub     esp, 8
.text:0000123A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001241                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001248                 mov     [ebp+var_4], ecx
.text:0000124B                 mov     eax, [ebp+var_4]
.text:0000124E                 mov     ecx, [ebp+var_4]
.text:00001251                 mov     edx, [eax+4]
.text:00001254                 cmp     edx, [ecx+8]
.text:00001257                 jz      short loc_1278
.text:00001259                 mov     eax, [ebp+var_4]
.text:0000125C                 mov     ecx, [eax+4]
.text:0000125F                 mov     dl, [ecx]
.text:00001261                 mov     byte ptr [ebp+var_8+3], dl
.text:00001264                 mov     eax, [ebp+var_4]
.text:00001267                 mov     ecx, [eax+4]
.text:0000126A                 add     ecx, 1
.text:0000126D                 mov     edx, [ebp+var_4]
.text:00001270                 mov     [edx+4], ecx
.text:00001273                 mov     al, byte ptr [ebp+var_8+3]
.text:00001276                 jmp     short loc_1280
.text:00001278 ; ---------------------------------------------------------------------------
.text:00001278
.text:00001278 loc_1278:                               ; CODE XREF: CByteInBufWrap::ReadByte(void)+23j
.text:00001278                 mov     ecx, [ebp+var_4] ; this
.text:0000127B                 call    ?ReadByteFromNewBlock@CByteInBufWrap@@QAEEXZ ; CByteInBufWrap::ReadByteFromNewBlock(void)
.text:00001280
.text:00001280 loc_1280:                               ; CODE XREF: CByteInBufWrap::ReadByte(void)+42j
.text:00001280                 add     esp, 8
.text:00001283                 cmp     ebp, esp
.text:00001285                 call    __RTC_CheckEsp
.text:0000128A                 mov     esp, ebp
.text:0000128C                 pop     ebp
.text:0000128D                 retn
.text:0000128D ?ReadByte@CByteInBufWrap@@QAEEXZ endp
.text:0000128D
.text:0000128D ; ---------------------------------------------------------------------------
.text:0000128E                 align 10h
.text:0000128E _text           ends
.text:0000128E
.text:00001290 ; ===========================================================================
.text:00001290
.text:00001290 ; Segment type: Pure code
.text:00001290 ; Segment permissions: Read/Execute
.text:00001290 _text           segment para public 'CODE' use32
.text:00001290                 assume cs:_text
.text:00001290                 ;org 1290h
.text:00001290 ; COMDAT (pick any)
.text:00001290                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001290
.text:00001290 ; =============== S U B R O U T I N E =======================================
.text:00001290
.text:00001290 ; Attributes: bp-based frame
.text:00001290
.text:00001290 ; bool __thiscall NCompress::NPpmdZip::CBuf::Alloc(NCompress::NPpmdZip::CBuf *__hidden this)
.text:00001290                 public ?Alloc@CBuf@NPpmdZip@NCompress@@QAE_NXZ
.text:00001290 ?Alloc@CBuf@NPpmdZip@NCompress@@QAE_NXZ proc near
.text:00001290                                         ; CODE XREF: NCompress::NPpmdZip::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+20p
.text:00001290                                         ; NCompress::NPpmdZip::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+1Dp
.text:00001290
.text:00001290 var_4           = dword ptr -4
.text:00001290
.text:00001290                 push    ebp
.text:00001291                 mov     ebp, esp
.text:00001293                 push    ecx
.text:00001294                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000129B                 mov     [ebp+var_4], ecx
.text:0000129E                 mov     eax, [ebp+var_4]
.text:000012A1                 cmp     dword ptr [eax], 0
.text:000012A4                 jnz     short loc_12B5
.text:000012A6                 push    100000h
.text:000012AB                 call    _MidAlloc@4     ; MidAlloc(x)
.text:000012B0                 mov     ecx, [ebp+var_4]
.text:000012B3                 mov     [ecx], eax
.text:000012B5
.text:000012B5 loc_12B5:                               ; CODE XREF: NCompress::NPpmdZip::CBuf::Alloc(void)+14j
.text:000012B5                 mov     edx, [ebp+var_4]
.text:000012B8                 xor     eax, eax
.text:000012BA                 cmp     dword ptr [edx], 0
.text:000012BD                 setnz   al
.text:000012C0                 add     esp, 4
.text:000012C3                 cmp     ebp, esp
.text:000012C5                 call    __RTC_CheckEsp
.text:000012CA                 mov     esp, ebp
.text:000012CC                 pop     ebp
.text:000012CD                 retn
.text:000012CD ?Alloc@CBuf@NPpmdZip@NCompress@@QAE_NXZ endp
.text:000012CD
.text:000012CD ; ---------------------------------------------------------------------------
.text:000012CE                 align 10h
.text:000012CE _text           ends
.text:000012CE
.rdata:000012D0 ; ===========================================================================
.rdata:000012D0
.rdata:000012D0 ; Segment type: Pure data
.rdata:000012D0 ; Segment permissions: Read
.rdata:000012D0 _rdata          segment dword public 'DATA' use32
.rdata:000012D0                 assume cs:_rdata
.rdata:000012D0                 ;org 12D0h
.rdata:000012D0 ; COMDAT (pick largest)
.rdata:000012D0                 dd offset ??_R4CEncoder@NPpmdZip@NCompress@@6BICompressSetCoderProperties@@@ ; const NCompress::NPpmdZip::CEncoder::`RTTI Complete Object Locator'{for `ICompressSetCoderProperties'}
.rdata:000012D4                 public ??_7CEncoder@NPpmdZip@NCompress@@6BICompressSetCoderProperties@@@
.rdata:000012D4 ; const NCompress::NPpmdZip::CEncoder::`vftable'{for `ICompressSetCoderProperties'}
.rdata:000012D4 ??_7CEncoder@NPpmdZip@NCompress@@6BICompressSetCoderProperties@@@ dd offset ?QueryInterface@CEncoder@NPpmdZip@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.rdata:000012D4                                         ; DATA XREF: NCompress::NPpmdZip::CEncoder::~CEncoder(void)+39o
.rdata:000012D4                                         ; NCompress::NPpmdZip::CEncoder::CEncoder(void)+57o
.rdata:000012D4                                         ; [thunk]:NCompress::NPpmdZip::CEncoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:000012D8                 dd offset ?AddRef@CEncoder@NPpmdZip@NCompress@@W3AGKXZ ; [thunk]:NCompress::NPpmdZip::CEncoder::AddRef`adjustor{4}' (void)
.rdata:000012DC                 dd offset ?Release@CEncoder@NPpmdZip@NCompress@@W3AGKXZ ; [thunk]:NCompress::NPpmdZip::CEncoder::Release`adjustor{4}' (void)
.rdata:000012E0                 dd offset ?SetCoderProperties@CEncoder@NPpmdZip@NCompress@@UAGJPBKPBUtagPROPVARIANT@@I@Z ; NCompress::NPpmdZip::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)
.rdata:000012E0 _rdata          ends
.rdata:000012E0
.rdata:000012E4 ; ===========================================================================
.rdata:000012E4
.rdata:000012E4 ; Segment type: Pure data
.rdata:000012E4 ; Segment permissions: Read
.rdata:000012E4 _rdata          segment dword public 'DATA' use32
.rdata:000012E4                 assume cs:_rdata
.rdata:000012E4                 ;org 12E4h
.rdata:000012E4 ; COMDAT (pick largest)
.rdata:000012E4                 dd offset ??_R4CEncoder@NPpmdZip@NCompress@@6BICompressCoder@@@ ; const NCompress::NPpmdZip::CEncoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata:000012E8                 public ??_7CEncoder@NPpmdZip@NCompress@@6BICompressCoder@@@
.rdata:000012E8 ; const NCompress::NPpmdZip::CEncoder::`vftable'{for `ICompressCoder'}
.rdata:000012E8 ??_7CEncoder@NPpmdZip@NCompress@@6BICompressCoder@@@ dd offset ?QueryInterface@CEncoder@NPpmdZip@NCompress@@UAGJABU_GUID@@PAPAX@Z
.rdata:000012E8                                         ; DATA XREF: NCompress::NPpmdZip::CEncoder::~CEncoder(void)+30o
.rdata:000012E8                                         ; NCompress::NPpmdZip::CEncoder::CEncoder(void)+4Eo
.rdata:000012E8                                         ; NCompress::NPpmdZip::CEncoder::QueryInterface(_GUID const &,void * *)
.rdata:000012EC                 dd offset ?AddRef@CEncoder@NPpmdZip@NCompress@@UAGKXZ ; NCompress::NPpmdZip::CEncoder::AddRef(void)
.rdata:000012F0                 dd offset ?Release@CEncoder@NPpmdZip@NCompress@@UAGKXZ ; NCompress::NPpmdZip::CEncoder::Release(void)
.rdata:000012F4                 dd offset ?Code@CEncoder@NPpmdZip@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ; NCompress::NPpmdZip::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)
.rdata:000012F4 _rdata          ends
.rdata:000012F4
.rdata$r:000012F8 ; ===========================================================================
.rdata$r:000012F8
.rdata$r:000012F8 ; Segment type: Pure data
.rdata$r:000012F8 ; Segment permissions: Read
.rdata$r:000012F8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000012F8                 assume cs:_rdata$r
.rdata$r:000012F8                 ;org 12F8h
.rdata$r:000012F8 ; COMDAT (pick any)
.rdata$r:000012F8                 public ??_R4CEncoder@NPpmdZip@NCompress@@6BICompressCoder@@@
.rdata$r:000012F8 ; const NCompress::NPpmdZip::CEncoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata$r:000012F8 ??_R4CEncoder@NPpmdZip@NCompress@@6BICompressCoder@@@ db    0
.rdata$r:000012F8                                         ; DATA XREF: .rdata:000012E4o
.rdata$r:000012F9                 db    0
.rdata$r:000012FA                 db    0
.rdata$r:000012FB                 db    0
.rdata$r:000012FC                 db    0
.rdata$r:000012FD                 db    0
.rdata$r:000012FE                 db    0
.rdata$r:000012FF                 db    0
.rdata$r:00001300                 db    0
.rdata$r:00001301                 db    0
.rdata$r:00001302                 db    0
.rdata$r:00001303                 db    0
.rdata$r:00001304                 dd offset ??_R0?AVCEncoder@NPpmdZip@NCompress@@@8 ; NCompress::NPpmdZip::CEncoder `RTTI Type Descriptor'
.rdata$r:00001308                 dd offset ??_R3CEncoder@NPpmdZip@NCompress@@8 ; NCompress::NPpmdZip::CEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001308 _rdata$r        ends
.rdata$r:00001308
.data:0000130C ; ===========================================================================
.data:0000130C
.data:0000130C ; Segment type: Pure data
.data:0000130C ; Segment permissions: Read/Write
.data:0000130C _data           segment dword public 'DATA' use32
.data:0000130C                 assume cs:_data
.data:0000130C                 ;org 130Ch
.data:0000130C ; COMDAT (pick any)
.data:0000130C                 public ??_R0?AVCEncoder@NPpmdZip@NCompress@@@8
.data:0000130C ; class NCompress::NPpmdZip::CEncoder `RTTI Type Descriptor'
.data:0000130C ??_R0?AVCEncoder@NPpmdZip@NCompress@@@8 dd offset ??_7type_info@@6B@
.data:0000130C                                         ; DATA XREF: .rdata$r:00001304o
.data:0000130C                                         ; .rdata$r:NCompress::NPpmdZip::CEncoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:0000130C                                         ; const type_info::`vftable'
.data:00001310                 db    0
.data:00001311                 db    0
.data:00001312                 db    0
.data:00001313                 db    0
.data:00001314                 db  2Eh ; .
.data:00001315                 db  3Fh ; ?
.data:00001316                 db  41h ; A
.data:00001317                 db  56h ; V
.data:00001318                 db  43h ; C
.data:00001319                 db  45h ; E
.data:0000131A                 db  6Eh ; n
.data:0000131B                 db  63h ; c
.data:0000131C                 db  6Fh ; o
.data:0000131D                 db  64h ; d
.data:0000131E                 db  65h ; e
.data:0000131F                 db  72h ; r
.data:00001320                 db  40h ; @
.data:00001321                 db  4Eh ; N
.data:00001322                 db  50h ; P
.data:00001323                 db  70h ; p
.data:00001324                 db  6Dh ; m
.data:00001325                 db  64h ; d
.data:00001326                 db  5Ah ; Z
.data:00001327                 db  69h ; i
.data:00001328                 db  70h ; p
.data:00001329                 db  40h ; @
.data:0000132A                 db  4Eh ; N
.data:0000132B                 db  43h ; C
.data:0000132C                 db  6Fh ; o
.data:0000132D                 db  6Dh ; m
.data:0000132E                 db  70h ; p
.data:0000132F                 db  72h ; r
.data:00001330                 db  65h ; e
.data:00001331                 db  73h ; s
.data:00001332                 db  73h ; s
.data:00001333                 db  40h ; @
.data:00001334                 db  40h ; @
.data:00001335                 db    0
.data:00001336                 align 4
.data:00001336 _data           ends
.data:00001336
.rdata$r:00001338 ; ===========================================================================
.rdata$r:00001338
.rdata$r:00001338 ; Segment type: Pure data
.rdata$r:00001338 ; Segment permissions: Read
.rdata$r:00001338 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001338                 assume cs:_rdata$r
.rdata$r:00001338                 ;org 1338h
.rdata$r:00001338 ; COMDAT (pick any)
.rdata$r:00001338                 public ??_R3CEncoder@NPpmdZip@NCompress@@8
.rdata$r:00001338 ; NCompress::NPpmdZip::CEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001338 ??_R3CEncoder@NPpmdZip@NCompress@@8 db    0
.rdata$r:00001338                                         ; DATA XREF: .rdata$r:00001308o
.rdata$r:00001338                                         ; .rdata$r:0000137Co ...
.rdata$r:00001339                 db    0
.rdata$r:0000133A                 db    0
.rdata$r:0000133B                 db    0
.rdata$r:0000133C                 db    5
.rdata$r:0000133D                 db    0
.rdata$r:0000133E                 db    0
.rdata$r:0000133F                 db    0
.rdata$r:00001340                 db    6
.rdata$r:00001341                 db    0
.rdata$r:00001342                 db    0
.rdata$r:00001343                 db    0
.rdata$r:00001344                 dd offset ??_R2CEncoder@NPpmdZip@NCompress@@8 ; NCompress::NPpmdZip::CEncoder::`RTTI Base Class Array'
.rdata$r:00001344 _rdata$r        ends
.rdata$r:00001344
.rdata$r:00001348 ; ===========================================================================
.rdata$r:00001348
.rdata$r:00001348 ; Segment type: Pure data
.rdata$r:00001348 ; Segment permissions: Read
.rdata$r:00001348 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001348                 assume cs:_rdata$r
.rdata$r:00001348                 ;org 1348h
.rdata$r:00001348 ; COMDAT (pick any)
.rdata$r:00001348                 public ??_R2CEncoder@NPpmdZip@NCompress@@8
.rdata$r:00001348 ; NCompress::NPpmdZip::CEncoder::`RTTI Base Class Array'
.rdata$r:00001348 ??_R2CEncoder@NPpmdZip@NCompress@@8 dd offset ??_R1A@?0A@EA@CEncoder@NPpmdZip@NCompress@@8
.rdata$r:00001348                                         ; DATA XREF: .rdata$r:00001344o
.rdata$r:00001348                                         ; NCompress::NPpmdZip::CEncoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000134C                 dd offset ??_R1A@?0A@EA@ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001350                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:00001354                 dd offset ??_R13?0A@EA@ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00001358                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:0000135C                 dd offset ??_R17?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:00001360                 db    0
.rdata$r:00001361                 align 4
.rdata$r:00001361 _rdata$r        ends
.rdata$r:00001361
.rdata$r:00001364 ; ===========================================================================
.rdata$r:00001364
.rdata$r:00001364 ; Segment type: Pure data
.rdata$r:00001364 ; Segment permissions: Read
.rdata$r:00001364 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001364                 assume cs:_rdata$r
.rdata$r:00001364                 ;org 1364h
.rdata$r:00001364 ; COMDAT (pick any)
.rdata$r:00001364                 public ??_R1A@?0A@EA@CEncoder@NPpmdZip@NCompress@@8
.rdata$r:00001364 ; NCompress::NPpmdZip::CEncoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001364 ??_R1A@?0A@EA@CEncoder@NPpmdZip@NCompress@@8 dd offset ??_R0?AVCEncoder@NPpmdZip@NCompress@@@8
.rdata$r:00001364                                         ; DATA XREF: .rdata$r:NCompress::NPpmdZip::CEncoder::`RTTI Base Class Array'o
.rdata$r:00001364                                         ; NCompress::NPpmdZip::CEncoder `RTTI Type Descriptor'
.rdata$r:00001368                 db    5
.rdata$r:00001369                 db    0
.rdata$r:0000136A                 db    0
.rdata$r:0000136B                 db    0
.rdata$r:0000136C                 db    0
.rdata$r:0000136D                 db    0
.rdata$r:0000136E                 db    0
.rdata$r:0000136F                 db    0
.rdata$r:00001370                 db 0FFh
.rdata$r:00001371                 db 0FFh
.rdata$r:00001372                 db 0FFh
.rdata$r:00001373                 db 0FFh
.rdata$r:00001374                 db    0
.rdata$r:00001375                 db    0
.rdata$r:00001376                 db    0
.rdata$r:00001377                 db    0
.rdata$r:00001378                 db  40h ; @
.rdata$r:00001379                 db    0
.rdata$r:0000137A                 db    0
.rdata$r:0000137B                 db    0
.rdata$r:0000137C                 dd offset ??_R3CEncoder@NPpmdZip@NCompress@@8 ; NCompress::NPpmdZip::CEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000137C _rdata$r        ends
.rdata$r:0000137C
.rdata$r:00001380 ; ===========================================================================
.rdata$r:00001380
.rdata$r:00001380 ; Segment type: Pure data
.rdata$r:00001380 ; Segment permissions: Read
.rdata$r:00001380 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001380                 assume cs:_rdata$r
.rdata$r:00001380                 ;org 1380h
.rdata$r:00001380 ; COMDAT (pick any)
.rdata$r:00001380                 public ??_R1A@?0A@EC@IUnknown@@8
.rdata$r:00001380 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 66)'
.rdata$r:00001380 ??_R1A@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00001380                                         ; DATA XREF: .rdata$r:00001350o
.rdata$r:00001380                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00001384                 db    0
.rdata$r:00001385                 db    0
.rdata$r:00001386                 db    0
.rdata$r:00001387                 db    0
.rdata$r:00001388                 db    0
.rdata$r:00001389                 db    0
.rdata$r:0000138A                 db    0
.rdata$r:0000138B                 db    0
.rdata$r:0000138C                 db 0FFh
.rdata$r:0000138D                 db 0FFh
.rdata$r:0000138E                 db 0FFh
.rdata$r:0000138F                 db 0FFh
.rdata$r:00001390                 db    0
.rdata$r:00001391                 db    0
.rdata$r:00001392                 db    0
.rdata$r:00001393                 db    0
.rdata$r:00001394                 db  42h ; B
.rdata$r:00001395                 db    0
.rdata$r:00001396                 db    0
.rdata$r:00001397                 db    0
.rdata$r:00001398                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001398 _rdata$r        ends
.rdata$r:00001398
.rdata$r:0000139C ; ===========================================================================
.rdata$r:0000139C
.rdata$r:0000139C ; Segment type: Pure data
.rdata$r:0000139C ; Segment permissions: Read
.rdata$r:0000139C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000139C                 assume cs:_rdata$r
.rdata$r:0000139C                 ;org 139Ch
.rdata$r:0000139C ; COMDAT (pick any)
.rdata$r:0000139C                 public ??_R13?0A@EA@ICompressSetCoderProperties@@8
.rdata$r:0000139C ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:0000139C ??_R13?0A@EA@ICompressSetCoderProperties@@8 dd offset ??_R0?AUICompressSetCoderProperties@@@8
.rdata$r:0000139C                                         ; DATA XREF: .rdata$r:00001354o
.rdata$r:0000139C                                         ; ICompressSetCoderProperties `RTTI Type Descriptor'
.rdata$r:000013A0                 db    1
.rdata$r:000013A1                 db    0
.rdata$r:000013A2                 db    0
.rdata$r:000013A3                 db    0
.rdata$r:000013A4                 db    4
.rdata$r:000013A5                 db    0
.rdata$r:000013A6                 db    0
.rdata$r:000013A7                 db    0
.rdata$r:000013A8                 db 0FFh
.rdata$r:000013A9                 db 0FFh
.rdata$r:000013AA                 db 0FFh
.rdata$r:000013AB                 db 0FFh
.rdata$r:000013AC                 db    0
.rdata$r:000013AD                 db    0
.rdata$r:000013AE                 db    0
.rdata$r:000013AF                 db    0
.rdata$r:000013B0                 db  40h ; @
.rdata$r:000013B1                 db    0
.rdata$r:000013B2                 db    0
.rdata$r:000013B3                 db    0
.rdata$r:000013B4                 dd offset ??_R3ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:000013B4 _rdata$r        ends
.rdata$r:000013B4
.data:000013B8 ; ===========================================================================
.data:000013B8
.data:000013B8 ; Segment type: Pure data
.data:000013B8 ; Segment permissions: Read/Write
.data:000013B8 _data           segment dword public 'DATA' use32
.data:000013B8                 assume cs:_data
.data:000013B8                 ;org 13B8h
.data:000013B8 ; COMDAT (pick any)
.data:000013B8                 public ??_R0?AUICompressSetCoderProperties@@@8
.data:000013B8 ; struct ICompressSetCoderProperties `RTTI Type Descriptor'
.data:000013B8 ??_R0?AUICompressSetCoderProperties@@@8 dd offset ??_7type_info@@6B@
.data:000013B8                                         ; DATA XREF: .rdata$r:ICompressSetCoderProperties::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:000013B8                                         ; .rdata$r:ICompressSetCoderProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:000013B8                                         ; const type_info::`vftable'
.data:000013BC                 align 10h
.data:000013C0 a_?auicompresss db '.?AUICompressSetCoderProperties@@',0
.data:000013E2                 align 4
.data:000013E2 _data           ends
.data:000013E2
.rdata$r:000013E4 ; ===========================================================================
.rdata$r:000013E4
.rdata$r:000013E4 ; Segment type: Pure data
.rdata$r:000013E4 ; Segment permissions: Read
.rdata$r:000013E4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000013E4                 assume cs:_rdata$r
.rdata$r:000013E4                 ;org 13E4h
.rdata$r:000013E4 ; COMDAT (pick any)
.rdata$r:000013E4                 public ??_R3ICompressSetCoderProperties@@8
.rdata$r:000013E4 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:000013E4 ??_R3ICompressSetCoderProperties@@8 db    0
.rdata$r:000013E4                                         ; DATA XREF: .rdata$r:000013B4o
.rdata$r:000013E4                                         ; .rdata$r:00001418o ...
.rdata$r:000013E5                 db    0
.rdata$r:000013E6                 db    0
.rdata$r:000013E7                 db    0
.rdata$r:000013E8                 db    0
.rdata$r:000013E9                 db    0
.rdata$r:000013EA                 db    0
.rdata$r:000013EB                 db    0
.rdata$r:000013EC                 db    2
.rdata$r:000013ED                 db    0
.rdata$r:000013EE                 db    0
.rdata$r:000013EF                 db    0
.rdata$r:000013F0                 dd offset ??_R2ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Base Class Array'
.rdata$r:000013F0 _rdata$r        ends
.rdata$r:000013F0
.rdata$r:000013F4 ; ===========================================================================
.rdata$r:000013F4
.rdata$r:000013F4 ; Segment type: Pure data
.rdata$r:000013F4 ; Segment permissions: Read
.rdata$r:000013F4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000013F4                 assume cs:_rdata$r
.rdata$r:000013F4                 ;org 13F4h
.rdata$r:000013F4 ; COMDAT (pick any)
.rdata$r:000013F4                 public ??_R2ICompressSetCoderProperties@@8
.rdata$r:000013F4 ; ICompressSetCoderProperties::`RTTI Base Class Array'
.rdata$r:000013F4 ??_R2ICompressSetCoderProperties@@8 dd offset ??_R1A@?0A@EA@ICompressSetCoderProperties@@8
.rdata$r:000013F4                                         ; DATA XREF: .rdata$r:000013F0o
.rdata$r:000013F4                                         ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000013F8                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000013FC                 db    0
.rdata$r:000013FD                 align 10h
.rdata$r:000013FD _rdata$r        ends
.rdata$r:000013FD
.rdata$r:00001400 ; ===========================================================================
.rdata$r:00001400
.rdata$r:00001400 ; Segment type: Pure data
.rdata$r:00001400 ; Segment permissions: Read
.rdata$r:00001400 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001400                 assume cs:_rdata$r
.rdata$r:00001400                 ;org 1400h
.rdata$r:00001400 ; COMDAT (pick any)
.rdata$r:00001400                 public ??_R1A@?0A@EA@ICompressSetCoderProperties@@8
.rdata$r:00001400 ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001400 ??_R1A@?0A@EA@ICompressSetCoderProperties@@8 dd offset ??_R0?AUICompressSetCoderProperties@@@8
.rdata$r:00001400                                         ; DATA XREF: .rdata$r:ICompressSetCoderProperties::`RTTI Base Class Array'o
.rdata$r:00001400                                         ; ICompressSetCoderProperties `RTTI Type Descriptor'
.rdata$r:00001404                 db    1
.rdata$r:00001405                 db    0
.rdata$r:00001406                 db    0
.rdata$r:00001407                 db    0
.rdata$r:00001408                 db    0
.rdata$r:00001409                 db    0
.rdata$r:0000140A                 db    0
.rdata$r:0000140B                 db    0
.rdata$r:0000140C                 db 0FFh
.rdata$r:0000140D                 db 0FFh
.rdata$r:0000140E                 db 0FFh
.rdata$r:0000140F                 db 0FFh
.rdata$r:00001410                 db    0
.rdata$r:00001411                 db    0
.rdata$r:00001412                 db    0
.rdata$r:00001413                 db    0
.rdata$r:00001414                 db  40h ; @
.rdata$r:00001415                 db    0
.rdata$r:00001416                 db    0
.rdata$r:00001417                 db    0
.rdata$r:00001418                 dd offset ??_R3ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001418 _rdata$r        ends
.rdata$r:00001418
.rdata$r:0000141C ; ===========================================================================
.rdata$r:0000141C
.rdata$r:0000141C ; Segment type: Pure data
.rdata$r:0000141C ; Segment permissions: Read
.rdata$r:0000141C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000141C                 assume cs:_rdata$r
.rdata$r:0000141C                 ;org 141Ch
.rdata$r:0000141C ; COMDAT (pick any)
.rdata$r:0000141C                 public ??_R13?0A@EC@IUnknown@@8
.rdata$r:0000141C ; IUnknown::`RTTI Base Class Descriptor at (4, -1, 0, 66)'
.rdata$r:0000141C ??_R13?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:0000141C                                         ; DATA XREF: .rdata$r:00001358o
.rdata$r:0000141C                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00001420                 db    0
.rdata$r:00001421                 db    0
.rdata$r:00001422                 db    0
.rdata$r:00001423                 db    0
.rdata$r:00001424                 db    4
.rdata$r:00001425                 db    0
.rdata$r:00001426                 db    0
.rdata$r:00001427                 db    0
.rdata$r:00001428                 db 0FFh
.rdata$r:00001429                 db 0FFh
.rdata$r:0000142A                 db 0FFh
.rdata$r:0000142B                 db 0FFh
.rdata$r:0000142C                 db    0
.rdata$r:0000142D                 db    0
.rdata$r:0000142E                 db    0
.rdata$r:0000142F                 db    0
.rdata$r:00001430                 db  42h ; B
.rdata$r:00001431                 db    0
.rdata$r:00001432                 db    0
.rdata$r:00001433                 db    0
.rdata$r:00001434                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001434 _rdata$r        ends
.rdata$r:00001434
.rdata$r:00001438 ; ===========================================================================
.rdata$r:00001438
.rdata$r:00001438 ; Segment type: Pure data
.rdata$r:00001438 ; Segment permissions: Read
.rdata$r:00001438 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001438                 assume cs:_rdata$r
.rdata$r:00001438                 ;org 1438h
.rdata$r:00001438 ; COMDAT (pick any)
.rdata$r:00001438                 public ??_R17?0A@EA@CMyUnknownImp@@8
.rdata$r:00001438 ; CMyUnknownImp::`RTTI Base Class Descriptor at (8, -1, 0, 64)'
.rdata$r:00001438 ??_R17?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00001438                                         ; DATA XREF: .rdata$r:0000135Co
.rdata$r:00001438                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:0000143C                 align 10h
.rdata$r:00001440                 db    8
.rdata$r:00001441                 db    0
.rdata$r:00001442                 db    0
.rdata$r:00001443                 db    0
.rdata$r:00001444                 db 0FFh
.rdata$r:00001445                 db 0FFh
.rdata$r:00001446                 db 0FFh
.rdata$r:00001447                 db 0FFh
.rdata$r:00001448                 db    0
.rdata$r:00001449                 db    0
.rdata$r:0000144A                 db    0
.rdata$r:0000144B                 db    0
.rdata$r:0000144C                 db  40h ; @
.rdata$r:0000144D                 db    0
.rdata$r:0000144E                 db    0
.rdata$r:0000144F                 db    0
.rdata$r:00001450                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001450 _rdata$r        ends
.rdata$r:00001450
.rdata$r:00001454 ; ===========================================================================
.rdata$r:00001454
.rdata$r:00001454 ; Segment type: Pure data
.rdata$r:00001454 ; Segment permissions: Read
.rdata$r:00001454 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001454                 assume cs:_rdata$r
.rdata$r:00001454                 ;org 1454h
.rdata$r:00001454 ; COMDAT (pick any)
.rdata$r:00001454                 public ??_R4CEncoder@NPpmdZip@NCompress@@6BICompressSetCoderProperties@@@
.rdata$r:00001454 ; const NCompress::NPpmdZip::CEncoder::`RTTI Complete Object Locator'{for `ICompressSetCoderProperties'}
.rdata$r:00001454 ??_R4CEncoder@NPpmdZip@NCompress@@6BICompressSetCoderProperties@@@ db    0
.rdata$r:00001454                                         ; DATA XREF: .rdata:000012D0o
.rdata$r:00001455                 db    0
.rdata$r:00001456                 db    0
.rdata$r:00001457                 db    0
.rdata$r:00001458                 db    4
.rdata$r:00001459                 db    0
.rdata$r:0000145A                 db    0
.rdata$r:0000145B                 db    0
.rdata$r:0000145C                 db    0
.rdata$r:0000145D                 db    0
.rdata$r:0000145E                 db    0
.rdata$r:0000145F                 db    0
.rdata$r:00001460                 dd offset ??_R0?AVCEncoder@NPpmdZip@NCompress@@@8 ; NCompress::NPpmdZip::CEncoder `RTTI Type Descriptor'
.rdata$r:00001464                 dd offset ??_R3CEncoder@NPpmdZip@NCompress@@8 ; NCompress::NPpmdZip::CEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001464 _rdata$r        ends
.rdata$r:00001464
.text:00001468 ; ===========================================================================
.text:00001468
.text:00001468 ; Segment type: Pure code
.text:00001468 ; Segment permissions: Read/Execute
.text:00001468 _text           segment para public 'CODE' use32
.text:00001468                 assume cs:_text
.text:00001468                 ;org 1468h
.text:00001468 ; COMDAT (pick any)
.text:00001468                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001468
.text:00001468 ; =============== S U B R O U T I N E =======================================
.text:00001468
.text:00001468 ; Attributes: bp-based frame
.text:00001468
.text:00001468 ; _DWORD __thiscall CByteOutBufWrap::~CByteOutBufWrap(CByteOutBufWrap *__hidden this)
.text:00001468                 public ??1CByteOutBufWrap@@QAE@XZ
.text:00001468 ??1CByteOutBufWrap@@QAE@XZ proc near    ; CODE XREF: NCompress::NPpmdZip::CEncoder::~CEncoder(void)+70p
.text:00001468                                         ; __unwindfunclet$??1CEncoder@NPpmdZip@NCompress@@QAE@XZ$0+6j ...
.text:00001468
.text:00001468 var_4           = dword ptr -4
.text:00001468
.text:00001468                 push    ebp
.text:00001469                 mov     ebp, esp
.text:0000146B                 push    ecx
.text:0000146C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001473                 mov     [ebp+var_4], ecx
.text:00001476                 mov     ecx, [ebp+var_4] ; this
.text:00001479                 call    ?Free@CByteOutBufWrap@@QAEXXZ ; CByteOutBufWrap::Free(void)
.text:0000147E                 add     esp, 4
.text:00001481                 cmp     ebp, esp
.text:00001483                 call    __RTC_CheckEsp
.text:00001488                 mov     esp, ebp
.text:0000148A                 pop     ebp
.text:0000148B                 retn
.text:0000148B ??1CByteOutBufWrap@@QAE@XZ endp
.text:0000148B
.text:0000148B _text           ends
.text:0000148B
.text:0000148C ; ===========================================================================
.text:0000148C
.text:0000148C ; Segment type: Pure code
.text:0000148C ; Segment permissions: Read/Execute
.text:0000148C _text           segment para public 'CODE' use32
.text:0000148C                 assume cs:_text
.text:0000148C                 ;org 148Ch
.text:0000148C ; COMDAT (pick any)
.text:0000148C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000148C
.text:0000148C ; =============== S U B R O U T I N E =======================================
.text:0000148C
.text:0000148C ; Attributes: bp-based frame
.text:0000148C
.text:0000148C ; __int32 __stdcall NCompress::NPpmdZip::CEncoder::QueryInterface(NCompress::NPpmdZip::CEncoder *this, const struct _GUID *Buf1, void **)
.text:0000148C                 public ?QueryInterface@CEncoder@NPpmdZip@NCompress@@UAGJABU_GUID@@PAPAX@Z
.text:0000148C ?QueryInterface@CEncoder@NPpmdZip@NCompress@@UAGJABU_GUID@@PAPAX@Z proc near
.text:0000148C                                         ; CODE XREF: [thunk]:NCompress::NPpmdZip::CEncoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j
.text:0000148C                                         ; DATA XREF: .rdata:const NCompress::NPpmdZip::CEncoder::`vftable'{for `ICompressCoder'}o
.text:0000148C
.text:0000148C var_8           = dword ptr -8
.text:0000148C var_4           = dword ptr -4
.text:0000148C this            = dword ptr  8
.text:0000148C Buf1            = dword ptr  0Ch
.text:0000148C arg_8           = dword ptr  10h
.text:0000148C
.text:0000148C                 push    ebp
.text:0000148D                 mov     ebp, esp
.text:0000148F                 sub     esp, 8
.text:00001492                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001499                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000014A0                 mov     eax, [ebp+arg_8]
.text:000014A3                 mov     dword ptr [eax], 0
.text:000014A9                 push    offset _IID_IUnknown ; Buf2
.text:000014AE                 mov     ecx, [ebp+Buf1]
.text:000014B1                 push    ecx             ; Buf1
.text:000014B2                 call    ___@8           ; __(x,x)
.text:000014B7                 test    eax, eax
.text:000014B9                 jz      short loc_14DD
.text:000014BB                 cmp     [ebp+this], 0
.text:000014BF                 jz      short loc_14CC
.text:000014C1                 mov     edx, [ebp+this]
.text:000014C4                 add     edx, 4
.text:000014C7                 mov     [ebp+var_4], edx
.text:000014CA                 jmp     short loc_14D3
.text:000014CC ; ---------------------------------------------------------------------------
.text:000014CC
.text:000014CC loc_14CC:                               ; CODE XREF: NCompress::NPpmdZip::CEncoder::QueryInterface(_GUID const &,void * *)+33j
.text:000014CC                 mov     [ebp+var_4], 0
.text:000014D3
.text:000014D3 loc_14D3:                               ; CODE XREF: NCompress::NPpmdZip::CEncoder::QueryInterface(_GUID const &,void * *)+3Ej
.text:000014D3                 mov     eax, [ebp+arg_8]
.text:000014D6                 mov     ecx, [ebp+var_4]
.text:000014D9                 mov     [eax], ecx
.text:000014DB                 jmp     short loc_1518
.text:000014DD ; ---------------------------------------------------------------------------
.text:000014DD
.text:000014DD loc_14DD:                               ; CODE XREF: NCompress::NPpmdZip::CEncoder::QueryInterface(_GUID const &,void * *)+2Dj
.text:000014DD                 push    offset _IID_ICompressSetCoderProperties ; Buf2
.text:000014E2                 mov     edx, [ebp+Buf1]
.text:000014E5                 push    edx             ; Buf1
.text:000014E6                 call    ___@8           ; __(x,x)
.text:000014EB                 test    eax, eax
.text:000014ED                 jz      short loc_1511
.text:000014EF                 cmp     [ebp+this], 0
.text:000014F3                 jz      short loc_1500
.text:000014F5                 mov     eax, [ebp+this]
.text:000014F8                 add     eax, 4
.text:000014FB                 mov     [ebp+var_8], eax
.text:000014FE                 jmp     short loc_1507
.text:00001500 ; ---------------------------------------------------------------------------
.text:00001500
.text:00001500 loc_1500:                               ; CODE XREF: NCompress::NPpmdZip::CEncoder::QueryInterface(_GUID const &,void * *)+67j
.text:00001500                 mov     [ebp+var_8], 0
.text:00001507
.text:00001507 loc_1507:                               ; CODE XREF: NCompress::NPpmdZip::CEncoder::QueryInterface(_GUID const &,void * *)+72j
.text:00001507                 mov     ecx, [ebp+arg_8]
.text:0000150A                 mov     edx, [ebp+var_8]
.text:0000150D                 mov     [ecx], edx
.text:0000150F                 jmp     short loc_1518
.text:00001511 ; ---------------------------------------------------------------------------
.text:00001511
.text:00001511 loc_1511:                               ; CODE XREF: NCompress::NPpmdZip::CEncoder::QueryInterface(_GUID const &,void * *)+61j
.text:00001511                 mov     eax, 80004002h
.text:00001516                 jmp     short loc_1529
.text:00001518 ; ---------------------------------------------------------------------------
.text:00001518
.text:00001518 loc_1518:                               ; CODE XREF: NCompress::NPpmdZip::CEncoder::QueryInterface(_GUID const &,void * *)+4Fj
.text:00001518                                         ; NCompress::NPpmdZip::CEncoder::QueryInterface(_GUID const &,void * *)+83j
.text:00001518                 mov     eax, [ebp+this]
.text:0000151B                 mov     ecx, [eax+8]
.text:0000151E                 add     ecx, 1
.text:00001521                 mov     edx, [ebp+this]
.text:00001524                 mov     [edx+8], ecx
.text:00001527                 xor     eax, eax
.text:00001529
.text:00001529 loc_1529:                               ; CODE XREF: NCompress::NPpmdZip::CEncoder::QueryInterface(_GUID const &,void * *)+8Aj
.text:00001529                 add     esp, 8
.text:0000152C                 cmp     ebp, esp
.text:0000152E                 call    __RTC_CheckEsp
.text:00001533                 mov     esp, ebp
.text:00001535                 pop     ebp
.text:00001536                 retn    0Ch
.text:00001536 ?QueryInterface@CEncoder@NPpmdZip@NCompress@@UAGJABU_GUID@@PAPAX@Z endp
.text:00001536
.text:00001536 ; ---------------------------------------------------------------------------
.text:00001539                 align 4
.text:00001539 _text           ends
.text:00001539
.text:0000153C ; ===========================================================================
.text:0000153C
.text:0000153C ; Segment type: Pure code
.text:0000153C ; Segment permissions: Read/Execute
.text:0000153C _text           segment para public 'CODE' use32
.text:0000153C                 assume cs:_text
.text:0000153C                 ;org 153Ch
.text:0000153C ; COMDAT (pick any)
.text:0000153C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000153C
.text:0000153C ; =============== S U B R O U T I N E =======================================
.text:0000153C
.text:0000153C ; Attributes: bp-based frame
.text:0000153C
.text:0000153C ; unsigned __int32 __stdcall NCompress::NPpmdZip::CEncoder::AddRef(NCompress::NPpmdZip::CEncoder *this)
.text:0000153C                 public ?AddRef@CEncoder@NPpmdZip@NCompress@@UAGKXZ
.text:0000153C ?AddRef@CEncoder@NPpmdZip@NCompress@@UAGKXZ proc near
.text:0000153C                                         ; CODE XREF: [thunk]:NCompress::NPpmdZip::CEncoder::AddRef`adjustor{4}' (void)+5j
.text:0000153C                                         ; DATA XREF: .rdata:000012ECo
.text:0000153C
.text:0000153C var_4           = dword ptr -4
.text:0000153C this            = dword ptr  8
.text:0000153C
.text:0000153C                 push    ebp
.text:0000153D                 mov     ebp, esp
.text:0000153F                 push    ecx
.text:00001540                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001547                 mov     eax, [ebp+this]
.text:0000154A                 mov     ecx, [eax+8]
.text:0000154D                 add     ecx, 1
.text:00001550                 mov     [ebp+var_4], ecx
.text:00001553                 mov     edx, [ebp+this]
.text:00001556                 mov     eax, [ebp+var_4]
.text:00001559                 mov     [edx+8], eax
.text:0000155C                 mov     eax, [ebp+var_4]
.text:0000155F                 mov     esp, ebp
.text:00001561                 pop     ebp
.text:00001562                 retn    4
.text:00001562 ?AddRef@CEncoder@NPpmdZip@NCompress@@UAGKXZ endp
.text:00001562
.text:00001562 ; ---------------------------------------------------------------------------
.text:00001565                 align 4
.text:00001565 _text           ends
.text:00001565
.text:00001568 ; ===========================================================================
.text:00001568
.text:00001568 ; Segment type: Pure code
.text:00001568 ; Segment permissions: Read/Execute
.text:00001568 _text           segment para public 'CODE' use32
.text:00001568                 assume cs:_text
.text:00001568                 ;org 1568h
.text:00001568 ; COMDAT (pick any)
.text:00001568                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001568
.text:00001568 ; =============== S U B R O U T I N E =======================================
.text:00001568
.text:00001568 ; Attributes: bp-based frame
.text:00001568
.text:00001568 ; unsigned __int32 __stdcall NCompress::NPpmdZip::CEncoder::Release(NCompress::NPpmdZip::CEncoder *this)
.text:00001568                 public ?Release@CEncoder@NPpmdZip@NCompress@@UAGKXZ
.text:00001568 ?Release@CEncoder@NPpmdZip@NCompress@@UAGKXZ proc near
.text:00001568                                         ; CODE XREF: [thunk]:NCompress::NPpmdZip::CEncoder::Release`adjustor{4}' (void)+5j
.text:00001568                                         ; DATA XREF: .rdata:000012F0o
.text:00001568
.text:00001568 var_10          = dword ptr -10h
.text:00001568 var_C           = dword ptr -0Ch
.text:00001568 var_8           = dword ptr -8
.text:00001568 var_4           = dword ptr -4
.text:00001568 this            = dword ptr  8
.text:00001568
.text:00001568                 push    ebp
.text:00001569                 mov     ebp, esp
.text:0000156B                 sub     esp, 10h
.text:0000156E                 mov     eax, 0CCCCCCCCh
.text:00001573                 mov     [ebp+var_10], eax
.text:00001576                 mov     [ebp+var_C], eax
.text:00001579                 mov     [ebp+var_8], eax
.text:0000157C                 mov     [ebp+var_4], eax
.text:0000157F                 mov     eax, [ebp+this]
.text:00001582                 mov     ecx, [eax+8]
.text:00001585                 sub     ecx, 1
.text:00001588                 mov     [ebp+var_C], ecx
.text:0000158B                 mov     edx, [ebp+this]
.text:0000158E                 mov     eax, [ebp+var_C]
.text:00001591                 mov     [edx+8], eax
.text:00001594                 cmp     [ebp+var_C], 0
.text:00001598                 jz      short loc_15A2
.text:0000159A                 mov     ecx, [ebp+this]
.text:0000159D                 mov     eax, [ecx+8]
.text:000015A0                 jmp     short loc_15CC
.text:000015A2 ; ---------------------------------------------------------------------------
.text:000015A2
.text:000015A2 loc_15A2:                               ; CODE XREF: NCompress::NPpmdZip::CEncoder::Release(void)+30j
.text:000015A2                 mov     edx, [ebp+this]
.text:000015A5                 mov     [ebp+var_8], edx
.text:000015A8                 mov     eax, [ebp+var_8]
.text:000015AB                 mov     [ebp+var_4], eax
.text:000015AE                 cmp     [ebp+var_4], 0
.text:000015B2                 jz      short loc_15C3
.text:000015B4                 push    1
.text:000015B6                 mov     ecx, [ebp+var_4]
.text:000015B9                 call    ??_GCEncoder@NPpmdZip@NCompress@@QAEPAXI@Z ; NCompress::NPpmdZip::CEncoder::`scalar deleting destructor'(uint)
.text:000015BE                 mov     [ebp+var_10], eax
.text:000015C1                 jmp     short loc_15CA
.text:000015C3 ; ---------------------------------------------------------------------------
.text:000015C3
.text:000015C3 loc_15C3:                               ; CODE XREF: NCompress::NPpmdZip::CEncoder::Release(void)+4Aj
.text:000015C3                 mov     [ebp+var_10], 0
.text:000015CA
.text:000015CA loc_15CA:                               ; CODE XREF: NCompress::NPpmdZip::CEncoder::Release(void)+59j
.text:000015CA                 xor     eax, eax
.text:000015CC
.text:000015CC loc_15CC:                               ; CODE XREF: NCompress::NPpmdZip::CEncoder::Release(void)+38j
.text:000015CC                 add     esp, 10h
.text:000015CF                 cmp     ebp, esp
.text:000015D1                 call    __RTC_CheckEsp
.text:000015D6                 mov     esp, ebp
.text:000015D8                 pop     ebp
.text:000015D9                 retn    4
.text:000015D9 ?Release@CEncoder@NPpmdZip@NCompress@@UAGKXZ endp
.text:000015D9
.text:000015D9 _text           ends
.text:000015D9
.text:000015DC ; ===========================================================================
.text:000015DC
.text:000015DC ; Segment type: Pure code
.text:000015DC ; Segment permissions: Read/Execute
.text:000015DC _text           segment para public 'CODE' use32
.text:000015DC                 assume cs:_text
.text:000015DC                 ;org 15DCh
.text:000015DC ; COMDAT (pick any)
.text:000015DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000015DC
.text:000015DC ; =============== S U B R O U T I N E =======================================
.text:000015DC
.text:000015DC ; Attributes: bp-based frame
.text:000015DC
.text:000015DC ; public: void * __thiscall NCompress::NPpmdZip::CEncoder::`scalar deleting destructor'(unsigned int)
.text:000015DC                 public ??_GCEncoder@NPpmdZip@NCompress@@QAEPAXI@Z
.text:000015DC ??_GCEncoder@NPpmdZip@NCompress@@QAEPAXI@Z proc near
.text:000015DC                                         ; CODE XREF: NCompress::NPpmdZip::CEncoder::Release(void)+51p
.text:000015DC
.text:000015DC var_4           = dword ptr -4
.text:000015DC arg_0           = dword ptr  8
.text:000015DC
.text:000015DC                 push    ebp
.text:000015DD                 mov     ebp, esp
.text:000015DF                 push    ecx
.text:000015E0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000015E7                 mov     [ebp+var_4], ecx
.text:000015EA                 mov     ecx, [ebp+var_4] ; this
.text:000015ED                 call    ??1CEncoder@NPpmdZip@NCompress@@QAE@XZ ; NCompress::NPpmdZip::CEncoder::~CEncoder(void)
.text:000015F2                 mov     eax, [ebp+arg_0]
.text:000015F5                 and     eax, 1
.text:000015F8                 jz      short loc_1606
.text:000015FA                 mov     ecx, [ebp+var_4]
.text:000015FD                 push    ecx             ; void *
.text:000015FE                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00001603                 add     esp, 4
.text:00001606
.text:00001606 loc_1606:                               ; CODE XREF: NCompress::NPpmdZip::CEncoder::`scalar deleting destructor'(uint)+1Cj
.text:00001606                 mov     eax, [ebp+var_4]
.text:00001609                 add     esp, 4
.text:0000160C                 cmp     ebp, esp
.text:0000160E                 call    __RTC_CheckEsp
.text:00001613                 mov     esp, ebp
.text:00001615                 pop     ebp
.text:00001616                 retn    4
.text:00001616 ??_GCEncoder@NPpmdZip@NCompress@@QAEPAXI@Z endp
.text:00001616
.text:00001616 ; ---------------------------------------------------------------------------
.text:00001619                 align 4
.text:00001619 _text           ends
.text:00001619
.text:0000161C ; ===========================================================================
.text:0000161C
.text:0000161C ; Segment type: Pure code
.text:0000161C ; Segment permissions: Read/Execute
.text:0000161C _text           segment para public 'CODE' use32
.text:0000161C                 assume cs:_text
.text:0000161C                 ;org 161Ch
.text:0000161C ; COMDAT (pick any)
.text:0000161C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000161C
.text:0000161C ; =============== S U B R O U T I N E =======================================
.text:0000161C
.text:0000161C ; Attributes: bp-based frame
.text:0000161C
.text:0000161C ; _DWORD __thiscall NCompress::NPpmdZip::CEncProps::CEncProps(NCompress::NPpmdZip::CEncProps *__hidden this)
.text:0000161C                 public ??0CEncProps@NPpmdZip@NCompress@@QAE@XZ
.text:0000161C ??0CEncProps@NPpmdZip@NCompress@@QAE@XZ proc near
.text:0000161C                                         ; CODE XREF: NCompress::NPpmdZip::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+20p
.text:0000161C                                         ; NCompress::NPpmdZip::CEncoder::CEncoder(void)+88p
.text:0000161C
.text:0000161C var_4           = dword ptr -4
.text:0000161C
.text:0000161C                 push    ebp
.text:0000161D                 mov     ebp, esp
.text:0000161F                 push    ecx
.text:00001620                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001627                 mov     [ebp+var_4], ecx
.text:0000162A                 mov     eax, [ebp+var_4]
.text:0000162D                 mov     dword ptr [eax], 0FFFFFFFFh
.text:00001633                 mov     ecx, [ebp+var_4]
.text:00001636                 mov     dword ptr [ecx+4], 0FFFFFFFFh
.text:0000163D                 mov     edx, [ebp+var_4]
.text:00001640                 mov     dword ptr [edx+8], 0FFFFFFFFh
.text:00001647                 mov     eax, [ebp+var_4]
.text:0000164A                 mov     dword ptr [eax+0Ch], 0FFFFFFFFh
.text:00001651                 mov     eax, [ebp+var_4]
.text:00001654                 mov     esp, ebp
.text:00001656                 pop     ebp
.text:00001657                 retn
.text:00001657 ??0CEncProps@NPpmdZip@NCompress@@QAE@XZ endp
.text:00001657
.text:00001657 _text           ends
.text:00001657
.text:00001658 ; ===========================================================================
.text:00001658
.text:00001658 ; Segment type: Pure code
.text:00001658 ; Segment permissions: Read/Execute
.text:00001658 _text           segment para public 'CODE' use32
.text:00001658                 assume cs:_text
.text:00001658                 ;org 1658h
.text:00001658 ; COMDAT (pick any)
.text:00001658                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001658
.text:00001658 ; =============== S U B R O U T I N E =======================================
.text:00001658
.text:00001658 ; Attributes: bp-based frame
.text:00001658
.text:00001658 ; _DWORD __thiscall ICompressSetCoderProperties::ICompressSetCoderProperties(ICompressSetCoderProperties *__hidden this)
.text:00001658                 public ??0ICompressSetCoderProperties@@QAE@XZ
.text:00001658 ??0ICompressSetCoderProperties@@QAE@XZ proc near
.text:00001658                                         ; CODE XREF: NCompress::NPpmdZip::CEncoder::CEncoder(void)+3Bp
.text:00001658
.text:00001658 var_4           = dword ptr -4
.text:00001658
.text:00001658                 push    ebp
.text:00001659                 mov     ebp, esp
.text:0000165B                 push    ecx
.text:0000165C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001663                 mov     [ebp+var_4], ecx
.text:00001666                 mov     ecx, [ebp+var_4]
.text:00001669                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:0000166E                 mov     eax, [ebp+var_4]
.text:00001671                 mov     dword ptr [eax], offset ??_7ICompressSetCoderProperties@@6B@ ; const ICompressSetCoderProperties::`vftable'
.text:00001677                 mov     eax, [ebp+var_4]
.text:0000167A                 add     esp, 4
.text:0000167D                 cmp     ebp, esp
.text:0000167F                 call    __RTC_CheckEsp
.text:00001684                 mov     esp, ebp
.text:00001686                 pop     ebp
.text:00001687                 retn
.text:00001687 ??0ICompressSetCoderProperties@@QAE@XZ endp
.text:00001687
.text:00001687 _text           ends
.text:00001687
.rdata:00001688 ; ===========================================================================
.rdata:00001688
.rdata:00001688 ; Segment type: Pure data
.rdata:00001688 ; Segment permissions: Read
.rdata:00001688 _rdata          segment dword public 'DATA' use32
.rdata:00001688                 assume cs:_rdata
.rdata:00001688                 ;org 1688h
.rdata:00001688 ; COMDAT (pick largest)
.rdata:00001688                 dd offset ??_R4ICompressSetCoderProperties@@6B@ ; const ICompressSetCoderProperties::`RTTI Complete Object Locator'
.rdata:0000168C                 public ??_7ICompressSetCoderProperties@@6B@
.rdata:0000168C ; const ICompressSetCoderProperties::`vftable'
.rdata:0000168C ??_7ICompressSetCoderProperties@@6B@ dd offset __purecall
.rdata:0000168C                                         ; DATA XREF: ICompressSetCoderProperties::ICompressSetCoderProperties(void)+19o
.rdata:00001690                 dd offset __purecall
.rdata:00001694                 dd offset __purecall
.rdata:00001698                 dd offset __purecall
.rdata:00001698 _rdata          ends
.rdata:00001698
.rdata$r:0000169C ; ===========================================================================
.rdata$r:0000169C
.rdata$r:0000169C ; Segment type: Pure data
.rdata$r:0000169C ; Segment permissions: Read
.rdata$r:0000169C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000169C                 assume cs:_rdata$r
.rdata$r:0000169C                 ;org 169Ch
.rdata$r:0000169C ; COMDAT (pick any)
.rdata$r:0000169C                 public ??_R4ICompressSetCoderProperties@@6B@
.rdata$r:0000169C ; const ICompressSetCoderProperties::`RTTI Complete Object Locator'
.rdata$r:0000169C ??_R4ICompressSetCoderProperties@@6B@ db    0
.rdata$r:0000169C                                         ; DATA XREF: .rdata:00001688o
.rdata$r:0000169D                 db    0
.rdata$r:0000169E                 db    0
.rdata$r:0000169F                 db    0
.rdata$r:000016A0                 db    0
.rdata$r:000016A1                 db    0
.rdata$r:000016A2                 db    0
.rdata$r:000016A3                 db    0
.rdata$r:000016A4                 db    0
.rdata$r:000016A5                 db    0
.rdata$r:000016A6                 db    0
.rdata$r:000016A7                 db    0
.rdata$r:000016A8                 dd offset ??_R0?AUICompressSetCoderProperties@@@8 ; ICompressSetCoderProperties `RTTI Type Descriptor'
.rdata$r:000016AC                 dd offset ??_R3ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:000016AC _rdata$r        ends
.rdata$r:000016AC
.text:000016B0 ; ===========================================================================
.text:000016B0
.text:000016B0 ; Segment type: Pure code
.text:000016B0 ; Segment permissions: Read/Execute
.text:000016B0 _text           segment para public 'CODE' use32
.text:000016B0                 assume cs:_text
.text:000016B0                 ;org 16B0h
.text:000016B0 ; COMDAT (pick any)
.text:000016B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000016B0
.text:000016B0 ; =============== S U B R O U T I N E =======================================
.text:000016B0
.text:000016B0 ; Attributes: bp-based frame
.text:000016B0
.text:000016B0 ; void __thiscall CByteOutBufWrap::Init(CByteOutBufWrap *__hidden this)
.text:000016B0                 public ?Init@CByteOutBufWrap@@QAEXXZ
.text:000016B0 ?Init@CByteOutBufWrap@@QAEXXZ proc near ; CODE XREF: NCompress::NPpmdZip::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+8Fp
.text:000016B0
.text:000016B0 var_4           = dword ptr -4
.text:000016B0
.text:000016B0                 push    ebp
.text:000016B1                 mov     ebp, esp
.text:000016B3                 push    ecx
.text:000016B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000016BB                 mov     [ebp+var_4], ecx
.text:000016BE                 mov     eax, [ebp+var_4]
.text:000016C1                 mov     ecx, [ebp+var_4]
.text:000016C4                 mov     edx, [ecx+0Ch]
.text:000016C7                 mov     [eax+4], edx
.text:000016CA                 mov     eax, [ebp+var_4]
.text:000016CD                 mov     ecx, [eax+0Ch]
.text:000016D0                 mov     edx, [ebp+var_4]
.text:000016D3                 add     ecx, [edx+10h]
.text:000016D6                 mov     eax, [ebp+var_4]
.text:000016D9                 mov     [eax+8], ecx
.text:000016DC                 mov     ecx, [ebp+var_4]
.text:000016DF                 mov     dword ptr [ecx+18h], 0
.text:000016E6                 mov     dword ptr [ecx+1Ch], 0
.text:000016ED                 mov     edx, [ebp+var_4]
.text:000016F0                 mov     dword ptr [edx+20h], 0
.text:000016F7                 mov     esp, ebp
.text:000016F9                 pop     ebp
.text:000016FA                 retn
.text:000016FA ?Init@CByteOutBufWrap@@QAEXXZ endp
.text:000016FA
.text:000016FA ; ---------------------------------------------------------------------------
.text:000016FB                 align 4
.text:000016FB _text           ends
.text:000016FB
.text:000016FC ; ===========================================================================
.text:000016FC
.text:000016FC ; Segment type: Pure code
.text:000016FC ; Segment permissions: Read/Execute
.text:000016FC _text           segment para public 'CODE' use32
.text:000016FC                 assume cs:_text
.text:000016FC                 ;org 16FCh
.text:000016FC ; COMDAT (pick any)
.text:000016FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000016FC
.text:000016FC ; =============== S U B R O U T I N E =======================================
.text:000016FC
.text:000016FC ; Attributes: bp-based frame
.text:000016FC
.text:000016FC ; unsigned __int64 __thiscall CByteOutBufWrap::GetProcessed(CByteOutBufWrap *__hidden this)
.text:000016FC                 public ?GetProcessed@CByteOutBufWrap@@QBE_KXZ
.text:000016FC ?GetProcessed@CByteOutBufWrap@@QBE_KXZ proc near
.text:000016FC                                         ; CODE XREF: NCompress::NPpmdZip::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+215p
.text:000016FC
.text:000016FC var_4           = dword ptr -4
.text:000016FC
.text:000016FC                 push    ebp
.text:000016FD                 mov     ebp, esp
.text:000016FF                 push    ecx
.text:00001700                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001707                 mov     [ebp+var_4], ecx
.text:0000170A                 mov     eax, [ebp+var_4]
.text:0000170D                 mov     ecx, [ebp+var_4]
.text:00001710                 mov     eax, [eax+4]
.text:00001713                 sub     eax, [ecx+0Ch]
.text:00001716                 cdq
.text:00001717                 mov     ecx, [ebp+var_4]
.text:0000171A                 add     eax, [ecx+18h]
.text:0000171D                 adc     edx, [ecx+1Ch]
.text:00001720                 mov     esp, ebp
.text:00001722                 pop     ebp
.text:00001723                 retn
.text:00001723 ?GetProcessed@CByteOutBufWrap@@QBE_KXZ endp
.text:00001723
.text:00001723 _text           ends
.text:00001723
.text:00001724 ; ===========================================================================
.text:00001724
.text:00001724 ; Segment type: Pure code
.text:00001724 ; Segment permissions: Read/Execute
.text:00001724 _text           segment para public 'CODE' use32
.text:00001724                 assume cs:_text
.text:00001724                 ;org 1724h
.text:00001724 ; COMDAT (pick any)
.text:00001724                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001724
.text:00001724 ; =============== S U B R O U T I N E =======================================
.text:00001724
.text:00001724 ; Attributes: bp-based frame
.text:00001724
.text:00001724 ; void __thiscall CByteOutBufWrap::WriteByte(CByteOutBufWrap *this, unsigned __int8)
.text:00001724                 public ?WriteByte@CByteOutBufWrap@@QAEXE@Z
.text:00001724 ?WriteByte@CByteOutBufWrap@@QAEXE@Z proc near
.text:00001724                                         ; CODE XREF: NCompress::NPpmdZip::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+10Ap
.text:00001724                                         ; NCompress::NPpmdZip::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+11Cp
.text:00001724
.text:00001724 var_4           = dword ptr -4
.text:00001724 arg_0           = byte ptr  8
.text:00001724
.text:00001724                 push    ebp
.text:00001725                 mov     ebp, esp
.text:00001727                 push    ecx
.text:00001728                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000172F                 mov     [ebp+var_4], ecx
.text:00001732                 mov     eax, [ebp+var_4]
.text:00001735                 mov     ecx, [eax+4]
.text:00001738                 mov     dl, [ebp+arg_0]
.text:0000173B                 mov     [ecx], dl
.text:0000173D                 mov     eax, [ebp+var_4]
.text:00001740                 mov     ecx, [eax+4]
.text:00001743                 add     ecx, 1
.text:00001746                 mov     edx, [ebp+var_4]
.text:00001749                 mov     [edx+4], ecx
.text:0000174C                 mov     eax, [ebp+var_4]
.text:0000174F                 mov     ecx, [ebp+var_4]
.text:00001752                 mov     edx, [eax+4]
.text:00001755                 cmp     edx, [ecx+8]
.text:00001758                 jnz     short loc_1762
.text:0000175A                 mov     ecx, [ebp+var_4] ; this
.text:0000175D                 call    ?Flush@CByteOutBufWrap@@QAEJXZ ; CByteOutBufWrap::Flush(void)
.text:00001762
.text:00001762 loc_1762:                               ; CODE XREF: CByteOutBufWrap::WriteByte(uchar)+34j
.text:00001762                 add     esp, 4
.text:00001765                 cmp     ebp, esp
.text:00001767                 call    __RTC_CheckEsp
.text:0000176C                 mov     esp, ebp
.text:0000176E                 pop     ebp
.text:0000176F                 retn    4
.text:0000176F ?WriteByte@CByteOutBufWrap@@QAEXE@Z endp
.text:0000176F
.text:0000176F ; ---------------------------------------------------------------------------
.text:00001772                 align 4
.text:00001772 _text           ends
.text:00001772
.text:00001774 ; ===========================================================================
.text:00001774
.text:00001774 ; Segment type: Pure code
.text:00001774 ; Segment permissions: Read/Execute
.text:00001774 _text           segment para public 'CODE' use32
.text:00001774                 assume cs:_text
.text:00001774                 ;org 1774h
.text:00001774 ; COMDAT (pick any)
.text:00001774                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001774
.text:00001774 ; =============== S U B R O U T I N E =======================================
.text:00001774
.text:00001774
.text:00001774 ; [thunk]:public: virtual long __stdcall NCompress::NPpmdZip::CEncoder::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:00001774                 public ?QueryInterface@CEncoder@NPpmdZip@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.text:00001774 ?QueryInterface@CEncoder@NPpmdZip@NCompress@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:00001774                                         ; DATA XREF: .rdata:const NCompress::NPpmdZip::CEncoder::`vftable'{for `ICompressSetCoderProperties'}o
.text:00001774
.text:00001774 arg_0           = dword ptr  4
.text:00001774
.text:00001774                 sub     [esp+arg_0], 4
.text:00001779                 jmp     ?QueryInterface@CEncoder@NPpmdZip@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NPpmdZip::CEncoder::QueryInterface(_GUID const &,void * *)
.text:00001779 ?QueryInterface@CEncoder@NPpmdZip@NCompress@@W3AGJABU_GUID@@PAPAX@Z endp
.text:00001779
.text:00001779 ; ---------------------------------------------------------------------------
.text:0000177E                 align 10h
.text:0000177E _text           ends
.text:0000177E
.text:00001780 ; ===========================================================================
.text:00001780
.text:00001780 ; Segment type: Pure code
.text:00001780 ; Segment permissions: Read/Execute
.text:00001780 _text           segment para public 'CODE' use32
.text:00001780                 assume cs:_text
.text:00001780                 ;org 1780h
.text:00001780 ; COMDAT (pick any)
.text:00001780                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001780
.text:00001780 ; =============== S U B R O U T I N E =======================================
.text:00001780
.text:00001780
.text:00001780 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NPpmdZip::CEncoder::Release`adjustor{4}' (void)
.text:00001780                 public ?Release@CEncoder@NPpmdZip@NCompress@@W3AGKXZ
.text:00001780 ?Release@CEncoder@NPpmdZip@NCompress@@W3AGKXZ proc near
.text:00001780                                         ; DATA XREF: .rdata:000012DCo
.text:00001780
.text:00001780 arg_0           = dword ptr  4
.text:00001780
.text:00001780                 sub     [esp+arg_0], 4
.text:00001785                 jmp     ?Release@CEncoder@NPpmdZip@NCompress@@UAGKXZ ; NCompress::NPpmdZip::CEncoder::Release(void)
.text:00001785 ?Release@CEncoder@NPpmdZip@NCompress@@W3AGKXZ endp
.text:00001785
.text:00001785 ; ---------------------------------------------------------------------------
.text:0000178A                 align 4
.text:0000178A _text           ends
.text:0000178A
.text:0000178C ; ===========================================================================
.text:0000178C
.text:0000178C ; Segment type: Pure code
.text:0000178C ; Segment permissions: Read/Execute
.text:0000178C _text           segment para public 'CODE' use32
.text:0000178C                 assume cs:_text
.text:0000178C                 ;org 178Ch
.text:0000178C ; COMDAT (pick any)
.text:0000178C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000178C
.text:0000178C ; =============== S U B R O U T I N E =======================================
.text:0000178C
.text:0000178C
.text:0000178C ; [thunk]:public: virtual unsigned long __stdcall NCompress::NPpmdZip::CEncoder::AddRef`adjustor{4}' (void)
.text:0000178C                 public ?AddRef@CEncoder@NPpmdZip@NCompress@@W3AGKXZ
.text:0000178C ?AddRef@CEncoder@NPpmdZip@NCompress@@W3AGKXZ proc near
.text:0000178C                                         ; DATA XREF: .rdata:000012D8o
.text:0000178C
.text:0000178C arg_0           = dword ptr  4
.text:0000178C
.text:0000178C                 sub     [esp+arg_0], 4
.text:00001791                 jmp     ?AddRef@CEncoder@NPpmdZip@NCompress@@UAGKXZ ; NCompress::NPpmdZip::CEncoder::AddRef(void)
.text:00001791 ?AddRef@CEncoder@NPpmdZip@NCompress@@W3AGKXZ endp
.text:00001791
.text:00001791 _text           ends
.text:00001791
UNDEF:000017A0 ; ===========================================================================
UNDEF:000017A0
UNDEF:000017A0 ; Segment type: Externs
UNDEF:000017A0 ; UNDEF
UNDEF:000017A0 ; __stdcall Ppmd8_Construct(x)
UNDEF:000017A0                 extrn _Ppmd8_Construct@4:near
UNDEF:000017A0                                         ; CODE XREF: NCompress::NPpmdZip::CDecoder::CDecoder(bool)+88p
UNDEF:000017A0                                         ; NCompress::NPpmdZip::CEncoder::CEncoder(void)+B3p
UNDEF:000017A4 ; public: __thiscall CByteInBufWrap::CByteInBufWrap(void)
UNDEF:000017A4                 extrn ??0CByteInBufWrap@@QAE@XZ:near
UNDEF:000017A4                                         ; CODE XREF: NCompress::NPpmdZip::CDecoder::CDecoder(bool)+4Fp
UNDEF:000017A8                 extrn ___security_cookie:near
UNDEF:000017A8                                         ; DATA XREF: NCompress::NPpmdZip::CDecoder::CDecoder(bool)+19r
UNDEF:000017A8                                         ; NCompress::NPpmdZip::CDecoder::~CDecoder(void)+19r ...
UNDEF:000017AC                 extrn ___CxxFrameHandler3:near
UNDEF:000017AC                                         ; CODE XREF: __ehhandler$??0CDecoder@NPpmdZip@NCompress@@QAE@_N@Z+16j
UNDEF:000017AC                                         ; __ehhandler$??1CDecoder@NPpmdZip@NCompress@@QAE@XZ+16j ...
UNDEF:000017B0 ; __fastcall __security_check_cookie(x)
UNDEF:000017B0                 extrn @__security_check_cookie@4:near
UNDEF:000017B0                                         ; CODE XREF: __ehhandler$??0CDecoder@NPpmdZip@NCompress@@QAE@_N@Z+Cp
UNDEF:000017B0                                         ; __ehhandler$??1CDecoder@NPpmdZip@NCompress@@QAE@XZ+Cp ...
UNDEF:000017B4                 extrn __RTC_CheckEsp:near
UNDEF:000017B4                                         ; CODE XREF: NCompress::NPpmdZip::CDecoder::CDecoder(bool)+A7p
UNDEF:000017B4                                         ; NCompress::NPpmdZip::CDecoder::~CDecoder(void)+7Bp ...
UNDEF:000017B8                 extrn __RTC_Shutdown:near
UNDEF:000017B8                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:000017BC                 extrn __RTC_InitBase:near
UNDEF:000017BC                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:000017C0 ; const type_info::`vftable'
UNDEF:000017C0                 extrn ??_7type_info@@6B@:near
UNDEF:000017C0                                         ; DATA XREF: .data:NCompress::NPpmdZip::CDecoder `RTTI Type Descriptor'o
UNDEF:000017C0                                         ; .data:ICompressCoder `RTTI Type Descriptor'o ...
UNDEF:000017C4 ; void __thiscall CByteInBufWrap::Free(CByteInBufWrap *__hidden this)
UNDEF:000017C4                 extrn ?Free@CByteInBufWrap@@QAEXXZ:near
UNDEF:000017C4                                         ; CODE XREF: CByteInBufWrap::~CByteInBufWrap(void)+11p
UNDEF:000017C8 ; const IID IID_IUnknown
UNDEF:000017C8                 extrn _IID_IUnknown:near
UNDEF:000017C8                                         ; DATA XREF: NCompress::NPpmdZip::CDecoder::QueryInterface(_GUID const &,void * *)+Co
UNDEF:000017C8                                         ; NCompress::NPpmdZip::CEncoder::QueryInterface(_GUID const &,void * *)+1Do
UNDEF:000017CC ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:000017CC                 extrn _memcmp:near      ; CODE XREF: IsEqualGUID(x,x)+Dp
UNDEF:000017D0 ; void __cdecl operator delete(void *)
UNDEF:000017D0                 extrn ??3@YAXPAX@Z:near ; CODE XREF: NCompress::NPpmdZip::CDecoder::`scalar deleting destructor'(uint)+22p
UNDEF:000017D0                                         ; NCompress::NPpmdZip::CEncoder::`scalar deleting destructor'(uint)+22p
UNDEF:000017D4                 extrn __purecall:near   ; DATA XREF: .rdata:const ICompressCoder::`vftable'o
UNDEF:000017D4                                         ; .rdata:00001160o ...
UNDEF:000017D8 ; __stdcall Ppmd8_Free(x, x)
UNDEF:000017D8                 extrn _Ppmd8_Free@8:near
UNDEF:000017D8                                         ; CODE XREF: NCompress::NPpmdZip::CDecoder::~CDecoder(void)+49p
UNDEF:000017D8                                         ; NCompress::NPpmdZip::CEncoder::~CEncoder(void)+53p
UNDEF:000017DC                 extrn _g_BigAlloc:near  ; DATA XREF: NCompress::NPpmdZip::CDecoder::~CDecoder(void)+3Do
UNDEF:000017DC                                         ; NCompress::NPpmdZip::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *):loc_250o ...
UNDEF:000017E0 ; __stdcall MidFree(x)
UNDEF:000017E0                 extrn _MidFree@4:near   ; CODE XREF: NCompress::NPpmdZip::CBuf::~CBuf(void)+14p
UNDEF:000017E4 ; __int32 __stdcall WriteStream(struct ISequentialOutStream *, const void *, unsigned int)
UNDEF:000017E4                 extrn ?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z:near
UNDEF:000017E4                                         ; CODE XREF: NCompress::NPpmdZip::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+24Ap
UNDEF:000017E8 ; __stdcall Ppmd8_DecodeSymbol(x)
UNDEF:000017E8                 extrn _Ppmd8_DecodeSymbol@4:near
UNDEF:000017E8                                         ; CODE XREF: NCompress::NPpmdZip::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+1F3p
UNDEF:000017E8                                         ; NCompress::NPpmdZip::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+322p
UNDEF:000017EC ; __stdcall Ppmd8_Init(x, x, x)
UNDEF:000017EC                 extrn _Ppmd8_Init@12:near
UNDEF:000017EC                                         ; CODE XREF: NCompress::NPpmdZip::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+14Fp
UNDEF:000017EC                                         ; NCompress::NPpmdZip::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+C9p
UNDEF:000017F0 ; __stdcall Ppmd8_RangeDec_Init(x)
UNDEF:000017F0                 extrn _Ppmd8_RangeDec_Init@4:near
UNDEF:000017F0                                         ; CODE XREF: NCompress::NPpmdZip::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+12Dp
UNDEF:000017F4 ; __stdcall Ppmd8_Alloc(x, x, x)
UNDEF:000017F4                 extrn _Ppmd8_Alloc@12:near
UNDEF:000017F4                                         ; CODE XREF: NCompress::NPpmdZip::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+113p
UNDEF:000017F4                                         ; NCompress::NPpmdZip::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+6Dp
UNDEF:000017F8 ; bool __thiscall CByteInBufWrap::Alloc(CByteInBufWrap *__hidden this, unsigned int)
UNDEF:000017F8                 extrn ?Alloc@CByteInBufWrap@@QAE_NI@Z:near
UNDEF:000017F8                                         ; CODE XREF: NCompress::NPpmdZip::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+41p
UNDEF:000017FC ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:000017FC                 extrn @_RTC_CheckStackVars@8:near
UNDEF:000017FC                                         ; CODE XREF: NCompress::NPpmdZip::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+375p
UNDEF:000017FC                                         ; NCompress::NPpmdZip::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+183p ...
UNDEF:00001800 ; unsigned __int8 __thiscall CByteInBufWrap::ReadByteFromNewBlock(CByteInBufWrap *__hidden this)
UNDEF:00001800                 extrn ?ReadByteFromNewBlock@CByteInBufWrap@@QAEEXZ:near
UNDEF:00001800                                         ; CODE XREF: CByteInBufWrap::ReadByte(void)+47p
UNDEF:00001804 ; __stdcall MidAlloc(x)
UNDEF:00001804                 extrn _MidAlloc@4:near  ; CODE XREF: NCompress::NPpmdZip::CBuf::Alloc(void)+1Bp
UNDEF:00001808 ; void __thiscall CByteOutBufWrap::Free(CByteOutBufWrap *__hidden this)
UNDEF:00001808                 extrn ?Free@CByteOutBufWrap@@QAEXXZ:near
UNDEF:00001808                                         ; CODE XREF: CByteOutBufWrap::~CByteOutBufWrap(void)+11p
UNDEF:0000180C                 extrn _IID_ICompressSetCoderProperties:near
UNDEF:0000180C                                         ; DATA XREF: NCompress::NPpmdZip::CEncoder::QueryInterface(_GUID const &,void * *):loc_14DDo
UNDEF:00001810 ; public: __thiscall CByteOutBufWrap::CByteOutBufWrap(void)
UNDEF:00001810                 extrn ??0CByteOutBufWrap@@QAE@XZ:near
UNDEF:00001810                                         ; CODE XREF: NCompress::NPpmdZip::CEncoder::CEncoder(void)+64p
UNDEF:00001814 ; __int32 __thiscall CByteOutBufWrap::Flush(CByteOutBufWrap *__hidden this)
UNDEF:00001814                 extrn ?Flush@CByteOutBufWrap@@QAEJXZ:near
UNDEF:00001814                                         ; CODE XREF: NCompress::NPpmdZip::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+1A4p
UNDEF:00001814                                         ; CByteOutBufWrap::WriteByte(uchar)+39p
UNDEF:00001818 ; __stdcall Ppmd8_RangeEnc_FlushData(x)
UNDEF:00001818                 extrn _Ppmd8_RangeEnc_FlushData@4:near
UNDEF:00001818                                         ; CODE XREF: NCompress::NPpmdZip::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+199p
UNDEF:0000181C ; __stdcall Ppmd8_EncodeSymbol(x, x)
UNDEF:0000181C                 extrn _Ppmd8_EncodeSymbol@8:near
UNDEF:0000181C                                         ; CODE XREF: NCompress::NPpmdZip::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+18Dp
UNDEF:0000181C                                         ; NCompress::NPpmdZip::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+1DDp
UNDEF:00001820 ; bool __thiscall CByteOutBufWrap::Alloc(CByteOutBufWrap *__hidden this, unsigned int)
UNDEF:00001820                 extrn ?Alloc@CByteOutBufWrap@@QAE_NI@Z:near
UNDEF:00001820                                         ; CODE XREF: NCompress::NPpmdZip::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+3Ep
UNDEF:00001820
UNDEF:00001820