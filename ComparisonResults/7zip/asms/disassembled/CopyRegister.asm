.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : F7E23412478E51E52F6FD954993BFE45
.rdata:00000000 ; Input CRC32 : ADBD4789
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\CopyRegister.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00000000 _rdata          segment para public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 $SG66576        db 'Copy',0             ; DATA XREF: .rdata:00000018o
.rdata:00000005                 align 4
.rdata:00000008 ; struct CCodecInfo g_CodecInfo
.rdata:00000008 _g_CodecInfo    dd offset ?CreateCodec@@YGPAXXZ
.rdata:00000008                                         ; DATA XREF: CRegisterCodecCopy::CRegisterCodecCopy(void)+Eo
.rdata:00000008                                         ; CreateCodec(void)
.rdata:0000000C                 dd offset ?CreateCodec@@YGPAXXZ ; CreateCodec(void)
.rdata:00000010                 db    0
.rdata:00000011                 db    0
.rdata:00000012                 db    0
.rdata:00000013                 db    0
.rdata:00000014                 db    0
.rdata:00000015                 db    0
.rdata:00000016                 db    0
.rdata:00000017                 db    0
.rdata:00000018                 dd offset $SG66576      ; "Copy"
.rdata:0000001C                 db    1
.rdata:0000001D                 db    0
.rdata:0000001E                 db    0
.rdata:0000001F                 db    0
.rdata:00000020                 db    0
.rdata:00000021                 db    0
.rdata:00000022                 db    0
.rdata:00000023                 db    0
.rdata:00000024                 db    0
.rdata:00000025                 db    0
.rdata:00000026                 db    0
.rdata:00000027                 db    0
.rdata:00000027 _rdata          ends
.rdata:00000027
.text:00000028 ; ===========================================================================
.text:00000028
.text:00000028 ; Segment type: Pure code
.text:00000028 ; Segment permissions: Read/Execute
.text:00000028 _text           segment para public 'CODE' use32
.text:00000028                 assume cs:_text
.text:00000028                 ;org 28h
.text:00000028                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000028
.text:00000028 ; =============== S U B R O U T I N E =======================================
.text:00000028
.text:00000028 ; Attributes: bp-based frame
.text:00000028
.text:00000028 ; void * __stdcall CreateCodec(void)
.text:00000028 ?CreateCodec@@YGPAXXZ proc near         ; DATA XREF: .rdata:_g_CodecInfoo
.text:00000028                                         ; .rdata:0000000Co
.text:00000028
.text:00000028 var_18          = dword ptr -18h
.text:00000028 var_14          = dword ptr -14h
.text:00000028 var_10          = dword ptr -10h
.text:00000028 var_C           = dword ptr -0Ch
.text:00000028 var_4           = dword ptr -4
.text:00000028
.text:00000028                 push    ebp
.text:00000029                 mov     ebp, esp
.text:0000002B                 push    0FFFFFFFFh
.text:0000002D                 push    offset __ehhandler$?CreateCodec@@YGPAXXZ
.text:00000032                 mov     eax, large fs:0
.text:00000038                 push    eax
.text:00000039                 sub     esp, 0Ch
.text:0000003C                 mov     [ebp+var_18], 0CCCCCCCCh
.text:00000043                 mov     [ebp+var_14], 0CCCCCCCCh
.text:0000004A                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000051                 mov     eax, dword ptr ds:___security_cookie
.text:00000056                 xor     eax, ebp
.text:00000058                 push    eax
.text:00000059                 lea     eax, [ebp+var_C]
.text:0000005C                 mov     large fs:0, eax
.text:00000062                 push    28h ; '('       ; unsigned int
.text:00000064                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000069                 add     esp, 4
.text:0000006C                 mov     [ebp+var_14], eax
.text:0000006F                 mov     [ebp+var_4], 0
.text:00000076                 cmp     [ebp+var_14], 0
.text:0000007A                 jz      short loc_89
.text:0000007C                 mov     ecx, [ebp+var_14] ; this
.text:0000007F                 call    ??0CCopyCoder@NCompress@@QAE@XZ ; NCompress::CCopyCoder::CCopyCoder(void)
.text:00000084                 mov     [ebp+var_18], eax
.text:00000087                 jmp     short loc_90
.text:00000089 ; ---------------------------------------------------------------------------
.text:00000089
.text:00000089 loc_89:                                 ; CODE XREF: CreateCodec(void)+52j
.text:00000089                 mov     [ebp+var_18], 0
.text:00000090
.text:00000090 loc_90:                                 ; CODE XREF: CreateCodec(void)+5Fj
.text:00000090                 mov     eax, [ebp+var_18]
.text:00000093                 mov     [ebp+var_10], eax
.text:00000096                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000009D                 mov     eax, [ebp+var_10]
.text:000000A0                 mov     ecx, [ebp+var_C]
.text:000000A3                 mov     large fs:0, ecx
.text:000000AA                 pop     ecx
.text:000000AB                 add     esp, 18h
.text:000000AE                 cmp     ebp, esp
.text:000000B0                 call    __RTC_CheckEsp
.text:000000B5                 mov     esp, ebp
.text:000000B7                 pop     ebp
.text:000000B8                 retn
.text:000000B8 ?CreateCodec@@YGPAXXZ endp
.text:000000B8
.text:000000B8 ; ---------------------------------------------------------------------------
.text:000000B9                 align 4
.text:000000B9 _text           ends
.text:000000B9
.text$x:000000BC ; ===========================================================================
.text$x:000000BC
.text$x:000000BC ; Segment type: Pure code
.text$x:000000BC ; Segment permissions: Read/Execute
.text$x:000000BC _text$x         segment para public 'CODE' use32
.text$x:000000BC                 assume cs:_text$x
.text$x:000000BC                 ;org 0BCh
.text$x:000000BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000000BC
.text$x:000000BC ; =============== S U B R O U T I N E =======================================
.text$x:000000BC
.text$x:000000BC
.text$x:000000BC __unwindfunclet$?CreateCodec@@YGPAXXZ$0 proc near
.text$x:000000BC                                         ; DATA XREF: .xdata$x:000000E8o
.text$x:000000BC                 mov     eax, [ebp-14h]
.text$x:000000BF                 push    eax             ; void *
.text$x:000000C0                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000000C5                 pop     ecx
.text$x:000000C6                 retn
.text$x:000000C6 __unwindfunclet$?CreateCodec@@YGPAXXZ$0 endp
.text$x:000000C6
.text$x:000000C7
.text$x:000000C7 ; =============== S U B R O U T I N E =======================================
.text$x:000000C7
.text$x:000000C7
.text$x:000000C7 __ehhandler$?CreateCodec@@YGPAXXZ proc near
.text$x:000000C7                                         ; DATA XREF: CreateCodec(void)+5o
.text$x:000000C7
.text$x:000000C7 arg_4           = dword ptr  8
.text$x:000000C7
.text$x:000000C7                 mov     edx, [esp+arg_4]
.text$x:000000CB                 lea     eax, [edx+0Ch]
.text$x:000000CE                 mov     ecx, [edx-10h]
.text$x:000000D1                 xor     ecx, eax
.text$x:000000D3                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000000D8                 mov     eax, offset __ehfuncinfo$?CreateCodec@@YGPAXXZ
.text$x:000000DD                 jmp     ___CxxFrameHandler3
.text$x:000000DD __ehhandler$?CreateCodec@@YGPAXXZ endp
.text$x:000000DD
.text$x:000000DD ; ---------------------------------------------------------------------------
.text$x:000000E2                 align 4
.text$x:000000E2 _text$x         ends
.text$x:000000E2
.xdata$x:000000E4 ; ===========================================================================
.xdata$x:000000E4
.xdata$x:000000E4 ; Segment type: Pure data
.xdata$x:000000E4 ; Segment permissions: Read
.xdata$x:000000E4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000000E4                 assume cs:_xdata$x
.xdata$x:000000E4                 ;org 0E4h
.xdata$x:000000E4 __unwindtable$?CreateCodec@@YGPAXXZ db 0FFh
.xdata$x:000000E4                                         ; DATA XREF: .xdata$x:000000F4o
.xdata$x:000000E5                 db 0FFh
.xdata$x:000000E6                 db 0FFh
.xdata$x:000000E7                 db 0FFh
.xdata$x:000000E8                 dd offset __unwindfunclet$?CreateCodec@@YGPAXXZ$0
.xdata$x:000000EC __ehfuncinfo$?CreateCodec@@YGPAXXZ db  22h ; "
.xdata$x:000000EC                                         ; DATA XREF: __ehhandler$?CreateCodec@@YGPAXXZ+11o
.xdata$x:000000ED                 db    5
.xdata$x:000000EE                 db  93h ; ô
.xdata$x:000000EF                 db  19h
.xdata$x:000000F0                 db    1
.xdata$x:000000F1                 db    0
.xdata$x:000000F2                 db    0
.xdata$x:000000F3                 db    0
.xdata$x:000000F4                 dd offset __unwindtable$?CreateCodec@@YGPAXXZ
.xdata$x:000000F8                 db    0
.xdata$x:000000F9                 db    0
.xdata$x:000000FA                 db    0
.xdata$x:000000FB                 db    0
.xdata$x:000000FC                 db    0
.xdata$x:000000FD                 db    0
.xdata$x:000000FE                 db    0
.xdata$x:000000FF                 db    0
.xdata$x:00000100                 db    0
.xdata$x:00000101                 db    0
.xdata$x:00000102                 db    0
.xdata$x:00000103                 db    0
.xdata$x:00000104                 db    0
.xdata$x:00000105                 db    0
.xdata$x:00000106                 db    0
.xdata$x:00000107                 db    0
.xdata$x:00000108                 db    0
.xdata$x:00000109                 db    0
.xdata$x:0000010A                 db    0
.xdata$x:0000010B                 db    0
.xdata$x:0000010C                 db    1
.xdata$x:0000010D                 db    0
.xdata$x:0000010E                 db    0
.xdata$x:0000010F                 db    0
.xdata$x:0000010F _xdata$x        ends
.xdata$x:0000010F
.rtc$TMZ:00000110 ; ===========================================================================
.rtc$TMZ:00000110
.rtc$TMZ:00000110 ; Segment type: Pure data
.rtc$TMZ:00000110 ; Segment permissions: Read
.rtc$TMZ:00000110 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000110                 assume cs:_rtc$TMZ
.rtc$TMZ:00000110                 ;org 110h
.rtc$TMZ:00000110 ; COMDAT (pick any)
.rtc$TMZ:00000110 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000110 _rtc$TMZ        ends
.rtc$TMZ:00000110
.rtc$IMZ:00000114 ; ===========================================================================
.rtc$IMZ:00000114
.rtc$IMZ:00000114 ; Segment type: Pure data
.rtc$IMZ:00000114 ; Segment permissions: Read
.rtc$IMZ:00000114 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000114                 assume cs:_rtc$IMZ
.rtc$IMZ:00000114                 ;org 114h
.rtc$IMZ:00000114 ; COMDAT (pick any)
.rtc$IMZ:00000114 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000114 _rtc$IMZ        ends
.rtc$IMZ:00000114
.text:00000118 ; ===========================================================================
.text:00000118
.text:00000118 ; Segment type: Pure code
.text:00000118 ; Segment permissions: Read/Execute
.text:00000118 _text           segment para public 'CODE' use32
.text:00000118                 assume cs:_text
.text:00000118                 ;org 118h
.text:00000118 ; COMDAT (pick any)
.text:00000118                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000118
.text:00000118 ; =============== S U B R O U T I N E =======================================
.text:00000118
.text:00000118 ; Attributes: bp-based frame
.text:00000118
.text:00000118 ; _DWORD __thiscall NCompress::CCopyCoder::CCopyCoder(NCompress::CCopyCoder *__hidden this)
.text:00000118                 public ??0CCopyCoder@NCompress@@QAE@XZ
.text:00000118 ??0CCopyCoder@NCompress@@QAE@XZ proc near ; CODE XREF: CreateCodec(void)+57p
.text:00000118
.text:00000118 var_4           = dword ptr -4
.text:00000118
.text:00000118                 push    ebp
.text:00000119                 mov     ebp, esp
.text:0000011B                 push    ecx
.text:0000011C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000123                 mov     [ebp+var_4], ecx
.text:00000126                 mov     ecx, [ebp+var_4] ; this
.text:00000129                 call    ??0ICompressCoder@@QAE@XZ ; ICompressCoder::ICompressCoder(void)
.text:0000012E                 mov     ecx, [ebp+var_4]
.text:00000131                 add     ecx, 4          ; this
.text:00000134                 call    ??0ICompressSetInStream@@QAE@XZ ; ICompressSetInStream::ICompressSetInStream(void)
.text:00000139                 mov     ecx, [ebp+var_4]
.text:0000013C                 add     ecx, 8          ; this
.text:0000013F                 call    ??0ISequentialInStream@@QAE@XZ ; ISequentialInStream::ISequentialInStream(void)
.text:00000144                 mov     ecx, [ebp+var_4]
.text:00000147                 add     ecx, 0Ch        ; this
.text:0000014A                 call    ??0ICompressGetInStreamProcessedSize@@QAE@XZ ; ICompressGetInStreamProcessedSize::ICompressGetInStreamProcessedSize(void)
.text:0000014F                 mov     ecx, [ebp+var_4]
.text:00000152                 add     ecx, 10h        ; this
.text:00000155                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:0000015A                 mov     eax, [ebp+var_4]
.text:0000015D                 mov     dword ptr [eax], offset ??_7CCopyCoder@NCompress@@6BICompressCoder@@@ ; const NCompress::CCopyCoder::`vftable'{for `ICompressCoder'}
.text:00000163                 mov     ecx, [ebp+var_4]
.text:00000166                 mov     dword ptr [ecx+4], offset ??_7CCopyCoder@NCompress@@6BICompressSetInStream@@@ ; const NCompress::CCopyCoder::`vftable'{for `ICompressSetInStream'}
.text:0000016D                 mov     edx, [ebp+var_4]
.text:00000170                 mov     dword ptr [edx+8], offset ??_7CCopyCoder@NCompress@@6BISequentialInStream@@@ ; const NCompress::CCopyCoder::`vftable'{for `ISequentialInStream'}
.text:00000177                 mov     eax, [ebp+var_4]
.text:0000017A                 mov     dword ptr [eax+0Ch], offset ??_7CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ ; const NCompress::CCopyCoder::`vftable'{for `ICompressGetInStreamProcessedSize'}
.text:00000181                 mov     ecx, [ebp+var_4]
.text:00000184                 mov     dword ptr [ecx+14h], 0
.text:0000018B                 mov     ecx, [ebp+var_4]
.text:0000018E                 add     ecx, 18h
.text:00000191                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(void)
.text:00000196                 mov     edx, [ebp+var_4]
.text:00000199                 mov     dword ptr [edx+20h], 0
.text:000001A0                 mov     dword ptr [edx+24h], 0
.text:000001A7                 mov     eax, [ebp+var_4]
.text:000001AA                 add     esp, 4
.text:000001AD                 cmp     ebp, esp
.text:000001AF                 call    __RTC_CheckEsp
.text:000001B4                 mov     esp, ebp
.text:000001B6                 pop     ebp
.text:000001B7                 retn
.text:000001B7 ??0CCopyCoder@NCompress@@QAE@XZ endp
.text:000001B7
.text:000001B7 _text           ends
.text:000001B7
.rdata:000001B8 ; ===========================================================================
.rdata:000001B8
.rdata:000001B8 ; Segment type: Pure data
.rdata:000001B8 ; Segment permissions: Read
.rdata:000001B8 _rdata          segment dword public 'DATA' use32
.rdata:000001B8                 assume cs:_rdata
.rdata:000001B8                 ;org 1B8h
.rdata:000001B8 ; COMDAT (pick largest)
.rdata:000001B8                 dd offset ??_R4CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ICompressGetInStreamProcessedSize'}
.rdata:000001BC                 public ??_7CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@
.rdata:000001BC ; const NCompress::CCopyCoder::`vftable'{for `ICompressGetInStreamProcessedSize'}
.rdata:000001BC ??_7CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ dd offset ?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z
.rdata:000001BC                                         ; DATA XREF: NCompress::CCopyCoder::CCopyCoder(void)+62o
.rdata:000001BC                                         ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{12}' (_GUID const &,void * *)
.rdata:000001C0                 dd offset ?AddRef@CCopyCoder@NCompress@@WM@AGKXZ ; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{12}' (void)
.rdata:000001C4                 dd offset ?Release@CCopyCoder@NCompress@@WM@AGKXZ ; [thunk]:NCompress::CCopyCoder::Release`adjustor{12}' (void)
.rdata:000001C8                 dd offset ?GetInStreamProcessedSize@CCopyCoder@NCompress@@UAGJPA_K@Z ; NCompress::CCopyCoder::GetInStreamProcessedSize(unsigned __int64 *)
.rdata:000001C8 _rdata          ends
.rdata:000001C8
.rdata:000001CC ; ===========================================================================
.rdata:000001CC
.rdata:000001CC ; Segment type: Pure data
.rdata:000001CC ; Segment permissions: Read
.rdata:000001CC _rdata          segment dword public 'DATA' use32
.rdata:000001CC                 assume cs:_rdata
.rdata:000001CC                 ;org 1CCh
.rdata:000001CC ; COMDAT (pick largest)
.rdata:000001CC                 dd offset ??_R4CCopyCoder@NCompress@@6BISequentialInStream@@@ ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ISequentialInStream'}
.rdata:000001D0                 public ??_7CCopyCoder@NCompress@@6BISequentialInStream@@@
.rdata:000001D0 ; const NCompress::CCopyCoder::`vftable'{for `ISequentialInStream'}
.rdata:000001D0 ??_7CCopyCoder@NCompress@@6BISequentialInStream@@@ dd offset ?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z
.rdata:000001D0                                         ; DATA XREF: NCompress::CCopyCoder::CCopyCoder(void)+58o
.rdata:000001D0                                         ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)
.rdata:000001D4                 dd offset ?AddRef@CCopyCoder@NCompress@@W7AGKXZ ; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{8}' (void)
.rdata:000001D8                 dd offset ?Release@CCopyCoder@NCompress@@W7AGKXZ ; [thunk]:NCompress::CCopyCoder::Release`adjustor{8}' (void)
.rdata:000001DC                 dd offset ?Read@CCopyCoder@NCompress@@UAGJPAXIPAI@Z ; NCompress::CCopyCoder::Read(void *,uint,uint *)
.rdata:000001DC _rdata          ends
.rdata:000001DC
.rdata:000001E0 ; ===========================================================================
.rdata:000001E0
.rdata:000001E0 ; Segment type: Pure data
.rdata:000001E0 ; Segment permissions: Read
.rdata:000001E0 _rdata          segment dword public 'DATA' use32
.rdata:000001E0                 assume cs:_rdata
.rdata:000001E0                 ;org 1E0h
.rdata:000001E0 ; COMDAT (pick largest)
.rdata:000001E0                 dd offset ??_R4CCopyCoder@NCompress@@6BICompressSetInStream@@@ ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ICompressSetInStream'}
.rdata:000001E4                 public ??_7CCopyCoder@NCompress@@6BICompressSetInStream@@@
.rdata:000001E4 ; const NCompress::CCopyCoder::`vftable'{for `ICompressSetInStream'}
.rdata:000001E4 ??_7CCopyCoder@NCompress@@6BICompressSetInStream@@@ dd offset ?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.rdata:000001E4                                         ; DATA XREF: NCompress::CCopyCoder::CCopyCoder(void)+4Eo
.rdata:000001E4                                         ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:000001E8                 dd offset ?AddRef@CCopyCoder@NCompress@@W3AGKXZ ; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{4}' (void)
.rdata:000001EC                 dd offset ?Release@CCopyCoder@NCompress@@W3AGKXZ ; [thunk]:NCompress::CCopyCoder::Release`adjustor{4}' (void)
.rdata:000001F0                 dd offset ?SetInStream@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@@Z ; NCompress::CCopyCoder::SetInStream(ISequentialInStream *)
.rdata:000001F4                 dd offset ?ReleaseInStream@CCopyCoder@NCompress@@UAGJXZ ; NCompress::CCopyCoder::ReleaseInStream(void)
.rdata:000001F4 _rdata          ends
.rdata:000001F4
.rdata:000001F8 ; ===========================================================================
.rdata:000001F8
.rdata:000001F8 ; Segment type: Pure data
.rdata:000001F8 ; Segment permissions: Read
.rdata:000001F8 _rdata          segment dword public 'DATA' use32
.rdata:000001F8                 assume cs:_rdata
.rdata:000001F8                 ;org 1F8h
.rdata:000001F8 ; COMDAT (pick largest)
.rdata:000001F8                 dd offset ??_R4CCopyCoder@NCompress@@6BICompressCoder@@@ ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata:000001FC                 public ??_7CCopyCoder@NCompress@@6BICompressCoder@@@
.rdata:000001FC ; const NCompress::CCopyCoder::`vftable'{for `ICompressCoder'}
.rdata:000001FC ??_7CCopyCoder@NCompress@@6BICompressCoder@@@ dd offset ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z
.rdata:000001FC                                         ; DATA XREF: NCompress::CCopyCoder::CCopyCoder(void)+45o
.rdata:000001FC                                         ; NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)
.rdata:00000200                 dd offset ?AddRef@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::AddRef(void)
.rdata:00000204                 dd offset ?Release@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::Release(void)
.rdata:00000208                 dd offset ?Code@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ; NCompress::CCopyCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)
.rdata:00000208 _rdata          ends
.rdata:00000208
.rdata$r:0000020C ; ===========================================================================
.rdata$r:0000020C
.rdata$r:0000020C ; Segment type: Pure data
.rdata$r:0000020C ; Segment permissions: Read
.rdata$r:0000020C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000020C                 assume cs:_rdata$r
.rdata$r:0000020C                 ;org 20Ch
.rdata$r:0000020C ; COMDAT (pick any)
.rdata$r:0000020C                 public ??_R4CCopyCoder@NCompress@@6BICompressCoder@@@
.rdata$r:0000020C ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata$r:0000020C ??_R4CCopyCoder@NCompress@@6BICompressCoder@@@ db    0
.rdata$r:0000020C                                         ; DATA XREF: .rdata:000001F8o
.rdata$r:0000020D                 db    0
.rdata$r:0000020E                 db    0
.rdata$r:0000020F                 db    0
.rdata$r:00000210                 db    0
.rdata$r:00000211                 db    0
.rdata$r:00000212                 db    0
.rdata$r:00000213                 db    0
.rdata$r:00000214                 db    0
.rdata$r:00000215                 db    0
.rdata$r:00000216                 db    0
.rdata$r:00000217                 db    0
.rdata$r:00000218                 dd offset ??_R0?AVCCopyCoder@NCompress@@@8 ; NCompress::CCopyCoder `RTTI Type Descriptor'
.rdata$r:0000021C                 dd offset ??_R3CCopyCoder@NCompress@@8 ; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000021C _rdata$r        ends
.rdata$r:0000021C
.data:00000220 ; ===========================================================================
.data:00000220
.data:00000220 ; Segment type: Pure data
.data:00000220 ; Segment permissions: Read/Write
.data:00000220 _data           segment dword public 'DATA' use32
.data:00000220                 assume cs:_data
.data:00000220                 ;org 220h
.data:00000220 ; COMDAT (pick any)
.data:00000220                 public ??_R0?AVCCopyCoder@NCompress@@@8
.data:00000220 ; class NCompress::CCopyCoder `RTTI Type Descriptor'
.data:00000220 ??_R0?AVCCopyCoder@NCompress@@@8 dd offset ??_7type_info@@6B@
.data:00000220                                         ; DATA XREF: .rdata$r:00000218o
.data:00000220                                         ; .rdata$r:NCompress::CCopyCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00000220                                         ; const type_info::`vftable'
.data:00000224                 align 8
.data:00000228 a_?avccopycoder db '.?AVCCopyCoder@NCompress@@',0
.data:00000243                 align 4
.data:00000243 _data           ends
.data:00000243
.rdata$r:00000244 ; ===========================================================================
.rdata$r:00000244
.rdata$r:00000244 ; Segment type: Pure data
.rdata$r:00000244 ; Segment permissions: Read
.rdata$r:00000244 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000244                 assume cs:_rdata$r
.rdata$r:00000244                 ;org 244h
.rdata$r:00000244 ; COMDAT (pick any)
.rdata$r:00000244                 public ??_R3CCopyCoder@NCompress@@8
.rdata$r:00000244 ; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000244 ??_R3CCopyCoder@NCompress@@8 db    0    ; DATA XREF: .rdata$r:0000021Co
.rdata$r:00000244                                         ; .rdata$r:00000298o ...
.rdata$r:00000245                 db    0
.rdata$r:00000246                 db    0
.rdata$r:00000247                 db    0
.rdata$r:00000248                 db    5
.rdata$r:00000249                 db    0
.rdata$r:0000024A                 db    0
.rdata$r:0000024B                 db    0
.rdata$r:0000024C                 db  0Ah
.rdata$r:0000024D                 db    0
.rdata$r:0000024E                 db    0
.rdata$r:0000024F                 db    0
.rdata$r:00000250                 dd offset ??_R2CCopyCoder@NCompress@@8 ; NCompress::CCopyCoder::`RTTI Base Class Array'
.rdata$r:00000250 _rdata$r        ends
.rdata$r:00000250
.rdata$r:00000254 ; ===========================================================================
.rdata$r:00000254
.rdata$r:00000254 ; Segment type: Pure data
.rdata$r:00000254 ; Segment permissions: Read
.rdata$r:00000254 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000254                 assume cs:_rdata$r
.rdata$r:00000254                 ;org 254h
.rdata$r:00000254 ; COMDAT (pick any)
.rdata$r:00000254                 public ??_R2CCopyCoder@NCompress@@8
.rdata$r:00000254 ; NCompress::CCopyCoder::`RTTI Base Class Array'
.rdata$r:00000254 ??_R2CCopyCoder@NCompress@@8 dd offset ??_R1A@?0A@EA@CCopyCoder@NCompress@@8
.rdata$r:00000254                                         ; DATA XREF: .rdata$r:00000250o
.rdata$r:00000254                                         ; NCompress::CCopyCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000258                 dd offset ??_R1A@?0A@EA@ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000025C                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:00000260                 dd offset ??_R13?0A@EA@ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00000264                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:00000268                 dd offset ??_R17?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:0000026C                 dd offset ??_R17?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
.rdata$r:00000270                 dd offset ??_R1M@?0A@EA@ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (12,-1,0,64)'
.rdata$r:00000274                 dd offset ??_R1M@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (12,-1,0,66)'
.rdata$r:00000278                 dd offset ??_R1BA@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (16,-1,0,64)'
.rdata$r:0000027C                 db    0
.rdata$r:0000027D                 align 10h
.rdata$r:0000027D _rdata$r        ends
.rdata$r:0000027D
.rdata$r:00000280 ; ===========================================================================
.rdata$r:00000280
.rdata$r:00000280 ; Segment type: Pure data
.rdata$r:00000280 ; Segment permissions: Read
.rdata$r:00000280 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000280                 assume cs:_rdata$r
.rdata$r:00000280                 ;org 280h
.rdata$r:00000280 ; COMDAT (pick any)
.rdata$r:00000280                 public ??_R1A@?0A@EA@CCopyCoder@NCompress@@8
.rdata$r:00000280 ; NCompress::CCopyCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000280 ??_R1A@?0A@EA@CCopyCoder@NCompress@@8 dd offset ??_R0?AVCCopyCoder@NCompress@@@8
.rdata$r:00000280                                         ; DATA XREF: .rdata$r:NCompress::CCopyCoder::`RTTI Base Class Array'o
.rdata$r:00000280                                         ; NCompress::CCopyCoder `RTTI Type Descriptor'
.rdata$r:00000284                 db    9
.rdata$r:00000285                 db    0
.rdata$r:00000286                 db    0
.rdata$r:00000287                 db    0
.rdata$r:00000288                 db    0
.rdata$r:00000289                 db    0
.rdata$r:0000028A                 db    0
.rdata$r:0000028B                 db    0
.rdata$r:0000028C                 db 0FFh
.rdata$r:0000028D                 db 0FFh
.rdata$r:0000028E                 db 0FFh
.rdata$r:0000028F                 db 0FFh
.rdata$r:00000290                 db    0
.rdata$r:00000291                 db    0
.rdata$r:00000292                 db    0
.rdata$r:00000293                 db    0
.rdata$r:00000294                 db  40h ; @
.rdata$r:00000295                 db    0
.rdata$r:00000296                 db    0
.rdata$r:00000297                 db    0
.rdata$r:00000298                 dd offset ??_R3CCopyCoder@NCompress@@8 ; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000298 _rdata$r        ends
.rdata$r:00000298
.rdata$r:0000029C ; ===========================================================================
.rdata$r:0000029C
.rdata$r:0000029C ; Segment type: Pure data
.rdata$r:0000029C ; Segment permissions: Read
.rdata$r:0000029C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000029C                 assume cs:_rdata$r
.rdata$r:0000029C                 ;org 29Ch
.rdata$r:0000029C ; COMDAT (pick any)
.rdata$r:0000029C                 public ??_R1A@?0A@EA@ICompressCoder@@8
.rdata$r:0000029C ; ICompressCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000029C ??_R1A@?0A@EA@ICompressCoder@@8 dd offset ??_R0?AUICompressCoder@@@8
.rdata$r:0000029C                                         ; DATA XREF: .rdata$r:00000258o
.rdata$r:0000029C                                         ; .rdata$r:ICompressCoder::`RTTI Base Class Array'o
.rdata$r:0000029C                                         ; ICompressCoder `RTTI Type Descriptor'
.rdata$r:000002A0                 db    1
.rdata$r:000002A1                 db    0
.rdata$r:000002A2                 db    0
.rdata$r:000002A3                 db    0
.rdata$r:000002A4                 db    0
.rdata$r:000002A5                 db    0
.rdata$r:000002A6                 db    0
.rdata$r:000002A7                 db    0
.rdata$r:000002A8                 db 0FFh
.rdata$r:000002A9                 db 0FFh
.rdata$r:000002AA                 db 0FFh
.rdata$r:000002AB                 db 0FFh
.rdata$r:000002AC                 db    0
.rdata$r:000002AD                 db    0
.rdata$r:000002AE                 db    0
.rdata$r:000002AF                 db    0
.rdata$r:000002B0                 db  40h ; @
.rdata$r:000002B1                 db    0
.rdata$r:000002B2                 db    0
.rdata$r:000002B3                 db    0
.rdata$r:000002B4                 dd offset ??_R3ICompressCoder@@8 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000002B4 _rdata$r        ends
.rdata$r:000002B4
.data:000002B8 ; ===========================================================================
.data:000002B8
.data:000002B8 ; Segment type: Pure data
.data:000002B8 ; Segment permissions: Read/Write
.data:000002B8 _data           segment dword public 'DATA' use32
.data:000002B8                 assume cs:_data
.data:000002B8                 ;org 2B8h
.data:000002B8 ; COMDAT (pick any)
.data:000002B8                 public ??_R0?AUICompressCoder@@@8
.data:000002B8 ; struct ICompressCoder `RTTI Type Descriptor'
.data:000002B8 ??_R0?AUICompressCoder@@@8 dd offset ??_7type_info@@6B@
.data:000002B8                                         ; DATA XREF: .rdata$r:ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000002B8                                         ; .rdata$r:00000804o
.data:000002B8                                         ; const type_info::`vftable'
.data:000002BC                 align 10h
.data:000002C0 a_?auicompressc db '.?AUICompressCoder@@',0
.data:000002D5                 align 4
.data:000002D5 _data           ends
.data:000002D5
.rdata$r:000002D8 ; ===========================================================================
.rdata$r:000002D8
.rdata$r:000002D8 ; Segment type: Pure data
.rdata$r:000002D8 ; Segment permissions: Read
.rdata$r:000002D8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000002D8                 assume cs:_rdata$r
.rdata$r:000002D8                 ;org 2D8h
.rdata$r:000002D8 ; COMDAT (pick any)
.rdata$r:000002D8                 public ??_R3ICompressCoder@@8
.rdata$r:000002D8 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000002D8 ??_R3ICompressCoder@@8 db    0          ; DATA XREF: .rdata$r:000002B4o
.rdata$r:000002D8                                         ; .rdata$r:00000808o
.rdata$r:000002D9                 db    0
.rdata$r:000002DA                 db    0
.rdata$r:000002DB                 db    0
.rdata$r:000002DC                 db    0
.rdata$r:000002DD                 db    0
.rdata$r:000002DE                 db    0
.rdata$r:000002DF                 db    0
.rdata$r:000002E0                 db    2
.rdata$r:000002E1                 db    0
.rdata$r:000002E2                 db    0
.rdata$r:000002E3                 db    0
.rdata$r:000002E4                 dd offset ??_R2ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Array'
.rdata$r:000002E4 _rdata$r        ends
.rdata$r:000002E4
.rdata$r:000002E8 ; ===========================================================================
.rdata$r:000002E8
.rdata$r:000002E8 ; Segment type: Pure data
.rdata$r:000002E8 ; Segment permissions: Read
.rdata$r:000002E8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000002E8                 assume cs:_rdata$r
.rdata$r:000002E8                 ;org 2E8h
.rdata$r:000002E8 ; COMDAT (pick any)
.rdata$r:000002E8                 public ??_R2ICompressCoder@@8
.rdata$r:000002E8 ; ICompressCoder::`RTTI Base Class Array'
.rdata$r:000002E8 ??_R2ICompressCoder@@8 dd offset ??_R1A@?0A@EA@ICompressCoder@@8
.rdata$r:000002E8                                         ; DATA XREF: .rdata$r:000002E4o
.rdata$r:000002E8                                         ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000002EC                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000002F0                 db    0
.rdata$r:000002F1                 align 4
.rdata$r:000002F1 _rdata$r        ends
.rdata$r:000002F1
.rdata$r:000002F4 ; ===========================================================================
.rdata$r:000002F4
.rdata$r:000002F4 ; Segment type: Pure data
.rdata$r:000002F4 ; Segment permissions: Read
.rdata$r:000002F4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000002F4                 assume cs:_rdata$r
.rdata$r:000002F4                 ;org 2F4h
.rdata$r:000002F4 ; COMDAT (pick any)
.rdata$r:000002F4                 public ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:000002F4 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000002F4 ??_R1A@?0A@EA@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000002F4                                         ; DATA XREF: .rdata$r:000002ECo
.rdata$r:000002F4                                         ; .rdata$r:IUnknown::`RTTI Base Class Array'o ...
.rdata$r:000002F4                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:000002F8                 align 10h
.rdata$r:00000300                 db 0FFh
.rdata$r:00000301                 db 0FFh
.rdata$r:00000302                 db 0FFh
.rdata$r:00000303                 db 0FFh
.rdata$r:00000304                 db    0
.rdata$r:00000305                 db    0
.rdata$r:00000306                 db    0
.rdata$r:00000307                 db    0
.rdata$r:00000308                 db  40h ; @
.rdata$r:00000309                 db    0
.rdata$r:0000030A                 db    0
.rdata$r:0000030B                 db    0
.rdata$r:0000030C                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000030C _rdata$r        ends
.rdata$r:0000030C
.data:00000310 ; ===========================================================================
.data:00000310
.data:00000310 ; Segment type: Pure data
.data:00000310 ; Segment permissions: Read/Write
.data:00000310 _data           segment dword public 'DATA' use32
.data:00000310                 assume cs:_data
.data:00000310                 ;org 310h
.data:00000310 ; COMDAT (pick any)
.data:00000310                 public ??_R0?AUIUnknown@@@8
.data:00000310 ; struct IUnknown `RTTI Type Descriptor'
.data:00000310 ??_R0?AUIUnknown@@@8 dd offset ??_7type_info@@6B@
.data:00000310                                         ; DATA XREF: .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000310                                         ; .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'o ...
.data:00000310                                         ; const type_info::`vftable'
.data:00000314                 align 8
.data:00000318 a_?auiunknown@@ db '.?AUIUnknown@@',0
.data:00000327                 align 4
.data:00000327 _data           ends
.data:00000327
.rdata$r:00000328 ; ===========================================================================
.rdata$r:00000328
.rdata$r:00000328 ; Segment type: Pure data
.rdata$r:00000328 ; Segment permissions: Read
.rdata$r:00000328 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000328                 assume cs:_rdata$r
.rdata$r:00000328                 ;org 328h
.rdata$r:00000328 ; COMDAT (pick any)
.rdata$r:00000328                 public ??_R3IUnknown@@8
.rdata$r:00000328 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000328 ??_R3IUnknown@@8 db    0                ; DATA XREF: .rdata$r:0000030Co
.rdata$r:00000328                                         ; .rdata$r:00000358o ...
.rdata$r:00000329                 db    0
.rdata$r:0000032A                 db    0
.rdata$r:0000032B                 db    0
.rdata$r:0000032C                 db    0
.rdata$r:0000032D                 db    0
.rdata$r:0000032E                 db    0
.rdata$r:0000032F                 db    0
.rdata$r:00000330                 db    1
.rdata$r:00000331                 db    0
.rdata$r:00000332                 db    0
.rdata$r:00000333                 db    0
.rdata$r:00000334                 dd offset ??_R2IUnknown@@8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00000334 _rdata$r        ends
.rdata$r:00000334
.rdata$r:00000338 ; ===========================================================================
.rdata$r:00000338
.rdata$r:00000338 ; Segment type: Pure data
.rdata$r:00000338 ; Segment permissions: Read
.rdata$r:00000338 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000338                 assume cs:_rdata$r
.rdata$r:00000338                 ;org 338h
.rdata$r:00000338 ; COMDAT (pick any)
.rdata$r:00000338                 public ??_R2IUnknown@@8
.rdata$r:00000338 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00000338 ??_R2IUnknown@@8 dd offset ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00000338                                         ; DATA XREF: .rdata$r:00000334o
.rdata$r:00000338                                         ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000033C                 db    0
.rdata$r:0000033D                 align 10h
.rdata$r:0000033D _rdata$r        ends
.rdata$r:0000033D
.rdata$r:00000340 ; ===========================================================================
.rdata$r:00000340
.rdata$r:00000340 ; Segment type: Pure data
.rdata$r:00000340 ; Segment permissions: Read
.rdata$r:00000340 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000340                 assume cs:_rdata$r
.rdata$r:00000340                 ;org 340h
.rdata$r:00000340 ; COMDAT (pick any)
.rdata$r:00000340                 public ??_R1A@?0A@EC@IUnknown@@8
.rdata$r:00000340 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 66)'
.rdata$r:00000340 ??_R1A@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00000340                                         ; DATA XREF: .rdata$r:0000025Co
.rdata$r:00000340                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00000344                 db    0
.rdata$r:00000345                 db    0
.rdata$r:00000346                 db    0
.rdata$r:00000347                 db    0
.rdata$r:00000348                 db    0
.rdata$r:00000349                 db    0
.rdata$r:0000034A                 db    0
.rdata$r:0000034B                 db    0
.rdata$r:0000034C                 db 0FFh
.rdata$r:0000034D                 db 0FFh
.rdata$r:0000034E                 db 0FFh
.rdata$r:0000034F                 db 0FFh
.rdata$r:00000350                 db    0
.rdata$r:00000351                 db    0
.rdata$r:00000352                 db    0
.rdata$r:00000353                 db    0
.rdata$r:00000354                 db  42h ; B
.rdata$r:00000355                 db    0
.rdata$r:00000356                 db    0
.rdata$r:00000357                 db    0
.rdata$r:00000358                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000358 _rdata$r        ends
.rdata$r:00000358
.rdata$r:0000035C ; ===========================================================================
.rdata$r:0000035C
.rdata$r:0000035C ; Segment type: Pure data
.rdata$r:0000035C ; Segment permissions: Read
.rdata$r:0000035C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000035C                 assume cs:_rdata$r
.rdata$r:0000035C                 ;org 35Ch
.rdata$r:0000035C ; COMDAT (pick any)
.rdata$r:0000035C                 public ??_R13?0A@EA@ICompressSetInStream@@8
.rdata$r:0000035C ; ICompressSetInStream::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:0000035C ??_R13?0A@EA@ICompressSetInStream@@8 dd offset ??_R0?AUICompressSetInStream@@@8
.rdata$r:0000035C                                         ; DATA XREF: .rdata$r:00000260o
.rdata$r:0000035C                                         ; ICompressSetInStream `RTTI Type Descriptor'
.rdata$r:00000360                 db    1
.rdata$r:00000361                 db    0
.rdata$r:00000362                 db    0
.rdata$r:00000363                 db    0
.rdata$r:00000364                 db    4
.rdata$r:00000365                 db    0
.rdata$r:00000366                 db    0
.rdata$r:00000367                 db    0
.rdata$r:00000368                 db 0FFh
.rdata$r:00000369                 db 0FFh
.rdata$r:0000036A                 db 0FFh
.rdata$r:0000036B                 db 0FFh
.rdata$r:0000036C                 db    0
.rdata$r:0000036D                 db    0
.rdata$r:0000036E                 db    0
.rdata$r:0000036F                 db    0
.rdata$r:00000370                 db  40h ; @
.rdata$r:00000371                 db    0
.rdata$r:00000372                 db    0
.rdata$r:00000373                 db    0
.rdata$r:00000374                 dd offset ??_R3ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000374 _rdata$r        ends
.rdata$r:00000374
.data:00000378 ; ===========================================================================
.data:00000378
.data:00000378 ; Segment type: Pure data
.data:00000378 ; Segment permissions: Read/Write
.data:00000378 _data           segment dword public 'DATA' use32
.data:00000378                 assume cs:_data
.data:00000378                 ;org 378h
.data:00000378 ; COMDAT (pick any)
.data:00000378                 public ??_R0?AUICompressSetInStream@@@8
.data:00000378 ; struct ICompressSetInStream `RTTI Type Descriptor'
.data:00000378 ??_R0?AUICompressSetInStream@@@8 dd offset ??_7type_info@@6B@
.data:00000378                                         ; DATA XREF: .rdata$r:ICompressSetInStream::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:00000378                                         ; .rdata$r:ICompressSetInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00000378                                         ; const type_info::`vftable'
.data:0000037C                 align 10h
.data:00000380 a_?auicompresss db '.?AUICompressSetInStream@@',0
.data:0000039B                 align 4
.data:0000039B _data           ends
.data:0000039B
.rdata$r:0000039C ; ===========================================================================
.rdata$r:0000039C
.rdata$r:0000039C ; Segment type: Pure data
.rdata$r:0000039C ; Segment permissions: Read
.rdata$r:0000039C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000039C                 assume cs:_rdata$r
.rdata$r:0000039C                 ;org 39Ch
.rdata$r:0000039C ; COMDAT (pick any)
.rdata$r:0000039C                 public ??_R3ICompressSetInStream@@8
.rdata$r:0000039C ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000039C ??_R3ICompressSetInStream@@8 db    0    ; DATA XREF: .rdata$r:00000374o
.rdata$r:0000039C                                         ; .rdata$r:000003D0o ...
.rdata$r:0000039D                 db    0
.rdata$r:0000039E                 db    0
.rdata$r:0000039F                 db    0
.rdata$r:000003A0                 db    0
.rdata$r:000003A1                 db    0
.rdata$r:000003A2                 db    0
.rdata$r:000003A3                 db    0
.rdata$r:000003A4                 db    2
.rdata$r:000003A5                 db    0
.rdata$r:000003A6                 db    0
.rdata$r:000003A7                 db    0
.rdata$r:000003A8                 dd offset ??_R2ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Base Class Array'
.rdata$r:000003A8 _rdata$r        ends
.rdata$r:000003A8
.rdata$r:000003AC ; ===========================================================================
.rdata$r:000003AC
.rdata$r:000003AC ; Segment type: Pure data
.rdata$r:000003AC ; Segment permissions: Read
.rdata$r:000003AC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000003AC                 assume cs:_rdata$r
.rdata$r:000003AC                 ;org 3ACh
.rdata$r:000003AC ; COMDAT (pick any)
.rdata$r:000003AC                 public ??_R2ICompressSetInStream@@8
.rdata$r:000003AC ; ICompressSetInStream::`RTTI Base Class Array'
.rdata$r:000003AC ??_R2ICompressSetInStream@@8 dd offset ??_R1A@?0A@EA@ICompressSetInStream@@8
.rdata$r:000003AC                                         ; DATA XREF: .rdata$r:000003A8o
.rdata$r:000003AC                                         ; ICompressSetInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000003B0                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000003B4                 db    0
.rdata$r:000003B5                 align 4
.rdata$r:000003B5 _rdata$r        ends
.rdata$r:000003B5
.rdata$r:000003B8 ; ===========================================================================
.rdata$r:000003B8
.rdata$r:000003B8 ; Segment type: Pure data
.rdata$r:000003B8 ; Segment permissions: Read
.rdata$r:000003B8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000003B8                 assume cs:_rdata$r
.rdata$r:000003B8                 ;org 3B8h
.rdata$r:000003B8 ; COMDAT (pick any)
.rdata$r:000003B8                 public ??_R1A@?0A@EA@ICompressSetInStream@@8
.rdata$r:000003B8 ; ICompressSetInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000003B8 ??_R1A@?0A@EA@ICompressSetInStream@@8 dd offset ??_R0?AUICompressSetInStream@@@8
.rdata$r:000003B8                                         ; DATA XREF: .rdata$r:ICompressSetInStream::`RTTI Base Class Array'o
.rdata$r:000003B8                                         ; ICompressSetInStream `RTTI Type Descriptor'
.rdata$r:000003BC                 db    1
.rdata$r:000003BD                 db    0
.rdata$r:000003BE                 db    0
.rdata$r:000003BF                 db    0
.rdata$r:000003C0                 db    0
.rdata$r:000003C1                 db    0
.rdata$r:000003C2                 db    0
.rdata$r:000003C3                 db    0
.rdata$r:000003C4                 db 0FFh
.rdata$r:000003C5                 db 0FFh
.rdata$r:000003C6                 db 0FFh
.rdata$r:000003C7                 db 0FFh
.rdata$r:000003C8                 db    0
.rdata$r:000003C9                 db    0
.rdata$r:000003CA                 db    0
.rdata$r:000003CB                 db    0
.rdata$r:000003CC                 db  40h ; @
.rdata$r:000003CD                 db    0
.rdata$r:000003CE                 db    0
.rdata$r:000003CF                 db    0
.rdata$r:000003D0                 dd offset ??_R3ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000003D0 _rdata$r        ends
.rdata$r:000003D0
.rdata$r:000003D4 ; ===========================================================================
.rdata$r:000003D4
.rdata$r:000003D4 ; Segment type: Pure data
.rdata$r:000003D4 ; Segment permissions: Read
.rdata$r:000003D4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000003D4                 assume cs:_rdata$r
.rdata$r:000003D4                 ;org 3D4h
.rdata$r:000003D4 ; COMDAT (pick any)
.rdata$r:000003D4                 public ??_R13?0A@EC@IUnknown@@8
.rdata$r:000003D4 ; IUnknown::`RTTI Base Class Descriptor at (4, -1, 0, 66)'
.rdata$r:000003D4 ??_R13?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000003D4                                         ; DATA XREF: .rdata$r:00000264o
.rdata$r:000003D4                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:000003D8                 db    0
.rdata$r:000003D9                 db    0
.rdata$r:000003DA                 db    0
.rdata$r:000003DB                 db    0
.rdata$r:000003DC                 db    4
.rdata$r:000003DD                 db    0
.rdata$r:000003DE                 db    0
.rdata$r:000003DF                 db    0
.rdata$r:000003E0                 db 0FFh
.rdata$r:000003E1                 db 0FFh
.rdata$r:000003E2                 db 0FFh
.rdata$r:000003E3                 db 0FFh
.rdata$r:000003E4                 db    0
.rdata$r:000003E5                 db    0
.rdata$r:000003E6                 db    0
.rdata$r:000003E7                 db    0
.rdata$r:000003E8                 db  42h ; B
.rdata$r:000003E9                 db    0
.rdata$r:000003EA                 db    0
.rdata$r:000003EB                 db    0
.rdata$r:000003EC                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000003EC _rdata$r        ends
.rdata$r:000003EC
.rdata$r:000003F0 ; ===========================================================================
.rdata$r:000003F0
.rdata$r:000003F0 ; Segment type: Pure data
.rdata$r:000003F0 ; Segment permissions: Read
.rdata$r:000003F0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000003F0                 assume cs:_rdata$r
.rdata$r:000003F0                 ;org 3F0h
.rdata$r:000003F0 ; COMDAT (pick any)
.rdata$r:000003F0                 public ??_R17?0A@EA@ISequentialInStream@@8
.rdata$r:000003F0 ; ISequentialInStream::`RTTI Base Class Descriptor at (8, -1, 0, 64)'
.rdata$r:000003F0 ??_R17?0A@EA@ISequentialInStream@@8 dd offset ??_R0?AUISequentialInStream@@@8
.rdata$r:000003F0                                         ; DATA XREF: .rdata$r:00000268o
.rdata$r:000003F0                                         ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:000003F4                 db    1
.rdata$r:000003F5                 db    0
.rdata$r:000003F6                 db    0
.rdata$r:000003F7                 db    0
.rdata$r:000003F8                 db    8
.rdata$r:000003F9                 db    0
.rdata$r:000003FA                 db    0
.rdata$r:000003FB                 db    0
.rdata$r:000003FC                 db 0FFh
.rdata$r:000003FD                 db 0FFh
.rdata$r:000003FE                 db 0FFh
.rdata$r:000003FF                 db 0FFh
.rdata$r:00000400                 db    0
.rdata$r:00000401                 db    0
.rdata$r:00000402                 db    0
.rdata$r:00000403                 db    0
.rdata$r:00000404                 db  40h ; @
.rdata$r:00000405                 db    0
.rdata$r:00000406                 db    0
.rdata$r:00000407                 db    0
.rdata$r:00000408                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000408 _rdata$r        ends
.rdata$r:00000408
.data:0000040C ; ===========================================================================
.data:0000040C
.data:0000040C ; Segment type: Pure data
.data:0000040C ; Segment permissions: Read/Write
.data:0000040C _data           segment dword public 'DATA' use32
.data:0000040C                 assume cs:_data
.data:0000040C                 ;org 40Ch
.data:0000040C ; COMDAT (pick any)
.data:0000040C                 public ??_R0?AUISequentialInStream@@@8
.data:0000040C ; struct ISequentialInStream `RTTI Type Descriptor'
.data:0000040C ??_R0?AUISequentialInStream@@@8 dd offset ??_7type_info@@6B@
.data:0000040C                                         ; DATA XREF: .rdata$r:ISequentialInStream::`RTTI Base Class Descriptor at (8,-1,0,64)'o
.data:0000040C                                         ; .rdata$r:ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:0000040C                                         ; const type_info::`vftable'
.data:00000410                 db    0
.data:00000411                 db    0
.data:00000412                 db    0
.data:00000413                 db    0
.data:00000414                 db  2Eh ; .
.data:00000415                 db  3Fh ; ?
.data:00000416                 db  41h ; A
.data:00000417                 db  55h ; U
.data:00000418                 db  49h ; I
.data:00000419                 db  53h ; S
.data:0000041A                 db  65h ; e
.data:0000041B                 db  71h ; q
.data:0000041C                 db  75h ; u
.data:0000041D                 db  65h ; e
.data:0000041E                 db  6Eh ; n
.data:0000041F                 db  74h ; t
.data:00000420                 db  69h ; i
.data:00000421                 db  61h ; a
.data:00000422                 db  6Ch ; l
.data:00000423                 db  49h ; I
.data:00000424                 db  6Eh ; n
.data:00000425                 db  53h ; S
.data:00000426                 db  74h ; t
.data:00000427                 db  72h ; r
.data:00000428                 db  65h ; e
.data:00000429                 db  61h ; a
.data:0000042A                 db  6Dh ; m
.data:0000042B                 db  40h ; @
.data:0000042C                 db  40h ; @
.data:0000042D                 db    0
.data:0000042E                 align 10h
.data:0000042E _data           ends
.data:0000042E
.rdata$r:00000430 ; ===========================================================================
.rdata$r:00000430
.rdata$r:00000430 ; Segment type: Pure data
.rdata$r:00000430 ; Segment permissions: Read
.rdata$r:00000430 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000430                 assume cs:_rdata$r
.rdata$r:00000430                 ;org 430h
.rdata$r:00000430 ; COMDAT (pick any)
.rdata$r:00000430                 public ??_R3ISequentialInStream@@8
.rdata$r:00000430 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000430 ??_R3ISequentialInStream@@8 db    0     ; DATA XREF: .rdata$r:00000408o
.rdata$r:00000430                                         ; .rdata$r:00000464o ...
.rdata$r:00000431                 db    0
.rdata$r:00000432                 db    0
.rdata$r:00000433                 db    0
.rdata$r:00000434                 db    0
.rdata$r:00000435                 db    0
.rdata$r:00000436                 db    0
.rdata$r:00000437                 db    0
.rdata$r:00000438                 db    2
.rdata$r:00000439                 db    0
.rdata$r:0000043A                 db    0
.rdata$r:0000043B                 db    0
.rdata$r:0000043C                 dd offset ??_R2ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Array'
.rdata$r:0000043C _rdata$r        ends
.rdata$r:0000043C
.rdata$r:00000440 ; ===========================================================================
.rdata$r:00000440
.rdata$r:00000440 ; Segment type: Pure data
.rdata$r:00000440 ; Segment permissions: Read
.rdata$r:00000440 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000440                 assume cs:_rdata$r
.rdata$r:00000440                 ;org 440h
.rdata$r:00000440 ; COMDAT (pick any)
.rdata$r:00000440                 public ??_R2ISequentialInStream@@8
.rdata$r:00000440 ; ISequentialInStream::`RTTI Base Class Array'
.rdata$r:00000440 ??_R2ISequentialInStream@@8 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8
.rdata$r:00000440                                         ; DATA XREF: .rdata$r:0000043Co
.rdata$r:00000440                                         ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000444                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000448                 db    0
.rdata$r:00000449                 align 4
.rdata$r:00000449 _rdata$r        ends
.rdata$r:00000449
.rdata$r:0000044C ; ===========================================================================
.rdata$r:0000044C
.rdata$r:0000044C ; Segment type: Pure data
.rdata$r:0000044C ; Segment permissions: Read
.rdata$r:0000044C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000044C                 assume cs:_rdata$r
.rdata$r:0000044C                 ;org 44Ch
.rdata$r:0000044C ; COMDAT (pick any)
.rdata$r:0000044C                 public ??_R1A@?0A@EA@ISequentialInStream@@8
.rdata$r:0000044C ; ISequentialInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000044C ??_R1A@?0A@EA@ISequentialInStream@@8 dd offset ??_R0?AUISequentialInStream@@@8
.rdata$r:0000044C                                         ; DATA XREF: .rdata$r:ISequentialInStream::`RTTI Base Class Array'o
.rdata$r:0000044C                                         ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:00000450                 db    1
.rdata$r:00000451                 db    0
.rdata$r:00000452                 db    0
.rdata$r:00000453                 db    0
.rdata$r:00000454                 db    0
.rdata$r:00000455                 db    0
.rdata$r:00000456                 db    0
.rdata$r:00000457                 db    0
.rdata$r:00000458                 db 0FFh
.rdata$r:00000459                 db 0FFh
.rdata$r:0000045A                 db 0FFh
.rdata$r:0000045B                 db 0FFh
.rdata$r:0000045C                 db    0
.rdata$r:0000045D                 db    0
.rdata$r:0000045E                 db    0
.rdata$r:0000045F                 db    0
.rdata$r:00000460                 db  40h ; @
.rdata$r:00000461                 db    0
.rdata$r:00000462                 db    0
.rdata$r:00000463                 db    0
.rdata$r:00000464                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000464 _rdata$r        ends
.rdata$r:00000464
.rdata$r:00000468 ; ===========================================================================
.rdata$r:00000468
.rdata$r:00000468 ; Segment type: Pure data
.rdata$r:00000468 ; Segment permissions: Read
.rdata$r:00000468 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000468                 assume cs:_rdata$r
.rdata$r:00000468                 ;org 468h
.rdata$r:00000468 ; COMDAT (pick any)
.rdata$r:00000468                 public ??_R17?0A@EC@IUnknown@@8
.rdata$r:00000468 ; IUnknown::`RTTI Base Class Descriptor at (8, -1, 0, 66)'
.rdata$r:00000468 ??_R17?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00000468                                         ; DATA XREF: .rdata$r:0000026Co
.rdata$r:00000468                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:0000046C                 align 10h
.rdata$r:00000470                 db    8
.rdata$r:00000471                 db    0
.rdata$r:00000472                 db    0
.rdata$r:00000473                 db    0
.rdata$r:00000474                 db 0FFh
.rdata$r:00000475                 db 0FFh
.rdata$r:00000476                 db 0FFh
.rdata$r:00000477                 db 0FFh
.rdata$r:00000478                 db    0
.rdata$r:00000479                 db    0
.rdata$r:0000047A                 db    0
.rdata$r:0000047B                 db    0
.rdata$r:0000047C                 db  42h ; B
.rdata$r:0000047D                 db    0
.rdata$r:0000047E                 db    0
.rdata$r:0000047F                 db    0
.rdata$r:00000480                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000480 _rdata$r        ends
.rdata$r:00000480
.rdata$r:00000484 ; ===========================================================================
.rdata$r:00000484
.rdata$r:00000484 ; Segment type: Pure data
.rdata$r:00000484 ; Segment permissions: Read
.rdata$r:00000484 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000484                 assume cs:_rdata$r
.rdata$r:00000484                 ;org 484h
.rdata$r:00000484 ; COMDAT (pick any)
.rdata$r:00000484                 public ??_R1M@?0A@EA@ICompressGetInStreamProcessedSize@@8
.rdata$r:00000484 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (12, -1, 0, 64)'
.rdata$r:00000484 ??_R1M@?0A@EA@ICompressGetInStreamProcessedSize@@8 dd offset ??_R0?AUICompressGetInStreamProcessedSize@@@8
.rdata$r:00000484                                         ; DATA XREF: .rdata$r:00000270o
.rdata$r:00000484                                         ; ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
.rdata$r:00000488                 db    1
.rdata$r:00000489                 db    0
.rdata$r:0000048A                 db    0
.rdata$r:0000048B                 db    0
.rdata$r:0000048C                 db  0Ch
.rdata$r:0000048D                 db    0
.rdata$r:0000048E                 db    0
.rdata$r:0000048F                 db    0
.rdata$r:00000490                 db 0FFh
.rdata$r:00000491                 db 0FFh
.rdata$r:00000492                 db 0FFh
.rdata$r:00000493                 db 0FFh
.rdata$r:00000494                 db    0
.rdata$r:00000495                 db    0
.rdata$r:00000496                 db    0
.rdata$r:00000497                 db    0
.rdata$r:00000498                 db  40h ; @
.rdata$r:00000499                 db    0
.rdata$r:0000049A                 db    0
.rdata$r:0000049B                 db    0
.rdata$r:0000049C                 dd offset ??_R3ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000049C _rdata$r        ends
.rdata$r:0000049C
.data:000004A0 ; ===========================================================================
.data:000004A0
.data:000004A0 ; Segment type: Pure data
.data:000004A0 ; Segment permissions: Read/Write
.data:000004A0 _data           segment dword public 'DATA' use32
.data:000004A0                 assume cs:_data
.data:000004A0                 ;org 4A0h
.data:000004A0 ; COMDAT (pick any)
.data:000004A0                 public ??_R0?AUICompressGetInStreamProcessedSize@@@8
.data:000004A0 ; struct ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
.data:000004A0 ??_R0?AUICompressGetInStreamProcessedSize@@@8 dd offset ??_7type_info@@6B@
.data:000004A0                                         ; DATA XREF: .rdata$r:ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (12,-1,0,64)'o
.data:000004A0                                         ; .rdata$r:ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:000004A0                                         ; const type_info::`vftable'
.data:000004A4                 align 8
.data:000004A8 a_?auicompressg db '.?AUICompressGetInStreamProcessedSize@@',0
.data:000004A8 _data           ends
.data:000004A8
.rdata$r:000004D0 ; ===========================================================================
.rdata$r:000004D0
.rdata$r:000004D0 ; Segment type: Pure data
.rdata$r:000004D0 ; Segment permissions: Read
.rdata$r:000004D0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000004D0                 assume cs:_rdata$r
.rdata$r:000004D0                 ;org 4D0h
.rdata$r:000004D0 ; COMDAT (pick any)
.rdata$r:000004D0                 public ??_R3ICompressGetInStreamProcessedSize@@8
.rdata$r:000004D0 ; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:000004D0 ??_R3ICompressGetInStreamProcessedSize@@8 db    0
.rdata$r:000004D0                                         ; DATA XREF: .rdata$r:0000049Co
.rdata$r:000004D0                                         ; .rdata$r:00000504o ...
.rdata$r:000004D1                 db    0
.rdata$r:000004D2                 db    0
.rdata$r:000004D3                 db    0
.rdata$r:000004D4                 db    0
.rdata$r:000004D5                 db    0
.rdata$r:000004D6                 db    0
.rdata$r:000004D7                 db    0
.rdata$r:000004D8                 db    2
.rdata$r:000004D9                 db    0
.rdata$r:000004DA                 db    0
.rdata$r:000004DB                 db    0
.rdata$r:000004DC                 dd offset ??_R2ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Array'
.rdata$r:000004DC _rdata$r        ends
.rdata$r:000004DC
.rdata$r:000004E0 ; ===========================================================================
.rdata$r:000004E0
.rdata$r:000004E0 ; Segment type: Pure data
.rdata$r:000004E0 ; Segment permissions: Read
.rdata$r:000004E0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000004E0                 assume cs:_rdata$r
.rdata$r:000004E0                 ;org 4E0h
.rdata$r:000004E0 ; COMDAT (pick any)
.rdata$r:000004E0                 public ??_R2ICompressGetInStreamProcessedSize@@8
.rdata$r:000004E0 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Array'
.rdata$r:000004E0 ??_R2ICompressGetInStreamProcessedSize@@8 dd offset ??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8
.rdata$r:000004E0                                         ; DATA XREF: .rdata$r:000004DCo
.rdata$r:000004E0                                         ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000004E4                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000004E8                 db    0
.rdata$r:000004E9                 align 4
.rdata$r:000004E9 _rdata$r        ends
.rdata$r:000004E9
.rdata$r:000004EC ; ===========================================================================
.rdata$r:000004EC
.rdata$r:000004EC ; Segment type: Pure data
.rdata$r:000004EC ; Segment permissions: Read
.rdata$r:000004EC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000004EC                 assume cs:_rdata$r
.rdata$r:000004EC                 ;org 4ECh
.rdata$r:000004EC ; COMDAT (pick any)
.rdata$r:000004EC                 public ??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8
.rdata$r:000004EC ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000004EC ??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8 dd offset ??_R0?AUICompressGetInStreamProcessedSize@@@8
.rdata$r:000004EC                                         ; DATA XREF: .rdata$r:ICompressGetInStreamProcessedSize::`RTTI Base Class Array'o
.rdata$r:000004EC                                         ; ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
.rdata$r:000004F0                 db    1
.rdata$r:000004F1                 db    0
.rdata$r:000004F2                 db    0
.rdata$r:000004F3                 db    0
.rdata$r:000004F4                 db    0
.rdata$r:000004F5                 db    0
.rdata$r:000004F6                 db    0
.rdata$r:000004F7                 db    0
.rdata$r:000004F8                 db 0FFh
.rdata$r:000004F9                 db 0FFh
.rdata$r:000004FA                 db 0FFh
.rdata$r:000004FB                 db 0FFh
.rdata$r:000004FC                 db    0
.rdata$r:000004FD                 db    0
.rdata$r:000004FE                 db    0
.rdata$r:000004FF                 db    0
.rdata$r:00000500                 db  40h ; @
.rdata$r:00000501                 db    0
.rdata$r:00000502                 db    0
.rdata$r:00000503                 db    0
.rdata$r:00000504                 dd offset ??_R3ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000504 _rdata$r        ends
.rdata$r:00000504
.rdata$r:00000508 ; ===========================================================================
.rdata$r:00000508
.rdata$r:00000508 ; Segment type: Pure data
.rdata$r:00000508 ; Segment permissions: Read
.rdata$r:00000508 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000508                 assume cs:_rdata$r
.rdata$r:00000508                 ;org 508h
.rdata$r:00000508 ; COMDAT (pick any)
.rdata$r:00000508                 public ??_R1M@?0A@EC@IUnknown@@8
.rdata$r:00000508 ; IUnknown::`RTTI Base Class Descriptor at (12, -1, 0, 66)'
.rdata$r:00000508 ??_R1M@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00000508                                         ; DATA XREF: .rdata$r:00000274o
.rdata$r:00000508                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:0000050C                 align 10h
.rdata$r:00000510                 db  0Ch
.rdata$r:00000511                 db    0
.rdata$r:00000512                 db    0
.rdata$r:00000513                 db    0
.rdata$r:00000514                 db 0FFh
.rdata$r:00000515                 db 0FFh
.rdata$r:00000516                 db 0FFh
.rdata$r:00000517                 db 0FFh
.rdata$r:00000518                 db    0
.rdata$r:00000519                 db    0
.rdata$r:0000051A                 db    0
.rdata$r:0000051B                 db    0
.rdata$r:0000051C                 db  42h ; B
.rdata$r:0000051D                 db    0
.rdata$r:0000051E                 db    0
.rdata$r:0000051F                 db    0
.rdata$r:00000520                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000520 _rdata$r        ends
.rdata$r:00000520
.rdata$r:00000524 ; ===========================================================================
.rdata$r:00000524
.rdata$r:00000524 ; Segment type: Pure data
.rdata$r:00000524 ; Segment permissions: Read
.rdata$r:00000524 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000524                 assume cs:_rdata$r
.rdata$r:00000524                 ;org 524h
.rdata$r:00000524 ; COMDAT (pick any)
.rdata$r:00000524                 public ??_R1BA@?0A@EA@CMyUnknownImp@@8
.rdata$r:00000524 ; CMyUnknownImp::`RTTI Base Class Descriptor at (16, -1, 0, 64)'
.rdata$r:00000524 ??_R1BA@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00000524                                         ; DATA XREF: .rdata$r:00000278o
.rdata$r:00000524                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00000528                 db    0
.rdata$r:00000529                 db    0
.rdata$r:0000052A                 db    0
.rdata$r:0000052B                 db    0
.rdata$r:0000052C                 db  10h
.rdata$r:0000052D                 db    0
.rdata$r:0000052E                 db    0
.rdata$r:0000052F                 db    0
.rdata$r:00000530                 db 0FFh
.rdata$r:00000531                 db 0FFh
.rdata$r:00000532                 db 0FFh
.rdata$r:00000533                 db 0FFh
.rdata$r:00000534                 db    0
.rdata$r:00000535                 db    0
.rdata$r:00000536                 db    0
.rdata$r:00000537                 db    0
.rdata$r:00000538                 db  40h ; @
.rdata$r:00000539                 db    0
.rdata$r:0000053A                 db    0
.rdata$r:0000053B                 db    0
.rdata$r:0000053C                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000053C _rdata$r        ends
.rdata$r:0000053C
.data:00000540 ; ===========================================================================
.data:00000540
.data:00000540 ; Segment type: Pure data
.data:00000540 ; Segment permissions: Read/Write
.data:00000540 _data           segment dword public 'DATA' use32
.data:00000540                 assume cs:_data
.data:00000540                 ;org 540h
.data:00000540 ; COMDAT (pick any)
.data:00000540                 public ??_R0?AVCMyUnknownImp@@@8
.data:00000540 ; class CMyUnknownImp `RTTI Type Descriptor'
.data:00000540 ??_R0?AVCMyUnknownImp@@@8 dd offset ??_7type_info@@6B@
.data:00000540                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (16,-1,0,64)'o
.data:00000540                                         ; .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000540                                         ; const type_info::`vftable'
.data:00000544                 align 8
.data:00000548 a_?avcmyunknown db '.?AVCMyUnknownImp@@',0
.data:00000548 _data           ends
.data:00000548
.rdata$r:0000055C ; ===========================================================================
.rdata$r:0000055C
.rdata$r:0000055C ; Segment type: Pure data
.rdata$r:0000055C ; Segment permissions: Read
.rdata$r:0000055C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000055C                 assume cs:_rdata$r
.rdata$r:0000055C                 ;org 55Ch
.rdata$r:0000055C ; COMDAT (pick any)
.rdata$r:0000055C                 public ??_R3CMyUnknownImp@@8
.rdata$r:0000055C ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000055C ??_R3CMyUnknownImp@@8 db    0           ; DATA XREF: .rdata$r:0000053Co
.rdata$r:0000055C                                         ; .rdata$r:0000058Co
.rdata$r:0000055D                 db    0
.rdata$r:0000055E                 db    0
.rdata$r:0000055F                 db    0
.rdata$r:00000560                 db    0
.rdata$r:00000561                 db    0
.rdata$r:00000562                 db    0
.rdata$r:00000563                 db    0
.rdata$r:00000564                 db    1
.rdata$r:00000565                 db    0
.rdata$r:00000566                 db    0
.rdata$r:00000567                 db    0
.rdata$r:00000568                 dd offset ??_R2CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00000568 _rdata$r        ends
.rdata$r:00000568
.rdata$r:0000056C ; ===========================================================================
.rdata$r:0000056C
.rdata$r:0000056C ; Segment type: Pure data
.rdata$r:0000056C ; Segment permissions: Read
.rdata$r:0000056C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000056C                 assume cs:_rdata$r
.rdata$r:0000056C                 ;org 56Ch
.rdata$r:0000056C ; COMDAT (pick any)
.rdata$r:0000056C                 public ??_R2CMyUnknownImp@@8
.rdata$r:0000056C ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:0000056C ??_R2CMyUnknownImp@@8 dd offset ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:0000056C                                         ; DATA XREF: .rdata$r:00000568o
.rdata$r:0000056C                                         ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000570                 db    0
.rdata$r:00000571                 align 4
.rdata$r:00000571 _rdata$r        ends
.rdata$r:00000571
.rdata$r:00000574 ; ===========================================================================
.rdata$r:00000574
.rdata$r:00000574 ; Segment type: Pure data
.rdata$r:00000574 ; Segment permissions: Read
.rdata$r:00000574 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000574                 assume cs:_rdata$r
.rdata$r:00000574                 ;org 574h
.rdata$r:00000574 ; COMDAT (pick any)
.rdata$r:00000574                 public ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00000574 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000574 ??_R1A@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00000574                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Array'o
.rdata$r:00000574                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00000578                 align 10h
.rdata$r:00000580                 db 0FFh
.rdata$r:00000581                 db 0FFh
.rdata$r:00000582                 db 0FFh
.rdata$r:00000583                 db 0FFh
.rdata$r:00000584                 db    0
.rdata$r:00000585                 db    0
.rdata$r:00000586                 db    0
.rdata$r:00000587                 db    0
.rdata$r:00000588                 db  40h ; @
.rdata$r:00000589                 db    0
.rdata$r:0000058A                 db    0
.rdata$r:0000058B                 db    0
.rdata$r:0000058C                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000058C _rdata$r        ends
.rdata$r:0000058C
.rdata$r:00000590 ; ===========================================================================
.rdata$r:00000590
.rdata$r:00000590 ; Segment type: Pure data
.rdata$r:00000590 ; Segment permissions: Read
.rdata$r:00000590 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000590                 assume cs:_rdata$r
.rdata$r:00000590                 ;org 590h
.rdata$r:00000590 ; COMDAT (pick any)
.rdata$r:00000590                 public ??_R4CCopyCoder@NCompress@@6BICompressSetInStream@@@
.rdata$r:00000590 ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ICompressSetInStream'}
.rdata$r:00000590 ??_R4CCopyCoder@NCompress@@6BICompressSetInStream@@@ db    0
.rdata$r:00000590                                         ; DATA XREF: .rdata:000001E0o
.rdata$r:00000591                 db    0
.rdata$r:00000592                 db    0
.rdata$r:00000593                 db    0
.rdata$r:00000594                 db    4
.rdata$r:00000595                 db    0
.rdata$r:00000596                 db    0
.rdata$r:00000597                 db    0
.rdata$r:00000598                 db    0
.rdata$r:00000599                 db    0
.rdata$r:0000059A                 db    0
.rdata$r:0000059B                 db    0
.rdata$r:0000059C                 dd offset ??_R0?AVCCopyCoder@NCompress@@@8 ; NCompress::CCopyCoder `RTTI Type Descriptor'
.rdata$r:000005A0                 dd offset ??_R3CCopyCoder@NCompress@@8 ; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000005A0 _rdata$r        ends
.rdata$r:000005A0
.rdata$r:000005A4 ; ===========================================================================
.rdata$r:000005A4
.rdata$r:000005A4 ; Segment type: Pure data
.rdata$r:000005A4 ; Segment permissions: Read
.rdata$r:000005A4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000005A4                 assume cs:_rdata$r
.rdata$r:000005A4                 ;org 5A4h
.rdata$r:000005A4 ; COMDAT (pick any)
.rdata$r:000005A4                 public ??_R4CCopyCoder@NCompress@@6BISequentialInStream@@@
.rdata$r:000005A4 ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ISequentialInStream'}
.rdata$r:000005A4 ??_R4CCopyCoder@NCompress@@6BISequentialInStream@@@ db    0
.rdata$r:000005A4                                         ; DATA XREF: .rdata:000001CCo
.rdata$r:000005A5                 db    0
.rdata$r:000005A6                 db    0
.rdata$r:000005A7                 db    0
.rdata$r:000005A8                 db    8
.rdata$r:000005A9                 db    0
.rdata$r:000005AA                 db    0
.rdata$r:000005AB                 db    0
.rdata$r:000005AC                 db    0
.rdata$r:000005AD                 db    0
.rdata$r:000005AE                 db    0
.rdata$r:000005AF                 db    0
.rdata$r:000005B0                 dd offset ??_R0?AVCCopyCoder@NCompress@@@8 ; NCompress::CCopyCoder `RTTI Type Descriptor'
.rdata$r:000005B4                 dd offset ??_R3CCopyCoder@NCompress@@8 ; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000005B4 _rdata$r        ends
.rdata$r:000005B4
.rdata$r:000005B8 ; ===========================================================================
.rdata$r:000005B8
.rdata$r:000005B8 ; Segment type: Pure data
.rdata$r:000005B8 ; Segment permissions: Read
.rdata$r:000005B8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000005B8                 assume cs:_rdata$r
.rdata$r:000005B8                 ;org 5B8h
.rdata$r:000005B8 ; COMDAT (pick any)
.rdata$r:000005B8                 public ??_R4CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@
.rdata$r:000005B8 ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ICompressGetInStreamProcessedSize'}
.rdata$r:000005B8 ??_R4CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ db    0
.rdata$r:000005B8                                         ; DATA XREF: .rdata:000001B8o
.rdata$r:000005B9                 db    0
.rdata$r:000005BA                 db    0
.rdata$r:000005BB                 db    0
.rdata$r:000005BC                 db  0Ch
.rdata$r:000005BD                 db    0
.rdata$r:000005BE                 db    0
.rdata$r:000005BF                 db    0
.rdata$r:000005C0                 db    0
.rdata$r:000005C1                 db    0
.rdata$r:000005C2                 db    0
.rdata$r:000005C3                 db    0
.rdata$r:000005C4                 dd offset ??_R0?AVCCopyCoder@NCompress@@@8 ; NCompress::CCopyCoder `RTTI Type Descriptor'
.rdata$r:000005C8                 dd offset ??_R3CCopyCoder@NCompress@@8 ; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000005C8 _rdata$r        ends
.rdata$r:000005C8
.text:000005CC ; ===========================================================================
.text:000005CC
.text:000005CC ; Segment type: Pure code
.text:000005CC ; Segment permissions: Read/Execute
.text:000005CC _text           segment para public 'CODE' use32
.text:000005CC                 assume cs:_text
.text:000005CC                 ;org 5CCh
.text:000005CC ; COMDAT (pick any)
.text:000005CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000005CC
.text:000005CC ; =============== S U B R O U T I N E =======================================
.text:000005CC
.text:000005CC ; Attributes: bp-based frame
.text:000005CC
.text:000005CC ; _DWORD __thiscall CMyUnknownImp::CMyUnknownImp(CMyUnknownImp *__hidden this)
.text:000005CC                 public ??0CMyUnknownImp@@QAE@XZ
.text:000005CC ??0CMyUnknownImp@@QAE@XZ proc near      ; CODE XREF: NCompress::CCopyCoder::CCopyCoder(void)+3Dp
.text:000005CC
.text:000005CC var_4           = dword ptr -4
.text:000005CC
.text:000005CC                 push    ebp
.text:000005CD                 mov     ebp, esp
.text:000005CF                 push    ecx
.text:000005D0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000005D7                 mov     [ebp+var_4], ecx
.text:000005DA                 mov     eax, [ebp+var_4]
.text:000005DD                 mov     dword ptr [eax], 0
.text:000005E3                 mov     eax, [ebp+var_4]
.text:000005E6                 mov     esp, ebp
.text:000005E8                 pop     ebp
.text:000005E9                 retn
.text:000005E9 ??0CMyUnknownImp@@QAE@XZ endp
.text:000005E9
.text:000005E9 ; ---------------------------------------------------------------------------
.text:000005EA                 align 4
.text:000005EA _text           ends
.text:000005EA
.text:000005EC ; ===========================================================================
.text:000005EC
.text:000005EC ; Segment type: Pure code
.text:000005EC ; Segment permissions: Read/Execute
.text:000005EC _text           segment para public 'CODE' use32
.text:000005EC                 assume cs:_text
.text:000005EC                 ;org 5ECh
.text:000005EC ; COMDAT (pick any)
.text:000005EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000005EC
.text:000005EC ; =============== S U B R O U T I N E =======================================
.text:000005EC
.text:000005EC ; Attributes: bp-based frame
.text:000005EC
.text:000005EC ; __int32 __stdcall NCompress::CCopyCoder::QueryInterface(NCompress::CCopyCoder *this, const struct _GUID *Buf1, void **)
.text:000005EC                 public ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z
.text:000005EC ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z proc near
.text:000005EC                                         ; CODE XREF: [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j
.text:000005EC                                         ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)+5j ...
.text:000005EC
.text:000005EC var_C           = dword ptr -0Ch
.text:000005EC var_8           = dword ptr -8
.text:000005EC var_4           = dword ptr -4
.text:000005EC this            = dword ptr  8
.text:000005EC Buf1            = dword ptr  0Ch
.text:000005EC arg_8           = dword ptr  10h
.text:000005EC
.text:000005EC                 push    ebp
.text:000005ED                 mov     ebp, esp
.text:000005EF                 sub     esp, 0Ch
.text:000005F2                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000005F9                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000600                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000607                 mov     eax, [ebp+arg_8]
.text:0000060A                 mov     dword ptr [eax], 0
.text:00000610                 push    offset _IID_IUnknown ; Buf2
.text:00000615                 mov     ecx, [ebp+Buf1]
.text:00000618                 push    ecx             ; Buf1
.text:00000619                 call    ___@8           ; __(x,x)
.text:0000061E                 test    eax, eax
.text:00000620                 jz      short loc_62F
.text:00000622                 mov     edx, [ebp+arg_8]
.text:00000625                 mov     eax, [ebp+this]
.text:00000628                 mov     [edx], eax
.text:0000062A                 jmp     loc_6F1
.text:0000062F ; ---------------------------------------------------------------------------
.text:0000062F
.text:0000062F loc_62F:                                ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+34j
.text:0000062F                 push    offset _IID_ICompressCoder ; Buf2
.text:00000634                 mov     ecx, [ebp+Buf1]
.text:00000637                 push    ecx             ; Buf1
.text:00000638                 call    ___@8           ; __(x,x)
.text:0000063D                 test    eax, eax
.text:0000063F                 jz      short loc_64E
.text:00000641                 mov     edx, [ebp+arg_8]
.text:00000644                 mov     eax, [ebp+this]
.text:00000647                 mov     [edx], eax
.text:00000649                 jmp     loc_6F1
.text:0000064E ; ---------------------------------------------------------------------------
.text:0000064E
.text:0000064E loc_64E:                                ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+53j
.text:0000064E                 push    offset _IID_ICompressSetInStream ; Buf2
.text:00000653                 mov     ecx, [ebp+Buf1]
.text:00000656                 push    ecx             ; Buf1
.text:00000657                 call    ___@8           ; __(x,x)
.text:0000065C                 test    eax, eax
.text:0000065E                 jz      short loc_682
.text:00000660                 cmp     [ebp+this], 0
.text:00000664                 jz      short loc_671
.text:00000666                 mov     edx, [ebp+this]
.text:00000669                 add     edx, 4
.text:0000066C                 mov     [ebp+var_4], edx
.text:0000066F                 jmp     short loc_678
.text:00000671 ; ---------------------------------------------------------------------------
.text:00000671
.text:00000671 loc_671:                                ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+78j
.text:00000671                 mov     [ebp+var_4], 0
.text:00000678
.text:00000678 loc_678:                                ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+83j
.text:00000678                 mov     eax, [ebp+arg_8]
.text:0000067B                 mov     ecx, [ebp+var_4]
.text:0000067E                 mov     [eax], ecx
.text:00000680                 jmp     short loc_6F1
.text:00000682 ; ---------------------------------------------------------------------------
.text:00000682
.text:00000682 loc_682:                                ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+72j
.text:00000682                 push    offset _IID_ISequentialInStream ; Buf2
.text:00000687                 mov     edx, [ebp+Buf1]
.text:0000068A                 push    edx             ; Buf1
.text:0000068B                 call    ___@8           ; __(x,x)
.text:00000690                 test    eax, eax
.text:00000692                 jz      short loc_6B6
.text:00000694                 cmp     [ebp+this], 0
.text:00000698                 jz      short loc_6A5
.text:0000069A                 mov     eax, [ebp+this]
.text:0000069D                 add     eax, 8
.text:000006A0                 mov     [ebp+var_8], eax
.text:000006A3                 jmp     short loc_6AC
.text:000006A5 ; ---------------------------------------------------------------------------
.text:000006A5
.text:000006A5 loc_6A5:                                ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+ACj
.text:000006A5                 mov     [ebp+var_8], 0
.text:000006AC
.text:000006AC loc_6AC:                                ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+B7j
.text:000006AC                 mov     ecx, [ebp+arg_8]
.text:000006AF                 mov     edx, [ebp+var_8]
.text:000006B2                 mov     [ecx], edx
.text:000006B4                 jmp     short loc_6F1
.text:000006B6 ; ---------------------------------------------------------------------------
.text:000006B6
.text:000006B6 loc_6B6:                                ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+A6j
.text:000006B6                 push    offset _IID_ICompressGetInStreamProcessedSize ; Buf2
.text:000006BB                 mov     eax, [ebp+Buf1]
.text:000006BE                 push    eax             ; Buf1
.text:000006BF                 call    ___@8           ; __(x,x)
.text:000006C4                 test    eax, eax
.text:000006C6                 jz      short loc_6EA
.text:000006C8                 cmp     [ebp+this], 0
.text:000006CC                 jz      short loc_6D9
.text:000006CE                 mov     ecx, [ebp+this]
.text:000006D1                 add     ecx, 0Ch
.text:000006D4                 mov     [ebp+var_C], ecx
.text:000006D7                 jmp     short loc_6E0
.text:000006D9 ; ---------------------------------------------------------------------------
.text:000006D9
.text:000006D9 loc_6D9:                                ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+E0j
.text:000006D9                 mov     [ebp+var_C], 0
.text:000006E0
.text:000006E0 loc_6E0:                                ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+EBj
.text:000006E0                 mov     edx, [ebp+arg_8]
.text:000006E3                 mov     eax, [ebp+var_C]
.text:000006E6                 mov     [edx], eax
.text:000006E8                 jmp     short loc_6F1
.text:000006EA ; ---------------------------------------------------------------------------
.text:000006EA
.text:000006EA loc_6EA:                                ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+DAj
.text:000006EA                 mov     eax, 80004002h
.text:000006EF                 jmp     short loc_702
.text:000006F1 ; ---------------------------------------------------------------------------
.text:000006F1
.text:000006F1 loc_6F1:                                ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+3Ej
.text:000006F1                                         ; NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+5Dj ...
.text:000006F1                 mov     ecx, [ebp+this]
.text:000006F4                 mov     edx, [ecx+10h]
.text:000006F7                 add     edx, 1
.text:000006FA                 mov     eax, [ebp+this]
.text:000006FD                 mov     [eax+10h], edx
.text:00000700                 xor     eax, eax
.text:00000702
.text:00000702 loc_702:                                ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+103j
.text:00000702                 add     esp, 0Ch
.text:00000705                 cmp     ebp, esp
.text:00000707                 call    __RTC_CheckEsp
.text:0000070C                 mov     esp, ebp
.text:0000070E                 pop     ebp
.text:0000070F                 retn    0Ch
.text:0000070F ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z endp
.text:0000070F
.text:0000070F ; ---------------------------------------------------------------------------
.text:00000712                 align 4
.text:00000712 _text           ends
.text:00000712
.text:00000714 ; ===========================================================================
.text:00000714
.text:00000714 ; Segment type: Pure code
.text:00000714 ; Segment permissions: Read/Execute
.text:00000714 _text           segment para public 'CODE' use32
.text:00000714                 assume cs:_text
.text:00000714                 ;org 714h
.text:00000714 ; COMDAT (pick any)
.text:00000714                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000714
.text:00000714 ; =============== S U B R O U T I N E =======================================
.text:00000714
.text:00000714 ; Attributes: bp-based frame
.text:00000714
.text:00000714 ; unsigned __int32 __stdcall NCompress::CCopyCoder::AddRef(NCompress::CCopyCoder *this)
.text:00000714                 public ?AddRef@CCopyCoder@NCompress@@UAGKXZ
.text:00000714 ?AddRef@CCopyCoder@NCompress@@UAGKXZ proc near
.text:00000714                                         ; CODE XREF: [thunk]:NCompress::CCopyCoder::AddRef`adjustor{4}' (void)+5j
.text:00000714                                         ; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{8}' (void)+5j ...
.text:00000714
.text:00000714 var_4           = dword ptr -4
.text:00000714 this            = dword ptr  8
.text:00000714
.text:00000714                 push    ebp
.text:00000715                 mov     ebp, esp
.text:00000717                 push    ecx
.text:00000718                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000071F                 mov     eax, [ebp+this]
.text:00000722                 mov     ecx, [eax+10h]
.text:00000725                 add     ecx, 1
.text:00000728                 mov     [ebp+var_4], ecx
.text:0000072B                 mov     edx, [ebp+this]
.text:0000072E                 mov     eax, [ebp+var_4]
.text:00000731                 mov     [edx+10h], eax
.text:00000734                 mov     eax, [ebp+var_4]
.text:00000737                 mov     esp, ebp
.text:00000739                 pop     ebp
.text:0000073A                 retn    4
.text:0000073A ?AddRef@CCopyCoder@NCompress@@UAGKXZ endp
.text:0000073A
.text:0000073A ; ---------------------------------------------------------------------------
.text:0000073D                 align 10h
.text:0000073D _text           ends
.text:0000073D
.text:00000740 ; ===========================================================================
.text:00000740
.text:00000740 ; Segment type: Pure code
.text:00000740 ; Segment permissions: Read/Execute
.text:00000740 _text           segment para public 'CODE' use32
.text:00000740                 assume cs:_text
.text:00000740                 ;org 740h
.text:00000740 ; COMDAT (pick any)
.text:00000740                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000740
.text:00000740 ; =============== S U B R O U T I N E =======================================
.text:00000740
.text:00000740 ; Attributes: bp-based frame
.text:00000740
.text:00000740 ; unsigned __int32 __stdcall NCompress::CCopyCoder::Release(NCompress::CCopyCoder *this)
.text:00000740                 public ?Release@CCopyCoder@NCompress@@UAGKXZ
.text:00000740 ?Release@CCopyCoder@NCompress@@UAGKXZ proc near
.text:00000740                                         ; CODE XREF: [thunk]:NCompress::CCopyCoder::Release`adjustor{4}' (void)+5j
.text:00000740                                         ; [thunk]:NCompress::CCopyCoder::Release`adjustor{8}' (void)+5j ...
.text:00000740
.text:00000740 var_10          = dword ptr -10h
.text:00000740 var_C           = dword ptr -0Ch
.text:00000740 var_8           = dword ptr -8
.text:00000740 var_4           = dword ptr -4
.text:00000740 this            = dword ptr  8
.text:00000740
.text:00000740                 push    ebp
.text:00000741                 mov     ebp, esp
.text:00000743                 sub     esp, 10h
.text:00000746                 mov     eax, 0CCCCCCCCh
.text:0000074B                 mov     [ebp+var_10], eax
.text:0000074E                 mov     [ebp+var_C], eax
.text:00000751                 mov     [ebp+var_8], eax
.text:00000754                 mov     [ebp+var_4], eax
.text:00000757                 mov     eax, [ebp+this]
.text:0000075A                 mov     ecx, [eax+10h]
.text:0000075D                 sub     ecx, 1
.text:00000760                 mov     [ebp+var_C], ecx
.text:00000763                 mov     edx, [ebp+this]
.text:00000766                 mov     eax, [ebp+var_C]
.text:00000769                 mov     [edx+10h], eax
.text:0000076C                 cmp     [ebp+var_C], 0
.text:00000770                 jz      short loc_77A
.text:00000772                 mov     ecx, [ebp+this]
.text:00000775                 mov     eax, [ecx+10h]
.text:00000778                 jmp     short loc_7A4
.text:0000077A ; ---------------------------------------------------------------------------
.text:0000077A
.text:0000077A loc_77A:                                ; CODE XREF: NCompress::CCopyCoder::Release(void)+30j
.text:0000077A                 mov     edx, [ebp+this]
.text:0000077D                 mov     [ebp+var_8], edx
.text:00000780                 mov     eax, [ebp+var_8]
.text:00000783                 mov     [ebp+var_4], eax
.text:00000786                 cmp     [ebp+var_4], 0
.text:0000078A                 jz      short loc_79B
.text:0000078C                 push    1
.text:0000078E                 mov     ecx, [ebp+var_4]
.text:00000791                 call    ??_GCCopyCoder@NCompress@@QAEPAXI@Z ; NCompress::CCopyCoder::`scalar deleting destructor'(uint)
.text:00000796                 mov     [ebp+var_10], eax
.text:00000799                 jmp     short loc_7A2
.text:0000079B ; ---------------------------------------------------------------------------
.text:0000079B
.text:0000079B loc_79B:                                ; CODE XREF: NCompress::CCopyCoder::Release(void)+4Aj
.text:0000079B                 mov     [ebp+var_10], 0
.text:000007A2
.text:000007A2 loc_7A2:                                ; CODE XREF: NCompress::CCopyCoder::Release(void)+59j
.text:000007A2                 xor     eax, eax
.text:000007A4
.text:000007A4 loc_7A4:                                ; CODE XREF: NCompress::CCopyCoder::Release(void)+38j
.text:000007A4                 add     esp, 10h
.text:000007A7                 cmp     ebp, esp
.text:000007A9                 call    __RTC_CheckEsp
.text:000007AE                 mov     esp, ebp
.text:000007B0                 pop     ebp
.text:000007B1                 retn    4
.text:000007B1 ?Release@CCopyCoder@NCompress@@UAGKXZ endp
.text:000007B1
.text:000007B1 _text           ends
.text:000007B1
.text:000007B4 ; ===========================================================================
.text:000007B4
.text:000007B4 ; Segment type: Pure code
.text:000007B4 ; Segment permissions: Read/Execute
.text:000007B4 _text           segment para public 'CODE' use32
.text:000007B4                 assume cs:_text
.text:000007B4                 ;org 7B4h
.text:000007B4 ; COMDAT (pick any)
.text:000007B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000007B4
.text:000007B4 ; =============== S U B R O U T I N E =======================================
.text:000007B4
.text:000007B4 ; Attributes: bp-based frame
.text:000007B4
.text:000007B4 ; _DWORD __thiscall ICompressCoder::ICompressCoder(ICompressCoder *__hidden this)
.text:000007B4                 public ??0ICompressCoder@@QAE@XZ
.text:000007B4 ??0ICompressCoder@@QAE@XZ proc near     ; CODE XREF: NCompress::CCopyCoder::CCopyCoder(void)+11p
.text:000007B4
.text:000007B4 var_4           = dword ptr -4
.text:000007B4
.text:000007B4                 push    ebp
.text:000007B5                 mov     ebp, esp
.text:000007B7                 push    ecx
.text:000007B8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000007BF                 mov     [ebp+var_4], ecx
.text:000007C2                 mov     ecx, [ebp+var_4]
.text:000007C5                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:000007CA                 mov     eax, [ebp+var_4]
.text:000007CD                 mov     dword ptr [eax], offset ??_7ICompressCoder@@6B@ ; const ICompressCoder::`vftable'
.text:000007D3                 mov     eax, [ebp+var_4]
.text:000007D6                 add     esp, 4
.text:000007D9                 cmp     ebp, esp
.text:000007DB                 call    __RTC_CheckEsp
.text:000007E0                 mov     esp, ebp
.text:000007E2                 pop     ebp
.text:000007E3                 retn
.text:000007E3 ??0ICompressCoder@@QAE@XZ endp
.text:000007E3
.text:000007E3 _text           ends
.text:000007E3
.rdata:000007E4 ; ===========================================================================
.rdata:000007E4
.rdata:000007E4 ; Segment type: Pure data
.rdata:000007E4 ; Segment permissions: Read
.rdata:000007E4 _rdata          segment dword public 'DATA' use32
.rdata:000007E4                 assume cs:_rdata
.rdata:000007E4                 ;org 7E4h
.rdata:000007E4 ; COMDAT (pick largest)
.rdata:000007E4                 dd offset ??_R4ICompressCoder@@6B@ ; const ICompressCoder::`RTTI Complete Object Locator'
.rdata:000007E8                 public ??_7ICompressCoder@@6B@
.rdata:000007E8 ; const ICompressCoder::`vftable'
.rdata:000007E8 ??_7ICompressCoder@@6B@ dd offset __purecall
.rdata:000007E8                                         ; DATA XREF: ICompressCoder::ICompressCoder(void)+19o
.rdata:000007EC                 dd offset __purecall
.rdata:000007F0                 dd offset __purecall
.rdata:000007F4                 dd offset __purecall
.rdata:000007F4 _rdata          ends
.rdata:000007F4
.rdata$r:000007F8 ; ===========================================================================
.rdata$r:000007F8
.rdata$r:000007F8 ; Segment type: Pure data
.rdata$r:000007F8 ; Segment permissions: Read
.rdata$r:000007F8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000007F8                 assume cs:_rdata$r
.rdata$r:000007F8                 ;org 7F8h
.rdata$r:000007F8 ; COMDAT (pick any)
.rdata$r:000007F8                 public ??_R4ICompressCoder@@6B@
.rdata$r:000007F8 ; const ICompressCoder::`RTTI Complete Object Locator'
.rdata$r:000007F8 ??_R4ICompressCoder@@6B@ db    0        ; DATA XREF: .rdata:000007E4o
.rdata$r:000007F9                 db    0
.rdata$r:000007FA                 db    0
.rdata$r:000007FB                 db    0
.rdata$r:000007FC                 db    0
.rdata$r:000007FD                 db    0
.rdata$r:000007FE                 db    0
.rdata$r:000007FF                 db    0
.rdata$r:00000800                 db    0
.rdata$r:00000801                 db    0
.rdata$r:00000802                 db    0
.rdata$r:00000803                 db    0
.rdata$r:00000804                 dd offset ??_R0?AUICompressCoder@@@8 ; ICompressCoder `RTTI Type Descriptor'
.rdata$r:00000808                 dd offset ??_R3ICompressCoder@@8 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000808 _rdata$r        ends
.rdata$r:00000808
.text:0000080C ; ===========================================================================
.text:0000080C
.text:0000080C ; Segment type: Pure code
.text:0000080C ; Segment permissions: Read/Execute
.text:0000080C _text           segment para public 'CODE' use32
.text:0000080C                 assume cs:_text
.text:0000080C                 ;org 80Ch
.text:0000080C ; COMDAT (pick any)
.text:0000080C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000080C
.text:0000080C ; =============== S U B R O U T I N E =======================================
.text:0000080C
.text:0000080C ; Attributes: bp-based frame
.text:0000080C
.text:0000080C ; _DWORD __thiscall ICompressSetInStream::ICompressSetInStream(ICompressSetInStream *__hidden this)
.text:0000080C                 public ??0ICompressSetInStream@@QAE@XZ
.text:0000080C ??0ICompressSetInStream@@QAE@XZ proc near
.text:0000080C                                         ; CODE XREF: NCompress::CCopyCoder::CCopyCoder(void)+1Cp
.text:0000080C
.text:0000080C var_4           = dword ptr -4
.text:0000080C
.text:0000080C                 push    ebp
.text:0000080D                 mov     ebp, esp
.text:0000080F                 push    ecx
.text:00000810                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000817                 mov     [ebp+var_4], ecx
.text:0000081A                 mov     ecx, [ebp+var_4]
.text:0000081D                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00000822                 mov     eax, [ebp+var_4]
.text:00000825                 mov     dword ptr [eax], offset ??_7ICompressSetInStream@@6B@ ; const ICompressSetInStream::`vftable'
.text:0000082B                 mov     eax, [ebp+var_4]
.text:0000082E                 add     esp, 4
.text:00000831                 cmp     ebp, esp
.text:00000833                 call    __RTC_CheckEsp
.text:00000838                 mov     esp, ebp
.text:0000083A                 pop     ebp
.text:0000083B                 retn
.text:0000083B ??0ICompressSetInStream@@QAE@XZ endp
.text:0000083B
.text:0000083B _text           ends
.text:0000083B
.rdata:0000083C ; ===========================================================================
.rdata:0000083C
.rdata:0000083C ; Segment type: Pure data
.rdata:0000083C ; Segment permissions: Read
.rdata:0000083C _rdata          segment dword public 'DATA' use32
.rdata:0000083C                 assume cs:_rdata
.rdata:0000083C                 ;org 83Ch
.rdata:0000083C ; COMDAT (pick largest)
.rdata:0000083C                 dd offset ??_R4ICompressSetInStream@@6B@ ; const ICompressSetInStream::`RTTI Complete Object Locator'
.rdata:00000840                 public ??_7ICompressSetInStream@@6B@
.rdata:00000840 ; const ICompressSetInStream::`vftable'
.rdata:00000840 ??_7ICompressSetInStream@@6B@ dd offset __purecall
.rdata:00000840                                         ; DATA XREF: ICompressSetInStream::ICompressSetInStream(void)+19o
.rdata:00000844                 dd offset __purecall
.rdata:00000848                 dd offset __purecall
.rdata:0000084C                 dd offset __purecall
.rdata:00000850                 dd offset __purecall
.rdata:00000850 _rdata          ends
.rdata:00000850
.rdata$r:00000854 ; ===========================================================================
.rdata$r:00000854
.rdata$r:00000854 ; Segment type: Pure data
.rdata$r:00000854 ; Segment permissions: Read
.rdata$r:00000854 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000854                 assume cs:_rdata$r
.rdata$r:00000854                 ;org 854h
.rdata$r:00000854 ; COMDAT (pick any)
.rdata$r:00000854                 public ??_R4ICompressSetInStream@@6B@
.rdata$r:00000854 ; const ICompressSetInStream::`RTTI Complete Object Locator'
.rdata$r:00000854 ??_R4ICompressSetInStream@@6B@ db    0  ; DATA XREF: .rdata:0000083Co
.rdata$r:00000855                 db    0
.rdata$r:00000856                 db    0
.rdata$r:00000857                 db    0
.rdata$r:00000858                 db    0
.rdata$r:00000859                 db    0
.rdata$r:0000085A                 db    0
.rdata$r:0000085B                 db    0
.rdata$r:0000085C                 db    0
.rdata$r:0000085D                 db    0
.rdata$r:0000085E                 db    0
.rdata$r:0000085F                 db    0
.rdata$r:00000860                 dd offset ??_R0?AUICompressSetInStream@@@8 ; ICompressSetInStream `RTTI Type Descriptor'
.rdata$r:00000864                 dd offset ??_R3ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000864 _rdata$r        ends
.rdata$r:00000864
.text:00000868 ; ===========================================================================
.text:00000868
.text:00000868 ; Segment type: Pure code
.text:00000868 ; Segment permissions: Read/Execute
.text:00000868 _text           segment para public 'CODE' use32
.text:00000868                 assume cs:_text
.text:00000868                 ;org 868h
.text:00000868 ; COMDAT (pick any)
.text:00000868                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000868
.text:00000868 ; =============== S U B R O U T I N E =======================================
.text:00000868
.text:00000868 ; Attributes: bp-based frame
.text:00000868
.text:00000868 ; int __stdcall __(void *Buf1, void *Buf2)
.text:00000868                 public ___@8
.text:00000868 ___@8           proc near               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+2Dp
.text:00000868                                         ; NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+4Cp ...
.text:00000868
.text:00000868 Buf1            = dword ptr  8
.text:00000868 Buf2            = dword ptr  0Ch
.text:00000868
.text:00000868                 push    ebp
.text:00000869                 mov     ebp, esp
.text:0000086B                 mov     eax, [ebp+Buf2]
.text:0000086E                 push    eax             ; Buf2
.text:0000086F                 mov     ecx, [ebp+Buf1]
.text:00000872                 push    ecx             ; Buf1
.text:00000873                 call    _IsEqualGUID@8  ; IsEqualGUID(x,x)
.text:00000878                 cmp     ebp, esp
.text:0000087A                 call    __RTC_CheckEsp
.text:0000087F                 pop     ebp
.text:00000880                 retn    8
.text:00000880 ___@8           endp
.text:00000880
.text:00000880 ; ---------------------------------------------------------------------------
.text:00000883                 align 4
.text:00000883 _text           ends
.text:00000883
.text:00000884 ; ===========================================================================
.text:00000884
.text:00000884 ; Segment type: Pure code
.text:00000884 ; Segment permissions: Read/Execute
.text:00000884 _text           segment para public 'CODE' use32
.text:00000884                 assume cs:_text
.text:00000884                 ;org 884h
.text:00000884 ; COMDAT (pick any)
.text:00000884                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000884
.text:00000884 ; =============== S U B R O U T I N E =======================================
.text:00000884
.text:00000884 ; Attributes: bp-based frame
.text:00000884
.text:00000884 ; int __stdcall IsEqualGUID(void *Buf1, void *Buf2)
.text:00000884                 public _IsEqualGUID@8
.text:00000884 _IsEqualGUID@8  proc near               ; CODE XREF: __(x,x)+Bp
.text:00000884
.text:00000884 Buf1            = dword ptr  8
.text:00000884 Buf2            = dword ptr  0Ch
.text:00000884
.text:00000884                 push    ebp
.text:00000885                 mov     ebp, esp
.text:00000887                 push    10h             ; Size
.text:00000889                 mov     eax, [ebp+Buf2]
.text:0000088C                 push    eax             ; Buf2
.text:0000088D                 mov     ecx, [ebp+Buf1]
.text:00000890                 push    ecx             ; Buf1
.text:00000891                 call    _memcmp
.text:00000896                 add     esp, 0Ch
.text:00000899                 neg     eax
.text:0000089B                 sbb     eax, eax
.text:0000089D                 add     eax, 1
.text:000008A0                 cmp     ebp, esp
.text:000008A2                 call    __RTC_CheckEsp
.text:000008A7                 pop     ebp
.text:000008A8                 retn    8
.text:000008A8 _IsEqualGUID@8  endp
.text:000008A8
.text:000008A8 ; ---------------------------------------------------------------------------
.text:000008AB                 align 4
.text:000008AB _text           ends
.text:000008AB
.text:000008AC ; ===========================================================================
.text:000008AC
.text:000008AC ; Segment type: Pure code
.text:000008AC ; Segment permissions: Read/Execute
.text:000008AC _text           segment para public 'CODE' use32
.text:000008AC                 assume cs:_text
.text:000008AC                 ;org 8ACh
.text:000008AC ; COMDAT (pick any)
.text:000008AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000008AC
.text:000008AC ; =============== S U B R O U T I N E =======================================
.text:000008AC
.text:000008AC ; Attributes: bp-based frame
.text:000008AC
.text:000008AC ; _DWORD __thiscall ISequentialInStream::ISequentialInStream(ISequentialInStream *__hidden this)
.text:000008AC                 public ??0ISequentialInStream@@QAE@XZ
.text:000008AC ??0ISequentialInStream@@QAE@XZ proc near
.text:000008AC                                         ; CODE XREF: NCompress::CCopyCoder::CCopyCoder(void)+27p
.text:000008AC
.text:000008AC var_4           = dword ptr -4
.text:000008AC
.text:000008AC                 push    ebp
.text:000008AD                 mov     ebp, esp
.text:000008AF                 push    ecx
.text:000008B0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000008B7                 mov     [ebp+var_4], ecx
.text:000008BA                 mov     ecx, [ebp+var_4]
.text:000008BD                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:000008C2                 mov     eax, [ebp+var_4]
.text:000008C5                 mov     dword ptr [eax], offset ??_7ISequentialInStream@@6B@ ; const ISequentialInStream::`vftable'
.text:000008CB                 mov     eax, [ebp+var_4]
.text:000008CE                 add     esp, 4
.text:000008D1                 cmp     ebp, esp
.text:000008D3                 call    __RTC_CheckEsp
.text:000008D8                 mov     esp, ebp
.text:000008DA                 pop     ebp
.text:000008DB                 retn
.text:000008DB ??0ISequentialInStream@@QAE@XZ endp
.text:000008DB
.text:000008DB _text           ends
.text:000008DB
.rdata:000008DC ; ===========================================================================
.rdata:000008DC
.rdata:000008DC ; Segment type: Pure data
.rdata:000008DC ; Segment permissions: Read
.rdata:000008DC _rdata          segment dword public 'DATA' use32
.rdata:000008DC                 assume cs:_rdata
.rdata:000008DC                 ;org 8DCh
.rdata:000008DC ; COMDAT (pick largest)
.rdata:000008DC                 dd offset ??_R4ISequentialInStream@@6B@ ; const ISequentialInStream::`RTTI Complete Object Locator'
.rdata:000008E0                 public ??_7ISequentialInStream@@6B@
.rdata:000008E0 ; const ISequentialInStream::`vftable'
.rdata:000008E0 ??_7ISequentialInStream@@6B@ dd offset __purecall
.rdata:000008E0                                         ; DATA XREF: ISequentialInStream::ISequentialInStream(void)+19o
.rdata:000008E4                 dd offset __purecall
.rdata:000008E8                 dd offset __purecall
.rdata:000008EC                 dd offset __purecall
.rdata:000008EC _rdata          ends
.rdata:000008EC
.rdata$r:000008F0 ; ===========================================================================
.rdata$r:000008F0
.rdata$r:000008F0 ; Segment type: Pure data
.rdata$r:000008F0 ; Segment permissions: Read
.rdata$r:000008F0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000008F0                 assume cs:_rdata$r
.rdata$r:000008F0                 ;org 8F0h
.rdata$r:000008F0 ; COMDAT (pick any)
.rdata$r:000008F0                 public ??_R4ISequentialInStream@@6B@
.rdata$r:000008F0 ; const ISequentialInStream::`RTTI Complete Object Locator'
.rdata$r:000008F0 ??_R4ISequentialInStream@@6B@ db    0   ; DATA XREF: .rdata:000008DCo
.rdata$r:000008F1                 db    0
.rdata$r:000008F2                 db    0
.rdata$r:000008F3                 db    0
.rdata$r:000008F4                 db    0
.rdata$r:000008F5                 db    0
.rdata$r:000008F6                 db    0
.rdata$r:000008F7                 db    0
.rdata$r:000008F8                 db    0
.rdata$r:000008F9                 db    0
.rdata$r:000008FA                 db    0
.rdata$r:000008FB                 db    0
.rdata$r:000008FC                 dd offset ??_R0?AUISequentialInStream@@@8 ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:00000900                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000900 _rdata$r        ends
.rdata$r:00000900
.text:00000904 ; ===========================================================================
.text:00000904
.text:00000904 ; Segment type: Pure code
.text:00000904 ; Segment permissions: Read/Execute
.text:00000904 _text           segment para public 'CODE' use32
.text:00000904                 assume cs:_text
.text:00000904                 ;org 904h
.text:00000904 ; COMDAT (pick any)
.text:00000904                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000904
.text:00000904 ; =============== S U B R O U T I N E =======================================
.text:00000904
.text:00000904 ; Attributes: bp-based frame
.text:00000904
.text:00000904 ; _DWORD __thiscall ICompressGetInStreamProcessedSize::ICompressGetInStreamProcessedSize(ICompressGetInStreamProcessedSize *__hidden this)
.text:00000904                 public ??0ICompressGetInStreamProcessedSize@@QAE@XZ
.text:00000904 ??0ICompressGetInStreamProcessedSize@@QAE@XZ proc near
.text:00000904                                         ; CODE XREF: NCompress::CCopyCoder::CCopyCoder(void)+32p
.text:00000904
.text:00000904 var_4           = dword ptr -4
.text:00000904
.text:00000904                 push    ebp
.text:00000905                 mov     ebp, esp
.text:00000907                 push    ecx
.text:00000908                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000090F                 mov     [ebp+var_4], ecx
.text:00000912                 mov     ecx, [ebp+var_4]
.text:00000915                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:0000091A                 mov     eax, [ebp+var_4]
.text:0000091D                 mov     dword ptr [eax], offset ??_7ICompressGetInStreamProcessedSize@@6B@ ; const ICompressGetInStreamProcessedSize::`vftable'
.text:00000923                 mov     eax, [ebp+var_4]
.text:00000926                 add     esp, 4
.text:00000929                 cmp     ebp, esp
.text:0000092B                 call    __RTC_CheckEsp
.text:00000930                 mov     esp, ebp
.text:00000932                 pop     ebp
.text:00000933                 retn
.text:00000933 ??0ICompressGetInStreamProcessedSize@@QAE@XZ endp
.text:00000933
.text:00000933 _text           ends
.text:00000933
.rdata:00000934 ; ===========================================================================
.rdata:00000934
.rdata:00000934 ; Segment type: Pure data
.rdata:00000934 ; Segment permissions: Read
.rdata:00000934 _rdata          segment dword public 'DATA' use32
.rdata:00000934                 assume cs:_rdata
.rdata:00000934                 ;org 934h
.rdata:00000934 ; COMDAT (pick largest)
.rdata:00000934                 dd offset ??_R4ICompressGetInStreamProcessedSize@@6B@ ; const ICompressGetInStreamProcessedSize::`RTTI Complete Object Locator'
.rdata:00000938                 public ??_7ICompressGetInStreamProcessedSize@@6B@
.rdata:00000938 ; const ICompressGetInStreamProcessedSize::`vftable'
.rdata:00000938 ??_7ICompressGetInStreamProcessedSize@@6B@ dd offset __purecall
.rdata:00000938                                         ; DATA XREF: ICompressGetInStreamProcessedSize::ICompressGetInStreamProcessedSize(void)+19o
.rdata:0000093C                 dd offset __purecall
.rdata:00000940                 dd offset __purecall
.rdata:00000944                 dd offset __purecall
.rdata:00000944 _rdata          ends
.rdata:00000944
.rdata$r:00000948 ; ===========================================================================
.rdata$r:00000948
.rdata$r:00000948 ; Segment type: Pure data
.rdata$r:00000948 ; Segment permissions: Read
.rdata$r:00000948 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000948                 assume cs:_rdata$r
.rdata$r:00000948                 ;org 948h
.rdata$r:00000948 ; COMDAT (pick any)
.rdata$r:00000948                 public ??_R4ICompressGetInStreamProcessedSize@@6B@
.rdata$r:00000948 ; const ICompressGetInStreamProcessedSize::`RTTI Complete Object Locator'
.rdata$r:00000948 ??_R4ICompressGetInStreamProcessedSize@@6B@ db    0
.rdata$r:00000948                                         ; DATA XREF: .rdata:00000934o
.rdata$r:00000949                 db    0
.rdata$r:0000094A                 db    0
.rdata$r:0000094B                 db    0
.rdata$r:0000094C                 db    0
.rdata$r:0000094D                 db    0
.rdata$r:0000094E                 db    0
.rdata$r:0000094F                 db    0
.rdata$r:00000950                 db    0
.rdata$r:00000951                 db    0
.rdata$r:00000952                 db    0
.rdata$r:00000953                 db    0
.rdata$r:00000954                 dd offset ??_R0?AUICompressGetInStreamProcessedSize@@@8 ; ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
.rdata$r:00000958                 dd offset ??_R3ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000958 _rdata$r        ends
.rdata$r:00000958
.text:0000095C ; ===========================================================================
.text:0000095C
.text:0000095C ; Segment type: Pure code
.text:0000095C ; Segment permissions: Read/Execute
.text:0000095C _text           segment para public 'CODE' use32
.text:0000095C                 assume cs:_text
.text:0000095C                 ;org 95Ch
.text:0000095C ; COMDAT (pick any)
.text:0000095C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000095C
.text:0000095C ; =============== S U B R O U T I N E =======================================
.text:0000095C
.text:0000095C ; Attributes: bp-based frame
.text:0000095C
.text:0000095C ; public: void * __thiscall NCompress::CCopyCoder::`scalar deleting destructor'(unsigned int)
.text:0000095C                 public ??_GCCopyCoder@NCompress@@QAEPAXI@Z
.text:0000095C ??_GCCopyCoder@NCompress@@QAEPAXI@Z proc near
.text:0000095C                                         ; CODE XREF: NCompress::CCopyCoder::Release(void)+51p
.text:0000095C
.text:0000095C var_4           = dword ptr -4
.text:0000095C arg_0           = dword ptr  8
.text:0000095C
.text:0000095C                 push    ebp
.text:0000095D                 mov     ebp, esp
.text:0000095F                 push    ecx
.text:00000960                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000967                 mov     [ebp+var_4], ecx
.text:0000096A                 mov     ecx, [ebp+var_4] ; this
.text:0000096D                 call    ??1CCopyCoder@NCompress@@QAE@XZ ; NCompress::CCopyCoder::~CCopyCoder(void)
.text:00000972                 mov     eax, [ebp+arg_0]
.text:00000975                 and     eax, 1
.text:00000978                 jz      short loc_986
.text:0000097A                 mov     ecx, [ebp+var_4]
.text:0000097D                 push    ecx             ; void *
.text:0000097E                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00000983                 add     esp, 4
.text:00000986
.text:00000986 loc_986:                                ; CODE XREF: NCompress::CCopyCoder::`scalar deleting destructor'(uint)+1Cj
.text:00000986                 mov     eax, [ebp+var_4]
.text:00000989                 add     esp, 4
.text:0000098C                 cmp     ebp, esp
.text:0000098E                 call    __RTC_CheckEsp
.text:00000993                 mov     esp, ebp
.text:00000995                 pop     ebp
.text:00000996                 retn    4
.text:00000996 ??_GCCopyCoder@NCompress@@QAEPAXI@Z endp
.text:00000996
.text:00000996 ; ---------------------------------------------------------------------------
.text:00000999                 align 4
.text:00000999 _text           ends
.text:00000999
.text:0000099C ; ===========================================================================
.text:0000099C
.text:0000099C ; Segment type: Pure code
.text:0000099C ; Segment permissions: Read/Execute
.text:0000099C _text           segment para public 'CODE' use32
.text:0000099C                 assume cs:_text
.text:0000099C                 ;org 99Ch
.text:0000099C ; COMDAT (pick any)
.text:0000099C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000099C
.text:0000099C ; =============== S U B R O U T I N E =======================================
.text:0000099C
.text:0000099C ; Attributes: bp-based frame
.text:0000099C
.text:0000099C ; public: __thiscall IUnknown::IUnknown(void)
.text:0000099C                 public ??0IUnknown@@QAE@XZ
.text:0000099C ??0IUnknown@@QAE@XZ proc near           ; CODE XREF: ICompressCoder::ICompressCoder(void)+11p
.text:0000099C                                         ; ICompressSetInStream::ICompressSetInStream(void)+11p ...
.text:0000099C
.text:0000099C var_4           = dword ptr -4
.text:0000099C
.text:0000099C                 push    ebp
.text:0000099D                 mov     ebp, esp
.text:0000099F                 push    ecx
.text:000009A0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000009A7                 mov     [ebp+var_4], ecx
.text:000009AA                 mov     eax, [ebp+var_4]
.text:000009AD                 mov     esp, ebp
.text:000009AF                 pop     ebp
.text:000009B0                 retn
.text:000009B0 ??0IUnknown@@QAE@XZ endp
.text:000009B0
.text:000009B0 ; ---------------------------------------------------------------------------
.text:000009B1                 align 4
.text:000009B1 _text           ends
.text:000009B1
.text:000009B4 ; ===========================================================================
.text:000009B4
.text:000009B4 ; Segment type: Pure code
.text:000009B4 ; Segment permissions: Read/Execute
.text:000009B4 _text           segment para public 'CODE' use32
.text:000009B4                 assume cs:_text
.text:000009B4                 ;org 9B4h
.text:000009B4 ; COMDAT (pick any)
.text:000009B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000009B4
.text:000009B4 ; =============== S U B R O U T I N E =======================================
.text:000009B4
.text:000009B4 ; Attributes: bp-based frame
.text:000009B4
.text:000009B4 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::CMyComPtr<struct ISequentialInStream>(void)
.text:000009B4                 public ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
.text:000009B4 ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ proc near
.text:000009B4                                         ; CODE XREF: NCompress::CCopyCoder::CCopyCoder(void)+79p
.text:000009B4
.text:000009B4 var_4           = dword ptr -4
.text:000009B4
.text:000009B4                 push    ebp
.text:000009B5                 mov     ebp, esp
.text:000009B7                 push    ecx
.text:000009B8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000009BF                 mov     [ebp+var_4], ecx
.text:000009C2                 mov     eax, [ebp+var_4]
.text:000009C5                 mov     dword ptr [eax], 0
.text:000009CB                 mov     eax, [ebp+var_4]
.text:000009CE                 mov     esp, ebp
.text:000009D0                 pop     ebp
.text:000009D1                 retn
.text:000009D1 ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ endp
.text:000009D1
.text:000009D1 ; ---------------------------------------------------------------------------
.text:000009D2                 align 4
.text:000009D2 _text           ends
.text:000009D2
.text:000009D4 ; ===========================================================================
.text:000009D4
.text:000009D4 ; Segment type: Pure code
.text:000009D4 ; Segment permissions: Read/Execute
.text:000009D4 _text           segment para public 'CODE' use32
.text:000009D4                 assume cs:_text
.text:000009D4                 ;org 9D4h
.text:000009D4 ; COMDAT (pick any)
.text:000009D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000009D4
.text:000009D4 ; =============== S U B R O U T I N E =======================================
.text:000009D4
.text:000009D4
.text:000009D4 ; [thunk]:public: virtual unsigned long __stdcall NCompress::CCopyCoder::Release`adjustor{4}' (void)
.text:000009D4                 public ?Release@CCopyCoder@NCompress@@W3AGKXZ
.text:000009D4 ?Release@CCopyCoder@NCompress@@W3AGKXZ proc near
.text:000009D4                                         ; DATA XREF: .rdata:000001ECo
.text:000009D4
.text:000009D4 arg_0           = dword ptr  4
.text:000009D4
.text:000009D4                 sub     [esp+arg_0], 4
.text:000009D9                 jmp     ?Release@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::Release(void)
.text:000009D9 ?Release@CCopyCoder@NCompress@@W3AGKXZ endp
.text:000009D9
.text:000009D9 ; ---------------------------------------------------------------------------
.text:000009DE                 align 10h
.text:000009DE _text           ends
.text:000009DE
.text:000009E0 ; ===========================================================================
.text:000009E0
.text:000009E0 ; Segment type: Pure code
.text:000009E0 ; Segment permissions: Read/Execute
.text:000009E0 _text           segment para public 'CODE' use32
.text:000009E0                 assume cs:_text
.text:000009E0                 ;org 9E0h
.text:000009E0 ; COMDAT (pick any)
.text:000009E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000009E0
.text:000009E0 ; =============== S U B R O U T I N E =======================================
.text:000009E0
.text:000009E0
.text:000009E0 ; [thunk]:public: virtual unsigned long __stdcall NCompress::CCopyCoder::Release`adjustor{8}' (void)
.text:000009E0                 public ?Release@CCopyCoder@NCompress@@W7AGKXZ
.text:000009E0 ?Release@CCopyCoder@NCompress@@W7AGKXZ proc near
.text:000009E0                                         ; DATA XREF: .rdata:000001D8o
.text:000009E0
.text:000009E0 arg_0           = dword ptr  4
.text:000009E0
.text:000009E0                 sub     [esp+arg_0], 8
.text:000009E5                 jmp     ?Release@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::Release(void)
.text:000009E5 ?Release@CCopyCoder@NCompress@@W7AGKXZ endp
.text:000009E5
.text:000009E5 ; ---------------------------------------------------------------------------
.text:000009EA                 align 4
.text:000009EA _text           ends
.text:000009EA
.text:000009EC ; ===========================================================================
.text:000009EC
.text:000009EC ; Segment type: Pure code
.text:000009EC ; Segment permissions: Read/Execute
.text:000009EC _text           segment para public 'CODE' use32
.text:000009EC                 assume cs:_text
.text:000009EC                 ;org 9ECh
.text:000009EC ; COMDAT (pick any)
.text:000009EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000009EC
.text:000009EC ; =============== S U B R O U T I N E =======================================
.text:000009EC
.text:000009EC
.text:000009EC ; [thunk]:public: virtual unsigned long __stdcall NCompress::CCopyCoder::Release`adjustor{12}' (void)
.text:000009EC                 public ?Release@CCopyCoder@NCompress@@WM@AGKXZ
.text:000009EC ?Release@CCopyCoder@NCompress@@WM@AGKXZ proc near
.text:000009EC                                         ; DATA XREF: .rdata:000001C4o
.text:000009EC
.text:000009EC arg_0           = dword ptr  4
.text:000009EC
.text:000009EC                 sub     [esp+arg_0], 0Ch
.text:000009F1                 jmp     ?Release@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::Release(void)
.text:000009F1 ?Release@CCopyCoder@NCompress@@WM@AGKXZ endp
.text:000009F1
.text:000009F1 ; ---------------------------------------------------------------------------
.text:000009F6                 align 4
.text:000009F6 _text           ends
.text:000009F6
.text:000009F8 ; ===========================================================================
.text:000009F8
.text:000009F8 ; Segment type: Pure code
.text:000009F8 ; Segment permissions: Read/Execute
.text:000009F8 _text           segment para public 'CODE' use32
.text:000009F8                 assume cs:_text
.text:000009F8                 ;org 9F8h
.text:000009F8 ; COMDAT (pick any)
.text:000009F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000009F8
.text:000009F8 ; =============== S U B R O U T I N E =======================================
.text:000009F8
.text:000009F8
.text:000009F8 ; [thunk]:public: virtual unsigned long __stdcall NCompress::CCopyCoder::AddRef`adjustor{4}' (void)
.text:000009F8                 public ?AddRef@CCopyCoder@NCompress@@W3AGKXZ
.text:000009F8 ?AddRef@CCopyCoder@NCompress@@W3AGKXZ proc near ; DATA XREF: .rdata:000001E8o
.text:000009F8
.text:000009F8 arg_0           = dword ptr  4
.text:000009F8
.text:000009F8                 sub     [esp+arg_0], 4
.text:000009FD                 jmp     ?AddRef@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::AddRef(void)
.text:000009FD ?AddRef@CCopyCoder@NCompress@@W3AGKXZ endp
.text:000009FD
.text:000009FD ; ---------------------------------------------------------------------------
.text:00000A02                 align 4
.text:00000A02 _text           ends
.text:00000A02
.text:00000A04 ; ===========================================================================
.text:00000A04
.text:00000A04 ; Segment type: Pure code
.text:00000A04 ; Segment permissions: Read/Execute
.text:00000A04 _text           segment para public 'CODE' use32
.text:00000A04                 assume cs:_text
.text:00000A04                 ;org 0A04h
.text:00000A04 ; COMDAT (pick any)
.text:00000A04                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000A04
.text:00000A04 ; =============== S U B R O U T I N E =======================================
.text:00000A04
.text:00000A04
.text:00000A04 ; [thunk]:public: virtual unsigned long __stdcall NCompress::CCopyCoder::AddRef`adjustor{8}' (void)
.text:00000A04                 public ?AddRef@CCopyCoder@NCompress@@W7AGKXZ
.text:00000A04 ?AddRef@CCopyCoder@NCompress@@W7AGKXZ proc near ; DATA XREF: .rdata:000001D4o
.text:00000A04
.text:00000A04 arg_0           = dword ptr  4
.text:00000A04
.text:00000A04                 sub     [esp+arg_0], 8
.text:00000A09                 jmp     ?AddRef@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::AddRef(void)
.text:00000A09 ?AddRef@CCopyCoder@NCompress@@W7AGKXZ endp
.text:00000A09
.text:00000A09 ; ---------------------------------------------------------------------------
.text:00000A0E                 align 10h
.text:00000A0E _text           ends
.text:00000A0E
.text:00000A10 ; ===========================================================================
.text:00000A10
.text:00000A10 ; Segment type: Pure code
.text:00000A10 ; Segment permissions: Read/Execute
.text:00000A10 _text           segment para public 'CODE' use32
.text:00000A10                 assume cs:_text
.text:00000A10                 ;org 0A10h
.text:00000A10 ; COMDAT (pick any)
.text:00000A10                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000A10
.text:00000A10 ; =============== S U B R O U T I N E =======================================
.text:00000A10
.text:00000A10
.text:00000A10 ; [thunk]:public: virtual long __stdcall NCompress::CCopyCoder::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:00000A10                 public ?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.text:00000A10 ?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:00000A10                                         ; DATA XREF: .rdata:const NCompress::CCopyCoder::`vftable'{for `ICompressSetInStream'}o
.text:00000A10
.text:00000A10 arg_0           = dword ptr  4
.text:00000A10
.text:00000A10                 sub     [esp+arg_0], 4
.text:00000A15                 jmp     ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)
.text:00000A15 ?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z endp
.text:00000A15
.text:00000A15 ; ---------------------------------------------------------------------------
.text:00000A1A                 align 4
.text:00000A1A _text           ends
.text:00000A1A
.text:00000A1C ; ===========================================================================
.text:00000A1C
.text:00000A1C ; Segment type: Pure code
.text:00000A1C ; Segment permissions: Read/Execute
.text:00000A1C _text           segment para public 'CODE' use32
.text:00000A1C                 assume cs:_text
.text:00000A1C                 ;org 0A1Ch
.text:00000A1C ; COMDAT (pick any)
.text:00000A1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000A1C
.text:00000A1C ; =============== S U B R O U T I N E =======================================
.text:00000A1C
.text:00000A1C
.text:00000A1C ; [thunk]:public: virtual unsigned long __stdcall NCompress::CCopyCoder::AddRef`adjustor{12}' (void)
.text:00000A1C                 public ?AddRef@CCopyCoder@NCompress@@WM@AGKXZ
.text:00000A1C ?AddRef@CCopyCoder@NCompress@@WM@AGKXZ proc near
.text:00000A1C                                         ; DATA XREF: .rdata:000001C0o
.text:00000A1C
.text:00000A1C arg_0           = dword ptr  4
.text:00000A1C
.text:00000A1C                 sub     [esp+arg_0], 0Ch
.text:00000A21                 jmp     ?AddRef@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::AddRef(void)
.text:00000A21 ?AddRef@CCopyCoder@NCompress@@WM@AGKXZ endp
.text:00000A21
.text:00000A21 ; ---------------------------------------------------------------------------
.text:00000A26                 align 4
.text:00000A26 _text           ends
.text:00000A26
.text:00000A28 ; ===========================================================================
.text:00000A28
.text:00000A28 ; Segment type: Pure code
.text:00000A28 ; Segment permissions: Read/Execute
.text:00000A28 _text           segment para public 'CODE' use32
.text:00000A28                 assume cs:_text
.text:00000A28                 ;org 0A28h
.text:00000A28 ; COMDAT (pick any)
.text:00000A28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000A28
.text:00000A28 ; =============== S U B R O U T I N E =======================================
.text:00000A28
.text:00000A28
.text:00000A28 ; [thunk]:public: virtual long __stdcall NCompress::CCopyCoder::QueryInterface`adjustor{8}' (struct _GUID const &, void * *)
.text:00000A28                 public ?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z
.text:00000A28 ?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z proc near
.text:00000A28                                         ; DATA XREF: .rdata:const NCompress::CCopyCoder::`vftable'{for `ISequentialInStream'}o
.text:00000A28
.text:00000A28 arg_0           = dword ptr  4
.text:00000A28
.text:00000A28                 sub     [esp+arg_0], 8
.text:00000A2D                 jmp     ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)
.text:00000A2D ?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z endp
.text:00000A2D
.text:00000A2D ; ---------------------------------------------------------------------------
.text:00000A32                 align 4
.text:00000A32 _text           ends
.text:00000A32
.text:00000A34 ; ===========================================================================
.text:00000A34
.text:00000A34 ; Segment type: Pure code
.text:00000A34 ; Segment permissions: Read/Execute
.text:00000A34 _text           segment para public 'CODE' use32
.text:00000A34                 assume cs:_text
.text:00000A34                 ;org 0A34h
.text:00000A34 ; COMDAT (pick any)
.text:00000A34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000A34
.text:00000A34 ; =============== S U B R O U T I N E =======================================
.text:00000A34
.text:00000A34
.text:00000A34 ; [thunk]:public: virtual long __stdcall NCompress::CCopyCoder::QueryInterface`adjustor{12}' (struct _GUID const &, void * *)
.text:00000A34                 public ?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z
.text:00000A34 ?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z proc near
.text:00000A34                                         ; DATA XREF: .rdata:const NCompress::CCopyCoder::`vftable'{for `ICompressGetInStreamProcessedSize'}o
.text:00000A34
.text:00000A34 arg_0           = dword ptr  4
.text:00000A34
.text:00000A34                 sub     [esp+arg_0], 0Ch
.text:00000A39                 jmp     ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)
.text:00000A39 ?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z endp
.text:00000A39
.text:00000A39 ; ---------------------------------------------------------------------------
.text:00000A3E                 align 10h
.text:00000A3E _text           ends
.text:00000A3E
.text$yc:00000A40 ; ===========================================================================
.text$yc:00000A40
.text$yc:00000A40 ; Segment type: Pure code
.text$yc:00000A40 ; Segment permissions: Read/Execute
.text$yc:00000A40 _text$yc        segment para public 'CODE' use32
.text$yc:00000A40                 assume cs:_text$yc
.text$yc:00000A40                 ;org 0A40h
.text$yc:00000A40 ; COMDAT (pick any)
.text$yc:00000A40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yc:00000A40
.text$yc:00000A40 ; =============== S U B R O U T I N E =======================================
.text$yc:00000A40
.text$yc:00000A40 ; Attributes: bp-based frame
.text$yc:00000A40
.text$yc:00000A40 ; void __cdecl `dynamic initializer for 'g_RegisterCodec''(void)
.text$yc:00000A40 ??__Eg_RegisterCodec@@YAXXZ proc near   ; DATA XREF: .CRT$XCU:_g_RegisterCodec$initializer$o
.text$yc:00000A40                 push    ebp
.text$yc:00000A41                 mov     ebp, esp
.text$yc:00000A43                 mov     ecx, offset _g_RegisterCodec ; this
.text$yc:00000A48                 call    ??0CRegisterCodecCopy@@QAE@XZ ; CRegisterCodecCopy::CRegisterCodecCopy(void)
.text$yc:00000A4D                 cmp     ebp, esp
.text$yc:00000A4F                 call    __RTC_CheckEsp
.text$yc:00000A54                 pop     ebp
.text$yc:00000A55                 retn
.text$yc:00000A55 ??__Eg_RegisterCodec@@YAXXZ endp
.text$yc:00000A55
.text$yc:00000A55 ; ---------------------------------------------------------------------------
.text$yc:00000A56                 align 4
.text$yc:00000A56 _text$yc        ends
.text$yc:00000A56
.text:00000A58 ; ===========================================================================
.text:00000A58
.text:00000A58 ; Segment type: Pure code
.text:00000A58 ; Segment permissions: Read/Execute
.text:00000A58 _text           segment para public 'CODE' use32
.text:00000A58                 assume cs:_text
.text:00000A58                 ;org 0A58h
.text:00000A58 ; COMDAT (pick any)
.text:00000A58                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000A58
.text:00000A58 ; =============== S U B R O U T I N E =======================================
.text:00000A58
.text:00000A58 ; Attributes: bp-based frame
.text:00000A58
.text:00000A58 ; _DWORD __thiscall CRegisterCodecCopy::CRegisterCodecCopy(CRegisterCodecCopy *__hidden this)
.text:00000A58                 public ??0CRegisterCodecCopy@@QAE@XZ
.text:00000A58 ??0CRegisterCodecCopy@@QAE@XZ proc near ; CODE XREF: `dynamic initializer for 'g_RegisterCodec''(void)+8p
.text:00000A58
.text:00000A58 var_4           = dword ptr -4
.text:00000A58
.text:00000A58                 push    ebp
.text:00000A59                 mov     ebp, esp
.text:00000A5B                 push    ecx
.text:00000A5C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000A63                 mov     [ebp+var_4], ecx
.text:00000A66                 push    offset _g_CodecInfo ; struct CCodecInfo *
.text:00000A6B                 call    ?RegisterCodec@@YGXPBUCCodecInfo@@@Z ; RegisterCodec(CCodecInfo const *)
.text:00000A70                 mov     eax, [ebp+var_4]
.text:00000A73                 add     esp, 4
.text:00000A76                 cmp     ebp, esp
.text:00000A78                 call    __RTC_CheckEsp
.text:00000A7D                 mov     esp, ebp
.text:00000A7F                 pop     ebp
.text:00000A80                 retn
.text:00000A80 ??0CRegisterCodecCopy@@QAE@XZ endp
.text:00000A80
.text:00000A80 ; ---------------------------------------------------------------------------
.text:00000A81                 align 4
.text:00000A81 _text           ends
.text:00000A81
.bss:00000A84 ; ===========================================================================
.bss:00000A84
.bss:00000A84 ; Segment type: Uninitialized
.bss:00000A84 ; Segment permissions: Read/Write
.bss:00000A84 _bss            segment byte public 'BSS' use32
.bss:00000A84                 assume cs:_bss
.bss:00000A84                 ;org 0A84h
.bss:00000A84                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:00000A84 ; CRegisterCodecCopy g_RegisterCodec
.bss:00000A84 _g_RegisterCodec db    ? ;              ; DATA XREF: `dynamic initializer for 'g_RegisterCodec''(void)+3o
.bss:00000A85                 align 4
.bss:00000A85 _bss            ends
.bss:00000A85
.CRT$XCU:00000A88 ; ===========================================================================
.CRT$XCU:00000A88
.CRT$XCU:00000A88 ; Segment type: Pure data
.CRT$XCU:00000A88 ; Segment permissions: Read
.CRT$XCU:00000A88 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00000A88                 assume cs:_CRT$XCU
.CRT$XCU:00000A88                 ;org 0A88h
.CRT$XCU:00000A88 _g_RegisterCodec$initializer$ dd offset ??__Eg_RegisterCodec@@YAXXZ ; `dynamic initializer for 'g_RegisterCodec''(void)
.CRT$XCU:00000A88 _CRT$XCU        ends
.CRT$XCU:00000A88
UNDEF:00000A90 ; ===========================================================================
UNDEF:00000A90
UNDEF:00000A90 ; Segment type: Externs
UNDEF:00000A90 ; UNDEF
UNDEF:00000A90 ; void __cdecl operator delete(void *)
UNDEF:00000A90                 extrn ??3@YAXPAX@Z:near ; CODE XREF: __unwindfunclet$?CreateCodec@@YGPAXXZ$0+4p
UNDEF:00000A90                                         ; NCompress::CCopyCoder::`scalar deleting destructor'(uint)+22p
UNDEF:00000A94 ; void *__cdecl operator new(unsigned int)
UNDEF:00000A94                 extrn ??2@YAPAXI@Z:near ; CODE XREF: CreateCodec(void)+3Cp
UNDEF:00000A98                 extrn ___security_cookie:near
UNDEF:00000A98                                         ; DATA XREF: CreateCodec(void)+29r
UNDEF:00000A9C                 extrn ___CxxFrameHandler3:near
UNDEF:00000A9C                                         ; CODE XREF: __ehhandler$?CreateCodec@@YGPAXXZ+16j
UNDEF:00000AA0 ; __fastcall __security_check_cookie(x)
UNDEF:00000AA0                 extrn @__security_check_cookie@4:near
UNDEF:00000AA0                                         ; CODE XREF: __ehhandler$?CreateCodec@@YGPAXXZ+Cp
UNDEF:00000AA4                 extrn __RTC_CheckEsp:near ; CODE XREF: CreateCodec(void)+88p
UNDEF:00000AA4                                         ; NCompress::CCopyCoder::CCopyCoder(void)+97p ...
UNDEF:00000AA8                 extrn __RTC_Shutdown:near
UNDEF:00000AA8                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000AAC                 extrn __RTC_InitBase:near
UNDEF:00000AAC                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000AB0 ; const type_info::`vftable'
UNDEF:00000AB0                 extrn ??_7type_info@@6B@:near
UNDEF:00000AB0                                         ; DATA XREF: .data:NCompress::CCopyCoder `RTTI Type Descriptor'o
UNDEF:00000AB0                                         ; .data:ICompressCoder `RTTI Type Descriptor'o ...
UNDEF:00000AB4 ; public: virtual long __stdcall NCompress::CCopyCoder::Code(struct ISequentialInStream *, struct ISequentialOutStream *, unsigned __int64 const *, unsigned __int64 const *, struct ICompressProgressInfo *)
UNDEF:00000AB4                 extrn ?Code@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z:near
UNDEF:00000AB4                                         ; DATA XREF: .rdata:00000208o
UNDEF:00000AB8 ; public: virtual long __stdcall NCompress::CCopyCoder::SetInStream(struct ISequentialInStream *)
UNDEF:00000AB8                 extrn ?SetInStream@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@@Z:near
UNDEF:00000AB8                                         ; DATA XREF: .rdata:000001F0o
UNDEF:00000ABC ; public: virtual long __stdcall NCompress::CCopyCoder::ReleaseInStream(void)
UNDEF:00000ABC                 extrn ?ReleaseInStream@CCopyCoder@NCompress@@UAGJXZ:near
UNDEF:00000ABC                                         ; DATA XREF: .rdata:000001F4o
UNDEF:00000AC0 ; public: virtual long __stdcall NCompress::CCopyCoder::Read(void *, unsigned int, unsigned int *)
UNDEF:00000AC0                 extrn ?Read@CCopyCoder@NCompress@@UAGJPAXIPAI@Z:near
UNDEF:00000AC0                                         ; DATA XREF: .rdata:000001DCo
UNDEF:00000AC4 ; public: virtual long __stdcall NCompress::CCopyCoder::GetInStreamProcessedSize(unsigned __int64 *)
UNDEF:00000AC4                 extrn ?GetInStreamProcessedSize@CCopyCoder@NCompress@@UAGJPA_K@Z:near
UNDEF:00000AC4                                         ; DATA XREF: .rdata:000001C8o
UNDEF:00000AC8                 extrn _IID_ICompressGetInStreamProcessedSize:near
UNDEF:00000AC8                                         ; DATA XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *):loc_6B6o
UNDEF:00000ACC                 extrn _IID_ISequentialInStream:near
UNDEF:00000ACC                                         ; DATA XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *):loc_682o
UNDEF:00000AD0                 extrn _IID_ICompressSetInStream:near
UNDEF:00000AD0                                         ; DATA XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *):loc_64Eo
UNDEF:00000AD4                 extrn _IID_ICompressCoder:near
UNDEF:00000AD4                                         ; DATA XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *):loc_62Fo
UNDEF:00000AD8 ; const IID IID_IUnknown
UNDEF:00000AD8                 extrn _IID_IUnknown:near
UNDEF:00000AD8                                         ; DATA XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+24o
UNDEF:00000ADC                 extrn __purecall:near   ; DATA XREF: .rdata:const ICompressCoder::`vftable'o
UNDEF:00000ADC                                         ; .rdata:000007ECo ...
UNDEF:00000AE0 ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:00000AE0                 extrn _memcmp:near      ; CODE XREF: IsEqualGUID(x,x)+Dp
UNDEF:00000AE4 ; _DWORD __thiscall NCompress::CCopyCoder::~CCopyCoder(NCompress::CCopyCoder *__hidden this)
UNDEF:00000AE4                 extrn ??1CCopyCoder@NCompress@@QAE@XZ:near
UNDEF:00000AE4                                         ; CODE XREF: NCompress::CCopyCoder::`scalar deleting destructor'(uint)+11p
UNDEF:00000AE8 ; void __stdcall RegisterCodec(const struct CCodecInfo *)
UNDEF:00000AE8                 extrn ?RegisterCodec@@YGXPBUCCodecInfo@@@Z:near
UNDEF:00000AE8                                         ; CODE XREF: CRegisterCodecCopy::CRegisterCodecCopy(void)+13p
UNDEF:00000AE8
UNDEF:00000AE8
UNDEF:00000AE8                 end