.data:00000000 ;
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.data:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.data:00000000 ; |                      License info: 48-3677-7074-51                      |
.data:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ;
.data:00000000 ; Input MD5   : 34E21AF999306BDD7D433D36AA0DEC81
.data:00000000 ; Input CRC32 : 23410BB8
.data:00000000
.data:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\FileIO.obj
.data:00000000 ; Format      : COFF (X386MAGIC)
.data:00000000 ; includelib "uuid.lib"
.data:00000000 ; includelib "MSVCRTD"
.data:00000000 ; includelib "OLDNAMES"
.data:00000000
.data:00000000                 .686p
.data:00000000                 .mmx
.data:00000000                 .model flat
.data:00000000
.data:00000000 ; ===========================================================================
.data:00000000
.data:00000000 ; Segment type: Pure data
.data:00000000 ; Segment permissions: Read/Write
.data:00000000 _data           segment dword public 'DATA' use32
.data:00000000                 assume cs:_data
.data:00000000 _kChunkSizeMax  dd 400000h              ; DATA XREF: NWindows::NFile::NIO::CInFile::ReadPart(void *,uint,uint &)+11r
.data:00000000                                         ; NWindows::NFile::NIO::CInFile::ReadPart(void *,uint,uint &)+19r ...
.data:00000000 _data           ends
.data:00000000
.text:00000004 ; ===========================================================================
.text:00000004
.text:00000004 ; Segment type: Pure code
.text:00000004 ; Segment permissions: Read/Execute
.text:00000004 _text           segment para public 'CODE' use32
.text:00000004                 assume cs:_text
.text:00000004                 ;org 4
.text:00000004                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00000004
.text:00000004 ; =============== S U B R O U T I N E =======================================
.text:00000004
.text:00000004 ; Attributes: bp-based frame
.text:00000004
.text:00000004 ; bool __thiscall NWindows::NFile::NIO::CFileBase::Create(NWindows::NFile::NIO::CFileBase *this, LPCWSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, DWORD dwCreationDisposition, unsigned __int32)
.text:00000004                 public ?Create@CFileBase@NIO@NFile@NWindows@@IAE_NPB_WKKKK@Z
.text:00000004 ?Create@CFileBase@NIO@NFile@NWindows@@IAE_NPB_WKKKK@Z proc near
.text:00000004                                         ; CODE XREF: NWindows::NFile::NIO::CInFile::Open(wchar_t const *,ulong,ulong,ulong)+2Fp
.text:00000004                                         ; NWindows::NFile::NIO::COutFile::Open(wchar_t const *,ulong,ulong,ulong)+26p
.text:00000004
.text:00000004 var_24          = dword ptr -24h
.text:00000004 var_20          = dword ptr -20h
.text:00000004 var_1C          = dword ptr -1Ch
.text:00000004 var_18          = dword ptr -18h
.text:00000004 var_14          = dword ptr -14h
.text:00000004 var_10          = dword ptr -10h
.text:00000004 var_C           = dword ptr -0Ch
.text:00000004 var_4           = dword ptr -4
.text:00000004 lpFileName      = dword ptr  8
.text:00000004 dwDesiredAccess = dword ptr  0Ch
.text:00000004 dwShareMode     = dword ptr  10h
.text:00000004 dwCreationDisposition= dword ptr  14h
.text:00000004 dwFlagsAndAttributes= dword ptr  18h
.text:00000004
.text:00000004                 push    ebp
.text:00000005                 mov     ebp, esp
.text:00000007                 push    0FFFFFFFFh
.text:00000009                 push    offset __ehhandler$?Create@CFileBase@NIO@NFile@NWindows@@IAE_NPB_WKKKK@Z
.text:0000000E                 mov     eax, large fs:0
.text:00000014                 push    eax
.text:00000015                 sub     esp, 18h
.text:00000018                 push    esi
.text:00000019                 mov     eax, 0CCCCCCCCh
.text:0000001E                 mov     [ebp+var_24], eax
.text:00000021                 mov     [ebp+var_20], eax
.text:00000024                 mov     [ebp+var_1C], eax
.text:00000027                 mov     [ebp+var_18], eax
.text:0000002A                 mov     [ebp+var_14], eax
.text:0000002D                 mov     [ebp+var_10], eax
.text:00000030                 mov     eax, dword ptr ds:___security_cookie
.text:00000035                 xor     eax, ebp
.text:00000037                 push    eax
.text:00000038                 lea     eax, [ebp+var_C]
.text:0000003B                 mov     large fs:0, eax
.text:00000041                 mov     [ebp+var_10], ecx
.text:00000044                 mov     ecx, [ebp+var_10] ; this
.text:00000047                 call    ?Close@CFileBase@NIO@NFile@NWindows@@QAE_NXZ ; NWindows::NFile::NIO::CFileBase::Close(void)
.text:0000004C                 movzx   eax, al
.text:0000004F                 test    eax, eax
.text:00000051                 jnz     short loc_5A
.text:00000053                 xor     al, al
.text:00000055                 jmp     loc_102
.text:0000005A ; ---------------------------------------------------------------------------
.text:0000005A
.text:0000005A loc_5A:                                 ; CODE XREF: NWindows::NFile::NIO::CFileBase::Create(wchar_t const *,ulong,ulong,ulong,ulong)+4Dj
.text:0000005A                 mov     ecx, [ebp+var_10]
.text:0000005D                 mov     byte ptr [ecx+4], 0
.text:00000061                 movzx   edx, byte ptr ds:?g_IsNT@@3_NA ; bool g_IsNT
.text:00000068                 test    edx, edx
.text:0000006A                 jnz     short loc_CB
.text:0000006C                 mov     esi, esp
.text:0000006E                 push    0               ; hTemplateFile
.text:00000070                 mov     eax, [ebp+dwFlagsAndAttributes]
.text:00000073                 push    eax             ; dwFlagsAndAttributes
.text:00000074                 mov     ecx, [ebp+dwCreationDisposition]
.text:00000077                 push    ecx             ; hTemplateFile
.text:00000078                 push    0               ; dwFlagsAndAttributes
.text:0000007A                 mov     edx, [ebp+dwShareMode]
.text:0000007D                 push    edx             ; dwCreationDisposition
.text:0000007E                 mov     eax, [ebp+dwDesiredAccess]
.text:00000081                 push    eax             ; lpSecurityAttributes
.text:00000082                 mov     ecx, [ebp+lpFileName]
.text:00000085                 push    ecx             ; dwShareMode
.text:00000086                 lea     edx, [ebp+var_1C]
.text:00000089                 push    edx             ; dwDesiredAccess
.text:0000008A                 call    ?fs2fas@@YG?AVAString@@PB_W@Z ; fs2fas(wchar_t const *)
.text:0000008F                 mov     [ebp+var_20], eax
.text:00000092                 mov     eax, [ebp+var_20]
.text:00000095                 mov     [ebp+var_24], eax
.text:00000098                 mov     [ebp+var_4], 0
.text:0000009F                 mov     ecx, [ebp+var_24]
.text:000000A2                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:000000A7                 push    eax             ; lpFileName
.text:000000A8                 call    dword ptr ds:__imp__CreateFileA@28 ; CreateFileA(x,x,x,x,x,x,x)
.text:000000AE                 cmp     esi, esp
.text:000000B0                 call    __RTC_CheckEsp
.text:000000B5                 mov     ecx, [ebp+var_10]
.text:000000B8                 mov     [ecx], eax
.text:000000BA                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000000C1                 lea     ecx, [ebp+var_1C] ; this
.text:000000C4                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:000000C9                 jmp     short loc_F7
.text:000000CB ; ---------------------------------------------------------------------------
.text:000000CB
.text:000000CB loc_CB:                                 ; CODE XREF: NWindows::NFile::NIO::CFileBase::Create(wchar_t const *,ulong,ulong,ulong,ulong)+66j
.text:000000CB                 mov     esi, esp
.text:000000CD                 push    0               ; hTemplateFile
.text:000000CF                 mov     edx, [ebp+dwFlagsAndAttributes]
.text:000000D2                 push    edx             ; dwFlagsAndAttributes
.text:000000D3                 mov     eax, [ebp+dwCreationDisposition]
.text:000000D6                 push    eax             ; dwCreationDisposition
.text:000000D7                 push    0               ; lpSecurityAttributes
.text:000000D9                 mov     ecx, [ebp+dwShareMode]
.text:000000DC                 push    ecx             ; dwShareMode
.text:000000DD                 mov     edx, [ebp+dwDesiredAccess]
.text:000000E0                 push    edx             ; dwDesiredAccess
.text:000000E1                 mov     eax, [ebp+lpFileName]
.text:000000E4                 push    eax             ; lpFileName
.text:000000E5                 call    dword ptr ds:__imp__CreateFileW@28 ; CreateFileW(x,x,x,x,x,x,x)
.text:000000EB                 cmp     esi, esp
.text:000000ED                 call    __RTC_CheckEsp
.text:000000F2                 mov     ecx, [ebp+var_10]
.text:000000F5                 mov     [ecx], eax
.text:000000F7
.text:000000F7 loc_F7:                                 ; CODE XREF: NWindows::NFile::NIO::CFileBase::Create(wchar_t const *,ulong,ulong,ulong,ulong)+C5j
.text:000000F7                 mov     edx, [ebp+var_10]
.text:000000FA                 xor     eax, eax
.text:000000FC                 cmp     dword ptr [edx], 0FFFFFFFFh
.text:000000FF                 setnz   al
.text:00000102
.text:00000102 loc_102:                                ; CODE XREF: NWindows::NFile::NIO::CFileBase::Create(wchar_t const *,ulong,ulong,ulong,ulong)+51j
.text:00000102                 mov     ecx, [ebp+var_C]
.text:00000105                 mov     large fs:0, ecx
.text:0000010C                 pop     ecx
.text:0000010D                 pop     esi
.text:0000010E                 add     esp, 24h
.text:00000111                 cmp     ebp, esp
.text:00000113                 call    __RTC_CheckEsp
.text:00000118                 mov     esp, ebp
.text:0000011A                 pop     ebp
.text:0000011B                 retn    14h
.text:0000011B ?Create@CFileBase@NIO@NFile@NWindows@@IAE_NPB_WKKKK@Z endp
.text:0000011B
.text:0000011B ; ---------------------------------------------------------------------------
.text:0000011E                 db 6 dup(0CCh)
.text:00000124
.text:00000124 ; =============== S U B R O U T I N E =======================================
.text:00000124
.text:00000124 ; Attributes: bp-based frame
.text:00000124
.text:00000124 ; bool __thiscall NWindows::NFile::NIO::CFileBase::Close(NWindows::NFile::NIO::CFileBase *__hidden this)
.text:00000124                 public ?Close@CFileBase@NIO@NFile@NWindows@@QAE_NXZ
.text:00000124 ?Close@CFileBase@NIO@NFile@NWindows@@QAE_NXZ proc near
.text:00000124                                         ; CODE XREF: NWindows::NFile::NIO::CFileBase::Create(wchar_t const *,ulong,ulong,ulong,ulong)+43p
.text:00000124
.text:00000124 var_4           = dword ptr -4
.text:00000124
.text:00000124                 push    ebp
.text:00000125                 mov     ebp, esp
.text:00000127                 push    ecx
.text:00000128                 push    esi
.text:00000129                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000130                 mov     [ebp+var_4], ecx
.text:00000133                 mov     eax, [ebp+var_4]
.text:00000136                 cmp     dword ptr [eax], 0FFFFFFFFh
.text:00000139                 jnz     short loc_13F
.text:0000013B                 mov     al, 1
.text:0000013D                 jmp     short loc_167
.text:0000013F ; ---------------------------------------------------------------------------
.text:0000013F
.text:0000013F loc_13F:                                ; CODE XREF: NWindows::NFile::NIO::CFileBase::Close(void)+15j
.text:0000013F                 mov     esi, esp
.text:00000141                 mov     ecx, [ebp+var_4]
.text:00000144                 mov     edx, [ecx]
.text:00000146                 push    edx             ; hObject
.text:00000147                 call    dword ptr ds:__imp__CloseHandle@4 ; CloseHandle(x)
.text:0000014D                 cmp     esi, esp
.text:0000014F                 call    __RTC_CheckEsp
.text:00000154                 test    eax, eax
.text:00000156                 jnz     short loc_15C
.text:00000158                 xor     al, al
.text:0000015A                 jmp     short loc_167
.text:0000015C ; ---------------------------------------------------------------------------
.text:0000015C
.text:0000015C loc_15C:                                ; CODE XREF: NWindows::NFile::NIO::CFileBase::Close(void)+32j
.text:0000015C                 mov     eax, [ebp+var_4]
.text:0000015F                 mov     dword ptr [eax], 0FFFFFFFFh
.text:00000165                 mov     al, 1
.text:00000167
.text:00000167 loc_167:                                ; CODE XREF: NWindows::NFile::NIO::CFileBase::Close(void)+19j
.text:00000167                                         ; NWindows::NFile::NIO::CFileBase::Close(void)+36j
.text:00000167                 pop     esi
.text:00000168                 add     esp, 4
.text:0000016B                 cmp     ebp, esp
.text:0000016D                 call    __RTC_CheckEsp
.text:00000172                 mov     esp, ebp
.text:00000174                 pop     ebp
.text:00000175                 retn
.text:00000175 ?Close@CFileBase@NIO@NFile@NWindows@@QAE_NXZ endp
.text:00000175
.text:00000175 ; ---------------------------------------------------------------------------
.text:00000176                 db 0Eh dup(0CCh)
.text:00000184
.text:00000184 ; =============== S U B R O U T I N E =======================================
.text:00000184
.text:00000184 ; Attributes: bp-based frame
.text:00000184
.text:00000184 ; bool __thiscall NWindows::NFile::NIO::CFileBase::GetPosition(NWindows::NFile::NIO::CFileBase *this, unsigned __int64 *)
.text:00000184                 public ?GetPosition@CFileBase@NIO@NFile@NWindows@@QBE_NAA_K@Z
.text:00000184 ?GetPosition@CFileBase@NIO@NFile@NWindows@@QBE_NAA_K@Z proc near
.text:00000184
.text:00000184 var_4           = dword ptr -4
.text:00000184 arg_0           = dword ptr  8
.text:00000184
.text:00000184                 push    ebp
.text:00000185                 mov     ebp, esp
.text:00000187                 push    ecx
.text:00000188                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000018F                 mov     [ebp+var_4], ecx
.text:00000192                 mov     eax, [ebp+arg_0]
.text:00000195                 push    eax
.text:00000196                 push    (offset _kChunkSizeMax+1) ; unsigned __int64 *
.text:00000198                 push    0               ; dwMoveMethod
.text:0000019A                 push    0               ; lDistanceToMove
.text:0000019C                 mov     ecx, [ebp+var_4] ; this
.text:0000019F                 call    ?Seek@CFileBase@NIO@NFile@NWindows@@QBE_N_JKAA_K@Z ; NWindows::NFile::NIO::CFileBase::Seek(__int64,ulong,unsigned __int64 &)
.text:000001A4                 add     esp, 4
.text:000001A7                 cmp     ebp, esp
.text:000001A9                 call    __RTC_CheckEsp
.text:000001AE                 mov     esp, ebp
.text:000001B0                 pop     ebp
.text:000001B1                 retn    4
.text:000001B1 ?GetPosition@CFileBase@NIO@NFile@NWindows@@QBE_NAA_K@Z endp
.text:000001B1
.text:000001B4
.text:000001B4 ; =============== S U B R O U T I N E =======================================
.text:000001B4
.text:000001B4 ; Attributes: bp-based frame
.text:000001B4
.text:000001B4 ; bool __thiscall NWindows::NFile::NIO::CFileBase::GetLength(NWindows::NFile::NIO::CFileBase *this, unsigned __int64 *)
.text:000001B4                 public ?GetLength@CFileBase@NIO@NFile@NWindows@@QBE_NAA_K@Z
.text:000001B4 ?GetLength@CFileBase@NIO@NFile@NWindows@@QBE_NAA_K@Z proc near
.text:000001B4
.text:000001B4 var_14          = dword ptr -14h
.text:000001B4 var_10          = dword ptr -10h
.text:000001B4 FileSizeHigh    = dword ptr -0Ch
.text:000001B4 var_8           = dword ptr -8
.text:000001B4 var_4           = dword ptr -4
.text:000001B4 arg_0           = dword ptr  8
.text:000001B4
.text:000001B4                 push    ebp
.text:000001B5                 mov     ebp, esp
.text:000001B7                 sub     esp, 14h
.text:000001BA                 push    esi
.text:000001BB                 mov     eax, 0CCCCCCCCh
.text:000001C0                 mov     [ebp+var_14], eax
.text:000001C3                 mov     [ebp+var_10], eax
.text:000001C6                 mov     [ebp+FileSizeHigh], eax
.text:000001C9                 mov     [ebp+var_8], eax
.text:000001CC                 mov     [ebp+var_4], eax
.text:000001CF                 mov     [ebp+var_4], ecx
.text:000001D2                 mov     eax, [ebp+var_4]
.text:000001D5                 movzx   ecx, byte ptr [eax+4]
.text:000001D9                 test    ecx, ecx
.text:000001DB                 jz      short loc_1FD
.text:000001DD                 mov     edx, [ebp+var_4]
.text:000001E0                 movzx   eax, byte ptr [edx+5]
.text:000001E4                 test    eax, eax
.text:000001E6                 jz      short loc_1FD
.text:000001E8                 mov     ecx, [ebp+arg_0]
.text:000001EB                 mov     edx, [ebp+var_4]
.text:000001EE                 mov     eax, [edx+8]
.text:000001F1                 mov     [ecx], eax
.text:000001F3                 mov     edx, [edx+0Ch]
.text:000001F6                 mov     [ecx+4], edx
.text:000001F9                 mov     al, 1
.text:000001FB                 jmp     short loc_255
.text:000001FD ; ---------------------------------------------------------------------------
.text:000001FD
.text:000001FD loc_1FD:                                ; CODE XREF: NWindows::NFile::NIO::CFileBase::GetLength(unsigned __int64 &)+27j
.text:000001FD                                         ; NWindows::NFile::NIO::CFileBase::GetLength(unsigned __int64 &)+32j
.text:000001FD                 mov     esi, esp
.text:000001FF                 lea     eax, [ebp+FileSizeHigh]
.text:00000202                 push    eax             ; lpFileSizeHigh
.text:00000203                 mov     ecx, [ebp+var_4]
.text:00000206                 mov     edx, [ecx]
.text:00000208                 push    edx             ; hFile
.text:00000209                 call    dword ptr ds:__imp__GetFileSize@8 ; GetFileSize(x,x)
.text:0000020F                 cmp     esi, esp
.text:00000211                 call    __RTC_CheckEsp
.text:00000216                 mov     [ebp+var_14], eax
.text:00000219                 cmp     [ebp+var_14], 0FFFFFFFFh
.text:0000021D                 jnz     short loc_236
.text:0000021F                 mov     esi, esp
.text:00000221                 call    dword ptr ds:__imp__GetLastError@0 ; GetLastError()
.text:00000227                 cmp     esi, esp
.text:00000229                 call    __RTC_CheckEsp
.text:0000022E                 test    eax, eax
.text:00000230                 jz      short loc_236
.text:00000232                 xor     al, al
.text:00000234                 jmp     short loc_255
.text:00000236 ; ---------------------------------------------------------------------------
.text:00000236
.text:00000236 loc_236:                                ; CODE XREF: NWindows::NFile::NIO::CFileBase::GetLength(unsigned __int64 &)+69j
.text:00000236                                         ; NWindows::NFile::NIO::CFileBase::GetLength(unsigned __int64 &)+7Cj
.text:00000236                 mov     eax, [ebp+FileSizeHigh]
.text:00000239                 xor     edx, edx
.text:0000023B                 mov     cl, 20h ; ' '
.text:0000023D                 call    __allshl
.text:00000242                 mov     ecx, [ebp+var_14]
.text:00000245                 xor     esi, esi
.text:00000247                 add     eax, ecx
.text:00000249                 adc     edx, esi
.text:0000024B                 mov     ecx, [ebp+arg_0]
.text:0000024E                 mov     [ecx], eax
.text:00000250                 mov     [ecx+4], edx
.text:00000253                 mov     al, 1
.text:00000255
.text:00000255 loc_255:                                ; CODE XREF: NWindows::NFile::NIO::CFileBase::GetLength(unsigned __int64 &)+47j
.text:00000255                                         ; NWindows::NFile::NIO::CFileBase::GetLength(unsigned __int64 &)+80j
.text:00000255                 push    edx
.text:00000256                 mov     ecx, ebp
.text:00000258                 push    eax
.text:00000259                 lea     edx, $LN8
.text:0000025F                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000264                 pop     eax
.text:00000265                 pop     edx
.text:00000266                 pop     esi
.text:00000267                 add     esp, 14h
.text:0000026A                 cmp     ebp, esp
.text:0000026C                 call    __RTC_CheckEsp
.text:00000271                 mov     esp, ebp
.text:00000273                 pop     ebp
.text:00000274                 retn    4
.text:00000274 ?GetLength@CFileBase@NIO@NFile@NWindows@@QBE_NAA_K@Z endp
.text:00000274
.text:00000274 ; ---------------------------------------------------------------------------
.text:00000277                 align 4
.text:00000278 $LN8            dd 1                    ; DATA XREF: NWindows::NFile::NIO::CFileBase::GetLength(unsigned __int64 &)+A5o
.text:0000027C                 dd offset $LN7
.text:00000280 $LN7            dd 0FFFFFFF4h, 4        ; DATA XREF: .text:0000027Co
.text:00000288                 dd offset $LN6          ; "sizeHigh"
.text:0000028C $LN6            db 'sizeHigh',0         ; DATA XREF: .text:00000288o
.text:00000295                 db 0Fh dup(0CCh)
.text:000002A4
.text:000002A4 ; =============== S U B R O U T I N E =======================================
.text:000002A4
.text:000002A4 ; Attributes: bp-based frame
.text:000002A4
.text:000002A4 ; bool __thiscall NWindows::NFile::NIO::CFileBase::Seek(NWindows::NFile::NIO::CFileBase *this, LONG lDistanceToMove, DWORD dwMoveMethod, unsigned __int64 *)
.text:000002A4                 public ?Seek@CFileBase@NIO@NFile@NWindows@@QBE_N_JKAA_K@Z
.text:000002A4 ?Seek@CFileBase@NIO@NFile@NWindows@@QBE_N_JKAA_K@Z proc near
.text:000002A4                                         ; CODE XREF: NWindows::NFile::NIO::CFileBase::GetPosition(unsigned __int64 &)+1Bp
.text:000002A4                                         ; NWindows::NFile::NIO::CFileBase::Seek(unsigned __int64,unsigned __int64 &)+1Fp ...
.text:000002A4
.text:000002A4 var_14          = dword ptr -14h
.text:000002A4 var_10          = dword ptr -10h
.text:000002A4 DistanceToMoveHigh= dword ptr -0Ch
.text:000002A4 var_8           = dword ptr -8
.text:000002A4 var_4           = dword ptr -4
.text:000002A4 lDistanceToMove = dword ptr  8
.text:000002A4 arg_4           = dword ptr  0Ch
.text:000002A4 dwMoveMethod    = dword ptr  10h
.text:000002A4 arg_C           = dword ptr  14h
.text:000002A4
.text:000002A4                 push    ebp
.text:000002A5                 mov     ebp, esp
.text:000002A7                 sub     esp, 14h
.text:000002AA                 push    esi
.text:000002AB                 mov     eax, 0CCCCCCCCh
.text:000002B0                 mov     [ebp+var_14], eax
.text:000002B3                 mov     [ebp+var_10], eax
.text:000002B6                 mov     [ebp+DistanceToMoveHigh], eax
.text:000002B9                 mov     [ebp+var_8], eax
.text:000002BC                 mov     [ebp+var_4], eax
.text:000002BF                 mov     [ebp+var_4], ecx
.text:000002C2                 mov     eax, [ebp+var_4]
.text:000002C5                 movzx   ecx, byte ptr [eax+4]
.text:000002C9                 test    ecx, ecx
.text:000002CB                 jz      short loc_2FA
.text:000002CD                 mov     edx, [ebp+var_4]
.text:000002D0                 movzx   eax, byte ptr [edx+5]
.text:000002D4                 test    eax, eax
.text:000002D6                 jz      short loc_2FA
.text:000002D8                 cmp     [ebp+dwMoveMethod], 2
.text:000002DC                 jnz     short loc_2FA
.text:000002DE                 mov     ecx, [ebp+var_4]
.text:000002E1                 mov     edx, [ebp+lDistanceToMove]
.text:000002E4                 add     edx, [ecx+8]
.text:000002E7                 mov     eax, [ebp+arg_4]
.text:000002EA                 adc     eax, [ecx+0Ch]
.text:000002ED                 mov     [ebp+lDistanceToMove], edx
.text:000002F0                 mov     [ebp+arg_4], eax
.text:000002F3                 mov     [ebp+dwMoveMethod], 0
.text:000002FA
.text:000002FA loc_2FA:                                ; CODE XREF: NWindows::NFile::NIO::CFileBase::Seek(__int64,ulong,unsigned __int64 &)+27j
.text:000002FA                                         ; NWindows::NFile::NIO::CFileBase::Seek(__int64,ulong,unsigned __int64 &)+32j ...
.text:000002FA                 mov     eax, [ebp+lDistanceToMove]
.text:000002FD                 mov     edx, [ebp+arg_4]
.text:00000300                 mov     cl, 20h ; ' '
.text:00000302                 call    __allshr
.text:00000307                 mov     [ebp+DistanceToMoveHigh], eax
.text:0000030A                 mov     esi, esp
.text:0000030C                 mov     ecx, [ebp+dwMoveMethod]
.text:0000030F                 push    ecx             ; dwMoveMethod
.text:00000310                 lea     edx, [ebp+DistanceToMoveHigh]
.text:00000313                 push    edx             ; lpDistanceToMoveHigh
.text:00000314                 mov     eax, [ebp+lDistanceToMove]
.text:00000317                 mov     ecx, [ebp+arg_4]
.text:0000031A                 and     ecx, 0
.text:0000031D                 push    eax             ; lDistanceToMove
.text:0000031E                 mov     edx, [ebp+var_4]
.text:00000321                 mov     eax, [edx]
.text:00000323                 push    eax             ; hFile
.text:00000324                 call    dword ptr ds:__imp__SetFilePointer@16 ; SetFilePointer(x,x,x,x)
.text:0000032A                 cmp     esi, esp
.text:0000032C                 call    __RTC_CheckEsp
.text:00000331                 mov     [ebp+var_14], eax
.text:00000334                 cmp     [ebp+var_14], 0FFFFFFFFh
.text:00000338                 jnz     short loc_351
.text:0000033A                 mov     esi, esp
.text:0000033C                 call    dword ptr ds:__imp__GetLastError@0 ; GetLastError()
.text:00000342                 cmp     esi, esp
.text:00000344                 call    __RTC_CheckEsp
.text:00000349                 test    eax, eax
.text:0000034B                 jz      short loc_351
.text:0000034D                 xor     al, al
.text:0000034F                 jmp     short loc_370
.text:00000351 ; ---------------------------------------------------------------------------
.text:00000351
.text:00000351 loc_351:                                ; CODE XREF: NWindows::NFile::NIO::CFileBase::Seek(__int64,ulong,unsigned __int64 &)+94j
.text:00000351                                         ; NWindows::NFile::NIO::CFileBase::Seek(__int64,ulong,unsigned __int64 &)+A7j
.text:00000351                 mov     eax, [ebp+DistanceToMoveHigh]
.text:00000354                 xor     edx, edx
.text:00000356                 mov     cl, 20h ; ' '
.text:00000358                 call    __allshl
.text:0000035D                 mov     ecx, [ebp+var_14]
.text:00000360                 xor     esi, esi
.text:00000362                 add     eax, ecx
.text:00000364                 adc     edx, esi
.text:00000366                 mov     ecx, [ebp+arg_C]
.text:00000369                 mov     [ecx], eax
.text:0000036B                 mov     [ecx+4], edx
.text:0000036E                 mov     al, 1
.text:00000370
.text:00000370 loc_370:                                ; CODE XREF: NWindows::NFile::NIO::CFileBase::Seek(__int64,ulong,unsigned __int64 &)+ABj
.text:00000370                 push    edx
.text:00000371                 mov     ecx, ebp
.text:00000373                 push    eax
.text:00000374                 lea     edx, $LN8_0
.text:0000037A                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000037F                 pop     eax
.text:00000380                 pop     edx
.text:00000381                 pop     esi
.text:00000382                 add     esp, 14h
.text:00000385                 cmp     ebp, esp
.text:00000387                 call    __RTC_CheckEsp
.text:0000038C                 mov     esp, ebp
.text:0000038E                 pop     ebp
.text:0000038F                 retn    10h
.text:0000038F ?Seek@CFileBase@NIO@NFile@NWindows@@QBE_N_JKAA_K@Z endp
.text:0000038F
.text:0000038F ; ---------------------------------------------------------------------------
.text:00000392                 align 4
.text:00000394 $LN8_0          dd 1                    ; DATA XREF: NWindows::NFile::NIO::CFileBase::Seek(__int64,ulong,unsigned __int64 &)+D0o
.text:00000398                 dd offset $LN7_0
.text:0000039C $LN7_0          dd 0FFFFFFF4h, 4        ; DATA XREF: .text:00000398o
.text:000003A4                 dd offset $LN6_0        ; "high"
.text:000003A8 $LN6_0          db 'high',0             ; DATA XREF: .text:000003A4o
.text:000003AD                 db 7 dup(0CCh)
.text:000003B4
.text:000003B4 ; =============== S U B R O U T I N E =======================================
.text:000003B4
.text:000003B4 ; Attributes: bp-based frame
.text:000003B4
.text:000003B4 ; bool __thiscall NWindows::NFile::NIO::CFileBase::Seek(NWindows::NFile::NIO::CFileBase *this, LONG lDistanceToMove, unsigned __int64 *)
.text:000003B4                 public ?Seek@CFileBase@NIO@NFile@NWindows@@QBE_N_KAA_K@Z
.text:000003B4 ?Seek@CFileBase@NIO@NFile@NWindows@@QBE_N_KAA_K@Z proc near
.text:000003B4                                         ; CODE XREF: NWindows::NFile::NIO::CFileBase::SeekToBegin(void)+28p
.text:000003B4                                         ; NWindows::NFile::NIO::CInFile::CorrectDeviceSize(void)+3Fp ...
.text:000003B4
.text:000003B4 var_4           = dword ptr -4
.text:000003B4 lDistanceToMove = dword ptr  8
.text:000003B4 dwMoveMethod    = dword ptr  0Ch
.text:000003B4 arg_8           = dword ptr  10h
.text:000003B4
.text:000003B4                 push    ebp
.text:000003B5                 mov     ebp, esp
.text:000003B7                 push    ecx
.text:000003B8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000003BF                 mov     [ebp+var_4], ecx
.text:000003C2                 mov     eax, [ebp+arg_8]
.text:000003C5                 push    eax
.text:000003C6                 push    0               ; unsigned __int64 *
.text:000003C8                 mov     ecx, [ebp+dwMoveMethod]
.text:000003CB                 push    ecx             ; dwMoveMethod
.text:000003CC                 mov     edx, [ebp+lDistanceToMove]
.text:000003CF                 push    edx             ; lDistanceToMove
.text:000003D0                 mov     ecx, [ebp+var_4] ; this
.text:000003D3                 call    ?Seek@CFileBase@NIO@NFile@NWindows@@QBE_N_JKAA_K@Z ; NWindows::NFile::NIO::CFileBase::Seek(__int64,ulong,unsigned __int64 &)
.text:000003D8                 add     esp, 4
.text:000003DB                 cmp     ebp, esp
.text:000003DD                 call    __RTC_CheckEsp
.text:000003E2                 mov     esp, ebp
.text:000003E4                 pop     ebp
.text:000003E5                 retn    0Ch
.text:000003E5 ?Seek@CFileBase@NIO@NFile@NWindows@@QBE_N_KAA_K@Z endp
.text:000003E5
.text:000003E5 ; ---------------------------------------------------------------------------
.text:000003E8                 db 0Ch dup(0CCh)
.text:000003F4
.text:000003F4 ; =============== S U B R O U T I N E =======================================
.text:000003F4
.text:000003F4 ; Attributes: bp-based frame
.text:000003F4
.text:000003F4 ; bool __thiscall NWindows::NFile::NIO::CFileBase::SeekToBegin(NWindows::NFile::NIO::CFileBase *__hidden this)
.text:000003F4                 public ?SeekToBegin@CFileBase@NIO@NFile@NWindows@@QBE_NXZ
.text:000003F4 ?SeekToBegin@CFileBase@NIO@NFile@NWindows@@QBE_NXZ proc near
.text:000003F4                                         ; CODE XREF: NWindows::NFile::NIO::CInFile::CalcDeviceSize(wchar_t const *)+23Fp
.text:000003F4
.text:000003F4 var_14          = dword ptr -14h
.text:000003F4 var_10          = dword ptr -10h
.text:000003F4 var_C           = dword ptr -0Ch
.text:000003F4 var_8           = dword ptr -8
.text:000003F4 var_4           = dword ptr -4
.text:000003F4
.text:000003F4                 push    ebp
.text:000003F5                 mov     ebp, esp
.text:000003F7                 sub     esp, 14h
.text:000003FA                 mov     eax, 0CCCCCCCCh
.text:000003FF                 mov     [ebp+var_14], eax
.text:00000402                 mov     [ebp+var_10], eax
.text:00000405                 mov     [ebp+var_C], eax
.text:00000408                 mov     [ebp+var_8], eax
.text:0000040B                 mov     [ebp+var_4], eax
.text:0000040E                 mov     [ebp+var_4], ecx
.text:00000411                 lea     eax, [ebp+var_10]
.text:00000414                 push    eax
.text:00000415                 push    0               ; unsigned __int64 *
.text:00000417                 push    0               ; lDistanceToMove
.text:00000419                 mov     ecx, [ebp+var_4] ; this
.text:0000041C                 call    ?Seek@CFileBase@NIO@NFile@NWindows@@QBE_N_KAA_K@Z ; NWindows::NFile::NIO::CFileBase::Seek(unsigned __int64,unsigned __int64 &)
.text:00000421                 push    edx
.text:00000422                 mov     ecx, ebp
.text:00000424                 push    eax
.text:00000425                 lea     edx, $LN5
.text:0000042B                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000430                 pop     eax
.text:00000431                 pop     edx
.text:00000432                 add     esp, 14h
.text:00000435                 cmp     ebp, esp
.text:00000437                 call    __RTC_CheckEsp
.text:0000043C                 mov     esp, ebp
.text:0000043E                 pop     ebp
.text:0000043F                 retn
.text:0000043F ?SeekToBegin@CFileBase@NIO@NFile@NWindows@@QBE_NXZ endp
.text:0000043F
.text:0000043F ; ---------------------------------------------------------------------------
.text:00000440 $LN5            dd 1                    ; DATA XREF: NWindows::NFile::NIO::CFileBase::SeekToBegin(void)+31o
.text:00000444                 dd offset $LN4
.text:00000448 $LN4            dd 0FFFFFFF0h, 8        ; DATA XREF: .text:00000444o
.text:00000450                 dd offset $LN3          ; "newPosition"
.text:00000454 $LN3            db 'newPosition',0      ; DATA XREF: .text:00000450o
.text:00000460                 db 4 dup(0CCh)
.text:00000464
.text:00000464 ; =============== S U B R O U T I N E =======================================
.text:00000464
.text:00000464 ; Attributes: bp-based frame
.text:00000464
.text:00000464 ; bool __thiscall NWindows::NFile::NIO::CFileBase::SeekToEnd(NWindows::NFile::NIO::CFileBase *this, unsigned __int64 *)
.text:00000464                 public ?SeekToEnd@CFileBase@NIO@NFile@NWindows@@QBE_NAA_K@Z
.text:00000464 ?SeekToEnd@CFileBase@NIO@NFile@NWindows@@QBE_NAA_K@Z proc near
.text:00000464
.text:00000464 var_4           = dword ptr -4
.text:00000464 arg_0           = dword ptr  8
.text:00000464
.text:00000464                 push    ebp
.text:00000465                 mov     ebp, esp
.text:00000467                 push    ecx
.text:00000468                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000046F                 mov     [ebp+var_4], ecx
.text:00000472                 mov     eax, [ebp+arg_0]
.text:00000475                 push    eax
.text:00000476                 push    (offset _kChunkSizeMax+2) ; unsigned __int64 *
.text:00000478                 push    0               ; dwMoveMethod
.text:0000047A                 push    0               ; lDistanceToMove
.text:0000047C                 mov     ecx, [ebp+var_4] ; this
.text:0000047F                 call    ?Seek@CFileBase@NIO@NFile@NWindows@@QBE_N_JKAA_K@Z ; NWindows::NFile::NIO::CFileBase::Seek(__int64,ulong,unsigned __int64 &)
.text:00000484                 add     esp, 4
.text:00000487                 cmp     ebp, esp
.text:00000489                 call    __RTC_CheckEsp
.text:0000048E                 mov     esp, ebp
.text:00000490                 pop     ebp
.text:00000491                 retn    4
.text:00000491 ?SeekToEnd@CFileBase@NIO@NFile@NWindows@@QBE_NAA_K@Z endp
.text:00000491
.text:00000494
.text:00000494 ; =============== S U B R O U T I N E =======================================
.text:00000494
.text:00000494 ; Attributes: bp-based frame
.text:00000494
.text:00000494 ; void __thiscall NWindows::NFile::NIO::CInFile::CorrectDeviceSize(NWindows::NFile::NIO::CInFile *__hidden this)
.text:00000494                 public ?CorrectDeviceSize@CInFile@NIO@NFile@NWindows@@AAEXXZ
.text:00000494 ?CorrectDeviceSize@CInFile@NIO@NFile@NWindows@@AAEXXZ proc near
.text:00000494                                         ; CODE XREF: NWindows::NFile::NIO::CInFile::CalcDeviceSize(wchar_t const *)+237p
.text:00000494
.text:00000494 var_3C          = byte ptr -3Ch
.text:00000494 var_38          = dword ptr -38h
.text:00000494 var_2C          = dword ptr -2Ch
.text:00000494 var_21          = byte ptr -21h
.text:00000494 lpBuffer        = dword ptr -20h
.text:00000494 var_18          = byte ptr -18h
.text:00000494 lDistanceToMove = dword ptr -0Ch
.text:00000494 var_8           = dword ptr -8
.text:00000494 var_4           = dword ptr -4
.text:00000494
.text:00000494                 push    ebp
.text:00000495                 mov     ebp, esp
.text:00000497                 sub     esp, 3Ch
.text:0000049A                 push    edi
.text:0000049B                 push    ecx
.text:0000049C                 lea     edi, [ebp+var_3C]
.text:0000049F                 mov     ecx, 0Fh
.text:000004A4                 mov     eax, 0CCCCCCCCh
.text:000004A9                 rep stosd
.text:000004AB                 pop     ecx
.text:000004AC                 mov     [ebp+var_4], ecx
.text:000004AF                 mov     eax, [ebp+var_4]
.text:000004B2                 mov     ecx, [eax+8]
.text:000004B5                 and     ecx, 0FFFFC000h
.text:000004BB                 mov     edx, [eax+0Ch]
.text:000004BE                 mov     [ebp+lDistanceToMove], ecx
.text:000004C1                 mov     [ebp+var_8], edx
.text:000004C4                 lea     eax, [ebp+var_18]
.text:000004C7                 push    eax
.text:000004C8                 mov     ecx, [ebp+var_8]
.text:000004CB                 push    ecx             ; unsigned __int64 *
.text:000004CC                 mov     edx, [ebp+lDistanceToMove]
.text:000004CF                 push    edx             ; lDistanceToMove
.text:000004D0                 mov     ecx, [ebp+var_4] ; this
.text:000004D3                 call    ?Seek@CFileBase@NIO@NFile@NWindows@@QBE_N_KAA_K@Z ; NWindows::NFile::NIO::CFileBase::Seek(unsigned __int64,unsigned __int64 &)
.text:000004D8                 movzx   eax, al
.text:000004DB                 test    eax, eax
.text:000004DD                 jnz     short loc_4E4
.text:000004DF                 jmp     loc_62E
.text:000004E4 ; ---------------------------------------------------------------------------
.text:000004E4
.text:000004E4 loc_4E4:                                ; CODE XREF: NWindows::NFile::NIO::CInFile::CorrectDeviceSize(void)+49j
.text:000004E4                 push    4000h
.text:000004E9                 call    _MidAlloc@4     ; MidAlloc(x)
.text:000004EE                 mov     [ebp+lpBuffer], eax
.text:000004F1                 mov     [ebp+var_21], 1
.text:000004F5
.text:000004F5 loc_4F5:                                ; CODE XREF: NWindows::NFile::NIO::CInFile::CorrectDeviceSize(void)+C6j
.text:000004F5                 mov     [ebp+var_2C], 0
.text:000004FC                 lea     ecx, [ebp+var_2C]
.text:000004FF                 push    ecx             ; unsigned int *
.text:00000500                 push    4000h           ; nNumberOfBytesToRead
.text:00000505                 mov     edx, [ebp+lpBuffer]
.text:00000508                 push    edx             ; lpBuffer
.text:00000509                 mov     ecx, [ebp+var_4] ; this
.text:0000050C                 call    ?Read1@CInFile@NIO@NFile@NWindows@@QAE_NPAXIAAI@Z ; NWindows::NFile::NIO::CInFile::Read1(void *,uint,uint &)
.text:00000511                 movzx   eax, al
.text:00000514                 test    eax, eax
.text:00000516                 jnz     short loc_51A
.text:00000518                 jmp     short loc_55C
.text:0000051A ; ---------------------------------------------------------------------------
.text:0000051A
.text:0000051A loc_51A:                                ; CODE XREF: NWindows::NFile::NIO::CInFile::CorrectDeviceSize(void)+82j
.text:0000051A                 cmp     [ebp+var_2C], 0
.text:0000051E                 jnz     short loc_522
.text:00000520                 jmp     short loc_55C
.text:00000522 ; ---------------------------------------------------------------------------
.text:00000522
.text:00000522 loc_522:                                ; CODE XREF: NWindows::NFile::NIO::CInFile::CorrectDeviceSize(void)+8Aj
.text:00000522                 mov     [ebp+var_21], 0
.text:00000526                 mov     ecx, [ebp+var_2C]
.text:00000529                 xor     edx, edx
.text:0000052B                 add     ecx, [ebp+lDistanceToMove]
.text:0000052E                 adc     edx, [ebp+var_8]
.text:00000531                 mov     eax, [ebp+var_4]
.text:00000534                 mov     [eax+8], ecx
.text:00000537                 mov     [eax+0Ch], edx
.text:0000053A                 cmp     [ebp+var_2C], 4000h
.text:00000541                 jz      short loc_545
.text:00000543                 jmp     short loc_55C
.text:00000545 ; ---------------------------------------------------------------------------
.text:00000545
.text:00000545 loc_545:                                ; CODE XREF: NWindows::NFile::NIO::CInFile::CorrectDeviceSize(void)+ADj
.text:00000545                 mov     ecx, [ebp+lDistanceToMove]
.text:00000548                 add     ecx, 4000h
.text:0000054E                 mov     edx, [ebp+var_8]
.text:00000551                 adc     edx, 0
.text:00000554                 mov     [ebp+lDistanceToMove], ecx
.text:00000557                 mov     [ebp+var_8], edx
.text:0000055A                 jmp     short loc_4F5
.text:0000055C ; ---------------------------------------------------------------------------
.text:0000055C
.text:0000055C loc_55C:                                ; CODE XREF: NWindows::NFile::NIO::CInFile::CorrectDeviceSize(void)+84j
.text:0000055C                                         ; NWindows::NFile::NIO::CInFile::CorrectDeviceSize(void)+8Cj ...
.text:0000055C                 movzx   eax, [ebp+var_21]
.text:00000560                 test    eax, eax
.text:00000562                 jz      loc_625
.text:00000568                 mov     ecx, [ebp+lDistanceToMove]
.text:0000056B                 or      ecx, [ebp+var_8]
.text:0000056E                 jz      loc_625
.text:00000574                 mov     edx, [ebp+lDistanceToMove]
.text:00000577                 sub     edx, 4000h
.text:0000057D                 mov     eax, [ebp+var_8]
.text:00000580                 sbb     eax, 0
.text:00000583                 mov     [ebp+lDistanceToMove], edx
.text:00000586                 mov     [ebp+var_8], eax
.text:00000589
.text:00000589 loc_589:                                ; CODE XREF: NWindows::NFile::NIO::CInFile::CorrectDeviceSize(void)+18Cj
.text:00000589                 lea     ecx, [ebp+var_18]
.text:0000058C                 push    ecx
.text:0000058D                 mov     edx, [ebp+var_8]
.text:00000590                 push    edx             ; unsigned __int64 *
.text:00000591                 mov     eax, [ebp+lDistanceToMove]
.text:00000594                 push    eax             ; lDistanceToMove
.text:00000595                 mov     ecx, [ebp+var_4] ; this
.text:00000598                 call    ?Seek@CFileBase@NIO@NFile@NWindows@@QBE_N_KAA_K@Z ; NWindows::NFile::NIO::CFileBase::Seek(unsigned __int64,unsigned __int64 &)
.text:0000059D                 movzx   ecx, al
.text:000005A0                 test    ecx, ecx
.text:000005A2                 jnz     short loc_5A6
.text:000005A4                 jmp     short loc_625
.text:000005A6 ; ---------------------------------------------------------------------------
.text:000005A6
.text:000005A6 loc_5A6:                                ; CODE XREF: NWindows::NFile::NIO::CInFile::CorrectDeviceSize(void)+10Ej
.text:000005A6                 cmp     [ebp+lpBuffer], 0
.text:000005AA                 jnz     short loc_5C1
.text:000005AC                 push    4000h
.text:000005B1                 call    _MidAlloc@4     ; MidAlloc(x)
.text:000005B6                 mov     [ebp+lpBuffer], eax
.text:000005B9                 cmp     [ebp+lpBuffer], 0
.text:000005BD                 jnz     short loc_5C1
.text:000005BF                 jmp     short loc_625
.text:000005C1 ; ---------------------------------------------------------------------------
.text:000005C1
.text:000005C1 loc_5C1:                                ; CODE XREF: NWindows::NFile::NIO::CInFile::CorrectDeviceSize(void)+116j
.text:000005C1                                         ; NWindows::NFile::NIO::CInFile::CorrectDeviceSize(void)+129j
.text:000005C1                 mov     [ebp+var_38], 0
.text:000005C8                 lea     edx, [ebp+var_38]
.text:000005CB                 push    edx             ; unsigned int *
.text:000005CC                 push    4000h           ; nNumberOfBytesToRead
.text:000005D1                 mov     eax, [ebp+lpBuffer]
.text:000005D4                 push    eax             ; lpBuffer
.text:000005D5                 mov     ecx, [ebp+var_4] ; this
.text:000005D8                 call    ?Read1@CInFile@NIO@NFile@NWindows@@QAE_NPAXIAAI@Z ; NWindows::NFile::NIO::CInFile::Read1(void *,uint,uint &)
.text:000005DD                 movzx   ecx, al
.text:000005E0                 test    ecx, ecx
.text:000005E2                 jnz     short loc_5E6
.text:000005E4                 jmp     short loc_625
.text:000005E6 ; ---------------------------------------------------------------------------
.text:000005E6
.text:000005E6 loc_5E6:                                ; CODE XREF: NWindows::NFile::NIO::CInFile::CorrectDeviceSize(void)+14Ej
.text:000005E6                 cmp     [ebp+var_38], 0
.text:000005EA                 jz      short loc_602
.text:000005EC                 mov     edx, [ebp+var_38]
.text:000005EF                 xor     eax, eax
.text:000005F1                 add     edx, [ebp+lDistanceToMove]
.text:000005F4                 adc     eax, [ebp+var_8]
.text:000005F7                 mov     ecx, [ebp+var_4]
.text:000005FA                 mov     [ecx+8], edx
.text:000005FD                 mov     [ecx+0Ch], eax
.text:00000600                 jmp     short loc_625
.text:00000602 ; ---------------------------------------------------------------------------
.text:00000602
.text:00000602 loc_602:                                ; CODE XREF: NWindows::NFile::NIO::CInFile::CorrectDeviceSize(void)+156j
.text:00000602                 mov     edx, [ebp+lDistanceToMove]
.text:00000605                 or      edx, [ebp+var_8]
.text:00000608                 jnz     short loc_60C
.text:0000060A                 jmp     short loc_625
.text:0000060C ; ---------------------------------------------------------------------------
.text:0000060C
.text:0000060C loc_60C:                                ; CODE XREF: NWindows::NFile::NIO::CInFile::CorrectDeviceSize(void)+174j
.text:0000060C                 mov     eax, [ebp+lDistanceToMove]
.text:0000060F                 sub     eax, 4000h
.text:00000614                 mov     ecx, [ebp+var_8]
.text:00000617                 sbb     ecx, 0
.text:0000061A                 mov     [ebp+lDistanceToMove], eax
.text:0000061D                 mov     [ebp+var_8], ecx
.text:00000620                 jmp     loc_589
.text:00000625 ; ---------------------------------------------------------------------------
.text:00000625
.text:00000625 loc_625:                                ; CODE XREF: NWindows::NFile::NIO::CInFile::CorrectDeviceSize(void)+CEj
.text:00000625                                         ; NWindows::NFile::NIO::CInFile::CorrectDeviceSize(void)+DAj ...
.text:00000625                 mov     edx, [ebp+lpBuffer]
.text:00000628                 push    edx
.text:00000629                 call    _MidFree@4      ; MidFree(x)
.text:0000062E
.text:0000062E loc_62E:                                ; CODE XREF: NWindows::NFile::NIO::CInFile::CorrectDeviceSize(void)+4Bj
.text:0000062E                 push    edx
.text:0000062F                 mov     ecx, ebp
.text:00000631                 push    eax
.text:00000632                 lea     edx, $LN22
.text:00000638                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000063D                 pop     eax
.text:0000063E                 pop     edx
.text:0000063F                 pop     edi
.text:00000640                 add     esp, 3Ch
.text:00000643                 cmp     ebp, esp
.text:00000645                 call    __RTC_CheckEsp
.text:0000064A                 mov     esp, ebp
.text:0000064C                 pop     ebp
.text:0000064D                 retn
.text:0000064D ?CorrectDeviceSize@CInFile@NIO@NFile@NWindows@@AAEXXZ endp
.text:0000064D
.text:0000064D ; ---------------------------------------------------------------------------
.text:0000064E                 align 10h
.text:00000650 $LN22           dd 3                    ; DATA XREF: NWindows::NFile::NIO::CInFile::CorrectDeviceSize(void)+19Eo
.text:00000654                 dd offset $LN21
.text:00000658 $LN21           dd 0FFFFFFE8h, 8        ; DATA XREF: .text:00000654o
.text:00000660                 dd offset $LN18         ; "realNewPosition"
.text:00000664                 dd 0FFFFFFD4h, 4
.text:0000066C                 dd offset $LN19         ; "processed"
.text:00000670                 dd 0FFFFFFC8h, 4
.text:00000678                 dd offset $LN20         ; "processed"
.text:0000067C $LN20           db 'processed',0        ; DATA XREF: .text:00000678o
.text:00000686 $LN19           db 'processed',0        ; DATA XREF: .text:0000066Co
.text:00000690 $LN18           db 'realNewPosition',0  ; DATA XREF: .text:00000660o
.text:000006A0                 db 4 dup(0CCh)
.text:000006A4
.text:000006A4 ; =============== S U B R O U T I N E =======================================
.text:000006A4
.text:000006A4 ; Attributes: bp-based frame
.text:000006A4
.text:000006A4 ; void __thiscall NWindows::NFile::NIO::CInFile::CalcDeviceSize(NWindows::NFile::NIO::CInFile *__hidden this, const wchar_t *)
.text:000006A4                 public ?CalcDeviceSize@CInFile@NIO@NFile@NWindows@@AAEXPB_W@Z
.text:000006A4 ?CalcDeviceSize@CInFile@NIO@NFile@NWindows@@AAEXPB_W@Z proc near
.text:000006A4                                         ; CODE XREF: NWindows::NFile::NIO::CInFile::Open(wchar_t const *,ulong,ulong,ulong)+4Dp
.text:000006A4
.text:000006A4 var_C8          = dword ptr -0C8h
.text:000006A4 var_C0          = _DISK_GEOMETRY ptr -0C0h
.text:000006A4 var_A0          = byte ptr -0A0h
.text:000006A4 var_88          = dword ptr -88h
.text:000006A4 var_84          = dword ptr -84h
.text:000006A4 var_70          = qword ptr -70h
.text:000006A4 var_60          = qword ptr -60h
.text:000006A4 var_50          = word ptr -50h
.text:000006A4 var_40          = word ptr -40h
.text:000006A4 var_3E          = word ptr -3Eh
.text:000006A4 var_3C          = word ptr -3Ch
.text:000006A4 var_3A          = word ptr -3Ah
.text:000006A4 var_31          = byte ptr -31h
.text:000006A4 var_2C          = _PARTITION_INFORMATION ptr -2Ch
.text:000006A4 var_8           = dword ptr -8
.text:000006A4 var_4           = dword ptr -4
.text:000006A4 arg_0           = dword ptr  8
.text:000006A4
.text:000006A4                 push    ebp
.text:000006A5                 mov     ebp, esp
.text:000006A7                 sub     esp, 0C8h
.text:000006AD                 push    esi
.text:000006AE                 push    edi             ; unsigned __int64 *
.text:000006AF                 push    ecx
.text:000006B0                 lea     edi, [ebp+var_C8]
.text:000006B6                 mov     ecx, 32h ; '2'
.text:000006BB                 mov     eax, 0CCCCCCCCh
.text:000006C0                 rep stosd
.text:000006C2                 pop     ecx
.text:000006C3                 mov     eax, dword ptr ds:___security_cookie
.text:000006C8                 xor     eax, ebp
.text:000006CA                 mov     [ebp+var_4], eax
.text:000006CD                 mov     [ebp+var_8], ecx
.text:000006D0                 mov     eax, [ebp+var_8]
.text:000006D3                 mov     byte ptr [eax+5], 0
.text:000006D7                 mov     ecx, [ebp+var_8]
.text:000006DA                 mov     dword ptr [ecx+8], 0
.text:000006E1                 mov     dword ptr [ecx+0Ch], 0
.text:000006E8                 mov     edx, [ebp+var_8]
.text:000006EB                 cmp     dword ptr [edx], 0FFFFFFFFh
.text:000006EE                 jz      short loc_6FB
.text:000006F0                 mov     eax, [ebp+var_8]
.text:000006F3                 movzx   ecx, byte ptr [eax+4]
.text:000006F7                 test    ecx, ecx
.text:000006F9                 jnz     short loc_700
.text:000006FB
.text:000006FB loc_6FB:                                ; CODE XREF: NWindows::NFile::NIO::CInFile::CalcDeviceSize(wchar_t const *)+4Aj
.text:000006FB                 jmp     loc_8E8
.text:00000700 ; ---------------------------------------------------------------------------
.text:00000700
.text:00000700 loc_700:                                ; CODE XREF: NWindows::NFile::NIO::CInFile::CalcDeviceSize(wchar_t const *)+55j
.text:00000700                 mov     [ebp+var_31], 1
.text:00000704                 lea     edx, [ebp+var_2C]
.text:00000707                 push    edx             ; struct _PARTITION_INFORMATION *
.text:00000708                 mov     ecx, [ebp+var_8] ; this
.text:0000070B                 call    ?GetPartitionInfo@CInFile@NIO@NFile@NWindows@@AAE_NPAU_PARTITION_INFORMATION@@@Z ; NWindows::NFile::NIO::CInFile::GetPartitionInfo(_PARTITION_INFORMATION *)
.text:00000710                 movzx   eax, al
.text:00000713                 test    eax, eax
.text:00000715                 jz      loc_7D7
.text:0000071B                 mov     ecx, [ebp+var_8]
.text:0000071E                 mov     edx, dword ptr [ebp+var_2C.PartitionLength]
.text:00000721                 mov     [ecx+8], edx
.text:00000724                 mov     eax, dword ptr [ebp+var_2C.PartitionLength+4]
.text:00000727                 mov     [ecx+0Ch], eax
.text:0000072A                 mov     ecx, [ebp+var_8]
.text:0000072D                 mov     byte ptr [ecx+5], 1
.text:00000731                 mov     [ebp+var_31], 0
.text:00000735                 mov     edx, [ebp+arg_0]
.text:00000738                 movzx   eax, word ptr [edx]
.text:0000073B                 cmp     eax, 5Ch ; '\'
.text:0000073E                 jnz     loc_7D7
.text:00000744                 mov     ecx, [ebp+arg_0]
.text:00000747                 movzx   edx, word ptr [ecx+2]
.text:0000074B                 cmp     edx, 5Ch ; '\'
.text:0000074E                 jnz     loc_7D7
.text:00000754                 mov     eax, [ebp+arg_0]
.text:00000757                 movzx   ecx, word ptr [eax+4]
.text:0000075B                 cmp     ecx, 2Eh ; '.'
.text:0000075E                 jnz     short loc_7D7
.text:00000760                 mov     edx, [ebp+arg_0]
.text:00000763                 movzx   eax, word ptr [edx+6]
.text:00000767                 cmp     eax, 5Ch ; '\'
.text:0000076A                 jnz     short loc_7D7
.text:0000076C                 mov     ecx, [ebp+arg_0]
.text:0000076F                 movzx   edx, word ptr [ecx+0Ah]
.text:00000773                 cmp     edx, 3Ah ; ':'
.text:00000776                 jnz     short loc_7D7
.text:00000778                 mov     eax, [ebp+arg_0]
.text:0000077B                 movzx   ecx, word ptr [eax+0Ch]
.text:0000077F                 test    ecx, ecx
.text:00000781                 jnz     short loc_7D7
.text:00000783                 mov     edx, [ebp+arg_0]
.text:00000786                 mov     ax, [edx+8]
.text:0000078A                 mov     [ebp+var_40], ax
.text:0000078E                 mov     ecx, 3Ah ; ':'
.text:00000793                 mov     [ebp+var_3E], cx
.text:00000797                 mov     edx, 5Ch ; '\'
.text:0000079C                 mov     [ebp+var_3C], dx
.text:000007A0                 xor     eax, eax
.text:000007A2                 mov     [ebp+var_3A], ax
.text:000007A6                 lea     ecx, [ebp+var_70]
.text:000007A9                 push    ecx             ; unsigned __int64 *
.text:000007AA                 lea     edx, [ebp+var_60]
.text:000007AD                 push    edx             ; unsigned __int64 *
.text:000007AE                 lea     eax, [ebp+var_50]
.text:000007B1                 push    eax             ; wchar_t *
.text:000007B2                 lea     ecx, [ebp+var_40]
.text:000007B5                 push    ecx             ; this
.text:000007B6                 call    ?MyGetDiskFreeSpace@NSystem@NFile@NWindows@@YG_NPB_WAA_K11@Z ; NWindows::NFile::NSystem::MyGetDiskFreeSpace(wchar_t const *,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &)
.text:000007BB                 movzx   edx, al
.text:000007BE                 test    edx, edx
.text:000007C0                 jz      short loc_7D3
.text:000007C2                 mov     eax, [ebp+var_8]
.text:000007C5                 mov     ecx, dword ptr [ebp+var_60]
.text:000007C8                 mov     [eax+8], ecx
.text:000007CB                 mov     edx, dword ptr [ebp+var_60+4]
.text:000007CE                 mov     [eax+0Ch], edx
.text:000007D1                 jmp     short loc_7D7
.text:000007D3 ; ---------------------------------------------------------------------------
.text:000007D3
.text:000007D3 loc_7D3:                                ; CODE XREF: NWindows::NFile::NIO::CInFile::CalcDeviceSize(wchar_t const *)+11Cj
.text:000007D3                 mov     [ebp+var_31], 1
.text:000007D7
.text:000007D7 loc_7D7:                                ; CODE XREF: NWindows::NFile::NIO::CInFile::CalcDeviceSize(wchar_t const *)+71j
.text:000007D7                                         ; NWindows::NFile::NIO::CInFile::CalcDeviceSize(wchar_t const *)+9Aj ...
.text:000007D7                 mov     eax, [ebp+var_8]
.text:000007DA                 movzx   ecx, byte ptr [eax+5]
.text:000007DE                 test    ecx, ecx
.text:000007E0                 jnz     loc_8A8
.text:000007E6                 lea     edx, [ebp+var_A0]
.text:000007EC                 push    edx             ; struct NWindows::NFile::NIO::my_DISK_GEOMETRY_EX *
.text:000007ED                 mov     ecx, [ebp+var_8] ; this
.text:000007F0                 call    ?GetGeometryEx@CInFile@NIO@NFile@NWindows@@ABE_NPAUmy_DISK_GEOMETRY_EX@234@@Z ; NWindows::NFile::NIO::CInFile::GetGeometryEx(NWindows::NFile::NIO::my_DISK_GEOMETRY_EX *)
.text:000007F5                 mov     ecx, [ebp+var_8]
.text:000007F8                 mov     [ecx+5], al
.text:000007FB                 mov     edx, [ebp+var_8]
.text:000007FE                 movzx   eax, byte ptr [edx+5]
.text:00000802                 test    eax, eax
.text:00000804                 jz      short loc_820
.text:00000806                 mov     ecx, [ebp+var_8]
.text:00000809                 mov     edx, [ebp+var_88]
.text:0000080F                 mov     [ecx+8], edx
.text:00000812                 mov     eax, [ebp+var_84]
.text:00000818                 mov     [ecx+0Ch], eax
.text:0000081B                 jmp     loc_8A8
.text:00000820 ; ---------------------------------------------------------------------------
.text:00000820
.text:00000820 loc_820:                                ; CODE XREF: NWindows::NFile::NIO::CInFile::CalcDeviceSize(wchar_t const *)+160j
.text:00000820                 lea     ecx, [ebp+var_C0]
.text:00000826                 push    ecx             ; struct _DISK_GEOMETRY *
.text:00000827                 mov     ecx, [ebp+var_8] ; this
.text:0000082A                 call    ?GetGeometry@CInFile@NIO@NFile@NWindows@@ABE_NPAU_DISK_GEOMETRY@@@Z ; NWindows::NFile::NIO::CInFile::GetGeometry(_DISK_GEOMETRY *)
.text:0000082F                 mov     edx, [ebp+var_8]
.text:00000832                 mov     [edx+5], al
.text:00000835                 mov     eax, [ebp+var_8]
.text:00000838                 movzx   ecx, byte ptr [eax+5]
.text:0000083C                 test    ecx, ecx
.text:0000083E                 jnz     short loc_855
.text:00000840                 lea     edx, [ebp+var_C0]
.text:00000846                 push    edx             ; struct _DISK_GEOMETRY *
.text:00000847                 mov     ecx, [ebp+var_8] ; this
.text:0000084A                 call    ?GetCdRomGeometry@CInFile@NIO@NFile@NWindows@@ABE_NPAU_DISK_GEOMETRY@@@Z ; NWindows::NFile::NIO::CInFile::GetCdRomGeometry(_DISK_GEOMETRY *)
.text:0000084F                 mov     ecx, [ebp+var_8]
.text:00000852                 mov     [ecx+5], al
.text:00000855
.text:00000855 loc_855:                                ; CODE XREF: NWindows::NFile::NIO::CInFile::CalcDeviceSize(wchar_t const *)+19Aj
.text:00000855                 mov     edx, [ebp+var_8]
.text:00000858                 movzx   eax, byte ptr [edx+5]
.text:0000085C                 test    eax, eax
.text:0000085E                 jz      short loc_8A8
.text:00000860                 mov     ecx, [ebp+var_C0.TracksPerCylinder]
.text:00000866                 xor     edx, edx
.text:00000868                 push    edx
.text:00000869                 push    ecx
.text:0000086A                 mov     eax, dword ptr [ebp+var_C0.Cylinders+4]
.text:00000870                 push    eax
.text:00000871                 mov     ecx, dword ptr [ebp+var_C0.Cylinders]
.text:00000877                 push    ecx
.text:00000878                 call    __allmul
.text:0000087D                 mov     ecx, [ebp+var_C0.SectorsPerTrack]
.text:00000883                 xor     esi, esi
.text:00000885                 push    esi
.text:00000886                 push    ecx
.text:00000887                 push    edx
.text:00000888                 push    eax
.text:00000889                 call    __allmul
.text:0000088E                 mov     ecx, [ebp+var_C0.BytesPerSector]
.text:00000894                 xor     esi, esi
.text:00000896                 push    esi
.text:00000897                 push    ecx
.text:00000898                 push    edx
.text:00000899                 push    eax
.text:0000089A                 call    __allmul
.text:0000089F                 mov     ecx, [ebp+var_8]
.text:000008A2                 mov     [ecx+8], eax
.text:000008A5                 mov     [ecx+0Ch], edx
.text:000008A8
.text:000008A8 loc_8A8:                                ; CODE XREF: NWindows::NFile::NIO::CInFile::CalcDeviceSize(wchar_t const *)+13Cj
.text:000008A8                                         ; NWindows::NFile::NIO::CInFile::CalcDeviceSize(wchar_t const *)+177j ...
.text:000008A8                 movzx   edx, [ebp+var_31]
.text:000008AC                 test    edx, edx
.text:000008AE                 jz      short loc_8E8
.text:000008B0                 mov     eax, [ebp+var_8]
.text:000008B3                 movzx   ecx, byte ptr [eax+5]
.text:000008B7                 test    ecx, ecx
.text:000008B9                 jz      short loc_8E8
.text:000008BB                 mov     edx, [ebp+var_8]
.text:000008BE                 mov     [ebp+var_C8], edx
.text:000008C4                 mov     eax, [ebp+var_C8]
.text:000008CA                 mov     ecx, [ebp+var_C8]
.text:000008D0                 mov     edx, [eax+8]
.text:000008D3                 or      edx, [ecx+0Ch]
.text:000008D6                 jz      short loc_8E8
.text:000008D8                 mov     ecx, [ebp+var_8] ; this
.text:000008DB                 call    ?CorrectDeviceSize@CInFile@NIO@NFile@NWindows@@AAEXXZ ; NWindows::NFile::NIO::CInFile::CorrectDeviceSize(void)
.text:000008E0                 mov     ecx, [ebp+var_8] ; this
.text:000008E3                 call    ?SeekToBegin@CFileBase@NIO@NFile@NWindows@@QBE_NXZ ; NWindows::NFile::NIO::CFileBase::SeekToBegin(void)
.text:000008E8
.text:000008E8 loc_8E8:                                ; CODE XREF: NWindows::NFile::NIO::CInFile::CalcDeviceSize(wchar_t const *):loc_6FBj
.text:000008E8                                         ; NWindows::NFile::NIO::CInFile::CalcDeviceSize(wchar_t const *)+20Aj ...
.text:000008E8                 push    edx
.text:000008E9                 mov     ecx, ebp
.text:000008EB                 push    eax
.text:000008EC                 lea     edx, $LN23
.text:000008F2                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000008F7                 pop     eax
.text:000008F8                 pop     edx
.text:000008F9                 pop     edi
.text:000008FA                 pop     esi
.text:000008FB                 mov     ecx, [ebp+var_4]
.text:000008FE                 xor     ecx, ebp
.text:00000900                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000905                 add     esp, 0C8h
.text:0000090B                 cmp     ebp, esp
.text:0000090D                 call    __RTC_CheckEsp
.text:00000912                 mov     esp, ebp
.text:00000914                 pop     ebp
.text:00000915                 retn    4
.text:00000915 ?CalcDeviceSize@CInFile@NIO@NFile@NWindows@@AAEXPB_W@Z endp ; sp-analysis failed
.text:00000915
.text:00000915 ; ---------------------------------------------------------------------------
.text:00000918 $LN23           dd 7                    ; DATA XREF: NWindows::NFile::NIO::CInFile::CalcDeviceSize(wchar_t const *)+248o
.text:0000091C                 dd offset $LN22_0
.text:00000920 $LN22_0         dd 0FFFFFFD4h, 20h      ; DATA XREF: .text:0000091Co
.text:00000928                 dd offset $LN15         ; "partInfo"
.text:0000092C                 dd 0FFFFFFC0h, 8
.text:00000934                 dd offset $LN16         ; "path"
.text:00000938                 dd 0FFFFFFB0h, 8
.text:00000940                 dd offset $LN17         ; "clusterSize"
.text:00000944                 dd 0FFFFFFA0h, 8
.text:0000094C                 dd offset $LN18_0       ; "totalSize"
.text:00000950                 db 90h
.text:00000951                 db 3 dup(0FFh)
.text:00000954                 dd 8
.text:00000958                 dd offset $LN19_0       ; "freeSize"
.text:0000095C                 dd 0FFFFFF60h, 28h
.text:00000964                 dd offset $LN20_0       ; "geomEx"
.text:00000968                 dd 0FFFFFF40h, 18h
.text:00000970                 dd offset $LN21_0       ; "geom"
.text:00000974 $LN21_0         db 'geom',0             ; DATA XREF: .text:00000970o
.text:00000979 $LN20_0         db 'geomEx',0           ; DATA XREF: .text:00000964o
.text:00000980 $LN19_0         db 'freeSize',0         ; DATA XREF: .text:00000958o
.text:00000989 $LN18_0         db 'totalSize',0        ; DATA XREF: .text:0000094Co
.text:00000993 $LN17           db 'clusterSize',0      ; DATA XREF: .text:00000940o
.text:0000099F $LN16           db 'path',0             ; DATA XREF: .text:00000934o
.text:000009A4 $LN15           db 'partInfo',0         ; DATA XREF: .text:00000928o
.text:000009AD                 db 7 dup(0CCh)
.text:000009B4
.text:000009B4 ; =============== S U B R O U T I N E =======================================
.text:000009B4
.text:000009B4 ; Attributes: bp-based frame
.text:000009B4
.text:000009B4 ; bool __thiscall NWindows::NFile::NIO::CInFile::Open(NWindows::NFile::NIO::CInFile *this, LPCWSTR lpFileName, DWORD dwShareMode, DWORD dwCreationDisposition, unsigned __int32)
.text:000009B4                 public ?Open@CInFile@NIO@NFile@NWindows@@QAE_NPB_WKKK@Z
.text:000009B4 ?Open@CInFile@NIO@NFile@NWindows@@QAE_NPB_WKKK@Z proc near
.text:000009B4                                         ; CODE XREF: NWindows::NFile::NIO::CInFile::OpenShared(wchar_t const *,bool)+2Bp
.text:000009B4
.text:000009B4 var_8           = dword ptr -8
.text:000009B4 var_4           = dword ptr -4
.text:000009B4 lpFileName      = dword ptr  8
.text:000009B4 dwShareMode     = dword ptr  0Ch
.text:000009B4 dwCreationDisposition= dword ptr  10h
.text:000009B4 arg_C           = dword ptr  14h
.text:000009B4
.text:000009B4                 push    ebp
.text:000009B5                 mov     ebp, esp
.text:000009B7                 sub     esp, 8
.text:000009BA                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000009C1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000009C8                 mov     [ebp+var_4], ecx
.text:000009CB                 mov     eax, [ebp+arg_C]
.text:000009CE                 push    eax             ; unsigned __int32
.text:000009CF                 mov     ecx, [ebp+dwCreationDisposition]
.text:000009D2                 push    ecx             ; dwCreationDisposition
.text:000009D3                 mov     edx, [ebp+dwShareMode]
.text:000009D6                 push    edx             ; dwShareMode
.text:000009D7                 push    80000000h       ; dwDesiredAccess
.text:000009DC                 mov     eax, [ebp+lpFileName]
.text:000009DF                 push    eax             ; lpFileName
.text:000009E0                 mov     ecx, [ebp+var_4] ; this
.text:000009E3                 call    ?Create@CFileBase@NIO@NFile@NWindows@@IAE_NPB_WKKKK@Z ; NWindows::NFile::NIO::CFileBase::Create(wchar_t const *,ulong,ulong,ulong,ulong)
.text:000009E8                 mov     byte ptr [ebp+var_8+3], al
.text:000009EB                 mov     ecx, [ebp+lpFileName]
.text:000009EE                 push    ecx             ; this
.text:000009EF                 call    ?IsDevicePath@NName@NFile@NWindows@@YG_NPB_W@Z ; NWindows::NFile::NName::IsDevicePath(wchar_t const *)
.text:000009F4                 mov     edx, [ebp+var_4]
.text:000009F7                 mov     [edx+4], al
.text:000009FA                 mov     eax, [ebp+lpFileName]
.text:000009FD                 push    eax             ; wchar_t *
.text:000009FE                 mov     ecx, [ebp+var_4] ; this
.text:00000A01                 call    ?CalcDeviceSize@CInFile@NIO@NFile@NWindows@@AAEXPB_W@Z ; NWindows::NFile::NIO::CInFile::CalcDeviceSize(wchar_t const *)
.text:00000A06                 mov     al, byte ptr [ebp+var_8+3]
.text:00000A09                 add     esp, 8
.text:00000A0C                 cmp     ebp, esp
.text:00000A0E                 call    __RTC_CheckEsp
.text:00000A13                 mov     esp, ebp
.text:00000A15                 pop     ebp
.text:00000A16                 retn    10h
.text:00000A16 ?Open@CInFile@NIO@NFile@NWindows@@QAE_NPB_WKKK@Z endp
.text:00000A16
.text:00000A16 ; ---------------------------------------------------------------------------
.text:00000A19                 db 0Bh dup(0CCh)
.text:00000A24
.text:00000A24 ; =============== S U B R O U T I N E =======================================
.text:00000A24
.text:00000A24 ; Attributes: bp-based frame
.text:00000A24
.text:00000A24 ; bool __thiscall NWindows::NFile::NIO::CInFile::OpenShared(NWindows::NFile::NIO::CInFile *this, LPCWSTR lpFileName, bool)
.text:00000A24                 public ?OpenShared@CInFile@NIO@NFile@NWindows@@QAE_NPB_W_N@Z
.text:00000A24 ?OpenShared@CInFile@NIO@NFile@NWindows@@QAE_NPB_W_N@Z proc near
.text:00000A24                                         ; CODE XREF: NWindows::NFile::NIO::CInFile::Open(wchar_t const *)+17p
.text:00000A24
.text:00000A24 var_4           = dword ptr -4
.text:00000A24 lpFileName      = dword ptr  8
.text:00000A24 arg_4           = byte ptr  0Ch
.text:00000A24
.text:00000A24                 push    ebp
.text:00000A25                 mov     ebp, esp
.text:00000A27                 push    ecx
.text:00000A28                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000A2F                 mov     [ebp+var_4], ecx
.text:00000A32                 push    80h ; 'Ç'       ; unsigned __int32
.text:00000A37                 push    3               ; dwCreationDisposition
.text:00000A39                 movzx   eax, [ebp+arg_4]
.text:00000A3D                 neg     eax
.text:00000A3F                 sbb     eax, eax
.text:00000A41                 and     eax, 2
.text:00000A44                 or      eax, 1
.text:00000A47                 push    eax             ; dwShareMode
.text:00000A48                 mov     ecx, [ebp+lpFileName]
.text:00000A4B                 push    ecx             ; lpFileName
.text:00000A4C                 mov     ecx, [ebp+var_4] ; this
.text:00000A4F                 call    ?Open@CInFile@NIO@NFile@NWindows@@QAE_NPB_WKKK@Z ; NWindows::NFile::NIO::CInFile::Open(wchar_t const *,ulong,ulong,ulong)
.text:00000A54                 add     esp, 4
.text:00000A57                 cmp     ebp, esp
.text:00000A59                 call    __RTC_CheckEsp
.text:00000A5E                 mov     esp, ebp
.text:00000A60                 pop     ebp
.text:00000A61                 retn    8
.text:00000A61 ?OpenShared@CInFile@NIO@NFile@NWindows@@QAE_NPB_W_N@Z endp
.text:00000A61
.text:00000A64
.text:00000A64 ; =============== S U B R O U T I N E =======================================
.text:00000A64
.text:00000A64 ; Attributes: bp-based frame
.text:00000A64
.text:00000A64 ; bool __thiscall NWindows::NFile::NIO::CInFile::Open(NWindows::NFile::NIO::CInFile *this, const wchar_t *)
.text:00000A64                 public ?Open@CInFile@NIO@NFile@NWindows@@QAE_NPB_W@Z
.text:00000A64 ?Open@CInFile@NIO@NFile@NWindows@@QAE_NPB_W@Z proc near
.text:00000A64
.text:00000A64 var_4           = dword ptr -4
.text:00000A64 lpFileName      = dword ptr  8
.text:00000A64
.text:00000A64                 push    ebp
.text:00000A65                 mov     ebp, esp
.text:00000A67                 push    ecx
.text:00000A68                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000A6F                 mov     [ebp+var_4], ecx
.text:00000A72                 push    0               ; bool
.text:00000A74                 mov     eax, [ebp+lpFileName]
.text:00000A77                 push    eax             ; lpFileName
.text:00000A78                 mov     ecx, [ebp+var_4] ; this
.text:00000A7B                 call    ?OpenShared@CInFile@NIO@NFile@NWindows@@QAE_NPB_W_N@Z ; NWindows::NFile::NIO::CInFile::OpenShared(wchar_t const *,bool)
.text:00000A80                 add     esp, 4
.text:00000A83                 cmp     ebp, esp
.text:00000A85                 call    __RTC_CheckEsp
.text:00000A8A                 mov     esp, ebp
.text:00000A8C                 pop     ebp
.text:00000A8D                 retn    4
.text:00000A8D ?Open@CInFile@NIO@NFile@NWindows@@QAE_NPB_W@Z endp
.text:00000A8D
.text:00000A8D ; ---------------------------------------------------------------------------
.text:00000A90                 db 4 dup(0CCh)
.text:00000A94
.text:00000A94 ; =============== S U B R O U T I N E =======================================
.text:00000A94
.text:00000A94 ; Attributes: bp-based frame
.text:00000A94
.text:00000A94 ; bool __thiscall NWindows::NFile::NIO::CInFile::Read1(NWindows::NFile::NIO::CInFile *this, void *lpBuffer, DWORD nNumberOfBytesToRead, unsigned int *)
.text:00000A94                 public ?Read1@CInFile@NIO@NFile@NWindows@@QAE_NPAXIAAI@Z
.text:00000A94 ?Read1@CInFile@NIO@NFile@NWindows@@QAE_NPAXIAAI@Z proc near
.text:00000A94                                         ; CODE XREF: NWindows::NFile::NIO::CInFile::CorrectDeviceSize(void)+78p
.text:00000A94                                         ; NWindows::NFile::NIO::CInFile::CorrectDeviceSize(void)+144p ...
.text:00000A94
.text:00000A94 var_14          = dword ptr -14h
.text:00000A94 var_10          = dword ptr -10h
.text:00000A94 NumberOfBytesRead= dword ptr -0Ch
.text:00000A94 var_8           = dword ptr -8
.text:00000A94 var_4           = dword ptr -4
.text:00000A94 lpBuffer        = dword ptr  8
.text:00000A94 nNumberOfBytesToRead= dword ptr  0Ch
.text:00000A94 arg_8           = dword ptr  10h
.text:00000A94
.text:00000A94                 push    ebp
.text:00000A95                 mov     ebp, esp
.text:00000A97                 sub     esp, 14h
.text:00000A9A                 push    esi
.text:00000A9B                 mov     eax, 0CCCCCCCCh
.text:00000AA0                 mov     [ebp+var_14], eax
.text:00000AA3                 mov     [ebp+var_10], eax
.text:00000AA6                 mov     [ebp+NumberOfBytesRead], eax
.text:00000AA9                 mov     [ebp+var_8], eax
.text:00000AAC                 mov     [ebp+var_4], eax
.text:00000AAF                 mov     [ebp+var_4], ecx
.text:00000AB2                 mov     [ebp+NumberOfBytesRead], 0
.text:00000AB9                 mov     esi, esp
.text:00000ABB                 push    0               ; lpOverlapped
.text:00000ABD                 lea     eax, [ebp+NumberOfBytesRead]
.text:00000AC0                 push    eax             ; lpNumberOfBytesRead
.text:00000AC1                 mov     ecx, [ebp+nNumberOfBytesToRead]
.text:00000AC4                 push    ecx             ; nNumberOfBytesToRead
.text:00000AC5                 mov     edx, [ebp+lpBuffer]
.text:00000AC8                 push    edx             ; lpBuffer
.text:00000AC9                 mov     eax, [ebp+var_4]
.text:00000ACC                 mov     ecx, [eax]
.text:00000ACE                 push    ecx             ; hFile
.text:00000ACF                 call    dword ptr ds:__imp__ReadFile@20 ; ReadFile(x,x,x,x,x)
.text:00000AD5                 cmp     esi, esp
.text:00000AD7                 call    __RTC_CheckEsp
.text:00000ADC                 push    eax             ; int
.text:00000ADD                 call    ?BOOLToBool@@YG_NH@Z ; BOOLToBool(int)
.text:00000AE2                 mov     byte ptr [ebp+var_14+3], al
.text:00000AE5                 mov     edx, [ebp+arg_8]
.text:00000AE8                 mov     eax, [ebp+NumberOfBytesRead]
.text:00000AEB                 mov     [edx], eax
.text:00000AED                 mov     al, byte ptr [ebp+var_14+3]
.text:00000AF0                 push    edx
.text:00000AF1                 mov     ecx, ebp
.text:00000AF3                 push    eax
.text:00000AF4                 lea     edx, $LN5_1
.text:00000AFA                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000AFF                 pop     eax
.text:00000B00                 pop     edx
.text:00000B01                 pop     esi
.text:00000B02                 add     esp, 14h
.text:00000B05                 cmp     ebp, esp
.text:00000B07                 call    __RTC_CheckEsp
.text:00000B0C                 mov     esp, ebp
.text:00000B0E                 pop     ebp
.text:00000B0F                 retn    0Ch
.text:00000B0F ?Read1@CInFile@NIO@NFile@NWindows@@QAE_NPAXIAAI@Z endp
.text:00000B0F
.text:00000B0F ; ---------------------------------------------------------------------------
.text:00000B12                 align 4
.text:00000B14 $LN5_1          dd 1                    ; DATA XREF: NWindows::NFile::NIO::CInFile::Read1(void *,uint,uint &)+60o
.text:00000B18                 dd offset $LN4_1
.text:00000B1C $LN4_1          dd 0FFFFFFF4h, 4        ; DATA XREF: .text:00000B18o
.text:00000B24                 dd offset $LN3_1        ; "processedLoc"
.text:00000B28 $LN3_1          db 'processedLoc',0     ; DATA XREF: .text:00000B24o
.text:00000B35                 db 0Fh dup(0CCh)
.text:00000B44
.text:00000B44 ; =============== S U B R O U T I N E =======================================
.text:00000B44
.text:00000B44 ; Attributes: bp-based frame
.text:00000B44
.text:00000B44 ; bool __thiscall NWindows::NFile::NIO::CInFile::ReadPart(NWindows::NFile::NIO::CInFile *this, void *lpBuffer, DWORD nNumberOfBytesToRead, unsigned int *)
.text:00000B44                 public ?ReadPart@CInFile@NIO@NFile@NWindows@@QAE_NPAXIAAI@Z
.text:00000B44 ?ReadPart@CInFile@NIO@NFile@NWindows@@QAE_NPAXIAAI@Z proc near
.text:00000B44                                         ; CODE XREF: NWindows::NFile::NIO::CInFile::Read(void *,uint,uint &)+3Cp
.text:00000B44
.text:00000B44 var_4           = dword ptr -4
.text:00000B44 lpBuffer        = dword ptr  8
.text:00000B44 nNumberOfBytesToRead= dword ptr  0Ch
.text:00000B44 arg_8           = dword ptr  10h
.text:00000B44
.text:00000B44                 push    ebp
.text:00000B45                 mov     ebp, esp
.text:00000B47                 push    ecx
.text:00000B48                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000B4F                 mov     [ebp+var_4], ecx
.text:00000B52                 mov     eax, [ebp+nNumberOfBytesToRead]
.text:00000B55                 cmp     eax, _kChunkSizeMax
.text:00000B5B                 jbe     short loc_B66
.text:00000B5D                 mov     ecx, _kChunkSizeMax
.text:00000B63                 mov     [ebp+nNumberOfBytesToRead], ecx
.text:00000B66
.text:00000B66 loc_B66:                                ; CODE XREF: NWindows::NFile::NIO::CInFile::ReadPart(void *,uint,uint &)+17j
.text:00000B66                 mov     edx, [ebp+arg_8]
.text:00000B69                 push    edx             ; unsigned int *
.text:00000B6A                 mov     eax, [ebp+nNumberOfBytesToRead]
.text:00000B6D                 push    eax             ; nNumberOfBytesToRead
.text:00000B6E                 mov     ecx, [ebp+lpBuffer]
.text:00000B71                 push    ecx             ; lpBuffer
.text:00000B72                 mov     ecx, [ebp+var_4] ; this
.text:00000B75                 call    ?Read1@CInFile@NIO@NFile@NWindows@@QAE_NPAXIAAI@Z ; NWindows::NFile::NIO::CInFile::Read1(void *,uint,uint &)
.text:00000B7A                 add     esp, 4
.text:00000B7D                 cmp     ebp, esp
.text:00000B7F                 call    __RTC_CheckEsp
.text:00000B84                 mov     esp, ebp
.text:00000B86                 pop     ebp
.text:00000B87                 retn    0Ch
.text:00000B87 ?ReadPart@CInFile@NIO@NFile@NWindows@@QAE_NPAXIAAI@Z endp
.text:00000B87
.text:00000B87 ; ---------------------------------------------------------------------------
.text:00000B8A                 db 0Ah dup(0CCh)
.text:00000B94
.text:00000B94 ; =============== S U B R O U T I N E =======================================
.text:00000B94
.text:00000B94 ; Attributes: bp-based frame
.text:00000B94
.text:00000B94 ; bool __thiscall NWindows::NFile::NIO::CInFile::Read(NWindows::NFile::NIO::CInFile *this, void *lpBuffer, DWORD nNumberOfBytesToRead, unsigned int *)
.text:00000B94                 public ?Read@CInFile@NIO@NFile@NWindows@@QAE_NPAXIAAI@Z
.text:00000B94 ?Read@CInFile@NIO@NFile@NWindows@@QAE_NPAXIAAI@Z proc near
.text:00000B94
.text:00000B94 var_14          = dword ptr -14h
.text:00000B94 var_10          = dword ptr -10h
.text:00000B94 var_C           = dword ptr -0Ch
.text:00000B94 var_8           = dword ptr -8
.text:00000B94 var_4           = dword ptr -4
.text:00000B94 lpBuffer        = dword ptr  8
.text:00000B94 nNumberOfBytesToRead= dword ptr  0Ch
.text:00000B94 arg_8           = dword ptr  10h
.text:00000B94
.text:00000B94                 push    ebp
.text:00000B95                 mov     ebp, esp
.text:00000B97                 sub     esp, 14h
.text:00000B9A                 mov     eax, 0CCCCCCCCh
.text:00000B9F                 mov     [ebp+var_14], eax
.text:00000BA2                 mov     [ebp+var_10], eax
.text:00000BA5                 mov     [ebp+var_C], eax
.text:00000BA8                 mov     [ebp+var_8], eax
.text:00000BAB                 mov     [ebp+var_4], eax
.text:00000BAE                 mov     [ebp+var_4], ecx
.text:00000BB1                 mov     eax, [ebp+arg_8]
.text:00000BB4                 mov     dword ptr [eax], 0
.text:00000BBA
.text:00000BBA loc_BBA:                                ; CODE XREF: NWindows::NFile::NIO::CInFile::Read(void *,uint,uint &)+79j
.text:00000BBA                 mov     [ebp+var_C], 0
.text:00000BC1                 lea     ecx, [ebp+var_C]
.text:00000BC4                 push    ecx             ; unsigned int *
.text:00000BC5                 mov     edx, [ebp+nNumberOfBytesToRead]
.text:00000BC8                 push    edx             ; nNumberOfBytesToRead
.text:00000BC9                 mov     eax, [ebp+lpBuffer]
.text:00000BCC                 push    eax             ; lpBuffer
.text:00000BCD                 mov     ecx, [ebp+var_4] ; this
.text:00000BD0                 call    ?ReadPart@CInFile@NIO@NFile@NWindows@@QAE_NPAXIAAI@Z ; NWindows::NFile::NIO::CInFile::ReadPart(void *,uint,uint &)
.text:00000BD5                 mov     byte ptr [ebp+var_14+3], al
.text:00000BD8                 mov     ecx, [ebp+arg_8]
.text:00000BDB                 mov     edx, [ecx]
.text:00000BDD                 add     edx, [ebp+var_C]
.text:00000BE0                 mov     eax, [ebp+arg_8]
.text:00000BE3                 mov     [eax], edx
.text:00000BE5                 movzx   ecx, byte ptr [ebp+var_14+3]
.text:00000BE9                 test    ecx, ecx
.text:00000BEB                 jnz     short loc_BF1
.text:00000BED                 xor     al, al
.text:00000BEF                 jmp     short loc_C11
.text:00000BF1 ; ---------------------------------------------------------------------------
.text:00000BF1
.text:00000BF1 loc_BF1:                                ; CODE XREF: NWindows::NFile::NIO::CInFile::Read(void *,uint,uint &)+57j
.text:00000BF1                 cmp     [ebp+var_C], 0
.text:00000BF5                 jnz     short loc_BFB
.text:00000BF7                 mov     al, 1
.text:00000BF9                 jmp     short loc_C11
.text:00000BFB ; ---------------------------------------------------------------------------
.text:00000BFB
.text:00000BFB loc_BFB:                                ; CODE XREF: NWindows::NFile::NIO::CInFile::Read(void *,uint,uint &)+61j
.text:00000BFB                 mov     edx, [ebp+lpBuffer]
.text:00000BFE                 add     edx, [ebp+var_C]
.text:00000C01                 mov     [ebp+lpBuffer], edx
.text:00000C04                 mov     eax, [ebp+nNumberOfBytesToRead]
.text:00000C07                 sub     eax, [ebp+var_C]
.text:00000C0A                 mov     [ebp+nNumberOfBytesToRead], eax
.text:00000C0D                 jnz     short loc_BBA
.text:00000C0F                 mov     al, 1
.text:00000C11
.text:00000C11 loc_C11:                                ; CODE XREF: NWindows::NFile::NIO::CInFile::Read(void *,uint,uint &)+5Bj
.text:00000C11                                         ; NWindows::NFile::NIO::CInFile::Read(void *,uint,uint &)+65j
.text:00000C11                 push    edx
.text:00000C12                 mov     ecx, ebp
.text:00000C14                 push    eax
.text:00000C15                 lea     edx, $LN10
.text:00000C1B                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000C20                 pop     eax
.text:00000C21                 pop     edx
.text:00000C22                 add     esp, 14h
.text:00000C25                 cmp     ebp, esp
.text:00000C27                 call    __RTC_CheckEsp
.text:00000C2C                 mov     esp, ebp
.text:00000C2E                 pop     ebp
.text:00000C2F                 retn    0Ch
.text:00000C2F ?Read@CInFile@NIO@NFile@NWindows@@QAE_NPAXIAAI@Z endp
.text:00000C2F
.text:00000C2F ; ---------------------------------------------------------------------------
.text:00000C32                 align 4
.text:00000C34 $LN10           dd 1                    ; DATA XREF: NWindows::NFile::NIO::CInFile::Read(void *,uint,uint &)+81o
.text:00000C38                 dd offset $LN9
.text:00000C3C $LN9            dd 0FFFFFFF4h, 4        ; DATA XREF: .text:00000C38o
.text:00000C44                 dd offset $LN8_1        ; "processedLoc"
.text:00000C48 $LN8_1          db 'processedLoc',0     ; DATA XREF: .text:00000C44o
.text:00000C55                 db 0Fh dup(0CCh)
.text:00000C64
.text:00000C64 ; =============== S U B R O U T I N E =======================================
.text:00000C64
.text:00000C64 ; Attributes: bp-based frame
.text:00000C64
.text:00000C64 ; bool __thiscall NWindows::NFile::NIO::COutFile::Open(NWindows::NFile::NIO::COutFile *this, LPCWSTR lpFileName, DWORD dwShareMode, DWORD dwCreationDisposition, unsigned __int32)
.text:00000C64                 public ?Open@COutFile@NIO@NFile@NWindows@@QAE_NPB_WKKK@Z
.text:00000C64 ?Open@COutFile@NIO@NFile@NWindows@@QAE_NPB_WKKK@Z proc near
.text:00000C64                                         ; CODE XREF: NWindows::NFile::NIO::COutFile::Open(wchar_t const *,ulong)+20p
.text:00000C64                                         ; NWindows::NFile::NIO::COutFile::CreateAlways(wchar_t const *,ulong)+23p
.text:00000C64
.text:00000C64 var_4           = dword ptr -4
.text:00000C64 lpFileName      = dword ptr  8
.text:00000C64 dwShareMode     = dword ptr  0Ch
.text:00000C64 dwCreationDisposition= dword ptr  10h
.text:00000C64 arg_C           = dword ptr  14h
.text:00000C64
.text:00000C64                 push    ebp
.text:00000C65                 mov     ebp, esp
.text:00000C67                 push    ecx
.text:00000C68                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000C6F                 mov     [ebp+var_4], ecx
.text:00000C72                 mov     eax, [ebp+arg_C]
.text:00000C75                 push    eax             ; unsigned __int32
.text:00000C76                 mov     ecx, [ebp+dwCreationDisposition]
.text:00000C79                 push    ecx             ; dwCreationDisposition
.text:00000C7A                 mov     edx, [ebp+dwShareMode]
.text:00000C7D                 push    edx             ; dwShareMode
.text:00000C7E                 push    40000000h       ; dwDesiredAccess
.text:00000C83                 mov     eax, [ebp+lpFileName]
.text:00000C86                 push    eax             ; lpFileName
.text:00000C87                 mov     ecx, [ebp+var_4] ; this
.text:00000C8A                 call    ?Create@CFileBase@NIO@NFile@NWindows@@IAE_NPB_WKKKK@Z ; NWindows::NFile::NIO::CFileBase::Create(wchar_t const *,ulong,ulong,ulong,ulong)
.text:00000C8F                 add     esp, 4
.text:00000C92                 cmp     ebp, esp
.text:00000C94                 call    __RTC_CheckEsp
.text:00000C99                 mov     esp, ebp
.text:00000C9B                 pop     ebp
.text:00000C9C                 retn    10h
.text:00000C9C ?Open@COutFile@NIO@NFile@NWindows@@QAE_NPB_WKKK@Z endp
.text:00000C9C
.text:00000C9C ; ---------------------------------------------------------------------------
.text:00000C9F                 db 5 dup(0CCh)
.text:00000CA4
.text:00000CA4 ; =============== S U B R O U T I N E =======================================
.text:00000CA4
.text:00000CA4 ; Attributes: bp-based frame
.text:00000CA4
.text:00000CA4 ; bool __thiscall NWindows::NFile::NIO::COutFile::Open(NWindows::NFile::NIO::COutFile *this, LPCWSTR lpFileName, unsigned __int32)
.text:00000CA4                 public ?Open@COutFile@NIO@NFile@NWindows@@QAE_NPB_WK@Z
.text:00000CA4 ?Open@COutFile@NIO@NFile@NWindows@@QAE_NPB_WK@Z proc near
.text:00000CA4                                         ; CODE XREF: NWindows::NFile::NIO::COutFile::Create(wchar_t const *,bool)+20p
.text:00000CA4
.text:00000CA4 var_4           = dword ptr -4
.text:00000CA4 lpFileName      = dword ptr  8
.text:00000CA4 dwCreationDisposition= dword ptr  0Ch
.text:00000CA4
.text:00000CA4                 push    ebp
.text:00000CA5                 mov     ebp, esp
.text:00000CA7                 push    ecx
.text:00000CA8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000CAF                 mov     [ebp+var_4], ecx
.text:00000CB2                 push    80h ; 'Ç'       ; unsigned __int32
.text:00000CB7                 mov     eax, [ebp+dwCreationDisposition]
.text:00000CBA                 push    eax             ; dwCreationDisposition
.text:00000CBB                 push    1               ; dwShareMode
.text:00000CBD                 mov     ecx, [ebp+lpFileName]
.text:00000CC0                 push    ecx             ; lpFileName
.text:00000CC1                 mov     ecx, [ebp+var_4] ; this
.text:00000CC4                 call    ?Open@COutFile@NIO@NFile@NWindows@@QAE_NPB_WKKK@Z ; NWindows::NFile::NIO::COutFile::Open(wchar_t const *,ulong,ulong,ulong)
.text:00000CC9                 add     esp, 4
.text:00000CCC                 cmp     ebp, esp
.text:00000CCE                 call    __RTC_CheckEsp
.text:00000CD3                 mov     esp, ebp
.text:00000CD5                 pop     ebp
.text:00000CD6                 retn    8
.text:00000CD6 ?Open@COutFile@NIO@NFile@NWindows@@QAE_NPB_WK@Z endp
.text:00000CD6
.text:00000CD6 ; ---------------------------------------------------------------------------
.text:00000CD9                 db 0Bh dup(0CCh)
.text:00000CE4
.text:00000CE4 ; =============== S U B R O U T I N E =======================================
.text:00000CE4
.text:00000CE4 ; Attributes: bp-based frame
.text:00000CE4
.text:00000CE4 ; bool __thiscall NWindows::NFile::NIO::COutFile::Create(NWindows::NFile::NIO::COutFile *this, LPCWSTR lpFileName, bool)
.text:00000CE4                 public ?Create@COutFile@NIO@NFile@NWindows@@QAE_NPB_W_N@Z
.text:00000CE4 ?Create@COutFile@NIO@NFile@NWindows@@QAE_NPB_W_N@Z proc near
.text:00000CE4
.text:00000CE4 var_4           = dword ptr -4
.text:00000CE4 lpFileName      = dword ptr  8
.text:00000CE4 arg_4           = byte ptr  0Ch
.text:00000CE4
.text:00000CE4                 push    ebp
.text:00000CE5                 mov     ebp, esp
.text:00000CE7                 push    ecx
.text:00000CE8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000CEF                 mov     [ebp+var_4], ecx
.text:00000CF2                 movzx   eax, [ebp+arg_4]
.text:00000CF6                 push    eax
.text:00000CF7                 call    ?GetCreationDisposition@NIO@NFile@NWindows@@YGK_N@Z ; NWindows::NFile::NIO::GetCreationDisposition(bool)
.text:00000CFC                 push    eax             ; unsigned __int32
.text:00000CFD                 mov     ecx, [ebp+lpFileName]
.text:00000D00                 push    ecx             ; lpFileName
.text:00000D01                 mov     ecx, [ebp+var_4] ; this
.text:00000D04                 call    ?Open@COutFile@NIO@NFile@NWindows@@QAE_NPB_WK@Z ; NWindows::NFile::NIO::COutFile::Open(wchar_t const *,ulong)
.text:00000D09                 add     esp, 4
.text:00000D0C                 cmp     ebp, esp
.text:00000D0E                 call    __RTC_CheckEsp
.text:00000D13                 mov     esp, ebp
.text:00000D15                 pop     ebp
.text:00000D16                 retn    8
.text:00000D16 ?Create@COutFile@NIO@NFile@NWindows@@QAE_NPB_W_N@Z endp
.text:00000D16
.text:00000D16 ; ---------------------------------------------------------------------------
.text:00000D19                 db 0Bh dup(0CCh)
.text:00000D24
.text:00000D24 ; =============== S U B R O U T I N E =======================================
.text:00000D24
.text:00000D24 ; Attributes: bp-based frame
.text:00000D24
.text:00000D24 ; unsigned long __stdcall NWindows::NFile::NIO::GetCreationDisposition(bool)
.text:00000D24 ?GetCreationDisposition@NIO@NFile@NWindows@@YGK_N@Z proc near
.text:00000D24                                         ; CODE XREF: NWindows::NFile::NIO::COutFile::Create(wchar_t const *,bool)+13p
.text:00000D24                                         ; NWindows::NFile::NIO::COutFile::CreateAlways(wchar_t const *,ulong)+14p
.text:00000D24
.text:00000D24 arg_0           = byte ptr  8
.text:00000D24
.text:00000D24                 push    ebp
.text:00000D25                 mov     ebp, esp
.text:00000D27                 movzx   eax, [ebp+arg_0]
.text:00000D2B                 neg     eax
.text:00000D2D                 sbb     eax, eax
.text:00000D2F                 neg     eax
.text:00000D31                 add     eax, 1
.text:00000D34                 pop     ebp
.text:00000D35                 retn    4
.text:00000D35 ?GetCreationDisposition@NIO@NFile@NWindows@@YGK_N@Z endp
.text:00000D35
.text:00000D35 ; ---------------------------------------------------------------------------
.text:00000D38                 db 0Ch dup(0CCh)
.text:00000D44
.text:00000D44 ; =============== S U B R O U T I N E =======================================
.text:00000D44
.text:00000D44 ; Attributes: bp-based frame
.text:00000D44
.text:00000D44 ; bool __thiscall NWindows::NFile::NIO::COutFile::CreateAlways(NWindows::NFile::NIO::COutFile *this, LPCWSTR lpFileName, unsigned __int32)
.text:00000D44                 public ?CreateAlways@COutFile@NIO@NFile@NWindows@@QAE_NPB_WK@Z
.text:00000D44 ?CreateAlways@COutFile@NIO@NFile@NWindows@@QAE_NPB_WK@Z proc near
.text:00000D44
.text:00000D44 var_4           = dword ptr -4
.text:00000D44 lpFileName      = dword ptr  8
.text:00000D44 arg_4           = dword ptr  0Ch
.text:00000D44
.text:00000D44                 push    ebp
.text:00000D45                 mov     ebp, esp
.text:00000D47                 push    ecx
.text:00000D48                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000D4F                 mov     [ebp+var_4], ecx
.text:00000D52                 mov     eax, [ebp+arg_4]
.text:00000D55                 push    eax             ; unsigned __int32
.text:00000D56                 push    1
.text:00000D58                 call    ?GetCreationDisposition@NIO@NFile@NWindows@@YGK_N@Z ; NWindows::NFile::NIO::GetCreationDisposition(bool)
.text:00000D5D                 push    eax             ; dwCreationDisposition
.text:00000D5E                 push    1               ; dwShareMode
.text:00000D60                 mov     ecx, [ebp+lpFileName]
.text:00000D63                 push    ecx             ; lpFileName
.text:00000D64                 mov     ecx, [ebp+var_4] ; this
.text:00000D67                 call    ?Open@COutFile@NIO@NFile@NWindows@@QAE_NPB_WKKK@Z ; NWindows::NFile::NIO::COutFile::Open(wchar_t const *,ulong,ulong,ulong)
.text:00000D6C                 add     esp, 4
.text:00000D6F                 cmp     ebp, esp
.text:00000D71                 call    __RTC_CheckEsp
.text:00000D76                 mov     esp, ebp
.text:00000D78                 pop     ebp
.text:00000D79                 retn    8
.text:00000D79 ?CreateAlways@COutFile@NIO@NFile@NWindows@@QAE_NPB_WK@Z endp
.text:00000D79
.text:00000D79 ; ---------------------------------------------------------------------------
.text:00000D7C                 db 8 dup(0CCh)
.text:00000D84
.text:00000D84 ; =============== S U B R O U T I N E =======================================
.text:00000D84
.text:00000D84 ; Attributes: bp-based frame
.text:00000D84
.text:00000D84 ; bool __thiscall NWindows::NFile::NIO::COutFile::SetTime(NWindows::NFile::NIO::COutFile *this, FILETIME *lpCreationTime, FILETIME *lpLastAccessTime, const struct _FILETIME *)
.text:00000D84                 public ?SetTime@COutFile@NIO@NFile@NWindows@@QAE_NPBU_FILETIME@@00@Z
.text:00000D84 ?SetTime@COutFile@NIO@NFile@NWindows@@QAE_NPBU_FILETIME@@00@Z proc near
.text:00000D84                                         ; CODE XREF: NWindows::NFile::NIO::COutFile::SetMTime(_FILETIME const *)+19p
.text:00000D84
.text:00000D84 var_4           = dword ptr -4
.text:00000D84 lpCreationTime  = dword ptr  8
.text:00000D84 lpLastAccessTime= dword ptr  0Ch
.text:00000D84 lpLastWriteTime = dword ptr  10h
.text:00000D84
.text:00000D84                 push    ebp
.text:00000D85                 mov     ebp, esp
.text:00000D87                 push    ecx
.text:00000D88                 push    esi
.text:00000D89                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000D90                 mov     [ebp+var_4], ecx
.text:00000D93                 mov     esi, esp
.text:00000D95                 mov     eax, [ebp+lpLastWriteTime]
.text:00000D98                 push    eax             ; lpLastWriteTime
.text:00000D99                 mov     ecx, [ebp+lpLastAccessTime]
.text:00000D9C                 push    ecx             ; lpLastAccessTime
.text:00000D9D                 mov     edx, [ebp+lpCreationTime]
.text:00000DA0                 push    edx             ; lpCreationTime
.text:00000DA1                 mov     eax, [ebp+var_4]
.text:00000DA4                 mov     ecx, [eax]
.text:00000DA6                 push    ecx             ; hFile
.text:00000DA7                 call    dword ptr ds:__imp__SetFileTime@16 ; SetFileTime(x,x,x,x)
.text:00000DAD                 cmp     esi, esp
.text:00000DAF                 call    __RTC_CheckEsp
.text:00000DB4                 push    eax             ; int
.text:00000DB5                 call    ?BOOLToBool@@YG_NH@Z ; BOOLToBool(int)
.text:00000DBA                 pop     esi
.text:00000DBB                 add     esp, 4
.text:00000DBE                 cmp     ebp, esp
.text:00000DC0                 call    __RTC_CheckEsp
.text:00000DC5                 mov     esp, ebp
.text:00000DC7                 pop     ebp
.text:00000DC8                 retn    0Ch
.text:00000DC8 ?SetTime@COutFile@NIO@NFile@NWindows@@QAE_NPBU_FILETIME@@00@Z endp
.text:00000DC8
.text:00000DC8 ; ---------------------------------------------------------------------------
.text:00000DCB                 db 9 dup(0CCh)
.text:00000DD4
.text:00000DD4 ; =============== S U B R O U T I N E =======================================
.text:00000DD4
.text:00000DD4 ; Attributes: bp-based frame
.text:00000DD4
.text:00000DD4 ; bool __thiscall NWindows::NFile::NIO::COutFile::SetMTime(NWindows::NFile::NIO::COutFile *this, const struct _FILETIME *)
.text:00000DD4                 public ?SetMTime@COutFile@NIO@NFile@NWindows@@QAE_NPBU_FILETIME@@@Z
.text:00000DD4 ?SetMTime@COutFile@NIO@NFile@NWindows@@QAE_NPBU_FILETIME@@@Z proc near
.text:00000DD4
.text:00000DD4 var_4           = dword ptr -4
.text:00000DD4 arg_0           = dword ptr  8
.text:00000DD4
.text:00000DD4                 push    ebp
.text:00000DD5                 mov     ebp, esp
.text:00000DD7                 push    ecx
.text:00000DD8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000DDF                 mov     [ebp+var_4], ecx
.text:00000DE2                 mov     eax, [ebp+arg_0]
.text:00000DE5                 push    eax             ; struct _FILETIME *
.text:00000DE6                 push    0               ; lpLastAccessTime
.text:00000DE8                 push    0               ; lpCreationTime
.text:00000DEA                 mov     ecx, [ebp+var_4] ; this
.text:00000DED                 call    ?SetTime@COutFile@NIO@NFile@NWindows@@QAE_NPBU_FILETIME@@00@Z ; NWindows::NFile::NIO::COutFile::SetTime(_FILETIME const *,_FILETIME const *,_FILETIME const *)
.text:00000DF2                 add     esp, 4
.text:00000DF5                 cmp     ebp, esp
.text:00000DF7                 call    __RTC_CheckEsp
.text:00000DFC                 mov     esp, ebp
.text:00000DFE                 pop     ebp
.text:00000DFF                 retn    4
.text:00000DFF ?SetMTime@COutFile@NIO@NFile@NWindows@@QAE_NPBU_FILETIME@@@Z endp
.text:00000DFF
.text:00000DFF ; ---------------------------------------------------------------------------
.text:00000E02                 align 4
.text:00000E04
.text:00000E04 ; =============== S U B R O U T I N E =======================================
.text:00000E04
.text:00000E04 ; Attributes: bp-based frame
.text:00000E04
.text:00000E04 ; bool __thiscall NWindows::NFile::NIO::COutFile::WritePart(NWindows::NFile::NIO::COutFile *this, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, unsigned int *)
.text:00000E04                 public ?WritePart@COutFile@NIO@NFile@NWindows@@QAE_NPBXIAAI@Z
.text:00000E04 ?WritePart@COutFile@NIO@NFile@NWindows@@QAE_NPBXIAAI@Z proc near
.text:00000E04                                         ; CODE XREF: NWindows::NFile::NIO::COutFile::Write(void const *,uint,uint &)+3Cp
.text:00000E04
.text:00000E04 var_14          = dword ptr -14h
.text:00000E04 var_10          = dword ptr -10h
.text:00000E04 NumberOfBytesWritten= dword ptr -0Ch
.text:00000E04 var_8           = dword ptr -8
.text:00000E04 var_4           = dword ptr -4
.text:00000E04 lpBuffer        = dword ptr  8
.text:00000E04 nNumberOfBytesToWrite= dword ptr  0Ch
.text:00000E04 arg_8           = dword ptr  10h
.text:00000E04
.text:00000E04                 push    ebp
.text:00000E05                 mov     ebp, esp
.text:00000E07                 sub     esp, 14h
.text:00000E0A                 push    esi
.text:00000E0B                 mov     eax, 0CCCCCCCCh
.text:00000E10                 mov     [ebp+var_14], eax
.text:00000E13                 mov     [ebp+var_10], eax
.text:00000E16                 mov     [ebp+NumberOfBytesWritten], eax
.text:00000E19                 mov     [ebp+var_8], eax
.text:00000E1C                 mov     [ebp+var_4], eax
.text:00000E1F                 mov     [ebp+var_4], ecx
.text:00000E22                 mov     eax, [ebp+nNumberOfBytesToWrite]
.text:00000E25                 cmp     eax, _kChunkSizeMax
.text:00000E2B                 jbe     short loc_E36
.text:00000E2D                 mov     ecx, _kChunkSizeMax
.text:00000E33                 mov     [ebp+nNumberOfBytesToWrite], ecx
.text:00000E36
.text:00000E36 loc_E36:                                ; CODE XREF: NWindows::NFile::NIO::COutFile::WritePart(void const *,uint,uint &)+27j
.text:00000E36                 mov     [ebp+NumberOfBytesWritten], 0
.text:00000E3D                 mov     esi, esp
.text:00000E3F                 push    0               ; lpOverlapped
.text:00000E41                 lea     edx, [ebp+NumberOfBytesWritten]
.text:00000E44                 push    edx             ; lpNumberOfBytesWritten
.text:00000E45                 mov     eax, [ebp+nNumberOfBytesToWrite]
.text:00000E48                 push    eax             ; nNumberOfBytesToWrite
.text:00000E49                 mov     ecx, [ebp+lpBuffer]
.text:00000E4C                 push    ecx             ; lpBuffer
.text:00000E4D                 mov     edx, [ebp+var_4]
.text:00000E50                 mov     eax, [edx]
.text:00000E52                 push    eax             ; hFile
.text:00000E53                 call    dword ptr ds:__imp__WriteFile@20 ; WriteFile(x,x,x,x,x)
.text:00000E59                 cmp     esi, esp
.text:00000E5B                 call    __RTC_CheckEsp
.text:00000E60                 push    eax             ; int
.text:00000E61                 call    ?BOOLToBool@@YG_NH@Z ; BOOLToBool(int)
.text:00000E66                 mov     byte ptr [ebp+var_14+3], al
.text:00000E69                 mov     ecx, [ebp+arg_8]
.text:00000E6C                 mov     edx, [ebp+NumberOfBytesWritten]
.text:00000E6F                 mov     [ecx], edx
.text:00000E71                 mov     al, byte ptr [ebp+var_14+3]
.text:00000E74                 push    edx
.text:00000E75                 mov     ecx, ebp
.text:00000E77                 push    eax
.text:00000E78                 lea     edx, $LN6_1
.text:00000E7E                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000E83                 pop     eax
.text:00000E84                 pop     edx
.text:00000E85                 pop     esi
.text:00000E86                 add     esp, 14h
.text:00000E89                 cmp     ebp, esp
.text:00000E8B                 call    __RTC_CheckEsp
.text:00000E90                 mov     esp, ebp
.text:00000E92                 pop     ebp
.text:00000E93                 retn    0Ch
.text:00000E93 ?WritePart@COutFile@NIO@NFile@NWindows@@QAE_NPBXIAAI@Z endp
.text:00000E93
.text:00000E93 ; ---------------------------------------------------------------------------
.text:00000E96                 align 4
.text:00000E98 $LN6_1          dd 1                    ; DATA XREF: NWindows::NFile::NIO::COutFile::WritePart(void const *,uint,uint &)+74o
.text:00000E9C                 dd offset $LN5_2
.text:00000EA0 $LN5_2          dd 0FFFFFFF4h, 4        ; DATA XREF: .text:00000E9Co
.text:00000EA8                 dd offset $LN4_2        ; "processedLoc"
.text:00000EAC $LN4_2          db 'processedLoc',0     ; DATA XREF: .text:00000EA8o
.text:00000EB9                 db 0Bh dup(0CCh)
.text:00000EC4
.text:00000EC4 ; =============== S U B R O U T I N E =======================================
.text:00000EC4
.text:00000EC4 ; Attributes: bp-based frame
.text:00000EC4
.text:00000EC4 ; bool __thiscall NWindows::NFile::NIO::COutFile::Write(NWindows::NFile::NIO::COutFile *this, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, unsigned int *)
.text:00000EC4                 public ?Write@COutFile@NIO@NFile@NWindows@@QAE_NPBXIAAI@Z
.text:00000EC4 ?Write@COutFile@NIO@NFile@NWindows@@QAE_NPBXIAAI@Z proc near
.text:00000EC4
.text:00000EC4 var_14          = dword ptr -14h
.text:00000EC4 var_10          = dword ptr -10h
.text:00000EC4 var_C           = dword ptr -0Ch
.text:00000EC4 var_8           = dword ptr -8
.text:00000EC4 var_4           = dword ptr -4
.text:00000EC4 lpBuffer        = dword ptr  8
.text:00000EC4 nNumberOfBytesToWrite= dword ptr  0Ch
.text:00000EC4 arg_8           = dword ptr  10h
.text:00000EC4
.text:00000EC4                 push    ebp
.text:00000EC5                 mov     ebp, esp
.text:00000EC7                 sub     esp, 14h
.text:00000ECA                 mov     eax, 0CCCCCCCCh
.text:00000ECF                 mov     [ebp+var_14], eax
.text:00000ED2                 mov     [ebp+var_10], eax
.text:00000ED5                 mov     [ebp+var_C], eax
.text:00000ED8                 mov     [ebp+var_8], eax
.text:00000EDB                 mov     [ebp+var_4], eax
.text:00000EDE                 mov     [ebp+var_4], ecx
.text:00000EE1                 mov     eax, [ebp+arg_8]
.text:00000EE4                 mov     dword ptr [eax], 0
.text:00000EEA
.text:00000EEA loc_EEA:                                ; CODE XREF: NWindows::NFile::NIO::COutFile::Write(void const *,uint,uint &)+79j
.text:00000EEA                 mov     [ebp+var_C], 0
.text:00000EF1                 lea     ecx, [ebp+var_C]
.text:00000EF4                 push    ecx             ; unsigned int *
.text:00000EF5                 mov     edx, [ebp+nNumberOfBytesToWrite]
.text:00000EF8                 push    edx             ; nNumberOfBytesToWrite
.text:00000EF9                 mov     eax, [ebp+lpBuffer]
.text:00000EFC                 push    eax             ; lpBuffer
.text:00000EFD                 mov     ecx, [ebp+var_4] ; this
.text:00000F00                 call    ?WritePart@COutFile@NIO@NFile@NWindows@@QAE_NPBXIAAI@Z ; NWindows::NFile::NIO::COutFile::WritePart(void const *,uint,uint &)
.text:00000F05                 mov     byte ptr [ebp+var_14+3], al
.text:00000F08                 mov     ecx, [ebp+arg_8]
.text:00000F0B                 mov     edx, [ecx]
.text:00000F0D                 add     edx, [ebp+var_C]
.text:00000F10                 mov     eax, [ebp+arg_8]
.text:00000F13                 mov     [eax], edx
.text:00000F15                 movzx   ecx, byte ptr [ebp+var_14+3]
.text:00000F19                 test    ecx, ecx
.text:00000F1B                 jnz     short loc_F21
.text:00000F1D                 xor     al, al
.text:00000F1F                 jmp     short loc_F41
.text:00000F21 ; ---------------------------------------------------------------------------
.text:00000F21
.text:00000F21 loc_F21:                                ; CODE XREF: NWindows::NFile::NIO::COutFile::Write(void const *,uint,uint &)+57j
.text:00000F21                 cmp     [ebp+var_C], 0
.text:00000F25                 jnz     short loc_F2B
.text:00000F27                 mov     al, 1
.text:00000F29                 jmp     short loc_F41
.text:00000F2B ; ---------------------------------------------------------------------------
.text:00000F2B
.text:00000F2B loc_F2B:                                ; CODE XREF: NWindows::NFile::NIO::COutFile::Write(void const *,uint,uint &)+61j
.text:00000F2B                 mov     edx, [ebp+lpBuffer]
.text:00000F2E                 add     edx, [ebp+var_C]
.text:00000F31                 mov     [ebp+lpBuffer], edx
.text:00000F34                 mov     eax, [ebp+nNumberOfBytesToWrite]
.text:00000F37                 sub     eax, [ebp+var_C]
.text:00000F3A                 mov     [ebp+nNumberOfBytesToWrite], eax
.text:00000F3D                 jnz     short loc_EEA
.text:00000F3F                 mov     al, 1
.text:00000F41
.text:00000F41 loc_F41:                                ; CODE XREF: NWindows::NFile::NIO::COutFile::Write(void const *,uint,uint &)+5Bj
.text:00000F41                                         ; NWindows::NFile::NIO::COutFile::Write(void const *,uint,uint &)+65j
.text:00000F41                 push    edx
.text:00000F42                 mov     ecx, ebp
.text:00000F44                 push    eax
.text:00000F45                 lea     edx, $LN10_0
.text:00000F4B                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000F50                 pop     eax
.text:00000F51                 pop     edx
.text:00000F52                 add     esp, 14h
.text:00000F55                 cmp     ebp, esp
.text:00000F57                 call    __RTC_CheckEsp
.text:00000F5C                 mov     esp, ebp
.text:00000F5E                 pop     ebp
.text:00000F5F                 retn    0Ch
.text:00000F5F ?Write@COutFile@NIO@NFile@NWindows@@QAE_NPBXIAAI@Z endp
.text:00000F5F
.text:00000F5F ; ---------------------------------------------------------------------------
.text:00000F62                 align 4
.text:00000F64 $LN10_0         dd 1                    ; DATA XREF: NWindows::NFile::NIO::COutFile::Write(void const *,uint,uint &)+81o
.text:00000F68                 dd offset $LN9_0
.text:00000F6C $LN9_0          dd 0FFFFFFF4h, 4        ; DATA XREF: .text:00000F68o
.text:00000F74                 dd offset $LN8_2        ; "processedLoc"
.text:00000F78 $LN8_2          db 'processedLoc',0     ; DATA XREF: .text:00000F74o
.text:00000F85                 db 0Fh dup(0CCh)
.text:00000F94
.text:00000F94 ; =============== S U B R O U T I N E =======================================
.text:00000F94
.text:00000F94 ; Attributes: bp-based frame
.text:00000F94
.text:00000F94 ; bool __thiscall NWindows::NFile::NIO::COutFile::SetEndOfFile(NWindows::NFile::NIO::COutFile *__hidden this)
.text:00000F94                 public ?SetEndOfFile@COutFile@NIO@NFile@NWindows@@QAE_NXZ
.text:00000F94 ?SetEndOfFile@COutFile@NIO@NFile@NWindows@@QAE_NXZ proc near
.text:00000F94                                         ; CODE XREF: NWindows::NFile::NIO::COutFile::SetLength(unsigned __int64)+53p
.text:00000F94
.text:00000F94 var_4           = dword ptr -4
.text:00000F94
.text:00000F94                 push    ebp
.text:00000F95                 mov     ebp, esp
.text:00000F97                 push    ecx
.text:00000F98                 push    esi
.text:00000F99                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000FA0                 mov     [ebp+var_4], ecx
.text:00000FA3                 mov     esi, esp
.text:00000FA5                 mov     eax, [ebp+var_4]
.text:00000FA8                 mov     ecx, [eax]
.text:00000FAA                 push    ecx             ; hFile
.text:00000FAB                 call    dword ptr ds:__imp__SetEndOfFile@4 ; SetEndOfFile(x)
.text:00000FB1                 cmp     esi, esp
.text:00000FB3                 call    __RTC_CheckEsp
.text:00000FB8                 push    eax             ; int
.text:00000FB9                 call    ?BOOLToBool@@YG_NH@Z ; BOOLToBool(int)
.text:00000FBE                 pop     esi
.text:00000FBF                 add     esp, 4
.text:00000FC2                 cmp     ebp, esp
.text:00000FC4                 call    __RTC_CheckEsp
.text:00000FC9                 mov     esp, ebp
.text:00000FCB                 pop     ebp
.text:00000FCC                 retn
.text:00000FCC ?SetEndOfFile@COutFile@NIO@NFile@NWindows@@QAE_NXZ endp
.text:00000FCC
.text:00000FCC ; ---------------------------------------------------------------------------
.text:00000FCD                 db 7 dup(0CCh)
.text:00000FD4
.text:00000FD4 ; =============== S U B R O U T I N E =======================================
.text:00000FD4
.text:00000FD4 ; Attributes: bp-based frame
.text:00000FD4
.text:00000FD4 ; bool __thiscall NWindows::NFile::NIO::COutFile::SetLength(NWindows::NFile::NIO::COutFile *this, LONG lDistanceToMove)
.text:00000FD4                 public ?SetLength@COutFile@NIO@NFile@NWindows@@QAE_N_K@Z
.text:00000FD4 ?SetLength@COutFile@NIO@NFile@NWindows@@QAE_N_K@Z proc near
.text:00000FD4
.text:00000FD4 var_14          = dword ptr -14h
.text:00000FD4 var_10          = dword ptr -10h
.text:00000FD4 var_C           = dword ptr -0Ch
.text:00000FD4 var_8           = dword ptr -8
.text:00000FD4 var_4           = dword ptr -4
.text:00000FD4 lDistanceToMove = dword ptr  8
.text:00000FD4 arg_4           = dword ptr  0Ch
.text:00000FD4
.text:00000FD4                 push    ebp
.text:00000FD5                 mov     ebp, esp
.text:00000FD7                 sub     esp, 14h
.text:00000FDA                 mov     eax, 0CCCCCCCCh
.text:00000FDF                 mov     [ebp+var_14], eax
.text:00000FE2                 mov     [ebp+var_10], eax
.text:00000FE5                 mov     [ebp+var_C], eax
.text:00000FE8                 mov     [ebp+var_8], eax
.text:00000FEB                 mov     [ebp+var_4], eax
.text:00000FEE                 mov     [ebp+var_4], ecx
.text:00000FF1                 lea     eax, [ebp+var_10]
.text:00000FF4                 push    eax
.text:00000FF5                 mov     ecx, [ebp+arg_4]
.text:00000FF8                 push    ecx             ; unsigned __int64 *
.text:00000FF9                 mov     edx, [ebp+lDistanceToMove]
.text:00000FFC                 push    edx             ; lDistanceToMove
.text:00000FFD                 mov     ecx, [ebp+var_4] ; this
.text:00001000                 call    ?Seek@CFileBase@NIO@NFile@NWindows@@QBE_N_KAA_K@Z ; NWindows::NFile::NIO::CFileBase::Seek(unsigned __int64,unsigned __int64 &)
.text:00001005                 movzx   eax, al
.text:00001008                 test    eax, eax
.text:0000100A                 jnz     short loc_1010
.text:0000100C                 xor     al, al
.text:0000100E                 jmp     short loc_102C
.text:00001010 ; ---------------------------------------------------------------------------
.text:00001010
.text:00001010 loc_1010:                               ; CODE XREF: NWindows::NFile::NIO::COutFile::SetLength(unsigned __int64)+36j
.text:00001010                 mov     ecx, [ebp+var_10]
.text:00001013                 cmp     ecx, [ebp+lDistanceToMove]
.text:00001016                 jnz     short loc_1020
.text:00001018                 mov     edx, [ebp+var_C]
.text:0000101B                 cmp     edx, [ebp+arg_4]
.text:0000101E                 jz      short loc_1024
.text:00001020
.text:00001020 loc_1020:                               ; CODE XREF: NWindows::NFile::NIO::COutFile::SetLength(unsigned __int64)+42j
.text:00001020                 xor     al, al
.text:00001022                 jmp     short loc_102C
.text:00001024 ; ---------------------------------------------------------------------------
.text:00001024
.text:00001024 loc_1024:                               ; CODE XREF: NWindows::NFile::NIO::COutFile::SetLength(unsigned __int64)+4Aj
.text:00001024                 mov     ecx, [ebp+var_4] ; this
.text:00001027                 call    ?SetEndOfFile@COutFile@NIO@NFile@NWindows@@QAE_NXZ ; NWindows::NFile::NIO::COutFile::SetEndOfFile(void)
.text:0000102C
.text:0000102C loc_102C:                               ; CODE XREF: NWindows::NFile::NIO::COutFile::SetLength(unsigned __int64)+3Aj
.text:0000102C                                         ; NWindows::NFile::NIO::COutFile::SetLength(unsigned __int64)+4Ej
.text:0000102C                 push    edx
.text:0000102D                 mov     ecx, ebp
.text:0000102F                 push    eax
.text:00001030                 lea     edx, $LN8_3
.text:00001036                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000103B                 pop     eax
.text:0000103C                 pop     edx
.text:0000103D                 add     esp, 14h
.text:00001040                 cmp     ebp, esp
.text:00001042                 call    __RTC_CheckEsp
.text:00001047                 mov     esp, ebp
.text:00001049                 pop     ebp
.text:0000104A                 retn    8
.text:0000104A ?SetLength@COutFile@NIO@NFile@NWindows@@QAE_N_K@Z endp
.text:0000104A
.text:0000104A ; ---------------------------------------------------------------------------
.text:0000104D                 align 10h
.text:00001050 $LN8_3          dd 1                    ; DATA XREF: NWindows::NFile::NIO::COutFile::SetLength(unsigned __int64)+5Co
.text:00001054                 dd offset $LN7_1
.text:00001058 $LN7_1          dd 0FFFFFFF0h, 8        ; DATA XREF: .text:00001054o
.text:00001060                 dd offset $LN6_2        ; "newPosition"
.text:00001064 $LN6_2          db 'newPosition',0      ; DATA XREF: .text:00001060o
.text:00001064 _text           ends
.text:00001064
.text$x:00001070 ; ===========================================================================
.text$x:00001070
.text$x:00001070 ; Segment type: Pure code
.text$x:00001070 ; Segment permissions: Read/Execute
.text$x:00001070 _text$x         segment para public 'CODE' use32
.text$x:00001070                 assume cs:_text$x
.text$x:00001070                 ;org 1070h
.text$x:00001070                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$x:00001070
.text$x:00001070 ; =============== S U B R O U T I N E =======================================
.text$x:00001070
.text$x:00001070
.text$x:00001070 __unwindfunclet$?Create@CFileBase@NIO@NFile@NWindows@@IAE_NPB_WKKKK@Z$0 proc near
.text$x:00001070                                         ; DATA XREF: .xdata$x:00001098o
.text$x:00001070                 lea     ecx, [ebp-1Ch]  ; this
.text$x:00001073                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00001073 __unwindfunclet$?Create@CFileBase@NIO@NFile@NWindows@@IAE_NPB_WKKKK@Z$0 endp
.text$x:00001073
.text$x:00001078
.text$x:00001078 ; =============== S U B R O U T I N E =======================================
.text$x:00001078
.text$x:00001078
.text$x:00001078 __ehhandler$?Create@CFileBase@NIO@NFile@NWindows@@IAE_NPB_WKKKK@Z proc near
.text$x:00001078                                         ; DATA XREF: NWindows::NFile::NIO::CFileBase::Create(wchar_t const *,ulong,ulong,ulong,ulong)+5o
.text$x:00001078
.text$x:00001078 arg_4           = dword ptr  8
.text$x:00001078
.text$x:00001078                 mov     edx, [esp+arg_4]
.text$x:0000107C                 lea     eax, [edx+0Ch]
.text$x:0000107F                 mov     ecx, [edx-20h]
.text$x:00001082                 xor     ecx, eax
.text$x:00001084                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001089                 mov     eax, offset __ehfuncinfo$?Create@CFileBase@NIO@NFile@NWindows@@IAE_NPB_WKKKK@Z
.text$x:0000108E                 jmp     ___CxxFrameHandler3
.text$x:0000108E __ehhandler$?Create@CFileBase@NIO@NFile@NWindows@@IAE_NPB_WKKKK@Z endp
.text$x:0000108E
.text$x:0000108E ; ---------------------------------------------------------------------------
.text$x:00001093                 align 4
.text$x:00001093 _text$x         ends
.text$x:00001093
.xdata$x:00001094 ; ===========================================================================
.xdata$x:00001094
.xdata$x:00001094 ; Segment type: Pure data
.xdata$x:00001094 ; Segment permissions: Read
.xdata$x:00001094 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00001094                 assume cs:_xdata$x
.xdata$x:00001094                 ;org 1094h
.xdata$x:00001094 __unwindtable$?Create@CFileBase@NIO@NFile@NWindows@@IAE_NPB_WKKKK@Z db 0FFh
.xdata$x:00001094                                         ; DATA XREF: .xdata$x:000010A4o
.xdata$x:00001095                 db 0FFh
.xdata$x:00001096                 db 0FFh
.xdata$x:00001097                 db 0FFh
.xdata$x:00001098                 dd offset __unwindfunclet$?Create@CFileBase@NIO@NFile@NWindows@@IAE_NPB_WKKKK@Z$0
.xdata$x:0000109C __ehfuncinfo$?Create@CFileBase@NIO@NFile@NWindows@@IAE_NPB_WKKKK@Z db  22h ; "
.xdata$x:0000109C                                         ; DATA XREF: __ehhandler$?Create@CFileBase@NIO@NFile@NWindows@@IAE_NPB_WKKKK@Z+11o
.xdata$x:0000109D                 db    5
.xdata$x:0000109E                 db  93h ; ô
.xdata$x:0000109F                 db  19h
.xdata$x:000010A0                 db    1
.xdata$x:000010A1                 db    0
.xdata$x:000010A2                 db    0
.xdata$x:000010A3                 db    0
.xdata$x:000010A4                 dd offset __unwindtable$?Create@CFileBase@NIO@NFile@NWindows@@IAE_NPB_WKKKK@Z
.xdata$x:000010A8                 db    0
.xdata$x:000010A9                 db    0
.xdata$x:000010AA                 db    0
.xdata$x:000010AB                 db    0
.xdata$x:000010AC                 db    0
.xdata$x:000010AD                 db    0
.xdata$x:000010AE                 db    0
.xdata$x:000010AF                 db    0
.xdata$x:000010B0                 db    0
.xdata$x:000010B1                 db    0
.xdata$x:000010B2                 db    0
.xdata$x:000010B3                 db    0
.xdata$x:000010B4                 db    0
.xdata$x:000010B5                 db    0
.xdata$x:000010B6                 db    0
.xdata$x:000010B7                 db    0
.xdata$x:000010B8                 db    0
.xdata$x:000010B9                 db    0
.xdata$x:000010BA                 db    0
.xdata$x:000010BB                 db    0
.xdata$x:000010BC                 db    1
.xdata$x:000010BD                 db    0
.xdata$x:000010BE                 db    0
.xdata$x:000010BF                 db    0
.xdata$x:000010BF _xdata$x        ends
.xdata$x:000010BF
.rtc$TMZ:000010C0 ; ===========================================================================
.rtc$TMZ:000010C0
.rtc$TMZ:000010C0 ; Segment type: Pure data
.rtc$TMZ:000010C0 ; Segment permissions: Read
.rtc$TMZ:000010C0 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:000010C0                 assume cs:_rtc$TMZ
.rtc$TMZ:000010C0                 ;org 10C0h
.rtc$TMZ:000010C0 ; COMDAT (pick any)
.rtc$TMZ:000010C0 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:000010C0 _rtc$TMZ        ends
.rtc$TMZ:000010C0
.rtc$IMZ:000010C4 ; ===========================================================================
.rtc$IMZ:000010C4
.rtc$IMZ:000010C4 ; Segment type: Pure data
.rtc$IMZ:000010C4 ; Segment permissions: Read
.rtc$IMZ:000010C4 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:000010C4                 assume cs:_rtc$IMZ
.rtc$IMZ:000010C4                 ;org 10C4h
.rtc$IMZ:000010C4 ; COMDAT (pick any)
.rtc$IMZ:000010C4 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:000010C4 _rtc$IMZ        ends
.rtc$IMZ:000010C4
.text:000010C8 ; ===========================================================================
.text:000010C8
.text:000010C8 ; Segment type: Pure code
.text:000010C8 ; Segment permissions: Read/Execute
.text:000010C8 _text           segment para public 'CODE' use32
.text:000010C8                 assume cs:_text
.text:000010C8                 ;org 10C8h
.text:000010C8 ; COMDAT (pick any)
.text:000010C8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:000010C8
.text:000010C8 ; =============== S U B R O U T I N E =======================================
.text:000010C8
.text:000010C8 ; Attributes: bp-based frame
.text:000010C8
.text:000010C8 ; _DWORD __thiscall AString::~AString(AString *__hidden this)
.text:000010C8                 public ??1AString@@QAE@XZ
.text:000010C8 ??1AString@@QAE@XZ proc near            ; CODE XREF: NWindows::NFile::NIO::CFileBase::Create(wchar_t const *,ulong,ulong,ulong,ulong)+C0p
.text:000010C8                                         ; __unwindfunclet$?Create@CFileBase@NIO@NFile@NWindows@@IAE_NPB_WKKKK@Z$0+3j
.text:000010C8
.text:000010C8 var_8           = dword ptr -8
.text:000010C8 var_4           = dword ptr -4
.text:000010C8
.text:000010C8                 push    ebp
.text:000010C9                 mov     ebp, esp
.text:000010CB                 sub     esp, 8
.text:000010CE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000010D5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000010DC                 mov     [ebp+var_4], ecx
.text:000010DF                 mov     eax, [ebp+var_4]
.text:000010E2                 mov     ecx, [eax]
.text:000010E4                 mov     [ebp+var_8], ecx
.text:000010E7                 mov     edx, [ebp+var_8]
.text:000010EA                 push    edx             ; void *
.text:000010EB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000010F0                 add     esp, 4
.text:000010F3                 add     esp, 8
.text:000010F6                 cmp     ebp, esp
.text:000010F8                 call    __RTC_CheckEsp
.text:000010FD                 mov     esp, ebp
.text:000010FF                 pop     ebp
.text:00001100                 retn
.text:00001100 ??1AString@@QAE@XZ endp
.text:00001100
.text:00001100 ; ---------------------------------------------------------------------------
.text:00001101                 align 4
.text:00001101 _text           ends
.text:00001101
.text:00001104 ; ===========================================================================
.text:00001104
.text:00001104 ; Segment type: Pure code
.text:00001104 ; Segment permissions: Read/Execute
.text:00001104 _text           segment para public 'CODE' use32
.text:00001104                 assume cs:_text
.text:00001104                 ;org 1104h
.text:00001104 ; COMDAT (pick any)
.text:00001104                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00001104
.text:00001104 ; =============== S U B R O U T I N E =======================================
.text:00001104
.text:00001104 ; Attributes: bp-based frame
.text:00001104
.text:00001104 ; public: __thiscall AString::operator char const *(void)const
.text:00001104                 public ??BAString@@QBEPBDXZ
.text:00001104 ??BAString@@QBEPBDXZ proc near          ; CODE XREF: NWindows::NFile::NIO::CFileBase::Create(wchar_t const *,ulong,ulong,ulong,ulong)+9Ep
.text:00001104
.text:00001104 var_4           = dword ptr -4
.text:00001104
.text:00001104                 push    ebp
.text:00001105                 mov     ebp, esp
.text:00001107                 push    ecx
.text:00001108                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000110F                 mov     [ebp+var_4], ecx
.text:00001112                 mov     eax, [ebp+var_4]
.text:00001115                 mov     eax, [eax]
.text:00001117                 mov     esp, ebp
.text:00001119                 pop     ebp
.text:0000111A                 retn
.text:0000111A ??BAString@@QBEPBDXZ endp
.text:0000111A
.text:0000111A ; ---------------------------------------------------------------------------
.text:0000111B                 align 4
.text:0000111B _text           ends
.text:0000111B
.text:0000111C ; ===========================================================================
.text:0000111C
.text:0000111C ; Segment type: Pure code
.text:0000111C ; Segment permissions: Read/Execute
.text:0000111C _text           segment para public 'CODE' use32
.text:0000111C                 assume cs:_text
.text:0000111C                 ;org 111Ch
.text:0000111C ; COMDAT (pick any)
.text:0000111C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000111C
.text:0000111C ; =============== S U B R O U T I N E =======================================
.text:0000111C
.text:0000111C ; Attributes: bp-based frame
.text:0000111C
.text:0000111C ; bool __thiscall NWindows::NFile::NIO::CInFile::GetGeometry(NWindows::NFile::NIO::CInFile *this, struct _DISK_GEOMETRY *)
.text:0000111C                 public ?GetGeometry@CInFile@NIO@NFile@NWindows@@ABE_NPAU_DISK_GEOMETRY@@@Z
.text:0000111C ?GetGeometry@CInFile@NIO@NFile@NWindows@@ABE_NPAU_DISK_GEOMETRY@@@Z proc near
.text:0000111C                                         ; CODE XREF: NWindows::NFile::NIO::CInFile::CalcDeviceSize(wchar_t const *)+186p
.text:0000111C
.text:0000111C var_4           = dword ptr -4
.text:0000111C lpOutBuffer     = dword ptr  8
.text:0000111C
.text:0000111C                 push    ebp
.text:0000111D                 mov     ebp, esp
.text:0000111F                 push    ecx
.text:00001120                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001127                 mov     [ebp+var_4], ecx
.text:0000112A                 push    18h             ; unsigned __int32
.text:0000112C                 mov     eax, [ebp+lpOutBuffer]
.text:0000112F                 push    eax             ; lpOutBuffer
.text:00001130                 push    70000h          ; dwIoControlCode
.text:00001135                 mov     ecx, [ebp+var_4] ; this
.text:00001138                 call    ?DeviceIoControlOut@CFileBase@NIO@NFile@NWindows@@QBE_NKPAXK@Z ; NWindows::NFile::NIO::CFileBase::DeviceIoControlOut(ulong,void *,ulong)
.text:0000113D                 add     esp, 4
.text:00001140                 cmp     ebp, esp
.text:00001142                 call    __RTC_CheckEsp
.text:00001147                 mov     esp, ebp
.text:00001149                 pop     ebp
.text:0000114A                 retn    4
.text:0000114A ?GetGeometry@CInFile@NIO@NFile@NWindows@@ABE_NPAU_DISK_GEOMETRY@@@Z endp
.text:0000114A
.text:0000114A ; ---------------------------------------------------------------------------
.text:0000114D                 align 10h
.text:0000114D _text           ends
.text:0000114D
.text:00001150 ; ===========================================================================
.text:00001150
.text:00001150 ; Segment type: Pure code
.text:00001150 ; Segment permissions: Read/Execute
.text:00001150 _text           segment para public 'CODE' use32
.text:00001150                 assume cs:_text
.text:00001150                 ;org 1150h
.text:00001150 ; COMDAT (pick any)
.text:00001150                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00001150
.text:00001150 ; =============== S U B R O U T I N E =======================================
.text:00001150
.text:00001150 ; Attributes: bp-based frame
.text:00001150
.text:00001150 ; bool __thiscall NWindows::NFile::NIO::CFileBase::DeviceIoControlOut(NWindows::NFile::NIO::CFileBase *this, DWORD dwIoControlCode, void *lpOutBuffer, unsigned __int32)
.text:00001150                 public ?DeviceIoControlOut@CFileBase@NIO@NFile@NWindows@@QBE_NKPAXK@Z
.text:00001150 ?DeviceIoControlOut@CFileBase@NIO@NFile@NWindows@@QBE_NKPAXK@Z proc near
.text:00001150                                         ; CODE XREF: NWindows::NFile::NIO::CInFile::GetGeometry(_DISK_GEOMETRY *)+1Cp
.text:00001150                                         ; NWindows::NFile::NIO::CInFile::GetGeometryEx(NWindows::NFile::NIO::my_DISK_GEOMETRY_EX *)+1Cp ...
.text:00001150
.text:00001150 var_10          = dword ptr -10h
.text:00001150 var_C           = dword ptr -0Ch
.text:00001150 var_8           = dword ptr -8
.text:00001150 var_4           = dword ptr -4
.text:00001150 dwIoControlCode = dword ptr  8
.text:00001150 lpOutBuffer     = dword ptr  0Ch
.text:00001150 nOutBufferSize  = dword ptr  10h
.text:00001150
.text:00001150                 push    ebp
.text:00001151                 mov     ebp, esp
.text:00001153                 sub     esp, 10h
.text:00001156                 mov     eax, 0CCCCCCCCh
.text:0000115B                 mov     [ebp+var_10], eax
.text:0000115E                 mov     [ebp+var_C], eax
.text:00001161                 mov     [ebp+var_8], eax
.text:00001164                 mov     [ebp+var_4], eax
.text:00001167                 mov     [ebp+var_4], ecx
.text:0000116A                 lea     eax, [ebp+var_C]
.text:0000116D                 push    eax             ; unsigned __int32 *
.text:0000116E                 mov     ecx, [ebp+nOutBufferSize]
.text:00001171                 push    ecx             ; nOutBufferSize
.text:00001172                 mov     edx, [ebp+lpOutBuffer]
.text:00001175                 push    edx             ; lpOutBuffer
.text:00001176                 mov     eax, [ebp+dwIoControlCode]
.text:00001179                 push    eax             ; dwIoControlCode
.text:0000117A                 mov     ecx, [ebp+var_4] ; this
.text:0000117D                 call    ?DeviceIoControlOut@CFileBase@NIO@NFile@NWindows@@QBE_NKPAXKPAK@Z ; NWindows::NFile::NIO::CFileBase::DeviceIoControlOut(ulong,void *,ulong,ulong *)
.text:00001182                 push    edx
.text:00001183                 mov     ecx, ebp
.text:00001185                 push    eax
.text:00001186                 lea     edx, $LN5_0
.text:0000118C                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001191                 pop     eax
.text:00001192                 pop     edx
.text:00001193                 add     esp, 10h
.text:00001196                 cmp     ebp, esp
.text:00001198                 call    __RTC_CheckEsp
.text:0000119D                 mov     esp, ebp
.text:0000119F                 pop     ebp
.text:000011A0                 retn    0Ch
.text:000011A0 ?DeviceIoControlOut@CFileBase@NIO@NFile@NWindows@@QBE_NKPAXK@Z endp
.text:000011A0
.text:000011A0 ; ---------------------------------------------------------------------------
.text:000011A3                 align 4
.text:000011A4 $LN5_0          dd 1                    ; DATA XREF: NWindows::NFile::NIO::CFileBase::DeviceIoControlOut(ulong,void *,ulong)+36o
.text:000011A8                 dd offset $LN4_0
.text:000011AC $LN4_0          dd 0FFFFFFF4h, 4        ; DATA XREF: .text:000011A8o
.text:000011B4                 dd offset $LN3_0        ; "bytesReturned"
.text:000011B8 $LN3_0          db 'bytesReturned',0    ; DATA XREF: .text:000011B4o
.text:000011C6                 align 4
.text:000011C6 _text           ends
.text:000011C6
.text:000011C8 ; ===========================================================================
.text:000011C8
.text:000011C8 ; Segment type: Pure code
.text:000011C8 ; Segment permissions: Read/Execute
.text:000011C8 _text           segment para public 'CODE' use32
.text:000011C8                 assume cs:_text
.text:000011C8                 ;org 11C8h
.text:000011C8 ; COMDAT (pick any)
.text:000011C8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:000011C8
.text:000011C8 ; =============== S U B R O U T I N E =======================================
.text:000011C8
.text:000011C8 ; Attributes: bp-based frame
.text:000011C8
.text:000011C8 ; bool __thiscall NWindows::NFile::NIO::CFileBase::DeviceIoControlOut(NWindows::NFile::NIO::CFileBase *this, DWORD dwIoControlCode, void *lpOutBuffer, DWORD nOutBufferSize, unsigned __int32 *)
.text:000011C8                 public ?DeviceIoControlOut@CFileBase@NIO@NFile@NWindows@@QBE_NKPAXKPAK@Z
.text:000011C8 ?DeviceIoControlOut@CFileBase@NIO@NFile@NWindows@@QBE_NKPAXKPAK@Z proc near
.text:000011C8                                         ; CODE XREF: NWindows::NFile::NIO::CFileBase::DeviceIoControlOut(ulong,void *,ulong)+2Dp
.text:000011C8
.text:000011C8 var_4           = dword ptr -4
.text:000011C8 dwIoControlCode = dword ptr  8
.text:000011C8 lpOutBuffer     = dword ptr  0Ch
.text:000011C8 nOutBufferSize  = dword ptr  10h
.text:000011C8 lpBytesReturned = dword ptr  14h
.text:000011C8
.text:000011C8                 push    ebp
.text:000011C9                 mov     ebp, esp
.text:000011CB                 push    ecx
.text:000011CC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000011D3                 mov     [ebp+var_4], ecx
.text:000011D6                 push    0               ; struct _OVERLAPPED *
.text:000011D8                 mov     eax, [ebp+lpBytesReturned]
.text:000011DB                 push    eax             ; lpBytesReturned
.text:000011DC                 mov     ecx, [ebp+nOutBufferSize]
.text:000011DF                 push    ecx             ; nOutBufferSize
.text:000011E0                 mov     edx, [ebp+lpOutBuffer]
.text:000011E3                 push    edx             ; lpOutBuffer
.text:000011E4                 push    0               ; nInBufferSize
.text:000011E6                 push    0               ; lpInBuffer
.text:000011E8                 mov     eax, [ebp+dwIoControlCode]
.text:000011EB                 push    eax             ; dwIoControlCode
.text:000011EC                 mov     ecx, [ebp+var_4] ; this
.text:000011EF                 call    ?DeviceIoControl@CFileBase@NIO@NFile@NWindows@@QBE_NKPAXK0KPAKPAU_OVERLAPPED@@@Z ; NWindows::NFile::NIO::CFileBase::DeviceIoControl(ulong,void *,ulong,void *,ulong,ulong *,_OVERLAPPED *)
.text:000011F4                 add     esp, 4
.text:000011F7                 cmp     ebp, esp
.text:000011F9                 call    __RTC_CheckEsp
.text:000011FE                 mov     esp, ebp
.text:00001200                 pop     ebp
.text:00001201                 retn    10h
.text:00001201 ?DeviceIoControlOut@CFileBase@NIO@NFile@NWindows@@QBE_NKPAXKPAK@Z endp
.text:00001201
.text:00001201 _text           ends
.text:00001201
.text:00001204 ; ===========================================================================
.text:00001204
.text:00001204 ; Segment type: Pure code
.text:00001204 ; Segment permissions: Read/Execute
.text:00001204 _text           segment para public 'CODE' use32
.text:00001204                 assume cs:_text
.text:00001204                 ;org 1204h
.text:00001204 ; COMDAT (pick any)
.text:00001204                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00001204
.text:00001204 ; =============== S U B R O U T I N E =======================================
.text:00001204
.text:00001204 ; Attributes: bp-based frame
.text:00001204
.text:00001204 ; bool __thiscall NWindows::NFile::NIO::CFileBase::DeviceIoControl(NWindows::NFile::NIO::CFileBase *this, DWORD dwIoControlCode, void *lpInBuffer, DWORD nInBufferSize, void *lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, struct _OVERLAPPED *)
.text:00001204                 public ?DeviceIoControl@CFileBase@NIO@NFile@NWindows@@QBE_NKPAXK0KPAKPAU_OVERLAPPED@@@Z
.text:00001204 ?DeviceIoControl@CFileBase@NIO@NFile@NWindows@@QBE_NKPAXK0KPAKPAU_OVERLAPPED@@@Z proc near
.text:00001204                                         ; CODE XREF: NWindows::NFile::NIO::CFileBase::DeviceIoControlOut(ulong,void *,ulong,ulong *)+27p
.text:00001204
.text:00001204 var_4           = dword ptr -4
.text:00001204 dwIoControlCode = dword ptr  8
.text:00001204 lpInBuffer      = dword ptr  0Ch
.text:00001204 nInBufferSize   = dword ptr  10h
.text:00001204 lpOutBuffer     = dword ptr  14h
.text:00001204 nOutBufferSize  = dword ptr  18h
.text:00001204 lpBytesReturned = dword ptr  1Ch
.text:00001204 lpOverlapped    = dword ptr  20h
.text:00001204
.text:00001204                 push    ebp
.text:00001205                 mov     ebp, esp
.text:00001207                 push    ecx
.text:00001208                 push    esi
.text:00001209                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001210                 mov     [ebp+var_4], ecx
.text:00001213                 mov     esi, esp
.text:00001215                 mov     eax, [ebp+lpOverlapped]
.text:00001218                 push    eax             ; lpOverlapped
.text:00001219                 mov     ecx, [ebp+lpBytesReturned]
.text:0000121C                 push    ecx             ; lpBytesReturned
.text:0000121D                 mov     edx, [ebp+nOutBufferSize]
.text:00001220                 push    edx             ; nOutBufferSize
.text:00001221                 mov     eax, [ebp+lpOutBuffer]
.text:00001224                 push    eax             ; lpOutBuffer
.text:00001225                 mov     ecx, [ebp+nInBufferSize]
.text:00001228                 push    ecx             ; nInBufferSize
.text:00001229                 mov     edx, [ebp+lpInBuffer]
.text:0000122C                 push    edx             ; lpInBuffer
.text:0000122D                 mov     eax, [ebp+dwIoControlCode]
.text:00001230                 push    eax             ; dwIoControlCode
.text:00001231                 mov     ecx, [ebp+var_4]
.text:00001234                 mov     edx, [ecx]
.text:00001236                 push    edx             ; hDevice
.text:00001237                 call    dword ptr ds:__imp__DeviceIoControl@32 ; DeviceIoControl(x,x,x,x,x,x,x,x)
.text:0000123D                 cmp     esi, esp
.text:0000123F                 call    __RTC_CheckEsp
.text:00001244                 push    eax             ; int
.text:00001245                 call    ?BOOLToBool@@YG_NH@Z ; BOOLToBool(int)
.text:0000124A                 pop     esi
.text:0000124B                 add     esp, 4
.text:0000124E                 cmp     ebp, esp
.text:00001250                 call    __RTC_CheckEsp
.text:00001255                 mov     esp, ebp
.text:00001257                 pop     ebp
.text:00001258                 retn    1Ch
.text:00001258 ?DeviceIoControl@CFileBase@NIO@NFile@NWindows@@QBE_NKPAXK0KPAKPAU_OVERLAPPED@@@Z endp
.text:00001258
.text:00001258 ; ---------------------------------------------------------------------------
.text:0000125B                 align 4
.text:0000125B _text           ends
.text:0000125B
.text:0000125C ; ===========================================================================
.text:0000125C
.text:0000125C ; Segment type: Pure code
.text:0000125C ; Segment permissions: Read/Execute
.text:0000125C _text           segment para public 'CODE' use32
.text:0000125C                 assume cs:_text
.text:0000125C                 ;org 125Ch
.text:0000125C ; COMDAT (pick any)
.text:0000125C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000125C
.text:0000125C ; =============== S U B R O U T I N E =======================================
.text:0000125C
.text:0000125C ; Attributes: bp-based frame
.text:0000125C
.text:0000125C ; bool __stdcall BOOLToBool(int)
.text:0000125C                 public ?BOOLToBool@@YG_NH@Z
.text:0000125C ?BOOLToBool@@YG_NH@Z proc near          ; CODE XREF: NWindows::NFile::NIO::CInFile::Read1(void *,uint,uint &)+49p
.text:0000125C                                         ; NWindows::NFile::NIO::COutFile::SetTime(_FILETIME const *,_FILETIME const *,_FILETIME const *)+31p ...
.text:0000125C
.text:0000125C arg_0           = dword ptr  8
.text:0000125C
.text:0000125C                 push    ebp
.text:0000125D                 mov     ebp, esp
.text:0000125F                 xor     eax, eax
.text:00001261                 cmp     [ebp+arg_0], 0
.text:00001265                 setnz   al
.text:00001268                 pop     ebp
.text:00001269                 retn    4
.text:00001269 ?BOOLToBool@@YG_NH@Z endp
.text:00001269
.text:00001269 _text           ends
.text:00001269
.text:0000126C ; ===========================================================================
.text:0000126C
.text:0000126C ; Segment type: Pure code
.text:0000126C ; Segment permissions: Read/Execute
.text:0000126C _text           segment para public 'CODE' use32
.text:0000126C                 assume cs:_text
.text:0000126C                 ;org 126Ch
.text:0000126C ; COMDAT (pick any)
.text:0000126C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000126C
.text:0000126C ; =============== S U B R O U T I N E =======================================
.text:0000126C
.text:0000126C ; Attributes: bp-based frame
.text:0000126C
.text:0000126C ; bool __thiscall NWindows::NFile::NIO::CInFile::GetGeometryEx(NWindows::NFile::NIO::CInFile *this, struct NWindows::NFile::NIO::my_DISK_GEOMETRY_EX *)
.text:0000126C                 public ?GetGeometryEx@CInFile@NIO@NFile@NWindows@@ABE_NPAUmy_DISK_GEOMETRY_EX@234@@Z
.text:0000126C ?GetGeometryEx@CInFile@NIO@NFile@NWindows@@ABE_NPAUmy_DISK_GEOMETRY_EX@234@@Z proc near
.text:0000126C                                         ; CODE XREF: NWindows::NFile::NIO::CInFile::CalcDeviceSize(wchar_t const *)+14Cp
.text:0000126C
.text:0000126C var_4           = dword ptr -4
.text:0000126C lpOutBuffer     = dword ptr  8
.text:0000126C
.text:0000126C                 push    ebp
.text:0000126D                 mov     ebp, esp
.text:0000126F                 push    ecx
.text:00001270                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001277                 mov     [ebp+var_4], ecx
.text:0000127A                 push    28h ; '('       ; unsigned __int32
.text:0000127C                 mov     eax, [ebp+lpOutBuffer]
.text:0000127F                 push    eax             ; lpOutBuffer
.text:00001280                 push    700A0h          ; dwIoControlCode
.text:00001285                 mov     ecx, [ebp+var_4] ; this
.text:00001288                 call    ?DeviceIoControlOut@CFileBase@NIO@NFile@NWindows@@QBE_NKPAXK@Z ; NWindows::NFile::NIO::CFileBase::DeviceIoControlOut(ulong,void *,ulong)
.text:0000128D                 add     esp, 4
.text:00001290                 cmp     ebp, esp
.text:00001292                 call    __RTC_CheckEsp
.text:00001297                 mov     esp, ebp
.text:00001299                 pop     ebp
.text:0000129A                 retn    4
.text:0000129A ?GetGeometryEx@CInFile@NIO@NFile@NWindows@@ABE_NPAUmy_DISK_GEOMETRY_EX@234@@Z endp
.text:0000129A
.text:0000129A ; ---------------------------------------------------------------------------
.text:0000129D                 align 10h
.text:0000129D _text           ends
.text:0000129D
.text:000012A0 ; ===========================================================================
.text:000012A0
.text:000012A0 ; Segment type: Pure code
.text:000012A0 ; Segment permissions: Read/Execute
.text:000012A0 _text           segment para public 'CODE' use32
.text:000012A0                 assume cs:_text
.text:000012A0                 ;org 12A0h
.text:000012A0 ; COMDAT (pick any)
.text:000012A0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:000012A0
.text:000012A0 ; =============== S U B R O U T I N E =======================================
.text:000012A0
.text:000012A0 ; Attributes: bp-based frame
.text:000012A0
.text:000012A0 ; bool __thiscall NWindows::NFile::NIO::CInFile::GetCdRomGeometry(NWindows::NFile::NIO::CInFile *this, struct _DISK_GEOMETRY *)
.text:000012A0                 public ?GetCdRomGeometry@CInFile@NIO@NFile@NWindows@@ABE_NPAU_DISK_GEOMETRY@@@Z
.text:000012A0 ?GetCdRomGeometry@CInFile@NIO@NFile@NWindows@@ABE_NPAU_DISK_GEOMETRY@@@Z proc near
.text:000012A0                                         ; CODE XREF: NWindows::NFile::NIO::CInFile::CalcDeviceSize(wchar_t const *)+1A6p
.text:000012A0
.text:000012A0 var_4           = dword ptr -4
.text:000012A0 lpOutBuffer     = dword ptr  8
.text:000012A0
.text:000012A0                 push    ebp
.text:000012A1                 mov     ebp, esp
.text:000012A3                 push    ecx
.text:000012A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000012AB                 mov     [ebp+var_4], ecx
.text:000012AE                 push    18h             ; unsigned __int32
.text:000012B0                 mov     eax, [ebp+lpOutBuffer]
.text:000012B3                 push    eax             ; lpOutBuffer
.text:000012B4                 push    2404Ch          ; dwIoControlCode
.text:000012B9                 mov     ecx, [ebp+var_4] ; this
.text:000012BC                 call    ?DeviceIoControlOut@CFileBase@NIO@NFile@NWindows@@QBE_NKPAXK@Z ; NWindows::NFile::NIO::CFileBase::DeviceIoControlOut(ulong,void *,ulong)
.text:000012C1                 add     esp, 4
.text:000012C4                 cmp     ebp, esp
.text:000012C6                 call    __RTC_CheckEsp
.text:000012CB                 mov     esp, ebp
.text:000012CD                 pop     ebp
.text:000012CE                 retn    4
.text:000012CE ?GetCdRomGeometry@CInFile@NIO@NFile@NWindows@@ABE_NPAU_DISK_GEOMETRY@@@Z endp
.text:000012CE
.text:000012CE ; ---------------------------------------------------------------------------
.text:000012D1                 align 4
.text:000012D1 _text           ends
.text:000012D1
.text:000012D4 ; ===========================================================================
.text:000012D4
.text:000012D4 ; Segment type: Pure code
.text:000012D4 ; Segment permissions: Read/Execute
.text:000012D4 _text           segment para public 'CODE' use32
.text:000012D4                 assume cs:_text
.text:000012D4                 ;org 12D4h
.text:000012D4 ; COMDAT (pick any)
.text:000012D4                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:000012D4
.text:000012D4 ; =============== S U B R O U T I N E =======================================
.text:000012D4
.text:000012D4 ; Attributes: bp-based frame
.text:000012D4
.text:000012D4 ; bool __thiscall NWindows::NFile::NIO::CInFile::GetPartitionInfo(NWindows::NFile::NIO::CInFile *this, struct _PARTITION_INFORMATION *)
.text:000012D4                 public ?GetPartitionInfo@CInFile@NIO@NFile@NWindows@@AAE_NPAU_PARTITION_INFORMATION@@@Z
.text:000012D4 ?GetPartitionInfo@CInFile@NIO@NFile@NWindows@@AAE_NPAU_PARTITION_INFORMATION@@@Z proc near
.text:000012D4                                         ; CODE XREF: NWindows::NFile::NIO::CInFile::CalcDeviceSize(wchar_t const *)+67p
.text:000012D4
.text:000012D4 var_4           = dword ptr -4
.text:000012D4 lpOutBuffer     = dword ptr  8
.text:000012D4
.text:000012D4                 push    ebp
.text:000012D5                 mov     ebp, esp
.text:000012D7                 push    ecx
.text:000012D8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000012DF                 mov     [ebp+var_4], ecx
.text:000012E2                 push    20h ; ' '       ; unsigned __int32
.text:000012E4                 mov     eax, [ebp+lpOutBuffer]
.text:000012E7                 push    eax             ; lpOutBuffer
.text:000012E8                 push    74004h          ; dwIoControlCode
.text:000012ED                 mov     ecx, [ebp+var_4] ; this
.text:000012F0                 call    ?DeviceIoControlOut@CFileBase@NIO@NFile@NWindows@@QBE_NKPAXK@Z ; NWindows::NFile::NIO::CFileBase::DeviceIoControlOut(ulong,void *,ulong)
.text:000012F5                 add     esp, 4
.text:000012F8                 cmp     ebp, esp
.text:000012FA                 call    __RTC_CheckEsp
.text:000012FF                 mov     esp, ebp
.text:00001301                 pop     ebp
.text:00001302                 retn    4
.text:00001302 ?GetPartitionInfo@CInFile@NIO@NFile@NWindows@@AAE_NPAU_PARTITION_INFORMATION@@@Z endp
.text:00001302
.text:00001302 _text           ends
.text:00001302
UNDEF:00001310 ; ===========================================================================
UNDEF:00001310
UNDEF:00001310 ; Segment type: Externs
UNDEF:00001310 ; UNDEF
UNDEF:00001310 ; HANDLE __stdcall CreateFileW(LPCWSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
UNDEF:00001310                 extrn __imp__CreateFileW@28:near
UNDEF:00001310                                         ; CODE XREF: NWindows::NFile::NIO::CFileBase::Create(wchar_t const *,ulong,ulong,ulong,ulong)+E1p
UNDEF:00001310                                         ; DATA XREF: NWindows::NFile::NIO::CFileBase::Create(wchar_t const *,ulong,ulong,ulong,ulong)+E1r
UNDEF:00001314 ; HANDLE __stdcall CreateFileA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
UNDEF:00001314                 extrn __imp__CreateFileA@28:near
UNDEF:00001314                                         ; CODE XREF: NWindows::NFile::NIO::CFileBase::Create(wchar_t const *,ulong,ulong,ulong,ulong)+A4p
UNDEF:00001314                                         ; DATA XREF: NWindows::NFile::NIO::CFileBase::Create(wchar_t const *,ulong,ulong,ulong,ulong)+A4r
UNDEF:00001318 ; struct AString __stdcall __high fs2fas(const wchar_t *)
UNDEF:00001318                 extrn ?fs2fas@@YG?AVAString@@PB_W@Z:near
UNDEF:00001318                                         ; CODE XREF: NWindows::NFile::NIO::CFileBase::Create(wchar_t const *,ulong,ulong,ulong,ulong)+86p
UNDEF:0000131C ; bool g_IsNT
UNDEF:0000131C                 extrn ?g_IsNT@@3_NA:near
UNDEF:0000131C                                         ; DATA XREF: NWindows::NFile::NIO::CFileBase::Create(wchar_t const *,ulong,ulong,ulong,ulong)+5Dr
UNDEF:00001320                 extrn ___security_cookie:near
UNDEF:00001320                                         ; DATA XREF: NWindows::NFile::NIO::CFileBase::Create(wchar_t const *,ulong,ulong,ulong,ulong)+2Cr
UNDEF:00001320                                         ; NWindows::NFile::NIO::CInFile::CalcDeviceSize(wchar_t const *)+1Fr
UNDEF:00001324                 extrn ___CxxFrameHandler3:near
UNDEF:00001324                                         ; CODE XREF: __ehhandler$?Create@CFileBase@NIO@NFile@NWindows@@IAE_NPB_WKKKK@Z+16j
UNDEF:00001328 ; __fastcall __security_check_cookie(x)
UNDEF:00001328                 extrn @__security_check_cookie@4:near
UNDEF:00001328                                         ; CODE XREF: NWindows::NFile::NIO::CInFile::CalcDeviceSize(wchar_t const *)+25Cp
UNDEF:00001328                                         ; __ehhandler$?Create@CFileBase@NIO@NFile@NWindows@@IAE_NPB_WKKKK@Z+Cp
UNDEF:0000132C                 extrn __RTC_CheckEsp:near
UNDEF:0000132C                                         ; CODE XREF: NWindows::NFile::NIO::CFileBase::Create(wchar_t const *,ulong,ulong,ulong,ulong)+ACp
UNDEF:0000132C                                         ; NWindows::NFile::NIO::CFileBase::Create(wchar_t const *,ulong,ulong,ulong,ulong)+E9p ...
UNDEF:00001330                 extrn __RTC_Shutdown:near
UNDEF:00001330                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00001334                 extrn __RTC_InitBase:near
UNDEF:00001334                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00001338 ; void __cdecl operator delete(void *)
UNDEF:00001338                 extrn ??3@YAXPAX@Z:near ; CODE XREF: AString::~AString(void)+23p
UNDEF:0000133C ; BOOL __stdcall CloseHandle(HANDLE hObject)
UNDEF:0000133C                 extrn __imp__CloseHandle@4:near
UNDEF:0000133C                                         ; CODE XREF: NWindows::NFile::NIO::CFileBase::Close(void)+23p
UNDEF:0000133C                                         ; DATA XREF: NWindows::NFile::NIO::CFileBase::Close(void)+23r
UNDEF:00001340 ; DWORD __stdcall GetLastError()
UNDEF:00001340                 extrn __imp__GetLastError@0:near
UNDEF:00001340                                         ; CODE XREF: NWindows::NFile::NIO::CFileBase::GetLength(unsigned __int64 &)+6Dp
UNDEF:00001340                                         ; NWindows::NFile::NIO::CFileBase::Seek(__int64,ulong,unsigned __int64 &)+98p
UNDEF:00001340                                         ; DATA XREF: ...
UNDEF:00001344 ; DWORD __stdcall GetFileSize(HANDLE hFile, LPDWORD lpFileSizeHigh)
UNDEF:00001344                 extrn __imp__GetFileSize@8:near
UNDEF:00001344                                         ; CODE XREF: NWindows::NFile::NIO::CFileBase::GetLength(unsigned __int64 &)+55p
UNDEF:00001344                                         ; DATA XREF: NWindows::NFile::NIO::CFileBase::GetLength(unsigned __int64 &)+55r
UNDEF:00001348 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00001348                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00001348                                         ; CODE XREF: NWindows::NFile::NIO::CFileBase::GetLength(unsigned __int64 &)+ABp
UNDEF:00001348                                         ; NWindows::NFile::NIO::CFileBase::Seek(__int64,ulong,unsigned __int64 &)+D6p ...
UNDEF:0000134C                 extrn __allshl:near     ; CODE XREF: NWindows::NFile::NIO::CFileBase::GetLength(unsigned __int64 &)+89p
UNDEF:0000134C                                         ; NWindows::NFile::NIO::CFileBase::Seek(__int64,ulong,unsigned __int64 &)+B4p
UNDEF:00001350 ; DWORD __stdcall SetFilePointer(HANDLE hFile, LONG lDistanceToMove, PLONG lpDistanceToMoveHigh, DWORD dwMoveMethod)
UNDEF:00001350                 extrn __imp__SetFilePointer@16:near
UNDEF:00001350                                         ; CODE XREF: NWindows::NFile::NIO::CFileBase::Seek(__int64,ulong,unsigned __int64 &)+80p
UNDEF:00001350                                         ; DATA XREF: NWindows::NFile::NIO::CFileBase::Seek(__int64,ulong,unsigned __int64 &)+80r
UNDEF:00001354                 extrn __allshr:near     ; CODE XREF: NWindows::NFile::NIO::CFileBase::Seek(__int64,ulong,unsigned __int64 &)+5Ep
UNDEF:00001358 ; __stdcall MidFree(x)
UNDEF:00001358                 extrn _MidFree@4:near   ; CODE XREF: NWindows::NFile::NIO::CInFile::CorrectDeviceSize(void)+195p
UNDEF:0000135C ; __stdcall MidAlloc(x)
UNDEF:0000135C                 extrn _MidAlloc@4:near  ; CODE XREF: NWindows::NFile::NIO::CInFile::CorrectDeviceSize(void)+55p
UNDEF:0000135C                                         ; NWindows::NFile::NIO::CInFile::CorrectDeviceSize(void)+11Dp
UNDEF:00001360 ; bool NWindows::NFile::NSystem::MyGetDiskFreeSpace(NWindows::NFile::NSystem *__hidden this, const wchar_t *, unsigned __int64 *, unsigned __int64 *, unsigned __int64 *)
UNDEF:00001360                 extrn ?MyGetDiskFreeSpace@NSystem@NFile@NWindows@@YG_NPB_WAA_K11@Z:near
UNDEF:00001360                                         ; CODE XREF: NWindows::NFile::NIO::CInFile::CalcDeviceSize(wchar_t const *)+112p
UNDEF:00001364                 extrn __allmul:near     ; CODE XREF: NWindows::NFile::NIO::CInFile::CalcDeviceSize(wchar_t const *)+1D4p
UNDEF:00001364                                         ; NWindows::NFile::NIO::CInFile::CalcDeviceSize(wchar_t const *)+1E5p ...
UNDEF:00001368 ; BOOL __stdcall DeviceIoControl(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
UNDEF:00001368                 extrn __imp__DeviceIoControl@32:near
UNDEF:00001368                                         ; CODE XREF: NWindows::NFile::NIO::CFileBase::DeviceIoControl(ulong,void *,ulong,void *,ulong,ulong *,_OVERLAPPED *)+33p
UNDEF:00001368                                         ; DATA XREF: NWindows::NFile::NIO::CFileBase::DeviceIoControl(ulong,void *,ulong,void *,ulong,ulong *,_OVERLAPPED *)+33r
UNDEF:0000136C ; bool NWindows::NFile::NName::IsDevicePath(NWindows::NFile::NName *__hidden this, const wchar_t *)
UNDEF:0000136C                 extrn ?IsDevicePath@NName@NFile@NWindows@@YG_NPB_W@Z:near
UNDEF:0000136C                                         ; CODE XREF: NWindows::NFile::NIO::CInFile::Open(wchar_t const *,ulong,ulong,ulong)+3Bp
UNDEF:00001370 ; BOOL __stdcall ReadFile(HANDLE hFile, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead, LPOVERLAPPED lpOverlapped)
UNDEF:00001370                 extrn __imp__ReadFile@20:near
UNDEF:00001370                                         ; CODE XREF: NWindows::NFile::NIO::CInFile::Read1(void *,uint,uint &)+3Bp
UNDEF:00001370                                         ; DATA XREF: NWindows::NFile::NIO::CInFile::Read1(void *,uint,uint &)+3Br
UNDEF:00001374 ; BOOL __stdcall SetFileTime(HANDLE hFile, const FILETIME *lpCreationTime, const FILETIME *lpLastAccessTime, const FILETIME *lpLastWriteTime)
UNDEF:00001374                 extrn __imp__SetFileTime@16:near
UNDEF:00001374                                         ; CODE XREF: NWindows::NFile::NIO::COutFile::SetTime(_FILETIME const *,_FILETIME const *,_FILETIME const *)+23p
UNDEF:00001374                                         ; DATA XREF: NWindows::NFile::NIO::COutFile::SetTime(_FILETIME const *,_FILETIME const *,_FILETIME const *)+23r
UNDEF:00001378 ; BOOL __stdcall WriteFile(HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, LPOVERLAPPED lpOverlapped)
UNDEF:00001378                 extrn __imp__WriteFile@20:near
UNDEF:00001378                                         ; CODE XREF: NWindows::NFile::NIO::COutFile::WritePart(void const *,uint,uint &)+4Fp
UNDEF:00001378                                         ; DATA XREF: NWindows::NFile::NIO::COutFile::WritePart(void const *,uint,uint &)+4Fr
UNDEF:0000137C ; BOOL __stdcall SetEndOfFile(HANDLE hFile)
UNDEF:0000137C                 extrn __imp__SetEndOfFile@4:near
UNDEF:0000137C                                         ; CODE XREF: NWindows::NFile::NIO::COutFile::SetEndOfFile(void)+17p
UNDEF:0000137C                                         ; DATA XREF: NWindows::NFile::NIO::COutFile::SetEndOfFile(void)+17r
UNDEF:0000137C
UNDEF:0000137C