.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : 29DD49425DBC608CC0590C041B0E8FFD
.text:00000000 ; Input CRC32 : F7661918
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\BenchCon.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; void __thiscall CPrintBenchCallback::Print(CPrintBenchCallback *this, const char *)
.text:00000000                 public ?Print@CPrintBenchCallback@@UAEXPBD@Z
.text:00000000 ?Print@CPrintBenchCallback@@UAEXPBD@Z proc near
.text:00000000                                         ; DATA XREF: .rdata:const CPrintBenchCallback::`vftable'o
.text:00000000
.text:00000000 var_4           = dword ptr -4
.text:00000000 Str             = dword ptr  8
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 push    ecx
.text:00000004                 push    esi
.text:00000005                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000000C                 mov     [ebp+var_4], ecx
.text:0000000F                 mov     esi, esp
.text:00000011                 mov     eax, [ebp+var_4]
.text:00000014                 mov     ecx, [eax+4]
.text:00000017                 push    ecx             ; File
.text:00000018                 mov     edx, [ebp+Str]
.text:0000001B                 push    edx             ; Str
.text:0000001C                 call    dword ptr ds:__imp__fputs
.text:00000022                 add     esp, 8
.text:00000025                 cmp     esi, esp
.text:00000027                 call    __RTC_CheckEsp
.text:0000002C                 pop     esi
.text:0000002D                 add     esp, 4
.text:00000030                 cmp     ebp, esp
.text:00000032                 call    __RTC_CheckEsp
.text:00000037                 mov     esp, ebp
.text:00000039                 pop     ebp
.text:0000003A                 retn    4
.text:0000003A ?Print@CPrintBenchCallback@@UAEXPBD@Z endp
.text:0000003A
.text:0000003A ; ---------------------------------------------------------------------------
.text:0000003D                 align 10h
.text:00000040
.text:00000040 ; =============== S U B R O U T I N E =======================================
.text:00000040
.text:00000040 ; Attributes: bp-based frame
.text:00000040
.text:00000040 ; void __thiscall CPrintBenchCallback::NewLine(CPrintBenchCallback *__hidden this)
.text:00000040                 public ?NewLine@CPrintBenchCallback@@UAEXXZ
.text:00000040 ?NewLine@CPrintBenchCallback@@UAEXXZ proc near ; DATA XREF: .rdata:00000180o
.text:00000040
.text:00000040 var_4           = dword ptr -4
.text:00000040
.text:00000040                 push    ebp
.text:00000041                 mov     ebp, esp
.text:00000043                 push    ecx
.text:00000044                 push    esi
.text:00000045                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000004C                 mov     [ebp+var_4], ecx
.text:0000004F                 mov     esi, esp
.text:00000051                 mov     eax, [ebp+var_4]
.text:00000054                 mov     ecx, [eax+4]
.text:00000057                 push    ecx             ; File
.text:00000058                 push    0Ah             ; Ch
.text:0000005A                 call    dword ptr ds:__imp__fputc
.text:00000060                 add     esp, 8
.text:00000063                 cmp     esi, esp
.text:00000065                 call    __RTC_CheckEsp
.text:0000006A                 pop     esi
.text:0000006B                 add     esp, 4
.text:0000006E                 cmp     ebp, esp
.text:00000070                 call    __RTC_CheckEsp
.text:00000075                 mov     esp, ebp
.text:00000077                 pop     ebp
.text:00000078                 retn
.text:00000078 ?NewLine@CPrintBenchCallback@@UAEXXZ endp
.text:00000078
.text:00000078 ; ---------------------------------------------------------------------------
.text:00000079                 align 10h
.text:00000080
.text:00000080 ; =============== S U B R O U T I N E =======================================
.text:00000080
.text:00000080 ; Attributes: bp-based frame
.text:00000080
.text:00000080 ; __int32 __thiscall CPrintBenchCallback::CheckBreak(CPrintBenchCallback *this)
.text:00000080                 public ?CheckBreak@CPrintBenchCallback@@UAEJXZ
.text:00000080 ?CheckBreak@CPrintBenchCallback@@UAEJXZ proc near
.text:00000080                                         ; DATA XREF: .rdata:00000184o
.text:00000080
.text:00000080 var_4           = dword ptr -4
.text:00000080
.text:00000080                 push    ebp
.text:00000081                 mov     ebp, esp
.text:00000083                 push    ecx             ; this
.text:00000084                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000008B                 mov     [ebp+var_4], ecx
.text:0000008E                 call    ?TestBreakSignal@NConsoleClose@@YG_NXZ ; NConsoleClose::TestBreakSignal(void)
.text:00000093                 movzx   eax, al
.text:00000096                 neg     eax
.text:00000098                 sbb     eax, eax
.text:0000009A                 and     eax, 80004004h
.text:0000009F                 add     esp, 4
.text:000000A2                 cmp     ebp, esp
.text:000000A4                 call    __RTC_CheckEsp
.text:000000A9                 mov     esp, ebp
.text:000000AB                 pop     ebp
.text:000000AC                 retn
.text:000000AC ?CheckBreak@CPrintBenchCallback@@UAEJXZ endp
.text:000000AC
.text:000000AC ; ---------------------------------------------------------------------------
.text:000000AD                 align 10h
.text:000000B0
.text:000000B0 ; =============== S U B R O U T I N E =======================================
.text:000000B0
.text:000000B0 ; Attributes: bp-based frame
.text:000000B0
.text:000000B0 ; long __stdcall BenchCon(class CObjectVector<struct CProperty> const &, unsigned int, struct _iobuf *)
.text:000000B0                 public ?BenchCon@@YGJABV?$CObjectVector@UCProperty@@@@IPAU_iobuf@@@Z
.text:000000B0 ?BenchCon@@YGJABV?$CObjectVector@UCProperty@@@@IPAU_iobuf@@@Z proc near
.text:000000B0
.text:000000B0 var_10          = dword ptr -10h
.text:000000B0 var_C           = dword ptr -0Ch
.text:000000B0 var_8           = dword ptr -8
.text:000000B0 var_4           = dword ptr -4
.text:000000B0 arg_0           = dword ptr  8
.text:000000B0 arg_4           = dword ptr  0Ch
.text:000000B0 arg_8           = dword ptr  10h
.text:000000B0
.text:000000B0                 push    ebp
.text:000000B1                 mov     ebp, esp
.text:000000B3                 sub     esp, 10h
.text:000000B6                 mov     eax, 0CCCCCCCCh
.text:000000BB                 mov     [ebp+var_10], eax
.text:000000BE                 mov     [ebp+var_C], eax
.text:000000C1                 mov     [ebp+var_8], eax
.text:000000C4                 mov     [ebp+var_4], eax
.text:000000C7                 lea     ecx, [ebp+var_C]
.text:000000CA                 call    ??0CPrintBenchCallback@@QAE@XZ ; CPrintBenchCallback::CPrintBenchCallback(void)
.text:000000CF                 mov     eax, [ebp+arg_8]
.text:000000D2                 mov     [ebp+var_8], eax
.text:000000D5                 push    1
.text:000000D7                 mov     ecx, [ebp+arg_4]
.text:000000DA                 push    ecx
.text:000000DB                 mov     edx, [ebp+arg_0]
.text:000000DE                 push    edx
.text:000000DF                 push    0
.text:000000E1                 lea     eax, [ebp+var_C]
.text:000000E4                 push    eax
.text:000000E5                 call    ?Bench@@YGJPAUIBenchPrintCallback@@PAUIBenchCallback@@ABV?$CObjectVector@UCProperty@@@@I_N@Z ; Bench(IBenchPrintCallback *,IBenchCallback *,CObjectVector<CProperty> const &,uint,bool)
.text:000000EA                 push    edx
.text:000000EB                 mov     ecx, ebp
.text:000000ED                 push    eax
.text:000000EE                 lea     edx, $LN5
.text:000000F4                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000000F9                 pop     eax
.text:000000FA                 pop     edx
.text:000000FB                 add     esp, 10h
.text:000000FE                 cmp     ebp, esp
.text:00000100                 call    __RTC_CheckEsp
.text:00000105                 mov     esp, ebp
.text:00000107                 pop     ebp
.text:00000108                 retn    0Ch
.text:00000108 ?BenchCon@@YGJABV?$CObjectVector@UCProperty@@@@IPAU_iobuf@@@Z endp
.text:00000108
.text:00000108 ; ---------------------------------------------------------------------------
.text:0000010B                 align 4
.text:0000010C $LN5            dd 1                    ; DATA XREF: BenchCon(CObjectVector<CProperty> const &,uint,_iobuf *)+3Eo
.text:00000110                 dd offset $LN4
.text:00000114 $LN4            dd 0FFFFFFF4h, 8        ; DATA XREF: .text:00000110o
.text:0000011C                 dd offset $LN3          ; "callback"
.text:00000120 $LN3            db 'callback',0         ; DATA XREF: .text:0000011Co
.text:00000129                 align 4
.text:00000129 _text           ends
.text:00000129
.rtc$TMZ:0000012C ; ===========================================================================
.rtc$TMZ:0000012C
.rtc$TMZ:0000012C ; Segment type: Pure data
.rtc$TMZ:0000012C ; Segment permissions: Read
.rtc$TMZ:0000012C _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:0000012C                 assume cs:_rtc$TMZ
.rtc$TMZ:0000012C                 ;org 12Ch
.rtc$TMZ:0000012C ; COMDAT (pick any)
.rtc$TMZ:0000012C __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:0000012C _rtc$TMZ        ends
.rtc$TMZ:0000012C
.rtc$IMZ:00000130 ; ===========================================================================
.rtc$IMZ:00000130
.rtc$IMZ:00000130 ; Segment type: Pure data
.rtc$IMZ:00000130 ; Segment permissions: Read
.rtc$IMZ:00000130 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000130                 assume cs:_rtc$IMZ
.rtc$IMZ:00000130                 ;org 130h
.rtc$IMZ:00000130 ; COMDAT (pick any)
.rtc$IMZ:00000130 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000130 _rtc$IMZ        ends
.rtc$IMZ:00000130
.text:00000134 ; ===========================================================================
.text:00000134
.text:00000134 ; Segment type: Pure code
.text:00000134 ; Segment permissions: Read/Execute
.text:00000134 _text           segment para public 'CODE' use32
.text:00000134                 assume cs:_text
.text:00000134                 ;org 134h
.text:00000134 ; COMDAT (pick any)
.text:00000134                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000134
.text:00000134 ; =============== S U B R O U T I N E =======================================
.text:00000134
.text:00000134 ; Attributes: bp-based frame
.text:00000134
.text:00000134 ; bool NConsoleClose::TestBreakSignal(NConsoleClose *__hidden this)
.text:00000134                 public ?TestBreakSignal@NConsoleClose@@YG_NXZ
.text:00000134 ?TestBreakSignal@NConsoleClose@@YG_NXZ proc near
.text:00000134                                         ; CODE XREF: CPrintBenchCallback::CheckBreak(void)+Ep
.text:00000134
.text:00000134 this            = dword ptr  8
.text:00000134
.text:00000134                 push    ebp
.text:00000135                 mov     ebp, esp
.text:00000137                 xor     eax, eax
.text:00000139                 cmp     dword ptr ds:?g_BreakCounter@NConsoleClose@@3IA, 0 ; uint NConsoleClose::g_BreakCounter
.text:00000140                 setnz   al
.text:00000143                 pop     ebp
.text:00000144                 retn
.text:00000144 ?TestBreakSignal@NConsoleClose@@YG_NXZ endp
.text:00000144
.text:00000144 ; ---------------------------------------------------------------------------
.text:00000145                 align 4
.text:00000145 _text           ends
.text:00000145
.text:00000148 ; ===========================================================================
.text:00000148
.text:00000148 ; Segment type: Pure code
.text:00000148 ; Segment permissions: Read/Execute
.text:00000148 _text           segment para public 'CODE' use32
.text:00000148                 assume cs:_text
.text:00000148                 ;org 148h
.text:00000148 ; COMDAT (pick any)
.text:00000148                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000148
.text:00000148 ; =============== S U B R O U T I N E =======================================
.text:00000148
.text:00000148 ; Attributes: bp-based frame
.text:00000148
.text:00000148 ; public: __thiscall CPrintBenchCallback::CPrintBenchCallback(void)
.text:00000148                 public ??0CPrintBenchCallback@@QAE@XZ
.text:00000148 ??0CPrintBenchCallback@@QAE@XZ proc near
.text:00000148                                         ; CODE XREF: BenchCon(CObjectVector<CProperty> const &,uint,_iobuf *)+1Ap
.text:00000148
.text:00000148 var_4           = dword ptr -4
.text:00000148
.text:00000148                 push    ebp
.text:00000149                 mov     ebp, esp
.text:0000014B                 push    ecx
.text:0000014C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000153                 mov     [ebp+var_4], ecx
.text:00000156                 mov     ecx, [ebp+var_4] ; this
.text:00000159                 call    ??0IBenchPrintCallback@@QAE@XZ ; IBenchPrintCallback::IBenchPrintCallback(void)
.text:0000015E                 mov     eax, [ebp+var_4]
.text:00000161                 mov     dword ptr [eax], offset ??_7CPrintBenchCallback@@6B@ ; const CPrintBenchCallback::`vftable'
.text:00000167                 mov     eax, [ebp+var_4]
.text:0000016A                 add     esp, 4
.text:0000016D                 cmp     ebp, esp
.text:0000016F                 call    __RTC_CheckEsp
.text:00000174                 mov     esp, ebp
.text:00000176                 pop     ebp
.text:00000177                 retn
.text:00000177 ??0CPrintBenchCallback@@QAE@XZ endp
.text:00000177
.text:00000177 _text           ends
.text:00000177
.rdata:00000178 ; ===========================================================================
.rdata:00000178
.rdata:00000178 ; Segment type: Pure data
.rdata:00000178 ; Segment permissions: Read
.rdata:00000178 _rdata          segment dword public 'DATA' use32
.rdata:00000178                 assume cs:_rdata
.rdata:00000178                 ;org 178h
.rdata:00000178 ; COMDAT (pick largest)
.rdata:00000178                 dd offset ??_R4CPrintBenchCallback@@6B@ ; const CPrintBenchCallback::`RTTI Complete Object Locator'
.rdata:0000017C                 public ??_7CPrintBenchCallback@@6B@
.rdata:0000017C ; const CPrintBenchCallback::`vftable'
.rdata:0000017C ??_7CPrintBenchCallback@@6B@ dd offset ?Print@CPrintBenchCallback@@UAEXPBD@Z
.rdata:0000017C                                         ; DATA XREF: CPrintBenchCallback::CPrintBenchCallback(void)+19o
.rdata:0000017C                                         ; CPrintBenchCallback::Print(char const *)
.rdata:00000180                 dd offset ?NewLine@CPrintBenchCallback@@UAEXXZ ; CPrintBenchCallback::NewLine(void)
.rdata:00000184                 dd offset ?CheckBreak@CPrintBenchCallback@@UAEJXZ ; CPrintBenchCallback::CheckBreak(void)
.rdata:00000184 _rdata          ends
.rdata:00000184
.rdata$r:00000188 ; ===========================================================================
.rdata$r:00000188
.rdata$r:00000188 ; Segment type: Pure data
.rdata$r:00000188 ; Segment permissions: Read
.rdata$r:00000188 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000188                 assume cs:_rdata$r
.rdata$r:00000188                 ;org 188h
.rdata$r:00000188 ; COMDAT (pick any)
.rdata$r:00000188                 public ??_R4CPrintBenchCallback@@6B@
.rdata$r:00000188 ; const CPrintBenchCallback::`RTTI Complete Object Locator'
.rdata$r:00000188 ??_R4CPrintBenchCallback@@6B@ db    0   ; DATA XREF: .rdata:00000178o
.rdata$r:00000189                 db    0
.rdata$r:0000018A                 db    0
.rdata$r:0000018B                 db    0
.rdata$r:0000018C                 db    0
.rdata$r:0000018D                 db    0
.rdata$r:0000018E                 db    0
.rdata$r:0000018F                 db    0
.rdata$r:00000190                 db    0
.rdata$r:00000191                 db    0
.rdata$r:00000192                 db    0
.rdata$r:00000193                 db    0
.rdata$r:00000194                 dd offset ??_R0?AUCPrintBenchCallback@@@8 ; CPrintBenchCallback `RTTI Type Descriptor'
.rdata$r:00000198                 dd offset ??_R3CPrintBenchCallback@@8 ; CPrintBenchCallback::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000198 _rdata$r        ends
.rdata$r:00000198
.data:0000019C ; ===========================================================================
.data:0000019C
.data:0000019C ; Segment type: Pure data
.data:0000019C ; Segment permissions: Read/Write
.data:0000019C _data           segment dword public 'DATA' use32
.data:0000019C                 assume cs:_data
.data:0000019C                 ;org 19Ch
.data:0000019C ; COMDAT (pick any)
.data:0000019C                 public ??_R0?AUCPrintBenchCallback@@@8
.data:0000019C ; struct CPrintBenchCallback `RTTI Type Descriptor'
.data:0000019C ??_R0?AUCPrintBenchCallback@@@8 dd offset ??_7type_info@@6B@
.data:0000019C                                         ; DATA XREF: .rdata$r:00000194o
.data:0000019C                                         ; .rdata$r:CPrintBenchCallback::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:0000019C                                         ; const type_info::`vftable'
.data:000001A0                 db    0
.data:000001A1                 db    0
.data:000001A2                 db    0
.data:000001A3                 db    0
.data:000001A4                 db  2Eh ; .
.data:000001A5                 db  3Fh ; ?
.data:000001A6                 db  41h ; A
.data:000001A7                 db  55h ; U
.data:000001A8                 db  43h ; C
.data:000001A9                 db  50h ; P
.data:000001AA                 db  72h ; r
.data:000001AB                 db  69h ; i
.data:000001AC                 db  6Eh ; n
.data:000001AD                 db  74h ; t
.data:000001AE                 db  42h ; B
.data:000001AF                 db  65h ; e
.data:000001B0                 db  6Eh ; n
.data:000001B1                 db  63h ; c
.data:000001B2                 db  68h ; h
.data:000001B3                 db  43h ; C
.data:000001B4                 db  61h ; a
.data:000001B5                 db  6Ch ; l
.data:000001B6                 db  6Ch ; l
.data:000001B7                 db  62h ; b
.data:000001B8                 db  61h ; a
.data:000001B9                 db  63h ; c
.data:000001BA                 db  6Bh ; k
.data:000001BB                 db  40h ; @
.data:000001BC                 db  40h ; @
.data:000001BD                 db    0
.data:000001BE                 align 10h
.data:000001BE _data           ends
.data:000001BE
.rdata$r:000001C0 ; ===========================================================================
.rdata$r:000001C0
.rdata$r:000001C0 ; Segment type: Pure data
.rdata$r:000001C0 ; Segment permissions: Read
.rdata$r:000001C0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000001C0                 assume cs:_rdata$r
.rdata$r:000001C0                 ;org 1C0h
.rdata$r:000001C0 ; COMDAT (pick any)
.rdata$r:000001C0                 public ??_R3CPrintBenchCallback@@8
.rdata$r:000001C0 ; CPrintBenchCallback::`RTTI Class Hierarchy Descriptor'
.rdata$r:000001C0 ??_R3CPrintBenchCallback@@8 db    0     ; DATA XREF: .rdata$r:00000198o
.rdata$r:000001C0                                         ; .rdata$r:000001F4o
.rdata$r:000001C1                 db    0
.rdata$r:000001C2                 db    0
.rdata$r:000001C3                 db    0
.rdata$r:000001C4                 db    0
.rdata$r:000001C5                 db    0
.rdata$r:000001C6                 db    0
.rdata$r:000001C7                 db    0
.rdata$r:000001C8                 db    2
.rdata$r:000001C9                 db    0
.rdata$r:000001CA                 db    0
.rdata$r:000001CB                 db    0
.rdata$r:000001CC                 dd offset ??_R2CPrintBenchCallback@@8 ; CPrintBenchCallback::`RTTI Base Class Array'
.rdata$r:000001CC _rdata$r        ends
.rdata$r:000001CC
.rdata$r:000001D0 ; ===========================================================================
.rdata$r:000001D0
.rdata$r:000001D0 ; Segment type: Pure data
.rdata$r:000001D0 ; Segment permissions: Read
.rdata$r:000001D0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000001D0                 assume cs:_rdata$r
.rdata$r:000001D0                 ;org 1D0h
.rdata$r:000001D0 ; COMDAT (pick any)
.rdata$r:000001D0                 public ??_R2CPrintBenchCallback@@8
.rdata$r:000001D0 ; CPrintBenchCallback::`RTTI Base Class Array'
.rdata$r:000001D0 ??_R2CPrintBenchCallback@@8 dd offset ??_R1A@?0A@EA@CPrintBenchCallback@@8
.rdata$r:000001D0                                         ; DATA XREF: .rdata$r:000001CCo
.rdata$r:000001D0                                         ; CPrintBenchCallback::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000001D4                 dd offset ??_R1A@?0A@EA@IBenchPrintCallback@@8 ; IBenchPrintCallback::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000001D8                 db    0
.rdata$r:000001D9                 align 4
.rdata$r:000001D9 _rdata$r        ends
.rdata$r:000001D9
.rdata$r:000001DC ; ===========================================================================
.rdata$r:000001DC
.rdata$r:000001DC ; Segment type: Pure data
.rdata$r:000001DC ; Segment permissions: Read
.rdata$r:000001DC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000001DC                 assume cs:_rdata$r
.rdata$r:000001DC                 ;org 1DCh
.rdata$r:000001DC ; COMDAT (pick any)
.rdata$r:000001DC                 public ??_R1A@?0A@EA@CPrintBenchCallback@@8
.rdata$r:000001DC ; CPrintBenchCallback::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000001DC ??_R1A@?0A@EA@CPrintBenchCallback@@8 dd offset ??_R0?AUCPrintBenchCallback@@@8
.rdata$r:000001DC                                         ; DATA XREF: .rdata$r:CPrintBenchCallback::`RTTI Base Class Array'o
.rdata$r:000001DC                                         ; CPrintBenchCallback `RTTI Type Descriptor'
.rdata$r:000001E0                 db    1
.rdata$r:000001E1                 db    0
.rdata$r:000001E2                 db    0
.rdata$r:000001E3                 db    0
.rdata$r:000001E4                 db    0
.rdata$r:000001E5                 db    0
.rdata$r:000001E6                 db    0
.rdata$r:000001E7                 db    0
.rdata$r:000001E8                 db 0FFh
.rdata$r:000001E9                 db 0FFh
.rdata$r:000001EA                 db 0FFh
.rdata$r:000001EB                 db 0FFh
.rdata$r:000001EC                 db    0
.rdata$r:000001ED                 db    0
.rdata$r:000001EE                 db    0
.rdata$r:000001EF                 db    0
.rdata$r:000001F0                 db  40h ; @
.rdata$r:000001F1                 db    0
.rdata$r:000001F2                 db    0
.rdata$r:000001F3                 db    0
.rdata$r:000001F4                 dd offset ??_R3CPrintBenchCallback@@8 ; CPrintBenchCallback::`RTTI Class Hierarchy Descriptor'
.rdata$r:000001F4 _rdata$r        ends
.rdata$r:000001F4
.rdata$r:000001F8 ; ===========================================================================
.rdata$r:000001F8
.rdata$r:000001F8 ; Segment type: Pure data
.rdata$r:000001F8 ; Segment permissions: Read
.rdata$r:000001F8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000001F8                 assume cs:_rdata$r
.rdata$r:000001F8                 ;org 1F8h
.rdata$r:000001F8 ; COMDAT (pick any)
.rdata$r:000001F8                 public ??_R1A@?0A@EA@IBenchPrintCallback@@8
.rdata$r:000001F8 ; IBenchPrintCallback::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000001F8 ??_R1A@?0A@EA@IBenchPrintCallback@@8 dd offset ??_R0?AUIBenchPrintCallback@@@8
.rdata$r:000001F8                                         ; DATA XREF: .rdata$r:000001D4o
.rdata$r:000001F8                                         ; .rdata$r:IBenchPrintCallback::`RTTI Base Class Array'o
.rdata$r:000001F8                                         ; IBenchPrintCallback `RTTI Type Descriptor'
.rdata$r:000001FC                 db    0
.rdata$r:000001FD                 db    0
.rdata$r:000001FE                 db    0
.rdata$r:000001FF                 db    0
.rdata$r:00000200                 db    0
.rdata$r:00000201                 db    0
.rdata$r:00000202                 db    0
.rdata$r:00000203                 db    0
.rdata$r:00000204                 db 0FFh
.rdata$r:00000205                 db 0FFh
.rdata$r:00000206                 db 0FFh
.rdata$r:00000207                 db 0FFh
.rdata$r:00000208                 db    0
.rdata$r:00000209                 db    0
.rdata$r:0000020A                 db    0
.rdata$r:0000020B                 db    0
.rdata$r:0000020C                 db  40h ; @
.rdata$r:0000020D                 db    0
.rdata$r:0000020E                 db    0
.rdata$r:0000020F                 db    0
.rdata$r:00000210                 dd offset ??_R3IBenchPrintCallback@@8 ; IBenchPrintCallback::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000210 _rdata$r        ends
.rdata$r:00000210
.data:00000214 ; ===========================================================================
.data:00000214
.data:00000214 ; Segment type: Pure data
.data:00000214 ; Segment permissions: Read/Write
.data:00000214 _data           segment dword public 'DATA' use32
.data:00000214                 assume cs:_data
.data:00000214                 ;org 214h
.data:00000214 ; COMDAT (pick any)
.data:00000214                 public ??_R0?AUIBenchPrintCallback@@@8
.data:00000214 ; struct IBenchPrintCallback `RTTI Type Descriptor'
.data:00000214 ??_R0?AUIBenchPrintCallback@@@8 dd offset ??_7type_info@@6B@
.data:00000214                                         ; DATA XREF: .rdata$r:IBenchPrintCallback::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000214                                         ; .rdata$r:0000028Co
.data:00000214                                         ; const type_info::`vftable'
.data:00000218                 db    0
.data:00000219                 db    0
.data:0000021A                 db    0
.data:0000021B                 db    0
.data:0000021C                 db  2Eh ; .
.data:0000021D                 db  3Fh ; ?
.data:0000021E                 db  41h ; A
.data:0000021F                 db  55h ; U
.data:00000220                 db  49h ; I
.data:00000221                 db  42h ; B
.data:00000222                 db  65h ; e
.data:00000223                 db  6Eh ; n
.data:00000224                 db  63h ; c
.data:00000225                 db  68h ; h
.data:00000226                 db  50h ; P
.data:00000227                 db  72h ; r
.data:00000228                 db  69h ; i
.data:00000229                 db  6Eh ; n
.data:0000022A                 db  74h ; t
.data:0000022B                 db  43h ; C
.data:0000022C                 db  61h ; a
.data:0000022D                 db  6Ch ; l
.data:0000022E                 db  6Ch ; l
.data:0000022F                 db  62h ; b
.data:00000230                 db  61h ; a
.data:00000231                 db  63h ; c
.data:00000232                 db  6Bh ; k
.data:00000233                 db  40h ; @
.data:00000234                 db  40h ; @
.data:00000235                 db    0
.data:00000236                 align 4
.data:00000236 _data           ends
.data:00000236
.rdata$r:00000238 ; ===========================================================================
.rdata$r:00000238
.rdata$r:00000238 ; Segment type: Pure data
.rdata$r:00000238 ; Segment permissions: Read
.rdata$r:00000238 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000238                 assume cs:_rdata$r
.rdata$r:00000238                 ;org 238h
.rdata$r:00000238 ; COMDAT (pick any)
.rdata$r:00000238                 public ??_R3IBenchPrintCallback@@8
.rdata$r:00000238 ; IBenchPrintCallback::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000238 ??_R3IBenchPrintCallback@@8 db    0     ; DATA XREF: .rdata$r:00000210o
.rdata$r:00000238                                         ; .rdata$r:00000290o
.rdata$r:00000239                 db    0
.rdata$r:0000023A                 db    0
.rdata$r:0000023B                 db    0
.rdata$r:0000023C                 db    0
.rdata$r:0000023D                 db    0
.rdata$r:0000023E                 db    0
.rdata$r:0000023F                 db    0
.rdata$r:00000240                 db    1
.rdata$r:00000241                 db    0
.rdata$r:00000242                 db    0
.rdata$r:00000243                 db    0
.rdata$r:00000244                 dd offset ??_R2IBenchPrintCallback@@8 ; IBenchPrintCallback::`RTTI Base Class Array'
.rdata$r:00000244 _rdata$r        ends
.rdata$r:00000244
.rdata$r:00000248 ; ===========================================================================
.rdata$r:00000248
.rdata$r:00000248 ; Segment type: Pure data
.rdata$r:00000248 ; Segment permissions: Read
.rdata$r:00000248 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000248                 assume cs:_rdata$r
.rdata$r:00000248                 ;org 248h
.rdata$r:00000248 ; COMDAT (pick any)
.rdata$r:00000248                 public ??_R2IBenchPrintCallback@@8
.rdata$r:00000248 ; IBenchPrintCallback::`RTTI Base Class Array'
.rdata$r:00000248 ??_R2IBenchPrintCallback@@8 dd offset ??_R1A@?0A@EA@IBenchPrintCallback@@8
.rdata$r:00000248                                         ; DATA XREF: .rdata$r:00000244o
.rdata$r:00000248                                         ; IBenchPrintCallback::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000024C                 db    0
.rdata$r:0000024D                 align 10h
.rdata$r:0000024D _rdata$r        ends
.rdata$r:0000024D
.text:00000250 ; ===========================================================================
.text:00000250
.text:00000250 ; Segment type: Pure code
.text:00000250 ; Segment permissions: Read/Execute
.text:00000250 _text           segment para public 'CODE' use32
.text:00000250                 assume cs:_text
.text:00000250                 ;org 250h
.text:00000250 ; COMDAT (pick any)
.text:00000250                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000250
.text:00000250 ; =============== S U B R O U T I N E =======================================
.text:00000250
.text:00000250 ; Attributes: bp-based frame
.text:00000250
.text:00000250 ; _DWORD __thiscall IBenchPrintCallback::IBenchPrintCallback(IBenchPrintCallback *__hidden this)
.text:00000250                 public ??0IBenchPrintCallback@@QAE@XZ
.text:00000250 ??0IBenchPrintCallback@@QAE@XZ proc near
.text:00000250                                         ; CODE XREF: CPrintBenchCallback::CPrintBenchCallback(void)+11p
.text:00000250
.text:00000250 var_4           = dword ptr -4
.text:00000250
.text:00000250                 push    ebp
.text:00000251                 mov     ebp, esp
.text:00000253                 push    ecx
.text:00000254                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000025B                 mov     [ebp+var_4], ecx
.text:0000025E                 mov     eax, [ebp+var_4]
.text:00000261                 mov     dword ptr [eax], offset ??_7IBenchPrintCallback@@6B@ ; const IBenchPrintCallback::`vftable'
.text:00000267                 mov     eax, [ebp+var_4]
.text:0000026A                 mov     esp, ebp
.text:0000026C                 pop     ebp
.text:0000026D                 retn
.text:0000026D ??0IBenchPrintCallback@@QAE@XZ endp
.text:0000026D
.text:0000026D ; ---------------------------------------------------------------------------
.text:0000026E                 align 10h
.text:0000026E _text           ends
.text:0000026E
.rdata:00000270 ; ===========================================================================
.rdata:00000270
.rdata:00000270 ; Segment type: Pure data
.rdata:00000270 ; Segment permissions: Read
.rdata:00000270 _rdata          segment dword public 'DATA' use32
.rdata:00000270                 assume cs:_rdata
.rdata:00000270                 ;org 270h
.rdata:00000270 ; COMDAT (pick largest)
.rdata:00000270                 dd offset ??_R4IBenchPrintCallback@@6B@ ; const IBenchPrintCallback::`RTTI Complete Object Locator'
.rdata:00000274                 public ??_7IBenchPrintCallback@@6B@
.rdata:00000274 ; const IBenchPrintCallback::`vftable'
.rdata:00000274 ??_7IBenchPrintCallback@@6B@ dd offset __purecall
.rdata:00000274                                         ; DATA XREF: IBenchPrintCallback::IBenchPrintCallback(void)+11o
.rdata:00000278                 dd offset __purecall
.rdata:0000027C                 dd offset __purecall
.rdata:0000027C _rdata          ends
.rdata:0000027C
.rdata$r:00000280 ; ===========================================================================
.rdata$r:00000280
.rdata$r:00000280 ; Segment type: Pure data
.rdata$r:00000280 ; Segment permissions: Read
.rdata$r:00000280 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000280                 assume cs:_rdata$r
.rdata$r:00000280                 ;org 280h
.rdata$r:00000280 ; COMDAT (pick any)
.rdata$r:00000280                 public ??_R4IBenchPrintCallback@@6B@
.rdata$r:00000280 ; const IBenchPrintCallback::`RTTI Complete Object Locator'
.rdata$r:00000280 ??_R4IBenchPrintCallback@@6B@ db    0   ; DATA XREF: .rdata:00000270o
.rdata$r:00000281                 db    0
.rdata$r:00000282                 db    0
.rdata$r:00000283                 db    0
.rdata$r:00000284                 db    0
.rdata$r:00000285                 db    0
.rdata$r:00000286                 db    0
.rdata$r:00000287                 db    0
.rdata$r:00000288                 db    0
.rdata$r:00000289                 db    0
.rdata$r:0000028A                 db    0
.rdata$r:0000028B                 db    0
.rdata$r:0000028C                 dd offset ??_R0?AUIBenchPrintCallback@@@8 ; IBenchPrintCallback `RTTI Type Descriptor'
.rdata$r:00000290                 dd offset ??_R3IBenchPrintCallback@@8 ; IBenchPrintCallback::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000290 _rdata$r        ends
.rdata$r:00000290
UNDEF:000002A0 ; ===========================================================================
UNDEF:000002A0
UNDEF:000002A0 ; Segment type: Externs
UNDEF:000002A0 ; UNDEF
UNDEF:000002A0 ; int __cdecl _fputs(const char *Str, FILE *File)
UNDEF:000002A0                 extrn __imp__fputs:near ; CODE XREF: CPrintBenchCallback::Print(char const *)+1Cp
UNDEF:000002A0                                         ; DATA XREF: CPrintBenchCallback::Print(char const *)+1Cr
UNDEF:000002A4                 extrn __RTC_CheckEsp:near
UNDEF:000002A4                                         ; CODE XREF: CPrintBenchCallback::Print(char const *)+27p
UNDEF:000002A4                                         ; CPrintBenchCallback::Print(char const *)+32p ...
UNDEF:000002A8                 extrn __RTC_Shutdown:near
UNDEF:000002A8                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:000002AC                 extrn __RTC_InitBase:near
UNDEF:000002AC                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:000002B0 ; int __cdecl _fputc(int Ch, FILE *File)
UNDEF:000002B0                 extrn __imp__fputc:near ; CODE XREF: CPrintBenchCallback::NewLine(void)+1Ap
UNDEF:000002B0                                         ; DATA XREF: CPrintBenchCallback::NewLine(void)+1Ar
UNDEF:000002B4 ; unsigned int NConsoleClose::g_BreakCounter
UNDEF:000002B4                 extrn ?g_BreakCounter@NConsoleClose@@3IA:near
UNDEF:000002B4                                         ; DATA XREF: NConsoleClose::TestBreakSignal(void)+5r
UNDEF:000002B8 ; long __stdcall Bench(struct IBenchPrintCallback *, struct IBenchCallback *, class CObjectVector<struct CProperty> const &, unsigned int, bool)
UNDEF:000002B8                 extrn ?Bench@@YGJPAUIBenchPrintCallback@@PAUIBenchCallback@@ABV?$CObjectVector@UCProperty@@@@I_N@Z:near
UNDEF:000002B8                                         ; CODE XREF: BenchCon(CObjectVector<CProperty> const &,uint,_iobuf *)+35p
UNDEF:000002BC ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:000002BC                 extrn @_RTC_CheckStackVars@8:near
UNDEF:000002BC                                         ; CODE XREF: BenchCon(CObjectVector<CProperty> const &,uint,_iobuf *)+44p
UNDEF:000002C0 ; const type_info::`vftable'
UNDEF:000002C0                 extrn ??_7type_info@@6B@:near
UNDEF:000002C0                                         ; DATA XREF: .data:CPrintBenchCallback `RTTI Type Descriptor'o
UNDEF:000002C0                                         ; .data:IBenchPrintCallback `RTTI Type Descriptor'o
UNDEF:000002C4                 extrn __purecall:near   ; DATA XREF: .rdata:const IBenchPrintCallback::`vftable'o
UNDEF:000002C4                                         ; .rdata:00000278o ...
UNDEF:000002C4
UNDEF:000002C4
UNDEF:000002C4                 end