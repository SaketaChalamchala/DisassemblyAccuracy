.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : 579440D87EDBA191B4C63EFB15A0D1BB
.text:00000000 ; Input CRC32 : 0E1692B2
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\PpmdDecoder.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; _DWORD __thiscall NCompress::NPpmd::CDecoder::~CDecoder(NCompress::NPpmd::CDecoder *__hidden this)
.text:00000000                 public ??1CDecoder@NPpmd@NCompress@@QAE@XZ
.text:00000000 ??1CDecoder@NPpmd@NCompress@@QAE@XZ proc near
.text:00000000                                         ; CODE XREF: NCompress::NPpmd::CDecoder::`scalar deleting destructor'(uint)+11p
.text:00000000
.text:00000000 var_10          = dword ptr -10h
.text:00000000 var_C           = dword ptr -0Ch
.text:00000000 var_4           = dword ptr -4
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 push    0FFFFFFFFh
.text:00000005                 push    offset __ehhandler$??1CDecoder@NPpmd@NCompress@@QAE@XZ
.text:0000000A                 mov     eax, large fs:0
.text:00000010                 push    eax
.text:00000011                 push    ecx
.text:00000012                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000019                 mov     eax, dword ptr ds:___security_cookie
.text:0000001E                 xor     eax, ebp
.text:00000020                 push    eax
.text:00000021                 lea     eax, [ebp+var_C]
.text:00000024                 mov     large fs:0, eax
.text:0000002A                 mov     [ebp+var_10], ecx
.text:0000002D                 mov     eax, [ebp+var_10]
.text:00000030                 mov     dword ptr [eax], offset ??_7CDecoder@NPpmd@NCompress@@6BICompressCoder@@@ ; const NCompress::NPpmd::CDecoder::`vftable'{for `ICompressCoder'}
.text:00000036                 mov     ecx, [ebp+var_10]
.text:00000039                 mov     dword ptr [ecx+4], offset ??_7CDecoder@NPpmd@NCompress@@6BICompressSetDecoderProperties2@@@ ; const NCompress::NPpmd::CDecoder::`vftable'{for `ICompressSetDecoderProperties2'}
.text:00000040                 mov     edx, [ebp+var_10]
.text:00000043                 mov     dword ptr [edx+8], offset ??_7CDecoder@NPpmd@NCompress@@6BICompressSetInStream@@@ ; const NCompress::NPpmd::CDecoder::`vftable'{for `ICompressSetInStream'}
.text:0000004A                 mov     eax, [ebp+var_10]
.text:0000004D                 mov     dword ptr [eax+0Ch], offset ??_7CDecoder@NPpmd@NCompress@@6BICompressSetOutStreamSize@@@ ; const NCompress::NPpmd::CDecoder::`vftable'{for `ICompressSetOutStreamSize'}
.text:00000054                 mov     ecx, [ebp+var_10]
.text:00000057                 mov     dword ptr [ecx+10h], offset ??_7CDecoder@NPpmd@NCompress@@6BISequentialInStream@@@ ; const NCompress::NPpmd::CDecoder::`vftable'{for `ISequentialInStream'}
.text:0000005E                 mov     [ebp+var_4], 0
.text:00000065                 mov     edx, [ebp+var_10]
.text:00000068                 mov     eax, [edx+18h]
.text:0000006B                 push    eax
.text:0000006C                 call    _MidFree@4      ; MidFree(x)
.text:00000071                 push    offset _g_BigAlloc
.text:00000076                 mov     ecx, [ebp+var_10]
.text:00000079                 add     ecx, 60h ; '`'
.text:0000007C                 push    ecx
.text:0000007D                 call    _Ppmd7_Free@8   ; Ppmd7_Free(x,x)
.text:00000082                 mov     ecx, [ebp+var_10]
.text:00000085                 add     ecx, 4B48h
.text:0000008B                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00000090                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000097                 mov     ecx, [ebp+var_10]
.text:0000009A                 add     ecx, 38h ; '8'  ; this
.text:0000009D                 call    ??1CByteInBufWrap@@QAE@XZ ; CByteInBufWrap::~CByteInBufWrap(void)
.text:000000A2                 mov     ecx, [ebp+var_C]
.text:000000A5                 mov     large fs:0, ecx
.text:000000AC                 pop     ecx
.text:000000AD                 add     esp, 10h
.text:000000B0                 cmp     ebp, esp
.text:000000B2                 call    __RTC_CheckEsp
.text:000000B7                 mov     esp, ebp
.text:000000B9                 pop     ebp
.text:000000BA                 retn
.text:000000BA ??1CDecoder@NPpmd@NCompress@@QAE@XZ endp
.text:000000BA
.text:000000BA ; ---------------------------------------------------------------------------
.text:000000BB                 align 10h
.text:000000C0
.text:000000C0 ; =============== S U B R O U T I N E =======================================
.text:000000C0
.text:000000C0 ; Attributes: bp-based frame
.text:000000C0
.text:000000C0 ; __int32 __stdcall NCompress::NPpmd::CDecoder::SetDecoderProperties2(NCompress::NPpmd::CDecoder *this, const unsigned __int8 *, unsigned int)
.text:000000C0                 public ?SetDecoderProperties2@CDecoder@NPpmd@NCompress@@UAGJPBEI@Z
.text:000000C0 ?SetDecoderProperties2@CDecoder@NPpmd@NCompress@@UAGJPBEI@Z proc near
.text:000000C0                                         ; DATA XREF: .rdata:000006E4o
.text:000000C0
.text:000000C0 var_4           = dword ptr -4
.text:000000C0 this            = dword ptr  8
.text:000000C0 arg_4           = dword ptr  0Ch
.text:000000C0 arg_8           = dword ptr  10h
.text:000000C0
.text:000000C0                 push    ebp
.text:000000C1                 mov     ebp, esp
.text:000000C3                 push    ecx
.text:000000C4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000000CB                 cmp     [ebp+arg_8], 5
.text:000000CF                 jnb     short loc_DB
.text:000000D1                 mov     eax, 80070057h
.text:000000D6                 jmp     loc_166
.text:000000DB ; ---------------------------------------------------------------------------
.text:000000DB
.text:000000DB loc_DB:                                 ; CODE XREF: NCompress::NPpmd::CDecoder::SetDecoderProperties2(uchar const *,uint)+Fj
.text:000000DB                 mov     eax, [ebp+this]
.text:000000DE                 mov     ecx, [ebp+arg_4]
.text:000000E1                 mov     dl, [ecx]
.text:000000E3                 mov     [eax+4B28h], dl
.text:000000E9                 mov     eax, [ebp+arg_4]
.text:000000EC                 mov     ecx, [eax+1]
.text:000000EF                 mov     [ebp+var_4], ecx
.text:000000F2                 mov     edx, [ebp+this]
.text:000000F5                 movzx   eax, byte ptr [edx+4B28h]
.text:000000FC                 cmp     eax, 2
.text:000000FF                 jl      short loc_11F
.text:00000101                 mov     ecx, [ebp+this]
.text:00000104                 movzx   edx, byte ptr [ecx+4B28h]
.text:0000010B                 cmp     edx, 40h ; '@'
.text:0000010E                 jg      short loc_11F
.text:00000110                 cmp     [ebp+var_4], 800h
.text:00000117                 jb      short loc_11F
.text:00000119                 cmp     [ebp+var_4], 0FFFFFFDBh
.text:0000011D                 jbe     short loc_126
.text:0000011F
.text:0000011F loc_11F:                                ; CODE XREF: NCompress::NPpmd::CDecoder::SetDecoderProperties2(uchar const *,uint)+3Fj
.text:0000011F                                         ; NCompress::NPpmd::CDecoder::SetDecoderProperties2(uchar const *,uint)+4Ej ...
.text:0000011F                 mov     eax, 80004001h
.text:00000124                 jmp     short loc_166
.text:00000126 ; ---------------------------------------------------------------------------
.text:00000126
.text:00000126 loc_126:                                ; CODE XREF: NCompress::NPpmd::CDecoder::SetDecoderProperties2(uchar const *,uint)+5Dj
.text:00000126                 push    100000h         ; unsigned int
.text:0000012B                 mov     ecx, [ebp+this]
.text:0000012E                 add     ecx, 34h ; '4'  ; this
.text:00000131                 call    ?Alloc@CByteInBufWrap@@QAE_NI@Z ; CByteInBufWrap::Alloc(uint)
.text:00000136                 movzx   eax, al
.text:00000139                 test    eax, eax
.text:0000013B                 jnz     short loc_144
.text:0000013D                 mov     eax, 8007000Eh
.text:00000142                 jmp     short loc_166
.text:00000144 ; ---------------------------------------------------------------------------
.text:00000144
.text:00000144 loc_144:                                ; CODE XREF: NCompress::NPpmd::CDecoder::SetDecoderProperties2(uchar const *,uint)+7Bj
.text:00000144                 push    offset _g_BigAlloc
.text:00000149                 mov     ecx, [ebp+var_4]
.text:0000014C                 push    ecx
.text:0000014D                 mov     edx, [ebp+this]
.text:00000150                 add     edx, 5Ch ; '\'
.text:00000153                 push    edx
.text:00000154                 call    _Ppmd7_Alloc@12 ; Ppmd7_Alloc(x,x,x)
.text:00000159                 test    eax, eax
.text:0000015B                 jnz     short loc_164
.text:0000015D                 mov     eax, 8007000Eh
.text:00000162                 jmp     short loc_166
.text:00000164 ; ---------------------------------------------------------------------------
.text:00000164
.text:00000164 loc_164:                                ; CODE XREF: NCompress::NPpmd::CDecoder::SetDecoderProperties2(uchar const *,uint)+9Bj
.text:00000164                 xor     eax, eax
.text:00000166
.text:00000166 loc_166:                                ; CODE XREF: NCompress::NPpmd::CDecoder::SetDecoderProperties2(uchar const *,uint)+16j
.text:00000166                                         ; NCompress::NPpmd::CDecoder::SetDecoderProperties2(uchar const *,uint)+64j ...
.text:00000166                 add     esp, 4
.text:00000169                 cmp     ebp, esp
.text:0000016B                 call    __RTC_CheckEsp
.text:00000170                 mov     esp, ebp
.text:00000172                 pop     ebp
.text:00000173                 retn    0Ch
.text:00000173 ?SetDecoderProperties2@CDecoder@NPpmd@NCompress@@UAGJPBEI@Z endp
.text:00000173
.text:00000173 ; ---------------------------------------------------------------------------
.text:00000176                 align 10h
.text:00000180
.text:00000180 ; =============== S U B R O U T I N E =======================================
.text:00000180
.text:00000180 ; Attributes: bp-based frame
.text:00000180
.text:00000180 ; __int32 __thiscall NCompress::NPpmd::CDecoder::CodeSpec(NCompress::NPpmd::CDecoder *this, unsigned __int8 *, unsigned int)
.text:00000180                 public ?CodeSpec@CDecoder@NPpmd@NCompress@@AAEJPAEI@Z
.text:00000180 ?CodeSpec@CDecoder@NPpmd@NCompress@@AAEJPAEI@Z proc near
.text:00000180                                         ; CODE XREF: NCompress::NPpmd::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+8Fp
.text:00000180                                         ; NCompress::NPpmd::CDecoder::Read(void *,uint,uint *)+3Ep
.text:00000180
.text:00000180 var_20          = dword ptr -20h
.text:00000180 var_1C          = dword ptr -1Ch
.text:00000180 var_18          = dword ptr -18h
.text:00000180 var_14          = dword ptr -14h
.text:00000180 var_10          = dword ptr -10h
.text:00000180 var_C           = dword ptr -0Ch
.text:00000180 var_8           = dword ptr -8
.text:00000180 var_4           = dword ptr -4
.text:00000180 arg_0           = dword ptr  8
.text:00000180 arg_4           = dword ptr  0Ch
.text:00000180
.text:00000180                 push    ebp
.text:00000181                 mov     ebp, esp
.text:00000183                 sub     esp, 20h
.text:00000186                 mov     eax, 0CCCCCCCCh
.text:0000018B                 mov     [ebp+var_20], eax
.text:0000018E                 mov     [ebp+var_1C], eax
.text:00000191                 mov     [ebp+var_18], eax
.text:00000194                 mov     [ebp+var_14], eax
.text:00000197                 mov     [ebp+var_10], eax
.text:0000019A                 mov     [ebp+var_C], eax
.text:0000019D                 mov     [ebp+var_8], eax
.text:000001A0                 mov     [ebp+var_4], eax
.text:000001A3                 mov     [ebp+var_4], ecx
.text:000001A6                 mov     eax, [ebp+var_4]
.text:000001A9                 mov     ecx, [eax+4B30h]
.text:000001AF                 mov     [ebp+var_18], ecx
.text:000001B2                 cmp     [ebp+var_18], 0
.text:000001B6                 jz      short loc_1D7
.text:000001B8                 cmp     [ebp+var_18], 2
.text:000001BC                 jz      short loc_1C6
.text:000001BE                 cmp     [ebp+var_18], 3
.text:000001C2                 jz      short loc_1CD
.text:000001C4                 jmp     short loc_22D
.text:000001C6 ; ---------------------------------------------------------------------------
.text:000001C6
.text:000001C6 loc_1C6:                                ; CODE XREF: NCompress::NPpmd::CDecoder::CodeSpec(uchar *,uint)+3Cj
.text:000001C6                 xor     eax, eax
.text:000001C8                 jmp     loc_339
.text:000001CD ; ---------------------------------------------------------------------------
.text:000001CD
.text:000001CD loc_1CD:                                ; CODE XREF: NCompress::NPpmd::CDecoder::CodeSpec(uchar *,uint)+42j
.text:000001CD                 mov     eax, 1
.text:000001D2                 jmp     loc_339
.text:000001D7 ; ---------------------------------------------------------------------------
.text:000001D7
.text:000001D7 loc_1D7:                                ; CODE XREF: NCompress::NPpmd::CDecoder::CodeSpec(uchar *,uint)+36j
.text:000001D7                 mov     ecx, [ebp+var_4]
.text:000001DA                 add     ecx, 38h ; '8'  ; this
.text:000001DD                 call    ?Init@CByteInBufWrap@@QAEXXZ ; CByteInBufWrap::Init(void)
.text:000001E2                 mov     edx, [ebp+var_4]
.text:000001E5                 add     edx, 1Ch
.text:000001E8                 push    edx
.text:000001E9                 call    _Ppmd7z_RangeDec_Init@4 ; Ppmd7z_RangeDec_Init(x)
.text:000001EE                 test    eax, eax
.text:000001F0                 jnz     short loc_209
.text:000001F2                 mov     eax, [ebp+var_4]
.text:000001F5                 mov     dword ptr [eax+4B30h], 3
.text:000001FF                 mov     eax, 1
.text:00000204                 jmp     loc_339
.text:00000209 ; ---------------------------------------------------------------------------
.text:00000209
.text:00000209 loc_209:                                ; CODE XREF: NCompress::NPpmd::CDecoder::CodeSpec(uchar *,uint)+70j
.text:00000209                 mov     ecx, [ebp+var_4]
.text:0000020C                 mov     dword ptr [ecx+4B30h], 1
.text:00000216                 mov     edx, [ebp+var_4]
.text:00000219                 movzx   eax, byte ptr [edx+4B2Ch]
.text:00000220                 push    eax
.text:00000221                 mov     ecx, [ebp+var_4]
.text:00000224                 add     ecx, 60h ; '`'
.text:00000227                 push    ecx
.text:00000228                 call    _Ppmd7_Init@8   ; Ppmd7_Init(x,x)
.text:0000022D
.text:0000022D loc_22D:                                ; CODE XREF: NCompress::NPpmd::CDecoder::CodeSpec(uchar *,uint)+44j
.text:0000022D                 mov     edx, [ebp+var_4]
.text:00000230                 movzx   eax, byte ptr [edx+4B2Dh]
.text:00000237                 test    eax, eax
.text:00000239                 jz      short loc_282
.text:0000023B                 mov     ecx, [ebp+var_4]
.text:0000023E                 mov     edx, [ebp+var_4]
.text:00000241                 mov     eax, [ecx+4B38h]
.text:00000247                 sub     eax, [edx+4B40h]
.text:0000024D                 mov     ecx, [ecx+4B3Ch]
.text:00000253                 sbb     ecx, [edx+4B44h]
.text:00000259                 mov     [ebp+var_C], eax
.text:0000025C                 mov     [ebp+var_8], ecx
.text:0000025F                 mov     edx, [ebp+arg_4]
.text:00000262                 xor     eax, eax
.text:00000264                 mov     [ebp+var_20], edx
.text:00000267                 mov     [ebp+var_1C], eax
.text:0000026A                 mov     ecx, [ebp+var_1C]
.text:0000026D                 cmp     ecx, [ebp+var_8]
.text:00000270                 jb      short loc_282
.text:00000272                 ja      short loc_27C
.text:00000274                 mov     edx, [ebp+var_20]
.text:00000277                 cmp     edx, [ebp+var_C]
.text:0000027A                 jbe     short loc_282
.text:0000027C
.text:0000027C loc_27C:                                ; CODE XREF: NCompress::NPpmd::CDecoder::CodeSpec(uchar *,uint)+F2j
.text:0000027C                 mov     eax, [ebp+var_C]
.text:0000027F                 mov     [ebp+arg_4], eax
.text:00000282
.text:00000282 loc_282:                                ; CODE XREF: NCompress::NPpmd::CDecoder::CodeSpec(uchar *,uint)+B9j
.text:00000282                                         ; NCompress::NPpmd::CDecoder::CodeSpec(uchar *,uint)+F0j ...
.text:00000282                 mov     [ebp+var_14], 0
.text:00000289                 mov     [ebp+var_10], 0
.text:00000290                 jmp     short loc_29B
.text:00000292 ; ---------------------------------------------------------------------------
.text:00000292
.text:00000292 loc_292:                                ; CODE XREF: NCompress::NPpmd::CDecoder::CodeSpec(uchar *,uint)+157j
.text:00000292                 mov     ecx, [ebp+var_10]
.text:00000295                 add     ecx, 1
.text:00000298                 mov     [ebp+var_10], ecx
.text:0000029B
.text:0000029B loc_29B:                                ; CODE XREF: NCompress::NPpmd::CDecoder::CodeSpec(uchar *,uint)+110j
.text:0000029B                 mov     edx, [ebp+var_10]
.text:0000029E                 cmp     edx, [ebp+arg_4]
.text:000002A1                 jz      short loc_2D9
.text:000002A3                 mov     eax, [ebp+var_4]
.text:000002A6                 add     eax, 1Ch
.text:000002A9                 push    eax
.text:000002AA                 mov     ecx, [ebp+var_4]
.text:000002AD                 add     ecx, 60h ; '`'
.text:000002B0                 push    ecx
.text:000002B1                 call    _Ppmd7_DecodeSymbol@8 ; Ppmd7_DecodeSymbol(x,x)
.text:000002B6                 mov     [ebp+var_14], eax
.text:000002B9                 mov     edx, [ebp+var_4]
.text:000002BC                 movzx   eax, byte ptr [edx+58h]
.text:000002C0                 test    eax, eax
.text:000002C2                 jnz     short loc_2CA
.text:000002C4                 cmp     [ebp+var_14], 0
.text:000002C8                 jge     short loc_2CC
.text:000002CA
.text:000002CA loc_2CA:                                ; CODE XREF: NCompress::NPpmd::CDecoder::CodeSpec(uchar *,uint)+142j
.text:000002CA                 jmp     short loc_2D9
.text:000002CC ; ---------------------------------------------------------------------------
.text:000002CC
.text:000002CC loc_2CC:                                ; CODE XREF: NCompress::NPpmd::CDecoder::CodeSpec(uchar *,uint)+148j
.text:000002CC                 mov     ecx, [ebp+arg_0]
.text:000002CF                 add     ecx, [ebp+var_10]
.text:000002D2                 mov     dl, byte ptr [ebp+var_14]
.text:000002D5                 mov     [ecx], dl
.text:000002D7                 jmp     short loc_292
.text:000002D9 ; ---------------------------------------------------------------------------
.text:000002D9
.text:000002D9 loc_2D9:                                ; CODE XREF: NCompress::NPpmd::CDecoder::CodeSpec(uchar *,uint)+121j
.text:000002D9                                         ; NCompress::NPpmd::CDecoder::CodeSpec(uchar *,uint):loc_2CAj
.text:000002D9                 mov     eax, [ebp+var_10]
.text:000002DC                 xor     ecx, ecx
.text:000002DE                 mov     edx, [ebp+var_4]
.text:000002E1                 add     eax, [edx+4B40h]
.text:000002E7                 adc     ecx, [edx+4B44h]
.text:000002ED                 mov     edx, [ebp+var_4]
.text:000002F0                 mov     [edx+4B40h], eax
.text:000002F6                 mov     [edx+4B44h], ecx
.text:000002FC                 mov     eax, [ebp+var_4]
.text:000002FF                 movzx   ecx, byte ptr [eax+58h]
.text:00000303                 test    ecx, ecx
.text:00000305                 jz      short loc_31C
.text:00000307                 mov     edx, [ebp+var_4]
.text:0000030A                 mov     dword ptr [edx+4B30h], 3
.text:00000314                 mov     eax, [ebp+var_4]
.text:00000317                 mov     eax, [eax+5Ch]
.text:0000031A                 jmp     short loc_339
.text:0000031C ; ---------------------------------------------------------------------------
.text:0000031C
.text:0000031C loc_31C:                                ; CODE XREF: NCompress::NPpmd::CDecoder::CodeSpec(uchar *,uint)+185j
.text:0000031C                 cmp     [ebp+var_14], 0
.text:00000320                 jge     short loc_337
.text:00000322                 xor     ecx, ecx
.text:00000324                 cmp     [ebp+var_14], 0FFFFFFFFh
.text:00000328                 setl    cl
.text:0000032B                 add     ecx, 2
.text:0000032E                 mov     edx, [ebp+var_4]
.text:00000331                 mov     [edx+4B30h], ecx
.text:00000337
.text:00000337 loc_337:                                ; CODE XREF: NCompress::NPpmd::CDecoder::CodeSpec(uchar *,uint)+1A0j
.text:00000337                 xor     eax, eax
.text:00000339
.text:00000339 loc_339:                                ; CODE XREF: NCompress::NPpmd::CDecoder::CodeSpec(uchar *,uint)+48j
.text:00000339                                         ; NCompress::NPpmd::CDecoder::CodeSpec(uchar *,uint)+52j ...
.text:00000339                 add     esp, 20h
.text:0000033C                 cmp     ebp, esp
.text:0000033E                 call    __RTC_CheckEsp
.text:00000343                 mov     esp, ebp
.text:00000345                 pop     ebp
.text:00000346                 retn    8
.text:00000346 ?CodeSpec@CDecoder@NPpmd@NCompress@@AAEJPAEI@Z endp
.text:00000346
.text:00000346 ; ---------------------------------------------------------------------------
.text:00000349                 align 10h
.text:00000350
.text:00000350 ; =============== S U B R O U T I N E =======================================
.text:00000350
.text:00000350 ; Attributes: bp-based frame
.text:00000350
.text:00000350 ; __int32 __stdcall NCompress::NPpmd::CDecoder::Code(NCompress::NPpmd::CDecoder *this, struct ISequentialInStream *, struct ISequentialOutStream *, const unsigned __int64 *, const unsigned __int64 *, struct ICompressProgressInfo *)
.text:00000350                 public ?Code@CDecoder@NPpmd@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text:00000350 ?Code@CDecoder@NPpmd@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z proc near
.text:00000350                                         ; DATA XREF: .rdata:000006F8o
.text:00000350
.text:00000350 var_34          = dword ptr -34h
.text:00000350 var_30          = dword ptr -30h
.text:00000350 var_2C          = dword ptr -2Ch
.text:00000350 var_24          = dword ptr -24h
.text:00000350 var_20          = dword ptr -20h
.text:00000350 var_18          = dword ptr -18h
.text:00000350 var_14          = dword ptr -14h
.text:00000350 var_10          = dword ptr -10h
.text:00000350 var_C           = dword ptr -0Ch
.text:00000350 var_8           = dword ptr -8
.text:00000350 var_4           = dword ptr -4
.text:00000350 this            = dword ptr  8
.text:00000350 arg_4           = dword ptr  0Ch
.text:00000350 arg_8           = dword ptr  10h
.text:00000350 arg_10          = dword ptr  18h
.text:00000350 arg_14          = dword ptr  1Ch
.text:00000350
.text:00000350                 push    ebp
.text:00000351                 mov     ebp, esp
.text:00000353                 sub     esp, 34h
.text:00000356                 push    esi
.text:00000357                 push    edi
.text:00000358                 lea     edi, [ebp+var_34]
.text:0000035B                 mov     ecx, 0Dh
.text:00000360                 mov     eax, 0CCCCCCCCh
.text:00000365                 rep stosd
.text:00000367                 mov     eax, [ebp+this]
.text:0000036A                 cmp     dword ptr [eax+18h], 0
.text:0000036E                 jnz     short loc_393
.text:00000370                 push    100000h
.text:00000375                 call    _MidAlloc@4     ; MidAlloc(x)
.text:0000037A                 mov     ecx, [ebp+this]
.text:0000037D                 mov     [ecx+18h], eax
.text:00000380                 mov     edx, [ebp+this]
.text:00000383                 cmp     dword ptr [edx+18h], 0
.text:00000387                 jnz     short loc_393
.text:00000389                 mov     eax, 8007000Eh
.text:0000038E                 jmp     loc_4E4
.text:00000393 ; ---------------------------------------------------------------------------
.text:00000393
.text:00000393 loc_393:                                ; CODE XREF: NCompress::NPpmd::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+1Ej
.text:00000393                                         ; NCompress::NPpmd::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+37j
.text:00000393                 mov     eax, [ebp+this]
.text:00000396                 mov     ecx, [ebp+arg_4]
.text:00000399                 mov     [eax+4Ch], ecx
.text:0000039C                 mov     esi, esp
.text:0000039E                 mov     edx, [ebp+arg_10]
.text:000003A1                 push    edx
.text:000003A2                 mov     eax, [ebp+this]
.text:000003A5                 add     eax, 0Ch
.text:000003A8                 mov     ecx, [ebp+this]
.text:000003AB                 mov     edx, [ecx+0Ch]
.text:000003AE                 push    eax
.text:000003AF                 mov     eax, [edx+0Ch]
.text:000003B2                 call    eax
.text:000003B4                 cmp     esi, esp
.text:000003B6                 call    __RTC_CheckEsp
.text:000003BB
.text:000003BB loc_3BB:                                ; CODE XREF: NCompress::NPpmd::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+14Ej
.text:000003BB                                         ; NCompress::NPpmd::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+172j ...
.text:000003BB                 mov     ecx, [ebp+this]
.text:000003BE                 mov     edx, [ecx+4B40h]
.text:000003C4                 mov     [ebp+var_8], edx
.text:000003C7                 mov     eax, [ecx+4B44h]
.text:000003CD                 mov     [ebp+var_4], eax
.text:000003D0                 push    100000h         ; unsigned int
.text:000003D5                 mov     ecx, [ebp+this]
.text:000003D8                 mov     edx, [ecx+18h]
.text:000003DB                 push    edx             ; unsigned __int8 *
.text:000003DC                 mov     ecx, [ebp+this] ; this
.text:000003DF                 call    ?CodeSpec@CDecoder@NPpmd@NCompress@@AAEJPAEI@Z ; NCompress::NPpmd::CDecoder::CodeSpec(uchar *,uint)
.text:000003E4                 mov     [ebp+var_C], eax
.text:000003E7                 mov     eax, [ebp+this]
.text:000003EA                 mov     ecx, [eax+4B40h]
.text:000003F0                 sub     ecx, [ebp+var_8]
.text:000003F3                 mov     edx, [eax+4B44h]
.text:000003F9                 sbb     edx, [ebp+var_4]
.text:000003FC                 mov     [ebp+var_10], ecx
.text:000003FF                 mov     eax, [ebp+var_10]
.text:00000402                 push    eax             ; unsigned int
.text:00000403                 mov     ecx, [ebp+this]
.text:00000406                 mov     edx, [ecx+18h]
.text:00000409                 push    edx             ; void *
.text:0000040A                 mov     eax, [ebp+arg_8]
.text:0000040D                 push    eax             ; struct ISequentialOutStream *
.text:0000040E                 call    ?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z ; WriteStream(ISequentialOutStream *,void const *,uint)
.text:00000413                 mov     [ebp+var_14], eax
.text:00000416                 cmp     [ebp+var_14], 0
.text:0000041A                 jz      short loc_424
.text:0000041C                 mov     eax, [ebp+var_14]
.text:0000041F                 jmp     loc_4E4
.text:00000424 ; ---------------------------------------------------------------------------
.text:00000424
.text:00000424 loc_424:                                ; CODE XREF: NCompress::NPpmd::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+CAj
.text:00000424                 mov     ecx, [ebp+var_C]
.text:00000427                 mov     [ebp+var_18], ecx
.text:0000042A                 cmp     [ebp+var_18], 0
.text:0000042E                 jz      short loc_438
.text:00000430                 mov     eax, [ebp+var_18]
.text:00000433                 jmp     loc_4E4
.text:00000438 ; ---------------------------------------------------------------------------
.text:00000438
.text:00000438 loc_438:                                ; CODE XREF: NCompress::NPpmd::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+DEj
.text:00000438                 mov     edx, [ebp+this]
.text:0000043B                 cmp     dword ptr [edx+4B30h], 2
.text:00000442                 jnz     short loc_449
.text:00000444                 jmp     loc_4E2
.text:00000449 ; ---------------------------------------------------------------------------
.text:00000449
.text:00000449 loc_449:                                ; CODE XREF: NCompress::NPpmd::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+F2j
.text:00000449                 cmp     [ebp+arg_14], 0
.text:0000044D                 jz      short loc_492
.text:0000044F                 mov     ecx, [ebp+this]
.text:00000452                 add     ecx, 38h ; '8'  ; this
.text:00000455                 call    ?GetProcessed@CByteInBufWrap@@QBE_KXZ ; CByteInBufWrap::GetProcessed(void)
.text:0000045A                 mov     [ebp+var_24], eax
.text:0000045D                 mov     [ebp+var_20], edx
.text:00000460                 mov     eax, [ebp+this]
.text:00000463                 add     eax, 4B40h
.text:00000468                 mov     esi, esp
.text:0000046A                 push    eax
.text:0000046B                 lea     ecx, [ebp+var_24]
.text:0000046E                 push    ecx
.text:0000046F                 mov     edx, [ebp+arg_14]
.text:00000472                 mov     eax, [edx]
.text:00000474                 mov     ecx, [ebp+arg_14]
.text:00000477                 push    ecx
.text:00000478                 mov     edx, [eax+0Ch]
.text:0000047B                 call    edx
.text:0000047D                 cmp     esi, esp
.text:0000047F                 call    __RTC_CheckEsp
.text:00000484                 mov     [ebp+var_2C], eax
.text:00000487                 cmp     [ebp+var_2C], 0
.text:0000048B                 jz      short loc_492
.text:0000048D                 mov     eax, [ebp+var_2C]
.text:00000490                 jmp     short loc_4E4
.text:00000492 ; ---------------------------------------------------------------------------
.text:00000492
.text:00000492 loc_492:                                ; CODE XREF: NCompress::NPpmd::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+FDj
.text:00000492                                         ; NCompress::NPpmd::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+13Bj
.text:00000492                 mov     eax, [ebp+this]
.text:00000495                 movzx   ecx, byte ptr [eax+4B2Dh]
.text:0000049C                 test    ecx, ecx
.text:0000049E                 jz      loc_3BB
.text:000004A4                 mov     edx, [ebp+this]
.text:000004A7                 mov     eax, [ebp+this]
.text:000004AA                 mov     [ebp+var_30], edx
.text:000004AD                 mov     [ebp+var_34], eax
.text:000004B0                 mov     ecx, [ebp+var_30]
.text:000004B3                 mov     edx, [ebp+var_34]
.text:000004B6                 mov     eax, [ecx+4B44h]
.text:000004BC                 cmp     eax, [edx+4B3Ch]
.text:000004C2                 jb      loc_3BB
.text:000004C8                 ja      short loc_4E2
.text:000004CA                 mov     ecx, [ebp+var_30]
.text:000004CD                 mov     edx, [ebp+var_34]
.text:000004D0                 mov     eax, [ecx+4B40h]
.text:000004D6                 cmp     eax, [edx+4B38h]
.text:000004DC                 jb      loc_3BB
.text:000004E2
.text:000004E2 loc_4E2:                                ; CODE XREF: NCompress::NPpmd::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+F4j
.text:000004E2                                         ; NCompress::NPpmd::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+178j
.text:000004E2                 xor     eax, eax
.text:000004E4
.text:000004E4 loc_4E4:                                ; CODE XREF: NCompress::NPpmd::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+3Ej
.text:000004E4                                         ; NCompress::NPpmd::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+CFj ...
.text:000004E4                 push    edx
.text:000004E5                 mov     ecx, ebp
.text:000004E7                 push    eax
.text:000004E8                 lea     edx, $LN17
.text:000004EE                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000004F3                 pop     eax
.text:000004F4                 pop     edx
.text:000004F5                 pop     edi
.text:000004F6                 pop     esi
.text:000004F7                 add     esp, 34h
.text:000004FA                 cmp     ebp, esp
.text:000004FC                 call    __RTC_CheckEsp
.text:00000501                 mov     esp, ebp
.text:00000503                 pop     ebp
.text:00000504                 retn    18h
.text:00000504 ?Code@CDecoder@NPpmd@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z endp
.text:00000504
.text:00000504 ; ---------------------------------------------------------------------------
.text:00000507                 align 4
.text:00000508 $LN17           dd 1                    ; DATA XREF: NCompress::NPpmd::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+198o
.text:0000050C                 dd offset $LN16
.text:00000510 $LN16           dd 0FFFFFFDCh, 8        ; DATA XREF: .text:0000050Co
.text:00000518                 dd offset $LN15         ; "inSize"
.text:0000051C $LN15           db 'inSize',0           ; DATA XREF: .text:00000518o
.text:00000523                 align 10h
.text:00000530
.text:00000530 ; =============== S U B R O U T I N E =======================================
.text:00000530
.text:00000530 ; Attributes: bp-based frame
.text:00000530
.text:00000530 ; __int32 __stdcall NCompress::NPpmd::CDecoder::SetOutStreamSize(NCompress::NPpmd::CDecoder *this, const unsigned __int64 *)
.text:00000530                 public ?SetOutStreamSize@CDecoder@NPpmd@NCompress@@UAGJPB_K@Z
.text:00000530 ?SetOutStreamSize@CDecoder@NPpmd@NCompress@@UAGJPB_K@Z proc near
.text:00000530                                         ; DATA XREF: .rdata:000006B8o
.text:00000530
.text:00000530 this            = dword ptr  8
.text:00000530 arg_4           = dword ptr  0Ch
.text:00000530
.text:00000530                 push    ebp
.text:00000531                 mov     ebp, esp
.text:00000533                 xor     eax, eax
.text:00000535                 cmp     [ebp+arg_4], 0
.text:00000539                 setnz   al
.text:0000053C                 mov     ecx, [ebp+this]
.text:0000053F                 mov     [ecx+4B21h], al
.text:00000545                 mov     edx, [ebp+this]
.text:00000548                 movzx   eax, byte ptr [edx+4B21h]
.text:0000054F                 test    eax, eax
.text:00000551                 jz      short loc_56A
.text:00000553                 mov     ecx, [ebp+this]
.text:00000556                 mov     edx, [ebp+arg_4]
.text:00000559                 mov     eax, [edx]
.text:0000055B                 mov     [ecx+4B2Ch], eax
.text:00000561                 mov     edx, [edx+4]
.text:00000564                 mov     [ecx+4B30h], edx
.text:0000056A
.text:0000056A loc_56A:                                ; CODE XREF: NCompress::NPpmd::CDecoder::SetOutStreamSize(unsigned __int64 const *)+21j
.text:0000056A                 mov     eax, [ebp+this]
.text:0000056D                 mov     dword ptr [eax+4B34h], 0
.text:00000577                 mov     dword ptr [eax+4B38h], 0
.text:00000581                 mov     ecx, [ebp+this]
.text:00000584                 mov     dword ptr [ecx+4B24h], 0
.text:0000058E                 xor     eax, eax
.text:00000590                 pop     ebp
.text:00000591                 retn    8
.text:00000591 ?SetOutStreamSize@CDecoder@NPpmd@NCompress@@UAGJPB_K@Z endp
.text:00000591
.text:00000591 ; ---------------------------------------------------------------------------
.text:00000594                 align 10h
.text:000005A0
.text:000005A0 ; =============== S U B R O U T I N E =======================================
.text:000005A0
.text:000005A0 ; Attributes: bp-based frame
.text:000005A0
.text:000005A0 ; __int32 __stdcall NCompress::NPpmd::CDecoder::SetInStream(NCompress::NPpmd::CDecoder *this, struct ISequentialInStream *)
.text:000005A0                 public ?SetInStream@CDecoder@NPpmd@NCompress@@UAGJPAUISequentialInStream@@@Z
.text:000005A0 ?SetInStream@CDecoder@NPpmd@NCompress@@UAGJPAUISequentialInStream@@@Z proc near
.text:000005A0                                         ; DATA XREF: .rdata:000006CCo
.text:000005A0
.text:000005A0 this            = dword ptr  8
.text:000005A0 arg_4           = dword ptr  0Ch
.text:000005A0
.text:000005A0                 push    ebp
.text:000005A1                 mov     ebp, esp
.text:000005A3                 mov     eax, [ebp+arg_4]
.text:000005A6                 push    eax
.text:000005A7                 mov     ecx, [ebp+this]
.text:000005AA                 add     ecx, 4B40h
.text:000005B0                 call    ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)
.text:000005B5                 mov     ecx, [ebp+this]
.text:000005B8                 mov     edx, [ebp+arg_4]
.text:000005BB                 mov     [ecx+44h], edx
.text:000005BE                 xor     eax, eax
.text:000005C0                 cmp     ebp, esp
.text:000005C2                 call    __RTC_CheckEsp
.text:000005C7                 pop     ebp
.text:000005C8                 retn    8
.text:000005C8 ?SetInStream@CDecoder@NPpmd@NCompress@@UAGJPAUISequentialInStream@@@Z endp
.text:000005C8
.text:000005C8 ; ---------------------------------------------------------------------------
.text:000005CB                 align 10h
.text:000005D0
.text:000005D0 ; =============== S U B R O U T I N E =======================================
.text:000005D0
.text:000005D0 ; Attributes: bp-based frame
.text:000005D0
.text:000005D0 ; __int32 __stdcall NCompress::NPpmd::CDecoder::ReleaseInStream(NCompress::NPpmd::CDecoder *this)
.text:000005D0                 public ?ReleaseInStream@CDecoder@NPpmd@NCompress@@UAGJXZ
.text:000005D0 ?ReleaseInStream@CDecoder@NPpmd@NCompress@@UAGJXZ proc near
.text:000005D0                                         ; DATA XREF: .rdata:000006D0o
.text:000005D0
.text:000005D0 this            = dword ptr  8
.text:000005D0
.text:000005D0                 push    ebp
.text:000005D1                 mov     ebp, esp
.text:000005D3                 mov     ecx, [ebp+this]
.text:000005D6                 add     ecx, 4B40h
.text:000005DC                 call    ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ ; CMyComPtr<ISequentialInStream>::Release(void)
.text:000005E1                 xor     eax, eax
.text:000005E3                 cmp     ebp, esp
.text:000005E5                 call    __RTC_CheckEsp
.text:000005EA                 pop     ebp
.text:000005EB                 retn    4
.text:000005EB ?ReleaseInStream@CDecoder@NPpmd@NCompress@@UAGJXZ endp
.text:000005EB
.text:000005EB ; ---------------------------------------------------------------------------
.text:000005EE                 align 10h
.text:000005F0
.text:000005F0 ; =============== S U B R O U T I N E =======================================
.text:000005F0
.text:000005F0 ; Attributes: bp-based frame
.text:000005F0
.text:000005F0 ; __int32 __stdcall NCompress::NPpmd::CDecoder::Read(NCompress::NPpmd::CDecoder *this, unsigned __int8 *, unsigned int, unsigned int *)
.text:000005F0                 public ?Read@CDecoder@NPpmd@NCompress@@UAGJPAXIPAI@Z
.text:000005F0 ?Read@CDecoder@NPpmd@NCompress@@UAGJPAXIPAI@Z proc near
.text:000005F0                                         ; DATA XREF: .rdata:000006A4o
.text:000005F0
.text:000005F0 var_C           = dword ptr -0Ch
.text:000005F0 var_8           = dword ptr -8
.text:000005F0 var_4           = dword ptr -4
.text:000005F0 this            = dword ptr  8
.text:000005F0 arg_4           = dword ptr  0Ch
.text:000005F0 arg_8           = dword ptr  10h
.text:000005F0 arg_C           = dword ptr  14h
.text:000005F0
.text:000005F0                 push    ebp
.text:000005F1                 mov     ebp, esp
.text:000005F3                 sub     esp, 0Ch
.text:000005F6                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000005FD                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000604                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000060B                 mov     eax, [ebp+this]
.text:0000060E                 mov     ecx, [eax+4B30h]
.text:00000614                 mov     [ebp+var_8], ecx
.text:00000617                 mov     edx, [eax+4B34h]
.text:0000061D                 mov     [ebp+var_4], edx
.text:00000620                 mov     eax, [ebp+arg_8]
.text:00000623                 push    eax             ; unsigned int
.text:00000624                 mov     ecx, [ebp+arg_4]
.text:00000627                 push    ecx             ; unsigned __int8 *
.text:00000628                 mov     ecx, [ebp+this]
.text:0000062B                 sub     ecx, 10h        ; this
.text:0000062E                 call    ?CodeSpec@CDecoder@NPpmd@NCompress@@AAEJPAEI@Z ; NCompress::NPpmd::CDecoder::CodeSpec(uchar *,uint)
.text:00000633                 mov     [ebp+var_C], eax
.text:00000636                 cmp     [ebp+arg_C], 0
.text:0000063A                 jz      short loc_656
.text:0000063C                 mov     edx, [ebp+this]
.text:0000063F                 mov     eax, [edx+4B30h]
.text:00000645                 sub     eax, [ebp+var_8]
.text:00000648                 mov     ecx, [edx+4B34h]
.text:0000064E                 sbb     ecx, [ebp+var_4]
.text:00000651                 mov     edx, [ebp+arg_C]
.text:00000654                 mov     [edx], eax
.text:00000656
.text:00000656 loc_656:                                ; CODE XREF: NCompress::NPpmd::CDecoder::Read(void *,uint,uint *)+4Aj
.text:00000656                 mov     eax, [ebp+var_C]
.text:00000659                 add     esp, 0Ch
.text:0000065C                 cmp     ebp, esp
.text:0000065E                 call    __RTC_CheckEsp
.text:00000663                 mov     esp, ebp
.text:00000665                 pop     ebp
.text:00000666                 retn    10h
.text:00000666 ?Read@CDecoder@NPpmd@NCompress@@UAGJPAXIPAI@Z endp
.text:00000666
.text:00000666 ; ---------------------------------------------------------------------------
.text:00000669                 align 4
.text:00000669 _text           ends
.text:00000669
.text$x:0000066C ; ===========================================================================
.text$x:0000066C
.text$x:0000066C ; Segment type: Pure code
.text$x:0000066C ; Segment permissions: Read/Execute
.text$x:0000066C _text$x         segment para public 'CODE' use32
.text$x:0000066C                 assume cs:_text$x
.text$x:0000066C                 ;org 66Ch
.text$x:0000066C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000066C
.text$x:0000066C ; =============== S U B R O U T I N E =======================================
.text$x:0000066C
.text$x:0000066C
.text$x:0000066C __unwindfunclet$??1CDecoder@NPpmd@NCompress@@QAE@XZ$0 proc near
.text$x:0000066C                                         ; DATA XREF: .xdata$x:00000700o
.text$x:0000066C                 mov     ecx, [ebp-10h]
.text$x:0000066F                 add     ecx, 38h ; '8'  ; this
.text$x:00000672                 jmp     ??1CByteInBufWrap@@QAE@XZ ; CByteInBufWrap::~CByteInBufWrap(void)
.text$x:00000672 __unwindfunclet$??1CDecoder@NPpmd@NCompress@@QAE@XZ$0 endp
.text$x:00000672
.text$x:00000677
.text$x:00000677 ; =============== S U B R O U T I N E =======================================
.text$x:00000677
.text$x:00000677
.text$x:00000677 __ehhandler$??1CDecoder@NPpmd@NCompress@@QAE@XZ proc near
.text$x:00000677                                         ; DATA XREF: NCompress::NPpmd::CDecoder::~CDecoder(void)+5o
.text$x:00000677
.text$x:00000677 arg_4           = dword ptr  8
.text$x:00000677
.text$x:00000677                 mov     edx, [esp+arg_4]
.text$x:0000067B                 lea     eax, [edx+0Ch]
.text$x:0000067E                 mov     ecx, [edx-8]
.text$x:00000681                 xor     ecx, eax
.text$x:00000683                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000688                 mov     eax, offset __ehfuncinfo$??1CDecoder@NPpmd@NCompress@@QAE@XZ
.text$x:0000068D                 jmp     ___CxxFrameHandler3
.text$x:0000068D __ehhandler$??1CDecoder@NPpmd@NCompress@@QAE@XZ endp
.text$x:0000068D
.text$x:0000068D ; ---------------------------------------------------------------------------
.text$x:00000692                 align 4
.text$x:00000692 _text$x         ends
.text$x:00000692
.rdata:00000694 ; ===========================================================================
.rdata:00000694
.rdata:00000694 ; Segment type: Pure data
.rdata:00000694 ; Segment permissions: Read
.rdata:00000694 _rdata          segment dword public 'DATA' use32
.rdata:00000694                 assume cs:_rdata
.rdata:00000694                 ;org 694h
.rdata:00000694 ; COMDAT (pick largest)
.rdata:00000694                 dd offset ??_R4CDecoder@NPpmd@NCompress@@6BISequentialInStream@@@ ; const NCompress::NPpmd::CDecoder::`RTTI Complete Object Locator'{for `ISequentialInStream'}
.rdata:00000698                 public ??_7CDecoder@NPpmd@NCompress@@6BISequentialInStream@@@
.rdata:00000698 ; const NCompress::NPpmd::CDecoder::`vftable'{for `ISequentialInStream'}
.rdata:00000698 ??_7CDecoder@NPpmd@NCompress@@6BISequentialInStream@@@ dd offset ?QueryInterface@CDecoder@NPpmd@NCompress@@WBA@AGJABU_GUID@@PAPAX@Z
.rdata:00000698                                         ; DATA XREF: NCompress::NPpmd::CDecoder::~CDecoder(void)+57o
.rdata:00000698                                         ; [thunk]:NCompress::NPpmd::CDecoder::QueryInterface`adjustor{16}' (_GUID const &,void * *)
.rdata:0000069C                 dd offset ?AddRef@CDecoder@NPpmd@NCompress@@WBA@AGKXZ ; [thunk]:NCompress::NPpmd::CDecoder::AddRef`adjustor{16}' (void)
.rdata:000006A0                 dd offset ?Release@CDecoder@NPpmd@NCompress@@WBA@AGKXZ ; [thunk]:NCompress::NPpmd::CDecoder::Release`adjustor{16}' (void)
.rdata:000006A4                 dd offset ?Read@CDecoder@NPpmd@NCompress@@UAGJPAXIPAI@Z ; NCompress::NPpmd::CDecoder::Read(void *,uint,uint *)
.rdata:000006A4 _rdata          ends
.rdata:000006A4
.rdata:000006A8 ; ===========================================================================
.rdata:000006A8
.rdata:000006A8 ; Segment type: Pure data
.rdata:000006A8 ; Segment permissions: Read
.rdata:000006A8 _rdata          segment dword public 'DATA' use32
.rdata:000006A8                 assume cs:_rdata
.rdata:000006A8                 ;org 6A8h
.rdata:000006A8 ; COMDAT (pick largest)
.rdata:000006A8                 dd offset ??_R4CDecoder@NPpmd@NCompress@@6BICompressSetOutStreamSize@@@ ; const NCompress::NPpmd::CDecoder::`RTTI Complete Object Locator'{for `ICompressSetOutStreamSize'}
.rdata:000006AC                 public ??_7CDecoder@NPpmd@NCompress@@6BICompressSetOutStreamSize@@@
.rdata:000006AC ; const NCompress::NPpmd::CDecoder::`vftable'{for `ICompressSetOutStreamSize'}
.rdata:000006AC ??_7CDecoder@NPpmd@NCompress@@6BICompressSetOutStreamSize@@@ dd offset ?QueryInterface@CDecoder@NPpmd@NCompress@@WM@AGJABU_GUID@@PAPAX@Z
.rdata:000006AC                                         ; DATA XREF: NCompress::NPpmd::CDecoder::~CDecoder(void)+4Do
.rdata:000006AC                                         ; [thunk]:NCompress::NPpmd::CDecoder::QueryInterface`adjustor{12}' (_GUID const &,void * *)
.rdata:000006B0                 dd offset ?AddRef@CDecoder@NPpmd@NCompress@@WM@AGKXZ ; [thunk]:NCompress::NPpmd::CDecoder::AddRef`adjustor{12}' (void)
.rdata:000006B4                 dd offset ?Release@CDecoder@NPpmd@NCompress@@WM@AGKXZ ; [thunk]:NCompress::NPpmd::CDecoder::Release`adjustor{12}' (void)
.rdata:000006B8                 dd offset ?SetOutStreamSize@CDecoder@NPpmd@NCompress@@UAGJPB_K@Z ; NCompress::NPpmd::CDecoder::SetOutStreamSize(unsigned __int64 const *)
.rdata:000006B8 _rdata          ends
.rdata:000006B8
.rdata:000006BC ; ===========================================================================
.rdata:000006BC
.rdata:000006BC ; Segment type: Pure data
.rdata:000006BC ; Segment permissions: Read
.rdata:000006BC _rdata          segment dword public 'DATA' use32
.rdata:000006BC                 assume cs:_rdata
.rdata:000006BC                 ;org 6BCh
.rdata:000006BC ; COMDAT (pick largest)
.rdata:000006BC                 dd offset ??_R4CDecoder@NPpmd@NCompress@@6BICompressSetInStream@@@ ; const NCompress::NPpmd::CDecoder::`RTTI Complete Object Locator'{for `ICompressSetInStream'}
.rdata:000006C0                 public ??_7CDecoder@NPpmd@NCompress@@6BICompressSetInStream@@@
.rdata:000006C0 ; const NCompress::NPpmd::CDecoder::`vftable'{for `ICompressSetInStream'}
.rdata:000006C0 ??_7CDecoder@NPpmd@NCompress@@6BICompressSetInStream@@@ dd offset ?QueryInterface@CDecoder@NPpmd@NCompress@@W7AGJABU_GUID@@PAPAX@Z
.rdata:000006C0                                         ; DATA XREF: NCompress::NPpmd::CDecoder::~CDecoder(void)+43o
.rdata:000006C0                                         ; [thunk]:NCompress::NPpmd::CDecoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)
.rdata:000006C4                 dd offset ?AddRef@CDecoder@NPpmd@NCompress@@W7AGKXZ ; [thunk]:NCompress::NPpmd::CDecoder::AddRef`adjustor{8}' (void)
.rdata:000006C8                 dd offset ?Release@CDecoder@NPpmd@NCompress@@W7AGKXZ ; [thunk]:NCompress::NPpmd::CDecoder::Release`adjustor{8}' (void)
.rdata:000006CC                 dd offset ?SetInStream@CDecoder@NPpmd@NCompress@@UAGJPAUISequentialInStream@@@Z ; NCompress::NPpmd::CDecoder::SetInStream(ISequentialInStream *)
.rdata:000006D0                 dd offset ?ReleaseInStream@CDecoder@NPpmd@NCompress@@UAGJXZ ; NCompress::NPpmd::CDecoder::ReleaseInStream(void)
.rdata:000006D0 _rdata          ends
.rdata:000006D0
.rdata:000006D4 ; ===========================================================================
.rdata:000006D4
.rdata:000006D4 ; Segment type: Pure data
.rdata:000006D4 ; Segment permissions: Read
.rdata:000006D4 _rdata          segment dword public 'DATA' use32
.rdata:000006D4                 assume cs:_rdata
.rdata:000006D4                 ;org 6D4h
.rdata:000006D4 ; COMDAT (pick largest)
.rdata:000006D4                 dd offset ??_R4CDecoder@NPpmd@NCompress@@6BICompressSetDecoderProperties2@@@ ; const NCompress::NPpmd::CDecoder::`RTTI Complete Object Locator'{for `ICompressSetDecoderProperties2'}
.rdata:000006D8                 public ??_7CDecoder@NPpmd@NCompress@@6BICompressSetDecoderProperties2@@@
.rdata:000006D8 ; const NCompress::NPpmd::CDecoder::`vftable'{for `ICompressSetDecoderProperties2'}
.rdata:000006D8 ??_7CDecoder@NPpmd@NCompress@@6BICompressSetDecoderProperties2@@@ dd offset ?QueryInterface@CDecoder@NPpmd@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.rdata:000006D8                                         ; DATA XREF: NCompress::NPpmd::CDecoder::~CDecoder(void)+39o
.rdata:000006D8                                         ; [thunk]:NCompress::NPpmd::CDecoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:000006DC                 dd offset ?AddRef@CDecoder@NPpmd@NCompress@@W3AGKXZ ; [thunk]:NCompress::NPpmd::CDecoder::AddRef`adjustor{4}' (void)
.rdata:000006E0                 dd offset ?Release@CDecoder@NPpmd@NCompress@@W3AGKXZ ; [thunk]:NCompress::NPpmd::CDecoder::Release`adjustor{4}' (void)
.rdata:000006E4                 dd offset ?SetDecoderProperties2@CDecoder@NPpmd@NCompress@@UAGJPBEI@Z ; NCompress::NPpmd::CDecoder::SetDecoderProperties2(uchar const *,uint)
.rdata:000006E4 _rdata          ends
.rdata:000006E4
.rdata:000006E8 ; ===========================================================================
.rdata:000006E8
.rdata:000006E8 ; Segment type: Pure data
.rdata:000006E8 ; Segment permissions: Read
.rdata:000006E8 _rdata          segment dword public 'DATA' use32
.rdata:000006E8                 assume cs:_rdata
.rdata:000006E8                 ;org 6E8h
.rdata:000006E8 ; COMDAT (pick largest)
.rdata:000006E8                 dd offset ??_R4CDecoder@NPpmd@NCompress@@6BICompressCoder@@@ ; const NCompress::NPpmd::CDecoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata:000006EC                 public ??_7CDecoder@NPpmd@NCompress@@6BICompressCoder@@@
.rdata:000006EC ; const NCompress::NPpmd::CDecoder::`vftable'{for `ICompressCoder'}
.rdata:000006EC ??_7CDecoder@NPpmd@NCompress@@6BICompressCoder@@@ dd offset ?QueryInterface@CDecoder@NPpmd@NCompress@@UAGJABU_GUID@@PAPAX@Z
.rdata:000006EC                                         ; DATA XREF: NCompress::NPpmd::CDecoder::~CDecoder(void)+30o
.rdata:000006EC                                         ; NCompress::NPpmd::CDecoder::QueryInterface(_GUID const &,void * *)
.rdata:000006F0                 dd offset ?AddRef@CDecoder@NPpmd@NCompress@@UAGKXZ ; NCompress::NPpmd::CDecoder::AddRef(void)
.rdata:000006F4                 dd offset ?Release@CDecoder@NPpmd@NCompress@@UAGKXZ ; NCompress::NPpmd::CDecoder::Release(void)
.rdata:000006F8                 dd offset ?Code@CDecoder@NPpmd@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ; NCompress::NPpmd::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)
.rdata:000006F8 _rdata          ends
.rdata:000006F8
.xdata$x:000006FC ; ===========================================================================
.xdata$x:000006FC
.xdata$x:000006FC ; Segment type: Pure data
.xdata$x:000006FC ; Segment permissions: Read
.xdata$x:000006FC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000006FC                 assume cs:_xdata$x
.xdata$x:000006FC                 ;org 6FCh
.xdata$x:000006FC __unwindtable$??1CDecoder@NPpmd@NCompress@@QAE@XZ db 0FFh
.xdata$x:000006FC                                         ; DATA XREF: .xdata$x:0000070Co
.xdata$x:000006FD                 db 0FFh
.xdata$x:000006FE                 db 0FFh
.xdata$x:000006FF                 db 0FFh
.xdata$x:00000700                 dd offset __unwindfunclet$??1CDecoder@NPpmd@NCompress@@QAE@XZ$0
.xdata$x:00000704 __ehfuncinfo$??1CDecoder@NPpmd@NCompress@@QAE@XZ db  22h ; "
.xdata$x:00000704                                         ; DATA XREF: __ehhandler$??1CDecoder@NPpmd@NCompress@@QAE@XZ+11o
.xdata$x:00000705                 db    5
.xdata$x:00000706                 db  93h ; ô
.xdata$x:00000707                 db  19h
.xdata$x:00000708                 db    1
.xdata$x:00000709                 db    0
.xdata$x:0000070A                 db    0
.xdata$x:0000070B                 db    0
.xdata$x:0000070C                 dd offset __unwindtable$??1CDecoder@NPpmd@NCompress@@QAE@XZ
.xdata$x:00000710                 db    0
.xdata$x:00000711                 db    0
.xdata$x:00000712                 db    0
.xdata$x:00000713                 db    0
.xdata$x:00000714                 db    0
.xdata$x:00000715                 db    0
.xdata$x:00000716                 db    0
.xdata$x:00000717                 db    0
.xdata$x:00000718                 db    0
.xdata$x:00000719                 db    0
.xdata$x:0000071A                 db    0
.xdata$x:0000071B                 db    0
.xdata$x:0000071C                 db    0
.xdata$x:0000071D                 db    0
.xdata$x:0000071E                 db    0
.xdata$x:0000071F                 db    0
.xdata$x:00000720                 db    0
.xdata$x:00000721                 db    0
.xdata$x:00000722                 db    0
.xdata$x:00000723                 db    0
.xdata$x:00000724                 db    1
.xdata$x:00000725                 db    0
.xdata$x:00000726                 db    0
.xdata$x:00000727                 db    0
.xdata$x:00000727 _xdata$x        ends
.xdata$x:00000727
.rtc$TMZ:00000728 ; ===========================================================================
.rtc$TMZ:00000728
.rtc$TMZ:00000728 ; Segment type: Pure data
.rtc$TMZ:00000728 ; Segment permissions: Read
.rtc$TMZ:00000728 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000728                 assume cs:_rtc$TMZ
.rtc$TMZ:00000728                 ;org 728h
.rtc$TMZ:00000728 ; COMDAT (pick any)
.rtc$TMZ:00000728 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000728 _rtc$TMZ        ends
.rtc$TMZ:00000728
.rtc$IMZ:0000072C ; ===========================================================================
.rtc$IMZ:0000072C
.rtc$IMZ:0000072C ; Segment type: Pure data
.rtc$IMZ:0000072C ; Segment permissions: Read
.rtc$IMZ:0000072C _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:0000072C                 assume cs:_rtc$IMZ
.rtc$IMZ:0000072C                 ;org 72Ch
.rtc$IMZ:0000072C ; COMDAT (pick any)
.rtc$IMZ:0000072C __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:0000072C _rtc$IMZ        ends
.rtc$IMZ:0000072C
.rdata$r:00000730 ; ===========================================================================
.rdata$r:00000730
.rdata$r:00000730 ; Segment type: Pure data
.rdata$r:00000730 ; Segment permissions: Read
.rdata$r:00000730 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000730                 assume cs:_rdata$r
.rdata$r:00000730                 ;org 730h
.rdata$r:00000730 ; COMDAT (pick any)
.rdata$r:00000730                 public ??_R4CDecoder@NPpmd@NCompress@@6BICompressCoder@@@
.rdata$r:00000730 ; const NCompress::NPpmd::CDecoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata$r:00000730 ??_R4CDecoder@NPpmd@NCompress@@6BICompressCoder@@@ db    0
.rdata$r:00000730                                         ; DATA XREF: .rdata:000006E8o
.rdata$r:00000731                 db    0
.rdata$r:00000732                 db    0
.rdata$r:00000733                 db    0
.rdata$r:00000734                 db    0
.rdata$r:00000735                 db    0
.rdata$r:00000736                 db    0
.rdata$r:00000737                 db    0
.rdata$r:00000738                 db    0
.rdata$r:00000739                 db    0
.rdata$r:0000073A                 db    0
.rdata$r:0000073B                 db    0
.rdata$r:0000073C                 dd offset ??_R0?AVCDecoder@NPpmd@NCompress@@@8 ; NCompress::NPpmd::CDecoder `RTTI Type Descriptor'
.rdata$r:00000740                 dd offset ??_R3CDecoder@NPpmd@NCompress@@8 ; NCompress::NPpmd::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000740 _rdata$r        ends
.rdata$r:00000740
.data:00000744 ; ===========================================================================
.data:00000744
.data:00000744 ; Segment type: Pure data
.data:00000744 ; Segment permissions: Read/Write
.data:00000744 _data           segment dword public 'DATA' use32
.data:00000744                 assume cs:_data
.data:00000744                 ;org 744h
.data:00000744 ; COMDAT (pick any)
.data:00000744                 public ??_R0?AVCDecoder@NPpmd@NCompress@@@8
.data:00000744 ; class NCompress::NPpmd::CDecoder `RTTI Type Descriptor'
.data:00000744 ??_R0?AVCDecoder@NPpmd@NCompress@@@8 dd offset ??_7type_info@@6B@
.data:00000744                                         ; DATA XREF: .rdata$r:0000073Co
.data:00000744                                         ; .rdata$r:NCompress::NPpmd::CDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00000744                                         ; const type_info::`vftable'
.data:00000748                 db    0
.data:00000749                 db    0
.data:0000074A                 db    0
.data:0000074B                 db    0
.data:0000074C                 db  2Eh ; .
.data:0000074D                 db  3Fh ; ?
.data:0000074E                 db  41h ; A
.data:0000074F                 db  56h ; V
.data:00000750                 db  43h ; C
.data:00000751                 db  44h ; D
.data:00000752                 db  65h ; e
.data:00000753                 db  63h ; c
.data:00000754                 db  6Fh ; o
.data:00000755                 db  64h ; d
.data:00000756                 db  65h ; e
.data:00000757                 db  72h ; r
.data:00000758                 db  40h ; @
.data:00000759                 db  4Eh ; N
.data:0000075A                 db  50h ; P
.data:0000075B                 db  70h ; p
.data:0000075C                 db  6Dh ; m
.data:0000075D                 db  64h ; d
.data:0000075E                 db  40h ; @
.data:0000075F                 db  4Eh ; N
.data:00000760                 db  43h ; C
.data:00000761                 db  6Fh ; o
.data:00000762                 db  6Dh ; m
.data:00000763                 db  70h ; p
.data:00000764                 db  72h ; r
.data:00000765                 db  65h ; e
.data:00000766                 db  73h ; s
.data:00000767                 db  73h ; s
.data:00000768                 db  40h ; @
.data:00000769                 db  40h ; @
.data:0000076A                 db    0
.data:0000076B                 align 4
.data:0000076B _data           ends
.data:0000076B
.rdata$r:0000076C ; ===========================================================================
.rdata$r:0000076C
.rdata$r:0000076C ; Segment type: Pure data
.rdata$r:0000076C ; Segment permissions: Read
.rdata$r:0000076C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000076C                 assume cs:_rdata$r
.rdata$r:0000076C                 ;org 76Ch
.rdata$r:0000076C ; COMDAT (pick any)
.rdata$r:0000076C                 public ??_R3CDecoder@NPpmd@NCompress@@8
.rdata$r:0000076C ; NCompress::NPpmd::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000076C ??_R3CDecoder@NPpmd@NCompress@@8 db    0 ; DATA XREF: .rdata$r:00000740o
.rdata$r:0000076C                                         ; .rdata$r:000007C8o ...
.rdata$r:0000076D                 db    0
.rdata$r:0000076E                 db    0
.rdata$r:0000076F                 db    0
.rdata$r:00000770                 db    5
.rdata$r:00000771                 db    0
.rdata$r:00000772                 db    0
.rdata$r:00000773                 db    0
.rdata$r:00000774                 db  0Ch
.rdata$r:00000775                 db    0
.rdata$r:00000776                 db    0
.rdata$r:00000777                 db    0
.rdata$r:00000778                 dd offset ??_R2CDecoder@NPpmd@NCompress@@8 ; NCompress::NPpmd::CDecoder::`RTTI Base Class Array'
.rdata$r:00000778 _rdata$r        ends
.rdata$r:00000778
.rdata$r:0000077C ; ===========================================================================
.rdata$r:0000077C
.rdata$r:0000077C ; Segment type: Pure data
.rdata$r:0000077C ; Segment permissions: Read
.rdata$r:0000077C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000077C                 assume cs:_rdata$r
.rdata$r:0000077C                 ;org 77Ch
.rdata$r:0000077C ; COMDAT (pick any)
.rdata$r:0000077C                 public ??_R2CDecoder@NPpmd@NCompress@@8
.rdata$r:0000077C ; NCompress::NPpmd::CDecoder::`RTTI Base Class Array'
.rdata$r:0000077C ??_R2CDecoder@NPpmd@NCompress@@8 dd offset ??_R1A@?0A@EA@CDecoder@NPpmd@NCompress@@8
.rdata$r:0000077C                                         ; DATA XREF: .rdata$r:00000778o
.rdata$r:0000077C                                         ; NCompress::NPpmd::CDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000780                 dd offset ??_R1A@?0A@EA@ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000784                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:00000788                 dd offset ??_R13?0A@EA@ICompressSetDecoderProperties2@@8 ; ICompressSetDecoderProperties2::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:0000078C                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:00000790                 dd offset ??_R17?0A@EA@ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:00000794                 dd offset ??_R17?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
.rdata$r:00000798                 dd offset ??_R1M@?0A@EA@ICompressSetOutStreamSize@@8 ; ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (12,-1,0,64)'
.rdata$r:0000079C                 dd offset ??_R1M@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (12,-1,0,66)'
.rdata$r:000007A0                 dd offset ??_R1BA@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (16,-1,0,64)'
.rdata$r:000007A4                 dd offset ??_R1BA@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (16,-1,0,66)'
.rdata$r:000007A8                 dd offset ??_R1BE@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (20,-1,0,64)'
.rdata$r:000007AC                 db    0
.rdata$r:000007AD                 align 10h
.rdata$r:000007AD _rdata$r        ends
.rdata$r:000007AD
.rdata$r:000007B0 ; ===========================================================================
.rdata$r:000007B0
.rdata$r:000007B0 ; Segment type: Pure data
.rdata$r:000007B0 ; Segment permissions: Read
.rdata$r:000007B0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000007B0                 assume cs:_rdata$r
.rdata$r:000007B0                 ;org 7B0h
.rdata$r:000007B0 ; COMDAT (pick any)
.rdata$r:000007B0                 public ??_R1A@?0A@EA@CDecoder@NPpmd@NCompress@@8
.rdata$r:000007B0 ; NCompress::NPpmd::CDecoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000007B0 ??_R1A@?0A@EA@CDecoder@NPpmd@NCompress@@8 dd offset ??_R0?AVCDecoder@NPpmd@NCompress@@@8
.rdata$r:000007B0                                         ; DATA XREF: .rdata$r:NCompress::NPpmd::CDecoder::`RTTI Base Class Array'o
.rdata$r:000007B0                                         ; NCompress::NPpmd::CDecoder `RTTI Type Descriptor'
.rdata$r:000007B4                 db  0Bh
.rdata$r:000007B5                 db    0
.rdata$r:000007B6                 db    0
.rdata$r:000007B7                 db    0
.rdata$r:000007B8                 db    0
.rdata$r:000007B9                 db    0
.rdata$r:000007BA                 db    0
.rdata$r:000007BB                 db    0
.rdata$r:000007BC                 db 0FFh
.rdata$r:000007BD                 db 0FFh
.rdata$r:000007BE                 db 0FFh
.rdata$r:000007BF                 db 0FFh
.rdata$r:000007C0                 db    0
.rdata$r:000007C1                 db    0
.rdata$r:000007C2                 db    0
.rdata$r:000007C3                 db    0
.rdata$r:000007C4                 db  40h ; @
.rdata$r:000007C5                 db    0
.rdata$r:000007C6                 db    0
.rdata$r:000007C7                 db    0
.rdata$r:000007C8                 dd offset ??_R3CDecoder@NPpmd@NCompress@@8 ; NCompress::NPpmd::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000007C8 _rdata$r        ends
.rdata$r:000007C8
.rdata$r:000007CC ; ===========================================================================
.rdata$r:000007CC
.rdata$r:000007CC ; Segment type: Pure data
.rdata$r:000007CC ; Segment permissions: Read
.rdata$r:000007CC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000007CC                 assume cs:_rdata$r
.rdata$r:000007CC                 ;org 7CCh
.rdata$r:000007CC ; COMDAT (pick any)
.rdata$r:000007CC                 public ??_R1A@?0A@EA@ICompressCoder@@8
.rdata$r:000007CC ; ICompressCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000007CC ??_R1A@?0A@EA@ICompressCoder@@8 dd offset ??_R0?AUICompressCoder@@@8
.rdata$r:000007CC                                         ; DATA XREF: .rdata$r:00000780o
.rdata$r:000007CC                                         ; .rdata$r:ICompressCoder::`RTTI Base Class Array'o
.rdata$r:000007CC                                         ; ICompressCoder `RTTI Type Descriptor'
.rdata$r:000007D0                 db    1
.rdata$r:000007D1                 db    0
.rdata$r:000007D2                 db    0
.rdata$r:000007D3                 db    0
.rdata$r:000007D4                 db    0
.rdata$r:000007D5                 db    0
.rdata$r:000007D6                 db    0
.rdata$r:000007D7                 db    0
.rdata$r:000007D8                 db 0FFh
.rdata$r:000007D9                 db 0FFh
.rdata$r:000007DA                 db 0FFh
.rdata$r:000007DB                 db 0FFh
.rdata$r:000007DC                 db    0
.rdata$r:000007DD                 db    0
.rdata$r:000007DE                 db    0
.rdata$r:000007DF                 db    0
.rdata$r:000007E0                 db  40h ; @
.rdata$r:000007E1                 db    0
.rdata$r:000007E2                 db    0
.rdata$r:000007E3                 db    0
.rdata$r:000007E4                 dd offset ??_R3ICompressCoder@@8 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000007E4 _rdata$r        ends
.rdata$r:000007E4
.data:000007E8 ; ===========================================================================
.data:000007E8
.data:000007E8 ; Segment type: Pure data
.data:000007E8 ; Segment permissions: Read/Write
.data:000007E8 _data           segment dword public 'DATA' use32
.data:000007E8                 assume cs:_data
.data:000007E8                 ;org 7E8h
.data:000007E8 ; COMDAT (pick any)
.data:000007E8                 public ??_R0?AUICompressCoder@@@8
.data:000007E8 ; struct ICompressCoder `RTTI Type Descriptor'
.data:000007E8 ??_R0?AUICompressCoder@@@8 dd offset ??_7type_info@@6B@
.data:000007E8                                         ; DATA XREF: .rdata$r:ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000007E8                                         ; const type_info::`vftable'
.data:000007EC                 align 10h
.data:000007F0 a_?auicompressc db '.?AUICompressCoder@@',0
.data:00000805                 align 4
.data:00000805 _data           ends
.data:00000805
.rdata$r:00000808 ; ===========================================================================
.rdata$r:00000808
.rdata$r:00000808 ; Segment type: Pure data
.rdata$r:00000808 ; Segment permissions: Read
.rdata$r:00000808 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000808                 assume cs:_rdata$r
.rdata$r:00000808                 ;org 808h
.rdata$r:00000808 ; COMDAT (pick any)
.rdata$r:00000808                 public ??_R3ICompressCoder@@8
.rdata$r:00000808 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000808 ??_R3ICompressCoder@@8 db    0          ; DATA XREF: .rdata$r:000007E4o
.rdata$r:00000809                 db    0
.rdata$r:0000080A                 db    0
.rdata$r:0000080B                 db    0
.rdata$r:0000080C                 db    0
.rdata$r:0000080D                 db    0
.rdata$r:0000080E                 db    0
.rdata$r:0000080F                 db    0
.rdata$r:00000810                 db    2
.rdata$r:00000811                 db    0
.rdata$r:00000812                 db    0
.rdata$r:00000813                 db    0
.rdata$r:00000814                 dd offset ??_R2ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Array'
.rdata$r:00000814 _rdata$r        ends
.rdata$r:00000814
.rdata$r:00000818 ; ===========================================================================
.rdata$r:00000818
.rdata$r:00000818 ; Segment type: Pure data
.rdata$r:00000818 ; Segment permissions: Read
.rdata$r:00000818 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000818                 assume cs:_rdata$r
.rdata$r:00000818                 ;org 818h
.rdata$r:00000818 ; COMDAT (pick any)
.rdata$r:00000818                 public ??_R2ICompressCoder@@8
.rdata$r:00000818 ; ICompressCoder::`RTTI Base Class Array'
.rdata$r:00000818 ??_R2ICompressCoder@@8 dd offset ??_R1A@?0A@EA@ICompressCoder@@8
.rdata$r:00000818                                         ; DATA XREF: .rdata$r:00000814o
.rdata$r:00000818                                         ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000081C                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000820                 db    0
.rdata$r:00000821                 align 4
.rdata$r:00000821 _rdata$r        ends
.rdata$r:00000821
.rdata$r:00000824 ; ===========================================================================
.rdata$r:00000824
.rdata$r:00000824 ; Segment type: Pure data
.rdata$r:00000824 ; Segment permissions: Read
.rdata$r:00000824 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000824                 assume cs:_rdata$r
.rdata$r:00000824                 ;org 824h
.rdata$r:00000824 ; COMDAT (pick any)
.rdata$r:00000824                 public ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00000824 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000824 ??_R1A@?0A@EA@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00000824                                         ; DATA XREF: .rdata$r:0000081Co
.rdata$r:00000824                                         ; .rdata$r:IUnknown::`RTTI Base Class Array'o ...
.rdata$r:00000824                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00000828                 align 10h
.rdata$r:00000830                 db 0FFh
.rdata$r:00000831                 db 0FFh
.rdata$r:00000832                 db 0FFh
.rdata$r:00000833                 db 0FFh
.rdata$r:00000834                 db    0
.rdata$r:00000835                 db    0
.rdata$r:00000836                 db    0
.rdata$r:00000837                 db    0
.rdata$r:00000838                 db  40h ; @
.rdata$r:00000839                 db    0
.rdata$r:0000083A                 db    0
.rdata$r:0000083B                 db    0
.rdata$r:0000083C                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000083C _rdata$r        ends
.rdata$r:0000083C
.data:00000840 ; ===========================================================================
.data:00000840
.data:00000840 ; Segment type: Pure data
.data:00000840 ; Segment permissions: Read/Write
.data:00000840 _data           segment dword public 'DATA' use32
.data:00000840                 assume cs:_data
.data:00000840                 ;org 840h
.data:00000840 ; COMDAT (pick any)
.data:00000840                 public ??_R0?AUIUnknown@@@8
.data:00000840 ; struct IUnknown `RTTI Type Descriptor'
.data:00000840 ??_R0?AUIUnknown@@@8 dd offset ??_7type_info@@6B@
.data:00000840                                         ; DATA XREF: .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000840                                         ; .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'o ...
.data:00000840                                         ; const type_info::`vftable'
.data:00000844                 align 8
.data:00000848 a_?auiunknown@@ db '.?AUIUnknown@@',0
.data:00000857                 align 4
.data:00000857 _data           ends
.data:00000857
.rdata$r:00000858 ; ===========================================================================
.rdata$r:00000858
.rdata$r:00000858 ; Segment type: Pure data
.rdata$r:00000858 ; Segment permissions: Read
.rdata$r:00000858 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000858                 assume cs:_rdata$r
.rdata$r:00000858                 ;org 858h
.rdata$r:00000858 ; COMDAT (pick any)
.rdata$r:00000858                 public ??_R3IUnknown@@8
.rdata$r:00000858 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000858 ??_R3IUnknown@@8 db    0                ; DATA XREF: .rdata$r:0000083Co
.rdata$r:00000858                                         ; .rdata$r:00000888o ...
.rdata$r:00000859                 db    0
.rdata$r:0000085A                 db    0
.rdata$r:0000085B                 db    0
.rdata$r:0000085C                 db    0
.rdata$r:0000085D                 db    0
.rdata$r:0000085E                 db    0
.rdata$r:0000085F                 db    0
.rdata$r:00000860                 db    1
.rdata$r:00000861                 db    0
.rdata$r:00000862                 db    0
.rdata$r:00000863                 db    0
.rdata$r:00000864                 dd offset ??_R2IUnknown@@8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00000864 _rdata$r        ends
.rdata$r:00000864
.rdata$r:00000868 ; ===========================================================================
.rdata$r:00000868
.rdata$r:00000868 ; Segment type: Pure data
.rdata$r:00000868 ; Segment permissions: Read
.rdata$r:00000868 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000868                 assume cs:_rdata$r
.rdata$r:00000868                 ;org 868h
.rdata$r:00000868 ; COMDAT (pick any)
.rdata$r:00000868                 public ??_R2IUnknown@@8
.rdata$r:00000868 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00000868 ??_R2IUnknown@@8 dd offset ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00000868                                         ; DATA XREF: .rdata$r:00000864o
.rdata$r:00000868                                         ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000086C                 db    0
.rdata$r:0000086D                 align 10h
.rdata$r:0000086D _rdata$r        ends
.rdata$r:0000086D
.rdata$r:00000870 ; ===========================================================================
.rdata$r:00000870
.rdata$r:00000870 ; Segment type: Pure data
.rdata$r:00000870 ; Segment permissions: Read
.rdata$r:00000870 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000870                 assume cs:_rdata$r
.rdata$r:00000870                 ;org 870h
.rdata$r:00000870 ; COMDAT (pick any)
.rdata$r:00000870                 public ??_R1A@?0A@EC@IUnknown@@8
.rdata$r:00000870 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 66)'
.rdata$r:00000870 ??_R1A@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00000870                                         ; DATA XREF: .rdata$r:00000784o
.rdata$r:00000870                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00000874                 db    0
.rdata$r:00000875                 db    0
.rdata$r:00000876                 db    0
.rdata$r:00000877                 db    0
.rdata$r:00000878                 db    0
.rdata$r:00000879                 db    0
.rdata$r:0000087A                 db    0
.rdata$r:0000087B                 db    0
.rdata$r:0000087C                 db 0FFh
.rdata$r:0000087D                 db 0FFh
.rdata$r:0000087E                 db 0FFh
.rdata$r:0000087F                 db 0FFh
.rdata$r:00000880                 db    0
.rdata$r:00000881                 db    0
.rdata$r:00000882                 db    0
.rdata$r:00000883                 db    0
.rdata$r:00000884                 db  42h ; B
.rdata$r:00000885                 db    0
.rdata$r:00000886                 db    0
.rdata$r:00000887                 db    0
.rdata$r:00000888                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000888 _rdata$r        ends
.rdata$r:00000888
.rdata$r:0000088C ; ===========================================================================
.rdata$r:0000088C
.rdata$r:0000088C ; Segment type: Pure data
.rdata$r:0000088C ; Segment permissions: Read
.rdata$r:0000088C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000088C                 assume cs:_rdata$r
.rdata$r:0000088C                 ;org 88Ch
.rdata$r:0000088C ; COMDAT (pick any)
.rdata$r:0000088C                 public ??_R13?0A@EA@ICompressSetDecoderProperties2@@8
.rdata$r:0000088C ; ICompressSetDecoderProperties2::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:0000088C ??_R13?0A@EA@ICompressSetDecoderProperties2@@8 dd offset ??_R0?AUICompressSetDecoderProperties2@@@8
.rdata$r:0000088C                                         ; DATA XREF: .rdata$r:00000788o
.rdata$r:0000088C                                         ; ICompressSetDecoderProperties2 `RTTI Type Descriptor'
.rdata$r:00000890                 db    1
.rdata$r:00000891                 db    0
.rdata$r:00000892                 db    0
.rdata$r:00000893                 db    0
.rdata$r:00000894                 db    4
.rdata$r:00000895                 db    0
.rdata$r:00000896                 db    0
.rdata$r:00000897                 db    0
.rdata$r:00000898                 db 0FFh
.rdata$r:00000899                 db 0FFh
.rdata$r:0000089A                 db 0FFh
.rdata$r:0000089B                 db 0FFh
.rdata$r:0000089C                 db    0
.rdata$r:0000089D                 db    0
.rdata$r:0000089E                 db    0
.rdata$r:0000089F                 db    0
.rdata$r:000008A0                 db  40h ; @
.rdata$r:000008A1                 db    0
.rdata$r:000008A2                 db    0
.rdata$r:000008A3                 db    0
.rdata$r:000008A4                 dd offset ??_R3ICompressSetDecoderProperties2@@8 ; ICompressSetDecoderProperties2::`RTTI Class Hierarchy Descriptor'
.rdata$r:000008A4 _rdata$r        ends
.rdata$r:000008A4
.data:000008A8 ; ===========================================================================
.data:000008A8
.data:000008A8 ; Segment type: Pure data
.data:000008A8 ; Segment permissions: Read/Write
.data:000008A8 _data           segment dword public 'DATA' use32
.data:000008A8                 assume cs:_data
.data:000008A8                 ;org 8A8h
.data:000008A8 ; COMDAT (pick any)
.data:000008A8                 public ??_R0?AUICompressSetDecoderProperties2@@@8
.data:000008A8 ; struct ICompressSetDecoderProperties2 `RTTI Type Descriptor'
.data:000008A8 ??_R0?AUICompressSetDecoderProperties2@@@8 dd offset ??_7type_info@@6B@
.data:000008A8                                         ; DATA XREF: .rdata$r:ICompressSetDecoderProperties2::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:000008A8                                         ; .rdata$r:ICompressSetDecoderProperties2::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000008A8                                         ; const type_info::`vftable'
.data:000008AC                 align 10h
.data:000008B0 a_?auicompresss db '.?AUICompressSetDecoderProperties2@@',0
.data:000008D5                 align 4
.data:000008D5 _data           ends
.data:000008D5
.rdata$r:000008D8 ; ===========================================================================
.rdata$r:000008D8
.rdata$r:000008D8 ; Segment type: Pure data
.rdata$r:000008D8 ; Segment permissions: Read
.rdata$r:000008D8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000008D8                 assume cs:_rdata$r
.rdata$r:000008D8                 ;org 8D8h
.rdata$r:000008D8 ; COMDAT (pick any)
.rdata$r:000008D8                 public ??_R3ICompressSetDecoderProperties2@@8
.rdata$r:000008D8 ; ICompressSetDecoderProperties2::`RTTI Class Hierarchy Descriptor'
.rdata$r:000008D8 ??_R3ICompressSetDecoderProperties2@@8 db    0
.rdata$r:000008D8                                         ; DATA XREF: .rdata$r:000008A4o
.rdata$r:000008D8                                         ; .rdata$r:0000090Co
.rdata$r:000008D9                 db    0
.rdata$r:000008DA                 db    0
.rdata$r:000008DB                 db    0
.rdata$r:000008DC                 db    0
.rdata$r:000008DD                 db    0
.rdata$r:000008DE                 db    0
.rdata$r:000008DF                 db    0
.rdata$r:000008E0                 db    2
.rdata$r:000008E1                 db    0
.rdata$r:000008E2                 db    0
.rdata$r:000008E3                 db    0
.rdata$r:000008E4                 dd offset ??_R2ICompressSetDecoderProperties2@@8 ; ICompressSetDecoderProperties2::`RTTI Base Class Array'
.rdata$r:000008E4 _rdata$r        ends
.rdata$r:000008E4
.rdata$r:000008E8 ; ===========================================================================
.rdata$r:000008E8
.rdata$r:000008E8 ; Segment type: Pure data
.rdata$r:000008E8 ; Segment permissions: Read
.rdata$r:000008E8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000008E8                 assume cs:_rdata$r
.rdata$r:000008E8                 ;org 8E8h
.rdata$r:000008E8 ; COMDAT (pick any)
.rdata$r:000008E8                 public ??_R2ICompressSetDecoderProperties2@@8
.rdata$r:000008E8 ; ICompressSetDecoderProperties2::`RTTI Base Class Array'
.rdata$r:000008E8 ??_R2ICompressSetDecoderProperties2@@8 dd offset ??_R1A@?0A@EA@ICompressSetDecoderProperties2@@8
.rdata$r:000008E8                                         ; DATA XREF: .rdata$r:000008E4o
.rdata$r:000008E8                                         ; ICompressSetDecoderProperties2::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000008EC                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000008F0                 db    0
.rdata$r:000008F1                 align 4
.rdata$r:000008F1 _rdata$r        ends
.rdata$r:000008F1
.rdata$r:000008F4 ; ===========================================================================
.rdata$r:000008F4
.rdata$r:000008F4 ; Segment type: Pure data
.rdata$r:000008F4 ; Segment permissions: Read
.rdata$r:000008F4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000008F4                 assume cs:_rdata$r
.rdata$r:000008F4                 ;org 8F4h
.rdata$r:000008F4 ; COMDAT (pick any)
.rdata$r:000008F4                 public ??_R1A@?0A@EA@ICompressSetDecoderProperties2@@8
.rdata$r:000008F4 ; ICompressSetDecoderProperties2::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000008F4 ??_R1A@?0A@EA@ICompressSetDecoderProperties2@@8 dd offset ??_R0?AUICompressSetDecoderProperties2@@@8
.rdata$r:000008F4                                         ; DATA XREF: .rdata$r:ICompressSetDecoderProperties2::`RTTI Base Class Array'o
.rdata$r:000008F4                                         ; ICompressSetDecoderProperties2 `RTTI Type Descriptor'
.rdata$r:000008F8                 db    1
.rdata$r:000008F9                 db    0
.rdata$r:000008FA                 db    0
.rdata$r:000008FB                 db    0
.rdata$r:000008FC                 db    0
.rdata$r:000008FD                 db    0
.rdata$r:000008FE                 db    0
.rdata$r:000008FF                 db    0
.rdata$r:00000900                 db 0FFh
.rdata$r:00000901                 db 0FFh
.rdata$r:00000902                 db 0FFh
.rdata$r:00000903                 db 0FFh
.rdata$r:00000904                 db    0
.rdata$r:00000905                 db    0
.rdata$r:00000906                 db    0
.rdata$r:00000907                 db    0
.rdata$r:00000908                 db  40h ; @
.rdata$r:00000909                 db    0
.rdata$r:0000090A                 db    0
.rdata$r:0000090B                 db    0
.rdata$r:0000090C                 dd offset ??_R3ICompressSetDecoderProperties2@@8 ; ICompressSetDecoderProperties2::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000090C _rdata$r        ends
.rdata$r:0000090C
.rdata$r:00000910 ; ===========================================================================
.rdata$r:00000910
.rdata$r:00000910 ; Segment type: Pure data
.rdata$r:00000910 ; Segment permissions: Read
.rdata$r:00000910 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000910                 assume cs:_rdata$r
.rdata$r:00000910                 ;org 910h
.rdata$r:00000910 ; COMDAT (pick any)
.rdata$r:00000910                 public ??_R13?0A@EC@IUnknown@@8
.rdata$r:00000910 ; IUnknown::`RTTI Base Class Descriptor at (4, -1, 0, 66)'
.rdata$r:00000910 ??_R13?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00000910                                         ; DATA XREF: .rdata$r:0000078Co
.rdata$r:00000910                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00000914                 align 8
.rdata$r:00000918                 db    4
.rdata$r:00000919                 db    0
.rdata$r:0000091A                 db    0
.rdata$r:0000091B                 db    0
.rdata$r:0000091C                 db 0FFh
.rdata$r:0000091D                 db 0FFh
.rdata$r:0000091E                 db 0FFh
.rdata$r:0000091F                 db 0FFh
.rdata$r:00000920                 db    0
.rdata$r:00000921                 db    0
.rdata$r:00000922                 db    0
.rdata$r:00000923                 db    0
.rdata$r:00000924                 db  42h ; B
.rdata$r:00000925                 db    0
.rdata$r:00000926                 db    0
.rdata$r:00000927                 db    0
.rdata$r:00000928                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000928 _rdata$r        ends
.rdata$r:00000928
.rdata$r:0000092C ; ===========================================================================
.rdata$r:0000092C
.rdata$r:0000092C ; Segment type: Pure data
.rdata$r:0000092C ; Segment permissions: Read
.rdata$r:0000092C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000092C                 assume cs:_rdata$r
.rdata$r:0000092C                 ;org 92Ch
.rdata$r:0000092C ; COMDAT (pick any)
.rdata$r:0000092C                 public ??_R17?0A@EA@ICompressSetInStream@@8
.rdata$r:0000092C ; ICompressSetInStream::`RTTI Base Class Descriptor at (8, -1, 0, 64)'
.rdata$r:0000092C ??_R17?0A@EA@ICompressSetInStream@@8 dd offset ??_R0?AUICompressSetInStream@@@8
.rdata$r:0000092C                                         ; DATA XREF: .rdata$r:00000790o
.rdata$r:0000092C                                         ; ICompressSetInStream `RTTI Type Descriptor'
.rdata$r:00000930                 db    1
.rdata$r:00000931                 db    0
.rdata$r:00000932                 db    0
.rdata$r:00000933                 db    0
.rdata$r:00000934                 db    8
.rdata$r:00000935                 db    0
.rdata$r:00000936                 db    0
.rdata$r:00000937                 db    0
.rdata$r:00000938                 db 0FFh
.rdata$r:00000939                 db 0FFh
.rdata$r:0000093A                 db 0FFh
.rdata$r:0000093B                 db 0FFh
.rdata$r:0000093C                 db    0
.rdata$r:0000093D                 db    0
.rdata$r:0000093E                 db    0
.rdata$r:0000093F                 db    0
.rdata$r:00000940                 db  40h ; @
.rdata$r:00000941                 db    0
.rdata$r:00000942                 db    0
.rdata$r:00000943                 db    0
.rdata$r:00000944                 dd offset ??_R3ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000944 _rdata$r        ends
.rdata$r:00000944
.data:00000948 ; ===========================================================================
.data:00000948
.data:00000948 ; Segment type: Pure data
.data:00000948 ; Segment permissions: Read/Write
.data:00000948 _data           segment dword public 'DATA' use32
.data:00000948                 assume cs:_data
.data:00000948                 ;org 948h
.data:00000948 ; COMDAT (pick any)
.data:00000948                 public ??_R0?AUICompressSetInStream@@@8
.data:00000948 ; struct ICompressSetInStream `RTTI Type Descriptor'
.data:00000948 ??_R0?AUICompressSetInStream@@@8 dd offset ??_7type_info@@6B@
.data:00000948                                         ; DATA XREF: .rdata$r:ICompressSetInStream::`RTTI Base Class Descriptor at (8,-1,0,64)'o
.data:00000948                                         ; .rdata$r:ICompressSetInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000948                                         ; const type_info::`vftable'
.data:0000094C                 align 10h
.data:00000950 a_?auicompres_0 db '.?AUICompressSetInStream@@',0
.data:0000096B                 align 4
.data:0000096B _data           ends
.data:0000096B
.rdata$r:0000096C ; ===========================================================================
.rdata$r:0000096C
.rdata$r:0000096C ; Segment type: Pure data
.rdata$r:0000096C ; Segment permissions: Read
.rdata$r:0000096C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000096C                 assume cs:_rdata$r
.rdata$r:0000096C                 ;org 96Ch
.rdata$r:0000096C ; COMDAT (pick any)
.rdata$r:0000096C                 public ??_R3ICompressSetInStream@@8
.rdata$r:0000096C ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000096C ??_R3ICompressSetInStream@@8 db    0    ; DATA XREF: .rdata$r:00000944o
.rdata$r:0000096C                                         ; .rdata$r:000009A0o
.rdata$r:0000096D                 db    0
.rdata$r:0000096E                 db    0
.rdata$r:0000096F                 db    0
.rdata$r:00000970                 db    0
.rdata$r:00000971                 db    0
.rdata$r:00000972                 db    0
.rdata$r:00000973                 db    0
.rdata$r:00000974                 db    2
.rdata$r:00000975                 db    0
.rdata$r:00000976                 db    0
.rdata$r:00000977                 db    0
.rdata$r:00000978                 dd offset ??_R2ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Base Class Array'
.rdata$r:00000978 _rdata$r        ends
.rdata$r:00000978
.rdata$r:0000097C ; ===========================================================================
.rdata$r:0000097C
.rdata$r:0000097C ; Segment type: Pure data
.rdata$r:0000097C ; Segment permissions: Read
.rdata$r:0000097C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000097C                 assume cs:_rdata$r
.rdata$r:0000097C                 ;org 97Ch
.rdata$r:0000097C ; COMDAT (pick any)
.rdata$r:0000097C                 public ??_R2ICompressSetInStream@@8
.rdata$r:0000097C ; ICompressSetInStream::`RTTI Base Class Array'
.rdata$r:0000097C ??_R2ICompressSetInStream@@8 dd offset ??_R1A@?0A@EA@ICompressSetInStream@@8
.rdata$r:0000097C                                         ; DATA XREF: .rdata$r:00000978o
.rdata$r:0000097C                                         ; ICompressSetInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000980                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000984                 db    0
.rdata$r:00000985                 align 4
.rdata$r:00000985 _rdata$r        ends
.rdata$r:00000985
.rdata$r:00000988 ; ===========================================================================
.rdata$r:00000988
.rdata$r:00000988 ; Segment type: Pure data
.rdata$r:00000988 ; Segment permissions: Read
.rdata$r:00000988 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000988                 assume cs:_rdata$r
.rdata$r:00000988                 ;org 988h
.rdata$r:00000988 ; COMDAT (pick any)
.rdata$r:00000988                 public ??_R1A@?0A@EA@ICompressSetInStream@@8
.rdata$r:00000988 ; ICompressSetInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000988 ??_R1A@?0A@EA@ICompressSetInStream@@8 dd offset ??_R0?AUICompressSetInStream@@@8
.rdata$r:00000988                                         ; DATA XREF: .rdata$r:ICompressSetInStream::`RTTI Base Class Array'o
.rdata$r:00000988                                         ; ICompressSetInStream `RTTI Type Descriptor'
.rdata$r:0000098C                 db    1
.rdata$r:0000098D                 db    0
.rdata$r:0000098E                 db    0
.rdata$r:0000098F                 db    0
.rdata$r:00000990                 db    0
.rdata$r:00000991                 db    0
.rdata$r:00000992                 db    0
.rdata$r:00000993                 db    0
.rdata$r:00000994                 db 0FFh
.rdata$r:00000995                 db 0FFh
.rdata$r:00000996                 db 0FFh
.rdata$r:00000997                 db 0FFh
.rdata$r:00000998                 db    0
.rdata$r:00000999                 db    0
.rdata$r:0000099A                 db    0
.rdata$r:0000099B                 db    0
.rdata$r:0000099C                 db  40h ; @
.rdata$r:0000099D                 db    0
.rdata$r:0000099E                 db    0
.rdata$r:0000099F                 db    0
.rdata$r:000009A0                 dd offset ??_R3ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000009A0 _rdata$r        ends
.rdata$r:000009A0
.rdata$r:000009A4 ; ===========================================================================
.rdata$r:000009A4
.rdata$r:000009A4 ; Segment type: Pure data
.rdata$r:000009A4 ; Segment permissions: Read
.rdata$r:000009A4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000009A4                 assume cs:_rdata$r
.rdata$r:000009A4                 ;org 9A4h
.rdata$r:000009A4 ; COMDAT (pick any)
.rdata$r:000009A4                 public ??_R17?0A@EC@IUnknown@@8
.rdata$r:000009A4 ; IUnknown::`RTTI Base Class Descriptor at (8, -1, 0, 66)'
.rdata$r:000009A4 ??_R17?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000009A4                                         ; DATA XREF: .rdata$r:00000794o
.rdata$r:000009A4                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:000009A8                 db    0
.rdata$r:000009A9                 db    0
.rdata$r:000009AA                 db    0
.rdata$r:000009AB                 db    0
.rdata$r:000009AC                 db    8
.rdata$r:000009AD                 db    0
.rdata$r:000009AE                 db    0
.rdata$r:000009AF                 db    0
.rdata$r:000009B0                 db 0FFh
.rdata$r:000009B1                 db 0FFh
.rdata$r:000009B2                 db 0FFh
.rdata$r:000009B3                 db 0FFh
.rdata$r:000009B4                 db    0
.rdata$r:000009B5                 db    0
.rdata$r:000009B6                 db    0
.rdata$r:000009B7                 db    0
.rdata$r:000009B8                 db  42h ; B
.rdata$r:000009B9                 db    0
.rdata$r:000009BA                 db    0
.rdata$r:000009BB                 db    0
.rdata$r:000009BC                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000009BC _rdata$r        ends
.rdata$r:000009BC
.rdata$r:000009C0 ; ===========================================================================
.rdata$r:000009C0
.rdata$r:000009C0 ; Segment type: Pure data
.rdata$r:000009C0 ; Segment permissions: Read
.rdata$r:000009C0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000009C0                 assume cs:_rdata$r
.rdata$r:000009C0                 ;org 9C0h
.rdata$r:000009C0 ; COMDAT (pick any)
.rdata$r:000009C0                 public ??_R1M@?0A@EA@ICompressSetOutStreamSize@@8
.rdata$r:000009C0 ; ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (12, -1, 0, 64)'
.rdata$r:000009C0 ??_R1M@?0A@EA@ICompressSetOutStreamSize@@8 dd offset ??_R0?AUICompressSetOutStreamSize@@@8
.rdata$r:000009C0                                         ; DATA XREF: .rdata$r:00000798o
.rdata$r:000009C0                                         ; ICompressSetOutStreamSize `RTTI Type Descriptor'
.rdata$r:000009C4                 db    1
.rdata$r:000009C5                 db    0
.rdata$r:000009C6                 db    0
.rdata$r:000009C7                 db    0
.rdata$r:000009C8                 db  0Ch
.rdata$r:000009C9                 db    0
.rdata$r:000009CA                 db    0
.rdata$r:000009CB                 db    0
.rdata$r:000009CC                 db 0FFh
.rdata$r:000009CD                 db 0FFh
.rdata$r:000009CE                 db 0FFh
.rdata$r:000009CF                 db 0FFh
.rdata$r:000009D0                 db    0
.rdata$r:000009D1                 db    0
.rdata$r:000009D2                 db    0
.rdata$r:000009D3                 db    0
.rdata$r:000009D4                 db  40h ; @
.rdata$r:000009D5                 db    0
.rdata$r:000009D6                 db    0
.rdata$r:000009D7                 db    0
.rdata$r:000009D8                 dd offset ??_R3ICompressSetOutStreamSize@@8 ; ICompressSetOutStreamSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:000009D8 _rdata$r        ends
.rdata$r:000009D8
.data:000009DC ; ===========================================================================
.data:000009DC
.data:000009DC ; Segment type: Pure data
.data:000009DC ; Segment permissions: Read/Write
.data:000009DC _data           segment dword public 'DATA' use32
.data:000009DC                 assume cs:_data
.data:000009DC                 ;org 9DCh
.data:000009DC ; COMDAT (pick any)
.data:000009DC                 public ??_R0?AUICompressSetOutStreamSize@@@8
.data:000009DC ; struct ICompressSetOutStreamSize `RTTI Type Descriptor'
.data:000009DC ??_R0?AUICompressSetOutStreamSize@@@8 dd offset ??_7type_info@@6B@
.data:000009DC                                         ; DATA XREF: .rdata$r:ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (12,-1,0,64)'o
.data:000009DC                                         ; .rdata$r:ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000009DC                                         ; const type_info::`vftable'
.data:000009E0                 db    0
.data:000009E1                 db    0
.data:000009E2                 db    0
.data:000009E3                 db    0
.data:000009E4                 db  2Eh ; .
.data:000009E5                 db  3Fh ; ?
.data:000009E6                 db  41h ; A
.data:000009E7                 db  55h ; U
.data:000009E8                 db  49h ; I
.data:000009E9                 db  43h ; C
.data:000009EA                 db  6Fh ; o
.data:000009EB                 db  6Dh ; m
.data:000009EC                 db  70h ; p
.data:000009ED                 db  72h ; r
.data:000009EE                 db  65h ; e
.data:000009EF                 db  73h ; s
.data:000009F0                 db  73h ; s
.data:000009F1                 db  53h ; S
.data:000009F2                 db  65h ; e
.data:000009F3                 db  74h ; t
.data:000009F4                 db  4Fh ; O
.data:000009F5                 db  75h ; u
.data:000009F6                 db  74h ; t
.data:000009F7                 db  53h ; S
.data:000009F8                 db  74h ; t
.data:000009F9                 db  72h ; r
.data:000009FA                 db  65h ; e
.data:000009FB                 db  61h ; a
.data:000009FC                 db  6Dh ; m
.data:000009FD                 db  53h ; S
.data:000009FE                 db  69h ; i
.data:000009FF                 db  7Ah ; z
.data:00000A00                 db  65h ; e
.data:00000A01                 db  40h ; @
.data:00000A02                 db  40h ; @
.data:00000A03                 db    0
.data:00000A03 _data           ends
.data:00000A03
.rdata$r:00000A04 ; ===========================================================================
.rdata$r:00000A04
.rdata$r:00000A04 ; Segment type: Pure data
.rdata$r:00000A04 ; Segment permissions: Read
.rdata$r:00000A04 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000A04                 assume cs:_rdata$r
.rdata$r:00000A04                 ;org 0A04h
.rdata$r:00000A04 ; COMDAT (pick any)
.rdata$r:00000A04                 public ??_R3ICompressSetOutStreamSize@@8
.rdata$r:00000A04 ; ICompressSetOutStreamSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000A04 ??_R3ICompressSetOutStreamSize@@8 db    0 ; DATA XREF: .rdata$r:000009D8o
.rdata$r:00000A04                                         ; .rdata$r:00000A38o
.rdata$r:00000A05                 db    0
.rdata$r:00000A06                 db    0
.rdata$r:00000A07                 db    0
.rdata$r:00000A08                 db    0
.rdata$r:00000A09                 db    0
.rdata$r:00000A0A                 db    0
.rdata$r:00000A0B                 db    0
.rdata$r:00000A0C                 db    2
.rdata$r:00000A0D                 db    0
.rdata$r:00000A0E                 db    0
.rdata$r:00000A0F                 db    0
.rdata$r:00000A10                 dd offset ??_R2ICompressSetOutStreamSize@@8 ; ICompressSetOutStreamSize::`RTTI Base Class Array'
.rdata$r:00000A10 _rdata$r        ends
.rdata$r:00000A10
.rdata$r:00000A14 ; ===========================================================================
.rdata$r:00000A14
.rdata$r:00000A14 ; Segment type: Pure data
.rdata$r:00000A14 ; Segment permissions: Read
.rdata$r:00000A14 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000A14                 assume cs:_rdata$r
.rdata$r:00000A14                 ;org 0A14h
.rdata$r:00000A14 ; COMDAT (pick any)
.rdata$r:00000A14                 public ??_R2ICompressSetOutStreamSize@@8
.rdata$r:00000A14 ; ICompressSetOutStreamSize::`RTTI Base Class Array'
.rdata$r:00000A14 ??_R2ICompressSetOutStreamSize@@8 dd offset ??_R1A@?0A@EA@ICompressSetOutStreamSize@@8
.rdata$r:00000A14                                         ; DATA XREF: .rdata$r:00000A10o
.rdata$r:00000A14                                         ; ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000A18                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000A1C                 db    0
.rdata$r:00000A1D                 align 10h
.rdata$r:00000A1D _rdata$r        ends
.rdata$r:00000A1D
.rdata$r:00000A20 ; ===========================================================================
.rdata$r:00000A20
.rdata$r:00000A20 ; Segment type: Pure data
.rdata$r:00000A20 ; Segment permissions: Read
.rdata$r:00000A20 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000A20                 assume cs:_rdata$r
.rdata$r:00000A20                 ;org 0A20h
.rdata$r:00000A20 ; COMDAT (pick any)
.rdata$r:00000A20                 public ??_R1A@?0A@EA@ICompressSetOutStreamSize@@8
.rdata$r:00000A20 ; ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000A20 ??_R1A@?0A@EA@ICompressSetOutStreamSize@@8 dd offset ??_R0?AUICompressSetOutStreamSize@@@8
.rdata$r:00000A20                                         ; DATA XREF: .rdata$r:ICompressSetOutStreamSize::`RTTI Base Class Array'o
.rdata$r:00000A20                                         ; ICompressSetOutStreamSize `RTTI Type Descriptor'
.rdata$r:00000A24                 db    1
.rdata$r:00000A25                 db    0
.rdata$r:00000A26                 db    0
.rdata$r:00000A27                 db    0
.rdata$r:00000A28                 db    0
.rdata$r:00000A29                 db    0
.rdata$r:00000A2A                 db    0
.rdata$r:00000A2B                 db    0
.rdata$r:00000A2C                 db 0FFh
.rdata$r:00000A2D                 db 0FFh
.rdata$r:00000A2E                 db 0FFh
.rdata$r:00000A2F                 db 0FFh
.rdata$r:00000A30                 db    0
.rdata$r:00000A31                 db    0
.rdata$r:00000A32                 db    0
.rdata$r:00000A33                 db    0
.rdata$r:00000A34                 db  40h ; @
.rdata$r:00000A35                 db    0
.rdata$r:00000A36                 db    0
.rdata$r:00000A37                 db    0
.rdata$r:00000A38                 dd offset ??_R3ICompressSetOutStreamSize@@8 ; ICompressSetOutStreamSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000A38 _rdata$r        ends
.rdata$r:00000A38
.rdata$r:00000A3C ; ===========================================================================
.rdata$r:00000A3C
.rdata$r:00000A3C ; Segment type: Pure data
.rdata$r:00000A3C ; Segment permissions: Read
.rdata$r:00000A3C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000A3C                 assume cs:_rdata$r
.rdata$r:00000A3C                 ;org 0A3Ch
.rdata$r:00000A3C ; COMDAT (pick any)
.rdata$r:00000A3C                 public ??_R1M@?0A@EC@IUnknown@@8
.rdata$r:00000A3C ; IUnknown::`RTTI Base Class Descriptor at (12, -1, 0, 66)'
.rdata$r:00000A3C ??_R1M@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00000A3C                                         ; DATA XREF: .rdata$r:0000079Co
.rdata$r:00000A3C                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00000A40                 db    0
.rdata$r:00000A41                 db    0
.rdata$r:00000A42                 db    0
.rdata$r:00000A43                 db    0
.rdata$r:00000A44                 db  0Ch
.rdata$r:00000A45                 db    0
.rdata$r:00000A46                 db    0
.rdata$r:00000A47                 db    0
.rdata$r:00000A48                 db 0FFh
.rdata$r:00000A49                 db 0FFh
.rdata$r:00000A4A                 db 0FFh
.rdata$r:00000A4B                 db 0FFh
.rdata$r:00000A4C                 db    0
.rdata$r:00000A4D                 db    0
.rdata$r:00000A4E                 db    0
.rdata$r:00000A4F                 db    0
.rdata$r:00000A50                 db  42h ; B
.rdata$r:00000A51                 db    0
.rdata$r:00000A52                 db    0
.rdata$r:00000A53                 db    0
.rdata$r:00000A54                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000A54 _rdata$r        ends
.rdata$r:00000A54
.rdata$r:00000A58 ; ===========================================================================
.rdata$r:00000A58
.rdata$r:00000A58 ; Segment type: Pure data
.rdata$r:00000A58 ; Segment permissions: Read
.rdata$r:00000A58 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000A58                 assume cs:_rdata$r
.rdata$r:00000A58                 ;org 0A58h
.rdata$r:00000A58 ; COMDAT (pick any)
.rdata$r:00000A58                 public ??_R1BA@?0A@EA@ISequentialInStream@@8
.rdata$r:00000A58 ; ISequentialInStream::`RTTI Base Class Descriptor at (16, -1, 0, 64)'
.rdata$r:00000A58 ??_R1BA@?0A@EA@ISequentialInStream@@8 dd offset ??_R0?AUISequentialInStream@@@8
.rdata$r:00000A58                                         ; DATA XREF: .rdata$r:000007A0o
.rdata$r:00000A58                                         ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:00000A5C                 db    1
.rdata$r:00000A5D                 db    0
.rdata$r:00000A5E                 db    0
.rdata$r:00000A5F                 db    0
.rdata$r:00000A60                 db  10h
.rdata$r:00000A61                 db    0
.rdata$r:00000A62                 db    0
.rdata$r:00000A63                 db    0
.rdata$r:00000A64                 db 0FFh
.rdata$r:00000A65                 db 0FFh
.rdata$r:00000A66                 db 0FFh
.rdata$r:00000A67                 db 0FFh
.rdata$r:00000A68                 db    0
.rdata$r:00000A69                 db    0
.rdata$r:00000A6A                 db    0
.rdata$r:00000A6B                 db    0
.rdata$r:00000A6C                 db  40h ; @
.rdata$r:00000A6D                 db    0
.rdata$r:00000A6E                 db    0
.rdata$r:00000A6F                 db    0
.rdata$r:00000A70                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000A70 _rdata$r        ends
.rdata$r:00000A70
.data:00000A74 ; ===========================================================================
.data:00000A74
.data:00000A74 ; Segment type: Pure data
.data:00000A74 ; Segment permissions: Read/Write
.data:00000A74 _data           segment dword public 'DATA' use32
.data:00000A74                 assume cs:_data
.data:00000A74                 ;org 0A74h
.data:00000A74 ; COMDAT (pick any)
.data:00000A74                 public ??_R0?AUISequentialInStream@@@8
.data:00000A74 ; struct ISequentialInStream `RTTI Type Descriptor'
.data:00000A74 ??_R0?AUISequentialInStream@@@8 dd offset ??_7type_info@@6B@
.data:00000A74                                         ; DATA XREF: .rdata$r:ISequentialInStream::`RTTI Base Class Descriptor at (16,-1,0,64)'o
.data:00000A74                                         ; .rdata$r:ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000A74                                         ; const type_info::`vftable'
.data:00000A78                 db    0
.data:00000A79                 db    0
.data:00000A7A                 db    0
.data:00000A7B                 db    0
.data:00000A7C                 db  2Eh ; .
.data:00000A7D                 db  3Fh ; ?
.data:00000A7E                 db  41h ; A
.data:00000A7F                 db  55h ; U
.data:00000A80                 db  49h ; I
.data:00000A81                 db  53h ; S
.data:00000A82                 db  65h ; e
.data:00000A83                 db  71h ; q
.data:00000A84                 db  75h ; u
.data:00000A85                 db  65h ; e
.data:00000A86                 db  6Eh ; n
.data:00000A87                 db  74h ; t
.data:00000A88                 db  69h ; i
.data:00000A89                 db  61h ; a
.data:00000A8A                 db  6Ch ; l
.data:00000A8B                 db  49h ; I
.data:00000A8C                 db  6Eh ; n
.data:00000A8D                 db  53h ; S
.data:00000A8E                 db  74h ; t
.data:00000A8F                 db  72h ; r
.data:00000A90                 db  65h ; e
.data:00000A91                 db  61h ; a
.data:00000A92                 db  6Dh ; m
.data:00000A93                 db  40h ; @
.data:00000A94                 db  40h ; @
.data:00000A95                 db    0
.data:00000A96                 align 4
.data:00000A96 _data           ends
.data:00000A96
.rdata$r:00000A98 ; ===========================================================================
.rdata$r:00000A98
.rdata$r:00000A98 ; Segment type: Pure data
.rdata$r:00000A98 ; Segment permissions: Read
.rdata$r:00000A98 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000A98                 assume cs:_rdata$r
.rdata$r:00000A98                 ;org 0A98h
.rdata$r:00000A98 ; COMDAT (pick any)
.rdata$r:00000A98                 public ??_R3ISequentialInStream@@8
.rdata$r:00000A98 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000A98 ??_R3ISequentialInStream@@8 db    0     ; DATA XREF: .rdata$r:00000A70o
.rdata$r:00000A98                                         ; .rdata$r:00000ACCo
.rdata$r:00000A99                 db    0
.rdata$r:00000A9A                 db    0
.rdata$r:00000A9B                 db    0
.rdata$r:00000A9C                 db    0
.rdata$r:00000A9D                 db    0
.rdata$r:00000A9E                 db    0
.rdata$r:00000A9F                 db    0
.rdata$r:00000AA0                 db    2
.rdata$r:00000AA1                 db    0
.rdata$r:00000AA2                 db    0
.rdata$r:00000AA3                 db    0
.rdata$r:00000AA4                 dd offset ??_R2ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Array'
.rdata$r:00000AA4 _rdata$r        ends
.rdata$r:00000AA4
.rdata$r:00000AA8 ; ===========================================================================
.rdata$r:00000AA8
.rdata$r:00000AA8 ; Segment type: Pure data
.rdata$r:00000AA8 ; Segment permissions: Read
.rdata$r:00000AA8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000AA8                 assume cs:_rdata$r
.rdata$r:00000AA8                 ;org 0AA8h
.rdata$r:00000AA8 ; COMDAT (pick any)
.rdata$r:00000AA8                 public ??_R2ISequentialInStream@@8
.rdata$r:00000AA8 ; ISequentialInStream::`RTTI Base Class Array'
.rdata$r:00000AA8 ??_R2ISequentialInStream@@8 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8
.rdata$r:00000AA8                                         ; DATA XREF: .rdata$r:00000AA4o
.rdata$r:00000AA8                                         ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000AAC                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000AB0                 db    0
.rdata$r:00000AB1                 align 4
.rdata$r:00000AB1 _rdata$r        ends
.rdata$r:00000AB1
.rdata$r:00000AB4 ; ===========================================================================
.rdata$r:00000AB4
.rdata$r:00000AB4 ; Segment type: Pure data
.rdata$r:00000AB4 ; Segment permissions: Read
.rdata$r:00000AB4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000AB4                 assume cs:_rdata$r
.rdata$r:00000AB4                 ;org 0AB4h
.rdata$r:00000AB4 ; COMDAT (pick any)
.rdata$r:00000AB4                 public ??_R1A@?0A@EA@ISequentialInStream@@8
.rdata$r:00000AB4 ; ISequentialInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000AB4 ??_R1A@?0A@EA@ISequentialInStream@@8 dd offset ??_R0?AUISequentialInStream@@@8
.rdata$r:00000AB4                                         ; DATA XREF: .rdata$r:ISequentialInStream::`RTTI Base Class Array'o
.rdata$r:00000AB4                                         ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:00000AB8                 db    1
.rdata$r:00000AB9                 db    0
.rdata$r:00000ABA                 db    0
.rdata$r:00000ABB                 db    0
.rdata$r:00000ABC                 db    0
.rdata$r:00000ABD                 db    0
.rdata$r:00000ABE                 db    0
.rdata$r:00000ABF                 db    0
.rdata$r:00000AC0                 db 0FFh
.rdata$r:00000AC1                 db 0FFh
.rdata$r:00000AC2                 db 0FFh
.rdata$r:00000AC3                 db 0FFh
.rdata$r:00000AC4                 db    0
.rdata$r:00000AC5                 db    0
.rdata$r:00000AC6                 db    0
.rdata$r:00000AC7                 db    0
.rdata$r:00000AC8                 db  40h ; @
.rdata$r:00000AC9                 db    0
.rdata$r:00000ACA                 db    0
.rdata$r:00000ACB                 db    0
.rdata$r:00000ACC                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000ACC _rdata$r        ends
.rdata$r:00000ACC
.rdata$r:00000AD0 ; ===========================================================================
.rdata$r:00000AD0
.rdata$r:00000AD0 ; Segment type: Pure data
.rdata$r:00000AD0 ; Segment permissions: Read
.rdata$r:00000AD0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000AD0                 assume cs:_rdata$r
.rdata$r:00000AD0                 ;org 0AD0h
.rdata$r:00000AD0 ; COMDAT (pick any)
.rdata$r:00000AD0                 public ??_R1BA@?0A@EC@IUnknown@@8
.rdata$r:00000AD0 ; IUnknown::`RTTI Base Class Descriptor at (16, -1, 0, 66)'
.rdata$r:00000AD0 ??_R1BA@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00000AD0                                         ; DATA XREF: .rdata$r:000007A4o
.rdata$r:00000AD0                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00000AD4                 align 8
.rdata$r:00000AD8                 db  10h
.rdata$r:00000AD9                 db    0
.rdata$r:00000ADA                 db    0
.rdata$r:00000ADB                 db    0
.rdata$r:00000ADC                 db 0FFh
.rdata$r:00000ADD                 db 0FFh
.rdata$r:00000ADE                 db 0FFh
.rdata$r:00000ADF                 db 0FFh
.rdata$r:00000AE0                 db    0
.rdata$r:00000AE1                 db    0
.rdata$r:00000AE2                 db    0
.rdata$r:00000AE3                 db    0
.rdata$r:00000AE4                 db  42h ; B
.rdata$r:00000AE5                 db    0
.rdata$r:00000AE6                 db    0
.rdata$r:00000AE7                 db    0
.rdata$r:00000AE8                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000AE8 _rdata$r        ends
.rdata$r:00000AE8
.rdata$r:00000AEC ; ===========================================================================
.rdata$r:00000AEC
.rdata$r:00000AEC ; Segment type: Pure data
.rdata$r:00000AEC ; Segment permissions: Read
.rdata$r:00000AEC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000AEC                 assume cs:_rdata$r
.rdata$r:00000AEC                 ;org 0AECh
.rdata$r:00000AEC ; COMDAT (pick any)
.rdata$r:00000AEC                 public ??_R1BE@?0A@EA@CMyUnknownImp@@8
.rdata$r:00000AEC ; CMyUnknownImp::`RTTI Base Class Descriptor at (20, -1, 0, 64)'
.rdata$r:00000AEC ??_R1BE@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00000AEC                                         ; DATA XREF: .rdata$r:000007A8o
.rdata$r:00000AEC                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00000AF0                 db    0
.rdata$r:00000AF1                 db    0
.rdata$r:00000AF2                 db    0
.rdata$r:00000AF3                 db    0
.rdata$r:00000AF4                 db  14h
.rdata$r:00000AF5                 db    0
.rdata$r:00000AF6                 db    0
.rdata$r:00000AF7                 db    0
.rdata$r:00000AF8                 db 0FFh
.rdata$r:00000AF9                 db 0FFh
.rdata$r:00000AFA                 db 0FFh
.rdata$r:00000AFB                 db 0FFh
.rdata$r:00000AFC                 db    0
.rdata$r:00000AFD                 db    0
.rdata$r:00000AFE                 db    0
.rdata$r:00000AFF                 db    0
.rdata$r:00000B00                 db  40h ; @
.rdata$r:00000B01                 db    0
.rdata$r:00000B02                 db    0
.rdata$r:00000B03                 db    0
.rdata$r:00000B04                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000B04 _rdata$r        ends
.rdata$r:00000B04
.data:00000B08 ; ===========================================================================
.data:00000B08
.data:00000B08 ; Segment type: Pure data
.data:00000B08 ; Segment permissions: Read/Write
.data:00000B08 _data           segment dword public 'DATA' use32
.data:00000B08                 assume cs:_data
.data:00000B08                 ;org 0B08h
.data:00000B08 ; COMDAT (pick any)
.data:00000B08                 public ??_R0?AVCMyUnknownImp@@@8
.data:00000B08 ; class CMyUnknownImp `RTTI Type Descriptor'
.data:00000B08 ??_R0?AVCMyUnknownImp@@@8 dd offset ??_7type_info@@6B@
.data:00000B08                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (20,-1,0,64)'o
.data:00000B08                                         ; .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000B08                                         ; const type_info::`vftable'
.data:00000B0C                 align 10h
.data:00000B10 a_?avcmyunknown db '.?AVCMyUnknownImp@@',0
.data:00000B10 _data           ends
.data:00000B10
.rdata$r:00000B24 ; ===========================================================================
.rdata$r:00000B24
.rdata$r:00000B24 ; Segment type: Pure data
.rdata$r:00000B24 ; Segment permissions: Read
.rdata$r:00000B24 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000B24                 assume cs:_rdata$r
.rdata$r:00000B24                 ;org 0B24h
.rdata$r:00000B24 ; COMDAT (pick any)
.rdata$r:00000B24                 public ??_R3CMyUnknownImp@@8
.rdata$r:00000B24 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000B24 ??_R3CMyUnknownImp@@8 db    0           ; DATA XREF: .rdata$r:00000B04o
.rdata$r:00000B24                                         ; .rdata$r:00000B54o
.rdata$r:00000B25                 db    0
.rdata$r:00000B26                 db    0
.rdata$r:00000B27                 db    0
.rdata$r:00000B28                 db    0
.rdata$r:00000B29                 db    0
.rdata$r:00000B2A                 db    0
.rdata$r:00000B2B                 db    0
.rdata$r:00000B2C                 db    1
.rdata$r:00000B2D                 db    0
.rdata$r:00000B2E                 db    0
.rdata$r:00000B2F                 db    0
.rdata$r:00000B30                 dd offset ??_R2CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00000B30 _rdata$r        ends
.rdata$r:00000B30
.rdata$r:00000B34 ; ===========================================================================
.rdata$r:00000B34
.rdata$r:00000B34 ; Segment type: Pure data
.rdata$r:00000B34 ; Segment permissions: Read
.rdata$r:00000B34 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000B34                 assume cs:_rdata$r
.rdata$r:00000B34                 ;org 0B34h
.rdata$r:00000B34 ; COMDAT (pick any)
.rdata$r:00000B34                 public ??_R2CMyUnknownImp@@8
.rdata$r:00000B34 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00000B34 ??_R2CMyUnknownImp@@8 dd offset ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00000B34                                         ; DATA XREF: .rdata$r:00000B30o
.rdata$r:00000B34                                         ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000B38                 db    0
.rdata$r:00000B39                 align 4
.rdata$r:00000B39 _rdata$r        ends
.rdata$r:00000B39
.rdata$r:00000B3C ; ===========================================================================
.rdata$r:00000B3C
.rdata$r:00000B3C ; Segment type: Pure data
.rdata$r:00000B3C ; Segment permissions: Read
.rdata$r:00000B3C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000B3C                 assume cs:_rdata$r
.rdata$r:00000B3C                 ;org 0B3Ch
.rdata$r:00000B3C ; COMDAT (pick any)
.rdata$r:00000B3C                 public ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00000B3C ; CMyUnknownImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000B3C ??_R1A@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00000B3C                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Array'o
.rdata$r:00000B3C                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00000B40                 db    0
.rdata$r:00000B41                 db    0
.rdata$r:00000B42                 db    0
.rdata$r:00000B43                 db    0
.rdata$r:00000B44                 db    0
.rdata$r:00000B45                 db    0
.rdata$r:00000B46                 db    0
.rdata$r:00000B47                 db    0
.rdata$r:00000B48                 db 0FFh
.rdata$r:00000B49                 db 0FFh
.rdata$r:00000B4A                 db 0FFh
.rdata$r:00000B4B                 db 0FFh
.rdata$r:00000B4C                 db    0
.rdata$r:00000B4D                 db    0
.rdata$r:00000B4E                 db    0
.rdata$r:00000B4F                 db    0
.rdata$r:00000B50                 db  40h ; @
.rdata$r:00000B51                 db    0
.rdata$r:00000B52                 db    0
.rdata$r:00000B53                 db    0
.rdata$r:00000B54                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000B54 _rdata$r        ends
.rdata$r:00000B54
.rdata$r:00000B58 ; ===========================================================================
.rdata$r:00000B58
.rdata$r:00000B58 ; Segment type: Pure data
.rdata$r:00000B58 ; Segment permissions: Read
.rdata$r:00000B58 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000B58                 assume cs:_rdata$r
.rdata$r:00000B58                 ;org 0B58h
.rdata$r:00000B58 ; COMDAT (pick any)
.rdata$r:00000B58                 public ??_R4CDecoder@NPpmd@NCompress@@6BICompressSetDecoderProperties2@@@
.rdata$r:00000B58 ; const NCompress::NPpmd::CDecoder::`RTTI Complete Object Locator'{for `ICompressSetDecoderProperties2'}
.rdata$r:00000B58 ??_R4CDecoder@NPpmd@NCompress@@6BICompressSetDecoderProperties2@@@ db    0
.rdata$r:00000B58                                         ; DATA XREF: .rdata:000006D4o
.rdata$r:00000B59                 db    0
.rdata$r:00000B5A                 db    0
.rdata$r:00000B5B                 db    0
.rdata$r:00000B5C                 db    4
.rdata$r:00000B5D                 db    0
.rdata$r:00000B5E                 db    0
.rdata$r:00000B5F                 db    0
.rdata$r:00000B60                 db    0
.rdata$r:00000B61                 db    0
.rdata$r:00000B62                 db    0
.rdata$r:00000B63                 db    0
.rdata$r:00000B64                 dd offset ??_R0?AVCDecoder@NPpmd@NCompress@@@8 ; NCompress::NPpmd::CDecoder `RTTI Type Descriptor'
.rdata$r:00000B68                 dd offset ??_R3CDecoder@NPpmd@NCompress@@8 ; NCompress::NPpmd::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000B68 _rdata$r        ends
.rdata$r:00000B68
.rdata$r:00000B6C ; ===========================================================================
.rdata$r:00000B6C
.rdata$r:00000B6C ; Segment type: Pure data
.rdata$r:00000B6C ; Segment permissions: Read
.rdata$r:00000B6C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000B6C                 assume cs:_rdata$r
.rdata$r:00000B6C                 ;org 0B6Ch
.rdata$r:00000B6C ; COMDAT (pick any)
.rdata$r:00000B6C                 public ??_R4CDecoder@NPpmd@NCompress@@6BICompressSetInStream@@@
.rdata$r:00000B6C ; const NCompress::NPpmd::CDecoder::`RTTI Complete Object Locator'{for `ICompressSetInStream'}
.rdata$r:00000B6C ??_R4CDecoder@NPpmd@NCompress@@6BICompressSetInStream@@@ db    0
.rdata$r:00000B6C                                         ; DATA XREF: .rdata:000006BCo
.rdata$r:00000B6D                 db    0
.rdata$r:00000B6E                 db    0
.rdata$r:00000B6F                 db    0
.rdata$r:00000B70                 db    8
.rdata$r:00000B71                 db    0
.rdata$r:00000B72                 db    0
.rdata$r:00000B73                 db    0
.rdata$r:00000B74                 db    0
.rdata$r:00000B75                 db    0
.rdata$r:00000B76                 db    0
.rdata$r:00000B77                 db    0
.rdata$r:00000B78                 dd offset ??_R0?AVCDecoder@NPpmd@NCompress@@@8 ; NCompress::NPpmd::CDecoder `RTTI Type Descriptor'
.rdata$r:00000B7C                 dd offset ??_R3CDecoder@NPpmd@NCompress@@8 ; NCompress::NPpmd::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000B7C _rdata$r        ends
.rdata$r:00000B7C
.rdata$r:00000B80 ; ===========================================================================
.rdata$r:00000B80
.rdata$r:00000B80 ; Segment type: Pure data
.rdata$r:00000B80 ; Segment permissions: Read
.rdata$r:00000B80 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000B80                 assume cs:_rdata$r
.rdata$r:00000B80                 ;org 0B80h
.rdata$r:00000B80 ; COMDAT (pick any)
.rdata$r:00000B80                 public ??_R4CDecoder@NPpmd@NCompress@@6BICompressSetOutStreamSize@@@
.rdata$r:00000B80 ; const NCompress::NPpmd::CDecoder::`RTTI Complete Object Locator'{for `ICompressSetOutStreamSize'}
.rdata$r:00000B80 ??_R4CDecoder@NPpmd@NCompress@@6BICompressSetOutStreamSize@@@ db    0
.rdata$r:00000B80                                         ; DATA XREF: .rdata:000006A8o
.rdata$r:00000B81                 db    0
.rdata$r:00000B82                 db    0
.rdata$r:00000B83                 db    0
.rdata$r:00000B84                 db  0Ch
.rdata$r:00000B85                 db    0
.rdata$r:00000B86                 db    0
.rdata$r:00000B87                 db    0
.rdata$r:00000B88                 db    0
.rdata$r:00000B89                 db    0
.rdata$r:00000B8A                 db    0
.rdata$r:00000B8B                 db    0
.rdata$r:00000B8C                 dd offset ??_R0?AVCDecoder@NPpmd@NCompress@@@8 ; NCompress::NPpmd::CDecoder `RTTI Type Descriptor'
.rdata$r:00000B90                 dd offset ??_R3CDecoder@NPpmd@NCompress@@8 ; NCompress::NPpmd::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000B90 _rdata$r        ends
.rdata$r:00000B90
.rdata$r:00000B94 ; ===========================================================================
.rdata$r:00000B94
.rdata$r:00000B94 ; Segment type: Pure data
.rdata$r:00000B94 ; Segment permissions: Read
.rdata$r:00000B94 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000B94                 assume cs:_rdata$r
.rdata$r:00000B94                 ;org 0B94h
.rdata$r:00000B94 ; COMDAT (pick any)
.rdata$r:00000B94                 public ??_R4CDecoder@NPpmd@NCompress@@6BISequentialInStream@@@
.rdata$r:00000B94 ; const NCompress::NPpmd::CDecoder::`RTTI Complete Object Locator'{for `ISequentialInStream'}
.rdata$r:00000B94 ??_R4CDecoder@NPpmd@NCompress@@6BISequentialInStream@@@ db    0
.rdata$r:00000B94                                         ; DATA XREF: .rdata:00000694o
.rdata$r:00000B95                 db    0
.rdata$r:00000B96                 db    0
.rdata$r:00000B97                 db    0
.rdata$r:00000B98                 db  10h
.rdata$r:00000B99                 db    0
.rdata$r:00000B9A                 db    0
.rdata$r:00000B9B                 db    0
.rdata$r:00000B9C                 db    0
.rdata$r:00000B9D                 db    0
.rdata$r:00000B9E                 db    0
.rdata$r:00000B9F                 db    0
.rdata$r:00000BA0                 dd offset ??_R0?AVCDecoder@NPpmd@NCompress@@@8 ; NCompress::NPpmd::CDecoder `RTTI Type Descriptor'
.rdata$r:00000BA4                 dd offset ??_R3CDecoder@NPpmd@NCompress@@8 ; NCompress::NPpmd::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000BA4 _rdata$r        ends
.rdata$r:00000BA4
.text:00000BA8 ; ===========================================================================
.text:00000BA8
.text:00000BA8 ; Segment type: Pure code
.text:00000BA8 ; Segment permissions: Read/Execute
.text:00000BA8 _text           segment para public 'CODE' use32
.text:00000BA8                 assume cs:_text
.text:00000BA8                 ;org 0BA8h
.text:00000BA8 ; COMDAT (pick any)
.text:00000BA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000BA8
.text:00000BA8 ; =============== S U B R O U T I N E =======================================
.text:00000BA8
.text:00000BA8 ; Attributes: bp-based frame
.text:00000BA8
.text:00000BA8 ; _DWORD __thiscall CByteInBufWrap::~CByteInBufWrap(CByteInBufWrap *__hidden this)
.text:00000BA8                 public ??1CByteInBufWrap@@QAE@XZ
.text:00000BA8 ??1CByteInBufWrap@@QAE@XZ proc near     ; CODE XREF: NCompress::NPpmd::CDecoder::~CDecoder(void)+9Dp
.text:00000BA8                                         ; __unwindfunclet$??1CDecoder@NPpmd@NCompress@@QAE@XZ$0+6j
.text:00000BA8
.text:00000BA8 var_4           = dword ptr -4
.text:00000BA8
.text:00000BA8                 push    ebp
.text:00000BA9                 mov     ebp, esp
.text:00000BAB                 push    ecx
.text:00000BAC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000BB3                 mov     [ebp+var_4], ecx
.text:00000BB6                 mov     ecx, [ebp+var_4] ; this
.text:00000BB9                 call    ?Free@CByteInBufWrap@@QAEXXZ ; CByteInBufWrap::Free(void)
.text:00000BBE                 add     esp, 4
.text:00000BC1                 cmp     ebp, esp
.text:00000BC3                 call    __RTC_CheckEsp
.text:00000BC8                 mov     esp, ebp
.text:00000BCA                 pop     ebp
.text:00000BCB                 retn
.text:00000BCB ??1CByteInBufWrap@@QAE@XZ endp
.text:00000BCB
.text:00000BCB _text           ends
.text:00000BCB
.text:00000BCC ; ===========================================================================
.text:00000BCC
.text:00000BCC ; Segment type: Pure code
.text:00000BCC ; Segment permissions: Read/Execute
.text:00000BCC _text           segment para public 'CODE' use32
.text:00000BCC                 assume cs:_text
.text:00000BCC                 ;org 0BCCh
.text:00000BCC ; COMDAT (pick any)
.text:00000BCC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000BCC
.text:00000BCC ; =============== S U B R O U T I N E =======================================
.text:00000BCC
.text:00000BCC ; Attributes: bp-based frame
.text:00000BCC
.text:00000BCC ; __int32 __stdcall NCompress::NPpmd::CDecoder::QueryInterface(NCompress::NPpmd::CDecoder *this, const struct _GUID *Buf1, void **)
.text:00000BCC                 public ?QueryInterface@CDecoder@NPpmd@NCompress@@UAGJABU_GUID@@PAPAX@Z
.text:00000BCC ?QueryInterface@CDecoder@NPpmd@NCompress@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00000BCC                                         ; CODE XREF: [thunk]:NCompress::NPpmd::CDecoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j
.text:00000BCC                                         ; [thunk]:NCompress::NPpmd::CDecoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)+5j ...
.text:00000BCC
.text:00000BCC var_14          = dword ptr -14h
.text:00000BCC var_10          = dword ptr -10h
.text:00000BCC var_C           = dword ptr -0Ch
.text:00000BCC var_8           = dword ptr -8
.text:00000BCC var_4           = dword ptr -4
.text:00000BCC this            = dword ptr  8
.text:00000BCC Buf1            = dword ptr  0Ch
.text:00000BCC arg_8           = dword ptr  10h
.text:00000BCC
.text:00000BCC                 push    ebp
.text:00000BCD                 mov     ebp, esp
.text:00000BCF                 sub     esp, 14h
.text:00000BD2                 mov     eax, 0CCCCCCCCh
.text:00000BD7                 mov     [ebp+var_14], eax
.text:00000BDA                 mov     [ebp+var_10], eax
.text:00000BDD                 mov     [ebp+var_C], eax
.text:00000BE0                 mov     [ebp+var_8], eax
.text:00000BE3                 mov     [ebp+var_4], eax
.text:00000BE6                 mov     eax, [ebp+arg_8]
.text:00000BE9                 mov     dword ptr [eax], 0
.text:00000BEF                 push    offset _IID_IUnknown ; Buf2
.text:00000BF4                 mov     ecx, [ebp+Buf1]
.text:00000BF7                 push    ecx             ; Buf1
.text:00000BF8                 call    ___@8           ; __(x,x)
.text:00000BFD                 test    eax, eax
.text:00000BFF                 jz      short loc_C26
.text:00000C01                 cmp     [ebp+this], 0
.text:00000C05                 jz      short loc_C12
.text:00000C07                 mov     edx, [ebp+this]
.text:00000C0A                 add     edx, 4
.text:00000C0D                 mov     [ebp+var_4], edx
.text:00000C10                 jmp     short loc_C19
.text:00000C12 ; ---------------------------------------------------------------------------
.text:00000C12
.text:00000C12 loc_C12:                                ; CODE XREF: NCompress::NPpmd::CDecoder::QueryInterface(_GUID const &,void * *)+39j
.text:00000C12                 mov     [ebp+var_4], 0
.text:00000C19
.text:00000C19 loc_C19:                                ; CODE XREF: NCompress::NPpmd::CDecoder::QueryInterface(_GUID const &,void * *)+44j
.text:00000C19                 mov     eax, [ebp+arg_8]
.text:00000C1C                 mov     ecx, [ebp+var_4]
.text:00000C1F                 mov     [eax], ecx
.text:00000C21                 jmp     loc_D00
.text:00000C26 ; ---------------------------------------------------------------------------
.text:00000C26
.text:00000C26 loc_C26:                                ; CODE XREF: NCompress::NPpmd::CDecoder::QueryInterface(_GUID const &,void * *)+33j
.text:00000C26                 push    offset _IID_ICompressSetDecoderProperties2 ; Buf2
.text:00000C2B                 mov     edx, [ebp+Buf1]
.text:00000C2E                 push    edx             ; Buf1
.text:00000C2F                 call    ___@8           ; __(x,x)
.text:00000C34                 test    eax, eax
.text:00000C36                 jz      short loc_C5D
.text:00000C38                 cmp     [ebp+this], 0
.text:00000C3C                 jz      short loc_C49
.text:00000C3E                 mov     eax, [ebp+this]
.text:00000C41                 add     eax, 4
.text:00000C44                 mov     [ebp+var_8], eax
.text:00000C47                 jmp     short loc_C50
.text:00000C49 ; ---------------------------------------------------------------------------
.text:00000C49
.text:00000C49 loc_C49:                                ; CODE XREF: NCompress::NPpmd::CDecoder::QueryInterface(_GUID const &,void * *)+70j
.text:00000C49                 mov     [ebp+var_8], 0
.text:00000C50
.text:00000C50 loc_C50:                                ; CODE XREF: NCompress::NPpmd::CDecoder::QueryInterface(_GUID const &,void * *)+7Bj
.text:00000C50                 mov     ecx, [ebp+arg_8]
.text:00000C53                 mov     edx, [ebp+var_8]
.text:00000C56                 mov     [ecx], edx
.text:00000C58                 jmp     loc_D00
.text:00000C5D ; ---------------------------------------------------------------------------
.text:00000C5D
.text:00000C5D loc_C5D:                                ; CODE XREF: NCompress::NPpmd::CDecoder::QueryInterface(_GUID const &,void * *)+6Aj
.text:00000C5D                 push    offset _IID_ICompressSetInStream ; Buf2
.text:00000C62                 mov     eax, [ebp+Buf1]
.text:00000C65                 push    eax             ; Buf1
.text:00000C66                 call    ___@8           ; __(x,x)
.text:00000C6B                 test    eax, eax
.text:00000C6D                 jz      short loc_C91
.text:00000C6F                 cmp     [ebp+this], 0
.text:00000C73                 jz      short loc_C80
.text:00000C75                 mov     ecx, [ebp+this]
.text:00000C78                 add     ecx, 8
.text:00000C7B                 mov     [ebp+var_C], ecx
.text:00000C7E                 jmp     short loc_C87
.text:00000C80 ; ---------------------------------------------------------------------------
.text:00000C80
.text:00000C80 loc_C80:                                ; CODE XREF: NCompress::NPpmd::CDecoder::QueryInterface(_GUID const &,void * *)+A7j
.text:00000C80                 mov     [ebp+var_C], 0
.text:00000C87
.text:00000C87 loc_C87:                                ; CODE XREF: NCompress::NPpmd::CDecoder::QueryInterface(_GUID const &,void * *)+B2j
.text:00000C87                 mov     edx, [ebp+arg_8]
.text:00000C8A                 mov     eax, [ebp+var_C]
.text:00000C8D                 mov     [edx], eax
.text:00000C8F                 jmp     short loc_D00
.text:00000C91 ; ---------------------------------------------------------------------------
.text:00000C91
.text:00000C91 loc_C91:                                ; CODE XREF: NCompress::NPpmd::CDecoder::QueryInterface(_GUID const &,void * *)+A1j
.text:00000C91                 push    offset _IID_ICompressSetOutStreamSize ; Buf2
.text:00000C96                 mov     ecx, [ebp+Buf1]
.text:00000C99                 push    ecx             ; Buf1
.text:00000C9A                 call    ___@8           ; __(x,x)
.text:00000C9F                 test    eax, eax
.text:00000CA1                 jz      short loc_CC5
.text:00000CA3                 cmp     [ebp+this], 0
.text:00000CA7                 jz      short loc_CB4
.text:00000CA9                 mov     edx, [ebp+this]
.text:00000CAC                 add     edx, 0Ch
.text:00000CAF                 mov     [ebp+var_10], edx
.text:00000CB2                 jmp     short loc_CBB
.text:00000CB4 ; ---------------------------------------------------------------------------
.text:00000CB4
.text:00000CB4 loc_CB4:                                ; CODE XREF: NCompress::NPpmd::CDecoder::QueryInterface(_GUID const &,void * *)+DBj
.text:00000CB4                 mov     [ebp+var_10], 0
.text:00000CBB
.text:00000CBB loc_CBB:                                ; CODE XREF: NCompress::NPpmd::CDecoder::QueryInterface(_GUID const &,void * *)+E6j
.text:00000CBB                 mov     eax, [ebp+arg_8]
.text:00000CBE                 mov     ecx, [ebp+var_10]
.text:00000CC1                 mov     [eax], ecx
.text:00000CC3                 jmp     short loc_D00
.text:00000CC5 ; ---------------------------------------------------------------------------
.text:00000CC5
.text:00000CC5 loc_CC5:                                ; CODE XREF: NCompress::NPpmd::CDecoder::QueryInterface(_GUID const &,void * *)+D5j
.text:00000CC5                 push    offset _IID_ISequentialInStream ; Buf2
.text:00000CCA                 mov     edx, [ebp+Buf1]
.text:00000CCD                 push    edx             ; Buf1
.text:00000CCE                 call    ___@8           ; __(x,x)
.text:00000CD3                 test    eax, eax
.text:00000CD5                 jz      short loc_CF9
.text:00000CD7                 cmp     [ebp+this], 0
.text:00000CDB                 jz      short loc_CE8
.text:00000CDD                 mov     eax, [ebp+this]
.text:00000CE0                 add     eax, 10h
.text:00000CE3                 mov     [ebp+var_14], eax
.text:00000CE6                 jmp     short loc_CEF
.text:00000CE8 ; ---------------------------------------------------------------------------
.text:00000CE8
.text:00000CE8 loc_CE8:                                ; CODE XREF: NCompress::NPpmd::CDecoder::QueryInterface(_GUID const &,void * *)+10Fj
.text:00000CE8                 mov     [ebp+var_14], 0
.text:00000CEF
.text:00000CEF loc_CEF:                                ; CODE XREF: NCompress::NPpmd::CDecoder::QueryInterface(_GUID const &,void * *)+11Aj
.text:00000CEF                 mov     ecx, [ebp+arg_8]
.text:00000CF2                 mov     edx, [ebp+var_14]
.text:00000CF5                 mov     [ecx], edx
.text:00000CF7                 jmp     short loc_D00
.text:00000CF9 ; ---------------------------------------------------------------------------
.text:00000CF9
.text:00000CF9 loc_CF9:                                ; CODE XREF: NCompress::NPpmd::CDecoder::QueryInterface(_GUID const &,void * *)+109j
.text:00000CF9                 mov     eax, 80004002h
.text:00000CFE                 jmp     short loc_D11
.text:00000D00 ; ---------------------------------------------------------------------------
.text:00000D00
.text:00000D00 loc_D00:                                ; CODE XREF: NCompress::NPpmd::CDecoder::QueryInterface(_GUID const &,void * *)+55j
.text:00000D00                                         ; NCompress::NPpmd::CDecoder::QueryInterface(_GUID const &,void * *)+8Cj ...
.text:00000D00                 mov     eax, [ebp+this]
.text:00000D03                 mov     ecx, [eax+14h]
.text:00000D06                 add     ecx, 1
.text:00000D09                 mov     edx, [ebp+this]
.text:00000D0C                 mov     [edx+14h], ecx
.text:00000D0F                 xor     eax, eax
.text:00000D11
.text:00000D11 loc_D11:                                ; CODE XREF: NCompress::NPpmd::CDecoder::QueryInterface(_GUID const &,void * *)+132j
.text:00000D11                 add     esp, 14h
.text:00000D14                 cmp     ebp, esp
.text:00000D16                 call    __RTC_CheckEsp
.text:00000D1B                 mov     esp, ebp
.text:00000D1D                 pop     ebp
.text:00000D1E                 retn    0Ch
.text:00000D1E ?QueryInterface@CDecoder@NPpmd@NCompress@@UAGJABU_GUID@@PAPAX@Z endp
.text:00000D1E
.text:00000D1E ; ---------------------------------------------------------------------------
.text:00000D21                 align 4
.text:00000D21 _text           ends
.text:00000D21
.text:00000D24 ; ===========================================================================
.text:00000D24
.text:00000D24 ; Segment type: Pure code
.text:00000D24 ; Segment permissions: Read/Execute
.text:00000D24 _text           segment para public 'CODE' use32
.text:00000D24                 assume cs:_text
.text:00000D24                 ;org 0D24h
.text:00000D24 ; COMDAT (pick any)
.text:00000D24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000D24
.text:00000D24 ; =============== S U B R O U T I N E =======================================
.text:00000D24
.text:00000D24 ; Attributes: bp-based frame
.text:00000D24
.text:00000D24 ; unsigned __int32 __stdcall NCompress::NPpmd::CDecoder::AddRef(NCompress::NPpmd::CDecoder *this)
.text:00000D24                 public ?AddRef@CDecoder@NPpmd@NCompress@@UAGKXZ
.text:00000D24 ?AddRef@CDecoder@NPpmd@NCompress@@UAGKXZ proc near
.text:00000D24                                         ; CODE XREF: [thunk]:NCompress::NPpmd::CDecoder::AddRef`adjustor{4}' (void)+5j
.text:00000D24                                         ; [thunk]:NCompress::NPpmd::CDecoder::AddRef`adjustor{8}' (void)+5j ...
.text:00000D24
.text:00000D24 var_4           = dword ptr -4
.text:00000D24 this            = dword ptr  8
.text:00000D24
.text:00000D24                 push    ebp
.text:00000D25                 mov     ebp, esp
.text:00000D27                 push    ecx
.text:00000D28                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000D2F                 mov     eax, [ebp+this]
.text:00000D32                 mov     ecx, [eax+14h]
.text:00000D35                 add     ecx, 1
.text:00000D38                 mov     [ebp+var_4], ecx
.text:00000D3B                 mov     edx, [ebp+this]
.text:00000D3E                 mov     eax, [ebp+var_4]
.text:00000D41                 mov     [edx+14h], eax
.text:00000D44                 mov     eax, [ebp+var_4]
.text:00000D47                 mov     esp, ebp
.text:00000D49                 pop     ebp
.text:00000D4A                 retn    4
.text:00000D4A ?AddRef@CDecoder@NPpmd@NCompress@@UAGKXZ endp
.text:00000D4A
.text:00000D4A ; ---------------------------------------------------------------------------
.text:00000D4D                 align 10h
.text:00000D4D _text           ends
.text:00000D4D
.text:00000D50 ; ===========================================================================
.text:00000D50
.text:00000D50 ; Segment type: Pure code
.text:00000D50 ; Segment permissions: Read/Execute
.text:00000D50 _text           segment para public 'CODE' use32
.text:00000D50                 assume cs:_text
.text:00000D50                 ;org 0D50h
.text:00000D50 ; COMDAT (pick any)
.text:00000D50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000D50
.text:00000D50 ; =============== S U B R O U T I N E =======================================
.text:00000D50
.text:00000D50 ; Attributes: bp-based frame
.text:00000D50
.text:00000D50 ; int __stdcall __(void *Buf1, void *Buf2)
.text:00000D50                 public ___@8
.text:00000D50 ___@8           proc near               ; CODE XREF: NCompress::NPpmd::CDecoder::QueryInterface(_GUID const &,void * *)+2Cp
.text:00000D50                                         ; NCompress::NPpmd::CDecoder::QueryInterface(_GUID const &,void * *)+63p ...
.text:00000D50
.text:00000D50 Buf1            = dword ptr  8
.text:00000D50 Buf2            = dword ptr  0Ch
.text:00000D50
.text:00000D50                 push    ebp
.text:00000D51                 mov     ebp, esp
.text:00000D53                 mov     eax, [ebp+Buf2]
.text:00000D56                 push    eax             ; Buf2
.text:00000D57                 mov     ecx, [ebp+Buf1]
.text:00000D5A                 push    ecx             ; Buf1
.text:00000D5B                 call    _IsEqualGUID@8  ; IsEqualGUID(x,x)
.text:00000D60                 cmp     ebp, esp
.text:00000D62                 call    __RTC_CheckEsp
.text:00000D67                 pop     ebp
.text:00000D68                 retn    8
.text:00000D68 ___@8           endp
.text:00000D68
.text:00000D68 ; ---------------------------------------------------------------------------
.text:00000D6B                 align 4
.text:00000D6B _text           ends
.text:00000D6B
.text:00000D6C ; ===========================================================================
.text:00000D6C
.text:00000D6C ; Segment type: Pure code
.text:00000D6C ; Segment permissions: Read/Execute
.text:00000D6C _text           segment para public 'CODE' use32
.text:00000D6C                 assume cs:_text
.text:00000D6C                 ;org 0D6Ch
.text:00000D6C ; COMDAT (pick any)
.text:00000D6C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000D6C
.text:00000D6C ; =============== S U B R O U T I N E =======================================
.text:00000D6C
.text:00000D6C ; Attributes: bp-based frame
.text:00000D6C
.text:00000D6C ; int __stdcall IsEqualGUID(void *Buf1, void *Buf2)
.text:00000D6C                 public _IsEqualGUID@8
.text:00000D6C _IsEqualGUID@8  proc near               ; CODE XREF: __(x,x)+Bp
.text:00000D6C
.text:00000D6C Buf1            = dword ptr  8
.text:00000D6C Buf2            = dword ptr  0Ch
.text:00000D6C
.text:00000D6C                 push    ebp
.text:00000D6D                 mov     ebp, esp
.text:00000D6F                 push    10h             ; Size
.text:00000D71                 mov     eax, [ebp+Buf2]
.text:00000D74                 push    eax             ; Buf2
.text:00000D75                 mov     ecx, [ebp+Buf1]
.text:00000D78                 push    ecx             ; Buf1
.text:00000D79                 call    _memcmp
.text:00000D7E                 add     esp, 0Ch
.text:00000D81                 neg     eax
.text:00000D83                 sbb     eax, eax
.text:00000D85                 add     eax, 1
.text:00000D88                 cmp     ebp, esp
.text:00000D8A                 call    __RTC_CheckEsp
.text:00000D8F                 pop     ebp
.text:00000D90                 retn    8
.text:00000D90 _IsEqualGUID@8  endp
.text:00000D90
.text:00000D90 ; ---------------------------------------------------------------------------
.text:00000D93                 align 4
.text:00000D93 _text           ends
.text:00000D93
.text:00000D94 ; ===========================================================================
.text:00000D94
.text:00000D94 ; Segment type: Pure code
.text:00000D94 ; Segment permissions: Read/Execute
.text:00000D94 _text           segment para public 'CODE' use32
.text:00000D94                 assume cs:_text
.text:00000D94                 ;org 0D94h
.text:00000D94 ; COMDAT (pick any)
.text:00000D94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000D94
.text:00000D94 ; =============== S U B R O U T I N E =======================================
.text:00000D94
.text:00000D94 ; Attributes: bp-based frame
.text:00000D94
.text:00000D94 ; unsigned __int32 __stdcall NCompress::NPpmd::CDecoder::Release(NCompress::NPpmd::CDecoder *this)
.text:00000D94                 public ?Release@CDecoder@NPpmd@NCompress@@UAGKXZ
.text:00000D94 ?Release@CDecoder@NPpmd@NCompress@@UAGKXZ proc near
.text:00000D94                                         ; CODE XREF: [thunk]:NCompress::NPpmd::CDecoder::Release`adjustor{12}' (void)+5j
.text:00000D94                                         ; [thunk]:NCompress::NPpmd::CDecoder::Release`adjustor{16}' (void)+5j ...
.text:00000D94
.text:00000D94 var_10          = dword ptr -10h
.text:00000D94 var_C           = dword ptr -0Ch
.text:00000D94 var_8           = dword ptr -8
.text:00000D94 var_4           = dword ptr -4
.text:00000D94 this            = dword ptr  8
.text:00000D94
.text:00000D94                 push    ebp
.text:00000D95                 mov     ebp, esp
.text:00000D97                 sub     esp, 10h
.text:00000D9A                 mov     eax, 0CCCCCCCCh
.text:00000D9F                 mov     [ebp+var_10], eax
.text:00000DA2                 mov     [ebp+var_C], eax
.text:00000DA5                 mov     [ebp+var_8], eax
.text:00000DA8                 mov     [ebp+var_4], eax
.text:00000DAB                 mov     eax, [ebp+this]
.text:00000DAE                 mov     ecx, [eax+14h]
.text:00000DB1                 sub     ecx, 1
.text:00000DB4                 mov     [ebp+var_C], ecx
.text:00000DB7                 mov     edx, [ebp+this]
.text:00000DBA                 mov     eax, [ebp+var_C]
.text:00000DBD                 mov     [edx+14h], eax
.text:00000DC0                 cmp     [ebp+var_C], 0
.text:00000DC4                 jz      short loc_DCE
.text:00000DC6                 mov     ecx, [ebp+this]
.text:00000DC9                 mov     eax, [ecx+14h]
.text:00000DCC                 jmp     short loc_DF8
.text:00000DCE ; ---------------------------------------------------------------------------
.text:00000DCE
.text:00000DCE loc_DCE:                                ; CODE XREF: NCompress::NPpmd::CDecoder::Release(void)+30j
.text:00000DCE                 mov     edx, [ebp+this]
.text:00000DD1                 mov     [ebp+var_8], edx
.text:00000DD4                 mov     eax, [ebp+var_8]
.text:00000DD7                 mov     [ebp+var_4], eax
.text:00000DDA                 cmp     [ebp+var_4], 0
.text:00000DDE                 jz      short loc_DEF
.text:00000DE0                 push    1
.text:00000DE2                 mov     ecx, [ebp+var_4]
.text:00000DE5                 call    ??_GCDecoder@NPpmd@NCompress@@QAEPAXI@Z ; NCompress::NPpmd::CDecoder::`scalar deleting destructor'(uint)
.text:00000DEA                 mov     [ebp+var_10], eax
.text:00000DED                 jmp     short loc_DF6
.text:00000DEF ; ---------------------------------------------------------------------------
.text:00000DEF
.text:00000DEF loc_DEF:                                ; CODE XREF: NCompress::NPpmd::CDecoder::Release(void)+4Aj
.text:00000DEF                 mov     [ebp+var_10], 0
.text:00000DF6
.text:00000DF6 loc_DF6:                                ; CODE XREF: NCompress::NPpmd::CDecoder::Release(void)+59j
.text:00000DF6                 xor     eax, eax
.text:00000DF8
.text:00000DF8 loc_DF8:                                ; CODE XREF: NCompress::NPpmd::CDecoder::Release(void)+38j
.text:00000DF8                 add     esp, 10h
.text:00000DFB                 cmp     ebp, esp
.text:00000DFD                 call    __RTC_CheckEsp
.text:00000E02                 mov     esp, ebp
.text:00000E04                 pop     ebp
.text:00000E05                 retn    4
.text:00000E05 ?Release@CDecoder@NPpmd@NCompress@@UAGKXZ endp
.text:00000E05
.text:00000E05 _text           ends
.text:00000E05
.text:00000E08 ; ===========================================================================
.text:00000E08
.text:00000E08 ; Segment type: Pure code
.text:00000E08 ; Segment permissions: Read/Execute
.text:00000E08 _text           segment para public 'CODE' use32
.text:00000E08                 assume cs:_text
.text:00000E08                 ;org 0E08h
.text:00000E08 ; COMDAT (pick any)
.text:00000E08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000E08
.text:00000E08 ; =============== S U B R O U T I N E =======================================
.text:00000E08
.text:00000E08 ; Attributes: bp-based frame
.text:00000E08
.text:00000E08 ; public: void * __thiscall NCompress::NPpmd::CDecoder::`scalar deleting destructor'(unsigned int)
.text:00000E08                 public ??_GCDecoder@NPpmd@NCompress@@QAEPAXI@Z
.text:00000E08 ??_GCDecoder@NPpmd@NCompress@@QAEPAXI@Z proc near
.text:00000E08                                         ; CODE XREF: NCompress::NPpmd::CDecoder::Release(void)+51p
.text:00000E08
.text:00000E08 var_4           = dword ptr -4
.text:00000E08 arg_0           = dword ptr  8
.text:00000E08
.text:00000E08                 push    ebp
.text:00000E09                 mov     ebp, esp
.text:00000E0B                 push    ecx
.text:00000E0C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000E13                 mov     [ebp+var_4], ecx
.text:00000E16                 mov     ecx, [ebp+var_4] ; this
.text:00000E19                 call    ??1CDecoder@NPpmd@NCompress@@QAE@XZ ; NCompress::NPpmd::CDecoder::~CDecoder(void)
.text:00000E1E                 mov     eax, [ebp+arg_0]
.text:00000E21                 and     eax, 1
.text:00000E24                 jz      short loc_E32
.text:00000E26                 mov     ecx, [ebp+var_4]
.text:00000E29                 push    ecx             ; void *
.text:00000E2A                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00000E2F                 add     esp, 4
.text:00000E32
.text:00000E32 loc_E32:                                ; CODE XREF: NCompress::NPpmd::CDecoder::`scalar deleting destructor'(uint)+1Cj
.text:00000E32                 mov     eax, [ebp+var_4]
.text:00000E35                 add     esp, 4
.text:00000E38                 cmp     ebp, esp
.text:00000E3A                 call    __RTC_CheckEsp
.text:00000E3F                 mov     esp, ebp
.text:00000E41                 pop     ebp
.text:00000E42                 retn    4
.text:00000E42 ??_GCDecoder@NPpmd@NCompress@@QAEPAXI@Z endp
.text:00000E42
.text:00000E42 ; ---------------------------------------------------------------------------
.text:00000E45                 align 4
.text:00000E45 _text           ends
.text:00000E45
.text:00000E48 ; ===========================================================================
.text:00000E48
.text:00000E48 ; Segment type: Pure code
.text:00000E48 ; Segment permissions: Read/Execute
.text:00000E48 _text           segment para public 'CODE' use32
.text:00000E48                 assume cs:_text
.text:00000E48                 ;org 0E48h
.text:00000E48 ; COMDAT (pick any)
.text:00000E48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000E48
.text:00000E48 ; =============== S U B R O U T I N E =======================================
.text:00000E48
.text:00000E48 ; Attributes: bp-based frame
.text:00000E48
.text:00000E48 ; void __thiscall CByteInBufWrap::Init(CByteInBufWrap *__hidden this)
.text:00000E48                 public ?Init@CByteInBufWrap@@QAEXXZ
.text:00000E48 ?Init@CByteInBufWrap@@QAEXXZ proc near  ; CODE XREF: NCompress::NPpmd::CDecoder::CodeSpec(uchar *,uint)+5Dp
.text:00000E48
.text:00000E48 var_4           = dword ptr -4
.text:00000E48
.text:00000E48                 push    ebp
.text:00000E49                 mov     ebp, esp
.text:00000E4B                 push    ecx
.text:00000E4C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000E53                 mov     [ebp+var_4], ecx
.text:00000E56                 mov     eax, [ebp+var_4]
.text:00000E59                 mov     ecx, [ebp+var_4]
.text:00000E5C                 mov     edx, [ecx+0Ch]
.text:00000E5F                 mov     [eax+4], edx
.text:00000E62                 mov     eax, [ebp+var_4]
.text:00000E65                 mov     ecx, [ebp+var_4]
.text:00000E68                 mov     edx, [ecx+4]
.text:00000E6B                 mov     [eax+8], edx
.text:00000E6E                 mov     eax, [ebp+var_4]
.text:00000E71                 mov     dword ptr [eax+18h], 0
.text:00000E78                 mov     dword ptr [eax+1Ch], 0
.text:00000E7F                 mov     ecx, [ebp+var_4]
.text:00000E82                 mov     byte ptr [ecx+20h], 0
.text:00000E86                 mov     edx, [ebp+var_4]
.text:00000E89                 mov     dword ptr [edx+24h], 0
.text:00000E90                 mov     esp, ebp
.text:00000E92                 pop     ebp
.text:00000E93                 retn
.text:00000E93 ?Init@CByteInBufWrap@@QAEXXZ endp
.text:00000E93
.text:00000E93 _text           ends
.text:00000E93
.text:00000E94 ; ===========================================================================
.text:00000E94
.text:00000E94 ; Segment type: Pure code
.text:00000E94 ; Segment permissions: Read/Execute
.text:00000E94 _text           segment para public 'CODE' use32
.text:00000E94                 assume cs:_text
.text:00000E94                 ;org 0E94h
.text:00000E94 ; COMDAT (pick any)
.text:00000E94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000E94
.text:00000E94 ; =============== S U B R O U T I N E =======================================
.text:00000E94
.text:00000E94 ; Attributes: bp-based frame
.text:00000E94
.text:00000E94 ; unsigned __int64 __thiscall CByteInBufWrap::GetProcessed(CByteInBufWrap *__hidden this)
.text:00000E94                 public ?GetProcessed@CByteInBufWrap@@QBE_KXZ
.text:00000E94 ?GetProcessed@CByteInBufWrap@@QBE_KXZ proc near
.text:00000E94                                         ; CODE XREF: NCompress::NPpmd::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+105p
.text:00000E94
.text:00000E94 var_4           = dword ptr -4
.text:00000E94
.text:00000E94                 push    ebp
.text:00000E95                 mov     ebp, esp
.text:00000E97                 push    ecx
.text:00000E98                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000E9F                 mov     [ebp+var_4], ecx
.text:00000EA2                 mov     eax, [ebp+var_4]
.text:00000EA5                 mov     ecx, [ebp+var_4]
.text:00000EA8                 mov     eax, [eax+4]
.text:00000EAB                 sub     eax, [ecx+0Ch]
.text:00000EAE                 cdq
.text:00000EAF                 mov     ecx, [ebp+var_4]
.text:00000EB2                 add     eax, [ecx+18h]
.text:00000EB5                 adc     edx, [ecx+1Ch]
.text:00000EB8                 mov     esp, ebp
.text:00000EBA                 pop     ebp
.text:00000EBB                 retn
.text:00000EBB ?GetProcessed@CByteInBufWrap@@QBE_KXZ endp
.text:00000EBB
.text:00000EBB _text           ends
.text:00000EBB
.text:00000EBC ; ===========================================================================
.text:00000EBC
.text:00000EBC ; Segment type: Pure code
.text:00000EBC ; Segment permissions: Read/Execute
.text:00000EBC _text           segment para public 'CODE' use32
.text:00000EBC                 assume cs:_text
.text:00000EBC                 ;org 0EBCh
.text:00000EBC ; COMDAT (pick any)
.text:00000EBC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000EBC
.text:00000EBC ; =============== S U B R O U T I N E =======================================
.text:00000EBC
.text:00000EBC ; Attributes: bp-based frame
.text:00000EBC
.text:00000EBC ; public: __thiscall CMyComPtr<struct ISequentialInStream>::~CMyComPtr<struct ISequentialInStream>(void)
.text:00000EBC                 public ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
.text:00000EBC ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ proc near
.text:00000EBC                                         ; CODE XREF: NCompress::NPpmd::CDecoder::~CDecoder(void)+8Bp
.text:00000EBC
.text:00000EBC var_4           = dword ptr -4
.text:00000EBC
.text:00000EBC                 push    ebp
.text:00000EBD                 mov     ebp, esp
.text:00000EBF                 push    ecx
.text:00000EC0                 push    esi
.text:00000EC1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000EC8                 mov     [ebp+var_4], ecx
.text:00000ECB                 mov     eax, [ebp+var_4]
.text:00000ECE                 cmp     dword ptr [eax], 0
.text:00000ED1                 jz      short loc_EEE
.text:00000ED3                 mov     ecx, [ebp+var_4]
.text:00000ED6                 mov     edx, [ecx]
.text:00000ED8                 mov     eax, [ebp+var_4]
.text:00000EDB                 mov     ecx, [eax]
.text:00000EDD                 mov     edx, [edx]
.text:00000EDF                 mov     esi, esp
.text:00000EE1                 push    ecx
.text:00000EE2                 mov     eax, [edx+8]
.text:00000EE5                 call    eax
.text:00000EE7                 cmp     esi, esp
.text:00000EE9                 call    __RTC_CheckEsp
.text:00000EEE
.text:00000EEE loc_EEE:                                ; CODE XREF: CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)+15j
.text:00000EEE                 pop     esi
.text:00000EEF                 add     esp, 4
.text:00000EF2                 cmp     ebp, esp
.text:00000EF4                 call    __RTC_CheckEsp
.text:00000EF9                 mov     esp, ebp
.text:00000EFB                 pop     ebp
.text:00000EFC                 retn
.text:00000EFC ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ endp
.text:00000EFC
.text:00000EFC ; ---------------------------------------------------------------------------
.text:00000EFD                 align 10h
.text:00000EFD _text           ends
.text:00000EFD
.text:00000F00 ; ===========================================================================
.text:00000F00
.text:00000F00 ; Segment type: Pure code
.text:00000F00 ; Segment permissions: Read/Execute
.text:00000F00 _text           segment para public 'CODE' use32
.text:00000F00                 assume cs:_text
.text:00000F00                 ;org 0F00h
.text:00000F00 ; COMDAT (pick any)
.text:00000F00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000F00
.text:00000F00 ; =============== S U B R O U T I N E =======================================
.text:00000F00
.text:00000F00 ; Attributes: bp-based frame
.text:00000F00
.text:00000F00 ; public: void __thiscall CMyComPtr<struct ISequentialInStream>::Release(void)
.text:00000F00                 public ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ
.text:00000F00 ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ proc near
.text:00000F00                                         ; CODE XREF: NCompress::NPpmd::CDecoder::ReleaseInStream(void)+Cp
.text:00000F00
.text:00000F00 var_4           = dword ptr -4
.text:00000F00
.text:00000F00                 push    ebp
.text:00000F01                 mov     ebp, esp
.text:00000F03                 push    ecx
.text:00000F04                 push    esi
.text:00000F05                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000F0C                 mov     [ebp+var_4], ecx
.text:00000F0F                 mov     eax, [ebp+var_4]
.text:00000F12                 cmp     dword ptr [eax], 0
.text:00000F15                 jz      short loc_F3B
.text:00000F17                 mov     ecx, [ebp+var_4]
.text:00000F1A                 mov     edx, [ecx]
.text:00000F1C                 mov     eax, [ebp+var_4]
.text:00000F1F                 mov     ecx, [eax]
.text:00000F21                 mov     edx, [edx]
.text:00000F23                 mov     esi, esp
.text:00000F25                 push    ecx
.text:00000F26                 mov     eax, [edx+8]
.text:00000F29                 call    eax
.text:00000F2B                 cmp     esi, esp
.text:00000F2D                 call    __RTC_CheckEsp
.text:00000F32                 mov     ecx, [ebp+var_4]
.text:00000F35                 mov     dword ptr [ecx], 0
.text:00000F3B
.text:00000F3B loc_F3B:                                ; CODE XREF: CMyComPtr<ISequentialInStream>::Release(void)+15j
.text:00000F3B                 pop     esi
.text:00000F3C                 add     esp, 4
.text:00000F3F                 cmp     ebp, esp
.text:00000F41                 call    __RTC_CheckEsp
.text:00000F46                 mov     esp, ebp
.text:00000F48                 pop     ebp
.text:00000F49                 retn
.text:00000F49 ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ endp
.text:00000F49
.text:00000F49 ; ---------------------------------------------------------------------------
.text:00000F4A                 align 4
.text:00000F4A _text           ends
.text:00000F4A
.text:00000F4C ; ===========================================================================
.text:00000F4C
.text:00000F4C ; Segment type: Pure code
.text:00000F4C ; Segment permissions: Read/Execute
.text:00000F4C _text           segment para public 'CODE' use32
.text:00000F4C                 assume cs:_text
.text:00000F4C                 ;org 0F4Ch
.text:00000F4C ; COMDAT (pick any)
.text:00000F4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000F4C
.text:00000F4C ; =============== S U B R O U T I N E =======================================
.text:00000F4C
.text:00000F4C ; Attributes: bp-based frame
.text:00000F4C
.text:00000F4C ; public: struct ISequentialInStream * __thiscall CMyComPtr<struct ISequentialInStream>::operator=(struct ISequentialInStream *)
.text:00000F4C                 public ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z
.text:00000F4C ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z proc near
.text:00000F4C                                         ; CODE XREF: NCompress::NPpmd::CDecoder::SetInStream(ISequentialInStream *)+10p
.text:00000F4C
.text:00000F4C var_4           = dword ptr -4
.text:00000F4C arg_0           = dword ptr  8
.text:00000F4C
.text:00000F4C                 push    ebp
.text:00000F4D                 mov     ebp, esp
.text:00000F4F                 push    ecx
.text:00000F50                 push    esi
.text:00000F51                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000F58                 mov     [ebp+var_4], ecx
.text:00000F5B                 cmp     [ebp+arg_0], 0
.text:00000F5F                 jz      short loc_F78
.text:00000F61                 mov     eax, [ebp+arg_0]
.text:00000F64                 mov     ecx, [eax]
.text:00000F66                 mov     esi, esp
.text:00000F68                 mov     edx, [ebp+arg_0]
.text:00000F6B                 push    edx
.text:00000F6C                 mov     eax, [ecx+4]
.text:00000F6F                 call    eax
.text:00000F71                 cmp     esi, esp
.text:00000F73                 call    __RTC_CheckEsp
.text:00000F78
.text:00000F78 loc_F78:                                ; CODE XREF: CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)+13j
.text:00000F78                 mov     ecx, [ebp+var_4]
.text:00000F7B                 cmp     dword ptr [ecx], 0
.text:00000F7E                 jz      short loc_F9B
.text:00000F80                 mov     edx, [ebp+var_4]
.text:00000F83                 mov     eax, [edx]
.text:00000F85                 mov     ecx, [ebp+var_4]
.text:00000F88                 mov     edx, [ecx]
.text:00000F8A                 mov     eax, [eax]
.text:00000F8C                 mov     esi, esp
.text:00000F8E                 push    edx
.text:00000F8F                 mov     ecx, [eax+8]
.text:00000F92                 call    ecx
.text:00000F94                 cmp     esi, esp
.text:00000F96                 call    __RTC_CheckEsp
.text:00000F9B
.text:00000F9B loc_F9B:                                ; CODE XREF: CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)+32j
.text:00000F9B                 mov     edx, [ebp+var_4]
.text:00000F9E                 mov     eax, [ebp+arg_0]
.text:00000FA1                 mov     [edx], eax
.text:00000FA3                 mov     eax, [ebp+arg_0]
.text:00000FA6                 pop     esi
.text:00000FA7                 add     esp, 4
.text:00000FAA                 cmp     ebp, esp
.text:00000FAC                 call    __RTC_CheckEsp
.text:00000FB1                 mov     esp, ebp
.text:00000FB3                 pop     ebp
.text:00000FB4                 retn    4
.text:00000FB4 ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z endp
.text:00000FB4
.text:00000FB4 ; ---------------------------------------------------------------------------
.text:00000FB7                 align 4
.text:00000FB7 _text           ends
.text:00000FB7
.text:00000FB8 ; ===========================================================================
.text:00000FB8
.text:00000FB8 ; Segment type: Pure code
.text:00000FB8 ; Segment permissions: Read/Execute
.text:00000FB8 _text           segment para public 'CODE' use32
.text:00000FB8                 assume cs:_text
.text:00000FB8                 ;org 0FB8h
.text:00000FB8 ; COMDAT (pick any)
.text:00000FB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000FB8
.text:00000FB8 ; =============== S U B R O U T I N E =======================================
.text:00000FB8
.text:00000FB8
.text:00000FB8 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NPpmd::CDecoder::Release`adjustor{12}' (void)
.text:00000FB8                 public ?Release@CDecoder@NPpmd@NCompress@@WM@AGKXZ
.text:00000FB8 ?Release@CDecoder@NPpmd@NCompress@@WM@AGKXZ proc near
.text:00000FB8                                         ; DATA XREF: .rdata:000006B4o
.text:00000FB8
.text:00000FB8 arg_0           = dword ptr  4
.text:00000FB8
.text:00000FB8                 sub     [esp+arg_0], 0Ch
.text:00000FBD                 jmp     ?Release@CDecoder@NPpmd@NCompress@@UAGKXZ ; NCompress::NPpmd::CDecoder::Release(void)
.text:00000FBD ?Release@CDecoder@NPpmd@NCompress@@WM@AGKXZ endp
.text:00000FBD
.text:00000FBD ; ---------------------------------------------------------------------------
.text:00000FC2                 align 4
.text:00000FC2 _text           ends
.text:00000FC2
.text:00000FC4 ; ===========================================================================
.text:00000FC4
.text:00000FC4 ; Segment type: Pure code
.text:00000FC4 ; Segment permissions: Read/Execute
.text:00000FC4 _text           segment para public 'CODE' use32
.text:00000FC4                 assume cs:_text
.text:00000FC4                 ;org 0FC4h
.text:00000FC4 ; COMDAT (pick any)
.text:00000FC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000FC4
.text:00000FC4 ; =============== S U B R O U T I N E =======================================
.text:00000FC4
.text:00000FC4
.text:00000FC4 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NPpmd::CDecoder::AddRef`adjustor{4}' (void)
.text:00000FC4                 public ?AddRef@CDecoder@NPpmd@NCompress@@W3AGKXZ
.text:00000FC4 ?AddRef@CDecoder@NPpmd@NCompress@@W3AGKXZ proc near
.text:00000FC4                                         ; DATA XREF: .rdata:000006DCo
.text:00000FC4
.text:00000FC4 arg_0           = dword ptr  4
.text:00000FC4
.text:00000FC4                 sub     [esp+arg_0], 4
.text:00000FC9                 jmp     ?AddRef@CDecoder@NPpmd@NCompress@@UAGKXZ ; NCompress::NPpmd::CDecoder::AddRef(void)
.text:00000FC9 ?AddRef@CDecoder@NPpmd@NCompress@@W3AGKXZ endp
.text:00000FC9
.text:00000FC9 ; ---------------------------------------------------------------------------
.text:00000FCE                 align 10h
.text:00000FCE _text           ends
.text:00000FCE
.text:00000FD0 ; ===========================================================================
.text:00000FD0
.text:00000FD0 ; Segment type: Pure code
.text:00000FD0 ; Segment permissions: Read/Execute
.text:00000FD0 _text           segment para public 'CODE' use32
.text:00000FD0                 assume cs:_text
.text:00000FD0                 ;org 0FD0h
.text:00000FD0 ; COMDAT (pick any)
.text:00000FD0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000FD0
.text:00000FD0 ; =============== S U B R O U T I N E =======================================
.text:00000FD0
.text:00000FD0
.text:00000FD0 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NPpmd::CDecoder::Release`adjustor{16}' (void)
.text:00000FD0                 public ?Release@CDecoder@NPpmd@NCompress@@WBA@AGKXZ
.text:00000FD0 ?Release@CDecoder@NPpmd@NCompress@@WBA@AGKXZ proc near
.text:00000FD0                                         ; DATA XREF: .rdata:000006A0o
.text:00000FD0
.text:00000FD0 arg_0           = dword ptr  4
.text:00000FD0
.text:00000FD0                 sub     [esp+arg_0], 10h
.text:00000FD5                 jmp     ?Release@CDecoder@NPpmd@NCompress@@UAGKXZ ; NCompress::NPpmd::CDecoder::Release(void)
.text:00000FD5 ?Release@CDecoder@NPpmd@NCompress@@WBA@AGKXZ endp
.text:00000FD5
.text:00000FD5 ; ---------------------------------------------------------------------------
.text:00000FDA                 align 4
.text:00000FDA _text           ends
.text:00000FDA
.text:00000FDC ; ===========================================================================
.text:00000FDC
.text:00000FDC ; Segment type: Pure code
.text:00000FDC ; Segment permissions: Read/Execute
.text:00000FDC _text           segment para public 'CODE' use32
.text:00000FDC                 assume cs:_text
.text:00000FDC                 ;org 0FDCh
.text:00000FDC ; COMDAT (pick any)
.text:00000FDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000FDC
.text:00000FDC ; =============== S U B R O U T I N E =======================================
.text:00000FDC
.text:00000FDC
.text:00000FDC ; [thunk]:public: virtual unsigned long __stdcall NCompress::NPpmd::CDecoder::AddRef`adjustor{8}' (void)
.text:00000FDC                 public ?AddRef@CDecoder@NPpmd@NCompress@@W7AGKXZ
.text:00000FDC ?AddRef@CDecoder@NPpmd@NCompress@@W7AGKXZ proc near
.text:00000FDC                                         ; DATA XREF: .rdata:000006C4o
.text:00000FDC
.text:00000FDC arg_0           = dword ptr  4
.text:00000FDC
.text:00000FDC                 sub     [esp+arg_0], 8
.text:00000FE1                 jmp     ?AddRef@CDecoder@NPpmd@NCompress@@UAGKXZ ; NCompress::NPpmd::CDecoder::AddRef(void)
.text:00000FE1 ?AddRef@CDecoder@NPpmd@NCompress@@W7AGKXZ endp
.text:00000FE1
.text:00000FE1 ; ---------------------------------------------------------------------------
.text:00000FE6                 align 4
.text:00000FE6 _text           ends
.text:00000FE6
.text:00000FE8 ; ===========================================================================
.text:00000FE8
.text:00000FE8 ; Segment type: Pure code
.text:00000FE8 ; Segment permissions: Read/Execute
.text:00000FE8 _text           segment para public 'CODE' use32
.text:00000FE8                 assume cs:_text
.text:00000FE8                 ;org 0FE8h
.text:00000FE8 ; COMDAT (pick any)
.text:00000FE8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000FE8
.text:00000FE8 ; =============== S U B R O U T I N E =======================================
.text:00000FE8
.text:00000FE8
.text:00000FE8 ; [thunk]:public: virtual long __stdcall NCompress::NPpmd::CDecoder::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:00000FE8                 public ?QueryInterface@CDecoder@NPpmd@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.text:00000FE8 ?QueryInterface@CDecoder@NPpmd@NCompress@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:00000FE8                                         ; DATA XREF: .rdata:const NCompress::NPpmd::CDecoder::`vftable'{for `ICompressSetDecoderProperties2'}o
.text:00000FE8
.text:00000FE8 arg_0           = dword ptr  4
.text:00000FE8
.text:00000FE8                 sub     [esp+arg_0], 4
.text:00000FED                 jmp     ?QueryInterface@CDecoder@NPpmd@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NPpmd::CDecoder::QueryInterface(_GUID const &,void * *)
.text:00000FED ?QueryInterface@CDecoder@NPpmd@NCompress@@W3AGJABU_GUID@@PAPAX@Z endp
.text:00000FED
.text:00000FED ; ---------------------------------------------------------------------------
.text:00000FF2                 align 4
.text:00000FF2 _text           ends
.text:00000FF2
.text:00000FF4 ; ===========================================================================
.text:00000FF4
.text:00000FF4 ; Segment type: Pure code
.text:00000FF4 ; Segment permissions: Read/Execute
.text:00000FF4 _text           segment para public 'CODE' use32
.text:00000FF4                 assume cs:_text
.text:00000FF4                 ;org 0FF4h
.text:00000FF4 ; COMDAT (pick any)
.text:00000FF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000FF4
.text:00000FF4 ; =============== S U B R O U T I N E =======================================
.text:00000FF4
.text:00000FF4
.text:00000FF4 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NPpmd::CDecoder::AddRef`adjustor{12}' (void)
.text:00000FF4                 public ?AddRef@CDecoder@NPpmd@NCompress@@WM@AGKXZ
.text:00000FF4 ?AddRef@CDecoder@NPpmd@NCompress@@WM@AGKXZ proc near
.text:00000FF4                                         ; DATA XREF: .rdata:000006B0o
.text:00000FF4
.text:00000FF4 arg_0           = dword ptr  4
.text:00000FF4
.text:00000FF4                 sub     [esp+arg_0], 0Ch
.text:00000FF9                 jmp     ?AddRef@CDecoder@NPpmd@NCompress@@UAGKXZ ; NCompress::NPpmd::CDecoder::AddRef(void)
.text:00000FF9 ?AddRef@CDecoder@NPpmd@NCompress@@WM@AGKXZ endp
.text:00000FF9
.text:00000FF9 ; ---------------------------------------------------------------------------
.text:00000FFE                 align 10h
.text:00000FFE _text           ends
.text:00000FFE
.text:00001000 ; ===========================================================================
.text:00001000
.text:00001000 ; Segment type: Pure code
.text:00001000 ; Segment permissions: Read/Execute
.text:00001000 _text           segment para public 'CODE' use32
.text:00001000                 assume cs:_text
.text:00001000                 ;org 1000h
.text:00001000 ; COMDAT (pick any)
.text:00001000                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001000
.text:00001000 ; =============== S U B R O U T I N E =======================================
.text:00001000
.text:00001000
.text:00001000 ; [thunk]:public: virtual long __stdcall NCompress::NPpmd::CDecoder::QueryInterface`adjustor{8}' (struct _GUID const &, void * *)
.text:00001000                 public ?QueryInterface@CDecoder@NPpmd@NCompress@@W7AGJABU_GUID@@PAPAX@Z
.text:00001000 ?QueryInterface@CDecoder@NPpmd@NCompress@@W7AGJABU_GUID@@PAPAX@Z proc near
.text:00001000                                         ; DATA XREF: .rdata:const NCompress::NPpmd::CDecoder::`vftable'{for `ICompressSetInStream'}o
.text:00001000
.text:00001000 arg_0           = dword ptr  4
.text:00001000
.text:00001000                 sub     [esp+arg_0], 8
.text:00001005                 jmp     ?QueryInterface@CDecoder@NPpmd@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NPpmd::CDecoder::QueryInterface(_GUID const &,void * *)
.text:00001005 ?QueryInterface@CDecoder@NPpmd@NCompress@@W7AGJABU_GUID@@PAPAX@Z endp
.text:00001005
.text:00001005 ; ---------------------------------------------------------------------------
.text:0000100A                 align 4
.text:0000100A _text           ends
.text:0000100A
.text:0000100C ; ===========================================================================
.text:0000100C
.text:0000100C ; Segment type: Pure code
.text:0000100C ; Segment permissions: Read/Execute
.text:0000100C _text           segment para public 'CODE' use32
.text:0000100C                 assume cs:_text
.text:0000100C                 ;org 100Ch
.text:0000100C ; COMDAT (pick any)
.text:0000100C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000100C
.text:0000100C ; =============== S U B R O U T I N E =======================================
.text:0000100C
.text:0000100C
.text:0000100C ; [thunk]:public: virtual unsigned long __stdcall NCompress::NPpmd::CDecoder::AddRef`adjustor{16}' (void)
.text:0000100C                 public ?AddRef@CDecoder@NPpmd@NCompress@@WBA@AGKXZ
.text:0000100C ?AddRef@CDecoder@NPpmd@NCompress@@WBA@AGKXZ proc near
.text:0000100C                                         ; DATA XREF: .rdata:0000069Co
.text:0000100C
.text:0000100C arg_0           = dword ptr  4
.text:0000100C
.text:0000100C                 sub     [esp+arg_0], 10h
.text:00001011                 jmp     ?AddRef@CDecoder@NPpmd@NCompress@@UAGKXZ ; NCompress::NPpmd::CDecoder::AddRef(void)
.text:00001011 ?AddRef@CDecoder@NPpmd@NCompress@@WBA@AGKXZ endp
.text:00001011
.text:00001011 ; ---------------------------------------------------------------------------
.text:00001016                 align 4
.text:00001016 _text           ends
.text:00001016
.text:00001018 ; ===========================================================================
.text:00001018
.text:00001018 ; Segment type: Pure code
.text:00001018 ; Segment permissions: Read/Execute
.text:00001018 _text           segment para public 'CODE' use32
.text:00001018                 assume cs:_text
.text:00001018                 ;org 1018h
.text:00001018 ; COMDAT (pick any)
.text:00001018                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001018
.text:00001018 ; =============== S U B R O U T I N E =======================================
.text:00001018
.text:00001018
.text:00001018 ; [thunk]:public: virtual long __stdcall NCompress::NPpmd::CDecoder::QueryInterface`adjustor{12}' (struct _GUID const &, void * *)
.text:00001018                 public ?QueryInterface@CDecoder@NPpmd@NCompress@@WM@AGJABU_GUID@@PAPAX@Z
.text:00001018 ?QueryInterface@CDecoder@NPpmd@NCompress@@WM@AGJABU_GUID@@PAPAX@Z proc near
.text:00001018                                         ; DATA XREF: .rdata:const NCompress::NPpmd::CDecoder::`vftable'{for `ICompressSetOutStreamSize'}o
.text:00001018
.text:00001018 arg_0           = dword ptr  4
.text:00001018
.text:00001018                 sub     [esp+arg_0], 0Ch
.text:0000101D                 jmp     ?QueryInterface@CDecoder@NPpmd@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NPpmd::CDecoder::QueryInterface(_GUID const &,void * *)
.text:0000101D ?QueryInterface@CDecoder@NPpmd@NCompress@@WM@AGJABU_GUID@@PAPAX@Z endp
.text:0000101D
.text:0000101D ; ---------------------------------------------------------------------------
.text:00001022                 align 4
.text:00001022 _text           ends
.text:00001022
.text:00001024 ; ===========================================================================
.text:00001024
.text:00001024 ; Segment type: Pure code
.text:00001024 ; Segment permissions: Read/Execute
.text:00001024 _text           segment para public 'CODE' use32
.text:00001024                 assume cs:_text
.text:00001024                 ;org 1024h
.text:00001024 ; COMDAT (pick any)
.text:00001024                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001024
.text:00001024 ; =============== S U B R O U T I N E =======================================
.text:00001024
.text:00001024
.text:00001024 ; [thunk]:public: virtual long __stdcall NCompress::NPpmd::CDecoder::QueryInterface`adjustor{16}' (struct _GUID const &, void * *)
.text:00001024                 public ?QueryInterface@CDecoder@NPpmd@NCompress@@WBA@AGJABU_GUID@@PAPAX@Z
.text:00001024 ?QueryInterface@CDecoder@NPpmd@NCompress@@WBA@AGJABU_GUID@@PAPAX@Z proc near
.text:00001024                                         ; DATA XREF: .rdata:const NCompress::NPpmd::CDecoder::`vftable'{for `ISequentialInStream'}o
.text:00001024
.text:00001024 arg_0           = dword ptr  4
.text:00001024
.text:00001024                 sub     [esp+arg_0], 10h
.text:00001029                 jmp     ?QueryInterface@CDecoder@NPpmd@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NPpmd::CDecoder::QueryInterface(_GUID const &,void * *)
.text:00001029 ?QueryInterface@CDecoder@NPpmd@NCompress@@WBA@AGJABU_GUID@@PAPAX@Z endp
.text:00001029
.text:00001029 ; ---------------------------------------------------------------------------
.text:0000102E                 align 10h
.text:0000102E _text           ends
.text:0000102E
.text:00001030 ; ===========================================================================
.text:00001030
.text:00001030 ; Segment type: Pure code
.text:00001030 ; Segment permissions: Read/Execute
.text:00001030 _text           segment para public 'CODE' use32
.text:00001030                 assume cs:_text
.text:00001030                 ;org 1030h
.text:00001030 ; COMDAT (pick any)
.text:00001030                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001030
.text:00001030 ; =============== S U B R O U T I N E =======================================
.text:00001030
.text:00001030
.text:00001030 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NPpmd::CDecoder::Release`adjustor{4}' (void)
.text:00001030                 public ?Release@CDecoder@NPpmd@NCompress@@W3AGKXZ
.text:00001030 ?Release@CDecoder@NPpmd@NCompress@@W3AGKXZ proc near
.text:00001030                                         ; DATA XREF: .rdata:000006E0o
.text:00001030
.text:00001030 arg_0           = dword ptr  4
.text:00001030
.text:00001030                 sub     [esp+arg_0], 4
.text:00001035                 jmp     ?Release@CDecoder@NPpmd@NCompress@@UAGKXZ ; NCompress::NPpmd::CDecoder::Release(void)
.text:00001035 ?Release@CDecoder@NPpmd@NCompress@@W3AGKXZ endp
.text:00001035
.text:00001035 ; ---------------------------------------------------------------------------
.text:0000103A                 align 4
.text:0000103A _text           ends
.text:0000103A
.text:0000103C ; ===========================================================================
.text:0000103C
.text:0000103C ; Segment type: Pure code
.text:0000103C ; Segment permissions: Read/Execute
.text:0000103C _text           segment para public 'CODE' use32
.text:0000103C                 assume cs:_text
.text:0000103C                 ;org 103Ch
.text:0000103C ; COMDAT (pick any)
.text:0000103C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000103C
.text:0000103C ; =============== S U B R O U T I N E =======================================
.text:0000103C
.text:0000103C
.text:0000103C ; [thunk]:public: virtual unsigned long __stdcall NCompress::NPpmd::CDecoder::Release`adjustor{8}' (void)
.text:0000103C                 public ?Release@CDecoder@NPpmd@NCompress@@W7AGKXZ
.text:0000103C ?Release@CDecoder@NPpmd@NCompress@@W7AGKXZ proc near
.text:0000103C                                         ; DATA XREF: .rdata:000006C8o
.text:0000103C
.text:0000103C arg_0           = dword ptr  4
.text:0000103C
.text:0000103C                 sub     [esp+arg_0], 8
.text:00001041                 jmp     ?Release@CDecoder@NPpmd@NCompress@@UAGKXZ ; NCompress::NPpmd::CDecoder::Release(void)
.text:00001041 ?Release@CDecoder@NPpmd@NCompress@@W7AGKXZ endp
.text:00001041
.text:00001041 _text           ends
.text:00001041
UNDEF:00001050 ; ===========================================================================
UNDEF:00001050
UNDEF:00001050 ; Segment type: Externs
UNDEF:00001050 ; UNDEF
UNDEF:00001050 ; __stdcall Ppmd7_Free(x, x)
UNDEF:00001050                 extrn _Ppmd7_Free@8:near
UNDEF:00001050                                         ; CODE XREF: NCompress::NPpmd::CDecoder::~CDecoder(void)+7Dp
UNDEF:00001054                 extrn _g_BigAlloc:near  ; DATA XREF: NCompress::NPpmd::CDecoder::~CDecoder(void)+71o
UNDEF:00001054                                         ; NCompress::NPpmd::CDecoder::SetDecoderProperties2(uchar const *,uint):loc_144o
UNDEF:00001058 ; __stdcall MidFree(x)
UNDEF:00001058                 extrn _MidFree@4:near   ; CODE XREF: NCompress::NPpmd::CDecoder::~CDecoder(void)+6Cp
UNDEF:0000105C                 extrn ___security_cookie:near
UNDEF:0000105C                                         ; DATA XREF: NCompress::NPpmd::CDecoder::~CDecoder(void)+19r
UNDEF:00001060                 extrn ___CxxFrameHandler3:near
UNDEF:00001060                                         ; CODE XREF: __ehhandler$??1CDecoder@NPpmd@NCompress@@QAE@XZ+16j
UNDEF:00001064 ; __fastcall __security_check_cookie(x)
UNDEF:00001064                 extrn @__security_check_cookie@4:near
UNDEF:00001064                                         ; CODE XREF: __ehhandler$??1CDecoder@NPpmd@NCompress@@QAE@XZ+Cp
UNDEF:00001068                 extrn __RTC_CheckEsp:near
UNDEF:00001068                                         ; CODE XREF: NCompress::NPpmd::CDecoder::~CDecoder(void)+B2p
UNDEF:00001068                                         ; NCompress::NPpmd::CDecoder::SetDecoderProperties2(uchar const *,uint)+ABp ...
UNDEF:0000106C                 extrn __RTC_Shutdown:near
UNDEF:0000106C                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00001070                 extrn __RTC_InitBase:near
UNDEF:00001070                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00001074 ; const type_info::`vftable'
UNDEF:00001074                 extrn ??_7type_info@@6B@:near
UNDEF:00001074                                         ; DATA XREF: .data:NCompress::NPpmd::CDecoder `RTTI Type Descriptor'o
UNDEF:00001074                                         ; .data:ICompressCoder `RTTI Type Descriptor'o ...
UNDEF:00001078 ; void __thiscall CByteInBufWrap::Free(CByteInBufWrap *__hidden this)
UNDEF:00001078                 extrn ?Free@CByteInBufWrap@@QAEXXZ:near
UNDEF:00001078                                         ; CODE XREF: CByteInBufWrap::~CByteInBufWrap(void)+11p
UNDEF:0000107C                 extrn _IID_ISequentialInStream:near
UNDEF:0000107C                                         ; DATA XREF: NCompress::NPpmd::CDecoder::QueryInterface(_GUID const &,void * *):loc_CC5o
UNDEF:00001080                 extrn _IID_ICompressSetOutStreamSize:near
UNDEF:00001080                                         ; DATA XREF: NCompress::NPpmd::CDecoder::QueryInterface(_GUID const &,void * *):loc_C91o
UNDEF:00001084                 extrn _IID_ICompressSetInStream:near
UNDEF:00001084                                         ; DATA XREF: NCompress::NPpmd::CDecoder::QueryInterface(_GUID const &,void * *):loc_C5Do
UNDEF:00001088                 extrn _IID_ICompressSetDecoderProperties2:near
UNDEF:00001088                                         ; DATA XREF: NCompress::NPpmd::CDecoder::QueryInterface(_GUID const &,void * *):loc_C26o
UNDEF:0000108C ; const IID IID_IUnknown
UNDEF:0000108C                 extrn _IID_IUnknown:near
UNDEF:0000108C                                         ; DATA XREF: NCompress::NPpmd::CDecoder::QueryInterface(_GUID const &,void * *)+23o
UNDEF:00001090 ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:00001090                 extrn _memcmp:near      ; CODE XREF: IsEqualGUID(x,x)+Dp
UNDEF:00001094 ; void __cdecl operator delete(void *)
UNDEF:00001094                 extrn ??3@YAXPAX@Z:near ; CODE XREF: NCompress::NPpmd::CDecoder::`scalar deleting destructor'(uint)+22p
UNDEF:00001098 ; __stdcall Ppmd7_Alloc(x, x, x)
UNDEF:00001098                 extrn _Ppmd7_Alloc@12:near
UNDEF:00001098                                         ; CODE XREF: NCompress::NPpmd::CDecoder::SetDecoderProperties2(uchar const *,uint)+94p
UNDEF:0000109C ; bool __thiscall CByteInBufWrap::Alloc(CByteInBufWrap *__hidden this, unsigned int)
UNDEF:0000109C                 extrn ?Alloc@CByteInBufWrap@@QAE_NI@Z:near
UNDEF:0000109C                                         ; CODE XREF: NCompress::NPpmd::CDecoder::SetDecoderProperties2(uchar const *,uint)+71p
UNDEF:000010A0 ; __stdcall Ppmd7_DecodeSymbol(x, x)
UNDEF:000010A0                 extrn _Ppmd7_DecodeSymbol@8:near
UNDEF:000010A0                                         ; CODE XREF: NCompress::NPpmd::CDecoder::CodeSpec(uchar *,uint)+131p
UNDEF:000010A4 ; __stdcall Ppmd7_Init(x, x)
UNDEF:000010A4                 extrn _Ppmd7_Init@8:near
UNDEF:000010A4                                         ; CODE XREF: NCompress::NPpmd::CDecoder::CodeSpec(uchar *,uint)+A8p
UNDEF:000010A8 ; __stdcall Ppmd7z_RangeDec_Init(x)
UNDEF:000010A8                 extrn _Ppmd7z_RangeDec_Init@4:near
UNDEF:000010A8                                         ; CODE XREF: NCompress::NPpmd::CDecoder::CodeSpec(uchar *,uint)+69p
UNDEF:000010AC ; __int32 __stdcall WriteStream(struct ISequentialOutStream *, const void *, unsigned int)
UNDEF:000010AC                 extrn ?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z:near
UNDEF:000010AC                                         ; CODE XREF: NCompress::NPpmd::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+BEp
UNDEF:000010B0 ; __stdcall MidAlloc(x)
UNDEF:000010B0                 extrn _MidAlloc@4:near  ; CODE XREF: NCompress::NPpmd::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+25p
UNDEF:000010B4 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:000010B4                 extrn @_RTC_CheckStackVars@8:near
UNDEF:000010B4                                         ; CODE XREF: NCompress::NPpmd::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+19Ep
UNDEF:000010B4
UNDEF:000010B4