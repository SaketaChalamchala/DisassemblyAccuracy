.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : 9DC2A558B1E67426B4F7E01D6B7A5362
.text:00000000 ; Input CRC32 : C5AFCC0C
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\ZipAddCommon.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; __int32 __stdcall NArchive::NZip::CLzmaEncoder::SetCoderProperties(NArchive::NZip::CLzmaEncoder *this, const unsigned __int32 *, const struct tagPROPVARIANT *, unsigned int)
.text:00000000                 public ?SetCoderProperties@CLzmaEncoder@NZip@NArchive@@UAGJPBKPBUtagPROPVARIANT@@I@Z
.text:00000000 ?SetCoderProperties@CLzmaEncoder@NZip@NArchive@@UAGJPBKPBUtagPROPVARIANT@@I@Z proc near
.text:00000000                                         ; DATA XREF: .rdata:0000321Co
.text:00000000
.text:00000000 var_40          = dword ptr -40h
.text:00000000 var_3C          = dword ptr -3Ch
.text:00000000 var_38          = dword ptr -38h
.text:00000000 var_34          = dword ptr -34h
.text:00000000 var_30          = dword ptr -30h
.text:00000000 var_2C          = dword ptr -2Ch
.text:00000000 var_28          = dword ptr -28h
.text:00000000 var_24          = dword ptr -24h
.text:00000000 var_20          = dword ptr -20h
.text:00000000 var_1C          = dword ptr -1Ch
.text:00000000 var_18          = dword ptr -18h
.text:00000000 var_14          = dword ptr -14h
.text:00000000 var_C           = byte ptr -0Ch
.text:00000000 var_4           = dword ptr -4
.text:00000000 this            = dword ptr  8
.text:00000000 arg_4           = dword ptr  0Ch
.text:00000000 arg_8           = dword ptr  10h
.text:00000000 arg_C           = dword ptr  14h
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 sub     esp, 40h
.text:00000006                 push    esi
.text:00000007                 push    edi
.text:00000008                 lea     edi, [ebp+var_40]
.text:0000000B                 mov     ecx, 10h
.text:00000010                 mov     eax, 0CCCCCCCCh
.text:00000015                 rep stosd
.text:00000017                 mov     ecx, [ebp+this]
.text:0000001A                 add     ecx, 0Ch
.text:0000001D                 call    ??7?$CMyComPtr@UICompressCoder@@@@QBE_NXZ ; CMyComPtr<ICompressCoder>::operator!(void)
.text:00000022                 movzx   eax, al
.text:00000025                 test    eax, eax
.text:00000027                 jz      short loc_71
.text:00000029                 push    20h ; ' '       ; unsigned int
.text:0000002B                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000030                 add     esp, 4
.text:00000033                 mov     [ebp+var_20], eax
.text:00000036                 cmp     [ebp+var_20], 0
.text:0000003A                 jz      short loc_49
.text:0000003C                 mov     ecx, [ebp+var_20] ; this
.text:0000003F                 call    ??0CEncoder@NLzma@NCompress@@QAE@XZ ; NCompress::NLzma::CEncoder::CEncoder(void)
.text:00000044                 mov     [ebp+var_3C], eax
.text:00000047                 jmp     short loc_50
.text:00000049 ; ---------------------------------------------------------------------------
.text:00000049
.text:00000049 loc_49:                                 ; CODE XREF: NArchive::NZip::CLzmaEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+3Aj
.text:00000049                 mov     [ebp+var_3C], 0
.text:00000050
.text:00000050 loc_50:                                 ; CODE XREF: NArchive::NZip::CLzmaEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+47j
.text:00000050                 mov     ecx, [ebp+var_3C]
.text:00000053                 mov     [ebp+var_1C], ecx
.text:00000056                 mov     edx, [ebp+this]
.text:00000059                 mov     eax, [ebp+var_1C]
.text:0000005C                 mov     [edx+8], eax
.text:0000005F                 mov     ecx, [ebp+this]
.text:00000062                 mov     edx, [ecx+8]
.text:00000065                 push    edx
.text:00000066                 mov     ecx, [ebp+this]
.text:00000069                 add     ecx, 0Ch
.text:0000006C                 call    ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z ; CMyComPtr<ICompressCoder>::operator=(ICompressCoder *)
.text:00000071
.text:00000071 loc_71:                                 ; CODE XREF: NArchive::NZip::CLzmaEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+27j
.text:00000071                 push    14h             ; unsigned int
.text:00000073                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000078                 add     esp, 4
.text:0000007B                 mov     [ebp+var_28], eax
.text:0000007E                 cmp     [ebp+var_28], 0
.text:00000082                 jz      short loc_91
.text:00000084                 mov     ecx, [ebp+var_28]
.text:00000087                 call    ??0CBufPtrSeqOutStream@@QAE@XZ ; CBufPtrSeqOutStream::CBufPtrSeqOutStream(void)
.text:0000008C                 mov     [ebp+var_40], eax
.text:0000008F                 jmp     short loc_98
.text:00000091 ; ---------------------------------------------------------------------------
.text:00000091
.text:00000091 loc_91:                                 ; CODE XREF: NArchive::NZip::CLzmaEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+82j
.text:00000091                 mov     [ebp+var_40], 0
.text:00000098
.text:00000098 loc_98:                                 ; CODE XREF: NArchive::NZip::CLzmaEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+8Fj
.text:00000098                 mov     eax, [ebp+var_40]
.text:0000009B                 mov     [ebp+var_24], eax
.text:0000009E                 mov     ecx, [ebp+var_24]
.text:000000A1                 mov     [ebp+var_4], ecx
.text:000000A4                 mov     edx, [ebp+var_4]
.text:000000A7                 push    edx
.text:000000A8                 lea     ecx, [ebp+var_C]
.text:000000AB                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(ISequentialOutStream *)
.text:000000B0                 push    5               ; unsigned int
.text:000000B2                 mov     eax, [ebp+this]
.text:000000B5                 add     eax, 14h
.text:000000B8                 push    eax             ; unsigned __int8 *
.text:000000B9                 mov     ecx, [ebp+var_4] ; this
.text:000000BC                 call    ?Init@CBufPtrSeqOutStream@@QAEXPAEI@Z ; CBufPtrSeqOutStream::Init(uchar *,uint)
.text:000000C1                 mov     esi, esp
.text:000000C3                 mov     ecx, [ebp+arg_C]
.text:000000C6                 push    ecx
.text:000000C7                 mov     edx, [ebp+arg_8]
.text:000000CA                 push    edx
.text:000000CB                 mov     eax, [ebp+arg_4]
.text:000000CE                 push    eax
.text:000000CF                 mov     ecx, [ebp+this]
.text:000000D2                 mov     edx, [ecx+8]
.text:000000D5                 mov     eax, [ebp+this]
.text:000000D8                 mov     ecx, [eax+8]
.text:000000DB                 add     ecx, 4
.text:000000DE                 mov     edx, [edx+4]
.text:000000E1                 push    ecx
.text:000000E2                 mov     eax, [edx+0Ch]
.text:000000E5                 call    eax
.text:000000E7                 cmp     esi, esp
.text:000000E9                 call    __RTC_CheckEsp
.text:000000EE                 mov     [ebp+var_14], eax
.text:000000F1                 cmp     [ebp+var_14], 0
.text:000000F5                 jz      short loc_10D
.text:000000F7                 mov     ecx, [ebp+var_14]
.text:000000FA                 mov     [ebp+var_2C], ecx
.text:000000FD                 lea     ecx, [ebp+var_C]
.text:00000100                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00000105                 mov     eax, [ebp+var_2C]
.text:00000108                 jmp     loc_1A2
.text:0000010D ; ---------------------------------------------------------------------------
.text:0000010D
.text:0000010D loc_10D:                                ; CODE XREF: NArchive::NZip::CLzmaEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+F5j
.text:0000010D                 lea     ecx, [ebp+var_C]
.text:00000110                 call    ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *(void)
.text:00000115                 mov     esi, esp
.text:00000117                 push    eax
.text:00000118                 mov     edx, [ebp+this]
.text:0000011B                 mov     eax, [edx+8]
.text:0000011E                 mov     ecx, [ebp+this]
.text:00000121                 mov     edx, [ecx+8]
.text:00000124                 add     edx, 8
.text:00000127                 mov     eax, [eax+8]
.text:0000012A                 push    edx
.text:0000012B                 mov     ecx, [eax+0Ch]
.text:0000012E                 call    ecx
.text:00000130                 cmp     esi, esp
.text:00000132                 call    __RTC_CheckEsp
.text:00000137                 mov     [ebp+var_18], eax
.text:0000013A                 cmp     [ebp+var_18], 0
.text:0000013E                 jz      short loc_153
.text:00000140                 mov     edx, [ebp+var_18]
.text:00000143                 mov     [ebp+var_30], edx
.text:00000146                 lea     ecx, [ebp+var_C]
.text:00000149                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:0000014E                 mov     eax, [ebp+var_30]
.text:00000151                 jmp     short loc_1A2
.text:00000153 ; ---------------------------------------------------------------------------
.text:00000153
.text:00000153 loc_153:                                ; CODE XREF: NArchive::NZip::CLzmaEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+13Ej
.text:00000153                 mov     ecx, [ebp+var_4] ; this
.text:00000156                 call    ?GetPos@CBufPtrSeqOutStream@@QBEIXZ ; CBufPtrSeqOutStream::GetPos(void)
.text:0000015B                 cmp     eax, 5
.text:0000015E                 jz      short loc_174
.text:00000160                 mov     [ebp+var_34], 80004005h
.text:00000167                 lea     ecx, [ebp+var_C]
.text:0000016A                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:0000016F                 mov     eax, [ebp+var_34]
.text:00000172                 jmp     short loc_1A2
.text:00000174 ; ---------------------------------------------------------------------------
.text:00000174
.text:00000174 loc_174:                                ; CODE XREF: NArchive::NZip::CLzmaEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+15Ej
.text:00000174                 mov     eax, [ebp+this]
.text:00000177                 mov     byte ptr [eax+10h], 0Fh
.text:0000017B                 mov     ecx, [ebp+this]
.text:0000017E                 mov     byte ptr [ecx+11h], 5
.text:00000182                 mov     edx, [ebp+this]
.text:00000185                 mov     byte ptr [edx+12h], 5
.text:00000189                 mov     eax, [ebp+this]
.text:0000018C                 mov     byte ptr [eax+13h], 0
.text:00000190                 mov     [ebp+var_38], 0
.text:00000197                 lea     ecx, [ebp+var_C]
.text:0000019A                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:0000019F                 mov     eax, [ebp+var_38]
.text:000001A2
.text:000001A2 loc_1A2:                                ; CODE XREF: NArchive::NZip::CLzmaEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+108j
.text:000001A2                                         ; NArchive::NZip::CLzmaEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+151j ...
.text:000001A2                 push    edx
.text:000001A3                 mov     ecx, ebp
.text:000001A5                 push    eax
.text:000001A6                 lea     edx, $LN13
.text:000001AC                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000001B1                 pop     eax
.text:000001B2                 pop     edx
.text:000001B3                 pop     edi
.text:000001B4                 pop     esi
.text:000001B5                 add     esp, 40h
.text:000001B8                 cmp     ebp, esp
.text:000001BA                 call    __RTC_CheckEsp
.text:000001BF                 mov     esp, ebp
.text:000001C1                 pop     ebp
.text:000001C2                 retn    10h
.text:000001C2 ?SetCoderProperties@CLzmaEncoder@NZip@NArchive@@UAGJPBKPBUtagPROPVARIANT@@I@Z endp
.text:000001C2
.text:000001C2 ; ---------------------------------------------------------------------------
.text:000001C5                 align 4
.text:000001C8 $LN13           dd 1                    ; DATA XREF: NArchive::NZip::CLzmaEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+1A6o
.text:000001CC                 dd offset $LN12
.text:000001D0 $LN12           dd 0FFFFFFF4h, 4        ; DATA XREF: .text:000001CCo
.text:000001D8                 dd offset $LN11         ; "outStream"
.text:000001DC $LN11           db 'outStream',0        ; DATA XREF: .text:000001D8o
.text:000001E6                 align 10h
.text:000001F0
.text:000001F0 ; =============== S U B R O U T I N E =======================================
.text:000001F0
.text:000001F0 ; Attributes: bp-based frame
.text:000001F0
.text:000001F0 ; __int32 __stdcall NArchive::NZip::CLzmaEncoder::Code(NArchive::NZip::CLzmaEncoder *this, struct ISequentialInStream *, struct ISequentialOutStream *, const unsigned __int64 *, const unsigned __int64 *, struct ICompressProgressInfo *)
.text:000001F0                 public ?Code@CLzmaEncoder@NZip@NArchive@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text:000001F0 ?Code@CLzmaEncoder@NZip@NArchive@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z proc near
.text:000001F0                                         ; DATA XREF: .rdata:00003230o
.text:000001F0
.text:000001F0 var_8           = dword ptr -8
.text:000001F0 var_4           = dword ptr -4
.text:000001F0 this            = dword ptr  8
.text:000001F0 arg_4           = dword ptr  0Ch
.text:000001F0 arg_8           = dword ptr  10h
.text:000001F0 arg_C           = dword ptr  14h
.text:000001F0 arg_10          = dword ptr  18h
.text:000001F0 arg_14          = dword ptr  1Ch
.text:000001F0
.text:000001F0                 push    ebp
.text:000001F1                 mov     ebp, esp
.text:000001F3                 sub     esp, 8
.text:000001F6                 push    esi
.text:000001F7                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000001FE                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000205                 push    9               ; unsigned int
.text:00000207                 mov     eax, [ebp+this]
.text:0000020A                 add     eax, 14h
.text:0000020D                 push    eax             ; void *
.text:0000020E                 mov     ecx, [ebp+arg_8]
.text:00000211                 push    ecx             ; struct ISequentialOutStream *
.text:00000212                 call    ?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z ; WriteStream(ISequentialOutStream *,void const *,uint)
.text:00000217                 mov     [ebp+var_4], eax
.text:0000021A                 cmp     [ebp+var_4], 0
.text:0000021E                 jz      short loc_225
.text:00000220                 mov     eax, [ebp+var_4]
.text:00000223                 jmp     short loc_25E
.text:00000225 ; ---------------------------------------------------------------------------
.text:00000225
.text:00000225 loc_225:                                ; CODE XREF: NArchive::NZip::CLzmaEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+2Ej
.text:00000225                 mov     ecx, [ebp+this]
.text:00000228                 add     ecx, 10h
.text:0000022B                 call    ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator->(void)
.text:00000230                 mov     [ebp+var_8], eax
.text:00000233                 mov     esi, esp
.text:00000235                 mov     edx, [ebp+arg_14]
.text:00000238                 push    edx
.text:00000239                 mov     eax, [ebp+arg_10]
.text:0000023C                 push    eax
.text:0000023D                 mov     ecx, [ebp+arg_C]
.text:00000240                 push    ecx
.text:00000241                 mov     edx, [ebp+arg_8]
.text:00000244                 push    edx
.text:00000245                 mov     eax, [ebp+arg_4]
.text:00000248                 push    eax
.text:00000249                 mov     ecx, [ebp+var_8]
.text:0000024C                 push    ecx
.text:0000024D                 mov     edx, [ebp+var_8]
.text:00000250                 mov     eax, [edx]
.text:00000252                 mov     ecx, [eax+0Ch]
.text:00000255                 call    ecx
.text:00000257                 cmp     esi, esp
.text:00000259                 call    __RTC_CheckEsp
.text:0000025E
.text:0000025E loc_25E:                                ; CODE XREF: NArchive::NZip::CLzmaEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+33j
.text:0000025E                 pop     esi
.text:0000025F                 add     esp, 8
.text:00000262                 cmp     ebp, esp
.text:00000264                 call    __RTC_CheckEsp
.text:00000269                 mov     esp, ebp
.text:0000026B                 pop     ebp
.text:0000026C                 retn    18h
.text:0000026C ?Code@CLzmaEncoder@NZip@NArchive@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z endp
.text:0000026C
.text:0000026C ; ---------------------------------------------------------------------------
.text:0000026F                 align 10h
.text:00000270
.text:00000270 ; =============== S U B R O U T I N E =======================================
.text:00000270
.text:00000270 ; Attributes: bp-based frame
.text:00000270
.text:00000270 ; _DWORD __thiscall NArchive::NZip::CAddCommon::CAddCommon(NArchive::NZip::CAddCommon *this, const struct NArchive::NZip::CCompressionMethodMode *)
.text:00000270                 public ??0CAddCommon@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z
.text:00000270 ??0CAddCommon@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z proc near
.text:00000270
.text:00000270 var_10          = dword ptr -10h
.text:00000270 var_C           = dword ptr -0Ch
.text:00000270 var_4           = dword ptr -4
.text:00000270 arg_0           = dword ptr  8
.text:00000270
.text:00000270                 push    ebp
.text:00000271                 mov     ebp, esp
.text:00000273                 push    0FFFFFFFFh
.text:00000275                 push    offset __ehhandler$??0CAddCommon@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z
.text:0000027A                 mov     eax, large fs:0
.text:00000280                 push    eax
.text:00000281                 push    ecx
.text:00000282                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000289                 mov     eax, dword ptr ds:___security_cookie
.text:0000028E                 xor     eax, ebp
.text:00000290                 push    eax
.text:00000291                 lea     eax, [ebp+var_C]
.text:00000294                 mov     large fs:0, eax
.text:0000029A                 mov     [ebp+var_10], ecx
.text:0000029D                 mov     eax, [ebp+arg_0]
.text:000002A0                 push    eax             ; struct NArchive::NZip::CCompressionMethodMode *
.text:000002A1                 mov     ecx, [ebp+var_10] ; this
.text:000002A4                 call    ??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z ; NArchive::NZip::CCompressionMethodMode::CCompressionMethodMode(NArchive::NZip::CCompressionMethodMode const &)
.text:000002A9                 mov     [ebp+var_4], 0
.text:000002B0                 mov     ecx, [ebp+var_10]
.text:000002B3                 mov     dword ptr [ecx+48h], 0
.text:000002BA                 mov     ecx, [ebp+var_10]
.text:000002BD                 add     ecx, 4Ch ; 'L'
.text:000002C0                 call    ??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>(void)
.text:000002C5                 mov     byte ptr [ebp+var_4], 1
.text:000002C9                 mov     ecx, [ebp+var_10]
.text:000002CC                 add     ecx, 50h ; 'P'
.text:000002CF                 call    ??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>(void)
.text:000002D4                 mov     byte ptr [ebp+var_4], 2
.text:000002D8                 mov     edx, [ebp+var_10]
.text:000002DB                 mov     dword ptr [edx+58h], 0
.text:000002E2                 mov     ecx, [ebp+var_10]
.text:000002E5                 add     ecx, 5Ch ; '\'
.text:000002E8                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(void)
.text:000002ED                 mov     eax, [ebp+var_10]
.text:000002F0                 mov     dword ptr [eax+68h], 0
.text:000002F7                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000002FE                 mov     eax, [ebp+var_10]
.text:00000301                 mov     ecx, [ebp+var_C]
.text:00000304                 mov     large fs:0, ecx
.text:0000030B                 pop     ecx
.text:0000030C                 add     esp, 10h
.text:0000030F                 cmp     ebp, esp
.text:00000311                 call    __RTC_CheckEsp
.text:00000316                 mov     esp, ebp
.text:00000318                 pop     ebp
.text:00000319                 retn    4
.text:00000319 ??0CAddCommon@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z endp
.text:00000319
.text:00000319 ; ---------------------------------------------------------------------------
.text:0000031C                 align 10h
.text:00000320
.text:00000320 ; =============== S U B R O U T I N E =======================================
.text:00000320
.text:00000320 ; Attributes: bp-based frame
.text:00000320
.text:00000320 ; _DWORD __thiscall NArchive::NZip::CAddCommon::~CAddCommon(NArchive::NZip::CAddCommon *__hidden this)
.text:00000320                 public ??1CAddCommon@NZip@NArchive@@QAE@XZ
.text:00000320 ??1CAddCommon@NZip@NArchive@@QAE@XZ proc near
.text:00000320
.text:00000320 var_10          = dword ptr -10h
.text:00000320 var_C           = dword ptr -0Ch
.text:00000320 var_4           = dword ptr -4
.text:00000320
.text:00000320                 push    ebp
.text:00000321                 mov     ebp, esp
.text:00000323                 push    0FFFFFFFFh
.text:00000325                 push    offset __ehhandler$??1CAddCommon@NZip@NArchive@@QAE@XZ
.text:0000032A                 mov     eax, large fs:0
.text:00000330                 push    eax
.text:00000331                 push    ecx
.text:00000332                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000339                 mov     eax, dword ptr ds:___security_cookie
.text:0000033E                 xor     eax, ebp
.text:00000340                 push    eax
.text:00000341                 lea     eax, [ebp+var_C]
.text:00000344                 mov     large fs:0, eax
.text:0000034A                 mov     [ebp+var_10], ecx
.text:0000034D                 mov     [ebp+var_4], 2
.text:00000354                 mov     eax, [ebp+var_10]
.text:00000357                 mov     ecx, [eax+68h]
.text:0000035A                 push    ecx
.text:0000035B                 call    _MidFree@4      ; MidFree(x)
.text:00000360                 mov     ecx, [ebp+var_10]
.text:00000363                 add     ecx, 5Ch ; '\'
.text:00000366                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:0000036B                 mov     byte ptr [ebp+var_4], 1
.text:0000036F                 mov     ecx, [ebp+var_10]
.text:00000372                 add     ecx, 50h ; 'P'
.text:00000375                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:0000037A                 mov     byte ptr [ebp+var_4], 0
.text:0000037E                 mov     ecx, [ebp+var_10]
.text:00000381                 add     ecx, 4Ch ; 'L'
.text:00000384                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00000389                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000390                 mov     ecx, [ebp+var_10] ; this
.text:00000393                 call    ??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:00000398                 mov     ecx, [ebp+var_C]
.text:0000039B                 mov     large fs:0, ecx
.text:000003A2                 pop     ecx
.text:000003A3                 add     esp, 10h
.text:000003A6                 cmp     ebp, esp
.text:000003A8                 call    __RTC_CheckEsp
.text:000003AD                 mov     esp, ebp
.text:000003AF                 pop     ebp
.text:000003B0                 retn
.text:000003B0 ??1CAddCommon@NZip@NArchive@@QAE@XZ endp
.text:000003B0
.text:000003B0 ; ---------------------------------------------------------------------------
.text:000003B1                 align 10h
.text:000003C0
.text:000003C0 ; =============== S U B R O U T I N E =======================================
.text:000003C0
.text:000003C0 ; Attributes: bp-based frame
.text:000003C0
.text:000003C0 ; __int32 __thiscall NArchive::NZip::CAddCommon::CalcStreamCRC(NArchive::NZip::CAddCommon *this, struct ISequentialInStream *, unsigned int *)
.text:000003C0                 public ?CalcStreamCRC@CAddCommon@NZip@NArchive@@AAEJPAUISequentialInStream@@AAI@Z
.text:000003C0 ?CalcStreamCRC@CAddCommon@NZip@NArchive@@AAEJPAUISequentialInStream@@AAI@Z proc near
.text:000003C0                                         ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+5E5p
.text:000003C0
.text:000003C0 var_18          = dword ptr -18h
.text:000003C0 var_14          = dword ptr -14h
.text:000003C0 var_10          = dword ptr -10h
.text:000003C0 var_C           = dword ptr -0Ch
.text:000003C0 var_8           = dword ptr -8
.text:000003C0 var_4           = dword ptr -4
.text:000003C0 arg_0           = dword ptr  8
.text:000003C0 arg_4           = dword ptr  0Ch
.text:000003C0
.text:000003C0                 push    ebp
.text:000003C1                 mov     ebp, esp
.text:000003C3                 sub     esp, 18h
.text:000003C6                 push    esi
.text:000003C7                 mov     eax, 0CCCCCCCCh
.text:000003CC                 mov     [ebp+var_18], eax
.text:000003CF                 mov     [ebp+var_14], eax
.text:000003D2                 mov     [ebp+var_10], eax
.text:000003D5                 mov     [ebp+var_C], eax
.text:000003D8                 mov     [ebp+var_8], eax
.text:000003DB                 mov     [ebp+var_4], eax
.text:000003DE                 mov     [ebp+var_4], ecx
.text:000003E1                 mov     eax, [ebp+var_4]
.text:000003E4                 cmp     dword ptr [eax+68h], 0
.text:000003E8                 jnz     short loc_40A
.text:000003EA                 push    10000h
.text:000003EF                 call    _MidAlloc@4     ; MidAlloc(x)
.text:000003F4                 mov     ecx, [ebp+var_4]
.text:000003F7                 mov     [ecx+68h], eax
.text:000003FA                 mov     edx, [ebp+var_4]
.text:000003FD                 cmp     dword ptr [edx+68h], 0
.text:00000401                 jnz     short loc_40A
.text:00000403                 mov     eax, 8007000Eh
.text:00000408                 jmp     short loc_472
.text:0000040A ; ---------------------------------------------------------------------------
.text:0000040A
.text:0000040A loc_40A:                                ; CODE XREF: NArchive::NZip::CAddCommon::CalcStreamCRC(ISequentialInStream *,uint &)+28j
.text:0000040A                                         ; NArchive::NZip::CAddCommon::CalcStreamCRC(ISequentialInStream *,uint &)+41j
.text:0000040A                 mov     [ebp+var_8], 0FFFFFFFFh
.text:00000411
.text:00000411 loc_411:                                ; CODE XREF: NArchive::NZip::CAddCommon::CalcStreamCRC(ISequentialInStream *,uint &)+B0j
.text:00000411                 mov     esi, esp
.text:00000413                 lea     eax, [ebp+var_10]
.text:00000416                 push    eax
.text:00000417                 push    10000h
.text:0000041C                 mov     ecx, [ebp+var_4]
.text:0000041F                 mov     edx, [ecx+68h]
.text:00000422                 push    edx
.text:00000423                 mov     eax, [ebp+arg_0]
.text:00000426                 mov     ecx, [eax]
.text:00000428                 mov     edx, [ebp+arg_0]
.text:0000042B                 push    edx
.text:0000042C                 mov     eax, [ecx+0Ch]
.text:0000042F                 call    eax
.text:00000431                 cmp     esi, esp
.text:00000433                 call    __RTC_CheckEsp
.text:00000438                 mov     [ebp+var_18], eax
.text:0000043B                 cmp     [ebp+var_18], 0
.text:0000043F                 jz      short loc_446
.text:00000441                 mov     eax, [ebp+var_18]
.text:00000444                 jmp     short loc_472
.text:00000446 ; ---------------------------------------------------------------------------
.text:00000446
.text:00000446 loc_446:                                ; CODE XREF: NArchive::NZip::CAddCommon::CalcStreamCRC(ISequentialInStream *,uint &)+7Fj
.text:00000446                 cmp     [ebp+var_10], 0
.text:0000044A                 jnz     short loc_45B
.text:0000044C                 mov     ecx, [ebp+var_8]
.text:0000044F                 xor     ecx, 0FFFFFFFFh
.text:00000452                 mov     edx, [ebp+arg_4]
.text:00000455                 mov     [edx], ecx
.text:00000457                 xor     eax, eax
.text:00000459                 jmp     short loc_472
.text:0000045B ; ---------------------------------------------------------------------------
.text:0000045B
.text:0000045B loc_45B:                                ; CODE XREF: NArchive::NZip::CAddCommon::CalcStreamCRC(ISequentialInStream *,uint &)+8Aj
.text:0000045B                 mov     eax, [ebp+var_10]
.text:0000045E                 push    eax
.text:0000045F                 mov     ecx, [ebp+var_4]
.text:00000462                 mov     edx, [ecx+68h]
.text:00000465                 mov     ecx, [ebp+var_8]
.text:00000468                 call    @CrcUpdate@12   ; CrcUpdate(x,x,x)
.text:0000046D                 mov     [ebp+var_8], eax
.text:00000470                 jmp     short loc_411
.text:00000472 ; ---------------------------------------------------------------------------
.text:00000472
.text:00000472 loc_472:                                ; CODE XREF: NArchive::NZip::CAddCommon::CalcStreamCRC(ISequentialInStream *,uint &)+48j
.text:00000472                                         ; NArchive::NZip::CAddCommon::CalcStreamCRC(ISequentialInStream *,uint &)+84j ...
.text:00000472                 push    edx
.text:00000473                 mov     ecx, ebp
.text:00000475                 push    eax
.text:00000476                 lea     edx, $LN11_0
.text:0000047C                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000481                 pop     eax
.text:00000482                 pop     edx
.text:00000483                 pop     esi
.text:00000484                 add     esp, 18h
.text:00000487                 cmp     ebp, esp
.text:00000489                 call    __RTC_CheckEsp
.text:0000048E                 mov     esp, ebp
.text:00000490                 pop     ebp
.text:00000491                 retn    8
.text:00000491 ?CalcStreamCRC@CAddCommon@NZip@NArchive@@AAEJPAUISequentialInStream@@AAI@Z endp
.text:00000491
.text:00000491 ; ---------------------------------------------------------------------------
.text:00000494 $LN11_0         dd 1                    ; DATA XREF: NArchive::NZip::CAddCommon::CalcStreamCRC(ISequentialInStream *,uint &)+B6o
.text:00000498                 dd offset $LN10
.text:0000049C $LN10           dd 0FFFFFFF0h, 4        ; DATA XREF: .text:00000498o
.text:000004A4                 dd offset $LN9          ; "processed"
.text:000004A8 $LN9            db 'processed',0        ; DATA XREF: .text:000004A4o
.text:000004B2                 align 10h
.text:000004C0
.text:000004C0 ; =============== S U B R O U T I N E =======================================
.text:000004C0
.text:000004C0 ; Attributes: bp-based frame
.text:000004C0
.text:000004C0 ; __int32 __thiscall NArchive::NZip::CAddCommon::Compress(NArchive::NZip::CAddCommon *this, struct ISequentialInStream *, struct IOutStream *, unsigned int, struct ICompressProgressInfo *, struct NArchive::NZip::CCompressingResult *)
.text:000004C0                 public ?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z
.text:000004C0 ?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z proc near
.text:000004C0
.text:000004C0 var_1A4         = dword ptr -1A4h
.text:000004C0 var_1A0         = dword ptr -1A0h
.text:000004C0 var_19C         = dword ptr -19Ch
.text:000004C0 var_198         = dword ptr -198h
.text:000004C0 var_194         = dword ptr -194h
.text:000004C0 var_190         = dword ptr -190h
.text:000004C0 var_18C         = dword ptr -18Ch
.text:000004C0 var_188         = dword ptr -188h
.text:000004C0 var_184         = byte ptr -184h
.text:000004C0 var_180         = dword ptr -180h
.text:000004C0 var_17C         = dword ptr -17Ch
.text:000004C0 var_178         = dword ptr -178h
.text:000004C0 var_174         = dword ptr -174h
.text:000004C0 var_170         = byte ptr -170h
.text:000004C0 var_16C         = dword ptr -16Ch
.text:000004C0 var_168         = dword ptr -168h
.text:000004C0 var_164         = dword ptr -164h
.text:000004C0 var_160         = dword ptr -160h
.text:000004C0 var_15C         = dword ptr -15Ch
.text:000004C0 var_158         = dword ptr -158h
.text:000004C0 var_154         = dword ptr -154h
.text:000004C0 var_150         = dword ptr -150h
.text:000004C0 var_14C         = dword ptr -14Ch
.text:000004C0 var_148         = dword ptr -148h
.text:000004C0 var_144         = dword ptr -144h
.text:000004C0 var_140         = dword ptr -140h
.text:000004C0 var_13C         = dword ptr -13Ch
.text:000004C0 var_138         = dword ptr -138h
.text:000004C0 var_134         = dword ptr -134h
.text:000004C0 var_130         = dword ptr -130h
.text:000004C0 var_12C         = dword ptr -12Ch
.text:000004C0 var_128         = dword ptr -128h
.text:000004C0 var_124         = dword ptr -124h
.text:000004C0 var_120         = dword ptr -120h
.text:000004C0 var_11C         = dword ptr -11Ch
.text:000004C0 var_118         = dword ptr -118h
.text:000004C0 var_114         = dword ptr -114h
.text:000004C0 var_110         = dword ptr -110h
.text:000004C0 var_10C         = dword ptr -10Ch
.text:000004C0 var_108         = dword ptr -108h
.text:000004C0 var_104         = dword ptr -104h
.text:000004C0 var_100         = dword ptr -100h
.text:000004C0 var_FC          = dword ptr -0FCh
.text:000004C0 var_F8          = dword ptr -0F8h
.text:000004C0 var_F4          = dword ptr -0F4h
.text:000004C0 var_F0          = dword ptr -0F0h
.text:000004C0 var_EC          = dword ptr -0ECh
.text:000004C0 var_E8          = dword ptr -0E8h
.text:000004C0 var_E4          = dword ptr -0E4h
.text:000004C0 var_E0          = dword ptr -0E0h
.text:000004C0 var_DC          = dword ptr -0DCh
.text:000004C0 var_D8          = dword ptr -0D8h
.text:000004C0 var_D4          = dword ptr -0D4h
.text:000004C0 var_D0          = dword ptr -0D0h
.text:000004C0 var_CC          = dword ptr -0CCh
.text:000004C0 var_C8          = dword ptr -0C8h
.text:000004C0 var_C4          = dword ptr -0C4h
.text:000004C0 var_C0          = dword ptr -0C0h
.text:000004C0 var_B8          = byte ptr -0B8h
.text:000004C0 var_B0          = dword ptr -0B0h
.text:000004C0 var_A8          = byte ptr -0A8h
.text:000004C0 var_A0          = dword ptr -0A0h
.text:000004C0 var_9C          = dword ptr -9Ch
.text:000004C0 var_98          = dword ptr -98h
.text:000004C0 var_94          = dword ptr -94h
.text:000004C0 var_90          = dword ptr -90h
.text:000004C0 var_8C          = dword ptr -8Ch
.text:000004C0 var_84          = byte ptr -84h
.text:000004C0 var_7C          = dword ptr -7Ch
.text:000004C0 var_78          = dword ptr -78h
.text:000004C0 var_74          = dword ptr -74h
.text:000004C0 var_70          = dword ptr -70h
.text:000004C0 var_6C          = dword ptr -6Ch
.text:000004C0 var_68          = dword ptr -68h
.text:000004C0 var_64          = dword ptr -64h
.text:000004C0 var_60          = dword ptr -60h
.text:000004C0 var_5C          = dword ptr -5Ch
.text:000004C0 var_58          = dword ptr -58h
.text:000004C0 var_54          = dword ptr -54h
.text:000004C0 var_50          = dword ptr -50h
.text:000004C0 var_48          = dword ptr -48h
.text:000004C0 var_3E          = byte ptr -3Eh
.text:000004C0 var_3D          = byte ptr -3Dh
.text:000004C0 var_38          = dword ptr -38h
.text:000004C0 var_30          = dword ptr -30h
.text:000004C0 var_28          = byte ptr -28h
.text:000004C0 var_1C          = byte ptr -1Ch
.text:000004C0 var_14          = dword ptr -14h
.text:000004C0 var_10          = dword ptr -10h
.text:000004C0 var_C           = dword ptr -0Ch
.text:000004C0 var_4           = dword ptr -4
.text:000004C0 arg_0           = dword ptr  8
.text:000004C0 arg_4           = dword ptr  0Ch
.text:000004C0 arg_C           = dword ptr  14h
.text:000004C0 arg_10          = dword ptr  18h
.text:000004C0
.text:000004C0                 push    ebp
.text:000004C1                 mov     ebp, esp
.text:000004C3                 push    0FFFFFFFFh
.text:000004C5                 push    offset __ehhandler$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z
.text:000004CA                 mov     eax, large fs:0
.text:000004D0                 push    eax
.text:000004D1                 sub     esp, 198h
.text:000004D7                 push    esi
.text:000004D8                 push    edi
.text:000004D9                 push    ecx
.text:000004DA                 lea     edi, [ebp+var_1A4]
.text:000004E0                 mov     ecx, 66h ; 'f'
.text:000004E5                 mov     eax, 0CCCCCCCCh
.text:000004EA                 rep stosd
.text:000004EC                 pop     ecx
.text:000004ED                 mov     eax, dword ptr ds:___security_cookie
.text:000004F2                 xor     eax, ebp
.text:000004F4                 push    eax
.text:000004F5                 lea     eax, [ebp+var_C]
.text:000004F8                 mov     large fs:0, eax
.text:000004FE                 mov     [ebp+var_10], ecx
.text:00000501                 cmp     [ebp+arg_0], 0
.text:00000505                 jnz     short loc_511
.text:00000507                 mov     eax, 80070057h
.text:0000050C                 jmp     loc_140F
.text:00000511 ; ---------------------------------------------------------------------------
.text:00000511
.text:00000511 loc_511:                                ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+45j
.text:00000511                 mov     [ebp+var_14], 0
.text:00000518                 lea     ecx, [ebp+var_1C]
.text:0000051B                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(void)
.text:00000520                 mov     [ebp+var_4], 0
.text:00000527                 lea     ecx, [ebp+var_28]
.text:0000052A                 call    ??0?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::CMyComPtr<IInStream>(void)
.text:0000052F                 mov     byte ptr [ebp+var_4], 1
.text:00000533                 lea     ecx, [ebp+var_28]
.text:00000536                 call    ??I?$CMyComPtr@UIInStream@@@@QAEPAPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator&(void)
.text:0000053B                 mov     esi, esp
.text:0000053D                 push    eax
.text:0000053E                 push    offset _IID_IInStream
.text:00000543                 mov     eax, [ebp+arg_0]
.text:00000546                 mov     ecx, [eax]
.text:00000548                 mov     edx, [ebp+arg_0]
.text:0000054B                 push    edx
.text:0000054C                 mov     eax, [ecx]
.text:0000054E                 call    eax
.text:00000550                 cmp     esi, esp
.text:00000552                 call    __RTC_CheckEsp
.text:00000557                 lea     ecx, [ebp+var_28]
.text:0000055A                 call    ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *(void)
.text:0000055F                 test    eax, eax
.text:00000561                 jz      short loc_5DD
.text:00000563                 push    20h ; ' '       ; unsigned int
.text:00000565                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000056A                 add     esp, 4
.text:0000056D                 mov     [ebp+var_D4], eax
.text:00000573                 mov     byte ptr [ebp+var_4], 2
.text:00000577                 cmp     [ebp+var_D4], 0
.text:0000057E                 jz      short loc_593
.text:00000580                 mov     ecx, [ebp+var_D4]
.text:00000586                 call    ??0CInStreamWithCRC@@QAE@XZ ; CInStreamWithCRC::CInStreamWithCRC(void)
.text:0000058B                 mov     [ebp+var_158], eax
.text:00000591                 jmp     short loc_59D
.text:00000593 ; ---------------------------------------------------------------------------
.text:00000593
.text:00000593 loc_593:                                ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+BEj
.text:00000593                 mov     [ebp+var_158], 0
.text:0000059D
.text:0000059D loc_59D:                                ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+D1j
.text:0000059D                 mov     ecx, [ebp+var_158]
.text:000005A3                 mov     [ebp+var_D0], ecx
.text:000005A9                 mov     byte ptr [ebp+var_4], 1
.text:000005AD                 mov     edx, [ebp+var_D0]
.text:000005B3                 mov     [ebp+var_14], edx
.text:000005B6                 mov     eax, [ebp+var_14]
.text:000005B9                 push    eax
.text:000005BA                 lea     ecx, [ebp+var_1C]
.text:000005BD                 call    ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)
.text:000005C2                 lea     ecx, [ebp+var_28]
.text:000005C5                 call    ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *(void)
.text:000005CA                 push    eax             ; struct IInStream *
.text:000005CB                 mov     ecx, [ebp+var_14] ; this
.text:000005CE                 call    ?SetStream@CInStreamWithCRC@@QAEXPAUIInStream@@@Z ; CInStreamWithCRC::SetStream(IInStream *)
.text:000005D3                 mov     ecx, [ebp+var_14] ; this
.text:000005D6                 call    ?Init@CInStreamWithCRC@@QAEXXZ ; CInStreamWithCRC::Init(void)
.text:000005DB                 jmp     short loc_60D
.text:000005DD ; ---------------------------------------------------------------------------
.text:000005DD
.text:000005DD loc_5DD:                                ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+A1j
.text:000005DD                 mov     [ebp+var_D8], 80004001h
.text:000005E7                 mov     byte ptr [ebp+var_4], 0
.text:000005EB                 lea     ecx, [ebp+var_28]
.text:000005EE                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:000005F3                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000005FA                 lea     ecx, [ebp+var_1C]
.text:000005FD                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00000602                 mov     eax, [ebp+var_D8]
.text:00000608                 jmp     loc_140F
.text:0000060D ; ---------------------------------------------------------------------------
.text:0000060D
.text:0000060D loc_60D:                                ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+11Bj
.text:0000060D                 mov     byte ptr [ebp+var_4], 0
.text:00000611                 lea     ecx, [ebp+var_28]
.text:00000614                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:00000619                 mov     ecx, [ebp+var_10]
.text:0000061C                 add     ecx, 18h
.text:0000061F                 call    ?Size@?$CRecordVector@E@@QBEIXZ ; CRecordVector<uchar>::Size(void)
.text:00000624                 mov     [ebp+var_30], eax
.text:00000627                 cmp     [ebp+var_30], 1
.text:0000062B                 jbe     short loc_63A
.text:0000062D                 cmp     [ebp+var_14], 0
.text:00000631                 jnz     short loc_63A
.text:00000633                 mov     [ebp+var_30], 1
.text:0000063A
.text:0000063A loc_63A:                                ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+16Bj
.text:0000063A                                         ; NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+171j
.text:0000063A                 mov     [ebp+var_38], 0
.text:00000641                 mov     [ebp+var_3D], 0
.text:00000645                 mov     [ebp+var_3E], 0
.text:00000649                 lea     ecx, [ebp+var_48] ; this
.text:0000064C                 call    ??0C_OutStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_OutStream_Releaser::C_OutStream_Releaser(void)
.text:00000651                 mov     byte ptr [ebp+var_4], 3
.text:00000655                 mov     ecx, [ebp+arg_10]
.text:00000658                 mov     byte ptr [ecx+16h], 0Ah
.text:0000065C                 mov     edx, [ebp+arg_10]
.text:0000065F                 mov     byte ptr [edx+17h], 0
.text:00000663                 mov     [ebp+var_50], 0
.text:0000066A                 jmp     short loc_675
.text:0000066C ; ---------------------------------------------------------------------------
.text:0000066C
.text:0000066C loc_66C:                                ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &):loc_13D3j
.text:0000066C                 mov     eax, [ebp+var_50]
.text:0000066F                 add     eax, 1
.text:00000672                 mov     [ebp+var_50], eax
.text:00000675
.text:00000675 loc_675:                                ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+1AAj
.text:00000675                 mov     ecx, [ebp+var_50]
.text:00000678                 cmp     ecx, [ebp+var_30]
.text:0000067B                 jnb     loc_13D8
.text:00000681                 mov     edx, [ebp+arg_10]
.text:00000684                 mov     byte ptr [edx+16h], 0Ah
.text:00000688                 cmp     [ebp+var_14], 0
.text:0000068C                 jz      short loc_6E5
.text:0000068E                 mov     esi, esp
.text:00000690                 push    0
.text:00000692                 push    0
.text:00000694                 push    0
.text:00000696                 push    0
.text:00000698                 mov     eax, [ebp+var_14]
.text:0000069B                 mov     ecx, [eax]
.text:0000069D                 mov     edx, [ebp+var_14]
.text:000006A0                 push    edx
.text:000006A1                 mov     eax, [ecx+10h]
.text:000006A4                 call    eax
.text:000006A6                 cmp     esi, esp
.text:000006A8                 call    __RTC_CheckEsp
.text:000006AD                 mov     [ebp+var_54], eax
.text:000006B0                 cmp     [ebp+var_54], 0
.text:000006B4                 jz      short loc_6E5
.text:000006B6                 mov     ecx, [ebp+var_54]
.text:000006B9                 mov     [ebp+var_DC], ecx
.text:000006BF                 mov     byte ptr [ebp+var_4], 0
.text:000006C3                 lea     ecx, [ebp+var_48] ; this
.text:000006C6                 call    ??1C_OutStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_OutStream_Releaser::~C_OutStream_Releaser(void)
.text:000006CB                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000006D2                 lea     ecx, [ebp+var_1C]
.text:000006D5                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:000006DA                 mov     eax, [ebp+var_DC]
.text:000006E0                 jmp     loc_140F
.text:000006E5 ; ---------------------------------------------------------------------------
.text:000006E5
.text:000006E5 loc_6E5:                                ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+1CCj
.text:000006E5                                         ; NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+1F4j
.text:000006E5                 mov     esi, esp
.text:000006E7                 push    0
.text:000006E9                 push    0
.text:000006EB                 mov     edx, [ebp+arg_4]
.text:000006EE                 mov     eax, [edx]
.text:000006F0                 mov     ecx, [ebp+arg_4]
.text:000006F3                 push    ecx
.text:000006F4                 mov     edx, [eax+14h]
.text:000006F7                 call    edx
.text:000006F9                 cmp     esi, esp
.text:000006FB                 call    __RTC_CheckEsp
.text:00000700                 mov     [ebp+var_58], eax
.text:00000703                 cmp     [ebp+var_58], 0
.text:00000707                 jz      short loc_738
.text:00000709                 mov     eax, [ebp+var_58]
.text:0000070C                 mov     [ebp+var_E0], eax
.text:00000712                 mov     byte ptr [ebp+var_4], 0
.text:00000716                 lea     ecx, [ebp+var_48] ; this
.text:00000719                 call    ??1C_OutStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_OutStream_Releaser::~C_OutStream_Releaser(void)
.text:0000071E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000725                 lea     ecx, [ebp+var_1C]
.text:00000728                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:0000072D                 mov     eax, [ebp+var_E0]
.text:00000733                 jmp     loc_140F
.text:00000738 ; ---------------------------------------------------------------------------
.text:00000738
.text:00000738 loc_738:                                ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+247j
.text:00000738                 mov     esi, esp
.text:0000073A                 push    0
.text:0000073C                 push    0
.text:0000073E                 push    0
.text:00000740                 push    0
.text:00000742                 mov     ecx, [ebp+arg_4]
.text:00000745                 mov     edx, [ecx]
.text:00000747                 mov     eax, [ebp+arg_4]
.text:0000074A                 push    eax
.text:0000074B                 mov     ecx, [edx+10h]
.text:0000074E                 call    ecx
.text:00000750                 cmp     esi, esp
.text:00000752                 call    __RTC_CheckEsp
.text:00000757                 mov     [ebp+var_5C], eax
.text:0000075A                 cmp     [ebp+var_5C], 0
.text:0000075E                 jz      short loc_78F
.text:00000760                 mov     edx, [ebp+var_5C]
.text:00000763                 mov     [ebp+var_E4], edx
.text:00000769                 mov     byte ptr [ebp+var_4], 0
.text:0000076D                 lea     ecx, [ebp+var_48] ; this
.text:00000770                 call    ??1C_OutStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_OutStream_Releaser::~C_OutStream_Releaser(void)
.text:00000775                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000077C                 lea     ecx, [ebp+var_1C]
.text:0000077F                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00000784                 mov     eax, [ebp+var_E4]
.text:0000078A                 jmp     loc_140F
.text:0000078F ; ---------------------------------------------------------------------------
.text:0000078F
.text:0000078F loc_78F:                                ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+29Ej
.text:0000078F                 mov     eax, [ebp+var_10]
.text:00000792                 movzx   ecx, byte ptr [eax+24h]
.text:00000796                 test    ecx, ecx
.text:00000798                 jz      loc_C51
.text:0000079E                 mov     edx, [ebp+arg_10]
.text:000007A1                 mov     byte ptr [edx+16h], 14h
.text:000007A5                 mov     ecx, [ebp+var_10]
.text:000007A8                 add     ecx, 5Ch ; '\'
.text:000007AB                 call    ??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ ; CMyComPtr<ISequentialOutStream>::operator!(void)
.text:000007B0                 movzx   eax, al
.text:000007B3                 test    eax, eax
.text:000007B5                 jz      loc_858
.text:000007BB                 push    98h ; 'ÿ'       ; unsigned int
.text:000007C0                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000007C5                 add     esp, 4
.text:000007C8                 mov     [ebp+var_EC], eax
.text:000007CE                 mov     byte ptr [ebp+var_4], 4
.text:000007D2                 cmp     [ebp+var_EC], 0
.text:000007D9                 jz      short loc_7F0
.text:000007DB                 push    1               ; bool
.text:000007DD                 mov     ecx, [ebp+var_EC] ; this
.text:000007E3                 call    ??0CFilterCoder@@QAE@_N@Z ; CFilterCoder::CFilterCoder(bool)
.text:000007E8                 mov     [ebp+var_15C], eax
.text:000007EE                 jmp     short loc_7FA
.text:000007F0 ; ---------------------------------------------------------------------------
.text:000007F0
.text:000007F0 loc_7F0:                                ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+319j
.text:000007F0                 mov     [ebp+var_15C], 0
.text:000007FA
.text:000007FA loc_7FA:                                ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+32Ej
.text:000007FA                 mov     ecx, [ebp+var_15C]
.text:00000800                 mov     [ebp+var_E8], ecx
.text:00000806                 mov     byte ptr [ebp+var_4], 3
.text:0000080A                 mov     edx, [ebp+var_10]
.text:0000080D                 mov     eax, [ebp+var_E8]
.text:00000813                 mov     [edx+58h], eax
.text:00000816                 mov     ecx, [ebp+var_10]
.text:00000819                 mov     edx, [ecx+58h]
.text:0000081C                 mov     [ebp+var_160], edx
.text:00000822                 cmp     [ebp+var_160], 0
.text:00000829                 jz      short loc_83C
.text:0000082B                 mov     eax, [ebp+var_160]
.text:00000831                 add     eax, 18h
.text:00000834                 mov     [ebp+var_164], eax
.text:0000083A                 jmp     short loc_846
.text:0000083C ; ---------------------------------------------------------------------------
.text:0000083C
.text:0000083C loc_83C:                                ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+369j
.text:0000083C                 mov     [ebp+var_164], 0
.text:00000846
.text:00000846 loc_846:                                ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+37Aj
.text:00000846                 mov     ecx, [ebp+var_164]
.text:0000084C                 push    ecx
.text:0000084D                 mov     ecx, [ebp+var_10]
.text:00000850                 add     ecx, 5Ch ; '\'
.text:00000853                 call    ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=(ISequentialOutStream *)
.text:00000858
.text:00000858 loc_858:                                ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+2F5j
.text:00000858                 mov     edx, [ebp+var_10]
.text:0000085B                 movzx   eax, byte ptr [edx+15h]
.text:0000085F                 test    eax, eax
.text:00000861                 jz      loc_9CB
.text:00000867                 mov     ecx, [ebp+arg_10]
.text:0000086A                 mov     byte ptr [ecx+16h], 33h ; '3'
.text:0000086E                 mov     edx, [ebp+var_10]
.text:00000871                 mov     ecx, [edx+58h]
.text:00000874                 add     ecx, 94h ; 'ö'
.text:0000087A                 call    ??7?$CMyComPtr@UICompressFilter@@@@QBE_NXZ ; CMyComPtr<ICompressFilter>::operator!(void)
.text:0000087F                 movzx   eax, al
.text:00000882                 test    eax, eax
.text:00000884                 jz      loc_97F
.text:0000088A                 push    228h            ; unsigned int
.text:0000088F                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000894                 add     esp, 4
.text:00000897                 mov     [ebp+var_F4], eax
.text:0000089D                 mov     byte ptr [ebp+var_4], 5
.text:000008A1                 cmp     [ebp+var_F4], 0
.text:000008A8                 jz      short loc_8BD
.text:000008AA                 mov     ecx, [ebp+var_F4] ; this
.text:000008B0                 call    ??0CEncoder@NWzAes@NCrypto@@QAE@XZ ; NCrypto::NWzAes::CEncoder::CEncoder(void)
.text:000008B5                 mov     [ebp+var_168], eax
.text:000008BB                 jmp     short loc_8C7
.text:000008BD ; ---------------------------------------------------------------------------
.text:000008BD
.text:000008BD loc_8BD:                                ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+3E8j
.text:000008BD                 mov     [ebp+var_168], 0
.text:000008C7
.text:000008C7 loc_8C7:                                ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+3FBj
.text:000008C7                 mov     ecx, [ebp+var_168]
.text:000008CD                 mov     [ebp+var_F0], ecx
.text:000008D3                 mov     byte ptr [ebp+var_4], 3
.text:000008D7                 mov     edx, [ebp+var_10]
.text:000008DA                 mov     eax, [ebp+var_F0]
.text:000008E0                 mov     [edx+64h], eax
.text:000008E3                 mov     ecx, [ebp+var_F0]
.text:000008E9                 push    ecx
.text:000008EA                 mov     edx, [ebp+var_10]
.text:000008ED                 mov     ecx, [edx+58h]
.text:000008F0                 add     ecx, 94h ; 'ö'
.text:000008F6                 call    ??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@PAU1@@Z ; CMyComPtr<ICompressFilter>::operator=(ICompressFilter *)
.text:000008FB                 mov     eax, [ebp+var_10]
.text:000008FE                 movzx   ecx, byte ptr [eax+16h]
.text:00000902                 push    ecx             ; unsigned int
.text:00000903                 mov     edx, [ebp+var_10]
.text:00000906                 mov     ecx, [edx+64h]  ; this
.text:00000909                 call    ?SetKeyMode@CBaseCoder@NWzAes@NCrypto@@QAE_NI@Z ; NCrypto::NWzAes::CBaseCoder::SetKeyMode(uint)
.text:0000090E                 mov     ecx, [ebp+var_10]
.text:00000911                 add     ecx, 28h ; '('  ; this
.text:00000914                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:00000919                 mov     esi, esp
.text:0000091B                 push    eax
.text:0000091C                 mov     ecx, [ebp+var_10]
.text:0000091F                 add     ecx, 28h ; '('
.text:00000922                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:00000927                 push    eax
.text:00000928                 mov     eax, [ebp+var_10]
.text:0000092B                 mov     ecx, [eax+64h]
.text:0000092E                 mov     edx, [ebp+var_10]
.text:00000931                 mov     eax, [edx+64h]
.text:00000934                 add     eax, 4
.text:00000937                 mov     ecx, [ecx+4]
.text:0000093A                 push    eax
.text:0000093B                 mov     edx, [ecx+0Ch]
.text:0000093E                 call    edx
.text:00000940                 cmp     esi, esp
.text:00000942                 call    __RTC_CheckEsp
.text:00000947                 mov     [ebp+var_60], eax
.text:0000094A                 cmp     [ebp+var_60], 0
.text:0000094E                 jz      short loc_97F
.text:00000950                 mov     eax, [ebp+var_60]
.text:00000953                 mov     [ebp+var_F8], eax
.text:00000959                 mov     byte ptr [ebp+var_4], 0
.text:0000095D                 lea     ecx, [ebp+var_48] ; this
.text:00000960                 call    ??1C_OutStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_OutStream_Releaser::~C_OutStream_Releaser(void)
.text:00000965                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000096C                 lea     ecx, [ebp+var_1C]
.text:0000096F                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00000974                 mov     eax, [ebp+var_F8]
.text:0000097A                 jmp     loc_140F
.text:0000097F ; ---------------------------------------------------------------------------
.text:0000097F
.text:0000097F loc_97F:                                ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+3C4j
.text:0000097F                                         ; NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+48Ej
.text:0000097F                 mov     ecx, [ebp+arg_4]
.text:00000982                 push    ecx             ; struct ISequentialOutStream *
.text:00000983                 mov     edx, [ebp+var_10]
.text:00000986                 mov     ecx, [edx+64h]  ; this
.text:00000989                 call    ?WriteHeader@CEncoder@NWzAes@NCrypto@@QAEJPAUISequentialOutStream@@@Z ; NCrypto::NWzAes::CEncoder::WriteHeader(ISequentialOutStream *)
.text:0000098E                 mov     [ebp+var_64], eax
.text:00000991                 cmp     [ebp+var_64], 0
.text:00000995                 jz      short loc_9C6
.text:00000997                 mov     eax, [ebp+var_64]
.text:0000099A                 mov     [ebp+var_FC], eax
.text:000009A0                 mov     byte ptr [ebp+var_4], 0
.text:000009A4                 lea     ecx, [ebp+var_48] ; this
.text:000009A7                 call    ??1C_OutStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_OutStream_Releaser::~C_OutStream_Releaser(void)
.text:000009AC                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000009B3                 lea     ecx, [ebp+var_1C]
.text:000009B6                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:000009BB                 mov     eax, [ebp+var_FC]
.text:000009C1                 jmp     loc_140F
.text:000009C6 ; ---------------------------------------------------------------------------
.text:000009C6
.text:000009C6 loc_9C6:                                ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+4D5j
.text:000009C6                 jmp     loc_B92
.text:000009CB ; ---------------------------------------------------------------------------
.text:000009CB
.text:000009CB loc_9CB:                                ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+3A1j
.text:000009CB                 mov     ecx, [ebp+var_10]
.text:000009CE                 mov     ecx, [ecx+58h]
.text:000009D1                 add     ecx, 94h ; 'ö'
.text:000009D7                 call    ??7?$CMyComPtr@UICompressFilter@@@@QBE_NXZ ; CMyComPtr<ICompressFilter>::operator!(void)
.text:000009DC                 movzx   edx, al
.text:000009DF                 test    edx, edx
.text:000009E1                 jz      loc_A8E
.text:000009E7                 push    24h ; '$'       ; unsigned int
.text:000009E9                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000009EE                 add     esp, 4
.text:000009F1                 mov     [ebp+var_104], eax
.text:000009F7                 mov     byte ptr [ebp+var_4], 6
.text:000009FB                 cmp     [ebp+var_104], 0
.text:00000A02                 jz      short loc_A17
.text:00000A04                 mov     ecx, [ebp+var_104] ; this
.text:00000A0A                 call    ??0CEncoder@NZip@NCrypto@@QAE@XZ ; NCrypto::NZip::CEncoder::CEncoder(void)
.text:00000A0F                 mov     [ebp+var_16C], eax
.text:00000A15                 jmp     short loc_A21
.text:00000A17 ; ---------------------------------------------------------------------------
.text:00000A17
.text:00000A17 loc_A17:                                ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+542j
.text:00000A17                 mov     [ebp+var_16C], 0
.text:00000A21
.text:00000A21 loc_A21:                                ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+555j
.text:00000A21                 mov     eax, [ebp+var_16C]
.text:00000A27                 mov     [ebp+var_100], eax
.text:00000A2D                 mov     byte ptr [ebp+var_4], 3
.text:00000A31                 mov     ecx, [ebp+var_10]
.text:00000A34                 mov     edx, [ebp+var_100]
.text:00000A3A                 mov     [ecx+60h], edx
.text:00000A3D                 mov     eax, [ebp+var_100]
.text:00000A43                 push    eax
.text:00000A44                 mov     ecx, [ebp+var_10]
.text:00000A47                 mov     ecx, [ecx+58h]
.text:00000A4A                 add     ecx, 94h ; 'ö'
.text:00000A50                 call    ??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@PAU1@@Z ; CMyComPtr<ICompressFilter>::operator=(ICompressFilter *)
.text:00000A55                 mov     ecx, [ebp+var_10]
.text:00000A58                 add     ecx, 28h ; '('  ; this
.text:00000A5B                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:00000A60                 mov     esi, esp
.text:00000A62                 push    eax
.text:00000A63                 mov     ecx, [ebp+var_10]
.text:00000A66                 add     ecx, 28h ; '('
.text:00000A69                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:00000A6E                 push    eax
.text:00000A6F                 mov     edx, [ebp+var_10]
.text:00000A72                 mov     eax, [edx+60h]
.text:00000A75                 mov     ecx, [ebp+var_10]
.text:00000A78                 mov     edx, [ecx+60h]
.text:00000A7B                 add     edx, 4
.text:00000A7E                 mov     eax, [eax+4]
.text:00000A81                 push    edx
.text:00000A82                 mov     ecx, [eax+0Ch]
.text:00000A85                 call    ecx
.text:00000A87                 cmp     esi, esp
.text:00000A89                 call    __RTC_CheckEsp
.text:00000A8E
.text:00000A8E loc_A8E:                                ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+521j
.text:00000A8E                 movzx   edx, [ebp+var_3D]
.text:00000A92                 test    edx, edx
.text:00000A94                 jnz     loc_B3D
.text:00000A9A                 lea     eax, [ebp+var_38]
.text:00000A9D                 push    eax             ; unsigned int *
.text:00000A9E                 mov     ecx, [ebp+arg_0]
.text:00000AA1                 push    ecx             ; struct ISequentialInStream *
.text:00000AA2                 mov     ecx, [ebp+var_10] ; this
.text:00000AA5                 call    ?CalcStreamCRC@CAddCommon@NZip@NArchive@@AAEJPAUISequentialInStream@@AAI@Z ; NArchive::NZip::CAddCommon::CalcStreamCRC(ISequentialInStream *,uint &)
.text:00000AAA                 mov     [ebp+var_6C], eax
.text:00000AAD                 cmp     [ebp+var_6C], 0
.text:00000AB1                 jz      short loc_AE2
.text:00000AB3                 mov     edx, [ebp+var_6C]
.text:00000AB6                 mov     [ebp+var_108], edx
.text:00000ABC                 mov     byte ptr [ebp+var_4], 0
.text:00000AC0                 lea     ecx, [ebp+var_48] ; this
.text:00000AC3                 call    ??1C_OutStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_OutStream_Releaser::~C_OutStream_Releaser(void)
.text:00000AC8                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000ACF                 lea     ecx, [ebp+var_1C]
.text:00000AD2                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00000AD7                 mov     eax, [ebp+var_108]
.text:00000ADD                 jmp     loc_140F
.text:00000AE2 ; ---------------------------------------------------------------------------
.text:00000AE2
.text:00000AE2 loc_AE2:                                ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+5F1j
.text:00000AE2                 mov     [ebp+var_3D], 1
.text:00000AE6                 mov     esi, esp
.text:00000AE8                 push    0
.text:00000AEA                 push    0
.text:00000AEC                 push    0
.text:00000AEE                 push    0
.text:00000AF0                 mov     eax, [ebp+var_14]
.text:00000AF3                 mov     ecx, [eax]
.text:00000AF5                 mov     edx, [ebp+var_14]
.text:00000AF8                 push    edx
.text:00000AF9                 mov     eax, [ecx+10h]
.text:00000AFC                 call    eax
.text:00000AFE                 cmp     esi, esp
.text:00000B00                 call    __RTC_CheckEsp
.text:00000B05                 mov     [ebp+var_70], eax
.text:00000B08                 cmp     [ebp+var_70], 0
.text:00000B0C                 jz      short loc_B3D
.text:00000B0E                 mov     ecx, [ebp+var_70]
.text:00000B11                 mov     [ebp+var_10C], ecx
.text:00000B17                 mov     byte ptr [ebp+var_4], 0
.text:00000B1B                 lea     ecx, [ebp+var_48] ; this
.text:00000B1E                 call    ??1C_OutStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_OutStream_Releaser::~C_OutStream_Releaser(void)
.text:00000B23                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000B2A                 lea     ecx, [ebp+var_1C]
.text:00000B2D                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00000B32                 mov     eax, [ebp+var_10C]
.text:00000B38                 jmp     loc_140F
.text:00000B3D ; ---------------------------------------------------------------------------
.text:00000B3D
.text:00000B3D loc_B3D:                                ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+5D4j
.text:00000B3D                                         ; NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+64Cj
.text:00000B3D                 mov     edx, [ebp+var_38]
.text:00000B40                 shr     edx, 10h
.text:00000B43                 mov     [ebp+var_68], edx
.text:00000B46                 movzx   eax, word ptr [ebp+var_68]
.text:00000B4A                 push    eax             ; unsigned __int16
.text:00000B4B                 mov     ecx, [ebp+arg_4]
.text:00000B4E                 push    ecx             ; struct ISequentialOutStream *
.text:00000B4F                 mov     edx, [ebp+var_10]
.text:00000B52                 mov     ecx, [edx+60h]  ; this
.text:00000B55                 call    ?WriteHeader_Check16@CEncoder@NZip@NCrypto@@QAEJPAUISequentialOutStream@@G@Z ; NCrypto::NZip::CEncoder::WriteHeader_Check16(ISequentialOutStream *,ushort)
.text:00000B5A                 mov     [ebp+var_74], eax
.text:00000B5D                 cmp     [ebp+var_74], 0
.text:00000B61                 jz      short loc_B92
.text:00000B63                 mov     eax, [ebp+var_74]
.text:00000B66                 mov     [ebp+var_110], eax
.text:00000B6C                 mov     byte ptr [ebp+var_4], 0
.text:00000B70                 lea     ecx, [ebp+var_48] ; this
.text:00000B73                 call    ??1C_OutStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_OutStream_Releaser::~C_OutStream_Releaser(void)
.text:00000B78                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000B7F                 lea     ecx, [ebp+var_1C]
.text:00000B82                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00000B87                 mov     eax, [ebp+var_110]
.text:00000B8D                 jmp     loc_140F
.text:00000B92 ; ---------------------------------------------------------------------------
.text:00000B92
.text:00000B92 loc_B92:                                ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &):loc_9C6j
.text:00000B92                                         ; NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+6A1j
.text:00000B92                 mov     esi, esp
.text:00000B94                 mov     ecx, [ebp+arg_4]
.text:00000B97                 push    ecx
.text:00000B98                 mov     edx, [ebp+var_10]
.text:00000B9B                 mov     eax, [edx+58h]
.text:00000B9E                 mov     ecx, [ebp+var_10]
.text:00000BA1                 mov     edx, [ecx+58h]
.text:00000BA4                 add     edx, 14h
.text:00000BA7                 mov     eax, [eax+14h]
.text:00000BAA                 push    edx
.text:00000BAB                 mov     ecx, [eax+0Ch]
.text:00000BAE                 call    ecx
.text:00000BB0                 cmp     esi, esp
.text:00000BB2                 call    __RTC_CheckEsp
.text:00000BB7                 mov     [ebp+var_78], eax
.text:00000BBA                 cmp     [ebp+var_78], 0
.text:00000BBE                 jz      short loc_BEF
.text:00000BC0                 mov     edx, [ebp+var_78]
.text:00000BC3                 mov     [ebp+var_114], edx
.text:00000BC9                 mov     byte ptr [ebp+var_4], 0
.text:00000BCD                 lea     ecx, [ebp+var_48] ; this
.text:00000BD0                 call    ??1C_OutStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_OutStream_Releaser::~C_OutStream_Releaser(void)
.text:00000BD5                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000BDC                 lea     ecx, [ebp+var_1C]
.text:00000BDF                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00000BE4                 mov     eax, [ebp+var_114]
.text:00000BEA                 jmp     loc_140F
.text:00000BEF ; ---------------------------------------------------------------------------
.text:00000BEF
.text:00000BEF loc_BEF:                                ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+6FEj
.text:00000BEF                 mov     eax, [ebp+var_10]
.text:00000BF2                 mov     ecx, [eax+58h]
.text:00000BF5                 mov     edx, [ebp+var_10]
.text:00000BF8                 mov     eax, [edx+58h]
.text:00000BFB                 add     eax, 8
.text:00000BFE                 mov     ecx, [ecx+8]
.text:00000C01                 mov     esi, esp
.text:00000C03                 push    eax
.text:00000C04                 mov     edx, [ecx+0Ch]
.text:00000C07                 call    edx
.text:00000C09                 cmp     esi, esp
.text:00000C0B                 call    __RTC_CheckEsp
.text:00000C10                 mov     [ebp+var_7C], eax
.text:00000C13                 cmp     [ebp+var_7C], 0
.text:00000C17                 jz      short loc_C48
.text:00000C19                 mov     eax, [ebp+var_7C]
.text:00000C1C                 mov     [ebp+var_118], eax
.text:00000C22                 mov     byte ptr [ebp+var_4], 0
.text:00000C26                 lea     ecx, [ebp+var_48] ; this
.text:00000C29                 call    ??1C_OutStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_OutStream_Releaser::~C_OutStream_Releaser(void)
.text:00000C2E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000C35                 lea     ecx, [ebp+var_1C]
.text:00000C38                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00000C3D                 mov     eax, [ebp+var_118]
.text:00000C43                 jmp     loc_140F
.text:00000C48 ; ---------------------------------------------------------------------------
.text:00000C48
.text:00000C48 loc_C48:                                ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+757j
.text:00000C48                 mov     ecx, [ebp+var_10]
.text:00000C4B                 mov     edx, [ecx+58h]
.text:00000C4E                 mov     [ebp+var_48], edx
.text:00000C51
.text:00000C51 loc_C51:                                ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+2D8j
.text:00000C51                 mov     eax, [ebp+var_50]
.text:00000C54                 push    eax
.text:00000C55                 mov     ecx, [ebp+var_10]
.text:00000C58                 add     ecx, 18h
.text:00000C5B                 call    ??A?$CRecordVector@E@@QAEAAEI@Z ; CRecordVector<uchar>::operator[](uint)
.text:00000C60                 mov     cl, [eax]
.text:00000C62                 mov     [ebp+var_3E], cl
.text:00000C65                 mov     dl, [ebp+var_3E]
.text:00000C68                 mov     [ebp+var_170], dl
.text:00000C6E                 cmp     [ebp+var_170], 0
.text:00000C75                 jz      short loc_C7C
.text:00000C77                 jmp     loc_DD9
.text:00000C7C ; ---------------------------------------------------------------------------
.text:00000C7C
.text:00000C7C loc_C7C:                                ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+7B5j
.text:00000C7C                 mov     eax, [ebp+var_10]
.text:00000C7F                 cmp     dword ptr [eax+48h], 0
.text:00000C83                 jnz     short loc_CED
.text:00000C85                 push    28h ; '('       ; unsigned int
.text:00000C87                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000C8C                 add     esp, 4
.text:00000C8F                 mov     [ebp+var_120], eax
.text:00000C95                 mov     byte ptr [ebp+var_4], 7
.text:00000C99                 cmp     [ebp+var_120], 0
.text:00000CA0                 jz      short loc_CB5
.text:00000CA2                 mov     ecx, [ebp+var_120] ; this
.text:00000CA8                 call    ??0CCopyCoder@NCompress@@QAE@XZ ; NCompress::CCopyCoder::CCopyCoder(void)
.text:00000CAD                 mov     [ebp+var_174], eax
.text:00000CB3                 jmp     short loc_CBF
.text:00000CB5 ; ---------------------------------------------------------------------------
.text:00000CB5
.text:00000CB5 loc_CB5:                                ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+7E0j
.text:00000CB5                 mov     [ebp+var_174], 0
.text:00000CBF
.text:00000CBF loc_CBF:                                ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+7F3j
.text:00000CBF                 mov     ecx, [ebp+var_174]
.text:00000CC5                 mov     [ebp+var_11C], ecx
.text:00000CCB                 mov     byte ptr [ebp+var_4], 3
.text:00000CCF                 mov     edx, [ebp+var_10]
.text:00000CD2                 mov     eax, [ebp+var_11C]
.text:00000CD8                 mov     [edx+48h], eax
.text:00000CDB                 mov     ecx, [ebp+var_10]
.text:00000CDE                 mov     edx, [ecx+48h]
.text:00000CE1                 push    edx
.text:00000CE2                 mov     ecx, [ebp+var_10]
.text:00000CE5                 add     ecx, 4Ch ; 'L'
.text:00000CE8                 call    ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z ; CMyComPtr<ICompressCoder>::operator=(ICompressCoder *)
.text:00000CED
.text:00000CED loc_CED:                                ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+7C3j
.text:00000CED                 lea     ecx, [ebp+var_84]
.text:00000CF3                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(void)
.text:00000CF8                 mov     byte ptr [ebp+var_4], 8
.text:00000CFC                 mov     eax, [ebp+var_10]
.text:00000CFF                 movzx   ecx, byte ptr [eax+24h]
.text:00000D03                 test    ecx, ecx
.text:00000D05                 jz      short loc_D1B
.text:00000D07                 mov     edx, [ebp+var_10]
.text:00000D0A                 add     edx, 5Ch ; '\'
.text:00000D0D                 push    edx
.text:00000D0E                 lea     ecx, [ebp+var_84]
.text:00000D14                 call    ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@ABV0@@Z ; CMyComPtr<ISequentialOutStream>::operator=(CMyComPtr<ISequentialOutStream> const &)
.text:00000D19                 jmp     short loc_D2A
.text:00000D1B ; ---------------------------------------------------------------------------
.text:00000D1B
.text:00000D1B loc_D1B:                                ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+845j
.text:00000D1B                 mov     eax, [ebp+arg_4]
.text:00000D1E                 push    eax
.text:00000D1F                 lea     ecx, [ebp+var_84]
.text:00000D25                 call    ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=(ISequentialOutStream *)
.text:00000D2A
.text:00000D2A loc_D2A:                                ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+859j
.text:00000D2A                 mov     ecx, [ebp+var_10]
.text:00000D2D                 add     ecx, 4Ch ; 'L'
.text:00000D30                 call    ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator->(void)
.text:00000D35                 mov     [ebp+var_178], eax
.text:00000D3B                 mov     esi, esp
.text:00000D3D                 mov     ecx, [ebp+arg_C]
.text:00000D40                 push    ecx
.text:00000D41                 push    0
.text:00000D43                 push    0
.text:00000D45                 lea     ecx, [ebp+var_84]
.text:00000D4B                 call    ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *(void)
.text:00000D50                 push    eax
.text:00000D51                 lea     ecx, [ebp+var_1C]
.text:00000D54                 call    ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *(void)
.text:00000D59                 push    eax
.text:00000D5A                 mov     edx, [ebp+var_178]
.text:00000D60                 push    edx
.text:00000D61                 mov     eax, [ebp+var_178]
.text:00000D67                 mov     ecx, [eax]
.text:00000D69                 mov     edx, [ecx+0Ch]
.text:00000D6C                 call    edx
.text:00000D6E                 cmp     esi, esp
.text:00000D70                 call    __RTC_CheckEsp
.text:00000D75                 mov     [ebp+var_8C], eax
.text:00000D7B                 cmp     [ebp+var_8C], 0
.text:00000D82                 jz      short loc_DC5
.text:00000D84                 mov     eax, [ebp+var_8C]
.text:00000D8A                 mov     [ebp+var_124], eax
.text:00000D90                 mov     byte ptr [ebp+var_4], 3
.text:00000D94                 lea     ecx, [ebp+var_84]
.text:00000D9A                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00000D9F                 mov     byte ptr [ebp+var_4], 0
.text:00000DA3                 lea     ecx, [ebp+var_48] ; this
.text:00000DA6                 call    ??1C_OutStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_OutStream_Releaser::~C_OutStream_Releaser(void)
.text:00000DAB                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000DB2                 lea     ecx, [ebp+var_1C]
.text:00000DB5                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00000DBA                 mov     eax, [ebp+var_124]
.text:00000DC0                 jmp     loc_140F
.text:00000DC5 ; ---------------------------------------------------------------------------
.text:00000DC5
.text:00000DC5 loc_DC5:                                ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+8C2j
.text:00000DC5                 mov     byte ptr [ebp+var_4], 3
.text:00000DC9                 lea     ecx, [ebp+var_84]
.text:00000DCF                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00000DD4                 jmp     loc_11C7
.text:00000DD9 ; ---------------------------------------------------------------------------
.text:00000DD9
.text:00000DD9 loc_DD9:                                ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+7B7j
.text:00000DD9                 mov     ecx, [ebp+var_10]
.text:00000DDC                 add     ecx, 50h ; 'P'
.text:00000DDF                 call    ??7?$CMyComPtr@UICompressCoder@@@@QBE_NXZ ; CMyComPtr<ICompressCoder>::operator!(void)
.text:00000DE4                 movzx   ecx, al
.text:00000DE7                 test    ecx, ecx
.text:00000DE9                 jz      loc_10C2
.text:00000DEF                 movzx   edx, [ebp+var_3E]
.text:00000DF3                 cmp     edx, 0Eh
.text:00000DF6                 jnz     short loc_E6C
.text:00000DF8                 mov     eax, [ebp+var_10]
.text:00000DFB                 mov     byte ptr [eax+54h], 3Fh ; '?'
.text:00000DFF                 push    20h ; ' '       ; unsigned int
.text:00000E01                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000E06                 add     esp, 4
.text:00000E09                 mov     [ebp+var_12C], eax
.text:00000E0F                 mov     byte ptr [ebp+var_4], 9
.text:00000E13                 cmp     [ebp+var_12C], 0
.text:00000E1A                 jz      short loc_E2F
.text:00000E1C                 mov     ecx, [ebp+var_12C] ; this
.text:00000E22                 call    ??0CLzmaEncoder@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CLzmaEncoder::CLzmaEncoder(void)
.text:00000E27                 mov     [ebp+var_17C], eax
.text:00000E2D                 jmp     short loc_E39
.text:00000E2F ; ---------------------------------------------------------------------------
.text:00000E2F
.text:00000E2F loc_E2F:                                ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+95Aj
.text:00000E2F                 mov     [ebp+var_17C], 0
.text:00000E39
.text:00000E39 loc_E39:                                ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+96Dj
.text:00000E39                 mov     ecx, [ebp+var_17C]
.text:00000E3F                 mov     [ebp+var_128], ecx
.text:00000E45                 mov     byte ptr [ebp+var_4], 3
.text:00000E49                 mov     edx, [ebp+var_128]
.text:00000E4F                 mov     [ebp+var_90], edx
.text:00000E55                 mov     eax, [ebp+var_90]
.text:00000E5B                 push    eax
.text:00000E5C                 mov     ecx, [ebp+var_10]
.text:00000E5F                 add     ecx, 50h ; 'P'
.text:00000E62                 call    ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z ; CMyComPtr<ICompressCoder>::operator=(ICompressCoder *)
.text:00000E67                 jmp     loc_FE7
.text:00000E6C ; ---------------------------------------------------------------------------
.text:00000E6C
.text:00000E6C loc_E6C:                                ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+936j
.text:00000E6C                 movzx   ecx, [ebp+var_3E]
.text:00000E70                 cmp     ecx, 62h ; 'b'
.text:00000E73                 jnz     short loc_EEC
.text:00000E75                 mov     edx, [ebp+var_10]
.text:00000E78                 mov     byte ptr [edx+54h], 3Fh ; '?'
.text:00000E7C                 push    1D08h           ; unsigned int
.text:00000E81                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000E86                 add     esp, 4
.text:00000E89                 mov     [ebp+var_134], eax
.text:00000E8F                 mov     byte ptr [ebp+var_4], 0Ah
.text:00000E93                 cmp     [ebp+var_134], 0
.text:00000E9A                 jz      short loc_EAF
.text:00000E9C                 mov     ecx, [ebp+var_134] ; this
.text:00000EA2                 call    ??0CEncoder@NPpmdZip@NCompress@@QAE@XZ ; NCompress::NPpmdZip::CEncoder::CEncoder(void)
.text:00000EA7                 mov     [ebp+var_180], eax
.text:00000EAD                 jmp     short loc_EB9
.text:00000EAF ; ---------------------------------------------------------------------------
.text:00000EAF
.text:00000EAF loc_EAF:                                ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+9DAj
.text:00000EAF                 mov     [ebp+var_180], 0
.text:00000EB9
.text:00000EB9 loc_EB9:                                ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+9EDj
.text:00000EB9                 mov     eax, [ebp+var_180]
.text:00000EBF                 mov     [ebp+var_130], eax
.text:00000EC5                 mov     byte ptr [ebp+var_4], 3
.text:00000EC9                 mov     ecx, [ebp+var_130]
.text:00000ECF                 mov     [ebp+var_94], ecx
.text:00000ED5                 mov     edx, [ebp+var_94]
.text:00000EDB                 push    edx
.text:00000EDC                 mov     ecx, [ebp+var_10]
.text:00000EDF                 add     ecx, 50h ; 'P'
.text:00000EE2                 call    ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z ; CMyComPtr<ICompressCoder>::operator=(ICompressCoder *)
.text:00000EE7                 jmp     loc_FE7
.text:00000EEC ; ---------------------------------------------------------------------------
.text:00000EEC
.text:00000EEC loc_EEC:                                ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+9B3j
.text:00000EEC                 mov     al, [ebp+var_3E]
.text:00000EEF                 mov     [ebp+var_184], al
.text:00000EF5                 cmp     [ebp+var_184], 0Ch
.text:00000EFC                 jz      short loc_F00
.text:00000EFE                 jmp     short loc_F1D
.text:00000F00 ; ---------------------------------------------------------------------------
.text:00000F00
.text:00000F00 loc_F00:                                ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+A3Cj
.text:00000F00                 mov     [ebp+var_9C], 40202h
.text:00000F0A                 mov     [ebp+var_98], 0
.text:00000F14                 mov     ecx, [ebp+var_10]
.text:00000F17                 mov     byte ptr [ecx+54h], 2Eh ; '.'
.text:00000F1B                 jmp     short loc_F48
.text:00000F1D ; ---------------------------------------------------------------------------
.text:00000F1D
.text:00000F1D loc_F1D:                                ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+A3Ej
.text:00000F1D                 movzx   edx, [ebp+var_3E]
.text:00000F21                 cmp     edx, 9
.text:00000F24                 setz    al
.text:00000F27                 add     al, 14h
.text:00000F29                 mov     ecx, [ebp+var_10]
.text:00000F2C                 mov     [ecx+54h], al
.text:00000F2F                 movzx   eax, [ebp+var_3E]
.text:00000F33                 cdq
.text:00000F34                 add     eax, 40100h
.text:00000F39                 adc     edx, 0
.text:00000F3C                 mov     [ebp+var_9C], eax
.text:00000F42                 mov     [ebp+var_98], edx
.text:00000F48
.text:00000F48 loc_F48:                                ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+A5Bj
.text:00000F48                 mov     edx, [ebp+var_10]
.text:00000F4B                 add     edx, 50h ; 'P'
.text:00000F4E                 push    edx
.text:00000F4F                 push    1
.text:00000F51                 mov     eax, [ebp+var_98]
.text:00000F57                 push    eax
.text:00000F58                 mov     ecx, [ebp+var_9C]
.text:00000F5E                 push    ecx
.text:00000F5F                 call    ?CreateCoder@@YGJ_K_NAAV?$CMyComPtr@UICompressCoder@@@@@Z ; CreateCoder(unsigned __int64,bool,CMyComPtr<ICompressCoder> &)
.text:00000F64                 mov     [ebp+var_A0], eax
.text:00000F6A                 cmp     [ebp+var_A0], 0
.text:00000F71                 jz      short loc_FA5
.text:00000F73                 mov     edx, [ebp+var_A0]
.text:00000F79                 mov     [ebp+var_138], edx
.text:00000F7F                 mov     byte ptr [ebp+var_4], 0
.text:00000F83                 lea     ecx, [ebp+var_48] ; this
.text:00000F86                 call    ??1C_OutStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_OutStream_Releaser::~C_OutStream_Releaser(void)
.text:00000F8B                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000F92                 lea     ecx, [ebp+var_1C]
.text:00000F95                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00000F9A                 mov     eax, [ebp+var_138]
.text:00000FA0                 jmp     loc_140F
.text:00000FA5 ; ---------------------------------------------------------------------------
.text:00000FA5
.text:00000FA5 loc_FA5:                                ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+AB1j
.text:00000FA5                 mov     ecx, [ebp+var_10]
.text:00000FA8                 add     ecx, 50h ; 'P'
.text:00000FAB                 call    ??7?$CMyComPtr@UICompressCoder@@@@QBE_NXZ ; CMyComPtr<ICompressCoder>::operator!(void)
.text:00000FB0                 movzx   eax, al
.text:00000FB3                 test    eax, eax
.text:00000FB5                 jz      short loc_FE7
.text:00000FB7                 mov     [ebp+var_13C], 80004001h
.text:00000FC1                 mov     byte ptr [ebp+var_4], 0
.text:00000FC5                 lea     ecx, [ebp+var_48] ; this
.text:00000FC8                 call    ??1C_OutStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_OutStream_Releaser::~C_OutStream_Releaser(void)
.text:00000FCD                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000FD4                 lea     ecx, [ebp+var_1C]
.text:00000FD7                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00000FDC                 mov     eax, [ebp+var_13C]
.text:00000FE2                 jmp     loc_140F
.text:00000FE7 ; ---------------------------------------------------------------------------
.text:00000FE7
.text:00000FE7 loc_FE7:                                ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+9A7j
.text:00000FE7                                         ; NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+A27j ...
.text:00000FE7                 lea     ecx, [ebp+var_A8]
.text:00000FED                 call    ??0?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::CMyComPtr<ICompressSetCoderProperties>(void)
.text:00000FF2                 mov     byte ptr [ebp+var_4], 0Bh
.text:00000FF6                 lea     ecx, [ebp+var_A8]
.text:00000FFC                 call    ??I?$CMyComPtr@UICompressSetCoderProperties@@@@QAEPAPAUICompressSetCoderProperties@@XZ ; CMyComPtr<ICompressSetCoderProperties>::operator&(void)
.text:00001001                 push    eax
.text:00001002                 push    offset _IID_ICompressSetCoderProperties
.text:00001007                 mov     ecx, [ebp+var_10]
.text:0000100A                 add     ecx, 50h ; 'P'
.text:0000100D                 call    ??$QueryInterface@UICompressSetCoderProperties@@@?$CMyComPtr@UICompressCoder@@@@QBEJABU_GUID@@PAPAUICompressSetCoderProperties@@@Z ; CMyComPtr<ICompressCoder>::QueryInterface<ICompressSetCoderProperties>(_GUID const &,ICompressSetCoderProperties * *)
.text:00001012                 lea     ecx, [ebp+var_A8]
.text:00001018                 call    ??B?$CMyComPtr@UICompressSetCoderProperties@@@@QBEPAUICompressSetCoderProperties@@XZ ; CMyComPtr<ICompressSetCoderProperties>::operator ICompressSetCoderProperties *(void)
.text:0000101D                 test    eax, eax
.text:0000101F                 jz      loc_10B3
.text:00001025                 mov     ecx, [ebp+var_10]
.text:00001028                 movzx   edx, byte ptr [ecx+40h]
.text:0000102C                 test    edx, edx
.text:0000102E                 jz      short loc_103E
.text:00001030                 mov     eax, [ebp+var_10]
.text:00001033                 add     eax, 38h ; '8'
.text:00001036                 mov     [ebp+var_188], eax
.text:0000103C                 jmp     short loc_1048
.text:0000103E ; ---------------------------------------------------------------------------
.text:0000103E
.text:0000103E loc_103E:                               ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+B6Ej
.text:0000103E                 mov     [ebp+var_188], 0
.text:00001048
.text:00001048 loc_1048:                               ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+B7Cj
.text:00001048                 mov     ecx, [ebp+var_188]
.text:0000104E                 push    ecx             ; unsigned __int64 *
.text:0000104F                 lea     ecx, [ebp+var_A8]
.text:00001055                 call    ??B?$CMyComPtr@UICompressSetCoderProperties@@@@QBEPAUICompressSetCoderProperties@@XZ ; CMyComPtr<ICompressSetCoderProperties>::operator ICompressSetCoderProperties *(void)
.text:0000105A                 push    eax             ; struct ICompressSetCoderProperties *
.text:0000105B                 mov     ecx, [ebp+var_10] ; this
.text:0000105E                 call    ?SetCoderProps@CProps@@QBEJPAUICompressSetCoderProperties@@PB_K@Z ; CProps::SetCoderProps(ICompressSetCoderProperties *,unsigned __int64 const *)
.text:00001063                 mov     [ebp+var_B0], eax
.text:00001069                 cmp     [ebp+var_B0], 0
.text:00001070                 jz      short loc_10B3
.text:00001072                 mov     edx, [ebp+var_B0]
.text:00001078                 mov     [ebp+var_140], edx
.text:0000107E                 mov     byte ptr [ebp+var_4], 3
.text:00001082                 lea     ecx, [ebp+var_A8]
.text:00001088                 call    ??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::~CMyComPtr<ICompressSetCoderProperties>(void)
.text:0000108D                 mov     byte ptr [ebp+var_4], 0
.text:00001091                 lea     ecx, [ebp+var_48] ; this
.text:00001094                 call    ??1C_OutStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_OutStream_Releaser::~C_OutStream_Releaser(void)
.text:00001099                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000010A0                 lea     ecx, [ebp+var_1C]
.text:000010A3                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:000010A8                 mov     eax, [ebp+var_140]
.text:000010AE                 jmp     loc_140F
.text:000010B3 ; ---------------------------------------------------------------------------
.text:000010B3
.text:000010B3 loc_10B3:                               ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+B5Fj
.text:000010B3                                         ; NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+BB0j
.text:000010B3                 mov     byte ptr [ebp+var_4], 3
.text:000010B7                 lea     ecx, [ebp+var_A8]
.text:000010BD                 call    ??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::~CMyComPtr<ICompressSetCoderProperties>(void)
.text:000010C2
.text:000010C2 loc_10C2:                               ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+929j
.text:000010C2                 lea     ecx, [ebp+var_B8]
.text:000010C8                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(void)
.text:000010CD                 mov     byte ptr [ebp+var_4], 0Ch
.text:000010D1                 mov     eax, [ebp+var_10]
.text:000010D4                 movzx   ecx, byte ptr [eax+24h]
.text:000010D8                 test    ecx, ecx
.text:000010DA                 jz      short loc_10F0
.text:000010DC                 mov     edx, [ebp+var_10]
.text:000010DF                 add     edx, 5Ch ; '\'
.text:000010E2                 push    edx
.text:000010E3                 lea     ecx, [ebp+var_B8]
.text:000010E9                 call    ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@ABV0@@Z ; CMyComPtr<ISequentialOutStream>::operator=(CMyComPtr<ISequentialOutStream> const &)
.text:000010EE                 jmp     short loc_10FF
.text:000010F0 ; ---------------------------------------------------------------------------
.text:000010F0
.text:000010F0 loc_10F0:                               ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+C1Aj
.text:000010F0                 mov     eax, [ebp+arg_4]
.text:000010F3                 push    eax
.text:000010F4                 lea     ecx, [ebp+var_B8]
.text:000010FA                 call    ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=(ISequentialOutStream *)
.text:000010FF
.text:000010FF loc_10FF:                               ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+C2Ej
.text:000010FF                 mov     ecx, [ebp+var_10]
.text:00001102                 movzx   edx, byte ptr [ecx+54h]
.text:00001106                 mov     eax, [ebp+arg_10]
.text:00001109                 movzx   ecx, byte ptr [eax+16h]
.text:0000110D                 cmp     edx, ecx
.text:0000110F                 jle     short loc_111D
.text:00001111                 mov     edx, [ebp+arg_10]
.text:00001114                 mov     eax, [ebp+var_10]
.text:00001117                 mov     cl, [eax+54h]
.text:0000111A                 mov     [edx+16h], cl
.text:0000111D
.text:0000111D loc_111D:                               ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+C4Fj
.text:0000111D                 mov     ecx, [ebp+var_10]
.text:00001120                 add     ecx, 50h ; 'P'
.text:00001123                 call    ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator->(void)
.text:00001128                 mov     [ebp+var_18C], eax
.text:0000112E                 mov     esi, esp
.text:00001130                 mov     edx, [ebp+arg_C]
.text:00001133                 push    edx
.text:00001134                 push    0
.text:00001136                 push    0
.text:00001138                 lea     ecx, [ebp+var_B8]
.text:0000113E                 call    ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *(void)
.text:00001143                 push    eax
.text:00001144                 lea     ecx, [ebp+var_1C]
.text:00001147                 call    ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *(void)
.text:0000114C                 push    eax
.text:0000114D                 mov     eax, [ebp+var_18C]
.text:00001153                 push    eax
.text:00001154                 mov     ecx, [ebp+var_18C]
.text:0000115A                 mov     edx, [ecx]
.text:0000115C                 mov     eax, [edx+0Ch]
.text:0000115F                 call    eax
.text:00001161                 cmp     esi, esp
.text:00001163                 call    __RTC_CheckEsp
.text:00001168                 mov     [ebp+var_C0], eax
.text:0000116E                 cmp     [ebp+var_C0], 0
.text:00001175                 jz      short loc_11B8
.text:00001177                 mov     ecx, [ebp+var_C0]
.text:0000117D                 mov     [ebp+var_144], ecx
.text:00001183                 mov     byte ptr [ebp+var_4], 3
.text:00001187                 lea     ecx, [ebp+var_B8]
.text:0000118D                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00001192                 mov     byte ptr [ebp+var_4], 0
.text:00001196                 lea     ecx, [ebp+var_48] ; this
.text:00001199                 call    ??1C_OutStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_OutStream_Releaser::~C_OutStream_Releaser(void)
.text:0000119E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000011A5                 lea     ecx, [ebp+var_1C]
.text:000011A8                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:000011AD                 mov     eax, [ebp+var_144]
.text:000011B3                 jmp     loc_140F
.text:000011B8 ; ---------------------------------------------------------------------------
.text:000011B8
.text:000011B8 loc_11B8:                               ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+CB5j
.text:000011B8                 mov     byte ptr [ebp+var_4], 3
.text:000011BC                 lea     ecx, [ebp+var_B8]
.text:000011C2                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:000011C7
.text:000011C7 loc_11C7:                               ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+914j
.text:000011C7                 mov     edx, [ebp+var_10]
.text:000011CA                 movzx   eax, byte ptr [edx+24h]
.text:000011CE                 test    eax, eax
.text:000011D0                 jz      loc_1293
.text:000011D6                 mov     ecx, [ebp+var_10]
.text:000011D9                 mov     edx, [ecx+58h]
.text:000011DC                 mov     eax, [ebp+var_10]
.text:000011DF                 mov     ecx, [eax+58h]
.text:000011E2                 add     ecx, 1Ch
.text:000011E5                 mov     edx, [edx+1Ch]
.text:000011E8                 mov     esi, esp
.text:000011EA                 push    ecx
.text:000011EB                 mov     eax, [edx+0Ch]
.text:000011EE                 call    eax
.text:000011F0                 cmp     esi, esp
.text:000011F2                 call    __RTC_CheckEsp
.text:000011F7                 mov     [ebp+var_C4], eax
.text:000011FD                 cmp     [ebp+var_C4], 0
.text:00001204                 jz      short loc_1238
.text:00001206                 mov     ecx, [ebp+var_C4]
.text:0000120C                 mov     [ebp+var_148], ecx
.text:00001212                 mov     byte ptr [ebp+var_4], 0
.text:00001216                 lea     ecx, [ebp+var_48] ; this
.text:00001219                 call    ??1C_OutStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_OutStream_Releaser::~C_OutStream_Releaser(void)
.text:0000121E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001225                 lea     ecx, [ebp+var_1C]
.text:00001228                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:0000122D                 mov     eax, [ebp+var_148]
.text:00001233                 jmp     loc_140F
.text:00001238 ; ---------------------------------------------------------------------------
.text:00001238
.text:00001238 loc_1238:                               ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+D44j
.text:00001238                 mov     edx, [ebp+var_10]
.text:0000123B                 movzx   eax, byte ptr [edx+15h]
.text:0000123F                 test    eax, eax
.text:00001241                 jz      short loc_1293
.text:00001243                 mov     ecx, [ebp+arg_4]
.text:00001246                 push    ecx             ; struct ISequentialOutStream *
.text:00001247                 mov     edx, [ebp+var_10]
.text:0000124A                 mov     ecx, [edx+64h]  ; this
.text:0000124D                 call    ?WriteFooter@CEncoder@NWzAes@NCrypto@@QAEJPAUISequentialOutStream@@@Z ; NCrypto::NWzAes::CEncoder::WriteFooter(ISequentialOutStream *)
.text:00001252                 mov     [ebp+var_C8], eax
.text:00001258                 cmp     [ebp+var_C8], 0
.text:0000125F                 jz      short loc_1293
.text:00001261                 mov     eax, [ebp+var_C8]
.text:00001267                 mov     [ebp+var_14C], eax
.text:0000126D                 mov     byte ptr [ebp+var_4], 0
.text:00001271                 lea     ecx, [ebp+var_48] ; this
.text:00001274                 call    ??1C_OutStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_OutStream_Releaser::~C_OutStream_Releaser(void)
.text:00001279                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001280                 lea     ecx, [ebp+var_1C]
.text:00001283                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00001288                 mov     eax, [ebp+var_14C]
.text:0000128E                 jmp     loc_140F
.text:00001293 ; ---------------------------------------------------------------------------
.text:00001293
.text:00001293 loc_1293:                               ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+D10j
.text:00001293                                         ; NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+D81j ...
.text:00001293                 mov     ecx, [ebp+arg_10]
.text:00001296                 add     ecx, 8
.text:00001299                 mov     esi, esp
.text:0000129B                 push    ecx
.text:0000129C                 push    1
.text:0000129E                 push    0
.text:000012A0                 push    0
.text:000012A2                 mov     edx, [ebp+arg_4]
.text:000012A5                 mov     eax, [edx]
.text:000012A7                 mov     ecx, [ebp+arg_4]
.text:000012AA                 push    ecx
.text:000012AB                 mov     edx, [eax+10h]
.text:000012AE                 call    edx
.text:000012B0                 cmp     esi, esp
.text:000012B2                 call    __RTC_CheckEsp
.text:000012B7                 mov     [ebp+var_CC], eax
.text:000012BD                 cmp     [ebp+var_CC], 0
.text:000012C4                 jz      short loc_12F8
.text:000012C6                 mov     eax, [ebp+var_CC]
.text:000012CC                 mov     [ebp+var_150], eax
.text:000012D2                 mov     byte ptr [ebp+var_4], 0
.text:000012D6                 lea     ecx, [ebp+var_48] ; this
.text:000012D9                 call    ??1C_OutStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_OutStream_Releaser::~C_OutStream_Releaser(void)
.text:000012DE                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000012E5                 lea     ecx, [ebp+var_1C]
.text:000012E8                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:000012ED                 mov     eax, [ebp+var_150]
.text:000012F3                 jmp     loc_140F
.text:000012F8 ; ---------------------------------------------------------------------------
.text:000012F8
.text:000012F8 loc_12F8:                               ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+E04j
.text:000012F8                 mov     ecx, [ebp+var_14] ; this
.text:000012FB                 call    ?GetCRC@CInStreamWithCRC@@QBEIXZ ; CInStreamWithCRC::GetCRC(void)
.text:00001300                 mov     ecx, [ebp+arg_10]
.text:00001303                 mov     [ecx+10h], eax
.text:00001306                 mov     ecx, [ebp+var_14] ; this
.text:00001309                 call    ?GetSize@CInStreamWithCRC@@QBE_KXZ ; CInStreamWithCRC::GetSize(void)
.text:0000130E                 mov     ecx, [ebp+arg_10]
.text:00001311                 mov     [ecx], eax
.text:00001313                 mov     [ecx+4], edx
.text:00001316                 mov     edx, [ebp+var_10]
.text:00001319                 movzx   eax, byte ptr [edx+24h]
.text:0000131D                 test    eax, eax
.text:0000131F                 jz      short loc_1396
.text:00001321                 mov     ecx, [ebp+var_10]
.text:00001324                 movzx   edx, byte ptr [ecx+15h]
.text:00001328                 test    edx, edx
.text:0000132A                 jz      short loc_133F
.text:0000132C                 mov     eax, [ebp+var_10]
.text:0000132F                 mov     ecx, [eax+64h]  ; this
.text:00001332                 call    ?GetAddPackSize@CBaseCoder@NWzAes@NCrypto@@QBEIXZ ; NCrypto::NWzAes::CBaseCoder::GetAddPackSize(void)
.text:00001337                 mov     [ebp+var_190], eax
.text:0000133D                 jmp     short loc_1349
.text:0000133F ; ---------------------------------------------------------------------------
.text:0000133F
.text:0000133F loc_133F:                               ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+E6Aj
.text:0000133F                 mov     [ebp+var_190], 0Ch
.text:00001349
.text:00001349 loc_1349:                               ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+E7Dj
.text:00001349                 mov     ecx, [ebp+var_190]
.text:0000134F                 xor     edx, edx
.text:00001351                 mov     eax, [ebp+arg_10]
.text:00001354                 add     ecx, [eax]
.text:00001356                 adc     edx, [eax+4]
.text:00001359                 mov     eax, [ebp+arg_10]
.text:0000135C                 mov     [ebp+var_194], eax
.text:00001362                 mov     [ebp+var_19C], ecx
.text:00001368                 mov     [ebp+var_198], edx
.text:0000136E                 mov     ecx, [ebp+var_194]
.text:00001374                 mov     edx, [ecx+0Ch]
.text:00001377                 cmp     edx, [ebp+var_198]
.text:0000137D                 ja      short loc_1394
.text:0000137F                 jb      short loc_1392
.text:00001381                 mov     eax, [ebp+var_194]
.text:00001387                 mov     ecx, [eax+8]
.text:0000138A                 cmp     ecx, [ebp+var_19C]
.text:00001390                 jnb     short loc_1394
.text:00001392
.text:00001392 loc_1392:                               ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+EBFj
.text:00001392                 jmp     short loc_13D8
.text:00001394 ; ---------------------------------------------------------------------------
.text:00001394
.text:00001394 loc_1394:                               ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+EBDj
.text:00001394                                         ; NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+ED0j
.text:00001394                 jmp     short loc_13D3
.text:00001396 ; ---------------------------------------------------------------------------
.text:00001396
.text:00001396 loc_1396:                               ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+E5Fj
.text:00001396                 mov     edx, [ebp+arg_10]
.text:00001399                 mov     eax, [ebp+arg_10]
.text:0000139C                 mov     [ebp+var_1A0], edx
.text:000013A2                 mov     [ebp+var_1A4], eax
.text:000013A8                 mov     ecx, [ebp+var_1A0]
.text:000013AE                 mov     edx, [ebp+var_1A4]
.text:000013B4                 mov     eax, [ecx+0Ch]
.text:000013B7                 cmp     eax, [edx+4]
.text:000013BA                 ja      short loc_13D3
.text:000013BC                 jb      short loc_13D1
.text:000013BE                 mov     ecx, [ebp+var_1A0]
.text:000013C4                 mov     edx, [ebp+var_1A4]
.text:000013CA                 mov     eax, [ecx+8]
.text:000013CD                 cmp     eax, [edx]
.text:000013CF                 jnb     short loc_13D3
.text:000013D1
.text:000013D1 loc_13D1:                               ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+EFCj
.text:000013D1                 jmp     short loc_13D8
.text:000013D3 ; ---------------------------------------------------------------------------
.text:000013D3
.text:000013D3 loc_13D3:                               ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &):loc_1394j
.text:000013D3                                         ; NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+EFAj ...
.text:000013D3                 jmp     loc_66C
.text:000013D8 ; ---------------------------------------------------------------------------
.text:000013D8
.text:000013D8 loc_13D8:                               ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+1BBj
.text:000013D8                                         ; NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &):loc_1392j ...
.text:000013D8                 movzx   cx, [ebp+var_3E]
.text:000013DD                 mov     edx, [ebp+arg_10]
.text:000013E0                 mov     [edx+14h], cx
.text:000013E4                 mov     [ebp+var_154], 0
.text:000013EE                 mov     byte ptr [ebp+var_4], 0
.text:000013F2                 lea     ecx, [ebp+var_48] ; this
.text:000013F5                 call    ??1C_OutStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_OutStream_Releaser::~C_OutStream_Releaser(void)
.text:000013FA                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001401                 lea     ecx, [ebp+var_1C]
.text:00001404                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00001409                 mov     eax, [ebp+var_154]
.text:0000140F
.text:0000140F loc_140F:                               ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+4Cj
.text:0000140F                                         ; NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+148j ...
.text:0000140F                 push    edx
.text:00001410                 mov     ecx, ebp
.text:00001412                 push    eax
.text:00001413                 lea     edx, $LN110
.text:00001419                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000141E                 pop     eax
.text:0000141F                 pop     edx
.text:00001420                 mov     ecx, [ebp+var_C]
.text:00001423                 mov     large fs:0, ecx
.text:0000142A                 pop     ecx
.text:0000142B                 pop     edi
.text:0000142C                 pop     esi
.text:0000142D                 add     esp, 1A4h
.text:00001433                 cmp     ebp, esp
.text:00001435                 call    __RTC_CheckEsp
.text:0000143A                 mov     esp, ebp
.text:0000143C                 pop     ebp
.text:0000143D                 retn    14h
.text:0000143D ?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z endp
.text:0000143D
.text:0000143D ; ---------------------------------------------------------------------------
.text:00001440 $LN110          dd 7                    ; DATA XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+F53o
.text:00001444                 dd offset $LN109
.text:00001448 $LN109          dd 0FFFFFFE4h, 4        ; DATA XREF: .text:00001444o
.text:00001450                 dd offset $LN101        ; "inCrcStream"
.text:00001454                 dd 0FFFFFFD8h, 4
.text:0000145C                 dd offset $LN102        ; "inStream2"
.text:00001460                 dd 0FFFFFFC8h, 4
.text:00001468                 dd offset $LN103        ; "crc"
.text:0000146C                 dd 0FFFFFFB8h, 4
.text:00001474                 dd offset $LN104        ; "outStreamReleaser"
.text:00001478                 dd 0FFFFFF7Ch, 4
.text:00001480                 dd offset $LN105        ; "outStreamNew"
.text:00001484                 dd 0FFFFFF58h, 4
.text:0000148C                 dd offset $LN106        ; "setCoderProps"
.text:00001490                 dd 0FFFFFF48h, 4
.text:00001498                 dd offset $LN107        ; "outStreamNew"
.text:0000149C $LN107          db 'outStreamNew',0     ; DATA XREF: .text:00001498o
.text:000014A9 $LN106          db 'setCoderProps',0    ; DATA XREF: .text:0000148Co
.text:000014B7 $LN105          db 'outStreamNew',0     ; DATA XREF: .text:00001480o
.text:000014C4 $LN104          db 'outStreamReleaser',0 ; DATA XREF: .text:00001474o
.text:000014D6 $LN103          db 'crc',0              ; DATA XREF: .text:00001468o
.text:000014DA $LN102          db 'inStream2',0        ; DATA XREF: .text:0000145Co
.text:000014E4 $LN101          db 'inCrcStream',0      ; DATA XREF: .text:00001450o
.text:000014E4 _text           ends
.text:000014E4
.rtc$TMZ:000014F0 ; ===========================================================================
.rtc$TMZ:000014F0
.rtc$TMZ:000014F0 ; Segment type: Pure data
.rtc$TMZ:000014F0 ; Segment permissions: Read
.rtc$TMZ:000014F0 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:000014F0                 assume cs:_rtc$TMZ
.rtc$TMZ:000014F0                 ;org 14F0h
.rtc$TMZ:000014F0 ; COMDAT (pick any)
.rtc$TMZ:000014F0 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:000014F0 _rtc$TMZ        ends
.rtc$TMZ:000014F0
.rtc$IMZ:000014F4 ; ===========================================================================
.rtc$IMZ:000014F4
.rtc$IMZ:000014F4 ; Segment type: Pure data
.rtc$IMZ:000014F4 ; Segment permissions: Read
.rtc$IMZ:000014F4 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:000014F4                 assume cs:_rtc$IMZ
.rtc$IMZ:000014F4                 ;org 14F4h
.rtc$IMZ:000014F4 ; COMDAT (pick any)
.rtc$IMZ:000014F4 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:000014F4 _rtc$IMZ        ends
.rtc$IMZ:000014F4
.text:000014F8 ; ===========================================================================
.text:000014F8
.text:000014F8 ; Segment type: Pure code
.text:000014F8 ; Segment permissions: Read/Execute
.text:000014F8 _text           segment para public 'CODE' use32
.text:000014F8                 assume cs:_text
.text:000014F8                 ;org 14F8h
.text:000014F8 ; COMDAT (pick any)
.text:000014F8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000014F8
.text:000014F8 ; =============== S U B R O U T I N E =======================================
.text:000014F8
.text:000014F8 ; Attributes: bp-based frame
.text:000014F8
.text:000014F8 ; void __thiscall CBufPtrSeqOutStream::Init(CBufPtrSeqOutStream *this, unsigned __int8 *, unsigned int)
.text:000014F8                 public ?Init@CBufPtrSeqOutStream@@QAEXPAEI@Z
.text:000014F8 ?Init@CBufPtrSeqOutStream@@QAEXPAEI@Z proc near
.text:000014F8                                         ; CODE XREF: NArchive::NZip::CLzmaEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+BCp
.text:000014F8
.text:000014F8 var_4           = dword ptr -4
.text:000014F8 arg_0           = dword ptr  8
.text:000014F8 arg_4           = dword ptr  0Ch
.text:000014F8
.text:000014F8                 push    ebp
.text:000014F9                 mov     ebp, esp
.text:000014FB                 push    ecx
.text:000014FC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001503                 mov     [ebp+var_4], ecx
.text:00001506                 mov     eax, [ebp+var_4]
.text:00001509                 mov     ecx, [ebp+arg_0]
.text:0000150C                 mov     [eax+8], ecx
.text:0000150F                 mov     edx, [ebp+var_4]
.text:00001512                 mov     dword ptr [edx+10h], 0
.text:00001519                 mov     eax, [ebp+var_4]
.text:0000151C                 mov     ecx, [ebp+arg_4]
.text:0000151F                 mov     [eax+0Ch], ecx
.text:00001522                 mov     esp, ebp
.text:00001524                 pop     ebp
.text:00001525                 retn    8
.text:00001525 ?Init@CBufPtrSeqOutStream@@QAEXPAEI@Z endp
.text:00001525
.text:00001525 _text           ends
.text:00001525
.text:00001528 ; ===========================================================================
.text:00001528
.text:00001528 ; Segment type: Pure code
.text:00001528 ; Segment permissions: Read/Execute
.text:00001528 _text           segment para public 'CODE' use32
.text:00001528                 assume cs:_text
.text:00001528                 ;org 1528h
.text:00001528 ; COMDAT (pick any)
.text:00001528                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001528
.text:00001528 ; =============== S U B R O U T I N E =======================================
.text:00001528
.text:00001528 ; Attributes: bp-based frame
.text:00001528
.text:00001528 ; unsigned int __thiscall CBufPtrSeqOutStream::GetPos(CBufPtrSeqOutStream *__hidden this)
.text:00001528                 public ?GetPos@CBufPtrSeqOutStream@@QBEIXZ
.text:00001528 ?GetPos@CBufPtrSeqOutStream@@QBEIXZ proc near
.text:00001528                                         ; CODE XREF: NArchive::NZip::CLzmaEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+156p
.text:00001528
.text:00001528 var_4           = dword ptr -4
.text:00001528
.text:00001528                 push    ebp
.text:00001529                 mov     ebp, esp
.text:0000152B                 push    ecx
.text:0000152C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001533                 mov     [ebp+var_4], ecx
.text:00001536                 mov     eax, [ebp+var_4]
.text:00001539                 mov     eax, [eax+10h]
.text:0000153C                 mov     esp, ebp
.text:0000153E                 pop     ebp
.text:0000153F                 retn
.text:0000153F ?GetPos@CBufPtrSeqOutStream@@QBEIXZ endp
.text:0000153F
.text:0000153F _text           ends
.text:0000153F
.text:00001540 ; ===========================================================================
.text:00001540
.text:00001540 ; Segment type: Pure code
.text:00001540 ; Segment permissions: Read/Execute
.text:00001540 _text           segment para public 'CODE' use32
.text:00001540                 assume cs:_text
.text:00001540                 ;org 1540h
.text:00001540 ; COMDAT (pick any)
.text:00001540                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001540
.text:00001540 ; =============== S U B R O U T I N E =======================================
.text:00001540
.text:00001540 ; Attributes: bp-based frame
.text:00001540
.text:00001540 ; public: __thiscall CBufPtrSeqOutStream::CBufPtrSeqOutStream(void)
.text:00001540                 public ??0CBufPtrSeqOutStream@@QAE@XZ
.text:00001540 ??0CBufPtrSeqOutStream@@QAE@XZ proc near
.text:00001540                                         ; CODE XREF: NArchive::NZip::CLzmaEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+87p
.text:00001540
.text:00001540 var_4           = dword ptr -4
.text:00001540
.text:00001540                 push    ebp
.text:00001541                 mov     ebp, esp
.text:00001543                 push    ecx
.text:00001544                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000154B                 mov     [ebp+var_4], ecx
.text:0000154E                 mov     ecx, [ebp+var_4] ; this
.text:00001551                 call    ??0ISequentialOutStream@@QAE@XZ ; ISequentialOutStream::ISequentialOutStream(void)
.text:00001556                 mov     ecx, [ebp+var_4]
.text:00001559                 add     ecx, 4          ; this
.text:0000155C                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00001561                 mov     eax, [ebp+var_4]
.text:00001564                 mov     dword ptr [eax], offset ??_7CBufPtrSeqOutStream@@6B@ ; const CBufPtrSeqOutStream::`vftable'
.text:0000156A                 mov     eax, [ebp+var_4]
.text:0000156D                 add     esp, 4
.text:00001570                 cmp     ebp, esp
.text:00001572                 call    __RTC_CheckEsp
.text:00001577                 mov     esp, ebp
.text:00001579                 pop     ebp
.text:0000157A                 retn
.text:0000157A ??0CBufPtrSeqOutStream@@QAE@XZ endp
.text:0000157A
.text:0000157A ; ---------------------------------------------------------------------------
.text:0000157B                 align 4
.text:0000157B _text           ends
.text:0000157B
.rdata:0000157C ; ===========================================================================
.rdata:0000157C
.rdata:0000157C ; Segment type: Pure data
.rdata:0000157C ; Segment permissions: Read
.rdata:0000157C _rdata          segment dword public 'DATA' use32
.rdata:0000157C                 assume cs:_rdata
.rdata:0000157C                 ;org 157Ch
.rdata:0000157C ; COMDAT (pick largest)
.rdata:0000157C                 dd offset ??_R4CBufPtrSeqOutStream@@6B@ ; const CBufPtrSeqOutStream::`RTTI Complete Object Locator'
.rdata:00001580                 public ??_7CBufPtrSeqOutStream@@6B@
.rdata:00001580 ; const CBufPtrSeqOutStream::`vftable'
.rdata:00001580 ??_7CBufPtrSeqOutStream@@6B@ dd offset ?QueryInterface@CBufPtrSeqOutStream@@UAGJABU_GUID@@PAPAX@Z
.rdata:00001580                                         ; DATA XREF: CBufPtrSeqOutStream::CBufPtrSeqOutStream(void)+24o
.rdata:00001580                                         ; CBufPtrSeqOutStream::QueryInterface(_GUID const &,void * *)
.rdata:00001584                 dd offset ?AddRef@CBufPtrSeqOutStream@@UAGKXZ ; CBufPtrSeqOutStream::AddRef(void)
.rdata:00001588                 dd offset ?Release@CBufPtrSeqOutStream@@UAGKXZ ; CBufPtrSeqOutStream::Release(void)
.rdata:0000158C                 dd offset ?Write@CBufPtrSeqOutStream@@UAGJPBXIPAI@Z ; CBufPtrSeqOutStream::Write(void const *,uint,uint *)
.rdata:0000158C _rdata          ends
.rdata:0000158C
.rdata$r:00001590 ; ===========================================================================
.rdata$r:00001590
.rdata$r:00001590 ; Segment type: Pure data
.rdata$r:00001590 ; Segment permissions: Read
.rdata$r:00001590 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001590                 assume cs:_rdata$r
.rdata$r:00001590                 ;org 1590h
.rdata$r:00001590 ; COMDAT (pick any)
.rdata$r:00001590                 public ??_R4CBufPtrSeqOutStream@@6B@
.rdata$r:00001590 ; const CBufPtrSeqOutStream::`RTTI Complete Object Locator'
.rdata$r:00001590 ??_R4CBufPtrSeqOutStream@@6B@ db    0   ; DATA XREF: .rdata:0000157Co
.rdata$r:00001591                 db    0
.rdata$r:00001592                 db    0
.rdata$r:00001593                 db    0
.rdata$r:00001594                 db    0
.rdata$r:00001595                 db    0
.rdata$r:00001596                 db    0
.rdata$r:00001597                 db    0
.rdata$r:00001598                 db    0
.rdata$r:00001599                 db    0
.rdata$r:0000159A                 db    0
.rdata$r:0000159B                 db    0
.rdata$r:0000159C                 dd offset ??_R0?AVCBufPtrSeqOutStream@@@8 ; CBufPtrSeqOutStream `RTTI Type Descriptor'
.rdata$r:000015A0                 dd offset ??_R3CBufPtrSeqOutStream@@8 ; CBufPtrSeqOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000015A0 _rdata$r        ends
.rdata$r:000015A0
.data:000015A4 ; ===========================================================================
.data:000015A4
.data:000015A4 ; Segment type: Pure data
.data:000015A4 ; Segment permissions: Read/Write
.data:000015A4 _data           segment dword public 'DATA' use32
.data:000015A4                 assume cs:_data
.data:000015A4                 ;org 15A4h
.data:000015A4 ; COMDAT (pick any)
.data:000015A4                 public ??_R0?AVCBufPtrSeqOutStream@@@8
.data:000015A4 ; class CBufPtrSeqOutStream `RTTI Type Descriptor'
.data:000015A4 ??_R0?AVCBufPtrSeqOutStream@@@8 dd offset ??_7type_info@@6B@
.data:000015A4                                         ; DATA XREF: .rdata$r:0000159Co
.data:000015A4                                         ; .rdata$r:CBufPtrSeqOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000015A4                                         ; const type_info::`vftable'
.data:000015A8                 db    0
.data:000015A9                 db    0
.data:000015AA                 db    0
.data:000015AB                 db    0
.data:000015AC                 db  2Eh ; .
.data:000015AD                 db  3Fh ; ?
.data:000015AE                 db  41h ; A
.data:000015AF                 db  56h ; V
.data:000015B0                 db  43h ; C
.data:000015B1                 db  42h ; B
.data:000015B2                 db  75h ; u
.data:000015B3                 db  66h ; f
.data:000015B4                 db  50h ; P
.data:000015B5                 db  74h ; t
.data:000015B6                 db  72h ; r
.data:000015B7                 db  53h ; S
.data:000015B8                 db  65h ; e
.data:000015B9                 db  71h ; q
.data:000015BA                 db  4Fh ; O
.data:000015BB                 db  75h ; u
.data:000015BC                 db  74h ; t
.data:000015BD                 db  53h ; S
.data:000015BE                 db  74h ; t
.data:000015BF                 db  72h ; r
.data:000015C0                 db  65h ; e
.data:000015C1                 db  61h ; a
.data:000015C2                 db  6Dh ; m
.data:000015C3                 db  40h ; @
.data:000015C4                 db  40h ; @
.data:000015C5                 db    0
.data:000015C6                 align 4
.data:000015C6 _data           ends
.data:000015C6
.rdata$r:000015C8 ; ===========================================================================
.rdata$r:000015C8
.rdata$r:000015C8 ; Segment type: Pure data
.rdata$r:000015C8 ; Segment permissions: Read
.rdata$r:000015C8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000015C8                 assume cs:_rdata$r
.rdata$r:000015C8                 ;org 15C8h
.rdata$r:000015C8 ; COMDAT (pick any)
.rdata$r:000015C8                 public ??_R3CBufPtrSeqOutStream@@8
.rdata$r:000015C8 ; CBufPtrSeqOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000015C8 ??_R3CBufPtrSeqOutStream@@8 db    0     ; DATA XREF: .rdata$r:000015A0o
.rdata$r:000015C8                                         ; .rdata$r:00001604o
.rdata$r:000015C9                 db    0
.rdata$r:000015CA                 db    0
.rdata$r:000015CB                 db    0
.rdata$r:000015CC                 db    1
.rdata$r:000015CD                 db    0
.rdata$r:000015CE                 db    0
.rdata$r:000015CF                 db    0
.rdata$r:000015D0                 db    4
.rdata$r:000015D1                 db    0
.rdata$r:000015D2                 db    0
.rdata$r:000015D3                 db    0
.rdata$r:000015D4                 dd offset ??_R2CBufPtrSeqOutStream@@8 ; CBufPtrSeqOutStream::`RTTI Base Class Array'
.rdata$r:000015D4 _rdata$r        ends
.rdata$r:000015D4
.rdata$r:000015D8 ; ===========================================================================
.rdata$r:000015D8
.rdata$r:000015D8 ; Segment type: Pure data
.rdata$r:000015D8 ; Segment permissions: Read
.rdata$r:000015D8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000015D8                 assume cs:_rdata$r
.rdata$r:000015D8                 ;org 15D8h
.rdata$r:000015D8 ; COMDAT (pick any)
.rdata$r:000015D8                 public ??_R2CBufPtrSeqOutStream@@8
.rdata$r:000015D8 ; CBufPtrSeqOutStream::`RTTI Base Class Array'
.rdata$r:000015D8 ??_R2CBufPtrSeqOutStream@@8 dd offset ??_R1A@?0A@EA@CBufPtrSeqOutStream@@8
.rdata$r:000015D8                                         ; DATA XREF: .rdata$r:000015D4o
.rdata$r:000015D8                                         ; CBufPtrSeqOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000015DC                 dd offset ??_R1A@?0A@EA@ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000015E0                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000015E4                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:000015E8                 db    0
.rdata$r:000015E9                 align 4
.rdata$r:000015E9 _rdata$r        ends
.rdata$r:000015E9
.rdata$r:000015EC ; ===========================================================================
.rdata$r:000015EC
.rdata$r:000015EC ; Segment type: Pure data
.rdata$r:000015EC ; Segment permissions: Read
.rdata$r:000015EC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000015EC                 assume cs:_rdata$r
.rdata$r:000015EC                 ;org 15ECh
.rdata$r:000015EC ; COMDAT (pick any)
.rdata$r:000015EC                 public ??_R1A@?0A@EA@CBufPtrSeqOutStream@@8
.rdata$r:000015EC ; CBufPtrSeqOutStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000015EC ??_R1A@?0A@EA@CBufPtrSeqOutStream@@8 dd offset ??_R0?AVCBufPtrSeqOutStream@@@8
.rdata$r:000015EC                                         ; DATA XREF: .rdata$r:CBufPtrSeqOutStream::`RTTI Base Class Array'o
.rdata$r:000015EC                                         ; CBufPtrSeqOutStream `RTTI Type Descriptor'
.rdata$r:000015F0                 db    3
.rdata$r:000015F1                 db    0
.rdata$r:000015F2                 db    0
.rdata$r:000015F3                 db    0
.rdata$r:000015F4                 db    0
.rdata$r:000015F5                 db    0
.rdata$r:000015F6                 db    0
.rdata$r:000015F7                 db    0
.rdata$r:000015F8                 db 0FFh
.rdata$r:000015F9                 db 0FFh
.rdata$r:000015FA                 db 0FFh
.rdata$r:000015FB                 db 0FFh
.rdata$r:000015FC                 db    0
.rdata$r:000015FD                 db    0
.rdata$r:000015FE                 db    0
.rdata$r:000015FF                 db    0
.rdata$r:00001600                 db  40h ; @
.rdata$r:00001601                 db    0
.rdata$r:00001602                 db    0
.rdata$r:00001603                 db    0
.rdata$r:00001604                 dd offset ??_R3CBufPtrSeqOutStream@@8 ; CBufPtrSeqOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001604 _rdata$r        ends
.rdata$r:00001604
.rdata$r:00001608 ; ===========================================================================
.rdata$r:00001608
.rdata$r:00001608 ; Segment type: Pure data
.rdata$r:00001608 ; Segment permissions: Read
.rdata$r:00001608 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001608                 assume cs:_rdata$r
.rdata$r:00001608                 ;org 1608h
.rdata$r:00001608 ; COMDAT (pick any)
.rdata$r:00001608                 public ??_R1A@?0A@EA@ISequentialOutStream@@8
.rdata$r:00001608 ; ISequentialOutStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001608 ??_R1A@?0A@EA@ISequentialOutStream@@8 dd offset ??_R0?AUISequentialOutStream@@@8
.rdata$r:00001608                                         ; DATA XREF: .rdata$r:000015DCo
.rdata$r:00001608                                         ; .rdata$r:ISequentialOutStream::`RTTI Base Class Array'o
.rdata$r:00001608                                         ; ISequentialOutStream `RTTI Type Descriptor'
.rdata$r:0000160C                 db    1
.rdata$r:0000160D                 db    0
.rdata$r:0000160E                 db    0
.rdata$r:0000160F                 db    0
.rdata$r:00001610                 db    0
.rdata$r:00001611                 db    0
.rdata$r:00001612                 db    0
.rdata$r:00001613                 db    0
.rdata$r:00001614                 db 0FFh
.rdata$r:00001615                 db 0FFh
.rdata$r:00001616                 db 0FFh
.rdata$r:00001617                 db 0FFh
.rdata$r:00001618                 db    0
.rdata$r:00001619                 db    0
.rdata$r:0000161A                 db    0
.rdata$r:0000161B                 db    0
.rdata$r:0000161C                 db  40h ; @
.rdata$r:0000161D                 db    0
.rdata$r:0000161E                 db    0
.rdata$r:0000161F                 db    0
.rdata$r:00001620                 dd offset ??_R3ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001620 _rdata$r        ends
.rdata$r:00001620
.data:00001624 ; ===========================================================================
.data:00001624
.data:00001624 ; Segment type: Pure data
.data:00001624 ; Segment permissions: Read/Write
.data:00001624 _data           segment dword public 'DATA' use32
.data:00001624                 assume cs:_data
.data:00001624                 ;org 1624h
.data:00001624 ; COMDAT (pick any)
.data:00001624                 public ??_R0?AUISequentialOutStream@@@8
.data:00001624 ; struct ISequentialOutStream `RTTI Type Descriptor'
.data:00001624 ??_R0?AUISequentialOutStream@@@8 dd offset ??_7type_info@@6B@
.data:00001624                                         ; DATA XREF: .rdata$r:ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00001624                                         ; .rdata$r:0000178Co
.data:00001624                                         ; const type_info::`vftable'
.data:00001628                 db    0
.data:00001629                 db    0
.data:0000162A                 db    0
.data:0000162B                 db    0
.data:0000162C                 db  2Eh ; .
.data:0000162D                 db  3Fh ; ?
.data:0000162E                 db  41h ; A
.data:0000162F                 db  55h ; U
.data:00001630                 db  49h ; I
.data:00001631                 db  53h ; S
.data:00001632                 db  65h ; e
.data:00001633                 db  71h ; q
.data:00001634                 db  75h ; u
.data:00001635                 db  65h ; e
.data:00001636                 db  6Eh ; n
.data:00001637                 db  74h ; t
.data:00001638                 db  69h ; i
.data:00001639                 db  61h ; a
.data:0000163A                 db  6Ch ; l
.data:0000163B                 db  4Fh ; O
.data:0000163C                 db  75h ; u
.data:0000163D                 db  74h ; t
.data:0000163E                 db  53h ; S
.data:0000163F                 db  74h ; t
.data:00001640                 db  72h ; r
.data:00001641                 db  65h ; e
.data:00001642                 db  61h ; a
.data:00001643                 db  6Dh ; m
.data:00001644                 db  40h ; @
.data:00001645                 db  40h ; @
.data:00001646                 db    0
.data:00001647                 align 4
.data:00001647 _data           ends
.data:00001647
.rdata$r:00001648 ; ===========================================================================
.rdata$r:00001648
.rdata$r:00001648 ; Segment type: Pure data
.rdata$r:00001648 ; Segment permissions: Read
.rdata$r:00001648 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001648                 assume cs:_rdata$r
.rdata$r:00001648                 ;org 1648h
.rdata$r:00001648 ; COMDAT (pick any)
.rdata$r:00001648                 public ??_R3ISequentialOutStream@@8
.rdata$r:00001648 ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001648 ??_R3ISequentialOutStream@@8 db    0    ; DATA XREF: .rdata$r:00001620o
.rdata$r:00001648                                         ; .rdata$r:00001790o
.rdata$r:00001649                 db    0
.rdata$r:0000164A                 db    0
.rdata$r:0000164B                 db    0
.rdata$r:0000164C                 db    0
.rdata$r:0000164D                 db    0
.rdata$r:0000164E                 db    0
.rdata$r:0000164F                 db    0
.rdata$r:00001650                 db    2
.rdata$r:00001651                 db    0
.rdata$r:00001652                 db    0
.rdata$r:00001653                 db    0
.rdata$r:00001654                 dd offset ??_R2ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Array'
.rdata$r:00001654 _rdata$r        ends
.rdata$r:00001654
.rdata$r:00001658 ; ===========================================================================
.rdata$r:00001658
.rdata$r:00001658 ; Segment type: Pure data
.rdata$r:00001658 ; Segment permissions: Read
.rdata$r:00001658 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001658                 assume cs:_rdata$r
.rdata$r:00001658                 ;org 1658h
.rdata$r:00001658 ; COMDAT (pick any)
.rdata$r:00001658                 public ??_R2ISequentialOutStream@@8
.rdata$r:00001658 ; ISequentialOutStream::`RTTI Base Class Array'
.rdata$r:00001658 ??_R2ISequentialOutStream@@8 dd offset ??_R1A@?0A@EA@ISequentialOutStream@@8
.rdata$r:00001658                                         ; DATA XREF: .rdata$r:00001654o
.rdata$r:00001658                                         ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000165C                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001660                 db    0
.rdata$r:00001661                 align 4
.rdata$r:00001661 _rdata$r        ends
.rdata$r:00001661
.rdata$r:00001664 ; ===========================================================================
.rdata$r:00001664
.rdata$r:00001664 ; Segment type: Pure data
.rdata$r:00001664 ; Segment permissions: Read
.rdata$r:00001664 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001664                 assume cs:_rdata$r
.rdata$r:00001664                 ;org 1664h
.rdata$r:00001664 ; COMDAT (pick any)
.rdata$r:00001664                 public ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00001664 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001664 ??_R1A@?0A@EA@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00001664                                         ; DATA XREF: .rdata$r:000015E0o
.rdata$r:00001664                                         ; .rdata$r:0000165Co ...
.rdata$r:00001664                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00001668                 align 10h
.rdata$r:00001670                 db 0FFh
.rdata$r:00001671                 db 0FFh
.rdata$r:00001672                 db 0FFh
.rdata$r:00001673                 db 0FFh
.rdata$r:00001674                 db    0
.rdata$r:00001675                 db    0
.rdata$r:00001676                 db    0
.rdata$r:00001677                 db    0
.rdata$r:00001678                 db  40h ; @
.rdata$r:00001679                 db    0
.rdata$r:0000167A                 db    0
.rdata$r:0000167B                 db    0
.rdata$r:0000167C                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000167C _rdata$r        ends
.rdata$r:0000167C
.data:00001680 ; ===========================================================================
.data:00001680
.data:00001680 ; Segment type: Pure data
.data:00001680 ; Segment permissions: Read/Write
.data:00001680 _data           segment dword public 'DATA' use32
.data:00001680                 assume cs:_data
.data:00001680                 ;org 1680h
.data:00001680 ; COMDAT (pick any)
.data:00001680                 public ??_R0?AUIUnknown@@@8
.data:00001680 ; struct IUnknown `RTTI Type Descriptor'
.data:00001680 ??_R0?AUIUnknown@@@8 dd offset ??_7type_info@@6B@
.data:00001680                                         ; DATA XREF: .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00001680                                         ; .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'o ...
.data:00001680                                         ; const type_info::`vftable'
.data:00001684                 align 8
.data:00001688 a_?auiunknown@@ db '.?AUIUnknown@@',0
.data:00001697                 align 4
.data:00001697 _data           ends
.data:00001697
.rdata$r:00001698 ; ===========================================================================
.rdata$r:00001698
.rdata$r:00001698 ; Segment type: Pure data
.rdata$r:00001698 ; Segment permissions: Read
.rdata$r:00001698 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001698                 assume cs:_rdata$r
.rdata$r:00001698                 ;org 1698h
.rdata$r:00001698 ; COMDAT (pick any)
.rdata$r:00001698                 public ??_R3IUnknown@@8
.rdata$r:00001698 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001698 ??_R3IUnknown@@8 db    0                ; DATA XREF: .rdata$r:0000167Co
.rdata$r:00001698                                         ; .rdata$r:000021A0o ...
.rdata$r:00001699                 db    0
.rdata$r:0000169A                 db    0
.rdata$r:0000169B                 db    0
.rdata$r:0000169C                 db    0
.rdata$r:0000169D                 db    0
.rdata$r:0000169E                 db    0
.rdata$r:0000169F                 db    0
.rdata$r:000016A0                 db    1
.rdata$r:000016A1                 db    0
.rdata$r:000016A2                 db    0
.rdata$r:000016A3                 db    0
.rdata$r:000016A4                 dd offset ??_R2IUnknown@@8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:000016A4 _rdata$r        ends
.rdata$r:000016A4
.rdata$r:000016A8 ; ===========================================================================
.rdata$r:000016A8
.rdata$r:000016A8 ; Segment type: Pure data
.rdata$r:000016A8 ; Segment permissions: Read
.rdata$r:000016A8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000016A8                 assume cs:_rdata$r
.rdata$r:000016A8                 ;org 16A8h
.rdata$r:000016A8 ; COMDAT (pick any)
.rdata$r:000016A8                 public ??_R2IUnknown@@8
.rdata$r:000016A8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:000016A8 ??_R2IUnknown@@8 dd offset ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:000016A8                                         ; DATA XREF: .rdata$r:000016A4o
.rdata$r:000016A8                                         ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000016AC                 db    0
.rdata$r:000016AD                 align 10h
.rdata$r:000016AD _rdata$r        ends
.rdata$r:000016AD
.rdata$r:000016B0 ; ===========================================================================
.rdata$r:000016B0
.rdata$r:000016B0 ; Segment type: Pure data
.rdata$r:000016B0 ; Segment permissions: Read
.rdata$r:000016B0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000016B0                 assume cs:_rdata$r
.rdata$r:000016B0                 ;org 16B0h
.rdata$r:000016B0 ; COMDAT (pick any)
.rdata$r:000016B0                 public ??_R13?0A@EA@CMyUnknownImp@@8
.rdata$r:000016B0 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:000016B0 ??_R13?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:000016B0                                         ; DATA XREF: .rdata$r:000015E4o
.rdata$r:000016B0                                         ; .rdata$r:00002888o
.rdata$r:000016B0                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:000016B4                 align 8
.rdata$r:000016B8                 db    4
.rdata$r:000016B9                 db    0
.rdata$r:000016BA                 db    0
.rdata$r:000016BB                 db    0
.rdata$r:000016BC                 db 0FFh
.rdata$r:000016BD                 db 0FFh
.rdata$r:000016BE                 db 0FFh
.rdata$r:000016BF                 db 0FFh
.rdata$r:000016C0                 db    0
.rdata$r:000016C1                 db    0
.rdata$r:000016C2                 db    0
.rdata$r:000016C3                 db    0
.rdata$r:000016C4                 db  40h ; @
.rdata$r:000016C5                 db    0
.rdata$r:000016C6                 db    0
.rdata$r:000016C7                 db    0
.rdata$r:000016C8                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000016C8 _rdata$r        ends
.rdata$r:000016C8
.data:000016CC ; ===========================================================================
.data:000016CC
.data:000016CC ; Segment type: Pure data
.data:000016CC ; Segment permissions: Read/Write
.data:000016CC _data           segment dword public 'DATA' use32
.data:000016CC                 assume cs:_data
.data:000016CC                 ;org 16CCh
.data:000016CC ; COMDAT (pick any)
.data:000016CC                 public ??_R0?AVCMyUnknownImp@@@8
.data:000016CC ; class CMyUnknownImp `RTTI Type Descriptor'
.data:000016CC ??_R0?AVCMyUnknownImp@@@8 dd offset ??_7type_info@@6B@
.data:000016CC                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:000016CC                                         ; .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:000016CC                                         ; const type_info::`vftable'
.data:000016D0                 db    0
.data:000016D1                 db    0
.data:000016D2                 db    0
.data:000016D3                 db    0
.data:000016D4                 db  2Eh ; .
.data:000016D5                 db  3Fh ; ?
.data:000016D6                 db  41h ; A
.data:000016D7                 db  56h ; V
.data:000016D8                 db  43h ; C
.data:000016D9                 db  4Dh ; M
.data:000016DA                 db  79h ; y
.data:000016DB                 db  55h ; U
.data:000016DC                 db  6Eh ; n
.data:000016DD                 db  6Bh ; k
.data:000016DE                 db  6Eh ; n
.data:000016DF                 db  6Fh ; o
.data:000016E0                 db  77h ; w
.data:000016E1                 db  6Eh ; n
.data:000016E2                 db  49h ; I
.data:000016E3                 db  6Dh ; m
.data:000016E4                 db  70h ; p
.data:000016E5                 db  40h ; @
.data:000016E6                 db  40h ; @
.data:000016E7                 db    0
.data:000016E7 _data           ends
.data:000016E7
.rdata$r:000016E8 ; ===========================================================================
.rdata$r:000016E8
.rdata$r:000016E8 ; Segment type: Pure data
.rdata$r:000016E8 ; Segment permissions: Read
.rdata$r:000016E8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000016E8                 assume cs:_rdata$r
.rdata$r:000016E8                 ;org 16E8h
.rdata$r:000016E8 ; COMDAT (pick any)
.rdata$r:000016E8                 public ??_R3CMyUnknownImp@@8
.rdata$r:000016E8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000016E8 ??_R3CMyUnknownImp@@8 db    0           ; DATA XREF: .rdata$r:000016C8o
.rdata$r:000016E8                                         ; .rdata$r:00001718o ...
.rdata$r:000016E9                 db    0
.rdata$r:000016EA                 db    0
.rdata$r:000016EB                 db    0
.rdata$r:000016EC                 db    0
.rdata$r:000016ED                 db    0
.rdata$r:000016EE                 db    0
.rdata$r:000016EF                 db    0
.rdata$r:000016F0                 db    1
.rdata$r:000016F1                 db    0
.rdata$r:000016F2                 db    0
.rdata$r:000016F3                 db    0
.rdata$r:000016F4                 dd offset ??_R2CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:000016F4 _rdata$r        ends
.rdata$r:000016F4
.rdata$r:000016F8 ; ===========================================================================
.rdata$r:000016F8
.rdata$r:000016F8 ; Segment type: Pure data
.rdata$r:000016F8 ; Segment permissions: Read
.rdata$r:000016F8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000016F8                 assume cs:_rdata$r
.rdata$r:000016F8                 ;org 16F8h
.rdata$r:000016F8 ; COMDAT (pick any)
.rdata$r:000016F8                 public ??_R2CMyUnknownImp@@8
.rdata$r:000016F8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:000016F8 ??_R2CMyUnknownImp@@8 dd offset ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:000016F8                                         ; DATA XREF: .rdata$r:000016F4o
.rdata$r:000016F8                                         ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000016FC                 db    0
.rdata$r:000016FD                 align 10h
.rdata$r:000016FD _rdata$r        ends
.rdata$r:000016FD
.rdata$r:00001700 ; ===========================================================================
.rdata$r:00001700
.rdata$r:00001700 ; Segment type: Pure data
.rdata$r:00001700 ; Segment permissions: Read
.rdata$r:00001700 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001700                 assume cs:_rdata$r
.rdata$r:00001700                 ;org 1700h
.rdata$r:00001700 ; COMDAT (pick any)
.rdata$r:00001700                 public ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00001700 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001700 ??_R1A@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00001700                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Array'o
.rdata$r:00001700                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00001704                 db    0
.rdata$r:00001705                 db    0
.rdata$r:00001706                 db    0
.rdata$r:00001707                 db    0
.rdata$r:00001708                 db    0
.rdata$r:00001709                 db    0
.rdata$r:0000170A                 db    0
.rdata$r:0000170B                 db    0
.rdata$r:0000170C                 db 0FFh
.rdata$r:0000170D                 db 0FFh
.rdata$r:0000170E                 db 0FFh
.rdata$r:0000170F                 db 0FFh
.rdata$r:00001710                 db    0
.rdata$r:00001711                 db    0
.rdata$r:00001712                 db    0
.rdata$r:00001713                 db    0
.rdata$r:00001714                 db  40h ; @
.rdata$r:00001715                 db    0
.rdata$r:00001716                 db    0
.rdata$r:00001717                 db    0
.rdata$r:00001718                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001718 _rdata$r        ends
.rdata$r:00001718
.text:0000171C ; ===========================================================================
.text:0000171C
.text:0000171C ; Segment type: Pure code
.text:0000171C ; Segment permissions: Read/Execute
.text:0000171C _text           segment para public 'CODE' use32
.text:0000171C                 assume cs:_text
.text:0000171C                 ;org 171Ch
.text:0000171C ; COMDAT (pick any)
.text:0000171C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000171C
.text:0000171C ; =============== S U B R O U T I N E =======================================
.text:0000171C
.text:0000171C ; Attributes: bp-based frame
.text:0000171C
.text:0000171C ; _DWORD __thiscall CMyUnknownImp::CMyUnknownImp(CMyUnknownImp *__hidden this)
.text:0000171C                 public ??0CMyUnknownImp@@QAE@XZ
.text:0000171C ??0CMyUnknownImp@@QAE@XZ proc near      ; CODE XREF: CBufPtrSeqOutStream::CBufPtrSeqOutStream(void)+1Cp
.text:0000171C                                         ; NCompress::CCopyCoder::CCopyCoder(void)+3Dp ...
.text:0000171C
.text:0000171C var_4           = dword ptr -4
.text:0000171C
.text:0000171C                 push    ebp
.text:0000171D                 mov     ebp, esp
.text:0000171F                 push    ecx
.text:00001720                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001727                 mov     [ebp+var_4], ecx
.text:0000172A                 mov     eax, [ebp+var_4]
.text:0000172D                 mov     dword ptr [eax], 0
.text:00001733                 mov     eax, [ebp+var_4]
.text:00001736                 mov     esp, ebp
.text:00001738                 pop     ebp
.text:00001739                 retn
.text:00001739 ??0CMyUnknownImp@@QAE@XZ endp
.text:00001739
.text:00001739 ; ---------------------------------------------------------------------------
.text:0000173A                 align 4
.text:0000173A _text           ends
.text:0000173A
.text:0000173C ; ===========================================================================
.text:0000173C
.text:0000173C ; Segment type: Pure code
.text:0000173C ; Segment permissions: Read/Execute
.text:0000173C _text           segment para public 'CODE' use32
.text:0000173C                 assume cs:_text
.text:0000173C                 ;org 173Ch
.text:0000173C ; COMDAT (pick any)
.text:0000173C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000173C
.text:0000173C ; =============== S U B R O U T I N E =======================================
.text:0000173C
.text:0000173C ; Attributes: bp-based frame
.text:0000173C
.text:0000173C ; _DWORD __thiscall ISequentialOutStream::ISequentialOutStream(ISequentialOutStream *__hidden this)
.text:0000173C                 public ??0ISequentialOutStream@@QAE@XZ
.text:0000173C ??0ISequentialOutStream@@QAE@XZ proc near
.text:0000173C                                         ; CODE XREF: CBufPtrSeqOutStream::CBufPtrSeqOutStream(void)+11p
.text:0000173C
.text:0000173C var_4           = dword ptr -4
.text:0000173C
.text:0000173C                 push    ebp
.text:0000173D                 mov     ebp, esp
.text:0000173F                 push    ecx
.text:00001740                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001747                 mov     [ebp+var_4], ecx
.text:0000174A                 mov     ecx, [ebp+var_4]
.text:0000174D                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00001752                 mov     eax, [ebp+var_4]
.text:00001755                 mov     dword ptr [eax], offset ??_7ISequentialOutStream@@6B@ ; const ISequentialOutStream::`vftable'
.text:0000175B                 mov     eax, [ebp+var_4]
.text:0000175E                 add     esp, 4
.text:00001761                 cmp     ebp, esp
.text:00001763                 call    __RTC_CheckEsp
.text:00001768                 mov     esp, ebp
.text:0000176A                 pop     ebp
.text:0000176B                 retn
.text:0000176B ??0ISequentialOutStream@@QAE@XZ endp
.text:0000176B
.text:0000176B _text           ends
.text:0000176B
.rdata:0000176C ; ===========================================================================
.rdata:0000176C
.rdata:0000176C ; Segment type: Pure data
.rdata:0000176C ; Segment permissions: Read
.rdata:0000176C _rdata          segment dword public 'DATA' use32
.rdata:0000176C                 assume cs:_rdata
.rdata:0000176C                 ;org 176Ch
.rdata:0000176C ; COMDAT (pick largest)
.rdata:0000176C                 dd offset ??_R4ISequentialOutStream@@6B@ ; const ISequentialOutStream::`RTTI Complete Object Locator'
.rdata:00001770                 public ??_7ISequentialOutStream@@6B@
.rdata:00001770 ; const ISequentialOutStream::`vftable'
.rdata:00001770 ??_7ISequentialOutStream@@6B@ dd offset __purecall
.rdata:00001770                                         ; DATA XREF: ISequentialOutStream::ISequentialOutStream(void)+19o
.rdata:00001774                 dd offset __purecall
.rdata:00001778                 dd offset __purecall
.rdata:0000177C                 dd offset __purecall
.rdata:0000177C _rdata          ends
.rdata:0000177C
.rdata$r:00001780 ; ===========================================================================
.rdata$r:00001780
.rdata$r:00001780 ; Segment type: Pure data
.rdata$r:00001780 ; Segment permissions: Read
.rdata$r:00001780 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001780                 assume cs:_rdata$r
.rdata$r:00001780                 ;org 1780h
.rdata$r:00001780 ; COMDAT (pick any)
.rdata$r:00001780                 public ??_R4ISequentialOutStream@@6B@
.rdata$r:00001780 ; const ISequentialOutStream::`RTTI Complete Object Locator'
.rdata$r:00001780 ??_R4ISequentialOutStream@@6B@ db    0  ; DATA XREF: .rdata:0000176Co
.rdata$r:00001781                 db    0
.rdata$r:00001782                 db    0
.rdata$r:00001783                 db    0
.rdata$r:00001784                 db    0
.rdata$r:00001785                 db    0
.rdata$r:00001786                 db    0
.rdata$r:00001787                 db    0
.rdata$r:00001788                 db    0
.rdata$r:00001789                 db    0
.rdata$r:0000178A                 db    0
.rdata$r:0000178B                 db    0
.rdata$r:0000178C                 dd offset ??_R0?AUISequentialOutStream@@@8 ; ISequentialOutStream `RTTI Type Descriptor'
.rdata$r:00001790                 dd offset ??_R3ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001790 _rdata$r        ends
.rdata$r:00001790
.text:00001794 ; ===========================================================================
.text:00001794
.text:00001794 ; Segment type: Pure code
.text:00001794 ; Segment permissions: Read/Execute
.text:00001794 _text           segment para public 'CODE' use32
.text:00001794                 assume cs:_text
.text:00001794                 ;org 1794h
.text:00001794 ; COMDAT (pick any)
.text:00001794                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001794
.text:00001794 ; =============== S U B R O U T I N E =======================================
.text:00001794
.text:00001794 ; Attributes: bp-based frame
.text:00001794
.text:00001794 ; public: __thiscall IUnknown::IUnknown(void)
.text:00001794                 public ??0IUnknown@@QAE@XZ
.text:00001794 ??0IUnknown@@QAE@XZ proc near           ; CODE XREF: ISequentialOutStream::ISequentialOutStream(void)+11p
.text:00001794                                         ; ISequentialInStream::ISequentialInStream(void)+11p ...
.text:00001794
.text:00001794 var_4           = dword ptr -4
.text:00001794
.text:00001794                 push    ebp
.text:00001795                 mov     ebp, esp
.text:00001797                 push    ecx
.text:00001798                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000179F                 mov     [ebp+var_4], ecx
.text:000017A2                 mov     eax, [ebp+var_4]
.text:000017A5                 mov     esp, ebp
.text:000017A7                 pop     ebp
.text:000017A8                 retn
.text:000017A8 ??0IUnknown@@QAE@XZ endp
.text:000017A8
.text:000017A8 ; ---------------------------------------------------------------------------
.text:000017A9                 align 4
.text:000017A9 _text           ends
.text:000017A9
.text:000017AC ; ===========================================================================
.text:000017AC
.text:000017AC ; Segment type: Pure code
.text:000017AC ; Segment permissions: Read/Execute
.text:000017AC _text           segment para public 'CODE' use32
.text:000017AC                 assume cs:_text
.text:000017AC                 ;org 17ACh
.text:000017AC ; COMDAT (pick any)
.text:000017AC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000017AC
.text:000017AC ; =============== S U B R O U T I N E =======================================
.text:000017AC
.text:000017AC ; Attributes: bp-based frame
.text:000017AC
.text:000017AC ; __int32 __stdcall CBufPtrSeqOutStream::QueryInterface(CBufPtrSeqOutStream *this, const struct _GUID *Buf1, void **)
.text:000017AC                 public ?QueryInterface@CBufPtrSeqOutStream@@UAGJABU_GUID@@PAPAX@Z
.text:000017AC ?QueryInterface@CBufPtrSeqOutStream@@UAGJABU_GUID@@PAPAX@Z proc near
.text:000017AC                                         ; DATA XREF: .rdata:const CBufPtrSeqOutStream::`vftable'o
.text:000017AC
.text:000017AC this            = dword ptr  8
.text:000017AC Buf1            = dword ptr  0Ch
.text:000017AC arg_8           = dword ptr  10h
.text:000017AC
.text:000017AC                 push    ebp
.text:000017AD                 mov     ebp, esp
.text:000017AF                 mov     eax, [ebp+arg_8]
.text:000017B2                 mov     dword ptr [eax], 0
.text:000017B8                 push    offset _IID_IUnknown ; Buf2
.text:000017BD                 mov     ecx, [ebp+Buf1]
.text:000017C0                 push    ecx             ; Buf1
.text:000017C1                 call    ___@8           ; __(x,x)
.text:000017C6                 test    eax, eax
.text:000017C8                 jz      short loc_17D4
.text:000017CA                 mov     edx, [ebp+arg_8]
.text:000017CD                 mov     eax, [ebp+this]
.text:000017D0                 mov     [edx], eax
.text:000017D2                 jmp     short loc_17F7
.text:000017D4 ; ---------------------------------------------------------------------------
.text:000017D4
.text:000017D4 loc_17D4:                               ; CODE XREF: CBufPtrSeqOutStream::QueryInterface(_GUID const &,void * *)+1Cj
.text:000017D4                 push    offset _IID_ISequentialOutStream ; Buf2
.text:000017D9                 mov     ecx, [ebp+Buf1]
.text:000017DC                 push    ecx             ; Buf1
.text:000017DD                 call    ___@8           ; __(x,x)
.text:000017E2                 test    eax, eax
.text:000017E4                 jz      short loc_17F0
.text:000017E6                 mov     edx, [ebp+arg_8]
.text:000017E9                 mov     eax, [ebp+this]
.text:000017EC                 mov     [edx], eax
.text:000017EE                 jmp     short loc_17F7
.text:000017F0 ; ---------------------------------------------------------------------------
.text:000017F0
.text:000017F0 loc_17F0:                               ; CODE XREF: CBufPtrSeqOutStream::QueryInterface(_GUID const &,void * *)+38j
.text:000017F0                 mov     eax, 80004002h
.text:000017F5                 jmp     short loc_1808
.text:000017F7 ; ---------------------------------------------------------------------------
.text:000017F7
.text:000017F7 loc_17F7:                               ; CODE XREF: CBufPtrSeqOutStream::QueryInterface(_GUID const &,void * *)+26j
.text:000017F7                                         ; CBufPtrSeqOutStream::QueryInterface(_GUID const &,void * *)+42j
.text:000017F7                 mov     ecx, [ebp+this]
.text:000017FA                 mov     edx, [ecx+4]
.text:000017FD                 add     edx, 1
.text:00001800                 mov     eax, [ebp+this]
.text:00001803                 mov     [eax+4], edx
.text:00001806                 xor     eax, eax
.text:00001808
.text:00001808 loc_1808:                               ; CODE XREF: CBufPtrSeqOutStream::QueryInterface(_GUID const &,void * *)+49j
.text:00001808                 cmp     ebp, esp
.text:0000180A                 call    __RTC_CheckEsp
.text:0000180F                 pop     ebp
.text:00001810                 retn    0Ch
.text:00001810 ?QueryInterface@CBufPtrSeqOutStream@@UAGJABU_GUID@@PAPAX@Z endp
.text:00001810
.text:00001810 ; ---------------------------------------------------------------------------
.text:00001813                 align 4
.text:00001813 _text           ends
.text:00001813
.text:00001814 ; ===========================================================================
.text:00001814
.text:00001814 ; Segment type: Pure code
.text:00001814 ; Segment permissions: Read/Execute
.text:00001814 _text           segment para public 'CODE' use32
.text:00001814                 assume cs:_text
.text:00001814                 ;org 1814h
.text:00001814 ; COMDAT (pick any)
.text:00001814                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001814
.text:00001814 ; =============== S U B R O U T I N E =======================================
.text:00001814
.text:00001814 ; Attributes: bp-based frame
.text:00001814
.text:00001814 ; int __stdcall __(void *Buf1, void *Buf2)
.text:00001814                 public ___@8
.text:00001814 ___@8           proc near               ; CODE XREF: CBufPtrSeqOutStream::QueryInterface(_GUID const &,void * *)+15p
.text:00001814                                         ; CBufPtrSeqOutStream::QueryInterface(_GUID const &,void * *)+31p ...
.text:00001814
.text:00001814 Buf1            = dword ptr  8
.text:00001814 Buf2            = dword ptr  0Ch
.text:00001814
.text:00001814                 push    ebp
.text:00001815                 mov     ebp, esp
.text:00001817                 mov     eax, [ebp+Buf2]
.text:0000181A                 push    eax             ; Buf2
.text:0000181B                 mov     ecx, [ebp+Buf1]
.text:0000181E                 push    ecx             ; Buf1
.text:0000181F                 call    _IsEqualGUID@8  ; IsEqualGUID(x,x)
.text:00001824                 cmp     ebp, esp
.text:00001826                 call    __RTC_CheckEsp
.text:0000182B                 pop     ebp
.text:0000182C                 retn    8
.text:0000182C ___@8           endp
.text:0000182C
.text:0000182C ; ---------------------------------------------------------------------------
.text:0000182F                 align 10h
.text:0000182F _text           ends
.text:0000182F
.text:00001830 ; ===========================================================================
.text:00001830
.text:00001830 ; Segment type: Pure code
.text:00001830 ; Segment permissions: Read/Execute
.text:00001830 _text           segment para public 'CODE' use32
.text:00001830                 assume cs:_text
.text:00001830                 ;org 1830h
.text:00001830 ; COMDAT (pick any)
.text:00001830                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001830
.text:00001830 ; =============== S U B R O U T I N E =======================================
.text:00001830
.text:00001830 ; Attributes: bp-based frame
.text:00001830
.text:00001830 ; int __stdcall IsEqualGUID(void *Buf1, void *Buf2)
.text:00001830                 public _IsEqualGUID@8
.text:00001830 _IsEqualGUID@8  proc near               ; CODE XREF: __(x,x)+Bp
.text:00001830
.text:00001830 Buf1            = dword ptr  8
.text:00001830 Buf2            = dword ptr  0Ch
.text:00001830
.text:00001830                 push    ebp
.text:00001831                 mov     ebp, esp
.text:00001833                 push    10h             ; Size
.text:00001835                 mov     eax, [ebp+Buf2]
.text:00001838                 push    eax             ; Buf2
.text:00001839                 mov     ecx, [ebp+Buf1]
.text:0000183C                 push    ecx             ; Buf1
.text:0000183D                 call    _memcmp
.text:00001842                 add     esp, 0Ch
.text:00001845                 neg     eax
.text:00001847                 sbb     eax, eax
.text:00001849                 add     eax, 1
.text:0000184C                 cmp     ebp, esp
.text:0000184E                 call    __RTC_CheckEsp
.text:00001853                 pop     ebp
.text:00001854                 retn    8
.text:00001854 _IsEqualGUID@8  endp
.text:00001854
.text:00001854 ; ---------------------------------------------------------------------------
.text:00001857                 align 4
.text:00001857 _text           ends
.text:00001857
.text:00001858 ; ===========================================================================
.text:00001858
.text:00001858 ; Segment type: Pure code
.text:00001858 ; Segment permissions: Read/Execute
.text:00001858 _text           segment para public 'CODE' use32
.text:00001858                 assume cs:_text
.text:00001858                 ;org 1858h
.text:00001858 ; COMDAT (pick any)
.text:00001858                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001858
.text:00001858 ; =============== S U B R O U T I N E =======================================
.text:00001858
.text:00001858 ; Attributes: bp-based frame
.text:00001858
.text:00001858 ; unsigned __int32 __stdcall CBufPtrSeqOutStream::AddRef(CBufPtrSeqOutStream *this)
.text:00001858                 public ?AddRef@CBufPtrSeqOutStream@@UAGKXZ
.text:00001858 ?AddRef@CBufPtrSeqOutStream@@UAGKXZ proc near ; DATA XREF: .rdata:00001584o
.text:00001858
.text:00001858 var_4           = dword ptr -4
.text:00001858 this            = dword ptr  8
.text:00001858
.text:00001858                 push    ebp
.text:00001859                 mov     ebp, esp
.text:0000185B                 push    ecx
.text:0000185C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001863                 mov     eax, [ebp+this]
.text:00001866                 mov     ecx, [eax+4]
.text:00001869                 add     ecx, 1
.text:0000186C                 mov     [ebp+var_4], ecx
.text:0000186F                 mov     edx, [ebp+this]
.text:00001872                 mov     eax, [ebp+var_4]
.text:00001875                 mov     [edx+4], eax
.text:00001878                 mov     eax, [ebp+var_4]
.text:0000187B                 mov     esp, ebp
.text:0000187D                 pop     ebp
.text:0000187E                 retn    4
.text:0000187E ?AddRef@CBufPtrSeqOutStream@@UAGKXZ endp
.text:0000187E
.text:0000187E ; ---------------------------------------------------------------------------
.text:00001881                 align 4
.text:00001881 _text           ends
.text:00001881
.text:00001884 ; ===========================================================================
.text:00001884
.text:00001884 ; Segment type: Pure code
.text:00001884 ; Segment permissions: Read/Execute
.text:00001884 _text           segment para public 'CODE' use32
.text:00001884                 assume cs:_text
.text:00001884                 ;org 1884h
.text:00001884 ; COMDAT (pick any)
.text:00001884                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001884
.text:00001884 ; =============== S U B R O U T I N E =======================================
.text:00001884
.text:00001884 ; Attributes: bp-based frame
.text:00001884
.text:00001884 ; unsigned __int32 __stdcall CBufPtrSeqOutStream::Release(CBufPtrSeqOutStream *this)
.text:00001884                 public ?Release@CBufPtrSeqOutStream@@UAGKXZ
.text:00001884 ?Release@CBufPtrSeqOutStream@@UAGKXZ proc near ; DATA XREF: .rdata:00001588o
.text:00001884
.text:00001884 var_8           = dword ptr -8
.text:00001884 var_4           = dword ptr -4
.text:00001884 this            = dword ptr  8
.text:00001884
.text:00001884                 push    ebp
.text:00001885                 mov     ebp, esp
.text:00001887                 sub     esp, 8
.text:0000188A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001891                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001898                 mov     eax, [ebp+this]
.text:0000189B                 mov     ecx, [eax+4]
.text:0000189E                 sub     ecx, 1
.text:000018A1                 mov     [ebp+var_8], ecx
.text:000018A4                 mov     edx, [ebp+this]
.text:000018A7                 mov     eax, [ebp+var_8]
.text:000018AA                 mov     [edx+4], eax
.text:000018AD                 cmp     [ebp+var_8], 0
.text:000018B1                 jz      short loc_18BB
.text:000018B3                 mov     ecx, [ebp+this]
.text:000018B6                 mov     eax, [ecx+4]
.text:000018B9                 jmp     short loc_18CF
.text:000018BB ; ---------------------------------------------------------------------------
.text:000018BB
.text:000018BB loc_18BB:                               ; CODE XREF: CBufPtrSeqOutStream::Release(void)+2Dj
.text:000018BB                 mov     edx, [ebp+this]
.text:000018BE                 mov     [ebp+var_4], edx
.text:000018C1                 mov     eax, [ebp+var_4]
.text:000018C4                 push    eax             ; void *
.text:000018C5                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000018CA                 add     esp, 4
.text:000018CD                 xor     eax, eax
.text:000018CF
.text:000018CF loc_18CF:                               ; CODE XREF: CBufPtrSeqOutStream::Release(void)+35j
.text:000018CF                 add     esp, 8
.text:000018D2                 cmp     ebp, esp
.text:000018D4                 call    __RTC_CheckEsp
.text:000018D9                 mov     esp, ebp
.text:000018DB                 pop     ebp
.text:000018DC                 retn    4
.text:000018DC ?Release@CBufPtrSeqOutStream@@UAGKXZ endp
.text:000018DC
.text:000018DC ; ---------------------------------------------------------------------------
.text:000018DF                 align 10h
.text:000018DF _text           ends
.text:000018DF
.text$x:000018E0 ; ===========================================================================
.text$x:000018E0
.text$x:000018E0 ; Segment type: Pure code
.text$x:000018E0 ; Segment permissions: Read/Execute
.text$x:000018E0 _text$x         segment para public 'CODE' use32
.text$x:000018E0                 assume cs:_text$x
.text$x:000018E0                 ;org 18E0h
.text$x:000018E0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:000018E0
.text$x:000018E0 ; =============== S U B R O U T I N E =======================================
.text$x:000018E0
.text$x:000018E0
.text$x:000018E0 __unwindfunclet$??0CAddCommon@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$0 proc near
.text$x:000018E0                                         ; DATA XREF: .xdata$x:00001A10o
.text$x:000018E0                 mov     ecx, [ebp-10h]  ; this
.text$x:000018E3                 jmp     ??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CCompressionMethodMode::~CCompressionMethodMode(void)
.text$x:000018E3 __unwindfunclet$??0CAddCommon@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$0 endp
.text$x:000018E3
.text$x:000018E8
.text$x:000018E8 ; =============== S U B R O U T I N E =======================================
.text$x:000018E8
.text$x:000018E8
.text$x:000018E8 __unwindfunclet$??0CAddCommon@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$1 proc near
.text$x:000018E8                                         ; DATA XREF: .xdata$x:00001A18o
.text$x:000018E8                 mov     ecx, [ebp-10h]
.text$x:000018EB                 add     ecx, 4Ch ; 'L'
.text$x:000018EE                 jmp     ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text$x:000018EE __unwindfunclet$??0CAddCommon@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$1 endp
.text$x:000018EE
.text$x:000018F3
.text$x:000018F3 ; =============== S U B R O U T I N E =======================================
.text$x:000018F3
.text$x:000018F3
.text$x:000018F3 __unwindfunclet$??0CAddCommon@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$2 proc near
.text$x:000018F3                                         ; DATA XREF: .xdata$x:00001A20o
.text$x:000018F3                 mov     ecx, [ebp-10h]
.text$x:000018F6                 add     ecx, 50h ; 'P'
.text$x:000018F9                 jmp     ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text$x:000018F9 __unwindfunclet$??0CAddCommon@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$2 endp
.text$x:000018F9
.text$x:000018FE
.text$x:000018FE ; =============== S U B R O U T I N E =======================================
.text$x:000018FE
.text$x:000018FE
.text$x:000018FE __ehhandler$??0CAddCommon@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z proc near
.text$x:000018FE                                         ; DATA XREF: NArchive::NZip::CAddCommon::CAddCommon(NArchive::NZip::CCompressionMethodMode const &)+5o
.text$x:000018FE
.text$x:000018FE arg_4           = dword ptr  8
.text$x:000018FE
.text$x:000018FE                 mov     edx, [esp+arg_4]
.text$x:00001902                 lea     eax, [edx+0Ch]
.text$x:00001905                 mov     ecx, [edx-8]
.text$x:00001908                 xor     ecx, eax
.text$x:0000190A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000190F                 mov     eax, offset __ehfuncinfo$??0CAddCommon@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z
.text$x:00001914                 jmp     ___CxxFrameHandler3
.text$x:00001914 __ehhandler$??0CAddCommon@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z endp
.text$x:00001914
.text$x:00001919
.text$x:00001919 ; =============== S U B R O U T I N E =======================================
.text$x:00001919
.text$x:00001919
.text$x:00001919 __unwindfunclet$??1CAddCommon@NZip@NArchive@@QAE@XZ$0 proc near
.text$x:00001919                                         ; DATA XREF: .xdata$x:00001A4Co
.text$x:00001919                 mov     ecx, [ebp-10h]  ; this
.text$x:0000191C                 jmp     ??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CCompressionMethodMode::~CCompressionMethodMode(void)
.text$x:0000191C __unwindfunclet$??1CAddCommon@NZip@NArchive@@QAE@XZ$0 endp
.text$x:0000191C
.text$x:00001921
.text$x:00001921 ; =============== S U B R O U T I N E =======================================
.text$x:00001921
.text$x:00001921
.text$x:00001921 __unwindfunclet$??1CAddCommon@NZip@NArchive@@QAE@XZ$1 proc near
.text$x:00001921                                         ; DATA XREF: .xdata$x:00001A54o
.text$x:00001921                 mov     ecx, [ebp-10h]
.text$x:00001924                 add     ecx, 4Ch ; 'L'
.text$x:00001927                 jmp     ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text$x:00001927 __unwindfunclet$??1CAddCommon@NZip@NArchive@@QAE@XZ$1 endp
.text$x:00001927
.text$x:0000192C
.text$x:0000192C ; =============== S U B R O U T I N E =======================================
.text$x:0000192C
.text$x:0000192C
.text$x:0000192C __unwindfunclet$??1CAddCommon@NZip@NArchive@@QAE@XZ$2 proc near
.text$x:0000192C                                         ; DATA XREF: .xdata$x:00001A5Co
.text$x:0000192C                 mov     ecx, [ebp-10h]
.text$x:0000192F                 add     ecx, 50h ; 'P'
.text$x:00001932                 jmp     ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text$x:00001932 __unwindfunclet$??1CAddCommon@NZip@NArchive@@QAE@XZ$2 endp
.text$x:00001932
.text$x:00001937
.text$x:00001937 ; =============== S U B R O U T I N E =======================================
.text$x:00001937
.text$x:00001937
.text$x:00001937 __ehhandler$??1CAddCommon@NZip@NArchive@@QAE@XZ proc near
.text$x:00001937                                         ; DATA XREF: NArchive::NZip::CAddCommon::~CAddCommon(void)+5o
.text$x:00001937
.text$x:00001937 arg_4           = dword ptr  8
.text$x:00001937
.text$x:00001937                 mov     edx, [esp+arg_4]
.text$x:0000193B                 lea     eax, [edx+0Ch]
.text$x:0000193E                 mov     ecx, [edx-8]
.text$x:00001941                 xor     ecx, eax
.text$x:00001943                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001948                 mov     eax, offset __ehfuncinfo$??1CAddCommon@NZip@NArchive@@QAE@XZ
.text$x:0000194D                 jmp     ___CxxFrameHandler3
.text$x:0000194D __ehhandler$??1CAddCommon@NZip@NArchive@@QAE@XZ endp
.text$x:0000194D
.text$x:00001952
.text$x:00001952 ; =============== S U B R O U T I N E =======================================
.text$x:00001952
.text$x:00001952
.text$x:00001952 __unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$0 proc near
.text$x:00001952                                         ; DATA XREF: .xdata$x:00001AACo
.text$x:00001952                 lea     ecx, [ebp-1Ch]
.text$x:00001955                 jmp     ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text$x:00001955 __unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$0 endp
.text$x:00001955
.text$x:0000195A
.text$x:0000195A ; =============== S U B R O U T I N E =======================================
.text$x:0000195A
.text$x:0000195A
.text$x:0000195A __unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$1 proc near
.text$x:0000195A                                         ; DATA XREF: .xdata$x:00001AB4o
.text$x:0000195A                 lea     ecx, [ebp-28h]
.text$x:0000195D                 jmp     ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text$x:0000195D __unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$1 endp
.text$x:0000195D
.text$x:00001962
.text$x:00001962 ; =============== S U B R O U T I N E =======================================
.text$x:00001962
.text$x:00001962
.text$x:00001962 __unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$2 proc near
.text$x:00001962                                         ; DATA XREF: .xdata$x:00001ABCo
.text$x:00001962                 mov     eax, [ebp-0D4h]
.text$x:00001968                 push    eax             ; void *
.text$x:00001969                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000196E                 pop     ecx
.text$x:0000196F                 retn
.text$x:0000196F __unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$2 endp
.text$x:0000196F
.text$x:00001970
.text$x:00001970 ; =============== S U B R O U T I N E =======================================
.text$x:00001970
.text$x:00001970
.text$x:00001970 __unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$3 proc near
.text$x:00001970                                         ; DATA XREF: .xdata$x:00001AC4o
.text$x:00001970                 lea     ecx, [ebp-48h]  ; this
.text$x:00001973                 jmp     ??1C_OutStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_OutStream_Releaser::~C_OutStream_Releaser(void)
.text$x:00001973 __unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$3 endp
.text$x:00001973
.text$x:00001978
.text$x:00001978 ; =============== S U B R O U T I N E =======================================
.text$x:00001978
.text$x:00001978
.text$x:00001978 __unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$4 proc near
.text$x:00001978                                         ; DATA XREF: .xdata$x:00001ACCo
.text$x:00001978                 mov     eax, [ebp-0ECh]
.text$x:0000197E                 push    eax             ; void *
.text$x:0000197F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00001984                 pop     ecx
.text$x:00001985                 retn
.text$x:00001985 __unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$4 endp
.text$x:00001985
.text$x:00001986
.text$x:00001986 ; =============== S U B R O U T I N E =======================================
.text$x:00001986
.text$x:00001986
.text$x:00001986 __unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$5 proc near
.text$x:00001986                                         ; DATA XREF: .xdata$x:00001AD4o
.text$x:00001986                 mov     eax, [ebp-0F4h]
.text$x:0000198C                 push    eax             ; void *
.text$x:0000198D                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00001992                 pop     ecx
.text$x:00001993                 retn
.text$x:00001993 __unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$5 endp
.text$x:00001993
.text$x:00001994
.text$x:00001994 ; =============== S U B R O U T I N E =======================================
.text$x:00001994
.text$x:00001994
.text$x:00001994 __unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$6 proc near
.text$x:00001994                                         ; DATA XREF: .xdata$x:00001ADCo
.text$x:00001994                 mov     eax, [ebp-104h]
.text$x:0000199A                 push    eax             ; void *
.text$x:0000199B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000019A0                 pop     ecx
.text$x:000019A1                 retn
.text$x:000019A1 __unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$6 endp
.text$x:000019A1
.text$x:000019A2
.text$x:000019A2 ; =============== S U B R O U T I N E =======================================
.text$x:000019A2
.text$x:000019A2
.text$x:000019A2 __unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$7 proc near
.text$x:000019A2                                         ; DATA XREF: .xdata$x:00001AE4o
.text$x:000019A2                 mov     eax, [ebp-120h]
.text$x:000019A8                 push    eax             ; void *
.text$x:000019A9                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000019AE                 pop     ecx
.text$x:000019AF                 retn
.text$x:000019AF __unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$7 endp
.text$x:000019AF
.text$x:000019B0
.text$x:000019B0 ; =============== S U B R O U T I N E =======================================
.text$x:000019B0
.text$x:000019B0
.text$x:000019B0 __unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$8 proc near
.text$x:000019B0                                         ; DATA XREF: .xdata$x:00001AECo
.text$x:000019B0                 lea     ecx, [ebp-84h]
.text$x:000019B6                 jmp     ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text$x:000019B6 __unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$8 endp
.text$x:000019B6
.text$x:000019BB
.text$x:000019BB ; =============== S U B R O U T I N E =======================================
.text$x:000019BB
.text$x:000019BB
.text$x:000019BB __unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$9 proc near
.text$x:000019BB                                         ; DATA XREF: .xdata$x:00001AF4o
.text$x:000019BB                 mov     eax, [ebp-12Ch]
.text$x:000019C1                 push    eax             ; void *
.text$x:000019C2                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000019C7                 pop     ecx
.text$x:000019C8                 retn
.text$x:000019C8 __unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$9 endp
.text$x:000019C8
.text$x:000019C9
.text$x:000019C9 ; =============== S U B R O U T I N E =======================================
.text$x:000019C9
.text$x:000019C9
.text$x:000019C9 __unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$10 proc near
.text$x:000019C9                                         ; DATA XREF: .xdata$x:00001AFCo
.text$x:000019C9                 mov     eax, [ebp-134h]
.text$x:000019CF                 push    eax             ; void *
.text$x:000019D0                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000019D5                 pop     ecx
.text$x:000019D6                 retn
.text$x:000019D6 __unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$10 endp
.text$x:000019D6
.text$x:000019D7
.text$x:000019D7 ; =============== S U B R O U T I N E =======================================
.text$x:000019D7
.text$x:000019D7
.text$x:000019D7 __unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$11 proc near
.text$x:000019D7                                         ; DATA XREF: .xdata$x:00001B04o
.text$x:000019D7                 lea     ecx, [ebp-0A8h]
.text$x:000019DD                 jmp     ??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::~CMyComPtr<ICompressSetCoderProperties>(void)
.text$x:000019DD __unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$11 endp
.text$x:000019DD
.text$x:000019E2
.text$x:000019E2 ; =============== S U B R O U T I N E =======================================
.text$x:000019E2
.text$x:000019E2
.text$x:000019E2 __unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$12 proc near
.text$x:000019E2                                         ; DATA XREF: .xdata$x:00001B0Co
.text$x:000019E2                 lea     ecx, [ebp-0B8h]
.text$x:000019E8                 jmp     ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text$x:000019E8 __unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$12 endp
.text$x:000019E8
.text$x:000019ED
.text$x:000019ED ; =============== S U B R O U T I N E =======================================
.text$x:000019ED
.text$x:000019ED
.text$x:000019ED __ehhandler$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z proc near
.text$x:000019ED                                         ; DATA XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+5o
.text$x:000019ED
.text$x:000019ED arg_4           = dword ptr  8
.text$x:000019ED
.text$x:000019ED                 mov     edx, [esp+arg_4]
.text$x:000019F1                 lea     eax, [edx+0Ch]
.text$x:000019F4                 mov     ecx, [edx-1A4h]
.text$x:000019FA                 xor     ecx, eax
.text$x:000019FC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001A01                 mov     eax, offset __ehfuncinfo$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z
.text$x:00001A06                 jmp     ___CxxFrameHandler3
.text$x:00001A06 __ehhandler$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z endp
.text$x:00001A06
.text$x:00001A06 ; ---------------------------------------------------------------------------
.text$x:00001A0B                 align 4
.text$x:00001A0B _text$x         ends
.text$x:00001A0B
.xdata$x:00001A0C ; ===========================================================================
.xdata$x:00001A0C
.xdata$x:00001A0C ; Segment type: Pure data
.xdata$x:00001A0C ; Segment permissions: Read
.xdata$x:00001A0C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00001A0C                 assume cs:_xdata$x
.xdata$x:00001A0C                 ;org 1A0Ch
.xdata$x:00001A0C __unwindtable$??0CAddCommon@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z db 0FFh
.xdata$x:00001A0C                                         ; DATA XREF: .xdata$x:00001A2Co
.xdata$x:00001A0D                 db 0FFh
.xdata$x:00001A0E                 db 0FFh
.xdata$x:00001A0F                 db 0FFh
.xdata$x:00001A10                 dd offset __unwindfunclet$??0CAddCommon@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$0
.xdata$x:00001A14                 align 8
.xdata$x:00001A18                 dd offset __unwindfunclet$??0CAddCommon@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$1
.xdata$x:00001A1C                 db    1
.xdata$x:00001A1D                 db    0
.xdata$x:00001A1E                 db    0
.xdata$x:00001A1F                 db    0
.xdata$x:00001A20                 dd offset __unwindfunclet$??0CAddCommon@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$2
.xdata$x:00001A24 __ehfuncinfo$??0CAddCommon@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z db  22h ; "
.xdata$x:00001A24                                         ; DATA XREF: __ehhandler$??0CAddCommon@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z+11o
.xdata$x:00001A25                 db    5
.xdata$x:00001A26                 db  93h ; ô
.xdata$x:00001A27                 db  19h
.xdata$x:00001A28                 db    3
.xdata$x:00001A29                 db    0
.xdata$x:00001A2A                 db    0
.xdata$x:00001A2B                 db    0
.xdata$x:00001A2C                 dd offset __unwindtable$??0CAddCommon@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z
.xdata$x:00001A30                 db    0
.xdata$x:00001A31                 db    0
.xdata$x:00001A32                 db    0
.xdata$x:00001A33                 db    0
.xdata$x:00001A34                 db    0
.xdata$x:00001A35                 db    0
.xdata$x:00001A36                 db    0
.xdata$x:00001A37                 db    0
.xdata$x:00001A38                 db    0
.xdata$x:00001A39                 db    0
.xdata$x:00001A3A                 db    0
.xdata$x:00001A3B                 db    0
.xdata$x:00001A3C                 db    0
.xdata$x:00001A3D                 db    0
.xdata$x:00001A3E                 db    0
.xdata$x:00001A3F                 db    0
.xdata$x:00001A40                 db    0
.xdata$x:00001A41                 db    0
.xdata$x:00001A42                 db    0
.xdata$x:00001A43                 db    0
.xdata$x:00001A44                 db    1
.xdata$x:00001A45                 db    0
.xdata$x:00001A46                 db    0
.xdata$x:00001A47                 db    0
.xdata$x:00001A48 __unwindtable$??1CAddCommon@NZip@NArchive@@QAE@XZ db 0FFh
.xdata$x:00001A48                                         ; DATA XREF: .xdata$x:00001A68o
.xdata$x:00001A49                 db 0FFh
.xdata$x:00001A4A                 db 0FFh
.xdata$x:00001A4B                 db 0FFh
.xdata$x:00001A4C                 dd offset __unwindfunclet$??1CAddCommon@NZip@NArchive@@QAE@XZ$0
.xdata$x:00001A50                 db    0
.xdata$x:00001A51                 db    0
.xdata$x:00001A52                 db    0
.xdata$x:00001A53                 db    0
.xdata$x:00001A54                 dd offset __unwindfunclet$??1CAddCommon@NZip@NArchive@@QAE@XZ$1
.xdata$x:00001A58                 db    1
.xdata$x:00001A59                 db    0
.xdata$x:00001A5A                 db    0
.xdata$x:00001A5B                 db    0
.xdata$x:00001A5C                 dd offset __unwindfunclet$??1CAddCommon@NZip@NArchive@@QAE@XZ$2
.xdata$x:00001A60 __ehfuncinfo$??1CAddCommon@NZip@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00001A60                                         ; DATA XREF: __ehhandler$??1CAddCommon@NZip@NArchive@@QAE@XZ+11o
.xdata$x:00001A61                 db    5
.xdata$x:00001A62                 db  93h ; ô
.xdata$x:00001A63                 db  19h
.xdata$x:00001A64                 db    3
.xdata$x:00001A65                 db    0
.xdata$x:00001A66                 db    0
.xdata$x:00001A67                 db    0
.xdata$x:00001A68                 dd offset __unwindtable$??1CAddCommon@NZip@NArchive@@QAE@XZ
.xdata$x:00001A6C                 align 20h
.xdata$x:00001A80                 db    1
.xdata$x:00001A81                 db    0
.xdata$x:00001A82                 db    0
.xdata$x:00001A83                 db    0
.xdata$x:00001A84 __ehfuncinfo$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z db  22h ; "
.xdata$x:00001A84                                         ; DATA XREF: __ehhandler$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z+14o
.xdata$x:00001A85                 db    5
.xdata$x:00001A86                 db  93h ; ô
.xdata$x:00001A87                 db  19h
.xdata$x:00001A88                 db  0Dh
.xdata$x:00001A89                 db    0
.xdata$x:00001A8A                 db    0
.xdata$x:00001A8B                 db    0
.xdata$x:00001A8C                 dd offset __unwindtable$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z
.xdata$x:00001A90                 db    0
.xdata$x:00001A91                 db    0
.xdata$x:00001A92                 db    0
.xdata$x:00001A93                 db    0
.xdata$x:00001A94                 db    0
.xdata$x:00001A95                 db    0
.xdata$x:00001A96                 db    0
.xdata$x:00001A97                 db    0
.xdata$x:00001A98                 db    0
.xdata$x:00001A99                 db    0
.xdata$x:00001A9A                 db    0
.xdata$x:00001A9B                 db    0
.xdata$x:00001A9C                 db    0
.xdata$x:00001A9D                 db    0
.xdata$x:00001A9E                 db    0
.xdata$x:00001A9F                 db    0
.xdata$x:00001AA0                 db    0
.xdata$x:00001AA1                 db    0
.xdata$x:00001AA2                 db    0
.xdata$x:00001AA3                 db    0
.xdata$x:00001AA4                 db    1
.xdata$x:00001AA5                 db    0
.xdata$x:00001AA6                 db    0
.xdata$x:00001AA7                 db    0
.xdata$x:00001AA8 __unwindtable$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z db 0FFh
.xdata$x:00001AA8                                         ; DATA XREF: .xdata$x:00001A8Co
.xdata$x:00001AA9                 db 0FFh
.xdata$x:00001AAA                 db 0FFh
.xdata$x:00001AAB                 db 0FFh
.xdata$x:00001AAC                 dd offset __unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$0
.xdata$x:00001AB0                 db    0
.xdata$x:00001AB1                 db    0
.xdata$x:00001AB2                 db    0
.xdata$x:00001AB3                 db    0
.xdata$x:00001AB4                 dd offset __unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$1
.xdata$x:00001AB8                 db    1
.xdata$x:00001AB9                 db    0
.xdata$x:00001ABA                 db    0
.xdata$x:00001ABB                 db    0
.xdata$x:00001ABC                 dd offset __unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$2
.xdata$x:00001AC0                 db    0
.xdata$x:00001AC1                 db    0
.xdata$x:00001AC2                 db    0
.xdata$x:00001AC3                 db    0
.xdata$x:00001AC4                 dd offset __unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$3
.xdata$x:00001AC8                 db    3
.xdata$x:00001AC9                 db    0
.xdata$x:00001ACA                 db    0
.xdata$x:00001ACB                 db    0
.xdata$x:00001ACC                 dd offset __unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$4
.xdata$x:00001AD0                 db    3
.xdata$x:00001AD1                 db    0
.xdata$x:00001AD2                 db    0
.xdata$x:00001AD3                 db    0
.xdata$x:00001AD4                 dd offset __unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$5
.xdata$x:00001AD8                 db    3
.xdata$x:00001AD9                 db    0
.xdata$x:00001ADA                 db    0
.xdata$x:00001ADB                 db    0
.xdata$x:00001ADC                 dd offset __unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$6
.xdata$x:00001AE0                 db    3
.xdata$x:00001AE1                 db    0
.xdata$x:00001AE2                 db    0
.xdata$x:00001AE3                 db    0
.xdata$x:00001AE4                 dd offset __unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$7
.xdata$x:00001AE8                 db    3
.xdata$x:00001AE9                 db    0
.xdata$x:00001AEA                 db    0
.xdata$x:00001AEB                 db    0
.xdata$x:00001AEC                 dd offset __unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$8
.xdata$x:00001AF0                 db    3
.xdata$x:00001AF1                 db    0
.xdata$x:00001AF2                 db    0
.xdata$x:00001AF3                 db    0
.xdata$x:00001AF4                 dd offset __unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$9
.xdata$x:00001AF8                 db    3
.xdata$x:00001AF9                 db    0
.xdata$x:00001AFA                 db    0
.xdata$x:00001AFB                 db    0
.xdata$x:00001AFC                 dd offset __unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$10
.xdata$x:00001B00                 db    3
.xdata$x:00001B01                 db    0
.xdata$x:00001B02                 db    0
.xdata$x:00001B03                 db    0
.xdata$x:00001B04                 dd offset __unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$11
.xdata$x:00001B08                 db    3
.xdata$x:00001B09                 db    0
.xdata$x:00001B0A                 db    0
.xdata$x:00001B0B                 db    0
.xdata$x:00001B0C                 dd offset __unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$12
.xdata$x:00001B0C _xdata$x        ends
.xdata$x:00001B0C
.text:00001B10 ; ===========================================================================
.text:00001B10
.text:00001B10 ; Segment type: Pure code
.text:00001B10 ; Segment permissions: Read/Execute
.text:00001B10 _text           segment para public 'CODE' use32
.text:00001B10                 assume cs:_text
.text:00001B10                 ;org 1B10h
.text:00001B10 ; COMDAT (pick any)
.text:00001B10                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001B10
.text:00001B10 ; =============== S U B R O U T I N E =======================================
.text:00001B10
.text:00001B10 ; Attributes: bp-based frame
.text:00001B10
.text:00001B10 ; _DWORD __thiscall NArchive::NZip::CCompressionMethodMode::CCompressionMethodMode(NArchive::NZip::CCompressionMethodMode *this, const struct NArchive::NZip::CCompressionMethodMode *)
.text:00001B10                 public ??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z
.text:00001B10 ??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z proc near
.text:00001B10                                         ; CODE XREF: NArchive::NZip::CAddCommon::CAddCommon(NArchive::NZip::CCompressionMethodMode const &)+34p
.text:00001B10
.text:00001B10 var_10          = dword ptr -10h
.text:00001B10 var_C           = dword ptr -0Ch
.text:00001B10 var_4           = dword ptr -4
.text:00001B10 arg_0           = dword ptr  8
.text:00001B10
.text:00001B10                 push    ebp
.text:00001B11                 mov     ebp, esp
.text:00001B13                 push    0FFFFFFFFh
.text:00001B15                 push    offset __ehhandler$??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z
.text:00001B1A                 mov     eax, large fs:0
.text:00001B20                 push    eax
.text:00001B21                 push    ecx
.text:00001B22                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00001B29                 mov     eax, dword ptr ds:___security_cookie
.text:00001B2E                 xor     eax, ebp
.text:00001B30                 push    eax
.text:00001B31                 lea     eax, [ebp+var_C]
.text:00001B34                 mov     large fs:0, eax
.text:00001B3A                 mov     [ebp+var_10], ecx
.text:00001B3D                 mov     eax, [ebp+arg_0]
.text:00001B40                 push    eax             ; struct NArchive::NZip::CBaseProps *
.text:00001B41                 mov     ecx, [ebp+var_10] ; this
.text:00001B44                 call    ??0CBaseProps@NZip@NArchive@@QAE@ABU012@@Z ; NArchive::NZip::CBaseProps::CBaseProps(NArchive::NZip::CBaseProps const &)
.text:00001B49                 mov     [ebp+var_4], 0
.text:00001B50                 mov     ecx, [ebp+arg_0]
.text:00001B53                 add     ecx, 18h
.text:00001B56                 push    ecx
.text:00001B57                 mov     ecx, [ebp+var_10]
.text:00001B5A                 add     ecx, 18h
.text:00001B5D                 call    ??0?$CRecordVector@E@@QAE@ABV0@@Z ; CRecordVector<uchar>::CRecordVector<uchar>(CRecordVector<uchar> const &)
.text:00001B62                 mov     byte ptr [ebp+var_4], 1
.text:00001B66                 mov     edx, [ebp+var_10]
.text:00001B69                 mov     eax, [ebp+arg_0]
.text:00001B6C                 mov     cl, [eax+24h]
.text:00001B6F                 mov     [edx+24h], cl
.text:00001B72                 mov     edx, [ebp+arg_0]
.text:00001B75                 add     edx, 28h ; '('
.text:00001B78                 push    edx
.text:00001B79                 mov     ecx, [ebp+var_10]
.text:00001B7C                 add     ecx, 28h ; '('
.text:00001B7F                 call    ??0AString@@QAE@ABV0@@Z ; AString::AString(AString const &)
.text:00001B84                 mov     eax, [ebp+var_10]
.text:00001B87                 mov     ecx, [ebp+arg_0]
.text:00001B8A                 mov     edx, [ecx+38h]
.text:00001B8D                 mov     [eax+38h], edx
.text:00001B90                 mov     ecx, [ecx+3Ch]
.text:00001B93                 mov     [eax+3Ch], ecx
.text:00001B96                 mov     edx, [ebp+var_10]
.text:00001B99                 mov     eax, [ebp+arg_0]
.text:00001B9C                 mov     cl, [eax+40h]
.text:00001B9F                 mov     [edx+40h], cl
.text:00001BA2                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001BA9                 mov     eax, [ebp+var_10]
.text:00001BAC                 mov     ecx, [ebp+var_C]
.text:00001BAF                 mov     large fs:0, ecx
.text:00001BB6                 pop     ecx
.text:00001BB7                 add     esp, 10h
.text:00001BBA                 cmp     ebp, esp
.text:00001BBC                 call    __RTC_CheckEsp
.text:00001BC1                 mov     esp, ebp
.text:00001BC3                 pop     ebp
.text:00001BC4                 retn    4
.text:00001BC4 ??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z endp
.text:00001BC4
.text:00001BC4 ; ---------------------------------------------------------------------------
.text:00001BC7                 align 4
.text:00001BC7 _text           ends
.text:00001BC7
.text$x:00001BC8 ; ===========================================================================
.text$x:00001BC8
.text$x:00001BC8 ; Segment type: Pure code
.text$x:00001BC8 ; Segment permissions: Read/Execute
.text$x:00001BC8 _text$x         segment para public 'CODE' use32
.text$x:00001BC8                 assume cs:_text$x
.text$x:00001BC8                 ;org 1BC8h
.text$x:00001BC8 ; COMDAT (pick associative to section at 1B10)
.text$x:00001BC8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00001BC8
.text$x:00001BC8 ; =============== S U B R O U T I N E =======================================
.text$x:00001BC8
.text$x:00001BC8
.text$x:00001BC8 __unwindfunclet$??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z$0 proc near
.text$x:00001BC8                                         ; DATA XREF: .xdata$x:00001BFCo
.text$x:00001BC8                 mov     ecx, [ebp-10h]  ; this
.text$x:00001BCB                 jmp     ??1CBaseProps@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CBaseProps::~CBaseProps(void)
.text$x:00001BCB __unwindfunclet$??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z$0 endp
.text$x:00001BCB
.text$x:00001BD0
.text$x:00001BD0 ; =============== S U B R O U T I N E =======================================
.text$x:00001BD0
.text$x:00001BD0
.text$x:00001BD0 __unwindfunclet$??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z$1 proc near
.text$x:00001BD0                                         ; DATA XREF: .xdata$x:00001C04o
.text$x:00001BD0                 mov     ecx, [ebp-10h]
.text$x:00001BD3                 add     ecx, 18h
.text$x:00001BD6                 jmp     ??1?$CRecordVector@E@@QAE@XZ ; CRecordVector<uchar>::~CRecordVector<uchar>(void)
.text$x:00001BD6 __unwindfunclet$??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z$1 endp
.text$x:00001BD6
.text$x:00001BDB
.text$x:00001BDB ; =============== S U B R O U T I N E =======================================
.text$x:00001BDB
.text$x:00001BDB
.text$x:00001BDB __ehhandler$??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z proc near
.text$x:00001BDB                                         ; DATA XREF: NArchive::NZip::CCompressionMethodMode::CCompressionMethodMode(NArchive::NZip::CCompressionMethodMode const &)+5o
.text$x:00001BDB
.text$x:00001BDB arg_4           = dword ptr  8
.text$x:00001BDB
.text$x:00001BDB                 mov     edx, [esp+arg_4]
.text$x:00001BDF                 lea     eax, [edx+0Ch]
.text$x:00001BE2                 mov     ecx, [edx-8]
.text$x:00001BE5                 xor     ecx, eax
.text$x:00001BE7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001BEC                 mov     eax, offset __ehfuncinfo$??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z
.text$x:00001BF1                 jmp     ___CxxFrameHandler3
.text$x:00001BF1 __ehhandler$??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z endp
.text$x:00001BF1
.text$x:00001BF1 ; ---------------------------------------------------------------------------
.text$x:00001BF6                 align 4
.text$x:00001BF6 _text$x         ends
.text$x:00001BF6
.xdata$x:00001BF8 ; ===========================================================================
.xdata$x:00001BF8
.xdata$x:00001BF8 ; Segment type: Pure data
.xdata$x:00001BF8 ; Segment permissions: Read
.xdata$x:00001BF8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00001BF8                 assume cs:_xdata$x
.xdata$x:00001BF8                 ;org 1BF8h
.xdata$x:00001BF8 ; COMDAT (pick associative to section at 1B10)
.xdata$x:00001BF8 __unwindtable$??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z db 0FFh
.xdata$x:00001BF8                                         ; DATA XREF: .xdata$x:00001C10o
.xdata$x:00001BF9                 db 0FFh
.xdata$x:00001BFA                 db 0FFh
.xdata$x:00001BFB                 db 0FFh
.xdata$x:00001BFC                 dd offset __unwindfunclet$??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z$0
.xdata$x:00001C00                 db    0
.xdata$x:00001C01                 db    0
.xdata$x:00001C02                 db    0
.xdata$x:00001C03                 db    0
.xdata$x:00001C04                 dd offset __unwindfunclet$??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z$1
.xdata$x:00001C08 __ehfuncinfo$??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z db  22h ; "
.xdata$x:00001C08                                         ; DATA XREF: __ehhandler$??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z+11o
.xdata$x:00001C09                 db    5
.xdata$x:00001C0A                 db  93h ; ô
.xdata$x:00001C0B                 db  19h
.xdata$x:00001C0C                 db    2
.xdata$x:00001C0D                 db    0
.xdata$x:00001C0E                 db    0
.xdata$x:00001C0F                 db    0
.xdata$x:00001C10                 dd offset __unwindtable$??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z
.xdata$x:00001C14                 db    0
.xdata$x:00001C15                 db    0
.xdata$x:00001C16                 db    0
.xdata$x:00001C17                 db    0
.xdata$x:00001C18                 db    0
.xdata$x:00001C19                 db    0
.xdata$x:00001C1A                 db    0
.xdata$x:00001C1B                 db    0
.xdata$x:00001C1C                 db    0
.xdata$x:00001C1D                 db    0
.xdata$x:00001C1E                 db    0
.xdata$x:00001C1F                 db    0
.xdata$x:00001C20                 db    0
.xdata$x:00001C21                 db    0
.xdata$x:00001C22                 db    0
.xdata$x:00001C23                 db    0
.xdata$x:00001C24                 db    0
.xdata$x:00001C25                 db    0
.xdata$x:00001C26                 db    0
.xdata$x:00001C27                 db    0
.xdata$x:00001C28                 db    1
.xdata$x:00001C29                 db    0
.xdata$x:00001C2A                 db    0
.xdata$x:00001C2B                 db    0
.xdata$x:00001C2B _xdata$x        ends
.xdata$x:00001C2B
.text:00001C2C ; ===========================================================================
.text:00001C2C
.text:00001C2C ; Segment type: Pure code
.text:00001C2C ; Segment permissions: Read/Execute
.text:00001C2C _text           segment para public 'CODE' use32
.text:00001C2C                 assume cs:_text
.text:00001C2C                 ;org 1C2Ch
.text:00001C2C ; COMDAT (pick any)
.text:00001C2C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001C2C
.text:00001C2C ; =============== S U B R O U T I N E =======================================
.text:00001C2C
.text:00001C2C ; Attributes: bp-based frame
.text:00001C2C
.text:00001C2C ; _DWORD __thiscall NArchive::NZip::CBaseProps::~CBaseProps(NArchive::NZip::CBaseProps *__hidden this)
.text:00001C2C                 public ??1CBaseProps@NZip@NArchive@@QAE@XZ
.text:00001C2C ??1CBaseProps@NZip@NArchive@@QAE@XZ proc near
.text:00001C2C                                         ; CODE XREF: __unwindfunclet$??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z$0+3j
.text:00001C2C                                         ; NArchive::NZip::CCompressionMethodMode::~CCompressionMethodMode(void)+58p ...
.text:00001C2C
.text:00001C2C var_4           = dword ptr -4
.text:00001C2C
.text:00001C2C                 push    ebp
.text:00001C2D                 mov     ebp, esp
.text:00001C2F                 push    ecx
.text:00001C30                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001C37                 mov     [ebp+var_4], ecx
.text:00001C3A                 mov     ecx, [ebp+var_4] ; this
.text:00001C3D                 call    ??1CMethodProps@@QAE@XZ ; CMethodProps::~CMethodProps(void)
.text:00001C42                 add     esp, 4
.text:00001C45                 cmp     ebp, esp
.text:00001C47                 call    __RTC_CheckEsp
.text:00001C4C                 mov     esp, ebp
.text:00001C4E                 pop     ebp
.text:00001C4F                 retn
.text:00001C4F ??1CBaseProps@NZip@NArchive@@QAE@XZ endp
.text:00001C4F
.text:00001C4F _text           ends
.text:00001C4F
.text:00001C50 ; ===========================================================================
.text:00001C50
.text:00001C50 ; Segment type: Pure code
.text:00001C50 ; Segment permissions: Read/Execute
.text:00001C50 _text           segment para public 'CODE' use32
.text:00001C50                 assume cs:_text
.text:00001C50                 ;org 1C50h
.text:00001C50 ; COMDAT (pick any)
.text:00001C50                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001C50
.text:00001C50 ; =============== S U B R O U T I N E =======================================
.text:00001C50
.text:00001C50 ; Attributes: bp-based frame
.text:00001C50
.text:00001C50 ; _DWORD __thiscall CMethodProps::~CMethodProps(CMethodProps *__hidden this)
.text:00001C50                 public ??1CMethodProps@@QAE@XZ
.text:00001C50 ??1CMethodProps@@QAE@XZ proc near       ; CODE XREF: NArchive::NZip::CBaseProps::~CBaseProps(void)+11p
.text:00001C50
.text:00001C50 var_4           = dword ptr -4
.text:00001C50
.text:00001C50                 push    ebp
.text:00001C51                 mov     ebp, esp
.text:00001C53                 push    ecx
.text:00001C54                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001C5B                 mov     [ebp+var_4], ecx
.text:00001C5E                 mov     ecx, [ebp+var_4] ; this
.text:00001C61                 call    ??1CProps@@QAE@XZ ; CProps::~CProps(void)
.text:00001C66                 add     esp, 4
.text:00001C69                 cmp     ebp, esp
.text:00001C6B                 call    __RTC_CheckEsp
.text:00001C70                 mov     esp, ebp
.text:00001C72                 pop     ebp
.text:00001C73                 retn
.text:00001C73 ??1CMethodProps@@QAE@XZ endp
.text:00001C73
.text:00001C73 _text           ends
.text:00001C73
.text:00001C74 ; ===========================================================================
.text:00001C74
.text:00001C74 ; Segment type: Pure code
.text:00001C74 ; Segment permissions: Read/Execute
.text:00001C74 _text           segment para public 'CODE' use32
.text:00001C74                 assume cs:_text
.text:00001C74                 ;org 1C74h
.text:00001C74 ; COMDAT (pick any)
.text:00001C74                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001C74
.text:00001C74 ; =============== S U B R O U T I N E =======================================
.text:00001C74
.text:00001C74 ; Attributes: bp-based frame
.text:00001C74
.text:00001C74 ; _DWORD __thiscall CProps::~CProps(CProps *__hidden this)
.text:00001C74                 public ??1CProps@@QAE@XZ
.text:00001C74 ??1CProps@@QAE@XZ proc near             ; CODE XREF: CMethodProps::~CMethodProps(void)+11p
.text:00001C74
.text:00001C74 var_4           = dword ptr -4
.text:00001C74
.text:00001C74                 push    ebp
.text:00001C75                 mov     ebp, esp
.text:00001C77                 push    ecx
.text:00001C78                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001C7F                 mov     [ebp+var_4], ecx
.text:00001C82                 mov     ecx, [ebp+var_4]
.text:00001C85                 call    ??1?$CObjectVector@UCProp@@@@QAE@XZ ; CObjectVector<CProp>::~CObjectVector<CProp>(void)
.text:00001C8A                 add     esp, 4
.text:00001C8D                 cmp     ebp, esp
.text:00001C8F                 call    __RTC_CheckEsp
.text:00001C94                 mov     esp, ebp
.text:00001C96                 pop     ebp
.text:00001C97                 retn
.text:00001C97 ??1CProps@@QAE@XZ endp
.text:00001C97
.text:00001C97 _text           ends
.text:00001C97
.text:00001C98 ; ===========================================================================
.text:00001C98
.text:00001C98 ; Segment type: Pure code
.text:00001C98 ; Segment permissions: Read/Execute
.text:00001C98 _text           segment para public 'CODE' use32
.text:00001C98                 assume cs:_text
.text:00001C98                 ;org 1C98h
.text:00001C98 ; COMDAT (pick any)
.text:00001C98                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001C98
.text:00001C98 ; =============== S U B R O U T I N E =======================================
.text:00001C98
.text:00001C98 ; Attributes: bp-based frame
.text:00001C98
.text:00001C98 ; _DWORD __thiscall NArchive::NZip::CCompressionMethodMode::~CCompressionMethodMode(NArchive::NZip::CCompressionMethodMode *__hidden this)
.text:00001C98                 public ??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ
.text:00001C98 ??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ proc near
.text:00001C98                                         ; CODE XREF: NArchive::NZip::CAddCommon::~CAddCommon(void)+73p
.text:00001C98                                         ; __unwindfunclet$??0CAddCommon@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$0+3j ...
.text:00001C98
.text:00001C98 var_10          = dword ptr -10h
.text:00001C98 var_C           = dword ptr -0Ch
.text:00001C98 var_4           = dword ptr -4
.text:00001C98
.text:00001C98                 push    ebp
.text:00001C99                 mov     ebp, esp
.text:00001C9B                 push    0FFFFFFFFh
.text:00001C9D                 push    offset __ehhandler$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ
.text:00001CA2                 mov     eax, large fs:0
.text:00001CA8                 push    eax
.text:00001CA9                 push    ecx
.text:00001CAA                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00001CB1                 mov     eax, dword ptr ds:___security_cookie
.text:00001CB6                 xor     eax, ebp
.text:00001CB8                 push    eax
.text:00001CB9                 lea     eax, [ebp+var_C]
.text:00001CBC                 mov     large fs:0, eax
.text:00001CC2                 mov     [ebp+var_10], ecx
.text:00001CC5                 mov     [ebp+var_4], 1
.text:00001CCC                 mov     ecx, [ebp+var_10]
.text:00001CCF                 add     ecx, 28h ; '('  ; this
.text:00001CD2                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00001CD7                 mov     byte ptr [ebp+var_4], 0
.text:00001CDB                 mov     ecx, [ebp+var_10]
.text:00001CDE                 add     ecx, 18h
.text:00001CE1                 call    ??1?$CRecordVector@E@@QAE@XZ ; CRecordVector<uchar>::~CRecordVector<uchar>(void)
.text:00001CE6                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001CED                 mov     ecx, [ebp+var_10] ; this
.text:00001CF0                 call    ??1CBaseProps@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CBaseProps::~CBaseProps(void)
.text:00001CF5                 mov     ecx, [ebp+var_C]
.text:00001CF8                 mov     large fs:0, ecx
.text:00001CFF                 pop     ecx
.text:00001D00                 add     esp, 10h
.text:00001D03                 cmp     ebp, esp
.text:00001D05                 call    __RTC_CheckEsp
.text:00001D0A                 mov     esp, ebp
.text:00001D0C                 pop     ebp
.text:00001D0D                 retn
.text:00001D0D ??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ endp
.text:00001D0D
.text:00001D0D ; ---------------------------------------------------------------------------
.text:00001D0E                 align 10h
.text:00001D0E _text           ends
.text:00001D0E
.text$x:00001D10 ; ===========================================================================
.text$x:00001D10
.text$x:00001D10 ; Segment type: Pure code
.text$x:00001D10 ; Segment permissions: Read/Execute
.text$x:00001D10 _text$x         segment para public 'CODE' use32
.text$x:00001D10                 assume cs:_text$x
.text$x:00001D10                 ;org 1D10h
.text$x:00001D10 ; COMDAT (pick associative to section at 1C98)
.text$x:00001D10                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00001D10
.text$x:00001D10 ; =============== S U B R O U T I N E =======================================
.text$x:00001D10
.text$x:00001D10
.text$x:00001D10 __unwindfunclet$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ$0 proc near
.text$x:00001D10                                         ; DATA XREF: .xdata$x:00001D44o
.text$x:00001D10                 mov     ecx, [ebp-10h]  ; this
.text$x:00001D13                 jmp     ??1CBaseProps@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CBaseProps::~CBaseProps(void)
.text$x:00001D13 __unwindfunclet$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ$0 endp
.text$x:00001D13
.text$x:00001D18
.text$x:00001D18 ; =============== S U B R O U T I N E =======================================
.text$x:00001D18
.text$x:00001D18
.text$x:00001D18 __unwindfunclet$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ$1 proc near
.text$x:00001D18                                         ; DATA XREF: .xdata$x:00001D4Co
.text$x:00001D18                 mov     ecx, [ebp-10h]
.text$x:00001D1B                 add     ecx, 18h
.text$x:00001D1E                 jmp     ??1?$CRecordVector@E@@QAE@XZ ; CRecordVector<uchar>::~CRecordVector<uchar>(void)
.text$x:00001D1E __unwindfunclet$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ$1 endp
.text$x:00001D1E
.text$x:00001D23
.text$x:00001D23 ; =============== S U B R O U T I N E =======================================
.text$x:00001D23
.text$x:00001D23
.text$x:00001D23 __ehhandler$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ proc near
.text$x:00001D23                                         ; DATA XREF: NArchive::NZip::CCompressionMethodMode::~CCompressionMethodMode(void)+5o
.text$x:00001D23
.text$x:00001D23 arg_4           = dword ptr  8
.text$x:00001D23
.text$x:00001D23                 mov     edx, [esp+arg_4]
.text$x:00001D27                 lea     eax, [edx+0Ch]
.text$x:00001D2A                 mov     ecx, [edx-8]
.text$x:00001D2D                 xor     ecx, eax
.text$x:00001D2F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001D34                 mov     eax, offset __ehfuncinfo$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ
.text$x:00001D39                 jmp     ___CxxFrameHandler3
.text$x:00001D39 __ehhandler$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ endp
.text$x:00001D39
.text$x:00001D39 ; ---------------------------------------------------------------------------
.text$x:00001D3E                 align 10h
.text$x:00001D3E _text$x         ends
.text$x:00001D3E
.xdata$x:00001D40 ; ===========================================================================
.xdata$x:00001D40
.xdata$x:00001D40 ; Segment type: Pure data
.xdata$x:00001D40 ; Segment permissions: Read
.xdata$x:00001D40 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00001D40                 assume cs:_xdata$x
.xdata$x:00001D40                 ;org 1D40h
.xdata$x:00001D40 ; COMDAT (pick associative to section at 1C98)
.xdata$x:00001D40 __unwindtable$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ db 0FFh
.xdata$x:00001D40                                         ; DATA XREF: .xdata$x:00001D58o
.xdata$x:00001D41                 db 0FFh
.xdata$x:00001D42                 db 0FFh
.xdata$x:00001D43                 db 0FFh
.xdata$x:00001D44                 dd offset __unwindfunclet$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ$0
.xdata$x:00001D48                 db    0
.xdata$x:00001D49                 db    0
.xdata$x:00001D4A                 db    0
.xdata$x:00001D4B                 db    0
.xdata$x:00001D4C                 dd offset __unwindfunclet$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ$1
.xdata$x:00001D50 __ehfuncinfo$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00001D50                                         ; DATA XREF: __ehhandler$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ+11o
.xdata$x:00001D51                 db    5
.xdata$x:00001D52                 db  93h ; ô
.xdata$x:00001D53                 db  19h
.xdata$x:00001D54                 db    2
.xdata$x:00001D55                 db    0
.xdata$x:00001D56                 db    0
.xdata$x:00001D57                 db    0
.xdata$x:00001D58                 dd offset __unwindtable$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ
.xdata$x:00001D5C                 db    0
.xdata$x:00001D5D                 db    0
.xdata$x:00001D5E                 db    0
.xdata$x:00001D5F                 db    0
.xdata$x:00001D60                 db    0
.xdata$x:00001D61                 db    0
.xdata$x:00001D62                 db    0
.xdata$x:00001D63                 db    0
.xdata$x:00001D64                 db    0
.xdata$x:00001D65                 db    0
.xdata$x:00001D66                 db    0
.xdata$x:00001D67                 db    0
.xdata$x:00001D68                 db    0
.xdata$x:00001D69                 db    0
.xdata$x:00001D6A                 db    0
.xdata$x:00001D6B                 db    0
.xdata$x:00001D6C                 db    0
.xdata$x:00001D6D                 db    0
.xdata$x:00001D6E                 db    0
.xdata$x:00001D6F                 db    0
.xdata$x:00001D70                 db    1
.xdata$x:00001D71                 db    0
.xdata$x:00001D72                 db    0
.xdata$x:00001D73                 db    0
.xdata$x:00001D73 _xdata$x        ends
.xdata$x:00001D73
.text:00001D74 ; ===========================================================================
.text:00001D74
.text:00001D74 ; Segment type: Pure code
.text:00001D74 ; Segment permissions: Read/Execute
.text:00001D74 _text           segment para public 'CODE' use32
.text:00001D74                 assume cs:_text
.text:00001D74                 ;org 1D74h
.text:00001D74 ; COMDAT (pick any)
.text:00001D74                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001D74
.text:00001D74 ; =============== S U B R O U T I N E =======================================
.text:00001D74
.text:00001D74 ; Attributes: bp-based frame
.text:00001D74
.text:00001D74 ; _DWORD __thiscall AString::~AString(AString *__hidden this)
.text:00001D74                 public ??1AString@@QAE@XZ
.text:00001D74 ??1AString@@QAE@XZ proc near            ; CODE XREF: NArchive::NZip::CCompressionMethodMode::~CCompressionMethodMode(void)+3Ap
.text:00001D74
.text:00001D74 var_8           = dword ptr -8
.text:00001D74 var_4           = dword ptr -4
.text:00001D74
.text:00001D74                 push    ebp
.text:00001D75                 mov     ebp, esp
.text:00001D77                 sub     esp, 8
.text:00001D7A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001D81                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001D88                 mov     [ebp+var_4], ecx
.text:00001D8B                 mov     eax, [ebp+var_4]
.text:00001D8E                 mov     ecx, [eax]
.text:00001D90                 mov     [ebp+var_8], ecx
.text:00001D93                 mov     edx, [ebp+var_8]
.text:00001D96                 push    edx             ; void *
.text:00001D97                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00001D9C                 add     esp, 4
.text:00001D9F                 add     esp, 8
.text:00001DA2                 cmp     ebp, esp
.text:00001DA4                 call    __RTC_CheckEsp
.text:00001DA9                 mov     esp, ebp
.text:00001DAB                 pop     ebp
.text:00001DAC                 retn
.text:00001DAC ??1AString@@QAE@XZ endp
.text:00001DAC
.text:00001DAC ; ---------------------------------------------------------------------------
.text:00001DAD                 align 10h
.text:00001DAD _text           ends
.text:00001DAD
.text:00001DB0 ; ===========================================================================
.text:00001DB0
.text:00001DB0 ; Segment type: Pure code
.text:00001DB0 ; Segment permissions: Read/Execute
.text:00001DB0 _text           segment para public 'CODE' use32
.text:00001DB0                 assume cs:_text
.text:00001DB0                 ;org 1DB0h
.text:00001DB0 ; COMDAT (pick any)
.text:00001DB0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001DB0
.text:00001DB0 ; =============== S U B R O U T I N E =======================================
.text:00001DB0
.text:00001DB0 ; Attributes: bp-based frame
.text:00001DB0
.text:00001DB0 ; _DWORD __thiscall NArchive::NZip::CBaseProps::CBaseProps(NArchive::NZip::CBaseProps *this, const struct NArchive::NZip::CBaseProps *)
.text:00001DB0                 public ??0CBaseProps@NZip@NArchive@@QAE@ABU012@@Z
.text:00001DB0 ??0CBaseProps@NZip@NArchive@@QAE@ABU012@@Z proc near
.text:00001DB0                                         ; CODE XREF: NArchive::NZip::CCompressionMethodMode::CCompressionMethodMode(NArchive::NZip::CCompressionMethodMode const &)+34p
.text:00001DB0
.text:00001DB0 var_4           = dword ptr -4
.text:00001DB0 arg_0           = dword ptr  8
.text:00001DB0
.text:00001DB0                 push    ebp
.text:00001DB1                 mov     ebp, esp
.text:00001DB3                 push    ecx
.text:00001DB4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001DBB                 mov     [ebp+var_4], ecx
.text:00001DBE                 mov     eax, [ebp+arg_0]
.text:00001DC1                 push    eax             ; struct CMethodProps *
.text:00001DC2                 mov     ecx, [ebp+var_4] ; this
.text:00001DC5                 call    ??0CMethodProps@@QAE@ABV0@@Z ; CMethodProps::CMethodProps(CMethodProps const &)
.text:00001DCA                 mov     ecx, [ebp+var_4]
.text:00001DCD                 mov     edx, [ebp+arg_0]
.text:00001DD0                 mov     eax, [edx+0Ch]
.text:00001DD3                 mov     [ecx+0Ch], eax
.text:00001DD6                 mov     ecx, [ebp+var_4]
.text:00001DD9                 mov     edx, [ebp+arg_0]
.text:00001DDC                 mov     eax, [edx+10h]
.text:00001DDF                 mov     [ecx+10h], eax
.text:00001DE2                 mov     ecx, [ebp+var_4]
.text:00001DE5                 mov     edx, [ebp+arg_0]
.text:00001DE8                 mov     al, [edx+14h]
.text:00001DEB                 mov     [ecx+14h], al
.text:00001DEE                 mov     ecx, [ebp+var_4]
.text:00001DF1                 mov     edx, [ebp+arg_0]
.text:00001DF4                 mov     al, [edx+15h]
.text:00001DF7                 mov     [ecx+15h], al
.text:00001DFA                 mov     ecx, [ebp+var_4]
.text:00001DFD                 mov     edx, [ebp+arg_0]
.text:00001E00                 mov     al, [edx+16h]
.text:00001E03                 mov     [ecx+16h], al
.text:00001E06                 mov     eax, [ebp+var_4]
.text:00001E09                 add     esp, 4
.text:00001E0C                 cmp     ebp, esp
.text:00001E0E                 call    __RTC_CheckEsp
.text:00001E13                 mov     esp, ebp
.text:00001E15                 pop     ebp
.text:00001E16                 retn    4
.text:00001E16 ??0CBaseProps@NZip@NArchive@@QAE@ABU012@@Z endp
.text:00001E16
.text:00001E16 ; ---------------------------------------------------------------------------
.text:00001E19                 align 4
.text:00001E19 _text           ends
.text:00001E19
.text:00001E1C ; ===========================================================================
.text:00001E1C
.text:00001E1C ; Segment type: Pure code
.text:00001E1C ; Segment permissions: Read/Execute
.text:00001E1C _text           segment para public 'CODE' use32
.text:00001E1C                 assume cs:_text
.text:00001E1C                 ;org 1E1Ch
.text:00001E1C ; COMDAT (pick any)
.text:00001E1C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001E1C
.text:00001E1C ; =============== S U B R O U T I N E =======================================
.text:00001E1C
.text:00001E1C ; Attributes: bp-based frame
.text:00001E1C
.text:00001E1C ; _DWORD __thiscall CMethodProps::CMethodProps(CMethodProps *this, const struct CMethodProps *)
.text:00001E1C                 public ??0CMethodProps@@QAE@ABV0@@Z
.text:00001E1C ??0CMethodProps@@QAE@ABV0@@Z proc near  ; CODE XREF: NArchive::NZip::CBaseProps::CBaseProps(NArchive::NZip::CBaseProps const &)+15p
.text:00001E1C
.text:00001E1C var_4           = dword ptr -4
.text:00001E1C arg_0           = dword ptr  8
.text:00001E1C
.text:00001E1C                 push    ebp
.text:00001E1D                 mov     ebp, esp
.text:00001E1F                 push    ecx
.text:00001E20                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001E27                 mov     [ebp+var_4], ecx
.text:00001E2A                 mov     eax, [ebp+arg_0]
.text:00001E2D                 push    eax
.text:00001E2E                 mov     ecx, [ebp+var_4]
.text:00001E31                 call    ??0CProps@@QAE@ABU0@@Z ; CProps::CProps(CProps const &)
.text:00001E36                 mov     eax, [ebp+var_4]
.text:00001E39                 add     esp, 4
.text:00001E3C                 cmp     ebp, esp
.text:00001E3E                 call    __RTC_CheckEsp
.text:00001E43                 mov     esp, ebp
.text:00001E45                 pop     ebp
.text:00001E46                 retn    4
.text:00001E46 ??0CMethodProps@@QAE@ABV0@@Z endp
.text:00001E46
.text:00001E46 ; ---------------------------------------------------------------------------
.text:00001E49                 align 4
.text:00001E49 _text           ends
.text:00001E49
.text:00001E4C ; ===========================================================================
.text:00001E4C
.text:00001E4C ; Segment type: Pure code
.text:00001E4C ; Segment permissions: Read/Execute
.text:00001E4C _text           segment para public 'CODE' use32
.text:00001E4C                 assume cs:_text
.text:00001E4C                 ;org 1E4Ch
.text:00001E4C ; COMDAT (pick any)
.text:00001E4C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001E4C
.text:00001E4C ; =============== S U B R O U T I N E =======================================
.text:00001E4C
.text:00001E4C ; Attributes: bp-based frame
.text:00001E4C
.text:00001E4C ; public: __thiscall CProps::CProps(struct CProps const &)
.text:00001E4C                 public ??0CProps@@QAE@ABU0@@Z
.text:00001E4C ??0CProps@@QAE@ABU0@@Z proc near        ; CODE XREF: CMethodProps::CMethodProps(CMethodProps const &)+15p
.text:00001E4C
.text:00001E4C var_4           = dword ptr -4
.text:00001E4C arg_0           = dword ptr  8
.text:00001E4C
.text:00001E4C                 push    ebp
.text:00001E4D                 mov     ebp, esp
.text:00001E4F                 push    ecx
.text:00001E50                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001E57                 mov     [ebp+var_4], ecx
.text:00001E5A                 mov     eax, [ebp+arg_0]
.text:00001E5D                 push    eax
.text:00001E5E                 mov     ecx, [ebp+var_4]
.text:00001E61                 call    ??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z ; CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)
.text:00001E66                 mov     eax, [ebp+var_4]
.text:00001E69                 add     esp, 4
.text:00001E6C                 cmp     ebp, esp
.text:00001E6E                 call    __RTC_CheckEsp
.text:00001E73                 mov     esp, ebp
.text:00001E75                 pop     ebp
.text:00001E76                 retn    4
.text:00001E76 ??0CProps@@QAE@ABU0@@Z endp
.text:00001E76
.text:00001E76 ; ---------------------------------------------------------------------------
.text:00001E79                 align 4
.text:00001E79 _text           ends
.text:00001E79
.text:00001E7C ; ===========================================================================
.text:00001E7C
.text:00001E7C ; Segment type: Pure code
.text:00001E7C ; Segment permissions: Read/Execute
.text:00001E7C _text           segment para public 'CODE' use32
.text:00001E7C                 assume cs:_text
.text:00001E7C                 ;org 1E7Ch
.text:00001E7C ; COMDAT (pick any)
.text:00001E7C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001E7C
.text:00001E7C ; =============== S U B R O U T I N E =======================================
.text:00001E7C
.text:00001E7C ; Attributes: bp-based frame
.text:00001E7C
.text:00001E7C ; unsigned int __thiscall AString::Len(AString *__hidden this)
.text:00001E7C                 public ?Len@AString@@QBEIXZ
.text:00001E7C ?Len@AString@@QBEIXZ proc near          ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+454p
.text:00001E7C                                         ; NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+59Bp
.text:00001E7C
.text:00001E7C var_4           = dword ptr -4
.text:00001E7C
.text:00001E7C                 push    ebp
.text:00001E7D                 mov     ebp, esp
.text:00001E7F                 push    ecx
.text:00001E80                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001E87                 mov     [ebp+var_4], ecx
.text:00001E8A                 mov     eax, [ebp+var_4]
.text:00001E8D                 mov     eax, [eax+4]
.text:00001E90                 mov     esp, ebp
.text:00001E92                 pop     ebp
.text:00001E93                 retn
.text:00001E93 ?Len@AString@@QBEIXZ endp
.text:00001E93
.text:00001E93 _text           ends
.text:00001E93
.text:00001E94 ; ===========================================================================
.text:00001E94
.text:00001E94 ; Segment type: Pure code
.text:00001E94 ; Segment permissions: Read/Execute
.text:00001E94 _text           segment para public 'CODE' use32
.text:00001E94                 assume cs:_text
.text:00001E94                 ;org 1E94h
.text:00001E94 ; COMDAT (pick any)
.text:00001E94                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001E94
.text:00001E94 ; =============== S U B R O U T I N E =======================================
.text:00001E94
.text:00001E94 ; Attributes: bp-based frame
.text:00001E94
.text:00001E94 ; public: __thiscall AString::operator char const *(void)const
.text:00001E94                 public ??BAString@@QBEPBDXZ
.text:00001E94 ??BAString@@QBEPBDXZ proc near          ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+462p
.text:00001E94                                         ; NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+5A9p
.text:00001E94
.text:00001E94 var_4           = dword ptr -4
.text:00001E94
.text:00001E94                 push    ebp
.text:00001E95                 mov     ebp, esp
.text:00001E97                 push    ecx
.text:00001E98                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001E9F                 mov     [ebp+var_4], ecx
.text:00001EA2                 mov     eax, [ebp+var_4]
.text:00001EA5                 mov     eax, [eax]
.text:00001EA7                 mov     esp, ebp
.text:00001EA9                 pop     ebp
.text:00001EAA                 retn
.text:00001EAA ??BAString@@QBEPBDXZ endp
.text:00001EAA
.text:00001EAA ; ---------------------------------------------------------------------------
.text:00001EAB                 align 4
.text:00001EAB _text           ends
.text:00001EAB
.text:00001EAC ; ===========================================================================
.text:00001EAC
.text:00001EAC ; Segment type: Pure code
.text:00001EAC ; Segment permissions: Read/Execute
.text:00001EAC _text           segment para public 'CODE' use32
.text:00001EAC                 assume cs:_text
.text:00001EAC                 ;org 1EACh
.text:00001EAC ; COMDAT (pick any)
.text:00001EAC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001EAC
.text:00001EAC ; =============== S U B R O U T I N E =======================================
.text:00001EAC
.text:00001EAC ; Attributes: bp-based frame
.text:00001EAC
.text:00001EAC ; void __thiscall CInStreamWithCRC::SetStream(CInStreamWithCRC *this, struct IInStream *)
.text:00001EAC                 public ?SetStream@CInStreamWithCRC@@QAEXPAUIInStream@@@Z
.text:00001EAC ?SetStream@CInStreamWithCRC@@QAEXPAUIInStream@@@Z proc near
.text:00001EAC                                         ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+10Ep
.text:00001EAC
.text:00001EAC var_4           = dword ptr -4
.text:00001EAC arg_0           = dword ptr  8
.text:00001EAC
.text:00001EAC                 push    ebp
.text:00001EAD                 mov     ebp, esp
.text:00001EAF                 push    ecx
.text:00001EB0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001EB7                 mov     [ebp+var_4], ecx
.text:00001EBA                 mov     eax, [ebp+arg_0]
.text:00001EBD                 push    eax
.text:00001EBE                 mov     ecx, [ebp+var_4]
.text:00001EC1                 add     ecx, 8
.text:00001EC4                 call    ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ; CMyComPtr<IInStream>::operator=(IInStream *)
.text:00001EC9                 add     esp, 4
.text:00001ECC                 cmp     ebp, esp
.text:00001ECE                 call    __RTC_CheckEsp
.text:00001ED3                 mov     esp, ebp
.text:00001ED5                 pop     ebp
.text:00001ED6                 retn    4
.text:00001ED6 ?SetStream@CInStreamWithCRC@@QAEXPAUIInStream@@@Z endp
.text:00001ED6
.text:00001ED6 ; ---------------------------------------------------------------------------
.text:00001ED9                 align 4
.text:00001ED9 _text           ends
.text:00001ED9
.text:00001EDC ; ===========================================================================
.text:00001EDC
.text:00001EDC ; Segment type: Pure code
.text:00001EDC ; Segment permissions: Read/Execute
.text:00001EDC _text           segment para public 'CODE' use32
.text:00001EDC                 assume cs:_text
.text:00001EDC                 ;org 1EDCh
.text:00001EDC ; COMDAT (pick any)
.text:00001EDC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001EDC
.text:00001EDC ; =============== S U B R O U T I N E =======================================
.text:00001EDC
.text:00001EDC ; Attributes: bp-based frame
.text:00001EDC
.text:00001EDC ; void __thiscall CInStreamWithCRC::Init(CInStreamWithCRC *__hidden this)
.text:00001EDC                 public ?Init@CInStreamWithCRC@@QAEXXZ
.text:00001EDC ?Init@CInStreamWithCRC@@QAEXXZ proc near
.text:00001EDC                                         ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+116p
.text:00001EDC
.text:00001EDC var_4           = dword ptr -4
.text:00001EDC
.text:00001EDC                 push    ebp
.text:00001EDD                 mov     ebp, esp
.text:00001EDF                 push    ecx
.text:00001EE0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001EE7                 mov     [ebp+var_4], ecx
.text:00001EEA                 mov     eax, [ebp+var_4]
.text:00001EED                 mov     dword ptr [eax+10h], 0
.text:00001EF4                 mov     dword ptr [eax+14h], 0
.text:00001EFB                 mov     ecx, [ebp+var_4]
.text:00001EFE                 mov     dword ptr [ecx+18h], 0FFFFFFFFh
.text:00001F05                 mov     esp, ebp
.text:00001F07                 pop     ebp
.text:00001F08                 retn
.text:00001F08 ?Init@CInStreamWithCRC@@QAEXXZ endp
.text:00001F08
.text:00001F08 ; ---------------------------------------------------------------------------
.text:00001F09                 align 4
.text:00001F09 _text           ends
.text:00001F09
.text:00001F0C ; ===========================================================================
.text:00001F0C
.text:00001F0C ; Segment type: Pure code
.text:00001F0C ; Segment permissions: Read/Execute
.text:00001F0C _text           segment para public 'CODE' use32
.text:00001F0C                 assume cs:_text
.text:00001F0C                 ;org 1F0Ch
.text:00001F0C ; COMDAT (pick any)
.text:00001F0C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001F0C
.text:00001F0C ; =============== S U B R O U T I N E =======================================
.text:00001F0C
.text:00001F0C ; Attributes: bp-based frame
.text:00001F0C
.text:00001F0C ; unsigned int __thiscall CInStreamWithCRC::GetCRC(CInStreamWithCRC *__hidden this)
.text:00001F0C                 public ?GetCRC@CInStreamWithCRC@@QBEIXZ
.text:00001F0C ?GetCRC@CInStreamWithCRC@@QBEIXZ proc near
.text:00001F0C                                         ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+E3Bp
.text:00001F0C
.text:00001F0C var_4           = dword ptr -4
.text:00001F0C
.text:00001F0C                 push    ebp
.text:00001F0D                 mov     ebp, esp
.text:00001F0F                 push    ecx
.text:00001F10                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001F17                 mov     [ebp+var_4], ecx
.text:00001F1A                 mov     eax, [ebp+var_4]
.text:00001F1D                 mov     eax, [eax+18h]
.text:00001F20                 xor     eax, 0FFFFFFFFh
.text:00001F23                 mov     esp, ebp
.text:00001F25                 pop     ebp
.text:00001F26                 retn
.text:00001F26 ?GetCRC@CInStreamWithCRC@@QBEIXZ endp
.text:00001F26
.text:00001F26 ; ---------------------------------------------------------------------------
.text:00001F27                 align 4
.text:00001F27 _text           ends
.text:00001F27
.text:00001F28 ; ===========================================================================
.text:00001F28
.text:00001F28 ; Segment type: Pure code
.text:00001F28 ; Segment permissions: Read/Execute
.text:00001F28 _text           segment para public 'CODE' use32
.text:00001F28                 assume cs:_text
.text:00001F28                 ;org 1F28h
.text:00001F28 ; COMDAT (pick any)
.text:00001F28                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001F28
.text:00001F28 ; =============== S U B R O U T I N E =======================================
.text:00001F28
.text:00001F28 ; Attributes: bp-based frame
.text:00001F28
.text:00001F28 ; unsigned __int64 __thiscall CInStreamWithCRC::GetSize(CInStreamWithCRC *__hidden this)
.text:00001F28                 public ?GetSize@CInStreamWithCRC@@QBE_KXZ
.text:00001F28 ?GetSize@CInStreamWithCRC@@QBE_KXZ proc near
.text:00001F28                                         ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+E49p
.text:00001F28
.text:00001F28 var_4           = dword ptr -4
.text:00001F28
.text:00001F28                 push    ebp
.text:00001F29                 mov     ebp, esp
.text:00001F2B                 push    ecx
.text:00001F2C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001F33                 mov     [ebp+var_4], ecx
.text:00001F36                 mov     ecx, [ebp+var_4]
.text:00001F39                 mov     eax, [ecx+10h]
.text:00001F3C                 mov     edx, [ecx+14h]
.text:00001F3F                 mov     esp, ebp
.text:00001F41                 pop     ebp
.text:00001F42                 retn
.text:00001F42 ?GetSize@CInStreamWithCRC@@QBE_KXZ endp
.text:00001F42
.text:00001F42 ; ---------------------------------------------------------------------------
.text:00001F43                 align 4
.text:00001F43 _text           ends
.text:00001F43
.text:00001F44 ; ===========================================================================
.text:00001F44
.text:00001F44 ; Segment type: Pure code
.text:00001F44 ; Segment permissions: Read/Execute
.text:00001F44 _text           segment para public 'CODE' use32
.text:00001F44                 assume cs:_text
.text:00001F44                 ;org 1F44h
.text:00001F44 ; COMDAT (pick any)
.text:00001F44                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001F44
.text:00001F44 ; =============== S U B R O U T I N E =======================================
.text:00001F44
.text:00001F44 ; Attributes: bp-based frame
.text:00001F44
.text:00001F44 ; _DWORD __thiscall CFilterCoder::C_OutStream_Releaser::C_OutStream_Releaser(CFilterCoder::C_OutStream_Releaser *__hidden this)
.text:00001F44                 public ??0C_OutStream_Releaser@CFilterCoder@@QAE@XZ
.text:00001F44 ??0C_OutStream_Releaser@CFilterCoder@@QAE@XZ proc near
.text:00001F44                                         ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+18Cp
.text:00001F44
.text:00001F44 var_4           = dword ptr -4
.text:00001F44
.text:00001F44                 push    ebp
.text:00001F45                 mov     ebp, esp
.text:00001F47                 push    ecx
.text:00001F48                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001F4F                 mov     [ebp+var_4], ecx
.text:00001F52                 mov     eax, [ebp+var_4]
.text:00001F55                 mov     dword ptr [eax], 0
.text:00001F5B                 mov     eax, [ebp+var_4]
.text:00001F5E                 mov     esp, ebp
.text:00001F60                 pop     ebp
.text:00001F61                 retn
.text:00001F61 ??0C_OutStream_Releaser@CFilterCoder@@QAE@XZ endp
.text:00001F61
.text:00001F61 ; ---------------------------------------------------------------------------
.text:00001F62                 align 4
.text:00001F62 _text           ends
.text:00001F62
.text:00001F64 ; ===========================================================================
.text:00001F64
.text:00001F64 ; Segment type: Pure code
.text:00001F64 ; Segment permissions: Read/Execute
.text:00001F64 _text           segment para public 'CODE' use32
.text:00001F64                 assume cs:_text
.text:00001F64                 ;org 1F64h
.text:00001F64 ; COMDAT (pick any)
.text:00001F64                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001F64
.text:00001F64 ; =============== S U B R O U T I N E =======================================
.text:00001F64
.text:00001F64 ; Attributes: bp-based frame
.text:00001F64
.text:00001F64 ; _DWORD __thiscall CFilterCoder::C_OutStream_Releaser::~C_OutStream_Releaser(CFilterCoder::C_OutStream_Releaser *__hidden this)
.text:00001F64                 public ??1C_OutStream_Releaser@CFilterCoder@@QAE@XZ
.text:00001F64 ??1C_OutStream_Releaser@CFilterCoder@@QAE@XZ proc near
.text:00001F64                                         ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+206p
.text:00001F64                                         ; NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+259p ...
.text:00001F64
.text:00001F64 var_4           = dword ptr -4
.text:00001F64
.text:00001F64                 push    ebp
.text:00001F65                 mov     ebp, esp
.text:00001F67                 push    ecx
.text:00001F68                 push    esi
.text:00001F69                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001F70                 mov     [ebp+var_4], ecx
.text:00001F73                 mov     eax, [ebp+var_4]
.text:00001F76                 cmp     dword ptr [eax], 0
.text:00001F79                 jz      short loc_1F9A
.text:00001F7B                 mov     ecx, [ebp+var_4]
.text:00001F7E                 mov     edx, [ecx]
.text:00001F80                 mov     eax, [ebp+var_4]
.text:00001F83                 mov     ecx, [eax]
.text:00001F85                 add     ecx, 14h
.text:00001F88                 mov     edx, [edx+14h]
.text:00001F8B                 mov     esi, esp
.text:00001F8D                 push    ecx
.text:00001F8E                 mov     eax, [edx+10h]
.text:00001F91                 call    eax
.text:00001F93                 cmp     esi, esp
.text:00001F95                 call    __RTC_CheckEsp
.text:00001F9A
.text:00001F9A loc_1F9A:                               ; CODE XREF: CFilterCoder::C_OutStream_Releaser::~C_OutStream_Releaser(void)+15j
.text:00001F9A                 pop     esi
.text:00001F9B                 add     esp, 4
.text:00001F9E                 cmp     ebp, esp
.text:00001FA0                 call    __RTC_CheckEsp
.text:00001FA5                 mov     esp, ebp
.text:00001FA7                 pop     ebp
.text:00001FA8                 retn
.text:00001FA8 ??1C_OutStream_Releaser@CFilterCoder@@QAE@XZ endp
.text:00001FA8
.text:00001FA8 ; ---------------------------------------------------------------------------
.text:00001FA9                 align 4
.text:00001FA9 _text           ends
.text:00001FA9
.text:00001FAC ; ===========================================================================
.text:00001FAC
.text:00001FAC ; Segment type: Pure code
.text:00001FAC ; Segment permissions: Read/Execute
.text:00001FAC _text           segment para public 'CODE' use32
.text:00001FAC                 assume cs:_text
.text:00001FAC                 ;org 1FACh
.text:00001FAC ; COMDAT (pick any)
.text:00001FAC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001FAC
.text:00001FAC ; =============== S U B R O U T I N E =======================================
.text:00001FAC
.text:00001FAC ; Attributes: bp-based frame
.text:00001FAC
.text:00001FAC ; _DWORD __thiscall NCompress::CCopyCoder::CCopyCoder(NCompress::CCopyCoder *__hidden this)
.text:00001FAC                 public ??0CCopyCoder@NCompress@@QAE@XZ
.text:00001FAC ??0CCopyCoder@NCompress@@QAE@XZ proc near
.text:00001FAC                                         ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+7E8p
.text:00001FAC
.text:00001FAC var_4           = dword ptr -4
.text:00001FAC
.text:00001FAC                 push    ebp
.text:00001FAD                 mov     ebp, esp
.text:00001FAF                 push    ecx
.text:00001FB0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001FB7                 mov     [ebp+var_4], ecx
.text:00001FBA                 mov     ecx, [ebp+var_4] ; this
.text:00001FBD                 call    ??0ICompressCoder@@QAE@XZ ; ICompressCoder::ICompressCoder(void)
.text:00001FC2                 mov     ecx, [ebp+var_4]
.text:00001FC5                 add     ecx, 4          ; this
.text:00001FC8                 call    ??0ICompressSetInStream@@QAE@XZ ; ICompressSetInStream::ICompressSetInStream(void)
.text:00001FCD                 mov     ecx, [ebp+var_4]
.text:00001FD0                 add     ecx, 8          ; this
.text:00001FD3                 call    ??0ISequentialInStream@@QAE@XZ ; ISequentialInStream::ISequentialInStream(void)
.text:00001FD8                 mov     ecx, [ebp+var_4]
.text:00001FDB                 add     ecx, 0Ch        ; this
.text:00001FDE                 call    ??0ICompressGetInStreamProcessedSize@@QAE@XZ ; ICompressGetInStreamProcessedSize::ICompressGetInStreamProcessedSize(void)
.text:00001FE3                 mov     ecx, [ebp+var_4]
.text:00001FE6                 add     ecx, 10h        ; this
.text:00001FE9                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00001FEE                 mov     eax, [ebp+var_4]
.text:00001FF1                 mov     dword ptr [eax], offset ??_7CCopyCoder@NCompress@@6BICompressCoder@@@ ; const NCompress::CCopyCoder::`vftable'{for `ICompressCoder'}
.text:00001FF7                 mov     ecx, [ebp+var_4]
.text:00001FFA                 mov     dword ptr [ecx+4], offset ??_7CCopyCoder@NCompress@@6BICompressSetInStream@@@ ; const NCompress::CCopyCoder::`vftable'{for `ICompressSetInStream'}
.text:00002001                 mov     edx, [ebp+var_4]
.text:00002004                 mov     dword ptr [edx+8], offset ??_7CCopyCoder@NCompress@@6BISequentialInStream@@@ ; const NCompress::CCopyCoder::`vftable'{for `ISequentialInStream'}
.text:0000200B                 mov     eax, [ebp+var_4]
.text:0000200E                 mov     dword ptr [eax+0Ch], offset ??_7CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ ; const NCompress::CCopyCoder::`vftable'{for `ICompressGetInStreamProcessedSize'}
.text:00002015                 mov     ecx, [ebp+var_4]
.text:00002018                 mov     dword ptr [ecx+14h], 0
.text:0000201F                 mov     ecx, [ebp+var_4]
.text:00002022                 add     ecx, 18h
.text:00002025                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(void)
.text:0000202A                 mov     edx, [ebp+var_4]
.text:0000202D                 mov     dword ptr [edx+20h], 0
.text:00002034                 mov     dword ptr [edx+24h], 0
.text:0000203B                 mov     eax, [ebp+var_4]
.text:0000203E                 add     esp, 4
.text:00002041                 cmp     ebp, esp
.text:00002043                 call    __RTC_CheckEsp
.text:00002048                 mov     esp, ebp
.text:0000204A                 pop     ebp
.text:0000204B                 retn
.text:0000204B ??0CCopyCoder@NCompress@@QAE@XZ endp
.text:0000204B
.text:0000204B _text           ends
.text:0000204B
.rdata:0000204C ; ===========================================================================
.rdata:0000204C
.rdata:0000204C ; Segment type: Pure data
.rdata:0000204C ; Segment permissions: Read
.rdata:0000204C _rdata          segment dword public 'DATA' use32
.rdata:0000204C                 assume cs:_rdata
.rdata:0000204C                 ;org 204Ch
.rdata:0000204C ; COMDAT (pick largest)
.rdata:0000204C                 dd offset ??_R4CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ICompressGetInStreamProcessedSize'}
.rdata:00002050                 public ??_7CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@
.rdata:00002050 ; const NCompress::CCopyCoder::`vftable'{for `ICompressGetInStreamProcessedSize'}
.rdata:00002050 ??_7CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ dd offset ?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z
.rdata:00002050                                         ; DATA XREF: NCompress::CCopyCoder::CCopyCoder(void)+62o
.rdata:00002050                                         ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{12}' (_GUID const &,void * *)
.rdata:00002054                 dd offset ?AddRef@CCopyCoder@NCompress@@WM@AGKXZ ; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{12}' (void)
.rdata:00002058                 dd offset ?Release@CCopyCoder@NCompress@@WM@AGKXZ ; [thunk]:NCompress::CCopyCoder::Release`adjustor{12}' (void)
.rdata:0000205C                 dd offset ?GetInStreamProcessedSize@CCopyCoder@NCompress@@UAGJPA_K@Z ; NCompress::CCopyCoder::GetInStreamProcessedSize(unsigned __int64 *)
.rdata:0000205C _rdata          ends
.rdata:0000205C
.rdata:00002060 ; ===========================================================================
.rdata:00002060
.rdata:00002060 ; Segment type: Pure data
.rdata:00002060 ; Segment permissions: Read
.rdata:00002060 _rdata          segment dword public 'DATA' use32
.rdata:00002060                 assume cs:_rdata
.rdata:00002060                 ;org 2060h
.rdata:00002060 ; COMDAT (pick largest)
.rdata:00002060                 dd offset ??_R4CCopyCoder@NCompress@@6BISequentialInStream@@@ ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ISequentialInStream'}
.rdata:00002064                 public ??_7CCopyCoder@NCompress@@6BISequentialInStream@@@
.rdata:00002064 ; const NCompress::CCopyCoder::`vftable'{for `ISequentialInStream'}
.rdata:00002064 ??_7CCopyCoder@NCompress@@6BISequentialInStream@@@ dd offset ?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z
.rdata:00002064                                         ; DATA XREF: NCompress::CCopyCoder::CCopyCoder(void)+58o
.rdata:00002064                                         ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)
.rdata:00002068                 dd offset ?AddRef@CCopyCoder@NCompress@@W7AGKXZ ; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{8}' (void)
.rdata:0000206C                 dd offset ?Release@CCopyCoder@NCompress@@W7AGKXZ ; [thunk]:NCompress::CCopyCoder::Release`adjustor{8}' (void)
.rdata:00002070                 dd offset ?Read@CCopyCoder@NCompress@@UAGJPAXIPAI@Z ; NCompress::CCopyCoder::Read(void *,uint,uint *)
.rdata:00002070 _rdata          ends
.rdata:00002070
.rdata:00002074 ; ===========================================================================
.rdata:00002074
.rdata:00002074 ; Segment type: Pure data
.rdata:00002074 ; Segment permissions: Read
.rdata:00002074 _rdata          segment dword public 'DATA' use32
.rdata:00002074                 assume cs:_rdata
.rdata:00002074                 ;org 2074h
.rdata:00002074 ; COMDAT (pick largest)
.rdata:00002074                 dd offset ??_R4CCopyCoder@NCompress@@6BICompressSetInStream@@@ ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ICompressSetInStream'}
.rdata:00002078                 public ??_7CCopyCoder@NCompress@@6BICompressSetInStream@@@
.rdata:00002078 ; const NCompress::CCopyCoder::`vftable'{for `ICompressSetInStream'}
.rdata:00002078 ??_7CCopyCoder@NCompress@@6BICompressSetInStream@@@ dd offset ?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.rdata:00002078                                         ; DATA XREF: NCompress::CCopyCoder::CCopyCoder(void)+4Eo
.rdata:00002078                                         ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:0000207C                 dd offset ?AddRef@CCopyCoder@NCompress@@W3AGKXZ ; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{4}' (void)
.rdata:00002080                 dd offset ?Release@CCopyCoder@NCompress@@W3AGKXZ ; [thunk]:NCompress::CCopyCoder::Release`adjustor{4}' (void)
.rdata:00002084                 dd offset ?SetInStream@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@@Z ; NCompress::CCopyCoder::SetInStream(ISequentialInStream *)
.rdata:00002088                 dd offset ?ReleaseInStream@CCopyCoder@NCompress@@UAGJXZ ; NCompress::CCopyCoder::ReleaseInStream(void)
.rdata:00002088 _rdata          ends
.rdata:00002088
.rdata:0000208C ; ===========================================================================
.rdata:0000208C
.rdata:0000208C ; Segment type: Pure data
.rdata:0000208C ; Segment permissions: Read
.rdata:0000208C _rdata          segment dword public 'DATA' use32
.rdata:0000208C                 assume cs:_rdata
.rdata:0000208C                 ;org 208Ch
.rdata:0000208C ; COMDAT (pick largest)
.rdata:0000208C                 dd offset ??_R4CCopyCoder@NCompress@@6BICompressCoder@@@ ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata:00002090                 public ??_7CCopyCoder@NCompress@@6BICompressCoder@@@
.rdata:00002090 ; const NCompress::CCopyCoder::`vftable'{for `ICompressCoder'}
.rdata:00002090 ??_7CCopyCoder@NCompress@@6BICompressCoder@@@ dd offset ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z
.rdata:00002090                                         ; DATA XREF: NCompress::CCopyCoder::CCopyCoder(void)+45o
.rdata:00002090                                         ; NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)
.rdata:00002094                 dd offset ?AddRef@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::AddRef(void)
.rdata:00002098                 dd offset ?Release@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::Release(void)
.rdata:0000209C                 dd offset ?Code@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ; NCompress::CCopyCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)
.rdata:0000209C _rdata          ends
.rdata:0000209C
.rdata$r:000020A0 ; ===========================================================================
.rdata$r:000020A0
.rdata$r:000020A0 ; Segment type: Pure data
.rdata$r:000020A0 ; Segment permissions: Read
.rdata$r:000020A0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000020A0                 assume cs:_rdata$r
.rdata$r:000020A0                 ;org 20A0h
.rdata$r:000020A0 ; COMDAT (pick any)
.rdata$r:000020A0                 public ??_R4CCopyCoder@NCompress@@6BICompressCoder@@@
.rdata$r:000020A0 ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata$r:000020A0 ??_R4CCopyCoder@NCompress@@6BICompressCoder@@@ db    0
.rdata$r:000020A0                                         ; DATA XREF: .rdata:0000208Co
.rdata$r:000020A1                 db    0
.rdata$r:000020A2                 db    0
.rdata$r:000020A3                 db    0
.rdata$r:000020A4                 db    0
.rdata$r:000020A5                 db    0
.rdata$r:000020A6                 db    0
.rdata$r:000020A7                 db    0
.rdata$r:000020A8                 db    0
.rdata$r:000020A9                 db    0
.rdata$r:000020AA                 db    0
.rdata$r:000020AB                 db    0
.rdata$r:000020AC                 dd offset ??_R0?AVCCopyCoder@NCompress@@@8 ; NCompress::CCopyCoder `RTTI Type Descriptor'
.rdata$r:000020B0                 dd offset ??_R3CCopyCoder@NCompress@@8 ; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000020B0 _rdata$r        ends
.rdata$r:000020B0
.data:000020B4 ; ===========================================================================
.data:000020B4
.data:000020B4 ; Segment type: Pure data
.data:000020B4 ; Segment permissions: Read/Write
.data:000020B4 _data           segment dword public 'DATA' use32
.data:000020B4                 assume cs:_data
.data:000020B4                 ;org 20B4h
.data:000020B4 ; COMDAT (pick any)
.data:000020B4                 public ??_R0?AVCCopyCoder@NCompress@@@8
.data:000020B4 ; class NCompress::CCopyCoder `RTTI Type Descriptor'
.data:000020B4 ??_R0?AVCCopyCoder@NCompress@@@8 dd offset ??_7type_info@@6B@
.data:000020B4                                         ; DATA XREF: .rdata$r:000020ACo
.data:000020B4                                         ; .rdata$r:NCompress::CCopyCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:000020B4                                         ; const type_info::`vftable'
.data:000020B8                 db    0
.data:000020B9                 db    0
.data:000020BA                 db    0
.data:000020BB                 db    0
.data:000020BC                 db  2Eh ; .
.data:000020BD                 db  3Fh ; ?
.data:000020BE                 db  41h ; A
.data:000020BF                 db  56h ; V
.data:000020C0                 db  43h ; C
.data:000020C1                 db  43h ; C
.data:000020C2                 db  6Fh ; o
.data:000020C3                 db  70h ; p
.data:000020C4                 db  79h ; y
.data:000020C5                 db  43h ; C
.data:000020C6                 db  6Fh ; o
.data:000020C7                 db  64h ; d
.data:000020C8                 db  65h ; e
.data:000020C9                 db  72h ; r
.data:000020CA                 db  40h ; @
.data:000020CB                 db  4Eh ; N
.data:000020CC                 db  43h ; C
.data:000020CD                 db  6Fh ; o
.data:000020CE                 db  6Dh ; m
.data:000020CF                 db  70h ; p
.data:000020D0                 db  72h ; r
.data:000020D1                 db  65h ; e
.data:000020D2                 db  73h ; s
.data:000020D3                 db  73h ; s
.data:000020D4                 db  40h ; @
.data:000020D5                 db  40h ; @
.data:000020D6                 db    0
.data:000020D7                 align 4
.data:000020D7 _data           ends
.data:000020D7
.rdata$r:000020D8 ; ===========================================================================
.rdata$r:000020D8
.rdata$r:000020D8 ; Segment type: Pure data
.rdata$r:000020D8 ; Segment permissions: Read
.rdata$r:000020D8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000020D8                 assume cs:_rdata$r
.rdata$r:000020D8                 ;org 20D8h
.rdata$r:000020D8 ; COMDAT (pick any)
.rdata$r:000020D8                 public ??_R3CCopyCoder@NCompress@@8
.rdata$r:000020D8 ; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000020D8 ??_R3CCopyCoder@NCompress@@8 db    0    ; DATA XREF: .rdata$r:000020B0o
.rdata$r:000020D8                                         ; .rdata$r:0000212Co ...
.rdata$r:000020D9                 db    0
.rdata$r:000020DA                 db    0
.rdata$r:000020DB                 db    0
.rdata$r:000020DC                 db    5
.rdata$r:000020DD                 db    0
.rdata$r:000020DE                 db    0
.rdata$r:000020DF                 db    0
.rdata$r:000020E0                 db  0Ah
.rdata$r:000020E1                 db    0
.rdata$r:000020E2                 db    0
.rdata$r:000020E3                 db    0
.rdata$r:000020E4                 dd offset ??_R2CCopyCoder@NCompress@@8 ; NCompress::CCopyCoder::`RTTI Base Class Array'
.rdata$r:000020E4 _rdata$r        ends
.rdata$r:000020E4
.rdata$r:000020E8 ; ===========================================================================
.rdata$r:000020E8
.rdata$r:000020E8 ; Segment type: Pure data
.rdata$r:000020E8 ; Segment permissions: Read
.rdata$r:000020E8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000020E8                 assume cs:_rdata$r
.rdata$r:000020E8                 ;org 20E8h
.rdata$r:000020E8 ; COMDAT (pick any)
.rdata$r:000020E8                 public ??_R2CCopyCoder@NCompress@@8
.rdata$r:000020E8 ; NCompress::CCopyCoder::`RTTI Base Class Array'
.rdata$r:000020E8 ??_R2CCopyCoder@NCompress@@8 dd offset ??_R1A@?0A@EA@CCopyCoder@NCompress@@8
.rdata$r:000020E8                                         ; DATA XREF: .rdata$r:000020E4o
.rdata$r:000020E8                                         ; NCompress::CCopyCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000020EC                 dd offset ??_R1A@?0A@EA@ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000020F0                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:000020F4                 dd offset ??_R13?0A@EA@ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:000020F8                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:000020FC                 dd offset ??_R17?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:00002100                 dd offset ??_R17?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
.rdata$r:00002104                 dd offset ??_R1M@?0A@EA@ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (12,-1,0,64)'
.rdata$r:00002108                 dd offset ??_R1M@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (12,-1,0,66)'
.rdata$r:0000210C                 dd offset ??_R1BA@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (16,-1,0,64)'
.rdata$r:00002110                 db    0
.rdata$r:00002111                 align 4
.rdata$r:00002111 _rdata$r        ends
.rdata$r:00002111
.rdata$r:00002114 ; ===========================================================================
.rdata$r:00002114
.rdata$r:00002114 ; Segment type: Pure data
.rdata$r:00002114 ; Segment permissions: Read
.rdata$r:00002114 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002114                 assume cs:_rdata$r
.rdata$r:00002114                 ;org 2114h
.rdata$r:00002114 ; COMDAT (pick any)
.rdata$r:00002114                 public ??_R1A@?0A@EA@CCopyCoder@NCompress@@8
.rdata$r:00002114 ; NCompress::CCopyCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00002114 ??_R1A@?0A@EA@CCopyCoder@NCompress@@8 dd offset ??_R0?AVCCopyCoder@NCompress@@@8
.rdata$r:00002114                                         ; DATA XREF: .rdata$r:NCompress::CCopyCoder::`RTTI Base Class Array'o
.rdata$r:00002114                                         ; NCompress::CCopyCoder `RTTI Type Descriptor'
.rdata$r:00002118                 db    9
.rdata$r:00002119                 db    0
.rdata$r:0000211A                 db    0
.rdata$r:0000211B                 db    0
.rdata$r:0000211C                 db    0
.rdata$r:0000211D                 db    0
.rdata$r:0000211E                 db    0
.rdata$r:0000211F                 db    0
.rdata$r:00002120                 db 0FFh
.rdata$r:00002121                 db 0FFh
.rdata$r:00002122                 db 0FFh
.rdata$r:00002123                 db 0FFh
.rdata$r:00002124                 db    0
.rdata$r:00002125                 db    0
.rdata$r:00002126                 db    0
.rdata$r:00002127                 db    0
.rdata$r:00002128                 db  40h ; @
.rdata$r:00002129                 db    0
.rdata$r:0000212A                 db    0
.rdata$r:0000212B                 db    0
.rdata$r:0000212C                 dd offset ??_R3CCopyCoder@NCompress@@8 ; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000212C _rdata$r        ends
.rdata$r:0000212C
.rdata$r:00002130 ; ===========================================================================
.rdata$r:00002130
.rdata$r:00002130 ; Segment type: Pure data
.rdata$r:00002130 ; Segment permissions: Read
.rdata$r:00002130 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002130                 assume cs:_rdata$r
.rdata$r:00002130                 ;org 2130h
.rdata$r:00002130 ; COMDAT (pick any)
.rdata$r:00002130                 public ??_R1A@?0A@EA@ICompressCoder@@8
.rdata$r:00002130 ; ICompressCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00002130 ??_R1A@?0A@EA@ICompressCoder@@8 dd offset ??_R0?AUICompressCoder@@@8
.rdata$r:00002130                                         ; DATA XREF: .rdata$r:000020ECo
.rdata$r:00002130                                         ; .rdata$r:ICompressCoder::`RTTI Base Class Array'o ...
.rdata$r:00002130                                         ; ICompressCoder `RTTI Type Descriptor'
.rdata$r:00002134                 db    1
.rdata$r:00002135                 db    0
.rdata$r:00002136                 db    0
.rdata$r:00002137                 db    0
.rdata$r:00002138                 db    0
.rdata$r:00002139                 db    0
.rdata$r:0000213A                 db    0
.rdata$r:0000213B                 db    0
.rdata$r:0000213C                 db 0FFh
.rdata$r:0000213D                 db 0FFh
.rdata$r:0000213E                 db 0FFh
.rdata$r:0000213F                 db 0FFh
.rdata$r:00002140                 db    0
.rdata$r:00002141                 db    0
.rdata$r:00002142                 db    0
.rdata$r:00002143                 db    0
.rdata$r:00002144                 db  40h ; @
.rdata$r:00002145                 db    0
.rdata$r:00002146                 db    0
.rdata$r:00002147                 db    0
.rdata$r:00002148                 dd offset ??_R3ICompressCoder@@8 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002148 _rdata$r        ends
.rdata$r:00002148
.data:0000214C ; ===========================================================================
.data:0000214C
.data:0000214C ; Segment type: Pure data
.data:0000214C ; Segment permissions: Read/Write
.data:0000214C _data           segment dword public 'DATA' use32
.data:0000214C                 assume cs:_data
.data:0000214C                 ;org 214Ch
.data:0000214C ; COMDAT (pick any)
.data:0000214C                 public ??_R0?AUICompressCoder@@@8
.data:0000214C ; struct ICompressCoder `RTTI Type Descriptor'
.data:0000214C ??_R0?AUICompressCoder@@@8 dd offset ??_7type_info@@6B@
.data:0000214C                                         ; DATA XREF: .rdata$r:ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:0000214C                                         ; .rdata$r:00002634o
.data:0000214C                                         ; const type_info::`vftable'
.data:00002150                 db    0
.data:00002151                 db    0
.data:00002152                 db    0
.data:00002153                 db    0
.data:00002154                 db  2Eh ; .
.data:00002155                 db  3Fh ; ?
.data:00002156                 db  41h ; A
.data:00002157                 db  55h ; U
.data:00002158                 db  49h ; I
.data:00002159                 db  43h ; C
.data:0000215A                 db  6Fh ; o
.data:0000215B                 db  6Dh ; m
.data:0000215C                 db  70h ; p
.data:0000215D                 db  72h ; r
.data:0000215E                 db  65h ; e
.data:0000215F                 db  73h ; s
.data:00002160                 db  73h ; s
.data:00002161                 db  43h ; C
.data:00002162                 db  6Fh ; o
.data:00002163                 db  64h ; d
.data:00002164                 db  65h ; e
.data:00002165                 db  72h ; r
.data:00002166                 db  40h ; @
.data:00002167                 db  40h ; @
.data:00002168                 db    0
.data:00002169                 align 4
.data:00002169 _data           ends
.data:00002169
.rdata$r:0000216C ; ===========================================================================
.rdata$r:0000216C
.rdata$r:0000216C ; Segment type: Pure data
.rdata$r:0000216C ; Segment permissions: Read
.rdata$r:0000216C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000216C                 assume cs:_rdata$r
.rdata$r:0000216C                 ;org 216Ch
.rdata$r:0000216C ; COMDAT (pick any)
.rdata$r:0000216C                 public ??_R3ICompressCoder@@8
.rdata$r:0000216C ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000216C ??_R3ICompressCoder@@8 db    0          ; DATA XREF: .rdata$r:00002148o
.rdata$r:0000216C                                         ; .rdata$r:00002638o
.rdata$r:0000216D                 db    0
.rdata$r:0000216E                 db    0
.rdata$r:0000216F                 db    0
.rdata$r:00002170                 db    0
.rdata$r:00002171                 db    0
.rdata$r:00002172                 db    0
.rdata$r:00002173                 db    0
.rdata$r:00002174                 db    2
.rdata$r:00002175                 db    0
.rdata$r:00002176                 db    0
.rdata$r:00002177                 db    0
.rdata$r:00002178                 dd offset ??_R2ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Array'
.rdata$r:00002178 _rdata$r        ends
.rdata$r:00002178
.rdata$r:0000217C ; ===========================================================================
.rdata$r:0000217C
.rdata$r:0000217C ; Segment type: Pure data
.rdata$r:0000217C ; Segment permissions: Read
.rdata$r:0000217C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000217C                 assume cs:_rdata$r
.rdata$r:0000217C                 ;org 217Ch
.rdata$r:0000217C ; COMDAT (pick any)
.rdata$r:0000217C                 public ??_R2ICompressCoder@@8
.rdata$r:0000217C ; ICompressCoder::`RTTI Base Class Array'
.rdata$r:0000217C ??_R2ICompressCoder@@8 dd offset ??_R1A@?0A@EA@ICompressCoder@@8
.rdata$r:0000217C                                         ; DATA XREF: .rdata$r:00002178o
.rdata$r:0000217C                                         ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002180                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002184                 db    0
.rdata$r:00002185                 align 4
.rdata$r:00002185 _rdata$r        ends
.rdata$r:00002185
.rdata$r:00002188 ; ===========================================================================
.rdata$r:00002188
.rdata$r:00002188 ; Segment type: Pure data
.rdata$r:00002188 ; Segment permissions: Read
.rdata$r:00002188 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002188                 assume cs:_rdata$r
.rdata$r:00002188                 ;org 2188h
.rdata$r:00002188 ; COMDAT (pick any)
.rdata$r:00002188                 public ??_R1A@?0A@EC@IUnknown@@8
.rdata$r:00002188 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 66)'
.rdata$r:00002188 ??_R1A@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00002188                                         ; DATA XREF: .rdata$r:000020F0o
.rdata$r:00002188                                         ; .rdata$r:00002B8Co ...
.rdata$r:00002188                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:0000218C                 db    0
.rdata$r:0000218D                 db    0
.rdata$r:0000218E                 db    0
.rdata$r:0000218F                 db    0
.rdata$r:00002190                 db    0
.rdata$r:00002191                 db    0
.rdata$r:00002192                 db    0
.rdata$r:00002193                 db    0
.rdata$r:00002194                 db 0FFh
.rdata$r:00002195                 db 0FFh
.rdata$r:00002196                 db 0FFh
.rdata$r:00002197                 db 0FFh
.rdata$r:00002198                 db    0
.rdata$r:00002199                 db    0
.rdata$r:0000219A                 db    0
.rdata$r:0000219B                 db    0
.rdata$r:0000219C                 db  42h ; B
.rdata$r:0000219D                 db    0
.rdata$r:0000219E                 db    0
.rdata$r:0000219F                 db    0
.rdata$r:000021A0                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000021A0 _rdata$r        ends
.rdata$r:000021A0
.rdata$r:000021A4 ; ===========================================================================
.rdata$r:000021A4
.rdata$r:000021A4 ; Segment type: Pure data
.rdata$r:000021A4 ; Segment permissions: Read
.rdata$r:000021A4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000021A4                 assume cs:_rdata$r
.rdata$r:000021A4                 ;org 21A4h
.rdata$r:000021A4 ; COMDAT (pick any)
.rdata$r:000021A4                 public ??_R13?0A@EA@ICompressSetInStream@@8
.rdata$r:000021A4 ; ICompressSetInStream::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:000021A4 ??_R13?0A@EA@ICompressSetInStream@@8 dd offset ??_R0?AUICompressSetInStream@@@8
.rdata$r:000021A4                                         ; DATA XREF: .rdata$r:000020F4o
.rdata$r:000021A4                                         ; ICompressSetInStream `RTTI Type Descriptor'
.rdata$r:000021A8                 db    1
.rdata$r:000021A9                 db    0
.rdata$r:000021AA                 db    0
.rdata$r:000021AB                 db    0
.rdata$r:000021AC                 db    4
.rdata$r:000021AD                 db    0
.rdata$r:000021AE                 db    0
.rdata$r:000021AF                 db    0
.rdata$r:000021B0                 db 0FFh
.rdata$r:000021B1                 db 0FFh
.rdata$r:000021B2                 db 0FFh
.rdata$r:000021B3                 db 0FFh
.rdata$r:000021B4                 db    0
.rdata$r:000021B5                 db    0
.rdata$r:000021B6                 db    0
.rdata$r:000021B7                 db    0
.rdata$r:000021B8                 db  40h ; @
.rdata$r:000021B9                 db    0
.rdata$r:000021BA                 db    0
.rdata$r:000021BB                 db    0
.rdata$r:000021BC                 dd offset ??_R3ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000021BC _rdata$r        ends
.rdata$r:000021BC
.data:000021C0 ; ===========================================================================
.data:000021C0
.data:000021C0 ; Segment type: Pure data
.data:000021C0 ; Segment permissions: Read/Write
.data:000021C0 _data           segment dword public 'DATA' use32
.data:000021C0                 assume cs:_data
.data:000021C0                 ;org 21C0h
.data:000021C0 ; COMDAT (pick any)
.data:000021C0                 public ??_R0?AUICompressSetInStream@@@8
.data:000021C0 ; struct ICompressSetInStream `RTTI Type Descriptor'
.data:000021C0 ??_R0?AUICompressSetInStream@@@8 dd offset ??_7type_info@@6B@
.data:000021C0                                         ; DATA XREF: .rdata$r:ICompressSetInStream::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:000021C0                                         ; .rdata$r:ICompressSetInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:000021C0                                         ; const type_info::`vftable'
.data:000021C4                 align 8
.data:000021C8 a_?auicompresss db '.?AUICompressSetInStream@@',0
.data:000021E3                 align 4
.data:000021E3 _data           ends
.data:000021E3
.rdata$r:000021E4 ; ===========================================================================
.rdata$r:000021E4
.rdata$r:000021E4 ; Segment type: Pure data
.rdata$r:000021E4 ; Segment permissions: Read
.rdata$r:000021E4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000021E4                 assume cs:_rdata$r
.rdata$r:000021E4                 ;org 21E4h
.rdata$r:000021E4 ; COMDAT (pick any)
.rdata$r:000021E4                 public ??_R3ICompressSetInStream@@8
.rdata$r:000021E4 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000021E4 ??_R3ICompressSetInStream@@8 db    0    ; DATA XREF: .rdata$r:000021BCo
.rdata$r:000021E4                                         ; .rdata$r:00002218o ...
.rdata$r:000021E5                 db    0
.rdata$r:000021E6                 db    0
.rdata$r:000021E7                 db    0
.rdata$r:000021E8                 db    0
.rdata$r:000021E9                 db    0
.rdata$r:000021EA                 db    0
.rdata$r:000021EB                 db    0
.rdata$r:000021EC                 db    2
.rdata$r:000021ED                 db    0
.rdata$r:000021EE                 db    0
.rdata$r:000021EF                 db    0
.rdata$r:000021F0                 dd offset ??_R2ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Base Class Array'
.rdata$r:000021F0 _rdata$r        ends
.rdata$r:000021F0
.rdata$r:000021F4 ; ===========================================================================
.rdata$r:000021F4
.rdata$r:000021F4 ; Segment type: Pure data
.rdata$r:000021F4 ; Segment permissions: Read
.rdata$r:000021F4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000021F4                 assume cs:_rdata$r
.rdata$r:000021F4                 ;org 21F4h
.rdata$r:000021F4 ; COMDAT (pick any)
.rdata$r:000021F4                 public ??_R2ICompressSetInStream@@8
.rdata$r:000021F4 ; ICompressSetInStream::`RTTI Base Class Array'
.rdata$r:000021F4 ??_R2ICompressSetInStream@@8 dd offset ??_R1A@?0A@EA@ICompressSetInStream@@8
.rdata$r:000021F4                                         ; DATA XREF: .rdata$r:000021F0o
.rdata$r:000021F4                                         ; ICompressSetInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000021F8                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000021FC                 db    0
.rdata$r:000021FD                 align 10h
.rdata$r:000021FD _rdata$r        ends
.rdata$r:000021FD
.rdata$r:00002200 ; ===========================================================================
.rdata$r:00002200
.rdata$r:00002200 ; Segment type: Pure data
.rdata$r:00002200 ; Segment permissions: Read
.rdata$r:00002200 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002200                 assume cs:_rdata$r
.rdata$r:00002200                 ;org 2200h
.rdata$r:00002200 ; COMDAT (pick any)
.rdata$r:00002200                 public ??_R1A@?0A@EA@ICompressSetInStream@@8
.rdata$r:00002200 ; ICompressSetInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00002200 ??_R1A@?0A@EA@ICompressSetInStream@@8 dd offset ??_R0?AUICompressSetInStream@@@8
.rdata$r:00002200                                         ; DATA XREF: .rdata$r:ICompressSetInStream::`RTTI Base Class Array'o
.rdata$r:00002200                                         ; ICompressSetInStream `RTTI Type Descriptor'
.rdata$r:00002204                 db    1
.rdata$r:00002205                 db    0
.rdata$r:00002206                 db    0
.rdata$r:00002207                 db    0
.rdata$r:00002208                 db    0
.rdata$r:00002209                 db    0
.rdata$r:0000220A                 db    0
.rdata$r:0000220B                 db    0
.rdata$r:0000220C                 db 0FFh
.rdata$r:0000220D                 db 0FFh
.rdata$r:0000220E                 db 0FFh
.rdata$r:0000220F                 db 0FFh
.rdata$r:00002210                 db    0
.rdata$r:00002211                 db    0
.rdata$r:00002212                 db    0
.rdata$r:00002213                 db    0
.rdata$r:00002214                 db  40h ; @
.rdata$r:00002215                 db    0
.rdata$r:00002216                 db    0
.rdata$r:00002217                 db    0
.rdata$r:00002218                 dd offset ??_R3ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002218 _rdata$r        ends
.rdata$r:00002218
.rdata$r:0000221C ; ===========================================================================
.rdata$r:0000221C
.rdata$r:0000221C ; Segment type: Pure data
.rdata$r:0000221C ; Segment permissions: Read
.rdata$r:0000221C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000221C                 assume cs:_rdata$r
.rdata$r:0000221C                 ;org 221Ch
.rdata$r:0000221C ; COMDAT (pick any)
.rdata$r:0000221C                 public ??_R13?0A@EC@IUnknown@@8
.rdata$r:0000221C ; IUnknown::`RTTI Base Class Descriptor at (4, -1, 0, 66)'
.rdata$r:0000221C ??_R13?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:0000221C                                         ; DATA XREF: .rdata$r:000020F8o
.rdata$r:0000221C                                         ; .rdata$r:00002B94o ...
.rdata$r:0000221C                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00002220                 db    0
.rdata$r:00002221                 db    0
.rdata$r:00002222                 db    0
.rdata$r:00002223                 db    0
.rdata$r:00002224                 db    4
.rdata$r:00002225                 db    0
.rdata$r:00002226                 db    0
.rdata$r:00002227                 db    0
.rdata$r:00002228                 db 0FFh
.rdata$r:00002229                 db 0FFh
.rdata$r:0000222A                 db 0FFh
.rdata$r:0000222B                 db 0FFh
.rdata$r:0000222C                 db    0
.rdata$r:0000222D                 db    0
.rdata$r:0000222E                 db    0
.rdata$r:0000222F                 db    0
.rdata$r:00002230                 db  42h ; B
.rdata$r:00002231                 db    0
.rdata$r:00002232                 db    0
.rdata$r:00002233                 db    0
.rdata$r:00002234                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002234 _rdata$r        ends
.rdata$r:00002234
.rdata$r:00002238 ; ===========================================================================
.rdata$r:00002238
.rdata$r:00002238 ; Segment type: Pure data
.rdata$r:00002238 ; Segment permissions: Read
.rdata$r:00002238 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002238                 assume cs:_rdata$r
.rdata$r:00002238                 ;org 2238h
.rdata$r:00002238 ; COMDAT (pick any)
.rdata$r:00002238                 public ??_R17?0A@EA@ISequentialInStream@@8
.rdata$r:00002238 ; ISequentialInStream::`RTTI Base Class Descriptor at (8, -1, 0, 64)'
.rdata$r:00002238 ??_R17?0A@EA@ISequentialInStream@@8 dd offset ??_R0?AUISequentialInStream@@@8
.rdata$r:00002238                                         ; DATA XREF: .rdata$r:000020FCo
.rdata$r:00002238                                         ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:0000223C                 db    1
.rdata$r:0000223D                 db    0
.rdata$r:0000223E                 db    0
.rdata$r:0000223F                 db    0
.rdata$r:00002240                 db    8
.rdata$r:00002241                 db    0
.rdata$r:00002242                 db    0
.rdata$r:00002243                 db    0
.rdata$r:00002244                 db 0FFh
.rdata$r:00002245                 db 0FFh
.rdata$r:00002246                 db 0FFh
.rdata$r:00002247                 db 0FFh
.rdata$r:00002248                 db    0
.rdata$r:00002249                 db    0
.rdata$r:0000224A                 db    0
.rdata$r:0000224B                 db    0
.rdata$r:0000224C                 db  40h ; @
.rdata$r:0000224D                 db    0
.rdata$r:0000224E                 db    0
.rdata$r:0000224F                 db    0
.rdata$r:00002250                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002250 _rdata$r        ends
.rdata$r:00002250
.data:00002254 ; ===========================================================================
.data:00002254
.data:00002254 ; Segment type: Pure data
.data:00002254 ; Segment permissions: Read/Write
.data:00002254 _data           segment dword public 'DATA' use32
.data:00002254                 assume cs:_data
.data:00002254                 ;org 2254h
.data:00002254 ; COMDAT (pick any)
.data:00002254                 public ??_R0?AUISequentialInStream@@@8
.data:00002254 ; struct ISequentialInStream `RTTI Type Descriptor'
.data:00002254 ??_R0?AUISequentialInStream@@@8 dd offset ??_7type_info@@6B@
.data:00002254                                         ; DATA XREF: .rdata$r:ISequentialInStream::`RTTI Base Class Descriptor at (8,-1,0,64)'o
.data:00002254                                         ; .rdata$r:ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00002254                                         ; const type_info::`vftable'
.data:00002258                 db    0
.data:00002259                 db    0
.data:0000225A                 db    0
.data:0000225B                 db    0
.data:0000225C                 db  2Eh ; .
.data:0000225D                 db  3Fh ; ?
.data:0000225E                 db  41h ; A
.data:0000225F                 db  55h ; U
.data:00002260                 db  49h ; I
.data:00002261                 db  53h ; S
.data:00002262                 db  65h ; e
.data:00002263                 db  71h ; q
.data:00002264                 db  75h ; u
.data:00002265                 db  65h ; e
.data:00002266                 db  6Eh ; n
.data:00002267                 db  74h ; t
.data:00002268                 db  69h ; i
.data:00002269                 db  61h ; a
.data:0000226A                 db  6Ch ; l
.data:0000226B                 db  49h ; I
.data:0000226C                 db  6Eh ; n
.data:0000226D                 db  53h ; S
.data:0000226E                 db  74h ; t
.data:0000226F                 db  72h ; r
.data:00002270                 db  65h ; e
.data:00002271                 db  61h ; a
.data:00002272                 db  6Dh ; m
.data:00002273                 db  40h ; @
.data:00002274                 db  40h ; @
.data:00002275                 db    0
.data:00002276                 align 4
.data:00002276 _data           ends
.data:00002276
.rdata$r:00002278 ; ===========================================================================
.rdata$r:00002278
.rdata$r:00002278 ; Segment type: Pure data
.rdata$r:00002278 ; Segment permissions: Read
.rdata$r:00002278 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002278                 assume cs:_rdata$r
.rdata$r:00002278                 ;org 2278h
.rdata$r:00002278 ; COMDAT (pick any)
.rdata$r:00002278                 public ??_R3ISequentialInStream@@8
.rdata$r:00002278 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002278 ??_R3ISequentialInStream@@8 db    0     ; DATA XREF: .rdata$r:00002250o
.rdata$r:00002278                                         ; .rdata$r:000022ACo ...
.rdata$r:00002279                 db    0
.rdata$r:0000227A                 db    0
.rdata$r:0000227B                 db    0
.rdata$r:0000227C                 db    0
.rdata$r:0000227D                 db    0
.rdata$r:0000227E                 db    0
.rdata$r:0000227F                 db    0
.rdata$r:00002280                 db    2
.rdata$r:00002281                 db    0
.rdata$r:00002282                 db    0
.rdata$r:00002283                 db    0
.rdata$r:00002284                 dd offset ??_R2ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Array'
.rdata$r:00002284 _rdata$r        ends
.rdata$r:00002284
.rdata$r:00002288 ; ===========================================================================
.rdata$r:00002288
.rdata$r:00002288 ; Segment type: Pure data
.rdata$r:00002288 ; Segment permissions: Read
.rdata$r:00002288 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002288                 assume cs:_rdata$r
.rdata$r:00002288                 ;org 2288h
.rdata$r:00002288 ; COMDAT (pick any)
.rdata$r:00002288                 public ??_R2ISequentialInStream@@8
.rdata$r:00002288 ; ISequentialInStream::`RTTI Base Class Array'
.rdata$r:00002288 ??_R2ISequentialInStream@@8 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8
.rdata$r:00002288                                         ; DATA XREF: .rdata$r:00002284o
.rdata$r:00002288                                         ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000228C                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002290                 db    0
.rdata$r:00002291                 align 4
.rdata$r:00002291 _rdata$r        ends
.rdata$r:00002291
.rdata$r:00002294 ; ===========================================================================
.rdata$r:00002294
.rdata$r:00002294 ; Segment type: Pure data
.rdata$r:00002294 ; Segment permissions: Read
.rdata$r:00002294 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002294                 assume cs:_rdata$r
.rdata$r:00002294                 ;org 2294h
.rdata$r:00002294 ; COMDAT (pick any)
.rdata$r:00002294                 public ??_R1A@?0A@EA@ISequentialInStream@@8
.rdata$r:00002294 ; ISequentialInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00002294 ??_R1A@?0A@EA@ISequentialInStream@@8 dd offset ??_R0?AUISequentialInStream@@@8
.rdata$r:00002294                                         ; DATA XREF: .rdata$r:ISequentialInStream::`RTTI Base Class Array'o
.rdata$r:00002294                                         ; .rdata$r:00002880o ...
.rdata$r:00002294                                         ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:00002298                 db    1
.rdata$r:00002299                 db    0
.rdata$r:0000229A                 db    0
.rdata$r:0000229B                 db    0
.rdata$r:0000229C                 db    0
.rdata$r:0000229D                 db    0
.rdata$r:0000229E                 db    0
.rdata$r:0000229F                 db    0
.rdata$r:000022A0                 db 0FFh
.rdata$r:000022A1                 db 0FFh
.rdata$r:000022A2                 db 0FFh
.rdata$r:000022A3                 db 0FFh
.rdata$r:000022A4                 db    0
.rdata$r:000022A5                 db    0
.rdata$r:000022A6                 db    0
.rdata$r:000022A7                 db    0
.rdata$r:000022A8                 db  40h ; @
.rdata$r:000022A9                 db    0
.rdata$r:000022AA                 db    0
.rdata$r:000022AB                 db    0
.rdata$r:000022AC                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000022AC _rdata$r        ends
.rdata$r:000022AC
.rdata$r:000022B0 ; ===========================================================================
.rdata$r:000022B0
.rdata$r:000022B0 ; Segment type: Pure data
.rdata$r:000022B0 ; Segment permissions: Read
.rdata$r:000022B0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000022B0                 assume cs:_rdata$r
.rdata$r:000022B0                 ;org 22B0h
.rdata$r:000022B0 ; COMDAT (pick any)
.rdata$r:000022B0                 public ??_R17?0A@EC@IUnknown@@8
.rdata$r:000022B0 ; IUnknown::`RTTI Base Class Descriptor at (8, -1, 0, 66)'
.rdata$r:000022B0 ??_R17?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000022B0                                         ; DATA XREF: .rdata$r:00002100o
.rdata$r:000022B0                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:000022B4                 align 8
.rdata$r:000022B8                 db    8
.rdata$r:000022B9                 db    0
.rdata$r:000022BA                 db    0
.rdata$r:000022BB                 db    0
.rdata$r:000022BC                 db 0FFh
.rdata$r:000022BD                 db 0FFh
.rdata$r:000022BE                 db 0FFh
.rdata$r:000022BF                 db 0FFh
.rdata$r:000022C0                 db    0
.rdata$r:000022C1                 db    0
.rdata$r:000022C2                 db    0
.rdata$r:000022C3                 db    0
.rdata$r:000022C4                 db  42h ; B
.rdata$r:000022C5                 db    0
.rdata$r:000022C6                 db    0
.rdata$r:000022C7                 db    0
.rdata$r:000022C8                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000022C8 _rdata$r        ends
.rdata$r:000022C8
.rdata$r:000022CC ; ===========================================================================
.rdata$r:000022CC
.rdata$r:000022CC ; Segment type: Pure data
.rdata$r:000022CC ; Segment permissions: Read
.rdata$r:000022CC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000022CC                 assume cs:_rdata$r
.rdata$r:000022CC                 ;org 22CCh
.rdata$r:000022CC ; COMDAT (pick any)
.rdata$r:000022CC                 public ??_R1M@?0A@EA@ICompressGetInStreamProcessedSize@@8
.rdata$r:000022CC ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (12, -1, 0, 64)'
.rdata$r:000022CC ??_R1M@?0A@EA@ICompressGetInStreamProcessedSize@@8 dd offset ??_R0?AUICompressGetInStreamProcessedSize@@@8
.rdata$r:000022CC                                         ; DATA XREF: .rdata$r:00002104o
.rdata$r:000022CC                                         ; ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
.rdata$r:000022D0                 db    1
.rdata$r:000022D1                 db    0
.rdata$r:000022D2                 db    0
.rdata$r:000022D3                 db    0
.rdata$r:000022D4                 db  0Ch
.rdata$r:000022D5                 db    0
.rdata$r:000022D6                 db    0
.rdata$r:000022D7                 db    0
.rdata$r:000022D8                 db 0FFh
.rdata$r:000022D9                 db 0FFh
.rdata$r:000022DA                 db 0FFh
.rdata$r:000022DB                 db 0FFh
.rdata$r:000022DC                 db    0
.rdata$r:000022DD                 db    0
.rdata$r:000022DE                 db    0
.rdata$r:000022DF                 db    0
.rdata$r:000022E0                 db  40h ; @
.rdata$r:000022E1                 db    0
.rdata$r:000022E2                 db    0
.rdata$r:000022E3                 db    0
.rdata$r:000022E4                 dd offset ??_R3ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:000022E4 _rdata$r        ends
.rdata$r:000022E4
.data:000022E8 ; ===========================================================================
.data:000022E8
.data:000022E8 ; Segment type: Pure data
.data:000022E8 ; Segment permissions: Read/Write
.data:000022E8 _data           segment dword public 'DATA' use32
.data:000022E8                 assume cs:_data
.data:000022E8                 ;org 22E8h
.data:000022E8 ; COMDAT (pick any)
.data:000022E8                 public ??_R0?AUICompressGetInStreamProcessedSize@@@8
.data:000022E8 ; struct ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
.data:000022E8 ??_R0?AUICompressGetInStreamProcessedSize@@@8 dd offset ??_7type_info@@6B@
.data:000022E8                                         ; DATA XREF: .rdata$r:ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (12,-1,0,64)'o
.data:000022E8                                         ; .rdata$r:ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:000022E8                                         ; const type_info::`vftable'
.data:000022EC                 align 10h
.data:000022F0 a_?auicompressg db '.?AUICompressGetInStreamProcessedSize@@',0
.data:000022F0 _data           ends
.data:000022F0
.rdata$r:00002318 ; ===========================================================================
.rdata$r:00002318
.rdata$r:00002318 ; Segment type: Pure data
.rdata$r:00002318 ; Segment permissions: Read
.rdata$r:00002318 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002318                 assume cs:_rdata$r
.rdata$r:00002318                 ;org 2318h
.rdata$r:00002318 ; COMDAT (pick any)
.rdata$r:00002318                 public ??_R3ICompressGetInStreamProcessedSize@@8
.rdata$r:00002318 ; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002318 ??_R3ICompressGetInStreamProcessedSize@@8 db    0
.rdata$r:00002318                                         ; DATA XREF: .rdata$r:000022E4o
.rdata$r:00002318                                         ; .rdata$r:0000234Co ...
.rdata$r:00002319                 db    0
.rdata$r:0000231A                 db    0
.rdata$r:0000231B                 db    0
.rdata$r:0000231C                 db    0
.rdata$r:0000231D                 db    0
.rdata$r:0000231E                 db    0
.rdata$r:0000231F                 db    0
.rdata$r:00002320                 db    2
.rdata$r:00002321                 db    0
.rdata$r:00002322                 db    0
.rdata$r:00002323                 db    0
.rdata$r:00002324                 dd offset ??_R2ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Array'
.rdata$r:00002324 _rdata$r        ends
.rdata$r:00002324
.rdata$r:00002328 ; ===========================================================================
.rdata$r:00002328
.rdata$r:00002328 ; Segment type: Pure data
.rdata$r:00002328 ; Segment permissions: Read
.rdata$r:00002328 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002328                 assume cs:_rdata$r
.rdata$r:00002328                 ;org 2328h
.rdata$r:00002328 ; COMDAT (pick any)
.rdata$r:00002328                 public ??_R2ICompressGetInStreamProcessedSize@@8
.rdata$r:00002328 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Array'
.rdata$r:00002328 ??_R2ICompressGetInStreamProcessedSize@@8 dd offset ??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8
.rdata$r:00002328                                         ; DATA XREF: .rdata$r:00002324o
.rdata$r:00002328                                         ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000232C                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002330                 db    0
.rdata$r:00002331                 align 4
.rdata$r:00002331 _rdata$r        ends
.rdata$r:00002331
.rdata$r:00002334 ; ===========================================================================
.rdata$r:00002334
.rdata$r:00002334 ; Segment type: Pure data
.rdata$r:00002334 ; Segment permissions: Read
.rdata$r:00002334 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002334                 assume cs:_rdata$r
.rdata$r:00002334                 ;org 2334h
.rdata$r:00002334 ; COMDAT (pick any)
.rdata$r:00002334                 public ??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8
.rdata$r:00002334 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00002334 ??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8 dd offset ??_R0?AUICompressGetInStreamProcessedSize@@@8
.rdata$r:00002334                                         ; DATA XREF: .rdata$r:ICompressGetInStreamProcessedSize::`RTTI Base Class Array'o
.rdata$r:00002334                                         ; ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
.rdata$r:00002338                 db    1
.rdata$r:00002339                 db    0
.rdata$r:0000233A                 db    0
.rdata$r:0000233B                 db    0
.rdata$r:0000233C                 db    0
.rdata$r:0000233D                 db    0
.rdata$r:0000233E                 db    0
.rdata$r:0000233F                 db    0
.rdata$r:00002340                 db 0FFh
.rdata$r:00002341                 db 0FFh
.rdata$r:00002342                 db 0FFh
.rdata$r:00002343                 db 0FFh
.rdata$r:00002344                 db    0
.rdata$r:00002345                 db    0
.rdata$r:00002346                 db    0
.rdata$r:00002347                 db    0
.rdata$r:00002348                 db  40h ; @
.rdata$r:00002349                 db    0
.rdata$r:0000234A                 db    0
.rdata$r:0000234B                 db    0
.rdata$r:0000234C                 dd offset ??_R3ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000234C _rdata$r        ends
.rdata$r:0000234C
.rdata$r:00002350 ; ===========================================================================
.rdata$r:00002350
.rdata$r:00002350 ; Segment type: Pure data
.rdata$r:00002350 ; Segment permissions: Read
.rdata$r:00002350 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002350                 assume cs:_rdata$r
.rdata$r:00002350                 ;org 2350h
.rdata$r:00002350 ; COMDAT (pick any)
.rdata$r:00002350                 public ??_R1M@?0A@EC@IUnknown@@8
.rdata$r:00002350 ; IUnknown::`RTTI Base Class Descriptor at (12, -1, 0, 66)'
.rdata$r:00002350 ??_R1M@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00002350                                         ; DATA XREF: .rdata$r:00002108o
.rdata$r:00002350                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00002354                 align 8
.rdata$r:00002358                 db  0Ch
.rdata$r:00002359                 db    0
.rdata$r:0000235A                 db    0
.rdata$r:0000235B                 db    0
.rdata$r:0000235C                 db 0FFh
.rdata$r:0000235D                 db 0FFh
.rdata$r:0000235E                 db 0FFh
.rdata$r:0000235F                 db 0FFh
.rdata$r:00002360                 db    0
.rdata$r:00002361                 db    0
.rdata$r:00002362                 db    0
.rdata$r:00002363                 db    0
.rdata$r:00002364                 db  42h ; B
.rdata$r:00002365                 db    0
.rdata$r:00002366                 db    0
.rdata$r:00002367                 db    0
.rdata$r:00002368                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002368 _rdata$r        ends
.rdata$r:00002368
.rdata$r:0000236C ; ===========================================================================
.rdata$r:0000236C
.rdata$r:0000236C ; Segment type: Pure data
.rdata$r:0000236C ; Segment permissions: Read
.rdata$r:0000236C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000236C                 assume cs:_rdata$r
.rdata$r:0000236C                 ;org 236Ch
.rdata$r:0000236C ; COMDAT (pick any)
.rdata$r:0000236C                 public ??_R1BA@?0A@EA@CMyUnknownImp@@8
.rdata$r:0000236C ; CMyUnknownImp::`RTTI Base Class Descriptor at (16, -1, 0, 64)'
.rdata$r:0000236C ??_R1BA@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:0000236C                                         ; DATA XREF: .rdata$r:0000210Co
.rdata$r:0000236C                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00002370                 db    0
.rdata$r:00002371                 db    0
.rdata$r:00002372                 db    0
.rdata$r:00002373                 db    0
.rdata$r:00002374                 db  10h
.rdata$r:00002375                 db    0
.rdata$r:00002376                 db    0
.rdata$r:00002377                 db    0
.rdata$r:00002378                 db 0FFh
.rdata$r:00002379                 db 0FFh
.rdata$r:0000237A                 db 0FFh
.rdata$r:0000237B                 db 0FFh
.rdata$r:0000237C                 db    0
.rdata$r:0000237D                 db    0
.rdata$r:0000237E                 db    0
.rdata$r:0000237F                 db    0
.rdata$r:00002380                 db  40h ; @
.rdata$r:00002381                 db    0
.rdata$r:00002382                 db    0
.rdata$r:00002383                 db    0
.rdata$r:00002384                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002384 _rdata$r        ends
.rdata$r:00002384
.rdata$r:00002388 ; ===========================================================================
.rdata$r:00002388
.rdata$r:00002388 ; Segment type: Pure data
.rdata$r:00002388 ; Segment permissions: Read
.rdata$r:00002388 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002388                 assume cs:_rdata$r
.rdata$r:00002388                 ;org 2388h
.rdata$r:00002388 ; COMDAT (pick any)
.rdata$r:00002388                 public ??_R4CCopyCoder@NCompress@@6BICompressSetInStream@@@
.rdata$r:00002388 ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ICompressSetInStream'}
.rdata$r:00002388 ??_R4CCopyCoder@NCompress@@6BICompressSetInStream@@@ db    0
.rdata$r:00002388                                         ; DATA XREF: .rdata:00002074o
.rdata$r:00002389                 db    0
.rdata$r:0000238A                 db    0
.rdata$r:0000238B                 db    0
.rdata$r:0000238C                 db    4
.rdata$r:0000238D                 db    0
.rdata$r:0000238E                 db    0
.rdata$r:0000238F                 db    0
.rdata$r:00002390                 db    0
.rdata$r:00002391                 db    0
.rdata$r:00002392                 db    0
.rdata$r:00002393                 db    0
.rdata$r:00002394                 dd offset ??_R0?AVCCopyCoder@NCompress@@@8 ; NCompress::CCopyCoder `RTTI Type Descriptor'
.rdata$r:00002398                 dd offset ??_R3CCopyCoder@NCompress@@8 ; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002398 _rdata$r        ends
.rdata$r:00002398
.rdata$r:0000239C ; ===========================================================================
.rdata$r:0000239C
.rdata$r:0000239C ; Segment type: Pure data
.rdata$r:0000239C ; Segment permissions: Read
.rdata$r:0000239C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000239C                 assume cs:_rdata$r
.rdata$r:0000239C                 ;org 239Ch
.rdata$r:0000239C ; COMDAT (pick any)
.rdata$r:0000239C                 public ??_R4CCopyCoder@NCompress@@6BISequentialInStream@@@
.rdata$r:0000239C ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ISequentialInStream'}
.rdata$r:0000239C ??_R4CCopyCoder@NCompress@@6BISequentialInStream@@@ db    0
.rdata$r:0000239C                                         ; DATA XREF: .rdata:00002060o
.rdata$r:0000239D                 db    0
.rdata$r:0000239E                 db    0
.rdata$r:0000239F                 db    0
.rdata$r:000023A0                 db    8
.rdata$r:000023A1                 db    0
.rdata$r:000023A2                 db    0
.rdata$r:000023A3                 db    0
.rdata$r:000023A4                 db    0
.rdata$r:000023A5                 db    0
.rdata$r:000023A6                 db    0
.rdata$r:000023A7                 db    0
.rdata$r:000023A8                 dd offset ??_R0?AVCCopyCoder@NCompress@@@8 ; NCompress::CCopyCoder `RTTI Type Descriptor'
.rdata$r:000023AC                 dd offset ??_R3CCopyCoder@NCompress@@8 ; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000023AC _rdata$r        ends
.rdata$r:000023AC
.rdata$r:000023B0 ; ===========================================================================
.rdata$r:000023B0
.rdata$r:000023B0 ; Segment type: Pure data
.rdata$r:000023B0 ; Segment permissions: Read
.rdata$r:000023B0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000023B0                 assume cs:_rdata$r
.rdata$r:000023B0                 ;org 23B0h
.rdata$r:000023B0 ; COMDAT (pick any)
.rdata$r:000023B0                 public ??_R4CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@
.rdata$r:000023B0 ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ICompressGetInStreamProcessedSize'}
.rdata$r:000023B0 ??_R4CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ db    0
.rdata$r:000023B0                                         ; DATA XREF: .rdata:0000204Co
.rdata$r:000023B1                 db    0
.rdata$r:000023B2                 db    0
.rdata$r:000023B3                 db    0
.rdata$r:000023B4                 db  0Ch
.rdata$r:000023B5                 db    0
.rdata$r:000023B6                 db    0
.rdata$r:000023B7                 db    0
.rdata$r:000023B8                 db    0
.rdata$r:000023B9                 db    0
.rdata$r:000023BA                 db    0
.rdata$r:000023BB                 db    0
.rdata$r:000023BC                 dd offset ??_R0?AVCCopyCoder@NCompress@@@8 ; NCompress::CCopyCoder `RTTI Type Descriptor'
.rdata$r:000023C0                 dd offset ??_R3CCopyCoder@NCompress@@8 ; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000023C0 _rdata$r        ends
.rdata$r:000023C0
.text:000023C4 ; ===========================================================================
.text:000023C4
.text:000023C4 ; Segment type: Pure code
.text:000023C4 ; Segment permissions: Read/Execute
.text:000023C4 _text           segment para public 'CODE' use32
.text:000023C4                 assume cs:_text
.text:000023C4                 ;org 23C4h
.text:000023C4 ; COMDAT (pick any)
.text:000023C4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000023C4
.text:000023C4 ; =============== S U B R O U T I N E =======================================
.text:000023C4
.text:000023C4 ; Attributes: bp-based frame
.text:000023C4
.text:000023C4 ; _DWORD __thiscall ISequentialInStream::ISequentialInStream(ISequentialInStream *__hidden this)
.text:000023C4                 public ??0ISequentialInStream@@QAE@XZ
.text:000023C4 ??0ISequentialInStream@@QAE@XZ proc near
.text:000023C4                                         ; CODE XREF: NCompress::CCopyCoder::CCopyCoder(void)+27p
.text:000023C4                                         ; IInStream::IInStream(void)+11p
.text:000023C4
.text:000023C4 var_4           = dword ptr -4
.text:000023C4
.text:000023C4                 push    ebp
.text:000023C5                 mov     ebp, esp
.text:000023C7                 push    ecx
.text:000023C8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000023CF                 mov     [ebp+var_4], ecx
.text:000023D2                 mov     ecx, [ebp+var_4]
.text:000023D5                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:000023DA                 mov     eax, [ebp+var_4]
.text:000023DD                 mov     dword ptr [eax], offset ??_7ISequentialInStream@@6B@ ; const ISequentialInStream::`vftable'
.text:000023E3                 mov     eax, [ebp+var_4]
.text:000023E6                 add     esp, 4
.text:000023E9                 cmp     ebp, esp
.text:000023EB                 call    __RTC_CheckEsp
.text:000023F0                 mov     esp, ebp
.text:000023F2                 pop     ebp
.text:000023F3                 retn
.text:000023F3 ??0ISequentialInStream@@QAE@XZ endp
.text:000023F3
.text:000023F3 _text           ends
.text:000023F3
.rdata:000023F4 ; ===========================================================================
.rdata:000023F4
.rdata:000023F4 ; Segment type: Pure data
.rdata:000023F4 ; Segment permissions: Read
.rdata:000023F4 _rdata          segment dword public 'DATA' use32
.rdata:000023F4                 assume cs:_rdata
.rdata:000023F4                 ;org 23F4h
.rdata:000023F4 ; COMDAT (pick largest)
.rdata:000023F4                 dd offset ??_R4ISequentialInStream@@6B@ ; const ISequentialInStream::`RTTI Complete Object Locator'
.rdata:000023F8                 public ??_7ISequentialInStream@@6B@
.rdata:000023F8 ; const ISequentialInStream::`vftable'
.rdata:000023F8 ??_7ISequentialInStream@@6B@ dd offset __purecall
.rdata:000023F8                                         ; DATA XREF: ISequentialInStream::ISequentialInStream(void)+19o
.rdata:000023FC                 dd offset __purecall
.rdata:00002400                 dd offset __purecall
.rdata:00002404                 dd offset __purecall
.rdata:00002404 _rdata          ends
.rdata:00002404
.rdata$r:00002408 ; ===========================================================================
.rdata$r:00002408
.rdata$r:00002408 ; Segment type: Pure data
.rdata$r:00002408 ; Segment permissions: Read
.rdata$r:00002408 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002408                 assume cs:_rdata$r
.rdata$r:00002408                 ;org 2408h
.rdata$r:00002408 ; COMDAT (pick any)
.rdata$r:00002408                 public ??_R4ISequentialInStream@@6B@
.rdata$r:00002408 ; const ISequentialInStream::`RTTI Complete Object Locator'
.rdata$r:00002408 ??_R4ISequentialInStream@@6B@ db    0   ; DATA XREF: .rdata:000023F4o
.rdata$r:00002409                 db    0
.rdata$r:0000240A                 db    0
.rdata$r:0000240B                 db    0
.rdata$r:0000240C                 db    0
.rdata$r:0000240D                 db    0
.rdata$r:0000240E                 db    0
.rdata$r:0000240F                 db    0
.rdata$r:00002410                 db    0
.rdata$r:00002411                 db    0
.rdata$r:00002412                 db    0
.rdata$r:00002413                 db    0
.rdata$r:00002414                 dd offset ??_R0?AUISequentialInStream@@@8 ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:00002418                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002418 _rdata$r        ends
.rdata$r:00002418
.text:0000241C ; ===========================================================================
.text:0000241C
.text:0000241C ; Segment type: Pure code
.text:0000241C ; Segment permissions: Read/Execute
.text:0000241C _text           segment para public 'CODE' use32
.text:0000241C                 assume cs:_text
.text:0000241C                 ;org 241Ch
.text:0000241C ; COMDAT (pick any)
.text:0000241C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000241C
.text:0000241C ; =============== S U B R O U T I N E =======================================
.text:0000241C
.text:0000241C ; Attributes: bp-based frame
.text:0000241C
.text:0000241C ; __int32 __stdcall NCompress::CCopyCoder::QueryInterface(NCompress::CCopyCoder *this, const struct _GUID *Buf1, void **)
.text:0000241C                 public ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z
.text:0000241C ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z proc near
.text:0000241C                                         ; CODE XREF: [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j
.text:0000241C                                         ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)+5j ...
.text:0000241C
.text:0000241C var_C           = dword ptr -0Ch
.text:0000241C var_8           = dword ptr -8
.text:0000241C var_4           = dword ptr -4
.text:0000241C this            = dword ptr  8
.text:0000241C Buf1            = dword ptr  0Ch
.text:0000241C arg_8           = dword ptr  10h
.text:0000241C
.text:0000241C                 push    ebp
.text:0000241D                 mov     ebp, esp
.text:0000241F                 sub     esp, 0Ch
.text:00002422                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00002429                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002430                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002437                 mov     eax, [ebp+arg_8]
.text:0000243A                 mov     dword ptr [eax], 0
.text:00002440                 push    offset _IID_IUnknown ; Buf2
.text:00002445                 mov     ecx, [ebp+Buf1]
.text:00002448                 push    ecx             ; Buf1
.text:00002449                 call    ___@8           ; __(x,x)
.text:0000244E                 test    eax, eax
.text:00002450                 jz      short loc_245F
.text:00002452                 mov     edx, [ebp+arg_8]
.text:00002455                 mov     eax, [ebp+this]
.text:00002458                 mov     [edx], eax
.text:0000245A                 jmp     loc_2521
.text:0000245F ; ---------------------------------------------------------------------------
.text:0000245F
.text:0000245F loc_245F:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+34j
.text:0000245F                 push    offset _IID_ICompressCoder ; Buf2
.text:00002464                 mov     ecx, [ebp+Buf1]
.text:00002467                 push    ecx             ; Buf1
.text:00002468                 call    ___@8           ; __(x,x)
.text:0000246D                 test    eax, eax
.text:0000246F                 jz      short loc_247E
.text:00002471                 mov     edx, [ebp+arg_8]
.text:00002474                 mov     eax, [ebp+this]
.text:00002477                 mov     [edx], eax
.text:00002479                 jmp     loc_2521
.text:0000247E ; ---------------------------------------------------------------------------
.text:0000247E
.text:0000247E loc_247E:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+53j
.text:0000247E                 push    offset _IID_ICompressSetInStream ; Buf2
.text:00002483                 mov     ecx, [ebp+Buf1]
.text:00002486                 push    ecx             ; Buf1
.text:00002487                 call    ___@8           ; __(x,x)
.text:0000248C                 test    eax, eax
.text:0000248E                 jz      short loc_24B2
.text:00002490                 cmp     [ebp+this], 0
.text:00002494                 jz      short loc_24A1
.text:00002496                 mov     edx, [ebp+this]
.text:00002499                 add     edx, 4
.text:0000249C                 mov     [ebp+var_4], edx
.text:0000249F                 jmp     short loc_24A8
.text:000024A1 ; ---------------------------------------------------------------------------
.text:000024A1
.text:000024A1 loc_24A1:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+78j
.text:000024A1                 mov     [ebp+var_4], 0
.text:000024A8
.text:000024A8 loc_24A8:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+83j
.text:000024A8                 mov     eax, [ebp+arg_8]
.text:000024AB                 mov     ecx, [ebp+var_4]
.text:000024AE                 mov     [eax], ecx
.text:000024B0                 jmp     short loc_2521
.text:000024B2 ; ---------------------------------------------------------------------------
.text:000024B2
.text:000024B2 loc_24B2:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+72j
.text:000024B2                 push    offset _IID_ISequentialInStream ; Buf2
.text:000024B7                 mov     edx, [ebp+Buf1]
.text:000024BA                 push    edx             ; Buf1
.text:000024BB                 call    ___@8           ; __(x,x)
.text:000024C0                 test    eax, eax
.text:000024C2                 jz      short loc_24E6
.text:000024C4                 cmp     [ebp+this], 0
.text:000024C8                 jz      short loc_24D5
.text:000024CA                 mov     eax, [ebp+this]
.text:000024CD                 add     eax, 8
.text:000024D0                 mov     [ebp+var_8], eax
.text:000024D3                 jmp     short loc_24DC
.text:000024D5 ; ---------------------------------------------------------------------------
.text:000024D5
.text:000024D5 loc_24D5:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+ACj
.text:000024D5                 mov     [ebp+var_8], 0
.text:000024DC
.text:000024DC loc_24DC:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+B7j
.text:000024DC                 mov     ecx, [ebp+arg_8]
.text:000024DF                 mov     edx, [ebp+var_8]
.text:000024E2                 mov     [ecx], edx
.text:000024E4                 jmp     short loc_2521
.text:000024E6 ; ---------------------------------------------------------------------------
.text:000024E6
.text:000024E6 loc_24E6:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+A6j
.text:000024E6                 push    offset _IID_ICompressGetInStreamProcessedSize ; Buf2
.text:000024EB                 mov     eax, [ebp+Buf1]
.text:000024EE                 push    eax             ; Buf1
.text:000024EF                 call    ___@8           ; __(x,x)
.text:000024F4                 test    eax, eax
.text:000024F6                 jz      short loc_251A
.text:000024F8                 cmp     [ebp+this], 0
.text:000024FC                 jz      short loc_2509
.text:000024FE                 mov     ecx, [ebp+this]
.text:00002501                 add     ecx, 0Ch
.text:00002504                 mov     [ebp+var_C], ecx
.text:00002507                 jmp     short loc_2510
.text:00002509 ; ---------------------------------------------------------------------------
.text:00002509
.text:00002509 loc_2509:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+E0j
.text:00002509                 mov     [ebp+var_C], 0
.text:00002510
.text:00002510 loc_2510:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+EBj
.text:00002510                 mov     edx, [ebp+arg_8]
.text:00002513                 mov     eax, [ebp+var_C]
.text:00002516                 mov     [edx], eax
.text:00002518                 jmp     short loc_2521
.text:0000251A ; ---------------------------------------------------------------------------
.text:0000251A
.text:0000251A loc_251A:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+DAj
.text:0000251A                 mov     eax, 80004002h
.text:0000251F                 jmp     short loc_2532
.text:00002521 ; ---------------------------------------------------------------------------
.text:00002521
.text:00002521 loc_2521:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+3Ej
.text:00002521                                         ; NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+5Dj ...
.text:00002521                 mov     ecx, [ebp+this]
.text:00002524                 mov     edx, [ecx+10h]
.text:00002527                 add     edx, 1
.text:0000252A                 mov     eax, [ebp+this]
.text:0000252D                 mov     [eax+10h], edx
.text:00002530                 xor     eax, eax
.text:00002532
.text:00002532 loc_2532:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+103j
.text:00002532                 add     esp, 0Ch
.text:00002535                 cmp     ebp, esp
.text:00002537                 call    __RTC_CheckEsp
.text:0000253C                 mov     esp, ebp
.text:0000253E                 pop     ebp
.text:0000253F                 retn    0Ch
.text:0000253F ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z endp
.text:0000253F
.text:0000253F ; ---------------------------------------------------------------------------
.text:00002542                 align 4
.text:00002542 _text           ends
.text:00002542
.text:00002544 ; ===========================================================================
.text:00002544
.text:00002544 ; Segment type: Pure code
.text:00002544 ; Segment permissions: Read/Execute
.text:00002544 _text           segment para public 'CODE' use32
.text:00002544                 assume cs:_text
.text:00002544                 ;org 2544h
.text:00002544 ; COMDAT (pick any)
.text:00002544                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002544
.text:00002544 ; =============== S U B R O U T I N E =======================================
.text:00002544
.text:00002544 ; Attributes: bp-based frame
.text:00002544
.text:00002544 ; unsigned __int32 __stdcall NCompress::CCopyCoder::AddRef(NCompress::CCopyCoder *this)
.text:00002544                 public ?AddRef@CCopyCoder@NCompress@@UAGKXZ
.text:00002544 ?AddRef@CCopyCoder@NCompress@@UAGKXZ proc near
.text:00002544                                         ; CODE XREF: [thunk]:NCompress::CCopyCoder::AddRef`adjustor{4}' (void)+5j
.text:00002544                                         ; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{8}' (void)+5j ...
.text:00002544
.text:00002544 var_4           = dword ptr -4
.text:00002544 this            = dword ptr  8
.text:00002544
.text:00002544                 push    ebp
.text:00002545                 mov     ebp, esp
.text:00002547                 push    ecx
.text:00002548                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000254F                 mov     eax, [ebp+this]
.text:00002552                 mov     ecx, [eax+10h]
.text:00002555                 add     ecx, 1
.text:00002558                 mov     [ebp+var_4], ecx
.text:0000255B                 mov     edx, [ebp+this]
.text:0000255E                 mov     eax, [ebp+var_4]
.text:00002561                 mov     [edx+10h], eax
.text:00002564                 mov     eax, [ebp+var_4]
.text:00002567                 mov     esp, ebp
.text:00002569                 pop     ebp
.text:0000256A                 retn    4
.text:0000256A ?AddRef@CCopyCoder@NCompress@@UAGKXZ endp
.text:0000256A
.text:0000256A ; ---------------------------------------------------------------------------
.text:0000256D                 align 10h
.text:0000256D _text           ends
.text:0000256D
.text:00002570 ; ===========================================================================
.text:00002570
.text:00002570 ; Segment type: Pure code
.text:00002570 ; Segment permissions: Read/Execute
.text:00002570 _text           segment para public 'CODE' use32
.text:00002570                 assume cs:_text
.text:00002570                 ;org 2570h
.text:00002570 ; COMDAT (pick any)
.text:00002570                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002570
.text:00002570 ; =============== S U B R O U T I N E =======================================
.text:00002570
.text:00002570 ; Attributes: bp-based frame
.text:00002570
.text:00002570 ; unsigned __int32 __stdcall NCompress::CCopyCoder::Release(NCompress::CCopyCoder *this)
.text:00002570                 public ?Release@CCopyCoder@NCompress@@UAGKXZ
.text:00002570 ?Release@CCopyCoder@NCompress@@UAGKXZ proc near
.text:00002570                                         ; CODE XREF: [thunk]:NCompress::CCopyCoder::Release`adjustor{4}' (void)+5j
.text:00002570                                         ; [thunk]:NCompress::CCopyCoder::Release`adjustor{8}' (void)+5j ...
.text:00002570
.text:00002570 var_10          = dword ptr -10h
.text:00002570 var_C           = dword ptr -0Ch
.text:00002570 var_8           = dword ptr -8
.text:00002570 var_4           = dword ptr -4
.text:00002570 this            = dword ptr  8
.text:00002570
.text:00002570                 push    ebp
.text:00002571                 mov     ebp, esp
.text:00002573                 sub     esp, 10h
.text:00002576                 mov     eax, 0CCCCCCCCh
.text:0000257B                 mov     [ebp+var_10], eax
.text:0000257E                 mov     [ebp+var_C], eax
.text:00002581                 mov     [ebp+var_8], eax
.text:00002584                 mov     [ebp+var_4], eax
.text:00002587                 mov     eax, [ebp+this]
.text:0000258A                 mov     ecx, [eax+10h]
.text:0000258D                 sub     ecx, 1
.text:00002590                 mov     [ebp+var_C], ecx
.text:00002593                 mov     edx, [ebp+this]
.text:00002596                 mov     eax, [ebp+var_C]
.text:00002599                 mov     [edx+10h], eax
.text:0000259C                 cmp     [ebp+var_C], 0
.text:000025A0                 jz      short loc_25AA
.text:000025A2                 mov     ecx, [ebp+this]
.text:000025A5                 mov     eax, [ecx+10h]
.text:000025A8                 jmp     short loc_25D4
.text:000025AA ; ---------------------------------------------------------------------------
.text:000025AA
.text:000025AA loc_25AA:                               ; CODE XREF: NCompress::CCopyCoder::Release(void)+30j
.text:000025AA                 mov     edx, [ebp+this]
.text:000025AD                 mov     [ebp+var_8], edx
.text:000025B0                 mov     eax, [ebp+var_8]
.text:000025B3                 mov     [ebp+var_4], eax
.text:000025B6                 cmp     [ebp+var_4], 0
.text:000025BA                 jz      short loc_25CB
.text:000025BC                 push    1
.text:000025BE                 mov     ecx, [ebp+var_4]
.text:000025C1                 call    ??_GCCopyCoder@NCompress@@QAEPAXI@Z ; NCompress::CCopyCoder::`scalar deleting destructor'(uint)
.text:000025C6                 mov     [ebp+var_10], eax
.text:000025C9                 jmp     short loc_25D2
.text:000025CB ; ---------------------------------------------------------------------------
.text:000025CB
.text:000025CB loc_25CB:                               ; CODE XREF: NCompress::CCopyCoder::Release(void)+4Aj
.text:000025CB                 mov     [ebp+var_10], 0
.text:000025D2
.text:000025D2 loc_25D2:                               ; CODE XREF: NCompress::CCopyCoder::Release(void)+59j
.text:000025D2                 xor     eax, eax
.text:000025D4
.text:000025D4 loc_25D4:                               ; CODE XREF: NCompress::CCopyCoder::Release(void)+38j
.text:000025D4                 add     esp, 10h
.text:000025D7                 cmp     ebp, esp
.text:000025D9                 call    __RTC_CheckEsp
.text:000025DE                 mov     esp, ebp
.text:000025E0                 pop     ebp
.text:000025E1                 retn    4
.text:000025E1 ?Release@CCopyCoder@NCompress@@UAGKXZ endp
.text:000025E1
.text:000025E1 _text           ends
.text:000025E1
.text:000025E4 ; ===========================================================================
.text:000025E4
.text:000025E4 ; Segment type: Pure code
.text:000025E4 ; Segment permissions: Read/Execute
.text:000025E4 _text           segment para public 'CODE' use32
.text:000025E4                 assume cs:_text
.text:000025E4                 ;org 25E4h
.text:000025E4 ; COMDAT (pick any)
.text:000025E4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000025E4
.text:000025E4 ; =============== S U B R O U T I N E =======================================
.text:000025E4
.text:000025E4 ; Attributes: bp-based frame
.text:000025E4
.text:000025E4 ; _DWORD __thiscall ICompressCoder::ICompressCoder(ICompressCoder *__hidden this)
.text:000025E4                 public ??0ICompressCoder@@QAE@XZ
.text:000025E4 ??0ICompressCoder@@QAE@XZ proc near     ; CODE XREF: NCompress::CCopyCoder::CCopyCoder(void)+11p
.text:000025E4                                         ; NArchive::NZip::CLzmaEncoder::CLzmaEncoder(void)+11p
.text:000025E4
.text:000025E4 var_4           = dword ptr -4
.text:000025E4
.text:000025E4                 push    ebp
.text:000025E5                 mov     ebp, esp
.text:000025E7                 push    ecx
.text:000025E8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000025EF                 mov     [ebp+var_4], ecx
.text:000025F2                 mov     ecx, [ebp+var_4]
.text:000025F5                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:000025FA                 mov     eax, [ebp+var_4]
.text:000025FD                 mov     dword ptr [eax], offset ??_7ICompressCoder@@6B@ ; const ICompressCoder::`vftable'
.text:00002603                 mov     eax, [ebp+var_4]
.text:00002606                 add     esp, 4
.text:00002609                 cmp     ebp, esp
.text:0000260B                 call    __RTC_CheckEsp
.text:00002610                 mov     esp, ebp
.text:00002612                 pop     ebp
.text:00002613                 retn
.text:00002613 ??0ICompressCoder@@QAE@XZ endp
.text:00002613
.text:00002613 _text           ends
.text:00002613
.rdata:00002614 ; ===========================================================================
.rdata:00002614
.rdata:00002614 ; Segment type: Pure data
.rdata:00002614 ; Segment permissions: Read
.rdata:00002614 _rdata          segment dword public 'DATA' use32
.rdata:00002614                 assume cs:_rdata
.rdata:00002614                 ;org 2614h
.rdata:00002614 ; COMDAT (pick largest)
.rdata:00002614                 dd offset ??_R4ICompressCoder@@6B@ ; const ICompressCoder::`RTTI Complete Object Locator'
.rdata:00002618                 public ??_7ICompressCoder@@6B@
.rdata:00002618 ; const ICompressCoder::`vftable'
.rdata:00002618 ??_7ICompressCoder@@6B@ dd offset __purecall
.rdata:00002618                                         ; DATA XREF: ICompressCoder::ICompressCoder(void)+19o
.rdata:0000261C                 dd offset __purecall
.rdata:00002620                 dd offset __purecall
.rdata:00002624                 dd offset __purecall
.rdata:00002624 _rdata          ends
.rdata:00002624
.rdata$r:00002628 ; ===========================================================================
.rdata$r:00002628
.rdata$r:00002628 ; Segment type: Pure data
.rdata$r:00002628 ; Segment permissions: Read
.rdata$r:00002628 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002628                 assume cs:_rdata$r
.rdata$r:00002628                 ;org 2628h
.rdata$r:00002628 ; COMDAT (pick any)
.rdata$r:00002628                 public ??_R4ICompressCoder@@6B@
.rdata$r:00002628 ; const ICompressCoder::`RTTI Complete Object Locator'
.rdata$r:00002628 ??_R4ICompressCoder@@6B@ db    0        ; DATA XREF: .rdata:00002614o
.rdata$r:00002629                 db    0
.rdata$r:0000262A                 db    0
.rdata$r:0000262B                 db    0
.rdata$r:0000262C                 db    0
.rdata$r:0000262D                 db    0
.rdata$r:0000262E                 db    0
.rdata$r:0000262F                 db    0
.rdata$r:00002630                 db    0
.rdata$r:00002631                 db    0
.rdata$r:00002632                 db    0
.rdata$r:00002633                 db    0
.rdata$r:00002634                 dd offset ??_R0?AUICompressCoder@@@8 ; ICompressCoder `RTTI Type Descriptor'
.rdata$r:00002638                 dd offset ??_R3ICompressCoder@@8 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002638 _rdata$r        ends
.rdata$r:00002638
.text:0000263C ; ===========================================================================
.text:0000263C
.text:0000263C ; Segment type: Pure code
.text:0000263C ; Segment permissions: Read/Execute
.text:0000263C _text           segment para public 'CODE' use32
.text:0000263C                 assume cs:_text
.text:0000263C                 ;org 263Ch
.text:0000263C ; COMDAT (pick any)
.text:0000263C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000263C
.text:0000263C ; =============== S U B R O U T I N E =======================================
.text:0000263C
.text:0000263C ; Attributes: bp-based frame
.text:0000263C
.text:0000263C ; _DWORD __thiscall ICompressSetInStream::ICompressSetInStream(ICompressSetInStream *__hidden this)
.text:0000263C                 public ??0ICompressSetInStream@@QAE@XZ
.text:0000263C ??0ICompressSetInStream@@QAE@XZ proc near
.text:0000263C                                         ; CODE XREF: NCompress::CCopyCoder::CCopyCoder(void)+1Cp
.text:0000263C
.text:0000263C var_4           = dword ptr -4
.text:0000263C
.text:0000263C                 push    ebp
.text:0000263D                 mov     ebp, esp
.text:0000263F                 push    ecx
.text:00002640                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002647                 mov     [ebp+var_4], ecx
.text:0000264A                 mov     ecx, [ebp+var_4]
.text:0000264D                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00002652                 mov     eax, [ebp+var_4]
.text:00002655                 mov     dword ptr [eax], offset ??_7ICompressSetInStream@@6B@ ; const ICompressSetInStream::`vftable'
.text:0000265B                 mov     eax, [ebp+var_4]
.text:0000265E                 add     esp, 4
.text:00002661                 cmp     ebp, esp
.text:00002663                 call    __RTC_CheckEsp
.text:00002668                 mov     esp, ebp
.text:0000266A                 pop     ebp
.text:0000266B                 retn
.text:0000266B ??0ICompressSetInStream@@QAE@XZ endp
.text:0000266B
.text:0000266B _text           ends
.text:0000266B
.rdata:0000266C ; ===========================================================================
.rdata:0000266C
.rdata:0000266C ; Segment type: Pure data
.rdata:0000266C ; Segment permissions: Read
.rdata:0000266C _rdata          segment dword public 'DATA' use32
.rdata:0000266C                 assume cs:_rdata
.rdata:0000266C                 ;org 266Ch
.rdata:0000266C ; COMDAT (pick largest)
.rdata:0000266C                 dd offset ??_R4ICompressSetInStream@@6B@ ; const ICompressSetInStream::`RTTI Complete Object Locator'
.rdata:00002670                 public ??_7ICompressSetInStream@@6B@
.rdata:00002670 ; const ICompressSetInStream::`vftable'
.rdata:00002670 ??_7ICompressSetInStream@@6B@ dd offset __purecall
.rdata:00002670                                         ; DATA XREF: ICompressSetInStream::ICompressSetInStream(void)+19o
.rdata:00002674                 dd offset __purecall
.rdata:00002678                 dd offset __purecall
.rdata:0000267C                 dd offset __purecall
.rdata:00002680                 dd offset __purecall
.rdata:00002680 _rdata          ends
.rdata:00002680
.rdata$r:00002684 ; ===========================================================================
.rdata$r:00002684
.rdata$r:00002684 ; Segment type: Pure data
.rdata$r:00002684 ; Segment permissions: Read
.rdata$r:00002684 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002684                 assume cs:_rdata$r
.rdata$r:00002684                 ;org 2684h
.rdata$r:00002684 ; COMDAT (pick any)
.rdata$r:00002684                 public ??_R4ICompressSetInStream@@6B@
.rdata$r:00002684 ; const ICompressSetInStream::`RTTI Complete Object Locator'
.rdata$r:00002684 ??_R4ICompressSetInStream@@6B@ db    0  ; DATA XREF: .rdata:0000266Co
.rdata$r:00002685                 db    0
.rdata$r:00002686                 db    0
.rdata$r:00002687                 db    0
.rdata$r:00002688                 db    0
.rdata$r:00002689                 db    0
.rdata$r:0000268A                 db    0
.rdata$r:0000268B                 db    0
.rdata$r:0000268C                 db    0
.rdata$r:0000268D                 db    0
.rdata$r:0000268E                 db    0
.rdata$r:0000268F                 db    0
.rdata$r:00002690                 dd offset ??_R0?AUICompressSetInStream@@@8 ; ICompressSetInStream `RTTI Type Descriptor'
.rdata$r:00002694                 dd offset ??_R3ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002694 _rdata$r        ends
.rdata$r:00002694
.text:00002698 ; ===========================================================================
.text:00002698
.text:00002698 ; Segment type: Pure code
.text:00002698 ; Segment permissions: Read/Execute
.text:00002698 _text           segment para public 'CODE' use32
.text:00002698                 assume cs:_text
.text:00002698                 ;org 2698h
.text:00002698 ; COMDAT (pick any)
.text:00002698                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002698
.text:00002698 ; =============== S U B R O U T I N E =======================================
.text:00002698
.text:00002698 ; Attributes: bp-based frame
.text:00002698
.text:00002698 ; _DWORD __thiscall ICompressGetInStreamProcessedSize::ICompressGetInStreamProcessedSize(ICompressGetInStreamProcessedSize *__hidden this)
.text:00002698                 public ??0ICompressGetInStreamProcessedSize@@QAE@XZ
.text:00002698 ??0ICompressGetInStreamProcessedSize@@QAE@XZ proc near
.text:00002698                                         ; CODE XREF: NCompress::CCopyCoder::CCopyCoder(void)+32p
.text:00002698
.text:00002698 var_4           = dword ptr -4
.text:00002698
.text:00002698                 push    ebp
.text:00002699                 mov     ebp, esp
.text:0000269B                 push    ecx
.text:0000269C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000026A3                 mov     [ebp+var_4], ecx
.text:000026A6                 mov     ecx, [ebp+var_4]
.text:000026A9                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:000026AE                 mov     eax, [ebp+var_4]
.text:000026B1                 mov     dword ptr [eax], offset ??_7ICompressGetInStreamProcessedSize@@6B@ ; const ICompressGetInStreamProcessedSize::`vftable'
.text:000026B7                 mov     eax, [ebp+var_4]
.text:000026BA                 add     esp, 4
.text:000026BD                 cmp     ebp, esp
.text:000026BF                 call    __RTC_CheckEsp
.text:000026C4                 mov     esp, ebp
.text:000026C6                 pop     ebp
.text:000026C7                 retn
.text:000026C7 ??0ICompressGetInStreamProcessedSize@@QAE@XZ endp
.text:000026C7
.text:000026C7 _text           ends
.text:000026C7
.rdata:000026C8 ; ===========================================================================
.rdata:000026C8
.rdata:000026C8 ; Segment type: Pure data
.rdata:000026C8 ; Segment permissions: Read
.rdata:000026C8 _rdata          segment dword public 'DATA' use32
.rdata:000026C8                 assume cs:_rdata
.rdata:000026C8                 ;org 26C8h
.rdata:000026C8 ; COMDAT (pick largest)
.rdata:000026C8                 dd offset ??_R4ICompressGetInStreamProcessedSize@@6B@ ; const ICompressGetInStreamProcessedSize::`RTTI Complete Object Locator'
.rdata:000026CC                 public ??_7ICompressGetInStreamProcessedSize@@6B@
.rdata:000026CC ; const ICompressGetInStreamProcessedSize::`vftable'
.rdata:000026CC ??_7ICompressGetInStreamProcessedSize@@6B@ dd offset __purecall
.rdata:000026CC                                         ; DATA XREF: ICompressGetInStreamProcessedSize::ICompressGetInStreamProcessedSize(void)+19o
.rdata:000026D0                 dd offset __purecall
.rdata:000026D4                 dd offset __purecall
.rdata:000026D8                 dd offset __purecall
.rdata:000026D8 _rdata          ends
.rdata:000026D8
.rdata$r:000026DC ; ===========================================================================
.rdata$r:000026DC
.rdata$r:000026DC ; Segment type: Pure data
.rdata$r:000026DC ; Segment permissions: Read
.rdata$r:000026DC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000026DC                 assume cs:_rdata$r
.rdata$r:000026DC                 ;org 26DCh
.rdata$r:000026DC ; COMDAT (pick any)
.rdata$r:000026DC                 public ??_R4ICompressGetInStreamProcessedSize@@6B@
.rdata$r:000026DC ; const ICompressGetInStreamProcessedSize::`RTTI Complete Object Locator'
.rdata$r:000026DC ??_R4ICompressGetInStreamProcessedSize@@6B@ db    0
.rdata$r:000026DC                                         ; DATA XREF: .rdata:000026C8o
.rdata$r:000026DD                 db    0
.rdata$r:000026DE                 db    0
.rdata$r:000026DF                 db    0
.rdata$r:000026E0                 db    0
.rdata$r:000026E1                 db    0
.rdata$r:000026E2                 db    0
.rdata$r:000026E3                 db    0
.rdata$r:000026E4                 db    0
.rdata$r:000026E5                 db    0
.rdata$r:000026E6                 db    0
.rdata$r:000026E7                 db    0
.rdata$r:000026E8                 dd offset ??_R0?AUICompressGetInStreamProcessedSize@@@8 ; ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
.rdata$r:000026EC                 dd offset ??_R3ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:000026EC _rdata$r        ends
.rdata$r:000026EC
.text:000026F0 ; ===========================================================================
.text:000026F0
.text:000026F0 ; Segment type: Pure code
.text:000026F0 ; Segment permissions: Read/Execute
.text:000026F0 _text           segment para public 'CODE' use32
.text:000026F0                 assume cs:_text
.text:000026F0                 ;org 26F0h
.text:000026F0 ; COMDAT (pick any)
.text:000026F0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000026F0
.text:000026F0 ; =============== S U B R O U T I N E =======================================
.text:000026F0
.text:000026F0 ; Attributes: bp-based frame
.text:000026F0
.text:000026F0 ; public: void * __thiscall NCompress::CCopyCoder::`scalar deleting destructor'(unsigned int)
.text:000026F0                 public ??_GCCopyCoder@NCompress@@QAEPAXI@Z
.text:000026F0 ??_GCCopyCoder@NCompress@@QAEPAXI@Z proc near
.text:000026F0                                         ; CODE XREF: NCompress::CCopyCoder::Release(void)+51p
.text:000026F0
.text:000026F0 var_4           = dword ptr -4
.text:000026F0 arg_0           = dword ptr  8
.text:000026F0
.text:000026F0                 push    ebp
.text:000026F1                 mov     ebp, esp
.text:000026F3                 push    ecx
.text:000026F4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000026FB                 mov     [ebp+var_4], ecx
.text:000026FE                 mov     ecx, [ebp+var_4] ; this
.text:00002701                 call    ??1CCopyCoder@NCompress@@QAE@XZ ; NCompress::CCopyCoder::~CCopyCoder(void)
.text:00002706                 mov     eax, [ebp+arg_0]
.text:00002709                 and     eax, 1
.text:0000270C                 jz      short loc_271A
.text:0000270E                 mov     ecx, [ebp+var_4]
.text:00002711                 push    ecx             ; void *
.text:00002712                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00002717                 add     esp, 4
.text:0000271A
.text:0000271A loc_271A:                               ; CODE XREF: NCompress::CCopyCoder::`scalar deleting destructor'(uint)+1Cj
.text:0000271A                 mov     eax, [ebp+var_4]
.text:0000271D                 add     esp, 4
.text:00002720                 cmp     ebp, esp
.text:00002722                 call    __RTC_CheckEsp
.text:00002727                 mov     esp, ebp
.text:00002729                 pop     ebp
.text:0000272A                 retn    4
.text:0000272A ??_GCCopyCoder@NCompress@@QAEPAXI@Z endp
.text:0000272A
.text:0000272A ; ---------------------------------------------------------------------------
.text:0000272D                 align 10h
.text:0000272D _text           ends
.text:0000272D
.text:00002730 ; ===========================================================================
.text:00002730
.text:00002730 ; Segment type: Pure code
.text:00002730 ; Segment permissions: Read/Execute
.text:00002730 _text           segment para public 'CODE' use32
.text:00002730                 assume cs:_text
.text:00002730                 ;org 2730h
.text:00002730 ; COMDAT (pick any)
.text:00002730                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002730
.text:00002730 ; =============== S U B R O U T I N E =======================================
.text:00002730
.text:00002730 ; Attributes: bp-based frame
.text:00002730
.text:00002730 ; unsigned int __thiscall NCrypto::NWzAes::CBaseCoder::GetAddPackSize(NCrypto::NWzAes::CBaseCoder *__hidden this)
.text:00002730                 public ?GetAddPackSize@CBaseCoder@NWzAes@NCrypto@@QBEIXZ
.text:00002730 ?GetAddPackSize@CBaseCoder@NWzAes@NCrypto@@QBEIXZ proc near
.text:00002730                                         ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+E72p
.text:00002730
.text:00002730 var_4           = dword ptr -4
.text:00002730
.text:00002730                 push    ebp
.text:00002731                 mov     ebp, esp
.text:00002733                 push    ecx
.text:00002734                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000273B                 mov     [ebp+var_4], ecx
.text:0000273E                 mov     ecx, [ebp+var_4] ; this
.text:00002741                 call    ?GetHeaderSize@CBaseCoder@NWzAes@NCrypto@@QBEIXZ ; NCrypto::NWzAes::CBaseCoder::GetHeaderSize(void)
.text:00002746                 add     eax, 0Ah
.text:00002749                 add     esp, 4
.text:0000274C                 cmp     ebp, esp
.text:0000274E                 call    __RTC_CheckEsp
.text:00002753                 mov     esp, ebp
.text:00002755                 pop     ebp
.text:00002756                 retn
.text:00002756 ?GetAddPackSize@CBaseCoder@NWzAes@NCrypto@@QBEIXZ endp
.text:00002756
.text:00002756 ; ---------------------------------------------------------------------------
.text:00002757                 align 4
.text:00002757 _text           ends
.text:00002757
.text:00002758 ; ===========================================================================
.text:00002758
.text:00002758 ; Segment type: Pure code
.text:00002758 ; Segment permissions: Read/Execute
.text:00002758 _text           segment para public 'CODE' use32
.text:00002758                 assume cs:_text
.text:00002758                 ;org 2758h
.text:00002758 ; COMDAT (pick any)
.text:00002758                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002758
.text:00002758 ; =============== S U B R O U T I N E =======================================
.text:00002758
.text:00002758 ; Attributes: bp-based frame
.text:00002758
.text:00002758 ; unsigned int __thiscall NCrypto::NWzAes::CBaseCoder::GetHeaderSize(NCrypto::NWzAes::CBaseCoder *__hidden this)
.text:00002758                 public ?GetHeaderSize@CBaseCoder@NWzAes@NCrypto@@QBEIXZ
.text:00002758 ?GetHeaderSize@CBaseCoder@NWzAes@NCrypto@@QBEIXZ proc near
.text:00002758                                         ; CODE XREF: NCrypto::NWzAes::CBaseCoder::GetAddPackSize(void)+11p
.text:00002758
.text:00002758 var_4           = dword ptr -4
.text:00002758
.text:00002758                 push    ebp
.text:00002759                 mov     ebp, esp
.text:0000275B                 push    ecx
.text:0000275C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002763                 mov     [ebp+var_4], ecx
.text:00002766                 mov     ecx, [ebp+var_4]
.text:00002769                 add     ecx, 0Ch        ; this
.text:0000276C                 call    ?GetSaltSize@CKeyInfo@NWzAes@NCrypto@@QBEIXZ ; NCrypto::NWzAes::CKeyInfo::GetSaltSize(void)
.text:00002771                 add     eax, 2
.text:00002774                 add     esp, 4
.text:00002777                 cmp     ebp, esp
.text:00002779                 call    __RTC_CheckEsp
.text:0000277E                 mov     esp, ebp
.text:00002780                 pop     ebp
.text:00002781                 retn
.text:00002781 ?GetHeaderSize@CBaseCoder@NWzAes@NCrypto@@QBEIXZ endp
.text:00002781
.text:00002781 ; ---------------------------------------------------------------------------
.text:00002782                 align 4
.text:00002782 _text           ends
.text:00002782
.text:00002784 ; ===========================================================================
.text:00002784
.text:00002784 ; Segment type: Pure code
.text:00002784 ; Segment permissions: Read/Execute
.text:00002784 _text           segment para public 'CODE' use32
.text:00002784                 assume cs:_text
.text:00002784                 ;org 2784h
.text:00002784 ; COMDAT (pick any)
.text:00002784                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002784
.text:00002784 ; =============== S U B R O U T I N E =======================================
.text:00002784
.text:00002784 ; Attributes: bp-based frame
.text:00002784
.text:00002784 ; unsigned int __thiscall NCrypto::NWzAes::CKeyInfo::GetSaltSize(NCrypto::NWzAes::CKeyInfo *__hidden this)
.text:00002784                 public ?GetSaltSize@CKeyInfo@NWzAes@NCrypto@@QBEIXZ
.text:00002784 ?GetSaltSize@CKeyInfo@NWzAes@NCrypto@@QBEIXZ proc near
.text:00002784                                         ; CODE XREF: NCrypto::NWzAes::CBaseCoder::GetHeaderSize(void)+14p
.text:00002784
.text:00002784 var_4           = dword ptr -4
.text:00002784
.text:00002784                 push    ebp
.text:00002785                 mov     ebp, esp
.text:00002787                 push    ecx
.text:00002788                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000278F                 mov     [ebp+var_4], ecx
.text:00002792                 mov     eax, [ebp+var_4]
.text:00002795                 mov     ecx, [eax]
.text:00002797                 lea     eax, ds:4[ecx*4]
.text:0000279E                 mov     esp, ebp
.text:000027A0                 pop     ebp
.text:000027A1                 retn
.text:000027A1 ?GetSaltSize@CKeyInfo@NWzAes@NCrypto@@QBEIXZ endp
.text:000027A1
.text:000027A1 ; ---------------------------------------------------------------------------
.text:000027A2                 align 4
.text:000027A2 _text           ends
.text:000027A2
.text:000027A4 ; ===========================================================================
.text:000027A4
.text:000027A4 ; Segment type: Pure code
.text:000027A4 ; Segment permissions: Read/Execute
.text:000027A4 _text           segment para public 'CODE' use32
.text:000027A4                 assume cs:_text
.text:000027A4                 ;org 27A4h
.text:000027A4 ; COMDAT (pick any)
.text:000027A4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000027A4
.text:000027A4 ; =============== S U B R O U T I N E =======================================
.text:000027A4
.text:000027A4 ; Attributes: bp-based frame
.text:000027A4
.text:000027A4 ; bool __thiscall NCrypto::NWzAes::CBaseCoder::SetKeyMode(NCrypto::NWzAes::CBaseCoder *this, unsigned int)
.text:000027A4                 public ?SetKeyMode@CBaseCoder@NWzAes@NCrypto@@QAE_NI@Z
.text:000027A4 ?SetKeyMode@CBaseCoder@NWzAes@NCrypto@@QAE_NI@Z proc near
.text:000027A4                                         ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+449p
.text:000027A4
.text:000027A4 var_4           = dword ptr -4
.text:000027A4 arg_0           = dword ptr  8
.text:000027A4
.text:000027A4                 push    ebp
.text:000027A5                 mov     ebp, esp
.text:000027A7                 push    ecx
.text:000027A8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000027AF                 mov     [ebp+var_4], ecx
.text:000027B2                 cmp     [ebp+arg_0], 1
.text:000027B6                 jb      short loc_27BE
.text:000027B8                 cmp     [ebp+arg_0], 3
.text:000027BC                 jbe     short loc_27C2
.text:000027BE
.text:000027BE loc_27BE:                               ; CODE XREF: NCrypto::NWzAes::CBaseCoder::SetKeyMode(uint)+12j
.text:000027BE                 xor     al, al
.text:000027C0                 jmp     short loc_27CD
.text:000027C2 ; ---------------------------------------------------------------------------
.text:000027C2
.text:000027C2 loc_27C2:                               ; CODE XREF: NCrypto::NWzAes::CBaseCoder::SetKeyMode(uint)+18j
.text:000027C2                 mov     eax, [ebp+var_4]
.text:000027C5                 mov     ecx, [ebp+arg_0]
.text:000027C8                 mov     [eax+0Ch], ecx
.text:000027CB                 mov     al, 1
.text:000027CD
.text:000027CD loc_27CD:                               ; CODE XREF: NCrypto::NWzAes::CBaseCoder::SetKeyMode(uint)+1Cj
.text:000027CD                 mov     esp, ebp
.text:000027CF                 pop     ebp
.text:000027D0                 retn    4
.text:000027D0 ?SetKeyMode@CBaseCoder@NWzAes@NCrypto@@QAE_NI@Z endp
.text:000027D0
.text:000027D0 ; ---------------------------------------------------------------------------
.text:000027D3                 align 4
.text:000027D3 _text           ends
.text:000027D3
.text:000027D4 ; ===========================================================================
.text:000027D4
.text:000027D4 ; Segment type: Pure code
.text:000027D4 ; Segment permissions: Read/Execute
.text:000027D4 _text           segment para public 'CODE' use32
.text:000027D4                 assume cs:_text
.text:000027D4                 ;org 27D4h
.text:000027D4 ; COMDAT (pick any)
.text:000027D4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000027D4
.text:000027D4 ; =============== S U B R O U T I N E =======================================
.text:000027D4
.text:000027D4 ; Attributes: bp-based frame
.text:000027D4
.text:000027D4 ; public: __thiscall CInStreamWithCRC::CInStreamWithCRC(void)
.text:000027D4                 public ??0CInStreamWithCRC@@QAE@XZ
.text:000027D4 ??0CInStreamWithCRC@@QAE@XZ proc near   ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+C6p
.text:000027D4
.text:000027D4 var_4           = dword ptr -4
.text:000027D4
.text:000027D4                 push    ebp
.text:000027D5                 mov     ebp, esp
.text:000027D7                 push    ecx
.text:000027D8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000027DF                 mov     [ebp+var_4], ecx
.text:000027E2                 mov     ecx, [ebp+var_4] ; this
.text:000027E5                 call    ??0IInStream@@QAE@XZ ; IInStream::IInStream(void)
.text:000027EA                 mov     ecx, [ebp+var_4]
.text:000027ED                 add     ecx, 4          ; this
.text:000027F0                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:000027F5                 mov     eax, [ebp+var_4]
.text:000027F8                 mov     dword ptr [eax], offset ??_7CInStreamWithCRC@@6B@ ; const CInStreamWithCRC::`vftable'
.text:000027FE                 mov     ecx, [ebp+var_4]
.text:00002801                 add     ecx, 8
.text:00002804                 call    ??0?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::CMyComPtr<IInStream>(void)
.text:00002809                 mov     eax, [ebp+var_4]
.text:0000280C                 add     esp, 4
.text:0000280F                 cmp     ebp, esp
.text:00002811                 call    __RTC_CheckEsp
.text:00002816                 mov     esp, ebp
.text:00002818                 pop     ebp
.text:00002819                 retn
.text:00002819 ??0CInStreamWithCRC@@QAE@XZ endp
.text:00002819
.text:00002819 ; ---------------------------------------------------------------------------
.text:0000281A                 align 4
.text:0000281A _text           ends
.text:0000281A
.rdata:0000281C ; ===========================================================================
.rdata:0000281C
.rdata:0000281C ; Segment type: Pure data
.rdata:0000281C ; Segment permissions: Read
.rdata:0000281C _rdata          segment dword public 'DATA' use32
.rdata:0000281C                 assume cs:_rdata
.rdata:0000281C                 ;org 281Ch
.rdata:0000281C ; COMDAT (pick largest)
.rdata:0000281C                 dd offset ??_R4CInStreamWithCRC@@6B@ ; const CInStreamWithCRC::`RTTI Complete Object Locator'
.rdata:00002820                 public ??_7CInStreamWithCRC@@6B@
.rdata:00002820 ; const CInStreamWithCRC::`vftable'
.rdata:00002820 ??_7CInStreamWithCRC@@6B@ dd offset ?QueryInterface@CInStreamWithCRC@@UAGJABU_GUID@@PAPAX@Z
.rdata:00002820                                         ; DATA XREF: CInStreamWithCRC::CInStreamWithCRC(void)+24o
.rdata:00002820                                         ; CInStreamWithCRC::QueryInterface(_GUID const &,void * *)
.rdata:00002824                 dd offset ?AddRef@CInStreamWithCRC@@UAGKXZ ; CInStreamWithCRC::AddRef(void)
.rdata:00002828                 dd offset ?Release@CInStreamWithCRC@@UAGKXZ ; CInStreamWithCRC::Release(void)
.rdata:0000282C                 dd offset ?Read@CInStreamWithCRC@@UAGJPAXIPAI@Z ; CInStreamWithCRC::Read(void *,uint,uint *)
.rdata:00002830                 dd offset ?Seek@CInStreamWithCRC@@UAGJ_JIPA_K@Z ; CInStreamWithCRC::Seek(__int64,uint,unsigned __int64 *)
.rdata:00002830 _rdata          ends
.rdata:00002830
.rdata$r:00002834 ; ===========================================================================
.rdata$r:00002834
.rdata$r:00002834 ; Segment type: Pure data
.rdata$r:00002834 ; Segment permissions: Read
.rdata$r:00002834 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002834                 assume cs:_rdata$r
.rdata$r:00002834                 ;org 2834h
.rdata$r:00002834 ; COMDAT (pick any)
.rdata$r:00002834                 public ??_R4CInStreamWithCRC@@6B@
.rdata$r:00002834 ; const CInStreamWithCRC::`RTTI Complete Object Locator'
.rdata$r:00002834 ??_R4CInStreamWithCRC@@6B@ db    0      ; DATA XREF: .rdata:0000281Co
.rdata$r:00002835                 db    0
.rdata$r:00002836                 db    0
.rdata$r:00002837                 db    0
.rdata$r:00002838                 db    0
.rdata$r:00002839                 db    0
.rdata$r:0000283A                 db    0
.rdata$r:0000283B                 db    0
.rdata$r:0000283C                 db    0
.rdata$r:0000283D                 db    0
.rdata$r:0000283E                 db    0
.rdata$r:0000283F                 db    0
.rdata$r:00002840                 dd offset ??_R0?AVCInStreamWithCRC@@@8 ; CInStreamWithCRC `RTTI Type Descriptor'
.rdata$r:00002844                 dd offset ??_R3CInStreamWithCRC@@8 ; CInStreamWithCRC::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002844 _rdata$r        ends
.rdata$r:00002844
.data:00002848 ; ===========================================================================
.data:00002848
.data:00002848 ; Segment type: Pure data
.data:00002848 ; Segment permissions: Read/Write
.data:00002848 _data           segment dword public 'DATA' use32
.data:00002848                 assume cs:_data
.data:00002848                 ;org 2848h
.data:00002848 ; COMDAT (pick any)
.data:00002848                 public ??_R0?AVCInStreamWithCRC@@@8
.data:00002848 ; class CInStreamWithCRC `RTTI Type Descriptor'
.data:00002848 ??_R0?AVCInStreamWithCRC@@@8 dd offset ??_7type_info@@6B@
.data:00002848                                         ; DATA XREF: .rdata$r:00002840o
.data:00002848                                         ; .rdata$r:CInStreamWithCRC::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00002848                                         ; const type_info::`vftable'
.data:0000284C                 align 10h
.data:00002850 a_?avcinstreamw db '.?AVCInStreamWithCRC@@',0
.data:00002867                 align 4
.data:00002867 _data           ends
.data:00002867
.rdata$r:00002868 ; ===========================================================================
.rdata$r:00002868
.rdata$r:00002868 ; Segment type: Pure data
.rdata$r:00002868 ; Segment permissions: Read
.rdata$r:00002868 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002868                 assume cs:_rdata$r
.rdata$r:00002868                 ;org 2868h
.rdata$r:00002868 ; COMDAT (pick any)
.rdata$r:00002868                 public ??_R3CInStreamWithCRC@@8
.rdata$r:00002868 ; CInStreamWithCRC::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002868 ??_R3CInStreamWithCRC@@8 db    0        ; DATA XREF: .rdata$r:00002844o
.rdata$r:00002868                                         ; .rdata$r:000028A8o
.rdata$r:00002869                 db    0
.rdata$r:0000286A                 db    0
.rdata$r:0000286B                 db    0
.rdata$r:0000286C                 db    1
.rdata$r:0000286D                 db    0
.rdata$r:0000286E                 db    0
.rdata$r:0000286F                 db    0
.rdata$r:00002870                 db    5
.rdata$r:00002871                 db    0
.rdata$r:00002872                 db    0
.rdata$r:00002873                 db    0
.rdata$r:00002874                 dd offset ??_R2CInStreamWithCRC@@8 ; CInStreamWithCRC::`RTTI Base Class Array'
.rdata$r:00002874 _rdata$r        ends
.rdata$r:00002874
.rdata$r:00002878 ; ===========================================================================
.rdata$r:00002878
.rdata$r:00002878 ; Segment type: Pure data
.rdata$r:00002878 ; Segment permissions: Read
.rdata$r:00002878 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002878                 assume cs:_rdata$r
.rdata$r:00002878                 ;org 2878h
.rdata$r:00002878 ; COMDAT (pick any)
.rdata$r:00002878                 public ??_R2CInStreamWithCRC@@8
.rdata$r:00002878 ; CInStreamWithCRC::`RTTI Base Class Array'
.rdata$r:00002878 ??_R2CInStreamWithCRC@@8 dd offset ??_R1A@?0A@EA@CInStreamWithCRC@@8
.rdata$r:00002878                                         ; DATA XREF: .rdata$r:00002874o
.rdata$r:00002878                                         ; CInStreamWithCRC::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000287C                 dd offset ??_R1A@?0A@EA@IInStream@@8 ; IInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002880                 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002884                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002888                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:0000288C                 db    0
.rdata$r:0000288D                 align 10h
.rdata$r:0000288D _rdata$r        ends
.rdata$r:0000288D
.rdata$r:00002890 ; ===========================================================================
.rdata$r:00002890
.rdata$r:00002890 ; Segment type: Pure data
.rdata$r:00002890 ; Segment permissions: Read
.rdata$r:00002890 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002890                 assume cs:_rdata$r
.rdata$r:00002890                 ;org 2890h
.rdata$r:00002890 ; COMDAT (pick any)
.rdata$r:00002890                 public ??_R1A@?0A@EA@CInStreamWithCRC@@8
.rdata$r:00002890 ; CInStreamWithCRC::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00002890 ??_R1A@?0A@EA@CInStreamWithCRC@@8 dd offset ??_R0?AVCInStreamWithCRC@@@8
.rdata$r:00002890                                         ; DATA XREF: .rdata$r:CInStreamWithCRC::`RTTI Base Class Array'o
.rdata$r:00002890                                         ; CInStreamWithCRC `RTTI Type Descriptor'
.rdata$r:00002894                 db    4
.rdata$r:00002895                 db    0
.rdata$r:00002896                 db    0
.rdata$r:00002897                 db    0
.rdata$r:00002898                 db    0
.rdata$r:00002899                 db    0
.rdata$r:0000289A                 db    0
.rdata$r:0000289B                 db    0
.rdata$r:0000289C                 db 0FFh
.rdata$r:0000289D                 db 0FFh
.rdata$r:0000289E                 db 0FFh
.rdata$r:0000289F                 db 0FFh
.rdata$r:000028A0                 db    0
.rdata$r:000028A1                 db    0
.rdata$r:000028A2                 db    0
.rdata$r:000028A3                 db    0
.rdata$r:000028A4                 db  40h ; @
.rdata$r:000028A5                 db    0
.rdata$r:000028A6                 db    0
.rdata$r:000028A7                 db    0
.rdata$r:000028A8                 dd offset ??_R3CInStreamWithCRC@@8 ; CInStreamWithCRC::`RTTI Class Hierarchy Descriptor'
.rdata$r:000028A8 _rdata$r        ends
.rdata$r:000028A8
.rdata$r:000028AC ; ===========================================================================
.rdata$r:000028AC
.rdata$r:000028AC ; Segment type: Pure data
.rdata$r:000028AC ; Segment permissions: Read
.rdata$r:000028AC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000028AC                 assume cs:_rdata$r
.rdata$r:000028AC                 ;org 28ACh
.rdata$r:000028AC ; COMDAT (pick any)
.rdata$r:000028AC                 public ??_R1A@?0A@EA@IInStream@@8
.rdata$r:000028AC ; IInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000028AC ??_R1A@?0A@EA@IInStream@@8 dd offset ??_R0?AUIInStream@@@8
.rdata$r:000028AC                                         ; DATA XREF: .rdata$r:0000287Co
.rdata$r:000028AC                                         ; .rdata$r:IInStream::`RTTI Base Class Array'o
.rdata$r:000028AC                                         ; IInStream `RTTI Type Descriptor'
.rdata$r:000028B0                 db    2
.rdata$r:000028B1                 db    0
.rdata$r:000028B2                 db    0
.rdata$r:000028B3                 db    0
.rdata$r:000028B4                 db    0
.rdata$r:000028B5                 db    0
.rdata$r:000028B6                 db    0
.rdata$r:000028B7                 db    0
.rdata$r:000028B8                 db 0FFh
.rdata$r:000028B9                 db 0FFh
.rdata$r:000028BA                 db 0FFh
.rdata$r:000028BB                 db 0FFh
.rdata$r:000028BC                 db    0
.rdata$r:000028BD                 db    0
.rdata$r:000028BE                 db    0
.rdata$r:000028BF                 db    0
.rdata$r:000028C0                 db  40h ; @
.rdata$r:000028C1                 db    0
.rdata$r:000028C2                 db    0
.rdata$r:000028C3                 db    0
.rdata$r:000028C4                 dd offset ??_R3IInStream@@8 ; IInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000028C4 _rdata$r        ends
.rdata$r:000028C4
.data:000028C8 ; ===========================================================================
.data:000028C8
.data:000028C8 ; Segment type: Pure data
.data:000028C8 ; Segment permissions: Read/Write
.data:000028C8 _data           segment dword public 'DATA' use32
.data:000028C8                 assume cs:_data
.data:000028C8                 ;org 28C8h
.data:000028C8 ; COMDAT (pick any)
.data:000028C8                 public ??_R0?AUIInStream@@@8
.data:000028C8 ; struct IInStream `RTTI Type Descriptor'
.data:000028C8 ??_R0?AUIInStream@@@8 dd offset ??_7type_info@@6B@
.data:000028C8                                         ; DATA XREF: .rdata$r:IInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000028C8                                         ; .rdata$r:00002954o
.data:000028C8                                         ; const type_info::`vftable'
.data:000028CC                 align 10h
.data:000028D0 a_?auiinstream@ db '.?AUIInStream@@',0
.data:000028D0 _data           ends
.data:000028D0
.rdata$r:000028E0 ; ===========================================================================
.rdata$r:000028E0
.rdata$r:000028E0 ; Segment type: Pure data
.rdata$r:000028E0 ; Segment permissions: Read
.rdata$r:000028E0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000028E0                 assume cs:_rdata$r
.rdata$r:000028E0                 ;org 28E0h
.rdata$r:000028E0 ; COMDAT (pick any)
.rdata$r:000028E0                 public ??_R3IInStream@@8
.rdata$r:000028E0 ; IInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000028E0 ??_R3IInStream@@8 db    0               ; DATA XREF: .rdata$r:000028C4o
.rdata$r:000028E0                                         ; .rdata$r:00002958o
.rdata$r:000028E1                 db    0
.rdata$r:000028E2                 db    0
.rdata$r:000028E3                 db    0
.rdata$r:000028E4                 db    0
.rdata$r:000028E5                 db    0
.rdata$r:000028E6                 db    0
.rdata$r:000028E7                 db    0
.rdata$r:000028E8                 db    3
.rdata$r:000028E9                 db    0
.rdata$r:000028EA                 db    0
.rdata$r:000028EB                 db    0
.rdata$r:000028EC                 dd offset ??_R2IInStream@@8 ; IInStream::`RTTI Base Class Array'
.rdata$r:000028EC _rdata$r        ends
.rdata$r:000028EC
.rdata$r:000028F0 ; ===========================================================================
.rdata$r:000028F0
.rdata$r:000028F0 ; Segment type: Pure data
.rdata$r:000028F0 ; Segment permissions: Read
.rdata$r:000028F0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000028F0                 assume cs:_rdata$r
.rdata$r:000028F0                 ;org 28F0h
.rdata$r:000028F0 ; COMDAT (pick any)
.rdata$r:000028F0                 public ??_R2IInStream@@8
.rdata$r:000028F0 ; IInStream::`RTTI Base Class Array'
.rdata$r:000028F0 ??_R2IInStream@@8 dd offset ??_R1A@?0A@EA@IInStream@@8
.rdata$r:000028F0                                         ; DATA XREF: .rdata$r:000028ECo
.rdata$r:000028F0                                         ; IInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000028F4                 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000028F8                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000028FC                 db    0
.rdata$r:000028FD                 align 10h
.rdata$r:000028FD _rdata$r        ends
.rdata$r:000028FD
.text:00002900 ; ===========================================================================
.text:00002900
.text:00002900 ; Segment type: Pure code
.text:00002900 ; Segment permissions: Read/Execute
.text:00002900 _text           segment para public 'CODE' use32
.text:00002900                 assume cs:_text
.text:00002900                 ;org 2900h
.text:00002900 ; COMDAT (pick any)
.text:00002900                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002900
.text:00002900 ; =============== S U B R O U T I N E =======================================
.text:00002900
.text:00002900 ; Attributes: bp-based frame
.text:00002900
.text:00002900 ; _DWORD __thiscall IInStream::IInStream(IInStream *__hidden this)
.text:00002900                 public ??0IInStream@@QAE@XZ
.text:00002900 ??0IInStream@@QAE@XZ proc near          ; CODE XREF: CInStreamWithCRC::CInStreamWithCRC(void)+11p
.text:00002900
.text:00002900 var_4           = dword ptr -4
.text:00002900
.text:00002900                 push    ebp
.text:00002901                 mov     ebp, esp
.text:00002903                 push    ecx
.text:00002904                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000290B                 mov     [ebp+var_4], ecx
.text:0000290E                 mov     ecx, [ebp+var_4] ; this
.text:00002911                 call    ??0ISequentialInStream@@QAE@XZ ; ISequentialInStream::ISequentialInStream(void)
.text:00002916                 mov     eax, [ebp+var_4]
.text:00002919                 mov     dword ptr [eax], offset ??_7IInStream@@6B@ ; const IInStream::`vftable'
.text:0000291F                 mov     eax, [ebp+var_4]
.text:00002922                 add     esp, 4
.text:00002925                 cmp     ebp, esp
.text:00002927                 call    __RTC_CheckEsp
.text:0000292C                 mov     esp, ebp
.text:0000292E                 pop     ebp
.text:0000292F                 retn
.text:0000292F ??0IInStream@@QAE@XZ endp
.text:0000292F
.text:0000292F _text           ends
.text:0000292F
.rdata:00002930 ; ===========================================================================
.rdata:00002930
.rdata:00002930 ; Segment type: Pure data
.rdata:00002930 ; Segment permissions: Read
.rdata:00002930 _rdata          segment dword public 'DATA' use32
.rdata:00002930                 assume cs:_rdata
.rdata:00002930                 ;org 2930h
.rdata:00002930 ; COMDAT (pick largest)
.rdata:00002930                 dd offset ??_R4IInStream@@6B@ ; const IInStream::`RTTI Complete Object Locator'
.rdata:00002934                 public ??_7IInStream@@6B@
.rdata:00002934 ; const IInStream::`vftable'
.rdata:00002934 ??_7IInStream@@6B@ dd offset __purecall ; DATA XREF: IInStream::IInStream(void)+19o
.rdata:00002938                 dd offset __purecall
.rdata:0000293C                 dd offset __purecall
.rdata:00002940                 dd offset __purecall
.rdata:00002944                 dd offset __purecall
.rdata:00002944 _rdata          ends
.rdata:00002944
.rdata$r:00002948 ; ===========================================================================
.rdata$r:00002948
.rdata$r:00002948 ; Segment type: Pure data
.rdata$r:00002948 ; Segment permissions: Read
.rdata$r:00002948 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002948                 assume cs:_rdata$r
.rdata$r:00002948                 ;org 2948h
.rdata$r:00002948 ; COMDAT (pick any)
.rdata$r:00002948                 public ??_R4IInStream@@6B@
.rdata$r:00002948 ; const IInStream::`RTTI Complete Object Locator'
.rdata$r:00002948 ??_R4IInStream@@6B@ db    0             ; DATA XREF: .rdata:00002930o
.rdata$r:00002949                 db    0
.rdata$r:0000294A                 db    0
.rdata$r:0000294B                 db    0
.rdata$r:0000294C                 db    0
.rdata$r:0000294D                 db    0
.rdata$r:0000294E                 db    0
.rdata$r:0000294F                 db    0
.rdata$r:00002950                 db    0
.rdata$r:00002951                 db    0
.rdata$r:00002952                 db    0
.rdata$r:00002953                 db    0
.rdata$r:00002954                 dd offset ??_R0?AUIInStream@@@8 ; IInStream `RTTI Type Descriptor'
.rdata$r:00002958                 dd offset ??_R3IInStream@@8 ; IInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002958 _rdata$r        ends
.rdata$r:00002958
.text:0000295C ; ===========================================================================
.text:0000295C
.text:0000295C ; Segment type: Pure code
.text:0000295C ; Segment permissions: Read/Execute
.text:0000295C _text           segment para public 'CODE' use32
.text:0000295C                 assume cs:_text
.text:0000295C                 ;org 295Ch
.text:0000295C ; COMDAT (pick any)
.text:0000295C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000295C
.text:0000295C ; =============== S U B R O U T I N E =======================================
.text:0000295C
.text:0000295C ; Attributes: bp-based frame
.text:0000295C
.text:0000295C ; __int32 __stdcall CInStreamWithCRC::QueryInterface(CInStreamWithCRC *this, const struct _GUID *Buf1, void **)
.text:0000295C                 public ?QueryInterface@CInStreamWithCRC@@UAGJABU_GUID@@PAPAX@Z
.text:0000295C ?QueryInterface@CInStreamWithCRC@@UAGJABU_GUID@@PAPAX@Z proc near
.text:0000295C                                         ; DATA XREF: .rdata:const CInStreamWithCRC::`vftable'o
.text:0000295C
.text:0000295C this            = dword ptr  8
.text:0000295C Buf1            = dword ptr  0Ch
.text:0000295C arg_8           = dword ptr  10h
.text:0000295C
.text:0000295C                 push    ebp
.text:0000295D                 mov     ebp, esp
.text:0000295F                 mov     eax, [ebp+arg_8]
.text:00002962                 mov     dword ptr [eax], 0
.text:00002968                 push    offset _IID_IUnknown ; Buf2
.text:0000296D                 mov     ecx, [ebp+Buf1]
.text:00002970                 push    ecx             ; Buf1
.text:00002971                 call    ___@8           ; __(x,x)
.text:00002976                 test    eax, eax
.text:00002978                 jz      short loc_2984
.text:0000297A                 mov     edx, [ebp+arg_8]
.text:0000297D                 mov     eax, [ebp+this]
.text:00002980                 mov     [edx], eax
.text:00002982                 jmp     short loc_29A7
.text:00002984 ; ---------------------------------------------------------------------------
.text:00002984
.text:00002984 loc_2984:                               ; CODE XREF: CInStreamWithCRC::QueryInterface(_GUID const &,void * *)+1Cj
.text:00002984                 push    offset _IID_IInStream ; Buf2
.text:00002989                 mov     ecx, [ebp+Buf1]
.text:0000298C                 push    ecx             ; Buf1
.text:0000298D                 call    ___@8           ; __(x,x)
.text:00002992                 test    eax, eax
.text:00002994                 jz      short loc_29A0
.text:00002996                 mov     edx, [ebp+arg_8]
.text:00002999                 mov     eax, [ebp+this]
.text:0000299C                 mov     [edx], eax
.text:0000299E                 jmp     short loc_29A7
.text:000029A0 ; ---------------------------------------------------------------------------
.text:000029A0
.text:000029A0 loc_29A0:                               ; CODE XREF: CInStreamWithCRC::QueryInterface(_GUID const &,void * *)+38j
.text:000029A0                 mov     eax, 80004002h
.text:000029A5                 jmp     short loc_29B8
.text:000029A7 ; ---------------------------------------------------------------------------
.text:000029A7
.text:000029A7 loc_29A7:                               ; CODE XREF: CInStreamWithCRC::QueryInterface(_GUID const &,void * *)+26j
.text:000029A7                                         ; CInStreamWithCRC::QueryInterface(_GUID const &,void * *)+42j
.text:000029A7                 mov     ecx, [ebp+this]
.text:000029AA                 mov     edx, [ecx+4]
.text:000029AD                 add     edx, 1
.text:000029B0                 mov     eax, [ebp+this]
.text:000029B3                 mov     [eax+4], edx
.text:000029B6                 xor     eax, eax
.text:000029B8
.text:000029B8 loc_29B8:                               ; CODE XREF: CInStreamWithCRC::QueryInterface(_GUID const &,void * *)+49j
.text:000029B8                 cmp     ebp, esp
.text:000029BA                 call    __RTC_CheckEsp
.text:000029BF                 pop     ebp
.text:000029C0                 retn    0Ch
.text:000029C0 ?QueryInterface@CInStreamWithCRC@@UAGJABU_GUID@@PAPAX@Z endp
.text:000029C0
.text:000029C0 ; ---------------------------------------------------------------------------
.text:000029C3                 align 4
.text:000029C3 _text           ends
.text:000029C3
.text:000029C4 ; ===========================================================================
.text:000029C4
.text:000029C4 ; Segment type: Pure code
.text:000029C4 ; Segment permissions: Read/Execute
.text:000029C4 _text           segment para public 'CODE' use32
.text:000029C4                 assume cs:_text
.text:000029C4                 ;org 29C4h
.text:000029C4 ; COMDAT (pick any)
.text:000029C4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000029C4
.text:000029C4 ; =============== S U B R O U T I N E =======================================
.text:000029C4
.text:000029C4 ; Attributes: bp-based frame
.text:000029C4
.text:000029C4 ; unsigned __int32 __stdcall CInStreamWithCRC::AddRef(CInStreamWithCRC *this)
.text:000029C4                 public ?AddRef@CInStreamWithCRC@@UAGKXZ
.text:000029C4 ?AddRef@CInStreamWithCRC@@UAGKXZ proc near ; DATA XREF: .rdata:00002824o
.text:000029C4
.text:000029C4 var_4           = dword ptr -4
.text:000029C4 this            = dword ptr  8
.text:000029C4
.text:000029C4                 push    ebp
.text:000029C5                 mov     ebp, esp
.text:000029C7                 push    ecx
.text:000029C8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000029CF                 mov     eax, [ebp+this]
.text:000029D2                 mov     ecx, [eax+4]
.text:000029D5                 add     ecx, 1
.text:000029D8                 mov     [ebp+var_4], ecx
.text:000029DB                 mov     edx, [ebp+this]
.text:000029DE                 mov     eax, [ebp+var_4]
.text:000029E1                 mov     [edx+4], eax
.text:000029E4                 mov     eax, [ebp+var_4]
.text:000029E7                 mov     esp, ebp
.text:000029E9                 pop     ebp
.text:000029EA                 retn    4
.text:000029EA ?AddRef@CInStreamWithCRC@@UAGKXZ endp
.text:000029EA
.text:000029EA ; ---------------------------------------------------------------------------
.text:000029ED                 align 10h
.text:000029ED _text           ends
.text:000029ED
.text:000029F0 ; ===========================================================================
.text:000029F0
.text:000029F0 ; Segment type: Pure code
.text:000029F0 ; Segment permissions: Read/Execute
.text:000029F0 _text           segment para public 'CODE' use32
.text:000029F0                 assume cs:_text
.text:000029F0                 ;org 29F0h
.text:000029F0 ; COMDAT (pick any)
.text:000029F0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000029F0
.text:000029F0 ; =============== S U B R O U T I N E =======================================
.text:000029F0
.text:000029F0 ; Attributes: bp-based frame
.text:000029F0
.text:000029F0 ; unsigned __int32 __stdcall CInStreamWithCRC::Release(CInStreamWithCRC *this)
.text:000029F0                 public ?Release@CInStreamWithCRC@@UAGKXZ
.text:000029F0 ?Release@CInStreamWithCRC@@UAGKXZ proc near ; DATA XREF: .rdata:00002828o
.text:000029F0
.text:000029F0 var_10          = dword ptr -10h
.text:000029F0 var_C           = dword ptr -0Ch
.text:000029F0 var_8           = dword ptr -8
.text:000029F0 var_4           = dword ptr -4
.text:000029F0 this            = dword ptr  8
.text:000029F0
.text:000029F0                 push    ebp
.text:000029F1                 mov     ebp, esp
.text:000029F3                 sub     esp, 10h
.text:000029F6                 mov     eax, 0CCCCCCCCh
.text:000029FB                 mov     [ebp+var_10], eax
.text:000029FE                 mov     [ebp+var_C], eax
.text:00002A01                 mov     [ebp+var_8], eax
.text:00002A04                 mov     [ebp+var_4], eax
.text:00002A07                 mov     eax, [ebp+this]
.text:00002A0A                 mov     ecx, [eax+4]
.text:00002A0D                 sub     ecx, 1
.text:00002A10                 mov     [ebp+var_C], ecx
.text:00002A13                 mov     edx, [ebp+this]
.text:00002A16                 mov     eax, [ebp+var_C]
.text:00002A19                 mov     [edx+4], eax
.text:00002A1C                 cmp     [ebp+var_C], 0
.text:00002A20                 jz      short loc_2A2A
.text:00002A22                 mov     ecx, [ebp+this]
.text:00002A25                 mov     eax, [ecx+4]
.text:00002A28                 jmp     short loc_2A54
.text:00002A2A ; ---------------------------------------------------------------------------
.text:00002A2A
.text:00002A2A loc_2A2A:                               ; CODE XREF: CInStreamWithCRC::Release(void)+30j
.text:00002A2A                 mov     edx, [ebp+this]
.text:00002A2D                 mov     [ebp+var_8], edx
.text:00002A30                 mov     eax, [ebp+var_8]
.text:00002A33                 mov     [ebp+var_4], eax
.text:00002A36                 cmp     [ebp+var_4], 0
.text:00002A3A                 jz      short loc_2A4B
.text:00002A3C                 push    1
.text:00002A3E                 mov     ecx, [ebp+var_4]
.text:00002A41                 call    ??_GCInStreamWithCRC@@QAEPAXI@Z ; CInStreamWithCRC::`scalar deleting destructor'(uint)
.text:00002A46                 mov     [ebp+var_10], eax
.text:00002A49                 jmp     short loc_2A52
.text:00002A4B ; ---------------------------------------------------------------------------
.text:00002A4B
.text:00002A4B loc_2A4B:                               ; CODE XREF: CInStreamWithCRC::Release(void)+4Aj
.text:00002A4B                 mov     [ebp+var_10], 0
.text:00002A52
.text:00002A52 loc_2A52:                               ; CODE XREF: CInStreamWithCRC::Release(void)+59j
.text:00002A52                 xor     eax, eax
.text:00002A54
.text:00002A54 loc_2A54:                               ; CODE XREF: CInStreamWithCRC::Release(void)+38j
.text:00002A54                 add     esp, 10h
.text:00002A57                 cmp     ebp, esp
.text:00002A59                 call    __RTC_CheckEsp
.text:00002A5E                 mov     esp, ebp
.text:00002A60                 pop     ebp
.text:00002A61                 retn    4
.text:00002A61 ?Release@CInStreamWithCRC@@UAGKXZ endp
.text:00002A61
.text:00002A61 _text           ends
.text:00002A61
.text:00002A64 ; ===========================================================================
.text:00002A64
.text:00002A64 ; Segment type: Pure code
.text:00002A64 ; Segment permissions: Read/Execute
.text:00002A64 _text           segment para public 'CODE' use32
.text:00002A64                 assume cs:_text
.text:00002A64                 ;org 2A64h
.text:00002A64 ; COMDAT (pick any)
.text:00002A64                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002A64
.text:00002A64 ; =============== S U B R O U T I N E =======================================
.text:00002A64
.text:00002A64 ; Attributes: bp-based frame
.text:00002A64
.text:00002A64 ; public: void * __thiscall CInStreamWithCRC::`scalar deleting destructor'(unsigned int)
.text:00002A64                 public ??_GCInStreamWithCRC@@QAEPAXI@Z
.text:00002A64 ??_GCInStreamWithCRC@@QAEPAXI@Z proc near
.text:00002A64                                         ; CODE XREF: CInStreamWithCRC::Release(void)+51p
.text:00002A64
.text:00002A64 var_4           = dword ptr -4
.text:00002A64 arg_0           = dword ptr  8
.text:00002A64
.text:00002A64                 push    ebp
.text:00002A65                 mov     ebp, esp
.text:00002A67                 push    ecx
.text:00002A68                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002A6F                 mov     [ebp+var_4], ecx
.text:00002A72                 mov     ecx, [ebp+var_4] ; this
.text:00002A75                 call    ??1CInStreamWithCRC@@QAE@XZ ; CInStreamWithCRC::~CInStreamWithCRC(void)
.text:00002A7A                 mov     eax, [ebp+arg_0]
.text:00002A7D                 and     eax, 1
.text:00002A80                 jz      short loc_2A8E
.text:00002A82                 mov     ecx, [ebp+var_4]
.text:00002A85                 push    ecx             ; void *
.text:00002A86                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00002A8B                 add     esp, 4
.text:00002A8E
.text:00002A8E loc_2A8E:                               ; CODE XREF: CInStreamWithCRC::`scalar deleting destructor'(uint)+1Cj
.text:00002A8E                 mov     eax, [ebp+var_4]
.text:00002A91                 add     esp, 4
.text:00002A94                 cmp     ebp, esp
.text:00002A96                 call    __RTC_CheckEsp
.text:00002A9B                 mov     esp, ebp
.text:00002A9D                 pop     ebp
.text:00002A9E                 retn    4
.text:00002A9E ??_GCInStreamWithCRC@@QAEPAXI@Z endp
.text:00002A9E
.text:00002A9E ; ---------------------------------------------------------------------------
.text:00002AA1                 align 4
.text:00002AA1 _text           ends
.text:00002AA1
.text:00002AA4 ; ===========================================================================
.text:00002AA4
.text:00002AA4 ; Segment type: Pure code
.text:00002AA4 ; Segment permissions: Read/Execute
.text:00002AA4 _text           segment para public 'CODE' use32
.text:00002AA4                 assume cs:_text
.text:00002AA4                 ;org 2AA4h
.text:00002AA4 ; COMDAT (pick any)
.text:00002AA4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002AA4
.text:00002AA4 ; =============== S U B R O U T I N E =======================================
.text:00002AA4
.text:00002AA4 ; Attributes: bp-based frame
.text:00002AA4
.text:00002AA4 ; _DWORD __thiscall CInStreamWithCRC::~CInStreamWithCRC(CInStreamWithCRC *__hidden this)
.text:00002AA4                 public ??1CInStreamWithCRC@@QAE@XZ
.text:00002AA4 ??1CInStreamWithCRC@@QAE@XZ proc near   ; CODE XREF: CInStreamWithCRC::`scalar deleting destructor'(uint)+11p
.text:00002AA4
.text:00002AA4 var_4           = dword ptr -4
.text:00002AA4
.text:00002AA4                 push    ebp
.text:00002AA5                 mov     ebp, esp
.text:00002AA7                 push    ecx
.text:00002AA8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002AAF                 mov     [ebp+var_4], ecx
.text:00002AB2                 mov     ecx, [ebp+var_4]
.text:00002AB5                 add     ecx, 8
.text:00002AB8                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:00002ABD                 add     esp, 4
.text:00002AC0                 cmp     ebp, esp
.text:00002AC2                 call    __RTC_CheckEsp
.text:00002AC7                 mov     esp, ebp
.text:00002AC9                 pop     ebp
.text:00002ACA                 retn
.text:00002ACA ??1CInStreamWithCRC@@QAE@XZ endp
.text:00002ACA
.text:00002ACA ; ---------------------------------------------------------------------------
.text:00002ACB                 align 4
.text:00002ACB _text           ends
.text:00002ACB
.text:00002ACC ; ===========================================================================
.text:00002ACC
.text:00002ACC ; Segment type: Pure code
.text:00002ACC ; Segment permissions: Read/Execute
.text:00002ACC _text           segment para public 'CODE' use32
.text:00002ACC                 assume cs:_text
.text:00002ACC                 ;org 2ACCh
.text:00002ACC ; COMDAT (pick any)
.text:00002ACC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002ACC
.text:00002ACC ; =============== S U B R O U T I N E =======================================
.text:00002ACC
.text:00002ACC ; Attributes: bp-based frame
.text:00002ACC
.text:00002ACC ; _DWORD __thiscall NCrypto::NWzAes::CEncoder::CEncoder(NCrypto::NWzAes::CEncoder *__hidden this)
.text:00002ACC                 public ??0CEncoder@NWzAes@NCrypto@@QAE@XZ
.text:00002ACC ??0CEncoder@NWzAes@NCrypto@@QAE@XZ proc near
.text:00002ACC                                         ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+3F0p
.text:00002ACC
.text:00002ACC var_4           = dword ptr -4
.text:00002ACC
.text:00002ACC                 push    ebp
.text:00002ACD                 mov     ebp, esp
.text:00002ACF                 push    ecx
.text:00002AD0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002AD7                 mov     [ebp+var_4], ecx
.text:00002ADA                 mov     ecx, [ebp+var_4] ; this
.text:00002ADD                 call    ??0CBaseCoder@NWzAes@NCrypto@@QAE@XZ ; NCrypto::NWzAes::CBaseCoder::CBaseCoder(void)
.text:00002AE2                 mov     eax, [ebp+var_4]
.text:00002AE5                 mov     dword ptr [eax], offset ??_7CEncoder@NWzAes@NCrypto@@6BICompressFilter@@@ ; const NCrypto::NWzAes::CEncoder::`vftable'{for `ICompressFilter'}
.text:00002AEB                 mov     ecx, [ebp+var_4]
.text:00002AEE                 mov     dword ptr [ecx+4], offset ??_7CEncoder@NWzAes@NCrypto@@6BICryptoSetPassword@@@ ; const NCrypto::NWzAes::CEncoder::`vftable'{for `ICryptoSetPassword'}
.text:00002AF5                 mov     eax, [ebp+var_4]
.text:00002AF8                 add     esp, 4
.text:00002AFB                 cmp     ebp, esp
.text:00002AFD                 call    __RTC_CheckEsp
.text:00002B02                 mov     esp, ebp
.text:00002B04                 pop     ebp
.text:00002B05                 retn
.text:00002B05 ??0CEncoder@NWzAes@NCrypto@@QAE@XZ endp
.text:00002B05
.text:00002B05 ; ---------------------------------------------------------------------------
.text:00002B06                 align 4
.text:00002B06 _text           ends
.text:00002B06
.rdata:00002B08 ; ===========================================================================
.rdata:00002B08
.rdata:00002B08 ; Segment type: Pure data
.rdata:00002B08 ; Segment permissions: Read
.rdata:00002B08 _rdata          segment dword public 'DATA' use32
.rdata:00002B08                 assume cs:_rdata
.rdata:00002B08                 ;org 2B08h
.rdata:00002B08 ; COMDAT (pick largest)
.rdata:00002B08                 dd offset ??_R4CEncoder@NWzAes@NCrypto@@6BICryptoSetPassword@@@ ; const NCrypto::NWzAes::CEncoder::`RTTI Complete Object Locator'{for `ICryptoSetPassword'}
.rdata:00002B0C                 public ??_7CEncoder@NWzAes@NCrypto@@6BICryptoSetPassword@@@
.rdata:00002B0C ; const NCrypto::NWzAes::CEncoder::`vftable'{for `ICryptoSetPassword'}
.rdata:00002B0C ??_7CEncoder@NWzAes@NCrypto@@6BICryptoSetPassword@@@ dd offset ?QueryInterface@CBaseCoder@NWzAes@NCrypto@@W3AGJABU_GUID@@PAPAX@Z
.rdata:00002B0C                                         ; DATA XREF: NCrypto::NWzAes::CEncoder::CEncoder(void)+22o
.rdata:00002B0C                                         ; [thunk]:NCrypto::NWzAes::CBaseCoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:00002B10                 dd offset ?AddRef@CBaseCoder@NWzAes@NCrypto@@W3AGKXZ ; [thunk]:NCrypto::NWzAes::CBaseCoder::AddRef`adjustor{4}' (void)
.rdata:00002B14                 dd offset ?Release@CBaseCoder@NWzAes@NCrypto@@W3AGKXZ ; [thunk]:NCrypto::NWzAes::CBaseCoder::Release`adjustor{4}' (void)
.rdata:00002B18                 dd offset ?CryptoSetPassword@CBaseCoder@NWzAes@NCrypto@@UAGJPBEI@Z ; NCrypto::NWzAes::CBaseCoder::CryptoSetPassword(uchar const *,uint)
.rdata:00002B18 _rdata          ends
.rdata:00002B18
.rdata:00002B1C ; ===========================================================================
.rdata:00002B1C
.rdata:00002B1C ; Segment type: Pure data
.rdata:00002B1C ; Segment permissions: Read
.rdata:00002B1C _rdata          segment dword public 'DATA' use32
.rdata:00002B1C                 assume cs:_rdata
.rdata:00002B1C                 ;org 2B1Ch
.rdata:00002B1C ; COMDAT (pick largest)
.rdata:00002B1C                 dd offset ??_R4CEncoder@NWzAes@NCrypto@@6BICompressFilter@@@ ; const NCrypto::NWzAes::CEncoder::`RTTI Complete Object Locator'{for `ICompressFilter'}
.rdata:00002B20                 public ??_7CEncoder@NWzAes@NCrypto@@6BICompressFilter@@@
.rdata:00002B20 ; const NCrypto::NWzAes::CEncoder::`vftable'{for `ICompressFilter'}
.rdata:00002B20 ??_7CEncoder@NWzAes@NCrypto@@6BICompressFilter@@@ dd offset ?QueryInterface@CBaseCoder@NWzAes@NCrypto@@UAGJABU_GUID@@PAPAX@Z
.rdata:00002B20                                         ; DATA XREF: NCrypto::NWzAes::CEncoder::CEncoder(void)+19o
.rdata:00002B20                                         ; NCrypto::NWzAes::CBaseCoder::QueryInterface(_GUID const &,void * *)
.rdata:00002B24                 dd offset ?AddRef@CBaseCoder@NWzAes@NCrypto@@UAGKXZ ; NCrypto::NWzAes::CBaseCoder::AddRef(void)
.rdata:00002B28                 dd offset ?Release@CBaseCoder@NWzAes@NCrypto@@UAGKXZ ; NCrypto::NWzAes::CBaseCoder::Release(void)
.rdata:00002B2C                 dd offset ?Init@CBaseCoder@NWzAes@NCrypto@@UAGJXZ ; NCrypto::NWzAes::CBaseCoder::Init(void)
.rdata:00002B30                 dd offset ?Filter@CEncoder@NWzAes@NCrypto@@UAGIPAEI@Z ; NCrypto::NWzAes::CEncoder::Filter(uchar *,uint)
.rdata:00002B30 _rdata          ends
.rdata:00002B30
.rdata$r:00002B34 ; ===========================================================================
.rdata$r:00002B34
.rdata$r:00002B34 ; Segment type: Pure data
.rdata$r:00002B34 ; Segment permissions: Read
.rdata$r:00002B34 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002B34                 assume cs:_rdata$r
.rdata$r:00002B34                 ;org 2B34h
.rdata$r:00002B34 ; COMDAT (pick any)
.rdata$r:00002B34                 public ??_R4CEncoder@NWzAes@NCrypto@@6BICompressFilter@@@
.rdata$r:00002B34 ; const NCrypto::NWzAes::CEncoder::`RTTI Complete Object Locator'{for `ICompressFilter'}
.rdata$r:00002B34 ??_R4CEncoder@NWzAes@NCrypto@@6BICompressFilter@@@ db    0
.rdata$r:00002B34                                         ; DATA XREF: .rdata:00002B1Co
.rdata$r:00002B35                 db    0
.rdata$r:00002B36                 db    0
.rdata$r:00002B37                 db    0
.rdata$r:00002B38                 db    0
.rdata$r:00002B39                 db    0
.rdata$r:00002B3A                 db    0
.rdata$r:00002B3B                 db    0
.rdata$r:00002B3C                 db    0
.rdata$r:00002B3D                 db    0
.rdata$r:00002B3E                 db    0
.rdata$r:00002B3F                 db    0
.rdata$r:00002B40                 dd offset ??_R0?AVCEncoder@NWzAes@NCrypto@@@8 ; NCrypto::NWzAes::CEncoder `RTTI Type Descriptor'
.rdata$r:00002B44                 dd offset ??_R3CEncoder@NWzAes@NCrypto@@8 ; NCrypto::NWzAes::CEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002B44 _rdata$r        ends
.rdata$r:00002B44
.data:00002B48 ; ===========================================================================
.data:00002B48
.data:00002B48 ; Segment type: Pure data
.data:00002B48 ; Segment permissions: Read/Write
.data:00002B48 _data           segment dword public 'DATA' use32
.data:00002B48                 assume cs:_data
.data:00002B48                 ;org 2B48h
.data:00002B48 ; COMDAT (pick any)
.data:00002B48                 public ??_R0?AVCEncoder@NWzAes@NCrypto@@@8
.data:00002B48 ; class NCrypto::NWzAes::CEncoder `RTTI Type Descriptor'
.data:00002B48 ??_R0?AVCEncoder@NWzAes@NCrypto@@@8 dd offset ??_7type_info@@6B@
.data:00002B48                                         ; DATA XREF: .rdata$r:00002B40o
.data:00002B48                                         ; .rdata$r:NCrypto::NWzAes::CEncoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00002B48                                         ; const type_info::`vftable'
.data:00002B4C                 align 10h
.data:00002B50 a_?avcencoder@n db '.?AVCEncoder@NWzAes@NCrypto@@',0
.data:00002B6E                 align 10h
.data:00002B6E _data           ends
.data:00002B6E
.rdata$r:00002B70 ; ===========================================================================
.rdata$r:00002B70
.rdata$r:00002B70 ; Segment type: Pure data
.rdata$r:00002B70 ; Segment permissions: Read
.rdata$r:00002B70 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002B70                 assume cs:_rdata$r
.rdata$r:00002B70                 ;org 2B70h
.rdata$r:00002B70 ; COMDAT (pick any)
.rdata$r:00002B70                 public ??_R3CEncoder@NWzAes@NCrypto@@8
.rdata$r:00002B70 ; NCrypto::NWzAes::CEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002B70 ??_R3CEncoder@NWzAes@NCrypto@@8 db    0 ; DATA XREF: .rdata$r:00002B44o
.rdata$r:00002B70                                         ; .rdata$r:00002BB8o ...
.rdata$r:00002B71                 db    0
.rdata$r:00002B72                 db    0
.rdata$r:00002B73                 db    0
.rdata$r:00002B74                 db    1
.rdata$r:00002B75                 db    0
.rdata$r:00002B76                 db    0
.rdata$r:00002B77                 db    0
.rdata$r:00002B78                 db    7
.rdata$r:00002B79                 db    0
.rdata$r:00002B7A                 db    0
.rdata$r:00002B7B                 db    0
.rdata$r:00002B7C                 dd offset ??_R2CEncoder@NWzAes@NCrypto@@8 ; NCrypto::NWzAes::CEncoder::`RTTI Base Class Array'
.rdata$r:00002B7C _rdata$r        ends
.rdata$r:00002B7C
.rdata$r:00002B80 ; ===========================================================================
.rdata$r:00002B80
.rdata$r:00002B80 ; Segment type: Pure data
.rdata$r:00002B80 ; Segment permissions: Read
.rdata$r:00002B80 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002B80                 assume cs:_rdata$r
.rdata$r:00002B80                 ;org 2B80h
.rdata$r:00002B80 ; COMDAT (pick any)
.rdata$r:00002B80                 public ??_R2CEncoder@NWzAes@NCrypto@@8
.rdata$r:00002B80 ; NCrypto::NWzAes::CEncoder::`RTTI Base Class Array'
.rdata$r:00002B80 ??_R2CEncoder@NWzAes@NCrypto@@8 dd offset ??_R1A@?0A@EA@CEncoder@NWzAes@NCrypto@@8
.rdata$r:00002B80                                         ; DATA XREF: .rdata$r:00002B7Co
.rdata$r:00002B80                                         ; NCrypto::NWzAes::CEncoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002B84                 dd offset ??_R1A@?0A@EA@CBaseCoder@NWzAes@NCrypto@@8 ; NCrypto::NWzAes::CBaseCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002B88                 dd offset ??_R1A@?0A@EA@ICompressFilter@@8 ; ICompressFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002B8C                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:00002B90                 dd offset ??_R13?0A@EA@ICryptoSetPassword@@8 ; ICryptoSetPassword::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00002B94                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:00002B98                 dd offset ??_R17?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:00002B9C                 db    0
.rdata$r:00002B9D                 align 10h
.rdata$r:00002B9D _rdata$r        ends
.rdata$r:00002B9D
.rdata$r:00002BA0 ; ===========================================================================
.rdata$r:00002BA0
.rdata$r:00002BA0 ; Segment type: Pure data
.rdata$r:00002BA0 ; Segment permissions: Read
.rdata$r:00002BA0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002BA0                 assume cs:_rdata$r
.rdata$r:00002BA0                 ;org 2BA0h
.rdata$r:00002BA0 ; COMDAT (pick any)
.rdata$r:00002BA0                 public ??_R1A@?0A@EA@CEncoder@NWzAes@NCrypto@@8
.rdata$r:00002BA0 ; NCrypto::NWzAes::CEncoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00002BA0 ??_R1A@?0A@EA@CEncoder@NWzAes@NCrypto@@8 dd offset ??_R0?AVCEncoder@NWzAes@NCrypto@@@8
.rdata$r:00002BA0                                         ; DATA XREF: .rdata$r:NCrypto::NWzAes::CEncoder::`RTTI Base Class Array'o
.rdata$r:00002BA0                                         ; NCrypto::NWzAes::CEncoder `RTTI Type Descriptor'
.rdata$r:00002BA4                 db    6
.rdata$r:00002BA5                 db    0
.rdata$r:00002BA6                 db    0
.rdata$r:00002BA7                 db    0
.rdata$r:00002BA8                 db    0
.rdata$r:00002BA9                 db    0
.rdata$r:00002BAA                 db    0
.rdata$r:00002BAB                 db    0
.rdata$r:00002BAC                 db 0FFh
.rdata$r:00002BAD                 db 0FFh
.rdata$r:00002BAE                 db 0FFh
.rdata$r:00002BAF                 db 0FFh
.rdata$r:00002BB0                 db    0
.rdata$r:00002BB1                 db    0
.rdata$r:00002BB2                 db    0
.rdata$r:00002BB3                 db    0
.rdata$r:00002BB4                 db  40h ; @
.rdata$r:00002BB5                 db    0
.rdata$r:00002BB6                 db    0
.rdata$r:00002BB7                 db    0
.rdata$r:00002BB8                 dd offset ??_R3CEncoder@NWzAes@NCrypto@@8 ; NCrypto::NWzAes::CEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002BB8 _rdata$r        ends
.rdata$r:00002BB8
.rdata$r:00002BBC ; ===========================================================================
.rdata$r:00002BBC
.rdata$r:00002BBC ; Segment type: Pure data
.rdata$r:00002BBC ; Segment permissions: Read
.rdata$r:00002BBC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002BBC                 assume cs:_rdata$r
.rdata$r:00002BBC                 ;org 2BBCh
.rdata$r:00002BBC ; COMDAT (pick any)
.rdata$r:00002BBC                 public ??_R1A@?0A@EA@CBaseCoder@NWzAes@NCrypto@@8
.rdata$r:00002BBC ; NCrypto::NWzAes::CBaseCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00002BBC ??_R1A@?0A@EA@CBaseCoder@NWzAes@NCrypto@@8 dd offset ??_R0?AVCBaseCoder@NWzAes@NCrypto@@@8
.rdata$r:00002BBC                                         ; DATA XREF: .rdata$r:00002B84o
.rdata$r:00002BBC                                         ; .rdata$r:NCrypto::NWzAes::CBaseCoder::`RTTI Base Class Array'o
.rdata$r:00002BBC                                         ; NCrypto::NWzAes::CBaseCoder `RTTI Type Descriptor'
.rdata$r:00002BC0                 db    5
.rdata$r:00002BC1                 db    0
.rdata$r:00002BC2                 db    0
.rdata$r:00002BC3                 db    0
.rdata$r:00002BC4                 db    0
.rdata$r:00002BC5                 db    0
.rdata$r:00002BC6                 db    0
.rdata$r:00002BC7                 db    0
.rdata$r:00002BC8                 db 0FFh
.rdata$r:00002BC9                 db 0FFh
.rdata$r:00002BCA                 db 0FFh
.rdata$r:00002BCB                 db 0FFh
.rdata$r:00002BCC                 db    0
.rdata$r:00002BCD                 db    0
.rdata$r:00002BCE                 db    0
.rdata$r:00002BCF                 db    0
.rdata$r:00002BD0                 db  40h ; @
.rdata$r:00002BD1                 db    0
.rdata$r:00002BD2                 db    0
.rdata$r:00002BD3                 db    0
.rdata$r:00002BD4                 dd offset ??_R3CBaseCoder@NWzAes@NCrypto@@8 ; NCrypto::NWzAes::CBaseCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002BD4 _rdata$r        ends
.rdata$r:00002BD4
.data:00002BD8 ; ===========================================================================
.data:00002BD8
.data:00002BD8 ; Segment type: Pure data
.data:00002BD8 ; Segment permissions: Read/Write
.data:00002BD8 _data           segment dword public 'DATA' use32
.data:00002BD8                 assume cs:_data
.data:00002BD8                 ;org 2BD8h
.data:00002BD8 ; COMDAT (pick any)
.data:00002BD8                 public ??_R0?AVCBaseCoder@NWzAes@NCrypto@@@8
.data:00002BD8 ; class NCrypto::NWzAes::CBaseCoder `RTTI Type Descriptor'
.data:00002BD8 ??_R0?AVCBaseCoder@NWzAes@NCrypto@@@8 dd offset ??_7type_info@@6B@
.data:00002BD8                                         ; DATA XREF: .rdata$r:NCrypto::NWzAes::CBaseCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00002BD8                                         ; .rdata$r:00003638o ...
.data:00002BD8                                         ; const type_info::`vftable'
.data:00002BDC                 align 10h
.data:00002BE0 a_?avcbasecoder db '.?AVCBaseCoder@NWzAes@NCrypto@@',0
.data:00002BE0 _data           ends
.data:00002BE0
.rdata$r:00002C00 ; ===========================================================================
.rdata$r:00002C00
.rdata$r:00002C00 ; Segment type: Pure data
.rdata$r:00002C00 ; Segment permissions: Read
.rdata$r:00002C00 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002C00                 assume cs:_rdata$r
.rdata$r:00002C00                 ;org 2C00h
.rdata$r:00002C00 ; COMDAT (pick any)
.rdata$r:00002C00                 public ??_R3CBaseCoder@NWzAes@NCrypto@@8
.rdata$r:00002C00 ; NCrypto::NWzAes::CBaseCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002C00 ??_R3CBaseCoder@NWzAes@NCrypto@@8 db    0 ; DATA XREF: .rdata$r:00002BD4o
.rdata$r:00002C00                                         ; .rdata$r:0000363Co ...
.rdata$r:00002C01                 db    0
.rdata$r:00002C02                 db    0
.rdata$r:00002C03                 db    0
.rdata$r:00002C04                 db    1
.rdata$r:00002C05                 db    0
.rdata$r:00002C06                 db    0
.rdata$r:00002C07                 db    0
.rdata$r:00002C08                 db    6
.rdata$r:00002C09                 db    0
.rdata$r:00002C0A                 db    0
.rdata$r:00002C0B                 db    0
.rdata$r:00002C0C                 dd offset ??_R2CBaseCoder@NWzAes@NCrypto@@8 ; NCrypto::NWzAes::CBaseCoder::`RTTI Base Class Array'
.rdata$r:00002C0C _rdata$r        ends
.rdata$r:00002C0C
.rdata$r:00002C10 ; ===========================================================================
.rdata$r:00002C10
.rdata$r:00002C10 ; Segment type: Pure data
.rdata$r:00002C10 ; Segment permissions: Read
.rdata$r:00002C10 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002C10                 assume cs:_rdata$r
.rdata$r:00002C10                 ;org 2C10h
.rdata$r:00002C10 ; COMDAT (pick any)
.rdata$r:00002C10                 public ??_R2CBaseCoder@NWzAes@NCrypto@@8
.rdata$r:00002C10 ; NCrypto::NWzAes::CBaseCoder::`RTTI Base Class Array'
.rdata$r:00002C10 ??_R2CBaseCoder@NWzAes@NCrypto@@8 dd offset ??_R1A@?0A@EA@CBaseCoder@NWzAes@NCrypto@@8
.rdata$r:00002C10                                         ; DATA XREF: .rdata$r:00002C0Co
.rdata$r:00002C10                                         ; NCrypto::NWzAes::CBaseCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002C14                 dd offset ??_R1A@?0A@EA@ICompressFilter@@8 ; ICompressFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002C18                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:00002C1C                 dd offset ??_R13?0A@EA@ICryptoSetPassword@@8 ; ICryptoSetPassword::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00002C20                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:00002C24                 dd offset ??_R17?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:00002C28                 db    0
.rdata$r:00002C29                 align 4
.rdata$r:00002C29 _rdata$r        ends
.rdata$r:00002C29
.rdata$r:00002C2C ; ===========================================================================
.rdata$r:00002C2C
.rdata$r:00002C2C ; Segment type: Pure data
.rdata$r:00002C2C ; Segment permissions: Read
.rdata$r:00002C2C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002C2C                 assume cs:_rdata$r
.rdata$r:00002C2C                 ;org 2C2Ch
.rdata$r:00002C2C ; COMDAT (pick any)
.rdata$r:00002C2C                 public ??_R1A@?0A@EA@ICompressFilter@@8
.rdata$r:00002C2C ; ICompressFilter::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00002C2C ??_R1A@?0A@EA@ICompressFilter@@8 dd offset ??_R0?AUICompressFilter@@@8
.rdata$r:00002C2C                                         ; DATA XREF: .rdata$r:00002B88o
.rdata$r:00002C2C                                         ; .rdata$r:00002C14o ...
.rdata$r:00002C2C                                         ; ICompressFilter `RTTI Type Descriptor'
.rdata$r:00002C30                 db    1
.rdata$r:00002C31                 db    0
.rdata$r:00002C32                 db    0
.rdata$r:00002C33                 db    0
.rdata$r:00002C34                 db    0
.rdata$r:00002C35                 db    0
.rdata$r:00002C36                 db    0
.rdata$r:00002C37                 db    0
.rdata$r:00002C38                 db 0FFh
.rdata$r:00002C39                 db 0FFh
.rdata$r:00002C3A                 db 0FFh
.rdata$r:00002C3B                 db 0FFh
.rdata$r:00002C3C                 db    0
.rdata$r:00002C3D                 db    0
.rdata$r:00002C3E                 db    0
.rdata$r:00002C3F                 db    0
.rdata$r:00002C40                 db  40h ; @
.rdata$r:00002C41                 db    0
.rdata$r:00002C42                 db    0
.rdata$r:00002C43                 db    0
.rdata$r:00002C44                 dd offset ??_R3ICompressFilter@@8 ; ICompressFilter::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002C44 _rdata$r        ends
.rdata$r:00002C44
.data:00002C48 ; ===========================================================================
.data:00002C48
.data:00002C48 ; Segment type: Pure data
.data:00002C48 ; Segment permissions: Read/Write
.data:00002C48 _data           segment dword public 'DATA' use32
.data:00002C48                 assume cs:_data
.data:00002C48                 ;org 2C48h
.data:00002C48 ; COMDAT (pick any)
.data:00002C48                 public ??_R0?AUICompressFilter@@@8
.data:00002C48 ; struct ICompressFilter `RTTI Type Descriptor'
.data:00002C48 ??_R0?AUICompressFilter@@@8 dd offset ??_7type_info@@6B@
.data:00002C48                                         ; DATA XREF: .rdata$r:ICompressFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00002C48                                         ; .rdata$r:000037D8o
.data:00002C48                                         ; const type_info::`vftable'
.data:00002C4C                 align 10h
.data:00002C50 a_?auicompressf db '.?AUICompressFilter@@',0
.data:00002C66                 align 4
.data:00002C66 _data           ends
.data:00002C66
.rdata$r:00002C68 ; ===========================================================================
.rdata$r:00002C68
.rdata$r:00002C68 ; Segment type: Pure data
.rdata$r:00002C68 ; Segment permissions: Read
.rdata$r:00002C68 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002C68                 assume cs:_rdata$r
.rdata$r:00002C68                 ;org 2C68h
.rdata$r:00002C68 ; COMDAT (pick any)
.rdata$r:00002C68                 public ??_R3ICompressFilter@@8
.rdata$r:00002C68 ; ICompressFilter::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002C68 ??_R3ICompressFilter@@8 db    0         ; DATA XREF: .rdata$r:00002C44o
.rdata$r:00002C68                                         ; .rdata$r:000037DCo
.rdata$r:00002C69                 db    0
.rdata$r:00002C6A                 db    0
.rdata$r:00002C6B                 db    0
.rdata$r:00002C6C                 db    0
.rdata$r:00002C6D                 db    0
.rdata$r:00002C6E                 db    0
.rdata$r:00002C6F                 db    0
.rdata$r:00002C70                 db    2
.rdata$r:00002C71                 db    0
.rdata$r:00002C72                 db    0
.rdata$r:00002C73                 db    0
.rdata$r:00002C74                 dd offset ??_R2ICompressFilter@@8 ; ICompressFilter::`RTTI Base Class Array'
.rdata$r:00002C74 _rdata$r        ends
.rdata$r:00002C74
.rdata$r:00002C78 ; ===========================================================================
.rdata$r:00002C78
.rdata$r:00002C78 ; Segment type: Pure data
.rdata$r:00002C78 ; Segment permissions: Read
.rdata$r:00002C78 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002C78                 assume cs:_rdata$r
.rdata$r:00002C78                 ;org 2C78h
.rdata$r:00002C78 ; COMDAT (pick any)
.rdata$r:00002C78                 public ??_R2ICompressFilter@@8
.rdata$r:00002C78 ; ICompressFilter::`RTTI Base Class Array'
.rdata$r:00002C78 ??_R2ICompressFilter@@8 dd offset ??_R1A@?0A@EA@ICompressFilter@@8
.rdata$r:00002C78                                         ; DATA XREF: .rdata$r:00002C74o
.rdata$r:00002C78                                         ; ICompressFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002C7C                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002C80                 db    0
.rdata$r:00002C81                 align 4
.rdata$r:00002C81 _rdata$r        ends
.rdata$r:00002C81
.rdata$r:00002C84 ; ===========================================================================
.rdata$r:00002C84
.rdata$r:00002C84 ; Segment type: Pure data
.rdata$r:00002C84 ; Segment permissions: Read
.rdata$r:00002C84 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002C84                 assume cs:_rdata$r
.rdata$r:00002C84                 ;org 2C84h
.rdata$r:00002C84 ; COMDAT (pick any)
.rdata$r:00002C84                 public ??_R13?0A@EA@ICryptoSetPassword@@8
.rdata$r:00002C84 ; ICryptoSetPassword::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:00002C84 ??_R13?0A@EA@ICryptoSetPassword@@8 dd offset ??_R0?AUICryptoSetPassword@@@8
.rdata$r:00002C84                                         ; DATA XREF: .rdata$r:00002B90o
.rdata$r:00002C84                                         ; .rdata$r:00002C1Co ...
.rdata$r:00002C84                                         ; ICryptoSetPassword `RTTI Type Descriptor'
.rdata$r:00002C88                 db    1
.rdata$r:00002C89                 db    0
.rdata$r:00002C8A                 db    0
.rdata$r:00002C8B                 db    0
.rdata$r:00002C8C                 db    4
.rdata$r:00002C8D                 db    0
.rdata$r:00002C8E                 db    0
.rdata$r:00002C8F                 db    0
.rdata$r:00002C90                 db 0FFh
.rdata$r:00002C91                 db 0FFh
.rdata$r:00002C92                 db 0FFh
.rdata$r:00002C93                 db 0FFh
.rdata$r:00002C94                 db    0
.rdata$r:00002C95                 db    0
.rdata$r:00002C96                 db    0
.rdata$r:00002C97                 db    0
.rdata$r:00002C98                 db  40h ; @
.rdata$r:00002C99                 db    0
.rdata$r:00002C9A                 db    0
.rdata$r:00002C9B                 db    0
.rdata$r:00002C9C                 dd offset ??_R3ICryptoSetPassword@@8 ; ICryptoSetPassword::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002C9C _rdata$r        ends
.rdata$r:00002C9C
.data:00002CA0 ; ===========================================================================
.data:00002CA0
.data:00002CA0 ; Segment type: Pure data
.data:00002CA0 ; Segment permissions: Read/Write
.data:00002CA0 _data           segment dword public 'DATA' use32
.data:00002CA0                 assume cs:_data
.data:00002CA0                 ;org 2CA0h
.data:00002CA0 ; COMDAT (pick any)
.data:00002CA0                 public ??_R0?AUICryptoSetPassword@@@8
.data:00002CA0 ; struct ICryptoSetPassword `RTTI Type Descriptor'
.data:00002CA0 ??_R0?AUICryptoSetPassword@@@8 dd offset ??_7type_info@@6B@
.data:00002CA0                                         ; DATA XREF: .rdata$r:ICryptoSetPassword::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:00002CA0                                         ; .rdata$r:ICryptoSetPassword::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00002CA0                                         ; const type_info::`vftable'
.data:00002CA4                 align 8
.data:00002CA8 a_?auicryptoset db '.?AUICryptoSetPassword@@',0
.data:00002CC1                 align 4
.data:00002CC1 _data           ends
.data:00002CC1
.rdata$r:00002CC4 ; ===========================================================================
.rdata$r:00002CC4
.rdata$r:00002CC4 ; Segment type: Pure data
.rdata$r:00002CC4 ; Segment permissions: Read
.rdata$r:00002CC4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002CC4                 assume cs:_rdata$r
.rdata$r:00002CC4                 ;org 2CC4h
.rdata$r:00002CC4 ; COMDAT (pick any)
.rdata$r:00002CC4                 public ??_R3ICryptoSetPassword@@8
.rdata$r:00002CC4 ; ICryptoSetPassword::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002CC4 ??_R3ICryptoSetPassword@@8 db    0      ; DATA XREF: .rdata$r:00002C9Co
.rdata$r:00002CC4                                         ; .rdata$r:00002CF8o ...
.rdata$r:00002CC5                 db    0
.rdata$r:00002CC6                 db    0
.rdata$r:00002CC7                 db    0
.rdata$r:00002CC8                 db    0
.rdata$r:00002CC9                 db    0
.rdata$r:00002CCA                 db    0
.rdata$r:00002CCB                 db    0
.rdata$r:00002CCC                 db    2
.rdata$r:00002CCD                 db    0
.rdata$r:00002CCE                 db    0
.rdata$r:00002CCF                 db    0
.rdata$r:00002CD0                 dd offset ??_R2ICryptoSetPassword@@8 ; ICryptoSetPassword::`RTTI Base Class Array'
.rdata$r:00002CD0 _rdata$r        ends
.rdata$r:00002CD0
.rdata$r:00002CD4 ; ===========================================================================
.rdata$r:00002CD4
.rdata$r:00002CD4 ; Segment type: Pure data
.rdata$r:00002CD4 ; Segment permissions: Read
.rdata$r:00002CD4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002CD4                 assume cs:_rdata$r
.rdata$r:00002CD4                 ;org 2CD4h
.rdata$r:00002CD4 ; COMDAT (pick any)
.rdata$r:00002CD4                 public ??_R2ICryptoSetPassword@@8
.rdata$r:00002CD4 ; ICryptoSetPassword::`RTTI Base Class Array'
.rdata$r:00002CD4 ??_R2ICryptoSetPassword@@8 dd offset ??_R1A@?0A@EA@ICryptoSetPassword@@8
.rdata$r:00002CD4                                         ; DATA XREF: .rdata$r:00002CD0o
.rdata$r:00002CD4                                         ; ICryptoSetPassword::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002CD8                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002CDC                 db    0
.rdata$r:00002CDD                 align 10h
.rdata$r:00002CDD _rdata$r        ends
.rdata$r:00002CDD
.rdata$r:00002CE0 ; ===========================================================================
.rdata$r:00002CE0
.rdata$r:00002CE0 ; Segment type: Pure data
.rdata$r:00002CE0 ; Segment permissions: Read
.rdata$r:00002CE0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002CE0                 assume cs:_rdata$r
.rdata$r:00002CE0                 ;org 2CE0h
.rdata$r:00002CE0 ; COMDAT (pick any)
.rdata$r:00002CE0                 public ??_R1A@?0A@EA@ICryptoSetPassword@@8
.rdata$r:00002CE0 ; ICryptoSetPassword::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00002CE0 ??_R1A@?0A@EA@ICryptoSetPassword@@8 dd offset ??_R0?AUICryptoSetPassword@@@8
.rdata$r:00002CE0                                         ; DATA XREF: .rdata$r:ICryptoSetPassword::`RTTI Base Class Array'o
.rdata$r:00002CE0                                         ; ICryptoSetPassword `RTTI Type Descriptor'
.rdata$r:00002CE4                 db    1
.rdata$r:00002CE5                 db    0
.rdata$r:00002CE6                 db    0
.rdata$r:00002CE7                 db    0
.rdata$r:00002CE8                 db    0
.rdata$r:00002CE9                 db    0
.rdata$r:00002CEA                 db    0
.rdata$r:00002CEB                 db    0
.rdata$r:00002CEC                 db 0FFh
.rdata$r:00002CED                 db 0FFh
.rdata$r:00002CEE                 db 0FFh
.rdata$r:00002CEF                 db 0FFh
.rdata$r:00002CF0                 db    0
.rdata$r:00002CF1                 db    0
.rdata$r:00002CF2                 db    0
.rdata$r:00002CF3                 db    0
.rdata$r:00002CF4                 db  40h ; @
.rdata$r:00002CF5                 db    0
.rdata$r:00002CF6                 db    0
.rdata$r:00002CF7                 db    0
.rdata$r:00002CF8                 dd offset ??_R3ICryptoSetPassword@@8 ; ICryptoSetPassword::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002CF8 _rdata$r        ends
.rdata$r:00002CF8
.rdata$r:00002CFC ; ===========================================================================
.rdata$r:00002CFC
.rdata$r:00002CFC ; Segment type: Pure data
.rdata$r:00002CFC ; Segment permissions: Read
.rdata$r:00002CFC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002CFC                 assume cs:_rdata$r
.rdata$r:00002CFC                 ;org 2CFCh
.rdata$r:00002CFC ; COMDAT (pick any)
.rdata$r:00002CFC                 public ??_R17?0A@EA@CMyUnknownImp@@8
.rdata$r:00002CFC ; CMyUnknownImp::`RTTI Base Class Descriptor at (8, -1, 0, 64)'
.rdata$r:00002CFC ??_R17?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00002CFC                                         ; DATA XREF: .rdata$r:00002B98o
.rdata$r:00002CFC                                         ; .rdata$r:00002C24o ...
.rdata$r:00002CFC                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00002D00                 db    0
.rdata$r:00002D01                 db    0
.rdata$r:00002D02                 db    0
.rdata$r:00002D03                 db    0
.rdata$r:00002D04                 db    8
.rdata$r:00002D05                 db    0
.rdata$r:00002D06                 db    0
.rdata$r:00002D07                 db    0
.rdata$r:00002D08                 db 0FFh
.rdata$r:00002D09                 db 0FFh
.rdata$r:00002D0A                 db 0FFh
.rdata$r:00002D0B                 db 0FFh
.rdata$r:00002D0C                 db    0
.rdata$r:00002D0D                 db    0
.rdata$r:00002D0E                 db    0
.rdata$r:00002D0F                 db    0
.rdata$r:00002D10                 db  40h ; @
.rdata$r:00002D11                 db    0
.rdata$r:00002D12                 db    0
.rdata$r:00002D13                 db    0
.rdata$r:00002D14                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002D14 _rdata$r        ends
.rdata$r:00002D14
.rdata$r:00002D18 ; ===========================================================================
.rdata$r:00002D18
.rdata$r:00002D18 ; Segment type: Pure data
.rdata$r:00002D18 ; Segment permissions: Read
.rdata$r:00002D18 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002D18                 assume cs:_rdata$r
.rdata$r:00002D18                 ;org 2D18h
.rdata$r:00002D18 ; COMDAT (pick any)
.rdata$r:00002D18                 public ??_R4CEncoder@NWzAes@NCrypto@@6BICryptoSetPassword@@@
.rdata$r:00002D18 ; const NCrypto::NWzAes::CEncoder::`RTTI Complete Object Locator'{for `ICryptoSetPassword'}
.rdata$r:00002D18 ??_R4CEncoder@NWzAes@NCrypto@@6BICryptoSetPassword@@@ db    0
.rdata$r:00002D18                                         ; DATA XREF: .rdata:00002B08o
.rdata$r:00002D19                 db    0
.rdata$r:00002D1A                 db    0
.rdata$r:00002D1B                 db    0
.rdata$r:00002D1C                 db    4
.rdata$r:00002D1D                 db    0
.rdata$r:00002D1E                 db    0
.rdata$r:00002D1F                 db    0
.rdata$r:00002D20                 db    0
.rdata$r:00002D21                 db    0
.rdata$r:00002D22                 db    0
.rdata$r:00002D23                 db    0
.rdata$r:00002D24                 dd offset ??_R0?AVCEncoder@NWzAes@NCrypto@@@8 ; NCrypto::NWzAes::CEncoder `RTTI Type Descriptor'
.rdata$r:00002D28                 dd offset ??_R3CEncoder@NWzAes@NCrypto@@8 ; NCrypto::NWzAes::CEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002D28 _rdata$r        ends
.rdata$r:00002D28
.text:00002D2C ; ===========================================================================
.text:00002D2C
.text:00002D2C ; Segment type: Pure code
.text:00002D2C ; Segment permissions: Read/Execute
.text:00002D2C _text           segment para public 'CODE' use32
.text:00002D2C                 assume cs:_text
.text:00002D2C                 ;org 2D2Ch
.text:00002D2C ; COMDAT (pick any)
.text:00002D2C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002D2C
.text:00002D2C ; =============== S U B R O U T I N E =======================================
.text:00002D2C
.text:00002D2C ; Attributes: bp-based frame
.text:00002D2C
.text:00002D2C ; __int32 __stdcall NCrypto::NWzAes::CBaseCoder::QueryInterface(NCrypto::NWzAes::CBaseCoder *this, const struct _GUID *Buf1, void **)
.text:00002D2C                 public ?QueryInterface@CBaseCoder@NWzAes@NCrypto@@UAGJABU_GUID@@PAPAX@Z
.text:00002D2C ?QueryInterface@CBaseCoder@NWzAes@NCrypto@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00002D2C                                         ; CODE XREF: [thunk]:NCrypto::NWzAes::CBaseCoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j
.text:00002D2C                                         ; DATA XREF: .rdata:const NCrypto::NWzAes::CEncoder::`vftable'{for `ICompressFilter'}o ...
.text:00002D2C
.text:00002D2C var_8           = dword ptr -8
.text:00002D2C var_4           = dword ptr -4
.text:00002D2C this            = dword ptr  8
.text:00002D2C Buf1            = dword ptr  0Ch
.text:00002D2C arg_8           = dword ptr  10h
.text:00002D2C
.text:00002D2C                 push    ebp
.text:00002D2D                 mov     ebp, esp
.text:00002D2F                 sub     esp, 8
.text:00002D32                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002D39                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002D40                 mov     eax, [ebp+arg_8]
.text:00002D43                 mov     dword ptr [eax], 0
.text:00002D49                 push    offset _IID_IUnknown ; Buf2
.text:00002D4E                 mov     ecx, [ebp+Buf1]
.text:00002D51                 push    ecx             ; Buf1
.text:00002D52                 call    ___@8           ; __(x,x)
.text:00002D57                 test    eax, eax
.text:00002D59                 jz      short loc_2D7D
.text:00002D5B                 cmp     [ebp+this], 0
.text:00002D5F                 jz      short loc_2D6C
.text:00002D61                 mov     edx, [ebp+this]
.text:00002D64                 add     edx, 4
.text:00002D67                 mov     [ebp+var_4], edx
.text:00002D6A                 jmp     short loc_2D73
.text:00002D6C ; ---------------------------------------------------------------------------
.text:00002D6C
.text:00002D6C loc_2D6C:                               ; CODE XREF: NCrypto::NWzAes::CBaseCoder::QueryInterface(_GUID const &,void * *)+33j
.text:00002D6C                 mov     [ebp+var_4], 0
.text:00002D73
.text:00002D73 loc_2D73:                               ; CODE XREF: NCrypto::NWzAes::CBaseCoder::QueryInterface(_GUID const &,void * *)+3Ej
.text:00002D73                 mov     eax, [ebp+arg_8]
.text:00002D76                 mov     ecx, [ebp+var_4]
.text:00002D79                 mov     [eax], ecx
.text:00002D7B                 jmp     short loc_2DB8
.text:00002D7D ; ---------------------------------------------------------------------------
.text:00002D7D
.text:00002D7D loc_2D7D:                               ; CODE XREF: NCrypto::NWzAes::CBaseCoder::QueryInterface(_GUID const &,void * *)+2Dj
.text:00002D7D                 push    offset _IID_ICryptoSetPassword ; Buf2
.text:00002D82                 mov     edx, [ebp+Buf1]
.text:00002D85                 push    edx             ; Buf1
.text:00002D86                 call    ___@8           ; __(x,x)
.text:00002D8B                 test    eax, eax
.text:00002D8D                 jz      short loc_2DB1
.text:00002D8F                 cmp     [ebp+this], 0
.text:00002D93                 jz      short loc_2DA0
.text:00002D95                 mov     eax, [ebp+this]
.text:00002D98                 add     eax, 4
.text:00002D9B                 mov     [ebp+var_8], eax
.text:00002D9E                 jmp     short loc_2DA7
.text:00002DA0 ; ---------------------------------------------------------------------------
.text:00002DA0
.text:00002DA0 loc_2DA0:                               ; CODE XREF: NCrypto::NWzAes::CBaseCoder::QueryInterface(_GUID const &,void * *)+67j
.text:00002DA0                 mov     [ebp+var_8], 0
.text:00002DA7
.text:00002DA7 loc_2DA7:                               ; CODE XREF: NCrypto::NWzAes::CBaseCoder::QueryInterface(_GUID const &,void * *)+72j
.text:00002DA7                 mov     ecx, [ebp+arg_8]
.text:00002DAA                 mov     edx, [ebp+var_8]
.text:00002DAD                 mov     [ecx], edx
.text:00002DAF                 jmp     short loc_2DB8
.text:00002DB1 ; ---------------------------------------------------------------------------
.text:00002DB1
.text:00002DB1 loc_2DB1:                               ; CODE XREF: NCrypto::NWzAes::CBaseCoder::QueryInterface(_GUID const &,void * *)+61j
.text:00002DB1                 mov     eax, 80004002h
.text:00002DB6                 jmp     short loc_2DC9
.text:00002DB8 ; ---------------------------------------------------------------------------
.text:00002DB8
.text:00002DB8 loc_2DB8:                               ; CODE XREF: NCrypto::NWzAes::CBaseCoder::QueryInterface(_GUID const &,void * *)+4Fj
.text:00002DB8                                         ; NCrypto::NWzAes::CBaseCoder::QueryInterface(_GUID const &,void * *)+83j
.text:00002DB8                 mov     eax, [ebp+this]
.text:00002DBB                 mov     ecx, [eax+8]
.text:00002DBE                 add     ecx, 1
.text:00002DC1                 mov     edx, [ebp+this]
.text:00002DC4                 mov     [edx+8], ecx
.text:00002DC7                 xor     eax, eax
.text:00002DC9
.text:00002DC9 loc_2DC9:                               ; CODE XREF: NCrypto::NWzAes::CBaseCoder::QueryInterface(_GUID const &,void * *)+8Aj
.text:00002DC9                 add     esp, 8
.text:00002DCC                 cmp     ebp, esp
.text:00002DCE                 call    __RTC_CheckEsp
.text:00002DD3                 mov     esp, ebp
.text:00002DD5                 pop     ebp
.text:00002DD6                 retn    0Ch
.text:00002DD6 ?QueryInterface@CBaseCoder@NWzAes@NCrypto@@UAGJABU_GUID@@PAPAX@Z endp
.text:00002DD6
.text:00002DD6 ; ---------------------------------------------------------------------------
.text:00002DD9                 align 4
.text:00002DD9 _text           ends
.text:00002DD9
.text:00002DDC ; ===========================================================================
.text:00002DDC
.text:00002DDC ; Segment type: Pure code
.text:00002DDC ; Segment permissions: Read/Execute
.text:00002DDC _text           segment para public 'CODE' use32
.text:00002DDC                 assume cs:_text
.text:00002DDC                 ;org 2DDCh
.text:00002DDC ; COMDAT (pick any)
.text:00002DDC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002DDC
.text:00002DDC ; =============== S U B R O U T I N E =======================================
.text:00002DDC
.text:00002DDC ; Attributes: bp-based frame
.text:00002DDC
.text:00002DDC ; unsigned __int32 __stdcall NCrypto::NWzAes::CBaseCoder::AddRef(NCrypto::NWzAes::CBaseCoder *this)
.text:00002DDC                 public ?AddRef@CBaseCoder@NWzAes@NCrypto@@UAGKXZ
.text:00002DDC ?AddRef@CBaseCoder@NWzAes@NCrypto@@UAGKXZ proc near
.text:00002DDC                                         ; CODE XREF: [thunk]:NCrypto::NWzAes::CBaseCoder::AddRef`adjustor{4}' (void)+5j
.text:00002DDC                                         ; DATA XREF: .rdata:00002B24o ...
.text:00002DDC
.text:00002DDC var_4           = dword ptr -4
.text:00002DDC this            = dword ptr  8
.text:00002DDC
.text:00002DDC                 push    ebp
.text:00002DDD                 mov     ebp, esp
.text:00002DDF                 push    ecx
.text:00002DE0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002DE7                 mov     eax, [ebp+this]
.text:00002DEA                 mov     ecx, [eax+8]
.text:00002DED                 add     ecx, 1
.text:00002DF0                 mov     [ebp+var_4], ecx
.text:00002DF3                 mov     edx, [ebp+this]
.text:00002DF6                 mov     eax, [ebp+var_4]
.text:00002DF9                 mov     [edx+8], eax
.text:00002DFC                 mov     eax, [ebp+var_4]
.text:00002DFF                 mov     esp, ebp
.text:00002E01                 pop     ebp
.text:00002E02                 retn    4
.text:00002E02 ?AddRef@CBaseCoder@NWzAes@NCrypto@@UAGKXZ endp
.text:00002E02
.text:00002E02 ; ---------------------------------------------------------------------------
.text:00002E05                 align 4
.text:00002E05 _text           ends
.text:00002E05
.text:00002E08 ; ===========================================================================
.text:00002E08
.text:00002E08 ; Segment type: Pure code
.text:00002E08 ; Segment permissions: Read/Execute
.text:00002E08 _text           segment para public 'CODE' use32
.text:00002E08                 assume cs:_text
.text:00002E08                 ;org 2E08h
.text:00002E08 ; COMDAT (pick any)
.text:00002E08                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002E08
.text:00002E08 ; =============== S U B R O U T I N E =======================================
.text:00002E08
.text:00002E08 ; Attributes: bp-based frame
.text:00002E08
.text:00002E08 ; unsigned __int32 __stdcall NCrypto::NWzAes::CBaseCoder::Release(NCrypto::NWzAes::CBaseCoder *this)
.text:00002E08                 public ?Release@CBaseCoder@NWzAes@NCrypto@@UAGKXZ
.text:00002E08 ?Release@CBaseCoder@NWzAes@NCrypto@@UAGKXZ proc near
.text:00002E08                                         ; CODE XREF: [thunk]:NCrypto::NWzAes::CBaseCoder::Release`adjustor{4}' (void)+5j
.text:00002E08                                         ; DATA XREF: .rdata:00002B28o ...
.text:00002E08
.text:00002E08 var_10          = dword ptr -10h
.text:00002E08 var_C           = dword ptr -0Ch
.text:00002E08 var_8           = dword ptr -8
.text:00002E08 var_4           = dword ptr -4
.text:00002E08 this            = dword ptr  8
.text:00002E08
.text:00002E08                 push    ebp
.text:00002E09                 mov     ebp, esp
.text:00002E0B                 sub     esp, 10h
.text:00002E0E                 mov     eax, 0CCCCCCCCh
.text:00002E13                 mov     [ebp+var_10], eax
.text:00002E16                 mov     [ebp+var_C], eax
.text:00002E19                 mov     [ebp+var_8], eax
.text:00002E1C                 mov     [ebp+var_4], eax
.text:00002E1F                 mov     eax, [ebp+this]
.text:00002E22                 mov     ecx, [eax+8]
.text:00002E25                 sub     ecx, 1
.text:00002E28                 mov     [ebp+var_C], ecx
.text:00002E2B                 mov     edx, [ebp+this]
.text:00002E2E                 mov     eax, [ebp+var_C]
.text:00002E31                 mov     [edx+8], eax
.text:00002E34                 cmp     [ebp+var_C], 0
.text:00002E38                 jz      short loc_2E42
.text:00002E3A                 mov     ecx, [ebp+this]
.text:00002E3D                 mov     eax, [ecx+8]
.text:00002E40                 jmp     short loc_2E6C
.text:00002E42 ; ---------------------------------------------------------------------------
.text:00002E42
.text:00002E42 loc_2E42:                               ; CODE XREF: NCrypto::NWzAes::CBaseCoder::Release(void)+30j
.text:00002E42                 mov     edx, [ebp+this]
.text:00002E45                 mov     [ebp+var_8], edx
.text:00002E48                 mov     eax, [ebp+var_8]
.text:00002E4B                 mov     [ebp+var_4], eax
.text:00002E4E                 cmp     [ebp+var_4], 0
.text:00002E52                 jz      short loc_2E63
.text:00002E54                 push    1
.text:00002E56                 mov     ecx, [ebp+var_4]
.text:00002E59                 call    ??_GCBaseCoder@NWzAes@NCrypto@@QAEPAXI@Z ; NCrypto::NWzAes::CBaseCoder::`scalar deleting destructor'(uint)
.text:00002E5E                 mov     [ebp+var_10], eax
.text:00002E61                 jmp     short loc_2E6A
.text:00002E63 ; ---------------------------------------------------------------------------
.text:00002E63
.text:00002E63 loc_2E63:                               ; CODE XREF: NCrypto::NWzAes::CBaseCoder::Release(void)+4Aj
.text:00002E63                 mov     [ebp+var_10], 0
.text:00002E6A
.text:00002E6A loc_2E6A:                               ; CODE XREF: NCrypto::NWzAes::CBaseCoder::Release(void)+59j
.text:00002E6A                 xor     eax, eax
.text:00002E6C
.text:00002E6C loc_2E6C:                               ; CODE XREF: NCrypto::NWzAes::CBaseCoder::Release(void)+38j
.text:00002E6C                 add     esp, 10h
.text:00002E6F                 cmp     ebp, esp
.text:00002E71                 call    __RTC_CheckEsp
.text:00002E76                 mov     esp, ebp
.text:00002E78                 pop     ebp
.text:00002E79                 retn    4
.text:00002E79 ?Release@CBaseCoder@NWzAes@NCrypto@@UAGKXZ endp
.text:00002E79
.text:00002E79 _text           ends
.text:00002E79
.text:00002E7C ; ===========================================================================
.text:00002E7C
.text:00002E7C ; Segment type: Pure code
.text:00002E7C ; Segment permissions: Read/Execute
.text:00002E7C _text           segment para public 'CODE' use32
.text:00002E7C                 assume cs:_text
.text:00002E7C                 ;org 2E7Ch
.text:00002E7C ; COMDAT (pick any)
.text:00002E7C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002E7C
.text:00002E7C ; =============== S U B R O U T I N E =======================================
.text:00002E7C
.text:00002E7C ; Attributes: bp-based frame
.text:00002E7C
.text:00002E7C ; public: void * __thiscall NCrypto::NWzAes::CBaseCoder::`scalar deleting destructor'(unsigned int)
.text:00002E7C                 public ??_GCBaseCoder@NWzAes@NCrypto@@QAEPAXI@Z
.text:00002E7C ??_GCBaseCoder@NWzAes@NCrypto@@QAEPAXI@Z proc near
.text:00002E7C                                         ; CODE XREF: NCrypto::NWzAes::CBaseCoder::Release(void)+51p
.text:00002E7C
.text:00002E7C var_4           = dword ptr -4
.text:00002E7C arg_0           = dword ptr  8
.text:00002E7C
.text:00002E7C                 push    ebp
.text:00002E7D                 mov     ebp, esp
.text:00002E7F                 push    ecx
.text:00002E80                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002E87                 mov     [ebp+var_4], ecx
.text:00002E8A                 mov     ecx, [ebp+var_4] ; this
.text:00002E8D                 call    ??1CBaseCoder@NWzAes@NCrypto@@QAE@XZ ; NCrypto::NWzAes::CBaseCoder::~CBaseCoder(void)
.text:00002E92                 mov     eax, [ebp+arg_0]
.text:00002E95                 and     eax, 1
.text:00002E98                 jz      short loc_2EA6
.text:00002E9A                 mov     ecx, [ebp+var_4]
.text:00002E9D                 push    ecx             ; void *
.text:00002E9E                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00002EA3                 add     esp, 4
.text:00002EA6
.text:00002EA6 loc_2EA6:                               ; CODE XREF: NCrypto::NWzAes::CBaseCoder::`scalar deleting destructor'(uint)+1Cj
.text:00002EA6                 mov     eax, [ebp+var_4]
.text:00002EA9                 add     esp, 4
.text:00002EAC                 cmp     ebp, esp
.text:00002EAE                 call    __RTC_CheckEsp
.text:00002EB3                 mov     esp, ebp
.text:00002EB5                 pop     ebp
.text:00002EB6                 retn    4
.text:00002EB6 ??_GCBaseCoder@NWzAes@NCrypto@@QAEPAXI@Z endp
.text:00002EB6
.text:00002EB6 ; ---------------------------------------------------------------------------
.text:00002EB9                 align 4
.text:00002EB9 _text           ends
.text:00002EB9
.text:00002EBC ; ===========================================================================
.text:00002EBC
.text:00002EBC ; Segment type: Pure code
.text:00002EBC ; Segment permissions: Read/Execute
.text:00002EBC _text           segment para public 'CODE' use32
.text:00002EBC                 assume cs:_text
.text:00002EBC                 ;org 2EBCh
.text:00002EBC ; COMDAT (pick any)
.text:00002EBC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002EBC
.text:00002EBC ; =============== S U B R O U T I N E =======================================
.text:00002EBC
.text:00002EBC ; Attributes: bp-based frame
.text:00002EBC
.text:00002EBC ; _DWORD __thiscall NCrypto::NWzAes::CBaseCoder::~CBaseCoder(NCrypto::NWzAes::CBaseCoder *__hidden this)
.text:00002EBC                 public ??1CBaseCoder@NWzAes@NCrypto@@QAE@XZ
.text:00002EBC ??1CBaseCoder@NWzAes@NCrypto@@QAE@XZ proc near
.text:00002EBC                                         ; CODE XREF: NCrypto::NWzAes::CBaseCoder::`scalar deleting destructor'(uint)+11p
.text:00002EBC
.text:00002EBC var_4           = dword ptr -4
.text:00002EBC
.text:00002EBC                 push    ebp
.text:00002EBD                 mov     ebp, esp
.text:00002EBF                 push    ecx
.text:00002EC0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002EC7                 mov     [ebp+var_4], ecx
.text:00002ECA                 mov     ecx, [ebp+var_4]
.text:00002ECD                 add     ecx, 0Ch        ; this
.text:00002ED0                 call    ??1CKeyInfo@NWzAes@NCrypto@@QAE@XZ ; NCrypto::NWzAes::CKeyInfo::~CKeyInfo(void)
.text:00002ED5                 add     esp, 4
.text:00002ED8                 cmp     ebp, esp
.text:00002EDA                 call    __RTC_CheckEsp
.text:00002EDF                 mov     esp, ebp
.text:00002EE1                 pop     ebp
.text:00002EE2                 retn
.text:00002EE2 ??1CBaseCoder@NWzAes@NCrypto@@QAE@XZ endp
.text:00002EE2
.text:00002EE2 ; ---------------------------------------------------------------------------
.text:00002EE3                 align 4
.text:00002EE3 _text           ends
.text:00002EE3
.text:00002EE4 ; ===========================================================================
.text:00002EE4
.text:00002EE4 ; Segment type: Pure code
.text:00002EE4 ; Segment permissions: Read/Execute
.text:00002EE4 _text           segment para public 'CODE' use32
.text:00002EE4                 assume cs:_text
.text:00002EE4                 ;org 2EE4h
.text:00002EE4 ; COMDAT (pick any)
.text:00002EE4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002EE4
.text:00002EE4 ; =============== S U B R O U T I N E =======================================
.text:00002EE4
.text:00002EE4 ; Attributes: bp-based frame
.text:00002EE4
.text:00002EE4 ; _DWORD __thiscall NCrypto::NWzAes::CKeyInfo::~CKeyInfo(NCrypto::NWzAes::CKeyInfo *__hidden this)
.text:00002EE4                 public ??1CKeyInfo@NWzAes@NCrypto@@QAE@XZ
.text:00002EE4 ??1CKeyInfo@NWzAes@NCrypto@@QAE@XZ proc near
.text:00002EE4                                         ; CODE XREF: NCrypto::NWzAes::CBaseCoder::~CBaseCoder(void)+14p
.text:00002EE4                                         ; __unwindfunclet$??0CBaseCoder@NWzAes@NCrypto@@QAE@XZ$0+6j
.text:00002EE4
.text:00002EE4 var_4           = dword ptr -4
.text:00002EE4
.text:00002EE4                 push    ebp
.text:00002EE5                 mov     ebp, esp
.text:00002EE7                 push    ecx
.text:00002EE8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002EEF                 mov     [ebp+var_4], ecx
.text:00002EF2                 mov     ecx, [ebp+var_4]
.text:00002EF5                 add     ecx, 18h
.text:00002EF8                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:00002EFD                 add     esp, 4
.text:00002F00                 cmp     ebp, esp
.text:00002F02                 call    __RTC_CheckEsp
.text:00002F07                 mov     esp, ebp
.text:00002F09                 pop     ebp
.text:00002F0A                 retn
.text:00002F0A ??1CKeyInfo@NWzAes@NCrypto@@QAE@XZ endp
.text:00002F0A
.text:00002F0A ; ---------------------------------------------------------------------------
.text:00002F0B                 align 4
.text:00002F0B _text           ends
.text:00002F0B
.text:00002F0C ; ===========================================================================
.text:00002F0C
.text:00002F0C ; Segment type: Pure code
.text:00002F0C ; Segment permissions: Read/Execute
.text:00002F0C _text           segment para public 'CODE' use32
.text:00002F0C                 assume cs:_text
.text:00002F0C                 ;org 2F0Ch
.text:00002F0C ; COMDAT (pick any)
.text:00002F0C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002F0C
.text:00002F0C ; =============== S U B R O U T I N E =======================================
.text:00002F0C
.text:00002F0C ; Attributes: bp-based frame
.text:00002F0C
.text:00002F0C ; _DWORD __thiscall NCrypto::NZip::CEncoder::CEncoder(NCrypto::NZip::CEncoder *__hidden this)
.text:00002F0C                 public ??0CEncoder@NZip@NCrypto@@QAE@XZ
.text:00002F0C ??0CEncoder@NZip@NCrypto@@QAE@XZ proc near
.text:00002F0C                                         ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+54Ap
.text:00002F0C
.text:00002F0C var_4           = dword ptr -4
.text:00002F0C
.text:00002F0C                 push    ebp
.text:00002F0D                 mov     ebp, esp
.text:00002F0F                 push    ecx
.text:00002F10                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002F17                 mov     [ebp+var_4], ecx
.text:00002F1A                 mov     ecx, [ebp+var_4] ; this
.text:00002F1D                 call    ??0CCipher@NZip@NCrypto@@QAE@XZ ; NCrypto::NZip::CCipher::CCipher(void)
.text:00002F22                 mov     eax, [ebp+var_4]
.text:00002F25                 mov     dword ptr [eax], offset ??_7CEncoder@NZip@NCrypto@@6BICompressFilter@@@ ; const NCrypto::NZip::CEncoder::`vftable'{for `ICompressFilter'}
.text:00002F2B                 mov     ecx, [ebp+var_4]
.text:00002F2E                 mov     dword ptr [ecx+4], offset ??_7CEncoder@NZip@NCrypto@@6BICryptoSetPassword@@@ ; const NCrypto::NZip::CEncoder::`vftable'{for `ICryptoSetPassword'}
.text:00002F35                 mov     eax, [ebp+var_4]
.text:00002F38                 add     esp, 4
.text:00002F3B                 cmp     ebp, esp
.text:00002F3D                 call    __RTC_CheckEsp
.text:00002F42                 mov     esp, ebp
.text:00002F44                 pop     ebp
.text:00002F45                 retn
.text:00002F45 ??0CEncoder@NZip@NCrypto@@QAE@XZ endp
.text:00002F45
.text:00002F45 ; ---------------------------------------------------------------------------
.text:00002F46                 align 4
.text:00002F46 _text           ends
.text:00002F46
.rdata:00002F48 ; ===========================================================================
.rdata:00002F48
.rdata:00002F48 ; Segment type: Pure data
.rdata:00002F48 ; Segment permissions: Read
.rdata:00002F48 _rdata          segment dword public 'DATA' use32
.rdata:00002F48                 assume cs:_rdata
.rdata:00002F48                 ;org 2F48h
.rdata:00002F48 ; COMDAT (pick largest)
.rdata:00002F48                 dd offset ??_R4CEncoder@NZip@NCrypto@@6BICryptoSetPassword@@@ ; const NCrypto::NZip::CEncoder::`RTTI Complete Object Locator'{for `ICryptoSetPassword'}
.rdata:00002F4C                 public ??_7CEncoder@NZip@NCrypto@@6BICryptoSetPassword@@@
.rdata:00002F4C ; const NCrypto::NZip::CEncoder::`vftable'{for `ICryptoSetPassword'}
.rdata:00002F4C ??_7CEncoder@NZip@NCrypto@@6BICryptoSetPassword@@@ dd offset ?QueryInterface@CCipher@NZip@NCrypto@@W3AGJABU_GUID@@PAPAX@Z
.rdata:00002F4C                                         ; DATA XREF: NCrypto::NZip::CEncoder::CEncoder(void)+22o
.rdata:00002F4C                                         ; [thunk]:NCrypto::NZip::CCipher::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:00002F50                 dd offset ?AddRef@CCipher@NZip@NCrypto@@W3AGKXZ ; [thunk]:NCrypto::NZip::CCipher::AddRef`adjustor{4}' (void)
.rdata:00002F54                 dd offset ?Release@CCipher@NZip@NCrypto@@W3AGKXZ ; [thunk]:NCrypto::NZip::CCipher::Release`adjustor{4}' (void)
.rdata:00002F58                 dd offset ?CryptoSetPassword@CCipher@NZip@NCrypto@@UAGJPBEI@Z ; NCrypto::NZip::CCipher::CryptoSetPassword(uchar const *,uint)
.rdata:00002F58 _rdata          ends
.rdata:00002F58
.rdata:00002F5C ; ===========================================================================
.rdata:00002F5C
.rdata:00002F5C ; Segment type: Pure data
.rdata:00002F5C ; Segment permissions: Read
.rdata:00002F5C _rdata          segment dword public 'DATA' use32
.rdata:00002F5C                 assume cs:_rdata
.rdata:00002F5C                 ;org 2F5Ch
.rdata:00002F5C ; COMDAT (pick largest)
.rdata:00002F5C                 dd offset ??_R4CEncoder@NZip@NCrypto@@6BICompressFilter@@@ ; const NCrypto::NZip::CEncoder::`RTTI Complete Object Locator'{for `ICompressFilter'}
.rdata:00002F60                 public ??_7CEncoder@NZip@NCrypto@@6BICompressFilter@@@
.rdata:00002F60 ; const NCrypto::NZip::CEncoder::`vftable'{for `ICompressFilter'}
.rdata:00002F60 ??_7CEncoder@NZip@NCrypto@@6BICompressFilter@@@ dd offset ?QueryInterface@CCipher@NZip@NCrypto@@UAGJABU_GUID@@PAPAX@Z
.rdata:00002F60                                         ; DATA XREF: NCrypto::NZip::CEncoder::CEncoder(void)+19o
.rdata:00002F60                                         ; NCrypto::NZip::CCipher::QueryInterface(_GUID const &,void * *)
.rdata:00002F64                 dd offset ?AddRef@CCipher@NZip@NCrypto@@UAGKXZ ; NCrypto::NZip::CCipher::AddRef(void)
.rdata:00002F68                 dd offset ?Release@CCipher@NZip@NCrypto@@UAGKXZ ; NCrypto::NZip::CCipher::Release(void)
.rdata:00002F6C                 dd offset ?Init@CCipher@NZip@NCrypto@@UAGJXZ ; NCrypto::NZip::CCipher::Init(void)
.rdata:00002F70                 dd offset ?Filter@CEncoder@NZip@NCrypto@@UAGIPAEI@Z ; NCrypto::NZip::CEncoder::Filter(uchar *,uint)
.rdata:00002F70 _rdata          ends
.rdata:00002F70
.rdata$r:00002F74 ; ===========================================================================
.rdata$r:00002F74
.rdata$r:00002F74 ; Segment type: Pure data
.rdata$r:00002F74 ; Segment permissions: Read
.rdata$r:00002F74 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002F74                 assume cs:_rdata$r
.rdata$r:00002F74                 ;org 2F74h
.rdata$r:00002F74 ; COMDAT (pick any)
.rdata$r:00002F74                 public ??_R4CEncoder@NZip@NCrypto@@6BICompressFilter@@@
.rdata$r:00002F74 ; const NCrypto::NZip::CEncoder::`RTTI Complete Object Locator'{for `ICompressFilter'}
.rdata$r:00002F74 ??_R4CEncoder@NZip@NCrypto@@6BICompressFilter@@@ db    0
.rdata$r:00002F74                                         ; DATA XREF: .rdata:00002F5Co
.rdata$r:00002F75                 db    0
.rdata$r:00002F76                 db    0
.rdata$r:00002F77                 db    0
.rdata$r:00002F78                 db    0
.rdata$r:00002F79                 db    0
.rdata$r:00002F7A                 db    0
.rdata$r:00002F7B                 db    0
.rdata$r:00002F7C                 db    0
.rdata$r:00002F7D                 db    0
.rdata$r:00002F7E                 db    0
.rdata$r:00002F7F                 db    0
.rdata$r:00002F80                 dd offset ??_R0?AVCEncoder@NZip@NCrypto@@@8 ; NCrypto::NZip::CEncoder `RTTI Type Descriptor'
.rdata$r:00002F84                 dd offset ??_R3CEncoder@NZip@NCrypto@@8 ; NCrypto::NZip::CEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002F84 _rdata$r        ends
.rdata$r:00002F84
.data:00002F88 ; ===========================================================================
.data:00002F88
.data:00002F88 ; Segment type: Pure data
.data:00002F88 ; Segment permissions: Read/Write
.data:00002F88 _data           segment dword public 'DATA' use32
.data:00002F88                 assume cs:_data
.data:00002F88                 ;org 2F88h
.data:00002F88 ; COMDAT (pick any)
.data:00002F88                 public ??_R0?AVCEncoder@NZip@NCrypto@@@8
.data:00002F88 ; class NCrypto::NZip::CEncoder `RTTI Type Descriptor'
.data:00002F88 ??_R0?AVCEncoder@NZip@NCrypto@@@8 dd offset ??_7type_info@@6B@
.data:00002F88                                         ; DATA XREF: .rdata$r:00002F80o
.data:00002F88                                         ; .rdata$r:NCrypto::NZip::CEncoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00002F88                                         ; const type_info::`vftable'
.data:00002F8C                 align 10h
.data:00002F90 a_?avcencoder_0 db '.?AVCEncoder@NZip@NCrypto@@',0
.data:00002F90 _data           ends
.data:00002F90
.rdata$r:00002FAC ; ===========================================================================
.rdata$r:00002FAC
.rdata$r:00002FAC ; Segment type: Pure data
.rdata$r:00002FAC ; Segment permissions: Read
.rdata$r:00002FAC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002FAC                 assume cs:_rdata$r
.rdata$r:00002FAC                 ;org 2FACh
.rdata$r:00002FAC ; COMDAT (pick any)
.rdata$r:00002FAC                 public ??_R3CEncoder@NZip@NCrypto@@8
.rdata$r:00002FAC ; NCrypto::NZip::CEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002FAC ??_R3CEncoder@NZip@NCrypto@@8 db    0   ; DATA XREF: .rdata$r:00002F84o
.rdata$r:00002FAC                                         ; .rdata$r:00002FF4o ...
.rdata$r:00002FAD                 db    0
.rdata$r:00002FAE                 db    0
.rdata$r:00002FAF                 db    0
.rdata$r:00002FB0                 db    1
.rdata$r:00002FB1                 db    0
.rdata$r:00002FB2                 db    0
.rdata$r:00002FB3                 db    0
.rdata$r:00002FB4                 db    7
.rdata$r:00002FB5                 db    0
.rdata$r:00002FB6                 db    0
.rdata$r:00002FB7                 db    0
.rdata$r:00002FB8                 dd offset ??_R2CEncoder@NZip@NCrypto@@8 ; NCrypto::NZip::CEncoder::`RTTI Base Class Array'
.rdata$r:00002FB8 _rdata$r        ends
.rdata$r:00002FB8
.rdata$r:00002FBC ; ===========================================================================
.rdata$r:00002FBC
.rdata$r:00002FBC ; Segment type: Pure data
.rdata$r:00002FBC ; Segment permissions: Read
.rdata$r:00002FBC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002FBC                 assume cs:_rdata$r
.rdata$r:00002FBC                 ;org 2FBCh
.rdata$r:00002FBC ; COMDAT (pick any)
.rdata$r:00002FBC                 public ??_R2CEncoder@NZip@NCrypto@@8
.rdata$r:00002FBC ; NCrypto::NZip::CEncoder::`RTTI Base Class Array'
.rdata$r:00002FBC ??_R2CEncoder@NZip@NCrypto@@8 dd offset ??_R1A@?0A@EA@CEncoder@NZip@NCrypto@@8
.rdata$r:00002FBC                                         ; DATA XREF: .rdata$r:00002FB8o
.rdata$r:00002FBC                                         ; NCrypto::NZip::CEncoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002FC0                 dd offset ??_R1A@?0A@EA@CCipher@NZip@NCrypto@@8 ; NCrypto::NZip::CCipher::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002FC4                 dd offset ??_R1A@?0A@EA@ICompressFilter@@8 ; ICompressFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002FC8                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:00002FCC                 dd offset ??_R13?0A@EA@ICryptoSetPassword@@8 ; ICryptoSetPassword::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00002FD0                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:00002FD4                 dd offset ??_R17?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:00002FD8                 db    0
.rdata$r:00002FD9                 align 4
.rdata$r:00002FD9 _rdata$r        ends
.rdata$r:00002FD9
.rdata$r:00002FDC ; ===========================================================================
.rdata$r:00002FDC
.rdata$r:00002FDC ; Segment type: Pure data
.rdata$r:00002FDC ; Segment permissions: Read
.rdata$r:00002FDC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002FDC                 assume cs:_rdata$r
.rdata$r:00002FDC                 ;org 2FDCh
.rdata$r:00002FDC ; COMDAT (pick any)
.rdata$r:00002FDC                 public ??_R1A@?0A@EA@CEncoder@NZip@NCrypto@@8
.rdata$r:00002FDC ; NCrypto::NZip::CEncoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00002FDC ??_R1A@?0A@EA@CEncoder@NZip@NCrypto@@8 dd offset ??_R0?AVCEncoder@NZip@NCrypto@@@8
.rdata$r:00002FDC                                         ; DATA XREF: .rdata$r:NCrypto::NZip::CEncoder::`RTTI Base Class Array'o
.rdata$r:00002FDC                                         ; NCrypto::NZip::CEncoder `RTTI Type Descriptor'
.rdata$r:00002FE0                 db    6
.rdata$r:00002FE1                 db    0
.rdata$r:00002FE2                 db    0
.rdata$r:00002FE3                 db    0
.rdata$r:00002FE4                 db    0
.rdata$r:00002FE5                 db    0
.rdata$r:00002FE6                 db    0
.rdata$r:00002FE7                 db    0
.rdata$r:00002FE8                 db 0FFh
.rdata$r:00002FE9                 db 0FFh
.rdata$r:00002FEA                 db 0FFh
.rdata$r:00002FEB                 db 0FFh
.rdata$r:00002FEC                 db    0
.rdata$r:00002FED                 db    0
.rdata$r:00002FEE                 db    0
.rdata$r:00002FEF                 db    0
.rdata$r:00002FF0                 db  40h ; @
.rdata$r:00002FF1                 db    0
.rdata$r:00002FF2                 db    0
.rdata$r:00002FF3                 db    0
.rdata$r:00002FF4                 dd offset ??_R3CEncoder@NZip@NCrypto@@8 ; NCrypto::NZip::CEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002FF4 _rdata$r        ends
.rdata$r:00002FF4
.rdata$r:00002FF8 ; ===========================================================================
.rdata$r:00002FF8
.rdata$r:00002FF8 ; Segment type: Pure data
.rdata$r:00002FF8 ; Segment permissions: Read
.rdata$r:00002FF8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002FF8                 assume cs:_rdata$r
.rdata$r:00002FF8                 ;org 2FF8h
.rdata$r:00002FF8 ; COMDAT (pick any)
.rdata$r:00002FF8                 public ??_R1A@?0A@EA@CCipher@NZip@NCrypto@@8
.rdata$r:00002FF8 ; NCrypto::NZip::CCipher::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00002FF8 ??_R1A@?0A@EA@CCipher@NZip@NCrypto@@8 dd offset ??_R0?AVCCipher@NZip@NCrypto@@@8
.rdata$r:00002FF8                                         ; DATA XREF: .rdata$r:00002FC0o
.rdata$r:00002FF8                                         ; .rdata$r:NCrypto::NZip::CCipher::`RTTI Base Class Array'o
.rdata$r:00002FF8                                         ; NCrypto::NZip::CCipher `RTTI Type Descriptor'
.rdata$r:00002FFC                 db    5
.rdata$r:00002FFD                 db    0
.rdata$r:00002FFE                 db    0
.rdata$r:00002FFF                 db    0
.rdata$r:00003000                 db    0
.rdata$r:00003001                 db    0
.rdata$r:00003002                 db    0
.rdata$r:00003003                 db    0
.rdata$r:00003004                 db 0FFh
.rdata$r:00003005                 db 0FFh
.rdata$r:00003006                 db 0FFh
.rdata$r:00003007                 db 0FFh
.rdata$r:00003008                 db    0
.rdata$r:00003009                 db    0
.rdata$r:0000300A                 db    0
.rdata$r:0000300B                 db    0
.rdata$r:0000300C                 db  40h ; @
.rdata$r:0000300D                 db    0
.rdata$r:0000300E                 db    0
.rdata$r:0000300F                 db    0
.rdata$r:00003010                 dd offset ??_R3CCipher@NZip@NCrypto@@8 ; NCrypto::NZip::CCipher::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003010 _rdata$r        ends
.rdata$r:00003010
.data:00003014 ; ===========================================================================
.data:00003014
.data:00003014 ; Segment type: Pure data
.data:00003014 ; Segment permissions: Read/Write
.data:00003014 _data           segment dword public 'DATA' use32
.data:00003014                 assume cs:_data
.data:00003014                 ;org 3014h
.data:00003014 ; COMDAT (pick any)
.data:00003014                 public ??_R0?AVCCipher@NZip@NCrypto@@@8
.data:00003014 ; class NCrypto::NZip::CCipher `RTTI Type Descriptor'
.data:00003014 ??_R0?AVCCipher@NZip@NCrypto@@@8 dd offset ??_7type_info@@6B@
.data:00003014                                         ; DATA XREF: .rdata$r:NCrypto::NZip::CCipher::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00003014                                         ; .rdata$r:00003710o ...
.data:00003014                                         ; const type_info::`vftable'
.data:00003018                 db    0
.data:00003019                 db    0
.data:0000301A                 db    0
.data:0000301B                 db    0
.data:0000301C                 db  2Eh ; .
.data:0000301D                 db  3Fh ; ?
.data:0000301E                 db  41h ; A
.data:0000301F                 db  56h ; V
.data:00003020                 db  43h ; C
.data:00003021                 db  43h ; C
.data:00003022                 db  69h ; i
.data:00003023                 db  70h ; p
.data:00003024                 db  68h ; h
.data:00003025                 db  65h ; e
.data:00003026                 db  72h ; r
.data:00003027                 db  40h ; @
.data:00003028                 db  4Eh ; N
.data:00003029                 db  5Ah ; Z
.data:0000302A                 db  69h ; i
.data:0000302B                 db  70h ; p
.data:0000302C                 db  40h ; @
.data:0000302D                 db  4Eh ; N
.data:0000302E                 db  43h ; C
.data:0000302F                 db  72h ; r
.data:00003030                 db  79h ; y
.data:00003031                 db  70h ; p
.data:00003032                 db  74h ; t
.data:00003033                 db  6Fh ; o
.data:00003034                 db  40h ; @
.data:00003035                 db  40h ; @
.data:00003036                 db    0
.data:00003037                 align 4
.data:00003037 _data           ends
.data:00003037
.rdata$r:00003038 ; ===========================================================================
.rdata$r:00003038
.rdata$r:00003038 ; Segment type: Pure data
.rdata$r:00003038 ; Segment permissions: Read
.rdata$r:00003038 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003038                 assume cs:_rdata$r
.rdata$r:00003038                 ;org 3038h
.rdata$r:00003038 ; COMDAT (pick any)
.rdata$r:00003038                 public ??_R3CCipher@NZip@NCrypto@@8
.rdata$r:00003038 ; NCrypto::NZip::CCipher::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003038 ??_R3CCipher@NZip@NCrypto@@8 db    0    ; DATA XREF: .rdata$r:00003010o
.rdata$r:00003038                                         ; .rdata$r:00003714o ...
.rdata$r:00003039                 db    0
.rdata$r:0000303A                 db    0
.rdata$r:0000303B                 db    0
.rdata$r:0000303C                 db    1
.rdata$r:0000303D                 db    0
.rdata$r:0000303E                 db    0
.rdata$r:0000303F                 db    0
.rdata$r:00003040                 db    6
.rdata$r:00003041                 db    0
.rdata$r:00003042                 db    0
.rdata$r:00003043                 db    0
.rdata$r:00003044                 dd offset ??_R2CCipher@NZip@NCrypto@@8 ; NCrypto::NZip::CCipher::`RTTI Base Class Array'
.rdata$r:00003044 _rdata$r        ends
.rdata$r:00003044
.rdata$r:00003048 ; ===========================================================================
.rdata$r:00003048
.rdata$r:00003048 ; Segment type: Pure data
.rdata$r:00003048 ; Segment permissions: Read
.rdata$r:00003048 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003048                 assume cs:_rdata$r
.rdata$r:00003048                 ;org 3048h
.rdata$r:00003048 ; COMDAT (pick any)
.rdata$r:00003048                 public ??_R2CCipher@NZip@NCrypto@@8
.rdata$r:00003048 ; NCrypto::NZip::CCipher::`RTTI Base Class Array'
.rdata$r:00003048 ??_R2CCipher@NZip@NCrypto@@8 dd offset ??_R1A@?0A@EA@CCipher@NZip@NCrypto@@8
.rdata$r:00003048                                         ; DATA XREF: .rdata$r:00003044o
.rdata$r:00003048                                         ; NCrypto::NZip::CCipher::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000304C                 dd offset ??_R1A@?0A@EA@ICompressFilter@@8 ; ICompressFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003050                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:00003054                 dd offset ??_R13?0A@EA@ICryptoSetPassword@@8 ; ICryptoSetPassword::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00003058                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:0000305C                 dd offset ??_R17?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:00003060                 db    0
.rdata$r:00003061                 align 4
.rdata$r:00003061 _rdata$r        ends
.rdata$r:00003061
.rdata$r:00003064 ; ===========================================================================
.rdata$r:00003064
.rdata$r:00003064 ; Segment type: Pure data
.rdata$r:00003064 ; Segment permissions: Read
.rdata$r:00003064 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003064                 assume cs:_rdata$r
.rdata$r:00003064                 ;org 3064h
.rdata$r:00003064 ; COMDAT (pick any)
.rdata$r:00003064                 public ??_R4CEncoder@NZip@NCrypto@@6BICryptoSetPassword@@@
.rdata$r:00003064 ; const NCrypto::NZip::CEncoder::`RTTI Complete Object Locator'{for `ICryptoSetPassword'}
.rdata$r:00003064 ??_R4CEncoder@NZip@NCrypto@@6BICryptoSetPassword@@@ db    0
.rdata$r:00003064                                         ; DATA XREF: .rdata:00002F48o
.rdata$r:00003065                 db    0
.rdata$r:00003066                 db    0
.rdata$r:00003067                 db    0
.rdata$r:00003068                 db    4
.rdata$r:00003069                 db    0
.rdata$r:0000306A                 db    0
.rdata$r:0000306B                 db    0
.rdata$r:0000306C                 db    0
.rdata$r:0000306D                 db    0
.rdata$r:0000306E                 db    0
.rdata$r:0000306F                 db    0
.rdata$r:00003070                 dd offset ??_R0?AVCEncoder@NZip@NCrypto@@@8 ; NCrypto::NZip::CEncoder `RTTI Type Descriptor'
.rdata$r:00003074                 dd offset ??_R3CEncoder@NZip@NCrypto@@8 ; NCrypto::NZip::CEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003074 _rdata$r        ends
.rdata$r:00003074
.text:00003078 ; ===========================================================================
.text:00003078
.text:00003078 ; Segment type: Pure code
.text:00003078 ; Segment permissions: Read/Execute
.text:00003078 _text           segment para public 'CODE' use32
.text:00003078                 assume cs:_text
.text:00003078                 ;org 3078h
.text:00003078 ; COMDAT (pick any)
.text:00003078                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003078
.text:00003078 ; =============== S U B R O U T I N E =======================================
.text:00003078
.text:00003078 ; Attributes: bp-based frame
.text:00003078
.text:00003078 ; __int32 __stdcall NCrypto::NZip::CCipher::QueryInterface(NCrypto::NZip::CCipher *this, const struct _GUID *Buf1, void **)
.text:00003078                 public ?QueryInterface@CCipher@NZip@NCrypto@@UAGJABU_GUID@@PAPAX@Z
.text:00003078 ?QueryInterface@CCipher@NZip@NCrypto@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00003078                                         ; CODE XREF: [thunk]:NCrypto::NZip::CCipher::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j
.text:00003078                                         ; DATA XREF: .rdata:const NCrypto::NZip::CEncoder::`vftable'{for `ICompressFilter'}o ...
.text:00003078
.text:00003078 var_8           = dword ptr -8
.text:00003078 var_4           = dword ptr -4
.text:00003078 this            = dword ptr  8
.text:00003078 Buf1            = dword ptr  0Ch
.text:00003078 arg_8           = dword ptr  10h
.text:00003078
.text:00003078                 push    ebp
.text:00003079                 mov     ebp, esp
.text:0000307B                 sub     esp, 8
.text:0000307E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00003085                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000308C                 mov     eax, [ebp+arg_8]
.text:0000308F                 mov     dword ptr [eax], 0
.text:00003095                 push    offset _IID_IUnknown ; Buf2
.text:0000309A                 mov     ecx, [ebp+Buf1]
.text:0000309D                 push    ecx             ; Buf1
.text:0000309E                 call    ___@8           ; __(x,x)
.text:000030A3                 test    eax, eax
.text:000030A5                 jz      short loc_30C9
.text:000030A7                 cmp     [ebp+this], 0
.text:000030AB                 jz      short loc_30B8
.text:000030AD                 mov     edx, [ebp+this]
.text:000030B0                 add     edx, 4
.text:000030B3                 mov     [ebp+var_4], edx
.text:000030B6                 jmp     short loc_30BF
.text:000030B8 ; ---------------------------------------------------------------------------
.text:000030B8
.text:000030B8 loc_30B8:                               ; CODE XREF: NCrypto::NZip::CCipher::QueryInterface(_GUID const &,void * *)+33j
.text:000030B8                 mov     [ebp+var_4], 0
.text:000030BF
.text:000030BF loc_30BF:                               ; CODE XREF: NCrypto::NZip::CCipher::QueryInterface(_GUID const &,void * *)+3Ej
.text:000030BF                 mov     eax, [ebp+arg_8]
.text:000030C2                 mov     ecx, [ebp+var_4]
.text:000030C5                 mov     [eax], ecx
.text:000030C7                 jmp     short loc_3104
.text:000030C9 ; ---------------------------------------------------------------------------
.text:000030C9
.text:000030C9 loc_30C9:                               ; CODE XREF: NCrypto::NZip::CCipher::QueryInterface(_GUID const &,void * *)+2Dj
.text:000030C9                 push    offset _IID_ICryptoSetPassword ; Buf2
.text:000030CE                 mov     edx, [ebp+Buf1]
.text:000030D1                 push    edx             ; Buf1
.text:000030D2                 call    ___@8           ; __(x,x)
.text:000030D7                 test    eax, eax
.text:000030D9                 jz      short loc_30FD
.text:000030DB                 cmp     [ebp+this], 0
.text:000030DF                 jz      short loc_30EC
.text:000030E1                 mov     eax, [ebp+this]
.text:000030E4                 add     eax, 4
.text:000030E7                 mov     [ebp+var_8], eax
.text:000030EA                 jmp     short loc_30F3
.text:000030EC ; ---------------------------------------------------------------------------
.text:000030EC
.text:000030EC loc_30EC:                               ; CODE XREF: NCrypto::NZip::CCipher::QueryInterface(_GUID const &,void * *)+67j
.text:000030EC                 mov     [ebp+var_8], 0
.text:000030F3
.text:000030F3 loc_30F3:                               ; CODE XREF: NCrypto::NZip::CCipher::QueryInterface(_GUID const &,void * *)+72j
.text:000030F3                 mov     ecx, [ebp+arg_8]
.text:000030F6                 mov     edx, [ebp+var_8]
.text:000030F9                 mov     [ecx], edx
.text:000030FB                 jmp     short loc_3104
.text:000030FD ; ---------------------------------------------------------------------------
.text:000030FD
.text:000030FD loc_30FD:                               ; CODE XREF: NCrypto::NZip::CCipher::QueryInterface(_GUID const &,void * *)+61j
.text:000030FD                 mov     eax, 80004002h
.text:00003102                 jmp     short loc_3115
.text:00003104 ; ---------------------------------------------------------------------------
.text:00003104
.text:00003104 loc_3104:                               ; CODE XREF: NCrypto::NZip::CCipher::QueryInterface(_GUID const &,void * *)+4Fj
.text:00003104                                         ; NCrypto::NZip::CCipher::QueryInterface(_GUID const &,void * *)+83j
.text:00003104                 mov     eax, [ebp+this]
.text:00003107                 mov     ecx, [eax+8]
.text:0000310A                 add     ecx, 1
.text:0000310D                 mov     edx, [ebp+this]
.text:00003110                 mov     [edx+8], ecx
.text:00003113                 xor     eax, eax
.text:00003115
.text:00003115 loc_3115:                               ; CODE XREF: NCrypto::NZip::CCipher::QueryInterface(_GUID const &,void * *)+8Aj
.text:00003115                 add     esp, 8
.text:00003118                 cmp     ebp, esp
.text:0000311A                 call    __RTC_CheckEsp
.text:0000311F                 mov     esp, ebp
.text:00003121                 pop     ebp
.text:00003122                 retn    0Ch
.text:00003122 ?QueryInterface@CCipher@NZip@NCrypto@@UAGJABU_GUID@@PAPAX@Z endp
.text:00003122
.text:00003122 ; ---------------------------------------------------------------------------
.text:00003125                 align 4
.text:00003125 _text           ends
.text:00003125
.text:00003128 ; ===========================================================================
.text:00003128
.text:00003128 ; Segment type: Pure code
.text:00003128 ; Segment permissions: Read/Execute
.text:00003128 _text           segment para public 'CODE' use32
.text:00003128                 assume cs:_text
.text:00003128                 ;org 3128h
.text:00003128 ; COMDAT (pick any)
.text:00003128                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003128
.text:00003128 ; =============== S U B R O U T I N E =======================================
.text:00003128
.text:00003128 ; Attributes: bp-based frame
.text:00003128
.text:00003128 ; unsigned __int32 __stdcall NCrypto::NZip::CCipher::AddRef(NCrypto::NZip::CCipher *this)
.text:00003128                 public ?AddRef@CCipher@NZip@NCrypto@@UAGKXZ
.text:00003128 ?AddRef@CCipher@NZip@NCrypto@@UAGKXZ proc near
.text:00003128                                         ; CODE XREF: [thunk]:NCrypto::NZip::CCipher::AddRef`adjustor{4}' (void)+5j
.text:00003128                                         ; DATA XREF: .rdata:00002F64o ...
.text:00003128
.text:00003128 var_4           = dword ptr -4
.text:00003128 this            = dword ptr  8
.text:00003128
.text:00003128                 push    ebp
.text:00003129                 mov     ebp, esp
.text:0000312B                 push    ecx
.text:0000312C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003133                 mov     eax, [ebp+this]
.text:00003136                 mov     ecx, [eax+8]
.text:00003139                 add     ecx, 1
.text:0000313C                 mov     [ebp+var_4], ecx
.text:0000313F                 mov     edx, [ebp+this]
.text:00003142                 mov     eax, [ebp+var_4]
.text:00003145                 mov     [edx+8], eax
.text:00003148                 mov     eax, [ebp+var_4]
.text:0000314B                 mov     esp, ebp
.text:0000314D                 pop     ebp
.text:0000314E                 retn    4
.text:0000314E ?AddRef@CCipher@NZip@NCrypto@@UAGKXZ endp
.text:0000314E
.text:0000314E ; ---------------------------------------------------------------------------
.text:00003151                 align 4
.text:00003151 _text           ends
.text:00003151
.text:00003154 ; ===========================================================================
.text:00003154
.text:00003154 ; Segment type: Pure code
.text:00003154 ; Segment permissions: Read/Execute
.text:00003154 _text           segment para public 'CODE' use32
.text:00003154                 assume cs:_text
.text:00003154                 ;org 3154h
.text:00003154 ; COMDAT (pick any)
.text:00003154                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003154
.text:00003154 ; =============== S U B R O U T I N E =======================================
.text:00003154
.text:00003154 ; Attributes: bp-based frame
.text:00003154
.text:00003154 ; unsigned __int32 __stdcall NCrypto::NZip::CCipher::Release(NCrypto::NZip::CCipher *this)
.text:00003154                 public ?Release@CCipher@NZip@NCrypto@@UAGKXZ
.text:00003154 ?Release@CCipher@NZip@NCrypto@@UAGKXZ proc near
.text:00003154                                         ; CODE XREF: [thunk]:NCrypto::NZip::CCipher::Release`adjustor{4}' (void)+5j
.text:00003154                                         ; DATA XREF: .rdata:00002F68o ...
.text:00003154
.text:00003154 var_8           = dword ptr -8
.text:00003154 var_4           = dword ptr -4
.text:00003154 this            = dword ptr  8
.text:00003154
.text:00003154                 push    ebp
.text:00003155                 mov     ebp, esp
.text:00003157                 sub     esp, 8
.text:0000315A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00003161                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003168                 mov     eax, [ebp+this]
.text:0000316B                 mov     ecx, [eax+8]
.text:0000316E                 sub     ecx, 1
.text:00003171                 mov     [ebp+var_8], ecx
.text:00003174                 mov     edx, [ebp+this]
.text:00003177                 mov     eax, [ebp+var_8]
.text:0000317A                 mov     [edx+8], eax
.text:0000317D                 cmp     [ebp+var_8], 0
.text:00003181                 jz      short loc_318B
.text:00003183                 mov     ecx, [ebp+this]
.text:00003186                 mov     eax, [ecx+8]
.text:00003189                 jmp     short loc_319F
.text:0000318B ; ---------------------------------------------------------------------------
.text:0000318B
.text:0000318B loc_318B:                               ; CODE XREF: NCrypto::NZip::CCipher::Release(void)+2Dj
.text:0000318B                 mov     edx, [ebp+this]
.text:0000318E                 mov     [ebp+var_4], edx
.text:00003191                 mov     eax, [ebp+var_4]
.text:00003194                 push    eax             ; void *
.text:00003195                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000319A                 add     esp, 4
.text:0000319D                 xor     eax, eax
.text:0000319F
.text:0000319F loc_319F:                               ; CODE XREF: NCrypto::NZip::CCipher::Release(void)+35j
.text:0000319F                 add     esp, 8
.text:000031A2                 cmp     ebp, esp
.text:000031A4                 call    __RTC_CheckEsp
.text:000031A9                 mov     esp, ebp
.text:000031AB                 pop     ebp
.text:000031AC                 retn    4
.text:000031AC ?Release@CCipher@NZip@NCrypto@@UAGKXZ endp
.text:000031AC
.text:000031AC ; ---------------------------------------------------------------------------
.text:000031AF                 align 10h
.text:000031AF _text           ends
.text:000031AF
.text:000031B0 ; ===========================================================================
.text:000031B0
.text:000031B0 ; Segment type: Pure code
.text:000031B0 ; Segment permissions: Read/Execute
.text:000031B0 _text           segment para public 'CODE' use32
.text:000031B0                 assume cs:_text
.text:000031B0                 ;org 31B0h
.text:000031B0 ; COMDAT (pick any)
.text:000031B0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000031B0
.text:000031B0 ; =============== S U B R O U T I N E =======================================
.text:000031B0
.text:000031B0 ; Attributes: bp-based frame
.text:000031B0
.text:000031B0 ; _DWORD __thiscall NArchive::NZip::CLzmaEncoder::CLzmaEncoder(NArchive::NZip::CLzmaEncoder *__hidden this)
.text:000031B0                 public ??0CLzmaEncoder@NZip@NArchive@@QAE@XZ
.text:000031B0 ??0CLzmaEncoder@NZip@NArchive@@QAE@XZ proc near
.text:000031B0                                         ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+962p
.text:000031B0
.text:000031B0 var_4           = dword ptr -4
.text:000031B0
.text:000031B0                 push    ebp
.text:000031B1                 mov     ebp, esp
.text:000031B3                 push    ecx
.text:000031B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000031BB                 mov     [ebp+var_4], ecx
.text:000031BE                 mov     ecx, [ebp+var_4] ; this
.text:000031C1                 call    ??0ICompressCoder@@QAE@XZ ; ICompressCoder::ICompressCoder(void)
.text:000031C6                 mov     ecx, [ebp+var_4]
.text:000031C9                 add     ecx, 4          ; this
.text:000031CC                 call    ??0ICompressSetCoderProperties@@QAE@XZ ; ICompressSetCoderProperties::ICompressSetCoderProperties(void)
.text:000031D1                 mov     ecx, [ebp+var_4]
.text:000031D4                 add     ecx, 8          ; this
.text:000031D7                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:000031DC                 mov     eax, [ebp+var_4]
.text:000031DF                 mov     dword ptr [eax], offset ??_7CLzmaEncoder@NZip@NArchive@@6BICompressCoder@@@ ; const NArchive::NZip::CLzmaEncoder::`vftable'{for `ICompressCoder'}
.text:000031E5                 mov     ecx, [ebp+var_4]
.text:000031E8                 mov     dword ptr [ecx+4], offset ??_7CLzmaEncoder@NZip@NArchive@@6BICompressSetCoderProperties@@@ ; const NArchive::NZip::CLzmaEncoder::`vftable'{for `ICompressSetCoderProperties'}
.text:000031EF                 mov     ecx, [ebp+var_4]
.text:000031F2                 add     ecx, 10h
.text:000031F5                 call    ??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>(void)
.text:000031FA                 mov     eax, [ebp+var_4]
.text:000031FD                 add     esp, 4
.text:00003200                 cmp     ebp, esp
.text:00003202                 call    __RTC_CheckEsp
.text:00003207                 mov     esp, ebp
.text:00003209                 pop     ebp
.text:0000320A                 retn
.text:0000320A ??0CLzmaEncoder@NZip@NArchive@@QAE@XZ endp
.text:0000320A
.text:0000320A ; ---------------------------------------------------------------------------
.text:0000320B                 align 4
.text:0000320B _text           ends
.text:0000320B
.rdata:0000320C ; ===========================================================================
.rdata:0000320C
.rdata:0000320C ; Segment type: Pure data
.rdata:0000320C ; Segment permissions: Read
.rdata:0000320C _rdata          segment dword public 'DATA' use32
.rdata:0000320C                 assume cs:_rdata
.rdata:0000320C                 ;org 320Ch
.rdata:0000320C ; COMDAT (pick largest)
.rdata:0000320C                 dd offset ??_R4CLzmaEncoder@NZip@NArchive@@6BICompressSetCoderProperties@@@ ; const NArchive::NZip::CLzmaEncoder::`RTTI Complete Object Locator'{for `ICompressSetCoderProperties'}
.rdata:00003210                 public ??_7CLzmaEncoder@NZip@NArchive@@6BICompressSetCoderProperties@@@
.rdata:00003210 ; const NArchive::NZip::CLzmaEncoder::`vftable'{for `ICompressSetCoderProperties'}
.rdata:00003210 ??_7CLzmaEncoder@NZip@NArchive@@6BICompressSetCoderProperties@@@ dd offset ?QueryInterface@CLzmaEncoder@NZip@NArchive@@W3AGJABU_GUID@@PAPAX@Z
.rdata:00003210                                         ; DATA XREF: NArchive::NZip::CLzmaEncoder::CLzmaEncoder(void)+38o
.rdata:00003210                                         ; [thunk]:NArchive::NZip::CLzmaEncoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:00003214                 dd offset ?AddRef@CLzmaEncoder@NZip@NArchive@@W3AGKXZ ; [thunk]:NArchive::NZip::CLzmaEncoder::AddRef`adjustor{4}' (void)
.rdata:00003218                 dd offset ?Release@CLzmaEncoder@NZip@NArchive@@W3AGKXZ ; [thunk]:NArchive::NZip::CLzmaEncoder::Release`adjustor{4}' (void)
.rdata:0000321C                 dd offset ?SetCoderProperties@CLzmaEncoder@NZip@NArchive@@UAGJPBKPBUtagPROPVARIANT@@I@Z ; NArchive::NZip::CLzmaEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)
.rdata:0000321C _rdata          ends
.rdata:0000321C
.rdata:00003220 ; ===========================================================================
.rdata:00003220
.rdata:00003220 ; Segment type: Pure data
.rdata:00003220 ; Segment permissions: Read
.rdata:00003220 _rdata          segment dword public 'DATA' use32
.rdata:00003220                 assume cs:_rdata
.rdata:00003220                 ;org 3220h
.rdata:00003220 ; COMDAT (pick largest)
.rdata:00003220                 dd offset ??_R4CLzmaEncoder@NZip@NArchive@@6BICompressCoder@@@ ; const NArchive::NZip::CLzmaEncoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata:00003224                 public ??_7CLzmaEncoder@NZip@NArchive@@6BICompressCoder@@@
.rdata:00003224 ; const NArchive::NZip::CLzmaEncoder::`vftable'{for `ICompressCoder'}
.rdata:00003224 ??_7CLzmaEncoder@NZip@NArchive@@6BICompressCoder@@@ dd offset ?QueryInterface@CLzmaEncoder@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z
.rdata:00003224                                         ; DATA XREF: NArchive::NZip::CLzmaEncoder::CLzmaEncoder(void)+2Fo
.rdata:00003224                                         ; NArchive::NZip::CLzmaEncoder::QueryInterface(_GUID const &,void * *)
.rdata:00003228                 dd offset ?AddRef@CLzmaEncoder@NZip@NArchive@@UAGKXZ ; NArchive::NZip::CLzmaEncoder::AddRef(void)
.rdata:0000322C                 dd offset ?Release@CLzmaEncoder@NZip@NArchive@@UAGKXZ ; NArchive::NZip::CLzmaEncoder::Release(void)
.rdata:00003230                 dd offset ?Code@CLzmaEncoder@NZip@NArchive@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ; NArchive::NZip::CLzmaEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)
.rdata:00003230 _rdata          ends
.rdata:00003230
.rdata$r:00003234 ; ===========================================================================
.rdata$r:00003234
.rdata$r:00003234 ; Segment type: Pure data
.rdata$r:00003234 ; Segment permissions: Read
.rdata$r:00003234 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003234                 assume cs:_rdata$r
.rdata$r:00003234                 ;org 3234h
.rdata$r:00003234 ; COMDAT (pick any)
.rdata$r:00003234                 public ??_R4CLzmaEncoder@NZip@NArchive@@6BICompressCoder@@@
.rdata$r:00003234 ; const NArchive::NZip::CLzmaEncoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata$r:00003234 ??_R4CLzmaEncoder@NZip@NArchive@@6BICompressCoder@@@ db    0
.rdata$r:00003234                                         ; DATA XREF: .rdata:00003220o
.rdata$r:00003235                 db    0
.rdata$r:00003236                 db    0
.rdata$r:00003237                 db    0
.rdata$r:00003238                 db    0
.rdata$r:00003239                 db    0
.rdata$r:0000323A                 db    0
.rdata$r:0000323B                 db    0
.rdata$r:0000323C                 db    0
.rdata$r:0000323D                 db    0
.rdata$r:0000323E                 db    0
.rdata$r:0000323F                 db    0
.rdata$r:00003240                 dd offset ??_R0?AVCLzmaEncoder@NZip@NArchive@@@8 ; NArchive::NZip::CLzmaEncoder `RTTI Type Descriptor'
.rdata$r:00003244                 dd offset ??_R3CLzmaEncoder@NZip@NArchive@@8 ; NArchive::NZip::CLzmaEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003244 _rdata$r        ends
.rdata$r:00003244
.data:00003248 ; ===========================================================================
.data:00003248
.data:00003248 ; Segment type: Pure data
.data:00003248 ; Segment permissions: Read/Write
.data:00003248 _data           segment dword public 'DATA' use32
.data:00003248                 assume cs:_data
.data:00003248                 ;org 3248h
.data:00003248 ; COMDAT (pick any)
.data:00003248                 public ??_R0?AVCLzmaEncoder@NZip@NArchive@@@8
.data:00003248 ; class NArchive::NZip::CLzmaEncoder `RTTI Type Descriptor'
.data:00003248 ??_R0?AVCLzmaEncoder@NZip@NArchive@@@8 dd offset ??_7type_info@@6B@
.data:00003248                                         ; DATA XREF: .rdata$r:00003240o
.data:00003248                                         ; .rdata$r:NArchive::NZip::CLzmaEncoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00003248                                         ; const type_info::`vftable'
.data:0000324C                 align 10h
.data:00003250 a_?avclzmaencod db '.?AVCLzmaEncoder@NZip@NArchive@@',0
.data:00003271                 align 4
.data:00003271 _data           ends
.data:00003271
.rdata$r:00003274 ; ===========================================================================
.rdata$r:00003274
.rdata$r:00003274 ; Segment type: Pure data
.rdata$r:00003274 ; Segment permissions: Read
.rdata$r:00003274 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003274                 assume cs:_rdata$r
.rdata$r:00003274                 ;org 3274h
.rdata$r:00003274 ; COMDAT (pick any)
.rdata$r:00003274                 public ??_R3CLzmaEncoder@NZip@NArchive@@8
.rdata$r:00003274 ; NArchive::NZip::CLzmaEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003274 ??_R3CLzmaEncoder@NZip@NArchive@@8 db    0 ; DATA XREF: .rdata$r:00003244o
.rdata$r:00003274                                         ; .rdata$r:000032B8o ...
.rdata$r:00003275                 db    0
.rdata$r:00003276                 db    0
.rdata$r:00003277                 db    0
.rdata$r:00003278                 db    1
.rdata$r:00003279                 db    0
.rdata$r:0000327A                 db    0
.rdata$r:0000327B                 db    0
.rdata$r:0000327C                 db    6
.rdata$r:0000327D                 db    0
.rdata$r:0000327E                 db    0
.rdata$r:0000327F                 db    0
.rdata$r:00003280                 dd offset ??_R2CLzmaEncoder@NZip@NArchive@@8 ; NArchive::NZip::CLzmaEncoder::`RTTI Base Class Array'
.rdata$r:00003280 _rdata$r        ends
.rdata$r:00003280
.rdata$r:00003284 ; ===========================================================================
.rdata$r:00003284
.rdata$r:00003284 ; Segment type: Pure data
.rdata$r:00003284 ; Segment permissions: Read
.rdata$r:00003284 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003284                 assume cs:_rdata$r
.rdata$r:00003284                 ;org 3284h
.rdata$r:00003284 ; COMDAT (pick any)
.rdata$r:00003284                 public ??_R2CLzmaEncoder@NZip@NArchive@@8
.rdata$r:00003284 ; NArchive::NZip::CLzmaEncoder::`RTTI Base Class Array'
.rdata$r:00003284 ??_R2CLzmaEncoder@NZip@NArchive@@8 dd offset ??_R1A@?0A@EA@CLzmaEncoder@NZip@NArchive@@8
.rdata$r:00003284                                         ; DATA XREF: .rdata$r:00003280o
.rdata$r:00003284                                         ; NArchive::NZip::CLzmaEncoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003288                 dd offset ??_R1A@?0A@EA@ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000328C                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:00003290                 dd offset ??_R13?0A@EA@ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00003294                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:00003298                 dd offset ??_R17?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:0000329C                 db    0
.rdata$r:0000329D                 align 10h
.rdata$r:0000329D _rdata$r        ends
.rdata$r:0000329D
.rdata$r:000032A0 ; ===========================================================================
.rdata$r:000032A0
.rdata$r:000032A0 ; Segment type: Pure data
.rdata$r:000032A0 ; Segment permissions: Read
.rdata$r:000032A0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000032A0                 assume cs:_rdata$r
.rdata$r:000032A0                 ;org 32A0h
.rdata$r:000032A0 ; COMDAT (pick any)
.rdata$r:000032A0                 public ??_R1A@?0A@EA@CLzmaEncoder@NZip@NArchive@@8
.rdata$r:000032A0 ; NArchive::NZip::CLzmaEncoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000032A0 ??_R1A@?0A@EA@CLzmaEncoder@NZip@NArchive@@8 dd offset ??_R0?AVCLzmaEncoder@NZip@NArchive@@@8
.rdata$r:000032A0                                         ; DATA XREF: .rdata$r:NArchive::NZip::CLzmaEncoder::`RTTI Base Class Array'o
.rdata$r:000032A0                                         ; NArchive::NZip::CLzmaEncoder `RTTI Type Descriptor'
.rdata$r:000032A4                 db    5
.rdata$r:000032A5                 db    0
.rdata$r:000032A6                 db    0
.rdata$r:000032A7                 db    0
.rdata$r:000032A8                 db    0
.rdata$r:000032A9                 db    0
.rdata$r:000032AA                 db    0
.rdata$r:000032AB                 db    0
.rdata$r:000032AC                 db 0FFh
.rdata$r:000032AD                 db 0FFh
.rdata$r:000032AE                 db 0FFh
.rdata$r:000032AF                 db 0FFh
.rdata$r:000032B0                 db    0
.rdata$r:000032B1                 db    0
.rdata$r:000032B2                 db    0
.rdata$r:000032B3                 db    0
.rdata$r:000032B4                 db  40h ; @
.rdata$r:000032B5                 db    0
.rdata$r:000032B6                 db    0
.rdata$r:000032B7                 db    0
.rdata$r:000032B8                 dd offset ??_R3CLzmaEncoder@NZip@NArchive@@8 ; NArchive::NZip::CLzmaEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000032B8 _rdata$r        ends
.rdata$r:000032B8
.rdata$r:000032BC ; ===========================================================================
.rdata$r:000032BC
.rdata$r:000032BC ; Segment type: Pure data
.rdata$r:000032BC ; Segment permissions: Read
.rdata$r:000032BC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000032BC                 assume cs:_rdata$r
.rdata$r:000032BC                 ;org 32BCh
.rdata$r:000032BC ; COMDAT (pick any)
.rdata$r:000032BC                 public ??_R13?0A@EA@ICompressSetCoderProperties@@8
.rdata$r:000032BC ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:000032BC ??_R13?0A@EA@ICompressSetCoderProperties@@8 dd offset ??_R0?AUICompressSetCoderProperties@@@8
.rdata$r:000032BC                                         ; DATA XREF: .rdata$r:00003290o
.rdata$r:000032BC                                         ; ICompressSetCoderProperties `RTTI Type Descriptor'
.rdata$r:000032C0                 db    1
.rdata$r:000032C1                 db    0
.rdata$r:000032C2                 db    0
.rdata$r:000032C3                 db    0
.rdata$r:000032C4                 db    4
.rdata$r:000032C5                 db    0
.rdata$r:000032C6                 db    0
.rdata$r:000032C7                 db    0
.rdata$r:000032C8                 db 0FFh
.rdata$r:000032C9                 db 0FFh
.rdata$r:000032CA                 db 0FFh
.rdata$r:000032CB                 db 0FFh
.rdata$r:000032CC                 db    0
.rdata$r:000032CD                 db    0
.rdata$r:000032CE                 db    0
.rdata$r:000032CF                 db    0
.rdata$r:000032D0                 db  40h ; @
.rdata$r:000032D1                 db    0
.rdata$r:000032D2                 db    0
.rdata$r:000032D3                 db    0
.rdata$r:000032D4                 dd offset ??_R3ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:000032D4 _rdata$r        ends
.rdata$r:000032D4
.data:000032D8 ; ===========================================================================
.data:000032D8
.data:000032D8 ; Segment type: Pure data
.data:000032D8 ; Segment permissions: Read/Write
.data:000032D8 _data           segment dword public 'DATA' use32
.data:000032D8                 assume cs:_data
.data:000032D8                 ;org 32D8h
.data:000032D8 ; COMDAT (pick any)
.data:000032D8                 public ??_R0?AUICompressSetCoderProperties@@@8
.data:000032D8 ; struct ICompressSetCoderProperties `RTTI Type Descriptor'
.data:000032D8 ??_R0?AUICompressSetCoderProperties@@@8 dd offset ??_7type_info@@6B@
.data:000032D8                                         ; DATA XREF: .rdata$r:ICompressSetCoderProperties::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:000032D8                                         ; .rdata$r:ICompressSetCoderProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:000032D8                                         ; const type_info::`vftable'
.data:000032DC                 align 10h
.data:000032E0 a_?auicompres_0 db '.?AUICompressSetCoderProperties@@',0
.data:00003302                 align 4
.data:00003302 _data           ends
.data:00003302
.rdata$r:00003304 ; ===========================================================================
.rdata$r:00003304
.rdata$r:00003304 ; Segment type: Pure data
.rdata$r:00003304 ; Segment permissions: Read
.rdata$r:00003304 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003304                 assume cs:_rdata$r
.rdata$r:00003304                 ;org 3304h
.rdata$r:00003304 ; COMDAT (pick any)
.rdata$r:00003304                 public ??_R3ICompressSetCoderProperties@@8
.rdata$r:00003304 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003304 ??_R3ICompressSetCoderProperties@@8 db    0
.rdata$r:00003304                                         ; DATA XREF: .rdata$r:000032D4o
.rdata$r:00003304                                         ; .rdata$r:00003338o ...
.rdata$r:00003305                 db    0
.rdata$r:00003306                 db    0
.rdata$r:00003307                 db    0
.rdata$r:00003308                 db    0
.rdata$r:00003309                 db    0
.rdata$r:0000330A                 db    0
.rdata$r:0000330B                 db    0
.rdata$r:0000330C                 db    2
.rdata$r:0000330D                 db    0
.rdata$r:0000330E                 db    0
.rdata$r:0000330F                 db    0
.rdata$r:00003310                 dd offset ??_R2ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Base Class Array'
.rdata$r:00003310 _rdata$r        ends
.rdata$r:00003310
.rdata$r:00003314 ; ===========================================================================
.rdata$r:00003314
.rdata$r:00003314 ; Segment type: Pure data
.rdata$r:00003314 ; Segment permissions: Read
.rdata$r:00003314 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003314                 assume cs:_rdata$r
.rdata$r:00003314                 ;org 3314h
.rdata$r:00003314 ; COMDAT (pick any)
.rdata$r:00003314                 public ??_R2ICompressSetCoderProperties@@8
.rdata$r:00003314 ; ICompressSetCoderProperties::`RTTI Base Class Array'
.rdata$r:00003314 ??_R2ICompressSetCoderProperties@@8 dd offset ??_R1A@?0A@EA@ICompressSetCoderProperties@@8
.rdata$r:00003314                                         ; DATA XREF: .rdata$r:00003310o
.rdata$r:00003314                                         ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003318                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000331C                 db    0
.rdata$r:0000331D                 align 10h
.rdata$r:0000331D _rdata$r        ends
.rdata$r:0000331D
.rdata$r:00003320 ; ===========================================================================
.rdata$r:00003320
.rdata$r:00003320 ; Segment type: Pure data
.rdata$r:00003320 ; Segment permissions: Read
.rdata$r:00003320 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003320                 assume cs:_rdata$r
.rdata$r:00003320                 ;org 3320h
.rdata$r:00003320 ; COMDAT (pick any)
.rdata$r:00003320                 public ??_R1A@?0A@EA@ICompressSetCoderProperties@@8
.rdata$r:00003320 ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00003320 ??_R1A@?0A@EA@ICompressSetCoderProperties@@8 dd offset ??_R0?AUICompressSetCoderProperties@@@8
.rdata$r:00003320                                         ; DATA XREF: .rdata$r:ICompressSetCoderProperties::`RTTI Base Class Array'o
.rdata$r:00003320                                         ; ICompressSetCoderProperties `RTTI Type Descriptor'
.rdata$r:00003324                 db    1
.rdata$r:00003325                 db    0
.rdata$r:00003326                 db    0
.rdata$r:00003327                 db    0
.rdata$r:00003328                 db    0
.rdata$r:00003329                 db    0
.rdata$r:0000332A                 db    0
.rdata$r:0000332B                 db    0
.rdata$r:0000332C                 db 0FFh
.rdata$r:0000332D                 db 0FFh
.rdata$r:0000332E                 db 0FFh
.rdata$r:0000332F                 db 0FFh
.rdata$r:00003330                 db    0
.rdata$r:00003331                 db    0
.rdata$r:00003332                 db    0
.rdata$r:00003333                 db    0
.rdata$r:00003334                 db  40h ; @
.rdata$r:00003335                 db    0
.rdata$r:00003336                 db    0
.rdata$r:00003337                 db    0
.rdata$r:00003338                 dd offset ??_R3ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003338 _rdata$r        ends
.rdata$r:00003338
.rdata$r:0000333C ; ===========================================================================
.rdata$r:0000333C
.rdata$r:0000333C ; Segment type: Pure data
.rdata$r:0000333C ; Segment permissions: Read
.rdata$r:0000333C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000333C                 assume cs:_rdata$r
.rdata$r:0000333C                 ;org 333Ch
.rdata$r:0000333C ; COMDAT (pick any)
.rdata$r:0000333C                 public ??_R4CLzmaEncoder@NZip@NArchive@@6BICompressSetCoderProperties@@@
.rdata$r:0000333C ; const NArchive::NZip::CLzmaEncoder::`RTTI Complete Object Locator'{for `ICompressSetCoderProperties'}
.rdata$r:0000333C ??_R4CLzmaEncoder@NZip@NArchive@@6BICompressSetCoderProperties@@@ db    0
.rdata$r:0000333C                                         ; DATA XREF: .rdata:0000320Co
.rdata$r:0000333D                 db    0
.rdata$r:0000333E                 db    0
.rdata$r:0000333F                 db    0
.rdata$r:00003340                 db    4
.rdata$r:00003341                 db    0
.rdata$r:00003342                 db    0
.rdata$r:00003343                 db    0
.rdata$r:00003344                 db    0
.rdata$r:00003345                 db    0
.rdata$r:00003346                 db    0
.rdata$r:00003347                 db    0
.rdata$r:00003348                 dd offset ??_R0?AVCLzmaEncoder@NZip@NArchive@@@8 ; NArchive::NZip::CLzmaEncoder `RTTI Type Descriptor'
.rdata$r:0000334C                 dd offset ??_R3CLzmaEncoder@NZip@NArchive@@8 ; NArchive::NZip::CLzmaEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000334C _rdata$r        ends
.rdata$r:0000334C
.text:00003350 ; ===========================================================================
.text:00003350
.text:00003350 ; Segment type: Pure code
.text:00003350 ; Segment permissions: Read/Execute
.text:00003350 _text           segment para public 'CODE' use32
.text:00003350                 assume cs:_text
.text:00003350                 ;org 3350h
.text:00003350 ; COMDAT (pick any)
.text:00003350                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003350
.text:00003350 ; =============== S U B R O U T I N E =======================================
.text:00003350
.text:00003350 ; Attributes: bp-based frame
.text:00003350
.text:00003350 ; __int32 __stdcall NArchive::NZip::CLzmaEncoder::QueryInterface(NArchive::NZip::CLzmaEncoder *this, const struct _GUID *Buf1, void **)
.text:00003350                 public ?QueryInterface@CLzmaEncoder@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z
.text:00003350 ?QueryInterface@CLzmaEncoder@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00003350                                         ; CODE XREF: [thunk]:NArchive::NZip::CLzmaEncoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j
.text:00003350                                         ; DATA XREF: .rdata:const NArchive::NZip::CLzmaEncoder::`vftable'{for `ICompressCoder'}o
.text:00003350
.text:00003350 var_8           = dword ptr -8
.text:00003350 var_4           = dword ptr -4
.text:00003350 this            = dword ptr  8
.text:00003350 Buf1            = dword ptr  0Ch
.text:00003350 arg_8           = dword ptr  10h
.text:00003350
.text:00003350                 push    ebp
.text:00003351                 mov     ebp, esp
.text:00003353                 sub     esp, 8
.text:00003356                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000335D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003364                 mov     eax, [ebp+arg_8]
.text:00003367                 mov     dword ptr [eax], 0
.text:0000336D                 push    offset _IID_IUnknown ; Buf2
.text:00003372                 mov     ecx, [ebp+Buf1]
.text:00003375                 push    ecx             ; Buf1
.text:00003376                 call    ___@8           ; __(x,x)
.text:0000337B                 test    eax, eax
.text:0000337D                 jz      short loc_33A1
.text:0000337F                 cmp     [ebp+this], 0
.text:00003383                 jz      short loc_3390
.text:00003385                 mov     edx, [ebp+this]
.text:00003388                 add     edx, 4
.text:0000338B                 mov     [ebp+var_4], edx
.text:0000338E                 jmp     short loc_3397
.text:00003390 ; ---------------------------------------------------------------------------
.text:00003390
.text:00003390 loc_3390:                               ; CODE XREF: NArchive::NZip::CLzmaEncoder::QueryInterface(_GUID const &,void * *)+33j
.text:00003390                 mov     [ebp+var_4], 0
.text:00003397
.text:00003397 loc_3397:                               ; CODE XREF: NArchive::NZip::CLzmaEncoder::QueryInterface(_GUID const &,void * *)+3Ej
.text:00003397                 mov     eax, [ebp+arg_8]
.text:0000339A                 mov     ecx, [ebp+var_4]
.text:0000339D                 mov     [eax], ecx
.text:0000339F                 jmp     short loc_33DC
.text:000033A1 ; ---------------------------------------------------------------------------
.text:000033A1
.text:000033A1 loc_33A1:                               ; CODE XREF: NArchive::NZip::CLzmaEncoder::QueryInterface(_GUID const &,void * *)+2Dj
.text:000033A1                 push    offset _IID_ICompressSetCoderProperties ; Buf2
.text:000033A6                 mov     edx, [ebp+Buf1]
.text:000033A9                 push    edx             ; Buf1
.text:000033AA                 call    ___@8           ; __(x,x)
.text:000033AF                 test    eax, eax
.text:000033B1                 jz      short loc_33D5
.text:000033B3                 cmp     [ebp+this], 0
.text:000033B7                 jz      short loc_33C4
.text:000033B9                 mov     eax, [ebp+this]
.text:000033BC                 add     eax, 4
.text:000033BF                 mov     [ebp+var_8], eax
.text:000033C2                 jmp     short loc_33CB
.text:000033C4 ; ---------------------------------------------------------------------------
.text:000033C4
.text:000033C4 loc_33C4:                               ; CODE XREF: NArchive::NZip::CLzmaEncoder::QueryInterface(_GUID const &,void * *)+67j
.text:000033C4                 mov     [ebp+var_8], 0
.text:000033CB
.text:000033CB loc_33CB:                               ; CODE XREF: NArchive::NZip::CLzmaEncoder::QueryInterface(_GUID const &,void * *)+72j
.text:000033CB                 mov     ecx, [ebp+arg_8]
.text:000033CE                 mov     edx, [ebp+var_8]
.text:000033D1                 mov     [ecx], edx
.text:000033D3                 jmp     short loc_33DC
.text:000033D5 ; ---------------------------------------------------------------------------
.text:000033D5
.text:000033D5 loc_33D5:                               ; CODE XREF: NArchive::NZip::CLzmaEncoder::QueryInterface(_GUID const &,void * *)+61j
.text:000033D5                 mov     eax, 80004002h
.text:000033DA                 jmp     short loc_33ED
.text:000033DC ; ---------------------------------------------------------------------------
.text:000033DC
.text:000033DC loc_33DC:                               ; CODE XREF: NArchive::NZip::CLzmaEncoder::QueryInterface(_GUID const &,void * *)+4Fj
.text:000033DC                                         ; NArchive::NZip::CLzmaEncoder::QueryInterface(_GUID const &,void * *)+83j
.text:000033DC                 mov     eax, [ebp+this]
.text:000033DF                 mov     ecx, [eax+8]
.text:000033E2                 add     ecx, 1
.text:000033E5                 mov     edx, [ebp+this]
.text:000033E8                 mov     [edx+8], ecx
.text:000033EB                 xor     eax, eax
.text:000033ED
.text:000033ED loc_33ED:                               ; CODE XREF: NArchive::NZip::CLzmaEncoder::QueryInterface(_GUID const &,void * *)+8Aj
.text:000033ED                 add     esp, 8
.text:000033F0                 cmp     ebp, esp
.text:000033F2                 call    __RTC_CheckEsp
.text:000033F7                 mov     esp, ebp
.text:000033F9                 pop     ebp
.text:000033FA                 retn    0Ch
.text:000033FA ?QueryInterface@CLzmaEncoder@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z endp
.text:000033FA
.text:000033FA ; ---------------------------------------------------------------------------
.text:000033FD                 align 10h
.text:000033FD _text           ends
.text:000033FD
.text:00003400 ; ===========================================================================
.text:00003400
.text:00003400 ; Segment type: Pure code
.text:00003400 ; Segment permissions: Read/Execute
.text:00003400 _text           segment para public 'CODE' use32
.text:00003400                 assume cs:_text
.text:00003400                 ;org 3400h
.text:00003400 ; COMDAT (pick any)
.text:00003400                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003400
.text:00003400 ; =============== S U B R O U T I N E =======================================
.text:00003400
.text:00003400 ; Attributes: bp-based frame
.text:00003400
.text:00003400 ; unsigned __int32 __stdcall NArchive::NZip::CLzmaEncoder::AddRef(NArchive::NZip::CLzmaEncoder *this)
.text:00003400                 public ?AddRef@CLzmaEncoder@NZip@NArchive@@UAGKXZ
.text:00003400 ?AddRef@CLzmaEncoder@NZip@NArchive@@UAGKXZ proc near
.text:00003400                                         ; CODE XREF: [thunk]:NArchive::NZip::CLzmaEncoder::AddRef`adjustor{4}' (void)+5j
.text:00003400                                         ; DATA XREF: .rdata:00003228o
.text:00003400
.text:00003400 var_4           = dword ptr -4
.text:00003400 this            = dword ptr  8
.text:00003400
.text:00003400                 push    ebp
.text:00003401                 mov     ebp, esp
.text:00003403                 push    ecx
.text:00003404                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000340B                 mov     eax, [ebp+this]
.text:0000340E                 mov     ecx, [eax+8]
.text:00003411                 add     ecx, 1
.text:00003414                 mov     [ebp+var_4], ecx
.text:00003417                 mov     edx, [ebp+this]
.text:0000341A                 mov     eax, [ebp+var_4]
.text:0000341D                 mov     [edx+8], eax
.text:00003420                 mov     eax, [ebp+var_4]
.text:00003423                 mov     esp, ebp
.text:00003425                 pop     ebp
.text:00003426                 retn    4
.text:00003426 ?AddRef@CLzmaEncoder@NZip@NArchive@@UAGKXZ endp
.text:00003426
.text:00003426 ; ---------------------------------------------------------------------------
.text:00003429                 align 4
.text:00003429 _text           ends
.text:00003429
.text:0000342C ; ===========================================================================
.text:0000342C
.text:0000342C ; Segment type: Pure code
.text:0000342C ; Segment permissions: Read/Execute
.text:0000342C _text           segment para public 'CODE' use32
.text:0000342C                 assume cs:_text
.text:0000342C                 ;org 342Ch
.text:0000342C ; COMDAT (pick any)
.text:0000342C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000342C
.text:0000342C ; =============== S U B R O U T I N E =======================================
.text:0000342C
.text:0000342C ; Attributes: bp-based frame
.text:0000342C
.text:0000342C ; unsigned __int32 __stdcall NArchive::NZip::CLzmaEncoder::Release(NArchive::NZip::CLzmaEncoder *this)
.text:0000342C                 public ?Release@CLzmaEncoder@NZip@NArchive@@UAGKXZ
.text:0000342C ?Release@CLzmaEncoder@NZip@NArchive@@UAGKXZ proc near
.text:0000342C                                         ; CODE XREF: [thunk]:NArchive::NZip::CLzmaEncoder::Release`adjustor{4}' (void)+5j
.text:0000342C                                         ; DATA XREF: .rdata:0000322Co
.text:0000342C
.text:0000342C var_10          = dword ptr -10h
.text:0000342C var_C           = dword ptr -0Ch
.text:0000342C var_8           = dword ptr -8
.text:0000342C var_4           = dword ptr -4
.text:0000342C this            = dword ptr  8
.text:0000342C
.text:0000342C                 push    ebp
.text:0000342D                 mov     ebp, esp
.text:0000342F                 sub     esp, 10h
.text:00003432                 mov     eax, 0CCCCCCCCh
.text:00003437                 mov     [ebp+var_10], eax
.text:0000343A                 mov     [ebp+var_C], eax
.text:0000343D                 mov     [ebp+var_8], eax
.text:00003440                 mov     [ebp+var_4], eax
.text:00003443                 mov     eax, [ebp+this]
.text:00003446                 mov     ecx, [eax+8]
.text:00003449                 sub     ecx, 1
.text:0000344C                 mov     [ebp+var_C], ecx
.text:0000344F                 mov     edx, [ebp+this]
.text:00003452                 mov     eax, [ebp+var_C]
.text:00003455                 mov     [edx+8], eax
.text:00003458                 cmp     [ebp+var_C], 0
.text:0000345C                 jz      short loc_3466
.text:0000345E                 mov     ecx, [ebp+this]
.text:00003461                 mov     eax, [ecx+8]
.text:00003464                 jmp     short loc_3490
.text:00003466 ; ---------------------------------------------------------------------------
.text:00003466
.text:00003466 loc_3466:                               ; CODE XREF: NArchive::NZip::CLzmaEncoder::Release(void)+30j
.text:00003466                 mov     edx, [ebp+this]
.text:00003469                 mov     [ebp+var_8], edx
.text:0000346C                 mov     eax, [ebp+var_8]
.text:0000346F                 mov     [ebp+var_4], eax
.text:00003472                 cmp     [ebp+var_4], 0
.text:00003476                 jz      short loc_3487
.text:00003478                 push    1
.text:0000347A                 mov     ecx, [ebp+var_4]
.text:0000347D                 call    ??_GCLzmaEncoder@NZip@NArchive@@QAEPAXI@Z ; NArchive::NZip::CLzmaEncoder::`scalar deleting destructor'(uint)
.text:00003482                 mov     [ebp+var_10], eax
.text:00003485                 jmp     short loc_348E
.text:00003487 ; ---------------------------------------------------------------------------
.text:00003487
.text:00003487 loc_3487:                               ; CODE XREF: NArchive::NZip::CLzmaEncoder::Release(void)+4Aj
.text:00003487                 mov     [ebp+var_10], 0
.text:0000348E
.text:0000348E loc_348E:                               ; CODE XREF: NArchive::NZip::CLzmaEncoder::Release(void)+59j
.text:0000348E                 xor     eax, eax
.text:00003490
.text:00003490 loc_3490:                               ; CODE XREF: NArchive::NZip::CLzmaEncoder::Release(void)+38j
.text:00003490                 add     esp, 10h
.text:00003493                 cmp     ebp, esp
.text:00003495                 call    __RTC_CheckEsp
.text:0000349A                 mov     esp, ebp
.text:0000349C                 pop     ebp
.text:0000349D                 retn    4
.text:0000349D ?Release@CLzmaEncoder@NZip@NArchive@@UAGKXZ endp
.text:0000349D
.text:0000349D _text           ends
.text:0000349D
.text:000034A0 ; ===========================================================================
.text:000034A0
.text:000034A0 ; Segment type: Pure code
.text:000034A0 ; Segment permissions: Read/Execute
.text:000034A0 _text           segment para public 'CODE' use32
.text:000034A0                 assume cs:_text
.text:000034A0                 ;org 34A0h
.text:000034A0 ; COMDAT (pick any)
.text:000034A0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000034A0
.text:000034A0 ; =============== S U B R O U T I N E =======================================
.text:000034A0
.text:000034A0 ; Attributes: bp-based frame
.text:000034A0
.text:000034A0 ; public: void * __thiscall NArchive::NZip::CLzmaEncoder::`scalar deleting destructor'(unsigned int)
.text:000034A0                 public ??_GCLzmaEncoder@NZip@NArchive@@QAEPAXI@Z
.text:000034A0 ??_GCLzmaEncoder@NZip@NArchive@@QAEPAXI@Z proc near
.text:000034A0                                         ; CODE XREF: NArchive::NZip::CLzmaEncoder::Release(void)+51p
.text:000034A0
.text:000034A0 var_4           = dword ptr -4
.text:000034A0 arg_0           = dword ptr  8
.text:000034A0
.text:000034A0                 push    ebp
.text:000034A1                 mov     ebp, esp
.text:000034A3                 push    ecx
.text:000034A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000034AB                 mov     [ebp+var_4], ecx
.text:000034AE                 mov     ecx, [ebp+var_4] ; this
.text:000034B1                 call    ??1CLzmaEncoder@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CLzmaEncoder::~CLzmaEncoder(void)
.text:000034B6                 mov     eax, [ebp+arg_0]
.text:000034B9                 and     eax, 1
.text:000034BC                 jz      short loc_34CA
.text:000034BE                 mov     ecx, [ebp+var_4]
.text:000034C1                 push    ecx             ; void *
.text:000034C2                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000034C7                 add     esp, 4
.text:000034CA
.text:000034CA loc_34CA:                               ; CODE XREF: NArchive::NZip::CLzmaEncoder::`scalar deleting destructor'(uint)+1Cj
.text:000034CA                 mov     eax, [ebp+var_4]
.text:000034CD                 add     esp, 4
.text:000034D0                 cmp     ebp, esp
.text:000034D2                 call    __RTC_CheckEsp
.text:000034D7                 mov     esp, ebp
.text:000034D9                 pop     ebp
.text:000034DA                 retn    4
.text:000034DA ??_GCLzmaEncoder@NZip@NArchive@@QAEPAXI@Z endp
.text:000034DA
.text:000034DA ; ---------------------------------------------------------------------------
.text:000034DD                 align 10h
.text:000034DD _text           ends
.text:000034DD
.text:000034E0 ; ===========================================================================
.text:000034E0
.text:000034E0 ; Segment type: Pure code
.text:000034E0 ; Segment permissions: Read/Execute
.text:000034E0 _text           segment para public 'CODE' use32
.text:000034E0                 assume cs:_text
.text:000034E0                 ;org 34E0h
.text:000034E0 ; COMDAT (pick any)
.text:000034E0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000034E0
.text:000034E0 ; =============== S U B R O U T I N E =======================================
.text:000034E0
.text:000034E0 ; Attributes: bp-based frame
.text:000034E0
.text:000034E0 ; _DWORD __thiscall NArchive::NZip::CLzmaEncoder::~CLzmaEncoder(NArchive::NZip::CLzmaEncoder *__hidden this)
.text:000034E0                 public ??1CLzmaEncoder@NZip@NArchive@@QAE@XZ
.text:000034E0 ??1CLzmaEncoder@NZip@NArchive@@QAE@XZ proc near
.text:000034E0                                         ; CODE XREF: NArchive::NZip::CLzmaEncoder::`scalar deleting destructor'(uint)+11p
.text:000034E0
.text:000034E0 var_4           = dword ptr -4
.text:000034E0
.text:000034E0                 push    ebp
.text:000034E1                 mov     ebp, esp
.text:000034E3                 push    ecx
.text:000034E4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000034EB                 mov     [ebp+var_4], ecx
.text:000034EE                 mov     ecx, [ebp+var_4]
.text:000034F1                 add     ecx, 10h
.text:000034F4                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:000034F9                 add     esp, 4
.text:000034FC                 cmp     ebp, esp
.text:000034FE                 call    __RTC_CheckEsp
.text:00003503                 mov     esp, ebp
.text:00003505                 pop     ebp
.text:00003506                 retn
.text:00003506 ??1CLzmaEncoder@NZip@NArchive@@QAE@XZ endp
.text:00003506
.text:00003506 ; ---------------------------------------------------------------------------
.text:00003507                 align 4
.text:00003507 _text           ends
.text:00003507
.text:00003508 ; ===========================================================================
.text:00003508
.text:00003508 ; Segment type: Pure code
.text:00003508 ; Segment permissions: Read/Execute
.text:00003508 _text           segment para public 'CODE' use32
.text:00003508                 assume cs:_text
.text:00003508                 ;org 3508h
.text:00003508 ; COMDAT (pick any)
.text:00003508                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003508
.text:00003508 ; =============== S U B R O U T I N E =======================================
.text:00003508
.text:00003508 ; Attributes: bp-based frame
.text:00003508
.text:00003508 ; _DWORD __thiscall NCrypto::NWzAes::CBaseCoder::CBaseCoder(NCrypto::NWzAes::CBaseCoder *__hidden this)
.text:00003508                 public ??0CBaseCoder@NWzAes@NCrypto@@QAE@XZ
.text:00003508 ??0CBaseCoder@NWzAes@NCrypto@@QAE@XZ proc near
.text:00003508                                         ; CODE XREF: NCrypto::NWzAes::CEncoder::CEncoder(void)+11p
.text:00003508
.text:00003508 var_10          = dword ptr -10h
.text:00003508 var_C           = dword ptr -0Ch
.text:00003508 var_4           = dword ptr -4
.text:00003508
.text:00003508                 push    ebp
.text:00003509                 mov     ebp, esp
.text:0000350B                 push    0FFFFFFFFh
.text:0000350D                 push    offset __ehhandler$??0CBaseCoder@NWzAes@NCrypto@@QAE@XZ
.text:00003512                 mov     eax, large fs:0
.text:00003518                 push    eax
.text:00003519                 push    ecx
.text:0000351A                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00003521                 mov     eax, dword ptr ds:___security_cookie
.text:00003526                 xor     eax, ebp
.text:00003528                 push    eax
.text:00003529                 lea     eax, [ebp+var_C]
.text:0000352C                 mov     large fs:0, eax
.text:00003532                 mov     [ebp+var_10], ecx
.text:00003535                 mov     ecx, [ebp+var_10] ; this
.text:00003538                 call    ??0ICompressFilter@@QAE@XZ ; ICompressFilter::ICompressFilter(void)
.text:0000353D                 mov     ecx, [ebp+var_10]
.text:00003540                 add     ecx, 4          ; this
.text:00003543                 call    ??0ICryptoSetPassword@@QAE@XZ ; ICryptoSetPassword::ICryptoSetPassword(void)
.text:00003548                 mov     ecx, [ebp+var_10]
.text:0000354B                 add     ecx, 8          ; this
.text:0000354E                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00003553                 mov     eax, [ebp+var_10]
.text:00003556                 mov     dword ptr [eax], offset ??_7CBaseCoder@NWzAes@NCrypto@@6BICompressFilter@@@ ; const NCrypto::NWzAes::CBaseCoder::`vftable'{for `ICompressFilter'}
.text:0000355C                 mov     ecx, [ebp+var_10]
.text:0000355F                 mov     dword ptr [ecx+4], offset ??_7CBaseCoder@NWzAes@NCrypto@@6BICryptoSetPassword@@@ ; const NCrypto::NWzAes::CBaseCoder::`vftable'{for `ICryptoSetPassword'}
.text:00003566                 mov     ecx, [ebp+var_10]
.text:00003569                 add     ecx, 0Ch        ; this
.text:0000356C                 call    ??0CKeyInfo@NWzAes@NCrypto@@QAE@XZ ; NCrypto::NWzAes::CKeyInfo::CKeyInfo(void)
.text:00003571                 mov     [ebp+var_4], 0
.text:00003578                 mov     ecx, [ebp+var_10]
.text:0000357B                 add     ecx, 0F0h ; '=' ; this
.text:00003581                 call    ??0CAesCtr2@NWzAes@NCrypto@@QAE@XZ ; NCrypto::NWzAes::CAesCtr2::CAesCtr2(void)
.text:00003586                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000358D                 mov     eax, [ebp+var_10]
.text:00003590                 mov     ecx, [ebp+var_C]
.text:00003593                 mov     large fs:0, ecx
.text:0000359A                 pop     ecx
.text:0000359B                 add     esp, 10h
.text:0000359E                 cmp     ebp, esp
.text:000035A0                 call    __RTC_CheckEsp
.text:000035A5                 mov     esp, ebp
.text:000035A7                 pop     ebp
.text:000035A8                 retn
.text:000035A8 ??0CBaseCoder@NWzAes@NCrypto@@QAE@XZ endp
.text:000035A8
.text:000035A8 ; ---------------------------------------------------------------------------
.text:000035A9                 align 4
.text:000035A9 _text           ends
.text:000035A9
.text$x:000035AC ; ===========================================================================
.text$x:000035AC
.text$x:000035AC ; Segment type: Pure code
.text$x:000035AC ; Segment permissions: Read/Execute
.text$x:000035AC _text$x         segment para public 'CODE' use32
.text$x:000035AC                 assume cs:_text$x
.text$x:000035AC                 ;org 35ACh
.text$x:000035AC ; COMDAT (pick associative to section at 3508)
.text$x:000035AC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:000035AC
.text$x:000035AC ; =============== S U B R O U T I N E =======================================
.text$x:000035AC
.text$x:000035AC
.text$x:000035AC __unwindfunclet$??0CBaseCoder@NWzAes@NCrypto@@QAE@XZ$0 proc near
.text$x:000035AC                                         ; DATA XREF: .xdata$x:00003604o
.text$x:000035AC                 mov     ecx, [ebp-10h]
.text$x:000035AF                 add     ecx, 0Ch        ; this
.text$x:000035B2                 jmp     ??1CKeyInfo@NWzAes@NCrypto@@QAE@XZ ; NCrypto::NWzAes::CKeyInfo::~CKeyInfo(void)
.text$x:000035B2 __unwindfunclet$??0CBaseCoder@NWzAes@NCrypto@@QAE@XZ$0 endp
.text$x:000035B2
.text$x:000035B7
.text$x:000035B7 ; =============== S U B R O U T I N E =======================================
.text$x:000035B7
.text$x:000035B7
.text$x:000035B7 __ehhandler$??0CBaseCoder@NWzAes@NCrypto@@QAE@XZ proc near
.text$x:000035B7                                         ; DATA XREF: NCrypto::NWzAes::CBaseCoder::CBaseCoder(void)+5o
.text$x:000035B7
.text$x:000035B7 arg_4           = dword ptr  8
.text$x:000035B7
.text$x:000035B7                 mov     edx, [esp+arg_4]
.text$x:000035BB                 lea     eax, [edx+0Ch]
.text$x:000035BE                 mov     ecx, [edx-8]
.text$x:000035C1                 xor     ecx, eax
.text$x:000035C3                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000035C8                 mov     eax, offset __ehfuncinfo$??0CBaseCoder@NWzAes@NCrypto@@QAE@XZ
.text$x:000035CD                 jmp     ___CxxFrameHandler3
.text$x:000035CD __ehhandler$??0CBaseCoder@NWzAes@NCrypto@@QAE@XZ endp
.text$x:000035CD
.text$x:000035CD ; ---------------------------------------------------------------------------
.text$x:000035D2                 align 4
.text$x:000035D2 _text$x         ends
.text$x:000035D2
.rdata:000035D4 ; ===========================================================================
.rdata:000035D4
.rdata:000035D4 ; Segment type: Pure data
.rdata:000035D4 ; Segment permissions: Read
.rdata:000035D4 _rdata          segment dword public 'DATA' use32
.rdata:000035D4                 assume cs:_rdata
.rdata:000035D4                 ;org 35D4h
.rdata:000035D4 ; COMDAT (pick largest)
.rdata:000035D4                 dd offset ??_R4CBaseCoder@NWzAes@NCrypto@@6BICryptoSetPassword@@@ ; const NCrypto::NWzAes::CBaseCoder::`RTTI Complete Object Locator'{for `ICryptoSetPassword'}
.rdata:000035D8                 public ??_7CBaseCoder@NWzAes@NCrypto@@6BICryptoSetPassword@@@
.rdata:000035D8 ; const NCrypto::NWzAes::CBaseCoder::`vftable'{for `ICryptoSetPassword'}
.rdata:000035D8 ??_7CBaseCoder@NWzAes@NCrypto@@6BICryptoSetPassword@@@ dd offset ?QueryInterface@CBaseCoder@NWzAes@NCrypto@@W3AGJABU_GUID@@PAPAX@Z
.rdata:000035D8                                         ; DATA XREF: NCrypto::NWzAes::CBaseCoder::CBaseCoder(void)+57o
.rdata:000035D8                                         ; [thunk]:NCrypto::NWzAes::CBaseCoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:000035DC                 dd offset ?AddRef@CBaseCoder@NWzAes@NCrypto@@W3AGKXZ ; [thunk]:NCrypto::NWzAes::CBaseCoder::AddRef`adjustor{4}' (void)
.rdata:000035E0                 dd offset ?Release@CBaseCoder@NWzAes@NCrypto@@W3AGKXZ ; [thunk]:NCrypto::NWzAes::CBaseCoder::Release`adjustor{4}' (void)
.rdata:000035E4                 dd offset ?CryptoSetPassword@CBaseCoder@NWzAes@NCrypto@@UAGJPBEI@Z ; NCrypto::NWzAes::CBaseCoder::CryptoSetPassword(uchar const *,uint)
.rdata:000035E4 _rdata          ends
.rdata:000035E4
.rdata:000035E8 ; ===========================================================================
.rdata:000035E8
.rdata:000035E8 ; Segment type: Pure data
.rdata:000035E8 ; Segment permissions: Read
.rdata:000035E8 _rdata          segment dword public 'DATA' use32
.rdata:000035E8                 assume cs:_rdata
.rdata:000035E8                 ;org 35E8h
.rdata:000035E8 ; COMDAT (pick largest)
.rdata:000035E8                 dd offset ??_R4CBaseCoder@NWzAes@NCrypto@@6BICompressFilter@@@ ; const NCrypto::NWzAes::CBaseCoder::`RTTI Complete Object Locator'{for `ICompressFilter'}
.rdata:000035EC                 public ??_7CBaseCoder@NWzAes@NCrypto@@6BICompressFilter@@@
.rdata:000035EC ; const NCrypto::NWzAes::CBaseCoder::`vftable'{for `ICompressFilter'}
.rdata:000035EC ??_7CBaseCoder@NWzAes@NCrypto@@6BICompressFilter@@@ dd offset ?QueryInterface@CBaseCoder@NWzAes@NCrypto@@UAGJABU_GUID@@PAPAX@Z
.rdata:000035EC                                         ; DATA XREF: NCrypto::NWzAes::CBaseCoder::CBaseCoder(void)+4Eo
.rdata:000035EC                                         ; NCrypto::NWzAes::CBaseCoder::QueryInterface(_GUID const &,void * *)
.rdata:000035F0                 dd offset ?AddRef@CBaseCoder@NWzAes@NCrypto@@UAGKXZ ; NCrypto::NWzAes::CBaseCoder::AddRef(void)
.rdata:000035F4                 dd offset ?Release@CBaseCoder@NWzAes@NCrypto@@UAGKXZ ; NCrypto::NWzAes::CBaseCoder::Release(void)
.rdata:000035F8                 dd offset ?Init@CBaseCoder@NWzAes@NCrypto@@UAGJXZ ; NCrypto::NWzAes::CBaseCoder::Init(void)
.rdata:000035FC                 dd offset __purecall
.rdata:000035FC _rdata          ends
.rdata:000035FC
.xdata$x:00003600 ; ===========================================================================
.xdata$x:00003600
.xdata$x:00003600 ; Segment type: Pure data
.xdata$x:00003600 ; Segment permissions: Read
.xdata$x:00003600 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00003600                 assume cs:_xdata$x
.xdata$x:00003600                 ;org 3600h
.xdata$x:00003600 ; COMDAT (pick associative to section at 3508)
.xdata$x:00003600 __unwindtable$??0CBaseCoder@NWzAes@NCrypto@@QAE@XZ db 0FFh
.xdata$x:00003600                                         ; DATA XREF: .xdata$x:00003610o
.xdata$x:00003601                 db 0FFh
.xdata$x:00003602                 db 0FFh
.xdata$x:00003603                 db 0FFh
.xdata$x:00003604                 dd offset __unwindfunclet$??0CBaseCoder@NWzAes@NCrypto@@QAE@XZ$0
.xdata$x:00003608 __ehfuncinfo$??0CBaseCoder@NWzAes@NCrypto@@QAE@XZ db  22h ; "
.xdata$x:00003608                                         ; DATA XREF: __ehhandler$??0CBaseCoder@NWzAes@NCrypto@@QAE@XZ+11o
.xdata$x:00003609                 db    5
.xdata$x:0000360A                 db  93h ; ô
.xdata$x:0000360B                 db  19h
.xdata$x:0000360C                 db    1
.xdata$x:0000360D                 db    0
.xdata$x:0000360E                 db    0
.xdata$x:0000360F                 db    0
.xdata$x:00003610                 dd offset __unwindtable$??0CBaseCoder@NWzAes@NCrypto@@QAE@XZ
.xdata$x:00003614                 db    0
.xdata$x:00003615                 db    0
.xdata$x:00003616                 db    0
.xdata$x:00003617                 db    0
.xdata$x:00003618                 db    0
.xdata$x:00003619                 db    0
.xdata$x:0000361A                 db    0
.xdata$x:0000361B                 db    0
.xdata$x:0000361C                 db    0
.xdata$x:0000361D                 db    0
.xdata$x:0000361E                 db    0
.xdata$x:0000361F                 db    0
.xdata$x:00003620                 db    0
.xdata$x:00003621                 db    0
.xdata$x:00003622                 db    0
.xdata$x:00003623                 db    0
.xdata$x:00003624                 db    0
.xdata$x:00003625                 db    0
.xdata$x:00003626                 db    0
.xdata$x:00003627                 db    0
.xdata$x:00003628                 db    1
.xdata$x:00003629                 db    0
.xdata$x:0000362A                 db    0
.xdata$x:0000362B                 db    0
.xdata$x:0000362B _xdata$x        ends
.xdata$x:0000362B
.rdata$r:0000362C ; ===========================================================================
.rdata$r:0000362C
.rdata$r:0000362C ; Segment type: Pure data
.rdata$r:0000362C ; Segment permissions: Read
.rdata$r:0000362C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000362C                 assume cs:_rdata$r
.rdata$r:0000362C                 ;org 362Ch
.rdata$r:0000362C ; COMDAT (pick any)
.rdata$r:0000362C                 public ??_R4CBaseCoder@NWzAes@NCrypto@@6BICompressFilter@@@
.rdata$r:0000362C ; const NCrypto::NWzAes::CBaseCoder::`RTTI Complete Object Locator'{for `ICompressFilter'}
.rdata$r:0000362C ??_R4CBaseCoder@NWzAes@NCrypto@@6BICompressFilter@@@ db    0
.rdata$r:0000362C                                         ; DATA XREF: .rdata:000035E8o
.rdata$r:0000362D                 db    0
.rdata$r:0000362E                 db    0
.rdata$r:0000362F                 db    0
.rdata$r:00003630                 db    0
.rdata$r:00003631                 db    0
.rdata$r:00003632                 db    0
.rdata$r:00003633                 db    0
.rdata$r:00003634                 db    0
.rdata$r:00003635                 db    0
.rdata$r:00003636                 db    0
.rdata$r:00003637                 db    0
.rdata$r:00003638                 dd offset ??_R0?AVCBaseCoder@NWzAes@NCrypto@@@8 ; NCrypto::NWzAes::CBaseCoder `RTTI Type Descriptor'
.rdata$r:0000363C                 dd offset ??_R3CBaseCoder@NWzAes@NCrypto@@8 ; NCrypto::NWzAes::CBaseCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000363C _rdata$r        ends
.rdata$r:0000363C
.rdata$r:00003640 ; ===========================================================================
.rdata$r:00003640
.rdata$r:00003640 ; Segment type: Pure data
.rdata$r:00003640 ; Segment permissions: Read
.rdata$r:00003640 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003640                 assume cs:_rdata$r
.rdata$r:00003640                 ;org 3640h
.rdata$r:00003640 ; COMDAT (pick any)
.rdata$r:00003640                 public ??_R4CBaseCoder@NWzAes@NCrypto@@6BICryptoSetPassword@@@
.rdata$r:00003640 ; const NCrypto::NWzAes::CBaseCoder::`RTTI Complete Object Locator'{for `ICryptoSetPassword'}
.rdata$r:00003640 ??_R4CBaseCoder@NWzAes@NCrypto@@6BICryptoSetPassword@@@ db    0
.rdata$r:00003640                                         ; DATA XREF: .rdata:000035D4o
.rdata$r:00003641                 db    0
.rdata$r:00003642                 db    0
.rdata$r:00003643                 db    0
.rdata$r:00003644                 db    4
.rdata$r:00003645                 db    0
.rdata$r:00003646                 db    0
.rdata$r:00003647                 db    0
.rdata$r:00003648                 db    0
.rdata$r:00003649                 db    0
.rdata$r:0000364A                 db    0
.rdata$r:0000364B                 db    0
.rdata$r:0000364C                 dd offset ??_R0?AVCBaseCoder@NWzAes@NCrypto@@@8 ; NCrypto::NWzAes::CBaseCoder `RTTI Type Descriptor'
.rdata$r:00003650                 dd offset ??_R3CBaseCoder@NWzAes@NCrypto@@8 ; NCrypto::NWzAes::CBaseCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003650 _rdata$r        ends
.rdata$r:00003650
.text:00003654 ; ===========================================================================
.text:00003654
.text:00003654 ; Segment type: Pure code
.text:00003654 ; Segment permissions: Read/Execute
.text:00003654 _text           segment para public 'CODE' use32
.text:00003654                 assume cs:_text
.text:00003654                 ;org 3654h
.text:00003654 ; COMDAT (pick any)
.text:00003654                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003654
.text:00003654 ; =============== S U B R O U T I N E =======================================
.text:00003654
.text:00003654 ; Attributes: bp-based frame
.text:00003654
.text:00003654 ; _DWORD __thiscall NCrypto::NWzAes::CKeyInfo::CKeyInfo(NCrypto::NWzAes::CKeyInfo *__hidden this)
.text:00003654                 public ??0CKeyInfo@NWzAes@NCrypto@@QAE@XZ
.text:00003654 ??0CKeyInfo@NWzAes@NCrypto@@QAE@XZ proc near
.text:00003654                                         ; CODE XREF: NCrypto::NWzAes::CBaseCoder::CBaseCoder(void)+64p
.text:00003654
.text:00003654 var_4           = dword ptr -4
.text:00003654
.text:00003654                 push    ebp
.text:00003655                 mov     ebp, esp
.text:00003657                 push    ecx
.text:00003658                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000365F                 mov     [ebp+var_4], ecx
.text:00003662                 mov     eax, [ebp+var_4]
.text:00003665                 mov     dword ptr [eax], 3
.text:0000366B                 mov     ecx, [ebp+var_4]
.text:0000366E                 add     ecx, 18h
.text:00003671                 call    ??0?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::CBuffer<uchar>(void)
.text:00003676                 mov     eax, [ebp+var_4]
.text:00003679                 add     esp, 4
.text:0000367C                 cmp     ebp, esp
.text:0000367E                 call    __RTC_CheckEsp
.text:00003683                 mov     esp, ebp
.text:00003685                 pop     ebp
.text:00003686                 retn
.text:00003686 ??0CKeyInfo@NWzAes@NCrypto@@QAE@XZ endp
.text:00003686
.text:00003686 ; ---------------------------------------------------------------------------
.text:00003687                 align 4
.text:00003687 _text           ends
.text:00003687
.text:00003688 ; ===========================================================================
.text:00003688
.text:00003688 ; Segment type: Pure code
.text:00003688 ; Segment permissions: Read/Execute
.text:00003688 _text           segment para public 'CODE' use32
.text:00003688                 assume cs:_text
.text:00003688                 ;org 3688h
.text:00003688 ; COMDAT (pick any)
.text:00003688                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003688
.text:00003688 ; =============== S U B R O U T I N E =======================================
.text:00003688
.text:00003688 ; Attributes: bp-based frame
.text:00003688
.text:00003688 ; _DWORD __thiscall NCrypto::NZip::CCipher::CCipher(NCrypto::NZip::CCipher *__hidden this)
.text:00003688                 public ??0CCipher@NZip@NCrypto@@QAE@XZ
.text:00003688 ??0CCipher@NZip@NCrypto@@QAE@XZ proc near
.text:00003688                                         ; CODE XREF: NCrypto::NZip::CEncoder::CEncoder(void)+11p
.text:00003688
.text:00003688 var_4           = dword ptr -4
.text:00003688
.text:00003688                 push    ebp
.text:00003689                 mov     ebp, esp
.text:0000368B                 push    ecx
.text:0000368C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003693                 mov     [ebp+var_4], ecx
.text:00003696                 mov     ecx, [ebp+var_4] ; this
.text:00003699                 call    ??0ICompressFilter@@QAE@XZ ; ICompressFilter::ICompressFilter(void)
.text:0000369E                 mov     ecx, [ebp+var_4]
.text:000036A1                 add     ecx, 4          ; this
.text:000036A4                 call    ??0ICryptoSetPassword@@QAE@XZ ; ICryptoSetPassword::ICryptoSetPassword(void)
.text:000036A9                 mov     ecx, [ebp+var_4]
.text:000036AC                 add     ecx, 8          ; this
.text:000036AF                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:000036B4                 mov     eax, [ebp+var_4]
.text:000036B7                 mov     dword ptr [eax], offset ??_7CCipher@NZip@NCrypto@@6BICompressFilter@@@ ; const NCrypto::NZip::CCipher::`vftable'{for `ICompressFilter'}
.text:000036BD                 mov     ecx, [ebp+var_4]
.text:000036C0                 mov     dword ptr [ecx+4], offset ??_7CCipher@NZip@NCrypto@@6BICryptoSetPassword@@@ ; const NCrypto::NZip::CCipher::`vftable'{for `ICryptoSetPassword'}
.text:000036C7                 mov     eax, [ebp+var_4]
.text:000036CA                 add     esp, 4
.text:000036CD                 cmp     ebp, esp
.text:000036CF                 call    __RTC_CheckEsp
.text:000036D4                 mov     esp, ebp
.text:000036D6                 pop     ebp
.text:000036D7                 retn
.text:000036D7 ??0CCipher@NZip@NCrypto@@QAE@XZ endp
.text:000036D7
.text:000036D7 _text           ends
.text:000036D7
.rdata:000036D8 ; ===========================================================================
.rdata:000036D8
.rdata:000036D8 ; Segment type: Pure data
.rdata:000036D8 ; Segment permissions: Read
.rdata:000036D8 _rdata          segment dword public 'DATA' use32
.rdata:000036D8                 assume cs:_rdata
.rdata:000036D8                 ;org 36D8h
.rdata:000036D8 ; COMDAT (pick largest)
.rdata:000036D8                 dd offset ??_R4CCipher@NZip@NCrypto@@6BICryptoSetPassword@@@ ; const NCrypto::NZip::CCipher::`RTTI Complete Object Locator'{for `ICryptoSetPassword'}
.rdata:000036DC                 public ??_7CCipher@NZip@NCrypto@@6BICryptoSetPassword@@@
.rdata:000036DC ; const NCrypto::NZip::CCipher::`vftable'{for `ICryptoSetPassword'}
.rdata:000036DC ??_7CCipher@NZip@NCrypto@@6BICryptoSetPassword@@@ dd offset ?QueryInterface@CCipher@NZip@NCrypto@@W3AGJABU_GUID@@PAPAX@Z
.rdata:000036DC                                         ; DATA XREF: NCrypto::NZip::CCipher::CCipher(void)+38o
.rdata:000036DC                                         ; [thunk]:NCrypto::NZip::CCipher::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:000036E0                 dd offset ?AddRef@CCipher@NZip@NCrypto@@W3AGKXZ ; [thunk]:NCrypto::NZip::CCipher::AddRef`adjustor{4}' (void)
.rdata:000036E4                 dd offset ?Release@CCipher@NZip@NCrypto@@W3AGKXZ ; [thunk]:NCrypto::NZip::CCipher::Release`adjustor{4}' (void)
.rdata:000036E8                 dd offset ?CryptoSetPassword@CCipher@NZip@NCrypto@@UAGJPBEI@Z ; NCrypto::NZip::CCipher::CryptoSetPassword(uchar const *,uint)
.rdata:000036E8 _rdata          ends
.rdata:000036E8
.rdata:000036EC ; ===========================================================================
.rdata:000036EC
.rdata:000036EC ; Segment type: Pure data
.rdata:000036EC ; Segment permissions: Read
.rdata:000036EC _rdata          segment dword public 'DATA' use32
.rdata:000036EC                 assume cs:_rdata
.rdata:000036EC                 ;org 36ECh
.rdata:000036EC ; COMDAT (pick largest)
.rdata:000036EC                 dd offset ??_R4CCipher@NZip@NCrypto@@6BICompressFilter@@@ ; const NCrypto::NZip::CCipher::`RTTI Complete Object Locator'{for `ICompressFilter'}
.rdata:000036F0                 public ??_7CCipher@NZip@NCrypto@@6BICompressFilter@@@
.rdata:000036F0 ; const NCrypto::NZip::CCipher::`vftable'{for `ICompressFilter'}
.rdata:000036F0 ??_7CCipher@NZip@NCrypto@@6BICompressFilter@@@ dd offset ?QueryInterface@CCipher@NZip@NCrypto@@UAGJABU_GUID@@PAPAX@Z
.rdata:000036F0                                         ; DATA XREF: NCrypto::NZip::CCipher::CCipher(void)+2Fo
.rdata:000036F0                                         ; NCrypto::NZip::CCipher::QueryInterface(_GUID const &,void * *)
.rdata:000036F4                 dd offset ?AddRef@CCipher@NZip@NCrypto@@UAGKXZ ; NCrypto::NZip::CCipher::AddRef(void)
.rdata:000036F8                 dd offset ?Release@CCipher@NZip@NCrypto@@UAGKXZ ; NCrypto::NZip::CCipher::Release(void)
.rdata:000036FC                 dd offset ?Init@CCipher@NZip@NCrypto@@UAGJXZ ; NCrypto::NZip::CCipher::Init(void)
.rdata:00003700                 dd offset __purecall
.rdata:00003700 _rdata          ends
.rdata:00003700
.rdata$r:00003704 ; ===========================================================================
.rdata$r:00003704
.rdata$r:00003704 ; Segment type: Pure data
.rdata$r:00003704 ; Segment permissions: Read
.rdata$r:00003704 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003704                 assume cs:_rdata$r
.rdata$r:00003704                 ;org 3704h
.rdata$r:00003704 ; COMDAT (pick any)
.rdata$r:00003704                 public ??_R4CCipher@NZip@NCrypto@@6BICompressFilter@@@
.rdata$r:00003704 ; const NCrypto::NZip::CCipher::`RTTI Complete Object Locator'{for `ICompressFilter'}
.rdata$r:00003704 ??_R4CCipher@NZip@NCrypto@@6BICompressFilter@@@ db    0
.rdata$r:00003704                                         ; DATA XREF: .rdata:000036ECo
.rdata$r:00003705                 db    0
.rdata$r:00003706                 db    0
.rdata$r:00003707                 db    0
.rdata$r:00003708                 db    0
.rdata$r:00003709                 db    0
.rdata$r:0000370A                 db    0
.rdata$r:0000370B                 db    0
.rdata$r:0000370C                 db    0
.rdata$r:0000370D                 db    0
.rdata$r:0000370E                 db    0
.rdata$r:0000370F                 db    0
.rdata$r:00003710                 dd offset ??_R0?AVCCipher@NZip@NCrypto@@@8 ; NCrypto::NZip::CCipher `RTTI Type Descriptor'
.rdata$r:00003714                 dd offset ??_R3CCipher@NZip@NCrypto@@8 ; NCrypto::NZip::CCipher::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003714 _rdata$r        ends
.rdata$r:00003714
.rdata$r:00003718 ; ===========================================================================
.rdata$r:00003718
.rdata$r:00003718 ; Segment type: Pure data
.rdata$r:00003718 ; Segment permissions: Read
.rdata$r:00003718 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003718                 assume cs:_rdata$r
.rdata$r:00003718                 ;org 3718h
.rdata$r:00003718 ; COMDAT (pick any)
.rdata$r:00003718                 public ??_R4CCipher@NZip@NCrypto@@6BICryptoSetPassword@@@
.rdata$r:00003718 ; const NCrypto::NZip::CCipher::`RTTI Complete Object Locator'{for `ICryptoSetPassword'}
.rdata$r:00003718 ??_R4CCipher@NZip@NCrypto@@6BICryptoSetPassword@@@ db    0
.rdata$r:00003718                                         ; DATA XREF: .rdata:000036D8o
.rdata$r:00003719                 db    0
.rdata$r:0000371A                 db    0
.rdata$r:0000371B                 db    0
.rdata$r:0000371C                 db    4
.rdata$r:0000371D                 db    0
.rdata$r:0000371E                 db    0
.rdata$r:0000371F                 db    0
.rdata$r:00003720                 db    0
.rdata$r:00003721                 db    0
.rdata$r:00003722                 db    0
.rdata$r:00003723                 db    0
.rdata$r:00003724                 dd offset ??_R0?AVCCipher@NZip@NCrypto@@@8 ; NCrypto::NZip::CCipher `RTTI Type Descriptor'
.rdata$r:00003728                 dd offset ??_R3CCipher@NZip@NCrypto@@8 ; NCrypto::NZip::CCipher::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003728 _rdata$r        ends
.rdata$r:00003728
.text:0000372C ; ===========================================================================
.text:0000372C
.text:0000372C ; Segment type: Pure code
.text:0000372C ; Segment permissions: Read/Execute
.text:0000372C _text           segment para public 'CODE' use32
.text:0000372C                 assume cs:_text
.text:0000372C                 ;org 372Ch
.text:0000372C ; COMDAT (pick any)
.text:0000372C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000372C
.text:0000372C ; =============== S U B R O U T I N E =======================================
.text:0000372C
.text:0000372C ; Attributes: bp-based frame
.text:0000372C
.text:0000372C ; _DWORD __thiscall ICompressSetCoderProperties::ICompressSetCoderProperties(ICompressSetCoderProperties *__hidden this)
.text:0000372C                 public ??0ICompressSetCoderProperties@@QAE@XZ
.text:0000372C ??0ICompressSetCoderProperties@@QAE@XZ proc near
.text:0000372C                                         ; CODE XREF: NArchive::NZip::CLzmaEncoder::CLzmaEncoder(void)+1Cp
.text:0000372C
.text:0000372C var_4           = dword ptr -4
.text:0000372C
.text:0000372C                 push    ebp
.text:0000372D                 mov     ebp, esp
.text:0000372F                 push    ecx
.text:00003730                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003737                 mov     [ebp+var_4], ecx
.text:0000373A                 mov     ecx, [ebp+var_4]
.text:0000373D                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00003742                 mov     eax, [ebp+var_4]
.text:00003745                 mov     dword ptr [eax], offset ??_7ICompressSetCoderProperties@@6B@ ; const ICompressSetCoderProperties::`vftable'
.text:0000374B                 mov     eax, [ebp+var_4]
.text:0000374E                 add     esp, 4
.text:00003751                 cmp     ebp, esp
.text:00003753                 call    __RTC_CheckEsp
.text:00003758                 mov     esp, ebp
.text:0000375A                 pop     ebp
.text:0000375B                 retn
.text:0000375B ??0ICompressSetCoderProperties@@QAE@XZ endp
.text:0000375B
.text:0000375B _text           ends
.text:0000375B
.rdata:0000375C ; ===========================================================================
.rdata:0000375C
.rdata:0000375C ; Segment type: Pure data
.rdata:0000375C ; Segment permissions: Read
.rdata:0000375C _rdata          segment dword public 'DATA' use32
.rdata:0000375C                 assume cs:_rdata
.rdata:0000375C                 ;org 375Ch
.rdata:0000375C ; COMDAT (pick largest)
.rdata:0000375C                 dd offset ??_R4ICompressSetCoderProperties@@6B@ ; const ICompressSetCoderProperties::`RTTI Complete Object Locator'
.rdata:00003760                 public ??_7ICompressSetCoderProperties@@6B@
.rdata:00003760 ; const ICompressSetCoderProperties::`vftable'
.rdata:00003760 ??_7ICompressSetCoderProperties@@6B@ dd offset __purecall
.rdata:00003760                                         ; DATA XREF: ICompressSetCoderProperties::ICompressSetCoderProperties(void)+19o
.rdata:00003764                 dd offset __purecall
.rdata:00003768                 dd offset __purecall
.rdata:0000376C                 dd offset __purecall
.rdata:0000376C _rdata          ends
.rdata:0000376C
.rdata$r:00003770 ; ===========================================================================
.rdata$r:00003770
.rdata$r:00003770 ; Segment type: Pure data
.rdata$r:00003770 ; Segment permissions: Read
.rdata$r:00003770 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003770                 assume cs:_rdata$r
.rdata$r:00003770                 ;org 3770h
.rdata$r:00003770 ; COMDAT (pick any)
.rdata$r:00003770                 public ??_R4ICompressSetCoderProperties@@6B@
.rdata$r:00003770 ; const ICompressSetCoderProperties::`RTTI Complete Object Locator'
.rdata$r:00003770 ??_R4ICompressSetCoderProperties@@6B@ db    0
.rdata$r:00003770                                         ; DATA XREF: .rdata:0000375Co
.rdata$r:00003771                 db    0
.rdata$r:00003772                 db    0
.rdata$r:00003773                 db    0
.rdata$r:00003774                 db    0
.rdata$r:00003775                 db    0
.rdata$r:00003776                 db    0
.rdata$r:00003777                 db    0
.rdata$r:00003778                 db    0
.rdata$r:00003779                 db    0
.rdata$r:0000377A                 db    0
.rdata$r:0000377B                 db    0
.rdata$r:0000377C                 dd offset ??_R0?AUICompressSetCoderProperties@@@8 ; ICompressSetCoderProperties `RTTI Type Descriptor'
.rdata$r:00003780                 dd offset ??_R3ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003780 _rdata$r        ends
.rdata$r:00003780
.text:00003784 ; ===========================================================================
.text:00003784
.text:00003784 ; Segment type: Pure code
.text:00003784 ; Segment permissions: Read/Execute
.text:00003784 _text           segment para public 'CODE' use32
.text:00003784                 assume cs:_text
.text:00003784                 ;org 3784h
.text:00003784 ; COMDAT (pick any)
.text:00003784                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003784
.text:00003784 ; =============== S U B R O U T I N E =======================================
.text:00003784
.text:00003784 ; Attributes: bp-based frame
.text:00003784
.text:00003784 ; _DWORD __thiscall ICompressFilter::ICompressFilter(ICompressFilter *__hidden this)
.text:00003784                 public ??0ICompressFilter@@QAE@XZ
.text:00003784 ??0ICompressFilter@@QAE@XZ proc near    ; CODE XREF: NCrypto::NWzAes::CBaseCoder::CBaseCoder(void)+30p
.text:00003784                                         ; NCrypto::NZip::CCipher::CCipher(void)+11p
.text:00003784
.text:00003784 var_4           = dword ptr -4
.text:00003784
.text:00003784                 push    ebp
.text:00003785                 mov     ebp, esp
.text:00003787                 push    ecx
.text:00003788                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000378F                 mov     [ebp+var_4], ecx
.text:00003792                 mov     ecx, [ebp+var_4]
.text:00003795                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:0000379A                 mov     eax, [ebp+var_4]
.text:0000379D                 mov     dword ptr [eax], offset ??_7ICompressFilter@@6B@ ; const ICompressFilter::`vftable'
.text:000037A3                 mov     eax, [ebp+var_4]
.text:000037A6                 add     esp, 4
.text:000037A9                 cmp     ebp, esp
.text:000037AB                 call    __RTC_CheckEsp
.text:000037B0                 mov     esp, ebp
.text:000037B2                 pop     ebp
.text:000037B3                 retn
.text:000037B3 ??0ICompressFilter@@QAE@XZ endp
.text:000037B3
.text:000037B3 _text           ends
.text:000037B3
.rdata:000037B4 ; ===========================================================================
.rdata:000037B4
.rdata:000037B4 ; Segment type: Pure data
.rdata:000037B4 ; Segment permissions: Read
.rdata:000037B4 _rdata          segment dword public 'DATA' use32
.rdata:000037B4                 assume cs:_rdata
.rdata:000037B4                 ;org 37B4h
.rdata:000037B4 ; COMDAT (pick largest)
.rdata:000037B4                 dd offset ??_R4ICompressFilter@@6B@ ; const ICompressFilter::`RTTI Complete Object Locator'
.rdata:000037B8                 public ??_7ICompressFilter@@6B@
.rdata:000037B8 ; const ICompressFilter::`vftable'
.rdata:000037B8 ??_7ICompressFilter@@6B@ dd offset __purecall
.rdata:000037B8                                         ; DATA XREF: ICompressFilter::ICompressFilter(void)+19o
.rdata:000037BC                 dd offset __purecall
.rdata:000037C0                 dd offset __purecall
.rdata:000037C4                 dd offset __purecall
.rdata:000037C8                 dd offset __purecall
.rdata:000037C8 _rdata          ends
.rdata:000037C8
.rdata$r:000037CC ; ===========================================================================
.rdata$r:000037CC
.rdata$r:000037CC ; Segment type: Pure data
.rdata$r:000037CC ; Segment permissions: Read
.rdata$r:000037CC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000037CC                 assume cs:_rdata$r
.rdata$r:000037CC                 ;org 37CCh
.rdata$r:000037CC ; COMDAT (pick any)
.rdata$r:000037CC                 public ??_R4ICompressFilter@@6B@
.rdata$r:000037CC ; const ICompressFilter::`RTTI Complete Object Locator'
.rdata$r:000037CC ??_R4ICompressFilter@@6B@ db    0       ; DATA XREF: .rdata:000037B4o
.rdata$r:000037CD                 db    0
.rdata$r:000037CE                 db    0
.rdata$r:000037CF                 db    0
.rdata$r:000037D0                 db    0
.rdata$r:000037D1                 db    0
.rdata$r:000037D2                 db    0
.rdata$r:000037D3                 db    0
.rdata$r:000037D4                 db    0
.rdata$r:000037D5                 db    0
.rdata$r:000037D6                 db    0
.rdata$r:000037D7                 db    0
.rdata$r:000037D8                 dd offset ??_R0?AUICompressFilter@@@8 ; ICompressFilter `RTTI Type Descriptor'
.rdata$r:000037DC                 dd offset ??_R3ICompressFilter@@8 ; ICompressFilter::`RTTI Class Hierarchy Descriptor'
.rdata$r:000037DC _rdata$r        ends
.rdata$r:000037DC
.text:000037E0 ; ===========================================================================
.text:000037E0
.text:000037E0 ; Segment type: Pure code
.text:000037E0 ; Segment permissions: Read/Execute
.text:000037E0 _text           segment para public 'CODE' use32
.text:000037E0                 assume cs:_text
.text:000037E0                 ;org 37E0h
.text:000037E0 ; COMDAT (pick any)
.text:000037E0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000037E0
.text:000037E0 ; =============== S U B R O U T I N E =======================================
.text:000037E0
.text:000037E0 ; Attributes: bp-based frame
.text:000037E0
.text:000037E0 ; _DWORD __thiscall ICryptoSetPassword::ICryptoSetPassword(ICryptoSetPassword *__hidden this)
.text:000037E0                 public ??0ICryptoSetPassword@@QAE@XZ
.text:000037E0 ??0ICryptoSetPassword@@QAE@XZ proc near ; CODE XREF: NCrypto::NWzAes::CBaseCoder::CBaseCoder(void)+3Bp
.text:000037E0                                         ; NCrypto::NZip::CCipher::CCipher(void)+1Cp
.text:000037E0
.text:000037E0 var_4           = dword ptr -4
.text:000037E0
.text:000037E0                 push    ebp
.text:000037E1                 mov     ebp, esp
.text:000037E3                 push    ecx
.text:000037E4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000037EB                 mov     [ebp+var_4], ecx
.text:000037EE                 mov     ecx, [ebp+var_4]
.text:000037F1                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:000037F6                 mov     eax, [ebp+var_4]
.text:000037F9                 mov     dword ptr [eax], offset ??_7ICryptoSetPassword@@6B@ ; const ICryptoSetPassword::`vftable'
.text:000037FF                 mov     eax, [ebp+var_4]
.text:00003802                 add     esp, 4
.text:00003805                 cmp     ebp, esp
.text:00003807                 call    __RTC_CheckEsp
.text:0000380C                 mov     esp, ebp
.text:0000380E                 pop     ebp
.text:0000380F                 retn
.text:0000380F ??0ICryptoSetPassword@@QAE@XZ endp
.text:0000380F
.text:0000380F _text           ends
.text:0000380F
.rdata:00003810 ; ===========================================================================
.rdata:00003810
.rdata:00003810 ; Segment type: Pure data
.rdata:00003810 ; Segment permissions: Read
.rdata:00003810 _rdata          segment dword public 'DATA' use32
.rdata:00003810                 assume cs:_rdata
.rdata:00003810                 ;org 3810h
.rdata:00003810 ; COMDAT (pick largest)
.rdata:00003810                 dd offset ??_R4ICryptoSetPassword@@6B@ ; const ICryptoSetPassword::`RTTI Complete Object Locator'
.rdata:00003814                 public ??_7ICryptoSetPassword@@6B@
.rdata:00003814 ; const ICryptoSetPassword::`vftable'
.rdata:00003814 ??_7ICryptoSetPassword@@6B@ dd offset __purecall
.rdata:00003814                                         ; DATA XREF: ICryptoSetPassword::ICryptoSetPassword(void)+19o
.rdata:00003818                 dd offset __purecall
.rdata:0000381C                 dd offset __purecall
.rdata:00003820                 dd offset __purecall
.rdata:00003820 _rdata          ends
.rdata:00003820
.rdata$r:00003824 ; ===========================================================================
.rdata$r:00003824
.rdata$r:00003824 ; Segment type: Pure data
.rdata$r:00003824 ; Segment permissions: Read
.rdata$r:00003824 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003824                 assume cs:_rdata$r
.rdata$r:00003824                 ;org 3824h
.rdata$r:00003824 ; COMDAT (pick any)
.rdata$r:00003824                 public ??_R4ICryptoSetPassword@@6B@
.rdata$r:00003824 ; const ICryptoSetPassword::`RTTI Complete Object Locator'
.rdata$r:00003824 ??_R4ICryptoSetPassword@@6B@ db    0    ; DATA XREF: .rdata:00003810o
.rdata$r:00003825                 db    0
.rdata$r:00003826                 db    0
.rdata$r:00003827                 db    0
.rdata$r:00003828                 db    0
.rdata$r:00003829                 db    0
.rdata$r:0000382A                 db    0
.rdata$r:0000382B                 db    0
.rdata$r:0000382C                 db    0
.rdata$r:0000382D                 db    0
.rdata$r:0000382E                 db    0
.rdata$r:0000382F                 db    0
.rdata$r:00003830                 dd offset ??_R0?AUICryptoSetPassword@@@8 ; ICryptoSetPassword `RTTI Type Descriptor'
.rdata$r:00003834                 dd offset ??_R3ICryptoSetPassword@@8 ; ICryptoSetPassword::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003834 _rdata$r        ends
.rdata$r:00003834
.text:00003838 ; ===========================================================================
.text:00003838
.text:00003838 ; Segment type: Pure code
.text:00003838 ; Segment permissions: Read/Execute
.text:00003838 _text           segment para public 'CODE' use32
.text:00003838                 assume cs:_text
.text:00003838                 ;org 3838h
.text:00003838 ; COMDAT (pick any)
.text:00003838                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003838
.text:00003838 ; =============== S U B R O U T I N E =======================================
.text:00003838
.text:00003838 ; Attributes: bp-based frame
.text:00003838
.text:00003838 ; public: __thiscall CMyComPtr<struct ICompressCoder>::CMyComPtr<struct ICompressCoder>(void)
.text:00003838                 public ??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ
.text:00003838 ??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ proc near
.text:00003838                                         ; CODE XREF: NArchive::NZip::CAddCommon::CAddCommon(NArchive::NZip::CCompressionMethodMode const &)+50p
.text:00003838                                         ; NArchive::NZip::CAddCommon::CAddCommon(NArchive::NZip::CCompressionMethodMode const &)+5Fp ...
.text:00003838
.text:00003838 var_4           = dword ptr -4
.text:00003838
.text:00003838                 push    ebp
.text:00003839                 mov     ebp, esp
.text:0000383B                 push    ecx
.text:0000383C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003843                 mov     [ebp+var_4], ecx
.text:00003846                 mov     eax, [ebp+var_4]
.text:00003849                 mov     dword ptr [eax], 0
.text:0000384F                 mov     eax, [ebp+var_4]
.text:00003852                 mov     esp, ebp
.text:00003854                 pop     ebp
.text:00003855                 retn
.text:00003855 ??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ endp
.text:00003855
.text:00003855 ; ---------------------------------------------------------------------------
.text:00003856                 align 4
.text:00003856 _text           ends
.text:00003856
.text:00003858 ; ===========================================================================
.text:00003858
.text:00003858 ; Segment type: Pure code
.text:00003858 ; Segment permissions: Read/Execute
.text:00003858 _text           segment para public 'CODE' use32
.text:00003858                 assume cs:_text
.text:00003858                 ;org 3858h
.text:00003858 ; COMDAT (pick any)
.text:00003858                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003858
.text:00003858 ; =============== S U B R O U T I N E =======================================
.text:00003858
.text:00003858 ; Attributes: bp-based frame
.text:00003858
.text:00003858 ; public: __thiscall CMyComPtr<struct ICompressCoder>::~CMyComPtr<struct ICompressCoder>(void)
.text:00003858                 public ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ
.text:00003858 ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ proc near
.text:00003858                                         ; CODE XREF: NArchive::NZip::CAddCommon::~CAddCommon(void)+55p
.text:00003858                                         ; NArchive::NZip::CAddCommon::~CAddCommon(void)+64p ...
.text:00003858
.text:00003858 var_4           = dword ptr -4
.text:00003858
.text:00003858                 push    ebp
.text:00003859                 mov     ebp, esp
.text:0000385B                 push    ecx
.text:0000385C                 push    esi
.text:0000385D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003864                 mov     [ebp+var_4], ecx
.text:00003867                 mov     eax, [ebp+var_4]
.text:0000386A                 cmp     dword ptr [eax], 0
.text:0000386D                 jz      short loc_388A
.text:0000386F                 mov     ecx, [ebp+var_4]
.text:00003872                 mov     edx, [ecx]
.text:00003874                 mov     eax, [ebp+var_4]
.text:00003877                 mov     ecx, [eax]
.text:00003879                 mov     edx, [edx]
.text:0000387B                 mov     esi, esp
.text:0000387D                 push    ecx
.text:0000387E                 mov     eax, [edx+8]
.text:00003881                 call    eax
.text:00003883                 cmp     esi, esp
.text:00003885                 call    __RTC_CheckEsp
.text:0000388A
.text:0000388A loc_388A:                               ; CODE XREF: CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)+15j
.text:0000388A                 pop     esi
.text:0000388B                 add     esp, 4
.text:0000388E                 cmp     ebp, esp
.text:00003890                 call    __RTC_CheckEsp
.text:00003895                 mov     esp, ebp
.text:00003897                 pop     ebp
.text:00003898                 retn
.text:00003898 ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ endp
.text:00003898
.text:00003898 ; ---------------------------------------------------------------------------
.text:00003899                 align 4
.text:00003899 _text           ends
.text:00003899
.text:0000389C ; ===========================================================================
.text:0000389C
.text:0000389C ; Segment type: Pure code
.text:0000389C ; Segment permissions: Read/Execute
.text:0000389C _text           segment para public 'CODE' use32
.text:0000389C                 assume cs:_text
.text:0000389C                 ;org 389Ch
.text:0000389C ; COMDAT (pick any)
.text:0000389C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000389C
.text:0000389C ; =============== S U B R O U T I N E =======================================
.text:0000389C
.text:0000389C ; Attributes: bp-based frame
.text:0000389C
.text:0000389C ; public: struct ICompressCoder * __thiscall CMyComPtr<struct ICompressCoder>::operator->(void)const
.text:0000389C                 public ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ
.text:0000389C ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ proc near
.text:0000389C                                         ; CODE XREF: NArchive::NZip::CLzmaEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+3Bp
.text:0000389C                                         ; NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+870p ...
.text:0000389C
.text:0000389C var_4           = dword ptr -4
.text:0000389C
.text:0000389C                 push    ebp
.text:0000389D                 mov     ebp, esp
.text:0000389F                 push    ecx
.text:000038A0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000038A7                 mov     [ebp+var_4], ecx
.text:000038AA                 mov     eax, [ebp+var_4]
.text:000038AD                 mov     eax, [eax]
.text:000038AF                 mov     esp, ebp
.text:000038B1                 pop     ebp
.text:000038B2                 retn
.text:000038B2 ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ endp
.text:000038B2
.text:000038B2 ; ---------------------------------------------------------------------------
.text:000038B3                 align 4
.text:000038B3 _text           ends
.text:000038B3
.text:000038B4 ; ===========================================================================
.text:000038B4
.text:000038B4 ; Segment type: Pure code
.text:000038B4 ; Segment permissions: Read/Execute
.text:000038B4 _text           segment para public 'CODE' use32
.text:000038B4                 assume cs:_text
.text:000038B4                 ;org 38B4h
.text:000038B4 ; COMDAT (pick any)
.text:000038B4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000038B4
.text:000038B4 ; =============== S U B R O U T I N E =======================================
.text:000038B4
.text:000038B4 ; Attributes: bp-based frame
.text:000038B4
.text:000038B4 ; public: struct ICompressCoder * __thiscall CMyComPtr<struct ICompressCoder>::operator=(struct ICompressCoder *)
.text:000038B4                 public ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z
.text:000038B4 ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z proc near
.text:000038B4                                         ; CODE XREF: NArchive::NZip::CLzmaEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+6Cp
.text:000038B4                                         ; NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+828p ...
.text:000038B4
.text:000038B4 var_4           = dword ptr -4
.text:000038B4 arg_0           = dword ptr  8
.text:000038B4
.text:000038B4                 push    ebp
.text:000038B5                 mov     ebp, esp
.text:000038B7                 push    ecx
.text:000038B8                 push    esi
.text:000038B9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000038C0                 mov     [ebp+var_4], ecx
.text:000038C3                 cmp     [ebp+arg_0], 0
.text:000038C7                 jz      short loc_38E0
.text:000038C9                 mov     eax, [ebp+arg_0]
.text:000038CC                 mov     ecx, [eax]
.text:000038CE                 mov     esi, esp
.text:000038D0                 mov     edx, [ebp+arg_0]
.text:000038D3                 push    edx
.text:000038D4                 mov     eax, [ecx+4]
.text:000038D7                 call    eax
.text:000038D9                 cmp     esi, esp
.text:000038DB                 call    __RTC_CheckEsp
.text:000038E0
.text:000038E0 loc_38E0:                               ; CODE XREF: CMyComPtr<ICompressCoder>::operator=(ICompressCoder *)+13j
.text:000038E0                 mov     ecx, [ebp+var_4]
.text:000038E3                 cmp     dword ptr [ecx], 0
.text:000038E6                 jz      short loc_3903
.text:000038E8                 mov     edx, [ebp+var_4]
.text:000038EB                 mov     eax, [edx]
.text:000038ED                 mov     ecx, [ebp+var_4]
.text:000038F0                 mov     edx, [ecx]
.text:000038F2                 mov     eax, [eax]
.text:000038F4                 mov     esi, esp
.text:000038F6                 push    edx
.text:000038F7                 mov     ecx, [eax+8]
.text:000038FA                 call    ecx
.text:000038FC                 cmp     esi, esp
.text:000038FE                 call    __RTC_CheckEsp
.text:00003903
.text:00003903 loc_3903:                               ; CODE XREF: CMyComPtr<ICompressCoder>::operator=(ICompressCoder *)+32j
.text:00003903                 mov     edx, [ebp+var_4]
.text:00003906                 mov     eax, [ebp+arg_0]
.text:00003909                 mov     [edx], eax
.text:0000390B                 mov     eax, [ebp+arg_0]
.text:0000390E                 pop     esi
.text:0000390F                 add     esp, 4
.text:00003912                 cmp     ebp, esp
.text:00003914                 call    __RTC_CheckEsp
.text:00003919                 mov     esp, ebp
.text:0000391B                 pop     ebp
.text:0000391C                 retn    4
.text:0000391C ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z endp
.text:0000391C
.text:0000391C ; ---------------------------------------------------------------------------
.text:0000391F                 align 10h
.text:0000391F _text           ends
.text:0000391F
.text:00003920 ; ===========================================================================
.text:00003920
.text:00003920 ; Segment type: Pure code
.text:00003920 ; Segment permissions: Read/Execute
.text:00003920 _text           segment para public 'CODE' use32
.text:00003920                 assume cs:_text
.text:00003920                 ;org 3920h
.text:00003920 ; COMDAT (pick any)
.text:00003920                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003920
.text:00003920 ; =============== S U B R O U T I N E =======================================
.text:00003920
.text:00003920 ; Attributes: bp-based frame
.text:00003920
.text:00003920 ; public: bool __thiscall CMyComPtr<struct ICompressCoder>::operator!(void)const
.text:00003920                 public ??7?$CMyComPtr@UICompressCoder@@@@QBE_NXZ
.text:00003920 ??7?$CMyComPtr@UICompressCoder@@@@QBE_NXZ proc near
.text:00003920                                         ; CODE XREF: NArchive::NZip::CLzmaEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+1Dp
.text:00003920                                         ; NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+91Fp ...
.text:00003920
.text:00003920 var_4           = dword ptr -4
.text:00003920
.text:00003920                 push    ebp
.text:00003921                 mov     ebp, esp
.text:00003923                 push    ecx
.text:00003924                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000392B                 mov     [ebp+var_4], ecx
.text:0000392E                 mov     eax, [ebp+var_4]
.text:00003931                 xor     ecx, ecx
.text:00003933                 cmp     dword ptr [eax], 0
.text:00003936                 setz    cl
.text:00003939                 mov     al, cl
.text:0000393B                 mov     esp, ebp
.text:0000393D                 pop     ebp
.text:0000393E                 retn
.text:0000393E ??7?$CMyComPtr@UICompressCoder@@@@QBE_NXZ endp
.text:0000393E
.text:0000393E ; ---------------------------------------------------------------------------
.text:0000393F                 align 10h
.text:0000393F _text           ends
.text:0000393F
.text:00003940 ; ===========================================================================
.text:00003940
.text:00003940 ; Segment type: Pure code
.text:00003940 ; Segment permissions: Read/Execute
.text:00003940 _text           segment para public 'CODE' use32
.text:00003940                 assume cs:_text
.text:00003940                 ;org 3940h
.text:00003940 ; COMDAT (pick any)
.text:00003940                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003940
.text:00003940 ; =============== S U B R O U T I N E =======================================
.text:00003940
.text:00003940 ; Attributes: bp-based frame
.text:00003940
.text:00003940 ; public: __thiscall CBuffer<unsigned char>::CBuffer<unsigned char>(void)
.text:00003940                 public ??0?$CBuffer@E@@QAE@XZ
.text:00003940 ??0?$CBuffer@E@@QAE@XZ proc near        ; CODE XREF: NCrypto::NWzAes::CKeyInfo::CKeyInfo(void)+1Dp
.text:00003940
.text:00003940 var_4           = dword ptr -4
.text:00003940
.text:00003940                 push    ebp
.text:00003941                 mov     ebp, esp
.text:00003943                 push    ecx
.text:00003944                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000394B                 mov     [ebp+var_4], ecx
.text:0000394E                 mov     eax, [ebp+var_4]
.text:00003951                 mov     dword ptr [eax], 0
.text:00003957                 mov     ecx, [ebp+var_4]
.text:0000395A                 mov     dword ptr [ecx+4], 0
.text:00003961                 mov     eax, [ebp+var_4]
.text:00003964                 mov     esp, ebp
.text:00003966                 pop     ebp
.text:00003967                 retn
.text:00003967 ??0?$CBuffer@E@@QAE@XZ endp
.text:00003967
.text:00003967 _text           ends
.text:00003967
.text:00003968 ; ===========================================================================
.text:00003968
.text:00003968 ; Segment type: Pure code
.text:00003968 ; Segment permissions: Read/Execute
.text:00003968 _text           segment para public 'CODE' use32
.text:00003968                 assume cs:_text
.text:00003968                 ;org 3968h
.text:00003968 ; COMDAT (pick any)
.text:00003968                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003968
.text:00003968 ; =============== S U B R O U T I N E =======================================
.text:00003968
.text:00003968 ; Attributes: bp-based frame
.text:00003968
.text:00003968 ; public: __thiscall CBuffer<unsigned char>::~CBuffer<unsigned char>(void)
.text:00003968                 public ??1?$CBuffer@E@@QAE@XZ
.text:00003968 ??1?$CBuffer@E@@QAE@XZ proc near        ; CODE XREF: NCrypto::NWzAes::CKeyInfo::~CKeyInfo(void)+14p
.text:00003968
.text:00003968 var_8           = dword ptr -8
.text:00003968 var_4           = dword ptr -4
.text:00003968
.text:00003968                 push    ebp
.text:00003969                 mov     ebp, esp
.text:0000396B                 sub     esp, 8
.text:0000396E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00003975                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000397C                 mov     [ebp+var_4], ecx
.text:0000397F                 mov     eax, [ebp+var_4]
.text:00003982                 mov     ecx, [eax]
.text:00003984                 mov     [ebp+var_8], ecx
.text:00003987                 mov     edx, [ebp+var_8]
.text:0000398A                 push    edx             ; void *
.text:0000398B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00003990                 add     esp, 4
.text:00003993                 add     esp, 8
.text:00003996                 cmp     ebp, esp
.text:00003998                 call    __RTC_CheckEsp
.text:0000399D                 mov     esp, ebp
.text:0000399F                 pop     ebp
.text:000039A0                 retn
.text:000039A0 ??1?$CBuffer@E@@QAE@XZ endp
.text:000039A0
.text:000039A0 ; ---------------------------------------------------------------------------
.text:000039A1                 align 4
.text:000039A1 _text           ends
.text:000039A1
.text:000039A4 ; ===========================================================================
.text:000039A4
.text:000039A4 ; Segment type: Pure code
.text:000039A4 ; Segment permissions: Read/Execute
.text:000039A4 _text           segment para public 'CODE' use32
.text:000039A4                 assume cs:_text
.text:000039A4                 ;org 39A4h
.text:000039A4 ; COMDAT (pick any)
.text:000039A4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000039A4
.text:000039A4 ; =============== S U B R O U T I N E =======================================
.text:000039A4
.text:000039A4 ; Attributes: bp-based frame
.text:000039A4
.text:000039A4 ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::CMyComPtr<struct ISequentialOutStream>(void)
.text:000039A4                 public ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
.text:000039A4 ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ proc near
.text:000039A4                                         ; CODE XREF: NArchive::NZip::CAddCommon::CAddCommon(NArchive::NZip::CCompressionMethodMode const &)+78p
.text:000039A4                                         ; NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+833p ...
.text:000039A4
.text:000039A4 var_4           = dword ptr -4
.text:000039A4
.text:000039A4                 push    ebp
.text:000039A5                 mov     ebp, esp
.text:000039A7                 push    ecx
.text:000039A8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000039AF                 mov     [ebp+var_4], ecx
.text:000039B2                 mov     eax, [ebp+var_4]
.text:000039B5                 mov     dword ptr [eax], 0
.text:000039BB                 mov     eax, [ebp+var_4]
.text:000039BE                 mov     esp, ebp
.text:000039C0                 pop     ebp
.text:000039C1                 retn
.text:000039C1 ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ endp
.text:000039C1
.text:000039C1 ; ---------------------------------------------------------------------------
.text:000039C2                 align 4
.text:000039C2 _text           ends
.text:000039C2
.text:000039C4 ; ===========================================================================
.text:000039C4
.text:000039C4 ; Segment type: Pure code
.text:000039C4 ; Segment permissions: Read/Execute
.text:000039C4 _text           segment para public 'CODE' use32
.text:000039C4                 assume cs:_text
.text:000039C4                 ;org 39C4h
.text:000039C4 ; COMDAT (pick any)
.text:000039C4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000039C4
.text:000039C4 ; =============== S U B R O U T I N E =======================================
.text:000039C4
.text:000039C4 ; Attributes: bp-based frame
.text:000039C4
.text:000039C4 ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::CMyComPtr<struct ISequentialOutStream>(struct ISequentialOutStream *)
.text:000039C4                 public ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z
.text:000039C4 ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z proc near
.text:000039C4                                         ; CODE XREF: NArchive::NZip::CLzmaEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+ABp
.text:000039C4
.text:000039C4 var_4           = dword ptr -4
.text:000039C4 arg_0           = dword ptr  8
.text:000039C4
.text:000039C4                 push    ebp
.text:000039C5                 mov     ebp, esp
.text:000039C7                 push    ecx
.text:000039C8                 push    esi
.text:000039C9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000039D0                 mov     [ebp+var_4], ecx
.text:000039D3                 mov     eax, [ebp+var_4]
.text:000039D6                 mov     ecx, [ebp+arg_0]
.text:000039D9                 mov     [eax], ecx
.text:000039DB                 cmp     [ebp+arg_0], 0
.text:000039DF                 jz      short loc_39F8
.text:000039E1                 mov     edx, [ebp+arg_0]
.text:000039E4                 mov     eax, [edx]
.text:000039E6                 mov     esi, esp
.text:000039E8                 mov     ecx, [ebp+arg_0]
.text:000039EB                 push    ecx
.text:000039EC                 mov     edx, [eax+4]
.text:000039EF                 call    edx
.text:000039F1                 cmp     esi, esp
.text:000039F3                 call    __RTC_CheckEsp
.text:000039F8
.text:000039F8 loc_39F8:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(ISequentialOutStream *)+1Bj
.text:000039F8                 mov     eax, [ebp+var_4]
.text:000039FB                 pop     esi
.text:000039FC                 add     esp, 4
.text:000039FF                 cmp     ebp, esp
.text:00003A01                 call    __RTC_CheckEsp
.text:00003A06                 mov     esp, ebp
.text:00003A08                 pop     ebp
.text:00003A09                 retn    4
.text:00003A09 ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z endp
.text:00003A09
.text:00003A09 _text           ends
.text:00003A09
.text:00003A0C ; ===========================================================================
.text:00003A0C
.text:00003A0C ; Segment type: Pure code
.text:00003A0C ; Segment permissions: Read/Execute
.text:00003A0C _text           segment para public 'CODE' use32
.text:00003A0C                 assume cs:_text
.text:00003A0C                 ;org 3A0Ch
.text:00003A0C ; COMDAT (pick any)
.text:00003A0C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003A0C
.text:00003A0C ; =============== S U B R O U T I N E =======================================
.text:00003A0C
.text:00003A0C ; Attributes: bp-based frame
.text:00003A0C
.text:00003A0C ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::~CMyComPtr<struct ISequentialOutStream>(void)
.text:00003A0C                 public ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
.text:00003A0C ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ proc near
.text:00003A0C                                         ; CODE XREF: NArchive::NZip::CLzmaEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+100p
.text:00003A0C                                         ; NArchive::NZip::CLzmaEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+149p ...
.text:00003A0C
.text:00003A0C var_4           = dword ptr -4
.text:00003A0C
.text:00003A0C                 push    ebp
.text:00003A0D                 mov     ebp, esp
.text:00003A0F                 push    ecx
.text:00003A10                 push    esi
.text:00003A11                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003A18                 mov     [ebp+var_4], ecx
.text:00003A1B                 mov     eax, [ebp+var_4]
.text:00003A1E                 cmp     dword ptr [eax], 0
.text:00003A21                 jz      short loc_3A3E
.text:00003A23                 mov     ecx, [ebp+var_4]
.text:00003A26                 mov     edx, [ecx]
.text:00003A28                 mov     eax, [ebp+var_4]
.text:00003A2B                 mov     ecx, [eax]
.text:00003A2D                 mov     edx, [edx]
.text:00003A2F                 mov     esi, esp
.text:00003A31                 push    ecx
.text:00003A32                 mov     eax, [edx+8]
.text:00003A35                 call    eax
.text:00003A37                 cmp     esi, esp
.text:00003A39                 call    __RTC_CheckEsp
.text:00003A3E
.text:00003A3E loc_3A3E:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)+15j
.text:00003A3E                 pop     esi
.text:00003A3F                 add     esp, 4
.text:00003A42                 cmp     ebp, esp
.text:00003A44                 call    __RTC_CheckEsp
.text:00003A49                 mov     esp, ebp
.text:00003A4B                 pop     ebp
.text:00003A4C                 retn
.text:00003A4C ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ endp
.text:00003A4C
.text:00003A4C ; ---------------------------------------------------------------------------
.text:00003A4D                 align 10h
.text:00003A4D _text           ends
.text:00003A4D
.text:00003A50 ; ===========================================================================
.text:00003A50
.text:00003A50 ; Segment type: Pure code
.text:00003A50 ; Segment permissions: Read/Execute
.text:00003A50 _text           segment para public 'CODE' use32
.text:00003A50                 assume cs:_text
.text:00003A50                 ;org 3A50h
.text:00003A50 ; COMDAT (pick any)
.text:00003A50                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003A50
.text:00003A50 ; =============== S U B R O U T I N E =======================================
.text:00003A50
.text:00003A50 ; Attributes: bp-based frame
.text:00003A50
.text:00003A50 ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::operator struct ISequentialOutStream *(void)const
.text:00003A50                 public ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ
.text:00003A50 ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ proc near
.text:00003A50                                         ; CODE XREF: NArchive::NZip::CLzmaEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+110p
.text:00003A50                                         ; NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+88Bp ...
.text:00003A50
.text:00003A50 var_4           = dword ptr -4
.text:00003A50
.text:00003A50                 push    ebp
.text:00003A51                 mov     ebp, esp
.text:00003A53                 push    ecx
.text:00003A54                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003A5B                 mov     [ebp+var_4], ecx
.text:00003A5E                 mov     eax, [ebp+var_4]
.text:00003A61                 mov     eax, [eax]
.text:00003A63                 mov     esp, ebp
.text:00003A65                 pop     ebp
.text:00003A66                 retn
.text:00003A66 ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ endp
.text:00003A66
.text:00003A66 ; ---------------------------------------------------------------------------
.text:00003A67                 align 4
.text:00003A67 _text           ends
.text:00003A67
.text:00003A68 ; ===========================================================================
.text:00003A68
.text:00003A68 ; Segment type: Pure code
.text:00003A68 ; Segment permissions: Read/Execute
.text:00003A68 _text           segment para public 'CODE' use32
.text:00003A68                 assume cs:_text
.text:00003A68                 ;org 3A68h
.text:00003A68 ; COMDAT (pick any)
.text:00003A68                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003A68
.text:00003A68 ; =============== S U B R O U T I N E =======================================
.text:00003A68
.text:00003A68 ; Attributes: bp-based frame
.text:00003A68
.text:00003A68 ; public: struct ISequentialOutStream * __thiscall CMyComPtr<struct ISequentialOutStream>::operator=(struct ISequentialOutStream *)
.text:00003A68                 public ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z
.text:00003A68 ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z proc near
.text:00003A68                                         ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+393p
.text:00003A68                                         ; NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+865p ...
.text:00003A68
.text:00003A68 var_4           = dword ptr -4
.text:00003A68 arg_0           = dword ptr  8
.text:00003A68
.text:00003A68                 push    ebp
.text:00003A69                 mov     ebp, esp
.text:00003A6B                 push    ecx
.text:00003A6C                 push    esi
.text:00003A6D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003A74                 mov     [ebp+var_4], ecx
.text:00003A77                 cmp     [ebp+arg_0], 0
.text:00003A7B                 jz      short loc_3A94
.text:00003A7D                 mov     eax, [ebp+arg_0]
.text:00003A80                 mov     ecx, [eax]
.text:00003A82                 mov     esi, esp
.text:00003A84                 mov     edx, [ebp+arg_0]
.text:00003A87                 push    edx
.text:00003A88                 mov     eax, [ecx+4]
.text:00003A8B                 call    eax
.text:00003A8D                 cmp     esi, esp
.text:00003A8F                 call    __RTC_CheckEsp
.text:00003A94
.text:00003A94 loc_3A94:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::operator=(ISequentialOutStream *)+13j
.text:00003A94                 mov     ecx, [ebp+var_4]
.text:00003A97                 cmp     dword ptr [ecx], 0
.text:00003A9A                 jz      short loc_3AB7
.text:00003A9C                 mov     edx, [ebp+var_4]
.text:00003A9F                 mov     eax, [edx]
.text:00003AA1                 mov     ecx, [ebp+var_4]
.text:00003AA4                 mov     edx, [ecx]
.text:00003AA6                 mov     eax, [eax]
.text:00003AA8                 mov     esi, esp
.text:00003AAA                 push    edx
.text:00003AAB                 mov     ecx, [eax+8]
.text:00003AAE                 call    ecx
.text:00003AB0                 cmp     esi, esp
.text:00003AB2                 call    __RTC_CheckEsp
.text:00003AB7
.text:00003AB7 loc_3AB7:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::operator=(ISequentialOutStream *)+32j
.text:00003AB7                 mov     edx, [ebp+var_4]
.text:00003ABA                 mov     eax, [ebp+arg_0]
.text:00003ABD                 mov     [edx], eax
.text:00003ABF                 mov     eax, [ebp+arg_0]
.text:00003AC2                 pop     esi
.text:00003AC3                 add     esp, 4
.text:00003AC6                 cmp     ebp, esp
.text:00003AC8                 call    __RTC_CheckEsp
.text:00003ACD                 mov     esp, ebp
.text:00003ACF                 pop     ebp
.text:00003AD0                 retn    4
.text:00003AD0 ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z endp
.text:00003AD0
.text:00003AD0 ; ---------------------------------------------------------------------------
.text:00003AD3                 align 4
.text:00003AD3 _text           ends
.text:00003AD3
.text:00003AD4 ; ===========================================================================
.text:00003AD4
.text:00003AD4 ; Segment type: Pure code
.text:00003AD4 ; Segment permissions: Read/Execute
.text:00003AD4 _text           segment para public 'CODE' use32
.text:00003AD4                 assume cs:_text
.text:00003AD4                 ;org 3AD4h
.text:00003AD4 ; COMDAT (pick any)
.text:00003AD4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003AD4
.text:00003AD4 ; =============== S U B R O U T I N E =======================================
.text:00003AD4
.text:00003AD4 ; Attributes: bp-based frame
.text:00003AD4
.text:00003AD4 ; public: struct ISequentialOutStream * __thiscall CMyComPtr<struct ISequentialOutStream>::operator=(class CMyComPtr<struct ISequentialOutStream> const &)
.text:00003AD4                 public ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@ABV0@@Z
.text:00003AD4 ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@ABV0@@Z proc near
.text:00003AD4                                         ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+854p
.text:00003AD4                                         ; NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+C29p
.text:00003AD4
.text:00003AD4 var_4           = dword ptr -4
.text:00003AD4 arg_0           = dword ptr  8
.text:00003AD4
.text:00003AD4                 push    ebp
.text:00003AD5                 mov     ebp, esp
.text:00003AD7                 push    ecx
.text:00003AD8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003ADF                 mov     [ebp+var_4], ecx
.text:00003AE2                 mov     eax, [ebp+arg_0]
.text:00003AE5                 mov     ecx, [eax]
.text:00003AE7                 push    ecx
.text:00003AE8                 mov     ecx, [ebp+var_4]
.text:00003AEB                 call    ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=(ISequentialOutStream *)
.text:00003AF0                 add     esp, 4
.text:00003AF3                 cmp     ebp, esp
.text:00003AF5                 call    __RTC_CheckEsp
.text:00003AFA                 mov     esp, ebp
.text:00003AFC                 pop     ebp
.text:00003AFD                 retn    4
.text:00003AFD ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@ABV0@@Z endp
.text:00003AFD
.text:00003AFD _text           ends
.text:00003AFD
.text:00003B00 ; ===========================================================================
.text:00003B00
.text:00003B00 ; Segment type: Pure code
.text:00003B00 ; Segment permissions: Read/Execute
.text:00003B00 _text           segment para public 'CODE' use32
.text:00003B00                 assume cs:_text
.text:00003B00                 ;org 3B00h
.text:00003B00 ; COMDAT (pick any)
.text:00003B00                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003B00
.text:00003B00 ; =============== S U B R O U T I N E =======================================
.text:00003B00
.text:00003B00 ; Attributes: bp-based frame
.text:00003B00
.text:00003B00 ; public: bool __thiscall CMyComPtr<struct ISequentialOutStream>::operator!(void)const
.text:00003B00                 public ??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ
.text:00003B00 ??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ proc near
.text:00003B00                                         ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+2EBp
.text:00003B00
.text:00003B00 var_4           = dword ptr -4
.text:00003B00
.text:00003B00                 push    ebp
.text:00003B01                 mov     ebp, esp
.text:00003B03                 push    ecx
.text:00003B04                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003B0B                 mov     [ebp+var_4], ecx
.text:00003B0E                 mov     eax, [ebp+var_4]
.text:00003B11                 xor     ecx, ecx
.text:00003B13                 cmp     dword ptr [eax], 0
.text:00003B16                 setz    cl
.text:00003B19                 mov     al, cl
.text:00003B1B                 mov     esp, ebp
.text:00003B1D                 pop     ebp
.text:00003B1E                 retn
.text:00003B1E ??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ endp
.text:00003B1E
.text:00003B1E ; ---------------------------------------------------------------------------
.text:00003B1F                 align 10h
.text:00003B1F _text           ends
.text:00003B1F
.text:00003B20 ; ===========================================================================
.text:00003B20
.text:00003B20 ; Segment type: Pure code
.text:00003B20 ; Segment permissions: Read/Execute
.text:00003B20 _text           segment para public 'CODE' use32
.text:00003B20                 assume cs:_text
.text:00003B20                 ;org 3B20h
.text:00003B20 ; COMDAT (pick any)
.text:00003B20                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003B20
.text:00003B20 ; =============== S U B R O U T I N E =======================================
.text:00003B20
.text:00003B20 ; Attributes: bp-based frame
.text:00003B20
.text:00003B20 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::CMyComPtr<struct ISequentialInStream>(void)
.text:00003B20                 public ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
.text:00003B20 ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ proc near
.text:00003B20                                         ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+5Bp
.text:00003B20                                         ; NCompress::CCopyCoder::CCopyCoder(void)+79p
.text:00003B20
.text:00003B20 var_4           = dword ptr -4
.text:00003B20
.text:00003B20                 push    ebp
.text:00003B21                 mov     ebp, esp
.text:00003B23                 push    ecx
.text:00003B24                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003B2B                 mov     [ebp+var_4], ecx
.text:00003B2E                 mov     eax, [ebp+var_4]
.text:00003B31                 mov     dword ptr [eax], 0
.text:00003B37                 mov     eax, [ebp+var_4]
.text:00003B3A                 mov     esp, ebp
.text:00003B3C                 pop     ebp
.text:00003B3D                 retn
.text:00003B3D ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ endp
.text:00003B3D
.text:00003B3D ; ---------------------------------------------------------------------------
.text:00003B3E                 align 10h
.text:00003B3E _text           ends
.text:00003B3E
.text:00003B40 ; ===========================================================================
.text:00003B40
.text:00003B40 ; Segment type: Pure code
.text:00003B40 ; Segment permissions: Read/Execute
.text:00003B40 _text           segment para public 'CODE' use32
.text:00003B40                 assume cs:_text
.text:00003B40                 ;org 3B40h
.text:00003B40 ; COMDAT (pick any)
.text:00003B40                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003B40
.text:00003B40 ; =============== S U B R O U T I N E =======================================
.text:00003B40
.text:00003B40 ; Attributes: bp-based frame
.text:00003B40
.text:00003B40 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::~CMyComPtr<struct ISequentialInStream>(void)
.text:00003B40                 public ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
.text:00003B40 ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ proc near
.text:00003B40                                         ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+13Dp
.text:00003B40                                         ; NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+215p ...
.text:00003B40
.text:00003B40 var_4           = dword ptr -4
.text:00003B40
.text:00003B40                 push    ebp
.text:00003B41                 mov     ebp, esp
.text:00003B43                 push    ecx
.text:00003B44                 push    esi
.text:00003B45                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003B4C                 mov     [ebp+var_4], ecx
.text:00003B4F                 mov     eax, [ebp+var_4]
.text:00003B52                 cmp     dword ptr [eax], 0
.text:00003B55                 jz      short loc_3B72
.text:00003B57                 mov     ecx, [ebp+var_4]
.text:00003B5A                 mov     edx, [ecx]
.text:00003B5C                 mov     eax, [ebp+var_4]
.text:00003B5F                 mov     ecx, [eax]
.text:00003B61                 mov     edx, [edx]
.text:00003B63                 mov     esi, esp
.text:00003B65                 push    ecx
.text:00003B66                 mov     eax, [edx+8]
.text:00003B69                 call    eax
.text:00003B6B                 cmp     esi, esp
.text:00003B6D                 call    __RTC_CheckEsp
.text:00003B72
.text:00003B72 loc_3B72:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)+15j
.text:00003B72                 pop     esi
.text:00003B73                 add     esp, 4
.text:00003B76                 cmp     ebp, esp
.text:00003B78                 call    __RTC_CheckEsp
.text:00003B7D                 mov     esp, ebp
.text:00003B7F                 pop     ebp
.text:00003B80                 retn
.text:00003B80 ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ endp
.text:00003B80
.text:00003B80 ; ---------------------------------------------------------------------------
.text:00003B81                 align 4
.text:00003B81 _text           ends
.text:00003B81
.text:00003B84 ; ===========================================================================
.text:00003B84
.text:00003B84 ; Segment type: Pure code
.text:00003B84 ; Segment permissions: Read/Execute
.text:00003B84 _text           segment para public 'CODE' use32
.text:00003B84                 assume cs:_text
.text:00003B84                 ;org 3B84h
.text:00003B84 ; COMDAT (pick any)
.text:00003B84                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003B84
.text:00003B84 ; =============== S U B R O U T I N E =======================================
.text:00003B84
.text:00003B84 ; Attributes: bp-based frame
.text:00003B84
.text:00003B84 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::operator struct ISequentialInStream *(void)const
.text:00003B84                 public ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ
.text:00003B84 ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ proc near
.text:00003B84                                         ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+894p
.text:00003B84                                         ; NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+C87p
.text:00003B84
.text:00003B84 var_4           = dword ptr -4
.text:00003B84
.text:00003B84                 push    ebp
.text:00003B85                 mov     ebp, esp
.text:00003B87                 push    ecx
.text:00003B88                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003B8F                 mov     [ebp+var_4], ecx
.text:00003B92                 mov     eax, [ebp+var_4]
.text:00003B95                 mov     eax, [eax]
.text:00003B97                 mov     esp, ebp
.text:00003B99                 pop     ebp
.text:00003B9A                 retn
.text:00003B9A ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ endp
.text:00003B9A
.text:00003B9A ; ---------------------------------------------------------------------------
.text:00003B9B                 align 4
.text:00003B9B _text           ends
.text:00003B9B
.text:00003B9C ; ===========================================================================
.text:00003B9C
.text:00003B9C ; Segment type: Pure code
.text:00003B9C ; Segment permissions: Read/Execute
.text:00003B9C _text           segment para public 'CODE' use32
.text:00003B9C                 assume cs:_text
.text:00003B9C                 ;org 3B9Ch
.text:00003B9C ; COMDAT (pick any)
.text:00003B9C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003B9C
.text:00003B9C ; =============== S U B R O U T I N E =======================================
.text:00003B9C
.text:00003B9C ; Attributes: bp-based frame
.text:00003B9C
.text:00003B9C ; public: struct ISequentialInStream * __thiscall CMyComPtr<struct ISequentialInStream>::operator=(struct ISequentialInStream *)
.text:00003B9C                 public ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z
.text:00003B9C ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z proc near
.text:00003B9C                                         ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+FDp
.text:00003B9C
.text:00003B9C var_4           = dword ptr -4
.text:00003B9C arg_0           = dword ptr  8
.text:00003B9C
.text:00003B9C                 push    ebp
.text:00003B9D                 mov     ebp, esp
.text:00003B9F                 push    ecx
.text:00003BA0                 push    esi
.text:00003BA1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003BA8                 mov     [ebp+var_4], ecx
.text:00003BAB                 cmp     [ebp+arg_0], 0
.text:00003BAF                 jz      short loc_3BC8
.text:00003BB1                 mov     eax, [ebp+arg_0]
.text:00003BB4                 mov     ecx, [eax]
.text:00003BB6                 mov     esi, esp
.text:00003BB8                 mov     edx, [ebp+arg_0]
.text:00003BBB                 push    edx
.text:00003BBC                 mov     eax, [ecx+4]
.text:00003BBF                 call    eax
.text:00003BC1                 cmp     esi, esp
.text:00003BC3                 call    __RTC_CheckEsp
.text:00003BC8
.text:00003BC8 loc_3BC8:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)+13j
.text:00003BC8                 mov     ecx, [ebp+var_4]
.text:00003BCB                 cmp     dword ptr [ecx], 0
.text:00003BCE                 jz      short loc_3BEB
.text:00003BD0                 mov     edx, [ebp+var_4]
.text:00003BD3                 mov     eax, [edx]
.text:00003BD5                 mov     ecx, [ebp+var_4]
.text:00003BD8                 mov     edx, [ecx]
.text:00003BDA                 mov     eax, [eax]
.text:00003BDC                 mov     esi, esp
.text:00003BDE                 push    edx
.text:00003BDF                 mov     ecx, [eax+8]
.text:00003BE2                 call    ecx
.text:00003BE4                 cmp     esi, esp
.text:00003BE6                 call    __RTC_CheckEsp
.text:00003BEB
.text:00003BEB loc_3BEB:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)+32j
.text:00003BEB                 mov     edx, [ebp+var_4]
.text:00003BEE                 mov     eax, [ebp+arg_0]
.text:00003BF1                 mov     [edx], eax
.text:00003BF3                 mov     eax, [ebp+arg_0]
.text:00003BF6                 pop     esi
.text:00003BF7                 add     esp, 4
.text:00003BFA                 cmp     ebp, esp
.text:00003BFC                 call    __RTC_CheckEsp
.text:00003C01                 mov     esp, ebp
.text:00003C03                 pop     ebp
.text:00003C04                 retn    4
.text:00003C04 ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z endp
.text:00003C04
.text:00003C04 ; ---------------------------------------------------------------------------
.text:00003C07                 align 4
.text:00003C07 _text           ends
.text:00003C07
.text:00003C08 ; ===========================================================================
.text:00003C08
.text:00003C08 ; Segment type: Pure code
.text:00003C08 ; Segment permissions: Read/Execute
.text:00003C08 _text           segment para public 'CODE' use32
.text:00003C08                 assume cs:_text
.text:00003C08                 ;org 3C08h
.text:00003C08 ; COMDAT (pick any)
.text:00003C08                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003C08
.text:00003C08 ; =============== S U B R O U T I N E =======================================
.text:00003C08
.text:00003C08 ; Attributes: bp-based frame
.text:00003C08
.text:00003C08 ; public: __thiscall CMyComPtr<struct IInStream>::CMyComPtr<struct IInStream>(void)
.text:00003C08                 public ??0?$CMyComPtr@UIInStream@@@@QAE@XZ
.text:00003C08 ??0?$CMyComPtr@UIInStream@@@@QAE@XZ proc near
.text:00003C08                                         ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+6Ap
.text:00003C08                                         ; CInStreamWithCRC::CInStreamWithCRC(void)+30p
.text:00003C08
.text:00003C08 var_4           = dword ptr -4
.text:00003C08
.text:00003C08                 push    ebp
.text:00003C09                 mov     ebp, esp
.text:00003C0B                 push    ecx
.text:00003C0C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003C13                 mov     [ebp+var_4], ecx
.text:00003C16                 mov     eax, [ebp+var_4]
.text:00003C19                 mov     dword ptr [eax], 0
.text:00003C1F                 mov     eax, [ebp+var_4]
.text:00003C22                 mov     esp, ebp
.text:00003C24                 pop     ebp
.text:00003C25                 retn
.text:00003C25 ??0?$CMyComPtr@UIInStream@@@@QAE@XZ endp
.text:00003C25
.text:00003C25 ; ---------------------------------------------------------------------------
.text:00003C26                 align 4
.text:00003C26 _text           ends
.text:00003C26
.text:00003C28 ; ===========================================================================
.text:00003C28
.text:00003C28 ; Segment type: Pure code
.text:00003C28 ; Segment permissions: Read/Execute
.text:00003C28 _text           segment para public 'CODE' use32
.text:00003C28                 assume cs:_text
.text:00003C28                 ;org 3C28h
.text:00003C28 ; COMDAT (pick any)
.text:00003C28                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003C28
.text:00003C28 ; =============== S U B R O U T I N E =======================================
.text:00003C28
.text:00003C28 ; Attributes: bp-based frame
.text:00003C28
.text:00003C28 ; public: __thiscall CMyComPtr<struct IInStream>::~CMyComPtr<struct IInStream>(void)
.text:00003C28                 public ??1?$CMyComPtr@UIInStream@@@@QAE@XZ
.text:00003C28 ??1?$CMyComPtr@UIInStream@@@@QAE@XZ proc near
.text:00003C28                                         ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+12Ep
.text:00003C28                                         ; NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+154p ...
.text:00003C28
.text:00003C28 var_4           = dword ptr -4
.text:00003C28
.text:00003C28                 push    ebp
.text:00003C29                 mov     ebp, esp
.text:00003C2B                 push    ecx
.text:00003C2C                 push    esi
.text:00003C2D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003C34                 mov     [ebp+var_4], ecx
.text:00003C37                 mov     eax, [ebp+var_4]
.text:00003C3A                 cmp     dword ptr [eax], 0
.text:00003C3D                 jz      short loc_3C5A
.text:00003C3F                 mov     ecx, [ebp+var_4]
.text:00003C42                 mov     edx, [ecx]
.text:00003C44                 mov     eax, [ebp+var_4]
.text:00003C47                 mov     ecx, [eax]
.text:00003C49                 mov     edx, [edx]
.text:00003C4B                 mov     esi, esp
.text:00003C4D                 push    ecx
.text:00003C4E                 mov     eax, [edx+8]
.text:00003C51                 call    eax
.text:00003C53                 cmp     esi, esp
.text:00003C55                 call    __RTC_CheckEsp
.text:00003C5A
.text:00003C5A loc_3C5A:                               ; CODE XREF: CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)+15j
.text:00003C5A                 pop     esi
.text:00003C5B                 add     esp, 4
.text:00003C5E                 cmp     ebp, esp
.text:00003C60                 call    __RTC_CheckEsp
.text:00003C65                 mov     esp, ebp
.text:00003C67                 pop     ebp
.text:00003C68                 retn
.text:00003C68 ??1?$CMyComPtr@UIInStream@@@@QAE@XZ endp
.text:00003C68
.text:00003C68 ; ---------------------------------------------------------------------------
.text:00003C69                 align 4
.text:00003C69 _text           ends
.text:00003C69
.text:00003C6C ; ===========================================================================
.text:00003C6C
.text:00003C6C ; Segment type: Pure code
.text:00003C6C ; Segment permissions: Read/Execute
.text:00003C6C _text           segment para public 'CODE' use32
.text:00003C6C                 assume cs:_text
.text:00003C6C                 ;org 3C6Ch
.text:00003C6C ; COMDAT (pick any)
.text:00003C6C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003C6C
.text:00003C6C ; =============== S U B R O U T I N E =======================================
.text:00003C6C
.text:00003C6C ; Attributes: bp-based frame
.text:00003C6C
.text:00003C6C ; public: __thiscall CMyComPtr<struct IInStream>::operator struct IInStream *(void)const
.text:00003C6C                 public ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
.text:00003C6C ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ proc near
.text:00003C6C                                         ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+9Ap
.text:00003C6C                                         ; NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+105p
.text:00003C6C
.text:00003C6C var_4           = dword ptr -4
.text:00003C6C
.text:00003C6C                 push    ebp
.text:00003C6D                 mov     ebp, esp
.text:00003C6F                 push    ecx
.text:00003C70                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003C77                 mov     [ebp+var_4], ecx
.text:00003C7A                 mov     eax, [ebp+var_4]
.text:00003C7D                 mov     eax, [eax]
.text:00003C7F                 mov     esp, ebp
.text:00003C81                 pop     ebp
.text:00003C82                 retn
.text:00003C82 ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ endp
.text:00003C82
.text:00003C82 ; ---------------------------------------------------------------------------
.text:00003C83                 align 4
.text:00003C83 _text           ends
.text:00003C83
.text:00003C84 ; ===========================================================================
.text:00003C84
.text:00003C84 ; Segment type: Pure code
.text:00003C84 ; Segment permissions: Read/Execute
.text:00003C84 _text           segment para public 'CODE' use32
.text:00003C84                 assume cs:_text
.text:00003C84                 ;org 3C84h
.text:00003C84 ; COMDAT (pick any)
.text:00003C84                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003C84
.text:00003C84 ; =============== S U B R O U T I N E =======================================
.text:00003C84
.text:00003C84 ; Attributes: bp-based frame
.text:00003C84
.text:00003C84 ; public: struct IInStream * * __thiscall CMyComPtr<struct IInStream>::operator&(void)
.text:00003C84                 public ??I?$CMyComPtr@UIInStream@@@@QAEPAPAUIInStream@@XZ
.text:00003C84 ??I?$CMyComPtr@UIInStream@@@@QAEPAPAUIInStream@@XZ proc near
.text:00003C84                                         ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+76p
.text:00003C84
.text:00003C84 var_4           = dword ptr -4
.text:00003C84
.text:00003C84                 push    ebp
.text:00003C85                 mov     ebp, esp
.text:00003C87                 push    ecx
.text:00003C88                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003C8F                 mov     [ebp+var_4], ecx
.text:00003C92                 mov     eax, [ebp+var_4]
.text:00003C95                 mov     esp, ebp
.text:00003C97                 pop     ebp
.text:00003C98                 retn
.text:00003C98 ??I?$CMyComPtr@UIInStream@@@@QAEPAPAUIInStream@@XZ endp
.text:00003C98
.text:00003C98 ; ---------------------------------------------------------------------------
.text:00003C99                 align 4
.text:00003C99 _text           ends
.text:00003C99
.text:00003C9C ; ===========================================================================
.text:00003C9C
.text:00003C9C ; Segment type: Pure code
.text:00003C9C ; Segment permissions: Read/Execute
.text:00003C9C _text           segment para public 'CODE' use32
.text:00003C9C                 assume cs:_text
.text:00003C9C                 ;org 3C9Ch
.text:00003C9C ; COMDAT (pick any)
.text:00003C9C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003C9C
.text:00003C9C ; =============== S U B R O U T I N E =======================================
.text:00003C9C
.text:00003C9C ; Attributes: bp-based frame
.text:00003C9C
.text:00003C9C ; public: struct IInStream * __thiscall CMyComPtr<struct IInStream>::operator=(struct IInStream *)
.text:00003C9C                 public ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z
.text:00003C9C ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z proc near
.text:00003C9C                                         ; CODE XREF: CInStreamWithCRC::SetStream(IInStream *)+18p
.text:00003C9C
.text:00003C9C var_4           = dword ptr -4
.text:00003C9C arg_0           = dword ptr  8
.text:00003C9C
.text:00003C9C                 push    ebp
.text:00003C9D                 mov     ebp, esp
.text:00003C9F                 push    ecx
.text:00003CA0                 push    esi
.text:00003CA1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003CA8                 mov     [ebp+var_4], ecx
.text:00003CAB                 cmp     [ebp+arg_0], 0
.text:00003CAF                 jz      short loc_3CC8
.text:00003CB1                 mov     eax, [ebp+arg_0]
.text:00003CB4                 mov     ecx, [eax]
.text:00003CB6                 mov     esi, esp
.text:00003CB8                 mov     edx, [ebp+arg_0]
.text:00003CBB                 push    edx
.text:00003CBC                 mov     eax, [ecx+4]
.text:00003CBF                 call    eax
.text:00003CC1                 cmp     esi, esp
.text:00003CC3                 call    __RTC_CheckEsp
.text:00003CC8
.text:00003CC8 loc_3CC8:                               ; CODE XREF: CMyComPtr<IInStream>::operator=(IInStream *)+13j
.text:00003CC8                 mov     ecx, [ebp+var_4]
.text:00003CCB                 cmp     dword ptr [ecx], 0
.text:00003CCE                 jz      short loc_3CEB
.text:00003CD0                 mov     edx, [ebp+var_4]
.text:00003CD3                 mov     eax, [edx]
.text:00003CD5                 mov     ecx, [ebp+var_4]
.text:00003CD8                 mov     edx, [ecx]
.text:00003CDA                 mov     eax, [eax]
.text:00003CDC                 mov     esi, esp
.text:00003CDE                 push    edx
.text:00003CDF                 mov     ecx, [eax+8]
.text:00003CE2                 call    ecx
.text:00003CE4                 cmp     esi, esp
.text:00003CE6                 call    __RTC_CheckEsp
.text:00003CEB
.text:00003CEB loc_3CEB:                               ; CODE XREF: CMyComPtr<IInStream>::operator=(IInStream *)+32j
.text:00003CEB                 mov     edx, [ebp+var_4]
.text:00003CEE                 mov     eax, [ebp+arg_0]
.text:00003CF1                 mov     [edx], eax
.text:00003CF3                 mov     eax, [ebp+arg_0]
.text:00003CF6                 pop     esi
.text:00003CF7                 add     esp, 4
.text:00003CFA                 cmp     ebp, esp
.text:00003CFC                 call    __RTC_CheckEsp
.text:00003D01                 mov     esp, ebp
.text:00003D03                 pop     ebp
.text:00003D04                 retn    4
.text:00003D04 ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z endp
.text:00003D04
.text:00003D04 ; ---------------------------------------------------------------------------
.text:00003D07                 align 4
.text:00003D07 _text           ends
.text:00003D07
.text:00003D08 ; ===========================================================================
.text:00003D08
.text:00003D08 ; Segment type: Pure code
.text:00003D08 ; Segment permissions: Read/Execute
.text:00003D08 _text           segment para public 'CODE' use32
.text:00003D08                 assume cs:_text
.text:00003D08                 ;org 3D08h
.text:00003D08 ; COMDAT (pick any)
.text:00003D08                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003D08
.text:00003D08 ; =============== S U B R O U T I N E =======================================
.text:00003D08
.text:00003D08 ; Attributes: bp-based frame
.text:00003D08
.text:00003D08 ; public: __thiscall CMyComPtr<struct ICompressSetCoderProperties>::CMyComPtr<struct ICompressSetCoderProperties>(void)
.text:00003D08                 public ??0?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ
.text:00003D08 ??0?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ proc near
.text:00003D08                                         ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+B2Dp
.text:00003D08
.text:00003D08 var_4           = dword ptr -4
.text:00003D08
.text:00003D08                 push    ebp
.text:00003D09                 mov     ebp, esp
.text:00003D0B                 push    ecx
.text:00003D0C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003D13                 mov     [ebp+var_4], ecx
.text:00003D16                 mov     eax, [ebp+var_4]
.text:00003D19                 mov     dword ptr [eax], 0
.text:00003D1F                 mov     eax, [ebp+var_4]
.text:00003D22                 mov     esp, ebp
.text:00003D24                 pop     ebp
.text:00003D25                 retn
.text:00003D25 ??0?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ endp
.text:00003D25
.text:00003D25 ; ---------------------------------------------------------------------------
.text:00003D26                 align 4
.text:00003D26 _text           ends
.text:00003D26
.text:00003D28 ; ===========================================================================
.text:00003D28
.text:00003D28 ; Segment type: Pure code
.text:00003D28 ; Segment permissions: Read/Execute
.text:00003D28 _text           segment para public 'CODE' use32
.text:00003D28                 assume cs:_text
.text:00003D28                 ;org 3D28h
.text:00003D28 ; COMDAT (pick any)
.text:00003D28                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003D28
.text:00003D28 ; =============== S U B R O U T I N E =======================================
.text:00003D28
.text:00003D28 ; Attributes: bp-based frame
.text:00003D28
.text:00003D28 ; public: __thiscall CMyComPtr<struct ICompressSetCoderProperties>::~CMyComPtr<struct ICompressSetCoderProperties>(void)
.text:00003D28                 public ??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ
.text:00003D28 ??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ proc near
.text:00003D28                                         ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+BC8p
.text:00003D28                                         ; NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+BFDp ...
.text:00003D28
.text:00003D28 var_4           = dword ptr -4
.text:00003D28
.text:00003D28                 push    ebp
.text:00003D29                 mov     ebp, esp
.text:00003D2B                 push    ecx
.text:00003D2C                 push    esi
.text:00003D2D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003D34                 mov     [ebp+var_4], ecx
.text:00003D37                 mov     eax, [ebp+var_4]
.text:00003D3A                 cmp     dword ptr [eax], 0
.text:00003D3D                 jz      short loc_3D5A
.text:00003D3F                 mov     ecx, [ebp+var_4]
.text:00003D42                 mov     edx, [ecx]
.text:00003D44                 mov     eax, [ebp+var_4]
.text:00003D47                 mov     ecx, [eax]
.text:00003D49                 mov     edx, [edx]
.text:00003D4B                 mov     esi, esp
.text:00003D4D                 push    ecx
.text:00003D4E                 mov     eax, [edx+8]
.text:00003D51                 call    eax
.text:00003D53                 cmp     esi, esp
.text:00003D55                 call    __RTC_CheckEsp
.text:00003D5A
.text:00003D5A loc_3D5A:                               ; CODE XREF: CMyComPtr<ICompressSetCoderProperties>::~CMyComPtr<ICompressSetCoderProperties>(void)+15j
.text:00003D5A                 pop     esi
.text:00003D5B                 add     esp, 4
.text:00003D5E                 cmp     ebp, esp
.text:00003D60                 call    __RTC_CheckEsp
.text:00003D65                 mov     esp, ebp
.text:00003D67                 pop     ebp
.text:00003D68                 retn
.text:00003D68 ??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ endp
.text:00003D68
.text:00003D68 ; ---------------------------------------------------------------------------
.text:00003D69                 align 4
.text:00003D69 _text           ends
.text:00003D69
.text:00003D6C ; ===========================================================================
.text:00003D6C
.text:00003D6C ; Segment type: Pure code
.text:00003D6C ; Segment permissions: Read/Execute
.text:00003D6C _text           segment para public 'CODE' use32
.text:00003D6C                 assume cs:_text
.text:00003D6C                 ;org 3D6Ch
.text:00003D6C ; COMDAT (pick any)
.text:00003D6C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003D6C
.text:00003D6C ; =============== S U B R O U T I N E =======================================
.text:00003D6C
.text:00003D6C ; Attributes: bp-based frame
.text:00003D6C
.text:00003D6C ; public: __thiscall CMyComPtr<struct ICompressSetCoderProperties>::operator struct ICompressSetCoderProperties *(void)const
.text:00003D6C                 public ??B?$CMyComPtr@UICompressSetCoderProperties@@@@QBEPAUICompressSetCoderProperties@@XZ
.text:00003D6C ??B?$CMyComPtr@UICompressSetCoderProperties@@@@QBEPAUICompressSetCoderProperties@@XZ proc near
.text:00003D6C                                         ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+B58p
.text:00003D6C                                         ; NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+B95p
.text:00003D6C
.text:00003D6C var_4           = dword ptr -4
.text:00003D6C
.text:00003D6C                 push    ebp
.text:00003D6D                 mov     ebp, esp
.text:00003D6F                 push    ecx
.text:00003D70                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003D77                 mov     [ebp+var_4], ecx
.text:00003D7A                 mov     eax, [ebp+var_4]
.text:00003D7D                 mov     eax, [eax]
.text:00003D7F                 mov     esp, ebp
.text:00003D81                 pop     ebp
.text:00003D82                 retn
.text:00003D82 ??B?$CMyComPtr@UICompressSetCoderProperties@@@@QBEPAUICompressSetCoderProperties@@XZ endp
.text:00003D82
.text:00003D82 ; ---------------------------------------------------------------------------
.text:00003D83                 align 4
.text:00003D83 _text           ends
.text:00003D83
.text:00003D84 ; ===========================================================================
.text:00003D84
.text:00003D84 ; Segment type: Pure code
.text:00003D84 ; Segment permissions: Read/Execute
.text:00003D84 _text           segment para public 'CODE' use32
.text:00003D84                 assume cs:_text
.text:00003D84                 ;org 3D84h
.text:00003D84 ; COMDAT (pick any)
.text:00003D84                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003D84
.text:00003D84 ; =============== S U B R O U T I N E =======================================
.text:00003D84
.text:00003D84 ; Attributes: bp-based frame
.text:00003D84
.text:00003D84 ; public: struct ICompressSetCoderProperties * * __thiscall CMyComPtr<struct ICompressSetCoderProperties>::operator&(void)
.text:00003D84                 public ??I?$CMyComPtr@UICompressSetCoderProperties@@@@QAEPAPAUICompressSetCoderProperties@@XZ
.text:00003D84 ??I?$CMyComPtr@UICompressSetCoderProperties@@@@QAEPAPAUICompressSetCoderProperties@@XZ proc near
.text:00003D84                                         ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+B3Cp
.text:00003D84
.text:00003D84 var_4           = dword ptr -4
.text:00003D84
.text:00003D84                 push    ebp
.text:00003D85                 mov     ebp, esp
.text:00003D87                 push    ecx
.text:00003D88                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003D8F                 mov     [ebp+var_4], ecx
.text:00003D92                 mov     eax, [ebp+var_4]
.text:00003D95                 mov     esp, ebp
.text:00003D97                 pop     ebp
.text:00003D98                 retn
.text:00003D98 ??I?$CMyComPtr@UICompressSetCoderProperties@@@@QAEPAPAUICompressSetCoderProperties@@XZ endp
.text:00003D98
.text:00003D98 ; ---------------------------------------------------------------------------
.text:00003D99                 align 4
.text:00003D99 _text           ends
.text:00003D99
.text:00003D9C ; ===========================================================================
.text:00003D9C
.text:00003D9C ; Segment type: Pure code
.text:00003D9C ; Segment permissions: Read/Execute
.text:00003D9C _text           segment para public 'CODE' use32
.text:00003D9C                 assume cs:_text
.text:00003D9C                 ;org 3D9Ch
.text:00003D9C ; COMDAT (pick any)
.text:00003D9C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003D9C
.text:00003D9C ; =============== S U B R O U T I N E =======================================
.text:00003D9C
.text:00003D9C ; Attributes: bp-based frame
.text:00003D9C
.text:00003D9C ; public: struct ICompressFilter * __thiscall CMyComPtr<struct ICompressFilter>::operator=(struct ICompressFilter *)
.text:00003D9C                 public ??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@PAU1@@Z
.text:00003D9C ??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@PAU1@@Z proc near
.text:00003D9C                                         ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+436p
.text:00003D9C                                         ; NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+590p
.text:00003D9C
.text:00003D9C var_4           = dword ptr -4
.text:00003D9C arg_0           = dword ptr  8
.text:00003D9C
.text:00003D9C                 push    ebp
.text:00003D9D                 mov     ebp, esp
.text:00003D9F                 push    ecx
.text:00003DA0                 push    esi
.text:00003DA1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003DA8                 mov     [ebp+var_4], ecx
.text:00003DAB                 cmp     [ebp+arg_0], 0
.text:00003DAF                 jz      short loc_3DC8
.text:00003DB1                 mov     eax, [ebp+arg_0]
.text:00003DB4                 mov     ecx, [eax]
.text:00003DB6                 mov     esi, esp
.text:00003DB8                 mov     edx, [ebp+arg_0]
.text:00003DBB                 push    edx
.text:00003DBC                 mov     eax, [ecx+4]
.text:00003DBF                 call    eax
.text:00003DC1                 cmp     esi, esp
.text:00003DC3                 call    __RTC_CheckEsp
.text:00003DC8
.text:00003DC8 loc_3DC8:                               ; CODE XREF: CMyComPtr<ICompressFilter>::operator=(ICompressFilter *)+13j
.text:00003DC8                 mov     ecx, [ebp+var_4]
.text:00003DCB                 cmp     dword ptr [ecx], 0
.text:00003DCE                 jz      short loc_3DEB
.text:00003DD0                 mov     edx, [ebp+var_4]
.text:00003DD3                 mov     eax, [edx]
.text:00003DD5                 mov     ecx, [ebp+var_4]
.text:00003DD8                 mov     edx, [ecx]
.text:00003DDA                 mov     eax, [eax]
.text:00003DDC                 mov     esi, esp
.text:00003DDE                 push    edx
.text:00003DDF                 mov     ecx, [eax+8]
.text:00003DE2                 call    ecx
.text:00003DE4                 cmp     esi, esp
.text:00003DE6                 call    __RTC_CheckEsp
.text:00003DEB
.text:00003DEB loc_3DEB:                               ; CODE XREF: CMyComPtr<ICompressFilter>::operator=(ICompressFilter *)+32j
.text:00003DEB                 mov     edx, [ebp+var_4]
.text:00003DEE                 mov     eax, [ebp+arg_0]
.text:00003DF1                 mov     [edx], eax
.text:00003DF3                 mov     eax, [ebp+arg_0]
.text:00003DF6                 pop     esi
.text:00003DF7                 add     esp, 4
.text:00003DFA                 cmp     ebp, esp
.text:00003DFC                 call    __RTC_CheckEsp
.text:00003E01                 mov     esp, ebp
.text:00003E03                 pop     ebp
.text:00003E04                 retn    4
.text:00003E04 ??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@PAU1@@Z endp
.text:00003E04
.text:00003E04 ; ---------------------------------------------------------------------------
.text:00003E07                 align 4
.text:00003E07 _text           ends
.text:00003E07
.text:00003E08 ; ===========================================================================
.text:00003E08
.text:00003E08 ; Segment type: Pure code
.text:00003E08 ; Segment permissions: Read/Execute
.text:00003E08 _text           segment para public 'CODE' use32
.text:00003E08                 assume cs:_text
.text:00003E08                 ;org 3E08h
.text:00003E08 ; COMDAT (pick any)
.text:00003E08                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003E08
.text:00003E08 ; =============== S U B R O U T I N E =======================================
.text:00003E08
.text:00003E08 ; Attributes: bp-based frame
.text:00003E08
.text:00003E08 ; public: bool __thiscall CMyComPtr<struct ICompressFilter>::operator!(void)const
.text:00003E08                 public ??7?$CMyComPtr@UICompressFilter@@@@QBE_NXZ
.text:00003E08 ??7?$CMyComPtr@UICompressFilter@@@@QBE_NXZ proc near
.text:00003E08                                         ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+3BAp
.text:00003E08                                         ; NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+517p
.text:00003E08
.text:00003E08 var_4           = dword ptr -4
.text:00003E08
.text:00003E08                 push    ebp
.text:00003E09                 mov     ebp, esp
.text:00003E0B                 push    ecx
.text:00003E0C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003E13                 mov     [ebp+var_4], ecx
.text:00003E16                 mov     eax, [ebp+var_4]
.text:00003E19                 xor     ecx, ecx
.text:00003E1B                 cmp     dword ptr [eax], 0
.text:00003E1E                 setz    cl
.text:00003E21                 mov     al, cl
.text:00003E23                 mov     esp, ebp
.text:00003E25                 pop     ebp
.text:00003E26                 retn
.text:00003E26 ??7?$CMyComPtr@UICompressFilter@@@@QBE_NXZ endp
.text:00003E26
.text:00003E26 ; ---------------------------------------------------------------------------
.text:00003E27                 align 4
.text:00003E27 _text           ends
.text:00003E27
.text:00003E28 ; ===========================================================================
.text:00003E28
.text:00003E28 ; Segment type: Pure code
.text:00003E28 ; Segment permissions: Read/Execute
.text:00003E28 _text           segment para public 'CODE' use32
.text:00003E28                 assume cs:_text
.text:00003E28                 ;org 3E28h
.text:00003E28 ; COMDAT (pick any)
.text:00003E28                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003E28
.text:00003E28 ; =============== S U B R O U T I N E =======================================
.text:00003E28
.text:00003E28 ; Attributes: bp-based frame
.text:00003E28
.text:00003E28 ; public: __thiscall CObjectVector<struct CProp>::CObjectVector<struct CProp>(class CObjectVector<struct CProp> const &)
.text:00003E28                 public ??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z
.text:00003E28 ??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z proc near
.text:00003E28                                         ; CODE XREF: CProps::CProps(CProps const &)+15p
.text:00003E28
.text:00003E28 var_24          = dword ptr -24h
.text:00003E28 var_20          = dword ptr -20h
.text:00003E28 var_1C          = dword ptr -1Ch
.text:00003E28 var_18          = dword ptr -18h
.text:00003E28 var_14          = dword ptr -14h
.text:00003E28 var_10          = dword ptr -10h
.text:00003E28 var_C           = dword ptr -0Ch
.text:00003E28 var_4           = dword ptr -4
.text:00003E28 arg_0           = dword ptr  8
.text:00003E28
.text:00003E28                 push    ebp
.text:00003E29                 mov     ebp, esp
.text:00003E2B                 push    0FFFFFFFFh
.text:00003E2D                 push    offset __ehhandler$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z
.text:00003E32                 mov     eax, large fs:0
.text:00003E38                 push    eax
.text:00003E39                 sub     esp, 18h
.text:00003E3C                 mov     eax, 0CCCCCCCCh
.text:00003E41                 mov     [ebp+var_24], eax
.text:00003E44                 mov     [ebp+var_20], eax
.text:00003E47                 mov     [ebp+var_1C], eax
.text:00003E4A                 mov     [ebp+var_18], eax
.text:00003E4D                 mov     [ebp+var_14], eax
.text:00003E50                 mov     [ebp+var_10], eax
.text:00003E53                 mov     eax, dword ptr ds:___security_cookie
.text:00003E58                 xor     eax, ebp
.text:00003E5A                 push    eax
.text:00003E5B                 lea     eax, [ebp+var_C]
.text:00003E5E                 mov     large fs:0, eax
.text:00003E64                 mov     [ebp+var_10], ecx
.text:00003E67                 mov     ecx, [ebp+var_10]
.text:00003E6A                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:00003E6F                 mov     [ebp+var_4], 0
.text:00003E76                 mov     ecx, [ebp+arg_0]
.text:00003E79                 call    ?Size@?$CObjectVector@UCProp@@@@QBEIXZ ; CObjectVector<CProp>::Size(void)
.text:00003E7E                 mov     [ebp+var_14], eax
.text:00003E81                 mov     eax, [ebp+var_14]
.text:00003E84                 push    eax
.text:00003E85                 mov     ecx, [ebp+var_10]
.text:00003E88                 call    ?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z ; CRecordVector<void *>::ConstructReserve(uint)
.text:00003E8D                 mov     [ebp+var_18], 0
.text:00003E94                 jmp     short loc_3E9F
.text:00003E96 ; ---------------------------------------------------------------------------
.text:00003E96
.text:00003E96 loc_3E96:                               ; CODE XREF: CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+CDj
.text:00003E96                 mov     ecx, [ebp+var_18]
.text:00003E99                 add     ecx, 1
.text:00003E9C                 mov     [ebp+var_18], ecx
.text:00003E9F
.text:00003E9F loc_3E9F:                               ; CODE XREF: CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+6Cj
.text:00003E9F                 mov     edx, [ebp+var_18]
.text:00003EA2                 cmp     edx, [ebp+var_14]
.text:00003EA5                 jnb     short loc_3EF7
.text:00003EA7                 push    18h             ; unsigned int
.text:00003EA9                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00003EAE                 add     esp, 4
.text:00003EB1                 mov     [ebp+var_20], eax
.text:00003EB4                 mov     byte ptr [ebp+var_4], 1
.text:00003EB8                 cmp     [ebp+var_20], 0
.text:00003EBC                 jz      short loc_3ED8
.text:00003EBE                 mov     eax, [ebp+var_18]
.text:00003EC1                 push    eax
.text:00003EC2                 mov     ecx, [ebp+arg_0]
.text:00003EC5                 call    ??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ; CObjectVector<CProp>::operator[](uint)
.text:00003ECA                 push    eax             ; struct CProp *
.text:00003ECB                 mov     ecx, [ebp+var_20] ; this
.text:00003ECE                 call    ??0CProp@@QAE@ABU0@@Z ; CProp::CProp(CProp const &)
.text:00003ED3                 mov     [ebp+var_24], eax
.text:00003ED6                 jmp     short loc_3EDF
.text:00003ED8 ; ---------------------------------------------------------------------------
.text:00003ED8
.text:00003ED8 loc_3ED8:                               ; CODE XREF: CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+94j
.text:00003ED8                 mov     [ebp+var_24], 0
.text:00003EDF
.text:00003EDF loc_3EDF:                               ; CODE XREF: CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+AEj
.text:00003EDF                 mov     ecx, [ebp+var_24]
.text:00003EE2                 mov     [ebp+var_1C], ecx
.text:00003EE5                 mov     byte ptr [ebp+var_4], 0
.text:00003EE9                 mov     edx, [ebp+var_1C]
.text:00003EEC                 push    edx
.text:00003EED                 mov     ecx, [ebp+var_10]
.text:00003EF0                 call    ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ; CRecordVector<void *>::AddInReserved(void * const)
.text:00003EF5                 jmp     short loc_3E96
.text:00003EF7 ; ---------------------------------------------------------------------------
.text:00003EF7
.text:00003EF7 loc_3EF7:                               ; CODE XREF: CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+7Dj
.text:00003EF7                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003EFE                 mov     eax, [ebp+var_10]
.text:00003F01                 mov     ecx, [ebp+var_C]
.text:00003F04                 mov     large fs:0, ecx
.text:00003F0B                 pop     ecx
.text:00003F0C                 add     esp, 24h
.text:00003F0F                 cmp     ebp, esp
.text:00003F11                 call    __RTC_CheckEsp
.text:00003F16                 mov     esp, ebp
.text:00003F18                 pop     ebp
.text:00003F19                 retn    4
.text:00003F19 ??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z endp
.text:00003F19
.text:00003F19 _text           ends
.text:00003F19
.text$x:00003F1C ; ===========================================================================
.text$x:00003F1C
.text$x:00003F1C ; Segment type: Pure code
.text$x:00003F1C ; Segment permissions: Read/Execute
.text$x:00003F1C _text$x         segment para public 'CODE' use32
.text$x:00003F1C                 assume cs:_text$x
.text$x:00003F1C                 ;org 3F1Ch
.text$x:00003F1C ; COMDAT (pick associative to section at 3E28)
.text$x:00003F1C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00003F1C
.text$x:00003F1C ; =============== S U B R O U T I N E =======================================
.text$x:00003F1C
.text$x:00003F1C
.text$x:00003F1C __unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$0 proc near
.text$x:00003F1C                                         ; DATA XREF: .xdata$x:00003F50o
.text$x:00003F1C                 mov     ecx, [ebp-10h]
.text$x:00003F1F                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:00003F1F __unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$0 endp
.text$x:00003F1F
.text$x:00003F24
.text$x:00003F24 ; =============== S U B R O U T I N E =======================================
.text$x:00003F24
.text$x:00003F24
.text$x:00003F24 __unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$1 proc near
.text$x:00003F24                                         ; DATA XREF: .xdata$x:00003F58o
.text$x:00003F24                 mov     eax, [ebp-20h]
.text$x:00003F27                 push    eax             ; void *
.text$x:00003F28                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00003F2D                 pop     ecx
.text$x:00003F2E                 retn
.text$x:00003F2E __unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$1 endp
.text$x:00003F2E
.text$x:00003F2F
.text$x:00003F2F ; =============== S U B R O U T I N E =======================================
.text$x:00003F2F
.text$x:00003F2F
.text$x:00003F2F __ehhandler$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z proc near
.text$x:00003F2F                                         ; DATA XREF: CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+5o
.text$x:00003F2F
.text$x:00003F2F arg_4           = dword ptr  8
.text$x:00003F2F
.text$x:00003F2F                 mov     edx, [esp+arg_4]
.text$x:00003F33                 lea     eax, [edx+0Ch]
.text$x:00003F36                 mov     ecx, [edx-1Ch]
.text$x:00003F39                 xor     ecx, eax
.text$x:00003F3B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003F40                 mov     eax, offset __ehfuncinfo$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z
.text$x:00003F45                 jmp     ___CxxFrameHandler3
.text$x:00003F45 __ehhandler$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z endp
.text$x:00003F45
.text$x:00003F45 ; ---------------------------------------------------------------------------
.text$x:00003F4A                 align 4
.text$x:00003F4A _text$x         ends
.text$x:00003F4A
.xdata$x:00003F4C ; ===========================================================================
.xdata$x:00003F4C
.xdata$x:00003F4C ; Segment type: Pure data
.xdata$x:00003F4C ; Segment permissions: Read
.xdata$x:00003F4C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00003F4C                 assume cs:_xdata$x
.xdata$x:00003F4C                 ;org 3F4Ch
.xdata$x:00003F4C ; COMDAT (pick associative to section at 3E28)
.xdata$x:00003F4C __unwindtable$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z db 0FFh
.xdata$x:00003F4C                                         ; DATA XREF: .xdata$x:00003F64o
.xdata$x:00003F4D                 db 0FFh
.xdata$x:00003F4E                 db 0FFh
.xdata$x:00003F4F                 db 0FFh
.xdata$x:00003F50                 dd offset __unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$0
.xdata$x:00003F54                 align 8
.xdata$x:00003F58                 dd offset __unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$1
.xdata$x:00003F5C __ehfuncinfo$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z db  22h ; "
.xdata$x:00003F5C                                         ; DATA XREF: __ehhandler$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z+11o
.xdata$x:00003F5D                 db    5
.xdata$x:00003F5E                 db  93h ; ô
.xdata$x:00003F5F                 db  19h
.xdata$x:00003F60                 db    2
.xdata$x:00003F61                 db    0
.xdata$x:00003F62                 db    0
.xdata$x:00003F63                 db    0
.xdata$x:00003F64                 dd offset __unwindtable$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z
.xdata$x:00003F68                 db    0
.xdata$x:00003F69                 db    0
.xdata$x:00003F6A                 db    0
.xdata$x:00003F6B                 db    0
.xdata$x:00003F6C                 db    0
.xdata$x:00003F6D                 db    0
.xdata$x:00003F6E                 db    0
.xdata$x:00003F6F                 db    0
.xdata$x:00003F70                 db    0
.xdata$x:00003F71                 db    0
.xdata$x:00003F72                 db    0
.xdata$x:00003F73                 db    0
.xdata$x:00003F74                 db    0
.xdata$x:00003F75                 db    0
.xdata$x:00003F76                 db    0
.xdata$x:00003F77                 db    0
.xdata$x:00003F78                 db    0
.xdata$x:00003F79                 db    0
.xdata$x:00003F7A                 db    0
.xdata$x:00003F7B                 db    0
.xdata$x:00003F7C                 db    1
.xdata$x:00003F7D                 db    0
.xdata$x:00003F7E                 db    0
.xdata$x:00003F7F                 db    0
.xdata$x:00003F7F _xdata$x        ends
.xdata$x:00003F7F
.text:00003F80 ; ===========================================================================
.text:00003F80
.text:00003F80 ; Segment type: Pure code
.text:00003F80 ; Segment permissions: Read/Execute
.text:00003F80 _text           segment para public 'CODE' use32
.text:00003F80                 assume cs:_text
.text:00003F80                 ;org 3F80h
.text:00003F80 ; COMDAT (pick any)
.text:00003F80                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003F80
.text:00003F80 ; =============== S U B R O U T I N E =======================================
.text:00003F80
.text:00003F80 ; Attributes: bp-based frame
.text:00003F80
.text:00003F80 ; public: unsigned int __thiscall CObjectVector<struct CProp>::Size(void)const
.text:00003F80                 public ?Size@?$CObjectVector@UCProp@@@@QBEIXZ
.text:00003F80 ?Size@?$CObjectVector@UCProp@@@@QBEIXZ proc near
.text:00003F80                                         ; CODE XREF: CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+51p
.text:00003F80
.text:00003F80 var_4           = dword ptr -4
.text:00003F80
.text:00003F80                 push    ebp
.text:00003F81                 mov     ebp, esp
.text:00003F83                 push    ecx
.text:00003F84                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003F8B                 mov     [ebp+var_4], ecx
.text:00003F8E                 mov     ecx, [ebp+var_4]
.text:00003F91                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00003F96                 add     esp, 4
.text:00003F99                 cmp     ebp, esp
.text:00003F9B                 call    __RTC_CheckEsp
.text:00003FA0                 mov     esp, ebp
.text:00003FA2                 pop     ebp
.text:00003FA3                 retn
.text:00003FA3 ?Size@?$CObjectVector@UCProp@@@@QBEIXZ endp
.text:00003FA3
.text:00003FA3 _text           ends
.text:00003FA3
.text:00003FA4 ; ===========================================================================
.text:00003FA4
.text:00003FA4 ; Segment type: Pure code
.text:00003FA4 ; Segment permissions: Read/Execute
.text:00003FA4 _text           segment para public 'CODE' use32
.text:00003FA4                 assume cs:_text
.text:00003FA4                 ;org 3FA4h
.text:00003FA4 ; COMDAT (pick any)
.text:00003FA4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003FA4
.text:00003FA4 ; =============== S U B R O U T I N E =======================================
.text:00003FA4
.text:00003FA4 ; Attributes: bp-based frame
.text:00003FA4
.text:00003FA4 ; public: struct CProp const & __thiscall CObjectVector<struct CProp>::operator[](unsigned int)const
.text:00003FA4                 public ??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z
.text:00003FA4 ??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z proc near
.text:00003FA4                                         ; CODE XREF: CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+9Dp
.text:00003FA4
.text:00003FA4 var_4           = dword ptr -4
.text:00003FA4 arg_0           = dword ptr  8
.text:00003FA4
.text:00003FA4                 push    ebp
.text:00003FA5                 mov     ebp, esp
.text:00003FA7                 push    ecx
.text:00003FA8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003FAF                 mov     [ebp+var_4], ecx
.text:00003FB2                 mov     eax, [ebp+arg_0]
.text:00003FB5                 push    eax
.text:00003FB6                 mov     ecx, [ebp+var_4]
.text:00003FB9                 call    ??A?$CRecordVector@PAX@@QBEABQAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00003FBE                 mov     eax, [eax]
.text:00003FC0                 add     esp, 4
.text:00003FC3                 cmp     ebp, esp
.text:00003FC5                 call    __RTC_CheckEsp
.text:00003FCA                 mov     esp, ebp
.text:00003FCC                 pop     ebp
.text:00003FCD                 retn    4
.text:00003FCD ??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z endp
.text:00003FCD
.text:00003FCD _text           ends
.text:00003FCD
.text:00003FD0 ; ===========================================================================
.text:00003FD0
.text:00003FD0 ; Segment type: Pure code
.text:00003FD0 ; Segment permissions: Read/Execute
.text:00003FD0 _text           segment para public 'CODE' use32
.text:00003FD0                 assume cs:_text
.text:00003FD0                 ;org 3FD0h
.text:00003FD0 ; COMDAT (pick any)
.text:00003FD0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003FD0
.text:00003FD0 ; =============== S U B R O U T I N E =======================================
.text:00003FD0
.text:00003FD0 ; Attributes: bp-based frame
.text:00003FD0
.text:00003FD0 ; public: __thiscall CObjectVector<struct CProp>::~CObjectVector<struct CProp>(void)
.text:00003FD0                 public ??1?$CObjectVector@UCProp@@@@QAE@XZ
.text:00003FD0 ??1?$CObjectVector@UCProp@@@@QAE@XZ proc near
.text:00003FD0                                         ; CODE XREF: CProps::~CProps(void)+11p
.text:00003FD0
.text:00003FD0 var_20          = dword ptr -20h
.text:00003FD0 var_1C          = dword ptr -1Ch
.text:00003FD0 var_18          = dword ptr -18h
.text:00003FD0 var_14          = dword ptr -14h
.text:00003FD0 var_10          = dword ptr -10h
.text:00003FD0 var_C           = dword ptr -0Ch
.text:00003FD0 var_4           = dword ptr -4
.text:00003FD0
.text:00003FD0                 push    ebp
.text:00003FD1                 mov     ebp, esp
.text:00003FD3                 push    0FFFFFFFFh
.text:00003FD5                 push    offset __ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ
.text:00003FDA                 mov     eax, large fs:0
.text:00003FE0                 push    eax
.text:00003FE1                 sub     esp, 14h
.text:00003FE4                 mov     eax, 0CCCCCCCCh
.text:00003FE9                 mov     [ebp+var_20], eax
.text:00003FEC                 mov     [ebp+var_1C], eax
.text:00003FEF                 mov     [ebp+var_18], eax
.text:00003FF2                 mov     [ebp+var_14], eax
.text:00003FF5                 mov     [ebp+var_10], eax
.text:00003FF8                 mov     eax, dword ptr ds:___security_cookie
.text:00003FFD                 xor     eax, ebp
.text:00003FFF                 push    eax
.text:00004000                 lea     eax, [ebp+var_C]
.text:00004003                 mov     large fs:0, eax
.text:00004009                 mov     [ebp+var_10], ecx
.text:0000400C                 mov     [ebp+var_4], 0
.text:00004013                 mov     ecx, [ebp+var_10]
.text:00004016                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:0000401B                 mov     [ebp+var_14], eax
.text:0000401E
.text:0000401E loc_401E:                               ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void):loc_4060j
.text:0000401E                 cmp     [ebp+var_14], 0
.text:00004022                 jz      short loc_4062
.text:00004024                 mov     eax, [ebp+var_14]
.text:00004027                 sub     eax, 1
.text:0000402A                 mov     [ebp+var_14], eax
.text:0000402D                 mov     ecx, [ebp+var_14]
.text:00004030                 push    ecx
.text:00004031                 mov     ecx, [ebp+var_10]
.text:00004034                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00004039                 mov     edx, [eax]
.text:0000403B                 mov     [ebp+var_1C], edx
.text:0000403E                 mov     eax, [ebp+var_1C]
.text:00004041                 mov     [ebp+var_18], eax
.text:00004044                 cmp     [ebp+var_18], 0
.text:00004048                 jz      short loc_4059
.text:0000404A                 push    1
.text:0000404C                 mov     ecx, [ebp+var_18]
.text:0000404F                 call    ??_GCProp@@QAEPAXI@Z ; CProp::`scalar deleting destructor'(uint)
.text:00004054                 mov     [ebp+var_20], eax
.text:00004057                 jmp     short loc_4060
.text:00004059 ; ---------------------------------------------------------------------------
.text:00004059
.text:00004059 loc_4059:                               ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+78j
.text:00004059                 mov     [ebp+var_20], 0
.text:00004060
.text:00004060 loc_4060:                               ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+87j
.text:00004060                 jmp     short loc_401E
.text:00004062 ; ---------------------------------------------------------------------------
.text:00004062
.text:00004062 loc_4062:                               ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+52j
.text:00004062                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004069                 mov     ecx, [ebp+var_10]
.text:0000406C                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00004071                 mov     ecx, [ebp+var_C]
.text:00004074                 mov     large fs:0, ecx
.text:0000407B                 pop     ecx
.text:0000407C                 add     esp, 20h
.text:0000407F                 cmp     ebp, esp
.text:00004081                 call    __RTC_CheckEsp
.text:00004086                 mov     esp, ebp
.text:00004088                 pop     ebp
.text:00004089                 retn
.text:00004089 ??1?$CObjectVector@UCProp@@@@QAE@XZ endp
.text:00004089
.text:00004089 ; ---------------------------------------------------------------------------
.text:0000408A                 align 4
.text:0000408A _text           ends
.text:0000408A
.text$x:0000408C ; ===========================================================================
.text$x:0000408C
.text$x:0000408C ; Segment type: Pure code
.text$x:0000408C ; Segment permissions: Read/Execute
.text$x:0000408C _text$x         segment para public 'CODE' use32
.text$x:0000408C                 assume cs:_text$x
.text$x:0000408C                 ;org 408Ch
.text$x:0000408C ; COMDAT (pick associative to section at 3FD0)
.text$x:0000408C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:0000408C
.text$x:0000408C ; =============== S U B R O U T I N E =======================================
.text$x:0000408C
.text$x:0000408C
.text$x:0000408C __unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0 proc near
.text$x:0000408C                                         ; DATA XREF: .xdata$x:000040B4o
.text$x:0000408C                 mov     ecx, [ebp-10h]
.text$x:0000408F                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:0000408F __unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0 endp
.text$x:0000408F
.text$x:00004094
.text$x:00004094 ; =============== S U B R O U T I N E =======================================
.text$x:00004094
.text$x:00004094
.text$x:00004094 __ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ proc near
.text$x:00004094                                         ; DATA XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+5o
.text$x:00004094
.text$x:00004094 arg_4           = dword ptr  8
.text$x:00004094
.text$x:00004094                 mov     edx, [esp+arg_4]
.text$x:00004098                 lea     eax, [edx+0Ch]
.text$x:0000409B                 mov     ecx, [edx-18h]
.text$x:0000409E                 xor     ecx, eax
.text$x:000040A0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000040A5                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@UCProp@@@@QAE@XZ
.text$x:000040AA                 jmp     ___CxxFrameHandler3
.text$x:000040AA __ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ endp
.text$x:000040AA
.text$x:000040AA ; ---------------------------------------------------------------------------
.text$x:000040AF                 align 10h
.text$x:000040AF _text$x         ends
.text$x:000040AF
.xdata$x:000040B0 ; ===========================================================================
.xdata$x:000040B0
.xdata$x:000040B0 ; Segment type: Pure data
.xdata$x:000040B0 ; Segment permissions: Read
.xdata$x:000040B0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000040B0                 assume cs:_xdata$x
.xdata$x:000040B0                 ;org 40B0h
.xdata$x:000040B0 ; COMDAT (pick associative to section at 3FD0)
.xdata$x:000040B0 __unwindtable$??1?$CObjectVector@UCProp@@@@QAE@XZ db 0FFh
.xdata$x:000040B0                                         ; DATA XREF: .xdata$x:000040C0o
.xdata$x:000040B1                 db 0FFh
.xdata$x:000040B2                 db 0FFh
.xdata$x:000040B3                 db 0FFh
.xdata$x:000040B4                 dd offset __unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0
.xdata$x:000040B8 __ehfuncinfo$??1?$CObjectVector@UCProp@@@@QAE@XZ db  22h ; "
.xdata$x:000040B8                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ+11o
.xdata$x:000040B9                 db    5
.xdata$x:000040BA                 db  93h ; ô
.xdata$x:000040BB                 db  19h
.xdata$x:000040BC                 db    1
.xdata$x:000040BD                 db    0
.xdata$x:000040BE                 db    0
.xdata$x:000040BF                 db    0
.xdata$x:000040C0                 dd offset __unwindtable$??1?$CObjectVector@UCProp@@@@QAE@XZ
.xdata$x:000040C4                 db    0
.xdata$x:000040C5                 db    0
.xdata$x:000040C6                 db    0
.xdata$x:000040C7                 db    0
.xdata$x:000040C8                 db    0
.xdata$x:000040C9                 db    0
.xdata$x:000040CA                 db    0
.xdata$x:000040CB                 db    0
.xdata$x:000040CC                 db    0
.xdata$x:000040CD                 db    0
.xdata$x:000040CE                 db    0
.xdata$x:000040CF                 db    0
.xdata$x:000040D0                 db    0
.xdata$x:000040D1                 db    0
.xdata$x:000040D2                 db    0
.xdata$x:000040D3                 db    0
.xdata$x:000040D4                 db    0
.xdata$x:000040D5                 db    0
.xdata$x:000040D6                 db    0
.xdata$x:000040D7                 db    0
.xdata$x:000040D8                 db    1
.xdata$x:000040D9                 db    0
.xdata$x:000040DA                 db    0
.xdata$x:000040DB                 db    0
.xdata$x:000040DB _xdata$x        ends
.xdata$x:000040DB
.text:000040DC ; ===========================================================================
.text:000040DC
.text:000040DC ; Segment type: Pure code
.text:000040DC ; Segment permissions: Read/Execute
.text:000040DC _text           segment para public 'CODE' use32
.text:000040DC                 assume cs:_text
.text:000040DC                 ;org 40DCh
.text:000040DC ; COMDAT (pick any)
.text:000040DC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000040DC
.text:000040DC ; =============== S U B R O U T I N E =======================================
.text:000040DC
.text:000040DC ; Attributes: bp-based frame
.text:000040DC
.text:000040DC ; public: __thiscall CRecordVector<unsigned char>::CRecordVector<unsigned char>(class CRecordVector<unsigned char> const &)
.text:000040DC                 public ??0?$CRecordVector@E@@QAE@ABV0@@Z
.text:000040DC ??0?$CRecordVector@E@@QAE@ABV0@@Z proc near
.text:000040DC                                         ; CODE XREF: NArchive::NZip::CCompressionMethodMode::CCompressionMethodMode(NArchive::NZip::CCompressionMethodMode const &)+4Dp
.text:000040DC
.text:000040DC var_C           = dword ptr -0Ch
.text:000040DC Size            = dword ptr -8
.text:000040DC var_4           = dword ptr -4
.text:000040DC arg_0           = dword ptr  8
.text:000040DC
.text:000040DC                 push    ebp
.text:000040DD                 mov     ebp, esp
.text:000040DF                 sub     esp, 0Ch
.text:000040E2                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000040E9                 mov     [ebp+Size], 0CCCCCCCCh
.text:000040F0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000040F7                 mov     [ebp+var_4], ecx
.text:000040FA                 mov     eax, [ebp+var_4]
.text:000040FD                 mov     dword ptr [eax], 0
.text:00004103                 mov     ecx, [ebp+var_4]
.text:00004106                 mov     dword ptr [ecx+4], 0
.text:0000410D                 mov     edx, [ebp+var_4]
.text:00004110                 mov     dword ptr [edx+8], 0
.text:00004117                 mov     ecx, [ebp+arg_0]
.text:0000411A                 call    ?Size@?$CRecordVector@E@@QBEIXZ ; CRecordVector<uchar>::Size(void)
.text:0000411F                 mov     [ebp+Size], eax
.text:00004122                 cmp     [ebp+Size], 0
.text:00004126                 jz      short loc_4169
.text:00004128                 mov     eax, [ebp+Size]
.text:0000412B                 push    eax             ; unsigned int
.text:0000412C                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00004131                 add     esp, 4
.text:00004134                 mov     [ebp+var_C], eax
.text:00004137                 mov     ecx, [ebp+var_4]
.text:0000413A                 mov     edx, [ebp+var_C]
.text:0000413D                 mov     [ecx], edx
.text:0000413F                 mov     eax, [ebp+var_4]
.text:00004142                 mov     ecx, [ebp+Size]
.text:00004145                 mov     [eax+4], ecx
.text:00004148                 mov     edx, [ebp+var_4]
.text:0000414B                 mov     eax, [ebp+Size]
.text:0000414E                 mov     [edx+8], eax
.text:00004151                 mov     ecx, [ebp+Size]
.text:00004154                 push    ecx             ; Size
.text:00004155                 mov     edx, [ebp+arg_0]
.text:00004158                 mov     eax, [edx]
.text:0000415A                 push    eax             ; Src
.text:0000415B                 mov     ecx, [ebp+var_4]
.text:0000415E                 mov     edx, [ecx]
.text:00004160                 push    edx             ; Dst
.text:00004161                 call    _memcpy
.text:00004166                 add     esp, 0Ch
.text:00004169
.text:00004169 loc_4169:                               ; CODE XREF: CRecordVector<uchar>::CRecordVector<uchar>(CRecordVector<uchar> const &)+4Aj
.text:00004169                 mov     eax, [ebp+var_4]
.text:0000416C                 add     esp, 0Ch
.text:0000416F                 cmp     ebp, esp
.text:00004171                 call    __RTC_CheckEsp
.text:00004176                 mov     esp, ebp
.text:00004178                 pop     ebp
.text:00004179                 retn    4
.text:00004179 ??0?$CRecordVector@E@@QAE@ABV0@@Z endp
.text:00004179
.text:00004179 _text           ends
.text:00004179
.text:0000417C ; ===========================================================================
.text:0000417C
.text:0000417C ; Segment type: Pure code
.text:0000417C ; Segment permissions: Read/Execute
.text:0000417C _text           segment para public 'CODE' use32
.text:0000417C                 assume cs:_text
.text:0000417C                 ;org 417Ch
.text:0000417C ; COMDAT (pick any)
.text:0000417C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000417C
.text:0000417C ; =============== S U B R O U T I N E =======================================
.text:0000417C
.text:0000417C ; Attributes: bp-based frame
.text:0000417C
.text:0000417C ; public: unsigned int __thiscall CRecordVector<unsigned char>::Size(void)const
.text:0000417C                 public ?Size@?$CRecordVector@E@@QBEIXZ
.text:0000417C ?Size@?$CRecordVector@E@@QBEIXZ proc near
.text:0000417C                                         ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+15Fp
.text:0000417C                                         ; CRecordVector<uchar>::CRecordVector<uchar>(CRecordVector<uchar> const &)+3Ep
.text:0000417C
.text:0000417C var_4           = dword ptr -4
.text:0000417C
.text:0000417C                 push    ebp
.text:0000417D                 mov     ebp, esp
.text:0000417F                 push    ecx
.text:00004180                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004187                 mov     [ebp+var_4], ecx
.text:0000418A                 mov     eax, [ebp+var_4]
.text:0000418D                 mov     eax, [eax+4]
.text:00004190                 mov     esp, ebp
.text:00004192                 pop     ebp
.text:00004193                 retn
.text:00004193 ?Size@?$CRecordVector@E@@QBEIXZ endp
.text:00004193
.text:00004193 _text           ends
.text:00004193
.text:00004194 ; ===========================================================================
.text:00004194
.text:00004194 ; Segment type: Pure code
.text:00004194 ; Segment permissions: Read/Execute
.text:00004194 _text           segment para public 'CODE' use32
.text:00004194                 assume cs:_text
.text:00004194                 ;org 4194h
.text:00004194 ; COMDAT (pick any)
.text:00004194                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004194
.text:00004194 ; =============== S U B R O U T I N E =======================================
.text:00004194
.text:00004194 ; Attributes: bp-based frame
.text:00004194
.text:00004194 ; public: __thiscall CRecordVector<unsigned char>::~CRecordVector<unsigned char>(void)
.text:00004194                 public ??1?$CRecordVector@E@@QAE@XZ
.text:00004194 ??1?$CRecordVector@E@@QAE@XZ proc near  ; CODE XREF: __unwindfunclet$??0CCompressionMethodMode@NZip@NArchive@@QAE@ABU012@@Z$1+6j
.text:00004194                                         ; NArchive::NZip::CCompressionMethodMode::~CCompressionMethodMode(void)+49p ...
.text:00004194
.text:00004194 var_8           = dword ptr -8
.text:00004194 var_4           = dword ptr -4
.text:00004194
.text:00004194                 push    ebp
.text:00004195                 mov     ebp, esp
.text:00004197                 sub     esp, 8
.text:0000419A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000041A1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000041A8                 mov     [ebp+var_4], ecx
.text:000041AB                 mov     eax, [ebp+var_4]
.text:000041AE                 mov     ecx, [eax]
.text:000041B0                 mov     [ebp+var_8], ecx
.text:000041B3                 mov     edx, [ebp+var_8]
.text:000041B6                 push    edx             ; void *
.text:000041B7                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000041BC                 add     esp, 4
.text:000041BF                 add     esp, 8
.text:000041C2                 cmp     ebp, esp
.text:000041C4                 call    __RTC_CheckEsp
.text:000041C9                 mov     esp, ebp
.text:000041CB                 pop     ebp
.text:000041CC                 retn
.text:000041CC ??1?$CRecordVector@E@@QAE@XZ endp
.text:000041CC
.text:000041CC ; ---------------------------------------------------------------------------
.text:000041CD                 align 10h
.text:000041CD _text           ends
.text:000041CD
.text:000041D0 ; ===========================================================================
.text:000041D0
.text:000041D0 ; Segment type: Pure code
.text:000041D0 ; Segment permissions: Read/Execute
.text:000041D0 _text           segment para public 'CODE' use32
.text:000041D0                 assume cs:_text
.text:000041D0                 ;org 41D0h
.text:000041D0 ; COMDAT (pick any)
.text:000041D0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000041D0
.text:000041D0 ; =============== S U B R O U T I N E =======================================
.text:000041D0
.text:000041D0 ; Attributes: bp-based frame
.text:000041D0
.text:000041D0 ; public: unsigned char & __thiscall CRecordVector<unsigned char>::operator[](unsigned int)
.text:000041D0                 public ??A?$CRecordVector@E@@QAEAAEI@Z
.text:000041D0 ??A?$CRecordVector@E@@QAEAAEI@Z proc near
.text:000041D0                                         ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+79Bp
.text:000041D0
.text:000041D0 var_4           = dword ptr -4
.text:000041D0 arg_0           = dword ptr  8
.text:000041D0
.text:000041D0                 push    ebp
.text:000041D1                 mov     ebp, esp
.text:000041D3                 push    ecx
.text:000041D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000041DB                 mov     [ebp+var_4], ecx
.text:000041DE                 mov     eax, [ebp+var_4]
.text:000041E1                 mov     eax, [eax]
.text:000041E3                 add     eax, [ebp+arg_0]
.text:000041E6                 mov     esp, ebp
.text:000041E8                 pop     ebp
.text:000041E9                 retn    4
.text:000041E9 ??A?$CRecordVector@E@@QAEAAEI@Z endp
.text:000041E9
.text:000041E9 _text           ends
.text:000041E9
.text:000041EC ; ===========================================================================
.text:000041EC
.text:000041EC ; Segment type: Pure code
.text:000041EC ; Segment permissions: Read/Execute
.text:000041EC _text           segment para public 'CODE' use32
.text:000041EC                 assume cs:_text
.text:000041EC                 ;org 41ECh
.text:000041EC ; COMDAT (pick any)
.text:000041EC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000041EC
.text:000041EC ; =============== S U B R O U T I N E =======================================
.text:000041EC
.text:000041EC ; Attributes: bp-based frame
.text:000041EC
.text:000041EC ; _DWORD __thiscall CProp::CProp(CProp *this, const struct CProp *)
.text:000041EC                 public ??0CProp@@QAE@ABU0@@Z
.text:000041EC ??0CProp@@QAE@ABU0@@Z proc near         ; CODE XREF: CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+A6p
.text:000041EC
.text:000041EC var_4           = dword ptr -4
.text:000041EC arg_0           = dword ptr  8
.text:000041EC
.text:000041EC                 push    ebp
.text:000041ED                 mov     ebp, esp
.text:000041EF                 push    ecx
.text:000041F0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000041F7                 mov     [ebp+var_4], ecx
.text:000041FA                 mov     eax, [ebp+var_4]
.text:000041FD                 mov     ecx, [ebp+arg_0]
.text:00004200                 mov     edx, [ecx]
.text:00004202                 mov     [eax], edx
.text:00004204                 mov     eax, [ebp+var_4]
.text:00004207                 mov     ecx, [ebp+arg_0]
.text:0000420A                 mov     dl, [ecx+4]
.text:0000420D                 mov     [eax+4], dl
.text:00004210                 mov     eax, [ebp+arg_0]
.text:00004213                 add     eax, 8
.text:00004216                 push    eax             ; struct NWindows::NCOM::CPropVariant *
.text:00004217                 mov     ecx, [ebp+var_4]
.text:0000421A                 add     ecx, 8          ; this
.text:0000421D                 call    ??0CPropVariant@NCOM@NWindows@@QAE@ABV012@@Z ; NWindows::NCOM::CPropVariant::CPropVariant(NWindows::NCOM::CPropVariant const &)
.text:00004222                 mov     eax, [ebp+var_4]
.text:00004225                 add     esp, 4
.text:00004228                 cmp     ebp, esp
.text:0000422A                 call    __RTC_CheckEsp
.text:0000422F                 mov     esp, ebp
.text:00004231                 pop     ebp
.text:00004232                 retn    4
.text:00004232 ??0CProp@@QAE@ABU0@@Z endp
.text:00004232
.text:00004232 ; ---------------------------------------------------------------------------
.text:00004235                 align 4
.text:00004235 _text           ends
.text:00004235
.text:00004238 ; ===========================================================================
.text:00004238
.text:00004238 ; Segment type: Pure code
.text:00004238 ; Segment permissions: Read/Execute
.text:00004238 _text           segment para public 'CODE' use32
.text:00004238                 assume cs:_text
.text:00004238                 ;org 4238h
.text:00004238 ; COMDAT (pick any)
.text:00004238                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004238
.text:00004238 ; =============== S U B R O U T I N E =======================================
.text:00004238
.text:00004238 ; Attributes: bp-based frame
.text:00004238
.text:00004238 ; public: void * __thiscall CProp::`scalar deleting destructor'(unsigned int)
.text:00004238                 public ??_GCProp@@QAEPAXI@Z
.text:00004238 ??_GCProp@@QAEPAXI@Z proc near          ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+7Fp
.text:00004238
.text:00004238 var_4           = dword ptr -4
.text:00004238 arg_0           = dword ptr  8
.text:00004238
.text:00004238                 push    ebp
.text:00004239                 mov     ebp, esp
.text:0000423B                 push    ecx
.text:0000423C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004243                 mov     [ebp+var_4], ecx
.text:00004246                 mov     ecx, [ebp+var_4] ; this
.text:00004249                 call    ??1CProp@@QAE@XZ ; CProp::~CProp(void)
.text:0000424E                 mov     eax, [ebp+arg_0]
.text:00004251                 and     eax, 1
.text:00004254                 jz      short loc_4262
.text:00004256                 mov     ecx, [ebp+var_4]
.text:00004259                 push    ecx             ; void *
.text:0000425A                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000425F                 add     esp, 4
.text:00004262
.text:00004262 loc_4262:                               ; CODE XREF: CProp::`scalar deleting destructor'(uint)+1Cj
.text:00004262                 mov     eax, [ebp+var_4]
.text:00004265                 add     esp, 4
.text:00004268                 cmp     ebp, esp
.text:0000426A                 call    __RTC_CheckEsp
.text:0000426F                 mov     esp, ebp
.text:00004271                 pop     ebp
.text:00004272                 retn    4
.text:00004272 ??_GCProp@@QAEPAXI@Z endp
.text:00004272
.text:00004272 ; ---------------------------------------------------------------------------
.text:00004275                 align 4
.text:00004275 _text           ends
.text:00004275
.text:00004278 ; ===========================================================================
.text:00004278
.text:00004278 ; Segment type: Pure code
.text:00004278 ; Segment permissions: Read/Execute
.text:00004278 _text           segment para public 'CODE' use32
.text:00004278                 assume cs:_text
.text:00004278                 ;org 4278h
.text:00004278 ; COMDAT (pick any)
.text:00004278                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004278
.text:00004278 ; =============== S U B R O U T I N E =======================================
.text:00004278
.text:00004278 ; Attributes: bp-based frame
.text:00004278
.text:00004278 ; _DWORD __thiscall CProp::~CProp(CProp *__hidden this)
.text:00004278                 public ??1CProp@@QAE@XZ
.text:00004278 ??1CProp@@QAE@XZ proc near              ; CODE XREF: CProp::`scalar deleting destructor'(uint)+11p
.text:00004278
.text:00004278 var_4           = dword ptr -4
.text:00004278
.text:00004278                 push    ebp
.text:00004279                 mov     ebp, esp
.text:0000427B                 push    ecx
.text:0000427C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004283                 mov     [ebp+var_4], ecx
.text:00004286                 mov     ecx, [ebp+var_4]
.text:00004289                 add     ecx, 8          ; this
.text:0000428C                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00004291                 add     esp, 4
.text:00004294                 cmp     ebp, esp
.text:00004296                 call    __RTC_CheckEsp
.text:0000429B                 mov     esp, ebp
.text:0000429D                 pop     ebp
.text:0000429E                 retn
.text:0000429E ??1CProp@@QAE@XZ endp
.text:0000429E
.text:0000429E ; ---------------------------------------------------------------------------
.text:0000429F                 align 10h
.text:0000429F _text           ends
.text:0000429F
.text:000042A0 ; ===========================================================================
.text:000042A0
.text:000042A0 ; Segment type: Pure code
.text:000042A0 ; Segment permissions: Read/Execute
.text:000042A0 _text           segment para public 'CODE' use32
.text:000042A0                 assume cs:_text
.text:000042A0                 ;org 42A0h
.text:000042A0 ; COMDAT (pick any)
.text:000042A0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000042A0
.text:000042A0 ; =============== S U B R O U T I N E =======================================
.text:000042A0
.text:000042A0 ; Attributes: bp-based frame
.text:000042A0
.text:000042A0 ; _DWORD __thiscall NWindows::NCOM::CPropVariant::~CPropVariant(NWindows::NCOM::CPropVariant *__hidden this)
.text:000042A0                 public ??1CPropVariant@NCOM@NWindows@@QAE@XZ
.text:000042A0 ??1CPropVariant@NCOM@NWindows@@QAE@XZ proc near
.text:000042A0                                         ; CODE XREF: CProp::~CProp(void)+14p
.text:000042A0
.text:000042A0 var_4           = dword ptr -4
.text:000042A0
.text:000042A0                 push    ebp
.text:000042A1                 mov     ebp, esp
.text:000042A3                 push    ecx
.text:000042A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000042AB                 mov     [ebp+var_4], ecx
.text:000042AE                 mov     ecx, [ebp+var_4] ; this
.text:000042B1                 call    ?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ ; NWindows::NCOM::CPropVariant::Clear(void)
.text:000042B6                 add     esp, 4
.text:000042B9                 cmp     ebp, esp
.text:000042BB                 call    __RTC_CheckEsp
.text:000042C0                 mov     esp, ebp
.text:000042C2                 pop     ebp
.text:000042C3                 retn
.text:000042C3 ??1CPropVariant@NCOM@NWindows@@QAE@XZ endp
.text:000042C3
.text:000042C3 _text           ends
.text:000042C3
.text:000042C4 ; ===========================================================================
.text:000042C4
.text:000042C4 ; Segment type: Pure code
.text:000042C4 ; Segment permissions: Read/Execute
.text:000042C4 _text           segment para public 'CODE' use32
.text:000042C4                 assume cs:_text
.text:000042C4                 ;org 42C4h
.text:000042C4 ; COMDAT (pick any)
.text:000042C4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000042C4
.text:000042C4 ; =============== S U B R O U T I N E =======================================
.text:000042C4
.text:000042C4 ; Attributes: bp-based frame
.text:000042C4
.text:000042C4 ; public: __thiscall CRecordVector<void *>::CRecordVector<void *>(void)
.text:000042C4                 public ??0?$CRecordVector@PAX@@QAE@XZ
.text:000042C4 ??0?$CRecordVector@PAX@@QAE@XZ proc near
.text:000042C4                                         ; CODE XREF: CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+42p
.text:000042C4
.text:000042C4 var_4           = dword ptr -4
.text:000042C4
.text:000042C4                 push    ebp
.text:000042C5                 mov     ebp, esp
.text:000042C7                 push    ecx
.text:000042C8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000042CF                 mov     [ebp+var_4], ecx
.text:000042D2                 mov     eax, [ebp+var_4]
.text:000042D5                 mov     dword ptr [eax], 0
.text:000042DB                 mov     ecx, [ebp+var_4]
.text:000042DE                 mov     dword ptr [ecx+4], 0
.text:000042E5                 mov     edx, [ebp+var_4]
.text:000042E8                 mov     dword ptr [edx+8], 0
.text:000042EF                 mov     eax, [ebp+var_4]
.text:000042F2                 mov     esp, ebp
.text:000042F4                 pop     ebp
.text:000042F5                 retn
.text:000042F5 ??0?$CRecordVector@PAX@@QAE@XZ endp
.text:000042F5
.text:000042F5 ; ---------------------------------------------------------------------------
.text:000042F6                 align 4
.text:000042F6 _text           ends
.text:000042F6
.text:000042F8 ; ===========================================================================
.text:000042F8
.text:000042F8 ; Segment type: Pure code
.text:000042F8 ; Segment permissions: Read/Execute
.text:000042F8 _text           segment para public 'CODE' use32
.text:000042F8                 assume cs:_text
.text:000042F8                 ;org 42F8h
.text:000042F8 ; COMDAT (pick any)
.text:000042F8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000042F8
.text:000042F8 ; =============== S U B R O U T I N E =======================================
.text:000042F8
.text:000042F8 ; Attributes: bp-based frame
.text:000042F8
.text:000042F8 ; public: unsigned int __thiscall CRecordVector<void *>::Size(void)const
.text:000042F8                 public ?Size@?$CRecordVector@PAX@@QBEIXZ
.text:000042F8 ?Size@?$CRecordVector@PAX@@QBEIXZ proc near
.text:000042F8                                         ; CODE XREF: CObjectVector<CProp>::Size(void)+11p
.text:000042F8                                         ; CObjectVector<CProp>::~CObjectVector<CProp>(void)+46p
.text:000042F8
.text:000042F8 var_4           = dword ptr -4
.text:000042F8
.text:000042F8                 push    ebp
.text:000042F9                 mov     ebp, esp
.text:000042FB                 push    ecx
.text:000042FC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004303                 mov     [ebp+var_4], ecx
.text:00004306                 mov     eax, [ebp+var_4]
.text:00004309                 mov     eax, [eax+4]
.text:0000430C                 mov     esp, ebp
.text:0000430E                 pop     ebp
.text:0000430F                 retn
.text:0000430F ?Size@?$CRecordVector@PAX@@QBEIXZ endp
.text:0000430F
.text:0000430F _text           ends
.text:0000430F
.text:00004310 ; ===========================================================================
.text:00004310
.text:00004310 ; Segment type: Pure code
.text:00004310 ; Segment permissions: Read/Execute
.text:00004310 _text           segment para public 'CODE' use32
.text:00004310                 assume cs:_text
.text:00004310                 ;org 4310h
.text:00004310 ; COMDAT (pick any)
.text:00004310                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004310
.text:00004310 ; =============== S U B R O U T I N E =======================================
.text:00004310
.text:00004310 ; Attributes: bp-based frame
.text:00004310
.text:00004310 ; public: void __thiscall CRecordVector<void *>::ConstructReserve(unsigned int)
.text:00004310                 public ?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z
.text:00004310 ?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z proc near
.text:00004310                                         ; CODE XREF: CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+60p
.text:00004310
.text:00004310 var_8           = dword ptr -8
.text:00004310 var_4           = dword ptr -4
.text:00004310 arg_0           = dword ptr  8
.text:00004310
.text:00004310                 push    ebp
.text:00004311                 mov     ebp, esp
.text:00004313                 sub     esp, 8
.text:00004316                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000431D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004324                 mov     [ebp+var_4], ecx
.text:00004327                 cmp     [ebp+arg_0], 0
.text:0000432B                 jz      short loc_435D
.text:0000432D                 xor     ecx, ecx
.text:0000432F                 mov     eax, [ebp+arg_0]
.text:00004332                 mov     edx, 4
.text:00004337                 mul     edx
.text:00004339                 seto    cl
.text:0000433C                 neg     ecx
.text:0000433E                 or      ecx, eax
.text:00004340                 push    ecx             ; unsigned int
.text:00004341                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00004346                 add     esp, 4
.text:00004349                 mov     [ebp+var_8], eax
.text:0000434C                 mov     eax, [ebp+var_4]
.text:0000434F                 mov     ecx, [ebp+var_8]
.text:00004352                 mov     [eax], ecx
.text:00004354                 mov     edx, [ebp+var_4]
.text:00004357                 mov     eax, [ebp+arg_0]
.text:0000435A                 mov     [edx+8], eax
.text:0000435D
.text:0000435D loc_435D:                               ; CODE XREF: CRecordVector<void *>::ConstructReserve(uint)+1Bj
.text:0000435D                 add     esp, 8
.text:00004360                 cmp     ebp, esp
.text:00004362                 call    __RTC_CheckEsp
.text:00004367                 mov     esp, ebp
.text:00004369                 pop     ebp
.text:0000436A                 retn    4
.text:0000436A ?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z endp
.text:0000436A
.text:0000436A ; ---------------------------------------------------------------------------
.text:0000436D                 align 10h
.text:0000436D _text           ends
.text:0000436D
.text:00004370 ; ===========================================================================
.text:00004370
.text:00004370 ; Segment type: Pure code
.text:00004370 ; Segment permissions: Read/Execute
.text:00004370 _text           segment para public 'CODE' use32
.text:00004370                 assume cs:_text
.text:00004370                 ;org 4370h
.text:00004370 ; COMDAT (pick any)
.text:00004370                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004370
.text:00004370 ; =============== S U B R O U T I N E =======================================
.text:00004370
.text:00004370 ; Attributes: bp-based frame
.text:00004370
.text:00004370 ; public: __thiscall CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00004370                 public ??1?$CRecordVector@PAX@@QAE@XZ
.text:00004370 ??1?$CRecordVector@PAX@@QAE@XZ proc near
.text:00004370                                         ; CODE XREF: __unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$0+3j
.text:00004370                                         ; CObjectVector<CProp>::~CObjectVector<CProp>(void)+9Cp ...
.text:00004370
.text:00004370 var_8           = dword ptr -8
.text:00004370 var_4           = dword ptr -4
.text:00004370
.text:00004370                 push    ebp
.text:00004371                 mov     ebp, esp
.text:00004373                 sub     esp, 8
.text:00004376                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000437D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004384                 mov     [ebp+var_4], ecx
.text:00004387                 mov     eax, [ebp+var_4]
.text:0000438A                 mov     ecx, [eax]
.text:0000438C                 mov     [ebp+var_8], ecx
.text:0000438F                 mov     edx, [ebp+var_8]
.text:00004392                 push    edx             ; void *
.text:00004393                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00004398                 add     esp, 4
.text:0000439B                 add     esp, 8
.text:0000439E                 cmp     ebp, esp
.text:000043A0                 call    __RTC_CheckEsp
.text:000043A5                 mov     esp, ebp
.text:000043A7                 pop     ebp
.text:000043A8                 retn
.text:000043A8 ??1?$CRecordVector@PAX@@QAE@XZ endp
.text:000043A8
.text:000043A8 ; ---------------------------------------------------------------------------
.text:000043A9                 align 4
.text:000043A9 _text           ends
.text:000043A9
.text:000043AC ; ===========================================================================
.text:000043AC
.text:000043AC ; Segment type: Pure code
.text:000043AC ; Segment permissions: Read/Execute
.text:000043AC _text           segment para public 'CODE' use32
.text:000043AC                 assume cs:_text
.text:000043AC                 ;org 43ACh
.text:000043AC ; COMDAT (pick any)
.text:000043AC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000043AC
.text:000043AC ; =============== S U B R O U T I N E =======================================
.text:000043AC
.text:000043AC ; Attributes: bp-based frame
.text:000043AC
.text:000043AC ; public: void __thiscall CRecordVector<void *>::AddInReserved(void * const)
.text:000043AC                 public ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z
.text:000043AC ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z proc near
.text:000043AC                                         ; CODE XREF: CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+C8p
.text:000043AC
.text:000043AC var_4           = dword ptr -4
.text:000043AC arg_0           = dword ptr  8
.text:000043AC
.text:000043AC                 push    ebp
.text:000043AD                 mov     ebp, esp
.text:000043AF                 push    ecx
.text:000043B0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000043B7                 mov     [ebp+var_4], ecx
.text:000043BA                 mov     eax, [ebp+var_4]
.text:000043BD                 mov     ecx, [eax+4]
.text:000043C0                 mov     edx, [ebp+var_4]
.text:000043C3                 mov     eax, [edx]
.text:000043C5                 mov     edx, [ebp+arg_0]
.text:000043C8                 mov     [eax+ecx*4], edx
.text:000043CB                 mov     eax, [ebp+var_4]
.text:000043CE                 mov     ecx, [eax+4]
.text:000043D1                 add     ecx, 1
.text:000043D4                 mov     edx, [ebp+var_4]
.text:000043D7                 mov     [edx+4], ecx
.text:000043DA                 mov     esp, ebp
.text:000043DC                 pop     ebp
.text:000043DD                 retn    4
.text:000043DD ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z endp
.text:000043DD
.text:000043DD _text           ends
.text:000043DD
.text:000043E0 ; ===========================================================================
.text:000043E0
.text:000043E0 ; Segment type: Pure code
.text:000043E0 ; Segment permissions: Read/Execute
.text:000043E0 _text           segment para public 'CODE' use32
.text:000043E0                 assume cs:_text
.text:000043E0                 ;org 43E0h
.text:000043E0 ; COMDAT (pick any)
.text:000043E0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000043E0
.text:000043E0 ; =============== S U B R O U T I N E =======================================
.text:000043E0
.text:000043E0 ; Attributes: bp-based frame
.text:000043E0
.text:000043E0 ; public: void * const & __thiscall CRecordVector<void *>::operator[](unsigned int)const
.text:000043E0                 public ??A?$CRecordVector@PAX@@QBEABQAXI@Z
.text:000043E0 ??A?$CRecordVector@PAX@@QBEABQAXI@Z proc near
.text:000043E0                                         ; CODE XREF: CObjectVector<CProp>::operator[](uint)+15p
.text:000043E0
.text:000043E0 var_4           = dword ptr -4
.text:000043E0 arg_0           = dword ptr  8
.text:000043E0
.text:000043E0                 push    ebp
.text:000043E1                 mov     ebp, esp
.text:000043E3                 push    ecx
.text:000043E4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000043EB                 mov     [ebp+var_4], ecx
.text:000043EE                 mov     eax, [ebp+var_4]
.text:000043F1                 mov     ecx, [eax]
.text:000043F3                 mov     edx, [ebp+arg_0]
.text:000043F6                 lea     eax, [ecx+edx*4]
.text:000043F9                 mov     esp, ebp
.text:000043FB                 pop     ebp
.text:000043FC                 retn    4
.text:000043FC ??A?$CRecordVector@PAX@@QBEABQAXI@Z endp
.text:000043FC
.text:000043FC ; ---------------------------------------------------------------------------
.text:000043FF                 align 10h
.text:000043FF _text           ends
.text:000043FF
.text:00004400 ; ===========================================================================
.text:00004400
.text:00004400 ; Segment type: Pure code
.text:00004400 ; Segment permissions: Read/Execute
.text:00004400 _text           segment para public 'CODE' use32
.text:00004400                 assume cs:_text
.text:00004400                 ;org 4400h
.text:00004400 ; COMDAT (pick any)
.text:00004400                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004400
.text:00004400 ; =============== S U B R O U T I N E =======================================
.text:00004400
.text:00004400 ; Attributes: bp-based frame
.text:00004400
.text:00004400 ; public: void * & __thiscall CRecordVector<void *>::operator[](unsigned int)
.text:00004400                 public ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
.text:00004400 ??A?$CRecordVector@PAX@@QAEAAPAXI@Z proc near
.text:00004400                                         ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+64p
.text:00004400
.text:00004400 var_4           = dword ptr -4
.text:00004400 arg_0           = dword ptr  8
.text:00004400
.text:00004400                 push    ebp
.text:00004401                 mov     ebp, esp
.text:00004403                 push    ecx
.text:00004404                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000440B                 mov     [ebp+var_4], ecx
.text:0000440E                 mov     eax, [ebp+var_4]
.text:00004411                 mov     ecx, [eax]
.text:00004413                 mov     edx, [ebp+arg_0]
.text:00004416                 lea     eax, [ecx+edx*4]
.text:00004419                 mov     esp, ebp
.text:0000441B                 pop     ebp
.text:0000441C                 retn    4
.text:0000441C ??A?$CRecordVector@PAX@@QAEAAPAXI@Z endp
.text:0000441C
.text:0000441C ; ---------------------------------------------------------------------------
.text:0000441F                 align 10h
.text:0000441F _text           ends
.text:0000441F
.text:00004420 ; ===========================================================================
.text:00004420
.text:00004420 ; Segment type: Pure code
.text:00004420 ; Segment permissions: Read/Execute
.text:00004420 _text           segment para public 'CODE' use32
.text:00004420                 assume cs:_text
.text:00004420                 ;org 4420h
.text:00004420 ; COMDAT (pick any)
.text:00004420                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004420
.text:00004420 ; =============== S U B R O U T I N E =======================================
.text:00004420
.text:00004420 ; Attributes: bp-based frame
.text:00004420
.text:00004420 ; public: long __thiscall CMyComPtr<struct ICompressCoder>::QueryInterface<struct ICompressSetCoderProperties>(struct _GUID const &, struct ICompressSetCoderProperties * *)const
.text:00004420                 public ??$QueryInterface@UICompressSetCoderProperties@@@?$CMyComPtr@UICompressCoder@@@@QBEJABU_GUID@@PAPAUICompressSetCoderProperties@@@Z
.text:00004420 ??$QueryInterface@UICompressSetCoderProperties@@@?$CMyComPtr@UICompressCoder@@@@QBEJABU_GUID@@PAPAUICompressSetCoderProperties@@@Z proc near
.text:00004420                                         ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+B4Dp
.text:00004420
.text:00004420 var_4           = dword ptr -4
.text:00004420 arg_0           = dword ptr  8
.text:00004420 arg_4           = dword ptr  0Ch
.text:00004420
.text:00004420                 push    ebp
.text:00004421                 mov     ebp, esp
.text:00004423                 push    ecx
.text:00004424                 push    esi
.text:00004425                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000442C                 mov     [ebp+var_4], ecx
.text:0000442F                 mov     esi, esp
.text:00004431                 mov     eax, [ebp+arg_4]
.text:00004434                 push    eax
.text:00004435                 mov     ecx, [ebp+arg_0]
.text:00004438                 push    ecx
.text:00004439                 mov     edx, [ebp+var_4]
.text:0000443C                 mov     eax, [edx]
.text:0000443E                 mov     ecx, [ebp+var_4]
.text:00004441                 mov     edx, [ecx]
.text:00004443                 mov     eax, [eax]
.text:00004445                 push    edx
.text:00004446                 mov     ecx, [eax]
.text:00004448                 call    ecx
.text:0000444A                 cmp     esi, esp
.text:0000444C                 call    __RTC_CheckEsp
.text:00004451                 pop     esi
.text:00004452                 add     esp, 4
.text:00004455                 cmp     ebp, esp
.text:00004457                 call    __RTC_CheckEsp
.text:0000445C                 mov     esp, ebp
.text:0000445E                 pop     ebp
.text:0000445F                 retn    8
.text:0000445F ??$QueryInterface@UICompressSetCoderProperties@@@?$CMyComPtr@UICompressCoder@@@@QBEJABU_GUID@@PAPAUICompressSetCoderProperties@@@Z endp
.text:0000445F
.text:0000445F ; ---------------------------------------------------------------------------
.text:00004462                 align 4
.text:00004462 _text           ends
.text:00004462
.text:00004464 ; ===========================================================================
.text:00004464
.text:00004464 ; Segment type: Pure code
.text:00004464 ; Segment permissions: Read/Execute
.text:00004464 _text           segment para public 'CODE' use32
.text:00004464                 assume cs:_text
.text:00004464                 ;org 4464h
.text:00004464 ; COMDAT (pick any)
.text:00004464                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004464
.text:00004464 ; =============== S U B R O U T I N E =======================================
.text:00004464
.text:00004464
.text:00004464 ; [thunk]:public: virtual unsigned long __stdcall NCompress::CCopyCoder::Release`adjustor{4}' (void)
.text:00004464                 public ?Release@CCopyCoder@NCompress@@W3AGKXZ
.text:00004464 ?Release@CCopyCoder@NCompress@@W3AGKXZ proc near
.text:00004464                                         ; DATA XREF: .rdata:00002080o
.text:00004464
.text:00004464 arg_0           = dword ptr  4
.text:00004464
.text:00004464                 sub     [esp+arg_0], 4
.text:00004469                 jmp     ?Release@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::Release(void)
.text:00004469 ?Release@CCopyCoder@NCompress@@W3AGKXZ endp
.text:00004469
.text:00004469 ; ---------------------------------------------------------------------------
.text:0000446E                 align 10h
.text:0000446E _text           ends
.text:0000446E
.text:00004470 ; ===========================================================================
.text:00004470
.text:00004470 ; Segment type: Pure code
.text:00004470 ; Segment permissions: Read/Execute
.text:00004470 _text           segment para public 'CODE' use32
.text:00004470                 assume cs:_text
.text:00004470                 ;org 4470h
.text:00004470 ; COMDAT (pick any)
.text:00004470                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004470
.text:00004470 ; =============== S U B R O U T I N E =======================================
.text:00004470
.text:00004470
.text:00004470 ; [thunk]:public: virtual long __stdcall NCrypto::NWzAes::CBaseCoder::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:00004470                 public ?QueryInterface@CBaseCoder@NWzAes@NCrypto@@W3AGJABU_GUID@@PAPAX@Z
.text:00004470 ?QueryInterface@CBaseCoder@NWzAes@NCrypto@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:00004470                                         ; DATA XREF: .rdata:const NCrypto::NWzAes::CEncoder::`vftable'{for `ICryptoSetPassword'}o
.text:00004470                                         ; .rdata:const NCrypto::NWzAes::CBaseCoder::`vftable'{for `ICryptoSetPassword'}o
.text:00004470
.text:00004470 arg_0           = dword ptr  4
.text:00004470
.text:00004470                 sub     [esp+arg_0], 4
.text:00004475                 jmp     ?QueryInterface@CBaseCoder@NWzAes@NCrypto@@UAGJABU_GUID@@PAPAX@Z ; NCrypto::NWzAes::CBaseCoder::QueryInterface(_GUID const &,void * *)
.text:00004475 ?QueryInterface@CBaseCoder@NWzAes@NCrypto@@W3AGJABU_GUID@@PAPAX@Z endp
.text:00004475
.text:00004475 ; ---------------------------------------------------------------------------
.text:0000447A                 align 4
.text:0000447A _text           ends
.text:0000447A
.text:0000447C ; ===========================================================================
.text:0000447C
.text:0000447C ; Segment type: Pure code
.text:0000447C ; Segment permissions: Read/Execute
.text:0000447C _text           segment para public 'CODE' use32
.text:0000447C                 assume cs:_text
.text:0000447C                 ;org 447Ch
.text:0000447C ; COMDAT (pick any)
.text:0000447C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000447C
.text:0000447C ; =============== S U B R O U T I N E =======================================
.text:0000447C
.text:0000447C
.text:0000447C ; [thunk]:public: virtual long __stdcall NArchive::NZip::CLzmaEncoder::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:0000447C                 public ?QueryInterface@CLzmaEncoder@NZip@NArchive@@W3AGJABU_GUID@@PAPAX@Z
.text:0000447C ?QueryInterface@CLzmaEncoder@NZip@NArchive@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:0000447C                                         ; DATA XREF: .rdata:const NArchive::NZip::CLzmaEncoder::`vftable'{for `ICompressSetCoderProperties'}o
.text:0000447C
.text:0000447C arg_0           = dword ptr  4
.text:0000447C
.text:0000447C                 sub     [esp+arg_0], 4
.text:00004481                 jmp     ?QueryInterface@CLzmaEncoder@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::NZip::CLzmaEncoder::QueryInterface(_GUID const &,void * *)
.text:00004481 ?QueryInterface@CLzmaEncoder@NZip@NArchive@@W3AGJABU_GUID@@PAPAX@Z endp
.text:00004481
.text:00004481 ; ---------------------------------------------------------------------------
.text:00004486                 align 4
.text:00004486 _text           ends
.text:00004486
.text:00004488 ; ===========================================================================
.text:00004488
.text:00004488 ; Segment type: Pure code
.text:00004488 ; Segment permissions: Read/Execute
.text:00004488 _text           segment para public 'CODE' use32
.text:00004488                 assume cs:_text
.text:00004488                 ;org 4488h
.text:00004488 ; COMDAT (pick any)
.text:00004488                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004488
.text:00004488 ; =============== S U B R O U T I N E =======================================
.text:00004488
.text:00004488
.text:00004488 ; [thunk]:public: virtual unsigned long __stdcall NCrypto::NZip::CCipher::AddRef`adjustor{4}' (void)
.text:00004488                 public ?AddRef@CCipher@NZip@NCrypto@@W3AGKXZ
.text:00004488 ?AddRef@CCipher@NZip@NCrypto@@W3AGKXZ proc near ; DATA XREF: .rdata:00002F50o
.text:00004488                                         ; .rdata:000036E0o
.text:00004488
.text:00004488 arg_0           = dword ptr  4
.text:00004488
.text:00004488                 sub     [esp+arg_0], 4
.text:0000448D                 jmp     ?AddRef@CCipher@NZip@NCrypto@@UAGKXZ ; NCrypto::NZip::CCipher::AddRef(void)
.text:0000448D ?AddRef@CCipher@NZip@NCrypto@@W3AGKXZ endp
.text:0000448D
.text:0000448D ; ---------------------------------------------------------------------------
.text:00004492                 align 4
.text:00004492 _text           ends
.text:00004492
.text:00004494 ; ===========================================================================
.text:00004494
.text:00004494 ; Segment type: Pure code
.text:00004494 ; Segment permissions: Read/Execute
.text:00004494 _text           segment para public 'CODE' use32
.text:00004494                 assume cs:_text
.text:00004494                 ;org 4494h
.text:00004494 ; COMDAT (pick any)
.text:00004494                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004494
.text:00004494 ; =============== S U B R O U T I N E =======================================
.text:00004494
.text:00004494
.text:00004494 ; [thunk]:public: virtual unsigned long __stdcall NCompress::CCopyCoder::Release`adjustor{8}' (void)
.text:00004494                 public ?Release@CCopyCoder@NCompress@@W7AGKXZ
.text:00004494 ?Release@CCopyCoder@NCompress@@W7AGKXZ proc near
.text:00004494                                         ; DATA XREF: .rdata:0000206Co
.text:00004494
.text:00004494 arg_0           = dword ptr  4
.text:00004494
.text:00004494                 sub     [esp+arg_0], 8
.text:00004499                 jmp     ?Release@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::Release(void)
.text:00004499 ?Release@CCopyCoder@NCompress@@W7AGKXZ endp
.text:00004499
.text:00004499 ; ---------------------------------------------------------------------------
.text:0000449E                 align 10h
.text:0000449E _text           ends
.text:0000449E
.text:000044A0 ; ===========================================================================
.text:000044A0
.text:000044A0 ; Segment type: Pure code
.text:000044A0 ; Segment permissions: Read/Execute
.text:000044A0 _text           segment para public 'CODE' use32
.text:000044A0                 assume cs:_text
.text:000044A0                 ;org 44A0h
.text:000044A0 ; COMDAT (pick any)
.text:000044A0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000044A0
.text:000044A0 ; =============== S U B R O U T I N E =======================================
.text:000044A0
.text:000044A0
.text:000044A0 ; [thunk]:public: virtual unsigned long __stdcall NCompress::CCopyCoder::Release`adjustor{12}' (void)
.text:000044A0                 public ?Release@CCopyCoder@NCompress@@WM@AGKXZ
.text:000044A0 ?Release@CCopyCoder@NCompress@@WM@AGKXZ proc near
.text:000044A0                                         ; DATA XREF: .rdata:00002058o
.text:000044A0
.text:000044A0 arg_0           = dword ptr  4
.text:000044A0
.text:000044A0                 sub     [esp+arg_0], 0Ch
.text:000044A5                 jmp     ?Release@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::Release(void)
.text:000044A5 ?Release@CCopyCoder@NCompress@@WM@AGKXZ endp
.text:000044A5
.text:000044A5 ; ---------------------------------------------------------------------------
.text:000044AA                 align 4
.text:000044AA _text           ends
.text:000044AA
.text:000044AC ; ===========================================================================
.text:000044AC
.text:000044AC ; Segment type: Pure code
.text:000044AC ; Segment permissions: Read/Execute
.text:000044AC _text           segment para public 'CODE' use32
.text:000044AC                 assume cs:_text
.text:000044AC                 ;org 44ACh
.text:000044AC ; COMDAT (pick any)
.text:000044AC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000044AC
.text:000044AC ; =============== S U B R O U T I N E =======================================
.text:000044AC
.text:000044AC
.text:000044AC ; [thunk]:public: virtual unsigned long __stdcall NCompress::CCopyCoder::AddRef`adjustor{4}' (void)
.text:000044AC                 public ?AddRef@CCopyCoder@NCompress@@W3AGKXZ
.text:000044AC ?AddRef@CCopyCoder@NCompress@@W3AGKXZ proc near ; DATA XREF: .rdata:0000207Co
.text:000044AC
.text:000044AC arg_0           = dword ptr  4
.text:000044AC
.text:000044AC                 sub     [esp+arg_0], 4
.text:000044B1                 jmp     ?AddRef@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::AddRef(void)
.text:000044B1 ?AddRef@CCopyCoder@NCompress@@W3AGKXZ endp
.text:000044B1
.text:000044B1 ; ---------------------------------------------------------------------------
.text:000044B6                 align 4
.text:000044B6 _text           ends
.text:000044B6
.text:000044B8 ; ===========================================================================
.text:000044B8
.text:000044B8 ; Segment type: Pure code
.text:000044B8 ; Segment permissions: Read/Execute
.text:000044B8 _text           segment para public 'CODE' use32
.text:000044B8                 assume cs:_text
.text:000044B8                 ;org 44B8h
.text:000044B8 ; COMDAT (pick any)
.text:000044B8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000044B8
.text:000044B8 ; =============== S U B R O U T I N E =======================================
.text:000044B8
.text:000044B8
.text:000044B8 ; [thunk]:public: virtual long __stdcall NCrypto::NZip::CCipher::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:000044B8                 public ?QueryInterface@CCipher@NZip@NCrypto@@W3AGJABU_GUID@@PAPAX@Z
.text:000044B8 ?QueryInterface@CCipher@NZip@NCrypto@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:000044B8                                         ; DATA XREF: .rdata:const NCrypto::NZip::CEncoder::`vftable'{for `ICryptoSetPassword'}o
.text:000044B8                                         ; .rdata:const NCrypto::NZip::CCipher::`vftable'{for `ICryptoSetPassword'}o
.text:000044B8
.text:000044B8 arg_0           = dword ptr  4
.text:000044B8
.text:000044B8                 sub     [esp+arg_0], 4
.text:000044BD                 jmp     ?QueryInterface@CCipher@NZip@NCrypto@@UAGJABU_GUID@@PAPAX@Z ; NCrypto::NZip::CCipher::QueryInterface(_GUID const &,void * *)
.text:000044BD ?QueryInterface@CCipher@NZip@NCrypto@@W3AGJABU_GUID@@PAPAX@Z endp
.text:000044BD
.text:000044BD ; ---------------------------------------------------------------------------
.text:000044C2                 align 4
.text:000044C2 _text           ends
.text:000044C2
.text:000044C4 ; ===========================================================================
.text:000044C4
.text:000044C4 ; Segment type: Pure code
.text:000044C4 ; Segment permissions: Read/Execute
.text:000044C4 _text           segment para public 'CODE' use32
.text:000044C4                 assume cs:_text
.text:000044C4                 ;org 44C4h
.text:000044C4 ; COMDAT (pick any)
.text:000044C4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000044C4
.text:000044C4 ; =============== S U B R O U T I N E =======================================
.text:000044C4
.text:000044C4
.text:000044C4 ; [thunk]:public: virtual unsigned long __stdcall NCompress::CCopyCoder::AddRef`adjustor{8}' (void)
.text:000044C4                 public ?AddRef@CCopyCoder@NCompress@@W7AGKXZ
.text:000044C4 ?AddRef@CCopyCoder@NCompress@@W7AGKXZ proc near ; DATA XREF: .rdata:00002068o
.text:000044C4
.text:000044C4 arg_0           = dword ptr  4
.text:000044C4
.text:000044C4                 sub     [esp+arg_0], 8
.text:000044C9                 jmp     ?AddRef@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::AddRef(void)
.text:000044C9 ?AddRef@CCopyCoder@NCompress@@W7AGKXZ endp
.text:000044C9
.text:000044C9 ; ---------------------------------------------------------------------------
.text:000044CE                 align 10h
.text:000044CE _text           ends
.text:000044CE
.text:000044D0 ; ===========================================================================
.text:000044D0
.text:000044D0 ; Segment type: Pure code
.text:000044D0 ; Segment permissions: Read/Execute
.text:000044D0 _text           segment para public 'CODE' use32
.text:000044D0                 assume cs:_text
.text:000044D0                 ;org 44D0h
.text:000044D0 ; COMDAT (pick any)
.text:000044D0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000044D0
.text:000044D0 ; =============== S U B R O U T I N E =======================================
.text:000044D0
.text:000044D0
.text:000044D0 ; [thunk]:public: virtual long __stdcall NCompress::CCopyCoder::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:000044D0                 public ?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.text:000044D0 ?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:000044D0                                         ; DATA XREF: .rdata:const NCompress::CCopyCoder::`vftable'{for `ICompressSetInStream'}o
.text:000044D0
.text:000044D0 arg_0           = dword ptr  4
.text:000044D0
.text:000044D0                 sub     [esp+arg_0], 4
.text:000044D5                 jmp     ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)
.text:000044D5 ?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z endp
.text:000044D5
.text:000044D5 ; ---------------------------------------------------------------------------
.text:000044DA                 align 4
.text:000044DA _text           ends
.text:000044DA
.text:000044DC ; ===========================================================================
.text:000044DC
.text:000044DC ; Segment type: Pure code
.text:000044DC ; Segment permissions: Read/Execute
.text:000044DC _text           segment para public 'CODE' use32
.text:000044DC                 assume cs:_text
.text:000044DC                 ;org 44DCh
.text:000044DC ; COMDAT (pick any)
.text:000044DC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000044DC
.text:000044DC ; =============== S U B R O U T I N E =======================================
.text:000044DC
.text:000044DC
.text:000044DC ; [thunk]:public: virtual unsigned long __stdcall NCompress::CCopyCoder::AddRef`adjustor{12}' (void)
.text:000044DC                 public ?AddRef@CCopyCoder@NCompress@@WM@AGKXZ
.text:000044DC ?AddRef@CCopyCoder@NCompress@@WM@AGKXZ proc near
.text:000044DC                                         ; DATA XREF: .rdata:00002054o
.text:000044DC
.text:000044DC arg_0           = dword ptr  4
.text:000044DC
.text:000044DC                 sub     [esp+arg_0], 0Ch
.text:000044E1                 jmp     ?AddRef@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::AddRef(void)
.text:000044E1 ?AddRef@CCopyCoder@NCompress@@WM@AGKXZ endp
.text:000044E1
.text:000044E1 ; ---------------------------------------------------------------------------
.text:000044E6                 align 4
.text:000044E6 _text           ends
.text:000044E6
.text:000044E8 ; ===========================================================================
.text:000044E8
.text:000044E8 ; Segment type: Pure code
.text:000044E8 ; Segment permissions: Read/Execute
.text:000044E8 _text           segment para public 'CODE' use32
.text:000044E8                 assume cs:_text
.text:000044E8                 ;org 44E8h
.text:000044E8 ; COMDAT (pick any)
.text:000044E8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000044E8
.text:000044E8 ; =============== S U B R O U T I N E =======================================
.text:000044E8
.text:000044E8
.text:000044E8 ; [thunk]:public: virtual unsigned long __stdcall NCrypto::NWzAes::CBaseCoder::Release`adjustor{4}' (void)
.text:000044E8                 public ?Release@CBaseCoder@NWzAes@NCrypto@@W3AGKXZ
.text:000044E8 ?Release@CBaseCoder@NWzAes@NCrypto@@W3AGKXZ proc near
.text:000044E8                                         ; DATA XREF: .rdata:00002B14o
.text:000044E8                                         ; .rdata:000035E0o
.text:000044E8
.text:000044E8 arg_0           = dword ptr  4
.text:000044E8
.text:000044E8                 sub     [esp+arg_0], 4
.text:000044ED                 jmp     ?Release@CBaseCoder@NWzAes@NCrypto@@UAGKXZ ; NCrypto::NWzAes::CBaseCoder::Release(void)
.text:000044ED ?Release@CBaseCoder@NWzAes@NCrypto@@W3AGKXZ endp
.text:000044ED
.text:000044ED ; ---------------------------------------------------------------------------
.text:000044F2                 align 4
.text:000044F2 _text           ends
.text:000044F2
.text:000044F4 ; ===========================================================================
.text:000044F4
.text:000044F4 ; Segment type: Pure code
.text:000044F4 ; Segment permissions: Read/Execute
.text:000044F4 _text           segment para public 'CODE' use32
.text:000044F4                 assume cs:_text
.text:000044F4                 ;org 44F4h
.text:000044F4 ; COMDAT (pick any)
.text:000044F4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000044F4
.text:000044F4 ; =============== S U B R O U T I N E =======================================
.text:000044F4
.text:000044F4
.text:000044F4 ; [thunk]:public: virtual unsigned long __stdcall NArchive::NZip::CLzmaEncoder::Release`adjustor{4}' (void)
.text:000044F4                 public ?Release@CLzmaEncoder@NZip@NArchive@@W3AGKXZ
.text:000044F4 ?Release@CLzmaEncoder@NZip@NArchive@@W3AGKXZ proc near
.text:000044F4                                         ; DATA XREF: .rdata:00003218o
.text:000044F4
.text:000044F4 arg_0           = dword ptr  4
.text:000044F4
.text:000044F4                 sub     [esp+arg_0], 4
.text:000044F9                 jmp     ?Release@CLzmaEncoder@NZip@NArchive@@UAGKXZ ; NArchive::NZip::CLzmaEncoder::Release(void)
.text:000044F9 ?Release@CLzmaEncoder@NZip@NArchive@@W3AGKXZ endp
.text:000044F9
.text:000044F9 ; ---------------------------------------------------------------------------
.text:000044FE                 align 10h
.text:000044FE _text           ends
.text:000044FE
.text:00004500 ; ===========================================================================
.text:00004500
.text:00004500 ; Segment type: Pure code
.text:00004500 ; Segment permissions: Read/Execute
.text:00004500 _text           segment para public 'CODE' use32
.text:00004500                 assume cs:_text
.text:00004500                 ;org 4500h
.text:00004500 ; COMDAT (pick any)
.text:00004500                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004500
.text:00004500 ; =============== S U B R O U T I N E =======================================
.text:00004500
.text:00004500
.text:00004500 ; [thunk]:public: virtual long __stdcall NCompress::CCopyCoder::QueryInterface`adjustor{8}' (struct _GUID const &, void * *)
.text:00004500                 public ?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z
.text:00004500 ?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z proc near
.text:00004500                                         ; DATA XREF: .rdata:const NCompress::CCopyCoder::`vftable'{for `ISequentialInStream'}o
.text:00004500
.text:00004500 arg_0           = dword ptr  4
.text:00004500
.text:00004500                 sub     [esp+arg_0], 8
.text:00004505                 jmp     ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)
.text:00004505 ?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z endp
.text:00004505
.text:00004505 ; ---------------------------------------------------------------------------
.text:0000450A                 align 4
.text:0000450A _text           ends
.text:0000450A
.text:0000450C ; ===========================================================================
.text:0000450C
.text:0000450C ; Segment type: Pure code
.text:0000450C ; Segment permissions: Read/Execute
.text:0000450C _text           segment para public 'CODE' use32
.text:0000450C                 assume cs:_text
.text:0000450C                 ;org 450Ch
.text:0000450C ; COMDAT (pick any)
.text:0000450C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000450C
.text:0000450C ; =============== S U B R O U T I N E =======================================
.text:0000450C
.text:0000450C
.text:0000450C ; [thunk]:public: virtual long __stdcall NCompress::CCopyCoder::QueryInterface`adjustor{12}' (struct _GUID const &, void * *)
.text:0000450C                 public ?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z
.text:0000450C ?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z proc near
.text:0000450C                                         ; DATA XREF: .rdata:const NCompress::CCopyCoder::`vftable'{for `ICompressGetInStreamProcessedSize'}o
.text:0000450C
.text:0000450C arg_0           = dword ptr  4
.text:0000450C
.text:0000450C                 sub     [esp+arg_0], 0Ch
.text:00004511                 jmp     ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)
.text:00004511 ?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z endp
.text:00004511
.text:00004511 ; ---------------------------------------------------------------------------
.text:00004516                 align 4
.text:00004516 _text           ends
.text:00004516
.text:00004518 ; ===========================================================================
.text:00004518
.text:00004518 ; Segment type: Pure code
.text:00004518 ; Segment permissions: Read/Execute
.text:00004518 _text           segment para public 'CODE' use32
.text:00004518                 assume cs:_text
.text:00004518                 ;org 4518h
.text:00004518 ; COMDAT (pick any)
.text:00004518                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004518
.text:00004518 ; =============== S U B R O U T I N E =======================================
.text:00004518
.text:00004518
.text:00004518 ; [thunk]:public: virtual unsigned long __stdcall NCrypto::NWzAes::CBaseCoder::AddRef`adjustor{4}' (void)
.text:00004518                 public ?AddRef@CBaseCoder@NWzAes@NCrypto@@W3AGKXZ
.text:00004518 ?AddRef@CBaseCoder@NWzAes@NCrypto@@W3AGKXZ proc near
.text:00004518                                         ; DATA XREF: .rdata:00002B10o
.text:00004518                                         ; .rdata:000035DCo
.text:00004518
.text:00004518 arg_0           = dword ptr  4
.text:00004518
.text:00004518                 sub     [esp+arg_0], 4
.text:0000451D                 jmp     ?AddRef@CBaseCoder@NWzAes@NCrypto@@UAGKXZ ; NCrypto::NWzAes::CBaseCoder::AddRef(void)
.text:0000451D ?AddRef@CBaseCoder@NWzAes@NCrypto@@W3AGKXZ endp
.text:0000451D
.text:0000451D ; ---------------------------------------------------------------------------
.text:00004522                 align 4
.text:00004522 _text           ends
.text:00004522
.text:00004524 ; ===========================================================================
.text:00004524
.text:00004524 ; Segment type: Pure code
.text:00004524 ; Segment permissions: Read/Execute
.text:00004524 _text           segment para public 'CODE' use32
.text:00004524                 assume cs:_text
.text:00004524                 ;org 4524h
.text:00004524 ; COMDAT (pick any)
.text:00004524                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004524
.text:00004524 ; =============== S U B R O U T I N E =======================================
.text:00004524
.text:00004524
.text:00004524 ; [thunk]:public: virtual unsigned long __stdcall NArchive::NZip::CLzmaEncoder::AddRef`adjustor{4}' (void)
.text:00004524                 public ?AddRef@CLzmaEncoder@NZip@NArchive@@W3AGKXZ
.text:00004524 ?AddRef@CLzmaEncoder@NZip@NArchive@@W3AGKXZ proc near
.text:00004524                                         ; DATA XREF: .rdata:00003214o
.text:00004524
.text:00004524 arg_0           = dword ptr  4
.text:00004524
.text:00004524                 sub     [esp+arg_0], 4
.text:00004529                 jmp     ?AddRef@CLzmaEncoder@NZip@NArchive@@UAGKXZ ; NArchive::NZip::CLzmaEncoder::AddRef(void)
.text:00004529 ?AddRef@CLzmaEncoder@NZip@NArchive@@W3AGKXZ endp
.text:00004529
.text:00004529 ; ---------------------------------------------------------------------------
.text:0000452E                 align 10h
.text:0000452E _text           ends
.text:0000452E
.text:00004530 ; ===========================================================================
.text:00004530
.text:00004530 ; Segment type: Pure code
.text:00004530 ; Segment permissions: Read/Execute
.text:00004530 _text           segment para public 'CODE' use32
.text:00004530                 assume cs:_text
.text:00004530                 ;org 4530h
.text:00004530 ; COMDAT (pick any)
.text:00004530                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004530
.text:00004530 ; =============== S U B R O U T I N E =======================================
.text:00004530
.text:00004530
.text:00004530 ; [thunk]:public: virtual unsigned long __stdcall NCrypto::NZip::CCipher::Release`adjustor{4}' (void)
.text:00004530                 public ?Release@CCipher@NZip@NCrypto@@W3AGKXZ
.text:00004530 ?Release@CCipher@NZip@NCrypto@@W3AGKXZ proc near
.text:00004530                                         ; DATA XREF: .rdata:00002F54o
.text:00004530                                         ; .rdata:000036E4o
.text:00004530
.text:00004530 arg_0           = dword ptr  4
.text:00004530
.text:00004530                 sub     [esp+arg_0], 4
.text:00004535                 jmp     ?Release@CCipher@NZip@NCrypto@@UAGKXZ ; NCrypto::NZip::CCipher::Release(void)
.text:00004535 ?Release@CCipher@NZip@NCrypto@@W3AGKXZ endp
.text:00004535
.text:00004535 _text           ends
.text:00004535
UNDEF:00004540 ; ===========================================================================
UNDEF:00004540
UNDEF:00004540 ; Segment type: Externs
UNDEF:00004540 ; UNDEF
UNDEF:00004540 ; _DWORD __thiscall NCompress::NLzma::CEncoder::CEncoder(NCompress::NLzma::CEncoder *__hidden this)
UNDEF:00004540                 extrn ??0CEncoder@NLzma@NCompress@@QAE@XZ:near
UNDEF:00004540                                         ; CODE XREF: NArchive::NZip::CLzmaEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+3Fp
UNDEF:00004544 ; void *__cdecl operator new(unsigned int)
UNDEF:00004544                 extrn ??2@YAPAXI@Z:near ; CODE XREF: NArchive::NZip::CLzmaEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+2Bp
UNDEF:00004544                                         ; NArchive::NZip::CLzmaEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+73p ...
UNDEF:00004548 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00004548                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00004548                                         ; CODE XREF: NArchive::NZip::CLzmaEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+1ACp
UNDEF:00004548                                         ; NArchive::NZip::CAddCommon::CalcStreamCRC(ISequentialInStream *,uint &)+BCp ...
UNDEF:0000454C                 extrn __RTC_CheckEsp:near
UNDEF:0000454C                                         ; CODE XREF: NArchive::NZip::CLzmaEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+E9p
UNDEF:0000454C                                         ; NArchive::NZip::CLzmaEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+132p ...
UNDEF:00004550                 extrn __RTC_Shutdown:near
UNDEF:00004550                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00004554                 extrn __RTC_InitBase:near
UNDEF:00004554                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00004558 ; const type_info::`vftable'
UNDEF:00004558                 extrn ??_7type_info@@6B@:near
UNDEF:00004558                                         ; DATA XREF: .data:CBufPtrSeqOutStream `RTTI Type Descriptor'o
UNDEF:00004558                                         ; .data:ISequentialOutStream `RTTI Type Descriptor'o ...
UNDEF:0000455C ; public: virtual long __stdcall CBufPtrSeqOutStream::Write(void const *, unsigned int, unsigned int *)
UNDEF:0000455C                 extrn ?Write@CBufPtrSeqOutStream@@UAGJPBXIPAI@Z:near
UNDEF:0000455C                                         ; DATA XREF: .rdata:0000158Co
UNDEF:00004560                 extrn __purecall:near   ; DATA XREF: .rdata:const ISequentialOutStream::`vftable'o
UNDEF:00004560                                         ; .rdata:00001774o ...
UNDEF:00004564                 extrn _IID_ISequentialOutStream:near
UNDEF:00004564                                         ; DATA XREF: CBufPtrSeqOutStream::QueryInterface(_GUID const &,void * *):loc_17D4o
UNDEF:00004568 ; const IID IID_IUnknown
UNDEF:00004568                 extrn _IID_IUnknown:near
UNDEF:00004568                                         ; DATA XREF: CBufPtrSeqOutStream::QueryInterface(_GUID const &,void * *)+Co
UNDEF:00004568                                         ; NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+24o ...
UNDEF:0000456C ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:0000456C                 extrn _memcmp:near      ; CODE XREF: IsEqualGUID(x,x)+Dp
UNDEF:00004570 ; void __cdecl operator delete(void *)
UNDEF:00004570                 extrn ??3@YAXPAX@Z:near ; CODE XREF: CBufPtrSeqOutStream::Release(void)+41p
UNDEF:00004570                                         ; __unwindfunclet$?Compress@CAddCommon@NZip@NArchive@@QAEJPAUISequentialInStream@@PAUIOutStream@@IPAUICompressProgressInfo@@AAUCCompressingResult@23@@Z$2+7p ...
UNDEF:00004574 ; __int32 __stdcall WriteStream(struct ISequentialOutStream *, const void *, unsigned int)
UNDEF:00004574                 extrn ?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z:near
UNDEF:00004574                                         ; CODE XREF: NArchive::NZip::CLzmaEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+22p
UNDEF:00004578                 extrn ___security_cookie:near
UNDEF:00004578                                         ; DATA XREF: NArchive::NZip::CAddCommon::CAddCommon(NArchive::NZip::CCompressionMethodMode const &)+19r
UNDEF:00004578                                         ; NArchive::NZip::CAddCommon::~CAddCommon(void)+19r ...
UNDEF:0000457C                 extrn ___CxxFrameHandler3:near
UNDEF:0000457C                                         ; CODE XREF: __ehhandler$??0CAddCommon@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z+16j
UNDEF:0000457C                                         ; __ehhandler$??1CAddCommon@NZip@NArchive@@QAE@XZ+16j ...
UNDEF:00004580 ; __fastcall __security_check_cookie(x)
UNDEF:00004580                 extrn @__security_check_cookie@4:near
UNDEF:00004580                                         ; CODE XREF: __ehhandler$??0CAddCommon@NZip@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z+Cp
UNDEF:00004580                                         ; __ehhandler$??1CAddCommon@NZip@NArchive@@QAE@XZ+Cp ...
UNDEF:00004584 ; public: __thiscall AString::AString(class AString const &)
UNDEF:00004584                 extrn ??0AString@@QAE@ABV0@@Z:near
UNDEF:00004584                                         ; CODE XREF: NArchive::NZip::CCompressionMethodMode::CCompressionMethodMode(NArchive::NZip::CCompressionMethodMode const &)+6Fp
UNDEF:00004588 ; __stdcall MidFree(x)
UNDEF:00004588                 extrn _MidFree@4:near   ; CODE XREF: NArchive::NZip::CAddCommon::~CAddCommon(void)+3Bp
UNDEF:0000458C ; __fastcall CrcUpdate(x, x, x)
UNDEF:0000458C                 extrn @CrcUpdate@12:near
UNDEF:0000458C                                         ; CODE XREF: NArchive::NZip::CAddCommon::CalcStreamCRC(ISequentialInStream *,uint &)+A8p
UNDEF:00004590 ; __stdcall MidAlloc(x)
UNDEF:00004590                 extrn _MidAlloc@4:near  ; CODE XREF: NArchive::NZip::CAddCommon::CalcStreamCRC(ISequentialInStream *,uint &)+2Fp
UNDEF:00004594 ; __int32 __thiscall NCrypto::NWzAes::CEncoder::WriteFooter(NCrypto::NWzAes::CEncoder *__hidden this, struct ISequentialOutStream *)
UNDEF:00004594                 extrn ?WriteFooter@CEncoder@NWzAes@NCrypto@@QAEJPAUISequentialOutStream@@@Z:near
UNDEF:00004594                                         ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+D8Dp
UNDEF:00004598 ; __int32 __thiscall CProps::SetCoderProps(CProps *__hidden this, struct ICompressSetCoderProperties *, const unsigned __int64 *)
UNDEF:00004598                 extrn ?SetCoderProps@CProps@@QBEJPAUICompressSetCoderProperties@@PB_K@Z:near
UNDEF:00004598                                         ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+B9Ep
UNDEF:0000459C                 extrn _IID_ICompressSetCoderProperties:near
UNDEF:0000459C                                         ; DATA XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+B42o
UNDEF:0000459C                                         ; NArchive::NZip::CLzmaEncoder::QueryInterface(_GUID const &,void * *):loc_33A1o
UNDEF:000045A0 ; long __stdcall CreateCoder(unsigned __int64, bool, class CMyComPtr<struct ICompressCoder> &)
UNDEF:000045A0                 extrn ?CreateCoder@@YGJ_K_NAAV?$CMyComPtr@UICompressCoder@@@@@Z:near
UNDEF:000045A0                                         ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+A9Fp
UNDEF:000045A4 ; _DWORD __thiscall NCompress::NPpmdZip::CEncoder::CEncoder(NCompress::NPpmdZip::CEncoder *__hidden this)
UNDEF:000045A4                 extrn ??0CEncoder@NPpmdZip@NCompress@@QAE@XZ:near
UNDEF:000045A4                                         ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+9E2p
UNDEF:000045A8 ; __int32 __thiscall NCrypto::NZip::CEncoder::WriteHeader_Check16(NCrypto::NZip::CEncoder *__hidden this, struct ISequentialOutStream *, unsigned __int16)
UNDEF:000045A8                 extrn ?WriteHeader_Check16@CEncoder@NZip@NCrypto@@QAEJPAUISequentialOutStream@@G@Z:near
UNDEF:000045A8                                         ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+695p
UNDEF:000045AC ; __int32 __thiscall NCrypto::NWzAes::CEncoder::WriteHeader(NCrypto::NWzAes::CEncoder *__hidden this, struct ISequentialOutStream *)
UNDEF:000045AC                 extrn ?WriteHeader@CEncoder@NWzAes@NCrypto@@QAEJPAUISequentialOutStream@@@Z:near
UNDEF:000045AC                                         ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+4C9p
UNDEF:000045B0 ; _DWORD __thiscall CFilterCoder::CFilterCoder(CFilterCoder *__hidden this, bool)
UNDEF:000045B0                 extrn ??0CFilterCoder@@QAE@_N@Z:near
UNDEF:000045B0                                         ; CODE XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+323p
UNDEF:000045B4                 extrn _IID_IInStream:near
UNDEF:000045B4                                         ; DATA XREF: NArchive::NZip::CAddCommon::Compress(ISequentialInStream *,IOutStream *,uint,ICompressProgressInfo *,NArchive::NZip::CCompressingResult &)+7Eo
UNDEF:000045B4                                         ; CInStreamWithCRC::QueryInterface(_GUID const &,void * *):loc_2984o
UNDEF:000045B8 ; public: virtual long __stdcall NCompress::CCopyCoder::Code(struct ISequentialInStream *, struct ISequentialOutStream *, unsigned __int64 const *, unsigned __int64 const *, struct ICompressProgressInfo *)
UNDEF:000045B8                 extrn ?Code@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z:near
UNDEF:000045B8                                         ; DATA XREF: .rdata:0000209Co
UNDEF:000045BC ; public: virtual long __stdcall NCompress::CCopyCoder::SetInStream(struct ISequentialInStream *)
UNDEF:000045BC                 extrn ?SetInStream@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@@Z:near
UNDEF:000045BC                                         ; DATA XREF: .rdata:00002084o
UNDEF:000045C0 ; public: virtual long __stdcall NCompress::CCopyCoder::ReleaseInStream(void)
UNDEF:000045C0                 extrn ?ReleaseInStream@CCopyCoder@NCompress@@UAGJXZ:near
UNDEF:000045C0                                         ; DATA XREF: .rdata:00002088o
UNDEF:000045C4 ; public: virtual long __stdcall NCompress::CCopyCoder::Read(void *, unsigned int, unsigned int *)
UNDEF:000045C4                 extrn ?Read@CCopyCoder@NCompress@@UAGJPAXIPAI@Z:near
UNDEF:000045C4                                         ; DATA XREF: .rdata:00002070o
UNDEF:000045C8 ; public: virtual long __stdcall NCompress::CCopyCoder::GetInStreamProcessedSize(unsigned __int64 *)
UNDEF:000045C8                 extrn ?GetInStreamProcessedSize@CCopyCoder@NCompress@@UAGJPA_K@Z:near
UNDEF:000045C8                                         ; DATA XREF: .rdata:0000205Co
UNDEF:000045CC                 extrn _IID_ICompressGetInStreamProcessedSize:near
UNDEF:000045CC                                         ; DATA XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *):loc_24E6o
UNDEF:000045D0                 extrn _IID_ISequentialInStream:near
UNDEF:000045D0                                         ; DATA XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *):loc_24B2o
UNDEF:000045D4                 extrn _IID_ICompressSetInStream:near
UNDEF:000045D4                                         ; DATA XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *):loc_247Eo
UNDEF:000045D8                 extrn _IID_ICompressCoder:near
UNDEF:000045D8                                         ; DATA XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *):loc_245Fo
UNDEF:000045DC ; _DWORD __thiscall NCompress::CCopyCoder::~CCopyCoder(NCompress::CCopyCoder *__hidden this)
UNDEF:000045DC                 extrn ??1CCopyCoder@NCompress@@QAE@XZ:near
UNDEF:000045DC                                         ; CODE XREF: NCompress::CCopyCoder::`scalar deleting destructor'(uint)+11p
UNDEF:000045E0 ; public: virtual long __stdcall CInStreamWithCRC::Read(void *, unsigned int, unsigned int *)
UNDEF:000045E0                 extrn ?Read@CInStreamWithCRC@@UAGJPAXIPAI@Z:near
UNDEF:000045E0                                         ; DATA XREF: .rdata:0000282Co
UNDEF:000045E4 ; public: virtual long __stdcall CInStreamWithCRC::Seek(__int64, unsigned int, unsigned __int64 *)
UNDEF:000045E4                 extrn ?Seek@CInStreamWithCRC@@UAGJ_JIPA_K@Z:near
UNDEF:000045E4                                         ; DATA XREF: .rdata:00002830o
UNDEF:000045E8 ; public: virtual long __stdcall NCrypto::NWzAes::CBaseCoder::Init(void)
UNDEF:000045E8                 extrn ?Init@CBaseCoder@NWzAes@NCrypto@@UAGJXZ:near
UNDEF:000045E8                                         ; DATA XREF: .rdata:00002B2Co
UNDEF:000045E8                                         ; .rdata:000035F8o
UNDEF:000045EC ; public: virtual unsigned int __stdcall NCrypto::NWzAes::CEncoder::Filter(unsigned char *, unsigned int)
UNDEF:000045EC                 extrn ?Filter@CEncoder@NWzAes@NCrypto@@UAGIPAEI@Z:near
UNDEF:000045EC                                         ; DATA XREF: .rdata:00002B30o
UNDEF:000045F0 ; public: virtual long __stdcall NCrypto::NWzAes::CBaseCoder::CryptoSetPassword(unsigned char const *, unsigned int)
UNDEF:000045F0                 extrn ?CryptoSetPassword@CBaseCoder@NWzAes@NCrypto@@UAGJPBEI@Z:near
UNDEF:000045F0                                         ; DATA XREF: .rdata:00002B18o
UNDEF:000045F0                                         ; .rdata:000035E4o
UNDEF:000045F4                 extrn _IID_ICryptoSetPassword:near
UNDEF:000045F4                                         ; DATA XREF: NCrypto::NWzAes::CBaseCoder::QueryInterface(_GUID const &,void * *):loc_2D7Do
UNDEF:000045F4                                         ; NCrypto::NZip::CCipher::QueryInterface(_GUID const &,void * *):loc_30C9o
UNDEF:000045F8 ; public: virtual long __stdcall NCrypto::NZip::CCipher::Init(void)
UNDEF:000045F8                 extrn ?Init@CCipher@NZip@NCrypto@@UAGJXZ:near
UNDEF:000045F8                                         ; DATA XREF: .rdata:00002F6Co
UNDEF:000045F8                                         ; .rdata:000036FCo
UNDEF:000045FC ; public: virtual unsigned int __stdcall NCrypto::NZip::CEncoder::Filter(unsigned char *, unsigned int)
UNDEF:000045FC                 extrn ?Filter@CEncoder@NZip@NCrypto@@UAGIPAEI@Z:near
UNDEF:000045FC                                         ; DATA XREF: .rdata:00002F70o
UNDEF:00004600 ; public: virtual long __stdcall NCrypto::NZip::CCipher::CryptoSetPassword(unsigned char const *, unsigned int)
UNDEF:00004600                 extrn ?CryptoSetPassword@CCipher@NZip@NCrypto@@UAGJPBEI@Z:near
UNDEF:00004600                                         ; DATA XREF: .rdata:00002F58o
UNDEF:00004600                                         ; .rdata:000036E8o
UNDEF:00004604 ; _DWORD __thiscall NCrypto::NWzAes::CAesCtr2::CAesCtr2(NCrypto::NWzAes::CAesCtr2 *__hidden this)
UNDEF:00004604                 extrn ??0CAesCtr2@NWzAes@NCrypto@@QAE@XZ:near
UNDEF:00004604                                         ; CODE XREF: NCrypto::NWzAes::CBaseCoder::CBaseCoder(void)+79p
UNDEF:00004608 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:00004608                 extrn _memcpy:near      ; CODE XREF: CRecordVector<uchar>::CRecordVector<uchar>(CRecordVector<uchar> const &)+85p
UNDEF:0000460C ; _DWORD __thiscall NWindows::NCOM::CPropVariant::CPropVariant(NWindows::NCOM::CPropVariant *__hidden this, const struct NWindows::NCOM::CPropVariant *)
UNDEF:0000460C                 extrn ??0CPropVariant@NCOM@NWindows@@QAE@ABV012@@Z:near
UNDEF:0000460C                                         ; CODE XREF: CProp::CProp(CProp const &)+31p
UNDEF:00004610 ; __int32 __thiscall NWindows::NCOM::CPropVariant::Clear(NWindows::NCOM::CPropVariant *__hidden this)
UNDEF:00004610                 extrn ?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ:near
UNDEF:00004610                                         ; CODE XREF: NWindows::NCOM::CPropVariant::~CPropVariant(void)+11p
UNDEF:00004610
UNDEF:00004610
UNDEF:00004610                 end