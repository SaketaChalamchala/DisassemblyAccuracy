.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : D4348CA39ABE8074A92B51DFF18A67F0
.rdata:00000000 ; Input CRC32 : F6A19698
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\ErrorMsg.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 _rdata          segment dword public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 ; char _SG67193[]
.rdata:00000000 $SG67193        db 'Error #',0          ; DATA XREF: NWindows::NError::MyFormatMessage(ulong)+CBo
.rdata:00000000 _rdata          ends
.rdata:00000000
.text:00000008 ; ===========================================================================
.text:00000008
.text:00000008 ; Segment type: Pure code
.text:00000008 ; Segment permissions: Read/Execute
.text:00000008 _text           segment para public 'CODE' use32
.text:00000008                 assume cs:_text
.text:00000008                 ;org 8
.text:00000008                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000008
.text:00000008 ; =============== S U B R O U T I N E =======================================
.text:00000008
.text:00000008 ; Attributes: bp-based frame
.text:00000008
.text:00000008 ; class UString __stdcall NWindows::NError::MyFormatMessage(unsigned long)
.text:00000008                 public ?MyFormatMessage@NError@NWindows@@YG?AVUString@@K@Z
.text:00000008 ?MyFormatMessage@NError@NWindows@@YG?AVUString@@K@Z proc near
.text:00000008
.text:00000008 var_4C          = dword ptr -4Ch
.text:00000008 var_48          = dword ptr -48h
.text:00000008 var_44          = dword ptr -44h
.text:00000008 var_40          = dword ptr -40h
.text:00000008 var_38          = byte ptr -38h
.text:00000008 var_30          = byte ptr -30h
.text:00000008 var_20          = dword ptr -20h
.text:00000008 var_10          = dword ptr -10h
.text:00000008 var_C           = dword ptr -0Ch
.text:00000008 var_4           = dword ptr -4
.text:00000008 arg_0           = dword ptr  8
.text:00000008 dwMessageId     = dword ptr  0Ch
.text:00000008
.text:00000008                 push    ebp
.text:00000009                 mov     ebp, esp
.text:0000000B                 push    0FFFFFFFFh
.text:0000000D                 push    offset __ehhandler$?MyFormatMessage@NError@NWindows@@YG?AVUString@@K@Z
.text:00000012                 mov     eax, large fs:0
.text:00000018                 push    eax
.text:00000019                 sub     esp, 40h
.text:0000001C                 push    esi
.text:0000001D                 push    edi
.text:0000001E                 lea     edi, [ebp+var_4C]
.text:00000021                 mov     ecx, 10h
.text:00000026                 mov     eax, 0CCCCCCCCh
.text:0000002B                 rep stosd
.text:0000002D                 mov     eax, dword ptr ds:___security_cookie
.text:00000032                 xor     eax, ebp
.text:00000034                 mov     [ebp+var_10], eax
.text:00000037                 push    eax
.text:00000038                 lea     eax, [ebp+var_C]
.text:0000003B                 mov     large fs:0, eax
.text:00000041                 mov     [ebp+var_48], 0
.text:00000048                 lea     ecx, [ebp+var_20]
.text:0000004B                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00000050                 mov     [ebp+var_4], 1
.text:00000057                 lea     eax, [ebp+var_20]
.text:0000005A                 push    eax             ; int
.text:0000005B                 mov     ecx, [ebp+dwMessageId]
.text:0000005E                 push    ecx             ; dwMessageId
.text:0000005F                 call    ?MyFormatMessage@NError@NWindows@@YG_NKAAVUString@@@Z ; NWindows::NError::MyFormatMessage(ulong,UString &)
.text:00000064                 movzx   edx, al
.text:00000067                 test    edx, edx
.text:00000069                 jz      short loc_7A
.text:0000006B                 lea     ecx, [ebp+var_20] ; this
.text:0000006E                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:00000073                 movzx   eax, al
.text:00000076                 test    eax, eax
.text:00000078                 jz      short loc_EE
.text:0000007A
.text:0000007A loc_7A:                                 ; CODE XREF: NWindows::NError::MyFormatMessage(ulong)+61j
.text:0000007A                 mov     [ebp+var_40], 0
.text:00000081                 jmp     short loc_8C
.text:00000083 ; ---------------------------------------------------------------------------
.text:00000083
.text:00000083 loc_83:                                 ; CODE XREF: NWindows::NError::MyFormatMessage(ulong)+C5j
.text:00000083                 mov     ecx, [ebp+var_40]
.text:00000086                 add     ecx, 1
.text:00000089                 mov     [ebp+var_40], ecx
.text:0000008C
.text:0000008C loc_8C:                                 ; CODE XREF: NWindows::NError::MyFormatMessage(ulong)+79j
.text:0000008C                 cmp     [ebp+var_40], 8
.text:00000090                 jge     short loc_CF
.text:00000092                 mov     edx, [ebp+dwMessageId]
.text:00000095                 and     edx, 0Fh
.text:00000098                 mov     [ebp+var_44], edx
.text:0000009B                 mov     eax, [ebp+dwMessageId]
.text:0000009E                 shr     eax, 4
.text:000000A1                 mov     [ebp+dwMessageId], eax
.text:000000A4                 cmp     [ebp+var_44], 0Ah
.text:000000A8                 jnb     short loc_B5
.text:000000AA                 mov     ecx, [ebp+var_44]
.text:000000AD                 add     ecx, 30h ; '0'
.text:000000B0                 mov     [ebp+var_4C], ecx
.text:000000B3                 jmp     short loc_BE
.text:000000B5 ; ---------------------------------------------------------------------------
.text:000000B5
.text:000000B5 loc_B5:                                 ; CODE XREF: NWindows::NError::MyFormatMessage(ulong)+A0j
.text:000000B5                 mov     edx, [ebp+var_44]
.text:000000B8                 add     edx, 37h ; '7'
.text:000000BB                 mov     [ebp+var_4C], edx
.text:000000BE
.text:000000BE loc_BE:                                 ; CODE XREF: NWindows::NError::MyFormatMessage(ulong)+ABj
.text:000000BE                 mov     eax, 7
.text:000000C3                 sub     eax, [ebp+var_40]
.text:000000C6                 mov     cl, byte ptr [ebp+var_4C]
.text:000000C9                 mov     [ebp+eax+var_38], cl
.text:000000CD                 jmp     short loc_83
.text:000000CF ; ---------------------------------------------------------------------------
.text:000000CF
.text:000000CF loc_CF:                                 ; CODE XREF: NWindows::NError::MyFormatMessage(ulong)+88j
.text:000000CF                 mov     [ebp+var_30], 0
.text:000000D3                 push    offset $SG67193 ; "Error #"
.text:000000D8                 lea     ecx, [ebp+var_20] ; this
.text:000000DB                 call    ?AddAscii@UString@@QAEXPBD@Z ; UString::AddAscii(char const *)
.text:000000E0                 lea     edx, [ebp+var_38]
.text:000000E3                 push    edx             ; char *
.text:000000E4                 lea     ecx, [ebp+var_20] ; this
.text:000000E7                 call    ?AddAscii@UString@@QAEXPBD@Z ; UString::AddAscii(char const *)
.text:000000EC                 jmp     short loc_147
.text:000000EE ; ---------------------------------------------------------------------------
.text:000000EE
.text:000000EE loc_EE:                                 ; CODE XREF: NWindows::NError::MyFormatMessage(ulong)+70j
.text:000000EE                 lea     ecx, [ebp+var_20] ; this
.text:000000F1                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:000000F6                 cmp     eax, 2
.text:000000F9                 jb      short loc_147
.text:000000FB                 lea     ecx, [ebp+var_20]
.text:000000FE                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00000103                 mov     esi, eax
.text:00000105                 lea     ecx, [ebp+var_20] ; this
.text:00000108                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:0000010D                 movzx   eax, word ptr [esi+eax*2-2]
.text:00000112                 cmp     eax, 0Ah
.text:00000115                 jnz     short loc_147
.text:00000117                 lea     ecx, [ebp+var_20]
.text:0000011A                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:0000011F                 mov     esi, eax
.text:00000121                 lea     ecx, [ebp+var_20] ; this
.text:00000124                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:00000129                 movzx   ecx, word ptr [esi+eax*2-4]
.text:0000012E                 cmp     ecx, 0Dh
.text:00000131                 jnz     short loc_147
.text:00000133                 lea     ecx, [ebp+var_20] ; this
.text:00000136                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:0000013B                 sub     eax, 2
.text:0000013E                 push    eax             ; unsigned int
.text:0000013F                 lea     ecx, [ebp+var_20] ; this
.text:00000142                 call    ?DeleteFrom@UString@@QAEXI@Z ; UString::DeleteFrom(uint)
.text:00000147
.text:00000147 loc_147:                                ; CODE XREF: NWindows::NError::MyFormatMessage(ulong)+E4j
.text:00000147                                         ; NWindows::NError::MyFormatMessage(ulong)+F1j ...
.text:00000147                 lea     edx, [ebp+var_20]
.text:0000014A                 push    edx
.text:0000014B                 mov     ecx, [ebp+arg_0]
.text:0000014E                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:00000153                 mov     eax, [ebp+var_48]
.text:00000156                 or      eax, 1
.text:00000159                 mov     [ebp+var_48], eax
.text:0000015C                 mov     byte ptr [ebp+var_4], 0
.text:00000160                 lea     ecx, [ebp+var_20] ; this
.text:00000163                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000168                 mov     eax, [ebp+arg_0]
.text:0000016B                 push    edx
.text:0000016C                 mov     ecx, ebp
.text:0000016E                 push    eax
.text:0000016F                 lea     edx, $LN19
.text:00000175                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000017A                 pop     eax
.text:0000017B                 pop     edx
.text:0000017C                 mov     ecx, [ebp+var_C]
.text:0000017F                 mov     large fs:0, ecx
.text:00000186                 pop     ecx
.text:00000187                 pop     edi
.text:00000188                 pop     esi
.text:00000189                 mov     ecx, [ebp+var_10]
.text:0000018C                 xor     ecx, ebp
.text:0000018E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000193                 add     esp, 4Ch
.text:00000196                 cmp     ebp, esp
.text:00000198                 call    __RTC_CheckEsp
.text:0000019D                 mov     esp, ebp
.text:0000019F                 pop     ebp
.text:000001A0                 retn    8
.text:000001A0 ?MyFormatMessage@NError@NWindows@@YG?AVUString@@K@Z endp
.text:000001A0
.text:000001A0 ; ---------------------------------------------------------------------------
.text:000001A3                 align 4
.text:000001A4 $LN19           dd 2                    ; DATA XREF: NWindows::NError::MyFormatMessage(ulong)+167o
.text:000001A8                 dd offset $LN18
.text:000001AC $LN18           dd 0FFFFFFE0h, 0Ch      ; DATA XREF: .text:000001A8o
.text:000001B4                 dd offset $LN15
.text:000001B8                 dd 0FFFFFFC8h, 10h
.text:000001C0                 dd offset $LN16
.text:000001C4 $LN16           db 73h, 0               ; DATA XREF: .text:000001C0o
.text:000001C6 $LN15           dw 6Dh                  ; DATA XREF: .text:000001B4o
.text:000001C8
.text:000001C8 ; =============== S U B R O U T I N E =======================================
.text:000001C8
.text:000001C8 ; Attributes: bp-based frame
.text:000001C8
.text:000001C8 ; int __stdcall NWindows::NError::MyFormatMessage(DWORD dwMessageId, int)
.text:000001C8 ?MyFormatMessage@NError@NWindows@@YG_NKAAVUString@@@Z proc near
.text:000001C8                                         ; CODE XREF: NWindows::NError::MyFormatMessage(ulong)+57p
.text:000001C8
.text:000001C8 var_38          = dword ptr -38h
.text:000001C8 var_34          = dword ptr -34h
.text:000001C8 var_30          = byte ptr -30h
.text:000001C8 var_24          = byte ptr -24h
.text:000001C8 Buffer          = byte ptr -14h
.text:000001C8 var_C           = dword ptr -0Ch
.text:000001C8 var_4           = dword ptr -4
.text:000001C8 dwMessageId     = dword ptr  8
.text:000001C8 arg_4           = dword ptr  0Ch
.text:000001C8
.text:000001C8                 push    ebp
.text:000001C9                 mov     ebp, esp
.text:000001CB                 push    0FFFFFFFFh
.text:000001CD                 push    offset __ehhandler$?MyFormatMessage@NError@NWindows@@YG_NKAAVUString@@@Z
.text:000001D2                 mov     eax, large fs:0
.text:000001D8                 push    eax
.text:000001D9                 sub     esp, 2Ch
.text:000001DC                 push    esi
.text:000001DD                 push    edi
.text:000001DE                 lea     edi, [ebp+var_38]
.text:000001E1                 mov     ecx, 0Bh
.text:000001E6                 mov     eax, 0CCCCCCCCh
.text:000001EB                 rep stosd
.text:000001ED                 mov     eax, dword ptr ds:___security_cookie
.text:000001F2                 xor     eax, ebp
.text:000001F4                 push    eax
.text:000001F5                 lea     eax, [ebp+var_C]
.text:000001F8                 mov     large fs:0, eax
.text:000001FE                 movzx   eax, byte ptr ds:?g_IsNT@@3_NA ; bool g_IsNT
.text:00000205                 test    eax, eax
.text:00000207                 jnz     loc_292
.text:0000020D                 mov     esi, esp
.text:0000020F                 push    0               ; Arguments
.text:00000211                 push    0               ; nSize
.text:00000213                 lea     ecx, [ebp+Buffer]
.text:00000216                 push    ecx             ; lpBuffer
.text:00000217                 push    0               ; dwLanguageId
.text:00000219                 mov     edx, [ebp+dwMessageId]
.text:0000021C                 push    edx             ; dwMessageId
.text:0000021D                 push    0               ; lpSource
.text:0000021F                 push    1300h           ; dwFlags
.text:00000224                 call    dword ptr ds:__imp__FormatMessageA@28 ; FormatMessageA(x,x,x,x,x,x,x)
.text:0000022A                 cmp     esi, esp
.text:0000022C                 call    __RTC_CheckEsp
.text:00000231                 test    eax, eax
.text:00000233                 jnz     short loc_23C
.text:00000235                 xor     al, al
.text:00000237                 jmp     loc_2DF
.text:0000023C ; ---------------------------------------------------------------------------
.text:0000023C
.text:0000023C loc_23C:                                ; CODE XREF: NWindows::NError::MyFormatMessage(ulong,UString &)+6Bj
.text:0000023C                 mov     eax, dword ptr [ebp+Buffer]
.text:0000023F                 push    eax             ; char *
.text:00000240                 lea     ecx, [ebp+var_24] ; this
.text:00000243                 call    ??0AString@@QAE@PBD@Z ; AString::AString(char const *)
.text:00000248                 mov     [ebp+var_4], 0
.text:0000024F                 lea     ecx, [ebp+var_24]
.text:00000252                 push    ecx
.text:00000253                 lea     edx, [ebp+var_30]
.text:00000256                 push    edx
.text:00000257                 call    ?GetUnicodeString@@YG?AVUString@@ABVAString@@@Z ; GetUnicodeString(AString const &)
.text:0000025C                 mov     [ebp+var_34], eax
.text:0000025F                 mov     eax, [ebp+var_34]
.text:00000262                 mov     [ebp+var_38], eax
.text:00000265                 mov     byte ptr [ebp+var_4], 1
.text:00000269                 mov     ecx, [ebp+var_38]
.text:0000026C                 push    ecx
.text:0000026D                 mov     ecx, [ebp+arg_4]
.text:00000270                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:00000275                 mov     byte ptr [ebp+var_4], 0
.text:00000279                 lea     ecx, [ebp+var_30] ; this
.text:0000027C                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000281                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000288                 lea     ecx, [ebp+var_24] ; this
.text:0000028B                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00000290                 jmp     short loc_2CA
.text:00000292 ; ---------------------------------------------------------------------------
.text:00000292
.text:00000292 loc_292:                                ; CODE XREF: NWindows::NError::MyFormatMessage(ulong,UString &)+3Fj
.text:00000292                 mov     esi, esp
.text:00000294                 push    0               ; Arguments
.text:00000296                 push    0               ; nSize
.text:00000298                 lea     edx, [ebp+Buffer]
.text:0000029B                 push    edx             ; lpBuffer
.text:0000029C                 push    0               ; dwLanguageId
.text:0000029E                 mov     eax, [ebp+dwMessageId]
.text:000002A1                 push    eax             ; dwMessageId
.text:000002A2                 push    0               ; lpSource
.text:000002A4                 push    1300h           ; dwFlags
.text:000002A9                 call    dword ptr ds:__imp__FormatMessageW@28 ; FormatMessageW(x,x,x,x,x,x,x)
.text:000002AF                 cmp     esi, esp
.text:000002B1                 call    __RTC_CheckEsp
.text:000002B6                 test    eax, eax
.text:000002B8                 jnz     short loc_2BE
.text:000002BA                 xor     al, al
.text:000002BC                 jmp     short loc_2DF
.text:000002BE ; ---------------------------------------------------------------------------
.text:000002BE
.text:000002BE loc_2BE:                                ; CODE XREF: NWindows::NError::MyFormatMessage(ulong,UString &)+F0j
.text:000002BE                 mov     ecx, dword ptr [ebp+Buffer]
.text:000002C1                 push    ecx
.text:000002C2                 mov     ecx, [ebp+arg_4]
.text:000002C5                 call    ??4UString@@QAEAAV0@PB_W@Z ; UString::operator=(wchar_t const *)
.text:000002CA
.text:000002CA loc_2CA:                                ; CODE XREF: NWindows::NError::MyFormatMessage(ulong,UString &)+C8j
.text:000002CA                 mov     esi, esp
.text:000002CC                 mov     edx, dword ptr [ebp+Buffer]
.text:000002CF                 push    edx             ; hMem
.text:000002D0                 call    dword ptr ds:__imp__LocalFree@4 ; LocalFree(x)
.text:000002D6                 cmp     esi, esp
.text:000002D8                 call    __RTC_CheckEsp
.text:000002DD                 mov     al, 1
.text:000002DF
.text:000002DF loc_2DF:                                ; CODE XREF: NWindows::NError::MyFormatMessage(ulong,UString &)+6Fj
.text:000002DF                                         ; NWindows::NError::MyFormatMessage(ulong,UString &)+F4j
.text:000002DF                 push    edx
.text:000002E0                 mov     ecx, ebp
.text:000002E2                 push    eax
.text:000002E3                 lea     edx, $LN12
.text:000002E9                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000002EE                 pop     eax
.text:000002EF                 pop     edx
.text:000002F0                 mov     ecx, [ebp+var_C]
.text:000002F3                 mov     large fs:0, ecx
.text:000002FA                 pop     ecx
.text:000002FB                 pop     edi
.text:000002FC                 pop     esi
.text:000002FD                 add     esp, 38h
.text:00000300                 cmp     ebp, esp
.text:00000302                 call    __RTC_CheckEsp
.text:00000307                 mov     esp, ebp
.text:00000309                 pop     ebp
.text:0000030A                 retn    8
.text:0000030A ?MyFormatMessage@NError@NWindows@@YG_NKAAVUString@@@Z endp
.text:0000030A
.text:0000030A ; ---------------------------------------------------------------------------
.text:0000030D                 align 10h
.text:00000310 $LN12           dd 1                    ; DATA XREF: NWindows::NError::MyFormatMessage(ulong,UString &)+11Bo
.text:00000314                 dd offset $LN11
.text:00000318 $LN11           dd 0FFFFFFECh, 4        ; DATA XREF: .text:00000314o
.text:00000320                 dd offset $LN9          ; "msgBuf"
.text:00000324 $LN9            db 'msgBuf',0           ; DATA XREF: .text:00000320o
.text:0000032B                 align 4
.text:0000032B _text           ends
.text:0000032B
.text$x:0000032C ; ===========================================================================
.text$x:0000032C
.text$x:0000032C ; Segment type: Pure code
.text$x:0000032C ; Segment permissions: Read/Execute
.text$x:0000032C _text$x         segment para public 'CODE' use32
.text$x:0000032C                 assume cs:_text$x
.text$x:0000032C                 ;org 32Ch
.text$x:0000032C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000032C
.text$x:0000032C ; =============== S U B R O U T I N E =======================================
.text$x:0000032C
.text$x:0000032C
.text$x:0000032C __unwindfunclet$?MyFormatMessage@NError@NWindows@@YG?AVUString@@K@Z$0 proc near
.text$x:0000032C                                         ; DATA XREF: .xdata$x:000003ACo
.text$x:0000032C                 lea     ecx, [ebp-20h]  ; this
.text$x:0000032F                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000032F __unwindfunclet$?MyFormatMessage@NError@NWindows@@YG?AVUString@@K@Z$0 endp
.text$x:0000032F
.text$x:00000334
.text$x:00000334 ; =============== S U B R O U T I N E =======================================
.text$x:00000334
.text$x:00000334
.text$x:00000334 __unwindfunclet$?MyFormatMessage@NError@NWindows@@YG?AVUString@@K@Z$1 proc near
.text$x:00000334                                         ; DATA XREF: .xdata$x:000003A4o
.text$x:00000334                 mov     eax, [ebp-48h]
.text$x:00000337                 and     eax, 1
.text$x:0000033A                 jz      locret_34C
.text$x:00000340                 and     dword ptr [ebp-48h], 0FFFFFFFEh
.text$x:00000344                 mov     ecx, [ebp+8]    ; this
.text$x:00000347                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000034C ; ---------------------------------------------------------------------------
.text$x:0000034C
.text$x:0000034C locret_34C:                             ; CODE XREF: __unwindfunclet$?MyFormatMessage@NError@NWindows@@YG?AVUString@@K@Z$1+6j
.text$x:0000034C                 retn
.text$x:0000034C __unwindfunclet$?MyFormatMessage@NError@NWindows@@YG?AVUString@@K@Z$1 endp
.text$x:0000034C
.text$x:0000034D
.text$x:0000034D ; =============== S U B R O U T I N E =======================================
.text$x:0000034D
.text$x:0000034D
.text$x:0000034D __ehhandler$?MyFormatMessage@NError@NWindows@@YG?AVUString@@K@Z proc near
.text$x:0000034D                                         ; DATA XREF: NWindows::NError::MyFormatMessage(ulong)+5o
.text$x:0000034D
.text$x:0000034D arg_4           = dword ptr  8
.text$x:0000034D
.text$x:0000034D                 mov     edx, [esp+arg_4]
.text$x:00000351                 lea     eax, [edx+0Ch]
.text$x:00000354                 mov     ecx, [edx-4Ch]
.text$x:00000357                 xor     ecx, eax
.text$x:00000359                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000035E                 mov     ecx, [edx-4]
.text$x:00000361                 xor     ecx, eax
.text$x:00000363                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000368                 mov     eax, offset __ehfuncinfo$?MyFormatMessage@NError@NWindows@@YG?AVUString@@K@Z
.text$x:0000036D                 jmp     ___CxxFrameHandler3
.text$x:0000036D __ehhandler$?MyFormatMessage@NError@NWindows@@YG?AVUString@@K@Z endp
.text$x:0000036D
.text$x:00000372
.text$x:00000372 ; =============== S U B R O U T I N E =======================================
.text$x:00000372
.text$x:00000372
.text$x:00000372 __unwindfunclet$?MyFormatMessage@NError@NWindows@@YG_NKAAVUString@@@Z$0 proc near
.text$x:00000372                                         ; DATA XREF: .xdata$x:000003D8o
.text$x:00000372                 lea     ecx, [ebp-24h]  ; this
.text$x:00000375                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00000375 __unwindfunclet$?MyFormatMessage@NError@NWindows@@YG_NKAAVUString@@@Z$0 endp
.text$x:00000375
.text$x:0000037A
.text$x:0000037A ; =============== S U B R O U T I N E =======================================
.text$x:0000037A
.text$x:0000037A
.text$x:0000037A __unwindfunclet$?MyFormatMessage@NError@NWindows@@YG_NKAAVUString@@@Z$1 proc near
.text$x:0000037A                                         ; DATA XREF: .xdata$x:000003E0o
.text$x:0000037A                 lea     ecx, [ebp-30h]  ; this
.text$x:0000037D                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000037D __unwindfunclet$?MyFormatMessage@NError@NWindows@@YG_NKAAVUString@@@Z$1 endp
.text$x:0000037D
.text$x:00000382
.text$x:00000382 ; =============== S U B R O U T I N E =======================================
.text$x:00000382
.text$x:00000382
.text$x:00000382 __ehhandler$?MyFormatMessage@NError@NWindows@@YG_NKAAVUString@@@Z proc near
.text$x:00000382                                         ; DATA XREF: NWindows::NError::MyFormatMessage(ulong,UString &)+5o
.text$x:00000382
.text$x:00000382 arg_4           = dword ptr  8
.text$x:00000382
.text$x:00000382                 mov     edx, [esp+arg_4]
.text$x:00000386                 lea     eax, [edx+0Ch]
.text$x:00000389                 mov     ecx, [edx-38h]
.text$x:0000038C                 xor     ecx, eax
.text$x:0000038E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000393                 mov     eax, offset __ehfuncinfo$?MyFormatMessage@NError@NWindows@@YG_NKAAVUString@@@Z
.text$x:00000398                 jmp     ___CxxFrameHandler3
.text$x:00000398 __ehhandler$?MyFormatMessage@NError@NWindows@@YG_NKAAVUString@@@Z endp
.text$x:00000398
.text$x:00000398 ; ---------------------------------------------------------------------------
.text$x:0000039D                 align 10h
.text$x:0000039D _text$x         ends
.text$x:0000039D
.xdata$x:000003A0 ; ===========================================================================
.xdata$x:000003A0
.xdata$x:000003A0 ; Segment type: Pure data
.xdata$x:000003A0 ; Segment permissions: Read
.xdata$x:000003A0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000003A0                 assume cs:_xdata$x
.xdata$x:000003A0                 ;org 3A0h
.xdata$x:000003A0 __unwindtable$?MyFormatMessage@NError@NWindows@@YG?AVUString@@K@Z db 0FFh
.xdata$x:000003A0                                         ; DATA XREF: .xdata$x:000003B8o
.xdata$x:000003A1                 db 0FFh
.xdata$x:000003A2                 db 0FFh
.xdata$x:000003A3                 db 0FFh
.xdata$x:000003A4                 dd offset __unwindfunclet$?MyFormatMessage@NError@NWindows@@YG?AVUString@@K@Z$1
.xdata$x:000003A8                 db    0
.xdata$x:000003A9                 db    0
.xdata$x:000003AA                 db    0
.xdata$x:000003AB                 db    0
.xdata$x:000003AC                 dd offset __unwindfunclet$?MyFormatMessage@NError@NWindows@@YG?AVUString@@K@Z$0
.xdata$x:000003B0 __ehfuncinfo$?MyFormatMessage@NError@NWindows@@YG?AVUString@@K@Z db  22h ; "
.xdata$x:000003B0                                         ; DATA XREF: __ehhandler$?MyFormatMessage@NError@NWindows@@YG?AVUString@@K@Z+1Bo
.xdata$x:000003B1                 db    5
.xdata$x:000003B2                 db  93h ; ô
.xdata$x:000003B3                 db  19h
.xdata$x:000003B4                 db    2
.xdata$x:000003B5                 db    0
.xdata$x:000003B6                 db    0
.xdata$x:000003B7                 db    0
.xdata$x:000003B8                 dd offset __unwindtable$?MyFormatMessage@NError@NWindows@@YG?AVUString@@K@Z
.xdata$x:000003BC                 db    0
.xdata$x:000003BD                 db    0
.xdata$x:000003BE                 db    0
.xdata$x:000003BF                 db    0
.xdata$x:000003C0                 db    0
.xdata$x:000003C1                 db    0
.xdata$x:000003C2                 db    0
.xdata$x:000003C3                 db    0
.xdata$x:000003C4                 db    0
.xdata$x:000003C5                 db    0
.xdata$x:000003C6                 db    0
.xdata$x:000003C7                 db    0
.xdata$x:000003C8                 db    0
.xdata$x:000003C9                 db    0
.xdata$x:000003CA                 db    0
.xdata$x:000003CB                 db    0
.xdata$x:000003CC                 db    0
.xdata$x:000003CD                 db    0
.xdata$x:000003CE                 db    0
.xdata$x:000003CF                 db    0
.xdata$x:000003D0                 db    1
.xdata$x:000003D1                 db    0
.xdata$x:000003D2                 db    0
.xdata$x:000003D3                 db    0
.xdata$x:000003D4 __unwindtable$?MyFormatMessage@NError@NWindows@@YG_NKAAVUString@@@Z db 0FFh
.xdata$x:000003D4                                         ; DATA XREF: .xdata$x:000003ECo
.xdata$x:000003D5                 db 0FFh
.xdata$x:000003D6                 db 0FFh
.xdata$x:000003D7                 db 0FFh
.xdata$x:000003D8                 dd offset __unwindfunclet$?MyFormatMessage@NError@NWindows@@YG_NKAAVUString@@@Z$0
.xdata$x:000003DC                 align 10h
.xdata$x:000003E0                 dd offset __unwindfunclet$?MyFormatMessage@NError@NWindows@@YG_NKAAVUString@@@Z$1
.xdata$x:000003E4 __ehfuncinfo$?MyFormatMessage@NError@NWindows@@YG_NKAAVUString@@@Z db  22h ; "
.xdata$x:000003E4                                         ; DATA XREF: __ehhandler$?MyFormatMessage@NError@NWindows@@YG_NKAAVUString@@@Z+11o
.xdata$x:000003E5                 db    5
.xdata$x:000003E6                 db  93h ; ô
.xdata$x:000003E7                 db  19h
.xdata$x:000003E8                 db    2
.xdata$x:000003E9                 db    0
.xdata$x:000003EA                 db    0
.xdata$x:000003EB                 db    0
.xdata$x:000003EC                 dd offset __unwindtable$?MyFormatMessage@NError@NWindows@@YG_NKAAVUString@@@Z
.xdata$x:000003F0                 db    0
.xdata$x:000003F1                 db    0
.xdata$x:000003F2                 db    0
.xdata$x:000003F3                 db    0
.xdata$x:000003F4                 db    0
.xdata$x:000003F5                 db    0
.xdata$x:000003F6                 db    0
.xdata$x:000003F7                 db    0
.xdata$x:000003F8                 db    0
.xdata$x:000003F9                 db    0
.xdata$x:000003FA                 db    0
.xdata$x:000003FB                 db    0
.xdata$x:000003FC                 db    0
.xdata$x:000003FD                 db    0
.xdata$x:000003FE                 db    0
.xdata$x:000003FF                 db    0
.xdata$x:00000400                 db    0
.xdata$x:00000401                 db    0
.xdata$x:00000402                 db    0
.xdata$x:00000403                 db    0
.xdata$x:00000404                 db    1
.xdata$x:00000405                 db    0
.xdata$x:00000406                 db    0
.xdata$x:00000407                 db    0
.xdata$x:00000407 _xdata$x        ends
.xdata$x:00000407
.rtc$TMZ:00000408 ; ===========================================================================
.rtc$TMZ:00000408
.rtc$TMZ:00000408 ; Segment type: Pure data
.rtc$TMZ:00000408 ; Segment permissions: Read
.rtc$TMZ:00000408 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000408                 assume cs:_rtc$TMZ
.rtc$TMZ:00000408                 ;org 408h
.rtc$TMZ:00000408 ; COMDAT (pick any)
.rtc$TMZ:00000408 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000408 _rtc$TMZ        ends
.rtc$TMZ:00000408
.rtc$IMZ:0000040C ; ===========================================================================
.rtc$IMZ:0000040C
.rtc$IMZ:0000040C ; Segment type: Pure data
.rtc$IMZ:0000040C ; Segment permissions: Read
.rtc$IMZ:0000040C _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:0000040C                 assume cs:_rtc$IMZ
.rtc$IMZ:0000040C                 ;org 40Ch
.rtc$IMZ:0000040C ; COMDAT (pick any)
.rtc$IMZ:0000040C __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:0000040C _rtc$IMZ        ends
.rtc$IMZ:0000040C
.text:00000410 ; ===========================================================================
.text:00000410
.text:00000410 ; Segment type: Pure code
.text:00000410 ; Segment permissions: Read/Execute
.text:00000410 _text           segment para public 'CODE' use32
.text:00000410                 assume cs:_text
.text:00000410                 ;org 410h
.text:00000410 ; COMDAT (pick any)
.text:00000410                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000410
.text:00000410 ; =============== S U B R O U T I N E =======================================
.text:00000410
.text:00000410 ; Attributes: bp-based frame
.text:00000410
.text:00000410 ; _DWORD __thiscall UString::~UString(UString *__hidden this)
.text:00000410                 public ??1UString@@QAE@XZ
.text:00000410 ??1UString@@QAE@XZ proc near            ; CODE XREF: NWindows::NError::MyFormatMessage(ulong)+15Bp
.text:00000410                                         ; NWindows::NError::MyFormatMessage(ulong,UString &)+B4p ...
.text:00000410
.text:00000410 var_8           = dword ptr -8
.text:00000410 var_4           = dword ptr -4
.text:00000410
.text:00000410                 push    ebp
.text:00000411                 mov     ebp, esp
.text:00000413                 sub     esp, 8
.text:00000416                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000041D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000424                 mov     [ebp+var_4], ecx
.text:00000427                 mov     eax, [ebp+var_4]
.text:0000042A                 mov     ecx, [eax]
.text:0000042C                 mov     [ebp+var_8], ecx
.text:0000042F                 mov     edx, [ebp+var_8]
.text:00000432                 push    edx             ; void *
.text:00000433                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00000438                 add     esp, 4
.text:0000043B                 add     esp, 8
.text:0000043E                 cmp     ebp, esp
.text:00000440                 call    __RTC_CheckEsp
.text:00000445                 mov     esp, ebp
.text:00000447                 pop     ebp
.text:00000448                 retn
.text:00000448 ??1UString@@QAE@XZ endp
.text:00000448
.text:00000448 ; ---------------------------------------------------------------------------
.text:00000449                 align 4
.text:00000449 _text           ends
.text:00000449
.text:0000044C ; ===========================================================================
.text:0000044C
.text:0000044C ; Segment type: Pure code
.text:0000044C ; Segment permissions: Read/Execute
.text:0000044C _text           segment para public 'CODE' use32
.text:0000044C                 assume cs:_text
.text:0000044C                 ;org 44Ch
.text:0000044C ; COMDAT (pick any)
.text:0000044C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000044C
.text:0000044C ; =============== S U B R O U T I N E =======================================
.text:0000044C
.text:0000044C ; Attributes: bp-based frame
.text:0000044C
.text:0000044C ; unsigned int __thiscall UString::Len(UString *__hidden this)
.text:0000044C                 public ?Len@UString@@QBEIXZ
.text:0000044C ?Len@UString@@QBEIXZ proc near          ; CODE XREF: NWindows::NError::MyFormatMessage(ulong)+E9p
.text:0000044C                                         ; NWindows::NError::MyFormatMessage(ulong)+100p ...
.text:0000044C
.text:0000044C var_4           = dword ptr -4
.text:0000044C
.text:0000044C                 push    ebp
.text:0000044D                 mov     ebp, esp
.text:0000044F                 push    ecx
.text:00000450                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000457                 mov     [ebp+var_4], ecx
.text:0000045A                 mov     eax, [ebp+var_4]
.text:0000045D                 mov     eax, [eax+4]
.text:00000460                 mov     esp, ebp
.text:00000462                 pop     ebp
.text:00000463                 retn
.text:00000463 ?Len@UString@@QBEIXZ endp
.text:00000463
.text:00000463 _text           ends
.text:00000463
.text:00000464 ; ===========================================================================
.text:00000464
.text:00000464 ; Segment type: Pure code
.text:00000464 ; Segment permissions: Read/Execute
.text:00000464 _text           segment para public 'CODE' use32
.text:00000464                 assume cs:_text
.text:00000464                 ;org 464h
.text:00000464 ; COMDAT (pick any)
.text:00000464                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000464
.text:00000464 ; =============== S U B R O U T I N E =======================================
.text:00000464
.text:00000464 ; Attributes: bp-based frame
.text:00000464
.text:00000464 ; bool __thiscall UString::IsEmpty(UString *__hidden this)
.text:00000464                 public ?IsEmpty@UString@@QBE_NXZ
.text:00000464 ?IsEmpty@UString@@QBE_NXZ proc near     ; CODE XREF: NWindows::NError::MyFormatMessage(ulong)+66p
.text:00000464
.text:00000464 var_4           = dword ptr -4
.text:00000464
.text:00000464                 push    ebp
.text:00000465                 mov     ebp, esp
.text:00000467                 push    ecx
.text:00000468                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000046F                 mov     [ebp+var_4], ecx
.text:00000472                 mov     eax, [ebp+var_4]
.text:00000475                 xor     ecx, ecx
.text:00000477                 cmp     dword ptr [eax+4], 0
.text:0000047B                 setz    cl
.text:0000047E                 mov     al, cl
.text:00000480                 mov     esp, ebp
.text:00000482                 pop     ebp
.text:00000483                 retn
.text:00000483 ?IsEmpty@UString@@QBE_NXZ endp
.text:00000483
.text:00000483 _text           ends
.text:00000483
.text:00000484 ; ===========================================================================
.text:00000484
.text:00000484 ; Segment type: Pure code
.text:00000484 ; Segment permissions: Read/Execute
.text:00000484 _text           segment para public 'CODE' use32
.text:00000484                 assume cs:_text
.text:00000484                 ;org 484h
.text:00000484 ; COMDAT (pick any)
.text:00000484                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000484
.text:00000484 ; =============== S U B R O U T I N E =======================================
.text:00000484
.text:00000484 ; Attributes: bp-based frame
.text:00000484
.text:00000484 ; public: __thiscall UString::operator wchar_t const *(void)const
.text:00000484                 public ??BUString@@QBEPB_WXZ
.text:00000484 ??BUString@@QBEPB_WXZ proc near         ; CODE XREF: NWindows::NError::MyFormatMessage(ulong)+F6p
.text:00000484                                         ; NWindows::NError::MyFormatMessage(ulong)+112p
.text:00000484
.text:00000484 var_4           = dword ptr -4
.text:00000484
.text:00000484                 push    ebp
.text:00000485                 mov     ebp, esp
.text:00000487                 push    ecx
.text:00000488                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000048F                 mov     [ebp+var_4], ecx
.text:00000492                 mov     eax, [ebp+var_4]
.text:00000495                 mov     eax, [eax]
.text:00000497                 mov     esp, ebp
.text:00000499                 pop     ebp
.text:0000049A                 retn
.text:0000049A ??BUString@@QBEPB_WXZ endp
.text:0000049A
.text:0000049A ; ---------------------------------------------------------------------------
.text:0000049B                 align 4
.text:0000049B _text           ends
.text:0000049B
.text:0000049C ; ===========================================================================
.text:0000049C
.text:0000049C ; Segment type: Pure code
.text:0000049C ; Segment permissions: Read/Execute
.text:0000049C _text           segment para public 'CODE' use32
.text:0000049C                 assume cs:_text
.text:0000049C                 ;org 49Ch
.text:0000049C ; COMDAT (pick any)
.text:0000049C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000049C
.text:0000049C ; =============== S U B R O U T I N E =======================================
.text:0000049C
.text:0000049C ; Attributes: bp-based frame
.text:0000049C
.text:0000049C ; void __thiscall UString::DeleteFrom(UString *this, unsigned int)
.text:0000049C                 public ?DeleteFrom@UString@@QAEXI@Z
.text:0000049C ?DeleteFrom@UString@@QAEXI@Z proc near  ; CODE XREF: NWindows::NError::MyFormatMessage(ulong)+13Ap
.text:0000049C
.text:0000049C var_4           = dword ptr -4
.text:0000049C arg_0           = dword ptr  8
.text:0000049C
.text:0000049C                 push    ebp
.text:0000049D                 mov     ebp, esp
.text:0000049F                 push    ecx
.text:000004A0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000004A7                 mov     [ebp+var_4], ecx
.text:000004AA                 mov     eax, [ebp+var_4]
.text:000004AD                 mov     ecx, [ebp+arg_0]
.text:000004B0                 cmp     ecx, [eax+4]
.text:000004B3                 jnb     short loc_4CC
.text:000004B5                 mov     edx, [ebp+var_4]
.text:000004B8                 mov     eax, [ebp+arg_0]
.text:000004BB                 mov     [edx+4], eax
.text:000004BE                 mov     ecx, [ebp+var_4]
.text:000004C1                 mov     edx, [ecx]
.text:000004C3                 xor     eax, eax
.text:000004C5                 mov     ecx, [ebp+arg_0]
.text:000004C8                 mov     [edx+ecx*2], ax
.text:000004CC
.text:000004CC loc_4CC:                                ; CODE XREF: UString::DeleteFrom(uint)+17j
.text:000004CC                 mov     esp, ebp
.text:000004CE                 pop     ebp
.text:000004CF                 retn    4
.text:000004CF ?DeleteFrom@UString@@QAEXI@Z endp
.text:000004CF
.text:000004CF ; ---------------------------------------------------------------------------
.text:000004D2                 align 4
.text:000004D2 _text           ends
.text:000004D2
.text:000004D4 ; ===========================================================================
.text:000004D4
.text:000004D4 ; Segment type: Pure code
.text:000004D4 ; Segment permissions: Read/Execute
.text:000004D4 _text           segment para public 'CODE' use32
.text:000004D4                 assume cs:_text
.text:000004D4                 ;org 4D4h
.text:000004D4 ; COMDAT (pick any)
.text:000004D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000004D4
.text:000004D4 ; =============== S U B R O U T I N E =======================================
.text:000004D4
.text:000004D4 ; Attributes: bp-based frame
.text:000004D4
.text:000004D4 ; _DWORD __thiscall AString::~AString(AString *__hidden this)
.text:000004D4                 public ??1AString@@QAE@XZ
.text:000004D4 ??1AString@@QAE@XZ proc near            ; CODE XREF: NWindows::NError::MyFormatMessage(ulong,UString &)+C3p
.text:000004D4                                         ; __unwindfunclet$?MyFormatMessage@NError@NWindows@@YG_NKAAVUString@@@Z$0+3j
.text:000004D4
.text:000004D4 var_8           = dword ptr -8
.text:000004D4 var_4           = dword ptr -4
.text:000004D4
.text:000004D4                 push    ebp
.text:000004D5                 mov     ebp, esp
.text:000004D7                 sub     esp, 8
.text:000004DA                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000004E1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000004E8                 mov     [ebp+var_4], ecx
.text:000004EB                 mov     eax, [ebp+var_4]
.text:000004EE                 mov     ecx, [eax]
.text:000004F0                 mov     [ebp+var_8], ecx
.text:000004F3                 mov     edx, [ebp+var_8]
.text:000004F6                 push    edx             ; void *
.text:000004F7                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000004FC                 add     esp, 4
.text:000004FF                 add     esp, 8
.text:00000502                 cmp     ebp, esp
.text:00000504                 call    __RTC_CheckEsp
.text:00000509                 mov     esp, ebp
.text:0000050B                 pop     ebp
.text:0000050C                 retn
.text:0000050C ??1AString@@QAE@XZ endp
.text:0000050C
.text:0000050C ; ---------------------------------------------------------------------------
.text:0000050D                 align 10h
.text:0000050D _text           ends
.text:0000050D
.text:00000510 ; ===========================================================================
.text:00000510
.text:00000510 ; Segment type: Pure code
.text:00000510 ; Segment permissions: Read/Execute
.text:00000510 _text           segment para public 'CODE' use32
.text:00000510                 assume cs:_text
.text:00000510                 ;org 510h
.text:00000510 ; COMDAT (pick any)
.text:00000510                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000510
.text:00000510 ; =============== S U B R O U T I N E =======================================
.text:00000510
.text:00000510 ; Attributes: bp-based frame
.text:00000510
.text:00000510 ; class UString __stdcall GetUnicodeString(class AString const &)
.text:00000510                 public ?GetUnicodeString@@YG?AVUString@@ABVAString@@@Z
.text:00000510 ?GetUnicodeString@@YG?AVUString@@ABVAString@@@Z proc near
.text:00000510                                         ; CODE XREF: NWindows::NError::MyFormatMessage(ulong,UString &)+8Fp
.text:00000510
.text:00000510 var_4           = dword ptr -4
.text:00000510 arg_0           = dword ptr  8
.text:00000510 arg_4           = dword ptr  0Ch
.text:00000510
.text:00000510                 push    ebp
.text:00000511                 mov     ebp, esp
.text:00000513                 push    ecx
.text:00000514                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000051B                 mov     [ebp+var_4], 0
.text:00000522                 push    0
.text:00000524                 mov     eax, [ebp+arg_4]
.text:00000527                 push    eax
.text:00000528                 mov     ecx, [ebp+arg_0]
.text:0000052B                 push    ecx
.text:0000052C                 call    ?MultiByteToUnicodeString@@YG?AVUString@@ABVAString@@I@Z ; MultiByteToUnicodeString(AString const &,uint)
.text:00000531                 mov     edx, [ebp+var_4]
.text:00000534                 or      edx, 1
.text:00000537                 mov     [ebp+var_4], edx
.text:0000053A                 mov     eax, [ebp+arg_0]
.text:0000053D                 add     esp, 4
.text:00000540                 cmp     ebp, esp
.text:00000542                 call    __RTC_CheckEsp
.text:00000547                 mov     esp, ebp
.text:00000549                 pop     ebp
.text:0000054A                 retn    8
.text:0000054A ?GetUnicodeString@@YG?AVUString@@ABVAString@@@Z endp
.text:0000054A
.text:0000054A _text           ends
.text:0000054A
UNDEF:00000550 ; ===========================================================================
UNDEF:00000550
UNDEF:00000550 ; Segment type: Externs
UNDEF:00000550 ; UNDEF
UNDEF:00000550 ; public: __thiscall UString::UString(class UString const &)
UNDEF:00000550                 extrn ??0UString@@QAE@ABV0@@Z:near
UNDEF:00000550                                         ; CODE XREF: NWindows::NError::MyFormatMessage(ulong)+146p
UNDEF:00000554 ; void __thiscall UString::AddAscii(UString *__hidden this, const char *)
UNDEF:00000554                 extrn ?AddAscii@UString@@QAEXPBD@Z:near
UNDEF:00000554                                         ; CODE XREF: NWindows::NError::MyFormatMessage(ulong)+D3p
UNDEF:00000554                                         ; NWindows::NError::MyFormatMessage(ulong)+DFp
UNDEF:00000558 ; public: __thiscall UString::UString(void)
UNDEF:00000558                 extrn ??0UString@@QAE@XZ:near
UNDEF:00000558                                         ; CODE XREF: NWindows::NError::MyFormatMessage(ulong)+43p
UNDEF:0000055C                 extrn ___security_cookie:near
UNDEF:0000055C                                         ; DATA XREF: NWindows::NError::MyFormatMessage(ulong)+25r
UNDEF:0000055C                                         ; NWindows::NError::MyFormatMessage(ulong,UString &)+25r
UNDEF:00000560                 extrn ___CxxFrameHandler3:near
UNDEF:00000560                                         ; CODE XREF: __ehhandler$?MyFormatMessage@NError@NWindows@@YG?AVUString@@K@Z+20j
UNDEF:00000560                                         ; __ehhandler$?MyFormatMessage@NError@NWindows@@YG_NKAAVUString@@@Z+16j
UNDEF:00000564                 extrn __RTC_CheckEsp:near
UNDEF:00000564                                         ; CODE XREF: NWindows::NError::MyFormatMessage(ulong)+190p
UNDEF:00000564                                         ; NWindows::NError::MyFormatMessage(ulong,UString &)+64p ...
UNDEF:00000568 ; __fastcall __security_check_cookie(x)
UNDEF:00000568                 extrn @__security_check_cookie@4:near
UNDEF:00000568                                         ; CODE XREF: NWindows::NError::MyFormatMessage(ulong)+186p
UNDEF:00000568                                         ; __ehhandler$?MyFormatMessage@NError@NWindows@@YG?AVUString@@K@Z+Cp ...
UNDEF:0000056C ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:0000056C                 extrn @_RTC_CheckStackVars@8:near
UNDEF:0000056C                                         ; CODE XREF: NWindows::NError::MyFormatMessage(ulong)+16Dp
UNDEF:0000056C                                         ; NWindows::NError::MyFormatMessage(ulong,UString &)+121p
UNDEF:00000570                 extrn __RTC_Shutdown:near
UNDEF:00000570                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000574                 extrn __RTC_InitBase:near
UNDEF:00000574                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000578 ; void __cdecl operator delete(void *)
UNDEF:00000578                 extrn ??3@YAXPAX@Z:near ; CODE XREF: UString::~UString(void)+23p
UNDEF:00000578                                         ; AString::~AString(void)+23p
UNDEF:0000057C ; HLOCAL __stdcall LocalFree(HLOCAL hMem)
UNDEF:0000057C                 extrn __imp__LocalFree@4:near
UNDEF:0000057C                                         ; CODE XREF: NWindows::NError::MyFormatMessage(ulong,UString &)+108p
UNDEF:0000057C                                         ; DATA XREF: NWindows::NError::MyFormatMessage(ulong,UString &)+108r
UNDEF:00000580 ; public: class UString & __thiscall UString::operator=(wchar_t const *)
UNDEF:00000580                 extrn ??4UString@@QAEAAV0@PB_W@Z:near
UNDEF:00000580                                         ; CODE XREF: NWindows::NError::MyFormatMessage(ulong,UString &)+FDp
UNDEF:00000584 ; DWORD __stdcall FormatMessageW(DWORD dwFlags, LPCVOID lpSource, DWORD dwMessageId, DWORD dwLanguageId, LPWSTR lpBuffer, DWORD nSize, va_list *Arguments)
UNDEF:00000584                 extrn __imp__FormatMessageW@28:near
UNDEF:00000584                                         ; CODE XREF: NWindows::NError::MyFormatMessage(ulong,UString &)+E1p
UNDEF:00000584                                         ; DATA XREF: NWindows::NError::MyFormatMessage(ulong,UString &)+E1r
UNDEF:00000588 ; public: class UString & __thiscall UString::operator=(class UString const &)
UNDEF:00000588                 extrn ??4UString@@QAEAAV0@ABV0@@Z:near
UNDEF:00000588                                         ; CODE XREF: NWindows::NError::MyFormatMessage(ulong,UString &)+A8p
UNDEF:0000058C ; _DWORD __thiscall AString::AString(AString *__hidden this, const char *)
UNDEF:0000058C                 extrn ??0AString@@QAE@PBD@Z:near
UNDEF:0000058C                                         ; CODE XREF: NWindows::NError::MyFormatMessage(ulong,UString &)+7Bp
UNDEF:00000590 ; DWORD __stdcall FormatMessageA(DWORD dwFlags, LPCVOID lpSource, DWORD dwMessageId, DWORD dwLanguageId, LPSTR lpBuffer, DWORD nSize, va_list *Arguments)
UNDEF:00000590                 extrn __imp__FormatMessageA@28:near
UNDEF:00000590                                         ; CODE XREF: NWindows::NError::MyFormatMessage(ulong,UString &)+5Cp
UNDEF:00000590                                         ; DATA XREF: NWindows::NError::MyFormatMessage(ulong,UString &)+5Cr
UNDEF:00000594 ; bool g_IsNT
UNDEF:00000594                 extrn ?g_IsNT@@3_NA:near
UNDEF:00000594                                         ; DATA XREF: NWindows::NError::MyFormatMessage(ulong,UString &)+36r
UNDEF:00000598 ; struct UString __stdcall __high MultiByteToUnicodeString(const struct AString *, unsigned int)
UNDEF:00000598                 extrn ?MultiByteToUnicodeString@@YG?AVUString@@ABVAString@@I@Z:near
UNDEF:00000598                                         ; CODE XREF: GetUnicodeString(AString const &)+1Cp
UNDEF:00000598
UNDEF:00000598