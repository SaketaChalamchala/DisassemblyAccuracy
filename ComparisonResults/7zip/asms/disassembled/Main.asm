.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : B1E945AE0F88E356433634BCDE000C5C
.rdata:00000000 ; Input CRC32 : E98FB848
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\Main.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00000000 _rdata          segment para public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 $SG77136        db 0Ah                  ; DATA XREF: .data:_kCopyrightStringo
.rdata:00000000                                         ; Main2(void)+232o ...
.rdata:00000000                 db '7-Zip (a) [32] 15.05 beta : Copyright (c) 1999-2015 Igor Pavlov :'
.rdata:00000000                 db ' 2015-06-14',0Ah
.rdata:00000000                 db 0Ah,0
.rdata:00000050 $SG77138        db 'Usage: 7za <command> [<switches>...] <archive_name> [<file_names>'
.rdata:00000050                                         ; DATA XREF: .data:_kHelpStringo
.rdata:00000050                 db '...]',0Ah
.rdata:00000050                 db '       [<@listfiles...>]',0Ah
.rdata:00000050                 db 0Ah
.rdata:00000050                 db '<Commands>',0Ah
.rdata:00000050                 db '  a : Add files to archive',0Ah
.rdata:00000050                 db '  b : Benchmark',0Ah
.rdata:00000050                 db '  d : Delete files from archive',0Ah
.rdata:00000050                 db '  e : Extract files from archive (without using directory names)',0Ah
.rdata:00000050                 db '  h : Calculate hash values for files',0Ah
.rdata:00000050                 db '  i : Show information about supported formats',0Ah
.rdata:00000050                 db '  l : List contents of archive',0Ah
.rdata:00000050                 db '  rn : Rename files in archive',0Ah
.rdata:00000050                 db '  t : Test integrity of archive',0Ah
.rdata:00000050                 db '  u : Update files to archive',0Ah
.rdata:00000050                 db '  x : eXtract files with full paths',0Ah
.rdata:00000050                 db '<Switches>',0Ah
.rdata:00000050                 db '  -- : Stop switches parsing',0Ah
.rdata:00000050                 db '  -ai[r[-|0]]{@listfile|!wildcard} : Include archives',0Ah
.rdata:00000050                 db '  -ax[r[-|0]]{@listfile|!wildcard} : eXclude archives',0Ah
.rdata:00000050                 db '  -bd : Disable percentage indicator',0Ah
.rdata:00000050                 db '  -i[r[-|0]]{@listfile|!wildcard} : Include filenames',0Ah
.rdata:00000050                 db '  -m{Parameters} : set compression Method',0Ah
.rdata:00000050                 db '  -o{Directory} : set Output directory',0Ah
.rdata:00000050                 db '  -p{Password} : set Password',0Ah
.rdata:00000050                 db '  -r[-|0] : Recurse subdirectories',0Ah
.rdata:00000050                 db '  -scs{UTF-8|UTF-16LE|UTF-16BE|WIN|DOS|{id}} : set charset for li'
.rdata:00000050                 db 'st files',0Ah
.rdata:00000050                 db '  -sdel : Delete files after compression',0Ah
.rdata:00000050                 db '  -sfx[{name}] : Create SFX archive',0Ah
.rdata:00000050                 db '  -si[{name}] : read data from stdin',0Ah
.rdata:00000050                 db '  -slt : show technical information for l (List) command',0Ah
.rdata:00000050                 db '  -so : write data to stdout',0Ah
.rdata:00000050                 db '  -ssc[-] : set sensitive case mode',0Ah
.rdata:00000050                 db '  -ssw : compress shared files',0Ah
.rdata:00000050                 db '  -t{Type} : Set type of archive',0Ah
.rdata:00000050                 db '  -u[-][p#][q#][r#][x#][y#][z#][!newArchiveName] : Update options'
.rdata:00000050                 db 0Ah
.rdata:00000050                 db '  -v{Size}[b|k|m|g] : Create volumes',0Ah
.rdata:00000050                 db '  -w[{path}] : assign Work directory. Empty path means a temporar'
.rdata:00000050                 db 'y directory',0Ah
.rdata:00000050                 db '  -x[r[-|0]]]{@listfile|!wildcard} : eXclude filenames',0Ah
.rdata:00000050                 db '  -y : assume Yes on all queries',0Ah,0
.rdata:00000640 $SG77140        db 'Everything is Ok',0 ; DATA XREF: .data:_kEverythingIsOko
.rdata:00000651                 align 4
.rdata:00000654 $SG77142        db 'Incorrect command line',0
.rdata:00000654                                         ; DATA XREF: .data:_kUserErrorMessageo
.rdata:0000066B                 align 4
.rdata:0000066C $SG77144        db '7-Zip cannot find the code that works with archives.',0
.rdata:0000066C                                         ; DATA XREF: .data:_kNoFormatso
.rdata:000006A1                 align 4
.rdata:000006A4 $SG77146        db 'Unsupported archive type',0
.rdata:000006A4                                         ; DATA XREF: .data:_kUnsupportedArcTypeMessageo
.rdata:000006BD                 align 10h
.rdata:000006C0 $SG77148:                               ; DATA XREF: .data:_kDefaultSfxModuleo
.rdata:000006C0                 unicode 0, <7zCon.sfx>,0
.rdata:000006D4 ; char _SG77154[]
.rdata:000006D4 $SG77154        db 'ERROR: ',0          ; DATA XREF: ShowMessageAndThrowException(char const *,NExitCode::EEnum)+1Do
.rdata:000006DC ; char _SG77189[]
.rdata:000006DC $SG77189        dd offset loc_2020      ; DATA XREF: PrintLibIndex(CStdOutStream &,int):loc_2F0Eo
.rdata:000006E0 ; char _SG77212[4]
.rdata:000006E0 $SG77212        db ' : ',0              ; DATA XREF: PrintWarningsPaths(CErrorPathCodes const &,CStdOutStream &)+5Fo
.rdata:000006E4 ; char _SG77214[]
.rdata:000006E4 $SG77214        db '----------------',0 ; DATA XREF: PrintWarningsPaths(CErrorPathCodes const &,CStdOutStream &)+E8o
.rdata:000006F5                 align 4
.rdata:000006F8 ; char _SG77224[]
.rdata:000006F8 $SG77224        db 'Scan WARNINGS for files and folders:',0
.rdata:000006F8                                         ; DATA XREF: WarningsCheck(long,CCallbackConsoleBase const &,CUpdateErrorInfo const &,CStdOutStream &,bool)+65o
.rdata:0000071D                 align 10h
.rdata:00000720 ; char _SG77225[]
.rdata:00000720 $SG77225        db 'Scan WARNINGS: ',0  ; DATA XREF: WarningsCheck(long,CCallbackConsoleBase const &,CUpdateErrorInfo const &,CStdOutStream &,bool)+A2o
.rdata:00000730 $SG77238:                               ; DATA XREF: WarningsCheck(long,CCallbackConsoleBase const &,CUpdateErrorInfo const &,CStdOutStream &,bool)+1C0o
.rdata:00000730                 dw 0Ah
.rdata:00000730                 unicode 0, <Error:>
.rdata:00000730                 dw 0Ah, 0
.rdata:00000742                 align 4
.rdata:00000744 ; char _SG77245[]
.rdata:00000744 $SG77245        db 'WARNINGS for files:',0
.rdata:00000744                                         ; DATA XREF: WarningsCheck(long,CCallbackConsoleBase const &,CUpdateErrorInfo const &,CStdOutStream &,bool)+25Ao
.rdata:00000758 ; char _SG77246[]
.rdata:00000758 $SG77246        db 'WARNING: Cannot open ',0
.rdata:00000758                                         ; DATA XREF: WarningsCheck(long,CCallbackConsoleBase const &,CUpdateErrorInfo const &,CStdOutStream &,bool)+291o
.rdata:0000076E                 align 10h
.rdata:00000770 ; char _SG77247[]
.rdata:00000770 $SG77247        db ' file',0            ; DATA XREF: WarningsCheck(long,CCallbackConsoleBase const &,CUpdateErrorInfo const &,CStdOutStream &,bool)+288o
.rdata:00000776                 align 4
.rdata:00000778 ; char _SG77276[]
.rdata:00000778 $SG77276        db ' Time =',0          ; DATA XREF: PrintTime(char const *,unsigned __int64,unsigned __int64)+1Do
.rdata:00000780 ; char _SG77287[]
.rdata:00000780 $SG77287        dd offset loc_3D1C+4    ; DATA XREF: PrintTime(char const *,unsigned __int64,unsigned __int64):loc_38E8o
.rdata:00000784 ; char _SG77292[]
.rdata:00000784 $SG77292        db '    ',0             ; DATA XREF: PrintMemUsage(char const *,unsigned __int64)+Co
.rdata:00000789                 align 4
.rdata:0000078C ; char _SG77293[]
.rdata:0000078C $SG77293        db ' Memory =',0        ; DATA XREF: PrintMemUsage(char const *,unsigned __int64)+3o
.rdata:00000796                 align 4
.rdata:00000798 ; char _SG77294[]
.rdata:00000798 $SG77294        db ' MB',0              ; DATA XREF: PrintMemUsage(char const *,unsigned __int64)+50o
.rdata:0000079C $SG77315        db 'K32GetProcessMemoryInfo',0
.rdata:0000079C                                         ; DATA XREF: PrintStat(void)+84o
.rdata:000007B4 ; const WCHAR _SG77316
.rdata:000007B4 $SG77316:                               ; DATA XREF: PrintStat(void)+8Bo
.rdata:000007B4                 unicode 0, <kernel32.dll>,0
.rdata:000007CE                 align 10h
.rdata:000007D0 ; const WCHAR _SG77319
.rdata:000007D0 $SG77319:                               ; DATA XREF: PrintStat(void)+BCo
.rdata:000007D0                 unicode 0, <Psapi.dll>,0
.rdata:000007E4 ; CHAR _SG77322[]
.rdata:000007E4 $SG77322        db 'GetProcessMemoryInfo',0 ; DATA XREF: PrintStat(void)+DFo
.rdata:000007F9                 align 4
.rdata:000007FC ; char _SG77329[]
.rdata:000007FC $SG77329        db 'Kernel ',0          ; DATA XREF: PrintStat(void)+1C6o
.rdata:00000804 ; char _SG77330[]
.rdata:00000804 $SG77330        db 'User   ',0          ; DATA XREF: PrintStat(void)+1ECo
.rdata:0000080C ; char _SG77331[]
.rdata:0000080C $SG77331        db 'Process',0          ; DATA XREF: PrintStat(void)+21Eo
.rdata:00000814 ; char _SG77333[]
.rdata:00000814 $SG77333        db 'Virtual ',0         ; DATA XREF: PrintStat(void)+238o
.rdata:0000081D                 align 10h
.rdata:00000820 ; char _SG77334[]
.rdata:00000820 $SG77334        db 'Global ',0          ; DATA XREF: PrintStat(void)+25Eo
.rdata:00000828 ; char _SG77336[]
.rdata:00000828 $SG77336        db 'Physical',0         ; DATA XREF: PrintStat(void)+278o
.rdata:00000831                 align 4
.rdata:00000834 ; char _SG77505[]
.rdata:00000834 $SG77505        db 'Formats:',0         ; DATA XREF: Main2(void)+514o
.rdata:0000083D                 align 10h
.rdata:00000840 $SG77507        db 'KSNFMGOPBELH',0     ; DATA XREF: Main2(void)+537o
.rdata:0000084D                 align 10h
.rdata:00000850 ; char _SG77514[]
.rdata:00000850 $SG77514        dd offset loc_2020      ; DATA XREF: Main2(void)+5A6o
.rdata:00000854 $SG77530:                               ; DATA XREF: Main2(void)+715o
.rdata:00000854                 unicode 0, < (>,0
.rdata:0000085A                 align 4
.rdata:0000085C ; char _SG77532[]
.rdata:0000085C $SG77532        db 'offset=',0          ; DATA XREF: Main2(void)+786o
.rdata:00000864 ; char _SG77538[]
.rdata:00000864 $SG77538        db '  ||  ',0           ; DATA XREF: Main2(void)+7E2o
.rdata:0000086B                 align 4
.rdata:0000086C ; char _SG77549[]
.rdata:0000086C $SG77549        db 'Codecs:',0          ; DATA XREF: Main2(void)+913o
.rdata:00000874 ; char _SG77558[]
.rdata:00000874 $SG77558        db 'Hashers:',0         ; DATA XREF: Main2(void)+A52o
.rdata:0000087D                 align 10h
.rdata:00000880 ; char _SG77569[]
.rdata:00000880 $SG77569        db 0Ah                  ; DATA XREF: Main2(void)+B73o
.rdata:00000880                 db 'Decoding ERROR',0Ah,0
.rdata:00000891                 align 4
.rdata:00000894 ; char _SG77580[]
.rdata:00000894 $SG77580        db 'Scanning the drive for archives:',0
.rdata:00000894                                         ; DATA XREF: Main2(void)+C6Ao
.rdata:000008B5                 align 4
.rdata:000008B8 ; char _SG77607[]
.rdata:000008B8 $SG77607        db 'ERROR:',0           ; DATA XREF: Main2(void)+100Bo
.rdata:000008BF                 align 10h
.rdata:000008C0 ; char _SG77612[]
.rdata:000008C0 $SG77612        db 'Archives: ',0       ; DATA XREF: Main2(void)+10A2o
.rdata:000008CB                 align 4
.rdata:000008CC ; char _SG77613[]
.rdata:000008CC $SG77613        db 'OK archives: ',0    ; DATA XREF: Main2(void)+10D9o
.rdata:000008DA                 align 4
.rdata:000008DC ; char _SG77616[]
.rdata:000008DC $SG77616        db 'Can',27h,'t open as archive: ',0
.rdata:000008DC                                         ; DATA XREF: Main2(void)+1144o
.rdata:000008F4 ; char _SG77618[]
.rdata:000008F4 $SG77618        db 'Archives with Errors: ',0 ; DATA XREF: Main2(void)+11A8o
.rdata:0000090B                 align 4
.rdata:0000090C ; char _SG77620[]
.rdata:0000090C $SG77620        db 'Archives with Warnings: ',0
.rdata:0000090C                                         ; DATA XREF: Main2(void)+1205o
.rdata:00000925                 align 4
.rdata:00000928 ; char _SG77623[]
.rdata:00000928 $SG77623        db 'Warnings: ',0       ; DATA XREF: Main2(void)+1298o
.rdata:00000933                 align 4
.rdata:00000934 ; char _SG77626[]
.rdata:00000934 $SG77626        db 'Open Errors: ',0    ; DATA XREF: Main2(void)+1332o
.rdata:00000942                 align 4
.rdata:00000944 ; char _SG77631[]
.rdata:00000944 $SG77631        db 'Sub items Errors: ',0 ; DATA XREF: Main2(void)+1400o
.rdata:00000957                 align 4
.rdata:00000958 ; char _SG77636[]
.rdata:00000958 $SG77636        db 'Folders: ',0        ; DATA XREF: Main2(void)+1451o
.rdata:00000962                 align 4
.rdata:00000964 ; char _SG77639[]
.rdata:00000964 $SG77639        db 'Files: ',0          ; DATA XREF: Main2(void)+14B0o
.rdata:0000096C ; char _SG77641[]
.rdata:0000096C $SG77641        db 'Alternate Streams: ',0 ; DATA XREF: Main2(void)+14EFo
.rdata:00000980 ; char _SG77642[]
.rdata:00000980 $SG77642        db 'Alternate Streams Size: ',0
.rdata:00000980                                         ; DATA XREF: Main2(void)+1520o
.rdata:00000999                 align 4
.rdata:0000099C ; char _SG77643[]
.rdata:0000099C $SG77643        db 'Size:       ',0     ; DATA XREF: Main2(void)+1569o
.rdata:000009A9                 align 4
.rdata:000009AC $SG77644        db 'Compressed: ',0     ; DATA XREF: Main2(void)+1551o
.rdata:000009B9                 align 4
.rdata:000009BC ; char _SG77651[]
.rdata:000009BC $SG77651        db 'Warnings: ',0       ; DATA XREF: Main2(void)+16E9o
.rdata:000009C7                 align 4
.rdata:000009C8 ; char _SG77654[]
.rdata:000009C8 $SG77654        db 'Errors: ',0         ; DATA XREF: Main2(void)+1742o
.rdata:000009D1                 align 4
.rdata:000009D1 _rdata          ends
.rdata:000009D1
.rdata:000009D4 ; ===========================================================================
.rdata:000009D4
.rdata:000009D4 ; Segment type: Pure data
.rdata:000009D4 ; Segment permissions: Read
.rdata:000009D4 _rdata          segment dword public 'DATA' use32
.rdata:000009D4                 assume cs:_rdata
.rdata:000009D4                 ;org 9D4h
.rdata:000009D4 ; COMDAT (pick any)
.rdata:000009D4                 public _IID_IProgress
.rdata:000009D4 _IID_IProgress  db  69h ; i
.rdata:000009D5                 db  0Fh
.rdata:000009D6                 db  17h
.rdata:000009D7                 db  23h ; #
.rdata:000009D8                 db 0C1h ; -
.rdata:000009D9                 db  40h ; @
.rdata:000009DA                 db  8Ah ; è
.rdata:000009DB                 db  27h ; '
.rdata:000009DC                 db    0
.rdata:000009DD                 db    0
.rdata:000009DE                 db    0
.rdata:000009DF                 db    0
.rdata:000009E0                 db    0
.rdata:000009E1                 db    5
.rdata:000009E2                 db    0
.rdata:000009E3                 db    0
.rdata:000009E3 _rdata          ends
.rdata:000009E3
.rdata:000009E4 ; ===========================================================================
.rdata:000009E4
.rdata:000009E4 ; Segment type: Pure data
.rdata:000009E4 ; Segment permissions: Read
.rdata:000009E4 _rdata          segment dword public 'DATA' use32
.rdata:000009E4                 assume cs:_rdata
.rdata:000009E4                 ;org 9E4h
.rdata:000009E4 ; COMDAT (pick any)
.rdata:000009E4                 public _IID_ISequentialInStream
.rdata:000009E4 _IID_ISequentialInStream db  69h ; i
.rdata:000009E5                 db  0Fh
.rdata:000009E6                 db  17h
.rdata:000009E7                 db  23h ; #
.rdata:000009E8                 db 0C1h ; -
.rdata:000009E9                 db  40h ; @
.rdata:000009EA                 db  8Ah ; è
.rdata:000009EB                 db  27h ; '
.rdata:000009EC                 db    0
.rdata:000009ED                 db    0
.rdata:000009EE                 db    0
.rdata:000009EF                 db    3
.rdata:000009F0                 db    0
.rdata:000009F1                 db    1
.rdata:000009F2                 db    0
.rdata:000009F3                 db    0
.rdata:000009F3 _rdata          ends
.rdata:000009F3
.rdata:000009F4 ; ===========================================================================
.rdata:000009F4
.rdata:000009F4 ; Segment type: Pure data
.rdata:000009F4 ; Segment permissions: Read
.rdata:000009F4 _rdata          segment dword public 'DATA' use32
.rdata:000009F4                 assume cs:_rdata
.rdata:000009F4                 ;org 9F4h
.rdata:000009F4 ; COMDAT (pick any)
.rdata:000009F4                 public _IID_ISequentialOutStream
.rdata:000009F4 _IID_ISequentialOutStream db  69h ; i
.rdata:000009F5                 db  0Fh
.rdata:000009F6                 db  17h
.rdata:000009F7                 db  23h ; #
.rdata:000009F8                 db 0C1h ; -
.rdata:000009F9                 db  40h ; @
.rdata:000009FA                 db  8Ah ; è
.rdata:000009FB                 db  27h ; '
.rdata:000009FC                 db    0
.rdata:000009FD                 db    0
.rdata:000009FE                 db    0
.rdata:000009FF                 db    3
.rdata:00000A00                 db    0
.rdata:00000A01                 db    2
.rdata:00000A02                 db    0
.rdata:00000A03                 db    0
.rdata:00000A03 _rdata          ends
.rdata:00000A03
.rdata:00000A04 ; ===========================================================================
.rdata:00000A04
.rdata:00000A04 ; Segment type: Pure data
.rdata:00000A04 ; Segment permissions: Read
.rdata:00000A04 _rdata          segment dword public 'DATA' use32
.rdata:00000A04                 assume cs:_rdata
.rdata:00000A04                 ;org 0A04h
.rdata:00000A04 ; COMDAT (pick any)
.rdata:00000A04                 public _IID_IInStream
.rdata:00000A04 _IID_IInStream  db  69h ; i
.rdata:00000A05                 db  0Fh
.rdata:00000A06                 db  17h
.rdata:00000A07                 db  23h ; #
.rdata:00000A08                 db 0C1h ; -
.rdata:00000A09                 db  40h ; @
.rdata:00000A0A                 db  8Ah ; è
.rdata:00000A0B                 db  27h ; '
.rdata:00000A0C                 db    0
.rdata:00000A0D                 db    0
.rdata:00000A0E                 db    0
.rdata:00000A0F                 db    3
.rdata:00000A10                 db    0
.rdata:00000A11                 db    3
.rdata:00000A12                 db    0
.rdata:00000A13                 db    0
.rdata:00000A13 _rdata          ends
.rdata:00000A13
.rdata:00000A14 ; ===========================================================================
.rdata:00000A14
.rdata:00000A14 ; Segment type: Pure data
.rdata:00000A14 ; Segment permissions: Read
.rdata:00000A14 _rdata          segment dword public 'DATA' use32
.rdata:00000A14                 assume cs:_rdata
.rdata:00000A14                 ;org 0A14h
.rdata:00000A14 ; COMDAT (pick any)
.rdata:00000A14                 public _IID_IOutStream
.rdata:00000A14 _IID_IOutStream db  69h ; i
.rdata:00000A15                 db  0Fh
.rdata:00000A16                 db  17h
.rdata:00000A17                 db  23h ; #
.rdata:00000A18                 db 0C1h ; -
.rdata:00000A19                 db  40h ; @
.rdata:00000A1A                 db  8Ah ; è
.rdata:00000A1B                 db  27h ; '
.rdata:00000A1C                 db    0
.rdata:00000A1D                 db    0
.rdata:00000A1E                 db    0
.rdata:00000A1F                 db    3
.rdata:00000A20                 db    0
.rdata:00000A21                 db    4
.rdata:00000A22                 db    0
.rdata:00000A23                 db    0
.rdata:00000A23 _rdata          ends
.rdata:00000A23
.rdata:00000A24 ; ===========================================================================
.rdata:00000A24
.rdata:00000A24 ; Segment type: Pure data
.rdata:00000A24 ; Segment permissions: Read
.rdata:00000A24 _rdata          segment dword public 'DATA' use32
.rdata:00000A24                 assume cs:_rdata
.rdata:00000A24                 ;org 0A24h
.rdata:00000A24 ; COMDAT (pick any)
.rdata:00000A24                 public _IID_IStreamGetSize
.rdata:00000A24 _IID_IStreamGetSize db  69h ; i
.rdata:00000A25                 db  0Fh
.rdata:00000A26                 db  17h
.rdata:00000A27                 db  23h ; #
.rdata:00000A28                 db 0C1h ; -
.rdata:00000A29                 db  40h ; @
.rdata:00000A2A                 db  8Ah ; è
.rdata:00000A2B                 db  27h ; '
.rdata:00000A2C                 db    0
.rdata:00000A2D                 db    0
.rdata:00000A2E                 db    0
.rdata:00000A2F                 db    3
.rdata:00000A30                 db    0
.rdata:00000A31                 db    6
.rdata:00000A32                 db    0
.rdata:00000A33                 db    0
.rdata:00000A33 _rdata          ends
.rdata:00000A33
.rdata:00000A34 ; ===========================================================================
.rdata:00000A34
.rdata:00000A34 ; Segment type: Pure data
.rdata:00000A34 ; Segment permissions: Read
.rdata:00000A34 _rdata          segment dword public 'DATA' use32
.rdata:00000A34                 assume cs:_rdata
.rdata:00000A34                 ;org 0A34h
.rdata:00000A34 ; COMDAT (pick any)
.rdata:00000A34                 public _IID_IOutStreamFinish
.rdata:00000A34 _IID_IOutStreamFinish db  69h ; i
.rdata:00000A35                 db  0Fh
.rdata:00000A36                 db  17h
.rdata:00000A37                 db  23h ; #
.rdata:00000A38                 db 0C1h ; -
.rdata:00000A39                 db  40h ; @
.rdata:00000A3A                 db  8Ah ; è
.rdata:00000A3B                 db  27h ; '
.rdata:00000A3C                 db    0
.rdata:00000A3D                 db    0
.rdata:00000A3E                 db    0
.rdata:00000A3F                 db    3
.rdata:00000A40                 db    0
.rdata:00000A41                 db    7
.rdata:00000A42                 db    0
.rdata:00000A43                 db    0
.rdata:00000A43 _rdata          ends
.rdata:00000A43
.rdata:00000A44 ; ===========================================================================
.rdata:00000A44
.rdata:00000A44 ; Segment type: Pure data
.rdata:00000A44 ; Segment permissions: Read
.rdata:00000A44 _rdata          segment dword public 'DATA' use32
.rdata:00000A44                 assume cs:_rdata
.rdata:00000A44                 ;org 0A44h
.rdata:00000A44 ; COMDAT (pick any)
.rdata:00000A44                 public _IID_IStreamGetProps
.rdata:00000A44 _IID_IStreamGetProps db  69h ; i
.rdata:00000A45                 db  0Fh
.rdata:00000A46                 db  17h
.rdata:00000A47                 db  23h ; #
.rdata:00000A48                 db 0C1h ; -
.rdata:00000A49                 db  40h ; @
.rdata:00000A4A                 db  8Ah ; è
.rdata:00000A4B                 db  27h ; '
.rdata:00000A4C                 db    0
.rdata:00000A4D                 db    0
.rdata:00000A4E                 db    0
.rdata:00000A4F                 db    3
.rdata:00000A50                 db    0
.rdata:00000A51                 db    8
.rdata:00000A52                 db    0
.rdata:00000A53                 db    0
.rdata:00000A53 _rdata          ends
.rdata:00000A53
.rdata:00000A54 ; ===========================================================================
.rdata:00000A54
.rdata:00000A54 ; Segment type: Pure data
.rdata:00000A54 ; Segment permissions: Read
.rdata:00000A54 _rdata          segment dword public 'DATA' use32
.rdata:00000A54                 assume cs:_rdata
.rdata:00000A54                 ;org 0A54h
.rdata:00000A54 ; COMDAT (pick any)
.rdata:00000A54                 public _IID_IStreamGetProps2
.rdata:00000A54 _IID_IStreamGetProps2 db  69h ; i
.rdata:00000A55                 db  0Fh
.rdata:00000A56                 db  17h
.rdata:00000A57                 db  23h ; #
.rdata:00000A58                 db 0C1h ; -
.rdata:00000A59                 db  40h ; @
.rdata:00000A5A                 db  8Ah ; è
.rdata:00000A5B                 db  27h ; '
.rdata:00000A5C                 db    0
.rdata:00000A5D                 db    0
.rdata:00000A5E                 db    0
.rdata:00000A5F                 db    3
.rdata:00000A60                 db    0
.rdata:00000A61                 db    9
.rdata:00000A62                 db    0
.rdata:00000A63                 db    0
.rdata:00000A63 _rdata          ends
.rdata:00000A63
.rdata:00000A64 ; ===========================================================================
.rdata:00000A64
.rdata:00000A64 ; Segment type: Pure data
.rdata:00000A64 ; Segment permissions: Read
.rdata:00000A64 _rdata          segment dword public 'DATA' use32
.rdata:00000A64                 assume cs:_rdata
.rdata:00000A64                 ;org 0A64h
.rdata:00000A64 ; COMDAT (pick any)
.rdata:00000A64                 public _IID_IArchiveOpenCallback
.rdata:00000A64 _IID_IArchiveOpenCallback db  69h ; i
.rdata:00000A65                 db  0Fh
.rdata:00000A66                 db  17h
.rdata:00000A67                 db  23h ; #
.rdata:00000A68                 db 0C1h ; -
.rdata:00000A69                 db  40h ; @
.rdata:00000A6A                 db  8Ah ; è
.rdata:00000A6B                 db  27h ; '
.rdata:00000A6C                 db    0
.rdata:00000A6D                 db    0
.rdata:00000A6E                 db    0
.rdata:00000A6F                 db    6
.rdata:00000A70                 db    0
.rdata:00000A71                 db  10h
.rdata:00000A72                 db    0
.rdata:00000A73                 db    0
.rdata:00000A73 _rdata          ends
.rdata:00000A73
.rdata:00000A74 ; ===========================================================================
.rdata:00000A74
.rdata:00000A74 ; Segment type: Pure data
.rdata:00000A74 ; Segment permissions: Read
.rdata:00000A74 _rdata          segment dword public 'DATA' use32
.rdata:00000A74                 assume cs:_rdata
.rdata:00000A74                 ;org 0A74h
.rdata:00000A74 ; COMDAT (pick any)
.rdata:00000A74                 public _IID_IArchiveExtractCallback
.rdata:00000A74 _IID_IArchiveExtractCallback db  69h ; i
.rdata:00000A75                 db  0Fh
.rdata:00000A76                 db  17h
.rdata:00000A77                 db  23h ; #
.rdata:00000A78                 db 0C1h ; -
.rdata:00000A79                 db  40h ; @
.rdata:00000A7A                 db  8Ah ; è
.rdata:00000A7B                 db  27h ; '
.rdata:00000A7C                 db    0
.rdata:00000A7D                 db    0
.rdata:00000A7E                 db    0
.rdata:00000A7F                 db    6
.rdata:00000A80                 db    0
.rdata:00000A81                 db  20h
.rdata:00000A82                 db    0
.rdata:00000A83                 db    0
.rdata:00000A83 _rdata          ends
.rdata:00000A83
.rdata:00000A84 ; ===========================================================================
.rdata:00000A84
.rdata:00000A84 ; Segment type: Pure data
.rdata:00000A84 ; Segment permissions: Read
.rdata:00000A84 _rdata          segment dword public 'DATA' use32
.rdata:00000A84                 assume cs:_rdata
.rdata:00000A84                 ;org 0A84h
.rdata:00000A84 ; COMDAT (pick any)
.rdata:00000A84                 public _IID_IArchiveExtractCallbackMessage
.rdata:00000A84 _IID_IArchiveExtractCallbackMessage db  69h ; i
.rdata:00000A85                 db  0Fh
.rdata:00000A86                 db  17h
.rdata:00000A87                 db  23h ; #
.rdata:00000A88                 db 0C1h ; -
.rdata:00000A89                 db  40h ; @
.rdata:00000A8A                 db  8Ah ; è
.rdata:00000A8B                 db  27h ; '
.rdata:00000A8C                 db    0
.rdata:00000A8D                 db    0
.rdata:00000A8E                 db    0
.rdata:00000A8F                 db    6
.rdata:00000A90                 db    0
.rdata:00000A91                 db  21h ; !
.rdata:00000A92                 db    0
.rdata:00000A93                 db    0
.rdata:00000A93 _rdata          ends
.rdata:00000A93
.rdata:00000A94 ; ===========================================================================
.rdata:00000A94
.rdata:00000A94 ; Segment type: Pure data
.rdata:00000A94 ; Segment permissions: Read
.rdata:00000A94 _rdata          segment dword public 'DATA' use32
.rdata:00000A94                 assume cs:_rdata
.rdata:00000A94                 ;org 0A94h
.rdata:00000A94 ; COMDAT (pick any)
.rdata:00000A94                 public _IID_IArchiveOpenVolumeCallback
.rdata:00000A94 _IID_IArchiveOpenVolumeCallback db  69h ; i
.rdata:00000A95                 db  0Fh
.rdata:00000A96                 db  17h
.rdata:00000A97                 db  23h ; #
.rdata:00000A98                 db 0C1h ; -
.rdata:00000A99                 db  40h ; @
.rdata:00000A9A                 db  8Ah ; è
.rdata:00000A9B                 db  27h ; '
.rdata:00000A9C                 db    0
.rdata:00000A9D                 db    0
.rdata:00000A9E                 db    0
.rdata:00000A9F                 db    6
.rdata:00000AA0                 db    0
.rdata:00000AA1                 db  30h ; 0
.rdata:00000AA2                 db    0
.rdata:00000AA3                 db    0
.rdata:00000AA3 _rdata          ends
.rdata:00000AA3
.rdata:00000AA4 ; ===========================================================================
.rdata:00000AA4
.rdata:00000AA4 ; Segment type: Pure data
.rdata:00000AA4 ; Segment permissions: Read
.rdata:00000AA4 _rdata          segment dword public 'DATA' use32
.rdata:00000AA4                 assume cs:_rdata
.rdata:00000AA4                 ;org 0AA4h
.rdata:00000AA4 ; COMDAT (pick any)
.rdata:00000AA4                 public _IID_IInArchiveGetStream
.rdata:00000AA4 _IID_IInArchiveGetStream db  69h ; i
.rdata:00000AA5                 db  0Fh
.rdata:00000AA6                 db  17h
.rdata:00000AA7                 db  23h ; #
.rdata:00000AA8                 db 0C1h ; -
.rdata:00000AA9                 db  40h ; @
.rdata:00000AAA                 db  8Ah ; è
.rdata:00000AAB                 db  27h ; '
.rdata:00000AAC                 db    0
.rdata:00000AAD                 db    0
.rdata:00000AAE                 db    0
.rdata:00000AAF                 db    6
.rdata:00000AB0                 db    0
.rdata:00000AB1                 db  40h ; @
.rdata:00000AB2                 db    0
.rdata:00000AB3                 db    0
.rdata:00000AB3 _rdata          ends
.rdata:00000AB3
.rdata:00000AB4 ; ===========================================================================
.rdata:00000AB4
.rdata:00000AB4 ; Segment type: Pure data
.rdata:00000AB4 ; Segment permissions: Read
.rdata:00000AB4 _rdata          segment dword public 'DATA' use32
.rdata:00000AB4                 assume cs:_rdata
.rdata:00000AB4                 ;org 0AB4h
.rdata:00000AB4 ; COMDAT (pick any)
.rdata:00000AB4                 public _IID_IArchiveOpenSetSubArchiveName
.rdata:00000AB4 _IID_IArchiveOpenSetSubArchiveName db  69h ; i
.rdata:00000AB5                 db  0Fh
.rdata:00000AB6                 db  17h
.rdata:00000AB7                 db  23h ; #
.rdata:00000AB8                 db 0C1h ; -
.rdata:00000AB9                 db  40h ; @
.rdata:00000ABA                 db  8Ah ; è
.rdata:00000ABB                 db  27h ; '
.rdata:00000ABC                 db    0
.rdata:00000ABD                 db    0
.rdata:00000ABE                 db    0
.rdata:00000ABF                 db    6
.rdata:00000AC0                 db    0
.rdata:00000AC1                 db  50h ; P
.rdata:00000AC2                 db    0
.rdata:00000AC3                 db    0
.rdata:00000AC3 _rdata          ends
.rdata:00000AC3
.rdata:00000AC4 ; ===========================================================================
.rdata:00000AC4
.rdata:00000AC4 ; Segment type: Pure data
.rdata:00000AC4 ; Segment permissions: Read
.rdata:00000AC4 _rdata          segment dword public 'DATA' use32
.rdata:00000AC4                 assume cs:_rdata
.rdata:00000AC4                 ;org 0AC4h
.rdata:00000AC4 ; COMDAT (pick any)
.rdata:00000AC4                 public _IID_IInArchive
.rdata:00000AC4 _IID_IInArchive db  69h ; i
.rdata:00000AC5                 db  0Fh
.rdata:00000AC6                 db  17h
.rdata:00000AC7                 db  23h ; #
.rdata:00000AC8                 db 0C1h ; -
.rdata:00000AC9                 db  40h ; @
.rdata:00000ACA                 db  8Ah ; è
.rdata:00000ACB                 db  27h ; '
.rdata:00000ACC                 db    0
.rdata:00000ACD                 db    0
.rdata:00000ACE                 db    0
.rdata:00000ACF                 db    6
.rdata:00000AD0                 db    0
.rdata:00000AD1                 db  60h ; `
.rdata:00000AD2                 db    0
.rdata:00000AD3                 db    0
.rdata:00000AD3 _rdata          ends
.rdata:00000AD3
.rdata:00000AD4 ; ===========================================================================
.rdata:00000AD4
.rdata:00000AD4 ; Segment type: Pure data
.rdata:00000AD4 ; Segment permissions: Read
.rdata:00000AD4 _rdata          segment dword public 'DATA' use32
.rdata:00000AD4                 assume cs:_rdata
.rdata:00000AD4                 ;org 0AD4h
.rdata:00000AD4 ; COMDAT (pick any)
.rdata:00000AD4                 public _IID_IArchiveGetRawProps
.rdata:00000AD4 _IID_IArchiveGetRawProps db  69h ; i
.rdata:00000AD5                 db  0Fh
.rdata:00000AD6                 db  17h
.rdata:00000AD7                 db  23h ; #
.rdata:00000AD8                 db 0C1h ; -
.rdata:00000AD9                 db  40h ; @
.rdata:00000ADA                 db  8Ah ; è
.rdata:00000ADB                 db  27h ; '
.rdata:00000ADC                 db    0
.rdata:00000ADD                 db    0
.rdata:00000ADE                 db    0
.rdata:00000ADF                 db    6
.rdata:00000AE0                 db    0
.rdata:00000AE1                 db  70h ; p
.rdata:00000AE2                 db    0
.rdata:00000AE3                 db    0
.rdata:00000AE3 _rdata          ends
.rdata:00000AE3
.rdata:00000AE4 ; ===========================================================================
.rdata:00000AE4
.rdata:00000AE4 ; Segment type: Pure data
.rdata:00000AE4 ; Segment permissions: Read
.rdata:00000AE4 _rdata          segment dword public 'DATA' use32
.rdata:00000AE4                 assume cs:_rdata
.rdata:00000AE4                 ;org 0AE4h
.rdata:00000AE4 ; COMDAT (pick any)
.rdata:00000AE4                 public _IID_IArchiveGetRootProps
.rdata:00000AE4 _IID_IArchiveGetRootProps db  69h ; i
.rdata:00000AE5                 db  0Fh
.rdata:00000AE6                 db  17h
.rdata:00000AE7                 db  23h ; #
.rdata:00000AE8                 db 0C1h ; -
.rdata:00000AE9                 db  40h ; @
.rdata:00000AEA                 db  8Ah ; è
.rdata:00000AEB                 db  27h ; '
.rdata:00000AEC                 db    0
.rdata:00000AED                 db    0
.rdata:00000AEE                 db    0
.rdata:00000AEF                 db    6
.rdata:00000AF0                 db    0
.rdata:00000AF1                 db  71h ; q
.rdata:00000AF2                 db    0
.rdata:00000AF3                 db    0
.rdata:00000AF3 _rdata          ends
.rdata:00000AF3
.rdata:00000AF4 ; ===========================================================================
.rdata:00000AF4
.rdata:00000AF4 ; Segment type: Pure data
.rdata:00000AF4 ; Segment permissions: Read
.rdata:00000AF4 _rdata          segment dword public 'DATA' use32
.rdata:00000AF4                 assume cs:_rdata
.rdata:00000AF4                 ;org 0AF4h
.rdata:00000AF4 ; COMDAT (pick any)
.rdata:00000AF4                 public _IID_IArchiveOpenSeq
.rdata:00000AF4 _IID_IArchiveOpenSeq db  69h ; i
.rdata:00000AF5                 db  0Fh
.rdata:00000AF6                 db  17h
.rdata:00000AF7                 db  23h ; #
.rdata:00000AF8                 db 0C1h ; -
.rdata:00000AF9                 db  40h ; @
.rdata:00000AFA                 db  8Ah ; è
.rdata:00000AFB                 db  27h ; '
.rdata:00000AFC                 db    0
.rdata:00000AFD                 db    0
.rdata:00000AFE                 db    0
.rdata:00000AFF                 db    6
.rdata:00000B00                 db    0
.rdata:00000B01                 db  61h ; a
.rdata:00000B02                 db    0
.rdata:00000B03                 db    0
.rdata:00000B03 _rdata          ends
.rdata:00000B03
.rdata:00000B04 ; ===========================================================================
.rdata:00000B04
.rdata:00000B04 ; Segment type: Pure data
.rdata:00000B04 ; Segment permissions: Read
.rdata:00000B04 _rdata          segment dword public 'DATA' use32
.rdata:00000B04                 assume cs:_rdata
.rdata:00000B04                 ;org 0B04h
.rdata:00000B04 ; COMDAT (pick any)
.rdata:00000B04                 public _IID_IArchiveUpdateCallback
.rdata:00000B04 _IID_IArchiveUpdateCallback db  69h ; i
.rdata:00000B05                 db  0Fh
.rdata:00000B06                 db  17h
.rdata:00000B07                 db  23h ; #
.rdata:00000B08                 db 0C1h ; -
.rdata:00000B09                 db  40h ; @
.rdata:00000B0A                 db  8Ah ; è
.rdata:00000B0B                 db  27h ; '
.rdata:00000B0C                 db    0
.rdata:00000B0D                 db    0
.rdata:00000B0E                 db    0
.rdata:00000B0F                 db    6
.rdata:00000B10                 db    0
.rdata:00000B11                 db  80h ; Ç
.rdata:00000B12                 db    0
.rdata:00000B13                 db    0
.rdata:00000B13 _rdata          ends
.rdata:00000B13
.rdata:00000B14 ; ===========================================================================
.rdata:00000B14
.rdata:00000B14 ; Segment type: Pure data
.rdata:00000B14 ; Segment permissions: Read
.rdata:00000B14 _rdata          segment dword public 'DATA' use32
.rdata:00000B14                 assume cs:_rdata
.rdata:00000B14                 ;org 0B14h
.rdata:00000B14 ; COMDAT (pick any)
.rdata:00000B14                 public _IID_IArchiveUpdateCallback2
.rdata:00000B14 _IID_IArchiveUpdateCallback2 db  69h ; i
.rdata:00000B15                 db  0Fh
.rdata:00000B16                 db  17h
.rdata:00000B17                 db  23h ; #
.rdata:00000B18                 db 0C1h ; -
.rdata:00000B19                 db  40h ; @
.rdata:00000B1A                 db  8Ah ; è
.rdata:00000B1B                 db  27h ; '
.rdata:00000B1C                 db    0
.rdata:00000B1D                 db    0
.rdata:00000B1E                 db    0
.rdata:00000B1F                 db    6
.rdata:00000B20                 db    0
.rdata:00000B21                 db  82h ; é
.rdata:00000B22                 db    0
.rdata:00000B23                 db    0
.rdata:00000B23 _rdata          ends
.rdata:00000B23
.rdata:00000B24 ; ===========================================================================
.rdata:00000B24
.rdata:00000B24 ; Segment type: Pure data
.rdata:00000B24 ; Segment permissions: Read
.rdata:00000B24 _rdata          segment dword public 'DATA' use32
.rdata:00000B24                 assume cs:_rdata
.rdata:00000B24                 ;org 0B24h
.rdata:00000B24 ; COMDAT (pick any)
.rdata:00000B24                 public _IID_IArchiveUpdateCallbackFile
.rdata:00000B24 _IID_IArchiveUpdateCallbackFile db  69h ; i
.rdata:00000B25                 db  0Fh
.rdata:00000B26                 db  17h
.rdata:00000B27                 db  23h ; #
.rdata:00000B28                 db 0C1h ; -
.rdata:00000B29                 db  40h ; @
.rdata:00000B2A                 db  8Ah ; è
.rdata:00000B2B                 db  27h ; '
.rdata:00000B2C                 db    0
.rdata:00000B2D                 db    0
.rdata:00000B2E                 db    0
.rdata:00000B2F                 db    6
.rdata:00000B30                 db    0
.rdata:00000B31                 db  83h ; â
.rdata:00000B32                 db    0
.rdata:00000B33                 db    0
.rdata:00000B33 _rdata          ends
.rdata:00000B33
.rdata:00000B34 ; ===========================================================================
.rdata:00000B34
.rdata:00000B34 ; Segment type: Pure data
.rdata:00000B34 ; Segment permissions: Read
.rdata:00000B34 _rdata          segment dword public 'DATA' use32
.rdata:00000B34                 assume cs:_rdata
.rdata:00000B34                 ;org 0B34h
.rdata:00000B34 ; COMDAT (pick any)
.rdata:00000B34                 public _IID_IOutArchive
.rdata:00000B34 _IID_IOutArchive db  69h ; i
.rdata:00000B35                 db  0Fh
.rdata:00000B36                 db  17h
.rdata:00000B37                 db  23h ; #
.rdata:00000B38                 db 0C1h ; -
.rdata:00000B39                 db  40h ; @
.rdata:00000B3A                 db  8Ah ; è
.rdata:00000B3B                 db  27h ; '
.rdata:00000B3C                 db    0
.rdata:00000B3D                 db    0
.rdata:00000B3E                 db    0
.rdata:00000B3F                 db    6
.rdata:00000B40                 db    0
.rdata:00000B41                 db 0A0h ; á
.rdata:00000B42                 db    0
.rdata:00000B43                 db    0
.rdata:00000B43 _rdata          ends
.rdata:00000B43
.rdata:00000B44 ; ===========================================================================
.rdata:00000B44
.rdata:00000B44 ; Segment type: Pure data
.rdata:00000B44 ; Segment permissions: Read
.rdata:00000B44 _rdata          segment dword public 'DATA' use32
.rdata:00000B44                 assume cs:_rdata
.rdata:00000B44                 ;org 0B44h
.rdata:00000B44 ; COMDAT (pick any)
.rdata:00000B44                 public _IID_ISetProperties
.rdata:00000B44 _IID_ISetProperties db  69h ; i
.rdata:00000B45                 db  0Fh
.rdata:00000B46                 db  17h
.rdata:00000B47                 db  23h ; #
.rdata:00000B48                 db 0C1h ; -
.rdata:00000B49                 db  40h ; @
.rdata:00000B4A                 db  8Ah ; è
.rdata:00000B4B                 db  27h ; '
.rdata:00000B4C                 db    0
.rdata:00000B4D                 db    0
.rdata:00000B4E                 db    0
.rdata:00000B4F                 db    6
.rdata:00000B50                 db    0
.rdata:00000B51                 db    3
.rdata:00000B52                 db    0
.rdata:00000B53                 db    0
.rdata:00000B53 _rdata          ends
.rdata:00000B53
.rdata:00000B54 ; ===========================================================================
.rdata:00000B54
.rdata:00000B54 ; Segment type: Pure data
.rdata:00000B54 ; Segment permissions: Read
.rdata:00000B54 _rdata          segment dword public 'DATA' use32
.rdata:00000B54                 assume cs:_rdata
.rdata:00000B54                 ;org 0B54h
.rdata:00000B54 ; COMDAT (pick any)
.rdata:00000B54                 public _IID_IArchiveKeepModeForNextOpen
.rdata:00000B54 _IID_IArchiveKeepModeForNextOpen db  69h ; i
.rdata:00000B55                 db  0Fh
.rdata:00000B56                 db  17h
.rdata:00000B57                 db  23h ; #
.rdata:00000B58                 db 0C1h ; -
.rdata:00000B59                 db  40h ; @
.rdata:00000B5A                 db  8Ah ; è
.rdata:00000B5B                 db  27h ; '
.rdata:00000B5C                 db    0
.rdata:00000B5D                 db    0
.rdata:00000B5E                 db    0
.rdata:00000B5F                 db    6
.rdata:00000B60                 db    0
.rdata:00000B61                 db    4
.rdata:00000B62                 db    0
.rdata:00000B63                 db    0
.rdata:00000B63 _rdata          ends
.rdata:00000B63
.rdata:00000B64 ; ===========================================================================
.rdata:00000B64
.rdata:00000B64 ; Segment type: Pure data
.rdata:00000B64 ; Segment permissions: Read
.rdata:00000B64 _rdata          segment dword public 'DATA' use32
.rdata:00000B64                 assume cs:_rdata
.rdata:00000B64                 ;org 0B64h
.rdata:00000B64 ; COMDAT (pick any)
.rdata:00000B64                 public _IID_IArchiveAllowTail
.rdata:00000B64 _IID_IArchiveAllowTail db  69h ; i
.rdata:00000B65                 db  0Fh
.rdata:00000B66                 db  17h
.rdata:00000B67                 db  23h ; #
.rdata:00000B68                 db 0C1h ; -
.rdata:00000B69                 db  40h ; @
.rdata:00000B6A                 db  8Ah ; è
.rdata:00000B6B                 db  27h ; '
.rdata:00000B6C                 db    0
.rdata:00000B6D                 db    0
.rdata:00000B6E                 db    0
.rdata:00000B6F                 db    6
.rdata:00000B70                 db    0
.rdata:00000B71                 db    5
.rdata:00000B72                 db    0
.rdata:00000B73                 db    0
.rdata:00000B73 _rdata          ends
.rdata:00000B73
.rdata:00000B74 ; ===========================================================================
.rdata:00000B74
.rdata:00000B74 ; Segment type: Pure data
.rdata:00000B74 ; Segment permissions: Read
.rdata:00000B74 _rdata          segment dword public 'DATA' use32
.rdata:00000B74                 assume cs:_rdata
.rdata:00000B74                 ;org 0B74h
.rdata:00000B74 ; COMDAT (pick any)
.rdata:00000B74                 public _IID_ICryptoGetTextPassword
.rdata:00000B74 _IID_ICryptoGetTextPassword db  69h ; i ; DATA XREF: CExtractCallbackConsole::QueryInterface(_GUID const &,void * *):loc_6440o
.rdata:00000B75                 db  0Fh
.rdata:00000B76                 db  17h
.rdata:00000B77                 db  23h ; #
.rdata:00000B78                 db 0C1h ; -
.rdata:00000B79                 db  40h ; @
.rdata:00000B7A                 db  8Ah ; è
.rdata:00000B7B                 db  27h ; '
.rdata:00000B7C                 db    0
.rdata:00000B7D                 db    0
.rdata:00000B7E                 db    0
.rdata:00000B7F                 db    5
.rdata:00000B80                 db    0
.rdata:00000B81                 db  10h
.rdata:00000B82                 db    0
.rdata:00000B83                 db    0
.rdata:00000B83 _rdata          ends
.rdata:00000B83
.rdata:00000B84 ; ===========================================================================
.rdata:00000B84
.rdata:00000B84 ; Segment type: Pure data
.rdata:00000B84 ; Segment permissions: Read
.rdata:00000B84 _rdata          segment dword public 'DATA' use32
.rdata:00000B84                 assume cs:_rdata
.rdata:00000B84                 ;org 0B84h
.rdata:00000B84 ; COMDAT (pick any)
.rdata:00000B84                 public _IID_ICryptoGetTextPassword2
.rdata:00000B84 _IID_ICryptoGetTextPassword2 db  69h ; i
.rdata:00000B85                 db  0Fh
.rdata:00000B86                 db  17h
.rdata:00000B87                 db  23h ; #
.rdata:00000B88                 db 0C1h ; -
.rdata:00000B89                 db  40h ; @
.rdata:00000B8A                 db  8Ah ; è
.rdata:00000B8B                 db  27h ; '
.rdata:00000B8C                 db    0
.rdata:00000B8D                 db    0
.rdata:00000B8E                 db    0
.rdata:00000B8F                 db    5
.rdata:00000B90                 db    0
.rdata:00000B91                 db  11h
.rdata:00000B92                 db    0
.rdata:00000B93                 db    0
.rdata:00000B93 _rdata          ends
.rdata:00000B93
.rdata:00000B94 ; ===========================================================================
.rdata:00000B94
.rdata:00000B94 ; Segment type: Pure data
.rdata:00000B94 ; Segment permissions: Read
.rdata:00000B94 _rdata          segment dword public 'DATA' use32
.rdata:00000B94                 assume cs:_rdata
.rdata:00000B94                 ;org 0B94h
.rdata:00000B94 ; COMDAT (pick any)
.rdata:00000B94                 public _GUID_DEVINTERFACE_DISK
.rdata:00000B94 ; const GUID GUID_DEVINTERFACE_DISK
.rdata:00000B94 _GUID_DEVINTERFACE_DISK dd 53F56307h            ; Data1
.rdata:00000B94                 dw 0B6BFh               ; Data2
.rdata:00000B94                 dw 11D0h                ; Data3
.rdata:00000B94                 db 94h, 0F2h, 0, 0A0h, 0C9h, 1Eh, 0FBh, 8Bh; Data4
.rdata:00000B94 _rdata          ends
.rdata:00000B94
.rdata:00000BA4 ; ===========================================================================
.rdata:00000BA4
.rdata:00000BA4 ; Segment type: Pure data
.rdata:00000BA4 ; Segment permissions: Read
.rdata:00000BA4 _rdata          segment dword public 'DATA' use32
.rdata:00000BA4                 assume cs:_rdata
.rdata:00000BA4                 ;org 0BA4h
.rdata:00000BA4 ; COMDAT (pick any)
.rdata:00000BA4                 public _GUID_DEVINTERFACE_CDROM
.rdata:00000BA4 ; const GUID GUID_DEVINTERFACE_CDROM
.rdata:00000BA4 _GUID_DEVINTERFACE_CDROM dd 53F56308h            ; Data1
.rdata:00000BA4                 dw 0B6BFh               ; Data2
.rdata:00000BA4                 dw 11D0h                ; Data3
.rdata:00000BA4                 db 94h, 0F2h, 0, 0A0h, 0C9h, 1Eh, 0FBh, 8Bh; Data4
.rdata:00000BA4 _rdata          ends
.rdata:00000BA4
.rdata:00000BB4 ; ===========================================================================
.rdata:00000BB4
.rdata:00000BB4 ; Segment type: Pure data
.rdata:00000BB4 ; Segment permissions: Read
.rdata:00000BB4 _rdata          segment dword public 'DATA' use32
.rdata:00000BB4                 assume cs:_rdata
.rdata:00000BB4                 ;org 0BB4h
.rdata:00000BB4 ; COMDAT (pick any)
.rdata:00000BB4                 public _GUID_DEVINTERFACE_PARTITION
.rdata:00000BB4 ; const GUID GUID_DEVINTERFACE_PARTITION
.rdata:00000BB4 _GUID_DEVINTERFACE_PARTITION dd 53F5630Ah            ; Data1
.rdata:00000BB4                 dw 0B6BFh               ; Data2
.rdata:00000BB4                 dw 11D0h                ; Data3
.rdata:00000BB4                 db 94h, 0F2h, 0, 0A0h, 0C9h, 1Eh, 0FBh, 8Bh; Data4
.rdata:00000BB4 _rdata          ends
.rdata:00000BB4
.rdata:00000BC4 ; ===========================================================================
.rdata:00000BC4
.rdata:00000BC4 ; Segment type: Pure data
.rdata:00000BC4 ; Segment permissions: Read
.rdata:00000BC4 _rdata          segment dword public 'DATA' use32
.rdata:00000BC4                 assume cs:_rdata
.rdata:00000BC4                 ;org 0BC4h
.rdata:00000BC4 ; COMDAT (pick any)
.rdata:00000BC4                 public _GUID_DEVINTERFACE_TAPE
.rdata:00000BC4 ; const GUID GUID_DEVINTERFACE_TAPE
.rdata:00000BC4 _GUID_DEVINTERFACE_TAPE dd 53F5630Bh            ; Data1
.rdata:00000BC4                 dw 0B6BFh               ; Data2
.rdata:00000BC4                 dw 11D0h                ; Data3
.rdata:00000BC4                 db 94h, 0F2h, 0, 0A0h, 0C9h, 1Eh, 0FBh, 8Bh; Data4
.rdata:00000BC4 _rdata          ends
.rdata:00000BC4
.rdata:00000BD4 ; ===========================================================================
.rdata:00000BD4
.rdata:00000BD4 ; Segment type: Pure data
.rdata:00000BD4 ; Segment permissions: Read
.rdata:00000BD4 _rdata          segment dword public 'DATA' use32
.rdata:00000BD4                 assume cs:_rdata
.rdata:00000BD4                 ;org 0BD4h
.rdata:00000BD4 ; COMDAT (pick any)
.rdata:00000BD4                 public _GUID_DEVINTERFACE_WRITEONCEDISK
.rdata:00000BD4 ; const GUID GUID_DEVINTERFACE_WRITEONCEDISK
.rdata:00000BD4 _GUID_DEVINTERFACE_WRITEONCEDISK dd 53F5630Ch            ; Data1
.rdata:00000BD4                 dw 0B6BFh               ; Data2
.rdata:00000BD4                 dw 11D0h                ; Data3
.rdata:00000BD4                 db 94h, 0F2h, 0, 0A0h, 0C9h, 1Eh, 0FBh, 8Bh; Data4
.rdata:00000BD4 _rdata          ends
.rdata:00000BD4
.rdata:00000BE4 ; ===========================================================================
.rdata:00000BE4
.rdata:00000BE4 ; Segment type: Pure data
.rdata:00000BE4 ; Segment permissions: Read
.rdata:00000BE4 _rdata          segment dword public 'DATA' use32
.rdata:00000BE4                 assume cs:_rdata
.rdata:00000BE4                 ;org 0BE4h
.rdata:00000BE4 ; COMDAT (pick any)
.rdata:00000BE4                 public _GUID_DEVINTERFACE_VOLUME
.rdata:00000BE4 ; const GUID GUID_DEVINTERFACE_VOLUME
.rdata:00000BE4 _GUID_DEVINTERFACE_VOLUME dd 53F5630Dh            ; Data1
.rdata:00000BE4                 dw 0B6BFh               ; Data2
.rdata:00000BE4                 dw 11D0h                ; Data3
.rdata:00000BE4                 db 94h, 0F2h, 0, 0A0h, 0C9h, 1Eh, 0FBh, 8Bh; Data4
.rdata:00000BE4 _rdata          ends
.rdata:00000BE4
.rdata:00000BF4 ; ===========================================================================
.rdata:00000BF4
.rdata:00000BF4 ; Segment type: Pure data
.rdata:00000BF4 ; Segment permissions: Read
.rdata:00000BF4 _rdata          segment dword public 'DATA' use32
.rdata:00000BF4                 assume cs:_rdata
.rdata:00000BF4                 ;org 0BF4h
.rdata:00000BF4 ; COMDAT (pick any)
.rdata:00000BF4                 public _GUID_DEVINTERFACE_MEDIUMCHANGER
.rdata:00000BF4 ; const GUID GUID_DEVINTERFACE_MEDIUMCHANGER
.rdata:00000BF4 _GUID_DEVINTERFACE_MEDIUMCHANGER dd 53F56310h            ; Data1
.rdata:00000BF4                 dw 0B6BFh               ; Data2
.rdata:00000BF4                 dw 11D0h                ; Data3
.rdata:00000BF4                 db 94h, 0F2h, 0, 0A0h, 0C9h, 1Eh, 0FBh, 8Bh; Data4
.rdata:00000BF4 _rdata          ends
.rdata:00000BF4
.rdata:00000C04 ; ===========================================================================
.rdata:00000C04
.rdata:00000C04 ; Segment type: Pure data
.rdata:00000C04 ; Segment permissions: Read
.rdata:00000C04 _rdata          segment dword public 'DATA' use32
.rdata:00000C04                 assume cs:_rdata
.rdata:00000C04                 ;org 0C04h
.rdata:00000C04 ; COMDAT (pick any)
.rdata:00000C04                 public _GUID_DEVINTERFACE_FLOPPY
.rdata:00000C04 ; const GUID GUID_DEVINTERFACE_FLOPPY
.rdata:00000C04 _GUID_DEVINTERFACE_FLOPPY dd 53F56311h            ; Data1
.rdata:00000C04                 dw 0B6BFh               ; Data2
.rdata:00000C04                 dw 11D0h                ; Data3
.rdata:00000C04                 db 94h, 0F2h, 0, 0A0h, 0C9h, 1Eh, 0FBh, 8Bh; Data4
.rdata:00000C04 _rdata          ends
.rdata:00000C04
.rdata:00000C14 ; ===========================================================================
.rdata:00000C14
.rdata:00000C14 ; Segment type: Pure data
.rdata:00000C14 ; Segment permissions: Read
.rdata:00000C14 _rdata          segment dword public 'DATA' use32
.rdata:00000C14                 assume cs:_rdata
.rdata:00000C14                 ;org 0C14h
.rdata:00000C14 ; COMDAT (pick any)
.rdata:00000C14                 public _GUID_DEVINTERFACE_CDCHANGER
.rdata:00000C14 ; const GUID GUID_DEVINTERFACE_CDCHANGER
.rdata:00000C14 _GUID_DEVINTERFACE_CDCHANGER dd 53F56312h            ; Data1
.rdata:00000C14                 dw 0B6BFh               ; Data2
.rdata:00000C14                 dw 11D0h                ; Data3
.rdata:00000C14                 db 94h, 0F2h, 0, 0A0h, 0C9h, 1Eh, 0FBh, 8Bh; Data4
.rdata:00000C14 _rdata          ends
.rdata:00000C14
.rdata:00000C24 ; ===========================================================================
.rdata:00000C24
.rdata:00000C24 ; Segment type: Pure data
.rdata:00000C24 ; Segment permissions: Read
.rdata:00000C24 _rdata          segment dword public 'DATA' use32
.rdata:00000C24                 assume cs:_rdata
.rdata:00000C24                 ;org 0C24h
.rdata:00000C24 ; COMDAT (pick any)
.rdata:00000C24                 public _GUID_DEVINTERFACE_STORAGEPORT
.rdata:00000C24 ; const GUID GUID_DEVINTERFACE_STORAGEPORT
.rdata:00000C24 _GUID_DEVINTERFACE_STORAGEPORT dd 2ACCFE60h            ; Data1
.rdata:00000C24                 dw 0C130h               ; Data2
.rdata:00000C24                 dw 11D2h                ; Data3
.rdata:00000C24                 db 0B0h, 82h, 0, 0A0h, 0C9h, 1Eh, 0FBh, 8Bh; Data4
.rdata:00000C24 _rdata          ends
.rdata:00000C24
.rdata:00000C34 ; ===========================================================================
.rdata:00000C34
.rdata:00000C34 ; Segment type: Pure data
.rdata:00000C34 ; Segment permissions: Read
.rdata:00000C34 _rdata          segment dword public 'DATA' use32
.rdata:00000C34                 assume cs:_rdata
.rdata:00000C34                 ;org 0C34h
.rdata:00000C34 ; COMDAT (pick any)
.rdata:00000C34                 public _GUID_DEVINTERFACE_HIDDEN_VOLUME
.rdata:00000C34 ; const GUID GUID_DEVINTERFACE_HIDDEN_VOLUME
.rdata:00000C34 _GUID_DEVINTERFACE_HIDDEN_VOLUME dd 7F108A28h            ; Data1
.rdata:00000C34                 dw 9833h                ; Data2
.rdata:00000C34                 dw 4B3Bh                ; Data3
.rdata:00000C34                 db 0B7h, 80h, 2Ch, 6Bh, 5Fh, 0A5h, 0C0h, 62h; Data4
.rdata:00000C34 _rdata          ends
.rdata:00000C34
.rdata:00000C44 ; ===========================================================================
.rdata:00000C44
.rdata:00000C44 ; Segment type: Pure data
.rdata:00000C44 ; Segment permissions: Read
.rdata:00000C44 _rdata          segment dword public 'DATA' use32
.rdata:00000C44                 assume cs:_rdata
.rdata:00000C44                 ;org 0C44h
.rdata:00000C44 ; COMDAT (pick any)
.rdata:00000C44                 public _GUID_DEVINTERFACE_COMPORT
.rdata:00000C44 ; const GUID GUID_DEVINTERFACE_COMPORT
.rdata:00000C44 _GUID_DEVINTERFACE_COMPORT dd 86E0D1E0h            ; Data1
.rdata:00000C44                 dw 8089h                ; Data2
.rdata:00000C44                 dw 11D0h                ; Data3
.rdata:00000C44                 db 9Ch, 0E4h, 8, 0, 3Eh, 30h, 1Fh, 73h; Data4
.rdata:00000C44 _rdata          ends
.rdata:00000C44
.rdata:00000C54 ; ===========================================================================
.rdata:00000C54
.rdata:00000C54 ; Segment type: Pure data
.rdata:00000C54 ; Segment permissions: Read
.rdata:00000C54 _rdata          segment dword public 'DATA' use32
.rdata:00000C54                 assume cs:_rdata
.rdata:00000C54                 ;org 0C54h
.rdata:00000C54 ; COMDAT (pick any)
.rdata:00000C54                 public _GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR
.rdata:00000C54 ; const GUID GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR
.rdata:00000C54 _GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR dd 4D36E978h            ; Data1
.rdata:00000C54                 dw 0E325h               ; Data2
.rdata:00000C54                 dw 11CEh                ; Data3
.rdata:00000C54                 db 0BFh, 0C1h, 8, 0, 2Bh, 0E1h, 3, 18h; Data4
.rdata:00000C54 _rdata          ends
.rdata:00000C54
.rdata:00000C64 ; ===========================================================================
.rdata:00000C64
.rdata:00000C64 ; Segment type: Pure data
.rdata:00000C64 ; Segment permissions: Read
.rdata:00000C64 _rdata          segment dword public 'DATA' use32
.rdata:00000C64                 assume cs:_rdata
.rdata:00000C64                 ;org 0C64h
.rdata:00000C64 ; COMDAT (pick any)
.rdata:00000C64                 public _IID_ICompressProgressInfo
.rdata:00000C64 _IID_ICompressProgressInfo db  69h ; i
.rdata:00000C65                 db  0Fh
.rdata:00000C66                 db  17h
.rdata:00000C67                 db  23h ; #
.rdata:00000C68                 db 0C1h ; -
.rdata:00000C69                 db  40h ; @
.rdata:00000C6A                 db  8Ah ; è
.rdata:00000C6B                 db  27h ; '
.rdata:00000C6C                 db    0
.rdata:00000C6D                 db    0
.rdata:00000C6E                 db    0
.rdata:00000C6F                 db    4
.rdata:00000C70                 db    0
.rdata:00000C71                 db    4
.rdata:00000C72                 db    0
.rdata:00000C73                 db    0
.rdata:00000C73 _rdata          ends
.rdata:00000C73
.rdata:00000C74 ; ===========================================================================
.rdata:00000C74
.rdata:00000C74 ; Segment type: Pure data
.rdata:00000C74 ; Segment permissions: Read
.rdata:00000C74 _rdata          segment dword public 'DATA' use32
.rdata:00000C74                 assume cs:_rdata
.rdata:00000C74                 ;org 0C74h
.rdata:00000C74 ; COMDAT (pick any)
.rdata:00000C74                 public _IID_ICompressCoder
.rdata:00000C74 _IID_ICompressCoder db  69h ; i
.rdata:00000C75                 db  0Fh
.rdata:00000C76                 db  17h
.rdata:00000C77                 db  23h ; #
.rdata:00000C78                 db 0C1h ; -
.rdata:00000C79                 db  40h ; @
.rdata:00000C7A                 db  8Ah ; è
.rdata:00000C7B                 db  27h ; '
.rdata:00000C7C                 db    0
.rdata:00000C7D                 db    0
.rdata:00000C7E                 db    0
.rdata:00000C7F                 db    4
.rdata:00000C80                 db    0
.rdata:00000C81                 db    5
.rdata:00000C82                 db    0
.rdata:00000C83                 db    0
.rdata:00000C83 _rdata          ends
.rdata:00000C83
.rdata:00000C84 ; ===========================================================================
.rdata:00000C84
.rdata:00000C84 ; Segment type: Pure data
.rdata:00000C84 ; Segment permissions: Read
.rdata:00000C84 _rdata          segment dword public 'DATA' use32
.rdata:00000C84                 assume cs:_rdata
.rdata:00000C84                 ;org 0C84h
.rdata:00000C84 ; COMDAT (pick any)
.rdata:00000C84                 public _IID_ICompressCoder2
.rdata:00000C84 _IID_ICompressCoder2 db  69h ; i
.rdata:00000C85                 db  0Fh
.rdata:00000C86                 db  17h
.rdata:00000C87                 db  23h ; #
.rdata:00000C88                 db 0C1h ; -
.rdata:00000C89                 db  40h ; @
.rdata:00000C8A                 db  8Ah ; è
.rdata:00000C8B                 db  27h ; '
.rdata:00000C8C                 db    0
.rdata:00000C8D                 db    0
.rdata:00000C8E                 db    0
.rdata:00000C8F                 db    4
.rdata:00000C90                 db    0
.rdata:00000C91                 db  18h
.rdata:00000C92                 db    0
.rdata:00000C93                 db    0
.rdata:00000C93 _rdata          ends
.rdata:00000C93
.rdata:00000C94 ; ===========================================================================
.rdata:00000C94
.rdata:00000C94 ; Segment type: Pure data
.rdata:00000C94 ; Segment permissions: Read
.rdata:00000C94 _rdata          segment dword public 'DATA' use32
.rdata:00000C94                 assume cs:_rdata
.rdata:00000C94                 ;org 0C94h
.rdata:00000C94 ; COMDAT (pick any)
.rdata:00000C94                 public _IID_ICompressSetCoderProperties
.rdata:00000C94 _IID_ICompressSetCoderProperties db  69h ; i
.rdata:00000C95                 db  0Fh
.rdata:00000C96                 db  17h
.rdata:00000C97                 db  23h ; #
.rdata:00000C98                 db 0C1h ; -
.rdata:00000C99                 db  40h ; @
.rdata:00000C9A                 db  8Ah ; è
.rdata:00000C9B                 db  27h ; '
.rdata:00000C9C                 db    0
.rdata:00000C9D                 db    0
.rdata:00000C9E                 db    0
.rdata:00000C9F                 db    4
.rdata:00000CA0                 db    0
.rdata:00000CA1                 db  20h
.rdata:00000CA2                 db    0
.rdata:00000CA3                 db    0
.rdata:00000CA3 _rdata          ends
.rdata:00000CA3
.rdata:00000CA4 ; ===========================================================================
.rdata:00000CA4
.rdata:00000CA4 ; Segment type: Pure data
.rdata:00000CA4 ; Segment permissions: Read
.rdata:00000CA4 _rdata          segment dword public 'DATA' use32
.rdata:00000CA4                 assume cs:_rdata
.rdata:00000CA4                 ;org 0CA4h
.rdata:00000CA4 ; COMDAT (pick any)
.rdata:00000CA4                 public _IID_ICompressSetDecoderProperties2
.rdata:00000CA4 _IID_ICompressSetDecoderProperties2 db  69h ; i
.rdata:00000CA5                 db  0Fh
.rdata:00000CA6                 db  17h
.rdata:00000CA7                 db  23h ; #
.rdata:00000CA8                 db 0C1h ; -
.rdata:00000CA9                 db  40h ; @
.rdata:00000CAA                 db  8Ah ; è
.rdata:00000CAB                 db  27h ; '
.rdata:00000CAC                 db    0
.rdata:00000CAD                 db    0
.rdata:00000CAE                 db    0
.rdata:00000CAF                 db    4
.rdata:00000CB0                 db    0
.rdata:00000CB1                 db  22h ; "
.rdata:00000CB2                 db    0
.rdata:00000CB3                 db    0
.rdata:00000CB3 _rdata          ends
.rdata:00000CB3
.rdata:00000CB4 ; ===========================================================================
.rdata:00000CB4
.rdata:00000CB4 ; Segment type: Pure data
.rdata:00000CB4 ; Segment permissions: Read
.rdata:00000CB4 _rdata          segment dword public 'DATA' use32
.rdata:00000CB4                 assume cs:_rdata
.rdata:00000CB4                 ;org 0CB4h
.rdata:00000CB4 ; COMDAT (pick any)
.rdata:00000CB4                 public _IID_ICompressWriteCoderProperties
.rdata:00000CB4 _IID_ICompressWriteCoderProperties db  69h ; i
.rdata:00000CB5                 db  0Fh
.rdata:00000CB6                 db  17h
.rdata:00000CB7                 db  23h ; #
.rdata:00000CB8                 db 0C1h ; -
.rdata:00000CB9                 db  40h ; @
.rdata:00000CBA                 db  8Ah ; è
.rdata:00000CBB                 db  27h ; '
.rdata:00000CBC                 db    0
.rdata:00000CBD                 db    0
.rdata:00000CBE                 db    0
.rdata:00000CBF                 db    4
.rdata:00000CC0                 db    0
.rdata:00000CC1                 db  23h ; #
.rdata:00000CC2                 db    0
.rdata:00000CC3                 db    0
.rdata:00000CC3 _rdata          ends
.rdata:00000CC3
.rdata:00000CC4 ; ===========================================================================
.rdata:00000CC4
.rdata:00000CC4 ; Segment type: Pure data
.rdata:00000CC4 ; Segment permissions: Read
.rdata:00000CC4 _rdata          segment dword public 'DATA' use32
.rdata:00000CC4                 assume cs:_rdata
.rdata:00000CC4                 ;org 0CC4h
.rdata:00000CC4 ; COMDAT (pick any)
.rdata:00000CC4                 public _IID_ICompressGetInStreamProcessedSize
.rdata:00000CC4 _IID_ICompressGetInStreamProcessedSize db  69h ; i
.rdata:00000CC5                 db  0Fh
.rdata:00000CC6                 db  17h
.rdata:00000CC7                 db  23h ; #
.rdata:00000CC8                 db 0C1h ; -
.rdata:00000CC9                 db  40h ; @
.rdata:00000CCA                 db  8Ah ; è
.rdata:00000CCB                 db  27h ; '
.rdata:00000CCC                 db    0
.rdata:00000CCD                 db    0
.rdata:00000CCE                 db    0
.rdata:00000CCF                 db    4
.rdata:00000CD0                 db    0
.rdata:00000CD1                 db  24h ; $
.rdata:00000CD2                 db    0
.rdata:00000CD3                 db    0
.rdata:00000CD3 _rdata          ends
.rdata:00000CD3
.rdata:00000CD4 ; ===========================================================================
.rdata:00000CD4
.rdata:00000CD4 ; Segment type: Pure data
.rdata:00000CD4 ; Segment permissions: Read
.rdata:00000CD4 _rdata          segment dword public 'DATA' use32
.rdata:00000CD4                 assume cs:_rdata
.rdata:00000CD4                 ;org 0CD4h
.rdata:00000CD4 ; COMDAT (pick any)
.rdata:00000CD4                 public _IID_ICompressSetCoderMt
.rdata:00000CD4 _IID_ICompressSetCoderMt db  69h ; i
.rdata:00000CD5                 db  0Fh
.rdata:00000CD6                 db  17h
.rdata:00000CD7                 db  23h ; #
.rdata:00000CD8                 db 0C1h ; -
.rdata:00000CD9                 db  40h ; @
.rdata:00000CDA                 db  8Ah ; è
.rdata:00000CDB                 db  27h ; '
.rdata:00000CDC                 db    0
.rdata:00000CDD                 db    0
.rdata:00000CDE                 db    0
.rdata:00000CDF                 db    4
.rdata:00000CE0                 db    0
.rdata:00000CE1                 db  25h ; %
.rdata:00000CE2                 db    0
.rdata:00000CE3                 db    0
.rdata:00000CE3 _rdata          ends
.rdata:00000CE3
.rdata:00000CE4 ; ===========================================================================
.rdata:00000CE4
.rdata:00000CE4 ; Segment type: Pure data
.rdata:00000CE4 ; Segment permissions: Read
.rdata:00000CE4 _rdata          segment dword public 'DATA' use32
.rdata:00000CE4                 assume cs:_rdata
.rdata:00000CE4                 ;org 0CE4h
.rdata:00000CE4 ; COMDAT (pick any)
.rdata:00000CE4                 public _IID_ICompressSetFinishMode
.rdata:00000CE4 _IID_ICompressSetFinishMode db  69h ; i
.rdata:00000CE5                 db  0Fh
.rdata:00000CE6                 db  17h
.rdata:00000CE7                 db  23h ; #
.rdata:00000CE8                 db 0C1h ; -
.rdata:00000CE9                 db  40h ; @
.rdata:00000CEA                 db  8Ah ; è
.rdata:00000CEB                 db  27h ; '
.rdata:00000CEC                 db    0
.rdata:00000CED                 db    0
.rdata:00000CEE                 db    0
.rdata:00000CEF                 db    4
.rdata:00000CF0                 db    0
.rdata:00000CF1                 db  26h ; &
.rdata:00000CF2                 db    0
.rdata:00000CF3                 db    0
.rdata:00000CF3 _rdata          ends
.rdata:00000CF3
.rdata:00000CF4 ; ===========================================================================
.rdata:00000CF4
.rdata:00000CF4 ; Segment type: Pure data
.rdata:00000CF4 ; Segment permissions: Read
.rdata:00000CF4 _rdata          segment dword public 'DATA' use32
.rdata:00000CF4                 assume cs:_rdata
.rdata:00000CF4                 ;org 0CF4h
.rdata:00000CF4 ; COMDAT (pick any)
.rdata:00000CF4                 public _IID_ICompressGetSubStreamSize
.rdata:00000CF4 _IID_ICompressGetSubStreamSize db  69h ; i
.rdata:00000CF5                 db  0Fh
.rdata:00000CF6                 db  17h
.rdata:00000CF7                 db  23h ; #
.rdata:00000CF8                 db 0C1h ; -
.rdata:00000CF9                 db  40h ; @
.rdata:00000CFA                 db  8Ah ; è
.rdata:00000CFB                 db  27h ; '
.rdata:00000CFC                 db    0
.rdata:00000CFD                 db    0
.rdata:00000CFE                 db    0
.rdata:00000CFF                 db    4
.rdata:00000D00                 db    0
.rdata:00000D01                 db  30h ; 0
.rdata:00000D02                 db    0
.rdata:00000D03                 db    0
.rdata:00000D03 _rdata          ends
.rdata:00000D03
.rdata:00000D04 ; ===========================================================================
.rdata:00000D04
.rdata:00000D04 ; Segment type: Pure data
.rdata:00000D04 ; Segment permissions: Read
.rdata:00000D04 _rdata          segment dword public 'DATA' use32
.rdata:00000D04                 assume cs:_rdata
.rdata:00000D04                 ;org 0D04h
.rdata:00000D04 ; COMDAT (pick any)
.rdata:00000D04                 public _IID_ICompressSetInStream
.rdata:00000D04 _IID_ICompressSetInStream db  69h ; i
.rdata:00000D05                 db  0Fh
.rdata:00000D06                 db  17h
.rdata:00000D07                 db  23h ; #
.rdata:00000D08                 db 0C1h ; -
.rdata:00000D09                 db  40h ; @
.rdata:00000D0A                 db  8Ah ; è
.rdata:00000D0B                 db  27h ; '
.rdata:00000D0C                 db    0
.rdata:00000D0D                 db    0
.rdata:00000D0E                 db    0
.rdata:00000D0F                 db    4
.rdata:00000D10                 db    0
.rdata:00000D11                 db  31h ; 1
.rdata:00000D12                 db    0
.rdata:00000D13                 db    0
.rdata:00000D13 _rdata          ends
.rdata:00000D13
.rdata:00000D14 ; ===========================================================================
.rdata:00000D14
.rdata:00000D14 ; Segment type: Pure data
.rdata:00000D14 ; Segment permissions: Read
.rdata:00000D14 _rdata          segment dword public 'DATA' use32
.rdata:00000D14                 assume cs:_rdata
.rdata:00000D14                 ;org 0D14h
.rdata:00000D14 ; COMDAT (pick any)
.rdata:00000D14                 public _IID_ICompressSetOutStream
.rdata:00000D14 _IID_ICompressSetOutStream db  69h ; i
.rdata:00000D15                 db  0Fh
.rdata:00000D16                 db  17h
.rdata:00000D17                 db  23h ; #
.rdata:00000D18                 db 0C1h ; -
.rdata:00000D19                 db  40h ; @
.rdata:00000D1A                 db  8Ah ; è
.rdata:00000D1B                 db  27h ; '
.rdata:00000D1C                 db    0
.rdata:00000D1D                 db    0
.rdata:00000D1E                 db    0
.rdata:00000D1F                 db    4
.rdata:00000D20                 db    0
.rdata:00000D21                 db  32h ; 2
.rdata:00000D22                 db    0
.rdata:00000D23                 db    0
.rdata:00000D23 _rdata          ends
.rdata:00000D23
.rdata:00000D24 ; ===========================================================================
.rdata:00000D24
.rdata:00000D24 ; Segment type: Pure data
.rdata:00000D24 ; Segment permissions: Read
.rdata:00000D24 _rdata          segment dword public 'DATA' use32
.rdata:00000D24                 assume cs:_rdata
.rdata:00000D24                 ;org 0D24h
.rdata:00000D24 ; COMDAT (pick any)
.rdata:00000D24                 public _IID_ICompressSetOutStreamSize
.rdata:00000D24 _IID_ICompressSetOutStreamSize db  69h ; i
.rdata:00000D25                 db  0Fh
.rdata:00000D26                 db  17h
.rdata:00000D27                 db  23h ; #
.rdata:00000D28                 db 0C1h ; -
.rdata:00000D29                 db  40h ; @
.rdata:00000D2A                 db  8Ah ; è
.rdata:00000D2B                 db  27h ; '
.rdata:00000D2C                 db    0
.rdata:00000D2D                 db    0
.rdata:00000D2E                 db    0
.rdata:00000D2F                 db    4
.rdata:00000D30                 db    0
.rdata:00000D31                 db  34h ; 4
.rdata:00000D32                 db    0
.rdata:00000D33                 db    0
.rdata:00000D33 _rdata          ends
.rdata:00000D33
.rdata:00000D34 ; ===========================================================================
.rdata:00000D34
.rdata:00000D34 ; Segment type: Pure data
.rdata:00000D34 ; Segment permissions: Read
.rdata:00000D34 _rdata          segment dword public 'DATA' use32
.rdata:00000D34                 assume cs:_rdata
.rdata:00000D34                 ;org 0D34h
.rdata:00000D34 ; COMDAT (pick any)
.rdata:00000D34                 public _IID_ICompressSetBufSize
.rdata:00000D34 _IID_ICompressSetBufSize db  69h ; i
.rdata:00000D35                 db  0Fh
.rdata:00000D36                 db  17h
.rdata:00000D37                 db  23h ; #
.rdata:00000D38                 db 0C1h ; -
.rdata:00000D39                 db  40h ; @
.rdata:00000D3A                 db  8Ah ; è
.rdata:00000D3B                 db  27h ; '
.rdata:00000D3C                 db    0
.rdata:00000D3D                 db    0
.rdata:00000D3E                 db    0
.rdata:00000D3F                 db    4
.rdata:00000D40                 db    0
.rdata:00000D41                 db  35h ; 5
.rdata:00000D42                 db    0
.rdata:00000D43                 db    0
.rdata:00000D43 _rdata          ends
.rdata:00000D43
.rdata:00000D44 ; ===========================================================================
.rdata:00000D44
.rdata:00000D44 ; Segment type: Pure data
.rdata:00000D44 ; Segment permissions: Read
.rdata:00000D44 _rdata          segment dword public 'DATA' use32
.rdata:00000D44                 assume cs:_rdata
.rdata:00000D44                 ;org 0D44h
.rdata:00000D44 ; COMDAT (pick any)
.rdata:00000D44                 public _IID_ICompressInitEncoder
.rdata:00000D44 _IID_ICompressInitEncoder db  69h ; i
.rdata:00000D45                 db  0Fh
.rdata:00000D46                 db  17h
.rdata:00000D47                 db  23h ; #
.rdata:00000D48                 db 0C1h ; -
.rdata:00000D49                 db  40h ; @
.rdata:00000D4A                 db  8Ah ; è
.rdata:00000D4B                 db  27h ; '
.rdata:00000D4C                 db    0
.rdata:00000D4D                 db    0
.rdata:00000D4E                 db    0
.rdata:00000D4F                 db    4
.rdata:00000D50                 db    0
.rdata:00000D51                 db  36h ; 6
.rdata:00000D52                 db    0
.rdata:00000D53                 db    0
.rdata:00000D53 _rdata          ends
.rdata:00000D53
.rdata:00000D54 ; ===========================================================================
.rdata:00000D54
.rdata:00000D54 ; Segment type: Pure data
.rdata:00000D54 ; Segment permissions: Read
.rdata:00000D54 _rdata          segment dword public 'DATA' use32
.rdata:00000D54                 assume cs:_rdata
.rdata:00000D54                 ;org 0D54h
.rdata:00000D54 ; COMDAT (pick any)
.rdata:00000D54                 public _IID_ICompressSetInStream2
.rdata:00000D54 _IID_ICompressSetInStream2 db  69h ; i
.rdata:00000D55                 db  0Fh
.rdata:00000D56                 db  17h
.rdata:00000D57                 db  23h ; #
.rdata:00000D58                 db 0C1h ; -
.rdata:00000D59                 db  40h ; @
.rdata:00000D5A                 db  8Ah ; è
.rdata:00000D5B                 db  27h ; '
.rdata:00000D5C                 db    0
.rdata:00000D5D                 db    0
.rdata:00000D5E                 db    0
.rdata:00000D5F                 db    4
.rdata:00000D60                 db    0
.rdata:00000D61                 db  37h ; 7
.rdata:00000D62                 db    0
.rdata:00000D63                 db    0
.rdata:00000D63 _rdata          ends
.rdata:00000D63
.rdata:00000D64 ; ===========================================================================
.rdata:00000D64
.rdata:00000D64 ; Segment type: Pure data
.rdata:00000D64 ; Segment permissions: Read
.rdata:00000D64 _rdata          segment dword public 'DATA' use32
.rdata:00000D64                 assume cs:_rdata
.rdata:00000D64                 ;org 0D64h
.rdata:00000D64 ; COMDAT (pick any)
.rdata:00000D64                 public _IID_ICompressFilter
.rdata:00000D64 _IID_ICompressFilter db  69h ; i
.rdata:00000D65                 db  0Fh
.rdata:00000D66                 db  17h
.rdata:00000D67                 db  23h ; #
.rdata:00000D68                 db 0C1h ; -
.rdata:00000D69                 db  40h ; @
.rdata:00000D6A                 db  8Ah ; è
.rdata:00000D6B                 db  27h ; '
.rdata:00000D6C                 db    0
.rdata:00000D6D                 db    0
.rdata:00000D6E                 db    0
.rdata:00000D6F                 db    4
.rdata:00000D70                 db    0
.rdata:00000D71                 db  40h ; @
.rdata:00000D72                 db    0
.rdata:00000D73                 db    0
.rdata:00000D73 _rdata          ends
.rdata:00000D73
.rdata:00000D74 ; ===========================================================================
.rdata:00000D74
.rdata:00000D74 ; Segment type: Pure data
.rdata:00000D74 ; Segment permissions: Read
.rdata:00000D74 _rdata          segment dword public 'DATA' use32
.rdata:00000D74                 assume cs:_rdata
.rdata:00000D74                 ;org 0D74h
.rdata:00000D74 ; COMDAT (pick any)
.rdata:00000D74                 public _IID_ICompressCodecsInfo
.rdata:00000D74 _IID_ICompressCodecsInfo db  69h ; i
.rdata:00000D75                 db  0Fh
.rdata:00000D76                 db  17h
.rdata:00000D77                 db  23h ; #
.rdata:00000D78                 db 0C1h ; -
.rdata:00000D79                 db  40h ; @
.rdata:00000D7A                 db  8Ah ; è
.rdata:00000D7B                 db  27h ; '
.rdata:00000D7C                 db    0
.rdata:00000D7D                 db    0
.rdata:00000D7E                 db    0
.rdata:00000D7F                 db    4
.rdata:00000D80                 db    0
.rdata:00000D81                 db  60h ; `
.rdata:00000D82                 db    0
.rdata:00000D83                 db    0
.rdata:00000D83 _rdata          ends
.rdata:00000D83
.rdata:00000D84 ; ===========================================================================
.rdata:00000D84
.rdata:00000D84 ; Segment type: Pure data
.rdata:00000D84 ; Segment permissions: Read
.rdata:00000D84 _rdata          segment dword public 'DATA' use32
.rdata:00000D84                 assume cs:_rdata
.rdata:00000D84                 ;org 0D84h
.rdata:00000D84 ; COMDAT (pick any)
.rdata:00000D84                 public _IID_ISetCompressCodecsInfo
.rdata:00000D84 _IID_ISetCompressCodecsInfo db  69h ; i
.rdata:00000D85                 db  0Fh
.rdata:00000D86                 db  17h
.rdata:00000D87                 db  23h ; #
.rdata:00000D88                 db 0C1h ; -
.rdata:00000D89                 db  40h ; @
.rdata:00000D8A                 db  8Ah ; è
.rdata:00000D8B                 db  27h ; '
.rdata:00000D8C                 db    0
.rdata:00000D8D                 db    0
.rdata:00000D8E                 db    0
.rdata:00000D8F                 db    4
.rdata:00000D90                 db    0
.rdata:00000D91                 db  61h ; a
.rdata:00000D92                 db    0
.rdata:00000D93                 db    0
.rdata:00000D93 _rdata          ends
.rdata:00000D93
.rdata:00000D94 ; ===========================================================================
.rdata:00000D94
.rdata:00000D94 ; Segment type: Pure data
.rdata:00000D94 ; Segment permissions: Read
.rdata:00000D94 _rdata          segment dword public 'DATA' use32
.rdata:00000D94                 assume cs:_rdata
.rdata:00000D94                 ;org 0D94h
.rdata:00000D94 ; COMDAT (pick any)
.rdata:00000D94                 public _IID_ICryptoProperties
.rdata:00000D94 _IID_ICryptoProperties db  69h ; i
.rdata:00000D95                 db  0Fh
.rdata:00000D96                 db  17h
.rdata:00000D97                 db  23h ; #
.rdata:00000D98                 db 0C1h ; -
.rdata:00000D99                 db  40h ; @
.rdata:00000D9A                 db  8Ah ; è
.rdata:00000D9B                 db  27h ; '
.rdata:00000D9C                 db    0
.rdata:00000D9D                 db    0
.rdata:00000D9E                 db    0
.rdata:00000D9F                 db    4
.rdata:00000DA0                 db    0
.rdata:00000DA1                 db  80h ; Ç
.rdata:00000DA2                 db    0
.rdata:00000DA3                 db    0
.rdata:00000DA3 _rdata          ends
.rdata:00000DA3
.rdata:00000DA4 ; ===========================================================================
.rdata:00000DA4
.rdata:00000DA4 ; Segment type: Pure data
.rdata:00000DA4 ; Segment permissions: Read
.rdata:00000DA4 _rdata          segment dword public 'DATA' use32
.rdata:00000DA4                 assume cs:_rdata
.rdata:00000DA4                 ;org 0DA4h
.rdata:00000DA4 ; COMDAT (pick any)
.rdata:00000DA4                 public _IID_ICryptoResetInitVector
.rdata:00000DA4 _IID_ICryptoResetInitVector db  69h ; i
.rdata:00000DA5                 db  0Fh
.rdata:00000DA6                 db  17h
.rdata:00000DA7                 db  23h ; #
.rdata:00000DA8                 db 0C1h ; -
.rdata:00000DA9                 db  40h ; @
.rdata:00000DAA                 db  8Ah ; è
.rdata:00000DAB                 db  27h ; '
.rdata:00000DAC                 db    0
.rdata:00000DAD                 db    0
.rdata:00000DAE                 db    0
.rdata:00000DAF                 db    4
.rdata:00000DB0                 db    0
.rdata:00000DB1                 db  8Ch ; î
.rdata:00000DB2                 db    0
.rdata:00000DB3                 db    0
.rdata:00000DB3 _rdata          ends
.rdata:00000DB3
.rdata:00000DB4 ; ===========================================================================
.rdata:00000DB4
.rdata:00000DB4 ; Segment type: Pure data
.rdata:00000DB4 ; Segment permissions: Read
.rdata:00000DB4 _rdata          segment dword public 'DATA' use32
.rdata:00000DB4                 assume cs:_rdata
.rdata:00000DB4                 ;org 0DB4h
.rdata:00000DB4 ; COMDAT (pick any)
.rdata:00000DB4                 public _IID_ICryptoSetPassword
.rdata:00000DB4 _IID_ICryptoSetPassword db  69h ; i
.rdata:00000DB5                 db  0Fh
.rdata:00000DB6                 db  17h
.rdata:00000DB7                 db  23h ; #
.rdata:00000DB8                 db 0C1h ; -
.rdata:00000DB9                 db  40h ; @
.rdata:00000DBA                 db  8Ah ; è
.rdata:00000DBB                 db  27h ; '
.rdata:00000DBC                 db    0
.rdata:00000DBD                 db    0
.rdata:00000DBE                 db    0
.rdata:00000DBF                 db    4
.rdata:00000DC0                 db    0
.rdata:00000DC1                 db  90h ; É
.rdata:00000DC2                 db    0
.rdata:00000DC3                 db    0
.rdata:00000DC3 _rdata          ends
.rdata:00000DC3
.rdata:00000DC4 ; ===========================================================================
.rdata:00000DC4
.rdata:00000DC4 ; Segment type: Pure data
.rdata:00000DC4 ; Segment permissions: Read
.rdata:00000DC4 _rdata          segment dword public 'DATA' use32
.rdata:00000DC4                 assume cs:_rdata
.rdata:00000DC4                 ;org 0DC4h
.rdata:00000DC4 ; COMDAT (pick any)
.rdata:00000DC4                 public _IID_ICryptoSetCRC
.rdata:00000DC4 _IID_ICryptoSetCRC db  69h ; i
.rdata:00000DC5                 db  0Fh
.rdata:00000DC6                 db  17h
.rdata:00000DC7                 db  23h ; #
.rdata:00000DC8                 db 0C1h ; -
.rdata:00000DC9                 db  40h ; @
.rdata:00000DCA                 db  8Ah ; è
.rdata:00000DCB                 db  27h ; '
.rdata:00000DCC                 db    0
.rdata:00000DCD                 db    0
.rdata:00000DCE                 db    0
.rdata:00000DCF                 db    4
.rdata:00000DD0                 db    0
.rdata:00000DD1                 db 0A0h ; á
.rdata:00000DD2                 db    0
.rdata:00000DD3                 db    0
.rdata:00000DD3 _rdata          ends
.rdata:00000DD3
.rdata:00000DD4 ; ===========================================================================
.rdata:00000DD4
.rdata:00000DD4 ; Segment type: Pure data
.rdata:00000DD4 ; Segment permissions: Read
.rdata:00000DD4 _rdata          segment dword public 'DATA' use32
.rdata:00000DD4                 assume cs:_rdata
.rdata:00000DD4                 ;org 0DD4h
.rdata:00000DD4 ; COMDAT (pick any)
.rdata:00000DD4                 public _IID_IHasher
.rdata:00000DD4 _IID_IHasher    db  69h ; i
.rdata:00000DD5                 db  0Fh
.rdata:00000DD6                 db  17h
.rdata:00000DD7                 db  23h ; #
.rdata:00000DD8                 db 0C1h ; -
.rdata:00000DD9                 db  40h ; @
.rdata:00000DDA                 db  8Ah ; è
.rdata:00000DDB                 db  27h ; '
.rdata:00000DDC                 db    0
.rdata:00000DDD                 db    0
.rdata:00000DDE                 db    0
.rdata:00000DDF                 db    4
.rdata:00000DE0                 db    0
.rdata:00000DE1                 db 0C0h ; +
.rdata:00000DE2                 db    0
.rdata:00000DE3                 db    0
.rdata:00000DE3 _rdata          ends
.rdata:00000DE3
.rdata:00000DE4 ; ===========================================================================
.rdata:00000DE4
.rdata:00000DE4 ; Segment type: Pure data
.rdata:00000DE4 ; Segment permissions: Read
.rdata:00000DE4 _rdata          segment dword public 'DATA' use32
.rdata:00000DE4                 assume cs:_rdata
.rdata:00000DE4                 ;org 0DE4h
.rdata:00000DE4 ; COMDAT (pick any)
.rdata:00000DE4                 public _IID_IHashers
.rdata:00000DE4 _IID_IHashers   db  69h ; i
.rdata:00000DE5                 db  0Fh
.rdata:00000DE6                 db  17h
.rdata:00000DE7                 db  23h ; #
.rdata:00000DE8                 db 0C1h ; -
.rdata:00000DE9                 db  40h ; @
.rdata:00000DEA                 db  8Ah ; è
.rdata:00000DEB                 db  27h ; '
.rdata:00000DEC                 db    0
.rdata:00000DED                 db    0
.rdata:00000DEE                 db    0
.rdata:00000DEF                 db    4
.rdata:00000DF0                 db    0
.rdata:00000DF1                 db 0C1h ; -
.rdata:00000DF2                 db    0
.rdata:00000DF3                 db    0
.rdata:00000DF3 _rdata          ends
.rdata:00000DF3
.rdata:00000DF4 ; ===========================================================================
.rdata:00000DF4
.rdata:00000DF4 ; Segment type: Pure data
.rdata:00000DF4 ; Segment permissions: Read
.rdata:00000DF4 _rdata          segment dword public 'DATA' use32
.rdata:00000DF4                 assume cs:_rdata
.rdata:00000DF4                 ;org 0DF4h
.rdata:00000DF4 ; COMDAT (pick any)
.rdata:00000DF4                 public _IID_IFolderArchiveExtractCallback
.rdata:00000DF4 _IID_IFolderArchiveExtractCallback db  69h ; i
.rdata:00000DF4                                         ; DATA XREF: CExtractCallbackConsole::QueryInterface(_GUID const &,void * *):loc_63F0o
.rdata:00000DF5                 db  0Fh
.rdata:00000DF6                 db  17h
.rdata:00000DF7                 db  23h ; #
.rdata:00000DF8                 db 0C1h ; -
.rdata:00000DF9                 db  40h ; @
.rdata:00000DFA                 db  8Ah ; è
.rdata:00000DFB                 db  27h ; '
.rdata:00000DFC                 db    0
.rdata:00000DFD                 db    0
.rdata:00000DFE                 db    0
.rdata:00000DFF                 db    1
.rdata:00000E00                 db    0
.rdata:00000E01                 db    7
.rdata:00000E02                 db    0
.rdata:00000E03                 db    0
.rdata:00000E03 _rdata          ends
.rdata:00000E03
.rdata:00000E04 ; ===========================================================================
.rdata:00000E04
.rdata:00000E04 ; Segment type: Pure data
.rdata:00000E04 ; Segment permissions: Read
.rdata:00000E04 _rdata          segment dword public 'DATA' use32
.rdata:00000E04                 assume cs:_rdata
.rdata:00000E04                 ;org 0E04h
.rdata:00000E04 ; COMDAT (pick any)
.rdata:00000E04                 public _IID_IFolderArchiveExtractCallback2
.rdata:00000E04 _IID_IFolderArchiveExtractCallback2 db  69h ; i
.rdata:00000E04                                         ; DATA XREF: CExtractCallbackConsole::QueryInterface(_GUID const &,void * *):loc_640Co
.rdata:00000E05                 db  0Fh
.rdata:00000E06                 db  17h
.rdata:00000E07                 db  23h ; #
.rdata:00000E08                 db 0C1h ; -
.rdata:00000E09                 db  40h ; @
.rdata:00000E0A                 db  8Ah ; è
.rdata:00000E0B                 db  27h ; '
.rdata:00000E0C                 db    0
.rdata:00000E0D                 db    0
.rdata:00000E0E                 db    0
.rdata:00000E0F                 db    1
.rdata:00000E10                 db    0
.rdata:00000E11                 db    8
.rdata:00000E12                 db    0
.rdata:00000E13                 db    0
.rdata:00000E13 _rdata          ends
.rdata:00000E13
.rdata:00000E14 ; ===========================================================================
.rdata:00000E14
.rdata:00000E14 ; Segment type: Pure data
.rdata:00000E14 ; Segment permissions: Read
.rdata:00000E14 _rdata          segment dword public 'DATA' use32
.rdata:00000E14                 assume cs:_rdata
.rdata:00000E14                 ;org 0E14h
.rdata:00000E14 ; COMDAT (pick any)
.rdata:00000E14                 public _IID_IGetProp
.rdata:00000E14 _IID_IGetProp   db  69h ; i
.rdata:00000E15                 db  0Fh
.rdata:00000E16                 db  17h
.rdata:00000E17                 db  23h ; #
.rdata:00000E18                 db 0C1h ; -
.rdata:00000E19                 db  40h ; @
.rdata:00000E1A                 db  8Ah ; è
.rdata:00000E1B                 db  27h ; '
.rdata:00000E1C                 db    0
.rdata:00000E1D                 db    0
.rdata:00000E1E                 db    0
.rdata:00000E1F                 db    1
.rdata:00000E20                 db    0
.rdata:00000E21                 db  20h
.rdata:00000E22                 db    0
.rdata:00000E23                 db    0
.rdata:00000E23 _rdata          ends
.rdata:00000E23
.rdata:00000E24 ; ===========================================================================
.rdata:00000E24
.rdata:00000E24 ; Segment type: Pure data
.rdata:00000E24 ; Segment permissions: Read
.rdata:00000E24 _rdata          segment dword public 'DATA' use32
.rdata:00000E24                 assume cs:_rdata
.rdata:00000E24                 ;org 0E24h
.rdata:00000E24 ; COMDAT (pick any)
.rdata:00000E24                 public _IID_IFolderExtractToStreamCallback
.rdata:00000E24 _IID_IFolderExtractToStreamCallback db  69h ; i
.rdata:00000E25                 db  0Fh
.rdata:00000E26                 db  17h
.rdata:00000E27                 db  23h ; #
.rdata:00000E28                 db 0C1h ; -
.rdata:00000E29                 db  40h ; @
.rdata:00000E2A                 db  8Ah ; è
.rdata:00000E2B                 db  27h ; '
.rdata:00000E2C                 db    0
.rdata:00000E2D                 db    0
.rdata:00000E2E                 db    0
.rdata:00000E2F                 db    1
.rdata:00000E30                 db    0
.rdata:00000E31                 db  30h ; 0
.rdata:00000E32                 db    0
.rdata:00000E33                 db    0
.rdata:00000E33 _rdata          ends
.rdata:00000E33
.bss:00000E34 ; ===========================================================================
.bss:00000E34
.bss:00000E34 ; Segment type: Uninitialized
.bss:00000E34 ; Segment permissions: Read/Write
.bss:00000E34 _bss            segment dword public 'BSS' use32
.bss:00000E34                 assume cs:_bss
.bss:00000E34                 ;org 0E34h
.bss:00000E34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:00000E34                 public ?g_hInstance@@3PAUHINSTANCE__@@A
.bss:00000E34 ; struct HINSTANCE__ * g_hInstance
.bss:00000E34 ?g_hInstance@@3PAUHINSTANCE__@@A db    ? ;
.bss:00000E35                 db    ? ;
.bss:00000E36                 db    ? ;
.bss:00000E37                 db    ? ;
.bss:00000E37 _bss            ends
.bss:00000E37
.data:00000E38 ; ===========================================================================
.data:00000E38
.data:00000E38 ; Segment type: Pure data
.data:00000E38 ; Segment permissions: Read/Write
.data:00000E38 _data           segment dword public 'DATA' use32
.data:00000E38                 assume cs:_data
.data:00000E38                 ;org 0E38h
.data:00000E38 ; char *kCopyrightString
.data:00000E38 _kCopyrightString dd offset $SG77136    ; DATA XREF: ShowCopyrightAndHelp(CStdOutStream *,bool):loc_2D7Fr
.data:00000E38                                         ; "\n7-Zip (a) [32] 15.05 beta : Copyright"...
.data:00000E3C ; char *kHelpString
.data:00000E3C _kHelpString    dd offset $SG77138      ; DATA XREF: ShowCopyrightAndHelp(CStdOutStream *,bool)+21r
.data:00000E3C                                         ; "Usage: 7za <command> [<switches>...] <a"...
.data:00000E40 ; char *kEverythingIsOk
.data:00000E40 _kEverythingIsOk dd offset $SG77140     ; DATA XREF: WarningsCheck(long,CCallbackConsoleBase const &,CUpdateErrorInfo const &,CStdOutStream &,bool)+228r
.data:00000E40                                         ; "Everything is Ok"
.data:00000E44 ; char *kUserErrorMessage
.data:00000E44 _kUserErrorMessage dd offset $SG77142   ; DATA XREF: Main2(void)+1B7Br
.data:00000E44                                         ; "Incorrect command line"
.data:00000E48 _kNoFormats     dd offset $SG77144      ; DATA XREF: Main2(void):loc_1209r
.data:00000E48                                         ; "7-Zip cannot find the code that works w"...
.data:00000E4C _kUnsupportedArcTypeMessage dd offset $SG77146 ; DATA XREF: Main2(void)+3FFr
.data:00000E4C                                         ; Main2(void):loc_12F6r
.data:00000E4C                                         ; "Unsupported archive type"
.data:00000E50 _kDefaultSfxModule dd offset $SG77148   ; DATA XREF: Main2(void)+17E3r
.data:00000E50 _data           ends                    ; "7zCon.sfx"
.data:00000E50
.text:00000E54 ; ===========================================================================
.text:00000E54
.text:00000E54 ; Segment type: Pure code
.text:00000E54 ; Segment permissions: Read/Execute
.text:00000E54 _text           segment para public 'CODE' use32
.text:00000E54                 assume cs:_text
.text:00000E54                 ;org 0E54h
.text:00000E54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000E54
.text:00000E54 ; =============== S U B R O U T I N E =======================================
.text:00000E54
.text:00000E54 ; Attributes: bp-based frame
.text:00000E54
.text:00000E54 ; int __stdcall Main2()
.text:00000E54                 public ?Main2@@YGHXZ
.text:00000E54 ?Main2@@YGHXZ   proc near
.text:00000E54
.text:00000E54 var_9DC         = dword ptr -9DCh
.text:00000E54 var_9D8         = dword ptr -9D8h
.text:00000E54 var_9D4         = dword ptr -9D4h
.text:00000E54 var_9D0         = dword ptr -9D0h
.text:00000E54 var_9CC         = dword ptr -9CCh
.text:00000E54 var_9C8         = dword ptr -9C8h
.text:00000E54 var_9C4         = dword ptr -9C4h
.text:00000E54 var_9C0         = dword ptr -9C0h
.text:00000E54 var_9BC         = dword ptr -9BCh
.text:00000E54 var_9B8         = dword ptr -9B8h
.text:00000E54 var_9B4         = dword ptr -9B4h
.text:00000E54 var_9B0         = dword ptr -9B0h
.text:00000E54 var_9AC         = dword ptr -9ACh
.text:00000E54 var_9A8         = dword ptr -9A8h
.text:00000E54 var_9A4         = dword ptr -9A4h
.text:00000E54 var_9A0         = dword ptr -9A0h
.text:00000E54 var_99C         = dword ptr -99Ch
.text:00000E54 var_998         = dword ptr -998h
.text:00000E54 var_994         = dword ptr -994h
.text:00000E54 var_98D         = byte ptr -98Dh
.text:00000E54 var_98C         = dword ptr -98Ch
.text:00000E54 var_988         = dword ptr -988h
.text:00000E54 var_984         = dword ptr -984h
.text:00000E54 var_980         = dword ptr -980h
.text:00000E54 var_97C         = dword ptr -97Ch
.text:00000E54 var_978         = dword ptr -978h
.text:00000E54 var_974         = byte ptr -974h
.text:00000E54 var_968         = dword ptr -968h
.text:00000E54 var_964         = dword ptr -964h
.text:00000E54 var_960         = dword ptr -960h
.text:00000E54 var_95C         = dword ptr -95Ch
.text:00000E54 var_958         = dword ptr -958h
.text:00000E54 var_954         = dword ptr -954h
.text:00000E54 var_950         = dword ptr -950h
.text:00000E54 var_94C         = dword ptr -94Ch
.text:00000E54 var_948         = byte ptr -948h
.text:00000E54 var_938         = byte ptr -938h
.text:00000E54 var_934         = byte ptr -934h
.text:00000E54 var_914         = byte ptr -914h
.text:00000E54 var_900         = byte ptr -900h
.text:00000E54 var_8F8         = byte ptr -8F8h
.text:00000E54 var_7CF         = byte ptr -7CFh
.text:00000E54 var_7C4         = dword ptr -7C4h
.text:00000E54 var_7BC         = byte ptr -7BCh
.text:00000E54 var_798         = byte ptr -798h
.text:00000E54 var_790         = byte ptr -790h
.text:00000E54 var_6D8         = byte ptr -6D8h
.text:00000E54 var_6D4         = dword ptr -6D4h
.text:00000E54 var_6D0         = dword ptr -6D0h
.text:00000E54 var_680         = byte ptr -680h
.text:00000E54 var_67C         = byte ptr -67Ch
.text:00000E54 var_670         = byte ptr -670h
.text:00000E54 var_661         = byte ptr -661h
.text:00000E54 var_65C         = byte ptr -65Ch
.text:00000E54 var_599         = byte ptr -599h
.text:00000E54 var_598         = byte ptr -598h
.text:00000E54 var_588         = dword ptr -588h
.text:00000E54 var_580         = dword ptr -580h
.text:00000E54 var_57C         = dword ptr -57Ch
.text:00000E54 var_570         = dword ptr -570h
.text:00000E54 var_56C         = dword ptr -56Ch
.text:00000E54 var_561         = byte ptr -561h
.text:00000E54 var_560         = dword ptr -560h
.text:00000E54 var_558         = byte ptr -558h
.text:00000E54 var_508         = byte ptr -508h
.text:00000E54 var_500         = dword ptr -500h
.text:00000E54 var_4FC         = dword ptr -4FCh
.text:00000E54 var_4F8         = dword ptr -4F8h
.text:00000E54 var_4F4         = dword ptr -4F4h
.text:00000E54 var_4F0         = dword ptr -4F0h
.text:00000E54 var_4EC         = dword ptr -4ECh
.text:00000E54 var_4E8         = dword ptr -4E8h
.text:00000E54 var_4E4         = dword ptr -4E4h
.text:00000E54 var_4E0         = dword ptr -4E0h
.text:00000E54 var_4DC         = dword ptr -4DCh
.text:00000E54 var_4D8         = dword ptr -4D8h
.text:00000E54 var_4D4         = dword ptr -4D4h
.text:00000E54 var_4C8         = byte ptr -4C8h
.text:00000E54 var_4B4         = byte ptr -4B4h
.text:00000E54 var_490         = byte ptr -490h
.text:00000E54 var_48F         = byte ptr -48Fh
.text:00000E54 var_48E         = byte ptr -48Eh
.text:00000E54 var_48D         = byte ptr -48Dh
.text:00000E54 var_48C         = byte ptr -48Ch
.text:00000E54 var_478         = byte ptr -478h
.text:00000E54 var_470         = dword ptr -470h
.text:00000E54 var_468         = byte ptr -468h
.text:00000E54 var_430         = byte ptr -430h
.text:00000E54 var_368         = byte ptr -368h
.text:00000E54 var_354         = byte ptr -354h
.text:00000E54 var_344         = dword ptr -344h
.text:00000E54 var_340         = dword ptr -340h
.text:00000E54 var_339         = byte ptr -339h
.text:00000E54 var_338         = dword ptr -338h
.text:00000E54 var_334         = dword ptr -334h
.text:00000E54 var_330         = dword ptr -330h
.text:00000E54 var_32C         = dword ptr -32Ch
.text:00000E54 var_328         = dword ptr -328h
.text:00000E54 var_320         = byte ptr -320h
.text:00000E54 var_310         = dword ptr -310h
.text:00000E54 var_30C         = dword ptr -30Ch
.text:00000E54 var_308         = dword ptr -308h
.text:00000E54 Str             = dword ptr -304h
.text:00000E54 var_300         = dword ptr -300h
.text:00000E54 var_2FC         = dword ptr -2FCh
.text:00000E54 var_2F8         = dword ptr -2F8h
.text:00000E54 var_2F0         = byte ptr -2F0h
.text:00000E54 var_2E0         = dword ptr -2E0h
.text:00000E54 var_2D8         = byte ptr -2D8h
.text:00000E54 var_2C4         = byte ptr -2C4h
.text:00000E54 var_2B1         = byte ptr -2B1h
.text:00000E54 var_2AC         = byte ptr -2ACh
.text:00000E54 var_2A4         = dword ptr -2A4h
.text:00000E54 ConsoleScreenBufferInfo= _CONSOLE_SCREEN_BUFFER_INFO ptr -29Ch
.text:00000E54 var_280         = dword ptr -280h
.text:00000E54 var_27C         = dword ptr -27Ch
.text:00000E54 var_278         = dword ptr -278h
.text:00000E54 var_274         = dword ptr -274h
.text:00000E54 var_26C         = byte ptr -26Ch
.text:00000E54 var_238         = byte ptr -238h
.text:00000E54 var_237         = byte ptr -237h
.text:00000E54 var_236         = byte ptr -236h
.text:00000E54 var_235         = byte ptr -235h
.text:00000E54 var_231         = byte ptr -231h
.text:00000E54 var_230         = byte ptr -230h
.text:00000E54 var_22F         = byte ptr -22Fh
.text:00000E54 var_22E         = byte ptr -22Eh
.text:00000E54 var_22C         = byte ptr -22Ch
.text:00000E54 var_214         = dword ptr -214h
.text:00000E54 var_210         = byte ptr -210h
.text:00000E54 var_204         = byte ptr -204h
.text:00000E54 var_200         = byte ptr -200h
.text:00000E54 var_1F4         = byte ptr -1F4h
.text:00000E54 var_1F3         = byte ptr -1F3h
.text:00000E54 var_1F0         = byte ptr -1F0h
.text:00000E54 var_1E0         = byte ptr -1E0h
.text:00000E54 var_1C8         = byte ptr -1C8h
.text:00000E54 var_1BC         = byte ptr -1BCh
.text:00000E54 var_1B0         = byte ptr -1B0h
.text:00000E54 var_192         = byte ptr -192h
.text:00000E54 var_18A         = byte ptr -18Ah
.text:00000E54 var_180         = byte ptr -180h
.text:00000E54 var_68          = byte ptr -68h
.text:00000E54 var_54          = byte ptr -54h
.text:00000E54 var_48          = byte ptr -48h
.text:00000E54 var_3C          = dword ptr -3Ch
.text:00000E54 var_38          = dword ptr -38h
.text:00000E54 var_34          = dword ptr -34h
.text:00000E54 var_30          = dword ptr -30h
.text:00000E54 var_2C          = dword ptr -2Ch
.text:00000E54 var_20          = byte ptr -20h
.text:00000E54 var_10          = dword ptr -10h
.text:00000E54 var_C           = dword ptr -0Ch
.text:00000E54 var_4           = dword ptr -4
.text:00000E54
.text:00000E54                 push    ebp
.text:00000E55                 mov     ebp, esp
.text:00000E57                 push    0FFFFFFFFh
.text:00000E59                 push    offset __ehhandler$?Main2@@YGHXZ
.text:00000E5E                 mov     eax, large fs:0
.text:00000E64                 push    eax
.text:00000E65                 sub     esp, 9D0h
.text:00000E6B                 push    esi
.text:00000E6C                 push    edi
.text:00000E6D                 lea     edi, [ebp+var_9DC]
.text:00000E73                 mov     ecx, 274h
.text:00000E78                 mov     eax, 0CCCCCCCCh
.text:00000E7D                 rep stosd
.text:00000E7F                 mov     eax, dword ptr ds:___security_cookie
.text:00000E84                 xor     eax, ebp
.text:00000E86                 mov     [ebp+var_10], eax
.text:00000E89                 push    eax             ; bool
.text:00000E8A                 lea     eax, [ebp+var_C]
.text:00000E8D                 mov     large fs:0, eax
.text:00000E93                 mov     esi, esp
.text:00000E95                 call    dword ptr ds:__imp__SetFileApisToOEM@0 ; SetFileApisToOEM()
.text:00000E9B                 cmp     esi, esp
.text:00000E9D                 call    __RTC_CheckEsp
.text:00000EA2                 lea     ecx, [ebp+var_20]
.text:00000EA5                 call    ??0?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::CObjectVector<UString>(void)
.text:00000EAA                 mov     [ebp+var_4], 0
.text:00000EB1                 mov     esi, esp
.text:00000EB3                 call    dword ptr ds:__imp__GetCommandLineW@0 ; GetCommandLineW()
.text:00000EB9                 cmp     esi, esp
.text:00000EBB                 call    __RTC_CheckEsp
.text:00000EC0                 push    eax
.text:00000EC1                 lea     ecx, [ebp+var_948]
.text:00000EC7                 call    ??0UString@@QAE@PB_W@Z ; UString::UString(wchar_t const *)
.text:00000ECC                 mov     byte ptr [ebp+var_4], 1
.text:00000ED0                 lea     eax, [ebp+var_20]
.text:00000ED3                 push    eax
.text:00000ED4                 lea     ecx, [ebp+var_948]
.text:00000EDA                 push    ecx
.text:00000EDB                 call    ?SplitCommandLine@NCommandLineParser@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z ; NCommandLineParser::SplitCommandLine(UString const &,CObjectVector<UString> &)
.text:00000EE0                 mov     byte ptr [ebp+var_4], 0
.text:00000EE4                 lea     ecx, [ebp+var_948] ; this
.text:00000EEA                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000EEF                 lea     ecx, [ebp+var_20]
.text:00000EF2                 call    ?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size(void)
.text:00000EF7                 cmp     eax, 1
.text:00000EFA                 jnz     short loc_F2E
.text:00000EFC                 push    1
.text:00000EFE                 mov     edx, dword ptr ds:?g_StdStream@@3PAVCStdOutStream@@A ; CStdOutStream * g_StdStream
.text:00000F04                 push    edx
.text:00000F05                 call    ?ShowCopyrightAndHelp@@YGXPAVCStdOutStream@@_N@Z ; ShowCopyrightAndHelp(CStdOutStream *,bool)
.text:00000F0A                 mov     [ebp+var_94C], 0
.text:00000F14                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000F1B                 lea     ecx, [ebp+var_20]
.text:00000F1E                 call    ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text:00000F23                 mov     eax, [ebp+var_94C]
.text:00000F29                 jmp     loc_2A6C
.text:00000F2E ; ---------------------------------------------------------------------------
.text:00000F2E
.text:00000F2E loc_F2E:                                ; CODE XREF: Main2(void)+A6j
.text:00000F2E                 push    0
.text:00000F30                 lea     ecx, [ebp+var_20]
.text:00000F33                 call    ?Delete@?$CObjectVector@VUString@@@@QAEXI@Z ; CObjectVector<UString>::Delete(uint)
.text:00000F38                 lea     ecx, [ebp+var_238] ; this
.text:00000F3E                 call    ??0CArcCmdLineOptions@@QAE@XZ ; CArcCmdLineOptions::CArcCmdLineOptions(void)
.text:00000F43                 mov     byte ptr [ebp+var_4], 2
.text:00000F47                 lea     ecx, [ebp+var_26C]
.text:00000F4D                 call    ??0CArcCmdLineParser@@QAE@XZ ; CArcCmdLineParser::CArcCmdLineParser(void)
.text:00000F52                 mov     byte ptr [ebp+var_4], 3
.text:00000F56                 lea     eax, [ebp+var_238]
.text:00000F5C                 push    eax
.text:00000F5D                 lea     ecx, [ebp+var_20]
.text:00000F60                 push    ecx
.text:00000F61                 lea     ecx, [ebp+var_26C]
.text:00000F67                 call    ?Parse1@CArcCmdLineParser@@QAEXABV?$CObjectVector@VUString@@@@AAUCArcCmdLineOptions@@@Z ; CArcCmdLineParser::Parse1(CObjectVector<UString> const &,CArcCmdLineOptions &)
.text:00000F6C                 cmp     [ebp+var_3C], 1
.text:00000F70                 jz      short loc_F8A
.text:00000F72                 xor     edx, edx
.text:00000F74                 cmp     [ebp+var_3C], 2
.text:00000F78                 setnz   dl
.text:00000F7B                 sub     edx, 1
.text:00000F7E                 and     edx, offset ?g_StdErr@@3VCStdOutStream@@A ; CStdOutStream g_StdErr
.text:00000F84                 mov     dword ptr ds:?g_StdStream@@3PAVCStdOutStream@@A, edx ; CStdOutStream * g_StdStream
.text:00000F8A
.text:00000F8A loc_F8A:                                ; CODE XREF: Main2(void)+11Cj
.text:00000F8A                 cmp     [ebp+var_38], 2
.text:00000F8E                 jz      short loc_FA6
.text:00000F90                 mov     eax, [ebp+var_38]
.text:00000F93                 sub     eax, 1
.text:00000F96                 neg     eax
.text:00000F98                 sbb     eax, eax
.text:00000F9A                 not     eax
.text:00000F9C                 and     eax, offset ?g_StdOut@@3VCStdOutStream@@A ; CStdOutStream g_StdOut
.text:00000FA1                 mov     dword ptr ds:?g_ErrStream@@3PAVCStdOutStream@@A, eax ; CStdOutStream * g_ErrStream
.text:00000FA6
.text:00000FA6 loc_FA6:                                ; CODE XREF: Main2(void)+13Aj
.text:00000FA6                 mov     [ebp+var_274], 0
.text:00000FB0                 cmp     [ebp+var_34], 0
.text:00000FB4                 jz      short loc_FDE
.text:00000FB6                 cmp     [ebp+var_34], 2
.text:00000FBA                 jnz     short loc_FC8
.text:00000FBC                 mov     [ebp+var_984], offset ?g_StdErr@@3VCStdOutStream@@A ; CStdOutStream g_StdErr
.text:00000FC6                 jmp     short loc_FD2
.text:00000FC8 ; ---------------------------------------------------------------------------
.text:00000FC8
.text:00000FC8 loc_FC8:                                ; CODE XREF: Main2(void)+166j
.text:00000FC8                 mov     [ebp+var_984], offset ?g_StdOut@@3VCStdOutStream@@A ; CStdOutStream g_StdOut
.text:00000FD2
.text:00000FD2 loc_FD2:                                ; CODE XREF: Main2(void)+172j
.text:00000FD2                 mov     ecx, [ebp+var_984]
.text:00000FD8                 mov     [ebp+var_274], ecx
.text:00000FDE
.text:00000FDE loc_FDE:                                ; CODE XREF: Main2(void)+160j
.text:00000FDE                 cmp     dword ptr ds:?g_StdStream@@3PAVCStdOutStream@@A, 0 ; CStdOutStream * g_StdStream
.text:00000FE5                 jz      short loc_FF5
.text:00000FE7                 mov     edx, dword ptr ds:?g_StdStream@@3PAVCStdOutStream@@A ; CStdOutStream * g_StdStream
.text:00000FED                 mov     [ebp+var_988], edx
.text:00000FF3                 jmp     short loc_FFF
.text:00000FF5 ; ---------------------------------------------------------------------------
.text:00000FF5
.text:00000FF5 loc_FF5:                                ; CODE XREF: Main2(void)+191j
.text:00000FF5                 mov     [ebp+var_988], offset ?g_StdOut@@3VCStdOutStream@@A ; CStdOutStream g_StdOut
.text:00000FFF
.text:00000FFF loc_FFF:                                ; CODE XREF: Main2(void)+19Fj
.text:00000FFF                 mov     eax, [ebp+var_988]
.text:00001005                 mov     [ebp+var_950], eax
.text:0000100B                 mov     ecx, [ebp+var_950]
.text:00001011                 mov     [ebp+var_278], ecx
.text:00001017                 movzx   edx, [ebp+var_238]
.text:0000101E                 test    edx, edx
.text:00001020                 jz      short loc_1071
.text:00001022                 push    1
.text:00001024                 mov     eax, dword ptr ds:?g_StdStream@@3PAVCStdOutStream@@A ; CStdOutStream * g_StdStream
.text:00001029                 push    eax
.text:0000102A                 call    ?ShowCopyrightAndHelp@@YGXPAVCStdOutStream@@_N@Z ; ShowCopyrightAndHelp(CStdOutStream *,bool)
.text:0000102F                 mov     [ebp+var_954], 0
.text:00001039                 mov     byte ptr [ebp+var_4], 2
.text:0000103D                 lea     ecx, [ebp+var_26C] ; this
.text:00001043                 call    ??1CArcCmdLineParser@@QAE@XZ ; CArcCmdLineParser::~CArcCmdLineParser(void)
.text:00001048                 mov     byte ptr [ebp+var_4], 0
.text:0000104C                 lea     ecx, [ebp+var_238] ; this
.text:00001052                 call    ??1CArcCmdLineOptions@@QAE@XZ ; CArcCmdLineOptions::~CArcCmdLineOptions(void)
.text:00001057                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000105E                 lea     ecx, [ebp+var_20]
.text:00001061                 call    ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text:00001066                 mov     eax, [ebp+var_954]
.text:0000106C                 jmp     loc_2A6C
.text:00001071 ; ---------------------------------------------------------------------------
.text:00001071
.text:00001071 loc_1071:                               ; CODE XREF: Main2(void)+1CCj
.text:00001071                 call    ?EnablePrivilege_SymLink@NSecurity@NWindows@@YGXXZ ; NWindows::NSecurity::EnablePrivilege_SymLink(void)
.text:00001076                 movzx   ecx, [ebp+var_237]
.text:0000107D                 test    ecx, ecx
.text:0000107F                 jz      short loc_108D
.text:00001081                 call    _SetLargePageSize@0 ; SetLargePageSize()
.text:00001086                 push    (offset $SG77136+1) ; this
.text:00001088                 call    ?EnablePrivilege_LockMemory@NSecurity@NWindows@@YG_N_N@Z ; NWindows::NSecurity::EnablePrivilege_LockMemory(bool)
.text:0000108D
.text:0000108D loc_108D:                               ; CODE XREF: Main2(void)+22Bj
.text:0000108D                 movzx   edx, [ebp+var_22F]
.text:00001094                 test    edx, edx
.text:00001096                 jz      short loc_10A5
.text:00001098                 push    0
.text:0000109A                 mov     eax, dword ptr ds:?g_StdStream@@3PAVCStdOutStream@@A ; CStdOutStream * g_StdStream
.text:0000109F                 push    eax
.text:000010A0                 call    ?ShowCopyrightAndHelp@@YGXPAVCStdOutStream@@_N@Z ; ShowCopyrightAndHelp(CStdOutStream *,bool)
.text:000010A5
.text:000010A5 loc_10A5:                               ; CODE XREF: Main2(void)+242j
.text:000010A5                 lea     ecx, [ebp+var_238]
.text:000010AB                 push    ecx             ; struct CArcCmdLineOptions *
.text:000010AC                 lea     ecx, [ebp+var_26C] ; this
.text:000010B2                 call    ?Parse2@CArcCmdLineParser@@QAEXAAUCArcCmdLineOptions@@@Z ; CArcCmdLineParser::Parse2(CArcCmdLineOptions &)
.text:000010B7                 mov     [ebp+var_27C], 1
.text:000010C1                 cmp     [ebp+var_30], 0
.text:000010C5                 jz      short loc_10CF
.text:000010C7                 mov     edx, [ebp+var_34]
.text:000010CA                 cmp     edx, [ebp+var_3C]
.text:000010CD                 jz      short loc_10D9
.text:000010CF
.text:000010CF loc_10CF:                               ; CODE XREF: Main2(void)+271j
.text:000010CF                 mov     [ebp+var_27C], 2
.text:000010D9
.text:000010D9 loc_10D9:                               ; CODE XREF: Main2(void)+279j
.text:000010D9                 mov     [ebp+var_280], 50h ; 'P'
.text:000010E3                 cmp     [ebp+var_274], 0
.text:000010EA                 jz      short loc_1125
.text:000010EC                 mov     esi, esp
.text:000010EE                 lea     eax, [ebp+ConsoleScreenBufferInfo]
.text:000010F4                 push    eax             ; lpConsoleScreenBufferInfo
.text:000010F5                 mov     edi, esp
.text:000010F7                 push    0FFFFFFF5h      ; nStdHandle
.text:000010F9                 call    dword ptr ds:__imp__GetStdHandle@4 ; GetStdHandle(x)
.text:000010FF                 cmp     edi, esp
.text:00001101                 call    __RTC_CheckEsp
.text:00001106                 push    eax             ; hConsoleOutput
.text:00001107                 call    dword ptr ds:__imp__GetConsoleScreenBufferInfo@8 ; GetConsoleScreenBufferInfo(x,x)
.text:0000110D                 cmp     esi, esp
.text:0000110F                 call    __RTC_CheckEsp
.text:00001114                 test    eax, eax
.text:00001116                 jz      short loc_1125
.text:00001118                 movsx   ecx, [ebp+ConsoleScreenBufferInfo.dwSize.X]
.text:0000111F                 mov     [ebp+var_280], ecx
.text:00001125
.text:00001125 loc_1125:                               ; CODE XREF: Main2(void)+296j
.text:00001125                                         ; Main2(void)+2C2j
.text:00001125                 push    18h             ; unsigned int
.text:00001127                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000112C                 add     esp, 4
.text:0000112F                 mov     [ebp+var_95C], eax
.text:00001135                 mov     byte ptr [ebp+var_4], 4
.text:00001139                 cmp     [ebp+var_95C], 0
.text:00001140                 jz      short loc_1155
.text:00001142                 mov     ecx, [ebp+var_95C]
.text:00001148                 call    ??0CCodecs@@QAE@XZ ; CCodecs::CCodecs(void)
.text:0000114D                 mov     [ebp+var_98C], eax
.text:00001153                 jmp     short loc_115F
.text:00001155 ; ---------------------------------------------------------------------------
.text:00001155
.text:00001155 loc_1155:                               ; CODE XREF: Main2(void)+2ECj
.text:00001155                 mov     [ebp+var_98C], 0
.text:0000115F
.text:0000115F loc_115F:                               ; CODE XREF: Main2(void)+2FFj
.text:0000115F                 mov     edx, [ebp+var_98C]
.text:00001165                 mov     [ebp+var_958], edx
.text:0000116B                 mov     byte ptr [ebp+var_4], 3
.text:0000116F                 mov     eax, [ebp+var_958]
.text:00001175                 mov     [ebp+var_2A4], eax
.text:0000117B                 mov     ecx, [ebp+var_2A4]
.text:00001181                 push    ecx
.text:00001182                 lea     ecx, [ebp+var_2AC]
.text:00001188                 call    ??0?$CMyComPtr@UIUnknown@@@@QAE@PAUIUnknown@@@Z ; CMyComPtr<IUnknown>::CMyComPtr<IUnknown>(IUnknown *)
.text:0000118D                 mov     byte ptr [ebp+var_4], 5
.text:00001191                 mov     edx, [ebp+var_2A4]
.text:00001197                 mov     al, [ebp+var_236]
.text:0000119D                 mov     [edx+14h], al
.text:000011A0                 mov     ecx, [ebp+var_2A4]
.text:000011A6                 mov     dl, [ebp+var_235]
.text:000011AC                 mov     [ecx+15h], dl
.text:000011AF                 mov     ecx, [ebp+var_2A4] ; this
.text:000011B5                 call    ?Load@CCodecs@@QAEJXZ ; CCodecs::Load(void)
.text:000011BA                 push    eax
.text:000011BB                 call    ?ThrowException_if_Error@@YGXJ@Z ; ThrowException_if_Error(long)
.text:000011C0                 lea     ecx, [ebp+var_214] ; this
.text:000011C6                 call    ?IsFromExtractGroup@CArcCommand@@QBE_NXZ ; CArcCommand::IsFromExtractGroup(void)
.text:000011CB                 mov     [ebp+var_2B1], al
.text:000011D1                 mov     ecx, [ebp+var_2A4]
.text:000011D7                 add     ecx, 8
.text:000011DA                 call    ?Size@?$CObjectVector@UCArcInfoEx@@@@QBEIXZ ; CObjectVector<CArcInfoEx>::Size(void)
.text:000011DF                 test    eax, eax
.text:000011E1                 jnz     short loc_1226
.text:000011E3                 movzx   eax, [ebp+var_2B1]
.text:000011EA                 test    eax, eax
.text:000011EC                 jnz     short loc_1209
.text:000011EE                 cmp     [ebp+var_214], 6
.text:000011F5                 jz      short loc_1209
.text:000011F7                 lea     ecx, [ebp+var_214] ; this
.text:000011FD                 call    ?IsFromUpdateGroup@CArcCommand@@QBE_NXZ ; CArcCommand::IsFromUpdateGroup(void)
.text:00001202                 movzx   ecx, al
.text:00001205                 test    ecx, ecx
.text:00001207                 jz      short loc_1226
.text:00001209
.text:00001209 loc_1209:                               ; CODE XREF: Main2(void)+398j
.text:00001209                                         ; Main2(void)+3A1j
.text:00001209                 mov     edx, ds:_kNoFormats
.text:0000120F                 mov     [ebp+var_960], edx
.text:00001215                 push    offset __TI2CPAD
.text:0000121A                 lea     eax, [ebp+var_960]
.text:00001220                 push    eax
.text:00001221                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:00001226 ; ---------------------------------------------------------------------------
.text:00001226
.text:00001226 loc_1226:                               ; CODE XREF: Main2(void)+38Dj
.text:00001226                                         ; Main2(void)+3B3j
.text:00001226                 lea     ecx, [ebp+var_2C4]
.text:0000122C                 call    ??0?$CObjectVector@UCOpenType@@@@QAE@XZ ; CObjectVector<COpenType>::CObjectVector<COpenType>(void)
.text:00001231                 mov     byte ptr [ebp+var_4], 6
.text:00001235                 lea     ecx, [ebp+var_2C4]
.text:0000123B                 push    ecx
.text:0000123C                 lea     edx, [ebp+var_54]
.text:0000123F                 push    edx
.text:00001240                 mov     eax, [ebp+var_2A4]
.text:00001246                 push    eax
.text:00001247                 call    ?ParseOpenTypes@@YG_NAAVCCodecs@@ABVUString@@AAV?$CObjectVector@UCOpenType@@@@@Z ; ParseOpenTypes(CCodecs &,UString const &,CObjectVector<COpenType> &)
.text:0000124C                 movzx   ecx, al
.text:0000124F                 test    ecx, ecx
.text:00001251                 jnz     short loc_1270
.text:00001253                 mov     edx, ds:_kUnsupportedArcTypeMessage
.text:00001259                 mov     [ebp+var_964], edx
.text:0000125F                 push    offset __TI2CPAD
.text:00001264                 lea     eax, [ebp+var_964]
.text:0000126A                 push    eax
.text:0000126B                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:00001270 ; ---------------------------------------------------------------------------
.text:00001270
.text:00001270 loc_1270:                               ; CODE XREF: Main2(void)+3FDj
.text:00001270                 lea     ecx, [ebp+var_2D8]
.text:00001276                 call    ??0?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::CRecordVector<int>(void)
.text:0000127B                 mov     byte ptr [ebp+var_4], 7
.text:0000127F                 mov     [ebp+var_2E0], 0
.text:00001289                 jmp     short loc_129A
.text:0000128B ; ---------------------------------------------------------------------------
.text:0000128B
.text:0000128B loc_128B:                               ; CODE XREF: Main2(void)+4E9j
.text:0000128B                 mov     ecx, [ebp+var_2E0]
.text:00001291                 add     ecx, 1
.text:00001294                 mov     [ebp+var_2E0], ecx
.text:0000129A
.text:0000129A loc_129A:                               ; CODE XREF: Main2(void)+435j
.text:0000129A                 lea     ecx, [ebp+var_48]
.text:0000129D                 call    ?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size(void)
.text:000012A2                 cmp     [ebp+var_2E0], eax
.text:000012A8                 jnb     loc_1342
.text:000012AE                 lea     ecx, [ebp+var_2F0]
.text:000012B4                 call    ??0?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::CRecordVector<int>(void)
.text:000012B9                 mov     byte ptr [ebp+var_4], 8
.text:000012BD                 lea     edx, [ebp+var_2F0]
.text:000012C3                 push    edx
.text:000012C4                 mov     eax, [ebp+var_2E0]
.text:000012CA                 push    eax
.text:000012CB                 lea     ecx, [ebp+var_48]
.text:000012CE                 call    ??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[](uint)
.text:000012D3                 push    eax
.text:000012D4                 mov     ecx, [ebp+var_2A4]
.text:000012DA                 call    ?FindFormatForArchiveType@CCodecs@@QBE_NABVUString@@AAV?$CRecordVector@H@@@Z ; CCodecs::FindFormatForArchiveType(UString const &,CRecordVector<int> &)
.text:000012DF                 movzx   ecx, al
.text:000012E2                 test    ecx, ecx
.text:000012E4                 jz      short loc_12F6
.text:000012E6                 lea     ecx, [ebp+var_2F0]
.text:000012EC                 call    ?Size@?$CRecordVector@H@@QBEIXZ ; CRecordVector<int>::Size(void)
.text:000012F1                 cmp     eax, 1
.text:000012F4                 jz      short loc_1313
.text:000012F6
.text:000012F6 loc_12F6:                               ; CODE XREF: Main2(void)+490j
.text:000012F6                 mov     edx, ds:_kUnsupportedArcTypeMessage
.text:000012FC                 mov     [ebp+var_968], edx
.text:00001302                 push    offset __TI2CPAD
.text:00001307                 lea     eax, [ebp+var_968]
.text:0000130D                 push    eax
.text:0000130E                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:00001313 ; ---------------------------------------------------------------------------
.text:00001313
.text:00001313 loc_1313:                               ; CODE XREF: Main2(void)+4A0j
.text:00001313                 push    0
.text:00001315                 lea     ecx, [ebp+var_2F0]
.text:0000131B                 call    ??A?$CRecordVector@H@@QAEAAHI@Z ; CRecordVector<int>::operator[](uint)
.text:00001320                 mov     ecx, [eax]
.text:00001322                 push    ecx
.text:00001323                 lea     ecx, [ebp+var_2D8]
.text:00001329                 call    ?AddToUniqueSorted@?$CRecordVector@H@@QAEIH@Z ; CRecordVector<int>::AddToUniqueSorted(int)
.text:0000132E                 mov     byte ptr [ebp+var_4], 7
.text:00001332                 lea     ecx, [ebp+var_2F0]
.text:00001338                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:0000133D                 jmp     loc_128B
.text:00001342 ; ---------------------------------------------------------------------------
.text:00001342
.text:00001342 loc_1342:                               ; CODE XREF: Main2(void)+454j
.text:00001342                 mov     [ebp+var_2F8], 0
.text:0000134C                 mov     [ebp+var_2FC], 0
.text:00001356                 cmp     [ebp+var_214], 8
.text:0000135D                 jnz     loc_198A
.text:00001363                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00001368                 push    offset $SG77505 ; "Formats:"
.text:0000136D                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00001372                 mov     ecx, [ebp+var_278]
.text:00001378                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:0000137D                 mov     ecx, eax
.text:0000137F                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00001384                 mov     ecx, eax
.text:00001386                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:0000138B                 mov     [ebp+Str], offset $SG77507 ; "KSNFMGOPBELH"
.text:00001395                 mov     edx, [ebp+Str]
.text:0000139B                 push    edx             ; Str
.text:0000139C                 call    _strlen
.text:000013A1                 add     esp, 4
.text:000013A4                 mov     [ebp+var_308], eax
.text:000013AA                 mov     [ebp+var_300], 0
.text:000013B4                 jmp     short loc_13C5
.text:000013B6 ; ---------------------------------------------------------------------------
.text:000013B6
.text:000013B6 loc_13B6:                               ; CODE XREF: Main2(void)+909j
.text:000013B6                 mov     eax, [ebp+var_300]
.text:000013BC                 add     eax, 1
.text:000013BF                 mov     [ebp+var_300], eax
.text:000013C5
.text:000013C5 loc_13C5:                               ; CODE XREF: Main2(void)+560j
.text:000013C5                 mov     ecx, [ebp+var_2A4]
.text:000013CB                 add     ecx, 8
.text:000013CE                 call    ?Size@?$CObjectVector@UCArcInfoEx@@@@QBEIXZ ; CObjectVector<CArcInfoEx>::Size(void)
.text:000013D3                 cmp     [ebp+var_300], eax
.text:000013D9                 jnb     loc_1762
.text:000013DF                 mov     ecx, [ebp+var_300]
.text:000013E5                 push    ecx
.text:000013E6                 mov     ecx, [ebp+var_2A4]
.text:000013EC                 add     ecx, 8
.text:000013EF                 call    ??A?$CObjectVector@UCArcInfoEx@@@@QAEAAUCArcInfoEx@@I@Z ; CObjectVector<CArcInfoEx>::operator[](uint)
.text:000013F4                 mov     [ebp+var_30C], eax
.text:000013FA                 push    offset $SG77514 ; Str
.text:000013FF                 mov     ecx, [ebp+var_278]
.text:00001405                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:0000140A                 mov     edx, [ebp+var_30C]
.text:00001410                 movzx   eax, byte ptr [edx+28h]
.text:00001414                 neg     eax
.text:00001416                 sbb     al, al
.text:00001418                 and     al, 23h
.text:0000141A                 add     al, 20h ; ' '
.text:0000141C                 movzx   ecx, al
.text:0000141F                 push    ecx
.text:00001420                 mov     ecx, [ebp+var_278]
.text:00001426                 call    ??6CStdOutStream@@QAEAAV0@D@Z ; CStdOutStream::operator<<(char)
.text:0000142B                 mov     [ebp+var_310], 0
.text:00001435                 jmp     short loc_1446
.text:00001437 ; ---------------------------------------------------------------------------
.text:00001437
.text:00001437 loc_1437:                               ; CODE XREF: Main2(void)+647j
.text:00001437                 mov     edx, [ebp+var_310]
.text:0000143D                 add     edx, 1
.text:00001440                 mov     [ebp+var_310], edx
.text:00001446
.text:00001446 loc_1446:                               ; CODE XREF: Main2(void)+5E1j
.text:00001446                 mov     eax, [ebp+var_310]
.text:0000144C                 cmp     eax, [ebp+var_308]
.text:00001452                 jnb     short loc_149D
.text:00001454                 mov     edx, 1
.text:00001459                 mov     ecx, [ebp+var_310]
.text:0000145F                 shl     edx, cl
.text:00001461                 mov     eax, [ebp+var_30C]
.text:00001467                 and     edx, [eax]
.text:00001469                 jz      short loc_1481
.text:0000146B                 mov     ecx, [ebp+Str]
.text:00001471                 add     ecx, [ebp+var_310]
.text:00001477                 mov     dl, [ecx]
.text:00001479                 mov     [ebp+var_98D], dl
.text:0000147F                 jmp     short loc_1488
.text:00001481 ; ---------------------------------------------------------------------------
.text:00001481
.text:00001481 loc_1481:                               ; CODE XREF: Main2(void)+615j
.text:00001481                 mov     [ebp+var_98D], 20h ; ' '
.text:00001488
.text:00001488 loc_1488:                               ; CODE XREF: Main2(void)+62Bj
.text:00001488                 movzx   eax, [ebp+var_98D]
.text:0000148F                 push    eax
.text:00001490                 mov     ecx, [ebp+var_278]
.text:00001496                 call    ??6CStdOutStream@@QAEAAV0@D@Z ; CStdOutStream::operator<<(char)
.text:0000149B                 jmp     short loc_1437
.text:0000149D ; ---------------------------------------------------------------------------
.text:0000149D
.text:0000149D loc_149D:                               ; CODE XREF: Main2(void)+5FEj
.text:0000149D                 push    20h ; ' '
.text:0000149F                 mov     ecx, [ebp+var_278]
.text:000014A5                 call    ??6CStdOutStream@@QAEAAV0@D@Z ; CStdOutStream::operator<<(char)
.text:000014AA                 push    8               ; int
.text:000014AC                 mov     ecx, [ebp+var_30C]
.text:000014B2                 add     ecx, 0Ch
.text:000014B5                 push    ecx             ; UString *
.text:000014B6                 mov     edx, [ebp+var_278]
.text:000014BC                 push    edx             ; int
.text:000014BD                 call    ?PrintString@@YGXAAVCStdOutStream@@ABVUString@@I@Z ; PrintString(CStdOutStream &,UString const &,uint)
.text:000014C2                 push    20h ; ' '
.text:000014C4                 mov     ecx, [ebp+var_278]
.text:000014CA                 call    ??6CStdOutStream@@QAEAAV0@D@Z ; CStdOutStream::operator<<(char)
.text:000014CF                 lea     ecx, [ebp+var_320]
.text:000014D5                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:000014DA                 mov     byte ptr [ebp+var_4], 9
.text:000014DE                 mov     [ebp+var_328], 0
.text:000014E8                 jmp     short loc_14F9
.text:000014EA ; ---------------------------------------------------------------------------
.text:000014EA
.text:000014EA loc_14EA:                               ; CODE XREF: Main2(void):loc_159Bj
.text:000014EA                 mov     eax, [ebp+var_328]
.text:000014F0                 add     eax, 1
.text:000014F3                 mov     [ebp+var_328], eax
.text:000014F9
.text:000014F9 loc_14F9:                               ; CODE XREF: Main2(void)+694j
.text:000014F9                 mov     ecx, [ebp+var_30C]
.text:000014FF                 add     ecx, 18h
.text:00001502                 call    ?Size@?$CObjectVector@UCArcExtInfo@@@@QBEIXZ ; CObjectVector<CArcExtInfo>::Size(void)
.text:00001507                 cmp     [ebp+var_328], eax
.text:0000150D                 jnb     loc_15A0
.text:00001513                 cmp     [ebp+var_328], 0
.text:0000151A                 jz      short loc_1527
.text:0000151C                 lea     ecx, [ebp+var_320] ; this
.text:00001522                 call    ?Add_Space@UString@@QAEXXZ ; UString::Add_Space(void)
.text:00001527
.text:00001527 loc_1527:                               ; CODE XREF: Main2(void)+6C6j
.text:00001527                 mov     ecx, [ebp+var_328]
.text:0000152D                 push    ecx
.text:0000152E                 mov     ecx, [ebp+var_30C]
.text:00001534                 add     ecx, 18h
.text:00001537                 call    ??A?$CObjectVector@UCArcExtInfo@@@@QBEABUCArcExtInfo@@I@Z ; CObjectVector<CArcExtInfo>::operator[](uint)
.text:0000153C                 mov     [ebp+var_32C], eax
.text:00001542                 mov     edx, [ebp+var_32C]
.text:00001548                 push    edx
.text:00001549                 lea     ecx, [ebp+var_320]
.text:0000154F                 call    ??YUString@@QAEAAV0@ABV0@@Z ; UString::operator+=(UString const &)
.text:00001554                 mov     ecx, [ebp+var_32C]
.text:0000155A                 add     ecx, 0Ch        ; this
.text:0000155D                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:00001562                 movzx   eax, al
.text:00001565                 test    eax, eax
.text:00001567                 jnz     short loc_159B
.text:00001569                 push    offset $SG77530 ; " ("
.text:0000156E                 lea     ecx, [ebp+var_320]
.text:00001574                 call    ??YUString@@QAEAAV0@PB_W@Z ; UString::operator+=(wchar_t const *)
.text:00001579                 mov     ecx, [ebp+var_32C]
.text:0000157F                 add     ecx, 0Ch
.text:00001582                 push    ecx
.text:00001583                 lea     ecx, [ebp+var_320]
.text:00001589                 call    ??YUString@@QAEAAV0@ABV0@@Z ; UString::operator+=(UString const &)
.text:0000158E                 push    29h ; ')'
.text:00001590                 lea     ecx, [ebp+var_320]
.text:00001596                 call    ??YUString@@QAEAAV0@_W@Z ; UString::operator+=(wchar_t)
.text:0000159B
.text:0000159B loc_159B:                               ; CODE XREF: Main2(void)+713j
.text:0000159B                 jmp     loc_14EA
.text:000015A0 ; ---------------------------------------------------------------------------
.text:000015A0
.text:000015A0 loc_15A0:                               ; CODE XREF: Main2(void)+6B9j
.text:000015A0                 push    0Dh             ; int
.text:000015A2                 lea     edx, [ebp+var_320]
.text:000015A8                 push    edx             ; UString *
.text:000015A9                 mov     eax, [ebp+var_278]
.text:000015AF                 push    eax             ; int
.text:000015B0                 call    ?PrintString@@YGXAAVCStdOutStream@@ABVUString@@I@Z ; PrintString(CStdOutStream &,UString const &,uint)
.text:000015B5                 push    20h ; ' '
.text:000015B7                 mov     ecx, [ebp+var_278]
.text:000015BD                 call    ??6CStdOutStream@@QAEAAV0@D@Z ; CStdOutStream::operator<<(char)
.text:000015C2                 mov     ecx, [ebp+var_30C]
.text:000015C8                 cmp     dword ptr [ecx+2Ch], 0
.text:000015CC                 jz      short loc_15F8
.text:000015CE                 push    20h ; ' '
.text:000015D0                 mov     edx, [ebp+var_30C]
.text:000015D6                 mov     eax, [edx+2Ch]
.text:000015D9                 push    eax
.text:000015DA                 push    offset $SG77532 ; "offset="
.text:000015DF                 mov     ecx, [ebp+var_278]
.text:000015E5                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:000015EA                 mov     ecx, eax
.text:000015EC                 call    ??6CStdOutStream@@QAEAAV0@I@Z ; CStdOutStream::operator<<(uint)
.text:000015F1                 mov     ecx, eax
.text:000015F3                 call    ??6CStdOutStream@@QAEAAV0@D@Z ; CStdOutStream::operator<<(char)
.text:000015F8
.text:000015F8 loc_15F8:                               ; CODE XREF: Main2(void)+778j
.text:000015F8                 mov     [ebp+var_330], 0
.text:00001602                 jmp     short loc_1613
.text:00001604 ; ---------------------------------------------------------------------------
.text:00001604
.text:00001604 loc_1604:                               ; CODE XREF: Main2(void):loc_1739j
.text:00001604                 mov     ecx, [ebp+var_330]
.text:0000160A                 add     ecx, 1
.text:0000160D                 mov     [ebp+var_330], ecx
.text:00001613
.text:00001613 loc_1613:                               ; CODE XREF: Main2(void)+7AEj
.text:00001613                 mov     ecx, [ebp+var_30C]
.text:00001619                 add     ecx, 30h ; '0'
.text:0000161C                 call    ?Size@?$CObjectVector@V?$CBuffer@E@@@@QBEIXZ ; CObjectVector<CBuffer<uchar>>::Size(void)
.text:00001621                 cmp     [ebp+var_330], eax
.text:00001627                 jnb     loc_173E
.text:0000162D                 cmp     [ebp+var_330], 0
.text:00001634                 jz      short loc_1646
.text:00001636                 push    offset $SG77538 ; "  ||  "
.text:0000163B                 mov     ecx, [ebp+var_278]
.text:00001641                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00001646
.text:00001646 loc_1646:                               ; CODE XREF: Main2(void)+7E0j
.text:00001646                 mov     edx, [ebp+var_330]
.text:0000164C                 push    edx
.text:0000164D                 mov     ecx, [ebp+var_30C]
.text:00001653                 add     ecx, 30h ; '0'
.text:00001656                 call    ??A?$CObjectVector@V?$CBuffer@E@@@@QBEABV?$CBuffer@E@@I@Z ; CObjectVector<CBuffer<uchar>>::operator[](uint)
.text:0000165B                 mov     [ebp+var_334], eax
.text:00001661                 mov     [ebp+var_338], 0
.text:0000166B                 jmp     short loc_167C
.text:0000166D ; ---------------------------------------------------------------------------
.text:0000166D
.text:0000166D loc_166D:                               ; CODE XREF: Main2(void):loc_1734j
.text:0000166D                 mov     eax, [ebp+var_338]
.text:00001673                 add     eax, 1
.text:00001676                 mov     [ebp+var_338], eax
.text:0000167C
.text:0000167C loc_167C:                               ; CODE XREF: Main2(void)+817j
.text:0000167C                 mov     ecx, [ebp+var_334]
.text:00001682                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:00001687                 cmp     [ebp+var_338], eax
.text:0000168D                 jnb     loc_1739
.text:00001693                 cmp     [ebp+var_338], 0
.text:0000169A                 jz      short loc_16A9
.text:0000169C                 push    20h ; ' '
.text:0000169E                 mov     ecx, [ebp+var_278]
.text:000016A4                 call    ??6CStdOutStream@@QAEAAV0@D@Z ; CStdOutStream::operator<<(char)
.text:000016A9
.text:000016A9 loc_16A9:                               ; CODE XREF: Main2(void)+846j
.text:000016A9                 mov     ecx, [ebp+var_334]
.text:000016AF                 call    ??B?$CBuffer@E@@QBEPBEXZ ; CBuffer<uchar>::operator uchar const *(void)
.text:000016B4                 mov     ecx, [ebp+var_338]
.text:000016BA                 mov     dl, [eax+ecx]
.text:000016BD                 mov     [ebp+var_339], dl
.text:000016C3                 movzx   eax, [ebp+var_339]
.text:000016CA                 cmp     eax, 20h ; ' '
.text:000016CD                 jle     short loc_16F3
.text:000016CF                 movzx   ecx, [ebp+var_339]
.text:000016D6                 cmp     ecx, 80h ; 'Ç'
.text:000016DC                 jge     short loc_16F3
.text:000016DE                 movzx   edx, [ebp+var_339]
.text:000016E5                 push    edx
.text:000016E6                 mov     ecx, [ebp+var_278]
.text:000016EC                 call    ??6CStdOutStream@@QAEAAV0@D@Z ; CStdOutStream::operator<<(char)
.text:000016F1                 jmp     short loc_1734
.text:000016F3 ; ---------------------------------------------------------------------------
.text:000016F3
.text:000016F3 loc_16F3:                               ; CODE XREF: Main2(void)+879j
.text:000016F3                                         ; Main2(void)+888j
.text:000016F3                 movzx   eax, [ebp+var_339]
.text:000016FA                 sar     eax, 4
.text:000016FD                 and     eax, 0Fh
.text:00001700                 push    eax
.text:00001701                 call    ?GetHex@@YGDI@Z ; GetHex(uint)
.text:00001706                 movzx   ecx, al
.text:00001709                 push    ecx
.text:0000170A                 mov     ecx, [ebp+var_278]
.text:00001710                 call    ??6CStdOutStream@@QAEAAV0@D@Z ; CStdOutStream::operator<<(char)
.text:00001715                 movzx   edx, [ebp+var_339]
.text:0000171C                 and     edx, 0Fh
.text:0000171F                 push    edx
.text:00001720                 call    ?GetHex@@YGDI@Z ; GetHex(uint)
.text:00001725                 movzx   eax, al
.text:00001728                 push    eax
.text:00001729                 mov     ecx, [ebp+var_278]
.text:0000172F                 call    ??6CStdOutStream@@QAEAAV0@D@Z ; CStdOutStream::operator<<(char)
.text:00001734
.text:00001734 loc_1734:                               ; CODE XREF: Main2(void)+89Dj
.text:00001734                 jmp     loc_166D
.text:00001739 ; ---------------------------------------------------------------------------
.text:00001739
.text:00001739 loc_1739:                               ; CODE XREF: Main2(void)+839j
.text:00001739                 jmp     loc_1604
.text:0000173E ; ---------------------------------------------------------------------------
.text:0000173E
.text:0000173E loc_173E:                               ; CODE XREF: Main2(void)+7D3j
.text:0000173E                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00001743                 mov     ecx, [ebp+var_278]
.text:00001749                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:0000174E                 mov     byte ptr [ebp+var_4], 7
.text:00001752                 lea     ecx, [ebp+var_320] ; this
.text:00001758                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000175D                 jmp     loc_13B6
.text:00001762 ; ---------------------------------------------------------------------------
.text:00001762
.text:00001762 loc_1762:                               ; CODE XREF: Main2(void)+585j
.text:00001762                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00001767                 push    offset $SG77549 ; "Codecs:"
.text:0000176C                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00001771                 mov     ecx, [ebp+var_278]
.text:00001777                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:0000177C                 mov     ecx, eax
.text:0000177E                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00001783                 mov     ecx, eax
.text:00001785                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:0000178A                 mov     [ebp+var_300], 0
.text:00001794                 jmp     short loc_17A5
.text:00001796 ; ---------------------------------------------------------------------------
.text:00001796
.text:00001796 loc_1796:                               ; CODE XREF: Main2(void)+A48j
.text:00001796                 mov     ecx, [ebp+var_300]
.text:0000179C                 add     ecx, 1
.text:0000179F                 mov     [ebp+var_300], ecx
.text:000017A5
.text:000017A5 loc_17A5:                               ; CODE XREF: Main2(void)+940j
.text:000017A5                 mov     edx, [ebp+var_300]
.text:000017AB                 cmp     edx, dword ptr ds:?g_NumCodecs@@3IA ; uint g_NumCodecs
.text:000017B1                 jnb     loc_18A1
.text:000017B7                 mov     eax, [ebp+var_300]
.text:000017BD                 mov     ecx, dword ptr ds:?g_Codecs@@3PAPBUCCodecInfo@@A[eax*4] ; CCodecInfo const * * g_Codecs
.text:000017C4                 mov     [ebp+var_340], ecx
.text:000017CA                 push    0FFFFFFFFh
.text:000017CC                 mov     edx, [ebp+var_278]
.text:000017D2                 push    edx
.text:000017D3                 call    ?PrintLibIndex@@YGXAAVCStdOutStream@@H@Z ; PrintLibIndex(CStdOutStream &,int)
.text:000017D8                 mov     eax, [ebp+var_340]
.text:000017DE                 cmp     dword ptr [eax+14h], 1
.text:000017E2                 jnz     short loc_17F3
.text:000017E4                 push    20h ; ' '
.text:000017E6                 mov     ecx, [ebp+var_278]
.text:000017EC                 call    ??6CStdOutStream@@QAEAAV0@D@Z ; CStdOutStream::operator<<(char)
.text:000017F1                 jmp     short loc_1808
.text:000017F3 ; ---------------------------------------------------------------------------
.text:000017F3
.text:000017F3 loc_17F3:                               ; CODE XREF: Main2(void)+98Ej
.text:000017F3                 mov     ecx, [ebp+var_340]
.text:000017F9                 mov     edx, [ecx+14h]
.text:000017FC                 push    edx
.text:000017FD                 mov     ecx, [ebp+var_278]
.text:00001803                 call    ??6CStdOutStream@@QAEAAV0@I@Z ; CStdOutStream::operator<<(uint)
.text:00001808
.text:00001808 loc_1808:                               ; CODE XREF: Main2(void)+99Dj
.text:00001808                 mov     eax, [ebp+var_340]
.text:0000180E                 mov     ecx, [eax+4]
.text:00001811                 neg     ecx
.text:00001813                 sbb     cl, cl
.text:00001815                 and     cl, 25h
.text:00001818                 add     cl, 20h ; ' '
.text:0000181B                 movzx   edx, cl
.text:0000181E                 push    edx
.text:0000181F                 mov     ecx, [ebp+var_278]
.text:00001825                 call    ??6CStdOutStream@@QAEAAV0@D@Z ; CStdOutStream::operator<<(char)
.text:0000182A                 mov     eax, [ebp+var_340]
.text:00001830                 mov     ecx, [eax]
.text:00001832                 neg     ecx
.text:00001834                 sbb     cl, cl
.text:00001836                 and     cl, 24h
.text:00001839                 add     cl, 20h ; ' '
.text:0000183C                 movzx   edx, cl
.text:0000183F                 push    edx
.text:00001840                 mov     ecx, [ebp+var_278]
.text:00001846                 call    ??6CStdOutStream@@QAEAAV0@D@Z ; CStdOutStream::operator<<(char)
.text:0000184B                 push    20h ; ' '
.text:0000184D                 mov     ecx, [ebp+var_278]
.text:00001853                 call    ??6CStdOutStream@@QAEAAV0@D@Z ; CStdOutStream::operator<<(char)
.text:00001858                 mov     eax, [ebp+var_340]
.text:0000185E                 mov     ecx, [eax+0Ch]
.text:00001861                 push    ecx
.text:00001862                 mov     edx, [eax+8]
.text:00001865                 push    edx
.text:00001866                 mov     eax, [ebp+var_278]
.text:0000186C                 push    eax
.text:0000186D                 call    ?PrintHexId@@YGXAAVCStdOutStream@@_K@Z ; PrintHexId(CStdOutStream &,unsigned __int64)
.text:00001872                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00001877                 mov     ecx, [ebp+var_340]
.text:0000187D                 mov     edx, [ecx+10h]
.text:00001880                 push    edx             ; Str
.text:00001881                 push    20h ; ' '
.text:00001883                 mov     ecx, [ebp+var_278]
.text:00001889                 call    ??6CStdOutStream@@QAEAAV0@D@Z ; CStdOutStream::operator<<(char)
.text:0000188E                 mov     ecx, eax
.text:00001890                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00001895                 mov     ecx, eax
.text:00001897                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:0000189C                 jmp     loc_1796
.text:000018A1 ; ---------------------------------------------------------------------------
.text:000018A1
.text:000018A1 loc_18A1:                               ; CODE XREF: Main2(void)+95Dj
.text:000018A1                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:000018A6                 push    offset $SG77558 ; "Hashers:"
.text:000018AB                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:000018B0                 mov     ecx, [ebp+var_278]
.text:000018B6                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:000018BB                 mov     ecx, eax
.text:000018BD                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:000018C2                 mov     ecx, eax
.text:000018C4                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:000018C9                 mov     [ebp+var_300], 0
.text:000018D3                 jmp     short loc_18E4
.text:000018D5 ; ---------------------------------------------------------------------------
.text:000018D5
.text:000018D5 loc_18D5:                               ; CODE XREF: Main2(void)+B2Cj
.text:000018D5                 mov     eax, [ebp+var_300]
.text:000018DB                 add     eax, 1
.text:000018DE                 mov     [ebp+var_300], eax
.text:000018E4
.text:000018E4 loc_18E4:                               ; CODE XREF: Main2(void)+A7Fj
.text:000018E4                 mov     ecx, [ebp+var_300]
.text:000018EA                 cmp     ecx, dword ptr ds:?g_NumHashers@@3IA ; uint g_NumHashers
.text:000018F0                 jnb     loc_1985
.text:000018F6                 mov     edx, [ebp+var_300]
.text:000018FC                 mov     eax, dword ptr ds:?g_Hashers@@3PAPBUCHasherInfo@@A[edx*4] ; CHasherInfo const * * g_Hashers
.text:00001903                 mov     [ebp+var_344], eax
.text:00001909                 push    0FFFFFFFFh
.text:0000190B                 mov     ecx, [ebp+var_278]
.text:00001911                 push    ecx
.text:00001912                 call    ?PrintLibIndex@@YGXAAVCStdOutStream@@H@Z ; PrintLibIndex(CStdOutStream &,int)
.text:00001917                 push    4
.text:00001919                 mov     edx, [ebp+var_344]
.text:0000191F                 mov     eax, [edx+14h]
.text:00001922                 push    eax
.text:00001923                 mov     ecx, [ebp+var_278]
.text:00001929                 push    ecx
.text:0000192A                 call    ?PrintUInt32@@YGXAAVCStdOutStream@@II@Z ; PrintUInt32(CStdOutStream &,uint,uint)
.text:0000192F                 push    20h ; ' '
.text:00001931                 mov     ecx, [ebp+var_278]
.text:00001937                 call    ??6CStdOutStream@@QAEAAV0@D@Z ; CStdOutStream::operator<<(char)
.text:0000193C                 mov     edx, [ebp+var_344]
.text:00001942                 mov     eax, [edx+0Ch]
.text:00001945                 push    eax
.text:00001946                 mov     ecx, [edx+8]
.text:00001949                 push    ecx
.text:0000194A                 mov     edx, [ebp+var_278]
.text:00001950                 push    edx
.text:00001951                 call    ?PrintHexId@@YGXAAVCStdOutStream@@_K@Z ; PrintHexId(CStdOutStream &,unsigned __int64)
.text:00001956                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:0000195B                 mov     eax, [ebp+var_344]
.text:00001961                 mov     ecx, [eax+10h]
.text:00001964                 push    ecx             ; Str
.text:00001965                 push    20h ; ' '
.text:00001967                 mov     ecx, [ebp+var_278]
.text:0000196D                 call    ??6CStdOutStream@@QAEAAV0@D@Z ; CStdOutStream::operator<<(char)
.text:00001972                 mov     ecx, eax
.text:00001974                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00001979                 mov     ecx, eax
.text:0000197B                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00001980                 jmp     loc_18D5
.text:00001985 ; ---------------------------------------------------------------------------
.text:00001985
.text:00001985 loc_1985:                               ; CODE XREF: Main2(void)+A9Cj
.text:00001985                 jmp     loc_29DB
.text:0000198A ; ---------------------------------------------------------------------------
.text:0000198A
.text:0000198A loc_198A:                               ; CODE XREF: Main2(void)+509j
.text:0000198A                 cmp     [ebp+var_214], 7
.text:00001991                 jnz     short loc_19F0
.text:00001993                 mov     ecx, [ebp+var_278]
.text:00001999                 call    ??BCStdOutStream@@QAEPAU_iobuf@@XZ ; CStdOutStream::operator _iobuf *(void)
.text:0000199E                 push    eax
.text:0000199F                 mov     edx, [ebp+var_2C]
.text:000019A2                 push    edx
.text:000019A3                 lea     eax, [ebp+var_1BC]
.text:000019A9                 push    eax
.text:000019AA                 call    ?BenchCon@@YGJABV?$CObjectVector@UCProperty@@@@IPAU_iobuf@@@Z ; BenchCon(CObjectVector<CProperty> const &,uint,_iobuf *)
.text:000019AF                 mov     [ebp+var_2FC], eax
.text:000019B5                 cmp     [ebp+var_2FC], 1
.text:000019BC                 jnz     short loc_19EB
.text:000019BE                 cmp     dword ptr ds:?g_ErrStream@@3PAVCStdOutStream@@A, 0 ; CStdOutStream * g_ErrStream
.text:000019C5                 jz      short loc_19D7
.text:000019C7                 push    offset $SG77569 ; "\nDecoding ERROR\n"
.text:000019CC                 mov     ecx, dword ptr ds:?g_ErrStream@@3PAVCStdOutStream@@A ; CStdOutStream * g_ErrStream
.text:000019D2                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:000019D7
.text:000019D7 loc_19D7:                               ; CODE XREF: Main2(void)+B71j
.text:000019D7                 mov     [ebp+var_2F8], 2
.text:000019E1                 mov     [ebp+var_2FC], 0
.text:000019EB
.text:000019EB loc_19EB:                               ; CODE XREF: Main2(void)+B68j
.text:000019EB                 jmp     loc_29DB
.text:000019F0 ; ---------------------------------------------------------------------------
.text:000019F0
.text:000019F0 loc_19F0:                               ; CODE XREF: Main2(void)+B3Dj
.text:000019F0                 movzx   ecx, [ebp+var_2B1]
.text:000019F7                 test    ecx, ecx
.text:000019F9                 jnz     short loc_1A08
.text:000019FB                 cmp     [ebp+var_214], 6
.text:00001A02                 jnz     loc_25EC
.text:00001A08
.text:00001A08 loc_1A08:                               ; CODE XREF: Main2(void)+BA5j
.text:00001A08                 lea     ecx, [ebp+var_354]
.text:00001A0E                 call    ??0?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::CObjectVector<UString>(void)
.text:00001A13                 mov     byte ptr [ebp+var_4], 0Ah
.text:00001A17                 lea     ecx, [ebp+var_368]
.text:00001A1D                 call    ??0?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::CObjectVector<UString>(void)
.text:00001A22                 mov     byte ptr [ebp+var_4], 0Bh
.text:00001A26                 movzx   edx, [ebp+var_231]
.text:00001A2D                 test    edx, edx
.text:00001A2F                 jz      short loc_1A5A
.text:00001A31                 lea     eax, [ebp+var_1C8]
.text:00001A37                 push    eax
.text:00001A38                 lea     ecx, [ebp+var_354]
.text:00001A3E                 call    ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ; CObjectVector<UString>::Add(UString const &)
.text:00001A43                 lea     ecx, [ebp+var_1C8]
.text:00001A49                 push    ecx
.text:00001A4A                 lea     ecx, [ebp+var_368]
.text:00001A50                 call    ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ; CObjectVector<UString>::Add(UString const &)
.text:00001A55                 jmp     loc_1B92
.text:00001A5A ; ---------------------------------------------------------------------------
.text:00001A5A
.text:00001A5A loc_1A5A:                               ; CODE XREF: Main2(void)+BDBj
.text:00001A5A                 lea     ecx, [ebp+var_430]
.text:00001A60                 call    ??0CExtractScanConsole@@QAE@XZ ; CExtractScanConsole::CExtractScanConsole(void)
.text:00001A65                 mov     byte ptr [ebp+var_4], 0Ch
.text:00001A69                 mov     edx, [ebp+var_274]
.text:00001A6F                 push    edx             ; struct CStdOutStream *
.text:00001A70                 mov     eax, dword ptr ds:?g_ErrStream@@3PAVCStdOutStream@@A ; CStdOutStream * g_ErrStream
.text:00001A75                 push    eax             ; struct CStdOutStream *
.text:00001A76                 movzx   ecx, [ebp+var_22F]
.text:00001A7D                 neg     ecx
.text:00001A7F                 sbb     ecx, ecx
.text:00001A81                 and     ecx, dword ptr ds:?g_StdStream@@3PAVCStdOutStream@@A ; CStdOutStream * g_StdStream
.text:00001A87                 push    ecx             ; struct CStdOutStream *
.text:00001A88                 lea     ecx, [ebp+var_430] ; this
.text:00001A8E                 call    ?Init@CExtractScanConsole@@QAEXPAVCStdOutStream@@00@Z ; CExtractScanConsole::Init(CStdOutStream *,CStdOutStream *,CStdOutStream *)
.text:00001A93                 mov     edx, [ebp+var_280]
.text:00001A99                 push    edx             ; unsigned int
.text:00001A9A                 lea     ecx, [ebp+var_430] ; this
.text:00001AA0                 call    ?SetWindowWidth@CExtractScanConsole@@QAEXI@Z ; CExtractScanConsole::SetWindowWidth(uint)
.text:00001AA5                 cmp     dword ptr ds:?g_StdStream@@3PAVCStdOutStream@@A, 0 ; CStdOutStream * g_StdStream
.text:00001AAC                 jz      short loc_1AD5
.text:00001AAE                 movzx   eax, [ebp+var_22F]
.text:00001AB5                 test    eax, eax
.text:00001AB7                 jz      short loc_1AD5
.text:00001AB9                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00001ABE                 push    offset $SG77580 ; "Scanning the drive for archives:"
.text:00001AC3                 mov     ecx, dword ptr ds:?g_StdStream@@3PAVCStdOutStream@@A ; CStdOutStream * g_StdStream
.text:00001AC9                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00001ACE                 mov     ecx, eax
.text:00001AD0                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00001AD5
.text:00001AD5 loc_1AD5:                               ; CODE XREF: Main2(void)+C58j
.text:00001AD5                                         ; Main2(void)+C63j
.text:00001AD5                 lea     ecx, [ebp+var_468] ; this
.text:00001ADB                 call    ??0CDirItemsStat@@QAE@XZ ; CDirItemsStat::CDirItemsStat(void)
.text:00001AE0                 lea     ecx, [ebp+var_430] ; this
.text:00001AE6                 call    ?StartScanning@CExtractScanConsole@@QAEXXZ ; CExtractScanConsole::StartScanning(void)
.text:00001AEB                 lea     ecx, [ebp+var_430]
.text:00001AF1                 push    ecx
.text:00001AF2                 lea     edx, [ebp+var_468]
.text:00001AF8                 push    edx
.text:00001AF9                 lea     eax, [ebp+var_368]
.text:00001AFF                 push    eax
.text:00001B00                 lea     ecx, [ebp+var_354]
.text:00001B06                 push    ecx
.text:00001B07                 lea     ecx, [ebp+var_974]
.text:00001B0D                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00001B12                 mov     [ebp+var_994], eax
.text:00001B18                 mov     edx, [ebp+var_994]
.text:00001B1E                 mov     [ebp+var_998], edx
.text:00001B24                 mov     byte ptr [ebp+var_4], 0Dh
.text:00001B28                 mov     eax, [ebp+var_998]
.text:00001B2E                 push    eax
.text:00001B2F                 push    0
.text:00001B31                 lea     ecx, [ebp+var_1E0]
.text:00001B37                 push    ecx
.text:00001B38                 call    ?EnumerateDirItemsAndSort@@YGJAAVCCensor@NWildcard@@W4ECensorPathMode@2@ABVUString@@AAV?$CObjectVector@VUString@@@@3AAUCDirItemsStat@@PAUIDirItemsCallback@@@Z ; EnumerateDirItemsAndSort(NWildcard::CCensor &,NWildcard::ECensorPathMode,UString const &,CObjectVector<UString> &,CObjectVector<UString> &,CDirItemsStat &,IDirItemsCallback *)
.text:00001B3D                 mov     [ebp+var_2FC], eax
.text:00001B43                 mov     byte ptr [ebp+var_4], 0Ch
.text:00001B47                 lea     ecx, [ebp+var_974] ; this
.text:00001B4D                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001B52                 lea     ecx, [ebp+var_430] ; this
.text:00001B58                 call    ?CloseScanning@CExtractScanConsole@@QAEXXZ ; CExtractScanConsole::CloseScanning(void)
.text:00001B5D                 cmp     [ebp+var_2FC], 0
.text:00001B64                 jnz     short loc_1B83
.text:00001B66                 movzx   edx, [ebp+var_22F]
.text:00001B6D                 test    edx, edx
.text:00001B6F                 jz      short loc_1B83
.text:00001B71                 lea     eax, [ebp+var_468]
.text:00001B77                 push    eax             ; struct CDirItemsStat *
.text:00001B78                 lea     ecx, [ebp+var_430] ; this
.text:00001B7E                 call    ?PrintStat@CExtractScanConsole@@QAEXABUCDirItemsStat@@@Z ; CExtractScanConsole::PrintStat(CDirItemsStat const &)
.text:00001B83
.text:00001B83 loc_1B83:                               ; CODE XREF: Main2(void)+D10j
.text:00001B83                                         ; Main2(void)+D1Bj
.text:00001B83                 mov     byte ptr [ebp+var_4], 0Bh
.text:00001B87                 lea     ecx, [ebp+var_430] ; this
.text:00001B8D                 call    ??1CExtractScanConsole@@QAE@XZ ; CExtractScanConsole::~CExtractScanConsole(void)
.text:00001B92
.text:00001B92 loc_1B92:                               ; CODE XREF: Main2(void)+C01j
.text:00001B92                 cmp     [ebp+var_2FC], 0
.text:00001B99                 jnz     loc_25C9
.text:00001B9F                 movzx   ecx, [ebp+var_2B1]
.text:00001BA6                 test    ecx, ecx
.text:00001BA8                 jz      loc_245D
.text:00001BAE                 push    168h            ; unsigned int
.text:00001BB3                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00001BB8                 add     esp, 4
.text:00001BBB                 mov     [ebp+var_97C], eax
.text:00001BC1                 mov     byte ptr [ebp+var_4], 0Eh
.text:00001BC5                 cmp     [ebp+var_97C], 0
.text:00001BCC                 jz      short loc_1BE1
.text:00001BCE                 mov     ecx, [ebp+var_97C]
.text:00001BD4                 call    ??0CExtractCallbackConsole@@QAE@XZ ; CExtractCallbackConsole::CExtractCallbackConsole(void)
.text:00001BD9                 mov     [ebp+var_99C], eax
.text:00001BDF                 jmp     short loc_1BEB
.text:00001BE1 ; ---------------------------------------------------------------------------
.text:00001BE1
.text:00001BE1 loc_1BE1:                               ; CODE XREF: Main2(void)+D78j
.text:00001BE1                 mov     [ebp+var_99C], 0
.text:00001BEB
.text:00001BEB loc_1BEB:                               ; CODE XREF: Main2(void)+D8Bj
.text:00001BEB                 mov     edx, [ebp+var_99C]
.text:00001BF1                 mov     [ebp+var_978], edx
.text:00001BF7                 mov     byte ptr [ebp+var_4], 0Bh
.text:00001BFB                 mov     eax, [ebp+var_978]
.text:00001C01                 mov     [ebp+var_470], eax
.text:00001C07                 mov     ecx, [ebp+var_470]
.text:00001C0D                 push    ecx
.text:00001C0E                 lea     ecx, [ebp+var_478]
.text:00001C14                 call    ??0?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QAE@PAUIFolderArchiveExtractCallback@@@Z ; CMyComPtr<IFolderArchiveExtractCallback>::CMyComPtr<IFolderArchiveExtractCallback>(IFolderArchiveExtractCallback *)
.text:00001C19                 mov     byte ptr [ebp+var_4], 0Fh
.text:00001C1D                 mov     edx, [ebp+var_470]
.text:00001C23                 mov     al, [ebp+var_204]
.text:00001C29                 mov     [edx+0D3h], al
.text:00001C2F                 lea     ecx, [ebp+var_200]
.text:00001C35                 push    ecx
.text:00001C36                 mov     ecx, [ebp+var_470]
.text:00001C3C                 add     ecx, 0D4h ; '+'
.text:00001C42                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:00001C47                 mov     edx, [ebp+var_274]
.text:00001C4D                 push    edx             ; struct CStdOutStream *
.text:00001C4E                 mov     eax, dword ptr ds:?g_ErrStream@@3PAVCStdOutStream@@A ; CStdOutStream * g_ErrStream
.text:00001C53                 push    eax             ; struct CStdOutStream *
.text:00001C54                 mov     ecx, dword ptr ds:?g_StdStream@@3PAVCStdOutStream@@A ; CStdOutStream * g_StdStream
.text:00001C5A                 push    ecx             ; struct CStdOutStream *
.text:00001C5B                 mov     ecx, [ebp+var_470] ; this
.text:00001C61                 call    ?Init@CExtractCallbackConsole@@QAEXPAVCStdOutStream@@00@Z ; CExtractCallbackConsole::Init(CStdOutStream *,CStdOutStream *,CStdOutStream *)
.text:00001C66                 lea     ecx, [ebp+var_354]
.text:00001C6C                 call    ?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size(void)
.text:00001C71                 mov     edx, 1
.text:00001C76                 cmp     edx, eax
.text:00001C78                 sbb     eax, eax
.text:00001C7A                 neg     eax
.text:00001C7C                 mov     ecx, [ebp+var_470]
.text:00001C82                 mov     [ecx+0D2h], al
.text:00001C88                 mov     edx, [ebp+var_470]
.text:00001C8E                 mov     eax, [ebp+var_30]
.text:00001C91                 mov     [edx+160h], eax
.text:00001C97                 mov     ecx, [ebp+var_470]
.text:00001C9D                 mov     edx, [ebp+var_27C]
.text:00001CA3                 mov     [ecx+15Ch], edx
.text:00001CA9                 cmp     [ebp+var_274], 0
.text:00001CB0                 jz      short loc_1CC4
.text:00001CB2                 mov     eax, [ebp+var_280]
.text:00001CB8                 push    eax             ; unsigned int
.text:00001CB9                 mov     ecx, [ebp+var_470] ; this
.text:00001CBF                 call    ?SetWindowWidth@CExtractCallbackConsole@@QAEXI@Z ; CExtractCallbackConsole::SetWindowWidth(uint)
.text:00001CC4
.text:00001CC4 loc_1CC4:                               ; CODE XREF: Main2(void)+E5Cj
.text:00001CC4                 lea     ecx, [ebp+var_4B4] ; this
.text:00001CCA                 call    ??0CExtractOptions@@QAE@XZ ; CExtractOptions::CExtractOptions(void)
.text:00001CCF                 mov     byte ptr [ebp+var_4], 10h
.text:00001CD3                 lea     ecx, [ebp+var_1B0]
.text:00001CD9                 push    ecx
.text:00001CDA                 lea     ecx, [ebp+var_4B4]
.text:00001CE0                 call    ??4CExtractOptionsBase@@QAEAAU0@ABU0@@Z ; CExtractOptionsBase::operator=(CExtractOptionsBase const &)
.text:00001CE5                 mov     dl, [ebp+var_231]
.text:00001CEB                 mov     [ebp+var_490], dl
.text:00001CF1                 mov     al, [ebp+var_230]
.text:00001CF7                 mov     [ebp+var_48F], al
.text:00001CFD                 mov     cl, [ebp+var_22E]
.text:00001D03                 mov     [ebp+var_48E], cl
.text:00001D09                 lea     ecx, [ebp+var_214] ; this
.text:00001D0F                 call    ?IsTestCommand@CArcCommand@@QBE_NXZ ; CArcCommand::IsTestCommand(void)
.text:00001D14                 mov     [ebp+var_48D], al
.text:00001D1A                 lea     edx, [ebp+var_1BC]
.text:00001D20                 push    edx
.text:00001D21                 lea     ecx, [ebp+var_48C]
.text:00001D27                 call    ??4?$CObjectVector@UCProperty@@@@QAEAAV0@ABV0@@Z ; CObjectVector<CProperty>::operator=(CObjectVector<CProperty> const &)
.text:00001D2C                 lea     ecx, [ebp+var_4C8]
.text:00001D32                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00001D37                 mov     byte ptr [ebp+var_4], 11h
.text:00001D3B                 lea     ecx, [ebp+var_558]
.text:00001D41                 call    ??0CHashBundle@@QAE@XZ ; CHashBundle::CHashBundle(void)
.text:00001D46                 mov     byte ptr [ebp+var_4], 12h
.text:00001D4A                 mov     [ebp+var_560], 0
.text:00001D54                 lea     ecx, [ebp+var_1F0]
.text:00001D5A                 call    ?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ ; CObjectVector<UString>::IsEmpty(void)
.text:00001D5F                 movzx   eax, al
.text:00001D62                 test    eax, eax
.text:00001D64                 jnz     short loc_1D95
.text:00001D66                 lea     ecx, [ebp+var_558]
.text:00001D6C                 mov     [ebp+var_560], ecx
.text:00001D72                 lea     edx, [ebp+var_1F0]
.text:00001D78                 push    edx
.text:00001D79                 lea     ecx, [ebp+var_558]
.text:00001D7F                 call    ?SetMethods@CHashBundle@@QAEJABV?$CObjectVector@VUString@@@@@Z ; CHashBundle::SetMethods(CObjectVector<UString> const &)
.text:00001D84                 push    eax
.text:00001D85                 call    ?ThrowException_if_Error@@YGXJ@Z ; ThrowException_if_Error(long)
.text:00001D8A                 lea     ecx, [ebp+var_558] ; this
.text:00001D90                 call    ?Init@CHashBundle@@QAEXXZ ; CHashBundle::Init(void)
.text:00001D95
.text:00001D95 loc_1D95:                               ; CODE XREF: Main2(void)+F10j
.text:00001D95                 cmp     [ebp+var_470], 0
.text:00001D9C                 jz      short loc_1DAF
.text:00001D9E                 mov     eax, [ebp+var_470]
.text:00001DA4                 add     eax, 10h
.text:00001DA7                 mov     [ebp+var_9A0], eax
.text:00001DAD                 jmp     short loc_1DB9
.text:00001DAF ; ---------------------------------------------------------------------------
.text:00001DAF
.text:00001DAF loc_1DAF:                               ; CODE XREF: Main2(void)+F48j
.text:00001DAF                 mov     [ebp+var_9A0], 0
.text:00001DB9
.text:00001DB9 loc_1DB9:                               ; CODE XREF: Main2(void)+F59j
.text:00001DB9                 lea     ecx, [ebp+var_508]
.text:00001DBF                 push    ecx
.text:00001DC0                 lea     edx, [ebp+var_4C8]
.text:00001DC6                 push    edx
.text:00001DC7                 mov     eax, [ebp+var_560]
.text:00001DCD                 push    eax
.text:00001DCE                 mov     ecx, [ebp+var_470]
.text:00001DD4                 push    ecx
.text:00001DD5                 mov     edx, [ebp+var_9A0]
.text:00001DDB                 push    edx
.text:00001DDC                 lea     eax, [ebp+var_4B4]
.text:00001DE2                 push    eax
.text:00001DE3                 lea     ecx, [ebp+var_22C]
.text:00001DE9                 call    ?Front@?$CObjectVector@UCPair@NWildcard@@@@QAEAAUCPair@NWildcard@@XZ ; CObjectVector<NWildcard::CPair>::Front(void)
.text:00001DEE                 add     eax, 0Ch
.text:00001DF1                 push    eax
.text:00001DF2                 lea     ecx, [ebp+var_368]
.text:00001DF8                 push    ecx
.text:00001DF9                 lea     edx, [ebp+var_354]
.text:00001DFF                 push    edx
.text:00001E00                 lea     eax, [ebp+var_2D8]
.text:00001E06                 push    eax
.text:00001E07                 lea     ecx, [ebp+var_2C4]
.text:00001E0D                 push    ecx
.text:00001E0E                 mov     edx, [ebp+var_2A4]
.text:00001E14                 push    edx
.text:00001E15                 call    ?Extract@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@AAV?$CObjectVector@VUString@@@@3ABVCCensorNode@NWildcard@@ABUCExtractOptions@@PAUIOpenCallbackUI@@PAUIExtractCallbackUI@@PAUIHashCalc@@AAVUString@@AAUCDecompressStat@@@Z ; Extract(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,CObjectVector<UString> &,CObjectVector<UString> &,NWildcard::CCensorNode const &,CExtractOptions const &,IOpenCallbackUI *,IExtractCallbackUI *,IHashCalc *,UString &,CDecompressStat &)
.text:00001E1A                 mov     [ebp+var_2FC], eax
.text:00001E20                 mov     ecx, [ebp+var_470]
.text:00001E26                 add     ecx, 10h        ; this
.text:00001E29                 call    ?ClosePercents@COpenCallbackConsole@@QAEXXZ ; COpenCallbackConsole::ClosePercents(void)
.text:00001E2E                 lea     ecx, [ebp+var_4C8] ; this
.text:00001E34                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:00001E39                 movzx   eax, al
.text:00001E3C                 test    eax, eax
.text:00001E3E                 jnz     short loc_1EA3
.text:00001E40                 cmp     dword ptr ds:?g_ErrStream@@3PAVCStdOutStream@@A, 0 ; CStdOutStream * g_ErrStream
.text:00001E47                 jz      short loc_1E90
.text:00001E49                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00001E4E                 lea     ecx, [ebp+var_4C8]
.text:00001E54                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00001E59                 push    eax
.text:00001E5A                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00001E5F                 push    offset $SG77607 ; "ERROR:"
.text:00001E64                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00001E69                 mov     ecx, dword ptr ds:?g_ErrStream@@3PAVCStdOutStream@@A ; CStdOutStream * g_ErrStream
.text:00001E6F                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00001E74                 mov     ecx, eax
.text:00001E76                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00001E7B                 mov     ecx, eax
.text:00001E7D                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00001E82                 mov     ecx, eax
.text:00001E84                 call    ??6CStdOutStream@@QAEAAV0@PB_W@Z ; CStdOutStream::operator<<(wchar_t const *)
.text:00001E89                 mov     ecx, eax
.text:00001E8B                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00001E90
.text:00001E90 loc_1E90:                               ; CODE XREF: Main2(void)+FF3j
.text:00001E90                 cmp     [ebp+var_2FC], 0
.text:00001E97                 jnz     short loc_1EA3
.text:00001E99                 mov     [ebp+var_2FC], 80004005h
.text:00001EA3
.text:00001EA3 loc_1EA3:                               ; CODE XREF: Main2(void)+FEAj
.text:00001EA3                                         ; Main2(void)+1043j
.text:00001EA3                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00001EA8                 mov     ecx, [ebp+var_278]
.text:00001EAE                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00001EB3                 mov     ecx, [ebp+var_470]
.text:00001EB9                 mov     [ebp+var_9A4], ecx
.text:00001EBF                 mov     edx, [ebp+var_9A4]
.text:00001EC5                 cmp     dword ptr [edx+10Ch], 0
.text:00001ECC                 ja      short loc_1EDD
.text:00001ECE                 mov     eax, [ebp+var_9A4]
.text:00001ED4                 cmp     dword ptr [eax+108h], 1
.text:00001EDB                 jbe     short loc_1F4B
.text:00001EDD
.text:00001EDD loc_1EDD:                               ; CODE XREF: Main2(void)+1078j
.text:00001EDD                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00001EE2                 mov     ecx, [ebp+var_470]
.text:00001EE8                 mov     edx, [ecx+10Ch]
.text:00001EEE                 push    edx
.text:00001EEF                 mov     eax, [ecx+108h]
.text:00001EF5                 push    eax
.text:00001EF6                 push    offset $SG77612 ; "Archives: "
.text:00001EFB                 mov     ecx, [ebp+var_278]
.text:00001F01                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00001F06                 mov     ecx, eax
.text:00001F08                 call    ??6CStdOutStream@@QAEAAV0@_K@Z ; CStdOutStream::operator<<(unsigned __int64)
.text:00001F0D                 mov     ecx, eax
.text:00001F0F                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00001F14                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00001F19                 mov     ecx, [ebp+var_470]
.text:00001F1F                 mov     edx, [ecx+11Ch]
.text:00001F25                 push    edx
.text:00001F26                 mov     eax, [ecx+118h]
.text:00001F2C                 push    eax
.text:00001F2D                 push    offset $SG77613 ; "OK archives: "
.text:00001F32                 mov     ecx, [ebp+var_278]
.text:00001F38                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00001F3D                 mov     ecx, eax
.text:00001F3F                 call    ??6CStdOutStream@@QAEAAV0@_K@Z ; CStdOutStream::operator<<(unsigned __int64)
.text:00001F44                 mov     ecx, eax
.text:00001F46                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00001F4B
.text:00001F4B loc_1F4B:                               ; CODE XREF: Main2(void)+1087j
.text:00001F4B                 mov     [ebp+var_561], 0
.text:00001F52                 mov     ecx, [ebp+var_470]
.text:00001F58                 mov     [ebp+var_9A8], ecx
.text:00001F5E                 mov     edx, [ebp+var_9A8]
.text:00001F64                 mov     eax, [ebp+var_9A8]
.text:00001F6A                 mov     ecx, [edx+120h]
.text:00001F70                 or      ecx, [eax+124h]
.text:00001F76                 jz      short loc_1FB6
.text:00001F78                 mov     [ebp+var_561], 1
.text:00001F7F                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00001F84                 mov     edx, [ebp+var_470]
.text:00001F8A                 mov     eax, [edx+124h]
.text:00001F90                 push    eax
.text:00001F91                 mov     ecx, [edx+120h]
.text:00001F97                 push    ecx
.text:00001F98                 push    offset $SG77616 ; "Can't open as archive: "
.text:00001F9D                 mov     ecx, [ebp+var_278]
.text:00001FA3                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00001FA8                 mov     ecx, eax
.text:00001FAA                 call    ??6CStdOutStream@@QAEAAV0@_K@Z ; CStdOutStream::operator<<(unsigned __int64)
.text:00001FAF                 mov     ecx, eax
.text:00001FB1                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00001FB6
.text:00001FB6 loc_1FB6:                               ; CODE XREF: Main2(void)+1122j
.text:00001FB6                 mov     edx, [ebp+var_470]
.text:00001FBC                 mov     [ebp+var_9AC], edx
.text:00001FC2                 mov     eax, [ebp+var_9AC]
.text:00001FC8                 mov     ecx, [ebp+var_9AC]
.text:00001FCE                 mov     edx, [eax+128h]
.text:00001FD4                 or      edx, [ecx+12Ch]
.text:00001FDA                 jz      short loc_201A
.text:00001FDC                 mov     [ebp+var_561], 1
.text:00001FE3                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00001FE8                 mov     eax, [ebp+var_470]
.text:00001FEE                 mov     ecx, [eax+12Ch]
.text:00001FF4                 push    ecx
.text:00001FF5                 mov     edx, [eax+128h]
.text:00001FFB                 push    edx
.text:00001FFC                 push    offset $SG77618 ; "Archives with Errors: "
.text:00002001                 mov     ecx, [ebp+var_278]
.text:00002007                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:0000200C                 mov     ecx, eax
.text:0000200E                 call    ??6CStdOutStream@@QAEAAV0@_K@Z ; CStdOutStream::operator<<(unsigned __int64)
.text:00002013                 mov     ecx, eax
.text:00002015                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:0000201A
.text:0000201A loc_201A:                               ; CODE XREF: Main2(void)+1186j
.text:0000201A                 mov     eax, [ebp+var_470]
.text:00002020
.text:00002020 loc_2020:                               ; DATA XREF: .rdata:$SG77189o
.text:00002020                                         ; .rdata:$SG77514o
.text:00002020                 mov     [ebp+var_9B0], eax
.text:00002026                 mov     ecx, [ebp+var_9B0]
.text:0000202C                 mov     edx, [ebp+var_9B0]
.text:00002032                 mov     eax, [ecx+130h]
.text:00002038                 or      eax, [edx+134h]
.text:0000203E                 jz      short loc_2077
.text:00002040                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00002045                 mov     ecx, [ebp+var_470]
.text:0000204B                 mov     edx, [ecx+134h]
.text:00002051                 push    edx
.text:00002052                 mov     eax, [ecx+130h]
.text:00002058                 push    eax
.text:00002059                 push    offset $SG77620 ; "Archives with Warnings: "
.text:0000205E                 mov     ecx, [ebp+var_278]
.text:00002064                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00002069                 mov     ecx, eax
.text:0000206B                 call    ??6CStdOutStream@@QAEAAV0@_K@Z ; CStdOutStream::operator<<(unsigned __int64)
.text:00002070                 mov     ecx, eax
.text:00002072                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00002077
.text:00002077 loc_2077:                               ; CODE XREF: Main2(void)+11EAj
.text:00002077                 mov     ecx, [ebp+var_470]
.text:0000207D                 mov     [ebp+var_9B4], ecx
.text:00002083                 mov     edx, [ebp+var_9B4]
.text:00002089                 mov     eax, [ebp+var_9B4]
.text:0000208F                 mov     ecx, [edx+140h]
.text:00002095                 or      ecx, [eax+144h]
.text:0000209B                 jz      short loc_210A
.text:0000209D                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:000020A2                 mov     ecx, [ebp+var_278]
.text:000020A8                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:000020AD                 mov     edx, [ebp+var_470]
.text:000020B3                 mov     [ebp+var_9B8], edx
.text:000020B9                 mov     eax, [ebp+var_9B8]
.text:000020BF                 mov     ecx, [ebp+var_9B8]
.text:000020C5                 mov     edx, [eax+140h]
.text:000020CB                 or      edx, [ecx+144h]
.text:000020D1                 jz      short loc_210A
.text:000020D3                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:000020D8                 mov     eax, [ebp+var_470]
.text:000020DE                 mov     ecx, [eax+144h]
.text:000020E4                 push    ecx
.text:000020E5                 mov     edx, [eax+140h]
.text:000020EB                 push    edx
.text:000020EC                 push    offset $SG77623 ; "Warnings: "
.text:000020F1                 mov     ecx, [ebp+var_278]
.text:000020F7                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:000020FC                 mov     ecx, eax
.text:000020FE                 call    ??6CStdOutStream@@QAEAAV0@_K@Z ; CStdOutStream::operator<<(unsigned __int64)
.text:00002103                 mov     ecx, eax
.text:00002105                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:0000210A
.text:0000210A loc_210A:                               ; CODE XREF: Main2(void)+1247j
.text:0000210A                                         ; Main2(void)+127Dj
.text:0000210A                 mov     eax, [ebp+var_470]
.text:00002110                 mov     [ebp+var_9BC], eax
.text:00002116                 mov     ecx, [ebp+var_9BC]
.text:0000211C                 mov     edx, [ebp+var_9BC]
.text:00002122                 mov     eax, [ecx+138h]
.text:00002128                 or      eax, [edx+13Ch]
.text:0000212E                 jz      short loc_21A4
.text:00002130                 mov     [ebp+var_561], 1
.text:00002137                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:0000213C                 mov     ecx, [ebp+var_278]
.text:00002142                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00002147                 mov     ecx, [ebp+var_470]
.text:0000214D                 mov     [ebp+var_9C0], ecx
.text:00002153                 mov     edx, [ebp+var_9C0]
.text:00002159                 mov     eax, [ebp+var_9C0]
.text:0000215F                 mov     ecx, [edx+138h]
.text:00002165                 or      ecx, [eax+13Ch]
.text:0000216B                 jz      short loc_21A4
.text:0000216D                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00002172                 mov     edx, [ebp+var_470]
.text:00002178                 mov     eax, [edx+13Ch]
.text:0000217E                 push    eax
.text:0000217F                 mov     ecx, [edx+138h]
.text:00002185                 push    ecx
.text:00002186                 push    offset $SG77626 ; "Open Errors: "
.text:0000218B                 mov     ecx, [ebp+var_278]
.text:00002191                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00002196                 mov     ecx, eax
.text:00002198                 call    ??6CStdOutStream@@QAEAAV0@_K@Z ; CStdOutStream::operator<<(unsigned __int64)
.text:0000219D                 mov     ecx, eax
.text:0000219F                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:000021A4
.text:000021A4 loc_21A4:                               ; CODE XREF: Main2(void)+12DAj
.text:000021A4                                         ; Main2(void)+1317j
.text:000021A4                 movzx   edx, [ebp+var_561]
.text:000021AB                 test    edx, edx
.text:000021AD                 jz      short loc_21B9
.text:000021AF                 mov     [ebp+var_2F8], 2
.text:000021B9
.text:000021B9 loc_21B9:                               ; CODE XREF: Main2(void)+1359j
.text:000021B9                 mov     eax, [ebp+var_470]
.text:000021BF                 mov     [ebp+var_9C4], eax
.text:000021C5                 mov     ecx, [ebp+var_9C4]
.text:000021CB                 mov     edx, [ebp+var_9C4]
.text:000021D1                 mov     eax, [ecx+128h]
.text:000021D7                 or      eax, [edx+12Ch]
.text:000021DD                 jnz     short loc_2205
.text:000021DF                 mov     ecx, [ebp+var_470]
.text:000021E5                 mov     [ebp+var_9C8], ecx
.text:000021EB                 mov     edx, [ebp+var_9C8]
.text:000021F1                 mov     eax, [ebp+var_9C8]
.text:000021F7                 mov     ecx, [edx+148h]
.text:000021FD                 or      ecx, [eax+14Ch]
.text:00002203                 jz      short loc_2277
.text:00002205
.text:00002205 loc_2205:                               ; CODE XREF: Main2(void)+1389j
.text:00002205                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:0000220A                 mov     ecx, [ebp+var_278]
.text:00002210                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00002215                 mov     edx, [ebp+var_470]
.text:0000221B                 mov     [ebp+var_9CC], edx
.text:00002221                 mov     eax, [ebp+var_9CC]
.text:00002227                 mov     ecx, [ebp+var_9CC]
.text:0000222D                 mov     edx, [eax+148h]
.text:00002233                 or      edx, [ecx+14Ch]
.text:00002239                 jz      short loc_2272
.text:0000223B                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00002240                 mov     eax, [ebp+var_470]
.text:00002246                 mov     ecx, [eax+14Ch]
.text:0000224C                 push    ecx
.text:0000224D                 mov     edx, [eax+148h]
.text:00002253                 push    edx
.text:00002254                 push    offset $SG77631 ; "Sub items Errors: "
.text:00002259                 mov     ecx, [ebp+var_278]
.text:0000225F                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00002264                 mov     ecx, eax
.text:00002266                 call    ??6CStdOutStream@@QAEAAV0@_K@Z ; CStdOutStream::operator<<(unsigned __int64)
.text:0000226B                 mov     ecx, eax
.text:0000226D                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00002272
.text:00002272 loc_2272:                               ; CODE XREF: Main2(void)+13E5j
.text:00002272                 jmp     loc_241C
.text:00002277 ; ---------------------------------------------------------------------------
.text:00002277
.text:00002277 loc_2277:                               ; CODE XREF: Main2(void)+13AFj
.text:00002277                 cmp     [ebp+var_2FC], 0
.text:0000227E                 jnz     loc_241C
.text:00002284                 mov     eax, [ebp+var_4E8]
.text:0000228A                 or      eax, [ebp+var_4E4]
.text:00002290                 jz      short loc_22C3
.text:00002292                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00002297                 mov     ecx, [ebp+var_4E4]
.text:0000229D                 push    ecx
.text:0000229E                 mov     edx, [ebp+var_4E8]
.text:000022A4                 push    edx
.text:000022A5                 push    offset $SG77636 ; "Folders: "
.text:000022AA                 mov     ecx, [ebp+var_278]
.text:000022B0                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:000022B5                 mov     ecx, eax
.text:000022B7                 call    ??6CStdOutStream@@QAEAAV0@_K@Z ; CStdOutStream::operator<<(unsigned __int64)
.text:000022BC                 mov     ecx, eax
.text:000022BE                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:000022C3
.text:000022C3 loc_22C3:                               ; CODE XREF: Main2(void)+143Cj
.text:000022C3                 cmp     [ebp+var_4E0], 1
.text:000022CA                 jnz     short loc_22F1
.text:000022CC                 cmp     [ebp+var_4DC], 0
.text:000022D3                 jnz     short loc_22F1
.text:000022D5                 mov     eax, [ebp+var_4E8]
.text:000022DB                 or      eax, [ebp+var_4E4]
.text:000022E1                 jnz     short loc_22F1
.text:000022E3                 mov     ecx, [ebp+var_4D8]
.text:000022E9                 or      ecx, [ebp+var_4D4]
.text:000022EF                 jz      short loc_2322
.text:000022F1
.text:000022F1 loc_22F1:                               ; CODE XREF: Main2(void)+1476j
.text:000022F1                                         ; Main2(void)+147Fj ...
.text:000022F1                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:000022F6                 mov     edx, [ebp+var_4DC]
.text:000022FC                 push    edx
.text:000022FD                 mov     eax, [ebp+var_4E0]
.text:00002303                 push    eax
.text:00002304                 push    offset $SG77639 ; "Files: "
.text:00002309                 mov     ecx, [ebp+var_278]
.text:0000230F                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00002314                 mov     ecx, eax
.text:00002316                 call    ??6CStdOutStream@@QAEAAV0@_K@Z ; CStdOutStream::operator<<(unsigned __int64)
.text:0000231B                 mov     ecx, eax
.text:0000231D                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00002322
.text:00002322 loc_2322:                               ; CODE XREF: Main2(void)+149Bj
.text:00002322                 mov     ecx, [ebp+var_4D8]
.text:00002328                 or      ecx, [ebp+var_4D4]
.text:0000232E                 jz      short loc_2392
.text:00002330                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00002335                 mov     edx, [ebp+var_4D4]
.text:0000233B                 push    edx
.text:0000233C                 mov     eax, [ebp+var_4D8]
.text:00002342                 push    eax
.text:00002343                 push    offset $SG77641 ; "Alternate Streams: "
.text:00002348                 mov     ecx, [ebp+var_278]
.text:0000234E                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00002353                 mov     ecx, eax
.text:00002355                 call    ??6CStdOutStream@@QAEAAV0@_K@Z ; CStdOutStream::operator<<(unsigned __int64)
.text:0000235A                 mov     ecx, eax
.text:0000235C                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00002361                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00002366                 mov     ecx, [ebp+var_4F4]
.text:0000236C                 push    ecx
.text:0000236D                 mov     edx, [ebp+var_4F8]
.text:00002373                 push    edx
.text:00002374                 push    offset $SG77642 ; "Alternate Streams Size: "
.text:00002379                 mov     ecx, [ebp+var_278]
.text:0000237F                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00002384                 mov     ecx, eax
.text:00002386                 call    ??6CStdOutStream@@QAEAAV0@_K@Z ; CStdOutStream::operator<<(unsigned __int64)
.text:0000238B                 mov     ecx, eax
.text:0000238D                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00002392
.text:00002392 loc_2392:                               ; CODE XREF: Main2(void)+14DAj
.text:00002392                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00002397                 mov     eax, [ebp+var_4EC]
.text:0000239D                 push    eax             ; Str
.text:0000239E                 mov     ecx, [ebp+var_4F0]
.text:000023A4                 push    ecx
.text:000023A5                 push    offset $SG77644 ; "Compressed: "
.text:000023AA                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:000023AF                 mov     edx, [ebp+var_4FC]
.text:000023B5                 push    edx
.text:000023B6                 mov     eax, [ebp+var_500]
.text:000023BC                 push    eax
.text:000023BD                 push    offset $SG77643 ; "Size:       "
.text:000023C2                 mov     ecx, [ebp+var_278]
.text:000023C8                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:000023CD                 mov     ecx, eax
.text:000023CF                 call    ??6CStdOutStream@@QAEAAV0@_K@Z ; CStdOutStream::operator<<(unsigned __int64)
.text:000023D4                 mov     ecx, eax
.text:000023D6                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:000023DB                 mov     ecx, eax
.text:000023DD                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:000023E2                 mov     ecx, eax
.text:000023E4                 call    ??6CStdOutStream@@QAEAAV0@_K@Z ; CStdOutStream::operator<<(unsigned __int64)
.text:000023E9                 mov     ecx, eax
.text:000023EB                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:000023F0                 cmp     [ebp+var_560], 0
.text:000023F7                 jz      short loc_241C
.text:000023F9                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:000023FE                 mov     ecx, [ebp+var_278]
.text:00002404                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00002409                 lea     ecx, [ebp+var_558]
.text:0000240F                 push    ecx             ; struct CHashBundle *
.text:00002410                 mov     edx, [ebp+var_278]
.text:00002416                 push    edx             ; struct CStdOutStream *
.text:00002417                 call    ?PrintHashStat@@YGXAAVCStdOutStream@@ABUCHashBundle@@@Z ; PrintHashStat(CStdOutStream &,CHashBundle const &)
.text:0000241C
.text:0000241C loc_241C:                               ; CODE XREF: Main2(void):loc_2272j
.text:0000241C                                         ; Main2(void)+142Aj ...
.text:0000241C                 mov     byte ptr [ebp+var_4], 11h
.text:00002420                 lea     ecx, [ebp+var_558] ; this
.text:00002426                 call    ??1CHashBundle@@QAE@XZ ; CHashBundle::~CHashBundle(void)
.text:0000242B                 mov     byte ptr [ebp+var_4], 10h
.text:0000242F                 lea     ecx, [ebp+var_4C8] ; this
.text:00002435                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000243A                 mov     byte ptr [ebp+var_4], 0Fh
.text:0000243E                 lea     ecx, [ebp+var_4B4] ; this
.text:00002444                 call    ??1CExtractOptions@@QAE@XZ ; CExtractOptions::~CExtractOptions(void)
.text:00002449                 mov     byte ptr [ebp+var_4], 0Bh
.text:0000244D                 lea     ecx, [ebp+var_478]
.text:00002453                 call    ??1?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IFolderArchiveExtractCallback>::~CMyComPtr<IFolderArchiveExtractCallback>(void)
.text:00002458                 jmp     loc_25C9
.text:0000245D ; ---------------------------------------------------------------------------
.text:0000245D
.text:0000245D loc_245D:                               ; CODE XREF: Main2(void)+D54j
.text:0000245D                 mov     [ebp+var_570], 0
.text:00002467                 mov     [ebp+var_56C], 0
.text:00002471                 mov     [ebp+var_580], 0
.text:0000247B                 mov     [ebp+var_57C], 0
.text:00002485                 lea     eax, [ebp+var_580]
.text:0000248B                 push    eax
.text:0000248C                 lea     ecx, [ebp+var_570]
.text:00002492                 push    ecx
.text:00002493                 lea     edx, [ebp+var_1BC]
.text:00002499                 push    edx
.text:0000249A                 lea     eax, [ebp+var_200]
.text:000024A0                 push    eax
.text:000024A1                 lea     ecx, [ebp+var_204]
.text:000024A7                 push    ecx
.text:000024A8                 movzx   edx, [ebp+var_1F4]
.text:000024AF                 push    edx
.text:000024B0                 movzx   eax, [ebp+var_22F]
.text:000024B7                 push    eax
.text:000024B8                 lea     ecx, [ebp+var_22C]
.text:000024BE                 call    ?Front@?$CObjectVector@UCPair@NWildcard@@@@QAEAAUCPair@NWildcard@@XZ ; CObjectVector<NWildcard::CPair>::Front(void)
.text:000024C3                 add     eax, 0Ch
.text:000024C6                 push    eax
.text:000024C7                 movzx   ecx, [ebp+var_18A]
.text:000024CE                 push    ecx
.text:000024CF                 movzx   edx, [ebp+var_192]
.text:000024D6                 push    edx
.text:000024D7                 lea     eax, [ebp+var_368]
.text:000024DD                 push    eax
.text:000024DE                 lea     ecx, [ebp+var_354]
.text:000024E4                 push    ecx
.text:000024E5                 movzx   edx, [ebp+var_231]
.text:000024EC                 push    edx
.text:000024ED                 lea     eax, [ebp+var_2D8]
.text:000024F3                 push    eax
.text:000024F4                 lea     ecx, [ebp+var_2C4]
.text:000024FA                 push    ecx
.text:000024FB                 mov     edx, [ebp+var_2A4]
.text:00002501                 push    edx
.text:00002502                 call    ?ListArchives@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@_NAAV?$CObjectVector@VUString@@@@433ABVCCensorNode@NWildcard@@33AA_NAAVUString@@PBV?$CObjectVector@UCProperty@@@@AA_K9@Z ; ListArchives(CCodecs *,CObjectVector<COpenType> const &,CRecordVector<int> const &,bool,CObjectVector<UString> &,CObjectVector<UString> &,bool,bool,NWildcard::CCensorNode const &,bool,bool,bool &,UString &,CObjectVector<CProperty> const *,unsigned __int64 &,unsigned __int64 &)
.text:00002507                 mov     [ebp+var_2FC], eax
.text:0000250D                 movzx   eax, [ebp+var_22F]
.text:00002514                 test    eax, eax
.text:00002516                 jz      short loc_2566
.text:00002518                 cmp     [ebp+var_57C], 0
.text:0000251F                 ja      short loc_252A
.text:00002521                 cmp     [ebp+var_580], 0
.text:00002528                 jbe     short loc_2566
.text:0000252A
.text:0000252A loc_252A:                               ; CODE XREF: Main2(void)+16CBj
.text:0000252A                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:0000252F                 mov     ecx, [ebp+var_57C]
.text:00002535                 push    ecx
.text:00002536                 mov     edx, [ebp+var_580]
.text:0000253C                 push    edx
.text:0000253D                 push    offset $SG77651 ; "Warnings: "
.text:00002542                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00002547                 mov     ecx, offset ?g_StdOut@@3VCStdOutStream@@A ; CStdOutStream g_StdOut
.text:0000254C                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00002551                 mov     ecx, eax
.text:00002553                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00002558                 mov     ecx, eax
.text:0000255A                 call    ??6CStdOutStream@@QAEAAV0@_K@Z ; CStdOutStream::operator<<(unsigned __int64)
.text:0000255F                 mov     ecx, eax
.text:00002561                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00002566
.text:00002566 loc_2566:                               ; CODE XREF: Main2(void)+16C2j
.text:00002566                                         ; Main2(void)+16D4j
.text:00002566                 cmp     [ebp+var_56C], 0
.text:0000256D                 ja      short loc_2578
.text:0000256F                 cmp     [ebp+var_570], 0
.text:00002576                 jbe     short loc_25C9
.text:00002578
.text:00002578 loc_2578:                               ; CODE XREF: Main2(void)+1719j
.text:00002578                 movzx   eax, [ebp+var_22F]
.text:0000257F                 test    eax, eax
.text:00002581                 jz      short loc_25BF
.text:00002583                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00002588                 mov     ecx, [ebp+var_56C]
.text:0000258E                 push    ecx
.text:0000258F                 mov     edx, [ebp+var_570]
.text:00002595                 push    edx
.text:00002596                 push    offset $SG77654 ; "Errors: "
.text:0000259B                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:000025A0                 mov     ecx, offset ?g_StdOut@@3VCStdOutStream@@A ; CStdOutStream g_StdOut
.text:000025A5                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:000025AA                 mov     ecx, eax
.text:000025AC                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:000025B1                 mov     ecx, eax
.text:000025B3                 call    ??6CStdOutStream@@QAEAAV0@_K@Z ; CStdOutStream::operator<<(unsigned __int64)
.text:000025B8                 mov     ecx, eax
.text:000025BA                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:000025BF
.text:000025BF loc_25BF:                               ; CODE XREF: Main2(void)+172Dj
.text:000025BF                 mov     [ebp+var_2F8], 2
.text:000025C9
.text:000025C9 loc_25C9:                               ; CODE XREF: Main2(void)+D45j
.text:000025C9                                         ; Main2(void)+1604j ...
.text:000025C9                 mov     byte ptr [ebp+var_4], 0Ah
.text:000025CD                 lea     ecx, [ebp+var_368]
.text:000025D3                 call    ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text:000025D8                 mov     byte ptr [ebp+var_4], 7
.text:000025DC                 lea     ecx, [ebp+var_354]
.text:000025E2                 call    ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text:000025E7                 jmp     loc_29DB
.text:000025EC ; ---------------------------------------------------------------------------
.text:000025EC
.text:000025EC loc_25EC:                               ; CODE XREF: Main2(void)+BAEj
.text:000025EC                 lea     ecx, [ebp+var_214] ; this
.text:000025F2                 call    ?IsFromUpdateGroup@CArcCommand@@QBE_NXZ ; CArcCommand::IsFromUpdateGroup(void)
.text:000025F7                 movzx   eax, al
.text:000025FA                 test    eax, eax
.text:000025FC                 jz      loc_2888
.text:00002602                 lea     ecx, [ebp+var_180]
.text:00002608                 mov     [ebp+var_588], ecx
.text:0000260E                 mov     edx, [ebp+var_588]
.text:00002614                 movzx   eax, byte ptr [edx+0A4h]
.text:0000261B                 test    eax, eax
.text:0000261D                 jz      short loc_264F
.text:0000261F                 mov     ecx, [ebp+var_588]
.text:00002625                 add     ecx, 0A8h ; '¿' ; this
.text:0000262B                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:00002630                 movzx   ecx, al
.text:00002633                 test    ecx, ecx
.text:00002635                 jz      short loc_264F
.text:00002637                 mov     edx, ds:_kDefaultSfxModule
.text:0000263D                 push    edx
.text:0000263E                 mov     ecx, [ebp+var_588]
.text:00002644                 add     ecx, 0A8h ; '¿'
.text:0000264A                 call    ??4UString@@QAEAAV0@PB_W@Z ; UString::operator=(wchar_t const *)
.text:0000264F
.text:0000264F loc_264F:                               ; CODE XREF: Main2(void)+17C9j
.text:0000264F                                         ; Main2(void)+17E1j
.text:0000264F                 lea     ecx, [ebp+var_65C]
.text:00002655                 call    ??0COpenCallbackConsole@@QAE@XZ ; COpenCallbackConsole::COpenCallbackConsole(void)
.text:0000265A                 mov     byte ptr [ebp+var_4], 13h
.text:0000265E                 mov     eax, [ebp+var_274]
.text:00002664                 push    eax             ; struct CStdOutStream *
.text:00002665                 mov     ecx, dword ptr ds:?g_ErrStream@@3PAVCStdOutStream@@A ; CStdOutStream * g_ErrStream
.text:0000266B                 push    ecx             ; struct CStdOutStream *
.text:0000266C                 mov     edx, dword ptr ds:?g_StdStream@@3PAVCStdOutStream@@A ; CStdOutStream * g_StdStream
.text:00002672                 push    edx             ; struct CStdOutStream *
.text:00002673                 lea     ecx, [ebp+var_65C] ; this
.text:00002679                 call    ?Init@COpenCallbackConsole@@QAEXPAVCStdOutStream@@00@Z ; COpenCallbackConsole::Init(CStdOutStream *,CStdOutStream *,CStdOutStream *)
.text:0000267E                 movzx   eax, [ebp+var_204]
.text:00002685                 test    eax, eax
.text:00002687                 jz      short loc_26A7
.text:00002689                 lea     ecx, [ebp+var_200] ; this
.text:0000268F                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:00002694                 movzx   ecx, al
.text:00002697                 test    ecx, ecx
.text:00002699                 jnz     short loc_26A7
.text:0000269B                 mov     [ebp+var_9D0], 1
.text:000026A5                 jmp     short loc_26B1
.text:000026A7 ; ---------------------------------------------------------------------------
.text:000026A7
.text:000026A7 loc_26A7:                               ; CODE XREF: Main2(void)+1833j
.text:000026A7                                         ; Main2(void)+1845j
.text:000026A7                 mov     [ebp+var_9D0], 0
.text:000026B1
.text:000026B1 loc_26B1:                               ; CODE XREF: Main2(void)+1851j
.text:000026B1                 mov     dl, byte ptr [ebp+var_9D0]
.text:000026B7                 mov     [ebp+var_661], dl
.text:000026BD                 mov     al, [ebp+var_661]
.text:000026C3                 mov     [ebp+var_599], al
.text:000026C9                 lea     ecx, [ebp+var_200]
.text:000026CF                 push    ecx
.text:000026D0                 lea     ecx, [ebp+var_598]
.text:000026D6                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:000026DB                 lea     ecx, [ebp+var_798]
.text:000026E1                 call    ??0CUpdateCallbackConsole@@QAE@XZ ; CUpdateCallbackConsole::CUpdateCallbackConsole(void)
.text:000026E6                 mov     byte ptr [ebp+var_4], 14h
.text:000026EA                 mov     edx, [ebp+var_30]
.text:000026ED                 mov     [ebp+var_6D0], edx
.text:000026F3                 mov     eax, [ebp+var_27C]
.text:000026F9                 mov     [ebp+var_6D4], eax
.text:000026FF                 cmp     [ebp+var_274], 0
.text:00002706                 jz      short loc_271A
.text:00002708                 mov     ecx, [ebp+var_280]
.text:0000270E                 push    ecx             ; unsigned int
.text:0000270F                 lea     ecx, [ebp+var_790] ; this
.text:00002715                 call    ?SetWindowWidth@CCallbackConsoleBase@@QAEXI@Z ; CCallbackConsoleBase::SetWindowWidth(uint)
.text:0000271A
.text:0000271A loc_271A:                               ; CODE XREF: Main2(void)+18B2j
.text:0000271A                 mov     dl, [ebp+var_661]
.text:00002720                 mov     [ebp+var_680], dl
.text:00002726                 movzx   eax, [ebp+var_204]
.text:0000272D                 test    eax, eax
.text:0000272F                 jz      short loc_274F
.text:00002731                 lea     ecx, [ebp+var_200] ; this
.text:00002737                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:0000273C                 movzx   ecx, al
.text:0000273F                 test    ecx, ecx
.text:00002741                 jz      short loc_274F
.text:00002743                 mov     [ebp+var_9D4], 1
.text:0000274D                 jmp     short loc_2759
.text:0000274F ; ---------------------------------------------------------------------------
.text:0000274F
.text:0000274F loc_274F:                               ; CODE XREF: Main2(void)+18DBj
.text:0000274F                                         ; Main2(void)+18EDj
.text:0000274F                 mov     [ebp+var_9D4], 0
.text:00002759
.text:00002759 loc_2759:                               ; CODE XREF: Main2(void)+18F9j
.text:00002759                 mov     dl, byte ptr [ebp+var_9D4]
.text:0000275F                 mov     [ebp+var_670], dl
.text:00002765                 lea     eax, [ebp+var_200]
.text:0000276B                 push    eax
.text:0000276C                 lea     ecx, [ebp+var_67C]
.text:00002772                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:00002777                 mov     ecx, [ebp+var_588]
.text:0000277D                 mov     dl, [ecx+0C4h]
.text:00002783                 mov     [ebp+var_6D8], dl
.text:00002789                 mov     eax, [ebp+var_274]
.text:0000278F                 push    eax             ; struct CStdOutStream *
.text:00002790                 mov     ecx, dword ptr ds:?g_ErrStream@@3PAVCStdOutStream@@A ; CStdOutStream * g_ErrStream
.text:00002796                 push    ecx             ; struct CStdOutStream *
.text:00002797                 mov     edx, dword ptr ds:?g_StdStream@@3PAVCStdOutStream@@A ; CStdOutStream * g_StdStream
.text:0000279D                 push    edx             ; struct CStdOutStream *
.text:0000279E                 lea     ecx, [ebp+var_790] ; this
.text:000027A4                 call    ?Init@CCallbackConsoleBase@@QAEXPAVCStdOutStream@@00@Z ; CCallbackConsoleBase::Init(CStdOutStream *,CStdOutStream *,CStdOutStream *)
.text:000027A9                 lea     ecx, [ebp+var_7BC] ; this
.text:000027AF                 call    ??0CUpdateErrorInfo@@QAE@XZ ; CUpdateErrorInfo::CUpdateErrorInfo(void)
.text:000027B4                 mov     byte ptr [ebp+var_4], 15h
.text:000027B8                 push    1
.text:000027BA                 lea     eax, [ebp+var_798]
.text:000027C0                 push    eax
.text:000027C1                 lea     ecx, [ebp+var_65C]
.text:000027C7                 push    ecx
.text:000027C8                 lea     edx, [ebp+var_7BC]
.text:000027CE                 push    edx
.text:000027CF                 mov     eax, [ebp+var_588]
.text:000027D5                 push    eax
.text:000027D6                 lea     ecx, [ebp+var_22C]
.text:000027DC                 push    ecx
.text:000027DD                 lea     edx, [ebp+var_210]
.text:000027E3                 push    edx
.text:000027E4                 lea     eax, [ebp+var_2C4]
.text:000027EA                 push    eax
.text:000027EB                 mov     ecx, [ebp+var_2A4]
.text:000027F1                 push    ecx
.text:000027F2                 call    ?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z ; UpdateArchive(CCodecs *,CObjectVector<COpenType> const &,UString const &,NWildcard::CCensor &,CUpdateOptions &,CUpdateErrorInfo &,IOpenCallbackUI *,IUpdateCallbackUI2 *,bool)
.text:000027F7                 mov     [ebp+var_2FC], eax
.text:000027FD                 lea     ecx, [ebp+var_790] ; this
.text:00002803                 call    ?ClosePercents2@CCallbackConsoleBase@@QAEXXZ ; CCallbackConsoleBase::ClosePercents2(void)
.text:00002808                 lea     edx, [ebp+var_798]
.text:0000280E                 test    edx, edx
.text:00002810                 jz      short loc_2823
.text:00002812                 lea     eax, [ebp+var_798]
.text:00002818                 add     eax, 8
.text:0000281B                 mov     [ebp+var_9D8], eax
.text:00002821                 jmp     short loc_282D
.text:00002823 ; ---------------------------------------------------------------------------
.text:00002823
.text:00002823 loc_2823:                               ; CODE XREF: Main2(void)+19BCj
.text:00002823                 mov     [ebp+var_9D8], 0
.text:0000282D
.text:0000282D loc_282D:                               ; CODE XREF: Main2(void)+19CDj
.text:0000282D                 push    1               ; char
.text:0000282F                 mov     ecx, [ebp+var_278]
.text:00002835                 push    ecx             ; int
.text:00002836                 lea     edx, [ebp+var_7BC]
.text:0000283C                 push    edx             ; CUpdateErrorInfo *
.text:0000283D                 mov     eax, [ebp+var_9D8]
.text:00002843                 push    eax             ; int
.text:00002844                 mov     ecx, [ebp+var_2FC]
.text:0000284A                 push    ecx             ; int
.text:0000284B                 call    ?WarningsCheck@@YGHJABVCCallbackConsoleBase@@ABUCUpdateErrorInfo@@AAVCStdOutStream@@_N@Z ; WarningsCheck(long,CCallbackConsoleBase const &,CUpdateErrorInfo const &,CStdOutStream &,bool)
.text:00002850                 mov     [ebp+var_2F8], eax
.text:00002856                 mov     byte ptr [ebp+var_4], 14h
.text:0000285A                 lea     ecx, [ebp+var_7BC] ; this
.text:00002860                 call    ??1CUpdateErrorInfo@@QAE@XZ ; CUpdateErrorInfo::~CUpdateErrorInfo(void)
.text:00002865                 mov     byte ptr [ebp+var_4], 13h
.text:00002869                 lea     ecx, [ebp+var_798] ; this
.text:0000286F                 call    ??1CUpdateCallbackConsole@@QAE@XZ ; CUpdateCallbackConsole::~CUpdateCallbackConsole(void)
.text:00002874                 mov     byte ptr [ebp+var_4], 7
.text:00002878                 lea     ecx, [ebp+var_65C] ; this
.text:0000287E                 call    ??1COpenCallbackConsole@@QAE@XZ ; COpenCallbackConsole::~COpenCallbackConsole(void)
.text:00002883                 jmp     loc_29DB
.text:00002888 ; ---------------------------------------------------------------------------
.text:00002888
.text:00002888 loc_2888:                               ; CODE XREF: Main2(void)+17A8j
.text:00002888                 cmp     [ebp+var_214], 9
.text:0000288F                 jnz     loc_29CD
.text:00002895                 lea     edx, [ebp+var_68]
.text:00002898                 mov     [ebp+var_7C4], edx
.text:0000289E                 lea     ecx, [ebp+var_900] ; this
.text:000028A4                 call    ??0CHashCallbackConsole@@QAE@XZ ; CHashCallbackConsole::CHashCallbackConsole(void)
.text:000028A9                 mov     byte ptr [ebp+var_4], 16h
.text:000028AD                 cmp     [ebp+var_274], 0
.text:000028B4                 jz      short loc_28C8
.text:000028B6                 mov     eax, [ebp+var_280]
.text:000028BC                 push    eax             ; unsigned int
.text:000028BD                 lea     ecx, [ebp+var_8F8] ; this
.text:000028C3                 call    ?SetWindowWidth@CCallbackConsoleBase@@QAEXI@Z ; CCallbackConsoleBase::SetWindowWidth(uint)
.text:000028C8
.text:000028C8 loc_28C8:                               ; CODE XREF: Main2(void)+1A60j
.text:000028C8                 mov     ecx, [ebp+var_274]
.text:000028CE                 push    ecx             ; struct CStdOutStream *
.text:000028CF                 mov     edx, dword ptr ds:?g_ErrStream@@3PAVCStdOutStream@@A ; CStdOutStream * g_ErrStream
.text:000028D5                 push    edx             ; struct CStdOutStream *
.text:000028D6                 mov     eax, dword ptr ds:?g_StdStream@@3PAVCStdOutStream@@A ; CStdOutStream * g_StdStream
.text:000028DB                 push    eax             ; struct CStdOutStream *
.text:000028DC                 lea     ecx, [ebp+var_8F8] ; this
.text:000028E2                 call    ?Init@CCallbackConsoleBase@@QAEXPAVCStdOutStream@@00@Z ; CCallbackConsoleBase::Init(CStdOutStream *,CStdOutStream *,CStdOutStream *)
.text:000028E7                 mov     cl, [ebp+var_22F]
.text:000028ED                 mov     [ebp+var_7CF], cl
.text:000028F3                 lea     ecx, [ebp+var_914]
.text:000028F9                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:000028FE                 mov     byte ptr [ebp+var_4], 17h
.text:00002902                 lea     edx, [ebp+var_900]
.text:00002908                 push    edx             ; struct IHashCallbackUI *
.text:00002909                 lea     eax, [ebp+var_914]
.text:0000290F                 push    eax             ; struct AString *
.text:00002910                 mov     ecx, [ebp+var_7C4]
.text:00002916                 push    ecx             ; struct CHashOptions *
.text:00002917                 lea     edx, [ebp+var_22C]
.text:0000291D                 push    edx             ; struct NWildcard::CCensor *
.text:0000291E                 call    ?HashCalc@@YGJABVCCensor@NWildcard@@ABUCHashOptions@@AAVAString@@PAUIHashCallbackUI@@@Z ; HashCalc(NWildcard::CCensor const &,CHashOptions const &,AString &,IHashCallbackUI *)
.text:00002923                 mov     [ebp+var_2FC], eax
.text:00002929                 lea     ecx, [ebp+var_938] ; this
.text:0000292F                 call    ??0CUpdateErrorInfo@@QAE@XZ ; CUpdateErrorInfo::CUpdateErrorInfo(void)
.text:00002934                 mov     byte ptr [ebp+var_4], 18h
.text:00002938                 lea     eax, [ebp+var_914]
.text:0000293E                 push    eax
.text:0000293F                 lea     ecx, [ebp+var_934]
.text:00002945                 call    ??4AString@@QAEAAV0@ABV0@@Z ; AString::operator=(AString const &)
.text:0000294A                 lea     ecx, [ebp+var_900]
.text:00002950                 test    ecx, ecx
.text:00002952                 jz      short loc_2965
.text:00002954                 lea     edx, [ebp+var_900]
.text:0000295A                 add     edx, 8
.text:0000295D                 mov     [ebp+var_9DC], edx
.text:00002963                 jmp     short loc_296F
.text:00002965 ; ---------------------------------------------------------------------------
.text:00002965
.text:00002965 loc_2965:                               ; CODE XREF: Main2(void)+1AFEj
.text:00002965                 mov     [ebp+var_9DC], 0
.text:0000296F
.text:0000296F loc_296F:                               ; CODE XREF: Main2(void)+1B0Fj
.text:0000296F                 movzx   eax, [ebp+var_22F]
.text:00002976                 push    eax             ; char
.text:00002977                 mov     ecx, [ebp+var_278]
.text:0000297D                 push    ecx             ; int
.text:0000297E                 lea     edx, [ebp+var_938]
.text:00002984                 push    edx             ; CUpdateErrorInfo *
.text:00002985                 mov     eax, [ebp+var_9DC]
.text:0000298B                 push    eax             ; int
.text:0000298C                 mov     ecx, [ebp+var_2FC]
.text:00002992                 push    ecx             ; int
.text:00002993                 call    ?WarningsCheck@@YGHJABVCCallbackConsoleBase@@ABUCUpdateErrorInfo@@AAVCStdOutStream@@_N@Z ; WarningsCheck(long,CCallbackConsoleBase const &,CUpdateErrorInfo const &,CStdOutStream &,bool)
.text:00002998                 mov     [ebp+var_2F8], eax
.text:0000299E                 mov     byte ptr [ebp+var_4], 17h
.text:000029A2                 lea     ecx, [ebp+var_938] ; this
.text:000029A8                 call    ??1CUpdateErrorInfo@@QAE@XZ ; CUpdateErrorInfo::~CUpdateErrorInfo(void)
.text:000029AD                 mov     byte ptr [ebp+var_4], 16h
.text:000029B1                 lea     ecx, [ebp+var_914] ; this
.text:000029B7                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:000029BC                 mov     byte ptr [ebp+var_4], 7
.text:000029C0                 lea     ecx, [ebp+var_900] ; this
.text:000029C6                 call    ??1CHashCallbackConsole@@QAE@XZ ; CHashCallbackConsole::~CHashCallbackConsole(void)
.text:000029CB                 jmp     short loc_29DB
.text:000029CD ; ---------------------------------------------------------------------------
.text:000029CD
.text:000029CD loc_29CD:                               ; CODE XREF: Main2(void)+1A3Bj
.text:000029CD                 push    7               ; int
.text:000029CF                 mov     edx, ds:_kUserErrorMessage
.text:000029D5                 push    edx             ; Str
.text:000029D6                 call    ?ShowMessageAndThrowException@@YGXPBDW4EEnum@NExitCode@@@Z ; ShowMessageAndThrowException(char const *,NExitCode::EEnum)
.text:000029DB ; ---------------------------------------------------------------------------
.text:000029DB
.text:000029DB loc_29DB:                               ; CODE XREF: Main2(void):loc_1985j
.text:000029DB                                         ; Main2(void):loc_19EBj ...
.text:000029DB                 movzx   eax, [ebp+var_1F3]
.text:000029E2                 test    eax, eax
.text:000029E4                 jz      short loc_29F4
.text:000029E6                 cmp     dword ptr ds:?g_StdStream@@3PAVCStdOutStream@@A, 0 ; CStdOutStream * g_StdStream
.text:000029ED                 jz      short loc_29F4
.text:000029EF                 call    ?PrintStat@@YGXXZ ; PrintStat(void)
.text:000029F4
.text:000029F4 loc_29F4:                               ; CODE XREF: Main2(void)+1B90j
.text:000029F4                                         ; Main2(void)+1B99j
.text:000029F4                 mov     ecx, [ebp+var_2FC]
.text:000029FA                 push    ecx
.text:000029FB                 call    ?ThrowException_if_Error@@YGXJ@Z ; ThrowException_if_Error(long)
.text:00002A00                 mov     edx, [ebp+var_2F8]
.text:00002A06                 mov     [ebp+var_980], edx
.text:00002A0C                 mov     byte ptr [ebp+var_4], 6
.text:00002A10                 lea     ecx, [ebp+var_2D8]
.text:00002A16                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:00002A1B                 mov     byte ptr [ebp+var_4], 5
.text:00002A1F                 lea     ecx, [ebp+var_2C4]
.text:00002A25                 call    ??1?$CObjectVector@UCOpenType@@@@QAE@XZ ; CObjectVector<COpenType>::~CObjectVector<COpenType>(void)
.text:00002A2A                 mov     byte ptr [ebp+var_4], 3
.text:00002A2E                 lea     ecx, [ebp+var_2AC]
.text:00002A34                 call    ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ ; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>(void)
.text:00002A39                 mov     byte ptr [ebp+var_4], 2
.text:00002A3D                 lea     ecx, [ebp+var_26C] ; this
.text:00002A43                 call    ??1CArcCmdLineParser@@QAE@XZ ; CArcCmdLineParser::~CArcCmdLineParser(void)
.text:00002A48                 mov     byte ptr [ebp+var_4], 0
.text:00002A4C                 lea     ecx, [ebp+var_238] ; this
.text:00002A52                 call    ??1CArcCmdLineOptions@@QAE@XZ ; CArcCmdLineOptions::~CArcCmdLineOptions(void)
.text:00002A57                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002A5E                 lea     ecx, [ebp+var_20]
.text:00002A61                 call    ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text:00002A66                 mov     eax, [ebp+var_980]
.text:00002A6C
.text:00002A6C loc_2A6C:                               ; CODE XREF: Main2(void)+D5j
.text:00002A6C                                         ; Main2(void)+218j
.text:00002A6C                 push    edx
.text:00002A6D                 mov     ecx, ebp
.text:00002A6F                 push    eax
.text:00002A70                 lea     edx, $LN182
.text:00002A76                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002A7B                 pop     eax
.text:00002A7C                 pop     edx
.text:00002A7D                 mov     ecx, [ebp+var_C]
.text:00002A80                 mov     large fs:0, ecx
.text:00002A87                 pop     ecx
.text:00002A88                 pop     edi
.text:00002A89                 pop     esi
.text:00002A8A                 mov     ecx, [ebp+var_10]
.text:00002A8D                 xor     ecx, ebp
.text:00002A8F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00002A94                 add     esp, 9DCh
.text:00002A9A                 cmp     ebp, esp
.text:00002A9C                 call    __RTC_CheckEsp
.text:00002AA1                 mov     esp, ebp
.text:00002AA3                 pop     ebp
.text:00002AA4                 retn
.text:00002AA4 ?Main2@@YGHXZ   endp
.text:00002AA4
.text:00002AA4 ; ---------------------------------------------------------------------------
.text:00002AA5                 align 4
.text:00002AA8 $LN182          dd 1Ah                  ; DATA XREF: Main2(void)+1C1Co
.text:00002AAC                 dd offset $LN181
.text:00002AB0 $LN181          dd 0FFFFFFE0h, 0Ch      ; DATA XREF: .text:00002AACo
.text:00002AB8                 dd offset $LN154        ; "commandStrings"
.text:00002ABC                 dd 0FFFFFDC8h, 210h
.text:00002AC4                 dd offset $LN155        ; "options"
.text:00002AC8                 dd 0FFFFFD94h, 2Ch
.text:00002AD0                 dd offset $LN156        ; "parser"
.text:00002AD4                 dd 0FFFFFD64h, 16h
.text:00002ADC                 dd offset $LN157        ; "consoleInfo"
.text:00002AE0                 dd 0FFFFFD54h, 4
.text:00002AE8                 dd offset $LN158        ; "__codecsRef"
.text:00002AEC                 dd 0FFFFFD3Ch, 0Ch
.text:00002AF4                 dd offset $LN159        ; "types"
.text:00002AF8                 dd 0FFFFFD28h, 0Ch
.text:00002B00                 dd offset $LN160        ; "excludedFormats"
.text:00002B04                 dd 0FFFFFD10h, 0Ch
.text:00002B0C                 dd offset $LN161        ; "tempIndices"
.text:00002B10                 dd 0FFFFFCE0h, 0Ch
.text:00002B18                 dd offset $LN162        ; "s"
.text:00002B1C                 dd 0FFFFFCACh, 0Ch
.text:00002B24                 dd offset $LN163        ; "ArchivePathsSorted"
.text:00002B28                 dd 0FFFFFC98h, 0Ch
.text:00002B30                 dd offset $LN164        ; "ArchivePathsFullSorted"
.text:00002B34                 dd 0FFFFFBD0h, 0C0h
.text:00002B3C                 dd offset $LN165        ; "scan"
.text:00002B40                 dd 0FFFFFB98h, 30h
.text:00002B48                 dd offset $LN166        ; "st"
.text:00002B4C                 dd 0FFFFFB88h, 4
.text:00002B54                 dd offset $LN167        ; "extractCallback"
.text:00002B58                 dd 0FFFFFB4Ch, 34h
.text:00002B60                 dd offset $LN168        ; "eo"
.text:00002B64                 dd 0FFFFFB38h, 0Ch
.text:00002B6C                 dd offset $LN169        ; "errorMessage"
.text:00002B70                 dd 0FFFFFAF8h, 38h
.text:00002B78                 dd offset $LN170        ; "stat"
.text:00002B7C                 dd 0FFFFFAA8h, 48h
.text:00002B84                 dd offset $LN171        ; "hb"
.text:00002B88                 db 90h
.text:00002B89                 db 0FAh, 2 dup(0FFh)
.text:00002B8C                 dd 8
.text:00002B90                 dd offset $LN172        ; "numErrors"
.text:00002B94                 dd 0FFFFFA80h, 8
.text:00002B9C                 dd offset $LN173        ; "numWarnings"
.text:00002BA0                 dd 0FFFFF9A4h, 0D0h
.text:00002BA8                 dd offset $LN174        ; "openCallback"
.text:00002BAC                 dd 0FFFFF868h, 130h
.text:00002BB4                 dd offset $LN175        ; "callback"
.text:00002BB8                 dd 0FFFFF844h, 1Ch
.text:00002BC0                 dd offset $LN176        ; "errorInfo"
.text:00002BC4                 dd 0FFFFF700h, 138h
.text:00002BCC                 dd offset $LN177        ; "callback"
.text:00002BD0                 dd 0FFFFF6ECh, 0Ch
.text:00002BD8                 dd offset $LN178        ; "errorInfoString"
.text:00002BDC                 dd 0FFFFF6C8h, 1Ch
.text:00002BE4                 dd offset $LN179        ; "errorInfo"
.text:00002BE8 $LN179          db 'errorInfo',0        ; DATA XREF: .text:00002BE4o
.text:00002BF2 $LN178          db 'errorInfoString',0  ; DATA XREF: .text:00002BD8o
.text:00002C02 $LN177          db 'callback',0         ; DATA XREF: .text:00002BCCo
.text:00002C0B $LN176          db 'errorInfo',0        ; DATA XREF: .text:00002BC0o
.text:00002C15 $LN175          db 'callback',0         ; DATA XREF: .text:00002BB4o
.text:00002C1E $LN174          db 'openCallback',0     ; DATA XREF: .text:00002BA8o
.text:00002C2B $LN173          db 'numWarnings',0      ; DATA XREF: .text:00002B9Co
.text:00002C37 $LN172          db 'numErrors',0        ; DATA XREF: .text:00002B90o
.text:00002C41 $LN171          db 'hb',0               ; DATA XREF: .text:00002B84o
.text:00002C44 $LN170          db 'stat',0             ; DATA XREF: .text:00002B78o
.text:00002C49 $LN169          db 'errorMessage',0     ; DATA XREF: .text:00002B6Co
.text:00002C56 $LN168          db 'eo',0               ; DATA XREF: .text:00002B60o
.text:00002C59 $LN167          db 'extractCallback',0  ; DATA XREF: .text:00002B54o
.text:00002C69 $LN166          db 'st',0               ; DATA XREF: .text:00002B48o
.text:00002C6C $LN165          db 'scan',0             ; DATA XREF: .text:00002B3Co
.text:00002C71 $LN164          db 'ArchivePathsFullSorted',0 ; DATA XREF: .text:00002B30o
.text:00002C88 $LN163          db 'ArchivePathsSorted',0 ; DATA XREF: .text:00002B24o
.text:00002C9B $LN162          db 's',0                ; DATA XREF: .text:00002B18o
.text:00002C9D $LN161          db 'tempIndices',0      ; DATA XREF: .text:00002B0Co
.text:00002CA9 $LN160          db 'excludedFormats',0  ; DATA XREF: .text:00002B00o
.text:00002CB9 $LN159          db 'types',0            ; DATA XREF: .text:00002AF4o
.text:00002CBF $LN158          db '__codecsRef',0      ; DATA XREF: .text:00002AE8o
.text:00002CCB $LN157          db 'consoleInfo',0      ; DATA XREF: .text:00002ADCo
.text:00002CD7 $LN156          db 'parser',0           ; DATA XREF: .text:00002AD0o
.text:00002CDE $LN155          db 'options',0          ; DATA XREF: .text:00002AC4o
.text:00002CE6 $LN154          db 'commandStrings',0   ; DATA XREF: .text:00002AB8o
.text:00002CF5                 db 0Fh dup(0CCh)
.text:00002D04
.text:00002D04 ; =============== S U B R O U T I N E =======================================
.text:00002D04
.text:00002D04 ; Attributes: noreturn bp-based frame
.text:00002D04
.text:00002D04 ; int __cdecl ShowMessageAndThrowException(char *Str, int)
.text:00002D04 ?ShowMessageAndThrowException@@YGXPBDW4EEnum@NExitCode@@@Z proc near
.text:00002D04                                         ; CODE XREF: Main2(void)+1B82p
.text:00002D04
.text:00002D04 var_4           = dword ptr -4
.text:00002D04 Str             = dword ptr  8
.text:00002D04 arg_4           = dword ptr  0Ch
.text:00002D04
.text:00002D04                 push    ebp
.text:00002D05                 mov     ebp, esp
.text:00002D07                 push    ecx
.text:00002D08                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002D0F                 cmp     dword ptr ds:?g_ErrStream@@3PAVCStdOutStream@@A, 0 ; CStdOutStream * g_ErrStream
.text:00002D16                 jz      short loc_2D4B
.text:00002D18                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00002D1D                 mov     eax, [ebp+Str]
.text:00002D20                 push    eax             ; Str
.text:00002D21                 push    offset $SG77154 ; "ERROR: "
.text:00002D26                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00002D2B                 mov     ecx, dword ptr ds:?g_ErrStream@@3PAVCStdOutStream@@A ; CStdOutStream * g_ErrStream
.text:00002D31                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00002D36                 mov     ecx, eax
.text:00002D38                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00002D3D                 mov     ecx, eax
.text:00002D3F                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00002D44                 mov     ecx, eax
.text:00002D46                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00002D4B
.text:00002D4B loc_2D4B:                               ; CODE XREF: ShowMessageAndThrowException(char const *,NExitCode::EEnum)+12j
.text:00002D4B                 mov     ecx, [ebp+arg_4]
.text:00002D4E                 mov     [ebp+var_4], ecx
.text:00002D51                 push    offset __TI1?AW4EEnum@NExitCode@@
.text:00002D56                 lea     edx, [ebp+var_4]
.text:00002D59                 push    edx
.text:00002D5A                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:00002D5A ?ShowMessageAndThrowException@@YGXPBDW4EEnum@NExitCode@@@Z endp
.text:00002D5A
.text:00002D5F ; ---------------------------------------------------------------------------
.text:00002D5F                 add     esp, 4
.text:00002D62                 cmp     ebp, esp
.text:00002D64                 call    __RTC_CheckEsp
.text:00002D69                 mov     esp, ebp
.text:00002D6B                 pop     ebp
.text:00002D6C                 retn    8
.text:00002D6C ; ---------------------------------------------------------------------------
.text:00002D6F                 db 5 dup(0CCh)
.text:00002D74
.text:00002D74 ; =============== S U B R O U T I N E =======================================
.text:00002D74
.text:00002D74 ; Attributes: bp-based frame
.text:00002D74
.text:00002D74 ; void __stdcall ShowCopyrightAndHelp(class CStdOutStream *, bool)
.text:00002D74 ?ShowCopyrightAndHelp@@YGXPAVCStdOutStream@@_N@Z proc near
.text:00002D74                                         ; CODE XREF: Main2(void)+B1p
.text:00002D74                                         ; Main2(void)+1D6p ...
.text:00002D74
.text:00002D74 arg_0           = dword ptr  8
.text:00002D74 arg_4           = byte ptr  0Ch
.text:00002D74
.text:00002D74                 push    ebp
.text:00002D75                 mov     ebp, esp
.text:00002D77                 cmp     [ebp+arg_0], 0
.text:00002D7B                 jnz     short loc_2D7F
.text:00002D7D                 jmp     short loc_2DA4
.text:00002D7F ; ---------------------------------------------------------------------------
.text:00002D7F
.text:00002D7F loc_2D7F:                               ; CODE XREF: ShowCopyrightAndHelp(CStdOutStream *,bool)+7j
.text:00002D7F                 mov     eax, ds:_kCopyrightString
.text:00002D84                 push    eax             ; Str
.text:00002D85                 mov     ecx, [ebp+arg_0]
.text:00002D88                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00002D8D                 movzx   ecx, [ebp+arg_4]
.text:00002D91                 test    ecx, ecx
.text:00002D93                 jz      short loc_2DA4
.text:00002D95                 mov     edx, ds:_kHelpString
.text:00002D9B                 push    edx             ; Str
.text:00002D9C                 mov     ecx, [ebp+arg_0]
.text:00002D9F                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00002DA4
.text:00002DA4 loc_2DA4:                               ; CODE XREF: ShowCopyrightAndHelp(CStdOutStream *,bool)+9j
.text:00002DA4                                         ; ShowCopyrightAndHelp(CStdOutStream *,bool)+1Fj
.text:00002DA4                 cmp     ebp, esp
.text:00002DA6                 call    __RTC_CheckEsp
.text:00002DAB                 pop     ebp
.text:00002DAC                 retn    8
.text:00002DAC ?ShowCopyrightAndHelp@@YGXPAVCStdOutStream@@_N@Z endp
.text:00002DAC
.text:00002DAC ; ---------------------------------------------------------------------------
.text:00002DAF                 db 5 dup(0CCh)
.text:00002DB4
.text:00002DB4 ; =============== S U B R O U T I N E =======================================
.text:00002DB4
.text:00002DB4 ; Attributes: bp-based frame
.text:00002DB4
.text:00002DB4 ; void __stdcall PrintUInt32(class CStdOutStream &, unsigned int, unsigned int)
.text:00002DB4 ?PrintUInt32@@YGXAAVCStdOutStream@@II@Z proc near
.text:00002DB4                                         ; CODE XREF: Main2(void)+AD6p
.text:00002DB4                                         ; PrintLibIndex(CStdOutStream &,int)+13p
.text:00002DB4
.text:00002DB4 var_34          = byte ptr -34h
.text:00002DB4 var_24          = byte ptr -24h
.text:00002DB4 var_10          = dword ptr -10h
.text:00002DB4 var_C           = dword ptr -0Ch
.text:00002DB4 var_4           = dword ptr -4
.text:00002DB4 arg_0           = dword ptr  8
.text:00002DB4 arg_4           = dword ptr  0Ch
.text:00002DB4 arg_8           = dword ptr  10h
.text:00002DB4
.text:00002DB4                 push    ebp
.text:00002DB5                 mov     ebp, esp
.text:00002DB7                 push    0FFFFFFFFh
.text:00002DB9                 push    offset __ehhandler$?PrintUInt32@@YGXAAVCStdOutStream@@II@Z
.text:00002DBE                 mov     eax, large fs:0
.text:00002DC4                 push    eax
.text:00002DC5                 sub     esp, 28h
.text:00002DC8                 push    edi
.text:00002DC9                 lea     edi, [ebp+var_34]
.text:00002DCC                 mov     ecx, 0Ah
.text:00002DD1                 mov     eax, 0CCCCCCCCh
.text:00002DD6                 rep stosd
.text:00002DD8                 mov     eax, dword ptr ds:___security_cookie
.text:00002DDD                 xor     eax, ebp
.text:00002DDF                 mov     [ebp+var_10], eax
.text:00002DE2                 push    eax
.text:00002DE3                 lea     eax, [ebp+var_C]
.text:00002DE6                 mov     large fs:0, eax
.text:00002DEC                 lea     eax, [ebp+var_24]
.text:00002DEF                 push    eax             ; char *
.text:00002DF0                 mov     ecx, [ebp+arg_4]
.text:00002DF3                 push    ecx             ; unsigned int
.text:00002DF4                 call    ?ConvertUInt32ToString@@YGXIPAD@Z ; ConvertUInt32ToString(uint,char *)
.text:00002DF9                 lea     edx, [ebp+var_24]
.text:00002DFC                 push    edx
.text:00002DFD                 lea     ecx, [ebp+var_34]
.text:00002E00                 call    ??0AString@@QAE@PBD@Z ; AString::AString(char const *)
.text:00002E05                 mov     [ebp+var_4], 0
.text:00002E0C                 mov     eax, [ebp+arg_8]
.text:00002E0F                 push    eax             ; int
.text:00002E10                 lea     ecx, [ebp+var_34]
.text:00002E13                 push    ecx             ; AString *
.text:00002E14                 mov     edx, [ebp+arg_0]
.text:00002E17                 push    edx             ; int
.text:00002E18                 call    ?PrintStringRight@@YGXAAVCStdOutStream@@ABVAString@@I@Z ; PrintStringRight(CStdOutStream &,AString const &,uint)
.text:00002E1D                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002E24                 lea     ecx, [ebp+var_34] ; this
.text:00002E27                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00002E2C                 push    edx
.text:00002E2D                 mov     ecx, ebp
.text:00002E2F                 push    eax
.text:00002E30                 lea     edx, $LN7
.text:00002E36                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002E3B                 pop     eax
.text:00002E3C                 pop     edx
.text:00002E3D                 mov     ecx, [ebp+var_C]
.text:00002E40                 mov     large fs:0, ecx
.text:00002E47                 pop     ecx
.text:00002E48                 pop     edi
.text:00002E49                 mov     ecx, [ebp+var_10]
.text:00002E4C                 xor     ecx, ebp
.text:00002E4E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00002E53                 add     esp, 34h
.text:00002E56                 cmp     ebp, esp
.text:00002E58                 call    __RTC_CheckEsp
.text:00002E5D                 mov     esp, ebp
.text:00002E5F                 pop     ebp
.text:00002E60                 retn    0Ch
.text:00002E60 ?PrintUInt32@@YGXAAVCStdOutStream@@II@Z endp
.text:00002E60
.text:00002E60 ; ---------------------------------------------------------------------------
.text:00002E63                 align 4
.text:00002E64 $LN7            dd 1                    ; DATA XREF: PrintUInt32(CStdOutStream &,uint,uint)+7Co
.text:00002E68                 dd offset $LN6
.text:00002E6C $LN6            dd 0FFFFFFDCh, 10h      ; DATA XREF: .text:00002E68o
.text:00002E74                 dd offset $LN4
.text:00002E78 $LN4            dd 0CCCC0073h, 2 dup(0CCCCCCCCh) ; DATA XREF: .text:00002E74o
.text:00002E84
.text:00002E84 ; =============== S U B R O U T I N E =======================================
.text:00002E84
.text:00002E84 ; Attributes: bp-based frame
.text:00002E84
.text:00002E84 ; int __stdcall PrintStringRight(int, AString *, int)
.text:00002E84 ?PrintStringRight@@YGXAAVCStdOutStream@@ABVAString@@I@Z proc near
.text:00002E84                                         ; CODE XREF: PrintUInt32(CStdOutStream &,uint,uint)+64p
.text:00002E84                                         ; PrintHexId(CStdOutStream &,unsigned __int64)+66p
.text:00002E84
.text:00002E84 var_8           = dword ptr -8
.text:00002E84 var_4           = dword ptr -4
.text:00002E84 arg_0           = dword ptr  8
.text:00002E84 arg_4           = dword ptr  0Ch
.text:00002E84 arg_8           = dword ptr  10h
.text:00002E84
.text:00002E84                 push    ebp
.text:00002E85                 mov     ebp, esp
.text:00002E87                 sub     esp, 8
.text:00002E8A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002E91                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002E98                 mov     ecx, [ebp+arg_4] ; this
.text:00002E9B                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:00002EA0                 mov     [ebp+var_4], eax
.text:00002EA3                 mov     eax, [ebp+var_4]
.text:00002EA6                 mov     [ebp+var_8], eax
.text:00002EA9                 jmp     short loc_2EB4
.text:00002EAB ; ---------------------------------------------------------------------------
.text:00002EAB
.text:00002EAB loc_2EAB:                               ; CODE XREF: PrintStringRight(CStdOutStream &,AString const &,uint)+42j
.text:00002EAB                 mov     ecx, [ebp+var_8]
.text:00002EAE                 add     ecx, 1
.text:00002EB1                 mov     [ebp+var_8], ecx
.text:00002EB4
.text:00002EB4 loc_2EB4:                               ; CODE XREF: PrintStringRight(CStdOutStream &,AString const &,uint)+25j
.text:00002EB4                 mov     edx, [ebp+var_8]
.text:00002EB7                 cmp     edx, [ebp+arg_8]
.text:00002EBA                 jnb     short loc_2EC8
.text:00002EBC                 push    20h ; ' '
.text:00002EBE                 mov     ecx, [ebp+arg_0]
.text:00002EC1                 call    ??6CStdOutStream@@QAEAAV0@D@Z ; CStdOutStream::operator<<(char)
.text:00002EC6                 jmp     short loc_2EAB
.text:00002EC8 ; ---------------------------------------------------------------------------
.text:00002EC8
.text:00002EC8 loc_2EC8:                               ; CODE XREF: PrintStringRight(CStdOutStream &,AString const &,uint)+36j
.text:00002EC8                 mov     ecx, [ebp+arg_4]
.text:00002ECB                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:00002ED0                 push    eax             ; Str
.text:00002ED1                 mov     ecx, [ebp+arg_0]
.text:00002ED4                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00002ED9                 add     esp, 8
.text:00002EDC                 cmp     ebp, esp
.text:00002EDE                 call    __RTC_CheckEsp
.text:00002EE3                 mov     esp, ebp
.text:00002EE5                 pop     ebp
.text:00002EE6                 retn    0Ch
.text:00002EE6 ?PrintStringRight@@YGXAAVCStdOutStream@@ABVAString@@I@Z endp
.text:00002EE6
.text:00002EE6 ; ---------------------------------------------------------------------------
.text:00002EE9                 db 0Bh dup(0CCh)
.text:00002EF4
.text:00002EF4 ; =============== S U B R O U T I N E =======================================
.text:00002EF4
.text:00002EF4 ; Attributes: bp-based frame
.text:00002EF4
.text:00002EF4 ; void __stdcall PrintLibIndex(class CStdOutStream &, int)
.text:00002EF4 ?PrintLibIndex@@YGXAAVCStdOutStream@@H@Z proc near
.text:00002EF4                                         ; CODE XREF: Main2(void)+97Fp
.text:00002EF4                                         ; Main2(void)+ABEp
.text:00002EF4
.text:00002EF4 arg_0           = dword ptr  8
.text:00002EF4 arg_4           = dword ptr  0Ch
.text:00002EF4
.text:00002EF4                 push    ebp
.text:00002EF5                 mov     ebp, esp
.text:00002EF7                 cmp     [ebp+arg_4], 0
.text:00002EFB                 jl      short loc_2F0E
.text:00002EFD                 push    2
.text:00002EFF                 mov     eax, [ebp+arg_4]
.text:00002F02                 push    eax
.text:00002F03                 mov     ecx, [ebp+arg_0]
.text:00002F06                 push    ecx
.text:00002F07                 call    ?PrintUInt32@@YGXAAVCStdOutStream@@II@Z ; PrintUInt32(CStdOutStream &,uint,uint)
.text:00002F0C                 jmp     short loc_2F1B
.text:00002F0E ; ---------------------------------------------------------------------------
.text:00002F0E
.text:00002F0E loc_2F0E:                               ; CODE XREF: PrintLibIndex(CStdOutStream &,int)+7j
.text:00002F0E                 push    offset $SG77189 ; Str
.text:00002F13                 mov     ecx, [ebp+arg_0]
.text:00002F16                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00002F1B
.text:00002F1B loc_2F1B:                               ; CODE XREF: PrintLibIndex(CStdOutStream &,int)+18j
.text:00002F1B                 push    20h ; ' '
.text:00002F1D                 mov     ecx, [ebp+arg_0]
.text:00002F20                 call    ??6CStdOutStream@@QAEAAV0@D@Z ; CStdOutStream::operator<<(char)
.text:00002F25                 cmp     ebp, esp
.text:00002F27                 call    __RTC_CheckEsp
.text:00002F2C                 pop     ebp
.text:00002F2D                 retn    8
.text:00002F2D ?PrintLibIndex@@YGXAAVCStdOutStream@@H@Z endp
.text:00002F2D
.text:00002F2D ; ---------------------------------------------------------------------------
.text:00002F30                 db 4 dup(0CCh)
.text:00002F34
.text:00002F34 ; =============== S U B R O U T I N E =======================================
.text:00002F34
.text:00002F34 ; Attributes: bp-based frame
.text:00002F34
.text:00002F34 ; int __stdcall PrintString(int, UString *, int)
.text:00002F34 ?PrintString@@YGXAAVCStdOutStream@@ABVUString@@I@Z proc near
.text:00002F34                                         ; CODE XREF: Main2(void)+669p
.text:00002F34                                         ; Main2(void)+75Cp
.text:00002F34
.text:00002F34 var_8           = dword ptr -8
.text:00002F34 var_4           = dword ptr -4
.text:00002F34 arg_0           = dword ptr  8
.text:00002F34 arg_4           = dword ptr  0Ch
.text:00002F34 arg_8           = dword ptr  10h
.text:00002F34
.text:00002F34                 push    ebp
.text:00002F35                 mov     ebp, esp
.text:00002F37                 sub     esp, 8
.text:00002F3A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002F41                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002F48                 mov     ecx, [ebp+arg_4] ; this
.text:00002F4B                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:00002F50                 mov     [ebp+var_4], eax
.text:00002F53                 mov     ecx, [ebp+arg_4]
.text:00002F56                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00002F5B                 push    eax
.text:00002F5C                 mov     ecx, [ebp+arg_0]
.text:00002F5F                 call    ??6CStdOutStream@@QAEAAV0@PB_W@Z ; CStdOutStream::operator<<(wchar_t const *)
.text:00002F64                 mov     eax, [ebp+var_4]
.text:00002F67                 mov     [ebp+var_8], eax
.text:00002F6A                 jmp     short loc_2F75
.text:00002F6C ; ---------------------------------------------------------------------------
.text:00002F6C
.text:00002F6C loc_2F6C:                               ; CODE XREF: PrintString(CStdOutStream &,UString const &,uint)+53j
.text:00002F6C                 mov     ecx, [ebp+var_8]
.text:00002F6F                 add     ecx, 1
.text:00002F72                 mov     [ebp+var_8], ecx
.text:00002F75
.text:00002F75 loc_2F75:                               ; CODE XREF: PrintString(CStdOutStream &,UString const &,uint)+36j
.text:00002F75                 mov     edx, [ebp+var_8]
.text:00002F78                 cmp     edx, [ebp+arg_8]
.text:00002F7B                 jnb     short loc_2F89
.text:00002F7D                 push    20h ; ' '
.text:00002F7F                 mov     ecx, [ebp+arg_0]
.text:00002F82                 call    ??6CStdOutStream@@QAEAAV0@D@Z ; CStdOutStream::operator<<(char)
.text:00002F87                 jmp     short loc_2F6C
.text:00002F89 ; ---------------------------------------------------------------------------
.text:00002F89
.text:00002F89 loc_2F89:                               ; CODE XREF: PrintString(CStdOutStream &,UString const &,uint)+47j
.text:00002F89                 add     esp, 8
.text:00002F8C                 cmp     ebp, esp
.text:00002F8E                 call    __RTC_CheckEsp
.text:00002F93                 mov     esp, ebp
.text:00002F95                 pop     ebp
.text:00002F96                 retn    0Ch
.text:00002F96 ?PrintString@@YGXAAVCStdOutStream@@ABVUString@@I@Z endp
.text:00002F96
.text:00002F96 ; ---------------------------------------------------------------------------
.text:00002F99                 db 0Bh dup(0CCh)
.text:00002FA4
.text:00002FA4 ; =============== S U B R O U T I N E =======================================
.text:00002FA4
.text:00002FA4 ; Attributes: bp-based frame
.text:00002FA4
.text:00002FA4 ; char __stdcall GetHex(unsigned int)
.text:00002FA4 ?GetHex@@YGDI@Z proc near               ; CODE XREF: Main2(void)+8ADp
.text:00002FA4                                         ; Main2(void)+8CCp
.text:00002FA4
.text:00002FA4 var_4           = dword ptr -4
.text:00002FA4 arg_0           = dword ptr  8
.text:00002FA4
.text:00002FA4                 push    ebp
.text:00002FA5                 mov     ebp, esp
.text:00002FA7                 push    ecx
.text:00002FA8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002FAF                 cmp     [ebp+arg_0], 0Ah
.text:00002FB3                 jnb     short loc_2FC0
.text:00002FB5                 mov     eax, [ebp+arg_0]
.text:00002FB8                 add     eax, 30h ; '0'
.text:00002FBB                 mov     [ebp+var_4], eax
.text:00002FBE                 jmp     short loc_2FC9
.text:00002FC0 ; ---------------------------------------------------------------------------
.text:00002FC0
.text:00002FC0 loc_2FC0:                               ; CODE XREF: GetHex(uint)+Fj
.text:00002FC0                 mov     ecx, [ebp+arg_0]
.text:00002FC3                 add     ecx, 37h ; '7'
.text:00002FC6                 mov     [ebp+var_4], ecx
.text:00002FC9
.text:00002FC9 loc_2FC9:                               ; CODE XREF: GetHex(uint)+1Aj
.text:00002FC9                 mov     al, byte ptr [ebp+var_4]
.text:00002FCC                 mov     esp, ebp
.text:00002FCE                 pop     ebp
.text:00002FCF                 retn    4
.text:00002FCF ?GetHex@@YGDI@Z endp
.text:00002FCF
.text:00002FCF ; ---------------------------------------------------------------------------
.text:00002FD2                 align 4
.text:00002FD4
.text:00002FD4 ; =============== S U B R O U T I N E =======================================
.text:00002FD4
.text:00002FD4 ; Attributes: bp-based frame
.text:00002FD4
.text:00002FD4 ; int __stdcall WarningsCheck(int, int, CUpdateErrorInfo *, int, char)
.text:00002FD4 ?WarningsCheck@@YGHJABVCCallbackConsoleBase@@ABUCUpdateErrorInfo@@AAVCStdOutStream@@_N@Z proc near
.text:00002FD4                                         ; CODE XREF: Main2(void)+19F7p
.text:00002FD4                                         ; Main2(void)+1B3Fp
.text:00002FD4
.text:00002FD4 var_44          = dword ptr -44h
.text:00002FD4 var_40          = dword ptr -40h
.text:00002FD4 var_3C          = dword ptr -3Ch
.text:00002FD4 var_38          = byte ptr -38h
.text:00002FD4 var_2C          = dword ptr -2Ch
.text:00002FD4 var_28          = dword ptr -28h
.text:00002FD4 var_20          = byte ptr -20h
.text:00002FD4 var_10          = dword ptr -10h
.text:00002FD4 var_C           = dword ptr -0Ch
.text:00002FD4 var_4           = dword ptr -4
.text:00002FD4 arg_0           = dword ptr  8
.text:00002FD4 arg_4           = dword ptr  0Ch
.text:00002FD4 arg_8           = dword ptr  10h
.text:00002FD4 arg_C           = dword ptr  14h
.text:00002FD4 arg_10          = byte ptr  18h
.text:00002FD4
.text:00002FD4                 push    ebp
.text:00002FD5                 mov     ebp, esp
.text:00002FD7                 push    0FFFFFFFFh
.text:00002FD9                 push    offset __ehhandler$?WarningsCheck@@YGHJABVCCallbackConsoleBase@@ABUCUpdateErrorInfo@@AAVCStdOutStream@@_N@Z
.text:00002FDE                 mov     eax, large fs:0
.text:00002FE4                 push    eax
.text:00002FE5                 sub     esp, 38h
.text:00002FE8                 push    edi
.text:00002FE9                 lea     edi, [ebp+var_44]
.text:00002FEC                 mov     ecx, 0Eh
.text:00002FF1                 mov     eax, 0CCCCCCCCh
.text:00002FF6                 rep stosd
.text:00002FF8                 mov     eax, dword ptr ds:___security_cookie
.text:00002FFD                 xor     eax, ebp
.text:00002FFF                 push    eax
.text:00003000                 lea     eax, [ebp+var_C]
.text:00003003                 mov     large fs:0, eax
.text:00003009                 mov     [ebp+var_10], 0
.text:00003010                 mov     ecx, [ebp+arg_4]
.text:00003013                 add     ecx, 0F4h ; '('
.text:00003019                 call    ?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size(void)
.text:0000301E                 test    eax, eax
.text:00003020                 jz      short loc_309E
.text:00003022                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00003027                 mov     ecx, [ebp+arg_C]
.text:0000302A                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:0000302F                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00003034                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00003039                 push    offset $SG77224 ; "Scan WARNINGS for files and folders:"
.text:0000303E                 mov     ecx, [ebp+arg_C]
.text:00003041                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00003046                 mov     ecx, eax
.text:00003048                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:0000304D                 mov     ecx, eax
.text:0000304F                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00003054                 mov     eax, [ebp+arg_C]
.text:00003057                 push    eax
.text:00003058                 mov     ecx, [ebp+arg_4]
.text:0000305B                 add     ecx, 0F4h ; '('
.text:00003061                 push    ecx
.text:00003062                 call    ?PrintWarningsPaths@@YGXABUCErrorPathCodes@@AAVCStdOutStream@@@Z ; PrintWarningsPaths(CErrorPathCodes const &,CStdOutStream &)
.text:00003067                 mov     ecx, [ebp+arg_4]
.text:0000306A                 add     ecx, 0F4h ; '('
.text:00003070                 call    ?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size(void)
.text:00003075                 push    eax
.text:00003076                 push    offset $SG77225 ; "Scan WARNINGS: "
.text:0000307B                 mov     ecx, [ebp+arg_C]
.text:0000307E                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00003083                 mov     ecx, eax
.text:00003085                 call    ??6CStdOutStream@@QAEAAV0@I@Z ; CStdOutStream::operator<<(uint)
.text:0000308A                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:0000308F                 mov     ecx, [ebp+arg_C]
.text:00003092                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00003097                 mov     [ebp+var_10], 1
.text:0000309E
.text:0000309E loc_309E:                               ; CODE XREF: WarningsCheck(long,CCallbackConsoleBase const &,CUpdateErrorInfo const &,CStdOutStream &,bool)+4Cj
.text:0000309E                 cmp     [ebp+arg_0], 0
.text:000030A2                 jnz     short loc_30B7
.text:000030A4                 mov     ecx, [ebp+arg_8] ; this
.text:000030A7                 call    ?ThereIsError@CUpdateErrorInfo@@QBE_NXZ ; CUpdateErrorInfo::ThereIsError(void)
.text:000030AC                 movzx   edx, al
.text:000030AF                 test    edx, edx
.text:000030B1                 jz      loc_31C6
.text:000030B7
.text:000030B7 loc_30B7:                               ; CODE XREF: WarningsCheck(long,CCallbackConsoleBase const &,CUpdateErrorInfo const &,CStdOutStream &,bool)+CEj
.text:000030B7                 lea     ecx, [ebp+var_20]
.text:000030BA                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:000030BF                 mov     [ebp+var_4], 0
.text:000030C6                 mov     ecx, [ebp+arg_8]
.text:000030C9                 add     ecx, 4          ; this
.text:000030CC                 call    ?IsEmpty@AString@@QBE_NXZ ; AString::IsEmpty(void)
.text:000030D1                 movzx   eax, al
.text:000030D4                 test    eax, eax
.text:000030D6                 jnz     short loc_30F4
.text:000030D8                 mov     ecx, [ebp+arg_8]
.text:000030DB                 add     ecx, 4
.text:000030DE                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:000030E3                 push    eax             ; char *
.text:000030E4                 lea     ecx, [ebp+var_20] ; this
.text:000030E7                 call    ?AddAscii@UString@@QAEXPBD@Z ; UString::AddAscii(char const *)
.text:000030EC                 lea     ecx, [ebp+var_20] ; this
.text:000030EF                 call    ?Add_LF@UString@@QAEXXZ ; UString::Add_LF(void)
.text:000030F4
.text:000030F4 loc_30F4:                               ; CODE XREF: WarningsCheck(long,CCallbackConsoleBase const &,CUpdateErrorInfo const &,CStdOutStream &,bool)+102j
.text:000030F4                 mov     [ebp+var_28], 0
.text:000030FB                 jmp     short loc_3106
.text:000030FD ; ---------------------------------------------------------------------------
.text:000030FD
.text:000030FD loc_30FD:                               ; CODE XREF: WarningsCheck(long,CCallbackConsoleBase const &,CUpdateErrorInfo const &,CStdOutStream &,bool)+162j
.text:000030FD                 mov     ecx, [ebp+var_28]
.text:00003100                 add     ecx, 1
.text:00003103                 mov     [ebp+var_28], ecx
.text:00003106
.text:00003106 loc_3106:                               ; CODE XREF: WarningsCheck(long,CCallbackConsoleBase const &,CUpdateErrorInfo const &,CStdOutStream &,bool)+127j
.text:00003106                 mov     ecx, [ebp+arg_8]
.text:00003109                 add     ecx, 10h
.text:0000310C                 call    ?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size(void)
.text:00003111                 cmp     [ebp+var_28], eax
.text:00003114                 jnb     short loc_3138
.text:00003116                 mov     edx, [ebp+var_28]
.text:00003119                 push    edx
.text:0000311A                 mov     ecx, [ebp+arg_8]
.text:0000311D                 add     ecx, 10h
.text:00003120                 call    ??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[](uint)
.text:00003125                 push    eax
.text:00003126                 lea     ecx, [ebp+var_20]
.text:00003129                 call    ??YUString@@QAEAAV0@ABV0@@Z ; UString::operator+=(UString const &)
.text:0000312E                 lea     ecx, [ebp+var_20] ; this
.text:00003131                 call    ?Add_LF@UString@@QAEXXZ ; UString::Add_LF(void)
.text:00003136                 jmp     short loc_30FD
.text:00003138 ; ---------------------------------------------------------------------------
.text:00003138
.text:00003138 loc_3138:                               ; CODE XREF: WarningsCheck(long,CCallbackConsoleBase const &,CUpdateErrorInfo const &,CStdOutStream &,bool)+140j
.text:00003138                 mov     eax, [ebp+arg_8]
.text:0000313B                 cmp     dword ptr [eax], 0
.text:0000313E                 jz      short loc_317C
.text:00003140                 mov     ecx, [ebp+arg_8]
.text:00003143                 mov     edx, [ecx]
.text:00003145                 push    edx
.text:00003146                 lea     eax, [ebp+var_38]
.text:00003149                 push    eax
.text:0000314A                 call    ?MyFormatMessage@NError@NWindows@@YG?AVUString@@K@Z ; NWindows::NError::MyFormatMessage(ulong)
.text:0000314F                 mov     [ebp+var_40], eax
.text:00003152                 mov     ecx, [ebp+var_40]
.text:00003155                 mov     [ebp+var_44], ecx
.text:00003158                 mov     byte ptr [ebp+var_4], 1
.text:0000315C                 mov     edx, [ebp+var_44]
.text:0000315F                 push    edx
.text:00003160                 lea     ecx, [ebp+var_20]
.text:00003163                 call    ??YUString@@QAEAAV0@ABV0@@Z ; UString::operator+=(UString const &)
.text:00003168                 mov     byte ptr [ebp+var_4], 0
.text:0000316C                 lea     ecx, [ebp+var_38] ; this
.text:0000316F                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00003174                 lea     ecx, [ebp+var_20] ; this
.text:00003177                 call    ?Add_LF@UString@@QAEXXZ ; UString::Add_LF(void)
.text:0000317C
.text:0000317C loc_317C:                               ; CODE XREF: WarningsCheck(long,CCallbackConsoleBase const &,CUpdateErrorInfo const &,CStdOutStream &,bool)+16Aj
.text:0000317C                 lea     ecx, [ebp+var_20] ; this
.text:0000317F                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:00003184                 movzx   eax, al
.text:00003187                 test    eax, eax
.text:00003189                 jnz     short loc_31A8
.text:0000318B                 lea     ecx, [ebp+var_20]
.text:0000318E                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00003193                 push    eax
.text:00003194                 push    offset $SG77238 ; "\nError:\n"
.text:00003199                 mov     ecx, [ebp+arg_C]
.text:0000319C                 call    ??6CStdOutStream@@QAEAAV0@PB_W@Z ; CStdOutStream::operator<<(wchar_t const *)
.text:000031A1                 mov     ecx, eax
.text:000031A3                 call    ??6CStdOutStream@@QAEAAV0@PB_W@Z ; CStdOutStream::operator<<(wchar_t const *)
.text:000031A8
.text:000031A8 loc_31A8:                               ; CODE XREF: WarningsCheck(long,CCallbackConsoleBase const &,CUpdateErrorInfo const &,CStdOutStream &,bool)+1B5j
.text:000031A8                 mov     [ebp+var_3C], 2
.text:000031AF                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000031B6                 lea     ecx, [ebp+var_20] ; this
.text:000031B9                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000031BE                 mov     eax, [ebp+var_3C]
.text:000031C1                 jmp     loc_32A7
.text:000031C6 ; ---------------------------------------------------------------------------
.text:000031C6
.text:000031C6 loc_31C6:                               ; CODE XREF: WarningsCheck(long,CCallbackConsoleBase const &,CUpdateErrorInfo const &,CStdOutStream &,bool)+DDj
.text:000031C6                 mov     ecx, [ebp+arg_4]
.text:000031C9                 add     ecx, 0DCh ; '_'
.text:000031CF                 call    ?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size(void)
.text:000031D4                 mov     [ebp+var_2C], eax
.text:000031D7                 cmp     [ebp+var_2C], 0
.text:000031DB                 jnz     short loc_3217
.text:000031DD                 movzx   ecx, [ebp+arg_10]
.text:000031E1                 test    ecx, ecx
.text:000031E3                 jz      short loc_3212
.text:000031E5                 mov     ecx, [ebp+arg_4]
.text:000031E8                 add     ecx, 0F4h ; '('
.text:000031EE                 call    ?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size(void)
.text:000031F3                 test    eax, eax
.text:000031F5                 jnz     short loc_3212
.text:000031F7                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:000031FC                 mov     edx, ds:_kEverythingIsOk
.text:00003202                 push    edx             ; Str
.text:00003203                 mov     ecx, [ebp+arg_C]
.text:00003206                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:0000320B                 mov     ecx, eax
.text:0000320D                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00003212
.text:00003212 loc_3212:                               ; CODE XREF: WarningsCheck(long,CCallbackConsoleBase const &,CUpdateErrorInfo const &,CStdOutStream &,bool)+20Fj
.text:00003212                                         ; WarningsCheck(long,CCallbackConsoleBase const &,CUpdateErrorInfo const &,CStdOutStream &,bool)+221j
.text:00003212                 jmp     loc_32A4
.text:00003217 ; ---------------------------------------------------------------------------
.text:00003217
.text:00003217 loc_3217:                               ; CODE XREF: WarningsCheck(long,CCallbackConsoleBase const &,CUpdateErrorInfo const &,CStdOutStream &,bool)+207j
.text:00003217                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:0000321C                 mov     ecx, [ebp+arg_C]
.text:0000321F                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00003224                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00003229                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:0000322E                 push    offset $SG77245 ; "WARNINGS for files:"
.text:00003233                 mov     ecx, [ebp+arg_C]
.text:00003236                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:0000323B                 mov     ecx, eax
.text:0000323D                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00003242                 mov     ecx, eax
.text:00003244                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00003249                 mov     eax, [ebp+arg_C]
.text:0000324C                 push    eax
.text:0000324D                 mov     ecx, [ebp+arg_4]
.text:00003250                 add     ecx, 0DCh ; '_'
.text:00003256                 push    ecx
.text:00003257                 call    ?PrintWarningsPaths@@YGXABUCErrorPathCodes@@AAVCStdOutStream@@@Z ; PrintWarningsPaths(CErrorPathCodes const &,CStdOutStream &)
.text:0000325C                 push    offset $SG77247 ; " file"
.text:00003261                 mov     edx, [ebp+var_2C]
.text:00003264                 push    edx
.text:00003265                 push    offset $SG77246 ; "WARNING: Cannot open "
.text:0000326A                 mov     ecx, [ebp+arg_C]
.text:0000326D                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00003272                 mov     ecx, eax
.text:00003274                 call    ??6CStdOutStream@@QAEAAV0@I@Z ; CStdOutStream::operator<<(uint)
.text:00003279                 mov     ecx, eax
.text:0000327B                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00003280                 cmp     [ebp+var_2C], 1
.text:00003284                 jbe     short loc_3290
.text:00003286                 push    73h ; 's'
.text:00003288                 mov     ecx, [ebp+arg_C]
.text:0000328B                 call    ??6CStdOutStream@@QAEAAV0@D@Z ; CStdOutStream::operator<<(char)
.text:00003290
.text:00003290 loc_3290:                               ; CODE XREF: WarningsCheck(long,CCallbackConsoleBase const &,CUpdateErrorInfo const &,CStdOutStream &,bool)+2B0j
.text:00003290                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00003295                 mov     ecx, [ebp+arg_C]
.text:00003298                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:0000329D                 mov     [ebp+var_10], 1
.text:000032A4
.text:000032A4 loc_32A4:                               ; CODE XREF: WarningsCheck(long,CCallbackConsoleBase const &,CUpdateErrorInfo const &,CStdOutStream &,bool):loc_3212j
.text:000032A4                 mov     eax, [ebp+var_10]
.text:000032A7
.text:000032A7 loc_32A7:                               ; CODE XREF: WarningsCheck(long,CCallbackConsoleBase const &,CUpdateErrorInfo const &,CStdOutStream &,bool)+1EDj
.text:000032A7                 push    edx
.text:000032A8                 mov     ecx, ebp
.text:000032AA                 push    eax
.text:000032AB                 lea     edx, $LN22
.text:000032B1                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000032B6                 pop     eax
.text:000032B7                 pop     edx
.text:000032B8                 mov     ecx, [ebp+var_C]
.text:000032BB                 mov     large fs:0, ecx
.text:000032C2                 pop     ecx
.text:000032C3                 pop     edi
.text:000032C4                 add     esp, 44h
.text:000032C7                 cmp     ebp, esp
.text:000032C9                 call    __RTC_CheckEsp
.text:000032CE                 mov     esp, ebp
.text:000032D0                 pop     ebp
.text:000032D1                 retn    14h
.text:000032D1 ?WarningsCheck@@YGHJABVCCallbackConsoleBase@@ABUCUpdateErrorInfo@@AAVCStdOutStream@@_N@Z endp
.text:000032D1
.text:000032D1 ; ---------------------------------------------------------------------------
.text:000032D4 $LN22           dd 1                    ; DATA XREF: WarningsCheck(long,CCallbackConsoleBase const &,CUpdateErrorInfo const &,CStdOutStream &,bool)+2D7o
.text:000032D8                 dd offset $LN21
.text:000032DC $LN21           dd 0FFFFFFE0h, 0Ch      ; DATA XREF: .text:000032D8o
.text:000032E4                 dd offset $LN19         ; "message"
.text:000032E8 $LN19           db 'message',0          ; DATA XREF: .text:000032E4o
.text:000032F0                 db 4 dup(0CCh)
.text:000032F4
.text:000032F4 ; =============== S U B R O U T I N E =======================================
.text:000032F4
.text:000032F4 ; Attributes: bp-based frame
.text:000032F4
.text:000032F4 ; void __stdcall PrintWarningsPaths(struct CErrorPathCodes const &, class CStdOutStream &)
.text:000032F4 ?PrintWarningsPaths@@YGXABUCErrorPathCodes@@AAVCStdOutStream@@@Z proc near
.text:000032F4                                         ; CODE XREF: WarningsCheck(long,CCallbackConsoleBase const &,CUpdateErrorInfo const &,CStdOutStream &,bool)+8Ep
.text:000032F4                                         ; WarningsCheck(long,CCallbackConsoleBase const &,CUpdateErrorInfo const &,CStdOutStream &,bool)+283p
.text:000032F4
.text:000032F4 var_24          = dword ptr -24h
.text:000032F4 var_20          = dword ptr -20h
.text:000032F4 var_1C          = dword ptr -1Ch
.text:000032F4 var_18          = dword ptr -18h
.text:000032F4 var_14          = dword ptr -14h
.text:000032F4 var_10          = dword ptr -10h
.text:000032F4 var_C           = dword ptr -0Ch
.text:000032F4 var_4           = dword ptr -4
.text:000032F4 arg_0           = dword ptr  8
.text:000032F4 arg_4           = dword ptr  0Ch
.text:000032F4
.text:000032F4                 push    ebp
.text:000032F5                 mov     ebp, esp
.text:000032F7                 push    0FFFFFFFFh
.text:000032F9                 push    offset __ehhandler$?PrintWarningsPaths@@YGXABUCErrorPathCodes@@AAVCStdOutStream@@@Z
.text:000032FE                 mov     eax, large fs:0
.text:00003304                 push    eax
.text:00003305                 sub     esp, 18h
.text:00003308                 mov     eax, 0CCCCCCCCh
.text:0000330D                 mov     [ebp+var_24], eax
.text:00003310                 mov     [ebp+var_20], eax
.text:00003313                 mov     [ebp+var_1C], eax
.text:00003316                 mov     [ebp+var_18], eax
.text:00003319                 mov     [ebp+var_14], eax
.text:0000331C                 mov     [ebp+var_10], eax
.text:0000331F                 mov     eax, dword ptr ds:___security_cookie
.text:00003324                 xor     eax, ebp
.text:00003326                 push    eax
.text:00003327                 lea     eax, [ebp+var_C]
.text:0000332A                 mov     large fs:0, eax
.text:00003330                 mov     [ebp+var_10], 0
.text:00003337                 jmp     short loc_3342
.text:00003339 ; ---------------------------------------------------------------------------
.text:00003339
.text:00003339 loc_3339:                               ; CODE XREF: PrintWarningsPaths(CErrorPathCodes const &,CStdOutStream &)+DEj
.text:00003339                 mov     eax, [ebp+var_10]
.text:0000333C                 add     eax, 1
.text:0000333F                 mov     [ebp+var_10], eax
.text:00003342
.text:00003342 loc_3342:                               ; CODE XREF: PrintWarningsPaths(CErrorPathCodes const &,CStdOutStream &)+43j
.text:00003342                 mov     ecx, [ebp+arg_0]
.text:00003345                 call    ?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size(void)
.text:0000334A                 cmp     [ebp+var_10], eax
.text:0000334D                 jnb     loc_33D7
.text:00003353                 push    offset $SG77212 ; " : "
.text:00003358                 mov     ecx, [ebp+var_10]
.text:0000335B                 push    ecx
.text:0000335C                 mov     ecx, [ebp+arg_0]
.text:0000335F                 call    ??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[](uint)
.text:00003364                 mov     ecx, eax
.text:00003366                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:0000336B                 push    eax
.text:0000336C                 mov     ecx, [ebp+arg_4]
.text:0000336F                 call    ??6CStdOutStream@@QAEAAV0@PB_W@Z ; CStdOutStream::operator<<(wchar_t const *)
.text:00003374                 mov     ecx, eax
.text:00003376                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:0000337B                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00003380                 mov     edx, [ebp+var_10]
.text:00003383                 push    edx
.text:00003384                 mov     ecx, [ebp+arg_0]
.text:00003387                 add     ecx, 0Ch
.text:0000338A                 call    ??A?$CRecordVector@K@@QBEABKI@Z ; CRecordVector<ulong>::operator[](uint)
.text:0000338F                 mov     eax, [eax]
.text:00003391                 push    eax
.text:00003392                 lea     ecx, [ebp+var_1C]
.text:00003395                 push    ecx
.text:00003396                 call    ?MyFormatMessage@NError@NWindows@@YG?AVUString@@K@Z ; NWindows::NError::MyFormatMessage(ulong)
.text:0000339B                 mov     [ebp+var_20], eax
.text:0000339E                 mov     edx, [ebp+var_20]
.text:000033A1                 mov     [ebp+var_24], edx
.text:000033A4                 mov     [ebp+var_4], 0
.text:000033AB                 mov     ecx, [ebp+var_24]
.text:000033AE                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:000033B3                 push    eax
.text:000033B4                 mov     ecx, [ebp+arg_4]
.text:000033B7                 call    ??6CStdOutStream@@QAEAAV0@PB_W@Z ; CStdOutStream::operator<<(wchar_t const *)
.text:000033BC                 mov     ecx, eax
.text:000033BE                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:000033C3                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000033CA                 lea     ecx, [ebp+var_1C] ; this
.text:000033CD                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000033D2                 jmp     loc_3339
.text:000033D7 ; ---------------------------------------------------------------------------
.text:000033D7
.text:000033D7 loc_33D7:                               ; CODE XREF: PrintWarningsPaths(CErrorPathCodes const &,CStdOutStream &)+59j
.text:000033D7                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:000033DC                 push    offset $SG77214 ; "----------------"
.text:000033E1                 mov     ecx, [ebp+arg_4]
.text:000033E4                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:000033E9                 mov     ecx, eax
.text:000033EB                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:000033F0                 mov     ecx, [ebp+var_C]
.text:000033F3                 mov     large fs:0, ecx
.text:000033FA                 pop     ecx
.text:000033FB                 add     esp, 24h
.text:000033FE                 cmp     ebp, esp
.text:00003400                 call    __RTC_CheckEsp
.text:00003405                 mov     esp, ebp
.text:00003407                 pop     ebp
.text:00003408                 retn    8
.text:00003408 ?PrintWarningsPaths@@YGXABUCErrorPathCodes@@AAVCStdOutStream@@@Z endp
.text:00003408
.text:00003408 ; ---------------------------------------------------------------------------
.text:0000340B                 db 9 dup(0CCh)
.text:00003414
.text:00003414 ; =============== S U B R O U T I N E =======================================
.text:00003414
.text:00003414 ; Attributes: bp-based frame
.text:00003414
.text:00003414 ; void __stdcall ThrowException_if_Error(long)
.text:00003414 ?ThrowException_if_Error@@YGXJ@Z proc near ; CODE XREF: Main2(void)+367p
.text:00003414                                         ; Main2(void)+F31p ...
.text:00003414
.text:00003414 var_8           = dword ptr -8
.text:00003414 var_4           = dword ptr -4
.text:00003414 arg_0           = dword ptr  8
.text:00003414
.text:00003414                 push    ebp
.text:00003415                 mov     ebp, esp
.text:00003417                 sub     esp, 8
.text:0000341A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00003421                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003428                 cmp     [ebp+arg_0], 0
.text:0000342C                 jz      short loc_344D
.text:0000342E                 mov     eax, [ebp+arg_0]
.text:00003431                 push    eax             ; __int32
.text:00003432                 lea     ecx, [ebp+var_8] ; this
.text:00003435                 call    ??0CSystemException@@QAE@J@Z ; CSystemException::CSystemException(long)
.text:0000343A                 mov     ecx, [eax]
.text:0000343C                 mov     [ebp+var_4], ecx
.text:0000343F                 push    offset __TI1?AUCSystemException@@
.text:00003444                 lea     edx, [ebp+var_4]
.text:00003447                 push    edx
.text:00003448                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:0000344D ; ---------------------------------------------------------------------------
.text:0000344D
.text:0000344D loc_344D:                               ; CODE XREF: ThrowException_if_Error(long)+18j
.text:0000344D                 add     esp, 8
.text:00003450                 cmp     ebp, esp
.text:00003452                 call    __RTC_CheckEsp
.text:00003457                 mov     esp, ebp
.text:00003459                 pop     ebp
.text:0000345A                 retn    4
.text:0000345A ?ThrowException_if_Error@@YGXJ@Z endp
.text:0000345A
.text:0000345A ; ---------------------------------------------------------------------------
.text:0000345D                 db 7 dup(0CCh)
.text:00003464
.text:00003464 ; =============== S U B R O U T I N E =======================================
.text:00003464
.text:00003464 ; Attributes: bp-based frame
.text:00003464
.text:00003464 ; void __stdcall PrintStat(void)
.text:00003464 ?PrintStat@@YGXXZ proc near             ; CODE XREF: Main2(void)+1B9Bp
.text:00003464
.text:00003464 var_B8          = dword ptr -0B8h
.text:00003464 var_B4          = dword ptr -0B4h
.text:00003464 var_B0          = dword ptr -0B0h
.text:00003464 var_AC          = dword ptr -0ACh
.text:00003464 var_A8          = dword ptr -0A8h
.text:00003464 var_A4          = dword ptr -0A4h
.text:00003464 var_A0          = dword ptr -0A0h
.text:00003464 var_9C          = dword ptr -9Ch
.text:00003464 var_98          = dword ptr -98h
.text:00003464 var_94          = dword ptr -94h
.text:00003464 hModule         = dword ptr -90h
.text:00003464 var_8C          = dword ptr -8Ch
.text:00003464 var_88          = dword ptr -88h
.text:00003464 Dst             = byte ptr -80h
.text:00003464 var_78          = dword ptr -78h
.text:00003464 var_5C          = dword ptr -5Ch
.text:00003464 ProcName        = byte ptr -50h
.text:00003464 UserTime        = _FILETIME ptr -40h
.text:00003464 KernelTime      = _FILETIME ptr -30h
.text:00003464 ExitTime        = _FILETIME ptr -20h
.text:00003464 CreationTime    = _FILETIME ptr -10h
.text:00003464 var_4           = dword ptr -4
.text:00003464
.text:00003464                 push    ebp
.text:00003465                 mov     ebp, esp
.text:00003467                 sub     esp, 0B8h
.text:0000346D                 push    esi
.text:0000346E                 push    edi             ; struct _FILETIME *
.text:0000346F                 lea     edi, [ebp+var_B8]
.text:00003475                 mov     ecx, 2Eh ; '.'
.text:0000347A                 mov     eax, 0CCCCCCCCh
.text:0000347F                 rep stosd
.text:00003481                 mov     eax, dword ptr ds:___security_cookie
.text:00003486                 xor     eax, ebp
.text:00003488                 mov     [ebp+var_4], eax
.text:0000348B                 mov     esi, esp
.text:0000348D                 lea     eax, [ebp+UserTime]
.text:00003490                 push    eax             ; lpUserTime
.text:00003491                 lea     ecx, [ebp+KernelTime]
.text:00003494                 push    ecx             ; lpKernelTime
.text:00003495                 lea     edx, [ebp+ExitTime]
.text:00003498                 push    edx             ; lpExitTime
.text:00003499                 lea     eax, [ebp+CreationTime]
.text:0000349C                 push    eax             ; lpCreationTime
.text:0000349D                 mov     edi, esp
.text:0000349F                 call    dword ptr ds:__imp__GetCurrentProcess@0 ; GetCurrentProcess()
.text:000034A5                 cmp     edi, esp
.text:000034A7                 call    __RTC_CheckEsp
.text:000034AC                 push    eax             ; hProcess
.text:000034AD                 call    dword ptr ds:__imp__GetProcessTimes@20 ; GetProcessTimes(x,x,x,x,x)
.text:000034B3                 cmp     esi, esp
.text:000034B5                 call    __RTC_CheckEsp
.text:000034BA                 test    eax, eax
.text:000034BC                 jnz     short loc_34C3
.text:000034BE                 jmp     loc_36F6
.text:000034C3 ; ---------------------------------------------------------------------------
.text:000034C3
.text:000034C3 loc_34C3:                               ; CODE XREF: PrintStat(void)+58j
.text:000034C3                 lea     ecx, [ebp+ProcName]
.text:000034C6                 push    ecx             ; this
.text:000034C7                 call    ?GetCurUtcFileTime@NTime@NWindows@@YGXAAU_FILETIME@@@Z ; NWindows::NTime::GetCurUtcFileTime(_FILETIME &)
.text:000034CC                 push    28h ; '('       ; Size
.text:000034CE                 push    0               ; Val
.text:000034D0                 lea     edx, [ebp+Dst]
.text:000034D3                 push    edx             ; Dst
.text:000034D4                 call    _memset
.text:000034D9                 add     esp, 0Ch
.text:000034DC                 mov     [ebp+var_88], 0
.text:000034E6                 mov     esi, esp
.text:000034E8                 push    offset $SG77315 ; "K32GetProcessMemoryInfo"
.text:000034ED                 mov     edi, esp
.text:000034EF                 push    offset $SG77316 ; "kernel32.dll"
.text:000034F4                 call    dword ptr ds:__imp__GetModuleHandleW@4 ; GetModuleHandleW(x)
.text:000034FA                 cmp     edi, esp
.text:000034FC                 call    __RTC_CheckEsp
.text:00003501                 push    eax             ; hModule
.text:00003502                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:00003508                 cmp     esi, esp
.text:0000350A                 call    __RTC_CheckEsp
.text:0000350F                 mov     [ebp+var_8C], eax
.text:00003515                 cmp     [ebp+var_8C], 0
.text:0000351C                 jnz     short loc_3562
.text:0000351E                 mov     esi, esp
.text:00003520                 push    offset $SG77319 ; "Psapi.dll"
.text:00003525                 call    dword ptr ds:__imp__LoadLibraryW@4 ; LoadLibraryW(x)
.text:0000352B                 cmp     esi, esp
.text:0000352D                 call    __RTC_CheckEsp
.text:00003532                 mov     [ebp+hModule], eax
.text:00003538                 cmp     [ebp+hModule], 0
.text:0000353F                 jz      short loc_3562
.text:00003541                 mov     esi, esp
.text:00003543                 push    offset $SG77322 ; "GetProcessMemoryInfo"
.text:00003548                 mov     eax, [ebp+hModule]
.text:0000354E                 push    eax             ; hModule
.text:0000354F                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:00003555                 cmp     esi, esp
.text:00003557                 call    __RTC_CheckEsp
.text:0000355C                 mov     [ebp+var_8C], eax
.text:00003562
.text:00003562 loc_3562:                               ; CODE XREF: PrintStat(void)+B8j
.text:00003562                                         ; PrintStat(void)+DBj
.text:00003562                 cmp     [ebp+var_8C], 0
.text:00003569                 jz      short loc_3596
.text:0000356B                 mov     esi, esp
.text:0000356D                 push    28h ; '('
.text:0000356F                 lea     ecx, [ebp+Dst]
.text:00003572                 push    ecx
.text:00003573                 mov     edi, esp
.text:00003575                 call    dword ptr ds:__imp__GetCurrentProcess@0 ; GetCurrentProcess()
.text:0000357B                 cmp     edi, esp
.text:0000357D                 call    __RTC_CheckEsp
.text:00003582                 push    eax
.text:00003583                 call    [ebp+var_8C]
.text:00003589                 cmp     esi, esp
.text:0000358B                 call    __RTC_CheckEsp
.text:00003590                 mov     [ebp+var_88], eax
.text:00003596
.text:00003596 loc_3596:                               ; CODE XREF: PrintStat(void)+105j
.text:00003596                 lea     edx, [ebp+ProcName]
.text:00003599                 push    edx
.text:0000359A                 call    ?GetTime64@@YG_KABU_FILETIME@@@Z ; GetTime64(_FILETIME const &)
.text:0000359F                 mov     [ebp+var_98], eax
.text:000035A5                 mov     [ebp+var_94], edx
.text:000035AB                 lea     eax, [ebp+CreationTime]
.text:000035AE                 push    eax
.text:000035AF                 call    ?GetTime64@@YG_KABU_FILETIME@@@Z ; GetTime64(_FILETIME const &)
.text:000035B4                 mov     [ebp+var_A0], eax
.text:000035BA                 mov     [ebp+var_9C], edx
.text:000035C0                 lea     ecx, [ebp+KernelTime]
.text:000035C3                 push    ecx
.text:000035C4                 call    ?GetTime64@@YG_KABU_FILETIME@@@Z ; GetTime64(_FILETIME const &)
.text:000035C9                 mov     [ebp+var_A8], eax
.text:000035CF                 mov     [ebp+var_A4], edx
.text:000035D5                 lea     edx, [ebp+UserTime]
.text:000035D8                 push    edx
.text:000035D9                 call    ?GetTime64@@YG_KABU_FILETIME@@@Z ; GetTime64(_FILETIME const &)
.text:000035DE                 mov     [ebp+var_B0], eax
.text:000035E4                 mov     [ebp+var_AC], edx
.text:000035EA                 mov     eax, [ebp+var_98]
.text:000035F0                 sub     eax, [ebp+var_A0]
.text:000035F6                 mov     ecx, [ebp+var_94]
.text:000035FC                 sbb     ecx, [ebp+var_9C]
.text:00003602                 mov     [ebp+var_B8], eax
.text:00003608                 mov     [ebp+var_B4], ecx
.text:0000360E                 mov     edx, [ebp+var_B4]
.text:00003614                 push    edx             ; int
.text:00003615                 mov     eax, [ebp+var_B8]
.text:0000361B                 push    eax             ; int
.text:0000361C                 mov     ecx, [ebp+var_A4]
.text:00003622                 push    ecx             ; int
.text:00003623                 mov     edx, [ebp+var_A8]
.text:00003629                 push    edx             ; int
.text:0000362A                 push    offset $SG77329 ; "Kernel "
.text:0000362F                 call    ?PrintTime@@YGXPBD_K1@Z ; PrintTime(char const *,unsigned __int64,unsigned __int64)
.text:00003634                 mov     eax, [ebp+var_B4]
.text:0000363A                 push    eax             ; int
.text:0000363B                 mov     ecx, [ebp+var_B8]
.text:00003641                 push    ecx             ; int
.text:00003642                 mov     edx, [ebp+var_AC]
.text:00003648                 push    edx             ; int
.text:00003649                 mov     eax, [ebp+var_B0]
.text:0000364F                 push    eax             ; int
.text:00003650                 push    offset $SG77330 ; "User   "
.text:00003655                 call    ?PrintTime@@YGXPBD_K1@Z ; PrintTime(char const *,unsigned __int64,unsigned __int64)
.text:0000365A                 mov     ecx, [ebp+var_B4]
.text:00003660                 push    ecx             ; int
.text:00003661                 mov     edx, [ebp+var_B8]
.text:00003667                 push    edx             ; int
.text:00003668                 mov     eax, [ebp+var_A8]
.text:0000366E                 add     eax, [ebp+var_B0]
.text:00003674                 mov     ecx, [ebp+var_A4]
.text:0000367A                 adc     ecx, [ebp+var_AC]
.text:00003680                 push    ecx             ; int
.text:00003681                 push    eax             ; int
.text:00003682                 push    offset $SG77331 ; "Process"
.text:00003687                 call    ?PrintTime@@YGXPBD_K1@Z ; PrintTime(char const *,unsigned __int64,unsigned __int64)
.text:0000368C                 cmp     [ebp+var_88], 0
.text:00003693                 jz      short loc_36A6
.text:00003695                 mov     edx, [ebp+var_5C]
.text:00003698                 xor     eax, eax
.text:0000369A                 push    eax             ; int
.text:0000369B                 push    edx             ; int
.text:0000369C                 push    offset $SG77333 ; "Virtual "
.text:000036A1                 call    ?PrintMemUsage@@YGXPBD_K@Z ; PrintMemUsage(char const *,unsigned __int64)
.text:000036A6
.text:000036A6 loc_36A6:                               ; CODE XREF: PrintStat(void)+22Fj
.text:000036A6                 mov     ecx, [ebp+var_B4]
.text:000036AC                 push    ecx             ; int
.text:000036AD                 mov     edx, [ebp+var_B8]
.text:000036B3                 push    edx             ; int
.text:000036B4                 mov     eax, [ebp+var_B4]
.text:000036BA                 push    eax             ; int
.text:000036BB                 mov     ecx, [ebp+var_B8]
.text:000036C1                 push    ecx             ; int
.text:000036C2                 push    offset $SG77334 ; "Global "
.text:000036C7                 call    ?PrintTime@@YGXPBD_K1@Z ; PrintTime(char const *,unsigned __int64,unsigned __int64)
.text:000036CC                 cmp     [ebp+var_88], 0
.text:000036D3                 jz      short loc_36E6
.text:000036D5                 mov     edx, [ebp+var_78]
.text:000036D8                 xor     eax, eax
.text:000036DA                 push    eax             ; int
.text:000036DB                 push    edx             ; int
.text:000036DC                 push    offset $SG77336 ; "Physical"
.text:000036E1                 call    ?PrintMemUsage@@YGXPBD_K@Z ; PrintMemUsage(char const *,unsigned __int64)
.text:000036E6
.text:000036E6 loc_36E6:                               ; CODE XREF: PrintStat(void)+26Fj
.text:000036E6                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:000036EB                 mov     ecx, dword ptr ds:?g_StdStream@@3PAVCStdOutStream@@A ; CStdOutStream * g_StdStream
.text:000036F1                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:000036F6
.text:000036F6 loc_36F6:                               ; CODE XREF: PrintStat(void)+5Aj
.text:000036F6                 push    edx
.text:000036F7                 mov     ecx, ebp
.text:000036F9                 push    eax
.text:000036FA                 lea     edx, $LN16
.text:00003700                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00003705                 pop     eax
.text:00003706                 pop     edx
.text:00003707                 pop     edi
.text:00003708                 pop     esi
.text:00003709                 mov     ecx, [ebp+var_4]
.text:0000370C                 xor     ecx, ebp
.text:0000370E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00003713                 add     esp, 0B8h
.text:00003719                 cmp     ebp, esp
.text:0000371B                 call    __RTC_CheckEsp
.text:00003720                 mov     esp, ebp
.text:00003722                 pop     ebp
.text:00003723                 retn
.text:00003723 ?PrintStat@@YGXXZ endp
.text:00003723
.text:00003723 ; ---------------------------------------------------------------------------
.text:00003724 $LN16           dd 6                    ; DATA XREF: PrintStat(void)+296o
.text:00003728                 dd offset $LN15
.text:0000372C $LN15           dd 0FFFFFFF0h, 8        ; DATA XREF: .text:00003728o
.text:00003734                 dd offset $LN9          ; "creationTimeFT"
.text:00003738                 dd 0FFFFFFE0h, 8
.text:00003740                 dd offset $LN10         ; "exitTimeFT"
.text:00003744                 dd 0FFFFFFD0h, 8
.text:0000374C                 dd offset $LN11         ; "kernelTimeFT"
.text:00003750                 dd 0FFFFFFC0h, 8
.text:00003758                 dd offset $LN12         ; "userTimeFT"
.text:0000375C                 dd 0FFFFFFB0h, 8
.text:00003764                 dd offset $LN13         ; "curTimeFT"
.text:00003768 ; ---------------------------------------------------------------------------
.text:00003768                 cmp     bh, 0FFh
.text:0000376B                 jmp     fword ptr [eax]
.text:0000376B ; ---------------------------------------------------------------------------
.text:0000376D                 align 10h
.text:00003770                 dd offset $LN14
.text:00003774 $LN14           db 6Dh, 0               ; DATA XREF: .text:00003770o
.text:00003776 $LN13           db 'curTimeFT',0        ; DATA XREF: .text:00003764o
.text:00003780 $LN12           db 'userTimeFT',0       ; DATA XREF: .text:00003758o
.text:0000378B $LN11           db 'kernelTimeFT',0     ; DATA XREF: .text:0000374Co
.text:00003798 $LN10           db 'exitTimeFT',0       ; DATA XREF: .text:00003740o
.text:000037A3 $LN9            db 'creationTimeFT',0   ; DATA XREF: .text:00003734o
.text:000037B2                 align 4
.text:000037B4
.text:000037B4 ; =============== S U B R O U T I N E =======================================
.text:000037B4
.text:000037B4 ; Attributes: bp-based frame
.text:000037B4
.text:000037B4 ; int __stdcall PrintTime(char *Str, int, int, int, int)
.text:000037B4 ?PrintTime@@YGXPBD_K1@Z proc near       ; CODE XREF: PrintStat(void)+1CBp
.text:000037B4                                         ; PrintStat(void)+1F1p ...
.text:000037B4
.text:000037B4 var_18          = dword ptr -18h
.text:000037B4 var_14          = dword ptr -14h
.text:000037B4 var_10          = dword ptr -10h
.text:000037B4 var_C           = dword ptr -0Ch
.text:000037B4 var_8           = dword ptr -8
.text:000037B4 var_4           = dword ptr -4
.text:000037B4 Str             = dword ptr  8
.text:000037B4 arg_4           = dword ptr  0Ch
.text:000037B4 arg_8           = dword ptr  10h
.text:000037B4 arg_C           = dword ptr  14h
.text:000037B4 arg_10          = dword ptr  18h
.text:000037B4
.text:000037B4                 push    ebp
.text:000037B5                 mov     ebp, esp
.text:000037B7                 sub     esp, 18h
.text:000037BA                 mov     eax, 0CCCCCCCCh
.text:000037BF                 mov     [ebp+var_18], eax
.text:000037C2                 mov     [ebp+var_14], eax
.text:000037C5                 mov     [ebp+var_10], eax
.text:000037C8                 mov     [ebp+var_C], eax
.text:000037CB                 mov     [ebp+var_8], eax
.text:000037CE                 mov     [ebp+var_4], eax
.text:000037D1                 push    offset $SG77276 ; " Time ="
.text:000037D6                 mov     eax, [ebp+Str]
.text:000037D9                 push    eax             ; Str
.text:000037DA                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:000037DF                 mov     ecx, dword ptr ds:?g_StdStream@@3PAVCStdOutStream@@A ; CStdOutStream * g_StdStream
.text:000037E5                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:000037EA                 mov     ecx, eax
.text:000037EC                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:000037F1                 mov     ecx, eax
.text:000037F3                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:000037F8                 mov     [ebp+var_4], 989680h
.text:000037FF                 push    0
.text:00003801                 push    989680h
.text:00003806                 mov     ecx, [ebp+arg_8]
.text:00003809                 push    ecx
.text:0000380A                 mov     edx, [ebp+arg_4]
.text:0000380D                 push    edx
.text:0000380E                 call    __aulldiv
.text:00003813                 mov     [ebp+var_C], eax
.text:00003816                 mov     [ebp+var_8], edx
.text:00003819                 push    20h ; ' '
.text:0000381B                 push    6
.text:0000381D                 mov     eax, [ebp+var_8]
.text:00003820                 push    eax
.text:00003821                 mov     ecx, [ebp+var_C]
.text:00003824                 push    ecx
.text:00003825                 call    ?PrintNum@@YGX_KID@Z ; PrintNum(unsigned __int64,uint,char)
.text:0000382A                 push    2Eh ; '.'
.text:0000382C                 mov     ecx, dword ptr ds:?g_StdStream@@3PAVCStdOutStream@@A ; CStdOutStream * g_StdStream
.text:00003832                 call    ??6CStdOutStream@@QAEAAV0@D@Z ; CStdOutStream::operator<<(char)
.text:00003837                 push    0
.text:00003839                 push    989680h
.text:0000383E                 mov     edx, [ebp+var_8]
.text:00003841                 push    edx
.text:00003842                 mov     eax, [ebp+var_C]
.text:00003845                 push    eax
.text:00003846                 call    __allmul
.text:0000384B                 mov     ecx, [ebp+arg_4]
.text:0000384E                 sub     ecx, eax
.text:00003850                 mov     eax, [ebp+arg_8]
.text:00003853                 sbb     eax, edx
.text:00003855                 mov     eax, ecx
.text:00003857                 xor     edx, edx
.text:00003859                 mov     ecx, 2710h
.text:0000385E                 div     ecx
.text:00003860                 mov     [ebp+var_10], eax
.text:00003863                 push    30h ; '0'
.text:00003865                 push    3
.text:00003867                 mov     edx, [ebp+var_10]
.text:0000386A                 xor     eax, eax
.text:0000386C                 push    eax
.text:0000386D                 push    edx
.text:0000386E                 call    ?PrintNum@@YGX_KID@Z ; PrintNum(unsigned __int64,uint,char)
.text:00003873
.text:00003873 loc_3873:                               ; CODE XREF: PrintTime(char const *,unsigned __int64,unsigned __int64)+F6j
.text:00003873                 cmp     [ebp+arg_8], 1000000h
.text:0000387A                 jb      short loc_38AC
.text:0000387C                 ja      short loc_3884
.text:0000387E                 cmp     [ebp+arg_4], 0
.text:00003882                 jbe     short loc_38AC
.text:00003884
.text:00003884 loc_3884:                               ; CODE XREF: PrintTime(char const *,unsigned __int64,unsigned __int64)+C8j
.text:00003884                 mov     eax, [ebp+arg_4]
.text:00003887                 mov     edx, [ebp+arg_8]
.text:0000388A                 mov     cl, 1
.text:0000388C                 call    __aullshr
.text:00003891                 mov     [ebp+arg_4], eax
.text:00003894                 mov     [ebp+arg_8], edx
.text:00003897                 mov     eax, [ebp+arg_C]
.text:0000389A                 mov     edx, [ebp+arg_10]
.text:0000389D                 mov     cl, 1
.text:0000389F                 call    __aullshr
.text:000038A4                 mov     [ebp+arg_C], eax
.text:000038A7                 mov     [ebp+arg_10], edx
.text:000038AA                 jmp     short loc_3873
.text:000038AC ; ---------------------------------------------------------------------------
.text:000038AC
.text:000038AC loc_38AC:                               ; CODE XREF: PrintTime(char const *,unsigned __int64,unsigned __int64)+C6j
.text:000038AC                                         ; PrintTime(char const *,unsigned __int64,unsigned __int64)+CEj
.text:000038AC                 mov     [ebp+var_18], 0
.text:000038B3                 mov     [ebp+var_14], 0
.text:000038BA                 mov     ecx, [ebp+arg_C]
.text:000038BD                 or      ecx, [ebp+arg_10]
.text:000038C0                 jz      short loc_38E8
.text:000038C2                 push    0
.text:000038C4                 push    64h ; 'd'
.text:000038C6                 mov     edx, [ebp+arg_8]
.text:000038C9                 push    edx
.text:000038CA                 mov     eax, [ebp+arg_4]
.text:000038CD                 push    eax
.text:000038CE                 call    __allmul
.text:000038D3                 mov     ecx, [ebp+arg_10]
.text:000038D6                 push    ecx
.text:000038D7                 mov     ecx, [ebp+arg_C]
.text:000038DA                 push    ecx
.text:000038DB                 push    edx
.text:000038DC                 push    eax
.text:000038DD                 call    __aulldiv
.text:000038E2                 mov     [ebp+var_18], eax
.text:000038E5                 mov     [ebp+var_14], edx
.text:000038E8
.text:000038E8 loc_38E8:                               ; CODE XREF: PrintTime(char const *,unsigned __int64,unsigned __int64)+10Cj
.text:000038E8                 push    offset $SG77287 ; Str
.text:000038ED                 mov     ecx, dword ptr ds:?g_StdStream@@3PAVCStdOutStream@@A ; CStdOutStream * g_StdStream
.text:000038F3                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:000038F8                 push    20h ; ' '
.text:000038FA                 push    5
.text:000038FC                 mov     edx, [ebp+var_14]
.text:000038FF                 push    edx
.text:00003900                 mov     eax, [ebp+var_18]
.text:00003903                 push    eax
.text:00003904                 call    ?PrintNum@@YGX_KID@Z ; PrintNum(unsigned __int64,uint,char)
.text:00003909                 push    25h ; '%'
.text:0000390B                 mov     ecx, dword ptr ds:?g_StdStream@@3PAVCStdOutStream@@A ; CStdOutStream * g_StdStream
.text:00003911                 call    ??6CStdOutStream@@QAEAAV0@D@Z ; CStdOutStream::operator<<(char)
.text:00003916                 add     esp, 18h
.text:00003919                 cmp     ebp, esp
.text:0000391B                 call    __RTC_CheckEsp
.text:00003920                 mov     esp, ebp
.text:00003922                 pop     ebp
.text:00003923                 retn    14h
.text:00003923 ?PrintTime@@YGXPBD_K1@Z endp
.text:00003923
.text:00003923 ; ---------------------------------------------------------------------------
.text:00003926                 db 0Eh dup(0CCh)
.text:00003934
.text:00003934 ; =============== S U B R O U T I N E =======================================
.text:00003934
.text:00003934 ; Attributes: bp-based frame
.text:00003934
.text:00003934 ; void __stdcall PrintNum(unsigned __int64, unsigned int, char)
.text:00003934 ?PrintNum@@YGX_KID@Z proc near          ; CODE XREF: PrintTime(char const *,unsigned __int64,unsigned __int64)+71p
.text:00003934                                         ; PrintTime(char const *,unsigned __int64,unsigned __int64)+BAp ...
.text:00003934
.text:00003934 var_54          = dword ptr -54h
.text:00003934 Str             = dword ptr -50h
.text:00003934 var_28          = byte ptr -28h
.text:00003934 var_4           = dword ptr -4
.text:00003934 arg_0           = qword ptr  8
.text:00003934 arg_8           = dword ptr  10h
.text:00003934 arg_C           = byte ptr  14h
.text:00003934
.text:00003934                 push    ebp
.text:00003935                 mov     ebp, esp
.text:00003937                 sub     esp, 54h
.text:0000393A                 push    edi
.text:0000393B                 lea     edi, [ebp+var_54]
.text:0000393E                 mov     ecx, 15h
.text:00003943                 mov     eax, 0CCCCCCCCh
.text:00003948                 rep stosd
.text:0000394A                 mov     eax, dword ptr ds:___security_cookie
.text:0000394F                 xor     eax, ebp
.text:00003951                 mov     [ebp+var_4], eax
.text:00003954                 lea     eax, [ebp+var_28]
.text:00003957                 mov     [ebp+Str], eax
.text:0000395A                 mov     ecx, [ebp+Str]
.text:0000395D                 push    ecx             ; char *
.text:0000395E                 mov     edx, dword ptr [ebp+arg_0+4]
.text:00003961                 push    edx
.text:00003962                 mov     eax, dword ptr [ebp+arg_0]
.text:00003965                 push    eax             ; unsigned __int64
.text:00003966                 call    ?ConvertUInt64ToString@@YGX_KPAD@Z ; ConvertUInt64ToString(unsigned __int64,char *)
.text:0000396B                 mov     ecx, [ebp+Str]
.text:0000396E                 push    ecx             ; char *
.text:0000396F                 call    ?MyStringLen@@YGIPBD@Z ; MyStringLen(char const *)
.text:00003974                 mov     [ebp+var_54], eax
.text:00003977                 jmp     short loc_3982
.text:00003979 ; ---------------------------------------------------------------------------
.text:00003979
.text:00003979 loc_3979:                               ; CODE XREF: PrintNum(unsigned __int64,uint,char)+67j
.text:00003979                 mov     edx, [ebp+var_54]
.text:0000397C                 add     edx, 1
.text:0000397F                 mov     [ebp+var_54], edx
.text:00003982
.text:00003982 loc_3982:                               ; CODE XREF: PrintNum(unsigned __int64,uint,char)+43j
.text:00003982                 mov     eax, [ebp+var_54]
.text:00003985                 cmp     eax, [ebp+arg_8]
.text:00003988                 jnb     short loc_399D
.text:0000398A                 mov     ecx, [ebp+Str]
.text:0000398D                 sub     ecx, 1
.text:00003990                 mov     [ebp+Str], ecx
.text:00003993                 mov     edx, [ebp+Str]
.text:00003996                 mov     al, [ebp+arg_C]
.text:00003999                 mov     [edx], al
.text:0000399B                 jmp     short loc_3979
.text:0000399D ; ---------------------------------------------------------------------------
.text:0000399D
.text:0000399D loc_399D:                               ; CODE XREF: PrintNum(unsigned __int64,uint,char)+54j
.text:0000399D                 mov     ecx, [ebp+Str]
.text:000039A0                 push    ecx             ; Str
.text:000039A1                 mov     ecx, dword ptr ds:?g_StdStream@@3PAVCStdOutStream@@A ; CStdOutStream * g_StdStream
.text:000039A7                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:000039AC                 push    edx
.text:000039AD                 mov     ecx, ebp
.text:000039AF                 push    eax
.text:000039B0                 lea     edx, $LN8
.text:000039B6                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000039BB                 pop     eax
.text:000039BC                 pop     edx
.text:000039BD                 pop     edi
.text:000039BE                 mov     ecx, [ebp+var_4]
.text:000039C1                 xor     ecx, ebp
.text:000039C3                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000039C8                 add     esp, 54h
.text:000039CB                 cmp     ebp, esp
.text:000039CD                 call    __RTC_CheckEsp
.text:000039D2                 mov     esp, ebp
.text:000039D4                 pop     ebp
.text:000039D5                 retn    10h
.text:000039D5 ?PrintNum@@YGX_KID@Z endp
.text:000039D5
.text:000039D5 ; ---------------------------------------------------------------------------
.text:000039D8 $LN8            dd 1                    ; DATA XREF: PrintNum(unsigned __int64,uint,char)+7Co
.text:000039DC                 dd offset $LN7_0
.text:000039E0 $LN7_0          dd 0FFFFFFB8h, 40h      ; DATA XREF: .text:000039DCo
.text:000039E8                 dd offset $LN6_0        ; "temp"
.text:000039EC $LN6_0          db 'temp',0             ; DATA XREF: .text:000039E8o
.text:000039F1                 align 4
.text:000039F4
.text:000039F4 ; =============== S U B R O U T I N E =======================================
.text:000039F4
.text:000039F4 ; Attributes: bp-based frame
.text:000039F4
.text:000039F4 ; int __stdcall PrintMemUsage(char *Str, int, int)
.text:000039F4 ?PrintMemUsage@@YGXPBD_K@Z proc near    ; CODE XREF: PrintStat(void)+23Dp
.text:000039F4                                         ; PrintStat(void)+27Dp
.text:000039F4
.text:000039F4 Str             = dword ptr  8
.text:000039F4 arg_4           = dword ptr  0Ch
.text:000039F4 arg_8           = dword ptr  10h
.text:000039F4
.text:000039F4                 push    ebp
.text:000039F5                 mov     ebp, esp
.text:000039F7                 push    offset $SG77293 ; " Memory ="
.text:000039FC                 mov     eax, [ebp+Str]
.text:000039FF                 push    eax             ; Str
.text:00003A00                 push    offset $SG77292 ; "    "
.text:00003A05                 mov     ecx, dword ptr ds:?g_StdStream@@3PAVCStdOutStream@@A ; CStdOutStream * g_StdStream
.text:00003A0B                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00003A10                 mov     ecx, eax
.text:00003A12                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00003A17                 mov     ecx, eax
.text:00003A19                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00003A1E                 push    20h ; ' '
.text:00003A20                 push    7
.text:00003A22                 mov     eax, [ebp+arg_4]
.text:00003A25                 add     eax, 100000h
.text:00003A2A                 mov     edx, [ebp+arg_8]
.text:00003A2D                 adc     edx, 0
.text:00003A30                 sub     eax, 1
.text:00003A33                 sbb     edx, 0
.text:00003A36                 mov     cl, 14h
.text:00003A38                 call    __aullshr
.text:00003A3D                 push    edx
.text:00003A3E                 push    eax
.text:00003A3F                 call    ?PrintNum@@YGX_KID@Z ; PrintNum(unsigned __int64,uint,char)
.text:00003A44                 push    offset $SG77294 ; " MB"
.text:00003A49                 mov     ecx, dword ptr ds:?g_StdStream@@3PAVCStdOutStream@@A ; CStdOutStream * g_StdStream
.text:00003A4F                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00003A54                 cmp     ebp, esp
.text:00003A56                 call    __RTC_CheckEsp
.text:00003A5B                 pop     ebp
.text:00003A5C                 retn    0Ch
.text:00003A5C ?PrintMemUsage@@YGXPBD_K@Z endp
.text:00003A5C
.text:00003A5C ; ---------------------------------------------------------------------------
.text:00003A5F                 db 5 dup(0CCh)
.text:00003A64
.text:00003A64 ; =============== S U B R O U T I N E =======================================
.text:00003A64
.text:00003A64 ; Attributes: bp-based frame
.text:00003A64
.text:00003A64 ; unsigned __int64 __stdcall GetTime64(struct _FILETIME const &)
.text:00003A64 ?GetTime64@@YG_KABU_FILETIME@@@Z proc near ; CODE XREF: PrintStat(void)+136p
.text:00003A64                                         ; PrintStat(void)+14Bp ...
.text:00003A64
.text:00003A64 arg_0           = dword ptr  8
.text:00003A64
.text:00003A64                 push    ebp
.text:00003A65                 mov     ebp, esp
.text:00003A67                 push    esi
.text:00003A68                 mov     eax, [ebp+arg_0]
.text:00003A6B                 mov     eax, [eax+4]
.text:00003A6E                 xor     edx, edx
.text:00003A70                 mov     cl, 20h ; ' '
.text:00003A72                 call    __allshl
.text:00003A77                 mov     ecx, [ebp+arg_0]
.text:00003A7A                 mov     ecx, [ecx]
.text:00003A7C                 xor     esi, esi
.text:00003A7E                 or      eax, ecx
.text:00003A80                 or      edx, esi
.text:00003A82                 pop     esi
.text:00003A83                 cmp     ebp, esp
.text:00003A85                 call    __RTC_CheckEsp
.text:00003A8A                 pop     ebp
.text:00003A8B                 retn    4
.text:00003A8B ?GetTime64@@YG_KABU_FILETIME@@@Z endp
.text:00003A8B
.text:00003A8B ; ---------------------------------------------------------------------------
.text:00003A8E                 db 6 dup(0CCh)
.text:00003A94
.text:00003A94 ; =============== S U B R O U T I N E =======================================
.text:00003A94
.text:00003A94 ; Attributes: bp-based frame
.text:00003A94
.text:00003A94 ; void __stdcall PrintHexId(class CStdOutStream &, unsigned __int64)
.text:00003A94 ?PrintHexId@@YGXAAVCStdOutStream@@_K@Z proc near
.text:00003A94                                         ; CODE XREF: Main2(void)+A19p
.text:00003A94                                         ; Main2(void)+AFDp
.text:00003A94
.text:00003A94 var_44          = byte ptr -44h
.text:00003A94 var_34          = byte ptr -34h
.text:00003A94 var_10          = dword ptr -10h
.text:00003A94 var_C           = dword ptr -0Ch
.text:00003A94 var_4           = dword ptr -4
.text:00003A94 arg_0           = dword ptr  8
.text:00003A94 arg_4           = qword ptr  0Ch
.text:00003A94
.text:00003A94                 push    ebp
.text:00003A95                 mov     ebp, esp
.text:00003A97                 push    0FFFFFFFFh
.text:00003A99                 push    offset __ehhandler$?PrintHexId@@YGXAAVCStdOutStream@@_K@Z
.text:00003A9E                 mov     eax, large fs:0
.text:00003AA4                 push    eax
.text:00003AA5                 sub     esp, 38h
.text:00003AA8                 push    edi
.text:00003AA9                 lea     edi, [ebp+var_44]
.text:00003AAC                 mov     ecx, 0Eh
.text:00003AB1                 mov     eax, 0CCCCCCCCh
.text:00003AB6                 rep stosd
.text:00003AB8                 mov     eax, dword ptr ds:___security_cookie
.text:00003ABD                 xor     eax, ebp
.text:00003ABF                 mov     [ebp+var_10], eax
.text:00003AC2                 push    eax
.text:00003AC3                 lea     eax, [ebp+var_C]
.text:00003AC6                 mov     large fs:0, eax
.text:00003ACC                 lea     eax, [ebp+var_34]
.text:00003ACF                 push    eax             ; char *
.text:00003AD0                 mov     ecx, dword ptr [ebp+arg_4+4]
.text:00003AD3                 push    ecx
.text:00003AD4                 mov     edx, dword ptr [ebp+arg_4]
.text:00003AD7                 push    edx             ; unsigned __int64
.text:00003AD8                 call    ?ConvertUInt64ToHex@@YGX_KPAD@Z ; ConvertUInt64ToHex(unsigned __int64,char *)
.text:00003ADD                 lea     eax, [ebp+var_34]
.text:00003AE0                 push    eax
.text:00003AE1                 lea     ecx, [ebp+var_44]
.text:00003AE4                 call    ??0AString@@QAE@PBD@Z ; AString::AString(char const *)
.text:00003AE9                 mov     [ebp+var_4], 0
.text:00003AF0                 push    8               ; int
.text:00003AF2                 lea     ecx, [ebp+var_44]
.text:00003AF5                 push    ecx             ; AString *
.text:00003AF6                 mov     edx, [ebp+arg_0]
.text:00003AF9                 push    edx             ; int
.text:00003AFA                 call    ?PrintStringRight@@YGXAAVCStdOutStream@@ABVAString@@I@Z ; PrintStringRight(CStdOutStream &,AString const &,uint)
.text:00003AFF                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003B06                 lea     ecx, [ebp+var_44] ; this
.text:00003B09                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00003B0E                 push    edx
.text:00003B0F                 mov     ecx, ebp
.text:00003B11                 push    eax
.text:00003B12                 lea     edx, $LN7_1
.text:00003B18                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00003B1D                 pop     eax
.text:00003B1E                 pop     edx
.text:00003B1F                 mov     ecx, [ebp+var_C]
.text:00003B22                 mov     large fs:0, ecx
.text:00003B29                 pop     ecx
.text:00003B2A                 pop     edi
.text:00003B2B                 mov     ecx, [ebp+var_10]
.text:00003B2E                 xor     ecx, ebp
.text:00003B30                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00003B35                 add     esp, 44h
.text:00003B38                 cmp     ebp, esp
.text:00003B3A                 call    __RTC_CheckEsp
.text:00003B3F                 mov     esp, ebp
.text:00003B41                 pop     ebp
.text:00003B42                 retn    0Ch
.text:00003B42 ?PrintHexId@@YGXAAVCStdOutStream@@_K@Z endp
.text:00003B42
.text:00003B42 ; ---------------------------------------------------------------------------
.text:00003B45                 align 4
.text:00003B48 $LN7_1          dd 1                    ; DATA XREF: PrintHexId(CStdOutStream &,unsigned __int64)+7Eo
.text:00003B4C                 dd offset $LN6_1
.text:00003B50 $LN6_1          db 0CCh                 ; DATA XREF: .text:00003B4Co
.text:00003B51                 db 3 dup(0FFh)
.text:00003B54                 dd offset $SG77136+20h  ; "yright (c) 1999-2015 Igor Pavlov : 2015"...
.text:00003B58                 dd offset $LN4_0
.text:00003B5C $LN4_0          db 73h, 0               ; DATA XREF: .text:00003B58o
.text:00003B5E                 align 10h
.text:00003B5E _text           ends
.text:00003B5E
.text$x:00003B60 ; ===========================================================================
.text$x:00003B60
.text$x:00003B60 ; Segment type: Pure code
.text$x:00003B60 ; Segment permissions: Read/Execute
.text$x:00003B60 _text$x         segment para public 'CODE' use32
.text$x:00003B60                 assume cs:_text$x
.text$x:00003B60                 ;org 3B60h
.text$x:00003B60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003B60
.text$x:00003B60 ; =============== S U B R O U T I N E =======================================
.text$x:00003B60
.text$x:00003B60
.text$x:00003B60 __unwindfunclet$?Main2@@YGHXZ$0 proc near ; DATA XREF: .xdata$x:00003D80o
.text$x:00003B60                 lea     ecx, [ebp-20h]
.text$x:00003B63                 jmp     ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text$x:00003B63 __unwindfunclet$?Main2@@YGHXZ$0 endp
.text$x:00003B63
.text$x:00003B68
.text$x:00003B68 ; =============== S U B R O U T I N E =======================================
.text$x:00003B68
.text$x:00003B68
.text$x:00003B68 __unwindfunclet$?Main2@@YGHXZ$1 proc near ; DATA XREF: .xdata$x:00003D88o
.text$x:00003B68                 lea     ecx, [ebp-948h] ; this
.text$x:00003B6E                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00003B6E __unwindfunclet$?Main2@@YGHXZ$1 endp
.text$x:00003B6E
.text$x:00003B73
.text$x:00003B73 ; =============== S U B R O U T I N E =======================================
.text$x:00003B73
.text$x:00003B73
.text$x:00003B73 __unwindfunclet$?Main2@@YGHXZ$2 proc near ; DATA XREF: .xdata$x:00003D90o
.text$x:00003B73                 lea     ecx, [ebp-238h] ; this
.text$x:00003B79                 jmp     ??1CArcCmdLineOptions@@QAE@XZ ; CArcCmdLineOptions::~CArcCmdLineOptions(void)
.text$x:00003B79 __unwindfunclet$?Main2@@YGHXZ$2 endp
.text$x:00003B79
.text$x:00003B7E
.text$x:00003B7E ; =============== S U B R O U T I N E =======================================
.text$x:00003B7E
.text$x:00003B7E
.text$x:00003B7E __unwindfunclet$?Main2@@YGHXZ$3 proc near ; DATA XREF: .xdata$x:00003D98o
.text$x:00003B7E                 lea     ecx, [ebp-26Ch] ; this
.text$x:00003B84                 jmp     ??1CArcCmdLineParser@@QAE@XZ ; CArcCmdLineParser::~CArcCmdLineParser(void)
.text$x:00003B84 __unwindfunclet$?Main2@@YGHXZ$3 endp
.text$x:00003B84
.text$x:00003B89
.text$x:00003B89 ; =============== S U B R O U T I N E =======================================
.text$x:00003B89
.text$x:00003B89
.text$x:00003B89 __unwindfunclet$?Main2@@YGHXZ$4 proc near ; DATA XREF: .xdata$x:00003DA0o
.text$x:00003B89                 mov     eax, [ebp-95Ch]
.text$x:00003B8F                 push    eax             ; void *
.text$x:00003B90                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00003B95                 pop     ecx
.text$x:00003B96                 retn
.text$x:00003B96 __unwindfunclet$?Main2@@YGHXZ$4 endp
.text$x:00003B96
.text$x:00003B97
.text$x:00003B97 ; =============== S U B R O U T I N E =======================================
.text$x:00003B97
.text$x:00003B97
.text$x:00003B97 __unwindfunclet$?Main2@@YGHXZ$5 proc near ; DATA XREF: .xdata$x:00003DA8o
.text$x:00003B97                 lea     ecx, [ebp-2ACh]
.text$x:00003B9D                 jmp     ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ ; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>(void)
.text$x:00003B9D __unwindfunclet$?Main2@@YGHXZ$5 endp
.text$x:00003B9D
.text$x:00003BA2
.text$x:00003BA2 ; =============== S U B R O U T I N E =======================================
.text$x:00003BA2
.text$x:00003BA2
.text$x:00003BA2 __unwindfunclet$?Main2@@YGHXZ$6 proc near ; DATA XREF: .xdata$x:00003DB0o
.text$x:00003BA2                 lea     ecx, [ebp-2C4h]
.text$x:00003BA8                 jmp     ??1?$CObjectVector@UCOpenType@@@@QAE@XZ ; CObjectVector<COpenType>::~CObjectVector<COpenType>(void)
.text$x:00003BA8 __unwindfunclet$?Main2@@YGHXZ$6 endp
.text$x:00003BA8
.text$x:00003BAD
.text$x:00003BAD ; =============== S U B R O U T I N E =======================================
.text$x:00003BAD
.text$x:00003BAD
.text$x:00003BAD __unwindfunclet$?Main2@@YGHXZ$7 proc near ; DATA XREF: .xdata$x:00003DB8o
.text$x:00003BAD                 lea     ecx, [ebp-2D8h]
.text$x:00003BB3                 jmp     ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text$x:00003BB3 __unwindfunclet$?Main2@@YGHXZ$7 endp
.text$x:00003BB3
.text$x:00003BB8
.text$x:00003BB8 ; =============== S U B R O U T I N E =======================================
.text$x:00003BB8
.text$x:00003BB8
.text$x:00003BB8 __unwindfunclet$?Main2@@YGHXZ$8 proc near ; DATA XREF: .xdata$x:00003DC0o
.text$x:00003BB8                 lea     ecx, [ebp-2F0h]
.text$x:00003BBE                 jmp     ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text$x:00003BBE __unwindfunclet$?Main2@@YGHXZ$8 endp
.text$x:00003BBE
.text$x:00003BC3
.text$x:00003BC3 ; =============== S U B R O U T I N E =======================================
.text$x:00003BC3
.text$x:00003BC3
.text$x:00003BC3 __unwindfunclet$?Main2@@YGHXZ$9 proc near ; DATA XREF: .xdata$x:00003DC8o
.text$x:00003BC3                 lea     ecx, [ebp-320h] ; this
.text$x:00003BC9                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00003BC9 __unwindfunclet$?Main2@@YGHXZ$9 endp
.text$x:00003BC9
.text$x:00003BCE
.text$x:00003BCE ; =============== S U B R O U T I N E =======================================
.text$x:00003BCE
.text$x:00003BCE
.text$x:00003BCE __unwindfunclet$?Main2@@YGHXZ$10 proc near ; DATA XREF: .xdata$x:00003DD0o
.text$x:00003BCE                 lea     ecx, [ebp-354h]
.text$x:00003BD4                 jmp     ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text$x:00003BD4 __unwindfunclet$?Main2@@YGHXZ$10 endp
.text$x:00003BD4
.text$x:00003BD9
.text$x:00003BD9 ; =============== S U B R O U T I N E =======================================
.text$x:00003BD9
.text$x:00003BD9
.text$x:00003BD9 __unwindfunclet$?Main2@@YGHXZ$11 proc near ; DATA XREF: .xdata$x:00003DD8o
.text$x:00003BD9                 lea     ecx, [ebp-368h]
.text$x:00003BDF                 jmp     ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text$x:00003BDF __unwindfunclet$?Main2@@YGHXZ$11 endp
.text$x:00003BDF
.text$x:00003BE4
.text$x:00003BE4 ; =============== S U B R O U T I N E =======================================
.text$x:00003BE4
.text$x:00003BE4
.text$x:00003BE4 __unwindfunclet$?Main2@@YGHXZ$12 proc near ; DATA XREF: .xdata$x:00003DE0o
.text$x:00003BE4                 lea     ecx, [ebp-430h] ; this
.text$x:00003BEA                 jmp     ??1CExtractScanConsole@@QAE@XZ ; CExtractScanConsole::~CExtractScanConsole(void)
.text$x:00003BEA __unwindfunclet$?Main2@@YGHXZ$12 endp
.text$x:00003BEA
.text$x:00003BEF
.text$x:00003BEF ; =============== S U B R O U T I N E =======================================
.text$x:00003BEF
.text$x:00003BEF
.text$x:00003BEF __unwindfunclet$?Main2@@YGHXZ$13 proc near ; DATA XREF: .xdata$x:00003DE8o
.text$x:00003BEF                 lea     ecx, [ebp-974h] ; this
.text$x:00003BF5                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00003BF5 __unwindfunclet$?Main2@@YGHXZ$13 endp
.text$x:00003BF5
.text$x:00003BFA
.text$x:00003BFA ; =============== S U B R O U T I N E =======================================
.text$x:00003BFA
.text$x:00003BFA
.text$x:00003BFA __unwindfunclet$?Main2@@YGHXZ$14 proc near ; DATA XREF: .xdata$x:00003DF0o
.text$x:00003BFA                 mov     eax, [ebp-97Ch]
.text$x:00003C00                 push    eax             ; void *
.text$x:00003C01                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00003C06                 pop     ecx
.text$x:00003C07                 retn
.text$x:00003C07 __unwindfunclet$?Main2@@YGHXZ$14 endp
.text$x:00003C07
.text$x:00003C08
.text$x:00003C08 ; =============== S U B R O U T I N E =======================================
.text$x:00003C08
.text$x:00003C08
.text$x:00003C08 __unwindfunclet$?Main2@@YGHXZ$15 proc near ; DATA XREF: .xdata$x:00003DF8o
.text$x:00003C08                 lea     ecx, [ebp-478h]
.text$x:00003C0E                 jmp     ??1?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IFolderArchiveExtractCallback>::~CMyComPtr<IFolderArchiveExtractCallback>(void)
.text$x:00003C0E __unwindfunclet$?Main2@@YGHXZ$15 endp
.text$x:00003C0E
.text$x:00003C13
.text$x:00003C13 ; =============== S U B R O U T I N E =======================================
.text$x:00003C13
.text$x:00003C13
.text$x:00003C13 __unwindfunclet$?Main2@@YGHXZ$16 proc near ; DATA XREF: .xdata$x:00003E00o
.text$x:00003C13                 lea     ecx, [ebp-4B4h] ; this
.text$x:00003C19                 jmp     ??1CExtractOptions@@QAE@XZ ; CExtractOptions::~CExtractOptions(void)
.text$x:00003C19 __unwindfunclet$?Main2@@YGHXZ$16 endp
.text$x:00003C19
.text$x:00003C1E
.text$x:00003C1E ; =============== S U B R O U T I N E =======================================
.text$x:00003C1E
.text$x:00003C1E
.text$x:00003C1E __unwindfunclet$?Main2@@YGHXZ$17 proc near ; DATA XREF: .xdata$x:00003E08o
.text$x:00003C1E                 lea     ecx, [ebp-4C8h] ; this
.text$x:00003C24                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00003C24 __unwindfunclet$?Main2@@YGHXZ$17 endp
.text$x:00003C24
.text$x:00003C29
.text$x:00003C29 ; =============== S U B R O U T I N E =======================================
.text$x:00003C29
.text$x:00003C29
.text$x:00003C29 __unwindfunclet$?Main2@@YGHXZ$18 proc near ; DATA XREF: .xdata$x:00003E10o
.text$x:00003C29                 lea     ecx, [ebp-558h] ; this
.text$x:00003C2F                 jmp     ??1CHashBundle@@QAE@XZ ; CHashBundle::~CHashBundle(void)
.text$x:00003C2F __unwindfunclet$?Main2@@YGHXZ$18 endp
.text$x:00003C2F
.text$x:00003C34
.text$x:00003C34 ; =============== S U B R O U T I N E =======================================
.text$x:00003C34
.text$x:00003C34
.text$x:00003C34 __unwindfunclet$?Main2@@YGHXZ$19 proc near ; DATA XREF: .xdata$x:00003E18o
.text$x:00003C34                 lea     ecx, [ebp-65Ch] ; this
.text$x:00003C3A                 jmp     ??1COpenCallbackConsole@@QAE@XZ ; COpenCallbackConsole::~COpenCallbackConsole(void)
.text$x:00003C3A __unwindfunclet$?Main2@@YGHXZ$19 endp
.text$x:00003C3A
.text$x:00003C3F
.text$x:00003C3F ; =============== S U B R O U T I N E =======================================
.text$x:00003C3F
.text$x:00003C3F
.text$x:00003C3F __unwindfunclet$?Main2@@YGHXZ$20 proc near ; DATA XREF: .xdata$x:00003E20o
.text$x:00003C3F                 lea     ecx, [ebp-798h] ; this
.text$x:00003C45                 jmp     ??1CUpdateCallbackConsole@@QAE@XZ ; CUpdateCallbackConsole::~CUpdateCallbackConsole(void)
.text$x:00003C45 __unwindfunclet$?Main2@@YGHXZ$20 endp
.text$x:00003C45
.text$x:00003C4A
.text$x:00003C4A ; =============== S U B R O U T I N E =======================================
.text$x:00003C4A
.text$x:00003C4A
.text$x:00003C4A __unwindfunclet$?Main2@@YGHXZ$21 proc near ; DATA XREF: .xdata$x:00003E28o
.text$x:00003C4A                 lea     ecx, [ebp-7BCh] ; this
.text$x:00003C50                 jmp     ??1CUpdateErrorInfo@@QAE@XZ ; CUpdateErrorInfo::~CUpdateErrorInfo(void)
.text$x:00003C50 __unwindfunclet$?Main2@@YGHXZ$21 endp
.text$x:00003C50
.text$x:00003C55
.text$x:00003C55 ; =============== S U B R O U T I N E =======================================
.text$x:00003C55
.text$x:00003C55
.text$x:00003C55 __unwindfunclet$?Main2@@YGHXZ$22 proc near ; DATA XREF: .xdata$x:00003E30o
.text$x:00003C55                 lea     ecx, [ebp-900h] ; this
.text$x:00003C5B                 jmp     ??1CHashCallbackConsole@@QAE@XZ ; CHashCallbackConsole::~CHashCallbackConsole(void)
.text$x:00003C5B __unwindfunclet$?Main2@@YGHXZ$22 endp
.text$x:00003C5B
.text$x:00003C60
.text$x:00003C60 ; =============== S U B R O U T I N E =======================================
.text$x:00003C60
.text$x:00003C60
.text$x:00003C60 __unwindfunclet$?Main2@@YGHXZ$23 proc near ; DATA XREF: .xdata$x:00003E38o
.text$x:00003C60                 lea     ecx, [ebp-914h] ; this
.text$x:00003C66                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00003C66 __unwindfunclet$?Main2@@YGHXZ$23 endp
.text$x:00003C66
.text$x:00003C6B
.text$x:00003C6B ; =============== S U B R O U T I N E =======================================
.text$x:00003C6B
.text$x:00003C6B
.text$x:00003C6B __unwindfunclet$?Main2@@YGHXZ$24 proc near ; DATA XREF: .xdata$x:00003E40o
.text$x:00003C6B                 lea     ecx, [ebp-938h] ; this
.text$x:00003C71                 jmp     ??1CUpdateErrorInfo@@QAE@XZ ; CUpdateErrorInfo::~CUpdateErrorInfo(void)
.text$x:00003C71 __unwindfunclet$?Main2@@YGHXZ$24 endp
.text$x:00003C71
.text$x:00003C76
.text$x:00003C76 ; =============== S U B R O U T I N E =======================================
.text$x:00003C76
.text$x:00003C76
.text$x:00003C76 __ehhandler$?Main2@@YGHXZ proc near     ; DATA XREF: Main2(void)+5o
.text$x:00003C76
.text$x:00003C76 arg_4           = dword ptr  8
.text$x:00003C76
.text$x:00003C76                 mov     edx, [esp+arg_4]
.text$x:00003C7A                 lea     eax, [edx+0Ch]
.text$x:00003C7D                 mov     ecx, [edx-9DCh]
.text$x:00003C83                 xor     ecx, eax
.text$x:00003C85                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003C8A                 mov     ecx, [edx-4]
.text$x:00003C8D                 xor     ecx, eax
.text$x:00003C8F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003C94                 mov     eax, offset __ehfuncinfo$?Main2@@YGHXZ
.text$x:00003C99                 jmp     ___CxxFrameHandler3
.text$x:00003C99 __ehhandler$?Main2@@YGHXZ endp
.text$x:00003C99
.text$x:00003C9E
.text$x:00003C9E ; =============== S U B R O U T I N E =======================================
.text$x:00003C9E
.text$x:00003C9E
.text$x:00003C9E __unwindfunclet$?PrintUInt32@@YGXAAVCStdOutStream@@II@Z$0 proc near
.text$x:00003C9E                                         ; DATA XREF: .xdata$x:00003E48o
.text$x:00003C9E                 lea     ecx, [ebp-34h]  ; this
.text$x:00003CA1                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00003CA1 __unwindfunclet$?PrintUInt32@@YGXAAVCStdOutStream@@II@Z$0 endp
.text$x:00003CA1
.text$x:00003CA6
.text$x:00003CA6 ; =============== S U B R O U T I N E =======================================
.text$x:00003CA6
.text$x:00003CA6
.text$x:00003CA6 __ehhandler$?PrintUInt32@@YGXAAVCStdOutStream@@II@Z proc near
.text$x:00003CA6                                         ; DATA XREF: PrintUInt32(CStdOutStream &,uint,uint)+5o
.text$x:00003CA6
.text$x:00003CA6 arg_4           = dword ptr  8
.text$x:00003CA6
.text$x:00003CA6                 mov     edx, [esp+arg_4]
.text$x:00003CAA                 lea     eax, [edx+0Ch]
.text$x:00003CAD                 mov     ecx, [edx-30h]
.text$x:00003CB0                 xor     ecx, eax
.text$x:00003CB2                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003CB7                 mov     ecx, [edx-4]
.text$x:00003CBA                 xor     ecx, eax
.text$x:00003CBC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003CC1                 mov     eax, offset __ehfuncinfo$?PrintUInt32@@YGXAAVCStdOutStream@@II@Z
.text$x:00003CC6                 jmp     ___CxxFrameHandler3
.text$x:00003CC6 __ehhandler$?PrintUInt32@@YGXAAVCStdOutStream@@II@Z endp
.text$x:00003CC6
.text$x:00003CCB
.text$x:00003CCB ; =============== S U B R O U T I N E =======================================
.text$x:00003CCB
.text$x:00003CCB
.text$x:00003CCB __unwindfunclet$?WarningsCheck@@YGHJABVCCallbackConsoleBase@@ABUCUpdateErrorInfo@@AAVCStdOutStream@@_N@Z$0 proc near
.text$x:00003CCB                                         ; DATA XREF: .xdata$x:00003E74o
.text$x:00003CCB                 lea     ecx, [ebp-20h]  ; this
.text$x:00003CCE                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00003CCE __unwindfunclet$?WarningsCheck@@YGHJABVCCallbackConsoleBase@@ABUCUpdateErrorInfo@@AAVCStdOutStream@@_N@Z$0 endp
.text$x:00003CCE
.text$x:00003CD3
.text$x:00003CD3 ; =============== S U B R O U T I N E =======================================
.text$x:00003CD3
.text$x:00003CD3
.text$x:00003CD3 __unwindfunclet$?WarningsCheck@@YGHJABVCCallbackConsoleBase@@ABUCUpdateErrorInfo@@AAVCStdOutStream@@_N@Z$1 proc near
.text$x:00003CD3                                         ; DATA XREF: .xdata$x:00003E7Co
.text$x:00003CD3                 lea     ecx, [ebp-38h]  ; this
.text$x:00003CD6                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00003CD6 __unwindfunclet$?WarningsCheck@@YGHJABVCCallbackConsoleBase@@ABUCUpdateErrorInfo@@AAVCStdOutStream@@_N@Z$1 endp
.text$x:00003CD6
.text$x:00003CDB
.text$x:00003CDB ; =============== S U B R O U T I N E =======================================
.text$x:00003CDB
.text$x:00003CDB
.text$x:00003CDB __ehhandler$?WarningsCheck@@YGHJABVCCallbackConsoleBase@@ABUCUpdateErrorInfo@@AAVCStdOutStream@@_N@Z proc near
.text$x:00003CDB                                         ; DATA XREF: WarningsCheck(long,CCallbackConsoleBase const &,CUpdateErrorInfo const &,CStdOutStream &,bool)+5o
.text$x:00003CDB
.text$x:00003CDB arg_4           = dword ptr  8
.text$x:00003CDB
.text$x:00003CDB                 mov     edx, [esp+arg_4]
.text$x:00003CDF                 lea     eax, [edx+0Ch]
.text$x:00003CE2                 mov     ecx, [edx-40h]
.text$x:00003CE5                 xor     ecx, eax
.text$x:00003CE7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003CEC                 mov     eax, offset __ehfuncinfo$?WarningsCheck@@YGHJABVCCallbackConsoleBase@@ABUCUpdateErrorInfo@@AAVCStdOutStream@@_N@Z
.text$x:00003CF1                 jmp     ___CxxFrameHandler3
.text$x:00003CF1 __ehhandler$?WarningsCheck@@YGHJABVCCallbackConsoleBase@@ABUCUpdateErrorInfo@@AAVCStdOutStream@@_N@Z endp
.text$x:00003CF1
.text$x:00003CF6
.text$x:00003CF6 ; =============== S U B R O U T I N E =======================================
.text$x:00003CF6
.text$x:00003CF6
.text$x:00003CF6 __unwindfunclet$?PrintWarningsPaths@@YGXABUCErrorPathCodes@@AAVCStdOutStream@@@Z$0 proc near
.text$x:00003CF6                                         ; DATA XREF: .xdata$x:00003EA8o
.text$x:00003CF6                 lea     ecx, [ebp-1Ch]  ; this
.text$x:00003CF9                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00003CF9 __unwindfunclet$?PrintWarningsPaths@@YGXABUCErrorPathCodes@@AAVCStdOutStream@@@Z$0 endp
.text$x:00003CF9
.text$x:00003CFE
.text$x:00003CFE ; =============== S U B R O U T I N E =======================================
.text$x:00003CFE
.text$x:00003CFE
.text$x:00003CFE __ehhandler$?PrintWarningsPaths@@YGXABUCErrorPathCodes@@AAVCStdOutStream@@@Z proc near
.text$x:00003CFE                                         ; DATA XREF: PrintWarningsPaths(CErrorPathCodes const &,CStdOutStream &)+5o
.text$x:00003CFE
.text$x:00003CFE arg_4           = dword ptr  8
.text$x:00003CFE
.text$x:00003CFE                 mov     edx, [esp+arg_4]
.text$x:00003D02                 lea     eax, [edx+0Ch]
.text$x:00003D05                 mov     ecx, [edx-1Ch]
.text$x:00003D08                 xor     ecx, eax
.text$x:00003D0A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003D0F                 mov     eax, offset __ehfuncinfo$?PrintWarningsPaths@@YGXABUCErrorPathCodes@@AAVCStdOutStream@@@Z
.text$x:00003D14                 jmp     ___CxxFrameHandler3
.text$x:00003D14 __ehhandler$?PrintWarningsPaths@@YGXABUCErrorPathCodes@@AAVCStdOutStream@@@Z endp
.text$x:00003D14
.text$x:00003D19
.text$x:00003D19 ; =============== S U B R O U T I N E =======================================
.text$x:00003D19
.text$x:00003D19
.text$x:00003D19 __unwindfunclet$?PrintHexId@@YGXAAVCStdOutStream@@_K@Z$0 proc near
.text$x:00003D19                                         ; DATA XREF: .xdata$x:00003ED4o
.text$x:00003D19                 lea     ecx, [ebp-44h]  ; this
.text$x:00003D1C
.text$x:00003D1C loc_3D1C:                               ; DATA XREF: .rdata:$SG77287o
.text$x:00003D1C                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00003D1C __unwindfunclet$?PrintHexId@@YGXAAVCStdOutStream@@_K@Z$0 endp
.text$x:00003D1C
.text$x:00003D21
.text$x:00003D21 ; =============== S U B R O U T I N E =======================================
.text$x:00003D21
.text$x:00003D21
.text$x:00003D21 __ehhandler$?PrintHexId@@YGXAAVCStdOutStream@@_K@Z proc near
.text$x:00003D21                                         ; DATA XREF: PrintHexId(CStdOutStream &,unsigned __int64)+5o
.text$x:00003D21
.text$x:00003D21 arg_4           = dword ptr  8
.text$x:00003D21
.text$x:00003D21                 mov     edx, [esp+arg_4]
.text$x:00003D25                 lea     eax, [edx+0Ch]
.text$x:00003D28                 mov     ecx, [edx-40h]
.text$x:00003D2B                 xor     ecx, eax
.text$x:00003D2D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003D32                 mov     ecx, [edx-4]
.text$x:00003D35                 xor     ecx, eax
.text$x:00003D37                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003D3C                 mov     eax, offset __ehfuncinfo$?PrintHexId@@YGXAAVCStdOutStream@@_K@Z
.text$x:00003D41                 jmp     ___CxxFrameHandler3
.text$x:00003D41 __ehhandler$?PrintHexId@@YGXAAVCStdOutStream@@_K@Z endp
.text$x:00003D41
.text$x:00003D41 ; ---------------------------------------------------------------------------
.text$x:00003D46                 align 4
.text$x:00003D46 _text$x         ends
.text$x:00003D46
.xdata$x:00003D48 ; ===========================================================================
.xdata$x:00003D48
.xdata$x:00003D48 ; Segment type: Pure data
.xdata$x:00003D48 ; Segment permissions: Read
.xdata$x:00003D48 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00003D48                 assume cs:_xdata$x
.xdata$x:00003D48                 ;org 3D48h
.xdata$x:00003D48 ; COMDAT (pick any)
.xdata$x:00003D48                 public __TI2CPAD
.xdata$x:00003D48 __TI2CPAD       db    1                 ; DATA XREF: Main2(void)+3C1o
.xdata$x:00003D48                                         ; Main2(void)+40Bo ...
.xdata$x:00003D49                 db    0
.xdata$x:00003D4A                 db    0
.xdata$x:00003D4B                 db    0
.xdata$x:00003D4C                 db    0
.xdata$x:00003D4D                 db    0
.xdata$x:00003D4E                 db    0
.xdata$x:00003D4F                 db    0
.xdata$x:00003D50                 db    0
.xdata$x:00003D51                 db    0
.xdata$x:00003D52                 db    0
.xdata$x:00003D53                 db    0
.xdata$x:00003D54                 dd offset __CTA2PAD
.xdata$x:00003D54 _xdata$x        ends
.xdata$x:00003D54
.xdata$x:00003D58 ; ===========================================================================
.xdata$x:00003D58
.xdata$x:00003D58 ; Segment type: Pure data
.xdata$x:00003D58 ; Segment permissions: Read
.xdata$x:00003D58 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00003D58                 assume cs:_xdata$x
.xdata$x:00003D58                 ;org 3D58h
.xdata$x:00003D58 __ehfuncinfo$?Main2@@YGHXZ db  22h ; "  ; DATA XREF: __ehhandler$?Main2@@YGHXZ+1Eo
.xdata$x:00003D59                 db    5
.xdata$x:00003D5A                 db  93h ; ô
.xdata$x:00003D5B                 db  19h
.xdata$x:00003D5C                 db  19h
.xdata$x:00003D5D                 db    0
.xdata$x:00003D5E                 db    0
.xdata$x:00003D5F                 db    0
.xdata$x:00003D60                 dd offset __unwindtable$?Main2@@YGHXZ
.xdata$x:00003D64                 db    0
.xdata$x:00003D65                 db    0
.xdata$x:00003D66                 db    0
.xdata$x:00003D67                 db    0
.xdata$x:00003D68                 db    0
.xdata$x:00003D69                 db    0
.xdata$x:00003D6A                 db    0
.xdata$x:00003D6B                 db    0
.xdata$x:00003D6C                 db    0
.xdata$x:00003D6D                 db    0
.xdata$x:00003D6E                 db    0
.xdata$x:00003D6F                 db    0
.xdata$x:00003D70                 db    0
.xdata$x:00003D71                 db    0
.xdata$x:00003D72                 db    0
.xdata$x:00003D73                 db    0
.xdata$x:00003D74                 db    0
.xdata$x:00003D75                 db    0
.xdata$x:00003D76                 db    0
.xdata$x:00003D77                 db    0
.xdata$x:00003D78                 db    1
.xdata$x:00003D79                 db    0
.xdata$x:00003D7A                 db    0
.xdata$x:00003D7B                 db    0
.xdata$x:00003D7C __unwindtable$?Main2@@YGHXZ db 0FFh     ; DATA XREF: .xdata$x:00003D60o
.xdata$x:00003D7D                 db 0FFh
.xdata$x:00003D7E                 db 0FFh
.xdata$x:00003D7F                 db 0FFh
.xdata$x:00003D80                 dd offset __unwindfunclet$?Main2@@YGHXZ$0
.xdata$x:00003D84                 align 8
.xdata$x:00003D88                 dd offset __unwindfunclet$?Main2@@YGHXZ$1
.xdata$x:00003D8C                 align 10h
.xdata$x:00003D90                 dd offset __unwindfunclet$?Main2@@YGHXZ$2
.xdata$x:00003D94                 db    2
.xdata$x:00003D95                 db    0
.xdata$x:00003D96                 db    0
.xdata$x:00003D97                 db    0
.xdata$x:00003D98                 dd offset __unwindfunclet$?Main2@@YGHXZ$3
.xdata$x:00003D9C                 db    3
.xdata$x:00003D9D                 db    0
.xdata$x:00003D9E                 db    0
.xdata$x:00003D9F                 db    0
.xdata$x:00003DA0                 dd offset __unwindfunclet$?Main2@@YGHXZ$4
.xdata$x:00003DA4                 db    3
.xdata$x:00003DA5                 db    0
.xdata$x:00003DA6                 db    0
.xdata$x:00003DA7                 db    0
.xdata$x:00003DA8                 dd offset __unwindfunclet$?Main2@@YGHXZ$5
.xdata$x:00003DAC                 db    5
.xdata$x:00003DAD                 db    0
.xdata$x:00003DAE                 db    0
.xdata$x:00003DAF                 db    0
.xdata$x:00003DB0                 dd offset __unwindfunclet$?Main2@@YGHXZ$6
.xdata$x:00003DB4                 db    6
.xdata$x:00003DB5                 db    0
.xdata$x:00003DB6                 db    0
.xdata$x:00003DB7                 db    0
.xdata$x:00003DB8                 dd offset __unwindfunclet$?Main2@@YGHXZ$7
.xdata$x:00003DBC                 db    7
.xdata$x:00003DBD                 db    0
.xdata$x:00003DBE                 db    0
.xdata$x:00003DBF                 db    0
.xdata$x:00003DC0                 dd offset __unwindfunclet$?Main2@@YGHXZ$8
.xdata$x:00003DC4                 db    7
.xdata$x:00003DC5                 db    0
.xdata$x:00003DC6                 db    0
.xdata$x:00003DC7                 db    0
.xdata$x:00003DC8                 dd offset __unwindfunclet$?Main2@@YGHXZ$9
.xdata$x:00003DCC                 db    7
.xdata$x:00003DCD                 db    0
.xdata$x:00003DCE                 db    0
.xdata$x:00003DCF                 db    0
.xdata$x:00003DD0                 dd offset __unwindfunclet$?Main2@@YGHXZ$10
.xdata$x:00003DD4                 db  0Ah
.xdata$x:00003DD5                 db    0
.xdata$x:00003DD6                 db    0
.xdata$x:00003DD7                 db    0
.xdata$x:00003DD8                 dd offset __unwindfunclet$?Main2@@YGHXZ$11
.xdata$x:00003DDC                 db  0Bh
.xdata$x:00003DDD                 db    0
.xdata$x:00003DDE                 db    0
.xdata$x:00003DDF                 db    0
.xdata$x:00003DE0                 dd offset __unwindfunclet$?Main2@@YGHXZ$12
.xdata$x:00003DE4                 db  0Ch
.xdata$x:00003DE5                 db    0
.xdata$x:00003DE6                 db    0
.xdata$x:00003DE7                 db    0
.xdata$x:00003DE8                 dd offset __unwindfunclet$?Main2@@YGHXZ$13
.xdata$x:00003DEC                 db  0Bh
.xdata$x:00003DED                 db    0
.xdata$x:00003DEE                 db    0
.xdata$x:00003DEF                 db    0
.xdata$x:00003DF0                 dd offset __unwindfunclet$?Main2@@YGHXZ$14
.xdata$x:00003DF4                 db  0Bh
.xdata$x:00003DF5                 db    0
.xdata$x:00003DF6                 db    0
.xdata$x:00003DF7                 db    0
.xdata$x:00003DF8                 dd offset __unwindfunclet$?Main2@@YGHXZ$15
.xdata$x:00003DFC                 db  0Fh
.xdata$x:00003DFD                 db    0
.xdata$x:00003DFE                 db    0
.xdata$x:00003DFF                 db    0
.xdata$x:00003E00                 dd offset __unwindfunclet$?Main2@@YGHXZ$16
.xdata$x:00003E04                 db  10h
.xdata$x:00003E05                 db    0
.xdata$x:00003E06                 db    0
.xdata$x:00003E07                 db    0
.xdata$x:00003E08                 dd offset __unwindfunclet$?Main2@@YGHXZ$17
.xdata$x:00003E0C                 db  11h
.xdata$x:00003E0D                 db    0
.xdata$x:00003E0E                 db    0
.xdata$x:00003E0F                 db    0
.xdata$x:00003E10                 dd offset __unwindfunclet$?Main2@@YGHXZ$18
.xdata$x:00003E14                 db    7
.xdata$x:00003E15                 db    0
.xdata$x:00003E16                 db    0
.xdata$x:00003E17                 db    0
.xdata$x:00003E18                 dd offset __unwindfunclet$?Main2@@YGHXZ$19
.xdata$x:00003E1C                 db  13h
.xdata$x:00003E1D                 db    0
.xdata$x:00003E1E                 db    0
.xdata$x:00003E1F                 db    0
.xdata$x:00003E20                 dd offset __unwindfunclet$?Main2@@YGHXZ$20
.xdata$x:00003E24                 db  14h
.xdata$x:00003E25                 db    0
.xdata$x:00003E26                 db    0
.xdata$x:00003E27                 db    0
.xdata$x:00003E28                 dd offset __unwindfunclet$?Main2@@YGHXZ$21
.xdata$x:00003E2C                 db    7
.xdata$x:00003E2D                 db    0
.xdata$x:00003E2E                 db    0
.xdata$x:00003E2F                 db    0
.xdata$x:00003E30                 dd offset __unwindfunclet$?Main2@@YGHXZ$22
.xdata$x:00003E34                 db  16h
.xdata$x:00003E35                 db    0
.xdata$x:00003E36                 db    0
.xdata$x:00003E37                 db    0
.xdata$x:00003E38                 dd offset __unwindfunclet$?Main2@@YGHXZ$23
.xdata$x:00003E3C                 db  17h
.xdata$x:00003E3D                 db    0
.xdata$x:00003E3E                 db    0
.xdata$x:00003E3F                 db    0
.xdata$x:00003E40                 dd offset __unwindfunclet$?Main2@@YGHXZ$24
.xdata$x:00003E44 __unwindtable$?PrintUInt32@@YGXAAVCStdOutStream@@II@Z db 0FFh
.xdata$x:00003E44                                         ; DATA XREF: .xdata$x:00003E54o
.xdata$x:00003E45                 db 0FFh
.xdata$x:00003E46                 db 0FFh
.xdata$x:00003E47                 db 0FFh
.xdata$x:00003E48                 dd offset __unwindfunclet$?PrintUInt32@@YGXAAVCStdOutStream@@II@Z$0
.xdata$x:00003E4C __ehfuncinfo$?PrintUInt32@@YGXAAVCStdOutStream@@II@Z db  22h ; "
.xdata$x:00003E4C                                         ; DATA XREF: __ehhandler$?PrintUInt32@@YGXAAVCStdOutStream@@II@Z+1Bo
.xdata$x:00003E4D                 db    5
.xdata$x:00003E4E                 db  93h ; ô
.xdata$x:00003E4F                 db  19h
.xdata$x:00003E50                 db    1
.xdata$x:00003E51                 db    0
.xdata$x:00003E52                 db    0
.xdata$x:00003E53                 db    0
.xdata$x:00003E54                 dd offset __unwindtable$?PrintUInt32@@YGXAAVCStdOutStream@@II@Z
.xdata$x:00003E58                 db    0
.xdata$x:00003E59                 db    0
.xdata$x:00003E5A                 db    0
.xdata$x:00003E5B                 db    0
.xdata$x:00003E5C                 db    0
.xdata$x:00003E5D                 db    0
.xdata$x:00003E5E                 db    0
.xdata$x:00003E5F                 db    0
.xdata$x:00003E60                 db    0
.xdata$x:00003E61                 db    0
.xdata$x:00003E62                 db    0
.xdata$x:00003E63                 db    0
.xdata$x:00003E64                 db    0
.xdata$x:00003E65                 db    0
.xdata$x:00003E66                 db    0
.xdata$x:00003E67                 db    0
.xdata$x:00003E68                 db    0
.xdata$x:00003E69                 db    0
.xdata$x:00003E6A                 db    0
.xdata$x:00003E6B                 db    0
.xdata$x:00003E6C                 db    1
.xdata$x:00003E6D                 db    0
.xdata$x:00003E6E                 db    0
.xdata$x:00003E6F                 db    0
.xdata$x:00003E70 __unwindtable$?WarningsCheck@@YGHJABVCCallbackConsoleBase@@ABUCUpdateErrorInfo@@AAVCStdOutStream@@_N@Z db 0FFh
.xdata$x:00003E70                                         ; DATA XREF: .xdata$x:00003E88o
.xdata$x:00003E71                 db 0FFh
.xdata$x:00003E72                 db 0FFh
.xdata$x:00003E73                 db 0FFh
.xdata$x:00003E74                 dd offset __unwindfunclet$?WarningsCheck@@YGHJABVCCallbackConsoleBase@@ABUCUpdateErrorInfo@@AAVCStdOutStream@@_N@Z$0
.xdata$x:00003E78                 db    0
.xdata$x:00003E79                 db    0
.xdata$x:00003E7A                 db    0
.xdata$x:00003E7B                 db    0
.xdata$x:00003E7C                 dd offset __unwindfunclet$?WarningsCheck@@YGHJABVCCallbackConsoleBase@@ABUCUpdateErrorInfo@@AAVCStdOutStream@@_N@Z$1
.xdata$x:00003E80 __ehfuncinfo$?WarningsCheck@@YGHJABVCCallbackConsoleBase@@ABUCUpdateErrorInfo@@AAVCStdOutStream@@_N@Z db  22h ; "
.xdata$x:00003E80                                         ; DATA XREF: __ehhandler$?WarningsCheck@@YGHJABVCCallbackConsoleBase@@ABUCUpdateErrorInfo@@AAVCStdOutStream@@_N@Z+11o
.xdata$x:00003E81                 db    5
.xdata$x:00003E82                 db  93h ; ô
.xdata$x:00003E83                 db  19h
.xdata$x:00003E84                 db    2
.xdata$x:00003E85                 db    0
.xdata$x:00003E86                 db    0
.xdata$x:00003E87                 db    0
.xdata$x:00003E88                 dd offset __unwindtable$?WarningsCheck@@YGHJABVCCallbackConsoleBase@@ABUCUpdateErrorInfo@@AAVCStdOutStream@@_N@Z
.xdata$x:00003E8C                 align 20h
.xdata$x:00003EA0                 db    1
.xdata$x:00003EA1                 db    0
.xdata$x:00003EA2                 db    0
.xdata$x:00003EA3                 db    0
.xdata$x:00003EA4 __unwindtable$?PrintWarningsPaths@@YGXABUCErrorPathCodes@@AAVCStdOutStream@@@Z db 0FFh
.xdata$x:00003EA4                                         ; DATA XREF: .xdata$x:00003EB4o
.xdata$x:00003EA5                 db 0FFh
.xdata$x:00003EA6                 db 0FFh
.xdata$x:00003EA7                 db 0FFh
.xdata$x:00003EA8                 dd offset __unwindfunclet$?PrintWarningsPaths@@YGXABUCErrorPathCodes@@AAVCStdOutStream@@@Z$0
.xdata$x:00003EAC __ehfuncinfo$?PrintWarningsPaths@@YGXABUCErrorPathCodes@@AAVCStdOutStream@@@Z db  22h ; "
.xdata$x:00003EAC                                         ; DATA XREF: __ehhandler$?PrintWarningsPaths@@YGXABUCErrorPathCodes@@AAVCStdOutStream@@@Z+11o
.xdata$x:00003EAD                 db    5
.xdata$x:00003EAE                 db  93h ; ô
.xdata$x:00003EAF                 db  19h
.xdata$x:00003EB0                 db    1
.xdata$x:00003EB1                 db    0
.xdata$x:00003EB2                 db    0
.xdata$x:00003EB3                 db    0
.xdata$x:00003EB4                 dd offset __unwindtable$?PrintWarningsPaths@@YGXABUCErrorPathCodes@@AAVCStdOutStream@@@Z
.xdata$x:00003EB8                 db    0
.xdata$x:00003EB9                 db    0
.xdata$x:00003EBA                 db    0
.xdata$x:00003EBB                 db    0
.xdata$x:00003EBC                 db    0
.xdata$x:00003EBD                 db    0
.xdata$x:00003EBE                 db    0
.xdata$x:00003EBF                 db    0
.xdata$x:00003EC0                 db    0
.xdata$x:00003EC1                 db    0
.xdata$x:00003EC2                 db    0
.xdata$x:00003EC3                 db    0
.xdata$x:00003EC4                 db    0
.xdata$x:00003EC5                 db    0
.xdata$x:00003EC6                 db    0
.xdata$x:00003EC7                 db    0
.xdata$x:00003EC8                 db    0
.xdata$x:00003EC9                 db    0
.xdata$x:00003ECA                 db    0
.xdata$x:00003ECB                 db    0
.xdata$x:00003ECC                 db    1
.xdata$x:00003ECD                 db    0
.xdata$x:00003ECE                 db    0
.xdata$x:00003ECF                 db    0
.xdata$x:00003ED0 __unwindtable$?PrintHexId@@YGXAAVCStdOutStream@@_K@Z db 0FFh
.xdata$x:00003ED0                                         ; DATA XREF: .xdata$x:00003EE0o
.xdata$x:00003ED1                 db 0FFh
.xdata$x:00003ED2                 db 0FFh
.xdata$x:00003ED3                 db 0FFh
.xdata$x:00003ED4                 dd offset __unwindfunclet$?PrintHexId@@YGXAAVCStdOutStream@@_K@Z$0
.xdata$x:00003ED8 __ehfuncinfo$?PrintHexId@@YGXAAVCStdOutStream@@_K@Z db  22h ; "
.xdata$x:00003ED8                                         ; DATA XREF: __ehhandler$?PrintHexId@@YGXAAVCStdOutStream@@_K@Z+1Bo
.xdata$x:00003ED9                 db    5
.xdata$x:00003EDA                 db  93h ; ô
.xdata$x:00003EDB                 db  19h
.xdata$x:00003EDC                 db    1
.xdata$x:00003EDD                 db    0
.xdata$x:00003EDE                 db    0
.xdata$x:00003EDF                 db    0
.xdata$x:00003EE0                 dd offset __unwindtable$?PrintHexId@@YGXAAVCStdOutStream@@_K@Z
.xdata$x:00003EE4                 db    0
.xdata$x:00003EE5                 db    0
.xdata$x:00003EE6                 db    0
.xdata$x:00003EE7                 db    0
.xdata$x:00003EE8                 db    0
.xdata$x:00003EE9                 db    0
.xdata$x:00003EEA                 db    0
.xdata$x:00003EEB                 db    0
.xdata$x:00003EEC                 db    0
.xdata$x:00003EED                 db    0
.xdata$x:00003EEE                 db    0
.xdata$x:00003EEF                 db    0
.xdata$x:00003EF0                 db    0
.xdata$x:00003EF1                 db    0
.xdata$x:00003EF2                 db    0
.xdata$x:00003EF3                 db    0
.xdata$x:00003EF4                 db    0
.xdata$x:00003EF5                 db    0
.xdata$x:00003EF6                 db    0
.xdata$x:00003EF7                 db    0
.xdata$x:00003EF8                 db    1
.xdata$x:00003EF9                 db    0
.xdata$x:00003EFA                 db    0
.xdata$x:00003EFB                 db    0
.xdata$x:00003EFB _xdata$x        ends
.xdata$x:00003EFB
.rtc$TMZ:00003EFC ; ===========================================================================
.rtc$TMZ:00003EFC
.rtc$TMZ:00003EFC ; Segment type: Pure data
.rtc$TMZ:00003EFC ; Segment permissions: Read
.rtc$TMZ:00003EFC _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00003EFC                 assume cs:_rtc$TMZ
.rtc$TMZ:00003EFC                 ;org 3EFCh
.rtc$TMZ:00003EFC ; COMDAT (pick any)
.rtc$TMZ:00003EFC __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00003EFC _rtc$TMZ        ends
.rtc$TMZ:00003EFC
.rtc$IMZ:00003F00 ; ===========================================================================
.rtc$IMZ:00003F00
.rtc$IMZ:00003F00 ; Segment type: Pure data
.rtc$IMZ:00003F00 ; Segment permissions: Read
.rtc$IMZ:00003F00 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00003F00                 assume cs:_rtc$IMZ
.rtc$IMZ:00003F00                 ;org 3F00h
.rtc$IMZ:00003F00 ; COMDAT (pick any)
.rtc$IMZ:00003F00 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00003F00 _rtc$IMZ        ends
.rtc$IMZ:00003F00
.xdata$x:00003F04 ; ===========================================================================
.xdata$x:00003F04
.xdata$x:00003F04 ; Segment type: Pure data
.xdata$x:00003F04 ; Segment permissions: Read
.xdata$x:00003F04 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00003F04                 assume cs:_xdata$x
.xdata$x:00003F04                 ;org 3F04h
.xdata$x:00003F04 ; COMDAT (pick any)
.xdata$x:00003F04                 public __CTA2PAD
.xdata$x:00003F04 __CTA2PAD       db    2                 ; DATA XREF: .xdata$x:00003D54o
.xdata$x:00003F05                 db    0
.xdata$x:00003F06                 db    0
.xdata$x:00003F07                 db    0
.xdata$x:00003F08                 dd offset __CT??_R0PAD@84
.xdata$x:00003F0C                 dd offset __CT??_R0PAX@84
.xdata$x:00003F0C _xdata$x        ends
.xdata$x:00003F0C
.xdata$x:00003F10 ; ===========================================================================
.xdata$x:00003F10
.xdata$x:00003F10 ; Segment type: Pure data
.xdata$x:00003F10 ; Segment permissions: Read
.xdata$x:00003F10 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00003F10                 assume cs:_xdata$x
.xdata$x:00003F10                 ;org 3F10h
.xdata$x:00003F10 ; COMDAT (pick any)
.xdata$x:00003F10                 public __CT??_R0PAD@84
.xdata$x:00003F10 __CT??_R0PAD@84 db    1                 ; DATA XREF: .xdata$x:00003F08o
.xdata$x:00003F11                 db    0
.xdata$x:00003F12                 db    0
.xdata$x:00003F13                 db    0
.xdata$x:00003F14                 dd offset ??_R0PAD@8    ; char * `RTTI Type Descriptor'
.xdata$x:00003F18                 db    0
.xdata$x:00003F19                 db    0
.xdata$x:00003F1A                 db    0
.xdata$x:00003F1B                 db    0
.xdata$x:00003F1C                 db 0FFh
.xdata$x:00003F1D                 db 0FFh
.xdata$x:00003F1E                 db 0FFh
.xdata$x:00003F1F                 db 0FFh
.xdata$x:00003F20                 db    0
.xdata$x:00003F21                 db    0
.xdata$x:00003F22                 db    0
.xdata$x:00003F23                 db    0
.xdata$x:00003F24                 db    4
.xdata$x:00003F25                 db    0
.xdata$x:00003F26                 db    0
.xdata$x:00003F27                 db    0
.xdata$x:00003F28                 db    0
.xdata$x:00003F29                 db    0
.xdata$x:00003F2A                 db    0
.xdata$x:00003F2B                 db    0
.xdata$x:00003F2B _xdata$x        ends
.xdata$x:00003F2B
.data:00003F2C ; ===========================================================================
.data:00003F2C
.data:00003F2C ; Segment type: Pure data
.data:00003F2C ; Segment permissions: Read/Write
.data:00003F2C _data           segment dword public 'DATA' use32
.data:00003F2C                 assume cs:_data
.data:00003F2C                 ;org 3F2Ch
.data:00003F2C ; COMDAT (pick any)
.data:00003F2C                 public ??_R0PAD@8
.data:00003F2C ; char * `RTTI Type Descriptor'
.data:00003F2C ??_R0PAD@8      dd offset ??_7type_info@@6B@ ; DATA XREF: .xdata$x:00003F14o
.data:00003F2C                                         ; const type_info::`vftable'
.data:00003F30                 db    0
.data:00003F31                 db    0
.data:00003F32                 db    0
.data:00003F33                 db    0
.data:00003F34                 db  2Eh ; .
.data:00003F35                 db  50h ; P
.data:00003F36                 db  41h ; A
.data:00003F37                 db  44h ; D
.data:00003F38                 db    0
.data:00003F39                 align 4
.data:00003F39 _data           ends
.data:00003F39
.xdata$x:00003F3C ; ===========================================================================
.xdata$x:00003F3C
.xdata$x:00003F3C ; Segment type: Pure data
.xdata$x:00003F3C ; Segment permissions: Read
.xdata$x:00003F3C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00003F3C                 assume cs:_xdata$x
.xdata$x:00003F3C                 ;org 3F3Ch
.xdata$x:00003F3C ; COMDAT (pick any)
.xdata$x:00003F3C                 public __CT??_R0PAX@84
.xdata$x:00003F3C __CT??_R0PAX@84 db    1                 ; DATA XREF: .xdata$x:00003F0Co
.xdata$x:00003F3D                 db    0
.xdata$x:00003F3E                 db    0
.xdata$x:00003F3F                 db    0
.xdata$x:00003F40                 dd offset ??_R0PAX@8    ; void * `RTTI Type Descriptor'
.xdata$x:00003F44                 align 8
.xdata$x:00003F48                 db 0FFh
.xdata$x:00003F49                 db 0FFh
.xdata$x:00003F4A                 db 0FFh
.xdata$x:00003F4B                 db 0FFh
.xdata$x:00003F4C                 db    0
.xdata$x:00003F4D                 db    0
.xdata$x:00003F4E                 db    0
.xdata$x:00003F4F                 db    0
.xdata$x:00003F50                 db    4
.xdata$x:00003F51                 db    0
.xdata$x:00003F52                 db    0
.xdata$x:00003F53                 db    0
.xdata$x:00003F54                 db    0
.xdata$x:00003F55                 db    0
.xdata$x:00003F56                 db    0
.xdata$x:00003F57                 db    0
.xdata$x:00003F57 _xdata$x        ends
.xdata$x:00003F57
.data:00003F58 ; ===========================================================================
.data:00003F58
.data:00003F58 ; Segment type: Pure data
.data:00003F58 ; Segment permissions: Read/Write
.data:00003F58 _data           segment dword public 'DATA' use32
.data:00003F58                 assume cs:_data
.data:00003F58                 ;org 3F58h
.data:00003F58 ; COMDAT (pick any)
.data:00003F58                 public ??_R0PAX@8
.data:00003F58 ; void * `RTTI Type Descriptor'
.data:00003F58 ??_R0PAX@8      dd offset ??_7type_info@@6B@ ; DATA XREF: .xdata$x:00003F40o
.data:00003F58                                         ; const type_info::`vftable'
.data:00003F5C                 align 10h
.data:00003F60 a_pax           db '.PAX',0
.data:00003F65                 align 4
.data:00003F65 _data           ends
.data:00003F65
.text:00003F68 ; ===========================================================================
.text:00003F68
.text:00003F68 ; Segment type: Pure code
.text:00003F68 ; Segment permissions: Read/Execute
.text:00003F68 _text           segment para public 'CODE' use32
.text:00003F68                 assume cs:_text
.text:00003F68                 ;org 3F68h
.text:00003F68 ; COMDAT (pick any)
.text:00003F68                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003F68
.text:00003F68 ; =============== S U B R O U T I N E =======================================
.text:00003F68
.text:00003F68 ; Attributes: bp-based frame
.text:00003F68
.text:00003F68 ; _DWORD __thiscall AString::~AString(AString *__hidden this)
.text:00003F68                 public ??1AString@@QAE@XZ
.text:00003F68 ??1AString@@QAE@XZ proc near            ; CODE XREF: Main2(void)+1B63p
.text:00003F68                                         ; PrintUInt32(CStdOutStream &,uint,uint)+73p ...
.text:00003F68
.text:00003F68 var_8           = dword ptr -8
.text:00003F68 var_4           = dword ptr -4
.text:00003F68
.text:00003F68                 push    ebp
.text:00003F69                 mov     ebp, esp
.text:00003F6B                 sub     esp, 8
.text:00003F6E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00003F75                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003F7C                 mov     [ebp+var_4], ecx
.text:00003F7F                 mov     eax, [ebp+var_4]
.text:00003F82                 mov     ecx, [eax]
.text:00003F84                 mov     [ebp+var_8], ecx
.text:00003F87                 mov     edx, [ebp+var_8]
.text:00003F8A                 push    edx             ; void *
.text:00003F8B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00003F90                 add     esp, 4
.text:00003F93                 add     esp, 8
.text:00003F96                 cmp     ebp, esp
.text:00003F98                 call    __RTC_CheckEsp
.text:00003F9D                 mov     esp, ebp
.text:00003F9F                 pop     ebp
.text:00003FA0                 retn
.text:00003FA0 ??1AString@@QAE@XZ endp
.text:00003FA0
.text:00003FA0 ; ---------------------------------------------------------------------------
.text:00003FA1                 align 4
.text:00003FA1 _text           ends
.text:00003FA1
.text:00003FA4 ; ===========================================================================
.text:00003FA4
.text:00003FA4 ; Segment type: Pure code
.text:00003FA4 ; Segment permissions: Read/Execute
.text:00003FA4 _text           segment para public 'CODE' use32
.text:00003FA4                 assume cs:_text
.text:00003FA4                 ;org 3FA4h
.text:00003FA4 ; COMDAT (pick any)
.text:00003FA4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003FA4
.text:00003FA4 ; =============== S U B R O U T I N E =======================================
.text:00003FA4
.text:00003FA4 ; Attributes: bp-based frame
.text:00003FA4
.text:00003FA4 ; _DWORD __thiscall UString::~UString(UString *__hidden this)
.text:00003FA4                 public ??1UString@@QAE@XZ
.text:00003FA4 ??1UString@@QAE@XZ proc near            ; CODE XREF: Main2(void)+96p
.text:00003FA4                                         ; Main2(void)+904p ...
.text:00003FA4
.text:00003FA4 var_8           = dword ptr -8
.text:00003FA4 var_4           = dword ptr -4
.text:00003FA4
.text:00003FA4                 push    ebp
.text:00003FA5                 mov     ebp, esp
.text:00003FA7                 sub     esp, 8
.text:00003FAA                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00003FB1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003FB8                 mov     [ebp+var_4], ecx
.text:00003FBB                 mov     eax, [ebp+var_4]
.text:00003FBE                 mov     ecx, [eax]
.text:00003FC0                 mov     [ebp+var_8], ecx
.text:00003FC3                 mov     edx, [ebp+var_8]
.text:00003FC6                 push    edx             ; void *
.text:00003FC7                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00003FCC                 add     esp, 4
.text:00003FCF                 add     esp, 8
.text:00003FD2                 cmp     ebp, esp
.text:00003FD4                 call    __RTC_CheckEsp
.text:00003FD9                 mov     esp, ebp
.text:00003FDB                 pop     ebp
.text:00003FDC                 retn
.text:00003FDC ??1UString@@QAE@XZ endp
.text:00003FDC
.text:00003FDC ; ---------------------------------------------------------------------------
.text:00003FDD                 align 10h
.text:00003FDD _text           ends
.text:00003FDD
.text:00003FE0 ; ===========================================================================
.text:00003FE0
.text:00003FE0 ; Segment type: Pure code
.text:00003FE0 ; Segment permissions: Read/Execute
.text:00003FE0 _text           segment para public 'CODE' use32
.text:00003FE0                 assume cs:_text
.text:00003FE0                 ;org 3FE0h
.text:00003FE0 ; COMDAT (pick any)
.text:00003FE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003FE0
.text:00003FE0 ; =============== S U B R O U T I N E =======================================
.text:00003FE0
.text:00003FE0 ; Attributes: bp-based frame
.text:00003FE0
.text:00003FE0 ; bool __thiscall UString::IsEmpty(UString *__hidden this)
.text:00003FE0                 public ?IsEmpty@UString@@QBE_NXZ
.text:00003FE0 ?IsEmpty@UString@@QBE_NXZ proc near     ; CODE XREF: Main2(void)+709p
.text:00003FE0                                         ; Main2(void)+FE0p ...
.text:00003FE0
.text:00003FE0 var_4           = dword ptr -4
.text:00003FE0
.text:00003FE0                 push    ebp
.text:00003FE1                 mov     ebp, esp
.text:00003FE3                 push    ecx
.text:00003FE4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003FEB                 mov     [ebp+var_4], ecx
.text:00003FEE                 mov     eax, [ebp+var_4]
.text:00003FF1                 xor     ecx, ecx
.text:00003FF3                 cmp     dword ptr [eax+4], 0
.text:00003FF7                 setz    cl
.text:00003FFA                 mov     al, cl
.text:00003FFC                 mov     esp, ebp
.text:00003FFE                 pop     ebp
.text:00003FFF                 retn
.text:00003FFF ?IsEmpty@UString@@QBE_NXZ endp
.text:00003FFF
.text:00003FFF _text           ends
.text:00003FFF
.text:00004000 ; ===========================================================================
.text:00004000
.text:00004000 ; Segment type: Pure code
.text:00004000 ; Segment permissions: Read/Execute
.text:00004000 _text           segment para public 'CODE' use32
.text:00004000                 assume cs:_text
.text:00004000                 ;org 4000h
.text:00004000 ; COMDAT (pick any)
.text:00004000                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004000
.text:00004000 ; =============== S U B R O U T I N E =======================================
.text:00004000
.text:00004000 ; Attributes: bp-based frame
.text:00004000
.text:00004000 ; public: __thiscall UString::operator wchar_t const *(void)const
.text:00004000                 public ??BUString@@QBEPB_WXZ
.text:00004000 ??BUString@@QBEPB_WXZ proc near         ; CODE XREF: Main2(void)+1000p
.text:00004000                                         ; PrintString(CStdOutStream &,UString const &,uint)+22p ...
.text:00004000
.text:00004000 var_4           = dword ptr -4
.text:00004000
.text:00004000                 push    ebp
.text:00004001                 mov     ebp, esp
.text:00004003                 push    ecx
.text:00004004                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000400B                 mov     [ebp+var_4], ecx
.text:0000400E                 mov     eax, [ebp+var_4]
.text:00004011                 mov     eax, [eax]
.text:00004013                 mov     esp, ebp
.text:00004015                 pop     ebp
.text:00004016                 retn
.text:00004016 ??BUString@@QBEPB_WXZ endp
.text:00004016
.text:00004016 ; ---------------------------------------------------------------------------
.text:00004017                 align 4
.text:00004017 _text           ends
.text:00004017
.text:00004018 ; ===========================================================================
.text:00004018
.text:00004018 ; Segment type: Pure code
.text:00004018 ; Segment permissions: Read/Execute
.text:00004018 _text           segment para public 'CODE' use32
.text:00004018                 assume cs:_text
.text:00004018                 ;org 4018h
.text:00004018 ; COMDAT (pick any)
.text:00004018                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004018
.text:00004018 ; =============== S U B R O U T I N E =======================================
.text:00004018
.text:00004018 ; Attributes: bp-based frame
.text:00004018
.text:00004018 ; public: class UString & __thiscall UString::operator+=(wchar_t)
.text:00004018                 public ??YUString@@QAEAAV0@_W@Z
.text:00004018 ??YUString@@QAEAAV0@_W@Z proc near      ; CODE XREF: Main2(void)+742p
.text:00004018
.text:00004018 var_C           = dword ptr -0Ch
.text:00004018 var_8           = dword ptr -8
.text:00004018 var_4           = dword ptr -4
.text:00004018 arg_0           = word ptr  8
.text:00004018
.text:00004018                 push    ebp
.text:00004019                 mov     ebp, esp
.text:0000401B                 sub     esp, 0Ch
.text:0000401E                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00004025                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000402C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004033                 mov     [ebp+var_4], ecx
.text:00004036                 mov     eax, [ebp+var_4]
.text:00004039                 mov     ecx, [ebp+var_4]
.text:0000403C                 mov     edx, [eax+8]
.text:0000403F                 cmp     edx, [ecx+4]
.text:00004042                 jnz     short loc_404C
.text:00004044                 mov     ecx, [ebp+var_4] ; this
.text:00004047                 call    ?Grow_1@UString@@AAEXXZ ; UString::Grow_1(void)
.text:0000404C
.text:0000404C loc_404C:                               ; CODE XREF: UString::operator+=(wchar_t)+2Aj
.text:0000404C                 mov     eax, [ebp+var_4]
.text:0000404F                 mov     ecx, [eax+4]
.text:00004052                 mov     [ebp+var_8], ecx
.text:00004055                 mov     edx, [ebp+var_4]
.text:00004058                 mov     eax, [edx]
.text:0000405A                 mov     [ebp+var_C], eax
.text:0000405D                 mov     ecx, [ebp+var_8]
.text:00004060                 mov     edx, [ebp+var_C]
.text:00004063                 mov     ax, [ebp+arg_0]
.text:00004067                 mov     [edx+ecx*2], ax
.text:0000406B                 mov     ecx, [ebp+var_8]
.text:0000406E                 add     ecx, 1
.text:00004071                 mov     [ebp+var_8], ecx
.text:00004074                 xor     edx, edx
.text:00004076                 mov     eax, [ebp+var_8]
.text:00004079                 mov     ecx, [ebp+var_C]
.text:0000407C                 mov     [ecx+eax*2], dx
.text:00004080                 mov     edx, [ebp+var_4]
.text:00004083                 mov     eax, [ebp+var_8]
.text:00004086                 mov     [edx+4], eax
.text:00004089                 mov     eax, [ebp+var_4]
.text:0000408C                 add     esp, 0Ch
.text:0000408F                 cmp     ebp, esp
.text:00004091                 call    __RTC_CheckEsp
.text:00004096                 mov     esp, ebp
.text:00004098                 pop     ebp
.text:00004099                 retn    4
.text:00004099 ??YUString@@QAEAAV0@_W@Z endp
.text:00004099
.text:00004099 _text           ends
.text:00004099
.text:0000409C ; ===========================================================================
.text:0000409C
.text:0000409C ; Segment type: Pure code
.text:0000409C ; Segment permissions: Read/Execute
.text:0000409C _text           segment para public 'CODE' use32
.text:0000409C                 assume cs:_text
.text:0000409C                 ;org 409Ch
.text:0000409C ; COMDAT (pick any)
.text:0000409C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000409C
.text:0000409C ; =============== S U B R O U T I N E =======================================
.text:0000409C
.text:0000409C ; Attributes: bp-based frame
.text:0000409C
.text:0000409C ; bool NWindows::NSecurity::EnablePrivilege_LockMemory(NWindows::NSecurity *__hidden this, bool)
.text:0000409C                 public ?EnablePrivilege_LockMemory@NSecurity@NWindows@@YG_N_N@Z
.text:0000409C ?EnablePrivilege_LockMemory@NSecurity@NWindows@@YG_N_N@Z proc near
.text:0000409C                                         ; CODE XREF: Main2(void)+234p
.text:0000409C
.text:0000409C this            = dword ptr  8
.text:0000409C
.text:0000409C                 push    ebp             ; bool
.text:0000409D                 mov     ebp, esp
.text:0000409F                 movzx   eax, byte ptr [ebp+this]
.text:000040A3                 push    eax             ; char *
.text:000040A4                 push    offset ??_C@_0BG@OCFLNMAB@SeLockMemoryPrivilege?$AA@ ; "SeLockMemoryPrivilege"
.text:000040A9                 call    ?EnablePrivilege@NSecurity@NWindows@@YG_NPBD_N@Z ; NWindows::NSecurity::EnablePrivilege(char const *,bool)
.text:000040AE                 cmp     ebp, esp
.text:000040B0                 call    __RTC_CheckEsp
.text:000040B5                 pop     ebp
.text:000040B6                 retn    4
.text:000040B6 ?EnablePrivilege_LockMemory@NSecurity@NWindows@@YG_N_N@Z endp
.text:000040B6
.text:000040B6 ; ---------------------------------------------------------------------------
.text:000040B9                 align 4
.text:000040B9 _text           ends
.text:000040B9
.rdata:000040BC ; ===========================================================================
.rdata:000040BC
.rdata:000040BC ; Segment type: Pure data
.rdata:000040BC ; Segment permissions: Read
.rdata:000040BC _rdata          segment dword public 'DATA' use32
.rdata:000040BC                 assume cs:_rdata
.rdata:000040BC                 ;org 40BCh
.rdata:000040BC ; COMDAT (pick any)
.rdata:000040BC                 public ??_C@_0BG@OCFLNMAB@SeLockMemoryPrivilege?$AA@
.rdata:000040BC ; NWindows::NSecurity `string'
.rdata:000040BC ??_C@_0BG@OCFLNMAB@SeLockMemoryPrivilege?$AA@ db 'SeLockMemoryPrivilege',0
.rdata:000040BC                                         ; DATA XREF: NWindows::NSecurity::EnablePrivilege_LockMemory(bool)+8o
.rdata:000040D2                 align 4
.rdata:000040D2 _rdata          ends
.rdata:000040D2
.text:000040D4 ; ===========================================================================
.text:000040D4
.text:000040D4 ; Segment type: Pure code
.text:000040D4 ; Segment permissions: Read/Execute
.text:000040D4 _text           segment para public 'CODE' use32
.text:000040D4                 assume cs:_text
.text:000040D4                 ;org 40D4h
.text:000040D4 ; COMDAT (pick any)
.text:000040D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000040D4
.text:000040D4 ; =============== S U B R O U T I N E =======================================
.text:000040D4
.text:000040D4 ; Attributes: bp-based frame
.text:000040D4
.text:000040D4 ; void NWindows::NSecurity::EnablePrivilege_SymLink(NWindows::NSecurity *__hidden this)
.text:000040D4                 public ?EnablePrivilege_SymLink@NSecurity@NWindows@@YGXXZ
.text:000040D4 ?EnablePrivilege_SymLink@NSecurity@NWindows@@YGXXZ proc near
.text:000040D4                                         ; CODE XREF: Main2(void):loc_1071p
.text:000040D4
.text:000040D4 this            = dword ptr  8
.text:000040D4
.text:000040D4                 push    ebp             ; bool
.text:000040D5                 mov     ebp, esp
.text:000040D7                 push    (offset $SG77136+1) ; char *
.text:000040D9                 push    offset ??_C@_0BD@CPPEOGLA@SeRestorePrivilege?$AA@ ; "SeRestorePrivilege"
.text:000040DE                 call    ?EnablePrivilege@NSecurity@NWindows@@YG_NPBD_N@Z ; NWindows::NSecurity::EnablePrivilege(char const *,bool)
.text:000040E3                 push    (offset $SG77136+1) ; char *
.text:000040E5                 push    offset ??_C@_0BO@JMOKIFMN@SeCreateSymbolicLinkPrivilege?$AA@ ; "SeCreateSymbolicLinkPrivilege"
.text:000040EA                 call    ?EnablePrivilege@NSecurity@NWindows@@YG_NPBD_N@Z ; NWindows::NSecurity::EnablePrivilege(char const *,bool)
.text:000040EF                 cmp     ebp, esp
.text:000040F1                 call    __RTC_CheckEsp
.text:000040F6                 pop     ebp
.text:000040F7                 retn
.text:000040F7 ?EnablePrivilege_SymLink@NSecurity@NWindows@@YGXXZ endp
.text:000040F7
.text:000040F7 _text           ends
.text:000040F7
.rdata:000040F8 ; ===========================================================================
.rdata:000040F8
.rdata:000040F8 ; Segment type: Pure data
.rdata:000040F8 ; Segment permissions: Read
.rdata:000040F8 _rdata          segment dword public 'DATA' use32
.rdata:000040F8                 assume cs:_rdata
.rdata:000040F8                 ;org 40F8h
.rdata:000040F8 ; COMDAT (pick any)
.rdata:000040F8                 public ??_C@_0BO@JMOKIFMN@SeCreateSymbolicLinkPrivilege?$AA@
.rdata:000040F8 ; NWindows::NSecurity `string'
.rdata:000040F8 ??_C@_0BO@JMOKIFMN@SeCreateSymbolicLinkPrivilege?$AA@ db 'SeCreateSymbolicLinkPrivilege',0
.rdata:000040F8                                         ; DATA XREF: NWindows::NSecurity::EnablePrivilege_SymLink(void)+11o
.rdata:00004116                 align 4
.rdata:00004116 _rdata          ends
.rdata:00004116
.rdata:00004118 ; ===========================================================================
.rdata:00004118
.rdata:00004118 ; Segment type: Pure data
.rdata:00004118 ; Segment permissions: Read
.rdata:00004118 _rdata          segment dword public 'DATA' use32
.rdata:00004118                 assume cs:_rdata
.rdata:00004118                 ;org 4118h
.rdata:00004118 ; COMDAT (pick any)
.rdata:00004118                 public ??_C@_0BD@CPPEOGLA@SeRestorePrivilege?$AA@
.rdata:00004118 ; NWindows::NSecurity `string'
.rdata:00004118 ??_C@_0BD@CPPEOGLA@SeRestorePrivilege?$AA@ db 'SeRestorePrivilege',0
.rdata:00004118                                         ; DATA XREF: NWindows::NSecurity::EnablePrivilege_SymLink(void)+5o
.rdata:0000412B                 align 4
.rdata:0000412B _rdata          ends
.rdata:0000412B
.text:0000412C ; ===========================================================================
.text:0000412C
.text:0000412C ; Segment type: Pure code
.text:0000412C ; Segment permissions: Read/Execute
.text:0000412C _text           segment para public 'CODE' use32
.text:0000412C                 assume cs:_text
.text:0000412C                 ;org 412Ch
.text:0000412C ; COMDAT (pick any)
.text:0000412C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000412C
.text:0000412C ; =============== S U B R O U T I N E =======================================
.text:0000412C
.text:0000412C ; Attributes: bp-based frame
.text:0000412C
.text:0000412C ; public: __thiscall CCodecs::CCodecs(void)
.text:0000412C                 public ??0CCodecs@@QAE@XZ
.text:0000412C ??0CCodecs@@QAE@XZ proc near            ; CODE XREF: Main2(void)+2F4p
.text:0000412C
.text:0000412C var_4           = dword ptr -4
.text:0000412C
.text:0000412C                 push    ebp
.text:0000412D                 mov     ebp, esp
.text:0000412F                 push    ecx
.text:00004130                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004137                 mov     [ebp+var_4], ecx
.text:0000413A                 mov     ecx, [ebp+var_4]
.text:0000413D                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00004142                 mov     ecx, [ebp+var_4]
.text:00004145                 add     ecx, 4          ; this
.text:00004148                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:0000414D                 mov     eax, [ebp+var_4]
.text:00004150                 mov     dword ptr [eax], offset ??_7CCodecs@@6B@ ; const CCodecs::`vftable'
.text:00004156                 mov     ecx, [ebp+var_4]
.text:00004159                 add     ecx, 8
.text:0000415C                 call    ??0?$CObjectVector@UCArcInfoEx@@@@QAE@XZ ; CObjectVector<CArcInfoEx>::CObjectVector<CArcInfoEx>(void)
.text:00004161                 mov     ecx, [ebp+var_4]
.text:00004164                 mov     byte ptr [ecx+14h], 0
.text:00004168                 mov     edx, [ebp+var_4]
.text:0000416B                 mov     byte ptr [edx+15h], 0
.text:0000416F                 mov     eax, [ebp+var_4]
.text:00004172                 add     esp, 4
.text:00004175                 cmp     ebp, esp
.text:00004177                 call    __RTC_CheckEsp
.text:0000417C                 mov     esp, ebp
.text:0000417E                 pop     ebp
.text:0000417F                 retn
.text:0000417F ??0CCodecs@@QAE@XZ endp
.text:0000417F
.text:0000417F _text           ends
.text:0000417F
.rdata:00004180 ; ===========================================================================
.rdata:00004180
.rdata:00004180 ; Segment type: Pure data
.rdata:00004180 ; Segment permissions: Read
.rdata:00004180 _rdata          segment dword public 'DATA' use32
.rdata:00004180                 assume cs:_rdata
.rdata:00004180                 ;org 4180h
.rdata:00004180 ; COMDAT (pick largest)
.rdata:00004180                 dd offset ??_R4CCodecs@@6B@ ; const CCodecs::`RTTI Complete Object Locator'
.rdata:00004184                 public ??_7CCodecs@@6B@
.rdata:00004184 ; const CCodecs::`vftable'
.rdata:00004184 ??_7CCodecs@@6B@ dd offset ?QueryInterface@CCodecs@@UAGJABU_GUID@@PAPAX@Z
.rdata:00004184                                         ; DATA XREF: CCodecs::CCodecs(void)+24o
.rdata:00004184                                         ; CCodecs::~CCodecs(void)+11o
.rdata:00004184                                         ; CCodecs::QueryInterface(_GUID const &,void * *)
.rdata:00004188                 dd offset ?AddRef@CCodecs@@UAGKXZ ; CCodecs::AddRef(void)
.rdata:0000418C                 dd offset ?Release@CCodecs@@UAGKXZ ; CCodecs::Release(void)
.rdata:0000418C _rdata          ends
.rdata:0000418C
.rdata$r:00004190 ; ===========================================================================
.rdata$r:00004190
.rdata$r:00004190 ; Segment type: Pure data
.rdata$r:00004190 ; Segment permissions: Read
.rdata$r:00004190 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004190                 assume cs:_rdata$r
.rdata$r:00004190                 ;org 4190h
.rdata$r:00004190 ; COMDAT (pick any)
.rdata$r:00004190                 public ??_R4CCodecs@@6B@
.rdata$r:00004190 ; const CCodecs::`RTTI Complete Object Locator'
.rdata$r:00004190 ??_R4CCodecs@@6B@ db    0               ; DATA XREF: .rdata:00004180o
.rdata$r:00004191                 db    0
.rdata$r:00004192                 db    0
.rdata$r:00004193                 db    0
.rdata$r:00004194                 db    0
.rdata$r:00004195                 db    0
.rdata$r:00004196                 db    0
.rdata$r:00004197                 db    0
.rdata$r:00004198                 db    0
.rdata$r:00004199                 db    0
.rdata$r:0000419A                 db    0
.rdata$r:0000419B                 db    0
.rdata$r:0000419C                 dd offset ??_R0?AVCCodecs@@@8 ; CCodecs `RTTI Type Descriptor'
.rdata$r:000041A0                 dd offset ??_R3CCodecs@@8 ; CCodecs::`RTTI Class Hierarchy Descriptor'
.rdata$r:000041A0 _rdata$r        ends
.rdata$r:000041A0
.data:000041A4 ; ===========================================================================
.data:000041A4
.data:000041A4 ; Segment type: Pure data
.data:000041A4 ; Segment permissions: Read/Write
.data:000041A4 _data           segment dword public 'DATA' use32
.data:000041A4                 assume cs:_data
.data:000041A4                 ;org 41A4h
.data:000041A4 ; COMDAT (pick any)
.data:000041A4                 public ??_R0?AVCCodecs@@@8
.data:000041A4 ; class CCodecs `RTTI Type Descriptor'
.data:000041A4 ??_R0?AVCCodecs@@@8 dd offset ??_7type_info@@6B@
.data:000041A4                                         ; DATA XREF: .rdata$r:0000419Co
.data:000041A4                                         ; .rdata$r:CCodecs::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000041A4                                         ; const type_info::`vftable'
.data:000041A8                 db    0
.data:000041A9                 db    0
.data:000041AA                 db    0
.data:000041AB                 db    0
.data:000041AC                 db  2Eh ; .
.data:000041AD                 db  3Fh ; ?
.data:000041AE                 db  41h ; A
.data:000041AF                 db  56h ; V
.data:000041B0                 db  43h ; C
.data:000041B1                 db  43h ; C
.data:000041B2                 db  6Fh ; o
.data:000041B3                 db  64h ; d
.data:000041B4                 db  65h ; e
.data:000041B5                 db  63h ; c
.data:000041B6                 db  73h ; s
.data:000041B7                 db  40h ; @
.data:000041B8                 db  40h ; @
.data:000041B9                 db    0
.data:000041BA                 align 4
.data:000041BA _data           ends
.data:000041BA
.rdata$r:000041BC ; ===========================================================================
.rdata$r:000041BC
.rdata$r:000041BC ; Segment type: Pure data
.rdata$r:000041BC ; Segment permissions: Read
.rdata$r:000041BC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000041BC                 assume cs:_rdata$r
.rdata$r:000041BC                 ;org 41BCh
.rdata$r:000041BC ; COMDAT (pick any)
.rdata$r:000041BC                 public ??_R3CCodecs@@8
.rdata$r:000041BC ; CCodecs::`RTTI Class Hierarchy Descriptor'
.rdata$r:000041BC ??_R3CCodecs@@8 db    0                 ; DATA XREF: .rdata$r:000041A0o
.rdata$r:000041BC                                         ; .rdata$r:000041F4o
.rdata$r:000041BD                 db    0
.rdata$r:000041BE                 db    0
.rdata$r:000041BF                 db    0
.rdata$r:000041C0                 db    1
.rdata$r:000041C1                 db    0
.rdata$r:000041C2                 db    0
.rdata$r:000041C3                 db    0
.rdata$r:000041C4                 db    3
.rdata$r:000041C5                 db    0
.rdata$r:000041C6                 db    0
.rdata$r:000041C7                 db    0
.rdata$r:000041C8                 dd offset ??_R2CCodecs@@8 ; CCodecs::`RTTI Base Class Array'
.rdata$r:000041C8 _rdata$r        ends
.rdata$r:000041C8
.rdata$r:000041CC ; ===========================================================================
.rdata$r:000041CC
.rdata$r:000041CC ; Segment type: Pure data
.rdata$r:000041CC ; Segment permissions: Read
.rdata$r:000041CC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000041CC                 assume cs:_rdata$r
.rdata$r:000041CC                 ;org 41CCh
.rdata$r:000041CC ; COMDAT (pick any)
.rdata$r:000041CC                 public ??_R2CCodecs@@8
.rdata$r:000041CC ; CCodecs::`RTTI Base Class Array'
.rdata$r:000041CC ??_R2CCodecs@@8 dd offset ??_R1A@?0A@EA@CCodecs@@8
.rdata$r:000041CC                                         ; DATA XREF: .rdata$r:000041C8o
.rdata$r:000041CC                                         ; CCodecs::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000041D0                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000041D4                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:000041D8                 db    0
.rdata$r:000041D9                 align 4
.rdata$r:000041D9 _rdata$r        ends
.rdata$r:000041D9
.rdata$r:000041DC ; ===========================================================================
.rdata$r:000041DC
.rdata$r:000041DC ; Segment type: Pure data
.rdata$r:000041DC ; Segment permissions: Read
.rdata$r:000041DC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000041DC                 assume cs:_rdata$r
.rdata$r:000041DC                 ;org 41DCh
.rdata$r:000041DC ; COMDAT (pick any)
.rdata$r:000041DC                 public ??_R1A@?0A@EA@CCodecs@@8
.rdata$r:000041DC ; CCodecs::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000041DC ??_R1A@?0A@EA@CCodecs@@8 dd offset ??_R0?AVCCodecs@@@8
.rdata$r:000041DC                                         ; DATA XREF: .rdata$r:CCodecs::`RTTI Base Class Array'o
.rdata$r:000041DC                                         ; CCodecs `RTTI Type Descriptor'
.rdata$r:000041E0                 db    2
.rdata$r:000041E1                 db    0
.rdata$r:000041E2                 db    0
.rdata$r:000041E3                 db    0
.rdata$r:000041E4                 db    0
.rdata$r:000041E5                 db    0
.rdata$r:000041E6                 db    0
.rdata$r:000041E7                 db    0
.rdata$r:000041E8                 db 0FFh
.rdata$r:000041E9                 db 0FFh
.rdata$r:000041EA                 db 0FFh
.rdata$r:000041EB                 db 0FFh
.rdata$r:000041EC                 db    0
.rdata$r:000041ED                 db    0
.rdata$r:000041EE                 db    0
.rdata$r:000041EF                 db    0
.rdata$r:000041F0                 db  40h ; @
.rdata$r:000041F1                 db    0
.rdata$r:000041F2                 db    0
.rdata$r:000041F3                 db    0
.rdata$r:000041F4                 dd offset ??_R3CCodecs@@8 ; CCodecs::`RTTI Class Hierarchy Descriptor'
.rdata$r:000041F4 _rdata$r        ends
.rdata$r:000041F4
.rdata$r:000041F8 ; ===========================================================================
.rdata$r:000041F8
.rdata$r:000041F8 ; Segment type: Pure data
.rdata$r:000041F8 ; Segment permissions: Read
.rdata$r:000041F8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000041F8                 assume cs:_rdata$r
.rdata$r:000041F8                 ;org 41F8h
.rdata$r:000041F8 ; COMDAT (pick any)
.rdata$r:000041F8                 public ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:000041F8 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000041F8 ??_R1A@?0A@EA@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000041F8                                         ; DATA XREF: .rdata$r:000041D0o
.rdata$r:000041F8                                         ; .rdata$r:IUnknown::`RTTI Base Class Array'o ...
.rdata$r:000041F8                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:000041FC                 db    0
.rdata$r:000041FD                 db    0
.rdata$r:000041FE                 db    0
.rdata$r:000041FF                 db    0
.rdata$r:00004200                 db    0
.rdata$r:00004201                 db    0
.rdata$r:00004202                 db    0
.rdata$r:00004203                 db    0
.rdata$r:00004204                 db 0FFh
.rdata$r:00004205                 db 0FFh
.rdata$r:00004206                 db 0FFh
.rdata$r:00004207                 db 0FFh
.rdata$r:00004208                 db    0
.rdata$r:00004209                 db    0
.rdata$r:0000420A                 db    0
.rdata$r:0000420B                 db    0
.rdata$r:0000420C                 db  40h ; @
.rdata$r:0000420D                 db    0
.rdata$r:0000420E                 db    0
.rdata$r:0000420F                 db    0
.rdata$r:00004210                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004210 _rdata$r        ends
.rdata$r:00004210
.data:00004214 ; ===========================================================================
.data:00004214
.data:00004214 ; Segment type: Pure data
.data:00004214 ; Segment permissions: Read/Write
.data:00004214 _data           segment dword public 'DATA' use32
.data:00004214                 assume cs:_data
.data:00004214                 ;org 4214h
.data:00004214 ; COMDAT (pick any)
.data:00004214                 public ??_R0?AUIUnknown@@@8
.data:00004214 ; struct IUnknown `RTTI Type Descriptor'
.data:00004214 ??_R0?AUIUnknown@@@8 dd offset ??_7type_info@@6B@
.data:00004214                                         ; DATA XREF: .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00004214                                         ; .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'o ...
.data:00004214                                         ; const type_info::`vftable'
.data:00004218                 db    0
.data:00004219                 db    0
.data:0000421A                 db    0
.data:0000421B                 db    0
.data:0000421C                 db  2Eh ; .
.data:0000421D                 db  3Fh ; ?
.data:0000421E                 db  41h ; A
.data:0000421F                 db  55h ; U
.data:00004220                 db  49h ; I
.data:00004221                 db  55h ; U
.data:00004222                 db  6Eh ; n
.data:00004223                 db  6Bh ; k
.data:00004224                 db  6Eh ; n
.data:00004225                 db  6Fh ; o
.data:00004226                 db  77h ; w
.data:00004227                 db  6Eh ; n
.data:00004228                 db  40h ; @
.data:00004229                 db  40h ; @
.data:0000422A                 db    0
.data:0000422B                 align 4
.data:0000422B _data           ends
.data:0000422B
.rdata$r:0000422C ; ===========================================================================
.rdata$r:0000422C
.rdata$r:0000422C ; Segment type: Pure data
.rdata$r:0000422C ; Segment permissions: Read
.rdata$r:0000422C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000422C                 assume cs:_rdata$r
.rdata$r:0000422C                 ;org 422Ch
.rdata$r:0000422C ; COMDAT (pick any)
.rdata$r:0000422C                 public ??_R3IUnknown@@8
.rdata$r:0000422C ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000422C ??_R3IUnknown@@8 db    0                ; DATA XREF: .rdata$r:00004210o
.rdata$r:0000422C                                         ; .rdata$r:00006190o ...
.rdata$r:0000422D                 db    0
.rdata$r:0000422E                 db    0
.rdata$r:0000422F                 db    0
.rdata$r:00004230                 db    0
.rdata$r:00004231                 db    0
.rdata$r:00004232                 db    0
.rdata$r:00004233                 db    0
.rdata$r:00004234                 db    1
.rdata$r:00004235                 db    0
.rdata$r:00004236                 db    0
.rdata$r:00004237                 db    0
.rdata$r:00004238                 dd offset ??_R2IUnknown@@8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00004238 _rdata$r        ends
.rdata$r:00004238
.rdata$r:0000423C ; ===========================================================================
.rdata$r:0000423C
.rdata$r:0000423C ; Segment type: Pure data
.rdata$r:0000423C ; Segment permissions: Read
.rdata$r:0000423C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000423C                 assume cs:_rdata$r
.rdata$r:0000423C                 ;org 423Ch
.rdata$r:0000423C ; COMDAT (pick any)
.rdata$r:0000423C                 public ??_R2IUnknown@@8
.rdata$r:0000423C ; IUnknown::`RTTI Base Class Array'
.rdata$r:0000423C ??_R2IUnknown@@8 dd offset ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:0000423C                                         ; DATA XREF: .rdata$r:00004238o
.rdata$r:0000423C                                         ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00004240                 db    0
.rdata$r:00004241                 align 4
.rdata$r:00004241 _rdata$r        ends
.rdata$r:00004241
.rdata$r:00004244 ; ===========================================================================
.rdata$r:00004244
.rdata$r:00004244 ; Segment type: Pure data
.rdata$r:00004244 ; Segment permissions: Read
.rdata$r:00004244 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004244                 assume cs:_rdata$r
.rdata$r:00004244                 ;org 4244h
.rdata$r:00004244 ; COMDAT (pick any)
.rdata$r:00004244                 public ??_R13?0A@EA@CMyUnknownImp@@8
.rdata$r:00004244 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:00004244 ??_R13?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00004244                                         ; DATA XREF: .rdata$r:000041D4o
.rdata$r:00004244                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00004248                 db    0
.rdata$r:00004249                 db    0
.rdata$r:0000424A                 db    0
.rdata$r:0000424B                 db    0
.rdata$r:0000424C                 db    4
.rdata$r:0000424D                 db    0
.rdata$r:0000424E                 db    0
.rdata$r:0000424F                 db    0
.rdata$r:00004250                 db 0FFh
.rdata$r:00004251                 db 0FFh
.rdata$r:00004252                 db 0FFh
.rdata$r:00004253                 db 0FFh
.rdata$r:00004254                 db    0
.rdata$r:00004255                 db    0
.rdata$r:00004256                 db    0
.rdata$r:00004257                 db    0
.rdata$r:00004258                 db  40h ; @
.rdata$r:00004259                 db    0
.rdata$r:0000425A                 db    0
.rdata$r:0000425B                 db    0
.rdata$r:0000425C                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000425C _rdata$r        ends
.rdata$r:0000425C
.data:00004260 ; ===========================================================================
.data:00004260
.data:00004260 ; Segment type: Pure data
.data:00004260 ; Segment permissions: Read/Write
.data:00004260 _data           segment dword public 'DATA' use32
.data:00004260                 assume cs:_data
.data:00004260                 ;org 4260h
.data:00004260 ; COMDAT (pick any)
.data:00004260                 public ??_R0?AVCMyUnknownImp@@@8
.data:00004260 ; class CMyUnknownImp `RTTI Type Descriptor'
.data:00004260 ??_R0?AVCMyUnknownImp@@@8 dd offset ??_7type_info@@6B@
.data:00004260                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:00004260                                         ; .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00004260                                         ; const type_info::`vftable'
.data:00004264                 align 8
.data:00004268 a_?avcmyunknown db '.?AVCMyUnknownImp@@',0
.data:00004268 _data           ends
.data:00004268
.rdata$r:0000427C ; ===========================================================================
.rdata$r:0000427C
.rdata$r:0000427C ; Segment type: Pure data
.rdata$r:0000427C ; Segment permissions: Read
.rdata$r:0000427C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000427C                 assume cs:_rdata$r
.rdata$r:0000427C                 ;org 427Ch
.rdata$r:0000427C ; COMDAT (pick any)
.rdata$r:0000427C                 public ??_R3CMyUnknownImp@@8
.rdata$r:0000427C ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000427C ??_R3CMyUnknownImp@@8 db    0           ; DATA XREF: .rdata$r:0000425Co
.rdata$r:0000427C                                         ; .rdata$r:000042ACo ...
.rdata$r:0000427D                 db    0
.rdata$r:0000427E                 db    0
.rdata$r:0000427F                 db    0
.rdata$r:00004280                 db    0
.rdata$r:00004281                 db    0
.rdata$r:00004282                 db    0
.rdata$r:00004283                 db    0
.rdata$r:00004284                 db    1
.rdata$r:00004285                 db    0
.rdata$r:00004286                 db    0
.rdata$r:00004287                 db    0
.rdata$r:00004288                 dd offset ??_R2CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00004288 _rdata$r        ends
.rdata$r:00004288
.rdata$r:0000428C ; ===========================================================================
.rdata$r:0000428C
.rdata$r:0000428C ; Segment type: Pure data
.rdata$r:0000428C ; Segment permissions: Read
.rdata$r:0000428C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000428C                 assume cs:_rdata$r
.rdata$r:0000428C                 ;org 428Ch
.rdata$r:0000428C ; COMDAT (pick any)
.rdata$r:0000428C                 public ??_R2CMyUnknownImp@@8
.rdata$r:0000428C ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:0000428C ??_R2CMyUnknownImp@@8 dd offset ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:0000428C                                         ; DATA XREF: .rdata$r:00004288o
.rdata$r:0000428C                                         ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00004290                 db    0
.rdata$r:00004291                 align 4
.rdata$r:00004291 _rdata$r        ends
.rdata$r:00004291
.rdata$r:00004294 ; ===========================================================================
.rdata$r:00004294
.rdata$r:00004294 ; Segment type: Pure data
.rdata$r:00004294 ; Segment permissions: Read
.rdata$r:00004294 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004294                 assume cs:_rdata$r
.rdata$r:00004294                 ;org 4294h
.rdata$r:00004294 ; COMDAT (pick any)
.rdata$r:00004294                 public ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00004294 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00004294 ??_R1A@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00004294                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Array'o
.rdata$r:00004294                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00004298                 align 10h
.rdata$r:000042A0                 db 0FFh
.rdata$r:000042A1                 db 0FFh
.rdata$r:000042A2                 db 0FFh
.rdata$r:000042A3                 db 0FFh
.rdata$r:000042A4                 db    0
.rdata$r:000042A5                 db    0
.rdata$r:000042A6                 db    0
.rdata$r:000042A7                 db    0
.rdata$r:000042A8                 db  40h ; @
.rdata$r:000042A9                 db    0
.rdata$r:000042AA                 db    0
.rdata$r:000042AB                 db    0
.rdata$r:000042AC                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000042AC _rdata$r        ends
.rdata$r:000042AC
.text:000042B0 ; ===========================================================================
.text:000042B0
.text:000042B0 ; Segment type: Pure code
.text:000042B0 ; Segment permissions: Read/Execute
.text:000042B0 _text           segment para public 'CODE' use32
.text:000042B0                 assume cs:_text
.text:000042B0                 ;org 42B0h
.text:000042B0 ; COMDAT (pick any)
.text:000042B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000042B0
.text:000042B0 ; =============== S U B R O U T I N E =======================================
.text:000042B0
.text:000042B0 ; Attributes: bp-based frame
.text:000042B0
.text:000042B0 ; _DWORD __thiscall CMyUnknownImp::CMyUnknownImp(CMyUnknownImp *__hidden this)
.text:000042B0                 public ??0CMyUnknownImp@@QAE@XZ
.text:000042B0 ??0CMyUnknownImp@@QAE@XZ proc near      ; CODE XREF: CCodecs::CCodecs(void)+1Cp
.text:000042B0                                         ; CExtractCallbackConsole::CExtractCallbackConsole(void)+66p
.text:000042B0
.text:000042B0 var_4           = dword ptr -4
.text:000042B0
.text:000042B0                 push    ebp
.text:000042B1                 mov     ebp, esp
.text:000042B3                 push    ecx
.text:000042B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000042BB                 mov     [ebp+var_4], ecx
.text:000042BE                 mov     eax, [ebp+var_4]
.text:000042C1                 mov     dword ptr [eax], 0
.text:000042C7                 mov     eax, [ebp+var_4]
.text:000042CA                 mov     esp, ebp
.text:000042CC                 pop     ebp
.text:000042CD                 retn
.text:000042CD ??0CMyUnknownImp@@QAE@XZ endp
.text:000042CD
.text:000042CD ; ---------------------------------------------------------------------------
.text:000042CE                 align 10h
.text:000042CE _text           ends
.text:000042CE
.text:000042D0 ; ===========================================================================
.text:000042D0
.text:000042D0 ; Segment type: Pure code
.text:000042D0 ; Segment permissions: Read/Execute
.text:000042D0 _text           segment para public 'CODE' use32
.text:000042D0                 assume cs:_text
.text:000042D0                 ;org 42D0h
.text:000042D0 ; COMDAT (pick any)
.text:000042D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000042D0
.text:000042D0 ; =============== S U B R O U T I N E =======================================
.text:000042D0
.text:000042D0 ; Attributes: bp-based frame
.text:000042D0
.text:000042D0 ; public: __thiscall IUnknown::IUnknown(void)
.text:000042D0                 public ??0IUnknown@@QAE@XZ
.text:000042D0 ??0IUnknown@@QAE@XZ proc near           ; CODE XREF: CCodecs::CCodecs(void)+11p
.text:000042D0                                         ; ICryptoGetTextPassword::ICryptoGetTextPassword(void)+11p ...
.text:000042D0
.text:000042D0 var_4           = dword ptr -4
.text:000042D0
.text:000042D0                 push    ebp
.text:000042D1                 mov     ebp, esp
.text:000042D3                 push    ecx
.text:000042D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000042DB                 mov     [ebp+var_4], ecx
.text:000042DE                 mov     eax, [ebp+var_4]
.text:000042E1                 mov     esp, ebp
.text:000042E3                 pop     ebp
.text:000042E4                 retn
.text:000042E4 ??0IUnknown@@QAE@XZ endp
.text:000042E4
.text:000042E4 ; ---------------------------------------------------------------------------
.text:000042E5                 align 4
.text:000042E5 _text           ends
.text:000042E5
.text:000042E8 ; ===========================================================================
.text:000042E8
.text:000042E8 ; Segment type: Pure code
.text:000042E8 ; Segment permissions: Read/Execute
.text:000042E8 _text           segment para public 'CODE' use32
.text:000042E8                 assume cs:_text
.text:000042E8                 ;org 42E8h
.text:000042E8 ; COMDAT (pick any)
.text:000042E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000042E8
.text:000042E8 ; =============== S U B R O U T I N E =======================================
.text:000042E8
.text:000042E8 ; Attributes: bp-based frame
.text:000042E8
.text:000042E8 ; __int32 __stdcall CCodecs::QueryInterface(CCodecs *this, const struct _GUID *Buf1, void **)
.text:000042E8                 public ?QueryInterface@CCodecs@@UAGJABU_GUID@@PAPAX@Z
.text:000042E8 ?QueryInterface@CCodecs@@UAGJABU_GUID@@PAPAX@Z proc near
.text:000042E8                                         ; DATA XREF: .rdata:const CCodecs::`vftable'o
.text:000042E8
.text:000042E8 this            = dword ptr  8
.text:000042E8 Buf1            = dword ptr  0Ch
.text:000042E8 arg_8           = dword ptr  10h
.text:000042E8
.text:000042E8                 push    ebp
.text:000042E9                 mov     ebp, esp
.text:000042EB                 mov     eax, [ebp+arg_8]
.text:000042EE                 mov     dword ptr [eax], 0
.text:000042F4                 push    offset _IID_IUnknown ; Buf2
.text:000042F9                 mov     ecx, [ebp+Buf1]
.text:000042FC                 push    ecx             ; Buf1
.text:000042FD                 call    ___@8           ; __(x,x)
.text:00004302                 test    eax, eax
.text:00004304                 jz      short loc_4310
.text:00004306                 mov     edx, [ebp+arg_8]
.text:00004309                 mov     eax, [ebp+this]
.text:0000430C                 mov     [edx], eax
.text:0000430E                 jmp     short loc_4317
.text:00004310 ; ---------------------------------------------------------------------------
.text:00004310
.text:00004310 loc_4310:                               ; CODE XREF: CCodecs::QueryInterface(_GUID const &,void * *)+1Cj
.text:00004310                 mov     eax, 80004002h
.text:00004315                 jmp     short loc_4328
.text:00004317 ; ---------------------------------------------------------------------------
.text:00004317
.text:00004317 loc_4317:                               ; CODE XREF: CCodecs::QueryInterface(_GUID const &,void * *)+26j
.text:00004317                 mov     ecx, [ebp+this]
.text:0000431A                 mov     edx, [ecx+4]
.text:0000431D                 add     edx, 1
.text:00004320                 mov     eax, [ebp+this]
.text:00004323                 mov     [eax+4], edx
.text:00004326                 xor     eax, eax
.text:00004328
.text:00004328 loc_4328:                               ; CODE XREF: CCodecs::QueryInterface(_GUID const &,void * *)+2Dj
.text:00004328                 cmp     ebp, esp
.text:0000432A                 call    __RTC_CheckEsp
.text:0000432F                 pop     ebp
.text:00004330                 retn    0Ch
.text:00004330 ?QueryInterface@CCodecs@@UAGJABU_GUID@@PAPAX@Z endp
.text:00004330
.text:00004330 ; ---------------------------------------------------------------------------
.text:00004333                 align 4
.text:00004333 _text           ends
.text:00004333
.text:00004334 ; ===========================================================================
.text:00004334
.text:00004334 ; Segment type: Pure code
.text:00004334 ; Segment permissions: Read/Execute
.text:00004334 _text           segment para public 'CODE' use32
.text:00004334                 assume cs:_text
.text:00004334                 ;org 4334h
.text:00004334 ; COMDAT (pick any)
.text:00004334                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004334
.text:00004334 ; =============== S U B R O U T I N E =======================================
.text:00004334
.text:00004334 ; Attributes: bp-based frame
.text:00004334
.text:00004334 ; int __stdcall __(void *Buf1, void *Buf2)
.text:00004334                 public ___@8
.text:00004334 ___@8           proc near               ; CODE XREF: CCodecs::QueryInterface(_GUID const &,void * *)+15p
.text:00004334                                         ; CExtractCallbackConsole::QueryInterface(_GUID const &,void * *)+26p ...
.text:00004334
.text:00004334 Buf1            = dword ptr  8
.text:00004334 Buf2            = dword ptr  0Ch
.text:00004334
.text:00004334                 push    ebp
.text:00004335                 mov     ebp, esp
.text:00004337                 mov     eax, [ebp+Buf2]
.text:0000433A                 push    eax             ; Buf2
.text:0000433B                 mov     ecx, [ebp+Buf1]
.text:0000433E                 push    ecx             ; Buf1
.text:0000433F                 call    _IsEqualGUID@8  ; IsEqualGUID(x,x)
.text:00004344                 cmp     ebp, esp
.text:00004346                 call    __RTC_CheckEsp
.text:0000434B                 pop     ebp
.text:0000434C                 retn    8
.text:0000434C ___@8           endp
.text:0000434C
.text:0000434C ; ---------------------------------------------------------------------------
.text:0000434F                 align 10h
.text:0000434F _text           ends
.text:0000434F
.text:00004350 ; ===========================================================================
.text:00004350
.text:00004350 ; Segment type: Pure code
.text:00004350 ; Segment permissions: Read/Execute
.text:00004350 _text           segment para public 'CODE' use32
.text:00004350                 assume cs:_text
.text:00004350                 ;org 4350h
.text:00004350 ; COMDAT (pick any)
.text:00004350                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004350
.text:00004350 ; =============== S U B R O U T I N E =======================================
.text:00004350
.text:00004350 ; Attributes: bp-based frame
.text:00004350
.text:00004350 ; int __stdcall IsEqualGUID(void *Buf1, void *Buf2)
.text:00004350                 public _IsEqualGUID@8
.text:00004350 _IsEqualGUID@8  proc near               ; CODE XREF: __(x,x)+Bp
.text:00004350
.text:00004350 Buf1            = dword ptr  8
.text:00004350 Buf2            = dword ptr  0Ch
.text:00004350
.text:00004350                 push    ebp
.text:00004351                 mov     ebp, esp
.text:00004353                 push    10h             ; Size
.text:00004355                 mov     eax, [ebp+Buf2]
.text:00004358                 push    eax             ; Buf2
.text:00004359                 mov     ecx, [ebp+Buf1]
.text:0000435C                 push    ecx             ; Buf1
.text:0000435D                 call    _memcmp
.text:00004362                 add     esp, 0Ch
.text:00004365                 neg     eax
.text:00004367                 sbb     eax, eax
.text:00004369                 add     eax, 1
.text:0000436C                 cmp     ebp, esp
.text:0000436E                 call    __RTC_CheckEsp
.text:00004373                 pop     ebp
.text:00004374                 retn    8
.text:00004374 _IsEqualGUID@8  endp
.text:00004374
.text:00004374 ; ---------------------------------------------------------------------------
.text:00004377                 align 4
.text:00004377 _text           ends
.text:00004377
.text:00004378 ; ===========================================================================
.text:00004378
.text:00004378 ; Segment type: Pure code
.text:00004378 ; Segment permissions: Read/Execute
.text:00004378 _text           segment para public 'CODE' use32
.text:00004378                 assume cs:_text
.text:00004378                 ;org 4378h
.text:00004378 ; COMDAT (pick any)
.text:00004378                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004378
.text:00004378 ; =============== S U B R O U T I N E =======================================
.text:00004378
.text:00004378 ; Attributes: bp-based frame
.text:00004378
.text:00004378 ; unsigned __int32 __stdcall CCodecs::AddRef(CCodecs *this)
.text:00004378                 public ?AddRef@CCodecs@@UAGKXZ
.text:00004378 ?AddRef@CCodecs@@UAGKXZ proc near       ; DATA XREF: .rdata:00004188o
.text:00004378
.text:00004378 var_4           = dword ptr -4
.text:00004378 this            = dword ptr  8
.text:00004378
.text:00004378                 push    ebp
.text:00004379                 mov     ebp, esp
.text:0000437B                 push    ecx
.text:0000437C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004383                 mov     eax, [ebp+this]
.text:00004386                 mov     ecx, [eax+4]
.text:00004389                 add     ecx, 1
.text:0000438C                 mov     [ebp+var_4], ecx
.text:0000438F                 mov     edx, [ebp+this]
.text:00004392                 mov     eax, [ebp+var_4]
.text:00004395                 mov     [edx+4], eax
.text:00004398                 mov     eax, [ebp+var_4]
.text:0000439B                 mov     esp, ebp
.text:0000439D                 pop     ebp
.text:0000439E                 retn    4
.text:0000439E ?AddRef@CCodecs@@UAGKXZ endp
.text:0000439E
.text:0000439E ; ---------------------------------------------------------------------------
.text:000043A1                 align 4
.text:000043A1 _text           ends
.text:000043A1
.text:000043A4 ; ===========================================================================
.text:000043A4
.text:000043A4 ; Segment type: Pure code
.text:000043A4 ; Segment permissions: Read/Execute
.text:000043A4 _text           segment para public 'CODE' use32
.text:000043A4                 assume cs:_text
.text:000043A4                 ;org 43A4h
.text:000043A4 ; COMDAT (pick any)
.text:000043A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000043A4
.text:000043A4 ; =============== S U B R O U T I N E =======================================
.text:000043A4
.text:000043A4 ; Attributes: bp-based frame
.text:000043A4
.text:000043A4 ; unsigned __int32 __stdcall CCodecs::Release(CCodecs *this)
.text:000043A4                 public ?Release@CCodecs@@UAGKXZ
.text:000043A4 ?Release@CCodecs@@UAGKXZ proc near      ; DATA XREF: .rdata:0000418Co
.text:000043A4
.text:000043A4 var_10          = dword ptr -10h
.text:000043A4 var_C           = dword ptr -0Ch
.text:000043A4 var_8           = dword ptr -8
.text:000043A4 var_4           = dword ptr -4
.text:000043A4 this            = dword ptr  8
.text:000043A4
.text:000043A4                 push    ebp
.text:000043A5                 mov     ebp, esp
.text:000043A7                 sub     esp, 10h
.text:000043AA                 mov     eax, 0CCCCCCCCh
.text:000043AF                 mov     [ebp+var_10], eax
.text:000043B2                 mov     [ebp+var_C], eax
.text:000043B5                 mov     [ebp+var_8], eax
.text:000043B8                 mov     [ebp+var_4], eax
.text:000043BB                 mov     eax, [ebp+this]
.text:000043BE                 mov     ecx, [eax+4]
.text:000043C1                 sub     ecx, 1
.text:000043C4                 mov     [ebp+var_C], ecx
.text:000043C7                 mov     edx, [ebp+this]
.text:000043CA                 mov     eax, [ebp+var_C]
.text:000043CD                 mov     [edx+4], eax
.text:000043D0                 cmp     [ebp+var_C], 0
.text:000043D4                 jz      short loc_43DE
.text:000043D6                 mov     ecx, [ebp+this]
.text:000043D9                 mov     eax, [ecx+4]
.text:000043DC                 jmp     short loc_4408
.text:000043DE ; ---------------------------------------------------------------------------
.text:000043DE
.text:000043DE loc_43DE:                               ; CODE XREF: CCodecs::Release(void)+30j
.text:000043DE                 mov     edx, [ebp+this]
.text:000043E1                 mov     [ebp+var_8], edx
.text:000043E4                 mov     eax, [ebp+var_8]
.text:000043E7                 mov     [ebp+var_4], eax
.text:000043EA                 cmp     [ebp+var_4], 0
.text:000043EE                 jz      short loc_43FF
.text:000043F0                 push    1
.text:000043F2                 mov     ecx, [ebp+var_4]
.text:000043F5                 call    ??_GCCodecs@@QAEPAXI@Z ; CCodecs::`scalar deleting destructor'(uint)
.text:000043FA                 mov     [ebp+var_10], eax
.text:000043FD                 jmp     short loc_4406
.text:000043FF ; ---------------------------------------------------------------------------
.text:000043FF
.text:000043FF loc_43FF:                               ; CODE XREF: CCodecs::Release(void)+4Aj
.text:000043FF                 mov     [ebp+var_10], 0
.text:00004406
.text:00004406 loc_4406:                               ; CODE XREF: CCodecs::Release(void)+59j
.text:00004406                 xor     eax, eax
.text:00004408
.text:00004408 loc_4408:                               ; CODE XREF: CCodecs::Release(void)+38j
.text:00004408                 add     esp, 10h
.text:0000440B                 cmp     ebp, esp
.text:0000440D                 call    __RTC_CheckEsp
.text:00004412                 mov     esp, ebp
.text:00004414                 pop     ebp
.text:00004415                 retn    4
.text:00004415 ?Release@CCodecs@@UAGKXZ endp
.text:00004415
.text:00004415 _text           ends
.text:00004415
.text:00004418 ; ===========================================================================
.text:00004418
.text:00004418 ; Segment type: Pure code
.text:00004418 ; Segment permissions: Read/Execute
.text:00004418 _text           segment para public 'CODE' use32
.text:00004418                 assume cs:_text
.text:00004418                 ;org 4418h
.text:00004418 ; COMDAT (pick any)
.text:00004418                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004418
.text:00004418 ; =============== S U B R O U T I N E =======================================
.text:00004418
.text:00004418 ; Attributes: bp-based frame
.text:00004418
.text:00004418 ; public: void * __thiscall CCodecs::`scalar deleting destructor'(unsigned int)
.text:00004418                 public ??_GCCodecs@@QAEPAXI@Z
.text:00004418 ??_GCCodecs@@QAEPAXI@Z proc near        ; CODE XREF: CCodecs::Release(void)+51p
.text:00004418
.text:00004418 var_4           = dword ptr -4
.text:00004418 arg_0           = dword ptr  8
.text:00004418
.text:00004418                 push    ebp
.text:00004419                 mov     ebp, esp
.text:0000441B                 push    ecx
.text:0000441C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004423                 mov     [ebp+var_4], ecx
.text:00004426                 mov     ecx, [ebp+var_4] ; this
.text:00004429                 call    ??1CCodecs@@QAE@XZ ; CCodecs::~CCodecs(void)
.text:0000442E                 mov     eax, [ebp+arg_0]
.text:00004431                 and     eax, 1
.text:00004434                 jz      short loc_4442
.text:00004436                 mov     ecx, [ebp+var_4]
.text:00004439                 push    ecx             ; void *
.text:0000443A                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000443F                 add     esp, 4
.text:00004442
.text:00004442 loc_4442:                               ; CODE XREF: CCodecs::`scalar deleting destructor'(uint)+1Cj
.text:00004442                 mov     eax, [ebp+var_4]
.text:00004445                 add     esp, 4
.text:00004448                 cmp     ebp, esp
.text:0000444A                 call    __RTC_CheckEsp
.text:0000444F                 mov     esp, ebp
.text:00004451                 pop     ebp
.text:00004452                 retn    4
.text:00004452 ??_GCCodecs@@QAEPAXI@Z endp
.text:00004452
.text:00004452 ; ---------------------------------------------------------------------------
.text:00004455                 align 4
.text:00004455 _text           ends
.text:00004455
.text:00004458 ; ===========================================================================
.text:00004458
.text:00004458 ; Segment type: Pure code
.text:00004458 ; Segment permissions: Read/Execute
.text:00004458 _text           segment para public 'CODE' use32
.text:00004458                 assume cs:_text
.text:00004458                 ;org 4458h
.text:00004458 ; COMDAT (pick any)
.text:00004458                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004458
.text:00004458 ; =============== S U B R O U T I N E =======================================
.text:00004458
.text:00004458 ; Attributes: bp-based frame
.text:00004458
.text:00004458 ; _DWORD __thiscall CCodecs::~CCodecs(CCodecs *__hidden this)
.text:00004458                 public ??1CCodecs@@QAE@XZ
.text:00004458 ??1CCodecs@@QAE@XZ proc near            ; CODE XREF: CCodecs::`scalar deleting destructor'(uint)+11p
.text:00004458
.text:00004458 var_4           = dword ptr -4
.text:00004458
.text:00004458                 push    ebp
.text:00004459                 mov     ebp, esp
.text:0000445B                 push    ecx
.text:0000445C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004463                 mov     [ebp+var_4], ecx
.text:00004466                 mov     eax, [ebp+var_4]
.text:00004469                 mov     dword ptr [eax], offset ??_7CCodecs@@6B@ ; const CCodecs::`vftable'
.text:0000446F                 mov     ecx, [ebp+var_4]
.text:00004472                 add     ecx, 8
.text:00004475                 call    ??1?$CObjectVector@UCArcInfoEx@@@@QAE@XZ ; CObjectVector<CArcInfoEx>::~CObjectVector<CArcInfoEx>(void)
.text:0000447A                 add     esp, 4
.text:0000447D                 cmp     ebp, esp
.text:0000447F                 call    __RTC_CheckEsp
.text:00004484                 mov     esp, ebp
.text:00004486                 pop     ebp
.text:00004487                 retn
.text:00004487 ??1CCodecs@@QAE@XZ endp
.text:00004487
.text:00004487 _text           ends
.text:00004487
.text:00004488 ; ===========================================================================
.text:00004488
.text:00004488 ; Segment type: Pure code
.text:00004488 ; Segment permissions: Read/Execute
.text:00004488 _text           segment para public 'CODE' use32
.text:00004488                 assume cs:_text
.text:00004488                 ;org 4488h
.text:00004488 ; COMDAT (pick any)
.text:00004488                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004488
.text:00004488 ; =============== S U B R O U T I N E =======================================
.text:00004488
.text:00004488 ; Attributes: bp-based frame
.text:00004488
.text:00004488 ; _DWORD __thiscall CDirItemsStat::CDirItemsStat(CDirItemsStat *__hidden this)
.text:00004488                 public ??0CDirItemsStat@@QAE@XZ
.text:00004488 ??0CDirItemsStat@@QAE@XZ proc near      ; CODE XREF: Main2(void)+C87p
.text:00004488
.text:00004488 var_4           = dword ptr -4
.text:00004488
.text:00004488                 push    ebp
.text:00004489                 mov     ebp, esp
.text:0000448B                 push    ecx
.text:0000448C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004493                 mov     [ebp+var_4], ecx
.text:00004496                 mov     eax, [ebp+var_4]
.text:00004499                 mov     dword ptr [eax], 0
.text:0000449F                 mov     dword ptr [eax+4], 0
.text:000044A6                 mov     ecx, [ebp+var_4]
.text:000044A9                 mov     dword ptr [ecx+8], 0
.text:000044B0                 mov     dword ptr [ecx+0Ch], 0
.text:000044B7                 mov     edx, [ebp+var_4]
.text:000044BA                 mov     dword ptr [edx+10h], 0
.text:000044C1                 mov     dword ptr [edx+14h], 0
.text:000044C8                 mov     eax, [ebp+var_4]
.text:000044CB                 mov     dword ptr [eax+18h], 0
.text:000044D2                 mov     dword ptr [eax+1Ch], 0
.text:000044D9                 mov     ecx, [ebp+var_4]
.text:000044DC                 mov     dword ptr [ecx+20h], 0
.text:000044E3                 mov     dword ptr [ecx+24h], 0
.text:000044EA                 mov     edx, [ebp+var_4]
.text:000044ED                 mov     dword ptr [edx+28h], 0
.text:000044F4                 mov     dword ptr [edx+2Ch], 0
.text:000044FB                 mov     eax, [ebp+var_4]
.text:000044FE                 mov     esp, ebp
.text:00004500                 pop     ebp
.text:00004501                 retn
.text:00004501 ??0CDirItemsStat@@QAE@XZ endp
.text:00004501
.text:00004501 ; ---------------------------------------------------------------------------
.text:00004502                 align 4
.text:00004502 _text           ends
.text:00004502
.text:00004504 ; ===========================================================================
.text:00004504
.text:00004504 ; Segment type: Pure code
.text:00004504 ; Segment permissions: Read/Execute
.text:00004504 _text           segment para public 'CODE' use32
.text:00004504                 assume cs:_text
.text:00004504                 ;org 4504h
.text:00004504 ; COMDAT (pick any)
.text:00004504                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004504
.text:00004504 ; =============== S U B R O U T I N E =======================================
.text:00004504
.text:00004504 ; Attributes: bp-based frame
.text:00004504
.text:00004504 ; void __thiscall CHashBundle::Init(CHashBundle *__hidden this)
.text:00004504                 public ?Init@CHashBundle@@QAEXXZ
.text:00004504 ?Init@CHashBundle@@QAEXXZ proc near     ; CODE XREF: Main2(void)+F3Cp
.text:00004504
.text:00004504 var_4           = dword ptr -4
.text:00004504
.text:00004504                 push    ebp
.text:00004505                 mov     ebp, esp
.text:00004507                 push    ecx
.text:00004508                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000450F                 mov     [ebp+var_4], ecx
.text:00004512                 mov     eax, [ebp+var_4]
.text:00004515                 mov     dword ptr [eax+38h], 0
.text:0000451C                 mov     dword ptr [eax+3Ch], 0
.text:00004523                 mov     ecx, [ebp+var_4]
.text:00004526                 mov     dword ptr [ecx+30h], 0
.text:0000452D                 mov     dword ptr [ecx+34h], 0
.text:00004534                 mov     edx, [ebp+var_4]
.text:00004537                 mov     dword ptr [edx+28h], 0
.text:0000453E                 mov     dword ptr [edx+2Ch], 0
.text:00004545                 mov     eax, [ebp+var_4]
.text:00004548                 mov     dword ptr [eax+20h], 0
.text:0000454F                 mov     dword ptr [eax+24h], 0
.text:00004556                 mov     ecx, [ebp+var_4]
.text:00004559                 mov     dword ptr [ecx+18h], 0
.text:00004560                 mov     dword ptr [ecx+1Ch], 0
.text:00004567                 mov     edx, [ebp+var_4]
.text:0000456A                 mov     dword ptr [edx+10h], 0
.text:00004571                 mov     dword ptr [edx+14h], 0
.text:00004578                 mov     esp, ebp
.text:0000457A                 pop     ebp
.text:0000457B                 retn
.text:0000457B ?Init@CHashBundle@@QAEXXZ endp
.text:0000457B
.text:0000457B _text           ends
.text:0000457B
.text:0000457C ; ===========================================================================
.text:0000457C
.text:0000457C ; Segment type: Pure code
.text:0000457C ; Segment permissions: Read/Execute
.text:0000457C _text           segment para public 'CODE' use32
.text:0000457C                 assume cs:_text
.text:0000457C                 ;org 457Ch
.text:0000457C ; COMDAT (pick any)
.text:0000457C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000457C
.text:0000457C ; =============== S U B R O U T I N E =======================================
.text:0000457C
.text:0000457C ; Attributes: bp-based frame
.text:0000457C
.text:0000457C ; _DWORD __thiscall CExtractOptions::CExtractOptions(CExtractOptions *__hidden this)
.text:0000457C                 public ??0CExtractOptions@@QAE@XZ
.text:0000457C ??0CExtractOptions@@QAE@XZ proc near    ; CODE XREF: Main2(void)+E76p
.text:0000457C
.text:0000457C var_10          = dword ptr -10h
.text:0000457C var_C           = dword ptr -0Ch
.text:0000457C var_4           = dword ptr -4
.text:0000457C
.text:0000457C                 push    ebp
.text:0000457D                 mov     ebp, esp
.text:0000457F                 push    0FFFFFFFFh
.text:00004581                 push    offset __ehhandler$??0CExtractOptions@@QAE@XZ
.text:00004586                 mov     eax, large fs:0
.text:0000458C                 push    eax
.text:0000458D                 push    ecx
.text:0000458E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00004595                 mov     eax, dword ptr ds:___security_cookie
.text:0000459A                 xor     eax, ebp
.text:0000459C                 push    eax
.text:0000459D                 lea     eax, [ebp+var_C]
.text:000045A0                 mov     large fs:0, eax
.text:000045A6                 mov     [ebp+var_10], ecx
.text:000045A9                 mov     ecx, [ebp+var_10]
.text:000045AC                 call    ??0CExtractOptionsBase@@QAE@XZ ; CExtractOptionsBase::CExtractOptionsBase(void)
.text:000045B1                 mov     [ebp+var_4], 0
.text:000045B8                 mov     eax, [ebp+var_10]
.text:000045BB                 mov     byte ptr [eax+24h], 0
.text:000045BF                 mov     ecx, [ebp+var_10]
.text:000045C2                 mov     byte ptr [ecx+25h], 0
.text:000045C6                 mov     edx, [ebp+var_10]
.text:000045C9                 mov     byte ptr [edx+26h], 0
.text:000045CD                 mov     eax, [ebp+var_10]
.text:000045D0                 mov     byte ptr [eax+27h], 0
.text:000045D4                 mov     ecx, [ebp+var_10]
.text:000045D7                 add     ecx, 28h ; '('
.text:000045DA                 call    ??0?$CObjectVector@UCProperty@@@@QAE@XZ ; CObjectVector<CProperty>::CObjectVector<CProperty>(void)
.text:000045DF                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000045E6                 mov     eax, [ebp+var_10]
.text:000045E9                 mov     ecx, [ebp+var_C]
.text:000045EC                 mov     large fs:0, ecx
.text:000045F3                 pop     ecx
.text:000045F4                 add     esp, 10h
.text:000045F7                 cmp     ebp, esp
.text:000045F9                 call    __RTC_CheckEsp
.text:000045FE                 mov     esp, ebp
.text:00004600                 pop     ebp
.text:00004601                 retn
.text:00004601 ??0CExtractOptions@@QAE@XZ endp
.text:00004601
.text:00004601 ; ---------------------------------------------------------------------------
.text:00004602                 align 4
.text:00004602 _text           ends
.text:00004602
.text$x:00004604 ; ===========================================================================
.text$x:00004604
.text$x:00004604 ; Segment type: Pure code
.text$x:00004604 ; Segment permissions: Read/Execute
.text$x:00004604 _text$x         segment para public 'CODE' use32
.text$x:00004604                 assume cs:_text$x
.text$x:00004604                 ;org 4604h
.text$x:00004604 ; COMDAT (pick associative to section at 457C)
.text$x:00004604                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004604
.text$x:00004604 ; =============== S U B R O U T I N E =======================================
.text$x:00004604
.text$x:00004604
.text$x:00004604 __unwindfunclet$??0CExtractOptions@@QAE@XZ$0 proc near
.text$x:00004604                                         ; DATA XREF: .xdata$x:0000462Co
.text$x:00004604                 mov     ecx, [ebp-10h]  ; this
.text$x:00004607                 jmp     ??1CExtractOptionsBase@@QAE@XZ ; CExtractOptionsBase::~CExtractOptionsBase(void)
.text$x:00004607 __unwindfunclet$??0CExtractOptions@@QAE@XZ$0 endp
.text$x:00004607
.text$x:0000460C
.text$x:0000460C ; =============== S U B R O U T I N E =======================================
.text$x:0000460C
.text$x:0000460C
.text$x:0000460C __ehhandler$??0CExtractOptions@@QAE@XZ proc near
.text$x:0000460C                                         ; DATA XREF: CExtractOptions::CExtractOptions(void)+5o
.text$x:0000460C
.text$x:0000460C arg_4           = dword ptr  8
.text$x:0000460C
.text$x:0000460C                 mov     edx, [esp+arg_4]
.text$x:00004610                 lea     eax, [edx+0Ch]
.text$x:00004613                 mov     ecx, [edx-8]
.text$x:00004616                 xor     ecx, eax
.text$x:00004618                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000461D                 mov     eax, offset __ehfuncinfo$??0CExtractOptions@@QAE@XZ
.text$x:00004622                 jmp     ___CxxFrameHandler3
.text$x:00004622 __ehhandler$??0CExtractOptions@@QAE@XZ endp
.text$x:00004622
.text$x:00004622 ; ---------------------------------------------------------------------------
.text$x:00004627                 align 4
.text$x:00004627 _text$x         ends
.text$x:00004627
.xdata$x:00004628 ; ===========================================================================
.xdata$x:00004628
.xdata$x:00004628 ; Segment type: Pure data
.xdata$x:00004628 ; Segment permissions: Read
.xdata$x:00004628 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004628                 assume cs:_xdata$x
.xdata$x:00004628                 ;org 4628h
.xdata$x:00004628 ; COMDAT (pick associative to section at 457C)
.xdata$x:00004628 __unwindtable$??0CExtractOptions@@QAE@XZ db 0FFh
.xdata$x:00004628                                         ; DATA XREF: .xdata$x:00004638o
.xdata$x:00004629                 db 0FFh
.xdata$x:0000462A                 db 0FFh
.xdata$x:0000462B                 db 0FFh
.xdata$x:0000462C                 dd offset __unwindfunclet$??0CExtractOptions@@QAE@XZ$0
.xdata$x:00004630 __ehfuncinfo$??0CExtractOptions@@QAE@XZ db  22h ; "
.xdata$x:00004630                                         ; DATA XREF: __ehhandler$??0CExtractOptions@@QAE@XZ+11o
.xdata$x:00004631                 db    5
.xdata$x:00004632                 db  93h ; ô
.xdata$x:00004633                 db  19h
.xdata$x:00004634                 db    1
.xdata$x:00004635                 db    0
.xdata$x:00004636                 db    0
.xdata$x:00004637                 db    0
.xdata$x:00004638                 dd offset __unwindtable$??0CExtractOptions@@QAE@XZ
.xdata$x:0000463C                 db    0
.xdata$x:0000463D                 db    0
.xdata$x:0000463E                 db    0
.xdata$x:0000463F                 db    0
.xdata$x:00004640                 db    0
.xdata$x:00004641                 db    0
.xdata$x:00004642                 db    0
.xdata$x:00004643                 db    0
.xdata$x:00004644                 db    0
.xdata$x:00004645                 db    0
.xdata$x:00004646                 db    0
.xdata$x:00004647                 db    0
.xdata$x:00004648                 db    0
.xdata$x:00004649                 db    0
.xdata$x:0000464A                 db    0
.xdata$x:0000464B                 db    0
.xdata$x:0000464C                 db    0
.xdata$x:0000464D                 db    0
.xdata$x:0000464E                 db    0
.xdata$x:0000464F                 db    0
.xdata$x:00004650                 db    1
.xdata$x:00004651                 db    0
.xdata$x:00004652                 db    0
.xdata$x:00004653                 db    0
.xdata$x:00004653 _xdata$x        ends
.xdata$x:00004653
.text:00004654 ; ===========================================================================
.text:00004654
.text:00004654 ; Segment type: Pure code
.text:00004654 ; Segment permissions: Read/Execute
.text:00004654 _text           segment para public 'CODE' use32
.text:00004654                 assume cs:_text
.text:00004654                 ;org 4654h
.text:00004654 ; COMDAT (pick any)
.text:00004654                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004654
.text:00004654 ; =============== S U B R O U T I N E =======================================
.text:00004654
.text:00004654 ; Attributes: bp-based frame
.text:00004654
.text:00004654 ; public: __thiscall CExtractOptionsBase::CExtractOptionsBase(void)
.text:00004654                 public ??0CExtractOptionsBase@@QAE@XZ
.text:00004654 ??0CExtractOptionsBase@@QAE@XZ proc near
.text:00004654                                         ; CODE XREF: CExtractOptions::CExtractOptions(void)+30p
.text:00004654                                         ; CArcCmdLineOptions::CArcCmdLineOptions(void)+C5p
.text:00004654
.text:00004654 var_10          = dword ptr -10h
.text:00004654 var_C           = dword ptr -0Ch
.text:00004654 var_4           = dword ptr -4
.text:00004654
.text:00004654                 push    ebp
.text:00004655                 mov     ebp, esp
.text:00004657                 push    0FFFFFFFFh
.text:00004659                 push    offset __ehhandler$??0CExtractOptionsBase@@QAE@XZ
.text:0000465E                 mov     eax, large fs:0
.text:00004664                 push    eax
.text:00004665                 push    ecx
.text:00004666                 mov     [ebp+var_10], 0CCCCCCCCh
.text:0000466D                 mov     eax, dword ptr ds:___security_cookie
.text:00004672                 xor     eax, ebp
.text:00004674                 push    eax
.text:00004675                 lea     eax, [ebp+var_C]
.text:00004678                 mov     large fs:0, eax
.text:0000467E                 mov     [ebp+var_10], ecx
.text:00004681                 mov     ecx, [ebp+var_10] ; this
.text:00004684                 call    ??0CBoolPair@@QAE@XZ ; CBoolPair::CBoolPair(void)
.text:00004689                 mov     eax, [ebp+var_10]
.text:0000468C                 mov     byte ptr [eax+2], 0
.text:00004690                 mov     ecx, [ebp+var_10]
.text:00004693                 mov     byte ptr [ecx+3], 0
.text:00004697                 mov     edx, [ebp+var_10]
.text:0000469A                 mov     dword ptr [edx+4], 0
.text:000046A1                 mov     eax, [ebp+var_10]
.text:000046A4                 mov     dword ptr [eax+8], 0
.text:000046AB                 mov     ecx, [ebp+var_10]
.text:000046AE                 add     ecx, 0Ch
.text:000046B1                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:000046B6                 mov     [ebp+var_4], 0
.text:000046BD                 mov     ecx, [ebp+var_10]
.text:000046C0                 add     ecx, 18h        ; this
.text:000046C3                 call    ??0CExtractNtOptions@@QAE@XZ ; CExtractNtOptions::CExtractNtOptions(void)
.text:000046C8                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000046CF                 mov     eax, [ebp+var_10]
.text:000046D2                 mov     ecx, [ebp+var_C]
.text:000046D5                 mov     large fs:0, ecx
.text:000046DC                 pop     ecx
.text:000046DD                 add     esp, 10h
.text:000046E0                 cmp     ebp, esp
.text:000046E2                 call    __RTC_CheckEsp
.text:000046E7                 mov     esp, ebp
.text:000046E9                 pop     ebp
.text:000046EA                 retn
.text:000046EA ??0CExtractOptionsBase@@QAE@XZ endp
.text:000046EA
.text:000046EA ; ---------------------------------------------------------------------------
.text:000046EB                 align 4
.text:000046EB _text           ends
.text:000046EB
.text$x:000046EC ; ===========================================================================
.text$x:000046EC
.text$x:000046EC ; Segment type: Pure code
.text$x:000046EC ; Segment permissions: Read/Execute
.text$x:000046EC _text$x         segment para public 'CODE' use32
.text$x:000046EC                 assume cs:_text$x
.text$x:000046EC                 ;org 46ECh
.text$x:000046EC ; COMDAT (pick associative to section at 4654)
.text$x:000046EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000046EC
.text$x:000046EC ; =============== S U B R O U T I N E =======================================
.text$x:000046EC
.text$x:000046EC
.text$x:000046EC __unwindfunclet$??0CExtractOptionsBase@@QAE@XZ$0 proc near
.text$x:000046EC                                         ; DATA XREF: .xdata$x:00004718o
.text$x:000046EC                 mov     ecx, [ebp-10h]
.text$x:000046EF                 add     ecx, 0Ch        ; this
.text$x:000046F2                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:000046F2 __unwindfunclet$??0CExtractOptionsBase@@QAE@XZ$0 endp
.text$x:000046F2
.text$x:000046F7
.text$x:000046F7 ; =============== S U B R O U T I N E =======================================
.text$x:000046F7
.text$x:000046F7
.text$x:000046F7 __ehhandler$??0CExtractOptionsBase@@QAE@XZ proc near
.text$x:000046F7                                         ; DATA XREF: CExtractOptionsBase::CExtractOptionsBase(void)+5o
.text$x:000046F7
.text$x:000046F7 arg_4           = dword ptr  8
.text$x:000046F7
.text$x:000046F7                 mov     edx, [esp+arg_4]
.text$x:000046FB                 lea     eax, [edx+0Ch]
.text$x:000046FE                 mov     ecx, [edx-8]
.text$x:00004701                 xor     ecx, eax
.text$x:00004703                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004708                 mov     eax, offset __ehfuncinfo$??0CExtractOptionsBase@@QAE@XZ
.text$x:0000470D                 jmp     ___CxxFrameHandler3
.text$x:0000470D __ehhandler$??0CExtractOptionsBase@@QAE@XZ endp
.text$x:0000470D
.text$x:0000470D ; ---------------------------------------------------------------------------
.text$x:00004712                 align 4
.text$x:00004712 _text$x         ends
.text$x:00004712
.xdata$x:00004714 ; ===========================================================================
.xdata$x:00004714
.xdata$x:00004714 ; Segment type: Pure data
.xdata$x:00004714 ; Segment permissions: Read
.xdata$x:00004714 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004714                 assume cs:_xdata$x
.xdata$x:00004714                 ;org 4714h
.xdata$x:00004714 ; COMDAT (pick associative to section at 4654)
.xdata$x:00004714 __unwindtable$??0CExtractOptionsBase@@QAE@XZ db 0FFh
.xdata$x:00004714                                         ; DATA XREF: .xdata$x:00004724o
.xdata$x:00004715                 db 0FFh
.xdata$x:00004716                 db 0FFh
.xdata$x:00004717                 db 0FFh
.xdata$x:00004718                 dd offset __unwindfunclet$??0CExtractOptionsBase@@QAE@XZ$0
.xdata$x:0000471C __ehfuncinfo$??0CExtractOptionsBase@@QAE@XZ db  22h ; "
.xdata$x:0000471C                                         ; DATA XREF: __ehhandler$??0CExtractOptionsBase@@QAE@XZ+11o
.xdata$x:0000471D                 db    5
.xdata$x:0000471E                 db  93h ; ô
.xdata$x:0000471F                 db  19h
.xdata$x:00004720                 db    1
.xdata$x:00004721                 db    0
.xdata$x:00004722                 db    0
.xdata$x:00004723                 db    0
.xdata$x:00004724                 dd offset __unwindtable$??0CExtractOptionsBase@@QAE@XZ
.xdata$x:00004728                 db    0
.xdata$x:00004729                 db    0
.xdata$x:0000472A                 db    0
.xdata$x:0000472B                 db    0
.xdata$x:0000472C                 db    0
.xdata$x:0000472D                 db    0
.xdata$x:0000472E                 db    0
.xdata$x:0000472F                 db    0
.xdata$x:00004730                 db    0
.xdata$x:00004731                 db    0
.xdata$x:00004732                 db    0
.xdata$x:00004733                 db    0
.xdata$x:00004734                 db    0
.xdata$x:00004735                 db    0
.xdata$x:00004736                 db    0
.xdata$x:00004737                 db    0
.xdata$x:00004738                 db    0
.xdata$x:00004739                 db    0
.xdata$x:0000473A                 db    0
.xdata$x:0000473B                 db    0
.xdata$x:0000473C                 db    1
.xdata$x:0000473D                 db    0
.xdata$x:0000473E                 db    0
.xdata$x:0000473F                 db    0
.xdata$x:0000473F _xdata$x        ends
.xdata$x:0000473F
.text:00004740 ; ===========================================================================
.text:00004740
.text:00004740 ; Segment type: Pure code
.text:00004740 ; Segment permissions: Read/Execute
.text:00004740 _text           segment para public 'CODE' use32
.text:00004740                 assume cs:_text
.text:00004740                 ;org 4740h
.text:00004740 ; COMDAT (pick any)
.text:00004740                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004740
.text:00004740 ; =============== S U B R O U T I N E =======================================
.text:00004740
.text:00004740 ; Attributes: bp-based frame
.text:00004740
.text:00004740 ; _DWORD __thiscall CBoolPair::CBoolPair(CBoolPair *__hidden this)
.text:00004740                 public ??0CBoolPair@@QAE@XZ
.text:00004740 ??0CBoolPair@@QAE@XZ proc near          ; CODE XREF: CExtractOptionsBase::CExtractOptionsBase(void)+30p
.text:00004740                                         ; CExtractNtOptions::CExtractNtOptions(void)+11p ...
.text:00004740
.text:00004740 var_4           = dword ptr -4
.text:00004740
.text:00004740                 push    ebp
.text:00004741                 mov     ebp, esp
.text:00004743                 push    ecx
.text:00004744                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000474B                 mov     [ebp+var_4], ecx
.text:0000474E                 mov     eax, [ebp+var_4]
.text:00004751                 mov     byte ptr [eax], 0
.text:00004754                 mov     ecx, [ebp+var_4]
.text:00004757                 mov     byte ptr [ecx+1], 0
.text:0000475B                 mov     eax, [ebp+var_4]
.text:0000475E                 mov     esp, ebp
.text:00004760                 pop     ebp
.text:00004761                 retn
.text:00004761 ??0CBoolPair@@QAE@XZ endp
.text:00004761
.text:00004761 ; ---------------------------------------------------------------------------
.text:00004762                 align 4
.text:00004762 _text           ends
.text:00004762
.text:00004764 ; ===========================================================================
.text:00004764
.text:00004764 ; Segment type: Pure code
.text:00004764 ; Segment permissions: Read/Execute
.text:00004764 _text           segment para public 'CODE' use32
.text:00004764                 assume cs:_text
.text:00004764                 ;org 4764h
.text:00004764 ; COMDAT (pick any)
.text:00004764                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004764
.text:00004764 ; =============== S U B R O U T I N E =======================================
.text:00004764
.text:00004764 ; Attributes: bp-based frame
.text:00004764
.text:00004764 ; _DWORD __thiscall CExtractNtOptions::CExtractNtOptions(CExtractNtOptions *__hidden this)
.text:00004764                 public ??0CExtractNtOptions@@QAE@XZ
.text:00004764 ??0CExtractNtOptions@@QAE@XZ proc near  ; CODE XREF: CExtractOptionsBase::CExtractOptionsBase(void)+6Fp
.text:00004764
.text:00004764 var_4           = dword ptr -4
.text:00004764
.text:00004764                 push    ebp
.text:00004765                 mov     ebp, esp
.text:00004767                 push    ecx
.text:00004768                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000476F                 mov     [ebp+var_4], ecx
.text:00004772                 mov     ecx, [ebp+var_4] ; this
.text:00004775                 call    ??0CBoolPair@@QAE@XZ ; CBoolPair::CBoolPair(void)
.text:0000477A                 mov     ecx, [ebp+var_4]
.text:0000477D                 add     ecx, 2          ; this
.text:00004780                 call    ??0CBoolPair@@QAE@XZ ; CBoolPair::CBoolPair(void)
.text:00004785                 mov     ecx, [ebp+var_4]
.text:00004788                 add     ecx, 4          ; this
.text:0000478B                 call    ??0CBoolPair@@QAE@XZ ; CBoolPair::CBoolPair(void)
.text:00004790                 mov     ecx, [ebp+var_4]
.text:00004793                 add     ecx, 6          ; this
.text:00004796                 call    ??0CBoolPair@@QAE@XZ ; CBoolPair::CBoolPair(void)
.text:0000479B                 mov     eax, [ebp+var_4]
.text:0000479E                 mov     byte ptr [eax+8], 0
.text:000047A2                 mov     ecx, [ebp+var_4]
.text:000047A5                 mov     byte ptr [ecx+9], 0
.text:000047A9                 mov     edx, [ebp+var_4]
.text:000047AC                 mov     byte ptr [edx+2], 1
.text:000047B0                 mov     eax, [ebp+var_4]
.text:000047B3                 mov     byte ptr [eax+4], 1
.text:000047B7                 mov     ecx, [ebp+var_4]
.text:000047BA                 mov     byte ptr [ecx+6], 1
.text:000047BE                 mov     eax, [ebp+var_4]
.text:000047C1                 add     esp, 4
.text:000047C4                 cmp     ebp, esp
.text:000047C6                 call    __RTC_CheckEsp
.text:000047CB                 mov     esp, ebp
.text:000047CD                 pop     ebp
.text:000047CE                 retn
.text:000047CE ??0CExtractNtOptions@@QAE@XZ endp
.text:000047CE
.text:000047CE ; ---------------------------------------------------------------------------
.text:000047CF                 align 10h
.text:000047CF _text           ends
.text:000047CF
.text:000047D0 ; ===========================================================================
.text:000047D0
.text:000047D0 ; Segment type: Pure code
.text:000047D0 ; Segment permissions: Read/Execute
.text:000047D0 _text           segment para public 'CODE' use32
.text:000047D0                 assume cs:_text
.text:000047D0                 ;org 47D0h
.text:000047D0 ; COMDAT (pick any)
.text:000047D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000047D0
.text:000047D0 ; =============== S U B R O U T I N E =======================================
.text:000047D0
.text:000047D0 ; Attributes: bp-based frame
.text:000047D0
.text:000047D0 ; _DWORD __thiscall CExtractOptionsBase::~CExtractOptionsBase(CExtractOptionsBase *__hidden this)
.text:000047D0                 public ??1CExtractOptionsBase@@QAE@XZ
.text:000047D0 ??1CExtractOptionsBase@@QAE@XZ proc near
.text:000047D0                                         ; CODE XREF: __unwindfunclet$??0CExtractOptions@@QAE@XZ$0+3j
.text:000047D0                                         ; __unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$7+9j ...
.text:000047D0
.text:000047D0 var_4           = dword ptr -4
.text:000047D0
.text:000047D0                 push    ebp
.text:000047D1                 mov     ebp, esp
.text:000047D3                 push    ecx
.text:000047D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000047DB                 mov     [ebp+var_4], ecx
.text:000047DE                 mov     ecx, [ebp+var_4]
.text:000047E1                 add     ecx, 0Ch        ; this
.text:000047E4                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000047E9                 add     esp, 4
.text:000047EC                 cmp     ebp, esp
.text:000047EE                 call    __RTC_CheckEsp
.text:000047F3                 mov     esp, ebp
.text:000047F5                 pop     ebp
.text:000047F6                 retn
.text:000047F6 ??1CExtractOptionsBase@@QAE@XZ endp
.text:000047F6
.text:000047F6 ; ---------------------------------------------------------------------------
.text:000047F7                 align 4
.text:000047F7 _text           ends
.text:000047F7
.text:000047F8 ; ===========================================================================
.text:000047F8
.text:000047F8 ; Segment type: Pure code
.text:000047F8 ; Segment permissions: Read/Execute
.text:000047F8 _text           segment para public 'CODE' use32
.text:000047F8                 assume cs:_text
.text:000047F8                 ;org 47F8h
.text:000047F8 ; COMDAT (pick any)
.text:000047F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000047F8
.text:000047F8 ; =============== S U B R O U T I N E =======================================
.text:000047F8
.text:000047F8 ; Attributes: bp-based frame
.text:000047F8
.text:000047F8 ; _DWORD __thiscall CUpdateErrorInfo::CUpdateErrorInfo(CUpdateErrorInfo *__hidden this)
.text:000047F8                 public ??0CUpdateErrorInfo@@QAE@XZ
.text:000047F8 ??0CUpdateErrorInfo@@QAE@XZ proc near   ; CODE XREF: Main2(void)+195Bp
.text:000047F8                                         ; Main2(void)+1ADBp
.text:000047F8
.text:000047F8 var_10          = dword ptr -10h
.text:000047F8 var_C           = dword ptr -0Ch
.text:000047F8 var_4           = dword ptr -4
.text:000047F8
.text:000047F8                 push    ebp
.text:000047F9                 mov     ebp, esp
.text:000047FB                 push    0FFFFFFFFh
.text:000047FD                 push    offset __ehhandler$??0CUpdateErrorInfo@@QAE@XZ
.text:00004802                 mov     eax, large fs:0
.text:00004808                 push    eax
.text:00004809                 push    ecx
.text:0000480A                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00004811                 mov     eax, dword ptr ds:___security_cookie
.text:00004816                 xor     eax, ebp
.text:00004818                 push    eax
.text:00004819                 lea     eax, [ebp+var_C]
.text:0000481C                 mov     large fs:0, eax
.text:00004822                 mov     [ebp+var_10], ecx
.text:00004825                 mov     eax, [ebp+var_10]
.text:00004828                 mov     dword ptr [eax], 0
.text:0000482E                 mov     ecx, [ebp+var_10]
.text:00004831                 add     ecx, 4
.text:00004834                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:00004839                 mov     [ebp+var_4], 0
.text:00004840                 mov     ecx, [ebp+var_10]
.text:00004843                 add     ecx, 10h
.text:00004846                 call    ??0?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::CObjectVector<UString>(void)
.text:0000484B                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004852                 mov     eax, [ebp+var_10]
.text:00004855                 mov     ecx, [ebp+var_C]
.text:00004858                 mov     large fs:0, ecx
.text:0000485F                 pop     ecx
.text:00004860                 add     esp, 10h
.text:00004863                 cmp     ebp, esp
.text:00004865                 call    __RTC_CheckEsp
.text:0000486A                 mov     esp, ebp
.text:0000486C                 pop     ebp
.text:0000486D                 retn
.text:0000486D ??0CUpdateErrorInfo@@QAE@XZ endp
.text:0000486D
.text:0000486D ; ---------------------------------------------------------------------------
.text:0000486E                 align 10h
.text:0000486E _text           ends
.text:0000486E
.text$x:00004870 ; ===========================================================================
.text$x:00004870
.text$x:00004870 ; Segment type: Pure code
.text$x:00004870 ; Segment permissions: Read/Execute
.text$x:00004870 _text$x         segment para public 'CODE' use32
.text$x:00004870                 assume cs:_text$x
.text$x:00004870                 ;org 4870h
.text$x:00004870 ; COMDAT (pick associative to section at 47F8)
.text$x:00004870                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004870
.text$x:00004870 ; =============== S U B R O U T I N E =======================================
.text$x:00004870
.text$x:00004870
.text$x:00004870 __unwindfunclet$??0CUpdateErrorInfo@@QAE@XZ$0 proc near
.text$x:00004870                                         ; DATA XREF: .xdata$x:0000489Co
.text$x:00004870                 mov     ecx, [ebp-10h]
.text$x:00004873                 add     ecx, 4          ; this
.text$x:00004876                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00004876 __unwindfunclet$??0CUpdateErrorInfo@@QAE@XZ$0 endp
.text$x:00004876
.text$x:0000487B
.text$x:0000487B ; =============== S U B R O U T I N E =======================================
.text$x:0000487B
.text$x:0000487B
.text$x:0000487B __ehhandler$??0CUpdateErrorInfo@@QAE@XZ proc near
.text$x:0000487B                                         ; DATA XREF: CUpdateErrorInfo::CUpdateErrorInfo(void)+5o
.text$x:0000487B
.text$x:0000487B arg_4           = dword ptr  8
.text$x:0000487B
.text$x:0000487B                 mov     edx, [esp+arg_4]
.text$x:0000487F                 lea     eax, [edx+0Ch]
.text$x:00004882                 mov     ecx, [edx-8]
.text$x:00004885                 xor     ecx, eax
.text$x:00004887                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000488C                 mov     eax, offset __ehfuncinfo$??0CUpdateErrorInfo@@QAE@XZ
.text$x:00004891                 jmp     ___CxxFrameHandler3
.text$x:00004891 __ehhandler$??0CUpdateErrorInfo@@QAE@XZ endp
.text$x:00004891
.text$x:00004891 ; ---------------------------------------------------------------------------
.text$x:00004896                 align 4
.text$x:00004896 _text$x         ends
.text$x:00004896
.xdata$x:00004898 ; ===========================================================================
.xdata$x:00004898
.xdata$x:00004898 ; Segment type: Pure data
.xdata$x:00004898 ; Segment permissions: Read
.xdata$x:00004898 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004898                 assume cs:_xdata$x
.xdata$x:00004898                 ;org 4898h
.xdata$x:00004898 ; COMDAT (pick associative to section at 47F8)
.xdata$x:00004898 __unwindtable$??0CUpdateErrorInfo@@QAE@XZ db 0FFh
.xdata$x:00004898                                         ; DATA XREF: .xdata$x:000048A8o
.xdata$x:00004899                 db 0FFh
.xdata$x:0000489A                 db 0FFh
.xdata$x:0000489B                 db 0FFh
.xdata$x:0000489C                 dd offset __unwindfunclet$??0CUpdateErrorInfo@@QAE@XZ$0
.xdata$x:000048A0 __ehfuncinfo$??0CUpdateErrorInfo@@QAE@XZ db  22h ; "
.xdata$x:000048A0                                         ; DATA XREF: __ehhandler$??0CUpdateErrorInfo@@QAE@XZ+11o
.xdata$x:000048A1                 db    5
.xdata$x:000048A2                 db  93h ; ô
.xdata$x:000048A3                 db  19h
.xdata$x:000048A4                 db    1
.xdata$x:000048A5                 db    0
.xdata$x:000048A6                 db    0
.xdata$x:000048A7                 db    0
.xdata$x:000048A8                 dd offset __unwindtable$??0CUpdateErrorInfo@@QAE@XZ
.xdata$x:000048AC                 align 20h
.xdata$x:000048C0                 db    1
.xdata$x:000048C1                 db    0
.xdata$x:000048C2                 db    0
.xdata$x:000048C3                 db    0
.xdata$x:000048C3 _xdata$x        ends
.xdata$x:000048C3
.text:000048C4 ; ===========================================================================
.text:000048C4
.text:000048C4 ; Segment type: Pure code
.text:000048C4 ; Segment permissions: Read/Execute
.text:000048C4 _text           segment para public 'CODE' use32
.text:000048C4                 assume cs:_text
.text:000048C4                 ;org 48C4h
.text:000048C4 ; COMDAT (pick any)
.text:000048C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000048C4
.text:000048C4 ; =============== S U B R O U T I N E =======================================
.text:000048C4
.text:000048C4 ; Attributes: bp-based frame
.text:000048C4
.text:000048C4 ; bool __thiscall CArcCommand::IsTestCommand(CArcCommand *__hidden this)
.text:000048C4                 public ?IsTestCommand@CArcCommand@@QBE_NXZ
.text:000048C4 ?IsTestCommand@CArcCommand@@QBE_NXZ proc near ; CODE XREF: Main2(void)+EBBp
.text:000048C4
.text:000048C4 var_4           = dword ptr -4
.text:000048C4
.text:000048C4                 push    ebp
.text:000048C5                 mov     ebp, esp
.text:000048C7                 push    ecx
.text:000048C8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000048CF                 mov     [ebp+var_4], ecx
.text:000048D2                 mov     eax, [ebp+var_4]
.text:000048D5                 xor     ecx, ecx
.text:000048D7                 cmp     dword ptr [eax], 3
.text:000048DA                 setz    cl
.text:000048DD                 mov     al, cl
.text:000048DF                 mov     esp, ebp
.text:000048E1                 pop     ebp
.text:000048E2                 retn
.text:000048E2 ?IsTestCommand@CArcCommand@@QBE_NXZ endp
.text:000048E2
.text:000048E2 ; ---------------------------------------------------------------------------
.text:000048E3                 align 4
.text:000048E3 _text           ends
.text:000048E3
.text:000048E4 ; ===========================================================================
.text:000048E4
.text:000048E4 ; Segment type: Pure code
.text:000048E4 ; Segment permissions: Read/Execute
.text:000048E4 _text           segment para public 'CODE' use32
.text:000048E4                 assume cs:_text
.text:000048E4                 ;org 48E4h
.text:000048E4 ; COMDAT (pick any)
.text:000048E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000048E4
.text:000048E4 ; =============== S U B R O U T I N E =======================================
.text:000048E4
.text:000048E4 ; Attributes: bp-based frame
.text:000048E4
.text:000048E4 ; _DWORD __thiscall CArcCmdLineOptions::CArcCmdLineOptions(CArcCmdLineOptions *__hidden this)
.text:000048E4                 public ??0CArcCmdLineOptions@@QAE@XZ
.text:000048E4 ??0CArcCmdLineOptions@@QAE@XZ proc near ; CODE XREF: Main2(void)+EAp
.text:000048E4
.text:000048E4 var_10          = dword ptr -10h
.text:000048E4 var_C           = dword ptr -0Ch
.text:000048E4 var_4           = dword ptr -4
.text:000048E4
.text:000048E4                 push    ebp
.text:000048E5                 mov     ebp, esp
.text:000048E7                 push    0FFFFFFFFh
.text:000048E9                 push    offset __ehhandler$??0CArcCmdLineOptions@@QAE@XZ
.text:000048EE                 mov     eax, large fs:0
.text:000048F4                 push    eax
.text:000048F5                 push    ecx
.text:000048F6                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000048FD                 mov     eax, dword ptr ds:___security_cookie
.text:00004902                 xor     eax, ebp
.text:00004904                 push    eax
.text:00004905                 lea     eax, [ebp+var_C]
.text:00004908                 mov     large fs:0, eax
.text:0000490E                 mov     [ebp+var_10], ecx
.text:00004911                 mov     eax, [ebp+var_10]
.text:00004914                 mov     byte ptr [eax+1], 0
.text:00004918                 mov     ecx, [ebp+var_10]
.text:0000491B                 mov     byte ptr [ecx+2], 0
.text:0000491F                 mov     edx, [ebp+var_10]
.text:00004922                 mov     byte ptr [edx+3], 0
.text:00004926                 mov     eax, [ebp+var_10]
.text:00004929                 mov     byte ptr [eax+7], 0
.text:0000492D                 mov     ecx, [ebp+var_10]
.text:00004930                 mov     byte ptr [ecx+8], 0
.text:00004934                 mov     ecx, [ebp+var_10]
.text:00004937                 add     ecx, 0Ch        ; this
.text:0000493A                 call    ??0CCensor@NWildcard@@QAE@XZ ; NWildcard::CCensor::CCensor(void)
.text:0000493F                 mov     [ebp+var_4], 0
.text:00004946                 mov     ecx, [ebp+var_10]
.text:00004949                 add     ecx, 28h ; '('
.text:0000494C                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00004951                 mov     byte ptr [ebp+var_4], 1
.text:00004955                 mov     ecx, [ebp+var_10]
.text:00004958                 add     ecx, 38h ; '8'
.text:0000495B                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00004960                 mov     byte ptr [ebp+var_4], 2
.text:00004964                 mov     ecx, [ebp+var_10]
.text:00004967                 add     ecx, 48h ; 'H'
.text:0000496A                 call    ??0?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::CObjectVector<UString>(void)
.text:0000496F                 mov     byte ptr [ebp+var_4], 3
.text:00004973                 mov     ecx, [ebp+var_10]
.text:00004976                 add     ecx, 58h ; 'X'  ; this
.text:00004979                 call    ??0CCensor@NWildcard@@QAE@XZ ; NWildcard::CCensor::CCensor(void)
.text:0000497E                 mov     byte ptr [ebp+var_4], 4
.text:00004982                 mov     ecx, [ebp+var_10]
.text:00004985                 add     ecx, 70h ; 'p'
.text:00004988                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:0000498D                 mov     byte ptr [ebp+var_4], 5
.text:00004991                 mov     ecx, [ebp+var_10]
.text:00004994                 add     ecx, 7Ch ; '|'
.text:00004997                 call    ??0?$CObjectVector@UCProperty@@@@QAE@XZ ; CObjectVector<CProperty>::CObjectVector<CProperty>(void)
.text:0000499C                 mov     byte ptr [ebp+var_4], 6
.text:000049A0                 mov     ecx, [ebp+var_10]
.text:000049A3                 add     ecx, 88h ; 'ê'
.text:000049A9                 call    ??0CExtractOptionsBase@@QAE@XZ ; CExtractOptionsBase::CExtractOptionsBase(void)
.text:000049AE                 mov     byte ptr [ebp+var_4], 7
.text:000049B2                 mov     ecx, [ebp+var_10]
.text:000049B5                 add     ecx, 0ACh ; '¼' ; this
.text:000049BB                 call    ??0CBoolPair@@QAE@XZ ; CBoolPair::CBoolPair(void)
.text:000049C0                 mov     ecx, [ebp+var_10]
.text:000049C3                 add     ecx, 0AEh ; '«' ; this
.text:000049C9                 call    ??0CBoolPair@@QAE@XZ ; CBoolPair::CBoolPair(void)
.text:000049CE                 mov     ecx, [ebp+var_10]
.text:000049D1                 add     ecx, 0B0h ; '¦' ; this
.text:000049D7                 call    ??0CBoolPair@@QAE@XZ ; CBoolPair::CBoolPair(void)
.text:000049DC                 mov     ecx, [ebp+var_10]
.text:000049DF                 add     ecx, 0B2h ; '¦' ; this
.text:000049E5                 call    ??0CBoolPair@@QAE@XZ ; CBoolPair::CBoolPair(void)
.text:000049EA                 mov     ecx, [ebp+var_10]
.text:000049ED                 add     ecx, 0B8h ; '+' ; this
.text:000049F3                 call    ??0CUpdateOptions@@QAE@XZ ; CUpdateOptions::CUpdateOptions(void)
.text:000049F8                 mov     byte ptr [ebp+var_4], 8
.text:000049FC                 mov     ecx, [ebp+var_10]
.text:000049FF                 add     ecx, 1D0h       ; this
.text:00004A05                 call    ??0CHashOptions@@QAE@XZ ; CHashOptions::CHashOptions(void)
.text:00004A0A                 mov     byte ptr [ebp+var_4], 9
.text:00004A0E                 mov     ecx, [ebp+var_10]
.text:00004A11                 add     ecx, 1E4h
.text:00004A17                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00004A1C                 mov     byte ptr [ebp+var_4], 0Ah
.text:00004A20                 mov     ecx, [ebp+var_10]
.text:00004A23                 add     ecx, 1F0h
.text:00004A29                 call    ??0?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::CObjectVector<UString>(void)
.text:00004A2E                 mov     edx, [ebp+var_10]
.text:00004A31                 mov     dword ptr [edx+1FCh], 1
.text:00004A3B                 mov     eax, [ebp+var_10]
.text:00004A3E                 mov     dword ptr [eax+200h], 2
.text:00004A48                 mov     ecx, [ebp+var_10]
.text:00004A4B                 mov     dword ptr [ecx+204h], 1
.text:00004A55                 mov     edx, [ebp+var_10]
.text:00004A58                 mov     dword ptr [edx+208h], 0
.text:00004A62                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004A69                 mov     eax, [ebp+var_10]
.text:00004A6C                 mov     ecx, [ebp+var_C]
.text:00004A6F                 mov     large fs:0, ecx
.text:00004A76                 pop     ecx
.text:00004A77                 add     esp, 10h
.text:00004A7A                 cmp     ebp, esp
.text:00004A7C                 call    __RTC_CheckEsp
.text:00004A81                 mov     esp, ebp
.text:00004A83                 pop     ebp
.text:00004A84                 retn
.text:00004A84 ??0CArcCmdLineOptions@@QAE@XZ endp
.text:00004A84
.text:00004A84 ; ---------------------------------------------------------------------------
.text:00004A85                 align 4
.text:00004A85 _text           ends
.text:00004A85
.text$x:00004A88 ; ===========================================================================
.text$x:00004A88
.text$x:00004A88 ; Segment type: Pure code
.text$x:00004A88 ; Segment permissions: Read/Execute
.text$x:00004A88 _text$x         segment para public 'CODE' use32
.text$x:00004A88                 assume cs:_text$x
.text$x:00004A88                 ;org 4A88h
.text$x:00004A88 ; COMDAT (pick associative to section at 48E4)
.text$x:00004A88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004A88
.text$x:00004A88 ; =============== S U B R O U T I N E =======================================
.text$x:00004A88
.text$x:00004A88
.text$x:00004A88 __unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$0 proc near
.text$x:00004A88                                         ; DATA XREF: .xdata$x:00004B50o
.text$x:00004A88                 mov     ecx, [ebp-10h]
.text$x:00004A8B                 add     ecx, 0Ch        ; this
.text$x:00004A8E                 jmp     ??1CCensor@NWildcard@@QAE@XZ ; NWildcard::CCensor::~CCensor(void)
.text$x:00004A8E __unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$0 endp
.text$x:00004A8E
.text$x:00004A93
.text$x:00004A93 ; =============== S U B R O U T I N E =======================================
.text$x:00004A93
.text$x:00004A93
.text$x:00004A93 __unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$1 proc near
.text$x:00004A93                                         ; DATA XREF: .xdata$x:00004B58o
.text$x:00004A93                 mov     ecx, [ebp-10h]
.text$x:00004A96                 add     ecx, 28h ; '('  ; this
.text$x:00004A99                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00004A99 __unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$1 endp
.text$x:00004A99
.text$x:00004A9E
.text$x:00004A9E ; =============== S U B R O U T I N E =======================================
.text$x:00004A9E
.text$x:00004A9E
.text$x:00004A9E __unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$2 proc near
.text$x:00004A9E                                         ; DATA XREF: .xdata$x:00004B60o
.text$x:00004A9E                 mov     ecx, [ebp-10h]
.text$x:00004AA1                 add     ecx, 38h ; '8'  ; this
.text$x:00004AA4                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00004AA4 __unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$2 endp
.text$x:00004AA4
.text$x:00004AA9
.text$x:00004AA9 ; =============== S U B R O U T I N E =======================================
.text$x:00004AA9
.text$x:00004AA9
.text$x:00004AA9 __unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$3 proc near
.text$x:00004AA9                                         ; DATA XREF: .xdata$x:00004B68o
.text$x:00004AA9                 mov     ecx, [ebp-10h]
.text$x:00004AAC                 add     ecx, 48h ; 'H'
.text$x:00004AAF                 jmp     ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text$x:00004AAF __unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$3 endp
.text$x:00004AAF
.text$x:00004AB4
.text$x:00004AB4 ; =============== S U B R O U T I N E =======================================
.text$x:00004AB4
.text$x:00004AB4
.text$x:00004AB4 __unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$4 proc near
.text$x:00004AB4                                         ; DATA XREF: .xdata$x:00004B70o
.text$x:00004AB4                 mov     ecx, [ebp-10h]
.text$x:00004AB7                 add     ecx, 58h ; 'X'  ; this
.text$x:00004ABA                 jmp     ??1CCensor@NWildcard@@QAE@XZ ; NWildcard::CCensor::~CCensor(void)
.text$x:00004ABA __unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$4 endp
.text$x:00004ABA
.text$x:00004ABF
.text$x:00004ABF ; =============== S U B R O U T I N E =======================================
.text$x:00004ABF
.text$x:00004ABF
.text$x:00004ABF __unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$5 proc near
.text$x:00004ABF                                         ; DATA XREF: .xdata$x:00004B78o
.text$x:00004ABF                 mov     ecx, [ebp-10h]
.text$x:00004AC2                 add     ecx, 70h ; 'p'  ; this
.text$x:00004AC5                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00004AC5 __unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$5 endp
.text$x:00004AC5
.text$x:00004ACA
.text$x:00004ACA ; =============== S U B R O U T I N E =======================================
.text$x:00004ACA
.text$x:00004ACA
.text$x:00004ACA __unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$6 proc near
.text$x:00004ACA                                         ; DATA XREF: .xdata$x:00004B80o
.text$x:00004ACA                 mov     ecx, [ebp-10h]
.text$x:00004ACD                 add     ecx, 7Ch ; '|'
.text$x:00004AD0                 jmp     ??1?$CObjectVector@UCProperty@@@@QAE@XZ ; CObjectVector<CProperty>::~CObjectVector<CProperty>(void)
.text$x:00004AD0 __unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$6 endp
.text$x:00004AD0
.text$x:00004AD5
.text$x:00004AD5 ; =============== S U B R O U T I N E =======================================
.text$x:00004AD5
.text$x:00004AD5
.text$x:00004AD5 __unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$7 proc near
.text$x:00004AD5                                         ; DATA XREF: .xdata$x:00004B88o
.text$x:00004AD5                 mov     ecx, [ebp-10h]
.text$x:00004AD8                 add     ecx, 88h ; 'ê'  ; this
.text$x:00004ADE                 jmp     ??1CExtractOptionsBase@@QAE@XZ ; CExtractOptionsBase::~CExtractOptionsBase(void)
.text$x:00004ADE __unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$7 endp
.text$x:00004ADE
.text$x:00004AE3
.text$x:00004AE3 ; =============== S U B R O U T I N E =======================================
.text$x:00004AE3
.text$x:00004AE3
.text$x:00004AE3 __unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$8 proc near
.text$x:00004AE3                                         ; DATA XREF: .xdata$x:00004B90o
.text$x:00004AE3                 mov     ecx, [ebp-10h]
.text$x:00004AE6                 add     ecx, 0B8h ; '+' ; this
.text$x:00004AEC                 jmp     ??1CUpdateOptions@@QAE@XZ ; CUpdateOptions::~CUpdateOptions(void)
.text$x:00004AEC __unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$8 endp
.text$x:00004AEC
.text$x:00004AF1
.text$x:00004AF1 ; =============== S U B R O U T I N E =======================================
.text$x:00004AF1
.text$x:00004AF1
.text$x:00004AF1 __unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$9 proc near
.text$x:00004AF1                                         ; DATA XREF: .xdata$x:00004B98o
.text$x:00004AF1                 mov     ecx, [ebp-10h]
.text$x:00004AF4                 add     ecx, 1D0h       ; this
.text$x:00004AFA                 jmp     ??1CHashOptions@@QAE@XZ ; CHashOptions::~CHashOptions(void)
.text$x:00004AFA __unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$9 endp
.text$x:00004AFA
.text$x:00004AFF
.text$x:00004AFF ; =============== S U B R O U T I N E =======================================
.text$x:00004AFF
.text$x:00004AFF
.text$x:00004AFF __unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$10 proc near
.text$x:00004AFF                                         ; DATA XREF: .xdata$x:00004BA0o
.text$x:00004AFF                 mov     ecx, [ebp-10h]
.text$x:00004B02                 add     ecx, 1E4h       ; this
.text$x:00004B08                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00004B08 __unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$10 endp
.text$x:00004B08
.text$x:00004B0D
.text$x:00004B0D ; =============== S U B R O U T I N E =======================================
.text$x:00004B0D
.text$x:00004B0D
.text$x:00004B0D __ehhandler$??0CArcCmdLineOptions@@QAE@XZ proc near
.text$x:00004B0D                                         ; DATA XREF: CArcCmdLineOptions::CArcCmdLineOptions(void)+5o
.text$x:00004B0D
.text$x:00004B0D arg_4           = dword ptr  8
.text$x:00004B0D
.text$x:00004B0D                 mov     edx, [esp+arg_4]
.text$x:00004B11                 lea     eax, [edx+0Ch]
.text$x:00004B14                 mov     ecx, [edx-8]
.text$x:00004B17                 xor     ecx, eax
.text$x:00004B19                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004B1E                 mov     eax, offset __ehfuncinfo$??0CArcCmdLineOptions@@QAE@XZ
.text$x:00004B23                 jmp     ___CxxFrameHandler3
.text$x:00004B23 __ehhandler$??0CArcCmdLineOptions@@QAE@XZ endp
.text$x:00004B23
.text$x:00004B23 _text$x         ends
.text$x:00004B23
.xdata$x:00004B28 ; ===========================================================================
.xdata$x:00004B28
.xdata$x:00004B28 ; Segment type: Pure data
.xdata$x:00004B28 ; Segment permissions: Read
.xdata$x:00004B28 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004B28                 assume cs:_xdata$x
.xdata$x:00004B28                 ;org 4B28h
.xdata$x:00004B28 ; COMDAT (pick associative to section at 48E4)
.xdata$x:00004B28 __ehfuncinfo$??0CArcCmdLineOptions@@QAE@XZ db  22h ; "
.xdata$x:00004B28                                         ; DATA XREF: __ehhandler$??0CArcCmdLineOptions@@QAE@XZ+11o
.xdata$x:00004B29                 db    5
.xdata$x:00004B2A                 db  93h ; ô
.xdata$x:00004B2B                 db  19h
.xdata$x:00004B2C                 db  0Bh
.xdata$x:00004B2D                 db    0
.xdata$x:00004B2E                 db    0
.xdata$x:00004B2F                 db    0
.xdata$x:00004B30                 dd offset __unwindtable$??0CArcCmdLineOptions@@QAE@XZ
.xdata$x:00004B34                 db    0
.xdata$x:00004B35                 db    0
.xdata$x:00004B36                 db    0
.xdata$x:00004B37                 db    0
.xdata$x:00004B38                 db    0
.xdata$x:00004B39                 db    0
.xdata$x:00004B3A                 db    0
.xdata$x:00004B3B                 db    0
.xdata$x:00004B3C                 db    0
.xdata$x:00004B3D                 db    0
.xdata$x:00004B3E                 db    0
.xdata$x:00004B3F                 db    0
.xdata$x:00004B40                 db    0
.xdata$x:00004B41                 db    0
.xdata$x:00004B42                 db    0
.xdata$x:00004B43                 db    0
.xdata$x:00004B44                 db    0
.xdata$x:00004B45                 db    0
.xdata$x:00004B46                 db    0
.xdata$x:00004B47                 db    0
.xdata$x:00004B48                 db    1
.xdata$x:00004B49                 db    0
.xdata$x:00004B4A                 db    0
.xdata$x:00004B4B                 db    0
.xdata$x:00004B4C __unwindtable$??0CArcCmdLineOptions@@QAE@XZ db 0FFh
.xdata$x:00004B4C                                         ; DATA XREF: .xdata$x:00004B30o
.xdata$x:00004B4D                 db 0FFh
.xdata$x:00004B4E                 db 0FFh
.xdata$x:00004B4F                 db 0FFh
.xdata$x:00004B50                 dd offset __unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$0
.xdata$x:00004B54                 align 8
.xdata$x:00004B58                 dd offset __unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$1
.xdata$x:00004B5C                 db    1
.xdata$x:00004B5D                 db    0
.xdata$x:00004B5E                 db    0
.xdata$x:00004B5F                 db    0
.xdata$x:00004B60                 dd offset __unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$2
.xdata$x:00004B64                 db    2
.xdata$x:00004B65                 db    0
.xdata$x:00004B66                 db    0
.xdata$x:00004B67                 db    0
.xdata$x:00004B68                 dd offset __unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$3
.xdata$x:00004B6C                 db    3
.xdata$x:00004B6D                 db    0
.xdata$x:00004B6E                 db    0
.xdata$x:00004B6F                 db    0
.xdata$x:00004B70                 dd offset __unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$4
.xdata$x:00004B74                 db    4
.xdata$x:00004B75                 db    0
.xdata$x:00004B76                 db    0
.xdata$x:00004B77                 db    0
.xdata$x:00004B78                 dd offset __unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$5
.xdata$x:00004B7C                 db    5
.xdata$x:00004B7D                 db    0
.xdata$x:00004B7E                 db    0
.xdata$x:00004B7F                 db    0
.xdata$x:00004B80                 dd offset __unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$6
.xdata$x:00004B84                 db    6
.xdata$x:00004B85                 db    0
.xdata$x:00004B86                 db    0
.xdata$x:00004B87                 db    0
.xdata$x:00004B88                 dd offset __unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$7
.xdata$x:00004B8C                 db    7
.xdata$x:00004B8D                 db    0
.xdata$x:00004B8E                 db    0
.xdata$x:00004B8F                 db    0
.xdata$x:00004B90                 dd offset __unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$8
.xdata$x:00004B94                 db    8
.xdata$x:00004B95                 db    0
.xdata$x:00004B96                 db    0
.xdata$x:00004B97                 db    0
.xdata$x:00004B98                 dd offset __unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$9
.xdata$x:00004B9C                 db    9
.xdata$x:00004B9D                 db    0
.xdata$x:00004B9E                 db    0
.xdata$x:00004B9F                 db    0
.xdata$x:00004BA0                 dd offset __unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$10
.xdata$x:00004BA0 _xdata$x        ends
.xdata$x:00004BA0
.text:00004BA4 ; ===========================================================================
.text:00004BA4
.text:00004BA4 ; Segment type: Pure code
.text:00004BA4 ; Segment permissions: Read/Execute
.text:00004BA4 _text           segment para public 'CODE' use32
.text:00004BA4                 assume cs:_text
.text:00004BA4                 ;org 4BA4h
.text:00004BA4 ; COMDAT (pick any)
.text:00004BA4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004BA4
.text:00004BA4 ; =============== S U B R O U T I N E =======================================
.text:00004BA4
.text:00004BA4 ; Attributes: bp-based frame
.text:00004BA4
.text:00004BA4 ; _DWORD __thiscall CHashOptions::CHashOptions(CHashOptions *__hidden this)
.text:00004BA4                 public ??0CHashOptions@@QAE@XZ
.text:00004BA4 ??0CHashOptions@@QAE@XZ proc near       ; CODE XREF: CArcCmdLineOptions::CArcCmdLineOptions(void)+121p
.text:00004BA4
.text:00004BA4 var_4           = dword ptr -4
.text:00004BA4
.text:00004BA4                 push    ebp
.text:00004BA5                 mov     ebp, esp
.text:00004BA7                 push    ecx
.text:00004BA8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004BAF                 mov     [ebp+var_4], ecx
.text:00004BB2                 mov     ecx, [ebp+var_4]
.text:00004BB5                 call    ??0?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::CObjectVector<UString>(void)
.text:00004BBA                 mov     eax, [ebp+var_4]
.text:00004BBD                 mov     byte ptr [eax+0Ch], 0
.text:00004BC1                 mov     ecx, [ebp+var_4]
.text:00004BC4                 mov     byte ptr [ecx+0Dh], 0
.text:00004BC8                 mov     edx, [ebp+var_4]
.text:00004BCB                 mov     byte ptr [edx+0Eh], 0
.text:00004BCF                 mov     eax, [ebp+var_4]
.text:00004BD2                 mov     dword ptr [eax+10h], 0
.text:00004BD9                 mov     eax, [ebp+var_4]
.text:00004BDC                 add     esp, 4
.text:00004BDF                 cmp     ebp, esp
.text:00004BE1                 call    __RTC_CheckEsp
.text:00004BE6                 mov     esp, ebp
.text:00004BE8                 pop     ebp
.text:00004BE9                 retn
.text:00004BE9 ??0CHashOptions@@QAE@XZ endp
.text:00004BE9
.text:00004BE9 ; ---------------------------------------------------------------------------
.text:00004BEA                 align 4
.text:00004BEA _text           ends
.text:00004BEA
.text:00004BEC ; ===========================================================================
.text:00004BEC
.text:00004BEC ; Segment type: Pure code
.text:00004BEC ; Segment permissions: Read/Execute
.text:00004BEC _text           segment para public 'CODE' use32
.text:00004BEC                 assume cs:_text
.text:00004BEC                 ;org 4BECh
.text:00004BEC ; COMDAT (pick any)
.text:00004BEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004BEC
.text:00004BEC ; =============== S U B R O U T I N E =======================================
.text:00004BEC
.text:00004BEC ; Attributes: bp-based frame
.text:00004BEC
.text:00004BEC ; _DWORD __thiscall CUpdateOptions::CUpdateOptions(CUpdateOptions *__hidden this)
.text:00004BEC                 public ??0CUpdateOptions@@QAE@XZ
.text:00004BEC ??0CUpdateOptions@@QAE@XZ proc near     ; CODE XREF: CArcCmdLineOptions::CArcCmdLineOptions(void)+10Fp
.text:00004BEC
.text:00004BEC var_10          = dword ptr -10h
.text:00004BEC var_C           = dword ptr -0Ch
.text:00004BEC var_4           = dword ptr -4
.text:00004BEC
.text:00004BEC                 push    ebp
.text:00004BED                 mov     ebp, esp
.text:00004BEF                 push    0FFFFFFFFh
.text:00004BF1                 push    offset __ehhandler$??0CUpdateOptions@@QAE@XZ
.text:00004BF6                 mov     eax, large fs:0
.text:00004BFC                 push    eax
.text:00004BFD                 push    ecx
.text:00004BFE                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00004C05                 mov     eax, dword ptr ds:___security_cookie
.text:00004C0A                 xor     eax, ebp
.text:00004C0C                 push    eax
.text:00004C0D                 lea     eax, [ebp+var_C]
.text:00004C10                 mov     large fs:0, eax
.text:00004C16                 mov     [ebp+var_10], ecx
.text:00004C19                 mov     ecx, [ebp+var_10] ; this
.text:00004C1C                 call    ??0CCompressionMethodMode@@QAE@XZ ; CCompressionMethodMode::CCompressionMethodMode(void)
.text:00004C21                 mov     [ebp+var_4], 0
.text:00004C28                 mov     ecx, [ebp+var_10]
.text:00004C2B                 add     ecx, 38h ; '8'
.text:00004C2E                 call    ??0?$CObjectVector@UCUpdateArchiveCommand@@@@QAE@XZ ; CObjectVector<CUpdateArchiveCommand>::CObjectVector<CUpdateArchiveCommand>(void)
.text:00004C33                 mov     byte ptr [ebp+var_4], 1
.text:00004C37                 mov     eax, [ebp+var_10]
.text:00004C3A                 mov     byte ptr [eax+44h], 1
.text:00004C3E                 mov     ecx, [ebp+var_10]
.text:00004C41                 add     ecx, 48h ; 'H'  ; this
.text:00004C44                 call    ??0CArchivePath@@QAE@XZ ; CArchivePath::CArchivePath(void)
.text:00004C49                 mov     byte ptr [ebp+var_4], 2
.text:00004C4D                 mov     ecx, [ebp+var_10]
.text:00004C50                 mov     dword ptr [ecx+0A0h], 0
.text:00004C5A                 mov     edx, [ebp+var_10]
.text:00004C5D                 mov     byte ptr [edx+0A4h], 0
.text:00004C64                 mov     ecx, [ebp+var_10]
.text:00004C67                 add     ecx, 0A8h ; '¿'
.text:00004C6D                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00004C72                 mov     byte ptr [ebp+var_4], 3
.text:00004C76                 mov     eax, [ebp+var_10]
.text:00004C79                 mov     byte ptr [eax+0B4h], 0
.text:00004C80                 mov     ecx, [ebp+var_10]
.text:00004C83                 mov     byte ptr [ecx+0B5h], 0
.text:00004C8A                 mov     ecx, [ebp+var_10]
.text:00004C8D                 add     ecx, 0B8h ; '+'
.text:00004C93                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00004C98                 mov     byte ptr [ebp+var_4], 4
.text:00004C9C                 mov     edx, [ebp+var_10]
.text:00004C9F                 mov     byte ptr [edx+0C4h], 0
.text:00004CA6                 mov     eax, [ebp+var_10]
.text:00004CA9                 mov     byte ptr [eax+0C5h], 0
.text:00004CB0                 mov     ecx, [ebp+var_10]
.text:00004CB3                 mov     byte ptr [ecx+0C6h], 0
.text:00004CBA                 mov     ecx, [ebp+var_10]
.text:00004CBD                 add     ecx, 0C8h ; '+'
.text:00004CC3                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00004CC8                 mov     byte ptr [ebp+var_4], 5
.text:00004CCC                 mov     ecx, [ebp+var_10]
.text:00004CCF                 add     ecx, 0D4h ; '+'
.text:00004CD5                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00004CDA                 mov     byte ptr [ebp+var_4], 6
.text:00004CDE                 mov     edx, [ebp+var_10]
.text:00004CE1                 mov     dword ptr [edx+0E0h], 0
.text:00004CEB                 mov     ecx, [ebp+var_10]
.text:00004CEE                 add     ecx, 0E4h ; 'S'
.text:00004CF4                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00004CF9                 mov     byte ptr [ebp+var_4], 7
.text:00004CFD                 mov     ecx, [ebp+var_10]
.text:00004D00                 add     ecx, 0F0h ; '=' ; this
.text:00004D06                 call    ??0CBoolPair@@QAE@XZ ; CBoolPair::CBoolPair(void)
.text:00004D0B                 mov     ecx, [ebp+var_10]
.text:00004D0E                 add     ecx, 0F2h ; '=' ; this
.text:00004D14                 call    ??0CBoolPair@@QAE@XZ ; CBoolPair::CBoolPair(void)
.text:00004D19                 mov     ecx, [ebp+var_10]
.text:00004D1C                 add     ecx, 0F4h ; '(' ; this
.text:00004D22                 call    ??0CBoolPair@@QAE@XZ ; CBoolPair::CBoolPair(void)
.text:00004D27                 mov     ecx, [ebp+var_10]
.text:00004D2A                 add     ecx, 0F6h ; '÷' ; this
.text:00004D30                 call    ??0CBoolPair@@QAE@XZ ; CBoolPair::CBoolPair(void)
.text:00004D35                 mov     eax, [ebp+var_10]
.text:00004D38                 mov     byte ptr [eax+0F8h], 0
.text:00004D3F                 mov     ecx, [ebp+var_10]
.text:00004D42                 mov     byte ptr [ecx+0F9h], 0
.text:00004D49                 mov     ecx, [ebp+var_10]
.text:00004D4C                 add     ecx, 0FCh ; 'n'
.text:00004D52                 call    ??0?$CObjectVector@UCRenamePair@@@@QAE@XZ ; CObjectVector<CRenamePair>::CObjectVector<CRenamePair>(void)
.text:00004D57                 mov     byte ptr [ebp+var_4], 8
.text:00004D5B                 mov     ecx, [ebp+var_10]
.text:00004D5E                 add     ecx, 108h
.text:00004D64                 call    ??0?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>(void)
.text:00004D69                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004D70                 mov     eax, [ebp+var_10]
.text:00004D73                 mov     ecx, [ebp+var_C]
.text:00004D76                 mov     large fs:0, ecx
.text:00004D7D                 pop     ecx
.text:00004D7E                 add     esp, 10h
.text:00004D81                 cmp     ebp, esp
.text:00004D83                 call    __RTC_CheckEsp
.text:00004D88                 mov     esp, ebp
.text:00004D8A                 pop     ebp
.text:00004D8B                 retn
.text:00004D8B ??0CUpdateOptions@@QAE@XZ endp
.text:00004D8B
.text:00004D8B _text           ends
.text:00004D8B
.text$x:00004D8C ; ===========================================================================
.text$x:00004D8C
.text$x:00004D8C ; Segment type: Pure code
.text$x:00004D8C ; Segment permissions: Read/Execute
.text$x:00004D8C _text$x         segment para public 'CODE' use32
.text$x:00004D8C                 assume cs:_text$x
.text$x:00004D8C                 ;org 4D8Ch
.text$x:00004D8C ; COMDAT (pick associative to section at 4BEC)
.text$x:00004D8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004D8C
.text$x:00004D8C ; =============== S U B R O U T I N E =======================================
.text$x:00004D8C
.text$x:00004D8C
.text$x:00004D8C __unwindfunclet$??0CUpdateOptions@@QAE@XZ$0 proc near
.text$x:00004D8C                                         ; DATA XREF: .xdata$x:00004E44o
.text$x:00004D8C                 mov     ecx, [ebp-10h]  ; this
.text$x:00004D8F                 jmp     ??1CCompressionMethodMode@@QAE@XZ ; CCompressionMethodMode::~CCompressionMethodMode(void)
.text$x:00004D8F __unwindfunclet$??0CUpdateOptions@@QAE@XZ$0 endp
.text$x:00004D8F
.text$x:00004D94
.text$x:00004D94 ; =============== S U B R O U T I N E =======================================
.text$x:00004D94
.text$x:00004D94
.text$x:00004D94 __unwindfunclet$??0CUpdateOptions@@QAE@XZ$1 proc near
.text$x:00004D94                                         ; DATA XREF: .xdata$x:00004E4Co
.text$x:00004D94                 mov     ecx, [ebp-10h]
.text$x:00004D97                 add     ecx, 38h ; '8'
.text$x:00004D9A                 jmp     ??1?$CObjectVector@UCUpdateArchiveCommand@@@@QAE@XZ ; CObjectVector<CUpdateArchiveCommand>::~CObjectVector<CUpdateArchiveCommand>(void)
.text$x:00004D9A __unwindfunclet$??0CUpdateOptions@@QAE@XZ$1 endp
.text$x:00004D9A
.text$x:00004D9F
.text$x:00004D9F ; =============== S U B R O U T I N E =======================================
.text$x:00004D9F
.text$x:00004D9F
.text$x:00004D9F __unwindfunclet$??0CUpdateOptions@@QAE@XZ$2 proc near
.text$x:00004D9F                                         ; DATA XREF: .xdata$x:00004E54o
.text$x:00004D9F                 mov     ecx, [ebp-10h]
.text$x:00004DA2                 add     ecx, 48h ; 'H'  ; this
.text$x:00004DA5                 jmp     ??1CArchivePath@@QAE@XZ ; CArchivePath::~CArchivePath(void)
.text$x:00004DA5 __unwindfunclet$??0CUpdateOptions@@QAE@XZ$2 endp
.text$x:00004DA5
.text$x:00004DAA
.text$x:00004DAA ; =============== S U B R O U T I N E =======================================
.text$x:00004DAA
.text$x:00004DAA
.text$x:00004DAA __unwindfunclet$??0CUpdateOptions@@QAE@XZ$3 proc near
.text$x:00004DAA                                         ; DATA XREF: .xdata$x:00004E5Co
.text$x:00004DAA                 mov     ecx, [ebp-10h]
.text$x:00004DAD                 add     ecx, 0A8h ; '¿' ; this
.text$x:00004DB3                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00004DB3 __unwindfunclet$??0CUpdateOptions@@QAE@XZ$3 endp
.text$x:00004DB3
.text$x:00004DB8
.text$x:00004DB8 ; =============== S U B R O U T I N E =======================================
.text$x:00004DB8
.text$x:00004DB8
.text$x:00004DB8 __unwindfunclet$??0CUpdateOptions@@QAE@XZ$4 proc near
.text$x:00004DB8                                         ; DATA XREF: .xdata$x:00004E64o
.text$x:00004DB8                 mov     ecx, [ebp-10h]
.text$x:00004DBB                 add     ecx, 0B8h ; '+' ; this
.text$x:00004DC1                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00004DC1 __unwindfunclet$??0CUpdateOptions@@QAE@XZ$4 endp
.text$x:00004DC1
.text$x:00004DC6
.text$x:00004DC6 ; =============== S U B R O U T I N E =======================================
.text$x:00004DC6
.text$x:00004DC6
.text$x:00004DC6 __unwindfunclet$??0CUpdateOptions@@QAE@XZ$5 proc near
.text$x:00004DC6                                         ; DATA XREF: .xdata$x:00004E6Co
.text$x:00004DC6                 mov     ecx, [ebp-10h]
.text$x:00004DC9                 add     ecx, 0C8h ; '+' ; this
.text$x:00004DCF                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00004DCF __unwindfunclet$??0CUpdateOptions@@QAE@XZ$5 endp
.text$x:00004DCF
.text$x:00004DD4
.text$x:00004DD4 ; =============== S U B R O U T I N E =======================================
.text$x:00004DD4
.text$x:00004DD4
.text$x:00004DD4 __unwindfunclet$??0CUpdateOptions@@QAE@XZ$6 proc near
.text$x:00004DD4                                         ; DATA XREF: .xdata$x:00004E74o
.text$x:00004DD4                 mov     ecx, [ebp-10h]
.text$x:00004DD7                 add     ecx, 0D4h ; '+' ; this
.text$x:00004DDD                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00004DDD __unwindfunclet$??0CUpdateOptions@@QAE@XZ$6 endp
.text$x:00004DDD
.text$x:00004DE2
.text$x:00004DE2 ; =============== S U B R O U T I N E =======================================
.text$x:00004DE2
.text$x:00004DE2
.text$x:00004DE2 __unwindfunclet$??0CUpdateOptions@@QAE@XZ$7 proc near
.text$x:00004DE2                                         ; DATA XREF: .xdata$x:00004E7Co
.text$x:00004DE2                 mov     ecx, [ebp-10h]
.text$x:00004DE5                 add     ecx, 0E4h ; 'S' ; this
.text$x:00004DEB                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00004DEB __unwindfunclet$??0CUpdateOptions@@QAE@XZ$7 endp
.text$x:00004DEB
.text$x:00004DF0
.text$x:00004DF0 ; =============== S U B R O U T I N E =======================================
.text$x:00004DF0
.text$x:00004DF0
.text$x:00004DF0 __unwindfunclet$??0CUpdateOptions@@QAE@XZ$8 proc near
.text$x:00004DF0                                         ; DATA XREF: .xdata$x:00004E84o
.text$x:00004DF0                 mov     ecx, [ebp-10h]
.text$x:00004DF3                 add     ecx, 0FCh ; 'n'
.text$x:00004DF9                 jmp     ??1?$CObjectVector@UCRenamePair@@@@QAE@XZ ; CObjectVector<CRenamePair>::~CObjectVector<CRenamePair>(void)
.text$x:00004DF9 __unwindfunclet$??0CUpdateOptions@@QAE@XZ$8 endp
.text$x:00004DF9
.text$x:00004DFE
.text$x:00004DFE ; =============== S U B R O U T I N E =======================================
.text$x:00004DFE
.text$x:00004DFE
.text$x:00004DFE __ehhandler$??0CUpdateOptions@@QAE@XZ proc near
.text$x:00004DFE                                         ; DATA XREF: CUpdateOptions::CUpdateOptions(void)+5o
.text$x:00004DFE
.text$x:00004DFE arg_4           = dword ptr  8
.text$x:00004DFE
.text$x:00004DFE                 mov     edx, [esp+arg_4]
.text$x:00004E02                 lea     eax, [edx+0Ch]
.text$x:00004E05                 mov     ecx, [edx-8]
.text$x:00004E08                 xor     ecx, eax
.text$x:00004E0A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004E0F                 mov     eax, offset __ehfuncinfo$??0CUpdateOptions@@QAE@XZ
.text$x:00004E14                 jmp     ___CxxFrameHandler3
.text$x:00004E14 __ehhandler$??0CUpdateOptions@@QAE@XZ endp
.text$x:00004E14
.text$x:00004E14 ; ---------------------------------------------------------------------------
.text$x:00004E19                 align 4
.text$x:00004E19 _text$x         ends
.text$x:00004E19
.xdata$x:00004E1C ; ===========================================================================
.xdata$x:00004E1C
.xdata$x:00004E1C ; Segment type: Pure data
.xdata$x:00004E1C ; Segment permissions: Read
.xdata$x:00004E1C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004E1C                 assume cs:_xdata$x
.xdata$x:00004E1C                 ;org 4E1Ch
.xdata$x:00004E1C ; COMDAT (pick associative to section at 4BEC)
.xdata$x:00004E1C __ehfuncinfo$??0CUpdateOptions@@QAE@XZ db  22h ; "
.xdata$x:00004E1C                                         ; DATA XREF: __ehhandler$??0CUpdateOptions@@QAE@XZ+11o
.xdata$x:00004E1D                 db    5
.xdata$x:00004E1E                 db  93h ; ô
.xdata$x:00004E1F                 db  19h
.xdata$x:00004E20                 db    9
.xdata$x:00004E21                 db    0
.xdata$x:00004E22                 db    0
.xdata$x:00004E23                 db    0
.xdata$x:00004E24                 dd offset __unwindtable$??0CUpdateOptions@@QAE@XZ
.xdata$x:00004E28                 db    0
.xdata$x:00004E29                 db    0
.xdata$x:00004E2A                 db    0
.xdata$x:00004E2B                 db    0
.xdata$x:00004E2C                 db    0
.xdata$x:00004E2D                 db    0
.xdata$x:00004E2E                 db    0
.xdata$x:00004E2F                 db    0
.xdata$x:00004E30                 db    0
.xdata$x:00004E31                 db    0
.xdata$x:00004E32                 db    0
.xdata$x:00004E33                 db    0
.xdata$x:00004E34                 db    0
.xdata$x:00004E35                 db    0
.xdata$x:00004E36                 db    0
.xdata$x:00004E37                 db    0
.xdata$x:00004E38                 db    0
.xdata$x:00004E39                 db    0
.xdata$x:00004E3A                 db    0
.xdata$x:00004E3B                 db    0
.xdata$x:00004E3C                 db    1
.xdata$x:00004E3D                 db    0
.xdata$x:00004E3E                 db    0
.xdata$x:00004E3F                 db    0
.xdata$x:00004E40 __unwindtable$??0CUpdateOptions@@QAE@XZ db 0FFh
.xdata$x:00004E40                                         ; DATA XREF: .xdata$x:00004E24o
.xdata$x:00004E41                 db 0FFh
.xdata$x:00004E42                 db 0FFh
.xdata$x:00004E43                 db 0FFh
.xdata$x:00004E44                 dd offset __unwindfunclet$??0CUpdateOptions@@QAE@XZ$0
.xdata$x:00004E48                 db    0
.xdata$x:00004E49                 db    0
.xdata$x:00004E4A                 db    0
.xdata$x:00004E4B                 db    0
.xdata$x:00004E4C                 dd offset __unwindfunclet$??0CUpdateOptions@@QAE@XZ$1
.xdata$x:00004E50                 db    1
.xdata$x:00004E51                 db    0
.xdata$x:00004E52                 db    0
.xdata$x:00004E53                 db    0
.xdata$x:00004E54                 dd offset __unwindfunclet$??0CUpdateOptions@@QAE@XZ$2
.xdata$x:00004E58                 db    2
.xdata$x:00004E59                 db    0
.xdata$x:00004E5A                 db    0
.xdata$x:00004E5B                 db    0
.xdata$x:00004E5C                 dd offset __unwindfunclet$??0CUpdateOptions@@QAE@XZ$3
.xdata$x:00004E60                 db    3
.xdata$x:00004E61                 db    0
.xdata$x:00004E62                 db    0
.xdata$x:00004E63                 db    0
.xdata$x:00004E64                 dd offset __unwindfunclet$??0CUpdateOptions@@QAE@XZ$4
.xdata$x:00004E68                 db    4
.xdata$x:00004E69                 db    0
.xdata$x:00004E6A                 db    0
.xdata$x:00004E6B                 db    0
.xdata$x:00004E6C                 dd offset __unwindfunclet$??0CUpdateOptions@@QAE@XZ$5
.xdata$x:00004E70                 db    5
.xdata$x:00004E71                 db    0
.xdata$x:00004E72                 db    0
.xdata$x:00004E73                 db    0
.xdata$x:00004E74                 dd offset __unwindfunclet$??0CUpdateOptions@@QAE@XZ$6
.xdata$x:00004E78                 db    6
.xdata$x:00004E79                 db    0
.xdata$x:00004E7A                 db    0
.xdata$x:00004E7B                 db    0
.xdata$x:00004E7C                 dd offset __unwindfunclet$??0CUpdateOptions@@QAE@XZ$7
.xdata$x:00004E80                 db    7
.xdata$x:00004E81                 db    0
.xdata$x:00004E82                 db    0
.xdata$x:00004E83                 db    0
.xdata$x:00004E84                 dd offset __unwindfunclet$??0CUpdateOptions@@QAE@XZ$8
.xdata$x:00004E84 _xdata$x        ends
.xdata$x:00004E84
.text:00004E88 ; ===========================================================================
.text:00004E88
.text:00004E88 ; Segment type: Pure code
.text:00004E88 ; Segment permissions: Read/Execute
.text:00004E88 _text           segment para public 'CODE' use32
.text:00004E88                 assume cs:_text
.text:00004E88                 ;org 4E88h
.text:00004E88 ; COMDAT (pick any)
.text:00004E88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004E88
.text:00004E88 ; =============== S U B R O U T I N E =======================================
.text:00004E88
.text:00004E88 ; Attributes: bp-based frame
.text:00004E88
.text:00004E88 ; _DWORD __thiscall CArchivePath::CArchivePath(CArchivePath *__hidden this)
.text:00004E88                 public ??0CArchivePath@@QAE@XZ
.text:00004E88 ??0CArchivePath@@QAE@XZ proc near       ; CODE XREF: CUpdateOptions::CUpdateOptions(void)+58p
.text:00004E88
.text:00004E88 var_10          = dword ptr -10h
.text:00004E88 var_C           = dword ptr -0Ch
.text:00004E88 var_4           = dword ptr -4
.text:00004E88
.text:00004E88                 push    ebp
.text:00004E89                 mov     ebp, esp
.text:00004E8B                 push    0FFFFFFFFh
.text:00004E8D                 push    offset __ehhandler$??0CArchivePath@@QAE@XZ
.text:00004E92                 mov     eax, large fs:0
.text:00004E98                 push    eax
.text:00004E99                 push    ecx
.text:00004E9A                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00004EA1                 mov     eax, dword ptr ds:___security_cookie
.text:00004EA6                 xor     eax, ebp
.text:00004EA8                 push    eax
.text:00004EA9                 lea     eax, [ebp+var_C]
.text:00004EAC                 mov     large fs:0, eax
.text:00004EB2                 mov     [ebp+var_10], ecx
.text:00004EB5                 mov     ecx, [ebp+var_10]
.text:00004EB8                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00004EBD                 mov     [ebp+var_4], 0
.text:00004EC4                 mov     ecx, [ebp+var_10]
.text:00004EC7                 add     ecx, 0Ch
.text:00004ECA                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00004ECF                 mov     byte ptr [ebp+var_4], 1
.text:00004ED3                 mov     ecx, [ebp+var_10]
.text:00004ED6                 add     ecx, 18h
.text:00004ED9                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00004EDE                 mov     byte ptr [ebp+var_4], 2
.text:00004EE2                 mov     ecx, [ebp+var_10]
.text:00004EE5                 add     ecx, 24h ; '$'
.text:00004EE8                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00004EED                 mov     byte ptr [ebp+var_4], 3
.text:00004EF1                 mov     ecx, [ebp+var_10]
.text:00004EF4                 add     ecx, 30h ; '0'
.text:00004EF7                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00004EFC                 mov     byte ptr [ebp+var_4], 4
.text:00004F00                 mov     eax, [ebp+var_10]
.text:00004F03                 mov     byte ptr [eax+3Ch], 0
.text:00004F07                 mov     ecx, [ebp+var_10]
.text:00004F0A                 add     ecx, 40h ; '@'
.text:00004F0D                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00004F12                 mov     byte ptr [ebp+var_4], 5
.text:00004F16                 mov     ecx, [ebp+var_10]
.text:00004F19                 add     ecx, 4Ch ; 'L'
.text:00004F1C                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00004F21                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004F28                 mov     eax, [ebp+var_10]
.text:00004F2B                 mov     ecx, [ebp+var_C]
.text:00004F2E                 mov     large fs:0, ecx
.text:00004F35                 pop     ecx
.text:00004F36                 add     esp, 10h
.text:00004F39                 cmp     ebp, esp
.text:00004F3B                 call    __RTC_CheckEsp
.text:00004F40                 mov     esp, ebp
.text:00004F42                 pop     ebp
.text:00004F43                 retn
.text:00004F43 ??0CArchivePath@@QAE@XZ endp
.text:00004F43
.text:00004F43 _text           ends
.text:00004F43
.text$x:00004F44 ; ===========================================================================
.text$x:00004F44
.text$x:00004F44 ; Segment type: Pure code
.text$x:00004F44 ; Segment permissions: Read/Execute
.text$x:00004F44 _text$x         segment para public 'CODE' use32
.text$x:00004F44                 assume cs:_text$x
.text$x:00004F44                 ;org 4F44h
.text$x:00004F44 ; COMDAT (pick associative to section at 4E88)
.text$x:00004F44                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004F44
.text$x:00004F44 ; =============== S U B R O U T I N E =======================================
.text$x:00004F44
.text$x:00004F44
.text$x:00004F44 __unwindfunclet$??0CArchivePath@@QAE@XZ$0 proc near
.text$x:00004F44                                         ; DATA XREF: .xdata$x:00004FC8o
.text$x:00004F44                 mov     ecx, [ebp-10h]  ; this
.text$x:00004F47                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00004F47 __unwindfunclet$??0CArchivePath@@QAE@XZ$0 endp
.text$x:00004F47
.text$x:00004F4C
.text$x:00004F4C ; =============== S U B R O U T I N E =======================================
.text$x:00004F4C
.text$x:00004F4C
.text$x:00004F4C __unwindfunclet$??0CArchivePath@@QAE@XZ$1 proc near
.text$x:00004F4C                                         ; DATA XREF: .xdata$x:00004FD0o
.text$x:00004F4C                 mov     ecx, [ebp-10h]
.text$x:00004F4F                 add     ecx, 0Ch        ; this
.text$x:00004F52                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00004F52 __unwindfunclet$??0CArchivePath@@QAE@XZ$1 endp
.text$x:00004F52
.text$x:00004F57
.text$x:00004F57 ; =============== S U B R O U T I N E =======================================
.text$x:00004F57
.text$x:00004F57
.text$x:00004F57 __unwindfunclet$??0CArchivePath@@QAE@XZ$2 proc near
.text$x:00004F57                                         ; DATA XREF: .xdata$x:00004FD8o
.text$x:00004F57                 mov     ecx, [ebp-10h]
.text$x:00004F5A                 add     ecx, 18h        ; this
.text$x:00004F5D                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00004F5D __unwindfunclet$??0CArchivePath@@QAE@XZ$2 endp
.text$x:00004F5D
.text$x:00004F62
.text$x:00004F62 ; =============== S U B R O U T I N E =======================================
.text$x:00004F62
.text$x:00004F62
.text$x:00004F62 __unwindfunclet$??0CArchivePath@@QAE@XZ$3 proc near
.text$x:00004F62                                         ; DATA XREF: .xdata$x:00004FE0o
.text$x:00004F62                 mov     ecx, [ebp-10h]
.text$x:00004F65                 add     ecx, 24h ; '$'  ; this
.text$x:00004F68                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00004F68 __unwindfunclet$??0CArchivePath@@QAE@XZ$3 endp
.text$x:00004F68
.text$x:00004F6D
.text$x:00004F6D ; =============== S U B R O U T I N E =======================================
.text$x:00004F6D
.text$x:00004F6D
.text$x:00004F6D __unwindfunclet$??0CArchivePath@@QAE@XZ$4 proc near
.text$x:00004F6D                                         ; DATA XREF: .xdata$x:00004FE8o
.text$x:00004F6D                 mov     ecx, [ebp-10h]
.text$x:00004F70                 add     ecx, 30h ; '0'  ; this
.text$x:00004F73                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00004F73 __unwindfunclet$??0CArchivePath@@QAE@XZ$4 endp
.text$x:00004F73
.text$x:00004F78
.text$x:00004F78 ; =============== S U B R O U T I N E =======================================
.text$x:00004F78
.text$x:00004F78
.text$x:00004F78 __unwindfunclet$??0CArchivePath@@QAE@XZ$5 proc near
.text$x:00004F78                                         ; DATA XREF: .xdata$x:00004FF0o
.text$x:00004F78                 mov     ecx, [ebp-10h]
.text$x:00004F7B                 add     ecx, 40h ; '@'  ; this
.text$x:00004F7E                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00004F7E __unwindfunclet$??0CArchivePath@@QAE@XZ$5 endp
.text$x:00004F7E
.text$x:00004F83
.text$x:00004F83 ; =============== S U B R O U T I N E =======================================
.text$x:00004F83
.text$x:00004F83
.text$x:00004F83 __ehhandler$??0CArchivePath@@QAE@XZ proc near
.text$x:00004F83                                         ; DATA XREF: CArchivePath::CArchivePath(void)+5o
.text$x:00004F83
.text$x:00004F83 arg_4           = dword ptr  8
.text$x:00004F83
.text$x:00004F83                 mov     edx, [esp+arg_4]
.text$x:00004F87                 lea     eax, [edx+0Ch]
.text$x:00004F8A                 mov     ecx, [edx-8]
.text$x:00004F8D                 xor     ecx, eax
.text$x:00004F8F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004F94                 mov     eax, offset __ehfuncinfo$??0CArchivePath@@QAE@XZ
.text$x:00004F99                 jmp     ___CxxFrameHandler3
.text$x:00004F99 __ehhandler$??0CArchivePath@@QAE@XZ endp
.text$x:00004F99
.text$x:00004F99 ; ---------------------------------------------------------------------------
.text$x:00004F9E                 align 10h
.text$x:00004F9E _text$x         ends
.text$x:00004F9E
.xdata$x:00004FA0 ; ===========================================================================
.xdata$x:00004FA0
.xdata$x:00004FA0 ; Segment type: Pure data
.xdata$x:00004FA0 ; Segment permissions: Read
.xdata$x:00004FA0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004FA0                 assume cs:_xdata$x
.xdata$x:00004FA0                 ;org 4FA0h
.xdata$x:00004FA0 ; COMDAT (pick associative to section at 4E88)
.xdata$x:00004FA0 __ehfuncinfo$??0CArchivePath@@QAE@XZ db  22h ; "
.xdata$x:00004FA0                                         ; DATA XREF: __ehhandler$??0CArchivePath@@QAE@XZ+11o
.xdata$x:00004FA1                 db    5
.xdata$x:00004FA2                 db  93h ; ô
.xdata$x:00004FA3                 db  19h
.xdata$x:00004FA4                 db    6
.xdata$x:00004FA5                 db    0
.xdata$x:00004FA6                 db    0
.xdata$x:00004FA7                 db    0
.xdata$x:00004FA8                 dd offset __unwindtable$??0CArchivePath@@QAE@XZ
.xdata$x:00004FAC                 align 20h
.xdata$x:00004FC0                 db    1
.xdata$x:00004FC1                 db    0
.xdata$x:00004FC2                 db    0
.xdata$x:00004FC3                 db    0
.xdata$x:00004FC4 __unwindtable$??0CArchivePath@@QAE@XZ db 0FFh
.xdata$x:00004FC4                                         ; DATA XREF: .xdata$x:00004FA8o
.xdata$x:00004FC5                 db 0FFh
.xdata$x:00004FC6                 db 0FFh
.xdata$x:00004FC7                 db 0FFh
.xdata$x:00004FC8                 dd offset __unwindfunclet$??0CArchivePath@@QAE@XZ$0
.xdata$x:00004FCC                 align 10h
.xdata$x:00004FD0                 dd offset __unwindfunclet$??0CArchivePath@@QAE@XZ$1
.xdata$x:00004FD4                 db    1
.xdata$x:00004FD5                 db    0
.xdata$x:00004FD6                 db    0
.xdata$x:00004FD7                 db    0
.xdata$x:00004FD8                 dd offset __unwindfunclet$??0CArchivePath@@QAE@XZ$2
.xdata$x:00004FDC                 db    2
.xdata$x:00004FDD                 db    0
.xdata$x:00004FDE                 db    0
.xdata$x:00004FDF                 db    0
.xdata$x:00004FE0                 dd offset __unwindfunclet$??0CArchivePath@@QAE@XZ$3
.xdata$x:00004FE4                 db    3
.xdata$x:00004FE5                 db    0
.xdata$x:00004FE6                 db    0
.xdata$x:00004FE7                 db    0
.xdata$x:00004FE8                 dd offset __unwindfunclet$??0CArchivePath@@QAE@XZ$4
.xdata$x:00004FEC                 db    4
.xdata$x:00004FED                 db    0
.xdata$x:00004FEE                 db    0
.xdata$x:00004FEF                 db    0
.xdata$x:00004FF0                 dd offset __unwindfunclet$??0CArchivePath@@QAE@XZ$5
.xdata$x:00004FF0 _xdata$x        ends
.xdata$x:00004FF0
.text:00004FF4 ; ===========================================================================
.text:00004FF4
.text:00004FF4 ; Segment type: Pure code
.text:00004FF4 ; Segment permissions: Read/Execute
.text:00004FF4 _text           segment para public 'CODE' use32
.text:00004FF4                 assume cs:_text
.text:00004FF4                 ;org 4FF4h
.text:00004FF4 ; COMDAT (pick any)
.text:00004FF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004FF4
.text:00004FF4 ; =============== S U B R O U T I N E =======================================
.text:00004FF4
.text:00004FF4 ; Attributes: bp-based frame
.text:00004FF4
.text:00004FF4 ; _DWORD __thiscall CCompressionMethodMode::CCompressionMethodMode(CCompressionMethodMode *__hidden this)
.text:00004FF4                 public ??0CCompressionMethodMode@@QAE@XZ
.text:00004FF4 ??0CCompressionMethodMode@@QAE@XZ proc near
.text:00004FF4                                         ; CODE XREF: CUpdateOptions::CUpdateOptions(void)+30p
.text:00004FF4
.text:00004FF4 var_4           = dword ptr -4
.text:00004FF4
.text:00004FF4                 push    ebp
.text:00004FF5                 mov     ebp, esp
.text:00004FF7                 push    ecx
.text:00004FF8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004FFF                 mov     [ebp+var_4], ecx
.text:00005002                 mov     eax, [ebp+var_4]
.text:00005005                 mov     byte ptr [eax], 0
.text:00005008                 mov     ecx, [ebp+var_4]
.text:0000500B                 add     ecx, 8          ; this
.text:0000500E                 call    ??0COpenType@@QAE@XZ ; COpenType::COpenType(void)
.text:00005013                 mov     ecx, [ebp+var_4]
.text:00005016                 add     ecx, 28h ; '('
.text:00005019                 call    ??0?$CObjectVector@UCProperty@@@@QAE@XZ ; CObjectVector<CProperty>::CObjectVector<CProperty>(void)
.text:0000501E                 mov     eax, [ebp+var_4]
.text:00005021                 add     esp, 4
.text:00005024                 cmp     ebp, esp
.text:00005026                 call    __RTC_CheckEsp
.text:0000502B                 mov     esp, ebp
.text:0000502D                 pop     ebp
.text:0000502E                 retn
.text:0000502E ??0CCompressionMethodMode@@QAE@XZ endp
.text:0000502E
.text:0000502E ; ---------------------------------------------------------------------------
.text:0000502F                 align 10h
.text:0000502F _text           ends
.text:0000502F
.text:00005030 ; ===========================================================================
.text:00005030
.text:00005030 ; Segment type: Pure code
.text:00005030 ; Segment permissions: Read/Execute
.text:00005030 _text           segment para public 'CODE' use32
.text:00005030                 assume cs:_text
.text:00005030                 ;org 5030h
.text:00005030 ; COMDAT (pick any)
.text:00005030                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005030
.text:00005030 ; =============== S U B R O U T I N E =======================================
.text:00005030
.text:00005030 ; Attributes: bp-based frame
.text:00005030
.text:00005030 ; _DWORD __thiscall COpenType::COpenType(COpenType *__hidden this)
.text:00005030                 public ??0COpenType@@QAE@XZ
.text:00005030 ??0COpenType@@QAE@XZ proc near          ; CODE XREF: CCompressionMethodMode::CCompressionMethodMode(void)+1Ap
.text:00005030
.text:00005030 var_4           = dword ptr -4
.text:00005030
.text:00005030                 push    ebp
.text:00005031                 mov     ebp, esp
.text:00005033                 push    ecx
.text:00005034                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000503B                 mov     [ebp+var_4], ecx
.text:0000503E                 mov     eax, [ebp+var_4]
.text:00005041                 mov     dword ptr [eax], 0FFFFFFFFh
.text:00005047                 mov     ecx, [ebp+var_4]
.text:0000504A                 add     ecx, 4          ; this
.text:0000504D                 call    ??0COpenSpecFlags@@QAE@XZ ; COpenSpecFlags::COpenSpecFlags(void)
.text:00005052                 mov     ecx, [ebp+var_4]
.text:00005055                 add     ecx, 7          ; this
.text:00005058                 call    ??0COpenSpecFlags@@QAE@XZ ; COpenSpecFlags::COpenSpecFlags(void)
.text:0000505D                 mov     ecx, [ebp+var_4]
.text:00005060                 add     ecx, 0Ah        ; this
.text:00005063                 call    ??0COpenSpecFlags@@QAE@XZ ; COpenSpecFlags::COpenSpecFlags(void)
.text:00005068                 mov     ecx, [ebp+var_4]
.text:0000506B                 add     ecx, 0Dh        ; this
.text:0000506E                 call    ??0COpenSpecFlags@@QAE@XZ ; COpenSpecFlags::COpenSpecFlags(void)
.text:00005073                 mov     ecx, [ebp+var_4]
.text:00005076                 mov     byte ptr [ecx+10h], 1
.text:0000507A                 mov     edx, [ebp+var_4]
.text:0000507D                 mov     byte ptr [edx+11h], 1
.text:00005081                 mov     eax, [ebp+var_4]
.text:00005084                 mov     byte ptr [eax+12h], 0
.text:00005088                 mov     ecx, [ebp+var_4]
.text:0000508B                 mov     byte ptr [ecx+13h], 0
.text:0000508F                 mov     edx, [ebp+var_4]
.text:00005092                 mov     byte ptr [edx+14h], 0
.text:00005096                 mov     eax, [ebp+var_4]
.text:00005099                 mov     byte ptr [eax+15h], 0
.text:0000509D                 mov     ecx, [ebp+var_4]
.text:000050A0                 mov     dword ptr [ecx+18h], 0
.text:000050A7                 mov     dword ptr [ecx+1Ch], 0
.text:000050AE                 mov     edx, [ebp+var_4]
.text:000050B1                 mov     byte ptr [edx+4], 1
.text:000050B5                 mov     eax, [ebp+var_4]
.text:000050B8                 mov     byte ptr [eax+5], 1
.text:000050BC                 mov     ecx, [ebp+var_4]
.text:000050BF                 mov     byte ptr [ecx+6], 1
.text:000050C3                 mov     edx, [ebp+var_4]
.text:000050C6                 mov     byte ptr [edx+7], 1
.text:000050CA                 mov     eax, [ebp+var_4]
.text:000050CD                 mov     byte ptr [eax+0Eh], 1
.text:000050D1                 mov     ecx, [ebp+var_4]
.text:000050D4                 mov     byte ptr [ecx+0Fh], 1
.text:000050D8                 mov     edx, [ebp+var_4]
.text:000050DB                 mov     byte ptr [edx+0Dh], 1
.text:000050DF                 mov     eax, [ebp+var_4]
.text:000050E2                 add     esp, 4
.text:000050E5                 cmp     ebp, esp
.text:000050E7                 call    __RTC_CheckEsp
.text:000050EC                 mov     esp, ebp
.text:000050EE                 pop     ebp
.text:000050EF                 retn
.text:000050EF ??0COpenType@@QAE@XZ endp
.text:000050EF
.text:000050EF _text           ends
.text:000050EF
.text:000050F0 ; ===========================================================================
.text:000050F0
.text:000050F0 ; Segment type: Pure code
.text:000050F0 ; Segment permissions: Read/Execute
.text:000050F0 _text           segment para public 'CODE' use32
.text:000050F0                 assume cs:_text
.text:000050F0                 ;org 50F0h
.text:000050F0 ; COMDAT (pick any)
.text:000050F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000050F0
.text:000050F0 ; =============== S U B R O U T I N E =======================================
.text:000050F0
.text:000050F0 ; Attributes: bp-based frame
.text:000050F0
.text:000050F0 ; _DWORD __thiscall COpenSpecFlags::COpenSpecFlags(COpenSpecFlags *__hidden this)
.text:000050F0                 public ??0COpenSpecFlags@@QAE@XZ
.text:000050F0 ??0COpenSpecFlags@@QAE@XZ proc near     ; CODE XREF: COpenType::COpenType(void)+1Dp
.text:000050F0                                         ; COpenType::COpenType(void)+28p ...
.text:000050F0
.text:000050F0 var_4           = dword ptr -4
.text:000050F0
.text:000050F0                 push    ebp
.text:000050F1                 mov     ebp, esp
.text:000050F3                 push    ecx
.text:000050F4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000050FB                 mov     [ebp+var_4], ecx
.text:000050FE                 mov     eax, [ebp+var_4]
.text:00005101                 mov     byte ptr [eax], 0
.text:00005104                 mov     ecx, [ebp+var_4]
.text:00005107                 mov     byte ptr [ecx+1], 0
.text:0000510B                 mov     edx, [ebp+var_4]
.text:0000510E                 mov     byte ptr [edx+2], 0
.text:00005112                 mov     eax, [ebp+var_4]
.text:00005115                 mov     esp, ebp
.text:00005117                 pop     ebp
.text:00005118                 retn
.text:00005118 ??0COpenSpecFlags@@QAE@XZ endp
.text:00005118
.text:00005118 ; ---------------------------------------------------------------------------
.text:00005119                 align 4
.text:00005119 _text           ends
.text:00005119
.text:0000511C ; ===========================================================================
.text:0000511C
.text:0000511C ; Segment type: Pure code
.text:0000511C ; Segment permissions: Read/Execute
.text:0000511C _text           segment para public 'CODE' use32
.text:0000511C                 assume cs:_text
.text:0000511C                 ;org 511Ch
.text:0000511C ; COMDAT (pick any)
.text:0000511C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000511C
.text:0000511C ; =============== S U B R O U T I N E =======================================
.text:0000511C
.text:0000511C ; Attributes: bp-based frame
.text:0000511C
.text:0000511C ; _DWORD __thiscall CCompressionMethodMode::~CCompressionMethodMode(CCompressionMethodMode *__hidden this)
.text:0000511C                 public ??1CCompressionMethodMode@@QAE@XZ
.text:0000511C ??1CCompressionMethodMode@@QAE@XZ proc near
.text:0000511C                                         ; CODE XREF: __unwindfunclet$??0CUpdateOptions@@QAE@XZ$0+3j
.text:0000511C                                         ; CUpdateOptions::~CUpdateOptions(void)+D6p ...
.text:0000511C
.text:0000511C var_4           = dword ptr -4
.text:0000511C
.text:0000511C                 push    ebp
.text:0000511D                 mov     ebp, esp
.text:0000511F                 push    ecx
.text:00005120                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005127                 mov     [ebp+var_4], ecx
.text:0000512A                 mov     ecx, [ebp+var_4]
.text:0000512D                 add     ecx, 28h ; '('
.text:00005130                 call    ??1?$CObjectVector@UCProperty@@@@QAE@XZ ; CObjectVector<CProperty>::~CObjectVector<CProperty>(void)
.text:00005135                 add     esp, 4
.text:00005138                 cmp     ebp, esp
.text:0000513A                 call    __RTC_CheckEsp
.text:0000513F                 mov     esp, ebp
.text:00005141                 pop     ebp
.text:00005142                 retn
.text:00005142 ??1CCompressionMethodMode@@QAE@XZ endp
.text:00005142
.text:00005142 ; ---------------------------------------------------------------------------
.text:00005143                 align 4
.text:00005143 _text           ends
.text:00005143
.text:00005144 ; ===========================================================================
.text:00005144
.text:00005144 ; Segment type: Pure code
.text:00005144 ; Segment permissions: Read/Execute
.text:00005144 _text           segment para public 'CODE' use32
.text:00005144                 assume cs:_text
.text:00005144                 ;org 5144h
.text:00005144 ; COMDAT (pick any)
.text:00005144                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005144
.text:00005144 ; =============== S U B R O U T I N E =======================================
.text:00005144
.text:00005144 ; Attributes: bp-based frame
.text:00005144
.text:00005144 ; _DWORD __thiscall CArchivePath::~CArchivePath(CArchivePath *__hidden this)
.text:00005144                 public ??1CArchivePath@@QAE@XZ
.text:00005144 ??1CArchivePath@@QAE@XZ proc near       ; CODE XREF: __unwindfunclet$??0CUpdateOptions@@QAE@XZ$2+6j
.text:00005144                                         ; CUpdateOptions::~CUpdateOptions(void)+B8p ...
.text:00005144
.text:00005144 var_10          = dword ptr -10h
.text:00005144 var_C           = dword ptr -0Ch
.text:00005144 var_4           = dword ptr -4
.text:00005144
.text:00005144                 push    ebp
.text:00005145                 mov     ebp, esp
.text:00005147                 push    0FFFFFFFFh
.text:00005149                 push    offset __ehhandler$??1CArchivePath@@QAE@XZ
.text:0000514E                 mov     eax, large fs:0
.text:00005154                 push    eax
.text:00005155                 push    ecx
.text:00005156                 mov     [ebp+var_10], 0CCCCCCCCh
.text:0000515D                 mov     eax, dword ptr ds:___security_cookie
.text:00005162                 xor     eax, ebp
.text:00005164                 push    eax
.text:00005165                 lea     eax, [ebp+var_C]
.text:00005168                 mov     large fs:0, eax
.text:0000516E                 mov     [ebp+var_10], ecx
.text:00005171                 mov     [ebp+var_4], 5
.text:00005178                 mov     ecx, [ebp+var_10]
.text:0000517B                 add     ecx, 4Ch ; 'L'  ; this
.text:0000517E                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00005183                 mov     byte ptr [ebp+var_4], 4
.text:00005187                 mov     ecx, [ebp+var_10]
.text:0000518A                 add     ecx, 40h ; '@'  ; this
.text:0000518D                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00005192                 mov     byte ptr [ebp+var_4], 3
.text:00005196                 mov     ecx, [ebp+var_10]
.text:00005199                 add     ecx, 30h ; '0'  ; this
.text:0000519C                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000051A1                 mov     byte ptr [ebp+var_4], 2
.text:000051A5                 mov     ecx, [ebp+var_10]
.text:000051A8                 add     ecx, 24h ; '$'  ; this
.text:000051AB                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000051B0                 mov     byte ptr [ebp+var_4], 1
.text:000051B4                 mov     ecx, [ebp+var_10]
.text:000051B7                 add     ecx, 18h        ; this
.text:000051BA                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000051BF                 mov     byte ptr [ebp+var_4], 0
.text:000051C3                 mov     ecx, [ebp+var_10]
.text:000051C6                 add     ecx, 0Ch        ; this
.text:000051C9                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000051CE                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000051D5                 mov     ecx, [ebp+var_10] ; this
.text:000051D8                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000051DD                 mov     ecx, [ebp+var_C]
.text:000051E0                 mov     large fs:0, ecx
.text:000051E7                 pop     ecx
.text:000051E8                 add     esp, 10h
.text:000051EB                 cmp     ebp, esp
.text:000051ED                 call    __RTC_CheckEsp
.text:000051F2                 mov     esp, ebp
.text:000051F4                 pop     ebp
.text:000051F5                 retn
.text:000051F5 ??1CArchivePath@@QAE@XZ endp
.text:000051F5
.text:000051F5 ; ---------------------------------------------------------------------------
.text:000051F6                 align 4
.text:000051F6 _text           ends
.text:000051F6
.text$x:000051F8 ; ===========================================================================
.text$x:000051F8
.text$x:000051F8 ; Segment type: Pure code
.text$x:000051F8 ; Segment permissions: Read/Execute
.text$x:000051F8 _text$x         segment para public 'CODE' use32
.text$x:000051F8                 assume cs:_text$x
.text$x:000051F8                 ;org 51F8h
.text$x:000051F8 ; COMDAT (pick associative to section at 5144)
.text$x:000051F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000051F8
.text$x:000051F8 ; =============== S U B R O U T I N E =======================================
.text$x:000051F8
.text$x:000051F8
.text$x:000051F8 __unwindfunclet$??1CArchivePath@@QAE@XZ$0 proc near
.text$x:000051F8                                         ; DATA XREF: .xdata$x:0000527Co
.text$x:000051F8                 mov     ecx, [ebp-10h]  ; this
.text$x:000051FB                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:000051FB __unwindfunclet$??1CArchivePath@@QAE@XZ$0 endp
.text$x:000051FB
.text$x:00005200
.text$x:00005200 ; =============== S U B R O U T I N E =======================================
.text$x:00005200
.text$x:00005200
.text$x:00005200 __unwindfunclet$??1CArchivePath@@QAE@XZ$1 proc near
.text$x:00005200                                         ; DATA XREF: .xdata$x:00005284o
.text$x:00005200                 mov     ecx, [ebp-10h]
.text$x:00005203                 add     ecx, 0Ch        ; this
.text$x:00005206                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00005206 __unwindfunclet$??1CArchivePath@@QAE@XZ$1 endp
.text$x:00005206
.text$x:0000520B
.text$x:0000520B ; =============== S U B R O U T I N E =======================================
.text$x:0000520B
.text$x:0000520B
.text$x:0000520B __unwindfunclet$??1CArchivePath@@QAE@XZ$2 proc near
.text$x:0000520B                                         ; DATA XREF: .xdata$x:0000528Co
.text$x:0000520B                 mov     ecx, [ebp-10h]
.text$x:0000520E                 add     ecx, 18h        ; this
.text$x:00005211                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00005211 __unwindfunclet$??1CArchivePath@@QAE@XZ$2 endp
.text$x:00005211
.text$x:00005216
.text$x:00005216 ; =============== S U B R O U T I N E =======================================
.text$x:00005216
.text$x:00005216
.text$x:00005216 __unwindfunclet$??1CArchivePath@@QAE@XZ$3 proc near
.text$x:00005216                                         ; DATA XREF: .xdata$x:00005294o
.text$x:00005216                 mov     ecx, [ebp-10h]
.text$x:00005219                 add     ecx, 24h ; '$'  ; this
.text$x:0000521C                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000521C __unwindfunclet$??1CArchivePath@@QAE@XZ$3 endp
.text$x:0000521C
.text$x:00005221
.text$x:00005221 ; =============== S U B R O U T I N E =======================================
.text$x:00005221
.text$x:00005221
.text$x:00005221 __unwindfunclet$??1CArchivePath@@QAE@XZ$4 proc near
.text$x:00005221                                         ; DATA XREF: .xdata$x:0000529Co
.text$x:00005221                 mov     ecx, [ebp-10h]
.text$x:00005224                 add     ecx, 30h ; '0'  ; this
.text$x:00005227                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00005227 __unwindfunclet$??1CArchivePath@@QAE@XZ$4 endp
.text$x:00005227
.text$x:0000522C
.text$x:0000522C ; =============== S U B R O U T I N E =======================================
.text$x:0000522C
.text$x:0000522C
.text$x:0000522C __unwindfunclet$??1CArchivePath@@QAE@XZ$5 proc near
.text$x:0000522C                                         ; DATA XREF: .xdata$x:000052A4o
.text$x:0000522C                 mov     ecx, [ebp-10h]
.text$x:0000522F                 add     ecx, 40h ; '@'  ; this
.text$x:00005232                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00005232 __unwindfunclet$??1CArchivePath@@QAE@XZ$5 endp
.text$x:00005232
.text$x:00005237
.text$x:00005237 ; =============== S U B R O U T I N E =======================================
.text$x:00005237
.text$x:00005237
.text$x:00005237 __ehhandler$??1CArchivePath@@QAE@XZ proc near
.text$x:00005237                                         ; DATA XREF: CArchivePath::~CArchivePath(void)+5o
.text$x:00005237
.text$x:00005237 arg_4           = dword ptr  8
.text$x:00005237
.text$x:00005237                 mov     edx, [esp+arg_4]
.text$x:0000523B                 lea     eax, [edx+0Ch]
.text$x:0000523E                 mov     ecx, [edx-8]
.text$x:00005241                 xor     ecx, eax
.text$x:00005243                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005248                 mov     eax, offset __ehfuncinfo$??1CArchivePath@@QAE@XZ
.text$x:0000524D                 jmp     ___CxxFrameHandler3
.text$x:0000524D __ehhandler$??1CArchivePath@@QAE@XZ endp
.text$x:0000524D
.text$x:0000524D ; ---------------------------------------------------------------------------
.text$x:00005252                 align 4
.text$x:00005252 _text$x         ends
.text$x:00005252
.xdata$x:00005254 ; ===========================================================================
.xdata$x:00005254
.xdata$x:00005254 ; Segment type: Pure data
.xdata$x:00005254 ; Segment permissions: Read
.xdata$x:00005254 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00005254                 assume cs:_xdata$x
.xdata$x:00005254                 ;org 5254h
.xdata$x:00005254 ; COMDAT (pick associative to section at 5144)
.xdata$x:00005254 __ehfuncinfo$??1CArchivePath@@QAE@XZ db  22h ; "
.xdata$x:00005254                                         ; DATA XREF: __ehhandler$??1CArchivePath@@QAE@XZ+11o
.xdata$x:00005255                 db    5
.xdata$x:00005256                 db  93h ; ô
.xdata$x:00005257                 db  19h
.xdata$x:00005258                 db    6
.xdata$x:00005259                 db    0
.xdata$x:0000525A                 db    0
.xdata$x:0000525B                 db    0
.xdata$x:0000525C                 dd offset __unwindtable$??1CArchivePath@@QAE@XZ
.xdata$x:00005260                 db    0
.xdata$x:00005261                 db    0
.xdata$x:00005262                 db    0
.xdata$x:00005263                 db    0
.xdata$x:00005264                 db    0
.xdata$x:00005265                 db    0
.xdata$x:00005266                 db    0
.xdata$x:00005267                 db    0
.xdata$x:00005268                 db    0
.xdata$x:00005269                 db    0
.xdata$x:0000526A                 db    0
.xdata$x:0000526B                 db    0
.xdata$x:0000526C                 db    0
.xdata$x:0000526D                 db    0
.xdata$x:0000526E                 db    0
.xdata$x:0000526F                 db    0
.xdata$x:00005270                 db    0
.xdata$x:00005271                 db    0
.xdata$x:00005272                 db    0
.xdata$x:00005273                 db    0
.xdata$x:00005274                 db    1
.xdata$x:00005275                 db    0
.xdata$x:00005276                 db    0
.xdata$x:00005277                 db    0
.xdata$x:00005278 __unwindtable$??1CArchivePath@@QAE@XZ db 0FFh
.xdata$x:00005278                                         ; DATA XREF: .xdata$x:0000525Co
.xdata$x:00005279                 db 0FFh
.xdata$x:0000527A                 db 0FFh
.xdata$x:0000527B                 db 0FFh
.xdata$x:0000527C                 dd offset __unwindfunclet$??1CArchivePath@@QAE@XZ$0
.xdata$x:00005280                 db    0
.xdata$x:00005281                 db    0
.xdata$x:00005282                 db    0
.xdata$x:00005283                 db    0
.xdata$x:00005284                 dd offset __unwindfunclet$??1CArchivePath@@QAE@XZ$1
.xdata$x:00005288                 db    1
.xdata$x:00005289                 db    0
.xdata$x:0000528A                 db    0
.xdata$x:0000528B                 db    0
.xdata$x:0000528C                 dd offset __unwindfunclet$??1CArchivePath@@QAE@XZ$2
.xdata$x:00005290                 db    2
.xdata$x:00005291                 db    0
.xdata$x:00005292                 db    0
.xdata$x:00005293                 db    0
.xdata$x:00005294                 dd offset __unwindfunclet$??1CArchivePath@@QAE@XZ$3
.xdata$x:00005298                 db    3
.xdata$x:00005299                 db    0
.xdata$x:0000529A                 db    0
.xdata$x:0000529B                 db    0
.xdata$x:0000529C                 dd offset __unwindfunclet$??1CArchivePath@@QAE@XZ$4
.xdata$x:000052A0                 db    4
.xdata$x:000052A1                 db    0
.xdata$x:000052A2                 db    0
.xdata$x:000052A3                 db    0
.xdata$x:000052A4                 dd offset __unwindfunclet$??1CArchivePath@@QAE@XZ$5
.xdata$x:000052A4 _xdata$x        ends
.xdata$x:000052A4
.text:000052A8 ; ===========================================================================
.text:000052A8
.text:000052A8 ; Segment type: Pure code
.text:000052A8 ; Segment permissions: Read/Execute
.text:000052A8 _text           segment para public 'CODE' use32
.text:000052A8                 assume cs:_text
.text:000052A8                 ;org 52A8h
.text:000052A8 ; COMDAT (pick any)
.text:000052A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000052A8
.text:000052A8 ; =============== S U B R O U T I N E =======================================
.text:000052A8
.text:000052A8 ; Attributes: bp-based frame
.text:000052A8
.text:000052A8 ; _DWORD __thiscall NWildcard::CCensor::CCensor(NWildcard::CCensor *__hidden this)
.text:000052A8                 public ??0CCensor@NWildcard@@QAE@XZ
.text:000052A8 ??0CCensor@NWildcard@@QAE@XZ proc near  ; CODE XREF: CArcCmdLineOptions::CArcCmdLineOptions(void)+56p
.text:000052A8                                         ; CArcCmdLineOptions::CArcCmdLineOptions(void)+95p
.text:000052A8
.text:000052A8 var_10          = dword ptr -10h
.text:000052A8 var_C           = dword ptr -0Ch
.text:000052A8 var_4           = dword ptr -4
.text:000052A8
.text:000052A8                 push    ebp
.text:000052A9                 mov     ebp, esp
.text:000052AB                 push    0FFFFFFFFh
.text:000052AD                 push    offset __ehhandler$??0CCensor@NWildcard@@QAE@XZ
.text:000052B2                 mov     eax, large fs:0
.text:000052B8                 push    eax
.text:000052B9                 push    ecx
.text:000052BA                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000052C1                 mov     eax, dword ptr ds:___security_cookie
.text:000052C6                 xor     eax, ebp
.text:000052C8                 push    eax
.text:000052C9                 lea     eax, [ebp+var_C]
.text:000052CC                 mov     large fs:0, eax
.text:000052D2                 mov     [ebp+var_10], ecx
.text:000052D5                 mov     ecx, [ebp+var_10]
.text:000052D8                 call    ??0?$CObjectVector@UCPair@NWildcard@@@@QAE@XZ ; CObjectVector<NWildcard::CPair>::CObjectVector<NWildcard::CPair>(void)
.text:000052DD                 mov     [ebp+var_4], 0
.text:000052E4                 mov     ecx, [ebp+var_10]
.text:000052E7                 add     ecx, 0Ch
.text:000052EA                 call    ??0?$CObjectVector@UCCensorPath@NWildcard@@@@QAE@XZ ; CObjectVector<NWildcard::CCensorPath>::CObjectVector<NWildcard::CCensorPath>(void)
.text:000052EF                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000052F6                 mov     eax, [ebp+var_10]
.text:000052F9                 mov     ecx, [ebp+var_C]
.text:000052FC                 mov     large fs:0, ecx
.text:00005303                 pop     ecx
.text:00005304                 add     esp, 10h
.text:00005307                 cmp     ebp, esp
.text:00005309                 call    __RTC_CheckEsp
.text:0000530E                 mov     esp, ebp
.text:00005310                 pop     ebp
.text:00005311                 retn
.text:00005311 ??0CCensor@NWildcard@@QAE@XZ endp
.text:00005311
.text:00005311 ; ---------------------------------------------------------------------------
.text:00005312                 align 4
.text:00005312 _text           ends
.text:00005312
.text$x:00005314 ; ===========================================================================
.text$x:00005314
.text$x:00005314 ; Segment type: Pure code
.text$x:00005314 ; Segment permissions: Read/Execute
.text$x:00005314 _text$x         segment para public 'CODE' use32
.text$x:00005314                 assume cs:_text$x
.text$x:00005314                 ;org 5314h
.text$x:00005314 ; COMDAT (pick associative to section at 52A8)
.text$x:00005314                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005314
.text$x:00005314 ; =============== S U B R O U T I N E =======================================
.text$x:00005314
.text$x:00005314
.text$x:00005314 __unwindfunclet$??0CCensor@NWildcard@@QAE@XZ$0 proc near
.text$x:00005314                                         ; DATA XREF: .xdata$x:0000533Co
.text$x:00005314                 mov     ecx, [ebp-10h]
.text$x:00005317                 jmp     ??1?$CObjectVector@UCPair@NWildcard@@@@QAE@XZ ; CObjectVector<NWildcard::CPair>::~CObjectVector<NWildcard::CPair>(void)
.text$x:00005317 __unwindfunclet$??0CCensor@NWildcard@@QAE@XZ$0 endp
.text$x:00005317
.text$x:0000531C
.text$x:0000531C ; =============== S U B R O U T I N E =======================================
.text$x:0000531C
.text$x:0000531C
.text$x:0000531C __ehhandler$??0CCensor@NWildcard@@QAE@XZ proc near
.text$x:0000531C                                         ; DATA XREF: NWildcard::CCensor::CCensor(void)+5o
.text$x:0000531C
.text$x:0000531C arg_4           = dword ptr  8
.text$x:0000531C
.text$x:0000531C                 mov     edx, [esp+arg_4]
.text$x:00005320                 lea     eax, [edx+0Ch]
.text$x:00005323                 mov     ecx, [edx-8]
.text$x:00005326                 xor     ecx, eax
.text$x:00005328                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000532D                 mov     eax, offset __ehfuncinfo$??0CCensor@NWildcard@@QAE@XZ
.text$x:00005332                 jmp     ___CxxFrameHandler3
.text$x:00005332 __ehhandler$??0CCensor@NWildcard@@QAE@XZ endp
.text$x:00005332
.text$x:00005332 ; ---------------------------------------------------------------------------
.text$x:00005337                 align 4
.text$x:00005337 _text$x         ends
.text$x:00005337
.xdata$x:00005338 ; ===========================================================================
.xdata$x:00005338
.xdata$x:00005338 ; Segment type: Pure data
.xdata$x:00005338 ; Segment permissions: Read
.xdata$x:00005338 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00005338                 assume cs:_xdata$x
.xdata$x:00005338                 ;org 5338h
.xdata$x:00005338 ; COMDAT (pick associative to section at 52A8)
.xdata$x:00005338 __unwindtable$??0CCensor@NWildcard@@QAE@XZ db 0FFh
.xdata$x:00005338                                         ; DATA XREF: .xdata$x:00005348o
.xdata$x:00005339                 db 0FFh
.xdata$x:0000533A                 db 0FFh
.xdata$x:0000533B                 db 0FFh
.xdata$x:0000533C                 dd offset __unwindfunclet$??0CCensor@NWildcard@@QAE@XZ$0
.xdata$x:00005340 __ehfuncinfo$??0CCensor@NWildcard@@QAE@XZ db  22h ; "
.xdata$x:00005340                                         ; DATA XREF: __ehhandler$??0CCensor@NWildcard@@QAE@XZ+11o
.xdata$x:00005341                 db    5
.xdata$x:00005342                 db  93h ; ô
.xdata$x:00005343                 db  19h
.xdata$x:00005344                 db    1
.xdata$x:00005345                 db    0
.xdata$x:00005346                 db    0
.xdata$x:00005347                 db    0
.xdata$x:00005348                 dd offset __unwindtable$??0CCensor@NWildcard@@QAE@XZ
.xdata$x:0000534C                 align 20h
.xdata$x:00005360                 db    1
.xdata$x:00005361                 db    0
.xdata$x:00005362                 db    0
.xdata$x:00005363                 db    0
.xdata$x:00005363 _xdata$x        ends
.xdata$x:00005363
.text:00005364 ; ===========================================================================
.text:00005364
.text:00005364 ; Segment type: Pure code
.text:00005364 ; Segment permissions: Read/Execute
.text:00005364 _text           segment para public 'CODE' use32
.text:00005364                 assume cs:_text
.text:00005364                 ;org 5364h
.text:00005364 ; COMDAT (pick any)
.text:00005364                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005364
.text:00005364 ; =============== S U B R O U T I N E =======================================
.text:00005364
.text:00005364 ; Attributes: bp-based frame
.text:00005364
.text:00005364 ; _DWORD __thiscall NWildcard::CCensor::~CCensor(NWildcard::CCensor *__hidden this)
.text:00005364                 public ??1CCensor@NWildcard@@QAE@XZ
.text:00005364 ??1CCensor@NWildcard@@QAE@XZ proc near  ; CODE XREF: __unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$0+6j
.text:00005364                                         ; __unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$4+6j ...
.text:00005364
.text:00005364 var_10          = dword ptr -10h
.text:00005364 var_C           = dword ptr -0Ch
.text:00005364 var_4           = dword ptr -4
.text:00005364
.text:00005364                 push    ebp
.text:00005365                 mov     ebp, esp
.text:00005367                 push    0FFFFFFFFh
.text:00005369                 push    offset __ehhandler$??1CCensor@NWildcard@@QAE@XZ
.text:0000536E                 mov     eax, large fs:0
.text:00005374                 push    eax
.text:00005375                 push    ecx
.text:00005376                 mov     [ebp+var_10], 0CCCCCCCCh
.text:0000537D                 mov     eax, dword ptr ds:___security_cookie
.text:00005382                 xor     eax, ebp
.text:00005384                 push    eax
.text:00005385                 lea     eax, [ebp+var_C]
.text:00005388                 mov     large fs:0, eax
.text:0000538E                 mov     [ebp+var_10], ecx
.text:00005391                 mov     [ebp+var_4], 0
.text:00005398                 mov     ecx, [ebp+var_10]
.text:0000539B                 add     ecx, 0Ch
.text:0000539E                 call    ??1?$CObjectVector@UCCensorPath@NWildcard@@@@QAE@XZ ; CObjectVector<NWildcard::CCensorPath>::~CObjectVector<NWildcard::CCensorPath>(void)
.text:000053A3                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000053AA                 mov     ecx, [ebp+var_10]
.text:000053AD                 call    ??1?$CObjectVector@UCPair@NWildcard@@@@QAE@XZ ; CObjectVector<NWildcard::CPair>::~CObjectVector<NWildcard::CPair>(void)
.text:000053B2                 mov     ecx, [ebp+var_C]
.text:000053B5                 mov     large fs:0, ecx
.text:000053BC                 pop     ecx
.text:000053BD                 add     esp, 10h
.text:000053C0                 cmp     ebp, esp
.text:000053C2                 call    __RTC_CheckEsp
.text:000053C7                 mov     esp, ebp
.text:000053C9                 pop     ebp
.text:000053CA                 retn
.text:000053CA ??1CCensor@NWildcard@@QAE@XZ endp
.text:000053CA
.text:000053CA ; ---------------------------------------------------------------------------
.text:000053CB                 align 4
.text:000053CB _text           ends
.text:000053CB
.text$x:000053CC ; ===========================================================================
.text$x:000053CC
.text$x:000053CC ; Segment type: Pure code
.text$x:000053CC ; Segment permissions: Read/Execute
.text$x:000053CC _text$x         segment para public 'CODE' use32
.text$x:000053CC                 assume cs:_text$x
.text$x:000053CC                 ;org 53CCh
.text$x:000053CC ; COMDAT (pick associative to section at 5364)
.text$x:000053CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000053CC
.text$x:000053CC ; =============== S U B R O U T I N E =======================================
.text$x:000053CC
.text$x:000053CC
.text$x:000053CC __unwindfunclet$??1CCensor@NWildcard@@QAE@XZ$0 proc near
.text$x:000053CC                                         ; DATA XREF: .xdata$x:000053F4o
.text$x:000053CC                 mov     ecx, [ebp-10h]
.text$x:000053CF                 jmp     ??1?$CObjectVector@UCPair@NWildcard@@@@QAE@XZ ; CObjectVector<NWildcard::CPair>::~CObjectVector<NWildcard::CPair>(void)
.text$x:000053CF __unwindfunclet$??1CCensor@NWildcard@@QAE@XZ$0 endp
.text$x:000053CF
.text$x:000053D4
.text$x:000053D4 ; =============== S U B R O U T I N E =======================================
.text$x:000053D4
.text$x:000053D4
.text$x:000053D4 __ehhandler$??1CCensor@NWildcard@@QAE@XZ proc near
.text$x:000053D4                                         ; DATA XREF: NWildcard::CCensor::~CCensor(void)+5o
.text$x:000053D4
.text$x:000053D4 arg_4           = dword ptr  8
.text$x:000053D4
.text$x:000053D4                 mov     edx, [esp+arg_4]
.text$x:000053D8                 lea     eax, [edx+0Ch]
.text$x:000053DB                 mov     ecx, [edx-8]
.text$x:000053DE                 xor     ecx, eax
.text$x:000053E0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000053E5                 mov     eax, offset __ehfuncinfo$??1CCensor@NWildcard@@QAE@XZ
.text$x:000053EA                 jmp     ___CxxFrameHandler3
.text$x:000053EA __ehhandler$??1CCensor@NWildcard@@QAE@XZ endp
.text$x:000053EA
.text$x:000053EA ; ---------------------------------------------------------------------------
.text$x:000053EF                 align 10h
.text$x:000053EF _text$x         ends
.text$x:000053EF
.xdata$x:000053F0 ; ===========================================================================
.xdata$x:000053F0
.xdata$x:000053F0 ; Segment type: Pure data
.xdata$x:000053F0 ; Segment permissions: Read
.xdata$x:000053F0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000053F0                 assume cs:_xdata$x
.xdata$x:000053F0                 ;org 53F0h
.xdata$x:000053F0 ; COMDAT (pick associative to section at 5364)
.xdata$x:000053F0 __unwindtable$??1CCensor@NWildcard@@QAE@XZ db 0FFh
.xdata$x:000053F0                                         ; DATA XREF: .xdata$x:00005400o
.xdata$x:000053F1                 db 0FFh
.xdata$x:000053F2                 db 0FFh
.xdata$x:000053F3                 db 0FFh
.xdata$x:000053F4                 dd offset __unwindfunclet$??1CCensor@NWildcard@@QAE@XZ$0
.xdata$x:000053F8 __ehfuncinfo$??1CCensor@NWildcard@@QAE@XZ db  22h ; "
.xdata$x:000053F8                                         ; DATA XREF: __ehhandler$??1CCensor@NWildcard@@QAE@XZ+11o
.xdata$x:000053F9                 db    5
.xdata$x:000053FA                 db  93h ; ô
.xdata$x:000053FB                 db  19h
.xdata$x:000053FC                 db    1
.xdata$x:000053FD                 db    0
.xdata$x:000053FE                 db    0
.xdata$x:000053FF                 db    0
.xdata$x:00005400                 dd offset __unwindtable$??1CCensor@NWildcard@@QAE@XZ
.xdata$x:00005404                 db    0
.xdata$x:00005405                 db    0
.xdata$x:00005406                 db    0
.xdata$x:00005407                 db    0
.xdata$x:00005408                 db    0
.xdata$x:00005409                 db    0
.xdata$x:0000540A                 db    0
.xdata$x:0000540B                 db    0
.xdata$x:0000540C                 db    0
.xdata$x:0000540D                 db    0
.xdata$x:0000540E                 db    0
.xdata$x:0000540F                 db    0
.xdata$x:00005410                 db    0
.xdata$x:00005411                 db    0
.xdata$x:00005412                 db    0
.xdata$x:00005413                 db    0
.xdata$x:00005414                 db    0
.xdata$x:00005415                 db    0
.xdata$x:00005416                 db    0
.xdata$x:00005417                 db    0
.xdata$x:00005418                 db    1
.xdata$x:00005419                 db    0
.xdata$x:0000541A                 db    0
.xdata$x:0000541B                 db    0
.xdata$x:0000541B _xdata$x        ends
.xdata$x:0000541B
.text:0000541C ; ===========================================================================
.text:0000541C
.text:0000541C ; Segment type: Pure code
.text:0000541C ; Segment permissions: Read/Execute
.text:0000541C _text           segment para public 'CODE' use32
.text:0000541C                 assume cs:_text
.text:0000541C                 ;org 541Ch
.text:0000541C ; COMDAT (pick any)
.text:0000541C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000541C
.text:0000541C ; =============== S U B R O U T I N E =======================================
.text:0000541C
.text:0000541C ; Attributes: bp-based frame
.text:0000541C
.text:0000541C ; _DWORD __thiscall CUpdateOptions::~CUpdateOptions(CUpdateOptions *__hidden this)
.text:0000541C                 public ??1CUpdateOptions@@QAE@XZ
.text:0000541C ??1CUpdateOptions@@QAE@XZ proc near     ; CODE XREF: __unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$8+9j
.text:0000541C                                         ; CArcCmdLineOptions::~CArcCmdLineOptions(void)+73p ...
.text:0000541C
.text:0000541C var_10          = dword ptr -10h
.text:0000541C var_C           = dword ptr -0Ch
.text:0000541C var_4           = dword ptr -4
.text:0000541C
.text:0000541C                 push    ebp
.text:0000541D                 mov     ebp, esp
.text:0000541F                 push    0FFFFFFFFh
.text:00005421                 push    offset __ehhandler$??1CUpdateOptions@@QAE@XZ
.text:00005426                 mov     eax, large fs:0
.text:0000542C                 push    eax
.text:0000542D                 push    ecx
.text:0000542E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00005435                 mov     eax, dword ptr ds:___security_cookie
.text:0000543A                 xor     eax, ebp
.text:0000543C                 push    eax
.text:0000543D                 lea     eax, [ebp+var_C]
.text:00005440                 mov     large fs:0, eax
.text:00005446                 mov     [ebp+var_10], ecx
.text:00005449                 mov     [ebp+var_4], 8
.text:00005450                 mov     ecx, [ebp+var_10]
.text:00005453                 add     ecx, 108h
.text:00005459                 call    ??1?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text:0000545E                 mov     byte ptr [ebp+var_4], 7
.text:00005462                 mov     ecx, [ebp+var_10]
.text:00005465                 add     ecx, 0FCh ; 'n'
.text:0000546B                 call    ??1?$CObjectVector@UCRenamePair@@@@QAE@XZ ; CObjectVector<CRenamePair>::~CObjectVector<CRenamePair>(void)
.text:00005470                 mov     byte ptr [ebp+var_4], 6
.text:00005474                 mov     ecx, [ebp+var_10]
.text:00005477                 add     ecx, 0E4h ; 'S' ; this
.text:0000547D                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00005482                 mov     byte ptr [ebp+var_4], 5
.text:00005486                 mov     ecx, [ebp+var_10]
.text:00005489                 add     ecx, 0D4h ; '+' ; this
.text:0000548F                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00005494                 mov     byte ptr [ebp+var_4], 4
.text:00005498                 mov     ecx, [ebp+var_10]
.text:0000549B                 add     ecx, 0C8h ; '+' ; this
.text:000054A1                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000054A6                 mov     byte ptr [ebp+var_4], 3
.text:000054AA                 mov     ecx, [ebp+var_10]
.text:000054AD                 add     ecx, 0B8h ; '+' ; this
.text:000054B3                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000054B8                 mov     byte ptr [ebp+var_4], 2
.text:000054BC                 mov     ecx, [ebp+var_10]
.text:000054BF                 add     ecx, 0A8h ; '¿' ; this
.text:000054C5                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000054CA                 mov     byte ptr [ebp+var_4], 1
.text:000054CE                 mov     ecx, [ebp+var_10]
.text:000054D1                 add     ecx, 48h ; 'H'  ; this
.text:000054D4                 call    ??1CArchivePath@@QAE@XZ ; CArchivePath::~CArchivePath(void)
.text:000054D9                 mov     byte ptr [ebp+var_4], 0
.text:000054DD                 mov     ecx, [ebp+var_10]
.text:000054E0                 add     ecx, 38h ; '8'
.text:000054E3                 call    ??1?$CObjectVector@UCUpdateArchiveCommand@@@@QAE@XZ ; CObjectVector<CUpdateArchiveCommand>::~CObjectVector<CUpdateArchiveCommand>(void)
.text:000054E8                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000054EF                 mov     ecx, [ebp+var_10] ; this
.text:000054F2                 call    ??1CCompressionMethodMode@@QAE@XZ ; CCompressionMethodMode::~CCompressionMethodMode(void)
.text:000054F7                 mov     ecx, [ebp+var_C]
.text:000054FA                 mov     large fs:0, ecx
.text:00005501                 pop     ecx
.text:00005502                 add     esp, 10h
.text:00005505                 cmp     ebp, esp
.text:00005507                 call    __RTC_CheckEsp
.text:0000550C                 mov     esp, ebp
.text:0000550E                 pop     ebp
.text:0000550F                 retn
.text:0000550F ??1CUpdateOptions@@QAE@XZ endp
.text:0000550F
.text:0000550F _text           ends
.text:0000550F
.text$x:00005510 ; ===========================================================================
.text$x:00005510
.text$x:00005510 ; Segment type: Pure code
.text$x:00005510 ; Segment permissions: Read/Execute
.text$x:00005510 _text$x         segment para public 'CODE' use32
.text$x:00005510                 assume cs:_text$x
.text$x:00005510                 ;org 5510h
.text$x:00005510 ; COMDAT (pick associative to section at 541C)
.text$x:00005510                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005510
.text$x:00005510 ; =============== S U B R O U T I N E =======================================
.text$x:00005510
.text$x:00005510
.text$x:00005510 __unwindfunclet$??1CUpdateOptions@@QAE@XZ$0 proc near
.text$x:00005510                                         ; DATA XREF: .xdata$x:000055C8o
.text$x:00005510                 mov     ecx, [ebp-10h]  ; this
.text$x:00005513                 jmp     ??1CCompressionMethodMode@@QAE@XZ ; CCompressionMethodMode::~CCompressionMethodMode(void)
.text$x:00005513 __unwindfunclet$??1CUpdateOptions@@QAE@XZ$0 endp
.text$x:00005513
.text$x:00005518
.text$x:00005518 ; =============== S U B R O U T I N E =======================================
.text$x:00005518
.text$x:00005518
.text$x:00005518 __unwindfunclet$??1CUpdateOptions@@QAE@XZ$1 proc near
.text$x:00005518                                         ; DATA XREF: .xdata$x:000055D0o
.text$x:00005518                 mov     ecx, [ebp-10h]
.text$x:0000551B                 add     ecx, 38h ; '8'
.text$x:0000551E                 jmp     ??1?$CObjectVector@UCUpdateArchiveCommand@@@@QAE@XZ ; CObjectVector<CUpdateArchiveCommand>::~CObjectVector<CUpdateArchiveCommand>(void)
.text$x:0000551E __unwindfunclet$??1CUpdateOptions@@QAE@XZ$1 endp
.text$x:0000551E
.text$x:00005523
.text$x:00005523 ; =============== S U B R O U T I N E =======================================
.text$x:00005523
.text$x:00005523
.text$x:00005523 __unwindfunclet$??1CUpdateOptions@@QAE@XZ$2 proc near
.text$x:00005523                                         ; DATA XREF: .xdata$x:000055D8o
.text$x:00005523                 mov     ecx, [ebp-10h]
.text$x:00005526                 add     ecx, 48h ; 'H'  ; this
.text$x:00005529                 jmp     ??1CArchivePath@@QAE@XZ ; CArchivePath::~CArchivePath(void)
.text$x:00005529 __unwindfunclet$??1CUpdateOptions@@QAE@XZ$2 endp
.text$x:00005529
.text$x:0000552E
.text$x:0000552E ; =============== S U B R O U T I N E =======================================
.text$x:0000552E
.text$x:0000552E
.text$x:0000552E __unwindfunclet$??1CUpdateOptions@@QAE@XZ$3 proc near
.text$x:0000552E                                         ; DATA XREF: .xdata$x:000055E0o
.text$x:0000552E                 mov     ecx, [ebp-10h]
.text$x:00005531                 add     ecx, 0A8h ; '¿' ; this
.text$x:00005537                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00005537 __unwindfunclet$??1CUpdateOptions@@QAE@XZ$3 endp
.text$x:00005537
.text$x:0000553C
.text$x:0000553C ; =============== S U B R O U T I N E =======================================
.text$x:0000553C
.text$x:0000553C
.text$x:0000553C __unwindfunclet$??1CUpdateOptions@@QAE@XZ$4 proc near
.text$x:0000553C                                         ; DATA XREF: .xdata$x:000055E8o
.text$x:0000553C                 mov     ecx, [ebp-10h]
.text$x:0000553F                 add     ecx, 0B8h ; '+' ; this
.text$x:00005545                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00005545 __unwindfunclet$??1CUpdateOptions@@QAE@XZ$4 endp
.text$x:00005545
.text$x:0000554A
.text$x:0000554A ; =============== S U B R O U T I N E =======================================
.text$x:0000554A
.text$x:0000554A
.text$x:0000554A __unwindfunclet$??1CUpdateOptions@@QAE@XZ$5 proc near
.text$x:0000554A                                         ; DATA XREF: .xdata$x:000055F0o
.text$x:0000554A                 mov     ecx, [ebp-10h]
.text$x:0000554D                 add     ecx, 0C8h ; '+' ; this
.text$x:00005553                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00005553 __unwindfunclet$??1CUpdateOptions@@QAE@XZ$5 endp
.text$x:00005553
.text$x:00005558
.text$x:00005558 ; =============== S U B R O U T I N E =======================================
.text$x:00005558
.text$x:00005558
.text$x:00005558 __unwindfunclet$??1CUpdateOptions@@QAE@XZ$6 proc near
.text$x:00005558                                         ; DATA XREF: .xdata$x:000055F8o
.text$x:00005558                 mov     ecx, [ebp-10h]
.text$x:0000555B                 add     ecx, 0D4h ; '+' ; this
.text$x:00005561                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00005561 __unwindfunclet$??1CUpdateOptions@@QAE@XZ$6 endp
.text$x:00005561
.text$x:00005566
.text$x:00005566 ; =============== S U B R O U T I N E =======================================
.text$x:00005566
.text$x:00005566
.text$x:00005566 __unwindfunclet$??1CUpdateOptions@@QAE@XZ$7 proc near
.text$x:00005566                                         ; DATA XREF: .xdata$x:00005600o
.text$x:00005566                 mov     ecx, [ebp-10h]
.text$x:00005569                 add     ecx, 0E4h ; 'S' ; this
.text$x:0000556F                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000556F __unwindfunclet$??1CUpdateOptions@@QAE@XZ$7 endp
.text$x:0000556F
.text$x:00005574
.text$x:00005574 ; =============== S U B R O U T I N E =======================================
.text$x:00005574
.text$x:00005574
.text$x:00005574 __unwindfunclet$??1CUpdateOptions@@QAE@XZ$8 proc near
.text$x:00005574                                         ; DATA XREF: .xdata$x:00005608o
.text$x:00005574                 mov     ecx, [ebp-10h]
.text$x:00005577                 add     ecx, 0FCh ; 'n'
.text$x:0000557D                 jmp     ??1?$CObjectVector@UCRenamePair@@@@QAE@XZ ; CObjectVector<CRenamePair>::~CObjectVector<CRenamePair>(void)
.text$x:0000557D __unwindfunclet$??1CUpdateOptions@@QAE@XZ$8 endp
.text$x:0000557D
.text$x:00005582
.text$x:00005582 ; =============== S U B R O U T I N E =======================================
.text$x:00005582
.text$x:00005582
.text$x:00005582 __ehhandler$??1CUpdateOptions@@QAE@XZ proc near
.text$x:00005582                                         ; DATA XREF: CUpdateOptions::~CUpdateOptions(void)+5o
.text$x:00005582
.text$x:00005582 arg_4           = dword ptr  8
.text$x:00005582
.text$x:00005582                 mov     edx, [esp+arg_4]
.text$x:00005586                 lea     eax, [edx+0Ch]
.text$x:00005589                 mov     ecx, [edx-8]
.text$x:0000558C                 xor     ecx, eax
.text$x:0000558E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005593                 mov     eax, offset __ehfuncinfo$??1CUpdateOptions@@QAE@XZ
.text$x:00005598                 jmp     ___CxxFrameHandler3
.text$x:00005598 __ehhandler$??1CUpdateOptions@@QAE@XZ endp
.text$x:00005598
.text$x:00005598 ; ---------------------------------------------------------------------------
.text$x:0000559D                 align 10h
.text$x:0000559D _text$x         ends
.text$x:0000559D
.xdata$x:000055A0 ; ===========================================================================
.xdata$x:000055A0
.xdata$x:000055A0 ; Segment type: Pure data
.xdata$x:000055A0 ; Segment permissions: Read
.xdata$x:000055A0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000055A0                 assume cs:_xdata$x
.xdata$x:000055A0                 ;org 55A0h
.xdata$x:000055A0 ; COMDAT (pick associative to section at 541C)
.xdata$x:000055A0 __ehfuncinfo$??1CUpdateOptions@@QAE@XZ db  22h ; "
.xdata$x:000055A0                                         ; DATA XREF: __ehhandler$??1CUpdateOptions@@QAE@XZ+11o
.xdata$x:000055A1                 db    5
.xdata$x:000055A2                 db  93h ; ô
.xdata$x:000055A3                 db  19h
.xdata$x:000055A4                 db    9
.xdata$x:000055A5                 db    0
.xdata$x:000055A6                 db    0
.xdata$x:000055A7                 db    0
.xdata$x:000055A8                 dd offset __unwindtable$??1CUpdateOptions@@QAE@XZ
.xdata$x:000055AC                 align 20h
.xdata$x:000055C0                 db    1
.xdata$x:000055C1                 db    0
.xdata$x:000055C2                 db    0
.xdata$x:000055C3                 db    0
.xdata$x:000055C4 __unwindtable$??1CUpdateOptions@@QAE@XZ db 0FFh
.xdata$x:000055C4                                         ; DATA XREF: .xdata$x:000055A8o
.xdata$x:000055C5                 db 0FFh
.xdata$x:000055C6                 db 0FFh
.xdata$x:000055C7                 db 0FFh
.xdata$x:000055C8                 dd offset __unwindfunclet$??1CUpdateOptions@@QAE@XZ$0
.xdata$x:000055CC                 align 10h
.xdata$x:000055D0                 dd offset __unwindfunclet$??1CUpdateOptions@@QAE@XZ$1
.xdata$x:000055D4                 db    1
.xdata$x:000055D5                 db    0
.xdata$x:000055D6                 db    0
.xdata$x:000055D7                 db    0
.xdata$x:000055D8                 dd offset __unwindfunclet$??1CUpdateOptions@@QAE@XZ$2
.xdata$x:000055DC                 db    2
.xdata$x:000055DD                 db    0
.xdata$x:000055DE                 db    0
.xdata$x:000055DF                 db    0
.xdata$x:000055E0                 dd offset __unwindfunclet$??1CUpdateOptions@@QAE@XZ$3
.xdata$x:000055E4                 db    3
.xdata$x:000055E5                 db    0
.xdata$x:000055E6                 db    0
.xdata$x:000055E7                 db    0
.xdata$x:000055E8                 dd offset __unwindfunclet$??1CUpdateOptions@@QAE@XZ$4
.xdata$x:000055EC                 db    4
.xdata$x:000055ED                 db    0
.xdata$x:000055EE                 db    0
.xdata$x:000055EF                 db    0
.xdata$x:000055F0                 dd offset __unwindfunclet$??1CUpdateOptions@@QAE@XZ$5
.xdata$x:000055F4                 db    5
.xdata$x:000055F5                 db    0
.xdata$x:000055F6                 db    0
.xdata$x:000055F7                 db    0
.xdata$x:000055F8                 dd offset __unwindfunclet$??1CUpdateOptions@@QAE@XZ$6
.xdata$x:000055FC                 db    6
.xdata$x:000055FD                 db    0
.xdata$x:000055FE                 db    0
.xdata$x:000055FF                 db    0
.xdata$x:00005600                 dd offset __unwindfunclet$??1CUpdateOptions@@QAE@XZ$7
.xdata$x:00005604                 db    7
.xdata$x:00005605                 db    0
.xdata$x:00005606                 db    0
.xdata$x:00005607                 db    0
.xdata$x:00005608                 dd offset __unwindfunclet$??1CUpdateOptions@@QAE@XZ$8
.xdata$x:00005608 _xdata$x        ends
.xdata$x:00005608
.text:0000560C ; ===========================================================================
.text:0000560C
.text:0000560C ; Segment type: Pure code
.text:0000560C ; Segment permissions: Read/Execute
.text:0000560C _text           segment para public 'CODE' use32
.text:0000560C                 assume cs:_text
.text:0000560C                 ;org 560Ch
.text:0000560C ; COMDAT (pick any)
.text:0000560C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000560C
.text:0000560C ; =============== S U B R O U T I N E =======================================
.text:0000560C
.text:0000560C ; Attributes: bp-based frame
.text:0000560C
.text:0000560C ; _DWORD __thiscall CHashOptions::~CHashOptions(CHashOptions *__hidden this)
.text:0000560C                 public ??1CHashOptions@@QAE@XZ
.text:0000560C ??1CHashOptions@@QAE@XZ proc near       ; CODE XREF: __unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$9+9j
.text:0000560C                                         ; CArcCmdLineOptions::~CArcCmdLineOptions(void)+61p ...
.text:0000560C
.text:0000560C var_4           = dword ptr -4
.text:0000560C
.text:0000560C                 push    ebp
.text:0000560D                 mov     ebp, esp
.text:0000560F                 push    ecx
.text:00005610                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005617                 mov     [ebp+var_4], ecx
.text:0000561A                 mov     ecx, [ebp+var_4]
.text:0000561D                 call    ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text:00005622                 add     esp, 4
.text:00005625                 cmp     ebp, esp
.text:00005627                 call    __RTC_CheckEsp
.text:0000562C                 mov     esp, ebp
.text:0000562E                 pop     ebp
.text:0000562F                 retn
.text:0000562F ??1CHashOptions@@QAE@XZ endp
.text:0000562F
.text:0000562F _text           ends
.text:0000562F
.text:00005630 ; ===========================================================================
.text:00005630
.text:00005630 ; Segment type: Pure code
.text:00005630 ; Segment permissions: Read/Execute
.text:00005630 _text           segment para public 'CODE' use32
.text:00005630                 assume cs:_text
.text:00005630                 ;org 5630h
.text:00005630 ; COMDAT (pick any)
.text:00005630                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005630
.text:00005630 ; =============== S U B R O U T I N E =======================================
.text:00005630
.text:00005630 ; Attributes: bp-based frame
.text:00005630
.text:00005630 ; public: __thiscall CStdOutStream::operator struct _iobuf *(void)
.text:00005630                 public ??BCStdOutStream@@QAEPAU_iobuf@@XZ
.text:00005630 ??BCStdOutStream@@QAEPAU_iobuf@@XZ proc near ; CODE XREF: Main2(void)+B45p
.text:00005630
.text:00005630 var_4           = dword ptr -4
.text:00005630
.text:00005630                 push    ebp
.text:00005631                 mov     ebp, esp
.text:00005633                 push    ecx
.text:00005634                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000563B                 mov     [ebp+var_4], ecx
.text:0000563E                 mov     eax, [ebp+var_4]
.text:00005641                 mov     eax, [eax]
.text:00005643                 mov     esp, ebp
.text:00005645                 pop     ebp
.text:00005646                 retn
.text:00005646 ??BCStdOutStream@@QAEPAU_iobuf@@XZ endp
.text:00005646
.text:00005646 ; ---------------------------------------------------------------------------
.text:00005647                 align 4
.text:00005647 _text           ends
.text:00005647
.text:00005648 ; ===========================================================================
.text:00005648
.text:00005648 ; Segment type: Pure code
.text:00005648 ; Segment permissions: Read/Execute
.text:00005648 _text           segment para public 'CODE' use32
.text:00005648                 assume cs:_text
.text:00005648                 ;org 5648h
.text:00005648 ; COMDAT (pick any)
.text:00005648                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005648
.text:00005648 ; =============== S U B R O U T I N E =======================================
.text:00005648
.text:00005648 ; Attributes: bp-based frame
.text:00005648
.text:00005648 ; public: class CStdOutStream & __thiscall CStdOutStream::operator<<(class CStdOutStream & (__stdcall *)(class CStdOutStream &))
.text:00005648                 public ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z
.text:00005648 ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z proc near
.text:00005648                                         ; CODE XREF: Main2(void)+524p
.text:00005648                                         ; Main2(void)+532p ...
.text:00005648
.text:00005648 var_4           = dword ptr -4
.text:00005648 arg_0           = dword ptr  8
.text:00005648
.text:00005648                 push    ebp
.text:00005649                 mov     ebp, esp
.text:0000564B                 push    ecx
.text:0000564C                 push    esi
.text:0000564D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005654                 mov     [ebp+var_4], ecx
.text:00005657                 mov     esi, esp
.text:00005659                 mov     eax, [ebp+var_4]
.text:0000565C                 push    eax
.text:0000565D                 call    [ebp+arg_0]
.text:00005660                 cmp     esi, esp
.text:00005662                 call    __RTC_CheckEsp
.text:00005667                 mov     eax, [ebp+var_4]
.text:0000566A                 pop     esi
.text:0000566B                 add     esp, 4
.text:0000566E                 cmp     ebp, esp
.text:00005670                 call    __RTC_CheckEsp
.text:00005675                 mov     esp, ebp
.text:00005677                 pop     ebp
.text:00005678                 retn    4
.text:00005678 ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z endp
.text:00005678
.text:00005678 ; ---------------------------------------------------------------------------
.text:0000567B                 align 4
.text:0000567B _text           ends
.text:0000567B
.text:0000567C ; ===========================================================================
.text:0000567C
.text:0000567C ; Segment type: Pure code
.text:0000567C ; Segment permissions: Read/Execute
.text:0000567C _text           segment para public 'CODE' use32
.text:0000567C                 assume cs:_text
.text:0000567C                 ;org 567Ch
.text:0000567C ; COMDAT (pick any)
.text:0000567C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000567C
.text:0000567C ; =============== S U B R O U T I N E =======================================
.text:0000567C
.text:0000567C ; Attributes: bp-based frame
.text:0000567C
.text:0000567C ; int __stdcall CStdOutStream::operator<<(char *Str)
.text:0000567C                 public ??6CStdOutStream@@QAEAAV0@PBD@Z
.text:0000567C ??6CStdOutStream@@QAEAAV0@PBD@Z proc near ; CODE XREF: Main2(void)+52Bp
.text:0000567C                                         ; Main2(void)+5B1p ...
.text:0000567C
.text:0000567C var_4           = dword ptr -4
.text:0000567C Str             = dword ptr  8
.text:0000567C
.text:0000567C                 push    ebp
.text:0000567D                 mov     ebp, esp
.text:0000567F                 push    ecx
.text:00005680                 push    esi
.text:00005681                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005688                 mov     [ebp+var_4], ecx
.text:0000568B                 mov     esi, esp
.text:0000568D                 mov     eax, [ebp+var_4]
.text:00005690                 mov     ecx, [eax]
.text:00005692                 push    ecx             ; File
.text:00005693                 mov     edx, [ebp+Str]
.text:00005696                 push    edx             ; Str
.text:00005697                 call    dword ptr ds:__imp__fputs
.text:0000569D                 add     esp, 8
.text:000056A0                 cmp     esi, esp
.text:000056A2                 call    __RTC_CheckEsp
.text:000056A7                 mov     eax, [ebp+var_4]
.text:000056AA                 pop     esi
.text:000056AB                 add     esp, 4
.text:000056AE                 cmp     ebp, esp
.text:000056B0                 call    __RTC_CheckEsp
.text:000056B5                 mov     esp, ebp
.text:000056B7                 pop     ebp
.text:000056B8                 retn    4
.text:000056B8 ??6CStdOutStream@@QAEAAV0@PBD@Z endp
.text:000056B8
.text:000056B8 ; ---------------------------------------------------------------------------
.text:000056BB                 align 4
.text:000056BB _text           ends
.text:000056BB
.text:000056BC ; ===========================================================================
.text:000056BC
.text:000056BC ; Segment type: Pure code
.text:000056BC ; Segment permissions: Read/Execute
.text:000056BC _text           segment para public 'CODE' use32
.text:000056BC                 assume cs:_text
.text:000056BC                 ;org 56BCh
.text:000056BC ; COMDAT (pick any)
.text:000056BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000056BC
.text:000056BC ; =============== S U B R O U T I N E =======================================
.text:000056BC
.text:000056BC ; Attributes: bp-based frame
.text:000056BC
.text:000056BC ; public: class CStdOutStream & __thiscall CStdOutStream::operator<<(char)
.text:000056BC                 public ??6CStdOutStream@@QAEAAV0@D@Z
.text:000056BC ??6CStdOutStream@@QAEAAV0@D@Z proc near ; CODE XREF: Main2(void)+5D2p
.text:000056BC                                         ; Main2(void)+642p ...
.text:000056BC
.text:000056BC var_4           = dword ptr -4
.text:000056BC arg_0           = byte ptr  8
.text:000056BC
.text:000056BC                 push    ebp
.text:000056BD                 mov     ebp, esp
.text:000056BF                 push    ecx
.text:000056C0                 push    esi
.text:000056C1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000056C8                 mov     [ebp+var_4], ecx
.text:000056CB                 mov     esi, esp
.text:000056CD                 mov     eax, [ebp+var_4]
.text:000056D0                 mov     ecx, [eax]
.text:000056D2                 push    ecx             ; File
.text:000056D3                 movzx   edx, [ebp+arg_0]
.text:000056D7                 push    edx             ; Ch
.text:000056D8                 call    dword ptr ds:__imp__fputc
.text:000056DE                 add     esp, 8
.text:000056E1                 cmp     esi, esp
.text:000056E3                 call    __RTC_CheckEsp
.text:000056E8                 mov     eax, [ebp+var_4]
.text:000056EB                 pop     esi
.text:000056EC                 add     esp, 4
.text:000056EF                 cmp     ebp, esp
.text:000056F1                 call    __RTC_CheckEsp
.text:000056F6                 mov     esp, ebp
.text:000056F8                 pop     ebp
.text:000056F9                 retn    4
.text:000056F9 ??6CStdOutStream@@QAEAAV0@D@Z endp
.text:000056F9
.text:000056F9 _text           ends
.text:000056F9
.text:000056FC ; ===========================================================================
.text:000056FC
.text:000056FC ; Segment type: Pure code
.text:000056FC ; Segment permissions: Read/Execute
.text:000056FC _text           segment para public 'CODE' use32
.text:000056FC                 assume cs:_text
.text:000056FC                 ;org 56FCh
.text:000056FC ; COMDAT (pick any)
.text:000056FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000056FC
.text:000056FC ; =============== S U B R O U T I N E =======================================
.text:000056FC
.text:000056FC ; Attributes: bp-based frame
.text:000056FC
.text:000056FC ; void __thiscall COpenCallbackConsole::ClosePercents(COpenCallbackConsole *__hidden this)
.text:000056FC                 public ?ClosePercents@COpenCallbackConsole@@QAEXXZ
.text:000056FC ?ClosePercents@COpenCallbackConsole@@QAEXXZ proc near
.text:000056FC                                         ; CODE XREF: Main2(void)+FD5p
.text:000056FC
.text:000056FC var_4           = dword ptr -4
.text:000056FC
.text:000056FC                 push    ebp
.text:000056FD                 mov     ebp, esp
.text:000056FF                 push    ecx
.text:00005700                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005707                 mov     [ebp+var_4], ecx
.text:0000570A                 mov     ecx, [ebp+var_4] ; this
.text:0000570D                 call    ?NeedPercents@COpenCallbackConsole@@IBE_NXZ ; COpenCallbackConsole::NeedPercents(void)
.text:00005712                 movzx   eax, al
.text:00005715                 test    eax, eax
.text:00005717                 jz      short loc_5726
.text:00005719                 push    1               ; bool
.text:0000571B                 mov     ecx, [ebp+var_4]
.text:0000571E                 add     ecx, 8          ; this
.text:00005721                 call    ?ClosePrint@CPercentPrinter@@QAEX_N@Z ; CPercentPrinter::ClosePrint(bool)
.text:00005726
.text:00005726 loc_5726:                               ; CODE XREF: COpenCallbackConsole::ClosePercents(void)+1Bj
.text:00005726                 add     esp, 4
.text:00005729                 cmp     ebp, esp
.text:0000572B                 call    __RTC_CheckEsp
.text:00005730                 mov     esp, ebp
.text:00005732                 pop     ebp
.text:00005733                 retn
.text:00005733 ?ClosePercents@COpenCallbackConsole@@QAEXXZ endp
.text:00005733
.text:00005733 _text           ends
.text:00005733
.text:00005734 ; ===========================================================================
.text:00005734
.text:00005734 ; Segment type: Pure code
.text:00005734 ; Segment permissions: Read/Execute
.text:00005734 _text           segment para public 'CODE' use32
.text:00005734                 assume cs:_text
.text:00005734                 ;org 5734h
.text:00005734 ; COMDAT (pick any)
.text:00005734                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005734
.text:00005734 ; =============== S U B R O U T I N E =======================================
.text:00005734
.text:00005734 ; Attributes: bp-based frame
.text:00005734
.text:00005734 ; bool __thiscall COpenCallbackConsole::NeedPercents(COpenCallbackConsole *__hidden this)
.text:00005734                 public ?NeedPercents@COpenCallbackConsole@@IBE_NXZ
.text:00005734 ?NeedPercents@COpenCallbackConsole@@IBE_NXZ proc near
.text:00005734                                         ; CODE XREF: COpenCallbackConsole::ClosePercents(void)+11p
.text:00005734
.text:00005734 var_4           = dword ptr -4
.text:00005734
.text:00005734                 push    ebp
.text:00005735                 mov     ebp, esp
.text:00005737                 push    ecx
.text:00005738                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000573F                 mov     [ebp+var_4], ecx
.text:00005742                 mov     eax, [ebp+var_4]
.text:00005745                 xor     ecx, ecx
.text:00005747                 cmp     dword ptr [eax+0ACh], 0
.text:0000574E                 setnz   cl
.text:00005751                 mov     al, cl
.text:00005753                 mov     esp, ebp
.text:00005755                 pop     ebp
.text:00005756                 retn
.text:00005756 ?NeedPercents@COpenCallbackConsole@@IBE_NXZ endp
.text:00005756
.text:00005756 ; ---------------------------------------------------------------------------
.text:00005757                 align 4
.text:00005757 _text           ends
.text:00005757
.text:00005758 ; ===========================================================================
.text:00005758
.text:00005758 ; Segment type: Pure code
.text:00005758 ; Segment permissions: Read/Execute
.text:00005758 _text           segment para public 'CODE' use32
.text:00005758                 assume cs:_text
.text:00005758                 ;org 5758h
.text:00005758 ; COMDAT (pick any)
.text:00005758                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005758
.text:00005758 ; =============== S U B R O U T I N E =======================================
.text:00005758
.text:00005758 ; Attributes: bp-based frame
.text:00005758
.text:00005758 ; public: __thiscall COpenCallbackConsole::COpenCallbackConsole(void)
.text:00005758                 public ??0COpenCallbackConsole@@QAE@XZ
.text:00005758 ??0COpenCallbackConsole@@QAE@XZ proc near ; CODE XREF: Main2(void)+1801p
.text:00005758                                         ; CExtractCallbackConsole::CExtractCallbackConsole(void)+51p
.text:00005758
.text:00005758 var_10          = dword ptr -10h
.text:00005758 var_C           = dword ptr -0Ch
.text:00005758 var_4           = dword ptr -4
.text:00005758
.text:00005758                 push    ebp
.text:00005759                 mov     ebp, esp
.text:0000575B                 push    0FFFFFFFFh
.text:0000575D                 push    offset __ehhandler$??0COpenCallbackConsole@@QAE@XZ
.text:00005762                 mov     eax, large fs:0
.text:00005768                 push    eax
.text:00005769                 push    ecx
.text:0000576A                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00005771                 mov     eax, dword ptr ds:___security_cookie
.text:00005776                 xor     eax, ebp
.text:00005778                 push    eax
.text:00005779                 lea     eax, [ebp+var_C]
.text:0000577C                 mov     large fs:0, eax
.text:00005782                 mov     [ebp+var_10], ecx
.text:00005785                 mov     ecx, [ebp+var_10] ; this
.text:00005788                 call    ??0IOpenCallbackUI@@QAE@XZ ; IOpenCallbackUI::IOpenCallbackUI(void)
.text:0000578D                 mov     eax, [ebp+var_10]
.text:00005790                 mov     dword ptr [eax], offset ??_7COpenCallbackConsole@@6B@ ; const COpenCallbackConsole::`vftable'
.text:00005796                 push    0C8h ; '+'
.text:0000579B                 mov     ecx, [ebp+var_10]
.text:0000579E                 add     ecx, 8
.text:000057A1                 call    ??0CPercentPrinter@@QAE@I@Z ; CPercentPrinter::CPercentPrinter(uint)
.text:000057A6                 mov     [ebp+var_4], 0
.text:000057AD                 mov     ecx, [ebp+var_10]
.text:000057B0                 mov     byte ptr [ecx+0C0h], 0
.text:000057B7                 mov     edx, [ebp+var_10]
.text:000057BA                 mov     byte ptr [edx+0C1h], 0
.text:000057C1                 mov     eax, [ebp+var_10]
.text:000057C4                 mov     byte ptr [eax+0C2h], 0
.text:000057CB                 mov     ecx, [ebp+var_10]
.text:000057CE                 mov     byte ptr [ecx+0C3h], 0
.text:000057D5                 mov     ecx, [ebp+var_10]
.text:000057D8                 add     ecx, 0C4h ; '-'
.text:000057DE                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:000057E3                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000057EA                 mov     eax, [ebp+var_10]
.text:000057ED                 mov     ecx, [ebp+var_C]
.text:000057F0                 mov     large fs:0, ecx
.text:000057F7                 pop     ecx
.text:000057F8                 add     esp, 10h
.text:000057FB                 cmp     ebp, esp
.text:000057FD                 call    __RTC_CheckEsp
.text:00005802                 mov     esp, ebp
.text:00005804                 pop     ebp
.text:00005805                 retn
.text:00005805 ??0COpenCallbackConsole@@QAE@XZ endp
.text:00005805
.text:00005805 ; ---------------------------------------------------------------------------
.text:00005806                 align 4
.text:00005806 _text           ends
.text:00005806
.text$x:00005808 ; ===========================================================================
.text$x:00005808
.text$x:00005808 ; Segment type: Pure code
.text$x:00005808 ; Segment permissions: Read/Execute
.text$x:00005808 _text$x         segment para public 'CODE' use32
.text$x:00005808                 assume cs:_text$x
.text$x:00005808                 ;org 5808h
.text$x:00005808 ; COMDAT (pick associative to section at 5758)
.text$x:00005808                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005808
.text$x:00005808 ; =============== S U B R O U T I N E =======================================
.text$x:00005808
.text$x:00005808
.text$x:00005808 __unwindfunclet$??0COpenCallbackConsole@@QAE@XZ$0 proc near
.text$x:00005808                                         ; DATA XREF: .xdata$x:0000584Co
.text$x:00005808                 mov     ecx, [ebp-10h]
.text$x:0000580B                 add     ecx, 8          ; this
.text$x:0000580E                 jmp     ??1CPercentPrinter@@QAE@XZ ; CPercentPrinter::~CPercentPrinter(void)
.text$x:0000580E __unwindfunclet$??0COpenCallbackConsole@@QAE@XZ$0 endp
.text$x:0000580E
.text$x:00005813
.text$x:00005813 ; =============== S U B R O U T I N E =======================================
.text$x:00005813
.text$x:00005813
.text$x:00005813 __ehhandler$??0COpenCallbackConsole@@QAE@XZ proc near
.text$x:00005813                                         ; DATA XREF: COpenCallbackConsole::COpenCallbackConsole(void)+5o
.text$x:00005813
.text$x:00005813 arg_4           = dword ptr  8
.text$x:00005813
.text$x:00005813                 mov     edx, [esp+arg_4]
.text$x:00005817                 lea     eax, [edx+0Ch]
.text$x:0000581A                 mov     ecx, [edx-8]
.text$x:0000581D                 xor     ecx, eax
.text$x:0000581F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005824                 mov     eax, offset __ehfuncinfo$??0COpenCallbackConsole@@QAE@XZ
.text$x:00005829                 jmp     ___CxxFrameHandler3
.text$x:00005829 __ehhandler$??0COpenCallbackConsole@@QAE@XZ endp
.text$x:00005829
.text$x:00005829 ; ---------------------------------------------------------------------------
.text$x:0000582E                 align 10h
.text$x:0000582E _text$x         ends
.text$x:0000582E
.rdata:00005830 ; ===========================================================================
.rdata:00005830
.rdata:00005830 ; Segment type: Pure data
.rdata:00005830 ; Segment permissions: Read
.rdata:00005830 _rdata          segment dword public 'DATA' use32
.rdata:00005830                 assume cs:_rdata
.rdata:00005830                 ;org 5830h
.rdata:00005830 ; COMDAT (pick largest)
.rdata:00005830                 dd offset ??_R4COpenCallbackConsole@@6B@ ; const COpenCallbackConsole::`RTTI Complete Object Locator'
.rdata:00005834                 public ??_7COpenCallbackConsole@@6B@
.rdata:00005834 ; const COpenCallbackConsole::`vftable'
.rdata:00005834 ??_7COpenCallbackConsole@@6B@ dd offset ?Open_CheckBreak@COpenCallbackConsole@@UAEJXZ
.rdata:00005834                                         ; DATA XREF: COpenCallbackConsole::COpenCallbackConsole(void)+38o
.rdata:00005834                                         ; COpenCallbackConsole::Open_CheckBreak(void)
.rdata:00005838                 dd offset ?Open_SetTotal@COpenCallbackConsole@@UAEJPB_K0@Z ; COpenCallbackConsole::Open_SetTotal(unsigned __int64 const *,unsigned __int64 const *)
.rdata:0000583C                 dd offset ?Open_SetCompleted@COpenCallbackConsole@@UAEJPB_K0@Z ; COpenCallbackConsole::Open_SetCompleted(unsigned __int64 const *,unsigned __int64 const *)
.rdata:00005840                 dd offset ?Open_Finished@COpenCallbackConsole@@UAEJXZ ; COpenCallbackConsole::Open_Finished(void)
.rdata:00005844                 dd offset ?Open_CryptoGetTextPassword@COpenCallbackConsole@@UAEJPAPA_W@Z ; COpenCallbackConsole::Open_CryptoGetTextPassword(wchar_t * *)
.rdata:00005844 _rdata          ends
.rdata:00005844
.xdata$x:00005848 ; ===========================================================================
.xdata$x:00005848
.xdata$x:00005848 ; Segment type: Pure data
.xdata$x:00005848 ; Segment permissions: Read
.xdata$x:00005848 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00005848                 assume cs:_xdata$x
.xdata$x:00005848                 ;org 5848h
.xdata$x:00005848 ; COMDAT (pick associative to section at 5758)
.xdata$x:00005848 __unwindtable$??0COpenCallbackConsole@@QAE@XZ db 0FFh
.xdata$x:00005848                                         ; DATA XREF: .xdata$x:00005858o
.xdata$x:00005849                 db 0FFh
.xdata$x:0000584A                 db 0FFh
.xdata$x:0000584B                 db 0FFh
.xdata$x:0000584C                 dd offset __unwindfunclet$??0COpenCallbackConsole@@QAE@XZ$0
.xdata$x:00005850 __ehfuncinfo$??0COpenCallbackConsole@@QAE@XZ db  22h ; "
.xdata$x:00005850                                         ; DATA XREF: __ehhandler$??0COpenCallbackConsole@@QAE@XZ+11o
.xdata$x:00005851                 db    5
.xdata$x:00005852                 db  93h ; ô
.xdata$x:00005853                 db  19h
.xdata$x:00005854                 db    1
.xdata$x:00005855                 db    0
.xdata$x:00005856                 db    0
.xdata$x:00005857                 db    0
.xdata$x:00005858                 dd offset __unwindtable$??0COpenCallbackConsole@@QAE@XZ
.xdata$x:0000585C                 db    0
.xdata$x:0000585D                 db    0
.xdata$x:0000585E                 db    0
.xdata$x:0000585F                 db    0
.xdata$x:00005860                 db    0
.xdata$x:00005861                 db    0
.xdata$x:00005862                 db    0
.xdata$x:00005863                 db    0
.xdata$x:00005864                 db    0
.xdata$x:00005865                 db    0
.xdata$x:00005866                 db    0
.xdata$x:00005867                 db    0
.xdata$x:00005868                 db    0
.xdata$x:00005869                 db    0
.xdata$x:0000586A                 db    0
.xdata$x:0000586B                 db    0
.xdata$x:0000586C                 db    0
.xdata$x:0000586D                 db    0
.xdata$x:0000586E                 db    0
.xdata$x:0000586F                 db    0
.xdata$x:00005870                 db    1
.xdata$x:00005871                 db    0
.xdata$x:00005872                 db    0
.xdata$x:00005873                 db    0
.xdata$x:00005873 _xdata$x        ends
.xdata$x:00005873
.rdata$r:00005874 ; ===========================================================================
.rdata$r:00005874
.rdata$r:00005874 ; Segment type: Pure data
.rdata$r:00005874 ; Segment permissions: Read
.rdata$r:00005874 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005874                 assume cs:_rdata$r
.rdata$r:00005874                 ;org 5874h
.rdata$r:00005874 ; COMDAT (pick any)
.rdata$r:00005874                 public ??_R4COpenCallbackConsole@@6B@
.rdata$r:00005874 ; const COpenCallbackConsole::`RTTI Complete Object Locator'
.rdata$r:00005874 ??_R4COpenCallbackConsole@@6B@ db    0  ; DATA XREF: .rdata:00005830o
.rdata$r:00005875                 db    0
.rdata$r:00005876                 db    0
.rdata$r:00005877                 db    0
.rdata$r:00005878                 db    0
.rdata$r:00005879                 db    0
.rdata$r:0000587A                 db    0
.rdata$r:0000587B                 db    0
.rdata$r:0000587C                 db    0
.rdata$r:0000587D                 db    0
.rdata$r:0000587E                 db    0
.rdata$r:0000587F                 db    0
.rdata$r:00005880                 dd offset ??_R0?AVCOpenCallbackConsole@@@8 ; COpenCallbackConsole `RTTI Type Descriptor'
.rdata$r:00005884                 dd offset ??_R3COpenCallbackConsole@@8 ; COpenCallbackConsole::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005884 _rdata$r        ends
.rdata$r:00005884
.data:00005888 ; ===========================================================================
.data:00005888
.data:00005888 ; Segment type: Pure data
.data:00005888 ; Segment permissions: Read/Write
.data:00005888 _data           segment dword public 'DATA' use32
.data:00005888                 assume cs:_data
.data:00005888                 ;org 5888h
.data:00005888 ; COMDAT (pick any)
.data:00005888                 public ??_R0?AVCOpenCallbackConsole@@@8
.data:00005888 ; class COpenCallbackConsole `RTTI Type Descriptor'
.data:00005888 ??_R0?AVCOpenCallbackConsole@@@8 dd offset ??_7type_info@@6B@
.data:00005888                                         ; DATA XREF: .rdata$r:00005880o
.data:00005888                                         ; .rdata$r:COpenCallbackConsole::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00005888                                         ; const type_info::`vftable'
.data:0000588C                 align 10h
.data:00005890 a_?avcopencallb db '.?AVCOpenCallbackConsole@@',0
.data:000058AB                 align 4
.data:000058AB _data           ends
.data:000058AB
.rdata$r:000058AC ; ===========================================================================
.rdata$r:000058AC
.rdata$r:000058AC ; Segment type: Pure data
.rdata$r:000058AC ; Segment permissions: Read
.rdata$r:000058AC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000058AC                 assume cs:_rdata$r
.rdata$r:000058AC                 ;org 58ACh
.rdata$r:000058AC ; COMDAT (pick any)
.rdata$r:000058AC                 public ??_R3COpenCallbackConsole@@8
.rdata$r:000058AC ; COpenCallbackConsole::`RTTI Class Hierarchy Descriptor'
.rdata$r:000058AC ??_R3COpenCallbackConsole@@8 db    0    ; DATA XREF: .rdata$r:00005884o
.rdata$r:000058AC                                         ; .rdata$r:000058E0o ...
.rdata$r:000058AD                 db    0
.rdata$r:000058AE                 db    0
.rdata$r:000058AF                 db    0
.rdata$r:000058B0                 db    0
.rdata$r:000058B1                 db    0
.rdata$r:000058B2                 db    0
.rdata$r:000058B3                 db    0
.rdata$r:000058B4                 db    2
.rdata$r:000058B5                 db    0
.rdata$r:000058B6                 db    0
.rdata$r:000058B7                 db    0
.rdata$r:000058B8                 dd offset ??_R2COpenCallbackConsole@@8 ; COpenCallbackConsole::`RTTI Base Class Array'
.rdata$r:000058B8 _rdata$r        ends
.rdata$r:000058B8
.rdata$r:000058BC ; ===========================================================================
.rdata$r:000058BC
.rdata$r:000058BC ; Segment type: Pure data
.rdata$r:000058BC ; Segment permissions: Read
.rdata$r:000058BC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000058BC                 assume cs:_rdata$r
.rdata$r:000058BC                 ;org 58BCh
.rdata$r:000058BC ; COMDAT (pick any)
.rdata$r:000058BC                 public ??_R2COpenCallbackConsole@@8
.rdata$r:000058BC ; COpenCallbackConsole::`RTTI Base Class Array'
.rdata$r:000058BC ??_R2COpenCallbackConsole@@8 dd offset ??_R1A@?0A@EA@COpenCallbackConsole@@8
.rdata$r:000058BC                                         ; DATA XREF: .rdata$r:000058B8o
.rdata$r:000058BC                                         ; COpenCallbackConsole::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000058C0                 dd offset ??_R1A@?0A@EA@IOpenCallbackUI@@8 ; IOpenCallbackUI::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000058C4                 db    0
.rdata$r:000058C5                 align 4
.rdata$r:000058C5 _rdata$r        ends
.rdata$r:000058C5
.rdata$r:000058C8 ; ===========================================================================
.rdata$r:000058C8
.rdata$r:000058C8 ; Segment type: Pure data
.rdata$r:000058C8 ; Segment permissions: Read
.rdata$r:000058C8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000058C8                 assume cs:_rdata$r
.rdata$r:000058C8                 ;org 58C8h
.rdata$r:000058C8 ; COMDAT (pick any)
.rdata$r:000058C8                 public ??_R1A@?0A@EA@COpenCallbackConsole@@8
.rdata$r:000058C8 ; COpenCallbackConsole::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000058C8 ??_R1A@?0A@EA@COpenCallbackConsole@@8 dd offset ??_R0?AVCOpenCallbackConsole@@@8
.rdata$r:000058C8                                         ; DATA XREF: .rdata$r:COpenCallbackConsole::`RTTI Base Class Array'o
.rdata$r:000058C8                                         ; COpenCallbackConsole `RTTI Type Descriptor'
.rdata$r:000058CC                 db    1
.rdata$r:000058CD                 db    0
.rdata$r:000058CE                 db    0
.rdata$r:000058CF                 db    0
.rdata$r:000058D0                 db    0
.rdata$r:000058D1                 db    0
.rdata$r:000058D2                 db    0
.rdata$r:000058D3                 db    0
.rdata$r:000058D4                 db 0FFh
.rdata$r:000058D5                 db 0FFh
.rdata$r:000058D6                 db 0FFh
.rdata$r:000058D7                 db 0FFh
.rdata$r:000058D8                 db    0
.rdata$r:000058D9                 db    0
.rdata$r:000058DA                 db    0
.rdata$r:000058DB                 db    0
.rdata$r:000058DC                 db  40h ; @
.rdata$r:000058DD                 db    0
.rdata$r:000058DE                 db    0
.rdata$r:000058DF                 db    0
.rdata$r:000058E0                 dd offset ??_R3COpenCallbackConsole@@8 ; COpenCallbackConsole::`RTTI Class Hierarchy Descriptor'
.rdata$r:000058E0 _rdata$r        ends
.rdata$r:000058E0
.rdata$r:000058E4 ; ===========================================================================
.rdata$r:000058E4
.rdata$r:000058E4 ; Segment type: Pure data
.rdata$r:000058E4 ; Segment permissions: Read
.rdata$r:000058E4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000058E4                 assume cs:_rdata$r
.rdata$r:000058E4                 ;org 58E4h
.rdata$r:000058E4 ; COMDAT (pick any)
.rdata$r:000058E4                 public ??_R1A@?0A@EA@IOpenCallbackUI@@8
.rdata$r:000058E4 ; IOpenCallbackUI::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000058E4 ??_R1A@?0A@EA@IOpenCallbackUI@@8 dd offset ??_R0?AUIOpenCallbackUI@@@8
.rdata$r:000058E4                                         ; DATA XREF: .rdata$r:000058C0o
.rdata$r:000058E4                                         ; .rdata$r:IOpenCallbackUI::`RTTI Base Class Array'o
.rdata$r:000058E4                                         ; IOpenCallbackUI `RTTI Type Descriptor'
.rdata$r:000058E8                 align 10h
.rdata$r:000058F0                 db 0FFh
.rdata$r:000058F1                 db 0FFh
.rdata$r:000058F2                 db 0FFh
.rdata$r:000058F3                 db 0FFh
.rdata$r:000058F4                 db    0
.rdata$r:000058F5                 db    0
.rdata$r:000058F6                 db    0
.rdata$r:000058F7                 db    0
.rdata$r:000058F8                 db  40h ; @
.rdata$r:000058F9                 db    0
.rdata$r:000058FA                 db    0
.rdata$r:000058FB                 db    0
.rdata$r:000058FC                 dd offset ??_R3IOpenCallbackUI@@8 ; IOpenCallbackUI::`RTTI Class Hierarchy Descriptor'
.rdata$r:000058FC _rdata$r        ends
.rdata$r:000058FC
.data:00005900 ; ===========================================================================
.data:00005900
.data:00005900 ; Segment type: Pure data
.data:00005900 ; Segment permissions: Read/Write
.data:00005900 _data           segment dword public 'DATA' use32
.data:00005900                 assume cs:_data
.data:00005900                 ;org 5900h
.data:00005900 ; COMDAT (pick any)
.data:00005900                 public ??_R0?AUIOpenCallbackUI@@@8
.data:00005900 ; struct IOpenCallbackUI `RTTI Type Descriptor'
.data:00005900 ??_R0?AUIOpenCallbackUI@@@8 dd offset ??_7type_info@@6B@
.data:00005900                                         ; DATA XREF: .rdata$r:IOpenCallbackUI::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00005900                                         ; .rdata$r:00005CFCo ...
.data:00005900                                         ; const type_info::`vftable'
.data:00005904                 align 8
.data:00005908 a_?auiopencallb db '.?AUIOpenCallbackUI@@',0
.data:0000591E                 align 10h
.data:0000591E _data           ends
.data:0000591E
.rdata$r:00005920 ; ===========================================================================
.rdata$r:00005920
.rdata$r:00005920 ; Segment type: Pure data
.rdata$r:00005920 ; Segment permissions: Read
.rdata$r:00005920 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005920                 assume cs:_rdata$r
.rdata$r:00005920                 ;org 5920h
.rdata$r:00005920 ; COMDAT (pick any)
.rdata$r:00005920                 public ??_R3IOpenCallbackUI@@8
.rdata$r:00005920 ; IOpenCallbackUI::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005920 ??_R3IOpenCallbackUI@@8 db    0         ; DATA XREF: .rdata$r:000058FCo
.rdata$r:00005920                                         ; .rdata$r:00005D00o ...
.rdata$r:00005921                 db    0
.rdata$r:00005922                 db    0
.rdata$r:00005923                 db    0
.rdata$r:00005924                 db    0
.rdata$r:00005925                 db    0
.rdata$r:00005926                 db    0
.rdata$r:00005927                 db    0
.rdata$r:00005928                 db    1
.rdata$r:00005929                 db    0
.rdata$r:0000592A                 db    0
.rdata$r:0000592B                 db    0
.rdata$r:0000592C                 dd offset ??_R2IOpenCallbackUI@@8 ; IOpenCallbackUI::`RTTI Base Class Array'
.rdata$r:0000592C _rdata$r        ends
.rdata$r:0000592C
.rdata$r:00005930 ; ===========================================================================
.rdata$r:00005930
.rdata$r:00005930 ; Segment type: Pure data
.rdata$r:00005930 ; Segment permissions: Read
.rdata$r:00005930 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005930                 assume cs:_rdata$r
.rdata$r:00005930                 ;org 5930h
.rdata$r:00005930 ; COMDAT (pick any)
.rdata$r:00005930                 public ??_R2IOpenCallbackUI@@8
.rdata$r:00005930 ; IOpenCallbackUI::`RTTI Base Class Array'
.rdata$r:00005930 ??_R2IOpenCallbackUI@@8 dd offset ??_R1A@?0A@EA@IOpenCallbackUI@@8
.rdata$r:00005930                                         ; DATA XREF: .rdata$r:0000592Co
.rdata$r:00005930                                         ; IOpenCallbackUI::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005934                 db    0
.rdata$r:00005935                 align 4
.rdata$r:00005935 _rdata$r        ends
.rdata$r:00005935
.text:00005938 ; ===========================================================================
.text:00005938
.text:00005938 ; Segment type: Pure code
.text:00005938 ; Segment permissions: Read/Execute
.text:00005938 _text           segment para public 'CODE' use32
.text:00005938                 assume cs:_text
.text:00005938                 ;org 5938h
.text:00005938 ; COMDAT (pick any)
.text:00005938                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005938
.text:00005938 ; =============== S U B R O U T I N E =======================================
.text:00005938
.text:00005938 ; Attributes: bp-based frame
.text:00005938
.text:00005938 ; public: __thiscall CPercentPrinter::CPercentPrinter(unsigned int)
.text:00005938                 public ??0CPercentPrinter@@QAE@I@Z
.text:00005938 ??0CPercentPrinter@@QAE@I@Z proc near   ; CODE XREF: COpenCallbackConsole::COpenCallbackConsole(void)+49p
.text:00005938                                         ; CCallbackConsoleBase::CCallbackConsoleBase(void)+35p ...
.text:00005938
.text:00005938 var_10          = dword ptr -10h
.text:00005938 var_C           = dword ptr -0Ch
.text:00005938 var_4           = dword ptr -4
.text:00005938 arg_0           = dword ptr  8
.text:00005938
.text:00005938                 push    ebp
.text:00005939                 mov     ebp, esp
.text:0000593B                 push    0FFFFFFFFh
.text:0000593D                 push    offset __ehhandler$??0CPercentPrinter@@QAE@I@Z
.text:00005942                 mov     eax, large fs:0
.text:00005948                 push    eax
.text:00005949                 push    ecx
.text:0000594A                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00005951                 mov     eax, dword ptr ds:___security_cookie
.text:00005956                 xor     eax, ebp
.text:00005958                 push    eax
.text:00005959                 lea     eax, [ebp+var_C]
.text:0000595C                 mov     large fs:0, eax
.text:00005962                 mov     [ebp+var_10], ecx
.text:00005965                 mov     ecx, [ebp+var_10] ; this
.text:00005968                 call    ??0CPercentPrinterState@@QAE@XZ ; CPercentPrinterState::CPercentPrinterState(void)
.text:0000596D                 mov     [ebp+var_4], 0
.text:00005974                 mov     eax, [ebp+var_10]
.text:00005977                 mov     ecx, [ebp+arg_0]
.text:0000597A                 mov     [eax+30h], ecx
.text:0000597D                 mov     edx, [ebp+var_10]
.text:00005980                 mov     dword ptr [edx+34h], 0
.text:00005987                 mov     ecx, [ebp+var_10]
.text:0000598A                 add     ecx, 38h ; '8'
.text:0000598D                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:00005992                 mov     byte ptr [ebp+var_4], 1
.text:00005996                 mov     ecx, [ebp+var_10]
.text:00005999                 add     ecx, 44h ; 'D'
.text:0000599C                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:000059A1                 mov     byte ptr [ebp+var_4], 2
.text:000059A5                 mov     ecx, [ebp+var_10]
.text:000059A8                 add     ecx, 50h ; 'P'
.text:000059AB                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:000059B0                 mov     byte ptr [ebp+var_4], 3
.text:000059B4                 mov     ecx, [ebp+var_10]
.text:000059B7                 add     ecx, 5Ch ; '\'
.text:000059BA                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:000059BF                 mov     byte ptr [ebp+var_4], 4
.text:000059C3                 mov     ecx, [ebp+var_10]
.text:000059C6                 add     ecx, 68h ; 'h'  ; this
.text:000059C9                 call    ??0CPercentPrinterState@@QAE@XZ ; CPercentPrinterState::CPercentPrinterState(void)
.text:000059CE                 mov     byte ptr [ebp+var_4], 5
.text:000059D2                 mov     ecx, [ebp+var_10]
.text:000059D5                 add     ecx, 98h ; 'ÿ'
.text:000059DB                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:000059E0                 mov     eax, [ebp+var_10]
.text:000059E3                 mov     byte ptr [eax+0A8h], 1
.text:000059EA                 mov     ecx, [ebp+var_10]
.text:000059ED                 mov     dword ptr [ecx+0ACh], 4Fh ; 'O'
.text:000059F7                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000059FE                 mov     eax, [ebp+var_10]
.text:00005A01                 mov     ecx, [ebp+var_C]
.text:00005A04                 mov     large fs:0, ecx
.text:00005A0B                 pop     ecx
.text:00005A0C                 add     esp, 10h
.text:00005A0F                 cmp     ebp, esp
.text:00005A11                 call    __RTC_CheckEsp
.text:00005A16                 mov     esp, ebp
.text:00005A18                 pop     ebp
.text:00005A19                 retn    4
.text:00005A19 ??0CPercentPrinter@@QAE@I@Z endp
.text:00005A19
.text:00005A19 _text           ends
.text:00005A19
.text$x:00005A1C ; ===========================================================================
.text$x:00005A1C
.text$x:00005A1C ; Segment type: Pure code
.text$x:00005A1C ; Segment permissions: Read/Execute
.text$x:00005A1C _text$x         segment para public 'CODE' use32
.text$x:00005A1C                 assume cs:_text$x
.text$x:00005A1C                 ;org 5A1Ch
.text$x:00005A1C ; COMDAT (pick associative to section at 5938)
.text$x:00005A1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005A1C
.text$x:00005A1C ; =============== S U B R O U T I N E =======================================
.text$x:00005A1C
.text$x:00005A1C
.text$x:00005A1C __unwindfunclet$??0CPercentPrinter@@QAE@I@Z$0 proc near
.text$x:00005A1C                                         ; DATA XREF: .xdata$x:00005AA0o
.text$x:00005A1C                 mov     ecx, [ebp-10h]  ; this
.text$x:00005A1F                 jmp     ??1CPercentPrinterState@@QAE@XZ ; CPercentPrinterState::~CPercentPrinterState(void)
.text$x:00005A1F __unwindfunclet$??0CPercentPrinter@@QAE@I@Z$0 endp
.text$x:00005A1F
.text$x:00005A24
.text$x:00005A24 ; =============== S U B R O U T I N E =======================================
.text$x:00005A24
.text$x:00005A24
.text$x:00005A24 __unwindfunclet$??0CPercentPrinter@@QAE@I@Z$1 proc near
.text$x:00005A24                                         ; DATA XREF: .xdata$x:00005AA8o
.text$x:00005A24                 mov     ecx, [ebp-10h]
.text$x:00005A27                 add     ecx, 38h ; '8'  ; this
.text$x:00005A2A                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00005A2A __unwindfunclet$??0CPercentPrinter@@QAE@I@Z$1 endp
.text$x:00005A2A
.text$x:00005A2F
.text$x:00005A2F ; =============== S U B R O U T I N E =======================================
.text$x:00005A2F
.text$x:00005A2F
.text$x:00005A2F __unwindfunclet$??0CPercentPrinter@@QAE@I@Z$2 proc near
.text$x:00005A2F                                         ; DATA XREF: .xdata$x:00005AB0o
.text$x:00005A2F                 mov     ecx, [ebp-10h]
.text$x:00005A32                 add     ecx, 44h ; 'D'  ; this
.text$x:00005A35                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00005A35 __unwindfunclet$??0CPercentPrinter@@QAE@I@Z$2 endp
.text$x:00005A35
.text$x:00005A3A
.text$x:00005A3A ; =============== S U B R O U T I N E =======================================
.text$x:00005A3A
.text$x:00005A3A
.text$x:00005A3A __unwindfunclet$??0CPercentPrinter@@QAE@I@Z$3 proc near
.text$x:00005A3A                                         ; DATA XREF: .xdata$x:00005AB8o
.text$x:00005A3A                 mov     ecx, [ebp-10h]
.text$x:00005A3D                 add     ecx, 50h ; 'P'  ; this
.text$x:00005A40                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00005A40 __unwindfunclet$??0CPercentPrinter@@QAE@I@Z$3 endp
.text$x:00005A40
.text$x:00005A45
.text$x:00005A45 ; =============== S U B R O U T I N E =======================================
.text$x:00005A45
.text$x:00005A45
.text$x:00005A45 __unwindfunclet$??0CPercentPrinter@@QAE@I@Z$4 proc near
.text$x:00005A45                                         ; DATA XREF: .xdata$x:00005AC0o
.text$x:00005A45                 mov     ecx, [ebp-10h]
.text$x:00005A48                 add     ecx, 5Ch ; '\'  ; this
.text$x:00005A4B                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00005A4B __unwindfunclet$??0CPercentPrinter@@QAE@I@Z$4 endp
.text$x:00005A4B
.text$x:00005A50
.text$x:00005A50 ; =============== S U B R O U T I N E =======================================
.text$x:00005A50
.text$x:00005A50
.text$x:00005A50 __unwindfunclet$??0CPercentPrinter@@QAE@I@Z$5 proc near
.text$x:00005A50                                         ; DATA XREF: .xdata$x:00005AC8o
.text$x:00005A50                 mov     ecx, [ebp-10h]
.text$x:00005A53                 add     ecx, 68h ; 'h'  ; this
.text$x:00005A56                 jmp     ??1CPercentPrinterState@@QAE@XZ ; CPercentPrinterState::~CPercentPrinterState(void)
.text$x:00005A56 __unwindfunclet$??0CPercentPrinter@@QAE@I@Z$5 endp
.text$x:00005A56
.text$x:00005A5B
.text$x:00005A5B ; =============== S U B R O U T I N E =======================================
.text$x:00005A5B
.text$x:00005A5B
.text$x:00005A5B __ehhandler$??0CPercentPrinter@@QAE@I@Z proc near
.text$x:00005A5B                                         ; DATA XREF: CPercentPrinter::CPercentPrinter(uint)+5o
.text$x:00005A5B
.text$x:00005A5B arg_4           = dword ptr  8
.text$x:00005A5B
.text$x:00005A5B                 mov     edx, [esp+arg_4]
.text$x:00005A5F                 lea     eax, [edx+0Ch]
.text$x:00005A62                 mov     ecx, [edx-8]
.text$x:00005A65                 xor     ecx, eax
.text$x:00005A67                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005A6C                 mov     eax, offset __ehfuncinfo$??0CPercentPrinter@@QAE@I@Z
.text$x:00005A71                 jmp     ___CxxFrameHandler3
.text$x:00005A71 __ehhandler$??0CPercentPrinter@@QAE@I@Z endp
.text$x:00005A71
.text$x:00005A71 ; ---------------------------------------------------------------------------
.text$x:00005A76                 align 4
.text$x:00005A76 _text$x         ends
.text$x:00005A76
.xdata$x:00005A78 ; ===========================================================================
.xdata$x:00005A78
.xdata$x:00005A78 ; Segment type: Pure data
.xdata$x:00005A78 ; Segment permissions: Read
.xdata$x:00005A78 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00005A78                 assume cs:_xdata$x
.xdata$x:00005A78                 ;org 5A78h
.xdata$x:00005A78 ; COMDAT (pick associative to section at 5938)
.xdata$x:00005A78 __ehfuncinfo$??0CPercentPrinter@@QAE@I@Z db  22h ; "
.xdata$x:00005A78                                         ; DATA XREF: __ehhandler$??0CPercentPrinter@@QAE@I@Z+11o
.xdata$x:00005A79                 db    5
.xdata$x:00005A7A                 db  93h ; ô
.xdata$x:00005A7B                 db  19h
.xdata$x:00005A7C                 db    6
.xdata$x:00005A7D                 db    0
.xdata$x:00005A7E                 db    0
.xdata$x:00005A7F                 db    0
.xdata$x:00005A80                 dd offset __unwindtable$??0CPercentPrinter@@QAE@I@Z
.xdata$x:00005A84                 db    0
.xdata$x:00005A85                 db    0
.xdata$x:00005A86                 db    0
.xdata$x:00005A87                 db    0
.xdata$x:00005A88                 db    0
.xdata$x:00005A89                 db    0
.xdata$x:00005A8A                 db    0
.xdata$x:00005A8B                 db    0
.xdata$x:00005A8C                 db    0
.xdata$x:00005A8D                 db    0
.xdata$x:00005A8E                 db    0
.xdata$x:00005A8F                 db    0
.xdata$x:00005A90                 db    0
.xdata$x:00005A91                 db    0
.xdata$x:00005A92                 db    0
.xdata$x:00005A93                 db    0
.xdata$x:00005A94                 db    0
.xdata$x:00005A95                 db    0
.xdata$x:00005A96                 db    0
.xdata$x:00005A97                 db    0
.xdata$x:00005A98                 db    1
.xdata$x:00005A99                 db    0
.xdata$x:00005A9A                 db    0
.xdata$x:00005A9B                 db    0
.xdata$x:00005A9C __unwindtable$??0CPercentPrinter@@QAE@I@Z db 0FFh
.xdata$x:00005A9C                                         ; DATA XREF: .xdata$x:00005A80o
.xdata$x:00005A9D                 db 0FFh
.xdata$x:00005A9E                 db 0FFh
.xdata$x:00005A9F                 db 0FFh
.xdata$x:00005AA0                 dd offset __unwindfunclet$??0CPercentPrinter@@QAE@I@Z$0
.xdata$x:00005AA4                 align 8
.xdata$x:00005AA8                 dd offset __unwindfunclet$??0CPercentPrinter@@QAE@I@Z$1
.xdata$x:00005AAC                 db    1
.xdata$x:00005AAD                 db    0
.xdata$x:00005AAE                 db    0
.xdata$x:00005AAF                 db    0
.xdata$x:00005AB0                 dd offset __unwindfunclet$??0CPercentPrinter@@QAE@I@Z$2
.xdata$x:00005AB4                 db    2
.xdata$x:00005AB5                 db    0
.xdata$x:00005AB6                 db    0
.xdata$x:00005AB7                 db    0
.xdata$x:00005AB8                 dd offset __unwindfunclet$??0CPercentPrinter@@QAE@I@Z$3
.xdata$x:00005ABC                 db    3
.xdata$x:00005ABD                 db    0
.xdata$x:00005ABE                 db    0
.xdata$x:00005ABF                 db    0
.xdata$x:00005AC0                 dd offset __unwindfunclet$??0CPercentPrinter@@QAE@I@Z$4
.xdata$x:00005AC4                 db    4
.xdata$x:00005AC5                 db    0
.xdata$x:00005AC6                 db    0
.xdata$x:00005AC7                 db    0
.xdata$x:00005AC8                 dd offset __unwindfunclet$??0CPercentPrinter@@QAE@I@Z$5
.xdata$x:00005AC8 _xdata$x        ends
.xdata$x:00005AC8
.text:00005ACC ; ===========================================================================
.text:00005ACC
.text:00005ACC ; Segment type: Pure code
.text:00005ACC ; Segment permissions: Read/Execute
.text:00005ACC _text           segment para public 'CODE' use32
.text:00005ACC                 assume cs:_text
.text:00005ACC                 ;org 5ACCh
.text:00005ACC ; COMDAT (pick any)
.text:00005ACC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005ACC
.text:00005ACC ; =============== S U B R O U T I N E =======================================
.text:00005ACC
.text:00005ACC ; Attributes: bp-based frame
.text:00005ACC
.text:00005ACC ; _DWORD __thiscall CPercentPrinterState::CPercentPrinterState(CPercentPrinterState *__hidden this)
.text:00005ACC                 public ??0CPercentPrinterState@@QAE@XZ
.text:00005ACC ??0CPercentPrinterState@@QAE@XZ proc near
.text:00005ACC                                         ; CODE XREF: CPercentPrinter::CPercentPrinter(uint)+30p
.text:00005ACC                                         ; CPercentPrinter::CPercentPrinter(uint)+91p
.text:00005ACC
.text:00005ACC var_10          = dword ptr -10h
.text:00005ACC var_C           = dword ptr -0Ch
.text:00005ACC var_4           = dword ptr -4
.text:00005ACC
.text:00005ACC                 push    ebp
.text:00005ACD                 mov     ebp, esp
.text:00005ACF                 push    0FFFFFFFFh
.text:00005AD1                 push    offset __ehhandler$??0CPercentPrinterState@@QAE@XZ
.text:00005AD6                 mov     eax, large fs:0
.text:00005ADC                 push    eax
.text:00005ADD                 push    ecx
.text:00005ADE                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00005AE5                 mov     eax, dword ptr ds:___security_cookie
.text:00005AEA                 xor     eax, ebp
.text:00005AEC                 push    eax
.text:00005AED                 lea     eax, [ebp+var_C]
.text:00005AF0                 mov     large fs:0, eax
.text:00005AF6                 mov     [ebp+var_10], ecx
.text:00005AF9                 mov     eax, [ebp+var_10]
.text:00005AFC                 mov     dword ptr [eax], 0
.text:00005B02                 mov     dword ptr [eax+4], 0
.text:00005B09                 mov     ecx, [ebp+var_10]
.text:00005B0C                 mov     dword ptr [ecx+8], 0FFFFFFFFh
.text:00005B13                 mov     dword ptr [ecx+0Ch], 0FFFFFFFFh
.text:00005B1A                 mov     edx, [ebp+var_10]
.text:00005B1D                 mov     dword ptr [edx+10h], 0
.text:00005B24                 mov     dword ptr [edx+14h], 0
.text:00005B2B                 mov     ecx, [ebp+var_10]
.text:00005B2E                 add     ecx, 18h
.text:00005B31                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:00005B36                 mov     [ebp+var_4], 0
.text:00005B3D                 mov     ecx, [ebp+var_10]
.text:00005B40                 add     ecx, 24h ; '$'
.text:00005B43                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00005B48                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00005B4F                 mov     eax, [ebp+var_10]
.text:00005B52                 mov     ecx, [ebp+var_C]
.text:00005B55                 mov     large fs:0, ecx
.text:00005B5C                 pop     ecx
.text:00005B5D                 add     esp, 10h
.text:00005B60                 cmp     ebp, esp
.text:00005B62                 call    __RTC_CheckEsp
.text:00005B67                 mov     esp, ebp
.text:00005B69                 pop     ebp
.text:00005B6A                 retn
.text:00005B6A ??0CPercentPrinterState@@QAE@XZ endp
.text:00005B6A
.text:00005B6A ; ---------------------------------------------------------------------------
.text:00005B6B                 align 4
.text:00005B6B _text           ends
.text:00005B6B
.text$x:00005B6C ; ===========================================================================
.text$x:00005B6C
.text$x:00005B6C ; Segment type: Pure code
.text$x:00005B6C ; Segment permissions: Read/Execute
.text$x:00005B6C _text$x         segment para public 'CODE' use32
.text$x:00005B6C                 assume cs:_text$x
.text$x:00005B6C                 ;org 5B6Ch
.text$x:00005B6C ; COMDAT (pick associative to section at 5ACC)
.text$x:00005B6C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005B6C
.text$x:00005B6C ; =============== S U B R O U T I N E =======================================
.text$x:00005B6C
.text$x:00005B6C
.text$x:00005B6C __unwindfunclet$??0CPercentPrinterState@@QAE@XZ$0 proc near
.text$x:00005B6C                                         ; DATA XREF: .xdata$x:00005B98o
.text$x:00005B6C                 mov     ecx, [ebp-10h]
.text$x:00005B6F                 add     ecx, 18h        ; this
.text$x:00005B72                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00005B72 __unwindfunclet$??0CPercentPrinterState@@QAE@XZ$0 endp
.text$x:00005B72
.text$x:00005B77
.text$x:00005B77 ; =============== S U B R O U T I N E =======================================
.text$x:00005B77
.text$x:00005B77
.text$x:00005B77 __ehhandler$??0CPercentPrinterState@@QAE@XZ proc near
.text$x:00005B77                                         ; DATA XREF: CPercentPrinterState::CPercentPrinterState(void)+5o
.text$x:00005B77
.text$x:00005B77 arg_4           = dword ptr  8
.text$x:00005B77
.text$x:00005B77                 mov     edx, [esp+arg_4]
.text$x:00005B7B                 lea     eax, [edx+0Ch]
.text$x:00005B7E                 mov     ecx, [edx-8]
.text$x:00005B81                 xor     ecx, eax
.text$x:00005B83                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005B88                 mov     eax, offset __ehfuncinfo$??0CPercentPrinterState@@QAE@XZ
.text$x:00005B8D                 jmp     ___CxxFrameHandler3
.text$x:00005B8D __ehhandler$??0CPercentPrinterState@@QAE@XZ endp
.text$x:00005B8D
.text$x:00005B8D ; ---------------------------------------------------------------------------
.text$x:00005B92                 align 4
.text$x:00005B92 _text$x         ends
.text$x:00005B92
.xdata$x:00005B94 ; ===========================================================================
.xdata$x:00005B94
.xdata$x:00005B94 ; Segment type: Pure data
.xdata$x:00005B94 ; Segment permissions: Read
.xdata$x:00005B94 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00005B94                 assume cs:_xdata$x
.xdata$x:00005B94                 ;org 5B94h
.xdata$x:00005B94 ; COMDAT (pick associative to section at 5ACC)
.xdata$x:00005B94 __unwindtable$??0CPercentPrinterState@@QAE@XZ db 0FFh
.xdata$x:00005B94                                         ; DATA XREF: .xdata$x:00005BA4o
.xdata$x:00005B95                 db 0FFh
.xdata$x:00005B96                 db 0FFh
.xdata$x:00005B97                 db 0FFh
.xdata$x:00005B98                 dd offset __unwindfunclet$??0CPercentPrinterState@@QAE@XZ$0
.xdata$x:00005B9C __ehfuncinfo$??0CPercentPrinterState@@QAE@XZ db  22h ; "
.xdata$x:00005B9C                                         ; DATA XREF: __ehhandler$??0CPercentPrinterState@@QAE@XZ+11o
.xdata$x:00005B9D                 db    5
.xdata$x:00005B9E                 db  93h ; ô
.xdata$x:00005B9F                 db  19h
.xdata$x:00005BA0                 db    1
.xdata$x:00005BA1                 db    0
.xdata$x:00005BA2                 db    0
.xdata$x:00005BA3                 db    0
.xdata$x:00005BA4                 dd offset __unwindtable$??0CPercentPrinterState@@QAE@XZ
.xdata$x:00005BA8                 db    0
.xdata$x:00005BA9                 db    0
.xdata$x:00005BAA                 db    0
.xdata$x:00005BAB                 db    0
.xdata$x:00005BAC                 db    0
.xdata$x:00005BAD                 db    0
.xdata$x:00005BAE                 db    0
.xdata$x:00005BAF                 db    0
.xdata$x:00005BB0                 db    0
.xdata$x:00005BB1                 db    0
.xdata$x:00005BB2                 db    0
.xdata$x:00005BB3                 db    0
.xdata$x:00005BB4                 db    0
.xdata$x:00005BB5                 db    0
.xdata$x:00005BB6                 db    0
.xdata$x:00005BB7                 db    0
.xdata$x:00005BB8                 db    0
.xdata$x:00005BB9                 db    0
.xdata$x:00005BBA                 db    0
.xdata$x:00005BBB                 db    0
.xdata$x:00005BBC                 db    1
.xdata$x:00005BBD                 db    0
.xdata$x:00005BBE                 db    0
.xdata$x:00005BBF                 db    0
.xdata$x:00005BBF _xdata$x        ends
.xdata$x:00005BBF
.text:00005BC0 ; ===========================================================================
.text:00005BC0
.text:00005BC0 ; Segment type: Pure code
.text:00005BC0 ; Segment permissions: Read/Execute
.text:00005BC0 _text           segment para public 'CODE' use32
.text:00005BC0                 assume cs:_text
.text:00005BC0                 ;org 5BC0h
.text:00005BC0 ; COMDAT (pick any)
.text:00005BC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005BC0
.text:00005BC0 ; =============== S U B R O U T I N E =======================================
.text:00005BC0
.text:00005BC0 ; Attributes: bp-based frame
.text:00005BC0
.text:00005BC0 ; _DWORD __thiscall CPercentPrinterState::~CPercentPrinterState(CPercentPrinterState *__hidden this)
.text:00005BC0                 public ??1CPercentPrinterState@@QAE@XZ
.text:00005BC0 ??1CPercentPrinterState@@QAE@XZ proc near
.text:00005BC0                                         ; CODE XREF: __unwindfunclet$??0CPercentPrinter@@QAE@I@Z$0+3j
.text:00005BC0                                         ; __unwindfunclet$??0CPercentPrinter@@QAE@I@Z$5+6j
.text:00005BC0
.text:00005BC0 var_10          = dword ptr -10h
.text:00005BC0 var_C           = dword ptr -0Ch
.text:00005BC0 var_4           = dword ptr -4
.text:00005BC0
.text:00005BC0                 push    ebp
.text:00005BC1                 mov     ebp, esp
.text:00005BC3                 push    0FFFFFFFFh
.text:00005BC5                 push    offset __ehhandler$??1CPercentPrinterState@@QAE@XZ
.text:00005BCA                 mov     eax, large fs:0
.text:00005BD0                 push    eax
.text:00005BD1                 push    ecx
.text:00005BD2                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00005BD9                 mov     eax, dword ptr ds:___security_cookie
.text:00005BDE                 xor     eax, ebp
.text:00005BE0                 push    eax
.text:00005BE1                 lea     eax, [ebp+var_C]
.text:00005BE4                 mov     large fs:0, eax
.text:00005BEA                 mov     [ebp+var_10], ecx
.text:00005BED                 mov     [ebp+var_4], 0
.text:00005BF4                 mov     ecx, [ebp+var_10]
.text:00005BF7                 add     ecx, 24h ; '$'  ; this
.text:00005BFA                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00005BFF                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00005C06                 mov     ecx, [ebp+var_10]
.text:00005C09                 add     ecx, 18h        ; this
.text:00005C0C                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00005C11                 mov     ecx, [ebp+var_C]
.text:00005C14                 mov     large fs:0, ecx
.text:00005C1B                 pop     ecx
.text:00005C1C                 add     esp, 10h
.text:00005C1F                 cmp     ebp, esp
.text:00005C21                 call    __RTC_CheckEsp
.text:00005C26                 mov     esp, ebp
.text:00005C28                 pop     ebp
.text:00005C29                 retn
.text:00005C29 ??1CPercentPrinterState@@QAE@XZ endp
.text:00005C29
.text:00005C29 ; ---------------------------------------------------------------------------
.text:00005C2A                 align 4
.text:00005C2A _text           ends
.text:00005C2A
.text$x:00005C2C ; ===========================================================================
.text$x:00005C2C
.text$x:00005C2C ; Segment type: Pure code
.text$x:00005C2C ; Segment permissions: Read/Execute
.text$x:00005C2C _text$x         segment para public 'CODE' use32
.text$x:00005C2C                 assume cs:_text$x
.text$x:00005C2C                 ;org 5C2Ch
.text$x:00005C2C ; COMDAT (pick associative to section at 5BC0)
.text$x:00005C2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005C2C
.text$x:00005C2C ; =============== S U B R O U T I N E =======================================
.text$x:00005C2C
.text$x:00005C2C
.text$x:00005C2C __unwindfunclet$??1CPercentPrinterState@@QAE@XZ$0 proc near
.text$x:00005C2C                                         ; DATA XREF: .xdata$x:00005C58o
.text$x:00005C2C                 mov     ecx, [ebp-10h]
.text$x:00005C2F                 add     ecx, 18h        ; this
.text$x:00005C32                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00005C32 __unwindfunclet$??1CPercentPrinterState@@QAE@XZ$0 endp
.text$x:00005C32
.text$x:00005C37
.text$x:00005C37 ; =============== S U B R O U T I N E =======================================
.text$x:00005C37
.text$x:00005C37
.text$x:00005C37 __ehhandler$??1CPercentPrinterState@@QAE@XZ proc near
.text$x:00005C37                                         ; DATA XREF: CPercentPrinterState::~CPercentPrinterState(void)+5o
.text$x:00005C37
.text$x:00005C37 arg_4           = dword ptr  8
.text$x:00005C37
.text$x:00005C37                 mov     edx, [esp+arg_4]
.text$x:00005C3B                 lea     eax, [edx+0Ch]
.text$x:00005C3E                 mov     ecx, [edx-8]
.text$x:00005C41                 xor     ecx, eax
.text$x:00005C43                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005C48                 mov     eax, offset __ehfuncinfo$??1CPercentPrinterState@@QAE@XZ
.text$x:00005C4D                 jmp     ___CxxFrameHandler3
.text$x:00005C4D __ehhandler$??1CPercentPrinterState@@QAE@XZ endp
.text$x:00005C4D
.text$x:00005C4D ; ---------------------------------------------------------------------------
.text$x:00005C52                 align 4
.text$x:00005C52 _text$x         ends
.text$x:00005C52
.xdata$x:00005C54 ; ===========================================================================
.xdata$x:00005C54
.xdata$x:00005C54 ; Segment type: Pure data
.xdata$x:00005C54 ; Segment permissions: Read
.xdata$x:00005C54 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00005C54                 assume cs:_xdata$x
.xdata$x:00005C54                 ;org 5C54h
.xdata$x:00005C54 ; COMDAT (pick associative to section at 5BC0)
.xdata$x:00005C54 __unwindtable$??1CPercentPrinterState@@QAE@XZ db 0FFh
.xdata$x:00005C54                                         ; DATA XREF: .xdata$x:00005C64o
.xdata$x:00005C55                 db 0FFh
.xdata$x:00005C56                 db 0FFh
.xdata$x:00005C57                 db 0FFh
.xdata$x:00005C58                 dd offset __unwindfunclet$??1CPercentPrinterState@@QAE@XZ$0
.xdata$x:00005C5C __ehfuncinfo$??1CPercentPrinterState@@QAE@XZ db  22h ; "
.xdata$x:00005C5C                                         ; DATA XREF: __ehhandler$??1CPercentPrinterState@@QAE@XZ+11o
.xdata$x:00005C5D                 db    5
.xdata$x:00005C5E                 db  93h ; ô
.xdata$x:00005C5F                 db  19h
.xdata$x:00005C60                 db    1
.xdata$x:00005C61                 db    0
.xdata$x:00005C62                 db    0
.xdata$x:00005C63                 db    0
.xdata$x:00005C64                 dd offset __unwindtable$??1CPercentPrinterState@@QAE@XZ
.xdata$x:00005C68                 db    0
.xdata$x:00005C69                 db    0
.xdata$x:00005C6A                 db    0
.xdata$x:00005C6B                 db    0
.xdata$x:00005C6C                 db    0
.xdata$x:00005C6D                 db    0
.xdata$x:00005C6E                 db    0
.xdata$x:00005C6F                 db    0
.xdata$x:00005C70                 db    0
.xdata$x:00005C71                 db    0
.xdata$x:00005C72                 db    0
.xdata$x:00005C73                 db    0
.xdata$x:00005C74                 db    0
.xdata$x:00005C75                 db    0
.xdata$x:00005C76                 db    0
.xdata$x:00005C77                 db    0
.xdata$x:00005C78                 db    0
.xdata$x:00005C79                 db    0
.xdata$x:00005C7A                 db    0
.xdata$x:00005C7B                 db    0
.xdata$x:00005C7C                 db    1
.xdata$x:00005C7D                 db    0
.xdata$x:00005C7E                 db    0
.xdata$x:00005C7F                 db    0
.xdata$x:00005C7F _xdata$x        ends
.xdata$x:00005C7F
.text:00005C80 ; ===========================================================================
.text:00005C80
.text:00005C80 ; Segment type: Pure code
.text:00005C80 ; Segment permissions: Read/Execute
.text:00005C80 _text           segment para public 'CODE' use32
.text:00005C80                 assume cs:_text
.text:00005C80                 ;org 5C80h
.text:00005C80 ; COMDAT (pick any)
.text:00005C80                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005C80
.text:00005C80 ; =============== S U B R O U T I N E =======================================
.text:00005C80
.text:00005C80 ; Attributes: bp-based frame
.text:00005C80
.text:00005C80 ; void __thiscall COpenCallbackConsole::Init(COpenCallbackConsole *this, struct CStdOutStream *, struct CStdOutStream *, struct CStdOutStream *)
.text:00005C80                 public ?Init@COpenCallbackConsole@@QAEXPAVCStdOutStream@@00@Z
.text:00005C80 ?Init@COpenCallbackConsole@@QAEXPAVCStdOutStream@@00@Z proc near
.text:00005C80                                         ; CODE XREF: Main2(void)+1825p
.text:00005C80                                         ; CExtractCallbackConsole::Init(CStdOutStream *,CStdOutStream *,CStdOutStream *)+20p
.text:00005C80
.text:00005C80 var_4           = dword ptr -4
.text:00005C80 arg_0           = dword ptr  8
.text:00005C80 arg_4           = dword ptr  0Ch
.text:00005C80 arg_8           = dword ptr  10h
.text:00005C80
.text:00005C80                 push    ebp
.text:00005C81                 mov     ebp, esp
.text:00005C83                 push    ecx
.text:00005C84                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005C8B                 mov     [ebp+var_4], ecx
.text:00005C8E                 mov     eax, [ebp+var_4]
.text:00005C91                 mov     ecx, [ebp+arg_0]
.text:00005C94                 mov     [eax+0B8h], ecx
.text:00005C9A                 mov     edx, [ebp+var_4]
.text:00005C9D                 mov     eax, [ebp+arg_4]
.text:00005CA0                 mov     [edx+0BCh], eax
.text:00005CA6                 mov     ecx, [ebp+var_4]
.text:00005CA9                 mov     edx, [ebp+arg_8]
.text:00005CAC                 mov     [ecx+0ACh], edx
.text:00005CB2                 mov     esp, ebp
.text:00005CB4                 pop     ebp
.text:00005CB5                 retn    0Ch
.text:00005CB5 ?Init@COpenCallbackConsole@@QAEXPAVCStdOutStream@@00@Z endp
.text:00005CB5
.text:00005CB5 _text           ends
.text:00005CB5
.text:00005CB8 ; ===========================================================================
.text:00005CB8
.text:00005CB8 ; Segment type: Pure code
.text:00005CB8 ; Segment permissions: Read/Execute
.text:00005CB8 _text           segment para public 'CODE' use32
.text:00005CB8                 assume cs:_text
.text:00005CB8                 ;org 5CB8h
.text:00005CB8 ; COMDAT (pick any)
.text:00005CB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005CB8
.text:00005CB8 ; =============== S U B R O U T I N E =======================================
.text:00005CB8
.text:00005CB8 ; Attributes: bp-based frame
.text:00005CB8
.text:00005CB8 ; _DWORD __thiscall IOpenCallbackUI::IOpenCallbackUI(IOpenCallbackUI *__hidden this)
.text:00005CB8                 public ??0IOpenCallbackUI@@QAE@XZ
.text:00005CB8 ??0IOpenCallbackUI@@QAE@XZ proc near    ; CODE XREF: COpenCallbackConsole::COpenCallbackConsole(void)+30p
.text:00005CB8
.text:00005CB8 var_4           = dword ptr -4
.text:00005CB8
.text:00005CB8                 push    ebp
.text:00005CB9                 mov     ebp, esp
.text:00005CBB                 push    ecx
.text:00005CBC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005CC3                 mov     [ebp+var_4], ecx
.text:00005CC6                 mov     eax, [ebp+var_4]
.text:00005CC9                 mov     dword ptr [eax], offset ??_7IOpenCallbackUI@@6B@ ; const IOpenCallbackUI::`vftable'
.text:00005CCF                 mov     eax, [ebp+var_4]
.text:00005CD2                 mov     esp, ebp
.text:00005CD4                 pop     ebp
.text:00005CD5                 retn
.text:00005CD5 ??0IOpenCallbackUI@@QAE@XZ endp
.text:00005CD5
.text:00005CD5 ; ---------------------------------------------------------------------------
.text:00005CD6                 align 4
.text:00005CD6 _text           ends
.text:00005CD6
.rdata:00005CD8 ; ===========================================================================
.rdata:00005CD8
.rdata:00005CD8 ; Segment type: Pure data
.rdata:00005CD8 ; Segment permissions: Read
.rdata:00005CD8 _rdata          segment dword public 'DATA' use32
.rdata:00005CD8                 assume cs:_rdata
.rdata:00005CD8                 ;org 5CD8h
.rdata:00005CD8 ; COMDAT (pick largest)
.rdata:00005CD8                 dd offset ??_R4IOpenCallbackUI@@6B@ ; const IOpenCallbackUI::`RTTI Complete Object Locator'
.rdata:00005CDC                 public ??_7IOpenCallbackUI@@6B@
.rdata:00005CDC ; const IOpenCallbackUI::`vftable'
.rdata:00005CDC ??_7IOpenCallbackUI@@6B@ dd offset __purecall
.rdata:00005CDC                                         ; DATA XREF: IOpenCallbackUI::IOpenCallbackUI(void)+11o
.rdata:00005CE0                 dd offset __purecall
.rdata:00005CE4                 dd offset __purecall
.rdata:00005CE8                 dd offset __purecall
.rdata:00005CEC                 dd offset __purecall
.rdata:00005CEC _rdata          ends
.rdata:00005CEC
.rdata$r:00005CF0 ; ===========================================================================
.rdata$r:00005CF0
.rdata$r:00005CF0 ; Segment type: Pure data
.rdata$r:00005CF0 ; Segment permissions: Read
.rdata$r:00005CF0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005CF0                 assume cs:_rdata$r
.rdata$r:00005CF0                 ;org 5CF0h
.rdata$r:00005CF0 ; COMDAT (pick any)
.rdata$r:00005CF0                 public ??_R4IOpenCallbackUI@@6B@
.rdata$r:00005CF0 ; const IOpenCallbackUI::`RTTI Complete Object Locator'
.rdata$r:00005CF0 ??_R4IOpenCallbackUI@@6B@ db    0       ; DATA XREF: .rdata:00005CD8o
.rdata$r:00005CF1                 db    0
.rdata$r:00005CF2                 db    0
.rdata$r:00005CF3                 db    0
.rdata$r:00005CF4                 db    0
.rdata$r:00005CF5                 db    0
.rdata$r:00005CF6                 db    0
.rdata$r:00005CF7                 db    0
.rdata$r:00005CF8                 db    0
.rdata$r:00005CF9                 db    0
.rdata$r:00005CFA                 db    0
.rdata$r:00005CFB                 db    0
.rdata$r:00005CFC                 dd offset ??_R0?AUIOpenCallbackUI@@@8 ; IOpenCallbackUI `RTTI Type Descriptor'
.rdata$r:00005D00                 dd offset ??_R3IOpenCallbackUI@@8 ; IOpenCallbackUI::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005D00 _rdata$r        ends
.rdata$r:00005D00
.text:00005D04 ; ===========================================================================
.text:00005D04
.text:00005D04 ; Segment type: Pure code
.text:00005D04 ; Segment permissions: Read/Execute
.text:00005D04 _text           segment para public 'CODE' use32
.text:00005D04                 assume cs:_text
.text:00005D04                 ;org 5D04h
.text:00005D04 ; COMDAT (pick any)
.text:00005D04                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005D04
.text:00005D04 ; =============== S U B R O U T I N E =======================================
.text:00005D04
.text:00005D04 ; Attributes: bp-based frame
.text:00005D04
.text:00005D04 ; void __thiscall CExtractScanConsole::Init(CExtractScanConsole *this, struct CStdOutStream *, struct CStdOutStream *, struct CStdOutStream *)
.text:00005D04                 public ?Init@CExtractScanConsole@@QAEXPAVCStdOutStream@@00@Z
.text:00005D04 ?Init@CExtractScanConsole@@QAEXPAVCStdOutStream@@00@Z proc near
.text:00005D04                                         ; CODE XREF: Main2(void)+C3Ap
.text:00005D04
.text:00005D04 var_4           = dword ptr -4
.text:00005D04 arg_0           = dword ptr  8
.text:00005D04 arg_4           = dword ptr  0Ch
.text:00005D04 arg_8           = dword ptr  10h
.text:00005D04
.text:00005D04                 push    ebp
.text:00005D05                 mov     ebp, esp
.text:00005D07                 push    ecx
.text:00005D08                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005D0F                 mov     [ebp+var_4], ecx
.text:00005D12                 mov     eax, [ebp+var_4]
.text:00005D15                 mov     ecx, [ebp+arg_0]
.text:00005D18                 mov     [eax+4], ecx
.text:00005D1B                 mov     edx, [ebp+var_4]
.text:00005D1E                 mov     eax, [ebp+arg_4]
.text:00005D21                 mov     [edx+8], eax
.text:00005D24                 mov     ecx, [ebp+var_4]
.text:00005D27                 mov     edx, [ebp+arg_8]
.text:00005D2A                 mov     [ecx+0B4h], edx
.text:00005D30                 mov     esp, ebp
.text:00005D32                 pop     ebp
.text:00005D33                 retn    0Ch
.text:00005D33 ?Init@CExtractScanConsole@@QAEXPAVCStdOutStream@@00@Z endp
.text:00005D33
.text:00005D33 ; ---------------------------------------------------------------------------
.text:00005D36                 align 4
.text:00005D36 _text           ends
.text:00005D36
.text:00005D38 ; ===========================================================================
.text:00005D38
.text:00005D38 ; Segment type: Pure code
.text:00005D38 ; Segment permissions: Read/Execute
.text:00005D38 _text           segment para public 'CODE' use32
.text:00005D38                 assume cs:_text
.text:00005D38                 ;org 5D38h
.text:00005D38 ; COMDAT (pick any)
.text:00005D38                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005D38
.text:00005D38 ; =============== S U B R O U T I N E =======================================
.text:00005D38
.text:00005D38 ; Attributes: bp-based frame
.text:00005D38
.text:00005D38 ; void __thiscall CExtractScanConsole::SetWindowWidth(CExtractScanConsole *this, unsigned int)
.text:00005D38                 public ?SetWindowWidth@CExtractScanConsole@@QAEXI@Z
.text:00005D38 ?SetWindowWidth@CExtractScanConsole@@QAEXI@Z proc near
.text:00005D38                                         ; CODE XREF: Main2(void)+C4Cp
.text:00005D38
.text:00005D38 var_4           = dword ptr -4
.text:00005D38 arg_0           = dword ptr  8
.text:00005D38
.text:00005D38                 push    ebp
.text:00005D39                 mov     ebp, esp
.text:00005D3B                 push    ecx
.text:00005D3C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005D43                 mov     [ebp+var_4], ecx
.text:00005D46                 mov     eax, [ebp+arg_0]
.text:00005D49                 sub     eax, 1
.text:00005D4C                 mov     ecx, [ebp+var_4]
.text:00005D4F                 mov     [ecx+0BCh], eax
.text:00005D55                 mov     esp, ebp
.text:00005D57                 pop     ebp
.text:00005D58                 retn    4
.text:00005D58 ?SetWindowWidth@CExtractScanConsole@@QAEXI@Z endp
.text:00005D58
.text:00005D58 ; ---------------------------------------------------------------------------
.text:00005D5B                 align 4
.text:00005D5B _text           ends
.text:00005D5B
.text:00005D5C ; ===========================================================================
.text:00005D5C
.text:00005D5C ; Segment type: Pure code
.text:00005D5C ; Segment permissions: Read/Execute
.text:00005D5C _text           segment para public 'CODE' use32
.text:00005D5C                 assume cs:_text
.text:00005D5C                 ;org 5D5Ch
.text:00005D5C ; COMDAT (pick any)
.text:00005D5C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005D5C
.text:00005D5C ; =============== S U B R O U T I N E =======================================
.text:00005D5C
.text:00005D5C ; Attributes: bp-based frame
.text:00005D5C
.text:00005D5C ; void __thiscall CExtractScanConsole::CloseScanning(CExtractScanConsole *__hidden this)
.text:00005D5C                 public ?CloseScanning@CExtractScanConsole@@QAEXXZ
.text:00005D5C ?CloseScanning@CExtractScanConsole@@QAEXXZ proc near
.text:00005D5C                                         ; CODE XREF: Main2(void)+D04p
.text:00005D5C
.text:00005D5C var_4           = dword ptr -4
.text:00005D5C
.text:00005D5C                 push    ebp
.text:00005D5D                 mov     ebp, esp
.text:00005D5F                 push    ecx
.text:00005D60                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005D67                 mov     [ebp+var_4], ecx
.text:00005D6A                 mov     ecx, [ebp+var_4] ; this
.text:00005D6D                 call    ?NeedPercents@CExtractScanConsole@@ABE_NXZ ; CExtractScanConsole::NeedPercents(void)
.text:00005D72                 movzx   eax, al
.text:00005D75                 test    eax, eax
.text:00005D77                 jz      short loc_5D86
.text:00005D79                 push    1               ; bool
.text:00005D7B                 mov     ecx, [ebp+var_4]
.text:00005D7E                 add     ecx, 10h        ; this
.text:00005D81                 call    ?ClosePrint@CPercentPrinter@@QAEX_N@Z ; CPercentPrinter::ClosePrint(bool)
.text:00005D86
.text:00005D86 loc_5D86:                               ; CODE XREF: CExtractScanConsole::CloseScanning(void)+1Bj
.text:00005D86                 add     esp, 4
.text:00005D89                 cmp     ebp, esp
.text:00005D8B                 call    __RTC_CheckEsp
.text:00005D90                 mov     esp, ebp
.text:00005D92                 pop     ebp
.text:00005D93                 retn
.text:00005D93 ?CloseScanning@CExtractScanConsole@@QAEXXZ endp
.text:00005D93
.text:00005D93 _text           ends
.text:00005D93
.text:00005D94 ; ===========================================================================
.text:00005D94
.text:00005D94 ; Segment type: Pure code
.text:00005D94 ; Segment permissions: Read/Execute
.text:00005D94 _text           segment para public 'CODE' use32
.text:00005D94                 assume cs:_text
.text:00005D94                 ;org 5D94h
.text:00005D94 ; COMDAT (pick any)
.text:00005D94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005D94
.text:00005D94 ; =============== S U B R O U T I N E =======================================
.text:00005D94
.text:00005D94 ; Attributes: bp-based frame
.text:00005D94
.text:00005D94 ; bool __thiscall CExtractScanConsole::NeedPercents(CExtractScanConsole *__hidden this)
.text:00005D94                 public ?NeedPercents@CExtractScanConsole@@ABE_NXZ
.text:00005D94 ?NeedPercents@CExtractScanConsole@@ABE_NXZ proc near
.text:00005D94                                         ; CODE XREF: CExtractScanConsole::CloseScanning(void)+11p
.text:00005D94
.text:00005D94 var_4           = dword ptr -4
.text:00005D94
.text:00005D94                 push    ebp
.text:00005D95                 mov     ebp, esp
.text:00005D97                 push    ecx
.text:00005D98                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005D9F                 mov     [ebp+var_4], ecx
.text:00005DA2                 mov     eax, [ebp+var_4]
.text:00005DA5                 xor     ecx, ecx
.text:00005DA7                 cmp     dword ptr [eax+0B4h], 0
.text:00005DAE                 setnz   cl
.text:00005DB1                 mov     al, cl
.text:00005DB3                 mov     esp, ebp
.text:00005DB5                 pop     ebp
.text:00005DB6                 retn
.text:00005DB6 ?NeedPercents@CExtractScanConsole@@ABE_NXZ endp
.text:00005DB6
.text:00005DB6 ; ---------------------------------------------------------------------------
.text:00005DB7                 align 4
.text:00005DB7 _text           ends
.text:00005DB7
.text:00005DB8 ; ===========================================================================
.text:00005DB8
.text:00005DB8 ; Segment type: Pure code
.text:00005DB8 ; Segment permissions: Read/Execute
.text:00005DB8 _text           segment para public 'CODE' use32
.text:00005DB8                 assume cs:_text
.text:00005DB8                 ;org 5DB8h
.text:00005DB8 ; COMDAT (pick any)
.text:00005DB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005DB8
.text:00005DB8 ; =============== S U B R O U T I N E =======================================
.text:00005DB8
.text:00005DB8 ; Attributes: bp-based frame
.text:00005DB8
.text:00005DB8 ; public: __thiscall CExtractCallbackConsole::CExtractCallbackConsole(void)
.text:00005DB8                 public ??0CExtractCallbackConsole@@QAE@XZ
.text:00005DB8 ??0CExtractCallbackConsole@@QAE@XZ proc near ; CODE XREF: Main2(void)+D80p
.text:00005DB8
.text:00005DB8 var_10          = dword ptr -10h
.text:00005DB8 var_C           = dword ptr -0Ch
.text:00005DB8 var_4           = dword ptr -4
.text:00005DB8
.text:00005DB8                 push    ebp
.text:00005DB9                 mov     ebp, esp
.text:00005DBB                 push    0FFFFFFFFh
.text:00005DBD                 push    offset __ehhandler$??0CExtractCallbackConsole@@QAE@XZ
.text:00005DC2                 mov     eax, large fs:0
.text:00005DC8                 push    eax
.text:00005DC9                 push    ecx
.text:00005DCA                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00005DD1                 mov     eax, dword ptr ds:___security_cookie
.text:00005DD6                 xor     eax, ebp
.text:00005DD8                 push    eax
.text:00005DD9                 lea     eax, [ebp+var_C]
.text:00005DDC                 mov     large fs:0, eax
.text:00005DE2                 mov     [ebp+var_10], ecx
.text:00005DE5                 mov     ecx, [ebp+var_10] ; this
.text:00005DE8                 call    ??0IExtractCallbackUI@@QAE@XZ ; IExtractCallbackUI::IExtractCallbackUI(void)
.text:00005DED                 mov     ecx, [ebp+var_10]
.text:00005DF0                 add     ecx, 4          ; this
.text:00005DF3                 call    ??0IFolderArchiveExtractCallback2@@QAE@XZ ; IFolderArchiveExtractCallback2::IFolderArchiveExtractCallback2(void)
.text:00005DF8                 mov     ecx, [ebp+var_10]
.text:00005DFB                 add     ecx, 8          ; this
.text:00005DFE                 call    ??0ICryptoGetTextPassword@@QAE@XZ ; ICryptoGetTextPassword::ICryptoGetTextPassword(void)
.text:00005E03                 mov     ecx, [ebp+var_10]
.text:00005E06                 add     ecx, 10h
.text:00005E09                 call    ??0COpenCallbackConsole@@QAE@XZ ; COpenCallbackConsole::COpenCallbackConsole(void)
.text:00005E0E                 mov     [ebp+var_4], 0
.text:00005E15                 mov     ecx, [ebp+var_10]
.text:00005E18                 add     ecx, 0E0h ; 'a' ; this
.text:00005E1E                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00005E23                 mov     eax, [ebp+var_10]
.text:00005E26                 mov     dword ptr [eax], offset ??_7CExtractCallbackConsole@@6BIExtractCallbackUI@@@ ; const CExtractCallbackConsole::`vftable'{for `IExtractCallbackUI'}
.text:00005E2C                 mov     ecx, [ebp+var_10]
.text:00005E2F                 mov     dword ptr [ecx+4], offset ??_7CExtractCallbackConsole@@6BIFolderArchiveExtractCallback2@@@ ; const CExtractCallbackConsole::`vftable'{for `IFolderArchiveExtractCallback2'}
.text:00005E36                 mov     edx, [ebp+var_10]
.text:00005E39                 mov     dword ptr [edx+8], offset ??_7CExtractCallbackConsole@@6BICryptoGetTextPassword@@@ ; const CExtractCallbackConsole::`vftable'{for `ICryptoGetTextPassword'}
.text:00005E40                 mov     eax, [ebp+var_10]
.text:00005E43                 mov     dword ptr [eax+10h], offset ??_7CExtractCallbackConsole@@6BCOpenCallbackConsole@@@ ; const CExtractCallbackConsole::`vftable'{for `COpenCallbackConsole'}
.text:00005E4A                 mov     ecx, [ebp+var_10]
.text:00005E4D                 add     ecx, 0E4h ; 'S'
.text:00005E53                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:00005E58                 mov     byte ptr [ebp+var_4], 1
.text:00005E5C                 mov     ecx, [ebp+var_10]
.text:00005E5F                 add     ecx, 0F0h ; '='
.text:00005E65                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00005E6A                 mov     byte ptr [ebp+var_4], 2
.text:00005E6E                 mov     ecx, [ebp+var_10]
.text:00005E71                 add     ecx, 0FCh ; 'n'
.text:00005E77                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00005E7C                 mov     ecx, [ebp+var_10]
.text:00005E7F                 mov     byte ptr [ecx+158h], 0
.text:00005E86                 mov     edx, [ebp+var_10]
.text:00005E89                 mov     dword ptr [edx+15Ch], 1
.text:00005E93                 mov     eax, [ebp+var_10]
.text:00005E96                 mov     dword ptr [eax+160h], 0
.text:00005EA0                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00005EA7                 mov     eax, [ebp+var_10]
.text:00005EAA                 mov     ecx, [ebp+var_C]
.text:00005EAD                 mov     large fs:0, ecx
.text:00005EB4                 pop     ecx
.text:00005EB5                 add     esp, 10h
.text:00005EB8                 cmp     ebp, esp
.text:00005EBA                 call    __RTC_CheckEsp
.text:00005EBF                 mov     esp, ebp
.text:00005EC1                 pop     ebp
.text:00005EC2                 retn
.text:00005EC2 ??0CExtractCallbackConsole@@QAE@XZ endp
.text:00005EC2
.text:00005EC2 ; ---------------------------------------------------------------------------
.text:00005EC3                 align 4
.text:00005EC3 _text           ends
.text:00005EC3
.text$x:00005EC4 ; ===========================================================================
.text$x:00005EC4
.text$x:00005EC4 ; Segment type: Pure code
.text$x:00005EC4 ; Segment permissions: Read/Execute
.text$x:00005EC4 _text$x         segment para public 'CODE' use32
.text$x:00005EC4                 assume cs:_text$x
.text$x:00005EC4                 ;org 5EC4h
.text$x:00005EC4 ; COMDAT (pick associative to section at 5DB8)
.text$x:00005EC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005EC4
.text$x:00005EC4 ; =============== S U B R O U T I N E =======================================
.text$x:00005EC4
.text$x:00005EC4
.text$x:00005EC4 __unwindfunclet$??0CExtractCallbackConsole@@QAE@XZ$0 proc near
.text$x:00005EC4                                         ; DATA XREF: .xdata$x:00005F88o
.text$x:00005EC4                 mov     ecx, [ebp-10h]
.text$x:00005EC7                 add     ecx, 10h        ; this
.text$x:00005ECA                 jmp     ??1COpenCallbackConsole@@QAE@XZ ; COpenCallbackConsole::~COpenCallbackConsole(void)
.text$x:00005ECA __unwindfunclet$??0CExtractCallbackConsole@@QAE@XZ$0 endp
.text$x:00005ECA
.text$x:00005ECF
.text$x:00005ECF ; =============== S U B R O U T I N E =======================================
.text$x:00005ECF
.text$x:00005ECF
.text$x:00005ECF __unwindfunclet$??0CExtractCallbackConsole@@QAE@XZ$1 proc near
.text$x:00005ECF                                         ; DATA XREF: .xdata$x:00005F90o
.text$x:00005ECF                 mov     ecx, [ebp-10h]
.text$x:00005ED2                 add     ecx, 0E4h ; 'S' ; this
.text$x:00005ED8                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00005ED8 __unwindfunclet$??0CExtractCallbackConsole@@QAE@XZ$1 endp
.text$x:00005ED8
.text$x:00005EDD
.text$x:00005EDD ; =============== S U B R O U T I N E =======================================
.text$x:00005EDD
.text$x:00005EDD
.text$x:00005EDD __unwindfunclet$??0CExtractCallbackConsole@@QAE@XZ$2 proc near
.text$x:00005EDD                                         ; DATA XREF: .xdata$x:00005F98o
.text$x:00005EDD                 mov     ecx, [ebp-10h]
.text$x:00005EE0                 add     ecx, 0F0h ; '=' ; this
.text$x:00005EE6                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00005EE6 __unwindfunclet$??0CExtractCallbackConsole@@QAE@XZ$2 endp
.text$x:00005EE6
.text$x:00005EEB
.text$x:00005EEB ; =============== S U B R O U T I N E =======================================
.text$x:00005EEB
.text$x:00005EEB
.text$x:00005EEB __ehhandler$??0CExtractCallbackConsole@@QAE@XZ proc near
.text$x:00005EEB                                         ; DATA XREF: CExtractCallbackConsole::CExtractCallbackConsole(void)+5o
.text$x:00005EEB
.text$x:00005EEB arg_4           = dword ptr  8
.text$x:00005EEB
.text$x:00005EEB                 mov     edx, [esp+arg_4]
.text$x:00005EEF                 lea     eax, [edx+0Ch]
.text$x:00005EF2                 mov     ecx, [edx-8]
.text$x:00005EF5                 xor     ecx, eax
.text$x:00005EF7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005EFC                 mov     eax, offset __ehfuncinfo$??0CExtractCallbackConsole@@QAE@XZ
.text$x:00005F01                 jmp     ___CxxFrameHandler3
.text$x:00005F01 __ehhandler$??0CExtractCallbackConsole@@QAE@XZ endp
.text$x:00005F01
.text$x:00005F01 ; ---------------------------------------------------------------------------
.text$x:00005F06                 align 4
.text$x:00005F06 _text$x         ends
.text$x:00005F06
.rdata:00005F08 ; ===========================================================================
.rdata:00005F08
.rdata:00005F08 ; Segment type: Pure data
.rdata:00005F08 ; Segment permissions: Read
.rdata:00005F08 _rdata          segment dword public 'DATA' use32
.rdata:00005F08                 assume cs:_rdata
.rdata:00005F08                 ;org 5F08h
.rdata:00005F08 ; COMDAT (pick largest)
.rdata:00005F08                 dd offset ??_R4CExtractCallbackConsole@@6BCOpenCallbackConsole@@@ ; const CExtractCallbackConsole::`RTTI Complete Object Locator'{for `COpenCallbackConsole'}
.rdata:00005F0C                 public ??_7CExtractCallbackConsole@@6BCOpenCallbackConsole@@@
.rdata:00005F0C ; const CExtractCallbackConsole::`vftable'{for `COpenCallbackConsole'}
.rdata:00005F0C ??_7CExtractCallbackConsole@@6BCOpenCallbackConsole@@@ dd offset ?Open_CheckBreak@COpenCallbackConsole@@UAEJXZ
.rdata:00005F0C                                         ; DATA XREF: CExtractCallbackConsole::CExtractCallbackConsole(void)+8Bo
.rdata:00005F0C                                         ; COpenCallbackConsole::Open_CheckBreak(void)
.rdata:00005F10                 dd offset ?Open_SetTotal@COpenCallbackConsole@@UAEJPB_K0@Z ; COpenCallbackConsole::Open_SetTotal(unsigned __int64 const *,unsigned __int64 const *)
.rdata:00005F14                 dd offset ?Open_SetCompleted@COpenCallbackConsole@@UAEJPB_K0@Z ; COpenCallbackConsole::Open_SetCompleted(unsigned __int64 const *,unsigned __int64 const *)
.rdata:00005F18                 dd offset ?Open_Finished@COpenCallbackConsole@@UAEJXZ ; COpenCallbackConsole::Open_Finished(void)
.rdata:00005F1C                 dd offset ?Open_CryptoGetTextPassword@COpenCallbackConsole@@UAEJPAPA_W@Z ; COpenCallbackConsole::Open_CryptoGetTextPassword(wchar_t * *)
.rdata:00005F1C _rdata          ends
.rdata:00005F1C
.rdata:00005F20 ; ===========================================================================
.rdata:00005F20
.rdata:00005F20 ; Segment type: Pure data
.rdata:00005F20 ; Segment permissions: Read
.rdata:00005F20 _rdata          segment dword public 'DATA' use32
.rdata:00005F20                 assume cs:_rdata
.rdata:00005F20                 ;org 5F20h
.rdata:00005F20 ; COMDAT (pick largest)
.rdata:00005F20                 dd offset ??_R4CExtractCallbackConsole@@6BICryptoGetTextPassword@@@ ; const CExtractCallbackConsole::`RTTI Complete Object Locator'{for `ICryptoGetTextPassword'}
.rdata:00005F24                 public ??_7CExtractCallbackConsole@@6BICryptoGetTextPassword@@@
.rdata:00005F24 ; const CExtractCallbackConsole::`vftable'{for `ICryptoGetTextPassword'}
.rdata:00005F24 ??_7CExtractCallbackConsole@@6BICryptoGetTextPassword@@@ dd offset ?QueryInterface@CExtractCallbackConsole@@W7AGJABU_GUID@@PAPAX@Z
.rdata:00005F24                                         ; DATA XREF: CExtractCallbackConsole::CExtractCallbackConsole(void)+81o
.rdata:00005F24                                         ; [thunk]:CExtractCallbackConsole::QueryInterface`adjustor{8}' (_GUID const &,void * *)
.rdata:00005F28                 dd offset ?AddRef@CExtractCallbackConsole@@W7AGKXZ ; [thunk]:CExtractCallbackConsole::AddRef`adjustor{8}' (void)
.rdata:00005F2C                 dd offset ?Release@CExtractCallbackConsole@@W7AGKXZ ; [thunk]:CExtractCallbackConsole::Release`adjustor{8}' (void)
.rdata:00005F30                 dd offset ?CryptoGetTextPassword@CExtractCallbackConsole@@UAGJPAPA_W@Z ; CExtractCallbackConsole::CryptoGetTextPassword(wchar_t * *)
.rdata:00005F30 _rdata          ends
.rdata:00005F30
.rdata:00005F34 ; ===========================================================================
.rdata:00005F34
.rdata:00005F34 ; Segment type: Pure data
.rdata:00005F34 ; Segment permissions: Read
.rdata:00005F34 _rdata          segment dword public 'DATA' use32
.rdata:00005F34                 assume cs:_rdata
.rdata:00005F34                 ;org 5F34h
.rdata:00005F34 ; COMDAT (pick largest)
.rdata:00005F34                 dd offset ??_R4CExtractCallbackConsole@@6BIFolderArchiveExtractCallback2@@@ ; const CExtractCallbackConsole::`RTTI Complete Object Locator'{for `IFolderArchiveExtractCallback2'}
.rdata:00005F38                 public ??_7CExtractCallbackConsole@@6BIFolderArchiveExtractCallback2@@@
.rdata:00005F38 ; const CExtractCallbackConsole::`vftable'{for `IFolderArchiveExtractCallback2'}
.rdata:00005F38 ??_7CExtractCallbackConsole@@6BIFolderArchiveExtractCallback2@@@ dd offset ?QueryInterface@CExtractCallbackConsole@@W3AGJABU_GUID@@PAPAX@Z
.rdata:00005F38                                         ; DATA XREF: CExtractCallbackConsole::CExtractCallbackConsole(void)+77o
.rdata:00005F38                                         ; [thunk]:CExtractCallbackConsole::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:00005F3C                 dd offset ?AddRef@CExtractCallbackConsole@@W3AGKXZ ; [thunk]:CExtractCallbackConsole::AddRef`adjustor{4}' (void)
.rdata:00005F40                 dd offset ?Release@CExtractCallbackConsole@@W3AGKXZ ; [thunk]:CExtractCallbackConsole::Release`adjustor{4}' (void)
.rdata:00005F44                 dd offset ?ReportExtractResult@CExtractCallbackConsole@@UAGJHHPB_W@Z ; CExtractCallbackConsole::ReportExtractResult(int,int,wchar_t const *)
.rdata:00005F44 _rdata          ends
.rdata:00005F44
.rdata:00005F48 ; ===========================================================================
.rdata:00005F48
.rdata:00005F48 ; Segment type: Pure data
.rdata:00005F48 ; Segment permissions: Read
.rdata:00005F48 _rdata          segment dword public 'DATA' use32
.rdata:00005F48                 assume cs:_rdata
.rdata:00005F48                 ;org 5F48h
.rdata:00005F48 ; COMDAT (pick largest)
.rdata:00005F48                 dd offset ??_R4CExtractCallbackConsole@@6BIExtractCallbackUI@@@ ; const CExtractCallbackConsole::`RTTI Complete Object Locator'{for `IExtractCallbackUI'}
.rdata:00005F4C                 public ??_7CExtractCallbackConsole@@6BIExtractCallbackUI@@@
.rdata:00005F4C ; const CExtractCallbackConsole::`vftable'{for `IExtractCallbackUI'}
.rdata:00005F4C ??_7CExtractCallbackConsole@@6BIExtractCallbackUI@@@ dd offset ?QueryInterface@CExtractCallbackConsole@@UAGJABU_GUID@@PAPAX@Z
.rdata:00005F4C                                         ; DATA XREF: CExtractCallbackConsole::CExtractCallbackConsole(void)+6Eo
.rdata:00005F4C                                         ; CExtractCallbackConsole::QueryInterface(_GUID const &,void * *)
.rdata:00005F50                 dd offset ?AddRef@CExtractCallbackConsole@@UAGKXZ ; CExtractCallbackConsole::AddRef(void)
.rdata:00005F54                 dd offset ?Release@CExtractCallbackConsole@@UAGKXZ ; CExtractCallbackConsole::Release(void)
.rdata:00005F58                 dd offset ?SetTotal@CExtractCallbackConsole@@UAGJ_K@Z ; CExtractCallbackConsole::SetTotal(unsigned __int64)
.rdata:00005F5C                 dd offset ?SetCompleted@CExtractCallbackConsole@@UAGJPB_K@Z ; CExtractCallbackConsole::SetCompleted(unsigned __int64 const *)
.rdata:00005F60                 dd offset ?AskOverwrite@CExtractCallbackConsole@@UAGJPB_WPBU_FILETIME@@PB_K012PAH@Z ; CExtractCallbackConsole::AskOverwrite(wchar_t const *,_FILETIME const *,unsigned __int64 const *,wchar_t const *,_FILETIME const *,unsigned __int64 const *,int *)
.rdata:00005F64                 dd offset ?PrepareOperation@CExtractCallbackConsole@@UAGJPB_WHHPB_K@Z ; CExtractCallbackConsole::PrepareOperation(wchar_t const *,int,int,unsigned __int64 const *)
.rdata:00005F68                 dd offset ?MessageError@CExtractCallbackConsole@@UAGJPB_W@Z ; CExtractCallbackConsole::MessageError(wchar_t const *)
.rdata:00005F6C                 dd offset ?SetOperationResult@CExtractCallbackConsole@@UAGJHH@Z ; CExtractCallbackConsole::SetOperationResult(int,int)
.rdata:00005F70                 dd offset ?BeforeOpen@CExtractCallbackConsole@@UAEJPB_W_N@Z ; CExtractCallbackConsole::BeforeOpen(wchar_t const *,bool)
.rdata:00005F74                 dd offset ?OpenResult@CExtractCallbackConsole@@UAEJPBVCCodecs@@ABUCArchiveLink@@PB_WJ@Z ; CExtractCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)
.rdata:00005F78                 dd offset ?ThereAreNoFiles@CExtractCallbackConsole@@UAEJXZ ; CExtractCallbackConsole::ThereAreNoFiles(void)
.rdata:00005F7C                 dd offset ?ExtractResult@CExtractCallbackConsole@@UAEJJ@Z ; CExtractCallbackConsole::ExtractResult(long)
.rdata:00005F80                 dd offset ?SetPassword@CExtractCallbackConsole@@UAEJABVUString@@@Z ; CExtractCallbackConsole::SetPassword(UString const &)
.rdata:00005F80 _rdata          ends
.rdata:00005F80
.xdata$x:00005F84 ; ===========================================================================
.xdata$x:00005F84
.xdata$x:00005F84 ; Segment type: Pure data
.xdata$x:00005F84 ; Segment permissions: Read
.xdata$x:00005F84 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00005F84                 assume cs:_xdata$x
.xdata$x:00005F84                 ;org 5F84h
.xdata$x:00005F84 ; COMDAT (pick associative to section at 5DB8)
.xdata$x:00005F84 __unwindtable$??0CExtractCallbackConsole@@QAE@XZ db 0FFh
.xdata$x:00005F84                                         ; DATA XREF: .xdata$x:00005FA4o
.xdata$x:00005F85                 db 0FFh
.xdata$x:00005F86                 db 0FFh
.xdata$x:00005F87                 db 0FFh
.xdata$x:00005F88                 dd offset __unwindfunclet$??0CExtractCallbackConsole@@QAE@XZ$0
.xdata$x:00005F8C                 align 10h
.xdata$x:00005F90                 dd offset __unwindfunclet$??0CExtractCallbackConsole@@QAE@XZ$1
.xdata$x:00005F94                 db    1
.xdata$x:00005F95                 db    0
.xdata$x:00005F96                 db    0
.xdata$x:00005F97                 db    0
.xdata$x:00005F98                 dd offset __unwindfunclet$??0CExtractCallbackConsole@@QAE@XZ$2
.xdata$x:00005F9C __ehfuncinfo$??0CExtractCallbackConsole@@QAE@XZ db  22h ; "
.xdata$x:00005F9C                                         ; DATA XREF: __ehhandler$??0CExtractCallbackConsole@@QAE@XZ+11o
.xdata$x:00005F9D                 db    5
.xdata$x:00005F9E                 db  93h ; ô
.xdata$x:00005F9F                 db  19h
.xdata$x:00005FA0                 db    3
.xdata$x:00005FA1                 db    0
.xdata$x:00005FA2                 db    0
.xdata$x:00005FA3                 db    0
.xdata$x:00005FA4                 dd offset __unwindtable$??0CExtractCallbackConsole@@QAE@XZ
.xdata$x:00005FA8                 db    0
.xdata$x:00005FA9                 db    0
.xdata$x:00005FAA                 db    0
.xdata$x:00005FAB                 db    0
.xdata$x:00005FAC                 db    0
.xdata$x:00005FAD                 db    0
.xdata$x:00005FAE                 db    0
.xdata$x:00005FAF                 db    0
.xdata$x:00005FB0                 db    0
.xdata$x:00005FB1                 db    0
.xdata$x:00005FB2                 db    0
.xdata$x:00005FB3                 db    0
.xdata$x:00005FB4                 db    0
.xdata$x:00005FB5                 db    0
.xdata$x:00005FB6                 db    0
.xdata$x:00005FB7                 db    0
.xdata$x:00005FB8                 db    0
.xdata$x:00005FB9                 db    0
.xdata$x:00005FBA                 db    0
.xdata$x:00005FBB                 db    0
.xdata$x:00005FBC                 db    1
.xdata$x:00005FBD                 db    0
.xdata$x:00005FBE                 db    0
.xdata$x:00005FBF                 db    0
.xdata$x:00005FBF _xdata$x        ends
.xdata$x:00005FBF
.rdata$r:00005FC0 ; ===========================================================================
.rdata$r:00005FC0
.rdata$r:00005FC0 ; Segment type: Pure data
.rdata$r:00005FC0 ; Segment permissions: Read
.rdata$r:00005FC0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005FC0                 assume cs:_rdata$r
.rdata$r:00005FC0                 ;org 5FC0h
.rdata$r:00005FC0 ; COMDAT (pick any)
.rdata$r:00005FC0                 public ??_R4CExtractCallbackConsole@@6BIExtractCallbackUI@@@
.rdata$r:00005FC0 ; const CExtractCallbackConsole::`RTTI Complete Object Locator'{for `IExtractCallbackUI'}
.rdata$r:00005FC0 ??_R4CExtractCallbackConsole@@6BIExtractCallbackUI@@@ db    0
.rdata$r:00005FC0                                         ; DATA XREF: .rdata:00005F48o
.rdata$r:00005FC1                 db    0
.rdata$r:00005FC2                 db    0
.rdata$r:00005FC3                 db    0
.rdata$r:00005FC4                 db    0
.rdata$r:00005FC5                 db    0
.rdata$r:00005FC6                 db    0
.rdata$r:00005FC7                 db    0
.rdata$r:00005FC8                 db    0
.rdata$r:00005FC9                 db    0
.rdata$r:00005FCA                 db    0
.rdata$r:00005FCB                 db    0
.rdata$r:00005FCC                 dd offset ??_R0?AVCExtractCallbackConsole@@@8 ; CExtractCallbackConsole `RTTI Type Descriptor'
.rdata$r:00005FD0                 dd offset ??_R3CExtractCallbackConsole@@8 ; CExtractCallbackConsole::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005FD0 _rdata$r        ends
.rdata$r:00005FD0
.data:00005FD4 ; ===========================================================================
.data:00005FD4
.data:00005FD4 ; Segment type: Pure data
.data:00005FD4 ; Segment permissions: Read/Write
.data:00005FD4 _data           segment dword public 'DATA' use32
.data:00005FD4                 assume cs:_data
.data:00005FD4                 ;org 5FD4h
.data:00005FD4 ; COMDAT (pick any)
.data:00005FD4                 public ??_R0?AVCExtractCallbackConsole@@@8
.data:00005FD4 ; class CExtractCallbackConsole `RTTI Type Descriptor'
.data:00005FD4 ??_R0?AVCExtractCallbackConsole@@@8 dd offset ??_7type_info@@6B@
.data:00005FD4                                         ; DATA XREF: .rdata$r:00005FCCo
.data:00005FD4                                         ; .rdata$r:CExtractCallbackConsole::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00005FD4                                         ; const type_info::`vftable'
.data:00005FD8                 db    0
.data:00005FD9                 db    0
.data:00005FDA                 db    0
.data:00005FDB                 db    0
.data:00005FDC                 db  2Eh ; .
.data:00005FDD                 db  3Fh ; ?
.data:00005FDE                 db  41h ; A
.data:00005FDF                 db  56h ; V
.data:00005FE0                 db  43h ; C
.data:00005FE1                 db  45h ; E
.data:00005FE2                 db  78h ; x
.data:00005FE3                 db  74h ; t
.data:00005FE4                 db  72h ; r
.data:00005FE5                 db  61h ; a
.data:00005FE6                 db  63h ; c
.data:00005FE7                 db  74h ; t
.data:00005FE8                 db  43h ; C
.data:00005FE9                 db  61h ; a
.data:00005FEA                 db  6Ch ; l
.data:00005FEB                 db  6Ch ; l
.data:00005FEC                 db  62h ; b
.data:00005FED                 db  61h ; a
.data:00005FEE                 db  63h ; c
.data:00005FEF                 db  6Bh ; k
.data:00005FF0                 db  43h ; C
.data:00005FF1                 db  6Fh ; o
.data:00005FF2                 db  6Eh ; n
.data:00005FF3                 db  73h ; s
.data:00005FF4                 db  6Fh ; o
.data:00005FF5                 db  6Ch ; l
.data:00005FF6                 db  65h ; e
.data:00005FF7                 db  40h ; @
.data:00005FF8                 db  40h ; @
.data:00005FF9                 db    0
.data:00005FFA                 align 4
.data:00005FFA _data           ends
.data:00005FFA
.rdata$r:00005FFC ; ===========================================================================
.rdata$r:00005FFC
.rdata$r:00005FFC ; Segment type: Pure data
.rdata$r:00005FFC ; Segment permissions: Read
.rdata$r:00005FFC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005FFC                 assume cs:_rdata$r
.rdata$r:00005FFC                 ;org 5FFCh
.rdata$r:00005FFC ; COMDAT (pick any)
.rdata$r:00005FFC                 public ??_R3CExtractCallbackConsole@@8
.rdata$r:00005FFC ; CExtractCallbackConsole::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005FFC ??_R3CExtractCallbackConsole@@8 db    0 ; DATA XREF: .rdata$r:00005FD0o
.rdata$r:00005FFC                                         ; .rdata$r:00006058o ...
.rdata$r:00005FFD                 db    0
.rdata$r:00005FFE                 db    0
.rdata$r:00005FFF                 db    0
.rdata$r:00006000                 db    1
.rdata$r:00006001                 db    0
.rdata$r:00006002                 db    0
.rdata$r:00006003                 db    0
.rdata$r:00006004                 db  0Ch
.rdata$r:00006005                 db    0
.rdata$r:00006006                 db    0
.rdata$r:00006007                 db    0
.rdata$r:00006008                 dd offset ??_R2CExtractCallbackConsole@@8 ; CExtractCallbackConsole::`RTTI Base Class Array'
.rdata$r:00006008 _rdata$r        ends
.rdata$r:00006008
.rdata$r:0000600C ; ===========================================================================
.rdata$r:0000600C
.rdata$r:0000600C ; Segment type: Pure data
.rdata$r:0000600C ; Segment permissions: Read
.rdata$r:0000600C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000600C                 assume cs:_rdata$r
.rdata$r:0000600C                 ;org 600Ch
.rdata$r:0000600C ; COMDAT (pick any)
.rdata$r:0000600C                 public ??_R2CExtractCallbackConsole@@8
.rdata$r:0000600C ; CExtractCallbackConsole::`RTTI Base Class Array'
.rdata$r:0000600C ??_R2CExtractCallbackConsole@@8 dd offset ??_R1A@?0A@EA@CExtractCallbackConsole@@8
.rdata$r:0000600C                                         ; DATA XREF: .rdata$r:00006008o
.rdata$r:0000600C                                         ; CExtractCallbackConsole::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00006010                 dd offset ??_R1A@?0A@EA@IExtractCallbackUI@@8 ; IExtractCallbackUI::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00006014                 dd offset ??_R1A@?0A@EA@IFolderArchiveExtractCallback@@8 ; IFolderArchiveExtractCallback::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00006018                 dd offset ??_R1A@?0A@EA@IProgress@@8 ; IProgress::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000601C                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:00006020                 dd offset ??_R13?0A@EA@IFolderArchiveExtractCallback2@@8 ; IFolderArchiveExtractCallback2::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00006024                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:00006028                 dd offset ??_R17?0A@EA@ICryptoGetTextPassword@@8 ; ICryptoGetTextPassword::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:0000602C                 dd offset ??_R17?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
.rdata$r:00006030                 dd offset ??_R1BA@?0A@EA@COpenCallbackConsole@@8 ; COpenCallbackConsole::`RTTI Base Class Descriptor at (16,-1,0,64)'
.rdata$r:00006034                 dd offset ??_R1BA@?0A@EA@IOpenCallbackUI@@8 ; IOpenCallbackUI::`RTTI Base Class Descriptor at (16,-1,0,64)'
.rdata$r:00006038                 dd offset ??_R1OA@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (224,-1,0,64)'
.rdata$r:0000603C                 db    0
.rdata$r:0000603D                 align 10h
.rdata$r:0000603D _rdata$r        ends
.rdata$r:0000603D
.rdata$r:00006040 ; ===========================================================================
.rdata$r:00006040
.rdata$r:00006040 ; Segment type: Pure data
.rdata$r:00006040 ; Segment permissions: Read
.rdata$r:00006040 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006040                 assume cs:_rdata$r
.rdata$r:00006040                 ;org 6040h
.rdata$r:00006040 ; COMDAT (pick any)
.rdata$r:00006040                 public ??_R1A@?0A@EA@CExtractCallbackConsole@@8
.rdata$r:00006040 ; CExtractCallbackConsole::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00006040 ??_R1A@?0A@EA@CExtractCallbackConsole@@8 dd offset ??_R0?AVCExtractCallbackConsole@@@8
.rdata$r:00006040                                         ; DATA XREF: .rdata$r:CExtractCallbackConsole::`RTTI Base Class Array'o
.rdata$r:00006040                                         ; CExtractCallbackConsole `RTTI Type Descriptor'
.rdata$r:00006044                 db  0Bh
.rdata$r:00006045                 db    0
.rdata$r:00006046                 db    0
.rdata$r:00006047                 db    0
.rdata$r:00006048                 db    0
.rdata$r:00006049                 db    0
.rdata$r:0000604A                 db    0
.rdata$r:0000604B                 db    0
.rdata$r:0000604C                 db 0FFh
.rdata$r:0000604D                 db 0FFh
.rdata$r:0000604E                 db 0FFh
.rdata$r:0000604F                 db 0FFh
.rdata$r:00006050                 db    0
.rdata$r:00006051                 db    0
.rdata$r:00006052                 db    0
.rdata$r:00006053                 db    0
.rdata$r:00006054                 db  40h ; @
.rdata$r:00006055                 db    0
.rdata$r:00006056                 db    0
.rdata$r:00006057                 db    0
.rdata$r:00006058                 dd offset ??_R3CExtractCallbackConsole@@8 ; CExtractCallbackConsole::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006058 _rdata$r        ends
.rdata$r:00006058
.rdata$r:0000605C ; ===========================================================================
.rdata$r:0000605C
.rdata$r:0000605C ; Segment type: Pure data
.rdata$r:0000605C ; Segment permissions: Read
.rdata$r:0000605C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000605C                 assume cs:_rdata$r
.rdata$r:0000605C                 ;org 605Ch
.rdata$r:0000605C ; COMDAT (pick any)
.rdata$r:0000605C                 public ??_R1A@?0A@EA@IExtractCallbackUI@@8
.rdata$r:0000605C ; IExtractCallbackUI::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000605C ??_R1A@?0A@EA@IExtractCallbackUI@@8 dd offset ??_R0?AUIExtractCallbackUI@@@8
.rdata$r:0000605C                                         ; DATA XREF: .rdata$r:00006010o
.rdata$r:0000605C                                         ; .rdata$r:IExtractCallbackUI::`RTTI Base Class Array'o
.rdata$r:0000605C                                         ; IExtractCallbackUI `RTTI Type Descriptor'
.rdata$r:00006060                 db    3
.rdata$r:00006061                 db    0
.rdata$r:00006062                 db    0
.rdata$r:00006063                 db    0
.rdata$r:00006064                 db    0
.rdata$r:00006065                 db    0
.rdata$r:00006066                 db    0
.rdata$r:00006067                 db    0
.rdata$r:00006068                 db 0FFh
.rdata$r:00006069                 db 0FFh
.rdata$r:0000606A                 db 0FFh
.rdata$r:0000606B                 db 0FFh
.rdata$r:0000606C                 db    0
.rdata$r:0000606D                 db    0
.rdata$r:0000606E                 db    0
.rdata$r:0000606F                 db    0
.rdata$r:00006070                 db  40h ; @
.rdata$r:00006071                 db    0
.rdata$r:00006072                 db    0
.rdata$r:00006073                 db    0
.rdata$r:00006074                 dd offset ??_R3IExtractCallbackUI@@8 ; IExtractCallbackUI::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006074 _rdata$r        ends
.rdata$r:00006074
.data:00006078 ; ===========================================================================
.data:00006078
.data:00006078 ; Segment type: Pure data
.data:00006078 ; Segment permissions: Read/Write
.data:00006078 _data           segment dword public 'DATA' use32
.data:00006078                 assume cs:_data
.data:00006078                 ;org 6078h
.data:00006078 ; COMDAT (pick any)
.data:00006078                 public ??_R0?AUIExtractCallbackUI@@@8
.data:00006078 ; struct IExtractCallbackUI `RTTI Type Descriptor'
.data:00006078 ??_R0?AUIExtractCallbackUI@@@8 dd offset ??_7type_info@@6B@
.data:00006078                                         ; DATA XREF: .rdata$r:IExtractCallbackUI::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00006078                                         ; .rdata$r:00006748o
.data:00006078                                         ; const type_info::`vftable'
.data:0000607C                 align 10h
.data:00006080 a_?auiextractca db '.?AUIExtractCallbackUI@@',0
.data:00006099                 align 4
.data:00006099 _data           ends
.data:00006099
.rdata$r:0000609C ; ===========================================================================
.rdata$r:0000609C
.rdata$r:0000609C ; Segment type: Pure data
.rdata$r:0000609C ; Segment permissions: Read
.rdata$r:0000609C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000609C                 assume cs:_rdata$r
.rdata$r:0000609C                 ;org 609Ch
.rdata$r:0000609C ; COMDAT (pick any)
.rdata$r:0000609C                 public ??_R3IExtractCallbackUI@@8
.rdata$r:0000609C ; IExtractCallbackUI::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000609C ??_R3IExtractCallbackUI@@8 db    0      ; DATA XREF: .rdata$r:00006074o
.rdata$r:0000609C                                         ; .rdata$r:0000674Co
.rdata$r:0000609D                 db    0
.rdata$r:0000609E                 db    0
.rdata$r:0000609F                 db    0
.rdata$r:000060A0                 db    0
.rdata$r:000060A1                 db    0
.rdata$r:000060A2                 db    0
.rdata$r:000060A3                 db    0
.rdata$r:000060A4                 db    4
.rdata$r:000060A5                 db    0
.rdata$r:000060A6                 db    0
.rdata$r:000060A7                 db    0
.rdata$r:000060A8                 dd offset ??_R2IExtractCallbackUI@@8 ; IExtractCallbackUI::`RTTI Base Class Array'
.rdata$r:000060A8 _rdata$r        ends
.rdata$r:000060A8
.rdata$r:000060AC ; ===========================================================================
.rdata$r:000060AC
.rdata$r:000060AC ; Segment type: Pure data
.rdata$r:000060AC ; Segment permissions: Read
.rdata$r:000060AC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000060AC                 assume cs:_rdata$r
.rdata$r:000060AC                 ;org 60ACh
.rdata$r:000060AC ; COMDAT (pick any)
.rdata$r:000060AC                 public ??_R2IExtractCallbackUI@@8
.rdata$r:000060AC ; IExtractCallbackUI::`RTTI Base Class Array'
.rdata$r:000060AC ??_R2IExtractCallbackUI@@8 dd offset ??_R1A@?0A@EA@IExtractCallbackUI@@8
.rdata$r:000060AC                                         ; DATA XREF: .rdata$r:000060A8o
.rdata$r:000060AC                                         ; IExtractCallbackUI::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000060B0                 dd offset ??_R1A@?0A@EA@IFolderArchiveExtractCallback@@8 ; IFolderArchiveExtractCallback::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000060B4                 dd offset ??_R1A@?0A@EA@IProgress@@8 ; IProgress::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000060B8                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000060BC                 db    0
.rdata$r:000060BD                 align 10h
.rdata$r:000060BD _rdata$r        ends
.rdata$r:000060BD
.rdata$r:000060C0 ; ===========================================================================
.rdata$r:000060C0
.rdata$r:000060C0 ; Segment type: Pure data
.rdata$r:000060C0 ; Segment permissions: Read
.rdata$r:000060C0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000060C0                 assume cs:_rdata$r
.rdata$r:000060C0                 ;org 60C0h
.rdata$r:000060C0 ; COMDAT (pick any)
.rdata$r:000060C0                 public ??_R1A@?0A@EA@IFolderArchiveExtractCallback@@8
.rdata$r:000060C0 ; IFolderArchiveExtractCallback::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000060C0 ??_R1A@?0A@EA@IFolderArchiveExtractCallback@@8 dd offset ??_R0?AUIFolderArchiveExtractCallback@@@8
.rdata$r:000060C0                                         ; DATA XREF: .rdata$r:00006014o
.rdata$r:000060C0                                         ; .rdata$r:000060B0o ...
.rdata$r:000060C0                                         ; IFolderArchiveExtractCallback `RTTI Type Descriptor'
.rdata$r:000060C4                 db    2
.rdata$r:000060C5                 db    0
.rdata$r:000060C6                 db    0
.rdata$r:000060C7                 db    0
.rdata$r:000060C8                 db    0
.rdata$r:000060C9                 db    0
.rdata$r:000060CA                 db    0
.rdata$r:000060CB                 db    0
.rdata$r:000060CC                 db 0FFh
.rdata$r:000060CD                 db 0FFh
.rdata$r:000060CE                 db 0FFh
.rdata$r:000060CF                 db 0FFh
.rdata$r:000060D0                 db    0
.rdata$r:000060D1                 db    0
.rdata$r:000060D2                 db    0
.rdata$r:000060D3                 db    0
.rdata$r:000060D4                 db  40h ; @
.rdata$r:000060D5                 db    0
.rdata$r:000060D6                 db    0
.rdata$r:000060D7                 db    0
.rdata$r:000060D8                 dd offset ??_R3IFolderArchiveExtractCallback@@8 ; IFolderArchiveExtractCallback::`RTTI Class Hierarchy Descriptor'
.rdata$r:000060D8 _rdata$r        ends
.rdata$r:000060D8
.data:000060DC ; ===========================================================================
.data:000060DC
.data:000060DC ; Segment type: Pure data
.data:000060DC ; Segment permissions: Read/Write
.data:000060DC _data           segment dword public 'DATA' use32
.data:000060DC                 assume cs:_data
.data:000060DC                 ;org 60DCh
.data:000060DC ; COMDAT (pick any)
.data:000060DC                 public ??_R0?AUIFolderArchiveExtractCallback@@@8
.data:000060DC ; struct IFolderArchiveExtractCallback `RTTI Type Descriptor'
.data:000060DC ??_R0?AUIFolderArchiveExtractCallback@@@8 dd offset ??_7type_info@@6B@
.data:000060DC                                         ; DATA XREF: .rdata$r:IFolderArchiveExtractCallback::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000060DC                                         ; .rdata$r:000069E4o
.data:000060DC                                         ; const type_info::`vftable'
.data:000060E0                 db    0
.data:000060E1                 db    0
.data:000060E2                 db    0
.data:000060E3                 db    0
.data:000060E4                 db  2Eh ; .
.data:000060E5                 db  3Fh ; ?
.data:000060E6                 db  41h ; A
.data:000060E7                 db  55h ; U
.data:000060E8                 db  49h ; I
.data:000060E9                 db  46h ; F
.data:000060EA                 db  6Fh ; o
.data:000060EB                 db  6Ch ; l
.data:000060EC                 db  64h ; d
.data:000060ED                 db  65h ; e
.data:000060EE                 db  72h ; r
.data:000060EF                 db  41h ; A
.data:000060F0                 db  72h ; r
.data:000060F1                 db  63h ; c
.data:000060F2                 db  68h ; h
.data:000060F3                 db  69h ; i
.data:000060F4                 db  76h ; v
.data:000060F5                 db  65h ; e
.data:000060F6                 db  45h ; E
.data:000060F7                 db  78h ; x
.data:000060F8                 db  74h ; t
.data:000060F9                 db  72h ; r
.data:000060FA                 db  61h ; a
.data:000060FB                 db  63h ; c
.data:000060FC                 db  74h ; t
.data:000060FD                 db  43h ; C
.data:000060FE                 db  61h ; a
.data:000060FF                 db  6Ch ; l
.data:00006100                 db  6Ch ; l
.data:00006101                 db  62h ; b
.data:00006102                 db  61h ; a
.data:00006103                 db  63h ; c
.data:00006104                 db  6Bh ; k
.data:00006105                 db  40h ; @
.data:00006106                 db  40h ; @
.data:00006107                 db    0
.data:00006107 _data           ends
.data:00006107
.rdata$r:00006108 ; ===========================================================================
.rdata$r:00006108
.rdata$r:00006108 ; Segment type: Pure data
.rdata$r:00006108 ; Segment permissions: Read
.rdata$r:00006108 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006108                 assume cs:_rdata$r
.rdata$r:00006108                 ;org 6108h
.rdata$r:00006108 ; COMDAT (pick any)
.rdata$r:00006108                 public ??_R3IFolderArchiveExtractCallback@@8
.rdata$r:00006108 ; IFolderArchiveExtractCallback::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006108 ??_R3IFolderArchiveExtractCallback@@8 db    0
.rdata$r:00006108                                         ; DATA XREF: .rdata$r:000060D8o
.rdata$r:00006108                                         ; .rdata$r:000069E8o
.rdata$r:00006109                 db    0
.rdata$r:0000610A                 db    0
.rdata$r:0000610B                 db    0
.rdata$r:0000610C                 db    0
.rdata$r:0000610D                 db    0
.rdata$r:0000610E                 db    0
.rdata$r:0000610F                 db    0
.rdata$r:00006110                 db    3
.rdata$r:00006111                 db    0
.rdata$r:00006112                 db    0
.rdata$r:00006113                 db    0
.rdata$r:00006114                 dd offset ??_R2IFolderArchiveExtractCallback@@8 ; IFolderArchiveExtractCallback::`RTTI Base Class Array'
.rdata$r:00006114 _rdata$r        ends
.rdata$r:00006114
.rdata$r:00006118 ; ===========================================================================
.rdata$r:00006118
.rdata$r:00006118 ; Segment type: Pure data
.rdata$r:00006118 ; Segment permissions: Read
.rdata$r:00006118 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006118                 assume cs:_rdata$r
.rdata$r:00006118                 ;org 6118h
.rdata$r:00006118 ; COMDAT (pick any)
.rdata$r:00006118                 public ??_R2IFolderArchiveExtractCallback@@8
.rdata$r:00006118 ; IFolderArchiveExtractCallback::`RTTI Base Class Array'
.rdata$r:00006118 ??_R2IFolderArchiveExtractCallback@@8 dd offset ??_R1A@?0A@EA@IFolderArchiveExtractCallback@@8
.rdata$r:00006118                                         ; DATA XREF: .rdata$r:00006114o
.rdata$r:00006118                                         ; IFolderArchiveExtractCallback::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000611C                 dd offset ??_R1A@?0A@EA@IProgress@@8 ; IProgress::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00006120                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00006124                 db    0
.rdata$r:00006125                 align 4
.rdata$r:00006125 _rdata$r        ends
.rdata$r:00006125
.rdata$r:00006128 ; ===========================================================================
.rdata$r:00006128
.rdata$r:00006128 ; Segment type: Pure data
.rdata$r:00006128 ; Segment permissions: Read
.rdata$r:00006128 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006128                 assume cs:_rdata$r
.rdata$r:00006128                 ;org 6128h
.rdata$r:00006128 ; COMDAT (pick any)
.rdata$r:00006128                 public ??_R1A@?0A@EA@IProgress@@8
.rdata$r:00006128 ; IProgress::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00006128 ??_R1A@?0A@EA@IProgress@@8 dd offset ??_R0?AUIProgress@@@8
.rdata$r:00006128                                         ; DATA XREF: .rdata$r:00006018o
.rdata$r:00006128                                         ; .rdata$r:000060B4o ...
.rdata$r:00006128                                         ; IProgress `RTTI Type Descriptor'
.rdata$r:0000612C                 db    1
.rdata$r:0000612D                 db    0
.rdata$r:0000612E                 db    0
.rdata$r:0000612F                 db    0
.rdata$r:00006130                 db    0
.rdata$r:00006131                 db    0
.rdata$r:00006132                 db    0
.rdata$r:00006133                 db    0
.rdata$r:00006134                 db 0FFh
.rdata$r:00006135                 db 0FFh
.rdata$r:00006136                 db 0FFh
.rdata$r:00006137                 db 0FFh
.rdata$r:00006138                 db    0
.rdata$r:00006139                 db    0
.rdata$r:0000613A                 db    0
.rdata$r:0000613B                 db    0
.rdata$r:0000613C                 db  40h ; @
.rdata$r:0000613D                 db    0
.rdata$r:0000613E                 db    0
.rdata$r:0000613F                 db    0
.rdata$r:00006140                 dd offset ??_R3IProgress@@8 ; IProgress::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006140 _rdata$r        ends
.rdata$r:00006140
.data:00006144 ; ===========================================================================
.data:00006144
.data:00006144 ; Segment type: Pure data
.data:00006144 ; Segment permissions: Read/Write
.data:00006144 _data           segment dword public 'DATA' use32
.data:00006144                 assume cs:_data
.data:00006144                 ;org 6144h
.data:00006144 ; COMDAT (pick any)
.data:00006144                 public ??_R0?AUIProgress@@@8
.data:00006144 ; struct IProgress `RTTI Type Descriptor'
.data:00006144 ??_R0?AUIProgress@@@8 dd offset ??_7type_info@@6B@
.data:00006144                                         ; DATA XREF: .rdata$r:IProgress::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00006144                                         ; .rdata$r:00006A40o
.data:00006144                                         ; const type_info::`vftable'
.data:00006148                 db    0
.data:00006149                 db    0
.data:0000614A                 db    0
.data:0000614B                 db    0
.data:0000614C                 db  2Eh ; .
.data:0000614D                 db  3Fh ; ?
.data:0000614E                 db  41h ; A
.data:0000614F                 db  55h ; U
.data:00006150                 db  49h ; I
.data:00006151                 db  50h ; P
.data:00006152                 db  72h ; r
.data:00006153                 db  6Fh ; o
.data:00006154                 db  67h ; g
.data:00006155                 db  72h ; r
.data:00006156                 db  65h ; e
.data:00006157                 db  73h ; s
.data:00006158                 db  73h ; s
.data:00006159                 db  40h ; @
.data:0000615A                 db  40h ; @
.data:0000615B                 db    0
.data:0000615B _data           ends
.data:0000615B
.rdata$r:0000615C ; ===========================================================================
.rdata$r:0000615C
.rdata$r:0000615C ; Segment type: Pure data
.rdata$r:0000615C ; Segment permissions: Read
.rdata$r:0000615C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000615C                 assume cs:_rdata$r
.rdata$r:0000615C                 ;org 615Ch
.rdata$r:0000615C ; COMDAT (pick any)
.rdata$r:0000615C                 public ??_R3IProgress@@8
.rdata$r:0000615C ; IProgress::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000615C ??_R3IProgress@@8 db    0               ; DATA XREF: .rdata$r:00006140o
.rdata$r:0000615C                                         ; .rdata$r:00006A44o
.rdata$r:0000615D                 db    0
.rdata$r:0000615E                 db    0
.rdata$r:0000615F                 db    0
.rdata$r:00006160                 db    0
.rdata$r:00006161                 db    0
.rdata$r:00006162                 db    0
.rdata$r:00006163                 db    0
.rdata$r:00006164                 db    2
.rdata$r:00006165                 db    0
.rdata$r:00006166                 db    0
.rdata$r:00006167                 db    0
.rdata$r:00006168                 dd offset ??_R2IProgress@@8 ; IProgress::`RTTI Base Class Array'
.rdata$r:00006168 _rdata$r        ends
.rdata$r:00006168
.rdata$r:0000616C ; ===========================================================================
.rdata$r:0000616C
.rdata$r:0000616C ; Segment type: Pure data
.rdata$r:0000616C ; Segment permissions: Read
.rdata$r:0000616C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000616C                 assume cs:_rdata$r
.rdata$r:0000616C                 ;org 616Ch
.rdata$r:0000616C ; COMDAT (pick any)
.rdata$r:0000616C                 public ??_R2IProgress@@8
.rdata$r:0000616C ; IProgress::`RTTI Base Class Array'
.rdata$r:0000616C ??_R2IProgress@@8 dd offset ??_R1A@?0A@EA@IProgress@@8
.rdata$r:0000616C                                         ; DATA XREF: .rdata$r:00006168o
.rdata$r:0000616C                                         ; IProgress::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00006170                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00006174                 db    0
.rdata$r:00006175                 align 4
.rdata$r:00006175 _rdata$r        ends
.rdata$r:00006175
.rdata$r:00006178 ; ===========================================================================
.rdata$r:00006178
.rdata$r:00006178 ; Segment type: Pure data
.rdata$r:00006178 ; Segment permissions: Read
.rdata$r:00006178 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006178                 assume cs:_rdata$r
.rdata$r:00006178                 ;org 6178h
.rdata$r:00006178 ; COMDAT (pick any)
.rdata$r:00006178                 public ??_R1A@?0A@EC@IUnknown@@8
.rdata$r:00006178 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 66)'
.rdata$r:00006178 ??_R1A@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00006178                                         ; DATA XREF: .rdata$r:0000601Co
.rdata$r:00006178                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:0000617C                 db    0
.rdata$r:0000617D                 db    0
.rdata$r:0000617E                 db    0
.rdata$r:0000617F                 db    0
.rdata$r:00006180                 db    0
.rdata$r:00006181                 db    0
.rdata$r:00006182                 db    0
.rdata$r:00006183                 db    0
.rdata$r:00006184                 db 0FFh
.rdata$r:00006185                 db 0FFh
.rdata$r:00006186                 db 0FFh
.rdata$r:00006187                 db 0FFh
.rdata$r:00006188                 db    0
.rdata$r:00006189                 db    0
.rdata$r:0000618A                 db    0
.rdata$r:0000618B                 db    0
.rdata$r:0000618C                 db  42h ; B
.rdata$r:0000618D                 db    0
.rdata$r:0000618E                 db    0
.rdata$r:0000618F                 db    0
.rdata$r:00006190                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006190 _rdata$r        ends
.rdata$r:00006190
.rdata$r:00006194 ; ===========================================================================
.rdata$r:00006194
.rdata$r:00006194 ; Segment type: Pure data
.rdata$r:00006194 ; Segment permissions: Read
.rdata$r:00006194 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006194                 assume cs:_rdata$r
.rdata$r:00006194                 ;org 6194h
.rdata$r:00006194 ; COMDAT (pick any)
.rdata$r:00006194                 public ??_R13?0A@EA@IFolderArchiveExtractCallback2@@8
.rdata$r:00006194 ; IFolderArchiveExtractCallback2::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:00006194 ??_R13?0A@EA@IFolderArchiveExtractCallback2@@8 dd offset ??_R0?AUIFolderArchiveExtractCallback2@@@8
.rdata$r:00006194                                         ; DATA XREF: .rdata$r:00006020o
.rdata$r:00006194                                         ; IFolderArchiveExtractCallback2 `RTTI Type Descriptor'
.rdata$r:00006198                 db    1
.rdata$r:00006199                 db    0
.rdata$r:0000619A                 db    0
.rdata$r:0000619B                 db    0
.rdata$r:0000619C                 db    4
.rdata$r:0000619D                 db    0
.rdata$r:0000619E                 db    0
.rdata$r:0000619F                 db    0
.rdata$r:000061A0                 db 0FFh
.rdata$r:000061A1                 db 0FFh
.rdata$r:000061A2                 db 0FFh
.rdata$r:000061A3                 db 0FFh
.rdata$r:000061A4                 db    0
.rdata$r:000061A5                 db    0
.rdata$r:000061A6                 db    0
.rdata$r:000061A7                 db    0
.rdata$r:000061A8                 db  40h ; @
.rdata$r:000061A9                 db    0
.rdata$r:000061AA                 db    0
.rdata$r:000061AB                 db    0
.rdata$r:000061AC                 dd offset ??_R3IFolderArchiveExtractCallback2@@8 ; IFolderArchiveExtractCallback2::`RTTI Class Hierarchy Descriptor'
.rdata$r:000061AC _rdata$r        ends
.rdata$r:000061AC
.data:000061B0 ; ===========================================================================
.data:000061B0
.data:000061B0 ; Segment type: Pure data
.data:000061B0 ; Segment permissions: Read/Write
.data:000061B0 _data           segment dword public 'DATA' use32
.data:000061B0                 assume cs:_data
.data:000061B0                 ;org 61B0h
.data:000061B0 ; COMDAT (pick any)
.data:000061B0                 public ??_R0?AUIFolderArchiveExtractCallback2@@@8
.data:000061B0 ; struct IFolderArchiveExtractCallback2 `RTTI Type Descriptor'
.data:000061B0 ??_R0?AUIFolderArchiveExtractCallback2@@@8 dd offset ??_7type_info@@6B@
.data:000061B0                                         ; DATA XREF: .rdata$r:IFolderArchiveExtractCallback2::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:000061B0                                         ; .rdata$r:IFolderArchiveExtractCallback2::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:000061B0                                         ; const type_info::`vftable'
.data:000061B4                 align 8
.data:000061B8 a_?auifolderarc db '.?AUIFolderArchiveExtractCallback2@@',0
.data:000061DD                 align 10h
.data:000061DD _data           ends
.data:000061DD
.rdata$r:000061E0 ; ===========================================================================
.rdata$r:000061E0
.rdata$r:000061E0 ; Segment type: Pure data
.rdata$r:000061E0 ; Segment permissions: Read
.rdata$r:000061E0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000061E0                 assume cs:_rdata$r
.rdata$r:000061E0                 ;org 61E0h
.rdata$r:000061E0 ; COMDAT (pick any)
.rdata$r:000061E0                 public ??_R3IFolderArchiveExtractCallback2@@8
.rdata$r:000061E0 ; IFolderArchiveExtractCallback2::`RTTI Class Hierarchy Descriptor'
.rdata$r:000061E0 ??_R3IFolderArchiveExtractCallback2@@8 db    0
.rdata$r:000061E0                                         ; DATA XREF: .rdata$r:000061ACo
.rdata$r:000061E0                                         ; .rdata$r:00006214o ...
.rdata$r:000061E1                 db    0
.rdata$r:000061E2                 db    0
.rdata$r:000061E3                 db    0
.rdata$r:000061E4                 db    0
.rdata$r:000061E5                 db    0
.rdata$r:000061E6                 db    0
.rdata$r:000061E7                 db    0
.rdata$r:000061E8                 db    2
.rdata$r:000061E9                 db    0
.rdata$r:000061EA                 db    0
.rdata$r:000061EB                 db    0
.rdata$r:000061EC                 dd offset ??_R2IFolderArchiveExtractCallback2@@8 ; IFolderArchiveExtractCallback2::`RTTI Base Class Array'
.rdata$r:000061EC _rdata$r        ends
.rdata$r:000061EC
.rdata$r:000061F0 ; ===========================================================================
.rdata$r:000061F0
.rdata$r:000061F0 ; Segment type: Pure data
.rdata$r:000061F0 ; Segment permissions: Read
.rdata$r:000061F0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000061F0                 assume cs:_rdata$r
.rdata$r:000061F0                 ;org 61F0h
.rdata$r:000061F0 ; COMDAT (pick any)
.rdata$r:000061F0                 public ??_R2IFolderArchiveExtractCallback2@@8
.rdata$r:000061F0 ; IFolderArchiveExtractCallback2::`RTTI Base Class Array'
.rdata$r:000061F0 ??_R2IFolderArchiveExtractCallback2@@8 dd offset ??_R1A@?0A@EA@IFolderArchiveExtractCallback2@@8
.rdata$r:000061F0                                         ; DATA XREF: .rdata$r:000061ECo
.rdata$r:000061F0                                         ; IFolderArchiveExtractCallback2::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000061F4                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000061F8                 db    0
.rdata$r:000061F9                 align 4
.rdata$r:000061F9 _rdata$r        ends
.rdata$r:000061F9
.rdata$r:000061FC ; ===========================================================================
.rdata$r:000061FC
.rdata$r:000061FC ; Segment type: Pure data
.rdata$r:000061FC ; Segment permissions: Read
.rdata$r:000061FC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000061FC                 assume cs:_rdata$r
.rdata$r:000061FC                 ;org 61FCh
.rdata$r:000061FC ; COMDAT (pick any)
.rdata$r:000061FC                 public ??_R1A@?0A@EA@IFolderArchiveExtractCallback2@@8
.rdata$r:000061FC ; IFolderArchiveExtractCallback2::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000061FC ??_R1A@?0A@EA@IFolderArchiveExtractCallback2@@8 dd offset ??_R0?AUIFolderArchiveExtractCallback2@@@8
.rdata$r:000061FC                                         ; DATA XREF: .rdata$r:IFolderArchiveExtractCallback2::`RTTI Base Class Array'o
.rdata$r:000061FC                                         ; IFolderArchiveExtractCallback2 `RTTI Type Descriptor'
.rdata$r:00006200                 db    1
.rdata$r:00006201                 db    0
.rdata$r:00006202                 db    0
.rdata$r:00006203                 db    0
.rdata$r:00006204                 db    0
.rdata$r:00006205                 db    0
.rdata$r:00006206                 db    0
.rdata$r:00006207                 db    0
.rdata$r:00006208                 db 0FFh
.rdata$r:00006209                 db 0FFh
.rdata$r:0000620A                 db 0FFh
.rdata$r:0000620B                 db 0FFh
.rdata$r:0000620C                 db    0
.rdata$r:0000620D                 db    0
.rdata$r:0000620E                 db    0
.rdata$r:0000620F                 db    0
.rdata$r:00006210                 db  40h ; @
.rdata$r:00006211                 db    0
.rdata$r:00006212                 db    0
.rdata$r:00006213                 db    0
.rdata$r:00006214                 dd offset ??_R3IFolderArchiveExtractCallback2@@8 ; IFolderArchiveExtractCallback2::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006214 _rdata$r        ends
.rdata$r:00006214
.rdata$r:00006218 ; ===========================================================================
.rdata$r:00006218
.rdata$r:00006218 ; Segment type: Pure data
.rdata$r:00006218 ; Segment permissions: Read
.rdata$r:00006218 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006218                 assume cs:_rdata$r
.rdata$r:00006218                 ;org 6218h
.rdata$r:00006218 ; COMDAT (pick any)
.rdata$r:00006218                 public ??_R13?0A@EC@IUnknown@@8
.rdata$r:00006218 ; IUnknown::`RTTI Base Class Descriptor at (4, -1, 0, 66)'
.rdata$r:00006218 ??_R13?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00006218                                         ; DATA XREF: .rdata$r:00006024o
.rdata$r:00006218                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:0000621C                 align 10h
.rdata$r:00006220                 db    4
.rdata$r:00006221                 db    0
.rdata$r:00006222                 db    0
.rdata$r:00006223                 db    0
.rdata$r:00006224                 db 0FFh
.rdata$r:00006225                 db 0FFh
.rdata$r:00006226                 db 0FFh
.rdata$r:00006227                 db 0FFh
.rdata$r:00006228                 db    0
.rdata$r:00006229                 db    0
.rdata$r:0000622A                 db    0
.rdata$r:0000622B                 db    0
.rdata$r:0000622C                 db  42h ; B
.rdata$r:0000622D                 db    0
.rdata$r:0000622E                 db    0
.rdata$r:0000622F                 db    0
.rdata$r:00006230                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006230 _rdata$r        ends
.rdata$r:00006230
.rdata$r:00006234 ; ===========================================================================
.rdata$r:00006234
.rdata$r:00006234 ; Segment type: Pure data
.rdata$r:00006234 ; Segment permissions: Read
.rdata$r:00006234 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006234                 assume cs:_rdata$r
.rdata$r:00006234                 ;org 6234h
.rdata$r:00006234 ; COMDAT (pick any)
.rdata$r:00006234                 public ??_R17?0A@EA@ICryptoGetTextPassword@@8
.rdata$r:00006234 ; ICryptoGetTextPassword::`RTTI Base Class Descriptor at (8, -1, 0, 64)'
.rdata$r:00006234 ??_R17?0A@EA@ICryptoGetTextPassword@@8 dd offset ??_R0?AUICryptoGetTextPassword@@@8
.rdata$r:00006234                                         ; DATA XREF: .rdata$r:00006028o
.rdata$r:00006234                                         ; ICryptoGetTextPassword `RTTI Type Descriptor'
.rdata$r:00006238                 db    1
.rdata$r:00006239                 db    0
.rdata$r:0000623A                 db    0
.rdata$r:0000623B                 db    0
.rdata$r:0000623C                 db    8
.rdata$r:0000623D                 db    0
.rdata$r:0000623E                 db    0
.rdata$r:0000623F                 db    0
.rdata$r:00006240                 db 0FFh
.rdata$r:00006241                 db 0FFh
.rdata$r:00006242                 db 0FFh
.rdata$r:00006243                 db 0FFh
.rdata$r:00006244                 db    0
.rdata$r:00006245                 db    0
.rdata$r:00006246                 db    0
.rdata$r:00006247                 db    0
.rdata$r:00006248                 db  40h ; @
.rdata$r:00006249                 db    0
.rdata$r:0000624A                 db    0
.rdata$r:0000624B                 db    0
.rdata$r:0000624C                 dd offset ??_R3ICryptoGetTextPassword@@8 ; ICryptoGetTextPassword::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000624C _rdata$r        ends
.rdata$r:0000624C
.data:00006250 ; ===========================================================================
.data:00006250
.data:00006250 ; Segment type: Pure data
.data:00006250 ; Segment permissions: Read/Write
.data:00006250 _data           segment dword public 'DATA' use32
.data:00006250                 assume cs:_data
.data:00006250                 ;org 6250h
.data:00006250 ; COMDAT (pick any)
.data:00006250                 public ??_R0?AUICryptoGetTextPassword@@@8
.data:00006250 ; struct ICryptoGetTextPassword `RTTI Type Descriptor'
.data:00006250 ??_R0?AUICryptoGetTextPassword@@@8 dd offset ??_7type_info@@6B@
.data:00006250                                         ; DATA XREF: .rdata$r:ICryptoGetTextPassword::`RTTI Base Class Descriptor at (8,-1,0,64)'o
.data:00006250                                         ; .rdata$r:ICryptoGetTextPassword::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00006250                                         ; const type_info::`vftable'
.data:00006254                 align 8
.data:00006258 a_?auicryptoget db '.?AUICryptoGetTextPassword@@',0
.data:00006275                 align 4
.data:00006275 _data           ends
.data:00006275
.rdata$r:00006278 ; ===========================================================================
.rdata$r:00006278
.rdata$r:00006278 ; Segment type: Pure data
.rdata$r:00006278 ; Segment permissions: Read
.rdata$r:00006278 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006278                 assume cs:_rdata$r
.rdata$r:00006278                 ;org 6278h
.rdata$r:00006278 ; COMDAT (pick any)
.rdata$r:00006278                 public ??_R3ICryptoGetTextPassword@@8
.rdata$r:00006278 ; ICryptoGetTextPassword::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006278 ??_R3ICryptoGetTextPassword@@8 db    0  ; DATA XREF: .rdata$r:0000624Co
.rdata$r:00006278                                         ; .rdata$r:000062ACo ...
.rdata$r:00006279                 db    0
.rdata$r:0000627A                 db    0
.rdata$r:0000627B                 db    0
.rdata$r:0000627C                 db    0
.rdata$r:0000627D                 db    0
.rdata$r:0000627E                 db    0
.rdata$r:0000627F                 db    0
.rdata$r:00006280                 db    2
.rdata$r:00006281                 db    0
.rdata$r:00006282                 db    0
.rdata$r:00006283                 db    0
.rdata$r:00006284                 dd offset ??_R2ICryptoGetTextPassword@@8 ; ICryptoGetTextPassword::`RTTI Base Class Array'
.rdata$r:00006284 _rdata$r        ends
.rdata$r:00006284
.rdata$r:00006288 ; ===========================================================================
.rdata$r:00006288
.rdata$r:00006288 ; Segment type: Pure data
.rdata$r:00006288 ; Segment permissions: Read
.rdata$r:00006288 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006288                 assume cs:_rdata$r
.rdata$r:00006288                 ;org 6288h
.rdata$r:00006288 ; COMDAT (pick any)
.rdata$r:00006288                 public ??_R2ICryptoGetTextPassword@@8
.rdata$r:00006288 ; ICryptoGetTextPassword::`RTTI Base Class Array'
.rdata$r:00006288 ??_R2ICryptoGetTextPassword@@8 dd offset ??_R1A@?0A@EA@ICryptoGetTextPassword@@8
.rdata$r:00006288                                         ; DATA XREF: .rdata$r:00006284o
.rdata$r:00006288                                         ; ICryptoGetTextPassword::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000628C                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00006290                 db    0
.rdata$r:00006291                 align 4
.rdata$r:00006291 _rdata$r        ends
.rdata$r:00006291
.rdata$r:00006294 ; ===========================================================================
.rdata$r:00006294
.rdata$r:00006294 ; Segment type: Pure data
.rdata$r:00006294 ; Segment permissions: Read
.rdata$r:00006294 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006294                 assume cs:_rdata$r
.rdata$r:00006294                 ;org 6294h
.rdata$r:00006294 ; COMDAT (pick any)
.rdata$r:00006294                 public ??_R1A@?0A@EA@ICryptoGetTextPassword@@8
.rdata$r:00006294 ; ICryptoGetTextPassword::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00006294 ??_R1A@?0A@EA@ICryptoGetTextPassword@@8 dd offset ??_R0?AUICryptoGetTextPassword@@@8
.rdata$r:00006294                                         ; DATA XREF: .rdata$r:ICryptoGetTextPassword::`RTTI Base Class Array'o
.rdata$r:00006294                                         ; ICryptoGetTextPassword `RTTI Type Descriptor'
.rdata$r:00006298                 db    1
.rdata$r:00006299                 db    0
.rdata$r:0000629A                 db    0
.rdata$r:0000629B                 db    0
.rdata$r:0000629C                 db    0
.rdata$r:0000629D                 db    0
.rdata$r:0000629E                 db    0
.rdata$r:0000629F                 db    0
.rdata$r:000062A0                 db 0FFh
.rdata$r:000062A1                 db 0FFh
.rdata$r:000062A2                 db 0FFh
.rdata$r:000062A3                 db 0FFh
.rdata$r:000062A4                 db    0
.rdata$r:000062A5                 db    0
.rdata$r:000062A6                 db    0
.rdata$r:000062A7                 db    0
.rdata$r:000062A8                 db  40h ; @
.rdata$r:000062A9                 db    0
.rdata$r:000062AA                 db    0
.rdata$r:000062AB                 db    0
.rdata$r:000062AC                 dd offset ??_R3ICryptoGetTextPassword@@8 ; ICryptoGetTextPassword::`RTTI Class Hierarchy Descriptor'
.rdata$r:000062AC _rdata$r        ends
.rdata$r:000062AC
.rdata$r:000062B0 ; ===========================================================================
.rdata$r:000062B0
.rdata$r:000062B0 ; Segment type: Pure data
.rdata$r:000062B0 ; Segment permissions: Read
.rdata$r:000062B0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000062B0                 assume cs:_rdata$r
.rdata$r:000062B0                 ;org 62B0h
.rdata$r:000062B0 ; COMDAT (pick any)
.rdata$r:000062B0                 public ??_R17?0A@EC@IUnknown@@8
.rdata$r:000062B0 ; IUnknown::`RTTI Base Class Descriptor at (8, -1, 0, 66)'
.rdata$r:000062B0 ??_R17?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000062B0                                         ; DATA XREF: .rdata$r:0000602Co
.rdata$r:000062B0                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:000062B4                 align 8
.rdata$r:000062B8                 db    8
.rdata$r:000062B9                 db    0
.rdata$r:000062BA                 db    0
.rdata$r:000062BB                 db    0
.rdata$r:000062BC                 db 0FFh
.rdata$r:000062BD                 db 0FFh
.rdata$r:000062BE                 db 0FFh
.rdata$r:000062BF                 db 0FFh
.rdata$r:000062C0                 db    0
.rdata$r:000062C1                 db    0
.rdata$r:000062C2                 db    0
.rdata$r:000062C3                 db    0
.rdata$r:000062C4                 db  42h ; B
.rdata$r:000062C5                 db    0
.rdata$r:000062C6                 db    0
.rdata$r:000062C7                 db    0
.rdata$r:000062C8                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000062C8 _rdata$r        ends
.rdata$r:000062C8
.rdata$r:000062CC ; ===========================================================================
.rdata$r:000062CC
.rdata$r:000062CC ; Segment type: Pure data
.rdata$r:000062CC ; Segment permissions: Read
.rdata$r:000062CC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000062CC                 assume cs:_rdata$r
.rdata$r:000062CC                 ;org 62CCh
.rdata$r:000062CC ; COMDAT (pick any)
.rdata$r:000062CC                 public ??_R1BA@?0A@EA@COpenCallbackConsole@@8
.rdata$r:000062CC ; COpenCallbackConsole::`RTTI Base Class Descriptor at (16, -1, 0, 64)'
.rdata$r:000062CC ??_R1BA@?0A@EA@COpenCallbackConsole@@8 dd offset ??_R0?AVCOpenCallbackConsole@@@8
.rdata$r:000062CC                                         ; DATA XREF: .rdata$r:00006030o
.rdata$r:000062CC                                         ; COpenCallbackConsole `RTTI Type Descriptor'
.rdata$r:000062D0                 db    1
.rdata$r:000062D1                 db    0
.rdata$r:000062D2                 db    0
.rdata$r:000062D3                 db    0
.rdata$r:000062D4                 db  10h
.rdata$r:000062D5                 db    0
.rdata$r:000062D6                 db    0
.rdata$r:000062D7                 db    0
.rdata$r:000062D8                 db 0FFh
.rdata$r:000062D9                 db 0FFh
.rdata$r:000062DA                 db 0FFh
.rdata$r:000062DB                 db 0FFh
.rdata$r:000062DC                 db    0
.rdata$r:000062DD                 db    0
.rdata$r:000062DE                 db    0
.rdata$r:000062DF                 db    0
.rdata$r:000062E0                 db  40h ; @
.rdata$r:000062E1                 db    0
.rdata$r:000062E2                 db    0
.rdata$r:000062E3                 db    0
.rdata$r:000062E4                 dd offset ??_R3COpenCallbackConsole@@8 ; COpenCallbackConsole::`RTTI Class Hierarchy Descriptor'
.rdata$r:000062E4 _rdata$r        ends
.rdata$r:000062E4
.rdata$r:000062E8 ; ===========================================================================
.rdata$r:000062E8
.rdata$r:000062E8 ; Segment type: Pure data
.rdata$r:000062E8 ; Segment permissions: Read
.rdata$r:000062E8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000062E8                 assume cs:_rdata$r
.rdata$r:000062E8                 ;org 62E8h
.rdata$r:000062E8 ; COMDAT (pick any)
.rdata$r:000062E8                 public ??_R1BA@?0A@EA@IOpenCallbackUI@@8
.rdata$r:000062E8 ; IOpenCallbackUI::`RTTI Base Class Descriptor at (16, -1, 0, 64)'
.rdata$r:000062E8 ??_R1BA@?0A@EA@IOpenCallbackUI@@8 dd offset ??_R0?AUIOpenCallbackUI@@@8
.rdata$r:000062E8                                         ; DATA XREF: .rdata$r:00006034o
.rdata$r:000062E8                                         ; IOpenCallbackUI `RTTI Type Descriptor'
.rdata$r:000062EC                 align 10h
.rdata$r:000062F0                 db  10h
.rdata$r:000062F1                 db    0
.rdata$r:000062F2                 db    0
.rdata$r:000062F3                 db    0
.rdata$r:000062F4                 db 0FFh
.rdata$r:000062F5                 db 0FFh
.rdata$r:000062F6                 db 0FFh
.rdata$r:000062F7                 db 0FFh
.rdata$r:000062F8                 db    0
.rdata$r:000062F9                 db    0
.rdata$r:000062FA                 db    0
.rdata$r:000062FB                 db    0
.rdata$r:000062FC                 db  40h ; @
.rdata$r:000062FD                 db    0
.rdata$r:000062FE                 db    0
.rdata$r:000062FF                 db    0
.rdata$r:00006300                 dd offset ??_R3IOpenCallbackUI@@8 ; IOpenCallbackUI::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006300 _rdata$r        ends
.rdata$r:00006300
.rdata$r:00006304 ; ===========================================================================
.rdata$r:00006304
.rdata$r:00006304 ; Segment type: Pure data
.rdata$r:00006304 ; Segment permissions: Read
.rdata$r:00006304 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006304                 assume cs:_rdata$r
.rdata$r:00006304                 ;org 6304h
.rdata$r:00006304 ; COMDAT (pick any)
.rdata$r:00006304                 public ??_R1OA@?0A@EA@CMyUnknownImp@@8
.rdata$r:00006304 ; CMyUnknownImp::`RTTI Base Class Descriptor at (224, -1, 0, 64)'
.rdata$r:00006304 ??_R1OA@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00006304                                         ; DATA XREF: .rdata$r:00006038o
.rdata$r:00006304                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00006308                 db    0
.rdata$r:00006309                 db    0
.rdata$r:0000630A                 db    0
.rdata$r:0000630B                 db    0
.rdata$r:0000630C                 db 0E0h ; a
.rdata$r:0000630D                 db    0
.rdata$r:0000630E                 db    0
.rdata$r:0000630F                 db    0
.rdata$r:00006310                 db 0FFh
.rdata$r:00006311                 db 0FFh
.rdata$r:00006312                 db 0FFh
.rdata$r:00006313                 db 0FFh
.rdata$r:00006314                 db    0
.rdata$r:00006315                 db    0
.rdata$r:00006316                 db    0
.rdata$r:00006317                 db    0
.rdata$r:00006318                 db  40h ; @
.rdata$r:00006319                 db    0
.rdata$r:0000631A                 db    0
.rdata$r:0000631B                 db    0
.rdata$r:0000631C                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000631C _rdata$r        ends
.rdata$r:0000631C
.rdata$r:00006320 ; ===========================================================================
.rdata$r:00006320
.rdata$r:00006320 ; Segment type: Pure data
.rdata$r:00006320 ; Segment permissions: Read
.rdata$r:00006320 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006320                 assume cs:_rdata$r
.rdata$r:00006320                 ;org 6320h
.rdata$r:00006320 ; COMDAT (pick any)
.rdata$r:00006320                 public ??_R4CExtractCallbackConsole@@6BIFolderArchiveExtractCallback2@@@
.rdata$r:00006320 ; const CExtractCallbackConsole::`RTTI Complete Object Locator'{for `IFolderArchiveExtractCallback2'}
.rdata$r:00006320 ??_R4CExtractCallbackConsole@@6BIFolderArchiveExtractCallback2@@@ db    0
.rdata$r:00006320                                         ; DATA XREF: .rdata:00005F34o
.rdata$r:00006321                 db    0
.rdata$r:00006322                 db    0
.rdata$r:00006323                 db    0
.rdata$r:00006324                 db    4
.rdata$r:00006325                 db    0
.rdata$r:00006326                 db    0
.rdata$r:00006327                 db    0
.rdata$r:00006328                 db    0
.rdata$r:00006329                 db    0
.rdata$r:0000632A                 db    0
.rdata$r:0000632B                 db    0
.rdata$r:0000632C                 dd offset ??_R0?AVCExtractCallbackConsole@@@8 ; CExtractCallbackConsole `RTTI Type Descriptor'
.rdata$r:00006330                 dd offset ??_R3CExtractCallbackConsole@@8 ; CExtractCallbackConsole::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006330 _rdata$r        ends
.rdata$r:00006330
.rdata$r:00006334 ; ===========================================================================
.rdata$r:00006334
.rdata$r:00006334 ; Segment type: Pure data
.rdata$r:00006334 ; Segment permissions: Read
.rdata$r:00006334 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006334                 assume cs:_rdata$r
.rdata$r:00006334                 ;org 6334h
.rdata$r:00006334 ; COMDAT (pick any)
.rdata$r:00006334                 public ??_R4CExtractCallbackConsole@@6BICryptoGetTextPassword@@@
.rdata$r:00006334 ; const CExtractCallbackConsole::`RTTI Complete Object Locator'{for `ICryptoGetTextPassword'}
.rdata$r:00006334 ??_R4CExtractCallbackConsole@@6BICryptoGetTextPassword@@@ db    0
.rdata$r:00006334                                         ; DATA XREF: .rdata:00005F20o
.rdata$r:00006335                 db    0
.rdata$r:00006336                 db    0
.rdata$r:00006337                 db    0
.rdata$r:00006338                 db    8
.rdata$r:00006339                 db    0
.rdata$r:0000633A                 db    0
.rdata$r:0000633B                 db    0
.rdata$r:0000633C                 db    0
.rdata$r:0000633D                 db    0
.rdata$r:0000633E                 db    0
.rdata$r:0000633F                 db    0
.rdata$r:00006340                 dd offset ??_R0?AVCExtractCallbackConsole@@@8 ; CExtractCallbackConsole `RTTI Type Descriptor'
.rdata$r:00006344                 dd offset ??_R3CExtractCallbackConsole@@8 ; CExtractCallbackConsole::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006344 _rdata$r        ends
.rdata$r:00006344
.rdata$r:00006348 ; ===========================================================================
.rdata$r:00006348
.rdata$r:00006348 ; Segment type: Pure data
.rdata$r:00006348 ; Segment permissions: Read
.rdata$r:00006348 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006348                 assume cs:_rdata$r
.rdata$r:00006348                 ;org 6348h
.rdata$r:00006348 ; COMDAT (pick any)
.rdata$r:00006348                 public ??_R4CExtractCallbackConsole@@6BCOpenCallbackConsole@@@
.rdata$r:00006348 ; const CExtractCallbackConsole::`RTTI Complete Object Locator'{for `COpenCallbackConsole'}
.rdata$r:00006348 ??_R4CExtractCallbackConsole@@6BCOpenCallbackConsole@@@ db    0
.rdata$r:00006348                                         ; DATA XREF: .rdata:00005F08o
.rdata$r:00006349                 db    0
.rdata$r:0000634A                 db    0
.rdata$r:0000634B                 db    0
.rdata$r:0000634C                 db  10h
.rdata$r:0000634D                 db    0
.rdata$r:0000634E                 db    0
.rdata$r:0000634F                 db    0
.rdata$r:00006350                 db    0
.rdata$r:00006351                 db    0
.rdata$r:00006352                 db    0
.rdata$r:00006353                 db    0
.rdata$r:00006354                 dd offset ??_R0?AVCExtractCallbackConsole@@@8 ; CExtractCallbackConsole `RTTI Type Descriptor'
.rdata$r:00006358                 dd offset ??_R3CExtractCallbackConsole@@8 ; CExtractCallbackConsole::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006358 _rdata$r        ends
.rdata$r:00006358
.text:0000635C ; ===========================================================================
.text:0000635C
.text:0000635C ; Segment type: Pure code
.text:0000635C ; Segment permissions: Read/Execute
.text:0000635C _text           segment para public 'CODE' use32
.text:0000635C                 assume cs:_text
.text:0000635C                 ;org 635Ch
.text:0000635C ; COMDAT (pick any)
.text:0000635C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000635C
.text:0000635C ; =============== S U B R O U T I N E =======================================
.text:0000635C
.text:0000635C ; Attributes: bp-based frame
.text:0000635C
.text:0000635C ; _DWORD __thiscall ICryptoGetTextPassword::ICryptoGetTextPassword(ICryptoGetTextPassword *__hidden this)
.text:0000635C                 public ??0ICryptoGetTextPassword@@QAE@XZ
.text:0000635C ??0ICryptoGetTextPassword@@QAE@XZ proc near
.text:0000635C                                         ; CODE XREF: CExtractCallbackConsole::CExtractCallbackConsole(void)+46p
.text:0000635C
.text:0000635C var_4           = dword ptr -4
.text:0000635C
.text:0000635C                 push    ebp
.text:0000635D                 mov     ebp, esp
.text:0000635F                 push    ecx
.text:00006360                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006367                 mov     [ebp+var_4], ecx
.text:0000636A                 mov     ecx, [ebp+var_4]
.text:0000636D                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00006372                 mov     eax, [ebp+var_4]
.text:00006375                 mov     dword ptr [eax], offset ??_7ICryptoGetTextPassword@@6B@ ; const ICryptoGetTextPassword::`vftable'
.text:0000637B                 mov     eax, [ebp+var_4]
.text:0000637E                 add     esp, 4
.text:00006381                 cmp     ebp, esp
.text:00006383                 call    __RTC_CheckEsp
.text:00006388                 mov     esp, ebp
.text:0000638A                 pop     ebp
.text:0000638B                 retn
.text:0000638B ??0ICryptoGetTextPassword@@QAE@XZ endp
.text:0000638B
.text:0000638B _text           ends
.text:0000638B
.rdata:0000638C ; ===========================================================================
.rdata:0000638C
.rdata:0000638C ; Segment type: Pure data
.rdata:0000638C ; Segment permissions: Read
.rdata:0000638C _rdata          segment dword public 'DATA' use32
.rdata:0000638C                 assume cs:_rdata
.rdata:0000638C                 ;org 638Ch
.rdata:0000638C ; COMDAT (pick largest)
.rdata:0000638C                 dd offset ??_R4ICryptoGetTextPassword@@6B@ ; const ICryptoGetTextPassword::`RTTI Complete Object Locator'
.rdata:00006390                 public ??_7ICryptoGetTextPassword@@6B@
.rdata:00006390 ; const ICryptoGetTextPassword::`vftable'
.rdata:00006390 ??_7ICryptoGetTextPassword@@6B@ dd offset __purecall
.rdata:00006390                                         ; DATA XREF: ICryptoGetTextPassword::ICryptoGetTextPassword(void)+19o
.rdata:00006394                 dd offset __purecall
.rdata:00006398                 dd offset __purecall
.rdata:0000639C                 dd offset __purecall
.rdata:0000639C _rdata          ends
.rdata:0000639C
.rdata$r:000063A0 ; ===========================================================================
.rdata$r:000063A0
.rdata$r:000063A0 ; Segment type: Pure data
.rdata$r:000063A0 ; Segment permissions: Read
.rdata$r:000063A0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000063A0                 assume cs:_rdata$r
.rdata$r:000063A0                 ;org 63A0h
.rdata$r:000063A0 ; COMDAT (pick any)
.rdata$r:000063A0                 public ??_R4ICryptoGetTextPassword@@6B@
.rdata$r:000063A0 ; const ICryptoGetTextPassword::`RTTI Complete Object Locator'
.rdata$r:000063A0 ??_R4ICryptoGetTextPassword@@6B@ db    0 ; DATA XREF: .rdata:0000638Co
.rdata$r:000063A1                 db    0
.rdata$r:000063A2                 db    0
.rdata$r:000063A3                 db    0
.rdata$r:000063A4                 db    0
.rdata$r:000063A5                 db    0
.rdata$r:000063A6                 db    0
.rdata$r:000063A7                 db    0
.rdata$r:000063A8                 db    0
.rdata$r:000063A9                 db    0
.rdata$r:000063AA                 db    0
.rdata$r:000063AB                 db    0
.rdata$r:000063AC                 dd offset ??_R0?AUICryptoGetTextPassword@@@8 ; ICryptoGetTextPassword `RTTI Type Descriptor'
.rdata$r:000063B0                 dd offset ??_R3ICryptoGetTextPassword@@8 ; ICryptoGetTextPassword::`RTTI Class Hierarchy Descriptor'
.rdata$r:000063B0 _rdata$r        ends
.rdata$r:000063B0
.text:000063B4 ; ===========================================================================
.text:000063B4
.text:000063B4 ; Segment type: Pure code
.text:000063B4 ; Segment permissions: Read/Execute
.text:000063B4 _text           segment para public 'CODE' use32
.text:000063B4                 assume cs:_text
.text:000063B4                 ;org 63B4h
.text:000063B4 ; COMDAT (pick any)
.text:000063B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000063B4
.text:000063B4 ; =============== S U B R O U T I N E =======================================
.text:000063B4
.text:000063B4 ; Attributes: bp-based frame
.text:000063B4
.text:000063B4 ; __int32 __stdcall CExtractCallbackConsole::QueryInterface(CExtractCallbackConsole *this, const struct _GUID *Buf1, void **)
.text:000063B4                 public ?QueryInterface@CExtractCallbackConsole@@UAGJABU_GUID@@PAPAX@Z
.text:000063B4 ?QueryInterface@CExtractCallbackConsole@@UAGJABU_GUID@@PAPAX@Z proc near
.text:000063B4                                         ; CODE XREF: [thunk]:CExtractCallbackConsole::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j
.text:000063B4                                         ; [thunk]:CExtractCallbackConsole::QueryInterface`adjustor{8}' (_GUID const &,void * *)+5j
.text:000063B4                                         ; DATA XREF: ...
.text:000063B4
.text:000063B4 var_8           = dword ptr -8
.text:000063B4 var_4           = dword ptr -4
.text:000063B4 this            = dword ptr  8
.text:000063B4 Buf1            = dword ptr  0Ch
.text:000063B4 arg_8           = dword ptr  10h
.text:000063B4
.text:000063B4                 push    ebp
.text:000063B5                 mov     ebp, esp
.text:000063B7                 sub     esp, 8
.text:000063BA                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000063C1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000063C8                 mov     eax, [ebp+arg_8]
.text:000063CB                 mov     dword ptr [eax], 0
.text:000063D1                 push    offset _IID_IUnknown ; Buf2
.text:000063D6                 mov     ecx, [ebp+Buf1]
.text:000063D9                 push    ecx             ; Buf1
.text:000063DA                 call    ___@8           ; __(x,x)
.text:000063DF                 test    eax, eax
.text:000063E1                 jz      short loc_63F0
.text:000063E3                 mov     edx, [ebp+arg_8]
.text:000063E6                 mov     eax, [ebp+this]
.text:000063E9                 mov     [edx], eax
.text:000063EB                 jmp     loc_647B
.text:000063F0 ; ---------------------------------------------------------------------------
.text:000063F0
.text:000063F0 loc_63F0:                               ; CODE XREF: CExtractCallbackConsole::QueryInterface(_GUID const &,void * *)+2Dj
.text:000063F0                 push    offset _IID_IFolderArchiveExtractCallback ; Buf2
.text:000063F5                 mov     ecx, [ebp+Buf1]
.text:000063F8                 push    ecx             ; Buf1
.text:000063F9                 call    ___@8           ; __(x,x)
.text:000063FE                 test    eax, eax
.text:00006400                 jz      short loc_640C
.text:00006402                 mov     edx, [ebp+arg_8]
.text:00006405                 mov     eax, [ebp+this]
.text:00006408                 mov     [edx], eax
.text:0000640A                 jmp     short loc_647B
.text:0000640C ; ---------------------------------------------------------------------------
.text:0000640C
.text:0000640C loc_640C:                               ; CODE XREF: CExtractCallbackConsole::QueryInterface(_GUID const &,void * *)+4Cj
.text:0000640C                 push    offset _IID_IFolderArchiveExtractCallback2 ; Buf2
.text:00006411                 mov     ecx, [ebp+Buf1]
.text:00006414                 push    ecx             ; Buf1
.text:00006415                 call    ___@8           ; __(x,x)
.text:0000641A                 test    eax, eax
.text:0000641C                 jz      short loc_6440
.text:0000641E                 cmp     [ebp+this], 0
.text:00006422                 jz      short loc_642F
.text:00006424                 mov     edx, [ebp+this]
.text:00006427                 add     edx, 4
.text:0000642A                 mov     [ebp+var_4], edx
.text:0000642D                 jmp     short loc_6436
.text:0000642F ; ---------------------------------------------------------------------------
.text:0000642F
.text:0000642F loc_642F:                               ; CODE XREF: CExtractCallbackConsole::QueryInterface(_GUID const &,void * *)+6Ej
.text:0000642F                 mov     [ebp+var_4], 0
.text:00006436
.text:00006436 loc_6436:                               ; CODE XREF: CExtractCallbackConsole::QueryInterface(_GUID const &,void * *)+79j
.text:00006436                 mov     eax, [ebp+arg_8]
.text:00006439                 mov     ecx, [ebp+var_4]
.text:0000643C                 mov     [eax], ecx
.text:0000643E                 jmp     short loc_647B
.text:00006440 ; ---------------------------------------------------------------------------
.text:00006440
.text:00006440 loc_6440:                               ; CODE XREF: CExtractCallbackConsole::QueryInterface(_GUID const &,void * *)+68j
.text:00006440                 push    offset _IID_ICryptoGetTextPassword ; Buf2
.text:00006445                 mov     edx, [ebp+Buf1]
.text:00006448                 push    edx             ; Buf1
.text:00006449                 call    ___@8           ; __(x,x)
.text:0000644E                 test    eax, eax
.text:00006450                 jz      short loc_6474
.text:00006452                 cmp     [ebp+this], 0
.text:00006456                 jz      short loc_6463
.text:00006458                 mov     eax, [ebp+this]
.text:0000645B                 add     eax, 8
.text:0000645E                 mov     [ebp+var_8], eax
.text:00006461                 jmp     short loc_646A
.text:00006463 ; ---------------------------------------------------------------------------
.text:00006463
.text:00006463 loc_6463:                               ; CODE XREF: CExtractCallbackConsole::QueryInterface(_GUID const &,void * *)+A2j
.text:00006463                 mov     [ebp+var_8], 0
.text:0000646A
.text:0000646A loc_646A:                               ; CODE XREF: CExtractCallbackConsole::QueryInterface(_GUID const &,void * *)+ADj
.text:0000646A                 mov     ecx, [ebp+arg_8]
.text:0000646D                 mov     edx, [ebp+var_8]
.text:00006470                 mov     [ecx], edx
.text:00006472                 jmp     short loc_647B
.text:00006474 ; ---------------------------------------------------------------------------
.text:00006474
.text:00006474 loc_6474:                               ; CODE XREF: CExtractCallbackConsole::QueryInterface(_GUID const &,void * *)+9Cj
.text:00006474                 mov     eax, 80004002h
.text:00006479                 jmp     short loc_6492
.text:0000647B ; ---------------------------------------------------------------------------
.text:0000647B
.text:0000647B loc_647B:                               ; CODE XREF: CExtractCallbackConsole::QueryInterface(_GUID const &,void * *)+37j
.text:0000647B                                         ; CExtractCallbackConsole::QueryInterface(_GUID const &,void * *)+56j ...
.text:0000647B                 mov     eax, [ebp+this]
.text:0000647E                 mov     ecx, [eax+0E0h]
.text:00006484                 add     ecx, 1
.text:00006487                 mov     edx, [ebp+this]
.text:0000648A                 mov     [edx+0E0h], ecx
.text:00006490                 xor     eax, eax
.text:00006492
.text:00006492 loc_6492:                               ; CODE XREF: CExtractCallbackConsole::QueryInterface(_GUID const &,void * *)+C5j
.text:00006492                 add     esp, 8
.text:00006495                 cmp     ebp, esp
.text:00006497                 call    __RTC_CheckEsp
.text:0000649C                 mov     esp, ebp
.text:0000649E                 pop     ebp
.text:0000649F                 retn    0Ch
.text:0000649F ?QueryInterface@CExtractCallbackConsole@@UAGJABU_GUID@@PAPAX@Z endp
.text:0000649F
.text:0000649F ; ---------------------------------------------------------------------------
.text:000064A2                 align 4
.text:000064A2 _text           ends
.text:000064A2
.text:000064A4 ; ===========================================================================
.text:000064A4
.text:000064A4 ; Segment type: Pure code
.text:000064A4 ; Segment permissions: Read/Execute
.text:000064A4 _text           segment para public 'CODE' use32
.text:000064A4                 assume cs:_text
.text:000064A4                 ;org 64A4h
.text:000064A4 ; COMDAT (pick any)
.text:000064A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000064A4
.text:000064A4 ; =============== S U B R O U T I N E =======================================
.text:000064A4
.text:000064A4 ; Attributes: bp-based frame
.text:000064A4
.text:000064A4 ; unsigned __int32 __stdcall CExtractCallbackConsole::AddRef(CExtractCallbackConsole *this)
.text:000064A4                 public ?AddRef@CExtractCallbackConsole@@UAGKXZ
.text:000064A4 ?AddRef@CExtractCallbackConsole@@UAGKXZ proc near
.text:000064A4                                         ; CODE XREF: [thunk]:CExtractCallbackConsole::AddRef`adjustor{4}' (void)+5j
.text:000064A4                                         ; [thunk]:CExtractCallbackConsole::AddRef`adjustor{8}' (void)+5j
.text:000064A4                                         ; DATA XREF: ...
.text:000064A4
.text:000064A4 var_4           = dword ptr -4
.text:000064A4 this            = dword ptr  8
.text:000064A4
.text:000064A4                 push    ebp
.text:000064A5                 mov     ebp, esp
.text:000064A7                 push    ecx
.text:000064A8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000064AF                 mov     eax, [ebp+this]
.text:000064B2                 mov     ecx, [eax+0E0h]
.text:000064B8                 add     ecx, 1
.text:000064BB                 mov     [ebp+var_4], ecx
.text:000064BE                 mov     edx, [ebp+this]
.text:000064C1                 mov     eax, [ebp+var_4]
.text:000064C4                 mov     [edx+0E0h], eax
.text:000064CA                 mov     eax, [ebp+var_4]
.text:000064CD                 mov     esp, ebp
.text:000064CF                 pop     ebp
.text:000064D0                 retn    4
.text:000064D0 ?AddRef@CExtractCallbackConsole@@UAGKXZ endp
.text:000064D0
.text:000064D0 ; ---------------------------------------------------------------------------
.text:000064D3                 align 4
.text:000064D3 _text           ends
.text:000064D3
.text:000064D4 ; ===========================================================================
.text:000064D4
.text:000064D4 ; Segment type: Pure code
.text:000064D4 ; Segment permissions: Read/Execute
.text:000064D4 _text           segment para public 'CODE' use32
.text:000064D4                 assume cs:_text
.text:000064D4                 ;org 64D4h
.text:000064D4 ; COMDAT (pick any)
.text:000064D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000064D4
.text:000064D4 ; =============== S U B R O U T I N E =======================================
.text:000064D4
.text:000064D4 ; Attributes: bp-based frame
.text:000064D4
.text:000064D4 ; unsigned __int32 __stdcall CExtractCallbackConsole::Release(CExtractCallbackConsole *this)
.text:000064D4                 public ?Release@CExtractCallbackConsole@@UAGKXZ
.text:000064D4 ?Release@CExtractCallbackConsole@@UAGKXZ proc near
.text:000064D4                                         ; CODE XREF: [thunk]:CExtractCallbackConsole::Release`adjustor{4}' (void)+5j
.text:000064D4                                         ; [thunk]:CExtractCallbackConsole::Release`adjustor{8}' (void)+5j
.text:000064D4                                         ; DATA XREF: ...
.text:000064D4
.text:000064D4 var_10          = dword ptr -10h
.text:000064D4 var_C           = dword ptr -0Ch
.text:000064D4 var_8           = dword ptr -8
.text:000064D4 var_4           = dword ptr -4
.text:000064D4 this            = dword ptr  8
.text:000064D4
.text:000064D4                 push    ebp
.text:000064D5                 mov     ebp, esp
.text:000064D7                 sub     esp, 10h
.text:000064DA                 mov     eax, 0CCCCCCCCh
.text:000064DF                 mov     [ebp+var_10], eax
.text:000064E2                 mov     [ebp+var_C], eax
.text:000064E5                 mov     [ebp+var_8], eax
.text:000064E8                 mov     [ebp+var_4], eax
.text:000064EB                 mov     eax, [ebp+this]
.text:000064EE                 mov     ecx, [eax+0E0h]
.text:000064F4                 sub     ecx, 1
.text:000064F7                 mov     [ebp+var_C], ecx
.text:000064FA                 mov     edx, [ebp+this]
.text:000064FD                 mov     eax, [ebp+var_C]
.text:00006500                 mov     [edx+0E0h], eax
.text:00006506                 cmp     [ebp+var_C], 0
.text:0000650A                 jz      short loc_6517
.text:0000650C                 mov     ecx, [ebp+this]
.text:0000650F                 mov     eax, [ecx+0E0h]
.text:00006515                 jmp     short loc_6541
.text:00006517 ; ---------------------------------------------------------------------------
.text:00006517
.text:00006517 loc_6517:                               ; CODE XREF: CExtractCallbackConsole::Release(void)+36j
.text:00006517                 mov     edx, [ebp+this]
.text:0000651A                 mov     [ebp+var_8], edx
.text:0000651D                 mov     eax, [ebp+var_8]
.text:00006520                 mov     [ebp+var_4], eax
.text:00006523                 cmp     [ebp+var_4], 0
.text:00006527                 jz      short loc_6538
.text:00006529                 push    1
.text:0000652B                 mov     ecx, [ebp+var_4]
.text:0000652E                 call    ??_GCExtractCallbackConsole@@QAEPAXI@Z ; CExtractCallbackConsole::`scalar deleting destructor'(uint)
.text:00006533                 mov     [ebp+var_10], eax
.text:00006536                 jmp     short loc_653F
.text:00006538 ; ---------------------------------------------------------------------------
.text:00006538
.text:00006538 loc_6538:                               ; CODE XREF: CExtractCallbackConsole::Release(void)+53j
.text:00006538                 mov     [ebp+var_10], 0
.text:0000653F
.text:0000653F loc_653F:                               ; CODE XREF: CExtractCallbackConsole::Release(void)+62j
.text:0000653F                 xor     eax, eax
.text:00006541
.text:00006541 loc_6541:                               ; CODE XREF: CExtractCallbackConsole::Release(void)+41j
.text:00006541                 add     esp, 10h
.text:00006544                 cmp     ebp, esp
.text:00006546                 call    __RTC_CheckEsp
.text:0000654B                 mov     esp, ebp
.text:0000654D                 pop     ebp
.text:0000654E                 retn    4
.text:0000654E ?Release@CExtractCallbackConsole@@UAGKXZ endp
.text:0000654E
.text:0000654E ; ---------------------------------------------------------------------------
.text:00006551                 align 4
.text:00006551 _text           ends
.text:00006551
.text:00006554 ; ===========================================================================
.text:00006554
.text:00006554 ; Segment type: Pure code
.text:00006554 ; Segment permissions: Read/Execute
.text:00006554 _text           segment para public 'CODE' use32
.text:00006554                 assume cs:_text
.text:00006554                 ;org 6554h
.text:00006554 ; COMDAT (pick any)
.text:00006554                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006554
.text:00006554 ; =============== S U B R O U T I N E =======================================
.text:00006554
.text:00006554 ; Attributes: bp-based frame
.text:00006554
.text:00006554 ; void __thiscall CExtractCallbackConsole::SetWindowWidth(CExtractCallbackConsole *this, unsigned int)
.text:00006554                 public ?SetWindowWidth@CExtractCallbackConsole@@QAEXI@Z
.text:00006554 ?SetWindowWidth@CExtractCallbackConsole@@QAEXI@Z proc near
.text:00006554                                         ; CODE XREF: Main2(void)+E6Bp
.text:00006554
.text:00006554 var_4           = dword ptr -4
.text:00006554 arg_0           = dword ptr  8
.text:00006554
.text:00006554                 push    ebp
.text:00006555                 mov     ebp, esp
.text:00006557                 push    ecx
.text:00006558                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000655F                 mov     [ebp+var_4], ecx
.text:00006562                 mov     eax, [ebp+arg_0]
.text:00006565                 sub     eax, 1
.text:00006568                 mov     ecx, [ebp+var_4]
.text:0000656B                 mov     [ecx+0C4h], eax
.text:00006571                 mov     esp, ebp
.text:00006573                 pop     ebp
.text:00006574                 retn    4
.text:00006574 ?SetWindowWidth@CExtractCallbackConsole@@QAEXI@Z endp
.text:00006574
.text:00006574 ; ---------------------------------------------------------------------------
.text:00006577                 align 4
.text:00006577 _text           ends
.text:00006577
.text:00006578 ; ===========================================================================
.text:00006578
.text:00006578 ; Segment type: Pure code
.text:00006578 ; Segment permissions: Read/Execute
.text:00006578 _text           segment para public 'CODE' use32
.text:00006578                 assume cs:_text
.text:00006578                 ;org 6578h
.text:00006578 ; COMDAT (pick any)
.text:00006578                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006578
.text:00006578 ; =============== S U B R O U T I N E =======================================
.text:00006578
.text:00006578 ; Attributes: bp-based frame
.text:00006578
.text:00006578 ; void __thiscall CExtractCallbackConsole::Init(CExtractCallbackConsole *this, struct CStdOutStream *, struct CStdOutStream *, struct CStdOutStream *)
.text:00006578                 public ?Init@CExtractCallbackConsole@@QAEXPAVCStdOutStream@@00@Z
.text:00006578 ?Init@CExtractCallbackConsole@@QAEXPAVCStdOutStream@@00@Z proc near
.text:00006578                                         ; CODE XREF: Main2(void)+E0Dp
.text:00006578
.text:00006578 var_4           = dword ptr -4
.text:00006578 arg_0           = dword ptr  8
.text:00006578 arg_4           = dword ptr  0Ch
.text:00006578 arg_8           = dword ptr  10h
.text:00006578
.text:00006578                 push    ebp
.text:00006579                 mov     ebp, esp
.text:0000657B                 push    ecx
.text:0000657C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006583                 mov     [ebp+var_4], ecx
.text:00006586                 mov     eax, [ebp+arg_8]
.text:00006589                 push    eax             ; struct CStdOutStream *
.text:0000658A                 mov     ecx, [ebp+arg_4]
.text:0000658D                 push    ecx             ; struct CStdOutStream *
.text:0000658E                 mov     edx, [ebp+arg_0]
.text:00006591                 push    edx             ; struct CStdOutStream *
.text:00006592                 mov     ecx, [ebp+var_4]
.text:00006595                 add     ecx, 10h        ; this
.text:00006598                 call    ?Init@COpenCallbackConsole@@QAEXPAVCStdOutStream@@00@Z ; COpenCallbackConsole::Init(CStdOutStream *,CStdOutStream *,CStdOutStream *)
.text:0000659D                 mov     eax, [ebp+var_4]
.text:000065A0                 mov     dword ptr [eax+108h], 0
.text:000065AA                 mov     dword ptr [eax+10Ch], 0
.text:000065B4                 mov     ecx, [ebp+var_4]
.text:000065B7                 mov     byte ptr [ecx+110h], 0
.text:000065BE                 mov     edx, [ebp+var_4]
.text:000065C1                 mov     byte ptr [edx+111h], 0
.text:000065C8                 mov     eax, [ebp+var_4]
.text:000065CB                 mov     dword ptr [eax+118h], 0
.text:000065D5                 mov     dword ptr [eax+11Ch], 0
.text:000065DF                 mov     ecx, [ebp+var_4]
.text:000065E2                 mov     dword ptr [ecx+120h], 0
.text:000065EC                 mov     dword ptr [ecx+124h], 0
.text:000065F6                 mov     edx, [ebp+var_4]
.text:000065F9                 mov     dword ptr [edx+128h], 0
.text:00006603                 mov     dword ptr [edx+12Ch], 0
.text:0000660D                 mov     eax, [ebp+var_4]
.text:00006610                 mov     dword ptr [eax+130h], 0
.text:0000661A                 mov     dword ptr [eax+134h], 0
.text:00006624                 mov     ecx, [ebp+var_4]
.text:00006627                 mov     dword ptr [ecx+138h], 0
.text:00006631                 mov     dword ptr [ecx+13Ch], 0
.text:0000663B                 mov     edx, [ebp+var_4]
.text:0000663E                 mov     dword ptr [edx+140h], 0
.text:00006648                 mov     dword ptr [edx+144h], 0
.text:00006652                 mov     eax, [ebp+var_4]
.text:00006655                 mov     dword ptr [eax+148h], 0
.text:0000665F                 mov     dword ptr [eax+14Ch], 0
.text:00006669                 mov     ecx, [ebp+var_4]
.text:0000666C                 mov     dword ptr [ecx+150h], 0
.text:00006676                 mov     dword ptr [ecx+154h], 0
.text:00006680                 add     esp, 4
.text:00006683                 cmp     ebp, esp
.text:00006685                 call    __RTC_CheckEsp
.text:0000668A                 mov     esp, ebp
.text:0000668C                 pop     ebp
.text:0000668D                 retn    0Ch
.text:0000668D ?Init@CExtractCallbackConsole@@QAEXPAVCStdOutStream@@00@Z endp
.text:0000668D
.text:0000668D _text           ends
.text:0000668D
.text:00006690 ; ===========================================================================
.text:00006690
.text:00006690 ; Segment type: Pure code
.text:00006690 ; Segment permissions: Read/Execute
.text:00006690 _text           segment para public 'CODE' use32
.text:00006690                 assume cs:_text
.text:00006690                 ;org 6690h
.text:00006690 ; COMDAT (pick any)
.text:00006690                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006690
.text:00006690 ; =============== S U B R O U T I N E =======================================
.text:00006690
.text:00006690 ; Attributes: bp-based frame
.text:00006690
.text:00006690 ; public: void * __thiscall CExtractCallbackConsole::`scalar deleting destructor'(unsigned int)
.text:00006690                 public ??_GCExtractCallbackConsole@@QAEPAXI@Z
.text:00006690 ??_GCExtractCallbackConsole@@QAEPAXI@Z proc near
.text:00006690                                         ; CODE XREF: CExtractCallbackConsole::Release(void)+5Ap
.text:00006690
.text:00006690 var_4           = dword ptr -4
.text:00006690 arg_0           = dword ptr  8
.text:00006690
.text:00006690                 push    ebp
.text:00006691                 mov     ebp, esp
.text:00006693                 push    ecx
.text:00006694                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000669B                 mov     [ebp+var_4], ecx
.text:0000669E                 mov     ecx, [ebp+var_4] ; this
.text:000066A1                 call    ??1CExtractCallbackConsole@@QAE@XZ ; CExtractCallbackConsole::~CExtractCallbackConsole(void)
.text:000066A6                 mov     eax, [ebp+arg_0]
.text:000066A9                 and     eax, 1
.text:000066AC                 jz      short loc_66BA
.text:000066AE                 mov     ecx, [ebp+var_4]
.text:000066B1                 push    ecx             ; void *
.text:000066B2                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000066B7                 add     esp, 4
.text:000066BA
.text:000066BA loc_66BA:                               ; CODE XREF: CExtractCallbackConsole::`scalar deleting destructor'(uint)+1Cj
.text:000066BA                 mov     eax, [ebp+var_4]
.text:000066BD                 add     esp, 4
.text:000066C0                 cmp     ebp, esp
.text:000066C2                 call    __RTC_CheckEsp
.text:000066C7                 mov     esp, ebp
.text:000066C9                 pop     ebp
.text:000066CA                 retn    4
.text:000066CA ??_GCExtractCallbackConsole@@QAEPAXI@Z endp
.text:000066CA
.text:000066CA ; ---------------------------------------------------------------------------
.text:000066CD                 align 10h
.text:000066CD _text           ends
.text:000066CD
.text:000066D0 ; ===========================================================================
.text:000066D0
.text:000066D0 ; Segment type: Pure code
.text:000066D0 ; Segment permissions: Read/Execute
.text:000066D0 _text           segment para public 'CODE' use32
.text:000066D0                 assume cs:_text
.text:000066D0                 ;org 66D0h
.text:000066D0 ; COMDAT (pick any)
.text:000066D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000066D0
.text:000066D0 ; =============== S U B R O U T I N E =======================================
.text:000066D0
.text:000066D0 ; Attributes: bp-based frame
.text:000066D0
.text:000066D0 ; _DWORD __thiscall IExtractCallbackUI::IExtractCallbackUI(IExtractCallbackUI *__hidden this)
.text:000066D0                 public ??0IExtractCallbackUI@@QAE@XZ
.text:000066D0 ??0IExtractCallbackUI@@QAE@XZ proc near ; CODE XREF: CExtractCallbackConsole::CExtractCallbackConsole(void)+30p
.text:000066D0
.text:000066D0 var_4           = dword ptr -4
.text:000066D0
.text:000066D0                 push    ebp
.text:000066D1                 mov     ebp, esp
.text:000066D3                 push    ecx
.text:000066D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000066DB                 mov     [ebp+var_4], ecx
.text:000066DE                 mov     ecx, [ebp+var_4] ; this
.text:000066E1                 call    ??0IFolderArchiveExtractCallback@@QAE@XZ ; IFolderArchiveExtractCallback::IFolderArchiveExtractCallback(void)
.text:000066E6                 mov     eax, [ebp+var_4]
.text:000066E9                 mov     dword ptr [eax], offset ??_7IExtractCallbackUI@@6B@ ; const IExtractCallbackUI::`vftable'
.text:000066EF                 mov     eax, [ebp+var_4]
.text:000066F2                 add     esp, 4
.text:000066F5                 cmp     ebp, esp
.text:000066F7                 call    __RTC_CheckEsp
.text:000066FC                 mov     esp, ebp
.text:000066FE                 pop     ebp
.text:000066FF                 retn
.text:000066FF ??0IExtractCallbackUI@@QAE@XZ endp
.text:000066FF
.text:000066FF _text           ends
.text:000066FF
.rdata:00006700 ; ===========================================================================
.rdata:00006700
.rdata:00006700 ; Segment type: Pure data
.rdata:00006700 ; Segment permissions: Read
.rdata:00006700 _rdata          segment dword public 'DATA' use32
.rdata:00006700                 assume cs:_rdata
.rdata:00006700                 ;org 6700h
.rdata:00006700 ; COMDAT (pick largest)
.rdata:00006700                 dd offset ??_R4IExtractCallbackUI@@6B@ ; const IExtractCallbackUI::`RTTI Complete Object Locator'
.rdata:00006704                 public ??_7IExtractCallbackUI@@6B@
.rdata:00006704 ; const IExtractCallbackUI::`vftable'
.rdata:00006704 ??_7IExtractCallbackUI@@6B@ dd offset __purecall
.rdata:00006704                                         ; DATA XREF: IExtractCallbackUI::IExtractCallbackUI(void)+19o
.rdata:00006708                 dd offset __purecall
.rdata:0000670C                 dd offset __purecall
.rdata:00006710                 dd offset __purecall
.rdata:00006714                 dd offset __purecall
.rdata:00006718                 dd offset __purecall
.rdata:0000671C                 dd offset __purecall
.rdata:00006720                 dd offset __purecall
.rdata:00006724                 dd offset __purecall
.rdata:00006728                 dd offset __purecall
.rdata:0000672C                 dd offset __purecall
.rdata:00006730                 dd offset __purecall
.rdata:00006734                 dd offset __purecall
.rdata:00006738                 dd offset __purecall
.rdata:00006738 _rdata          ends
.rdata:00006738
.rdata$r:0000673C ; ===========================================================================
.rdata$r:0000673C
.rdata$r:0000673C ; Segment type: Pure data
.rdata$r:0000673C ; Segment permissions: Read
.rdata$r:0000673C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000673C                 assume cs:_rdata$r
.rdata$r:0000673C                 ;org 673Ch
.rdata$r:0000673C ; COMDAT (pick any)
.rdata$r:0000673C                 public ??_R4IExtractCallbackUI@@6B@
.rdata$r:0000673C ; const IExtractCallbackUI::`RTTI Complete Object Locator'
.rdata$r:0000673C ??_R4IExtractCallbackUI@@6B@ db    0    ; DATA XREF: .rdata:00006700o
.rdata$r:0000673D                 db    0
.rdata$r:0000673E                 db    0
.rdata$r:0000673F                 db    0
.rdata$r:00006740                 db    0
.rdata$r:00006741                 db    0
.rdata$r:00006742                 db    0
.rdata$r:00006743                 db    0
.rdata$r:00006744                 db    0
.rdata$r:00006745                 db    0
.rdata$r:00006746                 db    0
.rdata$r:00006747                 db    0
.rdata$r:00006748                 dd offset ??_R0?AUIExtractCallbackUI@@@8 ; IExtractCallbackUI `RTTI Type Descriptor'
.rdata$r:0000674C                 dd offset ??_R3IExtractCallbackUI@@8 ; IExtractCallbackUI::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000674C _rdata$r        ends
.rdata$r:0000674C
.text:00006750 ; ===========================================================================
.text:00006750
.text:00006750 ; Segment type: Pure code
.text:00006750 ; Segment permissions: Read/Execute
.text:00006750 _text           segment para public 'CODE' use32
.text:00006750                 assume cs:_text
.text:00006750                 ;org 6750h
.text:00006750 ; COMDAT (pick any)
.text:00006750                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006750
.text:00006750 ; =============== S U B R O U T I N E =======================================
.text:00006750
.text:00006750 ; Attributes: bp-based frame
.text:00006750
.text:00006750 ; _DWORD __thiscall IFolderArchiveExtractCallback2::IFolderArchiveExtractCallback2(IFolderArchiveExtractCallback2 *__hidden this)
.text:00006750                 public ??0IFolderArchiveExtractCallback2@@QAE@XZ
.text:00006750 ??0IFolderArchiveExtractCallback2@@QAE@XZ proc near
.text:00006750                                         ; CODE XREF: CExtractCallbackConsole::CExtractCallbackConsole(void)+3Bp
.text:00006750
.text:00006750 var_4           = dword ptr -4
.text:00006750
.text:00006750                 push    ebp
.text:00006751                 mov     ebp, esp
.text:00006753                 push    ecx
.text:00006754                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000675B                 mov     [ebp+var_4], ecx
.text:0000675E                 mov     ecx, [ebp+var_4]
.text:00006761                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00006766                 mov     eax, [ebp+var_4]
.text:00006769                 mov     dword ptr [eax], offset ??_7IFolderArchiveExtractCallback2@@6B@ ; const IFolderArchiveExtractCallback2::`vftable'
.text:0000676F                 mov     eax, [ebp+var_4]
.text:00006772                 add     esp, 4
.text:00006775                 cmp     ebp, esp
.text:00006777                 call    __RTC_CheckEsp
.text:0000677C                 mov     esp, ebp
.text:0000677E                 pop     ebp
.text:0000677F                 retn
.text:0000677F ??0IFolderArchiveExtractCallback2@@QAE@XZ endp
.text:0000677F
.text:0000677F _text           ends
.text:0000677F
.rdata:00006780 ; ===========================================================================
.rdata:00006780
.rdata:00006780 ; Segment type: Pure data
.rdata:00006780 ; Segment permissions: Read
.rdata:00006780 _rdata          segment dword public 'DATA' use32
.rdata:00006780                 assume cs:_rdata
.rdata:00006780                 ;org 6780h
.rdata:00006780 ; COMDAT (pick largest)
.rdata:00006780                 dd offset ??_R4IFolderArchiveExtractCallback2@@6B@ ; const IFolderArchiveExtractCallback2::`RTTI Complete Object Locator'
.rdata:00006784                 public ??_7IFolderArchiveExtractCallback2@@6B@
.rdata:00006784 ; const IFolderArchiveExtractCallback2::`vftable'
.rdata:00006784 ??_7IFolderArchiveExtractCallback2@@6B@ dd offset __purecall
.rdata:00006784                                         ; DATA XREF: IFolderArchiveExtractCallback2::IFolderArchiveExtractCallback2(void)+19o
.rdata:00006788                 dd offset __purecall
.rdata:0000678C                 dd offset __purecall
.rdata:00006790                 dd offset __purecall
.rdata:00006790 _rdata          ends
.rdata:00006790
.rdata$r:00006794 ; ===========================================================================
.rdata$r:00006794
.rdata$r:00006794 ; Segment type: Pure data
.rdata$r:00006794 ; Segment permissions: Read
.rdata$r:00006794 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006794                 assume cs:_rdata$r
.rdata$r:00006794                 ;org 6794h
.rdata$r:00006794 ; COMDAT (pick any)
.rdata$r:00006794                 public ??_R4IFolderArchiveExtractCallback2@@6B@
.rdata$r:00006794 ; const IFolderArchiveExtractCallback2::`RTTI Complete Object Locator'
.rdata$r:00006794 ??_R4IFolderArchiveExtractCallback2@@6B@ db    0
.rdata$r:00006794                                         ; DATA XREF: .rdata:00006780o
.rdata$r:00006795                 db    0
.rdata$r:00006796                 db    0
.rdata$r:00006797                 db    0
.rdata$r:00006798                 db    0
.rdata$r:00006799                 db    0
.rdata$r:0000679A                 db    0
.rdata$r:0000679B                 db    0
.rdata$r:0000679C                 db    0
.rdata$r:0000679D                 db    0
.rdata$r:0000679E                 db    0
.rdata$r:0000679F                 db    0
.rdata$r:000067A0                 dd offset ??_R0?AUIFolderArchiveExtractCallback2@@@8 ; IFolderArchiveExtractCallback2 `RTTI Type Descriptor'
.rdata$r:000067A4                 dd offset ??_R3IFolderArchiveExtractCallback2@@8 ; IFolderArchiveExtractCallback2::`RTTI Class Hierarchy Descriptor'
.rdata$r:000067A4 _rdata$r        ends
.rdata$r:000067A4
.text:000067A8 ; ===========================================================================
.text:000067A8
.text:000067A8 ; Segment type: Pure code
.text:000067A8 ; Segment permissions: Read/Execute
.text:000067A8 _text           segment para public 'CODE' use32
.text:000067A8                 assume cs:_text
.text:000067A8                 ;org 67A8h
.text:000067A8 ; COMDAT (pick any)
.text:000067A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000067A8
.text:000067A8 ; =============== S U B R O U T I N E =======================================
.text:000067A8
.text:000067A8 ; Attributes: bp-based frame
.text:000067A8
.text:000067A8 ; _DWORD __thiscall COpenCallbackConsole::~COpenCallbackConsole(COpenCallbackConsole *__hidden this)
.text:000067A8                 public ??1COpenCallbackConsole@@QAE@XZ
.text:000067A8 ??1COpenCallbackConsole@@QAE@XZ proc near ; CODE XREF: Main2(void)+1A2Ap
.text:000067A8                                         ; __unwindfunclet$?Main2@@YGHXZ$19+6j ...
.text:000067A8
.text:000067A8 var_10          = dword ptr -10h
.text:000067A8 var_C           = dword ptr -0Ch
.text:000067A8 var_4           = dword ptr -4
.text:000067A8
.text:000067A8                 push    ebp
.text:000067A9                 mov     ebp, esp
.text:000067AB                 push    0FFFFFFFFh
.text:000067AD                 push    offset __ehhandler$??1COpenCallbackConsole@@QAE@XZ
.text:000067B2                 mov     eax, large fs:0
.text:000067B8                 push    eax
.text:000067B9                 push    ecx
.text:000067BA                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000067C1                 mov     eax, dword ptr ds:___security_cookie
.text:000067C6                 xor     eax, ebp
.text:000067C8                 push    eax
.text:000067C9                 lea     eax, [ebp+var_C]
.text:000067CC                 mov     large fs:0, eax
.text:000067D2                 mov     [ebp+var_10], ecx
.text:000067D5                 mov     [ebp+var_4], 0
.text:000067DC                 mov     ecx, [ebp+var_10]
.text:000067DF                 add     ecx, 0C4h ; '-' ; this
.text:000067E5                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000067EA                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000067F1                 mov     ecx, [ebp+var_10]
.text:000067F4                 add     ecx, 8          ; this
.text:000067F7                 call    ??1CPercentPrinter@@QAE@XZ ; CPercentPrinter::~CPercentPrinter(void)
.text:000067FC                 mov     ecx, [ebp+var_C]
.text:000067FF                 mov     large fs:0, ecx
.text:00006806                 pop     ecx
.text:00006807                 add     esp, 10h
.text:0000680A                 cmp     ebp, esp
.text:0000680C                 call    __RTC_CheckEsp
.text:00006811                 mov     esp, ebp
.text:00006813                 pop     ebp
.text:00006814                 retn
.text:00006814 ??1COpenCallbackConsole@@QAE@XZ endp
.text:00006814
.text:00006814 ; ---------------------------------------------------------------------------
.text:00006815                 align 4
.text:00006815 _text           ends
.text:00006815
.text$x:00006818 ; ===========================================================================
.text$x:00006818
.text$x:00006818 ; Segment type: Pure code
.text$x:00006818 ; Segment permissions: Read/Execute
.text$x:00006818 _text$x         segment para public 'CODE' use32
.text$x:00006818                 assume cs:_text$x
.text$x:00006818                 ;org 6818h
.text$x:00006818 ; COMDAT (pick associative to section at 67A8)
.text$x:00006818                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006818
.text$x:00006818 ; =============== S U B R O U T I N E =======================================
.text$x:00006818
.text$x:00006818
.text$x:00006818 __unwindfunclet$??1COpenCallbackConsole@@QAE@XZ$0 proc near
.text$x:00006818                                         ; DATA XREF: .xdata$x:00006844o
.text$x:00006818                 mov     ecx, [ebp-10h]
.text$x:0000681B                 add     ecx, 8          ; this
.text$x:0000681E                 jmp     ??1CPercentPrinter@@QAE@XZ ; CPercentPrinter::~CPercentPrinter(void)
.text$x:0000681E __unwindfunclet$??1COpenCallbackConsole@@QAE@XZ$0 endp
.text$x:0000681E
.text$x:00006823
.text$x:00006823 ; =============== S U B R O U T I N E =======================================
.text$x:00006823
.text$x:00006823
.text$x:00006823 __ehhandler$??1COpenCallbackConsole@@QAE@XZ proc near
.text$x:00006823                                         ; DATA XREF: COpenCallbackConsole::~COpenCallbackConsole(void)+5o
.text$x:00006823
.text$x:00006823 arg_4           = dword ptr  8
.text$x:00006823
.text$x:00006823                 mov     edx, [esp+arg_4]
.text$x:00006827                 lea     eax, [edx+0Ch]
.text$x:0000682A                 mov     ecx, [edx-8]
.text$x:0000682D                 xor     ecx, eax
.text$x:0000682F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006834                 mov     eax, offset __ehfuncinfo$??1COpenCallbackConsole@@QAE@XZ
.text$x:00006839                 jmp     ___CxxFrameHandler3
.text$x:00006839 __ehhandler$??1COpenCallbackConsole@@QAE@XZ endp
.text$x:00006839
.text$x:00006839 ; ---------------------------------------------------------------------------
.text$x:0000683E                 align 10h
.text$x:0000683E _text$x         ends
.text$x:0000683E
.xdata$x:00006840 ; ===========================================================================
.xdata$x:00006840
.xdata$x:00006840 ; Segment type: Pure data
.xdata$x:00006840 ; Segment permissions: Read
.xdata$x:00006840 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00006840                 assume cs:_xdata$x
.xdata$x:00006840                 ;org 6840h
.xdata$x:00006840 ; COMDAT (pick associative to section at 67A8)
.xdata$x:00006840 __unwindtable$??1COpenCallbackConsole@@QAE@XZ db 0FFh
.xdata$x:00006840                                         ; DATA XREF: .xdata$x:00006850o
.xdata$x:00006841                 db 0FFh
.xdata$x:00006842                 db 0FFh
.xdata$x:00006843                 db 0FFh
.xdata$x:00006844                 dd offset __unwindfunclet$??1COpenCallbackConsole@@QAE@XZ$0
.xdata$x:00006848 __ehfuncinfo$??1COpenCallbackConsole@@QAE@XZ db  22h ; "
.xdata$x:00006848                                         ; DATA XREF: __ehhandler$??1COpenCallbackConsole@@QAE@XZ+11o
.xdata$x:00006849                 db    5
.xdata$x:0000684A                 db  93h ; ô
.xdata$x:0000684B                 db  19h
.xdata$x:0000684C                 db    1
.xdata$x:0000684D                 db    0
.xdata$x:0000684E                 db    0
.xdata$x:0000684F                 db    0
.xdata$x:00006850                 dd offset __unwindtable$??1COpenCallbackConsole@@QAE@XZ
.xdata$x:00006854                 db    0
.xdata$x:00006855                 db    0
.xdata$x:00006856                 db    0
.xdata$x:00006857                 db    0
.xdata$x:00006858                 db    0
.xdata$x:00006859                 db    0
.xdata$x:0000685A                 db    0
.xdata$x:0000685B                 db    0
.xdata$x:0000685C                 db    0
.xdata$x:0000685D                 db    0
.xdata$x:0000685E                 db    0
.xdata$x:0000685F                 db    0
.xdata$x:00006860                 db    0
.xdata$x:00006861                 db    0
.xdata$x:00006862                 db    0
.xdata$x:00006863                 db    0
.xdata$x:00006864                 db    0
.xdata$x:00006865                 db    0
.xdata$x:00006866                 db    0
.xdata$x:00006867                 db    0
.xdata$x:00006868                 db    1
.xdata$x:00006869                 db    0
.xdata$x:0000686A                 db    0
.xdata$x:0000686B                 db    0
.xdata$x:0000686B _xdata$x        ends
.xdata$x:0000686B
.text:0000686C ; ===========================================================================
.text:0000686C
.text:0000686C ; Segment type: Pure code
.text:0000686C ; Segment permissions: Read/Execute
.text:0000686C _text           segment para public 'CODE' use32
.text:0000686C                 assume cs:_text
.text:0000686C                 ;org 686Ch
.text:0000686C ; COMDAT (pick any)
.text:0000686C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000686C
.text:0000686C ; =============== S U B R O U T I N E =======================================
.text:0000686C
.text:0000686C ; Attributes: bp-based frame
.text:0000686C
.text:0000686C ; _DWORD __thiscall CExtractCallbackConsole::~CExtractCallbackConsole(CExtractCallbackConsole *__hidden this)
.text:0000686C                 public ??1CExtractCallbackConsole@@QAE@XZ
.text:0000686C ??1CExtractCallbackConsole@@QAE@XZ proc near
.text:0000686C                                         ; CODE XREF: CExtractCallbackConsole::`scalar deleting destructor'(uint)+11p
.text:0000686C
.text:0000686C var_10          = dword ptr -10h
.text:0000686C var_C           = dword ptr -0Ch
.text:0000686C var_4           = dword ptr -4
.text:0000686C
.text:0000686C                 push    ebp
.text:0000686D                 mov     ebp, esp
.text:0000686F                 push    0FFFFFFFFh
.text:00006871                 push    offset __ehhandler$??1CExtractCallbackConsole@@QAE@XZ
.text:00006876                 mov     eax, large fs:0
.text:0000687C                 push    eax
.text:0000687D                 push    ecx
.text:0000687E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00006885                 mov     eax, dword ptr ds:___security_cookie
.text:0000688A                 xor     eax, ebp
.text:0000688C                 push    eax
.text:0000688D                 lea     eax, [ebp+var_C]
.text:00006890                 mov     large fs:0, eax
.text:00006896                 mov     [ebp+var_10], ecx
.text:00006899                 mov     [ebp+var_4], 2
.text:000068A0                 mov     ecx, [ebp+var_10]
.text:000068A3                 add     ecx, 0FCh ; 'n' ; this
.text:000068A9                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000068AE                 mov     byte ptr [ebp+var_4], 1
.text:000068B2                 mov     ecx, [ebp+var_10]
.text:000068B5                 add     ecx, 0F0h ; '=' ; this
.text:000068BB                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000068C0                 mov     byte ptr [ebp+var_4], 0
.text:000068C4                 mov     ecx, [ebp+var_10]
.text:000068C7                 add     ecx, 0E4h ; 'S' ; this
.text:000068CD                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:000068D2                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000068D9                 mov     ecx, [ebp+var_10]
.text:000068DC                 add     ecx, 10h        ; this
.text:000068DF                 call    ??1COpenCallbackConsole@@QAE@XZ ; COpenCallbackConsole::~COpenCallbackConsole(void)
.text:000068E4                 mov     ecx, [ebp+var_C]
.text:000068E7                 mov     large fs:0, ecx
.text:000068EE                 pop     ecx
.text:000068EF                 add     esp, 10h
.text:000068F2                 cmp     ebp, esp
.text:000068F4                 call    __RTC_CheckEsp
.text:000068F9                 mov     esp, ebp
.text:000068FB                 pop     ebp
.text:000068FC                 retn
.text:000068FC ??1CExtractCallbackConsole@@QAE@XZ endp
.text:000068FC
.text:000068FC ; ---------------------------------------------------------------------------
.text:000068FD                 align 10h
.text:000068FD _text           ends
.text:000068FD
.text$x:00006900 ; ===========================================================================
.text$x:00006900
.text$x:00006900 ; Segment type: Pure code
.text$x:00006900 ; Segment permissions: Read/Execute
.text$x:00006900 _text$x         segment para public 'CODE' use32
.text$x:00006900                 assume cs:_text$x
.text$x:00006900                 ;org 6900h
.text$x:00006900 ; COMDAT (pick associative to section at 686C)
.text$x:00006900                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006900
.text$x:00006900 ; =============== S U B R O U T I N E =======================================
.text$x:00006900
.text$x:00006900
.text$x:00006900 __unwindfunclet$??1CExtractCallbackConsole@@QAE@XZ$0 proc near
.text$x:00006900                                         ; DATA XREF: .xdata$x:00006948o
.text$x:00006900                 mov     ecx, [ebp-10h]
.text$x:00006903                 add     ecx, 10h        ; this
.text$x:00006906                 jmp     ??1COpenCallbackConsole@@QAE@XZ ; COpenCallbackConsole::~COpenCallbackConsole(void)
.text$x:00006906 __unwindfunclet$??1CExtractCallbackConsole@@QAE@XZ$0 endp
.text$x:00006906
.text$x:0000690B
.text$x:0000690B ; =============== S U B R O U T I N E =======================================
.text$x:0000690B
.text$x:0000690B
.text$x:0000690B __unwindfunclet$??1CExtractCallbackConsole@@QAE@XZ$1 proc near
.text$x:0000690B                                         ; DATA XREF: .xdata$x:00006950o
.text$x:0000690B                 mov     ecx, [ebp-10h]
.text$x:0000690E                 add     ecx, 0E4h ; 'S' ; this
.text$x:00006914                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00006914 __unwindfunclet$??1CExtractCallbackConsole@@QAE@XZ$1 endp
.text$x:00006914
.text$x:00006919
.text$x:00006919 ; =============== S U B R O U T I N E =======================================
.text$x:00006919
.text$x:00006919
.text$x:00006919 __unwindfunclet$??1CExtractCallbackConsole@@QAE@XZ$2 proc near
.text$x:00006919                                         ; DATA XREF: .xdata$x:00006958o
.text$x:00006919                 mov     ecx, [ebp-10h]
.text$x:0000691C                 add     ecx, 0F0h ; '=' ; this
.text$x:00006922                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00006922 __unwindfunclet$??1CExtractCallbackConsole@@QAE@XZ$2 endp
.text$x:00006922
.text$x:00006927
.text$x:00006927 ; =============== S U B R O U T I N E =======================================
.text$x:00006927
.text$x:00006927
.text$x:00006927 __ehhandler$??1CExtractCallbackConsole@@QAE@XZ proc near
.text$x:00006927                                         ; DATA XREF: CExtractCallbackConsole::~CExtractCallbackConsole(void)+5o
.text$x:00006927
.text$x:00006927 arg_4           = dword ptr  8
.text$x:00006927
.text$x:00006927                 mov     edx, [esp+arg_4]
.text$x:0000692B                 lea     eax, [edx+0Ch]
.text$x:0000692E                 mov     ecx, [edx-8]
.text$x:00006931                 xor     ecx, eax
.text$x:00006933                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006938                 mov     eax, offset __ehfuncinfo$??1CExtractCallbackConsole@@QAE@XZ
.text$x:0000693D                 jmp     ___CxxFrameHandler3
.text$x:0000693D __ehhandler$??1CExtractCallbackConsole@@QAE@XZ endp
.text$x:0000693D
.text$x:0000693D ; ---------------------------------------------------------------------------
.text$x:00006942                 align 4
.text$x:00006942 _text$x         ends
.text$x:00006942
.xdata$x:00006944 ; ===========================================================================
.xdata$x:00006944
.xdata$x:00006944 ; Segment type: Pure data
.xdata$x:00006944 ; Segment permissions: Read
.xdata$x:00006944 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00006944                 assume cs:_xdata$x
.xdata$x:00006944                 ;org 6944h
.xdata$x:00006944 ; COMDAT (pick associative to section at 686C)
.xdata$x:00006944 __unwindtable$??1CExtractCallbackConsole@@QAE@XZ db 0FFh
.xdata$x:00006944                                         ; DATA XREF: .xdata$x:00006964o
.xdata$x:00006945                 db 0FFh
.xdata$x:00006946                 db 0FFh
.xdata$x:00006947                 db 0FFh
.xdata$x:00006948                 dd offset __unwindfunclet$??1CExtractCallbackConsole@@QAE@XZ$0
.xdata$x:0000694C                 align 10h
.xdata$x:00006950                 dd offset __unwindfunclet$??1CExtractCallbackConsole@@QAE@XZ$1
.xdata$x:00006954                 db    1
.xdata$x:00006955                 db    0
.xdata$x:00006956                 db    0
.xdata$x:00006957                 db    0
.xdata$x:00006958                 dd offset __unwindfunclet$??1CExtractCallbackConsole@@QAE@XZ$2
.xdata$x:0000695C __ehfuncinfo$??1CExtractCallbackConsole@@QAE@XZ db  22h ; "
.xdata$x:0000695C                                         ; DATA XREF: __ehhandler$??1CExtractCallbackConsole@@QAE@XZ+11o
.xdata$x:0000695D                 db    5
.xdata$x:0000695E                 db  93h ; ô
.xdata$x:0000695F                 db  19h
.xdata$x:00006960                 db    3
.xdata$x:00006961                 db    0
.xdata$x:00006962                 db    0
.xdata$x:00006963                 db    0
.xdata$x:00006964                 dd offset __unwindtable$??1CExtractCallbackConsole@@QAE@XZ
.xdata$x:00006968                 db    0
.xdata$x:00006969                 db    0
.xdata$x:0000696A                 db    0
.xdata$x:0000696B                 db    0
.xdata$x:0000696C                 db    0
.xdata$x:0000696D                 db    0
.xdata$x:0000696E                 db    0
.xdata$x:0000696F                 db    0
.xdata$x:00006970                 db    0
.xdata$x:00006971                 db    0
.xdata$x:00006972                 db    0
.xdata$x:00006973                 db    0
.xdata$x:00006974                 db    0
.xdata$x:00006975                 db    0
.xdata$x:00006976                 db    0
.xdata$x:00006977                 db    0
.xdata$x:00006978                 db    0
.xdata$x:00006979                 db    0
.xdata$x:0000697A                 db    0
.xdata$x:0000697B                 db    0
.xdata$x:0000697C                 db    1
.xdata$x:0000697D                 db    0
.xdata$x:0000697E                 db    0
.xdata$x:0000697F                 db    0
.xdata$x:0000697F _xdata$x        ends
.xdata$x:0000697F
.text:00006980 ; ===========================================================================
.text:00006980
.text:00006980 ; Segment type: Pure code
.text:00006980 ; Segment permissions: Read/Execute
.text:00006980 _text           segment para public 'CODE' use32
.text:00006980                 assume cs:_text
.text:00006980                 ;org 6980h
.text:00006980 ; COMDAT (pick any)
.text:00006980                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006980
.text:00006980 ; =============== S U B R O U T I N E =======================================
.text:00006980
.text:00006980 ; Attributes: bp-based frame
.text:00006980
.text:00006980 ; _DWORD __thiscall IFolderArchiveExtractCallback::IFolderArchiveExtractCallback(IFolderArchiveExtractCallback *__hidden this)
.text:00006980                 public ??0IFolderArchiveExtractCallback@@QAE@XZ
.text:00006980 ??0IFolderArchiveExtractCallback@@QAE@XZ proc near
.text:00006980                                         ; CODE XREF: IExtractCallbackUI::IExtractCallbackUI(void)+11p
.text:00006980
.text:00006980 var_4           = dword ptr -4
.text:00006980
.text:00006980                 push    ebp
.text:00006981                 mov     ebp, esp
.text:00006983                 push    ecx
.text:00006984                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000698B                 mov     [ebp+var_4], ecx
.text:0000698E                 mov     ecx, [ebp+var_4] ; this
.text:00006991                 call    ??0IProgress@@QAE@XZ ; IProgress::IProgress(void)
.text:00006996                 mov     eax, [ebp+var_4]
.text:00006999                 mov     dword ptr [eax], offset ??_7IFolderArchiveExtractCallback@@6B@ ; const IFolderArchiveExtractCallback::`vftable'
.text:0000699F                 mov     eax, [ebp+var_4]
.text:000069A2                 add     esp, 4
.text:000069A5                 cmp     ebp, esp
.text:000069A7                 call    __RTC_CheckEsp
.text:000069AC                 mov     esp, ebp
.text:000069AE                 pop     ebp
.text:000069AF                 retn
.text:000069AF ??0IFolderArchiveExtractCallback@@QAE@XZ endp
.text:000069AF
.text:000069AF _text           ends
.text:000069AF
.rdata:000069B0 ; ===========================================================================
.rdata:000069B0
.rdata:000069B0 ; Segment type: Pure data
.rdata:000069B0 ; Segment permissions: Read
.rdata:000069B0 _rdata          segment dword public 'DATA' use32
.rdata:000069B0                 assume cs:_rdata
.rdata:000069B0                 ;org 69B0h
.rdata:000069B0 ; COMDAT (pick largest)
.rdata:000069B0                 dd offset ??_R4IFolderArchiveExtractCallback@@6B@ ; const IFolderArchiveExtractCallback::`RTTI Complete Object Locator'
.rdata:000069B4                 public ??_7IFolderArchiveExtractCallback@@6B@
.rdata:000069B4 ; const IFolderArchiveExtractCallback::`vftable'
.rdata:000069B4 ??_7IFolderArchiveExtractCallback@@6B@ dd offset __purecall
.rdata:000069B4                                         ; DATA XREF: IFolderArchiveExtractCallback::IFolderArchiveExtractCallback(void)+19o
.rdata:000069B8                 dd offset __purecall
.rdata:000069BC                 dd offset __purecall
.rdata:000069C0                 dd offset __purecall
.rdata:000069C4                 dd offset __purecall
.rdata:000069C8                 dd offset __purecall
.rdata:000069CC                 dd offset __purecall
.rdata:000069D0                 dd offset __purecall
.rdata:000069D4                 dd offset __purecall
.rdata:000069D4 _rdata          ends
.rdata:000069D4
.rdata$r:000069D8 ; ===========================================================================
.rdata$r:000069D8
.rdata$r:000069D8 ; Segment type: Pure data
.rdata$r:000069D8 ; Segment permissions: Read
.rdata$r:000069D8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000069D8                 assume cs:_rdata$r
.rdata$r:000069D8                 ;org 69D8h
.rdata$r:000069D8 ; COMDAT (pick any)
.rdata$r:000069D8                 public ??_R4IFolderArchiveExtractCallback@@6B@
.rdata$r:000069D8 ; const IFolderArchiveExtractCallback::`RTTI Complete Object Locator'
.rdata$r:000069D8 ??_R4IFolderArchiveExtractCallback@@6B@ db    0
.rdata$r:000069D8                                         ; DATA XREF: .rdata:000069B0o
.rdata$r:000069D9                 db    0
.rdata$r:000069DA                 db    0
.rdata$r:000069DB                 db    0
.rdata$r:000069DC                 db    0
.rdata$r:000069DD                 db    0
.rdata$r:000069DE                 db    0
.rdata$r:000069DF                 db    0
.rdata$r:000069E0                 db    0
.rdata$r:000069E1                 db    0
.rdata$r:000069E2                 db    0
.rdata$r:000069E3                 db    0
.rdata$r:000069E4                 dd offset ??_R0?AUIFolderArchiveExtractCallback@@@8 ; IFolderArchiveExtractCallback `RTTI Type Descriptor'
.rdata$r:000069E8                 dd offset ??_R3IFolderArchiveExtractCallback@@8 ; IFolderArchiveExtractCallback::`RTTI Class Hierarchy Descriptor'
.rdata$r:000069E8 _rdata$r        ends
.rdata$r:000069E8
.text:000069EC ; ===========================================================================
.text:000069EC
.text:000069EC ; Segment type: Pure code
.text:000069EC ; Segment permissions: Read/Execute
.text:000069EC _text           segment para public 'CODE' use32
.text:000069EC                 assume cs:_text
.text:000069EC                 ;org 69ECh
.text:000069EC ; COMDAT (pick any)
.text:000069EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000069EC
.text:000069EC ; =============== S U B R O U T I N E =======================================
.text:000069EC
.text:000069EC ; Attributes: bp-based frame
.text:000069EC
.text:000069EC ; _DWORD __thiscall IProgress::IProgress(IProgress *__hidden this)
.text:000069EC                 public ??0IProgress@@QAE@XZ
.text:000069EC ??0IProgress@@QAE@XZ proc near          ; CODE XREF: IFolderArchiveExtractCallback::IFolderArchiveExtractCallback(void)+11p
.text:000069EC
.text:000069EC var_4           = dword ptr -4
.text:000069EC
.text:000069EC                 push    ebp
.text:000069ED                 mov     ebp, esp
.text:000069EF                 push    ecx
.text:000069F0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000069F7                 mov     [ebp+var_4], ecx
.text:000069FA                 mov     ecx, [ebp+var_4]
.text:000069FD                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00006A02                 mov     eax, [ebp+var_4]
.text:00006A05                 mov     dword ptr [eax], offset ??_7IProgress@@6B@ ; const IProgress::`vftable'
.text:00006A0B                 mov     eax, [ebp+var_4]
.text:00006A0E                 add     esp, 4
.text:00006A11                 cmp     ebp, esp
.text:00006A13                 call    __RTC_CheckEsp
.text:00006A18                 mov     esp, ebp
.text:00006A1A                 pop     ebp
.text:00006A1B                 retn
.text:00006A1B ??0IProgress@@QAE@XZ endp
.text:00006A1B
.text:00006A1B _text           ends
.text:00006A1B
.rdata:00006A1C ; ===========================================================================
.rdata:00006A1C
.rdata:00006A1C ; Segment type: Pure data
.rdata:00006A1C ; Segment permissions: Read
.rdata:00006A1C _rdata          segment dword public 'DATA' use32
.rdata:00006A1C                 assume cs:_rdata
.rdata:00006A1C                 ;org 6A1Ch
.rdata:00006A1C ; COMDAT (pick largest)
.rdata:00006A1C                 dd offset ??_R4IProgress@@6B@ ; const IProgress::`RTTI Complete Object Locator'
.rdata:00006A20                 public ??_7IProgress@@6B@
.rdata:00006A20 ; const IProgress::`vftable'
.rdata:00006A20 ??_7IProgress@@6B@ dd offset __purecall ; DATA XREF: IProgress::IProgress(void)+19o
.rdata:00006A24                 dd offset __purecall
.rdata:00006A28                 dd offset __purecall
.rdata:00006A2C                 dd offset __purecall
.rdata:00006A30                 dd offset __purecall
.rdata:00006A30 _rdata          ends
.rdata:00006A30
.rdata$r:00006A34 ; ===========================================================================
.rdata$r:00006A34
.rdata$r:00006A34 ; Segment type: Pure data
.rdata$r:00006A34 ; Segment permissions: Read
.rdata$r:00006A34 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006A34                 assume cs:_rdata$r
.rdata$r:00006A34                 ;org 6A34h
.rdata$r:00006A34 ; COMDAT (pick any)
.rdata$r:00006A34                 public ??_R4IProgress@@6B@
.rdata$r:00006A34 ; const IProgress::`RTTI Complete Object Locator'
.rdata$r:00006A34 ??_R4IProgress@@6B@ db    0             ; DATA XREF: .rdata:00006A1Co
.rdata$r:00006A35                 db    0
.rdata$r:00006A36                 db    0
.rdata$r:00006A37                 db    0
.rdata$r:00006A38                 db    0
.rdata$r:00006A39                 db    0
.rdata$r:00006A3A                 db    0
.rdata$r:00006A3B                 db    0
.rdata$r:00006A3C                 db    0
.rdata$r:00006A3D                 db    0
.rdata$r:00006A3E                 db    0
.rdata$r:00006A3F                 db    0
.rdata$r:00006A40                 dd offset ??_R0?AUIProgress@@@8 ; IProgress `RTTI Type Descriptor'
.rdata$r:00006A44                 dd offset ??_R3IProgress@@8 ; IProgress::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006A44 _rdata$r        ends
.rdata$r:00006A44
.text:00006A48 ; ===========================================================================
.text:00006A48
.text:00006A48 ; Segment type: Pure code
.text:00006A48 ; Segment permissions: Read/Execute
.text:00006A48 _text           segment para public 'CODE' use32
.text:00006A48                 assume cs:_text
.text:00006A48                 ;org 6A48h
.text:00006A48 ; COMDAT (pick any)
.text:00006A48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006A48
.text:00006A48 ; =============== S U B R O U T I N E =======================================
.text:00006A48
.text:00006A48 ; Attributes: bp-based frame
.text:00006A48
.text:00006A48 ; void __thiscall CCallbackConsoleBase::SetWindowWidth(CCallbackConsoleBase *this, unsigned int)
.text:00006A48                 public ?SetWindowWidth@CCallbackConsoleBase@@QAEXI@Z
.text:00006A48 ?SetWindowWidth@CCallbackConsoleBase@@QAEXI@Z proc near
.text:00006A48                                         ; CODE XREF: Main2(void)+18C1p
.text:00006A48                                         ; Main2(void)+1A6Fp
.text:00006A48
.text:00006A48 var_4           = dword ptr -4
.text:00006A48 arg_0           = dword ptr  8
.text:00006A48
.text:00006A48                 push    ebp
.text:00006A49                 mov     ebp, esp
.text:00006A4B                 push    ecx
.text:00006A4C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006A53                 mov     [ebp+var_4], ecx
.text:00006A56                 mov     eax, [ebp+arg_0]
.text:00006A59                 sub     eax, 1
.text:00006A5C                 mov     ecx, [ebp+var_4]
.text:00006A5F                 mov     [ecx+0ACh], eax
.text:00006A65                 mov     esp, ebp
.text:00006A67                 pop     ebp
.text:00006A68                 retn    4
.text:00006A68 ?SetWindowWidth@CCallbackConsoleBase@@QAEXI@Z endp
.text:00006A68
.text:00006A68 ; ---------------------------------------------------------------------------
.text:00006A6B                 align 4
.text:00006A6B _text           ends
.text:00006A6B
.text:00006A6C ; ===========================================================================
.text:00006A6C
.text:00006A6C ; Segment type: Pure code
.text:00006A6C ; Segment permissions: Read/Execute
.text:00006A6C _text           segment para public 'CODE' use32
.text:00006A6C                 assume cs:_text
.text:00006A6C                 ;org 6A6Ch
.text:00006A6C ; COMDAT (pick any)
.text:00006A6C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006A6C
.text:00006A6C ; =============== S U B R O U T I N E =======================================
.text:00006A6C
.text:00006A6C ; Attributes: bp-based frame
.text:00006A6C
.text:00006A6C ; void __thiscall CCallbackConsoleBase::Init(CCallbackConsoleBase *this, struct CStdOutStream *, struct CStdOutStream *, struct CStdOutStream *)
.text:00006A6C                 public ?Init@CCallbackConsoleBase@@QAEXPAVCStdOutStream@@00@Z
.text:00006A6C ?Init@CCallbackConsoleBase@@QAEXPAVCStdOutStream@@00@Z proc near
.text:00006A6C                                         ; CODE XREF: Main2(void)+1950p
.text:00006A6C                                         ; Main2(void)+1A8Ep
.text:00006A6C
.text:00006A6C var_4           = dword ptr -4
.text:00006A6C arg_0           = dword ptr  8
.text:00006A6C arg_4           = dword ptr  0Ch
.text:00006A6C arg_8           = dword ptr  10h
.text:00006A6C
.text:00006A6C                 push    ebp
.text:00006A6D                 mov     ebp, esp
.text:00006A6F                 push    ecx
.text:00006A70                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006A77                 mov     [ebp+var_4], ecx
.text:00006A7A                 mov     ecx, [ebp+var_4]
.text:00006A7D                 add     ecx, 0DCh ; '_' ; this
.text:00006A83                 call    ?Clear@CErrorPathCodes@@QAEXXZ ; CErrorPathCodes::Clear(void)
.text:00006A88                 mov     eax, [ebp+var_4]
.text:00006A8B                 mov     ecx, [ebp+arg_0]
.text:00006A8E                 mov     [eax+0B0h], ecx
.text:00006A94                 mov     edx, [ebp+var_4]
.text:00006A97                 mov     eax, [ebp+arg_4]
.text:00006A9A                 mov     [edx+0B4h], eax
.text:00006AA0                 mov     ecx, [ebp+var_4]
.text:00006AA3                 mov     edx, [ebp+arg_8]
.text:00006AA6                 mov     [ecx+0A4h], edx
.text:00006AAC                 add     esp, 4
.text:00006AAF                 cmp     ebp, esp
.text:00006AB1                 call    __RTC_CheckEsp
.text:00006AB6                 mov     esp, ebp
.text:00006AB8                 pop     ebp
.text:00006AB9                 retn    0Ch
.text:00006AB9 ?Init@CCallbackConsoleBase@@QAEXPAVCStdOutStream@@00@Z endp
.text:00006AB9
.text:00006AB9 _text           ends
.text:00006AB9
.text:00006ABC ; ===========================================================================
.text:00006ABC
.text:00006ABC ; Segment type: Pure code
.text:00006ABC ; Segment permissions: Read/Execute
.text:00006ABC _text           segment para public 'CODE' use32
.text:00006ABC                 assume cs:_text
.text:00006ABC                 ;org 6ABCh
.text:00006ABC ; COMDAT (pick any)
.text:00006ABC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006ABC
.text:00006ABC ; =============== S U B R O U T I N E =======================================
.text:00006ABC
.text:00006ABC ; Attributes: bp-based frame
.text:00006ABC
.text:00006ABC ; void __thiscall CErrorPathCodes::Clear(CErrorPathCodes *__hidden this)
.text:00006ABC                 public ?Clear@CErrorPathCodes@@QAEXXZ
.text:00006ABC ?Clear@CErrorPathCodes@@QAEXXZ proc near
.text:00006ABC                                         ; CODE XREF: CCallbackConsoleBase::Init(CStdOutStream *,CStdOutStream *,CStdOutStream *)+17p
.text:00006ABC
.text:00006ABC var_4           = dword ptr -4
.text:00006ABC
.text:00006ABC                 push    ebp
.text:00006ABD                 mov     ebp, esp
.text:00006ABF                 push    ecx
.text:00006AC0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006AC7                 mov     [ebp+var_4], ecx
.text:00006ACA                 mov     ecx, [ebp+var_4]
.text:00006ACD                 call    ?Clear@?$CObjectVector@VUString@@@@QAEXXZ ; CObjectVector<UString>::Clear(void)
.text:00006AD2                 mov     ecx, [ebp+var_4]
.text:00006AD5                 add     ecx, 0Ch
.text:00006AD8                 call    ?Clear@?$CRecordVector@K@@QAEXXZ ; CRecordVector<ulong>::Clear(void)
.text:00006ADD                 add     esp, 4
.text:00006AE0                 cmp     ebp, esp
.text:00006AE2                 call    __RTC_CheckEsp
.text:00006AE7                 mov     esp, ebp
.text:00006AE9                 pop     ebp
.text:00006AEA                 retn
.text:00006AEA ?Clear@CErrorPathCodes@@QAEXXZ endp
.text:00006AEA
.text:00006AEA ; ---------------------------------------------------------------------------
.text:00006AEB                 align 4
.text:00006AEB _text           ends
.text:00006AEB
.text:00006AEC ; ===========================================================================
.text:00006AEC
.text:00006AEC ; Segment type: Pure code
.text:00006AEC ; Segment permissions: Read/Execute
.text:00006AEC _text           segment para public 'CODE' use32
.text:00006AEC                 assume cs:_text
.text:00006AEC                 ;org 6AECh
.text:00006AEC ; COMDAT (pick any)
.text:00006AEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006AEC
.text:00006AEC ; =============== S U B R O U T I N E =======================================
.text:00006AEC
.text:00006AEC ; Attributes: bp-based frame
.text:00006AEC
.text:00006AEC ; void __thiscall CCallbackConsoleBase::ClosePercents2(CCallbackConsoleBase *__hidden this)
.text:00006AEC                 public ?ClosePercents2@CCallbackConsoleBase@@QAEXXZ
.text:00006AEC ?ClosePercents2@CCallbackConsoleBase@@QAEXXZ proc near
.text:00006AEC                                         ; CODE XREF: Main2(void)+19AFp
.text:00006AEC
.text:00006AEC var_4           = dword ptr -4
.text:00006AEC
.text:00006AEC                 push    ebp
.text:00006AED                 mov     ebp, esp
.text:00006AEF                 push    ecx
.text:00006AF0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006AF7                 mov     [ebp+var_4], ecx
.text:00006AFA                 mov     ecx, [ebp+var_4] ; this
.text:00006AFD                 call    ?NeedPercents@CCallbackConsoleBase@@QBE_NXZ ; CCallbackConsoleBase::NeedPercents(void)
.text:00006B02                 movzx   eax, al
.text:00006B05                 test    eax, eax
.text:00006B07                 jz      short loc_6B13
.text:00006B09                 push    1               ; bool
.text:00006B0B                 mov     ecx, [ebp+var_4] ; this
.text:00006B0E                 call    ?ClosePrint@CPercentPrinter@@QAEX_N@Z ; CPercentPrinter::ClosePrint(bool)
.text:00006B13
.text:00006B13 loc_6B13:                               ; CODE XREF: CCallbackConsoleBase::ClosePercents2(void)+1Bj
.text:00006B13                 add     esp, 4
.text:00006B16                 cmp     ebp, esp
.text:00006B18                 call    __RTC_CheckEsp
.text:00006B1D                 mov     esp, ebp
.text:00006B1F                 pop     ebp
.text:00006B20                 retn
.text:00006B20 ?ClosePercents2@CCallbackConsoleBase@@QAEXXZ endp
.text:00006B20
.text:00006B20 ; ---------------------------------------------------------------------------
.text:00006B21                 align 4
.text:00006B21 _text           ends
.text:00006B21
.text:00006B24 ; ===========================================================================
.text:00006B24
.text:00006B24 ; Segment type: Pure code
.text:00006B24 ; Segment permissions: Read/Execute
.text:00006B24 _text           segment para public 'CODE' use32
.text:00006B24                 assume cs:_text
.text:00006B24                 ;org 6B24h
.text:00006B24 ; COMDAT (pick any)
.text:00006B24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006B24
.text:00006B24 ; =============== S U B R O U T I N E =======================================
.text:00006B24
.text:00006B24 ; Attributes: bp-based frame
.text:00006B24
.text:00006B24 ; bool __thiscall CCallbackConsoleBase::NeedPercents(CCallbackConsoleBase *__hidden this)
.text:00006B24                 public ?NeedPercents@CCallbackConsoleBase@@QBE_NXZ
.text:00006B24 ?NeedPercents@CCallbackConsoleBase@@QBE_NXZ proc near
.text:00006B24                                         ; CODE XREF: CCallbackConsoleBase::ClosePercents2(void)+11p
.text:00006B24
.text:00006B24 var_4           = dword ptr -4
.text:00006B24
.text:00006B24                 push    ebp
.text:00006B25                 mov     ebp, esp
.text:00006B27                 push    ecx
.text:00006B28                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006B2F                 mov     [ebp+var_4], ecx
.text:00006B32                 mov     eax, [ebp+var_4]
.text:00006B35                 xor     ecx, ecx
.text:00006B37                 cmp     dword ptr [eax+0A4h], 0
.text:00006B3E                 setnz   cl
.text:00006B41                 mov     al, cl
.text:00006B43                 mov     esp, ebp
.text:00006B45                 pop     ebp
.text:00006B46                 retn
.text:00006B46 ?NeedPercents@CCallbackConsoleBase@@QBE_NXZ endp
.text:00006B46
.text:00006B46 ; ---------------------------------------------------------------------------
.text:00006B47                 align 4
.text:00006B47 _text           ends
.text:00006B47
.text:00006B48 ; ===========================================================================
.text:00006B48
.text:00006B48 ; Segment type: Pure code
.text:00006B48 ; Segment permissions: Read/Execute
.text:00006B48 _text           segment para public 'CODE' use32
.text:00006B48                 assume cs:_text
.text:00006B48                 ;org 6B48h
.text:00006B48 ; COMDAT (pick any)
.text:00006B48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006B48
.text:00006B48 ; =============== S U B R O U T I N E =======================================
.text:00006B48
.text:00006B48 ; Attributes: bp-based frame
.text:00006B48
.text:00006B48 ; public: __thiscall CUpdateCallbackConsole::CUpdateCallbackConsole(void)
.text:00006B48                 public ??0CUpdateCallbackConsole@@QAE@XZ
.text:00006B48 ??0CUpdateCallbackConsole@@QAE@XZ proc near ; CODE XREF: Main2(void)+188Dp
.text:00006B48
.text:00006B48 var_10          = dword ptr -10h
.text:00006B48 var_C           = dword ptr -0Ch
.text:00006B48 var_4           = dword ptr -4
.text:00006B48
.text:00006B48                 push    ebp
.text:00006B49                 mov     ebp, esp
.text:00006B4B                 push    0FFFFFFFFh
.text:00006B4D                 push    offset __ehhandler$??0CUpdateCallbackConsole@@QAE@XZ
.text:00006B52                 mov     eax, large fs:0
.text:00006B58                 push    eax
.text:00006B59                 push    ecx
.text:00006B5A                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00006B61                 mov     eax, dword ptr ds:___security_cookie
.text:00006B66                 xor     eax, ebp
.text:00006B68                 push    eax
.text:00006B69                 lea     eax, [ebp+var_C]
.text:00006B6C                 mov     large fs:0, eax
.text:00006B72                 mov     [ebp+var_10], ecx
.text:00006B75                 mov     ecx, [ebp+var_10] ; this
.text:00006B78                 call    ??0IUpdateCallbackUI2@@QAE@XZ ; IUpdateCallbackUI2::IUpdateCallbackUI2(void)
.text:00006B7D                 mov     ecx, [ebp+var_10]
.text:00006B80                 add     ecx, 8
.text:00006B83                 call    ??0CCallbackConsoleBase@@QAE@XZ ; CCallbackConsoleBase::CCallbackConsoleBase(void)
.text:00006B88                 mov     [ebp+var_4], 0
.text:00006B8F                 mov     eax, [ebp+var_10]
.text:00006B92                 mov     dword ptr [eax], offset ??_7CUpdateCallbackConsole@@6BIUpdateCallbackUI@@@ ; const CUpdateCallbackConsole::`vftable'{for `IUpdateCallbackUI'}
.text:00006B98                 mov     ecx, [ebp+var_10]
.text:00006B9B                 mov     dword ptr [ecx+4], offset ??_7CUpdateCallbackConsole@@6BIDirItemsCallback@@@ ; const CUpdateCallbackConsole::`vftable'{for `IDirItemsCallback'}
.text:00006BA2                 mov     edx, [ebp+var_10]
.text:00006BA5                 mov     byte ptr [edx+118h], 0
.text:00006BAC                 mov     ecx, [ebp+var_10]
.text:00006BAF                 add     ecx, 11Ch
.text:00006BB5                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00006BBA                 mov     eax, [ebp+var_10]
.text:00006BBD                 mov     byte ptr [eax+128h], 0
.text:00006BC4                 mov     ecx, [ebp+var_10]
.text:00006BC7                 mov     byte ptr [ecx+129h], 0
.text:00006BCE                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00006BD5                 mov     eax, [ebp+var_10]
.text:00006BD8                 mov     ecx, [ebp+var_C]
.text:00006BDB                 mov     large fs:0, ecx
.text:00006BE2                 pop     ecx
.text:00006BE3                 add     esp, 10h
.text:00006BE6                 cmp     ebp, esp
.text:00006BE8                 call    __RTC_CheckEsp
.text:00006BED                 mov     esp, ebp
.text:00006BEF                 pop     ebp
.text:00006BF0                 retn
.text:00006BF0 ??0CUpdateCallbackConsole@@QAE@XZ endp
.text:00006BF0
.text:00006BF0 ; ---------------------------------------------------------------------------
.text:00006BF1                 align 4
.text:00006BF1 _text           ends
.text:00006BF1
.text$x:00006BF4 ; ===========================================================================
.text$x:00006BF4
.text$x:00006BF4 ; Segment type: Pure code
.text$x:00006BF4 ; Segment permissions: Read/Execute
.text$x:00006BF4 _text$x         segment para public 'CODE' use32
.text$x:00006BF4                 assume cs:_text$x
.text$x:00006BF4                 ;org 6BF4h
.text$x:00006BF4 ; COMDAT (pick associative to section at 6B48)
.text$x:00006BF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006BF4
.text$x:00006BF4 ; =============== S U B R O U T I N E =======================================
.text$x:00006BF4
.text$x:00006BF4
.text$x:00006BF4 __unwindfunclet$??0CUpdateCallbackConsole@@QAE@XZ$0 proc near
.text$x:00006BF4                                         ; DATA XREF: .xdata$x:00006C8Co
.text$x:00006BF4                 mov     ecx, [ebp-10h]
.text$x:00006BF7                 add     ecx, 8          ; this
.text$x:00006BFA                 jmp     ??1CCallbackConsoleBase@@QAE@XZ ; CCallbackConsoleBase::~CCallbackConsoleBase(void)
.text$x:00006BFA __unwindfunclet$??0CUpdateCallbackConsole@@QAE@XZ$0 endp
.text$x:00006BFA
.text$x:00006BFF
.text$x:00006BFF ; =============== S U B R O U T I N E =======================================
.text$x:00006BFF
.text$x:00006BFF
.text$x:00006BFF __ehhandler$??0CUpdateCallbackConsole@@QAE@XZ proc near
.text$x:00006BFF                                         ; DATA XREF: CUpdateCallbackConsole::CUpdateCallbackConsole(void)+5o
.text$x:00006BFF
.text$x:00006BFF arg_4           = dword ptr  8
.text$x:00006BFF
.text$x:00006BFF                 mov     edx, [esp+arg_4]
.text$x:00006C03                 lea     eax, [edx+0Ch]
.text$x:00006C06                 mov     ecx, [edx-8]
.text$x:00006C09                 xor     ecx, eax
.text$x:00006C0B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006C10                 mov     eax, offset __ehfuncinfo$??0CUpdateCallbackConsole@@QAE@XZ
.text$x:00006C15                 jmp     ___CxxFrameHandler3
.text$x:00006C15 __ehhandler$??0CUpdateCallbackConsole@@QAE@XZ endp
.text$x:00006C15
.text$x:00006C15 ; ---------------------------------------------------------------------------
.text$x:00006C1A                 align 4
.text$x:00006C1A _text$x         ends
.text$x:00006C1A
.rdata:00006C1C ; ===========================================================================
.rdata:00006C1C
.rdata:00006C1C ; Segment type: Pure data
.rdata:00006C1C ; Segment permissions: Read
.rdata:00006C1C _rdata          segment dword public 'DATA' use32
.rdata:00006C1C                 assume cs:_rdata
.rdata:00006C1C                 ;org 6C1Ch
.rdata:00006C1C ; COMDAT (pick largest)
.rdata:00006C1C                 dd offset ??_R4CUpdateCallbackConsole@@6BIDirItemsCallback@@@ ; const CUpdateCallbackConsole::`RTTI Complete Object Locator'{for `IDirItemsCallback'}
.rdata:00006C20                 public ??_7CUpdateCallbackConsole@@6BIDirItemsCallback@@@
.rdata:00006C20 ; const CUpdateCallbackConsole::`vftable'{for `IDirItemsCallback'}
.rdata:00006C20 ??_7CUpdateCallbackConsole@@6BIDirItemsCallback@@@ dd offset ?ScanError@CUpdateCallbackConsole@@UAEJABVUString@@K@Z
.rdata:00006C20                                         ; DATA XREF: CUpdateCallbackConsole::CUpdateCallbackConsole(void)+53o
.rdata:00006C20                                         ; CUpdateCallbackConsole::ScanError(UString const &,ulong)
.rdata:00006C24                 dd offset ?ScanProgress@CUpdateCallbackConsole@@UAEJABUCDirItemsStat@@ABVUString@@_N@Z ; CUpdateCallbackConsole::ScanProgress(CDirItemsStat const &,UString const &,bool)
.rdata:00006C24 _rdata          ends
.rdata:00006C24
.rdata:00006C28 ; ===========================================================================
.rdata:00006C28
.rdata:00006C28 ; Segment type: Pure data
.rdata:00006C28 ; Segment permissions: Read
.rdata:00006C28 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00006C28 _rdata          segment para public 'DATA' use32
.rdata:00006C28                 assume cs:_rdata
.rdata:00006C28                 ;org 6C28h
.rdata:00006C28 ; COMDAT (pick largest)
.rdata:00006C28                 dd offset ??_R4CUpdateCallbackConsole@@6BIUpdateCallbackUI@@@ ; const CUpdateCallbackConsole::`RTTI Complete Object Locator'{for `IUpdateCallbackUI'}
.rdata:00006C2C                 public ??_7CUpdateCallbackConsole@@6BIUpdateCallbackUI@@@
.rdata:00006C2C ; const CUpdateCallbackConsole::`vftable'{for `IUpdateCallbackUI'}
.rdata:00006C2C ??_7CUpdateCallbackConsole@@6BIUpdateCallbackUI@@@ dd offset ?WriteSfx@CUpdateCallbackConsole@@UAEJPB_W_K@Z
.rdata:00006C2C                                         ; DATA XREF: CUpdateCallbackConsole::CUpdateCallbackConsole(void)+4Ao
.rdata:00006C2C                                         ; CUpdateCallbackConsole::WriteSfx(wchar_t const *,unsigned __int64)
.rdata:00006C30                 dd offset ?SetTotal@CUpdateCallbackConsole@@UAEJ_K@Z ; CUpdateCallbackConsole::SetTotal(unsigned __int64)
.rdata:00006C34                 dd offset ?SetCompleted@CUpdateCallbackConsole@@UAEJPB_K@Z ; CUpdateCallbackConsole::SetCompleted(unsigned __int64 const *)
.rdata:00006C38                 dd offset ?SetRatioInfo@CUpdateCallbackConsole@@UAEJPB_K0@Z ; CUpdateCallbackConsole::SetRatioInfo(unsigned __int64 const *,unsigned __int64 const *)
.rdata:00006C3C                 dd offset ?CheckBreak@CUpdateCallbackConsole@@UAEJXZ ; CUpdateCallbackConsole::CheckBreak(void)
.rdata:00006C40                 dd offset ?SetNumItems@CUpdateCallbackConsole@@UAEJ_K@Z ; CUpdateCallbackConsole::SetNumItems(unsigned __int64)
.rdata:00006C44                 dd offset ?GetStream@CUpdateCallbackConsole@@UAEJPB_W_N1I@Z ; CUpdateCallbackConsole::GetStream(wchar_t const *,bool,bool,uint)
.rdata:00006C48                 dd offset ?OpenFileError@CUpdateCallbackConsole@@UAEJABVUString@@K@Z ; CUpdateCallbackConsole::OpenFileError(UString const &,ulong)
.rdata:00006C4C                 dd offset ?ReadingFileError@CUpdateCallbackConsole@@UAEJABVUString@@K@Z ; CUpdateCallbackConsole::ReadingFileError(UString const &,ulong)
.rdata:00006C50                 dd offset ?SetOperationResult@CUpdateCallbackConsole@@UAEJH@Z ; CUpdateCallbackConsole::SetOperationResult(int)
.rdata:00006C54                 dd offset ?ReportExtractResult@CUpdateCallbackConsole@@UAEJHHPB_W@Z ; CUpdateCallbackConsole::ReportExtractResult(int,int,wchar_t const *)
.rdata:00006C58                 dd offset ?ReportUpdateOpeartion@CUpdateCallbackConsole@@UAEJIPB_W_N@Z ; CUpdateCallbackConsole::ReportUpdateOpeartion(uint,wchar_t const *,bool)
.rdata:00006C5C                 dd offset ?CryptoGetTextPassword2@CUpdateCallbackConsole@@UAEJPAHPAPA_W@Z ; CUpdateCallbackConsole::CryptoGetTextPassword2(int *,wchar_t * *)
.rdata:00006C60                 dd offset ?CryptoGetTextPassword@CUpdateCallbackConsole@@UAEJPAPA_W@Z ; CUpdateCallbackConsole::CryptoGetTextPassword(wchar_t * *)
.rdata:00006C64                 dd offset ?ShowDeleteFile@CUpdateCallbackConsole@@UAEJPB_W_N@Z ; CUpdateCallbackConsole::ShowDeleteFile(wchar_t const *,bool)
.rdata:00006C68                 dd offset ?OpenResult@CUpdateCallbackConsole@@UAEJPBVCCodecs@@ABUCArchiveLink@@PB_WJ@Z ; CUpdateCallbackConsole::OpenResult(CCodecs const *,CArchiveLink const &,wchar_t const *,long)
.rdata:00006C6C                 dd offset ?StartScanning@CUpdateCallbackConsole@@UAEJXZ ; CUpdateCallbackConsole::StartScanning(void)
.rdata:00006C70                 dd offset ?FinishScanning@CUpdateCallbackConsole@@UAEJABUCDirItemsStat@@@Z ; CUpdateCallbackConsole::FinishScanning(CDirItemsStat const &)
.rdata:00006C74                 dd offset ?StartOpenArchive@CUpdateCallbackConsole@@UAEJPB_W@Z ; CUpdateCallbackConsole::StartOpenArchive(wchar_t const *)
.rdata:00006C78                 dd offset ?StartArchive@CUpdateCallbackConsole@@UAEJPB_W_N@Z ; CUpdateCallbackConsole::StartArchive(wchar_t const *,bool)
.rdata:00006C7C                 dd offset ?FinishArchive@CUpdateCallbackConsole@@UAEJABUCFinishArchiveStat@@@Z ; CUpdateCallbackConsole::FinishArchive(CFinishArchiveStat const &)
.rdata:00006C80                 dd offset ?DeletingAfterArchiving@CUpdateCallbackConsole@@UAEJABVUString@@_N@Z ; CUpdateCallbackConsole::DeletingAfterArchiving(UString const &,bool)
.rdata:00006C84                 dd offset ?FinishDeletingAfterArchiving@CUpdateCallbackConsole@@UAEJXZ ; CUpdateCallbackConsole::FinishDeletingAfterArchiving(void)
.rdata:00006C84 _rdata          ends
.rdata:00006C84
.xdata$x:00006C88 ; ===========================================================================
.xdata$x:00006C88
.xdata$x:00006C88 ; Segment type: Pure data
.xdata$x:00006C88 ; Segment permissions: Read
.xdata$x:00006C88 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00006C88                 assume cs:_xdata$x
.xdata$x:00006C88                 ;org 6C88h
.xdata$x:00006C88 ; COMDAT (pick associative to section at 6B48)
.xdata$x:00006C88 __unwindtable$??0CUpdateCallbackConsole@@QAE@XZ db 0FFh
.xdata$x:00006C88                                         ; DATA XREF: .xdata$x:00006C98o
.xdata$x:00006C89                 db 0FFh
.xdata$x:00006C8A                 db 0FFh
.xdata$x:00006C8B                 db 0FFh
.xdata$x:00006C8C                 dd offset __unwindfunclet$??0CUpdateCallbackConsole@@QAE@XZ$0
.xdata$x:00006C90 __ehfuncinfo$??0CUpdateCallbackConsole@@QAE@XZ db  22h ; "
.xdata$x:00006C90                                         ; DATA XREF: __ehhandler$??0CUpdateCallbackConsole@@QAE@XZ+11o
.xdata$x:00006C91                 db    5
.xdata$x:00006C92                 db  93h ; ô
.xdata$x:00006C93                 db  19h
.xdata$x:00006C94                 db    1
.xdata$x:00006C95                 db    0
.xdata$x:00006C96                 db    0
.xdata$x:00006C97                 db    0
.xdata$x:00006C98                 dd offset __unwindtable$??0CUpdateCallbackConsole@@QAE@XZ
.xdata$x:00006C9C                 db    0
.xdata$x:00006C9D                 db    0
.xdata$x:00006C9E                 db    0
.xdata$x:00006C9F                 db    0
.xdata$x:00006CA0                 db    0
.xdata$x:00006CA1                 db    0
.xdata$x:00006CA2                 db    0
.xdata$x:00006CA3                 db    0
.xdata$x:00006CA4                 db    0
.xdata$x:00006CA5                 db    0
.xdata$x:00006CA6                 db    0
.xdata$x:00006CA7                 db    0
.xdata$x:00006CA8                 db    0
.xdata$x:00006CA9                 db    0
.xdata$x:00006CAA                 db    0
.xdata$x:00006CAB                 db    0
.xdata$x:00006CAC                 db    0
.xdata$x:00006CAD                 db    0
.xdata$x:00006CAE                 db    0
.xdata$x:00006CAF                 db    0
.xdata$x:00006CB0                 db    1
.xdata$x:00006CB1                 db    0
.xdata$x:00006CB2                 db    0
.xdata$x:00006CB3                 db    0
.xdata$x:00006CB3 _xdata$x        ends
.xdata$x:00006CB3
.rdata$r:00006CB4 ; ===========================================================================
.rdata$r:00006CB4
.rdata$r:00006CB4 ; Segment type: Pure data
.rdata$r:00006CB4 ; Segment permissions: Read
.rdata$r:00006CB4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006CB4                 assume cs:_rdata$r
.rdata$r:00006CB4                 ;org 6CB4h
.rdata$r:00006CB4 ; COMDAT (pick any)
.rdata$r:00006CB4                 public ??_R4CUpdateCallbackConsole@@6BIUpdateCallbackUI@@@
.rdata$r:00006CB4 ; const CUpdateCallbackConsole::`RTTI Complete Object Locator'{for `IUpdateCallbackUI'}
.rdata$r:00006CB4 ??_R4CUpdateCallbackConsole@@6BIUpdateCallbackUI@@@ db    0
.rdata$r:00006CB4                                         ; DATA XREF: .rdata:00006C28o
.rdata$r:00006CB5                 db    0
.rdata$r:00006CB6                 db    0
.rdata$r:00006CB7                 db    0
.rdata$r:00006CB8                 db    0
.rdata$r:00006CB9                 db    0
.rdata$r:00006CBA                 db    0
.rdata$r:00006CBB                 db    0
.rdata$r:00006CBC                 db    0
.rdata$r:00006CBD                 db    0
.rdata$r:00006CBE                 db    0
.rdata$r:00006CBF                 db    0
.rdata$r:00006CC0                 dd offset ??_R0?AVCUpdateCallbackConsole@@@8 ; CUpdateCallbackConsole `RTTI Type Descriptor'
.rdata$r:00006CC4                 dd offset ??_R3CUpdateCallbackConsole@@8 ; CUpdateCallbackConsole::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006CC4 _rdata$r        ends
.rdata$r:00006CC4
.data:00006CC8 ; ===========================================================================
.data:00006CC8
.data:00006CC8 ; Segment type: Pure data
.data:00006CC8 ; Segment permissions: Read/Write
.data:00006CC8 _data           segment dword public 'DATA' use32
.data:00006CC8                 assume cs:_data
.data:00006CC8                 ;org 6CC8h
.data:00006CC8 ; COMDAT (pick any)
.data:00006CC8                 public ??_R0?AVCUpdateCallbackConsole@@@8
.data:00006CC8 ; class CUpdateCallbackConsole `RTTI Type Descriptor'
.data:00006CC8 ??_R0?AVCUpdateCallbackConsole@@@8 dd offset ??_7type_info@@6B@
.data:00006CC8                                         ; DATA XREF: .rdata$r:00006CC0o
.data:00006CC8                                         ; .rdata$r:CUpdateCallbackConsole::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00006CC8                                         ; const type_info::`vftable'
.data:00006CCC                 align 10h
.data:00006CD0 a_?avcupdatecal db '.?AVCUpdateCallbackConsole@@',0
.data:00006CED                 align 10h
.data:00006CED _data           ends
.data:00006CED
.rdata$r:00006CF0 ; ===========================================================================
.rdata$r:00006CF0
.rdata$r:00006CF0 ; Segment type: Pure data
.rdata$r:00006CF0 ; Segment permissions: Read
.rdata$r:00006CF0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006CF0                 assume cs:_rdata$r
.rdata$r:00006CF0                 ;org 6CF0h
.rdata$r:00006CF0 ; COMDAT (pick any)
.rdata$r:00006CF0                 public ??_R3CUpdateCallbackConsole@@8
.rdata$r:00006CF0 ; CUpdateCallbackConsole::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006CF0 ??_R3CUpdateCallbackConsole@@8 db    0  ; DATA XREF: .rdata$r:00006CC4o
.rdata$r:00006CF0                                         ; .rdata$r:00006D30o ...
.rdata$r:00006CF1                 db    0
.rdata$r:00006CF2                 db    0
.rdata$r:00006CF3                 db    0
.rdata$r:00006CF4                 db    1
.rdata$r:00006CF5                 db    0
.rdata$r:00006CF6                 db    0
.rdata$r:00006CF7                 db    0
.rdata$r:00006CF8                 db    5
.rdata$r:00006CF9                 db    0
.rdata$r:00006CFA                 db    0
.rdata$r:00006CFB                 db    0
.rdata$r:00006CFC                 dd offset ??_R2CUpdateCallbackConsole@@8 ; CUpdateCallbackConsole::`RTTI Base Class Array'
.rdata$r:00006CFC _rdata$r        ends
.rdata$r:00006CFC
.rdata$r:00006D00 ; ===========================================================================
.rdata$r:00006D00
.rdata$r:00006D00 ; Segment type: Pure data
.rdata$r:00006D00 ; Segment permissions: Read
.rdata$r:00006D00 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006D00                 assume cs:_rdata$r
.rdata$r:00006D00                 ;org 6D00h
.rdata$r:00006D00 ; COMDAT (pick any)
.rdata$r:00006D00                 public ??_R2CUpdateCallbackConsole@@8
.rdata$r:00006D00 ; CUpdateCallbackConsole::`RTTI Base Class Array'
.rdata$r:00006D00 ??_R2CUpdateCallbackConsole@@8 dd offset ??_R1A@?0A@EA@CUpdateCallbackConsole@@8
.rdata$r:00006D00                                         ; DATA XREF: .rdata$r:00006CFCo
.rdata$r:00006D00                                         ; CUpdateCallbackConsole::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00006D04                 dd offset ??_R1A@?0A@EA@IUpdateCallbackUI2@@8 ; IUpdateCallbackUI2::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00006D08                 dd offset ??_R1A@?0A@EA@IUpdateCallbackUI@@8 ; IUpdateCallbackUI::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00006D0C                 dd offset ??_R13?0A@EA@IDirItemsCallback@@8 ; IDirItemsCallback::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00006D10                 dd offset ??_R17?0A@EA@CCallbackConsoleBase@@8 ; CCallbackConsoleBase::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:00006D14                 db    0
.rdata$r:00006D15                 align 4
.rdata$r:00006D15 _rdata$r        ends
.rdata$r:00006D15
.rdata$r:00006D18 ; ===========================================================================
.rdata$r:00006D18
.rdata$r:00006D18 ; Segment type: Pure data
.rdata$r:00006D18 ; Segment permissions: Read
.rdata$r:00006D18 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006D18                 assume cs:_rdata$r
.rdata$r:00006D18                 ;org 6D18h
.rdata$r:00006D18 ; COMDAT (pick any)
.rdata$r:00006D18                 public ??_R1A@?0A@EA@CUpdateCallbackConsole@@8
.rdata$r:00006D18 ; CUpdateCallbackConsole::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00006D18 ??_R1A@?0A@EA@CUpdateCallbackConsole@@8 dd offset ??_R0?AVCUpdateCallbackConsole@@@8
.rdata$r:00006D18                                         ; DATA XREF: .rdata$r:CUpdateCallbackConsole::`RTTI Base Class Array'o
.rdata$r:00006D18                                         ; CUpdateCallbackConsole `RTTI Type Descriptor'
.rdata$r:00006D1C                 db    4
.rdata$r:00006D1D                 db    0
.rdata$r:00006D1E                 db    0
.rdata$r:00006D1F                 db    0
.rdata$r:00006D20                 db    0
.rdata$r:00006D21                 db    0
.rdata$r:00006D22                 db    0
.rdata$r:00006D23                 db    0
.rdata$r:00006D24                 db 0FFh
.rdata$r:00006D25                 db 0FFh
.rdata$r:00006D26                 db 0FFh
.rdata$r:00006D27                 db 0FFh
.rdata$r:00006D28                 db    0
.rdata$r:00006D29                 db    0
.rdata$r:00006D2A                 db    0
.rdata$r:00006D2B                 db    0
.rdata$r:00006D2C                 db  40h ; @
.rdata$r:00006D2D                 db    0
.rdata$r:00006D2E                 db    0
.rdata$r:00006D2F                 db    0
.rdata$r:00006D30                 dd offset ??_R3CUpdateCallbackConsole@@8 ; CUpdateCallbackConsole::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006D30 _rdata$r        ends
.rdata$r:00006D30
.rdata$r:00006D34 ; ===========================================================================
.rdata$r:00006D34
.rdata$r:00006D34 ; Segment type: Pure data
.rdata$r:00006D34 ; Segment permissions: Read
.rdata$r:00006D34 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006D34                 assume cs:_rdata$r
.rdata$r:00006D34                 ;org 6D34h
.rdata$r:00006D34 ; COMDAT (pick any)
.rdata$r:00006D34                 public ??_R1A@?0A@EA@IUpdateCallbackUI2@@8
.rdata$r:00006D34 ; IUpdateCallbackUI2::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00006D34 ??_R1A@?0A@EA@IUpdateCallbackUI2@@8 dd offset ??_R0?AUIUpdateCallbackUI2@@@8
.rdata$r:00006D34                                         ; DATA XREF: .rdata$r:00006D04o
.rdata$r:00006D34                                         ; .rdata$r:IUpdateCallbackUI2::`RTTI Base Class Array'o
.rdata$r:00006D34                                         ; IUpdateCallbackUI2 `RTTI Type Descriptor'
.rdata$r:00006D38                 db    2
.rdata$r:00006D39                 db    0
.rdata$r:00006D3A                 db    0
.rdata$r:00006D3B                 db    0
.rdata$r:00006D3C                 db    0
.rdata$r:00006D3D                 db    0
.rdata$r:00006D3E                 db    0
.rdata$r:00006D3F                 db    0
.rdata$r:00006D40                 db 0FFh
.rdata$r:00006D41                 db 0FFh
.rdata$r:00006D42                 db 0FFh
.rdata$r:00006D43                 db 0FFh
.rdata$r:00006D44                 db    0
.rdata$r:00006D45                 db    0
.rdata$r:00006D46                 db    0
.rdata$r:00006D47                 db    0
.rdata$r:00006D48                 db  40h ; @
.rdata$r:00006D49                 db    0
.rdata$r:00006D4A                 db    0
.rdata$r:00006D4B                 db    0
.rdata$r:00006D4C                 dd offset ??_R3IUpdateCallbackUI2@@8 ; IUpdateCallbackUI2::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006D4C _rdata$r        ends
.rdata$r:00006D4C
.data:00006D50 ; ===========================================================================
.data:00006D50
.data:00006D50 ; Segment type: Pure data
.data:00006D50 ; Segment permissions: Read/Write
.data:00006D50 _data           segment dword public 'DATA' use32
.data:00006D50                 assume cs:_data
.data:00006D50                 ;org 6D50h
.data:00006D50 ; COMDAT (pick any)
.data:00006D50                 public ??_R0?AUIUpdateCallbackUI2@@@8
.data:00006D50 ; struct IUpdateCallbackUI2 `RTTI Type Descriptor'
.data:00006D50 ??_R0?AUIUpdateCallbackUI2@@@8 dd offset ??_7type_info@@6B@
.data:00006D50                                         ; DATA XREF: .rdata$r:IUpdateCallbackUI2::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00006D50                                         ; .rdata$r:00007280o ...
.data:00006D50                                         ; const type_info::`vftable'
.data:00006D54                 align 8
.data:00006D58 a_?auiupdatecal db '.?AUIUpdateCallbackUI2@@',0
.data:00006D71                 align 4
.data:00006D71 _data           ends
.data:00006D71
.rdata$r:00006D74 ; ===========================================================================
.rdata$r:00006D74
.rdata$r:00006D74 ; Segment type: Pure data
.rdata$r:00006D74 ; Segment permissions: Read
.rdata$r:00006D74 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006D74                 assume cs:_rdata$r
.rdata$r:00006D74                 ;org 6D74h
.rdata$r:00006D74 ; COMDAT (pick any)
.rdata$r:00006D74                 public ??_R3IUpdateCallbackUI2@@8
.rdata$r:00006D74 ; IUpdateCallbackUI2::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006D74 ??_R3IUpdateCallbackUI2@@8 db    0      ; DATA XREF: .rdata$r:00006D4Co
.rdata$r:00006D74                                         ; .rdata$r:00007284o ...
.rdata$r:00006D75                 db    0
.rdata$r:00006D76                 db    0
.rdata$r:00006D77                 db    0
.rdata$r:00006D78                 db    1
.rdata$r:00006D79                 db    0
.rdata$r:00006D7A                 db    0
.rdata$r:00006D7B                 db    0
.rdata$r:00006D7C                 db    3
.rdata$r:00006D7D                 db    0
.rdata$r:00006D7E                 db    0
.rdata$r:00006D7F                 db    0
.rdata$r:00006D80                 dd offset ??_R2IUpdateCallbackUI2@@8 ; IUpdateCallbackUI2::`RTTI Base Class Array'
.rdata$r:00006D80 _rdata$r        ends
.rdata$r:00006D80
.rdata$r:00006D84 ; ===========================================================================
.rdata$r:00006D84
.rdata$r:00006D84 ; Segment type: Pure data
.rdata$r:00006D84 ; Segment permissions: Read
.rdata$r:00006D84 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006D84                 assume cs:_rdata$r
.rdata$r:00006D84                 ;org 6D84h
.rdata$r:00006D84 ; COMDAT (pick any)
.rdata$r:00006D84                 public ??_R2IUpdateCallbackUI2@@8
.rdata$r:00006D84 ; IUpdateCallbackUI2::`RTTI Base Class Array'
.rdata$r:00006D84 ??_R2IUpdateCallbackUI2@@8 dd offset ??_R1A@?0A@EA@IUpdateCallbackUI2@@8
.rdata$r:00006D84                                         ; DATA XREF: .rdata$r:00006D80o
.rdata$r:00006D84                                         ; IUpdateCallbackUI2::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00006D88                 dd offset ??_R1A@?0A@EA@IUpdateCallbackUI@@8 ; IUpdateCallbackUI::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00006D8C                 dd offset ??_R13?0A@EA@IDirItemsCallback@@8 ; IDirItemsCallback::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00006D90                 db    0
.rdata$r:00006D91                 align 4
.rdata$r:00006D91 _rdata$r        ends
.rdata$r:00006D91
.rdata$r:00006D94 ; ===========================================================================
.rdata$r:00006D94
.rdata$r:00006D94 ; Segment type: Pure data
.rdata$r:00006D94 ; Segment permissions: Read
.rdata$r:00006D94 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006D94                 assume cs:_rdata$r
.rdata$r:00006D94                 ;org 6D94h
.rdata$r:00006D94 ; COMDAT (pick any)
.rdata$r:00006D94                 public ??_R1A@?0A@EA@IUpdateCallbackUI@@8
.rdata$r:00006D94 ; IUpdateCallbackUI::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00006D94 ??_R1A@?0A@EA@IUpdateCallbackUI@@8 dd offset ??_R0?AUIUpdateCallbackUI@@@8
.rdata$r:00006D94                                         ; DATA XREF: .rdata$r:00006D08o
.rdata$r:00006D94                                         ; .rdata$r:00006D88o ...
.rdata$r:00006D94                                         ; IUpdateCallbackUI `RTTI Type Descriptor'
.rdata$r:00006D98                 align 10h
.rdata$r:00006DA0                 db 0FFh
.rdata$r:00006DA1                 db 0FFh
.rdata$r:00006DA2                 db 0FFh
.rdata$r:00006DA3                 db 0FFh
.rdata$r:00006DA4                 db    0
.rdata$r:00006DA5                 db    0
.rdata$r:00006DA6                 db    0
.rdata$r:00006DA7                 db    0
.rdata$r:00006DA8                 db  40h ; @
.rdata$r:00006DA9                 db    0
.rdata$r:00006DAA                 db    0
.rdata$r:00006DAB                 db    0
.rdata$r:00006DAC                 dd offset ??_R3IUpdateCallbackUI@@8 ; IUpdateCallbackUI::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006DAC _rdata$r        ends
.rdata$r:00006DAC
.data:00006DB0 ; ===========================================================================
.data:00006DB0
.data:00006DB0 ; Segment type: Pure data
.data:00006DB0 ; Segment permissions: Read/Write
.data:00006DB0 _data           segment dword public 'DATA' use32
.data:00006DB0                 assume cs:_data
.data:00006DB0                 ;org 6DB0h
.data:00006DB0 ; COMDAT (pick any)
.data:00006DB0                 public ??_R0?AUIUpdateCallbackUI@@@8
.data:00006DB0 ; struct IUpdateCallbackUI `RTTI Type Descriptor'
.data:00006DB0 ??_R0?AUIUpdateCallbackUI@@@8 dd offset ??_7type_info@@6B@
.data:00006DB0                                         ; DATA XREF: .rdata$r:IUpdateCallbackUI::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00006DB0                                         ; .rdata$r:0000743Co
.data:00006DB0                                         ; const type_info::`vftable'
.data:00006DB4                 align 8
.data:00006DB8 a_?auiupdatec_0 db '.?AUIUpdateCallbackUI@@',0
.data:00006DB8 _data           ends
.data:00006DB8
.rdata$r:00006DD0 ; ===========================================================================
.rdata$r:00006DD0
.rdata$r:00006DD0 ; Segment type: Pure data
.rdata$r:00006DD0 ; Segment permissions: Read
.rdata$r:00006DD0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006DD0                 assume cs:_rdata$r
.rdata$r:00006DD0                 ;org 6DD0h
.rdata$r:00006DD0 ; COMDAT (pick any)
.rdata$r:00006DD0                 public ??_R3IUpdateCallbackUI@@8
.rdata$r:00006DD0 ; IUpdateCallbackUI::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006DD0 ??_R3IUpdateCallbackUI@@8 db    0       ; DATA XREF: .rdata$r:00006DACo
.rdata$r:00006DD0                                         ; .rdata$r:00007440o
.rdata$r:00006DD1                 db    0
.rdata$r:00006DD2                 db    0
.rdata$r:00006DD3                 db    0
.rdata$r:00006DD4                 db    0
.rdata$r:00006DD5                 db    0
.rdata$r:00006DD6                 db    0
.rdata$r:00006DD7                 db    0
.rdata$r:00006DD8                 db    1
.rdata$r:00006DD9                 db    0
.rdata$r:00006DDA                 db    0
.rdata$r:00006DDB                 db    0
.rdata$r:00006DDC                 dd offset ??_R2IUpdateCallbackUI@@8 ; IUpdateCallbackUI::`RTTI Base Class Array'
.rdata$r:00006DDC _rdata$r        ends
.rdata$r:00006DDC
.rdata$r:00006DE0 ; ===========================================================================
.rdata$r:00006DE0
.rdata$r:00006DE0 ; Segment type: Pure data
.rdata$r:00006DE0 ; Segment permissions: Read
.rdata$r:00006DE0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006DE0                 assume cs:_rdata$r
.rdata$r:00006DE0                 ;org 6DE0h
.rdata$r:00006DE0 ; COMDAT (pick any)
.rdata$r:00006DE0                 public ??_R2IUpdateCallbackUI@@8
.rdata$r:00006DE0 ; IUpdateCallbackUI::`RTTI Base Class Array'
.rdata$r:00006DE0 ??_R2IUpdateCallbackUI@@8 dd offset ??_R1A@?0A@EA@IUpdateCallbackUI@@8
.rdata$r:00006DE0                                         ; DATA XREF: .rdata$r:00006DDCo
.rdata$r:00006DE0                                         ; IUpdateCallbackUI::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00006DE4                 db    0
.rdata$r:00006DE5                 align 4
.rdata$r:00006DE5 _rdata$r        ends
.rdata$r:00006DE5
.rdata$r:00006DE8 ; ===========================================================================
.rdata$r:00006DE8
.rdata$r:00006DE8 ; Segment type: Pure data
.rdata$r:00006DE8 ; Segment permissions: Read
.rdata$r:00006DE8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006DE8                 assume cs:_rdata$r
.rdata$r:00006DE8                 ;org 6DE8h
.rdata$r:00006DE8 ; COMDAT (pick any)
.rdata$r:00006DE8                 public ??_R13?0A@EA@IDirItemsCallback@@8
.rdata$r:00006DE8 ; IDirItemsCallback::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:00006DE8 ??_R13?0A@EA@IDirItemsCallback@@8 dd offset ??_R0?AUIDirItemsCallback@@@8
.rdata$r:00006DE8                                         ; DATA XREF: .rdata$r:00006D0Co
.rdata$r:00006DE8                                         ; .rdata$r:00006D8Co
.rdata$r:00006DE8                                         ; IDirItemsCallback `RTTI Type Descriptor'
.rdata$r:00006DEC                 align 10h
.rdata$r:00006DF0                 db    4
.rdata$r:00006DF1                 db    0
.rdata$r:00006DF2                 db    0
.rdata$r:00006DF3                 db    0
.rdata$r:00006DF4                 db 0FFh
.rdata$r:00006DF5                 db 0FFh
.rdata$r:00006DF6                 db 0FFh
.rdata$r:00006DF7                 db 0FFh
.rdata$r:00006DF8                 db    0
.rdata$r:00006DF9                 db    0
.rdata$r:00006DFA                 db    0
.rdata$r:00006DFB                 db    0
.rdata$r:00006DFC                 db  40h ; @
.rdata$r:00006DFD                 db    0
.rdata$r:00006DFE                 db    0
.rdata$r:00006DFF                 db    0
.rdata$r:00006E00                 dd offset ??_R3IDirItemsCallback@@8 ; IDirItemsCallback::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006E00 _rdata$r        ends
.rdata$r:00006E00
.data:00006E04 ; ===========================================================================
.data:00006E04
.data:00006E04 ; Segment type: Pure data
.data:00006E04 ; Segment permissions: Read/Write
.data:00006E04 _data           segment dword public 'DATA' use32
.data:00006E04                 assume cs:_data
.data:00006E04                 ;org 6E04h
.data:00006E04 ; COMDAT (pick any)
.data:00006E04                 public ??_R0?AUIDirItemsCallback@@@8
.data:00006E04 ; struct IDirItemsCallback `RTTI Type Descriptor'
.data:00006E04 ??_R0?AUIDirItemsCallback@@@8 dd offset ??_7type_info@@6B@
.data:00006E04                                         ; DATA XREF: .rdata$r:IDirItemsCallback::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:00006E04                                         ; .rdata$r:IDirItemsCallback::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00006E04                                         ; const type_info::`vftable'
.data:00006E08                 db    0
.data:00006E09                 db    0
.data:00006E0A                 db    0
.data:00006E0B                 db    0
.data:00006E0C                 db  2Eh ; .
.data:00006E0D                 db  3Fh ; ?
.data:00006E0E                 db  41h ; A
.data:00006E0F                 db  55h ; U
.data:00006E10                 db  49h ; I
.data:00006E11                 db  44h ; D
.data:00006E12                 db  69h ; i
.data:00006E13                 db  72h ; r
.data:00006E14                 db  49h ; I
.data:00006E15                 db  74h ; t
.data:00006E16                 db  65h ; e
.data:00006E17                 db  6Dh ; m
.data:00006E18                 db  73h ; s
.data:00006E19                 db  43h ; C
.data:00006E1A                 db  61h ; a
.data:00006E1B                 db  6Ch ; l
.data:00006E1C                 db  6Ch ; l
.data:00006E1D                 db  62h ; b
.data:00006E1E                 db  61h ; a
.data:00006E1F                 db  63h ; c
.data:00006E20                 db  6Bh ; k
.data:00006E21                 db  40h ; @
.data:00006E22                 db  40h ; @
.data:00006E23                 db    0
.data:00006E23 _data           ends
.data:00006E23
.rdata$r:00006E24 ; ===========================================================================
.rdata$r:00006E24
.rdata$r:00006E24 ; Segment type: Pure data
.rdata$r:00006E24 ; Segment permissions: Read
.rdata$r:00006E24 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006E24                 assume cs:_rdata$r
.rdata$r:00006E24                 ;org 6E24h
.rdata$r:00006E24 ; COMDAT (pick any)
.rdata$r:00006E24                 public ??_R3IDirItemsCallback@@8
.rdata$r:00006E24 ; IDirItemsCallback::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006E24 ??_R3IDirItemsCallback@@8 db    0       ; DATA XREF: .rdata$r:00006E00o
.rdata$r:00006E24                                         ; .rdata$r:00006E54o ...
.rdata$r:00006E25                 db    0
.rdata$r:00006E26                 db    0
.rdata$r:00006E27                 db    0
.rdata$r:00006E28                 db    0
.rdata$r:00006E29                 db    0
.rdata$r:00006E2A                 db    0
.rdata$r:00006E2B                 db    0
.rdata$r:00006E2C                 db    1
.rdata$r:00006E2D                 db    0
.rdata$r:00006E2E                 db    0
.rdata$r:00006E2F                 db    0
.rdata$r:00006E30                 dd offset ??_R2IDirItemsCallback@@8 ; IDirItemsCallback::`RTTI Base Class Array'
.rdata$r:00006E30 _rdata$r        ends
.rdata$r:00006E30
.rdata$r:00006E34 ; ===========================================================================
.rdata$r:00006E34
.rdata$r:00006E34 ; Segment type: Pure data
.rdata$r:00006E34 ; Segment permissions: Read
.rdata$r:00006E34 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006E34                 assume cs:_rdata$r
.rdata$r:00006E34                 ;org 6E34h
.rdata$r:00006E34 ; COMDAT (pick any)
.rdata$r:00006E34                 public ??_R2IDirItemsCallback@@8
.rdata$r:00006E34 ; IDirItemsCallback::`RTTI Base Class Array'
.rdata$r:00006E34 ??_R2IDirItemsCallback@@8 dd offset ??_R1A@?0A@EA@IDirItemsCallback@@8
.rdata$r:00006E34                                         ; DATA XREF: .rdata$r:00006E30o
.rdata$r:00006E34                                         ; IDirItemsCallback::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00006E38                 db    0
.rdata$r:00006E39                 align 4
.rdata$r:00006E39 _rdata$r        ends
.rdata$r:00006E39
.rdata$r:00006E3C ; ===========================================================================
.rdata$r:00006E3C
.rdata$r:00006E3C ; Segment type: Pure data
.rdata$r:00006E3C ; Segment permissions: Read
.rdata$r:00006E3C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006E3C                 assume cs:_rdata$r
.rdata$r:00006E3C                 ;org 6E3Ch
.rdata$r:00006E3C ; COMDAT (pick any)
.rdata$r:00006E3C                 public ??_R1A@?0A@EA@IDirItemsCallback@@8
.rdata$r:00006E3C ; IDirItemsCallback::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00006E3C ??_R1A@?0A@EA@IDirItemsCallback@@8 dd offset ??_R0?AUIDirItemsCallback@@@8
.rdata$r:00006E3C                                         ; DATA XREF: .rdata$r:IDirItemsCallback::`RTTI Base Class Array'o
.rdata$r:00006E3C                                         ; .rdata$r:00007630o ...
.rdata$r:00006E3C                                         ; IDirItemsCallback `RTTI Type Descriptor'
.rdata$r:00006E40                 db    0
.rdata$r:00006E41                 db    0
.rdata$r:00006E42                 db    0
.rdata$r:00006E43                 db    0
.rdata$r:00006E44                 db    0
.rdata$r:00006E45                 db    0
.rdata$r:00006E46                 db    0
.rdata$r:00006E47                 db    0
.rdata$r:00006E48                 db 0FFh
.rdata$r:00006E49                 db 0FFh
.rdata$r:00006E4A                 db 0FFh
.rdata$r:00006E4B                 db 0FFh
.rdata$r:00006E4C                 db    0
.rdata$r:00006E4D                 db    0
.rdata$r:00006E4E                 db    0
.rdata$r:00006E4F                 db    0
.rdata$r:00006E50                 db  40h ; @
.rdata$r:00006E51                 db    0
.rdata$r:00006E52                 db    0
.rdata$r:00006E53                 db    0
.rdata$r:00006E54                 dd offset ??_R3IDirItemsCallback@@8 ; IDirItemsCallback::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006E54 _rdata$r        ends
.rdata$r:00006E54
.rdata$r:00006E58 ; ===========================================================================
.rdata$r:00006E58
.rdata$r:00006E58 ; Segment type: Pure data
.rdata$r:00006E58 ; Segment permissions: Read
.rdata$r:00006E58 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006E58                 assume cs:_rdata$r
.rdata$r:00006E58                 ;org 6E58h
.rdata$r:00006E58 ; COMDAT (pick any)
.rdata$r:00006E58                 public ??_R17?0A@EA@CCallbackConsoleBase@@8
.rdata$r:00006E58 ; CCallbackConsoleBase::`RTTI Base Class Descriptor at (8, -1, 0, 64)'
.rdata$r:00006E58 ??_R17?0A@EA@CCallbackConsoleBase@@8 dd offset ??_R0?AVCCallbackConsoleBase@@@8
.rdata$r:00006E58                                         ; DATA XREF: .rdata$r:00006D10o
.rdata$r:00006E58                                         ; .rdata$r:00007634o
.rdata$r:00006E58                                         ; CCallbackConsoleBase `RTTI Type Descriptor'
.rdata$r:00006E5C                 align 10h
.rdata$r:00006E60                 db    8
.rdata$r:00006E61                 db    0
.rdata$r:00006E62                 db    0
.rdata$r:00006E63                 db    0
.rdata$r:00006E64                 db 0FFh
.rdata$r:00006E65                 db 0FFh
.rdata$r:00006E66                 db 0FFh
.rdata$r:00006E67                 db 0FFh
.rdata$r:00006E68                 db    0
.rdata$r:00006E69                 db    0
.rdata$r:00006E6A                 db    0
.rdata$r:00006E6B                 db    0
.rdata$r:00006E6C                 db  40h ; @
.rdata$r:00006E6D                 db    0
.rdata$r:00006E6E                 db    0
.rdata$r:00006E6F                 db    0
.rdata$r:00006E70                 dd offset ??_R3CCallbackConsoleBase@@8 ; CCallbackConsoleBase::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006E70 _rdata$r        ends
.rdata$r:00006E70
.data:00006E74 ; ===========================================================================
.data:00006E74
.data:00006E74 ; Segment type: Pure data
.data:00006E74 ; Segment permissions: Read/Write
.data:00006E74 _data           segment dword public 'DATA' use32
.data:00006E74                 assume cs:_data
.data:00006E74                 ;org 6E74h
.data:00006E74 ; COMDAT (pick any)
.data:00006E74                 public ??_R0?AVCCallbackConsoleBase@@@8
.data:00006E74 ; class CCallbackConsoleBase `RTTI Type Descriptor'
.data:00006E74 ??_R0?AVCCallbackConsoleBase@@@8 dd offset ??_7type_info@@6B@
.data:00006E74                                         ; DATA XREF: .rdata$r:CCallbackConsoleBase::`RTTI Base Class Descriptor at (8,-1,0,64)'o
.data:00006E74                                         ; .rdata$r:CCallbackConsoleBase::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00006E74                                         ; const type_info::`vftable'
.data:00006E78                 db    0
.data:00006E79                 db    0
.data:00006E7A                 db    0
.data:00006E7B                 db    0
.data:00006E7C                 db  2Eh ; .
.data:00006E7D                 db  3Fh ; ?
.data:00006E7E                 db  41h ; A
.data:00006E7F                 db  56h ; V
.data:00006E80                 db  43h ; C
.data:00006E81                 db  43h ; C
.data:00006E82                 db  61h ; a
.data:00006E83                 db  6Ch ; l
.data:00006E84                 db  6Ch ; l
.data:00006E85                 db  62h ; b
.data:00006E86                 db  61h ; a
.data:00006E87                 db  63h ; c
.data:00006E88                 db  6Bh ; k
.data:00006E89                 db  43h ; C
.data:00006E8A                 db  6Fh ; o
.data:00006E8B                 db  6Eh ; n
.data:00006E8C                 db  73h ; s
.data:00006E8D                 db  6Fh ; o
.data:00006E8E                 db  6Ch ; l
.data:00006E8F                 db  65h ; e
.data:00006E90                 db  42h ; B
.data:00006E91                 db  61h ; a
.data:00006E92                 db  73h ; s
.data:00006E93                 db  65h ; e
.data:00006E94                 db  40h ; @
.data:00006E95                 db  40h ; @
.data:00006E96                 db    0
.data:00006E97                 align 4
.data:00006E97 _data           ends
.data:00006E97
.rdata$r:00006E98 ; ===========================================================================
.rdata$r:00006E98
.rdata$r:00006E98 ; Segment type: Pure data
.rdata$r:00006E98 ; Segment permissions: Read
.rdata$r:00006E98 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006E98                 assume cs:_rdata$r
.rdata$r:00006E98                 ;org 6E98h
.rdata$r:00006E98 ; COMDAT (pick any)
.rdata$r:00006E98                 public ??_R3CCallbackConsoleBase@@8
.rdata$r:00006E98 ; CCallbackConsoleBase::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006E98 ??_R3CCallbackConsoleBase@@8 db    0    ; DATA XREF: .rdata$r:00006E70o
.rdata$r:00006E98                                         ; .rdata$r:00006EC8o
.rdata$r:00006E99                 db    0
.rdata$r:00006E9A                 db    0
.rdata$r:00006E9B                 db    0
.rdata$r:00006E9C                 db    0
.rdata$r:00006E9D                 db    0
.rdata$r:00006E9E                 db    0
.rdata$r:00006E9F                 db    0
.rdata$r:00006EA0                 db    1
.rdata$r:00006EA1                 db    0
.rdata$r:00006EA2                 db    0
.rdata$r:00006EA3                 db    0
.rdata$r:00006EA4                 dd offset ??_R2CCallbackConsoleBase@@8 ; CCallbackConsoleBase::`RTTI Base Class Array'
.rdata$r:00006EA4 _rdata$r        ends
.rdata$r:00006EA4
.rdata$r:00006EA8 ; ===========================================================================
.rdata$r:00006EA8
.rdata$r:00006EA8 ; Segment type: Pure data
.rdata$r:00006EA8 ; Segment permissions: Read
.rdata$r:00006EA8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006EA8                 assume cs:_rdata$r
.rdata$r:00006EA8                 ;org 6EA8h
.rdata$r:00006EA8 ; COMDAT (pick any)
.rdata$r:00006EA8                 public ??_R2CCallbackConsoleBase@@8
.rdata$r:00006EA8 ; CCallbackConsoleBase::`RTTI Base Class Array'
.rdata$r:00006EA8 ??_R2CCallbackConsoleBase@@8 dd offset ??_R1A@?0A@EA@CCallbackConsoleBase@@8
.rdata$r:00006EA8                                         ; DATA XREF: .rdata$r:00006EA4o
.rdata$r:00006EA8                                         ; CCallbackConsoleBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00006EAC                 db    0
.rdata$r:00006EAD                 align 10h
.rdata$r:00006EAD _rdata$r        ends
.rdata$r:00006EAD
.rdata$r:00006EB0 ; ===========================================================================
.rdata$r:00006EB0
.rdata$r:00006EB0 ; Segment type: Pure data
.rdata$r:00006EB0 ; Segment permissions: Read
.rdata$r:00006EB0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006EB0                 assume cs:_rdata$r
.rdata$r:00006EB0                 ;org 6EB0h
.rdata$r:00006EB0 ; COMDAT (pick any)
.rdata$r:00006EB0                 public ??_R1A@?0A@EA@CCallbackConsoleBase@@8
.rdata$r:00006EB0 ; CCallbackConsoleBase::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00006EB0 ??_R1A@?0A@EA@CCallbackConsoleBase@@8 dd offset ??_R0?AVCCallbackConsoleBase@@@8
.rdata$r:00006EB0                                         ; DATA XREF: .rdata$r:CCallbackConsoleBase::`RTTI Base Class Array'o
.rdata$r:00006EB0                                         ; CCallbackConsoleBase `RTTI Type Descriptor'
.rdata$r:00006EB4                 db    0
.rdata$r:00006EB5                 db    0
.rdata$r:00006EB6                 db    0
.rdata$r:00006EB7                 db    0
.rdata$r:00006EB8                 db    0
.rdata$r:00006EB9                 db    0
.rdata$r:00006EBA                 db    0
.rdata$r:00006EBB                 db    0
.rdata$r:00006EBC                 db 0FFh
.rdata$r:00006EBD                 db 0FFh
.rdata$r:00006EBE                 db 0FFh
.rdata$r:00006EBF                 db 0FFh
.rdata$r:00006EC0                 db    0
.rdata$r:00006EC1                 db    0
.rdata$r:00006EC2                 db    0
.rdata$r:00006EC3                 db    0
.rdata$r:00006EC4                 db  40h ; @
.rdata$r:00006EC5                 db    0
.rdata$r:00006EC6                 db    0
.rdata$r:00006EC7                 db    0
.rdata$r:00006EC8                 dd offset ??_R3CCallbackConsoleBase@@8 ; CCallbackConsoleBase::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006EC8 _rdata$r        ends
.rdata$r:00006EC8
.rdata$r:00006ECC ; ===========================================================================
.rdata$r:00006ECC
.rdata$r:00006ECC ; Segment type: Pure data
.rdata$r:00006ECC ; Segment permissions: Read
.rdata$r:00006ECC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006ECC                 assume cs:_rdata$r
.rdata$r:00006ECC                 ;org 6ECCh
.rdata$r:00006ECC ; COMDAT (pick any)
.rdata$r:00006ECC                 public ??_R4CUpdateCallbackConsole@@6BIDirItemsCallback@@@
.rdata$r:00006ECC ; const CUpdateCallbackConsole::`RTTI Complete Object Locator'{for `IDirItemsCallback'}
.rdata$r:00006ECC ??_R4CUpdateCallbackConsole@@6BIDirItemsCallback@@@ db    0
.rdata$r:00006ECC                                         ; DATA XREF: .rdata:00006C1Co
.rdata$r:00006ECD                 db    0
.rdata$r:00006ECE                 db    0
.rdata$r:00006ECF                 db    0
.rdata$r:00006ED0                 db    4
.rdata$r:00006ED1                 db    0
.rdata$r:00006ED2                 db    0
.rdata$r:00006ED3                 db    0
.rdata$r:00006ED4                 db    0
.rdata$r:00006ED5                 db    0
.rdata$r:00006ED6                 db    0
.rdata$r:00006ED7                 db    0
.rdata$r:00006ED8                 dd offset ??_R0?AVCUpdateCallbackConsole@@@8 ; CUpdateCallbackConsole `RTTI Type Descriptor'
.rdata$r:00006EDC                 dd offset ??_R3CUpdateCallbackConsole@@8 ; CUpdateCallbackConsole::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006EDC _rdata$r        ends
.rdata$r:00006EDC
.text:00006EE0 ; ===========================================================================
.text:00006EE0
.text:00006EE0 ; Segment type: Pure code
.text:00006EE0 ; Segment permissions: Read/Execute
.text:00006EE0 _text           segment para public 'CODE' use32
.text:00006EE0                 assume cs:_text
.text:00006EE0                 ;org 6EE0h
.text:00006EE0 ; COMDAT (pick any)
.text:00006EE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006EE0
.text:00006EE0 ; =============== S U B R O U T I N E =======================================
.text:00006EE0
.text:00006EE0 ; Attributes: bp-based frame
.text:00006EE0
.text:00006EE0 ; public: __thiscall CCallbackConsoleBase::CCallbackConsoleBase(void)
.text:00006EE0                 public ??0CCallbackConsoleBase@@QAE@XZ
.text:00006EE0 ??0CCallbackConsoleBase@@QAE@XZ proc near
.text:00006EE0                                         ; CODE XREF: CUpdateCallbackConsole::CUpdateCallbackConsole(void)+3Bp
.text:00006EE0                                         ; CHashCallbackConsole::CHashCallbackConsole(void)+3Bp
.text:00006EE0
.text:00006EE0 var_10          = dword ptr -10h
.text:00006EE0 var_C           = dword ptr -0Ch
.text:00006EE0 var_4           = dword ptr -4
.text:00006EE0
.text:00006EE0                 push    ebp
.text:00006EE1                 mov     ebp, esp
.text:00006EE3                 push    0FFFFFFFFh
.text:00006EE5                 push    offset __ehhandler$??0CCallbackConsoleBase@@QAE@XZ
.text:00006EEA                 mov     eax, large fs:0
.text:00006EF0                 push    eax
.text:00006EF1                 push    ecx
.text:00006EF2                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00006EF9                 mov     eax, dword ptr ds:___security_cookie
.text:00006EFE                 xor     eax, ebp
.text:00006F00                 push    eax
.text:00006F01                 lea     eax, [ebp+var_C]
.text:00006F04                 mov     large fs:0, eax
.text:00006F0A                 mov     [ebp+var_10], ecx
.text:00006F0D                 push    0C8h ; '+'
.text:00006F12                 mov     ecx, [ebp+var_10]
.text:00006F15                 call    ??0CPercentPrinter@@QAE@I@Z ; CPercentPrinter::CPercentPrinter(uint)
.text:00006F1A                 mov     [ebp+var_4], 0
.text:00006F21                 mov     eax, [ebp+var_10]
.text:00006F24                 mov     byte ptr [eax+0B8h], 0
.text:00006F2B                 mov     ecx, [ebp+var_10]
.text:00006F2E                 mov     byte ptr [ecx+0B9h], 0
.text:00006F35                 mov     edx, [ebp+var_10]
.text:00006F38                 mov     dword ptr [edx+0BCh], 1
.text:00006F42                 mov     eax, [ebp+var_10]
.text:00006F45                 mov     dword ptr [eax+0C0h], 0
.text:00006F4F                 mov     ecx, [ebp+var_10]
.text:00006F52                 add     ecx, 0C4h ; '-'
.text:00006F58                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:00006F5D                 mov     byte ptr [ebp+var_4], 1
.text:00006F61                 mov     ecx, [ebp+var_10]
.text:00006F64                 add     ecx, 0D0h ; '-'
.text:00006F6A                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00006F6F                 mov     byte ptr [ebp+var_4], 2
.text:00006F73                 mov     ecx, [ebp+var_10]
.text:00006F76                 add     ecx, 0DCh ; '_' ; this
.text:00006F7C                 call    ??0CErrorPathCodes@@QAE@XZ ; CErrorPathCodes::CErrorPathCodes(void)
.text:00006F81                 mov     byte ptr [ebp+var_4], 3
.text:00006F85                 mov     ecx, [ebp+var_10]
.text:00006F88                 add     ecx, 0F4h ; '(' ; this
.text:00006F8E                 call    ??0CErrorPathCodes@@QAE@XZ ; CErrorPathCodes::CErrorPathCodes(void)
.text:00006F93                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00006F9A                 mov     eax, [ebp+var_10]
.text:00006F9D                 mov     ecx, [ebp+var_C]
.text:00006FA0                 mov     large fs:0, ecx
.text:00006FA7                 pop     ecx
.text:00006FA8                 add     esp, 10h
.text:00006FAB                 cmp     ebp, esp
.text:00006FAD                 call    __RTC_CheckEsp
.text:00006FB2                 mov     esp, ebp
.text:00006FB4                 pop     ebp
.text:00006FB5                 retn
.text:00006FB5 ??0CCallbackConsoleBase@@QAE@XZ endp
.text:00006FB5
.text:00006FB5 ; ---------------------------------------------------------------------------
.text:00006FB6                 align 4
.text:00006FB6 _text           ends
.text:00006FB6
.text$x:00006FB8 ; ===========================================================================
.text$x:00006FB8
.text$x:00006FB8 ; Segment type: Pure code
.text$x:00006FB8 ; Segment permissions: Read/Execute
.text$x:00006FB8 _text$x         segment para public 'CODE' use32
.text$x:00006FB8                 assume cs:_text$x
.text$x:00006FB8                 ;org 6FB8h
.text$x:00006FB8 ; COMDAT (pick associative to section at 6EE0)
.text$x:00006FB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006FB8
.text$x:00006FB8 ; =============== S U B R O U T I N E =======================================
.text$x:00006FB8
.text$x:00006FB8
.text$x:00006FB8 __unwindfunclet$??0CCallbackConsoleBase@@QAE@XZ$0 proc near
.text$x:00006FB8                                         ; DATA XREF: .xdata$x:0000700Co
.text$x:00006FB8                 mov     ecx, [ebp-10h]  ; this
.text$x:00006FBB                 jmp     ??1CPercentPrinter@@QAE@XZ ; CPercentPrinter::~CPercentPrinter(void)
.text$x:00006FBB __unwindfunclet$??0CCallbackConsoleBase@@QAE@XZ$0 endp
.text$x:00006FBB
.text$x:00006FC0
.text$x:00006FC0 ; =============== S U B R O U T I N E =======================================
.text$x:00006FC0
.text$x:00006FC0
.text$x:00006FC0 __unwindfunclet$??0CCallbackConsoleBase@@QAE@XZ$1 proc near
.text$x:00006FC0                                         ; DATA XREF: .xdata$x:00007014o
.text$x:00006FC0                 mov     ecx, [ebp-10h]
.text$x:00006FC3                 add     ecx, 0C4h ; '-' ; this
.text$x:00006FC9                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00006FC9 __unwindfunclet$??0CCallbackConsoleBase@@QAE@XZ$1 endp
.text$x:00006FC9
.text$x:00006FCE
.text$x:00006FCE ; =============== S U B R O U T I N E =======================================
.text$x:00006FCE
.text$x:00006FCE
.text$x:00006FCE __unwindfunclet$??0CCallbackConsoleBase@@QAE@XZ$2 proc near
.text$x:00006FCE                                         ; DATA XREF: .xdata$x:0000701Co
.text$x:00006FCE                 mov     ecx, [ebp-10h]
.text$x:00006FD1                 add     ecx, 0D0h ; '-' ; this
.text$x:00006FD7                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00006FD7 __unwindfunclet$??0CCallbackConsoleBase@@QAE@XZ$2 endp
.text$x:00006FD7
.text$x:00006FDC
.text$x:00006FDC ; =============== S U B R O U T I N E =======================================
.text$x:00006FDC
.text$x:00006FDC
.text$x:00006FDC __unwindfunclet$??0CCallbackConsoleBase@@QAE@XZ$3 proc near
.text$x:00006FDC                                         ; DATA XREF: .xdata$x:00007024o
.text$x:00006FDC                 mov     ecx, [ebp-10h]
.text$x:00006FDF                 add     ecx, 0DCh ; '_' ; this
.text$x:00006FE5                 jmp     ??1CErrorPathCodes@@QAE@XZ ; CErrorPathCodes::~CErrorPathCodes(void)
.text$x:00006FE5 __unwindfunclet$??0CCallbackConsoleBase@@QAE@XZ$3 endp
.text$x:00006FE5
.text$x:00006FEA
.text$x:00006FEA ; =============== S U B R O U T I N E =======================================
.text$x:00006FEA
.text$x:00006FEA
.text$x:00006FEA __ehhandler$??0CCallbackConsoleBase@@QAE@XZ proc near
.text$x:00006FEA                                         ; DATA XREF: CCallbackConsoleBase::CCallbackConsoleBase(void)+5o
.text$x:00006FEA
.text$x:00006FEA arg_4           = dword ptr  8
.text$x:00006FEA
.text$x:00006FEA                 mov     edx, [esp+arg_4]
.text$x:00006FEE                 lea     eax, [edx+0Ch]
.text$x:00006FF1                 mov     ecx, [edx-8]
.text$x:00006FF4                 xor     ecx, eax
.text$x:00006FF6                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006FFB                 mov     eax, offset __ehfuncinfo$??0CCallbackConsoleBase@@QAE@XZ
.text$x:00007000                 jmp     ___CxxFrameHandler3
.text$x:00007000 __ehhandler$??0CCallbackConsoleBase@@QAE@XZ endp
.text$x:00007000
.text$x:00007000 ; ---------------------------------------------------------------------------
.text$x:00007005                 align 4
.text$x:00007005 _text$x         ends
.text$x:00007005
.xdata$x:00007008 ; ===========================================================================
.xdata$x:00007008
.xdata$x:00007008 ; Segment type: Pure data
.xdata$x:00007008 ; Segment permissions: Read
.xdata$x:00007008 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007008                 assume cs:_xdata$x
.xdata$x:00007008                 ;org 7008h
.xdata$x:00007008 ; COMDAT (pick associative to section at 6EE0)
.xdata$x:00007008 __unwindtable$??0CCallbackConsoleBase@@QAE@XZ db 0FFh
.xdata$x:00007008                                         ; DATA XREF: .xdata$x:00007030o
.xdata$x:00007009                 db 0FFh
.xdata$x:0000700A                 db 0FFh
.xdata$x:0000700B                 db 0FFh
.xdata$x:0000700C                 dd offset __unwindfunclet$??0CCallbackConsoleBase@@QAE@XZ$0
.xdata$x:00007010                 db    0
.xdata$x:00007011                 db    0
.xdata$x:00007012                 db    0
.xdata$x:00007013                 db    0
.xdata$x:00007014                 dd offset __unwindfunclet$??0CCallbackConsoleBase@@QAE@XZ$1
.xdata$x:00007018                 db    1
.xdata$x:00007019                 db    0
.xdata$x:0000701A                 db    0
.xdata$x:0000701B                 db    0
.xdata$x:0000701C                 dd offset __unwindfunclet$??0CCallbackConsoleBase@@QAE@XZ$2
.xdata$x:00007020                 db    2
.xdata$x:00007021                 db    0
.xdata$x:00007022                 db    0
.xdata$x:00007023                 db    0
.xdata$x:00007024                 dd offset __unwindfunclet$??0CCallbackConsoleBase@@QAE@XZ$3
.xdata$x:00007028 __ehfuncinfo$??0CCallbackConsoleBase@@QAE@XZ db  22h ; "
.xdata$x:00007028                                         ; DATA XREF: __ehhandler$??0CCallbackConsoleBase@@QAE@XZ+11o
.xdata$x:00007029                 db    5
.xdata$x:0000702A                 db  93h ; ô
.xdata$x:0000702B                 db  19h
.xdata$x:0000702C                 db    4
.xdata$x:0000702D                 db    0
.xdata$x:0000702E                 db    0
.xdata$x:0000702F                 db    0
.xdata$x:00007030                 dd offset __unwindtable$??0CCallbackConsoleBase@@QAE@XZ
.xdata$x:00007034                 db    0
.xdata$x:00007035                 db    0
.xdata$x:00007036                 db    0
.xdata$x:00007037                 db    0
.xdata$x:00007038                 db    0
.xdata$x:00007039                 db    0
.xdata$x:0000703A                 db    0
.xdata$x:0000703B                 db    0
.xdata$x:0000703C                 db    0
.xdata$x:0000703D                 db    0
.xdata$x:0000703E                 db    0
.xdata$x:0000703F                 db    0
.xdata$x:00007040                 db    0
.xdata$x:00007041                 db    0
.xdata$x:00007042                 db    0
.xdata$x:00007043                 db    0
.xdata$x:00007044                 db    0
.xdata$x:00007045                 db    0
.xdata$x:00007046                 db    0
.xdata$x:00007047                 db    0
.xdata$x:00007048                 db    1
.xdata$x:00007049                 db    0
.xdata$x:0000704A                 db    0
.xdata$x:0000704B                 db    0
.xdata$x:0000704B _xdata$x        ends
.xdata$x:0000704B
.text:0000704C ; ===========================================================================
.text:0000704C
.text:0000704C ; Segment type: Pure code
.text:0000704C ; Segment permissions: Read/Execute
.text:0000704C _text           segment para public 'CODE' use32
.text:0000704C                 assume cs:_text
.text:0000704C                 ;org 704Ch
.text:0000704C ; COMDAT (pick any)
.text:0000704C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000704C
.text:0000704C ; =============== S U B R O U T I N E =======================================
.text:0000704C
.text:0000704C ; Attributes: bp-based frame
.text:0000704C
.text:0000704C ; _DWORD __thiscall CErrorPathCodes::CErrorPathCodes(CErrorPathCodes *__hidden this)
.text:0000704C                 public ??0CErrorPathCodes@@QAE@XZ
.text:0000704C ??0CErrorPathCodes@@QAE@XZ proc near    ; CODE XREF: CCallbackConsoleBase::CCallbackConsoleBase(void)+9Cp
.text:0000704C                                         ; CCallbackConsoleBase::CCallbackConsoleBase(void)+AEp
.text:0000704C
.text:0000704C var_10          = dword ptr -10h
.text:0000704C var_C           = dword ptr -0Ch
.text:0000704C var_4           = dword ptr -4
.text:0000704C
.text:0000704C                 push    ebp
.text:0000704D                 mov     ebp, esp
.text:0000704F                 push    0FFFFFFFFh
.text:00007051                 push    offset __ehhandler$??0CErrorPathCodes@@QAE@XZ
.text:00007056                 mov     eax, large fs:0
.text:0000705C                 push    eax
.text:0000705D                 push    ecx
.text:0000705E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00007065                 mov     eax, dword ptr ds:___security_cookie
.text:0000706A                 xor     eax, ebp
.text:0000706C                 push    eax
.text:0000706D                 lea     eax, [ebp+var_C]
.text:00007070                 mov     large fs:0, eax
.text:00007076                 mov     [ebp+var_10], ecx
.text:00007079                 mov     ecx, [ebp+var_10]
.text:0000707C                 call    ??0?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::CObjectVector<UString>(void)
.text:00007081                 mov     [ebp+var_4], 0
.text:00007088                 mov     ecx, [ebp+var_10]
.text:0000708B                 add     ecx, 0Ch
.text:0000708E                 call    ??0?$CRecordVector@K@@QAE@XZ ; CRecordVector<ulong>::CRecordVector<ulong>(void)
.text:00007093                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000709A                 mov     eax, [ebp+var_10]
.text:0000709D                 mov     ecx, [ebp+var_C]
.text:000070A0                 mov     large fs:0, ecx
.text:000070A7                 pop     ecx
.text:000070A8                 add     esp, 10h
.text:000070AB                 cmp     ebp, esp
.text:000070AD                 call    __RTC_CheckEsp
.text:000070B2                 mov     esp, ebp
.text:000070B4                 pop     ebp
.text:000070B5                 retn
.text:000070B5 ??0CErrorPathCodes@@QAE@XZ endp
.text:000070B5
.text:000070B5 ; ---------------------------------------------------------------------------
.text:000070B6                 align 4
.text:000070B6 _text           ends
.text:000070B6
.text$x:000070B8 ; ===========================================================================
.text$x:000070B8
.text$x:000070B8 ; Segment type: Pure code
.text$x:000070B8 ; Segment permissions: Read/Execute
.text$x:000070B8 _text$x         segment para public 'CODE' use32
.text$x:000070B8                 assume cs:_text$x
.text$x:000070B8                 ;org 70B8h
.text$x:000070B8 ; COMDAT (pick associative to section at 704C)
.text$x:000070B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000070B8
.text$x:000070B8 ; =============== S U B R O U T I N E =======================================
.text$x:000070B8
.text$x:000070B8
.text$x:000070B8 __unwindfunclet$??0CErrorPathCodes@@QAE@XZ$0 proc near
.text$x:000070B8                                         ; DATA XREF: .xdata$x:000070E0o
.text$x:000070B8                 mov     ecx, [ebp-10h]
.text$x:000070BB                 jmp     ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text$x:000070BB __unwindfunclet$??0CErrorPathCodes@@QAE@XZ$0 endp
.text$x:000070BB
.text$x:000070C0
.text$x:000070C0 ; =============== S U B R O U T I N E =======================================
.text$x:000070C0
.text$x:000070C0
.text$x:000070C0 __ehhandler$??0CErrorPathCodes@@QAE@XZ proc near
.text$x:000070C0                                         ; DATA XREF: CErrorPathCodes::CErrorPathCodes(void)+5o
.text$x:000070C0
.text$x:000070C0 arg_4           = dword ptr  8
.text$x:000070C0
.text$x:000070C0                 mov     edx, [esp+arg_4]
.text$x:000070C4                 lea     eax, [edx+0Ch]
.text$x:000070C7                 mov     ecx, [edx-8]
.text$x:000070CA                 xor     ecx, eax
.text$x:000070CC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000070D1                 mov     eax, offset __ehfuncinfo$??0CErrorPathCodes@@QAE@XZ
.text$x:000070D6                 jmp     ___CxxFrameHandler3
.text$x:000070D6 __ehhandler$??0CErrorPathCodes@@QAE@XZ endp
.text$x:000070D6
.text$x:000070D6 ; ---------------------------------------------------------------------------
.text$x:000070DB                 align 4
.text$x:000070DB _text$x         ends
.text$x:000070DB
.xdata$x:000070DC ; ===========================================================================
.xdata$x:000070DC
.xdata$x:000070DC ; Segment type: Pure data
.xdata$x:000070DC ; Segment permissions: Read
.xdata$x:000070DC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000070DC                 assume cs:_xdata$x
.xdata$x:000070DC                 ;org 70DCh
.xdata$x:000070DC ; COMDAT (pick associative to section at 704C)
.xdata$x:000070DC __unwindtable$??0CErrorPathCodes@@QAE@XZ db 0FFh
.xdata$x:000070DC                                         ; DATA XREF: .xdata$x:000070ECo
.xdata$x:000070DD                 db 0FFh
.xdata$x:000070DE                 db 0FFh
.xdata$x:000070DF                 db 0FFh
.xdata$x:000070E0                 dd offset __unwindfunclet$??0CErrorPathCodes@@QAE@XZ$0
.xdata$x:000070E4 __ehfuncinfo$??0CErrorPathCodes@@QAE@XZ db  22h ; "
.xdata$x:000070E4                                         ; DATA XREF: __ehhandler$??0CErrorPathCodes@@QAE@XZ+11o
.xdata$x:000070E5                 db    5
.xdata$x:000070E6                 db  93h ; ô
.xdata$x:000070E7                 db  19h
.xdata$x:000070E8                 db    1
.xdata$x:000070E9                 db    0
.xdata$x:000070EA                 db    0
.xdata$x:000070EB                 db    0
.xdata$x:000070EC                 dd offset __unwindtable$??0CErrorPathCodes@@QAE@XZ
.xdata$x:000070F0                 db    0
.xdata$x:000070F1                 db    0
.xdata$x:000070F2                 db    0
.xdata$x:000070F3                 db    0
.xdata$x:000070F4                 db    0
.xdata$x:000070F5                 db    0
.xdata$x:000070F6                 db    0
.xdata$x:000070F7                 db    0
.xdata$x:000070F8                 db    0
.xdata$x:000070F9                 db    0
.xdata$x:000070FA                 db    0
.xdata$x:000070FB                 db    0
.xdata$x:000070FC                 db    0
.xdata$x:000070FD                 db    0
.xdata$x:000070FE                 db    0
.xdata$x:000070FF                 db    0
.xdata$x:00007100                 db    0
.xdata$x:00007101                 db    0
.xdata$x:00007102                 db    0
.xdata$x:00007103                 db    0
.xdata$x:00007104                 db    1
.xdata$x:00007105                 db    0
.xdata$x:00007106                 db    0
.xdata$x:00007107                 db    0
.xdata$x:00007107 _xdata$x        ends
.xdata$x:00007107
.text:00007108 ; ===========================================================================
.text:00007108
.text:00007108 ; Segment type: Pure code
.text:00007108 ; Segment permissions: Read/Execute
.text:00007108 _text           segment para public 'CODE' use32
.text:00007108                 assume cs:_text
.text:00007108                 ;org 7108h
.text:00007108 ; COMDAT (pick any)
.text:00007108                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007108
.text:00007108 ; =============== S U B R O U T I N E =======================================
.text:00007108
.text:00007108 ; Attributes: bp-based frame
.text:00007108
.text:00007108 ; _DWORD __thiscall CErrorPathCodes::~CErrorPathCodes(CErrorPathCodes *__hidden this)
.text:00007108                 public ??1CErrorPathCodes@@QAE@XZ
.text:00007108 ??1CErrorPathCodes@@QAE@XZ proc near    ; CODE XREF: __unwindfunclet$??0CCallbackConsoleBase@@QAE@XZ$3+9j
.text:00007108                                         ; CCallbackConsoleBase::~CCallbackConsoleBase(void)+3Dp ...
.text:00007108
.text:00007108 var_10          = dword ptr -10h
.text:00007108 var_C           = dword ptr -0Ch
.text:00007108 var_4           = dword ptr -4
.text:00007108
.text:00007108                 push    ebp
.text:00007109                 mov     ebp, esp
.text:0000710B                 push    0FFFFFFFFh
.text:0000710D                 push    offset __ehhandler$??1CErrorPathCodes@@QAE@XZ
.text:00007112                 mov     eax, large fs:0
.text:00007118                 push    eax
.text:00007119                 push    ecx
.text:0000711A                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00007121                 mov     eax, dword ptr ds:___security_cookie
.text:00007126                 xor     eax, ebp
.text:00007128                 push    eax
.text:00007129                 lea     eax, [ebp+var_C]
.text:0000712C                 mov     large fs:0, eax
.text:00007132                 mov     [ebp+var_10], ecx
.text:00007135                 mov     [ebp+var_4], 0
.text:0000713C                 mov     ecx, [ebp+var_10]
.text:0000713F                 add     ecx, 0Ch
.text:00007142                 call    ??1?$CRecordVector@K@@QAE@XZ ; CRecordVector<ulong>::~CRecordVector<ulong>(void)
.text:00007147                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000714E                 mov     ecx, [ebp+var_10]
.text:00007151                 call    ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text:00007156                 mov     ecx, [ebp+var_C]
.text:00007159                 mov     large fs:0, ecx
.text:00007160                 pop     ecx
.text:00007161                 add     esp, 10h
.text:00007164                 cmp     ebp, esp
.text:00007166                 call    __RTC_CheckEsp
.text:0000716B                 mov     esp, ebp
.text:0000716D                 pop     ebp
.text:0000716E                 retn
.text:0000716E ??1CErrorPathCodes@@QAE@XZ endp
.text:0000716E
.text:0000716E ; ---------------------------------------------------------------------------
.text:0000716F                 align 10h
.text:0000716F _text           ends
.text:0000716F
.text$x:00007170 ; ===========================================================================
.text$x:00007170
.text$x:00007170 ; Segment type: Pure code
.text$x:00007170 ; Segment permissions: Read/Execute
.text$x:00007170 _text$x         segment para public 'CODE' use32
.text$x:00007170                 assume cs:_text$x
.text$x:00007170                 ;org 7170h
.text$x:00007170 ; COMDAT (pick associative to section at 7108)
.text$x:00007170                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007170
.text$x:00007170 ; =============== S U B R O U T I N E =======================================
.text$x:00007170
.text$x:00007170
.text$x:00007170 __unwindfunclet$??1CErrorPathCodes@@QAE@XZ$0 proc near
.text$x:00007170                                         ; DATA XREF: .xdata$x:00007198o
.text$x:00007170                 mov     ecx, [ebp-10h]
.text$x:00007173                 jmp     ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text$x:00007173 __unwindfunclet$??1CErrorPathCodes@@QAE@XZ$0 endp
.text$x:00007173
.text$x:00007178
.text$x:00007178 ; =============== S U B R O U T I N E =======================================
.text$x:00007178
.text$x:00007178
.text$x:00007178 __ehhandler$??1CErrorPathCodes@@QAE@XZ proc near
.text$x:00007178                                         ; DATA XREF: CErrorPathCodes::~CErrorPathCodes(void)+5o
.text$x:00007178
.text$x:00007178 arg_4           = dword ptr  8
.text$x:00007178
.text$x:00007178                 mov     edx, [esp+arg_4]
.text$x:0000717C                 lea     eax, [edx+0Ch]
.text$x:0000717F                 mov     ecx, [edx-8]
.text$x:00007182                 xor     ecx, eax
.text$x:00007184                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007189                 mov     eax, offset __ehfuncinfo$??1CErrorPathCodes@@QAE@XZ
.text$x:0000718E                 jmp     ___CxxFrameHandler3
.text$x:0000718E __ehhandler$??1CErrorPathCodes@@QAE@XZ endp
.text$x:0000718E
.text$x:0000718E ; ---------------------------------------------------------------------------
.text$x:00007193                 align 4
.text$x:00007193 _text$x         ends
.text$x:00007193
.xdata$x:00007194 ; ===========================================================================
.xdata$x:00007194
.xdata$x:00007194 ; Segment type: Pure data
.xdata$x:00007194 ; Segment permissions: Read
.xdata$x:00007194 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007194                 assume cs:_xdata$x
.xdata$x:00007194                 ;org 7194h
.xdata$x:00007194 ; COMDAT (pick associative to section at 7108)
.xdata$x:00007194 __unwindtable$??1CErrorPathCodes@@QAE@XZ db 0FFh
.xdata$x:00007194                                         ; DATA XREF: .xdata$x:000071A4o
.xdata$x:00007195                 db 0FFh
.xdata$x:00007196                 db 0FFh
.xdata$x:00007197                 db 0FFh
.xdata$x:00007198                 dd offset __unwindfunclet$??1CErrorPathCodes@@QAE@XZ$0
.xdata$x:0000719C __ehfuncinfo$??1CErrorPathCodes@@QAE@XZ db  22h ; "
.xdata$x:0000719C                                         ; DATA XREF: __ehhandler$??1CErrorPathCodes@@QAE@XZ+11o
.xdata$x:0000719D                 db    5
.xdata$x:0000719E                 db  93h ; ô
.xdata$x:0000719F                 db  19h
.xdata$x:000071A0                 db    1
.xdata$x:000071A1                 db    0
.xdata$x:000071A2                 db    0
.xdata$x:000071A3                 db    0
.xdata$x:000071A4                 dd offset __unwindtable$??1CErrorPathCodes@@QAE@XZ
.xdata$x:000071A8                 db    0
.xdata$x:000071A9                 db    0
.xdata$x:000071AA                 db    0
.xdata$x:000071AB                 db    0
.xdata$x:000071AC                 db    0
.xdata$x:000071AD                 db    0
.xdata$x:000071AE                 db    0
.xdata$x:000071AF                 db    0
.xdata$x:000071B0                 db    0
.xdata$x:000071B1                 db    0
.xdata$x:000071B2                 db    0
.xdata$x:000071B3                 db    0
.xdata$x:000071B4                 db    0
.xdata$x:000071B5                 db    0
.xdata$x:000071B6                 db    0
.xdata$x:000071B7                 db    0
.xdata$x:000071B8                 db    0
.xdata$x:000071B9                 db    0
.xdata$x:000071BA                 db    0
.xdata$x:000071BB                 db    0
.xdata$x:000071BC                 db    1
.xdata$x:000071BD                 db    0
.xdata$x:000071BE                 db    0
.xdata$x:000071BF                 db    0
.xdata$x:000071BF _xdata$x        ends
.xdata$x:000071BF
.text:000071C0 ; ===========================================================================
.text:000071C0
.text:000071C0 ; Segment type: Pure code
.text:000071C0 ; Segment permissions: Read/Execute
.text:000071C0 _text           segment para public 'CODE' use32
.text:000071C0                 assume cs:_text
.text:000071C0                 ;org 71C0h
.text:000071C0 ; COMDAT (pick any)
.text:000071C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000071C0
.text:000071C0 ; =============== S U B R O U T I N E =======================================
.text:000071C0
.text:000071C0 ; Attributes: bp-based frame
.text:000071C0
.text:000071C0 ; _DWORD __thiscall IUpdateCallbackUI2::IUpdateCallbackUI2(IUpdateCallbackUI2 *__hidden this)
.text:000071C0                 public ??0IUpdateCallbackUI2@@QAE@XZ
.text:000071C0 ??0IUpdateCallbackUI2@@QAE@XZ proc near ; CODE XREF: CUpdateCallbackConsole::CUpdateCallbackConsole(void)+30p
.text:000071C0
.text:000071C0 var_4           = dword ptr -4
.text:000071C0
.text:000071C0                 push    ebp
.text:000071C1                 mov     ebp, esp
.text:000071C3                 push    ecx
.text:000071C4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000071CB                 mov     [ebp+var_4], ecx
.text:000071CE                 mov     ecx, [ebp+var_4] ; this
.text:000071D1                 call    ??0IUpdateCallbackUI@@QAE@XZ ; IUpdateCallbackUI::IUpdateCallbackUI(void)
.text:000071D6                 mov     ecx, [ebp+var_4]
.text:000071D9                 add     ecx, 4          ; this
.text:000071DC                 call    ??0IDirItemsCallback@@QAE@XZ ; IDirItemsCallback::IDirItemsCallback(void)
.text:000071E1                 mov     eax, [ebp+var_4]
.text:000071E4                 mov     dword ptr [eax], offset ??_7IUpdateCallbackUI2@@6BIUpdateCallbackUI@@@ ; const IUpdateCallbackUI2::`vftable'{for `IUpdateCallbackUI'}
.text:000071EA                 mov     ecx, [ebp+var_4]
.text:000071ED                 mov     dword ptr [ecx+4], offset ??_7IUpdateCallbackUI2@@6BIDirItemsCallback@@@ ; const IUpdateCallbackUI2::`vftable'{for `IDirItemsCallback'}
.text:000071F4                 mov     eax, [ebp+var_4]
.text:000071F7                 add     esp, 4
.text:000071FA                 cmp     ebp, esp
.text:000071FC                 call    __RTC_CheckEsp
.text:00007201                 mov     esp, ebp
.text:00007203                 pop     ebp
.text:00007204                 retn
.text:00007204 ??0IUpdateCallbackUI2@@QAE@XZ endp
.text:00007204
.text:00007204 ; ---------------------------------------------------------------------------
.text:00007205                 align 4
.text:00007205 _text           ends
.text:00007205
.rdata:00007208 ; ===========================================================================
.rdata:00007208
.rdata:00007208 ; Segment type: Pure data
.rdata:00007208 ; Segment permissions: Read
.rdata:00007208 _rdata          segment dword public 'DATA' use32
.rdata:00007208                 assume cs:_rdata
.rdata:00007208                 ;org 7208h
.rdata:00007208 ; COMDAT (pick largest)
.rdata:00007208                 dd offset ??_R4IUpdateCallbackUI2@@6BIDirItemsCallback@@@ ; const IUpdateCallbackUI2::`RTTI Complete Object Locator'{for `IDirItemsCallback'}
.rdata:0000720C                 public ??_7IUpdateCallbackUI2@@6BIDirItemsCallback@@@
.rdata:0000720C ; const IUpdateCallbackUI2::`vftable'{for `IDirItemsCallback'}
.rdata:0000720C ??_7IUpdateCallbackUI2@@6BIDirItemsCallback@@@ dd offset __purecall
.rdata:0000720C                                         ; DATA XREF: IUpdateCallbackUI2::IUpdateCallbackUI2(void)+2Do
.rdata:00007210                 dd offset __purecall
.rdata:00007210 _rdata          ends
.rdata:00007210
.rdata:00007214 ; ===========================================================================
.rdata:00007214
.rdata:00007214 ; Segment type: Pure data
.rdata:00007214 ; Segment permissions: Read
.rdata:00007214 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00007214 _rdata          segment para public 'DATA' use32
.rdata:00007214                 assume cs:_rdata
.rdata:00007214                 ;org 7214h
.rdata:00007214 ; COMDAT (pick largest)
.rdata:00007214                 dd offset ??_R4IUpdateCallbackUI2@@6BIUpdateCallbackUI@@@ ; const IUpdateCallbackUI2::`RTTI Complete Object Locator'{for `IUpdateCallbackUI'}
.rdata:00007218                 public ??_7IUpdateCallbackUI2@@6BIUpdateCallbackUI@@@
.rdata:00007218 ; const IUpdateCallbackUI2::`vftable'{for `IUpdateCallbackUI'}
.rdata:00007218 ??_7IUpdateCallbackUI2@@6BIUpdateCallbackUI@@@ dd offset __purecall
.rdata:00007218                                         ; DATA XREF: IUpdateCallbackUI2::IUpdateCallbackUI2(void)+24o
.rdata:0000721C                 dd offset __purecall
.rdata:00007220                 dd offset __purecall
.rdata:00007224                 dd offset __purecall
.rdata:00007228                 dd offset __purecall
.rdata:0000722C                 dd offset __purecall
.rdata:00007230                 dd offset __purecall
.rdata:00007234                 dd offset __purecall
.rdata:00007238                 dd offset __purecall
.rdata:0000723C                 dd offset __purecall
.rdata:00007240                 dd offset __purecall
.rdata:00007244                 dd offset __purecall
.rdata:00007248                 dd offset __purecall
.rdata:0000724C                 dd offset __purecall
.rdata:00007250                 dd offset __purecall
.rdata:00007254                 dd offset __purecall
.rdata:00007258                 dd offset __purecall
.rdata:0000725C                 dd offset __purecall
.rdata:00007260                 dd offset __purecall
.rdata:00007264                 dd offset __purecall
.rdata:00007268                 dd offset __purecall
.rdata:0000726C                 dd offset __purecall
.rdata:00007270                 dd offset __purecall
.rdata:00007270 _rdata          ends
.rdata:00007270
.rdata$r:00007274 ; ===========================================================================
.rdata$r:00007274
.rdata$r:00007274 ; Segment type: Pure data
.rdata$r:00007274 ; Segment permissions: Read
.rdata$r:00007274 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007274                 assume cs:_rdata$r
.rdata$r:00007274                 ;org 7274h
.rdata$r:00007274 ; COMDAT (pick any)
.rdata$r:00007274                 public ??_R4IUpdateCallbackUI2@@6BIUpdateCallbackUI@@@
.rdata$r:00007274 ; const IUpdateCallbackUI2::`RTTI Complete Object Locator'{for `IUpdateCallbackUI'}
.rdata$r:00007274 ??_R4IUpdateCallbackUI2@@6BIUpdateCallbackUI@@@ db    0
.rdata$r:00007274                                         ; DATA XREF: .rdata:00007214o
.rdata$r:00007275                 db    0
.rdata$r:00007276                 db    0
.rdata$r:00007277                 db    0
.rdata$r:00007278                 db    0
.rdata$r:00007279                 db    0
.rdata$r:0000727A                 db    0
.rdata$r:0000727B                 db    0
.rdata$r:0000727C                 db    0
.rdata$r:0000727D                 db    0
.rdata$r:0000727E                 db    0
.rdata$r:0000727F                 db    0
.rdata$r:00007280                 dd offset ??_R0?AUIUpdateCallbackUI2@@@8 ; IUpdateCallbackUI2 `RTTI Type Descriptor'
.rdata$r:00007284                 dd offset ??_R3IUpdateCallbackUI2@@8 ; IUpdateCallbackUI2::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007284 _rdata$r        ends
.rdata$r:00007284
.rdata$r:00007288 ; ===========================================================================
.rdata$r:00007288
.rdata$r:00007288 ; Segment type: Pure data
.rdata$r:00007288 ; Segment permissions: Read
.rdata$r:00007288 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007288                 assume cs:_rdata$r
.rdata$r:00007288                 ;org 7288h
.rdata$r:00007288 ; COMDAT (pick any)
.rdata$r:00007288                 public ??_R4IUpdateCallbackUI2@@6BIDirItemsCallback@@@
.rdata$r:00007288 ; const IUpdateCallbackUI2::`RTTI Complete Object Locator'{for `IDirItemsCallback'}
.rdata$r:00007288 ??_R4IUpdateCallbackUI2@@6BIDirItemsCallback@@@ db    0
.rdata$r:00007288                                         ; DATA XREF: .rdata:00007208o
.rdata$r:00007289                 db    0
.rdata$r:0000728A                 db    0
.rdata$r:0000728B                 db    0
.rdata$r:0000728C                 db    4
.rdata$r:0000728D                 db    0
.rdata$r:0000728E                 db    0
.rdata$r:0000728F                 db    0
.rdata$r:00007290                 db    0
.rdata$r:00007291                 db    0
.rdata$r:00007292                 db    0
.rdata$r:00007293                 db    0
.rdata$r:00007294                 dd offset ??_R0?AUIUpdateCallbackUI2@@@8 ; IUpdateCallbackUI2 `RTTI Type Descriptor'
.rdata$r:00007298                 dd offset ??_R3IUpdateCallbackUI2@@8 ; IUpdateCallbackUI2::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007298 _rdata$r        ends
.rdata$r:00007298
.text:0000729C ; ===========================================================================
.text:0000729C
.text:0000729C ; Segment type: Pure code
.text:0000729C ; Segment permissions: Read/Execute
.text:0000729C _text           segment para public 'CODE' use32
.text:0000729C                 assume cs:_text
.text:0000729C                 ;org 729Ch
.text:0000729C ; COMDAT (pick any)
.text:0000729C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000729C
.text:0000729C ; =============== S U B R O U T I N E =======================================
.text:0000729C
.text:0000729C ; Attributes: bp-based frame
.text:0000729C
.text:0000729C ; _DWORD __thiscall CCallbackConsoleBase::~CCallbackConsoleBase(CCallbackConsoleBase *__hidden this)
.text:0000729C                 public ??1CCallbackConsoleBase@@QAE@XZ
.text:0000729C ??1CCallbackConsoleBase@@QAE@XZ proc near
.text:0000729C                                         ; CODE XREF: __unwindfunclet$??0CUpdateCallbackConsole@@QAE@XZ$0+6j
.text:0000729C                                         ; __unwindfunclet$??0CHashCallbackConsole@@QAE@XZ$0+6j ...
.text:0000729C
.text:0000729C var_10          = dword ptr -10h
.text:0000729C var_C           = dword ptr -0Ch
.text:0000729C var_4           = dword ptr -4
.text:0000729C
.text:0000729C                 push    ebp
.text:0000729D                 mov     ebp, esp
.text:0000729F                 push    0FFFFFFFFh
.text:000072A1                 push    offset __ehhandler$??1CCallbackConsoleBase@@QAE@XZ
.text:000072A6                 mov     eax, large fs:0
.text:000072AC                 push    eax
.text:000072AD                 push    ecx
.text:000072AE                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000072B5                 mov     eax, dword ptr ds:___security_cookie
.text:000072BA                 xor     eax, ebp
.text:000072BC                 push    eax
.text:000072BD                 lea     eax, [ebp+var_C]
.text:000072C0                 mov     large fs:0, eax
.text:000072C6                 mov     [ebp+var_10], ecx
.text:000072C9                 mov     [ebp+var_4], 3
.text:000072D0                 mov     ecx, [ebp+var_10]
.text:000072D3                 add     ecx, 0F4h ; '(' ; this
.text:000072D9                 call    ??1CErrorPathCodes@@QAE@XZ ; CErrorPathCodes::~CErrorPathCodes(void)
.text:000072DE                 mov     byte ptr [ebp+var_4], 2
.text:000072E2                 mov     ecx, [ebp+var_10]
.text:000072E5                 add     ecx, 0DCh ; '_' ; this
.text:000072EB                 call    ??1CErrorPathCodes@@QAE@XZ ; CErrorPathCodes::~CErrorPathCodes(void)
.text:000072F0                 mov     byte ptr [ebp+var_4], 1
.text:000072F4                 mov     ecx, [ebp+var_10]
.text:000072F7                 add     ecx, 0D0h ; '-' ; this
.text:000072FD                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00007302                 mov     byte ptr [ebp+var_4], 0
.text:00007306                 mov     ecx, [ebp+var_10]
.text:00007309                 add     ecx, 0C4h ; '-' ; this
.text:0000730F                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00007314                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000731B                 mov     ecx, [ebp+var_10] ; this
.text:0000731E                 call    ??1CPercentPrinter@@QAE@XZ ; CPercentPrinter::~CPercentPrinter(void)
.text:00007323                 mov     ecx, [ebp+var_C]
.text:00007326                 mov     large fs:0, ecx
.text:0000732D                 pop     ecx
.text:0000732E                 add     esp, 10h
.text:00007331                 cmp     ebp, esp
.text:00007333                 call    __RTC_CheckEsp
.text:00007338                 mov     esp, ebp
.text:0000733A                 pop     ebp
.text:0000733B                 retn
.text:0000733B ??1CCallbackConsoleBase@@QAE@XZ endp
.text:0000733B
.text:0000733B _text           ends
.text:0000733B
.text$x:0000733C ; ===========================================================================
.text$x:0000733C
.text$x:0000733C ; Segment type: Pure code
.text$x:0000733C ; Segment permissions: Read/Execute
.text$x:0000733C _text$x         segment para public 'CODE' use32
.text$x:0000733C                 assume cs:_text$x
.text$x:0000733C                 ;org 733Ch
.text$x:0000733C ; COMDAT (pick associative to section at 729C)
.text$x:0000733C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000733C
.text$x:0000733C ; =============== S U B R O U T I N E =======================================
.text$x:0000733C
.text$x:0000733C
.text$x:0000733C __unwindfunclet$??1CCallbackConsoleBase@@QAE@XZ$0 proc near
.text$x:0000733C                                         ; DATA XREF: .xdata$x:00007390o
.text$x:0000733C                 mov     ecx, [ebp-10h]  ; this
.text$x:0000733F                 jmp     ??1CPercentPrinter@@QAE@XZ ; CPercentPrinter::~CPercentPrinter(void)
.text$x:0000733F __unwindfunclet$??1CCallbackConsoleBase@@QAE@XZ$0 endp
.text$x:0000733F
.text$x:00007344
.text$x:00007344 ; =============== S U B R O U T I N E =======================================
.text$x:00007344
.text$x:00007344
.text$x:00007344 __unwindfunclet$??1CCallbackConsoleBase@@QAE@XZ$1 proc near
.text$x:00007344                                         ; DATA XREF: .xdata$x:00007398o
.text$x:00007344                 mov     ecx, [ebp-10h]
.text$x:00007347                 add     ecx, 0C4h ; '-' ; this
.text$x:0000734D                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:0000734D __unwindfunclet$??1CCallbackConsoleBase@@QAE@XZ$1 endp
.text$x:0000734D
.text$x:00007352
.text$x:00007352 ; =============== S U B R O U T I N E =======================================
.text$x:00007352
.text$x:00007352
.text$x:00007352 __unwindfunclet$??1CCallbackConsoleBase@@QAE@XZ$2 proc near
.text$x:00007352                                         ; DATA XREF: .xdata$x:000073A0o
.text$x:00007352                 mov     ecx, [ebp-10h]
.text$x:00007355                 add     ecx, 0D0h ; '-' ; this
.text$x:0000735B                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000735B __unwindfunclet$??1CCallbackConsoleBase@@QAE@XZ$2 endp
.text$x:0000735B
.text$x:00007360
.text$x:00007360 ; =============== S U B R O U T I N E =======================================
.text$x:00007360
.text$x:00007360
.text$x:00007360 __unwindfunclet$??1CCallbackConsoleBase@@QAE@XZ$3 proc near
.text$x:00007360                                         ; DATA XREF: .xdata$x:000073A8o
.text$x:00007360                 mov     ecx, [ebp-10h]
.text$x:00007363                 add     ecx, 0DCh ; '_' ; this
.text$x:00007369                 jmp     ??1CErrorPathCodes@@QAE@XZ ; CErrorPathCodes::~CErrorPathCodes(void)
.text$x:00007369 __unwindfunclet$??1CCallbackConsoleBase@@QAE@XZ$3 endp
.text$x:00007369
.text$x:0000736E
.text$x:0000736E ; =============== S U B R O U T I N E =======================================
.text$x:0000736E
.text$x:0000736E
.text$x:0000736E __ehhandler$??1CCallbackConsoleBase@@QAE@XZ proc near
.text$x:0000736E                                         ; DATA XREF: CCallbackConsoleBase::~CCallbackConsoleBase(void)+5o
.text$x:0000736E
.text$x:0000736E arg_4           = dword ptr  8
.text$x:0000736E
.text$x:0000736E                 mov     edx, [esp+arg_4]
.text$x:00007372                 lea     eax, [edx+0Ch]
.text$x:00007375                 mov     ecx, [edx-8]
.text$x:00007378                 xor     ecx, eax
.text$x:0000737A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000737F                 mov     eax, offset __ehfuncinfo$??1CCallbackConsoleBase@@QAE@XZ
.text$x:00007384                 jmp     ___CxxFrameHandler3
.text$x:00007384 __ehhandler$??1CCallbackConsoleBase@@QAE@XZ endp
.text$x:00007384
.text$x:00007384 ; ---------------------------------------------------------------------------
.text$x:00007389                 align 4
.text$x:00007389 _text$x         ends
.text$x:00007389
.xdata$x:0000738C ; ===========================================================================
.xdata$x:0000738C
.xdata$x:0000738C ; Segment type: Pure data
.xdata$x:0000738C ; Segment permissions: Read
.xdata$x:0000738C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000738C                 assume cs:_xdata$x
.xdata$x:0000738C                 ;org 738Ch
.xdata$x:0000738C ; COMDAT (pick associative to section at 729C)
.xdata$x:0000738C __unwindtable$??1CCallbackConsoleBase@@QAE@XZ db 0FFh
.xdata$x:0000738C                                         ; DATA XREF: .xdata$x:000073B4o
.xdata$x:0000738D                 db 0FFh
.xdata$x:0000738E                 db 0FFh
.xdata$x:0000738F                 db 0FFh
.xdata$x:00007390                 dd offset __unwindfunclet$??1CCallbackConsoleBase@@QAE@XZ$0
.xdata$x:00007394                 align 8
.xdata$x:00007398                 dd offset __unwindfunclet$??1CCallbackConsoleBase@@QAE@XZ$1
.xdata$x:0000739C                 db    1
.xdata$x:0000739D                 db    0
.xdata$x:0000739E                 db    0
.xdata$x:0000739F                 db    0
.xdata$x:000073A0                 dd offset __unwindfunclet$??1CCallbackConsoleBase@@QAE@XZ$2
.xdata$x:000073A4                 db    2
.xdata$x:000073A5                 db    0
.xdata$x:000073A6                 db    0
.xdata$x:000073A7                 db    0
.xdata$x:000073A8                 dd offset __unwindfunclet$??1CCallbackConsoleBase@@QAE@XZ$3
.xdata$x:000073AC __ehfuncinfo$??1CCallbackConsoleBase@@QAE@XZ db  22h ; "
.xdata$x:000073AC                                         ; DATA XREF: __ehhandler$??1CCallbackConsoleBase@@QAE@XZ+11o
.xdata$x:000073AD                 db    5
.xdata$x:000073AE                 db  93h ; ô
.xdata$x:000073AF                 db  19h
.xdata$x:000073B0                 db    4
.xdata$x:000073B1                 db    0
.xdata$x:000073B2                 db    0
.xdata$x:000073B3                 db    0
.xdata$x:000073B4                 dd offset __unwindtable$??1CCallbackConsoleBase@@QAE@XZ
.xdata$x:000073B8                 db    0
.xdata$x:000073B9                 db    0
.xdata$x:000073BA                 db    0
.xdata$x:000073BB                 db    0
.xdata$x:000073BC                 db    0
.xdata$x:000073BD                 db    0
.xdata$x:000073BE                 db    0
.xdata$x:000073BF                 db    0
.xdata$x:000073C0                 db    0
.xdata$x:000073C1                 db    0
.xdata$x:000073C2                 db    0
.xdata$x:000073C3                 db    0
.xdata$x:000073C4                 db    0
.xdata$x:000073C5                 db    0
.xdata$x:000073C6                 db    0
.xdata$x:000073C7                 db    0
.xdata$x:000073C8                 db    0
.xdata$x:000073C9                 db    0
.xdata$x:000073CA                 db    0
.xdata$x:000073CB                 db    0
.xdata$x:000073CC                 db    1
.xdata$x:000073CD                 db    0
.xdata$x:000073CE                 db    0
.xdata$x:000073CF                 db    0
.xdata$x:000073CF _xdata$x        ends
.xdata$x:000073CF
.text:000073D0 ; ===========================================================================
.text:000073D0
.text:000073D0 ; Segment type: Pure code
.text:000073D0 ; Segment permissions: Read/Execute
.text:000073D0 _text           segment para public 'CODE' use32
.text:000073D0                 assume cs:_text
.text:000073D0                 ;org 73D0h
.text:000073D0 ; COMDAT (pick any)
.text:000073D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000073D0
.text:000073D0 ; =============== S U B R O U T I N E =======================================
.text:000073D0
.text:000073D0 ; Attributes: bp-based frame
.text:000073D0
.text:000073D0 ; _DWORD __thiscall IUpdateCallbackUI::IUpdateCallbackUI(IUpdateCallbackUI *__hidden this)
.text:000073D0                 public ??0IUpdateCallbackUI@@QAE@XZ
.text:000073D0 ??0IUpdateCallbackUI@@QAE@XZ proc near  ; CODE XREF: IUpdateCallbackUI2::IUpdateCallbackUI2(void)+11p
.text:000073D0
.text:000073D0 var_4           = dword ptr -4
.text:000073D0
.text:000073D0                 push    ebp
.text:000073D1                 mov     ebp, esp
.text:000073D3                 push    ecx
.text:000073D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000073DB                 mov     [ebp+var_4], ecx
.text:000073DE                 mov     eax, [ebp+var_4]
.text:000073E1                 mov     dword ptr [eax], offset ??_7IUpdateCallbackUI@@6B@ ; const IUpdateCallbackUI::`vftable'
.text:000073E7                 mov     eax, [ebp+var_4]
.text:000073EA                 mov     esp, ebp
.text:000073EC                 pop     ebp
.text:000073ED                 retn
.text:000073ED ??0IUpdateCallbackUI@@QAE@XZ endp
.text:000073ED
.text:000073ED ; ---------------------------------------------------------------------------
.text:000073EE                 align 10h
.text:000073EE _text           ends
.text:000073EE
.rdata:000073F0 ; ===========================================================================
.rdata:000073F0
.rdata:000073F0 ; Segment type: Pure data
.rdata:000073F0 ; Segment permissions: Read
.rdata:000073F0 ; Segment alignment 'qword' can not be represented in assembly
.rdata:000073F0 _rdata          segment para public 'DATA' use32
.rdata:000073F0                 assume cs:_rdata
.rdata:000073F0                 ;org 73F0h
.rdata:000073F0 ; COMDAT (pick largest)
.rdata:000073F0                 dd offset ??_R4IUpdateCallbackUI@@6B@ ; const IUpdateCallbackUI::`RTTI Complete Object Locator'
.rdata:000073F4                 public ??_7IUpdateCallbackUI@@6B@
.rdata:000073F4 ; const IUpdateCallbackUI::`vftable'
.rdata:000073F4 ??_7IUpdateCallbackUI@@6B@ dd offset __purecall
.rdata:000073F4                                         ; DATA XREF: IUpdateCallbackUI::IUpdateCallbackUI(void)+11o
.rdata:000073F8                 dd offset __purecall
.rdata:000073FC                 dd offset __purecall
.rdata:00007400                 dd offset __purecall
.rdata:00007404                 dd offset __purecall
.rdata:00007408                 dd offset __purecall
.rdata:0000740C                 dd offset __purecall
.rdata:00007410                 dd offset __purecall
.rdata:00007414                 dd offset __purecall
.rdata:00007418                 dd offset __purecall
.rdata:0000741C                 dd offset __purecall
.rdata:00007420                 dd offset __purecall
.rdata:00007424                 dd offset __purecall
.rdata:00007428                 dd offset __purecall
.rdata:0000742C                 dd offset __purecall
.rdata:0000742C _rdata          ends
.rdata:0000742C
.rdata$r:00007430 ; ===========================================================================
.rdata$r:00007430
.rdata$r:00007430 ; Segment type: Pure data
.rdata$r:00007430 ; Segment permissions: Read
.rdata$r:00007430 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007430                 assume cs:_rdata$r
.rdata$r:00007430                 ;org 7430h
.rdata$r:00007430 ; COMDAT (pick any)
.rdata$r:00007430                 public ??_R4IUpdateCallbackUI@@6B@
.rdata$r:00007430 ; const IUpdateCallbackUI::`RTTI Complete Object Locator'
.rdata$r:00007430 ??_R4IUpdateCallbackUI@@6B@ db    0     ; DATA XREF: .rdata:000073F0o
.rdata$r:00007431                 db    0
.rdata$r:00007432                 db    0
.rdata$r:00007433                 db    0
.rdata$r:00007434                 db    0
.rdata$r:00007435                 db    0
.rdata$r:00007436                 db    0
.rdata$r:00007437                 db    0
.rdata$r:00007438                 db    0
.rdata$r:00007439                 db    0
.rdata$r:0000743A                 db    0
.rdata$r:0000743B                 db    0
.rdata$r:0000743C                 dd offset ??_R0?AUIUpdateCallbackUI@@@8 ; IUpdateCallbackUI `RTTI Type Descriptor'
.rdata$r:00007440                 dd offset ??_R3IUpdateCallbackUI@@8 ; IUpdateCallbackUI::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007440 _rdata$r        ends
.rdata$r:00007440
.text:00007444 ; ===========================================================================
.text:00007444
.text:00007444 ; Segment type: Pure code
.text:00007444 ; Segment permissions: Read/Execute
.text:00007444 _text           segment para public 'CODE' use32
.text:00007444                 assume cs:_text
.text:00007444                 ;org 7444h
.text:00007444 ; COMDAT (pick any)
.text:00007444                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007444
.text:00007444 ; =============== S U B R O U T I N E =======================================
.text:00007444
.text:00007444 ; Attributes: bp-based frame
.text:00007444
.text:00007444 ; _DWORD __thiscall IDirItemsCallback::IDirItemsCallback(IDirItemsCallback *__hidden this)
.text:00007444                 public ??0IDirItemsCallback@@QAE@XZ
.text:00007444 ??0IDirItemsCallback@@QAE@XZ proc near  ; CODE XREF: IUpdateCallbackUI2::IUpdateCallbackUI2(void)+1Cp
.text:00007444                                         ; IHashCallbackUI::IHashCallbackUI(void)+11p ...
.text:00007444
.text:00007444 var_4           = dword ptr -4
.text:00007444
.text:00007444                 push    ebp
.text:00007445                 mov     ebp, esp
.text:00007447                 push    ecx
.text:00007448                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000744F                 mov     [ebp+var_4], ecx
.text:00007452                 mov     eax, [ebp+var_4]
.text:00007455                 mov     dword ptr [eax], offset ??_7IDirItemsCallback@@6B@ ; const IDirItemsCallback::`vftable'
.text:0000745B                 mov     eax, [ebp+var_4]
.text:0000745E                 mov     esp, ebp
.text:00007460                 pop     ebp
.text:00007461                 retn
.text:00007461 ??0IDirItemsCallback@@QAE@XZ endp
.text:00007461
.text:00007461 ; ---------------------------------------------------------------------------
.text:00007462                 align 4
.text:00007462 _text           ends
.text:00007462
.rdata:00007464 ; ===========================================================================
.rdata:00007464
.rdata:00007464 ; Segment type: Pure data
.rdata:00007464 ; Segment permissions: Read
.rdata:00007464 _rdata          segment dword public 'DATA' use32
.rdata:00007464                 assume cs:_rdata
.rdata:00007464                 ;org 7464h
.rdata:00007464 ; COMDAT (pick largest)
.rdata:00007464                 dd offset ??_R4IDirItemsCallback@@6B@ ; const IDirItemsCallback::`RTTI Complete Object Locator'
.rdata:00007468                 public ??_7IDirItemsCallback@@6B@
.rdata:00007468 ; const IDirItemsCallback::`vftable'
.rdata:00007468 ??_7IDirItemsCallback@@6B@ dd offset __purecall
.rdata:00007468                                         ; DATA XREF: IDirItemsCallback::IDirItemsCallback(void)+11o
.rdata:0000746C                 dd offset __purecall
.rdata:0000746C _rdata          ends
.rdata:0000746C
.rdata$r:00007470 ; ===========================================================================
.rdata$r:00007470
.rdata$r:00007470 ; Segment type: Pure data
.rdata$r:00007470 ; Segment permissions: Read
.rdata$r:00007470 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007470                 assume cs:_rdata$r
.rdata$r:00007470                 ;org 7470h
.rdata$r:00007470 ; COMDAT (pick any)
.rdata$r:00007470                 public ??_R4IDirItemsCallback@@6B@
.rdata$r:00007470 ; const IDirItemsCallback::`RTTI Complete Object Locator'
.rdata$r:00007470 ??_R4IDirItemsCallback@@6B@ db    0     ; DATA XREF: .rdata:00007464o
.rdata$r:00007471                 db    0
.rdata$r:00007472                 db    0
.rdata$r:00007473                 db    0
.rdata$r:00007474                 db    0
.rdata$r:00007475                 db    0
.rdata$r:00007476                 db    0
.rdata$r:00007477                 db    0
.rdata$r:00007478                 db    0
.rdata$r:00007479                 db    0
.rdata$r:0000747A                 db    0
.rdata$r:0000747B                 db    0
.rdata$r:0000747C                 dd offset ??_R0?AUIDirItemsCallback@@@8 ; IDirItemsCallback `RTTI Type Descriptor'
.rdata$r:00007480                 dd offset ??_R3IDirItemsCallback@@8 ; IDirItemsCallback::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007480 _rdata$r        ends
.rdata$r:00007480
.text:00007484 ; ===========================================================================
.text:00007484
.text:00007484 ; Segment type: Pure code
.text:00007484 ; Segment permissions: Read/Execute
.text:00007484 _text           segment para public 'CODE' use32
.text:00007484                 assume cs:_text
.text:00007484                 ;org 7484h
.text:00007484 ; COMDAT (pick any)
.text:00007484                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007484
.text:00007484 ; =============== S U B R O U T I N E =======================================
.text:00007484
.text:00007484 ; Attributes: bp-based frame
.text:00007484
.text:00007484 ; _DWORD __thiscall CHashCallbackConsole::CHashCallbackConsole(CHashCallbackConsole *__hidden this)
.text:00007484                 public ??0CHashCallbackConsole@@QAE@XZ
.text:00007484 ??0CHashCallbackConsole@@QAE@XZ proc near ; CODE XREF: Main2(void)+1A50p
.text:00007484
.text:00007484 var_10          = dword ptr -10h
.text:00007484 var_C           = dword ptr -0Ch
.text:00007484 var_4           = dword ptr -4
.text:00007484
.text:00007484                 push    ebp
.text:00007485                 mov     ebp, esp
.text:00007487                 push    0FFFFFFFFh
.text:00007489                 push    offset __ehhandler$??0CHashCallbackConsole@@QAE@XZ
.text:0000748E                 mov     eax, large fs:0
.text:00007494                 push    eax
.text:00007495                 push    ecx
.text:00007496                 mov     [ebp+var_10], 0CCCCCCCCh
.text:0000749D                 mov     eax, dword ptr ds:___security_cookie
.text:000074A2                 xor     eax, ebp
.text:000074A4                 push    eax
.text:000074A5                 lea     eax, [ebp+var_C]
.text:000074A8                 mov     large fs:0, eax
.text:000074AE                 mov     [ebp+var_10], ecx
.text:000074B1                 mov     ecx, [ebp+var_10] ; this
.text:000074B4                 call    ??0IHashCallbackUI@@QAE@XZ ; IHashCallbackUI::IHashCallbackUI(void)
.text:000074B9                 mov     ecx, [ebp+var_10]
.text:000074BC                 add     ecx, 8
.text:000074BF                 call    ??0CCallbackConsoleBase@@QAE@XZ ; CCallbackConsoleBase::CCallbackConsoleBase(void)
.text:000074C4                 mov     [ebp+var_4], 0
.text:000074CB                 mov     eax, [ebp+var_10]
.text:000074CE                 mov     dword ptr [eax], offset ??_7CHashCallbackConsole@@6B@ ; const CHashCallbackConsole::`vftable'
.text:000074D4                 mov     ecx, [ebp+var_10]
.text:000074D7                 add     ecx, 118h
.text:000074DD                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:000074E2                 mov     byte ptr [ebp+var_4], 1
.text:000074E6                 mov     ecx, [ebp+var_10]
.text:000074E9                 add     ecx, 124h
.text:000074EF                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:000074F4                 mov     ecx, [ebp+var_10]
.text:000074F7                 mov     byte ptr [ecx+130h], 1
.text:000074FE                 mov     edx, [ebp+var_10]
.text:00007501                 mov     byte ptr [edx+131h], 0
.text:00007508                 mov     eax, [ebp+var_10]
.text:0000750B                 mov     byte ptr [eax+132h], 1
.text:00007512                 mov     ecx, [ebp+var_10]
.text:00007515                 mov     byte ptr [ecx+133h], 1
.text:0000751C                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00007523                 mov     eax, [ebp+var_10]
.text:00007526                 mov     ecx, [ebp+var_C]
.text:00007529                 mov     large fs:0, ecx
.text:00007530                 pop     ecx
.text:00007531                 add     esp, 10h
.text:00007534                 cmp     ebp, esp
.text:00007536                 call    __RTC_CheckEsp
.text:0000753B                 mov     esp, ebp
.text:0000753D                 pop     ebp
.text:0000753E                 retn
.text:0000753E ??0CHashCallbackConsole@@QAE@XZ endp
.text:0000753E
.text:0000753E ; ---------------------------------------------------------------------------
.text:0000753F                 align 10h
.text:0000753F _text           ends
.text:0000753F
.text$x:00007540 ; ===========================================================================
.text$x:00007540
.text$x:00007540 ; Segment type: Pure code
.text$x:00007540 ; Segment permissions: Read/Execute
.text$x:00007540 _text$x         segment para public 'CODE' use32
.text$x:00007540                 assume cs:_text$x
.text$x:00007540                 ;org 7540h
.text$x:00007540 ; COMDAT (pick associative to section at 7484)
.text$x:00007540                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007540
.text$x:00007540 ; =============== S U B R O U T I N E =======================================
.text$x:00007540
.text$x:00007540
.text$x:00007540 __unwindfunclet$??0CHashCallbackConsole@@QAE@XZ$0 proc near
.text$x:00007540                                         ; DATA XREF: .xdata$x:000075B0o
.text$x:00007540                 mov     ecx, [ebp-10h]
.text$x:00007543                 add     ecx, 8          ; this
.text$x:00007546                 jmp     ??1CCallbackConsoleBase@@QAE@XZ ; CCallbackConsoleBase::~CCallbackConsoleBase(void)
.text$x:00007546 __unwindfunclet$??0CHashCallbackConsole@@QAE@XZ$0 endp
.text$x:00007546
.text$x:0000754B
.text$x:0000754B ; =============== S U B R O U T I N E =======================================
.text$x:0000754B
.text$x:0000754B
.text$x:0000754B __unwindfunclet$??0CHashCallbackConsole@@QAE@XZ$1 proc near
.text$x:0000754B                                         ; DATA XREF: .xdata$x:000075B8o
.text$x:0000754B                 mov     ecx, [ebp-10h]
.text$x:0000754E                 add     ecx, 118h       ; this
.text$x:00007554                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00007554 __unwindfunclet$??0CHashCallbackConsole@@QAE@XZ$1 endp
.text$x:00007554
.text$x:00007559
.text$x:00007559 ; =============== S U B R O U T I N E =======================================
.text$x:00007559
.text$x:00007559
.text$x:00007559 __ehhandler$??0CHashCallbackConsole@@QAE@XZ proc near
.text$x:00007559                                         ; DATA XREF: CHashCallbackConsole::CHashCallbackConsole(void)+5o
.text$x:00007559
.text$x:00007559 arg_4           = dword ptr  8
.text$x:00007559
.text$x:00007559                 mov     edx, [esp+arg_4]
.text$x:0000755D                 lea     eax, [edx+0Ch]
.text$x:00007560                 mov     ecx, [edx-8]
.text$x:00007563                 xor     ecx, eax
.text$x:00007565                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000756A                 mov     eax, offset __ehfuncinfo$??0CHashCallbackConsole@@QAE@XZ
.text$x:0000756F                 jmp     ___CxxFrameHandler3
.text$x:0000756F __ehhandler$??0CHashCallbackConsole@@QAE@XZ endp
.text$x:0000756F
.text$x:0000756F _text$x         ends
.text$x:0000756F
.rdata:00007574 ; ===========================================================================
.rdata:00007574
.rdata:00007574 ; Segment type: Pure data
.rdata:00007574 ; Segment permissions: Read
.rdata:00007574 _rdata          segment dword public 'DATA' use32
.rdata:00007574                 assume cs:_rdata
.rdata:00007574                 ;org 7574h
.rdata:00007574 ; COMDAT (pick largest)
.rdata:00007574                 dd offset ??_R4CHashCallbackConsole@@6B@ ; const CHashCallbackConsole::`RTTI Complete Object Locator'
.rdata:00007578                 public ??_7CHashCallbackConsole@@6B@
.rdata:00007578 ; const CHashCallbackConsole::`vftable'
.rdata:00007578 ??_7CHashCallbackConsole@@6B@ dd offset ?ScanError@CHashCallbackConsole@@UAEJABVUString@@K@Z
.rdata:00007578                                         ; DATA XREF: CHashCallbackConsole::CHashCallbackConsole(void)+4Ao
.rdata:00007578                                         ; CHashCallbackConsole::~CHashCallbackConsole(void)+30o
.rdata:00007578                                         ; CHashCallbackConsole::ScanError(UString const &,ulong)
.rdata:0000757C                 dd offset ?ScanProgress@CHashCallbackConsole@@UAEJABUCDirItemsStat@@ABVUString@@_N@Z ; CHashCallbackConsole::ScanProgress(CDirItemsStat const &,UString const &,bool)
.rdata:00007580                 dd offset ?StartScanning@CHashCallbackConsole@@UAEJXZ ; CHashCallbackConsole::StartScanning(void)
.rdata:00007584                 dd offset ?FinishScanning@CHashCallbackConsole@@UAEJABUCDirItemsStat@@@Z ; CHashCallbackConsole::FinishScanning(CDirItemsStat const &)
.rdata:00007588                 dd offset ?SetNumFiles@CHashCallbackConsole@@UAEJ_K@Z ; CHashCallbackConsole::SetNumFiles(unsigned __int64)
.rdata:0000758C                 dd offset ?SetTotal@CHashCallbackConsole@@UAEJ_K@Z ; CHashCallbackConsole::SetTotal(unsigned __int64)
.rdata:00007590                 dd offset ?SetCompleted@CHashCallbackConsole@@UAEJPB_K@Z ; CHashCallbackConsole::SetCompleted(unsigned __int64 const *)
.rdata:00007594                 dd offset ?CheckBreak@CHashCallbackConsole@@UAEJXZ ; CHashCallbackConsole::CheckBreak(void)
.rdata:00007598                 dd offset ?BeforeFirstFile@CHashCallbackConsole@@UAEJABUCHashBundle@@@Z ; CHashCallbackConsole::BeforeFirstFile(CHashBundle const &)
.rdata:0000759C                 dd offset ?GetStream@CHashCallbackConsole@@UAEJPB_W_N@Z ; CHashCallbackConsole::GetStream(wchar_t const *,bool)
.rdata:000075A0                 dd offset ?OpenFileError@CHashCallbackConsole@@UAEJABVUString@@K@Z ; CHashCallbackConsole::OpenFileError(UString const &,ulong)
.rdata:000075A4                 dd offset ?SetOperationResult@CHashCallbackConsole@@UAEJ_KABUCHashBundle@@_N@Z ; CHashCallbackConsole::SetOperationResult(unsigned __int64,CHashBundle const &,bool)
.rdata:000075A8                 dd offset ?AfterLastFile@CHashCallbackConsole@@UAEJABUCHashBundle@@@Z ; CHashCallbackConsole::AfterLastFile(CHashBundle const &)
.rdata:000075A8 _rdata          ends
.rdata:000075A8
.xdata$x:000075AC ; ===========================================================================
.xdata$x:000075AC
.xdata$x:000075AC ; Segment type: Pure data
.xdata$x:000075AC ; Segment permissions: Read
.xdata$x:000075AC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000075AC                 assume cs:_xdata$x
.xdata$x:000075AC                 ;org 75ACh
.xdata$x:000075AC ; COMDAT (pick associative to section at 7484)
.xdata$x:000075AC __unwindtable$??0CHashCallbackConsole@@QAE@XZ db 0FFh
.xdata$x:000075AC                                         ; DATA XREF: .xdata$x:000075C4o
.xdata$x:000075AD                 db 0FFh
.xdata$x:000075AE                 db 0FFh
.xdata$x:000075AF                 db 0FFh
.xdata$x:000075B0                 dd offset __unwindfunclet$??0CHashCallbackConsole@@QAE@XZ$0
.xdata$x:000075B4                 align 8
.xdata$x:000075B8                 dd offset __unwindfunclet$??0CHashCallbackConsole@@QAE@XZ$1
.xdata$x:000075BC __ehfuncinfo$??0CHashCallbackConsole@@QAE@XZ db  22h ; "
.xdata$x:000075BC                                         ; DATA XREF: __ehhandler$??0CHashCallbackConsole@@QAE@XZ+11o
.xdata$x:000075BD                 db    5
.xdata$x:000075BE                 db  93h ; ô
.xdata$x:000075BF                 db  19h
.xdata$x:000075C0                 db    2
.xdata$x:000075C1                 db    0
.xdata$x:000075C2                 db    0
.xdata$x:000075C3                 db    0
.xdata$x:000075C4                 dd offset __unwindtable$??0CHashCallbackConsole@@QAE@XZ
.xdata$x:000075C8                 db    0
.xdata$x:000075C9                 db    0
.xdata$x:000075CA                 db    0
.xdata$x:000075CB                 db    0
.xdata$x:000075CC                 db    0
.xdata$x:000075CD                 db    0
.xdata$x:000075CE                 db    0
.xdata$x:000075CF                 db    0
.xdata$x:000075D0                 db    0
.xdata$x:000075D1                 db    0
.xdata$x:000075D2                 db    0
.xdata$x:000075D3                 db    0
.xdata$x:000075D4                 db    0
.xdata$x:000075D5                 db    0
.xdata$x:000075D6                 db    0
.xdata$x:000075D7                 db    0
.xdata$x:000075D8                 db    0
.xdata$x:000075D9                 db    0
.xdata$x:000075DA                 db    0
.xdata$x:000075DB                 db    0
.xdata$x:000075DC                 db    1
.xdata$x:000075DD                 db    0
.xdata$x:000075DE                 db    0
.xdata$x:000075DF                 db    0
.xdata$x:000075DF _xdata$x        ends
.xdata$x:000075DF
.rdata$r:000075E0 ; ===========================================================================
.rdata$r:000075E0
.rdata$r:000075E0 ; Segment type: Pure data
.rdata$r:000075E0 ; Segment permissions: Read
.rdata$r:000075E0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000075E0                 assume cs:_rdata$r
.rdata$r:000075E0                 ;org 75E0h
.rdata$r:000075E0 ; COMDAT (pick any)
.rdata$r:000075E0                 public ??_R4CHashCallbackConsole@@6B@
.rdata$r:000075E0 ; const CHashCallbackConsole::`RTTI Complete Object Locator'
.rdata$r:000075E0 ??_R4CHashCallbackConsole@@6B@ db    0  ; DATA XREF: .rdata:00007574o
.rdata$r:000075E1                 db    0
.rdata$r:000075E2                 db    0
.rdata$r:000075E3                 db    0
.rdata$r:000075E4                 db    0
.rdata$r:000075E5                 db    0
.rdata$r:000075E6                 db    0
.rdata$r:000075E7                 db    0
.rdata$r:000075E8                 db    0
.rdata$r:000075E9                 db    0
.rdata$r:000075EA                 db    0
.rdata$r:000075EB                 db    0
.rdata$r:000075EC                 dd offset ??_R0?AVCHashCallbackConsole@@@8 ; CHashCallbackConsole `RTTI Type Descriptor'
.rdata$r:000075F0                 dd offset ??_R3CHashCallbackConsole@@8 ; CHashCallbackConsole::`RTTI Class Hierarchy Descriptor'
.rdata$r:000075F0 _rdata$r        ends
.rdata$r:000075F0
.data:000075F4 ; ===========================================================================
.data:000075F4
.data:000075F4 ; Segment type: Pure data
.data:000075F4 ; Segment permissions: Read/Write
.data:000075F4 _data           segment dword public 'DATA' use32
.data:000075F4                 assume cs:_data
.data:000075F4                 ;org 75F4h
.data:000075F4 ; COMDAT (pick any)
.data:000075F4                 public ??_R0?AVCHashCallbackConsole@@@8
.data:000075F4 ; class CHashCallbackConsole `RTTI Type Descriptor'
.data:000075F4 ??_R0?AVCHashCallbackConsole@@@8 dd offset ??_7type_info@@6B@
.data:000075F4                                         ; DATA XREF: .rdata$r:000075ECo
.data:000075F4                                         ; .rdata$r:CHashCallbackConsole::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000075F4                                         ; const type_info::`vftable'
.data:000075F8                 db    0
.data:000075F9                 db    0
.data:000075FA                 db    0
.data:000075FB                 db    0
.data:000075FC                 db  2Eh ; .
.data:000075FD                 db  3Fh ; ?
.data:000075FE                 db  41h ; A
.data:000075FF                 db  56h ; V
.data:00007600                 db  43h ; C
.data:00007601                 db  48h ; H
.data:00007602                 db  61h ; a
.data:00007603                 db  73h ; s
.data:00007604                 db  68h ; h
.data:00007605                 db  43h ; C
.data:00007606                 db  61h ; a
.data:00007607                 db  6Ch ; l
.data:00007608                 db  6Ch ; l
.data:00007609                 db  62h ; b
.data:0000760A                 db  61h ; a
.data:0000760B                 db  63h ; c
.data:0000760C                 db  6Bh ; k
.data:0000760D                 db  43h ; C
.data:0000760E                 db  6Fh ; o
.data:0000760F                 db  6Eh ; n
.data:00007610                 db  73h ; s
.data:00007611                 db  6Fh ; o
.data:00007612                 db  6Ch ; l
.data:00007613                 db  65h ; e
.data:00007614                 db  40h ; @
.data:00007615                 db  40h ; @
.data:00007616                 db    0
.data:00007617                 align 4
.data:00007617 _data           ends
.data:00007617
.rdata$r:00007618 ; ===========================================================================
.rdata$r:00007618
.rdata$r:00007618 ; Segment type: Pure data
.rdata$r:00007618 ; Segment permissions: Read
.rdata$r:00007618 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007618                 assume cs:_rdata$r
.rdata$r:00007618                 ;org 7618h
.rdata$r:00007618 ; COMDAT (pick any)
.rdata$r:00007618                 public ??_R3CHashCallbackConsole@@8
.rdata$r:00007618 ; CHashCallbackConsole::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007618 ??_R3CHashCallbackConsole@@8 db    0    ; DATA XREF: .rdata$r:000075F0o
.rdata$r:00007618                                         ; .rdata$r:00007654o
.rdata$r:00007619                 db    0
.rdata$r:0000761A                 db    0
.rdata$r:0000761B                 db    0
.rdata$r:0000761C                 db    1
.rdata$r:0000761D                 db    0
.rdata$r:0000761E                 db    0
.rdata$r:0000761F                 db    0
.rdata$r:00007620                 db    4
.rdata$r:00007621                 db    0
.rdata$r:00007622                 db    0
.rdata$r:00007623                 db    0
.rdata$r:00007624                 dd offset ??_R2CHashCallbackConsole@@8 ; CHashCallbackConsole::`RTTI Base Class Array'
.rdata$r:00007624 _rdata$r        ends
.rdata$r:00007624
.rdata$r:00007628 ; ===========================================================================
.rdata$r:00007628
.rdata$r:00007628 ; Segment type: Pure data
.rdata$r:00007628 ; Segment permissions: Read
.rdata$r:00007628 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007628                 assume cs:_rdata$r
.rdata$r:00007628                 ;org 7628h
.rdata$r:00007628 ; COMDAT (pick any)
.rdata$r:00007628                 public ??_R2CHashCallbackConsole@@8
.rdata$r:00007628 ; CHashCallbackConsole::`RTTI Base Class Array'
.rdata$r:00007628 ??_R2CHashCallbackConsole@@8 dd offset ??_R1A@?0A@EA@CHashCallbackConsole@@8
.rdata$r:00007628                                         ; DATA XREF: .rdata$r:00007624o
.rdata$r:00007628                                         ; CHashCallbackConsole::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000762C                 dd offset ??_R1A@?0A@EA@IHashCallbackUI@@8 ; IHashCallbackUI::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00007630                 dd offset ??_R1A@?0A@EA@IDirItemsCallback@@8 ; IDirItemsCallback::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00007634                 dd offset ??_R17?0A@EA@CCallbackConsoleBase@@8 ; CCallbackConsoleBase::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:00007638                 db    0
.rdata$r:00007639                 align 4
.rdata$r:00007639 _rdata$r        ends
.rdata$r:00007639
.rdata$r:0000763C ; ===========================================================================
.rdata$r:0000763C
.rdata$r:0000763C ; Segment type: Pure data
.rdata$r:0000763C ; Segment permissions: Read
.rdata$r:0000763C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000763C                 assume cs:_rdata$r
.rdata$r:0000763C                 ;org 763Ch
.rdata$r:0000763C ; COMDAT (pick any)
.rdata$r:0000763C                 public ??_R1A@?0A@EA@CHashCallbackConsole@@8
.rdata$r:0000763C ; CHashCallbackConsole::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000763C ??_R1A@?0A@EA@CHashCallbackConsole@@8 dd offset ??_R0?AVCHashCallbackConsole@@@8
.rdata$r:0000763C                                         ; DATA XREF: .rdata$r:CHashCallbackConsole::`RTTI Base Class Array'o
.rdata$r:0000763C                                         ; CHashCallbackConsole `RTTI Type Descriptor'
.rdata$r:00007640                 db    3
.rdata$r:00007641                 db    0
.rdata$r:00007642                 db    0
.rdata$r:00007643                 db    0
.rdata$r:00007644                 db    0
.rdata$r:00007645                 db    0
.rdata$r:00007646                 db    0
.rdata$r:00007647                 db    0
.rdata$r:00007648                 db 0FFh
.rdata$r:00007649                 db 0FFh
.rdata$r:0000764A                 db 0FFh
.rdata$r:0000764B                 db 0FFh
.rdata$r:0000764C                 db    0
.rdata$r:0000764D                 db    0
.rdata$r:0000764E                 db    0
.rdata$r:0000764F                 db    0
.rdata$r:00007650                 db  40h ; @
.rdata$r:00007651                 db    0
.rdata$r:00007652                 db    0
.rdata$r:00007653                 db    0
.rdata$r:00007654                 dd offset ??_R3CHashCallbackConsole@@8 ; CHashCallbackConsole::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007654 _rdata$r        ends
.rdata$r:00007654
.rdata$r:00007658 ; ===========================================================================
.rdata$r:00007658
.rdata$r:00007658 ; Segment type: Pure data
.rdata$r:00007658 ; Segment permissions: Read
.rdata$r:00007658 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007658                 assume cs:_rdata$r
.rdata$r:00007658                 ;org 7658h
.rdata$r:00007658 ; COMDAT (pick any)
.rdata$r:00007658                 public ??_R1A@?0A@EA@IHashCallbackUI@@8
.rdata$r:00007658 ; IHashCallbackUI::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00007658 ??_R1A@?0A@EA@IHashCallbackUI@@8 dd offset ??_R0?AUIHashCallbackUI@@@8
.rdata$r:00007658                                         ; DATA XREF: .rdata$r:0000762Co
.rdata$r:00007658                                         ; .rdata$r:IHashCallbackUI::`RTTI Base Class Array'o
.rdata$r:00007658                                         ; IHashCallbackUI `RTTI Type Descriptor'
.rdata$r:0000765C                 db    1
.rdata$r:0000765D                 db    0
.rdata$r:0000765E                 db    0
.rdata$r:0000765F                 db    0
.rdata$r:00007660                 db    0
.rdata$r:00007661                 db    0
.rdata$r:00007662                 db    0
.rdata$r:00007663                 db    0
.rdata$r:00007664                 db 0FFh
.rdata$r:00007665                 db 0FFh
.rdata$r:00007666                 db 0FFh
.rdata$r:00007667                 db 0FFh
.rdata$r:00007668                 db    0
.rdata$r:00007669                 db    0
.rdata$r:0000766A                 db    0
.rdata$r:0000766B                 db    0
.rdata$r:0000766C                 db  40h ; @
.rdata$r:0000766D                 db    0
.rdata$r:0000766E                 db    0
.rdata$r:0000766F                 db    0
.rdata$r:00007670                 dd offset ??_R3IHashCallbackUI@@8 ; IHashCallbackUI::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007670 _rdata$r        ends
.rdata$r:00007670
.data:00007674 ; ===========================================================================
.data:00007674
.data:00007674 ; Segment type: Pure data
.data:00007674 ; Segment permissions: Read/Write
.data:00007674 _data           segment dword public 'DATA' use32
.data:00007674                 assume cs:_data
.data:00007674                 ;org 7674h
.data:00007674 ; COMDAT (pick any)
.data:00007674                 public ??_R0?AUIHashCallbackUI@@@8
.data:00007674 ; struct IHashCallbackUI `RTTI Type Descriptor'
.data:00007674 ??_R0?AUIHashCallbackUI@@@8 dd offset ??_7type_info@@6B@
.data:00007674                                         ; DATA XREF: .rdata$r:IHashCallbackUI::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00007674                                         ; .rdata$r:00007814o
.data:00007674                                         ; const type_info::`vftable'
.data:00007678                 db    0
.data:00007679                 db    0
.data:0000767A                 db    0
.data:0000767B                 db    0
.data:0000767C                 db  2Eh ; .
.data:0000767D                 db  3Fh ; ?
.data:0000767E                 db  41h ; A
.data:0000767F                 db  55h ; U
.data:00007680                 db  49h ; I
.data:00007681                 db  48h ; H
.data:00007682                 db  61h ; a
.data:00007683                 db  73h ; s
.data:00007684                 db  68h ; h
.data:00007685                 db  43h ; C
.data:00007686                 db  61h ; a
.data:00007687                 db  6Ch ; l
.data:00007688                 db  6Ch ; l
.data:00007689                 db  62h ; b
.data:0000768A                 db  61h ; a
.data:0000768B                 db  63h ; c
.data:0000768C                 db  6Bh ; k
.data:0000768D                 db  55h ; U
.data:0000768E                 db  49h ; I
.data:0000768F                 db  40h ; @
.data:00007690                 db  40h ; @
.data:00007691                 db    0
.data:00007692                 align 4
.data:00007692 _data           ends
.data:00007692
.rdata$r:00007694 ; ===========================================================================
.rdata$r:00007694
.rdata$r:00007694 ; Segment type: Pure data
.rdata$r:00007694 ; Segment permissions: Read
.rdata$r:00007694 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007694                 assume cs:_rdata$r
.rdata$r:00007694                 ;org 7694h
.rdata$r:00007694 ; COMDAT (pick any)
.rdata$r:00007694                 public ??_R3IHashCallbackUI@@8
.rdata$r:00007694 ; IHashCallbackUI::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007694 ??_R3IHashCallbackUI@@8 db    0         ; DATA XREF: .rdata$r:00007670o
.rdata$r:00007694                                         ; .rdata$r:00007818o
.rdata$r:00007695                 db    0
.rdata$r:00007696                 db    0
.rdata$r:00007697                 db    0
.rdata$r:00007698                 db    0
.rdata$r:00007699                 db    0
.rdata$r:0000769A                 db    0
.rdata$r:0000769B                 db    0
.rdata$r:0000769C                 db    2
.rdata$r:0000769D                 db    0
.rdata$r:0000769E                 db    0
.rdata$r:0000769F                 db    0
.rdata$r:000076A0                 dd offset ??_R2IHashCallbackUI@@8 ; IHashCallbackUI::`RTTI Base Class Array'
.rdata$r:000076A0 _rdata$r        ends
.rdata$r:000076A0
.rdata$r:000076A4 ; ===========================================================================
.rdata$r:000076A4
.rdata$r:000076A4 ; Segment type: Pure data
.rdata$r:000076A4 ; Segment permissions: Read
.rdata$r:000076A4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000076A4                 assume cs:_rdata$r
.rdata$r:000076A4                 ;org 76A4h
.rdata$r:000076A4 ; COMDAT (pick any)
.rdata$r:000076A4                 public ??_R2IHashCallbackUI@@8
.rdata$r:000076A4 ; IHashCallbackUI::`RTTI Base Class Array'
.rdata$r:000076A4 ??_R2IHashCallbackUI@@8 dd offset ??_R1A@?0A@EA@IHashCallbackUI@@8
.rdata$r:000076A4                                         ; DATA XREF: .rdata$r:000076A0o
.rdata$r:000076A4                                         ; IHashCallbackUI::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000076A8                 dd offset ??_R1A@?0A@EA@IDirItemsCallback@@8 ; IDirItemsCallback::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000076AC                 db    0
.rdata$r:000076AD                 align 10h
.rdata$r:000076AD _rdata$r        ends
.rdata$r:000076AD
.text:000076B0 ; ===========================================================================
.text:000076B0
.text:000076B0 ; Segment type: Pure code
.text:000076B0 ; Segment permissions: Read/Execute
.text:000076B0 _text           segment para public 'CODE' use32
.text:000076B0                 assume cs:_text
.text:000076B0                 ;org 76B0h
.text:000076B0 ; COMDAT (pick any)
.text:000076B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000076B0
.text:000076B0 ; =============== S U B R O U T I N E =======================================
.text:000076B0
.text:000076B0 ; Attributes: bp-based frame
.text:000076B0
.text:000076B0 ; _DWORD __thiscall CHashCallbackConsole::~CHashCallbackConsole(CHashCallbackConsole *__hidden this)
.text:000076B0                 public ??1CHashCallbackConsole@@QAE@XZ
.text:000076B0 ??1CHashCallbackConsole@@QAE@XZ proc near ; CODE XREF: Main2(void)+1B72p
.text:000076B0                                         ; __unwindfunclet$?Main2@@YGHXZ$22+6j
.text:000076B0
.text:000076B0 var_10          = dword ptr -10h
.text:000076B0 var_C           = dword ptr -0Ch
.text:000076B0 var_4           = dword ptr -4
.text:000076B0
.text:000076B0                 push    ebp
.text:000076B1                 mov     ebp, esp
.text:000076B3                 push    0FFFFFFFFh
.text:000076B5                 push    offset __ehhandler$??1CHashCallbackConsole@@QAE@XZ
.text:000076BA                 mov     eax, large fs:0
.text:000076C0                 push    eax
.text:000076C1                 push    ecx
.text:000076C2                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000076C9                 mov     eax, dword ptr ds:___security_cookie
.text:000076CE                 xor     eax, ebp
.text:000076D0                 push    eax
.text:000076D1                 lea     eax, [ebp+var_C]
.text:000076D4                 mov     large fs:0, eax
.text:000076DA                 mov     [ebp+var_10], ecx
.text:000076DD                 mov     eax, [ebp+var_10]
.text:000076E0                 mov     dword ptr [eax], offset ??_7CHashCallbackConsole@@6B@ ; const CHashCallbackConsole::`vftable'
.text:000076E6                 mov     [ebp+var_4], 1
.text:000076ED                 mov     ecx, [ebp+var_10]
.text:000076F0                 add     ecx, 124h       ; this
.text:000076F6                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:000076FB                 mov     byte ptr [ebp+var_4], 0
.text:000076FF                 mov     ecx, [ebp+var_10]
.text:00007702                 add     ecx, 118h       ; this
.text:00007708                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000770D                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00007714                 mov     ecx, [ebp+var_10]
.text:00007717                 add     ecx, 8          ; this
.text:0000771A                 call    ??1CCallbackConsoleBase@@QAE@XZ ; CCallbackConsoleBase::~CCallbackConsoleBase(void)
.text:0000771F                 mov     ecx, [ebp+var_C]
.text:00007722                 mov     large fs:0, ecx
.text:00007729                 pop     ecx
.text:0000772A                 add     esp, 10h
.text:0000772D                 cmp     ebp, esp
.text:0000772F                 call    __RTC_CheckEsp
.text:00007734                 mov     esp, ebp
.text:00007736                 pop     ebp
.text:00007737                 retn
.text:00007737 ??1CHashCallbackConsole@@QAE@XZ endp
.text:00007737
.text:00007737 _text           ends
.text:00007737
.text$x:00007738 ; ===========================================================================
.text$x:00007738
.text$x:00007738 ; Segment type: Pure code
.text$x:00007738 ; Segment permissions: Read/Execute
.text$x:00007738 _text$x         segment para public 'CODE' use32
.text$x:00007738                 assume cs:_text$x
.text$x:00007738                 ;org 7738h
.text$x:00007738 ; COMDAT (pick associative to section at 76B0)
.text$x:00007738                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007738
.text$x:00007738 ; =============== S U B R O U T I N E =======================================
.text$x:00007738
.text$x:00007738
.text$x:00007738 __unwindfunclet$??1CHashCallbackConsole@@QAE@XZ$0 proc near
.text$x:00007738                                         ; DATA XREF: .xdata$x:00007770o
.text$x:00007738                 mov     ecx, [ebp-10h]
.text$x:0000773B                 add     ecx, 8          ; this
.text$x:0000773E                 jmp     ??1CCallbackConsoleBase@@QAE@XZ ; CCallbackConsoleBase::~CCallbackConsoleBase(void)
.text$x:0000773E __unwindfunclet$??1CHashCallbackConsole@@QAE@XZ$0 endp
.text$x:0000773E
.text$x:00007743
.text$x:00007743 ; =============== S U B R O U T I N E =======================================
.text$x:00007743
.text$x:00007743
.text$x:00007743 __unwindfunclet$??1CHashCallbackConsole@@QAE@XZ$1 proc near
.text$x:00007743                                         ; DATA XREF: .xdata$x:00007778o
.text$x:00007743                 mov     ecx, [ebp-10h]
.text$x:00007746                 add     ecx, 118h       ; this
.text$x:0000774C                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000774C __unwindfunclet$??1CHashCallbackConsole@@QAE@XZ$1 endp
.text$x:0000774C
.text$x:00007751
.text$x:00007751 ; =============== S U B R O U T I N E =======================================
.text$x:00007751
.text$x:00007751
.text$x:00007751 __ehhandler$??1CHashCallbackConsole@@QAE@XZ proc near
.text$x:00007751                                         ; DATA XREF: CHashCallbackConsole::~CHashCallbackConsole(void)+5o
.text$x:00007751
.text$x:00007751 arg_4           = dword ptr  8
.text$x:00007751
.text$x:00007751                 mov     edx, [esp+arg_4]
.text$x:00007755                 lea     eax, [edx+0Ch]
.text$x:00007758                 mov     ecx, [edx-8]
.text$x:0000775B                 xor     ecx, eax
.text$x:0000775D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007762                 mov     eax, offset __ehfuncinfo$??1CHashCallbackConsole@@QAE@XZ
.text$x:00007767                 jmp     ___CxxFrameHandler3
.text$x:00007767 __ehhandler$??1CHashCallbackConsole@@QAE@XZ endp
.text$x:00007767
.text$x:00007767 _text$x         ends
.text$x:00007767
.xdata$x:0000776C ; ===========================================================================
.xdata$x:0000776C
.xdata$x:0000776C ; Segment type: Pure data
.xdata$x:0000776C ; Segment permissions: Read
.xdata$x:0000776C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000776C                 assume cs:_xdata$x
.xdata$x:0000776C                 ;org 776Ch
.xdata$x:0000776C ; COMDAT (pick associative to section at 76B0)
.xdata$x:0000776C __unwindtable$??1CHashCallbackConsole@@QAE@XZ db 0FFh
.xdata$x:0000776C                                         ; DATA XREF: .xdata$x:00007784o
.xdata$x:0000776D                 db 0FFh
.xdata$x:0000776E                 db 0FFh
.xdata$x:0000776F                 db 0FFh
.xdata$x:00007770                 dd offset __unwindfunclet$??1CHashCallbackConsole@@QAE@XZ$0
.xdata$x:00007774                 align 8
.xdata$x:00007778                 dd offset __unwindfunclet$??1CHashCallbackConsole@@QAE@XZ$1
.xdata$x:0000777C __ehfuncinfo$??1CHashCallbackConsole@@QAE@XZ db  22h ; "
.xdata$x:0000777C                                         ; DATA XREF: __ehhandler$??1CHashCallbackConsole@@QAE@XZ+11o
.xdata$x:0000777D                 db    5
.xdata$x:0000777E                 db  93h ; ô
.xdata$x:0000777F                 db  19h
.xdata$x:00007780                 db    2
.xdata$x:00007781                 db    0
.xdata$x:00007782                 db    0
.xdata$x:00007783                 db    0
.xdata$x:00007784                 dd offset __unwindtable$??1CHashCallbackConsole@@QAE@XZ
.xdata$x:00007788                 db    0
.xdata$x:00007789                 db    0
.xdata$x:0000778A                 db    0
.xdata$x:0000778B                 db    0
.xdata$x:0000778C                 db    0
.xdata$x:0000778D                 db    0
.xdata$x:0000778E                 db    0
.xdata$x:0000778F                 db    0
.xdata$x:00007790                 db    0
.xdata$x:00007791                 db    0
.xdata$x:00007792                 db    0
.xdata$x:00007793                 db    0
.xdata$x:00007794                 db    0
.xdata$x:00007795                 db    0
.xdata$x:00007796                 db    0
.xdata$x:00007797                 db    0
.xdata$x:00007798                 db    0
.xdata$x:00007799                 db    0
.xdata$x:0000779A                 db    0
.xdata$x:0000779B                 db    0
.xdata$x:0000779C                 db    1
.xdata$x:0000779D                 db    0
.xdata$x:0000779E                 db    0
.xdata$x:0000779F                 db    0
.xdata$x:0000779F _xdata$x        ends
.xdata$x:0000779F
.text:000077A0 ; ===========================================================================
.text:000077A0
.text:000077A0 ; Segment type: Pure code
.text:000077A0 ; Segment permissions: Read/Execute
.text:000077A0 _text           segment para public 'CODE' use32
.text:000077A0                 assume cs:_text
.text:000077A0                 ;org 77A0h
.text:000077A0 ; COMDAT (pick any)
.text:000077A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000077A0
.text:000077A0 ; =============== S U B R O U T I N E =======================================
.text:000077A0
.text:000077A0 ; Attributes: bp-based frame
.text:000077A0
.text:000077A0 ; _DWORD __thiscall IHashCallbackUI::IHashCallbackUI(IHashCallbackUI *__hidden this)
.text:000077A0                 public ??0IHashCallbackUI@@QAE@XZ
.text:000077A0 ??0IHashCallbackUI@@QAE@XZ proc near    ; CODE XREF: CHashCallbackConsole::CHashCallbackConsole(void)+30p
.text:000077A0
.text:000077A0 var_4           = dword ptr -4
.text:000077A0
.text:000077A0                 push    ebp
.text:000077A1                 mov     ebp, esp
.text:000077A3                 push    ecx
.text:000077A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000077AB                 mov     [ebp+var_4], ecx
.text:000077AE                 mov     ecx, [ebp+var_4] ; this
.text:000077B1                 call    ??0IDirItemsCallback@@QAE@XZ ; IDirItemsCallback::IDirItemsCallback(void)
.text:000077B6                 mov     eax, [ebp+var_4]
.text:000077B9                 mov     dword ptr [eax], offset ??_7IHashCallbackUI@@6B@ ; const IHashCallbackUI::`vftable'
.text:000077BF                 mov     eax, [ebp+var_4]
.text:000077C2                 add     esp, 4
.text:000077C5                 cmp     ebp, esp
.text:000077C7                 call    __RTC_CheckEsp
.text:000077CC                 mov     esp, ebp
.text:000077CE                 pop     ebp
.text:000077CF                 retn
.text:000077CF ??0IHashCallbackUI@@QAE@XZ endp
.text:000077CF
.text:000077CF _text           ends
.text:000077CF
.rdata:000077D0 ; ===========================================================================
.rdata:000077D0
.rdata:000077D0 ; Segment type: Pure data
.rdata:000077D0 ; Segment permissions: Read
.rdata:000077D0 _rdata          segment dword public 'DATA' use32
.rdata:000077D0                 assume cs:_rdata
.rdata:000077D0                 ;org 77D0h
.rdata:000077D0 ; COMDAT (pick largest)
.rdata:000077D0                 dd offset ??_R4IHashCallbackUI@@6B@ ; const IHashCallbackUI::`RTTI Complete Object Locator'
.rdata:000077D4                 public ??_7IHashCallbackUI@@6B@
.rdata:000077D4 ; const IHashCallbackUI::`vftable'
.rdata:000077D4 ??_7IHashCallbackUI@@6B@ dd offset __purecall
.rdata:000077D4                                         ; DATA XREF: IHashCallbackUI::IHashCallbackUI(void)+19o
.rdata:000077D8                 dd offset __purecall
.rdata:000077DC                 dd offset __purecall
.rdata:000077E0                 dd offset __purecall
.rdata:000077E4                 dd offset __purecall
.rdata:000077E8                 dd offset __purecall
.rdata:000077EC                 dd offset __purecall
.rdata:000077F0                 dd offset __purecall
.rdata:000077F4                 dd offset __purecall
.rdata:000077F8                 dd offset __purecall
.rdata:000077FC                 dd offset __purecall
.rdata:00007800                 dd offset __purecall
.rdata:00007804                 dd offset __purecall
.rdata:00007804 _rdata          ends
.rdata:00007804
.rdata$r:00007808 ; ===========================================================================
.rdata$r:00007808
.rdata$r:00007808 ; Segment type: Pure data
.rdata$r:00007808 ; Segment permissions: Read
.rdata$r:00007808 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007808                 assume cs:_rdata$r
.rdata$r:00007808                 ;org 7808h
.rdata$r:00007808 ; COMDAT (pick any)
.rdata$r:00007808                 public ??_R4IHashCallbackUI@@6B@
.rdata$r:00007808 ; const IHashCallbackUI::`RTTI Complete Object Locator'
.rdata$r:00007808 ??_R4IHashCallbackUI@@6B@ db    0       ; DATA XREF: .rdata:000077D0o
.rdata$r:00007809                 db    0
.rdata$r:0000780A                 db    0
.rdata$r:0000780B                 db    0
.rdata$r:0000780C                 db    0
.rdata$r:0000780D                 db    0
.rdata$r:0000780E                 db    0
.rdata$r:0000780F                 db    0
.rdata$r:00007810                 db    0
.rdata$r:00007811                 db    0
.rdata$r:00007812                 db    0
.rdata$r:00007813                 db    0
.rdata$r:00007814                 dd offset ??_R0?AUIHashCallbackUI@@@8 ; IHashCallbackUI `RTTI Type Descriptor'
.rdata$r:00007818                 dd offset ??_R3IHashCallbackUI@@8 ; IHashCallbackUI::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007818 _rdata$r        ends
.rdata$r:00007818
.xdata$x:0000781C ; ===========================================================================
.xdata$x:0000781C
.xdata$x:0000781C ; Segment type: Pure data
.xdata$x:0000781C ; Segment permissions: Read
.xdata$x:0000781C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000781C                 assume cs:_xdata$x
.xdata$x:0000781C                 ;org 781Ch
.xdata$x:0000781C ; COMDAT (pick any)
.xdata$x:0000781C                 public __TI1?AW4EEnum@NExitCode@@
.xdata$x:0000781C __TI1?AW4EEnum@NExitCode@@ db    0      ; DATA XREF: ShowMessageAndThrowException(char const *,NExitCode::EEnum)+4Do
.xdata$x:0000781D                 db    0
.xdata$x:0000781E                 db    0
.xdata$x:0000781F                 db    0
.xdata$x:00007820                 db    0
.xdata$x:00007821                 db    0
.xdata$x:00007822                 db    0
.xdata$x:00007823                 db    0
.xdata$x:00007824                 db    0
.xdata$x:00007825                 db    0
.xdata$x:00007826                 db    0
.xdata$x:00007827                 db    0
.xdata$x:00007828                 dd offset __CTA1?AW4EEnum@NExitCode@@
.xdata$x:00007828 _xdata$x        ends
.xdata$x:00007828
.xdata$x:0000782C ; ===========================================================================
.xdata$x:0000782C
.xdata$x:0000782C ; Segment type: Pure data
.xdata$x:0000782C ; Segment permissions: Read
.xdata$x:0000782C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000782C                 assume cs:_xdata$x
.xdata$x:0000782C                 ;org 782Ch
.xdata$x:0000782C ; COMDAT (pick any)
.xdata$x:0000782C                 public __CTA1?AW4EEnum@NExitCode@@
.xdata$x:0000782C __CTA1?AW4EEnum@NExitCode@@ db    1     ; DATA XREF: .xdata$x:00007828o
.xdata$x:0000782D                 db    0
.xdata$x:0000782E                 db    0
.xdata$x:0000782F                 db    0
.xdata$x:00007830                 dd offset __CT??_R0?AW4EEnum@NExitCode@@@84
.xdata$x:00007830 _xdata$x        ends
.xdata$x:00007830
.xdata$x:00007834 ; ===========================================================================
.xdata$x:00007834
.xdata$x:00007834 ; Segment type: Pure data
.xdata$x:00007834 ; Segment permissions: Read
.xdata$x:00007834 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007834                 assume cs:_xdata$x
.xdata$x:00007834                 ;org 7834h
.xdata$x:00007834 ; COMDAT (pick any)
.xdata$x:00007834                 public __CT??_R0?AW4EEnum@NExitCode@@@84
.xdata$x:00007834 __CT??_R0?AW4EEnum@NExitCode@@@84 db    1 ; DATA XREF: .xdata$x:00007830o
.xdata$x:00007835                 db    0
.xdata$x:00007836                 db    0
.xdata$x:00007837                 db    0
.xdata$x:00007838                 dd offset ??_R0?AW4EEnum@NExitCode@@@8 ; NExitCode::EEnum `RTTI Type Descriptor'
.xdata$x:0000783C                 align 10h
.xdata$x:00007840                 db 0FFh
.xdata$x:00007841                 db 0FFh
.xdata$x:00007842                 db 0FFh
.xdata$x:00007843                 db 0FFh
.xdata$x:00007844                 db    0
.xdata$x:00007845                 db    0
.xdata$x:00007846                 db    0
.xdata$x:00007847                 db    0
.xdata$x:00007848                 db    4
.xdata$x:00007849                 db    0
.xdata$x:0000784A                 db    0
.xdata$x:0000784B                 db    0
.xdata$x:0000784C                 db    0
.xdata$x:0000784D                 db    0
.xdata$x:0000784E                 db    0
.xdata$x:0000784F                 db    0
.xdata$x:0000784F _xdata$x        ends
.xdata$x:0000784F
.data:00007850 ; ===========================================================================
.data:00007850
.data:00007850 ; Segment type: Pure data
.data:00007850 ; Segment permissions: Read/Write
.data:00007850 _data           segment dword public 'DATA' use32
.data:00007850                 assume cs:_data
.data:00007850                 ;org 7850h
.data:00007850 ; COMDAT (pick any)
.data:00007850                 public ??_R0?AW4EEnum@NExitCode@@@8
.data:00007850 ; enum  NExitCode::EEnum `RTTI Type Descriptor'
.data:00007850 ??_R0?AW4EEnum@NExitCode@@@8 dd offset ??_7type_info@@6B@
.data:00007850                                         ; DATA XREF: .xdata$x:00007838o
.data:00007850                                         ; const type_info::`vftable'
.data:00007854                 align 8
.data:00007858 a_?aw4eenum@nex db '.?AW4EEnum@NExitCode@@',0
.data:0000786F                 align 10h
.data:0000786F _data           ends
.data:0000786F
.text:00007870 ; ===========================================================================
.text:00007870
.text:00007870 ; Segment type: Pure code
.text:00007870 ; Segment permissions: Read/Execute
.text:00007870 _text           segment para public 'CODE' use32
.text:00007870                 assume cs:_text
.text:00007870                 ;org 7870h
.text:00007870 ; COMDAT (pick any)
.text:00007870                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007870
.text:00007870 ; =============== S U B R O U T I N E =======================================
.text:00007870
.text:00007870 ; Attributes: bp-based frame
.text:00007870
.text:00007870 ; unsigned int __thiscall AString::Len(AString *__hidden this)
.text:00007870                 public ?Len@AString@@QBEIXZ
.text:00007870 ?Len@AString@@QBEIXZ proc near          ; CODE XREF: PrintStringRight(CStdOutStream &,AString const &,uint)+17p
.text:00007870
.text:00007870 var_4           = dword ptr -4
.text:00007870
.text:00007870                 push    ebp
.text:00007871                 mov     ebp, esp
.text:00007873                 push    ecx
.text:00007874                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000787B                 mov     [ebp+var_4], ecx
.text:0000787E                 mov     eax, [ebp+var_4]
.text:00007881                 mov     eax, [eax+4]
.text:00007884                 mov     esp, ebp
.text:00007886                 pop     ebp
.text:00007887                 retn
.text:00007887 ?Len@AString@@QBEIXZ endp
.text:00007887
.text:00007887 _text           ends
.text:00007887
.text:00007888 ; ===========================================================================
.text:00007888
.text:00007888 ; Segment type: Pure code
.text:00007888 ; Segment permissions: Read/Execute
.text:00007888 _text           segment para public 'CODE' use32
.text:00007888                 assume cs:_text
.text:00007888                 ;org 7888h
.text:00007888 ; COMDAT (pick any)
.text:00007888                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007888
.text:00007888 ; =============== S U B R O U T I N E =======================================
.text:00007888
.text:00007888 ; Attributes: bp-based frame
.text:00007888
.text:00007888 ; public: __thiscall AString::operator char const *(void)const
.text:00007888                 public ??BAString@@QBEPBDXZ
.text:00007888 ??BAString@@QBEPBDXZ proc near          ; CODE XREF: PrintStringRight(CStdOutStream &,AString const &,uint)+47p
.text:00007888                                         ; WarningsCheck(long,CCallbackConsoleBase const &,CUpdateErrorInfo const &,CStdOutStream &,bool)+10Ap
.text:00007888
.text:00007888 var_4           = dword ptr -4
.text:00007888
.text:00007888                 push    ebp
.text:00007889                 mov     ebp, esp
.text:0000788B                 push    ecx
.text:0000788C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007893                 mov     [ebp+var_4], ecx
.text:00007896                 mov     eax, [ebp+var_4]
.text:00007899                 mov     eax, [eax]
.text:0000789B                 mov     esp, ebp
.text:0000789D                 pop     ebp
.text:0000789E                 retn
.text:0000789E ??BAString@@QBEPBDXZ endp
.text:0000789E
.text:0000789E ; ---------------------------------------------------------------------------
.text:0000789F                 align 10h
.text:0000789F _text           ends
.text:0000789F
.text:000078A0 ; ===========================================================================
.text:000078A0
.text:000078A0 ; Segment type: Pure code
.text:000078A0 ; Segment permissions: Read/Execute
.text:000078A0 _text           segment para public 'CODE' use32
.text:000078A0                 assume cs:_text
.text:000078A0                 ;org 78A0h
.text:000078A0 ; COMDAT (pick any)
.text:000078A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000078A0
.text:000078A0 ; =============== S U B R O U T I N E =======================================
.text:000078A0
.text:000078A0 ; Attributes: bp-based frame
.text:000078A0
.text:000078A0 ; unsigned int __thiscall UString::Len(UString *__hidden this)
.text:000078A0                 public ?Len@UString@@QBEIXZ
.text:000078A0 ?Len@UString@@QBEIXZ proc near          ; CODE XREF: PrintString(CStdOutStream &,UString const &,uint)+17p
.text:000078A0
.text:000078A0 var_4           = dword ptr -4
.text:000078A0
.text:000078A0                 push    ebp
.text:000078A1                 mov     ebp, esp
.text:000078A3                 push    ecx
.text:000078A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000078AB                 mov     [ebp+var_4], ecx
.text:000078AE                 mov     eax, [ebp+var_4]
.text:000078B1                 mov     eax, [eax+4]
.text:000078B4                 mov     esp, ebp
.text:000078B6                 pop     ebp
.text:000078B7                 retn
.text:000078B7 ?Len@UString@@QBEIXZ endp
.text:000078B7
.text:000078B7 _text           ends
.text:000078B7
.text:000078B8 ; ===========================================================================
.text:000078B8
.text:000078B8 ; Segment type: Pure code
.text:000078B8 ; Segment permissions: Read/Execute
.text:000078B8 _text           segment para public 'CODE' use32
.text:000078B8                 assume cs:_text
.text:000078B8                 ;org 78B8h
.text:000078B8 ; COMDAT (pick any)
.text:000078B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000078B8
.text:000078B8 ; =============== S U B R O U T I N E =======================================
.text:000078B8
.text:000078B8 ; Attributes: bp-based frame
.text:000078B8
.text:000078B8 ; bool __thiscall AString::IsEmpty(AString *__hidden this)
.text:000078B8                 public ?IsEmpty@AString@@QBE_NXZ
.text:000078B8 ?IsEmpty@AString@@QBE_NXZ proc near     ; CODE XREF: WarningsCheck(long,CCallbackConsoleBase const &,CUpdateErrorInfo const &,CStdOutStream &,bool)+F8p
.text:000078B8                                         ; CUpdateErrorInfo::ThereIsError(void)+25p
.text:000078B8
.text:000078B8 var_4           = dword ptr -4
.text:000078B8
.text:000078B8                 push    ebp
.text:000078B9                 mov     ebp, esp
.text:000078BB                 push    ecx
.text:000078BC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000078C3                 mov     [ebp+var_4], ecx
.text:000078C6                 mov     eax, [ebp+var_4]
.text:000078C9                 xor     ecx, ecx
.text:000078CB                 cmp     dword ptr [eax+4], 0
.text:000078CF                 setz    cl
.text:000078D2                 mov     al, cl
.text:000078D4                 mov     esp, ebp
.text:000078D6                 pop     ebp
.text:000078D7                 retn
.text:000078D7 ?IsEmpty@AString@@QBE_NXZ endp
.text:000078D7
.text:000078D7 _text           ends
.text:000078D7
.text:000078D8 ; ===========================================================================
.text:000078D8
.text:000078D8 ; Segment type: Pure code
.text:000078D8 ; Segment permissions: Read/Execute
.text:000078D8 _text           segment para public 'CODE' use32
.text:000078D8                 assume cs:_text
.text:000078D8                 ;org 78D8h
.text:000078D8 ; COMDAT (pick any)
.text:000078D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000078D8
.text:000078D8 ; =============== S U B R O U T I N E =======================================
.text:000078D8
.text:000078D8 ; Attributes: bp-based frame
.text:000078D8
.text:000078D8 ; bool __thiscall CUpdateErrorInfo::ThereIsError(CUpdateErrorInfo *__hidden this)
.text:000078D8                 public ?ThereIsError@CUpdateErrorInfo@@QBE_NXZ
.text:000078D8 ?ThereIsError@CUpdateErrorInfo@@QBE_NXZ proc near
.text:000078D8                                         ; CODE XREF: WarningsCheck(long,CCallbackConsoleBase const &,CUpdateErrorInfo const &,CStdOutStream &,bool)+D3p
.text:000078D8
.text:000078D8 var_8           = dword ptr -8
.text:000078D8 var_4           = dword ptr -4
.text:000078D8
.text:000078D8                 push    ebp
.text:000078D9                 mov     ebp, esp
.text:000078DB                 sub     esp, 8
.text:000078DE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000078E5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000078EC                 mov     [ebp+var_4], ecx
.text:000078EF                 mov     eax, [ebp+var_4]
.text:000078F2                 cmp     dword ptr [eax], 0
.text:000078F5                 jnz     short loc_7924
.text:000078F7                 mov     ecx, [ebp+var_4]
.text:000078FA                 add     ecx, 4          ; this
.text:000078FD                 call    ?IsEmpty@AString@@QBE_NXZ ; AString::IsEmpty(void)
.text:00007902                 movzx   ecx, al
.text:00007905                 test    ecx, ecx
.text:00007907                 jz      short loc_7924
.text:00007909                 mov     ecx, [ebp+var_4]
.text:0000790C                 add     ecx, 10h
.text:0000790F                 call    ?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ ; CObjectVector<UString>::IsEmpty(void)
.text:00007914                 movzx   edx, al
.text:00007917                 test    edx, edx
.text:00007919                 jz      short loc_7924
.text:0000791B                 mov     [ebp+var_8], 0
.text:00007922                 jmp     short loc_792B
.text:00007924 ; ---------------------------------------------------------------------------
.text:00007924
.text:00007924 loc_7924:                               ; CODE XREF: CUpdateErrorInfo::ThereIsError(void)+1Dj
.text:00007924                                         ; CUpdateErrorInfo::ThereIsError(void)+2Fj ...
.text:00007924                 mov     [ebp+var_8], 1
.text:0000792B
.text:0000792B loc_792B:                               ; CODE XREF: CUpdateErrorInfo::ThereIsError(void)+4Aj
.text:0000792B                 mov     al, byte ptr [ebp+var_8]
.text:0000792E                 add     esp, 8
.text:00007931                 cmp     ebp, esp
.text:00007933                 call    __RTC_CheckEsp
.text:00007938                 mov     esp, ebp
.text:0000793A                 pop     ebp
.text:0000793B                 retn
.text:0000793B ?ThereIsError@CUpdateErrorInfo@@QBE_NXZ endp
.text:0000793B
.text:0000793B _text           ends
.text:0000793B
.xdata$x:0000793C ; ===========================================================================
.xdata$x:0000793C
.xdata$x:0000793C ; Segment type: Pure data
.xdata$x:0000793C ; Segment permissions: Read
.xdata$x:0000793C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000793C                 assume cs:_xdata$x
.xdata$x:0000793C                 ;org 793Ch
.xdata$x:0000793C ; COMDAT (pick any)
.xdata$x:0000793C                 public __TI1?AUCSystemException@@
.xdata$x:0000793C __TI1?AUCSystemException@@ db    0      ; DATA XREF: ThrowException_if_Error(long)+2Bo
.xdata$x:0000793D                 db    0
.xdata$x:0000793E                 db    0
.xdata$x:0000793F                 db    0
.xdata$x:00007940                 db    0
.xdata$x:00007941                 db    0
.xdata$x:00007942                 db    0
.xdata$x:00007943                 db    0
.xdata$x:00007944                 db    0
.xdata$x:00007945                 db    0
.xdata$x:00007946                 db    0
.xdata$x:00007947                 db    0
.xdata$x:00007948                 dd offset __CTA1?AUCSystemException@@
.xdata$x:00007948 _xdata$x        ends
.xdata$x:00007948
.xdata$x:0000794C ; ===========================================================================
.xdata$x:0000794C
.xdata$x:0000794C ; Segment type: Pure data
.xdata$x:0000794C ; Segment permissions: Read
.xdata$x:0000794C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000794C                 assume cs:_xdata$x
.xdata$x:0000794C                 ;org 794Ch
.xdata$x:0000794C ; COMDAT (pick any)
.xdata$x:0000794C                 public __CTA1?AUCSystemException@@
.xdata$x:0000794C __CTA1?AUCSystemException@@ db    1     ; DATA XREF: .xdata$x:00007948o
.xdata$x:0000794D                 db    0
.xdata$x:0000794E                 db    0
.xdata$x:0000794F                 db    0
.xdata$x:00007950                 dd offset __CT??_R0?AUCSystemException@@@84
.xdata$x:00007950 _xdata$x        ends
.xdata$x:00007950
.xdata$x:00007954 ; ===========================================================================
.xdata$x:00007954
.xdata$x:00007954 ; Segment type: Pure data
.xdata$x:00007954 ; Segment permissions: Read
.xdata$x:00007954 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007954                 assume cs:_xdata$x
.xdata$x:00007954                 ;org 7954h
.xdata$x:00007954 ; COMDAT (pick any)
.xdata$x:00007954                 public __CT??_R0?AUCSystemException@@@84
.xdata$x:00007954 __CT??_R0?AUCSystemException@@@84 db    0 ; DATA XREF: .xdata$x:00007950o
.xdata$x:00007955                 db    0
.xdata$x:00007956                 db    0
.xdata$x:00007957                 db    0
.xdata$x:00007958                 dd offset ??_R0?AUCSystemException@@@8 ; CSystemException `RTTI Type Descriptor'
.xdata$x:0000795C                 align 10h
.xdata$x:00007960                 db 0FFh
.xdata$x:00007961                 db 0FFh
.xdata$x:00007962                 db 0FFh
.xdata$x:00007963                 db 0FFh
.xdata$x:00007964                 db    0
.xdata$x:00007965                 db    0
.xdata$x:00007966                 db    0
.xdata$x:00007967                 db    0
.xdata$x:00007968                 db    4
.xdata$x:00007969                 db    0
.xdata$x:0000796A                 db    0
.xdata$x:0000796B                 db    0
.xdata$x:0000796C                 db    0
.xdata$x:0000796D                 db    0
.xdata$x:0000796E                 db    0
.xdata$x:0000796F                 db    0
.xdata$x:0000796F _xdata$x        ends
.xdata$x:0000796F
.data:00007970 ; ===========================================================================
.data:00007970
.data:00007970 ; Segment type: Pure data
.data:00007970 ; Segment permissions: Read/Write
.data:00007970 _data           segment dword public 'DATA' use32
.data:00007970                 assume cs:_data
.data:00007970                 ;org 7970h
.data:00007970 ; COMDAT (pick any)
.data:00007970                 public ??_R0?AUCSystemException@@@8
.data:00007970 ; struct CSystemException `RTTI Type Descriptor'
.data:00007970 ??_R0?AUCSystemException@@@8 dd offset ??_7type_info@@6B@
.data:00007970                                         ; DATA XREF: .xdata$x:00007958o
.data:00007970                                         ; const type_info::`vftable'
.data:00007974                 align 8
.data:00007978 a_?aucsystemexc db '.?AUCSystemException@@',0
.data:0000798F                 align 10h
.data:0000798F _data           ends
.data:0000798F
.text:00007990 ; ===========================================================================
.text:00007990
.text:00007990 ; Segment type: Pure code
.text:00007990 ; Segment permissions: Read/Execute
.text:00007990 _text           segment para public 'CODE' use32
.text:00007990                 assume cs:_text
.text:00007990                 ;org 7990h
.text:00007990 ; COMDAT (pick any)
.text:00007990                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007990
.text:00007990 ; =============== S U B R O U T I N E =======================================
.text:00007990
.text:00007990 ; Attributes: bp-based frame
.text:00007990
.text:00007990 ; _DWORD __thiscall CSystemException::CSystemException(CSystemException *this, __int32)
.text:00007990                 public ??0CSystemException@@QAE@J@Z
.text:00007990 ??0CSystemException@@QAE@J@Z proc near  ; CODE XREF: ThrowException_if_Error(long)+21p
.text:00007990
.text:00007990 var_4           = dword ptr -4
.text:00007990 arg_0           = dword ptr  8
.text:00007990
.text:00007990                 push    ebp
.text:00007991                 mov     ebp, esp
.text:00007993                 push    ecx
.text:00007994                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000799B                 mov     [ebp+var_4], ecx
.text:0000799E                 mov     eax, [ebp+var_4]
.text:000079A1                 mov     ecx, [ebp+arg_0]
.text:000079A4                 mov     [eax], ecx
.text:000079A6                 mov     eax, [ebp+var_4]
.text:000079A9                 mov     esp, ebp
.text:000079AB                 pop     ebp
.text:000079AC                 retn    4
.text:000079AC ??0CSystemException@@QAE@J@Z endp
.text:000079AC
.text:000079AC ; ---------------------------------------------------------------------------
.text:000079AF                 align 10h
.text:000079AF _text           ends
.text:000079AF
.text:000079B0 ; ===========================================================================
.text:000079B0
.text:000079B0 ; Segment type: Pure code
.text:000079B0 ; Segment permissions: Read/Execute
.text:000079B0 _text           segment para public 'CODE' use32
.text:000079B0                 assume cs:_text
.text:000079B0                 ;org 79B0h
.text:000079B0 ; COMDAT (pick any)
.text:000079B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000079B0
.text:000079B0 ; =============== S U B R O U T I N E =======================================
.text:000079B0
.text:000079B0 ; Attributes: bp-based frame
.text:000079B0
.text:000079B0 ; unsigned int __stdcall MyStringLen(const char *)
.text:000079B0                 public ?MyStringLen@@YGIPBD@Z
.text:000079B0 ?MyStringLen@@YGIPBD@Z proc near        ; CODE XREF: PrintNum(unsigned __int64,uint,char)+3Bp
.text:000079B0
.text:000079B0 var_4           = dword ptr -4
.text:000079B0 arg_0           = dword ptr  8
.text:000079B0
.text:000079B0                 push    ebp
.text:000079B1                 mov     ebp, esp
.text:000079B3                 push    ecx
.text:000079B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000079BB                 mov     [ebp+var_4], 0
.text:000079C2                 jmp     short loc_79CD
.text:000079C4 ; ---------------------------------------------------------------------------
.text:000079C4
.text:000079C4 loc_79C4:                               ; CODE XREF: MyStringLen(char const *)+2Aj
.text:000079C4                 mov     eax, [ebp+var_4]
.text:000079C7                 add     eax, 1
.text:000079CA                 mov     [ebp+var_4], eax
.text:000079CD
.text:000079CD loc_79CD:                               ; CODE XREF: MyStringLen(char const *)+12j
.text:000079CD                 mov     ecx, [ebp+arg_0]
.text:000079D0                 add     ecx, [ebp+var_4]
.text:000079D3                 movsx   edx, byte ptr [ecx]
.text:000079D6                 test    edx, edx
.text:000079D8                 jz      short loc_79DC
.text:000079DA                 jmp     short loc_79C4
.text:000079DC ; ---------------------------------------------------------------------------
.text:000079DC
.text:000079DC loc_79DC:                               ; CODE XREF: MyStringLen(char const *)+28j
.text:000079DC                 mov     eax, [ebp+var_4]
.text:000079DF                 mov     esp, ebp
.text:000079E1                 pop     ebp
.text:000079E2                 retn    4
.text:000079E2 ?MyStringLen@@YGIPBD@Z endp
.text:000079E2
.text:000079E2 ; ---------------------------------------------------------------------------
.text:000079E5                 align 4
.text:000079E5 _text           ends
.text:000079E5
.text:000079E8 ; ===========================================================================
.text:000079E8
.text:000079E8 ; Segment type: Pure code
.text:000079E8 ; Segment permissions: Read/Execute
.text:000079E8 _text           segment para public 'CODE' use32
.text:000079E8                 assume cs:_text
.text:000079E8                 ;org 79E8h
.text:000079E8 ; COMDAT (pick any)
.text:000079E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000079E8
.text:000079E8 ; =============== S U B R O U T I N E =======================================
.text:000079E8
.text:000079E8 ; Attributes: bp-based frame
.text:000079E8
.text:000079E8 ; _DWORD __thiscall CArcCmdLineOptions::~CArcCmdLineOptions(CArcCmdLineOptions *__hidden this)
.text:000079E8                 public ??1CArcCmdLineOptions@@QAE@XZ
.text:000079E8 ??1CArcCmdLineOptions@@QAE@XZ proc near ; CODE XREF: Main2(void)+1FEp
.text:000079E8                                         ; Main2(void)+1BFEp ...
.text:000079E8
.text:000079E8 var_10          = dword ptr -10h
.text:000079E8 var_C           = dword ptr -0Ch
.text:000079E8 var_4           = dword ptr -4
.text:000079E8
.text:000079E8                 push    ebp
.text:000079E9                 mov     ebp, esp
.text:000079EB                 push    0FFFFFFFFh
.text:000079ED                 push    offset __ehhandler$??1CArcCmdLineOptions@@QAE@XZ
.text:000079F2                 mov     eax, large fs:0
.text:000079F8                 push    eax
.text:000079F9                 push    ecx
.text:000079FA                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00007A01                 mov     eax, dword ptr ds:___security_cookie
.text:00007A06                 xor     eax, ebp
.text:00007A08                 push    eax
.text:00007A09                 lea     eax, [ebp+var_C]
.text:00007A0C                 mov     large fs:0, eax
.text:00007A12                 mov     [ebp+var_10], ecx
.text:00007A15                 mov     [ebp+var_4], 0Ah
.text:00007A1C                 mov     ecx, [ebp+var_10]
.text:00007A1F                 add     ecx, 1F0h
.text:00007A25                 call    ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text:00007A2A                 mov     byte ptr [ebp+var_4], 9
.text:00007A2E                 mov     ecx, [ebp+var_10]
.text:00007A31                 add     ecx, 1E4h       ; this
.text:00007A37                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00007A3C                 mov     byte ptr [ebp+var_4], 8
.text:00007A40                 mov     ecx, [ebp+var_10]
.text:00007A43                 add     ecx, 1D0h       ; this
.text:00007A49                 call    ??1CHashOptions@@QAE@XZ ; CHashOptions::~CHashOptions(void)
.text:00007A4E                 mov     byte ptr [ebp+var_4], 7
.text:00007A52                 mov     ecx, [ebp+var_10]
.text:00007A55                 add     ecx, 0B8h ; '+' ; this
.text:00007A5B                 call    ??1CUpdateOptions@@QAE@XZ ; CUpdateOptions::~CUpdateOptions(void)
.text:00007A60                 mov     byte ptr [ebp+var_4], 6
.text:00007A64                 mov     ecx, [ebp+var_10]
.text:00007A67                 add     ecx, 88h ; 'ê'  ; this
.text:00007A6D                 call    ??1CExtractOptionsBase@@QAE@XZ ; CExtractOptionsBase::~CExtractOptionsBase(void)
.text:00007A72                 mov     byte ptr [ebp+var_4], 5
.text:00007A76                 mov     ecx, [ebp+var_10]
.text:00007A79                 add     ecx, 7Ch ; '|'
.text:00007A7C                 call    ??1?$CObjectVector@UCProperty@@@@QAE@XZ ; CObjectVector<CProperty>::~CObjectVector<CProperty>(void)
.text:00007A81                 mov     byte ptr [ebp+var_4], 4
.text:00007A85                 mov     ecx, [ebp+var_10]
.text:00007A88                 add     ecx, 70h ; 'p'  ; this
.text:00007A8B                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00007A90                 mov     byte ptr [ebp+var_4], 3
.text:00007A94                 mov     ecx, [ebp+var_10]
.text:00007A97                 add     ecx, 58h ; 'X'  ; this
.text:00007A9A                 call    ??1CCensor@NWildcard@@QAE@XZ ; NWildcard::CCensor::~CCensor(void)
.text:00007A9F                 mov     byte ptr [ebp+var_4], 2
.text:00007AA3                 mov     ecx, [ebp+var_10]
.text:00007AA6                 add     ecx, 48h ; 'H'
.text:00007AA9                 call    ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text:00007AAE                 mov     byte ptr [ebp+var_4], 1
.text:00007AB2                 mov     ecx, [ebp+var_10]
.text:00007AB5                 add     ecx, 38h ; '8'  ; this
.text:00007AB8                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00007ABD                 mov     byte ptr [ebp+var_4], 0
.text:00007AC1                 mov     ecx, [ebp+var_10]
.text:00007AC4                 add     ecx, 28h ; '('  ; this
.text:00007AC7                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00007ACC                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00007AD3                 mov     ecx, [ebp+var_10]
.text:00007AD6                 add     ecx, 0Ch        ; this
.text:00007AD9                 call    ??1CCensor@NWildcard@@QAE@XZ ; NWildcard::CCensor::~CCensor(void)
.text:00007ADE                 mov     ecx, [ebp+var_C]
.text:00007AE1                 mov     large fs:0, ecx
.text:00007AE8                 pop     ecx
.text:00007AE9                 add     esp, 10h
.text:00007AEC                 cmp     ebp, esp
.text:00007AEE                 call    __RTC_CheckEsp
.text:00007AF3                 mov     esp, ebp
.text:00007AF5                 pop     ebp
.text:00007AF6                 retn
.text:00007AF6 ??1CArcCmdLineOptions@@QAE@XZ endp
.text:00007AF6
.text:00007AF6 ; ---------------------------------------------------------------------------
.text:00007AF7                 align 4
.text:00007AF7 _text           ends
.text:00007AF7
.text$x:00007AF8 ; ===========================================================================
.text$x:00007AF8
.text$x:00007AF8 ; Segment type: Pure code
.text$x:00007AF8 ; Segment permissions: Read/Execute
.text$x:00007AF8 _text$x         segment para public 'CODE' use32
.text$x:00007AF8                 assume cs:_text$x
.text$x:00007AF8                 ;org 7AF8h
.text$x:00007AF8 ; COMDAT (pick associative to section at 79E8)
.text$x:00007AF8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007AF8
.text$x:00007AF8 ; =============== S U B R O U T I N E =======================================
.text$x:00007AF8
.text$x:00007AF8
.text$x:00007AF8 __unwindfunclet$??1CArcCmdLineOptions@@QAE@XZ$0 proc near
.text$x:00007AF8                                         ; DATA XREF: .xdata$x:00007BC0o
.text$x:00007AF8                 mov     ecx, [ebp-10h]
.text$x:00007AFB                 add     ecx, 0Ch        ; this
.text$x:00007AFE                 jmp     ??1CCensor@NWildcard@@QAE@XZ ; NWildcard::CCensor::~CCensor(void)
.text$x:00007AFE __unwindfunclet$??1CArcCmdLineOptions@@QAE@XZ$0 endp
.text$x:00007AFE
.text$x:00007B03
.text$x:00007B03 ; =============== S U B R O U T I N E =======================================
.text$x:00007B03
.text$x:00007B03
.text$x:00007B03 __unwindfunclet$??1CArcCmdLineOptions@@QAE@XZ$1 proc near
.text$x:00007B03                                         ; DATA XREF: .xdata$x:00007BC8o
.text$x:00007B03                 mov     ecx, [ebp-10h]
.text$x:00007B06                 add     ecx, 28h ; '('  ; this
.text$x:00007B09                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00007B09 __unwindfunclet$??1CArcCmdLineOptions@@QAE@XZ$1 endp
.text$x:00007B09
.text$x:00007B0E
.text$x:00007B0E ; =============== S U B R O U T I N E =======================================
.text$x:00007B0E
.text$x:00007B0E
.text$x:00007B0E __unwindfunclet$??1CArcCmdLineOptions@@QAE@XZ$2 proc near
.text$x:00007B0E                                         ; DATA XREF: .xdata$x:00007BD0o
.text$x:00007B0E                 mov     ecx, [ebp-10h]
.text$x:00007B11                 add     ecx, 38h ; '8'  ; this
.text$x:00007B14                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00007B14 __unwindfunclet$??1CArcCmdLineOptions@@QAE@XZ$2 endp
.text$x:00007B14
.text$x:00007B19
.text$x:00007B19 ; =============== S U B R O U T I N E =======================================
.text$x:00007B19
.text$x:00007B19
.text$x:00007B19 __unwindfunclet$??1CArcCmdLineOptions@@QAE@XZ$3 proc near
.text$x:00007B19                                         ; DATA XREF: .xdata$x:00007BD8o
.text$x:00007B19                 mov     ecx, [ebp-10h]
.text$x:00007B1C                 add     ecx, 48h ; 'H'
.text$x:00007B1F                 jmp     ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text$x:00007B1F __unwindfunclet$??1CArcCmdLineOptions@@QAE@XZ$3 endp
.text$x:00007B1F
.text$x:00007B24
.text$x:00007B24 ; =============== S U B R O U T I N E =======================================
.text$x:00007B24
.text$x:00007B24
.text$x:00007B24 __unwindfunclet$??1CArcCmdLineOptions@@QAE@XZ$4 proc near
.text$x:00007B24                                         ; DATA XREF: .xdata$x:00007BE0o
.text$x:00007B24                 mov     ecx, [ebp-10h]
.text$x:00007B27                 add     ecx, 58h ; 'X'  ; this
.text$x:00007B2A                 jmp     ??1CCensor@NWildcard@@QAE@XZ ; NWildcard::CCensor::~CCensor(void)
.text$x:00007B2A __unwindfunclet$??1CArcCmdLineOptions@@QAE@XZ$4 endp
.text$x:00007B2A
.text$x:00007B2F
.text$x:00007B2F ; =============== S U B R O U T I N E =======================================
.text$x:00007B2F
.text$x:00007B2F
.text$x:00007B2F __unwindfunclet$??1CArcCmdLineOptions@@QAE@XZ$5 proc near
.text$x:00007B2F                                         ; DATA XREF: .xdata$x:00007BE8o
.text$x:00007B2F                 mov     ecx, [ebp-10h]
.text$x:00007B32                 add     ecx, 70h ; 'p'  ; this
.text$x:00007B35                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00007B35 __unwindfunclet$??1CArcCmdLineOptions@@QAE@XZ$5 endp
.text$x:00007B35
.text$x:00007B3A
.text$x:00007B3A ; =============== S U B R O U T I N E =======================================
.text$x:00007B3A
.text$x:00007B3A
.text$x:00007B3A __unwindfunclet$??1CArcCmdLineOptions@@QAE@XZ$6 proc near
.text$x:00007B3A                                         ; DATA XREF: .xdata$x:00007BF0o
.text$x:00007B3A                 mov     ecx, [ebp-10h]
.text$x:00007B3D                 add     ecx, 7Ch ; '|'
.text$x:00007B40                 jmp     ??1?$CObjectVector@UCProperty@@@@QAE@XZ ; CObjectVector<CProperty>::~CObjectVector<CProperty>(void)
.text$x:00007B40 __unwindfunclet$??1CArcCmdLineOptions@@QAE@XZ$6 endp
.text$x:00007B40
.text$x:00007B45
.text$x:00007B45 ; =============== S U B R O U T I N E =======================================
.text$x:00007B45
.text$x:00007B45
.text$x:00007B45 __unwindfunclet$??1CArcCmdLineOptions@@QAE@XZ$7 proc near
.text$x:00007B45                                         ; DATA XREF: .xdata$x:00007BF8o
.text$x:00007B45                 mov     ecx, [ebp-10h]
.text$x:00007B48                 add     ecx, 88h ; 'ê'  ; this
.text$x:00007B4E                 jmp     ??1CExtractOptionsBase@@QAE@XZ ; CExtractOptionsBase::~CExtractOptionsBase(void)
.text$x:00007B4E __unwindfunclet$??1CArcCmdLineOptions@@QAE@XZ$7 endp
.text$x:00007B4E
.text$x:00007B53
.text$x:00007B53 ; =============== S U B R O U T I N E =======================================
.text$x:00007B53
.text$x:00007B53
.text$x:00007B53 __unwindfunclet$??1CArcCmdLineOptions@@QAE@XZ$8 proc near
.text$x:00007B53                                         ; DATA XREF: .xdata$x:00007C00o
.text$x:00007B53                 mov     ecx, [ebp-10h]
.text$x:00007B56                 add     ecx, 0B8h ; '+' ; this
.text$x:00007B5C                 jmp     ??1CUpdateOptions@@QAE@XZ ; CUpdateOptions::~CUpdateOptions(void)
.text$x:00007B5C __unwindfunclet$??1CArcCmdLineOptions@@QAE@XZ$8 endp
.text$x:00007B5C
.text$x:00007B61
.text$x:00007B61 ; =============== S U B R O U T I N E =======================================
.text$x:00007B61
.text$x:00007B61
.text$x:00007B61 __unwindfunclet$??1CArcCmdLineOptions@@QAE@XZ$9 proc near
.text$x:00007B61                                         ; DATA XREF: .xdata$x:00007C08o
.text$x:00007B61                 mov     ecx, [ebp-10h]
.text$x:00007B64                 add     ecx, 1D0h       ; this
.text$x:00007B6A                 jmp     ??1CHashOptions@@QAE@XZ ; CHashOptions::~CHashOptions(void)
.text$x:00007B6A __unwindfunclet$??1CArcCmdLineOptions@@QAE@XZ$9 endp
.text$x:00007B6A
.text$x:00007B6F
.text$x:00007B6F ; =============== S U B R O U T I N E =======================================
.text$x:00007B6F
.text$x:00007B6F
.text$x:00007B6F __unwindfunclet$??1CArcCmdLineOptions@@QAE@XZ$10 proc near
.text$x:00007B6F                                         ; DATA XREF: .xdata$x:00007C10o
.text$x:00007B6F                 mov     ecx, [ebp-10h]
.text$x:00007B72                 add     ecx, 1E4h       ; this
.text$x:00007B78                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00007B78 __unwindfunclet$??1CArcCmdLineOptions@@QAE@XZ$10 endp
.text$x:00007B78
.text$x:00007B7D
.text$x:00007B7D ; =============== S U B R O U T I N E =======================================
.text$x:00007B7D
.text$x:00007B7D
.text$x:00007B7D __ehhandler$??1CArcCmdLineOptions@@QAE@XZ proc near
.text$x:00007B7D                                         ; DATA XREF: CArcCmdLineOptions::~CArcCmdLineOptions(void)+5o
.text$x:00007B7D
.text$x:00007B7D arg_4           = dword ptr  8
.text$x:00007B7D
.text$x:00007B7D                 mov     edx, [esp+arg_4]
.text$x:00007B81                 lea     eax, [edx+0Ch]
.text$x:00007B84                 mov     ecx, [edx-8]
.text$x:00007B87                 xor     ecx, eax
.text$x:00007B89                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007B8E                 mov     eax, offset __ehfuncinfo$??1CArcCmdLineOptions@@QAE@XZ
.text$x:00007B93                 jmp     ___CxxFrameHandler3
.text$x:00007B93 __ehhandler$??1CArcCmdLineOptions@@QAE@XZ endp
.text$x:00007B93
.text$x:00007B93 _text$x         ends
.text$x:00007B93
.xdata$x:00007B98 ; ===========================================================================
.xdata$x:00007B98
.xdata$x:00007B98 ; Segment type: Pure data
.xdata$x:00007B98 ; Segment permissions: Read
.xdata$x:00007B98 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007B98                 assume cs:_xdata$x
.xdata$x:00007B98                 ;org 7B98h
.xdata$x:00007B98 ; COMDAT (pick associative to section at 79E8)
.xdata$x:00007B98 __ehfuncinfo$??1CArcCmdLineOptions@@QAE@XZ db  22h ; "
.xdata$x:00007B98                                         ; DATA XREF: __ehhandler$??1CArcCmdLineOptions@@QAE@XZ+11o
.xdata$x:00007B99                 db    5
.xdata$x:00007B9A                 db  93h ; ô
.xdata$x:00007B9B                 db  19h
.xdata$x:00007B9C                 db  0Bh
.xdata$x:00007B9D                 db    0
.xdata$x:00007B9E                 db    0
.xdata$x:00007B9F                 db    0
.xdata$x:00007BA0                 dd offset __unwindtable$??1CArcCmdLineOptions@@QAE@XZ
.xdata$x:00007BA4                 db    0
.xdata$x:00007BA5                 db    0
.xdata$x:00007BA6                 db    0
.xdata$x:00007BA7                 db    0
.xdata$x:00007BA8                 db    0
.xdata$x:00007BA9                 db    0
.xdata$x:00007BAA                 db    0
.xdata$x:00007BAB                 db    0
.xdata$x:00007BAC                 db    0
.xdata$x:00007BAD                 db    0
.xdata$x:00007BAE                 db    0
.xdata$x:00007BAF                 db    0
.xdata$x:00007BB0                 db    0
.xdata$x:00007BB1                 db    0
.xdata$x:00007BB2                 db    0
.xdata$x:00007BB3                 db    0
.xdata$x:00007BB4                 db    0
.xdata$x:00007BB5                 db    0
.xdata$x:00007BB6                 db    0
.xdata$x:00007BB7                 db    0
.xdata$x:00007BB8                 db    1
.xdata$x:00007BB9                 db    0
.xdata$x:00007BBA                 db    0
.xdata$x:00007BBB                 db    0
.xdata$x:00007BBC __unwindtable$??1CArcCmdLineOptions@@QAE@XZ db 0FFh
.xdata$x:00007BBC                                         ; DATA XREF: .xdata$x:00007BA0o
.xdata$x:00007BBD                 db 0FFh
.xdata$x:00007BBE                 db 0FFh
.xdata$x:00007BBF                 db 0FFh
.xdata$x:00007BC0                 dd offset __unwindfunclet$??1CArcCmdLineOptions@@QAE@XZ$0
.xdata$x:00007BC4                 align 8
.xdata$x:00007BC8                 dd offset __unwindfunclet$??1CArcCmdLineOptions@@QAE@XZ$1
.xdata$x:00007BCC                 db    1
.xdata$x:00007BCD                 db    0
.xdata$x:00007BCE                 db    0
.xdata$x:00007BCF                 db    0
.xdata$x:00007BD0                 dd offset __unwindfunclet$??1CArcCmdLineOptions@@QAE@XZ$2
.xdata$x:00007BD4                 db    2
.xdata$x:00007BD5                 db    0
.xdata$x:00007BD6                 db    0
.xdata$x:00007BD7                 db    0
.xdata$x:00007BD8                 dd offset __unwindfunclet$??1CArcCmdLineOptions@@QAE@XZ$3
.xdata$x:00007BDC                 db    3
.xdata$x:00007BDD                 db    0
.xdata$x:00007BDE                 db    0
.xdata$x:00007BDF                 db    0
.xdata$x:00007BE0                 dd offset __unwindfunclet$??1CArcCmdLineOptions@@QAE@XZ$4
.xdata$x:00007BE4                 db    4
.xdata$x:00007BE5                 db    0
.xdata$x:00007BE6                 db    0
.xdata$x:00007BE7                 db    0
.xdata$x:00007BE8                 dd offset __unwindfunclet$??1CArcCmdLineOptions@@QAE@XZ$5
.xdata$x:00007BEC                 db    5
.xdata$x:00007BED                 db    0
.xdata$x:00007BEE                 db    0
.xdata$x:00007BEF                 db    0
.xdata$x:00007BF0                 dd offset __unwindfunclet$??1CArcCmdLineOptions@@QAE@XZ$6
.xdata$x:00007BF4                 db    6
.xdata$x:00007BF5                 db    0
.xdata$x:00007BF6                 db    0
.xdata$x:00007BF7                 db    0
.xdata$x:00007BF8                 dd offset __unwindfunclet$??1CArcCmdLineOptions@@QAE@XZ$7
.xdata$x:00007BFC                 db    7
.xdata$x:00007BFD                 db    0
.xdata$x:00007BFE                 db    0
.xdata$x:00007BFF                 db    0
.xdata$x:00007C00                 dd offset __unwindfunclet$??1CArcCmdLineOptions@@QAE@XZ$8
.xdata$x:00007C04                 db    8
.xdata$x:00007C05                 db    0
.xdata$x:00007C06                 db    0
.xdata$x:00007C07                 db    0
.xdata$x:00007C08                 dd offset __unwindfunclet$??1CArcCmdLineOptions@@QAE@XZ$9
.xdata$x:00007C0C                 db    9
.xdata$x:00007C0D                 db    0
.xdata$x:00007C0E                 db    0
.xdata$x:00007C0F                 db    0
.xdata$x:00007C10                 dd offset __unwindfunclet$??1CArcCmdLineOptions@@QAE@XZ$10
.xdata$x:00007C10 _xdata$x        ends
.xdata$x:00007C10
.text:00007C14 ; ===========================================================================
.text:00007C14
.text:00007C14 ; Segment type: Pure code
.text:00007C14 ; Segment permissions: Read/Execute
.text:00007C14 _text           segment para public 'CODE' use32
.text:00007C14                 assume cs:_text
.text:00007C14                 ;org 7C14h
.text:00007C14 ; COMDAT (pick any)
.text:00007C14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007C14
.text:00007C14 ; =============== S U B R O U T I N E =======================================
.text:00007C14
.text:00007C14 ; Attributes: bp-based frame
.text:00007C14
.text:00007C14 ; _DWORD __thiscall CArcCmdLineParser::~CArcCmdLineParser(CArcCmdLineParser *__hidden this)
.text:00007C14                 public ??1CArcCmdLineParser@@QAE@XZ
.text:00007C14 ??1CArcCmdLineParser@@QAE@XZ proc near  ; CODE XREF: Main2(void)+1EFp
.text:00007C14                                         ; Main2(void)+1BEFp ...
.text:00007C14
.text:00007C14 var_4           = dword ptr -4
.text:00007C14
.text:00007C14                 push    ebp
.text:00007C15                 mov     ebp, esp
.text:00007C17                 push    ecx
.text:00007C18                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007C1F                 mov     [ebp+var_4], ecx
.text:00007C22                 mov     ecx, [ebp+var_4] ; this
.text:00007C25                 call    ??1CParser@NCommandLineParser@@QAE@XZ ; NCommandLineParser::CParser::~CParser(void)
.text:00007C2A                 add     esp, 4
.text:00007C2D                 cmp     ebp, esp
.text:00007C2F                 call    __RTC_CheckEsp
.text:00007C34                 mov     esp, ebp
.text:00007C36                 pop     ebp
.text:00007C37                 retn
.text:00007C37 ??1CArcCmdLineParser@@QAE@XZ endp
.text:00007C37
.text:00007C37 _text           ends
.text:00007C37
.text:00007C38 ; ===========================================================================
.text:00007C38
.text:00007C38 ; Segment type: Pure code
.text:00007C38 ; Segment permissions: Read/Execute
.text:00007C38 _text           segment para public 'CODE' use32
.text:00007C38                 assume cs:_text
.text:00007C38                 ;org 7C38h
.text:00007C38 ; COMDAT (pick any)
.text:00007C38                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007C38
.text:00007C38 ; =============== S U B R O U T I N E =======================================
.text:00007C38
.text:00007C38 ; Attributes: bp-based frame
.text:00007C38
.text:00007C38 ; public: __thiscall CExtractScanConsole::CExtractScanConsole(void)
.text:00007C38                 public ??0CExtractScanConsole@@QAE@XZ
.text:00007C38 ??0CExtractScanConsole@@QAE@XZ proc near ; CODE XREF: Main2(void)+C0Cp
.text:00007C38
.text:00007C38 var_4           = dword ptr -4
.text:00007C38
.text:00007C38                 push    ebp
.text:00007C39                 mov     ebp, esp
.text:00007C3B                 push    ecx
.text:00007C3C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007C43                 mov     [ebp+var_4], ecx
.text:00007C46                 mov     ecx, [ebp+var_4] ; this
.text:00007C49                 call    ??0IDirItemsCallback@@QAE@XZ ; IDirItemsCallback::IDirItemsCallback(void)
.text:00007C4E                 mov     eax, [ebp+var_4]
.text:00007C51                 mov     dword ptr [eax], offset ??_7CExtractScanConsole@@6B@ ; const CExtractScanConsole::`vftable'
.text:00007C57                 push    0C8h ; '+'
.text:00007C5C                 mov     ecx, [ebp+var_4]
.text:00007C5F                 add     ecx, 10h
.text:00007C62                 call    ??0CPercentPrinter@@QAE@I@Z ; CPercentPrinter::CPercentPrinter(uint)
.text:00007C67                 mov     eax, [ebp+var_4]
.text:00007C6A                 add     esp, 4
.text:00007C6D                 cmp     ebp, esp
.text:00007C6F                 call    __RTC_CheckEsp
.text:00007C74                 mov     esp, ebp
.text:00007C76                 pop     ebp
.text:00007C77                 retn
.text:00007C77 ??0CExtractScanConsole@@QAE@XZ endp
.text:00007C77
.text:00007C77 _text           ends
.text:00007C77
.rdata:00007C78 ; ===========================================================================
.rdata:00007C78
.rdata:00007C78 ; Segment type: Pure data
.rdata:00007C78 ; Segment permissions: Read
.rdata:00007C78 _rdata          segment dword public 'DATA' use32
.rdata:00007C78                 assume cs:_rdata
.rdata:00007C78                 ;org 7C78h
.rdata:00007C78 ; COMDAT (pick largest)
.rdata:00007C78                 dd offset ??_R4CExtractScanConsole@@6B@ ; const CExtractScanConsole::`RTTI Complete Object Locator'
.rdata:00007C7C                 public ??_7CExtractScanConsole@@6B@
.rdata:00007C7C ; const CExtractScanConsole::`vftable'
.rdata:00007C7C ??_7CExtractScanConsole@@6B@ dd offset ?ScanError@CExtractScanConsole@@UAEJABVUString@@K@Z
.rdata:00007C7C                                         ; DATA XREF: CExtractScanConsole::CExtractScanConsole(void)+19o
.rdata:00007C7C                                         ; CExtractScanConsole::ScanError(UString const &,ulong)
.rdata:00007C80                 dd offset ?ScanProgress@CExtractScanConsole@@UAEJABUCDirItemsStat@@ABVUString@@_N@Z ; CExtractScanConsole::ScanProgress(CDirItemsStat const &,UString const &,bool)
.rdata:00007C80 _rdata          ends
.rdata:00007C80
.rdata$r:00007C84 ; ===========================================================================
.rdata$r:00007C84
.rdata$r:00007C84 ; Segment type: Pure data
.rdata$r:00007C84 ; Segment permissions: Read
.rdata$r:00007C84 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007C84                 assume cs:_rdata$r
.rdata$r:00007C84                 ;org 7C84h
.rdata$r:00007C84 ; COMDAT (pick any)
.rdata$r:00007C84                 public ??_R4CExtractScanConsole@@6B@
.rdata$r:00007C84 ; const CExtractScanConsole::`RTTI Complete Object Locator'
.rdata$r:00007C84 ??_R4CExtractScanConsole@@6B@ db    0   ; DATA XREF: .rdata:00007C78o
.rdata$r:00007C85                 db    0
.rdata$r:00007C86                 db    0
.rdata$r:00007C87                 db    0
.rdata$r:00007C88                 db    0
.rdata$r:00007C89                 db    0
.rdata$r:00007C8A                 db    0
.rdata$r:00007C8B                 db    0
.rdata$r:00007C8C                 db    0
.rdata$r:00007C8D                 db    0
.rdata$r:00007C8E                 db    0
.rdata$r:00007C8F                 db    0
.rdata$r:00007C90                 dd offset ??_R0?AVCExtractScanConsole@@@8 ; CExtractScanConsole `RTTI Type Descriptor'
.rdata$r:00007C94                 dd offset ??_R3CExtractScanConsole@@8 ; CExtractScanConsole::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007C94 _rdata$r        ends
.rdata$r:00007C94
.data:00007C98 ; ===========================================================================
.data:00007C98
.data:00007C98 ; Segment type: Pure data
.data:00007C98 ; Segment permissions: Read/Write
.data:00007C98 _data           segment dword public 'DATA' use32
.data:00007C98                 assume cs:_data
.data:00007C98                 ;org 7C98h
.data:00007C98 ; COMDAT (pick any)
.data:00007C98                 public ??_R0?AVCExtractScanConsole@@@8
.data:00007C98 ; class CExtractScanConsole `RTTI Type Descriptor'
.data:00007C98 ??_R0?AVCExtractScanConsole@@@8 dd offset ??_7type_info@@6B@
.data:00007C98                                         ; DATA XREF: .rdata$r:00007C90o
.data:00007C98                                         ; .rdata$r:CExtractScanConsole::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00007C98                                         ; const type_info::`vftable'
.data:00007C9C                 align 10h
.data:00007CA0 a_?avcextractsc db '.?AVCExtractScanConsole@@',0
.data:00007CBA                 align 4
.data:00007CBA _data           ends
.data:00007CBA
.rdata$r:00007CBC ; ===========================================================================
.rdata$r:00007CBC
.rdata$r:00007CBC ; Segment type: Pure data
.rdata$r:00007CBC ; Segment permissions: Read
.rdata$r:00007CBC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007CBC                 assume cs:_rdata$r
.rdata$r:00007CBC                 ;org 7CBCh
.rdata$r:00007CBC ; COMDAT (pick any)
.rdata$r:00007CBC                 public ??_R3CExtractScanConsole@@8
.rdata$r:00007CBC ; CExtractScanConsole::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007CBC ??_R3CExtractScanConsole@@8 db    0     ; DATA XREF: .rdata$r:00007C94o
.rdata$r:00007CBC                                         ; .rdata$r:00007CF0o
.rdata$r:00007CBD                 db    0
.rdata$r:00007CBE                 db    0
.rdata$r:00007CBF                 db    0
.rdata$r:00007CC0                 db    0
.rdata$r:00007CC1                 db    0
.rdata$r:00007CC2                 db    0
.rdata$r:00007CC3                 db    0
.rdata$r:00007CC4                 db    2
.rdata$r:00007CC5                 db    0
.rdata$r:00007CC6                 db    0
.rdata$r:00007CC7                 db    0
.rdata$r:00007CC8                 dd offset ??_R2CExtractScanConsole@@8 ; CExtractScanConsole::`RTTI Base Class Array'
.rdata$r:00007CC8 _rdata$r        ends
.rdata$r:00007CC8
.rdata$r:00007CCC ; ===========================================================================
.rdata$r:00007CCC
.rdata$r:00007CCC ; Segment type: Pure data
.rdata$r:00007CCC ; Segment permissions: Read
.rdata$r:00007CCC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007CCC                 assume cs:_rdata$r
.rdata$r:00007CCC                 ;org 7CCCh
.rdata$r:00007CCC ; COMDAT (pick any)
.rdata$r:00007CCC                 public ??_R2CExtractScanConsole@@8
.rdata$r:00007CCC ; CExtractScanConsole::`RTTI Base Class Array'
.rdata$r:00007CCC ??_R2CExtractScanConsole@@8 dd offset ??_R1A@?0A@EA@CExtractScanConsole@@8
.rdata$r:00007CCC                                         ; DATA XREF: .rdata$r:00007CC8o
.rdata$r:00007CCC                                         ; CExtractScanConsole::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00007CD0                 dd offset ??_R1A@?0A@EA@IDirItemsCallback@@8 ; IDirItemsCallback::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00007CD4                 db    0
.rdata$r:00007CD5                 align 4
.rdata$r:00007CD5 _rdata$r        ends
.rdata$r:00007CD5
.rdata$r:00007CD8 ; ===========================================================================
.rdata$r:00007CD8
.rdata$r:00007CD8 ; Segment type: Pure data
.rdata$r:00007CD8 ; Segment permissions: Read
.rdata$r:00007CD8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007CD8                 assume cs:_rdata$r
.rdata$r:00007CD8                 ;org 7CD8h
.rdata$r:00007CD8 ; COMDAT (pick any)
.rdata$r:00007CD8                 public ??_R1A@?0A@EA@CExtractScanConsole@@8
.rdata$r:00007CD8 ; CExtractScanConsole::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00007CD8 ??_R1A@?0A@EA@CExtractScanConsole@@8 dd offset ??_R0?AVCExtractScanConsole@@@8
.rdata$r:00007CD8                                         ; DATA XREF: .rdata$r:CExtractScanConsole::`RTTI Base Class Array'o
.rdata$r:00007CD8                                         ; CExtractScanConsole `RTTI Type Descriptor'
.rdata$r:00007CDC                 db    1
.rdata$r:00007CDD                 db    0
.rdata$r:00007CDE                 db    0
.rdata$r:00007CDF                 db    0
.rdata$r:00007CE0                 db    0
.rdata$r:00007CE1                 db    0
.rdata$r:00007CE2                 db    0
.rdata$r:00007CE3                 db    0
.rdata$r:00007CE4                 db 0FFh
.rdata$r:00007CE5                 db 0FFh
.rdata$r:00007CE6                 db 0FFh
.rdata$r:00007CE7                 db 0FFh
.rdata$r:00007CE8                 db    0
.rdata$r:00007CE9                 db    0
.rdata$r:00007CEA                 db    0
.rdata$r:00007CEB                 db    0
.rdata$r:00007CEC                 db  40h ; @
.rdata$r:00007CED                 db    0
.rdata$r:00007CEE                 db    0
.rdata$r:00007CEF                 db    0
.rdata$r:00007CF0                 dd offset ??_R3CExtractScanConsole@@8 ; CExtractScanConsole::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007CF0 _rdata$r        ends
.rdata$r:00007CF0
.text:00007CF4 ; ===========================================================================
.text:00007CF4
.text:00007CF4 ; Segment type: Pure code
.text:00007CF4 ; Segment permissions: Read/Execute
.text:00007CF4 _text           segment para public 'CODE' use32
.text:00007CF4                 assume cs:_text
.text:00007CF4                 ;org 7CF4h
.text:00007CF4 ; COMDAT (pick any)
.text:00007CF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007CF4
.text:00007CF4 ; =============== S U B R O U T I N E =======================================
.text:00007CF4
.text:00007CF4 ; Attributes: bp-based frame
.text:00007CF4
.text:00007CF4 ; _DWORD __thiscall CExtractScanConsole::~CExtractScanConsole(CExtractScanConsole *__hidden this)
.text:00007CF4                 public ??1CExtractScanConsole@@QAE@XZ
.text:00007CF4 ??1CExtractScanConsole@@QAE@XZ proc near ; CODE XREF: Main2(void)+D39p
.text:00007CF4                                         ; __unwindfunclet$?Main2@@YGHXZ$12+6j
.text:00007CF4
.text:00007CF4 var_4           = dword ptr -4
.text:00007CF4
.text:00007CF4                 push    ebp
.text:00007CF5                 mov     ebp, esp
.text:00007CF7                 push    ecx
.text:00007CF8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007CFF                 mov     [ebp+var_4], ecx
.text:00007D02                 mov     ecx, [ebp+var_4]
.text:00007D05                 add     ecx, 10h        ; this
.text:00007D08                 call    ??1CPercentPrinter@@QAE@XZ ; CPercentPrinter::~CPercentPrinter(void)
.text:00007D0D                 add     esp, 4
.text:00007D10                 cmp     ebp, esp
.text:00007D12                 call    __RTC_CheckEsp
.text:00007D17                 mov     esp, ebp
.text:00007D19                 pop     ebp
.text:00007D1A                 retn
.text:00007D1A ??1CExtractScanConsole@@QAE@XZ endp
.text:00007D1A
.text:00007D1A ; ---------------------------------------------------------------------------
.text:00007D1B                 align 4
.text:00007D1B _text           ends
.text:00007D1B
.text:00007D1C ; ===========================================================================
.text:00007D1C
.text:00007D1C ; Segment type: Pure code
.text:00007D1C ; Segment permissions: Read/Execute
.text:00007D1C _text           segment para public 'CODE' use32
.text:00007D1C                 assume cs:_text
.text:00007D1C                 ;org 7D1Ch
.text:00007D1C ; COMDAT (pick any)
.text:00007D1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007D1C
.text:00007D1C ; =============== S U B R O U T I N E =======================================
.text:00007D1C
.text:00007D1C ; Attributes: bp-based frame
.text:00007D1C
.text:00007D1C ; _DWORD __thiscall CExtractOptions::~CExtractOptions(CExtractOptions *__hidden this)
.text:00007D1C                 public ??1CExtractOptions@@QAE@XZ
.text:00007D1C ??1CExtractOptions@@QAE@XZ proc near    ; CODE XREF: Main2(void)+15F0p
.text:00007D1C                                         ; __unwindfunclet$?Main2@@YGHXZ$16+6j
.text:00007D1C
.text:00007D1C var_10          = dword ptr -10h
.text:00007D1C var_C           = dword ptr -0Ch
.text:00007D1C var_4           = dword ptr -4
.text:00007D1C
.text:00007D1C                 push    ebp
.text:00007D1D                 mov     ebp, esp
.text:00007D1F                 push    0FFFFFFFFh
.text:00007D21                 push    offset __ehhandler$??1CExtractOptions@@QAE@XZ
.text:00007D26                 mov     eax, large fs:0
.text:00007D2C                 push    eax
.text:00007D2D                 push    ecx
.text:00007D2E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00007D35                 mov     eax, dword ptr ds:___security_cookie
.text:00007D3A                 xor     eax, ebp
.text:00007D3C                 push    eax
.text:00007D3D                 lea     eax, [ebp+var_C]
.text:00007D40                 mov     large fs:0, eax
.text:00007D46                 mov     [ebp+var_10], ecx
.text:00007D49                 mov     [ebp+var_4], 0
.text:00007D50                 mov     ecx, [ebp+var_10]
.text:00007D53                 add     ecx, 28h ; '('
.text:00007D56                 call    ??1?$CObjectVector@UCProperty@@@@QAE@XZ ; CObjectVector<CProperty>::~CObjectVector<CProperty>(void)
.text:00007D5B                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00007D62                 mov     ecx, [ebp+var_10] ; this
.text:00007D65                 call    ??1CExtractOptionsBase@@QAE@XZ ; CExtractOptionsBase::~CExtractOptionsBase(void)
.text:00007D6A                 mov     ecx, [ebp+var_C]
.text:00007D6D                 mov     large fs:0, ecx
.text:00007D74                 pop     ecx
.text:00007D75                 add     esp, 10h
.text:00007D78                 cmp     ebp, esp
.text:00007D7A                 call    __RTC_CheckEsp
.text:00007D7F                 mov     esp, ebp
.text:00007D81                 pop     ebp
.text:00007D82                 retn
.text:00007D82 ??1CExtractOptions@@QAE@XZ endp
.text:00007D82
.text:00007D82 ; ---------------------------------------------------------------------------
.text:00007D83                 align 4
.text:00007D83 _text           ends
.text:00007D83
.text$x:00007D84 ; ===========================================================================
.text$x:00007D84
.text$x:00007D84 ; Segment type: Pure code
.text$x:00007D84 ; Segment permissions: Read/Execute
.text$x:00007D84 _text$x         segment para public 'CODE' use32
.text$x:00007D84                 assume cs:_text$x
.text$x:00007D84                 ;org 7D84h
.text$x:00007D84 ; COMDAT (pick associative to section at 7D1C)
.text$x:00007D84                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007D84
.text$x:00007D84 ; =============== S U B R O U T I N E =======================================
.text$x:00007D84
.text$x:00007D84
.text$x:00007D84 __unwindfunclet$??1CExtractOptions@@QAE@XZ$0 proc near
.text$x:00007D84                                         ; DATA XREF: .xdata$x:00007DACo
.text$x:00007D84                 mov     ecx, [ebp-10h]  ; this
.text$x:00007D87                 jmp     ??1CExtractOptionsBase@@QAE@XZ ; CExtractOptionsBase::~CExtractOptionsBase(void)
.text$x:00007D87 __unwindfunclet$??1CExtractOptions@@QAE@XZ$0 endp
.text$x:00007D87
.text$x:00007D8C
.text$x:00007D8C ; =============== S U B R O U T I N E =======================================
.text$x:00007D8C
.text$x:00007D8C
.text$x:00007D8C __ehhandler$??1CExtractOptions@@QAE@XZ proc near
.text$x:00007D8C                                         ; DATA XREF: CExtractOptions::~CExtractOptions(void)+5o
.text$x:00007D8C
.text$x:00007D8C arg_4           = dword ptr  8
.text$x:00007D8C
.text$x:00007D8C                 mov     edx, [esp+arg_4]
.text$x:00007D90                 lea     eax, [edx+0Ch]
.text$x:00007D93                 mov     ecx, [edx-8]
.text$x:00007D96                 xor     ecx, eax
.text$x:00007D98                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007D9D                 mov     eax, offset __ehfuncinfo$??1CExtractOptions@@QAE@XZ
.text$x:00007DA2                 jmp     ___CxxFrameHandler3
.text$x:00007DA2 __ehhandler$??1CExtractOptions@@QAE@XZ endp
.text$x:00007DA2
.text$x:00007DA2 ; ---------------------------------------------------------------------------
.text$x:00007DA7                 align 4
.text$x:00007DA7 _text$x         ends
.text$x:00007DA7
.xdata$x:00007DA8 ; ===========================================================================
.xdata$x:00007DA8
.xdata$x:00007DA8 ; Segment type: Pure data
.xdata$x:00007DA8 ; Segment permissions: Read
.xdata$x:00007DA8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007DA8                 assume cs:_xdata$x
.xdata$x:00007DA8                 ;org 7DA8h
.xdata$x:00007DA8 ; COMDAT (pick associative to section at 7D1C)
.xdata$x:00007DA8 __unwindtable$??1CExtractOptions@@QAE@XZ db 0FFh
.xdata$x:00007DA8                                         ; DATA XREF: .xdata$x:00007DB8o
.xdata$x:00007DA9                 db 0FFh
.xdata$x:00007DAA                 db 0FFh
.xdata$x:00007DAB                 db 0FFh
.xdata$x:00007DAC                 dd offset __unwindfunclet$??1CExtractOptions@@QAE@XZ$0
.xdata$x:00007DB0 __ehfuncinfo$??1CExtractOptions@@QAE@XZ db  22h ; "
.xdata$x:00007DB0                                         ; DATA XREF: __ehhandler$??1CExtractOptions@@QAE@XZ+11o
.xdata$x:00007DB1                 db    5
.xdata$x:00007DB2                 db  93h ; ô
.xdata$x:00007DB3                 db  19h
.xdata$x:00007DB4                 db    1
.xdata$x:00007DB5                 db    0
.xdata$x:00007DB6                 db    0
.xdata$x:00007DB7                 db    0
.xdata$x:00007DB8                 dd offset __unwindtable$??1CExtractOptions@@QAE@XZ
.xdata$x:00007DBC                 db    0
.xdata$x:00007DBD                 db    0
.xdata$x:00007DBE                 db    0
.xdata$x:00007DBF                 db    0
.xdata$x:00007DC0                 db    0
.xdata$x:00007DC1                 db    0
.xdata$x:00007DC2                 db    0
.xdata$x:00007DC3                 db    0
.xdata$x:00007DC4                 db    0
.xdata$x:00007DC5                 db    0
.xdata$x:00007DC6                 db    0
.xdata$x:00007DC7                 db    0
.xdata$x:00007DC8                 db    0
.xdata$x:00007DC9                 db    0
.xdata$x:00007DCA                 db    0
.xdata$x:00007DCB                 db    0
.xdata$x:00007DCC                 db    0
.xdata$x:00007DCD                 db    0
.xdata$x:00007DCE                 db    0
.xdata$x:00007DCF                 db    0
.xdata$x:00007DD0                 db    1
.xdata$x:00007DD1                 db    0
.xdata$x:00007DD2                 db    0
.xdata$x:00007DD3                 db    0
.xdata$x:00007DD3 _xdata$x        ends
.xdata$x:00007DD3
.text:00007DD4 ; ===========================================================================
.text:00007DD4
.text:00007DD4 ; Segment type: Pure code
.text:00007DD4 ; Segment permissions: Read/Execute
.text:00007DD4 _text           segment para public 'CODE' use32
.text:00007DD4                 assume cs:_text
.text:00007DD4                 ;org 7DD4h
.text:00007DD4 ; COMDAT (pick any)
.text:00007DD4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007DD4
.text:00007DD4 ; =============== S U B R O U T I N E =======================================
.text:00007DD4
.text:00007DD4 ; Attributes: bp-based frame
.text:00007DD4
.text:00007DD4 ; public: struct CExtractOptionsBase & __thiscall CExtractOptionsBase::operator=(struct CExtractOptionsBase const &)
.text:00007DD4                 public ??4CExtractOptionsBase@@QAEAAU0@ABU0@@Z
.text:00007DD4 ??4CExtractOptionsBase@@QAEAAU0@ABU0@@Z proc near
.text:00007DD4                                         ; CODE XREF: Main2(void)+E8Cp
.text:00007DD4
.text:00007DD4 var_4           = dword ptr -4
.text:00007DD4 arg_0           = dword ptr  8
.text:00007DD4
.text:00007DD4                 push    ebp
.text:00007DD5                 mov     ebp, esp
.text:00007DD7                 push    ecx
.text:00007DD8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007DDF                 mov     [ebp+var_4], ecx
.text:00007DE2                 mov     eax, [ebp+arg_0]
.text:00007DE5                 mov     cx, [eax]
.text:00007DE8                 mov     edx, [ebp+var_4]
.text:00007DEB                 mov     [edx], cx
.text:00007DEE                 mov     eax, [ebp+var_4]
.text:00007DF1                 mov     ecx, [ebp+arg_0]
.text:00007DF4                 mov     dl, [ecx+2]
.text:00007DF7                 mov     [eax+2], dl
.text:00007DFA                 mov     eax, [ebp+var_4]
.text:00007DFD                 mov     ecx, [ebp+arg_0]
.text:00007E00                 mov     dl, [ecx+3]
.text:00007E03                 mov     [eax+3], dl
.text:00007E06                 mov     eax, [ebp+var_4]
.text:00007E09                 mov     ecx, [ebp+arg_0]
.text:00007E0C                 mov     edx, [ecx+4]
.text:00007E0F                 mov     [eax+4], edx
.text:00007E12                 mov     eax, [ebp+var_4]
.text:00007E15                 mov     ecx, [ebp+arg_0]
.text:00007E18                 mov     edx, [ecx+8]
.text:00007E1B                 mov     [eax+8], edx
.text:00007E1E                 mov     eax, [ebp+arg_0]
.text:00007E21                 add     eax, 0Ch
.text:00007E24                 push    eax
.text:00007E25                 mov     ecx, [ebp+var_4]
.text:00007E28                 add     ecx, 0Ch
.text:00007E2B                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:00007E30                 mov     ecx, [ebp+arg_0]
.text:00007E33                 add     ecx, 18h
.text:00007E36                 mov     edx, [ebp+var_4]
.text:00007E39                 add     edx, 18h
.text:00007E3C                 mov     eax, [ecx]
.text:00007E3E                 mov     [edx], eax
.text:00007E40                 mov     eax, [ecx+4]
.text:00007E43                 mov     [edx+4], eax
.text:00007E46                 mov     cx, [ecx+8]
.text:00007E4A                 mov     [edx+8], cx
.text:00007E4E                 mov     eax, [ebp+var_4]
.text:00007E51                 add     esp, 4
.text:00007E54                 cmp     ebp, esp
.text:00007E56                 call    __RTC_CheckEsp
.text:00007E5B                 mov     esp, ebp
.text:00007E5D                 pop     ebp
.text:00007E5E                 retn    4
.text:00007E5E ??4CExtractOptionsBase@@QAEAAU0@ABU0@@Z endp
.text:00007E5E
.text:00007E5E ; ---------------------------------------------------------------------------
.text:00007E61                 align 4
.text:00007E61 _text           ends
.text:00007E61
.text:00007E64 ; ===========================================================================
.text:00007E64
.text:00007E64 ; Segment type: Pure code
.text:00007E64 ; Segment permissions: Read/Execute
.text:00007E64 _text           segment para public 'CODE' use32
.text:00007E64                 assume cs:_text
.text:00007E64                 ;org 7E64h
.text:00007E64 ; COMDAT (pick any)
.text:00007E64                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007E64
.text:00007E64 ; =============== S U B R O U T I N E =======================================
.text:00007E64
.text:00007E64 ; Attributes: bp-based frame
.text:00007E64
.text:00007E64 ; public: __thiscall CHashBundle::CHashBundle(void)
.text:00007E64                 public ??0CHashBundle@@QAE@XZ
.text:00007E64 ??0CHashBundle@@QAE@XZ proc near        ; CODE XREF: Main2(void)+EEDp
.text:00007E64
.text:00007E64 var_4           = dword ptr -4
.text:00007E64
.text:00007E64                 push    ebp
.text:00007E65                 mov     ebp, esp
.text:00007E67                 push    ecx
.text:00007E68                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007E6F                 mov     [ebp+var_4], ecx
.text:00007E72                 mov     ecx, [ebp+var_4] ; this
.text:00007E75                 call    ??0IHashCalc@@QAE@XZ ; IHashCalc::IHashCalc(void)
.text:00007E7A                 mov     eax, [ebp+var_4]
.text:00007E7D                 mov     dword ptr [eax], offset ??_7CHashBundle@@6B@ ; const CHashBundle::`vftable'
.text:00007E83                 mov     ecx, [ebp+var_4]
.text:00007E86                 add     ecx, 4
.text:00007E89                 call    ??0?$CObjectVector@UCHasherState@@@@QAE@XZ ; CObjectVector<CHasherState>::CObjectVector<CHasherState>(void)
.text:00007E8E                 mov     eax, [ebp+var_4]
.text:00007E91                 add     esp, 4
.text:00007E94                 cmp     ebp, esp
.text:00007E96                 call    __RTC_CheckEsp
.text:00007E9B                 mov     esp, ebp
.text:00007E9D                 pop     ebp
.text:00007E9E                 retn
.text:00007E9E ??0CHashBundle@@QAE@XZ endp
.text:00007E9E
.text:00007E9E ; ---------------------------------------------------------------------------
.text:00007E9F                 align 10h
.text:00007E9F _text           ends
.text:00007E9F
.rdata:00007EA0 ; ===========================================================================
.rdata:00007EA0
.rdata:00007EA0 ; Segment type: Pure data
.rdata:00007EA0 ; Segment permissions: Read
.rdata:00007EA0 _rdata          segment dword public 'DATA' use32
.rdata:00007EA0                 assume cs:_rdata
.rdata:00007EA0                 ;org 7EA0h
.rdata:00007EA0 ; COMDAT (pick largest)
.rdata:00007EA0                 dd offset ??_R4CHashBundle@@6B@ ; const CHashBundle::`RTTI Complete Object Locator'
.rdata:00007EA4                 public ??_7CHashBundle@@6B@
.rdata:00007EA4 ; const CHashBundle::`vftable'
.rdata:00007EA4 ??_7CHashBundle@@6B@ dd offset ?InitForNewFile@CHashBundle@@UAEXXZ
.rdata:00007EA4                                         ; DATA XREF: CHashBundle::CHashBundle(void)+19o
.rdata:00007EA4                                         ; CHashBundle::InitForNewFile(void)
.rdata:00007EA8                 dd offset ?Update@CHashBundle@@UAEXPBXI@Z ; CHashBundle::Update(void const *,uint)
.rdata:00007EAC                 dd offset ?SetSize@CHashBundle@@UAEX_K@Z ; CHashBundle::SetSize(unsigned __int64)
.rdata:00007EB0                 dd offset ?Final@CHashBundle@@UAEX_N0ABVUString@@@Z ; CHashBundle::Final(bool,bool,UString const &)
.rdata:00007EB0 _rdata          ends
.rdata:00007EB0
.rdata$r:00007EB4 ; ===========================================================================
.rdata$r:00007EB4
.rdata$r:00007EB4 ; Segment type: Pure data
.rdata$r:00007EB4 ; Segment permissions: Read
.rdata$r:00007EB4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007EB4                 assume cs:_rdata$r
.rdata$r:00007EB4                 ;org 7EB4h
.rdata$r:00007EB4 ; COMDAT (pick any)
.rdata$r:00007EB4                 public ??_R4CHashBundle@@6B@
.rdata$r:00007EB4 ; const CHashBundle::`RTTI Complete Object Locator'
.rdata$r:00007EB4 ??_R4CHashBundle@@6B@ db    0           ; DATA XREF: .rdata:00007EA0o
.rdata$r:00007EB5                 db    0
.rdata$r:00007EB6                 db    0
.rdata$r:00007EB7                 db    0
.rdata$r:00007EB8                 db    0
.rdata$r:00007EB9                 db    0
.rdata$r:00007EBA                 db    0
.rdata$r:00007EBB                 db    0
.rdata$r:00007EBC                 db    0
.rdata$r:00007EBD                 db    0
.rdata$r:00007EBE                 db    0
.rdata$r:00007EBF                 db    0
.rdata$r:00007EC0                 dd offset ??_R0?AUCHashBundle@@@8 ; CHashBundle `RTTI Type Descriptor'
.rdata$r:00007EC4                 dd offset ??_R3CHashBundle@@8 ; CHashBundle::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007EC4 _rdata$r        ends
.rdata$r:00007EC4
.data:00007EC8 ; ===========================================================================
.data:00007EC8
.data:00007EC8 ; Segment type: Pure data
.data:00007EC8 ; Segment permissions: Read/Write
.data:00007EC8 _data           segment dword public 'DATA' use32
.data:00007EC8                 assume cs:_data
.data:00007EC8                 ;org 7EC8h
.data:00007EC8 ; COMDAT (pick any)
.data:00007EC8                 public ??_R0?AUCHashBundle@@@8
.data:00007EC8 ; struct CHashBundle `RTTI Type Descriptor'
.data:00007EC8 ??_R0?AUCHashBundle@@@8 dd offset ??_7type_info@@6B@
.data:00007EC8                                         ; DATA XREF: .rdata$r:00007EC0o
.data:00007EC8                                         ; .rdata$r:CHashBundle::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00007EC8                                         ; const type_info::`vftable'
.data:00007ECC                 align 10h
.data:00007ED0 a_?auchashbundl db '.?AUCHashBundle@@',0
.data:00007EE2                 align 4
.data:00007EE2 _data           ends
.data:00007EE2
.rdata$r:00007EE4 ; ===========================================================================
.rdata$r:00007EE4
.rdata$r:00007EE4 ; Segment type: Pure data
.rdata$r:00007EE4 ; Segment permissions: Read
.rdata$r:00007EE4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007EE4                 assume cs:_rdata$r
.rdata$r:00007EE4                 ;org 7EE4h
.rdata$r:00007EE4 ; COMDAT (pick any)
.rdata$r:00007EE4                 public ??_R3CHashBundle@@8
.rdata$r:00007EE4 ; CHashBundle::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007EE4 ??_R3CHashBundle@@8 db    0             ; DATA XREF: .rdata$r:00007EC4o
.rdata$r:00007EE4                                         ; .rdata$r:00007F18o
.rdata$r:00007EE5                 db    0
.rdata$r:00007EE6                 db    0
.rdata$r:00007EE7                 db    0
.rdata$r:00007EE8                 db    0
.rdata$r:00007EE9                 db    0
.rdata$r:00007EEA                 db    0
.rdata$r:00007EEB                 db    0
.rdata$r:00007EEC                 db    2
.rdata$r:00007EED                 db    0
.rdata$r:00007EEE                 db    0
.rdata$r:00007EEF                 db    0
.rdata$r:00007EF0                 dd offset ??_R2CHashBundle@@8 ; CHashBundle::`RTTI Base Class Array'
.rdata$r:00007EF0 _rdata$r        ends
.rdata$r:00007EF0
.rdata$r:00007EF4 ; ===========================================================================
.rdata$r:00007EF4
.rdata$r:00007EF4 ; Segment type: Pure data
.rdata$r:00007EF4 ; Segment permissions: Read
.rdata$r:00007EF4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007EF4                 assume cs:_rdata$r
.rdata$r:00007EF4                 ;org 7EF4h
.rdata$r:00007EF4 ; COMDAT (pick any)
.rdata$r:00007EF4                 public ??_R2CHashBundle@@8
.rdata$r:00007EF4 ; CHashBundle::`RTTI Base Class Array'
.rdata$r:00007EF4 ??_R2CHashBundle@@8 dd offset ??_R1A@?0A@EA@CHashBundle@@8
.rdata$r:00007EF4                                         ; DATA XREF: .rdata$r:00007EF0o
.rdata$r:00007EF4                                         ; CHashBundle::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00007EF8                 dd offset ??_R1A@?0A@EA@IHashCalc@@8 ; IHashCalc::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00007EFC                 db    0
.rdata$r:00007EFD                 align 10h
.rdata$r:00007EFD _rdata$r        ends
.rdata$r:00007EFD
.rdata$r:00007F00 ; ===========================================================================
.rdata$r:00007F00
.rdata$r:00007F00 ; Segment type: Pure data
.rdata$r:00007F00 ; Segment permissions: Read
.rdata$r:00007F00 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007F00                 assume cs:_rdata$r
.rdata$r:00007F00                 ;org 7F00h
.rdata$r:00007F00 ; COMDAT (pick any)
.rdata$r:00007F00                 public ??_R1A@?0A@EA@CHashBundle@@8
.rdata$r:00007F00 ; CHashBundle::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00007F00 ??_R1A@?0A@EA@CHashBundle@@8 dd offset ??_R0?AUCHashBundle@@@8
.rdata$r:00007F00                                         ; DATA XREF: .rdata$r:CHashBundle::`RTTI Base Class Array'o
.rdata$r:00007F00                                         ; CHashBundle `RTTI Type Descriptor'
.rdata$r:00007F04                 db    1
.rdata$r:00007F05                 db    0
.rdata$r:00007F06                 db    0
.rdata$r:00007F07                 db    0
.rdata$r:00007F08                 db    0
.rdata$r:00007F09                 db    0
.rdata$r:00007F0A                 db    0
.rdata$r:00007F0B                 db    0
.rdata$r:00007F0C                 db 0FFh
.rdata$r:00007F0D                 db 0FFh
.rdata$r:00007F0E                 db 0FFh
.rdata$r:00007F0F                 db 0FFh
.rdata$r:00007F10                 db    0
.rdata$r:00007F11                 db    0
.rdata$r:00007F12                 db    0
.rdata$r:00007F13                 db    0
.rdata$r:00007F14                 db  40h ; @
.rdata$r:00007F15                 db    0
.rdata$r:00007F16                 db    0
.rdata$r:00007F17                 db    0
.rdata$r:00007F18                 dd offset ??_R3CHashBundle@@8 ; CHashBundle::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007F18 _rdata$r        ends
.rdata$r:00007F18
.rdata$r:00007F1C ; ===========================================================================
.rdata$r:00007F1C
.rdata$r:00007F1C ; Segment type: Pure data
.rdata$r:00007F1C ; Segment permissions: Read
.rdata$r:00007F1C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007F1C                 assume cs:_rdata$r
.rdata$r:00007F1C                 ;org 7F1Ch
.rdata$r:00007F1C ; COMDAT (pick any)
.rdata$r:00007F1C                 public ??_R1A@?0A@EA@IHashCalc@@8
.rdata$r:00007F1C ; IHashCalc::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00007F1C ??_R1A@?0A@EA@IHashCalc@@8 dd offset ??_R0?AUIHashCalc@@@8
.rdata$r:00007F1C                                         ; DATA XREF: .rdata$r:00007EF8o
.rdata$r:00007F1C                                         ; .rdata$r:IHashCalc::`RTTI Base Class Array'o
.rdata$r:00007F1C                                         ; IHashCalc `RTTI Type Descriptor'
.rdata$r:00007F20                 db    0
.rdata$r:00007F21                 db    0
.rdata$r:00007F22                 db    0
.rdata$r:00007F23                 db    0
.rdata$r:00007F24                 db    0
.rdata$r:00007F25                 db    0
.rdata$r:00007F26                 db    0
.rdata$r:00007F27                 db    0
.rdata$r:00007F28                 db 0FFh
.rdata$r:00007F29                 db 0FFh
.rdata$r:00007F2A                 db 0FFh
.rdata$r:00007F2B                 db 0FFh
.rdata$r:00007F2C                 db    0
.rdata$r:00007F2D                 db    0
.rdata$r:00007F2E                 db    0
.rdata$r:00007F2F                 db    0
.rdata$r:00007F30                 db  40h ; @
.rdata$r:00007F31                 db    0
.rdata$r:00007F32                 db    0
.rdata$r:00007F33                 db    0
.rdata$r:00007F34                 dd offset ??_R3IHashCalc@@8 ; IHashCalc::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007F34 _rdata$r        ends
.rdata$r:00007F34
.data:00007F38 ; ===========================================================================
.data:00007F38
.data:00007F38 ; Segment type: Pure data
.data:00007F38 ; Segment permissions: Read/Write
.data:00007F38 _data           segment dword public 'DATA' use32
.data:00007F38                 assume cs:_data
.data:00007F38                 ;org 7F38h
.data:00007F38 ; COMDAT (pick any)
.data:00007F38                 public ??_R0?AUIHashCalc@@@8
.data:00007F38 ; struct IHashCalc `RTTI Type Descriptor'
.data:00007F38 ??_R0?AUIHashCalc@@@8 dd offset ??_7type_info@@6B@
.data:00007F38                                         ; DATA XREF: .rdata$r:IHashCalc::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00007F38                                         ; .rdata$r:00008154o
.data:00007F38                                         ; const type_info::`vftable'
.data:00007F3C                 align 10h
.data:00007F40 a_?auihashcalc@ db '.?AUIHashCalc@@',0
.data:00007F40 _data           ends
.data:00007F40
.rdata$r:00007F50 ; ===========================================================================
.rdata$r:00007F50
.rdata$r:00007F50 ; Segment type: Pure data
.rdata$r:00007F50 ; Segment permissions: Read
.rdata$r:00007F50 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007F50                 assume cs:_rdata$r
.rdata$r:00007F50                 ;org 7F50h
.rdata$r:00007F50 ; COMDAT (pick any)
.rdata$r:00007F50                 public ??_R3IHashCalc@@8
.rdata$r:00007F50 ; IHashCalc::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007F50 ??_R3IHashCalc@@8 db    0               ; DATA XREF: .rdata$r:00007F34o
.rdata$r:00007F50                                         ; .rdata$r:00008158o
.rdata$r:00007F51                 db    0
.rdata$r:00007F52                 db    0
.rdata$r:00007F53                 db    0
.rdata$r:00007F54                 db    0
.rdata$r:00007F55                 db    0
.rdata$r:00007F56                 db    0
.rdata$r:00007F57                 db    0
.rdata$r:00007F58                 db    1
.rdata$r:00007F59                 db    0
.rdata$r:00007F5A                 db    0
.rdata$r:00007F5B                 db    0
.rdata$r:00007F5C                 dd offset ??_R2IHashCalc@@8 ; IHashCalc::`RTTI Base Class Array'
.rdata$r:00007F5C _rdata$r        ends
.rdata$r:00007F5C
.rdata$r:00007F60 ; ===========================================================================
.rdata$r:00007F60
.rdata$r:00007F60 ; Segment type: Pure data
.rdata$r:00007F60 ; Segment permissions: Read
.rdata$r:00007F60 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007F60                 assume cs:_rdata$r
.rdata$r:00007F60                 ;org 7F60h
.rdata$r:00007F60 ; COMDAT (pick any)
.rdata$r:00007F60                 public ??_R2IHashCalc@@8
.rdata$r:00007F60 ; IHashCalc::`RTTI Base Class Array'
.rdata$r:00007F60 ??_R2IHashCalc@@8 dd offset ??_R1A@?0A@EA@IHashCalc@@8
.rdata$r:00007F60                                         ; DATA XREF: .rdata$r:00007F5Co
.rdata$r:00007F60                                         ; IHashCalc::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00007F64                 db    0
.rdata$r:00007F65                 align 4
.rdata$r:00007F65 _rdata$r        ends
.rdata$r:00007F65
.text:00007F68 ; ===========================================================================
.text:00007F68
.text:00007F68 ; Segment type: Pure code
.text:00007F68 ; Segment permissions: Read/Execute
.text:00007F68 _text           segment para public 'CODE' use32
.text:00007F68                 assume cs:_text
.text:00007F68                 ;org 7F68h
.text:00007F68 ; COMDAT (pick any)
.text:00007F68                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007F68
.text:00007F68 ; =============== S U B R O U T I N E =======================================
.text:00007F68
.text:00007F68 ; Attributes: bp-based frame
.text:00007F68
.text:00007F68 ; _DWORD __thiscall CHashBundle::~CHashBundle(CHashBundle *__hidden this)
.text:00007F68                 public ??1CHashBundle@@QAE@XZ
.text:00007F68 ??1CHashBundle@@QAE@XZ proc near        ; CODE XREF: Main2(void)+15D2p
.text:00007F68                                         ; __unwindfunclet$?Main2@@YGHXZ$18+6j
.text:00007F68
.text:00007F68 var_4           = dword ptr -4
.text:00007F68
.text:00007F68                 push    ebp
.text:00007F69                 mov     ebp, esp
.text:00007F6B                 push    ecx
.text:00007F6C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007F73                 mov     [ebp+var_4], ecx
.text:00007F76                 mov     ecx, [ebp+var_4]
.text:00007F79                 add     ecx, 4
.text:00007F7C                 call    ??1?$CObjectVector@UCHasherState@@@@QAE@XZ ; CObjectVector<CHasherState>::~CObjectVector<CHasherState>(void)
.text:00007F81                 add     esp, 4
.text:00007F84                 cmp     ebp, esp
.text:00007F86                 call    __RTC_CheckEsp
.text:00007F8B                 mov     esp, ebp
.text:00007F8D                 pop     ebp
.text:00007F8E                 retn
.text:00007F8E ??1CHashBundle@@QAE@XZ endp
.text:00007F8E
.text:00007F8E ; ---------------------------------------------------------------------------
.text:00007F8F                 align 10h
.text:00007F8F _text           ends
.text:00007F8F
.text:00007F90 ; ===========================================================================
.text:00007F90
.text:00007F90 ; Segment type: Pure code
.text:00007F90 ; Segment permissions: Read/Execute
.text:00007F90 _text           segment para public 'CODE' use32
.text:00007F90                 assume cs:_text
.text:00007F90                 ;org 7F90h
.text:00007F90 ; COMDAT (pick any)
.text:00007F90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007F90
.text:00007F90 ; =============== S U B R O U T I N E =======================================
.text:00007F90
.text:00007F90 ; Attributes: bp-based frame
.text:00007F90
.text:00007F90 ; _DWORD __thiscall CUpdateCallbackConsole::~CUpdateCallbackConsole(CUpdateCallbackConsole *__hidden this)
.text:00007F90                 public ??1CUpdateCallbackConsole@@QAE@XZ
.text:00007F90 ??1CUpdateCallbackConsole@@QAE@XZ proc near ; CODE XREF: Main2(void)+1A1Bp
.text:00007F90                                         ; __unwindfunclet$?Main2@@YGHXZ$20+6j
.text:00007F90
.text:00007F90 var_10          = dword ptr -10h
.text:00007F90 var_C           = dword ptr -0Ch
.text:00007F90 var_4           = dword ptr -4
.text:00007F90
.text:00007F90                 push    ebp
.text:00007F91                 mov     ebp, esp
.text:00007F93                 push    0FFFFFFFFh
.text:00007F95                 push    offset __ehhandler$??1CUpdateCallbackConsole@@QAE@XZ
.text:00007F9A                 mov     eax, large fs:0
.text:00007FA0                 push    eax
.text:00007FA1                 push    ecx
.text:00007FA2                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00007FA9                 mov     eax, dword ptr ds:___security_cookie
.text:00007FAE                 xor     eax, ebp
.text:00007FB0                 push    eax
.text:00007FB1                 lea     eax, [ebp+var_C]
.text:00007FB4                 mov     large fs:0, eax
.text:00007FBA                 mov     [ebp+var_10], ecx
.text:00007FBD                 mov     [ebp+var_4], 0
.text:00007FC4                 mov     ecx, [ebp+var_10]
.text:00007FC7                 add     ecx, 11Ch       ; this
.text:00007FCD                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00007FD2                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00007FD9                 mov     ecx, [ebp+var_10]
.text:00007FDC                 add     ecx, 8          ; this
.text:00007FDF                 call    ??1CCallbackConsoleBase@@QAE@XZ ; CCallbackConsoleBase::~CCallbackConsoleBase(void)
.text:00007FE4                 mov     ecx, [ebp+var_C]
.text:00007FE7                 mov     large fs:0, ecx
.text:00007FEE                 pop     ecx
.text:00007FEF                 add     esp, 10h
.text:00007FF2                 cmp     ebp, esp
.text:00007FF4                 call    __RTC_CheckEsp
.text:00007FF9                 mov     esp, ebp
.text:00007FFB                 pop     ebp
.text:00007FFC                 retn
.text:00007FFC ??1CUpdateCallbackConsole@@QAE@XZ endp
.text:00007FFC
.text:00007FFC ; ---------------------------------------------------------------------------
.text:00007FFD                 align 10h
.text:00007FFD _text           ends
.text:00007FFD
.text$x:00008000 ; ===========================================================================
.text$x:00008000
.text$x:00008000 ; Segment type: Pure code
.text$x:00008000 ; Segment permissions: Read/Execute
.text$x:00008000 _text$x         segment para public 'CODE' use32
.text$x:00008000                 assume cs:_text$x
.text$x:00008000                 ;org 8000h
.text$x:00008000 ; COMDAT (pick associative to section at 7F90)
.text$x:00008000                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008000
.text$x:00008000 ; =============== S U B R O U T I N E =======================================
.text$x:00008000
.text$x:00008000
.text$x:00008000 __unwindfunclet$??1CUpdateCallbackConsole@@QAE@XZ$0 proc near
.text$x:00008000                                         ; DATA XREF: .xdata$x:0000802Co
.text$x:00008000                 mov     ecx, [ebp-10h]
.text$x:00008003                 add     ecx, 8          ; this
.text$x:00008006                 jmp     ??1CCallbackConsoleBase@@QAE@XZ ; CCallbackConsoleBase::~CCallbackConsoleBase(void)
.text$x:00008006 __unwindfunclet$??1CUpdateCallbackConsole@@QAE@XZ$0 endp
.text$x:00008006
.text$x:0000800B
.text$x:0000800B ; =============== S U B R O U T I N E =======================================
.text$x:0000800B
.text$x:0000800B
.text$x:0000800B __ehhandler$??1CUpdateCallbackConsole@@QAE@XZ proc near
.text$x:0000800B                                         ; DATA XREF: CUpdateCallbackConsole::~CUpdateCallbackConsole(void)+5o
.text$x:0000800B
.text$x:0000800B arg_4           = dword ptr  8
.text$x:0000800B
.text$x:0000800B                 mov     edx, [esp+arg_4]
.text$x:0000800F                 lea     eax, [edx+0Ch]
.text$x:00008012                 mov     ecx, [edx-8]
.text$x:00008015                 xor     ecx, eax
.text$x:00008017                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000801C                 mov     eax, offset __ehfuncinfo$??1CUpdateCallbackConsole@@QAE@XZ
.text$x:00008021                 jmp     ___CxxFrameHandler3
.text$x:00008021 __ehhandler$??1CUpdateCallbackConsole@@QAE@XZ endp
.text$x:00008021
.text$x:00008021 ; ---------------------------------------------------------------------------
.text$x:00008026                 align 4
.text$x:00008026 _text$x         ends
.text$x:00008026
.xdata$x:00008028 ; ===========================================================================
.xdata$x:00008028
.xdata$x:00008028 ; Segment type: Pure data
.xdata$x:00008028 ; Segment permissions: Read
.xdata$x:00008028 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008028                 assume cs:_xdata$x
.xdata$x:00008028                 ;org 8028h
.xdata$x:00008028 ; COMDAT (pick associative to section at 7F90)
.xdata$x:00008028 __unwindtable$??1CUpdateCallbackConsole@@QAE@XZ db 0FFh
.xdata$x:00008028                                         ; DATA XREF: .xdata$x:00008038o
.xdata$x:00008029                 db 0FFh
.xdata$x:0000802A                 db 0FFh
.xdata$x:0000802B                 db 0FFh
.xdata$x:0000802C                 dd offset __unwindfunclet$??1CUpdateCallbackConsole@@QAE@XZ$0
.xdata$x:00008030 __ehfuncinfo$??1CUpdateCallbackConsole@@QAE@XZ db  22h ; "
.xdata$x:00008030                                         ; DATA XREF: __ehhandler$??1CUpdateCallbackConsole@@QAE@XZ+11o
.xdata$x:00008031                 db    5
.xdata$x:00008032                 db  93h ; ô
.xdata$x:00008033                 db  19h
.xdata$x:00008034                 db    1
.xdata$x:00008035                 db    0
.xdata$x:00008036                 db    0
.xdata$x:00008037                 db    0
.xdata$x:00008038                 dd offset __unwindtable$??1CUpdateCallbackConsole@@QAE@XZ
.xdata$x:0000803C                 db    0
.xdata$x:0000803D                 db    0
.xdata$x:0000803E                 db    0
.xdata$x:0000803F                 db    0
.xdata$x:00008040                 db    0
.xdata$x:00008041                 db    0
.xdata$x:00008042                 db    0
.xdata$x:00008043                 db    0
.xdata$x:00008044                 db    0
.xdata$x:00008045                 db    0
.xdata$x:00008046                 db    0
.xdata$x:00008047                 db    0
.xdata$x:00008048                 db    0
.xdata$x:00008049                 db    0
.xdata$x:0000804A                 db    0
.xdata$x:0000804B                 db    0
.xdata$x:0000804C                 db    0
.xdata$x:0000804D                 db    0
.xdata$x:0000804E                 db    0
.xdata$x:0000804F                 db    0
.xdata$x:00008050                 db    1
.xdata$x:00008051                 db    0
.xdata$x:00008052                 db    0
.xdata$x:00008053                 db    0
.xdata$x:00008053 _xdata$x        ends
.xdata$x:00008053
.text:00008054 ; ===========================================================================
.text:00008054
.text:00008054 ; Segment type: Pure code
.text:00008054 ; Segment permissions: Read/Execute
.text:00008054 _text           segment para public 'CODE' use32
.text:00008054                 assume cs:_text
.text:00008054                 ;org 8054h
.text:00008054 ; COMDAT (pick any)
.text:00008054                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008054
.text:00008054 ; =============== S U B R O U T I N E =======================================
.text:00008054
.text:00008054 ; Attributes: bp-based frame
.text:00008054
.text:00008054 ; _DWORD __thiscall CUpdateErrorInfo::~CUpdateErrorInfo(CUpdateErrorInfo *__hidden this)
.text:00008054                 public ??1CUpdateErrorInfo@@QAE@XZ
.text:00008054 ??1CUpdateErrorInfo@@QAE@XZ proc near   ; CODE XREF: Main2(void)+1A0Cp
.text:00008054                                         ; Main2(void)+1B54p ...
.text:00008054
.text:00008054 var_10          = dword ptr -10h
.text:00008054 var_C           = dword ptr -0Ch
.text:00008054 var_4           = dword ptr -4
.text:00008054
.text:00008054                 push    ebp
.text:00008055                 mov     ebp, esp
.text:00008057                 push    0FFFFFFFFh
.text:00008059                 push    offset __ehhandler$??1CUpdateErrorInfo@@QAE@XZ
.text:0000805E                 mov     eax, large fs:0
.text:00008064                 push    eax
.text:00008065                 push    ecx
.text:00008066                 mov     [ebp+var_10], 0CCCCCCCCh
.text:0000806D                 mov     eax, dword ptr ds:___security_cookie
.text:00008072                 xor     eax, ebp
.text:00008074                 push    eax
.text:00008075                 lea     eax, [ebp+var_C]
.text:00008078                 mov     large fs:0, eax
.text:0000807E                 mov     [ebp+var_10], ecx
.text:00008081                 mov     [ebp+var_4], 0
.text:00008088                 mov     ecx, [ebp+var_10]
.text:0000808B                 add     ecx, 10h
.text:0000808E                 call    ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text:00008093                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000809A                 mov     ecx, [ebp+var_10]
.text:0000809D                 add     ecx, 4          ; this
.text:000080A0                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:000080A5                 mov     ecx, [ebp+var_C]
.text:000080A8                 mov     large fs:0, ecx
.text:000080AF                 pop     ecx
.text:000080B0                 add     esp, 10h
.text:000080B3                 cmp     ebp, esp
.text:000080B5                 call    __RTC_CheckEsp
.text:000080BA                 mov     esp, ebp
.text:000080BC                 pop     ebp
.text:000080BD                 retn
.text:000080BD ??1CUpdateErrorInfo@@QAE@XZ endp
.text:000080BD
.text:000080BD ; ---------------------------------------------------------------------------
.text:000080BE                 align 10h
.text:000080BE _text           ends
.text:000080BE
.text$x:000080C0 ; ===========================================================================
.text$x:000080C0
.text$x:000080C0 ; Segment type: Pure code
.text$x:000080C0 ; Segment permissions: Read/Execute
.text$x:000080C0 _text$x         segment para public 'CODE' use32
.text$x:000080C0                 assume cs:_text$x
.text$x:000080C0                 ;org 80C0h
.text$x:000080C0 ; COMDAT (pick associative to section at 8054)
.text$x:000080C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000080C0
.text$x:000080C0 ; =============== S U B R O U T I N E =======================================
.text$x:000080C0
.text$x:000080C0
.text$x:000080C0 __unwindfunclet$??1CUpdateErrorInfo@@QAE@XZ$0 proc near
.text$x:000080C0                                         ; DATA XREF: .xdata$x:000080ECo
.text$x:000080C0                 mov     ecx, [ebp-10h]
.text$x:000080C3                 add     ecx, 4          ; this
.text$x:000080C6                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:000080C6 __unwindfunclet$??1CUpdateErrorInfo@@QAE@XZ$0 endp
.text$x:000080C6
.text$x:000080CB
.text$x:000080CB ; =============== S U B R O U T I N E =======================================
.text$x:000080CB
.text$x:000080CB
.text$x:000080CB __ehhandler$??1CUpdateErrorInfo@@QAE@XZ proc near
.text$x:000080CB                                         ; DATA XREF: CUpdateErrorInfo::~CUpdateErrorInfo(void)+5o
.text$x:000080CB
.text$x:000080CB arg_4           = dword ptr  8
.text$x:000080CB
.text$x:000080CB                 mov     edx, [esp+arg_4]
.text$x:000080CF                 lea     eax, [edx+0Ch]
.text$x:000080D2                 mov     ecx, [edx-8]
.text$x:000080D5                 xor     ecx, eax
.text$x:000080D7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000080DC                 mov     eax, offset __ehfuncinfo$??1CUpdateErrorInfo@@QAE@XZ
.text$x:000080E1                 jmp     ___CxxFrameHandler3
.text$x:000080E1 __ehhandler$??1CUpdateErrorInfo@@QAE@XZ endp
.text$x:000080E1
.text$x:000080E1 ; ---------------------------------------------------------------------------
.text$x:000080E6                 align 4
.text$x:000080E6 _text$x         ends
.text$x:000080E6
.xdata$x:000080E8 ; ===========================================================================
.xdata$x:000080E8
.xdata$x:000080E8 ; Segment type: Pure data
.xdata$x:000080E8 ; Segment permissions: Read
.xdata$x:000080E8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000080E8                 assume cs:_xdata$x
.xdata$x:000080E8                 ;org 80E8h
.xdata$x:000080E8 ; COMDAT (pick associative to section at 8054)
.xdata$x:000080E8 __unwindtable$??1CUpdateErrorInfo@@QAE@XZ db 0FFh
.xdata$x:000080E8                                         ; DATA XREF: .xdata$x:000080F8o
.xdata$x:000080E9                 db 0FFh
.xdata$x:000080EA                 db 0FFh
.xdata$x:000080EB                 db 0FFh
.xdata$x:000080EC                 dd offset __unwindfunclet$??1CUpdateErrorInfo@@QAE@XZ$0
.xdata$x:000080F0 __ehfuncinfo$??1CUpdateErrorInfo@@QAE@XZ db  22h ; "
.xdata$x:000080F0                                         ; DATA XREF: __ehhandler$??1CUpdateErrorInfo@@QAE@XZ+11o
.xdata$x:000080F1                 db    5
.xdata$x:000080F2                 db  93h ; ô
.xdata$x:000080F3                 db  19h
.xdata$x:000080F4                 db    1
.xdata$x:000080F5                 db    0
.xdata$x:000080F6                 db    0
.xdata$x:000080F7                 db    0
.xdata$x:000080F8                 dd offset __unwindtable$??1CUpdateErrorInfo@@QAE@XZ
.xdata$x:000080FC                 db    0
.xdata$x:000080FD                 db    0
.xdata$x:000080FE                 db    0
.xdata$x:000080FF                 db    0
.xdata$x:00008100                 db    0
.xdata$x:00008101                 db    0
.xdata$x:00008102                 db    0
.xdata$x:00008103                 db    0
.xdata$x:00008104                 db    0
.xdata$x:00008105                 db    0
.xdata$x:00008106                 db    0
.xdata$x:00008107                 db    0
.xdata$x:00008108                 db    0
.xdata$x:00008109                 db    0
.xdata$x:0000810A                 db    0
.xdata$x:0000810B                 db    0
.xdata$x:0000810C                 db    0
.xdata$x:0000810D                 db    0
.xdata$x:0000810E                 db    0
.xdata$x:0000810F                 db    0
.xdata$x:00008110                 db    1
.xdata$x:00008111                 db    0
.xdata$x:00008112                 db    0
.xdata$x:00008113                 db    0
.xdata$x:00008113 _xdata$x        ends
.xdata$x:00008113
.text:00008114 ; ===========================================================================
.text:00008114
.text:00008114 ; Segment type: Pure code
.text:00008114 ; Segment permissions: Read/Execute
.text:00008114 _text           segment para public 'CODE' use32
.text:00008114                 assume cs:_text
.text:00008114                 ;org 8114h
.text:00008114 ; COMDAT (pick any)
.text:00008114                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008114
.text:00008114 ; =============== S U B R O U T I N E =======================================
.text:00008114
.text:00008114 ; Attributes: bp-based frame
.text:00008114
.text:00008114 ; _DWORD __thiscall IHashCalc::IHashCalc(IHashCalc *__hidden this)
.text:00008114                 public ??0IHashCalc@@QAE@XZ
.text:00008114 ??0IHashCalc@@QAE@XZ proc near          ; CODE XREF: CHashBundle::CHashBundle(void)+11p
.text:00008114
.text:00008114 var_4           = dword ptr -4
.text:00008114
.text:00008114                 push    ebp
.text:00008115                 mov     ebp, esp
.text:00008117                 push    ecx
.text:00008118                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000811F                 mov     [ebp+var_4], ecx
.text:00008122                 mov     eax, [ebp+var_4]
.text:00008125                 mov     dword ptr [eax], offset ??_7IHashCalc@@6B@ ; const IHashCalc::`vftable'
.text:0000812B                 mov     eax, [ebp+var_4]
.text:0000812E                 mov     esp, ebp
.text:00008130                 pop     ebp
.text:00008131                 retn
.text:00008131 ??0IHashCalc@@QAE@XZ endp
.text:00008131
.text:00008131 ; ---------------------------------------------------------------------------
.text:00008132                 align 4
.text:00008132 _text           ends
.text:00008132
.rdata:00008134 ; ===========================================================================
.rdata:00008134
.rdata:00008134 ; Segment type: Pure data
.rdata:00008134 ; Segment permissions: Read
.rdata:00008134 _rdata          segment dword public 'DATA' use32
.rdata:00008134                 assume cs:_rdata
.rdata:00008134                 ;org 8134h
.rdata:00008134 ; COMDAT (pick largest)
.rdata:00008134                 dd offset ??_R4IHashCalc@@6B@ ; const IHashCalc::`RTTI Complete Object Locator'
.rdata:00008138                 public ??_7IHashCalc@@6B@
.rdata:00008138 ; const IHashCalc::`vftable'
.rdata:00008138 ??_7IHashCalc@@6B@ dd offset __purecall ; DATA XREF: IHashCalc::IHashCalc(void)+11o
.rdata:0000813C                 dd offset __purecall
.rdata:00008140                 dd offset __purecall
.rdata:00008144                 dd offset __purecall
.rdata:00008144 _rdata          ends
.rdata:00008144
.rdata$r:00008148 ; ===========================================================================
.rdata$r:00008148
.rdata$r:00008148 ; Segment type: Pure data
.rdata$r:00008148 ; Segment permissions: Read
.rdata$r:00008148 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008148                 assume cs:_rdata$r
.rdata$r:00008148                 ;org 8148h
.rdata$r:00008148 ; COMDAT (pick any)
.rdata$r:00008148                 public ??_R4IHashCalc@@6B@
.rdata$r:00008148 ; const IHashCalc::`RTTI Complete Object Locator'
.rdata$r:00008148 ??_R4IHashCalc@@6B@ db    0             ; DATA XREF: .rdata:00008134o
.rdata$r:00008149                 db    0
.rdata$r:0000814A                 db    0
.rdata$r:0000814B                 db    0
.rdata$r:0000814C                 db    0
.rdata$r:0000814D                 db    0
.rdata$r:0000814E                 db    0
.rdata$r:0000814F                 db    0
.rdata$r:00008150                 db    0
.rdata$r:00008151                 db    0
.rdata$r:00008152                 db    0
.rdata$r:00008153                 db    0
.rdata$r:00008154                 dd offset ??_R0?AUIHashCalc@@@8 ; IHashCalc `RTTI Type Descriptor'
.rdata$r:00008158                 dd offset ??_R3IHashCalc@@8 ; IHashCalc::`RTTI Class Hierarchy Descriptor'
.rdata$r:00008158 _rdata$r        ends
.rdata$r:00008158
.text:0000815C ; ===========================================================================
.text:0000815C
.text:0000815C ; Segment type: Pure code
.text:0000815C ; Segment permissions: Read/Execute
.text:0000815C _text           segment para public 'CODE' use32
.text:0000815C                 assume cs:_text
.text:0000815C                 ;org 815Ch
.text:0000815C ; COMDAT (pick any)
.text:0000815C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000815C
.text:0000815C ; =============== S U B R O U T I N E =======================================
.text:0000815C
.text:0000815C ; Attributes: bp-based frame
.text:0000815C
.text:0000815C ; public: unsigned int __thiscall CObjectVector<class UString>::Size(void)const
.text:0000815C                 public ?Size@?$CObjectVector@VUString@@@@QBEIXZ
.text:0000815C ?Size@?$CObjectVector@VUString@@@@QBEIXZ proc near
.text:0000815C                                         ; CODE XREF: Main2(void)+9Ep
.text:0000815C                                         ; Main2(void)+449p ...
.text:0000815C
.text:0000815C var_4           = dword ptr -4
.text:0000815C
.text:0000815C                 push    ebp
.text:0000815D                 mov     ebp, esp
.text:0000815F                 push    ecx
.text:00008160                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008167                 mov     [ebp+var_4], ecx
.text:0000816A                 mov     ecx, [ebp+var_4]
.text:0000816D                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00008172                 add     esp, 4
.text:00008175                 cmp     ebp, esp
.text:00008177                 call    __RTC_CheckEsp
.text:0000817C                 mov     esp, ebp
.text:0000817E                 pop     ebp
.text:0000817F                 retn
.text:0000817F ?Size@?$CObjectVector@VUString@@@@QBEIXZ endp
.text:0000817F
.text:0000817F _text           ends
.text:0000817F
.text:00008180 ; ===========================================================================
.text:00008180
.text:00008180 ; Segment type: Pure code
.text:00008180 ; Segment permissions: Read/Execute
.text:00008180 _text           segment para public 'CODE' use32
.text:00008180                 assume cs:_text
.text:00008180                 ;org 8180h
.text:00008180 ; COMDAT (pick any)
.text:00008180                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008180
.text:00008180 ; =============== S U B R O U T I N E =======================================
.text:00008180
.text:00008180 ; Attributes: bp-based frame
.text:00008180
.text:00008180 ; public: bool __thiscall CObjectVector<class UString>::IsEmpty(void)const
.text:00008180                 public ?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ
.text:00008180 ?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ proc near
.text:00008180                                         ; CODE XREF: Main2(void)+F06p
.text:00008180                                         ; CUpdateErrorInfo::ThereIsError(void)+37p
.text:00008180
.text:00008180 var_4           = dword ptr -4
.text:00008180
.text:00008180                 push    ebp
.text:00008181                 mov     ebp, esp
.text:00008183                 push    ecx
.text:00008184                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000818B                 mov     [ebp+var_4], ecx
.text:0000818E                 mov     ecx, [ebp+var_4]
.text:00008191                 call    ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ ; CRecordVector<void *>::IsEmpty(void)
.text:00008196                 add     esp, 4
.text:00008199                 cmp     ebp, esp
.text:0000819B                 call    __RTC_CheckEsp
.text:000081A0                 mov     esp, ebp
.text:000081A2                 pop     ebp
.text:000081A3                 retn
.text:000081A3 ?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ endp
.text:000081A3
.text:000081A3 _text           ends
.text:000081A3
.text:000081A4 ; ===========================================================================
.text:000081A4
.text:000081A4 ; Segment type: Pure code
.text:000081A4 ; Segment permissions: Read/Execute
.text:000081A4 _text           segment para public 'CODE' use32
.text:000081A4                 assume cs:_text
.text:000081A4                 ;org 81A4h
.text:000081A4 ; COMDAT (pick any)
.text:000081A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000081A4
.text:000081A4 ; =============== S U B R O U T I N E =======================================
.text:000081A4
.text:000081A4 ; Attributes: bp-based frame
.text:000081A4
.text:000081A4 ; public: __thiscall CObjectVector<class UString>::CObjectVector<class UString>(void)
.text:000081A4                 public ??0?$CObjectVector@VUString@@@@QAE@XZ
.text:000081A4 ??0?$CObjectVector@VUString@@@@QAE@XZ proc near ; CODE XREF: Main2(void)+51p
.text:000081A4                                         ; Main2(void)+BBAp ...
.text:000081A4
.text:000081A4 var_4           = dword ptr -4
.text:000081A4
.text:000081A4                 push    ebp
.text:000081A5                 mov     ebp, esp
.text:000081A7                 push    ecx
.text:000081A8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000081AF                 mov     [ebp+var_4], ecx
.text:000081B2                 mov     ecx, [ebp+var_4]
.text:000081B5                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:000081BA                 mov     eax, [ebp+var_4]
.text:000081BD                 add     esp, 4
.text:000081C0                 cmp     ebp, esp
.text:000081C2                 call    __RTC_CheckEsp
.text:000081C7                 mov     esp, ebp
.text:000081C9                 pop     ebp
.text:000081CA                 retn
.text:000081CA ??0?$CObjectVector@VUString@@@@QAE@XZ endp
.text:000081CA
.text:000081CA ; ---------------------------------------------------------------------------
.text:000081CB                 align 4
.text:000081CB _text           ends
.text:000081CB
.text:000081CC ; ===========================================================================
.text:000081CC
.text:000081CC ; Segment type: Pure code
.text:000081CC ; Segment permissions: Read/Execute
.text:000081CC _text           segment para public 'CODE' use32
.text:000081CC                 assume cs:_text
.text:000081CC                 ;org 81CCh
.text:000081CC ; COMDAT (pick any)
.text:000081CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000081CC
.text:000081CC ; =============== S U B R O U T I N E =======================================
.text:000081CC
.text:000081CC ; Attributes: bp-based frame
.text:000081CC
.text:000081CC ; public: class UString const & __thiscall CObjectVector<class UString>::operator[](unsigned int)const
.text:000081CC                 public ??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z
.text:000081CC ??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z proc near
.text:000081CC                                         ; CODE XREF: WarningsCheck(long,CCallbackConsoleBase const &,CUpdateErrorInfo const &,CStdOutStream &,bool)+14Cp
.text:000081CC                                         ; PrintWarningsPaths(CErrorPathCodes const &,CStdOutStream &)+6Bp
.text:000081CC
.text:000081CC var_4           = dword ptr -4
.text:000081CC arg_0           = dword ptr  8
.text:000081CC
.text:000081CC                 push    ebp
.text:000081CD                 mov     ebp, esp
.text:000081CF                 push    ecx
.text:000081D0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000081D7                 mov     [ebp+var_4], ecx
.text:000081DA                 mov     eax, [ebp+arg_0]
.text:000081DD                 push    eax
.text:000081DE                 mov     ecx, [ebp+var_4]
.text:000081E1                 call    ??A?$CRecordVector@PAX@@QBEABQAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:000081E6                 mov     eax, [eax]
.text:000081E8                 add     esp, 4
.text:000081EB                 cmp     ebp, esp
.text:000081ED                 call    __RTC_CheckEsp
.text:000081F2                 mov     esp, ebp
.text:000081F4                 pop     ebp
.text:000081F5                 retn    4
.text:000081F5 ??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z endp
.text:000081F5
.text:000081F5 _text           ends
.text:000081F5
.text:000081F8 ; ===========================================================================
.text:000081F8
.text:000081F8 ; Segment type: Pure code
.text:000081F8 ; Segment permissions: Read/Execute
.text:000081F8 _text           segment para public 'CODE' use32
.text:000081F8                 assume cs:_text
.text:000081F8                 ;org 81F8h
.text:000081F8 ; COMDAT (pick any)
.text:000081F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000081F8
.text:000081F8 ; =============== S U B R O U T I N E =======================================
.text:000081F8
.text:000081F8 ; Attributes: bp-based frame
.text:000081F8
.text:000081F8 ; public: class UString & __thiscall CObjectVector<class UString>::operator[](unsigned int)
.text:000081F8                 public ??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z
.text:000081F8 ??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z proc near
.text:000081F8                                         ; CODE XREF: Main2(void)+47Ap
.text:000081F8
.text:000081F8 var_4           = dword ptr -4
.text:000081F8 arg_0           = dword ptr  8
.text:000081F8
.text:000081F8                 push    ebp
.text:000081F9                 mov     ebp, esp
.text:000081FB                 push    ecx
.text:000081FC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008203                 mov     [ebp+var_4], ecx
.text:00008206                 mov     eax, [ebp+arg_0]
.text:00008209                 push    eax
.text:0000820A                 mov     ecx, [ebp+var_4]
.text:0000820D                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00008212                 mov     eax, [eax]
.text:00008214                 add     esp, 4
.text:00008217                 cmp     ebp, esp
.text:00008219                 call    __RTC_CheckEsp
.text:0000821E                 mov     esp, ebp
.text:00008220                 pop     ebp
.text:00008221                 retn    4
.text:00008221 ??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z endp
.text:00008221
.text:00008221 _text           ends
.text:00008221
.text:00008224 ; ===========================================================================
.text:00008224
.text:00008224 ; Segment type: Pure code
.text:00008224 ; Segment permissions: Read/Execute
.text:00008224 _text           segment para public 'CODE' use32
.text:00008224                 assume cs:_text
.text:00008224                 ;org 8224h
.text:00008224 ; COMDAT (pick any)
.text:00008224                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008224
.text:00008224 ; =============== S U B R O U T I N E =======================================
.text:00008224
.text:00008224 ; Attributes: bp-based frame
.text:00008224
.text:00008224 ; public: unsigned int __thiscall CObjectVector<class UString>::Add(class UString const &)
.text:00008224                 public ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
.text:00008224 ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z proc near
.text:00008224                                         ; CODE XREF: Main2(void)+BEAp
.text:00008224                                         ; Main2(void)+BFCp
.text:00008224
.text:00008224 var_1C          = dword ptr -1Ch
.text:00008224 var_18          = dword ptr -18h
.text:00008224 var_14          = dword ptr -14h
.text:00008224 var_10          = dword ptr -10h
.text:00008224 var_C           = dword ptr -0Ch
.text:00008224 var_4           = dword ptr -4
.text:00008224 arg_0           = dword ptr  8
.text:00008224
.text:00008224                 push    ebp
.text:00008225                 mov     ebp, esp
.text:00008227                 push    0FFFFFFFFh
.text:00008229                 push    offset __ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
.text:0000822E                 mov     eax, large fs:0
.text:00008234                 push    eax
.text:00008235                 sub     esp, 10h
.text:00008238                 mov     eax, 0CCCCCCCCh
.text:0000823D                 mov     [ebp+var_1C], eax
.text:00008240                 mov     [ebp+var_18], eax
.text:00008243                 mov     [ebp+var_14], eax
.text:00008246                 mov     [ebp+var_10], eax
.text:00008249                 mov     eax, dword ptr ds:___security_cookie
.text:0000824E                 xor     eax, ebp
.text:00008250                 push    eax
.text:00008251                 lea     eax, [ebp+var_C]
.text:00008254                 mov     large fs:0, eax
.text:0000825A                 mov     [ebp+var_10], ecx
.text:0000825D                 push    0Ch             ; unsigned int
.text:0000825F                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00008264                 add     esp, 4
.text:00008267                 mov     [ebp+var_18], eax
.text:0000826A                 mov     [ebp+var_4], 0
.text:00008271                 cmp     [ebp+var_18], 0
.text:00008275                 jz      short loc_8288
.text:00008277                 mov     eax, [ebp+arg_0]
.text:0000827A                 push    eax
.text:0000827B                 mov     ecx, [ebp+var_18]
.text:0000827E                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:00008283                 mov     [ebp+var_1C], eax
.text:00008286                 jmp     short loc_828F
.text:00008288 ; ---------------------------------------------------------------------------
.text:00008288
.text:00008288 loc_8288:                               ; CODE XREF: CObjectVector<UString>::Add(UString const &)+51j
.text:00008288                 mov     [ebp+var_1C], 0
.text:0000828F
.text:0000828F loc_828F:                               ; CODE XREF: CObjectVector<UString>::Add(UString const &)+62j
.text:0000828F                 mov     ecx, [ebp+var_1C]
.text:00008292                 mov     [ebp+var_14], ecx
.text:00008295                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000829C                 mov     edx, [ebp+var_14]
.text:0000829F                 push    edx
.text:000082A0                 mov     ecx, [ebp+var_10]
.text:000082A3                 call    ?Add@?$CRecordVector@PAX@@QAEIQAX@Z ; CRecordVector<void *>::Add(void * const)
.text:000082A8                 mov     ecx, [ebp+var_C]
.text:000082AB                 mov     large fs:0, ecx
.text:000082B2                 pop     ecx
.text:000082B3                 add     esp, 1Ch
.text:000082B6                 cmp     ebp, esp
.text:000082B8                 call    __RTC_CheckEsp
.text:000082BD                 mov     esp, ebp
.text:000082BF                 pop     ebp
.text:000082C0                 retn    4
.text:000082C0 ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z endp
.text:000082C0
.text:000082C0 ; ---------------------------------------------------------------------------
.text:000082C3                 align 4
.text:000082C3 _text           ends
.text:000082C3
.text$x:000082C4 ; ===========================================================================
.text$x:000082C4
.text$x:000082C4 ; Segment type: Pure code
.text$x:000082C4 ; Segment permissions: Read/Execute
.text$x:000082C4 _text$x         segment para public 'CODE' use32
.text$x:000082C4                 assume cs:_text$x
.text$x:000082C4                 ;org 82C4h
.text$x:000082C4 ; COMDAT (pick associative to section at 8224)
.text$x:000082C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000082C4
.text$x:000082C4 ; =============== S U B R O U T I N E =======================================
.text$x:000082C4
.text$x:000082C4
.text$x:000082C4 __unwindfunclet$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z$0 proc near
.text$x:000082C4                                         ; DATA XREF: .xdata$x:000082F0o
.text$x:000082C4                 mov     eax, [ebp-18h]
.text$x:000082C7                 push    eax             ; void *
.text$x:000082C8                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000082CD                 pop     ecx
.text$x:000082CE                 retn
.text$x:000082CE __unwindfunclet$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z$0 endp
.text$x:000082CE
.text$x:000082CF
.text$x:000082CF ; =============== S U B R O U T I N E =======================================
.text$x:000082CF
.text$x:000082CF
.text$x:000082CF __ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z proc near
.text$x:000082CF                                         ; DATA XREF: CObjectVector<UString>::Add(UString const &)+5o
.text$x:000082CF
.text$x:000082CF arg_4           = dword ptr  8
.text$x:000082CF
.text$x:000082CF                 mov     edx, [esp+arg_4]
.text$x:000082D3                 lea     eax, [edx+0Ch]
.text$x:000082D6                 mov     ecx, [edx-14h]
.text$x:000082D9                 xor     ecx, eax
.text$x:000082DB                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000082E0                 mov     eax, offset __ehfuncinfo$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
.text$x:000082E5                 jmp     ___CxxFrameHandler3
.text$x:000082E5 __ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z endp
.text$x:000082E5
.text$x:000082E5 ; ---------------------------------------------------------------------------
.text$x:000082EA                 align 4
.text$x:000082EA _text$x         ends
.text$x:000082EA
.xdata$x:000082EC ; ===========================================================================
.xdata$x:000082EC
.xdata$x:000082EC ; Segment type: Pure data
.xdata$x:000082EC ; Segment permissions: Read
.xdata$x:000082EC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000082EC                 assume cs:_xdata$x
.xdata$x:000082EC                 ;org 82ECh
.xdata$x:000082EC ; COMDAT (pick associative to section at 8224)
.xdata$x:000082EC __unwindtable$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z db 0FFh
.xdata$x:000082EC                                         ; DATA XREF: .xdata$x:000082FCo
.xdata$x:000082ED                 db 0FFh
.xdata$x:000082EE                 db 0FFh
.xdata$x:000082EF                 db 0FFh
.xdata$x:000082F0                 dd offset __unwindfunclet$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z$0
.xdata$x:000082F4 __ehfuncinfo$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z db  22h ; "
.xdata$x:000082F4                                         ; DATA XREF: __ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z+11o
.xdata$x:000082F5                 db    5
.xdata$x:000082F6                 db  93h ; ô
.xdata$x:000082F7                 db  19h
.xdata$x:000082F8                 db    1
.xdata$x:000082F9                 db    0
.xdata$x:000082FA                 db    0
.xdata$x:000082FB                 db    0
.xdata$x:000082FC                 dd offset __unwindtable$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
.xdata$x:00008300                 db    0
.xdata$x:00008301                 db    0
.xdata$x:00008302                 db    0
.xdata$x:00008303                 db    0
.xdata$x:00008304                 db    0
.xdata$x:00008305                 db    0
.xdata$x:00008306                 db    0
.xdata$x:00008307                 db    0
.xdata$x:00008308                 db    0
.xdata$x:00008309                 db    0
.xdata$x:0000830A                 db    0
.xdata$x:0000830B                 db    0
.xdata$x:0000830C                 db    0
.xdata$x:0000830D                 db    0
.xdata$x:0000830E                 db    0
.xdata$x:0000830F                 db    0
.xdata$x:00008310                 db    0
.xdata$x:00008311                 db    0
.xdata$x:00008312                 db    0
.xdata$x:00008313                 db    0
.xdata$x:00008314                 db    1
.xdata$x:00008315                 db    0
.xdata$x:00008316                 db    0
.xdata$x:00008317                 db    0
.xdata$x:00008317 _xdata$x        ends
.xdata$x:00008317
.text:00008318 ; ===========================================================================
.text:00008318
.text:00008318 ; Segment type: Pure code
.text:00008318 ; Segment permissions: Read/Execute
.text:00008318 _text           segment para public 'CODE' use32
.text:00008318                 assume cs:_text
.text:00008318                 ;org 8318h
.text:00008318 ; COMDAT (pick any)
.text:00008318                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008318
.text:00008318 ; =============== S U B R O U T I N E =======================================
.text:00008318
.text:00008318 ; Attributes: bp-based frame
.text:00008318
.text:00008318 ; public: __thiscall CObjectVector<class UString>::~CObjectVector<class UString>(void)
.text:00008318                 public ??1?$CObjectVector@VUString@@@@QAE@XZ
.text:00008318 ??1?$CObjectVector@VUString@@@@QAE@XZ proc near ; CODE XREF: Main2(void)+CAp
.text:00008318                                         ; Main2(void)+20Dp ...
.text:00008318
.text:00008318 var_20          = dword ptr -20h
.text:00008318 var_1C          = dword ptr -1Ch
.text:00008318 var_18          = dword ptr -18h
.text:00008318 var_14          = dword ptr -14h
.text:00008318 var_10          = dword ptr -10h
.text:00008318 var_C           = dword ptr -0Ch
.text:00008318 var_4           = dword ptr -4
.text:00008318
.text:00008318                 push    ebp
.text:00008319                 mov     ebp, esp
.text:0000831B                 push    0FFFFFFFFh
.text:0000831D                 push    offset __ehhandler$??1?$CObjectVector@VUString@@@@QAE@XZ
.text:00008322                 mov     eax, large fs:0
.text:00008328                 push    eax
.text:00008329                 sub     esp, 14h
.text:0000832C                 mov     eax, 0CCCCCCCCh
.text:00008331                 mov     [ebp+var_20], eax
.text:00008334                 mov     [ebp+var_1C], eax
.text:00008337                 mov     [ebp+var_18], eax
.text:0000833A                 mov     [ebp+var_14], eax
.text:0000833D                 mov     [ebp+var_10], eax
.text:00008340                 mov     eax, dword ptr ds:___security_cookie
.text:00008345                 xor     eax, ebp
.text:00008347                 push    eax
.text:00008348                 lea     eax, [ebp+var_C]
.text:0000834B                 mov     large fs:0, eax
.text:00008351                 mov     [ebp+var_10], ecx
.text:00008354                 mov     [ebp+var_4], 0
.text:0000835B                 mov     ecx, [ebp+var_10]
.text:0000835E                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00008363                 mov     [ebp+var_14], eax
.text:00008366
.text:00008366 loc_8366:                               ; CODE XREF: CObjectVector<UString>::~CObjectVector<UString>(void):loc_83A8j
.text:00008366                 cmp     [ebp+var_14], 0
.text:0000836A                 jz      short loc_83AA
.text:0000836C                 mov     eax, [ebp+var_14]
.text:0000836F                 sub     eax, 1
.text:00008372                 mov     [ebp+var_14], eax
.text:00008375                 mov     ecx, [ebp+var_14]
.text:00008378                 push    ecx
.text:00008379                 mov     ecx, [ebp+var_10]
.text:0000837C                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00008381                 mov     edx, [eax]
.text:00008383                 mov     [ebp+var_1C], edx
.text:00008386                 mov     eax, [ebp+var_1C]
.text:00008389                 mov     [ebp+var_18], eax
.text:0000838C                 cmp     [ebp+var_18], 0
.text:00008390                 jz      short loc_83A1
.text:00008392                 push    1
.text:00008394                 mov     ecx, [ebp+var_18]
.text:00008397                 call    ??_GUString@@QAEPAXI@Z ; UString::`scalar deleting destructor'(uint)
.text:0000839C                 mov     [ebp+var_20], eax
.text:0000839F                 jmp     short loc_83A8
.text:000083A1 ; ---------------------------------------------------------------------------
.text:000083A1
.text:000083A1 loc_83A1:                               ; CODE XREF: CObjectVector<UString>::~CObjectVector<UString>(void)+78j
.text:000083A1                 mov     [ebp+var_20], 0
.text:000083A8
.text:000083A8 loc_83A8:                               ; CODE XREF: CObjectVector<UString>::~CObjectVector<UString>(void)+87j
.text:000083A8                 jmp     short loc_8366
.text:000083AA ; ---------------------------------------------------------------------------
.text:000083AA
.text:000083AA loc_83AA:                               ; CODE XREF: CObjectVector<UString>::~CObjectVector<UString>(void)+52j
.text:000083AA                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000083B1                 mov     ecx, [ebp+var_10]
.text:000083B4                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:000083B9                 mov     ecx, [ebp+var_C]
.text:000083BC                 mov     large fs:0, ecx
.text:000083C3                 pop     ecx
.text:000083C4                 add     esp, 20h
.text:000083C7                 cmp     ebp, esp
.text:000083C9                 call    __RTC_CheckEsp
.text:000083CE                 mov     esp, ebp
.text:000083D0                 pop     ebp
.text:000083D1                 retn
.text:000083D1 ??1?$CObjectVector@VUString@@@@QAE@XZ endp
.text:000083D1
.text:000083D1 ; ---------------------------------------------------------------------------
.text:000083D2                 align 4
.text:000083D2 _text           ends
.text:000083D2
.text$x:000083D4 ; ===========================================================================
.text$x:000083D4
.text$x:000083D4 ; Segment type: Pure code
.text$x:000083D4 ; Segment permissions: Read/Execute
.text$x:000083D4 _text$x         segment para public 'CODE' use32
.text$x:000083D4                 assume cs:_text$x
.text$x:000083D4                 ;org 83D4h
.text$x:000083D4 ; COMDAT (pick associative to section at 8318)
.text$x:000083D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000083D4
.text$x:000083D4 ; =============== S U B R O U T I N E =======================================
.text$x:000083D4
.text$x:000083D4
.text$x:000083D4 __unwindfunclet$??1?$CObjectVector@VUString@@@@QAE@XZ$0 proc near
.text$x:000083D4                                         ; DATA XREF: .xdata$x:000083FCo
.text$x:000083D4                 mov     ecx, [ebp-10h]
.text$x:000083D7                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:000083D7 __unwindfunclet$??1?$CObjectVector@VUString@@@@QAE@XZ$0 endp
.text$x:000083D7
.text$x:000083DC
.text$x:000083DC ; =============== S U B R O U T I N E =======================================
.text$x:000083DC
.text$x:000083DC
.text$x:000083DC __ehhandler$??1?$CObjectVector@VUString@@@@QAE@XZ proc near
.text$x:000083DC                                         ; DATA XREF: CObjectVector<UString>::~CObjectVector<UString>(void)+5o
.text$x:000083DC
.text$x:000083DC arg_4           = dword ptr  8
.text$x:000083DC
.text$x:000083DC                 mov     edx, [esp+arg_4]
.text$x:000083E0                 lea     eax, [edx+0Ch]
.text$x:000083E3                 mov     ecx, [edx-18h]
.text$x:000083E6                 xor     ecx, eax
.text$x:000083E8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000083ED                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@VUString@@@@QAE@XZ
.text$x:000083F2                 jmp     ___CxxFrameHandler3
.text$x:000083F2 __ehhandler$??1?$CObjectVector@VUString@@@@QAE@XZ endp
.text$x:000083F2
.text$x:000083F2 ; ---------------------------------------------------------------------------
.text$x:000083F7                 align 4
.text$x:000083F7 _text$x         ends
.text$x:000083F7
.xdata$x:000083F8 ; ===========================================================================
.xdata$x:000083F8
.xdata$x:000083F8 ; Segment type: Pure data
.xdata$x:000083F8 ; Segment permissions: Read
.xdata$x:000083F8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000083F8                 assume cs:_xdata$x
.xdata$x:000083F8                 ;org 83F8h
.xdata$x:000083F8 ; COMDAT (pick associative to section at 8318)
.xdata$x:000083F8 __unwindtable$??1?$CObjectVector@VUString@@@@QAE@XZ db 0FFh
.xdata$x:000083F8                                         ; DATA XREF: .xdata$x:00008408o
.xdata$x:000083F9                 db 0FFh
.xdata$x:000083FA                 db 0FFh
.xdata$x:000083FB                 db 0FFh
.xdata$x:000083FC                 dd offset __unwindfunclet$??1?$CObjectVector@VUString@@@@QAE@XZ$0
.xdata$x:00008400 __ehfuncinfo$??1?$CObjectVector@VUString@@@@QAE@XZ db  22h ; "
.xdata$x:00008400                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@VUString@@@@QAE@XZ+11o
.xdata$x:00008401                 db    5
.xdata$x:00008402                 db  93h ; ô
.xdata$x:00008403                 db  19h
.xdata$x:00008404                 db    1
.xdata$x:00008405                 db    0
.xdata$x:00008406                 db    0
.xdata$x:00008407                 db    0
.xdata$x:00008408                 dd offset __unwindtable$??1?$CObjectVector@VUString@@@@QAE@XZ
.xdata$x:0000840C                 align 20h
.xdata$x:00008420                 db    1
.xdata$x:00008421                 db    0
.xdata$x:00008422                 db    0
.xdata$x:00008423                 db    0
.xdata$x:00008423 _xdata$x        ends
.xdata$x:00008423
.text:00008424 ; ===========================================================================
.text:00008424
.text:00008424 ; Segment type: Pure code
.text:00008424 ; Segment permissions: Read/Execute
.text:00008424 _text           segment para public 'CODE' use32
.text:00008424                 assume cs:_text
.text:00008424                 ;org 8424h
.text:00008424 ; COMDAT (pick any)
.text:00008424                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008424
.text:00008424 ; =============== S U B R O U T I N E =======================================
.text:00008424
.text:00008424 ; Attributes: bp-based frame
.text:00008424
.text:00008424 ; public: void __thiscall CObjectVector<class UString>::Clear(void)
.text:00008424                 public ?Clear@?$CObjectVector@VUString@@@@QAEXXZ
.text:00008424 ?Clear@?$CObjectVector@VUString@@@@QAEXXZ proc near
.text:00008424                                         ; CODE XREF: CErrorPathCodes::Clear(void)+11p
.text:00008424
.text:00008424 var_14          = dword ptr -14h
.text:00008424 var_10          = dword ptr -10h
.text:00008424 var_C           = dword ptr -0Ch
.text:00008424 var_8           = dword ptr -8
.text:00008424 var_4           = dword ptr -4
.text:00008424
.text:00008424                 push    ebp
.text:00008425                 mov     ebp, esp
.text:00008427                 sub     esp, 14h
.text:0000842A                 mov     eax, 0CCCCCCCCh
.text:0000842F                 mov     [ebp+var_14], eax
.text:00008432                 mov     [ebp+var_10], eax
.text:00008435                 mov     [ebp+var_C], eax
.text:00008438                 mov     [ebp+var_8], eax
.text:0000843B                 mov     [ebp+var_4], eax
.text:0000843E                 mov     [ebp+var_4], ecx
.text:00008441                 mov     ecx, [ebp+var_4]
.text:00008444                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00008449                 mov     [ebp+var_8], eax
.text:0000844C
.text:0000844C loc_844C:                               ; CODE XREF: CObjectVector<UString>::Clear(void):loc_848Ej
.text:0000844C                 cmp     [ebp+var_8], 0
.text:00008450                 jz      short loc_8490
.text:00008452                 mov     eax, [ebp+var_8]
.text:00008455                 sub     eax, 1
.text:00008458                 mov     [ebp+var_8], eax
.text:0000845B                 mov     ecx, [ebp+var_8]
.text:0000845E                 push    ecx
.text:0000845F                 mov     ecx, [ebp+var_4]
.text:00008462                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00008467                 mov     edx, [eax]
.text:00008469                 mov     [ebp+var_10], edx
.text:0000846C                 mov     eax, [ebp+var_10]
.text:0000846F                 mov     [ebp+var_C], eax
.text:00008472                 cmp     [ebp+var_C], 0
.text:00008476                 jz      short loc_8487
.text:00008478                 push    1
.text:0000847A                 mov     ecx, [ebp+var_C]
.text:0000847D                 call    ??_GUString@@QAEPAXI@Z ; UString::`scalar deleting destructor'(uint)
.text:00008482                 mov     [ebp+var_14], eax
.text:00008485                 jmp     short loc_848E
.text:00008487 ; ---------------------------------------------------------------------------
.text:00008487
.text:00008487 loc_8487:                               ; CODE XREF: CObjectVector<UString>::Clear(void)+52j
.text:00008487                 mov     [ebp+var_14], 0
.text:0000848E
.text:0000848E loc_848E:                               ; CODE XREF: CObjectVector<UString>::Clear(void)+61j
.text:0000848E                 jmp     short loc_844C
.text:00008490 ; ---------------------------------------------------------------------------
.text:00008490
.text:00008490 loc_8490:                               ; CODE XREF: CObjectVector<UString>::Clear(void)+2Cj
.text:00008490                 mov     ecx, [ebp+var_4]
.text:00008493                 call    ?Clear@?$CRecordVector@PAX@@QAEXXZ ; CRecordVector<void *>::Clear(void)
.text:00008498                 add     esp, 14h
.text:0000849B                 cmp     ebp, esp
.text:0000849D                 call    __RTC_CheckEsp
.text:000084A2                 mov     esp, ebp
.text:000084A4                 pop     ebp
.text:000084A5                 retn
.text:000084A5 ?Clear@?$CObjectVector@VUString@@@@QAEXXZ endp
.text:000084A5
.text:000084A5 ; ---------------------------------------------------------------------------
.text:000084A6                 align 4
.text:000084A6 _text           ends
.text:000084A6
.text:000084A8 ; ===========================================================================
.text:000084A8
.text:000084A8 ; Segment type: Pure code
.text:000084A8 ; Segment permissions: Read/Execute
.text:000084A8 _text           segment para public 'CODE' use32
.text:000084A8                 assume cs:_text
.text:000084A8                 ;org 84A8h
.text:000084A8 ; COMDAT (pick any)
.text:000084A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000084A8
.text:000084A8 ; =============== S U B R O U T I N E =======================================
.text:000084A8
.text:000084A8 ; Attributes: bp-based frame
.text:000084A8
.text:000084A8 ; public: void __thiscall CObjectVector<class UString>::Delete(unsigned int)
.text:000084A8                 public ?Delete@?$CObjectVector@VUString@@@@QAEXI@Z
.text:000084A8 ?Delete@?$CObjectVector@VUString@@@@QAEXI@Z proc near
.text:000084A8                                         ; CODE XREF: Main2(void)+DFp
.text:000084A8
.text:000084A8 var_10          = dword ptr -10h
.text:000084A8 var_C           = dword ptr -0Ch
.text:000084A8 var_8           = dword ptr -8
.text:000084A8 var_4           = dword ptr -4
.text:000084A8 arg_0           = dword ptr  8
.text:000084A8
.text:000084A8                 push    ebp
.text:000084A9                 mov     ebp, esp
.text:000084AB                 sub     esp, 10h
.text:000084AE                 mov     eax, 0CCCCCCCCh
.text:000084B3                 mov     [ebp+var_10], eax
.text:000084B6                 mov     [ebp+var_C], eax
.text:000084B9                 mov     [ebp+var_8], eax
.text:000084BC                 mov     [ebp+var_4], eax
.text:000084BF                 mov     [ebp+var_4], ecx
.text:000084C2                 mov     eax, [ebp+arg_0]
.text:000084C5                 push    eax
.text:000084C6                 mov     ecx, [ebp+var_4]
.text:000084C9                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:000084CE                 mov     ecx, [eax]
.text:000084D0                 mov     [ebp+var_C], ecx
.text:000084D3                 mov     edx, [ebp+var_C]
.text:000084D6                 mov     [ebp+var_8], edx
.text:000084D9                 cmp     [ebp+var_8], 0
.text:000084DD                 jz      short loc_84EE
.text:000084DF                 push    1
.text:000084E1                 mov     ecx, [ebp+var_8]
.text:000084E4                 call    ??_GUString@@QAEPAXI@Z ; UString::`scalar deleting destructor'(uint)
.text:000084E9                 mov     [ebp+var_10], eax
.text:000084EC                 jmp     short loc_84F5
.text:000084EE ; ---------------------------------------------------------------------------
.text:000084EE
.text:000084EE loc_84EE:                               ; CODE XREF: CObjectVector<UString>::Delete(uint)+35j
.text:000084EE                 mov     [ebp+var_10], 0
.text:000084F5
.text:000084F5 loc_84F5:                               ; CODE XREF: CObjectVector<UString>::Delete(uint)+44j
.text:000084F5                 mov     eax, [ebp+arg_0]
.text:000084F8                 push    eax
.text:000084F9                 mov     ecx, [ebp+var_4]
.text:000084FC                 call    ?Delete@?$CRecordVector@PAX@@QAEXI@Z ; CRecordVector<void *>::Delete(uint)
.text:00008501                 add     esp, 10h
.text:00008504                 cmp     ebp, esp
.text:00008506                 call    __RTC_CheckEsp
.text:0000850B                 mov     esp, ebp
.text:0000850D                 pop     ebp
.text:0000850E                 retn    4
.text:0000850E ?Delete@?$CObjectVector@VUString@@@@QAEXI@Z endp
.text:0000850E
.text:0000850E ; ---------------------------------------------------------------------------
.text:00008511                 align 4
.text:00008511 _text           ends
.text:00008511
.text:00008514 ; ===========================================================================
.text:00008514
.text:00008514 ; Segment type: Pure code
.text:00008514 ; Segment permissions: Read/Execute
.text:00008514 _text           segment para public 'CODE' use32
.text:00008514                 assume cs:_text
.text:00008514                 ;org 8514h
.text:00008514 ; COMDAT (pick any)
.text:00008514                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008514
.text:00008514 ; =============== S U B R O U T I N E =======================================
.text:00008514
.text:00008514 ; Attributes: bp-based frame
.text:00008514
.text:00008514 ; public: __thiscall CObjectVector<struct NWildcard::CPair>::CObjectVector<struct NWildcard::CPair>(void)
.text:00008514                 public ??0?$CObjectVector@UCPair@NWildcard@@@@QAE@XZ
.text:00008514 ??0?$CObjectVector@UCPair@NWildcard@@@@QAE@XZ proc near
.text:00008514                                         ; CODE XREF: NWildcard::CCensor::CCensor(void)+30p
.text:00008514
.text:00008514 var_4           = dword ptr -4
.text:00008514
.text:00008514                 push    ebp
.text:00008515                 mov     ebp, esp
.text:00008517                 push    ecx
.text:00008518                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000851F                 mov     [ebp+var_4], ecx
.text:00008522                 mov     ecx, [ebp+var_4]
.text:00008525                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:0000852A                 mov     eax, [ebp+var_4]
.text:0000852D                 add     esp, 4
.text:00008530                 cmp     ebp, esp
.text:00008532                 call    __RTC_CheckEsp
.text:00008537                 mov     esp, ebp
.text:00008539                 pop     ebp
.text:0000853A                 retn
.text:0000853A ??0?$CObjectVector@UCPair@NWildcard@@@@QAE@XZ endp
.text:0000853A
.text:0000853A ; ---------------------------------------------------------------------------
.text:0000853B                 align 4
.text:0000853B _text           ends
.text:0000853B
.text:0000853C ; ===========================================================================
.text:0000853C
.text:0000853C ; Segment type: Pure code
.text:0000853C ; Segment permissions: Read/Execute
.text:0000853C _text           segment para public 'CODE' use32
.text:0000853C                 assume cs:_text
.text:0000853C                 ;org 853Ch
.text:0000853C ; COMDAT (pick any)
.text:0000853C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000853C
.text:0000853C ; =============== S U B R O U T I N E =======================================
.text:0000853C
.text:0000853C ; Attributes: bp-based frame
.text:0000853C
.text:0000853C ; public: struct NWildcard::CPair & __thiscall CObjectVector<struct NWildcard::CPair>::Front(void)
.text:0000853C                 public ?Front@?$CObjectVector@UCPair@NWildcard@@@@QAEAAUCPair@NWildcard@@XZ
.text:0000853C ?Front@?$CObjectVector@UCPair@NWildcard@@@@QAEAAUCPair@NWildcard@@XZ proc near
.text:0000853C                                         ; CODE XREF: Main2(void)+F95p
.text:0000853C                                         ; Main2(void)+166Ap
.text:0000853C
.text:0000853C var_4           = dword ptr -4
.text:0000853C
.text:0000853C                 push    ebp
.text:0000853D                 mov     ebp, esp
.text:0000853F                 push    ecx
.text:00008540                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008547                 mov     [ebp+var_4], ecx
.text:0000854A                 push    0
.text:0000854C                 mov     ecx, [ebp+var_4]
.text:0000854F                 call    ??A?$CObjectVector@UCPair@NWildcard@@@@QAEAAUCPair@NWildcard@@I@Z ; CObjectVector<NWildcard::CPair>::operator[](uint)
.text:00008554                 add     esp, 4
.text:00008557                 cmp     ebp, esp
.text:00008559                 call    __RTC_CheckEsp
.text:0000855E                 mov     esp, ebp
.text:00008560                 pop     ebp
.text:00008561                 retn
.text:00008561 ?Front@?$CObjectVector@UCPair@NWildcard@@@@QAEAAUCPair@NWildcard@@XZ endp
.text:00008561
.text:00008561 ; ---------------------------------------------------------------------------
.text:00008562                 align 4
.text:00008562 _text           ends
.text:00008562
.text:00008564 ; ===========================================================================
.text:00008564
.text:00008564 ; Segment type: Pure code
.text:00008564 ; Segment permissions: Read/Execute
.text:00008564 _text           segment para public 'CODE' use32
.text:00008564                 assume cs:_text
.text:00008564                 ;org 8564h
.text:00008564 ; COMDAT (pick any)
.text:00008564                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008564
.text:00008564 ; =============== S U B R O U T I N E =======================================
.text:00008564
.text:00008564 ; Attributes: bp-based frame
.text:00008564
.text:00008564 ; public: __thiscall CObjectVector<struct NWildcard::CPair>::~CObjectVector<struct NWildcard::CPair>(void)
.text:00008564                 public ??1?$CObjectVector@UCPair@NWildcard@@@@QAE@XZ
.text:00008564 ??1?$CObjectVector@UCPair@NWildcard@@@@QAE@XZ proc near
.text:00008564                                         ; CODE XREF: __unwindfunclet$??0CCensor@NWildcard@@QAE@XZ$0+3j
.text:00008564                                         ; NWildcard::CCensor::~CCensor(void)+49p ...
.text:00008564
.text:00008564 var_20          = dword ptr -20h
.text:00008564 var_1C          = dword ptr -1Ch
.text:00008564 var_18          = dword ptr -18h
.text:00008564 var_14          = dword ptr -14h
.text:00008564 var_10          = dword ptr -10h
.text:00008564 var_C           = dword ptr -0Ch
.text:00008564 var_4           = dword ptr -4
.text:00008564
.text:00008564                 push    ebp
.text:00008565                 mov     ebp, esp
.text:00008567                 push    0FFFFFFFFh
.text:00008569                 push    offset __ehhandler$??1?$CObjectVector@UCPair@NWildcard@@@@QAE@XZ
.text:0000856E                 mov     eax, large fs:0
.text:00008574                 push    eax
.text:00008575                 sub     esp, 14h
.text:00008578                 mov     eax, 0CCCCCCCCh
.text:0000857D                 mov     [ebp+var_20], eax
.text:00008580                 mov     [ebp+var_1C], eax
.text:00008583                 mov     [ebp+var_18], eax
.text:00008586                 mov     [ebp+var_14], eax
.text:00008589                 mov     [ebp+var_10], eax
.text:0000858C                 mov     eax, dword ptr ds:___security_cookie
.text:00008591                 xor     eax, ebp
.text:00008593                 push    eax
.text:00008594                 lea     eax, [ebp+var_C]
.text:00008597                 mov     large fs:0, eax
.text:0000859D                 mov     [ebp+var_10], ecx
.text:000085A0                 mov     [ebp+var_4], 0
.text:000085A7                 mov     ecx, [ebp+var_10]
.text:000085AA                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:000085AF                 mov     [ebp+var_14], eax
.text:000085B2
.text:000085B2 loc_85B2:                               ; CODE XREF: CObjectVector<NWildcard::CPair>::~CObjectVector<NWildcard::CPair>(void):loc_85F4j
.text:000085B2                 cmp     [ebp+var_14], 0
.text:000085B6                 jz      short loc_85F6
.text:000085B8                 mov     eax, [ebp+var_14]
.text:000085BB                 sub     eax, 1
.text:000085BE                 mov     [ebp+var_14], eax
.text:000085C1                 mov     ecx, [ebp+var_14]
.text:000085C4                 push    ecx
.text:000085C5                 mov     ecx, [ebp+var_10]
.text:000085C8                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:000085CD                 mov     edx, [eax]
.text:000085CF                 mov     [ebp+var_1C], edx
.text:000085D2                 mov     eax, [ebp+var_1C]
.text:000085D5                 mov     [ebp+var_18], eax
.text:000085D8                 cmp     [ebp+var_18], 0
.text:000085DC                 jz      short loc_85ED
.text:000085DE                 push    1
.text:000085E0                 mov     ecx, [ebp+var_18]
.text:000085E3                 call    ??_GCPair@NWildcard@@QAEPAXI@Z ; NWildcard::CPair::`scalar deleting destructor'(uint)
.text:000085E8                 mov     [ebp+var_20], eax
.text:000085EB                 jmp     short loc_85F4
.text:000085ED ; ---------------------------------------------------------------------------
.text:000085ED
.text:000085ED loc_85ED:                               ; CODE XREF: CObjectVector<NWildcard::CPair>::~CObjectVector<NWildcard::CPair>(void)+78j
.text:000085ED                 mov     [ebp+var_20], 0
.text:000085F4
.text:000085F4 loc_85F4:                               ; CODE XREF: CObjectVector<NWildcard::CPair>::~CObjectVector<NWildcard::CPair>(void)+87j
.text:000085F4                 jmp     short loc_85B2
.text:000085F6 ; ---------------------------------------------------------------------------
.text:000085F6
.text:000085F6 loc_85F6:                               ; CODE XREF: CObjectVector<NWildcard::CPair>::~CObjectVector<NWildcard::CPair>(void)+52j
.text:000085F6                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000085FD                 mov     ecx, [ebp+var_10]
.text:00008600                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00008605                 mov     ecx, [ebp+var_C]
.text:00008608                 mov     large fs:0, ecx
.text:0000860F                 pop     ecx
.text:00008610                 add     esp, 20h
.text:00008613                 cmp     ebp, esp
.text:00008615                 call    __RTC_CheckEsp
.text:0000861A                 mov     esp, ebp
.text:0000861C                 pop     ebp
.text:0000861D                 retn
.text:0000861D ??1?$CObjectVector@UCPair@NWildcard@@@@QAE@XZ endp
.text:0000861D
.text:0000861D ; ---------------------------------------------------------------------------
.text:0000861E                 align 10h
.text:0000861E _text           ends
.text:0000861E
.text$x:00008620 ; ===========================================================================
.text$x:00008620
.text$x:00008620 ; Segment type: Pure code
.text$x:00008620 ; Segment permissions: Read/Execute
.text$x:00008620 _text$x         segment para public 'CODE' use32
.text$x:00008620                 assume cs:_text$x
.text$x:00008620                 ;org 8620h
.text$x:00008620 ; COMDAT (pick associative to section at 8564)
.text$x:00008620                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008620
.text$x:00008620 ; =============== S U B R O U T I N E =======================================
.text$x:00008620
.text$x:00008620
.text$x:00008620 __unwindfunclet$??1?$CObjectVector@UCPair@NWildcard@@@@QAE@XZ$0 proc near
.text$x:00008620                                         ; DATA XREF: .xdata$x:00008648o
.text$x:00008620                 mov     ecx, [ebp-10h]
.text$x:00008623                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:00008623 __unwindfunclet$??1?$CObjectVector@UCPair@NWildcard@@@@QAE@XZ$0 endp
.text$x:00008623
.text$x:00008628
.text$x:00008628 ; =============== S U B R O U T I N E =======================================
.text$x:00008628
.text$x:00008628
.text$x:00008628 __ehhandler$??1?$CObjectVector@UCPair@NWildcard@@@@QAE@XZ proc near
.text$x:00008628                                         ; DATA XREF: CObjectVector<NWildcard::CPair>::~CObjectVector<NWildcard::CPair>(void)+5o
.text$x:00008628
.text$x:00008628 arg_4           = dword ptr  8
.text$x:00008628
.text$x:00008628                 mov     edx, [esp+arg_4]
.text$x:0000862C                 lea     eax, [edx+0Ch]
.text$x:0000862F                 mov     ecx, [edx-18h]
.text$x:00008632                 xor     ecx, eax
.text$x:00008634                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008639                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@UCPair@NWildcard@@@@QAE@XZ
.text$x:0000863E                 jmp     ___CxxFrameHandler3
.text$x:0000863E __ehhandler$??1?$CObjectVector@UCPair@NWildcard@@@@QAE@XZ endp
.text$x:0000863E
.text$x:0000863E ; ---------------------------------------------------------------------------
.text$x:00008643                 align 4
.text$x:00008643 _text$x         ends
.text$x:00008643
.xdata$x:00008644 ; ===========================================================================
.xdata$x:00008644
.xdata$x:00008644 ; Segment type: Pure data
.xdata$x:00008644 ; Segment permissions: Read
.xdata$x:00008644 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008644                 assume cs:_xdata$x
.xdata$x:00008644                 ;org 8644h
.xdata$x:00008644 ; COMDAT (pick associative to section at 8564)
.xdata$x:00008644 __unwindtable$??1?$CObjectVector@UCPair@NWildcard@@@@QAE@XZ db 0FFh
.xdata$x:00008644                                         ; DATA XREF: .xdata$x:00008654o
.xdata$x:00008645                 db 0FFh
.xdata$x:00008646                 db 0FFh
.xdata$x:00008647                 db 0FFh
.xdata$x:00008648                 dd offset __unwindfunclet$??1?$CObjectVector@UCPair@NWildcard@@@@QAE@XZ$0
.xdata$x:0000864C __ehfuncinfo$??1?$CObjectVector@UCPair@NWildcard@@@@QAE@XZ db  22h ; "
.xdata$x:0000864C                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@UCPair@NWildcard@@@@QAE@XZ+11o
.xdata$x:0000864D                 db    5
.xdata$x:0000864E                 db  93h ; ô
.xdata$x:0000864F                 db  19h
.xdata$x:00008650                 db    1
.xdata$x:00008651                 db    0
.xdata$x:00008652                 db    0
.xdata$x:00008653                 db    0
.xdata$x:00008654                 dd offset __unwindtable$??1?$CObjectVector@UCPair@NWildcard@@@@QAE@XZ
.xdata$x:00008658                 db    0
.xdata$x:00008659                 db    0
.xdata$x:0000865A                 db    0
.xdata$x:0000865B                 db    0
.xdata$x:0000865C                 db    0
.xdata$x:0000865D                 db    0
.xdata$x:0000865E                 db    0
.xdata$x:0000865F                 db    0
.xdata$x:00008660                 db    0
.xdata$x:00008661                 db    0
.xdata$x:00008662                 db    0
.xdata$x:00008663                 db    0
.xdata$x:00008664                 db    0
.xdata$x:00008665                 db    0
.xdata$x:00008666                 db    0
.xdata$x:00008667                 db    0
.xdata$x:00008668                 db    0
.xdata$x:00008669                 db    0
.xdata$x:0000866A                 db    0
.xdata$x:0000866B                 db    0
.xdata$x:0000866C                 db    1
.xdata$x:0000866D                 db    0
.xdata$x:0000866E                 db    0
.xdata$x:0000866F                 db    0
.xdata$x:0000866F _xdata$x        ends
.xdata$x:0000866F
.text:00008670 ; ===========================================================================
.text:00008670
.text:00008670 ; Segment type: Pure code
.text:00008670 ; Segment permissions: Read/Execute
.text:00008670 _text           segment para public 'CODE' use32
.text:00008670                 assume cs:_text
.text:00008670                 ;org 8670h
.text:00008670 ; COMDAT (pick any)
.text:00008670                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008670
.text:00008670 ; =============== S U B R O U T I N E =======================================
.text:00008670
.text:00008670 ; Attributes: bp-based frame
.text:00008670
.text:00008670 ; public: __thiscall CObjectVector<struct NWildcard::CCensorPath>::CObjectVector<struct NWildcard::CCensorPath>(void)
.text:00008670                 public ??0?$CObjectVector@UCCensorPath@NWildcard@@@@QAE@XZ
.text:00008670 ??0?$CObjectVector@UCCensorPath@NWildcard@@@@QAE@XZ proc near
.text:00008670                                         ; CODE XREF: NWildcard::CCensor::CCensor(void)+42p
.text:00008670
.text:00008670 var_4           = dword ptr -4
.text:00008670
.text:00008670                 push    ebp
.text:00008671                 mov     ebp, esp
.text:00008673                 push    ecx
.text:00008674                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000867B                 mov     [ebp+var_4], ecx
.text:0000867E                 mov     ecx, [ebp+var_4]
.text:00008681                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:00008686                 mov     eax, [ebp+var_4]
.text:00008689                 add     esp, 4
.text:0000868C                 cmp     ebp, esp
.text:0000868E                 call    __RTC_CheckEsp
.text:00008693                 mov     esp, ebp
.text:00008695                 pop     ebp
.text:00008696                 retn
.text:00008696 ??0?$CObjectVector@UCCensorPath@NWildcard@@@@QAE@XZ endp
.text:00008696
.text:00008696 ; ---------------------------------------------------------------------------
.text:00008697                 align 4
.text:00008697 _text           ends
.text:00008697
.text:00008698 ; ===========================================================================
.text:00008698
.text:00008698 ; Segment type: Pure code
.text:00008698 ; Segment permissions: Read/Execute
.text:00008698 _text           segment para public 'CODE' use32
.text:00008698                 assume cs:_text
.text:00008698                 ;org 8698h
.text:00008698 ; COMDAT (pick any)
.text:00008698                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008698
.text:00008698 ; =============== S U B R O U T I N E =======================================
.text:00008698
.text:00008698 ; Attributes: bp-based frame
.text:00008698
.text:00008698 ; public: __thiscall CObjectVector<struct NWildcard::CCensorPath>::~CObjectVector<struct NWildcard::CCensorPath>(void)
.text:00008698                 public ??1?$CObjectVector@UCCensorPath@NWildcard@@@@QAE@XZ
.text:00008698 ??1?$CObjectVector@UCCensorPath@NWildcard@@@@QAE@XZ proc near
.text:00008698                                         ; CODE XREF: NWildcard::CCensor::~CCensor(void)+3Ap
.text:00008698
.text:00008698 var_20          = dword ptr -20h
.text:00008698 var_1C          = dword ptr -1Ch
.text:00008698 var_18          = dword ptr -18h
.text:00008698 var_14          = dword ptr -14h
.text:00008698 var_10          = dword ptr -10h
.text:00008698 var_C           = dword ptr -0Ch
.text:00008698 var_4           = dword ptr -4
.text:00008698
.text:00008698                 push    ebp
.text:00008699                 mov     ebp, esp
.text:0000869B                 push    0FFFFFFFFh
.text:0000869D                 push    offset __ehhandler$??1?$CObjectVector@UCCensorPath@NWildcard@@@@QAE@XZ
.text:000086A2                 mov     eax, large fs:0
.text:000086A8                 push    eax
.text:000086A9                 sub     esp, 14h
.text:000086AC                 mov     eax, 0CCCCCCCCh
.text:000086B1                 mov     [ebp+var_20], eax
.text:000086B4                 mov     [ebp+var_1C], eax
.text:000086B7                 mov     [ebp+var_18], eax
.text:000086BA                 mov     [ebp+var_14], eax
.text:000086BD                 mov     [ebp+var_10], eax
.text:000086C0                 mov     eax, dword ptr ds:___security_cookie
.text:000086C5                 xor     eax, ebp
.text:000086C7                 push    eax
.text:000086C8                 lea     eax, [ebp+var_C]
.text:000086CB                 mov     large fs:0, eax
.text:000086D1                 mov     [ebp+var_10], ecx
.text:000086D4                 mov     [ebp+var_4], 0
.text:000086DB                 mov     ecx, [ebp+var_10]
.text:000086DE                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:000086E3                 mov     [ebp+var_14], eax
.text:000086E6
.text:000086E6 loc_86E6:                               ; CODE XREF: CObjectVector<NWildcard::CCensorPath>::~CObjectVector<NWildcard::CCensorPath>(void):loc_8728j
.text:000086E6                 cmp     [ebp+var_14], 0
.text:000086EA                 jz      short loc_872A
.text:000086EC                 mov     eax, [ebp+var_14]
.text:000086EF                 sub     eax, 1
.text:000086F2                 mov     [ebp+var_14], eax
.text:000086F5                 mov     ecx, [ebp+var_14]
.text:000086F8                 push    ecx
.text:000086F9                 mov     ecx, [ebp+var_10]
.text:000086FC                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00008701                 mov     edx, [eax]
.text:00008703                 mov     [ebp+var_1C], edx
.text:00008706                 mov     eax, [ebp+var_1C]
.text:00008709                 mov     [ebp+var_18], eax
.text:0000870C                 cmp     [ebp+var_18], 0
.text:00008710                 jz      short loc_8721
.text:00008712                 push    1
.text:00008714                 mov     ecx, [ebp+var_18]
.text:00008717                 call    ??_GCCensorPath@NWildcard@@QAEPAXI@Z ; NWildcard::CCensorPath::`scalar deleting destructor'(uint)
.text:0000871C                 mov     [ebp+var_20], eax
.text:0000871F                 jmp     short loc_8728
.text:00008721 ; ---------------------------------------------------------------------------
.text:00008721
.text:00008721 loc_8721:                               ; CODE XREF: CObjectVector<NWildcard::CCensorPath>::~CObjectVector<NWildcard::CCensorPath>(void)+78j
.text:00008721                 mov     [ebp+var_20], 0
.text:00008728
.text:00008728 loc_8728:                               ; CODE XREF: CObjectVector<NWildcard::CCensorPath>::~CObjectVector<NWildcard::CCensorPath>(void)+87j
.text:00008728                 jmp     short loc_86E6
.text:0000872A ; ---------------------------------------------------------------------------
.text:0000872A
.text:0000872A loc_872A:                               ; CODE XREF: CObjectVector<NWildcard::CCensorPath>::~CObjectVector<NWildcard::CCensorPath>(void)+52j
.text:0000872A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00008731                 mov     ecx, [ebp+var_10]
.text:00008734                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00008739                 mov     ecx, [ebp+var_C]
.text:0000873C                 mov     large fs:0, ecx
.text:00008743                 pop     ecx
.text:00008744                 add     esp, 20h
.text:00008747                 cmp     ebp, esp
.text:00008749                 call    __RTC_CheckEsp
.text:0000874E                 mov     esp, ebp
.text:00008750                 pop     ebp
.text:00008751                 retn
.text:00008751 ??1?$CObjectVector@UCCensorPath@NWildcard@@@@QAE@XZ endp
.text:00008751
.text:00008751 ; ---------------------------------------------------------------------------
.text:00008752                 align 4
.text:00008752 _text           ends
.text:00008752
.text$x:00008754 ; ===========================================================================
.text$x:00008754
.text$x:00008754 ; Segment type: Pure code
.text$x:00008754 ; Segment permissions: Read/Execute
.text$x:00008754 _text$x         segment para public 'CODE' use32
.text$x:00008754                 assume cs:_text$x
.text$x:00008754                 ;org 8754h
.text$x:00008754 ; COMDAT (pick associative to section at 8698)
.text$x:00008754                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008754
.text$x:00008754 ; =============== S U B R O U T I N E =======================================
.text$x:00008754
.text$x:00008754
.text$x:00008754 __unwindfunclet$??1?$CObjectVector@UCCensorPath@NWildcard@@@@QAE@XZ$0 proc near
.text$x:00008754                                         ; DATA XREF: .xdata$x:0000877Co
.text$x:00008754                 mov     ecx, [ebp-10h]
.text$x:00008757                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:00008757 __unwindfunclet$??1?$CObjectVector@UCCensorPath@NWildcard@@@@QAE@XZ$0 endp
.text$x:00008757
.text$x:0000875C
.text$x:0000875C ; =============== S U B R O U T I N E =======================================
.text$x:0000875C
.text$x:0000875C
.text$x:0000875C __ehhandler$??1?$CObjectVector@UCCensorPath@NWildcard@@@@QAE@XZ proc near
.text$x:0000875C                                         ; DATA XREF: CObjectVector<NWildcard::CCensorPath>::~CObjectVector<NWildcard::CCensorPath>(void)+5o
.text$x:0000875C
.text$x:0000875C arg_4           = dword ptr  8
.text$x:0000875C
.text$x:0000875C                 mov     edx, [esp+arg_4]
.text$x:00008760                 lea     eax, [edx+0Ch]
.text$x:00008763                 mov     ecx, [edx-18h]
.text$x:00008766                 xor     ecx, eax
.text$x:00008768                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000876D                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@UCCensorPath@NWildcard@@@@QAE@XZ
.text$x:00008772                 jmp     ___CxxFrameHandler3
.text$x:00008772 __ehhandler$??1?$CObjectVector@UCCensorPath@NWildcard@@@@QAE@XZ endp
.text$x:00008772
.text$x:00008772 ; ---------------------------------------------------------------------------
.text$x:00008777                 align 4
.text$x:00008777 _text$x         ends
.text$x:00008777
.xdata$x:00008778 ; ===========================================================================
.xdata$x:00008778
.xdata$x:00008778 ; Segment type: Pure data
.xdata$x:00008778 ; Segment permissions: Read
.xdata$x:00008778 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008778                 assume cs:_xdata$x
.xdata$x:00008778                 ;org 8778h
.xdata$x:00008778 ; COMDAT (pick associative to section at 8698)
.xdata$x:00008778 __unwindtable$??1?$CObjectVector@UCCensorPath@NWildcard@@@@QAE@XZ db 0FFh
.xdata$x:00008778                                         ; DATA XREF: .xdata$x:00008788o
.xdata$x:00008779                 db 0FFh
.xdata$x:0000877A                 db 0FFh
.xdata$x:0000877B                 db 0FFh
.xdata$x:0000877C                 dd offset __unwindfunclet$??1?$CObjectVector@UCCensorPath@NWildcard@@@@QAE@XZ$0
.xdata$x:00008780 __ehfuncinfo$??1?$CObjectVector@UCCensorPath@NWildcard@@@@QAE@XZ db  22h ; "
.xdata$x:00008780                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@UCCensorPath@NWildcard@@@@QAE@XZ+11o
.xdata$x:00008781                 db    5
.xdata$x:00008782                 db  93h ; ô
.xdata$x:00008783                 db  19h
.xdata$x:00008784                 db    1
.xdata$x:00008785                 db    0
.xdata$x:00008786                 db    0
.xdata$x:00008787                 db    0
.xdata$x:00008788                 dd offset __unwindtable$??1?$CObjectVector@UCCensorPath@NWildcard@@@@QAE@XZ
.xdata$x:0000878C                 align 20h
.xdata$x:000087A0                 db    1
.xdata$x:000087A1                 db    0
.xdata$x:000087A2                 db    0
.xdata$x:000087A3                 db    0
.xdata$x:000087A3 _xdata$x        ends
.xdata$x:000087A3
.text:000087A4 ; ===========================================================================
.text:000087A4
.text:000087A4 ; Segment type: Pure code
.text:000087A4 ; Segment permissions: Read/Execute
.text:000087A4 _text           segment para public 'CODE' use32
.text:000087A4                 assume cs:_text
.text:000087A4                 ;org 87A4h
.text:000087A4 ; COMDAT (pick any)
.text:000087A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000087A4
.text:000087A4 ; =============== S U B R O U T I N E =======================================
.text:000087A4
.text:000087A4 ; Attributes: bp-based frame
.text:000087A4
.text:000087A4 ; public: unsigned int __thiscall CObjectVector<struct CArcExtInfo>::Size(void)const
.text:000087A4                 public ?Size@?$CObjectVector@UCArcExtInfo@@@@QBEIXZ
.text:000087A4 ?Size@?$CObjectVector@UCArcExtInfo@@@@QBEIXZ proc near
.text:000087A4                                         ; CODE XREF: Main2(void)+6AEp
.text:000087A4
.text:000087A4 var_4           = dword ptr -4
.text:000087A4
.text:000087A4                 push    ebp
.text:000087A5                 mov     ebp, esp
.text:000087A7                 push    ecx
.text:000087A8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000087AF                 mov     [ebp+var_4], ecx
.text:000087B2                 mov     ecx, [ebp+var_4]
.text:000087B5                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:000087BA                 add     esp, 4
.text:000087BD                 cmp     ebp, esp
.text:000087BF                 call    __RTC_CheckEsp
.text:000087C4                 mov     esp, ebp
.text:000087C6                 pop     ebp
.text:000087C7                 retn
.text:000087C7 ?Size@?$CObjectVector@UCArcExtInfo@@@@QBEIXZ endp
.text:000087C7
.text:000087C7 _text           ends
.text:000087C7
.text:000087C8 ; ===========================================================================
.text:000087C8
.text:000087C8 ; Segment type: Pure code
.text:000087C8 ; Segment permissions: Read/Execute
.text:000087C8 _text           segment para public 'CODE' use32
.text:000087C8                 assume cs:_text
.text:000087C8                 ;org 87C8h
.text:000087C8 ; COMDAT (pick any)
.text:000087C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000087C8
.text:000087C8 ; =============== S U B R O U T I N E =======================================
.text:000087C8
.text:000087C8 ; Attributes: bp-based frame
.text:000087C8
.text:000087C8 ; public: struct CArcExtInfo const & __thiscall CObjectVector<struct CArcExtInfo>::operator[](unsigned int)const
.text:000087C8                 public ??A?$CObjectVector@UCArcExtInfo@@@@QBEABUCArcExtInfo@@I@Z
.text:000087C8 ??A?$CObjectVector@UCArcExtInfo@@@@QBEABUCArcExtInfo@@I@Z proc near
.text:000087C8                                         ; CODE XREF: Main2(void)+6E3p
.text:000087C8
.text:000087C8 var_4           = dword ptr -4
.text:000087C8 arg_0           = dword ptr  8
.text:000087C8
.text:000087C8                 push    ebp
.text:000087C9                 mov     ebp, esp
.text:000087CB                 push    ecx
.text:000087CC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000087D3                 mov     [ebp+var_4], ecx
.text:000087D6                 mov     eax, [ebp+arg_0]
.text:000087D9                 push    eax
.text:000087DA                 mov     ecx, [ebp+var_4]
.text:000087DD                 call    ??A?$CRecordVector@PAX@@QBEABQAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:000087E2                 mov     eax, [eax]
.text:000087E4                 add     esp, 4
.text:000087E7                 cmp     ebp, esp
.text:000087E9                 call    __RTC_CheckEsp
.text:000087EE                 mov     esp, ebp
.text:000087F0                 pop     ebp
.text:000087F1                 retn    4
.text:000087F1 ??A?$CObjectVector@UCArcExtInfo@@@@QBEABUCArcExtInfo@@I@Z endp
.text:000087F1
.text:000087F1 _text           ends
.text:000087F1
.text:000087F4 ; ===========================================================================
.text:000087F4
.text:000087F4 ; Segment type: Pure code
.text:000087F4 ; Segment permissions: Read/Execute
.text:000087F4 _text           segment para public 'CODE' use32
.text:000087F4                 assume cs:_text
.text:000087F4                 ;org 87F4h
.text:000087F4 ; COMDAT (pick any)
.text:000087F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000087F4
.text:000087F4 ; =============== S U B R O U T I N E =======================================
.text:000087F4
.text:000087F4 ; Attributes: bp-based frame
.text:000087F4
.text:000087F4 ; public: unsigned int __thiscall CObjectVector<class CBuffer<unsigned char>>::Size(void)const
.text:000087F4                 public ?Size@?$CObjectVector@V?$CBuffer@E@@@@QBEIXZ
.text:000087F4 ?Size@?$CObjectVector@V?$CBuffer@E@@@@QBEIXZ proc near
.text:000087F4                                         ; CODE XREF: Main2(void)+7C8p
.text:000087F4
.text:000087F4 var_4           = dword ptr -4
.text:000087F4
.text:000087F4                 push    ebp
.text:000087F5                 mov     ebp, esp
.text:000087F7                 push    ecx
.text:000087F8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000087FF                 mov     [ebp+var_4], ecx
.text:00008802                 mov     ecx, [ebp+var_4]
.text:00008805                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:0000880A                 add     esp, 4
.text:0000880D                 cmp     ebp, esp
.text:0000880F                 call    __RTC_CheckEsp
.text:00008814                 mov     esp, ebp
.text:00008816                 pop     ebp
.text:00008817                 retn
.text:00008817 ?Size@?$CObjectVector@V?$CBuffer@E@@@@QBEIXZ endp
.text:00008817
.text:00008817 _text           ends
.text:00008817
.text:00008818 ; ===========================================================================
.text:00008818
.text:00008818 ; Segment type: Pure code
.text:00008818 ; Segment permissions: Read/Execute
.text:00008818 _text           segment para public 'CODE' use32
.text:00008818                 assume cs:_text
.text:00008818                 ;org 8818h
.text:00008818 ; COMDAT (pick any)
.text:00008818                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008818
.text:00008818 ; =============== S U B R O U T I N E =======================================
.text:00008818
.text:00008818 ; Attributes: bp-based frame
.text:00008818
.text:00008818 ; public: class CBuffer<unsigned char> const & __thiscall CObjectVector<class CBuffer<unsigned char>>::operator[](unsigned int)const
.text:00008818                 public ??A?$CObjectVector@V?$CBuffer@E@@@@QBEABV?$CBuffer@E@@I@Z
.text:00008818 ??A?$CObjectVector@V?$CBuffer@E@@@@QBEABV?$CBuffer@E@@I@Z proc near
.text:00008818                                         ; CODE XREF: Main2(void)+802p
.text:00008818
.text:00008818 var_4           = dword ptr -4
.text:00008818 arg_0           = dword ptr  8
.text:00008818
.text:00008818                 push    ebp
.text:00008819                 mov     ebp, esp
.text:0000881B                 push    ecx
.text:0000881C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008823                 mov     [ebp+var_4], ecx
.text:00008826                 mov     eax, [ebp+arg_0]
.text:00008829                 push    eax
.text:0000882A                 mov     ecx, [ebp+var_4]
.text:0000882D                 call    ??A?$CRecordVector@PAX@@QBEABQAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00008832                 mov     eax, [eax]
.text:00008834                 add     esp, 4
.text:00008837                 cmp     ebp, esp
.text:00008839                 call    __RTC_CheckEsp
.text:0000883E                 mov     esp, ebp
.text:00008840                 pop     ebp
.text:00008841                 retn    4
.text:00008841 ??A?$CObjectVector@V?$CBuffer@E@@@@QBEABV?$CBuffer@E@@I@Z endp
.text:00008841
.text:00008841 _text           ends
.text:00008841
.text:00008844 ; ===========================================================================
.text:00008844
.text:00008844 ; Segment type: Pure code
.text:00008844 ; Segment permissions: Read/Execute
.text:00008844 _text           segment para public 'CODE' use32
.text:00008844                 assume cs:_text
.text:00008844                 ;org 8844h
.text:00008844 ; COMDAT (pick any)
.text:00008844                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008844
.text:00008844 ; =============== S U B R O U T I N E =======================================
.text:00008844
.text:00008844 ; Attributes: bp-based frame
.text:00008844
.text:00008844 ; public: unsigned int __thiscall CObjectVector<struct CArcInfoEx>::Size(void)const
.text:00008844                 public ?Size@?$CObjectVector@UCArcInfoEx@@@@QBEIXZ
.text:00008844 ?Size@?$CObjectVector@UCArcInfoEx@@@@QBEIXZ proc near
.text:00008844                                         ; CODE XREF: Main2(void)+386p
.text:00008844                                         ; Main2(void)+57Ap
.text:00008844
.text:00008844 var_4           = dword ptr -4
.text:00008844
.text:00008844                 push    ebp
.text:00008845                 mov     ebp, esp
.text:00008847                 push    ecx
.text:00008848                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000884F                 mov     [ebp+var_4], ecx
.text:00008852                 mov     ecx, [ebp+var_4]
.text:00008855                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:0000885A                 add     esp, 4
.text:0000885D                 cmp     ebp, esp
.text:0000885F                 call    __RTC_CheckEsp
.text:00008864                 mov     esp, ebp
.text:00008866                 pop     ebp
.text:00008867                 retn
.text:00008867 ?Size@?$CObjectVector@UCArcInfoEx@@@@QBEIXZ endp
.text:00008867
.text:00008867 _text           ends
.text:00008867
.text:00008868 ; ===========================================================================
.text:00008868
.text:00008868 ; Segment type: Pure code
.text:00008868 ; Segment permissions: Read/Execute
.text:00008868 _text           segment para public 'CODE' use32
.text:00008868                 assume cs:_text
.text:00008868                 ;org 8868h
.text:00008868 ; COMDAT (pick any)
.text:00008868                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008868
.text:00008868 ; =============== S U B R O U T I N E =======================================
.text:00008868
.text:00008868 ; Attributes: bp-based frame
.text:00008868
.text:00008868 ; public: __thiscall CObjectVector<struct CArcInfoEx>::CObjectVector<struct CArcInfoEx>(void)
.text:00008868                 public ??0?$CObjectVector@UCArcInfoEx@@@@QAE@XZ
.text:00008868 ??0?$CObjectVector@UCArcInfoEx@@@@QAE@XZ proc near
.text:00008868                                         ; CODE XREF: CCodecs::CCodecs(void)+30p
.text:00008868
.text:00008868 var_4           = dword ptr -4
.text:00008868
.text:00008868                 push    ebp
.text:00008869                 mov     ebp, esp
.text:0000886B                 push    ecx
.text:0000886C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008873                 mov     [ebp+var_4], ecx
.text:00008876                 mov     ecx, [ebp+var_4]
.text:00008879                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:0000887E                 mov     eax, [ebp+var_4]
.text:00008881                 add     esp, 4
.text:00008884                 cmp     ebp, esp
.text:00008886                 call    __RTC_CheckEsp
.text:0000888B                 mov     esp, ebp
.text:0000888D                 pop     ebp
.text:0000888E                 retn
.text:0000888E ??0?$CObjectVector@UCArcInfoEx@@@@QAE@XZ endp
.text:0000888E
.text:0000888E ; ---------------------------------------------------------------------------
.text:0000888F                 align 10h
.text:0000888F _text           ends
.text:0000888F
.text:00008890 ; ===========================================================================
.text:00008890
.text:00008890 ; Segment type: Pure code
.text:00008890 ; Segment permissions: Read/Execute
.text:00008890 _text           segment para public 'CODE' use32
.text:00008890                 assume cs:_text
.text:00008890                 ;org 8890h
.text:00008890 ; COMDAT (pick any)
.text:00008890                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008890
.text:00008890 ; =============== S U B R O U T I N E =======================================
.text:00008890
.text:00008890 ; Attributes: bp-based frame
.text:00008890
.text:00008890 ; public: struct CArcInfoEx & __thiscall CObjectVector<struct CArcInfoEx>::operator[](unsigned int)
.text:00008890                 public ??A?$CObjectVector@UCArcInfoEx@@@@QAEAAUCArcInfoEx@@I@Z
.text:00008890 ??A?$CObjectVector@UCArcInfoEx@@@@QAEAAUCArcInfoEx@@I@Z proc near
.text:00008890                                         ; CODE XREF: Main2(void)+59Bp
.text:00008890
.text:00008890 var_4           = dword ptr -4
.text:00008890 arg_0           = dword ptr  8
.text:00008890
.text:00008890                 push    ebp
.text:00008891                 mov     ebp, esp
.text:00008893                 push    ecx
.text:00008894                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000889B                 mov     [ebp+var_4], ecx
.text:0000889E                 mov     eax, [ebp+arg_0]
.text:000088A1                 push    eax
.text:000088A2                 mov     ecx, [ebp+var_4]
.text:000088A5                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:000088AA                 mov     eax, [eax]
.text:000088AC                 add     esp, 4
.text:000088AF                 cmp     ebp, esp
.text:000088B1                 call    __RTC_CheckEsp
.text:000088B6                 mov     esp, ebp
.text:000088B8                 pop     ebp
.text:000088B9                 retn    4
.text:000088B9 ??A?$CObjectVector@UCArcInfoEx@@@@QAEAAUCArcInfoEx@@I@Z endp
.text:000088B9
.text:000088B9 _text           ends
.text:000088B9
.text:000088BC ; ===========================================================================
.text:000088BC
.text:000088BC ; Segment type: Pure code
.text:000088BC ; Segment permissions: Read/Execute
.text:000088BC _text           segment para public 'CODE' use32
.text:000088BC                 assume cs:_text
.text:000088BC                 ;org 88BCh
.text:000088BC ; COMDAT (pick any)
.text:000088BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000088BC
.text:000088BC ; =============== S U B R O U T I N E =======================================
.text:000088BC
.text:000088BC ; Attributes: bp-based frame
.text:000088BC
.text:000088BC ; public: __thiscall CObjectVector<struct CArcInfoEx>::~CObjectVector<struct CArcInfoEx>(void)
.text:000088BC                 public ??1?$CObjectVector@UCArcInfoEx@@@@QAE@XZ
.text:000088BC ??1?$CObjectVector@UCArcInfoEx@@@@QAE@XZ proc near
.text:000088BC                                         ; CODE XREF: CCodecs::~CCodecs(void)+1Dp
.text:000088BC
.text:000088BC var_20          = dword ptr -20h
.text:000088BC var_1C          = dword ptr -1Ch
.text:000088BC var_18          = dword ptr -18h
.text:000088BC var_14          = dword ptr -14h
.text:000088BC var_10          = dword ptr -10h
.text:000088BC var_C           = dword ptr -0Ch
.text:000088BC var_4           = dword ptr -4
.text:000088BC
.text:000088BC                 push    ebp
.text:000088BD                 mov     ebp, esp
.text:000088BF                 push    0FFFFFFFFh
.text:000088C1                 push    offset __ehhandler$??1?$CObjectVector@UCArcInfoEx@@@@QAE@XZ
.text:000088C6                 mov     eax, large fs:0
.text:000088CC                 push    eax
.text:000088CD                 sub     esp, 14h
.text:000088D0                 mov     eax, 0CCCCCCCCh
.text:000088D5                 mov     [ebp+var_20], eax
.text:000088D8                 mov     [ebp+var_1C], eax
.text:000088DB                 mov     [ebp+var_18], eax
.text:000088DE                 mov     [ebp+var_14], eax
.text:000088E1                 mov     [ebp+var_10], eax
.text:000088E4                 mov     eax, dword ptr ds:___security_cookie
.text:000088E9                 xor     eax, ebp
.text:000088EB                 push    eax
.text:000088EC                 lea     eax, [ebp+var_C]
.text:000088EF                 mov     large fs:0, eax
.text:000088F5                 mov     [ebp+var_10], ecx
.text:000088F8                 mov     [ebp+var_4], 0
.text:000088FF                 mov     ecx, [ebp+var_10]
.text:00008902                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00008907                 mov     [ebp+var_14], eax
.text:0000890A
.text:0000890A loc_890A:                               ; CODE XREF: CObjectVector<CArcInfoEx>::~CObjectVector<CArcInfoEx>(void):loc_894Cj
.text:0000890A                 cmp     [ebp+var_14], 0
.text:0000890E                 jz      short loc_894E
.text:00008910                 mov     eax, [ebp+var_14]
.text:00008913                 sub     eax, 1
.text:00008916                 mov     [ebp+var_14], eax
.text:00008919                 mov     ecx, [ebp+var_14]
.text:0000891C                 push    ecx
.text:0000891D                 mov     ecx, [ebp+var_10]
.text:00008920                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00008925                 mov     edx, [eax]
.text:00008927                 mov     [ebp+var_1C], edx
.text:0000892A                 mov     eax, [ebp+var_1C]
.text:0000892D                 mov     [ebp+var_18], eax
.text:00008930                 cmp     [ebp+var_18], 0
.text:00008934                 jz      short loc_8945
.text:00008936                 push    1
.text:00008938                 mov     ecx, [ebp+var_18]
.text:0000893B                 call    ??_GCArcInfoEx@@QAEPAXI@Z ; CArcInfoEx::`scalar deleting destructor'(uint)
.text:00008940                 mov     [ebp+var_20], eax
.text:00008943                 jmp     short loc_894C
.text:00008945 ; ---------------------------------------------------------------------------
.text:00008945
.text:00008945 loc_8945:                               ; CODE XREF: CObjectVector<CArcInfoEx>::~CObjectVector<CArcInfoEx>(void)+78j
.text:00008945                 mov     [ebp+var_20], 0
.text:0000894C
.text:0000894C loc_894C:                               ; CODE XREF: CObjectVector<CArcInfoEx>::~CObjectVector<CArcInfoEx>(void)+87j
.text:0000894C                 jmp     short loc_890A
.text:0000894E ; ---------------------------------------------------------------------------
.text:0000894E
.text:0000894E loc_894E:                               ; CODE XREF: CObjectVector<CArcInfoEx>::~CObjectVector<CArcInfoEx>(void)+52j
.text:0000894E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00008955                 mov     ecx, [ebp+var_10]
.text:00008958                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:0000895D                 mov     ecx, [ebp+var_C]
.text:00008960                 mov     large fs:0, ecx
.text:00008967                 pop     ecx
.text:00008968                 add     esp, 20h
.text:0000896B                 cmp     ebp, esp
.text:0000896D                 call    __RTC_CheckEsp
.text:00008972                 mov     esp, ebp
.text:00008974                 pop     ebp
.text:00008975                 retn
.text:00008975 ??1?$CObjectVector@UCArcInfoEx@@@@QAE@XZ endp
.text:00008975
.text:00008975 ; ---------------------------------------------------------------------------
.text:00008976                 align 4
.text:00008976 _text           ends
.text:00008976
.text$x:00008978 ; ===========================================================================
.text$x:00008978
.text$x:00008978 ; Segment type: Pure code
.text$x:00008978 ; Segment permissions: Read/Execute
.text$x:00008978 _text$x         segment para public 'CODE' use32
.text$x:00008978                 assume cs:_text$x
.text$x:00008978                 ;org 8978h
.text$x:00008978 ; COMDAT (pick associative to section at 88BC)
.text$x:00008978                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008978
.text$x:00008978 ; =============== S U B R O U T I N E =======================================
.text$x:00008978
.text$x:00008978
.text$x:00008978 __unwindfunclet$??1?$CObjectVector@UCArcInfoEx@@@@QAE@XZ$0 proc near
.text$x:00008978                                         ; DATA XREF: .xdata$x:000089A0o
.text$x:00008978                 mov     ecx, [ebp-10h]
.text$x:0000897B                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:0000897B __unwindfunclet$??1?$CObjectVector@UCArcInfoEx@@@@QAE@XZ$0 endp
.text$x:0000897B
.text$x:00008980
.text$x:00008980 ; =============== S U B R O U T I N E =======================================
.text$x:00008980
.text$x:00008980
.text$x:00008980 __ehhandler$??1?$CObjectVector@UCArcInfoEx@@@@QAE@XZ proc near
.text$x:00008980                                         ; DATA XREF: CObjectVector<CArcInfoEx>::~CObjectVector<CArcInfoEx>(void)+5o
.text$x:00008980
.text$x:00008980 arg_4           = dword ptr  8
.text$x:00008980
.text$x:00008980                 mov     edx, [esp+arg_4]
.text$x:00008984                 lea     eax, [edx+0Ch]
.text$x:00008987                 mov     ecx, [edx-18h]
.text$x:0000898A                 xor     ecx, eax
.text$x:0000898C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008991                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@UCArcInfoEx@@@@QAE@XZ
.text$x:00008996                 jmp     ___CxxFrameHandler3
.text$x:00008996 __ehhandler$??1?$CObjectVector@UCArcInfoEx@@@@QAE@XZ endp
.text$x:00008996
.text$x:00008996 ; ---------------------------------------------------------------------------
.text$x:0000899B                 align 4
.text$x:0000899B _text$x         ends
.text$x:0000899B
.xdata$x:0000899C ; ===========================================================================
.xdata$x:0000899C
.xdata$x:0000899C ; Segment type: Pure data
.xdata$x:0000899C ; Segment permissions: Read
.xdata$x:0000899C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000899C                 assume cs:_xdata$x
.xdata$x:0000899C                 ;org 899Ch
.xdata$x:0000899C ; COMDAT (pick associative to section at 88BC)
.xdata$x:0000899C __unwindtable$??1?$CObjectVector@UCArcInfoEx@@@@QAE@XZ db 0FFh
.xdata$x:0000899C                                         ; DATA XREF: .xdata$x:000089ACo
.xdata$x:0000899D                 db 0FFh
.xdata$x:0000899E                 db 0FFh
.xdata$x:0000899F                 db 0FFh
.xdata$x:000089A0                 dd offset __unwindfunclet$??1?$CObjectVector@UCArcInfoEx@@@@QAE@XZ$0
.xdata$x:000089A4 __ehfuncinfo$??1?$CObjectVector@UCArcInfoEx@@@@QAE@XZ db  22h ; "
.xdata$x:000089A4                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@UCArcInfoEx@@@@QAE@XZ+11o
.xdata$x:000089A5                 db    5
.xdata$x:000089A6                 db  93h ; ô
.xdata$x:000089A7                 db  19h
.xdata$x:000089A8                 db    1
.xdata$x:000089A9                 db    0
.xdata$x:000089AA                 db    0
.xdata$x:000089AB                 db    0
.xdata$x:000089AC                 dd offset __unwindtable$??1?$CObjectVector@UCArcInfoEx@@@@QAE@XZ
.xdata$x:000089B0                 db    0
.xdata$x:000089B1                 db    0
.xdata$x:000089B2                 db    0
.xdata$x:000089B3                 db    0
.xdata$x:000089B4                 db    0
.xdata$x:000089B5                 db    0
.xdata$x:000089B6                 db    0
.xdata$x:000089B7                 db    0
.xdata$x:000089B8                 db    0
.xdata$x:000089B9                 db    0
.xdata$x:000089BA                 db    0
.xdata$x:000089BB                 db    0
.xdata$x:000089BC                 db    0
.xdata$x:000089BD                 db    0
.xdata$x:000089BE                 db    0
.xdata$x:000089BF                 db    0
.xdata$x:000089C0                 db    0
.xdata$x:000089C1                 db    0
.xdata$x:000089C2                 db    0
.xdata$x:000089C3                 db    0
.xdata$x:000089C4                 db    1
.xdata$x:000089C5                 db    0
.xdata$x:000089C6                 db    0
.xdata$x:000089C7                 db    0
.xdata$x:000089C7 _xdata$x        ends
.xdata$x:000089C7
.text:000089C8 ; ===========================================================================
.text:000089C8
.text:000089C8 ; Segment type: Pure code
.text:000089C8 ; Segment permissions: Read/Execute
.text:000089C8 _text           segment para public 'CODE' use32
.text:000089C8                 assume cs:_text
.text:000089C8                 ;org 89C8h
.text:000089C8 ; COMDAT (pick any)
.text:000089C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000089C8
.text:000089C8 ; =============== S U B R O U T I N E =======================================
.text:000089C8
.text:000089C8 ; Attributes: bp-based frame
.text:000089C8
.text:000089C8 ; public: __thiscall CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>(void)
.text:000089C8                 public ??0?$CRecordVector@_K@@QAE@XZ
.text:000089C8 ??0?$CRecordVector@_K@@QAE@XZ proc near ; CODE XREF: CUpdateOptions::CUpdateOptions(void)+178p
.text:000089C8
.text:000089C8 var_4           = dword ptr -4
.text:000089C8
.text:000089C8                 push    ebp
.text:000089C9                 mov     ebp, esp
.text:000089CB                 push    ecx
.text:000089CC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000089D3                 mov     [ebp+var_4], ecx
.text:000089D6                 mov     eax, [ebp+var_4]
.text:000089D9                 mov     dword ptr [eax], 0
.text:000089DF                 mov     ecx, [ebp+var_4]
.text:000089E2                 mov     dword ptr [ecx+4], 0
.text:000089E9                 mov     edx, [ebp+var_4]
.text:000089EC                 mov     dword ptr [edx+8], 0
.text:000089F3                 mov     eax, [ebp+var_4]
.text:000089F6                 mov     esp, ebp
.text:000089F8                 pop     ebp
.text:000089F9                 retn
.text:000089F9 ??0?$CRecordVector@_K@@QAE@XZ endp
.text:000089F9
.text:000089F9 ; ---------------------------------------------------------------------------
.text:000089FA                 align 4
.text:000089FA _text           ends
.text:000089FA
.text:000089FC ; ===========================================================================
.text:000089FC
.text:000089FC ; Segment type: Pure code
.text:000089FC ; Segment permissions: Read/Execute
.text:000089FC _text           segment para public 'CODE' use32
.text:000089FC                 assume cs:_text
.text:000089FC                 ;org 89FCh
.text:000089FC ; COMDAT (pick any)
.text:000089FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000089FC
.text:000089FC ; =============== S U B R O U T I N E =======================================
.text:000089FC
.text:000089FC ; Attributes: bp-based frame
.text:000089FC
.text:000089FC ; public: __thiscall CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text:000089FC                 public ??1?$CRecordVector@_K@@QAE@XZ
.text:000089FC ??1?$CRecordVector@_K@@QAE@XZ proc near ; CODE XREF: CUpdateOptions::~CUpdateOptions(void)+3Dp
.text:000089FC
.text:000089FC var_8           = dword ptr -8
.text:000089FC var_4           = dword ptr -4
.text:000089FC
.text:000089FC                 push    ebp
.text:000089FD                 mov     ebp, esp
.text:000089FF                 sub     esp, 8
.text:00008A02                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00008A09                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008A10                 mov     [ebp+var_4], ecx
.text:00008A13                 mov     eax, [ebp+var_4]
.text:00008A16                 mov     ecx, [eax]
.text:00008A18                 mov     [ebp+var_8], ecx
.text:00008A1B                 mov     edx, [ebp+var_8]
.text:00008A1E                 push    edx             ; void *
.text:00008A1F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00008A24                 add     esp, 4
.text:00008A27                 add     esp, 8
.text:00008A2A                 cmp     ebp, esp
.text:00008A2C                 call    __RTC_CheckEsp
.text:00008A31                 mov     esp, ebp
.text:00008A33                 pop     ebp
.text:00008A34                 retn
.text:00008A34 ??1?$CRecordVector@_K@@QAE@XZ endp
.text:00008A34
.text:00008A34 ; ---------------------------------------------------------------------------
.text:00008A35                 align 4
.text:00008A35 _text           ends
.text:00008A35
.text:00008A38 ; ===========================================================================
.text:00008A38
.text:00008A38 ; Segment type: Pure code
.text:00008A38 ; Segment permissions: Read/Execute
.text:00008A38 _text           segment para public 'CODE' use32
.text:00008A38                 assume cs:_text
.text:00008A38                 ;org 8A38h
.text:00008A38 ; COMDAT (pick any)
.text:00008A38                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008A38
.text:00008A38 ; =============== S U B R O U T I N E =======================================
.text:00008A38
.text:00008A38 ; Attributes: bp-based frame
.text:00008A38
.text:00008A38 ; public: __thiscall CBuffer<unsigned char>::operator unsigned char const *(void)const
.text:00008A38                 public ??B?$CBuffer@E@@QBEPBEXZ
.text:00008A38 ??B?$CBuffer@E@@QBEPBEXZ proc near      ; CODE XREF: Main2(void)+85Bp
.text:00008A38
.text:00008A38 var_4           = dword ptr -4
.text:00008A38
.text:00008A38                 push    ebp
.text:00008A39                 mov     ebp, esp
.text:00008A3B                 push    ecx
.text:00008A3C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008A43                 mov     [ebp+var_4], ecx
.text:00008A46                 mov     eax, [ebp+var_4]
.text:00008A49                 mov     eax, [eax]
.text:00008A4B                 mov     esp, ebp
.text:00008A4D                 pop     ebp
.text:00008A4E                 retn
.text:00008A4E ??B?$CBuffer@E@@QBEPBEXZ endp
.text:00008A4E
.text:00008A4E ; ---------------------------------------------------------------------------
.text:00008A4F                 align 10h
.text:00008A4F _text           ends
.text:00008A4F
.text:00008A50 ; ===========================================================================
.text:00008A50
.text:00008A50 ; Segment type: Pure code
.text:00008A50 ; Segment permissions: Read/Execute
.text:00008A50 _text           segment para public 'CODE' use32
.text:00008A50                 assume cs:_text
.text:00008A50                 ;org 8A50h
.text:00008A50 ; COMDAT (pick any)
.text:00008A50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008A50
.text:00008A50 ; =============== S U B R O U T I N E =======================================
.text:00008A50
.text:00008A50 ; Attributes: bp-based frame
.text:00008A50
.text:00008A50 ; public: unsigned int __thiscall CBuffer<unsigned char>::Size(void)const
.text:00008A50                 public ?Size@?$CBuffer@E@@QBEIXZ
.text:00008A50 ?Size@?$CBuffer@E@@QBEIXZ proc near     ; CODE XREF: Main2(void)+82Ep
.text:00008A50
.text:00008A50 var_4           = dword ptr -4
.text:00008A50
.text:00008A50                 push    ebp
.text:00008A51                 mov     ebp, esp
.text:00008A53                 push    ecx
.text:00008A54                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008A5B                 mov     [ebp+var_4], ecx
.text:00008A5E                 mov     eax, [ebp+var_4]
.text:00008A61                 mov     eax, [eax+4]
.text:00008A64                 mov     esp, ebp
.text:00008A66                 pop     ebp
.text:00008A67                 retn
.text:00008A67 ?Size@?$CBuffer@E@@QBEIXZ endp
.text:00008A67
.text:00008A67 _text           ends
.text:00008A67
.text:00008A68 ; ===========================================================================
.text:00008A68
.text:00008A68 ; Segment type: Pure code
.text:00008A68 ; Segment permissions: Read/Execute
.text:00008A68 _text           segment para public 'CODE' use32
.text:00008A68                 assume cs:_text
.text:00008A68                 ;org 8A68h
.text:00008A68 ; COMDAT (pick any)
.text:00008A68                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008A68
.text:00008A68 ; =============== S U B R O U T I N E =======================================
.text:00008A68
.text:00008A68 ; Attributes: bp-based frame
.text:00008A68
.text:00008A68 ; public: __thiscall CRecordVector<int>::CRecordVector<int>(void)
.text:00008A68                 public ??0?$CRecordVector@H@@QAE@XZ
.text:00008A68 ??0?$CRecordVector@H@@QAE@XZ proc near  ; CODE XREF: Main2(void)+422p
.text:00008A68                                         ; Main2(void)+460p
.text:00008A68
.text:00008A68 var_4           = dword ptr -4
.text:00008A68
.text:00008A68                 push    ebp
.text:00008A69                 mov     ebp, esp
.text:00008A6B                 push    ecx
.text:00008A6C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008A73                 mov     [ebp+var_4], ecx
.text:00008A76                 mov     eax, [ebp+var_4]
.text:00008A79                 mov     dword ptr [eax], 0
.text:00008A7F                 mov     ecx, [ebp+var_4]
.text:00008A82                 mov     dword ptr [ecx+4], 0
.text:00008A89                 mov     edx, [ebp+var_4]
.text:00008A8C                 mov     dword ptr [edx+8], 0
.text:00008A93                 mov     eax, [ebp+var_4]
.text:00008A96                 mov     esp, ebp
.text:00008A98                 pop     ebp
.text:00008A99                 retn
.text:00008A99 ??0?$CRecordVector@H@@QAE@XZ endp
.text:00008A99
.text:00008A99 ; ---------------------------------------------------------------------------
.text:00008A9A                 align 4
.text:00008A9A _text           ends
.text:00008A9A
.text:00008A9C ; ===========================================================================
.text:00008A9C
.text:00008A9C ; Segment type: Pure code
.text:00008A9C ; Segment permissions: Read/Execute
.text:00008A9C _text           segment para public 'CODE' use32
.text:00008A9C                 assume cs:_text
.text:00008A9C                 ;org 8A9Ch
.text:00008A9C ; COMDAT (pick any)
.text:00008A9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008A9C
.text:00008A9C ; =============== S U B R O U T I N E =======================================
.text:00008A9C
.text:00008A9C ; Attributes: bp-based frame
.text:00008A9C
.text:00008A9C ; public: unsigned int __thiscall CRecordVector<int>::Size(void)const
.text:00008A9C                 public ?Size@?$CRecordVector@H@@QBEIXZ
.text:00008A9C ?Size@?$CRecordVector@H@@QBEIXZ proc near ; CODE XREF: Main2(void)+498p
.text:00008A9C
.text:00008A9C var_4           = dword ptr -4
.text:00008A9C
.text:00008A9C                 push    ebp
.text:00008A9D                 mov     ebp, esp
.text:00008A9F                 push    ecx
.text:00008AA0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008AA7                 mov     [ebp+var_4], ecx
.text:00008AAA                 mov     eax, [ebp+var_4]
.text:00008AAD                 mov     eax, [eax+4]
.text:00008AB0                 mov     esp, ebp
.text:00008AB2                 pop     ebp
.text:00008AB3                 retn
.text:00008AB3 ?Size@?$CRecordVector@H@@QBEIXZ endp
.text:00008AB3
.text:00008AB3 _text           ends
.text:00008AB3
.text:00008AB4 ; ===========================================================================
.text:00008AB4
.text:00008AB4 ; Segment type: Pure code
.text:00008AB4 ; Segment permissions: Read/Execute
.text:00008AB4 _text           segment para public 'CODE' use32
.text:00008AB4                 assume cs:_text
.text:00008AB4                 ;org 8AB4h
.text:00008AB4 ; COMDAT (pick any)
.text:00008AB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008AB4
.text:00008AB4 ; =============== S U B R O U T I N E =======================================
.text:00008AB4
.text:00008AB4 ; Attributes: bp-based frame
.text:00008AB4
.text:00008AB4 ; public: __thiscall CRecordVector<int>::~CRecordVector<int>(void)
.text:00008AB4                 public ??1?$CRecordVector@H@@QAE@XZ
.text:00008AB4 ??1?$CRecordVector@H@@QAE@XZ proc near  ; CODE XREF: Main2(void)+4E4p
.text:00008AB4                                         ; Main2(void)+1BC2p ...
.text:00008AB4
.text:00008AB4 var_8           = dword ptr -8
.text:00008AB4 var_4           = dword ptr -4
.text:00008AB4
.text:00008AB4                 push    ebp
.text:00008AB5                 mov     ebp, esp
.text:00008AB7                 sub     esp, 8
.text:00008ABA                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00008AC1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008AC8                 mov     [ebp+var_4], ecx
.text:00008ACB                 mov     eax, [ebp+var_4]
.text:00008ACE                 mov     ecx, [eax]
.text:00008AD0                 mov     [ebp+var_8], ecx
.text:00008AD3                 mov     edx, [ebp+var_8]
.text:00008AD6                 push    edx             ; void *
.text:00008AD7                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00008ADC                 add     esp, 4
.text:00008ADF                 add     esp, 8
.text:00008AE2                 cmp     ebp, esp
.text:00008AE4                 call    __RTC_CheckEsp
.text:00008AE9                 mov     esp, ebp
.text:00008AEB                 pop     ebp
.text:00008AEC                 retn
.text:00008AEC ??1?$CRecordVector@H@@QAE@XZ endp
.text:00008AEC
.text:00008AEC ; ---------------------------------------------------------------------------
.text:00008AED                 align 10h
.text:00008AED _text           ends
.text:00008AED
.text:00008AF0 ; ===========================================================================
.text:00008AF0
.text:00008AF0 ; Segment type: Pure code
.text:00008AF0 ; Segment permissions: Read/Execute
.text:00008AF0 _text           segment para public 'CODE' use32
.text:00008AF0                 assume cs:_text
.text:00008AF0                 ;org 8AF0h
.text:00008AF0 ; COMDAT (pick any)
.text:00008AF0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008AF0
.text:00008AF0 ; =============== S U B R O U T I N E =======================================
.text:00008AF0
.text:00008AF0 ; Attributes: bp-based frame
.text:00008AF0
.text:00008AF0 ; public: int & __thiscall CRecordVector<int>::operator[](unsigned int)
.text:00008AF0                 public ??A?$CRecordVector@H@@QAEAAHI@Z
.text:00008AF0 ??A?$CRecordVector@H@@QAEAAHI@Z proc near ; CODE XREF: Main2(void)+4C7p
.text:00008AF0                                         ; CRecordVector<int>::AddToUniqueSorted(int)+47p
.text:00008AF0
.text:00008AF0 var_4           = dword ptr -4
.text:00008AF0 arg_0           = dword ptr  8
.text:00008AF0
.text:00008AF0                 push    ebp
.text:00008AF1                 mov     ebp, esp
.text:00008AF3                 push    ecx
.text:00008AF4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008AFB                 mov     [ebp+var_4], ecx
.text:00008AFE                 mov     eax, [ebp+var_4]
.text:00008B01                 mov     ecx, [eax]
.text:00008B03                 mov     edx, [ebp+arg_0]
.text:00008B06                 lea     eax, [ecx+edx*4]
.text:00008B09                 mov     esp, ebp
.text:00008B0B                 pop     ebp
.text:00008B0C                 retn    4
.text:00008B0C ??A?$CRecordVector@H@@QAEAAHI@Z endp
.text:00008B0C
.text:00008B0C ; ---------------------------------------------------------------------------
.text:00008B0F                 align 10h
.text:00008B0F _text           ends
.text:00008B0F
.text:00008B10 ; ===========================================================================
.text:00008B10
.text:00008B10 ; Segment type: Pure code
.text:00008B10 ; Segment permissions: Read/Execute
.text:00008B10 _text           segment para public 'CODE' use32
.text:00008B10                 assume cs:_text
.text:00008B10                 ;org 8B10h
.text:00008B10 ; COMDAT (pick any)
.text:00008B10                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008B10
.text:00008B10 ; =============== S U B R O U T I N E =======================================
.text:00008B10
.text:00008B10 ; Attributes: bp-based frame
.text:00008B10
.text:00008B10 ; public: unsigned int __thiscall CRecordVector<int>::AddToUniqueSorted(int)
.text:00008B10                 public ?AddToUniqueSorted@?$CRecordVector@H@@QAEIH@Z
.text:00008B10 ?AddToUniqueSorted@?$CRecordVector@H@@QAEIH@Z proc near
.text:00008B10                                         ; CODE XREF: Main2(void)+4D5p
.text:00008B10
.text:00008B10 var_14          = dword ptr -14h
.text:00008B10 var_10          = dword ptr -10h
.text:00008B10 var_C           = dword ptr -0Ch
.text:00008B10 var_8           = dword ptr -8
.text:00008B10 var_4           = dword ptr -4
.text:00008B10 arg_0           = dword ptr  8
.text:00008B10
.text:00008B10                 push    ebp
.text:00008B11                 mov     ebp, esp
.text:00008B13                 sub     esp, 14h
.text:00008B16                 mov     eax, 0CCCCCCCCh
.text:00008B1B                 mov     [ebp+var_14], eax
.text:00008B1E                 mov     [ebp+var_10], eax
.text:00008B21                 mov     [ebp+var_C], eax
.text:00008B24                 mov     [ebp+var_8], eax
.text:00008B27                 mov     [ebp+var_4], eax
.text:00008B2A                 mov     [ebp+var_4], ecx
.text:00008B2D                 mov     [ebp+var_8], 0
.text:00008B34                 mov     eax, [ebp+var_4]
.text:00008B37                 mov     ecx, [eax+4]
.text:00008B3A                 mov     [ebp+var_C], ecx
.text:00008B3D
.text:00008B3D loc_8B3D:                               ; CODE XREF: CRecordVector<int>::AddToUniqueSorted(int):loc_8B87j
.text:00008B3D                 mov     edx, [ebp+var_8]
.text:00008B40                 cmp     edx, [ebp+var_C]
.text:00008B43                 jz      short loc_8B89
.text:00008B45                 mov     eax, [ebp+var_8]
.text:00008B48                 add     eax, [ebp+var_C]
.text:00008B4B                 shr     eax, 1
.text:00008B4D                 mov     [ebp+var_10], eax
.text:00008B50                 mov     ecx, [ebp+var_10]
.text:00008B53                 push    ecx
.text:00008B54                 mov     ecx, [ebp+var_4]
.text:00008B57                 call    ??A?$CRecordVector@H@@QAEAAHI@Z ; CRecordVector<int>::operator[](uint)
.text:00008B5C                 mov     edx, [eax]
.text:00008B5E                 mov     [ebp+var_14], edx
.text:00008B61                 mov     eax, [ebp+arg_0]
.text:00008B64                 cmp     eax, [ebp+var_14]
.text:00008B67                 jnz     short loc_8B6E
.text:00008B69                 mov     eax, [ebp+var_10]
.text:00008B6C                 jmp     short loc_8B9C
.text:00008B6E ; ---------------------------------------------------------------------------
.text:00008B6E
.text:00008B6E loc_8B6E:                               ; CODE XREF: CRecordVector<int>::AddToUniqueSorted(int)+57j
.text:00008B6E                 mov     ecx, [ebp+arg_0]
.text:00008B71                 cmp     ecx, [ebp+var_14]
.text:00008B74                 jge     short loc_8B7E
.text:00008B76                 mov     edx, [ebp+var_10]
.text:00008B79                 mov     [ebp+var_C], edx
.text:00008B7C                 jmp     short loc_8B87
.text:00008B7E ; ---------------------------------------------------------------------------
.text:00008B7E
.text:00008B7E loc_8B7E:                               ; CODE XREF: CRecordVector<int>::AddToUniqueSorted(int)+64j
.text:00008B7E                 mov     eax, [ebp+var_10]
.text:00008B81                 add     eax, 1
.text:00008B84                 mov     [ebp+var_8], eax
.text:00008B87
.text:00008B87 loc_8B87:                               ; CODE XREF: CRecordVector<int>::AddToUniqueSorted(int)+6Cj
.text:00008B87                 jmp     short loc_8B3D
.text:00008B89 ; ---------------------------------------------------------------------------
.text:00008B89
.text:00008B89 loc_8B89:                               ; CODE XREF: CRecordVector<int>::AddToUniqueSorted(int)+33j
.text:00008B89                 mov     ecx, [ebp+arg_0]
.text:00008B8C                 push    ecx
.text:00008B8D                 mov     edx, [ebp+var_C]
.text:00008B90                 push    edx
.text:00008B91                 mov     ecx, [ebp+var_4]
.text:00008B94                 call    ?Insert@?$CRecordVector@H@@QAEXIH@Z ; CRecordVector<int>::Insert(uint,int)
.text:00008B99                 mov     eax, [ebp+var_C]
.text:00008B9C
.text:00008B9C loc_8B9C:                               ; CODE XREF: CRecordVector<int>::AddToUniqueSorted(int)+5Cj
.text:00008B9C                 add     esp, 14h
.text:00008B9F                 cmp     ebp, esp
.text:00008BA1                 call    __RTC_CheckEsp
.text:00008BA6                 mov     esp, ebp
.text:00008BA8                 pop     ebp
.text:00008BA9                 retn    4
.text:00008BA9 ?AddToUniqueSorted@?$CRecordVector@H@@QAEIH@Z endp
.text:00008BA9
.text:00008BA9 _text           ends
.text:00008BA9
.text:00008BAC ; ===========================================================================
.text:00008BAC
.text:00008BAC ; Segment type: Pure code
.text:00008BAC ; Segment permissions: Read/Execute
.text:00008BAC _text           segment para public 'CODE' use32
.text:00008BAC                 assume cs:_text
.text:00008BAC                 ;org 8BACh
.text:00008BAC ; COMDAT (pick any)
.text:00008BAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008BAC
.text:00008BAC ; =============== S U B R O U T I N E =======================================
.text:00008BAC
.text:00008BAC ; Attributes: bp-based frame
.text:00008BAC
.text:00008BAC ; public: __thiscall CObjectVector<struct CHasherState>::CObjectVector<struct CHasherState>(void)
.text:00008BAC                 public ??0?$CObjectVector@UCHasherState@@@@QAE@XZ
.text:00008BAC ??0?$CObjectVector@UCHasherState@@@@QAE@XZ proc near
.text:00008BAC                                         ; CODE XREF: CHashBundle::CHashBundle(void)+25p
.text:00008BAC
.text:00008BAC var_4           = dword ptr -4
.text:00008BAC
.text:00008BAC                 push    ebp
.text:00008BAD                 mov     ebp, esp
.text:00008BAF                 push    ecx
.text:00008BB0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008BB7                 mov     [ebp+var_4], ecx
.text:00008BBA                 mov     ecx, [ebp+var_4]
.text:00008BBD                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:00008BC2                 mov     eax, [ebp+var_4]
.text:00008BC5                 add     esp, 4
.text:00008BC8                 cmp     ebp, esp
.text:00008BCA                 call    __RTC_CheckEsp
.text:00008BCF                 mov     esp, ebp
.text:00008BD1                 pop     ebp
.text:00008BD2                 retn
.text:00008BD2 ??0?$CObjectVector@UCHasherState@@@@QAE@XZ endp
.text:00008BD2
.text:00008BD2 ; ---------------------------------------------------------------------------
.text:00008BD3                 align 4
.text:00008BD3 _text           ends
.text:00008BD3
.text:00008BD4 ; ===========================================================================
.text:00008BD4
.text:00008BD4 ; Segment type: Pure code
.text:00008BD4 ; Segment permissions: Read/Execute
.text:00008BD4 _text           segment para public 'CODE' use32
.text:00008BD4                 assume cs:_text
.text:00008BD4                 ;org 8BD4h
.text:00008BD4 ; COMDAT (pick any)
.text:00008BD4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008BD4
.text:00008BD4 ; =============== S U B R O U T I N E =======================================
.text:00008BD4
.text:00008BD4 ; Attributes: bp-based frame
.text:00008BD4
.text:00008BD4 ; public: __thiscall CObjectVector<struct CHasherState>::~CObjectVector<struct CHasherState>(void)
.text:00008BD4                 public ??1?$CObjectVector@UCHasherState@@@@QAE@XZ
.text:00008BD4 ??1?$CObjectVector@UCHasherState@@@@QAE@XZ proc near
.text:00008BD4                                         ; CODE XREF: CHashBundle::~CHashBundle(void)+14p
.text:00008BD4
.text:00008BD4 var_20          = dword ptr -20h
.text:00008BD4 var_1C          = dword ptr -1Ch
.text:00008BD4 var_18          = dword ptr -18h
.text:00008BD4 var_14          = dword ptr -14h
.text:00008BD4 var_10          = dword ptr -10h
.text:00008BD4 var_C           = dword ptr -0Ch
.text:00008BD4 var_4           = dword ptr -4
.text:00008BD4
.text:00008BD4                 push    ebp
.text:00008BD5                 mov     ebp, esp
.text:00008BD7                 push    0FFFFFFFFh
.text:00008BD9                 push    offset __ehhandler$??1?$CObjectVector@UCHasherState@@@@QAE@XZ
.text:00008BDE                 mov     eax, large fs:0
.text:00008BE4                 push    eax
.text:00008BE5                 sub     esp, 14h
.text:00008BE8                 mov     eax, 0CCCCCCCCh
.text:00008BED                 mov     [ebp+var_20], eax
.text:00008BF0                 mov     [ebp+var_1C], eax
.text:00008BF3                 mov     [ebp+var_18], eax
.text:00008BF6                 mov     [ebp+var_14], eax
.text:00008BF9                 mov     [ebp+var_10], eax
.text:00008BFC                 mov     eax, dword ptr ds:___security_cookie
.text:00008C01                 xor     eax, ebp
.text:00008C03                 push    eax
.text:00008C04                 lea     eax, [ebp+var_C]
.text:00008C07                 mov     large fs:0, eax
.text:00008C0D                 mov     [ebp+var_10], ecx
.text:00008C10                 mov     [ebp+var_4], 0
.text:00008C17                 mov     ecx, [ebp+var_10]
.text:00008C1A                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00008C1F                 mov     [ebp+var_14], eax
.text:00008C22
.text:00008C22 loc_8C22:                               ; CODE XREF: CObjectVector<CHasherState>::~CObjectVector<CHasherState>(void):loc_8C64j
.text:00008C22                 cmp     [ebp+var_14], 0
.text:00008C26                 jz      short loc_8C66
.text:00008C28                 mov     eax, [ebp+var_14]
.text:00008C2B                 sub     eax, 1
.text:00008C2E                 mov     [ebp+var_14], eax
.text:00008C31                 mov     ecx, [ebp+var_14]
.text:00008C34                 push    ecx
.text:00008C35                 mov     ecx, [ebp+var_10]
.text:00008C38                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00008C3D                 mov     edx, [eax]
.text:00008C3F                 mov     [ebp+var_1C], edx
.text:00008C42                 mov     eax, [ebp+var_1C]
.text:00008C45                 mov     [ebp+var_18], eax
.text:00008C48                 cmp     [ebp+var_18], 0
.text:00008C4C                 jz      short loc_8C5D
.text:00008C4E                 push    1
.text:00008C50                 mov     ecx, [ebp+var_18]
.text:00008C53                 call    ??_GCHasherState@@QAEPAXI@Z ; CHasherState::`scalar deleting destructor'(uint)
.text:00008C58                 mov     [ebp+var_20], eax
.text:00008C5B                 jmp     short loc_8C64
.text:00008C5D ; ---------------------------------------------------------------------------
.text:00008C5D
.text:00008C5D loc_8C5D:                               ; CODE XREF: CObjectVector<CHasherState>::~CObjectVector<CHasherState>(void)+78j
.text:00008C5D                 mov     [ebp+var_20], 0
.text:00008C64
.text:00008C64 loc_8C64:                               ; CODE XREF: CObjectVector<CHasherState>::~CObjectVector<CHasherState>(void)+87j
.text:00008C64                 jmp     short loc_8C22
.text:00008C66 ; ---------------------------------------------------------------------------
.text:00008C66
.text:00008C66 loc_8C66:                               ; CODE XREF: CObjectVector<CHasherState>::~CObjectVector<CHasherState>(void)+52j
.text:00008C66                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00008C6D                 mov     ecx, [ebp+var_10]
.text:00008C70                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00008C75                 mov     ecx, [ebp+var_C]
.text:00008C78                 mov     large fs:0, ecx
.text:00008C7F                 pop     ecx
.text:00008C80                 add     esp, 20h
.text:00008C83                 cmp     ebp, esp
.text:00008C85                 call    __RTC_CheckEsp
.text:00008C8A                 mov     esp, ebp
.text:00008C8C                 pop     ebp
.text:00008C8D                 retn
.text:00008C8D ??1?$CObjectVector@UCHasherState@@@@QAE@XZ endp
.text:00008C8D
.text:00008C8D ; ---------------------------------------------------------------------------
.text:00008C8E                 align 10h
.text:00008C8E _text           ends
.text:00008C8E
.text$x:00008C90 ; ===========================================================================
.text$x:00008C90
.text$x:00008C90 ; Segment type: Pure code
.text$x:00008C90 ; Segment permissions: Read/Execute
.text$x:00008C90 _text$x         segment para public 'CODE' use32
.text$x:00008C90                 assume cs:_text$x
.text$x:00008C90                 ;org 8C90h
.text$x:00008C90 ; COMDAT (pick associative to section at 8BD4)
.text$x:00008C90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008C90
.text$x:00008C90 ; =============== S U B R O U T I N E =======================================
.text$x:00008C90
.text$x:00008C90
.text$x:00008C90 __unwindfunclet$??1?$CObjectVector@UCHasherState@@@@QAE@XZ$0 proc near
.text$x:00008C90                                         ; DATA XREF: .xdata$x:00008CB8o
.text$x:00008C90                 mov     ecx, [ebp-10h]
.text$x:00008C93                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:00008C93 __unwindfunclet$??1?$CObjectVector@UCHasherState@@@@QAE@XZ$0 endp
.text$x:00008C93
.text$x:00008C98
.text$x:00008C98 ; =============== S U B R O U T I N E =======================================
.text$x:00008C98
.text$x:00008C98
.text$x:00008C98 __ehhandler$??1?$CObjectVector@UCHasherState@@@@QAE@XZ proc near
.text$x:00008C98                                         ; DATA XREF: CObjectVector<CHasherState>::~CObjectVector<CHasherState>(void)+5o
.text$x:00008C98
.text$x:00008C98 arg_4           = dword ptr  8
.text$x:00008C98
.text$x:00008C98                 mov     edx, [esp+arg_4]
.text$x:00008C9C                 lea     eax, [edx+0Ch]
.text$x:00008C9F                 mov     ecx, [edx-18h]
.text$x:00008CA2                 xor     ecx, eax
.text$x:00008CA4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008CA9                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@UCHasherState@@@@QAE@XZ
.text$x:00008CAE                 jmp     ___CxxFrameHandler3
.text$x:00008CAE __ehhandler$??1?$CObjectVector@UCHasherState@@@@QAE@XZ endp
.text$x:00008CAE
.text$x:00008CAE ; ---------------------------------------------------------------------------
.text$x:00008CB3                 align 4
.text$x:00008CB3 _text$x         ends
.text$x:00008CB3
.xdata$x:00008CB4 ; ===========================================================================
.xdata$x:00008CB4
.xdata$x:00008CB4 ; Segment type: Pure data
.xdata$x:00008CB4 ; Segment permissions: Read
.xdata$x:00008CB4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008CB4                 assume cs:_xdata$x
.xdata$x:00008CB4                 ;org 8CB4h
.xdata$x:00008CB4 ; COMDAT (pick associative to section at 8BD4)
.xdata$x:00008CB4 __unwindtable$??1?$CObjectVector@UCHasherState@@@@QAE@XZ db 0FFh
.xdata$x:00008CB4                                         ; DATA XREF: .xdata$x:00008CC4o
.xdata$x:00008CB5                 db 0FFh
.xdata$x:00008CB6                 db 0FFh
.xdata$x:00008CB7                 db 0FFh
.xdata$x:00008CB8                 dd offset __unwindfunclet$??1?$CObjectVector@UCHasherState@@@@QAE@XZ$0
.xdata$x:00008CBC __ehfuncinfo$??1?$CObjectVector@UCHasherState@@@@QAE@XZ db  22h ; "
.xdata$x:00008CBC                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@UCHasherState@@@@QAE@XZ+11o
.xdata$x:00008CBD                 db    5
.xdata$x:00008CBE                 db  93h ; ô
.xdata$x:00008CBF                 db  19h
.xdata$x:00008CC0                 db    1
.xdata$x:00008CC1                 db    0
.xdata$x:00008CC2                 db    0
.xdata$x:00008CC3                 db    0
.xdata$x:00008CC4                 dd offset __unwindtable$??1?$CObjectVector@UCHasherState@@@@QAE@XZ
.xdata$x:00008CC8                 db    0
.xdata$x:00008CC9                 db    0
.xdata$x:00008CCA                 db    0
.xdata$x:00008CCB                 db    0
.xdata$x:00008CCC                 db    0
.xdata$x:00008CCD                 db    0
.xdata$x:00008CCE                 db    0
.xdata$x:00008CCF                 db    0
.xdata$x:00008CD0                 db    0
.xdata$x:00008CD1                 db    0
.xdata$x:00008CD2                 db    0
.xdata$x:00008CD3                 db    0
.xdata$x:00008CD4                 db    0
.xdata$x:00008CD5                 db    0
.xdata$x:00008CD6                 db    0
.xdata$x:00008CD7                 db    0
.xdata$x:00008CD8                 db    0
.xdata$x:00008CD9                 db    0
.xdata$x:00008CDA                 db    0
.xdata$x:00008CDB                 db    0
.xdata$x:00008CDC                 db    1
.xdata$x:00008CDD                 db    0
.xdata$x:00008CDE                 db    0
.xdata$x:00008CDF                 db    0
.xdata$x:00008CDF _xdata$x        ends
.xdata$x:00008CDF
.text:00008CE0 ; ===========================================================================
.text:00008CE0
.text:00008CE0 ; Segment type: Pure code
.text:00008CE0 ; Segment permissions: Read/Execute
.text:00008CE0 _text           segment para public 'CODE' use32
.text:00008CE0                 assume cs:_text
.text:00008CE0                 ;org 8CE0h
.text:00008CE0 ; COMDAT (pick any)
.text:00008CE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008CE0
.text:00008CE0 ; =============== S U B R O U T I N E =======================================
.text:00008CE0
.text:00008CE0 ; Attributes: bp-based frame
.text:00008CE0
.text:00008CE0 ; public: __thiscall CMyComPtr<struct IFolderArchiveExtractCallback>::CMyComPtr<struct IFolderArchiveExtractCallback>(struct IFolderArchiveExtractCallback *)
.text:00008CE0                 public ??0?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QAE@PAUIFolderArchiveExtractCallback@@@Z
.text:00008CE0 ??0?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QAE@PAUIFolderArchiveExtractCallback@@@Z proc near
.text:00008CE0                                         ; CODE XREF: Main2(void)+DC0p
.text:00008CE0
.text:00008CE0 var_4           = dword ptr -4
.text:00008CE0 arg_0           = dword ptr  8
.text:00008CE0
.text:00008CE0                 push    ebp
.text:00008CE1                 mov     ebp, esp
.text:00008CE3                 push    ecx
.text:00008CE4                 push    esi
.text:00008CE5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008CEC                 mov     [ebp+var_4], ecx
.text:00008CEF                 mov     eax, [ebp+var_4]
.text:00008CF2                 mov     ecx, [ebp+arg_0]
.text:00008CF5                 mov     [eax], ecx
.text:00008CF7                 cmp     [ebp+arg_0], 0
.text:00008CFB                 jz      short loc_8D14
.text:00008CFD                 mov     edx, [ebp+arg_0]
.text:00008D00                 mov     eax, [edx]
.text:00008D02                 mov     esi, esp
.text:00008D04                 mov     ecx, [ebp+arg_0]
.text:00008D07                 push    ecx
.text:00008D08                 mov     edx, [eax+4]
.text:00008D0B                 call    edx
.text:00008D0D                 cmp     esi, esp
.text:00008D0F                 call    __RTC_CheckEsp
.text:00008D14
.text:00008D14 loc_8D14:                               ; CODE XREF: CMyComPtr<IFolderArchiveExtractCallback>::CMyComPtr<IFolderArchiveExtractCallback>(IFolderArchiveExtractCallback *)+1Bj
.text:00008D14                 mov     eax, [ebp+var_4]
.text:00008D17                 pop     esi
.text:00008D18                 add     esp, 4
.text:00008D1B                 cmp     ebp, esp
.text:00008D1D                 call    __RTC_CheckEsp
.text:00008D22                 mov     esp, ebp
.text:00008D24                 pop     ebp
.text:00008D25                 retn    4
.text:00008D25 ??0?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QAE@PAUIFolderArchiveExtractCallback@@@Z endp
.text:00008D25
.text:00008D25 _text           ends
.text:00008D25
.text:00008D28 ; ===========================================================================
.text:00008D28
.text:00008D28 ; Segment type: Pure code
.text:00008D28 ; Segment permissions: Read/Execute
.text:00008D28 _text           segment para public 'CODE' use32
.text:00008D28                 assume cs:_text
.text:00008D28                 ;org 8D28h
.text:00008D28 ; COMDAT (pick any)
.text:00008D28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008D28
.text:00008D28 ; =============== S U B R O U T I N E =======================================
.text:00008D28
.text:00008D28 ; Attributes: bp-based frame
.text:00008D28
.text:00008D28 ; public: __thiscall CMyComPtr<struct IFolderArchiveExtractCallback>::~CMyComPtr<struct IFolderArchiveExtractCallback>(void)
.text:00008D28                 public ??1?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QAE@XZ
.text:00008D28 ??1?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QAE@XZ proc near
.text:00008D28                                         ; CODE XREF: Main2(void)+15FFp
.text:00008D28                                         ; __unwindfunclet$?Main2@@YGHXZ$15+6j
.text:00008D28
.text:00008D28 var_4           = dword ptr -4
.text:00008D28
.text:00008D28                 push    ebp
.text:00008D29                 mov     ebp, esp
.text:00008D2B                 push    ecx
.text:00008D2C                 push    esi
.text:00008D2D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008D34                 mov     [ebp+var_4], ecx
.text:00008D37                 mov     eax, [ebp+var_4]
.text:00008D3A                 cmp     dword ptr [eax], 0
.text:00008D3D                 jz      short loc_8D5A
.text:00008D3F                 mov     ecx, [ebp+var_4]
.text:00008D42                 mov     edx, [ecx]
.text:00008D44                 mov     eax, [ebp+var_4]
.text:00008D47                 mov     ecx, [eax]
.text:00008D49                 mov     edx, [edx]
.text:00008D4B                 mov     esi, esp
.text:00008D4D                 push    ecx
.text:00008D4E                 mov     eax, [edx+8]
.text:00008D51                 call    eax
.text:00008D53                 cmp     esi, esp
.text:00008D55                 call    __RTC_CheckEsp
.text:00008D5A
.text:00008D5A loc_8D5A:                               ; CODE XREF: CMyComPtr<IFolderArchiveExtractCallback>::~CMyComPtr<IFolderArchiveExtractCallback>(void)+15j
.text:00008D5A                 pop     esi
.text:00008D5B                 add     esp, 4
.text:00008D5E                 cmp     ebp, esp
.text:00008D60                 call    __RTC_CheckEsp
.text:00008D65                 mov     esp, ebp
.text:00008D67                 pop     ebp
.text:00008D68                 retn
.text:00008D68 ??1?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QAE@XZ endp
.text:00008D68
.text:00008D68 ; ---------------------------------------------------------------------------
.text:00008D69                 align 4
.text:00008D69 _text           ends
.text:00008D69
.text:00008D6C ; ===========================================================================
.text:00008D6C
.text:00008D6C ; Segment type: Pure code
.text:00008D6C ; Segment permissions: Read/Execute
.text:00008D6C _text           segment para public 'CODE' use32
.text:00008D6C                 assume cs:_text
.text:00008D6C                 ;org 8D6Ch
.text:00008D6C ; COMDAT (pick any)
.text:00008D6C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008D6C
.text:00008D6C ; =============== S U B R O U T I N E =======================================
.text:00008D6C
.text:00008D6C ; Attributes: bp-based frame
.text:00008D6C
.text:00008D6C ; public: __thiscall CObjectVector<struct CProperty>::CObjectVector<struct CProperty>(void)
.text:00008D6C                 public ??0?$CObjectVector@UCProperty@@@@QAE@XZ
.text:00008D6C ??0?$CObjectVector@UCProperty@@@@QAE@XZ proc near
.text:00008D6C                                         ; CODE XREF: CExtractOptions::CExtractOptions(void)+5Ep
.text:00008D6C                                         ; CArcCmdLineOptions::CArcCmdLineOptions(void)+B3p ...
.text:00008D6C
.text:00008D6C var_4           = dword ptr -4
.text:00008D6C
.text:00008D6C                 push    ebp
.text:00008D6D                 mov     ebp, esp
.text:00008D6F                 push    ecx
.text:00008D70                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008D77                 mov     [ebp+var_4], ecx
.text:00008D7A                 mov     ecx, [ebp+var_4]
.text:00008D7D                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:00008D82                 mov     eax, [ebp+var_4]
.text:00008D85                 add     esp, 4
.text:00008D88                 cmp     ebp, esp
.text:00008D8A                 call    __RTC_CheckEsp
.text:00008D8F                 mov     esp, ebp
.text:00008D91                 pop     ebp
.text:00008D92                 retn
.text:00008D92 ??0?$CObjectVector@UCProperty@@@@QAE@XZ endp
.text:00008D92
.text:00008D92 ; ---------------------------------------------------------------------------
.text:00008D93                 align 4
.text:00008D93 _text           ends
.text:00008D93
.text:00008D94 ; ===========================================================================
.text:00008D94
.text:00008D94 ; Segment type: Pure code
.text:00008D94 ; Segment permissions: Read/Execute
.text:00008D94 _text           segment para public 'CODE' use32
.text:00008D94                 assume cs:_text
.text:00008D94                 ;org 8D94h
.text:00008D94 ; COMDAT (pick any)
.text:00008D94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008D94
.text:00008D94 ; =============== S U B R O U T I N E =======================================
.text:00008D94
.text:00008D94 ; Attributes: bp-based frame
.text:00008D94
.text:00008D94 ; public: class CObjectVector<struct CProperty> & __thiscall CObjectVector<struct CProperty>::operator=(class CObjectVector<struct CProperty> const &)
.text:00008D94                 public ??4?$CObjectVector@UCProperty@@@@QAEAAV0@ABV0@@Z
.text:00008D94 ??4?$CObjectVector@UCProperty@@@@QAEAAV0@ABV0@@Z proc near
.text:00008D94                                         ; CODE XREF: Main2(void)+ED3p
.text:00008D94
.text:00008D94 var_24          = dword ptr -24h
.text:00008D94 var_20          = dword ptr -20h
.text:00008D94 var_1C          = dword ptr -1Ch
.text:00008D94 var_18          = dword ptr -18h
.text:00008D94 var_14          = dword ptr -14h
.text:00008D94 var_10          = dword ptr -10h
.text:00008D94 var_C           = dword ptr -0Ch
.text:00008D94 var_4           = dword ptr -4
.text:00008D94 arg_0           = dword ptr  8
.text:00008D94
.text:00008D94                 push    ebp
.text:00008D95                 mov     ebp, esp
.text:00008D97                 push    0FFFFFFFFh
.text:00008D99                 push    offset __ehhandler$??4?$CObjectVector@UCProperty@@@@QAEAAV0@ABV0@@Z
.text:00008D9E                 mov     eax, large fs:0
.text:00008DA4                 push    eax
.text:00008DA5                 sub     esp, 18h
.text:00008DA8                 mov     eax, 0CCCCCCCCh
.text:00008DAD                 mov     [ebp+var_24], eax
.text:00008DB0                 mov     [ebp+var_20], eax
.text:00008DB3                 mov     [ebp+var_1C], eax
.text:00008DB6                 mov     [ebp+var_18], eax
.text:00008DB9                 mov     [ebp+var_14], eax
.text:00008DBC                 mov     [ebp+var_10], eax
.text:00008DBF                 mov     eax, dword ptr ds:___security_cookie
.text:00008DC4                 xor     eax, ebp
.text:00008DC6                 push    eax
.text:00008DC7                 lea     eax, [ebp+var_C]
.text:00008DCA                 mov     large fs:0, eax
.text:00008DD0                 mov     [ebp+var_10], ecx
.text:00008DD3                 mov     eax, [ebp+arg_0]
.text:00008DD6                 cmp     eax, [ebp+var_10]
.text:00008DD9                 jnz     short loc_8DE3
.text:00008DDB                 mov     eax, [ebp+var_10]
.text:00008DDE                 jmp     loc_8E75
.text:00008DE3 ; ---------------------------------------------------------------------------
.text:00008DE3
.text:00008DE3 loc_8DE3:                               ; CODE XREF: CObjectVector<CProperty>::operator=(CObjectVector<CProperty> const &)+45j
.text:00008DE3                 mov     ecx, [ebp+var_10]
.text:00008DE6                 call    ?Clear@?$CObjectVector@UCProperty@@@@QAEXXZ ; CObjectVector<CProperty>::Clear(void)
.text:00008DEB                 mov     ecx, [ebp+arg_0]
.text:00008DEE                 call    ?Size@?$CObjectVector@UCProperty@@@@QBEIXZ ; CObjectVector<CProperty>::Size(void)
.text:00008DF3                 mov     [ebp+var_14], eax
.text:00008DF6                 mov     ecx, [ebp+var_14]
.text:00008DF9                 push    ecx
.text:00008DFA                 mov     ecx, [ebp+var_10]
.text:00008DFD                 call    ?Reserve@?$CRecordVector@PAX@@QAEXI@Z ; CRecordVector<void *>::Reserve(uint)
.text:00008E02                 mov     [ebp+var_18], 0
.text:00008E09                 jmp     short loc_8E14
.text:00008E0B ; ---------------------------------------------------------------------------
.text:00008E0B
.text:00008E0B loc_8E0B:                               ; CODE XREF: CObjectVector<CProperty>::operator=(CObjectVector<CProperty> const &)+DCj
.text:00008E0B                 mov     edx, [ebp+var_18]
.text:00008E0E                 add     edx, 1
.text:00008E11                 mov     [ebp+var_18], edx
.text:00008E14
.text:00008E14 loc_8E14:                               ; CODE XREF: CObjectVector<CProperty>::operator=(CObjectVector<CProperty> const &)+75j
.text:00008E14                 mov     eax, [ebp+var_18]
.text:00008E17                 cmp     eax, [ebp+var_14]
.text:00008E1A                 jnb     short loc_8E72
.text:00008E1C                 push    18h             ; unsigned int
.text:00008E1E                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00008E23                 add     esp, 4
.text:00008E26                 mov     [ebp+var_20], eax
.text:00008E29                 mov     [ebp+var_4], 0
.text:00008E30                 cmp     [ebp+var_20], 0
.text:00008E34                 jz      short loc_8E50
.text:00008E36                 mov     ecx, [ebp+var_18]
.text:00008E39                 push    ecx
.text:00008E3A                 mov     ecx, [ebp+arg_0]
.text:00008E3D                 call    ??A?$CObjectVector@UCProperty@@@@QBEABUCProperty@@I@Z ; CObjectVector<CProperty>::operator[](uint)
.text:00008E42                 push    eax             ; struct CProperty *
.text:00008E43                 mov     ecx, [ebp+var_20] ; this
.text:00008E46                 call    ??0CProperty@@QAE@ABU0@@Z ; CProperty::CProperty(CProperty const &)
.text:00008E4B                 mov     [ebp+var_24], eax
.text:00008E4E                 jmp     short loc_8E57
.text:00008E50 ; ---------------------------------------------------------------------------
.text:00008E50
.text:00008E50 loc_8E50:                               ; CODE XREF: CObjectVector<CProperty>::operator=(CObjectVector<CProperty> const &)+A0j
.text:00008E50                 mov     [ebp+var_24], 0
.text:00008E57
.text:00008E57 loc_8E57:                               ; CODE XREF: CObjectVector<CProperty>::operator=(CObjectVector<CProperty> const &)+BAj
.text:00008E57                 mov     edx, [ebp+var_24]
.text:00008E5A                 mov     [ebp+var_1C], edx
.text:00008E5D                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00008E64                 mov     eax, [ebp+var_1C]
.text:00008E67                 push    eax
.text:00008E68                 mov     ecx, [ebp+var_10]
.text:00008E6B                 call    ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ; CRecordVector<void *>::AddInReserved(void * const)
.text:00008E70                 jmp     short loc_8E0B
.text:00008E72 ; ---------------------------------------------------------------------------
.text:00008E72
.text:00008E72 loc_8E72:                               ; CODE XREF: CObjectVector<CProperty>::operator=(CObjectVector<CProperty> const &)+86j
.text:00008E72                 mov     eax, [ebp+var_10]
.text:00008E75
.text:00008E75 loc_8E75:                               ; CODE XREF: CObjectVector<CProperty>::operator=(CObjectVector<CProperty> const &)+4Aj
.text:00008E75                 mov     ecx, [ebp+var_C]
.text:00008E78                 mov     large fs:0, ecx
.text:00008E7F                 pop     ecx
.text:00008E80                 add     esp, 24h
.text:00008E83                 cmp     ebp, esp
.text:00008E85                 call    __RTC_CheckEsp
.text:00008E8A                 mov     esp, ebp
.text:00008E8C                 pop     ebp
.text:00008E8D                 retn    4
.text:00008E8D ??4?$CObjectVector@UCProperty@@@@QAEAAV0@ABV0@@Z endp
.text:00008E8D
.text:00008E8D _text           ends
.text:00008E8D
.text$x:00008E90 ; ===========================================================================
.text$x:00008E90
.text$x:00008E90 ; Segment type: Pure code
.text$x:00008E90 ; Segment permissions: Read/Execute
.text$x:00008E90 _text$x         segment para public 'CODE' use32
.text$x:00008E90                 assume cs:_text$x
.text$x:00008E90                 ;org 8E90h
.text$x:00008E90 ; COMDAT (pick associative to section at 8D94)
.text$x:00008E90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008E90
.text$x:00008E90 ; =============== S U B R O U T I N E =======================================
.text$x:00008E90
.text$x:00008E90
.text$x:00008E90 __unwindfunclet$??4?$CObjectVector@UCProperty@@@@QAEAAV0@ABV0@@Z$0 proc near
.text$x:00008E90                                         ; DATA XREF: .xdata$x:00008EBCo
.text$x:00008E90                 mov     eax, [ebp-20h]
.text$x:00008E93                 push    eax             ; void *
.text$x:00008E94                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00008E99                 pop     ecx
.text$x:00008E9A                 retn
.text$x:00008E9A __unwindfunclet$??4?$CObjectVector@UCProperty@@@@QAEAAV0@ABV0@@Z$0 endp
.text$x:00008E9A
.text$x:00008E9B
.text$x:00008E9B ; =============== S U B R O U T I N E =======================================
.text$x:00008E9B
.text$x:00008E9B
.text$x:00008E9B __ehhandler$??4?$CObjectVector@UCProperty@@@@QAEAAV0@ABV0@@Z proc near
.text$x:00008E9B                                         ; DATA XREF: CObjectVector<CProperty>::operator=(CObjectVector<CProperty> const &)+5o
.text$x:00008E9B
.text$x:00008E9B arg_4           = dword ptr  8
.text$x:00008E9B
.text$x:00008E9B                 mov     edx, [esp+arg_4]
.text$x:00008E9F                 lea     eax, [edx+0Ch]
.text$x:00008EA2                 mov     ecx, [edx-1Ch]
.text$x:00008EA5                 xor     ecx, eax
.text$x:00008EA7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008EAC                 mov     eax, offset __ehfuncinfo$??4?$CObjectVector@UCProperty@@@@QAEAAV0@ABV0@@Z
.text$x:00008EB1                 jmp     ___CxxFrameHandler3
.text$x:00008EB1 __ehhandler$??4?$CObjectVector@UCProperty@@@@QAEAAV0@ABV0@@Z endp
.text$x:00008EB1
.text$x:00008EB1 ; ---------------------------------------------------------------------------
.text$x:00008EB6                 align 4
.text$x:00008EB6 _text$x         ends
.text$x:00008EB6
.xdata$x:00008EB8 ; ===========================================================================
.xdata$x:00008EB8
.xdata$x:00008EB8 ; Segment type: Pure data
.xdata$x:00008EB8 ; Segment permissions: Read
.xdata$x:00008EB8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008EB8                 assume cs:_xdata$x
.xdata$x:00008EB8                 ;org 8EB8h
.xdata$x:00008EB8 ; COMDAT (pick associative to section at 8D94)
.xdata$x:00008EB8 __unwindtable$??4?$CObjectVector@UCProperty@@@@QAEAAV0@ABV0@@Z db 0FFh
.xdata$x:00008EB8                                         ; DATA XREF: .xdata$x:00008EC8o
.xdata$x:00008EB9                 db 0FFh
.xdata$x:00008EBA                 db 0FFh
.xdata$x:00008EBB                 db 0FFh
.xdata$x:00008EBC                 dd offset __unwindfunclet$??4?$CObjectVector@UCProperty@@@@QAEAAV0@ABV0@@Z$0
.xdata$x:00008EC0 __ehfuncinfo$??4?$CObjectVector@UCProperty@@@@QAEAAV0@ABV0@@Z db  22h ; "
.xdata$x:00008EC0                                         ; DATA XREF: __ehhandler$??4?$CObjectVector@UCProperty@@@@QAEAAV0@ABV0@@Z+11o
.xdata$x:00008EC1                 db    5
.xdata$x:00008EC2                 db  93h ; ô
.xdata$x:00008EC3                 db  19h
.xdata$x:00008EC4                 db    1
.xdata$x:00008EC5                 db    0
.xdata$x:00008EC6                 db    0
.xdata$x:00008EC7                 db    0
.xdata$x:00008EC8                 dd offset __unwindtable$??4?$CObjectVector@UCProperty@@@@QAEAAV0@ABV0@@Z
.xdata$x:00008ECC                 align 20h
.xdata$x:00008EE0                 db    1
.xdata$x:00008EE1                 db    0
.xdata$x:00008EE2                 db    0
.xdata$x:00008EE3                 db    0
.xdata$x:00008EE3 _xdata$x        ends
.xdata$x:00008EE3
.text:00008EE4 ; ===========================================================================
.text:00008EE4
.text:00008EE4 ; Segment type: Pure code
.text:00008EE4 ; Segment permissions: Read/Execute
.text:00008EE4 _text           segment para public 'CODE' use32
.text:00008EE4                 assume cs:_text
.text:00008EE4                 ;org 8EE4h
.text:00008EE4 ; COMDAT (pick any)
.text:00008EE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008EE4
.text:00008EE4 ; =============== S U B R O U T I N E =======================================
.text:00008EE4
.text:00008EE4 ; Attributes: bp-based frame
.text:00008EE4
.text:00008EE4 ; public: __thiscall CObjectVector<struct CProperty>::~CObjectVector<struct CProperty>(void)
.text:00008EE4                 public ??1?$CObjectVector@UCProperty@@@@QAE@XZ
.text:00008EE4 ??1?$CObjectVector@UCProperty@@@@QAE@XZ proc near
.text:00008EE4                                         ; CODE XREF: __unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$6+6j
.text:00008EE4                                         ; CCompressionMethodMode::~CCompressionMethodMode(void)+14p ...
.text:00008EE4
.text:00008EE4 var_20          = dword ptr -20h
.text:00008EE4 var_1C          = dword ptr -1Ch
.text:00008EE4 var_18          = dword ptr -18h
.text:00008EE4 var_14          = dword ptr -14h
.text:00008EE4 var_10          = dword ptr -10h
.text:00008EE4 var_C           = dword ptr -0Ch
.text:00008EE4 var_4           = dword ptr -4
.text:00008EE4
.text:00008EE4                 push    ebp
.text:00008EE5                 mov     ebp, esp
.text:00008EE7                 push    0FFFFFFFFh
.text:00008EE9                 push    offset __ehhandler$??1?$CObjectVector@UCProperty@@@@QAE@XZ
.text:00008EEE                 mov     eax, large fs:0
.text:00008EF4                 push    eax
.text:00008EF5                 sub     esp, 14h
.text:00008EF8                 mov     eax, 0CCCCCCCCh
.text:00008EFD                 mov     [ebp+var_20], eax
.text:00008F00                 mov     [ebp+var_1C], eax
.text:00008F03                 mov     [ebp+var_18], eax
.text:00008F06                 mov     [ebp+var_14], eax
.text:00008F09                 mov     [ebp+var_10], eax
.text:00008F0C                 mov     eax, dword ptr ds:___security_cookie
.text:00008F11                 xor     eax, ebp
.text:00008F13                 push    eax
.text:00008F14                 lea     eax, [ebp+var_C]
.text:00008F17                 mov     large fs:0, eax
.text:00008F1D                 mov     [ebp+var_10], ecx
.text:00008F20                 mov     [ebp+var_4], 0
.text:00008F27                 mov     ecx, [ebp+var_10]
.text:00008F2A                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00008F2F                 mov     [ebp+var_14], eax
.text:00008F32
.text:00008F32 loc_8F32:                               ; CODE XREF: CObjectVector<CProperty>::~CObjectVector<CProperty>(void):loc_8F74j
.text:00008F32                 cmp     [ebp+var_14], 0
.text:00008F36                 jz      short loc_8F76
.text:00008F38                 mov     eax, [ebp+var_14]
.text:00008F3B                 sub     eax, 1
.text:00008F3E                 mov     [ebp+var_14], eax
.text:00008F41                 mov     ecx, [ebp+var_14]
.text:00008F44                 push    ecx
.text:00008F45                 mov     ecx, [ebp+var_10]
.text:00008F48                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00008F4D                 mov     edx, [eax]
.text:00008F4F                 mov     [ebp+var_1C], edx
.text:00008F52                 mov     eax, [ebp+var_1C]
.text:00008F55                 mov     [ebp+var_18], eax
.text:00008F58                 cmp     [ebp+var_18], 0
.text:00008F5C                 jz      short loc_8F6D
.text:00008F5E                 push    1
.text:00008F60                 mov     ecx, [ebp+var_18]
.text:00008F63                 call    ??_GCProperty@@QAEPAXI@Z ; CProperty::`scalar deleting destructor'(uint)
.text:00008F68                 mov     [ebp+var_20], eax
.text:00008F6B                 jmp     short loc_8F74
.text:00008F6D ; ---------------------------------------------------------------------------
.text:00008F6D
.text:00008F6D loc_8F6D:                               ; CODE XREF: CObjectVector<CProperty>::~CObjectVector<CProperty>(void)+78j
.text:00008F6D                 mov     [ebp+var_20], 0
.text:00008F74
.text:00008F74 loc_8F74:                               ; CODE XREF: CObjectVector<CProperty>::~CObjectVector<CProperty>(void)+87j
.text:00008F74                 jmp     short loc_8F32
.text:00008F76 ; ---------------------------------------------------------------------------
.text:00008F76
.text:00008F76 loc_8F76:                               ; CODE XREF: CObjectVector<CProperty>::~CObjectVector<CProperty>(void)+52j
.text:00008F76                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00008F7D                 mov     ecx, [ebp+var_10]
.text:00008F80                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00008F85                 mov     ecx, [ebp+var_C]
.text:00008F88                 mov     large fs:0, ecx
.text:00008F8F                 pop     ecx
.text:00008F90                 add     esp, 20h
.text:00008F93                 cmp     ebp, esp
.text:00008F95                 call    __RTC_CheckEsp
.text:00008F9A                 mov     esp, ebp
.text:00008F9C                 pop     ebp
.text:00008F9D                 retn
.text:00008F9D ??1?$CObjectVector@UCProperty@@@@QAE@XZ endp
.text:00008F9D
.text:00008F9D ; ---------------------------------------------------------------------------
.text:00008F9E                 align 10h
.text:00008F9E _text           ends
.text:00008F9E
.text$x:00008FA0 ; ===========================================================================
.text$x:00008FA0
.text$x:00008FA0 ; Segment type: Pure code
.text$x:00008FA0 ; Segment permissions: Read/Execute
.text$x:00008FA0 _text$x         segment para public 'CODE' use32
.text$x:00008FA0                 assume cs:_text$x
.text$x:00008FA0                 ;org 8FA0h
.text$x:00008FA0 ; COMDAT (pick associative to section at 8EE4)
.text$x:00008FA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008FA0
.text$x:00008FA0 ; =============== S U B R O U T I N E =======================================
.text$x:00008FA0
.text$x:00008FA0
.text$x:00008FA0 __unwindfunclet$??1?$CObjectVector@UCProperty@@@@QAE@XZ$0 proc near
.text$x:00008FA0                                         ; DATA XREF: .xdata$x:00008FC8o
.text$x:00008FA0                 mov     ecx, [ebp-10h]
.text$x:00008FA3                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:00008FA3 __unwindfunclet$??1?$CObjectVector@UCProperty@@@@QAE@XZ$0 endp
.text$x:00008FA3
.text$x:00008FA8
.text$x:00008FA8 ; =============== S U B R O U T I N E =======================================
.text$x:00008FA8
.text$x:00008FA8
.text$x:00008FA8 __ehhandler$??1?$CObjectVector@UCProperty@@@@QAE@XZ proc near
.text$x:00008FA8                                         ; DATA XREF: CObjectVector<CProperty>::~CObjectVector<CProperty>(void)+5o
.text$x:00008FA8
.text$x:00008FA8 arg_4           = dword ptr  8
.text$x:00008FA8
.text$x:00008FA8                 mov     edx, [esp+arg_4]
.text$x:00008FAC                 lea     eax, [edx+0Ch]
.text$x:00008FAF                 mov     ecx, [edx-18h]
.text$x:00008FB2                 xor     ecx, eax
.text$x:00008FB4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008FB9                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@UCProperty@@@@QAE@XZ
.text$x:00008FBE                 jmp     ___CxxFrameHandler3
.text$x:00008FBE __ehhandler$??1?$CObjectVector@UCProperty@@@@QAE@XZ endp
.text$x:00008FBE
.text$x:00008FBE ; ---------------------------------------------------------------------------
.text$x:00008FC3                 align 4
.text$x:00008FC3 _text$x         ends
.text$x:00008FC3
.xdata$x:00008FC4 ; ===========================================================================
.xdata$x:00008FC4
.xdata$x:00008FC4 ; Segment type: Pure data
.xdata$x:00008FC4 ; Segment permissions: Read
.xdata$x:00008FC4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008FC4                 assume cs:_xdata$x
.xdata$x:00008FC4                 ;org 8FC4h
.xdata$x:00008FC4 ; COMDAT (pick associative to section at 8EE4)
.xdata$x:00008FC4 __unwindtable$??1?$CObjectVector@UCProperty@@@@QAE@XZ db 0FFh
.xdata$x:00008FC4                                         ; DATA XREF: .xdata$x:00008FD4o
.xdata$x:00008FC5                 db 0FFh
.xdata$x:00008FC6                 db 0FFh
.xdata$x:00008FC7                 db 0FFh
.xdata$x:00008FC8                 dd offset __unwindfunclet$??1?$CObjectVector@UCProperty@@@@QAE@XZ$0
.xdata$x:00008FCC __ehfuncinfo$??1?$CObjectVector@UCProperty@@@@QAE@XZ db  22h ; "
.xdata$x:00008FCC                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@UCProperty@@@@QAE@XZ+11o
.xdata$x:00008FCD                 db    5
.xdata$x:00008FCE                 db  93h ; ô
.xdata$x:00008FCF                 db  19h
.xdata$x:00008FD0                 db    1
.xdata$x:00008FD1                 db    0
.xdata$x:00008FD2                 db    0
.xdata$x:00008FD3                 db    0
.xdata$x:00008FD4                 dd offset __unwindtable$??1?$CObjectVector@UCProperty@@@@QAE@XZ
.xdata$x:00008FD8                 db    0
.xdata$x:00008FD9                 db    0
.xdata$x:00008FDA                 db    0
.xdata$x:00008FDB                 db    0
.xdata$x:00008FDC                 db    0
.xdata$x:00008FDD                 db    0
.xdata$x:00008FDE                 db    0
.xdata$x:00008FDF                 db    0
.xdata$x:00008FE0                 db    0
.xdata$x:00008FE1                 db    0
.xdata$x:00008FE2                 db    0
.xdata$x:00008FE3                 db    0
.xdata$x:00008FE4                 db    0
.xdata$x:00008FE5                 db    0
.xdata$x:00008FE6                 db    0
.xdata$x:00008FE7                 db    0
.xdata$x:00008FE8                 db    0
.xdata$x:00008FE9                 db    0
.xdata$x:00008FEA                 db    0
.xdata$x:00008FEB                 db    0
.xdata$x:00008FEC                 db    1
.xdata$x:00008FED                 db    0
.xdata$x:00008FEE                 db    0
.xdata$x:00008FEF                 db    0
.xdata$x:00008FEF _xdata$x        ends
.xdata$x:00008FEF
.text:00008FF0 ; ===========================================================================
.text:00008FF0
.text:00008FF0 ; Segment type: Pure code
.text:00008FF0 ; Segment permissions: Read/Execute
.text:00008FF0 _text           segment para public 'CODE' use32
.text:00008FF0                 assume cs:_text
.text:00008FF0                 ;org 8FF0h
.text:00008FF0 ; COMDAT (pick any)
.text:00008FF0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008FF0
.text:00008FF0 ; =============== S U B R O U T I N E =======================================
.text:00008FF0
.text:00008FF0 ; Attributes: bp-based frame
.text:00008FF0
.text:00008FF0 ; public: __thiscall CObjectVector<struct CUpdateArchiveCommand>::CObjectVector<struct CUpdateArchiveCommand>(void)
.text:00008FF0                 public ??0?$CObjectVector@UCUpdateArchiveCommand@@@@QAE@XZ
.text:00008FF0 ??0?$CObjectVector@UCUpdateArchiveCommand@@@@QAE@XZ proc near
.text:00008FF0                                         ; CODE XREF: CUpdateOptions::CUpdateOptions(void)+42p
.text:00008FF0
.text:00008FF0 var_4           = dword ptr -4
.text:00008FF0
.text:00008FF0                 push    ebp
.text:00008FF1                 mov     ebp, esp
.text:00008FF3                 push    ecx
.text:00008FF4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008FFB                 mov     [ebp+var_4], ecx
.text:00008FFE                 mov     ecx, [ebp+var_4]
.text:00009001                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:00009006                 mov     eax, [ebp+var_4]
.text:00009009                 add     esp, 4
.text:0000900C                 cmp     ebp, esp
.text:0000900E                 call    __RTC_CheckEsp
.text:00009013                 mov     esp, ebp
.text:00009015                 pop     ebp
.text:00009016                 retn
.text:00009016 ??0?$CObjectVector@UCUpdateArchiveCommand@@@@QAE@XZ endp
.text:00009016
.text:00009016 ; ---------------------------------------------------------------------------
.text:00009017                 align 4
.text:00009017 _text           ends
.text:00009017
.text:00009018 ; ===========================================================================
.text:00009018
.text:00009018 ; Segment type: Pure code
.text:00009018 ; Segment permissions: Read/Execute
.text:00009018 _text           segment para public 'CODE' use32
.text:00009018                 assume cs:_text
.text:00009018                 ;org 9018h
.text:00009018 ; COMDAT (pick any)
.text:00009018                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009018
.text:00009018 ; =============== S U B R O U T I N E =======================================
.text:00009018
.text:00009018 ; Attributes: bp-based frame
.text:00009018
.text:00009018 ; public: __thiscall CObjectVector<struct CUpdateArchiveCommand>::~CObjectVector<struct CUpdateArchiveCommand>(void)
.text:00009018                 public ??1?$CObjectVector@UCUpdateArchiveCommand@@@@QAE@XZ
.text:00009018 ??1?$CObjectVector@UCUpdateArchiveCommand@@@@QAE@XZ proc near
.text:00009018                                         ; CODE XREF: __unwindfunclet$??0CUpdateOptions@@QAE@XZ$1+6j
.text:00009018                                         ; CUpdateOptions::~CUpdateOptions(void)+C7p ...
.text:00009018
.text:00009018 var_20          = dword ptr -20h
.text:00009018 var_1C          = dword ptr -1Ch
.text:00009018 var_18          = dword ptr -18h
.text:00009018 var_14          = dword ptr -14h
.text:00009018 var_10          = dword ptr -10h
.text:00009018 var_C           = dword ptr -0Ch
.text:00009018 var_4           = dword ptr -4
.text:00009018
.text:00009018                 push    ebp
.text:00009019                 mov     ebp, esp
.text:0000901B                 push    0FFFFFFFFh
.text:0000901D                 push    offset __ehhandler$??1?$CObjectVector@UCUpdateArchiveCommand@@@@QAE@XZ
.text:00009022                 mov     eax, large fs:0
.text:00009028                 push    eax
.text:00009029                 sub     esp, 14h
.text:0000902C                 mov     eax, 0CCCCCCCCh
.text:00009031                 mov     [ebp+var_20], eax
.text:00009034                 mov     [ebp+var_1C], eax
.text:00009037                 mov     [ebp+var_18], eax
.text:0000903A                 mov     [ebp+var_14], eax
.text:0000903D                 mov     [ebp+var_10], eax
.text:00009040                 mov     eax, dword ptr ds:___security_cookie
.text:00009045                 xor     eax, ebp
.text:00009047                 push    eax
.text:00009048                 lea     eax, [ebp+var_C]
.text:0000904B                 mov     large fs:0, eax
.text:00009051                 mov     [ebp+var_10], ecx
.text:00009054                 mov     [ebp+var_4], 0
.text:0000905B                 mov     ecx, [ebp+var_10]
.text:0000905E                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00009063                 mov     [ebp+var_14], eax
.text:00009066
.text:00009066 loc_9066:                               ; CODE XREF: CObjectVector<CUpdateArchiveCommand>::~CObjectVector<CUpdateArchiveCommand>(void):loc_90A8j
.text:00009066                 cmp     [ebp+var_14], 0
.text:0000906A                 jz      short loc_90AA
.text:0000906C                 mov     eax, [ebp+var_14]
.text:0000906F                 sub     eax, 1
.text:00009072                 mov     [ebp+var_14], eax
.text:00009075                 mov     ecx, [ebp+var_14]
.text:00009078                 push    ecx
.text:00009079                 mov     ecx, [ebp+var_10]
.text:0000907C                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00009081                 mov     edx, [eax]
.text:00009083                 mov     [ebp+var_1C], edx
.text:00009086                 mov     eax, [ebp+var_1C]
.text:00009089                 mov     [ebp+var_18], eax
.text:0000908C                 cmp     [ebp+var_18], 0
.text:00009090                 jz      short loc_90A1
.text:00009092                 push    1
.text:00009094                 mov     ecx, [ebp+var_18]
.text:00009097                 call    ??_GCUpdateArchiveCommand@@QAEPAXI@Z ; CUpdateArchiveCommand::`scalar deleting destructor'(uint)
.text:0000909C                 mov     [ebp+var_20], eax
.text:0000909F                 jmp     short loc_90A8
.text:000090A1 ; ---------------------------------------------------------------------------
.text:000090A1
.text:000090A1 loc_90A1:                               ; CODE XREF: CObjectVector<CUpdateArchiveCommand>::~CObjectVector<CUpdateArchiveCommand>(void)+78j
.text:000090A1                 mov     [ebp+var_20], 0
.text:000090A8
.text:000090A8 loc_90A8:                               ; CODE XREF: CObjectVector<CUpdateArchiveCommand>::~CObjectVector<CUpdateArchiveCommand>(void)+87j
.text:000090A8                 jmp     short loc_9066
.text:000090AA ; ---------------------------------------------------------------------------
.text:000090AA
.text:000090AA loc_90AA:                               ; CODE XREF: CObjectVector<CUpdateArchiveCommand>::~CObjectVector<CUpdateArchiveCommand>(void)+52j
.text:000090AA                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000090B1                 mov     ecx, [ebp+var_10]
.text:000090B4                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:000090B9                 mov     ecx, [ebp+var_C]
.text:000090BC                 mov     large fs:0, ecx
.text:000090C3                 pop     ecx
.text:000090C4                 add     esp, 20h
.text:000090C7                 cmp     ebp, esp
.text:000090C9                 call    __RTC_CheckEsp
.text:000090CE                 mov     esp, ebp
.text:000090D0                 pop     ebp
.text:000090D1                 retn
.text:000090D1 ??1?$CObjectVector@UCUpdateArchiveCommand@@@@QAE@XZ endp
.text:000090D1
.text:000090D1 ; ---------------------------------------------------------------------------
.text:000090D2                 align 4
.text:000090D2 _text           ends
.text:000090D2
.text$x:000090D4 ; ===========================================================================
.text$x:000090D4
.text$x:000090D4 ; Segment type: Pure code
.text$x:000090D4 ; Segment permissions: Read/Execute
.text$x:000090D4 _text$x         segment para public 'CODE' use32
.text$x:000090D4                 assume cs:_text$x
.text$x:000090D4                 ;org 90D4h
.text$x:000090D4 ; COMDAT (pick associative to section at 9018)
.text$x:000090D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000090D4
.text$x:000090D4 ; =============== S U B R O U T I N E =======================================
.text$x:000090D4
.text$x:000090D4
.text$x:000090D4 __unwindfunclet$??1?$CObjectVector@UCUpdateArchiveCommand@@@@QAE@XZ$0 proc near
.text$x:000090D4                                         ; DATA XREF: .xdata$x:000090FCo
.text$x:000090D4                 mov     ecx, [ebp-10h]
.text$x:000090D7                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:000090D7 __unwindfunclet$??1?$CObjectVector@UCUpdateArchiveCommand@@@@QAE@XZ$0 endp
.text$x:000090D7
.text$x:000090DC
.text$x:000090DC ; =============== S U B R O U T I N E =======================================
.text$x:000090DC
.text$x:000090DC
.text$x:000090DC __ehhandler$??1?$CObjectVector@UCUpdateArchiveCommand@@@@QAE@XZ proc near
.text$x:000090DC                                         ; DATA XREF: CObjectVector<CUpdateArchiveCommand>::~CObjectVector<CUpdateArchiveCommand>(void)+5o
.text$x:000090DC
.text$x:000090DC arg_4           = dword ptr  8
.text$x:000090DC
.text$x:000090DC                 mov     edx, [esp+arg_4]
.text$x:000090E0                 lea     eax, [edx+0Ch]
.text$x:000090E3                 mov     ecx, [edx-18h]
.text$x:000090E6                 xor     ecx, eax
.text$x:000090E8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000090ED                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@UCUpdateArchiveCommand@@@@QAE@XZ
.text$x:000090F2                 jmp     ___CxxFrameHandler3
.text$x:000090F2 __ehhandler$??1?$CObjectVector@UCUpdateArchiveCommand@@@@QAE@XZ endp
.text$x:000090F2
.text$x:000090F2 ; ---------------------------------------------------------------------------
.text$x:000090F7                 align 4
.text$x:000090F7 _text$x         ends
.text$x:000090F7
.xdata$x:000090F8 ; ===========================================================================
.xdata$x:000090F8
.xdata$x:000090F8 ; Segment type: Pure data
.xdata$x:000090F8 ; Segment permissions: Read
.xdata$x:000090F8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000090F8                 assume cs:_xdata$x
.xdata$x:000090F8                 ;org 90F8h
.xdata$x:000090F8 ; COMDAT (pick associative to section at 9018)
.xdata$x:000090F8 __unwindtable$??1?$CObjectVector@UCUpdateArchiveCommand@@@@QAE@XZ db 0FFh
.xdata$x:000090F8                                         ; DATA XREF: .xdata$x:00009108o
.xdata$x:000090F9                 db 0FFh
.xdata$x:000090FA                 db 0FFh
.xdata$x:000090FB                 db 0FFh
.xdata$x:000090FC                 dd offset __unwindfunclet$??1?$CObjectVector@UCUpdateArchiveCommand@@@@QAE@XZ$0
.xdata$x:00009100 __ehfuncinfo$??1?$CObjectVector@UCUpdateArchiveCommand@@@@QAE@XZ db  22h ; "
.xdata$x:00009100                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@UCUpdateArchiveCommand@@@@QAE@XZ+11o
.xdata$x:00009101                 db    5
.xdata$x:00009102                 db  93h ; ô
.xdata$x:00009103                 db  19h
.xdata$x:00009104                 db    1
.xdata$x:00009105                 db    0
.xdata$x:00009106                 db    0
.xdata$x:00009107                 db    0
.xdata$x:00009108                 dd offset __unwindtable$??1?$CObjectVector@UCUpdateArchiveCommand@@@@QAE@XZ
.xdata$x:0000910C                 align 20h
.xdata$x:00009120                 db    1
.xdata$x:00009121                 db    0
.xdata$x:00009122                 db    0
.xdata$x:00009123                 db    0
.xdata$x:00009123 _xdata$x        ends
.xdata$x:00009123
.text:00009124 ; ===========================================================================
.text:00009124
.text:00009124 ; Segment type: Pure code
.text:00009124 ; Segment permissions: Read/Execute
.text:00009124 _text           segment para public 'CODE' use32
.text:00009124                 assume cs:_text
.text:00009124                 ;org 9124h
.text:00009124 ; COMDAT (pick any)
.text:00009124                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009124
.text:00009124 ; =============== S U B R O U T I N E =======================================
.text:00009124
.text:00009124 ; Attributes: bp-based frame
.text:00009124
.text:00009124 ; public: __thiscall CObjectVector<struct CRenamePair>::CObjectVector<struct CRenamePair>(void)
.text:00009124                 public ??0?$CObjectVector@UCRenamePair@@@@QAE@XZ
.text:00009124 ??0?$CObjectVector@UCRenamePair@@@@QAE@XZ proc near
.text:00009124                                         ; CODE XREF: CUpdateOptions::CUpdateOptions(void)+166p
.text:00009124
.text:00009124 var_4           = dword ptr -4
.text:00009124
.text:00009124                 push    ebp
.text:00009125                 mov     ebp, esp
.text:00009127                 push    ecx
.text:00009128                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000912F                 mov     [ebp+var_4], ecx
.text:00009132                 mov     ecx, [ebp+var_4]
.text:00009135                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:0000913A                 mov     eax, [ebp+var_4]
.text:0000913D                 add     esp, 4
.text:00009140                 cmp     ebp, esp
.text:00009142                 call    __RTC_CheckEsp
.text:00009147                 mov     esp, ebp
.text:00009149                 pop     ebp
.text:0000914A                 retn
.text:0000914A ??0?$CObjectVector@UCRenamePair@@@@QAE@XZ endp
.text:0000914A
.text:0000914A ; ---------------------------------------------------------------------------
.text:0000914B                 align 4
.text:0000914B _text           ends
.text:0000914B
.text:0000914C ; ===========================================================================
.text:0000914C
.text:0000914C ; Segment type: Pure code
.text:0000914C ; Segment permissions: Read/Execute
.text:0000914C _text           segment para public 'CODE' use32
.text:0000914C                 assume cs:_text
.text:0000914C                 ;org 914Ch
.text:0000914C ; COMDAT (pick any)
.text:0000914C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000914C
.text:0000914C ; =============== S U B R O U T I N E =======================================
.text:0000914C
.text:0000914C ; Attributes: bp-based frame
.text:0000914C
.text:0000914C ; public: __thiscall CObjectVector<struct CRenamePair>::~CObjectVector<struct CRenamePair>(void)
.text:0000914C                 public ??1?$CObjectVector@UCRenamePair@@@@QAE@XZ
.text:0000914C ??1?$CObjectVector@UCRenamePair@@@@QAE@XZ proc near
.text:0000914C                                         ; CODE XREF: __unwindfunclet$??0CUpdateOptions@@QAE@XZ$8+9j
.text:0000914C                                         ; CUpdateOptions::~CUpdateOptions(void)+4Fp ...
.text:0000914C
.text:0000914C var_20          = dword ptr -20h
.text:0000914C var_1C          = dword ptr -1Ch
.text:0000914C var_18          = dword ptr -18h
.text:0000914C var_14          = dword ptr -14h
.text:0000914C var_10          = dword ptr -10h
.text:0000914C var_C           = dword ptr -0Ch
.text:0000914C var_4           = dword ptr -4
.text:0000914C
.text:0000914C                 push    ebp
.text:0000914D                 mov     ebp, esp
.text:0000914F                 push    0FFFFFFFFh
.text:00009151                 push    offset __ehhandler$??1?$CObjectVector@UCRenamePair@@@@QAE@XZ
.text:00009156                 mov     eax, large fs:0
.text:0000915C                 push    eax
.text:0000915D                 sub     esp, 14h
.text:00009160                 mov     eax, 0CCCCCCCCh
.text:00009165                 mov     [ebp+var_20], eax
.text:00009168                 mov     [ebp+var_1C], eax
.text:0000916B                 mov     [ebp+var_18], eax
.text:0000916E                 mov     [ebp+var_14], eax
.text:00009171                 mov     [ebp+var_10], eax
.text:00009174                 mov     eax, dword ptr ds:___security_cookie
.text:00009179                 xor     eax, ebp
.text:0000917B                 push    eax
.text:0000917C                 lea     eax, [ebp+var_C]
.text:0000917F                 mov     large fs:0, eax
.text:00009185                 mov     [ebp+var_10], ecx
.text:00009188                 mov     [ebp+var_4], 0
.text:0000918F                 mov     ecx, [ebp+var_10]
.text:00009192                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00009197                 mov     [ebp+var_14], eax
.text:0000919A
.text:0000919A loc_919A:                               ; CODE XREF: CObjectVector<CRenamePair>::~CObjectVector<CRenamePair>(void):loc_91DCj
.text:0000919A                 cmp     [ebp+var_14], 0
.text:0000919E                 jz      short loc_91DE
.text:000091A0                 mov     eax, [ebp+var_14]
.text:000091A3                 sub     eax, 1
.text:000091A6                 mov     [ebp+var_14], eax
.text:000091A9                 mov     ecx, [ebp+var_14]
.text:000091AC                 push    ecx
.text:000091AD                 mov     ecx, [ebp+var_10]
.text:000091B0                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:000091B5                 mov     edx, [eax]
.text:000091B7                 mov     [ebp+var_1C], edx
.text:000091BA                 mov     eax, [ebp+var_1C]
.text:000091BD                 mov     [ebp+var_18], eax
.text:000091C0                 cmp     [ebp+var_18], 0
.text:000091C4                 jz      short loc_91D5
.text:000091C6                 push    1
.text:000091C8                 mov     ecx, [ebp+var_18]
.text:000091CB                 call    ??_GCRenamePair@@QAEPAXI@Z ; CRenamePair::`scalar deleting destructor'(uint)
.text:000091D0                 mov     [ebp+var_20], eax
.text:000091D3                 jmp     short loc_91DC
.text:000091D5 ; ---------------------------------------------------------------------------
.text:000091D5
.text:000091D5 loc_91D5:                               ; CODE XREF: CObjectVector<CRenamePair>::~CObjectVector<CRenamePair>(void)+78j
.text:000091D5                 mov     [ebp+var_20], 0
.text:000091DC
.text:000091DC loc_91DC:                               ; CODE XREF: CObjectVector<CRenamePair>::~CObjectVector<CRenamePair>(void)+87j
.text:000091DC                 jmp     short loc_919A
.text:000091DE ; ---------------------------------------------------------------------------
.text:000091DE
.text:000091DE loc_91DE:                               ; CODE XREF: CObjectVector<CRenamePair>::~CObjectVector<CRenamePair>(void)+52j
.text:000091DE                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000091E5                 mov     ecx, [ebp+var_10]
.text:000091E8                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:000091ED                 mov     ecx, [ebp+var_C]
.text:000091F0                 mov     large fs:0, ecx
.text:000091F7                 pop     ecx
.text:000091F8                 add     esp, 20h
.text:000091FB                 cmp     ebp, esp
.text:000091FD                 call    __RTC_CheckEsp
.text:00009202                 mov     esp, ebp
.text:00009204                 pop     ebp
.text:00009205                 retn
.text:00009205 ??1?$CObjectVector@UCRenamePair@@@@QAE@XZ endp
.text:00009205
.text:00009205 ; ---------------------------------------------------------------------------
.text:00009206                 align 4
.text:00009206 _text           ends
.text:00009206
.text$x:00009208 ; ===========================================================================
.text$x:00009208
.text$x:00009208 ; Segment type: Pure code
.text$x:00009208 ; Segment permissions: Read/Execute
.text$x:00009208 _text$x         segment para public 'CODE' use32
.text$x:00009208                 assume cs:_text$x
.text$x:00009208                 ;org 9208h
.text$x:00009208 ; COMDAT (pick associative to section at 914C)
.text$x:00009208                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00009208
.text$x:00009208 ; =============== S U B R O U T I N E =======================================
.text$x:00009208
.text$x:00009208
.text$x:00009208 __unwindfunclet$??1?$CObjectVector@UCRenamePair@@@@QAE@XZ$0 proc near
.text$x:00009208                                         ; DATA XREF: .xdata$x:00009230o
.text$x:00009208                 mov     ecx, [ebp-10h]
.text$x:0000920B                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:0000920B __unwindfunclet$??1?$CObjectVector@UCRenamePair@@@@QAE@XZ$0 endp
.text$x:0000920B
.text$x:00009210
.text$x:00009210 ; =============== S U B R O U T I N E =======================================
.text$x:00009210
.text$x:00009210
.text$x:00009210 __ehhandler$??1?$CObjectVector@UCRenamePair@@@@QAE@XZ proc near
.text$x:00009210                                         ; DATA XREF: CObjectVector<CRenamePair>::~CObjectVector<CRenamePair>(void)+5o
.text$x:00009210
.text$x:00009210 arg_4           = dword ptr  8
.text$x:00009210
.text$x:00009210                 mov     edx, [esp+arg_4]
.text$x:00009214                 lea     eax, [edx+0Ch]
.text$x:00009217                 mov     ecx, [edx-18h]
.text$x:0000921A                 xor     ecx, eax
.text$x:0000921C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00009221                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@UCRenamePair@@@@QAE@XZ
.text$x:00009226                 jmp     ___CxxFrameHandler3
.text$x:00009226 __ehhandler$??1?$CObjectVector@UCRenamePair@@@@QAE@XZ endp
.text$x:00009226
.text$x:00009226 ; ---------------------------------------------------------------------------
.text$x:0000922B                 align 4
.text$x:0000922B _text$x         ends
.text$x:0000922B
.xdata$x:0000922C ; ===========================================================================
.xdata$x:0000922C
.xdata$x:0000922C ; Segment type: Pure data
.xdata$x:0000922C ; Segment permissions: Read
.xdata$x:0000922C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000922C                 assume cs:_xdata$x
.xdata$x:0000922C                 ;org 922Ch
.xdata$x:0000922C ; COMDAT (pick associative to section at 914C)
.xdata$x:0000922C __unwindtable$??1?$CObjectVector@UCRenamePair@@@@QAE@XZ db 0FFh
.xdata$x:0000922C                                         ; DATA XREF: .xdata$x:0000923Co
.xdata$x:0000922D                 db 0FFh
.xdata$x:0000922E                 db 0FFh
.xdata$x:0000922F                 db 0FFh
.xdata$x:00009230                 dd offset __unwindfunclet$??1?$CObjectVector@UCRenamePair@@@@QAE@XZ$0
.xdata$x:00009234 __ehfuncinfo$??1?$CObjectVector@UCRenamePair@@@@QAE@XZ db  22h ; "
.xdata$x:00009234                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@UCRenamePair@@@@QAE@XZ+11o
.xdata$x:00009235                 db    5
.xdata$x:00009236                 db  93h ; ô
.xdata$x:00009237                 db  19h
.xdata$x:00009238                 db    1
.xdata$x:00009239                 db    0
.xdata$x:0000923A                 db    0
.xdata$x:0000923B                 db    0
.xdata$x:0000923C                 dd offset __unwindtable$??1?$CObjectVector@UCRenamePair@@@@QAE@XZ
.xdata$x:00009240                 db    0
.xdata$x:00009241                 db    0
.xdata$x:00009242                 db    0
.xdata$x:00009243                 db    0
.xdata$x:00009244                 db    0
.xdata$x:00009245                 db    0
.xdata$x:00009246                 db    0
.xdata$x:00009247                 db    0
.xdata$x:00009248                 db    0
.xdata$x:00009249                 db    0
.xdata$x:0000924A                 db    0
.xdata$x:0000924B                 db    0
.xdata$x:0000924C                 db    0
.xdata$x:0000924D                 db    0
.xdata$x:0000924E                 db    0
.xdata$x:0000924F                 db    0
.xdata$x:00009250                 db    0
.xdata$x:00009251                 db    0
.xdata$x:00009252                 db    0
.xdata$x:00009253                 db    0
.xdata$x:00009254                 db    1
.xdata$x:00009255                 db    0
.xdata$x:00009256                 db    0
.xdata$x:00009257                 db    0
.xdata$x:00009257 _xdata$x        ends
.xdata$x:00009257
.text:00009258 ; ===========================================================================
.text:00009258
.text:00009258 ; Segment type: Pure code
.text:00009258 ; Segment permissions: Read/Execute
.text:00009258 _text           segment para public 'CODE' use32
.text:00009258                 assume cs:_text
.text:00009258                 ;org 9258h
.text:00009258 ; COMDAT (pick any)
.text:00009258                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009258
.text:00009258 ; =============== S U B R O U T I N E =======================================
.text:00009258
.text:00009258 ; Attributes: bp-based frame
.text:00009258
.text:00009258 ; public: __thiscall CRecordVector<unsigned long>::CRecordVector<unsigned long>(void)
.text:00009258                 public ??0?$CRecordVector@K@@QAE@XZ
.text:00009258 ??0?$CRecordVector@K@@QAE@XZ proc near  ; CODE XREF: CErrorPathCodes::CErrorPathCodes(void)+42p
.text:00009258
.text:00009258 var_4           = dword ptr -4
.text:00009258
.text:00009258                 push    ebp
.text:00009259                 mov     ebp, esp
.text:0000925B                 push    ecx
.text:0000925C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009263                 mov     [ebp+var_4], ecx
.text:00009266                 mov     eax, [ebp+var_4]
.text:00009269                 mov     dword ptr [eax], 0
.text:0000926F                 mov     ecx, [ebp+var_4]
.text:00009272                 mov     dword ptr [ecx+4], 0
.text:00009279                 mov     edx, [ebp+var_4]
.text:0000927C                 mov     dword ptr [edx+8], 0
.text:00009283                 mov     eax, [ebp+var_4]
.text:00009286                 mov     esp, ebp
.text:00009288                 pop     ebp
.text:00009289                 retn
.text:00009289 ??0?$CRecordVector@K@@QAE@XZ endp
.text:00009289
.text:00009289 ; ---------------------------------------------------------------------------
.text:0000928A                 align 4
.text:0000928A _text           ends
.text:0000928A
.text:0000928C ; ===========================================================================
.text:0000928C
.text:0000928C ; Segment type: Pure code
.text:0000928C ; Segment permissions: Read/Execute
.text:0000928C _text           segment para public 'CODE' use32
.text:0000928C                 assume cs:_text
.text:0000928C                 ;org 928Ch
.text:0000928C ; COMDAT (pick any)
.text:0000928C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000928C
.text:0000928C ; =============== S U B R O U T I N E =======================================
.text:0000928C
.text:0000928C ; Attributes: bp-based frame
.text:0000928C
.text:0000928C ; public: __thiscall CRecordVector<unsigned long>::~CRecordVector<unsigned long>(void)
.text:0000928C                 public ??1?$CRecordVector@K@@QAE@XZ
.text:0000928C ??1?$CRecordVector@K@@QAE@XZ proc near  ; CODE XREF: CErrorPathCodes::~CErrorPathCodes(void)+3Ap
.text:0000928C
.text:0000928C var_8           = dword ptr -8
.text:0000928C var_4           = dword ptr -4
.text:0000928C
.text:0000928C                 push    ebp
.text:0000928D                 mov     ebp, esp
.text:0000928F                 sub     esp, 8
.text:00009292                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00009299                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000092A0                 mov     [ebp+var_4], ecx
.text:000092A3                 mov     eax, [ebp+var_4]
.text:000092A6                 mov     ecx, [eax]
.text:000092A8                 mov     [ebp+var_8], ecx
.text:000092AB                 mov     edx, [ebp+var_8]
.text:000092AE                 push    edx             ; void *
.text:000092AF                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000092B4                 add     esp, 4
.text:000092B7                 add     esp, 8
.text:000092BA                 cmp     ebp, esp
.text:000092BC                 call    __RTC_CheckEsp
.text:000092C1                 mov     esp, ebp
.text:000092C3                 pop     ebp
.text:000092C4                 retn
.text:000092C4 ??1?$CRecordVector@K@@QAE@XZ endp
.text:000092C4
.text:000092C4 ; ---------------------------------------------------------------------------
.text:000092C5                 align 4
.text:000092C5 _text           ends
.text:000092C5
.text:000092C8 ; ===========================================================================
.text:000092C8
.text:000092C8 ; Segment type: Pure code
.text:000092C8 ; Segment permissions: Read/Execute
.text:000092C8 _text           segment para public 'CODE' use32
.text:000092C8                 assume cs:_text
.text:000092C8                 ;org 92C8h
.text:000092C8 ; COMDAT (pick any)
.text:000092C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000092C8
.text:000092C8 ; =============== S U B R O U T I N E =======================================
.text:000092C8
.text:000092C8 ; Attributes: bp-based frame
.text:000092C8
.text:000092C8 ; public: void __thiscall CRecordVector<unsigned long>::Clear(void)
.text:000092C8                 public ?Clear@?$CRecordVector@K@@QAEXXZ
.text:000092C8 ?Clear@?$CRecordVector@K@@QAEXXZ proc near
.text:000092C8                                         ; CODE XREF: CErrorPathCodes::Clear(void)+1Cp
.text:000092C8
.text:000092C8 var_4           = dword ptr -4
.text:000092C8
.text:000092C8                 push    ebp
.text:000092C9                 mov     ebp, esp
.text:000092CB                 push    ecx
.text:000092CC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000092D3                 mov     [ebp+var_4], ecx
.text:000092D6                 mov     eax, [ebp+var_4]
.text:000092D9                 mov     dword ptr [eax+4], 0
.text:000092E0                 mov     esp, ebp
.text:000092E2                 pop     ebp
.text:000092E3                 retn
.text:000092E3 ?Clear@?$CRecordVector@K@@QAEXXZ endp
.text:000092E3
.text:000092E3 _text           ends
.text:000092E3
.text:000092E4 ; ===========================================================================
.text:000092E4
.text:000092E4 ; Segment type: Pure code
.text:000092E4 ; Segment permissions: Read/Execute
.text:000092E4 _text           segment para public 'CODE' use32
.text:000092E4                 assume cs:_text
.text:000092E4                 ;org 92E4h
.text:000092E4 ; COMDAT (pick any)
.text:000092E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000092E4
.text:000092E4 ; =============== S U B R O U T I N E =======================================
.text:000092E4
.text:000092E4 ; Attributes: bp-based frame
.text:000092E4
.text:000092E4 ; public: unsigned long const & __thiscall CRecordVector<unsigned long>::operator[](unsigned int)const
.text:000092E4                 public ??A?$CRecordVector@K@@QBEABKI@Z
.text:000092E4 ??A?$CRecordVector@K@@QBEABKI@Z proc near
.text:000092E4                                         ; CODE XREF: PrintWarningsPaths(CErrorPathCodes const &,CStdOutStream &)+96p
.text:000092E4
.text:000092E4 var_4           = dword ptr -4
.text:000092E4 arg_0           = dword ptr  8
.text:000092E4
.text:000092E4                 push    ebp
.text:000092E5                 mov     ebp, esp
.text:000092E7                 push    ecx
.text:000092E8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000092EF                 mov     [ebp+var_4], ecx
.text:000092F2                 mov     eax, [ebp+var_4]
.text:000092F5                 mov     ecx, [eax]
.text:000092F7                 mov     edx, [ebp+arg_0]
.text:000092FA                 lea     eax, [ecx+edx*4]
.text:000092FD                 mov     esp, ebp
.text:000092FF                 pop     ebp
.text:00009300                 retn    4
.text:00009300 ??A?$CRecordVector@K@@QBEABKI@Z endp
.text:00009300
.text:00009300 ; ---------------------------------------------------------------------------
.text:00009303                 align 4
.text:00009303 _text           ends
.text:00009303
.text:00009304 ; ===========================================================================
.text:00009304
.text:00009304 ; Segment type: Pure code
.text:00009304 ; Segment permissions: Read/Execute
.text:00009304 _text           segment para public 'CODE' use32
.text:00009304                 assume cs:_text
.text:00009304                 ;org 9304h
.text:00009304 ; COMDAT (pick any)
.text:00009304                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009304
.text:00009304 ; =============== S U B R O U T I N E =======================================
.text:00009304
.text:00009304 ; Attributes: bp-based frame
.text:00009304
.text:00009304 ; public: __thiscall CMyComPtr<struct IUnknown>::CMyComPtr<struct IUnknown>(struct IUnknown *)
.text:00009304                 public ??0?$CMyComPtr@UIUnknown@@@@QAE@PAUIUnknown@@@Z
.text:00009304 ??0?$CMyComPtr@UIUnknown@@@@QAE@PAUIUnknown@@@Z proc near
.text:00009304                                         ; CODE XREF: Main2(void)+334p
.text:00009304
.text:00009304 var_4           = dword ptr -4
.text:00009304 arg_0           = dword ptr  8
.text:00009304
.text:00009304                 push    ebp
.text:00009305                 mov     ebp, esp
.text:00009307                 push    ecx
.text:00009308                 push    esi
.text:00009309                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009310                 mov     [ebp+var_4], ecx
.text:00009313                 mov     eax, [ebp+var_4]
.text:00009316                 mov     ecx, [ebp+arg_0]
.text:00009319                 mov     [eax], ecx
.text:0000931B                 cmp     [ebp+arg_0], 0
.text:0000931F                 jz      short loc_9338
.text:00009321                 mov     edx, [ebp+arg_0]
.text:00009324                 mov     eax, [edx]
.text:00009326                 mov     esi, esp
.text:00009328                 mov     ecx, [ebp+arg_0]
.text:0000932B                 push    ecx
.text:0000932C                 mov     edx, [eax+4]
.text:0000932F                 call    edx
.text:00009331                 cmp     esi, esp
.text:00009333                 call    __RTC_CheckEsp
.text:00009338
.text:00009338 loc_9338:                               ; CODE XREF: CMyComPtr<IUnknown>::CMyComPtr<IUnknown>(IUnknown *)+1Bj
.text:00009338                 mov     eax, [ebp+var_4]
.text:0000933B                 pop     esi
.text:0000933C                 add     esp, 4
.text:0000933F                 cmp     ebp, esp
.text:00009341                 call    __RTC_CheckEsp
.text:00009346                 mov     esp, ebp
.text:00009348                 pop     ebp
.text:00009349                 retn    4
.text:00009349 ??0?$CMyComPtr@UIUnknown@@@@QAE@PAUIUnknown@@@Z endp
.text:00009349
.text:00009349 _text           ends
.text:00009349
.text:0000934C ; ===========================================================================
.text:0000934C
.text:0000934C ; Segment type: Pure code
.text:0000934C ; Segment permissions: Read/Execute
.text:0000934C _text           segment para public 'CODE' use32
.text:0000934C                 assume cs:_text
.text:0000934C                 ;org 934Ch
.text:0000934C ; COMDAT (pick any)
.text:0000934C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000934C
.text:0000934C ; =============== S U B R O U T I N E =======================================
.text:0000934C
.text:0000934C ; Attributes: bp-based frame
.text:0000934C
.text:0000934C ; public: __thiscall CMyComPtr<struct IUnknown>::~CMyComPtr<struct IUnknown>(void)
.text:0000934C                 public ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ
.text:0000934C ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ proc near ; CODE XREF: Main2(void)+1BE0p
.text:0000934C                                         ; __unwindfunclet$?Main2@@YGHXZ$5+6j
.text:0000934C
.text:0000934C var_4           = dword ptr -4
.text:0000934C
.text:0000934C                 push    ebp
.text:0000934D                 mov     ebp, esp
.text:0000934F                 push    ecx
.text:00009350                 push    esi
.text:00009351                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009358                 mov     [ebp+var_4], ecx
.text:0000935B                 mov     eax, [ebp+var_4]
.text:0000935E                 cmp     dword ptr [eax], 0
.text:00009361                 jz      short loc_937E
.text:00009363                 mov     ecx, [ebp+var_4]
.text:00009366                 mov     edx, [ecx]
.text:00009368                 mov     eax, [ebp+var_4]
.text:0000936B                 mov     ecx, [eax]
.text:0000936D                 mov     edx, [edx]
.text:0000936F                 mov     esi, esp
.text:00009371                 push    ecx
.text:00009372                 mov     eax, [edx+8]
.text:00009375                 call    eax
.text:00009377                 cmp     esi, esp
.text:00009379                 call    __RTC_CheckEsp
.text:0000937E
.text:0000937E loc_937E:                               ; CODE XREF: CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>(void)+15j
.text:0000937E                 pop     esi
.text:0000937F                 add     esp, 4
.text:00009382                 cmp     ebp, esp
.text:00009384                 call    __RTC_CheckEsp
.text:00009389                 mov     esp, ebp
.text:0000938B                 pop     ebp
.text:0000938C                 retn
.text:0000938C ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ endp
.text:0000938C
.text:0000938C ; ---------------------------------------------------------------------------
.text:0000938D                 align 10h
.text:0000938D _text           ends
.text:0000938D
.text:00009390 ; ===========================================================================
.text:00009390
.text:00009390 ; Segment type: Pure code
.text:00009390 ; Segment permissions: Read/Execute
.text:00009390 _text           segment para public 'CODE' use32
.text:00009390                 assume cs:_text
.text:00009390                 ;org 9390h
.text:00009390 ; COMDAT (pick any)
.text:00009390                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009390
.text:00009390 ; =============== S U B R O U T I N E =======================================
.text:00009390
.text:00009390 ; Attributes: bp-based frame
.text:00009390
.text:00009390 ; public: __thiscall CObjectVector<struct COpenType>::CObjectVector<struct COpenType>(void)
.text:00009390                 public ??0?$CObjectVector@UCOpenType@@@@QAE@XZ
.text:00009390 ??0?$CObjectVector@UCOpenType@@@@QAE@XZ proc near
.text:00009390                                         ; CODE XREF: Main2(void)+3D8p
.text:00009390
.text:00009390 var_4           = dword ptr -4
.text:00009390
.text:00009390                 push    ebp
.text:00009391                 mov     ebp, esp
.text:00009393                 push    ecx
.text:00009394                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000939B                 mov     [ebp+var_4], ecx
.text:0000939E                 mov     ecx, [ebp+var_4]
.text:000093A1                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:000093A6                 mov     eax, [ebp+var_4]
.text:000093A9                 add     esp, 4
.text:000093AC                 cmp     ebp, esp
.text:000093AE                 call    __RTC_CheckEsp
.text:000093B3                 mov     esp, ebp
.text:000093B5                 pop     ebp
.text:000093B6                 retn
.text:000093B6 ??0?$CObjectVector@UCOpenType@@@@QAE@XZ endp
.text:000093B6
.text:000093B6 ; ---------------------------------------------------------------------------
.text:000093B7                 align 4
.text:000093B7 _text           ends
.text:000093B7
.text:000093B8 ; ===========================================================================
.text:000093B8
.text:000093B8 ; Segment type: Pure code
.text:000093B8 ; Segment permissions: Read/Execute
.text:000093B8 _text           segment para public 'CODE' use32
.text:000093B8                 assume cs:_text
.text:000093B8                 ;org 93B8h
.text:000093B8 ; COMDAT (pick any)
.text:000093B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000093B8
.text:000093B8 ; =============== S U B R O U T I N E =======================================
.text:000093B8
.text:000093B8 ; Attributes: bp-based frame
.text:000093B8
.text:000093B8 ; public: __thiscall CObjectVector<struct COpenType>::~CObjectVector<struct COpenType>(void)
.text:000093B8                 public ??1?$CObjectVector@UCOpenType@@@@QAE@XZ
.text:000093B8 ??1?$CObjectVector@UCOpenType@@@@QAE@XZ proc near
.text:000093B8                                         ; CODE XREF: Main2(void)+1BD1p
.text:000093B8                                         ; __unwindfunclet$?Main2@@YGHXZ$6+6j
.text:000093B8
.text:000093B8 var_18          = dword ptr -18h
.text:000093B8 var_14          = dword ptr -14h
.text:000093B8 var_10          = dword ptr -10h
.text:000093B8 var_C           = dword ptr -0Ch
.text:000093B8 var_4           = dword ptr -4
.text:000093B8
.text:000093B8                 push    ebp
.text:000093B9                 mov     ebp, esp
.text:000093BB                 push    0FFFFFFFFh
.text:000093BD                 push    offset __ehhandler$??1?$CObjectVector@UCOpenType@@@@QAE@XZ
.text:000093C2                 mov     eax, large fs:0
.text:000093C8                 push    eax
.text:000093C9                 sub     esp, 0Ch
.text:000093CC                 mov     [ebp+var_18], 0CCCCCCCCh
.text:000093D3                 mov     [ebp+var_14], 0CCCCCCCCh
.text:000093DA                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000093E1                 mov     eax, dword ptr ds:___security_cookie
.text:000093E6                 xor     eax, ebp
.text:000093E8                 push    eax
.text:000093E9                 lea     eax, [ebp+var_C]
.text:000093EC                 mov     large fs:0, eax
.text:000093F2                 mov     [ebp+var_10], ecx
.text:000093F5                 mov     [ebp+var_4], 0
.text:000093FC                 mov     ecx, [ebp+var_10]
.text:000093FF                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00009404                 mov     [ebp+var_14], eax
.text:00009407
.text:00009407 loc_9407:                               ; CODE XREF: CObjectVector<COpenType>::~CObjectVector<COpenType>(void)+7Bj
.text:00009407                 cmp     [ebp+var_14], 0
.text:0000940B                 jz      short loc_9435
.text:0000940D                 mov     eax, [ebp+var_14]
.text:00009410                 sub     eax, 1
.text:00009413                 mov     [ebp+var_14], eax
.text:00009416                 mov     ecx, [ebp+var_14]
.text:00009419                 push    ecx
.text:0000941A                 mov     ecx, [ebp+var_10]
.text:0000941D                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00009422                 mov     edx, [eax]
.text:00009424                 mov     [ebp+var_18], edx
.text:00009427                 mov     eax, [ebp+var_18]
.text:0000942A                 push    eax             ; void *
.text:0000942B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00009430                 add     esp, 4
.text:00009433                 jmp     short loc_9407
.text:00009435 ; ---------------------------------------------------------------------------
.text:00009435
.text:00009435 loc_9435:                               ; CODE XREF: CObjectVector<COpenType>::~CObjectVector<COpenType>(void)+53j
.text:00009435                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000943C                 mov     ecx, [ebp+var_10]
.text:0000943F                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00009444                 mov     ecx, [ebp+var_C]
.text:00009447                 mov     large fs:0, ecx
.text:0000944E                 pop     ecx
.text:0000944F                 add     esp, 18h
.text:00009452                 cmp     ebp, esp
.text:00009454                 call    __RTC_CheckEsp
.text:00009459                 mov     esp, ebp
.text:0000945B                 pop     ebp
.text:0000945C                 retn
.text:0000945C ??1?$CObjectVector@UCOpenType@@@@QAE@XZ endp
.text:0000945C
.text:0000945C ; ---------------------------------------------------------------------------
.text:0000945D                 align 10h
.text:0000945D _text           ends
.text:0000945D
.text$x:00009460 ; ===========================================================================
.text$x:00009460
.text$x:00009460 ; Segment type: Pure code
.text$x:00009460 ; Segment permissions: Read/Execute
.text$x:00009460 _text$x         segment para public 'CODE' use32
.text$x:00009460                 assume cs:_text$x
.text$x:00009460                 ;org 9460h
.text$x:00009460 ; COMDAT (pick associative to section at 93B8)
.text$x:00009460                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00009460
.text$x:00009460 ; =============== S U B R O U T I N E =======================================
.text$x:00009460
.text$x:00009460
.text$x:00009460 __unwindfunclet$??1?$CObjectVector@UCOpenType@@@@QAE@XZ$0 proc near
.text$x:00009460                                         ; DATA XREF: .xdata$x:00009488o
.text$x:00009460                 mov     ecx, [ebp-10h]
.text$x:00009463                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:00009463 __unwindfunclet$??1?$CObjectVector@UCOpenType@@@@QAE@XZ$0 endp
.text$x:00009463
.text$x:00009468
.text$x:00009468 ; =============== S U B R O U T I N E =======================================
.text$x:00009468
.text$x:00009468
.text$x:00009468 __ehhandler$??1?$CObjectVector@UCOpenType@@@@QAE@XZ proc near
.text$x:00009468                                         ; DATA XREF: CObjectVector<COpenType>::~CObjectVector<COpenType>(void)+5o
.text$x:00009468
.text$x:00009468 arg_4           = dword ptr  8
.text$x:00009468
.text$x:00009468                 mov     edx, [esp+arg_4]
.text$x:0000946C                 lea     eax, [edx+0Ch]
.text$x:0000946F                 mov     ecx, [edx-10h]
.text$x:00009472                 xor     ecx, eax
.text$x:00009474                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00009479                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@UCOpenType@@@@QAE@XZ
.text$x:0000947E                 jmp     ___CxxFrameHandler3
.text$x:0000947E __ehhandler$??1?$CObjectVector@UCOpenType@@@@QAE@XZ endp
.text$x:0000947E
.text$x:0000947E ; ---------------------------------------------------------------------------
.text$x:00009483                 align 4
.text$x:00009483 _text$x         ends
.text$x:00009483
.xdata$x:00009484 ; ===========================================================================
.xdata$x:00009484
.xdata$x:00009484 ; Segment type: Pure data
.xdata$x:00009484 ; Segment permissions: Read
.xdata$x:00009484 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009484                 assume cs:_xdata$x
.xdata$x:00009484                 ;org 9484h
.xdata$x:00009484 ; COMDAT (pick associative to section at 93B8)
.xdata$x:00009484 __unwindtable$??1?$CObjectVector@UCOpenType@@@@QAE@XZ db 0FFh
.xdata$x:00009484                                         ; DATA XREF: .xdata$x:00009494o
.xdata$x:00009485                 db 0FFh
.xdata$x:00009486                 db 0FFh
.xdata$x:00009487                 db 0FFh
.xdata$x:00009488                 dd offset __unwindfunclet$??1?$CObjectVector@UCOpenType@@@@QAE@XZ$0
.xdata$x:0000948C __ehfuncinfo$??1?$CObjectVector@UCOpenType@@@@QAE@XZ db  22h ; "
.xdata$x:0000948C                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@UCOpenType@@@@QAE@XZ+11o
.xdata$x:0000948D                 db    5
.xdata$x:0000948E                 db  93h ; ô
.xdata$x:0000948F                 db  19h
.xdata$x:00009490                 db    1
.xdata$x:00009491                 db    0
.xdata$x:00009492                 db    0
.xdata$x:00009493                 db    0
.xdata$x:00009494                 dd offset __unwindtable$??1?$CObjectVector@UCOpenType@@@@QAE@XZ
.xdata$x:00009498                 db    0
.xdata$x:00009499                 db    0
.xdata$x:0000949A                 db    0
.xdata$x:0000949B                 db    0
.xdata$x:0000949C                 db    0
.xdata$x:0000949D                 db    0
.xdata$x:0000949E                 db    0
.xdata$x:0000949F                 db    0
.xdata$x:000094A0                 db    0
.xdata$x:000094A1                 db    0
.xdata$x:000094A2                 db    0
.xdata$x:000094A3                 db    0
.xdata$x:000094A4                 db    0
.xdata$x:000094A5                 db    0
.xdata$x:000094A6                 db    0
.xdata$x:000094A7                 db    0
.xdata$x:000094A8                 db    0
.xdata$x:000094A9                 db    0
.xdata$x:000094AA                 db    0
.xdata$x:000094AB                 db    0
.xdata$x:000094AC                 db    1
.xdata$x:000094AD                 db    0
.xdata$x:000094AE                 db    0
.xdata$x:000094AF                 db    0
.xdata$x:000094AF _xdata$x        ends
.xdata$x:000094AF
.text:000094B0 ; ===========================================================================
.text:000094B0
.text:000094B0 ; Segment type: Pure code
.text:000094B0 ; Segment permissions: Read/Execute
.text:000094B0 _text           segment para public 'CODE' use32
.text:000094B0                 assume cs:_text
.text:000094B0                 ;org 94B0h
.text:000094B0 ; COMDAT (pick any)
.text:000094B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000094B0
.text:000094B0 ; =============== S U B R O U T I N E =======================================
.text:000094B0
.text:000094B0 ; Attributes: bp-based frame
.text:000094B0
.text:000094B0 ; public: void * __thiscall UString::`scalar deleting destructor'(unsigned int)
.text:000094B0                 public ??_GUString@@QAEPAXI@Z
.text:000094B0 ??_GUString@@QAEPAXI@Z proc near        ; CODE XREF: CObjectVector<UString>::~CObjectVector<UString>(void)+7Fp
.text:000094B0                                         ; CObjectVector<UString>::Clear(void)+59p ...
.text:000094B0
.text:000094B0 var_4           = dword ptr -4
.text:000094B0 arg_0           = dword ptr  8
.text:000094B0
.text:000094B0                 push    ebp
.text:000094B1                 mov     ebp, esp
.text:000094B3                 push    ecx
.text:000094B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000094BB                 mov     [ebp+var_4], ecx
.text:000094BE                 mov     ecx, [ebp+var_4] ; this
.text:000094C1                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000094C6                 mov     eax, [ebp+arg_0]
.text:000094C9                 and     eax, 1
.text:000094CC                 jz      short loc_94DA
.text:000094CE                 mov     ecx, [ebp+var_4]
.text:000094D1                 push    ecx             ; void *
.text:000094D2                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000094D7                 add     esp, 4
.text:000094DA
.text:000094DA loc_94DA:                               ; CODE XREF: UString::`scalar deleting destructor'(uint)+1Cj
.text:000094DA                 mov     eax, [ebp+var_4]
.text:000094DD                 add     esp, 4
.text:000094E0                 cmp     ebp, esp
.text:000094E2                 call    __RTC_CheckEsp
.text:000094E7                 mov     esp, ebp
.text:000094E9                 pop     ebp
.text:000094EA                 retn    4
.text:000094EA ??_GUString@@QAEPAXI@Z endp
.text:000094EA
.text:000094EA ; ---------------------------------------------------------------------------
.text:000094ED                 align 10h
.text:000094ED _text           ends
.text:000094ED
.text:000094F0 ; ===========================================================================
.text:000094F0
.text:000094F0 ; Segment type: Pure code
.text:000094F0 ; Segment permissions: Read/Execute
.text:000094F0 _text           segment para public 'CODE' use32
.text:000094F0                 assume cs:_text
.text:000094F0                 ;org 94F0h
.text:000094F0 ; COMDAT (pick any)
.text:000094F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000094F0
.text:000094F0 ; =============== S U B R O U T I N E =======================================
.text:000094F0
.text:000094F0 ; Attributes: bp-based frame
.text:000094F0
.text:000094F0 ; public: void * __thiscall NWildcard::CPair::`scalar deleting destructor'(unsigned int)
.text:000094F0                 public ??_GCPair@NWildcard@@QAEPAXI@Z
.text:000094F0 ??_GCPair@NWildcard@@QAEPAXI@Z proc near
.text:000094F0                                         ; CODE XREF: CObjectVector<NWildcard::CPair>::~CObjectVector<NWildcard::CPair>(void)+7Fp
.text:000094F0
.text:000094F0 var_4           = dword ptr -4
.text:000094F0 arg_0           = dword ptr  8
.text:000094F0
.text:000094F0                 push    ebp
.text:000094F1                 mov     ebp, esp
.text:000094F3                 push    ecx
.text:000094F4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000094FB                 mov     [ebp+var_4], ecx
.text:000094FE                 mov     ecx, [ebp+var_4] ; this
.text:00009501                 call    ??1CPair@NWildcard@@QAE@XZ ; NWildcard::CPair::~CPair(void)
.text:00009506                 mov     eax, [ebp+arg_0]
.text:00009509                 and     eax, 1
.text:0000950C                 jz      short loc_951A
.text:0000950E                 mov     ecx, [ebp+var_4]
.text:00009511                 push    ecx             ; void *
.text:00009512                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00009517                 add     esp, 4
.text:0000951A
.text:0000951A loc_951A:                               ; CODE XREF: NWildcard::CPair::`scalar deleting destructor'(uint)+1Cj
.text:0000951A                 mov     eax, [ebp+var_4]
.text:0000951D                 add     esp, 4
.text:00009520                 cmp     ebp, esp
.text:00009522                 call    __RTC_CheckEsp
.text:00009527                 mov     esp, ebp
.text:00009529                 pop     ebp
.text:0000952A                 retn    4
.text:0000952A ??_GCPair@NWildcard@@QAEPAXI@Z endp
.text:0000952A
.text:0000952A ; ---------------------------------------------------------------------------
.text:0000952D                 align 10h
.text:0000952D _text           ends
.text:0000952D
.text:00009530 ; ===========================================================================
.text:00009530
.text:00009530 ; Segment type: Pure code
.text:00009530 ; Segment permissions: Read/Execute
.text:00009530 _text           segment para public 'CODE' use32
.text:00009530                 assume cs:_text
.text:00009530                 ;org 9530h
.text:00009530 ; COMDAT (pick any)
.text:00009530                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009530
.text:00009530 ; =============== S U B R O U T I N E =======================================
.text:00009530
.text:00009530 ; Attributes: bp-based frame
.text:00009530
.text:00009530 ; public: void * __thiscall NWildcard::CCensorPath::`scalar deleting destructor'(unsigned int)
.text:00009530                 public ??_GCCensorPath@NWildcard@@QAEPAXI@Z
.text:00009530 ??_GCCensorPath@NWildcard@@QAEPAXI@Z proc near
.text:00009530                                         ; CODE XREF: CObjectVector<NWildcard::CCensorPath>::~CObjectVector<NWildcard::CCensorPath>(void)+7Fp
.text:00009530
.text:00009530 var_4           = dword ptr -4
.text:00009530 arg_0           = dword ptr  8
.text:00009530
.text:00009530                 push    ebp
.text:00009531                 mov     ebp, esp
.text:00009533                 push    ecx
.text:00009534                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000953B                 mov     [ebp+var_4], ecx
.text:0000953E                 mov     ecx, [ebp+var_4] ; this
.text:00009541                 call    ??1CCensorPath@NWildcard@@QAE@XZ ; NWildcard::CCensorPath::~CCensorPath(void)
.text:00009546                 mov     eax, [ebp+arg_0]
.text:00009549                 and     eax, 1
.text:0000954C                 jz      short loc_955A
.text:0000954E                 mov     ecx, [ebp+var_4]
.text:00009551                 push    ecx             ; void *
.text:00009552                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00009557                 add     esp, 4
.text:0000955A
.text:0000955A loc_955A:                               ; CODE XREF: NWildcard::CCensorPath::`scalar deleting destructor'(uint)+1Cj
.text:0000955A                 mov     eax, [ebp+var_4]
.text:0000955D                 add     esp, 4
.text:00009560                 cmp     ebp, esp
.text:00009562                 call    __RTC_CheckEsp
.text:00009567                 mov     esp, ebp
.text:00009569                 pop     ebp
.text:0000956A                 retn    4
.text:0000956A ??_GCCensorPath@NWildcard@@QAEPAXI@Z endp
.text:0000956A
.text:0000956A ; ---------------------------------------------------------------------------
.text:0000956D                 align 10h
.text:0000956D _text           ends
.text:0000956D
.text:00009570 ; ===========================================================================
.text:00009570
.text:00009570 ; Segment type: Pure code
.text:00009570 ; Segment permissions: Read/Execute
.text:00009570 _text           segment para public 'CODE' use32
.text:00009570                 assume cs:_text
.text:00009570                 ;org 9570h
.text:00009570 ; COMDAT (pick any)
.text:00009570                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009570
.text:00009570 ; =============== S U B R O U T I N E =======================================
.text:00009570
.text:00009570 ; Attributes: bp-based frame
.text:00009570
.text:00009570 ; public: void * __thiscall CArcInfoEx::`scalar deleting destructor'(unsigned int)
.text:00009570                 public ??_GCArcInfoEx@@QAEPAXI@Z
.text:00009570 ??_GCArcInfoEx@@QAEPAXI@Z proc near     ; CODE XREF: CObjectVector<CArcInfoEx>::~CObjectVector<CArcInfoEx>(void)+7Fp
.text:00009570
.text:00009570 var_4           = dword ptr -4
.text:00009570 arg_0           = dword ptr  8
.text:00009570
.text:00009570                 push    ebp
.text:00009571                 mov     ebp, esp
.text:00009573                 push    ecx
.text:00009574                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000957B                 mov     [ebp+var_4], ecx
.text:0000957E                 mov     ecx, [ebp+var_4] ; this
.text:00009581                 call    ??1CArcInfoEx@@QAE@XZ ; CArcInfoEx::~CArcInfoEx(void)
.text:00009586                 mov     eax, [ebp+arg_0]
.text:00009589                 and     eax, 1
.text:0000958C                 jz      short loc_959A
.text:0000958E                 mov     ecx, [ebp+var_4]
.text:00009591                 push    ecx             ; void *
.text:00009592                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00009597                 add     esp, 4
.text:0000959A
.text:0000959A loc_959A:                               ; CODE XREF: CArcInfoEx::`scalar deleting destructor'(uint)+1Cj
.text:0000959A                 mov     eax, [ebp+var_4]
.text:0000959D                 add     esp, 4
.text:000095A0                 cmp     ebp, esp
.text:000095A2                 call    __RTC_CheckEsp
.text:000095A7                 mov     esp, ebp
.text:000095A9                 pop     ebp
.text:000095AA                 retn    4
.text:000095AA ??_GCArcInfoEx@@QAEPAXI@Z endp
.text:000095AA
.text:000095AA ; ---------------------------------------------------------------------------
.text:000095AD                 align 10h
.text:000095AD _text           ends
.text:000095AD
.text:000095B0 ; ===========================================================================
.text:000095B0
.text:000095B0 ; Segment type: Pure code
.text:000095B0 ; Segment permissions: Read/Execute
.text:000095B0 _text           segment para public 'CODE' use32
.text:000095B0                 assume cs:_text
.text:000095B0                 ;org 95B0h
.text:000095B0 ; COMDAT (pick any)
.text:000095B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000095B0
.text:000095B0 ; =============== S U B R O U T I N E =======================================
.text:000095B0
.text:000095B0 ; Attributes: bp-based frame
.text:000095B0
.text:000095B0 ; public: void * __thiscall CHasherState::`scalar deleting destructor'(unsigned int)
.text:000095B0                 public ??_GCHasherState@@QAEPAXI@Z
.text:000095B0 ??_GCHasherState@@QAEPAXI@Z proc near   ; CODE XREF: CObjectVector<CHasherState>::~CObjectVector<CHasherState>(void)+7Fp
.text:000095B0
.text:000095B0 var_4           = dword ptr -4
.text:000095B0 arg_0           = dword ptr  8
.text:000095B0
.text:000095B0                 push    ebp
.text:000095B1                 mov     ebp, esp
.text:000095B3                 push    ecx
.text:000095B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000095BB                 mov     [ebp+var_4], ecx
.text:000095BE                 mov     ecx, [ebp+var_4] ; this
.text:000095C1                 call    ??1CHasherState@@QAE@XZ ; CHasherState::~CHasherState(void)
.text:000095C6                 mov     eax, [ebp+arg_0]
.text:000095C9                 and     eax, 1
.text:000095CC                 jz      short loc_95DA
.text:000095CE                 mov     ecx, [ebp+var_4]
.text:000095D1                 push    ecx             ; void *
.text:000095D2                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000095D7                 add     esp, 4
.text:000095DA
.text:000095DA loc_95DA:                               ; CODE XREF: CHasherState::`scalar deleting destructor'(uint)+1Cj
.text:000095DA                 mov     eax, [ebp+var_4]
.text:000095DD                 add     esp, 4
.text:000095E0                 cmp     ebp, esp
.text:000095E2                 call    __RTC_CheckEsp
.text:000095E7                 mov     esp, ebp
.text:000095E9                 pop     ebp
.text:000095EA                 retn    4
.text:000095EA ??_GCHasherState@@QAEPAXI@Z endp
.text:000095EA
.text:000095EA ; ---------------------------------------------------------------------------
.text:000095ED                 align 10h
.text:000095ED _text           ends
.text:000095ED
.text:000095F0 ; ===========================================================================
.text:000095F0
.text:000095F0 ; Segment type: Pure code
.text:000095F0 ; Segment permissions: Read/Execute
.text:000095F0 _text           segment para public 'CODE' use32
.text:000095F0                 assume cs:_text
.text:000095F0                 ;org 95F0h
.text:000095F0 ; COMDAT (pick any)
.text:000095F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000095F0
.text:000095F0 ; =============== S U B R O U T I N E =======================================
.text:000095F0
.text:000095F0 ; Attributes: bp-based frame
.text:000095F0
.text:000095F0 ; _DWORD __thiscall CProperty::CProperty(CProperty *this, const struct CProperty *)
.text:000095F0                 public ??0CProperty@@QAE@ABU0@@Z
.text:000095F0 ??0CProperty@@QAE@ABU0@@Z proc near     ; CODE XREF: CObjectVector<CProperty>::operator=(CObjectVector<CProperty> const &)+B2p
.text:000095F0
.text:000095F0 var_10          = dword ptr -10h
.text:000095F0 var_C           = dword ptr -0Ch
.text:000095F0 var_4           = dword ptr -4
.text:000095F0 arg_0           = dword ptr  8
.text:000095F0
.text:000095F0                 push    ebp
.text:000095F1                 mov     ebp, esp
.text:000095F3                 push    0FFFFFFFFh
.text:000095F5                 push    offset __ehhandler$??0CProperty@@QAE@ABU0@@Z
.text:000095FA                 mov     eax, large fs:0
.text:00009600                 push    eax
.text:00009601                 push    ecx
.text:00009602                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00009609                 mov     eax, dword ptr ds:___security_cookie
.text:0000960E                 xor     eax, ebp
.text:00009610                 push    eax
.text:00009611                 lea     eax, [ebp+var_C]
.text:00009614                 mov     large fs:0, eax
.text:0000961A                 mov     [ebp+var_10], ecx
.text:0000961D                 mov     eax, [ebp+arg_0]
.text:00009620                 push    eax
.text:00009621                 mov     ecx, [ebp+var_10]
.text:00009624                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:00009629                 mov     [ebp+var_4], 0
.text:00009630                 mov     ecx, [ebp+arg_0]
.text:00009633                 add     ecx, 0Ch
.text:00009636                 push    ecx
.text:00009637                 mov     ecx, [ebp+var_10]
.text:0000963A                 add     ecx, 0Ch
.text:0000963D                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:00009642                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00009649                 mov     eax, [ebp+var_10]
.text:0000964C                 mov     ecx, [ebp+var_C]
.text:0000964F                 mov     large fs:0, ecx
.text:00009656                 pop     ecx
.text:00009657                 add     esp, 10h
.text:0000965A                 cmp     ebp, esp
.text:0000965C                 call    __RTC_CheckEsp
.text:00009661                 mov     esp, ebp
.text:00009663                 pop     ebp
.text:00009664                 retn    4
.text:00009664 ??0CProperty@@QAE@ABU0@@Z endp
.text:00009664
.text:00009664 ; ---------------------------------------------------------------------------
.text:00009667                 align 4
.text:00009667 _text           ends
.text:00009667
.text$x:00009668 ; ===========================================================================
.text$x:00009668
.text$x:00009668 ; Segment type: Pure code
.text$x:00009668 ; Segment permissions: Read/Execute
.text$x:00009668 _text$x         segment para public 'CODE' use32
.text$x:00009668                 assume cs:_text$x
.text$x:00009668                 ;org 9668h
.text$x:00009668 ; COMDAT (pick associative to section at 95F0)
.text$x:00009668                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00009668
.text$x:00009668 ; =============== S U B R O U T I N E =======================================
.text$x:00009668
.text$x:00009668
.text$x:00009668 __unwindfunclet$??0CProperty@@QAE@ABU0@@Z$0 proc near
.text$x:00009668                                         ; DATA XREF: .xdata$x:00009690o
.text$x:00009668                 mov     ecx, [ebp-10h]  ; this
.text$x:0000966B                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000966B __unwindfunclet$??0CProperty@@QAE@ABU0@@Z$0 endp
.text$x:0000966B
.text$x:00009670
.text$x:00009670 ; =============== S U B R O U T I N E =======================================
.text$x:00009670
.text$x:00009670
.text$x:00009670 __ehhandler$??0CProperty@@QAE@ABU0@@Z proc near
.text$x:00009670                                         ; DATA XREF: CProperty::CProperty(CProperty const &)+5o
.text$x:00009670
.text$x:00009670 arg_4           = dword ptr  8
.text$x:00009670
.text$x:00009670                 mov     edx, [esp+arg_4]
.text$x:00009674                 lea     eax, [edx+0Ch]
.text$x:00009677                 mov     ecx, [edx-8]
.text$x:0000967A                 xor     ecx, eax
.text$x:0000967C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00009681                 mov     eax, offset __ehfuncinfo$??0CProperty@@QAE@ABU0@@Z
.text$x:00009686                 jmp     ___CxxFrameHandler3
.text$x:00009686 __ehhandler$??0CProperty@@QAE@ABU0@@Z endp
.text$x:00009686
.text$x:00009686 ; ---------------------------------------------------------------------------
.text$x:0000968B                 align 4
.text$x:0000968B _text$x         ends
.text$x:0000968B
.xdata$x:0000968C ; ===========================================================================
.xdata$x:0000968C
.xdata$x:0000968C ; Segment type: Pure data
.xdata$x:0000968C ; Segment permissions: Read
.xdata$x:0000968C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000968C                 assume cs:_xdata$x
.xdata$x:0000968C                 ;org 968Ch
.xdata$x:0000968C ; COMDAT (pick associative to section at 95F0)
.xdata$x:0000968C __unwindtable$??0CProperty@@QAE@ABU0@@Z db 0FFh
.xdata$x:0000968C                                         ; DATA XREF: .xdata$x:0000969Co
.xdata$x:0000968D                 db 0FFh
.xdata$x:0000968E                 db 0FFh
.xdata$x:0000968F                 db 0FFh
.xdata$x:00009690                 dd offset __unwindfunclet$??0CProperty@@QAE@ABU0@@Z$0
.xdata$x:00009694 __ehfuncinfo$??0CProperty@@QAE@ABU0@@Z db  22h ; "
.xdata$x:00009694                                         ; DATA XREF: __ehhandler$??0CProperty@@QAE@ABU0@@Z+11o
.xdata$x:00009695                 db    5
.xdata$x:00009696                 db  93h ; ô
.xdata$x:00009697                 db  19h
.xdata$x:00009698                 db    1
.xdata$x:00009699                 db    0
.xdata$x:0000969A                 db    0
.xdata$x:0000969B                 db    0
.xdata$x:0000969C                 dd offset __unwindtable$??0CProperty@@QAE@ABU0@@Z
.xdata$x:000096A0                 db    0
.xdata$x:000096A1                 db    0
.xdata$x:000096A2                 db    0
.xdata$x:000096A3                 db    0
.xdata$x:000096A4                 db    0
.xdata$x:000096A5                 db    0
.xdata$x:000096A6                 db    0
.xdata$x:000096A7                 db    0
.xdata$x:000096A8                 db    0
.xdata$x:000096A9                 db    0
.xdata$x:000096AA                 db    0
.xdata$x:000096AB                 db    0
.xdata$x:000096AC                 db    0
.xdata$x:000096AD                 db    0
.xdata$x:000096AE                 db    0
.xdata$x:000096AF                 db    0
.xdata$x:000096B0                 db    0
.xdata$x:000096B1                 db    0
.xdata$x:000096B2                 db    0
.xdata$x:000096B3                 db    0
.xdata$x:000096B4                 db    1
.xdata$x:000096B5                 db    0
.xdata$x:000096B6                 db    0
.xdata$x:000096B7                 db    0
.xdata$x:000096B7 _xdata$x        ends
.xdata$x:000096B7
.text:000096B8 ; ===========================================================================
.text:000096B8
.text:000096B8 ; Segment type: Pure code
.text:000096B8 ; Segment permissions: Read/Execute
.text:000096B8 _text           segment para public 'CODE' use32
.text:000096B8                 assume cs:_text
.text:000096B8                 ;org 96B8h
.text:000096B8 ; COMDAT (pick any)
.text:000096B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000096B8
.text:000096B8 ; =============== S U B R O U T I N E =======================================
.text:000096B8
.text:000096B8 ; Attributes: bp-based frame
.text:000096B8
.text:000096B8 ; public: void * __thiscall CProperty::`scalar deleting destructor'(unsigned int)
.text:000096B8                 public ??_GCProperty@@QAEPAXI@Z
.text:000096B8 ??_GCProperty@@QAEPAXI@Z proc near      ; CODE XREF: CObjectVector<CProperty>::~CObjectVector<CProperty>(void)+7Fp
.text:000096B8                                         ; CObjectVector<CProperty>::Clear(void)+59p
.text:000096B8
.text:000096B8 var_4           = dword ptr -4
.text:000096B8 arg_0           = dword ptr  8
.text:000096B8
.text:000096B8                 push    ebp
.text:000096B9                 mov     ebp, esp
.text:000096BB                 push    ecx
.text:000096BC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000096C3                 mov     [ebp+var_4], ecx
.text:000096C6                 mov     ecx, [ebp+var_4] ; this
.text:000096C9                 call    ??1CProperty@@QAE@XZ ; CProperty::~CProperty(void)
.text:000096CE                 mov     eax, [ebp+arg_0]
.text:000096D1                 and     eax, 1
.text:000096D4                 jz      short loc_96E2
.text:000096D6                 mov     ecx, [ebp+var_4]
.text:000096D9                 push    ecx             ; void *
.text:000096DA                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000096DF                 add     esp, 4
.text:000096E2
.text:000096E2 loc_96E2:                               ; CODE XREF: CProperty::`scalar deleting destructor'(uint)+1Cj
.text:000096E2                 mov     eax, [ebp+var_4]
.text:000096E5                 add     esp, 4
.text:000096E8                 cmp     ebp, esp
.text:000096EA                 call    __RTC_CheckEsp
.text:000096EF                 mov     esp, ebp
.text:000096F1                 pop     ebp
.text:000096F2                 retn    4
.text:000096F2 ??_GCProperty@@QAEPAXI@Z endp
.text:000096F2
.text:000096F2 ; ---------------------------------------------------------------------------
.text:000096F5                 align 4
.text:000096F5 _text           ends
.text:000096F5
.text:000096F8 ; ===========================================================================
.text:000096F8
.text:000096F8 ; Segment type: Pure code
.text:000096F8 ; Segment permissions: Read/Execute
.text:000096F8 _text           segment para public 'CODE' use32
.text:000096F8                 assume cs:_text
.text:000096F8                 ;org 96F8h
.text:000096F8 ; COMDAT (pick any)
.text:000096F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000096F8
.text:000096F8 ; =============== S U B R O U T I N E =======================================
.text:000096F8
.text:000096F8 ; Attributes: bp-based frame
.text:000096F8
.text:000096F8 ; public: void * __thiscall CUpdateArchiveCommand::`scalar deleting destructor'(unsigned int)
.text:000096F8                 public ??_GCUpdateArchiveCommand@@QAEPAXI@Z
.text:000096F8 ??_GCUpdateArchiveCommand@@QAEPAXI@Z proc near
.text:000096F8                                         ; CODE XREF: CObjectVector<CUpdateArchiveCommand>::~CObjectVector<CUpdateArchiveCommand>(void)+7Fp
.text:000096F8
.text:000096F8 var_4           = dword ptr -4
.text:000096F8 arg_0           = dword ptr  8
.text:000096F8
.text:000096F8                 push    ebp
.text:000096F9                 mov     ebp, esp
.text:000096FB                 push    ecx
.text:000096FC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009703                 mov     [ebp+var_4], ecx
.text:00009706                 mov     ecx, [ebp+var_4] ; this
.text:00009709                 call    ??1CUpdateArchiveCommand@@QAE@XZ ; CUpdateArchiveCommand::~CUpdateArchiveCommand(void)
.text:0000970E                 mov     eax, [ebp+arg_0]
.text:00009711                 and     eax, 1
.text:00009714                 jz      short loc_9722
.text:00009716                 mov     ecx, [ebp+var_4]
.text:00009719                 push    ecx             ; void *
.text:0000971A                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000971F                 add     esp, 4
.text:00009722
.text:00009722 loc_9722:                               ; CODE XREF: CUpdateArchiveCommand::`scalar deleting destructor'(uint)+1Cj
.text:00009722                 mov     eax, [ebp+var_4]
.text:00009725                 add     esp, 4
.text:00009728                 cmp     ebp, esp
.text:0000972A                 call    __RTC_CheckEsp
.text:0000972F                 mov     esp, ebp
.text:00009731                 pop     ebp
.text:00009732                 retn    4
.text:00009732 ??_GCUpdateArchiveCommand@@QAEPAXI@Z endp
.text:00009732
.text:00009732 ; ---------------------------------------------------------------------------
.text:00009735                 align 4
.text:00009735 _text           ends
.text:00009735
.text:00009738 ; ===========================================================================
.text:00009738
.text:00009738 ; Segment type: Pure code
.text:00009738 ; Segment permissions: Read/Execute
.text:00009738 _text           segment para public 'CODE' use32
.text:00009738                 assume cs:_text
.text:00009738                 ;org 9738h
.text:00009738 ; COMDAT (pick any)
.text:00009738                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009738
.text:00009738 ; =============== S U B R O U T I N E =======================================
.text:00009738
.text:00009738 ; Attributes: bp-based frame
.text:00009738
.text:00009738 ; _DWORD __thiscall CUpdateArchiveCommand::~CUpdateArchiveCommand(CUpdateArchiveCommand *__hidden this)
.text:00009738                 public ??1CUpdateArchiveCommand@@QAE@XZ
.text:00009738 ??1CUpdateArchiveCommand@@QAE@XZ proc near
.text:00009738                                         ; CODE XREF: CUpdateArchiveCommand::`scalar deleting destructor'(uint)+11p
.text:00009738
.text:00009738 var_10          = dword ptr -10h
.text:00009738 var_C           = dword ptr -0Ch
.text:00009738 var_4           = dword ptr -4
.text:00009738
.text:00009738                 push    ebp
.text:00009739                 mov     ebp, esp
.text:0000973B                 push    0FFFFFFFFh
.text:0000973D                 push    offset __ehhandler$??1CUpdateArchiveCommand@@QAE@XZ
.text:00009742                 mov     eax, large fs:0
.text:00009748                 push    eax
.text:00009749                 push    ecx
.text:0000974A                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00009751                 mov     eax, dword ptr ds:___security_cookie
.text:00009756                 xor     eax, ebp
.text:00009758                 push    eax
.text:00009759                 lea     eax, [ebp+var_C]
.text:0000975C                 mov     large fs:0, eax
.text:00009762                 mov     [ebp+var_10], ecx
.text:00009765                 mov     [ebp+var_4], 0
.text:0000976C                 mov     ecx, [ebp+var_10]
.text:0000976F                 add     ecx, 0Ch        ; this
.text:00009772                 call    ??1CArchivePath@@QAE@XZ ; CArchivePath::~CArchivePath(void)
.text:00009777                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000977E                 mov     ecx, [ebp+var_10] ; this
.text:00009781                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00009786                 mov     ecx, [ebp+var_C]
.text:00009789                 mov     large fs:0, ecx
.text:00009790                 pop     ecx
.text:00009791                 add     esp, 10h
.text:00009794                 cmp     ebp, esp
.text:00009796                 call    __RTC_CheckEsp
.text:0000979B                 mov     esp, ebp
.text:0000979D                 pop     ebp
.text:0000979E                 retn
.text:0000979E ??1CUpdateArchiveCommand@@QAE@XZ endp
.text:0000979E
.text:0000979E ; ---------------------------------------------------------------------------
.text:0000979F                 align 10h
.text:0000979F _text           ends
.text:0000979F
.text$x:000097A0 ; ===========================================================================
.text$x:000097A0
.text$x:000097A0 ; Segment type: Pure code
.text$x:000097A0 ; Segment permissions: Read/Execute
.text$x:000097A0 _text$x         segment para public 'CODE' use32
.text$x:000097A0                 assume cs:_text$x
.text$x:000097A0                 ;org 97A0h
.text$x:000097A0 ; COMDAT (pick associative to section at 9738)
.text$x:000097A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000097A0
.text$x:000097A0 ; =============== S U B R O U T I N E =======================================
.text$x:000097A0
.text$x:000097A0
.text$x:000097A0 __unwindfunclet$??1CUpdateArchiveCommand@@QAE@XZ$0 proc near
.text$x:000097A0                                         ; DATA XREF: .xdata$x:000097C8o
.text$x:000097A0                 mov     ecx, [ebp-10h]  ; this
.text$x:000097A3                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:000097A3 __unwindfunclet$??1CUpdateArchiveCommand@@QAE@XZ$0 endp
.text$x:000097A3
.text$x:000097A8
.text$x:000097A8 ; =============== S U B R O U T I N E =======================================
.text$x:000097A8
.text$x:000097A8
.text$x:000097A8 __ehhandler$??1CUpdateArchiveCommand@@QAE@XZ proc near
.text$x:000097A8                                         ; DATA XREF: CUpdateArchiveCommand::~CUpdateArchiveCommand(void)+5o
.text$x:000097A8
.text$x:000097A8 arg_4           = dword ptr  8
.text$x:000097A8
.text$x:000097A8                 mov     edx, [esp+arg_4]
.text$x:000097AC                 lea     eax, [edx+0Ch]
.text$x:000097AF                 mov     ecx, [edx-8]
.text$x:000097B2                 xor     ecx, eax
.text$x:000097B4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000097B9                 mov     eax, offset __ehfuncinfo$??1CUpdateArchiveCommand@@QAE@XZ
.text$x:000097BE                 jmp     ___CxxFrameHandler3
.text$x:000097BE __ehhandler$??1CUpdateArchiveCommand@@QAE@XZ endp
.text$x:000097BE
.text$x:000097BE ; ---------------------------------------------------------------------------
.text$x:000097C3                 align 4
.text$x:000097C3 _text$x         ends
.text$x:000097C3
.xdata$x:000097C4 ; ===========================================================================
.xdata$x:000097C4
.xdata$x:000097C4 ; Segment type: Pure data
.xdata$x:000097C4 ; Segment permissions: Read
.xdata$x:000097C4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000097C4                 assume cs:_xdata$x
.xdata$x:000097C4                 ;org 97C4h
.xdata$x:000097C4 ; COMDAT (pick associative to section at 9738)
.xdata$x:000097C4 __unwindtable$??1CUpdateArchiveCommand@@QAE@XZ db 0FFh
.xdata$x:000097C4                                         ; DATA XREF: .xdata$x:000097D4o
.xdata$x:000097C5                 db 0FFh
.xdata$x:000097C6                 db 0FFh
.xdata$x:000097C7                 db 0FFh
.xdata$x:000097C8                 dd offset __unwindfunclet$??1CUpdateArchiveCommand@@QAE@XZ$0
.xdata$x:000097CC __ehfuncinfo$??1CUpdateArchiveCommand@@QAE@XZ db  22h ; "
.xdata$x:000097CC                                         ; DATA XREF: __ehhandler$??1CUpdateArchiveCommand@@QAE@XZ+11o
.xdata$x:000097CD                 db    5
.xdata$x:000097CE                 db  93h ; ô
.xdata$x:000097CF                 db  19h
.xdata$x:000097D0                 db    1
.xdata$x:000097D1                 db    0
.xdata$x:000097D2                 db    0
.xdata$x:000097D3                 db    0
.xdata$x:000097D4                 dd offset __unwindtable$??1CUpdateArchiveCommand@@QAE@XZ
.xdata$x:000097D8                 db    0
.xdata$x:000097D9                 db    0
.xdata$x:000097DA                 db    0
.xdata$x:000097DB                 db    0
.xdata$x:000097DC                 db    0
.xdata$x:000097DD                 db    0
.xdata$x:000097DE                 db    0
.xdata$x:000097DF                 db    0
.xdata$x:000097E0                 db    0
.xdata$x:000097E1                 db    0
.xdata$x:000097E2                 db    0
.xdata$x:000097E3                 db    0
.xdata$x:000097E4                 db    0
.xdata$x:000097E5                 db    0
.xdata$x:000097E6                 db    0
.xdata$x:000097E7                 db    0
.xdata$x:000097E8                 db    0
.xdata$x:000097E9                 db    0
.xdata$x:000097EA                 db    0
.xdata$x:000097EB                 db    0
.xdata$x:000097EC                 db    1
.xdata$x:000097ED                 db    0
.xdata$x:000097EE                 db    0
.xdata$x:000097EF                 db    0
.xdata$x:000097EF _xdata$x        ends
.xdata$x:000097EF
.text:000097F0 ; ===========================================================================
.text:000097F0
.text:000097F0 ; Segment type: Pure code
.text:000097F0 ; Segment permissions: Read/Execute
.text:000097F0 _text           segment para public 'CODE' use32
.text:000097F0                 assume cs:_text
.text:000097F0                 ;org 97F0h
.text:000097F0 ; COMDAT (pick any)
.text:000097F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000097F0
.text:000097F0 ; =============== S U B R O U T I N E =======================================
.text:000097F0
.text:000097F0 ; Attributes: bp-based frame
.text:000097F0
.text:000097F0 ; public: void * __thiscall CRenamePair::`scalar deleting destructor'(unsigned int)
.text:000097F0                 public ??_GCRenamePair@@QAEPAXI@Z
.text:000097F0 ??_GCRenamePair@@QAEPAXI@Z proc near    ; CODE XREF: CObjectVector<CRenamePair>::~CObjectVector<CRenamePair>(void)+7Fp
.text:000097F0
.text:000097F0 var_4           = dword ptr -4
.text:000097F0 arg_0           = dword ptr  8
.text:000097F0
.text:000097F0                 push    ebp
.text:000097F1                 mov     ebp, esp
.text:000097F3                 push    ecx
.text:000097F4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000097FB                 mov     [ebp+var_4], ecx
.text:000097FE                 mov     ecx, [ebp+var_4] ; this
.text:00009801                 call    ??1CRenamePair@@QAE@XZ ; CRenamePair::~CRenamePair(void)
.text:00009806                 mov     eax, [ebp+arg_0]
.text:00009809                 and     eax, 1
.text:0000980C                 jz      short loc_981A
.text:0000980E                 mov     ecx, [ebp+var_4]
.text:00009811                 push    ecx             ; void *
.text:00009812                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00009817                 add     esp, 4
.text:0000981A
.text:0000981A loc_981A:                               ; CODE XREF: CRenamePair::`scalar deleting destructor'(uint)+1Cj
.text:0000981A                 mov     eax, [ebp+var_4]
.text:0000981D                 add     esp, 4
.text:00009820                 cmp     ebp, esp
.text:00009822                 call    __RTC_CheckEsp
.text:00009827                 mov     esp, ebp
.text:00009829                 pop     ebp
.text:0000982A                 retn    4
.text:0000982A ??_GCRenamePair@@QAEPAXI@Z endp
.text:0000982A
.text:0000982A ; ---------------------------------------------------------------------------
.text:0000982D                 align 10h
.text:0000982D _text           ends
.text:0000982D
.text:00009830 ; ===========================================================================
.text:00009830
.text:00009830 ; Segment type: Pure code
.text:00009830 ; Segment permissions: Read/Execute
.text:00009830 _text           segment para public 'CODE' use32
.text:00009830                 assume cs:_text
.text:00009830                 ;org 9830h
.text:00009830 ; COMDAT (pick any)
.text:00009830                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009830
.text:00009830 ; =============== S U B R O U T I N E =======================================
.text:00009830
.text:00009830 ; Attributes: bp-based frame
.text:00009830
.text:00009830 ; _DWORD __thiscall NWildcard::CPair::~CPair(NWildcard::CPair *__hidden this)
.text:00009830                 public ??1CPair@NWildcard@@QAE@XZ
.text:00009830 ??1CPair@NWildcard@@QAE@XZ proc near    ; CODE XREF: NWildcard::CPair::`scalar deleting destructor'(uint)+11p
.text:00009830
.text:00009830 var_10          = dword ptr -10h
.text:00009830 var_C           = dword ptr -0Ch
.text:00009830 var_4           = dword ptr -4
.text:00009830
.text:00009830                 push    ebp
.text:00009831                 mov     ebp, esp
.text:00009833                 push    0FFFFFFFFh
.text:00009835                 push    offset __ehhandler$??1CPair@NWildcard@@QAE@XZ
.text:0000983A                 mov     eax, large fs:0
.text:00009840                 push    eax
.text:00009841                 push    ecx
.text:00009842                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00009849                 mov     eax, dword ptr ds:___security_cookie
.text:0000984E                 xor     eax, ebp
.text:00009850                 push    eax
.text:00009851                 lea     eax, [ebp+var_C]
.text:00009854                 mov     large fs:0, eax
.text:0000985A                 mov     [ebp+var_10], ecx
.text:0000985D                 mov     [ebp+var_4], 0
.text:00009864                 mov     ecx, [ebp+var_10]
.text:00009867                 add     ecx, 0Ch        ; this
.text:0000986A                 call    ??1CCensorNode@NWildcard@@QAE@XZ ; NWildcard::CCensorNode::~CCensorNode(void)
.text:0000986F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00009876                 mov     ecx, [ebp+var_10] ; this
.text:00009879                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000987E                 mov     ecx, [ebp+var_C]
.text:00009881                 mov     large fs:0, ecx
.text:00009888                 pop     ecx
.text:00009889                 add     esp, 10h
.text:0000988C                 cmp     ebp, esp
.text:0000988E                 call    __RTC_CheckEsp
.text:00009893                 mov     esp, ebp
.text:00009895                 pop     ebp
.text:00009896                 retn
.text:00009896 ??1CPair@NWildcard@@QAE@XZ endp
.text:00009896
.text:00009896 ; ---------------------------------------------------------------------------
.text:00009897                 align 4
.text:00009897 _text           ends
.text:00009897
.text$x:00009898 ; ===========================================================================
.text$x:00009898
.text$x:00009898 ; Segment type: Pure code
.text$x:00009898 ; Segment permissions: Read/Execute
.text$x:00009898 _text$x         segment para public 'CODE' use32
.text$x:00009898                 assume cs:_text$x
.text$x:00009898                 ;org 9898h
.text$x:00009898 ; COMDAT (pick associative to section at 9830)
.text$x:00009898                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00009898
.text$x:00009898 ; =============== S U B R O U T I N E =======================================
.text$x:00009898
.text$x:00009898
.text$x:00009898 __unwindfunclet$??1CPair@NWildcard@@QAE@XZ$0 proc near
.text$x:00009898                                         ; DATA XREF: .xdata$x:000098C0o
.text$x:00009898                 mov     ecx, [ebp-10h]  ; this
.text$x:0000989B                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000989B __unwindfunclet$??1CPair@NWildcard@@QAE@XZ$0 endp
.text$x:0000989B
.text$x:000098A0
.text$x:000098A0 ; =============== S U B R O U T I N E =======================================
.text$x:000098A0
.text$x:000098A0
.text$x:000098A0 __ehhandler$??1CPair@NWildcard@@QAE@XZ proc near
.text$x:000098A0                                         ; DATA XREF: NWildcard::CPair::~CPair(void)+5o
.text$x:000098A0
.text$x:000098A0 arg_4           = dword ptr  8
.text$x:000098A0
.text$x:000098A0                 mov     edx, [esp+arg_4]
.text$x:000098A4                 lea     eax, [edx+0Ch]
.text$x:000098A7                 mov     ecx, [edx-8]
.text$x:000098AA                 xor     ecx, eax
.text$x:000098AC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000098B1                 mov     eax, offset __ehfuncinfo$??1CPair@NWildcard@@QAE@XZ
.text$x:000098B6                 jmp     ___CxxFrameHandler3
.text$x:000098B6 __ehhandler$??1CPair@NWildcard@@QAE@XZ endp
.text$x:000098B6
.text$x:000098B6 ; ---------------------------------------------------------------------------
.text$x:000098BB                 align 4
.text$x:000098BB _text$x         ends
.text$x:000098BB
.xdata$x:000098BC ; ===========================================================================
.xdata$x:000098BC
.xdata$x:000098BC ; Segment type: Pure data
.xdata$x:000098BC ; Segment permissions: Read
.xdata$x:000098BC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000098BC                 assume cs:_xdata$x
.xdata$x:000098BC                 ;org 98BCh
.xdata$x:000098BC ; COMDAT (pick associative to section at 9830)
.xdata$x:000098BC __unwindtable$??1CPair@NWildcard@@QAE@XZ db 0FFh
.xdata$x:000098BC                                         ; DATA XREF: .xdata$x:000098CCo
.xdata$x:000098BD                 db 0FFh
.xdata$x:000098BE                 db 0FFh
.xdata$x:000098BF                 db 0FFh
.xdata$x:000098C0                 dd offset __unwindfunclet$??1CPair@NWildcard@@QAE@XZ$0
.xdata$x:000098C4 __ehfuncinfo$??1CPair@NWildcard@@QAE@XZ db  22h ; "
.xdata$x:000098C4                                         ; DATA XREF: __ehhandler$??1CPair@NWildcard@@QAE@XZ+11o
.xdata$x:000098C5                 db    5
.xdata$x:000098C6                 db  93h ; ô
.xdata$x:000098C7                 db  19h
.xdata$x:000098C8                 db    1
.xdata$x:000098C9                 db    0
.xdata$x:000098CA                 db    0
.xdata$x:000098CB                 db    0
.xdata$x:000098CC                 dd offset __unwindtable$??1CPair@NWildcard@@QAE@XZ
.xdata$x:000098D0                 db    0
.xdata$x:000098D1                 db    0
.xdata$x:000098D2                 db    0
.xdata$x:000098D3                 db    0
.xdata$x:000098D4                 db    0
.xdata$x:000098D5                 db    0
.xdata$x:000098D6                 db    0
.xdata$x:000098D7                 db    0
.xdata$x:000098D8                 db    0
.xdata$x:000098D9                 db    0
.xdata$x:000098DA                 db    0
.xdata$x:000098DB                 db    0
.xdata$x:000098DC                 db    0
.xdata$x:000098DD                 db    0
.xdata$x:000098DE                 db    0
.xdata$x:000098DF                 db    0
.xdata$x:000098E0                 db    0
.xdata$x:000098E1                 db    0
.xdata$x:000098E2                 db    0
.xdata$x:000098E3                 db    0
.xdata$x:000098E4                 db    1
.xdata$x:000098E5                 db    0
.xdata$x:000098E6                 db    0
.xdata$x:000098E7                 db    0
.xdata$x:000098E7 _xdata$x        ends
.xdata$x:000098E7
.text:000098E8 ; ===========================================================================
.text:000098E8
.text:000098E8 ; Segment type: Pure code
.text:000098E8 ; Segment permissions: Read/Execute
.text:000098E8 _text           segment para public 'CODE' use32
.text:000098E8                 assume cs:_text
.text:000098E8                 ;org 98E8h
.text:000098E8 ; COMDAT (pick any)
.text:000098E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000098E8
.text:000098E8 ; =============== S U B R O U T I N E =======================================
.text:000098E8
.text:000098E8 ; Attributes: bp-based frame
.text:000098E8
.text:000098E8 ; _DWORD __thiscall NWildcard::CCensorNode::~CCensorNode(NWildcard::CCensorNode *__hidden this)
.text:000098E8                 public ??1CCensorNode@NWildcard@@QAE@XZ
.text:000098E8 ??1CCensorNode@NWildcard@@QAE@XZ proc near
.text:000098E8                                         ; CODE XREF: NWildcard::CPair::~CPair(void)+3Ap
.text:000098E8                                         ; NWildcard::CCensorNode::`scalar deleting destructor'(uint)+11p
.text:000098E8
.text:000098E8 var_10          = dword ptr -10h
.text:000098E8 var_C           = dword ptr -0Ch
.text:000098E8 var_4           = dword ptr -4
.text:000098E8
.text:000098E8                 push    ebp
.text:000098E9                 mov     ebp, esp
.text:000098EB                 push    0FFFFFFFFh
.text:000098ED                 push    offset __ehhandler$??1CCensorNode@NWildcard@@QAE@XZ
.text:000098F2                 mov     eax, large fs:0
.text:000098F8                 push    eax
.text:000098F9                 push    ecx
.text:000098FA                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00009901                 mov     eax, dword ptr ds:___security_cookie
.text:00009906                 xor     eax, ebp
.text:00009908                 push    eax
.text:00009909                 lea     eax, [ebp+var_C]
.text:0000990C                 mov     large fs:0, eax
.text:00009912                 mov     [ebp+var_10], ecx
.text:00009915                 mov     [ebp+var_4], 2
.text:0000991C                 mov     ecx, [ebp+var_10]
.text:0000991F                 add     ecx, 28h ; '('
.text:00009922                 call    ??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ ; CObjectVector<NWildcard::CItem>::~CObjectVector<NWildcard::CItem>(void)
.text:00009927                 mov     byte ptr [ebp+var_4], 1
.text:0000992B                 mov     ecx, [ebp+var_10]
.text:0000992E                 add     ecx, 1Ch
.text:00009931                 call    ??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ ; CObjectVector<NWildcard::CItem>::~CObjectVector<NWildcard::CItem>(void)
.text:00009936                 mov     byte ptr [ebp+var_4], 0
.text:0000993A                 mov     ecx, [ebp+var_10]
.text:0000993D                 add     ecx, 10h
.text:00009940                 call    ??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ ; CObjectVector<NWildcard::CCensorNode>::~CObjectVector<NWildcard::CCensorNode>(void)
.text:00009945                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000994C                 mov     ecx, [ebp+var_10]
.text:0000994F                 add     ecx, 4          ; this
.text:00009952                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00009957                 mov     ecx, [ebp+var_C]
.text:0000995A                 mov     large fs:0, ecx
.text:00009961                 pop     ecx
.text:00009962                 add     esp, 10h
.text:00009965                 cmp     ebp, esp
.text:00009967                 call    __RTC_CheckEsp
.text:0000996C                 mov     esp, ebp
.text:0000996E                 pop     ebp
.text:0000996F                 retn
.text:0000996F ??1CCensorNode@NWildcard@@QAE@XZ endp
.text:0000996F
.text:0000996F _text           ends
.text:0000996F
.text$x:00009970 ; ===========================================================================
.text$x:00009970
.text$x:00009970 ; Segment type: Pure code
.text$x:00009970 ; Segment permissions: Read/Execute
.text$x:00009970 _text$x         segment para public 'CODE' use32
.text$x:00009970                 assume cs:_text$x
.text$x:00009970                 ;org 9970h
.text$x:00009970 ; COMDAT (pick associative to section at 98E8)
.text$x:00009970                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00009970
.text$x:00009970 ; =============== S U B R O U T I N E =======================================
.text$x:00009970
.text$x:00009970
.text$x:00009970 __unwindfunclet$??1CCensorNode@NWildcard@@QAE@XZ$0 proc near
.text$x:00009970                                         ; DATA XREF: .xdata$x:000099B0o
.text$x:00009970                 mov     ecx, [ebp-10h]
.text$x:00009973                 add     ecx, 4          ; this
.text$x:00009976                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00009976 __unwindfunclet$??1CCensorNode@NWildcard@@QAE@XZ$0 endp
.text$x:00009976
.text$x:0000997B
.text$x:0000997B ; =============== S U B R O U T I N E =======================================
.text$x:0000997B
.text$x:0000997B
.text$x:0000997B __unwindfunclet$??1CCensorNode@NWildcard@@QAE@XZ$1 proc near
.text$x:0000997B                                         ; DATA XREF: .xdata$x:000099B8o
.text$x:0000997B                 mov     ecx, [ebp-10h]
.text$x:0000997E                 add     ecx, 10h
.text$x:00009981                 jmp     ??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ ; CObjectVector<NWildcard::CCensorNode>::~CObjectVector<NWildcard::CCensorNode>(void)
.text$x:00009981 __unwindfunclet$??1CCensorNode@NWildcard@@QAE@XZ$1 endp
.text$x:00009981
.text$x:00009986
.text$x:00009986 ; =============== S U B R O U T I N E =======================================
.text$x:00009986
.text$x:00009986
.text$x:00009986 __unwindfunclet$??1CCensorNode@NWildcard@@QAE@XZ$2 proc near
.text$x:00009986                                         ; DATA XREF: .xdata$x:000099C0o
.text$x:00009986                 mov     ecx, [ebp-10h]
.text$x:00009989                 add     ecx, 1Ch
.text$x:0000998C                 jmp     ??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ ; CObjectVector<NWildcard::CItem>::~CObjectVector<NWildcard::CItem>(void)
.text$x:0000998C __unwindfunclet$??1CCensorNode@NWildcard@@QAE@XZ$2 endp
.text$x:0000998C
.text$x:00009991
.text$x:00009991 ; =============== S U B R O U T I N E =======================================
.text$x:00009991
.text$x:00009991
.text$x:00009991 __ehhandler$??1CCensorNode@NWildcard@@QAE@XZ proc near
.text$x:00009991                                         ; DATA XREF: NWildcard::CCensorNode::~CCensorNode(void)+5o
.text$x:00009991
.text$x:00009991 arg_4           = dword ptr  8
.text$x:00009991
.text$x:00009991                 mov     edx, [esp+arg_4]
.text$x:00009995                 lea     eax, [edx+0Ch]
.text$x:00009998                 mov     ecx, [edx-8]
.text$x:0000999B                 xor     ecx, eax
.text$x:0000999D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000099A2                 mov     eax, offset __ehfuncinfo$??1CCensorNode@NWildcard@@QAE@XZ
.text$x:000099A7                 jmp     ___CxxFrameHandler3
.text$x:000099A7 __ehhandler$??1CCensorNode@NWildcard@@QAE@XZ endp
.text$x:000099A7
.text$x:000099A7 _text$x         ends
.text$x:000099A7
.xdata$x:000099AC ; ===========================================================================
.xdata$x:000099AC
.xdata$x:000099AC ; Segment type: Pure data
.xdata$x:000099AC ; Segment permissions: Read
.xdata$x:000099AC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000099AC                 assume cs:_xdata$x
.xdata$x:000099AC                 ;org 99ACh
.xdata$x:000099AC ; COMDAT (pick associative to section at 98E8)
.xdata$x:000099AC __unwindtable$??1CCensorNode@NWildcard@@QAE@XZ db 0FFh
.xdata$x:000099AC                                         ; DATA XREF: .xdata$x:000099CCo
.xdata$x:000099AD                 db 0FFh
.xdata$x:000099AE                 db 0FFh
.xdata$x:000099AF                 db 0FFh
.xdata$x:000099B0                 dd offset __unwindfunclet$??1CCensorNode@NWildcard@@QAE@XZ$0
.xdata$x:000099B4                 align 8
.xdata$x:000099B8                 dd offset __unwindfunclet$??1CCensorNode@NWildcard@@QAE@XZ$1
.xdata$x:000099BC                 db    1
.xdata$x:000099BD                 db    0
.xdata$x:000099BE                 db    0
.xdata$x:000099BF                 db    0
.xdata$x:000099C0                 dd offset __unwindfunclet$??1CCensorNode@NWildcard@@QAE@XZ$2
.xdata$x:000099C4 __ehfuncinfo$??1CCensorNode@NWildcard@@QAE@XZ db  22h ; "
.xdata$x:000099C4                                         ; DATA XREF: __ehhandler$??1CCensorNode@NWildcard@@QAE@XZ+11o
.xdata$x:000099C5                 db    5
.xdata$x:000099C6                 db  93h ; ô
.xdata$x:000099C7                 db  19h
.xdata$x:000099C8                 db    3
.xdata$x:000099C9                 db    0
.xdata$x:000099CA                 db    0
.xdata$x:000099CB                 db    0
.xdata$x:000099CC                 dd offset __unwindtable$??1CCensorNode@NWildcard@@QAE@XZ
.xdata$x:000099D0                 db    0
.xdata$x:000099D1                 db    0
.xdata$x:000099D2                 db    0
.xdata$x:000099D3                 db    0
.xdata$x:000099D4                 db    0
.xdata$x:000099D5                 db    0
.xdata$x:000099D6                 db    0
.xdata$x:000099D7                 db    0
.xdata$x:000099D8                 db    0
.xdata$x:000099D9                 db    0
.xdata$x:000099DA                 db    0
.xdata$x:000099DB                 db    0
.xdata$x:000099DC                 db    0
.xdata$x:000099DD                 db    0
.xdata$x:000099DE                 db    0
.xdata$x:000099DF                 db    0
.xdata$x:000099E0                 db    0
.xdata$x:000099E1                 db    0
.xdata$x:000099E2                 db    0
.xdata$x:000099E3                 db    0
.xdata$x:000099E4                 db    1
.xdata$x:000099E5                 db    0
.xdata$x:000099E6                 db    0
.xdata$x:000099E7                 db    0
.xdata$x:000099E7 _xdata$x        ends
.xdata$x:000099E7
.text:000099E8 ; ===========================================================================
.text:000099E8
.text:000099E8 ; Segment type: Pure code
.text:000099E8 ; Segment permissions: Read/Execute
.text:000099E8 _text           segment para public 'CODE' use32
.text:000099E8                 assume cs:_text
.text:000099E8                 ;org 99E8h
.text:000099E8 ; COMDAT (pick any)
.text:000099E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000099E8
.text:000099E8 ; =============== S U B R O U T I N E =======================================
.text:000099E8
.text:000099E8 ; Attributes: bp-based frame
.text:000099E8
.text:000099E8 ; public: __thiscall CObjectVector<class NWildcard::CCensorNode>::~CObjectVector<class NWildcard::CCensorNode>(void)
.text:000099E8                 public ??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ
.text:000099E8 ??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ proc near
.text:000099E8                                         ; CODE XREF: NWildcard::CCensorNode::~CCensorNode(void)+58p
.text:000099E8                                         ; __unwindfunclet$??1CCensorNode@NWildcard@@QAE@XZ$1+6j
.text:000099E8
.text:000099E8 var_20          = dword ptr -20h
.text:000099E8 var_1C          = dword ptr -1Ch
.text:000099E8 var_18          = dword ptr -18h
.text:000099E8 var_14          = dword ptr -14h
.text:000099E8 var_10          = dword ptr -10h
.text:000099E8 var_C           = dword ptr -0Ch
.text:000099E8 var_4           = dword ptr -4
.text:000099E8
.text:000099E8                 push    ebp
.text:000099E9                 mov     ebp, esp
.text:000099EB                 push    0FFFFFFFFh
.text:000099ED                 push    offset __ehhandler$??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ
.text:000099F2                 mov     eax, large fs:0
.text:000099F8                 push    eax
.text:000099F9                 sub     esp, 14h
.text:000099FC                 mov     eax, 0CCCCCCCCh
.text:00009A01                 mov     [ebp+var_20], eax
.text:00009A04                 mov     [ebp+var_1C], eax
.text:00009A07                 mov     [ebp+var_18], eax
.text:00009A0A                 mov     [ebp+var_14], eax
.text:00009A0D                 mov     [ebp+var_10], eax
.text:00009A10                 mov     eax, dword ptr ds:___security_cookie
.text:00009A15                 xor     eax, ebp
.text:00009A17                 push    eax
.text:00009A18                 lea     eax, [ebp+var_C]
.text:00009A1B                 mov     large fs:0, eax
.text:00009A21                 mov     [ebp+var_10], ecx
.text:00009A24                 mov     [ebp+var_4], 0
.text:00009A2B                 mov     ecx, [ebp+var_10]
.text:00009A2E                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00009A33                 mov     [ebp+var_14], eax
.text:00009A36
.text:00009A36 loc_9A36:                               ; CODE XREF: CObjectVector<NWildcard::CCensorNode>::~CObjectVector<NWildcard::CCensorNode>(void):loc_9A78j
.text:00009A36                 cmp     [ebp+var_14], 0
.text:00009A3A                 jz      short loc_9A7A
.text:00009A3C                 mov     eax, [ebp+var_14]
.text:00009A3F                 sub     eax, 1
.text:00009A42                 mov     [ebp+var_14], eax
.text:00009A45                 mov     ecx, [ebp+var_14]
.text:00009A48                 push    ecx
.text:00009A49                 mov     ecx, [ebp+var_10]
.text:00009A4C                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00009A51                 mov     edx, [eax]
.text:00009A53                 mov     [ebp+var_1C], edx
.text:00009A56                 mov     eax, [ebp+var_1C]
.text:00009A59                 mov     [ebp+var_18], eax
.text:00009A5C                 cmp     [ebp+var_18], 0
.text:00009A60                 jz      short loc_9A71
.text:00009A62                 push    1
.text:00009A64                 mov     ecx, [ebp+var_18]
.text:00009A67                 call    ??_GCCensorNode@NWildcard@@QAEPAXI@Z ; NWildcard::CCensorNode::`scalar deleting destructor'(uint)
.text:00009A6C                 mov     [ebp+var_20], eax
.text:00009A6F                 jmp     short loc_9A78
.text:00009A71 ; ---------------------------------------------------------------------------
.text:00009A71
.text:00009A71 loc_9A71:                               ; CODE XREF: CObjectVector<NWildcard::CCensorNode>::~CObjectVector<NWildcard::CCensorNode>(void)+78j
.text:00009A71                 mov     [ebp+var_20], 0
.text:00009A78
.text:00009A78 loc_9A78:                               ; CODE XREF: CObjectVector<NWildcard::CCensorNode>::~CObjectVector<NWildcard::CCensorNode>(void)+87j
.text:00009A78                 jmp     short loc_9A36
.text:00009A7A ; ---------------------------------------------------------------------------
.text:00009A7A
.text:00009A7A loc_9A7A:                               ; CODE XREF: CObjectVector<NWildcard::CCensorNode>::~CObjectVector<NWildcard::CCensorNode>(void)+52j
.text:00009A7A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00009A81                 mov     ecx, [ebp+var_10]
.text:00009A84                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00009A89                 mov     ecx, [ebp+var_C]
.text:00009A8C                 mov     large fs:0, ecx
.text:00009A93                 pop     ecx
.text:00009A94                 add     esp, 20h
.text:00009A97                 cmp     ebp, esp
.text:00009A99                 call    __RTC_CheckEsp
.text:00009A9E                 mov     esp, ebp
.text:00009AA0                 pop     ebp
.text:00009AA1                 retn
.text:00009AA1 ??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ endp
.text:00009AA1
.text:00009AA1 ; ---------------------------------------------------------------------------
.text:00009AA2                 align 4
.text:00009AA2 _text           ends
.text:00009AA2
.text$x:00009AA4 ; ===========================================================================
.text$x:00009AA4
.text$x:00009AA4 ; Segment type: Pure code
.text$x:00009AA4 ; Segment permissions: Read/Execute
.text$x:00009AA4 _text$x         segment para public 'CODE' use32
.text$x:00009AA4                 assume cs:_text$x
.text$x:00009AA4                 ;org 9AA4h
.text$x:00009AA4 ; COMDAT (pick associative to section at 99E8)
.text$x:00009AA4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00009AA4
.text$x:00009AA4 ; =============== S U B R O U T I N E =======================================
.text$x:00009AA4
.text$x:00009AA4
.text$x:00009AA4 __unwindfunclet$??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ$0 proc near
.text$x:00009AA4                                         ; DATA XREF: .xdata$x:00009ACCo
.text$x:00009AA4                 mov     ecx, [ebp-10h]
.text$x:00009AA7                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:00009AA7 __unwindfunclet$??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ$0 endp
.text$x:00009AA7
.text$x:00009AAC
.text$x:00009AAC ; =============== S U B R O U T I N E =======================================
.text$x:00009AAC
.text$x:00009AAC
.text$x:00009AAC __ehhandler$??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ proc near
.text$x:00009AAC                                         ; DATA XREF: CObjectVector<NWildcard::CCensorNode>::~CObjectVector<NWildcard::CCensorNode>(void)+5o
.text$x:00009AAC
.text$x:00009AAC arg_4           = dword ptr  8
.text$x:00009AAC
.text$x:00009AAC                 mov     edx, [esp+arg_4]
.text$x:00009AB0                 lea     eax, [edx+0Ch]
.text$x:00009AB3                 mov     ecx, [edx-18h]
.text$x:00009AB6                 xor     ecx, eax
.text$x:00009AB8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00009ABD                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ
.text$x:00009AC2                 jmp     ___CxxFrameHandler3
.text$x:00009AC2 __ehhandler$??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ endp
.text$x:00009AC2
.text$x:00009AC2 ; ---------------------------------------------------------------------------
.text$x:00009AC7                 align 4
.text$x:00009AC7 _text$x         ends
.text$x:00009AC7
.xdata$x:00009AC8 ; ===========================================================================
.xdata$x:00009AC8
.xdata$x:00009AC8 ; Segment type: Pure data
.xdata$x:00009AC8 ; Segment permissions: Read
.xdata$x:00009AC8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009AC8                 assume cs:_xdata$x
.xdata$x:00009AC8                 ;org 9AC8h
.xdata$x:00009AC8 ; COMDAT (pick associative to section at 99E8)
.xdata$x:00009AC8 __unwindtable$??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ db 0FFh
.xdata$x:00009AC8                                         ; DATA XREF: .xdata$x:00009AD8o
.xdata$x:00009AC9                 db 0FFh
.xdata$x:00009ACA                 db 0FFh
.xdata$x:00009ACB                 db 0FFh
.xdata$x:00009ACC                 dd offset __unwindfunclet$??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ$0
.xdata$x:00009AD0 __ehfuncinfo$??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ db  22h ; "
.xdata$x:00009AD0                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ+11o
.xdata$x:00009AD1                 db    5
.xdata$x:00009AD2                 db  93h ; ô
.xdata$x:00009AD3                 db  19h
.xdata$x:00009AD4                 db    1
.xdata$x:00009AD5                 db    0
.xdata$x:00009AD6                 db    0
.xdata$x:00009AD7                 db    0
.xdata$x:00009AD8                 dd offset __unwindtable$??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ
.xdata$x:00009ADC                 db    0
.xdata$x:00009ADD                 db    0
.xdata$x:00009ADE                 db    0
.xdata$x:00009ADF                 db    0
.xdata$x:00009AE0                 db    0
.xdata$x:00009AE1                 db    0
.xdata$x:00009AE2                 db    0
.xdata$x:00009AE3                 db    0
.xdata$x:00009AE4                 db    0
.xdata$x:00009AE5                 db    0
.xdata$x:00009AE6                 db    0
.xdata$x:00009AE7                 db    0
.xdata$x:00009AE8                 db    0
.xdata$x:00009AE9                 db    0
.xdata$x:00009AEA                 db    0
.xdata$x:00009AEB                 db    0
.xdata$x:00009AEC                 db    0
.xdata$x:00009AED                 db    0
.xdata$x:00009AEE                 db    0
.xdata$x:00009AEF                 db    0
.xdata$x:00009AF0                 db    1
.xdata$x:00009AF1                 db    0
.xdata$x:00009AF2                 db    0
.xdata$x:00009AF3                 db    0
.xdata$x:00009AF3 _xdata$x        ends
.xdata$x:00009AF3
.text:00009AF4 ; ===========================================================================
.text:00009AF4
.text:00009AF4 ; Segment type: Pure code
.text:00009AF4 ; Segment permissions: Read/Execute
.text:00009AF4 _text           segment para public 'CODE' use32
.text:00009AF4                 assume cs:_text
.text:00009AF4                 ;org 9AF4h
.text:00009AF4 ; COMDAT (pick any)
.text:00009AF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009AF4
.text:00009AF4 ; =============== S U B R O U T I N E =======================================
.text:00009AF4
.text:00009AF4 ; Attributes: bp-based frame
.text:00009AF4
.text:00009AF4 ; public: __thiscall CObjectVector<struct NWildcard::CItem>::~CObjectVector<struct NWildcard::CItem>(void)
.text:00009AF4                 public ??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ
.text:00009AF4 ??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ proc near
.text:00009AF4                                         ; CODE XREF: NWildcard::CCensorNode::~CCensorNode(void)+3Ap
.text:00009AF4                                         ; NWildcard::CCensorNode::~CCensorNode(void)+49p ...
.text:00009AF4
.text:00009AF4 var_20          = dword ptr -20h
.text:00009AF4 var_1C          = dword ptr -1Ch
.text:00009AF4 var_18          = dword ptr -18h
.text:00009AF4 var_14          = dword ptr -14h
.text:00009AF4 var_10          = dword ptr -10h
.text:00009AF4 var_C           = dword ptr -0Ch
.text:00009AF4 var_4           = dword ptr -4
.text:00009AF4
.text:00009AF4                 push    ebp
.text:00009AF5                 mov     ebp, esp
.text:00009AF7                 push    0FFFFFFFFh
.text:00009AF9                 push    offset __ehhandler$??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ
.text:00009AFE                 mov     eax, large fs:0
.text:00009B04                 push    eax
.text:00009B05                 sub     esp, 14h
.text:00009B08                 mov     eax, 0CCCCCCCCh
.text:00009B0D                 mov     [ebp+var_20], eax
.text:00009B10                 mov     [ebp+var_1C], eax
.text:00009B13                 mov     [ebp+var_18], eax
.text:00009B16                 mov     [ebp+var_14], eax
.text:00009B19                 mov     [ebp+var_10], eax
.text:00009B1C                 mov     eax, dword ptr ds:___security_cookie
.text:00009B21                 xor     eax, ebp
.text:00009B23                 push    eax
.text:00009B24                 lea     eax, [ebp+var_C]
.text:00009B27                 mov     large fs:0, eax
.text:00009B2D                 mov     [ebp+var_10], ecx
.text:00009B30                 mov     [ebp+var_4], 0
.text:00009B37                 mov     ecx, [ebp+var_10]
.text:00009B3A                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00009B3F                 mov     [ebp+var_14], eax
.text:00009B42
.text:00009B42 loc_9B42:                               ; CODE XREF: CObjectVector<NWildcard::CItem>::~CObjectVector<NWildcard::CItem>(void):loc_9B84j
.text:00009B42                 cmp     [ebp+var_14], 0
.text:00009B46                 jz      short loc_9B86
.text:00009B48                 mov     eax, [ebp+var_14]
.text:00009B4B                 sub     eax, 1
.text:00009B4E                 mov     [ebp+var_14], eax
.text:00009B51                 mov     ecx, [ebp+var_14]
.text:00009B54                 push    ecx
.text:00009B55                 mov     ecx, [ebp+var_10]
.text:00009B58                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00009B5D                 mov     edx, [eax]
.text:00009B5F                 mov     [ebp+var_1C], edx
.text:00009B62                 mov     eax, [ebp+var_1C]
.text:00009B65                 mov     [ebp+var_18], eax
.text:00009B68                 cmp     [ebp+var_18], 0
.text:00009B6C                 jz      short loc_9B7D
.text:00009B6E                 push    1
.text:00009B70                 mov     ecx, [ebp+var_18]
.text:00009B73                 call    ??_GCItem@NWildcard@@QAEPAXI@Z ; NWildcard::CItem::`scalar deleting destructor'(uint)
.text:00009B78                 mov     [ebp+var_20], eax
.text:00009B7B                 jmp     short loc_9B84
.text:00009B7D ; ---------------------------------------------------------------------------
.text:00009B7D
.text:00009B7D loc_9B7D:                               ; CODE XREF: CObjectVector<NWildcard::CItem>::~CObjectVector<NWildcard::CItem>(void)+78j
.text:00009B7D                 mov     [ebp+var_20], 0
.text:00009B84
.text:00009B84 loc_9B84:                               ; CODE XREF: CObjectVector<NWildcard::CItem>::~CObjectVector<NWildcard::CItem>(void)+87j
.text:00009B84                 jmp     short loc_9B42
.text:00009B86 ; ---------------------------------------------------------------------------
.text:00009B86
.text:00009B86 loc_9B86:                               ; CODE XREF: CObjectVector<NWildcard::CItem>::~CObjectVector<NWildcard::CItem>(void)+52j
.text:00009B86                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00009B8D                 mov     ecx, [ebp+var_10]
.text:00009B90                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00009B95                 mov     ecx, [ebp+var_C]
.text:00009B98                 mov     large fs:0, ecx
.text:00009B9F                 pop     ecx
.text:00009BA0                 add     esp, 20h
.text:00009BA3                 cmp     ebp, esp
.text:00009BA5                 call    __RTC_CheckEsp
.text:00009BAA                 mov     esp, ebp
.text:00009BAC                 pop     ebp
.text:00009BAD                 retn
.text:00009BAD ??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ endp
.text:00009BAD
.text:00009BAD ; ---------------------------------------------------------------------------
.text:00009BAE                 align 10h
.text:00009BAE _text           ends
.text:00009BAE
.text$x:00009BB0 ; ===========================================================================
.text$x:00009BB0
.text$x:00009BB0 ; Segment type: Pure code
.text$x:00009BB0 ; Segment permissions: Read/Execute
.text$x:00009BB0 _text$x         segment para public 'CODE' use32
.text$x:00009BB0                 assume cs:_text$x
.text$x:00009BB0                 ;org 9BB0h
.text$x:00009BB0 ; COMDAT (pick associative to section at 9AF4)
.text$x:00009BB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00009BB0
.text$x:00009BB0 ; =============== S U B R O U T I N E =======================================
.text$x:00009BB0
.text$x:00009BB0
.text$x:00009BB0 __unwindfunclet$??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ$0 proc near
.text$x:00009BB0                                         ; DATA XREF: .xdata$x:00009BD8o
.text$x:00009BB0                 mov     ecx, [ebp-10h]
.text$x:00009BB3                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:00009BB3 __unwindfunclet$??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ$0 endp
.text$x:00009BB3
.text$x:00009BB8
.text$x:00009BB8 ; =============== S U B R O U T I N E =======================================
.text$x:00009BB8
.text$x:00009BB8
.text$x:00009BB8 __ehhandler$??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ proc near
.text$x:00009BB8                                         ; DATA XREF: CObjectVector<NWildcard::CItem>::~CObjectVector<NWildcard::CItem>(void)+5o
.text$x:00009BB8
.text$x:00009BB8 arg_4           = dword ptr  8
.text$x:00009BB8
.text$x:00009BB8                 mov     edx, [esp+arg_4]
.text$x:00009BBC                 lea     eax, [edx+0Ch]
.text$x:00009BBF                 mov     ecx, [edx-18h]
.text$x:00009BC2                 xor     ecx, eax
.text$x:00009BC4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00009BC9                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ
.text$x:00009BCE                 jmp     ___CxxFrameHandler3
.text$x:00009BCE __ehhandler$??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ endp
.text$x:00009BCE
.text$x:00009BCE ; ---------------------------------------------------------------------------
.text$x:00009BD3                 align 4
.text$x:00009BD3 _text$x         ends
.text$x:00009BD3
.xdata$x:00009BD4 ; ===========================================================================
.xdata$x:00009BD4
.xdata$x:00009BD4 ; Segment type: Pure data
.xdata$x:00009BD4 ; Segment permissions: Read
.xdata$x:00009BD4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009BD4                 assume cs:_xdata$x
.xdata$x:00009BD4                 ;org 9BD4h
.xdata$x:00009BD4 ; COMDAT (pick associative to section at 9AF4)
.xdata$x:00009BD4 __unwindtable$??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ db 0FFh
.xdata$x:00009BD4                                         ; DATA XREF: .xdata$x:00009BE4o
.xdata$x:00009BD5                 db 0FFh
.xdata$x:00009BD6                 db 0FFh
.xdata$x:00009BD7                 db 0FFh
.xdata$x:00009BD8                 dd offset __unwindfunclet$??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ$0
.xdata$x:00009BDC __ehfuncinfo$??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ db  22h ; "
.xdata$x:00009BDC                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ+11o
.xdata$x:00009BDD                 db    5
.xdata$x:00009BDE                 db  93h ; ô
.xdata$x:00009BDF                 db  19h
.xdata$x:00009BE0                 db    1
.xdata$x:00009BE1                 db    0
.xdata$x:00009BE2                 db    0
.xdata$x:00009BE3                 db    0
.xdata$x:00009BE4                 dd offset __unwindtable$??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ
.xdata$x:00009BE8                 db    0
.xdata$x:00009BE9                 db    0
.xdata$x:00009BEA                 db    0
.xdata$x:00009BEB                 db    0
.xdata$x:00009BEC                 db    0
.xdata$x:00009BED                 db    0
.xdata$x:00009BEE                 db    0
.xdata$x:00009BEF                 db    0
.xdata$x:00009BF0                 db    0
.xdata$x:00009BF1                 db    0
.xdata$x:00009BF2                 db    0
.xdata$x:00009BF3                 db    0
.xdata$x:00009BF4                 db    0
.xdata$x:00009BF5                 db    0
.xdata$x:00009BF6                 db    0
.xdata$x:00009BF7                 db    0
.xdata$x:00009BF8                 db    0
.xdata$x:00009BF9                 db    0
.xdata$x:00009BFA                 db    0
.xdata$x:00009BFB                 db    0
.xdata$x:00009BFC                 db    1
.xdata$x:00009BFD                 db    0
.xdata$x:00009BFE                 db    0
.xdata$x:00009BFF                 db    0
.xdata$x:00009BFF _xdata$x        ends
.xdata$x:00009BFF
.text:00009C00 ; ===========================================================================
.text:00009C00
.text:00009C00 ; Segment type: Pure code
.text:00009C00 ; Segment permissions: Read/Execute
.text:00009C00 _text           segment para public 'CODE' use32
.text:00009C00                 assume cs:_text
.text:00009C00                 ;org 9C00h
.text:00009C00 ; COMDAT (pick any)
.text:00009C00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009C00
.text:00009C00 ; =============== S U B R O U T I N E =======================================
.text:00009C00
.text:00009C00 ; Attributes: bp-based frame
.text:00009C00
.text:00009C00 ; public: void * __thiscall NWildcard::CCensorNode::`scalar deleting destructor'(unsigned int)
.text:00009C00                 public ??_GCCensorNode@NWildcard@@QAEPAXI@Z
.text:00009C00 ??_GCCensorNode@NWildcard@@QAEPAXI@Z proc near
.text:00009C00                                         ; CODE XREF: CObjectVector<NWildcard::CCensorNode>::~CObjectVector<NWildcard::CCensorNode>(void)+7Fp
.text:00009C00
.text:00009C00 var_4           = dword ptr -4
.text:00009C00 arg_0           = dword ptr  8
.text:00009C00
.text:00009C00                 push    ebp
.text:00009C01                 mov     ebp, esp
.text:00009C03                 push    ecx
.text:00009C04                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009C0B                 mov     [ebp+var_4], ecx
.text:00009C0E                 mov     ecx, [ebp+var_4] ; this
.text:00009C11                 call    ??1CCensorNode@NWildcard@@QAE@XZ ; NWildcard::CCensorNode::~CCensorNode(void)
.text:00009C16                 mov     eax, [ebp+arg_0]
.text:00009C19                 and     eax, 1
.text:00009C1C                 jz      short loc_9C2A
.text:00009C1E                 mov     ecx, [ebp+var_4]
.text:00009C21                 push    ecx             ; void *
.text:00009C22                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00009C27                 add     esp, 4
.text:00009C2A
.text:00009C2A loc_9C2A:                               ; CODE XREF: NWildcard::CCensorNode::`scalar deleting destructor'(uint)+1Cj
.text:00009C2A                 mov     eax, [ebp+var_4]
.text:00009C2D                 add     esp, 4
.text:00009C30                 cmp     ebp, esp
.text:00009C32                 call    __RTC_CheckEsp
.text:00009C37                 mov     esp, ebp
.text:00009C39                 pop     ebp
.text:00009C3A                 retn    4
.text:00009C3A ??_GCCensorNode@NWildcard@@QAEPAXI@Z endp
.text:00009C3A
.text:00009C3A ; ---------------------------------------------------------------------------
.text:00009C3D                 align 10h
.text:00009C3D _text           ends
.text:00009C3D
.text:00009C40 ; ===========================================================================
.text:00009C40
.text:00009C40 ; Segment type: Pure code
.text:00009C40 ; Segment permissions: Read/Execute
.text:00009C40 _text           segment para public 'CODE' use32
.text:00009C40                 assume cs:_text
.text:00009C40                 ;org 9C40h
.text:00009C40 ; COMDAT (pick any)
.text:00009C40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009C40
.text:00009C40 ; =============== S U B R O U T I N E =======================================
.text:00009C40
.text:00009C40 ; Attributes: bp-based frame
.text:00009C40
.text:00009C40 ; public: void * __thiscall NWildcard::CItem::`scalar deleting destructor'(unsigned int)
.text:00009C40                 public ??_GCItem@NWildcard@@QAEPAXI@Z
.text:00009C40 ??_GCItem@NWildcard@@QAEPAXI@Z proc near
.text:00009C40                                         ; CODE XREF: CObjectVector<NWildcard::CItem>::~CObjectVector<NWildcard::CItem>(void)+7Fp
.text:00009C40
.text:00009C40 var_4           = dword ptr -4
.text:00009C40 arg_0           = dword ptr  8
.text:00009C40
.text:00009C40                 push    ebp
.text:00009C41                 mov     ebp, esp
.text:00009C43                 push    ecx
.text:00009C44                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009C4B                 mov     [ebp+var_4], ecx
.text:00009C4E                 mov     ecx, [ebp+var_4] ; this
.text:00009C51                 call    ??1CItem@NWildcard@@QAE@XZ ; NWildcard::CItem::~CItem(void)
.text:00009C56                 mov     eax, [ebp+arg_0]
.text:00009C59                 and     eax, 1
.text:00009C5C                 jz      short loc_9C6A
.text:00009C5E                 mov     ecx, [ebp+var_4]
.text:00009C61                 push    ecx             ; void *
.text:00009C62                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00009C67                 add     esp, 4
.text:00009C6A
.text:00009C6A loc_9C6A:                               ; CODE XREF: NWildcard::CItem::`scalar deleting destructor'(uint)+1Cj
.text:00009C6A                 mov     eax, [ebp+var_4]
.text:00009C6D                 add     esp, 4
.text:00009C70                 cmp     ebp, esp
.text:00009C72                 call    __RTC_CheckEsp
.text:00009C77                 mov     esp, ebp
.text:00009C79                 pop     ebp
.text:00009C7A                 retn    4
.text:00009C7A ??_GCItem@NWildcard@@QAEPAXI@Z endp
.text:00009C7A
.text:00009C7A ; ---------------------------------------------------------------------------
.text:00009C7D                 align 10h
.text:00009C7D _text           ends
.text:00009C7D
.text:00009C80 ; ===========================================================================
.text:00009C80
.text:00009C80 ; Segment type: Pure code
.text:00009C80 ; Segment permissions: Read/Execute
.text:00009C80 _text           segment para public 'CODE' use32
.text:00009C80                 assume cs:_text
.text:00009C80                 ;org 9C80h
.text:00009C80 ; COMDAT (pick any)
.text:00009C80                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009C80
.text:00009C80 ; =============== S U B R O U T I N E =======================================
.text:00009C80
.text:00009C80 ; Attributes: bp-based frame
.text:00009C80
.text:00009C80 ; _DWORD __thiscall NWildcard::CItem::~CItem(NWildcard::CItem *__hidden this)
.text:00009C80                 public ??1CItem@NWildcard@@QAE@XZ
.text:00009C80 ??1CItem@NWildcard@@QAE@XZ proc near    ; CODE XREF: NWildcard::CItem::`scalar deleting destructor'(uint)+11p
.text:00009C80
.text:00009C80 var_4           = dword ptr -4
.text:00009C80
.text:00009C80                 push    ebp
.text:00009C81                 mov     ebp, esp
.text:00009C83                 push    ecx
.text:00009C84                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009C8B                 mov     [ebp+var_4], ecx
.text:00009C8E                 mov     ecx, [ebp+var_4]
.text:00009C91                 call    ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text:00009C96                 add     esp, 4
.text:00009C99                 cmp     ebp, esp
.text:00009C9B                 call    __RTC_CheckEsp
.text:00009CA0                 mov     esp, ebp
.text:00009CA2                 pop     ebp
.text:00009CA3                 retn
.text:00009CA3 ??1CItem@NWildcard@@QAE@XZ endp
.text:00009CA3
.text:00009CA3 _text           ends
.text:00009CA3
.text:00009CA4 ; ===========================================================================
.text:00009CA4
.text:00009CA4 ; Segment type: Pure code
.text:00009CA4 ; Segment permissions: Read/Execute
.text:00009CA4 _text           segment para public 'CODE' use32
.text:00009CA4                 assume cs:_text
.text:00009CA4                 ;org 9CA4h
.text:00009CA4 ; COMDAT (pick any)
.text:00009CA4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009CA4
.text:00009CA4 ; =============== S U B R O U T I N E =======================================
.text:00009CA4
.text:00009CA4 ; Attributes: bp-based frame
.text:00009CA4
.text:00009CA4 ; _DWORD __thiscall NWildcard::CCensorPath::~CCensorPath(NWildcard::CCensorPath *__hidden this)
.text:00009CA4                 public ??1CCensorPath@NWildcard@@QAE@XZ
.text:00009CA4 ??1CCensorPath@NWildcard@@QAE@XZ proc near
.text:00009CA4                                         ; CODE XREF: NWildcard::CCensorPath::`scalar deleting destructor'(uint)+11p
.text:00009CA4
.text:00009CA4 var_4           = dword ptr -4
.text:00009CA4
.text:00009CA4                 push    ebp
.text:00009CA5                 mov     ebp, esp
.text:00009CA7                 push    ecx
.text:00009CA8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009CAF                 mov     [ebp+var_4], ecx
.text:00009CB2                 mov     ecx, [ebp+var_4] ; this
.text:00009CB5                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00009CBA                 add     esp, 4
.text:00009CBD                 cmp     ebp, esp
.text:00009CBF                 call    __RTC_CheckEsp
.text:00009CC4                 mov     esp, ebp
.text:00009CC6                 pop     ebp
.text:00009CC7                 retn
.text:00009CC7 ??1CCensorPath@NWildcard@@QAE@XZ endp
.text:00009CC7
.text:00009CC7 _text           ends
.text:00009CC7
.text:00009CC8 ; ===========================================================================
.text:00009CC8
.text:00009CC8 ; Segment type: Pure code
.text:00009CC8 ; Segment permissions: Read/Execute
.text:00009CC8 _text           segment para public 'CODE' use32
.text:00009CC8                 assume cs:_text
.text:00009CC8                 ;org 9CC8h
.text:00009CC8 ; COMDAT (pick any)
.text:00009CC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009CC8
.text:00009CC8 ; =============== S U B R O U T I N E =======================================
.text:00009CC8
.text:00009CC8 ; Attributes: bp-based frame
.text:00009CC8
.text:00009CC8 ; _DWORD __thiscall CArcInfoEx::~CArcInfoEx(CArcInfoEx *__hidden this)
.text:00009CC8                 public ??1CArcInfoEx@@QAE@XZ
.text:00009CC8 ??1CArcInfoEx@@QAE@XZ proc near         ; CODE XREF: CArcInfoEx::`scalar deleting destructor'(uint)+11p
.text:00009CC8
.text:00009CC8 var_10          = dword ptr -10h
.text:00009CC8 var_C           = dword ptr -0Ch
.text:00009CC8 var_4           = dword ptr -4
.text:00009CC8
.text:00009CC8                 push    ebp
.text:00009CC9                 mov     ebp, esp
.text:00009CCB                 push    0FFFFFFFFh
.text:00009CCD                 push    offset __ehhandler$??1CArcInfoEx@@QAE@XZ
.text:00009CD2                 mov     eax, large fs:0
.text:00009CD8                 push    eax
.text:00009CD9                 push    ecx
.text:00009CDA                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00009CE1                 mov     eax, dword ptr ds:___security_cookie
.text:00009CE6                 xor     eax, ebp
.text:00009CE8                 push    eax
.text:00009CE9                 lea     eax, [ebp+var_C]
.text:00009CEC                 mov     large fs:0, eax
.text:00009CF2                 mov     [ebp+var_10], ecx
.text:00009CF5                 mov     [ebp+var_4], 1
.text:00009CFC                 mov     ecx, [ebp+var_10]
.text:00009CFF                 add     ecx, 30h ; '0'
.text:00009D02                 call    ??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ ; CObjectVector<CBuffer<uchar>>::~CObjectVector<CBuffer<uchar>>(void)
.text:00009D07                 mov     byte ptr [ebp+var_4], 0
.text:00009D0B                 mov     ecx, [ebp+var_10]
.text:00009D0E                 add     ecx, 18h
.text:00009D11                 call    ??1?$CObjectVector@UCArcExtInfo@@@@QAE@XZ ; CObjectVector<CArcExtInfo>::~CObjectVector<CArcExtInfo>(void)
.text:00009D16                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00009D1D                 mov     ecx, [ebp+var_10]
.text:00009D20                 add     ecx, 0Ch        ; this
.text:00009D23                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00009D28                 mov     ecx, [ebp+var_C]
.text:00009D2B                 mov     large fs:0, ecx
.text:00009D32                 pop     ecx
.text:00009D33                 add     esp, 10h
.text:00009D36                 cmp     ebp, esp
.text:00009D38                 call    __RTC_CheckEsp
.text:00009D3D                 mov     esp, ebp
.text:00009D3F                 pop     ebp
.text:00009D40                 retn
.text:00009D40 ??1CArcInfoEx@@QAE@XZ endp
.text:00009D40
.text:00009D40 ; ---------------------------------------------------------------------------
.text:00009D41                 align 4
.text:00009D41 _text           ends
.text:00009D41
.text$x:00009D44 ; ===========================================================================
.text$x:00009D44
.text$x:00009D44 ; Segment type: Pure code
.text$x:00009D44 ; Segment permissions: Read/Execute
.text$x:00009D44 _text$x         segment para public 'CODE' use32
.text$x:00009D44                 assume cs:_text$x
.text$x:00009D44                 ;org 9D44h
.text$x:00009D44 ; COMDAT (pick associative to section at 9CC8)
.text$x:00009D44                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00009D44
.text$x:00009D44 ; =============== S U B R O U T I N E =======================================
.text$x:00009D44
.text$x:00009D44
.text$x:00009D44 __unwindfunclet$??1CArcInfoEx@@QAE@XZ$0 proc near
.text$x:00009D44                                         ; DATA XREF: .xdata$x:00009D7Co
.text$x:00009D44                 mov     ecx, [ebp-10h]
.text$x:00009D47                 add     ecx, 0Ch        ; this
.text$x:00009D4A                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00009D4A __unwindfunclet$??1CArcInfoEx@@QAE@XZ$0 endp
.text$x:00009D4A
.text$x:00009D4F
.text$x:00009D4F ; =============== S U B R O U T I N E =======================================
.text$x:00009D4F
.text$x:00009D4F
.text$x:00009D4F __unwindfunclet$??1CArcInfoEx@@QAE@XZ$1 proc near
.text$x:00009D4F                                         ; DATA XREF: .xdata$x:00009D84o
.text$x:00009D4F                 mov     ecx, [ebp-10h]
.text$x:00009D52                 add     ecx, 18h
.text$x:00009D55                 jmp     ??1?$CObjectVector@UCArcExtInfo@@@@QAE@XZ ; CObjectVector<CArcExtInfo>::~CObjectVector<CArcExtInfo>(void)
.text$x:00009D55 __unwindfunclet$??1CArcInfoEx@@QAE@XZ$1 endp
.text$x:00009D55
.text$x:00009D5A
.text$x:00009D5A ; =============== S U B R O U T I N E =======================================
.text$x:00009D5A
.text$x:00009D5A
.text$x:00009D5A __ehhandler$??1CArcInfoEx@@QAE@XZ proc near
.text$x:00009D5A                                         ; DATA XREF: CArcInfoEx::~CArcInfoEx(void)+5o
.text$x:00009D5A
.text$x:00009D5A arg_4           = dword ptr  8
.text$x:00009D5A
.text$x:00009D5A                 mov     edx, [esp+arg_4]
.text$x:00009D5E                 lea     eax, [edx+0Ch]
.text$x:00009D61                 mov     ecx, [edx-8]
.text$x:00009D64                 xor     ecx, eax
.text$x:00009D66                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00009D6B                 mov     eax, offset __ehfuncinfo$??1CArcInfoEx@@QAE@XZ
.text$x:00009D70                 jmp     ___CxxFrameHandler3
.text$x:00009D70 __ehhandler$??1CArcInfoEx@@QAE@XZ endp
.text$x:00009D70
.text$x:00009D70 ; ---------------------------------------------------------------------------
.text$x:00009D75                 align 4
.text$x:00009D75 _text$x         ends
.text$x:00009D75
.xdata$x:00009D78 ; ===========================================================================
.xdata$x:00009D78
.xdata$x:00009D78 ; Segment type: Pure data
.xdata$x:00009D78 ; Segment permissions: Read
.xdata$x:00009D78 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009D78                 assume cs:_xdata$x
.xdata$x:00009D78                 ;org 9D78h
.xdata$x:00009D78 ; COMDAT (pick associative to section at 9CC8)
.xdata$x:00009D78 __unwindtable$??1CArcInfoEx@@QAE@XZ db 0FFh
.xdata$x:00009D78                                         ; DATA XREF: .xdata$x:00009D90o
.xdata$x:00009D79                 db 0FFh
.xdata$x:00009D7A                 db 0FFh
.xdata$x:00009D7B                 db 0FFh
.xdata$x:00009D7C                 dd offset __unwindfunclet$??1CArcInfoEx@@QAE@XZ$0
.xdata$x:00009D80                 db    0
.xdata$x:00009D81                 db    0
.xdata$x:00009D82                 db    0
.xdata$x:00009D83                 db    0
.xdata$x:00009D84                 dd offset __unwindfunclet$??1CArcInfoEx@@QAE@XZ$1
.xdata$x:00009D88 __ehfuncinfo$??1CArcInfoEx@@QAE@XZ db  22h ; "
.xdata$x:00009D88                                         ; DATA XREF: __ehhandler$??1CArcInfoEx@@QAE@XZ+11o
.xdata$x:00009D89                 db    5
.xdata$x:00009D8A                 db  93h ; ô
.xdata$x:00009D8B                 db  19h
.xdata$x:00009D8C                 db    2
.xdata$x:00009D8D                 db    0
.xdata$x:00009D8E                 db    0
.xdata$x:00009D8F                 db    0
.xdata$x:00009D90                 dd offset __unwindtable$??1CArcInfoEx@@QAE@XZ
.xdata$x:00009D94                 db    0
.xdata$x:00009D95                 db    0
.xdata$x:00009D96                 db    0
.xdata$x:00009D97                 db    0
.xdata$x:00009D98                 db    0
.xdata$x:00009D99                 db    0
.xdata$x:00009D9A                 db    0
.xdata$x:00009D9B                 db    0
.xdata$x:00009D9C                 db    0
.xdata$x:00009D9D                 db    0
.xdata$x:00009D9E                 db    0
.xdata$x:00009D9F                 db    0
.xdata$x:00009DA0                 db    0
.xdata$x:00009DA1                 db    0
.xdata$x:00009DA2                 db    0
.xdata$x:00009DA3                 db    0
.xdata$x:00009DA4                 db    0
.xdata$x:00009DA5                 db    0
.xdata$x:00009DA6                 db    0
.xdata$x:00009DA7                 db    0
.xdata$x:00009DA8                 db    1
.xdata$x:00009DA9                 db    0
.xdata$x:00009DAA                 db    0
.xdata$x:00009DAB                 db    0
.xdata$x:00009DAB _xdata$x        ends
.xdata$x:00009DAB
.text:00009DAC ; ===========================================================================
.text:00009DAC
.text:00009DAC ; Segment type: Pure code
.text:00009DAC ; Segment permissions: Read/Execute
.text:00009DAC _text           segment para public 'CODE' use32
.text:00009DAC                 assume cs:_text
.text:00009DAC                 ;org 9DACh
.text:00009DAC ; COMDAT (pick any)
.text:00009DAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009DAC
.text:00009DAC ; =============== S U B R O U T I N E =======================================
.text:00009DAC
.text:00009DAC ; Attributes: bp-based frame
.text:00009DAC
.text:00009DAC ; public: __thiscall CObjectVector<struct CArcExtInfo>::~CObjectVector<struct CArcExtInfo>(void)
.text:00009DAC                 public ??1?$CObjectVector@UCArcExtInfo@@@@QAE@XZ
.text:00009DAC ??1?$CObjectVector@UCArcExtInfo@@@@QAE@XZ proc near
.text:00009DAC                                         ; CODE XREF: CArcInfoEx::~CArcInfoEx(void)+49p
.text:00009DAC                                         ; __unwindfunclet$??1CArcInfoEx@@QAE@XZ$1+6j
.text:00009DAC
.text:00009DAC var_20          = dword ptr -20h
.text:00009DAC var_1C          = dword ptr -1Ch
.text:00009DAC var_18          = dword ptr -18h
.text:00009DAC var_14          = dword ptr -14h
.text:00009DAC var_10          = dword ptr -10h
.text:00009DAC var_C           = dword ptr -0Ch
.text:00009DAC var_4           = dword ptr -4
.text:00009DAC
.text:00009DAC                 push    ebp
.text:00009DAD                 mov     ebp, esp
.text:00009DAF                 push    0FFFFFFFFh
.text:00009DB1                 push    offset __ehhandler$??1?$CObjectVector@UCArcExtInfo@@@@QAE@XZ
.text:00009DB6                 mov     eax, large fs:0
.text:00009DBC                 push    eax
.text:00009DBD                 sub     esp, 14h
.text:00009DC0                 mov     eax, 0CCCCCCCCh
.text:00009DC5                 mov     [ebp+var_20], eax
.text:00009DC8                 mov     [ebp+var_1C], eax
.text:00009DCB                 mov     [ebp+var_18], eax
.text:00009DCE                 mov     [ebp+var_14], eax
.text:00009DD1                 mov     [ebp+var_10], eax
.text:00009DD4                 mov     eax, dword ptr ds:___security_cookie
.text:00009DD9                 xor     eax, ebp
.text:00009DDB                 push    eax
.text:00009DDC                 lea     eax, [ebp+var_C]
.text:00009DDF                 mov     large fs:0, eax
.text:00009DE5                 mov     [ebp+var_10], ecx
.text:00009DE8                 mov     [ebp+var_4], 0
.text:00009DEF                 mov     ecx, [ebp+var_10]
.text:00009DF2                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00009DF7                 mov     [ebp+var_14], eax
.text:00009DFA
.text:00009DFA loc_9DFA:                               ; CODE XREF: CObjectVector<CArcExtInfo>::~CObjectVector<CArcExtInfo>(void):loc_9E3Cj
.text:00009DFA                 cmp     [ebp+var_14], 0
.text:00009DFE                 jz      short loc_9E3E
.text:00009E00                 mov     eax, [ebp+var_14]
.text:00009E03                 sub     eax, 1
.text:00009E06                 mov     [ebp+var_14], eax
.text:00009E09                 mov     ecx, [ebp+var_14]
.text:00009E0C                 push    ecx
.text:00009E0D                 mov     ecx, [ebp+var_10]
.text:00009E10                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00009E15                 mov     edx, [eax]
.text:00009E17                 mov     [ebp+var_1C], edx
.text:00009E1A                 mov     eax, [ebp+var_1C]
.text:00009E1D                 mov     [ebp+var_18], eax
.text:00009E20                 cmp     [ebp+var_18], 0
.text:00009E24                 jz      short loc_9E35
.text:00009E26                 push    1
.text:00009E28                 mov     ecx, [ebp+var_18]
.text:00009E2B                 call    ??_GCArcExtInfo@@QAEPAXI@Z ; CArcExtInfo::`scalar deleting destructor'(uint)
.text:00009E30                 mov     [ebp+var_20], eax
.text:00009E33                 jmp     short loc_9E3C
.text:00009E35 ; ---------------------------------------------------------------------------
.text:00009E35
.text:00009E35 loc_9E35:                               ; CODE XREF: CObjectVector<CArcExtInfo>::~CObjectVector<CArcExtInfo>(void)+78j
.text:00009E35                 mov     [ebp+var_20], 0
.text:00009E3C
.text:00009E3C loc_9E3C:                               ; CODE XREF: CObjectVector<CArcExtInfo>::~CObjectVector<CArcExtInfo>(void)+87j
.text:00009E3C                 jmp     short loc_9DFA
.text:00009E3E ; ---------------------------------------------------------------------------
.text:00009E3E
.text:00009E3E loc_9E3E:                               ; CODE XREF: CObjectVector<CArcExtInfo>::~CObjectVector<CArcExtInfo>(void)+52j
.text:00009E3E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00009E45                 mov     ecx, [ebp+var_10]
.text:00009E48                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00009E4D                 mov     ecx, [ebp+var_C]
.text:00009E50                 mov     large fs:0, ecx
.text:00009E57                 pop     ecx
.text:00009E58                 add     esp, 20h
.text:00009E5B                 cmp     ebp, esp
.text:00009E5D                 call    __RTC_CheckEsp
.text:00009E62                 mov     esp, ebp
.text:00009E64                 pop     ebp
.text:00009E65                 retn
.text:00009E65 ??1?$CObjectVector@UCArcExtInfo@@@@QAE@XZ endp
.text:00009E65
.text:00009E65 ; ---------------------------------------------------------------------------
.text:00009E66                 align 4
.text:00009E66 _text           ends
.text:00009E66
.text$x:00009E68 ; ===========================================================================
.text$x:00009E68
.text$x:00009E68 ; Segment type: Pure code
.text$x:00009E68 ; Segment permissions: Read/Execute
.text$x:00009E68 _text$x         segment para public 'CODE' use32
.text$x:00009E68                 assume cs:_text$x
.text$x:00009E68                 ;org 9E68h
.text$x:00009E68 ; COMDAT (pick associative to section at 9DAC)
.text$x:00009E68                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00009E68
.text$x:00009E68 ; =============== S U B R O U T I N E =======================================
.text$x:00009E68
.text$x:00009E68
.text$x:00009E68 __unwindfunclet$??1?$CObjectVector@UCArcExtInfo@@@@QAE@XZ$0 proc near
.text$x:00009E68                                         ; DATA XREF: .xdata$x:00009E90o
.text$x:00009E68                 mov     ecx, [ebp-10h]
.text$x:00009E6B                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:00009E6B __unwindfunclet$??1?$CObjectVector@UCArcExtInfo@@@@QAE@XZ$0 endp
.text$x:00009E6B
.text$x:00009E70
.text$x:00009E70 ; =============== S U B R O U T I N E =======================================
.text$x:00009E70
.text$x:00009E70
.text$x:00009E70 __ehhandler$??1?$CObjectVector@UCArcExtInfo@@@@QAE@XZ proc near
.text$x:00009E70                                         ; DATA XREF: CObjectVector<CArcExtInfo>::~CObjectVector<CArcExtInfo>(void)+5o
.text$x:00009E70
.text$x:00009E70 arg_4           = dword ptr  8
.text$x:00009E70
.text$x:00009E70                 mov     edx, [esp+arg_4]
.text$x:00009E74                 lea     eax, [edx+0Ch]
.text$x:00009E77                 mov     ecx, [edx-18h]
.text$x:00009E7A                 xor     ecx, eax
.text$x:00009E7C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00009E81                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@UCArcExtInfo@@@@QAE@XZ
.text$x:00009E86                 jmp     ___CxxFrameHandler3
.text$x:00009E86 __ehhandler$??1?$CObjectVector@UCArcExtInfo@@@@QAE@XZ endp
.text$x:00009E86
.text$x:00009E86 ; ---------------------------------------------------------------------------
.text$x:00009E8B                 align 4
.text$x:00009E8B _text$x         ends
.text$x:00009E8B
.xdata$x:00009E8C ; ===========================================================================
.xdata$x:00009E8C
.xdata$x:00009E8C ; Segment type: Pure data
.xdata$x:00009E8C ; Segment permissions: Read
.xdata$x:00009E8C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009E8C                 assume cs:_xdata$x
.xdata$x:00009E8C                 ;org 9E8Ch
.xdata$x:00009E8C ; COMDAT (pick associative to section at 9DAC)
.xdata$x:00009E8C __unwindtable$??1?$CObjectVector@UCArcExtInfo@@@@QAE@XZ db 0FFh
.xdata$x:00009E8C                                         ; DATA XREF: .xdata$x:00009E9Co
.xdata$x:00009E8D                 db 0FFh
.xdata$x:00009E8E                 db 0FFh
.xdata$x:00009E8F                 db 0FFh
.xdata$x:00009E90                 dd offset __unwindfunclet$??1?$CObjectVector@UCArcExtInfo@@@@QAE@XZ$0
.xdata$x:00009E94 __ehfuncinfo$??1?$CObjectVector@UCArcExtInfo@@@@QAE@XZ db  22h ; "
.xdata$x:00009E94                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@UCArcExtInfo@@@@QAE@XZ+11o
.xdata$x:00009E95                 db    5
.xdata$x:00009E96                 db  93h ; ô
.xdata$x:00009E97                 db  19h
.xdata$x:00009E98                 db    1
.xdata$x:00009E99                 db    0
.xdata$x:00009E9A                 db    0
.xdata$x:00009E9B                 db    0
.xdata$x:00009E9C                 dd offset __unwindtable$??1?$CObjectVector@UCArcExtInfo@@@@QAE@XZ
.xdata$x:00009EA0                 db    0
.xdata$x:00009EA1                 db    0
.xdata$x:00009EA2                 db    0
.xdata$x:00009EA3                 db    0
.xdata$x:00009EA4                 db    0
.xdata$x:00009EA5                 db    0
.xdata$x:00009EA6                 db    0
.xdata$x:00009EA7                 db    0
.xdata$x:00009EA8                 db    0
.xdata$x:00009EA9                 db    0
.xdata$x:00009EAA                 db    0
.xdata$x:00009EAB                 db    0
.xdata$x:00009EAC                 db    0
.xdata$x:00009EAD                 db    0
.xdata$x:00009EAE                 db    0
.xdata$x:00009EAF                 db    0
.xdata$x:00009EB0                 db    0
.xdata$x:00009EB1                 db    0
.xdata$x:00009EB2                 db    0
.xdata$x:00009EB3                 db    0
.xdata$x:00009EB4                 db    1
.xdata$x:00009EB5                 db    0
.xdata$x:00009EB6                 db    0
.xdata$x:00009EB7                 db    0
.xdata$x:00009EB7 _xdata$x        ends
.xdata$x:00009EB7
.text:00009EB8 ; ===========================================================================
.text:00009EB8
.text:00009EB8 ; Segment type: Pure code
.text:00009EB8 ; Segment permissions: Read/Execute
.text:00009EB8 _text           segment para public 'CODE' use32
.text:00009EB8                 assume cs:_text
.text:00009EB8                 ;org 9EB8h
.text:00009EB8 ; COMDAT (pick any)
.text:00009EB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009EB8
.text:00009EB8 ; =============== S U B R O U T I N E =======================================
.text:00009EB8
.text:00009EB8 ; Attributes: bp-based frame
.text:00009EB8
.text:00009EB8 ; public: __thiscall CObjectVector<class CBuffer<unsigned char>>::~CObjectVector<class CBuffer<unsigned char>>(void)
.text:00009EB8                 public ??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ
.text:00009EB8 ??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ proc near
.text:00009EB8                                         ; CODE XREF: CArcInfoEx::~CArcInfoEx(void)+3Ap
.text:00009EB8
.text:00009EB8 var_20          = dword ptr -20h
.text:00009EB8 var_1C          = dword ptr -1Ch
.text:00009EB8 var_18          = dword ptr -18h
.text:00009EB8 var_14          = dword ptr -14h
.text:00009EB8 var_10          = dword ptr -10h
.text:00009EB8 var_C           = dword ptr -0Ch
.text:00009EB8 var_4           = dword ptr -4
.text:00009EB8
.text:00009EB8                 push    ebp
.text:00009EB9                 mov     ebp, esp
.text:00009EBB                 push    0FFFFFFFFh
.text:00009EBD                 push    offset __ehhandler$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ
.text:00009EC2                 mov     eax, large fs:0
.text:00009EC8                 push    eax
.text:00009EC9                 sub     esp, 14h
.text:00009ECC                 mov     eax, 0CCCCCCCCh
.text:00009ED1                 mov     [ebp+var_20], eax
.text:00009ED4                 mov     [ebp+var_1C], eax
.text:00009ED7                 mov     [ebp+var_18], eax
.text:00009EDA                 mov     [ebp+var_14], eax
.text:00009EDD                 mov     [ebp+var_10], eax
.text:00009EE0                 mov     eax, dword ptr ds:___security_cookie
.text:00009EE5                 xor     eax, ebp
.text:00009EE7                 push    eax
.text:00009EE8                 lea     eax, [ebp+var_C]
.text:00009EEB                 mov     large fs:0, eax
.text:00009EF1                 mov     [ebp+var_10], ecx
.text:00009EF4                 mov     [ebp+var_4], 0
.text:00009EFB                 mov     ecx, [ebp+var_10]
.text:00009EFE                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00009F03                 mov     [ebp+var_14], eax
.text:00009F06
.text:00009F06 loc_9F06:                               ; CODE XREF: CObjectVector<CBuffer<uchar>>::~CObjectVector<CBuffer<uchar>>(void):loc_9F48j
.text:00009F06                 cmp     [ebp+var_14], 0
.text:00009F0A                 jz      short loc_9F4A
.text:00009F0C                 mov     eax, [ebp+var_14]
.text:00009F0F                 sub     eax, 1
.text:00009F12                 mov     [ebp+var_14], eax
.text:00009F15                 mov     ecx, [ebp+var_14]
.text:00009F18                 push    ecx
.text:00009F19                 mov     ecx, [ebp+var_10]
.text:00009F1C                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00009F21                 mov     edx, [eax]
.text:00009F23                 mov     [ebp+var_1C], edx
.text:00009F26                 mov     eax, [ebp+var_1C]
.text:00009F29                 mov     [ebp+var_18], eax
.text:00009F2C                 cmp     [ebp+var_18], 0
.text:00009F30                 jz      short loc_9F41
.text:00009F32                 push    1
.text:00009F34                 mov     ecx, [ebp+var_18]
.text:00009F37                 call    ??_G?$CBuffer@E@@QAEPAXI@Z ; CBuffer<uchar>::`scalar deleting destructor'(uint)
.text:00009F3C                 mov     [ebp+var_20], eax
.text:00009F3F                 jmp     short loc_9F48
.text:00009F41 ; ---------------------------------------------------------------------------
.text:00009F41
.text:00009F41 loc_9F41:                               ; CODE XREF: CObjectVector<CBuffer<uchar>>::~CObjectVector<CBuffer<uchar>>(void)+78j
.text:00009F41                 mov     [ebp+var_20], 0
.text:00009F48
.text:00009F48 loc_9F48:                               ; CODE XREF: CObjectVector<CBuffer<uchar>>::~CObjectVector<CBuffer<uchar>>(void)+87j
.text:00009F48                 jmp     short loc_9F06
.text:00009F4A ; ---------------------------------------------------------------------------
.text:00009F4A
.text:00009F4A loc_9F4A:                               ; CODE XREF: CObjectVector<CBuffer<uchar>>::~CObjectVector<CBuffer<uchar>>(void)+52j
.text:00009F4A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00009F51                 mov     ecx, [ebp+var_10]
.text:00009F54                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00009F59                 mov     ecx, [ebp+var_C]
.text:00009F5C                 mov     large fs:0, ecx
.text:00009F63                 pop     ecx
.text:00009F64                 add     esp, 20h
.text:00009F67                 cmp     ebp, esp
.text:00009F69                 call    __RTC_CheckEsp
.text:00009F6E                 mov     esp, ebp
.text:00009F70                 pop     ebp
.text:00009F71                 retn
.text:00009F71 ??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ endp
.text:00009F71
.text:00009F71 ; ---------------------------------------------------------------------------
.text:00009F72                 align 4
.text:00009F72 _text           ends
.text:00009F72
.text$x:00009F74 ; ===========================================================================
.text$x:00009F74
.text$x:00009F74 ; Segment type: Pure code
.text$x:00009F74 ; Segment permissions: Read/Execute
.text$x:00009F74 _text$x         segment para public 'CODE' use32
.text$x:00009F74                 assume cs:_text$x
.text$x:00009F74                 ;org 9F74h
.text$x:00009F74 ; COMDAT (pick associative to section at 9EB8)
.text$x:00009F74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00009F74
.text$x:00009F74 ; =============== S U B R O U T I N E =======================================
.text$x:00009F74
.text$x:00009F74
.text$x:00009F74 __unwindfunclet$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ$0 proc near
.text$x:00009F74                                         ; DATA XREF: .xdata$x:00009F9Co
.text$x:00009F74                 mov     ecx, [ebp-10h]
.text$x:00009F77                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:00009F77 __unwindfunclet$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ$0 endp
.text$x:00009F77
.text$x:00009F7C
.text$x:00009F7C ; =============== S U B R O U T I N E =======================================
.text$x:00009F7C
.text$x:00009F7C
.text$x:00009F7C __ehhandler$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ proc near
.text$x:00009F7C                                         ; DATA XREF: CObjectVector<CBuffer<uchar>>::~CObjectVector<CBuffer<uchar>>(void)+5o
.text$x:00009F7C
.text$x:00009F7C arg_4           = dword ptr  8
.text$x:00009F7C
.text$x:00009F7C                 mov     edx, [esp+arg_4]
.text$x:00009F80                 lea     eax, [edx+0Ch]
.text$x:00009F83                 mov     ecx, [edx-18h]
.text$x:00009F86                 xor     ecx, eax
.text$x:00009F88                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00009F8D                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ
.text$x:00009F92                 jmp     ___CxxFrameHandler3
.text$x:00009F92 __ehhandler$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ endp
.text$x:00009F92
.text$x:00009F92 ; ---------------------------------------------------------------------------
.text$x:00009F97                 align 4
.text$x:00009F97 _text$x         ends
.text$x:00009F97
.xdata$x:00009F98 ; ===========================================================================
.xdata$x:00009F98
.xdata$x:00009F98 ; Segment type: Pure data
.xdata$x:00009F98 ; Segment permissions: Read
.xdata$x:00009F98 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009F98                 assume cs:_xdata$x
.xdata$x:00009F98                 ;org 9F98h
.xdata$x:00009F98 ; COMDAT (pick associative to section at 9EB8)
.xdata$x:00009F98 __unwindtable$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ db 0FFh
.xdata$x:00009F98                                         ; DATA XREF: .xdata$x:00009FA8o
.xdata$x:00009F99                 db 0FFh
.xdata$x:00009F9A                 db 0FFh
.xdata$x:00009F9B                 db 0FFh
.xdata$x:00009F9C                 dd offset __unwindfunclet$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ$0
.xdata$x:00009FA0 __ehfuncinfo$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ db  22h ; "
.xdata$x:00009FA0                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ+11o
.xdata$x:00009FA1                 db    5
.xdata$x:00009FA2                 db  93h ; ô
.xdata$x:00009FA3                 db  19h
.xdata$x:00009FA4                 db    1
.xdata$x:00009FA5                 db    0
.xdata$x:00009FA6                 db    0
.xdata$x:00009FA7                 db    0
.xdata$x:00009FA8                 dd offset __unwindtable$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ
.xdata$x:00009FAC                 align 20h
.xdata$x:00009FC0                 db    1
.xdata$x:00009FC1                 db    0
.xdata$x:00009FC2                 db    0
.xdata$x:00009FC3                 db    0
.xdata$x:00009FC3 _xdata$x        ends
.xdata$x:00009FC3
.text:00009FC4 ; ===========================================================================
.text:00009FC4
.text:00009FC4 ; Segment type: Pure code
.text:00009FC4 ; Segment permissions: Read/Execute
.text:00009FC4 _text           segment para public 'CODE' use32
.text:00009FC4                 assume cs:_text
.text:00009FC4                 ;org 9FC4h
.text:00009FC4 ; COMDAT (pick any)
.text:00009FC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009FC4
.text:00009FC4 ; =============== S U B R O U T I N E =======================================
.text:00009FC4
.text:00009FC4 ; Attributes: bp-based frame
.text:00009FC4
.text:00009FC4 ; public: void * __thiscall CArcExtInfo::`scalar deleting destructor'(unsigned int)
.text:00009FC4                 public ??_GCArcExtInfo@@QAEPAXI@Z
.text:00009FC4 ??_GCArcExtInfo@@QAEPAXI@Z proc near    ; CODE XREF: CObjectVector<CArcExtInfo>::~CObjectVector<CArcExtInfo>(void)+7Fp
.text:00009FC4
.text:00009FC4 var_4           = dword ptr -4
.text:00009FC4 arg_0           = dword ptr  8
.text:00009FC4
.text:00009FC4                 push    ebp
.text:00009FC5                 mov     ebp, esp
.text:00009FC7                 push    ecx
.text:00009FC8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009FCF                 mov     [ebp+var_4], ecx
.text:00009FD2                 mov     ecx, [ebp+var_4] ; this
.text:00009FD5                 call    ??1CArcExtInfo@@QAE@XZ ; CArcExtInfo::~CArcExtInfo(void)
.text:00009FDA                 mov     eax, [ebp+arg_0]
.text:00009FDD                 and     eax, 1
.text:00009FE0                 jz      short loc_9FEE
.text:00009FE2                 mov     ecx, [ebp+var_4]
.text:00009FE5                 push    ecx             ; void *
.text:00009FE6                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00009FEB                 add     esp, 4
.text:00009FEE
.text:00009FEE loc_9FEE:                               ; CODE XREF: CArcExtInfo::`scalar deleting destructor'(uint)+1Cj
.text:00009FEE                 mov     eax, [ebp+var_4]
.text:00009FF1                 add     esp, 4
.text:00009FF4                 cmp     ebp, esp
.text:00009FF6                 call    __RTC_CheckEsp
.text:00009FFB                 mov     esp, ebp
.text:00009FFD                 pop     ebp
.text:00009FFE                 retn    4
.text:00009FFE ??_GCArcExtInfo@@QAEPAXI@Z endp
.text:00009FFE
.text:00009FFE ; ---------------------------------------------------------------------------
.text:0000A001                 align 4
.text:0000A001 _text           ends
.text:0000A001
.text:0000A004 ; ===========================================================================
.text:0000A004
.text:0000A004 ; Segment type: Pure code
.text:0000A004 ; Segment permissions: Read/Execute
.text:0000A004 _text           segment para public 'CODE' use32
.text:0000A004                 assume cs:_text
.text:0000A004                 ;org 0A004h
.text:0000A004 ; COMDAT (pick any)
.text:0000A004                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A004
.text:0000A004 ; =============== S U B R O U T I N E =======================================
.text:0000A004
.text:0000A004 ; Attributes: bp-based frame
.text:0000A004
.text:0000A004 ; public: void * __thiscall CBuffer<unsigned char>::`scalar deleting destructor'(unsigned int)
.text:0000A004                 public ??_G?$CBuffer@E@@QAEPAXI@Z
.text:0000A004 ??_G?$CBuffer@E@@QAEPAXI@Z proc near    ; CODE XREF: CObjectVector<CBuffer<uchar>>::~CObjectVector<CBuffer<uchar>>(void)+7Fp
.text:0000A004
.text:0000A004 var_4           = dword ptr -4
.text:0000A004 arg_0           = dword ptr  8
.text:0000A004
.text:0000A004                 push    ebp
.text:0000A005                 mov     ebp, esp
.text:0000A007                 push    ecx
.text:0000A008                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000A00F                 mov     [ebp+var_4], ecx
.text:0000A012                 mov     ecx, [ebp+var_4]
.text:0000A015                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:0000A01A                 mov     eax, [ebp+arg_0]
.text:0000A01D                 and     eax, 1
.text:0000A020                 jz      short loc_A02E
.text:0000A022                 mov     ecx, [ebp+var_4]
.text:0000A025                 push    ecx             ; void *
.text:0000A026                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000A02B                 add     esp, 4
.text:0000A02E
.text:0000A02E loc_A02E:                               ; CODE XREF: CBuffer<uchar>::`scalar deleting destructor'(uint)+1Cj
.text:0000A02E                 mov     eax, [ebp+var_4]
.text:0000A031                 add     esp, 4
.text:0000A034                 cmp     ebp, esp
.text:0000A036                 call    __RTC_CheckEsp
.text:0000A03B                 mov     esp, ebp
.text:0000A03D                 pop     ebp
.text:0000A03E                 retn    4
.text:0000A03E ??_G?$CBuffer@E@@QAEPAXI@Z endp
.text:0000A03E
.text:0000A03E ; ---------------------------------------------------------------------------
.text:0000A041                 align 4
.text:0000A041 _text           ends
.text:0000A041
.text:0000A044 ; ===========================================================================
.text:0000A044
.text:0000A044 ; Segment type: Pure code
.text:0000A044 ; Segment permissions: Read/Execute
.text:0000A044 _text           segment para public 'CODE' use32
.text:0000A044                 assume cs:_text
.text:0000A044                 ;org 0A044h
.text:0000A044 ; COMDAT (pick any)
.text:0000A044                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A044
.text:0000A044 ; =============== S U B R O U T I N E =======================================
.text:0000A044
.text:0000A044 ; Attributes: bp-based frame
.text:0000A044
.text:0000A044 ; public: __thiscall CBuffer<unsigned char>::~CBuffer<unsigned char>(void)
.text:0000A044                 public ??1?$CBuffer@E@@QAE@XZ
.text:0000A044 ??1?$CBuffer@E@@QAE@XZ proc near        ; CODE XREF: CBuffer<uchar>::`scalar deleting destructor'(uint)+11p
.text:0000A044
.text:0000A044 var_8           = dword ptr -8
.text:0000A044 var_4           = dword ptr -4
.text:0000A044
.text:0000A044                 push    ebp
.text:0000A045                 mov     ebp, esp
.text:0000A047                 sub     esp, 8
.text:0000A04A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000A051                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000A058                 mov     [ebp+var_4], ecx
.text:0000A05B                 mov     eax, [ebp+var_4]
.text:0000A05E                 mov     ecx, [eax]
.text:0000A060                 mov     [ebp+var_8], ecx
.text:0000A063                 mov     edx, [ebp+var_8]
.text:0000A066                 push    edx             ; void *
.text:0000A067                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000A06C                 add     esp, 4
.text:0000A06F                 add     esp, 8
.text:0000A072                 cmp     ebp, esp
.text:0000A074                 call    __RTC_CheckEsp
.text:0000A079                 mov     esp, ebp
.text:0000A07B                 pop     ebp
.text:0000A07C                 retn
.text:0000A07C ??1?$CBuffer@E@@QAE@XZ endp
.text:0000A07C
.text:0000A07C ; ---------------------------------------------------------------------------
.text:0000A07D                 align 10h
.text:0000A07D _text           ends
.text:0000A07D
.text:0000A080 ; ===========================================================================
.text:0000A080
.text:0000A080 ; Segment type: Pure code
.text:0000A080 ; Segment permissions: Read/Execute
.text:0000A080 _text           segment para public 'CODE' use32
.text:0000A080                 assume cs:_text
.text:0000A080                 ;org 0A080h
.text:0000A080 ; COMDAT (pick any)
.text:0000A080                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A080
.text:0000A080 ; =============== S U B R O U T I N E =======================================
.text:0000A080
.text:0000A080 ; Attributes: bp-based frame
.text:0000A080
.text:0000A080 ; _DWORD __thiscall CArcExtInfo::~CArcExtInfo(CArcExtInfo *__hidden this)
.text:0000A080                 public ??1CArcExtInfo@@QAE@XZ
.text:0000A080 ??1CArcExtInfo@@QAE@XZ proc near        ; CODE XREF: CArcExtInfo::`scalar deleting destructor'(uint)+11p
.text:0000A080
.text:0000A080 var_10          = dword ptr -10h
.text:0000A080 var_C           = dword ptr -0Ch
.text:0000A080 var_4           = dword ptr -4
.text:0000A080
.text:0000A080                 push    ebp
.text:0000A081                 mov     ebp, esp
.text:0000A083                 push    0FFFFFFFFh
.text:0000A085                 push    offset __ehhandler$??1CArcExtInfo@@QAE@XZ
.text:0000A08A                 mov     eax, large fs:0
.text:0000A090                 push    eax
.text:0000A091                 push    ecx
.text:0000A092                 mov     [ebp+var_10], 0CCCCCCCCh
.text:0000A099                 mov     eax, dword ptr ds:___security_cookie
.text:0000A09E                 xor     eax, ebp
.text:0000A0A0                 push    eax
.text:0000A0A1                 lea     eax, [ebp+var_C]
.text:0000A0A4                 mov     large fs:0, eax
.text:0000A0AA                 mov     [ebp+var_10], ecx
.text:0000A0AD                 mov     [ebp+var_4], 0
.text:0000A0B4                 mov     ecx, [ebp+var_10]
.text:0000A0B7                 add     ecx, 0Ch        ; this
.text:0000A0BA                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000A0BF                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000A0C6                 mov     ecx, [ebp+var_10] ; this
.text:0000A0C9                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000A0CE                 mov     ecx, [ebp+var_C]
.text:0000A0D1                 mov     large fs:0, ecx
.text:0000A0D8                 pop     ecx
.text:0000A0D9                 add     esp, 10h
.text:0000A0DC                 cmp     ebp, esp
.text:0000A0DE                 call    __RTC_CheckEsp
.text:0000A0E3                 mov     esp, ebp
.text:0000A0E5                 pop     ebp
.text:0000A0E6                 retn
.text:0000A0E6 ??1CArcExtInfo@@QAE@XZ endp
.text:0000A0E6
.text:0000A0E6 ; ---------------------------------------------------------------------------
.text:0000A0E7                 align 4
.text:0000A0E7 _text           ends
.text:0000A0E7
.text$x:0000A0E8 ; ===========================================================================
.text$x:0000A0E8
.text$x:0000A0E8 ; Segment type: Pure code
.text$x:0000A0E8 ; Segment permissions: Read/Execute
.text$x:0000A0E8 _text$x         segment para public 'CODE' use32
.text$x:0000A0E8                 assume cs:_text$x
.text$x:0000A0E8                 ;org 0A0E8h
.text$x:0000A0E8 ; COMDAT (pick associative to section at A080)
.text$x:0000A0E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000A0E8
.text$x:0000A0E8 ; =============== S U B R O U T I N E =======================================
.text$x:0000A0E8
.text$x:0000A0E8
.text$x:0000A0E8 __unwindfunclet$??1CArcExtInfo@@QAE@XZ$0 proc near
.text$x:0000A0E8                                         ; DATA XREF: .xdata$x:0000A110o
.text$x:0000A0E8                 mov     ecx, [ebp-10h]  ; this
.text$x:0000A0EB                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000A0EB __unwindfunclet$??1CArcExtInfo@@QAE@XZ$0 endp
.text$x:0000A0EB
.text$x:0000A0F0
.text$x:0000A0F0 ; =============== S U B R O U T I N E =======================================
.text$x:0000A0F0
.text$x:0000A0F0
.text$x:0000A0F0 __ehhandler$??1CArcExtInfo@@QAE@XZ proc near
.text$x:0000A0F0                                         ; DATA XREF: CArcExtInfo::~CArcExtInfo(void)+5o
.text$x:0000A0F0
.text$x:0000A0F0 arg_4           = dword ptr  8
.text$x:0000A0F0
.text$x:0000A0F0                 mov     edx, [esp+arg_4]
.text$x:0000A0F4                 lea     eax, [edx+0Ch]
.text$x:0000A0F7                 mov     ecx, [edx-8]
.text$x:0000A0FA                 xor     ecx, eax
.text$x:0000A0FC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000A101                 mov     eax, offset __ehfuncinfo$??1CArcExtInfo@@QAE@XZ
.text$x:0000A106                 jmp     ___CxxFrameHandler3
.text$x:0000A106 __ehhandler$??1CArcExtInfo@@QAE@XZ endp
.text$x:0000A106
.text$x:0000A106 ; ---------------------------------------------------------------------------
.text$x:0000A10B                 align 4
.text$x:0000A10B _text$x         ends
.text$x:0000A10B
.xdata$x:0000A10C ; ===========================================================================
.xdata$x:0000A10C
.xdata$x:0000A10C ; Segment type: Pure data
.xdata$x:0000A10C ; Segment permissions: Read
.xdata$x:0000A10C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A10C                 assume cs:_xdata$x
.xdata$x:0000A10C                 ;org 0A10Ch
.xdata$x:0000A10C ; COMDAT (pick associative to section at A080)
.xdata$x:0000A10C __unwindtable$??1CArcExtInfo@@QAE@XZ db 0FFh
.xdata$x:0000A10C                                         ; DATA XREF: .xdata$x:0000A11Co
.xdata$x:0000A10D                 db 0FFh
.xdata$x:0000A10E                 db 0FFh
.xdata$x:0000A10F                 db 0FFh
.xdata$x:0000A110                 dd offset __unwindfunclet$??1CArcExtInfo@@QAE@XZ$0
.xdata$x:0000A114 __ehfuncinfo$??1CArcExtInfo@@QAE@XZ db  22h ; "
.xdata$x:0000A114                                         ; DATA XREF: __ehhandler$??1CArcExtInfo@@QAE@XZ+11o
.xdata$x:0000A115                 db    5
.xdata$x:0000A116                 db  93h ; ô
.xdata$x:0000A117                 db  19h
.xdata$x:0000A118                 db    1
.xdata$x:0000A119                 db    0
.xdata$x:0000A11A                 db    0
.xdata$x:0000A11B                 db    0
.xdata$x:0000A11C                 dd offset __unwindtable$??1CArcExtInfo@@QAE@XZ
.xdata$x:0000A120                 db    0
.xdata$x:0000A121                 db    0
.xdata$x:0000A122                 db    0
.xdata$x:0000A123                 db    0
.xdata$x:0000A124                 db    0
.xdata$x:0000A125                 db    0
.xdata$x:0000A126                 db    0
.xdata$x:0000A127                 db    0
.xdata$x:0000A128                 db    0
.xdata$x:0000A129                 db    0
.xdata$x:0000A12A                 db    0
.xdata$x:0000A12B                 db    0
.xdata$x:0000A12C                 db    0
.xdata$x:0000A12D                 db    0
.xdata$x:0000A12E                 db    0
.xdata$x:0000A12F                 db    0
.xdata$x:0000A130                 db    0
.xdata$x:0000A131                 db    0
.xdata$x:0000A132                 db    0
.xdata$x:0000A133                 db    0
.xdata$x:0000A134                 db    1
.xdata$x:0000A135                 db    0
.xdata$x:0000A136                 db    0
.xdata$x:0000A137                 db    0
.xdata$x:0000A137 _xdata$x        ends
.xdata$x:0000A137
.text:0000A138 ; ===========================================================================
.text:0000A138
.text:0000A138 ; Segment type: Pure code
.text:0000A138 ; Segment permissions: Read/Execute
.text:0000A138 _text           segment para public 'CODE' use32
.text:0000A138                 assume cs:_text
.text:0000A138                 ;org 0A138h
.text:0000A138 ; COMDAT (pick any)
.text:0000A138                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A138
.text:0000A138 ; =============== S U B R O U T I N E =======================================
.text:0000A138
.text:0000A138 ; Attributes: bp-based frame
.text:0000A138
.text:0000A138 ; _DWORD __thiscall CHasherState::~CHasherState(CHasherState *__hidden this)
.text:0000A138                 public ??1CHasherState@@QAE@XZ
.text:0000A138 ??1CHasherState@@QAE@XZ proc near       ; CODE XREF: CHasherState::`scalar deleting destructor'(uint)+11p
.text:0000A138
.text:0000A138 var_10          = dword ptr -10h
.text:0000A138 var_C           = dword ptr -0Ch
.text:0000A138 var_4           = dword ptr -4
.text:0000A138
.text:0000A138                 push    ebp
.text:0000A139                 mov     ebp, esp
.text:0000A13B                 push    0FFFFFFFFh
.text:0000A13D                 push    offset __ehhandler$??1CHasherState@@QAE@XZ
.text:0000A142                 mov     eax, large fs:0
.text:0000A148                 push    eax
.text:0000A149                 push    ecx
.text:0000A14A                 mov     [ebp+var_10], 0CCCCCCCCh
.text:0000A151                 mov     eax, dword ptr ds:___security_cookie
.text:0000A156                 xor     eax, ebp
.text:0000A158                 push    eax
.text:0000A159                 lea     eax, [ebp+var_C]
.text:0000A15C                 mov     large fs:0, eax
.text:0000A162                 mov     [ebp+var_10], ecx
.text:0000A165                 mov     [ebp+var_4], 0
.text:0000A16C                 mov     ecx, [ebp+var_10]
.text:0000A16F                 add     ecx, 4          ; this
.text:0000A172                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:0000A177                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000A17E                 mov     ecx, [ebp+var_10]
.text:0000A181                 call    ??1?$CMyComPtr@UIHasher@@@@QAE@XZ ; CMyComPtr<IHasher>::~CMyComPtr<IHasher>(void)
.text:0000A186                 mov     ecx, [ebp+var_C]
.text:0000A189                 mov     large fs:0, ecx
.text:0000A190                 pop     ecx
.text:0000A191                 add     esp, 10h
.text:0000A194                 cmp     ebp, esp
.text:0000A196                 call    __RTC_CheckEsp
.text:0000A19B                 mov     esp, ebp
.text:0000A19D                 pop     ebp
.text:0000A19E                 retn
.text:0000A19E ??1CHasherState@@QAE@XZ endp
.text:0000A19E
.text:0000A19E ; ---------------------------------------------------------------------------
.text:0000A19F                 align 10h
.text:0000A19F _text           ends
.text:0000A19F
.text$x:0000A1A0 ; ===========================================================================
.text$x:0000A1A0
.text$x:0000A1A0 ; Segment type: Pure code
.text$x:0000A1A0 ; Segment permissions: Read/Execute
.text$x:0000A1A0 _text$x         segment para public 'CODE' use32
.text$x:0000A1A0                 assume cs:_text$x
.text$x:0000A1A0                 ;org 0A1A0h
.text$x:0000A1A0 ; COMDAT (pick associative to section at A138)
.text$x:0000A1A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000A1A0
.text$x:0000A1A0 ; =============== S U B R O U T I N E =======================================
.text$x:0000A1A0
.text$x:0000A1A0
.text$x:0000A1A0 __unwindfunclet$??1CHasherState@@QAE@XZ$0 proc near
.text$x:0000A1A0                                         ; DATA XREF: .xdata$x:0000A1C8o
.text$x:0000A1A0                 mov     ecx, [ebp-10h]
.text$x:0000A1A3                 jmp     ??1?$CMyComPtr@UIHasher@@@@QAE@XZ ; CMyComPtr<IHasher>::~CMyComPtr<IHasher>(void)
.text$x:0000A1A3 __unwindfunclet$??1CHasherState@@QAE@XZ$0 endp
.text$x:0000A1A3
.text$x:0000A1A8
.text$x:0000A1A8 ; =============== S U B R O U T I N E =======================================
.text$x:0000A1A8
.text$x:0000A1A8
.text$x:0000A1A8 __ehhandler$??1CHasherState@@QAE@XZ proc near
.text$x:0000A1A8                                         ; DATA XREF: CHasherState::~CHasherState(void)+5o
.text$x:0000A1A8
.text$x:0000A1A8 arg_4           = dword ptr  8
.text$x:0000A1A8
.text$x:0000A1A8                 mov     edx, [esp+arg_4]
.text$x:0000A1AC                 lea     eax, [edx+0Ch]
.text$x:0000A1AF                 mov     ecx, [edx-8]
.text$x:0000A1B2                 xor     ecx, eax
.text$x:0000A1B4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000A1B9                 mov     eax, offset __ehfuncinfo$??1CHasherState@@QAE@XZ
.text$x:0000A1BE                 jmp     ___CxxFrameHandler3
.text$x:0000A1BE __ehhandler$??1CHasherState@@QAE@XZ endp
.text$x:0000A1BE
.text$x:0000A1BE ; ---------------------------------------------------------------------------
.text$x:0000A1C3                 align 4
.text$x:0000A1C3 _text$x         ends
.text$x:0000A1C3
.xdata$x:0000A1C4 ; ===========================================================================
.xdata$x:0000A1C4
.xdata$x:0000A1C4 ; Segment type: Pure data
.xdata$x:0000A1C4 ; Segment permissions: Read
.xdata$x:0000A1C4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A1C4                 assume cs:_xdata$x
.xdata$x:0000A1C4                 ;org 0A1C4h
.xdata$x:0000A1C4 ; COMDAT (pick associative to section at A138)
.xdata$x:0000A1C4 __unwindtable$??1CHasherState@@QAE@XZ db 0FFh
.xdata$x:0000A1C4                                         ; DATA XREF: .xdata$x:0000A1D4o
.xdata$x:0000A1C5                 db 0FFh
.xdata$x:0000A1C6                 db 0FFh
.xdata$x:0000A1C7                 db 0FFh
.xdata$x:0000A1C8                 dd offset __unwindfunclet$??1CHasherState@@QAE@XZ$0
.xdata$x:0000A1CC __ehfuncinfo$??1CHasherState@@QAE@XZ db  22h ; "
.xdata$x:0000A1CC                                         ; DATA XREF: __ehhandler$??1CHasherState@@QAE@XZ+11o
.xdata$x:0000A1CD                 db    5
.xdata$x:0000A1CE                 db  93h ; ô
.xdata$x:0000A1CF                 db  19h
.xdata$x:0000A1D0                 db    1
.xdata$x:0000A1D1                 db    0
.xdata$x:0000A1D2                 db    0
.xdata$x:0000A1D3                 db    0
.xdata$x:0000A1D4                 dd offset __unwindtable$??1CHasherState@@QAE@XZ
.xdata$x:0000A1D8                 db    0
.xdata$x:0000A1D9                 db    0
.xdata$x:0000A1DA                 db    0
.xdata$x:0000A1DB                 db    0
.xdata$x:0000A1DC                 db    0
.xdata$x:0000A1DD                 db    0
.xdata$x:0000A1DE                 db    0
.xdata$x:0000A1DF                 db    0
.xdata$x:0000A1E0                 db    0
.xdata$x:0000A1E1                 db    0
.xdata$x:0000A1E2                 db    0
.xdata$x:0000A1E3                 db    0
.xdata$x:0000A1E4                 db    0
.xdata$x:0000A1E5                 db    0
.xdata$x:0000A1E6                 db    0
.xdata$x:0000A1E7                 db    0
.xdata$x:0000A1E8                 db    0
.xdata$x:0000A1E9                 db    0
.xdata$x:0000A1EA                 db    0
.xdata$x:0000A1EB                 db    0
.xdata$x:0000A1EC                 db    1
.xdata$x:0000A1ED                 db    0
.xdata$x:0000A1EE                 db    0
.xdata$x:0000A1EF                 db    0
.xdata$x:0000A1EF _xdata$x        ends
.xdata$x:0000A1EF
.text:0000A1F0 ; ===========================================================================
.text:0000A1F0
.text:0000A1F0 ; Segment type: Pure code
.text:0000A1F0 ; Segment permissions: Read/Execute
.text:0000A1F0 _text           segment para public 'CODE' use32
.text:0000A1F0                 assume cs:_text
.text:0000A1F0                 ;org 0A1F0h
.text:0000A1F0 ; COMDAT (pick any)
.text:0000A1F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A1F0
.text:0000A1F0 ; =============== S U B R O U T I N E =======================================
.text:0000A1F0
.text:0000A1F0 ; Attributes: bp-based frame
.text:0000A1F0
.text:0000A1F0 ; _DWORD __thiscall CProperty::~CProperty(CProperty *__hidden this)
.text:0000A1F0                 public ??1CProperty@@QAE@XZ
.text:0000A1F0 ??1CProperty@@QAE@XZ proc near          ; CODE XREF: CProperty::`scalar deleting destructor'(uint)+11p
.text:0000A1F0
.text:0000A1F0 var_10          = dword ptr -10h
.text:0000A1F0 var_C           = dword ptr -0Ch
.text:0000A1F0 var_4           = dword ptr -4
.text:0000A1F0
.text:0000A1F0                 push    ebp
.text:0000A1F1                 mov     ebp, esp
.text:0000A1F3                 push    0FFFFFFFFh
.text:0000A1F5                 push    offset __ehhandler$??1CProperty@@QAE@XZ
.text:0000A1FA                 mov     eax, large fs:0
.text:0000A200                 push    eax
.text:0000A201                 push    ecx
.text:0000A202                 mov     [ebp+var_10], 0CCCCCCCCh
.text:0000A209                 mov     eax, dword ptr ds:___security_cookie
.text:0000A20E                 xor     eax, ebp
.text:0000A210                 push    eax
.text:0000A211                 lea     eax, [ebp+var_C]
.text:0000A214                 mov     large fs:0, eax
.text:0000A21A                 mov     [ebp+var_10], ecx
.text:0000A21D                 mov     [ebp+var_4], 0
.text:0000A224                 mov     ecx, [ebp+var_10]
.text:0000A227                 add     ecx, 0Ch        ; this
.text:0000A22A                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000A22F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000A236                 mov     ecx, [ebp+var_10] ; this
.text:0000A239                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000A23E                 mov     ecx, [ebp+var_C]
.text:0000A241                 mov     large fs:0, ecx
.text:0000A248                 pop     ecx
.text:0000A249                 add     esp, 10h
.text:0000A24C                 cmp     ebp, esp
.text:0000A24E                 call    __RTC_CheckEsp
.text:0000A253                 mov     esp, ebp
.text:0000A255                 pop     ebp
.text:0000A256                 retn
.text:0000A256 ??1CProperty@@QAE@XZ endp
.text:0000A256
.text:0000A256 ; ---------------------------------------------------------------------------
.text:0000A257                 align 4
.text:0000A257 _text           ends
.text:0000A257
.text$x:0000A258 ; ===========================================================================
.text$x:0000A258
.text$x:0000A258 ; Segment type: Pure code
.text$x:0000A258 ; Segment permissions: Read/Execute
.text$x:0000A258 _text$x         segment para public 'CODE' use32
.text$x:0000A258                 assume cs:_text$x
.text$x:0000A258                 ;org 0A258h
.text$x:0000A258 ; COMDAT (pick associative to section at A1F0)
.text$x:0000A258                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000A258
.text$x:0000A258 ; =============== S U B R O U T I N E =======================================
.text$x:0000A258
.text$x:0000A258
.text$x:0000A258 __unwindfunclet$??1CProperty@@QAE@XZ$0 proc near
.text$x:0000A258                                         ; DATA XREF: .xdata$x:0000A280o
.text$x:0000A258                 mov     ecx, [ebp-10h]  ; this
.text$x:0000A25B                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000A25B __unwindfunclet$??1CProperty@@QAE@XZ$0 endp
.text$x:0000A25B
.text$x:0000A260
.text$x:0000A260 ; =============== S U B R O U T I N E =======================================
.text$x:0000A260
.text$x:0000A260
.text$x:0000A260 __ehhandler$??1CProperty@@QAE@XZ proc near
.text$x:0000A260                                         ; DATA XREF: CProperty::~CProperty(void)+5o
.text$x:0000A260
.text$x:0000A260 arg_4           = dword ptr  8
.text$x:0000A260
.text$x:0000A260                 mov     edx, [esp+arg_4]
.text$x:0000A264                 lea     eax, [edx+0Ch]
.text$x:0000A267                 mov     ecx, [edx-8]
.text$x:0000A26A                 xor     ecx, eax
.text$x:0000A26C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000A271                 mov     eax, offset __ehfuncinfo$??1CProperty@@QAE@XZ
.text$x:0000A276                 jmp     ___CxxFrameHandler3
.text$x:0000A276 __ehhandler$??1CProperty@@QAE@XZ endp
.text$x:0000A276
.text$x:0000A276 ; ---------------------------------------------------------------------------
.text$x:0000A27B                 align 4
.text$x:0000A27B _text$x         ends
.text$x:0000A27B
.xdata$x:0000A27C ; ===========================================================================
.xdata$x:0000A27C
.xdata$x:0000A27C ; Segment type: Pure data
.xdata$x:0000A27C ; Segment permissions: Read
.xdata$x:0000A27C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A27C                 assume cs:_xdata$x
.xdata$x:0000A27C                 ;org 0A27Ch
.xdata$x:0000A27C ; COMDAT (pick associative to section at A1F0)
.xdata$x:0000A27C __unwindtable$??1CProperty@@QAE@XZ db 0FFh ; DATA XREF: .xdata$x:0000A28Co
.xdata$x:0000A27D                 db 0FFh
.xdata$x:0000A27E                 db 0FFh
.xdata$x:0000A27F                 db 0FFh
.xdata$x:0000A280                 dd offset __unwindfunclet$??1CProperty@@QAE@XZ$0
.xdata$x:0000A284 __ehfuncinfo$??1CProperty@@QAE@XZ db  22h ; "
.xdata$x:0000A284                                         ; DATA XREF: __ehhandler$??1CProperty@@QAE@XZ+11o
.xdata$x:0000A285                 db    5
.xdata$x:0000A286                 db  93h ; ô
.xdata$x:0000A287                 db  19h
.xdata$x:0000A288                 db    1
.xdata$x:0000A289                 db    0
.xdata$x:0000A28A                 db    0
.xdata$x:0000A28B                 db    0
.xdata$x:0000A28C                 dd offset __unwindtable$??1CProperty@@QAE@XZ
.xdata$x:0000A290                 db    0
.xdata$x:0000A291                 db    0
.xdata$x:0000A292                 db    0
.xdata$x:0000A293                 db    0
.xdata$x:0000A294                 db    0
.xdata$x:0000A295                 db    0
.xdata$x:0000A296                 db    0
.xdata$x:0000A297                 db    0
.xdata$x:0000A298                 db    0
.xdata$x:0000A299                 db    0
.xdata$x:0000A29A                 db    0
.xdata$x:0000A29B                 db    0
.xdata$x:0000A29C                 db    0
.xdata$x:0000A29D                 db    0
.xdata$x:0000A29E                 db    0
.xdata$x:0000A29F                 db    0
.xdata$x:0000A2A0                 db    0
.xdata$x:0000A2A1                 db    0
.xdata$x:0000A2A2                 db    0
.xdata$x:0000A2A3                 db    0
.xdata$x:0000A2A4                 db    1
.xdata$x:0000A2A5                 db    0
.xdata$x:0000A2A6                 db    0
.xdata$x:0000A2A7                 db    0
.xdata$x:0000A2A7 _xdata$x        ends
.xdata$x:0000A2A7
.text:0000A2A8 ; ===========================================================================
.text:0000A2A8
.text:0000A2A8 ; Segment type: Pure code
.text:0000A2A8 ; Segment permissions: Read/Execute
.text:0000A2A8 _text           segment para public 'CODE' use32
.text:0000A2A8                 assume cs:_text
.text:0000A2A8                 ;org 0A2A8h
.text:0000A2A8 ; COMDAT (pick any)
.text:0000A2A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A2A8
.text:0000A2A8 ; =============== S U B R O U T I N E =======================================
.text:0000A2A8
.text:0000A2A8 ; Attributes: bp-based frame
.text:0000A2A8
.text:0000A2A8 ; _DWORD __thiscall CRenamePair::~CRenamePair(CRenamePair *__hidden this)
.text:0000A2A8                 public ??1CRenamePair@@QAE@XZ
.text:0000A2A8 ??1CRenamePair@@QAE@XZ proc near        ; CODE XREF: CRenamePair::`scalar deleting destructor'(uint)+11p
.text:0000A2A8
.text:0000A2A8 var_10          = dword ptr -10h
.text:0000A2A8 var_C           = dword ptr -0Ch
.text:0000A2A8 var_4           = dword ptr -4
.text:0000A2A8
.text:0000A2A8                 push    ebp
.text:0000A2A9                 mov     ebp, esp
.text:0000A2AB                 push    0FFFFFFFFh
.text:0000A2AD                 push    offset __ehhandler$??1CRenamePair@@QAE@XZ
.text:0000A2B2                 mov     eax, large fs:0
.text:0000A2B8                 push    eax
.text:0000A2B9                 push    ecx
.text:0000A2BA                 mov     [ebp+var_10], 0CCCCCCCCh
.text:0000A2C1                 mov     eax, dword ptr ds:___security_cookie
.text:0000A2C6                 xor     eax, ebp
.text:0000A2C8                 push    eax
.text:0000A2C9                 lea     eax, [ebp+var_C]
.text:0000A2CC                 mov     large fs:0, eax
.text:0000A2D2                 mov     [ebp+var_10], ecx
.text:0000A2D5                 mov     [ebp+var_4], 0
.text:0000A2DC                 mov     ecx, [ebp+var_10]
.text:0000A2DF                 add     ecx, 0Ch        ; this
.text:0000A2E2                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000A2E7                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000A2EE                 mov     ecx, [ebp+var_10] ; this
.text:0000A2F1                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000A2F6                 mov     ecx, [ebp+var_C]
.text:0000A2F9                 mov     large fs:0, ecx
.text:0000A300                 pop     ecx
.text:0000A301                 add     esp, 10h
.text:0000A304                 cmp     ebp, esp
.text:0000A306                 call    __RTC_CheckEsp
.text:0000A30B                 mov     esp, ebp
.text:0000A30D                 pop     ebp
.text:0000A30E                 retn
.text:0000A30E ??1CRenamePair@@QAE@XZ endp
.text:0000A30E
.text:0000A30E ; ---------------------------------------------------------------------------
.text:0000A30F                 align 10h
.text:0000A30F _text           ends
.text:0000A30F
.text$x:0000A310 ; ===========================================================================
.text$x:0000A310
.text$x:0000A310 ; Segment type: Pure code
.text$x:0000A310 ; Segment permissions: Read/Execute
.text$x:0000A310 _text$x         segment para public 'CODE' use32
.text$x:0000A310                 assume cs:_text$x
.text$x:0000A310                 ;org 0A310h
.text$x:0000A310 ; COMDAT (pick associative to section at A2A8)
.text$x:0000A310                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000A310
.text$x:0000A310 ; =============== S U B R O U T I N E =======================================
.text$x:0000A310
.text$x:0000A310
.text$x:0000A310 __unwindfunclet$??1CRenamePair@@QAE@XZ$0 proc near
.text$x:0000A310                                         ; DATA XREF: .xdata$x:0000A338o
.text$x:0000A310                 mov     ecx, [ebp-10h]  ; this
.text$x:0000A313                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000A313 __unwindfunclet$??1CRenamePair@@QAE@XZ$0 endp
.text$x:0000A313
.text$x:0000A318
.text$x:0000A318 ; =============== S U B R O U T I N E =======================================
.text$x:0000A318
.text$x:0000A318
.text$x:0000A318 __ehhandler$??1CRenamePair@@QAE@XZ proc near
.text$x:0000A318                                         ; DATA XREF: CRenamePair::~CRenamePair(void)+5o
.text$x:0000A318
.text$x:0000A318 arg_4           = dword ptr  8
.text$x:0000A318
.text$x:0000A318                 mov     edx, [esp+arg_4]
.text$x:0000A31C                 lea     eax, [edx+0Ch]
.text$x:0000A31F                 mov     ecx, [edx-8]
.text$x:0000A322                 xor     ecx, eax
.text$x:0000A324                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000A329                 mov     eax, offset __ehfuncinfo$??1CRenamePair@@QAE@XZ
.text$x:0000A32E                 jmp     ___CxxFrameHandler3
.text$x:0000A32E __ehhandler$??1CRenamePair@@QAE@XZ endp
.text$x:0000A32E
.text$x:0000A32E ; ---------------------------------------------------------------------------
.text$x:0000A333                 align 4
.text$x:0000A333 _text$x         ends
.text$x:0000A333
.xdata$x:0000A334 ; ===========================================================================
.xdata$x:0000A334
.xdata$x:0000A334 ; Segment type: Pure data
.xdata$x:0000A334 ; Segment permissions: Read
.xdata$x:0000A334 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A334                 assume cs:_xdata$x
.xdata$x:0000A334                 ;org 0A334h
.xdata$x:0000A334 ; COMDAT (pick associative to section at A2A8)
.xdata$x:0000A334 __unwindtable$??1CRenamePair@@QAE@XZ db 0FFh
.xdata$x:0000A334                                         ; DATA XREF: .xdata$x:0000A344o
.xdata$x:0000A335                 db 0FFh
.xdata$x:0000A336                 db 0FFh
.xdata$x:0000A337                 db 0FFh
.xdata$x:0000A338                 dd offset __unwindfunclet$??1CRenamePair@@QAE@XZ$0
.xdata$x:0000A33C __ehfuncinfo$??1CRenamePair@@QAE@XZ db  22h ; "
.xdata$x:0000A33C                                         ; DATA XREF: __ehhandler$??1CRenamePair@@QAE@XZ+11o
.xdata$x:0000A33D                 db    5
.xdata$x:0000A33E                 db  93h ; ô
.xdata$x:0000A33F                 db  19h
.xdata$x:0000A340                 db    1
.xdata$x:0000A341                 db    0
.xdata$x:0000A342                 db    0
.xdata$x:0000A343                 db    0
.xdata$x:0000A344                 dd offset __unwindtable$??1CRenamePair@@QAE@XZ
.xdata$x:0000A348                 db    0
.xdata$x:0000A349                 db    0
.xdata$x:0000A34A                 db    0
.xdata$x:0000A34B                 db    0
.xdata$x:0000A34C                 db    0
.xdata$x:0000A34D                 db    0
.xdata$x:0000A34E                 db    0
.xdata$x:0000A34F                 db    0
.xdata$x:0000A350                 db    0
.xdata$x:0000A351                 db    0
.xdata$x:0000A352                 db    0
.xdata$x:0000A353                 db    0
.xdata$x:0000A354                 db    0
.xdata$x:0000A355                 db    0
.xdata$x:0000A356                 db    0
.xdata$x:0000A357                 db    0
.xdata$x:0000A358                 db    0
.xdata$x:0000A359                 db    0
.xdata$x:0000A35A                 db    0
.xdata$x:0000A35B                 db    0
.xdata$x:0000A35C                 db    1
.xdata$x:0000A35D                 db    0
.xdata$x:0000A35E                 db    0
.xdata$x:0000A35F                 db    0
.xdata$x:0000A35F _xdata$x        ends
.xdata$x:0000A35F
.text:0000A360 ; ===========================================================================
.text:0000A360
.text:0000A360 ; Segment type: Pure code
.text:0000A360 ; Segment permissions: Read/Execute
.text:0000A360 _text           segment para public 'CODE' use32
.text:0000A360                 assume cs:_text
.text:0000A360                 ;org 0A360h
.text:0000A360 ; COMDAT (pick any)
.text:0000A360                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A360
.text:0000A360 ; =============== S U B R O U T I N E =======================================
.text:0000A360
.text:0000A360 ; Attributes: bp-based frame
.text:0000A360
.text:0000A360 ; public: __thiscall CRecordVector<void *>::CRecordVector<void *>(void)
.text:0000A360                 public ??0?$CRecordVector@PAX@@QAE@XZ
.text:0000A360 ??0?$CRecordVector@PAX@@QAE@XZ proc near
.text:0000A360                                         ; CODE XREF: CObjectVector<UString>::CObjectVector<UString>(void)+11p
.text:0000A360                                         ; CObjectVector<NWildcard::CPair>::CObjectVector<NWildcard::CPair>(void)+11p ...
.text:0000A360
.text:0000A360 var_4           = dword ptr -4
.text:0000A360
.text:0000A360                 push    ebp
.text:0000A361                 mov     ebp, esp
.text:0000A363                 push    ecx
.text:0000A364                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000A36B                 mov     [ebp+var_4], ecx
.text:0000A36E                 mov     eax, [ebp+var_4]
.text:0000A371                 mov     dword ptr [eax], 0
.text:0000A377                 mov     ecx, [ebp+var_4]
.text:0000A37A                 mov     dword ptr [ecx+4], 0
.text:0000A381                 mov     edx, [ebp+var_4]
.text:0000A384                 mov     dword ptr [edx+8], 0
.text:0000A38B                 mov     eax, [ebp+var_4]
.text:0000A38E                 mov     esp, ebp
.text:0000A390                 pop     ebp
.text:0000A391                 retn
.text:0000A391 ??0?$CRecordVector@PAX@@QAE@XZ endp
.text:0000A391
.text:0000A391 ; ---------------------------------------------------------------------------
.text:0000A392                 align 4
.text:0000A392 _text           ends
.text:0000A392
.text:0000A394 ; ===========================================================================
.text:0000A394
.text:0000A394 ; Segment type: Pure code
.text:0000A394 ; Segment permissions: Read/Execute
.text:0000A394 _text           segment para public 'CODE' use32
.text:0000A394                 assume cs:_text
.text:0000A394                 ;org 0A394h
.text:0000A394 ; COMDAT (pick any)
.text:0000A394                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A394
.text:0000A394 ; =============== S U B R O U T I N E =======================================
.text:0000A394
.text:0000A394 ; Attributes: bp-based frame
.text:0000A394
.text:0000A394 ; public: unsigned int __thiscall CRecordVector<void *>::Size(void)const
.text:0000A394                 public ?Size@?$CRecordVector@PAX@@QBEIXZ
.text:0000A394 ?Size@?$CRecordVector@PAX@@QBEIXZ proc near
.text:0000A394                                         ; CODE XREF: CObjectVector<UString>::Size(void)+11p
.text:0000A394                                         ; CObjectVector<UString>::~CObjectVector<UString>(void)+46p ...
.text:0000A394
.text:0000A394 var_4           = dword ptr -4
.text:0000A394
.text:0000A394                 push    ebp
.text:0000A395                 mov     ebp, esp
.text:0000A397                 push    ecx
.text:0000A398                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000A39F                 mov     [ebp+var_4], ecx
.text:0000A3A2                 mov     eax, [ebp+var_4]
.text:0000A3A5                 mov     eax, [eax+4]
.text:0000A3A8                 mov     esp, ebp
.text:0000A3AA                 pop     ebp
.text:0000A3AB                 retn
.text:0000A3AB ?Size@?$CRecordVector@PAX@@QBEIXZ endp
.text:0000A3AB
.text:0000A3AB _text           ends
.text:0000A3AB
.text:0000A3AC ; ===========================================================================
.text:0000A3AC
.text:0000A3AC ; Segment type: Pure code
.text:0000A3AC ; Segment permissions: Read/Execute
.text:0000A3AC _text           segment para public 'CODE' use32
.text:0000A3AC                 assume cs:_text
.text:0000A3AC                 ;org 0A3ACh
.text:0000A3AC ; COMDAT (pick any)
.text:0000A3AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A3AC
.text:0000A3AC ; =============== S U B R O U T I N E =======================================
.text:0000A3AC
.text:0000A3AC ; Attributes: bp-based frame
.text:0000A3AC
.text:0000A3AC ; public: bool __thiscall CRecordVector<void *>::IsEmpty(void)const
.text:0000A3AC                 public ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ
.text:0000A3AC ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ proc near
.text:0000A3AC                                         ; CODE XREF: CObjectVector<UString>::IsEmpty(void)+11p
.text:0000A3AC
.text:0000A3AC var_4           = dword ptr -4
.text:0000A3AC
.text:0000A3AC                 push    ebp
.text:0000A3AD                 mov     ebp, esp
.text:0000A3AF                 push    ecx
.text:0000A3B0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000A3B7                 mov     [ebp+var_4], ecx
.text:0000A3BA                 mov     eax, [ebp+var_4]
.text:0000A3BD                 xor     ecx, ecx
.text:0000A3BF                 cmp     dword ptr [eax+4], 0
.text:0000A3C3                 setz    cl
.text:0000A3C6                 mov     al, cl
.text:0000A3C8                 mov     esp, ebp
.text:0000A3CA                 pop     ebp
.text:0000A3CB                 retn
.text:0000A3CB ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ endp
.text:0000A3CB
.text:0000A3CB _text           ends
.text:0000A3CB
.text:0000A3CC ; ===========================================================================
.text:0000A3CC
.text:0000A3CC ; Segment type: Pure code
.text:0000A3CC ; Segment permissions: Read/Execute
.text:0000A3CC _text           segment para public 'CODE' use32
.text:0000A3CC                 assume cs:_text
.text:0000A3CC                 ;org 0A3CCh
.text:0000A3CC ; COMDAT (pick any)
.text:0000A3CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A3CC
.text:0000A3CC ; =============== S U B R O U T I N E =======================================
.text:0000A3CC
.text:0000A3CC ; Attributes: bp-based frame
.text:0000A3CC
.text:0000A3CC ; public: void __thiscall CRecordVector<void *>::Reserve(unsigned int)
.text:0000A3CC                 public ?Reserve@?$CRecordVector@PAX@@QAEXI@Z
.text:0000A3CC ?Reserve@?$CRecordVector@PAX@@QAEXI@Z proc near
.text:0000A3CC                                         ; CODE XREF: CObjectVector<CProperty>::operator=(CObjectVector<CProperty> const &)+69p
.text:0000A3CC
.text:0000A3CC var_10          = dword ptr -10h
.text:0000A3CC var_C           = dword ptr -0Ch
.text:0000A3CC Dst             = dword ptr -8
.text:0000A3CC var_4           = dword ptr -4
.text:0000A3CC arg_0           = dword ptr  8
.text:0000A3CC
.text:0000A3CC                 push    ebp
.text:0000A3CD                 mov     ebp, esp
.text:0000A3CF                 sub     esp, 10h
.text:0000A3D2                 mov     eax, 0CCCCCCCCh
.text:0000A3D7                 mov     [ebp+var_10], eax
.text:0000A3DA                 mov     [ebp+var_C], eax
.text:0000A3DD                 mov     [ebp+Dst], eax
.text:0000A3E0                 mov     [ebp+var_4], eax
.text:0000A3E3                 mov     [ebp+var_4], ecx
.text:0000A3E6                 mov     eax, [ebp+var_4]
.text:0000A3E9                 mov     ecx, [ebp+arg_0]
.text:0000A3EC                 cmp     ecx, [eax+8]
.text:0000A3EF                 jbe     short loc_A460
.text:0000A3F1                 xor     ecx, ecx
.text:0000A3F3                 mov     eax, [ebp+arg_0]
.text:0000A3F6                 mov     edx, 4
.text:0000A3FB                 mul     edx
.text:0000A3FD                 seto    cl
.text:0000A400                 neg     ecx
.text:0000A402                 or      ecx, eax
.text:0000A404                 push    ecx             ; unsigned int
.text:0000A405                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000A40A                 add     esp, 4
.text:0000A40D                 mov     [ebp+var_C], eax
.text:0000A410                 mov     eax, [ebp+var_C]
.text:0000A413                 mov     [ebp+Dst], eax
.text:0000A416                 mov     ecx, [ebp+var_4]
.text:0000A419                 cmp     dword ptr [ecx+4], 0
.text:0000A41D                 jz      short loc_A43B
.text:0000A41F                 mov     edx, [ebp+var_4]
.text:0000A422                 mov     eax, [edx+4]
.text:0000A425                 shl     eax, 2
.text:0000A428                 push    eax             ; Size
.text:0000A429                 mov     ecx, [ebp+var_4]
.text:0000A42C                 mov     edx, [ecx]
.text:0000A42E                 push    edx             ; Src
.text:0000A42F                 mov     eax, [ebp+Dst]
.text:0000A432                 push    eax             ; Dst
.text:0000A433                 call    _memcpy
.text:0000A438                 add     esp, 0Ch
.text:0000A43B
.text:0000A43B loc_A43B:                               ; CODE XREF: CRecordVector<void *>::Reserve(uint)+51j
.text:0000A43B                 mov     ecx, [ebp+var_4]
.text:0000A43E                 mov     edx, [ecx]
.text:0000A440                 mov     [ebp+var_10], edx
.text:0000A443                 mov     eax, [ebp+var_10]
.text:0000A446                 push    eax             ; void *
.text:0000A447                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000A44C                 add     esp, 4
.text:0000A44F                 mov     ecx, [ebp+var_4]
.text:0000A452                 mov     edx, [ebp+Dst]
.text:0000A455                 mov     [ecx], edx
.text:0000A457                 mov     eax, [ebp+var_4]
.text:0000A45A                 mov     ecx, [ebp+arg_0]
.text:0000A45D                 mov     [eax+8], ecx
.text:0000A460
.text:0000A460 loc_A460:                               ; CODE XREF: CRecordVector<void *>::Reserve(uint)+23j
.text:0000A460                 add     esp, 10h
.text:0000A463                 cmp     ebp, esp
.text:0000A465                 call    __RTC_CheckEsp
.text:0000A46A                 mov     esp, ebp
.text:0000A46C                 pop     ebp
.text:0000A46D                 retn    4
.text:0000A46D ?Reserve@?$CRecordVector@PAX@@QAEXI@Z endp
.text:0000A46D
.text:0000A46D _text           ends
.text:0000A46D
.text:0000A470 ; ===========================================================================
.text:0000A470
.text:0000A470 ; Segment type: Pure code
.text:0000A470 ; Segment permissions: Read/Execute
.text:0000A470 _text           segment para public 'CODE' use32
.text:0000A470                 assume cs:_text
.text:0000A470                 ;org 0A470h
.text:0000A470 ; COMDAT (pick any)
.text:0000A470                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A470
.text:0000A470 ; =============== S U B R O U T I N E =======================================
.text:0000A470
.text:0000A470 ; Attributes: bp-based frame
.text:0000A470
.text:0000A470 ; public: __thiscall CRecordVector<void *>::~CRecordVector<void *>(void)
.text:0000A470                 public ??1?$CRecordVector@PAX@@QAE@XZ
.text:0000A470 ??1?$CRecordVector@PAX@@QAE@XZ proc near
.text:0000A470                                         ; CODE XREF: CObjectVector<UString>::~CObjectVector<UString>(void)+9Cp
.text:0000A470                                         ; __unwindfunclet$??1?$CObjectVector@VUString@@@@QAE@XZ$0+3j ...
.text:0000A470
.text:0000A470 var_8           = dword ptr -8
.text:0000A470 var_4           = dword ptr -4
.text:0000A470
.text:0000A470                 push    ebp
.text:0000A471                 mov     ebp, esp
.text:0000A473                 sub     esp, 8
.text:0000A476                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000A47D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000A484                 mov     [ebp+var_4], ecx
.text:0000A487                 mov     eax, [ebp+var_4]
.text:0000A48A                 mov     ecx, [eax]
.text:0000A48C                 mov     [ebp+var_8], ecx
.text:0000A48F                 mov     edx, [ebp+var_8]
.text:0000A492                 push    edx             ; void *
.text:0000A493                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000A498                 add     esp, 4
.text:0000A49B                 add     esp, 8
.text:0000A49E                 cmp     ebp, esp
.text:0000A4A0                 call    __RTC_CheckEsp
.text:0000A4A5                 mov     esp, ebp
.text:0000A4A7                 pop     ebp
.text:0000A4A8                 retn
.text:0000A4A8 ??1?$CRecordVector@PAX@@QAE@XZ endp
.text:0000A4A8
.text:0000A4A8 ; ---------------------------------------------------------------------------
.text:0000A4A9                 align 4
.text:0000A4A9 _text           ends
.text:0000A4A9
.text:0000A4AC ; ===========================================================================
.text:0000A4AC
.text:0000A4AC ; Segment type: Pure code
.text:0000A4AC ; Segment permissions: Read/Execute
.text:0000A4AC _text           segment para public 'CODE' use32
.text:0000A4AC                 assume cs:_text
.text:0000A4AC                 ;org 0A4ACh
.text:0000A4AC ; COMDAT (pick any)
.text:0000A4AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A4AC
.text:0000A4AC ; =============== S U B R O U T I N E =======================================
.text:0000A4AC
.text:0000A4AC ; Attributes: bp-based frame
.text:0000A4AC
.text:0000A4AC ; public: void __thiscall CRecordVector<void *>::Clear(void)
.text:0000A4AC                 public ?Clear@?$CRecordVector@PAX@@QAEXXZ
.text:0000A4AC ?Clear@?$CRecordVector@PAX@@QAEXXZ proc near
.text:0000A4AC                                         ; CODE XREF: CObjectVector<UString>::Clear(void)+6Fp
.text:0000A4AC                                         ; CObjectVector<CProperty>::Clear(void)+6Fp
.text:0000A4AC
.text:0000A4AC var_4           = dword ptr -4
.text:0000A4AC
.text:0000A4AC                 push    ebp
.text:0000A4AD                 mov     ebp, esp
.text:0000A4AF                 push    ecx
.text:0000A4B0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000A4B7                 mov     [ebp+var_4], ecx
.text:0000A4BA                 mov     eax, [ebp+var_4]
.text:0000A4BD                 mov     dword ptr [eax+4], 0
.text:0000A4C4                 mov     esp, ebp
.text:0000A4C6                 pop     ebp
.text:0000A4C7                 retn
.text:0000A4C7 ?Clear@?$CRecordVector@PAX@@QAEXXZ endp
.text:0000A4C7
.text:0000A4C7 _text           ends
.text:0000A4C7
.text:0000A4C8 ; ===========================================================================
.text:0000A4C8
.text:0000A4C8 ; Segment type: Pure code
.text:0000A4C8 ; Segment permissions: Read/Execute
.text:0000A4C8 _text           segment para public 'CODE' use32
.text:0000A4C8                 assume cs:_text
.text:0000A4C8                 ;org 0A4C8h
.text:0000A4C8 ; COMDAT (pick any)
.text:0000A4C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A4C8
.text:0000A4C8 ; =============== S U B R O U T I N E =======================================
.text:0000A4C8
.text:0000A4C8 ; Attributes: bp-based frame
.text:0000A4C8
.text:0000A4C8 ; public: void __thiscall CRecordVector<void *>::Delete(unsigned int)
.text:0000A4C8                 public ?Delete@?$CRecordVector@PAX@@QAEXI@Z
.text:0000A4C8 ?Delete@?$CRecordVector@PAX@@QAEXI@Z proc near
.text:0000A4C8                                         ; CODE XREF: CObjectVector<UString>::Delete(uint)+54p
.text:0000A4C8
.text:0000A4C8 var_4           = dword ptr -4
.text:0000A4C8 arg_0           = dword ptr  8
.text:0000A4C8
.text:0000A4C8                 push    ebp
.text:0000A4C9                 mov     ebp, esp
.text:0000A4CB                 push    ecx
.text:0000A4CC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000A4D3                 mov     [ebp+var_4], ecx
.text:0000A4D6                 mov     eax, [ebp+arg_0]
.text:0000A4D9                 add     eax, 1
.text:0000A4DC                 push    eax
.text:0000A4DD                 mov     ecx, [ebp+arg_0]
.text:0000A4E0                 push    ecx
.text:0000A4E1                 mov     ecx, [ebp+var_4]
.text:0000A4E4                 call    ?MoveItems@?$CRecordVector@PAX@@AAEXII@Z ; CRecordVector<void *>::MoveItems(uint,uint)
.text:0000A4E9                 mov     edx, [ebp+var_4]
.text:0000A4EC                 mov     eax, [edx+4]
.text:0000A4EF                 sub     eax, 1
.text:0000A4F2                 mov     ecx, [ebp+var_4]
.text:0000A4F5                 mov     [ecx+4], eax
.text:0000A4F8                 add     esp, 4
.text:0000A4FB                 cmp     ebp, esp
.text:0000A4FD                 call    __RTC_CheckEsp
.text:0000A502                 mov     esp, ebp
.text:0000A504                 pop     ebp
.text:0000A505                 retn    4
.text:0000A505 ?Delete@?$CRecordVector@PAX@@QAEXI@Z endp
.text:0000A505
.text:0000A505 _text           ends
.text:0000A505
.text:0000A508 ; ===========================================================================
.text:0000A508
.text:0000A508 ; Segment type: Pure code
.text:0000A508 ; Segment permissions: Read/Execute
.text:0000A508 _text           segment para public 'CODE' use32
.text:0000A508                 assume cs:_text
.text:0000A508                 ;org 0A508h
.text:0000A508 ; COMDAT (pick any)
.text:0000A508                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A508
.text:0000A508 ; =============== S U B R O U T I N E =======================================
.text:0000A508
.text:0000A508 ; Attributes: bp-based frame
.text:0000A508
.text:0000A508 ; public: unsigned int __thiscall CRecordVector<void *>::Add(void * const)
.text:0000A508                 public ?Add@?$CRecordVector@PAX@@QAEIQAX@Z
.text:0000A508 ?Add@?$CRecordVector@PAX@@QAEIQAX@Z proc near
.text:0000A508                                         ; CODE XREF: CObjectVector<UString>::Add(UString const &)+7Fp
.text:0000A508
.text:0000A508 var_8           = dword ptr -8
.text:0000A508 var_4           = dword ptr -4
.text:0000A508 arg_0           = dword ptr  8
.text:0000A508
.text:0000A508                 push    ebp
.text:0000A509                 mov     ebp, esp
.text:0000A50B                 sub     esp, 8
.text:0000A50E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000A515                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000A51C                 mov     [ebp+var_4], ecx
.text:0000A51F                 mov     ecx, [ebp+var_4]
.text:0000A522                 call    ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition(void)
.text:0000A527                 mov     eax, [ebp+var_4]
.text:0000A52A                 mov     ecx, [eax+4]
.text:0000A52D                 mov     edx, [ebp+var_4]
.text:0000A530                 mov     eax, [edx]
.text:0000A532                 mov     edx, [ebp+arg_0]
.text:0000A535                 mov     [eax+ecx*4], edx
.text:0000A538                 mov     eax, [ebp+var_4]
.text:0000A53B                 mov     ecx, [eax+4]
.text:0000A53E                 mov     [ebp+var_8], ecx
.text:0000A541                 mov     edx, [ebp+var_4]
.text:0000A544                 mov     eax, [edx+4]
.text:0000A547                 add     eax, 1
.text:0000A54A                 mov     ecx, [ebp+var_4]
.text:0000A54D                 mov     [ecx+4], eax
.text:0000A550                 mov     eax, [ebp+var_8]
.text:0000A553                 add     esp, 8
.text:0000A556                 cmp     ebp, esp
.text:0000A558                 call    __RTC_CheckEsp
.text:0000A55D                 mov     esp, ebp
.text:0000A55F                 pop     ebp
.text:0000A560                 retn    4
.text:0000A560 ?Add@?$CRecordVector@PAX@@QAEIQAX@Z endp
.text:0000A560
.text:0000A560 ; ---------------------------------------------------------------------------
.text:0000A563                 align 4
.text:0000A563 _text           ends
.text:0000A563
.text:0000A564 ; ===========================================================================
.text:0000A564
.text:0000A564 ; Segment type: Pure code
.text:0000A564 ; Segment permissions: Read/Execute
.text:0000A564 _text           segment para public 'CODE' use32
.text:0000A564                 assume cs:_text
.text:0000A564                 ;org 0A564h
.text:0000A564 ; COMDAT (pick any)
.text:0000A564                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A564
.text:0000A564 ; =============== S U B R O U T I N E =======================================
.text:0000A564
.text:0000A564 ; Attributes: bp-based frame
.text:0000A564
.text:0000A564 ; public: void __thiscall CRecordVector<void *>::AddInReserved(void * const)
.text:0000A564                 public ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z
.text:0000A564 ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z proc near
.text:0000A564                                         ; CODE XREF: CObjectVector<CProperty>::operator=(CObjectVector<CProperty> const &)+D7p
.text:0000A564
.text:0000A564 var_4           = dword ptr -4
.text:0000A564 arg_0           = dword ptr  8
.text:0000A564
.text:0000A564                 push    ebp
.text:0000A565                 mov     ebp, esp
.text:0000A567                 push    ecx
.text:0000A568                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000A56F                 mov     [ebp+var_4], ecx
.text:0000A572                 mov     eax, [ebp+var_4]
.text:0000A575                 mov     ecx, [eax+4]
.text:0000A578                 mov     edx, [ebp+var_4]
.text:0000A57B                 mov     eax, [edx]
.text:0000A57D                 mov     edx, [ebp+arg_0]
.text:0000A580                 mov     [eax+ecx*4], edx
.text:0000A583                 mov     eax, [ebp+var_4]
.text:0000A586                 mov     ecx, [eax+4]
.text:0000A589                 add     ecx, 1
.text:0000A58C                 mov     edx, [ebp+var_4]
.text:0000A58F                 mov     [edx+4], ecx
.text:0000A592                 mov     esp, ebp
.text:0000A594                 pop     ebp
.text:0000A595                 retn    4
.text:0000A595 ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z endp
.text:0000A595
.text:0000A595 _text           ends
.text:0000A595
.text:0000A598 ; ===========================================================================
.text:0000A598
.text:0000A598 ; Segment type: Pure code
.text:0000A598 ; Segment permissions: Read/Execute
.text:0000A598 _text           segment para public 'CODE' use32
.text:0000A598                 assume cs:_text
.text:0000A598                 ;org 0A598h
.text:0000A598 ; COMDAT (pick any)
.text:0000A598                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A598
.text:0000A598 ; =============== S U B R O U T I N E =======================================
.text:0000A598
.text:0000A598 ; Attributes: bp-based frame
.text:0000A598
.text:0000A598 ; public: void * const & __thiscall CRecordVector<void *>::operator[](unsigned int)const
.text:0000A598                 public ??A?$CRecordVector@PAX@@QBEABQAXI@Z
.text:0000A598 ??A?$CRecordVector@PAX@@QBEABQAXI@Z proc near
.text:0000A598                                         ; CODE XREF: CObjectVector<UString>::operator[](uint)+15p
.text:0000A598                                         ; CObjectVector<CArcExtInfo>::operator[](uint)+15p ...
.text:0000A598
.text:0000A598 var_4           = dword ptr -4
.text:0000A598 arg_0           = dword ptr  8
.text:0000A598
.text:0000A598                 push    ebp
.text:0000A599                 mov     ebp, esp
.text:0000A59B                 push    ecx
.text:0000A59C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000A5A3                 mov     [ebp+var_4], ecx
.text:0000A5A6                 mov     eax, [ebp+var_4]
.text:0000A5A9                 mov     ecx, [eax]
.text:0000A5AB                 mov     edx, [ebp+arg_0]
.text:0000A5AE                 lea     eax, [ecx+edx*4]
.text:0000A5B1                 mov     esp, ebp
.text:0000A5B3                 pop     ebp
.text:0000A5B4                 retn    4
.text:0000A5B4 ??A?$CRecordVector@PAX@@QBEABQAXI@Z endp
.text:0000A5B4
.text:0000A5B4 ; ---------------------------------------------------------------------------
.text:0000A5B7                 align 4
.text:0000A5B7 _text           ends
.text:0000A5B7
.text:0000A5B8 ; ===========================================================================
.text:0000A5B8
.text:0000A5B8 ; Segment type: Pure code
.text:0000A5B8 ; Segment permissions: Read/Execute
.text:0000A5B8 _text           segment para public 'CODE' use32
.text:0000A5B8                 assume cs:_text
.text:0000A5B8                 ;org 0A5B8h
.text:0000A5B8 ; COMDAT (pick any)
.text:0000A5B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A5B8
.text:0000A5B8 ; =============== S U B R O U T I N E =======================================
.text:0000A5B8
.text:0000A5B8 ; Attributes: bp-based frame
.text:0000A5B8
.text:0000A5B8 ; public: void * & __thiscall CRecordVector<void *>::operator[](unsigned int)
.text:0000A5B8                 public ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
.text:0000A5B8 ??A?$CRecordVector@PAX@@QAEAAPAXI@Z proc near
.text:0000A5B8                                         ; CODE XREF: CObjectVector<UString>::operator[](uint)+15p
.text:0000A5B8                                         ; CObjectVector<UString>::~CObjectVector<UString>(void)+64p ...
.text:0000A5B8
.text:0000A5B8 var_4           = dword ptr -4
.text:0000A5B8 arg_0           = dword ptr  8
.text:0000A5B8
.text:0000A5B8                 push    ebp
.text:0000A5B9                 mov     ebp, esp
.text:0000A5BB                 push    ecx
.text:0000A5BC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000A5C3                 mov     [ebp+var_4], ecx
.text:0000A5C6                 mov     eax, [ebp+var_4]
.text:0000A5C9                 mov     ecx, [eax]
.text:0000A5CB                 mov     edx, [ebp+arg_0]
.text:0000A5CE                 lea     eax, [ecx+edx*4]
.text:0000A5D1                 mov     esp, ebp
.text:0000A5D3                 pop     ebp
.text:0000A5D4                 retn    4
.text:0000A5D4 ??A?$CRecordVector@PAX@@QAEAAPAXI@Z endp
.text:0000A5D4
.text:0000A5D4 ; ---------------------------------------------------------------------------
.text:0000A5D7                 align 4
.text:0000A5D7 _text           ends
.text:0000A5D7
.text:0000A5D8 ; ===========================================================================
.text:0000A5D8
.text:0000A5D8 ; Segment type: Pure code
.text:0000A5D8 ; Segment permissions: Read/Execute
.text:0000A5D8 _text           segment para public 'CODE' use32
.text:0000A5D8                 assume cs:_text
.text:0000A5D8                 ;org 0A5D8h
.text:0000A5D8 ; COMDAT (pick any)
.text:0000A5D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A5D8
.text:0000A5D8 ; =============== S U B R O U T I N E =======================================
.text:0000A5D8
.text:0000A5D8 ; Attributes: bp-based frame
.text:0000A5D8
.text:0000A5D8 ; public: struct NWildcard::CPair & __thiscall CObjectVector<struct NWildcard::CPair>::operator[](unsigned int)
.text:0000A5D8                 public ??A?$CObjectVector@UCPair@NWildcard@@@@QAEAAUCPair@NWildcard@@I@Z
.text:0000A5D8 ??A?$CObjectVector@UCPair@NWildcard@@@@QAEAAUCPair@NWildcard@@I@Z proc near
.text:0000A5D8                                         ; CODE XREF: CObjectVector<NWildcard::CPair>::Front(void)+13p
.text:0000A5D8
.text:0000A5D8 var_4           = dword ptr -4
.text:0000A5D8 arg_0           = dword ptr  8
.text:0000A5D8
.text:0000A5D8                 push    ebp
.text:0000A5D9                 mov     ebp, esp
.text:0000A5DB                 push    ecx
.text:0000A5DC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000A5E3                 mov     [ebp+var_4], ecx
.text:0000A5E6                 mov     eax, [ebp+arg_0]
.text:0000A5E9                 push    eax
.text:0000A5EA                 mov     ecx, [ebp+var_4]
.text:0000A5ED                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:0000A5F2                 mov     eax, [eax]
.text:0000A5F4                 add     esp, 4
.text:0000A5F7                 cmp     ebp, esp
.text:0000A5F9                 call    __RTC_CheckEsp
.text:0000A5FE                 mov     esp, ebp
.text:0000A600                 pop     ebp
.text:0000A601                 retn    4
.text:0000A601 ??A?$CObjectVector@UCPair@NWildcard@@@@QAEAAUCPair@NWildcard@@I@Z endp
.text:0000A601
.text:0000A601 _text           ends
.text:0000A601
.text:0000A604 ; ===========================================================================
.text:0000A604
.text:0000A604 ; Segment type: Pure code
.text:0000A604 ; Segment permissions: Read/Execute
.text:0000A604 _text           segment para public 'CODE' use32
.text:0000A604                 assume cs:_text
.text:0000A604                 ;org 0A604h
.text:0000A604 ; COMDAT (pick any)
.text:0000A604                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A604
.text:0000A604 ; =============== S U B R O U T I N E =======================================
.text:0000A604
.text:0000A604 ; Attributes: bp-based frame
.text:0000A604
.text:0000A604 ; public: void __thiscall CRecordVector<int>::Insert(unsigned int, int)
.text:0000A604                 public ?Insert@?$CRecordVector@H@@QAEXIH@Z
.text:0000A604 ?Insert@?$CRecordVector@H@@QAEXIH@Z proc near
.text:0000A604                                         ; CODE XREF: CRecordVector<int>::AddToUniqueSorted(int)+84p
.text:0000A604
.text:0000A604 var_4           = dword ptr -4
.text:0000A604 arg_0           = dword ptr  8
.text:0000A604 arg_4           = dword ptr  0Ch
.text:0000A604
.text:0000A604                 push    ebp
.text:0000A605                 mov     ebp, esp
.text:0000A607                 push    ecx
.text:0000A608                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000A60F                 mov     [ebp+var_4], ecx
.text:0000A612                 mov     ecx, [ebp+var_4]
.text:0000A615                 call    ?ReserveOnePosition@?$CRecordVector@H@@AAEXXZ ; CRecordVector<int>::ReserveOnePosition(void)
.text:0000A61A                 mov     eax, [ebp+arg_0]
.text:0000A61D                 push    eax
.text:0000A61E                 mov     ecx, [ebp+arg_0]
.text:0000A621                 add     ecx, 1
.text:0000A624                 push    ecx
.text:0000A625                 mov     ecx, [ebp+var_4]
.text:0000A628                 call    ?MoveItems@?$CRecordVector@H@@AAEXII@Z ; CRecordVector<int>::MoveItems(uint,uint)
.text:0000A62D                 mov     edx, [ebp+var_4]
.text:0000A630                 mov     eax, [edx]
.text:0000A632                 mov     ecx, [ebp+arg_0]
.text:0000A635                 mov     edx, [ebp+arg_4]
.text:0000A638                 mov     [eax+ecx*4], edx
.text:0000A63B                 mov     eax, [ebp+var_4]
.text:0000A63E                 mov     ecx, [eax+4]
.text:0000A641                 add     ecx, 1
.text:0000A644                 mov     edx, [ebp+var_4]
.text:0000A647                 mov     [edx+4], ecx
.text:0000A64A                 add     esp, 4
.text:0000A64D                 cmp     ebp, esp
.text:0000A64F                 call    __RTC_CheckEsp
.text:0000A654                 mov     esp, ebp
.text:0000A656                 pop     ebp
.text:0000A657                 retn    8
.text:0000A657 ?Insert@?$CRecordVector@H@@QAEXIH@Z endp
.text:0000A657
.text:0000A657 ; ---------------------------------------------------------------------------
.text:0000A65A                 align 4
.text:0000A65A _text           ends
.text:0000A65A
.text:0000A65C ; ===========================================================================
.text:0000A65C
.text:0000A65C ; Segment type: Pure code
.text:0000A65C ; Segment permissions: Read/Execute
.text:0000A65C _text           segment para public 'CODE' use32
.text:0000A65C                 assume cs:_text
.text:0000A65C                 ;org 0A65Ch
.text:0000A65C ; COMDAT (pick any)
.text:0000A65C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A65C
.text:0000A65C ; =============== S U B R O U T I N E =======================================
.text:0000A65C
.text:0000A65C ; Attributes: bp-based frame
.text:0000A65C
.text:0000A65C ; public: __thiscall CMyComPtr<struct IHasher>::~CMyComPtr<struct IHasher>(void)
.text:0000A65C                 public ??1?$CMyComPtr@UIHasher@@@@QAE@XZ
.text:0000A65C ??1?$CMyComPtr@UIHasher@@@@QAE@XZ proc near
.text:0000A65C                                         ; CODE XREF: CHasherState::~CHasherState(void)+49p
.text:0000A65C                                         ; __unwindfunclet$??1CHasherState@@QAE@XZ$0+3j
.text:0000A65C
.text:0000A65C var_4           = dword ptr -4
.text:0000A65C
.text:0000A65C                 push    ebp
.text:0000A65D                 mov     ebp, esp
.text:0000A65F                 push    ecx
.text:0000A660                 push    esi
.text:0000A661                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000A668                 mov     [ebp+var_4], ecx
.text:0000A66B                 mov     eax, [ebp+var_4]
.text:0000A66E                 cmp     dword ptr [eax], 0
.text:0000A671                 jz      short loc_A68E
.text:0000A673                 mov     ecx, [ebp+var_4]
.text:0000A676                 mov     edx, [ecx]
.text:0000A678                 mov     eax, [ebp+var_4]
.text:0000A67B                 mov     ecx, [eax]
.text:0000A67D                 mov     edx, [edx]
.text:0000A67F                 mov     esi, esp
.text:0000A681                 push    ecx
.text:0000A682                 mov     eax, [edx+8]
.text:0000A685                 call    eax
.text:0000A687                 cmp     esi, esp
.text:0000A689                 call    __RTC_CheckEsp
.text:0000A68E
.text:0000A68E loc_A68E:                               ; CODE XREF: CMyComPtr<IHasher>::~CMyComPtr<IHasher>(void)+15j
.text:0000A68E                 pop     esi
.text:0000A68F                 add     esp, 4
.text:0000A692                 cmp     ebp, esp
.text:0000A694                 call    __RTC_CheckEsp
.text:0000A699                 mov     esp, ebp
.text:0000A69B                 pop     ebp
.text:0000A69C                 retn
.text:0000A69C ??1?$CMyComPtr@UIHasher@@@@QAE@XZ endp
.text:0000A69C
.text:0000A69C ; ---------------------------------------------------------------------------
.text:0000A69D                 align 10h
.text:0000A69D _text           ends
.text:0000A69D
.text:0000A6A0 ; ===========================================================================
.text:0000A6A0
.text:0000A6A0 ; Segment type: Pure code
.text:0000A6A0 ; Segment permissions: Read/Execute
.text:0000A6A0 _text           segment para public 'CODE' use32
.text:0000A6A0                 assume cs:_text
.text:0000A6A0                 ;org 0A6A0h
.text:0000A6A0 ; COMDAT (pick any)
.text:0000A6A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A6A0
.text:0000A6A0 ; =============== S U B R O U T I N E =======================================
.text:0000A6A0
.text:0000A6A0 ; Attributes: bp-based frame
.text:0000A6A0
.text:0000A6A0 ; public: unsigned int __thiscall CObjectVector<struct CProperty>::Size(void)const
.text:0000A6A0                 public ?Size@?$CObjectVector@UCProperty@@@@QBEIXZ
.text:0000A6A0 ?Size@?$CObjectVector@UCProperty@@@@QBEIXZ proc near
.text:0000A6A0                                         ; CODE XREF: CObjectVector<CProperty>::operator=(CObjectVector<CProperty> const &)+5Ap
.text:0000A6A0
.text:0000A6A0 var_4           = dword ptr -4
.text:0000A6A0
.text:0000A6A0                 push    ebp
.text:0000A6A1                 mov     ebp, esp
.text:0000A6A3                 push    ecx
.text:0000A6A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000A6AB                 mov     [ebp+var_4], ecx
.text:0000A6AE                 mov     ecx, [ebp+var_4]
.text:0000A6B1                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:0000A6B6                 add     esp, 4
.text:0000A6B9                 cmp     ebp, esp
.text:0000A6BB                 call    __RTC_CheckEsp
.text:0000A6C0                 mov     esp, ebp
.text:0000A6C2                 pop     ebp
.text:0000A6C3                 retn
.text:0000A6C3 ?Size@?$CObjectVector@UCProperty@@@@QBEIXZ endp
.text:0000A6C3
.text:0000A6C3 _text           ends
.text:0000A6C3
.text:0000A6C4 ; ===========================================================================
.text:0000A6C4
.text:0000A6C4 ; Segment type: Pure code
.text:0000A6C4 ; Segment permissions: Read/Execute
.text:0000A6C4 _text           segment para public 'CODE' use32
.text:0000A6C4                 assume cs:_text
.text:0000A6C4                 ;org 0A6C4h
.text:0000A6C4 ; COMDAT (pick any)
.text:0000A6C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A6C4
.text:0000A6C4 ; =============== S U B R O U T I N E =======================================
.text:0000A6C4
.text:0000A6C4 ; Attributes: bp-based frame
.text:0000A6C4
.text:0000A6C4 ; public: struct CProperty const & __thiscall CObjectVector<struct CProperty>::operator[](unsigned int)const
.text:0000A6C4                 public ??A?$CObjectVector@UCProperty@@@@QBEABUCProperty@@I@Z
.text:0000A6C4 ??A?$CObjectVector@UCProperty@@@@QBEABUCProperty@@I@Z proc near
.text:0000A6C4                                         ; CODE XREF: CObjectVector<CProperty>::operator=(CObjectVector<CProperty> const &)+A9p
.text:0000A6C4
.text:0000A6C4 var_4           = dword ptr -4
.text:0000A6C4 arg_0           = dword ptr  8
.text:0000A6C4
.text:0000A6C4                 push    ebp
.text:0000A6C5                 mov     ebp, esp
.text:0000A6C7                 push    ecx
.text:0000A6C8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000A6CF                 mov     [ebp+var_4], ecx
.text:0000A6D2                 mov     eax, [ebp+arg_0]
.text:0000A6D5                 push    eax
.text:0000A6D6                 mov     ecx, [ebp+var_4]
.text:0000A6D9                 call    ??A?$CRecordVector@PAX@@QBEABQAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:0000A6DE                 mov     eax, [eax]
.text:0000A6E0                 add     esp, 4
.text:0000A6E3                 cmp     ebp, esp
.text:0000A6E5                 call    __RTC_CheckEsp
.text:0000A6EA                 mov     esp, ebp
.text:0000A6EC                 pop     ebp
.text:0000A6ED                 retn    4
.text:0000A6ED ??A?$CObjectVector@UCProperty@@@@QBEABUCProperty@@I@Z endp
.text:0000A6ED
.text:0000A6ED _text           ends
.text:0000A6ED
.text:0000A6F0 ; ===========================================================================
.text:0000A6F0
.text:0000A6F0 ; Segment type: Pure code
.text:0000A6F0 ; Segment permissions: Read/Execute
.text:0000A6F0 _text           segment para public 'CODE' use32
.text:0000A6F0                 assume cs:_text
.text:0000A6F0                 ;org 0A6F0h
.text:0000A6F0 ; COMDAT (pick any)
.text:0000A6F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A6F0
.text:0000A6F0 ; =============== S U B R O U T I N E =======================================
.text:0000A6F0
.text:0000A6F0 ; Attributes: bp-based frame
.text:0000A6F0
.text:0000A6F0 ; public: void __thiscall CObjectVector<struct CProperty>::Clear(void)
.text:0000A6F0                 public ?Clear@?$CObjectVector@UCProperty@@@@QAEXXZ
.text:0000A6F0 ?Clear@?$CObjectVector@UCProperty@@@@QAEXXZ proc near
.text:0000A6F0                                         ; CODE XREF: CObjectVector<CProperty>::operator=(CObjectVector<CProperty> const &)+52p
.text:0000A6F0
.text:0000A6F0 var_14          = dword ptr -14h
.text:0000A6F0 var_10          = dword ptr -10h
.text:0000A6F0 var_C           = dword ptr -0Ch
.text:0000A6F0 var_8           = dword ptr -8
.text:0000A6F0 var_4           = dword ptr -4
.text:0000A6F0
.text:0000A6F0                 push    ebp
.text:0000A6F1                 mov     ebp, esp
.text:0000A6F3                 sub     esp, 14h
.text:0000A6F6                 mov     eax, 0CCCCCCCCh
.text:0000A6FB                 mov     [ebp+var_14], eax
.text:0000A6FE                 mov     [ebp+var_10], eax
.text:0000A701                 mov     [ebp+var_C], eax
.text:0000A704                 mov     [ebp+var_8], eax
.text:0000A707                 mov     [ebp+var_4], eax
.text:0000A70A                 mov     [ebp+var_4], ecx
.text:0000A70D                 mov     ecx, [ebp+var_4]
.text:0000A710                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:0000A715                 mov     [ebp+var_8], eax
.text:0000A718
.text:0000A718 loc_A718:                               ; CODE XREF: CObjectVector<CProperty>::Clear(void):loc_A75Aj
.text:0000A718                 cmp     [ebp+var_8], 0
.text:0000A71C                 jz      short loc_A75C
.text:0000A71E                 mov     eax, [ebp+var_8]
.text:0000A721                 sub     eax, 1
.text:0000A724                 mov     [ebp+var_8], eax
.text:0000A727                 mov     ecx, [ebp+var_8]
.text:0000A72A                 push    ecx
.text:0000A72B                 mov     ecx, [ebp+var_4]
.text:0000A72E                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:0000A733                 mov     edx, [eax]
.text:0000A735                 mov     [ebp+var_10], edx
.text:0000A738                 mov     eax, [ebp+var_10]
.text:0000A73B                 mov     [ebp+var_C], eax
.text:0000A73E                 cmp     [ebp+var_C], 0
.text:0000A742                 jz      short loc_A753
.text:0000A744                 push    1
.text:0000A746                 mov     ecx, [ebp+var_C]
.text:0000A749                 call    ??_GCProperty@@QAEPAXI@Z ; CProperty::`scalar deleting destructor'(uint)
.text:0000A74E                 mov     [ebp+var_14], eax
.text:0000A751                 jmp     short loc_A75A
.text:0000A753 ; ---------------------------------------------------------------------------
.text:0000A753
.text:0000A753 loc_A753:                               ; CODE XREF: CObjectVector<CProperty>::Clear(void)+52j
.text:0000A753                 mov     [ebp+var_14], 0
.text:0000A75A
.text:0000A75A loc_A75A:                               ; CODE XREF: CObjectVector<CProperty>::Clear(void)+61j
.text:0000A75A                 jmp     short loc_A718
.text:0000A75C ; ---------------------------------------------------------------------------
.text:0000A75C
.text:0000A75C loc_A75C:                               ; CODE XREF: CObjectVector<CProperty>::Clear(void)+2Cj
.text:0000A75C                 mov     ecx, [ebp+var_4]
.text:0000A75F                 call    ?Clear@?$CRecordVector@PAX@@QAEXXZ ; CRecordVector<void *>::Clear(void)
.text:0000A764                 add     esp, 14h
.text:0000A767                 cmp     ebp, esp
.text:0000A769                 call    __RTC_CheckEsp
.text:0000A76E                 mov     esp, ebp
.text:0000A770                 pop     ebp
.text:0000A771                 retn
.text:0000A771 ?Clear@?$CObjectVector@UCProperty@@@@QAEXXZ endp
.text:0000A771
.text:0000A771 ; ---------------------------------------------------------------------------
.text:0000A772                 align 4
.text:0000A772 _text           ends
.text:0000A772
.text:0000A774 ; ===========================================================================
.text:0000A774
.text:0000A774 ; Segment type: Pure code
.text:0000A774 ; Segment permissions: Read/Execute
.text:0000A774 _text           segment para public 'CODE' use32
.text:0000A774                 assume cs:_text
.text:0000A774                 ;org 0A774h
.text:0000A774 ; COMDAT (pick any)
.text:0000A774                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A774
.text:0000A774 ; =============== S U B R O U T I N E =======================================
.text:0000A774
.text:0000A774 ; Attributes: bp-based frame
.text:0000A774
.text:0000A774 ; private: void __thiscall CRecordVector<void *>::MoveItems(unsigned int, unsigned int)
.text:0000A774                 public ?MoveItems@?$CRecordVector@PAX@@AAEXII@Z
.text:0000A774 ?MoveItems@?$CRecordVector@PAX@@AAEXII@Z proc near
.text:0000A774                                         ; CODE XREF: CRecordVector<void *>::Delete(uint)+1Cp
.text:0000A774
.text:0000A774 var_4           = dword ptr -4
.text:0000A774 arg_0           = dword ptr  8
.text:0000A774 arg_4           = dword ptr  0Ch
.text:0000A774
.text:0000A774                 push    ebp
.text:0000A775                 mov     ebp, esp
.text:0000A777                 push    ecx
.text:0000A778                 push    esi
.text:0000A779                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000A780                 mov     [ebp+var_4], ecx
.text:0000A783                 mov     eax, [ebp+var_4]
.text:0000A786                 mov     ecx, [eax+4]
.text:0000A789                 sub     ecx, [ebp+arg_4]
.text:0000A78C                 shl     ecx, 2
.text:0000A78F                 mov     esi, esp
.text:0000A791                 push    ecx             ; Size
.text:0000A792                 mov     edx, [ebp+var_4]
.text:0000A795                 mov     eax, [edx]
.text:0000A797                 mov     ecx, [ebp+arg_4]
.text:0000A79A                 lea     edx, [eax+ecx*4]
.text:0000A79D                 push    edx             ; Src
.text:0000A79E                 mov     eax, [ebp+var_4]
.text:0000A7A1                 mov     ecx, [eax]
.text:0000A7A3                 mov     edx, [ebp+arg_0]
.text:0000A7A6                 lea     eax, [ecx+edx*4]
.text:0000A7A9                 push    eax             ; Dst
.text:0000A7AA                 call    dword ptr ds:__imp__memmove
.text:0000A7B0                 add     esp, 0Ch
.text:0000A7B3                 cmp     esi, esp
.text:0000A7B5                 call    __RTC_CheckEsp
.text:0000A7BA                 pop     esi
.text:0000A7BB                 add     esp, 4
.text:0000A7BE                 cmp     ebp, esp
.text:0000A7C0                 call    __RTC_CheckEsp
.text:0000A7C5                 mov     esp, ebp
.text:0000A7C7                 pop     ebp
.text:0000A7C8                 retn    8
.text:0000A7C8 ?MoveItems@?$CRecordVector@PAX@@AAEXII@Z endp
.text:0000A7C8
.text:0000A7C8 ; ---------------------------------------------------------------------------
.text:0000A7CB                 align 4
.text:0000A7CB _text           ends
.text:0000A7CB
.text:0000A7CC ; ===========================================================================
.text:0000A7CC
.text:0000A7CC ; Segment type: Pure code
.text:0000A7CC ; Segment permissions: Read/Execute
.text:0000A7CC _text           segment para public 'CODE' use32
.text:0000A7CC                 assume cs:_text
.text:0000A7CC                 ;org 0A7CCh
.text:0000A7CC ; COMDAT (pick any)
.text:0000A7CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A7CC
.text:0000A7CC ; =============== S U B R O U T I N E =======================================
.text:0000A7CC
.text:0000A7CC ; Attributes: bp-based frame
.text:0000A7CC
.text:0000A7CC ; private: void __thiscall CRecordVector<void *>::ReserveOnePosition(void)
.text:0000A7CC                 public ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ
.text:0000A7CC ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ proc near
.text:0000A7CC                                         ; CODE XREF: CRecordVector<void *>::Add(void * const)+1Ap
.text:0000A7CC
.text:0000A7CC var_14          = dword ptr -14h
.text:0000A7CC var_10          = dword ptr -10h
.text:0000A7CC Dst             = dword ptr -0Ch
.text:0000A7CC var_8           = dword ptr -8
.text:0000A7CC var_4           = dword ptr -4
.text:0000A7CC
.text:0000A7CC                 push    ebp
.text:0000A7CD                 mov     ebp, esp
.text:0000A7CF                 sub     esp, 14h
.text:0000A7D2                 mov     eax, 0CCCCCCCCh
.text:0000A7D7                 mov     [ebp+var_14], eax
.text:0000A7DA                 mov     [ebp+var_10], eax
.text:0000A7DD                 mov     [ebp+Dst], eax
.text:0000A7E0                 mov     [ebp+var_8], eax
.text:0000A7E3                 mov     [ebp+var_4], eax
.text:0000A7E6                 mov     [ebp+var_4], ecx
.text:0000A7E9                 mov     eax, [ebp+var_4]
.text:0000A7EC                 mov     ecx, [ebp+var_4]
.text:0000A7EF                 mov     edx, [eax+4]
.text:0000A7F2                 cmp     edx, [ecx+8]
.text:0000A7F5                 jnz     loc_A880
.text:0000A7FB                 mov     eax, [ebp+var_4]
.text:0000A7FE                 mov     ecx, [eax+8]
.text:0000A801                 shr     ecx, 2
.text:0000A804                 mov     edx, [ebp+var_4]
.text:0000A807                 mov     eax, [edx+8]
.text:0000A80A                 lea     ecx, [eax+ecx+1]
.text:0000A80E                 mov     [ebp+var_8], ecx
.text:0000A811                 xor     ecx, ecx
.text:0000A813                 mov     eax, [ebp+var_8]
.text:0000A816                 mov     edx, 4
.text:0000A81B                 mul     edx
.text:0000A81D                 seto    cl
.text:0000A820                 neg     ecx
.text:0000A822                 or      ecx, eax
.text:0000A824                 push    ecx             ; unsigned int
.text:0000A825                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000A82A                 add     esp, 4
.text:0000A82D                 mov     [ebp+var_10], eax
.text:0000A830                 mov     eax, [ebp+var_10]
.text:0000A833                 mov     [ebp+Dst], eax
.text:0000A836                 mov     ecx, [ebp+var_4]
.text:0000A839                 cmp     dword ptr [ecx+4], 0
.text:0000A83D                 jz      short loc_A85B
.text:0000A83F                 mov     edx, [ebp+var_4]
.text:0000A842                 mov     eax, [edx+4]
.text:0000A845                 shl     eax, 2
.text:0000A848                 push    eax             ; Size
.text:0000A849                 mov     ecx, [ebp+var_4]
.text:0000A84C                 mov     edx, [ecx]
.text:0000A84E                 push    edx             ; Src
.text:0000A84F                 mov     eax, [ebp+Dst]
.text:0000A852                 push    eax             ; Dst
.text:0000A853                 call    _memcpy
.text:0000A858                 add     esp, 0Ch
.text:0000A85B
.text:0000A85B loc_A85B:                               ; CODE XREF: CRecordVector<void *>::ReserveOnePosition(void)+71j
.text:0000A85B                 mov     ecx, [ebp+var_4]
.text:0000A85E                 mov     edx, [ecx]
.text:0000A860                 mov     [ebp+var_14], edx
.text:0000A863                 mov     eax, [ebp+var_14]
.text:0000A866                 push    eax             ; void *
.text:0000A867                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000A86C                 add     esp, 4
.text:0000A86F                 mov     ecx, [ebp+var_4]
.text:0000A872                 mov     edx, [ebp+Dst]
.text:0000A875                 mov     [ecx], edx
.text:0000A877                 mov     eax, [ebp+var_4]
.text:0000A87A                 mov     ecx, [ebp+var_8]
.text:0000A87D                 mov     [eax+8], ecx
.text:0000A880
.text:0000A880 loc_A880:                               ; CODE XREF: CRecordVector<void *>::ReserveOnePosition(void)+29j
.text:0000A880                 add     esp, 14h
.text:0000A883                 cmp     ebp, esp
.text:0000A885                 call    __RTC_CheckEsp
.text:0000A88A                 mov     esp, ebp
.text:0000A88C                 pop     ebp
.text:0000A88D                 retn
.text:0000A88D ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ endp
.text:0000A88D
.text:0000A88D ; ---------------------------------------------------------------------------
.text:0000A88E                 align 10h
.text:0000A88E _text           ends
.text:0000A88E
.text:0000A890 ; ===========================================================================
.text:0000A890
.text:0000A890 ; Segment type: Pure code
.text:0000A890 ; Segment permissions: Read/Execute
.text:0000A890 _text           segment para public 'CODE' use32
.text:0000A890                 assume cs:_text
.text:0000A890                 ;org 0A890h
.text:0000A890 ; COMDAT (pick any)
.text:0000A890                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A890
.text:0000A890 ; =============== S U B R O U T I N E =======================================
.text:0000A890
.text:0000A890 ; Attributes: bp-based frame
.text:0000A890
.text:0000A890 ; private: void __thiscall CRecordVector<int>::MoveItems(unsigned int, unsigned int)
.text:0000A890                 public ?MoveItems@?$CRecordVector@H@@AAEXII@Z
.text:0000A890 ?MoveItems@?$CRecordVector@H@@AAEXII@Z proc near
.text:0000A890                                         ; CODE XREF: CRecordVector<int>::Insert(uint,int)+24p
.text:0000A890
.text:0000A890 var_4           = dword ptr -4
.text:0000A890 arg_0           = dword ptr  8
.text:0000A890 arg_4           = dword ptr  0Ch
.text:0000A890
.text:0000A890                 push    ebp
.text:0000A891                 mov     ebp, esp
.text:0000A893                 push    ecx
.text:0000A894                 push    esi
.text:0000A895                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000A89C                 mov     [ebp+var_4], ecx
.text:0000A89F                 mov     eax, [ebp+var_4]
.text:0000A8A2                 mov     ecx, [eax+4]
.text:0000A8A5                 sub     ecx, [ebp+arg_4]
.text:0000A8A8                 shl     ecx, 2
.text:0000A8AB                 mov     esi, esp
.text:0000A8AD                 push    ecx             ; Size
.text:0000A8AE                 mov     edx, [ebp+var_4]
.text:0000A8B1                 mov     eax, [edx]
.text:0000A8B3                 mov     ecx, [ebp+arg_4]
.text:0000A8B6                 lea     edx, [eax+ecx*4]
.text:0000A8B9                 push    edx             ; Src
.text:0000A8BA                 mov     eax, [ebp+var_4]
.text:0000A8BD                 mov     ecx, [eax]
.text:0000A8BF                 mov     edx, [ebp+arg_0]
.text:0000A8C2                 lea     eax, [ecx+edx*4]
.text:0000A8C5                 push    eax             ; Dst
.text:0000A8C6                 call    dword ptr ds:__imp__memmove
.text:0000A8CC                 add     esp, 0Ch
.text:0000A8CF                 cmp     esi, esp
.text:0000A8D1                 call    __RTC_CheckEsp
.text:0000A8D6                 pop     esi
.text:0000A8D7                 add     esp, 4
.text:0000A8DA                 cmp     ebp, esp
.text:0000A8DC                 call    __RTC_CheckEsp
.text:0000A8E1                 mov     esp, ebp
.text:0000A8E3                 pop     ebp
.text:0000A8E4                 retn    8
.text:0000A8E4 ?MoveItems@?$CRecordVector@H@@AAEXII@Z endp
.text:0000A8E4
.text:0000A8E4 ; ---------------------------------------------------------------------------
.text:0000A8E7                 align 4
.text:0000A8E7 _text           ends
.text:0000A8E7
.text:0000A8E8 ; ===========================================================================
.text:0000A8E8
.text:0000A8E8 ; Segment type: Pure code
.text:0000A8E8 ; Segment permissions: Read/Execute
.text:0000A8E8 _text           segment para public 'CODE' use32
.text:0000A8E8                 assume cs:_text
.text:0000A8E8                 ;org 0A8E8h
.text:0000A8E8 ; COMDAT (pick any)
.text:0000A8E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A8E8
.text:0000A8E8 ; =============== S U B R O U T I N E =======================================
.text:0000A8E8
.text:0000A8E8 ; Attributes: bp-based frame
.text:0000A8E8
.text:0000A8E8 ; private: void __thiscall CRecordVector<int>::ReserveOnePosition(void)
.text:0000A8E8                 public ?ReserveOnePosition@?$CRecordVector@H@@AAEXXZ
.text:0000A8E8 ?ReserveOnePosition@?$CRecordVector@H@@AAEXXZ proc near
.text:0000A8E8                                         ; CODE XREF: CRecordVector<int>::Insert(uint,int)+11p
.text:0000A8E8
.text:0000A8E8 var_14          = dword ptr -14h
.text:0000A8E8 var_10          = dword ptr -10h
.text:0000A8E8 Dst             = dword ptr -0Ch
.text:0000A8E8 var_8           = dword ptr -8
.text:0000A8E8 var_4           = dword ptr -4
.text:0000A8E8
.text:0000A8E8                 push    ebp
.text:0000A8E9                 mov     ebp, esp
.text:0000A8EB                 sub     esp, 14h
.text:0000A8EE                 mov     eax, 0CCCCCCCCh
.text:0000A8F3                 mov     [ebp+var_14], eax
.text:0000A8F6                 mov     [ebp+var_10], eax
.text:0000A8F9                 mov     [ebp+Dst], eax
.text:0000A8FC                 mov     [ebp+var_8], eax
.text:0000A8FF                 mov     [ebp+var_4], eax
.text:0000A902                 mov     [ebp+var_4], ecx
.text:0000A905                 mov     eax, [ebp+var_4]
.text:0000A908                 mov     ecx, [ebp+var_4]
.text:0000A90B                 mov     edx, [eax+4]
.text:0000A90E                 cmp     edx, [ecx+8]
.text:0000A911                 jnz     loc_A99C
.text:0000A917                 mov     eax, [ebp+var_4]
.text:0000A91A                 mov     ecx, [eax+8]
.text:0000A91D                 shr     ecx, 2
.text:0000A920                 mov     edx, [ebp+var_4]
.text:0000A923                 mov     eax, [edx+8]
.text:0000A926                 lea     ecx, [eax+ecx+1]
.text:0000A92A                 mov     [ebp+var_8], ecx
.text:0000A92D                 xor     ecx, ecx
.text:0000A92F                 mov     eax, [ebp+var_8]
.text:0000A932                 mov     edx, 4
.text:0000A937                 mul     edx
.text:0000A939                 seto    cl
.text:0000A93C                 neg     ecx
.text:0000A93E                 or      ecx, eax
.text:0000A940                 push    ecx             ; unsigned int
.text:0000A941                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000A946                 add     esp, 4
.text:0000A949                 mov     [ebp+var_10], eax
.text:0000A94C                 mov     eax, [ebp+var_10]
.text:0000A94F                 mov     [ebp+Dst], eax
.text:0000A952                 mov     ecx, [ebp+var_4]
.text:0000A955                 cmp     dword ptr [ecx+4], 0
.text:0000A959                 jz      short loc_A977
.text:0000A95B                 mov     edx, [ebp+var_4]
.text:0000A95E                 mov     eax, [edx+4]
.text:0000A961                 shl     eax, 2
.text:0000A964                 push    eax             ; Size
.text:0000A965                 mov     ecx, [ebp+var_4]
.text:0000A968                 mov     edx, [ecx]
.text:0000A96A                 push    edx             ; Src
.text:0000A96B                 mov     eax, [ebp+Dst]
.text:0000A96E                 push    eax             ; Dst
.text:0000A96F                 call    _memcpy
.text:0000A974                 add     esp, 0Ch
.text:0000A977
.text:0000A977 loc_A977:                               ; CODE XREF: CRecordVector<int>::ReserveOnePosition(void)+71j
.text:0000A977                 mov     ecx, [ebp+var_4]
.text:0000A97A                 mov     edx, [ecx]
.text:0000A97C                 mov     [ebp+var_14], edx
.text:0000A97F                 mov     eax, [ebp+var_14]
.text:0000A982                 push    eax             ; void *
.text:0000A983                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000A988                 add     esp, 4
.text:0000A98B                 mov     ecx, [ebp+var_4]
.text:0000A98E                 mov     edx, [ebp+Dst]
.text:0000A991                 mov     [ecx], edx
.text:0000A993                 mov     eax, [ebp+var_4]
.text:0000A996                 mov     ecx, [ebp+var_8]
.text:0000A999                 mov     [eax+8], ecx
.text:0000A99C
.text:0000A99C loc_A99C:                               ; CODE XREF: CRecordVector<int>::ReserveOnePosition(void)+29j
.text:0000A99C                 add     esp, 14h
.text:0000A99F                 cmp     ebp, esp
.text:0000A9A1                 call    __RTC_CheckEsp
.text:0000A9A6                 mov     esp, ebp
.text:0000A9A8                 pop     ebp
.text:0000A9A9                 retn
.text:0000A9A9 ?ReserveOnePosition@?$CRecordVector@H@@AAEXXZ endp
.text:0000A9A9
.text:0000A9A9 ; ---------------------------------------------------------------------------
.text:0000A9AA                 align 4
.text:0000A9AA _text           ends
.text:0000A9AA
.text:0000A9AC ; ===========================================================================
.text:0000A9AC
.text:0000A9AC ; Segment type: Pure code
.text:0000A9AC ; Segment permissions: Read/Execute
.text:0000A9AC _text           segment para public 'CODE' use32
.text:0000A9AC                 assume cs:_text
.text:0000A9AC                 ;org 0A9ACh
.text:0000A9AC ; COMDAT (pick any)
.text:0000A9AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A9AC
.text:0000A9AC ; =============== S U B R O U T I N E =======================================
.text:0000A9AC
.text:0000A9AC
.text:0000A9AC ; [thunk]:public: virtual long __stdcall CExtractCallbackConsole::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:0000A9AC                 public ?QueryInterface@CExtractCallbackConsole@@W3AGJABU_GUID@@PAPAX@Z
.text:0000A9AC ?QueryInterface@CExtractCallbackConsole@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:0000A9AC                                         ; DATA XREF: .rdata:const CExtractCallbackConsole::`vftable'{for `IFolderArchiveExtractCallback2'}o
.text:0000A9AC
.text:0000A9AC arg_0           = dword ptr  4
.text:0000A9AC
.text:0000A9AC                 sub     [esp+arg_0], 4
.text:0000A9B1                 jmp     ?QueryInterface@CExtractCallbackConsole@@UAGJABU_GUID@@PAPAX@Z ; CExtractCallbackConsole::QueryInterface(_GUID const &,void * *)
.text:0000A9B1 ?QueryInterface@CExtractCallbackConsole@@W3AGJABU_GUID@@PAPAX@Z endp
.text:0000A9B1
.text:0000A9B1 ; ---------------------------------------------------------------------------
.text:0000A9B6                 align 4
.text:0000A9B6 _text           ends
.text:0000A9B6
.text:0000A9B8 ; ===========================================================================
.text:0000A9B8
.text:0000A9B8 ; Segment type: Pure code
.text:0000A9B8 ; Segment permissions: Read/Execute
.text:0000A9B8 _text           segment para public 'CODE' use32
.text:0000A9B8                 assume cs:_text
.text:0000A9B8                 ;org 0A9B8h
.text:0000A9B8 ; COMDAT (pick any)
.text:0000A9B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A9B8
.text:0000A9B8 ; =============== S U B R O U T I N E =======================================
.text:0000A9B8
.text:0000A9B8
.text:0000A9B8 ; [thunk]:public: virtual long __stdcall CExtractCallbackConsole::QueryInterface`adjustor{8}' (struct _GUID const &, void * *)
.text:0000A9B8                 public ?QueryInterface@CExtractCallbackConsole@@W7AGJABU_GUID@@PAPAX@Z
.text:0000A9B8 ?QueryInterface@CExtractCallbackConsole@@W7AGJABU_GUID@@PAPAX@Z proc near
.text:0000A9B8                                         ; DATA XREF: .rdata:const CExtractCallbackConsole::`vftable'{for `ICryptoGetTextPassword'}o
.text:0000A9B8
.text:0000A9B8 arg_0           = dword ptr  4
.text:0000A9B8
.text:0000A9B8                 sub     [esp+arg_0], 8
.text:0000A9BD                 jmp     ?QueryInterface@CExtractCallbackConsole@@UAGJABU_GUID@@PAPAX@Z ; CExtractCallbackConsole::QueryInterface(_GUID const &,void * *)
.text:0000A9BD ?QueryInterface@CExtractCallbackConsole@@W7AGJABU_GUID@@PAPAX@Z endp
.text:0000A9BD
.text:0000A9BD ; ---------------------------------------------------------------------------
.text:0000A9C2                 align 4
.text:0000A9C2 _text           ends
.text:0000A9C2
.text:0000A9C4 ; ===========================================================================
.text:0000A9C4
.text:0000A9C4 ; Segment type: Pure code
.text:0000A9C4 ; Segment permissions: Read/Execute
.text:0000A9C4 _text           segment para public 'CODE' use32
.text:0000A9C4                 assume cs:_text
.text:0000A9C4                 ;org 0A9C4h
.text:0000A9C4 ; COMDAT (pick any)
.text:0000A9C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A9C4
.text:0000A9C4 ; =============== S U B R O U T I N E =======================================
.text:0000A9C4
.text:0000A9C4
.text:0000A9C4 ; [thunk]:public: virtual unsigned long __stdcall CExtractCallbackConsole::Release`adjustor{4}' (void)
.text:0000A9C4                 public ?Release@CExtractCallbackConsole@@W3AGKXZ
.text:0000A9C4 ?Release@CExtractCallbackConsole@@W3AGKXZ proc near
.text:0000A9C4                                         ; DATA XREF: .rdata:00005F40o
.text:0000A9C4
.text:0000A9C4 arg_0           = dword ptr  4
.text:0000A9C4
.text:0000A9C4                 sub     [esp+arg_0], 4
.text:0000A9C9                 jmp     ?Release@CExtractCallbackConsole@@UAGKXZ ; CExtractCallbackConsole::Release(void)
.text:0000A9C9 ?Release@CExtractCallbackConsole@@W3AGKXZ endp
.text:0000A9C9
.text:0000A9C9 ; ---------------------------------------------------------------------------
.text:0000A9CE                 align 10h
.text:0000A9CE _text           ends
.text:0000A9CE
.text:0000A9D0 ; ===========================================================================
.text:0000A9D0
.text:0000A9D0 ; Segment type: Pure code
.text:0000A9D0 ; Segment permissions: Read/Execute
.text:0000A9D0 _text           segment para public 'CODE' use32
.text:0000A9D0                 assume cs:_text
.text:0000A9D0                 ;org 0A9D0h
.text:0000A9D0 ; COMDAT (pick any)
.text:0000A9D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A9D0
.text:0000A9D0 ; =============== S U B R O U T I N E =======================================
.text:0000A9D0
.text:0000A9D0
.text:0000A9D0 ; [thunk]:public: virtual unsigned long __stdcall CExtractCallbackConsole::Release`adjustor{8}' (void)
.text:0000A9D0                 public ?Release@CExtractCallbackConsole@@W7AGKXZ
.text:0000A9D0 ?Release@CExtractCallbackConsole@@W7AGKXZ proc near
.text:0000A9D0                                         ; DATA XREF: .rdata:00005F2Co
.text:0000A9D0
.text:0000A9D0 arg_0           = dword ptr  4
.text:0000A9D0
.text:0000A9D0                 sub     [esp+arg_0], 8
.text:0000A9D5                 jmp     ?Release@CExtractCallbackConsole@@UAGKXZ ; CExtractCallbackConsole::Release(void)
.text:0000A9D5 ?Release@CExtractCallbackConsole@@W7AGKXZ endp
.text:0000A9D5
.text:0000A9D5 ; ---------------------------------------------------------------------------
.text:0000A9DA                 align 4
.text:0000A9DA _text           ends
.text:0000A9DA
.text:0000A9DC ; ===========================================================================
.text:0000A9DC
.text:0000A9DC ; Segment type: Pure code
.text:0000A9DC ; Segment permissions: Read/Execute
.text:0000A9DC _text           segment para public 'CODE' use32
.text:0000A9DC                 assume cs:_text
.text:0000A9DC                 ;org 0A9DCh
.text:0000A9DC ; COMDAT (pick any)
.text:0000A9DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A9DC
.text:0000A9DC ; =============== S U B R O U T I N E =======================================
.text:0000A9DC
.text:0000A9DC
.text:0000A9DC ; [thunk]:public: virtual unsigned long __stdcall CExtractCallbackConsole::AddRef`adjustor{4}' (void)
.text:0000A9DC                 public ?AddRef@CExtractCallbackConsole@@W3AGKXZ
.text:0000A9DC ?AddRef@CExtractCallbackConsole@@W3AGKXZ proc near
.text:0000A9DC                                         ; DATA XREF: .rdata:00005F3Co
.text:0000A9DC
.text:0000A9DC arg_0           = dword ptr  4
.text:0000A9DC
.text:0000A9DC                 sub     [esp+arg_0], 4
.text:0000A9E1                 jmp     ?AddRef@CExtractCallbackConsole@@UAGKXZ ; CExtractCallbackConsole::AddRef(void)
.text:0000A9E1 ?AddRef@CExtractCallbackConsole@@W3AGKXZ endp
.text:0000A9E1
.text:0000A9E1 ; ---------------------------------------------------------------------------
.text:0000A9E6                 align 4
.text:0000A9E6 _text           ends
.text:0000A9E6
.text:0000A9E8 ; ===========================================================================
.text:0000A9E8
.text:0000A9E8 ; Segment type: Pure code
.text:0000A9E8 ; Segment permissions: Read/Execute
.text:0000A9E8 _text           segment para public 'CODE' use32
.text:0000A9E8                 assume cs:_text
.text:0000A9E8                 ;org 0A9E8h
.text:0000A9E8 ; COMDAT (pick any)
.text:0000A9E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A9E8
.text:0000A9E8 ; =============== S U B R O U T I N E =======================================
.text:0000A9E8
.text:0000A9E8
.text:0000A9E8 ; [thunk]:public: virtual unsigned long __stdcall CExtractCallbackConsole::AddRef`adjustor{8}' (void)
.text:0000A9E8                 public ?AddRef@CExtractCallbackConsole@@W7AGKXZ
.text:0000A9E8 ?AddRef@CExtractCallbackConsole@@W7AGKXZ proc near
.text:0000A9E8                                         ; DATA XREF: .rdata:00005F28o
.text:0000A9E8
.text:0000A9E8 arg_0           = dword ptr  4
.text:0000A9E8
.text:0000A9E8                 sub     [esp+arg_0], 8
.text:0000A9ED                 jmp     ?AddRef@CExtractCallbackConsole@@UAGKXZ ; CExtractCallbackConsole::AddRef(void)
.text:0000A9ED ?AddRef@CExtractCallbackConsole@@W7AGKXZ endp
.text:0000A9ED
.text:0000A9ED _text           ends
.text:0000A9ED
UNDEF:0000AA00 ; ===========================================================================
UNDEF:0000AA00
UNDEF:0000AA00 ; Segment type: Externs
UNDEF:0000AA00 ; UNDEF
UNDEF:0000AA00 ; void __cdecl operator delete(void *)
UNDEF:0000AA00                 extrn ??3@YAXPAX@Z:near ; CODE XREF: __unwindfunclet$?Main2@@YGHXZ$4+7p
UNDEF:0000AA00                                         ; __unwindfunclet$?Main2@@YGHXZ$14+7p ...
UNDEF:0000AA04 ; public: class AString & __thiscall AString::operator=(class AString const &)
UNDEF:0000AA04                 extrn ??4AString@@QAEAAV0@ABV0@@Z:near
UNDEF:0000AA04                                         ; CODE XREF: Main2(void)+1AF1p
UNDEF:0000AA08 ; __int32 __stdcall HashCalc(const struct NWildcard::CCensor *, const struct CHashOptions *, struct AString *, struct IHashCallbackUI *)
UNDEF:0000AA08                 extrn ?HashCalc@@YGJABVCCensor@NWildcard@@ABUCHashOptions@@AAVAString@@PAUIHashCallbackUI@@@Z:near
UNDEF:0000AA08                                         ; CODE XREF: Main2(void)+1ACAp
UNDEF:0000AA0C ; public: __thiscall AString::AString(void)
UNDEF:0000AA0C                 extrn ??0AString@@QAE@XZ:near ; CODE XREF: Main2(void)+1AA5p
UNDEF:0000AA0C                                         ; CUpdateErrorInfo::CUpdateErrorInfo(void)+3Cp ...
UNDEF:0000AA10 ; long __stdcall UpdateArchive(class CCodecs *, class CObjectVector<struct COpenType> const &, class UString const &, class NWildcard::CCensor &, struct CUpdateOptions &, struct CUpdateErrorInfo &, struct IOpenCallbackUI *, struct IUpdateCallbackUI2 *, bool)
UNDEF:0000AA10                 extrn ?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z:near
UNDEF:0000AA10                                         ; CODE XREF: Main2(void)+199Ep
UNDEF:0000AA14 ; public: class UString & __thiscall UString::operator=(wchar_t const *)
UNDEF:0000AA14                 extrn ??4UString@@QAEAAV0@PB_W@Z:near
UNDEF:0000AA14                                         ; CODE XREF: Main2(void)+17F6p
UNDEF:0000AA18 ; long __stdcall ListArchives(class CCodecs *, class CObjectVector<struct COpenType> const &, class CRecordVector<int> const &, bool, class CObjectVector<class UString> &, class CObjectVector<class UString> &, bool, bool, class NWildcard::CCensorNode const &, bool, bool, bool &, class UString &, class CObjectVector<struct CProperty> const *, unsigned __int64 &, unsigned __int64 &)
UNDEF:0000AA18                 extrn ?ListArchives@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@_NAAV?$CObjectVector@VUString@@@@433ABVCCensorNode@NWildcard@@33AA_NAAVUString@@PBV?$CObjectVector@UCProperty@@@@AA_K9@Z:near
UNDEF:0000AA18                                         ; CODE XREF: Main2(void)+16AEp
UNDEF:0000AA1C ; void __stdcall PrintHashStat(struct CStdOutStream *, const struct CHashBundle *)
UNDEF:0000AA1C                 extrn ?PrintHashStat@@YGXAAVCStdOutStream@@ABUCHashBundle@@@Z:near
UNDEF:0000AA1C                                         ; CODE XREF: Main2(void)+15C3p
UNDEF:0000AA20 ; public: class CStdOutStream & __thiscall CStdOutStream::operator<<(unsigned __int64)
UNDEF:0000AA20                 extrn ??6CStdOutStream@@QAEAAV0@_K@Z:near
UNDEF:0000AA20                                         ; CODE XREF: Main2(void)+10B4p
UNDEF:0000AA20                                         ; Main2(void)+10EBp ...
UNDEF:0000AA24 ; public: class CStdOutStream & __thiscall CStdOutStream::operator<<(wchar_t const *)
UNDEF:0000AA24                 extrn ??6CStdOutStream@@QAEAAV0@PB_W@Z:near
UNDEF:0000AA24                                         ; CODE XREF: Main2(void)+1030p
UNDEF:0000AA24                                         ; PrintString(CStdOutStream &,UString const &,uint)+2Bp ...
UNDEF:0000AA28 ; long __stdcall Extract(class CCodecs *, class CObjectVector<struct COpenType> const &, class CRecordVector<int> const &, class CObjectVector<class UString> &, class CObjectVector<class UString> &, class NWildcard::CCensorNode const &, struct CExtractOptions const &, struct IOpenCallbackUI *, struct IExtractCallbackUI *, struct IHashCalc *, class UString &, struct CDecompressStat &)
UNDEF:0000AA28                 extrn ?Extract@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@AAV?$CObjectVector@VUString@@@@3ABVCCensorNode@NWildcard@@ABUCExtractOptions@@PAUIOpenCallbackUI@@PAUIExtractCallbackUI@@PAUIHashCalc@@AAVUString@@AAUCDecompressStat@@@Z:near
UNDEF:0000AA28                                         ; CODE XREF: Main2(void)+FC1p
UNDEF:0000AA2C ; public: long __thiscall CHashBundle::SetMethods(class CObjectVector<class UString> const &)
UNDEF:0000AA2C                 extrn ?SetMethods@CHashBundle@@QAEJABV?$CObjectVector@VUString@@@@@Z:near
UNDEF:0000AA2C                                         ; CODE XREF: Main2(void)+F2Bp
UNDEF:0000AA30 ; public: class UString & __thiscall UString::operator=(class UString const &)
UNDEF:0000AA30                 extrn ??4UString@@QAEAAV0@ABV0@@Z:near
UNDEF:0000AA30                                         ; CODE XREF: Main2(void)+DEEp
UNDEF:0000AA30                                         ; Main2(void)+1882p ...
UNDEF:0000AA34 ; void __thiscall CExtractScanConsole::PrintStat(CExtractScanConsole *__hidden this, const struct CDirItemsStat *)
UNDEF:0000AA34                 extrn ?PrintStat@CExtractScanConsole@@QAEXABUCDirItemsStat@@@Z:near
UNDEF:0000AA34                                         ; CODE XREF: Main2(void)+D2Ap
UNDEF:0000AA38 ; long __stdcall EnumerateDirItemsAndSort(class NWildcard::CCensor &, enum  NWildcard::ECensorPathMode, class UString const &, class CObjectVector<class UString> &, class CObjectVector<class UString> &, struct CDirItemsStat &, struct IDirItemsCallback *)
UNDEF:0000AA38                 extrn ?EnumerateDirItemsAndSort@@YGJAAVCCensor@NWildcard@@W4ECensorPathMode@2@ABVUString@@AAV?$CObjectVector@VUString@@@@3AAUCDirItemsStat@@PAUIDirItemsCallback@@@Z:near
UNDEF:0000AA38                                         ; CODE XREF: Main2(void)+CE4p
UNDEF:0000AA3C ; void __thiscall CExtractScanConsole::StartScanning(CExtractScanConsole *__hidden this)
UNDEF:0000AA3C                 extrn ?StartScanning@CExtractScanConsole@@QAEXXZ:near
UNDEF:0000AA3C                                         ; CODE XREF: Main2(void)+C92p
UNDEF:0000AA40 ; long __stdcall BenchCon(class CObjectVector<struct CProperty> const &, unsigned int, struct _iobuf *)
UNDEF:0000AA40                 extrn ?BenchCon@@YGJABV?$CObjectVector@UCProperty@@@@IPAU_iobuf@@@Z:near
UNDEF:0000AA40                                         ; CODE XREF: Main2(void)+B56p
UNDEF:0000AA44 ; struct CHasherInfo const * * g_Hashers
UNDEF:0000AA44                 extrn ?g_Hashers@@3PAPBUCHasherInfo@@A:near
UNDEF:0000AA44                                         ; DATA XREF: Main2(void)+AA8r
UNDEF:0000AA48 ; unsigned int g_NumHashers
UNDEF:0000AA48                 extrn ?g_NumHashers@@3IA:near ; DATA XREF: Main2(void)+A96r
UNDEF:0000AA4C ; struct CCodecInfo const * * g_Codecs
UNDEF:0000AA4C                 extrn ?g_Codecs@@3PAPBUCCodecInfo@@A:near
UNDEF:0000AA4C                                         ; DATA XREF: Main2(void)+969r
UNDEF:0000AA50 ; unsigned int g_NumCodecs
UNDEF:0000AA50                 extrn ?g_NumCodecs@@3IA:near ; DATA XREF: Main2(void)+957r
UNDEF:0000AA54 ; public: class CStdOutStream & __thiscall CStdOutStream::operator<<(unsigned int)
UNDEF:0000AA54                 extrn ??6CStdOutStream@@QAEAAV0@I@Z:near
UNDEF:0000AA54                                         ; CODE XREF: Main2(void)+798p
UNDEF:0000AA54                                         ; Main2(void)+9AFp ...
UNDEF:0000AA58 ; public: class UString & __thiscall UString::operator+=(wchar_t const *)
UNDEF:0000AA58                 extrn ??YUString@@QAEAAV0@PB_W@Z:near
UNDEF:0000AA58                                         ; CODE XREF: Main2(void)+720p
UNDEF:0000AA5C ; public: class UString & __thiscall UString::operator+=(class UString const &)
UNDEF:0000AA5C                 extrn ??YUString@@QAEAAV0@ABV0@@Z:near
UNDEF:0000AA5C                                         ; CODE XREF: Main2(void)+6FBp
UNDEF:0000AA5C                                         ; Main2(void)+735p ...
UNDEF:0000AA60 ; void __thiscall UString::Add_Space(UString *__hidden this)
UNDEF:0000AA60                 extrn ?Add_Space@UString@@QAEXXZ:near
UNDEF:0000AA60                                         ; CODE XREF: Main2(void)+6CEp
UNDEF:0000AA64 ; public: __thiscall UString::UString(void)
UNDEF:0000AA64                 extrn ??0UString@@QAE@XZ:near ; CODE XREF: Main2(void)+681p
UNDEF:0000AA64                                         ; Main2(void)+CB9p ...
UNDEF:0000AA68 ; size_t __cdecl strlen(const char *Str)
UNDEF:0000AA68                 extrn _strlen:near      ; CODE XREF: Main2(void)+548p
UNDEF:0000AA6C ; class CStdOutStream & __stdcall endl(class CStdOutStream &)
UNDEF:0000AA6C                 extrn ?endl@@YGAAVCStdOutStream@@AAV1@@Z:near
UNDEF:0000AA6C                                         ; DATA XREF: Main2(void)+50Fo
UNDEF:0000AA6C                                         ; Main2(void)+519o ...
UNDEF:0000AA70 ; public: bool __thiscall CCodecs::FindFormatForArchiveType(class UString const &, class CRecordVector<int> &)const
UNDEF:0000AA70                 extrn ?FindFormatForArchiveType@CCodecs@@QBE_NABVUString@@AAV?$CRecordVector@H@@@Z:near
UNDEF:0000AA70                                         ; CODE XREF: Main2(void)+486p
UNDEF:0000AA74 ; bool __stdcall ParseOpenTypes(class CCodecs &, class UString const &, class CObjectVector<struct COpenType> &)
UNDEF:0000AA74                 extrn ?ParseOpenTypes@@YG_NAAVCCodecs@@ABVUString@@AAV?$CObjectVector@UCOpenType@@@@@Z:near
UNDEF:0000AA74                                         ; CODE XREF: Main2(void)+3F3p
UNDEF:0000AA78 ; bool __thiscall CArcCommand::IsFromUpdateGroup(CArcCommand *__hidden this)
UNDEF:0000AA78                 extrn ?IsFromUpdateGroup@CArcCommand@@QBE_NXZ:near
UNDEF:0000AA78                                         ; CODE XREF: Main2(void)+3A9p
UNDEF:0000AA78                                         ; Main2(void)+179Ep
UNDEF:0000AA7C ; bool __thiscall CArcCommand::IsFromExtractGroup(CArcCommand *__hidden this)
UNDEF:0000AA7C                 extrn ?IsFromExtractGroup@CArcCommand@@QBE_NXZ:near
UNDEF:0000AA7C                                         ; CODE XREF: Main2(void)+372p
UNDEF:0000AA80 ; __int32 __thiscall CCodecs::Load(CCodecs *__hidden this)
UNDEF:0000AA80                 extrn ?Load@CCodecs@@QAEJXZ:near
UNDEF:0000AA80                                         ; CODE XREF: Main2(void)+361p
UNDEF:0000AA84 ; void *__cdecl operator new(unsigned int)
UNDEF:0000AA84                 extrn ??2@YAPAXI@Z:near ; CODE XREF: Main2(void)+2D3p
UNDEF:0000AA84                                         ; Main2(void)+D5Fp ...
UNDEF:0000AA88 ; BOOL __stdcall GetConsoleScreenBufferInfo(HANDLE hConsoleOutput, PCONSOLE_SCREEN_BUFFER_INFO lpConsoleScreenBufferInfo)
UNDEF:0000AA88                 extrn __imp__GetConsoleScreenBufferInfo@8:near
UNDEF:0000AA88                                         ; CODE XREF: Main2(void)+2B3p
UNDEF:0000AA88                                         ; DATA XREF: Main2(void)+2B3r
UNDEF:0000AA8C ; HANDLE __stdcall GetStdHandle(DWORD nStdHandle)
UNDEF:0000AA8C                 extrn __imp__GetStdHandle@4:near
UNDEF:0000AA8C                                         ; CODE XREF: Main2(void)+2A5p
UNDEF:0000AA8C                                         ; DATA XREF: Main2(void)+2A5r
UNDEF:0000AA90 ; void __thiscall CArcCmdLineParser::Parse2(CArcCmdLineParser *__hidden this, struct CArcCmdLineOptions *)
UNDEF:0000AA90                 extrn ?Parse2@CArcCmdLineParser@@QAEXAAUCArcCmdLineOptions@@@Z:near
UNDEF:0000AA90                                         ; CODE XREF: Main2(void)+25Ep
UNDEF:0000AA94 ; _DWORD __stdcall SetLargePageSize()
UNDEF:0000AA94                 extrn _SetLargePageSize@0:near ; CODE XREF: Main2(void)+22Dp
UNDEF:0000AA98 ; struct CStdOutStream *g_ErrStream
UNDEF:0000AA98                 extrn ?g_ErrStream@@3PAVCStdOutStream@@A:near
UNDEF:0000AA98                                         ; DATA XREF: Main2(void)+14Dw
UNDEF:0000AA98                                         ; Main2(void)+B6Ar ...
UNDEF:0000AA9C ; class CStdOutStream g_StdOut
UNDEF:0000AA9C                 extrn ?g_StdOut@@3VCStdOutStream@@A:near
UNDEF:0000AA9C                                         ; DATA XREF: Main2(void)+148o
UNDEF:0000AA9C                                         ; Main2(void):loc_FC8o ...
UNDEF:0000AAA0 ; class CStdOutStream g_StdErr
UNDEF:0000AAA0                 extrn ?g_StdErr@@3VCStdOutStream@@A:near
UNDEF:0000AAA0                                         ; DATA XREF: Main2(void)+12Ao
UNDEF:0000AAA0                                         ; Main2(void)+168o
UNDEF:0000AAA4 ; public: void __thiscall CArcCmdLineParser::Parse1(class CObjectVector<class UString> const &, struct CArcCmdLineOptions &)
UNDEF:0000AAA4                 extrn ?Parse1@CArcCmdLineParser@@QAEXABV?$CObjectVector@VUString@@@@AAUCArcCmdLineOptions@@@Z:near
UNDEF:0000AAA4                                         ; CODE XREF: Main2(void)+113p
UNDEF:0000AAA8 ; public: __thiscall CArcCmdLineParser::CArcCmdLineParser(void)
UNDEF:0000AAA8                 extrn ??0CArcCmdLineParser@@QAE@XZ:near
UNDEF:0000AAA8                                         ; CODE XREF: Main2(void)+F9p
UNDEF:0000AAAC ; struct CStdOutStream *g_StdStream
UNDEF:0000AAAC                 extrn ?g_StdStream@@3PAVCStdOutStream@@A:near
UNDEF:0000AAAC                                         ; DATA XREF: Main2(void)+AAr
UNDEF:0000AAAC                                         ; Main2(void)+130w ...
UNDEF:0000AAB0 ; void __stdcall NCommandLineParser::SplitCommandLine(class UString const &, class CObjectVector<class UString> &)
UNDEF:0000AAB0                 extrn ?SplitCommandLine@NCommandLineParser@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z:near
UNDEF:0000AAB0                                         ; CODE XREF: Main2(void)+87p
UNDEF:0000AAB4 ; public: __thiscall UString::UString(wchar_t const *)
UNDEF:0000AAB4                 extrn ??0UString@@QAE@PB_W@Z:near
UNDEF:0000AAB4                                         ; CODE XREF: Main2(void)+73p
UNDEF:0000AAB8 ; LPWSTR __stdcall GetCommandLineW()
UNDEF:0000AAB8                 extrn __imp__GetCommandLineW@0:near
UNDEF:0000AAB8                                         ; CODE XREF: Main2(void)+5Fp
UNDEF:0000AAB8                                         ; DATA XREF: Main2(void)+5Fr
UNDEF:0000AABC ; void __stdcall SetFileApisToOEM()
UNDEF:0000AABC                 extrn __imp__SetFileApisToOEM@0:near
UNDEF:0000AABC                                         ; CODE XREF: Main2(void)+41p
UNDEF:0000AABC                                         ; DATA XREF: Main2(void)+41r
UNDEF:0000AAC0                 extrn ___security_cookie:near ; DATA XREF: Main2(void)+2Br
UNDEF:0000AAC0                                         ; PrintUInt32(CStdOutStream &,uint,uint)+24r ...
UNDEF:0000AAC4                 extrn ___CxxFrameHandler3:near
UNDEF:0000AAC4                                         ; CODE XREF: __ehhandler$?Main2@@YGHXZ+23j
UNDEF:0000AAC4                                         ; __ehhandler$?PrintUInt32@@YGXAAVCStdOutStream@@II@Z+20j ...
UNDEF:0000AAC8 ; __fastcall __security_check_cookie(x)
UNDEF:0000AAC8                 extrn @__security_check_cookie@4:near
UNDEF:0000AAC8                                         ; CODE XREF: Main2(void)+1C3Bp
UNDEF:0000AAC8                                         ; PrintUInt32(CStdOutStream &,uint,uint)+9Ap ...
UNDEF:0000AACC ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:0000AACC                 extrn @_RTC_CheckStackVars@8:near
UNDEF:0000AACC                                         ; CODE XREF: Main2(void)+1C22p
UNDEF:0000AACC                                         ; PrintUInt32(CStdOutStream &,uint,uint)+82p ...
UNDEF:0000AAD0                 extrn __RTC_CheckEsp:near ; CODE XREF: Main2(void)+49p
UNDEF:0000AAD0                                         ; Main2(void)+67p ...
UNDEF:0000AAD4                 extrn __RTC_Shutdown:near
UNDEF:0000AAD4                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:0000AAD8                 extrn __RTC_InitBase:near
UNDEF:0000AAD8                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:0000AADC ; __stdcall _CxxThrowException(x, x)
UNDEF:0000AADC                 extrn __CxxThrowException@8:near
UNDEF:0000AADC                                         ; CODE XREF: Main2(void)+3CDp
UNDEF:0000AADC                                         ; Main2(void)+417p ...
UNDEF:0000AAE0 ; const type_info::`vftable'
UNDEF:0000AAE0                 extrn ??_7type_info@@6B@:near
UNDEF:0000AAE0                                         ; DATA XREF: .data:char * `RTTI Type Descriptor'o
UNDEF:0000AAE0                                         ; .data:void * `RTTI Type Descriptor'o ...
UNDEF:0000AAE4 ; void __thiscall UString::Grow_1(UString *__hidden this)
UNDEF:0000AAE4                 extrn ?Grow_1@UString@@AAEXXZ:near
UNDEF:0000AAE4                                         ; CODE XREF: UString::operator+=(wchar_t)+2Fp
UNDEF:0000AAE8 ; bool NWindows::NSecurity::EnablePrivilege(NWindows::NSecurity *__hidden this, const char *, bool)
UNDEF:0000AAE8                 extrn ?EnablePrivilege@NSecurity@NWindows@@YG_NPBD_N@Z:near
UNDEF:0000AAE8                                         ; CODE XREF: NWindows::NSecurity::EnablePrivilege_LockMemory(bool)+Dp
UNDEF:0000AAE8                                         ; NWindows::NSecurity::EnablePrivilege_SymLink(void)+Ap ...
UNDEF:0000AAEC ; const IID IID_IUnknown
UNDEF:0000AAEC                 extrn _IID_IUnknown:near
UNDEF:0000AAEC                                         ; DATA XREF: CCodecs::QueryInterface(_GUID const &,void * *)+Co
UNDEF:0000AAEC                                         ; CExtractCallbackConsole::QueryInterface(_GUID const &,void * *)+1Do
UNDEF:0000AAF0 ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:0000AAF0                 extrn _memcmp:near      ; CODE XREF: IsEqualGUID(x,x)+Dp
UNDEF:0000AAF4 ; int __cdecl _fputs(const char *Str, FILE *File)
UNDEF:0000AAF4                 extrn __imp__fputs:near ; CODE XREF: CStdOutStream::operator<<(char const *)+1Bp
UNDEF:0000AAF4                                         ; DATA XREF: CStdOutStream::operator<<(char const *)+1Br
UNDEF:0000AAF8 ; int __cdecl _fputc(int Ch, FILE *File)
UNDEF:0000AAF8                 extrn __imp__fputc:near ; CODE XREF: CStdOutStream::operator<<(char)+1Cp
UNDEF:0000AAF8                                         ; DATA XREF: CStdOutStream::operator<<(char)+1Cr
UNDEF:0000AAFC ; void __thiscall CPercentPrinter::ClosePrint(CPercentPrinter *__hidden this, bool)
UNDEF:0000AAFC                 extrn ?ClosePrint@CPercentPrinter@@QAEX_N@Z:near
UNDEF:0000AAFC                                         ; CODE XREF: COpenCallbackConsole::ClosePercents(void)+25p
UNDEF:0000AAFC                                         ; CExtractScanConsole::CloseScanning(void)+25p ...
UNDEF:0000AB00 ; _DWORD __thiscall CPercentPrinter::~CPercentPrinter(CPercentPrinter *__hidden this)
UNDEF:0000AB00                 extrn ??1CPercentPrinter@@QAE@XZ:near
UNDEF:0000AB00                                         ; CODE XREF: __unwindfunclet$??0COpenCallbackConsole@@QAE@XZ$0+6j
UNDEF:0000AB00                                         ; COpenCallbackConsole::~COpenCallbackConsole(void)+4Fp ...
UNDEF:0000AB04 ; public: virtual long __thiscall COpenCallbackConsole::Open_CheckBreak(void)
UNDEF:0000AB04                 extrn ?Open_CheckBreak@COpenCallbackConsole@@UAEJXZ:near
UNDEF:0000AB04                                         ; DATA XREF: .rdata:const COpenCallbackConsole::`vftable'o
UNDEF:0000AB04                                         ; .rdata:const CExtractCallbackConsole::`vftable'{for `COpenCallbackConsole'}o
UNDEF:0000AB08 ; public: virtual long __thiscall COpenCallbackConsole::Open_SetTotal(unsigned __int64 const *, unsigned __int64 const *)
UNDEF:0000AB08                 extrn ?Open_SetTotal@COpenCallbackConsole@@UAEJPB_K0@Z:near
UNDEF:0000AB08                                         ; DATA XREF: .rdata:00005838o
UNDEF:0000AB08                                         ; .rdata:00005F10o
UNDEF:0000AB0C ; public: virtual long __thiscall COpenCallbackConsole::Open_SetCompleted(unsigned __int64 const *, unsigned __int64 const *)
UNDEF:0000AB0C                 extrn ?Open_SetCompleted@COpenCallbackConsole@@UAEJPB_K0@Z:near
UNDEF:0000AB0C                                         ; DATA XREF: .rdata:0000583Co
UNDEF:0000AB0C                                         ; .rdata:00005F14o
UNDEF:0000AB10 ; public: virtual long __thiscall COpenCallbackConsole::Open_Finished(void)
UNDEF:0000AB10                 extrn ?Open_Finished@COpenCallbackConsole@@UAEJXZ:near
UNDEF:0000AB10                                         ; DATA XREF: .rdata:00005840o
UNDEF:0000AB10                                         ; .rdata:00005F18o
UNDEF:0000AB14 ; public: virtual long __thiscall COpenCallbackConsole::Open_CryptoGetTextPassword(wchar_t * *)
UNDEF:0000AB14                 extrn ?Open_CryptoGetTextPassword@COpenCallbackConsole@@UAEJPAPA_W@Z:near
UNDEF:0000AB14                                         ; DATA XREF: .rdata:00005844o
UNDEF:0000AB14                                         ; .rdata:00005F1Co
UNDEF:0000AB18                 extrn __purecall:near   ; DATA XREF: .rdata:const IOpenCallbackUI::`vftable'o
UNDEF:0000AB18                                         ; .rdata:00005CE0o ...
UNDEF:0000AB1C ; public: virtual long __stdcall CExtractCallbackConsole::SetTotal(unsigned __int64)
UNDEF:0000AB1C                 extrn ?SetTotal@CExtractCallbackConsole@@UAGJ_K@Z:near
UNDEF:0000AB1C                                         ; DATA XREF: .rdata:00005F58o
UNDEF:0000AB20 ; public: virtual long __stdcall CExtractCallbackConsole::SetCompleted(unsigned __int64 const *)
UNDEF:0000AB20                 extrn ?SetCompleted@CExtractCallbackConsole@@UAGJPB_K@Z:near
UNDEF:0000AB20                                         ; DATA XREF: .rdata:00005F5Co
UNDEF:0000AB24 ; public: virtual long __stdcall CExtractCallbackConsole::AskOverwrite(wchar_t const *, struct _FILETIME const *, unsigned __int64 const *, wchar_t const *, struct _FILETIME const *, unsigned __int64 const *, int *)
UNDEF:0000AB24                 extrn ?AskOverwrite@CExtractCallbackConsole@@UAGJPB_WPBU_FILETIME@@PB_K012PAH@Z:near
UNDEF:0000AB24                                         ; DATA XREF: .rdata:00005F60o
UNDEF:0000AB28 ; public: virtual long __stdcall CExtractCallbackConsole::PrepareOperation(wchar_t const *, int, int, unsigned __int64 const *)
UNDEF:0000AB28                 extrn ?PrepareOperation@CExtractCallbackConsole@@UAGJPB_WHHPB_K@Z:near
UNDEF:0000AB28                                         ; DATA XREF: .rdata:00005F64o
UNDEF:0000AB2C ; public: virtual long __stdcall CExtractCallbackConsole::MessageError(wchar_t const *)
UNDEF:0000AB2C                 extrn ?MessageError@CExtractCallbackConsole@@UAGJPB_W@Z:near
UNDEF:0000AB2C                                         ; DATA XREF: .rdata:00005F68o
UNDEF:0000AB30 ; public: virtual long __stdcall CExtractCallbackConsole::SetOperationResult(int, int)
UNDEF:0000AB30                 extrn ?SetOperationResult@CExtractCallbackConsole@@UAGJHH@Z:near
UNDEF:0000AB30                                         ; DATA XREF: .rdata:00005F6Co
UNDEF:0000AB34 ; public: virtual long __thiscall CExtractCallbackConsole::BeforeOpen(wchar_t const *, bool)
UNDEF:0000AB34                 extrn ?BeforeOpen@CExtractCallbackConsole@@UAEJPB_W_N@Z:near
UNDEF:0000AB34                                         ; DATA XREF: .rdata:00005F70o
UNDEF:0000AB38 ; public: virtual long __thiscall CExtractCallbackConsole::OpenResult(class CCodecs const *, struct CArchiveLink const &, wchar_t const *, long)
UNDEF:0000AB38                 extrn ?OpenResult@CExtractCallbackConsole@@UAEJPBVCCodecs@@ABUCArchiveLink@@PB_WJ@Z:near
UNDEF:0000AB38                                         ; DATA XREF: .rdata:00005F74o
UNDEF:0000AB3C ; public: virtual long __thiscall CExtractCallbackConsole::ThereAreNoFiles(void)
UNDEF:0000AB3C                 extrn ?ThereAreNoFiles@CExtractCallbackConsole@@UAEJXZ:near
UNDEF:0000AB3C                                         ; DATA XREF: .rdata:00005F78o
UNDEF:0000AB40 ; public: virtual long __thiscall CExtractCallbackConsole::ExtractResult(long)
UNDEF:0000AB40                 extrn ?ExtractResult@CExtractCallbackConsole@@UAEJJ@Z:near
UNDEF:0000AB40                                         ; DATA XREF: .rdata:00005F7Co
UNDEF:0000AB44 ; public: virtual long __thiscall CExtractCallbackConsole::SetPassword(class UString const &)
UNDEF:0000AB44                 extrn ?SetPassword@CExtractCallbackConsole@@UAEJABVUString@@@Z:near
UNDEF:0000AB44                                         ; DATA XREF: .rdata:00005F80o
UNDEF:0000AB48 ; public: virtual long __stdcall CExtractCallbackConsole::ReportExtractResult(int, int, wchar_t const *)
UNDEF:0000AB48                 extrn ?ReportExtractResult@CExtractCallbackConsole@@UAGJHHPB_W@Z:near
UNDEF:0000AB48                                         ; DATA XREF: .rdata:00005F44o
UNDEF:0000AB4C ; public: virtual long __stdcall CExtractCallbackConsole::CryptoGetTextPassword(wchar_t * *)
UNDEF:0000AB4C                 extrn ?CryptoGetTextPassword@CExtractCallbackConsole@@UAGJPAPA_W@Z:near
UNDEF:0000AB4C                                         ; DATA XREF: .rdata:00005F30o
UNDEF:0000AB50 ; public: virtual long __thiscall CUpdateCallbackConsole::WriteSfx(wchar_t const *, unsigned __int64)
UNDEF:0000AB50                 extrn ?WriteSfx@CUpdateCallbackConsole@@UAEJPB_W_K@Z:near
UNDEF:0000AB50                                         ; DATA XREF: .rdata:const CUpdateCallbackConsole::`vftable'{for `IUpdateCallbackUI'}o
UNDEF:0000AB54 ; public: virtual long __thiscall CUpdateCallbackConsole::SetTotal(unsigned __int64)
UNDEF:0000AB54                 extrn ?SetTotal@CUpdateCallbackConsole@@UAEJ_K@Z:near
UNDEF:0000AB54                                         ; DATA XREF: .rdata:00006C30o
UNDEF:0000AB58 ; public: virtual long __thiscall CUpdateCallbackConsole::SetCompleted(unsigned __int64 const *)
UNDEF:0000AB58                 extrn ?SetCompleted@CUpdateCallbackConsole@@UAEJPB_K@Z:near
UNDEF:0000AB58                                         ; DATA XREF: .rdata:00006C34o
UNDEF:0000AB5C ; public: virtual long __thiscall CUpdateCallbackConsole::SetRatioInfo(unsigned __int64 const *, unsigned __int64 const *)
UNDEF:0000AB5C                 extrn ?SetRatioInfo@CUpdateCallbackConsole@@UAEJPB_K0@Z:near
UNDEF:0000AB5C                                         ; DATA XREF: .rdata:00006C38o
UNDEF:0000AB60 ; public: virtual long __thiscall CUpdateCallbackConsole::CheckBreak(void)
UNDEF:0000AB60                 extrn ?CheckBreak@CUpdateCallbackConsole@@UAEJXZ:near
UNDEF:0000AB60                                         ; DATA XREF: .rdata:00006C3Co
UNDEF:0000AB64 ; public: virtual long __thiscall CUpdateCallbackConsole::SetNumItems(unsigned __int64)
UNDEF:0000AB64                 extrn ?SetNumItems@CUpdateCallbackConsole@@UAEJ_K@Z:near
UNDEF:0000AB64                                         ; DATA XREF: .rdata:00006C40o
UNDEF:0000AB68 ; public: virtual long __thiscall CUpdateCallbackConsole::GetStream(wchar_t const *, bool, bool, unsigned int)
UNDEF:0000AB68                 extrn ?GetStream@CUpdateCallbackConsole@@UAEJPB_W_N1I@Z:near
UNDEF:0000AB68                                         ; DATA XREF: .rdata:00006C44o
UNDEF:0000AB6C ; public: virtual long __thiscall CUpdateCallbackConsole::OpenFileError(class UString const &, unsigned long)
UNDEF:0000AB6C                 extrn ?OpenFileError@CUpdateCallbackConsole@@UAEJABVUString@@K@Z:near
UNDEF:0000AB6C                                         ; DATA XREF: .rdata:00006C48o
UNDEF:0000AB70 ; public: virtual long __thiscall CUpdateCallbackConsole::ReadingFileError(class UString const &, unsigned long)
UNDEF:0000AB70                 extrn ?ReadingFileError@CUpdateCallbackConsole@@UAEJABVUString@@K@Z:near
UNDEF:0000AB70                                         ; DATA XREF: .rdata:00006C4Co
UNDEF:0000AB74 ; public: virtual long __thiscall CUpdateCallbackConsole::SetOperationResult(int)
UNDEF:0000AB74                 extrn ?SetOperationResult@CUpdateCallbackConsole@@UAEJH@Z:near
UNDEF:0000AB74                                         ; DATA XREF: .rdata:00006C50o
UNDEF:0000AB78 ; public: virtual long __thiscall CUpdateCallbackConsole::ReportExtractResult(int, int, wchar_t const *)
UNDEF:0000AB78                 extrn ?ReportExtractResult@CUpdateCallbackConsole@@UAEJHHPB_W@Z:near
UNDEF:0000AB78                                         ; DATA XREF: .rdata:00006C54o
UNDEF:0000AB7C ; public: virtual long __thiscall CUpdateCallbackConsole::ReportUpdateOpeartion(unsigned int, wchar_t const *, bool)
UNDEF:0000AB7C                 extrn ?ReportUpdateOpeartion@CUpdateCallbackConsole@@UAEJIPB_W_N@Z:near
UNDEF:0000AB7C                                         ; DATA XREF: .rdata:00006C58o
UNDEF:0000AB80 ; public: virtual long __thiscall CUpdateCallbackConsole::CryptoGetTextPassword2(int *, wchar_t * *)
UNDEF:0000AB80                 extrn ?CryptoGetTextPassword2@CUpdateCallbackConsole@@UAEJPAHPAPA_W@Z:near
UNDEF:0000AB80                                         ; DATA XREF: .rdata:00006C5Co
UNDEF:0000AB84 ; public: virtual long __thiscall CUpdateCallbackConsole::CryptoGetTextPassword(wchar_t * *)
UNDEF:0000AB84                 extrn ?CryptoGetTextPassword@CUpdateCallbackConsole@@UAEJPAPA_W@Z:near
UNDEF:0000AB84                                         ; DATA XREF: .rdata:00006C60o
UNDEF:0000AB88 ; public: virtual long __thiscall CUpdateCallbackConsole::ShowDeleteFile(wchar_t const *, bool)
UNDEF:0000AB88                 extrn ?ShowDeleteFile@CUpdateCallbackConsole@@UAEJPB_W_N@Z:near
UNDEF:0000AB88                                         ; DATA XREF: .rdata:00006C64o
UNDEF:0000AB8C ; public: virtual long __thiscall CUpdateCallbackConsole::OpenResult(class CCodecs const *, struct CArchiveLink const &, wchar_t const *, long)
UNDEF:0000AB8C                 extrn ?OpenResult@CUpdateCallbackConsole@@UAEJPBVCCodecs@@ABUCArchiveLink@@PB_WJ@Z:near
UNDEF:0000AB8C                                         ; DATA XREF: .rdata:00006C68o
UNDEF:0000AB90 ; public: virtual long __thiscall CUpdateCallbackConsole::StartScanning(void)
UNDEF:0000AB90                 extrn ?StartScanning@CUpdateCallbackConsole@@UAEJXZ:near
UNDEF:0000AB90                                         ; DATA XREF: .rdata:00006C6Co
UNDEF:0000AB94 ; public: virtual long __thiscall CUpdateCallbackConsole::FinishScanning(struct CDirItemsStat const &)
UNDEF:0000AB94                 extrn ?FinishScanning@CUpdateCallbackConsole@@UAEJABUCDirItemsStat@@@Z:near
UNDEF:0000AB94                                         ; DATA XREF: .rdata:00006C70o
UNDEF:0000AB98 ; public: virtual long __thiscall CUpdateCallbackConsole::StartOpenArchive(wchar_t const *)
UNDEF:0000AB98                 extrn ?StartOpenArchive@CUpdateCallbackConsole@@UAEJPB_W@Z:near
UNDEF:0000AB98                                         ; DATA XREF: .rdata:00006C74o
UNDEF:0000AB9C ; public: virtual long __thiscall CUpdateCallbackConsole::StartArchive(wchar_t const *, bool)
UNDEF:0000AB9C                 extrn ?StartArchive@CUpdateCallbackConsole@@UAEJPB_W_N@Z:near
UNDEF:0000AB9C                                         ; DATA XREF: .rdata:00006C78o
UNDEF:0000ABA0 ; public: virtual long __thiscall CUpdateCallbackConsole::FinishArchive(struct CFinishArchiveStat const &)
UNDEF:0000ABA0                 extrn ?FinishArchive@CUpdateCallbackConsole@@UAEJABUCFinishArchiveStat@@@Z:near
UNDEF:0000ABA0                                         ; DATA XREF: .rdata:00006C7Co
UNDEF:0000ABA4 ; public: virtual long __thiscall CUpdateCallbackConsole::DeletingAfterArchiving(class UString const &, bool)
UNDEF:0000ABA4                 extrn ?DeletingAfterArchiving@CUpdateCallbackConsole@@UAEJABVUString@@_N@Z:near
UNDEF:0000ABA4                                         ; DATA XREF: .rdata:00006C80o
UNDEF:0000ABA8 ; public: virtual long __thiscall CUpdateCallbackConsole::FinishDeletingAfterArchiving(void)
UNDEF:0000ABA8                 extrn ?FinishDeletingAfterArchiving@CUpdateCallbackConsole@@UAEJXZ:near
UNDEF:0000ABA8                                         ; DATA XREF: .rdata:00006C84o
UNDEF:0000ABAC ; public: virtual long __thiscall CUpdateCallbackConsole::ScanError(class UString const &, unsigned long)
UNDEF:0000ABAC                 extrn ?ScanError@CUpdateCallbackConsole@@UAEJABVUString@@K@Z:near
UNDEF:0000ABAC                                         ; DATA XREF: .rdata:const CUpdateCallbackConsole::`vftable'{for `IDirItemsCallback'}o
UNDEF:0000ABB0 ; public: virtual long __thiscall CUpdateCallbackConsole::ScanProgress(struct CDirItemsStat const &, class UString const &, bool)
UNDEF:0000ABB0                 extrn ?ScanProgress@CUpdateCallbackConsole@@UAEJABUCDirItemsStat@@ABVUString@@_N@Z:near
UNDEF:0000ABB0                                         ; DATA XREF: .rdata:00006C24o
UNDEF:0000ABB4 ; public: virtual long __thiscall CHashCallbackConsole::ScanError(class UString const &, unsigned long)
UNDEF:0000ABB4                 extrn ?ScanError@CHashCallbackConsole@@UAEJABVUString@@K@Z:near
UNDEF:0000ABB4                                         ; DATA XREF: .rdata:const CHashCallbackConsole::`vftable'o
UNDEF:0000ABB8 ; public: virtual long __thiscall CHashCallbackConsole::ScanProgress(struct CDirItemsStat const &, class UString const &, bool)
UNDEF:0000ABB8                 extrn ?ScanProgress@CHashCallbackConsole@@UAEJABUCDirItemsStat@@ABVUString@@_N@Z:near
UNDEF:0000ABB8                                         ; DATA XREF: .rdata:0000757Co
UNDEF:0000ABBC ; public: virtual long __thiscall CHashCallbackConsole::StartScanning(void)
UNDEF:0000ABBC                 extrn ?StartScanning@CHashCallbackConsole@@UAEJXZ:near
UNDEF:0000ABBC                                         ; DATA XREF: .rdata:00007580o
UNDEF:0000ABC0 ; public: virtual long __thiscall CHashCallbackConsole::FinishScanning(struct CDirItemsStat const &)
UNDEF:0000ABC0                 extrn ?FinishScanning@CHashCallbackConsole@@UAEJABUCDirItemsStat@@@Z:near
UNDEF:0000ABC0                                         ; DATA XREF: .rdata:00007584o
UNDEF:0000ABC4 ; public: virtual long __thiscall CHashCallbackConsole::SetNumFiles(unsigned __int64)
UNDEF:0000ABC4                 extrn ?SetNumFiles@CHashCallbackConsole@@UAEJ_K@Z:near
UNDEF:0000ABC4                                         ; DATA XREF: .rdata:00007588o
UNDEF:0000ABC8 ; public: virtual long __thiscall CHashCallbackConsole::SetTotal(unsigned __int64)
UNDEF:0000ABC8                 extrn ?SetTotal@CHashCallbackConsole@@UAEJ_K@Z:near
UNDEF:0000ABC8                                         ; DATA XREF: .rdata:0000758Co
UNDEF:0000ABCC ; public: virtual long __thiscall CHashCallbackConsole::SetCompleted(unsigned __int64 const *)
UNDEF:0000ABCC                 extrn ?SetCompleted@CHashCallbackConsole@@UAEJPB_K@Z:near
UNDEF:0000ABCC                                         ; DATA XREF: .rdata:00007590o
UNDEF:0000ABD0 ; public: virtual long __thiscall CHashCallbackConsole::CheckBreak(void)
UNDEF:0000ABD0                 extrn ?CheckBreak@CHashCallbackConsole@@UAEJXZ:near
UNDEF:0000ABD0                                         ; DATA XREF: .rdata:00007594o
UNDEF:0000ABD4 ; public: virtual long __thiscall CHashCallbackConsole::BeforeFirstFile(struct CHashBundle const &)
UNDEF:0000ABD4                 extrn ?BeforeFirstFile@CHashCallbackConsole@@UAEJABUCHashBundle@@@Z:near
UNDEF:0000ABD4                                         ; DATA XREF: .rdata:00007598o
UNDEF:0000ABD8 ; public: virtual long __thiscall CHashCallbackConsole::GetStream(wchar_t const *, bool)
UNDEF:0000ABD8                 extrn ?GetStream@CHashCallbackConsole@@UAEJPB_W_N@Z:near
UNDEF:0000ABD8                                         ; DATA XREF: .rdata:0000759Co
UNDEF:0000ABDC ; public: virtual long __thiscall CHashCallbackConsole::OpenFileError(class UString const &, unsigned long)
UNDEF:0000ABDC                 extrn ?OpenFileError@CHashCallbackConsole@@UAEJABVUString@@K@Z:near
UNDEF:0000ABDC                                         ; DATA XREF: .rdata:000075A0o
UNDEF:0000ABE0 ; public: virtual long __thiscall CHashCallbackConsole::SetOperationResult(unsigned __int64, struct CHashBundle const &, bool)
UNDEF:0000ABE0                 extrn ?SetOperationResult@CHashCallbackConsole@@UAEJ_KABUCHashBundle@@_N@Z:near
UNDEF:0000ABE0                                         ; DATA XREF: .rdata:000075A4o
UNDEF:0000ABE4 ; public: virtual long __thiscall CHashCallbackConsole::AfterLastFile(struct CHashBundle const &)
UNDEF:0000ABE4                 extrn ?AfterLastFile@CHashCallbackConsole@@UAEJABUCHashBundle@@@Z:near
UNDEF:0000ABE4                                         ; DATA XREF: .rdata:000075A8o
UNDEF:0000ABE8 ; public: __thiscall AString::AString(char const *)
UNDEF:0000ABE8                 extrn ??0AString@@QAE@PBD@Z:near
UNDEF:0000ABE8                                         ; CODE XREF: PrintUInt32(CStdOutStream &,uint,uint)+4Cp
UNDEF:0000ABE8                                         ; PrintHexId(CStdOutStream &,unsigned __int64)+50p
UNDEF:0000ABEC ; void __stdcall ConvertUInt32ToString(unsigned int, char *)
UNDEF:0000ABEC                 extrn ?ConvertUInt32ToString@@YGXIPAD@Z:near
UNDEF:0000ABEC                                         ; CODE XREF: PrintUInt32(CStdOutStream &,uint,uint)+40p
UNDEF:0000ABF0 ; struct UString __stdcall __high NWindows::NError::MyFormatMessage(unsigned __int32)
UNDEF:0000ABF0                 extrn ?MyFormatMessage@NError@NWindows@@YG?AVUString@@K@Z:near
UNDEF:0000ABF0                                         ; CODE XREF: WarningsCheck(long,CCallbackConsoleBase const &,CUpdateErrorInfo const &,CStdOutStream &,bool)+176p
UNDEF:0000ABF0                                         ; PrintWarningsPaths(CErrorPathCodes const &,CStdOutStream &)+A2p
UNDEF:0000ABF4 ; void __thiscall UString::Add_LF(UString *__hidden this)
UNDEF:0000ABF4                 extrn ?Add_LF@UString@@QAEXXZ:near
UNDEF:0000ABF4                                         ; CODE XREF: WarningsCheck(long,CCallbackConsoleBase const &,CUpdateErrorInfo const &,CStdOutStream &,bool)+11Bp
UNDEF:0000ABF4                                         ; WarningsCheck(long,CCallbackConsoleBase const &,CUpdateErrorInfo const &,CStdOutStream &,bool)+15Dp ...
UNDEF:0000ABF8 ; void __thiscall UString::AddAscii(UString *__hidden this, const char *)
UNDEF:0000ABF8                 extrn ?AddAscii@UString@@QAEXPBD@Z:near
UNDEF:0000ABF8                                         ; CODE XREF: WarningsCheck(long,CCallbackConsoleBase const &,CUpdateErrorInfo const &,CStdOutStream &,bool)+113p
UNDEF:0000ABFC ; HMODULE __stdcall LoadLibraryW(LPCWSTR lpLibFileName)
UNDEF:0000ABFC                 extrn __imp__LoadLibraryW@4:near
UNDEF:0000ABFC                                         ; CODE XREF: PrintStat(void)+C1p
UNDEF:0000ABFC                                         ; DATA XREF: PrintStat(void)+C1r
UNDEF:0000AC00 ; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
UNDEF:0000AC00                 extrn __imp__GetProcAddress@8:near
UNDEF:0000AC00                                         ; CODE XREF: PrintStat(void)+9Ep
UNDEF:0000AC00                                         ; PrintStat(void)+EBp
UNDEF:0000AC00                                         ; DATA XREF: ...
UNDEF:0000AC04 ; HMODULE __stdcall GetModuleHandleW(LPCWSTR lpModuleName)
UNDEF:0000AC04                 extrn __imp__GetModuleHandleW@4:near
UNDEF:0000AC04                                         ; CODE XREF: PrintStat(void)+90p
UNDEF:0000AC04                                         ; DATA XREF: PrintStat(void)+90r
UNDEF:0000AC08 ; void *__cdecl memset(void *Dst, int Val, size_t Size)
UNDEF:0000AC08                 extrn _memset:near      ; CODE XREF: PrintStat(void)+70p
UNDEF:0000AC0C ; void NWindows::NTime::GetCurUtcFileTime(NWindows::NTime *__hidden this, struct _FILETIME *)
UNDEF:0000AC0C                 extrn ?GetCurUtcFileTime@NTime@NWindows@@YGXAAU_FILETIME@@@Z:near
UNDEF:0000AC0C                                         ; CODE XREF: PrintStat(void)+63p
UNDEF:0000AC10 ; BOOL __stdcall GetProcessTimes(HANDLE hProcess, LPFILETIME lpCreationTime, LPFILETIME lpExitTime, LPFILETIME lpKernelTime, LPFILETIME lpUserTime)
UNDEF:0000AC10                 extrn __imp__GetProcessTimes@20:near
UNDEF:0000AC10                                         ; CODE XREF: PrintStat(void)+49p
UNDEF:0000AC10                                         ; DATA XREF: PrintStat(void)+49r
UNDEF:0000AC14 ; HANDLE __stdcall GetCurrentProcess()
UNDEF:0000AC14                 extrn __imp__GetCurrentProcess@0:near
UNDEF:0000AC14                                         ; CODE XREF: PrintStat(void)+3Bp
UNDEF:0000AC14                                         ; PrintStat(void)+111p
UNDEF:0000AC14                                         ; DATA XREF: ...
UNDEF:0000AC18                 extrn __aullshr:near    ; CODE XREF: PrintTime(char const *,unsigned __int64,unsigned __int64)+D8p
UNDEF:0000AC18                                         ; PrintTime(char const *,unsigned __int64,unsigned __int64)+EBp ...
UNDEF:0000AC1C                 extrn __allmul:near     ; CODE XREF: PrintTime(char const *,unsigned __int64,unsigned __int64)+92p
UNDEF:0000AC1C                                         ; PrintTime(char const *,unsigned __int64,unsigned __int64)+11Ap
UNDEF:0000AC20                 extrn __aulldiv:near    ; CODE XREF: PrintTime(char const *,unsigned __int64,unsigned __int64)+5Ap
UNDEF:0000AC20                                         ; PrintTime(char const *,unsigned __int64,unsigned __int64)+129p
UNDEF:0000AC24 ; void __stdcall ConvertUInt64ToString(unsigned __int64, char *)
UNDEF:0000AC24                 extrn ?ConvertUInt64ToString@@YGX_KPAD@Z:near
UNDEF:0000AC24                                         ; CODE XREF: PrintNum(unsigned __int64,uint,char)+32p
UNDEF:0000AC28                 extrn __allshl:near     ; CODE XREF: GetTime64(_FILETIME const &)+Ep
UNDEF:0000AC2C ; void __stdcall ConvertUInt64ToHex(unsigned __int64, char *)
UNDEF:0000AC2C                 extrn ?ConvertUInt64ToHex@@YGX_KPAD@Z:near
UNDEF:0000AC2C                                         ; CODE XREF: PrintHexId(CStdOutStream &,unsigned __int64)+44p
UNDEF:0000AC30 ; _DWORD __thiscall NCommandLineParser::CParser::~CParser(NCommandLineParser::CParser *__hidden this)
UNDEF:0000AC30                 extrn ??1CParser@NCommandLineParser@@QAE@XZ:near
UNDEF:0000AC30                                         ; CODE XREF: CArcCmdLineParser::~CArcCmdLineParser(void)+11p
UNDEF:0000AC34 ; public: virtual long __thiscall CExtractScanConsole::ScanError(class UString const &, unsigned long)
UNDEF:0000AC34                 extrn ?ScanError@CExtractScanConsole@@UAEJABVUString@@K@Z:near
UNDEF:0000AC34                                         ; DATA XREF: .rdata:const CExtractScanConsole::`vftable'o
UNDEF:0000AC38 ; public: virtual long __thiscall CExtractScanConsole::ScanProgress(struct CDirItemsStat const &, class UString const &, bool)
UNDEF:0000AC38                 extrn ?ScanProgress@CExtractScanConsole@@UAEJABUCDirItemsStat@@ABVUString@@_N@Z:near
UNDEF:0000AC38                                         ; DATA XREF: .rdata:00007C80o
UNDEF:0000AC3C ; public: virtual void __thiscall CHashBundle::InitForNewFile(void)
UNDEF:0000AC3C                 extrn ?InitForNewFile@CHashBundle@@UAEXXZ:near
UNDEF:0000AC3C                                         ; DATA XREF: .rdata:const CHashBundle::`vftable'o
UNDEF:0000AC40 ; public: virtual void __thiscall CHashBundle::Update(void const *, unsigned int)
UNDEF:0000AC40                 extrn ?Update@CHashBundle@@UAEXPBXI@Z:near
UNDEF:0000AC40                                         ; DATA XREF: .rdata:00007EA8o
UNDEF:0000AC44 ; public: virtual void __thiscall CHashBundle::SetSize(unsigned __int64)
UNDEF:0000AC44                 extrn ?SetSize@CHashBundle@@UAEX_K@Z:near
UNDEF:0000AC44                                         ; DATA XREF: .rdata:00007EACo
UNDEF:0000AC48 ; public: virtual void __thiscall CHashBundle::Final(bool, bool, class UString const &)
UNDEF:0000AC48                 extrn ?Final@CHashBundle@@UAEX_N0ABVUString@@@Z:near
UNDEF:0000AC48                                         ; DATA XREF: .rdata:00007EB0o
UNDEF:0000AC4C ; public: __thiscall UString::UString(class UString const &)
UNDEF:0000AC4C                 extrn ??0UString@@QAE@ABV0@@Z:near
UNDEF:0000AC4C                                         ; CODE XREF: CObjectVector<UString>::Add(UString const &)+5Ap
UNDEF:0000AC4C                                         ; CProperty::CProperty(CProperty const &)+34p ...
UNDEF:0000AC50 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:0000AC50                 extrn _memcpy:near      ; CODE XREF: CRecordVector<void *>::Reserve(uint)+67p
UNDEF:0000AC50                                         ; CRecordVector<void *>::ReserveOnePosition(void)+87p ...
UNDEF:0000AC54 ; void *__cdecl _memmove(void *Dst, const void *Src, size_t Size)
UNDEF:0000AC54                 extrn __imp__memmove:near
UNDEF:0000AC54                                         ; CODE XREF: CRecordVector<void *>::MoveItems(uint,uint)+36p
UNDEF:0000AC54                                         ; CRecordVector<int>::MoveItems(uint,uint)+36p
UNDEF:0000AC54                                         ; DATA XREF: ...
UNDEF:0000AC54
UNDEF:0000AC54
UNDEF:0000AC54                 end