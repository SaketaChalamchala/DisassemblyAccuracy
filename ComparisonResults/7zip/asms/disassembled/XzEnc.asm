.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : 00BDF4FE166F40EB3721AF621DF9A666
.text:00000000 ; Input CRC32 : B6763E8D
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\XzEnc.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; __stdcall Xz_WriteHeader(x, x)
.text:00000000                 public _Xz_WriteHeader@8
.text:00000000 _Xz_WriteHeader@8 proc near             ; CODE XREF: Xz_Compress(x,x,x,x,x,x)+61p
.text:00000000                                         ; Xz_EncodeEmpty(x)+38p
.text:00000000
.text:00000000 var_1C          = dword ptr -1Ch
.text:00000000 Dst             = dword ptr -18h
.text:00000000 var_14          = dword ptr -14h
.text:00000000 var_10          = dword ptr -10h
.text:00000000 var_C           = dword ptr -0Ch
.text:00000000 var_8           = dword ptr -8
.text:00000000 var_4           = dword ptr -4
.text:00000000 arg_0           = word ptr  8
.text:00000000 arg_4           = dword ptr  0Ch
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 sub     esp, 1Ch
.text:00000006                 mov     eax, 0CCCCCCCCh
.text:0000000B                 mov     [ebp+var_1C], eax
.text:0000000E                 mov     [ebp+Dst], eax
.text:00000011                 mov     [ebp+var_14], eax
.text:00000014                 mov     [ebp+var_10], eax
.text:00000017                 mov     [ebp+var_C], eax
.text:0000001A                 mov     [ebp+var_8], eax
.text:0000001D                 mov     [ebp+var_4], eax
.text:00000020                 mov     eax, dword ptr ds:___security_cookie
.text:00000025                 xor     eax, ebp
.text:00000027                 mov     [ebp+var_4], eax
.text:0000002A                 push    6               ; Size
.text:0000002C                 push    offset _XZ_SIG  ; Src
.text:00000031                 lea     eax, [ebp+Dst]
.text:00000034                 push    eax             ; Dst
.text:00000035                 call    _memcpy
.text:0000003A                 add     esp, 0Ch
.text:0000003D                 movzx   ecx, [ebp+arg_0]
.text:00000041                 sar     ecx, 8
.text:00000044                 mov     byte ptr [ebp+var_14+2], cl
.text:00000047                 movzx   edx, [ebp+arg_0]
.text:0000004B                 and     edx, 0FFh
.text:00000051                 mov     byte ptr [ebp+var_14+3], dl
.text:00000054                 lea     ecx, [ebp+var_14+2]
.text:00000057                 mov     edx, 2
.text:0000005C                 call    @CrcCalc@8      ; CrcCalc(x,x)
.text:00000061                 mov     [ebp+var_8], eax
.text:00000064                 mov     eax, [ebp+var_8]
.text:00000067                 mov     [ebp+var_10], eax
.text:0000006A                 push    0Ch
.text:0000006C                 lea     ecx, [ebp+Dst]
.text:0000006F                 push    ecx
.text:00000070                 mov     edx, [ebp+arg_4]
.text:00000073                 push    edx
.text:00000074                 call    _WriteBytes@12  ; WriteBytes(x,x,x)
.text:00000079                 push    edx
.text:0000007A                 mov     ecx, ebp
.text:0000007C                 push    eax
.text:0000007D                 lea     edx, $LN5
.text:00000083                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000088                 pop     eax
.text:00000089                 pop     edx
.text:0000008A                 mov     ecx, [ebp+var_4]
.text:0000008D                 xor     ecx, ebp
.text:0000008F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000094                 add     esp, 1Ch
.text:00000097                 cmp     ebp, esp
.text:00000099                 call    __RTC_CheckEsp
.text:0000009E                 mov     esp, ebp
.text:000000A0                 pop     ebp
.text:000000A1                 retn    8
.text:000000A1 _Xz_WriteHeader@8 endp
.text:000000A1
.text:000000A1 ; ---------------------------------------------------------------------------
.text:000000A4 $LN5            dd 1                    ; DATA XREF: Xz_WriteHeader(x,x)+7Do
.text:000000A8                 dd offset $LN4
.text:000000AC $LN4            dd 0FFFFFFE8h, 0Ch      ; DATA XREF: .text:000000A8o
.text:000000B4                 dd offset $LN3          ; "header"
.text:000000B8 $LN3            db 'header',0           ; DATA XREF: .text:000000B4o
.text:000000BF                 align 10h
.text:000000C0
.text:000000C0 ; =============== S U B R O U T I N E =======================================
.text:000000C0
.text:000000C0 ; Attributes: bp-based frame
.text:000000C0
.text:000000C0 ; __stdcall WriteBytes(x, x, x)
.text:000000C0 _WriteBytes@12  proc near               ; CODE XREF: Xz_WriteHeader(x,x)+74p
.text:000000C0                                         ; XzBlock_WriteHeader(x,x)+21Dp ...
.text:000000C0
.text:000000C0 arg_0           = dword ptr  8
.text:000000C0 arg_4           = dword ptr  0Ch
.text:000000C0 arg_8           = dword ptr  10h
.text:000000C0
.text:000000C0                 push    ebp
.text:000000C1                 mov     ebp, esp
.text:000000C3                 push    esi
.text:000000C4                 mov     esi, esp
.text:000000C6                 mov     eax, [ebp+arg_8]
.text:000000C9                 push    eax
.text:000000CA                 mov     ecx, [ebp+arg_4]
.text:000000CD                 push    ecx
.text:000000CE                 mov     edx, [ebp+arg_0]
.text:000000D1                 push    edx
.text:000000D2                 mov     eax, [ebp+arg_0]
.text:000000D5                 mov     ecx, [eax]
.text:000000D7                 call    ecx
.text:000000D9                 cmp     esi, esp
.text:000000DB                 call    __RTC_CheckEsp
.text:000000E0                 sub     eax, [ebp+arg_8]
.text:000000E3                 neg     eax
.text:000000E5                 sbb     eax, eax
.text:000000E7                 and     eax, 9
.text:000000EA                 pop     esi
.text:000000EB                 cmp     ebp, esp
.text:000000ED                 call    __RTC_CheckEsp
.text:000000F2                 pop     ebp
.text:000000F3                 retn    0Ch
.text:000000F3 _WriteBytes@12  endp
.text:000000F3
.text:000000F3 ; ---------------------------------------------------------------------------
.text:000000F6                 align 10h
.text:00000100
.text:00000100 ; =============== S U B R O U T I N E =======================================
.text:00000100
.text:00000100 ; Attributes: bp-based frame
.text:00000100
.text:00000100 ; __stdcall XzBlock_WriteHeader(x, x)
.text:00000100                 public _XzBlock_WriteHeader@8
.text:00000100 _XzBlock_WriteHeader@8 proc near        ; CODE XREF: Xz_Compress(x,x,x,x,x,x)+1F5p
.text:00000100
.text:00000100 var_41C         = dword ptr -41Ch
.text:00000100 var_418         = dword ptr -418h
.text:00000100 var_414         = dword ptr -414h
.text:00000100 var_410         = dword ptr -410h
.text:00000100 Dst             = dword ptr -408h
.text:00000100 var_4           = dword ptr -4
.text:00000100 arg_0           = dword ptr  8
.text:00000100 arg_4           = dword ptr  0Ch
.text:00000100
.text:00000100                 push    ebp
.text:00000101                 mov     ebp, esp
.text:00000103                 sub     esp, 41Ch
.text:00000109                 push    edi
.text:0000010A                 lea     edi, [ebp+var_41C]
.text:00000110                 mov     ecx, 107h
.text:00000115                 mov     eax, 0CCCCCCCCh
.text:0000011A                 rep stosd
.text:0000011C                 mov     eax, dword ptr ds:___security_cookie
.text:00000121                 xor     eax, ebp
.text:00000123                 mov     [ebp+var_4], eax
.text:00000126                 mov     [ebp+var_410], 1
.text:00000130                 mov     eax, [ebp+var_410]
.text:00000136                 mov     ecx, [ebp+arg_0]
.text:00000139                 mov     dl, [ecx+10h]
.text:0000013C                 mov     byte ptr [ebp+eax+Dst], dl
.text:00000143                 mov     eax, [ebp+var_410]
.text:00000149                 add     eax, 1
.text:0000014C                 mov     [ebp+var_410], eax
.text:00000152                 mov     ecx, [ebp+arg_0]
.text:00000155                 movzx   edx, byte ptr [ecx+10h]
.text:00000159                 and     edx, 40h
.text:0000015C                 jz      short loc_187
.text:0000015E                 mov     eax, [ebp+arg_0]
.text:00000161                 mov     ecx, [eax+4]
.text:00000164                 push    ecx
.text:00000165                 mov     edx, [eax]
.text:00000167                 push    edx
.text:00000168                 mov     eax, [ebp+var_410]
.text:0000016E                 lea     ecx, [ebp+eax+Dst]
.text:00000175                 push    ecx
.text:00000176                 call    _Xz_WriteVarInt@12 ; Xz_WriteVarInt(x,x,x)
.text:0000017B                 add     eax, [ebp+var_410]
.text:00000181                 mov     [ebp+var_410], eax
.text:00000187
.text:00000187 loc_187:                                ; CODE XREF: XzBlock_WriteHeader(x,x)+5Cj
.text:00000187                 mov     edx, [ebp+arg_0]
.text:0000018A                 movzx   eax, byte ptr [edx+10h]
.text:0000018E                 and     eax, 80h
.text:00000193                 jz      short loc_1BF
.text:00000195                 mov     ecx, [ebp+arg_0]
.text:00000198                 mov     edx, [ecx+0Ch]
.text:0000019B                 push    edx
.text:0000019C                 mov     eax, [ecx+8]
.text:0000019F                 push    eax
.text:000001A0                 mov     ecx, [ebp+var_410]
.text:000001A6                 lea     edx, [ebp+ecx+Dst]
.text:000001AD                 push    edx
.text:000001AE                 call    _Xz_WriteVarInt@12 ; Xz_WriteVarInt(x,x,x)
.text:000001B3                 add     eax, [ebp+var_410]
.text:000001B9                 mov     [ebp+var_410], eax
.text:000001BF
.text:000001BF loc_1BF:                                ; CODE XREF: XzBlock_WriteHeader(x,x)+93j
.text:000001BF                 mov     eax, [ebp+arg_0]
.text:000001C2                 movzx   ecx, byte ptr [eax+10h]
.text:000001C6                 and     ecx, 3
.text:000001C9                 add     ecx, 1
.text:000001CC                 mov     [ebp+var_414], ecx
.text:000001D2                 mov     [ebp+var_418], 0
.text:000001DC                 jmp     short loc_1ED
.text:000001DE ; ---------------------------------------------------------------------------
.text:000001DE
.text:000001DE loc_1DE:                                ; CODE XREF: XzBlock_WriteHeader(x,x)+1ACj
.text:000001DE                 mov     edx, [ebp+var_418]
.text:000001E4                 add     edx, 1
.text:000001E7                 mov     [ebp+var_418], edx
.text:000001ED
.text:000001ED loc_1ED:                                ; CODE XREF: XzBlock_WriteHeader(x,x)+DCj
.text:000001ED                 mov     eax, [ebp+var_418]
.text:000001F3                 cmp     eax, [ebp+var_414]
.text:000001F9                 jnb     loc_2B1
.text:000001FF                 mov     ecx, [ebp+var_418]
.text:00000205                 shl     ecx, 5
.text:00000208                 mov     edx, [ebp+arg_0]
.text:0000020B                 lea     eax, [edx+ecx+18h]
.text:0000020F                 mov     [ebp+var_41C], eax
.text:00000215                 mov     ecx, [ebp+var_41C]
.text:0000021B                 mov     edx, [ecx+4]
.text:0000021E                 push    edx
.text:0000021F                 mov     eax, [ecx]
.text:00000221                 push    eax
.text:00000222                 mov     ecx, [ebp+var_410]
.text:00000228                 lea     edx, [ebp+ecx+Dst]
.text:0000022F                 push    edx
.text:00000230                 call    _Xz_WriteVarInt@12 ; Xz_WriteVarInt(x,x,x)
.text:00000235                 add     eax, [ebp+var_410]
.text:0000023B                 mov     [ebp+var_410], eax
.text:00000241                 mov     eax, [ebp+var_41C]
.text:00000247                 mov     ecx, [eax+8]
.text:0000024A                 xor     edx, edx
.text:0000024C                 push    edx
.text:0000024D                 push    ecx
.text:0000024E                 mov     eax, [ebp+var_410]
.text:00000254                 lea     ecx, [ebp+eax+Dst]
.text:0000025B                 push    ecx
.text:0000025C                 call    _Xz_WriteVarInt@12 ; Xz_WriteVarInt(x,x,x)
.text:00000261                 add     eax, [ebp+var_410]
.text:00000267                 mov     [ebp+var_410], eax
.text:0000026D                 mov     edx, [ebp+var_41C]
.text:00000273                 mov     eax, [edx+8]
.text:00000276                 push    eax             ; Size
.text:00000277                 mov     ecx, [ebp+var_41C]
.text:0000027D                 add     ecx, 0Ch
.text:00000280                 push    ecx             ; Src
.text:00000281                 mov     edx, [ebp+var_410]
.text:00000287                 lea     eax, [ebp+edx+Dst]
.text:0000028E                 push    eax             ; Dst
.text:0000028F                 call    _memcpy
.text:00000294                 add     esp, 0Ch
.text:00000297                 mov     ecx, [ebp+var_41C]
.text:0000029D                 mov     edx, [ebp+var_410]
.text:000002A3                 add     edx, [ecx+8]
.text:000002A6                 mov     [ebp+var_410], edx
.text:000002AC                 jmp     loc_1DE
.text:000002B1 ; ---------------------------------------------------------------------------
.text:000002B1
.text:000002B1 loc_2B1:                                ; CODE XREF: XzBlock_WriteHeader(x,x)+F9j
.text:000002B1                                         ; XzBlock_WriteHeader(x,x)+1D9j
.text:000002B1                 mov     eax, [ebp+var_410]
.text:000002B7                 and     eax, 3
.text:000002BA                 jz      short loc_2DB
.text:000002BC                 mov     ecx, [ebp+var_410]
.text:000002C2                 mov     byte ptr [ebp+ecx+Dst], 0
.text:000002CA                 mov     edx, [ebp+var_410]
.text:000002D0                 add     edx, 1
.text:000002D3                 mov     [ebp+var_410], edx
.text:000002D9                 jmp     short loc_2B1
.text:000002DB ; ---------------------------------------------------------------------------
.text:000002DB
.text:000002DB loc_2DB:                                ; CODE XREF: XzBlock_WriteHeader(x,x)+1BAj
.text:000002DB                 mov     eax, [ebp+var_410]
.text:000002E1                 shr     eax, 2
.text:000002E4                 mov     byte ptr [ebp+Dst], al
.text:000002EA                 mov     edx, [ebp+var_410]
.text:000002F0                 lea     ecx, [ebp+Dst]
.text:000002F6                 call    @CrcCalc@8      ; CrcCalc(x,x)
.text:000002FB                 mov     ecx, [ebp+var_410]
.text:00000301                 mov     [ebp+ecx+Dst], eax
.text:00000308                 mov     edx, [ebp+var_410]
.text:0000030E                 add     edx, 4
.text:00000311                 push    edx
.text:00000312                 lea     eax, [ebp+Dst]
.text:00000318                 push    eax
.text:00000319                 mov     ecx, [ebp+arg_4]
.text:0000031C                 push    ecx
.text:0000031D                 call    _WriteBytes@12  ; WriteBytes(x,x,x)
.text:00000322                 push    edx
.text:00000323                 mov     ecx, ebp
.text:00000325                 push    eax
.text:00000326                 lea     edx, $LN12
.text:0000032C                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000331                 pop     eax
.text:00000332                 pop     edx
.text:00000333                 pop     edi
.text:00000334                 mov     ecx, [ebp+var_4]
.text:00000337                 xor     ecx, ebp
.text:00000339                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0000033E                 add     esp, 41Ch
.text:00000344                 cmp     ebp, esp
.text:00000346                 call    __RTC_CheckEsp
.text:0000034B                 mov     esp, ebp
.text:0000034D                 pop     ebp
.text:0000034E                 retn    8
.text:0000034E _XzBlock_WriteHeader@8 endp
.text:0000034E
.text:0000034E ; ---------------------------------------------------------------------------
.text:00000351                 align 4
.text:00000354 $LN12           dd 1                    ; DATA XREF: XzBlock_WriteHeader(x,x)+226o
.text:00000358                 dd offset $LN11
.text:0000035C $LN11           dd 0FFFFFBF8h, 400h     ; DATA XREF: .text:00000358o
.text:00000364                 dd offset $LN10         ; "header"
.text:00000368 $LN10           db 'header',0           ; DATA XREF: .text:00000364o
.text:0000036F                 align 10h
.text:00000370
.text:00000370 ; =============== S U B R O U T I N E =======================================
.text:00000370
.text:00000370 ; Attributes: bp-based frame
.text:00000370
.text:00000370 ; __stdcall Xz_WriteFooter(x, x)
.text:00000370                 public _Xz_WriteFooter@8
.text:00000370 _Xz_WriteFooter@8 proc near             ; CODE XREF: Xz_Compress(x,x,x,x,x,x)+41Fp
.text:00000370                                         ; Xz_EncodeEmpty(x)+4Ep
.text:00000370
.text:00000370 var_60          = dword ptr -60h
.text:00000370 var_5C          = dword ptr -5Ch
.text:00000370 var_58          = dword ptr -58h
.text:00000370 var_54          = dword ptr -54h
.text:00000370 var_50          = dword ptr -50h
.text:00000370 var_4C          = dword ptr -4Ch
.text:00000370 var_48          = dword ptr -48h
.text:00000370 var_44          = dword ptr -44h
.text:00000370 var_3C          = dword ptr -3Ch
.text:00000370 var_34          = dword ptr -34h
.text:00000370 var_30          = dword ptr -30h
.text:00000370 var_28          = dword ptr -28h
.text:00000370 var_24          = dword ptr -24h
.text:00000370 var_20          = byte ptr -20h
.text:00000370 var_1F          = byte ptr -1Fh
.text:00000370 Dst             = byte ptr -1Eh
.text:00000370 var_4           = dword ptr -4
.text:00000370 arg_0           = dword ptr  8
.text:00000370 arg_4           = dword ptr  0Ch
.text:00000370
.text:00000370                 push    ebp
.text:00000371                 mov     ebp, esp
.text:00000373                 sub     esp, 60h
.text:00000376                 push    edi
.text:00000377                 lea     edi, [ebp+var_60]
.text:0000037A                 mov     ecx, 18h
.text:0000037F                 mov     eax, 0CCCCCCCCh
.text:00000384                 rep stosd
.text:00000386                 mov     eax, dword ptr ds:___security_cookie
.text:0000038B                 xor     eax, ebp
.text:0000038D                 mov     [ebp+var_4], eax
.text:00000390                 mov     [ebp+var_3C], 0FFFFFFFFh
.text:00000397                 mov     eax, [ebp+arg_0]
.text:0000039A                 mov     ecx, [eax+4]
.text:0000039D                 xor     edx, edx
.text:0000039F                 push    edx
.text:000003A0                 push    ecx
.text:000003A1                 lea     eax, [ebp+var_28+1]
.text:000003A4                 push    eax
.text:000003A5                 call    _Xz_WriteVarInt@12 ; Xz_WriteVarInt(x,x,x)
.text:000003AA                 add     eax, 1
.text:000003AD                 mov     [ebp+var_44], eax
.text:000003B0                 mov     ecx, [ebp+var_44]
.text:000003B3                 xor     edx, edx
.text:000003B5                 mov     [ebp+var_34], ecx
.text:000003B8                 mov     [ebp+var_30], edx
.text:000003BB                 mov     byte ptr [ebp+var_28], 0
.text:000003BF                 lea     eax, [ebp+var_3C]
.text:000003C2                 push    eax
.text:000003C3                 mov     ecx, [ebp+var_44]
.text:000003C6                 push    ecx
.text:000003C7                 lea     edx, [ebp+var_28]
.text:000003CA                 push    edx
.text:000003CB                 mov     eax, [ebp+arg_4]
.text:000003CE                 push    eax
.text:000003CF                 call    _WriteBytesAndCrc@16 ; WriteBytesAndCrc(x,x,x,x)
.text:000003D4                 mov     [ebp+var_4C], eax
.text:000003D7                 cmp     [ebp+var_4C], 0
.text:000003DB                 jz      short loc_3E5
.text:000003DD                 mov     eax, [ebp+var_4C]
.text:000003E0                 jmp     loc_57D
.text:000003E5 ; ---------------------------------------------------------------------------
.text:000003E5
.text:000003E5 loc_3E5:                                ; CODE XREF: Xz_WriteFooter(x,x)+6Bj
.text:000003E5                 mov     [ebp+var_48], 0
.text:000003EC                 jmp     short loc_3F7
.text:000003EE ; ---------------------------------------------------------------------------
.text:000003EE
.text:000003EE loc_3EE:                                ; CODE XREF: Xz_WriteFooter(x,x):loc_47Cj
.text:000003EE                 mov     ecx, [ebp+var_48]
.text:000003F1                 add     ecx, 1
.text:000003F4                 mov     [ebp+var_48], ecx
.text:000003F7
.text:000003F7 loc_3F7:                                ; CODE XREF: Xz_WriteFooter(x,x)+7Cj
.text:000003F7                 mov     edx, [ebp+arg_0]
.text:000003FA                 mov     eax, [ebp+var_48]
.text:000003FD                 cmp     eax, [edx+4]
.text:00000400                 jnb     short loc_481
.text:00000402                 mov     ecx, [ebp+var_48]
.text:00000405                 shl     ecx, 4
.text:00000408                 mov     edx, [ebp+arg_0]
.text:0000040B                 add     ecx, [edx+0Ch]
.text:0000040E                 mov     [ebp+var_50], ecx
.text:00000411                 mov     eax, [ebp+var_50]
.text:00000414                 mov     ecx, [eax+0Ch]
.text:00000417                 push    ecx
.text:00000418                 mov     edx, [eax+8]
.text:0000041B                 push    edx
.text:0000041C                 lea     eax, [ebp+var_28]
.text:0000041F                 push    eax
.text:00000420                 call    _Xz_WriteVarInt@12 ; Xz_WriteVarInt(x,x,x)
.text:00000425                 mov     [ebp+var_44], eax
.text:00000428                 mov     ecx, [ebp+var_50]
.text:0000042B                 mov     edx, [ecx+4]
.text:0000042E                 push    edx
.text:0000042F                 mov     eax, [ecx]
.text:00000431                 push    eax
.text:00000432                 mov     ecx, [ebp+var_44]
.text:00000435                 lea     edx, [ebp+ecx+var_28]
.text:00000439                 push    edx
.text:0000043A                 call    _Xz_WriteVarInt@12 ; Xz_WriteVarInt(x,x,x)
.text:0000043F                 add     eax, [ebp+var_44]
.text:00000442                 mov     [ebp+var_44], eax
.text:00000445                 mov     eax, [ebp+var_44]
.text:00000448                 xor     ecx, ecx
.text:0000044A                 add     eax, [ebp+var_34]
.text:0000044D                 adc     ecx, [ebp+var_30]
.text:00000450                 mov     [ebp+var_34], eax
.text:00000453                 mov     [ebp+var_30], ecx
.text:00000456                 lea     edx, [ebp+var_3C]
.text:00000459                 push    edx
.text:0000045A                 mov     eax, [ebp+var_44]
.text:0000045D                 push    eax
.text:0000045E                 lea     ecx, [ebp+var_28]
.text:00000461                 push    ecx
.text:00000462                 mov     edx, [ebp+arg_4]
.text:00000465                 push    edx
.text:00000466                 call    _WriteBytesAndCrc@16 ; WriteBytesAndCrc(x,x,x,x)
.text:0000046B                 mov     [ebp+var_54], eax
.text:0000046E                 cmp     [ebp+var_54], 0
.text:00000472                 jz      short loc_47C
.text:00000474                 mov     eax, [ebp+var_54]
.text:00000477                 jmp     loc_57D
.text:0000047C ; ---------------------------------------------------------------------------
.text:0000047C
.text:0000047C loc_47C:                                ; CODE XREF: Xz_WriteFooter(x,x)+102j
.text:0000047C                 jmp     loc_3EE
.text:00000481 ; ---------------------------------------------------------------------------
.text:00000481
.text:00000481 loc_481:                                ; CODE XREF: Xz_WriteFooter(x,x)+90j
.text:00000481                 mov     eax, [ebp+var_34]
.text:00000484                 and     eax, 3
.text:00000487                 mov     [ebp+var_44], eax
.text:0000048A                 jz      short loc_4DD
.text:0000048C                 mov     byte ptr [ebp+var_28+2], 0
.text:00000490                 mov     cl, byte ptr [ebp+var_28+2]
.text:00000493                 mov     byte ptr [ebp+var_28+1], cl
.text:00000496                 mov     dl, byte ptr [ebp+var_28+1]
.text:00000499                 mov     byte ptr [ebp+var_28], dl
.text:0000049C                 lea     eax, [ebp+var_3C]
.text:0000049F                 push    eax
.text:000004A0                 mov     ecx, 4
.text:000004A5                 sub     ecx, [ebp+var_44]
.text:000004A8                 push    ecx
.text:000004A9                 lea     edx, [ebp+var_28]
.text:000004AC                 push    edx
.text:000004AD                 mov     eax, [ebp+arg_4]
.text:000004B0                 push    eax
.text:000004B1                 call    _WriteBytesAndCrc@16 ; WriteBytesAndCrc(x,x,x,x)
.text:000004B6                 mov     [ebp+var_58], eax
.text:000004B9                 cmp     [ebp+var_58], 0
.text:000004BD                 jz      short loc_4C7
.text:000004BF                 mov     eax, [ebp+var_58]
.text:000004C2                 jmp     loc_57D
.text:000004C7 ; ---------------------------------------------------------------------------
.text:000004C7
.text:000004C7 loc_4C7:                                ; CODE XREF: Xz_WriteFooter(x,x)+14Dj
.text:000004C7                 mov     ecx, 4
.text:000004CC                 sub     ecx, [ebp+var_44]
.text:000004CF                 xor     edx, edx
.text:000004D1                 add     ecx, [ebp+var_34]
.text:000004D4                 adc     edx, [ebp+var_30]
.text:000004D7                 mov     [ebp+var_34], ecx
.text:000004DA                 mov     [ebp+var_30], edx
.text:000004DD
.text:000004DD loc_4DD:                                ; CODE XREF: Xz_WriteFooter(x,x)+11Aj
.text:000004DD                 mov     eax, [ebp+var_3C]
.text:000004E0                 xor     eax, 0FFFFFFFFh
.text:000004E3                 mov     [ebp+var_28], eax
.text:000004E6                 push    4
.text:000004E8                 lea     ecx, [ebp+var_28]
.text:000004EB                 push    ecx
.text:000004EC                 mov     edx, [ebp+arg_4]
.text:000004EF                 push    edx
.text:000004F0                 call    _WriteBytes@12  ; WriteBytes(x,x,x)
.text:000004F5                 mov     [ebp+var_5C], eax
.text:000004F8                 cmp     [ebp+var_5C], 0
.text:000004FC                 jz      short loc_503
.text:000004FE                 mov     eax, [ebp+var_5C]
.text:00000501                 jmp     short loc_57D
.text:00000503 ; ---------------------------------------------------------------------------
.text:00000503
.text:00000503 loc_503:                                ; CODE XREF: Xz_WriteFooter(x,x)+18Cj
.text:00000503                 mov     eax, [ebp+var_34]
.text:00000506                 add     eax, 4
.text:00000509                 mov     ecx, [ebp+var_30]
.text:0000050C                 adc     ecx, 0
.text:0000050F                 mov     [ebp+var_34], eax
.text:00000512                 mov     [ebp+var_30], ecx
.text:00000515                 mov     eax, [ebp+var_34]
.text:00000518                 mov     edx, [ebp+var_30]
.text:0000051B                 mov     cl, 2
.text:0000051D                 call    __aullshr
.text:00000522                 sub     eax, 1
.text:00000525                 sbb     edx, 0
.text:00000528                 mov     [ebp+var_60], eax
.text:0000052B                 mov     edx, [ebp+var_60]
.text:0000052E                 mov     [ebp+var_24], edx
.text:00000531                 mov     eax, [ebp+arg_0]
.text:00000534                 movzx   ecx, word ptr [eax]
.text:00000537                 sar     ecx, 8
.text:0000053A                 mov     [ebp+var_20], cl
.text:0000053D                 mov     edx, [ebp+arg_0]
.text:00000540                 movzx   eax, word ptr [edx]
.text:00000543                 and     eax, 0FFh
.text:00000548                 mov     [ebp+var_1F], al
.text:0000054B                 lea     ecx, [ebp+var_24]
.text:0000054E                 mov     edx, 6
.text:00000553                 call    @CrcCalc@8      ; CrcCalc(x,x)
.text:00000558                 mov     [ebp+var_28], eax
.text:0000055B                 push    2               ; Size
.text:0000055D                 push    offset _XZ_FOOTER_SIG ; Src
.text:00000562                 lea     ecx, [ebp+Dst]
.text:00000565                 push    ecx             ; Dst
.text:00000566                 call    _memcpy
.text:0000056B                 add     esp, 0Ch
.text:0000056E                 push    0Ch
.text:00000570                 lea     edx, [ebp+var_28]
.text:00000573                 push    edx
.text:00000574                 mov     eax, [ebp+arg_4]
.text:00000577                 push    eax
.text:00000578                 call    _WriteBytes@12  ; WriteBytes(x,x,x)
.text:0000057D
.text:0000057D loc_57D:                                ; CODE XREF: Xz_WriteFooter(x,x)+70j
.text:0000057D                                         ; Xz_WriteFooter(x,x)+107j ...
.text:0000057D                 push    edx
.text:0000057E                 mov     ecx, ebp
.text:00000580                 push    eax
.text:00000581                 lea     edx, $LN14
.text:00000587                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000058C                 pop     eax
.text:0000058D                 pop     edx
.text:0000058E                 pop     edi
.text:0000058F                 mov     ecx, [ebp+var_4]
.text:00000592                 xor     ecx, ebp
.text:00000594                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000599                 add     esp, 60h
.text:0000059C                 cmp     ebp, esp
.text:0000059E                 call    __RTC_CheckEsp
.text:000005A3                 mov     esp, ebp
.text:000005A5                 pop     ebp
.text:000005A6                 retn    8
.text:000005A6 _Xz_WriteFooter@8 endp
.text:000005A6
.text:000005A6 ; ---------------------------------------------------------------------------
.text:000005A9                 align 4
.text:000005AC $LN14           dd 2                    ; DATA XREF: Xz_WriteFooter(x,x)+211o
.text:000005B0                 dd offset $LN13
.text:000005B4 $LN13           dd 0FFFFFFD8h, 20h      ; DATA XREF: .text:000005B0o
.text:000005BC                 dd offset $LN11_0
.text:000005C0                 dd 0FFFFFFC4h, 4
.text:000005C8                 dd offset $LN12_0
.text:000005CC $LN12_0         dd 637263h              ; DATA XREF: .text:000005C8o
.text:000005D0 $LN11_0         dd 667562h, 3 dup(0CCCCCCCCh) ; DATA XREF: .text:000005BCo
.text:000005E0
.text:000005E0 ; =============== S U B R O U T I N E =======================================
.text:000005E0
.text:000005E0 ; Attributes: bp-based frame
.text:000005E0
.text:000005E0 ; __stdcall WriteBytesAndCrc(x, x, x, x)
.text:000005E0 _WriteBytesAndCrc@16 proc near          ; CODE XREF: Xz_WriteFooter(x,x)+5Fp
.text:000005E0                                         ; Xz_WriteFooter(x,x)+F6p ...
.text:000005E0
.text:000005E0 arg_0           = dword ptr  8
.text:000005E0 arg_4           = dword ptr  0Ch
.text:000005E0 arg_8           = dword ptr  10h
.text:000005E0 arg_C           = dword ptr  14h
.text:000005E0
.text:000005E0                 push    ebp
.text:000005E1                 mov     ebp, esp
.text:000005E3                 mov     eax, [ebp+arg_8]
.text:000005E6                 push    eax
.text:000005E7                 mov     edx, [ebp+arg_4]
.text:000005EA                 mov     ecx, [ebp+arg_C]
.text:000005ED                 mov     ecx, [ecx]
.text:000005EF                 call    @CrcUpdate@12   ; CrcUpdate(x,x,x)
.text:000005F4                 mov     edx, [ebp+arg_C]
.text:000005F7                 mov     [edx], eax
.text:000005F9                 mov     eax, [ebp+arg_8]
.text:000005FC                 push    eax
.text:000005FD                 mov     ecx, [ebp+arg_4]
.text:00000600                 push    ecx
.text:00000601                 mov     edx, [ebp+arg_0]
.text:00000604                 push    edx
.text:00000605                 call    _WriteBytes@12  ; WriteBytes(x,x,x)
.text:0000060A                 cmp     ebp, esp
.text:0000060C                 call    __RTC_CheckEsp
.text:00000611                 pop     ebp
.text:00000612                 retn    10h
.text:00000612 _WriteBytesAndCrc@16 endp
.text:00000612
.text:00000612 ; ---------------------------------------------------------------------------
.text:00000615                 align 10h
.text:00000620
.text:00000620 ; =============== S U B R O U T I N E =======================================
.text:00000620
.text:00000620 ; Attributes: bp-based frame
.text:00000620
.text:00000620 ; __stdcall Xz_AddIndexRecord(x, x, x, x, x, x)
.text:00000620                 public _Xz_AddIndexRecord@24
.text:00000620 _Xz_AddIndexRecord@24 proc near         ; CODE XREF: Xz_Compress(x,x,x,x,x,x)+3FBp
.text:00000620
.text:00000620 var_10          = dword ptr -10h
.text:00000620 Dst             = dword ptr -0Ch
.text:00000620 var_8           = dword ptr -8
.text:00000620 var_4           = dword ptr -4
.text:00000620 arg_0           = dword ptr  8
.text:00000620 arg_4           = dword ptr  0Ch
.text:00000620 arg_8           = dword ptr  10h
.text:00000620 arg_C           = dword ptr  14h
.text:00000620 arg_10          = dword ptr  18h
.text:00000620 arg_14          = dword ptr  1Ch
.text:00000620
.text:00000620                 push    ebp
.text:00000621                 mov     ebp, esp
.text:00000623                 sub     esp, 10h
.text:00000626                 push    esi
.text:00000627                 mov     eax, 0CCCCCCCCh
.text:0000062C                 mov     [ebp+var_10], eax
.text:0000062F                 mov     [ebp+Dst], eax
.text:00000632                 mov     [ebp+var_8], eax
.text:00000635                 mov     [ebp+var_4], eax
.text:00000638                 mov     eax, [ebp+arg_0]
.text:0000063B                 cmp     dword ptr [eax+0Ch], 0
.text:0000063F                 jz      short loc_653
.text:00000641                 mov     ecx, [ebp+arg_0]
.text:00000644                 mov     edx, [ebp+arg_0]
.text:00000647                 mov     eax, [ecx+8]
.text:0000064A                 cmp     eax, [edx+4]
.text:0000064D                 jnz     loc_6EE
.text:00000653
.text:00000653 loc_653:                                ; CODE XREF: Xz_AddIndexRecord(x,x,x,x,x,x)+1Fj
.text:00000653                 mov     ecx, [ebp+arg_0]
.text:00000656                 mov     edx, [ecx+4]
.text:00000659                 lea     eax, [edx+edx+2]
.text:0000065D                 mov     [ebp+var_4], eax
.text:00000660                 mov     ecx, [ebp+var_4]
.text:00000663                 shl     ecx, 4
.text:00000666                 mov     [ebp+var_8], ecx
.text:00000669                 mov     edx, [ebp+var_8]
.text:0000066C                 shr     edx, 4
.text:0000066F                 cmp     edx, [ebp+var_4]
.text:00000672                 jz      short loc_67E
.text:00000674                 mov     eax, 2
.text:00000679                 jmp     loc_72E
.text:0000067E ; ---------------------------------------------------------------------------
.text:0000067E
.text:0000067E loc_67E:                                ; CODE XREF: Xz_AddIndexRecord(x,x,x,x,x,x)+52j
.text:0000067E                 mov     esi, esp
.text:00000680                 mov     eax, [ebp+var_8]
.text:00000683                 push    eax
.text:00000684                 mov     ecx, [ebp+arg_14]
.text:00000687                 push    ecx
.text:00000688                 mov     edx, [ebp+arg_14]
.text:0000068B                 mov     eax, [edx]
.text:0000068D                 call    eax
.text:0000068F                 cmp     esi, esp
.text:00000691                 call    __RTC_CheckEsp
.text:00000696                 mov     [ebp+Dst], eax
.text:00000699                 cmp     [ebp+Dst], 0
.text:0000069D                 jnz     short loc_6A9
.text:0000069F                 mov     eax, 2
.text:000006A4                 jmp     loc_72E
.text:000006A9 ; ---------------------------------------------------------------------------
.text:000006A9
.text:000006A9 loc_6A9:                                ; CODE XREF: Xz_AddIndexRecord(x,x,x,x,x,x)+7Dj
.text:000006A9                 mov     ecx, [ebp+arg_0]
.text:000006AC                 cmp     dword ptr [ecx+4], 0
.text:000006B0                 jz      short loc_6DC
.text:000006B2                 mov     edx, [ebp+arg_0]
.text:000006B5                 mov     eax, [edx+4]
.text:000006B8                 shl     eax, 4
.text:000006BB                 push    eax             ; Size
.text:000006BC                 mov     ecx, [ebp+arg_0]
.text:000006BF                 mov     edx, [ecx+0Ch]
.text:000006C2                 push    edx             ; Src
.text:000006C3                 mov     eax, [ebp+Dst]
.text:000006C6                 push    eax             ; Dst
.text:000006C7                 call    _memcpy
.text:000006CC                 add     esp, 0Ch
.text:000006CF                 mov     ecx, [ebp+arg_14]
.text:000006D2                 push    ecx
.text:000006D3                 mov     edx, [ebp+arg_0]
.text:000006D6                 push    edx
.text:000006D7                 call    _Xz_Free@8      ; Xz_Free(x,x)
.text:000006DC
.text:000006DC loc_6DC:                                ; CODE XREF: Xz_AddIndexRecord(x,x,x,x,x,x)+90j
.text:000006DC                 mov     eax, [ebp+arg_0]
.text:000006DF                 mov     ecx, [ebp+Dst]
.text:000006E2                 mov     [eax+0Ch], ecx
.text:000006E5                 mov     edx, [ebp+arg_0]
.text:000006E8                 mov     eax, [ebp+var_4]
.text:000006EB                 mov     [edx+8], eax
.text:000006EE
.text:000006EE loc_6EE:                                ; CODE XREF: Xz_AddIndexRecord(x,x,x,x,x,x)+2Dj
.text:000006EE                 mov     ecx, [ebp+arg_0]
.text:000006F1                 mov     edx, [ecx+4]
.text:000006F4                 shl     edx, 4
.text:000006F7                 mov     eax, [ebp+arg_0]
.text:000006FA                 add     edx, [eax+0Ch]
.text:000006FD                 mov     [ebp+var_10], edx
.text:00000700                 mov     ecx, [ebp+arg_0]
.text:00000703                 mov     edx, [ecx+4]
.text:00000706                 add     edx, 1
.text:00000709                 mov     eax, [ebp+arg_0]
.text:0000070C                 mov     [eax+4], edx
.text:0000070F                 mov     ecx, [ebp+var_10]
.text:00000712                 mov     edx, [ebp+arg_C]
.text:00000715                 mov     [ecx+8], edx
.text:00000718                 mov     eax, [ebp+arg_10]
.text:0000071B                 mov     [ecx+0Ch], eax
.text:0000071E                 mov     ecx, [ebp+var_10]
.text:00000721                 mov     edx, [ebp+arg_4]
.text:00000724                 mov     [ecx], edx
.text:00000726                 mov     eax, [ebp+arg_8]
.text:00000729                 mov     [ecx+4], eax
.text:0000072C                 xor     eax, eax
.text:0000072E
.text:0000072E loc_72E:                                ; CODE XREF: Xz_AddIndexRecord(x,x,x,x,x,x)+59j
.text:0000072E                                         ; Xz_AddIndexRecord(x,x,x,x,x,x)+84j
.text:0000072E                 pop     esi
.text:0000072F                 add     esp, 10h
.text:00000732                 cmp     ebp, esp
.text:00000734                 call    __RTC_CheckEsp
.text:00000739                 mov     esp, ebp
.text:0000073B                 pop     ebp
.text:0000073C                 retn    18h
.text:0000073C _Xz_AddIndexRecord@24 endp
.text:0000073C
.text:0000073C ; ---------------------------------------------------------------------------
.text:0000073F                 align 10h
.text:00000740
.text:00000740 ; =============== S U B R O U T I N E =======================================
.text:00000740
.text:00000740 ; Attributes: bp-based frame
.text:00000740
.text:00000740 ; __stdcall XzProps_Init(x)
.text:00000740                 public _XzProps_Init@4
.text:00000740 _XzProps_Init@4 proc near
.text:00000740
.text:00000740 arg_0           = dword ptr  8
.text:00000740
.text:00000740                 push    ebp
.text:00000741                 mov     ebp, esp
.text:00000743                 mov     eax, [ebp+arg_0]
.text:00000746                 mov     dword ptr [eax], 0
.text:0000074C                 mov     ecx, [ebp+arg_0]
.text:0000074F                 mov     dword ptr [ecx+4], 0
.text:00000756                 mov     edx, [ebp+arg_0]
.text:00000759                 mov     dword ptr [edx+8], 1
.text:00000760                 pop     ebp
.text:00000761                 retn    4
.text:00000761 _XzProps_Init@4 endp
.text:00000761
.text:00000761 ; ---------------------------------------------------------------------------
.text:00000764                 align 10h
.text:00000770
.text:00000770 ; =============== S U B R O U T I N E =======================================
.text:00000770
.text:00000770 ; Attributes: bp-based frame
.text:00000770
.text:00000770 ; __stdcall XzFilterProps_Init(x)
.text:00000770                 public _XzFilterProps_Init@4
.text:00000770 _XzFilterProps_Init@4 proc near
.text:00000770
.text:00000770 arg_0           = dword ptr  8
.text:00000770
.text:00000770                 push    ebp
.text:00000771                 mov     ebp, esp
.text:00000773                 mov     eax, [ebp+arg_0]
.text:00000776                 mov     dword ptr [eax], 0
.text:0000077C                 mov     ecx, [ebp+arg_0]
.text:0000077F                 mov     dword ptr [ecx+4], 0
.text:00000786                 mov     edx, [ebp+arg_0]
.text:00000789                 mov     dword ptr [edx+8], 0
.text:00000790                 mov     eax, [ebp+arg_0]
.text:00000793                 mov     dword ptr [eax+0Ch], 0
.text:0000079A                 pop     ebp
.text:0000079B                 retn    4
.text:0000079B _XzFilterProps_Init@4 endp
.text:0000079B
.text:0000079B ; ---------------------------------------------------------------------------
.text:0000079E                 align 10h
.text:000007A0
.text:000007A0 ; =============== S U B R O U T I N E =======================================
.text:000007A0
.text:000007A0 ; Attributes: bp-based frame
.text:000007A0
.text:000007A0 ; __stdcall Xz_Encode(x, x, x, x)
.text:000007A0                 public _Xz_Encode@16
.text:000007A0 _Xz_Encode@16   proc near
.text:000007A0
.text:000007A0 var_64          = byte ptr -64h
.text:000007A0 var_60          = byte ptr -60h
.text:000007A0 var_20          = byte ptr -20h
.text:000007A0 var_4           = dword ptr -4
.text:000007A0 arg_0           = dword ptr  8
.text:000007A0 arg_4           = dword ptr  0Ch
.text:000007A0 arg_8           = dword ptr  10h
.text:000007A0 arg_C           = dword ptr  14h
.text:000007A0
.text:000007A0                 push    ebp
.text:000007A1                 mov     ebp, esp
.text:000007A3                 sub     esp, 64h
.text:000007A6                 push    edi
.text:000007A7                 lea     edi, [ebp+var_64]
.text:000007AA                 mov     ecx, 19h
.text:000007AF                 mov     eax, 0CCCCCCCCh
.text:000007B4                 rep stosd
.text:000007B6                 lea     eax, [ebp+var_20]
.text:000007B9                 push    eax
.text:000007BA                 call    _Xz_Construct@4 ; Xz_Construct(x)
.text:000007BF                 push    offset _g_BigAlloc
.text:000007C4                 push    offset _g_Alloc
.text:000007C9                 lea     ecx, [ebp+var_60]
.text:000007CC                 push    ecx
.text:000007CD                 call    _Lzma2WithFilters_Construct@12 ; Lzma2WithFilters_Construct(x,x,x)
.text:000007D2                 lea     edx, [ebp+var_60]
.text:000007D5                 push    edx
.text:000007D6                 call    _Lzma2WithFilters_Create@4 ; Lzma2WithFilters_Create(x)
.text:000007DB                 mov     [ebp+var_4], eax
.text:000007DE                 cmp     [ebp+var_4], 0
.text:000007E2                 jnz     short loc_804
.text:000007E4                 mov     eax, [ebp+arg_C]
.text:000007E7                 push    eax
.text:000007E8                 mov     ecx, [ebp+arg_8]
.text:000007EB                 push    ecx
.text:000007EC                 mov     edx, [ebp+arg_4]
.text:000007EF                 push    edx
.text:000007F0                 mov     eax, [ebp+arg_0]
.text:000007F3                 push    eax
.text:000007F4                 lea     ecx, [ebp+var_60]
.text:000007F7                 push    ecx
.text:000007F8                 lea     edx, [ebp+var_20]
.text:000007FB                 push    edx
.text:000007FC                 call    _Xz_Compress@24 ; Xz_Compress(x,x,x,x,x,x)
.text:00000801                 mov     [ebp+var_4], eax
.text:00000804
.text:00000804 loc_804:                                ; CODE XREF: Xz_Encode(x,x,x,x)+42j
.text:00000804                 lea     eax, [ebp+var_60]
.text:00000807                 push    eax
.text:00000808                 call    _Lzma2WithFilters_Free@4 ; Lzma2WithFilters_Free(x)
.text:0000080D                 push    offset _g_Alloc
.text:00000812                 lea     ecx, [ebp+var_20]
.text:00000815                 push    ecx
.text:00000816                 call    _Xz_Free@8      ; Xz_Free(x,x)
.text:0000081B                 mov     eax, [ebp+var_4]
.text:0000081E                 push    edx
.text:0000081F                 mov     ecx, ebp
.text:00000821                 push    eax
.text:00000822                 lea     edx, $LN7
.text:00000828                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000082D                 pop     eax
.text:0000082E                 pop     edx
.text:0000082F                 pop     edi
.text:00000830                 add     esp, 64h
.text:00000833                 cmp     ebp, esp
.text:00000835                 call    __RTC_CheckEsp
.text:0000083A                 mov     esp, ebp
.text:0000083C                 pop     ebp
.text:0000083D                 retn    10h
.text:0000083D _Xz_Encode@16   endp
.text:0000083D
.text:0000083D ; ---------------------------------------------------------------------------
.text:00000840 $LN7            dd 2                    ; DATA XREF: Xz_Encode(x,x,x,x)+82o
.text:00000844                 dd offset $LN6
.text:00000848 $LN6            dd 0FFFFFFE0h, 18h      ; DATA XREF: .text:00000844o
.text:00000850                 dd offset $LN4_0        ; "xz"
.text:00000854                 dd 0FFFFFFA0h, 38h
.text:0000085C                 dd offset $LN5_0        ; "lzmaf"
.text:00000860 $LN5_0          db 'lzmaf',0            ; DATA XREF: .text:0000085Co
.text:00000866 $LN4_0          db 'xz',0               ; DATA XREF: .text:00000850o
.text:00000869                 align 10h
.text:00000870
.text:00000870 ; =============== S U B R O U T I N E =======================================
.text:00000870
.text:00000870 ; Attributes: bp-based frame
.text:00000870
.text:00000870 ; __stdcall Lzma2WithFilters_Construct(x, x, x)
.text:00000870 _Lzma2WithFilters_Construct@12 proc near ; CODE XREF: Xz_Encode(x,x,x,x)+2Dp
.text:00000870
.text:00000870 arg_0           = dword ptr  8
.text:00000870 arg_4           = dword ptr  0Ch
.text:00000870 arg_8           = dword ptr  10h
.text:00000870
.text:00000870                 push    ebp
.text:00000871                 mov     ebp, esp
.text:00000873                 mov     eax, [ebp+arg_0]
.text:00000876                 mov     ecx, [ebp+arg_4]
.text:00000879                 mov     [eax+30h], ecx
.text:0000087C                 mov     edx, [ebp+arg_0]
.text:0000087F                 mov     eax, [ebp+arg_8]
.text:00000882                 mov     [edx+34h], eax
.text:00000885                 mov     ecx, [ebp+arg_0]
.text:00000888                 mov     dword ptr [ecx], 0
.text:0000088E                 mov     edx, [ebp+arg_0]
.text:00000891                 add     edx, 4
.text:00000894                 push    edx
.text:00000895                 call    _SeqInFilter_Construct@4 ; SeqInFilter_Construct(x)
.text:0000089A                 cmp     ebp, esp
.text:0000089C                 call    __RTC_CheckEsp
.text:000008A1                 pop     ebp
.text:000008A2                 retn    0Ch
.text:000008A2 _Lzma2WithFilters_Construct@12 endp
.text:000008A2
.text:000008A2 ; ---------------------------------------------------------------------------
.text:000008A5                 align 10h
.text:000008B0
.text:000008B0 ; =============== S U B R O U T I N E =======================================
.text:000008B0
.text:000008B0 ; Attributes: bp-based frame
.text:000008B0
.text:000008B0 ; __stdcall SeqInFilter_Construct(x)
.text:000008B0 _SeqInFilter_Construct@4 proc near      ; CODE XREF: Lzma2WithFilters_Construct(x,x,x)+25p
.text:000008B0
.text:000008B0 arg_0           = dword ptr  8
.text:000008B0
.text:000008B0                 push    ebp
.text:000008B1                 mov     ebp, esp
.text:000008B3                 mov     eax, [ebp+arg_0]
.text:000008B6                 mov     dword ptr [eax+1Ch], 0
.text:000008BD                 mov     ecx, [ebp+arg_0]
.text:000008C0                 mov     dword ptr [ecx], offset _SeqInFilter_Read@12 ; SeqInFilter_Read(x,x,x)
.text:000008C6                 pop     ebp
.text:000008C7                 retn    4
.text:000008C7 _SeqInFilter_Construct@4 endp
.text:000008C7
.text:000008C7 ; ---------------------------------------------------------------------------
.text:000008CA                 align 10h
.text:000008D0
.text:000008D0 ; =============== S U B R O U T I N E =======================================
.text:000008D0
.text:000008D0 ; Attributes: bp-based frame
.text:000008D0
.text:000008D0 ; __stdcall SeqInFilter_Read(x, x, x)
.text:000008D0 _SeqInFilter_Read@12 proc near          ; DATA XREF: SeqInFilter_Construct(x)+10o
.text:000008D0
.text:000008D0 var_28          = dword ptr -28h
.text:000008D0 var_20          = byte ptr -20h
.text:000008D0 var_14          = dword ptr -14h
.text:000008D0 var_C           = dword ptr -0Ch
.text:000008D0 var_8           = dword ptr -8
.text:000008D0 var_4           = dword ptr -4
.text:000008D0 arg_0           = dword ptr  8
.text:000008D0 arg_4           = dword ptr  0Ch
.text:000008D0 arg_8           = dword ptr  10h
.text:000008D0
.text:000008D0                 push    ebp
.text:000008D1                 mov     ebp, esp
.text:000008D3                 sub     esp, 28h
.text:000008D6                 push    esi
.text:000008D7                 push    edi
.text:000008D8                 lea     edi, [ebp+var_28]
.text:000008DB                 mov     ecx, 0Ah
.text:000008E0                 mov     eax, 0CCCCCCCCh
.text:000008E5                 rep stosd
.text:000008E7                 mov     eax, [ebp+arg_0]
.text:000008EA                 mov     [ebp+var_4], eax
.text:000008ED                 mov     ecx, [ebp+arg_8]
.text:000008F0                 mov     edx, [ecx]
.text:000008F2                 mov     [ebp+var_8], edx
.text:000008F5                 cmp     [ebp+var_8], 0
.text:000008F9                 jnz     short loc_902
.text:000008FB                 xor     eax, eax
.text:000008FD                 jmp     loc_A07
.text:00000902 ; ---------------------------------------------------------------------------
.text:00000902
.text:00000902 loc_902:                                ; CODE XREF: SeqInFilter_Read(x,x,x)+29j
.text:00000902                 mov     eax, [ebp+arg_8]
.text:00000905                 mov     dword ptr [eax], 0
.text:0000090B
.text:0000090B loc_90B:                                ; CODE XREF: SeqInFilter_Read(x,x,x):loc_A02j
.text:0000090B                 mov     ecx, [ebp+var_4]
.text:0000090E                 cmp     dword ptr [ecx+28h], 0
.text:00000912                 jnz     short loc_982
.text:00000914                 mov     edx, [ebp+var_4]
.text:00000917                 mov     eax, [ebp+var_4]
.text:0000091A                 mov     ecx, [edx+20h]
.text:0000091D                 cmp     ecx, [eax+24h]
.text:00000920                 jnz     short loc_982
.text:00000922                 mov     edx, [ebp+var_4]
.text:00000925                 mov     dword ptr [edx+20h], 0
.text:0000092C                 mov     eax, [ebp+var_4]
.text:0000092F                 mov     dword ptr [eax+24h], 100000h
.text:00000936                 mov     ecx, [ebp+var_4]
.text:00000939                 add     ecx, 24h ; '$'
.text:0000093C                 mov     esi, esp
.text:0000093E                 push    ecx
.text:0000093F                 mov     edx, [ebp+var_4]
.text:00000942                 mov     eax, [edx+1Ch]
.text:00000945                 push    eax
.text:00000946                 mov     ecx, [ebp+var_4]
.text:00000949                 mov     edx, [ecx+4]
.text:0000094C                 push    edx
.text:0000094D                 mov     eax, [ebp+var_4]
.text:00000950                 mov     ecx, [eax+4]
.text:00000953                 mov     edx, [ecx]
.text:00000955                 call    edx
.text:00000957                 cmp     esi, esp
.text:00000959                 call    __RTC_CheckEsp
.text:0000095E                 mov     [ebp+var_C], eax
.text:00000961                 cmp     [ebp+var_C], 0
.text:00000965                 jz      short loc_96F
.text:00000967                 mov     eax, [ebp+var_C]
.text:0000096A                 jmp     loc_A07
.text:0000096F ; ---------------------------------------------------------------------------
.text:0000096F
.text:0000096F loc_96F:                                ; CODE XREF: SeqInFilter_Read(x,x,x)+95j
.text:0000096F                 mov     eax, [ebp+var_4]
.text:00000972                 cmp     dword ptr [eax+24h], 0
.text:00000976                 jnz     short loc_982
.text:00000978                 mov     ecx, [ebp+var_4]
.text:0000097B                 mov     dword ptr [ecx+28h], 1
.text:00000982
.text:00000982 loc_982:                                ; CODE XREF: SeqInFilter_Read(x,x,x)+42j
.text:00000982                                         ; SeqInFilter_Read(x,x,x)+50j ...
.text:00000982                 mov     edx, [ebp+var_4]
.text:00000985                 mov     eax, [ebp+var_4]
.text:00000988                 mov     ecx, [edx+24h]
.text:0000098B                 sub     ecx, [eax+20h]
.text:0000098E                 mov     [ebp+var_14], ecx
.text:00000991                 mov     edx, [ebp+arg_8]
.text:00000994                 mov     eax, [ebp+var_8]
.text:00000997                 mov     [edx], eax
.text:00000999                 mov     esi, esp
.text:0000099B                 lea     ecx, [ebp+var_20]
.text:0000099E                 push    ecx
.text:0000099F                 push    0
.text:000009A1                 mov     edx, [ebp+var_4]
.text:000009A4                 mov     eax, [edx+28h]
.text:000009A7                 push    eax
.text:000009A8                 lea     ecx, [ebp+var_14]
.text:000009AB                 push    ecx
.text:000009AC                 mov     edx, [ebp+var_4]
.text:000009AF                 mov     eax, [edx+1Ch]
.text:000009B2                 mov     ecx, [ebp+var_4]
.text:000009B5                 add     eax, [ecx+20h]
.text:000009B8                 push    eax
.text:000009B9                 mov     edx, [ebp+arg_8]
.text:000009BC                 push    edx
.text:000009BD                 mov     eax, [ebp+arg_4]
.text:000009C0                 push    eax
.text:000009C1                 mov     ecx, [ebp+var_4]
.text:000009C4                 mov     edx, [ecx+8]
.text:000009C7                 push    edx
.text:000009C8                 mov     eax, [ebp+var_4]
.text:000009CB                 mov     ecx, [eax+18h]
.text:000009CE                 call    ecx
.text:000009D0                 cmp     esi, esp
.text:000009D2                 call    __RTC_CheckEsp
.text:000009D7                 mov     [ebp+var_28], eax
.text:000009DA                 mov     edx, [ebp+var_4]
.text:000009DD                 mov     eax, [edx+20h]
.text:000009E0                 add     eax, [ebp+var_14]
.text:000009E3                 mov     ecx, [ebp+var_4]
.text:000009E6                 mov     [ecx+20h], eax
.text:000009E9                 mov     edx, [ebp+arg_8]
.text:000009EC                 cmp     dword ptr [edx], 0
.text:000009EF                 jnz     short loc_9FD
.text:000009F1                 cmp     [ebp+var_14], 0
.text:000009F5                 jz      short loc_9FD
.text:000009F7                 cmp     [ebp+var_28], 0
.text:000009FB                 jz      short loc_A02
.text:000009FD
.text:000009FD loc_9FD:                                ; CODE XREF: SeqInFilter_Read(x,x,x)+11Fj
.text:000009FD                                         ; SeqInFilter_Read(x,x,x)+125j
.text:000009FD                 mov     eax, [ebp+var_28]
.text:00000A00                 jmp     short loc_A07
.text:00000A02 ; ---------------------------------------------------------------------------
.text:00000A02
.text:00000A02 loc_A02:                                ; CODE XREF: SeqInFilter_Read(x,x,x)+12Bj
.text:00000A02                 jmp     loc_90B
.text:00000A07 ; ---------------------------------------------------------------------------
.text:00000A07
.text:00000A07 loc_A07:                                ; CODE XREF: SeqInFilter_Read(x,x,x)+2Dj
.text:00000A07                                         ; SeqInFilter_Read(x,x,x)+9Aj ...
.text:00000A07                 push    edx
.text:00000A08                 mov     ecx, ebp
.text:00000A0A                 push    eax
.text:00000A0B                 lea     edx, $LN14_0
.text:00000A11                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000A16                 pop     eax
.text:00000A17                 pop     edx
.text:00000A18                 pop     edi
.text:00000A19                 pop     esi
.text:00000A1A                 add     esp, 28h
.text:00000A1D                 cmp     ebp, esp
.text:00000A1F                 call    __RTC_CheckEsp
.text:00000A24                 mov     esp, ebp
.text:00000A26                 pop     ebp
.text:00000A27                 retn    0Ch
.text:00000A27 _SeqInFilter_Read@12 endp
.text:00000A27
.text:00000A27 ; ---------------------------------------------------------------------------
.text:00000A2A                 align 4
.text:00000A2C $LN14_0         dd 2                    ; DATA XREF: SeqInFilter_Read(x,x,x)+13Bo
.text:00000A30                 dd offset $LN13_0
.text:00000A34 $LN13_0         dd 0FFFFFFECh, 4        ; DATA XREF: .text:00000A30o
.text:00000A3C                 dd offset $LN11_1       ; "srcLen"
.text:00000A40                 dd 0FFFFFFE0h, 4
.text:00000A48                 dd offset $LN12_1       ; "wasFinished"
.text:00000A4C $LN12_1         db 'wasFinished',0      ; DATA XREF: .text:00000A48o
.text:00000A58 $LN11_1         db 'srcLen',0           ; DATA XREF: .text:00000A3Co
.text:00000A5F                 align 10h
.text:00000A60
.text:00000A60 ; =============== S U B R O U T I N E =======================================
.text:00000A60
.text:00000A60 ; Attributes: bp-based frame
.text:00000A60
.text:00000A60 ; __stdcall Lzma2WithFilters_Create(x)
.text:00000A60 _Lzma2WithFilters_Create@4 proc near    ; CODE XREF: Xz_Encode(x,x,x,x)+36p
.text:00000A60
.text:00000A60 arg_0           = dword ptr  8
.text:00000A60
.text:00000A60                 push    ebp
.text:00000A61                 mov     ebp, esp
.text:00000A63                 mov     eax, [ebp+arg_0]
.text:00000A66                 mov     ecx, [eax+34h]
.text:00000A69                 push    ecx
.text:00000A6A                 mov     edx, [ebp+arg_0]
.text:00000A6D                 mov     eax, [edx+30h]
.text:00000A70                 push    eax
.text:00000A71                 call    _Lzma2Enc_Create@8 ; Lzma2Enc_Create(x,x)
.text:00000A76                 mov     ecx, [ebp+arg_0]
.text:00000A79                 mov     [ecx], eax
.text:00000A7B                 mov     edx, [ebp+arg_0]
.text:00000A7E                 cmp     dword ptr [edx], 0
.text:00000A81                 jnz     short loc_A8A
.text:00000A83                 mov     eax, 2
.text:00000A88                 jmp     short loc_A8C
.text:00000A8A ; ---------------------------------------------------------------------------
.text:00000A8A
.text:00000A8A loc_A8A:                                ; CODE XREF: Lzma2WithFilters_Create(x)+21j
.text:00000A8A                 xor     eax, eax
.text:00000A8C
.text:00000A8C loc_A8C:                                ; CODE XREF: Lzma2WithFilters_Create(x)+28j
.text:00000A8C                 cmp     ebp, esp
.text:00000A8E                 call    __RTC_CheckEsp
.text:00000A93                 pop     ebp
.text:00000A94                 retn    4
.text:00000A94 _Lzma2WithFilters_Create@4 endp
.text:00000A94
.text:00000A94 ; ---------------------------------------------------------------------------
.text:00000A97                 align 10h
.text:00000AA0
.text:00000AA0 ; =============== S U B R O U T I N E =======================================
.text:00000AA0
.text:00000AA0 ; Attributes: bp-based frame
.text:00000AA0
.text:00000AA0 ; __stdcall Lzma2WithFilters_Free(x)
.text:00000AA0 _Lzma2WithFilters_Free@4 proc near      ; CODE XREF: Xz_Encode(x,x,x,x)+68p
.text:00000AA0
.text:00000AA0 arg_0           = dword ptr  8
.text:00000AA0
.text:00000AA0                 push    ebp
.text:00000AA1                 mov     ebp, esp
.text:00000AA3                 mov     eax, [ebp+arg_0]
.text:00000AA6                 add     eax, 4
.text:00000AA9                 push    eax
.text:00000AAA                 call    _SeqInFilter_Free@4 ; SeqInFilter_Free(x)
.text:00000AAF                 mov     ecx, [ebp+arg_0]
.text:00000AB2                 cmp     dword ptr [ecx], 0
.text:00000AB5                 jz      short loc_ACB
.text:00000AB7                 mov     edx, [ebp+arg_0]
.text:00000ABA                 mov     eax, [edx]
.text:00000ABC                 push    eax
.text:00000ABD                 call    _Lzma2Enc_Destroy@4 ; Lzma2Enc_Destroy(x)
.text:00000AC2                 mov     ecx, [ebp+arg_0]
.text:00000AC5                 mov     dword ptr [ecx], 0
.text:00000ACB
.text:00000ACB loc_ACB:                                ; CODE XREF: Lzma2WithFilters_Free(x)+15j
.text:00000ACB                 cmp     ebp, esp
.text:00000ACD                 call    __RTC_CheckEsp
.text:00000AD2                 pop     ebp
.text:00000AD3                 retn    4
.text:00000AD3 _Lzma2WithFilters_Free@4 endp
.text:00000AD3
.text:00000AD3 ; ---------------------------------------------------------------------------
.text:00000AD6                 align 10h
.text:00000AE0
.text:00000AE0 ; =============== S U B R O U T I N E =======================================
.text:00000AE0
.text:00000AE0 ; Attributes: bp-based frame
.text:00000AE0
.text:00000AE0 ; __stdcall SeqInFilter_Free(x)
.text:00000AE0 _SeqInFilter_Free@4 proc near           ; CODE XREF: Lzma2WithFilters_Free(x)+Ap
.text:00000AE0
.text:00000AE0 arg_0           = dword ptr  8
.text:00000AE0
.text:00000AE0                 push    ebp
.text:00000AE1                 mov     ebp, esp
.text:00000AE3                 push    esi
.text:00000AE4                 mov     eax, [ebp+arg_0]
.text:00000AE7                 cmp     dword ptr [eax+1Ch], 0
.text:00000AEB                 jz      short loc_B12
.text:00000AED                 mov     esi, esp
.text:00000AEF                 mov     ecx, [ebp+arg_0]
.text:00000AF2                 mov     edx, [ecx+1Ch]
.text:00000AF5                 push    edx
.text:00000AF6                 push    offset _g_Alloc
.text:00000AFB                 call    dword ptr ds:_g_Alloc+4
.text:00000B01                 cmp     esi, esp
.text:00000B03                 call    __RTC_CheckEsp
.text:00000B08                 mov     eax, [ebp+arg_0]
.text:00000B0B                 mov     dword ptr [eax+1Ch], 0
.text:00000B12
.text:00000B12 loc_B12:                                ; CODE XREF: SeqInFilter_Free(x)+Bj
.text:00000B12                 pop     esi
.text:00000B13                 cmp     ebp, esp
.text:00000B15                 call    __RTC_CheckEsp
.text:00000B1A                 pop     ebp
.text:00000B1B                 retn    4
.text:00000B1B _SeqInFilter_Free@4 endp
.text:00000B1B
.text:00000B1B ; ---------------------------------------------------------------------------
.text:00000B1E                 align 10h
.text:00000B20
.text:00000B20 ; =============== S U B R O U T I N E =======================================
.text:00000B20
.text:00000B20 ; Attributes: bp-based frame
.text:00000B20
.text:00000B20 ; __stdcall Xz_Compress(x, x, x, x, x, x)
.text:00000B20 _Xz_Compress@24 proc near               ; CODE XREF: Xz_Encode(x,x,x,x)+5Cp
.text:00000B20
.text:00000B20 var_214         = dword ptr -214h
.text:00000B20 var_210         = dword ptr -210h
.text:00000B20 var_20C         = dword ptr -20Ch
.text:00000B20 var_204         = byte ptr -204h
.text:00000B20 var_180         = dword ptr -180h
.text:00000B20 var_17C         = dword ptr -17Ch
.text:00000B20 var_178         = dword ptr -178h
.text:00000B20 var_174         = dword ptr -174h
.text:00000B20 var_170         = dword ptr -170h
.text:00000B20 var_16C         = dword ptr -16Ch
.text:00000B20 var_168         = dword ptr -168h
.text:00000B20 var_164         = dword ptr -164h
.text:00000B20 var_160         = dword ptr -160h
.text:00000B20 var_15C         = dword ptr -15Ch
.text:00000B20 var_158         = dword ptr -158h
.text:00000B20 var_150         = dword ptr -150h
.text:00000B20 var_14C         = dword ptr -14Ch
.text:00000B20 var_148         = dword ptr -148h
.text:00000B20 var_144         = dword ptr -144h
.text:00000B20 var_140         = byte ptr -140h
.text:00000B20 var_138         = byte ptr -138h
.text:00000B20 var_B0          = dword ptr -0B0h
.text:00000B20 var_AC          = dword ptr -0ACh
.text:00000B20 var_A8          = dword ptr -0A8h
.text:00000B20 var_A4          = dword ptr -0A4h
.text:00000B20 var_98          = dword ptr -98h
.text:00000B20 var_94          = dword ptr -94h
.text:00000B20 var_90          = dword ptr -90h
.text:00000B20 var_8C          = dword ptr -8Ch
.text:00000B20 var_C           = dword ptr -0Ch
.text:00000B20 var_8           = dword ptr -8
.text:00000B20 var_4           = dword ptr -4
.text:00000B20 arg_0           = dword ptr  8
.text:00000B20 arg_4           = dword ptr  0Ch
.text:00000B20 arg_8           = dword ptr  10h
.text:00000B20 arg_C           = dword ptr  14h
.text:00000B20 arg_10          = dword ptr  18h
.text:00000B20 arg_14          = dword ptr  1Ch
.text:00000B20
.text:00000B20                 push    ebp
.text:00000B21                 mov     ebp, esp
.text:00000B23                 sub     esp, 214h
.text:00000B29                 push    edi
.text:00000B2A                 lea     edi, [ebp+var_214]
.text:00000B30                 mov     ecx, 85h ; 'à'
.text:00000B35                 mov     eax, 0CCCCCCCCh
.text:00000B3A                 rep stosd
.text:00000B3C                 mov     eax, dword ptr ds:___security_cookie
.text:00000B41                 xor     eax, ebp
.text:00000B43                 mov     [ebp+var_4], eax
.text:00000B46                 mov     eax, [ebp+arg_10]
.text:00000B49                 movzx   cx, byte ptr [eax+8]
.text:00000B4E                 mov     edx, [ebp+arg_0]
.text:00000B51                 mov     [edx], cx
.text:00000B54                 mov     eax, [ebp+arg_10]
.text:00000B57                 mov     ecx, [eax]
.text:00000B59                 push    ecx
.text:00000B5A                 mov     edx, [ebp+arg_4]
.text:00000B5D                 mov     eax, [edx]
.text:00000B5F                 push    eax
.text:00000B60                 call    _Lzma2Enc_SetProps@8 ; Lzma2Enc_SetProps(x,x)
.text:00000B65                 mov     [ebp+var_8], eax
.text:00000B68                 cmp     [ebp+var_8], 0
.text:00000B6C                 jz      short loc_B76
.text:00000B6E                 mov     eax, [ebp+var_8]
.text:00000B71                 jmp     loc_F44
.text:00000B76 ; ---------------------------------------------------------------------------
.text:00000B76
.text:00000B76 loc_B76:                                ; CODE XREF: Xz_Compress(x,x,x,x,x,x)+4Cj
.text:00000B76                 mov     ecx, [ebp+arg_8]
.text:00000B79                 push    ecx
.text:00000B7A                 mov     edx, [ebp+arg_0]
.text:00000B7D                 movzx   eax, word ptr [edx]
.text:00000B80                 push    eax
.text:00000B81                 call    _Xz_WriteHeader@8 ; Xz_WriteHeader(x,x)
.text:00000B86                 mov     [ebp+var_C], eax
.text:00000B89                 cmp     [ebp+var_C], 0
.text:00000B8D                 jz      short loc_B97
.text:00000B8F                 mov     eax, [ebp+var_C]
.text:00000B92                 jmp     loc_F44
.text:00000B97 ; ---------------------------------------------------------------------------
.text:00000B97
.text:00000B97 loc_B97:                                ; CODE XREF: Xz_Compress(x,x,x,x,x,x)+6Dj
.text:00000B97                 mov     [ebp+var_158], 0
.text:00000BA1                 mov     [ebp+var_15C], 0
.text:00000BAB                 mov     ecx, [ebp+arg_10]
.text:00000BAE                 mov     edx, [ecx+4]
.text:00000BB1                 mov     [ebp+var_160], edx
.text:00000BB7                 mov     [ebp+var_140], 0
.text:00000BBE                 xor     eax, eax
.text:00000BC0                 cmp     [ebp+var_160], 0
.text:00000BC7                 setnz   al
.text:00000BCA                 movzx   ecx, [ebp+var_140]
.text:00000BD1                 or      ecx, eax
.text:00000BD3                 mov     [ebp+var_140], cl
.text:00000BD9                 cmp     [ebp+var_160], 0
.text:00000BE0                 jz      loc_C87
.text:00000BE6                 mov     edx, [ebp+var_158]
.text:00000BEC                 shl     edx, 5
.text:00000BEF                 lea     eax, [ebp+edx+var_138]
.text:00000BF6                 mov     [ebp+var_15C], eax
.text:00000BFC                 mov     ecx, [ebp+var_158]
.text:00000C02                 add     ecx, 1
.text:00000C05                 mov     [ebp+var_158], ecx
.text:00000C0B                 mov     edx, [ebp+var_160]
.text:00000C11                 mov     eax, [edx]
.text:00000C13                 xor     ecx, ecx
.text:00000C15                 mov     edx, [ebp+var_15C]
.text:00000C1B                 mov     [edx], eax
.text:00000C1D                 mov     [edx+4], ecx
.text:00000C20                 mov     eax, [ebp+var_15C]
.text:00000C26                 mov     dword ptr [eax+8], 0
.text:00000C2D                 mov     ecx, [ebp+var_160]
.text:00000C33                 cmp     dword ptr [ecx], 3
.text:00000C36                 jnz     short loc_C5C
.text:00000C38                 mov     edx, [ebp+var_160]
.text:00000C3E                 mov     eax, [edx+4]
.text:00000C41                 sub     eax, 1
.text:00000C44                 mov     ecx, [ebp+var_15C]
.text:00000C4A                 mov     [ecx+0Ch], al
.text:00000C4D                 mov     edx, [ebp+var_15C]
.text:00000C53                 mov     dword ptr [edx+8], 1
.text:00000C5A                 jmp     short loc_C87
.text:00000C5C ; ---------------------------------------------------------------------------
.text:00000C5C
.text:00000C5C loc_C5C:                                ; CODE XREF: Xz_Compress(x,x,x,x,x,x)+116j
.text:00000C5C                 mov     eax, [ebp+var_160]
.text:00000C62                 cmp     dword ptr [eax+0Ch], 0
.text:00000C66                 jz      short loc_C87
.text:00000C68                 mov     ecx, [ebp+var_15C]
.text:00000C6E                 mov     edx, [ebp+var_160]
.text:00000C74                 mov     eax, [edx+8]
.text:00000C77                 mov     [ecx+0Ch], eax
.text:00000C7A                 mov     ecx, [ebp+var_15C]
.text:00000C80                 mov     dword ptr [ecx+8], 4
.text:00000C87
.text:00000C87 loc_C87:                                ; CODE XREF: Xz_Compress(x,x,x,x,x,x)+C0j
.text:00000C87                                         ; Xz_Compress(x,x,x,x,x,x)+13Aj ...
.text:00000C87                 mov     edx, [ebp+var_158]
.text:00000C8D                 shl     edx, 5
.text:00000C90                 lea     eax, [ebp+edx+var_138]
.text:00000C97                 mov     [ebp+var_164], eax
.text:00000C9D                 mov     ecx, [ebp+var_158]
.text:00000CA3                 add     ecx, 1
.text:00000CA6                 mov     [ebp+var_158], ecx
.text:00000CAC                 mov     edx, [ebp+var_164]
.text:00000CB2                 mov     dword ptr [edx], 21h ; '!'
.text:00000CB8                 mov     dword ptr [edx+4], 0
.text:00000CBF                 mov     eax, [ebp+var_164]
.text:00000CC5                 mov     dword ptr [eax+8], 1
.text:00000CCC                 mov     ecx, [ebp+arg_4]
.text:00000CCF                 mov     edx, [ecx]
.text:00000CD1                 push    edx
.text:00000CD2                 call    _Lzma2Enc_WriteProperties@4 ; Lzma2Enc_WriteProperties(x)
.text:00000CD7                 mov     ecx, [ebp+var_164]
.text:00000CDD                 mov     [ecx+0Ch], al
.text:00000CE0                 mov     [ebp+var_B0], offset _MyWrite@12 ; MyWrite(x,x,x)
.text:00000CEA                 mov     edx, [ebp+arg_8]
.text:00000CED                 mov     [ebp+var_AC], edx
.text:00000CF3                 mov     [ebp+var_A8], 0
.text:00000CFD                 mov     [ebp+var_A4], 0
.text:00000D07                 lea     eax, [ebp+var_B0]
.text:00000D0D                 push    eax
.text:00000D0E                 lea     ecx, [ebp+var_150]
.text:00000D14                 push    ecx
.text:00000D15                 call    _XzBlock_WriteHeader@8 ; XzBlock_WriteHeader(x,x)
.text:00000D1A                 mov     [ebp+var_168], eax
.text:00000D20                 cmp     [ebp+var_168], 0
.text:00000D27                 jz      short loc_D34
.text:00000D29                 mov     eax, [ebp+var_168]
.text:00000D2F                 jmp     loc_F44
.text:00000D34 ; ---------------------------------------------------------------------------
.text:00000D34
.text:00000D34 loc_D34:                                ; CODE XREF: Xz_Compress(x,x,x,x,x,x)+207j
.text:00000D34                 mov     [ebp+var_98], offset _SeqCheckInStream_Read@12 ; SeqCheckInStream_Read(x,x,x)
.text:00000D3E                 mov     edx, [ebp+arg_C]
.text:00000D41                 mov     [ebp+var_94], edx
.text:00000D47                 mov     eax, [ebp+arg_0]
.text:00000D4A                 movzx   ecx, word ptr [eax]
.text:00000D4D                 and     ecx, 0Fh
.text:00000D50                 push    ecx
.text:00000D51                 lea     edx, [ebp+var_98]
.text:00000D57                 push    edx
.text:00000D58                 call    _SeqCheckInStream_Init@8 ; SeqCheckInStream_Init(x,x)
.text:00000D5D                 cmp     [ebp+var_160], 0
.text:00000D64                 jz      short loc_D9F
.text:00000D66                 mov     eax, [ebp+arg_4]
.text:00000D69                 lea     ecx, [ebp+var_98]
.text:00000D6F                 mov     [eax+8], ecx
.text:00000D72                 mov     edx, [ebp+var_15C]
.text:00000D78                 push    edx
.text:00000D79                 mov     eax, [ebp+arg_4]
.text:00000D7C                 add     eax, 4
.text:00000D7F                 push    eax
.text:00000D80                 call    _SeqInFilter_Init@8 ; SeqInFilter_Init(x,x)
.text:00000D85                 mov     [ebp+var_16C], eax
.text:00000D8B                 cmp     [ebp+var_16C], 0
.text:00000D92                 jz      short loc_D9F
.text:00000D94                 mov     eax, [ebp+var_16C]
.text:00000D9A                 jmp     loc_F44
.text:00000D9F ; ---------------------------------------------------------------------------
.text:00000D9F
.text:00000D9F loc_D9F:                                ; CODE XREF: Xz_Compress(x,x,x,x,x,x)+244j
.text:00000D9F                                         ; Xz_Compress(x,x,x,x,x,x)+272j
.text:00000D9F                 mov     ecx, [ebp+var_A8]
.text:00000DA5                 mov     [ebp+var_174], ecx
.text:00000DAB                 mov     edx, [ebp+var_A4]
.text:00000DB1                 mov     [ebp+var_170], edx
.text:00000DB7                 cmp     [ebp+var_160], 0
.text:00000DBE                 jz      short loc_DCE
.text:00000DC0                 mov     eax, [ebp+arg_4]
.text:00000DC3                 add     eax, 4
.text:00000DC6                 mov     [ebp+var_214], eax
.text:00000DCC                 jmp     short loc_DDA
.text:00000DCE ; ---------------------------------------------------------------------------
.text:00000DCE
.text:00000DCE loc_DCE:                                ; CODE XREF: Xz_Compress(x,x,x,x,x,x)+29Ej
.text:00000DCE                 lea     ecx, [ebp+var_98]
.text:00000DD4                 mov     [ebp+var_214], ecx
.text:00000DDA
.text:00000DDA loc_DDA:                                ; CODE XREF: Xz_Compress(x,x,x,x,x,x)+2ACj
.text:00000DDA                 mov     edx, [ebp+arg_14]
.text:00000DDD                 push    edx
.text:00000DDE                 mov     eax, [ebp+var_214]
.text:00000DE4                 push    eax
.text:00000DE5                 lea     ecx, [ebp+var_B0]
.text:00000DEB                 push    ecx
.text:00000DEC                 mov     edx, [ebp+arg_4]
.text:00000DEF                 mov     eax, [edx]
.text:00000DF1                 push    eax
.text:00000DF2                 call    _Lzma2Enc_Encode@16 ; Lzma2Enc_Encode(x,x,x,x)
.text:00000DF7                 mov     [ebp+var_178], eax
.text:00000DFD                 mov     ecx, [ebp+var_178]
.text:00000E03                 mov     [ebp+var_17C], ecx
.text:00000E09                 cmp     [ebp+var_17C], 0
.text:00000E10                 jz      short loc_E1D
.text:00000E12                 mov     eax, [ebp+var_17C]
.text:00000E18                 jmp     loc_F44
.text:00000E1D ; ---------------------------------------------------------------------------
.text:00000E1D
.text:00000E1D loc_E1D:                                ; CODE XREF: Xz_Compress(x,x,x,x,x,x)+2F0j
.text:00000E1D                 mov     edx, [ebp+var_90]
.text:00000E23                 mov     [ebp+var_148], edx
.text:00000E29                 mov     eax, [ebp+var_8C]
.text:00000E2F                 mov     [ebp+var_144], eax
.text:00000E35                 mov     ecx, [ebp+var_A8]
.text:00000E3B                 sub     ecx, [ebp+var_174]
.text:00000E41                 mov     edx, [ebp+var_A4]
.text:00000E47                 sbb     edx, [ebp+var_170]
.text:00000E4D                 mov     [ebp+var_150], ecx
.text:00000E53                 mov     [ebp+var_14C], edx
.text:00000E59                 mov     [ebp+var_180], 0
.text:00000E63
.text:00000E63 loc_E63:                                ; CODE XREF: Xz_Compress(x,x,x,x,x,x)+371j
.text:00000E63                 mov     eax, [ebp+var_150]
.text:00000E69                 add     eax, [ebp+var_180]
.text:00000E6F                 and     eax, 3
.text:00000E72                 jz      short loc_E93
.text:00000E74                 mov     ecx, [ebp+var_180]
.text:00000E7A                 mov     [ebp+ecx+var_204], 0
.text:00000E82                 mov     edx, [ebp+var_180]
.text:00000E88                 add     edx, 1
.text:00000E8B                 mov     [ebp+var_180], edx
.text:00000E91                 jmp     short loc_E63
.text:00000E93 ; ---------------------------------------------------------------------------
.text:00000E93
.text:00000E93 loc_E93:                                ; CODE XREF: Xz_Compress(x,x,x,x,x,x)+352j
.text:00000E93                 mov     eax, [ebp+var_180]
.text:00000E99                 lea     ecx, [ebp+eax+var_204]
.text:00000EA0                 push    ecx
.text:00000EA1                 lea     edx, [ebp+var_98]
.text:00000EA7                 push    edx
.text:00000EA8                 call    _SeqCheckInStream_GetDigest@8 ; SeqCheckInStream_GetDigest(x,x)
.text:00000EAD                 mov     eax, [ebp+arg_0]
.text:00000EB0                 movzx   ecx, word ptr [eax]
.text:00000EB3                 push    ecx
.text:00000EB4                 call    _XzFlags_GetCheckSize@4 ; XzFlags_GetCheckSize(x)
.text:00000EB9                 add     eax, [ebp+var_180]
.text:00000EBF                 push    eax
.text:00000EC0                 lea     edx, [ebp+var_204]
.text:00000EC6                 push    edx
.text:00000EC7                 lea     eax, [ebp+var_B0]
.text:00000ECD                 push    eax
.text:00000ECE                 call    _WriteBytes@12  ; WriteBytes(x,x,x)
.text:00000ED3                 mov     [ebp+var_20C], eax
.text:00000ED9                 cmp     [ebp+var_20C], 0
.text:00000EE0                 jz      short loc_EEA
.text:00000EE2                 mov     eax, [ebp+var_20C]
.text:00000EE8                 jmp     short loc_F44
.text:00000EEA ; ---------------------------------------------------------------------------
.text:00000EEA
.text:00000EEA loc_EEA:                                ; CODE XREF: Xz_Compress(x,x,x,x,x,x)+3C0j
.text:00000EEA                 push    offset _g_Alloc
.text:00000EEF                 mov     ecx, [ebp+var_180]
.text:00000EF5                 xor     edx, edx
.text:00000EF7                 mov     eax, [ebp+var_A8]
.text:00000EFD                 sub     eax, ecx
.text:00000EFF                 mov     ecx, [ebp+var_A4]
.text:00000F05                 sbb     ecx, edx
.text:00000F07                 push    ecx
.text:00000F08                 push    eax
.text:00000F09                 mov     edx, [ebp+var_144]
.text:00000F0F                 push    edx
.text:00000F10                 mov     eax, [ebp+var_148]
.text:00000F16                 push    eax
.text:00000F17                 mov     ecx, [ebp+arg_0]
.text:00000F1A                 push    ecx
.text:00000F1B                 call    _Xz_AddIndexRecord@24 ; Xz_AddIndexRecord(x,x,x,x,x,x)
.text:00000F20                 mov     [ebp+var_210], eax
.text:00000F26                 cmp     [ebp+var_210], 0
.text:00000F2D                 jz      short loc_F37
.text:00000F2F                 mov     eax, [ebp+var_210]
.text:00000F35                 jmp     short loc_F44
.text:00000F37 ; ---------------------------------------------------------------------------
.text:00000F37
.text:00000F37 loc_F37:                                ; CODE XREF: Xz_Compress(x,x,x,x,x,x)+40Dj
.text:00000F37                 mov     edx, [ebp+arg_8]
.text:00000F3A                 push    edx
.text:00000F3B                 mov     eax, [ebp+arg_0]
.text:00000F3E                 push    eax
.text:00000F3F                 call    _Xz_WriteFooter@8 ; Xz_WriteFooter(x,x)
.text:00000F44
.text:00000F44 loc_F44:                                ; CODE XREF: Xz_Compress(x,x,x,x,x,x)+51j
.text:00000F44                                         ; Xz_Compress(x,x,x,x,x,x)+72j ...
.text:00000F44                 push    edx
.text:00000F45                 mov     ecx, ebp
.text:00000F47                 push    eax
.text:00000F48                 lea     edx, $LN24
.text:00000F4E                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000F53                 pop     eax
.text:00000F54                 pop     edx
.text:00000F55                 pop     edi
.text:00000F56                 mov     ecx, [ebp+var_4]
.text:00000F59                 xor     ecx, ebp
.text:00000F5B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000F60                 add     esp, 214h
.text:00000F66                 cmp     ebp, esp
.text:00000F68                 call    __RTC_CheckEsp
.text:00000F6D                 mov     esp, ebp
.text:00000F6F                 pop     ebp
.text:00000F70                 retn    18h
.text:00000F70 _Xz_Compress@24 endp
.text:00000F70
.text:00000F70 ; ---------------------------------------------------------------------------
.text:00000F73                 align 4
.text:00000F74 $LN24           dd 4                    ; DATA XREF: Xz_Compress(x,x,x,x,x,x)+428o
.text:00000F78                 dd offset $LN23
.text:00000F7C $LN23           dd 0FFFFFF68h, 88h      ; DATA XREF: .text:00000F78o
.text:00000F84                 dd offset $LN19         ; "checkInStream"
.text:00000F88                 dd 0FFFFFF50h, 10h
.text:00000F90                 dd offset $LN20         ; "seqSizeOutStream"
.text:00000F94                 dd 0FFFFFEB0h, 98h
.text:00000F9C                 dd offset $LN21         ; "block"
.text:00000FA0                 dd 0FFFFFDFCh, 80h
.text:00000FA8                 dd offset $LN22
.text:00000FAC $LN22           dd 667562h              ; DATA XREF: .text:00000FA8o
.text:00000FB0 $LN21           db 'block',0            ; DATA XREF: .text:00000F9Co
.text:00000FB6 $LN20           db 'seqSizeOutStream',0 ; DATA XREF: .text:00000F90o
.text:00000FC7 $LN19           db 'checkInStream',0    ; DATA XREF: .text:00000F84o
.text:00000FD5                 align 10h
.text:00000FE0
.text:00000FE0 ; =============== S U B R O U T I N E =======================================
.text:00000FE0
.text:00000FE0 ; Attributes: bp-based frame
.text:00000FE0
.text:00000FE0 ; __stdcall SeqCheckInStream_Init(x, x)
.text:00000FE0 _SeqCheckInStream_Init@8 proc near      ; CODE XREF: Xz_Compress(x,x,x,x,x,x)+238p
.text:00000FE0
.text:00000FE0 arg_0           = dword ptr  8
.text:00000FE0 arg_4           = dword ptr  0Ch
.text:00000FE0
.text:00000FE0                 push    ebp
.text:00000FE1                 mov     ebp, esp
.text:00000FE3                 mov     eax, [ebp+arg_0]
.text:00000FE6                 mov     dword ptr [eax+8], 0
.text:00000FED                 mov     dword ptr [eax+0Ch], 0
.text:00000FF4                 mov     ecx, [ebp+arg_4]
.text:00000FF7                 push    ecx
.text:00000FF8                 mov     edx, [ebp+arg_0]
.text:00000FFB                 add     edx, 10h
.text:00000FFE                 push    edx
.text:00000FFF                 call    _XzCheck_Init@8 ; XzCheck_Init(x,x)
.text:00001004                 cmp     ebp, esp
.text:00001006                 call    __RTC_CheckEsp
.text:0000100B                 pop     ebp
.text:0000100C                 retn    8
.text:0000100C _SeqCheckInStream_Init@8 endp
.text:0000100C
.text:0000100C ; ---------------------------------------------------------------------------
.text:0000100F                 align 10h
.text:00001010
.text:00001010 ; =============== S U B R O U T I N E =======================================
.text:00001010
.text:00001010 ; Attributes: bp-based frame
.text:00001010
.text:00001010 ; __stdcall SeqCheckInStream_GetDigest(x, x)
.text:00001010 _SeqCheckInStream_GetDigest@8 proc near ; CODE XREF: Xz_Compress(x,x,x,x,x,x)+388p
.text:00001010
.text:00001010 arg_0           = dword ptr  8
.text:00001010 arg_4           = dword ptr  0Ch
.text:00001010
.text:00001010                 push    ebp
.text:00001011                 mov     ebp, esp
.text:00001013                 mov     eax, [ebp+arg_4]
.text:00001016                 push    eax
.text:00001017                 mov     ecx, [ebp+arg_0]
.text:0000101A                 add     ecx, 10h
.text:0000101D                 push    ecx
.text:0000101E                 call    _XzCheck_Final@8 ; XzCheck_Final(x,x)
.text:00001023                 cmp     ebp, esp
.text:00001025                 call    __RTC_CheckEsp
.text:0000102A                 pop     ebp
.text:0000102B                 retn    8
.text:0000102B _SeqCheckInStream_GetDigest@8 endp
.text:0000102B
.text:0000102B ; ---------------------------------------------------------------------------
.text:0000102E                 align 10h
.text:00001030
.text:00001030 ; =============== S U B R O U T I N E =======================================
.text:00001030
.text:00001030 ; Attributes: bp-based frame
.text:00001030
.text:00001030 ; __stdcall SeqCheckInStream_Read(x, x, x)
.text:00001030 _SeqCheckInStream_Read@12 proc near     ; DATA XREF: Xz_Compress(x,x,x,x,x,x):loc_D34o
.text:00001030
.text:00001030 var_8           = dword ptr -8
.text:00001030 var_4           = dword ptr -4
.text:00001030 arg_0           = dword ptr  8
.text:00001030 arg_4           = dword ptr  0Ch
.text:00001030 arg_8           = dword ptr  10h
.text:00001030
.text:00001030                 push    ebp
.text:00001031                 mov     ebp, esp
.text:00001033                 sub     esp, 8
.text:00001036                 push    esi
.text:00001037                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000103E                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001045                 mov     eax, [ebp+arg_0]
.text:00001048                 mov     [ebp+var_4], eax
.text:0000104B                 mov     esi, esp
.text:0000104D                 mov     ecx, [ebp+arg_8]
.text:00001050                 push    ecx
.text:00001051                 mov     edx, [ebp+arg_4]
.text:00001054                 push    edx
.text:00001055                 mov     eax, [ebp+var_4]
.text:00001058                 mov     ecx, [eax+4]
.text:0000105B                 push    ecx
.text:0000105C                 mov     edx, [ebp+var_4]
.text:0000105F                 mov     eax, [edx+4]
.text:00001062                 mov     ecx, [eax]
.text:00001064                 call    ecx
.text:00001066                 cmp     esi, esp
.text:00001068                 call    __RTC_CheckEsp
.text:0000106D                 mov     [ebp+var_8], eax
.text:00001070                 mov     edx, [ebp+arg_8]
.text:00001073                 mov     eax, [edx]
.text:00001075                 push    eax
.text:00001076                 mov     ecx, [ebp+arg_4]
.text:00001079                 push    ecx
.text:0000107A                 mov     edx, [ebp+var_4]
.text:0000107D                 add     edx, 10h
.text:00001080                 push    edx
.text:00001081                 call    _XzCheck_Update@12 ; XzCheck_Update(x,x,x)
.text:00001086                 mov     eax, [ebp+arg_8]
.text:00001089                 mov     ecx, [eax]
.text:0000108B                 xor     edx, edx
.text:0000108D                 mov     eax, [ebp+var_4]
.text:00001090                 add     ecx, [eax+8]
.text:00001093                 adc     edx, [eax+0Ch]
.text:00001096                 mov     eax, [ebp+var_4]
.text:00001099                 mov     [eax+8], ecx
.text:0000109C                 mov     [eax+0Ch], edx
.text:0000109F                 mov     eax, [ebp+var_8]
.text:000010A2                 pop     esi
.text:000010A3                 add     esp, 8
.text:000010A6                 cmp     ebp, esp
.text:000010A8                 call    __RTC_CheckEsp
.text:000010AD                 mov     esp, ebp
.text:000010AF                 pop     ebp
.text:000010B0                 retn    0Ch
.text:000010B0 _SeqCheckInStream_Read@12 endp
.text:000010B0
.text:000010B0 ; ---------------------------------------------------------------------------
.text:000010B3                 align 10h
.text:000010C0
.text:000010C0 ; =============== S U B R O U T I N E =======================================
.text:000010C0
.text:000010C0 ; Attributes: bp-based frame
.text:000010C0
.text:000010C0 ; __stdcall MyWrite(x, x, x)
.text:000010C0 _MyWrite@12     proc near               ; DATA XREF: Xz_Compress(x,x,x,x,x,x)+1C0o
.text:000010C0
.text:000010C0 var_4           = dword ptr -4
.text:000010C0 arg_0           = dword ptr  8
.text:000010C0 arg_4           = dword ptr  0Ch
.text:000010C0 arg_8           = dword ptr  10h
.text:000010C0
.text:000010C0                 push    ebp
.text:000010C1                 mov     ebp, esp
.text:000010C3                 push    ecx
.text:000010C4                 push    esi
.text:000010C5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000010CC                 mov     eax, [ebp+arg_0]
.text:000010CF                 mov     [ebp+var_4], eax
.text:000010D2                 mov     esi, esp
.text:000010D4                 mov     ecx, [ebp+arg_8]
.text:000010D7                 push    ecx
.text:000010D8                 mov     edx, [ebp+arg_4]
.text:000010DB                 push    edx
.text:000010DC                 mov     eax, [ebp+var_4]
.text:000010DF                 mov     ecx, [eax+4]
.text:000010E2                 push    ecx
.text:000010E3                 mov     edx, [ebp+var_4]
.text:000010E6                 mov     eax, [edx+4]
.text:000010E9                 mov     ecx, [eax]
.text:000010EB                 call    ecx
.text:000010ED                 cmp     esi, esp
.text:000010EF                 call    __RTC_CheckEsp
.text:000010F4                 mov     [ebp+arg_8], eax
.text:000010F7                 mov     edx, [ebp+arg_8]
.text:000010FA                 xor     eax, eax
.text:000010FC                 mov     ecx, [ebp+var_4]
.text:000010FF                 add     edx, [ecx+8]
.text:00001102                 adc     eax, [ecx+0Ch]
.text:00001105                 mov     ecx, [ebp+var_4]
.text:00001108                 mov     [ecx+8], edx
.text:0000110B                 mov     [ecx+0Ch], eax
.text:0000110E                 mov     eax, [ebp+arg_8]
.text:00001111                 pop     esi
.text:00001112                 add     esp, 4
.text:00001115                 cmp     ebp, esp
.text:00001117                 call    __RTC_CheckEsp
.text:0000111C                 mov     esp, ebp
.text:0000111E                 pop     ebp
.text:0000111F                 retn    0Ch
.text:0000111F _MyWrite@12     endp
.text:0000111F
.text:0000111F ; ---------------------------------------------------------------------------
.text:00001122                 align 10h
.text:00001130
.text:00001130 ; =============== S U B R O U T I N E =======================================
.text:00001130
.text:00001130 ; Attributes: bp-based frame
.text:00001130
.text:00001130 ; __stdcall SeqInFilter_Init(x, x)
.text:00001130 _SeqInFilter_Init@8 proc near           ; CODE XREF: Xz_Compress(x,x,x,x,x,x)+260p
.text:00001130
.text:00001130 var_8           = dword ptr -8
.text:00001130 var_4           = dword ptr -4
.text:00001130 arg_0           = dword ptr  8
.text:00001130 arg_4           = dword ptr  0Ch
.text:00001130
.text:00001130                 push    ebp
.text:00001131                 mov     ebp, esp
.text:00001133                 sub     esp, 8
.text:00001136                 push    esi
.text:00001137                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000113E                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001145                 mov     eax, [ebp+arg_0]
.text:00001148                 cmp     dword ptr [eax+1Ch], 0
.text:0000114C                 jnz     short loc_1180
.text:0000114E                 mov     esi, esp
.text:00001150                 push    100000h
.text:00001155                 push    offset _g_Alloc
.text:0000115A                 call    dword ptr ds:_g_Alloc
.text:00001160                 cmp     esi, esp
.text:00001162                 call    __RTC_CheckEsp
.text:00001167                 mov     ecx, [ebp+arg_0]
.text:0000116A                 mov     [ecx+1Ch], eax
.text:0000116D                 mov     edx, [ebp+arg_0]
.text:00001170                 cmp     dword ptr [edx+1Ch], 0
.text:00001174                 jnz     short loc_1180
.text:00001176                 mov     eax, 2
.text:0000117B                 jmp     loc_121C
.text:00001180 ; ---------------------------------------------------------------------------
.text:00001180
.text:00001180 loc_1180:                               ; CODE XREF: SeqInFilter_Init(x,x)+1Cj
.text:00001180                                         ; SeqInFilter_Init(x,x)+44j
.text:00001180                 mov     eax, [ebp+arg_0]
.text:00001183                 mov     dword ptr [eax+24h], 0
.text:0000118A                 mov     ecx, [ebp+arg_0]
.text:0000118D                 mov     dword ptr [ecx+20h], 0
.text:00001194                 mov     edx, [ebp+arg_0]
.text:00001197                 mov     dword ptr [edx+28h], 0
.text:0000119E                 push    offset _g_Alloc
.text:000011A3                 push    1
.text:000011A5                 mov     eax, [ebp+arg_4]
.text:000011A8                 mov     ecx, [eax+4]
.text:000011AB                 push    ecx
.text:000011AC                 mov     edx, [eax]
.text:000011AE                 push    edx
.text:000011AF                 mov     eax, [ebp+arg_0]
.text:000011B2                 add     eax, 8
.text:000011B5                 push    eax
.text:000011B6                 call    _BraState_SetFromMethod@20 ; BraState_SetFromMethod(x,x,x,x,x)
.text:000011BB                 mov     [ebp+var_4], eax
.text:000011BE                 cmp     [ebp+var_4], 0
.text:000011C2                 jz      short loc_11C9
.text:000011C4                 mov     eax, [ebp+var_4]
.text:000011C7                 jmp     short loc_121C
.text:000011C9 ; ---------------------------------------------------------------------------
.text:000011C9
.text:000011C9 loc_11C9:                               ; CODE XREF: SeqInFilter_Init(x,x)+92j
.text:000011C9                 mov     esi, esp
.text:000011CB                 push    offset _g_Alloc
.text:000011D0                 mov     ecx, [ebp+arg_4]
.text:000011D3                 mov     edx, [ecx+8]
.text:000011D6                 push    edx
.text:000011D7                 mov     eax, [ebp+arg_4]
.text:000011DA                 add     eax, 0Ch
.text:000011DD                 push    eax
.text:000011DE                 mov     ecx, [ebp+arg_0]
.text:000011E1                 mov     edx, [ecx+8]
.text:000011E4                 push    edx
.text:000011E5                 mov     eax, [ebp+arg_0]
.text:000011E8                 mov     ecx, [eax+10h]
.text:000011EB                 call    ecx
.text:000011ED                 cmp     esi, esp
.text:000011EF                 call    __RTC_CheckEsp
.text:000011F4                 mov     [ebp+var_8], eax
.text:000011F7                 cmp     [ebp+var_8], 0
.text:000011FB                 jz      short loc_1202
.text:000011FD                 mov     eax, [ebp+var_8]
.text:00001200                 jmp     short loc_121C
.text:00001202 ; ---------------------------------------------------------------------------
.text:00001202
.text:00001202 loc_1202:                               ; CODE XREF: SeqInFilter_Init(x,x)+CBj
.text:00001202                 mov     esi, esp
.text:00001204                 mov     edx, [ebp+arg_0]
.text:00001207                 mov     eax, [edx+8]
.text:0000120A                 push    eax
.text:0000120B                 mov     ecx, [ebp+arg_0]
.text:0000120E                 mov     edx, [ecx+14h]
.text:00001211                 call    edx
.text:00001213                 cmp     esi, esp
.text:00001215                 call    __RTC_CheckEsp
.text:0000121A                 xor     eax, eax
.text:0000121C
.text:0000121C loc_121C:                               ; CODE XREF: SeqInFilter_Init(x,x)+4Bj
.text:0000121C                                         ; SeqInFilter_Init(x,x)+97j ...
.text:0000121C                 pop     esi
.text:0000121D                 add     esp, 8
.text:00001220                 cmp     ebp, esp
.text:00001222                 call    __RTC_CheckEsp
.text:00001227                 mov     esp, ebp
.text:00001229                 pop     ebp
.text:0000122A                 retn    8
.text:0000122A _SeqInFilter_Init@8 endp
.text:0000122A
.text:0000122A ; ---------------------------------------------------------------------------
.text:0000122D                 align 10h
.text:00001230
.text:00001230 ; =============== S U B R O U T I N E =======================================
.text:00001230
.text:00001230 ; Attributes: bp-based frame
.text:00001230
.text:00001230 ; __stdcall Xz_EncodeEmpty(x)
.text:00001230                 public _Xz_EncodeEmpty@4
.text:00001230 _Xz_EncodeEmpty@4 proc near
.text:00001230
.text:00001230 var_24          = dword ptr -24h
.text:00001230 var_20          = dword ptr -20h
.text:00001230 var_1C          = dword ptr -1Ch
.text:00001230 var_18          = dword ptr -18h
.text:00001230 var_14          = dword ptr -14h
.text:00001230 var_10          = dword ptr -10h
.text:00001230 var_C           = dword ptr -0Ch
.text:00001230 var_8           = dword ptr -8
.text:00001230 var_4           = dword ptr -4
.text:00001230 arg_0           = dword ptr  8
.text:00001230
.text:00001230                 push    ebp
.text:00001231                 mov     ebp, esp
.text:00001233                 sub     esp, 24h
.text:00001236                 mov     eax, 0CCCCCCCCh
.text:0000123B                 mov     [ebp+var_24], eax
.text:0000123E                 mov     [ebp+var_20], eax
.text:00001241                 mov     [ebp+var_1C], eax
.text:00001244                 mov     [ebp+var_18], eax
.text:00001247                 mov     [ebp+var_14], eax
.text:0000124A                 mov     [ebp+var_10], eax
.text:0000124D                 mov     [ebp+var_C], eax
.text:00001250                 mov     [ebp+var_8], eax
.text:00001253                 mov     [ebp+var_4], eax
.text:00001256                 lea     eax, [ebp+var_20]
.text:00001259                 push    eax
.text:0000125A                 call    _Xz_Construct@4 ; Xz_Construct(x)
.text:0000125F                 mov     ecx, [ebp+arg_0]
.text:00001262                 push    ecx
.text:00001263                 movzx   edx, word ptr [ebp+var_20]
.text:00001267                 push    edx
.text:00001268                 call    _Xz_WriteHeader@8 ; Xz_WriteHeader(x,x)
.text:0000126D                 mov     [ebp+var_4], eax
.text:00001270                 cmp     [ebp+var_4], 0
.text:00001274                 jnz     short loc_1286
.text:00001276                 mov     eax, [ebp+arg_0]
.text:00001279                 push    eax
.text:0000127A                 lea     ecx, [ebp+var_20]
.text:0000127D                 push    ecx
.text:0000127E                 call    _Xz_WriteFooter@8 ; Xz_WriteFooter(x,x)
.text:00001283                 mov     [ebp+var_4], eax
.text:00001286
.text:00001286 loc_1286:                               ; CODE XREF: Xz_EncodeEmpty(x)+44j
.text:00001286                 push    offset _g_Alloc
.text:0000128B                 lea     edx, [ebp+var_20]
.text:0000128E                 push    edx
.text:0000128F                 call    _Xz_Free@8      ; Xz_Free(x,x)
.text:00001294                 mov     eax, [ebp+var_4]
.text:00001297                 push    edx
.text:00001298                 mov     ecx, ebp
.text:0000129A                 push    eax
.text:0000129B                 lea     edx, $LN6_0
.text:000012A1                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000012A6                 pop     eax
.text:000012A7                 pop     edx
.text:000012A8                 add     esp, 24h
.text:000012AB                 cmp     ebp, esp
.text:000012AD                 call    __RTC_CheckEsp
.text:000012B2                 mov     esp, ebp
.text:000012B4                 pop     ebp
.text:000012B5                 retn    4
.text:000012B5 _Xz_EncodeEmpty@4 endp
.text:000012B5
.text:000012B5 ; ---------------------------------------------------------------------------
.text:000012B8 $LN6_0          dd 1                    ; DATA XREF: Xz_EncodeEmpty(x)+6Bo
.text:000012BC                 dd offset $LN5_1
.text:000012C0 $LN5_1          dd 0FFFFFFE0h, 18h      ; DATA XREF: .text:000012BCo
.text:000012C8                 dd offset $LN4_1
.text:000012CC $LN4_1          db 78h, 7Ah, 0          ; DATA XREF: .text:000012C8o
.text:000012CF                 db ?
.text:000012CF _text           ends
.text:000012CF
.rtc$TMZ:000012D0 ; ===========================================================================
.rtc$TMZ:000012D0
.rtc$TMZ:000012D0 ; Segment type: Pure data
.rtc$TMZ:000012D0 ; Segment permissions: Read
.rtc$TMZ:000012D0 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:000012D0                 assume cs:_rtc$TMZ
.rtc$TMZ:000012D0                 ;org 12D0h
.rtc$TMZ:000012D0 ; COMDAT (pick any)
.rtc$TMZ:000012D0 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:000012D0 _rtc$TMZ        ends
.rtc$TMZ:000012D0
.rtc$IMZ:000012D4 ; ===========================================================================
.rtc$IMZ:000012D4
.rtc$IMZ:000012D4 ; Segment type: Pure data
.rtc$IMZ:000012D4 ; Segment permissions: Read
.rtc$IMZ:000012D4 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:000012D4                 assume cs:_rtc$IMZ
.rtc$IMZ:000012D4                 ;org 12D4h
.rtc$IMZ:000012D4 ; COMDAT (pick any)
.rtc$IMZ:000012D4 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:000012D4 _rtc$IMZ        ends
.rtc$IMZ:000012D4
UNDEF:000012E0 ; ===========================================================================
UNDEF:000012E0
UNDEF:000012E0 ; Segment type: Externs
UNDEF:000012E0 ; UNDEF
UNDEF:000012E0 ; __fastcall CrcCalc(x, x)
UNDEF:000012E0                 extrn @CrcCalc@8:near   ; CODE XREF: Xz_WriteHeader(x,x)+5Cp
UNDEF:000012E0                                         ; XzBlock_WriteHeader(x,x)+1F6p ...
UNDEF:000012E4 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:000012E4                 extrn _memcpy:near      ; CODE XREF: Xz_WriteHeader(x,x)+35p
UNDEF:000012E4                                         ; XzBlock_WriteHeader(x,x)+18Fp ...
UNDEF:000012E8                 extrn _XZ_SIG:near      ; DATA XREF: Xz_WriteHeader(x,x)+2Co
UNDEF:000012EC                 extrn ___security_cookie:near
UNDEF:000012EC                                         ; DATA XREF: Xz_WriteHeader(x,x)+20r
UNDEF:000012EC                                         ; XzBlock_WriteHeader(x,x)+1Cr ...
UNDEF:000012F0                 extrn __RTC_CheckEsp:near
UNDEF:000012F0                                         ; CODE XREF: Xz_WriteHeader(x,x)+99p
UNDEF:000012F0                                         ; WriteBytes(x,x,x)+1Bp ...
UNDEF:000012F4 ; __fastcall __security_check_cookie(x)
UNDEF:000012F4                 extrn @__security_check_cookie@4:near
UNDEF:000012F4                                         ; CODE XREF: Xz_WriteHeader(x,x)+8Fp
UNDEF:000012F4                                         ; XzBlock_WriteHeader(x,x)+239p ...
UNDEF:000012F8 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:000012F8                 extrn @_RTC_CheckStackVars@8:near
UNDEF:000012F8                                         ; CODE XREF: Xz_WriteHeader(x,x)+83p
UNDEF:000012F8                                         ; XzBlock_WriteHeader(x,x)+22Cp ...
UNDEF:000012FC                 extrn __RTC_Shutdown:near
UNDEF:000012FC                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00001300                 extrn __RTC_InitBase:near
UNDEF:00001300                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00001304 ; __stdcall Xz_WriteVarInt(x, x, x)
UNDEF:00001304                 extrn _Xz_WriteVarInt@12:near
UNDEF:00001304                                         ; CODE XREF: XzBlock_WriteHeader(x,x)+76p
UNDEF:00001304                                         ; XzBlock_WriteHeader(x,x)+AEp ...
UNDEF:00001308                 extrn _XZ_FOOTER_SIG:near
UNDEF:00001308                                         ; DATA XREF: Xz_WriteFooter(x,x)+1EDo
UNDEF:0000130C                 extrn __aullshr:near    ; CODE XREF: Xz_WriteFooter(x,x)+1ADp
UNDEF:00001310 ; __fastcall CrcUpdate(x, x, x)
UNDEF:00001310                 extrn @CrcUpdate@12:near
UNDEF:00001310                                         ; CODE XREF: WriteBytesAndCrc(x,x,x,x)+Fp
UNDEF:00001314 ; __stdcall Xz_Free(x, x)
UNDEF:00001314                 extrn _Xz_Free@8:near   ; CODE XREF: Xz_AddIndexRecord(x,x,x,x,x,x)+B7p
UNDEF:00001314                                         ; Xz_Encode(x,x,x,x)+76p ...
UNDEF:00001318                 extrn _g_Alloc:near     ; CODE XREF: SeqInFilter_Free(x)+1Bp
UNDEF:00001318                                         ; SeqInFilter_Init(x,x)+2Ap
UNDEF:00001318                                         ; DATA XREF: ...
UNDEF:0000131C                 extrn _g_BigAlloc:near  ; DATA XREF: Xz_Encode(x,x,x,x)+1Fo
UNDEF:00001320 ; __stdcall Xz_Construct(x)
UNDEF:00001320                 extrn _Xz_Construct@4:near
UNDEF:00001320                                         ; CODE XREF: Xz_Encode(x,x,x,x)+1Ap
UNDEF:00001320                                         ; Xz_EncodeEmpty(x)+2Ap
UNDEF:00001324 ; __stdcall Lzma2Enc_Create(x, x)
UNDEF:00001324                 extrn _Lzma2Enc_Create@8:near
UNDEF:00001324                                         ; CODE XREF: Lzma2WithFilters_Create(x)+11p
UNDEF:00001328 ; __stdcall Lzma2Enc_Destroy(x)
UNDEF:00001328                 extrn _Lzma2Enc_Destroy@4:near
UNDEF:00001328                                         ; CODE XREF: Lzma2WithFilters_Free(x)+1Dp
UNDEF:0000132C ; __stdcall XzFlags_GetCheckSize(x)
UNDEF:0000132C                 extrn _XzFlags_GetCheckSize@4:near
UNDEF:0000132C                                         ; CODE XREF: Xz_Compress(x,x,x,x,x,x)+394p
UNDEF:00001330 ; __stdcall Lzma2Enc_Encode(x, x, x, x)
UNDEF:00001330                 extrn _Lzma2Enc_Encode@16:near
UNDEF:00001330                                         ; CODE XREF: Xz_Compress(x,x,x,x,x,x)+2D2p
UNDEF:00001334 ; __stdcall Lzma2Enc_WriteProperties(x)
UNDEF:00001334                 extrn _Lzma2Enc_WriteProperties@4:near
UNDEF:00001334                                         ; CODE XREF: Xz_Compress(x,x,x,x,x,x)+1B2p
UNDEF:00001338 ; __stdcall Lzma2Enc_SetProps(x, x)
UNDEF:00001338                 extrn _Lzma2Enc_SetProps@8:near
UNDEF:00001338                                         ; CODE XREF: Xz_Compress(x,x,x,x,x,x)+40p
UNDEF:0000133C ; __stdcall XzCheck_Init(x, x)
UNDEF:0000133C                 extrn _XzCheck_Init@8:near
UNDEF:0000133C                                         ; CODE XREF: SeqCheckInStream_Init(x,x)+1Fp
UNDEF:00001340 ; __stdcall XzCheck_Final(x, x)
UNDEF:00001340                 extrn _XzCheck_Final@8:near
UNDEF:00001340                                         ; CODE XREF: SeqCheckInStream_GetDigest(x,x)+Ep
UNDEF:00001344 ; __stdcall XzCheck_Update(x, x, x)
UNDEF:00001344                 extrn _XzCheck_Update@12:near
UNDEF:00001344                                         ; CODE XREF: SeqCheckInStream_Read(x,x,x)+51p
UNDEF:00001348 ; __stdcall BraState_SetFromMethod(x, x, x, x, x)
UNDEF:00001348                 extrn _BraState_SetFromMethod@20:near
UNDEF:00001348                                         ; CODE XREF: SeqInFilter_Init(x,x)+86p
UNDEF:00001348
UNDEF:00001348
UNDEF:00001348                 end